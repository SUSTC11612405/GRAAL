class C{  public OMAreaList(){  super(10);  init();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:42.499 -0500",hash_original_method="ADD286CC7B907BF4568C827AC1E89193",hash_generated_method="03E27195D3EF45CA8877FD845E83A195") public BaseDexClassLoader(String dexPath,File optimizedDirectory,String libraryPath,ClassLoader parent){  super(parent);  this.originalPath=dexPath;  this.pathList=new DexPathList(this,dexPath,libraryPath,optimizedDirectory);}  }
class C{  protected void startTransactionTimer(){  if (this.transactionTimerStarted.compareAndSet(false,true)) {    if (sipStack.getTimer() != null) {      TimerTask myTimer=new TransactionTimer();      sipStack.getTimer().schedule(myTimer,BASE_TIMER_INTERVAL,BASE_TIMER_INTERVAL);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void processQuotedMultivaluedTypeParams(VCardParameters parameters,VCardVersion version){  if (version == VCardVersion.V2_1) {    return;  }  List<String> types=parameters.getTypes();  if (types.isEmpty()) {    return;  }  String valueWithComma=null;  for (  String value : types) {    if (value.indexOf(',') >= 0) {      valueWithComma=value;      break;    }  }  if (valueWithComma == null) {    return;  }  types.clear();  int prev=-1, cur;  while ((cur=valueWithComma.indexOf(',',prev + 1)) >= 0) {    types.add(valueWithComma.substring(prev + 1,cur));    prev=cur;  }  types.add(valueWithComma.substring(prev + 1));}  }
class C{  public static Border createEmptyBorder(){  return emptyBorder;}  }
class C{  public void createLoop(final Vec2[] vertices,int count){  assert (m_vertices == null && m_count == 0);  assert (count >= 3);  m_count=count + 1;  m_vertices=new Vec2[m_count];  for (int i=1; i < count; i++) {    Vec2 v1=vertices[i - 1];    Vec2 v2=vertices[i];    if (MathUtils.distanceSquared(v1,v2) < Settings.linearSlop * Settings.linearSlop) {      throw new RuntimeException("Vertices of chain shape are too close together");    }  }  for (int i=0; i < count; i++) {    m_vertices[i]=new Vec2(vertices[i]);  }  m_vertices[count]=new Vec2(m_vertices[0]);  m_prevVertex.set(m_vertices[m_count - 2]);  m_nextVertex.set(m_vertices[1]);  m_hasPrevVertex=true;  m_hasNextVertex=true;}  }
class C{  private void removeGdiSurface(final D3DWindowSurfaceData d3dw){  if (gdiSurfaces != null) {    GDIWindowSurfaceData gdisd=gdiSurfaces.get(d3dw);    if (gdisd != null) {      gdisd.invalidate();      gdiSurfaces.remove(d3dw);    }  }}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public String lookupPrefix(String namespaceURI){  if (namespaceURI == null) {    return null;  }  short type=this.getNodeType();switch (type) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:    return null;case Node.ATTRIBUTE_NODE:{    if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {      return getOwnerElement().lookupPrefix(namespaceURI);    }    return null;  }default :{  return null;}}}  }
class C{  @Override public NativePooledByteBufferOutputStream newOutputStream(int initialCapacity){  return new NativePooledByteBufferOutputStream(mPool,initialCapacity);}  }
class C{  protected void init() throws ConfigurationException, LoggingException {  this.sqlEncoder=new SQLEncoder(logger);}  }
class C{  private double toDouble(IXMLElement elem,String value,double defaultValue,double min,double max) throws IOException {  try {    double d=Double.valueOf(value);    return Math.max(Math.min(d,max),min);  } catch (  NumberFormatException e) {    return defaultValue;  }}  }
class C{  public List<DefaultSpell> load() throws SAXException, IOException {  final GroupsXMLLoader groupsLoader=new GroupsXMLLoader(uri);  final List<URI> groups=groupsLoader.load();  final SpellXMLLoader loader=new SpellXMLLoader();  final List<DefaultSpell> list=new LinkedList<DefaultSpell>();  for (  final URI groupUri : groups) {    logger.debug("Loading spell group [" + groupUri + "]");    list.addAll(loader.load(groupUri));  }  return list;}  }
class C{  @Override public void run(){  ServerSocket serverSocket=setUpListenerSocket();  try {    serverSocket.accept();  } catch (  IOException e) {    throw new ContainerException("Error accepting connection for server socket [" + serverSocket + "]",e);  } finally {    try {      serverSocket.close();    } catch (    IOException e) {      throw new ContainerException("Cannot close server socket [" + serverSocket + "]",e);    }  }  try {    this.doStopServer(this.args);  } catch (  Exception e) {    throw new ContainerException("Cannot stop server",e);  }  try {    serverSocket.close();  } catch (  IOException e) {    throw new ContainerException("Cannot close server socket [" + serverSocket + "]",e);  }}  }
class C{  public void end() throws Exception {  try {    httpStreamHandler.end();  } catch (  Throwable e) {    log.error("Exception while invoking streaming handlers",e);    httpStreamHandler.error(e);    throw e;  }}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public RestoreSnapshotRequest snapshot(String snapshot){  this.snapshot=snapshot;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.933 -0500",hash_original_method="AD0C5D6A617F7C4CAD4929B6BAF77A7F",hash_generated_method="9B10DB69B913282F9475EFAEA3120D4C") public X509Name(boolean reverse,Hashtable lookUp,String dirName){  this(reverse,lookUp,dirName,new X509DefaultEntryConverter());}  }
class C{  private RewriteMatch invokeRunMethod(Object classInstanceToRun,HttpServletRequest httpServletRequest,HttpServletResponse httpServletResponse,FilterChain chain,Object[] matchObjs) throws ServletException, InvocationTargetException {  if (log.isDebugEnabled()) {    log.debug("running " + classStr + "."+ getMethodSignature()+ " ");  }  if (classInstanceToRun == null || runMethod == null)   return null;  RewriteMatch returned=null;  Object[] params=null;  if (runMethodParams != null && runMethodParams.length > 0) {    params=new Object[runMethodParams.length];    int paramMatchCounter=0;    for (int i=0; i < runMethodParams.length; i++) {      Class runMethodParam=runMethodParams[i];      String runMethodParamName=null;      if (runMethodParamNames != null && runMethodParamNames.length > i) {        runMethodParamName=runMethodParamNames[i];      }      Object param;      if (runMethodParamName != null) {        log.debug("need parameter from request called " + runMethodParamName);        Object matchObj=httpServletRequest.getParameter(runMethodParamName);        param=TypeUtils.getConvertedParam(runMethodParam,matchObj);      } else       if (runMethodParam.isAssignableFrom(HttpServletRequest.class)) {        param=httpServletRequest;      } else       if (runMethodParam.isAssignableFrom(HttpServletResponse.class)) {        param=httpServletResponse;      } else       if (runMethodParam.isAssignableFrom(FilterChain.class)) {        param=chain;      } else {        Object matchObj=null;        if (matchObjs != null && matchObjs.length > paramMatchCounter) {          matchObj=matchObjs[paramMatchCounter];        }        param=TypeUtils.getConvertedParam(runMethodParam,matchObj);        paramMatchCounter++;      }      params[i]=param;      if (log.isDebugEnabled()) {        log.debug("argument " + i + " ("+ runMethodParam.getName()+ "): "+ param);      }    }  }  try {    Object objReturned=runMethod.invoke(classInstanceToRun,(Object[])params);    if (jsonHandler) {      returned=new JsonRewriteMatch(objReturned);    } else     if (objReturned != null && objReturned instanceof RewriteMatch) {      returned=(RewriteMatch)objReturned;    }  } catch (  IllegalAccessException e) {    if (log.isDebugEnabled())     log.debug(e);    throw new ServletException(e);  }  return returned;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.188 -0400",hash_original_method="D115C79C5FCCB59668763118EBD8CBBB",hash_generated_method="A64C3FB6A00CFCC4B76D15C8219388AD") private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  public void restartWithSearchQuery(String searchQuery){  mFilter=searchQuery;  if (mAdapter != null) {    mAdapter.clear();  }  if (mListView != null && mListView.getFooterViewsCount() != 0) {    mListView.removeFooterView(mFooterView);  }  if (mProgressBar != null) {    mProgressBar.setVisibility(View.VISIBLE);  }  mStartPage=1;  getLoaderManager().restartLoader(2,null,TVShowFragment.this);}  }
class C{  @Override public void trace(String s){  if (trace) {    System.out.println(s);  }}  }
class C{  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerPickupItem(PlayerPickupItemEvent event){  for (  Wool wool : getWools(Cardinal.getMatch(event.getWorld()))) {    Player player=event.getPlayer();    ItemStack item=event.getItem().getItemStack();    Team team=wool.getTeam();    Match match=Cardinal.getMatch(player);    PlayingPlayerContainer container=match.getPlayingContainer(player);    if (!wool.isComplete() && item.getType().equals(Material.WOOL) && item.getData().getData() == wool.getColor().getData() && team.equals(container)) {      wool.setTouched(true);      if (wool.isShow() && !wool.hasPlayerTouched(player)) {        wool.addPlayerTouched(player);        Channels.getTeamChannel(match,team).sendPrefixedMessage(new LocalizedComponentBuilder(ChatConstant.getConstant("objective.wool.touched"),Components.getName(player).build(),wool.getComponent(),new TeamComponent(wool.getTeam())).build());      }    }  }}  }
class C{  private LiveSetElement createAndAddToCurrentList(RegisterOperand register,LiveSetElement prevElement){  LiveSetElement newElement=new LiveSetElement(register);  if (prevElement == null) {    newElement.setNext(first);    first=newElement;  } else {    newElement.setNext(prevElement.getNext());    prevElement.setNext(newElement);  }  return newElement;}  }
class C{  public static void disposeFonts(){  for (  final Font font : FONTS_TABLE.values()) {    font.dispose();  }  FONTS_TABLE.clear();}  }
class C{  protected List<File> prioritiseProcessedFiles(final File[] files){  final List<File> prioritised=new ArrayList<File>(Arrays.asList(files));  Collections.sort(prioritised,PRIORITY);  return prioritised;}  }
class C{  public boolean contains(Point2D p){  Rectangle2D bounds=getSensitiveBounds();  if (count > 0 && bounds != null && bounds.contains(p)) {    Point2D pt=null;    Point2D cp=null;    for (int i=0; i < count; ++i) {      AffineTransform t=children[i].getInverseTransform();      if (t != null) {        pt=t.transform(p,pt);        cp=pt;      } else {        cp=p;      }      if (children[i].contains(cp)) {        return true;      }    }  }  return false;}  }
class C{  public void testGetParameterDataService(){  System.out.println("getParameterDataService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  ParameterDataService result=instance.getParameterDataService();  assertEquals(mockParameterDataService,result);  setVerifyMode();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("================== TimelineTrack ======================\n");  sb.append(this.header.toString());  sb.append(String.format("instance_uid = 0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%n",this.instance_uid[0],this.instance_uid[1],this.instance_uid[2],this.instance_uid[3],this.instance_uid[4],this.instance_uid[5],this.instance_uid[6],this.instance_uid[7],this.instance_uid[8],this.instance_uid[9],this.instance_uid[10],this.instance_uid[11],this.instance_uid[12],this.instance_uid[13],this.instance_uid[14],this.instance_uid[15]));  sb.append(String.format("track_id = 0x%08x(%d)%n",this.track_id,this.track_id));  sb.append(String.format("track_number = 0x%08x(%d)%n",this.track_number,this.track_number));  sb.append(String.format("sequence = %s%n",this.sequence.toString()));  sb.append("================== EditRate ======================\n");  sb.append(this.edit_rate.toString());  sb.append(String.format("origin = %d%n",this.origin));  return sb.toString();}  }
class C{  public InputSource(String systemId){  setSystemId(systemId);}  }
class C{  public void clear(){  int nI;  for (nI=0; nI < m_state.length; nI++)   m_state[nI]=0;  m_lCount=0;  for (nI=0; nI < m_digestBits.length; nI++)   m_digestBits[nI]=0;  for (nI=0; nI < m_block.length; nI++)   m_block[nI]=0;  m_nBlockIndex=0;}  }
class C{  @Override protected void paintComponent(final Graphics gx){  super.paintComponent(gx);  resetBufferedGraphic();  calculateSizes();  updateOffsetViewWidth();  if (m_firstDraw) {    m_firstDraw=false;    updateHexViewWidth();    updatePreferredSize();  }  drawBackground(bufferGraphics);  drawOffsets(bufferGraphics);  if (isEnabled()) {    drawMouseOverHighlighting(bufferGraphics);  }  if ((m_status == DefinitionStatus.DEFINED) && (m_dataProvider != null)) {    final int bytesToDraw=getBytesToDraw();    if ((bytesToDraw != 0) && !m_dataProvider.hasData(getFirstVisibleOffset(),bytesToDraw)) {      setDefinitionStatus(DefinitionStatus.UNDEFINED);      setEnabled(false);      if (m_updateTimer != null) {        m_updateTimer.setRepeats(false);        m_updateTimer.stop();      }      m_updateTimer=new Timer(1000,new WaitingForDataAction(getFirstVisibleOffset(),bytesToDraw));      m_updateTimer.setRepeats(true);      m_updateTimer.start();      return;    }  }  if (isDataAvailable() || (m_status == DefinitionStatus.UNDEFINED)) {    drawHexView(bufferGraphics);    drawAsciiPanel(bufferGraphics);    if (m_caret.isVisible() && hasFocus()) {      drawCaret(bufferGraphics);    }  }  gx.drawImage(img,0,0,this);}  }
class C{  public void removeEmptyClouds(){  List<SmokeCloud> cloudsToRemove=new ArrayList<>();  for (  SmokeCloud cloud : server.getSmokeCloudList()) {    if (cloud.getCoordsList().size() < 1) {      cloudsToRemove.add(cloud);    } else     if (cloud.getSmokeLevel() < 1) {      server.removeSmokeTerrain(cloud);      cloudsToRemove.add(cloud);    }  }  server.getGame().removeSmokeClouds(cloudsToRemove);}  }
class C{  public boolean isReadOnly(){  return ((DataSortedTableModel)getModel()).isReadOnly();}  }
class C{  private static void generateTestCaseSummaryReport(J2DAnalyzer.SingleResultSetHolder baseSRSH,J2DAnalyzer.SingleResultSetHolder targetSRSH,Map consolBaseResult,Map consolTargetResult,Map testCaseBaseResult,Map testCaseResultCount,Map testCaseTargetResult){  File tcSummaryReportFile=new File(resultsDir,"Testcase_Summary_Report.html");  PrintWriter writer=openFile(tcSummaryReportFile.getAbsolutePath(),HTMLGEN_FILE_NEW);  String header=getHeader(baseSRSH,targetSRSH,"J2DBench - Testcase Summary Report","System_Properties.html");  writer.println(header);  writer.flush();  StringBuffer testResultsStartBuffer=new StringBuffer();  testResultsStartBuffer.append("<TR BGCOLOR=\"#CCCCFF\">");  testResultsStartBuffer.append("<TD><B>Testcase</B></TD>");  testResultsStartBuffer.append("<TD align=\"center\"><B>Score for " + baseBuild + "</B></TD>");  testResultsStartBuffer.append("<TD align=\"center\"><B>Score for " + targetBuild + "</B></TD>");  testResultsStartBuffer.append("<TD align=\"center\"><B>% Speedup</TD>");  testResultsStartBuffer.append("</TR>");  StringBuffer testResultsScoreBuffer=new StringBuffer();  testResultsScoreBuffer.append("<table cols=\"4\" cellspacing=\"0\" " + "cellpadding=\"3\" border=\"1\" " + "width=\"80%\">");  StringBuffer betterResultTags=new StringBuffer();  StringBuffer sameResultTags=new StringBuffer();  StringBuffer worseResultTags=new StringBuffer();  Double baseValue=null, targetValue=null;  String curGroupName=null;  String curTestName=null;  Object[] groupNameArray=groups.toArray();  Arrays.sort(groupNameArray);  Object[] testCaseList=consolBaseResult.keySet().toArray();  Arrays.sort(testCaseList);  writer.println("<br><hr size=\"1\"><br>");  writer.println("<A NAME=\"status\"></A><H3>Status:</H3>");  writer.println("<table cellspacing=\"0\" " + "cellpadding=\"3\" border=\"1\" width=\"80%\">");  for (int j=0; j < groupNameArray.length; j++) {    if (j != 0) {      testResultsScoreBuffer.append("<tr><td colspan=\"4\">&nbsp;" + "<br>&nbsp;</td></tr>");      writer.println("<tr><td colspan=\"5\">&nbsp;<br>&nbsp;" + "</td></tr>");    }    curGroupName=groupNameArray[j].toString();    writer.println("<tr><td colspan=\"5\" valign=\"center\" " + "bgcolor=\"#f0f0f0\">" + "<A NAME=\"status_" + curGroupName + "\"></A>"+ "<font size=\"+1\">Status - "+ groupNames.get(curGroupName)+ "</font></td></tr>");    writer.println("<tr>");    writer.println("<td bgcolor=\"#CCCCFF\"><b>Tests " + "Performance</b></td>");    writer.println("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>BETTER (Num / %)</b></td>");    writer.println("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>SAME (Num / %)</b></td>");    writer.println("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>WORSE (Num / %)</b></td>");    writer.println("<td bgcolor=\"#CCCCFF\" align=\"center\">" + "<b>Total</b></td>");    writer.println("</tr>");    writer.flush();    testResultsScoreBuffer.append("<tr><td colspan=\"4\" " + "valign=\"center\" " + "bgcolor=\"#f0f0f0\">"+ "<A NAME=\"test_result_" + curGroupName + "\"></A><font size=\"+1\">"+ "Test Results - "+ groupNames.get(curGroupName)+ "</font></td></tr>");    testResultsScoreBuffer.append(testResultsStartBuffer);    String tableTags[]=null;    for (int i=0; i < testCaseList.length; i++) {      curTestName=testCaseList[i].toString();      if (curTestName.startsWith(curGroupName)) {        tableTags=generateTestCaseReport(curGroupName,curTestName,baseSRSH,targetSRSH,testCaseResultCount,testCaseBaseResult,testCaseTargetResult);        writer.println(tableTags[0]);        writer.flush();        testResultsScoreBuffer.append(tableTags[1]);      }    }  }  testResultsScoreBuffer.append("</table>");  writer.println("</table>");  writer.println("<br><hr size=\"1\"><br>");  writer.println("<A NAME=\"test_results\"></A><H3>Test Results:</H3>");  writer.println(testResultsScoreBuffer.toString());  writer.flush();  writer.println(getFooter());  writer.flush();  writer.close();}  }
class C{  final protected OutgoingBatch requeryIfEnoughTimeHasPassed(long ts,OutgoingBatch currentBatch){  if (System.currentTimeMillis() - ts > MS_PASSED_BEFORE_BATCH_REQUERIED) {    currentBatch=outgoingBatchService.findOutgoingBatch(currentBatch.getBatchId(),currentBatch.getNodeId());  }  return currentBatch;}  }
class C{  public static Timestamp dueDate(int p_C_PaymentTerm_ID,Timestamp p_DocDate) throws SQLException {  if (p_C_PaymentTerm_ID == 0 || p_DocDate == null)   return null;  Timestamp DueDate=Adempiere.trunc(p_DocDate);  String sql="SELECT * " + "FROM C_PaymentTerm " + "WHERE C_PaymentTerm_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_C_PaymentTerm_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    boolean IsDueFixed="Y".equals(rs.getString("IsDueFixed"));    if (IsDueFixed) {      int FixMonthDay=rs.getInt("FixMonthDay");      int FixMonthOffset=rs.getInt("FixMonthOffset");      int FixMonthCutoff=rs.getInt("FixMonthCutoff");      DueDate=calculateDateDue(p_DocDate,FixMonthDay,FixMonthOffset,FixMonthCutoff);    } else {      int NetDays=rs.getInt("NetDays");      if (NetDays != 0)       DueDate=Adempiere.addDays(DueDate,NetDays);    }  }  rs.close();  pstmt.close();  return DueDate;}  }
class C{  protected ArtilleryCannonWeaponHandler(){  super();}  }
class C{  public final boolean isSupertypeOf(TypeDescriptor<?> source){  return token.isSupertypeOf(source.token);}  }
class C{  public void destroy(){  ApplicationStatus.unregisterActivityStateListener(this);}  }
class C{  public synchronized boolean isEmpty(){  return (timerTable.isEmpty());}  }
class C{  public void registerDirectory(HdfsDirectory dir){  logger.info("Registering direcotry {} for locality metrics.",dir.getHdfsDirPath().toString());  cache.put(dir,new ConcurrentHashMap<FileStatus,BlockLocation[]>());}  }
class C{  public void onLayout(final int position){  Object obj=itemView.getTag(R.id.lv_tag);  if (obj instanceof UDLuaTable) {    final UDLuaTable cellData=(UDLuaTable)obj;    mGlobals.saveContainer(cellData.getLVViewGroup());    mLuaUserData.callCellLayout(cellData,position);    mGlobals.restoreContainer();  }}  }
class C{  public Builder insert(final String inserted){  this.newText=inserted;  return this;}  }
class C{  public PortugueseStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static Shape[] createStandardSeriesShapes(){  Shape[] result=new Shape[10];  double size=6.0;  double delta=size / 2.0;  int[] xpoints;  int[] ypoints;  result[0]=new Rectangle2D.Double(-delta,-delta,size,size);  result[1]=new Ellipse2D.Double(-delta,-delta,size,size);  xpoints=intArray(0.0,delta,-delta);  ypoints=intArray(-delta,delta,delta);  result[2]=new Polygon(xpoints,ypoints,3);  xpoints=intArray(0.0,delta,0.0,-delta);  ypoints=intArray(-delta,0.0,delta,0.0);  result[3]=new Polygon(xpoints,ypoints,4);  result[4]=new Rectangle2D.Double(-delta,-delta / 2,size,size / 2);  xpoints=intArray(-delta,+delta,0.0);  ypoints=intArray(-delta,-delta,delta);  result[5]=new Polygon(xpoints,ypoints,3);  result[6]=new Ellipse2D.Double(-delta,-delta / 2,size,size / 2);  xpoints=intArray(-delta,delta,-delta);  ypoints=intArray(-delta,0.0,delta);  result[7]=new Polygon(xpoints,ypoints,3);  result[8]=new Rectangle2D.Double(-delta / 2,-delta,size / 2,size);  xpoints=intArray(-delta,delta,delta);  ypoints=intArray(0.0,-delta,+delta);  result[9]=new Polygon(xpoints,ypoints,3);  return result;}  }
class C{  public <K,V>void handleRegionCreation(Region<K,V> region) throws ManagementException {  if (!isServiceInitialised("handleRegionCreation")) {    return;  }synchronized (regionOpLock) {    LocalRegion localRegion=(LocalRegion)region;    if (localRegion.isDestroyed()) {      return;    }    RegionMBeanBridge<K,V> bridge=RegionMBeanBridge.getInstance(region);    RegionMXBean regionMBean=new RegionMBean<K,V>(bridge);    ObjectName regionMBeanName=MBeanJMXAdapter.getRegionMBeanName(cacheImpl.getDistributedSystem().getDistributedMember(),region.getFullPath());    ObjectName changedMBeanName=service.registerInternalMBean(regionMBean,regionMBeanName);    service.federate(changedMBeanName,RegionMXBean.class,true);    Notification notification=new Notification(JMXNotificationType.REGION_CREATED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.REGION_CREATED_PREFIX + region.getFullPath());    memberLevelNotifEmitter.sendNotification(notification);    memberMBeanBridge.addRegion(region);  }}  }
class C{  Map<Integer,Class<?>> serializers(){  return reader.getMap(SERIALIZERS,null,null);}  }
class C{  public static <T>FluxTSeq<T> fluxT(Publisher<Flux<T>> nested){  return FluxT.fromPublisher(nested);}  }
class C{  public void addAll(SubRange... subRange){  for (  SubRange newRange : subRange) {    add(newRange);  }}  }
class C{  public int dimension(){  return d;}  }
class C{  protected void saveChecksums(List<CompilationUnit> units){  saveSwcFileChecksums();  saveSignatureChecksums(units);  updateChecksum();}  }
class C{  @Override public boolean isEmpty(){  return this.table.isEmpty();}  }
class C{  protected URL find(String owl){  return getClass().getResource(owl);}  }
class C{  public void onStarted(long timestamp){}  }
class C{  public Notes createNotes(){  return mAdapter.create(Notes.class);}  }
class C{  public StaticTypeFactory(Method method){  this.method=method;}  }
class C{  public void onResume(boolean multitasking){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onResume(multitasking);    }  }}  }
class C{  public synchronized byte[] toByteArray(){  DatagramWriter writer=new DatagramWriter();  writer.write(type.getCode(),CONTENT_TYPE_BITS);  writer.write(version.getMajor(),VERSION_BITS);  writer.write(version.getMinor(),VERSION_BITS);  writer.write(epoch,EPOCH_BITS);  writer.writeLong(sequenceNumber,SEQUENCE_NUMBER_BITS);  length=fragmentBytes.length;  writer.write(length,LENGTH_BITS);  writer.writeBytes(fragmentBytes);  return writer.toByteArray();}  }
class C{  @Override public String globalInfo(){  return "A single cluster for the SubspaceCluster datagenerator";}  }
class C{  public static PanboxFilePairingWriteReturnContainer storePairingFile(File outputFile,String devicename,char[] password,PairingType type,DeviceType devType,String eMail,String firstName,String lastName,PrivateKey privEncKey,X509Certificate encCert,PrivateKey privSignKey,X509Certificate signCert,Map<String,X509Certificate> devices,Collection<VCard> contacts) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException {  logger.debug("PanboxFilePairingUtils : storePairingFile : Storing pairing container to: " + outputFile.getAbsolutePath());  ZipArchiveOutputStream out=new ZipArchiveOutputStream(new FileOutputStream(outputFile));  ZipArchiveEntry entry=new ZipArchiveEntry("devicename");  entry.setSize(devicename.getBytes().length);  out.putArchiveEntry(entry);  out.write(devicename.getBytes());  out.flush();  out.closeArchiveEntry();  entry=new ZipArchiveEntry("email");  entry.setSize(eMail.getBytes().length);  out.putArchiveEntry(entry);  out.write(eMail.getBytes());  out.flush();  out.closeArchiveEntry();  entry=new ZipArchiveEntry("firstname");  entry.setSize(firstName.getBytes().length);  out.putArchiveEntry(entry);  out.write(firstName.getBytes());  out.flush();  out.closeArchiveEntry();  entry=new ZipArchiveEntry("lastname");  entry.setSize(lastName.getBytes().length);  out.putArchiveEntry(entry);  out.write(lastName.getBytes());  out.flush();  out.closeArchiveEntry();  KeyPair devKey=CryptCore.generateKeypair();  X509Certificate devCert=CryptCore.createSelfSignedX509Certificate(devKey.getPrivate(),devKey.getPublic(),new PairingIPersonDummy(eMail,firstName,lastName));  KeyStore devKeyStore=KeyStore.getInstance("PKCS12");  devKeyStore.load(null,null);  devKeyStore.setKeyEntry(devicename,(Key)devKey.getPrivate(),password,new Certificate[]{devCert});  ByteArrayOutputStream baos=new ByteArrayOutputStream();  devKeyStore.store(baos,password);  baos.flush();  byte[] data=baos.toByteArray();  entry=new ZipArchiveEntry("devicekey.p12");  entry.setSize(data.length);  out.putArchiveEntry(entry);  out.write(data);  out.flush();  out.closeArchiveEntry();  baos=new ByteArrayOutputStream();  ByteArrayOutputStream deviceNamesFile=new ByteArrayOutputStream();  KeyStore deviceKeyStore=KeyStore.getInstance("BKS");  deviceKeyStore.load(null,null);  int i=0;  for (  Entry<String,X509Certificate> device : devices.entrySet()) {    deviceKeyStore.setCertificateEntry("device" + i,device.getValue());    deviceNamesFile.write(("device" + i + DELIMITER+ device.getKey()+ "\n").getBytes());    ++i;  }  deviceKeyStore.store(baos,password);  baos.flush();  deviceNamesFile.flush();  byte[] data2=deviceNamesFile.toByteArray();  entry=new ZipArchiveEntry("knownDevices.list");  entry.setSize(data2.length);  out.putArchiveEntry(entry);  out.write(data2);  out.flush();  data=baos.toByteArray();  entry=new ZipArchiveEntry("knownDevices.bks");  entry.setSize(data.length);  out.putArchiveEntry(entry);  out.write(data);  out.flush();  File tempContacts=File.createTempFile("panboxContacts",null);  AbstractAddressbookManager.exportContacts(contacts,tempContacts);  FileInputStream fis=new FileInputStream(tempContacts);  data=new byte[(int)tempContacts.length()];  fis.read(data);  fis.close();  tempContacts.delete();  entry=new ZipArchiveEntry("contacts.vcard");  entry.setSize(data.length);  out.putArchiveEntry(entry);  out.write(data);  out.flush();  KeyStore ownerKeyStore=null;  if (type == PairingType.MASTER) {    ownerKeyStore=KeyStore.getInstance("PKCS12");    ownerKeyStore.load(null,null);    ownerKeyStore.setKeyEntry("ownerEncKey",privEncKey,password,new Certificate[]{encCert});    ownerKeyStore.setKeyEntry("ownerSignKey",privSignKey,password,new Certificate[]{signCert});    entry=new ZipArchiveEntry("ownerKeys.p12");  } else {    ownerKeyStore=KeyStore.getInstance("BKS");    ownerKeyStore.load(null,null);    ownerKeyStore.setCertificateEntry("ownerEncCert",encCert);    ownerKeyStore.setCertificateEntry("ownerSignCert",signCert);    entry=new ZipArchiveEntry("ownerCerts.bks");  }  baos=new ByteArrayOutputStream();  ownerKeyStore.store(baos,password);  baos.flush();  data=baos.toByteArray();  entry.setSize(data.length);  out.putArchiveEntry(entry);  out.write(data);  out.flush();  out.closeArchiveEntry();  out.flush();  out.close();  logger.debug("PanboxFilePairingUtils : storePairingFile : Storing pairing container finished.");  return new PanboxFilePairingWriteReturnContainer(devicename,devCert,devType);}  }
class C{  private boolean rangeContainsReserved(int ropRangeStart,int width){  for (int i=ropRangeStart; i < (ropRangeStart + width); i++) {    if (reservedRopRegs.get(i)) {      return true;    }  }  return false;}  }
class C{  protected void saveSelection(){  if (detail == null)   return;  log.config("OK=" + m_ok);  if (!m_ok) {    m_results.clear();    detail.removeAll();    detail=null;    return;  }  if (p_multiSelection) {    m_results.clear();    m_results.addAll(getSelectedRowKeys());  } else {    Integer data=getSelectedRowKey();    if (data != null)     m_results.add(data);  }  detail.removeAll();  detail=null;}  }
class C{  @Override public void scan() throws Exception {  if (getContexts() == null) {    throw new IllegalArgumentException("No HandlerContainer");  }  Resource r=Resource.newResource(getWebAppDir());  if (!r.exists()) {    throw new IllegalArgumentException("No such webapps resource " + r);  }  if (!r.isDirectory()) {    throw new IllegalArgumentException("Not directory webapps resource " + r);  }  String[] files=r.list();  files:   for (int f=0; (files != null) && (f < files.length); f++) {    String context=files[f];    if (context.equalsIgnoreCase("CVS/") || context.equalsIgnoreCase("CVS") || context.startsWith(".")) {      continue;    }    Resource app=r.addPath(r.encode(context));    if (context.toLowerCase().endsWith(".war") || context.toLowerCase().endsWith(".jar")) {      context=context.substring(0,context.length() - 4);      Resource unpacked=r.addPath(context);      if ((unpacked != null) && unpacked.exists() && unpacked.isDirectory()) {        Log.debug(context + " already exists.");        continue;      }    } else     if (!app.isDirectory()) {      Log.debug(app + " Not directory");      continue;    }    if (context.equalsIgnoreCase("root") || context.equalsIgnoreCase("root/")) {      context=URIUtil.SLASH;    } else {      context="/" + context;    }    if (context.endsWith("/") && (context.length() > 0)) {      context=context.substring(0,context.length() - 1);    }    if (!getAllowDuplicates()) {      Handler[] installed=getContexts().getChildHandlersByClass(ContextHandler.class);      for (int i=0; i < installed.length; i++) {        ContextHandler c=(ContextHandler)installed[i];        if (context.equals(c.getContextPath())) {          if (Log.isDebugEnabled()) {            Log.debug(context + " Context were equal; duplicate!");          }          continue files;        }        String path;        if (c instanceof WebAppContext) {          path=Resource.newResource(((WebAppContext)c).getWar()).getFile().getAbsolutePath();        } else {          path=c.getBaseResource().getFile().getAbsolutePath();        }        if ((path != null) && path.equals(app.getFile().getAbsolutePath())) {          if (Log.isDebugEnabled()) {            Log.debug(path + " Paths were equal; duplicate!");          }          continue files;        }      }    }    WebAppContext wah=null;    HandlerCollection contexts=getContexts();    if ((contexts instanceof ContextHandlerCollection) && WebAppContext.class.isAssignableFrom(((ContextHandlerCollection)contexts).getContextClass())) {      try {        wah=(WebAppContext)((ContextHandlerCollection)contexts).getContextClass().newInstance();      } catch (      Exception e) {        throw new Error(e);      }    } else {      wah=new WebAppContext();    }    wah.setContextPath(context);    if (getConfigurationClasses() != null) {      wah.setConfigurationClasses(getConfigurationClasses());    }    if (getDefaultsDescriptor() != null) {      wah.setDefaultsDescriptor(getDefaultsDescriptor());    }    wah.setExtractWAR(isExtract());    wah.setWar(app.toString());    wah.setParentLoaderPriority(isParentLoaderPriority());    Enumeration<?> names=_attributes.getAttributeNames();    while (names.hasMoreElements()) {      String name=(String)names.nextElement();      wah.setAttribute(name,_attributes.getAttribute(name));    }    Log.debug("AndroidWebAppDeployer: prepared " + app.toString());    contexts.addHandler(wah);    _deployed.add(wah);    wah.start();  }}  }
class C{  public static final VariableElement elementFromDeclaration(VariableTree node){  VariableElement elt=(VariableElement)InternalUtils.symbol(node);  return elt;}  }
class C{  public double distance(final MutableDouble3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  @AssistedInject public RunnerImpl(@NotNull RunnerLocalizationConstant locale,@NotNull RunnerCounter runnerCounter,@NotNull GetEnvironmentsUtil util,@NotNull @Assisted RunOptions runOptions){  this(locale,runnerCounter,util,runOptions,SYSTEM,null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public DtoTaxServiceImpl(final DtoFactory dtoFactory,final GenericService<Tax> taxGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,taxGenericService,adaptersRepository);}  }
class C{  public void shuffle(Random rand){  for (int i=_pos; i-- > 1; ) {    swap(i,rand.nextInt(i));  }}  }
class C{  @Override public boolean supportsTransactionIsolationLevel(int level) throws SQLException {  debugCodeCall("supportsTransactionIsolationLevel");  if (level == Connection.TRANSACTION_READ_UNCOMMITTED) {    PreparedStatement prep=conn.prepareAutoCloseStatement("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?");    prep.setString(1,"MULTI_THREADED");    ResultSet rs=prep.executeQuery();    if (rs.next() && rs.getString(1).equals("1")) {      return false;    }  }  return true;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void scrollRectToVisible(Rectangle aRect){  Container parent;  int dx=getX(), dy=getY();  for (parent=getParent(); !(parent == null) && !(parent instanceof JComponent) && !(parent instanceof CellRendererPane); parent=parent.getParent()) {    Rectangle bounds=parent.getBounds();    dx+=bounds.x;    dy+=bounds.y;  }  if (!(parent == null) && !(parent instanceof CellRendererPane)) {    aRect.x+=dx;    aRect.y+=dy;    ((JComponent)parent).scrollRectToVisible(aRect);    aRect.x-=dx;    aRect.y-=dy;  }}  }
class C{  public static void delete(String path){  FilePath.get(path).delete();}  }
class C{  public void deleteRepository(final String namespace,final UUID uuid) throws Exception {  final ConnectOptions opts=newConnectOptions(getRepositoryBaseURLForNamespace(namespace),uuid,null);  opts.method="DELETE";  JettyResponseListener response=null;  try {    checkResponseCode(response=doConnect(opts));  }  finally {    if (response != null)     response.abort();  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Seeker.getInstance().getTotalVideoDuration());}  }
class C{  public AnimatedGIFTexture(String name,int resourceId,int textureSize){  super(TextureType.DIFFUSE,name);  mTextureSize=textureSize;  mResourceId=resourceId;  loadGIF();}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobKOctetsSupported);}  }
class C{  protected RoadObject createRoadFromPoints(int id,int[] xpoints,int[] ypoints,int nPoints){  RoadPoint[] roadPoints=new RoadPoint[nPoints - 2];  Intersection from=findIntersection(xpoints[0],ypoints[0]);  int fromBefore=from.getRoadCount();  Intersection to=findIntersection(xpoints[nPoints - 1],ypoints[nPoints - 1]);  int toBefore=to.getRoadCount();  if (from == null) {    logger.warning("no from intersection for " + xpoints[0] + ", "+ ypoints[0]);  }  if (to == null) {    logger.warning("no to intersection for " + xpoints[nPoints - 1] + ", "+ ypoints[nPoints - 1]);  }  String name="road";  Road road=createRoad(id,name + "-" + id,from,to,defaultRoadClass);  if (fromBefore + 1 != from.getRoadCount())   logger.severe("huh? " + from + " had "+ fromBefore+ " roads before and now "+ from.getRoadCount());  if (toBefore + 1 != to.getRoadCount())   logger.severe("huh? " + to + " had "+ toBefore+ " roads before and now "+ to.getRoadCount());  int width=roadsMade % 5;  roadsMade++;  if (logger.isLoggable(Level.INFO)) {    logger.info("road # " + roadsMade + " "+ road+ " has "+ nPoints+ " points");  }  if (!showLines && drawIntersections) {    OMPoint point=new YellowPoint(xpoints[0],ypoints[0],10);    toDraw.add(point);  }  for (int i=1; i < nPoints - 1; i++) {    roadPoints[i - 1]=new RoadPoint(road,createLatLonPoint(xpoints[i],ypoints[i]),this);    if (drawIntersections) {      if (showLines) {        OMLine line=new YellowLine(xpoints[i - 1],ypoints[i - 1],xpoints[i],ypoints[i],width);        toDraw.add(line);        toDraw.add(new OMText((xpoints[i - 1] - xpoints[i]) / 2 + xpoints[i - 1],(ypoints[i - 1] - ypoints[i]) / 2 + ypoints[i - 1] - 5,"" + roadsMade,0));      } else {        OMPoint point=new YellowPoint(xpoints[i],ypoints[i],10);        toDraw.add(point);      }    }  }  if (drawIntersections) {    if (showLines) {      OMLine line=new YellowLine(xpoints[nPoints - 2],ypoints[nPoints - 2],xpoints[nPoints - 1],ypoints[nPoints - 1],width);      toDraw.add(line);      toDraw.add(new OMText((xpoints[nPoints - 2] - xpoints[nPoints - 1]) / 2 + xpoints[nPoints - 2],(ypoints[nPoints - 2] - ypoints[nPoints - 1]) / 2 + ypoints[nPoints - 2] - 5,"" + roadsMade,0));      line.addArrowHead(true);    } else {      OMPoint point=new YellowPoint(xpoints[nPoints - 1],ypoints[nPoints - 1],10);      toDraw.add(point);    }  }  if (to == from && nPoints == 2) {    deleteRoad(road);    return null;  }  road.setRoadPoints(roadPoints);  if (!road.getFirstIntersection().equals(from))   logger.severe("huh? " + road + " first inter "+ road.getFirstIntersection()+ " not "+ from);  if (!road.getSecondIntersection().equals(to))   logger.severe("huh? " + road + " second inter "+ road.getSecondIntersection()+ " not "+ to);  if (road.getPoints().length < 2)   logger.warning("Error : somehow made a road " + road + " with too few points."); else   if (logger.isLoggable(Level.INFO)) {  }  return road;}  }
class C{  protected final static int numWords(final long size){  if (ASSERTS)   assert (size + WORD_MASK) >>> LOG2_BITS_PER_WORD <= Integer.MAX_VALUE;  return (int)((size + WORD_MASK) >>> LOG2_BITS_PER_WORD);}  }
class C{  public static String makeHexString(int value){  return "#" + Integer.toHexString(value).substring(2);}  }
class C{  public String convertClientId(FacesContext context,String clientId){  if ((context == null) || (clientId == null)) {    throw new NullPointerException();  }  return (clientId);}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public static Angle greatCircleDistance(LatLon p1,LatLon p2){  if ((p1 == null) || (p2 == null)) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  double a=Math.sin((lat2 - lat1) / 2.0);  double b=Math.sin((lon2 - lon1) / 2.0);  double c=a * a + +Math.cos(lat1) * Math.cos(lat2) * b* b;  double distanceRadians=2.0 * Math.asin(Math.sqrt(c));  return Double.isNaN(distanceRadians) ? Angle.ZERO : Angle.fromRadians(distanceRadians);}  }
class C{  public IllegalMonitorStateException(java.lang.String s){  super(s);}  }
class C{  @Override public CompletableFuture<T> firstValue(){  return CompletableFuture.supplyAsync(null,exec);}  }
class C{  private void validateBoolean(FacesContext context,UIComponent uiComponent,String value){  if (!ADMValidator.isBoolean(value)) {    Object[] args=null;    String label=JSFUtils.getLabel(uiComponent);    if (label != null) {      args=new Object[]{label};    }    ValidationException e=new ValidationException(ValidationException.ReasonEnum.BOOLEAN,label,null);    String message=JSFUtils.getText(e.getMessageKey(),args,context);    throw getException(message);  }}  }
class C{  public UnloadStrandedTurn(int[] ids){  super(IPlayer.PLAYER_NONE);  if (null == ids) {    throw new IllegalArgumentException("the passed array of ids is null");  }  if (0 == ids.length) {    throw new IllegalArgumentException("the passed array of ids is empty");  }  entityIds=new int[ids.length];  System.arraycopy(ids,0,entityIds,0,ids.length);}  }
class C{  public Spannable fromXhtml(String src) throws ParserConfigurationException, SAXException, IOException {  return (fromXhtml(SAXParserFactory.newInstance().newSAXParser(),src));}  }
class C{  private void doJazziness(View item,int position,int scrollDirection,AbsListView view){  if (mIsScrolling) {    if (mOnlyAnimateNewItems && mAlreadyAnimatedItems.contains(position))     return;    if (mOnlyAnimateOnFling && !mIsFlingEvent)     return;    if ((view instanceof ListView)) {      ListView listView=(ListView)view;      if (position < listView.getHeaderViewsCount() || position >= (listView.getAdapter().getCount() - listView.getFooterViewsCount())) {        return;      }    }    if (mMaxVelocity > MAX_VELOCITY_OFF && mMaxVelocity < getVelocity())     return;    if (mSimulateGridWithList) {      ViewGroup itemRow=(ViewGroup)item;      for (int i=0; i < itemRow.getChildCount(); i++)       doJazzinessImpl(itemRow.getChildAt(i),position,scrollDirection);    } else {      doJazzinessImpl(item,position,scrollDirection);    }    mAlreadyAnimatedItems.add(position);  }}  }
class C{  @RequestMapping(value="/test",method=RequestMethod.POST) public BasicCase create(@RequestBody BasicCase basicCase){  return null;}  }
class C{  public void close(){  m_graph=null;  m_reilGraph=null;  m_function.close();  m_function.removeListener(m_listener);}  }
class C{  public static IndicatorViewPart openView(){  IWorkbenchPage activePage=Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();  IndicatorViewPart view=(IndicatorViewPart)activePage.findView(VIEW_ID);  if (view == null) {    try {      view=(IndicatorViewPart)activePage.showView(VIEW_ID);    } catch (    PartInitException e) {      e.printStackTrace();    }  }  return view;}  }
class C{  public void accesskey(float offset,char key){  TimingSpecifier ts=new AccesskeyTimingSpecifier(owner,isBegin,offset,key);  timingSpecifiers.add(ts);}  }
class C{  public ProjectNNSubspace(Projector projector){  super(projector);}  }
class C{  public String repositoryUrl(String account,String collection,String project,String repoName){  Objects.requireNonNull(project,"Project name required");  Objects.requireNonNull(repoName,"Repository name required");  return getTeamBaseUrl(account,collection) + format(REPOSITORY,project,repoName) + getApiVersion();}  }
class C{  public void commitTransactionStage3() throws IOException {  getRollForwardFile(false).delete();  if (inTransaction)   finishTransaction();}  }
class C{  void printError(String error,Path auditReport) throws ServerException {  printRow("[ERROR] " + error + "!\n",auditReport);}  }
class C{  private static void printToFile(Document doc,final String OUTPUT_PATH){  try {    OutputFormat format=new OutputFormat(doc);    format.setIndenting(true);    XMLSerializer serializer=new XMLSerializer(new FileOutputStream(new File(OUTPUT_PATH)),format);    serializer.serialize(doc);  } catch (  IOException e) {    System.err.println("ERR Could not write signalSystemsConfig file.\n" + e);  }}  }
class C{  private void updateGraph(){  if (mMeasurements == null) {    mMeasurements=new LineGraphSeries<>();    gvGraph.addSeries(mMeasurements);  }  if (highlight == null) {    highlight=new PointsGraphSeries<>();    highlight.setColor(Color.argb(100,255,255,0));    gvGraph.addSeries(highlight);  }  if (mCurrentLevel != -1) {    mMeasurements.appendData(new DataPoint(graph2LastXValue,mCurrentLevel),true,60);  } else {    mMeasurements.appendData(new DataPoint(graph2LastXValue,-100d),true,60);  }  if (mCurrentLevel > -60 && mCurrentLevel < -1) {    highlight.appendData(new DataPoint(graph2LastXValue,mCurrentLevel),true,60);  } else {    highlight.appendData(new DataPoint(graph2LastXValue,-105d),true,60);  }  graph2LastXValue+=1d;  mCurrentLevel=-1;}  }
class C{  public void appendOutBuffer(Object obj,byte[] data,int offset,int len,boolean close){  if (len > 0) {    collector().appendOutBuffer(getRuleName(),obj,data,offset,len);  }  if (close) {    collector().recordOutBuffer(getRuleName(),obj);  }}  }
class C{  public boolean isBookmarkingEnabled(){  return bookmarkingEnabled;}  }
class C{  private void addFileRequests(File directory,Requests requests,IRequestProcessor requestProcessor,IClientEnvironment clientEnvironment) throws IOException {  final DirectoryObject directoryObject=clientEnvironment.getCvsFileSystem().getLocalFileSystem().getDirectoryObject(directory);  final String relativePath=directoryObject.toUnixPath();  String repository=getRepositoryRoot(clientEnvironment);  if (!relativePath.equals(".")) {    repository+='/' + relativePath;  }  requests.addRequest(new DirectoryRequest(relativePath,repository));  final File[] files=directory.listFiles();  if (files == null) {    return;  }  final List<File> subdirectories=new ArrayList();  for (  final File file : files) {    if (file.isDirectory()) {      final DirectoryObject subDirObject=clientEnvironment.getCvsFileSystem().getLocalFileSystem().getDirectoryObject(file);      if (clientEnvironment.getIgnoreFileFilter().shouldBeIgnored(subDirObject,clientEnvironment.getCvsFileSystem())) {        continue;      }      subdirectories.add(file);    } else {      final FileObject fileObject=clientEnvironment.getCvsFileSystem().getLocalFileSystem().getFileObject(file);      if (clientEnvironment.getIgnoreFileFilter().shouldBeIgnored(fileObject,clientEnvironment.getCvsFileSystem())) {        continue;      }      final KeywordSubstitution keywordSubstMode=getKeywordSubstMode(file.getName());      final boolean writable=clientEnvironment.getLocalFileReader().isWritable(fileObject,clientEnvironment.getCvsFileSystem());      if (keywordSubstMode != null) {        requests.addKoptRequest(keywordSubstMode);      }      requests.addModifiedRequest(fileObject,keywordSubstMode == KeywordSubstitution.BINARY,writable);    }  }  for (  final File subdirectory : subdirectories) {    addFileRequests(subdirectory,requests,requestProcessor,clientEnvironment);  }}  }
class C{  private int skipWhitespace(int ch){  for (; ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r'; ch=read()) {  }  return ch;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (e.getSource() == button) {    popup.show(panel);    return;  }  if (e.getSource() == textfield) {    fireValueChanged();    return;  }  if (e.getSource() == popup) {    if (e.getActionCommand() == TreePopup.ACTION_CANCELED) {      popup.setVisible(false);      textfield.requestFocus();      return;    }    TreePath path=popup.getTree().getSelectionPath();    final Object comp=path != null ? path.getLastPathComponent() : null;    if (comp instanceof ClassNode) {      ClassNode sel=(path != null) ? (ClassNode)comp : null;      String newClass=(sel != null) ? sel.getClassName() : null;      if (newClass != null && newClass.length() > 0) {        String val=textfield.getText();        val=(val.length() > 0) ? val + ClassListParameter.LIST_SEP + newClass : newClass;        textfield.setText(val);        popup.setVisible(false);        fireValueChanged();      }    }    return;  }  LoggingUtil.warning("actionPerformed triggered by unknown source: " + e.getSource());}  }
class C{  private void removeIcon(){  if (iconAdded && tray != null) {    tray.remove(trayIcon);    iconAdded=false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.542 -0500",hash_original_method="BAB31B5D41D1F7BEE0FF6A7B649DDB38",hash_generated_method="C9A60E4F7AC3C08B42FE428C72B41A85") public void wakeup(){  if (this.waiter == null) {    throw new IllegalStateException("Nobody waiting on this object.");  }  this.cond.signalAll();}  }
class C{  public CharSequenceReader(CharSequence seq){  this.seq=checkNotNull(seq);}  }
class C{  public static final String createXPATHMessage(String msgKey,Object args[]){  return createXPATHMsg(XPATHBundle,msgKey,args);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.093 -0500",hash_original_method="7E7FC96AF2763DCE3DA2004144A94138",hash_generated_method="9796C302A4192B7DCB46D87DA5E6D425") @Deprecated public void gcSoftReferences(){}  }
class C{  public void storeIndividual(final EvolutionState state,String filename,Individual ind){  try {    File file=openFile(state,filename);    int log=state.output.addLog(file,Output.V_NO_GENERAL - 1,false,!state.parameters.getBoolean(new Parameter(P_COMPRESS),null,false),state.parameters.getBoolean(new Parameter(P_COMPRESS),null,false));    ind.printIndividual(state,log,Output.V_NO_GENERAL);    state.output.message("Best Individual stored in " + filename);  } catch (  Exception e) {    state.output.error("Exception " + e);  }}  }
class C{  public void addEventListener(final DebugEventListener listener){  listeners.addListener(listener);}  }
class C{  private InternalManagedWindow buildQuitDialog(){  JComponent content=new JComponent(){  };  content.setLayout(new GridLayout(1,2,PADDING,PADDING));  content.setBorder(BorderFactory.createEmptyBorder(PADDING,PADDING,PADDING,PADDING));  content.setFocusCycleRoot(true);  content.setFocusTraversalPolicy(new LimitingFocusTraversalPolicy());  yesButton=new JButton();  yesButton.setText("Yes");  yesButton.setMnemonic(KeyEvent.VK_Y);  yesButton.addActionListener(new QuitConfirmCB());  content.add(yesButton);  JButton noButton=new JButton();  noButton.setText("No");  noButton.setMnemonic(KeyEvent.VK_N);  noButton.addActionListener(new QuitCancelCB());  content.add(noButton);  InternalManagedWindow window=new InternalManagedWindow("quit","Quit");  window.setContent(content);  window.setMinimizable(false);  window.setHideOnClose(true);  window.setMovable(false);  return window;}  }
class C{  public boolean hasExplicitName(){  return mName != null;}  }
class C{  public void clear(){  this.attributes.clear();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public FailedLoginException(String msg){  super(msg);}  }
class C{  Env<AttrContext> methodEnv(JCMethodDecl tree,Env<AttrContext> env){  Env<AttrContext> localEnv=env.dup(tree,env.info.dup(env.info.scope.dupUnshared()));  localEnv.enclMethod=tree;  localEnv.info.scope.owner=tree.sym;  if (tree.sym.type != null) {    localEnv.info.returnResult=attr.new ResultInfo(VAL,tree.sym.type.getReturnType());  }  if ((tree.mods.flags & STATIC) != 0)   localEnv.info.staticLevel++;  return localEnv;}  }
class C{  public void handleGET(CoapExchange exchange){  exchange.respond(ResponseCode.METHOD_NOT_ALLOWED);}  }
class C{  public void widgetSelected(SelectionEvent e){  readButtons();switch (type) {case MENU:    int buttonId=((Integer)object).intValue();switch (buttonId) {case PROVE_BUTTON:    makeProof(null,false,true);  break;case TEST_BUTTON:windowShell=decomposeHandler.windowShell;decomposeHandler.location=windowShell.getLocation();windowShell.close();if (windowShell != null) {if (windowShell.isDisposed()) {System.out.println("closing disposes of window");} else {windowShell.dispose();}if (windowShell == null) {System.out.println("Closing nullifies");}}raiseWindow();break;}break;case ACTION:hasChanged=true;NodeRepresentation nodeObj=(NodeRepresentation)object;if (nodeObj.nodeType == NodeRepresentation.OR_DECOMP) {decomposeHandler.caseAction(nodeObj);} else {switch (nodeObj.nodeSubtype) {case NodeRepresentation.AND_TYPE:decomposeHandler.andAction(nodeObj);break;case NodeRepresentation.OR_TYPE:decomposeHandler.orAction(nodeObj);break;case NodeRepresentation.IMPLIES_TYPE:decomposeHandler.impliesAction(nodeObj);break;case NodeRepresentation.FORALL_TYPE:decomposeHandler.forAllAction(nodeObj);break;case NodeRepresentation.EXISTS_TYPE:decomposeHandler.existsAction(nodeObj);break;case NodeRepresentation.SQSUB_TYPE:decomposeHandler.sqsubAction(nodeObj);break;case NodeRepresentation.OTHER_TYPE:break;}}break;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.746 -0400",hash_original_method="99AF6CDDF6475DC07C8A5DDBE48E63BD",hash_generated_method="DEE778C02BD54ECA5AB0468163B8873F") synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (isClosed) {    throw new IOException("Pipe is closed");  }  if (buffer == null) {    buffer=new char[PIPE_SIZE];  }  isConnected=true;}  }
class C{  @Override public void registered(SchedulerDriver driver,Protos.FrameworkID frameworkId,Protos.MasterInfo masterInfo){  System.out.println("Registered! ID = " + frameworkId.getValue());  scheduler.expireAllLeases();}  }
class C{  public Statement elt(Object value){  return compare("<=",value);}  }
class C{  public WStringEditor(String columnName,boolean mandatory,boolean isReadOnly,boolean isUpdateable,int displayLength,int fieldLength,String vFormat,String obscureType){  super(new StringBox(),columnName,null,null,mandatory,isReadOnly,isUpdateable);  init(obscureType);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION:    setDocumentation((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void putNamespaces(XMLStreamReader reader){  for (int i=0; i < reader.getNamespaceCount(); i++) {    final String prefix=reader.getNamespacePrefix(i);    if (prefix != null) {      putNamespace(prefix,reader.getNamespaceURI(i));    }  }}  }
class C{  private VOSubscription createAndSubscribeToServiceWithParameter(String paraValue) throws Exception {  technicalServiceWithParameter=createTechnicalService("tp1");  List<VOParameter> params=createParametersForTechnicalService(technicalServiceWithParameter,paraValue);  serviceWithParameter=createServiceWithParameter(params);  createdSubscription=createSubscription();  createdSubscription=subscrServiceForCustomer.subscribeToService(createdSubscription,serviceWithParameter,usageLicences,null,null,new ArrayList<VOUda>());  return createdSubscription;}  }
class C{  @SuppressWarnings("UnusedParameters") protected ByteBuf extractObject(ByteBuf buffer,int index,int length){  return buffer.slice(index,length).retain();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int mediaMask=DBObject.MEDIA_MASK_ALL;  if (curNumberOfParameters == 12) {    mediaMask=getMediaMask(stack);  }  boolean miscb=evalBool(stack.pop());  boolean yearb=evalBool(stack.pop());  boolean erb=evalBool(stack.pop());  boolean ratedb=evalBool(stack.pop());  boolean catb=evalBool(stack.pop());  boolean peopleb=evalBool(stack.pop());  boolean descb=evalBool(stack.pop());  boolean epsb=evalBool(stack.pop());  boolean titb=evalBool(stack.pop());  boolean caseb=evalBool(stack.pop());  String str=getString(stack);  if (Sage.DBG)   System.out.println("CALLING SearchSelectedFields: " + str);  return Wizard.getInstance().searchWithinFields(str,caseb,titb,epsb,descb,peopleb,catb,ratedb,erb,yearb,miscb,mediaMask,false);}  }
class C{  public boolean isExpired(){  return paymentDetails.hasExpires() && System.currentTimeMillis() / 1000L > paymentDetails.getExpires();}  }
class C{  private void data(String value) throws Exception {  write("<![CDATA[");  write(value);  write("]]>");}  }
class C{  @Override public void onStart(Intent intent,int startId){  super.onStart(intent,startId);  mNetworkLocation=null;  initLocationListeners();  Toast.makeText(this,"Tracking service started",Toast.LENGTH_SHORT);}  }
class C{  private static void ReleaseStringUTFChars(JNIEnvironment env,int objJREF,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: ReleaseStringUTFChars  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    sysCall.sysFree(bufAddress);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public void destroy(){  if (keyRotationExecutor != null) {    keyRotationExecutor.shutdown();    _log.debug("Shutting down key rotation thread");  }}  }
class C{  public boolean endsWith(Name n){  if (n instanceof CompositeName) {    return (impl.endsWith(n.size(),n.getAll()));  } else {    return false;  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  SegmentedTimeline clone=(SegmentedTimeline)super.clone();  return clone;}  }
class C{  private void configureAnalysisFeatures(){  for (  AnalysisFeatureSetting setting : analysisOptions.analysisFeatureSettingList) {    setting.configure(AnalysisContext.currentAnalysisContext());  }  AnalysisContext.currentAnalysisContext().setBoolProperty(AnalysisFeatures.MERGE_SIMILAR_WARNINGS,analysisOptions.mergeSimilarWarnings);}  }
class C{  private void updateOrganisationMetadata(Organisation organisation){  if (organisation != null) {    String key=(organisation.getKey() == null) ? null : organisation.getKey().toString();    Organisation o=registryManager.getRegisteredOrganisation(key);    if (o != null) {      String oKey=(o.getKey() == null) ? null : o.getKey().toString();      String oName=Strings.emptyToNull(o.getName());      if (oKey != null && oKey.equalsIgnoreCase(key) && oName != null) {        organisation.setName(oName);        organisation.setDescription(Strings.emptyToNull(o.getDescription()));        organisation.setHomepageURL(Strings.emptyToNull(o.getHomepageURL()));        organisation.setNodeKey(Strings.emptyToNull(o.getNodeKey()));        organisation.setNodeName(Strings.emptyToNull(o.getNodeName()));        organisation.setNodeContactEmail(Strings.emptyToNull(o.getNodeContactEmail()));        organisation.setPrimaryContactName(Strings.emptyToNull(o.getPrimaryContactName()));        organisation.setPrimaryContactFirstName(Strings.emptyToNull(o.getPrimaryContactFirstName()));        organisation.setPrimaryContactLastName(Strings.emptyToNull(o.getPrimaryContactLastName()));        organisation.setPrimaryContactAddress(Strings.emptyToNull(o.getPrimaryContactAddress()));        organisation.setPrimaryContactDescription(Strings.emptyToNull(o.getPrimaryContactDescription()));        organisation.setPrimaryContactEmail(Strings.emptyToNull(o.getPrimaryContactEmail()));        organisation.setPrimaryContactPhone(Strings.emptyToNull(o.getPrimaryContactPhone()));        organisation.setPrimaryContactType(Strings.emptyToNull(o.getPrimaryContactType()));        log.debug("Organisation (" + key + ") updated with latest metadata from Registry");      } else {        log.debug("Update of organisation failed: organisation retrieved from Registry was missing name");      }    } else {      log.debug("Update of organisation failed: organisation retrieved from Registry was null");    }  } else {    log.debug("Update of organisation failed: organisation was null");  }}  }
class C{  public static Builder builder(PartialDate orig){  return new Builder(orig);}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  String user=null;  if (HttpServletRequest.class.isAssignableFrom(request.getClass())) {    HttpServletRequest req=HttpServletRequest.class.cast(request);    HttpSession session=req.getSession(true);    Object remoteUser=session.getAttribute(USER_ATTRIBUTE_NAME);    if (!"options".equalsIgnoreCase(req.getMethod()) && !_isAuthEndpoint(req) && remoteUser == null) {      HttpServletResponse httpresponse=HttpServletResponse.class.cast(response);      httpresponse.setHeader("Access-Control-Allow-Origin",req.getHeader("Origin"));      httpresponse.setHeader("Access-Control-Allow-Credentials","true");      httpresponse.sendError(HttpServletResponse.SC_UNAUTHORIZED);    } else     if (remoteUser != null) {      user=PrincipalUserDto.class.cast(session.getAttribute(USER_ATTRIBUTE_NAME)).getUserName();    }  }  try {    MDC.put(USER_ATTRIBUTE_NAME,user);    chain.doFilter(request,response);  }  finally {    MDC.remove(USER_ATTRIBUTE_NAME);  }}  }
class C{  public Boolean isCertfctnBrkdwnInd(){  return certfctnBrkdwnInd;}  }
class C{  protected StateCaseImpl(){  super();}  }
class C{  public static void main(String[] args){  try {    PairedStats ps=new PairedStats(0.05);    java.io.LineNumberReader r=new java.io.LineNumberReader(new java.io.InputStreamReader(System.in));    String line;    while ((line=r.readLine()) != null) {      line=line.trim();      if (line.equals("") || line.startsWith("@") || line.startsWith("%")) {        continue;      }      java.util.StringTokenizer s=new java.util.StringTokenizer(line," ,\t\n\r\f");      int count=0;      double v1=0, v2=0;      while (s.hasMoreTokens()) {        double val=(new Double(s.nextToken())).doubleValue();        if (count == 0) {          v1=val;        } else         if (count == 1) {          v2=val;        } else {          System.err.println("MSG: Too many values in line \"" + line + "\", skipped.");          break;        }        count++;      }      if (count == 2) {        ps.add(v1,v2);      }    }    ps.calculateDerived();    System.err.println(ps);  } catch (  Exception ex) {    ex.printStackTrace();    System.err.println(ex.getMessage());  }}  }
class C{  public void destroyLocks(){  for (  Map.Entry<String,LockState> entry : locks.entrySet()) {    String name=entry.getKey();    LockState state=entry.getValue();    int acquiredCount=state.count;    for (int i=0; i < acquiredCount; i++) {      releaseLock(name,state);    }  }}  }
class C{  void decAccess(){  incAccess(-1);}  }
class C{  public ClientKeyExchange(byte[] encrypted_pre_master_secret,boolean isTLS){  this.exchange_keys=encrypted_pre_master_secret;  length=this.exchange_keys.length;  if (isTLS) {    length+=2;  }  this.isTLS=isTLS;  isRSA=true;}  }
class C{  private void createNavigationTabs(Bundle aSavedInstanceState){  int tabIndex=0;  int tabIndexToRestore;  mActionBar.setNavigationMode(android.support.v7.app.ActionBar.NAVIGATION_MODE_TABS);  android.support.v7.app.ActionBar.Tab tabToBeAdded=mActionBar.newTab();  String tabTitle=getResources().getString(R.string.tab_title_search_rooms);  tabToBeAdded.setText(tabTitle);  tabToBeAdded.setTabListener(this);  tabToBeAdded.setTag(TAG_FRAGMENT_SEARCH_IN_ROOM_NAMES);  mActionBar.addTab(tabToBeAdded);  mSearchInRoomNamesTabIndex=tabIndex++;  tabToBeAdded=mActionBar.newTab();  tabTitle=getResources().getString(R.string.tab_title_search_messages);  tabToBeAdded.setText(tabTitle);  tabToBeAdded.setTabListener(this);  tabToBeAdded.setTag(TAG_FRAGMENT_SEARCH_IN_MESSAGE);  mActionBar.addTab(tabToBeAdded);  mSearchInMessagesTabIndex=tabIndex++;  tabToBeAdded=mActionBar.newTab();  tabTitle=getResources().getString(R.string.tab_title_search_people);  tabToBeAdded.setText(tabTitle);  tabToBeAdded.setTabListener(this);  tabToBeAdded.setTag(TAG_FRAGMENT_SEARCH_PEOPLE);  mActionBar.addTab(tabToBeAdded);  mSearchInPeopleTabIndex=tabIndex++;  tabToBeAdded=mActionBar.newTab();  tabTitle=getResources().getString(R.string.tab_title_search_files);  tabToBeAdded.setText(tabTitle);  tabToBeAdded.setTabListener(this);  tabToBeAdded.setTag(TAG_FRAGMENT_SEARCH_IN_FILES);  mActionBar.addTab(tabToBeAdded);  mSearchInFilesTabIndex=tabIndex++;  tabIndexToRestore=(null != aSavedInstanceState) ? aSavedInstanceState.getInt(KEY_STATE_CURRENT_TAB_INDEX,0) : 0;  if (-1 == tabIndexToRestore) {    tabIndexToRestore=mSearchInRoomNamesTabIndex;  }  mCurrentTabIndex=tabIndexToRestore;  mActionBar.setSelectedNavigationItem(tabIndexToRestore);  mPatternToSearchEditText.setText((null != aSavedInstanceState) ? aSavedInstanceState.getString(KEY_STATE_SEARCH_PATTERN,null) : null);}  }
class C{  public EntityCacheBuilder useReferenceCache(boolean enable){  this.useReferenceCache=enable;  return this;}  }
class C{  String readString(){  String ret;  int len=readInt();  try {    ret=new String(pkt.data,inCursor,len,"UTF8");  } catch (  java.io.UnsupportedEncodingException e) {    System.err.println(e);    ret="Conversion error!";  }  inCursor+=len;  return ret;}  }
class C{  public void afterLast(){  currentIndex=bindingSets.size() + 1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.013 -0400",hash_original_method="D825D1EF81F727B98120B0E0B62D2994",hash_generated_method="6286C8B071C5F669339F45AAC4A7D2FD") public final void error(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {    log(SimpleLog.LOG_LEVEL_ERROR,message,t);  }}  }
class C{  public JobExecutionException(Throwable cause){  super(cause);}  }
class C{  @Override public void revalidate(){}  }
class C{  public void putLong(long x){  bb.putLong(space-=8,x);}  }
class C{  public boolean isOppositeSide(){  return false;}  }
class C{  protected double updatedDistance(int i,int j,int k){  return (getDist(k,i) + getDist(k,j) - getDist(i,j)) * 0.5;}  }
class C{  @Override public Date parse(String source,ParsePosition pos){  return null;}  }
class C{  public static ArrayList<Object> singletons(Instances instances,boolean treatZeroAsMissing) throws Exception {  ArrayList<Object> setOfItemSets=new ArrayList<Object>();  AprioriItemSet current;  for (int i=0; i < instances.numAttributes(); i++) {    if (instances.attribute(i).isNumeric()) {      throw new Exception("Can't handle numeric attributes!");    }    int j=(treatZeroAsMissing) ? 1 : 0;    for (; j < instances.attribute(i).numValues(); j++) {      current=new AprioriItemSet(instances.numInstances());      current.m_items=new int[instances.numAttributes()];      for (int k=0; k < instances.numAttributes(); k++) {        current.m_items[k]=-1;      }      current.m_items[i]=j;      setOfItemSets.add(current);    }  }  return setOfItemSets;}  }
class C{  public void createNote(String userId,String subject,String message,ActionListener callback) throws IOException {  checkAuthentication();  FacebookRESTService con=new FacebookRESTService(token,userId,FacebookRESTService.NOTES,true);  con.addResponseListener(new Listener(con,callback));  con.addArgument("subject","" + subject);  con.addArgument("message","" + message);  if (slider != null) {    SliderBridge.bindProgress(con,slider);  }  for (int i=0; i < responseCodeListeners.size(); i++) {    con.addResponseCodeListener((ActionListener)responseCodeListeners.elementAt(i));  }  current=con;  System.out.println(con.getUrl());  NetworkManager.getInstance().addToQueueAndWait(con);}  }
class C{  public double manhattanDistance(final MutableInt2D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  return dx + dy;}  }
class C{  public void sendMessage(Severity severity,String className,String elementName,String eventName,String message,long lastNotified){  requireArgument(elementName != null && !elementName.isEmpty(),"ElementName cannot be null or empty.");  requireArgument(eventName != null && !eventName.isEmpty(),"EventName cannot be null or empty.");  if (Boolean.valueOf(_config.getValue(com.salesforce.dva.argus.system.SystemConfiguration.Property.GOC_ENABLED))) {    try {      GOCDataBuilder builder=new GOCDataBuilder();      builder.withClassName(className).withElementName(elementName).withEventName(eventName).withEventText(message);      if (severity == Severity.OK) {        builder.withActive(false).withClearedAt(lastNotified);      } else {        builder.withActive(true).withCreatedAt(lastNotified);      }      builder.withLastNotifiedAt(lastNotified);      GOCData gocData=builder.build();      boolean refresh=false;      GOCTransport gocTransport=new GOCTransport();      HttpClient httpclient=gocTransport.getHttpClient(_config);      for (int i=0; i < 2; i++) {        PostMethod post=null;        try {          post=getRequestMethod(refresh,gocData.getsm_Alert_Id__c());          post.setRequestEntity(new StringRequestEntity(gocData.toJSON(),"application/json",null));          int respCode=httpclient.executeMethod(post);          if (respCode == 201 || respCode == 204) {            _logger.info("Success - send GOC++ having element '{}' event '{}' severity {}.",elementName,eventName,severity.name());            break;          } else           if (respCode == 401) {            refresh=true;          } else {            _logger.error("Failure - send GOC++ having element '{}' event '{}' severity {}. Response code '{}' response '{}'",elementName,eventName,severity.name(),respCode,post.getResponseBodyAsString());          }        } catch (        Exception e) {          _logger.error("Failure - send GOC++ having element '{}' event '{}' severity {}. Exception '{}'",elementName,eventName,severity.name(),e);        } finally {          if (post != null) {            post.releaseConnection();          }        }      }    } catch (    RuntimeException ex) {      throw new SystemException("Failed to send an GOC++ notification.",ex);    }  } else {    _logger.info("Sending GOC++ notification is disabled.  Not sending message for element '{}' event '{}' severity {}.",elementName,eventName,severity.name());  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public TermVectorsRequest id(String id){  this.id=id;  return this;}  }
class C{  @Override protected boolean hasFab(){  return false;}  }
class C{  public void reload(){  if (!mIsContainerOnly) {    mGeometry.reload();  }  for (int i=0, j=mChildren.size(); i < j; i++)   mChildren.get(i).reload();  if (mGeometry.hasBoundingBox() && mGeometry.getBoundingBox().getVisual() != null)   mGeometry.getBoundingBox().getVisual().reload();  if (mGeometry.hasBoundingSphere() && mGeometry.getBoundingSphere().getVisual() != null)   mGeometry.getBoundingSphere().getVisual().reload();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.162 -0500",hash_original_method="89B271C0116BA22E329740125333F5A7",hash_generated_method="634C1E54E855948A577968C18CF78209") public void skew(float sx,float sy){}  }
class C{  public static void downto(Long self,Number to,@ClosureParams(FirstParam.class) Closure closure){  long to1=to.longValue();  if (self >= to1) {    for (long i=self; i >= to1; i--) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it's called on.");}  }
class C{  public OMCircle(int x1,int y1,int w,int h){  super(x1,y1,w,h,0f,360f);}  }
class C{  public Boolean canCreateRegister(User user,int type,boolean oficAsoc,boolean onlyOpenBooks,String entidad) throws ValidationException, SecurityException, BookException, SessionException, AttributesException {  Boolean result=Boolean.FALSE;  try {    List books=RegisterServices.getBooksCanCreateFolder(user,type,oficAsoc,onlyOpenBooks,entidad);    if (books != null && !books.isEmpty()) {      result=Boolean.TRUE;    }  } catch (  Exception e) {    _logger.error("Impossible obtain book ",e);    throw new BookException(BookException.ERROR_CANNOT_FIND_REGISTERS);  }  return result;}  }
class C{  public final void addAlgorithm(final HouseholdAlgorithm algorithm){  this.householdAlgorithms.add(algorithm);}  }
class C{  public void processHeaders(Node node,Vertex url,Network network){  Set<String> headers=new HashSet<String>(3);  headers.add("h1");  headers.add("h2");  headers.add("h3");  headers.add("h4");  Node header=findTag(headers,null,node);  Vertex urlType=network.createVertex(Primitive.URL);  Vertex topicType=network.createVertex(Primitive.TOPIC);  Vertex instantiationType=network.createVertex(Primitive.INSTANTIATION);  Vertex sentenceType=network.createVertex(Primitive.SENTENCE);  Vertex contentType=network.createVertex(Primitive.CONTENT);  Vertex h1=null;  Vertex h2=null;  while (header != null) {    log("Header",Bot.FINE,header);    Vertex topic=network.createVertex();    topic.addRelationship(instantiationType,topicType);    Vertex sentence=getSentence(header,network);    topic.setName(sentence.getDataValue());    log("Topic",Bot.FINE,sentence);    topic.addRelationship(sentenceType,sentence);    sentence.addRelationship(topicType,topic);    if (header.getNodeName().equals("h1")) {      topic.addRelationship(urlType,url);      url.addRelationship(topicType,topic);      h1=topic;    } else     if (header.getNodeName().equals("h2")) {      if (h1 != null) {        h1.addRelationship(contentType,topic);        topic.addRelationship(topicType,h1);      }      h2=topic;    } else     if (header.getNodeName().equals("h3")) {      if (h2 != null) {        h2.addRelationship(contentType,topic);        topic.addRelationship(topicType,h2);      } else       if (h1 != null) {        h1.addRelationship(contentType,topic);        topic.addRelationship(topicType,h1);      }    }    header=findNextTag(headers,null,header,node);  }  network.save();  getBot().memory().addActiveMemory(url);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_DEFINITION___NAME_1:    return NAME_1_EDEFAULT == null ? name_1 != null : !NAME_1_EDEFAULT.equals(name_1);case UmplePackage.ASSOCIATION_DEFINITION___ASSOCIATION_1:  return association_1 != null && !association_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public String toValue(){  return value;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-19 13:30:38.081 -0400",hash_original_method="5446B591236758FE1022AC56CCF4E7CA",hash_generated_method="9C4D4A982224BB1AC65996BF330FC39F") public ActivityChooserView(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public static int quantile(ModifiableDoubleDBIDList data,int begin,int end,double quant){  final int length=end - begin;  assert (length > 0) : "Quantile on empty set?";  final double dleft=begin + (length - 1) * quant;  final int ileft=(int)Math.floor(dleft);  quickSelect(data,begin,end,ileft);  return ileft;}  }
class C{  public NovaException(String message){  super(message);}  }
class C{  public void updateUI(){  setUI((ButtonUI)UIManager.getUI(this));}  }
class C{  public void changeInputValueLocal(String newInputValue){  setExtension(getCell().withNewInputValue(newInputValue));}  }
class C{  public void clearAllBits(){  for (int i=0; i < types.size() * locals.size(); i++) {    clear(i);  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public BoundsCheckedFunction(MultivariateFunction func,double largeNumber){  f=func;  veryLarge=largeNumber;}  }
class C{  public void loadArgs(final int arg,final int count){  int index=getArgIndex(arg);  for (int i=0; i < count; ++i) {    Type t=argumentTypes[arg + i];    loadInsn(t,index);    index+=t.getSize();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.828 -0400",hash_original_method="9A3578365979051B1C9E49F53E923860",hash_generated_method="D0561A4F6DC450EDCCB9B396E2CF9249") private void onHealthDeviceConnectionResult(int chanCode,int result){  log("onHealthDeviceConnectionResult " + chanCode + " "+ result);  if (result != BluetoothHealth.HEALTH_OPERATION_SUCCESS) {    mBluetoothService.onHealthDeviceChannelConnectionError(chanCode,BluetoothHealth.STATE_CHANNEL_DISCONNECTED);  }}  }
class C{  protected ExtendedGeneralPath parsePath(){  Node n=element.getFirstChild();  while (n != null) {    if (n.getNodeType() == Node.ELEMENT_NODE && SVG_NAMESPACE_URI.equals(n.getNamespaceURI()) && SVG_MPATH_TAG.equals(n.getLocalName())) {      String uri=XLinkSupport.getXLinkHref((Element)n);      Element path=ctx.getReferencedElement(element,uri);      if (!SVG_NAMESPACE_URI.equals(path.getNamespaceURI()) || !SVG_PATH_TAG.equals(path.getLocalName())) {        throw new BridgeException(ctx,element,ErrorConstants.ERR_URI_BAD_TARGET,new Object[]{uri});      }      SVGOMPathElement pathElt=(SVGOMPathElement)path;      AWTPathProducer app=new AWTPathProducer();      SVGAnimatedPathDataSupport.handlePathSegList(pathElt.getPathSegList(),app);      return (ExtendedGeneralPath)app.getShape();    }    n=n.getNextSibling();  }  String pathString=element.getAttributeNS(null,SVG_PATH_ATTRIBUTE);  if (pathString.length() == 0) {    return null;  }  try {    AWTPathProducer app=new AWTPathProducer();    PathParser pp=new PathParser();    pp.setPathHandler(app);    pp.parse(pathString);    return (ExtendedGeneralPath)app.getShape();  } catch (  ParseException pEx) {    throw new BridgeException(ctx,element,pEx,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_PATH_ATTRIBUTE,pathString});  }}  }
class C{  public OrPredicate(){}  }
class C{  private void markSubroutineWalk(final BitSet sub,final int index,final BitSet anyvisited){  if (LOGGING) {    log("markSubroutineWalk: sub=" + sub + " index="+ index);  }  markSubroutineWalkDFS(sub,index,anyvisited);  boolean loop=true;  while (loop) {    loop=false;    for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {      TryCatchBlockNode trycatch=it.next();      if (LOGGING) {        log("Scanning try/catch " + trycatch);      }      int handlerindex=instructions.indexOf(trycatch.handler);      if (sub.get(handlerindex)) {        continue;      }      int startindex=instructions.indexOf(trycatch.start);      int endindex=instructions.indexOf(trycatch.end);      int nextbit=sub.nextSetBit(startindex);      if (nextbit != -1 && nextbit < endindex) {        if (LOGGING) {          log("Adding exception handler: " + startindex + '-'+ endindex+ " due to "+ nextbit+ " handler "+ handlerindex);        }        markSubroutineWalkDFS(sub,handlerindex,anyvisited);        loop=true;      }    }  }}  }
class C{  public static String ordinalNumber(int n){  if (n % 10 == 1 && n % 100 != 11) {    return n + "st";  }  if (n % 10 == 2 && n % 100 != 12) {    return n + "nd";  }  if (n % 10 == 3 && n % 100 != 13) {    return n + "rd";  }  return n + "th";}  }
class C{  public final void addElement(E element){  add(element);}  }
class C{  public boolean removeParser(Parser parser){  removeParserNotices(parser);  boolean removed=parsers.remove(parser);  if (removed) {    textArea.fireParserNoticesChange();  }  return removed;}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  void fireFocusLost(Component cmp){  if (cmp.isCellRenderer()) {    return;  }  if (isSelectableInteraction()) {    Form f=getComponentForm();    if (f != null) {      f.getMenuBar().removeSelectCommand();    }  }  if (focusListeners != null) {    focusListeners.fireFocus(cmp);  }  focusLostInternal();  focusLost();}  }
class C{  public String sendInvitationHashWithDateObject(String SID,String username,String message,String baseurl,String email,String subject,Long room_id,String conferencedomain,Boolean isPasswordProtected,String invitationpass,Integer valid,Date fromDate,Date toDate,Long language_id,Boolean sendMail) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      Calendar calFrom=Calendar.getInstance();      calFrom.setTime(fromDate);      Calendar calTo=Calendar.getInstance();      calTo.setTime(toDate);      Date dFrom=calFrom.getTime();      Date dTo=calTo.getTime();      log.info("validFromDate: " + CalendarPatterns.getDateWithTimeByMiliSeconds(dFrom));      log.info("validToDate: " + CalendarPatterns.getDateWithTimeByMiliSeconds(dTo));      Invitations invitation=invitationManagement.addInvitationLink(user_level,username,message,baseurl,email,subject,room_id,"",isPasswordProtected,invitationpass,valid,dFrom,dTo,users_id,baseurl,language_id,sendMail,dFrom,dTo,null,username);      if (invitation != null) {        return invitation.getHash();      } else {        return "Sys - Error";      }    } else {      return "Need Admin Privileges to perfom the Action";    }  } catch (  Exception err) {    log.error("[sendInvitationHash] ",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  public JarIndex(InputStream is) throws IOException {  this();  read(is);}  }
class C{  private void updateCache(K key,@Nullable Entry<? extends K,? extends V> val,StoreOperation operation) throws IgniteInterruptedCheckedException {  StatefulValue<K,V> newVal=new StatefulValue<>(val,operation);  StatefulValue<K,V> prev;  while ((prev=writeCache.putIfAbsent(key,newVal)) != null) {    prev.writeLock().lock();    try {      if (prev.status() == ValueStatus.PENDING) {        prev.waitForFlush();        continue;      } else       if (prev.status() == ValueStatus.FLUSHED)       continue; else       if (prev.status() == ValueStatus.RETRY)       retryEntriesCnt.decrementAndGet();      assert prev.status() == ValueStatus.NEW || prev.status() == ValueStatus.RETRY;      prev.update(val,operation,ValueStatus.NEW);      break;    }  finally {      prev.writeLock().unlock();    }  }  if (writeCache.sizex() > cacheCriticalSize)   flushSingleValue(); else   if (cacheMaxSize > 0 && writeCache.sizex() > cacheMaxSize)   wakeUp();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:42.900 -0500",hash_original_method="30733A3232BFC83399FAC43965000DCC",hash_generated_method="C7CE9C087A8F529EE5D96931DE516CD1") public TestSuiteBuilder addRequirements(List<Predicate<TestMethod>> predicates){  this.predicates.addAll(predicates);  return this;}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  public void write(OutputStream out,Document doc,int pos,int len) throws IOException, BadLocationException {  OutputStreamWriter osw=new OutputStreamWriter(out);  write(osw,doc,pos,len);  osw.flush();}  }
class C{  public JBoss71xExistingLocalConfigurationCapability(){  super();  this.propertySupportMap.remove(GeneralPropertySet.RMI_PORT);}  }
class C{  public static BufferedInputStream stream2stream(InputStream value){  if (value == null) {    return null;  }  BufferedInputStream bufferedInStream=new BufferedInputStream(value);  return bufferedInStream;}  }
class C{  public static java.awt.Color decodeColorABGR(String encodedString){  if (encodedString == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (encodedString.startsWith("#")) {    encodedString=encodedString.replaceFirst("#","0x");  } else   if (!encodedString.startsWith("0x") && !encodedString.startsWith("0X")) {    encodedString="0x" + encodedString;  }  Long longValue;  try {    longValue=Long.parseLong(encodedString.substring(2),16);  } catch (  NumberFormatException e) {    String message=Logging.getMessage("generic.ConversionError",encodedString);    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    return null;  }  int i=(int)(longValue & 0xFFFFFFFFL);  return new java.awt.Color(i & 0xFF,(i >> 8) & 0xFF,(i >> 16) & 0xFF,(i >> 24) & 0xFF);}  }
class C{  public RotateStrategyByTime(){  this(1000 * 60 * 60* 24);}  }
class C{  public HAVING HAVING(String having){  return new HAVING(this,having);}  }
class C{  boolean scanForFF(JPEGImageReader reader) throws IOException {  boolean retval=false;  boolean foundFF=false;  while (foundFF == false) {    while (bufAvail > 0) {      if ((buf[bufPtr++] & 0xff) == 0xff) {        bufAvail--;        foundFF=true;        break;      }      bufAvail--;    }    loadBuf(0);    if (foundFF == true) {      while ((bufAvail > 0) && (buf[bufPtr] & 0xff) == 0xff) {        bufPtr++;        bufAvail--;      }    }    if (bufAvail == 0) {      retval=true;      buf[0]=(byte)JPEG.EOI;      bufAvail=1;      bufPtr=0;      foundFF=true;    }  }  return retval;}  }
class C{  private void ekskey(byte data[],byte key[]){  int i;  int koffp[]={0}, doffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TYPE_SPECIFIER__TYPE:    return type != null;case TypesPackage.TYPE_SPECIFIER__TYPE_ARGUMENTS:  return typeArguments != null && !typeArguments.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void rebuildToHalvedPolygon(){  attackPoly=new StraightArrowPolygon(a,t,(int)(8 * this.boardView1.scale),(int)(12 * this.boardView1.scale),true);  bounds=new Rectangle(attackPoly.getBounds());  bounds.setSize(bounds.getSize().width + 1,bounds.getSize().height + 1);  attackPoly.translate(-bounds.getLocation().x,-bounds.getLocation().y);}  }
class C{  public void addIssuerSerial(String X509IssuerName,BigInteger X509SerialNumber){  this.add(new XMLX509IssuerSerial(this.doc,X509IssuerName,X509SerialNumber));}  }
class C{  public void exiting(String sourceClass,String sourceMethod){  throw new RuntimeException();}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  void moveMethod(String m,int pos){  int i, j;  method_info mthd;  G.v().out.println("Moving " + m + " to position "+ pos+ " of "+ methods_count);  for (i=0; i < methods_count; i++) {    if (m.compareTo(methods[i].toName(constant_pool)) == 0) {      mthd=methods[i];      if (i > pos) {        for (j=i; j > pos && j > 0; j--)         methods[j]=methods[j - 1];        methods[pos]=mthd;      } else       if (i < pos) {        for (j=i; j < pos && j < methods_count - 1; j++)         methods[j]=methods[j + 1];        methods[pos]=mthd;      }      return;    }  }}  }
class C{  private void handleInvalidateRegion(Message m){  String regionName=null;  int partCnt=0;  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    if (isDebugEnabled) {      logger.debug("{}: Received invalidate region message of length ({} bytes)",this,m.getPayloadLength());    }    Part regionNamePart=m.getPart(partCnt++);    partCnt++;    Part hasCqsPart=m.getPart(partCnt++);    regionName=regionNamePart.getString();    if (((Boolean)hasCqsPart.getObject()).booleanValue()) {      Part numCqsPart=m.getPart(partCnt++);      if (isDebugEnabled) {        logger.debug("Received message has CQ Event. Number of cqs interested in the event : {}",numCqsPart.getInt() / 2);      }      partCnt=processCqs(m,partCnt,numCqsPart.getInt(),m.getMessageType(),null,null);    }    LocalRegion region=(LocalRegion)cacheHelper.getRegion(regionName);    if (region == null) {      if (isDebugEnabled && !quitting()) {        logger.debug("Region named {} does not exist",regionName);      }      return;    }    if (region.hasServerProxy()) {      return;    }  } catch (  Exception e) {    String message=LocalizedStrings.CacheClientUpdater_CAUGHT_THE_FOLLOWING_EXCEPTION_WHILE_ATTEMPTING_TO_INVALIDATE_REGION_0.toLocalizedString(regionName);    handleException(message,e);  }}  }
class C{  private void fixUp(int k){  while (k > 1) {    int j=k >> 1;    if (queue[j].nextExecutionTime <= queue[k].nextExecutionTime)     break;    TimerTask tmp=queue[j];    queue[j]=queue[k];    queue[k]=tmp;    k=j;  }}  }
class C{  private void saveEvidenceCalendar(long idEvent,byte[] packet){  final EvidenceBuilder log=new EvidenceBuilder(EvidenceType.CALENDAR);  log.write(packet);  log.close();}  }
class C{  public void run(){  ActivationLibrary.deactivate(this,getID());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public double calculateLogLikelihood(){  intervals.setIntervalsUnknown();  final int nIntervals=intervals.getIntervalCount();  double logPDF=0.0;  for (int i=0; i < nIntervals; i++) {    if (COALESCENT_EVENTS_ONLY) {      if (intervals.getCoalescentEvents(i) > 0) {        logPDF+=Math.log(Binomial.choose2(intervals.getLineageCount(i)));      }    } else     if (intervals.getLineageCount(i) > 2) {      logPDF+=Math.log(Binomial.choose2(intervals.getLineageCount(i)));    }  }  return -logPDF;}  }
class C{  private void updateIcons(){  if (iconName != null) {    icons=new ImageIcon[3];    icons[0]=SwingTools.createIcon("16/" + iconName);    icons[1]=SwingTools.createIcon("24/" + iconName);    icons[2]=SwingTools.createIcon("48/" + iconName);    if (!isSupportedByLicense()) {      icons[0]=SwingTools.createOverlayIcon(icons[0],UNSUPPORTED_ICON_SMALL);      icons[1]=SwingTools.createOverlayIcon(icons[1],UNSUPPORTED_ICON);      icons[2]=SwingTools.createOverlayIcon(icons[2],UNSUPPORTED_ICON_LARGE);    }  } else {    icons=EMPTY_ICONS;  }}  }
class C{  private void pop(){  String removed=encodedPathSegments.remove(encodedPathSegments.size() - 1);  if (removed.isEmpty() && !encodedPathSegments.isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,"");  } else {    encodedPathSegments.add("");  }}  }
class C{  public DuplicateAction(@Nullable JComponent target){  super(target);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public void onlyKnown(Boolean known){  mOnlyKnown=known;}  }
class C{  public static ByteBuffer copyOf(ByteBuffer buffer,int newSize){  if (newSize < 0 || newSize < buffer.remaining()) {    String message=Logging.getMessage("generic.SizeOutOfRange",newSize);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  ByteBuffer newBuffer=newByteBuffer(newSize,buffer.isDirect());  int pos=buffer.position();  try {    newBuffer.put(buffer);    newBuffer.rewind();  }  finally {    buffer.position(pos);  }  return newBuffer;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.867 -0500",hash_original_method="A6E50A0D416AE1599A173132FA575828",hash_generated_method="885324DC4EA9CD2FF7BCAD839152E915") public String encode(){  String retval;  if (requestLine != null) {    this.setRequestLineDefaults();    retval=requestLine.encode() + super.encode();  } else   if (this.isNullRequest()) {    retval="\r\n\r\n";  } else {    retval=super.encode();  }  return retval;}  }
class C{  protected XMLSignatureInput enginePerformTransform(XMLSignatureInput input,OutputStream os,Transform transformObject) throws TransformationException {  Object exArgs[]={implementedTransformURI};  throw new TransformationException("signature.Transform.NotYetImplemented",exArgs);}  }
class C{  public static Map<String,Object> findPartyById(DispatchContext ctx,Map<String,Object> context){  Delegator delegator=ctx.getDelegator();  String idToFind=(String)context.get("idToFind");  String partyIdentificationTypeId=(String)context.get("partyIdentificationTypeId");  String searchPartyFirstContext=(String)context.get("searchPartyFirst");  String searchAllIdContext=(String)context.get("searchAllId");  boolean searchPartyFirst=UtilValidate.isNotEmpty(searchPartyFirstContext) && "N".equals(searchPartyFirstContext) ? false : true;  boolean searchAllId=UtilValidate.isNotEmpty(searchAllIdContext) && "Y".equals(searchAllIdContext) ? true : false;  GenericValue party=null;  List<GenericValue> partiesFound=null;  try {    partiesFound=PartyWorker.findPartiesById(delegator,idToFind,partyIdentificationTypeId,searchPartyFirst,searchAllId);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (UtilValidate.isNotEmpty(partiesFound)) {    party=EntityUtil.getFirst(partiesFound);    partiesFound.remove(0);  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("party",party);  result.put("partiesFound",partiesFound);  return result;}  }
class C{  public static Class<?>[] primitivesToWrappers(final Class<?>[] classes){  if (classes == null) {    return null;  }  if (classes.length == 0) {    return classes;  }  Class<?>[] convertedClasses=new Class[classes.length];  for (int i=0; i < classes.length; i++) {    convertedClasses[i]=ClassUtils.primitiveToWrapper(classes[i]);  }  return convertedClasses;}  }
class C{  @POST @Path("/{id}/detach-storage") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.TENANT_ADMIN}) public TaskResourceRep detachStorage(@PathParam("id") URI id) throws DatabaseException {  VcenterDataCenter dataCenter=queryObject(VcenterDataCenter.class,id,true);  ArgValidator.checkEntity(dataCenter,id,true);  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(Vcenter.class,dataCenter.getId(),taskId,ResourceOperationTypeEnum.DETACH_VCENTER_DATACENTER_STORAGE);  ComputeSystemController controller=getController(ComputeSystemController.class,null);  controller.detachDataCenterStorage(dataCenter.getId(),false,taskId);  return toTask(dataCenter,taskId,op);}  }
class C{  public static void logKillSignalMessage(final Logger logger){  logger.logMessage(Level.INFO,"Consumer received KILL Signal");}  }
class C{  public void add(Boolean bool){  elements.add(bool == null ? JsonNull.INSTANCE : new JsonPrimitive(bool));}  }
class C{  static public void closeAllDatabase(){  Log.i(tag,"closeAllDatabase");  if (mInstance != null) {    for (int i=0; i < mInstance.databases.size(); ++i) {      if (mInstance.databases.get(i) != null) {        mInstance.databases.get(i).close();      }    }    mInstance.databases.clear();  }}  }
class C{  public static ContentRevision createRevision(VirtualFile vcsRoot,String path,@Nullable VcsRevisionNumber revisionNumber,Project project,boolean isDeleted,final boolean canBeDeleted,boolean unescapePath) throws VcsException {  final FilePath file;  if (project.isDisposed()) {    file=VcsUtil.getFilePath(makeAbsolutePath(vcsRoot,path,unescapePath),false);  } else {    file=createPath(vcsRoot,path,isDeleted,canBeDeleted,unescapePath);  }  return createRevision(file,revisionNumber,project);}  }
class C{  public static LongStream of(long... values){  return java8.util.J8Arrays.stream(values);}  }
class C{  @NonNull public RxAppState stopMonitoring(){  appStateRecognizer.stop(app);  return this;}  }
class C{  public double probability(SampledVertex vertex,int iteration){  if (iteration == 0)   return numVertices[0] / (double)N; else {    int n=numVertices[iteration - 1];    double p_k=1 - Math.pow(1 - n / (double)N,vertex.getNeighbours().size());    return responseRate[iteration] * p_k;  }}  }
class C{  public AuthenticationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void invalidate(){  damageReport();  super.invalidate();}  }
class C{  @Override public boolean isPostOperation(){  return false;}  }
class C{  public String minus(String value){  checkNumericString(value);  BigDecimal subtrahend=new BigDecimal(value);  return amount.subtract(subtrahend).toString();}  }
class C{  private static void filterInvalidData(HashMap<Integer,LinkedList<String[]>> lsaData) throws IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(new File("E:/ampel/output/invalid.txt")));  int invalidCounter=0;  int validCounter=0;  for (  Integer tlID : lsaData.keySet()) {    LinkedList<String[]> validEntries=new LinkedList<String[]>();    for (    String[] stringData : lsaData.get(tlID)) {      if (stringData[4].equalsIgnoreCase("-1")) {        validEntries.add(stringData);        validCounter++;      } else {        writeDataToFile(writer,stringData);        invalidCounter++;      }    }    lsaData.put(tlID,validEntries);  }  writer.flush();  writer.close();  log.info(" InvalidDataFilter\t removed " + invalidCounter + " Entries.\t"+ validCounter+ " Entries remained.");}  }
class C{  public static void assertIsTrue(boolean condition){  if (!condition) {    throw new AssertionError("Expected condition to be true");  }}  }
class C{  public RelRoot convertWith(SqlWith with,boolean top){  return convertQuery(with.body,false,top);}  }
class C{  public boolean replaceIn(final StringBuffer source,final int offset,final int length){  if (source == null) {    return false;  }  final StrBuilder buf=new StrBuilder(length).append(source,offset,length);  if (substitute(buf,0,length) == false) {    return false;  }  source.replace(offset,offset + length,buf.toString());  return true;}  }
class C{  public void fillLinearGradient(int startColor,int endColor,int x,int y,int width,int height,boolean horizontal){  if (startColor == endColor) {    setColor(startColor);    fillRect(x,y,width,height,(byte)0xff);    return;  }  impl.fillLinearGradient(nativeGraphics,startColor,endColor,x + xTranslate,y + yTranslate,width,height,horizontal);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          if (dataSize % 2 == 1) {            z=data.get((dataSize + 1) / 2 - 1);          } else {            double lower=data.get(dataSize / 2 - 1);            double upper=data.get(dataSize / 2);            z=(lower + upper) / 2.0;          }          outputFile.setValue(row,col,z);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static <T>LinkedBindingBuilder<T> bind(Binder binder,TypeLiteral<T> type){  binder.disableCircularProxies();  return binder.bind(type).annotatedWith(UniqueAnnotations.create());}  }
class C{  private List<Image> orthoFor(IHex hex,Component comp){  ArrayList<Image> matches=new ArrayList<Image>();  for (Iterator<HexEntry> i=ortho.iterator(); i.hasNext(); ) {    HexEntry entry=i.next();    if (orthoMatch(hex,entry.getHex()) >= 1.0) {      Image img=entry.getImage(comp,hex.getCoords().hashCode());      if (img != null) {        matches.add(img);      } else {        matches.add(ImageUtil.createAcceleratedImage(HEX_W,HEX_H));      }      int terrTypes[]=entry.getHex().getTerrainTypes();      for (int j=0; j < terrTypes.length; j++) {        if (entry.getHex().containsTerrain(terrTypes[j])) {          hex.removeTerrain(terrTypes[j]);        }      }    }  }  return matches;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int numSources(){  return NUM_SOURCES;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("{");  sb.append(primaryAxis);  sb.append(",");  sb.append(secondaryCount);  sb.append(",");  sb.append(hueLower);  sb.append(",");  sb.append(hueUpper);  sb.append(",");  sb.append(saturationLower);  sb.append(",");  sb.append(saturationUpper);  sb.append(",");  sb.append(brightnessLower);  sb.append(",");  sb.append(brightnessUpper);  sb.append("}");  return sb.toString();}  }
class C{  public synchronized void sendDone(boolean done){  send(new Packet(Packet.COMMAND_PLAYER_READY,new Boolean(done)));  flushConn();}  }
class C{  private void scanOperator(){  while (true) {    reader.putChar(false);    Name newname=reader.name();    TokenKind tk1=tokens.lookupKind(newname);    if (tk1 == TokenKind.IDENTIFIER) {      reader.sp--;      break;    }    tk=tk1;    reader.scanChar();    if (!isSpecial(reader.ch))     break;  }}  }
class C{  public void reindexProject(IJavaProject javaProject) throws JavaModelException {  if (javaProject != null) {    JavaModelManager.getIndexManager().indexAll(javaProject.getProject());  }}  }
class C{  public PowerContainerDatacenter(String name,ContainerDatacenterCharacteristics characteristics,ContainerVmAllocationPolicy vmAllocationPolicy,ContainerAllocationPolicy containerAllocationPolicy,List<Storage> storageList,double schedulingInterval,String experimentName,String logAddress) throws Exception {  super(name,characteristics,vmAllocationPolicy,containerAllocationPolicy,storageList,schedulingInterval,experimentName,logAddress);  String containerMigrationAddress;  String vmMigrationAddress;  int index=getExperimentName().lastIndexOf("_");  containerMigrationAddress=String.format("%s/ContainerMigration/%s/%s.csv",getLogAddress(),getExperimentName().substring(0,index),getExperimentName());  String energyConsumptionAddress=String.format("%s/EnergyConsumption/%s/%s.csv",getLogAddress(),getExperimentName().substring(0,index),getExperimentName());  vmMigrationAddress=String.format("%s/ContainerMigration/%s/VM-%s.csv",getLogAddress(),getExperimentName().substring(0,index),getExperimentName());  setContainerMigrationWriter(new CostumeCSVWriter(containerMigrationAddress));  setVmMigrationWriter(new CostumeCSVWriter(vmMigrationAddress));  setDatacenterEnergyWriter(new CostumeCSVWriter(energyConsumptionAddress));  setPower(0.0);  setDisableVmMigrations(false);  setCloudletSubmitted(-1);  setVmMigrationCount(0);  setActiveHostList(new ArrayList<Double>());  setActiveVmList(new ArrayList<Double>());  setDatacenterEnergyList(new ArrayList<Double>());  setContainerMigrationList(new ArrayList<Double>());  setNumberOfVms(0);  setNumberOfContainers(0);}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public static boolean checkIfActive(Entity entity){  SpigotTimings.checkIfActiveTimer.startTiming();  boolean isActive=entity.activatedTick >= MinecraftServer.currentTick || entity.defaultActivationState;  if (!isActive) {    if ((MinecraftServer.currentTick - entity.activatedTick - 1) % 20 == 0) {      if (checkEntityImmunities(entity)) {        entity.activatedTick=MinecraftServer.currentTick + 20;      }      isActive=true;    }  } else   if (!entity.defaultActivationState && entity.ticksExisted % 4 == 0 && !checkEntityImmunities(entity)) {    isActive=false;  }  int x=net.minecraft.util.MathHelper.floor_double(entity.posX);  int z=net.minecraft.util.MathHelper.floor_double(entity.posZ);  if (isActive && !(entity.worldObj.isActiveBlockCoord(x,z) || entity.worldObj.doChunksNearChunkExist(x,0,z,16))) {    isActive=false;  }  if (entity instanceof EntityFireworkRocket || !entity.isAddedToChunk()) {    isActive=true;  }  SpigotTimings.checkIfActiveTimer.stopTiming();  return isActive;}  }
class C{  @Override public PairedStats calculateStatistics(Instance datasetSpecifier,int resultset1Index,int resultset2Index,int comparisonColumn) throws Exception {  if (m_Instances.attribute(comparisonColumn).type() != Attribute.NUMERIC) {    throw new Exception("Comparison column " + (comparisonColumn + 1) + " ("+ m_Instances.attribute(comparisonColumn).name()+ ") is not numeric");  }  if (!m_ResultsetsValid) {    prepareData();  }  Resultset resultset1=m_Resultsets.get(resultset1Index);  Resultset resultset2=m_Resultsets.get(resultset2Index);  ArrayList<Instance> dataset1=resultset1.dataset(datasetSpecifier);  ArrayList<Instance> dataset2=resultset2.dataset(datasetSpecifier);  String datasetName=templateString(datasetSpecifier);  if (dataset1 == null) {    throw new Exception("No results for dataset=" + datasetName + " for resultset="+ resultset1.templateString());  } else   if (dataset2 == null) {    throw new Exception("No results for dataset=" + datasetName + " for resultset="+ resultset2.templateString());  } else   if (dataset1.size() != dataset2.size()) {    throw new Exception("Results for dataset=" + datasetName + " differ in size for resultset="+ resultset1.templateString()+ " and resultset="+ resultset2.templateString());  }  PairedStats pairedStats=new PairedStats(m_SignificanceLevel);  for (int k=0; k < dataset1.size(); k++) {    Instance current1=dataset1.get(k);    Instance current2=dataset2.get(k);    if (current1.isMissing(comparisonColumn)) {      System.err.println("Instance has missing value in comparison " + "column!\n" + current1);      continue;    }    if (current2.isMissing(comparisonColumn)) {      System.err.println("Instance has missing value in comparison " + "column!\n" + current2);      continue;    }    if (current1.value(m_RunColumn) != current2.value(m_RunColumn)) {      System.err.println("Run numbers do not match!\n" + current1 + current2);    }    if (m_FoldColumn != -1) {      if (current1.value(m_FoldColumn) != current2.value(m_FoldColumn)) {        System.err.println("Fold numbers do not match!\n" + current1 + current2);      }    }    double value1=current1.value(comparisonColumn);    double value2=current2.value(comparisonColumn);    pairedStats.add(value1,value2);  }  pairedStats.calculateDerived();  return pairedStats;}  }
class C{  public boolean isIdle(){  return spdyConnection == null || spdyConnection.isIdle();}  }
class C{  void addAssociatedComponentAt(int index,Component cmp){  if (comps == null) {    comps=new Vector();  }  comps.insertElementAt(cmp,index);}  }
class C{  private void loadNote(int noteID){  try {    Note n=dbHandler.getNote(noteID);    editText.setText(n.getSpannable());    editText.setSelection(editText.getText().toString().length());    noteTitle.setText(n.getTitle());    drawingView.setBitmap(n.getImage());  } catch (  SQLiteException e) {    e.printStackTrace();  }}  }
class C{  public static void scaleRectAboutCenter(Rect r,float scale){  if (scale != 1.0f) {    int cx=r.centerX();    int cy=r.centerY();    r.offset(-cx,-cy);    r.left=(int)(r.left * scale + 0.5f);    r.top=(int)(r.top * scale + 0.5f);    r.right=(int)(r.right * scale + 0.5f);    r.bottom=(int)(r.bottom * scale + 0.5f);    r.offset(cx,cy);  }}  }
class C{  private void recycleViewsFromEnd(RecyclerView.Recycler recycler,int dt){  final int childCount=getChildCount();  if (dt < 0) {    if (DEBUG) {      Log.d(TAG,"Called recycle from end with a negative value. This might happen" + " during layout changes but may be sign of a bug");    }    return;  }  final int limit=mOrientationHelper.getEnd() - dt;  if (mShouldReverseLayout) {    for (int i=0; i < childCount; i++) {      View child=getChildAt(i);      if (mOrientationHelper.getDecoratedStart(child) < limit) {        recycleChildren(recycler,0,i);        return;      }    }  } else {    for (int i=childCount - 1; i >= 0; i--) {      View child=getChildAt(i);      if (mOrientationHelper.getDecoratedStart(child) < limit) {        recycleChildren(recycler,childCount - 1,i);        return;      }    }  }}  }
class C{  @Override public void service(Mail originalMail) throws MessagingException {  MailImpl newMail=new MailImpl(originalMail);  try {    try {      newMail.setRemoteHost(dns.getLocalHost().getHostName());    } catch (    UnknownHostException e) {      newMail.setRemoteHost("localhost");    }    try {      newMail.setRemoteAddr(dns.getLocalHost().getHostAddress());    } catch (    UnknownHostException e) {      newMail.setRemoteAddr("127.0.0.1");    }    if (originalMail.getSender() == null) {      if (isDebug)       log("Processing a bounce request for a message with an empty reverse-path.  No bounce will be sent.");      if (!getPassThrough(originalMail)) {        originalMail.setState(Mail.GHOST);      }      return;    }    MailAddress reversePath=originalMail.getSender();    if (isDebug)     log("Processing a bounce request for a message with a reverse path.  The bounce will be sent to " + reversePath);    Collection<MailAddress> newRecipients=new HashSet<MailAddress>();    newRecipients.add(reversePath);    newMail.setRecipients(newRecipients);    if (isDebug) {      log("New mail - sender: " + newMail.getSender() + ", recipients: "+ arrayToString(newMail.getRecipients().toArray())+ ", name: "+ newMail.getName()+ ", remoteHost: "+ newMail.getRemoteHost()+ ", remoteAddr: "+ newMail.getRemoteAddr()+ ", state: "+ newMail.getState()+ ", lastUpdated: "+ newMail.getLastUpdated()+ ", errorMessage: "+ newMail.getErrorMessage());    }    MimeMessage newMessage=new MimeMessage(Session.getDefaultInstance(System.getProperties(),null));    MimeMultipartReport multipart=new MimeMultipartReport();    multipart.setReportType("delivery-status");    MimeBodyPart part1=createTextMsg(originalMail);    multipart.addBodyPart(part1);    MimeBodyPart part2=createDSN(originalMail);    multipart.addBodyPart(part2);    if (getAttachmentType() != NONE) {      MimeBodyPart part3=createAttachedOriginal(originalMail,getAttachmentType());      multipart.addBodyPart(part3);    }    newMessage.setContent(multipart);    newMessage.setHeader(RFC2822Headers.CONTENT_TYPE,multipart.getContentType());    newMail.setMessage(newMessage);    setRecipients(newMail,getRecipients(originalMail),originalMail);    setTo(newMail,getTo(originalMail),originalMail);    setSubjectPrefix(newMail,getSubjectPrefix(originalMail),originalMail);    if (newMail.getMessage().getHeader(RFC2822Headers.DATE) == null) {      newMail.getMessage().setHeader(RFC2822Headers.DATE,DateFormats.RFC822_DATE_FORMAT.format(new Date()));    }    setReplyTo(newMail,getReplyTo(originalMail),originalMail);    setReversePath(newMail,getReversePath(originalMail),originalMail);    setSender(newMail,getSender(originalMail),originalMail);    setIsReply(newMail,isReply(originalMail),originalMail);    newMail.getMessage().saveChanges();    getMailetContext().sendMail(newMail);  }  finally {    newMail.dispose();  }  if (!getPassThrough(originalMail)) {    originalMail.setState(Mail.GHOST);  }}  }
class C{  private void handleConsumerDisconnected(DisconnectConsumerMessage packet) throws ActiveMQException {  DisconnectConsumerMessage message=packet;  session.handleConsumerDisconnect(new ActiveMQConsumerContext(message.getConsumerId()));}  }
class C{  public String toString(int service){  return String.format("(NRC:0x%02X) %s",code,String.format(description,service));}  }
class C{  @Override public boolean gesture(String obj,Point startPoint1,Point startPoint2,Point endPoint1,Point endPoint2,int steps) throws UiObjectNotFoundException, NotImplementedException {  return gesture(getUiObject(obj),startPoint1,startPoint2,endPoint1,endPoint2,steps);}  }
class C{  private void layoutY(MAssignmentSlot mas){  int timeSlotStart=getTimeSlotIndex(mas.getStartTime(),false);  int timeSlotEnd=getTimeSlotIndex(mas.getEndTime(),true);  if (TimeUtil.isAllDay(mas.getStartTime(),mas.getEndTime()))   timeSlotEnd=m_timeSlots.length - 1;  mas.setY(timeSlotStart,timeSlotEnd);}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + this.shape.hashCode();  if (this.stroke != null) {    result=37 * result + this.stroke.hashCode();  }  result=37 * result + HashUtilities.hashCodeForPaint(this.outlinePaint);  result=37 * result + HashUtilities.hashCodeForPaint(this.fillPaint);  return result;}  }
class C{  public DateTimeRange(DateTime start,DateTime end){  assertArgumentNotNull(start,"start");  assertArgumentNotNull(end,"end");  this.start=start;  this.end=end;}  }
class C{  private static DimConstraint parseDimConstraint(String s,BoundSize gapBefore,BoundSize gapAfter,boolean isCols){  DimConstraint dimConstraint=new DimConstraint();  dimConstraint.setGapBefore(gapBefore);  dimConstraint.setGapAfter(gapAfter);  String[] parts=toTrimmedTokens(s,',');  for (int i=0; i < parts.length; i++) {    String part=parts[i];    try {      if (part.length() == 0)       continue;      if (part.equals("fill")) {        dimConstraint.setFill(true);        continue;      }      if (part.equals("nogrid")) {        dimConstraint.setNoGrid(true);        continue;      }      int ix=-1;      char c=part.charAt(0);      if (c == 's') {        ix=startsWithLenient(part,new String[]{"sizegroup","sg"},new int[]{5,2},true);        if (ix > -1) {          dimConstraint.setSizeGroup(part.substring(ix).trim());          continue;        }        ix=startsWithLenient(part,new String[]{"shrinkprio","shp"},new int[]{10,3},true);        if (ix > -1) {          dimConstraint.setShrinkPriority(Integer.parseInt(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,"shrink",6,true);        if (ix > -1) {          dimConstraint.setShrink(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }      }      if (c == 'g') {        ix=startsWithLenient(part,new String[]{"growpriority","gp"},new int[]{5,2},true);        if (ix > -1) {          dimConstraint.setGrowPriority(Integer.parseInt(part.substring(ix).trim()));          continue;        }        ix=startsWithLenient(part,"grow",4,true);        if (ix > -1) {          dimConstraint.setGrow(parseFloat(part.substring(ix).trim(),ResizeConstraint.WEIGHT_100));          continue;        }      }      if (c == 'a') {        ix=startsWithLenient(part,"align",2,true);        if (ix > -1) {          dimConstraint.setAlign(parseUnitValueOrAlign(part.substring(ix).trim(),isCols,null));          continue;        }      }      UnitValue align=parseAlignKeywords(part,isCols);      if (align != null) {        dimConstraint.setAlign(align);        continue;      }      dimConstraint.setSize(parseBoundSize(part,false,isCols));    } catch (    Exception ex) {      throw new IllegalArgumentException("Illegal contraint: '" + part + "'\n"+ ex.getMessage());    }  }  return dimConstraint;}  }
class C{  public void onDidBeginLoader(PLIView view,PLILoader loader){}  }
class C{  private static Result<?> decodePayload(ByteBuf buffer,MqttMessageType messageType,int bytesRemainingInVariablePart,Object variableHeader){switch (messageType) {case CONNECT:    return decodeConnectionPayload(buffer,(MqttConnectVariableHeader)variableHeader);case SUBSCRIBE:  return decodeSubscribePayload(buffer,bytesRemainingInVariablePart);case SUBACK:return decodeSubAckPayload(buffer,bytesRemainingInVariablePart);case UNSUBSCRIBE:return decodeUnsubscribePayload(buffer,bytesRemainingInVariablePart);case PUBLISH:return decodePublishPayload(buffer,bytesRemainingInVariablePart);default :return new Result<>(null,0);}}  }
class C{  public E remove(int index){  E rv=delegate.elementAt(index);  delegate.removeElementAt(index);  fireIntervalRemoved(this,index,index);  return rv;}  }
class C{  private void stopPlaying(){  if (isRunning == false) {synchronized (this) {      notifyAll();    }    interrupt();    return;  }  isRunning=false;  runningStoppedTime=System.currentTimeMillis();synchronized (this) {    notifyAll();  }  interrupt();}  }
class C{  private String verifyTree(MTree_Base tree){  String nodeTableName=tree.getNodeTableName();  String sourceTableName=tree.getSourceTableName(true);  String sourceTableKey=sourceTableName + "_ID";  int AD_Client_ID=tree.getAD_Client_ID();  int C_Element_ID=0;  if (MTree.TREETYPE_ElementValue.equals(tree.getTreeType())) {    String sql="SELECT C_Element_ID FROM C_Element " + "WHERE AD_Tree_ID=" + tree.getAD_Tree_ID();    C_Element_ID=DB.getSQLValue(null,sql);    if (C_Element_ID <= 0)     throw new IllegalStateException("No Account Element found");  }  StringBuffer sql=new StringBuffer();  sql.append("DELETE ").append(nodeTableName).append(" WHERE AD_Tree_ID=").append(tree.getAD_Tree_ID()).append(" AND Node_ID NOT IN (SELECT ").append(sourceTableKey).append(" FROM ").append(sourceTableName).append(" WHERE AD_Client_ID=").append(AD_Client_ID);  if (C_Element_ID > 0)   sql.append(" AND C_Element_ID=").append(C_Element_ID);  sql.append(")");  log.finer(sql.toString());  int deletes=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(deletes),tree.getName() + " Deleted");  if (!tree.isAllNodes())   return tree.getName() + " OK";  int inserts=0;  sql=new StringBuffer();  sql.append("SELECT ").append(sourceTableKey).append(" FROM ").append(sourceTableName).append(" WHERE AD_Client_ID=").append(AD_Client_ID);  if (C_Element_ID > 0)   sql.append(" AND C_Element_ID=").append(C_Element_ID);  sql.append(" AND ").append(sourceTableKey).append("  NOT IN (SELECT Node_ID FROM ").append(nodeTableName).append(" WHERE AD_Tree_ID=").append(tree.getAD_Tree_ID()).append(")");  log.finer(sql.toString());  boolean ok=true;  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int Node_ID=rs.getInt(1);      PO node=null;      if (nodeTableName.equals("AD_TreeNode"))       node=new MTree_Node(tree,Node_ID); else       if (nodeTableName.equals("AD_TreeNodeBP"))       node=new MTree_NodeBP(tree,Node_ID); else       if (nodeTableName.equals("AD_TreeNodePR"))       node=new MTree_NodePR(tree,Node_ID); else       if (nodeTableName.equals("AD_TreeNodeMM"))       node=new MTree_NodeMM(tree,Node_ID);      if (node == null)       log.log(Level.SEVERE,"No Model for " + nodeTableName); else {        if (node.save())         inserts++; else         log.log(Level.SEVERE,"Could not add to " + tree + " Node_ID="+ Node_ID);      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,"verifyTree",e);    ok=false;  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  addLog(0,null,new BigDecimal(inserts),tree.getName() + " Inserted");  return tree.getName() + (ok ? " OK" : " Error");}  }
class C{  public void connectTo(String address,int port){  InputStream content=new ByteArrayInputStream(getLocalAddress().getBytes());  sendContent(MessageType.INIT,content,address,port);}  }
class C{  public Builder withCommandSequence(long commandSequence){  request.commandSequence=Assert.argNot(commandSequence,commandSequence < 0,"commandSequence cannot be negative");  return this;}  }
class C{  public static String[] split(String str,String delimiter){  List<String> result=new ArrayList<String>();  int lastIndex=0;  int index=str.indexOf(delimiter);  while (index != -1) {    result.add(str.substring(lastIndex,index));    lastIndex=index + delimiter.length();    index=str.indexOf(delimiter,index + delimiter.length());  }  result.add(str.substring(lastIndex,str.length()));  return ArrayUtil.toArray(result,String.class);}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=NonPowerAware.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="thr";  String vmSelectionPolicy="rs";  String parameter="0.8";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public MailOperationException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Override protected void finalize() throws Throwable {  setMapMsgIdFromTransationId(false);  super.finalize();}  }
class C{  private void writeString(String text,StringBuilder builder,int resId,String lineBreak){  if (text == null || text.length() == 0) {    text=context.getString(R.string.value_unknown);  }  builder.append(context.getString(resId,text));  builder.append(lineBreak);}  }
class C{  public void start(){  Boolean res=false;  if (onlyOnce) {    if (!libraryPreferences.getAdBlockerAdvise()) {      res=UtilsLibrary.isAdBlockerActivated();      libraryPreferences.setAdBlockerAdvise(true);    }  } else {    res=UtilsLibrary.isAdBlockerActivated();  }  if (res) {    UtilsUI.showTitleContent(context,title,text);  }}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.VARIABLE_DECLARATION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isLedgerHandleClosed(LedgerDescriptor ledgerDesc) throws BKException {  RefCountedLedgerHandle refhandle=getLedgerHandle(ledgerDesc);  if (null == refhandle) {    LOG.error("Accessing ledger {} without opening.",ledgerDesc);    throw BKException.create(BKException.Code.UnexpectedConditionException);  }  return refhandle.handle.isClosed();}  }
class C{  public void addWarning(int importance,String text,Object data,CSTNode context,SourceUnit source){  if (WarningMessage.isRelevant(importance,configuration.getWarningLevel())) {    addWarning(new WarningMessage(importance,text,data,context,source));  }}  }
class C{  public static short[] nullToEmpty(final short[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_SHORT_ARRAY;  }  return array;}  }
class C{  public void stateChanged(ChangeEvent e){  if (m_curWinTab != null) {    Component cp=m_window.getFocusOwner();    if (cp != null) {      m_window.dispatchEvent(new FocusEvent(cp,FocusEvent.FOCUS_LOST));    }  }  if (m_disposing)   return;  log.info(e.toString());  setBusy(true,true);  VTabbedPane tp=(VTabbedPane)e.getSource();  boolean back=false;  boolean isAPanelTab=false;  if (tp.isWorkbench()) {    int WBIndex=tabPanel.getSelectedIndex();    m_curWindowNo=m_mWorkbench.getWindowNo(WBIndex);    log.info("curWin=" + m_curWindowNo + " - Win="+ tp);    if (tp.getSelectedComponent() instanceof JTabbedPane)     m_curWinTab=(JTabbedPane)tp.getSelectedComponent(); else     throw new java.lang.IllegalArgumentException("Window does not contain Tabs");    if (m_curWinTab.getSelectedComponent() instanceof GridController) {      m_curGC=(GridController)m_curWinTab.getSelectedComponent();      initSwitchLineAction();    } else     throw new java.lang.IllegalArgumentException("Window-Tab does not contain GridControler");    m_curTabIndex=m_curWinTab.getSelectedIndex();  } else {    log.info("Tab=" + tp);    m_curWinTab=tp;    int tpIndex=m_curWinTab.getSelectedIndex();    if (tpIndex == m_curTabIndex)     return;    back=tpIndex < m_curTabIndex;    GridController gc=null;    if (m_curWinTab.getSelectedComponent() instanceof GridController)     gc=(GridController)m_curWinTab.getSelectedComponent(); else     if (m_curWinTab.getSelectedComponent() instanceof APanelTab)     isAPanelTab=true; else     throw new java.lang.IllegalArgumentException("Tab does not contain GridControler");    if (m_curGC != null) {      m_curGC.stopEditor(true);      if (m_curTab.needSave(true,false)) {        if (m_curTab.needSave(true,true)) {          if (Env.isAutoCommit(m_ctx,m_curWindowNo)) {            if (!m_curTab.dataSave(true)) {              showLastError();              m_curWinTab.setSelectedIndex(m_curTabIndex);              setBusy(false,true);              return;            }          } else           if (ADialog.ask(m_curWindowNo,this,"SaveChanges?",m_curTab.getCommitWarning())) {            if (!m_curTab.dataSave(true)) {              showLastError();              m_curWinTab.setSelectedIndex(m_curTabIndex);              setBusy(false,true);              return;            }          } else {            int newRecord=m_curTab.getTableModel().getNewRow();            if (newRecord == -1)             m_curTab.dataIgnore(); else {              m_curWinTab.setSelectedIndex(m_curTabIndex);              setBusy(false,true);              return;            }          }        } else         m_curTab.dataIgnore();      }    }    if (m_curAPanelTab != null) {      m_curAPanelTab.saveData();      m_curAPanelTab.unregisterPanel();      m_curAPanelTab=null;    }    m_curTabIndex=tpIndex;    if (!isAPanelTab) {      m_curGC=gc;      initSwitchLineAction();    }  }  if (isAPanelTab) {    m_curAPanelTab=(APanelTab)m_curWinTab.getSelectedComponent();    m_curAPanelTab.registerAPanel(this);    m_curAPanelTab.loadData();    aFirst.setEnabled(false);    aPrevious.setEnabled(false);    aNext.setEnabled(false);    aLast.setEnabled(false);  } else {    int gwTabIndex=m_mWorkbench.getMWindow(0).getTabIndex(m_curGC.getMTab());    if (m_mWorkbench.getMWindow(0).isTabInitialized(gwTabIndex) == false) {      m_mWorkbench.getMWindow(0).initTab(gwTabIndex);    }    m_curGC.activate();    m_curTab=m_curGC.getMTab();    if (back && m_curTab.isCurrent())     m_curTab.dataRefresh(); else {      MRole role=MRole.getDefault();      m_curGC.query(m_onlyCurrentRows,m_onlyCurrentDays,role.getMaxQueryRecords());    }    if (m_curTab.getRowCount() == 0) {      if (!m_curTab.isReadOnly() && (Env.isAutoNew(m_ctx,m_curWindowNo) || m_curTab.isQueryNewRecord())) {        log.config("No record - New - AutoNew=" + Env.isAutoNew(m_ctx,m_curWindowNo) + " - QueryNew="+ m_curTab.isQueryNewRecord());        m_curTab.dataNew(false);      } else {        aSave.setEnabled(false);        aDelete.setEnabled(false);        aDeleteSelection.setEnabled(false);      }      m_curTab.navigateCurrent();      m_curGC.dynamicDisplay(0);    }  }  aDetail.setEnabled(m_curTabIndex != m_curWinTab.getTabCount() - 1);  aParent.setEnabled(m_curTabIndex != 0 && m_curWinTab.getTabCount() > 1);  if (m_mWorkbench.getMWindow(getWindowIndex()).isTransaction())   aHistory.setEnabled(isFirstTab()); else {    aHistory.setPressed(false);    aHistory.setEnabled(false);  }  aPrint.setEnabled(m_curTab.isPrinted());  aPrintPreview.setEnabled(m_curTab.isPrinted());  aFind.setPressed(m_curTab.isQueryActive());  if (isAPanelTab) {    aMulti.setPressed(false);    aMulti.setEnabled(false);    aNew.setEnabled(false);    aDelete.setEnabled(false);    aDeleteSelection.setEnabled(false);    aFind.setEnabled(false);    aRefresh.setEnabled(false);    aAttachment.setEnabled(false);    aChat.setEnabled(false);  } else {    aMulti.setEnabled(true);    aMulti.setPressed(!m_curGC.isSingleRow());    aFind.setEnabled(true);    aRefresh.setEnabled(true);    aAttachment.setEnabled(true);    aChat.setEnabled(true);  }  m_curWinTab.requestFocusInWindow();  setBusy(false,true);  log.config("fini");}  }
class C{  @Override public synchronized boolean add(PartitionedEvent event){  long timestamp=event.getEvent().getTimestamp();  if (accept(timestamp)) {    boolean absent=btreeMap.putIfAbsentBoolean(timestamp,new PartitionedEvent[]{event});    if (!absent) {      size.incrementAndGet();      return true;    } else {      if (LOG.isDebugEnabled()) {        LOG.debug("Duplicated timestamp {}, will reduce performance as replacing",timestamp);      }      PartitionedEvent[] oldValue=btreeMap.get(timestamp);      PartitionedEvent[] newValue=oldValue == null ? new PartitionedEvent[1] : Arrays.copyOf(oldValue,oldValue.length + 1);      newValue[newValue.length - 1]=event;      PartitionedEvent[] removedValue=btreeMap.replace(timestamp,newValue);      replaceOpCount++;      if (replaceOpCount % 1000 == 0) {        LOG.warn("Too many events ({}) with overlap timestamp, may reduce insertion performance",replaceOpCount);      }      if (removedValue != null) {        size.incrementAndGet();      } else {        throw new IllegalStateException("Failed to replace key " + timestamp + " with "+ newValue.length+ " entities array to replace old "+ oldValue.length+ " entities array");      }      return true;    }  } else {    return false;  }}  }
class C{  public boolean isPermanent() throws UnknownHostException {  checkNodeStatusData();  return isPermanent;}  }
class C{  public TlsVersion tlsVersion(){  return tlsVersion;}  }
class C{  public int readUnsignedExpGolombCodedInt(){  return readExpGolombCodeNum();}  }
class C{  public void testGetDisplayedContentRedTransparentBkg(){  JFrame f=new JFrame();  f.setUndecorated(true);  JLabel wIcon=new JLabel(new ImageIcon("resources/icons/redTransparentBox.gif"));  wIcon.setOpaque(true);  wIcon.setBackground(java.awt.Color.blue);  f.add(wIcon);  f.pack();  flushAWT();  Assert.assertEquals("icon size",new Dimension(13,13).toString(),wIcon.getSize().toString());  int[] val=getDisplayedContent(wIcon,wIcon.getSize(),new Point(0,0));  Assert.assertEquals("icon arraylength",13 * 13,val.length);  assertPixel("icon first",Pixel.RED,val[0]);  assertPixel("icon middle",Pixel.BLUE,val[(int)Math.floor(wIcon.getSize().height / 2) * wIcon.getSize().width + (int)Math.floor(wIcon.getSize().width / 2) - 1]);  assertPixel("icon last",Pixel.RED,val[wIcon.getSize().height * wIcon.getSize().width - 1]);  Assert.assertEquals("icon first","0xffff0000",formatPixel(val[0]));  assertImageNinePoints("icon",val,wIcon.getSize(),Pixel.RED,Pixel.RED,Pixel.RED,Pixel.RED,Pixel.BLUE,Pixel.RED,Pixel.RED,Pixel.RED,Pixel.RED);  f.dispose();}  }
class C{  public ClientOperation(int maxSize,ClientSession p,HeaderSet header,boolean type) throws IOException {  mParent=p;  mEndOfBodySent=false;  mInputOpen=true;  mOperationDone=false;  mMaxPacketSize=maxSize;  mGetOperation=type;  mGetFinalFlag=false;  mPrivateInputOpen=false;  mPrivateOutputOpen=false;  mPrivateInput=null;  mPrivateOutput=null;  mReplyHeader=new HeaderSet();  mRequestHeader=new HeaderSet();  int[] headerList=header.getHeaderList();  if (headerList != null) {    for (int i=0; i < headerList.length; i++) {      mRequestHeader.setHeader(headerList[i],header.getHeader(headerList[i]));    }  }  if ((header).mAuthChall != null) {    mRequestHeader.mAuthChall=new byte[(header).mAuthChall.length];    System.arraycopy((header).mAuthChall,0,mRequestHeader.mAuthChall,0,(header).mAuthChall.length);  }  if ((header).mAuthResp != null) {    mRequestHeader.mAuthResp=new byte[(header).mAuthResp.length];    System.arraycopy((header).mAuthResp,0,mRequestHeader.mAuthResp,0,(header).mAuthResp.length);  }}  }
class C{  public static void w(Throwable thr){  if (BuildConfig.DEBUG)   android.util.Log.w(TAG,buildMessage(""),thr);}  }
class C{  @Override public void stop(){  this.isStopped=true;}  }
class C{  public static IJavaElement create(String handleIdentifier,JavaProject project){  return create(handleIdentifier,DefaultWorkingCopyOwner.PRIMARY,project);}  }
class C{  public String replaceFirst(String expr,String substitute){  return Pattern.compile(expr).matcher(this).replaceFirst(substitute);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public boolean isBetaFunctionality(){  Object oo=get_Value(COLUMNNAME_IsBetaFunctionality);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public MonitoredItemModifyResult clone(){  MonitoredItemModifyResult result=new MonitoredItemModifyResult();  result.StatusCode=StatusCode;  result.RevisedSamplingInterval=RevisedSamplingInterval;  result.RevisedQueueSize=RevisedQueueSize;  result.FilterResult=FilterResult;  return result;}  }
class C{  public Source<String> ofLength(int fixedLength){  return ofLengthBetween(fixedLength,fixedLength);}  }
class C{  public EncoderException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static String encode(byte[] input){  if (input.length == 0) {    return "";  }  int zeros=0;  while (zeros < input.length && input[zeros] == 0) {    ++zeros;  }  input=Arrays.copyOf(input,input.length);  char[] encoded=new char[input.length * 2];  int outputStart=encoded.length;  for (int inputStart=zeros; inputStart < input.length; ) {    encoded[--outputStart]=ALPHABET[divmod(input,inputStart,256,58)];    if (input[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < encoded.length && encoded[outputStart] == ENCODED_ZERO) {    ++outputStart;  }  while (--zeros >= 0) {    encoded[--outputStart]=ENCODED_ZERO;  }  return new String(encoded,outputStart,encoded.length - outputStart);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:39.498 -0500",hash_original_method="B5AB077B4013E218660670FE95A73F4B",hash_generated_method="B5AB077B4013E218660670FE95A73F4B") String columnNameLocked(int columnIndex){  acquireReference();  try {    return nativeColumnName(nStatement,columnIndex);  }  finally {    releaseReference();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.098 -0500",hash_original_method="85B9524033BC9A85EE51FE1FEA6AF837",hash_generated_method="CEF27A2E6A9145AC480E41CF5E9BDF23") public static boolean equals(int[] array1,int[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static void writeVarInt(OutputStream out,int x) throws IOException {  while ((x & ~0x7f) != 0) {    out.write((byte)(0x80 | (x & 0x7f)));    x>>>=7;  }  out.write((byte)x);}  }
class C{  public Double GetMedian(List<Double> values){  int count=values.size();  double median;  double m1;  double m2;  if ((count % 2) == 1) {    median=values.get((int)(count / 2));  } else   if (count > 0) {    m1=values.get(count / 2);    m2=values.get((count / 2) - 1);    median=(m1 + m2) / 2;  } else {    median=0;  }  return median;}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  final PrintWriter writer=response.getWriter();  final boolean allowWrite=userService.isAuthorable(request.getResourceResolver().adaptTo(Session.class));  response.setCharacterEncoding(CharEncoding.UTF_8);  response.setContentType("application/json");  if (allowWrite) {    final String siteKey=request.getParameter(SITE_KEY_PROPERTY);    final String secretKey=request.getParameter(SECRET_KEY_PROPERTY);    final boolean enabled=Boolean.parseBoolean(request.getParameter(ENABLED_PROPERTY));    final Map<String,Object> properties=new HashMap<String,Object>();    properties.put(RecaptchaService.RECAPTCHA_SITE_KEY,siteKey);    properties.put(RecaptchaService.RECAPTCHA_ENABLED,enabled);    if (StringUtils.isBlank(secretKey) || !secretKey.contains(PublickConstants.PASSWORD_REPLACEMENT)) {      properties.put(RecaptchaService.RECAPTCHA_SECRET_KEY,secretKey);    }    final boolean result=recaptchaService.setProperties(properties);    if (result) {      response.setStatus(SlingHttpServletResponse.SC_OK);      sendResponse(writer,"OK","Settings successfully updated.");    } else {      response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);      sendResponse(writer,"Error","Settings failed to update.");    }  } else {    response.setStatus(SlingHttpServletResponse.SC_FORBIDDEN);    sendResponse(writer,"Error","Current user not authorized.");  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildlawrence(zone);}  }
class C{  final public void print(int v){  try {    _out.print(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public void addMutation(byte[] rowKey,ColumnList cols,Durability durability){  if (cols.hasColumns()) {    Put put=createPut(rowKey,cols,durability);    mutations.add(put);  }  if (cols.hasCounters()) {    Increment inc=createIncrement(rowKey,cols,durability);    mutations.add(inc);  }  if (mutations.isEmpty()) {    mutations.add(new Put(rowKey));  }}  }
class C{  public ScriptedMetricBuilder mapScript(Script mapScript){  this.mapScript=mapScript;  return this;}  }
class C{  public ExamineClipboardAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("ExamineClipboardAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("ExamineClipboardAction.statusbar"));  putValue(NAME,res.getString("ExamineClipboardAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExamineClipboardAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExamineClipboardAction.image")))));}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  private String createData(String path,byte[] data,CreateMode mode) throws KeeperException, InterruptedException {  for (; ; ) {    try {      return zookeeper.create(path,data,mode,true);    } catch (    KeeperException.NoNodeException e) {      try {        zookeeper.create(dir,new byte[0],CreateMode.PERSISTENT,true);      } catch (      KeeperException.NodeExistsException ne) {      }    }  }}  }
class C{  public static <T>ListIterator<T> emptyListIterator(){  return Collections.<T>emptyList().listIterator();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_3__TAIL_1:    return TAIL_1_EDEFAULT == null ? tail_1 != null : !TAIL_1_EDEFAULT.equals(tail_1);}return super.eIsSet(featureID);}  }
class C{  @Override public void updateNCharacterStream(int columnIndex,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNCharacterStream(" + columnIndex + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnIndex,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (flags: ");  result.append(flags);  result.append(')');  return result.toString();}  }
class C{  public String useIBkTipText(){  return "Sets whether IBk should be used instead of the majority class.";}  }
class C{  protected void applySetTimestamp(Long timestamp) throws SQLException {  if (timestamp != null && conn.supportsControlTimestamp()) {    setTimestampQuery=conn.getControlTimestampQuery(timestamp);    if (timestamp.longValue() != currentTimestamp) {      currentTimestamp=timestamp.longValue();      applyTS=true;    }  }}  }
class C{  @Override public void doRunKeys(int run) throws Exception {  if (m_Instances == null) {    throw new Exception("No Instances set");  }  for (int fold=0; fold < m_NumFolds; fold++) {    Object[] seKey=m_SplitEvaluator.getKey();    Object[] key=new Object[seKey.length + 3];    key[0]=Utils.backQuoteChars(m_Instances.relationName());    key[1]="" + run;    key[2]="" + (fold + 1);    System.arraycopy(seKey,0,key,3,seKey.length);    if (m_ResultListener.isResultRequired(this,key)) {      try {        m_ResultListener.acceptResult(this,key,null);      } catch (      Exception ex) {        throw ex;      }    }  }}  }
class C{  private Candidate newCandidate(S2Cell cell){  if (!region.mayIntersect(cell)) {    return null;  }  boolean isTerminal=false;  if (cell.level() >= minLevel) {    if (interiorCovering) {      if (region.contains(cell)) {        isTerminal=true;      } else       if (cell.level() + levelMod > maxLevel) {        return null;      }    } else {      if (cell.level() + levelMod > maxLevel || region.contains(cell)) {        isTerminal=true;      }    }  }  Candidate candidate=new Candidate();  candidate.cell=cell;  candidate.isTerminal=isTerminal;  if (!isTerminal) {    candidate.children=new Candidate[1 << maxChildrenShift()];  }  candidatesCreatedCounter++;  return candidate;}  }
class C{  public static Node createNodeWithHost(final String host,final String name){  return new Node(new WeakNodeIdentity(name),NodeEndpoint.fromHost(host));}  }
class C{  public Program(Rules rules){  super(rules.getReturnType(),rules.getReturnType());  this.rules=rules;}  }
class C{  public LogFormatter(){  this(null);}  }
class C{  public static int nextIndex(int index){  return index=(index + 1) % 3;}  }
class C{  public Stat stat() throws IOException {  return Stat.get(pid);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:07.861 -0500",hash_original_method="0BD8B4210E063DA673A9D4D2CF1851E6",hash_generated_method="54ABC94F488C001CBD8DF02BC337AE93") public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  H5=0xc3d2e1f0;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public JsonHttpResponseHandler(String encoding,boolean useRFC5179CompatibilityMode){  super(encoding);  this.useRFC5179CompatibilityMode=useRFC5179CompatibilityMode;}  }
class C{  public strong addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public SIPHeader parse() throws ParseException {  RequireList requireList=new RequireList();  if (debug)   dbg_enter("RequireParser.parse");  try {    headerName(TokenTypes.REQUIRE);    while (lexer.lookAhead(0) != '\n') {      Require r=new Require();      r.setHeaderName(SIPHeaderNames.REQUIRE);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      r.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      requireList.add(r);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        r=new Require();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        r.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        requireList.add(r);      }    }  }  finally {    if (debug)     dbg_leave("RequireParser.parse");  }  return requireList;}  }
class C{  public static void determineGesture(MouseEvent event){}  }
class C{  public Accessor(Object instance,Class clazz){  org.eclipse.core.runtime.Assert.isNotNull(instance);  Assert.isNotNull(clazz);  fInstance=instance;  fClass=clazz;}  }
class C{  public Complex evaluate(double omega){  Complex ejOmega=Complex.exp(new Complex(0.0,-omega));  return T.evaluate(ejOmega);}  }
class C{  public static Bitmap rotateBitmap(Bitmap bitmap,int degrees){  if (degrees != 0 && bitmap != null) {    final Matrix m=new Matrix();    final int w=bitmap.getWidth();    final int h=bitmap.getHeight();    m.setRotate(degrees,(float)w / 2,(float)h / 2);    try {      final Bitmap rotatedBitmap=Bitmap.createBitmap(bitmap,0,0,w,h,m,true);      if (bitmap != rotatedBitmap && rotatedBitmap != null) {        bitmap.recycle();        bitmap=rotatedBitmap;      }    } catch (    OutOfMemoryError ex) {      Log.e(TAG,"OOM in rotateBitmap",ex);    }  }  return bitmap;}  }
class C{  @Override @Interruptible public void resizeFreeList(){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(parent != null && !Plan.isInitialized());  table=parent.getTable();}  }
class C{  public boolean isItemListingSupported(){  return false;}  }
class C{  public void paint(Graphics g){  if (layer != null) {    OMGraphicList list=layer.getList();    Projection proj=layer.getProjection();    if (list != null && layer.isProjectionOK(proj)) {      setCompositeOnGraphics((Graphics2D)g);      list.render(g);    } else     if (logger.isLoggable(Level.FINE)) {      logger.fine(layer.getName() + " StandardRenderPolicy.paint(): " + (list == null ? "NULL list, skipping..." : " skipping due to projection."));    }  } else {    logger.fine("StandardRenderPolicy.paint():  NULL layer, skipping...");  }}  }
class C{  public void connect(){  mHelper.connect();}  }
class C{  @Inject EntryParserImpl(AuthorParser authorParser,ContentParser contentParser,DataParser dataParser,FieldParser fieldParser,SummaryParser summaryParser,TitleParser titleParser,UpdatedParser updatedParser){  this.authorParser=checkNotNull(authorParser);  this.contentParser=checkNotNull(contentParser);  this.dataParser=checkNotNull(dataParser);  this.fieldParser=checkNotNull(fieldParser);  this.summaryParser=checkNotNull(summaryParser);  this.titleParser=checkNotNull(titleParser);  this.updatedParser=checkNotNull(updatedParser);}  }
class C{  protected void trace(int x){  trace("" + x);}  }
class C{  public static boolean isValidPrincipal(StorageOSPrincipal principal,URI tenantId){  StringBuilder error=new StringBuilder();  return Validator.isValidPrincipal(principal,tenantId,error);}  }
class C{  Future<LogSegmentMetadata> completeAndCloseLogSegment(final BKLogSegmentWriter writer){  final Promise<LogSegmentMetadata> promise=new Promise<LogSegmentMetadata>();  completeAndCloseLogSegment(writer,promise);  return promise;}  }
class C{  public X509Certificate generate(PrivateKey key,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=tbsGen.generateTBSCertificate();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  return generateJcaObject(tbsCert,signature);}  }
class C{  public void paintMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public Polygon createArcPolygon(double startAng,double angExtent){  Envelope env=dim.getEnvelope();  double xRadius=env.getWidth() / 2.0;  double yRadius=env.getHeight() / 2.0;  double centreX=env.getMinX() + xRadius;  double centreY=env.getMinY() + yRadius;  double angSize=angExtent;  if (angSize <= 0.0 || angSize > 2 * Math.PI)   angSize=2 * Math.PI;  double angInc=angSize / (nPts - 1);  Coordinate[] pts=new Coordinate[nPts + 2];  int iPt=0;  pts[iPt++]=coord(centreX,centreY);  for (int i=0; i < nPts; i++) {    double ang=startAng + angInc * i;    double x=xRadius * Math.cos(ang) + centreX;    double y=yRadius * Math.sin(ang) + centreY;    pts[iPt++]=coord(x,y);  }  pts[iPt++]=coord(centreX,centreY);  LinearRing ring=geomFact.createLinearRing(pts);  Polygon poly=geomFact.createPolygon(ring,null);  return (Polygon)rotate(poly);}  }
class C{  public static Inet4Address fromInteger(int address){  return getInet4Address(Ints.toByteArray(address));}  }
class C{  public boolean isGetter(){  MemberType _memberType=this.getMemberType();  return Objects.equal(_memberType,MemberType.GETTER);}  }
class C{  public static <L extends Lock>void unlockAll(L... locks){  for (  L lock : locks) {    lock.unlock();  }}  }
class C{  public ObjectFactory(){}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 204) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public static void removeAll(final CCriteriumTree tree){  disposeTree(tree.getRoot());  tree.clear();}  }
class C{  @Override public void addOverrideUnidirectionalOneToManyMapping(UnidirectionalOneToManyMapping mapping){  overrideUnidirectionalOneToManyMappings.add(mapping);}  }
class C{  public static <TK,FV>ConcreteRule<TK,FV> makeSyntheticRule(Sequence<TK> source,Sequence<TK> target,CoverageSet sourceCoverage,String[] phraseScoreNames,Scorer<FV> scorer,FeatureExtractor<TK,FV> featurizer,double[][] cnt_f_e,int[] cnt_e,int[] cnt_f,InputProperties inputProperties,Sequence<TK> sourceSequence,int sourceInputId,PhraseAlignment align){  float[] scores=new float[phraseScoreNames.length];  scores[0]=getF2eScore(cnt_f_e,cnt_e);  scores[1]=scores[0];  scores[2]=getE2fScore(cnt_f_e,cnt_f);  scores[3]=scores[2];  if (scores.length > FeatureTemplate.DENSE.getNumFeatures()) {    scores[4]=0.0f;    scores[5]=-1.0f;  }  Rule<TK> abstractRule=new Rule<>(scores,phraseScoreNames,target,source,align,PHRASE_TABLE_NAME);  ConcreteRule<TK,FV> rule=new ConcreteRule<>(abstractRule,sourceCoverage,featurizer,scorer,sourceSequence,sourceInputId,inputProperties);  return rule;}  }
class C{  private static String htmlencode(String str){  if (str == null) {    return "";  } else {    StringBuilder buf=new StringBuilder();    for (    char ch : str.toCharArray()) {switch (ch) {case '<':        buf.append("&lt;");      break;case '>':    buf.append("&gt;");  break;case '&':buf.append("&amp;");break;default :buf.append(ch);break;}}return buf.toString();}}  }
class C{  public static CpimHeader parseHeader(String data){  int index=data.indexOf(":");  String key=data.substring(0,index);  String value=data.substring(index + 1);  return new CpimHeader(key.trim(),value.trim());}  }
class C{  public static void shakeX(View v,float offset,long duration,float times){  ObjectAnimator animator=ObjectAnimator.ofFloat(v,View.TRANSLATION_X,0,offset);  animator.setDuration(duration);  animator.setInterpolator(new CycleInterpolator(times));  animator.start();}  }
class C{  public static Map<String,String> parseKeyAndValueToMap(String source){  if (TextUtils.isEmpty(source)) {    return null;  }  try {    JSONObject jsonObject=new JSONObject(source);    return parseKeyAndValueToMap(jsonObject);  } catch (  JSONException e) {    Logger.e(e);    return null;  }}  }
class C{  public void newDecVariableValue(String name,String CV,String comment,String mask,boolean readOnly,boolean infoOnly,boolean writeOnly,boolean opsOnly){  setFileDirty(true);  int minVal=0;  int maxVal=255;  _cvModel.addCV("" + CV,readOnly,infoOnly,writeOnly);  int row=getRowCount();  JButton bw=new JButton("Write");  bw.setActionCommand("W" + row);  bw.addActionListener(this);  _writeButtons.addElement(bw);  JButton br=new JButton("Read");  br.setActionCommand("R" + row);  br.addActionListener(this);  _readButtons.addElement(br);  VariableValue v=new DecVariableValue(name,comment,"",readOnly,infoOnly,writeOnly,opsOnly,CV,mask,minVal,maxVal,_cvModel.allCvMap(),_status,null);  rowVector.addElement(v);  v.addPropertyChangeListener(this);}  }
class C{  public static void registerSharedPreferencesChangedListener(final SharedPreferences.OnSharedPreferenceChangeListener onSharedPreferenceChangeListener){  final SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(YeloApplication.getStaticContext());  preferences.registerOnSharedPreferenceChangeListener(onSharedPreferenceChangeListener);}  }
class C{  public CLogConsoleMenuBar(){  final JMenu menu=new JMenu("Log");  menu.setMnemonic("LogMenuMnemonic".charAt(0));  menu.add(new JMenuItem(new CSaveToFileAction()));  add(menu);}  }
class C{  public SaaSSystemException(String arg0,Throwable arg1){  super(arg0,arg1);  genId();  this.setCauseStackTrace(arg1);}  }
class C{  public void addActionListener(ActionListener listener){  listenerList.add(ActionListener.class,listener);}  }
class C{  protected AnimatableNumberOptionalNumberValue(AnimationTarget target){  super(target);}  }
class C{  public static ClientId parseClientId(Node node) throws Exception {  XroadClientIdentifierType type=parseType(XroadObjectType.MEMBER,node,XroadClientIdentifierType.class);  return IdentifierTypeConverter.parseClientId(type);}  }
class C{  public void addInvokespecial(String clazz,String name,String desc){  addInvokespecial(false,constPool.addClassInfo(clazz),name,desc);}  }
class C{  public static SpanQuery spanQuery(SpanQuery query){  QueryUtils.check(query);  return new AssertingSpanQuery(query);}  }
class C{  public char loadChar(){  return (char)0;}  }
class C{  public MSF4JClient.Builder<T> requestInterceptor(RequestInterceptor requestInterceptor){  this.requestInterceptors.add(requestInterceptor);  return this;}  }
class C{  protected void resetOptions(){  m_entries=null;  m_decisionFeatures=null;  m_useIBk=false;  m_CVFolds=1;  m_displayRules=false;  m_evaluationMeasure=EVAL_DEFAULT;}  }
class C{  @Override public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (opcode == Opcodes.INVOKESTATIC && name.startsWith("__cobertura")) {    for (    Type parameterType : Type.getArgumentTypes(desc)) {      if (parameterType.getSize() == 1) {        super.visitInsn(Opcodes.POP);      } else       if (parameterType.getSize() == 2) {        super.visitInsn(Opcodes.POP2);      }    }  } else {    super.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public int compareTo(Object o){  return ((ProfiledSql)o).execTime.compareTo(execTime);}  }
class C{  public boolean isPassword(){  return getBooleanProperty(PROPERTY_PASSWORD);}  }
class C{  private void addElementNameEvidenceElementToOverrideTarget(ProcessRemarkService prs,ProcessRemark pr){  EvidenceElement ee=prs.getEvidenceElement(ProcessRemarkService.DEFAULT_EVIDENCE,ELEMENT_NAME_VALUE_KEY);  pr.addElement(ee);}  }
class C{  public static <E extends ClusterOrder>Clustering<Model> makeOPTICSCut(E co,double epsilon){  Clustering<Model> clustering=new Clustering<>("OPTICS Cut Clustering","optics-cut");  ModifiableDBIDs noise=DBIDUtil.newHashSet();  double lastDist=Double.MAX_VALUE;  double actDist=Double.MAX_VALUE;  ModifiableDBIDs current=DBIDUtil.newHashSet();  DBIDVar prev=DBIDUtil.newVar();  for (DBIDIter it=co.iter(); it.valid(); prev.set(it), it.advance()) {    lastDist=actDist;    actDist=co.getReachability(it);    if (actDist <= epsilon) {      if (lastDist > epsilon && prev.isSet()) {        noise.remove(prev);        current.add(prev);      }      current.add(it);    } else {      if (!current.isEmpty()) {        clustering.addToplevelCluster(new Cluster<Model>(current,ClusterModel.CLUSTER));        current=DBIDUtil.newHashSet();      }      noise.add(it);    }  }  if (!current.isEmpty()) {    clustering.addToplevelCluster(new Cluster<Model>(current,ClusterModel.CLUSTER));  }  clustering.addToplevelCluster(new Cluster<Model>(noise,true,ClusterModel.CLUSTER));  return clustering;}  }
class C{  static void test6(){  for (int i=0; i < input.length; i++) {    String s=input[i];    StringBuffer sb=new StringBuffer(s);    int length=s.length();    for (int j=0; j <= length; j++) {      int nCodePoints=Character.codePointCount(sb,j,length);      int result=sb.offsetByCodePoints(j,nCodePoints);      check(result != length,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ nCodePoints+ ")",result,length);      result=sb.offsetByCodePoints(length,-nCodePoints);      int expected=j;      if (j > 0 && j < length) {        int cp=sb.codePointBefore(j + 1);        if (Character.isSupplementaryCodePoint(cp)) {          expected--;        }      }      check(result != expected,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ (-nCodePoints)+ ")",result,expected);    }    for (int j=length; j >= 0; j--) {      int nCodePoints=Character.codePointCount(sb,0,j);      int result=sb.offsetByCodePoints(0,nCodePoints);      int expected=j;      if (j > 0 && j < length) {        int cp=sb.codePointAt(j - 1);        if (Character.isSupplementaryCodePoint(cp)) {          expected++;        }      }      check(result != expected,"offsetByCodePoints(input[" + i + "], 0, "+ nCodePoints+ ")",result,expected);      result=sb.offsetByCodePoints(j,-nCodePoints);      check(result != 0,"offsetBycodePoints(input[" + i + "], "+ j+ ", "+ (-nCodePoints)+ ")",result,0);    }    testOffsetByCodePoints(null,0,0,NullPointerException.class);    testOffsetByCodePoints(sb,-1,length,IndexOutOfBoundsException.class);    testOffsetByCodePoints(sb,0,length + 1,IndexOutOfBoundsException.class);    testOffsetByCodePoints(sb,1,-2,IndexOutOfBoundsException.class);    testOffsetByCodePoints(sb,length,length - 1,IndexOutOfBoundsException.class);    testOffsetByCodePoints(sb,length,-(length + 1),IndexOutOfBoundsException.class);  }}  }
class C{  public boolean isAddExportedEntries(){  return fAddExportedEntries;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return node == null ? null : node.getDataObject();}  }
class C{  public static Geometry bufferBySegments(Geometry g,double distance){  Geometry segs=LineHandlingFunctions.extractSegments(g);  double posDist=Math.abs(distance);  Geometry segBuf=bufferByComponents(segs,posDist);  if (distance < 0.0)   return g.difference(segBuf);  return g.union(segBuf);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("DeleteOld"))     p_DeleteOld="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_C_TaxDeclaration_ID=getRecord_ID();}  }
class C{  public static BindingsConfigurationProvider doBind(BindingsConfigurationProvider provider){  return provider.bind(FDBHolder.class,FDBHolderImpl.class).bind(MetricsService.class,FDBMetricsService.class).bind(SchemaManager.class,FDBSchemaManager.class).bind(Store.class,FDBStore.class).bind(IndexStatisticsService.class,FDBIndexStatisticsService.class).bind(TransactionService.class,FDBTransactionService.class);}  }
class C{  public MyDirectedGraphCreatorVer2(){}  }
class C{  protected boolean reportReturn(String methodCall,boolean value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public static void registerInfuseType(InfuseType infuse){  if (infuseTypes.containsKey(infuse.name)) {    return;  }  infuseTypes.put(infuse.name,infuse);}  }
class C{  public static void translate(Struct sct){  Iterator<Entry<Key,Object>> it=sct.entryIterator();  Entry<Key,Object> e;  Object value;  while (it.hasNext()) {    e=it.next();    value=e.getValue();    if (value instanceof String) {      sct.setEL(e.getKey(),translate((String)value));    }  }}  }
class C{  public NetAppClusterFacade(String host,int port,String username,String password,boolean useHTTPS){  this(host,port,username,password,useHTTPS,false,null);}  }
class C{  public void adjust(Collection<MapNode> nodes){  for (  MapNode node : nodes) {    if (Float.isNaN(latMin)) {      latMin=latMax=node.getLat();      lonMin=lonMax=node.getLon();    } else     if (node.hasPosition()) {      if (node.getLat() < latMin)       latMin=node.getLat(); else       if (node.getLat() > latMax)       latMax=node.getLat();      if (node.getLon() < lonMin)       lonMin=node.getLon(); else       if (node.getLon() > lonMax)       lonMax=node.getLon();    }  }}  }
class C{  private void addMetricstoMetricsObject(Map<String,Object> keyMap,String volume,List<Stat> metricsObjList,long timeinMillis,List<String> metricSequence,DbClient dbClient) throws SMIPluginException {  String nativeGuid=null;  try {    _logger.debug("Volumes :" + volume);    Iterable<String> splitIterator=Splitter.on(Constants.SEMI_COLON).split(volume);    List<String> metricValuesList=Lists.newLinkedList(splitIterator);    nativeGuid=translatedAttributes(metricValuesList.get(0).toUpperCase(),keyMap);    CIMObjectPath path=null;    if (nativeGuid.contains(_symm)) {      path=createCIMPath(nativeGuid,_symmvolume,_symmsystem,keyMap);    } else     if (nativeGuid.contains(_clar)) {      path=createCIMPath(nativeGuid,_clarvolume,_clarsystem,keyMap);    }    Stat statObj=_zeroRecordGenerator.injectattr(keyMap,nativeGuid,null);    if (statObj != null) {      @SuppressWarnings("unchecked") List<CIMObjectPath> volList=(List<CIMObjectPath>)keyMap.get(Constants._Volumes);      volList.add(path);      statObj.setServiceType(Constants._Block);      statObj.setTimeCollected((Long)keyMap.get(Constants._TimeCollected));      statObj.setTimeInMillis(timeinMillis);      _statsColumnInjector.injectColumns(statObj,dbClient);      int count=0;      for (      String metricName : metricSequence) {        String metricValue=metricValuesList.get(count);switch (VolumeMetric.lookup(metricName)) {case InstanceID:case ElementType:          count++;        break;case KBytesWritten:      statObj.setBandwidthIn(ControllerUtils.getLongValue(metricValue));    count++;  break;case KBytesRead:statObj.setBandwidthOut(ControllerUtils.getLongValue(metricValue));count++;break;case TotalIOs:statObj.setTotalIOs(ControllerUtils.getLongValue(metricValue));count++;break;case ReadIOs:statObj.setReadIOs(ControllerUtils.getLongValue(metricValue));count++;break;case WriteIOs:statObj.setWriteIOs(ControllerUtils.getLongValue(metricValue));count++;break;case KBytesTransferred:statObj.setKbytesTransferred(ControllerUtils.getLongValue(metricValue));count++;break;case IdleTimeCounter:if (null != metricValue && 0 < metricValue.trim().length()) {statObj.setIdleTimeCounter(ControllerUtils.getLongValue(metricValue));}count++;break;case IOTimeCounter:if (null != metricValue && 0 < metricValue.trim().length()) {statObj.setIoTimeCounter(ControllerUtils.getLongValue(metricValue));}count++;break;case EMCQueueLength:if (null != metricValue && 0 < metricValue.trim().length()) {statObj.setQueueLength(ControllerUtils.getLongValue(metricValue));}count++;break;default :_logger.warn("Ignoring unknown metric {} during system metric processing:",metricName);count++;break;}}metricsObjList.add(statObj);}} catch (Exception ex) {_logger.error("Processing Volume : {} failed : ",volume,ex);}}  }
class C{  public static void main(String args[]){  int j;  MersenneTwisterFast r;  r=new MersenneTwisterFast(new int[]{0x123,0x234,0x345,0x456});  System.out.println("Output of MersenneTwisterFast with new (2002/1/26) seeding mechanism");  for (j=0; j < 1000; j++) {    long l=(long)r.nextInt();    if (l < 0)     l+=4294967296L;    String s=String.valueOf(l);    while (s.length() < 10)     s=" " + s;    System.out.print(s + " ");    if (j % 5 == 4)     System.out.println();  }  final long SEED=4357;  int xx;  long ms;  System.out.println("\nTime to test grabbing 100000000 ints");  Random rr=new Random(SEED);  xx=0;  ms=System.currentTimeMillis();  for (j=0; j < 100000000; j++)   xx+=rr.nextInt();  System.out.println("java.util.Random: " + (System.currentTimeMillis() - ms) + "          Ignore this: "+ xx);  r=new MersenneTwisterFast(SEED);  ms=System.currentTimeMillis();  xx=0;  for (j=0; j < 100000000; j++)   xx+=r.nextInt();  System.out.println("Mersenne Twister Fast: " + (System.currentTimeMillis() - ms) + "          Ignore this: "+ xx);  System.out.println("\nGrab the first 1000 booleans");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(double)");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((double)(j / 999.0)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(float)");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((float)(j / 999.0f)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  byte[] bytes=new byte[1000];  System.out.println("\nGrab the first 1000 bytes using nextBytes");  r=new MersenneTwisterFast(SEED);  r.nextBytes(bytes);  for (j=0; j < 1000; j++) {    System.out.print(bytes[j] + " ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  byte b;  System.out.println("\nGrab the first 1000 bytes -- must be same as nextBytes");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print((b=r.nextByte()) + " ");    if (b != bytes[j])     System.out.print("BAD ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  System.out.println("\nGrab the first 1000 shorts");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextShort() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab the first 1000 ints");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 ints of different sizes");  r=new MersenneTwisterFast(SEED);  int max=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt(max) + " ");    max*=2;    if (max <= 0)     max=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 longs");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 longs of different sizes");  r=new MersenneTwisterFast(SEED);  long max2=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong(max2) + " ");    max2*=2;    if (max2 <= 0)     max2=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 floats");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextFloat() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 doubles");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextDouble() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 gaussian doubles");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextGaussian() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();}  }
class C{  public @Nullable String chooseEngineServerAlias(String keyType,Principal[] issuers,@Nullable SSLEngine engine){  return null;}  }
class C{  public void add(EventBean theEvent){  if (count == events.length) {    EventBean[] buf=new EventBean[events.length * 2];    System.arraycopy(events,0,buf,0,events.length);    events=buf;  }  events[count++]=theEvent;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE__TYPE:    setType(TYPE_EDEFAULT);  return;case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE__VALUE:setValue((EnumLiteral)null);return;}super.eUnset(featureID);}  }
class C{  public static PrivateKey load(InputStream is) throws CryptoException, IOException {  byte[] streamContents=ReadUtil.readFully(is);  EncryptionType encType=getEncryptionType(new ByteArrayInputStream(streamContents));  if (encType == null) {    throw new CryptoException(res.getString("NotValidPkcs8.exception.message"));  }  if (encType == ENCRYPTED) {    throw new PrivateKeyEncryptedException(res.getString("Pkcs8IsEncrypted.exception.message"));  }  byte[] pvkBytes=null;  PemInfo pemInfo=PemUtil.decode(new ByteArrayInputStream(streamContents));  if (pemInfo != null) {    pvkBytes=pemInfo.getContent();  }  if (pvkBytes == null) {    pvkBytes=streamContents;  }  try {    String privateKeyAlgorithm=getPrivateKeyAlgorithm(pvkBytes);    PKCS8EncodedKeySpec privateKeySpec=new PKCS8EncodedKeySpec(pvkBytes);    KeyFactory keyFactory=KeyFactory.getInstance(privateKeyAlgorithm);    PrivateKey pvk=keyFactory.generatePrivate(privateKeySpec);    return pvk;  } catch (  NoSuchAlgorithmException ex) {    throw new CryptoException(res.getString("NoLoadPkcs8PrivateKey.exception.message"),ex);  }catch (  InvalidKeySpecException ex) {    throw new CryptoException(res.getString("NoLoadPkcs8PrivateKey.exception.message"),ex);  }}  }
class C{  private boolean hasMultipleEnabledIMEsOrSubtypes(InputMethodManager imm,final boolean shouldIncludeAuxiliarySubtypes){  final List<InputMethodInfo> enabledImis=imm.getEnabledInputMethodList();  int filteredImisCount=0;  for (  InputMethodInfo imi : enabledImis) {    if (filteredImisCount > 1)     return true;    final List<InputMethodSubtype> subtypes=imm.getEnabledInputMethodSubtypeList(imi,true);    if (subtypes.isEmpty()) {      ++filteredImisCount;      continue;    }    int auxCount=0;    for (    InputMethodSubtype subtype : subtypes) {      if (subtype.isAuxiliary()) {        ++auxCount;      }    }    final int nonAuxCount=subtypes.size() - auxCount;    if (nonAuxCount > 0 || (shouldIncludeAuxiliarySubtypes && auxCount > 1)) {      ++filteredImisCount;      continue;    }  }  return filteredImisCount > 1 || imm.getEnabledInputMethodSubtypeList(null,false).size() > 1;}  }
class C{  public static byte[] decode(String encoded) throws Exception {  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    throw new Exception("decoding.divisible.four");  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      throw new Exception("decoding.general");    }    b1=BASE_64_ALPHABET[d1];    b2=BASE_64_ALPHABET[d2];    b3=BASE_64_ALPHABET[d3];    b4=BASE_64_ALPHABET[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    throw new Exception("decoding.general");  }  b1=BASE_64_ALPHABET[d1];  b2=BASE_64_ALPHABET[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        throw new Exception("decoding.general");      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=BASE_64_ALPHABET[d3];      if ((b3 & 0x3) != 0) {        throw new Exception("decoding.general");      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      throw new Exception("decoding.general");    }  } else {    b3=BASE_64_ALPHABET[d3];    b4=BASE_64_ALPHABET[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  private void rebuildClusteringList(List clusterings,int position,List clusterIds){  List currentClustering=(List)clusterings.get(position);  if (currentClustering.size() < 2) {    return;  }  boolean found=false;  int currentIds[]=(int[])clusterIds.get(position);  for (int j=position + 1; j < clusterings.size() && !found; j++) {    if (((List)clusterings.get(j)).size() < currentClustering.size()) {      found=true;      for (int i=0; i < currentClustering.size(); i++) {        List newClustering=new ArrayList();        int newIds[]=new int[currentClustering.size() - 1];        for (int k=0; k < currentClustering.size(); k++) {          if (i != k) {            newClustering.add(currentClustering.get(k));            if (k > i) {              newIds[k - 1]=currentIds[k];            } else {              newIds[k]=currentIds[k];            }          }        }        clusterings.add(j,newClustering);        clusterIds.add(j,newIds);      }    }  }  if (!found) {    for (int i=0; i < currentClustering.size(); i++) {      List newClustering=new ArrayList();      int newIds[]=new int[currentClustering.size() - 1];      for (int k=0; k < currentClustering.size(); k++) {        if (i != k) {          newClustering.add(currentClustering.get(k));          if (k > i) {            newIds[k - 1]=currentIds[k];          } else {            newIds[k]=currentIds[k];          }        }      }      clusterings.add(newClustering);      clusterIds.add(newIds);    }  }}  }
class C{  public static String buildContextUrlFromOperationCall(ODataUri oDataUri,EntityDataModel entityDataModel,boolean isPrimitive){  String serviceRoot=oDataUri.serviceRoot();  String returnType=ODataUriUtil.getOperationReturnType(oDataUri,entityDataModel);  return serviceRoot + "/" + METADATA+ "#"+ returnType+ (isPrimitive ? "" : "/$entity");}  }
class C{  void emitCaselessMatchPartitions(PrintWriter writer){  writer.append("  public static final int caselessMatchPartitionSize").append(" = ").append(Integer.toString(caselessMatchPartitionSize)).append(";\n");  writer.append("  public static final String caselessMatchPartitions").append(" =\n");  SortedMap<Integer,SortedSet<Integer>> partitions=new TreeMap<Integer,SortedSet<Integer>>();  for (  SortedSet<Integer> partition : caselessMatchPartitions.values()) {    partitions.put(partition.first(),partition);  }  int count=0;  boolean isFirstPartitionLine=true;  for (  SortedSet<Integer> partition : partitions.values()) {    if (++count > CASELESS_MATCH_PARTITIONS_PER_LINE) {      writer.append("\n");      count=1;    }    if (count == 1)     writer.append(isFirstPartitionLine ? "        \"" : "      + \""); else     writer.append("+\"");    isFirstPartitionLine=false;    for (    Integer c : partition)     emitEscapedUTF16Char(writer,c);    for (int i=0; i < caselessMatchPartitionSize - partition.size(); ++i)     emitEscapedUTF16Char(writer,0);    writer.append("\"");  }  writer.append(";\n");}  }
class C{  public void printContext(PrintWriter out){  out.println(getMessage());  out.print(context);}  }
class C{  public Builder transform(Transformation transformation){  if (transformation == null) {    throw new IllegalArgumentException("Transformation must not be null.");  }  if (transformations == null) {    transformations=new ArrayList<Transformation>(2);  }  transformations.add(transformation);  return this;}  }
class C{  public Object removeNode(final Object node){  IndexOutIn ioi=(IndexOutIn)(indexOutInHash.get(node));  if (ioi == null) {    return null;  }  while (ioi.out != null && ioi.out.numObjs > 0) {    removeEdge((Edge)(ioi.out.objs[0]));  }  while (ioi.in != null && ioi.in.numObjs > 0) {    removeEdge((Edge)(ioi.in.objs[0]));  }  allNodes.remove(ioi.index);  if (allNodes.numObjs > ioi.index) {    ((IndexOutIn)(indexOutInHash.get(allNodes.objs[ioi.index]))).index=ioi.index;  }  indexOutInHash.remove(node);  return node;}  }
class C{  public static Collection<FreeBusyType> all(){  return enums.all();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int docContext=dtm.getDocumentRoot(context);  XObject arg=(XObject)this.getArg0().execute(xctxt);  String base="";  Expression arg1Expr=this.getArg1();  if (null != arg1Expr) {    XObject arg2=arg1Expr.execute(xctxt);    if (XObject.CLASS_NODESET == arg2.getType()) {      int baseNode=arg2.iter().nextNode();      if (baseNode == DTM.NULL) {        warn(xctxt,XSLTErrorResources.WG_EMPTY_SECOND_ARG,null);        XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());        return nodes;      } else {        DTM baseDTM=xctxt.getDTM(baseNode);        base=baseDTM.getDocumentBaseURI();      }    } else {      arg2.iter();    }  } else {    assertion(null != xctxt.getNamespaceContext(),"Namespace context can not be null!");    base=xctxt.getNamespaceContext().getBaseIdentifier();  }  XNodeSet nodes=new XNodeSet(xctxt.getDTMManager());  NodeSetDTM mnl=nodes.mutableNodeset();  DTMIterator iterator=(XObject.CLASS_NODESET == arg.getType()) ? arg.iter() : null;  int pos=DTM.NULL;  while ((null == iterator) || (DTM.NULL != (pos=iterator.nextNode()))) {    XMLString ref=(null != iterator) ? xctxt.getDTM(pos).getStringValue(pos) : arg.xstr();    if (null == arg1Expr && DTM.NULL != pos) {      DTM baseDTM=xctxt.getDTM(pos);      base=baseDTM.getDocumentBaseURI();    }    if (null == ref)     continue;    if (DTM.NULL == docContext) {      error(xctxt,XSLTErrorResources.ER_NO_CONTEXT_OWNERDOC,null);    }    int indexOfColon=ref.indexOf(':');    int indexOfSlash=ref.indexOf('/');    if ((indexOfColon != -1) && (indexOfSlash != -1) && (indexOfColon < indexOfSlash)) {      base=null;    }    int newDoc=getDoc(xctxt,context,ref.toString(),base);    if (DTM.NULL != newDoc) {      if (!mnl.contains(newDoc)) {        mnl.addElement(newDoc);      }    }    if (null == iterator || newDoc == DTM.NULL)     break;  }  return nodes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.125 -0500",hash_original_method="A7A26BCBBE62D435D0EFB88761B8B839",hash_generated_method="904ABB9461D23365CF641460822A344C") public void copy1DRangeFrom(int off,int count,Allocation data,int dataOff){  mRS.nAllocationData2D(getIDSafe(),off,0,mSelectedLOD,mSelectedFace.mID,count,1,data.getID(),dataOff,0,data.mSelectedLOD,data.mSelectedFace.mID);}  }
class C{  private void updateChildPreferences(){  if (mAlert.isChecked()) {    mVibrate.setEnabled(true);    mRingtone.setEnabled(true);    mPopup.setEnabled(true);  } else {    mVibrate.setEnabled(false);    mRingtone.setEnabled(false);    mPopup.setEnabled(false);  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  listasDescriptoras=new String[0];}  }
class C{  public void clear(){  mObjects.clear();}  }
class C{  public synchronized void reset(){  this.state=Input.State.RELEASED;  this.value=0;}  }
class C{  public void saveRecent(Properties properties){  String[] key=new String[recentConfigMap.size()];  recentConfigMap.keySet().toArray(key);  for (int i=0; i < key.length; ++i) {    String path=recentConfigMap.get(key[i]);    properties.put("RecentConfig." + i,path);  }}  }
class C{  @DSSink({DSSinkKind.FILE}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.091 -0500",hash_original_method="E16E904B564260AEFFEF8BC8F6F4E16A",hash_generated_method="311465B2200E7484981B486871B50005") public static String readTextFile(File file,int max,String ellipsis) throws IOException {  InputStream input=new FileInputStream(file);  try {    long size=file.length();    if (max > 0 || (size > 0 && max == 0)) {      if (size > 0 && (max == 0 || size < max))       max=(int)size;      byte[] data=new byte[max + 1];      int length=input.read(data);      if (length <= 0)       return "";      if (length <= max)       return new String(data,0,length);      if (ellipsis == null)       return new String(data,0,max);      return new String(data,0,max) + ellipsis;    } else     if (max < 0) {      int len;      boolean rolled=false;      byte[] last=null, data=null;      do {        if (last != null)         rolled=true;        byte[] tmp=last;        last=data;        data=tmp;        if (data == null)         data=new byte[-max];        len=input.read(data);      } while (len == data.length);      if (last == null && len <= 0)       return "";      if (last == null)       return new String(data,0,len);      if (len > 0) {        rolled=true;        System.arraycopy(last,len,last,0,last.length - len);        System.arraycopy(data,0,last,last.length - len,len);      }      if (ellipsis == null || !rolled)       return new String(last);      return ellipsis + new String(last);    } else {      ByteArrayOutputStream contents=new ByteArrayOutputStream();      int len;      byte[] data=new byte[1024];      do {        len=input.read(data);        if (len > 0)         contents.write(data,0,len);      } while (len == data.length);      return contents.toString();    }  }  finally {    input.close();  }}  }
class C{  private static void checkElement(@Nullable Object node){  if (node == null) {    throw new NoSuchElementException();  }}  }
class C{  public int size(){  return edges.size();}  }
class C{  private void cancelStatListener(int listenerId){  sendAndWait(CancelStatListenerRequest.create(listenerId));}  }
class C{  public GroovyResultSetProxy(ResultSet set){  extension=new GroovyResultSetExtension(set);}  }
class C{  private StdoutStream(){}  }
class C{  public LastViewed(){  super(KEY);}  }
class C{  public <T>com.twitter.util.Future<T> apply(Object key,Function0<T> function){  return chooseFuturePool(key).apply(function);}  }
class C{  public String periodicPruningTipText(){  return "Specify the rate (x% of the input dataset) at which to periodically prune the dictionary. " + "wordsToKeep prunes after creating a full dictionary. You may not have enough " + "memory for this approach.";}  }
class C{  @Override public Object clone(){  return GenericValue.create(this);}  }
class C{  private static boolean isValid(long value,long minValue,long maxValue,long increment){  return minValue <= value && maxValue >= value && maxValue > minValue && increment != 0 && BigInteger.valueOf(increment).abs().compareTo(BigInteger.valueOf(maxValue).subtract(BigInteger.valueOf(minValue))) < 0;}  }
class C{  public void zoomRangeAxes(double x,double y,double factor){}  }
class C{  public final Enumeration<E> elements(){  return new WekaEnumeration<E>(this);}  }
class C{  public LexicalStates(){  states=new LinkedHashMap<String,Integer>();  inclusive=new ArrayList<Integer>();}  }
class C{  public void ensureCapacity(int minimumCapacity){  if (mHashes.length < minimumCapacity) {    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(minimumCapacity);    if (mSize > 0) {      System.arraycopy(ohashes,0,mHashes,0,mSize);      System.arraycopy(oarray,0,mArray,0,mSize);    }    freeArrays(ohashes,oarray,mSize);  }}  }
class C{  public static void executeGraph(LoadModel loadModel,String storeLocation,String kettleHomePath,int currentRestructNumber) throws Exception {  System.setProperty("KETTLE_HOME",kettleHomePath);  new File(storeLocation).mkdirs();  String outPutLoc=storeLocation + "/etl";  String schemaName=loadModel.getSchemaName();  String cubeName=loadModel.getCubeName();  String tempLocationKey=schemaName + '_' + cubeName+ "_1";  CarbonProperties.getInstance().addProperty(tempLocationKey,storeLocation);  CarbonProperties.getInstance().addProperty("store_output_location",outPutLoc);  CarbonProperties.getInstance().addProperty("send.signal.load","false");  CarbonProperties.getInstance().addProperty("carbon.is.columnar.storage","true");  CarbonProperties.getInstance().addProperty("carbon.dimension.split.value.in.columnar","1");  CarbonProperties.getInstance().addProperty("carbon.is.fullyfilled.bits","true");  CarbonProperties.getInstance().addProperty("is.int.based.indexer","true");  CarbonProperties.getInstance().addProperty("aggregate.columnar.keyblock","true");  CarbonProperties.getInstance().addProperty("high.cardinality.value","100000");  CarbonProperties.getInstance().addProperty("is.compressed.keyblock","false");  CarbonProperties.getInstance().addProperty("carbon.leaf.node.size","120000");  String tableName=loadModel.getTableName();  String fileNamePrefix="";  String graphPath=outPutLoc + File.separator + loadModel.getSchemaName()+ File.separator+ tableName+ File.separator+ 0+ File.separator+ 1+ File.separator+ tableName+ ".ktr";  File path=new File(graphPath);  if (path.exists()) {    path.delete();  }  DataProcessTaskStatus schmaModel=new DataProcessTaskStatus(schemaName,cubeName,tableName);  schmaModel.setCsvFilePath(loadModel.getFactFilePath());  SchemaInfo info=new SchemaInfo();  BlockDetails blockDetails=new BlockDetails(loadModel.getFactFilePath(),0,new File(loadModel.getFactFilePath()).length(),new String[]{"localhost"});  GraphGenerator.blockInfo.put("qwqwq",new BlockDetails[]{blockDetails});  schmaModel.setBlocksID("qwqwq");  schmaModel.setEscapeCharacter("\\");  info.setSchemaName(schemaName);  info.setCubeName(cubeName);  generateGraph(schmaModel,info,loadModel.getTableName(),"0",loadModel.getSchema(),null,currentRestructNumber,loadModel.getLoadMetadataDetails());  DataGraphExecuter graphExecuter=new DataGraphExecuter(schmaModel);  graphExecuter.executeGraph(graphPath,new ArrayList<String>(CarbonCommonConstants.CONSTANT_SIZE_TEN),info,"0",loadModel.getSchema());  writeLoadMetadata(loadModel.schema,loadModel.getCubeName(),loadModel.getTableName(),new ArrayList<LoadMetadataDetails>());  String segLocation=storeLocation + "/" + schemaName+ "/"+ tableName+ "/Fact/Part0/Segment_0";  File file=new File(segLocation);  File factFile=null;  File[] folderList=file.listFiles();  File folder=null;  for (int i=0; i < folderList.length; i++) {    if (folderList[i].isDirectory()) {      folder=folderList[i];    }  }  if (folder.isDirectory()) {    File[] files=folder.listFiles();    for (int i=0; i < files.length; i++) {      if (!files[i].isDirectory() && files[i].getName().startsWith("part")) {        factFile=files[i];        break;      }    }    factFile.renameTo(new File(segLocation + "/" + factFile.getName()));    CarbonUtil.deleteFoldersAndFiles(folder);  }}  }
class C{  @NotNull private AnAction convert(@NotNull ActionStub stub){  LOG.assertTrue(myAction2Id.containsKey(stub));  myAction2Id.remove(stub);  LOG.assertTrue(myId2Action.containsKey(stub.getId()));  AnAction action=myId2Action.remove(stub.getId());  LOG.assertTrue(action != null);  LOG.assertTrue(action.equals(stub));  AnAction anAction=convertStub(stub);  myAction2Id.put(anAction,stub.getId());  return addToMap(stub.getId(),anAction,stub.getPluginId(),stub.getProjectType());}  }
class C{  public static int computeLazyFieldSizeNoTag(final LazyField value){  final int size=value.getSerializedSize();  return computeRawVarint32Size(size) + size;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.730 -0500",hash_original_method="641C5C66572DBEDEF9FDF97C1A945C27",hash_generated_method="BB3641FDEB99F8F0DEA7460B697D9064") public Object clone(){  ListeningPointImpl lip=new ListeningPointImpl(this.sipStack,this.port,null);  lip.sipStack=this.sipStack;  return lip;}  }
class C{  public MakeState(int initialSize){  result=new ArrayList<Entry>(initialSize);  nullResultCount=0;  regs=null;  endIndices=null;  lastAddress=0;}  }
class C{  public PlayerIsWearingOutfitCondition(Outfit outfit){  this.outfitToCheck=outfit;}  }
class C{  public void write(final byte[] b) throws IOException {  stream.write(b);}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  protected SymbolTableImpl(){  super();}  }
class C{  protected boolean doCreate() throws AdeException {  System.out.println("Creating database for AdeExt: " + a_ade.getConfigProperties().database().getDatabaseUrl());  final TableManagerExt tableManagerExt=new TableManagerExt();  tableManagerExt.dropTables();  tableManagerExt.createTables();  System.out.println("Done.");  return true;}  }
class C{  public void windowStateChanged(WindowEvent e){  if (e.getID() == WindowEvent.WINDOW_CLOSED && m_reportEngine != null) {    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    log.info("Re-read PrintFormat");    int AD_PrintFormat_ID=m_reportEngine.getPrintFormat().get_ID();    Language language=m_reportEngine.getPrintFormat().getLanguage();    MPrintFormat pf=MPrintFormat.get(Env.getCtx(),AD_PrintFormat_ID,true);    pf.setLanguage(language);    pf.setTranslationLanguage(language);    m_reportEngine.setPrintFormat(pf);    revalidate();    cmd_drill();  }}  }
class C{  public SortArrowIcon(boolean ascending,Color color){  this.ascending=ascending;  this.color=color;  if (color == null) {    throw new IllegalArgumentException();  }}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public JSONStringer endObject() throws JSONException {  return end('k','}');}  }
class C{  private Supplier<String> initializeSparseFeaturesStringSupplier(){  return Suppliers.memoize(null);}  }
class C{  public void fillWithText(TextView view,FakerTextComponent component){  validateNotNullableView(view);  validateIfIsATextView(view);  validateNotNullableFakerComponent(component);  view.setText(component.randomText());}  }
class C{  @Override public void run(){  init();  while (true) {    try {      handleIpReconfig();      await();    } catch (    Exception e) {      log.error(e.getMessage(),e);    }  }}  }
class C{  public SVGPath quadTo(double c1x,double c1y,double x,double y){  append(SVGConstants.PATH_QUAD_TO,c1x,c1y,x,y);  return this;}  }
class C{  public static String[] suggestGettersName(@NotNull String name){  return new String[]{getGetterNameBoolean(name),getGetterNameNonBoolean(name)};}  }
class C{  public static byte[] stringToUtf8Bytes(String string){  int len=string.length();  byte[] bytes=new byte[len * 3];  int outAt=0;  for (int i=0; i < len; i++) {    char c=string.charAt(i);    if ((c != 0) && (c < 0x80)) {      bytes[outAt]=(byte)c;      outAt++;    } else     if (c < 0x800) {      bytes[outAt]=(byte)(((c >> 6) & 0x1f) | 0xc0);      bytes[outAt + 1]=(byte)((c & 0x3f) | 0x80);      outAt+=2;    } else {      bytes[outAt]=(byte)(((c >> 12) & 0x0f) | 0xe0);      bytes[outAt + 1]=(byte)(((c >> 6) & 0x3f) | 0x80);      bytes[outAt + 2]=(byte)((c & 0x3f) | 0x80);      outAt+=3;    }  }  byte[] result=new byte[outAt];  System.arraycopy(bytes,0,result,0,outAt);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:58.056 -0400",hash_original_method="6C2BF33BEAB4575B1BB326C79611D3DD",hash_generated_method="F8CEBBB4F4E001B68D1DBED8D292752B") public synchronized void stop() throws Exception {  stop(interval);}  }
class C{  @Override public int hashCode(){  return this.cleanedUrl.hashCode();}  }
class C{  public void testNamedSolutionSetLimit(){  new Helper(){{      given=select(varNodes(p),namedSubQuery("subQuery",varNode(p),where(joinGroupNode(namedSubQueryInclude("solutionSet"))),slice(1,1)),where(joinGroupNode(namedSubQueryInclude("subQuery"))));      expected=select(varNodes(p),namedSubQuery("subQuery",varNode(p),where(joinGroupNode(namedSubQueryInclude("solutionSet"))),slice(1,1),joinOn(varNodes()),dependsOn("solutionSet")),where(joinGroupNode(namedSubQueryInclude("subQuery",joinOn(varNodes())))));    }  }.test();}  }
class C{  public boolean hasMomentTimeElapsed(long nowNanos){  return (nowNanos - mStartTimeNanos) >= Utils.minutesToNanos(mData.getLengthMinutes());}  }
class C{  public ProtocolInteractor buildProtocolSession(String scriptName,Reader reader) throws Exception {  ProtocolInteractor session=new ProtocolSession();  addProtocolLines(scriptName,reader,session);  return session;}  }
class C{  public static List<SharedDataItem> listSharedDataItems(Intent intent){  ArrayList<SharedDataItem> sharedDataItems=new ArrayList<>();  if (null != intent) {    ClipData clipData=null;    ArrayList<String> mimetypes=null;    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {      clipData=intent.getClipData();    }    if (null != clipData) {      if (null != clipData.getDescription()) {        if (0 != clipData.getDescription().getMimeTypeCount()) {          mimetypes=new ArrayList<>();          for (int i=0; i < clipData.getDescription().getMimeTypeCount(); i++) {            mimetypes.add(clipData.getDescription().getMimeType(i));          }          if (1 == mimetypes.size()) {            if (mimetypes.get(0).endsWith("/*")) {              mimetypes=null;            }          }        }      }      int count=clipData.getItemCount();      for (int i=0; i < count; i++) {        ClipData.Item item=clipData.getItemAt(i);        String mimetype=null;        if (null != mimetypes) {          if (i < mimetypes.size()) {            mimetype=mimetypes.get(i);          } else {            mimetype=mimetypes.get(0);          }          if (TextUtils.equals(mimetype,ClipDescription.MIMETYPE_TEXT_URILIST)) {            mimetype=null;          }        }        sharedDataItems.add(new SharedDataItem(item,mimetype));      }    } else     if (null != intent.getData()) {      sharedDataItems.add(new SharedDataItem(intent.getData()));    }  }  return sharedDataItems;}  }
class C{  protected long decode(BytesRef scratch,ByteArrayDataInput tmpInput){  tmpInput.reset(scratch.bytes,scratch.offset,scratch.length);  tmpInput.skipBytes(scratch.length - 8);  scratch.length-=Long.BYTES;  return tmpInput.readLong();}  }
class C{  private void readDefault(){  int length=0;  while (!_reader.eof()) {    char curr=_reader.read();switch (curr) {case ' ':      if (_options.hasFlag(UrlDetectorOptions.ALLOW_SINGLE_LEVEL_DOMAIN) && _buffer.length() > 0 && _hasScheme) {        _reader.goBack();        readDomainName(_buffer.substring(length));      }    _buffer.append(curr);  readEnd(ReadEndState.InvalidUrl);length=0;break;case '%':if (_reader.canReadChars(2)) {if (_reader.peek(2).equalsIgnoreCase("3a")) {_buffer.append(curr);_buffer.append(_reader.read());_buffer.append(_reader.read());length=processColon(length);} else if (CharUtils.isHex(_reader.peekChar(0)) && CharUtils.isHex(_reader.peekChar(1))) {_buffer.append(curr);_buffer.append(_reader.read());_buffer.append(_reader.read());readDomainName(_buffer.substring(length));length=0;}}break;case '\u3002':case '\uFF0E':case '\uFF61':case '.':_buffer.append(curr);readDomainName(_buffer.substring(length));length=0;break;case '@':if (_buffer.length() > 0) {_currentUrlMarker.setIndex(UrlPart.USERNAME_PASSWORD,length);_buffer.append(curr);readDomainName(null);length=0;}break;case '[':if (_dontMatchIpv6) {if (checkMatchingCharacter(curr) != CharacterMatch.CharacterNotMatched) {readEnd(ReadEndState.InvalidUrl);length=0;}}int beginning=_reader.getPosition();if (!_hasScheme) {_buffer.delete(0,_buffer.length());}_buffer.append(curr);if (!readDomainName(_buffer.substring(length))) {_reader.seek(beginning);_dontMatchIpv6=true;}length=0;break;case '/':if (_hasScheme || (_options.hasFlag(UrlDetectorOptions.ALLOW_SINGLE_LEVEL_DOMAIN) && _buffer.length() > 1)) {_reader.goBack();readDomainName(_buffer.substring(length));length=0;} else {readEnd(ReadEndState.InvalidUrl);_buffer.append(curr);_hasScheme=readHtml5Root();length=_buffer.length();}break;case ':':_buffer.append(curr);length=processColon(length);break;default :if (checkMatchingCharacter(curr) != CharacterMatch.CharacterNotMatched) {readEnd(ReadEndState.InvalidUrl);length=0;} else {_buffer.append(curr);}break;}}if (_options.hasFlag(UrlDetectorOptions.ALLOW_SINGLE_LEVEL_DOMAIN) && _buffer.length() > 0 && _hasScheme) {readDomainName(_buffer.substring(length));}}  }
class C{  public int addOrIncreaseItem(String productId,BigDecimal selectedAmount,BigDecimal quantity,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> features,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,String itemGroupNumber,String parentProductId,LocalDispatcher dispatcher) throws CartItemModifyException, ItemNotFoundException {  return addOrIncreaseItem(productId,selectedAmount,quantity,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,features,attributes,prodCatalogId,configWrapper,itemType,itemGroupNumber,parentProductId,dispatcher);}  }
class C{  public ProgramStore create(){  mRS.validate();  int id=mRS.nProgramStoreCreate(mColorMaskR,mColorMaskG,mColorMaskB,mColorMaskA,mDepthMask,mDither,mBlendSrc.mID,mBlendDst.mID,mDepthFunc.mID);  ProgramStore programStore=new ProgramStore(id,mRS);  programStore.mDepthFunc=mDepthFunc;  programStore.mDepthMask=mDepthMask;  programStore.mColorMaskR=mColorMaskR;  programStore.mColorMaskG=mColorMaskG;  programStore.mColorMaskB=mColorMaskB;  programStore.mColorMaskA=mColorMaskA;  programStore.mBlendSrc=mBlendSrc;  programStore.mBlendDst=mBlendDst;  programStore.mDither=mDither;  return programStore;}  }
class C{  public static ExceptionlessOutputStream openBufferedStream(String filename){  ExceptionlessOutputStream eos=null;  try {    eos=new ExceptionlessOutputStream(new BufferedOutputStream(new FileOutputStream(filename)));  } catch (  Exception e) {    System.err.println("Can't open '" + filename + "' for output:");    e.printStackTrace();    System.exit(1);  }  return eos;}  }
class C{  private void updateView(){  xOffset=0;  yOffset=0;  if (mapImage == null) {    return;  }  final int imageWidth=mapImage.getWidth(null);  final int imageHeight=mapImage.getHeight(null);  final int xpos=(int)((playerX * scale) + 0.5) - width / 2;  final int ypos=(int)((playerY * scale) + 0.5) - width / 2;  if (imageWidth > width) {    if ((xpos + width) > imageWidth) {      xOffset=imageWidth - width;    } else     if (xpos > 0) {      xOffset=xpos;    }  }  if (imageHeight > height) {    if ((ypos + height) > imageHeight) {      yOffset=imageHeight - height;    } else     if (ypos > 0) {      yOffset=ypos;    }  }}  }
class C{  public void writeCharacteristic(String serviceUUID,String characteristicUUID,String value){  if (mBluetoothGatt != null) {    BluetoothGattService service=mBluetoothGatt.getService(UUID.fromString(serviceUUID));    BluetoothGattCharacteristic characteristic=service.getCharacteristic(UUID.fromString(characteristicUUID));    characteristic.setValue(value);    mBluetoothGatt.writeCharacteristic(characteristic);  }}  }
class C{  public static byte[] readRawLine(final InputStream inputStream) throws IOException {  LOG.trace("enter HttpParser.readRawLine()");  final ByteArrayOutputStream buf=new ByteArrayOutputStream();  int ch;  while ((ch=inputStream.read()) >= 0) {    buf.write(ch);    if (ch == '\n') {      break;    }  }  if (buf.size() == 0) {    return null;  }  return buf.toByteArray();}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TYPE_PARAMETER;}  }
class C{  private void allocateElements(int numElements){  int initialCapacity=MIN_INITIAL_CAPACITY;  if (numElements >= initialCapacity) {    initialCapacity=numElements;    initialCapacity|=(initialCapacity >>> 1);    initialCapacity|=(initialCapacity >>> 2);    initialCapacity|=(initialCapacity >>> 4);    initialCapacity|=(initialCapacity >>> 8);    initialCapacity|=(initialCapacity >>> 16);    initialCapacity++;    if (initialCapacity < 0)     initialCapacity>>>=1;  }  elements=new Object[initialCapacity];}  }
class C{  public String extractFor(Integer id){  Log.debug(getClass(),"Extracting method with ID: ",id);  return requests.remove(id);}  }
class C{  private void addGroupTreeNode(final String parentKey,final String childKey,String label){  TREE_MANAGER.addNode(parentKey,childKey,label,label);}  }
class C{  public void reset(){  visitedNodes.clear();}  }
class C{  public List<LatLon> asList(){  ArrayList<LatLon> list=new ArrayList<LatLon>(4);  for (  LatLon ll : this) {    list.add(ll);  }  return list;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  value=streetAttr.getValue();  assertEquals("streetYes","Yes",value);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doPost(request,response);}  }
class C{  public void sendDisplayedNotification(String to,String packetID){  Message msg=new Message(to);  MessageEvent messageEvent=new MessageEvent();  messageEvent.setDisplayed(true);  messageEvent.setPacketID(packetID);  msg.addExtension(messageEvent);  con.sendPacket(msg);}  }
class C{  @Override public void close() throws XMLStreamException {  log.log(Level.FINE,"close()");  stream.close();}  }
class C{  public IllformedLocaleException(){  super();}  }
class C{  public void flush() throws java.io.IOException {}  }
class C{  public static <T>T[] remove(T[] buffer,int offset,int length){  Class<T> componentType=(Class<T>)buffer.getClass().getComponentType();  return remove(buffer,offset,length,componentType);}  }
class C{  private ByteBuffer readStream(PDFObject dict) throws IOException {  PDFObject lengthObj=dict.getDictRef("Length");  int length=-1;  if (lengthObj != null) {    length=lengthObj.getIntValue();  }  if (length < 0) {    throw new PDFParseException("Unknown length for stream");  }  int start=buf.position();  ByteBuffer streamBuf=buf.slice();  streamBuf.limit(length);  buf.position(buf.position() + length);  int ending=buf.position();  if (!nextItemIs("endstream")) {    System.out.println("read " + length + " chars from "+ start+ " to "+ ending);    throw new PDFParseException("Stream ended inappropriately");  }  return streamBuf;}  }
class C{  private void startShortcutActivity(ResolveInfo info){  Intent intent=getIntentForResolveInfo(info,Intent.ACTION_CREATE_SHORTCUT);  startActivityForResult(intent,REQUEST_CREATE_SHORTCUT);}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tTurns off all checks - use with caution!\n" + "\tTurning them off assumes that data is purely numeric, doesn't\n" + "\tcontain any missing values, and has a nominal class. Turning them\n"+ "\toff also means that no header information will be stored if the\n"+ "\tmachine is linear. Finally, it also assumes that no instance has\n"+ "\ta weight equal to 0.\n"+ "\t(default: checks on)","no-checks",0,"-no-checks"));  result.addElement(new Option("\tThe complexity constant C. (default 1)","C",1,"-C <double>"));  result.addElement(new Option("\tWhether to 0=normalize/1=standardize/2=neither. " + "(default 0=normalize)","N",1,"-N"));  result.addElement(new Option("\tThe tolerance parameter. " + "(default 1.0e-3)","L",1,"-L <double>"));  result.addElement(new Option("\tThe epsilon for round-off error. " + "(default 1.0e-12)","P",1,"-P <double>"));  result.addElement(new Option("\tFit logistic models to SVM outputs. ","M",0,"-M"));  result.addElement(new Option("\tThe number of folds for the internal\n" + "\tcross-validation. " + "(default -1, use training data)","V",1,"-V <double>"));  result.addElement(new Option("\tThe random number seed. " + "(default 1)","W",1,"-W <double>"));  result.addElement(new Option("\tThe Kernel to use.\n" + "\t(default: weka.classifiers.functions.supportVector.PolyKernel)","K",1,"-K <classname and parameters>"));  result.addAll(Collections.list(super.listOptions()));  result.addElement(new Option("","",0,"\nOptions specific to kernel " + getKernel().getClass().getName() + ":"));  result.addAll(Collections.list(((OptionHandler)getKernel()).listOptions()));  return result.elements();}  }
class C{  public ZkException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void add(Predicate p,ColorAction f){  super.add(p,f);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.STANDALONE_BLOCK__BLOCK:    setBlock((Block)null);  return;}super.eUnset(featureID);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  YIntervalSeriesCollection clone=(YIntervalSeriesCollection)super.clone();  clone.data=(List)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public boolean onTouchDrawMode(MotionEvent event){  float eventX=event.getX();  float eventY=event.getY();switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    currentPath=new CPath();  currentPaint=new Paint();currentPaint.setAntiAlias(true);currentPaint.setColor(mColor);currentPaint.setStyle(mStyle);currentPaint.setStrokeJoin(Paint.Join.ROUND);currentPaint.setStrokeWidth(mSize);currentPath.moveTo(eventX,eventY);currentPath.setPaint(currentPaint);lastTouchX=eventX;lastTouchY=eventY;mDrawableList.add(currentPath);return true;case MotionEvent.ACTION_MOVE:case MotionEvent.ACTION_UP:currentPath.lineTo(eventX,eventY);int historySize=event.getHistorySize();for (int i=0; i < historySize; i++) {float historicalX=event.getHistoricalX(i);float historicalY=event.getHistoricalY(i);if (historicalX < dirtyRect.left) {dirtyRect.left=historicalX;} else if (historicalX > dirtyRect.right) {dirtyRect.right=historicalX;}if (historicalY < dirtyRect.top) {dirtyRect.top=historicalY;} else if (historicalY > dirtyRect.bottom) {dirtyRect.bottom=historicalY;}currentPath.lineTo(historicalX,historicalY);}currentPath.lineTo(eventX,eventY);cleanDirtyRegion(eventX,eventY);break;default :return false;}invalidate((int)(dirtyRect.left - 20),(int)(dirtyRect.top - 20),(int)(dirtyRect.right + 20),(int)(dirtyRect.bottom + 20));lastTouchX=eventX;lastTouchY=eventY;return true;}  }
class C{  public static void allocateThinLock(RVMType t){  JavaHeader.allocateThinLock(t);}  }
class C{  protected static Pair<String,String> lslRegister(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2){  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  long baseOffset=offset;  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  final String tmpVar4=environment.getNextVariableString();  final String tmpVar5=environment.getNextVariableString();  final String tmpVar6=environment.getNextVariableString();  final String tmpVar7=environment.getNextVariableString();  final String isZeroCondition=environment.getNextVariableString();  final String shifterCarryOutTmp1=environment.getNextVariableString();  final String shifterCarryOutTmp2=environment.getNextVariableString();  final String shifterCarryOutTmp3=environment.getNextVariableString();  final String shifterCarryOutTmp4=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,registerNodeValue2,dWordSize,String.valueOf(0x000000FFL),dWordSize,tmpVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,tmpVar1,qWordSize,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,qWordSize,tmpVar2,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpVar1,byteSize,isZeroCondition));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,isZeroCondition,byteSize,"C",byteSize,shifterCarryOutTmp1));  instructions.add(ReilHelpers.createXor(baseOffset++,dWordSize,tmpVar1,wordSize,String.valueOf(0x20L),dWordSize,tmpVar3));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpVar3,byteSize,isZeroCondition));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,registerNodeValue1,dWordSize,oneSet,byteSize,tmpVar4));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,isZeroCondition,byteSize,tmpVar4,byteSize,shifterCarryOutTmp2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar1,dWordSize,notThirtyOneSet,dWordSize,tmpVar5));  instructions.add(ReilHelpers.createBisz(baseOffset++,dWordSize,tmpVar5,byteSize,isZeroCondition));  instructions.add(ReilHelpers.createSub(baseOffset++,dWordSize,String.valueOf(32L),dWordSize,tmpVar1,dWordSize,tmpVar6));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue1,dWordSize,"-" + tmpVar6,byteSize,tmpVar7));  instructions.add(ReilHelpers.createAnd(baseOffset++,byteSize,isZeroCondition,byteSize,tmpVar7,byteSize,shifterCarryOutTmp3));  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp1,byteSize,shifterCarryOutTmp2,byteSize,shifterCarryOutTmp4));  instructions.add(ReilHelpers.createOr(baseOffset++,byteSize,shifterCarryOutTmp3,byteSize,shifterCarryOutTmp4,byteSize,shifterCarryOut));  return new Pair<String,String>(shifterOperand,shifterCarryOut);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public CViewLoaderReporter(final ListenerProvider<INaviViewListener> listeners){  m_listeners=listeners;}  }
class C{  public String map(String typeName){  return typeName;}  }
class C{  @Override public int put(final List<T> buffer,final int from,final int to) throws IOException {  items.addAll(buffer.subList(from,to));  return to - from;}  }
class C{  public void parseQuotientByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  ensureNext(':',stream);  float correctness=1.0f;  if (Character.isDigit(stream.peek())) {    String correctnessText=stream.upTo(':');    try {      correctness=Float.valueOf(correctnessText);    } catch (    NumberFormatException exception) {      throw new SelfParseException("Invalid correctness: " + correctnessText,stream);    }    ensureNext(':',stream);  }  dataStream.writeLong(network.createVertex(Primitive.QUOTIENT).getId());  dataStream.writeFloat(correctness);  parseElementByteCode(stream,dataStream,elements,debug,network);  stream.skipWhitespace();  if (stream.peek() == '{') {    stream.skip();    String next=stream.nextWord();    dataStream.writeLong(network.createVertex(Primitive.PREVIOUS).getId());    while (!("}".equals(next))) {      if (next == null) {        throw new SelfParseException("Unexpected end of quotient, missing '}'",stream);      }      next=next.toLowerCase();      if (!(PREVIOUS.equals(next))) {        throw new SelfParseException("Unexpected word: '" + next + "' expected 'PREVIOUS'",stream);      }      ensureNext("is",stream);      next=stream.peekWord();      if (NOT.equals(next)) {        dataStream.writeLong(network.createVertex(Primitive.NOT).getId());        stream.nextWord();      }      parseElementByteCode(stream,dataStream,elements,debug,network);      ensureNext(';',stream);      next=stream.nextWord();    }    dataStream.writeLong(0l);  }  dataStream.writeLong(0l);  ensureNext(';',stream);}  }
class C{  public static String generate(final IGraphPanel panel){  Preconditions.checkNotNull(panel,"IE01637: Panel argument can not be null");  final INaviView view=panel.getModel().getGraph().getRawView();  final String containerName=panel.getModel().getViewContainer().getName();  final String viewName=view.getName();  final String viewDescription=view.getConfiguration().getDescription();  if ("".equals(viewDescription)) {    return String.format("%s - %s - %s",viewName,containerName,Constants.DEFAULT_WINDOW_TITLE);  } else {    return String.format("%s - %s - %s - %s",viewName,containerName,viewDescription,Constants.DEFAULT_WINDOW_TITLE);  }}  }
class C{  private DiffPart decodeDelete(final int blockSize_S,final int blockSize_E) throws DecodingException {  if (blockSize_S < 1 || blockSize_E < 1) {    throw new DecodingException("Invalid value for blockSize_S: " + blockSize_S + " or blockSize_E: "+ blockSize_E);  }  int s=r.read(blockSize_S);  int e=r.read(blockSize_E);  DiffPart part=new DiffPart(DiffAction.DELETE);  part.setStart(s);  part.setLength(e);  r.skip();  return part;}  }
class C{  public MersenneTwisterUniformRng(final long seed){  mt=new int[N];  setSeed(seed);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public FDBigInteger rightInplaceSub(FDBigInteger subtrahend){  assert this.size() >= subtrahend.size() : "result should be positive";  FDBigInteger minuend=this;  if (subtrahend.isImmutable) {    subtrahend=new FDBigInteger(subtrahend.data.clone(),subtrahend.offset);  }  int offsetDiff=minuend.offset - subtrahend.offset;  int[] sData=subtrahend.data;  int[] mData=minuend.data;  int subLen=subtrahend.nWords;  int minLen=minuend.nWords;  if (offsetDiff < 0) {    int rLen=minLen;    if (rLen < sData.length) {      System.arraycopy(sData,0,sData,-offsetDiff,subLen);      Arrays.fill(sData,0,-offsetDiff,0);    } else {      int[] r=new int[rLen];      System.arraycopy(sData,0,r,-offsetDiff,subLen);      subtrahend.data=sData=r;    }    subtrahend.offset=minuend.offset;    subLen-=offsetDiff;    offsetDiff=0;  } else {    int rLen=minLen + offsetDiff;    if (rLen >= sData.length) {      subtrahend.data=sData=Arrays.copyOf(sData,rLen);    }  }  int sIndex=0;  long borrow=0L;  for (; sIndex < offsetDiff; sIndex++) {    long diff=0L - (sData[sIndex] & LONG_MASK) + borrow;    sData[sIndex]=(int)diff;    borrow=diff >> 32;  }  for (int mIndex=0; mIndex < minLen; sIndex++, mIndex++) {    long diff=(mData[mIndex] & LONG_MASK) - (sData[sIndex] & LONG_MASK) + borrow;    sData[sIndex]=(int)diff;    borrow=diff >> 32;  }  assert borrow == 0L : borrow;  subtrahend.nWords=sIndex;  subtrahend.trimLeadingZeros();  return subtrahend;}  }
class C{  SharedFsTimeoutTask(String gridName,Marshaller marshaller,IgniteLogger log){  super(gridName,"grid-sharedfs-timeout-worker",log);  assert marshaller != null;  assert log != null;  this.marshaller=marshaller;  this.log=log.getLogger(getClass());}  }
class C{  public void process(JCas jcas){  evaluateFunctions(jcas);}  }
class C{  public CounterSet(){  this("",null);}  }
class C{  private String createFileName(){  String fileName=url.getPath();  if (fileName.startsWith("/%2F/")) {    fileName=fileName.substring(4);  } else   if (fileName.startsWith("/")) {    fileName=fileName.substring(1);  }  return fileName;}  }
class C{  private void clearRegisters(Instruction start,Instruction end){  for (Instruction p=start; ; p=p.nextInstructionInCodeOrder()) {    for (Enumeration<Operand> ops=p.getOperands(); ops.hasMoreElements(); ) {      Operand op=ops.nextElement();      if (op instanceof RegisterOperand) {        RegisterOperand rOp=(RegisterOperand)op;        clearDepGraphNodeForRegister(rOp.getRegister());      }    }    if (p == end)     break;  }  for (Enumeration<Register> e=GenericPhysicalDefUse.enumerateAllImplicitDefUses(ir); e.hasMoreElements(); ) {    Register r=e.nextElement();    clearDepGraphNodeForRegister(r);  }}  }
class C{  public boolean isFatal(){  return true;}  }
class C{  public static void copyFile(final File src,final File dst) throws IOException {  final FileChannel inChannel=new FileInputStream(src).getChannel();  final FileChannel outChannel=new FileOutputStream(dst).getChannel();  try {    inChannel.transferTo(0,inChannel.size(),outChannel);  }  finally {    if (inChannel != null) {      inChannel.close();    }    if (outChannel != null) {      outChannel.close();    }  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ERROR_CODE:    return isSetErrorCode();case MESSAGE:  return isSetMessage();}throw new IllegalStateException();}  }
class C{  public Locator copyLocator(){  return new LocatorImpl(getLocator());}  }
class C{  @NotNull private String formMessage(@NotNull String workDir){  Selection<ResourceBasedNode<?>> selection=(Selection<ResourceBasedNode<?>>)selectionAgent.getSelection();  String path;  if (selection == null || selection.getHeadElement() == null) {    path=project.getRootProject().getPath();  } else {    path=((HasStorablePath)selection.getHeadElement()).getStorablePath();  }  String pattern=path.replaceFirst(workDir,"");  pattern=(pattern.startsWith("/")) ? pattern.replaceFirst("/","") : pattern;  if (pattern.isEmpty() || "/".equals(pattern)) {    return constant.removeFromIndexAll();  }  if (pattern.length() > 40) {    pattern=pattern.substring(0,40) + "...";  }  if (selection != null && selection.getHeadElement() instanceof FolderReferenceNode) {    return constant.removeFromIndexFolder(pattern).asString();  } else {    return constant.removeFromIndexFile(pattern).asString();  }}  }
class C{  public synchronized Entry pot() throws IOException {  return po(this.stack.firstKey(),true);}  }
class C{  private VariableReference selectVariableForCall(TestCase test,int position){  if (test.isEmpty() || position == 0)   return null;  double sum=0.0;  for (int i=0; i < position; i++) {    sum+=1d / (test.getStatement(i).getReturnValue().getDistance() + 1d);    if (logger.isDebugEnabled()) {      logger.debug(test.getStatement(i).getCode() + ": Distance = " + test.getStatement(i).getReturnValue().getDistance());    }  }  double rnd=Randomness.nextDouble() * sum;  for (int i=0; i < position; i++) {    double dist=1d / (test.getStatement(i).getReturnValue().getDistance() + 1d);    if (dist >= rnd && !(test.getStatement(i).getReturnValue() instanceof NullReference) && !(test.getStatement(i).getReturnValue().isPrimitive()) && !(test.getStatement(i).getReturnValue().isVoid()) && !(test.getStatement(i) instanceof PrimitiveStatement))     return test.getStatement(i).getReturnValue(); else     rnd=rnd - dist;  }  if (position > 0)   position=Randomness.nextInt(position);  VariableReference var=test.getStatement(position).getReturnValue();  if (!(var instanceof NullReference) && !var.isVoid() && !(test.getStatement(position) instanceof PrimitiveStatement)&& !var.isPrimitive())   return var; else   return null;}  }
class C{  private void startAnimation(long time,OverviewAnimationType type){  startAnimation(time,type,TabModel.INVALID_TAB_INDEX,false);}  }
class C{  public MContactInterest(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  private static int calculateDelayForCall(){  return calculateDelayForSuccess();}  }
class C{  public void actionPerformed(ActionEvent e){  log.info(e.getActionCommand());  if (e.getActionCommand().equals(ConfirmPanel.A_OK) || m_C_Element_ID == 0)   dispose(); else   if (e.getSource().equals(newButton)) {    createNew();    refresh();  } else   if (e.getSource().equals(accountButton))   createAccount();}  }
class C{  @SuppressWarnings("unchecked") public static void autoDetect(){  Class<Logger> loadedLoggerClass=(Class<Logger>)FacadeFactory.getLoadedFacadeClass(SUPPORTED_LOGGERS);  if (loggerClass == null || loadedLoggerClass != loggerClass) {    setActiveLogger(loadedLoggerClass);  }}  }
class C{  public static IMethodBinding findOverriddenMethodInType(ITypeBinding type,IMethodBinding method){  IMethodBinding[] methods=type.getDeclaredMethods();  for (int i=0; i < methods.length; i++) {    if (isSubsignature(method,methods[i]))     return methods[i];  }  return null;}  }
class C{  public LongMemberValue(int index,ConstPool cp){  super('J',cp);  this.valueIndex=index;}  }
class C{  protected void jbInit() throws Exception {  mainPanel.setLayout(new java.awt.BorderLayout());  panel.setLayout(new java.awt.BorderLayout());  southPanel.setLayout(southLayout);  southPanel.add(confirmPanel,BorderLayout.CENTER);  southPanel.add(statusBar,BorderLayout.SOUTH);  mainPanel.add(southPanel,BorderLayout.SOUTH);  mainPanel.add(parameterPanel,BorderLayout.NORTH);  mainPanel.add(scrollPane,BorderLayout.CENTER);  scrollPane.getViewport().add(p_table,null);  confirmPanel.addActionListener(this);  confirmPanel.getResetButton().setVisible(hasReset());  confirmPanel.getCustomizeButton().setVisible(hasCustomize());  confirmPanel.getHistoryButton().setVisible(hasHistory());  confirmPanel.getZoomButton().setVisible(hasZoom());  popup.add(calcMenu);  calcMenu.setText(Msg.getMsg(getCtx(),"Calculator"));  calcMenu.setIcon(new ImageIcon(org.compiere.Adempiere.class.getResource("images/Calculator16.gif")));  calcMenu.addActionListener(this);  p_table.getSelectionModel().addListSelectionListener(this);  enableButtons();}  }
class C{  public static String trimLeadingAndTrailingSlashes(final String in){  if (null == in)   return in;  String out=in;  if (out.startsWith("/")) {    out=out.substring(1);  }  if (out.endsWith("/")) {    out=out.substring(0,out.length() - 1);  }  return out;}  }
class C{  public URIValue(String cssText,String uri){  super(CSSPrimitiveValue.CSS_URI,uri);  this.cssText=cssText;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof JumpingSolitaireState) {    JumpingSolitaireState jss=(JumpingSolitaireState)o;    for (int i=0; i < filled.length; i++) {      if (filled[i] != jss.filled[i]) {        return false;      }    }    return true;  }  return false;}  }
class C{  private boolean isCollection(Class type){  return Collection.class.isAssignableFrom(type);}  }
class C{  public boolean directDataPacket(DataPacket packet){  return this.directDataPacket(packet,false) != -1;}  }
class C{  protected static void assertArgument(final boolean validArg,final String message,final Object... args){  if (!validArg) {    throw new IllegalArgumentException(String.format(message,args));  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  doGet(request,response);}  }
class C{  public void showZoomUI(float maxZoom){  mMaxZoom=maxZoom;  mZoomPlusButton.setVisibility(View.VISIBLE);  mZoomMinusButton.setVisibility(View.VISIBLE);  mZoomMinusButton.setEnabled(false);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_3__MORE_CODE_1:    getMoreCode_1().clear();  getMoreCode_1().addAll((Collection<? extends MoreCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public String toString(){  return range.toString();}  }
class C{  @Override public int length(){  return mResourceData.length;}  }
class C{  public boolean scribe(ScribeEvent event,long ownerId){  try {    getScribeHandler(ownerId).scribe(event);    return true;  } catch (  IOException e) {    CommonUtils.logControlledError(kit.getContext(),"Failed to scribe event",e);    return false;  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.aggregatedItemsPaint=SerialUtilities.readPaint(stream);  this.legendItemShape=SerialUtilities.readShape(stream);  this.sectionPaints=new HashMap();}  }
class C{  public int averageColor(){  if (count == 0) {    return 0;  }  byte[] rgb=averageColorRGB(null);  return ((rgb[RED] << 16) & 0x00FF0000) | ((rgb[GRN] << 8) & 0x0000FF00) | ((rgb[BLU]) & 0x000000FF);}  }
class C{  private void saveExperiment(){  int returnVal=m_FileChooser.showSaveDialog(this);  if (returnVal != JFileChooser.APPROVE_OPTION) {    return;  }  File expFile=m_FileChooser.getSelectedFile();  if (m_FileChooser.getFileFilter() == m_ExpFilter) {    if (!expFile.getName().toLowerCase().endsWith(Experiment.FILE_EXTENSION))     expFile=new File(expFile.getParent(),expFile.getName() + Experiment.FILE_EXTENSION);  } else   if (m_FileChooser.getFileFilter() == m_KOMLFilter) {    if (!expFile.getName().toLowerCase().endsWith(KOML.FILE_EXTENSION))     expFile=new File(expFile.getParent(),expFile.getName() + KOML.FILE_EXTENSION);  } else   if (m_FileChooser.getFileFilter() == m_XMLFilter) {    if (!expFile.getName().toLowerCase().endsWith(".xml"))     expFile=new File(expFile.getParent(),expFile.getName() + ".xml");  }  try {    Experiment.write(expFile.getAbsolutePath(),m_Exp);    System.err.println("Saved experiment:\n" + m_Exp);  } catch (  Exception ex) {    ex.printStackTrace();    JOptionPane.showMessageDialog(this,"Couldn't save experiment file:\n" + expFile + "\nReason:\n"+ ex.getMessage(),"Save Experiment",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public void addObservation(double value){  addObservation(value,true);}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  void drawLayers(Graphics g,final String area,final String compositeName,final int x,final int y,final int width,final int height,String adjustLayer,String... layers){  LayerRenderer lr=getMerged(area,compositeName,adjustLayer,layers);  if (lr != null) {    lr.draw(g,x,y,width,height);  }}  }
class C{  private static void loadDataSources(ConfigServerImpl configServer,ConfigImpl config,Document doc,Log log){{    Element jdbc=getChildByName(doc.getDocumentElement(),"jdbc");    Element[] drivers=getChildren(jdbc,"driver");    Map<String,JDBCDriver> map=new HashMap<String,JDBCDriver>();    if (configServer != null) {      JDBCDriver[] sds=configServer.getJDBCDrivers();      for (      JDBCDriver sd : sds) {        map.put(sd.cd.toString(),sd);      }    }    ClassDefinition cd;    String label;    for (    Element driver : drivers) {      cd=getClassDefinition(driver,"",config.getIdentification());      label=getAttr(driver,"label");      if (StringUtil.isEmpty(label)) {        log.error("Datasource","missing label for jdbc driver [" + cd.getClassName() + "]");        continue;      }      if (!cd.isBundle()) {        log.error("Datasource","jdbc driver [" + label + "] does not describe a bundle");        continue;      }      map.put(cd.toString(),new JDBCDriver(label,cd));    }    config.setJDBCDrivers(map.values().toArray(new JDBCDriver[map.size()]));  }  System.setProperty("oracle.jdbc.V8Compatible","true");  boolean hasCS=configServer != null;  Map<String,DataSource> datasources=new HashMap<String,DataSource>();  if (hasCS) {    Map<String,DataSource> ds=configServer.getDataSourcesAsMap();    Iterator<Entry<String,DataSource>> it=ds.entrySet().iterator();    Entry<String,DataSource> entry;    while (it.hasNext()) {      entry=it.next();      if (!entry.getKey().equals(QOQ_DATASOURCE_NAME))       datasources.put(entry.getKey(),entry.getValue().cloneReadOnly());    }  }  try {    setDatasource(config,datasources,QOQ_DATASOURCE_NAME,new ClassDefinitionImpl("org.hsqldb.jdbcDriver","hsqldb","1.8.0",config.getIdentification()),"hypersonic-hsqldb","",-1,"jdbc:hsqldb:.","sa","",-1,-1,60000,true,true,DataSource.ALLOW_ALL,false,false,null,new StructImpl(),"",ParamSyntax.DEFAULT);  } catch (  Exception e) {    log.error("Datasource",e);  }  SecurityManager sm=config.getSecurityManager();  short access=sm.getAccess(SecurityManager.TYPE_DATASOURCE);  int accessCount=-1;  if (access == SecurityManager.VALUE_YES)   accessCount=-1; else   if (access == SecurityManager.VALUE_NO)   accessCount=0; else   if (access >= SecurityManager.VALUE_1 && access <= SecurityManager.VALUE_10) {    accessCount=access - SecurityManager.NUMBER_OFFSET;  }  Element databases=getChildByName(doc.getDocumentElement(),"data-sources");  String strPSQ=getAttr(databases,"psq");  if (StringUtil.isEmpty(strPSQ)) {    strPSQ=getAttr(databases,"preserve-single-quote");    if (!StringUtil.isEmpty(strPSQ)) {      Boolean b=Caster.toBoolean(strPSQ,null);      if (b != null)       strPSQ=b.booleanValue() ? "false" : "true";    }  }  if (access != SecurityManager.VALUE_NO && !StringUtil.isEmpty(strPSQ)) {    config.setPSQL(toBoolean(strPSQ,true));  } else   if (hasCS)   config.setPSQL(configServer.getPSQL());  Element[] dataSources=getChildren(databases,"data-source");  if (accessCount == -1)   accessCount=dataSources.length;  if (dataSources.length < accessCount)   accessCount=dataSources.length;  ClassDefinition cd;  for (int i=0; i < accessCount; i++) {    Element dataSource=dataSources[i];    if (dataSource.hasAttribute("database")) {      try {        cd=getClassDefinition(dataSource,"",config.getIdentification());        if (!cd.isBundle()) {          JDBCDriver jdbc=config.getJDBCDriverByClassName(cd.getClassName(),null);          if (jdbc != null)           cd=jdbc.cd;        }        setDatasource(config,datasources,getAttr(dataSource,"name"),cd,getAttr(dataSource,"host"),getAttr(dataSource,"database"),Caster.toIntValue(getAttr(dataSource,"port"),-1),getAttr(dataSource,"dsn"),getAttr(dataSource,"username"),ConfigWebUtil.decrypt(getAttr(dataSource,"password")),Caster.toIntValue(getAttr(dataSource,"connectionLimit"),-1),Caster.toIntValue(getAttr(dataSource,"connectionTimeout"),-1),Caster.toLongValue(getAttr(dataSource,"metaCacheTimeout"),60000),toBoolean(getAttr(dataSource,"blob"),true),toBoolean(getAttr(dataSource,"clob"),true),Caster.toIntValue(getAttr(dataSource,"allow"),DataSource.ALLOW_ALL),toBoolean(getAttr(dataSource,"validate"),false),toBoolean(getAttr(dataSource,"storage"),false),getAttr(dataSource,"timezone"),toStruct(getAttr(dataSource,"custom")),getAttr(dataSource,"dbdriver"),ParamSyntax.toParamSyntax(dataSource,ParamSyntax.DEFAULT));      } catch (      Exception e) {        log.error("Datasource",e);      }    }  }  config.setDataSources(datasources);}  }
class C{  private Long lifeRemaining(){  return maximumLifeMillis - (System.currentTimeMillis() - startUpTime);}  }
class C{  public int writeSkewedGolomb(final int x,final int b) throws IOException {  if (x < 0)   throw new IllegalArgumentException("The argument " + x + " is negative");  if (b < 0)   throw new IllegalArgumentException("The modulus " + b + " is negative");  if (b == 0) {    if (x != 0)     throw new IllegalArgumentException("The modulus is 0, but the argument is " + x);    return 0;  }  final int i=Fast.mostSignificantBit(x / b + 1);  final int l=writeUnary(i);  final int M=((1 << i + 1) - 1) * b;  final int m=(M / (2 * b)) * b;  return l + writeMinimalBinary(x - m,M - m);}  }
class C{  public MReportTree(Properties ctx,int PA_Hierarchy_ID,String ElementType){  m_ElementType=ElementType;  m_TreeType=m_ElementType;  if (MAcctSchemaElement.ELEMENTTYPE_Account.equals(m_ElementType) || MAcctSchemaElement.ELEMENTTYPE_UserList1.equals(m_ElementType) || MAcctSchemaElement.ELEMENTTYPE_UserList2.equals(m_ElementType))   m_TreeType=MTree.TREETYPE_ElementValue;  if (MAcctSchemaElement.ELEMENTTYPE_OrgTrx.equals(m_ElementType))   m_TreeType=MTree.TREETYPE_Organization;  m_PA_Hierarchy_ID=PA_Hierarchy_ID;  m_ctx=ctx;  int AD_Tree_ID=getAD_Tree_ID();  if (AD_Tree_ID == 0)   throw new IllegalArgumentException("No AD_Tree_ID for TreeType=" + m_TreeType + ", PA_Hierarchy_ID="+ PA_Hierarchy_ID);  boolean clientTree=true;  m_tree=new MTree(ctx,AD_Tree_ID,true,clientTree,null);  m_tree.trimTree();}  }
class C{  public static <T>void append(String fileName,Iterable<T> list,ITransformer<T,String> transformer) throws IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(fileName,true));  for (  T object : list) {    writer.write(transformer.transform(object));    writer.newLine();  }  writer.close();}  }
class C{  public IntentBuilder quality(Quality q){  result.putExtra(MediaStore.EXTRA_VIDEO_QUALITY,q.getValue());  return (this);}  }
class C{  public static final Axis3D zAxis(){  return new Axis3D(Vec3D.Z_AXIS);}  }
class C{  public static SimpleCheckoutStarter createWithGitUrl(final String gitUrl,final String ref) throws RuntimeException {  if (!UrlHelper.isGitRemoteUrl(gitUrl)) {    throw new RuntimeException(TfPluginBundle.message(TfPluginBundle.STARTER_ERRORS_INVALID_GIT_URL,gitUrl));  }  return new SimpleCheckoutStarter(gitUrl,ref);}  }
class C{  public Builder textColor(int textColor){  this.textColor=textColor;  return this;}  }
class C{  private void recordStats(){  if (list == null) {    return;  }  Attribute att;  Double value;  String metric;  for (  Object o : list) {    att=(Attribute)o;    value=(Double)att.getValue();    if (value == null || value == -1.0) {      continue;    }    metric=ATTRIBUTES_MAP.get(att.getName());    if (metric == null) {      continue;    }    value=((int)(value * 1000)) / 10.0d;    recordGaugeValue(metric,value);  }}  }
class C{  public void test_getBitsFromByteArray_correctRejection_off_and_len_04(){  BytesUtil.getBits(new byte[4],0,32);  try {    BytesUtil.getBits(new byte[4],0,33);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public static CoffeeEntry createEarlGreyEntry(SkuDetails earlGreyDetails){  return new CoffeeEntry(earlGreyDetails,EARL_GREY_CAFFEINE_RATE,EARL_GREY_ENERGY_RATE,EARL_GREY_CANDYNESS_RATE);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  protected void fire(final SelectionEvent event){  if (this.listener == null)   return;  this.listener.widgetSelected(event);}  }
class C{  public SPQRNodeClient(final String protocol,final String remoteHost,final int servicePort,final int adminPort,final Client client) throws RequiredInputMissingException {  if (StringUtils.isBlank(protocol))   throw new RequiredInputMissingException("Missing required protocol");  if (StringUtils.isBlank(remoteHost))   throw new RequiredInputMissingException("Missing required remote host");  if (servicePort < 1)   throw new RequiredInputMissingException("Missing required service port");  if (adminPort < 1)   throw new RequiredInputMissingException("Missing required admin port");  if (client == null)   throw new RequiredInputMissingException("Missing required client");  this.processingNodeServiceBaseUrl=new StringBuffer(protocol).append("://").append(remoteHost).append(":").append(servicePort).toString();  this.processingNodeAdminBaseUrl=new StringBuffer(protocol).append("://").append(remoteHost).append(":").append(adminPort).toString();  this.restClient=client;  if (logger.isDebugEnabled())   logger.debug("rest client[protocol=" + protocol + ", host="+ remoteHost+ ", servicePort="+ servicePort+ ", adminPort="+ adminPort+ "]");}  }
class C{  public String source(){  StringBuilder str=new StringBuilder();  int[] ids=getWordIDs();  for (int i=1; i < ids.length - 1; i++) {    str.append(Vocabulary.word(ids[i])).append(" ");  }  return str.toString().trim();}  }
class C{  public void addHypothesis(String hyp,float score){  this.raw_nbest.add(new NBestItem(hyp,score));}  }
class C{  protected int selectOperator(){  lastUpdate++;  if ((lastUpdate >= UPDATE_WINDOW) || (probabilities == null)) {    lastUpdate=0;    probabilities=getOperatorProbabilities();  }  double rand=PRNG.nextDouble();  double sum=0.0;  for (int i=0; i < operators.size(); i++) {    sum+=probabilities[i];    if (sum > rand) {      return i;    }  }  throw new IllegalStateException();}  }
class C{  public static String toArrayComponent(String desc,int dim){  return desc.substring(dim);}  }
class C{  public static void post(@Nullable final Version newVersion,@Nullable final Date lastSupportedDate,final boolean isUnsupported){  final NewVersionAvailableEvent event;  try {    event=new NewVersionAvailableEvent(newVersion,lastSupportedDate,isUnsupported);  } catch (  IllegalArgumentException|IllegalStateException e) {    return;  }  final EventBus eventBus=EventBus.getDefault();  final NewVersionAvailableEvent postedEvent=eventBus.getStickyEvent(NewVersionAvailableEvent.class);  if (postedEvent == null || event.compareTo(postedEvent) > 0) {    eventBus.postSticky(event);  }}  }
class C{  private void printResultToFile(Map<String,Integer> resultMapToPrint) throws FileNotFoundException {  int errorcount=0;  Map<Integer,String> classValue=new HashMap<Integer,String>();  classValue.put(0,"positive");  classValue.put(1,"neutral");  classValue.put(2,"negative");  File file=new File("resources/tweets/" + this.PATH + ".txt");  PrintStream tweetPrintStream=new PrintStream(new File("resources/erg/result.txt"));  Scanner scanner=new Scanner(file);  while (scanner.hasNextLine()) {    String[] line=scanner.nextLine().split("\t");    String id=line[0];    if (line[0].equals("NA")) {      id=line[1];    }    if (line.length == 4) {      String senti=classValue.get(resultMapToPrint.get(id));      if (senti != null) {        line[2]=senti;      } else {        System.out.println("Error while printResultToFile: tweetID:" + id);        errorcount++;        line[2]="neutral";      }    } else {      errorcount++;      System.out.println(line[0]);    }    tweetPrintStream.print(StringUtils.join(line,"\t"));    tweetPrintStream.println();  }  scanner.close();  tweetPrintStream.close();  if (errorcount != 0)   System.out.println("Errors while printResultToFile: " + errorcount);}  }
class C{  void makeProof(NodeRepresentation nodeRep,boolean isAndProof,boolean sufficesOnly){  Vector<NodeRepresentation> createdAssumps=new Vector<NodeRepresentation>();  StringSet createdAssumpsDefs=new StringSet();  StringSet createdAssumpStepNames=new StringSet();  for (int i=state.firstAddedAssumption; i < state.assumeReps.size(); i++) {    NodeRepresentation rep=state.assumeReps.elementAt(i);    if (rep.nodeType != NodeRepresentation.OR_DECOMP) {      createdAssumps.add(rep);      if ((rep.contextStepName != null) && !rep.fromGoal) {        createdAssumpStepNames.add(rep.contextStepName);      }      createdAssumpsDefs.addAll(rep.fromDefs);    } else {      if (rep != nodeRep) {        MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Something unexpected is going on at " + "line 3247 of NewDecomposeProofHandler.");      }    }  }  Vector<String[]> createdAssumpsNodeTexts=new Vector<String[]>();  for (int i=0; i < createdAssumps.size(); i++) {    createdAssumpsNodeTexts.add(createdAssumps.elementAt(i).nodeText);  }  if (sufficesOnly && (createdAssumps.size() == 0)) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","Sanity check failed at " + "line 3255 of NewDecomposeProofHandler.");  }  int proofIndent=PROOF_INDENT;  String proofIndentString=StringHelper.copyString(" ",proofIndent);  String[] assumptionsText=createdAssumptions();  String[] assumptionsAsConjText=new String[createdAssumps.size()];  int k=0;  while ((assumptionsAsConjText) != null && (k < createdAssumps.size())) {    NodeRepresentation rep=createdAssumps.elementAt(k);    if (rep.nodeType == NodeRepresentation.NEW_NODE) {      assumptionsAsConjText=null;    } else {      if (createdAssumps.size() > 1) {        assumptionsAsConjText[k]=stringArrayToString(prependToStringArray(rep.nodeText,"/\\ "));      } else {        assumptionsAsConjText[k]=stringArrayToString(rep.nodeText);      }    }    k++;  }  String[] proofText=null;  StringSet proofBY=null;  StringSet proofDEF=null;  if (this.proof != null) {    proofText=this.stepRep.subNodeText(this.proof).nodeText;    proofText=prependToStringArray(proofText,proofIndentString);    try {      IRegion proofRegion=EditorUtil.getRegionOf(this.doc,((SyntaxTreeNode)this.proof.stn).getLocation());      this.doc.replace(proofRegion.getOffset(),proofRegion.getLength(),"");    } catch (    BadLocationException e) {      MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 3275 of NewDecomposeProofHandler.");      e.printStackTrace();    }    proofBY=new StringSet();    proofDEF=new StringSet();    String line="";    int lineNum=0;    int idx=0;    boolean notfound=true;    while (notfound && lineNum < proofText.length) {      line=proofText[lineNum].trim();      if (line.startsWith("BY")) {        idx=proofText[lineNum].indexOf("BY") + 2;        notfound=false;      } else       if (line.equals("")) {        lineNum++;      } else {        lineNum=Integer.MAX_VALUE;      }    }    if (!notfound) {      String stringBY="";      boolean defNotfound=true;      while (defNotfound && lineNum < proofText.length) {        line=proofText[lineNum].substring(idx,proofText[lineNum].length());        int defIdx=0;        while ((defIdx < line.length()) && defNotfound) {          defIdx=line.indexOf("DEF",defIdx);          if (defIdx == -1) {            defIdx=line.length();          } else           if (((defIdx == 0) || Character.isWhitespace(line.charAt(defIdx - 1))) && ((defIdx + 3 == line.length()) || Character.isWhitespace(line.charAt(defIdx + 3)))) {            defNotfound=false;          } else {            defIdx=defIdx + 3;          }        }        stringBY=stringBY + line.substring(0,defIdx);        if (defNotfound) {          lineNum++;          idx=0;        } else {          idx=idx + defIdx + 3;        }      }      proofBY.addAll(StringSet.CommaSeparatedListToStringSet(stringBY));      if (!defNotfound) {        String stringDEF="";        while (lineNum < proofText.length) {          line=proofText[lineNum].substring(idx,proofText[lineNum].length());          stringDEF=stringDEF + line;          lineNum++;          idx=0;        }        proofDEF.addAll(StringSet.CommaSeparatedListToStringSet(stringDEF));      }    }  }  String[] sufficesStep=null;  boolean hasSufficesStep=(useSufficesButton.getSelection() && (createdAssumps.size() != 0)) || sufficesOnly;  if (hasSufficesStep) {    String sufficesProof=null;    StringSet sufficesDEF=createdAssumpsDefs.clone();    if ((nodeRep != null) && (nodeRep.nodeType == NodeRepresentation.OR_DECOMP) && (nodeRep.fromGoal || nodeRep.fromExists)) {      if (createdAssumps.size() != 0) {        assumptionsText=appendToStringArray(assumptionsText,",");      }      assumptionsText=concatStringArrays(assumptionsText,nodeRep.nodeText);      sufficesDEF.addAll(nodeRep.fromDefs);    }    String[] suffices=prependToStringArray(concatStringArrays(prependToStringArray(assumptionsText,"ASSUME "),prependToStringArray(this.state.goalRep.primedNodeText(),"PROVE  ")),proofLevelString + " SUFFICES ");    if (state.assumpDefinitions.isEmpty() && createdAssumpStepNames.isEmpty()) {      if (OBVIOUS_HAS_PROOF) {        sufficesProof="PROOF OBVIOUS";      } else {        sufficesProof="OBVIOUS";      }    } else {      sufficesProof="BY ";      if (!createdAssumpStepNames.isEmpty()) {        sufficesProof=sufficesProof + createdAssumpStepNames.toCommaSeparatedString() + " ";      }      if (!sufficesDEF.isEmpty()) {        sufficesProof=sufficesProof + "DEF " + sufficesDEF.toCommaSeparatedString();      }    }    sufficesStep=concatStringArrays(suffices,new String[]{proofIndentString + sufficesProof});  }  String[][] mainProofSteps=null;  int numberOfSteps=0;  String proofDef=null;  if (!sufficesOnly) {    if (isAndProof) {      Decomposition decomp=nodeRep.decomposition;      numberOfSteps=decomp.children.size();      mainProofSteps=new String[numberOfSteps][];      proofDef=decomp.definedOp;      for (int i=0; i < numberOfSteps; i++) {        NodeRepresentation stepGoalRep=decompositionChildToNodeRep(nodeRep,i,null,null);        String[] goalArray=stepGoalRep.primedNodeText();        String[] step;        boolean isAssumeProve=false;        if ((sufficesStep == null && createdAssumps.size() != 0)) {          step=concatStringArrays(prependToStringArray(assumptionsText,"ASSUME "),prependToStringArray(goalArray,"PROVE  "));          isAssumeProve=true;        } else {          step=goalArray;        }        String stepNum=proofLevelString + (i + 1);        step=prependToStringArray(step,stepNum + STEP_NUMBER_PUNCTUATION + " ");        if (proofText != null) {          String[] newProofText=proofText.clone();          if (isAssumeProve) {            addStepNumToProof(stepNum,newProofText);          }          step=concatStringArrays(step,newProofText);        }        mainProofSteps[i]=step;      }    } else {      Vector<String[]> pfStepVec=new Vector<String[]>();      for (int i=0; i < nodeRep.children.size(); i++) {        Vector<NodeRepresentation> childVec=nodeRep.children.elementAt(i);        String[] assumpArray;        if (!hasSufficesStep) {          assumpArray=new String[assumptionsText.length];          for (int j=0; j < assumptionsText.length; j++) {            assumpArray[j]=assumptionsText[j];          }        } else {          assumpArray=new String[0];          assumptionsAsConjText=new String[0];        }        boolean assumpArrayOnlyFormulas=true;        for (int j=0; j < createdAssumps.size(); j++) {          assumpArrayOnlyFormulas=assumpArrayOnlyFormulas && (createdAssumps.elementAt(j).nodeType != NodeRepresentation.NEW_NODE);        }        addCaseProofs(pfStepVec,childVec,assumpArray,proofText,assumptionsAsConjText);      }      mainProofSteps=new String[pfStepVec.size()][];      for (int i=0; i < mainProofSteps.length; i++) {        mainProofSteps[i]=pfStepVec.elementAt(i);      }      numberOfSteps=mainProofSteps.length;    }  }  String[] qedStep=new String[2];  qedStep[0]=proofLevelString;  if (NUMBER_QED_STEP && (numberOfSteps != 0)) {    qedStep[0]=qedStep[0] + (numberOfSteps + 1) + STEP_NUMBER_PUNCTUATION;  }  qedStep[0]=qedStep[0] + " QED";  if (sufficesOnly) {    if (proofText != null) {      qedStep[1]=stringArrayToString(proofText);    } else {      qedStep=new String[]{qedStep[0]};    }  } else {    StringSet qedBY=new StringSet();    StringSet qedDEF=new StringSet();    for (int i=1; i <= numberOfSteps; i++) {      qedBY.add(proofLevelString + i);    }    if (isAndProof) {      qedBY.addAll(createdAssumpStepNames);      if (proofDef != null) {        qedDEF.add(proofDef);      }      if (!hasSufficesStep) {        qedDEF.addAll(nodeRep.fromDefs);        qedDEF.addAll(createdAssumpsDefs);      }    } else {      if (useSufficesButton.getSelection()) {        if (nodeRep.contextStepName != null) {          qedBY.add(nodeRep.contextStepName);        }        qedDEF.addAll(state.goalDefinitions);        if (!hasSufficesStep && nodeRep.fromGoal) {          qedDEF.addAll(nodeRep.fromDefs);        }      } else {        qedBY.addAll(createdAssumpStepNames);        if (nodeRep.contextStepName != null) {          qedBY.add(nodeRep.contextStepName);        }        qedDEF.addAll(createdAssumpsDefs);        qedDEF.addAll(nodeRep.fromDefs);        qedDEF.addAll(state.goalDefinitions);      }    }    qedStep[1]=proofIndentString + "BY " + qedBY.toCommaSeparatedString();    if (!qedDEF.isEmpty()) {      qedStep[1]=qedStep[1] + " DEF " + qedDEF.toCommaSeparatedString();    }  }  String[] blankLine=new String[]{""};  String[] completeProof=new String[0];  if (sufficesStep != null) {    if (BLANK_LINE_BETWEEN_STEPS) {      completeProof=concatStringArrays(sufficesStep,blankLine);    } else {      completeProof=sufficesStep;    }  }  if (mainProofSteps != null) {    completeProof=concatStringArrays(completeProof,mainProofSteps[0]);    for (int i=1; i < mainProofSteps.length; i++) {      if (BLANK_LINE_BETWEEN_STEPS) {        completeProof=concatStringArrays(completeProof,concatStringArrays(blankLine,mainProofSteps[i]));      } else {        completeProof=concatStringArrays(completeProof,mainProofSteps[i]);      }    }    if (BLANK_LINE_BETWEEN_STEPS) {      completeProof=concatStringArrays(completeProof,blankLine);    }  }  completeProof=concatStringArrays(completeProof,qedStep);  completeProof=prependToStringArray(completeProof,StringHelper.copyString(" ",this.step.getLocation().beginColumn() - 1 + proofIndent));  try {    int nextLineOffset=doc.getLineInformation(this.step.getTheorem().getLocation().endLine()).getOffset();    this.doc.replace(nextLineOffset,0,stringArrayToString(completeProof) + "\n");  } catch (  BadLocationException e) {    MessageDialog.openError(UIHelper.getShellProvider().getShell(),"Decompose Proof Command","An error that should not happen has occurred in " + "line 1465 of NewDecomposeProofHandler.");    e.printStackTrace();  }  this.windowShell.dispose();  return;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.183 -0500",hash_original_method="058740AD5F567A2FC597464136294293",hash_generated_method="980DF0E9E18C364226261C2853199BDC") protected void startTransactionTimer(){  if (this.transactionTimerStarted.compareAndSet(false,true)) {    if (sipStack.getTimer() != null) {      TimerTask myTimer=new TransactionTimer();      sipStack.getTimer().schedule(myTimer,BASE_TIMER_INTERVAL,BASE_TIMER_INTERVAL);    }  }}  }
class C{  public static float calculateTop(float left,float right,float bottom,float targetAspectRatio){  final float width=right - left;  final float top=bottom - (width / targetAspectRatio);  return top;}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public void enableButtons(boolean b){  pubButton.setEnabled(b);}  }
class C{  public void endPrefixMapping(String prefix){}  }
class C{  static boolean inList(Node currentNode,Set<Node> nodeList){  return nodeList.contains(currentNode);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  LOGGER.info("Starting step with Id " + this.getId());  LOGGER.debug("deleteWorkingDirectoryOnCompletion: " + deleteWorkingDirectoryOnCompletion);  if (deleteWorkingDirectoryOnCompletion) {    if (fileNameTemplate != null && fileNameTemplate.length > 0) {      for (      String fileName : fileNameTemplate) {        final String filePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,fileName);        LOGGER.debug("Deleting file: " + fileName);        File file=new File(filePathName);        if (file.exists()) {          if (!file.delete()) {            LOGGER.error("Unable to delete the file located at " + filePathName);            throw new IllegalStateException("Unable to delete the file located at " + filePathName);          }        } else {          LOGGER.info("File not found, file located at " + filePathName);        }      }    } else {      throw new IllegalStateException("Delete file step called without specifying any files to delete");    }  } else {    LOGGER.debug("File delete step skipped -  delete.working.directory.on.completion =  " + deleteWorkingDirectoryOnCompletion);  }  LOGGER.info("Step with Id " + this.getId() + " finished.");}  }
class C{  public void updatePostScore(Post post){  log.debug("Handle updating post score, id=" + post.getId());  Post postToUpdate=postService.getPost(post.getId());  if (postToUpdate == null) {    log.warn("Post id=" + post.getId() + " does not exist now.");    return;  }  if (postToUpdate.getStatus() == PostStatus.PRIVATE) {    log.warn("Post id=" + post.getId() + " is private, no need to update score.");    return;  }  hotPostService.addHotPost(postToUpdate);  hotPostService.addTaggedPost(postToUpdate,postToUpdate.getTags());}  }
class C{  protected static boolean hasValue(final String value){  return !StringUtils.isBlank(value);}  }
class C{  public WaveHeader(){}  }
class C{  @Override public boolean isWhiteSpace(){  return whitespace;}  }
class C{  public Enumeration<K> keys(){  return new KeyIterator();}  }
class C{  private static void ensureCorrectMapConstruction(MachineCodeOffsets mcOffsets,Instruction instr){  if (mcOffsets.lacksMachineCodeOffset(instr)) {    if (instr.getOpcode() == IR_PROLOGUE_opcode) {      mcOffsets.fabricateMachineCodeOffsetForPrologueInstruction(instr);    } else {      throw new OptimizingCompilerException("Found instruction without valid machine code offset during " + "generation of machine code information: " + instr);    }  }}  }
class C{  public Set<String> keySet(){  return this.map.keySet();}  }
class C{  public List<ResultSet> execQuerySQL(String sql,String... bindArgs){  Cursor cursor=null;  try {    openDB();    cursor=mSQLiteDatabase.rawQuery(sql,bindArgs);    if (cursor.getCount() < 1) {      return null;    }    List<ResultSet> resultList=new ArrayList<ResultSet>();    parseCursorToResult(cursor,resultList);    return resultList;  } catch (  SQLException ex) {    ex.printStackTrace();    throw ex;  } finally {    if (cursor != null)     cursor.close();  }}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:    setAstElement((EObject)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private static String sanitizeString(String str){  if (!str.startsWith("http") && str.length() > MAX_STRING_LEN) {    str=str.substring(0,MAX_STRING_LEN) + "[...]";  }  return escapeString(str);}  }
class C{  private void generateClipPath(ClipPath clipPath,BufferedWriter vectorBW) throws IOException {  vectorBW.write(clippath_start);  vectorBW.newLine();  if (clipPath.getName() != null) {    vectorBW.write(name.replace("#name",clipPath.getName()));  }  if (clipPath.getPathData() != null) {    stringFileWriter.write(stringline.replace("#stringkey",currentVectorFileName + stringClipPathSuffix + clipPath.getName()).replace("#stringvalue",clipPath.getPathData()));    stringFileWriter.newLine();    vectorBW.write(pathData.replace("#stringPathData",stringClipPathSuffix + clipPath.getName()));    vectorBW.newLine();  }  vectorBW.write(endtagbloc);  vectorBW.newLine();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.264 -0400",hash_original_method="A38C03A45CA3873EDA3CC27F4EA1E154",hash_generated_method="5550CB025B19BB6CAE3B6DEDECB45746") public E poll(){  if (isEmpty()) {    return null;  }  E result=elements[0];  removeAt(0);  return result;}  }
class C{  private void initOrganizationData(POProfile profile){  if (profile.getOrganization() != null) {    POOrganization org=profile.getOrganization();    model.setOrganizationKey(org.getKey());    model.setOrganizationVersion(org.getVersion());    model.setOrganizationIdentifier(new FieldData<String>(org.getIdentifier()));    model.setOrganizationName(new FieldData<String>(org.getName(),false,isSellingOrganization(org),true));    model.setOrganizationMail(new FieldData<String>(org.getMail(),false,isSellingOrganization(org),true));    model.setOrganizationSupportEmail(new FieldData<String>(org.getSupportEmail(),false,false,isSellingOrganization(org)));    model.setOrganizationWebsiteUrl(new FieldData<String>(org.getWebsiteUrl(),false,isSellingOrganization(org),true));    model.setOrganizationAddress(new FieldData<String>(org.getAddress(),false,isSellingOrganization(org),true));    model.setOrganizationCountryISOCode(new FieldData<String>(org.getCountryISOCode(),false,true,true));    model.setOrganizationDescription(new FieldData<String>(org.getDescription()));    model.setOrganizationPhone(new FieldData<String>(org.getPhone(),false,isSellingOrganization(org),true));    model.setOrganizationImageDefined(org.isImageDefined());    model.setOrganizationImage(new FieldData<ImageUploader>(new ImageUploader(ImageType.ORGANIZATION_IMAGE),true,false,isSellingOrganization(org)));  }}  }
class C{  boolean checkUserPasswordWrite(String userName,String password){  return userName.equals(this.writeUserName) && password.equals(this.writePassword);}  }
class C{  public void deleteAttribute(String name){  map.remove(name);}  }
class C{  public void startDocument() throws SAXException {  writeText4Links();  reset();  if (!("yes".equals(outputProperties.getProperty(OMIT_XML_DECLARATION,"no")))) {    write("<?xml");    if (version == null) {      write(" version=\"1.0\"");    } else {      write(" version=\"");      write(version);      write("\"");    }    if (outputEncoding != null && outputEncoding != "") {      write(" encoding=\"");      write(outputEncoding);      write("\"");    }    if (standalone == null) {      write(" standalone=\"yes\"?>\n");    } else {      write(" standalone=\"");      write(standalone);      write("\"");    }  }  super.startDocument();}  }
class C{  static public boolean isSameLocalDate(LocalDate first,LocalDate second){  if (first == null && second == null) {    return true;  }  if (first == null || second == null) {    return false;  }  return first.isEqual(second);}  }
class C{  protected void checkCloudletCompletion(){  List<? extends ContainerHost> list=getVmAllocationPolicy().getContainerHostList();  for (int i=0; i < list.size(); i++) {    ContainerHost host=list.get(i);    for (    ContainerVm vm : host.getVmList()) {      for (      Container container : vm.getContainerList()) {        while (container.getContainerCloudletScheduler().isFinishedCloudlets()) {          Cloudlet cl=container.getContainerCloudletScheduler().getNextFinishedCloudlet();          if (cl != null) {            sendNow(cl.getUserId(),CloudSimTags.CLOUDLET_RETURN,cl);          }        }      }    }  }}  }
class C{  public SeaGlassTabbedPaneMouseHandler(MouseListener originalMouseListener){  delegate=originalMouseListener;  delegate2=(MouseMotionListener)originalMouseListener;  closeButtonHoverIndex=-1;  closeButtonArmedIndex=-1;}  }
class C{  private ViewNode addElement(final INaviViewNode node){  final List<ViewNode> nodes=getView().getGraph().getNodes();  for (  final ViewNode viewNode : nodes) {    if (viewNode.getNative() == node) {      m_elements.add(viewNode);      return viewNode;    }  }  return null;}  }
class C{  public synchronized void remove(E listener){  if (listener == null) {    throw new IllegalArgumentException();  }  int oldSize=listeners.length;  for (int i=0; i < oldSize; ++i) {    E listener2=listeners[i];    if (identity ? listener == listener2 : listener.equals(listener2)) {      if (oldSize == 1) {        listeners=emptyArray;      } else {        E[] newListeners=(E[])new Object[oldSize - 1];        System.arraycopy(listeners,0,newListeners,0,i);        System.arraycopy(listeners,i + 1,newListeners,i,oldSize - i - 1);        this.listeners=newListeners;      }      return;    }  }}  }
class C{  public final int position(){  return getByteBufferPosition() + _offset;}  }
class C{  protected BigdataSailConnection(final Access access) throws DatasetNotFoundException {  this(ITx.UNISOLATED,access);  attach(ITx.UNISOLATED);}  }
class C{  protected Set<String> siblings(){  return Collections.emptySet();}  }
class C{  public long incrementMapElementCount(MapElementState.Type type){  mapElementCount[type.ordinal()]++;  return (mapElementCount[type.ordinal()]);}  }
class C{  public static void swipeFullLeftAfter(AppiumDriver driver,AugmentedFunctions<?> augmentedFunctions,By by,int waitTimeInSeconds,int pressInMilliSeconds){  Preconditions.checkNotNull(by);  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(augmentedFunctions);  WebElement element=augmentedFunctions.findElementPresentAfter(by,waitTimeInSeconds);  Dimension size=driver.manage().window().getSize();  int from=size.getWidth() * 85 / 100;  int to=size.getWidth() * 15 / 100;  int y=element.getLocation().getY() + element.getSize().getHeight() / 2;  driver.swipe(from,y,to,y,pressInMilliSeconds);}  }
class C{  private static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  public void commit(Xid xid,boolean onePhase) throws XAException {  String command="XA COMMIT " + xidToString(xid);  if (onePhase) {    command+=" ONE PHASE";  }  execute(command);}  }
class C{  @Override public void respond(String response){  getUser().send().ctcpResponse(response);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");  attribute=(Attr)attributes.getNamedItemNS("http://www.nist.gov","domestic");  assertNull("namednodemapremovenameditemns01",attribute);}  }
class C{  @Override public UpdateResponse addBeans(Collection<?> beans) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.addBeans(beans);  if (this.solr1 != null)   ur=this.solr1.addBeans(beans);  return ur;}  }
class C{  public static Identifier mangleInnerType(Identifier className){  if (!className.isInner())   return className;  Identifier mname=Identifier.lookup(className.getFlatName().toString().replace('.',SIGC_INNERCLASS));  if (mname.isInner())   throw new CompilerError("mangle " + mname);  return Identifier.lookup(className.getQualifier(),mname);}  }
class C{  public RegistryException(TYPE type,String message){  super(message);  this.type=type;}  }
class C{  void collectDeviceInfo(ITestDevice device,CtsBuildHelper ctsBuild,ITestInvocationListener listener) throws DeviceNotAvailableException {  if (!mSkipDeviceInfo) {    DeviceInfoCollector.collectDeviceInfo(device,ctsBuild.getTestCasesDir(),listener);  }}  }
class C{  public static double quantile(double val,double rate,double location){  if (val < .5) {    return Math.log(2 * val) / rate + location;  } else {    return -Math.log(2. - 2. * val) / rate + location;  }}  }
class C{  public void addResults(AddOnChangesResult result){  selectedAddOns.addAll(result.getSelectedAddOns());  oldVersions.addAll(result.oldVersions);  uninstalls.addAll(result.getUninstalls());  newVersions.addAll(result.getNewVersions());  installs.addAll(result.getInstalls());  optionalAddOns.addAll(result.getOptionalAddOns());  unloadExtensions.addAll(result.getUnloadExtensions());  softUnloadExtensions.addAll(result.getSoftUnloadExtensions());}  }
class C{  public JapaneseTokenizer(AttributeFactory factory,UserDictionary userDictionary,boolean discardPunctuation,Mode mode){  super(factory);  dictionary=TokenInfoDictionary.getInstance();  fst=dictionary.getFST();  unkDictionary=UnknownDictionary.getInstance();  characterDefinition=unkDictionary.getCharacterDefinition();  this.userDictionary=userDictionary;  costs=ConnectionCosts.getInstance();  fstReader=fst.getBytesReader();  if (userDictionary != null) {    userFST=userDictionary.getFST();    userFSTReader=userFST.getBytesReader();  } else {    userFST=null;    userFSTReader=null;  }  this.discardPunctuation=discardPunctuation;switch (mode) {case SEARCH:    searchMode=true;  extendedMode=false;outputCompounds=true;break;case EXTENDED:searchMode=true;extendedMode=true;outputCompounds=false;break;default :searchMode=false;extendedMode=false;outputCompounds=false;break;}buffer.reset(this.input);resetState();dictionaryMap.put(Type.KNOWN,dictionary);dictionaryMap.put(Type.UNKNOWN,unkDictionary);dictionaryMap.put(Type.USER,userDictionary);}  }
class C{  public synchronized void free(int pageId){  free(pageId,true);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.235 -0500",hash_original_method="68C823D8D9E30AD74311CD8E57BB79FD",hash_generated_method="225F6058AAD4F12FB2D85B9121205AE9") public static boolean isDigit(int codePoint){  if ('0' <= codePoint && codePoint <= '9') {    return true;  }  if (codePoint < 1632) {    return false;  }  return isDigitImpl(codePoint);}  }
class C{  public Property era(){  return new Property(this,getChronology().era());}  }
class C{  @Override public final boolean isActive(){  return _state.isLive();}  }
class C{  private void convertError(CharBuffer buf,int line){  String srcFilename=null;  int destLine=0;  int srcLine=0;  int srcTailLine=Integer.MAX_VALUE;  for (int i=0; i < _lines.size(); i++) {    Line map=(Line)_lines.get(i);    if (map._dstLine <= line && line <= map.getLastDestinationLine()) {      srcFilename=map._srcFilename;      destLine=map._dstLine;      srcLine=map.getSourceLine(line);      break;    }  }  if (srcFilename != null) {  } else   if (_lines.size() > 0)   srcFilename=((Line)_lines.get(0))._srcFilename; else   srcFilename="";  buf.append(srcFilename);  if (line >= 0) {    buf.append(":");    buf.append(srcLine + (line - destLine));  }}  }
class C{  public void clear(){  modCount++;  for (int i=0; i < size; i++)   queue[i]=null;  size=0;}  }
class C{  public boolean isSetClusterJoinResponse(){  return this.clusterJoinResponse != null;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return this;}  }
class C{  public OkLogInterceptor build(){  return new OkLogInterceptor(this.logUrlBase,this.logInterceptor,this.useAndroidLog);}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){  meta.put(GamlProperties.PLUGINS,action.getDefiningPlugin());  if (action.isBuiltIn()) {    meta.put(GamlProperties.ACTIONS,action.getName());  }  if (parameters != null)   parameters.forEachValue(null);}  }
class C{  public String toStringRanking(){  return new ResultMatrixPlainText(this).toStringRanking();}  }
class C{  private void writeToStorage(String text){  File file=new File(PATH);  if (!file.exists()) {    try {      file.createNewFile();    } catch (    IOException e) {      e.printStackTrace();    }  }  OutputStream outputStream=null;  try {    outputStream=new FileOutputStream(file);    outputStream.write(text.getBytes());    this.textView.setText(String.format(Locale.getDefault(),getString(R.string.text_write),text));  } catch (  IOException e) {    Log.e(TAG,"Unable to write to storage",e);    this.textView.setText(R.string.text_failure_write);  } finally {    close(outputStream);  }}  }
class C{  public static String byteArrayToString(byte[] data){  if (data == null || data.length == 0) {    return "";  }  return Base64.encodeBytes(data);}  }
class C{  FormattedTweetText formatTweetText(final Tweet tweet){  if (tweet == null)   return null;  final FormattedTweetText cached=formatCache.get(tweet.id);  if (cached != null)   return cached;  final FormattedTweetText formattedTweetText=TweetTextUtils.formatTweetText(tweet);  if (formattedTweetText != null && !TextUtils.isEmpty(formattedTweetText.text)) {    formatCache.put(tweet.id,formattedTweetText);  }  return formattedTweetText;}  }
class C{  static String msgFromToString(Throwable e){  String msg=e.toString();  int idx=msg.indexOf(':');  if (idx >= 0 && idx < msg.length() - 1) {    return msg.substring(idx + 1);  } else {    return msg;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isBetaFunctionality(){  Object oo=get_Value(COLUMNNAME_IsBetaFunctionality);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static double calculateCoverage(NetworkRoute route1,NetworkRoute route2,Network network){  double routeLength=0.;  double coveredLength=0.;  for (  Id<Link> id : route1.getLinkIds()) {    routeLength+=network.getLinks().get(id).getLength();    if (route2.getLinkIds().contains(id)) {      coveredLength+=network.getLinks().get(id).getLength();    }  }  if (routeLength > 0.) {    return coveredLength / routeLength;  } else {    return 1.;  }}  }
class C{  void validate() throws WebSocketException {}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(getCapDevInput(stack).getMinChannel());}  }
class C{  private ExceptionDetailsDialog(final IShellProvider parentShell,final String title,final Image image,final String message,final Object details){  super(parentShell,getTitle(title,details),getImage(image,details),message);  this.details=details;}  }
class C{  public static float toPixelFromDIP(float value){  return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,value,DisplayMetricsHolder.getWindowDisplayMetrics());}  }
class C{  public short[][] addSquareMatrix(short[][] matrix1,short[][] matrix2){  if (matrix1.length != matrix2.length || matrix1[0].length != matrix2[0].length) {    throw new RuntimeException("Addition is not possible!");  }  short[][] rslt=new short[matrix1.length][matrix1.length];  for (int i=0; i < matrix1.length; i++) {    for (int j=0; j < matrix2.length; j++) {      rslt[i][j]=GF2Field.addElem(matrix1[i][j],matrix2[i][j]);    }  }  return rslt;}  }
class C{  public static String stringFor(int n){switch (n) {case cudaFuncCachePreferNone:    return "cudaFuncCachePreferNone";case cudaFuncCachePreferShared:  return "cudaFuncCachePreferShared";case cudaFuncCachePreferL1:return "cudaFuncCachePreferL1";case cudaFuncCachePreferEqual:return "cudaFuncCachePreferEqual";}return "INVALID cudaFuncCache: " + n;}  }
class C{  public LoggedCreateTargetQueries(final CreateTargetExecutionLog log){  Assert.isNotNull(log);  fLog=log;}  }
class C{  public static void startQuery(AsyncQueryHandler handler,int token,String selection){  handler.cancelOperation(token);  handler.startQuery(token,null,sAllThreadsUri,ALL_THREADS_PROJECTION,selection,null,Conversations.DEFAULT_SORT_ORDER);}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  private void updatePlaybackControls(){  mPlayPauseButton.updateState();  mShuffleButton.updateShuffleState();  mRepeatButton.updateRepeatState();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  setupAVOSCloud(false);  setupGroupAdapter();}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.TSETTER;}  }
class C{  @DELETE @Path("repository/{repoId}") @ZeppelinApi public Response removeRepository(@PathParam("repoId") String repoId){  logger.info("Remove repository {}",repoId);  try {    interpreterFactory.removeRepository(repoId);  } catch (  Exception e) {    logger.error("Exception in InterpreterRestApi while removing repository ",e);    return new JsonResponse<>(Status.INTERNAL_SERVER_ERROR,e.getMessage(),ExceptionUtils.getStackTrace(e)).build();  }  return new JsonResponse(Status.OK).build();}  }
class C{  @Nullable public static BggCookieJar authenticate(@NonNull String username,@NonNull String password,@NonNull String method){  if (MOCK_LOGIN) {    return BggCookieJar.getMock();  } else {    return tryAuthenticate(username,password,method);  }}  }
class C{  public static boolean hasSQLData(InvocationSequenceData data){  return (null != data.getSqlStatementData()) && (1 == data.getSqlStatementData().getCount());}  }
class C{  @Override public void menuItemClicked(ActionEvent e){  String cmd=e.getActionCommand();  if (cmd.equals("channelInfo")) {    openChannelInfoDialog();  } else   if (cmd.equals("channelAdmin")) {    openChannelAdminDialog();  } else   if (cmd.equals("chatRules")) {    openChatRules();  } else   if (cmd.equals("closeChannel")) {    client.closeChannel(channels.getActiveChannel().getName());  } else   if (cmd.startsWith("closeAllTabs")) {    Collection<Channel> chans=null;    if (cmd.equals("closeAllTabsButCurrent")) {      chans=channels.getTabsRelativeToCurrent(0);    } else     if (cmd.equals("closeAllTabsToLeft")) {      chans=channels.getTabsRelativeToCurrent(-1);    } else     if (cmd.equals("closeAllTabsToRight")) {      chans=channels.getTabsRelativeToCurrent(1);    } else     if (cmd.equals("closeAllTabs")) {      chans=channels.getTabs();    }    if (chans != null) {      for (      Channel c : chans) {        client.closeChannel(c.getName());      }    }  } else   if (cmd.equals("joinHostedChannel")) {    String chan=client.getHostedChannel(channels.getActiveChannel().getName());    if (chan == null) {      printLine("No channel is currently being hosted.");    } else {      client.joinChannel(chan);    }  } else   if (cmd.equals("srcOpen")) {    client.speedruncom.openCurrentGame(channels.getActiveChannel());  } else   if (cmd.equals("popoutChannel")) {    channels.popoutActiveChannel();  } else   if (cmd.startsWith("command")) {    String command=cmd.substring(7);    client.command(channels.getActiveChannel().getName(),command,channels.getActiveChannel().getStreamName());  } else   if (cmd.startsWith("range")) {    int range=-1;switch (cmd) {case "range1h":      range=60;    break;case "range2h":  range=120;break;case "range4h":range=240;break;case "range8h":range=480;break;case "range12h":range=720;break;}updateHistoryRange();client.settings.setLong("historyRange",range);} else {nameBasedStuff(cmd,channels.getActiveChannel().getStreamName());}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:06.597 -0500",hash_original_method="23EEAC8EFBFA0286A27EC362841462A0",hash_generated_method="DA24FCBDA3F16A02AD5B756164919AFC") @Override public String toString(){  return areaCodeMapStorage.toString();}  }
class C{  public LinearConversion(){}  }
class C{  public static void delete(File fileOrFolder) throws IOException {  if (fileOrFolder != null)   delete(fileOrFolder.toPath());}  }
class C{  public void addArchiveConversion(ArchiveConversion archiveConversion){  getArchiveConversions().add(archiveConversion);}  }
class C{  public MemorizingTrustManager(Context m,X509TrustManager defaultTrustManager){  init(m);  this.appTrustManager=getTrustManager(appKeyStore);  this.defaultTrustManager=defaultTrustManager;}  }
class C{  public void writeURIAttribute(String name,Object value,String componentPropertyName) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  if (value == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"value"));  }  writer.write(" ");  writer.write(name);  writer.write("=\"");  String stringValue=value.toString();  ensureTextBufferCapacity(stringValue);  if (stringValue.startsWith("javascript:")) {    HtmlUtils.writeAttribute(writer,true,true,buffer,stringValue,textBuffer,true);  } else {    HtmlUtils.writeURL(writer,stringValue,textBuffer,encoding);  }  writer.write("\"");}  }
class C{  @RequestMapping(value="/jobs/ids/{id}",method=RequestMethod.PUT) @Secured(SecurityFunctions.FN_JOBS_PUT) public Job updateJob(@PathVariable("id") String id,@RequestBody JobUpdateRequest jobUpdateRequest) throws Exception {  return jobService.updateJob(id,jobUpdateRequest);}  }
class C{  public ThriftServiceMetadata(Object implementation){  requireNonNull(implementation,"implementation");  interfaces=init(implementation);}  }
class C{  private void updateSelectedItemMetadata(){  View oldSelectedChild=mSelectedChild;  View child=mSelectedChild=getChildAt(mSelectedPosition - mFirstPosition);  if (child == null) {    return;  }  child.setSelected(true);  child.setFocusable(true);  if (hasFocus()) {    child.requestFocus();  }  if (oldSelectedChild != null) {    oldSelectedChild.setSelected(false);    oldSelectedChild.setFocusable(false);  }}  }
class C{  private void createClassPath(){  classPath=classFactory.createClassPath();}  }
class C{  public boolean isMultiplexed(){  return framedConnection != null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }  previousProgress=progress;}  }
class C{  public boolean isSetBonk(){  return this.bonk != null;}  }
class C{  public TroopSpace(double space){  totalSpace=space;  currentSpace=space;}  }
class C{  @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 14:42:09.206 -0500",hash_original_method="5D1C6299BDD74A2A432086CB6E5E8EB0",hash_generated_method="A51643FD1FC88DE197D002FD989BE4CC") @Override public V remove(Object key){  return super.remove(key);}  }
class C{  public static boolean isProfanity(String text){  if ((text == null) || text.isEmpty()) {    return false;  }  text=text.toLowerCase();  for (  String profanity : profanityMap.keySet()) {    if ((profanity.length() > 3) && (text.indexOf(profanity) != -1)) {      return true;    }  }  return checkProfanity(text);}  }
class C{  public MultiLineString createMultiLineString(LineString[] lineStrings){  return new MultiLineString(lineStrings,this);}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_name_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private void prePaintDirtyRegions(){  Map<Component,Rectangle> dirtyComponents;  java.util.List<Runnable> runnableList;synchronized (this) {    dirtyComponents=this.dirtyComponents;    runnableList=this.runnableList;    this.runnableList=null;  }  if (runnableList != null) {    for (    Runnable runnable : runnableList) {      runnable.run();    }  }  paintDirtyRegions();  if (dirtyComponents.size() > 0) {    paintDirtyRegions(dirtyComponents);  }}  }
class C{  public BasicConstraints(int pathLenConstraint){  this.cA=ASN1Boolean.getInstance(true);  this.pathLenConstraint=new ASN1Integer(pathLenConstraint);}  }
class C{  private DataSet simulateDataRecursive(int sampleSize,DataSet initialValues,boolean latentDataSaved){  List<Node> variables=new LinkedList<>();  List<Node> variableNodes=getVariableNodes();  for (  Node node : variableNodes) {    ContinuousVariable var=new ContinuousVariable(node.getName());    var.setNodeType(node.getNodeType());    variables.add(var);  }  DataSet fullDataSet=new ColtDataSet(sampleSize,variables);  Graph graph=new EdgeListGraph(getSemPm().getGraph());  List<Node> tierOrdering=graph.getCausalOrdering();  int[] tierIndices=new int[variableNodes.size()];  for (int i=0; i < tierIndices.length; i++) {    tierIndices[i]=variableNodes.indexOf(tierOrdering.get(i));  }  int[][] _parents=new int[variableNodes.size()][];  for (int i=0; i < variableNodes.size(); i++) {    Node node=variableNodes.get(i);    List<Node> parents=graph.getParents(node);    for (Iterator<Node> j=parents.iterator(); j.hasNext(); ) {      Node _node=j.next();      if (_node.getNodeType() == NodeType.ERROR) {        j.remove();      }    }    _parents[i]=new int[parents.size()];    for (int j=0; j < parents.size(); j++) {      Node _parent=parents.get(j);      _parents[i][j]=variableNodes.indexOf(_parent);    }  }  TetradMatrix cholesky=MatrixUtils.choleskyC(errCovar());  ROW:   for (int row=0; row < sampleSize; row++) {    double exoData[]=new double[cholesky.rows()];    for (int i=0; i < exoData.length; i++) {      exoData[i]=RandomUtil.getInstance().nextNormal(0,1);    }    double point[]=new double[exoData.length];    for (int i=0; i < exoData.length; i++) {      double sum=0.0;      for (int j1=0; j1 < exoData.length; j1++) {        sum+=cholesky.get(i,j1) * exoData[j1];      }      point[i]=sum;    }    TetradVector e=new TetradVector(point);    for (int tier=0; tier < tierOrdering.size(); tier++) {      Node node=tierOrdering.get(tier);      ConnectionFunction function=functions.get(node);      int col=tierIndices[tier];      Distribution distribution=this.distributions.get(node);      double value;      Node node1=tierOrdering.get(tier);      Node initNode=null;      int initCol=-1;      if (initialValues != null) {        initNode=initialValues.getVariable(node1.getName());        initCol=initialValues.getColumn(initNode);      }      if (_parents[col].length == 0 && initialValues != null && initCol != -1) {        int column=initialValues.getColumn(initNode);        value=initialValues.getDouble(row,column);      } else {        if (distribution == null) {          value=e.get(col);        } else {          value=distribution.nextRandom();        }      }      if (function != null) {        Node[] parents=function.getInputNodes();        double[] parentValues=new double[parents.length];        for (int j=0; j < parents.length; j++) {          Node parent=parents[j];          int index=variableNodes.indexOf(parent);          parentValues[j]=fullDataSet.getDouble(row,index);        }        value+=function.valueAt(parentValues);        if (initialValues == null && isSimulatedPositiveDataOnly() && value < 0) {          row--;          continue ROW;        }        fullDataSet.setDouble(row,col,value);      } else {        for (int j=0; j < _parents[col].length; j++) {          int parent=_parents[col][j];          double parentValue=fullDataSet.getDouble(row,parent);          double parentCoef=edgeCoef.get(parent,col);          value+=parentValue * parentCoef;        }        if (isSimulatedPositiveDataOnly() && value < 0) {          row--;          continue ROW;        }        fullDataSet.setDouble(row,col,value);      }    }  }  for (int i=0; i < fullDataSet.getNumRows(); i++) {    for (int j=0; j < fullDataSet.getNumColumns(); j++) {      fullDataSet.setDouble(i,j,fullDataSet.getDouble(i,j) + variableMeans[j]);    }  }  if (latentDataSaved) {    return fullDataSet;  } else {    return DataUtils.restrictToMeasured(fullDataSet);  }}  }
class C{  public RawPublicKeyIdentity(byte[] subjectInfo) throws GeneralSecurityException {  if (subjectInfo == null) {    throw new NullPointerException("SubjectPublicKeyInfo must not be null");  } else {    X509EncodedKeySpec spec=new X509EncodedKeySpec(subjectInfo);    this.publicKey=KeyFactory.getInstance("EC").generatePublic(spec);    createNamedInformationUri(subjectInfo);  }}  }
class C{  @Override public Trie reduce(Reduce by){  List<Trie> h=new ArrayList<>();  for (  Trie trie : tries)   h.add(trie.reduce(by));  MultiTrie2 m=new MultiTrie2(forward);  m.tries=h;  return m;}  }
class C{  private static void logAppearance(Register reg,int bbNum,int[] bbNums){  bbNums[reg.number]=bbNum;}  }
class C{  default V first(String key){  List<V> list=get(key);  if (list == null || list.size() == 0) {    return null;  } else {    return list.get(0);  }}  }
class C{  @Override public Array createArrayOf(String typeName,Object[] elements) throws SQLException {  throw unsupported("createArray");}  }
class C{  public static org.oscm.internal.types.exception.PaymentDeregistrationException convertToUp(PaymentDeregistrationException e){  return convertExceptionToUp(e,org.oscm.internal.types.exception.PaymentDeregistrationException.class);}  }
class C{  public TenantOrgRestRep create(TenantCreateParam input){  URI currentTenantId=currentId();  return create(currentTenantId,input);}  }
class C{  public static double cdf(double x,double sigma){  if (x <= 0.) {    return 0.;  }  final double xs=x / sigma;  return 1. - Math.exp(-.5 * xs * xs);}  }
class C{  public String div(String value){  checkNumericString(value);  BigDecimal divisor=new BigDecimal(value);  return amount.divide(divisor,RoundingMode.HALF_EVEN).toString();}  }
class C{  private static <ObjectType>void generate(final TreeNode<ObjectType> apiParent,final com.google.security.zynamics.zylib.types.trees.ITreeNode<ObjectType> nativeNode){  for (  final com.google.security.zynamics.zylib.types.trees.ITreeNode<ObjectType> child : nativeNode.getChildren()) {    final TreeNode<ObjectType> newChild=new TreeNode<ObjectType>(child.getObject());    TreeNode.link(apiParent,newChild);    generate(newChild,child);  }}  }
class C{  protected int doOneIteration(WeightVector w,SLProblem problem,int epoch,int count,SLParameters params) throws Exception {  int numExamples=problem.size();  epochUpdateCount=0;  problem.shuffle(random);  for (int exampleId=0; exampleId < numExamples; exampleId++) {    IInstance example=problem.instanceList.get(exampleId);    IStructure gold=problem.goldStructureList.get(exampleId);    IStructure prediction=null;    double loss=0;    prediction=this.inference.getLossAugmentedBestStructure(w,example,gold);    loss=this.inference.getLoss(example,gold,prediction);    assert prediction != null;    IFeatureVector goldFeatures=featureGenerator.getFeatureVector(example,gold);    IFeatureVector predictedFeatures=featureGenerator.getFeatureVector(example,prediction);    IFeatureVector update=goldFeatures.difference(predictedFeatures);    double loss_term=loss - w.dotProduct(update);    double learningRate=getLearningRate(epoch,count,params);    w.scale(1.0f - learningRate);    w.addSparseFeatureVector(update,2 * learningRate * params.C_FOR_STRUCTURE* loss_term);    epochUpdateCount++;    count++;  }  return count;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.635 -0500",hash_original_method="56685A1560151077841543B2BC810F93",hash_generated_method="438653CD56BAA77611CAFBBADC3F6DC5") @DSSafe(DSCat.SAFE_LIST) public void removeLast(){  if (hlist.size() != 0)   hlist.remove(hlist.size() - 1);}  }
class C{  public final void add(GMatrix m1,GMatrix m2){  int i, j;  if (m2.nRow != m1.nRow) {    throw new MatrixSizeException();  }  if (m2.nCol != m1.nCol) {    throw new MatrixSizeException();  }  if (nCol != m1.nCol || nRow != m1.nRow) {    throw new MatrixSizeException();  }  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=m1.values[i][j] + m2.values[i][j];    }  }}  }
class C{  public static final Document parse(InputSource xml,InputSource validator,boolean isHtml) throws SAXException, IOException {  if (!isHtml) {    DocumentBuilderFactory factory=null;    try {      factory=new DocumentBuilderFactoryImpl();    } catch (    Throwable t) {      factory=DocumentBuilderFactory.newInstance();    }    if (validator == null) {      XMLUtil.setAttributeEL(factory,XMLConstants.NON_VALIDATING_DTD_EXTERNAL,Boolean.FALSE);      XMLUtil.setAttributeEL(factory,XMLConstants.NON_VALIDATING_DTD_GRAMMAR,Boolean.FALSE);    } else {      XMLUtil.setAttributeEL(factory,XMLConstants.VALIDATION_SCHEMA,Boolean.TRUE);      XMLUtil.setAttributeEL(factory,XMLConstants.VALIDATION_SCHEMA_FULL_CHECKING,Boolean.TRUE);    }    factory.setNamespaceAware(true);    factory.setValidating(validator != null);    try {      DocumentBuilder builder=factory.newDocumentBuilder();      builder.setEntityResolver(new XMLEntityResolverDefaultHandler(validator));      builder.setErrorHandler(new ThrowingErrorHandler(true,true,false));      return builder.parse(xml);    } catch (    ParserConfigurationException e) {      throw new SAXException(e);    }  }  XMLReader reader=new Parser();  reader.setFeature(Parser.namespacesFeature,true);  reader.setFeature(Parser.namespacePrefixesFeature,true);  try {    Transformer transformer=TransformerFactory.newInstance().newTransformer();    DOMResult result=new DOMResult();    transformer.transform(new SAXSource(reader,xml),result);    return XMLUtil.getDocument(result.getNode());  } catch (  Exception e) {    throw new SAXException(e);  }}  }
class C{  private void calculateIntersectPoints(){  intersectPoints.clear();  if (center.x - menuBounds.left < expandedRadius) {    int dy=(int)Math.sqrt(Math.pow(expandedRadius,2) - Math.pow(center.x - menuBounds.left,2));    if (center.y - dy > menuBounds.top) {      intersectPoints.add(new Point(menuBounds.left,center.y - dy));    }    if (center.y + dy < menuBounds.bottom) {      intersectPoints.add(new Point(menuBounds.left,center.y + dy));    }  }  if (center.y - menuBounds.top < expandedRadius) {    int dx=(int)Math.sqrt(Math.pow(expandedRadius,2) - Math.pow(center.y - menuBounds.top,2));    if (center.x + dx < menuBounds.right) {      intersectPoints.add(new Point(center.x + dx,menuBounds.top));    }    if (center.x - dx > menuBounds.left) {      intersectPoints.add(new Point(center.x - dx,menuBounds.top));    }  }  if (menuBounds.right - center.x < expandedRadius) {    int dy=(int)Math.sqrt(Math.pow(expandedRadius,2) - Math.pow(menuBounds.right - center.x,2));    if (center.y - dy > menuBounds.top) {      intersectPoints.add(new Point(menuBounds.right,center.y - dy));    }    if (center.y + dy < menuBounds.bottom) {      intersectPoints.add(new Point(menuBounds.right,center.y + dy));    }  }  if (menuBounds.bottom - center.y < expandedRadius) {    int dx=(int)Math.sqrt(Math.pow(expandedRadius,2) - Math.pow(menuBounds.bottom - center.y,2));    if (center.x + dx < menuBounds.right) {      intersectPoints.add(new Point(center.x + dx,menuBounds.bottom));    }    if (center.x - dx > menuBounds.left) {      intersectPoints.add(new Point(center.x - dx,menuBounds.bottom));    }  }  int size=intersectPoints.size();  if (size == 0) {    fromAngle=0;    toAngle=360;    return;  }  int indexA=size - 1;  double maxAngle=arcAngle(center,intersectPoints.get(0),intersectPoints.get(indexA),menuBounds,expandedRadius);  for (int i=0; i < size - 1; i++) {    Point a=intersectPoints.get(i);    Point b=intersectPoints.get(i + 1);    double angle=arcAngle(center,a,b,menuBounds,expandedRadius);    Point midnormalPoint=findMidnormalPoint(center,a,b,menuBounds,expandedRadius);    int pointerIndex=i;    int endIndex=indexA + 1;    if (!isClockwise(center,a,midnormalPoint)) {      int tmpIndex=pointerIndex;      pointerIndex=endIndex;      endIndex=tmpIndex;    }    if (pointerIndex == intersectPoints.size() - 1) {      pointerIndex=0;    } else {      pointerIndex++;    }    if (pointerIndex == endIndex && angle > maxAngle) {      indexA=i;      maxAngle=angle;    }  }  Point a=intersectPoints.get(indexA);  Point b=intersectPoints.get(indexA + 1 >= size ? 0 : indexA + 1);  Point midnormalPoint=findMidnormalPoint(center,a,b,menuBounds,expandedRadius);  Point x=new Point(menuBounds.right,center.y);  if (!isClockwise(center,a,midnormalPoint)) {    Point tmp=a;    a=b;    b=tmp;  }  fromAngle=pointAngleOnCircle(center,a,x);  toAngle=pointAngleOnCircle(center,b,x);  toAngle=toAngle <= fromAngle ? 360 + toAngle : toAngle;}  }
class C{  private boolean containsRepSetUID(List<ReplicationSetUID> rsetUids,ReplicationSetUID repSetUID){  for (  ReplicationSetUID rsetUid : rsetUids) {    if (rsetUid.getId() == repSetUID.getId()) {      return true;    }  }  return false;}  }
class C{  public boolean userCanEditGroup(int connectedUserId,int GroupId,String entidad) throws Exception {  boolean can=false;  int mgrGroup=ISicresAdminDefsKeys.NULL_ID;  try {    mgrGroup=this.getGroupMgrId(GroupId,entidad);    can=hasUserGroupAuth(connectedUserId,USER_ACTION_ID_EDIT,mgrGroup,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public static Directories createDirectories(){  return new DirectoriesImpl();}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  public void dispose(){  m_debuggerProvider.removeListener(m_debuggerProviderListener);  for (  final IDebugger debugger : m_debuggerProvider) {    removeListeners(debugger);  }}  }
class C{  public static <I,A,SEP>Parser<I,IList<A>> endBy1(Parser<I,A> p,Parser<I,SEP> sep){  return many1(bind(p,null));}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.063 -0400",hash_original_method="14210D7CE620CE82255795453724F2AF",hash_generated_method="46100BDF66941A70DD32A797BAC81999") @Override public void write(byte[] b) throws IOException {}  }
class C{  private static double GetDoubleField(JNIEnvironment env,int objJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetDoubleField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getDoubleValueUnchecked(obj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0.0;  }}  }
class C{  public static String toFullClassName(String symbolicName){  if (uriToClassNameMap.containsKey(symbolicName))   return uriToClassNameMap.get(symbolicName);  return symbolicName.replace("http://opcfoundation.org/UA/","org.opcfoundation.ua.core.");}  }
class C{  public int next(){  if (_currentNode == DTM.NULL) {    return DTM.NULL;  }  int node=_currentNode;  int eType;  int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    do {      node=_nextsib(node);    } while (node != DTM.NULL && _exptype(node) != nodeType);  } else {    while ((node=_nextsib(node)) != DTM.NULL) {      eType=_exptype(node);      if (eType < DTM.NTYPES) {        if (eType == nodeType) {          break;        }      } else       if (m_expandedNameTable.getType(eType) == nodeType) {        break;      }    }  }  _currentNode=node;  return (_currentNode == DTM.NULL) ? DTM.NULL : returnNode(makeNodeHandle(_currentNode));}  }
class C{  protected MatchResult checkConsistent(Variable field,Variable value,BindingSet bindingSet){  bindingSet=addOrCheckDefinition(fieldVarName,field,bindingSet);  if (bindingSet == null) {    return null;  }  bindingSet=addOrCheckDefinition(valueVarName,value,bindingSet);  if (bindingSet == null) {    return null;  }  return new MatchResult(this,bindingSet);}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public static void grantUriPermissions(Context context,Intent intent,int permissions){  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.KITKAT) {    List<ResolveInfo> resInfoList=context.getPackageManager().queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);    for (    ResolveInfo resolveInfo : resInfoList) {      String packageName=resolveInfo.activityInfo.packageName;      context.grantUriPermission(packageName,intent.getData(),permissions);    }  } else {    intent.addFlags(permissions);  }}  }
class C{  public WallpaperBackupHelper(Context context,String[] files,String[] keys){  super(context);  mContext=context;  mFiles=files;  mKeys=keys;  WallpaperManager wpm;  wpm=(WallpaperManager)context.getSystemService(Context.WALLPAPER_SERVICE);  mDesiredMinWidth=(double)wpm.getDesiredMinimumWidth();  mDesiredMinHeight=(double)wpm.getDesiredMinimumHeight();  if (mDesiredMinWidth <= 0 || mDesiredMinHeight <= 0) {    WindowManager wm=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);    Display d=wm.getDefaultDisplay();    Point size=new Point();    d.getSize(size);    mDesiredMinWidth=size.x;    mDesiredMinHeight=size.y;  }  if (DEBUG) {    Slog.d(TAG,"dmW=" + mDesiredMinWidth + " dmH="+ mDesiredMinHeight);  }}  }
class C{  public long readVarLong(){  long x=data[pos++];  if (x >= 0) {    return x;  }  x&=0x7f;  for (int s=7; ; s+=7) {    long b=data[pos++];    x|=(b & 0x7f) << s;    if (b >= 0) {      return x;    }  }}  }
class C{  public void spin(){  lastTimeAnimated=SystemClock.uptimeMillis();  isSpinning=true;  invalidate();}  }
class C{  private static String controlAFStateToString(int controlAFState){switch (controlAFState) {case CaptureResult.CONTROL_AF_STATE_INACTIVE:    return "inactive";case CaptureResult.CONTROL_AF_STATE_PASSIVE_SCAN:  return "passive_scan";case CaptureResult.CONTROL_AF_STATE_PASSIVE_FOCUSED:return "passive_focused";case CaptureResult.CONTROL_AF_STATE_ACTIVE_SCAN:return "active_scan";case CaptureResult.CONTROL_AF_STATE_FOCUSED_LOCKED:return "focus_locked";case CaptureResult.CONTROL_AF_STATE_NOT_FOCUSED_LOCKED:return "not_focus_locked";case CaptureResult.CONTROL_AF_STATE_PASSIVE_UNFOCUSED:return "passive_unfocused";default :return "unknown";}}  }
class C{  private boolean tryIncrement(AtomicInteger counter,int max){  while (true) {    int count=counter.get();    if (count >= max && max != 0)     return false;    if (counter.compareAndSet(count,count + 1))     return true;  }}  }
class C{  public void addFirst(E e){  if (e == null)   throw new NullPointerException("e == null");  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  public void mergeOptionsFromJs(JSONObject jsOptions) throws JSONException {  if (jsOptions.has(XmlTags.CONFIG_FILE_TAG)) {    String configUrl=jsOptions.getString(XmlTags.CONFIG_FILE_TAG);    if (!TextUtils.isEmpty(configUrl)) {      setConfigUrl(configUrl);    }  }  if (jsOptions.has(XmlTags.AUTO_INSTALLATION_TAG)) {    allowUpdatesAutoInstall(jsOptions.getBoolean(XmlTags.AUTO_INSTALLATION_TAG));  }  if (jsOptions.has(XmlTags.AUTO_DOWNLOAD_TAG)) {    allowUpdatesAutoDownload(jsOptions.getBoolean(XmlTags.AUTO_DOWNLOAD_TAG));  }}  }
class C{  public AuthenticationException(){  super();}  }
class C{  private Color createColor(Display display,LineType lineType){  RGB rgb=getRGB(lineType);  return new Color(display,rgb);}  }
class C{  public static Vector listToVector(List<Double> list){  if (list.size() == 3) {    return new Vector(list.get(0),list.get(1),list.get(2));  }  return new Vector(0,0,0);}  }
class C{  public static String rjust(String str,int columnWidth){  return String.format("%" + columnWidth + "s",str);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public final Vec2D normalizeTo(float len){  float mag=(float)Math.sqrt(x * x + y * y);  if (mag > 0) {    mag=len / mag;    x*=mag;    y*=mag;  }  return this;}  }
class C{  public void addSliderApplyActionListener(ActionListener al){  sliderApply.addActionListener(al);}  }
class C{  private int init(File f) throws IOException {  Runtime rt=Runtime.getRuntime();  long prePhraseTableLoadMemUsed=rt.totalMemory() - rt.freeMemory();  final long startTime=System.nanoTime();  LineNumberReader reader=IOTools.getReaderFromFile(f);  int numScores=-1;  for (String line; (line=reader.readLine()) != null; ) {    List<List<String>> fields=StringUtils.splitFieldsFast(line,CompiledPhraseTable.FIELD_DELIM);    assert fields.size() == 5 : String.format("phrase table line %d has %d fields",reader.getLineNumber(),fields.size());    Sequence<IString> source=IStrings.toIStringSequence(fields.get(0));    Sequence<IString> target=IStrings.toIStringSequence(fields.get(1));    String targetConstellation=StringUtils.join(fields.get(3));    List<String> scoreList=fields.get(4);    if (numScores < 0) {      numScores=scoreList.size();    } else     if (numScores != scoreList.size()) {      throw new RuntimeException(String.format("Error (line %d): Each entry must have exactly the same number of translation\n" + "scores per line. Prior entries had %d, while the current entry has %d:",reader.getLineNumber(),numScores,scoreList.size()));    }    float[] scores;    try {      scores=IOTools.stringListToNumeric(scoreList);    } catch (    NumberFormatException e) {      e.printStackTrace();      throw new RuntimeException(String.format("Number format error on line %d",reader.getLineNumber()));    }    if (targetConstellation.equals("")) {      addEntry(source,target,null,scores);    } else {      addEntry(source,target,PhraseAlignment.getPhraseAlignment(targetConstellation),scores);    }    if (source.size() > longestSourcePhrase) {      longestSourcePhrase=source.size();    }    if (target.size() > longestTargetPhrase) {      longestTargetPhrase=target.size();    }  }  reader.close();  long postPhraseTableLoadMemUsed=rt.totalMemory() - rt.freeMemory();  double elapsedTime=((double)System.nanoTime() - startTime) / 1e9;  System.err.printf("Done loading phrase table: %s (mem used: %d MiB time: %.3f s)%n",f.getAbsolutePath(),(postPhraseTableLoadMemUsed - prePhraseTableLoadMemUsed) / (1024 * 1024),elapsedTime);  System.err.println("Longest foreign phrase: " + longestSourcePhrase);  return numScores;}  }
class C{  public BoxPlot(DataSource data){  setLegend(new BoxPlotLegend(this));  ((XYPlotArea2D)getPlotArea()).setMajorGridX(false);  getAxisRenderer(AXIS_X).setTickSpacing(1.0);  getAxisRenderer(AXIS_X).setMinorTicksVisible(false);  getAxisRenderer(AXIS_X).setIntersection(-Double.MAX_VALUE);  getAxisRenderer(AXIS_Y).setIntersection(-Double.MAX_VALUE);  add(data);  autoscaleAxes();}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof BigInteger) {    this.put(key,((BigInteger)value).add(BigInteger.ONE));  } else   if (value instanceof BigDecimal) {    this.put(key,((BigDecimal)value).add(BigDecimal.ONE));  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  public final <R>Flux<R> publish(Function<? super Flux<T>,? extends Publisher<? extends R>> transform){  return publish(transform,QueueSupplier.SMALL_BUFFER_SIZE);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  double x, y;  double z;  int intensity;  byte classValue, numReturns, returnNum;  int a, n;  int progress;  int numPoints;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      long oneHundredthTotal=las.getNumPointRecords() / 100;      File file=new File(pointFiles[j].replace(".las",".txt"));      if (file.exists()) {        file.delete();      }      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      n=0;      progress=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          classValue=point.getClassification();          returnNum=point.getReturnNumber();          numReturns=point.getNumberOfReturns();          out.println((a + 1) + " " + x+ " "+ y+ " "+ z+ " "+ intensity+ " "+ classValue+ " "+ returnNum+ " "+ numReturns);          numPoints++;        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);        }      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DigitalIn createDigitalIn(boolean state){  return new SimpleDigitalIn(state);}  }
class C{  @Override public final String readUTF() throws IOException {  return dis.readUTF();}  }
class C{  public DimensionalComparator(int d){  if (d < 1) {    throw new IllegalArgumentException("Dimensional Comparator must have d>=1");  }  this.d=d;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public void testSchemaNodeProcessing(RangeKeyVal node,String type){  TestSink rangeSink=new TestSink();  node.range.setSink(rangeSink);  int numtuples=1000;  if (type.equals("integer")) {    for (int i=-10; i < numtuples; i++) {      node.data.process(new KeyValPair<String,Integer>("a",i));    }  } else   if (type.equals("double")) {    for (int i=-10; i < numtuples; i++) {      node.data.process(new KeyValPair<String,Double>("a",(double)i));    }  } else   if (type.equals("long")) {    for (int i=-10; i < numtuples; i++) {      node.data.process(new KeyValPair<String,Long>("a",(long)i));    }  } else   if (type.equals("short")) {    for (short i=-10; i < numtuples; i++) {      node.data.process(new KeyValPair<String,Short>("a",i));    }  } else   if (type.equals("float")) {    for (int i=-10; i < numtuples; i++) {      node.data.process(new KeyValPair<String,Float>("a",(float)i));    }  }  node.endWindow();  Assert.assertEquals("high was ",999.0,rangeSink.high,0);  Assert.assertEquals("low was ",-10.0,rangeSink.low,0);  log.debug(String.format("\nTested %d tuples",numtuples));}  }
class C{  public double det(){  return new LUDecomposition(this).det();}  }
class C{  public TestChromosome addTest(TestCase test){  TestChromosome c=new TestChromosome();  c.setTestCase(test);  addTest(c);  return c;}  }
class C{  private void testLotsOfTables() throws SQLException {  deleteDb("tempTables");  Connection conn=getConnection("tempTables");  Statement stat=conn.createStatement();  for (int i=0; i < 100000; i++) {    stat.executeUpdate("create local temporary table t(id int)");    stat.executeUpdate("drop table t");  }  conn.close();}  }
class C{  protected double[] computeLocalUsingPreviousObservations(double states1[][],double states2[][],boolean isOurPreviousObservations){  double mi=0.0;  int timeSteps=states1.length;  double[] localMi=new double[timeSteps];  double prob1, prob2, probJoint;  for (int b=0; b < timeSteps; b++) {    if (isOurPreviousObservations) {      prob1=mvkeSource.getProbability(states1[b],b);      prob2=mvkeDest.getProbability(states2[b],b);      probJoint=mvkeJoint.getProbability(states1[b],states2[b],b);    } else {      prob1=mvkeSource.getProbability(states1[b]);      prob2=mvkeDest.getProbability(states2[b]);      probJoint=mvkeJoint.getProbability(states1[b],states2[b]);    }    double logTerm=0.0;    localMi[b]=0.0;    if (probJoint > 0.0) {      logTerm=probJoint / (prob1 * prob2);      localMi[b]=Math.log(logTerm) / Math.log(2.0);    }    mi+=localMi[b];    if (debug) {      System.out.printf("%d: (%.5f, %.5f, %.5f) %.5f -> %.5f -> %.5f\n",b,prob1,prob2,probJoint,logTerm,localMi[b],mi);    }  }  lastAverage=mi / (double)totalObservations;  miComputed=true;  return localMi;}  }
class C{  public static String arrayToString(Object[] array){  String result="";  if (array == null) {    result="<null>";  } else {    for (    Object element : array) {      if (element == null) {        result+=" ?";      } else {        result+=" " + element;      }    }  }  return result;}  }
class C{  public boolean onMove(int oldPosition,int newPosition){  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static FunctionAlias newInstance(Schema schema,int id,String name,String javaClassMethod,boolean force,boolean bufferResultSetToLocalTemp){  FunctionAlias alias=new FunctionAlias(schema,id,name);  int paren=javaClassMethod.indexOf('(');  int lastDot=javaClassMethod.lastIndexOf('.',paren < 0 ? javaClassMethod.length() : paren);  if (lastDot < 0) {    throw DbException.get(ErrorCode.SYNTAX_ERROR_1,javaClassMethod);  }  alias.className=javaClassMethod.substring(0,lastDot);  alias.methodName=javaClassMethod.substring(lastDot + 1);  alias.bufferResultSetToLocalTemp=bufferResultSetToLocalTemp;  alias.init(force);  return alias;}  }
class C{  public RequestHandle patch(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return patch(null,url,params,responseHandler);}  }
class C{  public static void main(String args[]) throws FileNotFoundException, IOException {  int N=Integer.parseInt(args[1]);  double p=Double.parseDouble(args[2]);  long seed=(long)(Math.random() * 1000);  if (args.length > 3)   seed=Long.parseLong(args[3]);  ErdosRenyiGenerator<SparseGraph,SparseVertex,SparseEdge> generator=new ErdosRenyiGenerator<SparseGraph,SparseVertex,SparseEdge>(new SparseGraphBuilder());  generator.setRandomDrawMode(true);  Graph g=generator.generate(N,p,seed);  GraphMLWriter writer=new GraphMLWriter();  writer.write(g,args[0]);}  }
class C{  public void testDivideBigDecimalScaleMathContextHALF_DOWN(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.HALF_DOWN;  MathContext mc=new MathContext(precision,rm);  String c="2.77923185514690367475E+26";  int resScale=-6;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static ImageBgPanel createPanel_style1(){  return createPanel_style1(new Insets(8,0,26,10));}  }
class C{  public UnsortedWrapper(final T content){  this.content=content;}  }
class C{  boolean implies(Object other){  if (other instanceof PreferencesEntry) {    PreferencesEntry temp=(PreferencesEntry)other;    return (equals(temp) || p.getName().equals(temp.p.getName()) && oid == null);  } else {    return false;  }}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ActiveStateReferenceExpression_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_ActiveStateReferenceExpression_value_feature","_UI_ActiveStateReferenceExpression_type"),StextPackage.Literals.ACTIVE_STATE_REFERENCE_EXPRESSION__VALUE,true,false,true,null,null,null));}  }
class C{  public void disconnect(){  try {    if (null != mBtService) {      mBtService.stop();      mBtService=null;    }    if (null != mAdapter) {      mAdapter=null;    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public InlineQueryResultGif.InlineQueryResultGifBuilder gifHeight(int gifHeight){  this.gif_height=gifHeight;  return this;}  }
class C{  private void expungeStaleEntries(){  Entry<K,V> e;  while ((e=(Entry<K,V>)queue.poll()) != null) {    int h=e.hash;    int i=indexFor(h,table.length);    Entry<K,V> prev=table[i];    Entry<K,V> p=prev;    while (p != null) {      Entry<K,V> next=p.next;      if (p == e) {        if (prev == e)         table[i]=next; else         prev.next=next;        e.next=null;        e.value=null;        size--;        break;      }      prev=p;      p=next;    }  }}  }
class C{  @Override public String toString(){  StringBuffer retval=new StringBuffer();  appendErrors(retval,requestErrors);  appendErrors(retval,dataErrors);  return retval.toString();}  }
class C{  public void calculateAddress(DataSpace dsp){  if ((address.type & Op.MEM) != 0) {    cAddress=new CalculatedAddress(dsp);    cAddress.readFromString(arg);    address.address=cAddress.calculateEffectiveAddress(true);    usedLabels.addAll(cAddress.usedLabels);  }  if ((address.type & Op.FPUREG) != 0) {    address.address=dsp.fpu.getAddress(arg);  }}  }
class C{  public boolean decodeTextString(int startIndex){  int index=startIndex;  while (wspData[index] != 0) {    index++;  }  dataLength=index - startIndex + 1;  if (wspData[startIndex] == 127) {    stringValue=new String(wspData,startIndex + 1,dataLength - 2);  } else {    stringValue=new String(wspData,startIndex,dataLength - 1);  }  return true;}  }
class C{  public CSSChildSelector(Selector ancestor,SimpleSelector simple){  super(ancestor,simple);}  }
class C{  protected void pause() throws Exception {  if (stopRequested) {    throw new Exception("Sort Algorithm");  }  parent.pause(parent.h1,parent.h2);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (params2 == null) {    params2=new Parameters();  }}  }
class C{  public BloomFilter2(final int n,final int d){  this.d=d;  final long wantedNumberOfBits=(long)Math.ceil(n * (d / NATURAL_LOG_OF_2));  if (wantedNumberOfBits > MAX_BITS)   throw new IllegalArgumentException("The wanted number of bits (" + wantedNumberOfBits + ") is larger than "+ MAX_BITS);  bits=new long[(int)((wantedNumberOfBits + Long.SIZE - 1) / Long.SIZE)];  m=bits.length * (long)Long.SIZE;  if (DEBUG)   System.err.println("Number of bits: " + m);  final Random rand=new Random();  weight=new int[d][];  init=new int[d];  for (int i=0; i < d; i++) {    weight[i]=new int[NUMBER_OF_WEIGHTS];    init[i]=rand.nextInt();    for (int j=0; j < NUMBER_OF_WEIGHTS; j++)     weight[i][j]=rand.nextInt();  }}  }
class C{  public ErrorNotification(String userMessage,Throwable e){  super(e);  this.userMessage=userMessage;  this.seqno=-1;  this.eventId=null;}  }
class C{  public static boolean isInArea(Coord coord,Coord[] area){  return (getCompassQuarter(area[0],coord) == 1 && getCompassQuarter(area[1],coord) == 3);}  }
class C{  public static Matrix sqrt(Matrix A){  Matrix out=new Matrix(A.getRowDimension(),A.getColumnDimension());  for (int i=0; i < A.getRowDimension(); i++)   for (int j=0; j < A.getColumnDimension(); j++)   out.set(i,j,Math.sqrt(A.get(i,j)));  return out;}  }
class C{  public void myMethod(){  return "";}  }
class C{  private void appendGeometryTaggedText(Geometry geometry,int level,Writer writer) throws IOException {  indent(level,writer);  if (geometry instanceof Point) {    Point point=(Point)geometry;    appendPointTaggedText(point.getCoordinate(),level,writer,point.getPrecisionModel());  } else   if (geometry instanceof LinearRing) {    appendLinearRingTaggedText((LinearRing)geometry,level,writer);  } else   if (geometry instanceof LineString) {    appendLineStringTaggedText((LineString)geometry,level,writer);  } else   if (geometry instanceof Polygon) {    appendPolygonTaggedText((Polygon)geometry,level,writer);  } else   if (geometry instanceof MultiPoint) {    appendMultiPointTaggedText((MultiPoint)geometry,level,writer);  } else   if (geometry instanceof MultiLineString) {    appendMultiLineStringTaggedText((MultiLineString)geometry,level,writer);  } else   if (geometry instanceof MultiPolygon) {    appendMultiPolygonTaggedText((MultiPolygon)geometry,level,writer);  } else   if (geometry instanceof GeometryCollection) {    appendGeometryCollectionTaggedText((GeometryCollection)geometry,level,writer);  } else {    Assert.shouldNeverReachHere("Unsupported Geometry implementation:" + geometry.getClass());  }}  }
class C{  public static void processNSDecls(SerializationHandler handler,int src,int type,DTM dtm) throws TransformerException {  try {    if (type == DTM.ELEMENT_NODE) {      for (int namespace=dtm.getFirstNamespaceNode(src,true); DTM.NULL != namespace; namespace=dtm.getNextNamespaceNode(src,namespace,true)) {        String prefix=dtm.getNodeNameX(namespace);        String desturi=handler.getNamespaceURIFromPrefix(prefix);        String srcURI=dtm.getNodeValue(namespace);        if (!srcURI.equalsIgnoreCase(desturi)) {          handler.startPrefixMapping(prefix,srcURI,false);        }      }    } else     if (type == DTM.NAMESPACE_NODE) {      String prefix=dtm.getNodeNameX(src);      String desturi=handler.getNamespaceURIFromPrefix(prefix);      String srcURI=dtm.getNodeValue(src);      if (!srcURI.equalsIgnoreCase(desturi)) {        handler.startPrefixMapping(prefix,srcURI,false);      }    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public int compare(File as,File bs){  return as.compareTo(bs);}  }
class C{  @Override public int handleTelegram(char[] buffer){  int cnt=0;  log.debug("RX:" + ProtUtils.hexDumpBuffer(buffer));  if (checkTelegram(buffer)) {    int cmd=getParamInt(FLD_ID_CMD,buffer);    blockCounter=(char)getParamInt(FLD_ID_BLKCNT,buffer).intValue();    char[] payLoad=getPayLoad(buffer);switch (cmd) {case ID_GRPINFO_HEAD:      int fldId=0;    for (int i=0; i < payLoad.length; ) {      int dId=(int)payLoad[i];      Vector<EcuDataItem> pidItems=itms.getPidDataItems(ID_GRPINFO_DATA,dId);      if (pidItems != null && pidItems.size() > 0) {        EcuDataItem currItm;        if (currGrpItems.size() > fldId) {          currItm=currGrpItems.get(fldId);        } else {          currItm=(EcuDataItem)pidItems.get(0).clone();          currItm.pid=(int)getCurrDataGroup();          currItm.ofs+=fldId;          currItm.pv.put(EcuDataPv.FID_PID,Integer.valueOf(currItm.pid));          currItm.pv.put(EcuDataPv.FID_OFS,Integer.valueOf(currItm.ofs));          while (currGrpItems.size() <= fldId)           currGrpItems.add(null);          currGrpItems.set(fldId,currItm);        }        int numTblChrs=payLoad[i + 2];        if (currItm.cnv[0] instanceof VagConversion) {          ((VagConversion)currItm.cnv[0]).setMetaNw(payLoad[i + 1]);          if (numTblChrs != 0) {            ((VagConversion)currItm.cnv[0]).setMetaTblValues(String.valueOf(payLoad,i + 3,numTblChrs).toCharArray());          }        }        i+=3 + numTblChrs;        fldId++;      }    }  showGroupItems(getCurrDataGroup());requestGroupData(getCurrDataGroup());break;case ID_GRPINFO_DATA:if (currGrpItems == null || currGrpItems.size() < BLK_NUM_ITEMS) {log.error(String.format("Missing/Incomplete Metadata for GRP:%d",(int)getCurrDataGroup()));}{for (int i=0; i < Math.min(payLoad.length,currGrpItems.size()); i++) {EcuDataItem currItm=currGrpItems.get(i);if (currItm != null) {currItm.updatePvFomBuffer(payLoad);} else {log.error(String.format("Data w/o meta GRP:%d, ITM:%d",(int)getCurrDataGroup(),i));}}}if (service == SVC_READ_DATA_GRP && getCurrDataGroup() == getSelectedDataGroup()) {requestGroupData(getCurrDataGroup());} else {requestACK();}break;case ID_GRPREAD_DATA:for (int i=0; i < payLoad.length; i+=3) {int dId=(int)payLoad[i];Vector<EcuDataItem> pidItems=itms.getPidDataItems(cmd,dId);if (pidItems != null) {Iterator<EcuDataItem> it=pidItems.iterator();while (it.hasNext()) {EcuDataItem currItm=(EcuDataItem)it.next().clone();currItm.pid=(int)getCurrDataGroup();currItm.ofs+=i / 3;currItm.pv.put(EcuDataPv.FID_PID,Integer.valueOf(currItm.pid));currItm.pv.put(EcuDataPv.FID_OFS,Integer.valueOf(currItm.ofs));while (currGrpItems.size() < (i / 3)) currGrpItems.add(null);currGrpItems.set(i / 3,currItm);currItm.updatePvFomBuffer(Arrays.copyOfRange(payLoad,i + 1,i + 3));}} else {log.warn("Unknown data ID:" + dId);}}if (service == SVC_READ_DATA_GRP && getCurrDataGroup() == getSelectedDataGroup()) {requestGroupData(getCurrDataGroup());} else {requestACK();}break;case CMD_ACK:switch (service) {case SVC_READ_DATA_ALL:requestGroupData(getNextDataGroup());break;case SVC_READ_DATA_GRP:setCurrDataGroup(getSelectedDataGroup());requestGroupData(getCurrDataGroup());break;case SVC_READ_DFCS:tCodes.clear();setNumCodes(0);requestDFCs();break;case SVC_CLEAR_DFCS:requestClearDFCs();setService(SVC_READ_DFCS);break;case SVC_SHUTDOWN:requestEndComm();setService(SVC_FINISHED);break;case SVC_NONE:default :requestACK();break;}break;case ID_NODATA:log.info(String.format("NODATA: Group:%d -> remove",(int)getCurrDataGroup()));knownGrpItems.remove(Integer.valueOf(getCurrDataGroup()));if (currDataGroup == 0) {savePreset();}requestACK();break;case ID_DFC_DATA:int nCodes=numCodes;for (int i=0; i < payLoad.length; i+=3) {int dfcNum=getParamInt(i,2,payLoad);int dfcStat=getParamInt(i + 2,1,payLoad);EcuCodeItem code=knownCodes.get(dfcNum);if (code == null) {code=new EcuCodeItem(dfcNum,"Unknown Fault code");}code.put(EcuCodeItem.FID_STATUS,Integer.valueOf(dfcStat));tCodes.put(dfcNum,code);if (dfcNum != 0xFFFF) {nCodes++;nCodes|=dfcStat & 0x80;}}setNumCodes(nCodes);setService(SVC_NONE);requestACK();break;case ID_ASCII_DATA:EcuDataPv pv=new EcuDataPv();pv.put(EcuDataPv.FID_DESCRIPT,"ID");pv.put(EcuDataPv.FID_VALUE,String.valueOf(payLoad));VidPvs.put(VidPvs.size(),pv);if (VidPvs.size() == 1) loadPreset();requestACK();break;default :requestACK();break;}cnt++;}return (cnt);}  }
class C{  public int executeQuery(String jpql){  throwReadOnly();  return 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void pushBidirectionalVipRoutes(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx,IPClient client,LBMember member){  IDevice srcDevice=null;  IDevice dstDevice=null;  Collection<? extends IDevice> allDevices=deviceManagerService.getAllDevices();  for (  IDevice d : allDevices) {    for (int j=0; j < d.getIPv4Addresses().length; j++) {      if (srcDevice == null && client.ipAddress.equals(d.getIPv4Addresses()[j]))       srcDevice=d;      if (dstDevice == null && member.address == d.getIPv4Addresses()[j].getInt()) {        dstDevice=d;        member.macString=dstDevice.getMACAddressString();      }      if (srcDevice != null && dstDevice != null)       break;    }  }  if (srcDevice == null || dstDevice == null)   return;  DatapathId srcIsland=topologyService.getOpenflowDomainId(sw.getId());  if (srcIsland == null) {    log.debug("No openflow island found for source {}/{}",sw.getId().toString(),pi.getInPort());    return;  }  boolean on_same_island=false;  boolean on_same_if=false;  for (  SwitchPort dstDap : dstDevice.getAttachmentPoints()) {    DatapathId dstSwDpid=dstDap.getSwitchDPID();    DatapathId dstIsland=topologyService.getOpenflowDomainId(dstSwDpid);    if ((dstIsland != null) && dstIsland.equals(srcIsland)) {      on_same_island=true;      if ((sw.getId().equals(dstSwDpid)) && ((pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT)).equals(dstDap.getPort()))) {        on_same_if=true;      }      break;    }  }  if (!on_same_island) {    if (log.isTraceEnabled()) {      log.trace("No first hop island found for destination " + "device {}, Action = flooding",dstDevice);    }    return;  }  if (on_same_if) {    if (log.isTraceEnabled()) {      log.trace("Both source and destination are on the same " + "switch/port {}/{}, Action = NOP",sw.toString(),pi.getInPort());    }    return;  }  SwitchPort[] srcDaps=srcDevice.getAttachmentPoints();  Arrays.sort(srcDaps,clusterIdComparator);  SwitchPort[] dstDaps=dstDevice.getAttachmentPoints();  Arrays.sort(dstDaps,clusterIdComparator);  int iSrcDaps=0, iDstDaps=0;  while ((iSrcDaps < srcDaps.length) && (iDstDaps < dstDaps.length)) {    SwitchPort srcDap=srcDaps[iSrcDaps];    SwitchPort dstDap=dstDaps[iDstDaps];    DatapathId srcCluster=topologyService.getOpenflowDomainId(srcDap.getSwitchDPID());    DatapathId dstCluster=topologyService.getOpenflowDomainId(dstDap.getSwitchDPID());    int srcVsDest=srcCluster.compareTo(dstCluster);    if (srcVsDest == 0) {      if (!srcDap.equals(dstDap) && (srcCluster != null) && (dstCluster != null)) {        Route routeIn=routingEngineService.getRoute(srcDap.getSwitchDPID(),srcDap.getPort(),dstDap.getSwitchDPID(),dstDap.getPort(),U64.of(0));        Route routeOut=routingEngineService.getRoute(dstDap.getSwitchDPID(),dstDap.getPort(),srcDap.getSwitchDPID(),srcDap.getPort(),U64.of(0));        if (routeIn != null) {          pushStaticVipRoute(true,routeIn,client,member,sw);        }        if (routeOut != null) {          pushStaticVipRoute(false,routeOut,client,member,sw);        }      }      iSrcDaps++;      iDstDaps++;    } else     if (srcVsDest < 0) {      iSrcDaps++;    } else {      iDstDaps++;    }  }  return;}  }
class C{  public GeometryLocation(Geometry component,Coordinate pt){  this(component,INSIDE_AREA,pt);}  }
class C{  public JToggleButton(){  this(null,null,false);}  }
class C{  public boolean containsExplicitChar(final @NonNull CharSequence input){  if (!TextUtils.isEmpty(input)) {    for (int i=0; i < input.length(); i++) {      char c=input.charAt(i);      if (isExplicitChar(c)) {        return true;      }    }  }  return false;}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  XBLOMElement e=(XBLOMElement)n;  e.prefix=prefix;  return n;}  }
class C{  @Override public void exec(Result<Object> result,Object... args){  TableKelp tableKelp=_table.getTableKelp();  RowCursor minCursor=tableKelp.cursor();  RowCursor maxCursor=tableKelp.cursor();  minCursor.clear();  maxCursor.setKeyMax();  _keyExpr.fillMinCursor(minCursor,args);  _keyExpr.fillMaxCursor(maxCursor,args);  EnvKelp whereKelp=new EnvKelp(_whereKelp,args);  BackupKelp backup=_table.getBackupCallback();  if (isStaticNode()) {    tableKelp.remove(minCursor,backup,(Result)result);  } else {    tableKelp.removeRange(minCursor,maxCursor,whereKelp,backup,(Result)result);  }}  }
class C{  public static void main(String[] args){  if (args.length != 9) {    throw new RuntimeException("Must provide 9 field arguments: filename, startLine, root, and the field locations for VehId, Time, Long, Lat, Status and Speed.");  }  filename=args[0];  startLine=Integer.parseInt(args[1]);  root=args[2];  fieldVehId=Integer.parseInt(args[3]);  fieldTime=Integer.parseInt(args[4]);  fieldLong=Integer.parseInt(args[5]);  fieldLat=Integer.parseInt(args[6]);  fieldStatus=Integer.parseInt(args[7]);  fieldSpeed=Integer.parseInt(args[8]);  log.info("=================================================================");  log.info("  Splitting the DigiCore data file into seperate vehicle files.");  log.info("=================================================================");  long line=0;  long linesRead=0;  long reportValue=1;  File outputFolder=new File(root + "Vehicles/");  if (outputFolder.exists()) {    String s="The folder already exists! Delete " + outputFolder.getPath() + " and rerun.";    throw new RuntimeException(s);  } else {    boolean checkDirectory=outputFolder.mkdirs();    if (!checkDirectory) {      log.warn("Could not make " + outputFolder.toString() + ", or it already exists!");    }  }  BufferedReader input=null;  BufferedWriter output=null;  String vehicleFile=null;  DateString ds=new DateString();  try {    BufferedWriter logRecords=IOUtils.getBufferedWriter(root + "logRecordsRead_" + ds.toString()+ ".txt");    try {      try {        input=IOUtils.getBufferedReader(root + filename);        String inputLine=null;        while ((inputLine=input.readLine()) != null) {          if (++line >= startLine && linesRead <= numberOfLinesToRead) {            String[] inputString=inputLine.split(delimiter);            if (inputString.length == 6) {              vehicleFile=root + "Vehicles/" + inputString[fieldVehId]+ ".txt";              output=new BufferedWriter(new FileWriter(vehicleFile,true),10000);              output.write(inputString[fieldVehId]);              output.write(delimiter);              output.write(inputString[fieldTime]);              output.write(delimiter);              output.write(inputString[fieldLong]);              output.write(delimiter);              output.write(inputString[fieldLat]);              output.write(delimiter);              output.write(inputString[fieldStatus]);              output.write(delimiter);              output.write(inputString[fieldSpeed]);              output.newLine();              logRecords.write(String.valueOf(linesRead));              logRecords.newLine();              if (++linesRead == reportValue) {                log.info("   Lines read... " + linesRead);                reportValue*=2;              }            } else {              log.warn("Line " + line + " does not contain 6 entries.");            }            String vehID=inputString[fieldVehId];            while ((inputLine=input.readLine()) != null) {              inputString=inputLine.split(delimiter);              if (++line >= startLine && linesRead <= numberOfLinesToRead) {                if (inputString.length == 6) {                  if (!vehID.equalsIgnoreCase(inputString[fieldVehId])) {                    output.close();                    vehicleFile=root + "Vehicles/" + inputString[fieldVehId]+ ".txt";                    try {                      output=new BufferedWriter(new FileWriter(vehicleFile,true),100000);                    } catch (                    IOException e) {                      e.printStackTrace();                    }                  }                  output.write(inputString[fieldVehId]);                  output.write(delimiter);                  output.write(inputString[fieldTime]);                  output.write(delimiter);                  output.write(inputString[fieldLong]);                  output.write(delimiter);                  output.write(inputString[fieldLat]);                  output.write(delimiter);                  output.write(inputString[fieldStatus]);                  output.write(delimiter);                  output.write(inputString[fieldSpeed]);                  output.newLine();                  logRecords.write(String.valueOf(linesRead));                  logRecords.newLine();                  vehID=inputString[fieldVehId];                  if (++linesRead == reportValue) {                    log.info("   Lines read... " + linesRead);                    reportValue*=2;                  }                }              } else {                line++;              }            }          } else {            line++;          }        }      } catch (      FileNotFoundException e) {        e.printStackTrace();      }catch (      IOException e) {        e.printStackTrace();      }    }  finally {      logRecords.close();    }  } catch (  IOException e1) {    e1.printStackTrace();  }  log.info("   Lines read... " + linesRead + " (Done)");  log.info("----------------------------------");  log.info("   Process complete.");  log.info("==================================");}  }
class C{  public void close() throws IOException {  internalOut.close();}  }
class C{  public Set<String> showZoneNamesForPwwn(String pwwn,Integer vsanId,boolean activeOnly) throws NetworkDeviceControllerException {  Set<String> zoneNames=Sets.newHashSet();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  String cmdKey=activeOnly ? "MDSDialog.showZone.pwwn.active.cmd" : "MDSDialog.showZone.pwwn.cmd";  String payload=MessageFormat.format(MDSDialogProperties.getString(cmdKey),pwwn,vsanId.toString());  sendWaitFor(payload,defaultTimeout,prompts,buf);  String[] lines=getLines(buf);  String[] regex={MDSDialogProperties.getString("MDSDialog.zoneName.match")};  String[] groups=new String[10];  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      zoneNames.add(groups[0]);    break;}}return zoneNames;}  }
class C{  protected boolean addMainQuery(BooleanQuery.Builder query,SolrParams solrParams) throws SyntaxError {  Map<String,Float> phraseFields=SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));  float tiebreaker=solrParams.getFloat(DisMaxParams.TIE,0.0f);  SolrPluginUtils.DisjunctionMaxQueryParser up=getParser(queryFields,DisMaxParams.QS,solrParams,tiebreaker);  SolrPluginUtils.DisjunctionMaxQueryParser pp=getParser(phraseFields,DisMaxParams.PS,solrParams,tiebreaker);  parsedUserQuery=null;  String userQuery=getString();  altUserQuery=null;  if (userQuery == null || userQuery.trim().length() < 1) {    altUserQuery=getAlternateUserQuery(solrParams);    if (altUserQuery == null)     return false;    query.add(altUserQuery,BooleanClause.Occur.MUST);  } else {    userQuery=SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();    userQuery=SolrPluginUtils.stripIllegalOperators(userQuery).toString();    parsedUserQuery=getUserQuery(userQuery,up,solrParams);    query.add(parsedUserQuery,BooleanClause.Occur.MUST);    Query phrase=getPhraseQuery(userQuery,pp);    if (null != phrase) {      query.add(phrase,BooleanClause.Occur.SHOULD);    }  }  return true;}  }
class C{  private static void resetToolbox(){  final WorkspaceSpecManager specManager=Activator.getSpecManager();  final Spec[] specs=specManager.getRecentlyOpened();  for (int i=0; i < specs.length; i++) {    specManager.removeSpec(specs[i],new NullProgressMonitor());  }}  }
class C{  public String toString(){  return move + " for " + score;}  }
class C{  public synchronized void addTemplate(CodeTemplate template){  if (template == null) {    throw new IllegalArgumentException("template cannot be null");  }  templates.add(template);  sortTemplates();}  }
class C{  public final CC gapLeft(String boundsSize){  hor.setGapBefore(ConstraintParser.parseBoundSize(boundsSize,true,true));  return this;}  }
class C{  public BloomFilter(final Hasher hash,int bitSetSize,int expectedNumberOElements,int metric){  this(hash,bitSetSize / (double)expectedNumberOElements,expectedNumberOElements,(int)Math.round((bitSetSize / (double)expectedNumberOElements) * Math.log(2.0)),metric);  assert bitSetSize == this.bitSetSize;}  }
class C{  private boolean applicationKeyTriggered(KeyEvent e){  if (!enabled) {    return false;  }  KeyStroke keyStroke=KeyStroke.getKeyStrokeForEvent(e);  for (  Hotkey hotkey : hotkeys) {    if (hotkey.type == Hotkey.Type.APPLICATION && hotkey.keyStroke.equals(keyStroke)) {      HotkeyAction action=actions.get(hotkey.actionId);      if (action != null && hotkey.shouldExecuteAction()) {        action.action.actionPerformed(new ActionEvent(action,0,hotkey.custom));        return true;      }    }  }  return false;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success) {    insert_Tree(MTree_Base.TREETYPE_BPartner);    insert_Accounting("C_BP_Customer_Acct","C_BP_Group_Acct","p.C_BP_Group_ID=" + getC_BP_Group_ID());    insert_Accounting("C_BP_Vendor_Acct","C_BP_Group_Acct","p.C_BP_Group_ID=" + getC_BP_Group_ID());    insert_Accounting("C_BP_Employee_Acct","C_AcctSchema_Default",null);  }  if (success && !newRecord && (is_ValueChanged("Value") || is_ValueChanged("Name")))   MAccount.updateValueDescription(getCtx(),"C_BPartner_ID=" + getC_BPartner_ID(),get_TrxName());  return success;}  }
class C{  public static List<String> commandLines(List<EvaluationStatistics> stats,boolean sort){  List<String> result;  result=new ArrayList<>();  for (  EvaluationStatistics stat : stats) {    if (!result.contains(stat.getCommandLine()))     result.add(stat.getCommandLine());  }  if (sort)   Collections.sort(result);  return result;}  }
class C{  public String update() throws SaaSApplicationException {  if (selectedService == null) {    return OUTCOME_ERROR;  }  if (logger.isDebugLoggingEnabled()) {  }  services=null;  boolean isPublicService=selectedService.isPublicService();  selectedService=new ServiceDetails(cleanupParameter(selectedService.getVoServiceDetails()));  selectedService=new ServiceDetails(getProvisioningService().updateService(selectedService.getVoServiceDetails(),getImageUploader().getVOImageResource()));  selectedService.setPublicService(isPublicService);  boolean addedMsg=false;  List<VOCategory> categories=selectedCategoryToVOUnwrapper(this.categorySelection);  try {    selectedService=new ServiceDetails(marketplaceBean.publishService(selectedService,categories));    selectedService.setPublicService(isPublicService);    setMarketplaceCategories(marketplaceBean.getMarketplaceId());    updateMarketplacePublishedTo();  } catch (  ObjectNotFoundException e) {    if (ClassEnum.MARKETPLACE == e.getDomainObjectClassEnum()) {      addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_SERVICE_SAVED_MARKETPLACE_DELETED,new String[]{selectedService.getServiceId(),marketplaceBean.getMarketplace().getName(),marketplaceBean.getMarketplace().getMarketplaceId()});      addedMsg=true;    } else {      throw e;    }  }catch (  PublishingToMarketplaceNotPermittedException e) {    addMessage(null,FacesMessage.SEVERITY_ERROR,ERROR_SERVICE_SAVED_PUBLISHING_NOT_PERMITTED,new String[]{selectedService.getServiceId(),marketplaceBean.getMarketplace().getName(),marketplaceBean.getMarketplace().getMarketplaceId()});    addedMsg=true;  }  if (!addedMsg) {    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_SERVICE_SAVED,selectedService.getServiceId());  }  prepareParameters();  if (saveLocalizedValues) {    setServiceAttributesToLocalization();    getProvisioningService().saveServiceLocalization(selectedService.getVoServiceDetails(),localization);    saveLocalizedValues=false;  }  dirty=false;  if (logger.isDebugLoggingEnabled()) {  }  return OUTCOME_SUCCESS;}  }
class C{  public void printContext(PrintWriter out){  out.println(getMessage());  out.print(context);}  }
class C{  public TIntIntHashMap(TIntIntMap map){  super(map.size());  if (map instanceof TIntIntHashMap) {    TIntIntHashMap hashmap=(TIntIntHashMap)map;    this._loadFactor=hashmap._loadFactor;    this.no_entry_key=hashmap.no_entry_key;    this.no_entry_value=hashmap.no_entry_value;    if (this.no_entry_key != (int)0) {      Arrays.fill(_set,this.no_entry_key);    }    if (this.no_entry_value != (int)0) {      Arrays.fill(_values,this.no_entry_value);    }    setUp((int)Math.ceil(DEFAULT_CAPACITY / _loadFactor));  }  putAll(map);}  }
class C{  private void processPatch(final State current){  try {switch (current.taskState.stage) {case STARTED:      getAllDatastores(current);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :this.failTask(new IllegalStateException(String.format("Un-expected stage: %s",current.taskState.stage)));}} catch (Throwable e) {failTask(e);}}  }
class C{  public static String toHexString(byte b,boolean upperCase){  return IntegralToString.byteToHexString(b,upperCase);}  }
class C{  public V put(K key,V value){  if (key == null) {    throw new NullPointerException("null keys not allowed");  }  if (value == null) {    throw new NullPointerException("null values not allowed");  }  purgeBeforeWrite();  return super.put(key,value);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.STRICT_MODE_RELEVANT__STRICT_MODE:    return isStrictMode();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static DoubleMatrix jblas_SPDValues(double[][] A){  return org.jblas.Singular.SVDValues(new DoubleMatrix(A));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.ACTION_REF__REF:    return ref != null;}return super.eIsSet(featureID);}  }
class C{  private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {  File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);  if (srcFiles == null) {    throw new IOException("Failed to list contents of " + srcDir);  }  if (destDir.exists()) {    if (destDir.isDirectory() == false) {      throw new IOException("Destination '" + destDir + "' exists but is not a directory");    }  } else {    if (!destDir.mkdirs() && !destDir.isDirectory()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  }  if (destDir.canWrite() == false) {    throw new IOException("Destination '" + destDir + "' cannot be written to");  }  for (  File srcFile : srcFiles) {    File dstFile=new File(destDir,srcFile.getName());    if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {      if (srcFile.isDirectory()) {        doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);      } else {        doCopyFile(srcFile,dstFile,preserveFileDate);      }    }  }  if (preserveFileDate) {    destDir.setLastModified(srcDir.lastModified());  }}  }
class C{  private void requestWritePermissions(){  int REQUEST_WRITE_STORAGE=112;  boolean hasPermission=(ContextCompat.checkSelfPermission(this,Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED);  if (!hasPermission) {    ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},REQUEST_WRITE_STORAGE);  }}  }
class C{  @NotNull public static VcsLogHighlighter.VcsCommitStyle foreground(@Nullable Color foreground){  return createStyle(foreground,null,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void addUniqueAttribute(String qName,String value,int flags) throws SAXException {}  }
class C{  public void close(){  this.agent.removeJoinLeaveListener(this);synchronized (this) {    if (this.isClosed) {      return;    }    this.isClosed=true;    if (this.dsHealthMonitor != null) {      this.dsHealthMonitor.stop();      this.dsHealthMonitor=null;    }    try {      for (Iterator iter=hostMembers.values().iterator(); iter.hasNext(); ) {        List members=(List)iter.next();        for (Iterator iter2=members.iterator(); iter2.hasNext(); ) {          GemFireVM member=(GemFireVM)iter2.next();          member.removeHealthListener();        }      }    } catch (    CancelException e) {    }    hostConfigs.clear();    hostMembers.clear();    okayHealth.clear();    poorHealth.clear();  }}  }
class C{  public IAgentVisualization createVisual(IVisualAgent agent){  if (agent instanceof Bee) {    return new AgentVisualization3DCube(agent);  }  return new AgentVisualization3DSpheric(agent);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.585 -0500",hash_original_method="BD51DDC4165DA92B6AA2ED19748DFB52",hash_generated_method="2478274CC8587AAA739966AD0079D7D8") public TransformerConfigurationException(String msg,Throwable e){  super(msg,e);}  }
class C{  public boolean isDataAvailable(){  return _hIn != null;}  }
class C{  public boolean match(String search){  return match(search,0);}  }
class C{  public void unbox(final Type type){  Type t=NUMBER_TYPE;  Method sig=null;switch (type.getSort()) {case Type.VOID:    return;case Type.CHAR:  t=CHARACTER_TYPE;sig=CHAR_VALUE;break;case Type.BOOLEAN:t=BOOLEAN_TYPE;sig=BOOLEAN_VALUE;break;case Type.DOUBLE:sig=DOUBLE_VALUE;break;case Type.FLOAT:sig=FLOAT_VALUE;break;case Type.LONG:sig=LONG_VALUE;break;case Type.INT:case Type.SHORT:case Type.BYTE:sig=INT_VALUE;}if (sig == null) {checkCast(type);} else {checkCast(t);invokeVirtual(t,sig);}}  }
class C{  protected Object toType(Calendar value){  return value.getTime();}  }
class C{  @Override public void trim(){}  }
class C{  public boolean hasFilter(){  return this.vertexFilter != null || this.edgeFilter != null;}  }
class C{  private static float[] CMYKtoRGB(float[] cmyk,float[] rgb){  if (rgb == null) {    rgb=new float[3];  }  rgb[0]=1.0f + cmyk[0] * cmyk[3] - cmyk[3] - cmyk[0];  rgb[1]=1.0f + cmyk[1] * cmyk[3] - cmyk[3] - cmyk[1];  rgb[2]=1.0f + cmyk[2] * cmyk[3] - cmyk[3] - cmyk[2];  return rgb;}  }
class C{  public static void showProgressDialog(Context ctx,String title,String body,Drawable icon,boolean isCancellable){  if (ctx instanceof Activity) {    if (!((Activity)ctx).isFinishing()) {      mProgressDialog=ProgressDialog.show(ctx,title,body,true);      mProgressDialog.setIcon(icon);      mProgressDialog.setCancelable(isCancellable);    }  }}  }
class C{  public void addUncountable(String word){  uncountables.add(0,word.toLowerCase());}  }
class C{  public AbstractCodeTemplate(String id){  setID(id);}  }
class C{  final public void apply(Model model){  p1.apply(model);  distance=Point.distance(p1,p2);}  }
class C{  @Override public void updateClassifier(Instance instance) throws Exception {  updateClassifier(instance,true);}  }
class C{  public DebugExceptionWrapper(final String message){  super(message);  exception=null;}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  RectangleInsets insets=getInsets();  insets.trim(area);  if (info != null) {    info.setPlotArea(area);    info.setDataArea(area);  }  drawBackground(g2,area);  drawOutline(g2,area);  Shape savedClip=g2.getClip();  g2.clip(area);  Composite originalComposite=g2.getComposite();  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));  if (!DatasetUtilities.isEmptyOrNull(this.dataset)) {    int seriesCount, catCount;    if (this.dataExtractOrder == TableOrder.BY_ROW) {      seriesCount=this.dataset.getRowCount();      catCount=this.dataset.getColumnCount();    } else {      seriesCount=this.dataset.getColumnCount();      catCount=this.dataset.getRowCount();    }    if (this.maxValue == DEFAULT_MAX_VALUE) {      calculateMaxValue(seriesCount,catCount);    }    double gapHorizontal=area.getWidth() * getInteriorGap();    double gapVertical=area.getHeight() * getInteriorGap();    double X=area.getX() + gapHorizontal / 2;    double Y=area.getY() + gapVertical / 2;    double W=area.getWidth() - gapHorizontal;    double H=area.getHeight() - gapVertical;    double headW=area.getWidth() * this.headPercent;    double headH=area.getHeight() * this.headPercent;    double min=Math.min(W,H) / 2;    X=(X + X + W) / 2 - min;    Y=(Y + Y + H) / 2 - min;    W=2 * min;    H=2 * min;    Point2D centre=new Point2D.Double(X + W / 2,Y + H / 2);    Rectangle2D radarArea=new Rectangle2D.Double(X,Y,W,H);    for (int cat=0; cat < catCount; cat++) {      double angle=getStartAngle() + (getDirection().getFactor() * cat * 360 / catCount);      Point2D endPoint=getWebPoint(radarArea,angle,1);      Line2D line=new Line2D.Double(centre,endPoint);      g2.setPaint(this.axisLinePaint);      g2.setStroke(this.axisLineStroke);      g2.draw(line);      drawLabel(g2,radarArea,0.0,cat,angle,360.0 / catCount);    }    for (int series=0; series < seriesCount; series++) {      drawRadarPoly(g2,radarArea,centre,info,series,catCount,headH,headW);    }  } else {    drawNoDataMessage(g2,area);  }  g2.setClip(savedClip);  g2.setComposite(originalComposite);  drawOutline(g2,area);}  }
class C{  public PTBTokenizer(boolean tokenizeCRs){  this.tokenizeCRs=tokenizeCRs;}  }
class C{  public void acquireWriteLock(){  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(ACQUIRE_TEXT + " write " + name,lock);  }  lock.writeLock().lock();  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(ACQUIRED_TEXT + " write " + name,lock);  }}  }
class C{  private void initialize(){  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(300,200);  }}  }
class C{  public int size(){  return myArrayList.size();}  }
class C{  private void sortPreviews(ObservableList<SocketPreviewView<?>> previews){  assert Platform.isFxApplicationThread() : "Must be run in JavaFX thread";  final ImmutableList<Source> sources=pipeline.getSources();  final ImmutableList<Step> steps=pipeline.getSteps();  final Comparator<SocketPreviewView<?>> comparePreviews=Comparator.comparing(null,null);  FXCollections.sort(previews,comparePreviews);}  }
class C{  @Override public void stop(BundleContext bundleContext){  org.h2.Driver.unload();}  }
class C{  public void createServer(VM server,boolean accessor,int redundantCopies){  createServer(server,0,accessor,redundantCopies);}  }
class C{  public boolean isDone(){  for (  AppliedPTransform<?,?,?> transform : stepNames.keySet()) {    if (!isDone(transform)) {      return false;    }  }  return true;}  }
class C{  public DefaultUserWorkspace(String remote,MultiRemoteCodenvy multiRemoteCodenvy,Codenvy codenvy,Workspace workspace){  this.remote=remote;  this.multiRemoteCodenvy=multiRemoteCodenvy;  this.codenvy=codenvy;  this.linkWorkspace=workspace;}  }
class C{  private void obtainDragSensitivity(@StyleRes final int themeResourceId){  TypedArray typedArray=getContext().getTheme().obtainStyledAttributes(themeResourceId,new int[]{R.attr.bottomSheetDragSensitivity});  float dragSensitivity=typedArray.getFraction(0,1,1,-1);  if (dragSensitivity != -1) {    setDragSensitivity(dragSensitivity);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static EntityItem drop(final World world,final BlockPos pos,final IInventory inventory,final int index,final int count,final EnumFacing towards){  final ItemStack stack=inventory.decrStackSize(index,count);  return spawnStackInWorld(world,pos,stack,towards);}  }
class C{  @Override public BaseType fill(BaseType... baseType){  return this;}  }
class C{  public void columnMarginChanged(ChangeEvent e){  resizeAndRepaint();}  }
class C{  public static boolean putIntAtIndex(android.content.ContentResolver cr,String name,int index,int value){  String data="";  String valArray[]=null;  String v=android.provider.Settings.Global.getString(cr,name);  if (v != null) {    valArray=v.split(",");  }  for (int i=0; i < index; i++) {    String str="";    if ((valArray != null) && (i < valArray.length)) {      str=valArray[i];    }    data=data + str + ",";  }  data=data + value;  if (valArray != null) {    for (int i=index + 1; i < valArray.length; i++) {      data=data + "," + valArray[i];    }  }  return android.provider.Settings.Global.putString(cr,name,data);}  }
class C{  void save(Data buff,FileStore file,UndoLog log){  buff.reset();  append(buff,log);  filePos=(int)(file.getFilePointer() / Constants.FILE_BLOCK_SIZE);  file.write(buff.getBytes(),0,buff.length());  row=null;  state=STORED;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:41.454 -0500",hash_original_method="92A4F1B66361CC9BE6180C48EF42AF5A",hash_generated_method="D6A943FE64E4DA4220B2DEDCE39E9375") public static int charToGsmExtended(char c){  int ret;  ret=sCharsToShiftTables[0].get(c,-1);  if (ret == -1) {    return sCharsToGsmTables[0].get(' ',' ');  }  return ret;}  }
class C{  protected int nextInt(int N,int M,int n,MersenneTwisterFast randomGenerator){  int Nhalf, n_le_Nhalf, M_le_Nhalf, K;  Nhalf=N / 2;  n_le_Nhalf=(n <= Nhalf) ? n : N - n;  M_le_Nhalf=(M <= Nhalf) ? M : N - M;  if ((n * M / N) < 10) {    K=(n_le_Nhalf <= M_le_Nhalf) ? hmdu(N,M_le_Nhalf,n_le_Nhalf,randomGenerator) : hmdu(N,n_le_Nhalf,M_le_Nhalf,randomGenerator);  } else {    K=(n_le_Nhalf <= M_le_Nhalf) ? hprs(N,M_le_Nhalf,n_le_Nhalf,randomGenerator) : hprs(N,n_le_Nhalf,M_le_Nhalf,randomGenerator);  }  if (n <= Nhalf) {    return (M <= Nhalf) ? K : n - K;  } else {    return (M <= Nhalf) ? M - K : n - N + M + K;  }}  }
class C{  private void updateDeliveryPredFor(DTNHost host){  double oldValue=getPredFor(host);  double newValue=oldValue + (1 - oldValue) * pinit;  preds.put(host,newValue);}  }
class C{  public void contractDetailsEnd(int reqId){  if (m_contractRequests.containsKey(reqId)) {synchronized (m_contractRequests) {      m_contractRequests.remove(reqId);    }  }}  }
class C{  private void ensureOpen() throws IOException {  if (response == null || closed)   throw new IOException("Stream closed");}  }
class C{  public Collection<String> simpleMatchToIndexNames(String pattern){  if (Regex.isSimpleMatchPattern(pattern) == false) {    return Collections.singletonList(pattern);  }  return fieldTypes.simpleMatchToIndexNames(pattern);}  }
class C{  public final Object copyElements(){  FastVector copy=new FastVector(m_Objects.length,m_CapacityIncrement,m_CapacityMultiplier);  copy.m_Size=m_Size;  for (int i=0; i < m_Size; i++) {    copy.m_Objects[i]=((Copyable)m_Objects[i]).copy();  }  return copy;}  }
class C{  final public boolean isDistributed(){  return false;}  }
class C{  protected void processProperties() throws AdeException {}  }
class C{  protected void createButtons(Composite sectionArea,FormToolkit toolkit){  GridData gd;  buttonAdd=toolkit.createButton(sectionArea,"Add",SWT.PUSH);  buttonAdd.addSelectionListener(fSelectionListener);  gd=new GridData();  gd.verticalAlignment=SWT.TOP;  gd.widthHint=70;  buttonAdd.setLayoutData(gd);  buttonEdit=toolkit.createButton(sectionArea,"Edit",SWT.PUSH);  buttonEdit.addSelectionListener(fSelectionListener);  gd=new GridData();  gd.verticalAlignment=SWT.TOP;  gd.widthHint=70;  buttonEdit.setLayoutData(gd);  buttonRemove=toolkit.createButton(sectionArea,"Remove",SWT.PUSH);  buttonRemove.addSelectionListener(fSelectionListener);  gd=new GridData();  gd.verticalAlignment=SWT.TOP;  gd.widthHint=70;  buttonRemove.setLayoutData(gd);  buttonExplore=toolkit.createButton(sectionArea,"Explore",SWT.PUSH);  buttonExplore.addSelectionListener(fSelectionListener);  gd=new GridData();  gd.verticalAlignment=SWT.TOP;  gd.widthHint=70;  buttonExplore.setLayoutData(gd);  buttonRestore=toolkit.createButton(sectionArea,"Restore",SWT.PUSH);  buttonRestore.addSelectionListener(fSelectionListener);  gd=new GridData();  gd.verticalAlignment=SWT.TOP;  gd.widthHint=70;  buttonRestore.setLayoutData(gd);}  }
class C{  private void findViews(){  this.etNumber=(EditText)findViewById(R.id.etNumber);  this.optColombian=(RadioButton)findViewById(R.id.optColombian);  this.optExpresso=(RadioButton)findViewById(R.id.optExpresso);  this.optDecaf=(RadioButton)findViewById(R.id.optDecaf);  this.chkCream=(CheckBox)findViewById(R.id.chkCream);  this.chkSugar=(CheckBox)findViewById(R.id.chkSugar);  this.btnCancel=(Button)findViewById(R.id.btnCancel);  this.btnOrder=(Button)findViewById(R.id.btnOrder);}  }
class C{  public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {  log.info(evt.toString());  throw new PropertyVetoException("Skip reset for trx entries cache",evt);}  }
class C{  public <T>List<T> takeSideOutputElements(TupleTag<T> tag){  List<T> resultElems=new ArrayList<>(peekSideOutputElements(tag));  clearSideOutputElements(tag);  return resultElems;}  }
class C{  protected void onAttach(){  doAttach();}  }
class C{  OneCameraImpl(CameraDevice device,CameraCharacteristics characteristics,Size pictureSize){  mDevice=device;  mCharacteristics=characteristics;  mLensRange=LensRangeCalculator.getDiopterToRatioCalculator(characteristics);  mDirectionProvider=new CameraDirectionProvider(characteristics);  mFullSizeAspectRatio=calculateFullSizeAspectRatio(characteristics);  if (sCaptureImageFormat == ImageFormat.RAW_SENSOR) {    pictureSize=getDefaultPictureSize();  }  mCameraThread=new HandlerThread("OneCamera2");  mCameraThread.start();  mCameraHandler=new Handler(mCameraThread.getLooper());  mCaptureImageReader=ImageReader.newInstance(pictureSize.getWidth(),pictureSize.getHeight(),sCaptureImageFormat,2);  mCaptureImageReader.setOnImageAvailableListener(mCaptureImageListener,mCameraHandler);  Log.d(TAG,"New Camera2 based OneCameraImpl created.");}  }
class C{  public ApplicationDefinition addApplicationDefinition(ApplicationDefinition appDefinition,int insertBeforeIndex) throws BusinessException {  if (appDefinition == null) {    throw new BusinessException("Adding application 'null'.",BusinessContextErrorCodeEnum.UNKNOWN_APPLICATION);  } else   if (applicationDefinitions.contains(appDefinition)) {    throw new BusinessException("Adding application " + appDefinition.getApplicationName() + " with id "+ appDefinition.getId()+ ".",BusinessContextErrorCodeEnum.DUPLICATE_ITEM);  } else   if ((insertBeforeIndex < 0) || (insertBeforeIndex > applicationDefinitions.size())) {    throw new BusinessException("Adding application" + appDefinition.getApplicationName() + " with id "+ appDefinition.getId()+ " at index "+ insertBeforeIndex+ ".",BusinessContextErrorCodeEnum.INVALID_MOVE_OPRATION);  } else {    applicationDefinitions.add(insertBeforeIndex,appDefinition);    return appDefinition;  }}  }
class C{  @Override public void writeEntityToNBT(NBTTagCompound compound){  compound.setShort("Health",(short)this.health);  compound.setShort("Age",(short)this.age);  compound.setInteger("Lifespan",lifespan);  compound.setInteger("direction",direction.ordinal());  compound.setBoolean("canBePickedUp",canBePickedUp);  if (this.getEntityItem() != null) {    compound.setTag("Item",this.getEntityItem().writeToNBT(new NBTTagCompound()));  }}  }
class C{  public Date from(){  return from;}  }
class C{  public void removePollMessage(MarklinMessage mm,MarklinListener ml){  for (  PollMessage pm : pollQueue) {    if (pm.getListener() == ml && pm.getMessage().toString().equals(mm.toString())) {      pollQueue.remove(pm);    }  }}  }
class C{  private void addTokenToWorld(String name,int x,int y){  final BoardToken token=(BoardToken)SingletonRepository.getEntityManager().getItem(name);  token.setPosition(x,y);  token.setHomePosition(x,y);  token.setTokenMoveListener(this);  getZone().add(token,false);  tokens.add(token);}  }
class C{  protected boolean afterDelete(boolean success){  afterSave(false,success);  return success;}  }
class C{  public void createDayScenario17() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-07 07:00:00"));  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO17_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),20);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getSecondCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subscriptionDetails=subscrSetup.subscribeToService("SCENARIO17_PERUNIT_DAY",serviceDetails,basicSetup.getSecondCustomerUser1(),role);  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO17_PERUNIT_DAY",subscriptionDetails);}  }
class C{  private boolean flushConcatenation(WordDelimiterConcatenation concatenation){  lastConcatCount=concatenation.subwordCount;  if (concatenation.subwordCount != 1 || !shouldGenerateParts(concatenation.type)) {    concatenation.writeAndClear();    return true;  }  concatenation.clear();  return false;}  }
class C{  protected void fireEscapingEvent(String name,String data) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_PI,name,data);  }}  }
class C{  private void addLowerPlotData(List<ThreadInformationData> threadData){  for (  ThreadInformationData data : threadData) {    float daemonThreadAverage=((float)data.getTotalDaemonThreadCount()) / data.getCount();    daemonThreads.add(data.getTimeStamp().getTime(),daemonThreadAverage,data.getMinDaemonThreadCount(),data.getMaxDaemonThreadCount(),false);  }  daemonThreads.fireSeriesChanged();}  }
class C{  public ScrollBarButtonPainter(Which state){  super();  this.state=state;  this.ctx=new PaintContext(CacheMode.FIXED_SIZES);  isPressed=false;  isDisabled=false;switch (state) {case FOREGROUND_DISABLED:    isDisabled=true;  isIncrease=false;buttonsTogether=false;break;case FOREGROUND_DISABLED_TOGETHER:isDisabled=true;isIncrease=false;buttonsTogether=true;break;case FOREGROUND_ENABLED:isIncrease=false;buttonsTogether=false;break;case FOREGROUND_ENABLED_TOGETHER:isIncrease=false;buttonsTogether=true;break;case FOREGROUND_PRESSED:isPressed=true;isIncrease=false;buttonsTogether=false;break;case FOREGROUND_PRESSED_TOGETHER:isPressed=true;isIncrease=false;buttonsTogether=true;break;case FOREGROUND_INCREASE_DISABLED:isDisabled=true;isIncrease=true;buttonsTogether=false;break;case FOREGROUND_INCREASE_DISABLED_TOGETHER:isDisabled=true;isIncrease=true;buttonsTogether=true;break;case FOREGROUND_INCREASE_ENABLED:isIncrease=true;buttonsTogether=false;break;case FOREGROUND_INCREASE_ENABLED_TOGETHER:isIncrease=true;buttonsTogether=true;break;case FOREGROUND_INCREASE_PRESSED:isPressed=true;isIncrease=true;buttonsTogether=false;break;case FOREGROUND_INCREASE_PRESSED_TOGETHER:isPressed=true;isIncrease=true;buttonsTogether=true;break;case FOREGROUND_CAP:isIncrease=false;buttonsTogether=true;break;}}  }
class C{  void writeTree() throws DocumentException {  margin=0;  final MBeanNode platformNode=mbeans.get(0);  writeTree(platformNode.getChildren());  for (  final MBeanNode node : mbeans) {    if (node != platformNode) {      newPage();      addToDocument(new Chunk(node.getName(),boldFont));      margin=0;      writeTree(node.getChildren());    }  }}  }
class C{  public Iterator iterator(){  if (paoFields != null) {    return paoFields.iterator();  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static final int compareTo(char[] array1,char[] array2){  int length1=array1.length;  int length2=array2.length;  int min=Math.min(length1,length2);  for (int i=0; i < min; i++) {    if (array1[i] != array2[i]) {      return array1[i] - array2[i];    }  }  return length1 - length2;}  }
class C{  protected static final int positionCoordinate2D(float value){  return (int)(value + 0.437f);}  }
class C{  public void addCondition(Expression cond){  if (condition == null) {    condition=cond;  } else {    condition=new ConditionAndOr(ConditionAndOr.AND,cond,condition);  }}  }
class C{  public static Validator<CharSequence> letter(@NonNull final Context context,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  return new LetterValidator(context,R.string.default_error_message,caseSensitivity,allowSpaces,allowedCharacters);}  }
class C{  public static EncryptedData parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new EncryptedData(subDer);  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof NonreceiverTerm))   return false;  if (this == o)   return true;  NonreceiverTerm other=(NonreceiverTerm)o;  return this.type.equals(other.type) && Util.equalsWithNull(this.value,other.value);}  }
class C{  public ParseResult filter(Content content,ParseResult parseResult,HTMLMetaTags metaTags,DocumentFragment doc){  for (int i=0; i < this.htmlParseFilters.length; i++) {    parseResult=htmlParseFilters[i].filter(content,parseResult,metaTags,doc);    if (!parseResult.isSuccess()) {      parseResult.filter();      return parseResult;    }  }  return parseResult;}  }
class C{  public static Integer[] toArray(int from,int to){  return Interval.fromTo(from,to).toArray();}  }
class C{  public RotationMatrixBuilder withThetas(double theta){  for (  Plane plane : planes) {    plane.setTheta(theta);  }  return this;}  }
class C{  public static boolean isLegalFileName(String fileName){  for (int i=0; i < fileName.length(); i++) {    char c=fileName.charAt(i);    if (!isLegalFileNameChar(c)) {      return false;    }  }  return true;}  }
class C{  public void testBlockCommitImmediatelyOnUnsafe() throws Exception {  int blockCommitInterval=10000;  int blockCommitSize=100;  TungstenProperties config=helper.createDoubleQueueRuntime(100,blockCommitSize,blockCommitInterval);  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  pipeline.start(new MockEventDispatcher());  InMemoryQueueStore input=(InMemoryQueueStore)pipeline.getStore("q1");  long lastUnsafe=-1;  logger.info("Starting to add events; first seqno=0");  for (int seqno=0; seqno < 10; seqno++) {    ReplDBMSEvent event=helper.createEvent(seqno,"db0");    if (seqno % 2 == 0) {      event.getDBMSEvent().setMetaDataOption(ReplOptionParams.UNSAFE_FOR_BLOCK_COMMIT,"");      lastUnsafe=seqno;      logger.info("Creating unsafe transaction: seqno=" + seqno);    } else {      logger.info("Creating unsafe transaction: seqno=" + seqno);    }    input.put(event);    Future<ReplDBMSHeader> lastProcessed=pipeline.watchForProcessedSequenceNumber(seqno);    try {      ReplDBMSHeader lastProcessedHeader=lastProcessed.get(5,TimeUnit.SECONDS);      Assert.assertNotNull("Expected last transaction to be processed",lastProcessedHeader);    } catch (    TimeoutException e) {      throw new Exception("Timed out unexpectedly while waiting for transaction to be processed in pipeline: seqno=" + seqno,e);    }    Future<ReplDBMSHeader> lastCommitted=pipeline.watchForCommittedSequenceNumber(seqno,false);    if (seqno == lastUnsafe) {      ReplDBMSHeader unexpectedHeader=lastCommitted.get(5,TimeUnit.SECONDS);      if (unexpectedHeader == null) {        throw new Exception("Unsafe transaction failed to commit");      } else {        long lastAppliedSeqno=pipeline.getLastAppliedSeqno();        Assert.assertTrue("last applied seqno == lastUnsafe",lastAppliedSeqno == lastUnsafe);      }    } else {      try {        ReplDBMSHeader unexpectedHeader=lastCommitted.get(500,TimeUnit.MILLISECONDS);        long lastAppliedSeqno=pipeline.getLastAppliedSeqno();        throw new Exception("Normal transaction committed early: last seqno submitted=" + seqno + " last unsafe="+ lastUnsafe+ " lastAppliedTransaction="+ lastAppliedSeqno+ " lastCommitted seqno="+ unexpectedHeader.getSeqno());      } catch (      TimeoutException e) {        logger.info("Confirmed that normal transaction is not yet committed: seqno=" + seqno);        long lastAppliedSeqno=pipeline.getLastAppliedSeqno();        Assert.assertTrue("last applied seqno == lastUnsafe",lastAppliedSeqno == lastUnsafe);      }    }  }  pipeline.shutdown(false);  pipeline.release(runtime);}  }
class C{  public void testAddEjbModule() throws Exception {  String xml="<application></application>";  ApplicationXml applicationXml=ApplicationXmlIo.parseApplicationXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),null);  applicationXml.addEjbModule("ejbmodule1.jar");  List<String> ejbModules=applicationXml.getEjbModules();  assertEquals(1,ejbModules.size());  assertEquals("ejbmodule1.jar",ejbModules.get(0));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:53.649 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="BBFCFD2AD6BD270AD38D8FE87FD0572B") protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  @Path("/") @PUT @ApiOperation(value="Update Customer information based on the Token passed in.") public CustomerInfo updateCustomerInfo(@Context HttpServletRequest request,@ApiParam(required=true) CustomerInfo customerInfo){  AppContext userContext=getUserContext(request);  CustomerInfo customer=delegate.updateCustomerInfo(userContext,customerInfo);  return customer;}  }
class C{  public boolean visit(AssertStatement node){  return true;}  }
class C{  @Override public double doubleValue(){  return value;}  }
class C{  @Transactional public void update(T modifiedInstance){  entityManager.merge(modifiedInstance);}  }
class C{  private void addPath(final String path){  if (!myPaths.contains(path)) {    myPaths.add(path);  }}  }
class C{  public QueryCanonicalCharacterNamesCommand(Player player,Collection<String> namesToCheck){  this.player=player;  this.namesToCheck=namesToCheck;}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int left=leftInit;  int right=rightInit;  int up=upInit;  int down=downInit;  boolean sizeExceeded=false;  boolean aBlackPointFoundOnBorder=true;  boolean atLeastOneBlackPointFoundOnBorder=false;  boolean atLeastOneBlackPointFoundOnRight=false;  boolean atLeastOneBlackPointFoundOnBottom=false;  boolean atLeastOneBlackPointFoundOnLeft=false;  boolean atLeastOneBlackPointFoundOnTop=false;  while (aBlackPointFoundOnBorder) {    aBlackPointFoundOnBorder=false;    boolean rightBorderNotWhite=true;    while ((rightBorderNotWhite || !atLeastOneBlackPointFoundOnRight) && right < width) {      rightBorderNotWhite=containsBlackPoint(up,down,right,false);      if (rightBorderNotWhite) {        right++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnRight=true;      } else       if (!atLeastOneBlackPointFoundOnRight) {        right++;      }    }    if (right >= width) {      sizeExceeded=true;      break;    }    boolean bottomBorderNotWhite=true;    while ((bottomBorderNotWhite || !atLeastOneBlackPointFoundOnBottom) && down < height) {      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);      if (bottomBorderNotWhite) {        down++;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnBottom=true;      } else       if (!atLeastOneBlackPointFoundOnBottom) {        down++;      }    }    if (down >= height) {      sizeExceeded=true;      break;    }    boolean leftBorderNotWhite=true;    while ((leftBorderNotWhite || !atLeastOneBlackPointFoundOnLeft) && left >= 0) {      leftBorderNotWhite=containsBlackPoint(up,down,left,false);      if (leftBorderNotWhite) {        left--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnLeft=true;      } else       if (!atLeastOneBlackPointFoundOnLeft) {        left--;      }    }    if (left < 0) {      sizeExceeded=true;      break;    }    boolean topBorderNotWhite=true;    while ((topBorderNotWhite || !atLeastOneBlackPointFoundOnTop) && up >= 0) {      topBorderNotWhite=containsBlackPoint(left,right,up,true);      if (topBorderNotWhite) {        up--;        aBlackPointFoundOnBorder=true;        atLeastOneBlackPointFoundOnTop=true;      } else       if (!atLeastOneBlackPointFoundOnTop) {        up--;      }    }    if (up < 0) {      sizeExceeded=true;      break;    }    if (aBlackPointFoundOnBorder) {      atLeastOneBlackPointFoundOnBorder=true;    }  }  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {    int maxSize=right - left;    ResultPoint z=null;    for (int i=1; i < maxSize; i++) {      z=getBlackPointOnSegment(left,down - i,left + i,down);      if (z != null) {        break;      }    }    if (z == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint t=null;    for (int i=1; i < maxSize; i++) {      t=getBlackPointOnSegment(left,up + i,left + i,up);      if (t != null) {        break;      }    }    if (t == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint x=null;    for (int i=1; i < maxSize; i++) {      x=getBlackPointOnSegment(right,up + i,right - i,up);      if (x != null) {        break;      }    }    if (x == null) {      throw NotFoundException.getNotFoundInstance();    }    ResultPoint y=null;    for (int i=1; i < maxSize; i++) {      y=getBlackPointOnSegment(right,down - i,right - i,down);      if (y != null) {        break;      }    }    if (y == null) {      throw NotFoundException.getNotFoundInstance();    }    return centerEdges(y,z,x,t);  } else {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public boolean equals(Object objectToCompare){  return super.equals(objectToCompare);}  }
class C{  public static boolean subsetOf(Automaton a1,Automaton a2){  if (a1.isDeterministic() == false) {    throw new IllegalArgumentException("a1 must be deterministic");  }  if (a2.isDeterministic() == false) {    throw new IllegalArgumentException("a2 must be deterministic");  }  assert hasDeadStatesFromInitial(a1) == false;  assert hasDeadStatesFromInitial(a2) == false;  if (a1.getNumStates() == 0) {    return true;  } else   if (a2.getNumStates() == 0) {    return isEmpty(a1);  }  Transition[][] transitions1=a1.getSortedTransitions();  Transition[][] transitions2=a2.getSortedTransitions();  LinkedList<StatePair> worklist=new LinkedList<>();  HashSet<StatePair> visited=new HashSet<>();  StatePair p=new StatePair(0,0);  worklist.add(p);  visited.add(p);  while (worklist.size() > 0) {    p=worklist.removeFirst();    if (a1.isAccept(p.s1) && a2.isAccept(p.s2) == false) {      return false;    }    Transition[] t1=transitions1[p.s1];    Transition[] t2=transitions2[p.s2];    for (int n1=0, b2=0; n1 < t1.length; n1++) {      while (b2 < t2.length && t2[b2].max < t1[n1].min) {        b2++;      }      int min1=t1[n1].min, max1=t1[n1].max;      for (int n2=b2; n2 < t2.length && t1[n1].max >= t2[n2].min; n2++) {        if (t2[n2].min > min1) {          return false;        }        if (t2[n2].max < Character.MAX_CODE_POINT) {          min1=t2[n2].max + 1;        } else {          min1=Character.MAX_CODE_POINT;          max1=Character.MIN_CODE_POINT;        }        StatePair q=new StatePair(t1[n1].dest,t2[n2].dest);        if (!visited.contains(q)) {          worklist.add(q);          visited.add(q);        }      }      if (min1 <= max1) {        return false;      }    }  }  return true;}  }
class C{  public StateSpecification createStateSpecification(){  StateSpecificationImpl stateSpecification=new StateSpecificationImpl();  return stateSpecification;}  }
class C{  public boolean isRebatePeriodActive(){  boolean isActive=false;  final Date today=new Date();  RebatePeriod rebatePeriod=rebatePeriodService.getRebateForCurrInstallment(propertyTaxCommonUtils.getCurrentInstallment().getId());  if (rebatePeriod != null && today.before(rebatePeriod.getRebateDate()))   isActive=true;  return isActive;}  }
class C{  @Override public void addDeviceCert(Certificate cert,String deviceName){  try {    this.keyStore.setCertificateEntry(deviceName,cert);  } catch (  KeyStoreException e) {    logger.error("Could not add device certificate for device " + deviceName + " to identity's keystore",e);  }}  }
class C{  public final void writeLong(long[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    writeLong(pa[start + i]);  }}  }
class C{  private void _serialize(Object object,StringBuilder sb,Set<Object> done) throws ConverterException {  deep++;  if (object == null) {    sb.append(goIn());    sb.append("nullValue()");    deep--;    return;  }  if (object instanceof String) {    sb.append(goIn());    sb.append(QUOTE_CHR);    sb.append(escape(object.toString()));    sb.append(QUOTE_CHR);    deep--;    return;  }  if (object instanceof Number) {    sb.append(goIn());    sb.append(Caster.toString(((Number)object)));    deep--;    return;  }  if (object instanceof Boolean) {    sb.append(goIn());    sb.append(Caster.toString(((Boolean)object).booleanValue()));    deep--;    return;  }  if (object instanceof DateTime) {    _serializeDateTime((DateTime)object,sb);    deep--;    return;  }  if (object instanceof Date) {    _serializeDate((Date)object,sb);    deep--;    return;  }  if (object instanceof Node) {    _serializeXML((Node)object,sb);    deep--;    return;  }  if (object instanceof ObjectWrap) {    try {      _serialize(((ObjectWrap)object).getEmbededObject(),sb,done);    } catch (    PageException e) {      throw toConverterException(e);    }    deep--;    return;  }  if (object instanceof TimeSpan) {    _serializeTimeSpan((TimeSpan)object,sb);    deep--;    return;  }  Object raw=LazyConverter.toRaw(object);  if (done.contains(raw)) {    sb.append(goIn());    sb.append("nullValue()");    deep--;    return;  }  done.add(raw);  try {    if (object instanceof Component) {      _serializeComponent((Component)object,sb,done);      deep--;      return;    }    if (object instanceof Struct) {      _serializeStruct((Struct)object,sb,done);      deep--;      return;    }    if (object instanceof Map) {      _serializeMap((Map)object,sb,done);      deep--;      return;    }    if (object instanceof Array) {      _serializeArray((Array)object,sb,done);      deep--;      return;    }    if (object instanceof List) {      _serializeList((List)object,sb,done);      deep--;      return;    }    if (object instanceof Query) {      _serializeQuery((Query)object,sb,done);      deep--;      return;    }    if (object instanceof ScriptConvertable) {      sb.append(((ScriptConvertable)object).serialize());      deep--;      return;    }    if (object instanceof Serializable) {      _serializeSerializable((Serializable)object,sb);      deep--;      return;    }  }  finally {    done.remove(raw);  }  throw new ConverterException("can't serialize Object of type [ " + Caster.toClassName(object) + " ]");}  }
class C{  public int delete(String table,String key){  delay();  if (verbose) {    System.out.println("DELETE " + table + " "+ key);  }  return 0;}  }
class C{  public Endpoint basicGetToEndpoint(){  return toEndpoint;}  }
class C{  public void addTailArg(String arg){  _tailArgs.add(arg);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response createConsistencyGroup(@PathParam("tenant_id") String openstackTenantId,ConsistencyGroupCreateRequest param,@HeaderParam("X-Cinder-V1-Call") String isV1Call,@Context HttpHeaders header){  _log.info("Creating Consistency Group : " + param.consistencygroup.name);  ConsistencyGroupCreateResponse cgResponse=new ConsistencyGroupCreateResponse();  final Project project=getCinderHelper().getProject(openstackTenantId,getUserFromContext());  final String volumeTypes=param.consistencygroup.volume_types;  VirtualPool vPool=getCinderHelper().getVpool(volumeTypes);  if (null != project && vPool != null) {    if (!vPool.getMultivolumeConsistency()) {      _log.error("Bad Request : Multi volume consistency is not enabled in the volume type {}",volumeTypes);      return CinderApiUtils.createErrorResponse(400,"Bad Request : Multi volume consistency is not enabled");    }    ArgValidator.checkFieldNotEmpty(param.consistencygroup.name,"name");    checkForDuplicateName(param.consistencygroup.name,BlockConsistencyGroup.class);    ArgValidator.checkFieldLengthMaximum(param.consistencygroup.name,CG_MAX_LIMIT,"name");    final BlockConsistencyGroup consistencyGroup=new BlockConsistencyGroup();    consistencyGroup.setId(URIUtil.createId(BlockConsistencyGroup.class));    consistencyGroup.setLabel(param.consistencygroup.name);    consistencyGroup.setProject(new NamedURI(project.getId(),project.getLabel()));    consistencyGroup.setTenant(project.getTenantOrg());    consistencyGroup.setCreationTime(Calendar.getInstance());    ScopedLabelSet tagSet=new ScopedLabelSet();    consistencyGroup.setTag(tagSet);    tagSet.add(new ScopedLabel("volume_types",volumeTypes));    tagSet.add(new ScopedLabel("status","available"));    tagSet.add(new ScopedLabel("availability_zone",(param.consistencygroup.availability_zone != null) ? param.consistencygroup.availability_zone : "nova"));    tagSet.add(new ScopedLabel("description",(param.consistencygroup.description != null) ? param.consistencygroup.description : "No Description"));    tagSet.add(new ScopedLabel(project.getTenantOrg().getURI().toString(),CinderApiUtils.splitString(consistencyGroup.getId().toString(),":",3)));    _dbClient.createObject(consistencyGroup);    cgResponse.id=CinderApiUtils.splitString(consistencyGroup.getId().toString(),":",3);    cgResponse.name=consistencyGroup.getLabel();    return CinderApiUtils.getCinderResponse(cgResponse,header,true,CinderConstants.STATUS_OK);  } else {    return CinderApiUtils.createErrorResponse(400,"Bad Request : can't create consistency group due to invalid argument");  }}  }
class C{  public UploadSingleInitiationRequest createUploadSingleInitiationRequest(){  return createUploadSingleInitiationRequest(AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME,AbstractServiceTest.FORMAT_USAGE_CODE,AbstractServiceTest.FORMAT_FILE_TYPE_CODE,AbstractServiceTest.FORMAT_VERSION,AbstractServiceTest.NAMESPACE,AbstractServiceTest.BDEF_NAME_2,AbstractServiceTest.FORMAT_USAGE_CODE_2,AbstractServiceTest.FORMAT_FILE_TYPE_CODE_2,AbstractServiceTest.FORMAT_VERSION_2,AbstractServiceTest.FILE_NAME);}  }
class C{  private boolean isFragmentType(String type){  if (type.endsWith(".Fragment"))   return true;  SootClass sootClass=null;  try {    sootClass=Scene.v().getSootClass(type);  } catch (  Exception ex) {    return false;  }  for (  String fragment : new String[]{"android.app.Fragment","android.support.v4.app.Fragment"}) {    try {      SootClass fragmentClass=Scene.v().getSootClass(fragment);      if (SootUtils.checkAncestor(sootClass,fragmentClass))       return true;    } catch (    Exception ex) {    }  }  return false;}  }
class C{  final public int pos(){  return pos;}  }
class C{  @SuppressWarnings("unchecked") protected static <T extends ImmutableObject>T cloneEmptyToNull(T obj){  return (T)CLONE_EMPTY_TO_NULL.apply(obj);}  }
class C{  private void attachBridgeServer() throws IOException {  CacheServerImpl server=(CacheServerImpl)cache.addCacheServer();  assertNotNull(server);  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.getClientSubscriptionConfig().setEvictionPolicy(HARegionQueue.HA_EVICTION_POLICY_ENTRY);  server.start();  assertNotNull("client messages region is null ",server.getAcceptor().getCacheClientNotifier().getHaContainer());  String regionName=((HAContainerWrapper)server.getAcceptor().getCacheClientNotifier().getHaContainer()).getName();  EvictionAttributesImpl ea=(EvictionAttributesImpl)cache.getRegion(Region.SEPARATOR + regionName).getAttributes().getEvictionAttributes();  assertTrue("Eviction Algorithm is not LIFO",ea.isLIFO());  if (cache.getCacheServers().size() <= 1) {    assertTrue("client messages region name should not be present ",(regionNames).add(regionName));  } else {    assertTrue("client messages region name should have been already present ",(regionNames).contains(regionName));  }}  }
class C{  private Set<RPSite> scan(List<CreateCopyParams> copies,List<CreateRSetParams> rSets){  final int MAX_SCAN_WAIT_TOTAL_TRIES=240;  final int MAX_SCAN_WAIT_RETRY_MILLISECONDS=15000;  int rescanTries=MAX_SCAN_WAIT_TOTAL_TRIES;  boolean needsScan=true;  Set<RPSite> allSites=null;  while (needsScan && rescanTries-- > 0) {    needsScan=false;    if ((MAX_SCAN_WAIT_TOTAL_TRIES - rescanTries) != 1) {      logger.info("RecoverPointClient: Briefly sleeping to accommodate export group latencies (Attempt #{} / {})",MAX_SCAN_WAIT_TOTAL_TRIES - rescanTries,MAX_SCAN_WAIT_TOTAL_TRIES);      try {        Thread.sleep(MAX_SCAN_WAIT_RETRY_MILLISECONDS);      } catch (      InterruptedException e1) {        Thread.currentThread().interrupt();      }    }    logger.info("RecoverPointClient: Rescanning san volumes for endpoint: " + _endpoint.toASCIIString());    try {      functionalAPI.rescanSANVolumesInAllClusters(true);    } catch (    FunctionalAPIActionFailedException_Exception e) {      logger.warn("Exception in call to rescanSANVolumesInAllSites");    }catch (    FunctionalAPIInternalError_Exception e) {      logger.warn("Exception in call to rescanSANVolumesInAllSites");    }    allSites=getAssociatedRPSites();    for (    CreateCopyParams copy : copies) {      for (      CreateVolumeParams volumeParam : copy.getJournals()) {        boolean found=false;        for (        RPSite rpSite : allSites) {          ClusterSANVolumes siteSANVolumes=rpSite.getSiteVolumes();          for (          VolumeInformation volume : siteSANVolumes.getVolumesInformations()) {            String siteVolUID=RecoverPointUtils.getGuidBufferAsString(volume.getRawUids(),false);            if (siteVolUID.equalsIgnoreCase(volumeParam.getWwn())) {              logger.info("Found site and volume ID for journal: " + volumeParam.getWwn() + " for copy: "+ copy.getName());              found=true;              break;            }          }          if (found) {            break;          }        }        if (!found) {          logger.warn(String.format("Could not find volume %s for copy %s and internal site %s on any RP site.  We will likely retry.",volumeParam.getWwn(),copy.getName(),volumeParam.getInternalSiteName()));          needsScan=true;          if (rescanTries <= 0) {            for (            RPSite rpSite : allSites) {              logger.error(String.format("Could not find volume %s on any RP site.  Retries exhausted.",volumeParam.getWwn()));              ClusterSANVolumes siteSANVolumes=rpSite.getSiteVolumes();              for (              VolumeInformation volume : siteSANVolumes.getVolumesInformations()) {                logger.info(String.format("RP Site: %s; volume from RP: %s",rpSite.getSiteName(),RecoverPointUtils.getGuidBufferAsString(volume.getRawUids(),false)));              }            }            throw RecoverPointException.exceptions.couldNotFindSiteAndVolumeIDForJournal(volumeParam.getWwn(),copy.getName(),volumeParam.getInternalSiteName());          }        }      }    }    if (rSets == null || rSets.isEmpty()) {      continue;    }    for (    CreateRSetParams rset : rSets) {      for (      CreateVolumeParams volumeParam : rset.getVolumes()) {        boolean found=false;        for (        RPSite rpSite : allSites) {          ClusterSANVolumes siteSANVolumes=rpSite.getSiteVolumes();          for (          VolumeInformation volume : siteSANVolumes.getVolumesInformations()) {            String siteVolUID=RecoverPointUtils.getGuidBufferAsString(volume.getRawUids(),false);            if (siteVolUID.equalsIgnoreCase(volumeParam.getWwn())) {              logger.info(String.format("Found site and volume ID for volume: %s for replication set: %s on site: %s (%s)",volumeParam.getWwn(),rset.getName(),rpSite.getSiteName(),volumeParam.getInternalSiteName()));              found=true;              break;            }          }          if (found) {            break;          }        }        if (!found) {          logger.warn(String.format("Could not find volume %s for internal site %s on any RP site.  We will likely retry.",volumeParam.getWwn(),volumeParam.getInternalSiteName()));          needsScan=true;          if (rescanTries <= 0) {            for (            RPSite rpSite : allSites) {              logger.error(String.format("Could not find volume %s on any RP site.  Retries exhausted.",volumeParam.getWwn()));              ClusterSANVolumes siteSANVolumes=rpSite.getSiteVolumes();              for (              VolumeInformation volume : siteSANVolumes.getVolumesInformations()) {                logger.info(String.format("RP Site: %s; volume from RP: %s",rpSite.getSiteName(),RecoverPointUtils.getGuidBufferAsString(volume.getRawUids(),false)));              }            }            throw RecoverPointException.exceptions.couldNotFindSiteAndVolumeIDForVolume(volumeParam.getWwn(),rset.getName(),volumeParam.getInternalSiteName());          }        }      }    }  }  return allSites;}  }
class C{  private byte[] copyCode(ConstPool destCp,Map classnames,ExceptionTable etable,CodeAttribute destCa) throws BadBytecode {  int len=getCodeLength();  byte[] newCode=new byte[len];  destCa.info=newCode;  LdcEntry ldc=copyCode(this.info,0,len,this.getConstPool(),newCode,destCp,classnames);  return LdcEntry.doit(newCode,ldc,etable,destCa);}  }
class C{  public static String compXmlStringAt(byte[] arr,int strOff){  int strLen=arr[strOff + 1] << 8 & 0xff00 | arr[strOff] & 0xff;  byte[] chars=new byte[strLen];  for (int ii=0; ii < strLen; ii++) {    chars[ii]=arr[strOff + 2 + ii * 2];  }  return new String(chars);}  }
class C{  public Quaternionf rotationX(float angle){  float cos=(float)Math.cos(angle * 0.5);  float sin=(float)Math.sin(angle * 0.5);  w=cos;  x=sin;  y=0.0f;  z=0.0f;  return this;}  }
class C{  public final boolean contains(int s){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == s)     return true;  }  return false;}  }
class C{  public static void createForward(InetSocketAddress adbSockAddr,Device device,String localPortSpec,String remotePortSpec) throws TimeoutException, AdbCommandRejectedException, IOException {  try (SocketChannel adbChan=SocketChannel.open(adbSockAddr)){    adbChan.configureBlocking(false);    byte[] request=formAdbRequest(String.format("host-serial:%1$s:forward:%2$s;%3$s",device.getSerialNumber(),localPortSpec,remotePortSpec));    write(adbChan,request);    AdbResponse resp=readAdbResponse(adbChan,false);    if (!resp.okay) {      Log.w("create-forward","Error creating forward: " + resp.message);      throw new AdbCommandRejectedException(resp.message);    }  } }  }
class C{  public static void main(String[] args) throws Throwable {  Loader cl=new Loader();  cl.run(args);}  }
class C{  public IndTestRegressionAD(DataSet dataSet,double alpha){  this.dataSet=dataSet;  this.data=new DenseDoubleMatrix2D(dataSet.getDoubleData().toArray());  this.variables=Collections.unmodifiableList(dataSet.getVariables());  setAlpha(alpha);}  }
class C{  public void writeTo(File file) throws FileNotFoundException {  try (PrintWriter writer=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file),StandardCharsets.ISO_8859_1))){    for (    Line line : lines) {      writer.println(line.toString());    }  } }  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.429 -0500",hash_original_method="396FE4FDBD72A1A44CDA1D64A960A2B6",hash_generated_method="E7D49A0DBE7DE3D1C84124DB37885C80") public void printStackTrace(java.io.PrintStream s){  printStackTrace(new java.io.PrintWriter(s));}  }
class C{  public boolean isInBoundsX(float x){  if ((x < 0) || ((x + getWidth()) > getParentWorld().getWidth())) {    return false;  }  return true;}  }
class C{  private static byte[] toByteArray(InputStream inputStream) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  byte buffer[]=new byte[8192];  while (true) {    int read=inputStream.read(buffer);    if (read == -1) {      break;    }    baos.write(buffer,0,read);  }  return baos.toByteArray();}  }
class C{  public void onMouseClicked(MapMouseEvent ev){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addEntityId(BaseStorageEntity param){  if (localEntityId == null) {    localEntityId=new BaseStorageEntity[]{};  }  localEntityIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localEntityId);  list.add(param);  this.localEntityId=(BaseStorageEntity[])list.toArray(new BaseStorageEntity[list.size()]);}  }
class C{  public void background(int rgb,float alpha){  colorCalc(rgb,alpha);  backgroundFromCalc();}  }
class C{  public TestCertificate(String diff){  super(TYPE);  this.diff=diff;}  }
class C{  @PostConstruct public void init(){  sessionID=httpSession.getId();  NGSessionScopeContext.setCurrentContext(sessionID);  ngSession.setSessionId(sessionID);}  }
class C{  @Override public boolean equals(Object other){  return this == other || other instanceof JsonNull;}  }
class C{  public void namespaceAfterStartElement(String prefix,String uri) throws SAXException {  if (m_firstTagNotEmitted && m_firstElementURI == null && m_firstElementName != null) {    String prefix1=getPrefixPart(m_firstElementName);    if (prefix1 == null && EMPTYSTRING.equals(prefix)) {      m_firstElementURI=uri;    }  }  startPrefixMapping(prefix,uri,false);}  }
class C{  protected ViewListener createViewListener(){  return new ViewListener();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.818 -0500",hash_original_method="FB2C80FA06C3B0FD8EA5024440AD49C3",hash_generated_method="4C5B9C290142B7ABBA04B3A95FCA1458") public BerInputStream(byte[] encoded,int offset,int expectedLength) throws IOException {  this.in=null;  this.buffer=encoded;  this.offset=offset;  next();  if (length != INDEFINIT_LENGTH && (offset + expectedLength) != (this.offset + this.length)) {    throw new ASN1Exception("Wrong content length");  }}  }
class C{  public IntPoint(String name,int... point){  super(name,pack(point),getType(point.length));}  }
class C{  final public static boolean hemisphere_clip(float phi1,float lambda0,float phi,float lambda){  return (GreatCircle.sphericalDistance(phi1,lambda0,phi,lambda) <= HEMISPHERE_EDGE);}  }
class C{  private void writeStopData(final List<CountSimComparison> countSimComparisonList,final FolderType folder,PtCountsType type){  Id<Link> stopid;  PlacemarkType placemark;  double relativeError;  Coord coord;  PointType point;  for (  CountSimComparison csc : countSimComparisonList) {    stopid=csc.getId();    Count count;switch (type) {case Boarding:      count=this.boardCounts.getCount(stopid);    break;case Alighting:  count=this.alightCounts.getCount(stopid);break;default :count=this.occupancyCounts.getCount(stopid);}coord=this.coordTransform.transform(count.getCoord());relativeError=csc.calculateRelativeError();placemark=createPlacemark(stopid.toString(),csc,relativeError,csc.getHour(),type);point=kmlObjectFactory.createPointType();point.getCoordinates().add(Double.toString(coord.getX()) + "," + Double.toString(coord.getY())+ ",0.0");placemark.setAbstractGeometryGroup(kmlObjectFactory.createPoint(point));if (csc.getSimulationValue() > csc.getCountValue()) {if (csc.getSimulationValue() < csc.getCountValue() * 1.5) {placemark.setStyleUrl(this.greenCrossStyle.getId());} else if (csc.getSimulationValue() < csc.getCountValue() * 2) {placemark.setStyleUrl(this.yellowCrossStyle.getId());} else {placemark.setStyleUrl(this.redCrossStyle.getId());}} else {if (csc.getSimulationValue() > csc.getCountValue() * 0.75) {placemark.setStyleUrl("#greenMinusStyle");} else if (csc.getSimulationValue() > csc.getCountValue() * 0.5) {placemark.setStyleUrl("#yellowMinusStyle");} else {placemark.setStyleUrl("#redMinusStyle");}}folder.getAbstractFeatureGroup().add(kmlObjectFactory.createPlacemark(placemark));}}  }
class C{  HadoopMapReduceCounterGroup(HadoopMapReduceCounters cntrs,String name){  this.cntrs=cntrs;  this.name=name;}  }
class C{  public RColumn(Properties ctx,String columnName,int displayType,int AD_Reference_Value_ID){  this(ctx,columnName,displayType,null,AD_Reference_Value_ID,null);}  }
class C{  public static String calculateCertHexHash(X509Certificate cert) throws Exception {  return hexDigest(DEFAULT_CERT_HASH_ALGORITHM_ID,cert.getEncoded());}  }
class C{  public NondominatedPopulation(DominanceComparator comparator,Iterable<? extends Solution> iterable){  this(comparator);  addAll(iterable);}  }
class C{  public final boolean isDebugEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG);}  }
class C{  public String put(String key,String value){  cachedKeySet.clear();  String canonical=canonicalKey(key);  if (strict && !defaultProps.containsKey(canonical)) {    throw new ApplicationPropertyError("Key [" + key + "] does not exist in defaults and, therefore, cannot be set by the application.");  }  return applicationProps.put(canonical,value);}  }
class C{  public SimpleInputMethodWindow(String title,InputContext context){  super(title);  if (context != null) {    this.inputContext=context;  }  setFocusableWindowState(false);}  }
class C{  public void deleteResource() throws ForbiddenAccessException {  checkPermission(DeletePermission.class,this);  Map<String,Relationship> relations=getRelationships();  for (  Map.Entry<String,Relationship> entry : relations.entrySet()) {    String relationName=entry.getKey();    if (dictionary.cascadeDeletes(getResourceClass(),relationName)) {      continue;    }    String inverseRelationName=dictionary.getRelationInverse(getResourceClass(),relationName);    if (!inverseRelationName.equals("")) {      for (      PersistentResource inverseResource : getRelationCheckedFiltered(relationName)) {        if (hasInverseRelation(relationName)) {          deleteInverseRelation(relationName,inverseResource.getObject());          inverseResource.markDirty();        }      }    }  }  transaction.delete(getObject());  auditClass(Audit.Action.DELETE,new ChangeSpec(this,null,getObject(),null));  runTriggers(OnDelete.class);}  }
class C{  public TopicObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  private Boolean isMaxMessageSizeExceededBasic(){  return fieldMaxMessageSizeExceeded;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size);  Object[] tab=table;  for (int i=0; i < tab.length; i+=2) {    Object key=tab[i];    if (key != null) {      s.writeObject(unmaskNull(key));      s.writeObject(tab[i + 1]);    }  }}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"loopne");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not a loopne instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final List<? extends IOperandTree> operands=instruction.getOperands();  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(archSize);  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String loopTarget=Helpers.getLeafValue(operands.get(0).getRootNode());  final String tempEcx=environment.getNextVariableString();  final String ecxZero=environment.getNextVariableString();  final String ecxNotZero=environment.getNextVariableString();  final String zfZero=environment.getNextVariableString();  final String condition=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(baseOffset,archSize,"ecx",archSize,"1",archSize,tempEcx));  instructions.add(ReilHelpers.createAnd(baseOffset + 1,resultSize,tempEcx,archSize,truncateMask,archSize,"ecx"));  instructions.add(ReilHelpers.createBisz(baseOffset + 2,archSize,"ecx",OperandSize.BYTE,ecxZero));  instructions.add(ReilHelpers.createBisz(baseOffset + 3,OperandSize.BYTE,ecxZero,OperandSize.BYTE,ecxNotZero));  instructions.add(ReilHelpers.createBisz(baseOffset + 4,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,zfZero));  instructions.add(ReilHelpers.createAnd(baseOffset + 5,OperandSize.BYTE,ecxNotZero,OperandSize.BYTE,zfZero,OperandSize.BYTE,condition));  instructions.add(ReilHelpers.createJcc(baseOffset + 6,OperandSize.BYTE,condition,archSize,loopTarget));}  }
class C{  public CWindowCloser(final JGraphTab graphPane){  Preconditions.checkNotNull(graphPane,"IE01636: Graph pane argument can not be null");  m_tabbedPane=graphPane;}  }
class C{  private int countCharsStart(char ch){  int count=0;  for (int i=0; i < this.value.length(); i++) {    final char c=this.value.charAt(i);    if (c == ' ') {      continue;    }    if (c == ch) {      count++;    } else {      break;    }  }  return count;}  }
class C{  public Knowledge(){  clearExplicitKnowledge();  clearTiers();}  }
class C{  public List<JsonObject> executeParametrizedStatement(String statement,List<Object> parameters){  JsonArray positionalParams=JsonArray.from(parameters);  ParameterizedN1qlQuery query=N1qlQuery.parameterized(statement,positionalParams);  return executeQuery(query);}  }
class C{  public DefaultClientWebRequestBuilder cookie(String name,String value){  return cookie(new HttpCookie(name,value));}  }
class C{  public void testIncrementValue(){  DefaultCategoryDataset d=new DefaultCategoryDataset();  d.addValue(1.0,"R1","C1");  d.incrementValue(2.0,"R1","C1");  assertEquals(new Double(3.0),d.getValue("R1","C1"));  d.addValue(null,"R2","C1");  d.incrementValue(2.0,"R2","C1");  assertEquals(new Double(2.0),d.getValue("R2","C1"));  boolean pass=false;  try {    d.incrementValue(1.0,"XX","C1");  } catch (  UnknownKeyException e) {    pass=true;  }  assertTrue(pass);  pass=false;  try {    d.incrementValue(1.0,"R1","XX");  } catch (  UnknownKeyException e) {    pass=true;  }  assertTrue(pass);}  }
class C{  public boolean isMultipleAllowed(){  return this.multipleAllowed;}  }
class C{  @Override public String toString(){  return ("gaussian_combination(s1=" + sigma1 + ",s2="+ sigma2+ ",s3="+ sigma3+ ")");}  }
class C{  protected void onTakedPhoto(int requestCode){  if (requestCode != TakePhotoPresenter.REQUEST_IMAGE_CAPTURE) {    return;  }  String imgUri=mTakePhotoPresenter.updateImageToMediaLibrary();  List<String> selectedList=mImageSelectedAdapter.getDataSource();  selectedList.remove(Constants.ADD_IMAGE_PATH_SAMPLE);  if (selectedList.size() < 9) {    selectedList.add(imgUri);    appendAddImageIfLessThanNine(selectedList);  } else {    ToastMsg.showShortMsgByResName("umeng_comm_image_overflow");  }  mImageSelectedAdapter.notifyDataSetChanged();}  }
class C{  @VisibleForTesting void registerNewRequest(long currentTimestamp){  mCurrentRequest=createRequestData(currentTimestamp,null);  mBackoffScheduler.resetFailedAttempts();  mTimestampForNextPostAttempt=currentTimestamp;  mTimestampForNewRequest=currentTimestamp + MS_BETWEEN_REQUESTS;  scheduleRepeatingAlarm();  saveState();}  }
class C{  @Override public long longValue(){  return value;}  }
class C{  public PopupExcludeFromProxyMenu(){  super(Constant.messages.getString("sites.exclude.proxy.popup"),true);}  }
class C{  @Override public boolean onDown(MotionEvent e){  return false;}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer processId,Principal principal){  RestWrapper restWrapper=null;  try {    com.wipro.ats.bdre.md.dao.jpa.Process process=processDAO.get(processId);    processDAO.securityCheck(process.getProcess().getProcessId(),principal.getName(),WRITE);    processDAO.delete(processId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record  with ID:" + processId + " deleted from Process by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static WsAgentStateEvent createWsAgentStoppedEvent(){  return new WsAgentStateEvent(WsAgentState.STOPPED);}  }
class C{  private final boolean lookbehind(char c,int n){  boolean isToken;  int lookBehindPos=m_queueMark - (n + 1);  if (lookBehindPos >= 0) {    String lookbehind=(String)m_ops.m_tokenQueue.elementAt(lookBehindPos);    if (lookbehind.length() == 1) {      char c0=(lookbehind == null) ? '|' : lookbehind.charAt(0);      isToken=(c0 == '|') ? false : (c0 == c);    } else {      isToken=false;    }  } else {    isToken=false;  }  return isToken;}  }
class C{  public int[] remove(int i){  boundsCheck(i,0);  int rows=sizes.size();  if (i >= rows)   throw new ArrayIndexOutOfBoundsException("LBJ: IVector2D: Can't remove row at index " + i + " as it is larger than the size ("+ rows+ ")");  int[] result=vector[i];  for (int j=i + 1; j < rows; ++j)   vector[j - 1]=vector[j];  vector[rows - 1]=null;  sizes.remove(i);  return result;}  }
class C{  private void configureRemote() throws Exception {  String remoteHost=rsvc.getString(RuntimeConstants.LOGSYSTEM_LOG4J_REMOTE_HOST);  int remotePort=rsvc.getInt(RuntimeConstants.LOGSYSTEM_LOG4J_REMOTE_PORT,1099);  if (remoteHost == null || remoteHost.trim().equals("") || remotePort <= 0) {    return;  }  Appender appender=new SocketAppender(remoteHost,remotePort);  logger.addAppender(appender);}  }
class C{  protected void startNode(Node node) throws org.xml.sax.SAXException {  if (m_contentHandler instanceof NodeConsumer) {    ((NodeConsumer)m_contentHandler).setOriginatingNode(node);  }  if (node instanceof Locator) {    Locator loc=(Locator)node;    m_locator.setColumnNumber(loc.getColumnNumber());    m_locator.setLineNumber(loc.getLineNumber());    m_locator.setPublicId(loc.getPublicId());    m_locator.setSystemId(loc.getSystemId());  } else {    m_locator.setColumnNumber(0);    m_locator.setLineNumber(0);  }switch (node.getNodeType()) {case Node.COMMENT_NODE:{      String data=((Comment)node).getData();      if (m_contentHandler instanceof LexicalHandler) {        LexicalHandler lh=((LexicalHandler)this.m_contentHandler);        lh.comment(data.toCharArray(),0,data.length());      }    }  break;case Node.DOCUMENT_FRAGMENT_NODE:break;case Node.DOCUMENT_NODE:break;case Node.ELEMENT_NODE:NamedNodeMap atts=((Element)node).getAttributes();int nAttrs=atts.getLength();for (int i=0; i < nAttrs; i++) {Node attr=atts.item(i);String attrName=attr.getNodeName();if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {int index;String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);this.m_contentHandler.startPrefixMapping(prefix,attr.getNodeValue());}}String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.startElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName(),new AttList(atts,m_dh));break;case Node.PROCESSING_INSTRUCTION_NODE:{ProcessingInstruction pi=(ProcessingInstruction)node;String name=pi.getNodeName();if (name.equals("xslt-next-is-raw")) {nextIsRaw=true;} else {this.m_contentHandler.processingInstruction(pi.getNodeName(),pi.getData());}}break;case Node.CDATA_SECTION_NODE:{boolean isLexH=(m_contentHandler instanceof LexicalHandler);LexicalHandler lh=isLexH ? ((LexicalHandler)this.m_contentHandler) : null;if (isLexH) {lh.startCDATA();}dispatachChars(node);{if (isLexH) {lh.endCDATA();}}}break;case Node.TEXT_NODE:{if (nextIsRaw) {nextIsRaw=false;m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");dispatachChars(node);m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");} else {dispatachChars(node);}}break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());} else {}}break;default :}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CTagSelectedNodesAction(final JFrame parent,final CTagsTree tagsTree,final ZyGraph graph){  super("Tag selected Nodes");  Preconditions.checkNotNull(parent,"IE02168: Parent argument can not be null");  Preconditions.checkNotNull(tagsTree,"IE02169: Tree argument can not be null");  Preconditions.checkNotNull(graph,"IE02170: Graph argument can not be null");  m_parent=parent;  m_tagsTree=tagsTree;  m_graph=graph;}  }
class C{  public void pause() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  pause(null);}  }
class C{  public CrankyCodec(Codec delegate,Random random){  super(delegate.getName(),delegate);  this.random=random;}  }
class C{  @Procedure @PerformsWrites @Description("apoc.refactor.normalizeAsBoolean(entity, propertyKey, true_values, false_values) normalize/convert a property to be boolean") public void normalizeAsBoolean(@Name("entity") Object entity,@Name("propertyKey") String propertyKey,@Name("true_values") List<Object> trueValues,@Name("false_values") List<Object> falseValues){  if (entity instanceof PropertyContainer) {    PropertyContainer pc=(PropertyContainer)entity;    Object value=pc.getProperty(propertyKey,null);    if (value != null) {      boolean isTrue=trueValues.contains(value);      boolean isFalse=falseValues.contains(value);      if (isTrue && !isFalse) {        pc.setProperty(propertyKey,true);      }      if (!isTrue && isFalse) {        pc.setProperty(propertyKey,false);      }      if (!isTrue && !isFalse) {        pc.removeProperty(propertyKey);      }    }  }}  }
class C{  public CCDeccelAmplitude(CCIntervalAction action,float d){  super(d);  rate=1.0f;  other=action;}  }
class C{  public DataTableModel(Instances data){  this();  this.m_Data=data;}  }
class C{  public Extensions(){  this.extensions=null;}  }
class C{  public int hashCode(){  return toHashCode();}  }
class C{  @Override public E remove(int location){  E result;  if (location < 0 || location >= size) {    throw new IndexOutOfBoundsException("" + location + " out of: "+ size);  }  if (location == 0) {    result=array[firstIndex];    array[firstIndex++]=null;  } else   if (location == size - 1) {    int lastIndex=firstIndex + size - 1;    result=array[lastIndex];    array[lastIndex]=null;  } else {    int elementIndex=firstIndex + location;    result=array[elementIndex];    if (location < size / 2) {      System.arraycopy(array,firstIndex,array,firstIndex + 1,location);      array[firstIndex++]=null;    } else {      System.arraycopy(array,elementIndex + 1,array,elementIndex,size - location - 1);      array[firstIndex + size - 1]=null;    }  }  size--;  if (size == 0) {    firstIndex=0;  }  modCount++;  return result;}  }
class C{  protected boolean isMappedToRoot(){  String prefix=configurationProperties.getUrlMapping();  if (prefix == null) {    return true;  }  prefix=prefix.trim().replaceAll("(/\\**)?$","");  return "".equals(prefix);}  }
class C{  private JPanel buildRow(final String string,final JCheckBox checkBox){  final JPanel panel=new JPanel(new BorderLayout());  panel.add(new JLabel(string),BorderLayout.WEST);  panel.add(checkBox,BorderLayout.EAST);  checkBox.addItemListener(m_checkBoxListener);  return panel;}  }
class C{  @Override public boolean isEnabled(){  return mIsEnabled;}  }
class C{  public static void ensureFromTo(final char[] a,final int from,final int to){  ensureFromTo(a.length,from,to);}  }
class C{  protected int doConsumeOffHeapMemory(int allocationSize){  OffHeapMemoryStats stats=((GemFireCacheImpl)getCache()).getOffHeapStore().getStats();  int i=0;  try {    while (true) {      doPut("KEY" + (i++),new byte[allocationSize],OFF_HEAP_REGION_NAME,false);    }  } catch (  OutOfOffHeapMemoryException e) {  }  return i;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void run(final Set<String> modes){  run(modes,new HashSet<String>());}  }
class C{  private void insertMemberAt(final TypeMember member,final DefaultMutableTreeNode parentNode,final int index){  final TypeMemberTreeNode memberNode=new TypeMemberTreeNode(member);  parentNode.insert(memberNode,index);  createTypeNodes(memberNode,member.getBaseType());  nestedStructNodes.put(member.getBaseType(),memberNode);  memberNodes.put(member,memberNode);}  }
class C{  public boolean isSmsFallback() throws RcsGenericException {  try {    return mIConfig.isSmsFallback();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("");  HttpSession sess=request.getSession();  WWindowStatus ws=WWindowStatus.get(request);  if (ws == null) {    MobileUtil.createTimeoutPage(request,response,this,null);    return;  }  String columnName=MobileUtil.getParameter(request,"ColumnName");  log.info("ColumnName=" + columnName + " - "+ ws.toString());  GridField mField=ws.curTab.getField(columnName);  log.config("ColumnName=" + columnName + ", MField="+ mField);  if (mField == null || columnName == null || columnName.equals("")) {    MobileUtil.createErrorPage(request,response,this,Msg.getMsg(ws.ctx,"ParameterMissing"));    return;  }  MLocation location=null;  Object value=mField.getValue();  if (value != null && value instanceof Integer)   location=new MLocation(ws.ctx,((Integer)value).intValue(),null); else   location=new MLocation(ws.ctx,0,null);  String targetBase="opener.WWindow." + WWindow.FORM_NAME + "."+ columnName;  String action=request.getRequestURI();  MobileDoc doc=MobileDoc.createPopup(mField.getHeader());  boolean hasDependents=ws.curTab.hasDependants(columnName);  boolean hasCallout=mField.getCallout().length() > 0;  button reset=new button();  reset.addElement("Reset");  String script=targetBase + "D.value='';" + targetBase+ "F.value='';closePopup();";  if (hasDependents || hasCallout)   script+="startUpdate(" + targetBase + "F);";  reset.setOnClick(script);  div div=new div();  div.setClass("toolbar");  h1 header=new h1();  header.setID("pageTitle");  div.addElement(header);  a anchor=new a();  anchor.setID("backButton");  anchor.setClass("button");  div.addElement(anchor);  doc.getBody().addElement(fillForm(ws,action,location,targetBase,hasDependents || hasCallout)).addElement(reset).addElement(div);  MobileUtil.createResponse(request,response,this,null,doc,true);}  }
class C{  @Override public List<byte[]> rowKeys(String profile,String entity,List<Object> groups,long start,long end){  List<byte[]> rowKeys=new ArrayList<>();  end=Math.max(start,end);  start=Math.min(start,end);  ProfilePeriod period=new ProfilePeriod(start,periodDurationMillis,TimeUnit.MILLISECONDS);  while (period.getStartTimeMillis() <= end) {    byte[] k=rowKey(profile,entity,period,groups);    rowKeys.add(k);    period=period.next();  }  return rowKeys;}  }
class C{  public void testAcceptSomeCatalogDML() throws Exception {  CatalogDataFilter tcf=new CatalogDataFilter();  tcf.setTungstenSchema("tungsten_foo");  filterHelper.setFilter(tcf);  verifyStmtAccept(filterHelper,0,null,"insert into tungsten_foo.consistency(val) values(1)");  verifyStmtAccept(filterHelper,0,null,"update tungsten_foo.heartbeat set seqno=100 where id=1");  verifyStmtIgnore(filterHelper,0,"tungsten_foo","insert into heartbeat(val) values(1)");  verifyStmtIgnore(filterHelper,0,null,"update tungsten_foo.trep_commit_seqno sets seqno=100 where task_id=1");  verifyStmtIgnore(filterHelper,0,"tungsten_foo","insert into tungsten_foo.trep_shard values(1, 2)");  verifyStmtIgnore(filterHelper,0,null,"DELETE FROM tungsten_foo.trep_shard_CHANNEL");  String names[]={"id"};  Long values[]={new Long(99)};  verifyRowInsertAccept(filterHelper,0,"tungsten_foo","consistency",names,values);  verifyRowUpdateAccept(filterHelper,1,"tungsten_foo","heartbeat",names,values,values);  verifyRowInsertIgnore(filterHelper,1,"tungsten_foo","heartbeat",names,values);  verifyRowInsertIgnore(filterHelper,2,"tungsten_foo","trep_commit_seqno",names,values);  verifyRowInsertIgnore(filterHelper,3,"tungsten_foo","trep_shard",names,values);  verifyRowInsertIgnore(filterHelper,4,"tungsten_foo","trep_shard_channel",names,values);  filterHelper.done();}  }
class C{  public TopicPartitionInitialOffset(String topic,int partition,Long initialOffset,boolean relativeToCurrent){  this.topicPartition=new TopicPartition(topic,partition);  this.initialOffset=initialOffset;  this.relativeToCurrent=relativeToCurrent;}  }
class C{  public static <NodeType extends ZyGraphNode<?>>void zoomToNode(final AbstractZyGraph<NodeType,?> graph,final NodeType node){  Preconditions.checkNotNull(node,"Error: Node argument can't be null");  final NodeRealizer realizer=graph.getGraph().getRealizer(node.getNode());  Preconditions.checkNotNull(realizer,"Error: Node does not belong to the graph");  if (!node.isVisible()) {    graph.showNode(node,true);  }  final double oldZoom=graph.getView().getZoom();  final Point2D oldViewPoint=graph.getView().getViewPoint2D();  graph.getView().zoomToArea(realizer.getCenterX() - realizer.getWidth(),realizer.getCenterY() - realizer.getHeight(),realizer.getWidth() * 2,realizer.getHeight() * 2);  ZoomHelpers.keepZoomValid(graph.getView());  final double newZoom=graph.getView().getZoom();  final Point2D newCenter=graph.getView().getCenter();  graph.getView().setZoom(oldZoom);  graph.getView().setViewPoint((int)oldViewPoint.getX(),(int)oldViewPoint.getY());  graph.getView().focusView(newZoom,newCenter,graph.getSettings().getLayoutSettings().getAnimateLayout());  graph.updateViews();}  }
class C{  public static void writeStringValue(int hkey,String key,String valueName,String value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (hkey == HKEY_LOCAL_MACHINE) {    writeStringValue(systemRoot,hkey,key,valueName,value);  } else   if (hkey == HKEY_CURRENT_USER) {    writeStringValue(userRoot,hkey,key,valueName,value);  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }}  }
class C{  protected ValueBlock(String fxml,ToplevelPane pane,Type type){  super(pane);  loadFXML(fxml);  this.type=type;  output=new OutputAnchor(this,new Binder("val",type));  outputSpace.getChildren().add(output);}  }
class C{  public static Float[] valuesOf(float[] array){  Float[] dest=new Float[array.length];  for (int i=0; i < array.length; i++) {    dest[i]=Float.valueOf(array[i]);  }  return dest;}  }
class C{  public ReadOnlyNodeData(final AbstractFixedByteArrayBuffer buf,final IRabaCoder keysCoder){  if (buf == null)   throw new IllegalArgumentException();  if (keysCoder == null)   throw new IllegalArgumentException();  int pos=O_TYPE;  final byte type=buf.getByte(pos);  pos+=SIZEOF_TYPE;switch (type) {case NODE:    break;case LEAF:  throw new AssertionError();case LINKED_LEAF:throw new AssertionError();default :throw new AssertionError("type=" + type);}version=buf.getShort(pos);pos+=SIZEOF_VERSION;switch (version) {case VERSION0:case VERSION1:break;default :throw new AssertionError("version=" + version);}flags=buf.getShort(pos);pos+=SIZEOF_FLAGS;this.nkeys=buf.getInt(pos);pos+=SIZEOF_NKEYS;if (version == ReadOnlyNodeData.VERSION0) {this.nentries=buf.getInt(pos);pos+=Bytes.SIZEOF_INT;} else {this.nentries=buf.getLong(pos);pos+=Bytes.SIZEOF_LONG;}if (nentries < 0) {throw new RuntimeException();}final int keysSize=buf.getInt(pos);pos+=SIZEOF_KEYS_SIZE;O_keys=pos;this.keys=keysCoder.decode(buf.slice(O_keys,keysSize));pos+=keysSize;if (keys.size() != nkeys) throw new RuntimeException("nkeys=" + nkeys + ", keys.size="+ keys.size());O_childAddr=pos;O_childEntryCount=O_childAddr + (nkeys + 1) * SIZEOF_ADDR;if (version >= ReadOnlyNodeData.VERSION1) {childEntryCountBits=buf.getByte(O_childEntryCount);} else {childEntryCountBits=-1;}minChildEntryCount=buf.getLong(O_childEntryCount + 1);this.b=buf;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.TSTRUCT_SETTER__DEFINED_MEMBER:    setDefinedMember((TStructMember)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.OBJECT_LITERAL__DEFINED_TYPE:    return definedType != null;case N4JSPackage.OBJECT_LITERAL__PROPERTY_ASSIGNMENTS:  return propertyAssignments != null && !propertyAssignments.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  public int indexOfObject(Object obj){  NSObject nso=NSObject.fromJavaObject(obj);  for (int i=0; i < array.length; i++) {    if (array[i].equals(nso)) {      return i;    }  }  return -1;}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  AttributeCertificateInfo acinfo=attrCert.getAcinfo();  if (!CertUtils.isAlgIdEqual(acinfo.getSignature(),attrCert.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((acinfo.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(acinfo);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(attrCert.getSignatureValue().getBytes());}  }
class C{  public CatalogEntryRemovedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public long rewardedCount(final String dataId,final int type){  final Query query=new Query();  final List<Filter> filters=new ArrayList<Filter>();  filters.add(new PropertyFilter(Reward.DATA_ID,FilterOperator.EQUAL,dataId));  filters.add(new PropertyFilter(Reward.TYPE,FilterOperator.EQUAL,type));  query.setFilter(new CompositeFilter(CompositeFilterOperator.AND,filters));  try {    return rewardRepository.count(query);  } catch (  final RepositoryException e) {    LOGGER.log(Level.ERROR,"Rewarded count error",e);    return 0;  }}  }
class C{  static boolean isInstanceOfDoubleCondnRangeJunctionEvaluator(Object o){  return o instanceof RangeJunction.DoubleCondnRangeJunctionEvaluator;}  }
class C{  public String invertSelectionTipText(){  return "Whether to invert the selection.";}  }
class C{  public ASN1UTCTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  @Override public int compareTo(FirewallRule rule){  return this.priority - rule.priority;}  }
class C{  protected byte[] forgeAuthentication(){  final Keys keys=Keys.self();  final byte[] data=new byte[104];  final DataBuffer dataBuffer=new DataBuffer(data,0,data.length);  dataBuffer.write(Kd);  dataBuffer.write(Nonce);  if (Cfg.DEBUG) {    Check.ensures(dataBuffer.getPosition() == 32,"forgeAuthentication 1, wrong array size");  }  dataBuffer.write(ByteArray.padByteArray(keys.getBuildId(),16));  dataBuffer.write(keys.getInstanceId());  dataBuffer.write(ByteArray.padByteArray(Keys.getSubtype(),16));  if (Cfg.DEBUG) {    Check.ensures(dataBuffer.getPosition() == 84,"forgeAuthentication 2, wrong array size");  }  final SHA1Digest digest=new SHA1Digest();  digest.update(ByteArray.padByteArray(keys.getBuildId(),16));  digest.update(keys.getInstanceId());  digest.update(ByteArray.padByteArray(Keys.getSubtype(),16));  digest.update(keys.getConfKey());  final byte[] sha1=digest.getDigest();  dataBuffer.write(sha1);  if (Cfg.DEBUG) {    Check.ensures(dataBuffer.getPosition() == data.length,"forgeAuthentication 3, wrong array size");  }  return data;}  }
class C{  public boolean isActive(){  return m_list.size() != 0;}  }
class C{  @Override protected Appender<ILoggingEvent> createAppender(LoggerContext context,Encoder<ILoggingEvent> encoder){  if (!isRolling()) {    FileAppender<ILoggingEvent> appender=new FileAppender<ILoggingEvent>();    appender.setFile(file);    appender.setEncoder(encoder);    return appender;  } else {    RollingFileAppender<ILoggingEvent> appender;    if (dailyLogFiles) {      appender=createDailyLogAppender(context,encoder);    } else {      appender=createLogAppender(context,encoder);    }    return appender;  }}  }
class C{  private static int[] make_crc_table(){  int[] crc_table=new int[256];  for (int n=0; n < 256; n++) {    int c=n;    for (int k=8; --k >= 0; ) {      if ((c & 1) != 0)       c=0xedb88320 ^ (c >>> 1); else       c=c >>> 1;    }    crc_table[n]=c;  }  return crc_table;}  }
class C{  public void addEvenChildCondition(){  _specificityC++;  addCondition(Condition.createEvenChildCondition());}  }
class C{  public static void addModuleClass(Class<? extends IModule> clazz){  modules.add(clazz);}  }
class C{  @SuppressWarnings("unused") protected SimplePCollectionView(){  super();}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitBooleanMemberValue(this);}  }
class C{  @NonNull public IconDrawable alpha(@ColorInt int alpha){  setAlpha(alpha);  return this;}  }
class C{  public TrafficChannelEvent(TrafficChannelManager trafficChannelManager,Channel channel,Event event,CallEvent callEvent){  super(channel,event);  mTrafficChannelManager=trafficChannelManager;  mCallEvent=callEvent;}  }
class C{  public static char[] encode(byte[] in,int iOff,int iLen){  final int oDataLen=(iLen * 4 + 2) / 3;  final int oLen=(iLen + 2) / 3 * 4;  final char[] out=new char[oLen];  int ip=iOff;  final int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    final int i0=in[ip++] & 0xff;    final int i1=ip < iEnd ? in[ip++] & 0xff : 0;    final int i2=ip < iEnd ? in[ip++] & 0xff : 0;    final int o0=i0 >>> 2;    final int o1=(i0 & 3) << 4 | i1 >>> 4;    final int o2=(i1 & 0xf) << 2 | i2 >>> 6;    final int o3=i2 & 0x3F;    out[op++]=MAP1[o0];    out[op++]=MAP1[o1];    out[op]=op < oDataLen ? MAP1[o2] : '=';    op++;    out[op]=op < oDataLen ? MAP1[o3] : '=';    op++;  }  return out;}  }
class C{  public void generateCode(CompilationUnitScope unitScope){  generateCode();}  }
class C{  @Override public void connectionFailed(ActiveMQException exception,boolean failedOver){  decideOnAction(sessionFactory.getServerLocator().getTopology());}  }
class C{  public void testSomeEndNodesNotReachable(boolean fastRouter){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=makeMultiNodeDikstra(f.network,tc,tc,fastRouter);  List<InitialNode> fromNodes=new ArrayList<InitialNode>();  List<InitialNode> toNodes=new ArrayList<InitialNode>();  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(2,Node.class)),2.0,2.0));  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(1,Node.class)),3.0,3.0));  toNodes.add(new InitialNode(f.network.getNodes().get(Id.create(5,Node.class)),1.0,1.0));  toNodes.add(new InitialNode(f.network.getNodes().get(Id.create(3,Node.class)),3.0,3.0));  Node fromNode=dijkstra.createImaginaryNode(fromNodes);  Node toNode=dijkstra.createImaginaryNode(toNodes);  Path p=createPath(dijkstra,fromNode,toNode);  Assert.assertNotNull("no path found!",p);  Assert.assertEquals(3,p.links.size());  Assert.assertEquals("2",p.links.get(0).getId().toString());  Assert.assertEquals("7",p.links.get(1).getId().toString());  Assert.assertEquals("5",p.links.get(2).getId().toString());}  }
class C{  public boolean forwardIfCurrent(String str){  boolean is=isCurrent(str);  if (is)   pos+=str.length();  return is;}  }
class C{  @Deprecated public SelfStartingMonitoringView(MonitoringView monitoringView,final long quietPeriodInMillis){  dynamicMonitoringView=new DynamicMonitoringView(monitoringView,quietPeriodInMillis);}  }
class C{  public void testDecodeAttributeBodyv6() throws StunException {  byte[] attributeValue=msgFixture.mappedAddressv6;  char offset=Attribute.HEADER_LENGTH;  char length=(char)(attributeValue.length - offset);  addressAttribute.decodeAttributeBody(attributeValue,offset,length);  assertEquals("decode() failed for an IPv6 Addr's port.",MsgFixture.ADDRESS_ATTRIBUTE_PORT,addressAttribute.getPort());  assertTrue("AddressAttribute.decode() failed for an IPv6 address.",Arrays.equals(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS_V6,addressAttribute.getAddressBytes()));}  }
class C{  public double measureNumRules(){  return m_root.numRules();}  }
class C{  public static <T>FutureW<T> fromIterable(final Iterable<T> iterable){  iterable.iterator();  return FutureW.ofResult(Eval.fromIterable(iterable)).map(null);}  }
class C{  private void drawMinefields(Graphics g){  Rectangle view=g.getClipBounds();  int drawX=(view.x / (int)(HEX_WC * scale)) - 1;  int drawY=(view.y / (int)(HEX_H * scale)) - 1;  int drawWidth=(view.width / (int)(HEX_WC * scale)) + 3;  int drawHeight=(view.height / (int)(HEX_H * scale)) + 3;  int maxX=drawX + drawWidth;  int maxY=drawY + drawHeight;  IBoard board=game.getBoard();  for (Enumeration<Coords> minedCoords=game.getMinedCoords(); minedCoords.hasMoreElements(); ) {    Coords c=minedCoords.nextElement();    if ((c.getX() < drawX) || (c.getX() > maxX) || (c.getY() < drawY)|| (c.getY() > maxY)|| !board.contains(c)) {      continue;    }    Point p=getHexLocation(c);    Image mineImg=getScaledImage(tileManager.getMinefieldSign(),true);    g.drawImage(mineImg,p.x + (int)(13 * scale),p.y + (int)(13 * scale),this);    g.setColor(Color.black);    int nbrMfs=game.getNbrMinefields(c);    if (nbrMfs > 1) {      drawCenteredString(Messages.getString("BoardView1.Multiple"),p.x,p.y + (int)(51 * scale),font_minefield,g);    } else     if (nbrMfs == 1) {      Minefield mf=game.getMinefields(c).get(0);switch (mf.getType()) {case (Minefield.TYPE_CONVENTIONAL):        drawCenteredString(Messages.getString("BoardView1.Conventional") + mf.getDensity() + ")",p.x,p.y + (int)(51 * scale),font_minefield,g);      break;case (Minefield.TYPE_INFERNO):    drawCenteredString(Messages.getString("BoardView1.Inferno") + mf.getDensity() + ")",p.x,p.y + (int)(51 * scale),font_minefield,g);  break;case (Minefield.TYPE_ACTIVE):drawCenteredString(Messages.getString("BoardView1.Active") + mf.getDensity() + ")",p.x,p.y + (int)(51 * scale),font_minefield,g);break;case (Minefield.TYPE_COMMAND_DETONATED):drawCenteredString(Messages.getString("BoardView1.Command-"),p.x,p.y + (int)(51 * scale),font_minefield,g);drawCenteredString(Messages.getString("BoardView1.detonated" + mf.getDensity() + ")"),p.x,p.y + (int)(60 * scale),font_minefield,g);break;case (Minefield.TYPE_VIBRABOMB):drawCenteredString(Messages.getString("BoardView1.Vibrabomb"),p.x,p.y + (int)(51 * scale),font_minefield,g);if (mf.getPlayerId() == localPlayer.getId()) {drawCenteredString("(" + mf.getSetting() + ")",p.x,p.y + (int)(60 * scale),font_minefield,g);}break;}}}}  }
class C{  private boolean checkAllowOrderBy(OrderBy order) throws ScopeException, SQLScopeException {  ExpressionAST expr=order.getExpression();  IDomain image=expr.getImageDomain();  if (image.isInstanceOf(AggregateDomain.DOMAIN)) {    return true;  } else {    Axis axis=universe.asAxis(order.getExpression());    if (axis == null) {      return false;    } else {      for (      AxisMapping ax : getMapper().getAxisMapping()) {        try {          if (axis.isParentDimension(ax.getAxis())) {            return true;          } else {            DateExpressionAssociativeTransformationExtractor ex=new DateExpressionAssociativeTransformationExtractor();            ExpressionAST naked1=ex.eval(axis.getDefinitionSafe());            ExpressionAST naked2=ex.eval(ax.getAxis().getDefinitionSafe());            return naked1.equals(naked2);          }        } catch (        ComputingException|InterruptedException e) {        }      }      return false;    }  }}  }
class C{  private void deleteAttachmentEntry(){  log.info("");  int index=cbContent.getSelectedIndex();  String fileName=getFileName(index);  if (fileName == null)   return;  if (ADialog.ask(m_WindowNo,this,"AttachmentDeleteEntry?",fileName)) {    if (m_attachment.deleteEntry(index))     cbContent.removeItemAt(index);    m_change=true;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:05.676 -0500",hash_original_method="758199315728DD79898C642BC32E0396",hash_generated_method="9C69BA60637CF2A860900E10547403B0") private static int bitToBnW(int bit){  if (bit == 1) {    return Color.WHITE;  } else {    return Color.BLACK;  }}  }
class C{  SslHandler(SslFilter sslFilter,IoSession session) throws SSLException {  this.sslFilter=sslFilter;  this.session=session;}  }
class C{  public static void main(String[] args) throws MetadataException, IOException {  if (args.length < 1 || args.length > 2) {    System.out.println("Usage: java -jar metadata-extractor-a.b.c.jar <filename> [/thumb]");    System.exit(1);  }  Metadata metadata=null;  try {    metadata=ImageMetadataReader.readMetadata(new File(args[0]));  } catch (  Exception e) {    e.printStackTrace(System.err);    System.exit(1);  }  Iterator directories=metadata.getDirectoryIterator();  while (directories.hasNext()) {    Directory directory=(Directory)directories.next();    Iterator tags=directory.getTagIterator();    while (tags.hasNext()) {      Tag tag=(Tag)tags.next();      try {        System.out.println("[" + directory.getName() + "] "+ tag.getTagName()+ " = "+ tag.getDescription());      } catch (      MetadataException e) {        System.err.println(e.getMessage());        System.err.println(tag.getDirectoryName() + " " + tag.getTagName()+ " (error)");      }    }    if (directory.hasErrors()) {      Iterator errors=directory.getErrors();      while (errors.hasNext()) {        System.out.println("ERROR: " + errors.next());      }    }  }  if (args.length > 1 && args[1].trim().equals("/thumb")) {    ExifDirectory directory=(ExifDirectory)metadata.getDirectory(ExifDirectory.class);    if (directory.containsThumbnail()) {      System.out.println("Writing thumbnail...");      directory.writeThumbnail(args[0].trim() + ".thumb.jpg");    } else {      System.out.println("No thumbnail data exists in this image");    }  }}  }
class C{  public static String signUsingRsaSha256(PrivateKey privateKey,JsonFactory jsonFactory,JsonWebSignature.Header header,JsonWebToken.Payload payload) throws GeneralSecurityException, IOException {  String content=Base64.encodeBase64URLSafeString(jsonFactory.toByteArray(header)) + "." + Base64.encodeBase64URLSafeString(jsonFactory.toByteArray(payload));  byte[] contentBytes=StringUtils.getBytesUtf8(content);  byte[] signature=SecurityUtils.sign(SecurityUtils.getSha256WithRsaSignatureAlgorithm(),privateKey,contentBytes);  return content + "." + Base64.encodeBase64URLSafeString(signature);}  }
class C{  public ResourceListParser parse() throws ParserConfigurationException, SAXException, ParseFailureException {  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    SAXParser parser=factory.newSAXParser();    parser.parse(mInputSource,this);    return this;  } catch (  IOException e) {    throw new ParseFailureException("Failed to parse input source!",e);  }}  }
class C{  public String addImport(String type){  if (isReadOnly())   return type;  ICompilationUnit cu=getCompilationUnit();  if (cu == null)   return type;  try {    boolean qualified=type.indexOf('.') != -1;    if (!qualified) {      IJavaSearchScope searchScope=SearchEngine.createJavaSearchScope(new IJavaElement[]{cu.getJavaProject()});      SimpleName nameNode=null;      TypeNameMatch[] matches=findAllTypes(type,searchScope,nameNode,null,cu);      if (matches.length != 1)       return type;      type=matches[0].getFullyQualifiedName();    }    CompilationUnit root=getASTRoot(cu);    if (fImportRewrite == null) {      if (root == null) {        fImportRewrite=StubUtility.createImportRewrite(cu,true);      } else {        fImportRewrite=StubUtility.createImportRewrite(root,true);      }    }    ImportRewriteContext context;    if (root == null)     context=null; else     context=new ContextSensitiveImportRewriteContext(root,getCompletionOffset(),fImportRewrite);    return fImportRewrite.addImport(type,context);  } catch (  JavaModelException e) {    handleException(null,e);    return type;  }}  }
class C{  public StemmedString(String orig,CharSequence stemmed){  strOrig=orig;  strStemmed=stemmed.toString();}  }
class C{  public void combine(Stats o){  max=Math.max(max,o.max);  min=Math.min(min,o.min);  m=m * (n / (double)(n + o.n)) + o.m * (o.n / (double)(n + o.n));  s=Double.NaN;  n+=o.n;}  }
