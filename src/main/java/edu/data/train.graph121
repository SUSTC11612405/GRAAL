class C{  protected final Object constructDocument(Node node){  Object data=constructObject(node);  fillRecursive();  constructedObjects.clear();  recursiveObjects.clear();  return data;}  }
class C{  public Composer transform(float x,float y){  this.x=x;  this.y=y;  return this;}  }
class C{  public RestoreCompletionNotification(URI uri){  super(uri);}  }
class C{  private void heapifyDown(Comparable<Object> cur){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    Comparable<Object> best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best.compareTo(twoheap[right]) > 0) {      bestchild=right;      best=twoheap[right];    }    if (cur.compareTo(best) <= 0) {      break;    }    twoheap[twopos]=best;    twopos=bestchild;  }  twoheap[twopos]=cur;}  }
class C{  public final void testGetItem(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter proxySpinnerAdapter=createAdapter(entries);  assertNull(proxySpinnerAdapter.getItem(0));  assertEquals("entry1",proxySpinnerAdapter.getItem(1));  assertEquals("entry2",proxySpinnerAdapter.getItem(2));}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:00.227 -0500",hash_original_method="65E0B786CE90103F5573BC67CE254CE7",hash_generated_method="443D77B734F979270FD63A599E4DC80F") public void keepZoomPickerVisible(){  ZoomControlBase control=getCurrentZoomControl();  if (control != null && control == mExternalZoomControl) {    control.show();  }}  }
class C{  private void generateAddrComparison(boolean signed,int cc){  popAddr(T1);  popAddr(T0);  asm.emitLVAL(T2,1);  if (signed) {    asm.emitCMPAddr(T0,T1);  } else {    asm.emitCMPLAddr(T0,T1);  }  ForwardReference fr=asm.emitForwardBC(cc);  asm.emitLVAL(T2,0);  fr.resolve(asm);  pushInt(T2);}  }
class C{  public VectorStoreReaderText(String vectorFileText,FlagConfig flagConfig) throws IOException {  this.vectorFileText=vectorFileText;  this.inBuf=new BufferedReader(new FileReader(vectorFileText));  try {    String firstLine=inBuf.readLine();    FlagConfig.mergeWriteableFlagsFromString(firstLine,flagConfig);    this.dimension=flagConfig.dimension();    this.vectorType=flagConfig.vectortype();  } catch (  IOException e) {    System.out.println("Cannot read file: " + vectorFileText + "\n"+ e.getMessage());  }}  }
class C{  public void testTwoFiles() throws IOException {  String files[]={"_123.d1","_123.d2"};  Directory dir=newDirectory();  SegmentInfo si=newSegmentInfo(dir,"_123");  createSequenceFile(dir,files[0],(byte)0,15,si.getId(),"suffix");  createSequenceFile(dir,files[1],(byte)0,114,si.getId(),"suffix");  si.setFiles(Arrays.asList(files));  si.getCodec().compoundFormat().write(dir,si,IOContext.DEFAULT);  Directory cfs=si.getCodec().compoundFormat().getCompoundReader(dir,si,IOContext.DEFAULT);  for (  String file : files) {    IndexInput expected=dir.openInput(file,newIOContext(random()));    IndexInput actual=cfs.openInput(file,newIOContext(random()));    assertSameStreams(file,expected,actual);    assertSameSeekBehavior(file,expected,actual);    expected.close();    actual.close();  }  cfs.close();  dir.close();}  }
class C{  private boolean compact(){  CompactableOplog[] oplogs=this.scheduledOplogs;  int totalCount=0;  long compactionStart=getStats().startCompaction();  long start=System.nanoTime();  try {    for (int i=0; i < oplogs.length && keepCompactorRunning(); i++) {      totalCount+=oplogs[i].compact(this);    }  }  finally {    getStats().endCompaction(compactionStart);  }  long endTime=System.nanoTime();  logger.info(LocalizedMessage.create(LocalizedStrings.DiskRegion_COMPACTION_SUMMARY,new Object[]{totalCount,((endTime - start) / 1000000)}));  return true;}  }
class C{  public static void clone(final CGraphWindow parent,final INaviView view,final IViewContainer container){  final CloneThread cloneThread=new CloneThread(parent,view,container);  CProgressDialog.showEndless(parent,String.format("Cloning view '%s'",view.getName()),cloneThread);  if (cloneThread.getException() != null) {    CUtilityFunctions.logException(cloneThread.getException());    final String innerMessage="E00118: " + "View could not be cloned";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The view '%s' could not be cloned.",view.getName()),new String[]{"It is unclear why this problem occurred. Please check the stack trace for more information."},new String[]{"The view was not cloned."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,cloneThread.getException());  }}  }
class C{  public int difference(String s1,String s2) throws EncoderException {  return SoundexUtils.difference(this,s1,s2);}  }
class C{  public ExifTag buildTag(int tagId,Object val){  int ifdId=getTrueIfd(tagId);  return buildTag(tagId,ifdId,val);}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
class C{  public BooleanMemberValue(boolean b,ConstPool cp){  super('Z',cp);  setValue(b);}  }
class C{  public int optInt(int index){  return this.optInt(index,0);}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForHtmlUnquotedAttributeTag instance=new ForHtmlUnquotedAttributeTag();  String value="<div> </div>";  String expected="&lt;div&gt;&#32;&lt;&#47;div&gt;";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  public static SortedSet<String> prefixStr2Set(String inclusiveNamespaces){  SortedSet<String> prefixes=new TreeSet<String>();  if ((inclusiveNamespaces == null) || (inclusiveNamespaces.length() == 0)) {    return prefixes;  }  String[] tokens=inclusiveNamespaces.split("\\s");  for (  String prefix : tokens) {    if (prefix.equals("#default")) {      prefixes.add("xmlns");    } else {      prefixes.add(prefix);    }  }  return prefixes;}  }
class C{  public boolean isNumeral(char c){  return isArabicNumeral(c) || isKanjiNumeral(c) || exponents[c] > 0;}  }
class C{  protected void loadContributedTemplates() throws IOException {  Collection<TemplatePersistenceData> contributed=readContributedTemplates();  for (  TemplatePersistenceData data : contributed) {    internalAdd(data);  }}  }
class C{  private boolean cmd_save(){  log.config("");  Timestamp assignDateFrom=fDateFrom.getTimestamp();  BigDecimal qty=(BigDecimal)fQty.getValue();  KeyNamePair uom=(KeyNamePair)m_lookup.get(fResource.getSelectedItem());  int minutes=MUOMConversion.convertToMinutes(Env.getCtx(),uom.getKey(),qty);  Timestamp assignDateTo=TimeUtil.addMinutess(assignDateFrom,minutes);  m_mAssignment.setAssignDateTo(assignDateTo);  return m_mAssignment.save();}  }
class C{  public RequestHandle put(String url,ResponseHandlerInterface responseHandler){  return put(null,url,null,responseHandler);}  }
class C{  public UndoableEdit insertString(int where,String str) throws BadLocationException {  if (where > length() || where < 0) {    throw new BadLocationException("Invalid insert",length());  }  char[] chars=str.toCharArray();  replace(where,0,chars,chars.length);  return new InsertUndo(where,str.length());}  }
class C{  protected void incLocalSiblingCount(){synchronized (fsm_) {    localSiblingCount_++;  }}  }
class C{  public String sqlMetadata_checkNames(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_checkNames(catalogName,schemaName);}  }
class C{  public void recompilationScheduled(CompilationPlan plan,double priority){  if (Controller.options.LOGGING_LEVEL >= 2) {    printlnToLogWithTimePrefix("Scheduling level " + plan.options.getOptLevel() + " recompilation of "+ plan.method+ " (plan has priority "+ priority+ ")");  }}  }
class C{  protected void synchronize(BroadPhase broadPhase,final Transform transform1,final Transform transform2){  if (m_proxyCount == 0) {    return;  }  for (int i=0; i < m_proxyCount; ++i) {    FixtureProxy proxy=m_proxies[i];    final AABB aabb1=pool1;    final AABB aab=pool2;    m_shape.computeAABB(aabb1,transform1,proxy.childIndex);    m_shape.computeAABB(aab,transform2,proxy.childIndex);    proxy.aabb.lowerBound.x=aabb1.lowerBound.x < aab.lowerBound.x ? aabb1.lowerBound.x : aab.lowerBound.x;    proxy.aabb.lowerBound.y=aabb1.lowerBound.y < aab.lowerBound.y ? aabb1.lowerBound.y : aab.lowerBound.y;    proxy.aabb.upperBound.x=aabb1.upperBound.x > aab.upperBound.x ? aabb1.upperBound.x : aab.upperBound.x;    proxy.aabb.upperBound.y=aabb1.upperBound.y > aab.upperBound.y ? aabb1.upperBound.y : aab.upperBound.y;    displacement.x=transform2.p.x - transform1.p.x;    displacement.y=transform2.p.y - transform1.p.y;    broadPhase.moveProxy(proxy.proxyId,proxy.aabb,displacement);  }}  }
class C{  private void cmd_ok_Simple(){  m_query=new MQuery(m_tableName);  if (hasValue && !fieldValue.getText().equals("%") && fieldValue.getText().length() != 0) {    String value=fieldValue.getText().toUpperCase();    if (!value.endsWith("%"))     value+="%";    m_query.addRestriction("UPPER(Value)",MQuery.LIKE,value,lblValue.getValue(),value);  }  if (hasDocNo && !fieldDocumentNo.getText().equals("%") && fieldDocumentNo.getText().length() != 0) {    String value=fieldDocumentNo.getText().toUpperCase();    if (!value.endsWith("%"))     value+="%";    m_query.addRestriction("UPPER(DocumentNo)",MQuery.LIKE,value,lblDocumentNo.getValue(),value);  }  if ((hasName) && !fieldName.getText().equals("%") && fieldName.getText().length() != 0) {    String value=fieldName.getText().toUpperCase();    if (!value.endsWith("%"))     value+="%";    m_query.addRestriction("UPPER(Name)",MQuery.LIKE,value,lblName.getValue(),value);  }  if (hasDescription && !fieldDescription.getText().equals("%") && fieldDescription.getText().length() != 0) {    String value=fieldDescription.getText().toUpperCase();    if (!value.endsWith("%"))     value+="%";    m_query.addRestriction("UPPER(Description)",MQuery.LIKE,value,lblDescription.getValue(),value);  }  for (int i=0; i < m_sEditors.size(); i++) {    WEditor wed=(WEditor)m_sEditors.get(i);    Object value=wed.getValue();    Object modifiedvalue=null;    String ColumnSQL=null;    String ColumnName=wed.getColumnName();    GridField field=getTargetMField(ColumnName);    if (value != null && value.toString().length() > 0) {      log.fine(ColumnName + "=" + value);      field=getTargetMField(ColumnName);      if (field.isEncryptedColumn()) {        value=SecureEngine.encrypt(value);      }      boolean isProductCategoryField=isProductCategoryField(field.getAD_Column_ID());      ColumnSQL=field.getColumnSQL(false);      if (isSearchLike(field)) {        String valueStr=value.toString().toUpperCase();        if (!valueStr.endsWith("%"))         valueStr+="%";        ColumnSQL="UPPER(" + ColumnSQL + ")";        modifiedvalue=valueStr;      } else       modifiedvalue=value;      if (modifiedvalue.toString().indexOf('%') != -1 && !field.isRange())       m_query.addRestriction(ColumnSQL,MQuery.LIKE,modifiedvalue,ColumnName,wed.getDisplay()); else       if (isProductCategoryField && value instanceof Integer)       m_query.addRestriction(getSubCategoryWhereClause(((Integer)value).intValue())); else       if (!field.isRange())       m_query.addRestriction(ColumnSQL,MQuery.EQUAL,value,ColumnName,wed.getDisplay());    }    if (field.isRange()) {      WEditor toRangeEditor=(WEditor)m_sEditors2.get(i);      Object value2=null;      Object parsedValue=null;      Object parsedValue2=null;      String infoDisplay_to=null;      String infoDisplay=null;      if (toRangeEditor != null)       value2=toRangeEditor.getValue();      if ((value != null && !value.toString().isEmpty()) && (value2 != null && !value2.toString().isEmpty()) && value2.toString().length() > 0) {        ColumnName=toRangeEditor.getColumnName();        log.fine(ColumnName + "=" + value2);        field=getTargetMField(ColumnName);        infoDisplay=value.toString();        parsedValue=parseValue(field,value);        parsedValue2=parseValue(field,value2);        infoDisplay_to=value2.toString();        if (parsedValue2 == null)         continue;        m_query.addRangeRestriction(ColumnSQL,parsedValue,parsedValue2,ColumnSQL,infoDisplay,infoDisplay_to);      } else       if (value != null && !value.toString().isEmpty() && (value2 == null || value2.toString().isEmpty())) {        ColumnName=wed.getColumnName();        m_query.addRestriction(ColumnSQL,MQuery.GREATER_EQUAL,value,ColumnName,wed.getDisplay());      } else       if ((value == null || value.toString().isEmpty()) && value2 != null && !value2.toString().isEmpty()) {        ColumnName=toRangeEditor.getColumnName();        field=getTargetMField(ColumnName);        ColumnSQL=field.getColumnSQL(false);        m_query.addRestriction(ColumnSQL,MQuery.LESS_EQUAL,value2,ColumnName,toRangeEditor.getDisplay());      }    }  }  m_isCancel=false;  if (getNoOfRecords(m_query,true) != 0)   dispose();}  }
class C{  public static Network filterNetworkByLinkMode(Network network,Set<String> transportModes){  NetworkFilterManager filterManager=new NetworkFilterManager(network);  filterManager.addLinkFilter(new LinkFilter(transportModes));  Network newNetwork=filterManager.applyFilters();  removeNotUsedNodes(newNetwork);  return newNetwork;}  }
class C{  SocketPermission URLtoSocketPermission(URL url) throws IOException {  if (socketPermission != null) {    return socketPermission;  }  SecurityManager sm=System.getSecurityManager();  if (sm == null) {    return null;  }  SocketPermission newPerm=new SocketPermission(getHostAndPort(url),"connect");  String actions=getRequestMethod() + ":" + getUserSetHeaders().getHeaderNamesInList();  String urlstring=url.getProtocol() + "://" + url.getAuthority()+ url.getPath();  URLPermission p=new URLPermission(urlstring,actions);  try {    sm.checkPermission(p);    socketPermission=newPerm;    return socketPermission;  } catch (  SecurityException e) {  }  return null;}  }
class C{  private LuaValue createView(int pos,int currentItem){  Globals globals=this.mLuaUserdata.getGlobals();  final LVViewGroup container=createCellLayout();  final UDViewGroup cell=new UDViewGroup(container,globals,null);  final UDLuaTable cellData=new UDLuaTable(cell);  globals.saveContainer(container);  this.mLuaUserdata.callCellInit(cellData,pos,currentItem);  globals.restoreContainer();  View view=cellData.getView();  if (view != null) {    view.setTag(R.id.lv_tag,cellData);  }  return cellData;}  }
class C{  public static void registerFieldPrefix(final String prefix){  if (prefix != null && prefix.length() > 0) {    fieldPrefixes.add(prefix);  }}  }
class C{  public static double quantile(double p,double alpha,double beta){  if (Double.isNaN(alpha) || Double.isNaN(beta) || Double.isNaN(p)|| alpha < 0. || beta < 0.) {    return Double.NaN;  }  if (p < 0 || p > 1) {    return Double.NaN;  }  if (p == 0) {    return 0.0;  }  if (p == 1) {    return 1.0;  }  if (p > 0.5) {    return 1 - rawQuantile(1 - p,beta,alpha,logBeta(beta,alpha));  } else {    return rawQuantile(p,alpha,beta,logBeta(alpha,beta));  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_CASE_DEF___TRACECASE_NAME_1:    setTracecase_name_1(TRACECASE_NAME_1_EDEFAULT);  return;case UmplePackage.TRACE_CASE_DEF___TRACE_DIRECTIVE_1:getTraceDirective_1().clear();return;}super.eUnset(featureID);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("AdempiereServerMgr[");  sb.append("Servers=").append(m_servers.size()).append(",ContextSize=").append(m_ctx.size()).append(",Started=").append(m_start).append("]");  return sb.toString();}  }
class C{  public void paintTree(Graphics2D g2,Dimension size,Tree tree){  if (tree == null)   return;  int n=tree.getNodeCount();  if (nodeRectVert == null || nodeRectVert.length != n) {    nodeRectVert=new Rectangle2D[n];    nodeRectHoriz=new Rectangle2D[n];  }  scaleY=((double)size.height) / (tree.getExternalNodeCount());  double maxLabelHeight=scaleY;  int fontSize=maxFontSize + 1;  do {    fontSize--;    labelFont=new Font("Helvetica",Font.PLAIN,fontSize);    g2.setFont(labelFont);  } while (fontSize > 1 && g2.getFontMetrics().getAscent() > maxLabelHeight);  hilightLabelFont=new Font("Helvetica",Font.PLAIN,fontSize);  double maxLabelWidth=getMaxLabelWidth(g2,tree);  currentY=0.5;  treeHeight=tree.getNodeHeight(tree.getRoot());  double height;  if (userDefinedHeight < 0.0) {    height=treeHeight;  } else {    height=userDefinedHeight;  }  scaleX=((double)size.width - 4 - maxLabelWidth) / (height * 1.02);  currentY=0.5;  paintBoxPlot(g2,tree,tree.getRoot(),treeHeight,false);  currentY=0.5;  paintBoxPlot(g2,tree,tree.getRoot(),treeHeight,false);  currentY=0.5;  paintNode(g2,tree,tree.getRoot(),(treeHeight * 1.02),treeHeight,false);}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  public boolean isAppInForeground(){  return appStateRecognizer.getAppState() == FOREGROUND;}  }
class C{  public final void addSeparator(){  add(Separator.getInstance());}  }
class C{  public void addReturnToInitLayout_ID(){  Chain<Unit> units=mInitLayoutBody.getUnits();  if (!(units.getLast() instanceof ReturnVoidStmt)) {    Stmt stmt=Jimple.v().newReturnVoidStmt();    units.add(stmt);  }}  }
class C{  private void drawCaptionForSample(final SampleWrapper sample){  final Rectangle clientArea=getClientArea();  this.gc.setClipping(clientArea);  this.gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_BLACK));  this.gc.fillRectangle(clientArea.x,clientArea.y + clientArea.height - 19,clientArea.width,19);  final Color color=new Color(getDisplay(),sample.getBorderColor());  this.gc.setForeground(color);  final FontData[] fontData=getFont().getFontData();  for (  final FontData f : fontData) {    f.setHeight(9);  }  final Font font=new Font(getDisplay(),fontData);  this.gc.setFont(getFont());  final String format=sample.getFormatPattern().replace("{value}","1$").replace("{maxValue}","2$").replace("{percentValue}","3$");  final String formattedCaption=String.format(format,new Object[]{sample.getLastValue(),sample.getLastMaxValue(),Double.valueOf(sample.getLastValue() / sample.getLastMaxValue() * 100.0D)});  this.gc.drawString(sample.getCaption() + " : " + formattedCaption,clientArea.x + this.gridSize,clientArea.y + clientArea.height - 19);  font.dispose();  color.dispose();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void resetRound(){  this.handleStart();}  }
class C{  public boolean intersect(BitVector v2){  return BitsUtil.intersect(bits,v2.bits);}  }
class C{  public CategoryPlot(CategoryDataset dataset,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryItemRenderer renderer){  super();  this.orientation=PlotOrientation.VERTICAL;  this.domainAxes=new HashMap<Integer,CategoryAxis>();  this.domainAxisLocations=new HashMap<Integer,AxisLocation>();  this.rangeAxes=new HashMap<Integer,ValueAxis>();  this.rangeAxisLocations=new HashMap<Integer,AxisLocation>();  this.datasetToDomainAxesMap=new TreeMap();  this.datasetToRangeAxesMap=new TreeMap();  this.renderers=new HashMap<Integer,CategoryItemRenderer>();  this.datasets=new HashMap<Integer,CategoryDataset>();  this.datasets.put(0,dataset);  if (dataset != null) {    dataset.addChangeListener(this);  }  this.axisOffset=RectangleInsets.ZERO_INSETS;  this.domainAxisLocations.put(0,AxisLocation.BOTTOM_OR_LEFT);  this.rangeAxisLocations.put(0,AxisLocation.TOP_OR_LEFT);  this.renderers.put(0,renderer);  if (renderer != null) {    renderer.setPlot(this);    renderer.addChangeListener(this);  }  this.domainAxes.put(0,domainAxis);  mapDatasetToDomainAxis(0,0);  if (domainAxis != null) {    domainAxis.setPlot(this);    domainAxis.addChangeListener(this);  }  this.drawSharedDomainAxis=false;  this.rangeAxes.put(0,rangeAxis);  mapDatasetToRangeAxis(0,0);  if (rangeAxis != null) {    rangeAxis.setPlot(this);    rangeAxis.addChangeListener(this);  }  configureDomainAxes();  configureRangeAxes();  this.domainGridlinesVisible=DEFAULT_DOMAIN_GRIDLINES_VISIBLE;  this.domainGridlinePosition=CategoryAnchor.MIDDLE;  this.domainGridlineStroke=DEFAULT_GRIDLINE_STROKE;  this.domainGridlinePaint=DEFAULT_GRIDLINE_PAINT;  this.rangeZeroBaselineVisible=false;  this.rangeZeroBaselinePaint=Color.black;  this.rangeZeroBaselineStroke=new BasicStroke(0.5f);  this.rangeGridlinesVisible=DEFAULT_RANGE_GRIDLINES_VISIBLE;  this.rangeGridlineStroke=DEFAULT_GRIDLINE_STROKE;  this.rangeGridlinePaint=DEFAULT_GRIDLINE_PAINT;  this.rangeMinorGridlinesVisible=false;  this.rangeMinorGridlineStroke=DEFAULT_GRIDLINE_STROKE;  this.rangeMinorGridlinePaint=Color.white;  this.foregroundDomainMarkers=new HashMap();  this.backgroundDomainMarkers=new HashMap();  this.foregroundRangeMarkers=new HashMap();  this.backgroundRangeMarkers=new HashMap();  this.anchorValue=0.0;  this.domainCrosshairVisible=false;  this.domainCrosshairStroke=DEFAULT_CROSSHAIR_STROKE;  this.domainCrosshairPaint=DEFAULT_CROSSHAIR_PAINT;  this.rangeCrosshairVisible=DEFAULT_CROSSHAIR_VISIBLE;  this.rangeCrosshairValue=0.0;  this.rangeCrosshairStroke=DEFAULT_CROSSHAIR_STROKE;  this.rangeCrosshairPaint=DEFAULT_CROSSHAIR_PAINT;  this.annotations=new java.util.ArrayList();  this.rangePannable=false;  this.shadowGenerator=null;}  }
class C{  private void compareADElements() throws SQLException {  final String TABLE_DOES_NOT_EXITST="ORA-00942";  final Vector<String> adTableNames2=new Vector<String>();  String sql="select table_name from user_tables";  ResultSet rs=stmtdb2.executeQuery(sql);  while (rs.next()) {    final String tableName=rs.getString("TABLE_NAME");    if (tableName.endsWith("_TRL")) {      continue;    }    adTableNames2.add(tableName);  }  rs.close();  for (int i=0; i < adTableNames2.size(); i++) {    String tableName=adTableNames2.get(i);    boolean addClientAccess=false;    if (tableName.equals("AD_WINDOW_ACCESS") || tableName.equals("AD_PROCESS_ACCESS") || tableName.equals("AD_FORM_ACCESS")) {      addClientAccess=true;    }    final Vector<Column> columns1=new Vector<Column>();    final Vector<Column> columns2=new Vector<Column>();    sql="select * from user_tab_columns where table_name='" + tableName + "' order by column_id";    rs=stmtdb1.executeQuery(sql);    while (rs.next()) {      columns1.add(new Column(rs));    }    rs.close();    rs=stmtdb2.executeQuery(sql);    while (rs.next()) {      columns2.add(new Column(rs));    }    rs.close();    sql="select col.column_name from user_constraints constr " + "inner join User_Cons_Columns col ON (col.constraint_name = constr.constraint_name) " + "where constr.constraint_type='P' and constr.table_name = '" + tableName + "'";    final Vector<String> keycolumns=new Vector<String>();    rs=stmtdb2.executeQuery(sql);    sql="select * from " + tableName + " where ";    if (rs.next()) {      sql+=rs.getString("COLUMN_NAME");      sql+=" <1000000 ";      keycolumns.add(rs.getString("COLUMN_NAME"));    } else {      System.out.println("Please check table " + tableName + " for new data and add it by hand");      continue;    }    while (rs.next()) {      sql+=" and " + rs.getString("COLUMN_NAME");      sql+=" <1000000 ";      keycolumns.add(rs.getString("COLUMN_NAME"));    }    rs.close();    Vector<ADDataElement> dataElements1=new Vector<ADDataElement>();    Vector<ADDataElement> dataElements2=new Vector<ADDataElement>();    try {      rs=stmtdb2.executeQuery(sql);      while (rs.next()) {        final ADDataElement data=new ADDataElement();        for (int j=0; j < columns2.size(); j++) {          final String colName=columns2.get(j).getColumnName();          data.addColumnAndValue(colName,rs.getString(colName));        }        dataElements2.add(data);      }      rs.close();      rs=stmtdb1.executeQuery(sql);      while (rs.next()) {        final ADDataElement data=new ADDataElement();        for (int j=0; j < columns1.size(); j++) {          final String colName=columns1.get(j).getColumnName();          data.addColumnAndValue(colName,rs.getString(colName));        }        dataElements1.add(data);      }      rs.close();      try {        for (int j=0; j < dataElements1.size(); j++) {          boolean found=false;          final ADDataElement data1=dataElements1.get(j);          sql="select * from " + tableName + " where ";          for (int m=0; m < keycolumns.size(); m++) {            if (m != 0) {              sql+=" and ";            }            sql+=keycolumns.get(m) + "=" + data1.getValueForColumn(keycolumns.get(m));          }          rs=stmtdb2.executeQuery(sql);          if (rs.next()) {            found=true;          }          rs.close();          if (!found) {            createDeleteTableEntry(tableName,data1,keycolumns,columns1);          }        }      } catch (      SQLException e1) {        System.out.println(e1.getMessage() + " - on searching data to drop for table: " + tableName);      }      for (int j=0; j < dataElements2.size(); j++) {        boolean found=false;        final ADDataElement data2=dataElements2.get(j);        sql="select * from " + tableName + " where ";        for (int m=0; m < keycolumns.size(); m++) {          if (m != 0) {            sql+=" and ";          }          sql+=keycolumns.get(m) + "=" + data2.getValueForColumn(keycolumns.get(m));        }        rs=stmtdb1.executeQuery(sql);        if (rs.next()) {          found=true;        }        rs.close();        if (!found) {          createNewTableEntry(tableName,data2,keycolumns,columns2);          if (addClientAccess && AD_CLIENT_ID != null && AD_ROLE_ID != null) {            data2.setValueForColumn("AD_CLIENT_ID",AD_CLIENT_ID);            data2.setValueForColumn("AD_ROLE_ID",AD_ROLE_ID);            createNewTableEntry(tableName,data2,keycolumns,columns2);          }        } else {          sql="select * from " + tableName + " where ";          boolean and=false;          for (int m=0; m < columns2.size(); m++) {            if (!columns1.contains(columns2.get(m))) {              continue;            }            String value=data2.getValueForColumn(columns2.get(m).getColumnName());            if (value != null && value.indexOf('\'') != -1) {              value=value.replaceAll("'","''");            }            if (and) {              sql+=" and ";            }            if (value == null) {              sql+=columns2.get(m).getColumnName() + " is null ";              and=true;              continue;            }            if (columns2.get(m).isStringType()) {              sql+=columns2.get(m).getColumnName() + "='" + value+ "'";              and=true;            } else             if (columns2.get(m).isNumberType()) {              sql+=columns2.get(m).getColumnName() + "=" + data2.getValueForColumn(columns2.get(m).getColumnName());              and=true;            } else {              and=false;            }          }          try {            found=false;            rs=stmtdb1.executeQuery(sql);            if (rs.next()) {              found=true;            }            rs.close();            if (!found) {              updateADEntry(tableName,data2,keycolumns,columns2);            }          } catch (          SQLException e) {            if (e.getMessage().startsWith("ORA-00933") || e.getMessage().startsWith("ORA-01722")) {              ;            } else {              System.out.println(e.getMessage() + ":");              System.out.println(sql);            }          }        }      }    } catch (    SQLException e) {      if (e.getMessage().startsWith(TABLE_DOES_NOT_EXITST)) {        for (int j=0; j < dataElements2.size(); j++) {          createNewTableEntry(tableName,dataElements2.get(j),keycolumns,columns2);        }      } else {        System.out.println(e.getMessage() + " - for table " + tableName);      }    }  }}  }
class C{  public void runSyncIgnore(String localName,ModelService service,Map<String,? extends Object> context) throws ServiceAuthException, ServiceValidationException, GenericServiceException {  runSync(localName,service,context,false);}  }
class C{  public MigrationRule(final E source,E target){  this.source=source;  this.target=target;}  }
class C{  public static char convertToChar(String string){  return (decode(string).charAt(0));}  }
class C{  public static boolean verifyDir(final File f) throws IOException {  try (SequencesReader reader=SequencesReaderFactory.createMemorySequencesReader(f,true,true,LongRange.NONE)){    return verify(reader,f);  } catch (  final IOException e) {    Diagnostic.error(ErrorType.SDF_VERIFICATION_FAILED);    return false;  }catch (  final RuntimeException ex) {    Diagnostic.error(ErrorType.SDF_VERIFICATION_FAILED);    return false;  }}  }
class C{  @Override public void addCountryListener(ICountryListener listener) throws RemoteException {  if (!mSystemReady) {    throw new RemoteException();  }  addListener(listener);}  }
class C{  public void removeGroup(final Group toDelete){  groupList.remove(toDelete);  toDelete.delete();  fireGroupRemoved(toDelete);}  }
class C{  private void initializeDefaults(HadoopConfiguration cfg){  if (cfg.getMapReducePlanner() == null)   cfg.setMapReducePlanner(new IgniteHadoopMapReducePlanner());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public Generator<IPoint> construct(String[] args){  return new UniformCircleGenerator();}  }
class C{  public SimulateFromCovWrapper(DataWrapper wrapper,Parameters params){  if (wrapper == null) {    throw new NullPointerException("The given data must not be null");  }  DataModel model=wrapper.getSelectedDataModel();  if (model instanceof ICovarianceMatrix) {    CovarianceMatrix covarianceMatrix=new CovarianceMatrix((CovarianceMatrix)model);    DataSet dataSet=DataUtils.choleskySimulation(covarianceMatrix);    setDataModel(dataSet);    setSourceGraph(wrapper.getSourceGraph());  } else {    throw new IllegalArgumentException("Must be a dataset or a covariance  matrix");  }  LogDataUtils.logDataModelList("Conversion of data to covariance matrix form.",getDataModelList());}  }
class C{  public XBLContentElementBridge(){}  }
class C{  protected void init(){  status=STATUS_OK;  frameCount=0;  frames=new ArrayList<GifFrame>();  gct=null;  lct=null;}  }
class C{  protected void processNewLogs(){  List<String> logs=getNewLogs();  processLogEntries(logs);  utils.sleep(pollFrequencyMs);}  }
class C{  public void addExcludeLike(String likeExpression){  patterns.add(new Pair<StringPatternSet,Boolean>(new StringPatternSetLike(likeExpression),false));}  }
class C{  @Override public void onConfirmation(String callerTag){  ComponentsGetter cg=(ComponentsGetter)getActivity();  FileDataStorageManager storageManager=cg.getStorageManager();  if (storageManager.getFileById(mTargetFile.getFileId()) != null) {    cg.getFileOperationsHelper().removeFile(mTargetFile,false);  }}  }
class C{  public boolean skipString(String s) throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  final int length=s.length();  for (int i=0; i < length; i++) {    char c=fCurrentEntity.ch[fCurrentEntity.position++];    if (c != s.charAt(i)) {      fCurrentEntity.position-=i + 1;      return false;    }    if (i < length - 1 && fCurrentEntity.position == fCurrentEntity.count) {      System.arraycopy(fCurrentEntity.ch,fCurrentEntity.count - i - 1,fCurrentEntity.ch,0,i + 1);      if (load(i + 1,false)) {        fCurrentEntity.position-=i + 1;        return false;      }    }  }  fCurrentEntity.columnNumber+=length;  return true;}  }
class C{  public void analyze(Graph graph,Map<String,DescriptiveStatistics> statsMap){  String subKey=key + "_local";  DescriptiveStatistics stats=module.statistics(graph.getVertices());  printStats(stats,subKey);  statsMap.put(subKey,stats);  if (outputDirectoryNotNull()) {    try {      writeHistograms(stats,new LinearDiscretizer(0.05),subKey,false);      writeHistograms(stats,subKey,100,20);    } catch (    IOException e) {      e.printStackTrace();    }  }  subKey=key + "_global";  stats=new DescriptiveStatistics();  stats.addValue(module.globalClusteringCoefficient(graph));  printStats(stats,subKey);  statsMap.put(subKey,stats);}  }
class C{  public synchronized IndexLocation computeIndexLocation(IPath containerPath,final URL newIndexURL){  IndexLocation indexLocation=(IndexLocation)this.indexLocations.get(containerPath);  if (indexLocation == null) {    if (newIndexURL != null) {      indexLocation=IndexLocation.createIndexLocation(newIndexURL);      indexLocation=(IndexLocation)getIndexStates().getKey(indexLocation);      this.indexLocations.put(containerPath,indexLocation);    }  } else {    URL existingURL=indexLocation.getUrl();    if (newIndexURL != null) {      if (!newIndexURL.equals(existingURL)) {        this.removeIndex(containerPath);        indexLocation=IndexLocation.createIndexLocation(newIndexURL);        indexLocation=(IndexLocation)getIndexStates().getKey(indexLocation);        this.indexLocations.put(containerPath,indexLocation);      }    }  }  return indexLocation;}  }
class C{  private static void init(){  if (alFirstConsonants == null) {    alFirstConsonants=new ArrayList();    alLastConsonants=new ArrayList();    alMainVowels=new ArrayList();    alSecondaryVowels=new ArrayList();    initArrayList(alFirstConsonants,vnFirstConsonants);    initArrayList(alLastConsonants,vnLastConsonants);    initArrayList(alMainVowels,vnMainVowels);    initArrayList(alSecondaryVowels,vnSecondaryVowels);  }}  }
class C{  @Override public Properties trackVideoLoading(String videoId,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonProperties(videoId,Values.VIDEO_LOADED);  aEvent.setCourseContext(courseId,unitUrl,Values.VIDEOPLAYER);  tracker.track(Events.LOADED_VIDEO,aEvent.properties);  return aEvent.properties;}  }
class C{  private boolean addNonLinkTextIfValid(String text){  if (!StringUtil.containsDigit(text)) {    mAdjacentNumbersGroups.addGroup();    return false;  }  if (sTermsRegExp == null) {    sTermsRegExp=RegExp.compile("(\\S*[\\w\u00C0-\u1FFF\u2C00-\uD7FF]\\S*)","gi");  } else {    sTermsRegExp.setLastIndex(0);  }  if (sSurroundingDigitsRegExp == null) {    sSurroundingDigitsRegExp=RegExp.compile("^[\\W_]*(\\d+)[\\W_]*$","i");  }  boolean added=false;  while (true) {    MatchResult match=sTermsRegExp.exec(text);    if (match == null)     break;    if (match.getGroupCount() <= 1)     continue;    String term=match.getGroup(1);    MatchResult termWithDigits=sSurroundingDigitsRegExp.exec(term);    int number=-1;    if (termWithDigits != null && termWithDigits.getGroupCount() > 1) {      number=StringUtil.toNumber(termWithDigits.getGroup(1));    }    if (isPlainPageNumber(number)) {      mAdjacentNumbersGroups.addNumber(number,"");      added=true;    } else {      mAdjacentNumbersGroups.addGroup();    }  }  return added;}  }
class C{  public void buildClassifier(Instances instances) throws Exception {  m_instancesHeader=new Instances(instances,0);}  }
class C{  private void processInBox() throws Exception {  Folder folder;  folder=m_store.getDefaultFolder();  if (folder == null)   throw new IllegalStateException("No default folder");  Folder inbox=folder.getFolder(p_InboxFolder);  if (!inbox.exists())   throw new IllegalStateException("No Inbox");  inbox.open(Folder.READ_WRITE);  log.fine("processInBox - " + inbox.getName() + "; Messages Total="+ inbox.getMessageCount()+ "; New="+ inbox.getNewMessageCount());  Folder requestFolder=folder.getFolder(p_RequestFolder);  if (!requestFolder.exists() && !requestFolder.create(Folder.HOLDS_MESSAGES))   throw new IllegalStateException("Cannot create Request Folder");  requestFolder.open(Folder.READ_WRITE);  Folder errorFolder=folder.getFolder(p_ErrorFolder);  if (!errorFolder.exists() && !errorFolder.create(Folder.HOLDS_MESSAGES))   throw new IllegalStateException("Cannot create Error Folder");  errorFolder.open(Folder.READ_WRITE);  Message[] messages=inbox.getMessages();  for (int i=0; i < messages.length; i++) {    Message msg=messages[i];    int result=processMessage(msg);    if (result == REQUEST) {      String[] hdrs=msg.getHeader("Message-ID");      try {        if (createRequest(msg)) {          msg.setFlag(Flags.Flag.SEEN,true);          msg.setFlag(Flags.Flag.ANSWERED,true);          requestFolder.appendMessages(new Message[]{msg});          log.info("message " + hdrs[0] + " moved to "+ p_RequestFolder+ " folder");          log.info("message info: Sent -> " + msg.getSentDate() + " From -> "+ msg.getFrom()[0].toString());          msg.setFlag(Flags.Flag.DELETED,true);          Message[] deleted=inbox.expunge();          noRequest++;        }      } catch (      Exception e) {        log.info("message " + hdrs[0] + " threw error");        e.printStackTrace();      }    } else {      errorFolder.appendMessages(new Message[]{msg});      String[] hdrs=msg.getHeader("Message-ID");      log.warning("message " + hdrs[0] + " moved to "+ p_ErrorFolder+ " folder");      log.warning("message info: Sent -> " + msg.getSentDate() + " From -> "+ msg.getFrom()[0].toString());      noError++;    }    noProcessed++;  }  log.info("processInBox - Total=" + noProcessed + " - Requests="+ noRequest+ " - Errors="+ noError);  errorFolder.close(false);  requestFolder.close(false);  inbox.close(true);}  }
class C{  public void actionPerformed(ActionEvent e){  Box b=Box.createVerticalBox();  Graph graph=workbench.getGraph();  JTextArea textArea=new JTextArea();  JScrollPane scroll=new JScrollPane(textArea);  scroll.setPreferredSize(new Dimension(600,600));  textArea.append("Neighborhoods:");  for (int i=0; i < graph.getNodes().size(); i++) {    Node node=graph.getNodes().get(i);    List<Node> parents=graph.getParents(node);    List<Node> children=graph.getChildren(node);    List<Node> ambiguous=graph.getAdjacentNodes(node);    ambiguous.removeAll(parents);    ambiguous.removeAll(children);    textArea.append("\n\nNeighborhood for " + node + ":");    textArea.append("\n\tParents: " + niceList(parents));    textArea.append("\n\tChildren: " + niceList(children));    textArea.append("\n\tAmbiguous: " + niceList(ambiguous));  }  Box b2=Box.createHorizontalBox();  b2.add(scroll);  textArea.setCaretPosition(0);  b.add(b2);  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  panel.add(b);  EditorWindow window=new EditorWindow(panel,"Neighborhoods","Close",false,workbench);  DesktopController.getInstance().addEditorWindow(window,JLayeredPane.PALETTE_LAYER);  window.setVisible(true);}  }
class C{  @Override public byte byteValue(){  return value;}  }
class C{  public double distance(double p1,double p2){  double d=(p1 - p2) * (p1 - p2);  return Math.sqrt(d);}  }
class C{  public void playTriggerSound(){  TalkBackService service=TalkBackService.getInstance();  if (service != null) {    service.getFeedbackController().playAuditory(R.raw.tutorial_trigger);  }}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(StatementsTest.class);}  }
class C{  private static void initTestFile(File blah,long size) throws Exception {  try (BufferedWriter writer=Files.newBufferedWriter(blah.toPath(),ISO_8859_1)){    for (int i=0; i < size; i++) {      writer.write("e");    }  } }  }
class C{  public boolean viewCartOnAdd(){  return viewCartOnAdd;}  }
class C{  public TungstenProperties read() throws FileIOException {  String contents=fileIO.read(filePath,charset);  if (JAVA_PROPERTIES.equals(format)) {    StringReader sr=new StringReader(contents);    Properties javaProps=new Properties();    try {      javaProps.load(sr);    } catch (    IOException e) {      throw new FileIOException("Unable to read JSON properties: file=" + filePath.toString() + " format="+ format,e);    }    sr.close();    TungstenProperties properties=new TungstenProperties();    properties.load(javaProps);    return properties;  } else   if (JSON.equals(format)) {    try {      return TungstenProperties.loadFromJSON(contents);    } catch (    Exception e) {      throw new FileIOException("Unable to convert to JSON: file=" + filePath.toString() + " format="+ format,e);    }  } else {    throw new FileIOException("Unrecognized property input format: file=" + filePath.toString() + " format="+ format);  }}  }
class C{  public static List<String> decodeRefinementValuePath(String valuePath){  List<String> rawvals=StrUtils.splitSmart(valuePath,",",true);  if (rawvals.isEmpty())   return rawvals;  List<String> out=new ArrayList<String>(rawvals.size());  for (  String raw : rawvals) {    assert 0 < raw.length();    if ('^' == raw.charAt(0)) {      assert 1 == raw.length();      out.add(null);    } else {      assert '~' == raw.charAt(0);      out.add(raw.substring(1));    }  }  return out;}  }
class C{  public S2Point projectToEdge(S2Point point,int index){  Preconditions.checkState(numVertices() > 0,"Empty polyline");  Preconditions.checkState(numVertices() == 1 || index < numVertices() - 1,"Invalid edge index");  if (numVertices() == 1) {    return vertex(0);  }  return S2EdgeUtil.getClosestPoint(point,vertex(index),vertex(index + 1));}  }
class C{  public static boolean isClientError(int status){  return (status >= 400 && status < 500);}  }
class C{  private void doQuery() throws Exception {  RepositoryConnection cxn=repo.getReadOnlyConnection();  try {    final TupleQuery tupleQuery=cxn.prepareTupleQuery(QueryLanguage.SPARQL,query);    tupleQuery.setIncludeInferred(true);    TupleQueryResult result=tupleQuery.evaluate();    int resultCount=0;    while (result.hasNext()) {      BindingSet bindingSet=result.next();      resultCount++;    }    log.info(resultCount + " results");  }  finally {    cxn.close();  }}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  if (methodIndex() == 0)   return new EnclosingMethodAttribute(newCp,className()); else   return new EnclosingMethodAttribute(newCp,className(),methodName(),methodDescriptor());}  }
class C{  public static int determineBoundary(BoundaryNodeRule boundaryNodeRule,int boundaryCount){  return boundaryNodeRule.isInBoundary(boundaryCount) ? Location.BOUNDARY : Location.INTERIOR;}  }
class C{  protected void removeDocumentListeners(){  AbstractDocument doc=(AbstractDocument)document;  XBLEventSupport es=(XBLEventSupport)doc.initializeEventSupport();  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",domNodeInsertedListener,false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",domNodeRemovedListener,false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",domAttrModifiedListener,false);}  }
class C{  @Override public Enumeration<Option> listOptions(){  return super.listOptions();}  }
class C{  private void doDdpOrientation(Node d,Node a,Node b,Node c,Graph graph){  List<Node> sepset=getSepset(d,c);  if (sepset == null)   return;  if (sepset.contains(b)) {    graph.setEndpoint(c,b,Endpoint.TAIL);    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));    System.out.println(SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));    changeFlag=true;  } else {    if (!isArrowpointAllowed(a,b,graph)) {      return;    }    if (!isArrowpointAllowed(c,b,graph)) {      return;    }    graph.setEndpoint(a,b,Endpoint.ARROW);    graph.setEndpoint(c,b,Endpoint.ARROW);    logger.log("colliderOrientations",SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));    changeFlag=true;  }}  }
class C{  private void runPrefetch(int frameNumber){synchronized (this) {    if (!mBitmapsToKeepCached.get(frameNumber)) {      return;    }    if (hasCachedOrPredecodedFrame(frameNumber)) {      return;    }  }  CloseableReference<Bitmap> preDecodedFrame=mAnimatedDrawableBackend.getPreDecodedFrame(frameNumber);  try {    if (preDecodedFrame != null) {      maybeCacheRenderedBitmap(frameNumber,preDecodedFrame);    } else {      CloseableReference<Bitmap> bitmapReference=obtainBitmapInternal();      try {        mAnimatedImageCompositor.renderFrame(frameNumber,bitmapReference.get());        maybeCacheRenderedBitmap(frameNumber,bitmapReference);        FLog.v(TAG,"Prefetch rendered frame %d",frameNumber);      }  finally {        bitmapReference.close();      }    }  }  finally {    CloseableReference.closeSafely(preDecodedFrame);  }}  }
class C{  protected ElemVariable addVarDeclToElem(ElemTemplateElement psuedoVarRecipient,LocPathIterator lpi,ElemVariable psuedoVar) throws org.w3c.dom.DOMException {  ElemTemplateElement ete=psuedoVarRecipient.getFirstChildElem();  lpi.callVisitors(null,m_varNameCollector);  if (m_varNameCollector.getVarCount() > 0) {    ElemTemplateElement baseElem=getElemFromExpression(lpi);    ElemVariable varElem=getPrevVariableElem(baseElem);    while (null != varElem) {      if (m_varNameCollector.doesOccur(varElem.getName())) {        psuedoVarRecipient=varElem.getParentElem();        ete=varElem.getNextSiblingElem();        break;      }      varElem=getPrevVariableElem(varElem);    }  }  if ((null != ete) && (Constants.ELEMNAME_PARAMVARIABLE == ete.getXSLToken())) {    if (isParam(lpi))     return null;    while (null != ete) {      ete=ete.getNextSiblingElem();      if ((null != ete) && Constants.ELEMNAME_PARAMVARIABLE != ete.getXSLToken())       break;    }  }  psuedoVarRecipient.insertBefore(psuedoVar,ete);  m_varNameCollector.reset();  return psuedoVar;}  }
class C{  public String searchpopup() throws Exception {  executeQuery();  return POPUP_VIEW;}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.MARKER__KEY:    setKey((String)newValue);  return;case DomPackage.MARKER__VALUE:setValue((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static Bitmap rotateBitmapInt(Bitmap bitmap,int degrees){  if (degrees > 0) {    Matrix matrix=new Matrix();    matrix.setRotate(degrees);    Bitmap newBitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,false);    if (newBitmap != bitmap) {      bitmap.recycle();    }    return newBitmap;  } else {    return bitmap;  }}  }
class C{  public static BufferedWriter newWriter(File file,String charset) throws IOException {  return newWriter(file,charset,false);}  }
class C{  public void runWithScene(CCScene CCScene){  assert CCScene != null : "Argument must be non-null";  assert runningCCScene_ == null : "You can't run a CCScene if another CCScene is running. Use replaceCCScene or pushCCScene instead";  pushScene(CCScene);}  }
class C{  public CassandraConfig(final String version,final double cpus,final int memoryMb,final int diskMb,final VolumeRequirement.VolumeType diskType,final String replaceIp,final HeapConfig heap,final Location location,final int jmxPort,final boolean publishDiscoveryInfo,final CassandraApplicationConfig application){  this.version=version;  this.cpus=cpus;  this.memoryMb=memoryMb;  this.diskMb=diskMb;  this.diskType=diskType;  this.replaceIp=(replaceIp != null) ? replaceIp : "";  this.heap=heap;  this.location=location;  this.jmxPort=jmxPort;  this.publishDiscoveryInfo=publishDiscoveryInfo;  this.application=application;}  }
class C{  private Expression unary() throws ParserException, IOException {  Expression e=null;  Operator op=null;  while (true) {switch (lookahead.ttype) {case OPERATOR_PLUS:      match(OPERATOR_PLUS);    op=Operator.PLUS;  break;case OPERATOR_MINUS:match(OPERATOR_MINUS);op=Operator.MINUS;break;default :e=primary();log(pdebug,"Parsed: unary -> " + e);return e;}Expression e1=new Expression();e1.setOperator(op);e1.setRight(e);log(pdebug,"Parsed: unary -> " + e1);e1.setLeft(new Literal(new Double(0)));e=e1;}}  }
class C{  private BindingSet takeCrossProduct(BindingSet leftBs,BindingSet rightBs){  if (bindingSetsIntersect(leftBs,rightBs)) {    return EMPTY_BINDINGSET;  }  QueryBindingSet bs=new QueryBindingSet(leftBs);  for (  String s : rightBs.getBindingNames()) {    if (bs.getValue(s) == null) {      bs.addBinding(s,rightBs.getValue(s));    }  }  return bs;}  }
class C{  public static String stack_to_string(Throwable e){  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  e.printStackTrace(pw);  pw.close();  return sw.toString();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 194) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public SimpleFileRawStore(final File file,final String mode) throws IOException {  super(WormAddressManager.SCALE_UP_OFFSET_BITS);  if (file == null)   throw new IllegalArgumentException("file is null");  this.file=file;  raf=new RandomAccessFile(file,mode);  if (mode.indexOf("w") != -1) {    if (raf.getChannel().tryLock() == null) {      throw new IOException("Could not lock file: " + file.getAbsoluteFile());    }  }}  }
class C{  private boolean groupsMatch(List<String> groups){  return !hasGroups() || (groups != null && containsAllIgnoreCase(groups,_groups));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:37.924 -0500",hash_original_method="6B924519E3A0D968D1CF685546CDD2FF",hash_generated_method="2219F6BC7752C199D40C624DEFC79265") public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  WNafPreCompInfo wnafPreCompInfo;  if ((preCompInfo != null) && (preCompInfo instanceof WNafPreCompInfo)) {    wnafPreCompInfo=(WNafPreCompInfo)preCompInfo;  } else {    wnafPreCompInfo=new WNafPreCompInfo();  }  int m=k.bitLength();  byte width;  int reqPreCompLen;  if (m < 13) {    width=2;    reqPreCompLen=1;  } else {    if (m < 41) {      width=3;      reqPreCompLen=2;    } else {      if (m < 121) {        width=4;        reqPreCompLen=4;      } else {        if (m < 337) {          width=5;          reqPreCompLen=8;        } else {          if (m < 897) {            width=6;            reqPreCompLen=16;          } else {            if (m < 2305) {              width=7;              reqPreCompLen=32;            } else {              width=8;              reqPreCompLen=127;            }          }        }      }    }  }  int preCompLen=1;  ECPoint[] preComp=wnafPreCompInfo.getPreComp();  ECPoint twiceP=wnafPreCompInfo.getTwiceP();  if (preComp == null) {    preComp=new ECPoint[]{p};  } else {    preCompLen=preComp.length;  }  if (twiceP == null) {    twiceP=p.twice();  }  if (preCompLen < reqPreCompLen) {    ECPoint[] oldPreComp=preComp;    preComp=new ECPoint[reqPreCompLen];    System.arraycopy(oldPreComp,0,preComp,0,preCompLen);    for (int i=preCompLen; i < reqPreCompLen; i++) {      preComp[i]=twiceP.add(preComp[i - 1]);    }  }  byte[] wnaf=windowNaf(width,k);  int l=wnaf.length;  ECPoint q=p.getCurve().getInfinity();  for (int i=l - 1; i >= 0; i--) {    q=q.twice();    if (wnaf[i] != 0) {      if (wnaf[i] > 0) {        q=q.add(preComp[(wnaf[i] - 1) / 2]);      } else {        q=q.subtract(preComp[(-wnaf[i] - 1) / 2]);      }    }  }  wnafPreCompInfo.setPreComp(preComp);  wnafPreCompInfo.setTwiceP(twiceP);  p.setPreCompInfo(wnafPreCompInfo);  return q;}  }
class C{  public String modificationUrl(Modification modification){  if (!material.type.equals("Git") || material.description == null || modification.revision == null) {    LOG.info(String.format("Can't build URL for modification (%s)/(%s)/(%s)",material.type,material.description,modification.revision));    return null;  }  Matcher matcher=GITHUB_MATERIAL_PATTERN.matcher(material.description);  if (!matcher.matches()) {    LOG.info("Can't build URL for non-GitHub repo: " + material.description);    return null;  }  String org_and_repo=matcher.group(1);  String commit=modification.revision;  if (commit.length() > 6)   commit=commit.substring(0,6);  return "https://github.com/" + org_and_repo + "/commit/"+ commit;}  }
class C{  public static Object createReferenceCountOwner(){  return getInstance().createReferenceCountOwner();}  }
class C{  public void testUnorderedRange() throws Exception {  int upper=10;  String range="8-last,1-3,6";  Range index=getRange(range,upper);  int[] expected=new int[]{7,8,9,10,0,1,2,5};  assertEquals(range,index.getRanges());  assertEquals(expected.length,index.getSelection().length);  for (int i=0; i < expected.length; i++)   assertEquals(expected[i],index.getSelection()[i]);}  }
class C{  private void paintEnabled(Graphics2D g,JComponent c,int width,int height){  paintMenu(g,c,width,height,enabled);}  }
class C{  private static void waitForOperationsDone(VerificationHost host,Compute compute,String projectId,com.google.api.services.compute.model.Operation[] ops,String[] zones,String[] opIds) throws IOException {  for (int i=0; i < ops.length; i++) {    while (ops[i] != null && !ops[i].getStatus().equals(OPERATION_STATUS_DONE)) {      try {        Thread.sleep(WAIT_INTERVAL);      } catch (      Exception e) {        host.log(Level.WARNING,String.format("Error: %s",e.getMessage()));      }      if (zones[i] != null) {        Compute.ZoneOperations.Get get=compute.zoneOperations().get(projectId,zones[i],opIds[i]);        ops[i]=get.execute();        continue;      }      Compute.GlobalOperations.Get get=compute.globalOperations().get(projectId,opIds[i]);      ops[i]=get.execute();    }  }}  }
class C{  public <OUT>DataStreamSource<OUT> createTestStream(Input<OUT> input){  return testEnv.fromInput(input);}  }
class C{  public AbTaskItem(AbTaskListener listener){  super();  this.listener=listener;}  }
class C{  public static boolean isHex(String str){  if (str == null || str.length() == 0)   return false;  for (int i=str.length() - 1; i >= 0; i--) {    char c=str.charAt(i);    if (!(c >= '0' && c <= '9')) {      c=Character.toLowerCase(c);      if (!(c == 'a' || c == 'b' || c == 'c' || c == 'd' || c == 'e' || c == 'f'))       return false;    }  }  return true;}  }
class C{  private void mergeWindow(List<WindowedValue<KV<K,InputT>>> elements){  int currentStart=0;  IntervalWindow currentWindow=(IntervalWindow)Iterables.getOnlyElement(elements.get(0).getWindows());  for (int i=1; i < elements.size(); i++) {    WindowedValue<KV<K,InputT>> nextValue=elements.get(i);    IntervalWindow nextWindow=(IntervalWindow)Iterables.getOnlyElement(nextValue.getWindows());    if (currentWindow.intersects(nextWindow)) {      currentWindow=currentWindow.span(nextWindow);    } else {      for (int j=i - 1; j >= currentStart; j--) {        WindowedValue<KV<K,InputT>> value=elements.get(j);        elements.set(j,WindowedValue.of(value.getValue(),value.getTimestamp(),currentWindow,value.getPane()));      }      currentStart=i;      currentWindow=nextWindow;    }  }  if (currentStart < elements.size() - 1) {    for (int j=elements.size() - 1; j >= currentStart; j--) {      WindowedValue<KV<K,InputT>> value=elements.get(j);      elements.set(j,WindowedValue.of(value.getValue(),value.getTimestamp(),currentWindow,value.getPane()));    }  }}  }
class C{  public static byte floatToByte52(float f){  int bits=Float.floatToRawIntBits(f);  int smallfloat=bits >> (24 - 5);  if (smallfloat <= (63 - 2) << 5) {    return (bits <= 0) ? (byte)0 : (byte)1;  }  if (smallfloat >= ((63 - 2) << 5) + 0x100) {    return -1;  }  return (byte)(smallfloat - ((63 - 2) << 5));}  }
class C{  public LongMap(){  this(32,0.8f);}  }
class C{  public static double[] randomVector(int length){  double[] returnVector=new double[length];  for (int i=0; i < returnVector.length; i++) {    returnVector[i]=Math.random();  }  return returnVector;}  }
class C{  public static FieldAnnotation fromBCELField(JavaClass jClass,Field field){  return new FieldAnnotation(jClass.getClassName(),field.getName(),field.getSignature(),field.isStatic());}  }
class C{  private Widget createToolbarPart(List<Utils.VisibleActionGroup> visibleActionGroupList){  FlowPanel toolbarPart=new FlowPanel();  if (addSeparatorFirst) {    final Widget firstDelimiter=createDelimiter();    toolbarPart.add(firstDelimiter);  }  for (  Utils.VisibleActionGroup visibleActionGroup : visibleActionGroupList) {    List<Action> actions=visibleActionGroup.getActionList();    if (actions == null || actions.size() == 0) {      continue;    }    FlowPanel actionGroupPanel=new FlowPanel();    actionGroupPanel.setStyleName(toolbarResources.toolbar().toolbarActionGroupPanel());    toolbarPart.add(actionGroupPanel);    for (    Action action : actions) {      if (action instanceof Separator) {        int actionIndex=actions.indexOf(action);        if (actionIndex > 0 && actionIndex < actions.size() - 1) {          final Widget delimiter=createDelimiter();          actionGroupPanel.add(delimiter);        }      } else       if (action instanceof CustomComponentAction) {        Presentation presentation=presentationFactory.getPresentation(action);        Widget customComponent=((CustomComponentAction)action).createCustomComponent(presentation);        actionGroupPanel.add(customComponent);      } else       if (action instanceof ActionGroup && ((ActionGroup)action).isPopup()) {        ActionPopupButton button=new ActionPopupButton((ActionGroup)action,actionManager,keyBindingAgent,presentationFactory,managerProvider,toolbarResources);        actionGroupPanel.add(button);      } else {        final ActionButton button=createToolbarButton(action);        actionGroupPanel.add(button);      }    }  }  return toolbarPart;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public int elementsCount(){  return elements.size();}  }
class C{  public boolean verify() throws MissingResourceFailureException, XMLSecurityException {  return super.verifyReferences(false);}  }
class C{  public static SecretKeys generateKey() throws GeneralSecurityException {  fixPrng();  KeyGenerator keyGen=KeyGenerator.getInstance(CIPHER);  keyGen.init(AES_KEY_LENGTH_BITS);  SecretKey confidentialityKey=keyGen.generateKey();  byte[] integrityKeyBytes=randomBytes(HMAC_KEY_LENGTH_BITS / 8);  SecretKey integrityKey=new SecretKeySpec(integrityKeyBytes,HMAC_ALGORITHM);  return new SecretKeys(confidentialityKey,integrityKey);}  }
class C{  public static String makeResourcePath(String key){  return key != null ? OSSUtils.urlEncodeKey(key) : null;}  }
class C{  public PermissionCollection newPermissionCollection(){  return new PropertyPermissionCollection();}  }
class C{  public static void write(ResultRecord bean,OutputStream os,boolean fragment) throws JAXBException {  writeXml((Object)bean,os,fragment);}  }
class C{  public void changeSelectionByOffset(int offset,boolean extend){  offset=Math.max(0,offset);  offset=Math.min(offset,model.getByteCount() - 1);  int row=offset / 16;  int col=offset % 16;  changeSelection(row,col,false,extend);}  }
class C{  public boolean forwardIfCurrent(char first,char second){  int start=pos;  if (!forwardIfCurrent(first))   return false;  removeSpace();  boolean rtn=forwardIfCurrent(second);  if (!rtn)   pos=start;  return rtn;}  }
class C{  public SecurityToken(SecurityConfiguration securityProfile,int secureChannelId,int tokenId,long creationTime,long lifetime,byte[] localNonce,byte[] remoteNonce) throws ServiceResultException {  if (securityProfile == null)   throw new IllegalArgumentException("null arg");  this.secureChannelId=secureChannelId;  this.securityConfiguration=securityProfile;  this.tokenId=tokenId;  this.lifetime=lifetime;  this.creationTime=creationTime;  this.localNonce=localNonce;  this.remoteNonce=remoteNonce;  boolean isNone=securityProfile.getMessageSecurityMode() == MessageSecurityMode.None;  int sks=getSecurityPolicy().getSignatureKeySize();  int eks=getSecurityPolicy().getEncryptionKeySize();  int ebs=getSecurityPolicy().getEncryptionBlockSize();  localSigningKey=isNone ? null : PSHA(getRemoteNonce(),null,getLocalNonce(),0,sks);  localEncryptingKey=isNone ? null : PSHA(getRemoteNonce(),null,getLocalNonce(),sks,eks);  localInitializationVector=isNone ? null : PSHA(getRemoteNonce(),null,getLocalNonce(),sks + eks,ebs);  remoteSigningKey=isNone ? null : PSHA(getLocalNonce(),null,getRemoteNonce(),0,sks);  remoteEncryptingKey=isNone ? null : PSHA(getLocalNonce(),null,getRemoteNonce(),sks,eks);  remoteInitializationVector=isNone ? null : PSHA(getLocalNonce(),null,getRemoteNonce(),sks + eks,ebs);}  }
class C{  public String processName(){  return Messages.process_name;}  }
class C{  protected void engineInit(int opmode,Key key,SecureRandom random) throws InvalidKeyException {  try {    engineInit(opmode,key,(AlgorithmParameterSpec)null,random);  } catch (  InvalidAlgorithmParameterException ie) {    InvalidKeyException ike=new InvalidKeyException("requires PBE parameters");    ike.initCause(ie);    throw ike;  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public void addMeta(char meta,String replacement){  metaCharacterSet.set(meta);  replacementMap.put(new String(new char[]{meta}),replacement);}  }
class C{  public void testWriteLittleEndian() throws Exception {  assertWriteLittleEndian32(bytes(0x78,0x56,0x34,0x12),0x12345678);  assertWriteLittleEndian32(bytes(0xf0,0xde,0xbc,0x9a),0x9abcdef0);  assertWriteLittleEndian64(bytes(0xf0,0xde,0xbc,0x9a,0x78,0x56,0x34,0x12),0x123456789abcdef0L);  assertWriteLittleEndian64(bytes(0x78,0x56,0x34,0x12,0xf0,0xde,0xbc,0x9a),0x9abcdef012345678L);}  }
class C{  private <T>Collection<T> convert(Iterator<T> iter){  List<T> list=new ArrayList<>();  while (iter.hasNext())   list.add(iter.next());  return list;}  }
class C{  public void writeEncoded(Writer writer,String xmlString) throws IOException {  if (xmlString == null) {    return;  }  int length=xmlString.length();  char character;  for (int i=0; i < length; i++) {    character=xmlString.charAt(i);switch (character) {case '&':      writer.write(AMP);    break;case '"':  writer.write(QUOTE);break;case '<':writer.write(LESS);break;case '>':writer.write(GREATER);break;case '\n':writer.write(LF);break;case '\r':writer.write(CR);break;case '\t':writer.write(TAB);break;default :if (character < 0x20) {String errString=ThreadLocalToolkit.getLocalizationManager().getLocalizedTextString("flex2.compiler.util.XMLStringSerializer.IllegalXMLChar");errString+=": " + Integer.toHexString(character);throw new IllegalArgumentException(errString);} else if (character > 0x7F) {writer.write("&#x");writer.write(Integer.toHexString(character).toUpperCase());writer.write(";");} else {writer.write(character);}break;}}}  }
class C{  public static Result updateOrganizationInfo(String organizationName) throws IOException, NoSuchAlgorithmException, ServletException {  Form<Organization> organizationForm=form(Organization.class).bindFromRequest();  Organization modifiedOrganization=organizationForm.get();  Result result=validateForUpdate(organizationForm,modifiedOrganization);  if (result != null) {    return result;  }  Http.MultipartFormData.FilePart filePart=request().body().asMultipartFormData().getFile("logoPath");  if (!isEmptyFilePart(filePart)) {    Attachment.deleteAll(modifiedOrganization.asResource());    new Attachment().store(filePart.getFile(),filePart.getFilename(),modifiedOrganization.asResource());  }  Organization original=Organization.find.byId(modifiedOrganization.id);  original.updateWith(modifiedOrganization);  return redirect(routes.OrganizationApp.settingForm(modifiedOrganization.name));}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public InlineQueryResultGif.InlineQueryResultGifBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  protected int read(){  int curByte=0;  try {    curByte=(rawData.get() & 0xFF);  } catch (  final Exception e) {    status=STATUS_FORMAT_ERROR;  }  return curByte;}  }
class C{  public boolean canBeZero(){  boolean zero=true;  if (getFormat().equals(DECIMAL_POSITIVE_7_SCALE)) {    zero=false;  } else   if (getFormat().equals(DECIMAL_POSITIVE_10_SCALE)) {    zero=false;  }  return zero;}  }
class C{  public final double kappa(){  return m_delegate.kappa();}  }
class C{  protected void addDocumentationPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DocumentedElement_documentation_feature"),getString("_UI_PropertyDescriptor_description","_UI_DocumentedElement_documentation_feature","_UI_DocumentedElement_type"),BasePackage.Literals.DOCUMENTED_ELEMENT__DOCUMENTATION,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void paintSeparatorBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  protected void unhighlightEdges(final EdgeRealizer edge){  CEdgeHighlighter.highlightEdge(edge,false);}  }
class C{  @SuppressWarnings("deprecation") public static YearMonth fromDateFields(Date date){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  return new YearMonth(date.getYear() + 1900,date.getMonth() + 1);}  }
class C{  public LoanApplicationTestBuilder withCalendarID(String calendarId){  this.calendarId=calendarId;  return this;}  }
class C{  public HttpAuthenticationException(Throwable cause){  super(cause);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.VARIABLE_DEFINITION;}  }
class C{  public GROUP_BY GROUP_BY(String groupBy){  return new GROUP_BY(this,groupBy);}  }
class C{  int throwInvalid(String name,int offset) throws ParseException {  throw new ParseException("Invalid " + name + " value",offset);}  }
class C{  public Vertex discover(Vertex source,Vertex vertex){  return discover(source,vertex,null);}  }
class C{  static int[] encode(IR ir){  int index=0;  int currStartOff, currEndOff;  int tableSize=countExceptionTableSize(ir);  int[] eTable=new int[tableSize * 4];  MachineCodeOffsets mcOffsets=ir.MIRInfo.mcOffsets;  for (BasicBlock bblock=ir.firstBasicBlockInCodeOrder(); bblock != null; ) {    int startOff=mcOffsets.getMachineCodeOffset(bblock.firstInstruction());    int endOff=mcOffsets.getMachineCodeOffset(bblock.lastInstruction());    if (endOff > startOff) {      if (!bblock.hasExceptionHandlers()) {        bblock=bblock.nextBasicBlockInCodeOrder();        continue;      }      BasicBlock followonBB;      Enumeration<BasicBlock> reachBBe, e;      boolean joinedBlocks;      reachBBe=bblock.getReachableExceptionHandlers();      if (!reachBBe.hasMoreElements()) {        bblock=bblock.nextBasicBlockInCodeOrder();        continue;      }      currStartOff=startOff;      currEndOff=endOff;      joinedBlocks=false;      for (followonBB=bblock.nextBasicBlockInCodeOrder(); followonBB != null; followonBB=followonBB.nextBasicBlockInCodeOrder()) {        int fStartOff=mcOffsets.getMachineCodeOffset(followonBB.firstInstruction());        int fEndOff=mcOffsets.getMachineCodeOffset(followonBB.lastInstruction());        if (fEndOff > fStartOff) {          if (followonBB.hasExceptionHandlers() && bblock.isExceptionHandlerEquivalent(followonBB)) {            currEndOff=fEndOff;            joinedBlocks=true;          } else {            break;          }        }      }      if (joinedBlocks) {        e=bblock.getExceptionHandlers();      } else {        e=reachBBe;      }      while (e.hasMoreElements()) {        ExceptionHandlerBasicBlock eBlock=(ExceptionHandlerBasicBlock)e.nextElement();        for (java.util.Enumeration<TypeOperand> ets=eBlock.getExceptionTypes(); ets.hasMoreElements(); ) {          TypeOperand type=ets.nextElement();          Instruction label=eBlock.firstInstruction();          int catchOffset;          if (mcOffsets.lacksMachineCodeOffset(label)) {            catchOffset=UNREACHABLE_CATCH_BLOCK;          } else {            catchOffset=mcOffsets.getMachineCodeOffset(label);          }          eTable[index + TRY_START]=currStartOff;          eTable[index + TRY_END]=currEndOff;          eTable[index + CATCH_START]=catchOffset;          try {            eTable[index + EX_TYPE]=type.getTypeRef().resolve().getId();          } catch (          NoClassDefFoundError except) {            VM.sysWriteln("Trouble resolving a caught exception at compile time:");            except.printStackTrace();            VM.sysFail("Unable to resolve caught exception type at compile time");          }          index+=4;        }      }      bblock=followonBB;    } else {      bblock=bblock.nextBasicBlockInCodeOrder();    }  }  if (index != eTable.length) {    int[] newETable=new int[index];    for (int i=0; i < index; i++) {      newETable[i]=eTable[i];    }    eTable=newETable;  }  return eTable;}  }
class C{  private void abortResponse(ContainerRequestContext requestContext,Response.Status status,String stringEntity){  requestContext.abortWith(Response.status(status).entity(stringEntity).header(X_GONDOLA_ERROR,stringEntity).build());}  }
class C{  public boolean createStdPeriods(Locale locale,Timestamp startDate,String dateFormat){  if (locale == null) {    MClient client=MClient.get(getCtx());    locale=client.getLocale();  }  if (locale == null && Language.getLoginLanguage() != null)   locale=Language.getLoginLanguage().getLocale();  if (locale == null)   locale=Env.getLanguage(getCtx()).getLocale();  SimpleDateFormat formatter;  if (dateFormat == null || dateFormat.equals(""))   dateFormat="MMM-yy";  formatter=new SimpleDateFormat(dateFormat,locale);  int year=getYearAsInt();  GregorianCalendar cal=new GregorianCalendar(locale);  if (startDate != null) {    cal.setTime(startDate);    if (cal.get(Calendar.YEAR) != year)     year=cal.get(Calendar.YEAR);  } else {    cal.set(Calendar.YEAR,year);    cal.set(Calendar.MONTH,0);    cal.set(Calendar.DAY_OF_MONTH,1);  }  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  for (int month=0; month < 12; month++) {    Timestamp start=new Timestamp(cal.getTimeInMillis());    String name=formatter.format(start);    cal.add(Calendar.MONTH,1);    cal.add(Calendar.DAY_OF_YEAR,-1);    Timestamp end=new Timestamp(cal.getTimeInMillis());    MPeriod period=MPeriod.findByCalendar(getCtx(),start,getC_Calendar_ID(),get_TrxName());    if (period == null) {      period=new MPeriod(this,month + 1,name,start,end);    } else {      period.setC_Year_ID(this.getC_Year_ID());      period.setPeriodNo(month + 1);      period.setName(name);      period.setStartDate(start);      period.setEndDate(end);    }    period.saveEx(get_TrxName());    cal.add(Calendar.DAY_OF_YEAR,1);  }  return true;}  }
class C{  public RPGItem toRPGItem(ItemStack itemstack){  return ItemManager.toRPGItem(itemstack);}  }
class C{  public void reset(DataInput in,long valueCount){  this.in=in;  assert valueCount >= 0;  this.valueCount=valueCount;  off=blockSize;  ord=0;}  }
class C{  protected static synchronized void initialize(){  if (valid == null) {    valid=Boolean.TRUE;    VFS.VFS=checkNotNull(getClass("org.jboss.vfs.VFS"));    VirtualFile.VirtualFile=checkNotNull(getClass("org.jboss.vfs.VirtualFile"));    VFS.getChild=checkNotNull(getMethod(VFS.VFS,"getChild",URL.class));    VirtualFile.getChildrenRecursively=checkNotNull(getMethod(VirtualFile.VirtualFile,"getChildrenRecursively"));    VirtualFile.getPathNameRelativeTo=checkNotNull(getMethod(VirtualFile.VirtualFile,"getPathNameRelativeTo",VirtualFile.VirtualFile));    checkReturnType(VFS.getChild,VirtualFile.VirtualFile);    checkReturnType(VirtualFile.getChildrenRecursively,List.class);    checkReturnType(VirtualFile.getPathNameRelativeTo,String.class);  }}  }
class C{  public static void updateStateSetTrees(List<Tree<StateSet>> trees,ArrayParser parser){  for (  Tree<StateSet> tree : trees) {    parser.doInsideOutsideScores(tree,false,false);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public NetApplicationModel(){}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:30.961 -0500",hash_original_method="B128FED5B5AAAF883404F36E34AD6524",hash_generated_method="AE36E1D47D9FEEEC990D6DD66BA0B71B") @Override public int hashCode(){  return (int)(milliseconds >>> 32) ^ (int)milliseconds;}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != m) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!this.isNonsingular()) {    throw new RuntimeException("Matrix is singular.");  }  int nx=B.getColumnDimension();  Matrix Xmat=B.getMatrix(piv,0,nx - 1);  double[][] X=Xmat.getArray();  for (int k=0; k < n; k++) {    for (int i=k + 1; i < n; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      X[k][j]/=LU[k][k];    }    for (int i=0; i < k; i++) {      for (int j=0; j < nx; j++) {        X[i][j]-=X[k][j] * LU[i][k];      }    }  }  return Xmat;}  }
class C{  protected ActiveMQMessage createMessage(){  return new ActiveMQMessage();}  }
class C{  protected void formExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de formExecuteLogic");  String id=request.getParameter(Constants.ID);  if (logger.isInfoEnabled())   logger.info("Id Clasificador: " + id);  String idObjeto=request.getParameter("idObjeto");  if (logger.isInfoEnabled())   logger.info("Id Objeto: " + idObjeto);  int tipoObjeto=TypeConverter.toInt(request.getParameter("tipoObjeto"),TipoObjeto.DESCRIPTOR);  if (logger.isInfoEnabled())   logger.info("Tipo Objeto: " + tipoObjeto);  String idClfPadre=request.getParameter("idClfPadre");  if (logger.isInfoEnabled())   logger.info("Id Clasificador Padre: " + idClfPadre);  ServiceRepository services=ServiceRepository.getInstance(getServiceClient(request));  GestionDocumentosElectronicosBI documentosBI=services.lookupGestionDocumentosElectronicosBI();  if (StringUtils.isNotBlank(id)) {    saveCurrentInvocation(KeysClientsInvocations.DOCUMENTOS_ELECTRONICOS_CLASIFICADOR_EDIT,request);    DocClasificadorVO clasificador=documentosBI.getClasificador(tipoObjeto,idObjeto,id);    if (logger.isInfoEnabled())     logger.info("DocClasificadorVO: " + clasificador);    ((ClasificadorForm)form).set(clasificador);    ((ClasificadorForm)form).setTienePadreFijo(documentosBI.esFijo(idClfPadre,tipoObjeto,idObjeto));    ((ClasificadorForm)form).setTieneHijoFijo(documentosBI.tieneHijoFijo(id,tipoObjeto));  } else {    saveCurrentInvocation(KeysClientsInvocations.DOCUMENTOS_ELECTRONICOS_CLASIFICADOR_FORM,request);    ((ClasificadorForm)form).setIdObjeto(idObjeto);    ((ClasificadorForm)form).setTipoObjeto(tipoObjeto);    ((ClasificadorForm)form).setTienePadreFijo(documentosBI.esFijo(idClfPadre,tipoObjeto,idObjeto));    ((ClasificadorForm)form).setTieneHijoFijo(false);  }  if (tipoObjeto == TipoObjeto.DESCRIPTOR) {    request.setAttribute(DocumentosConstants.DESCRIPTOR_KEY,getGestionDescripcionBI(request).getDescriptorExt(idObjeto));  } else {    ElementoCuadroClasificacionVO elemento=getGestionCuadroClasificacionBI(request).getElementoCuadroClasificacion(idObjeto);    if (elemento != null) {switch (elemento.getTipo()) {case ElementoCuadroClasificacion.TIPO_UNIDAD_DOCUMENTAL:        UnidadDocumentalToPO udocTransformer=new UnidadDocumentalToPO(services);      UnidadDocumentalVO udoc=getGestionUnidadDocumentalBI(request).getUnidadDocumental(idObjeto);    request.setAttribute(DocumentosConstants.UNIDAD_DOCUMENTAL_KEY,udocTransformer.transform(udoc,getAppUser(request)));  break;case ElementoCuadroClasificacion.TIPO_SERIE:SerieToPO serieTransformer=SerieToPO.getInstance(services);SerieVO serie=getGestionSeriesBI(request).getSerie(idObjeto);setInTemporalSession(request,DocumentosConstants.SERIE_KEY,serieTransformer.transform(serie,getAppUser(request)));break;}}}setReturnActionFordward(request,mapping.findForward("editar_clasificador"));}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void addSignatureTimestamp(byte[] timestampDer) throws Exception {  Element unsignedProperties=getFirstElementByTagName(document,xadesElement(UNSIGNED_SIGNATURE_PROPS_TAG));  Element signatureTimeStampElement=document.createElement(xadesElement(SIGNATURE_TIMESTAMP_TAG));  String timestampDERBase64=encodeBase64(timestampDer);  signatureTimeStampElement.setTextContent(timestampDERBase64);  unsignedProperties.insertBefore(signatureTimeStampElement,unsignedProperties.getFirstChild());}  }
class C{  public AugmentedNode<ILineSegment> successor(AugmentedNode<ILineSegment> n){  while ((n != state.root() && n == n.parent().right())) {    n=n.parent();  }  if (n == state.root()) {    return null;  }  n=n.parent().right();  while (n.left() != null) {    n=n.left();  }  return n;}  }
class C{  public static void showProgressBar(int status,int i){  if (mRootView != null) {    ProgressBar pb=(ProgressBar)mRootView.findViewById(R.id.progress_slice);    TextView tv=(TextView)mRootView.findViewById(R.id.viewer_text_progress_slice);    TextView tve=(TextView)mRootView.findViewById(R.id.viewer_text_estimated_time);    TextView tve_title=(TextView)mRootView.findViewById(R.id.viewer_estimated_time_textview);    if (mSlicingHandler.getLastReference() != null) {      tve_title.setVisibility(View.VISIBLE);      pb.setVisibility(View.VISIBLE);switch (status) {case StateUtils.SLICER_HIDE:        if (i < 0) {          tv.setText(R.string.error);        } else {          tv.setText(R.string.viewer_text_downloaded);        }      pb.setVisibility(View.INVISIBLE);    break;case StateUtils.SLICER_UPLOAD:  String uploadText=mContext.getString(R.string.viewer_text_uploading);if (i == 0) pb.setIndeterminate(true); else {  pb.setProgress(i);  pb.setIndeterminate(false);  uploadText+=" (" + i + "%)";}tv.setText(uploadText);tve.setText(null);break;case StateUtils.SLICER_SLICE:String slicingText=mContext.getString(R.string.viewer_text_slicing);if (i == 0) {pb.setIndeterminate(true);} else if (i == 100) {pb.setIndeterminate(false);pb.setProgress(100);slicingText+="  " + mContext.getString(R.string.viewer_text_done);} else {pb.setProgress(i);pb.setIndeterminate(false);slicingText+="  (" + i + "%)";}tv.setText(slicingText);tve.setText(null);mRootView.invalidate();break;case StateUtils.SLICER_DOWNLOAD:if (i > 0) {tve.setText(OctoprintConnection.ConvertSecondToHHMMString(String.valueOf(i)));}tv.setText(R.string.viewer_text_downloading);pb.setIndeterminate(true);break;default :break;}} else {pb.setVisibility(View.INVISIBLE);tve_title.setVisibility(View.INVISIBLE);tv.setText(null);tve.setText(null);mRootView.invalidate();}}}  }
class C{  public static org.oscm.internal.vo.VOServiceDetails convertToUp(org.oscm.vo.VOServiceDetails oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServiceDetails newVO=new org.oscm.internal.vo.VOServiceDetails();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setTechnicalService(convertToUp(oldVO.getTechnicalService()));  newVO.setImageDefined(oldVO.isImageDefined());  newVO.setParameters(convertToUpVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToUp(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.internal.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.internal.types.enumtypes.OfferingType.class));  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  private static boolean isValidOperation(String op){  if (op.equalsIgnoreCase("LOOKUP") || op.equalsIgnoreCase("REGISTER") || op.equalsIgnoreCase("SIGNED")|| op.equalsIgnoreCase("UNSIGNED")|| op.equalsIgnoreCase("POLICY")) {    return true;  } else {    return false;  }}  }
class C{  public static <K,V>Map<K,V> synchronizedMap(Map<K,V> map){  if (map == null) {    throw new NullPointerException("map == null");  }  return new SynchronizedMap<K,V>(map);}  }
class C{  public boolean isChecked(){  return getBooleanProperty(PROPERTY_CHECKED);}  }
class C{  public static BoxDataSet serializableInstance(){  return new BoxDataSet(new ShortDataBox(4,4),null);}  }
class C{  protected void handleIOException(IOException err){  handleException(err);}  }
class C{  @Override public boolean isStealthActive(){  for (  Mounted mEquip : getMisc()) {    MiscType mtype=(MiscType)mEquip.getType();    if (mtype.hasFlag(MiscType.F_STEALTH)) {      if (mEquip.curMode().equals("On") && hasActiveECM()) {        return true;      }    }  }  return false;}  }
class C{  public static void eliminarPerfilesByIdReport(int idReport,DbConnection db) throws Exception {  SicresPerfilInformesDatos informePerfilDatos=new SicresPerfilInformesDatos();  informePerfilDatos.setIdReport(idReport);  informePerfilDatos.deleteByIdReport(db);}  }
class C{  private void cancel(){  if (future != null) {    future.cancel(false);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.445 -0500",hash_original_method="781B73A423F5607115D65A9F70C8C3FD",hash_generated_method="D543F294199168290E6AF66EFEC94A0E") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int mail(String reversePath) throws IOException {  return __sendCommand(SMTPCommand.MAIL,reversePath,false);}  }
class C{  protected void exportStatements(RepositoryResult<Statement> stIter,RDFHandler handler) throws RepositoryException, RDFHandlerException {  try {    handler.startRDF();    RepositoryResult<Namespace> nsIter=getNamespaces();    try {      while (nsIter.hasNext()) {        Namespace ns=nsIter.next();        handler.handleNamespace(ns.getPrefix(),ns.getName());      }    }  finally {      nsIter.close();    }    while (stIter.hasNext()) {      handler.handleStatement(stIter.next());    }    handler.endRDF();  }  finally {    stIter.close();  }}  }
class C{  public boolean containsKey(double key){  if (m_Cache.containsKey(key)) {    return true;  }  return false;}  }
class C{  protected StopwordAnalyzerBase(final CharArraySet stopwords){  this.stopwords=stopwords == null ? CharArraySet.EMPTY_SET : CharArraySet.unmodifiableSet(CharArraySet.copy(stopwords));}  }
class C{  public void addArgIfAbsent(final BOp arg){  if (arg == null)   throw new IllegalArgumentException();  if (arg == this)   throw new IllegalArgumentException();  if (!args.contains(arg)) {    addArg(arg);  }}  }
class C{  public AppLauncher secondsBetweenLaunchOnLockedRetries(int secondsBetweenLaunchOnLockedRetries){  this.secondsBetweenLaunchOnLockedRetries=secondsBetweenLaunchOnLockedRetries;  return this;}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.771 -0400",hash_original_method="C10E35B15C5C34D2F11AD8F56A8AFBE7",hash_generated_method="8538DC9FDF04C178771F287DC9084D00") @Override public void write(int idx) throws IOException {  try {    beforeWrite(1);    out.write(idx);    afterWrite(1);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  @VisibleForTesting public boolean apply(CFMetaData cfm) throws ConfigurationException {  logger.debug("applying {} to {}",cfm,this);  validateCompatility(cfm);  comparator=cfm.comparator;  comment=Strings.nullToEmpty(cfm.comment);  readRepairChance=cfm.readRepairChance;  dcLocalReadRepairChance=cfm.dcLocalReadRepairChance;  gcGraceSeconds=cfm.gcGraceSeconds;  defaultValidator=cfm.defaultValidator;  keyValidator=cfm.keyValidator;  minCompactionThreshold=cfm.minCompactionThreshold;  maxCompactionThreshold=cfm.maxCompactionThreshold;  bloomFilterFpChance=cfm.getBloomFilterFpChance();  caching=cfm.caching;  minIndexInterval=cfm.minIndexInterval;  maxIndexInterval=cfm.maxIndexInterval;  memtableFlushPeriod=cfm.memtableFlushPeriod;  defaultTimeToLive=cfm.defaultTimeToLive;  speculativeRetry=cfm.speculativeRetry;  if (!cfm.droppedColumns.isEmpty())   droppedColumns=cfm.droppedColumns;  MapDifference<ByteBuffer,ColumnDefinition> columnDiff=Maps.difference(columnMetadata,cfm.columnMetadata);  for (  ColumnDefinition cd : columnDiff.entriesOnlyOnLeft().values())   removeColumnDefinition(cd);  for (  ColumnDefinition cd : columnDiff.entriesOnlyOnRight().values())   addColumnDefinition(cd);  for (  ByteBuffer name : columnDiff.entriesDiffering().keySet()) {    ColumnDefinition oldDef=columnMetadata.get(name);    ColumnDefinition def=cfm.columnMetadata.get(name);    addOrReplaceColumnDefinition(oldDef.apply(def));  }  compactionStrategyClass=cfm.compactionStrategyClass;  compactionStrategyOptions=cfm.compactionStrategyOptions;  compressionParameters=cfm.compressionParameters;  triggers=cfm.triggers;  isDense(cfm.isDense);  rebuild();  logger.debug("application result is {}",this);  return !columnDiff.entriesOnlyOnLeft().isEmpty() || !columnDiff.entriesOnlyOnRight().isEmpty() || !columnDiff.entriesDiffering().isEmpty();}  }
class C{  public boolean overlapsTimeRange(int fromTime,int toTime){  int firstStopTime, lastStopTime;  if (this.headwaySeconds != null) {    firstStopTime=Integer.MAX_VALUE;    lastStopTime=Integer.MIN_VALUE;    if (this.headwaySeconds.length == 0) {      LOG.warn("Frequency trip has no frequency entries!");      return false;    }    for (int i=0; i < this.headwaySeconds.length; i++) {      firstStopTime=Math.min(firstStopTime,this.startTimes[i]);      lastStopTime=Math.max(lastStopTime,this.endTimes[i] + this.arrivals[this.arrivals.length - 1]);    }  } else {    firstStopTime=departures[0];    lastStopTime=arrivals[arrivals.length - 1];  }  return firstStopTime <= toTime && lastStopTime >= fromTime;}  }
class C{  public String toURIFragment(){  try {    StringBuilder rval=new StringBuilder("#");    for (    String token : refTokens) {      rval.append('/').append(URLEncoder.encode(token,ENCODING));    }    return rval.toString();  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  protected double[][] makeJointVectorForPast(double[] destination){  try {    return MatrixUtils.makeDelayEmbeddingVector(destination,k,k - 1,destination.length - k);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public boolean isTransparent(){  return transparent;}  }
class C{  private void checkFirmwareVersion(CIMInstance firmwareInstance,StorageSystem system) throws SMIPluginException {  String instanceVersion=getCIMPropertyValue(firmwareInstance,VERSION);  system.setFirmwareVersion(instanceVersion);  String minimumSupportedVersion=VersionChecker.getMinimumSupportedVersion(Type.valueOf(system.getSystemType()));  _logger.info("Verifying version details : Minimum Supported Version {} - Discovered Firmware Version {}",minimumSupportedVersion,instanceVersion);  if (VersionChecker.verifyVersionDetails(minimumSupportedVersion,instanceVersion) < 0) {    String msg=String.format("Firmware version %s is not supported. Should be a minimum of %s",instanceVersion,minimumSupportedVersion);    _logger.warn(msg);    system.setCompatibilityStatus(CompatibilityStatus.INCOMPATIBLE.toString());    DiscoveryUtils.setSystemResourcesIncompatible(_dbClient,coordinator,system.getId());    _dbClient.persistObject(system);    throw new SMIPluginException(msg,SMIPluginException.ERRORCODE_FIRMWARE_NOT_SUPPORTED);  } else {    system.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.toString());    _dbClient.persistObject(system);  }}  }
class C{  public CompoundStringBuilder(int capacity){  this(new StringBuilder(),capacity);}  }
class C{  @Override public void accept(final MethodVisitor mv){switch (type) {case Opcodes.F_NEW:case Opcodes.F_FULL:    mv.visitFrame(type,local.size(),asArray(local),stack.size(),asArray(stack));  break;case Opcodes.F_APPEND:mv.visitFrame(type,local.size(),asArray(local),0,null);break;case Opcodes.F_CHOP:mv.visitFrame(type,local.size(),null,0,null);break;case Opcodes.F_SAME:mv.visitFrame(type,0,null,0,null);break;case Opcodes.F_SAME1:mv.visitFrame(type,0,null,1,asArray(stack));break;}}  }
class C{  private void orthes(){  final double[] ort=new double[n];  int low=0;  int high=n - 1;  for (int m=low + 1; m <= high - 1; m++) {    double scale=0.0;    for (int i=m; i <= high; i++)     scale=scale + abs(H.get(i,m - 1));    if (scale != 0.0) {      double h=0.0;      double tmp;      for (int i=high; i >= m; i--) {        ort[i]=tmp=H.get(i,m - 1) / scale;        h+=tmp * tmp;      }      double g=sqrt(h);      if ((tmp=ort[m]) > 0)       g=-g;      h=h - tmp * g;      ort[m]=tmp - g;      orthesApplyHouseholder(m,high,ort,h);      ort[m]*=scale;      H.set(m,m - 1,scale * g);    }  }  for (int j=0; j < n; j++) {    for (int i=0; i < n; i++) {      V.set(i,j,(i == j ? 1.0 : 0.0));    }  }  orthesAccumulateTransforamtions(high,low,ort);}  }
class C{  protected final void SSE2_X87_REM(Instruction s){  Operand result=Binary.getClearResult(s);  RegisterOperand st0=new RegisterOperand(getST0(),result.getType());  int offset=-burs.ir.stackManager.allocateSpaceForConversion();  StackLocationOperand sl=new StackLocationOperand(true,offset,SSE2_SIZE(result));  EMIT(CPOS(s,MIR_Move.create(SSE2_MOVE(result),sl,Binary.getClearVal2(s))));  EMIT(CPOS(s,MIR_Move.create(IA32_FLD,st0,sl.copy())));  EMIT(CPOS(s,MIR_Move.create(SSE2_MOVE(result),sl.copy(),Binary.getClearVal1(s))));  EMIT(CPOS(s,MIR_Move.create(IA32_FLD,st0.copy(),sl.copy())));  EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_FPREM,st0.copy(),st0.copy())));  EMIT(CPOS(s,MIR_Move.create(IA32_FSTP,sl.copy(),st0.copy())));  EMIT(CPOS(s,MIR_Nullary.create(IA32_FFREE,st0.copy())));  EMIT(MIR_Move.mutate(s,SSE2_MOVE(result),result,sl.copy()));}  }
class C{  public XMLEncoder(OutputStream out,String charset,boolean declaration,int indentation){  if (out == null) {    throw new IllegalArgumentException("the output stream cannot be null");  }  if (indentation < 0) {    throw new IllegalArgumentException("the indentation must be >= 0");  }  Charset cs=Charset.forName(charset);  this.encoder=cs.newEncoder();  this.charset=charset;  this.declaration=declaration;  this.indentation=indentation;  this.out=new OutputStreamWriter(out,cs.newEncoder());  valueToExpression=new IdentityHashMap<>();  targetToStatementList=new IdentityHashMap<>();  nameGenerator=new NameGenerator();}  }
class C{  protected boolean isValidSearch(){  if (getSearchText().length() == 0)   return true;  if (!isRegularExpression()) {    return true;  } else {    try {      Pattern.compile(getSearchText());      return true;    } catch (    Exception e) {      return false;    }  }}  }
class C{  public String requestGatewayBlocking(){  try {    logger.debug("Requesting gateway (token: {})",token.replaceAll(".{10}","**********"));    HttpResponse<JsonNode> response=Unirest.get("https://discordapp.com/api/gateway").header("authorization",token).asJson();    if (response.getStatus() == 401) {      throw new IllegalStateException("Cannot request gateway! Invalid token?");    }    if (response.getStatus() < 200 || response.getStatus() > 299) {      throw new IllegalStateException("Received http status code " + response.getStatus() + " with message "+ response.getStatusText()+ " and body "+ response.getBody());    }    String gateway=response.getBody().getObject().getString("url");    logger.debug("Requested gateway {} (token: {})",gateway,token.replaceAll(".{10}","**********"));    return gateway;  } catch (  UnirestException e) {    e.printStackTrace();    return null;  }}  }
class C{  public void testInt() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new IntPoint("value",300000));  doc.add(new StoredField("value",300000));  writer.addDocument(doc);  doc=new Document();  doc.add(new IntPoint("value",-1));  doc.add(new StoredField("value",-1));  writer.addDocument(doc);  doc=new Document();  doc.add(new IntPoint("value",4));  doc.add(new StoredField("value",4));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.INTEGER_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  Sort sort=new Sort(new SortField("value",SortField.Type.INT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("300000",searcher.doc(td.scoreDocs[2].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public Max(){  super(Number.class,Number.class,Number.class);}  }
class C{  protected boolean hasOutstandingChanges(){  return (fDocumentNo.hasChanged() || fBankAccount_ID.hasChanged() || fcheckPayment.hasChanged()|| fcheckReceipt.hasChanged()|| fBPartner_ID.hasChanged()|| fAmtFrom.hasChanged()|| fAmtTo.hasChanged()|| fDateFrom.hasChanged()|| fDateTo.hasChanged());}  }
class C{  public CommitParams withComment(String comment){  this.comment=comment;  return this;}  }
class C{  void writeBlocks(int prefixLength,int count) throws IOException {  assert count > 0;  assert prefixLength > 0 || count == pending.size();  int lastSuffixLeadLabel=-1;  boolean hasTerms=false;  boolean hasSubBlocks=false;  int start=pending.size() - count;  int end=pending.size();  int nextBlockStart=start;  int nextFloorLeadLabel=-1;  for (int i=start; i < end; i++) {    PendingEntry ent=pending.get(i);    int suffixLeadLabel;    if (ent.isTerm) {      PendingTerm term=(PendingTerm)ent;      if (term.termBytes.length == prefixLength) {        assert lastSuffixLeadLabel == -1;        suffixLeadLabel=-1;      } else {        suffixLeadLabel=term.termBytes[prefixLength] & 0xff;      }    } else {      PendingBlock block=(PendingBlock)ent;      assert block.prefix.length > prefixLength;      suffixLeadLabel=block.prefix.bytes[block.prefix.offset + prefixLength] & 0xff;    }    if (suffixLeadLabel != lastSuffixLeadLabel) {      int itemsInBlock=i - nextBlockStart;      if (itemsInBlock >= minItemsInBlock && end - nextBlockStart > maxItemsInBlock) {        boolean isFloor=itemsInBlock < count;        newBlocks.add(writeBlock(prefixLength,isFloor,nextFloorLeadLabel,nextBlockStart,i,hasTerms,hasSubBlocks));        hasTerms=false;        hasSubBlocks=false;        nextFloorLeadLabel=suffixLeadLabel;        nextBlockStart=i;      }      lastSuffixLeadLabel=suffixLeadLabel;    }    if (ent.isTerm) {      hasTerms=true;    } else {      hasSubBlocks=true;    }  }  if (nextBlockStart < end) {    int itemsInBlock=end - nextBlockStart;    boolean isFloor=itemsInBlock < count;    newBlocks.add(writeBlock(prefixLength,isFloor,nextFloorLeadLabel,nextBlockStart,end,hasTerms,hasSubBlocks));  }  assert newBlocks.isEmpty() == false;  PendingBlock firstBlock=newBlocks.get(0);  assert firstBlock.isFloor || newBlocks.size() == 1;  firstBlock.compileIndex(newBlocks,scratchBytes,scratchIntsRef);  pending.subList(pending.size() - count,pending.size()).clear();  pending.add(firstBlock);  newBlocks.clear();}  }
class C{  public Connection closestConnection(Connection conn,double maxRadius){  if (conn.isConnected()) {    return null;  }  YSortedList compatibleList=oppositeLists[conn.getType()];  return compatibleList.searchForClosest(conn,maxRadius);}  }
class C{  public Object clone(){  PageFormat newPage;  try {    newPage=(PageFormat)super.clone();    newPage.mPaper=(Paper)mPaper.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();    newPage=null;  }  return newPage;}  }
class C{  public boolean hasCustomFormats(){  return customNumberFormats != null && !customNumberFormats.isEmpty() || customDateFormats != null && !customDateFormats.isEmpty() || getParent() != null && getParent().hasCustomFormats();}  }
class C{  public void insertOutEdge(DepGraphNode node,int type){  if (COMPACT) {    int numTries=0;    for (DepGraphEdge oe=(DepGraphEdge)firstOutEdge(); oe != null && numTries < 4; oe=(DepGraphEdge)oe.getNextOut(), numTries++) {      if (oe.toNode() == node) {        oe.addDepType(type);        return;      }    }  }  DepGraphEdge edge=new DepGraphEdge(this,node,type);  this.appendOutEdge(edge);  node.appendInEdge(edge);}  }
class C{  public void remove(Node node){  List outEdges=node.getOutEdges().getEdges();  for (Iterator i=outEdges.iterator(); i.hasNext(); ) {    DirectedEdge de=(DirectedEdge)i.next();    DirectedEdge sym=de.getSym();    if (sym != null)     remove(sym);    dirEdges.remove(de);    Edge edge=de.getEdge();    if (edge != null) {      edges.remove(edge);    }  }  nodeMap.remove(node.getCoordinate());  node.remove();}  }
class C{  private OperatorDeployInfo createOperatorDeployInfo(PTOperator oper){  OperatorDeployInfo ndi;  if (oper.isUnifier()) {    UnifierDeployInfo udi=new UnifierDeployInfo();    try {      udi.operatorAttributes=oper.getUnifiedOperatorMeta().getAttributes().clone();    } catch (    CloneNotSupportedException ex) {      throw new RuntimeException("Cannot clone unifier attributes",ex);    }    ndi=udi;  } else {    ndi=new OperatorDeployInfo();    Operator operator=oper.getOperatorMeta().getOperator();    if (operator instanceof InputOperator) {      ndi.type=OperatorType.INPUT;      if (!oper.getInputs().isEmpty()) {        for (        PTOperator.PTInput ptInput : oper.getInputs()) {          if (ptInput.logicalStream != null && ptInput.logicalStream.getSource() != null) {            ndi.type=OperatorType.GENERIC;            break;          }        }      }    } else {      ndi.type=OperatorType.GENERIC;    }  }  Checkpoint checkpoint=oper.getRecoveryCheckpoint();  ProcessingMode pm=oper.getOperatorMeta().getValue(OperatorContext.PROCESSING_MODE);  if (pm == ProcessingMode.AT_MOST_ONCE || pm == ProcessingMode.EXACTLY_ONCE) {    StorageAgent agent=oper.getOperatorMeta().getAttributes().get(OperatorContext.STORAGE_AGENT);    if (agent == null) {      agent=initCtx.getValue(OperatorContext.STORAGE_AGENT);    }    try {      long[] windowIds=agent.getWindowIds(oper.getId());      long checkpointId=Stateless.WINDOW_ID;      for (      long windowId : windowIds) {        if (windowId > checkpointId) {          checkpointId=windowId;        }      }      if (checkpoint == null || checkpoint.windowId != checkpointId) {        checkpoint=new Checkpoint(checkpointId,0,0);      }    } catch (    Exception e) {      throw new RuntimeException("Failed to determine checkpoint window id " + oper,e);    }  }  LOG.debug("{} recovery checkpoint {}",oper,checkpoint);  ndi.checkpoint=checkpoint;  ndi.name=oper.getOperatorMeta().getName();  ndi.id=oper.getId();  try {    ndi.contextAttributes=oper.getOperatorMeta().getAttributes().clone();  } catch (  CloneNotSupportedException ex) {    throw new RuntimeException("Cannot clone operator attributes",ex);  }  if (oper.isOperatorStateLess()) {    ndi.contextAttributes.put(OperatorContext.STATELESS,true);  }  return ndi;}  }
class C{  public static <T>T splitEachLine(File self,String regex,String charset,@ClosureParams(value=FromString.class,options={"List<String>","String[]"},conflictResolutionStrategy=PickFirstResolver.class) Closure<T> closure) throws IOException {  return IOGroovyMethods.splitEachLine(newReader(self,charset),regex,closure);}  }
class C{  public void onRemove(){  rmCnt.incrementAndGet();  if (delegate != null)   delegate.onRemove();}  }
class C{  public static void premain(final String args,final Instrumentation instrumentation){  Arguments arguments=Arguments.parseArgs(args);  Reporter reporter=instantiate(arguments.reporter,Reporter.CONSTRUCTOR_PARAM_TYPES,arguments);  Collection<Profiler> profilers=new ArrayList<>();  for (  Class<? extends Profiler> profiler : arguments.profilers) {    profilers.add(instantiate(profiler,Profiler.CONSTRUCTOR_PARAM_TYPES,reporter,arguments));  }  scheduleProfilers(profilers,arguments);  registerShutdownHook(profilers);}  }
class C{  private boolean parseRelativeImportDots(){  PsiBuilder builder=myContext.getBuilder();  boolean had_dots=false;  while (builder.getTokenType() == PyTokenTypes.DOT) {    had_dots=true;    builder.advanceLexer();  }  return had_dots;}  }
class C{  public static List<Map.Entry<List<String>,List<Double>>> sort(Map<List<String>,List<Double>> aggregatedResult,List<SortOption> sortOptions,int topN){  SortedSet<Map.Entry<List<String>,List<Double>>> allList=sortByValue(aggregatedResult,sortOptions);  List<Map.Entry<List<String>,List<Double>>> result=new ArrayList<Map.Entry<List<String>,List<Double>>>();  for (  Map.Entry<List<String>,List<Double>> entry : allList) {    result.add(entry);    if (topN > 0 && result.size() >= topN) {      break;    }  }  return result;}  }
class C{  public String lastPart(){  return parts[parts.length - 1];}  }
class C{  static String removeRelationshipNodes(String xml) throws IOException, SAXException {  Document doc=XmlUtil.parse(xml);  removeBinding(doc,"patient_relative");  removeBinding(doc,"patient_relative.person");  removeBinding(doc,"patient_relative.relationship");  for (  Element relative : toElementIterable(doc.getElementsByTagNameNS("","patient_relative"))) {    removeNode(relative);  }  for (  Element label : toElementIterable(doc.getElementsByTagNameNS(XFORMS_NAMESPACE,"label"))) {    Element parent=(Element)label.getParentNode();    if (XFORMS_NAMESPACE.equals(parent.getNamespaceURI()) && parent.getLocalName().equals("group") && "RELATIONSHIPS".equals(label.getTextContent())) {      removeNode(parent);      break;    }  }  return XformsUtil.doc2String(doc);}  }
class C{  public static boolean instanceOfResolved(RVMType LHSType,RVMType RHSType){  int LHSDimension=LHSType.getDimensionality();  int RHSDimension=RHSType.getDimensionality();  if (LHSDimension < 0 || RHSDimension < 0)   return false;  if (LHSDimension == 0) {    return instanceOfNonArray(LHSType.asClass(),RHSType.getTypeInformationBlock());  }  RVMType LHSInnermostElementType=LHSType.asArray().getInnermostElementType();  if (LHSInnermostElementType == RVMType.JavaLangObjectType) {    if (RHSDimension < LHSDimension)     return false;    if (RHSDimension > LHSDimension)     return true;    return RHSType.asArray().getInnermostElementType().isClassType();  } else   if (!(LHSInnermostElementType.isPrimitiveType() || LHSInnermostElementType.isUnboxedType())) {    if (RHSDimension == LHSDimension) {      RVMType RHSInnermostElementType=RHSType.asArray().getInnermostElementType();      if ((RHSInnermostElementType.isPrimitiveType() || RHSInnermostElementType.isUnboxedType()))       return false;      return instanceOfNonArray(LHSInnermostElementType.asClass(),RHSInnermostElementType.getTypeInformationBlock());    } else {      return (LHSDimension < RHSDimension && (LHSInnermostElementType == RVMType.JavaLangCloneableType || LHSInnermostElementType == RVMType.JavaIoSerializableType));    }  } else {    return false;  }}  }
class C{  protected Object retryOperation(ZooKeeperOperation operation) throws KeeperException, InterruptedException {  KeeperException exception=null;  for (int i=0; i < retryCount; i++) {    try {      return operation.execute();    } catch (    KeeperException.SessionExpiredException e) {      LOG.warn("Session expired for: " + zookeeper + " so reconnecting due to: "+ e,e);      throw e;    }catch (    KeeperException.ConnectionLossException e) {      if (exception == null) {        exception=e;      }      LOG.debug("Attempt " + i + " failed with connection loss so "+ "attempting to reconnect: "+ e,e);      retryDelay(i);    }  }  throw exception;}  }
class C{  private void initializePath(String p_uriSpec) throws MalformedURIException {  if (p_uriSpec == null) {    throw new MalformedURIException("Cannot initialize path from null string!");  }  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == '?' || testChar == '#') {      break;    }    if (testChar == '%') {      if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {        throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE,null));      }    } else     if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {      if ('\\' != testChar)       throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR,new Object[]{String.valueOf(testChar)}));    }    index++;  }  m_path=p_uriSpec.substring(start,index);  if (testChar == '?') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '#') {        break;      }      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Query string contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Query string contains invalid character:" + testChar);      }      index++;    }    m_queryString=p_uriSpec.substring(start,index);  }  if (testChar == '#') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Fragment contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Fragment contains invalid character:" + testChar);      }      index++;    }    m_fragment=p_uriSpec.substring(start,index);  }}  }
class C{  public Matrix4f shadow(Vector4f light,Matrix4f planeTransform){  return shadow(light,planeTransform,this);}  }
class C{  public final void clear(){  checkPoint=-1;  if (current_item > 0) {    for (int i=0; i < current_item; i++) {      items[i]=0d;    }  } else {    for (int i=0; i < max_size; i++) {      items[i]=0d;    }  }  current_item=0;}  }
class C{  public void testMoveRenameDirectorySourceParentRootDestinationMissing() throws Exception {  IgfsPath dir=new IgfsPath("/" + SUBSUBDIR_NEW.name());  create(igfsSecondary,paths(DIR_NEW,SUBDIR_NEW,dir),null);  create(igfs,null,null);  igfs.rename(dir,SUBSUBDIR_NEW);  checkExist(igfs,DIR_NEW,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,dir);}  }
class C{  public MaterialDrawable(IconValue icon,TextPaint paint,int size,int alpha){  this.icon=icon;  this.paint=paint;  this.setSizePx(size);  this.setAlpha(alpha);  invalidateSelf();}  }
class C{  public DefaultHttpRequest(HttpHeaders headers){  this(headers,true);}  }
class C{  void add(Object key){  table.put(key,key);}  }
class C{  private static String encodeSingleChar(String ch){  return (String)htmlEntityTable.get(ch);}  }
class C{  public ElemTemplateElement(){}  }
class C{  public String toString(){  @NonNls final StringBuilder builder=new StringBuilder();  builder.append("[Module: ").append(getContentRoots()).append(" | ");  for (  DetectedProjectRoot sourceRoot : getSourceRoots()) {    builder.append(sourceRoot.getDirectory().getName()).append(",");  }  builder.append("]");  return builder.toString();}  }
class C{  public SparseGrid2DPortrayal3D(double zScale){  super();  this.zScale=zScale;}  }
class C{  public Search filter(Condition... conditions){  filter=add(filter,conditions);  return this;}  }
class C{  public SshMeta(){  this.commandLine=null;  this.userName=null;  this.sshPort=22;  this.sshLoginType=null;  this.privKeyRelativePath=null;  this.password=null;  this.privKeyUsePassphrase=false;  this.passphrase=null;  this.runAsSuperUser=false;  this.sshConnectionTimeoutMillis=ParallecGlobalConfig.sshConnectionTimeoutMillisDefault;}  }
class C{  protected void parseCommand(final String... args){  if (args != null) {    for (    String arg : args) {      Command command=Command.valueOfName(arg);      if (command != null) {        setCommand(command);        break;      }    }  }}  }
class C{  public String prototype(cp_info constant_pool[]){  CONSTANT_Utf8_info cm, dm;  String s;  cm=(CONSTANT_Utf8_info)(constant_pool[name_index]);  dm=(CONSTANT_Utf8_info)(constant_pool[descriptor_index]);  s=ClassFile.access_string(access_flags," ");  if (s.compareTo("") != 0)   s=s + " ";  return s + ClassFile.parseDesc(dm.convert(),"") + " "+ cm.convert();}  }
class C{  public ValueTick(TickType tickType,double value,String label,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){  super(label,textAnchor,rotationAnchor,angle);  this.value=value;  this.tickType=tickType;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ANNOTABLE_EXPRESSION__ANNOTATION_LIST:    setAnnotationList((ExpressionAnnotationList)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  append(m_doc.createEntityReference(name));}  }
class C{  @org.junit.Test public void testTest(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("botname");  String response=waitForOutput(output);  if (!response.equals("My name is ALICE")) {    fail("Incorrect response: " + response);  }  text.input("uppercase foo Bar.");  response=waitForOutput(output);  if (!response.equals("UPPER CASE FOO BAR")) {    fail("Incorrect response: " + response);  }  text.input("lowercase FOO Bar");  response=waitForOutput(output);  if (!response.equals("lower case foo bar")) {    fail("Incorrect response: " + response);  }  text.input("formal foo bar");  response=waitForOutput(output);  if (!response.equals("Foo Bar")) {    fail("Incorrect response: " + response);  }  text.input("sentence foo barbar");  response=waitForOutput(output);  if (!response.equals("Foo barbar")) {    fail("Incorrect response: " + response);  }  text.input("gender he likes her, cause she digs him");  response=waitForOutput(output);  if (!response.equals("She likes his cause he digs her")) {    fail("Incorrect response: " + response);  }  text.input("person I am not you");  response=waitForOutput(output);  if (!response.equals("You are not I")) {    fail("Incorrect response: '" + response + "'");  }  text.input("person2 I am not him");  response=waitForOutput(output);  if (!response.equals("He am not me")) {    fail("Incorrect response: '" + response + "'");  }  text.input("test random 3");  response=waitForOutput(output);  if (!(response.equals("Random 1") || response.equals("Random 2") || response.equals("Random 3"))) {    fail("Incorrect response: '" + response + "'");  }  text.input("test random 3");  response=waitForOutput(output);  if (!(response.equals("Random 1") || response.equals("Random 2") || response.equals("Random 3"))) {    fail("Incorrect response: '" + response + "'");  }  text.input("quote");  response=waitForOutput(output);  if (!response.equals("\"I\" am \"very\" tired")) {    fail("Incorrect response: '" + response + "'");  }  text.input("size");  response=waitForOutput(output);  if (response.indexOf("Size is") == -1) {    fail("Incorrect response: '" + response + "'");  }  text.input("date");  response=waitForOutput(output);  if (response.indexOf("Date is") == -1) {    fail("Incorrect response: '" + response + "'");  }  text.input("version");  response=waitForOutput(output);  if (response.indexOf("Version is") == -1) {    fail("Incorrect response: '" + response + "'");  }  text.input("sr quote");  response=waitForOutput(output);  if (!response.equals("Sr is \"I\" am \"very\" tired")) {    fail("Incorrect response: '" + response + "'");  }  text.input("html some stuff");  response=waitForOutput(output);  if (!response.equals("This<br/>is <a href=\"http://www.botlibre.com\">very</a><p>long</p><p/>ok<p>some stuff</p>")) {    fail("Incorrect response: '" + response + "'");  }  text.input("test a b c");  response=waitForOutput(output);  if (!response.equals("Test set to a b c")) {    fail("Incorrect response: '" + response + "'");  }  text.input("test");  response=waitForOutput(output);  if (!response.equals("A b c")) {    fail("Incorrect response: '" + response + "'");  }  text.input("test 2");  response=waitForOutput(output);  text.input("condition");  response=waitForOutput(output);  if (!response.equals("Two")) {    fail("Incorrect response: '" + response + "'");  }  text.input("cond2");  response=waitForOutput(output);  if (!response.equals("Two")) {    fail("Incorrect response: '" + response + "'");  }  text.input("cond3");  response=waitForOutput(output);  if (!response.equals("two")) {    fail("Incorrect response: '" + response + "'");  }  text.input("test a 9 and 9");  response=waitForOutput(output);  text.input("condition");  response=waitForOutput(output);  if (!response.equals("Nine something")) {    fail("Incorrect response: '" + response + "'");  }  text.input("star test and a b and c d");  response=waitForOutput(output);  if (!response.equals("Test")) {    fail("Incorrect response: '" + response + "'");  }  text.input("first star test and a and b");  response=waitForOutput(output);  if (!response.equals("Test")) {    fail("Incorrect response: '" + response + "'");  }  text.input("3rd star test and a and b");  response=waitForOutput(output);  if (!response.equals("B")) {    fail("Incorrect response: '" + response + "'");  }  text.input("input abc");  response=waitForOutput(output);  if (!response.equals("input abc")) {    fail("Incorrect response: '" + response + "'");  }  text.input("star waka");  response=waitForOutput(output);  text.input("last input");  response=waitForOutput(output);  if (!response.equals("star waka")) {    fail("Incorrect response: '" + response + "'");  }  text.input("star waka");  response=waitForOutput(output);  text.input("before last input");  response=waitForOutput(output);  if (!response.equals("last input")) {    fail("Incorrect response: '" + response + "'");  }  text.input("that");  response=waitForOutput(output);  if (!response.equals("last input")) {    fail("Incorrect response: '" + response + "'");  }  text.input("star waka");  response=waitForOutput(output);  text.input("before that");  response=waitForOutput(output);  if (!response.equals("last input")) {    fail("Incorrect response: '" + response + "'");  }  text.input("1 2 3 4 5");  response=waitForOutput(output);  if (response.equals("2 2 3 4 5")) {    fail("Incorrect response: '" + response + "'");  }  text.input("count 5 numbers");  response=waitForOutput(output);  if (!response.equals("5 numbers numbers")) {    fail("Incorrect response: '" + response + "'");  }  text.input("1 2 3 4 5");  response=waitForOutput(output);  if (!response.equals("2 2 3 4 5")) {    fail("Incorrect response: '" + response + "'");  }  text.input("xxx yyy zzz");  response=waitForOutput(output);  if (!response.equals("number default")) {    fail("Incorrect response: '" + response + "'");  }  text.input("1 + 1");  response=waitForOutput(output);  if (!response.equals("2 + 2")) {    fail("Incorrect response: '" + response + "'");  }  text.input("3 + 3");  response=waitForOutput(output);  if (!response.equals("4 + 3")) {    fail("Incorrect response: '" + response + "'");  }  bot.shutdown();}  }
class C{  public static void displayLongToast(Context ctx,String message){  Toast.makeText(ctx,message,Toast.LENGTH_LONG).show();}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  static int roundUp(long n,long m){  return (int)(((n + m - 1) / m) * m);}  }
class C{  public void reconnectSource(){  if (isSource() && m_isTempDisconnected) {    if (m_connection == null) {      connectDatabase();    }    connectDBSchema();  }}  }
class C{  public Architecture(String fileName) throws FileNotFoundException, ANTLRException {  parseSSL(fileName);  magicInstructions=new MagicInstructions();  stackPointer=ExpressionFactory.createVariable("%esp",32);  framePointer=ExpressionFactory.createVariable("%ebp",32);  retAddrVar=ExpressionFactory.createVariable("retaddr",32);  loopCounter=ExpressionFactory.createVariable("%ecx",32);  stringSource=ExpressionFactory.createVariable("%esi",32);  stringTarget=ExpressionFactory.createVariable("%edi",32);}  }
class C{  public static void stopAllMutators(){  try {    Clock.stop();    model.stopAllMutators();  }  finally {    Clock.start();  }}  }
class C{  @RequestMapping(value="/account/reset_password/finish",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed public ResponseEntity<String> finishPasswordReset(@RequestBody KeyAndPasswordDTO keyAndPassword){  if (!checkPasswordLength(keyAndPassword.getNewPassword())) {    return new ResponseEntity<>("Incorrect password",HttpStatus.BAD_REQUEST);  }  return userService.completePasswordReset(keyAndPassword.getNewPassword(),keyAndPassword.getKey()).map(null).orElse(new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR));}  }
class C{  public CProjectViewsContainerComponent(final JTree projectTree,final INaviProject project,final IViewContainer container){  super(new BorderLayout());  Preconditions.checkNotNull(projectTree,"IE02053: Project tree argument can not be null");  Preconditions.checkNotNull(project,"IE02054: Project argument can not be null");  Preconditions.checkNotNull(container,"IE02055: Container argument can not be null");  m_project=project;  add(new CUserViewsComponent(projectTree,container));  updateBorderText();  m_project.addListener(m_viewContainerListener);  for (  final INaviView view : project.getContent().getViews()) {    view.addListener(m_viewListener);  }}  }
class C{  public static void updateToiletBackground(View view,Boolean reserved,Context context){  Drawable freeBg=ContextCompat.getDrawable(context,R.drawable.toilet_free_bg);  Drawable takenBg=ContextCompat.getDrawable(context,R.drawable.toilet_taken_bg);  view.setBackground(reserved ? takenBg : freeBg);}  }
class C{  void put(long objKey,Map<LocalizedObjectTypes,String> localizedText){  for (Iterator<Entry<LocalizedObjectTypes,String>> iterator=localizedText.entrySet().iterator(); iterator.hasNext(); ) {    Entry<LocalizedObjectTypes,String> localizedEntry=iterator.next();    String cacheKey=createInternalKey(objKey,localizedEntry.getKey());    storage.put(cacheKey,localizedEntry.getValue());  }}  }
class C{  static String writeConfiguration(Configuration cfg,String pathFromIgniteHome) throws IOException {  if (!pathFromIgniteHome.startsWith("/"))   pathFromIgniteHome="/" + pathFromIgniteHome;  final String path=U.getIgniteHome() + pathFromIgniteHome;  delete(path);  File file=new File(path);  try (FileOutputStream fos=new FileOutputStream(file)){    cfg.writeXml(fos);  }   assertTrue(file.exists());  return path;}  }
class C{  private static int GetStaticFieldID(JNIEnvironment env,int classJREF,Address fieldNameAddress,Address descriptorAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticFieldID  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);    String fieldString=JNIGenericHelpers.createStringFromC(fieldNameAddress);    Atom fieldName=Atom.findOrCreateAsciiAtom(fieldString);    String descriptorString=JNIGenericHelpers.createStringFromC(descriptorAddress);    Atom descriptor=Atom.findOrCreateAsciiAtom(descriptorString);    RVMType rvmType=java.lang.JikesRVMSupport.getTypeForClass(cls);    if (rvmType.isClassType()) {      for (RVMClass curClass=rvmType.asClass(); curClass != null; curClass=curClass.getSuperClass()) {        for (        RVMField field : curClass.getStaticFields()) {          if (field.getName() == fieldName && field.getDescriptor() == descriptor) {            return field.getId();          }        }      }      for (      RVMClass curClass : rvmType.asClass().getAllImplementedInterfaces()) {        for (        RVMField field : curClass.getStaticFields()) {          if (field.getName() == fieldName && field.getDescriptor() == descriptor) {            return field.getId();          }        }      }    }    env.recordException(new NoSuchFieldError(fieldString + ", " + descriptorString+ " of "+ cls));    return 0;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public RequestHandle post(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(null,url,params,responseHandler);}  }
class C{  public LangString trim(){  return new LangString(toString().trim(),getLang());}  }
class C{  public boolean isVertexMovable(Object vertex){  return graph.isCellMovable(vertex);}  }
class C{  public BrandImageNameStrategyImpl(final String relativeInternalRootDirectory,final GenericDAO<AttrValueBrand,Long> attrValueBrandDao,final LanguageService languageService){  super(Constants.BRAND_IMAGE_REPOSITORY_URL_PATTERN,relativeInternalRootDirectory,languageService);  this.attrValueBrandDao=attrValueBrandDao;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MOrderLine[").append(get_ID()).append(", Line=").append(getLine()).append(", Ordered=").append(getQtyOrdered()).append(", Delivered=").append(getQtyDelivered()).append(", Invoiced=").append(getQtyInvoiced()).append(", Reserved=").append(getQtyReserved()).append(", LineNet=").append(getLineNetAmt()).append("]");  return sb.toString();}  }
class C{  public MailMessage addAttachment(File attachment){  FileDataSource ds=new FileDataSource(attachment);  return addAttachment(ds);}  }
class C{  public ClosedConnectionException(String message){  super(message);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Seeker.getInstance().getCurrRecordFiles();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.384 -0500",hash_original_method="E4819D88C72BF817469C24E1569426A4",hash_generated_method="A135DD36A4708ECA00C9664FCC332131") public static void cursorStringToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getString(index));  }}  }
class C{  public static void add(Resource resource){  String ns=resource.getNameSpace();  String prefix=resource.getModel().getNsURIPrefix(ns);  if (prefix != null && prefix.length() > 0) {    add(prefix,ns);  }}  }
class C{  @SuppressWarnings("ConstantConditions") private Set<String> findResourceNamesFromFileSystem(String scanRootLocation,File folder) throws IOException {  LOG.debug("Scanning for resources in path: " + folder.getPath() + " ("+ scanRootLocation+ ")");  Set<String> resourceNames=new TreeSet<String>();  File[] files=folder.listFiles();  for (  File file : files) {    if (file.canRead()) {      if (file.isDirectory()) {        resourceNames.addAll(findResourceNamesFromFileSystem(scanRootLocation,file));      } else {        resourceNames.add(file.getPath());      }    }  }  return resourceNames;}  }
class C{  public void parse() throws BadBytecode {  int n=numOfEntries;  int pos=2;  for (int i=0; i < n; i++)   pos=stackMapFrames(pos,i);}  }
class C{  @Override public void paintComponent(final Graphics g){  final Dimension dim=getSize();  if (image != null) {    final int imageWidth=image.getWidth(this);    final int imageHeight=image.getHeight(this);    g.drawImage(image,(dim.width - imageWidth) / 2,(dim.height - imageHeight) / 2,imageWidth,imageHeight,this);  } else {    g.setColor(getBackground());    g.clearRect(0,0,dim.width,dim.height);  }}  }
class C{  public boolean isAfter(Instant otherInstant){  return compareTo(otherInstant) > 0;}  }
class C{  public void build(Document schemaDocument){  this.targetNamespace=null;  internalBuild(schemaDocument);}  }
class C{  @Override public Adapter adapt(Notifier notifier,Object type){  return super.adapt(notifier,this);}  }
class C{  public GridMetadataAwareAdapterLoadSelfTest(){  super(false);}  }
class C{  public boolean isIntStackEmpty(Interpreter interpreter){  return interpreter.intStack().size() == 0;}  }
class C{  protected AnnotationImpl(){  super();}  }
class C{  @Override public boolean evaluate(DF_LatticeCell[] operands){  ArrayCell lhs=(ArrayCell)operands[0];  if (lhs.isBOTTOM()) {    return false;  }  ArrayCell rhs=(ArrayCell)operands[1];  ValueNumberPair[] oldNumbers=null;  boolean lhsWasTOP=lhs.isTOP();  if (!lhsWasTOP)   oldNumbers=lhs.copyValueNumbers();  lhs.clear();  if (rhs.isTOP()) {    throw new OptimizingCompilerException("Unexpected lattice operation");  }  ValueNumberPair[] numbers=rhs.copyValueNumbers();  if (numbers != null) {    for (    ValueNumberPair number : numbers) {      if (valueNumbers.DD(number.v1,v.v1)) {        lhs.add(number.v1,number.v2);      } else       if (valueNumbers.DD(number.v2,v.v2)) {        lhs.add(number.v1,number.v2);      }    }  }  lhs.add(v.v1,v.v2);  if (lhsWasTOP) {    return true;  }  ValueNumberPair[] newNumbers=lhs.copyValueNumbers();  return ArrayCell.setsDiffer(oldNumbers,newNumbers);}  }
class C{  public static char[] toCharArray(Number[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(char)array[i].intValue();  }  return result;}  }
class C{  public void insert(EdgeEnd ee){  DirectedEdge de=(DirectedEdge)ee;  insertEdgeEnd(de,de);}  }
class C{  public boolean isReconciled(){  Object oo=get_Value(COLUMNNAME_IsReconciled);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public int compareTo(Object obj){  if (!(obj instanceof SimpleHistogramBin)) {    return 0;  }  SimpleHistogramBin bin=(SimpleHistogramBin)obj;  if (this.lowerBound < bin.lowerBound) {    return -1;  }  if (this.lowerBound > bin.lowerBound) {    return 1;  }  if (this.upperBound < bin.upperBound) {    return -1;  }  if (this.upperBound > bin.upperBound) {    return 1;  }  return 0;}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  boolean b1=(area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);  boolean b2=(area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);  if (b1 || b2) {    return;  }  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  insets.trim(area);  AxisSpace space=calculateAxisSpace(g2,area);  Rectangle2D dataArea=space.shrink(area,null);  this.axisOffset.trim(dataArea);  dataArea=integerise(dataArea);  if (dataArea.isEmpty()) {    return;  }  createAndAddEntity((Rectangle2D)dataArea.clone(),info,null,null);  if (info != null) {    info.setDataArea(dataArea);  }  drawBackground(g2,dataArea);  Map axisStateMap=drawAxes(g2,area,dataArea,info);  PlotOrientation orient=getOrientation();  if (anchor != null && !dataArea.contains(anchor)) {    anchor=null;  }  CrosshairState crosshairState=new CrosshairState();  crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);  crosshairState.setAnchor(anchor);  crosshairState.setAnchorX(Double.NaN);  crosshairState.setAnchorY(Double.NaN);  if (anchor != null) {    ValueAxis domainAxis=getDomainAxis();    if (domainAxis != null) {      double x;      if (orient == PlotOrientation.VERTICAL) {        x=domainAxis.java2DToValue(anchor.getX(),dataArea,getDomainAxisEdge());      } else {        x=domainAxis.java2DToValue(anchor.getY(),dataArea,getDomainAxisEdge());      }      crosshairState.setAnchorX(x);    }    ValueAxis rangeAxis=getRangeAxis();    if (rangeAxis != null) {      double y;      if (orient == PlotOrientation.VERTICAL) {        y=rangeAxis.java2DToValue(anchor.getY(),dataArea,getRangeAxisEdge());      } else {        y=rangeAxis.java2DToValue(anchor.getX(),dataArea,getRangeAxisEdge());      }      crosshairState.setAnchorY(y);    }  }  crosshairState.setCrosshairX(getDomainCrosshairValue());  crosshairState.setCrosshairY(getRangeCrosshairValue());  Shape originalClip=g2.getClip();  Composite originalComposite=g2.getComposite();  g2.clip(dataArea);  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));  AxisState domainAxisState=(AxisState)axisStateMap.get(getDomainAxis());  if (domainAxisState == null) {    if (parentState != null) {      domainAxisState=(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());    }  }  AxisState rangeAxisState=(AxisState)axisStateMap.get(getRangeAxis());  if (rangeAxisState == null) {    if (parentState != null) {      rangeAxisState=(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());    }  }  if (domainAxisState != null) {    drawDomainTickBands(g2,dataArea,domainAxisState.getTicks());  }  if (rangeAxisState != null) {    drawRangeTickBands(g2,dataArea,rangeAxisState.getTicks());  }  if (domainAxisState != null) {    drawDomainGridlines(g2,dataArea,domainAxisState.getTicks());    drawZeroDomainBaseline(g2,dataArea);  }  if (rangeAxisState != null) {    drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());    drawZeroRangeBaseline(g2,dataArea);  }  Graphics2D savedG2=g2;  BufferedImage dataImage=null;  boolean suppressShadow=Boolean.TRUE.equals(g2.getRenderingHint(JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));  if (this.shadowGenerator != null && !suppressShadow) {    dataImage=new BufferedImage((int)dataArea.getWidth(),(int)dataArea.getHeight(),BufferedImage.TYPE_INT_ARGB);    g2=dataImage.createGraphics();    g2.translate(-dataArea.getX(),-dataArea.getY());    g2.setRenderingHints(savedG2.getRenderingHints());  }  for (  XYDataset dataset : this.datasets.values()) {    int datasetIndex=indexOf(dataset);    drawDomainMarkers(g2,dataArea,datasetIndex,Layer.BACKGROUND);  }  for (  XYDataset dataset : this.datasets.values()) {    int datasetIndex=indexOf(dataset);    drawRangeMarkers(g2,dataArea,datasetIndex,Layer.BACKGROUND);  }  boolean foundData=false;  DatasetRenderingOrder order=getDatasetRenderingOrder();  List<Integer> rendererIndices=getRendererIndices(order);  List<Integer> datasetIndices=getDatasetIndices(order);  for (  int i : rendererIndices) {    XYItemRenderer renderer=getRenderer(i);    if (renderer != null) {      ValueAxis domainAxis=getDomainAxisForDataset(i);      ValueAxis rangeAxis=getRangeAxisForDataset(i);      renderer.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,info);    }  }  for (  int datasetIndex : datasetIndices) {    XYDataset dataset=this.getDataset(datasetIndex);    foundData=render(g2,dataArea,datasetIndex,info,crosshairState) || foundData;  }  for (  int i : rendererIndices) {    XYItemRenderer renderer=getRenderer(i);    if (renderer != null) {      ValueAxis domainAxis=getDomainAxisForDataset(i);      ValueAxis rangeAxis=getRangeAxisForDataset(i);      renderer.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,info);    }  }  int datasetIndex=crosshairState.getDatasetIndex();  ValueAxis xAxis=this.getDomainAxisForDataset(datasetIndex);  RectangleEdge xAxisEdge=getDomainAxisEdge(getDomainAxisIndex(xAxis));  if (!this.domainCrosshairLockedOnData && anchor != null) {    double xx;    if (orient == PlotOrientation.VERTICAL) {      xx=xAxis.java2DToValue(anchor.getX(),dataArea,xAxisEdge);    } else {      xx=xAxis.java2DToValue(anchor.getY(),dataArea,xAxisEdge);    }    crosshairState.setCrosshairX(xx);  }  setDomainCrosshairValue(crosshairState.getCrosshairX(),false);  if (isDomainCrosshairVisible()) {    double x=getDomainCrosshairValue();    Paint paint=getDomainCrosshairPaint();    Stroke stroke=getDomainCrosshairStroke();    drawDomainCrosshair(g2,dataArea,orient,x,xAxis,stroke,paint);  }  ValueAxis yAxis=getRangeAxisForDataset(datasetIndex);  RectangleEdge yAxisEdge=getRangeAxisEdge(getRangeAxisIndex(yAxis));  if (!this.rangeCrosshairLockedOnData && anchor != null) {    double yy;    if (orient == PlotOrientation.VERTICAL) {      yy=yAxis.java2DToValue(anchor.getY(),dataArea,yAxisEdge);    } else {      yy=yAxis.java2DToValue(anchor.getX(),dataArea,yAxisEdge);    }    crosshairState.setCrosshairY(yy);  }  setRangeCrosshairValue(crosshairState.getCrosshairY(),false);  if (isRangeCrosshairVisible()) {    double y=getRangeCrosshairValue();    Paint paint=getRangeCrosshairPaint();    Stroke stroke=getRangeCrosshairStroke();    drawRangeCrosshair(g2,dataArea,orient,y,yAxis,stroke,paint);  }  if (!foundData) {    drawNoDataMessage(g2,dataArea);  }  for (  int i : rendererIndices) {    drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);  }  for (  int i : rendererIndices) {    drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);  }  drawAnnotations(g2,dataArea,info);  if (this.shadowGenerator != null && !suppressShadow) {    BufferedImage shadowImage=this.shadowGenerator.createDropShadow(dataImage);    g2=savedG2;    g2.drawImage(shadowImage,(int)dataArea.getX() + this.shadowGenerator.calculateOffsetX(),(int)dataArea.getY() + this.shadowGenerator.calculateOffsetY(),null);    g2.drawImage(dataImage,(int)dataArea.getX(),(int)dataArea.getY(),null);  }  g2.setClip(originalClip);  g2.setComposite(originalComposite);  drawOutline(g2,dataArea);}  }
class C{  public void addWebsite(Website website){  getWebsites().add(website);}  }
class C{  protected void parseViewAttributes() throws ParseException, IOException {  boolean first=true;  loop:   for (; ; ) {switch (current) {case -1:case ')':      if (first) {        reportUnexpectedCharacterError(current);        break loop;      }default :    break loop;case ';':  if (first) {    reportUnexpectedCharacterError(current);    break loop;  }current=reader.read();break;case 'v':first=false;current=reader.read();if (current != 'i') {reportCharacterExpectedError('i',current);break loop;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);break loop;}current=reader.read();if (current != 'w') {reportCharacterExpectedError('w',current);break loop;}current=reader.read();switch (current) {case 'B':current=reader.read();if (current != 'o') {reportCharacterExpectedError('o',current);break loop;}current=reader.read();if (current != 'x') {reportCharacterExpectedError('x',current);break loop;}current=reader.read();if (current != '(') {reportCharacterExpectedError('(',current);break loop;}current=reader.read();float x=parseFloat();if (current != ',') {reportCharacterExpectedError(',',current);break loop;}current=reader.read();float y=parseFloat();if (current != ',') {reportCharacterExpectedError(',',current);break loop;}current=reader.read();float w=parseFloat();if (current != ',') {reportCharacterExpectedError(',',current);break loop;}current=reader.read();float h=parseFloat();if (current != ')') {reportCharacterExpectedError(')',current);break loop;}current=reader.read();fragmentIdentifierHandler.viewBox(x,y,w,h);if (current != ')' && current != ';') {reportCharacterExpectedError(')',current);break loop;}break;case 'T':current=reader.read();if (current != 'a') {reportCharacterExpectedError('a',current);break loop;}current=reader.read();if (current != 'r') {reportCharacterExpectedError('r',current);break loop;}current=reader.read();if (current != 'g') {reportCharacterExpectedError('g',current);break loop;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);break loop;}current=reader.read();if (current != 't') {reportCharacterExpectedError('t',current);break loop;}current=reader.read();if (current != '(') {reportCharacterExpectedError('(',current);break loop;}current=reader.read();fragmentIdentifierHandler.startViewTarget();id: for (; ; ) {bufferSize=0;if (current == -1 || !XMLUtilities.isXMLNameFirstCharacter((char)current)) {reportUnexpectedCharacterError(current);break loop;}bufferize();current=reader.read();parseIdentifier();String s=getBufferContent();fragmentIdentifierHandler.viewTarget(s);bufferSize=0;switch (current) {case ')':current=reader.read();break id;case ',':case ';':current=reader.read();break;default :reportUnexpectedCharacterError(current);break loop;}}fragmentIdentifierHandler.endViewTarget();break;default :reportUnexpectedCharacterError(current);break loop;}break;case 'p':first=false;current=reader.read();if (current != 'r') {reportCharacterExpectedError('r',current);break loop;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);break loop;}current=reader.read();if (current != 's') {reportCharacterExpectedError('s',current);break loop;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);break loop;}current=reader.read();if (current != 'r') {reportCharacterExpectedError('r',current);break loop;}current=reader.read();if (current != 'v') {reportCharacterExpectedError('v',current);break loop;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);break loop;}current=reader.read();if (current != 'A') {reportCharacterExpectedError('A',current);break loop;}current=reader.read();if (current != 's') {reportCharacterExpectedError('s',current);break loop;}current=reader.read();if (current != 'p') {reportCharacterExpectedError('p',current);break loop;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);break loop;}current=reader.read();if (current != 'c') {reportCharacterExpectedError('c',current);break loop;}current=reader.read();if (current != 't') {reportCharacterExpectedError('t',current);break loop;}current=reader.read();if (current != 'R') {reportCharacterExpectedError('R',current);break loop;}current=reader.read();if (current != 'a') {reportCharacterExpectedError('a',current);break loop;}current=reader.read();if (current != 't') {reportCharacterExpectedError('t',current);break loop;}current=reader.read();if (current != 'i') {reportCharacterExpectedError('i',current);break loop;}current=reader.read();if (current != 'o') {reportCharacterExpectedError('o',current);break loop;}current=reader.read();if (current != '(') {reportCharacterExpectedError('(',current);break loop;}current=reader.read();parsePreserveAspectRatio();if (current != ')') {reportCharacterExpectedError(')',current);break loop;}current=reader.read();break;case 't':first=false;current=reader.read();if (current != 'r') {reportCharacterExpectedError('r',current);break loop;}current=reader.read();if (current != 'a') {reportCharacterExpectedError('a',current);break loop;}current=reader.read();if (current != 'n') {reportCharacterExpectedError('n',current);break loop;}current=reader.read();if (current != 's') {reportCharacterExpectedError('s',current);break loop;}current=reader.read();if (current != 'f') {reportCharacterExpectedError('f',current);break loop;}current=reader.read();if (current != 'o') {reportCharacterExpectedError('o',current);break loop;}current=reader.read();if (current != 'r') {reportCharacterExpectedError('r',current);break loop;}current=reader.read();if (current != 'm') {reportCharacterExpectedError('m',current);break loop;}current=reader.read();if (current != '(') {reportCharacterExpectedError('(',current);break loop;}fragmentIdentifierHandler.startTransformList();tloop: for (; ; ) {try {current=reader.read();switch (current) {case ',':break;case 'm':parseMatrix();break;case 'r':parseRotate();break;case 't':parseTranslate();break;case 's':current=reader.read();switch (current) {case 'c':parseScale();break;case 'k':parseSkew();break;default :reportUnexpectedCharacterError(current);skipTransform();}break;default :break tloop;}} catch (ParseException e) {errorHandler.error(e);skipTransform();}}fragmentIdentifierHandler.endTransformList();break;case 'z':first=false;current=reader.read();if (current != 'o') {reportCharacterExpectedError('o',current);break loop;}current=reader.read();if (current != 'o') {reportCharacterExpectedError('o',current);break loop;}current=reader.read();if (current != 'm') {reportCharacterExpectedError('m',current);break loop;}current=reader.read();if (current != 'A') {reportCharacterExpectedError('A',current);break loop;}current=reader.read();if (current != 'n') {reportCharacterExpectedError('n',current);break loop;}current=reader.read();if (current != 'd') {reportCharacterExpectedError('d',current);break loop;}current=reader.read();if (current != 'P') {reportCharacterExpectedError('P',current);break loop;}current=reader.read();if (current != 'a') {reportCharacterExpectedError('a',current);break loop;}current=reader.read();if (current != 'n') {reportCharacterExpectedError('n',current);break loop;}current=reader.read();if (current != '(') {reportCharacterExpectedError('(',current);break loop;}current=reader.read();switch (current) {case 'm':current=reader.read();if (current != 'a') {reportCharacterExpectedError('a',current);break loop;}current=reader.read();if (current != 'g') {reportCharacterExpectedError('g',current);break loop;}current=reader.read();if (current != 'n') {reportCharacterExpectedError('n',current);break loop;}current=reader.read();if (current != 'i') {reportCharacterExpectedError('i',current);break loop;}current=reader.read();if (current != 'f') {reportCharacterExpectedError('f',current);break loop;}current=reader.read();if (current != 'y') {reportCharacterExpectedError('y',current);break loop;}current=reader.read();fragmentIdentifierHandler.zoomAndPan(true);break;case 'd':current=reader.read();if (current != 'i') {reportCharacterExpectedError('i',current);break loop;}current=reader.read();if (current != 's') {reportCharacterExpectedError('s',current);break loop;}current=reader.read();if (current != 'a') {reportCharacterExpectedError('a',current);break loop;}current=reader.read();if (current != 'b') {reportCharacterExpectedError('b',current);break loop;}current=reader.read();if (current != 'l') {reportCharacterExpectedError('l',current);break loop;}current=reader.read();if (current != 'e') {reportCharacterExpectedError('e',current);break loop;}current=reader.read();fragmentIdentifierHandler.zoomAndPan(false);break;default :reportUnexpectedCharacterError(current);break loop;}if (current != ')') {reportCharacterExpectedError(')',current);break loop;}current=reader.read();}}}  }
class C{  public static String saveCartToAutoSaveList(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCart cart=ShoppingCartEvents.getCartObject(request);  try {    fillAutoSaveList(cart,dispatcher);  } catch (  GeneralException e) {    Debug.logError(e,"Error saving the cart to the auto-save list: " + e.toString(),module);  }  return "success";}  }
class C{  public SmbFile[] listFiles() throws SmbException {  return listFiles("*",ATTR_DIRECTORY | ATTR_HIDDEN | ATTR_SYSTEM,null,null);}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoleListForm roleListForm=(RoleListForm)form;  UserContext user=null;  try {    user=(UserContext)SecurityContextHolder.getContext().getAuthentication().getPrincipal();  } catch (  Exception e) {  }  if (user == null)   return mapping.findForward("loginRequired");  if (user.getAuthorities().isEmpty())   return mapping.findForward("norole");  if (roleListForm.getAuthority() != null) {    UserAuthority authority=user.getAuthority(roleListForm.getAuthority());    if (authority != null) {      user.setCurrentAuthority(authority);      for (      SessionAttribute s : SessionAttribute.values())       sessionContext.removeAttribute(s);    }    if (roleListForm.getTarget() != null && !roleListForm.getTarget().isEmpty()) {      response.sendRedirect(roleListForm.getTarget());      return null;    } else {      return mapping.findForward("success");    }  }  UserAuthority authority=setupAuthorities(request,user);  if (!"Y".equals(request.getParameter("list")) && authority != null) {    user.setCurrentAuthority(authority);    if (roleListForm.getTarget() != null && !roleListForm.getTarget().isEmpty()) {      response.sendRedirect(roleListForm.getTarget());      return null;    } else {      return mapping.findForward("success");    }  }  Set<String> roles=new HashSet<String>();  for (  UserAuthority a : user.getAuthorities())   roles.add(a.getRole());switch (roles.size()) {case 0:    return mapping.findForward("norole");case 1:  return mapping.findForward("getDefaultAcadSession");default :return mapping.findForward("getUserSelectedRole");}}  }
class C{  public LocalityTrackingGetJobsBuilder withLocalityTracking(){  return new LocalityTrackingGetJobsBuilder();}  }
class C{  public ComponentKey(Context context,String componentKeyStr){  int userDelimiterIndex=componentKeyStr.indexOf("#");  if (userDelimiterIndex != -1) {    String componentStr=componentKeyStr.substring(0,userDelimiterIndex);    Long componentUser=Long.valueOf(componentKeyStr.substring(userDelimiterIndex + 1));    componentName=ComponentName.unflattenFromString(componentStr);    user=UserManagerCompat.getInstance(context).getUserForSerialNumber(componentUser.longValue());  } else {    componentName=ComponentName.unflattenFromString(componentKeyStr);    user=UserHandleCompat.myUserHandle();  }  mHashCode=Arrays.hashCode(new Object[]{componentName,user});}  }
class C{  private void updateEdges(int newVertexId,int positionAdded){  IntArrayList vertices=getVertices();  int addedEdges=0;  for (int i=0; i < positionAdded; ++i) {    int existingVertexId=vertices.getUnchecked(i);    updateEdgesConsumer.reset();    mainGraph.forEachEdgeId(existingVertexId,newVertexId,updateEdgesConsumer);    addedEdges+=updateEdgesConsumer.getNumAdded();  }  numEdgesAddedWithWord.add(addedEdges);}  }
class C{  public void removeListener(final ITagTreeManagerListener listener){  m_listeners.removeListener(listener);}  }
class C{  protected Size2D arrangeRR(Graphics2D g2,Range widthRange,Range heightRange){  RectangleEdge position=getPosition();  if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {    float maxWidth=(float)widthRange.getUpperBound();    AxisSpace space=this.axis.reserveSpace(g2,null,new Rectangle2D.Double(0,0,maxWidth,100),RectangleEdge.BOTTOM,null);    return new Size2D(maxWidth,this.stripWidth + this.axisOffset + space.getTop()+ space.getBottom());  } else   if (position == RectangleEdge.LEFT || position == RectangleEdge.RIGHT) {    float maxHeight=(float)heightRange.getUpperBound();    AxisSpace space=this.axis.reserveSpace(g2,null,new Rectangle2D.Double(0,0,100,maxHeight),RectangleEdge.RIGHT,null);    return new Size2D(this.stripWidth + this.axisOffset + space.getLeft()+ space.getRight(),maxHeight);  } else {    throw new RuntimeException("Unrecognised position.");  }}  }
class C{  @Override protected void onSizeChanged(int width,int height,int oldWidth,int oldHeight){  super.onSizeChanged(width,height,oldWidth,oldHeight);  setVerticalDragRange(height);}  }
class C{  public static String readAll(){  if (!scanner.hasNextLine())   return "";  String result=scanner.useDelimiter(EVERYTHING_PATTERN).next();  scanner.useDelimiter(WHITESPACE_PATTERN);  return result;}  }
class C{  public T dataSource(String value){  setString(DATA_SOURCE,value);  return (T)this;}  }
class C{  public Attr maybeCreateAttributeNs(String nsUri,String attrName,AttrStub as){  try {    return doc.createAttributeNS(nsUri,attrName);  } catch (  DOMException e) {    mq.addMessage(DomParserMessageType.IGNORING_TOKEN,as.nameTok.pos,MessagePart.Factory.valueOf("'" + as.nameTok.text + "'"));    logger.log(Level.FINE,"Ignoring DOMException in maybeCreateAttributeNs",e);    return null;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRANSITION___GUARD_1:    getGuard_1().clear();  return;case UmplePackage.TRANSITION___EVENT_DEFINITION_1:getEventDefinition_1().clear();return;case UmplePackage.TRANSITION___ACTION_1:getAction_1().clear();return;case UmplePackage.TRANSITION___STATE_NAME_1:setStateName_1(STATE_NAME_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void recruitPlayers(int qbNeeds,int rbNeeds,int wrNeeds,int kNeeds,int olNeeds,int sNeeds,int cbNeeds,int f7Needs){  int stars=teamPrestige / 20 + 1;  int chance=20 - (teamPrestige - 20 * (teamPrestige / 20));  for (int i=0; i < qbNeeds; ++i) {    if (100 * Math.random() < 5 * chance) {      teamQBs.add(new PlayerQB(league.getRandName(),(int)(4 * Math.random() + 1),stars - 1,this));    } else {      teamQBs.add(new PlayerQB(league.getRandName(),(int)(4 * Math.random() + 1),stars,this));    }  }  for (int i=0; i < kNeeds; ++i) {    if (100 * Math.random() < 5 * chance) {      teamKs.add(new PlayerK(league.getRandName(),(int)(4 * Math.random() + 1),stars - 1,this));    } else {      teamKs.add(new PlayerK(league.getRandName(),(int)(4 * Math.random() + 1),stars,this));    }  }  for (int i=0; i < rbNeeds; ++i) {    if (100 * Math.random() < 5 * chance) {      teamRBs.add(new PlayerRB(league.getRandName(),(int)(4 * Math.random() + 1),stars - 1,this));    } else {      teamRBs.add(new PlayerRB(league.getRandName(),(int)(4 * Math.random() + 1),stars,this));    }  }  for (int i=0; i < wrNeeds; ++i) {    if (100 * Math.random() < 5 * chance) {      teamWRs.add(new PlayerWR(league.getRandName(),(int)(4 * Math.random() + 1),stars - 1,this));    } else {      teamWRs.add(new PlayerWR(league.getRandName(),(int)(4 * Math.random() + 1),stars,this));    }  }  for (int i=0; i < olNeeds; ++i) {    if (100 * Math.random() < 5 * chance) {      teamOLs.add(new PlayerOL(league.getRandName(),(int)(4 * Math.random() + 1),stars - 1,this));    } else {      teamOLs.add(new PlayerOL(league.getRandName(),(int)(4 * Math.random() + 1),stars,this));    }  }  for (int i=0; i < cbNeeds; ++i) {    if (100 * Math.random() < 5 * chance) {      teamCBs.add(new PlayerCB(league.getRandName(),(int)(4 * Math.random() + 1),stars - 1,this));    } else {      teamCBs.add(new PlayerCB(league.getRandName(),(int)(4 * Math.random() + 1),stars,this));    }  }  for (int i=0; i < f7Needs; ++i) {    if (100 * Math.random() < 5 * chance) {      teamF7s.add(new PlayerF7(league.getRandName(),(int)(4 * Math.random() + 1),stars - 1,this));    } else {      teamF7s.add(new PlayerF7(league.getRandName(),(int)(4 * Math.random() + 1),stars,this));    }  }  for (int i=0; i < sNeeds; ++i) {    if (100 * Math.random() < 5 * chance) {      teamSs.add(new PlayerS(league.getRandName(),(int)(4 * Math.random() + 1),stars - 1,this));    } else {      teamSs.add(new PlayerS(league.getRandName(),(int)(4 * Math.random() + 1),stars,this));    }  }  sortPlayers();}  }
class C{  public void componentRemoved(final ContainerEvent e){  if (e.getContainer() instanceof JRootPane) {    final JRootPane root=(JRootPane)e.getContainer();    if (e.getChild() == root.getLayeredPane()) {      final JLayeredPane layered=root.getLayeredPane();      layered.removeContainerListener(this);    }  } else {    if (e.getChild() instanceof JMenuBar) {      final JMenuBar jmb=(JMenuBar)e.getChild();      final MenuBarUI mbui=jmb.getUI();      if (mbui instanceof AquaMenuBarUI) {        final Window owningWindow=SwingUtilities.getWindowAncestor(jmb);        if (owningWindow != null && owningWindow instanceof JFrame) {          ((AquaMenuBarUI)mbui).clearScreenMenuBar((JFrame)owningWindow);        }      }    }  }}  }
class C{  public Matrix4d translationRotateScaleInvert(Vector3fc translation,Quaternionfc quat,double scale){  return translationRotateScaleInvert(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale,scale,scale);}  }
class C{  public SoundEntry(final Sound sound,final float volume,final float pitch){  this.sound=sound;  this.volume=volume;  this.pitch=pitch;}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  public static double[] insert(double[] x,int I,double... y){  double[] array=new double[x.length + y.length];  System.arraycopy(x,0,array,0,I);  System.arraycopy(y,0,array,I,y.length);  System.arraycopy(x,I,array,I + y.length,x.length - I);  return array;}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  public void saveItem(final ScoreKeeperUserDataItem tableItem){  DynamoDBMapper mapper=createDynamoDBMapper();  mapper.save(tableItem);}  }
class C{  protected void validatePatch(State start,State patch){  ValidationUtils.validatePatch(start,patch);}  }
class C{  public BermudanExercise(final Date[] dates){  this(dates,false);}  }
class C{  protected void startNode(int node) throws org.xml.sax.SAXException {  XPathContext xcntxt=m_transformer.getXPathContext();  try {    if (DTM.ELEMENT_NODE == m_dtm.getNodeType(node)) {      xcntxt.pushCurrentNode(node);      if (m_startNode != node) {        super.startNode(node);      } else {        String elemName=m_dtm.getNodeName(node);        String localName=m_dtm.getLocalName(node);        String namespace=m_dtm.getNamespaceURI(node);        m_handler.startElement(namespace,localName,elemName);        boolean hasNSDecls=false;        DTM dtm=m_dtm;        for (int ns=dtm.getFirstNamespaceNode(node,true); DTM.NULL != ns; ns=dtm.getNextNamespaceNode(node,ns,true)) {          SerializerUtils.ensureNamespaceDeclDeclared(m_handler,dtm,ns);        }        for (int attr=dtm.getFirstAttribute(node); DTM.NULL != attr; attr=dtm.getNextAttribute(attr)) {          SerializerUtils.addAttribute(m_handler,attr);        }      }    } else {      xcntxt.pushCurrentNode(node);      super.startNode(node);      xcntxt.popCurrentNode();    }  } catch (  javax.xml.transform.TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public SpyTimer(String name){  super(name);  Spy.add(this);}  }
class C{  public static <T>int clearTable(ConnectionSource connectionSource,Class<T> dataClass) throws SQLException {  String tableName=DatabaseTableConfig.extractTableName(dataClass);  if (connectionSource.getDatabaseType().isEntityNamesMustBeUpCase()) {    tableName=tableName.toUpperCase();  }  return clearTable(connectionSource,tableName);}  }
class C{  public boolean hardwareBack(){  return hadwareBackButton;}  }
class C{  public final double SFMeanPriorEntropy(){  return m_delegate.SFMeanPriorEntropy();}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public static void executeDDL(final Connection connection,final String sql,final int... ignoreErrors) throws SQLException {  if (ignoreErrors != null) {    Arrays.sort(ignoreErrors);  }  try (Statement stmt=connection.createStatement()){    stmt.execute(sql);  } catch (  SQLException ex) {    if (ignoreErrors == null || ignoreErrors.length == 0)     throw ex;    for (    Throwable current : ex) {      if (current instanceof SQLException && Arrays.binarySearch(ignoreErrors,((SQLException)current).getErrorCode()) >= 0) {        return;      }    }    throw ex;  }}  }
class C{  public void addFileFilter(FileFilter toSet){  JFileChooser embeddedEditor=(JFileChooser)m_fileEditor.getCustomEditor();  embeddedEditor.addChoosableFileFilter(toSet);}  }
class C{  @SuppressLint("ShowToast") public Toast build(){  Toast toast=Toast.makeText(context,message,duration);  TextView toastMessage=setupToastView(toast);  setToastMessageTextColor(toastMessage);  setToastGravity(toast);  return toast;}  }
class C{  public void testFailureWithSuccessAndFailureRatios(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(3,5).withSuccessThreshold(3,4);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  state.recordSuccess();  state.recordFailure();  state.recordSuccess();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordFailure();  assertTrue(breaker.isOpen());}  }
class C{  public boolean isBefore(ReadableInstant instant){  if (instant == null) {    return isBeforeNow();  }  return isBefore(instant.getMillis());}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SexecPackage.EXECUTION_FLOW__SOURCE_ELEMENT:    setSourceElement((EObject)newValue);  return;case SexecPackage.EXECUTION_FLOW__NAME:setName((String)newValue);return;case SexecPackage.EXECUTION_FLOW__STATE_VECTOR:setStateVector((StateVector)newValue);return;case SexecPackage.EXECUTION_FLOW__SUB_SCOPES:getSubScopes().clear();getSubScopes().addAll((Collection<? extends ExecutionScope>)newValue);return;case SexecPackage.EXECUTION_FLOW__SUPER_SCOPE:setSuperScope((ExecutionScope)newValue);return;case SexecPackage.EXECUTION_FLOW__ENTER_SEQUENCES:getEnterSequences().clear();getEnterSequences().addAll((Collection<? extends Sequence>)newValue);return;case SexecPackage.EXECUTION_FLOW__EXIT_SEQUENCE:setExitSequence((Sequence)newValue);return;case SexecPackage.EXECUTION_FLOW__INIT_SEQUENCE:setInitSequence((Sequence)newValue);return;case SexecPackage.EXECUTION_FLOW__REACTIONS:getReactions().clear();getReactions().addAll((Collection<? extends Reaction>)newValue);return;case SexecPackage.EXECUTION_FLOW__SIMPLE_NAME:setSimpleName((String)newValue);return;case SexecPackage.EXECUTION_FLOW__REACT_SEQUENCE:setReactSequence((Sequence)newValue);return;case SexecPackage.EXECUTION_FLOW__STATES:getStates().clear();getStates().addAll((Collection<? extends ExecutionState>)newValue);return;case SexecPackage.EXECUTION_FLOW__NODES:getNodes().clear();getNodes().addAll((Collection<? extends ExecutionNode>)newValue);return;case SexecPackage.EXECUTION_FLOW__REGIONS:getRegions().clear();getRegions().addAll((Collection<? extends ExecutionRegion>)newValue);return;case SexecPackage.EXECUTION_FLOW__HISTORY_VECTOR:setHistoryVector((StateVector)newValue);return;case SexecPackage.EXECUTION_FLOW__ENTRY_ACTION:setEntryAction((Step)newValue);return;case SexecPackage.EXECUTION_FLOW__EXIT_ACTION:setExitAction((Step)newValue);return;case SexecPackage.EXECUTION_FLOW__STATIC_INIT_SEQUENCE:setStaticInitSequence((Sequence)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected double estimateRemainingTravelCost(final PreProcessLandmarks.LandmarksData fromRole,final PreProcessLandmarks.LandmarksData toRole,final int index){  double tmpTravTime;  final double fromMinLandmarkTravelTime=fromRole.getMinLandmarkTravelTime(index);  final double toMaxLandmarkTravelTime=toRole.getMaxLandmarkTravelTime(index);  tmpTravTime=fromMinLandmarkTravelTime - toMaxLandmarkTravelTime;  if (tmpTravTime < 0) {    tmpTravTime=toRole.getMinLandmarkTravelTime(index) - fromRole.getMaxLandmarkTravelTime(index);    if (tmpTravTime <= 0) {      return 0;    }  }  return tmpTravTime * this.overdoFactor;}  }
class C{  private void verifyIsGaOrIsSpecialCase(TldState tldState,boolean isAnchorTenant) throws NoGeneralRegistrationsInCurrentPhaseException {  if (!isAnchorTenant && tldState != TldState.GENERAL_AVAILABILITY) {    throw new NoGeneralRegistrationsInCurrentPhaseException();  }}  }
class C{  @CanIgnoreReturnValue @Override public Builder<K,V> put(K key,V value){  builderMultimap.put(checkNotNull(key),checkNotNull(value));  return this;}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode03.class,args);}  }
class C{  public static String extractRequestDomainURL(final HttpServletRequest httpRequest,final boolean withContext){  final StringBuffer url=httpRequest.getRequestURL();  final String uri=httpRequest.getRequestURI();  return withContext ? url.substring(0,url.length() - uri.length() + httpRequest.getContextPath().length()) + "/" : url.substring(0,url.length() - uri.length());}  }
class C{  private static TriangulationPoint nextFlipPoint(TriangulationPoint ep,TriangulationPoint eq,DelaunayTriangle ot,TriangulationPoint op){  Orientation o2d=orient2d(eq,op,ep);  if (o2d == Orientation.CW) {    return ot.pointCCW(op);  } else   if (o2d == Orientation.CCW) {    return ot.pointCW(op);  } else {    throw new PointOnEdgeException("Point on constrained edge not supported yet");  }}  }
class C{  public double parseCurrency(String amount){  StringBuilder b=new StringBuilder();  int l=amount.length();  for (int iter=0; iter < l; iter++) {    char c=amount.charAt(iter);    if (Character.isDigit(c) || c == '.' || c == ',' || c == '-') {      b.append(c);    }  }  return parseDouble(b.toString());}  }
class C{  public synchronized boolean seek(String name) throws ReplicatorException, IOException, InterruptedException {  assertNotDone();  clearReadState();  LogFile logFile=diskLog.getLogFile(name);  if (logFile == null)   return false; else {    logFile.openRead();    cursor=new LogCursor(logFile,logFile.getBaseSeqno());    cursor.setRotateNext(false);    if (logger.isDebugEnabled()) {      logger.debug("Using log file for read: " + logFile.getFile().getName());    }    pendingSeqno=logFile.getBaseSeqno();    return true;  }}  }
class C{  public void sendAcelaMessage(AcelaMessage m,AcelaListener reply){  sendMessage(m,reply);}  }
class C{  public Pointer_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_target=jcas.getRequiredFeatureDE(casType,"target","uk.gov.dstl.baleen.types.BaleenAnnotation",featOkTst);  casFeatCode_target=(null == casFeat_target) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_target).getCode();  casFeat_targetId=jcas.getRequiredFeatureDE(casType,"targetId","uima.cas.Long",featOkTst);  casFeatCode_targetId=(null == casFeat_targetId) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_targetId).getCode();}  }
class C{  private boolean isValidMediainfoFormat(){  String extension=FilenameUtils.getExtension(filename).toLowerCase();  if ("bin".equals(extension) || "dat".equals(extension) || "img".equals(extension)|| "nrg".equals(extension)|| "disc".equals(extension)) {    return false;  } else   if ("iso".equals(extension)) {    isISO=true;    return true;  }  if (type.equals(MediaFileType.VIDEO) || type.equals(MediaFileType.VIDEO_EXTRA) || type.equals(MediaFileType.TRAILER)|| type.equals(MediaFileType.SAMPLE)|| type.equals(MediaFileType.SUBTITLE)|| type.equals(MediaFileType.AUDIO)|| type.equals(MediaFileType.NFO)|| isGraphic()) {    return true;  }  return false;}  }
class C{  boolean isSubregion(){  return getRegion().isSubregion();}  }
class C{  @NotNull @ObjectiveCName("leaveAndDeleteGroupWithGid:") public Promise<Void> leaveAndDeleteGroup(int gid){  return modules.getGroupsModule().leaveAndDeleteGroup(gid);}  }
class C{  private void updateDiscoveryPathForUnManagedFS(Map<String,NASServer> nasServer,StorageSystem storage) throws IsilonCollectionException {  String paths="";  String systemAccessZone="";  String userAccessZone="";  String namespace="";  String customLocations=",";  namespace=customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.ISILON_SYSTEM_ACCESS_ZONE_NAMESPACE,"isilon",null);  systemAccessZone=IFS_ROOT + "/" + namespace+ "/";  userAccessZone=getUserAccessZonePath(nasServer);  DataSource dataSource=dataSourceFactory.createIsilonUnmanagedFileSystemLocationsDataSource(storage);  dataSource.addProperty(CustomConfigConstants.ISILON_SYSTEM_ACCESS_ZONE,systemAccessZone);  dataSource.addProperty(CustomConfigConstants.ISILON_USER_ACCESS_ZONE,userAccessZone);  dataSource.addProperty(CustomConfigConstants.ISILON_CUSTOM_DIR_PATH,customLocations);  paths=customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.ISILON_UNMANAGED_FILE_SYSTEM_LOCATIONS,"isilon",dataSource);  paths=paths.replaceAll("^,+","").replaceAll(",+$","").replaceAll(",+",",");  if (paths.equals(",") || paths.isEmpty()) {    IsilonCollectionException ice=new IsilonCollectionException("computed unmanaged file system location is empty. Please verify Isilon controller config settings");    throw ice;  }  _log.info("Unmanaged file system locations are {}",paths);  List<String> pathList=Arrays.asList(paths.split(","));  setDiscPathsForUnManaged(pathList);}  }
class C{  private static void handleFieldInsnNode(GetStaticGraph staticUsageTree,ClassNode cn,MethodNode mn,FieldInsnNode insn,int depth){  if (insn.getOpcode() != Opcodes.GETSTATIC) {    return;  }  String calleeClassName=insn.owner.replaceAll("/",".");  if (BytecodeInstrumentation.checkIfCanInstrument(calleeClassName)) {    logger.debug("Handling field read: " + insn.name);    if (!staticUsageTree.hasStaticFieldRead(cn.name,mn.name + mn.desc,insn.owner,insn.name)) {      handleClassInitializer(staticUsageTree,cn,mn,insn.owner,depth);      staticUsageTree.addStaticFieldRead(cn.name,mn.name + mn.desc,insn.owner,insn.name);      handle(staticUsageTree,insn.owner,insn.name + insn.desc,depth);    }  }}  }
class C{  CSSellyLexer(char[] input){  this.zzChars=input;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public static void loadCvModel(Element loco,CvTableModel cvModel,IndexedCvTableModel iCvModel,String family){  CvValue cvObject;  String rosterName=loco.getAttributeValue("id");  Element values=loco.getChild("values");  if (values == null) {    List<Element> elementList=loco.getChildren("CVvalue");    if (elementList != null) {      values=loco;    }  }  if (values != null) {    if (log.isDebugEnabled()) {      log.debug("Found " + values.getChildren("CVvalue").size() + " CVvalues");    }    for (    Element element : values.getChildren("CVvalue")) {      if (element.getAttribute("name") == null) {        if (log.isDebugEnabled()) {          log.debug("unexpected null in name " + element + " "+ element.getAttributes());        }        break;      }      if (element.getAttribute("value") == null) {        if (log.isDebugEnabled()) {          log.debug("unexpected null in value " + element + " "+ element.getAttributes());        }        break;      }      String name=element.getAttribute("name").getValue();      String value=element.getAttribute("value").getValue();      log.debug("CV named {} has value: {}",name,value);      cvObject=cvModel.allCvMap().get(name);      if (cvObject == null) {        cvModel.addCV(name,false,false,false);        cvObject=cvModel.allCvMap().get(name);      }      cvObject.setValue(Integer.valueOf(value).intValue());      cvObject.setState(CvValue.FROMFILE);    }    if (log.isDebugEnabled()) {      log.debug("Found " + values.getChildren("indexedCVvalue").size() + " indexedCVvalues");    }    for (    Element element : values.getChildren("indexedCVvalue")) {      if (element.getAttribute("name") == null) {        if (log.isDebugEnabled()) {          log.debug("unexpected null in name " + element + " "+ element.getAttributes());        }        break;      }      if (element.getAttribute("value") == null) {        if (log.isDebugEnabled()) {          log.debug("unexpected null in value " + element + " "+ element.getAttributes());        }        break;      }      String name=element.getAttribute("name").getValue();      String piCv=element.getAttribute("piCv").getValue();      int piVal=Integer.valueOf(element.getAttribute("piVal").getValue()).intValue();      int siVal=Integer.valueOf(element.getAttribute("siVal").getValue()).intValue();      String iCv=element.getAttribute("iCv").getValue();      String value=element.getAttribute("value").getValue();      if (log.isDebugEnabled()) {        log.debug("iCV named " + name + " has value: "+ value);      }      if (family.equals("ESU LokPilot V4.0") || family.equals("ESU LokSound Select") || family.equals("ESU LokSound V4.0")) {        if (piCv.equals("32")) {          piCv="31";          siVal=piVal;          piVal=16;        }        name=iCv + "." + piVal+ "."+ siVal;      }      cvObject=iCvModel.getMatchingIndexedCV(name);      if (log.isDebugEnabled()) {        log.debug("Matched name " + name + " with iCV "+ cvObject);      }      if (cvObject == null) {        log.info("Indexed CV " + name + " was in loco file, but not as iCv in definition; migrated it; while reading ID=\"{}\"",rosterName);        cvObject=cvModel.allCvMap().get(name);        if (cvObject == null) {          cvObject=cvModel.allCvMap().get(piVal + "." + siVal+ "."+ iCv);        }        if (cvObject == null) {          log.warn("     Didn't find a match during migration of ID=\"{}\", failed",rosterName);          continue;        }      }      cvObject.setValue(Integer.valueOf(value).intValue());      if (cvObject.getInfoOnly()) {        cvObject.setState(CvValue.READ);      } else {        cvObject.setState(CvValue.FROMFILE);      }    }  } else {    log.error("no values element found in config file; CVs not configured for ID=\"{}\"",rosterName);  }  cvObject=cvModel.allCvMap().get("17");  if (cvObject != null) {    cvObject.setState(CvValue.FROMFILE);  }}  }
class C{  public DoubleMatrix2D inverse(DoubleMatrix2D A){  if (property.isSquare(A) && property.isDiagonal(A)) {    DoubleMatrix2D inv=A.copy();    boolean isNonSingular=Diagonal.inverse(inv);    if (!isNonSingular)     throw new IllegalArgumentException("A is singular.");    return inv;  }  return solve(A,DoubleFactory2D.dense.identity(A.rows()));}  }
class C{  public void putIfNone(String oldname,String newname){  if (oldname == newname)   return;  String oldname2=toJvmName(oldname);  String s=(String)get(oldname2);  if (s == null)   super.put(oldname2,toJvmName(newname));}  }
class C{  @Deprecated @Override public Editor edit() throws InstantiationError {  if (mEditor != null) {    return mEditor;  }  if (mSharedPreferences == null) {    throw new InstantiationError("\n ======================================== \nError : " + "Do not call " + tag + "'s `edit()`."+ "\n This method is not supported directly."+ " \n ======================================== \n");  }  mEditor=mSharedPreferences.edit();  return mEditor;}  }
class C{  public Color next(final T object){  if (!m_objects.containsKey(object)) {    m_objects.put(object,Color.GREEN);    return Color.GREEN;  }  final Color oldColor=m_objects.get(object);  final int newLowest=Math.min((oldColor.getRGB() & 0xFF) + 0x40,0xFF) & 0xFF;  final int newMiddle=Math.min((oldColor.getRGB() & 0xFF0000) + 0x400000,0xFF0000) & 0xFF0000;  final Color newColor=new Color((oldColor.getRGB() & 0x00FF00) + newMiddle + newLowest);  if (newColor == Color.WHITE) {    m_objects.remove(object);  } else {    m_objects.put(object,newColor);  }  return newColor;}  }
class C{  private void reset(){  origCards.clear();  orderedCards.clear();  for (int i=0; i < cards.length; i++)   origCards.add(i);  orderCardGroups();}  }
class C{  private int handleEqual(){  try {    IRegion line=fDocument.getLineInformationOfOffset(fPosition);    int nonWS=fScanner.findNonWhitespaceBackward(line.getOffset(),JavaHeuristicScanner.UNBOUND);    if (nonWS != Symbols.TokenEOF) {      int tokenAtPreviousLine=fScanner.nextToken(nonWS,nonWS + 1);      if (tokenAtPreviousLine != Symbols.TokenSEMICOLON && tokenAtPreviousLine != Symbols.TokenRBRACE && tokenAtPreviousLine != Symbols.TokenLBRACE && tokenAtPreviousLine != Symbols.TokenEOF)       return fPosition;    }  } catch (  BadLocationException e) {    return fPosition;  }  fIndent=fPrefs.prefContinuationIndent;  return fPosition;}  }
class C{  public static Dataset open(Object source,boolean isSilentMode) throws FileNotFoundException, IllegalArgumentException, SecurityException, WWRuntimeException {  if (!gdalIsAvailable.get()) {    if (isSilentMode) {      return null;    }    String message=Logging.getMessage("gdal.GDALNotAvailable");    Logging.logger().severe(message);    throw new WWRuntimeException(message);  }  File file=WWIO.getFileForLocalAddress(source);  if (null == file) {    if (isSilentMode) {      return null;    }    String message=Logging.getMessage("generic.UnrecognizedSourceType",source.getClass().getName());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!file.exists()) {    if (isSilentMode) {      return null;    }    String message=Logging.getMessage("generic.FileNotFound",file.getAbsolutePath());    Logging.logger().severe(message);    throw new FileNotFoundException(message);  }  if (!file.canRead()) {    if (isSilentMode) {      return null;    }    String message=Logging.getMessage("generic.FileNoReadPermission",file.getAbsolutePath());    Logging.logger().severe(message);    throw new SecurityException(message);  }  Dataset ds=null;  try {    gdal.PushErrorHandler("CPLQuietErrorHandler");    ds=gdal.Open(file.getAbsolutePath(),gdalconst.GA_ReadOnly);  }  finally {    gdal.PopErrorHandler();  }  if (ds == null) {    if (isSilentMode) {      return null;    }    String message=Logging.getMessage("generic.CannotOpenFile",GDALUtils.getErrorMessage());    Logging.logger().fine(message);    throw new WWRuntimeException(message);  }  return ds;}  }
class C{  private void buildQQPlotData(Node selectedNode){  int columnIndex=dataSet.getColumn(selectedNode);  double mean=0.0;  double sd=0.0;  this.minData=10000000000000.0;  this.maxData=0.0;  this.minComparison=1000000000000.0;  this.maxComparison=0.0;  if (columnIndex == -1) {    for (int i=0; i < dataSet.getNumColumns(); i++) {      if (dataSet.getVariable(i) instanceof ContinuousVariable) {        this.selectedVariable=(ContinuousVariable)dataSet.getVariable(i);        columnIndex=i;        break;      }    }    if (columnIndex == -1) {      JOptionPane.showMessageDialog(new JFrame(),"You need at least one complete continuous variable for a q-q plot!");      throw new IllegalArgumentException("You need at least one complete continuous variable for a q-q plot!");    }  }  for (int i=0; i < dataSet.getNumRows(); i++) {    double value=dataSet.getDouble(i,columnIndex);    if (Double.isNaN(value) || value == Double.NEGATIVE_INFINITY || value == Double.POSITIVE_INFINITY) {      continue;    }    mean+=value;    if (value < this.minData)     this.minData=value;    if (value > this.maxData)     this.maxData=value;  }  for (int i=0; i < dataSet.getNumRows(); i++) {    for (int k=i; k < dataSet.getNumRows(); k++) {      double value1=dataSet.getDouble(i,columnIndex);      double value2=dataSet.getDouble(k,columnIndex);      if (Double.isNaN(value1) || value1 == Double.NEGATIVE_INFINITY || value1 == Double.POSITIVE_INFINITY) {        continue;      }      if (Double.isNaN(value2) || value2 == Double.NEGATIVE_INFINITY || value2 == Double.POSITIVE_INFINITY) {        continue;      }      if (value1 > value2) {        double temp=dataSet.getDouble(i,columnIndex);        dataSet.setDouble(i,columnIndex,value2);        dataSet.setDouble(k,columnIndex,temp);      }    }  }  if (mean == 0.0)   mean=1.0; else   mean/=dataSet.getNumRows();  for (int i=0; i < dataSet.getNumRows(); i++) {    double value1=dataSet.getDouble(i,columnIndex);    double value2=dataSet.getDouble(i,columnIndex);    if (Double.isNaN(value1) || value1 == Double.NEGATIVE_INFINITY || value1 == Double.POSITIVE_INFINITY) {      continue;    }    if (Double.isNaN(value2) || value2 == Double.NEGATIVE_INFINITY || value2 == Double.POSITIVE_INFINITY) {      continue;    }    sd+=(value1 - mean) * (value2 - mean);  }  if (sd == 0.0) {    sd=1.0;  } else {    sd/=dataSet.getNumRows() - 1.0;    sd=Math.sqrt(sd);  }  this.comparison=new cern.jet.random.Normal(mean,sd,new MersenneTwister());  calculateComparisonSet(this.comparison,this.dataSet);  if (this.minData < this.minComparison)   this.min=this.minData; else   this.min=this.minComparison;  if (this.maxData > this.maxComparison)   this.max=this.maxData; else   this.max=this.maxComparison;}  }
class C{  public CandiesMerger(File targetDir,List<File> candyClassPathEntries){  logger.debug("new candies merger");  logger.debug("targetDir: " + targetDir.getAbsolutePath());  logger.debug("candies classpath entries: " + candyClassPathEntries);  this.targetDir=targetDir;  this.candyClassLoader=new CandyClassLoader(candyClassPathEntries.stream().map(null).toArray(null));  logger.debug("classloader URLs: " + Arrays.asList(candyClassLoader.getURLs()));  this.candyClassPools=new HashMap<>();  this.classPool=new ClassPool(ClassPool.getDefault());  for (  File entry : candyClassPathEntries) {    try {      this.classPool.appendClassPath(entry.getAbsolutePath());      ClassPool candyClassPool=new ClassPool();      candyClassPool.appendClassPath(entry.getAbsolutePath());      candyClassPools.put(entry,candyClassPool);    } catch (    Exception e) {      logger.error("wrong class path entry " + entry,e);    }  }  logger.debug("candies class pools: " + candyClassPools);}  }
class C{  public static Workflow.Method restoreFromCloneMethod(URI storage,List<URI> clone,Boolean updateOpStatus,boolean isCG){  return new Workflow.Method("restoreFromCloneStep",storage,clone,updateOpStatus,isCG);}  }
class C{  public final int moveMade(long now,boolean useIncrement){  stopTimer(now);  ArrayList<TimeControlField> tc=tcData.getTC(whiteToMove);  Pair<Integer,Integer> tcInfo=getCurrentTC(whiteToMove);  int tcIdx=tcInfo.first;  int movesToTc=tcInfo.second;  int remaining=getRemainingTime(whiteToMove,now);  if (useIncrement) {    remaining+=tc.get(tcIdx).increment;    if (movesToTc == 1) {      if (tcIdx + 1 < tc.size())       tcIdx++;      remaining+=tc.get(tcIdx).timeControl;    }  }  elapsed=0;  return remaining;}  }
class C{  public static ODataResponse prepareMediaResponse(String eTag,String filename,String contentType,long lastModified,long contentLength,ODataContext context,InputStream stream){  ODataResponse.ODataResponseBuilder builder=ODataResponse.newBuilder();  String ifNoneMatch=context.getRequestHeader("If-None-Match");  if (ifNoneMatch != null && matches(ifNoneMatch,eTag)) {    builder.header("ETag",eTag);    builder.status(HttpStatusCodes.NOT_MODIFIED);    builder.entity(stream);    return builder.build();  }  long ifModifiedSince=getHttpDate(context.getRequestHeader("If-Modified-Since"));  if ((ifNoneMatch == null) && (ifModifiedSince != -1) && (ifModifiedSince + 1000 > lastModified)) {    builder.header("ETag",eTag);    builder.status(HttpStatusCodes.NOT_MODIFIED);    builder.entity(stream);    return builder.build();  }  String ifMatch=context.getRequestHeader("If-Match");  if ((ifMatch != null) && !matches(ifMatch,eTag)) {    builder.status(HttpStatusCodes.PRECONDITION_FAILED);    builder.entity(stream);    return builder.build();  }  long ifUnmodifiedSince=getHttpDate(context.getRequestHeader("If-Unmodified-Since"));  if ((ifUnmodifiedSince != -1) && (ifUnmodifiedSince + 1000 <= lastModified)) {    builder.status(HttpStatusCodes.PRECONDITION_FAILED);    builder.entity(stream);    return builder.build();  }  Range full=new Range(0,contentLength - 1,contentLength);  List<Range> rangeList=new ArrayList<>();  String range=context.getRequestHeader("Range");  if (range != null) {    String ifRange=context.getRequestHeader("If-Range");    if ((ifRange != null) && !ifRange.equals(eTag)) {      rangeList.add(full);    }    if (!range.matches("^bytes=\\d*-\\d*(,\\d*-\\d*)*$")) {      builder.header("Content-Range","bytes */" + contentLength);      builder.status(HttpStatusCodes.REQUESTED_RANGE_NOT_SATISFIABLE);      builder.entity(stream);      return builder.build();    }    if (rangeList.isEmpty()) {      for (      String part : range.substring(6).split(",")) {        long start=V1Util.sublong(part,0,part.indexOf("-"));        long end=V1Util.sublong(part,part.indexOf("-") + 1,part.length());        if (start == -1) {          start=contentLength - end;          end=contentLength - 1;        } else         if (end == -1 || end > contentLength - 1) {          end=contentLength - 1;        }        if (start > end) {          builder.header("Content-Range","bytes */" + contentLength);          builder.status(HttpStatusCodes.REQUESTED_RANGE_NOT_SATISFIABLE);          builder.entity(stream);          return builder.build();        }        rangeList.add(new Range(start,end,contentLength));      }    }  }  String disposition="inline";  if (contentType == null) {    contentType="application/octet-stream";  } else {    if (contentType.startsWith("image")) {      String acccept=context.getRequestHeader("Accept");      disposition=(acccept != null && accepts(acccept,contentType)) ? "inline" : "attachment";    }  }  builder.header("Content-Disposition",disposition + ";filename=\"" + filename+ "\"");  builder.header("Accept-Ranges","bytes");  builder.header("ETag",eTag);  builder.header("Last-Modified",asHttpDate(lastModified));  builder.header("Expires",asHttpDate(System.currentTimeMillis() + V1Util.DEFAULT_EXPIRE_TIME));  if (rangeList.isEmpty() || rangeList.size() == 1) {    HttpStatusCodes status=HttpStatusCodes.OK;    Range r;    if (rangeList.isEmpty()) {      r=full;    } else {      r=rangeList.get(0);      status=HttpStatusCodes.PARTIAL_CONTENT;    }    builder.header("Content-Type",contentType);    builder.header("Content-Range","bytes " + r.start + "-"+ r.end+ "/"+ r.total);    builder.header("Content-Length",String.valueOf(r.length));    try {      stream.skip(r.start);      builder.status(status);    } catch (    IOException e) {      LOGGER.error("Cannot skip input stream of " + filename + " to offset "+ r.start);      builder.status(HttpStatusCodes.REQUESTED_RANGE_NOT_SATISFIABLE);    }    builder.entity(stream);    return builder.build();  } else {    builder.header("Content-Type","multipart/byteranges; boundary=" + V1Util.MULTIPART_BOUNDARY);    builder.status(HttpStatusCodes.NOT_IMPLEMENTED);    LOGGER.error("MULTIPART NOT SUPPORTED !");    builder.entity(stream);    return builder.build();  }}  }
class C{  public void close(){  renderer.close();}  }
class C{  public List<DeviceDB> _queryUserDB_Devices(long userId){synchronized (this) {    if (userDB_DevicesQuery == null) {      QueryBuilder<DeviceDB> queryBuilder=queryBuilder();      queryBuilder.where(Properties.UserId.eq(null));      queryBuilder.orderRaw("TIMESTAMP ASC");      userDB_DevicesQuery=queryBuilder.build();    }  }  Query<DeviceDB> query=userDB_DevicesQuery.forCurrentThread();  query.setParameter(0,userId);  return query.list();}  }
class C{  public void reset(int row){  myRow=row;  myFocusRequestor=myDefaultFocusRequestor;  mySkipStateChange=true;  try {    for (    ArrangementUiComponent component : myComponents.values()) {      component.reset();    }  }  finally {    mySkipStateChange=false;  }  ArrangementMatchingRulesModel model=myControl.getModel();  if (row < 0 || row >= model.getSize()) {    myRow=-1;    return;  }  Object element=model.getElementAt(row);  ArrangementSettingsToken orderType=element instanceof ArrangementMatchRule ? ((ArrangementMatchRule)element).getOrderType() : null;  final ArrangementMatchCondition condition;  final Map<ArrangementSettingsToken,Object> conditionTokens;  if (element instanceof EmptyArrangementRuleComponent) {    condition=null;    conditionTokens=ContainerUtilRt.newHashMap();  } else   if (!(element instanceof StdArrangementMatchRule)) {    return;  } else {    condition=((StdArrangementMatchRule)element).getMatcher().getCondition();    conditionTokens=ArrangementUtil.extractTokens(condition);  }  mySkipStateChange=true;  try {    for (    ArrangementUiComponent component : myComponents.values()) {      ArrangementSettingsToken token=component.getToken();      if (token != null && (component.getAvailableTokens().contains(orderType) || isEnabled(condition,token))) {        component.setEnabled(true);        if (component.getAvailableTokens().contains(orderType)) {          component.chooseToken(orderType);        } else {          component.setSelected(conditionTokens.containsKey(token));        }        Object value=conditionTokens.get(token);        if (value != null) {          component.setData(value);        }      }    }    refreshConditions();  }  finally {    mySkipStateChange=false;  }}  }
class C{  public GenericJSONBuilder addField(String key,String value){  String pair_string="\"" + key + "\": \""+ value+ "\"";  extras.add(pair_string);  return this;}  }
class C{  public static String valueOf(int value){  return Integer.toString(value);}  }
class C{  public static DoubleVector dchisqLog(double x,DoubleVector ncp){  DoubleVector dLog=new DoubleVector(ncp.size());  double xh=Math.sqrt(x);  double mean;  for (int i=0; i < ncp.size(); i++) {    mean=Math.sqrt(ncp.get(i));    if (ncp.get(i) == 0.0)     dLog.set(i,dchisqLog(x)); else     dLog.set(i,Math.log(dnorm(xh - mean) + dnorm(-xh - mean)) - Math.log(2 * xh));  }  return dLog;}  }
class C{  private double orthoMatch(IHex org,IHex com){  if ((com.getLevel() != ITerrain.WILDCARD) && (org.getLevel() != com.getLevel())) {    return 0;  }  if ((com.getTheme() != null) && !com.getTheme().equalsIgnoreCase(org.getTheme())) {    return 0.0;  }  if (org.terrainsPresent() < com.terrainsPresent())   return 0.0;  int cTerrainTypes[]=com.getTerrainTypes();  for (int i=0; i < cTerrainTypes.length; i++) {    int cTerrType=cTerrainTypes[i];    ITerrain cTerr=com.getTerrain(cTerrType);    ITerrain oTerr=org.getTerrain(cTerrType);    if (cTerr == null) {      continue;    } else     if ((oTerr == null) || ((cTerr.getLevel() != ITerrain.WILDCARD) && (oTerr.getLevel() != cTerr.getLevel())) || (cTerr.hasExitsSpecified() && (oTerr.getExits() != cTerr.getExits()))) {      return 0;    }  }  return 1.0;}  }
class C{  public static void handleFooterView(DrawerBuilder drawer,View.OnClickListener onClickListener){  Context ctx=drawer.mSliderLayout.getContext();  if (drawer.mStickyDrawerItems != null && drawer.mStickyDrawerItems.size() > 0) {    drawer.mStickyFooterView=DrawerUtils.buildStickyDrawerItemFooter(ctx,drawer,onClickListener);  }  if (drawer.mStickyFooterView != null) {    RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);    layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM,1);    drawer.mStickyFooterView.setId(R.id.material_drawer_sticky_footer);    drawer.mSliderLayout.addView(drawer.mStickyFooterView,layoutParams);    if ((drawer.mTranslucentNavigationBar || drawer.mFullscreen) && Build.VERSION.SDK_INT >= 19) {      drawer.mStickyFooterView.setPadding(0,0,0,UIUtils.getNavigationBarHeight(ctx));    }    RelativeLayout.LayoutParams layoutParamsListView=(RelativeLayout.LayoutParams)drawer.mRecyclerView.getLayoutParams();    layoutParamsListView.addRule(RelativeLayout.ABOVE,R.id.material_drawer_sticky_footer);    drawer.mRecyclerView.setLayoutParams(layoutParamsListView);    if (drawer.mStickyFooterShadow) {      drawer.mStickyFooterShadowView=new View(ctx);      drawer.mStickyFooterShadowView.setBackgroundResource(R.drawable.material_drawer_shadow_top);      drawer.mSliderLayout.addView(drawer.mStickyFooterShadowView,RelativeLayout.LayoutParams.MATCH_PARENT,(int)UIUtils.convertDpToPixel(4,ctx));      RelativeLayout.LayoutParams lps=(RelativeLayout.LayoutParams)drawer.mStickyFooterShadowView.getLayoutParams();      lps.addRule(RelativeLayout.ABOVE,R.id.material_drawer_sticky_footer);      drawer.mStickyFooterShadowView.setLayoutParams(lps);    }    drawer.mRecyclerView.setPadding(drawer.mRecyclerView.getPaddingLeft(),drawer.mRecyclerView.getPaddingTop(),drawer.mRecyclerView.getPaddingRight(),ctx.getResources().getDimensionPixelSize(R.dimen.material_drawer_padding));  }  if (drawer.mFooterView != null) {    if (drawer.mRecyclerView == null) {      throw new RuntimeException("can't use a footerView without a recyclerView");    }    if (drawer.mFooterDivider) {      drawer.getAdapter().addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.BOTTOM));    } else {      drawer.getAdapter().addFooterDrawerItems(new ContainerDrawerItem().withView(drawer.mFooterView).withViewPosition(ContainerDrawerItem.Position.NONE));    }  }}  }
class C{  public boolean contains(DataSource source){  return sources.contains(source);}  }
class C{  public boolean addEntry(int index,T entry){  if (!mOriginalData.contains(entry)) {    mOriginalData.add(index,entry);    mViewData.add(index,new ViewObject<T>(entry));    return true;  }  return false;}  }
class C{  public static boolean tryDelete(String fileName){  try {    FilePath.get(fileName).delete();    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  @RpcMethod public ProvisionResponse provision(List<String> dataStoreList,Set<String> imageDataStores,boolean usedForVMs,String hostAddress,int hostPort,double memoryOverCommit,String loggingEndpoint,String logLevel,StatsPluginConfig statsPluginConfig,boolean managementOnly,String hostId,String deploymentId,String ntpEndpoint) throws InterruptedException, RpcException {  SyncHandler<ProvisionResponse,AgentControl.AsyncClient.provision_call> syncHandler=new SyncHandler<>();  provision(dataStoreList,imageDataStores,usedForVMs,hostAddress,hostPort,memoryOverCommit,loggingEndpoint,logLevel,statsPluginConfig,managementOnly,hostId,deploymentId,ntpEndpoint,syncHandler);  syncHandler.await();  return ResponseValidator.checkProvisionResponse(syncHandler.getResponse());}  }
class C{  public Material applyToMaterial(Material material){  if (diffuseColor != null) {    material.set(new ColorAttribute(ColorAttribute.Diffuse,diffuseColor));  }  if (diffuseTexture != null) {    material.set(new TextureAttribute(TextureAttribute.Diffuse,diffuseTexture.getTexture()));  } else {    material.remove(TextureAttribute.Diffuse);  }  material.set(new FloatAttribute(FloatAttribute.Shininess,shininess));  return material;}  }
class C{  protected static Collection findCertificates(X509CertStoreSelector certSelect,List certStores) throws AnnotatedException {  Set certs=new HashSet();  Iterator iter=certStores.iterator();  while (iter.hasNext()) {    Object obj=iter.next();    if (obj instanceof X509Store) {      X509Store certStore=(X509Store)obj;      try {        certs.addAll(certStore.getMatches(certSelect));      } catch (      StoreException e) {        throw new AnnotatedException("Problem while picking certificates from X.509 store.",e);      }    } else {      CertStore certStore=(CertStore)obj;      try {        certs.addAll(certStore.getCertificates(certSelect));      } catch (      CertStoreException e) {        throw new AnnotatedException("Problem while picking certificates from certificate store.",e);      }    }  }  return certs;}  }
class C{  public SemanticHelper(){  pageStorage=new Hashtable();  resetSpecNames();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_CLASS_EXPRESSION;}  }
class C{  private void sendUpdates() throws Exception {  log.info("sendUpdates");  String sql="SELECT rt.AD_Table_ID, rt.ReplicationType, t.TableName, rt.AD_ReplicationTable_ID " + "FROM AD_ReplicationTable rt" + " INNER JOIN AD_Table t ON (rt.AD_Table_ID=t.AD_Table_ID) "+ "WHERE rt.IsActive='Y' AND t.IsActive='Y'"+ " AND AD_ReplicationStrategy_ID=?"+ " AND rt.ReplicationType='R' "+ "ORDER BY t.LoadSeq";  RowSet rowset=getRowSet(sql,new Object[]{new Integer(m_replication.getAD_ReplicationStrategy_ID())});  try {    while (rowset.next())     sendUpdatesTable(rowset.getInt(1),rowset.getString(3),rowset.getInt(4));    rowset.close();  } catch (  SQLException ex) {    log.log(Level.SEVERE,"sendUpdates",ex);    m_replicated=false;  }}  }
class C{  public Frustum(Plane left,Plane right,Plane bottom,Plane top,Plane near,Plane far,Viewport viewport){  if (left == null || right == null || bottom == null || top == null || near == null || far == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Frustum","constructor","missingPlane"));  }  if (viewport == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Frustum","constructor","missingViewport"));  }  this.left.set(left);  this.right.set(right);  this.bottom.set(bottom);  this.top.set(top);  this.near.set(near);  this.far.set(far);  this.viewport.set(viewport);}  }
class C{  private List<InactiveImageDescriptor> filterInactiveImages(final State current,final List<InactiveImageDescriptor> inactiveImages,final Map<String,ImageService.State> referenceImages){  List<InactiveImageDescriptor> imagesToDelete=new LinkedList<>();  for (  InactiveImageDescriptor image : inactiveImages) {    ImageService.State referenceImage=referenceImages.get(image.getImage_id());    ServiceUtils.logInfo(this,Utils.toJson(false,false,referenceImage));    if (image.getTimestamp() > current.imageCreateWatermarkTime || image.getTimestamp() > current.imageDeleteWatermarkTime) {      continue;    }    if (null != referenceImage) {      if (referenceImage.state == ImageState.PENDING_DELETE) {        imagesToDelete.add(image);        continue;      }      if (referenceImage.replicationType == ImageReplicationType.EAGER || current.isImageDatastore) {        continue;      }    }    imagesToDelete.add(image);  }  return imagesToDelete;}  }
class C{  public RequestHandle head(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,new HttpHead(getUrlWithQueryString(isUrlEncodingEnabled,url,params)),null,responseHandler,context);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void fitText(String text,int textWidth){  if (textWidth > 0) {    int availableWidth=textWidth - this.getPaddingLeft() - this.getPaddingRight();    float trySize=maxTextSize;    textPaint.setTextSize(trySize);    while ((trySize > minTextSize) && (textPaint.measureText(text) > availableWidth)) {      trySize-=1;      if (trySize <= minTextSize) {        trySize=minTextSize;        break;      }      textPaint.setTextSize(trySize);    }    this.setTextSize(trySize);  }}  }
class C{  protected ArrayImpl(){  super();}  }
class C{  public void updatePose(double percent){  this.setPose(this.getPosition().add(physicsState.getLastVelocity(this.index).multiply(percent)),this.getOrientation().add(physicsState.getLastAngularVelocity(this.index)));}  }
class C{  java.sql.Timestamp toSqlTimestamp(Calendar calendar){  return new java.sql.Timestamp(getTimeInMillis(calendar));}  }
class C{  public boolean defNonDescendent(Node node1,Node node2){  return !(possibleAncestor(node1,node2));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.416 -0500",hash_original_method="BA5E455D31A0289B0DD8C58E3C3391C6",hash_generated_method="3BCBEE91BF403C6C9299E78B00F085E4") static public void assertEquals(short expected,short actual){  assertEquals(null,expected,actual);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private void writeHeader() throws SQLException {  Statement query;  String[] revTableHeaderQueries;  revTableHeaderQueries=sqlEncoder.getTable();  for (  String revTableHeaderQuery : revTableHeaderQueries) {    query=connection.createStatement();    query.executeUpdate(revTableHeaderQuery);    query.close();  }}  }
class C{  public Spatial doSelection(Ray3 pickRay,Vector3 position,Vector3 normal,SpatialPickResults boundsPick,boolean terrainOnly){  Mesh[] mesh=boundsPick.getMeshList();  if (mesh.length == 0) {    return (null);  }  int meshIndex=-1;  IntersectionRecord record=null;  int index=-1;  double dist=Double.MAX_VALUE;  for (int i=0; i < mesh.length; ++i) {    if (terrainOnly) {      if (!(mesh[i] instanceof QuadTreeMesh))       continue;    }    PickData pd=boundsPick.getPickData(i);    IntersectionRecord ir=pd.getIntersectionRecord();    if (ir == null) {      continue;    }    if (ir.getNumberOfIntersections() == 0) {      continue;    }    pickResults=new PrimitivePickResults();    PickingUtil.findPick(mesh[i],pickRay,pickResults);    if (pickResults.getNumber() > 0) {      for (int j=0; j < pickResults.getNumber(); j++) {        pd=pickResults.getPickData(j);        ir=pd.getIntersectionRecord();        int closestIndex=ir.getClosestIntersection();        double d=ir.getIntersectionDistance(closestIndex);        if (d < dist) {          dist=d;          index=closestIndex;          record=ir;          meshIndex=i;        }      }    }  }  if (record == null) {    return (null);  }  ReadOnlyVector3 pos=record.getIntersectionPoint(index);  ReadOnlyVector3 nrml=record.getIntersectionNormal(index);  if (nrml == null) {    PrimitiveKey key=record.getIntersectionPrimitive(index);    Vector3[] vertices=mesh[meshIndex].getMeshData().getPrimitiveVertices(key.getPrimitiveIndex(),key.getSection(),null);    if (vertices.length > 2) {      nrml=getNormal(vertices[0],vertices[1],vertices[2]);    } else {      nrml=new Vector3();    }  }  position.set(pos);  normal.set(nrml);  if (meshIndex >= 0) {    return (mesh[meshIndex]);  }  return (null);}  }
class C{  public int eval(final JBBPBitInputStream inStream,final int currentCompiledBlockOffset,final JBBPCompiledBlock compiledBlockData,final JBBPNamedNumericFieldMap fieldMap){  final int[] stack=new int[this.maxStackDepth];  int stackDepth=0;  final JBBPIntCounter counter=new JBBPIntCounter();  while (counter.get() < this.compiledExpression.length) {    final int code=this.compiledExpression[counter.getAndIncrement()];switch (code) {case CODE_EXTVAR:case CODE_VAR:{        final int index=JBBPUtils.unpackInt(this.compiledExpression,counter);        stack[stackDepth++]=code == CODE_EXTVAR ? "$".equals(this.externalValueNames[index]) ? (int)inStream.getCounter() : fieldMap.getExternalFieldValue(this.externalValueNames[index],compiledBlockData,this) : fieldMap.get(compiledBlockData.getNamedFields()[index]).getAsInt();      }    break;case CODE_CONST:{    stack[stackDepth++]=JBBPUtils.unpackInt(this.compiledExpression,counter);  }break;case CODE_ADD:{final int top=stack[--stackDepth];stack[stackDepth - 1]+=top;}break;case CODE_AND:{final int top=stack[--stackDepth];stack[stackDepth - 1]&=top;}break;case CODE_OR:{final int top=stack[--stackDepth];stack[stackDepth - 1]|=top;}break;case CODE_XOR:{final int top=stack[--stackDepth];stack[stackDepth - 1]^=top;}break;case CODE_MINUS:{final int top=stack[--stackDepth];stack[stackDepth - 1]-=top;}break;case CODE_UNARYMINUS:{stack[stackDepth - 1]=-stack[stackDepth - 1];}break;case CODE_UNARYPLUS:{}break;case CODE_NOT:{stack[stackDepth - 1]=~stack[stackDepth - 1];}break;case CODE_DIV:{final int top=stack[--stackDepth];stack[stackDepth - 1]/=top;}break;case CODE_MUL:{final int top=stack[--stackDepth];stack[stackDepth - 1]*=top;}break;case CODE_MOD:{final int top=stack[--stackDepth];stack[stackDepth - 1]%=top;}break;case CODE_LSHIFT:{final int top=stack[--stackDepth];stack[stackDepth - 1]<<=top;}break;case CODE_RSHIFT:{final int top=stack[--stackDepth];stack[stackDepth - 1]>>=top;}break;case CODE_RSIGNSHIFT:{final int top=stack[--stackDepth];stack[stackDepth - 1]>>>=top;}break;default :throw new Error("Detected unsupported operation, contact developer");}}return stack[0];}  }
class C{  public PAData(DerValue encoding) throws Asn1Exception, IOException {  DerValue der=null;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x01) {    this.pADataType=der.getData().getBigInteger().intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  der=encoding.getData().getDerValue();  if ((der.getTag() & 0x1F) == 0x02) {    this.pADataValue=der.getData().getOctetString();  }  if (encoding.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  private void fetchProfileInfoFromGoogle(){  mWasProfileImageUploaded=false;  if (mUpdate) {    ((EditProfileActivity)getActivity()).getPlusManager().login();  } else {    ((RegistrationProcessActivity)getActivity()).getPlusManager().login();  }}  }
class C{  protected void cancelHeightAnimation(){  cancelAnimation(this,Property.PANEL_HEIGHT);}  }
class C{  ThreadLocal threadLocalForCache(String cacheName){  return threadLoc;}  }
class C{  protected void updateControlPoints(){  if (this.getShape() instanceof Airspace) {    if (this.getShape() instanceof Polygon || this.getShape() instanceof Curtain)     this.updatePolygonAirspaceControlPoints(); else     if (this.getShape() instanceof PartialCappedCylinder)     this.updatePartialCappedCylinderControlPoints(); else     if (this.getShape() instanceof CappedCylinder)     this.updateCappedCylinderControlPoints(); else     if (this.getShape() instanceof CappedEllipticalCylinder)     this.updateCappedEllipticalCylinderControlPoints(); else     if (this.getShape() instanceof Orbit)     this.updateOrbitControlPoints(); else     if (this.getShape() instanceof Route)     this.updateRouteControlPoints(); else     if (this.getShape() instanceof SphereAirspace)     this.updateSphereControlPoints(); else     if (this.getShape() instanceof TrackAirspace)     this.updateTrackControlPoints();  } else   if (this.getShape() instanceof SurfaceShape) {    if (this.getShape() instanceof SurfacePolygon || this.getShape() instanceof SurfacePolyline)     this.updateSurfacePolygonControlPoints(); else     if (this.getShape() instanceof SurfaceCircle)     this.updateSurfaceCircleControlPoints(); else     if (this.getShape() instanceof SurfaceSquare)     this.updateSurfaceSquareControlPoints(); else     if (this.getShape() instanceof SurfaceQuad)     this.updateSurfaceQuadControlPoints(); else     if (this.getShape() instanceof SurfaceEllipse)     this.updateSurfaceEllipseControlPoints();  }}  }
class C{  @Override protected void done(){  executionList.execute();}  }
class C{  public Snapshot snapshot(long index){  return snapshots.get(index);}  }
class C{  PropertyLayout(ObservableList<PropertyEditor.Item> properties){  this.index=new AtomicInteger(0);  this.items=new HashSet<>();  getColumnConstraints().add(0,new ColumnConstraints(MIN_LABEL_WIDTH,USE_COMPUTED_SIZE,USE_PREF_SIZE,Priority.NEVER,HPos.LEFT,true));  getColumnConstraints().add(1,new ColumnConstraints(MIN_EDITOR_WIDTH,USE_COMPUTED_SIZE,Double.MAX_VALUE,Priority.ALWAYS,HPos.LEFT,true));  getStyleClass().add("properties-layout");  properties.stream().forEachOrdered(null);}  }
class C{  public void doSaveWithoutValidating(IProgressMonitor monitor){  this.commitPages(monitor,true);  model.save(monitor);  this.editorDirtyStateChanged();}  }
class C{  public void stop(){  choregrapherAnalysis.stop();}  }
class C{  public LocalEntity[] pasteEntities(Vector newOrigin){  LocalEntity[] entities=new LocalEntity[this.entities.size()];  for (int i=0; i < this.entities.size(); ++i) {    CopiedEntity copied=this.entities.get(i);    if (copied.entity.spawn(copied.entity.getPosition().setPosition(copied.relativePosition.add(newOrigin)))) {      entities[i]=copied.entity;    }  }  return entities;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public DanishAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public final double meanAbsoluteError(){  return m_delegate.meanAbsoluteError();}  }
class C{  private static void registerShutdownHook(Collection<Profiler> profilers){  Thread shutdownHook=new Thread(new ProfilerShutdownHookWorker(profilers,isRunning));  Runtime.getRuntime().addShutdownHook(shutdownHook);}  }
class C{  public FisheyeDistortion(double xfactor,double yfactor){  super();  dx=xfactor;  dy=yfactor;  m_distortX=dx > 0;  m_distortY=dy > 0;}  }
class C{  public Boolean isDigestEnabled(){  return digestEnabled;}  }
class C{  public static <T>Streamable<T> fromIterable(final Iterable<T> iterable){  return new StreamableImpl(Impl.collectStream(iterable));}  }
class C{  public void checkCast(final Type type){  if (!type.equals(OBJECT_TYPE)) {    typeInsn(Opcodes.CHECKCAST,type);  }}  }
class C{  public float leading(){  return 0.1f * height;}  }
class C{  private AddTranslationMemoryCommand(){}  }
class C{  public byte[] toByteArray(){  int totalLen=_pastLen + _currBlockPtr;  if (totalLen == 0) {    return NO_BYTES;  }  byte[] result=new byte[totalLen];  int offset=0;  for (  byte[] block : _pastBlocks) {    int len=block.length;    System.arraycopy(block,0,result,offset,len);    offset+=len;  }  System.arraycopy(_currBlock,0,result,offset,_currBlockPtr);  offset+=_currBlockPtr;  if (offset != totalLen) {    throw new RuntimeException("Internal error: total len assumed to be " + totalLen + ", copied "+ offset+ " bytes");  }  if (!_pastBlocks.isEmpty()) {    reset();  }  return result;}  }
class C{  @Override public void write(byte[] buffer,int offset,int byteCount) throws IOException {  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);  if (currentEntry == null) {    throw new ZipException("No active entry");  }  if (currentEntry.getMethod() == STORED) {    out.write(buffer,offset,byteCount);  } else {    super.write(buffer,offset,byteCount);  }  crc.update(buffer,offset,byteCount);}  }
class C{  public SizedWholeNumberField(int value,int columns){  super(value,columns);  setPreferredSize(STANDARD_DIMENSION);  setMaximumSize(STANDARD_DIMENSION);}  }
class C{  @Override public LinkedList<Hypothesis> init(int minComplexity){  LinkedList<Hypothesis> border=new LinkedList<Hypothesis>();  LinkedList<Hypothesis> result=new LinkedList<Hypothesis>();  for (int attributeIndex=0; attributeIndex < allLiterals.length; attributeIndex++) {    for (int valueIndex=0; valueIndex < allLiterals[attributeIndex].length; valueIndex++) {      border.addLast(new Rule(allLiterals[attributeIndex][valueIndex],POSITIVE_CLASS));    }  }  while (!border.isEmpty()) {    Rule rule=(Rule)border.removeFirst();    result.addLast(rule);    if (createAllHypothesis) {      result.addLast(new Rule(rule.getLiterals(),NEGATIVE_CLASS));    }    if (rule.getComplexity() < minComplexity) {      border.addAll(rule.refine());    }  }  return result;}  }
class C{  public DefaultFileFilter(String extension,String description){  ext=extension.toLowerCase();  desc=description;}  }
class C{  public Tag(int ident,String readable){  this(ident,"",readable);}  }
class C{  public void testGetAnalyserService(){  System.out.println("getAnalyserService");  mockInitialisationCalls(true,null);  AuditCommandImpl instance=new TestAuditCommandImpl();  AnalyserService result=instance.getAnalyserService();  assertEquals(mockAnalyserService,result);  setVerifyMode();}  }
class C{  private void findTvEpisodesAsDisc(TvShow tvShow,File dir){  String parentDir=dir.getParent();  LOGGER.debug("parsing disc structure in " + dir.getPath() + " parent: "+ parentDir);  List<MediaFile> videoFiles=new ArrayList<>();  File firstVideoFile=null;  File[] content=dir.listFiles();  if (content == null) {    LOGGER.error("Whops. Cannot access directory: " + dir.getName());    return;  }synchronized (filesFound) {    filesFound.addAll(Arrays.asList(content));  }  for (  File file : content) {    if (file.isFile()) {      if (!Globals.settings.getVideoFileType().contains("." + FilenameUtils.getExtension(file.getName()).toLowerCase()) || file.getName().startsWith(skipFilesStartingWith)) {        continue;      }      videoFiles.add(new MediaFile(file));      if (firstVideoFile == null) {        firstVideoFile=file;      }    }  }  boolean isRoot=false;  if (firstVideoFile.getParentFile().equals(new File(tvShow.getPath()))) {    isRoot=true;  }  List<TvShowEpisode> episodes=tvShowList.getTvEpisodesByFile(tvShow,firstVideoFile);  if (episodes.size() == 0) {    String relativePath=new File(tvShow.getPath()).toURI().relativize(firstVideoFile.toURI()).getPath();    EpisodeMatchingResult result=null;    if (isRoot) {      result=TvShowEpisodeAndSeasonParser.detectEpisodeFromFilenameAlternative(firstVideoFile.getPath(),tvShow.getTitle());    } else {      result=TvShowEpisodeAndSeasonParser.detectEpisodeFromFilenameAlternative(firstVideoFile.getParentFile().getPath(),tvShow.getTitle());    }    if (result.season == -1) {      result.season=TvShowEpisodeAndSeasonParser.detectSeason(relativePath);    }    if (result.episodes.size() == 0) {      if (isRoot) {        result=TvShowEpisodeAndSeasonParser.detectEpisodeFromDirectory(dir,tvShow.getPath());      } else {        result=TvShowEpisodeAndSeasonParser.detectEpisodeFromDirectory(dir.getParentFile(),tvShow.getPath());      }    }    List<TvShowEpisode> episodesInNfo=TvShowEpisode.parseNFO(firstVideoFile);    while (!isRoot && dir.getPath().toUpperCase().contains("BDMV") || dir.getPath().toUpperCase().contains("VIDEO_TS")) {      dir=dir.getParentFile();    }    if (result.episodes.size() > 0) {      for (      int ep : result.episodes) {        TvShowEpisode episode=null;        for (int i=episodesInNfo.size() - 1; i >= 0; i--) {          TvShowEpisode e=episodesInNfo.get(i);          if (e.getSeason() == result.season && e.getEpisode() == ep) {            episode=e;            episodesInNfo.remove(i);            break;          }        }        if (episode == null) {          episode=new TvShowEpisode();          episode.setDvdOrder(TvShowModuleManager.SETTINGS.isDvdOrder());          episode.setEpisode(ep);          episode.setSeason(result.season);          episode.setNewlyAdded(true);          episode.setFirstAired(result.date);        }        episode.setPath(dir.getPath());        episode.setTvShow(tvShow);        episode.setDisc(true);        episode.setNewlyAdded(true);        episode.addToMediaFiles(videoFiles);        episode.setDateAddedFromMediaFile(new MediaFile(firstVideoFile));        if (episode.getMediaSource() == MediaSource.UNKNOWN) {          episode.setMediaSource(MediaSource.parseMediaSource(firstVideoFile.getAbsolutePath()));        }        findAdditionalEpisodeFiles(episode,firstVideoFile,content);        episode.saveToDb();        tvShow.addEpisode(episode);      }    } else {      if (episodesInNfo.size() > 0) {        for (        TvShowEpisode e : episodesInNfo) {          e.setPath(dir.getPath());          e.setTvShow(tvShow);          e.addToMediaFiles(videoFiles);          e.setNewlyAdded(true);          e.setDateAddedFromMediaFile(new MediaFile(firstVideoFile));          if (e.getMediaSource() == MediaSource.UNKNOWN) {            e.setMediaSource(MediaSource.parseMediaSource(firstVideoFile.getAbsolutePath()));          }          findAdditionalEpisodeFiles(e,firstVideoFile,content);          e.saveToDb();          tvShow.addEpisode(e);        }      } else {        TvShowEpisode episode=new TvShowEpisode();        episode.setPath(dir.getPath());        episode.setDvdOrder(TvShowModuleManager.SETTINGS.isDvdOrder());        episode.setEpisode(-1);        episode.setSeason(-1);        episode.setTvShow(tvShow);        episode.setFirstAired(result.date);        episode.setDisc(true);        episode.setNewlyAdded(true);        episode.addToMediaFiles(videoFiles);        episode.setDateAddedFromMediaFile(new MediaFile(firstVideoFile));        if (episode.getMediaSource() == MediaSource.UNKNOWN) {          episode.setMediaSource(MediaSource.parseMediaSource(firstVideoFile.getAbsolutePath()));        }        findAdditionalEpisodeFiles(episode,firstVideoFile,content);        episode.saveToDb();        tvShow.addEpisode(episode);      }    }  } else {    for (    TvShowEpisode episode : episodes) {      if (findAdditionalEpisodeFiles(episode,firstVideoFile,content)) {        episode.saveToDb();      }    }  }}  }
class C{  public void applyComponentOrientation(ComponentOrientation o){  possiblyFixCursor(o.isLeftToRight());  super.applyComponentOrientation(o);}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  int rgb=s.readInt();  paint=rgb == -1 ? null : new Color(rgb);  alphaComposite=null;}  }
class C{  @Inject protected ChangeValueViewImpl(JavaRuntimeResources resources,JavaRuntimeLocalizationConstant locale){  this.locale=locale;  this.res=resources;  Widget widget=ourUiBinder.createAndBindUi(this);  this.setText(this.locale.changeValueViewTitle());  this.setWidget(widget);}  }
class C{  @SuppressWarnings("unchecked") public synchronized List<Vertex> findAllQuery(String jpql,int max){  try {    Query query=this.entityManager.createQuery(jpql);    setHints(query);    query.setMaxResults(max);    return query.getResultList();  } catch (  Exception badQuery) {    this.bot.log(this,badQuery);    return new ArrayList<Vertex>();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean isAutoStart(){  return autoStart;}  }
class C{  public GdbPrint print(String variable) throws IOException, InterruptedException, DebuggerException {  GdbOutput gdbOutput=sendCommand("print " + variable);  return GdbPrint.parse(gdbOutput);}  }
class C{  public boolean remove() throws IOException {  return getWrappedPath().remove();}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});  return null;}  }
class C{  public boolean containsValue(V val){  V[] values=_values;  if (null == val) {    for (int i=values.length; i-- > 0; ) {      if (TObjectHash.NULL == values[i]) {        return true;      }    }  } else {    for (int i=values.length; i-- > 0; ) {      V value=unwrapNull(values[i]);      if (isFull(values,i) && (val == value || val.equals(value))) {        return true;      }    }  }  return false;}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  public void addPreexistingResource(Resource resource){  resourceList.add(resource);}  }
class C{  private void index() throws IOException {  IndexWriter indexWriter=new IndexWriter(indexDir,new IndexWriterConfig(new WhitespaceAnalyzer()).setOpenMode(OpenMode.CREATE));  DirectoryTaxonomyWriter taxoWriter=new DirectoryTaxonomyWriter(taxoDir);  Document doc=new Document();  doc.add(new TextField("c","foo bar",Store.NO));  doc.add(new NumericDocValuesField("popularity",5L));  doc.add(new FacetField("A","B"));  indexWriter.addDocument(config.build(taxoWriter,doc));  doc=new Document();  doc.add(new TextField("c","foo foo bar",Store.NO));  doc.add(new NumericDocValuesField("popularity",3L));  doc.add(new FacetField("A","C"));  indexWriter.addDocument(config.build(taxoWriter,doc));  indexWriter.close();  taxoWriter.close();}  }
class C{  public int jump(int[] A){  int step=0;  int last=0;  int cur=0;  for (int i=0; i < A.length; i++) {    if (i > last) {      last=cur;      step++;      if (last >= A.length)       return step;    }    cur=Math.max(cur,i + A[i]);  }  return step;}  }
class C{  private void updateHeader(){  String sql="UPDATE C_Project p " + "SET (PlannedAmt,PlannedQty,PlannedMarginAmt," + "	CommittedAmt,CommittedQty,"+ " InvoicedAmt, InvoicedQty) = "+ "(SELECT COALESCE(SUM(pl.PlannedAmt),0),COALESCE(SUM(pl.PlannedQty),0),COALESCE(SUM(pl.PlannedMarginAmt),0),"+ " COALESCE(SUM(pl.CommittedAmt),0),COALESCE(SUM(pl.CommittedQty),0),"+ " COALESCE(SUM(pl.InvoicedAmt),0), COALESCE(SUM(pl.InvoicedQty),0) "+ "FROM C_ProjectLine pl "+ "WHERE pl.C_Project_ID=p.C_Project_ID AND pl.IsActive='Y') "+ "WHERE C_Project_ID="+ getC_Project_ID();  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 1)   log.log(Level.SEVERE,"updateHeader project - #" + no);  if (getC_ProjectPhase_ID() != 0) {    sql="UPDATE C_ProjectPhase x SET " + "	(PlannedAmt, CommittedAmt) = " + "(SELECT "+ "	COALESCE(SUM(l.PlannedAmt),0), "+ "	COALESCE(SUM(l.CommittedAmt),0) "+ "FROM C_ProjectLine l "+ "WHERE l.C_Project_ID=x.C_Project_ID "+ "  AND l.C_ProjectPhase_ID=x.C_ProjectPhase_ID "+ "  AND l.IsActive='Y') "+ "WHERE x.C_Project_ID=" + getC_Project_ID() + "  AND x.C_ProjectPhase_ID="+ getC_ProjectPhase_ID();    no=DB.executeUpdate(sql,get_TrxName());    if (no != 1)     log.log(Level.SEVERE,"updateHeader project phase - #" + no);  }  if (getC_ProjectTask_ID() != 0) {    sql="UPDATE C_ProjectTask x SET " + "	(PlannedAmt, CommittedAmt) = " + "(SELECT "+ "	COALESCE(SUM(l.PlannedAmt),0), "+ "	COALESCE(SUM(l.CommittedAmt),0) "+ "FROM C_ProjectLine l "+ "WHERE l.C_ProjectPhase_ID=x.C_ProjectPhase_ID "+ "  AND l.C_ProjectTask_ID=x.C_ProjectTask_ID "+ "  AND l.IsActive='Y') "+ "WHERE x.C_ProjectPhase_ID=" + getC_ProjectPhase_ID() + "  AND x.C_ProjectTask_ID="+ getC_ProjectTask_ID();    no=DB.executeUpdate(sql,get_TrxName());    if (no != 1)     log.log(Level.SEVERE,"updateHeader project task - #" + no);  }}  }
class C{  public ClientConfig withConnectionTimeout(int connectionTimeout){  setConnectionTimeout(connectionTimeout);  return this;}  }
class C{  public synchronized StringBuffer insert(int index,char[] chars,int start,int length){  insert0(index,chars,start,length);  return this;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_INTERFACE_METHOD_REF);  out.writeShort(_classIndex);  out.writeShort(_nameAndTypeIndex);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String sha256Hash(byte[] data,int length) throws NoSuchAlgorithmException {  MessageDigest messageDigest=MessageDigest.getInstance("SHA-256");  messageDigest.update(data,0,length);  return BaseEncoding.base16().encode(messageDigest.digest()).toLowerCase();}  }
class C{  public void test_encodeDecode_XSDBoolean(){  final IV<?,?>[] e={new XSDBooleanIV<BigdataLiteral>(true),new XSDBooleanIV<BigdataLiteral>(false)};  doEncodeDecodeTest(e);  doComparatorTest(e);}  }
class C{  public void put(URI uri,byte[] bimg,BufferedImage img){synchronized (bytemap) {    while (bytesize > 1000 * 1000 * 50) {      URI olduri=bytemapAccessQueue.removeFirst();      byte[] oldbimg=bytemap.remove(olduri);      bytesize-=oldbimg.length;      log("removed 1 img from byte cache");    }    bytemap.put(uri,bimg);    bytesize+=bimg.length;    bytemapAccessQueue.addLast(uri);  }  addToImageCache(uri,img);}  }
class C{  public void startRotate(float startAngle,float dAngle){  startRotate(startAngle,dAngle,DEFAULT_DURATION);}  }
class C{  protected Object clone(){  try {    AbstractHashedMap cloned=(AbstractHashedMap)super.clone();    cloned.data=new HashEntry[data.length];    cloned.entrySet=null;    cloned.keySet=null;    cloned.values=null;    cloned.modCount=0;    cloned.size=0;    cloned.init();    cloned.putAll(this);    return cloned;  } catch (  CloneNotSupportedException ex) {    return null;  }}  }
class C{  private static int calculateNumberOfRows(int m,int k,int c){  int r=((m + 1 + k) / c) + 1;  if (c * r >= (m + 1 + k+ c)) {    r--;  }  return r;}  }
class C{  public DBConnectionWrapper checkoutConnection(String dbname,int tgtInstance){synchronized (this) {    for (    DBConnectionWrapper conn : this.connections) {      if (dbname.equalsIgnoreCase(conn.getDb().getDbGroupName()) && conn.getInstance_number() == tgtInstance) {        conn.setInuse(true);        return conn;      }    }    return null;  }}  }
class C{  public static ModelIndex create(ModelEntity modelEntity,Element indexElement){  String name=indexElement.getAttribute("name").intern();  boolean unique="true".equals(indexElement.getAttribute("unique"));  String description=UtilXml.childElementValue(indexElement,"description");  List<Field> fields=Collections.emptyList();  List<? extends Element> elementList=UtilXml.childElementList(indexElement,"index-field");  if (!elementList.isEmpty()) {    fields=new ArrayList<Field>(elementList.size());    for (    Element indexFieldElement : elementList) {      String fieldName=indexFieldElement.getAttribute("name").intern();      String function=indexFieldElement.getAttribute("function").intern();      fields.add(new Field(fieldName,UtilValidate.isNotEmpty(function) ? Function.valueOf(function.toUpperCase()) : null));    }    fields=Collections.unmodifiableList(fields);  }  return new ModelIndex(modelEntity,description,name,fields,unique);}  }
class C{  public Response(ResponseCode code){  this.code=code;}  }
class C{  private static List<Challenge> parseChallenges(RawHeaders responseHeaders,String challengeHeader){  List<Challenge> result=new ArrayList<Challenge>();  for (int h=0; h < responseHeaders.length(); h++) {    if (!challengeHeader.equalsIgnoreCase(responseHeaders.getFieldName(h))) {      continue;    }    String value=responseHeaders.getValue(h);    int pos=0;    while (pos < value.length()) {      int tokenStart=pos;      pos=HeaderParser.skipUntil(value,pos," ");      String scheme=value.substring(tokenStart,pos).trim();      pos=HeaderParser.skipWhitespace(value,pos);      if (!value.regionMatches(true,pos,"realm=\"",0,"realm=\"".length())) {        break;      }      pos+="realm=\"".length();      int realmStart=pos;      pos=HeaderParser.skipUntil(value,pos,"\"");      String realm=value.substring(realmStart,pos);      pos++;      pos=HeaderParser.skipUntil(value,pos,",");      pos++;      pos=HeaderParser.skipWhitespace(value,pos);      result.add(new Challenge(scheme,realm));    }  }  return result;}  }
class C{  private SelectionHandle(final PNodeLocator locator,final float extendFactor){  super(locator);  reset();  setPickable(false);  PNode parentNode=locator.getNode();  parentNode.addChild(this);  setPaint(null);  setStrokePaint(selectionColor);  updateBounds(extendFactor);  relocateHandle();}  }
class C{  public static String generateChatResourceList(Set<ContactId> participants){  StringBuilder resources=new StringBuilder("<?xml version=\"1.0\" encoding=\"").append(UTF8_STR).append("\"?>").append(CRLF).append("<resource-lists xmlns=\"urn:ietf:params:xml:ns:resource-lists\" ").append("xmlns:cp=\"urn:ietf:params:xml:ns:copycontrol\">").append("<list>").append(CRLF);  for (  ContactId contact : participants) {    resources.append(" <entry uri=\"").append(PhoneUtils.formatContactIdToUri(contact)).append("\" cp:copyControl=\"to\"/>").append(CRLF);  }  return resources.append("</list></resource-lists>").toString();}  }
class C{  public void addZoomListener(ZoomListener listener){}  }
class C{  public void reset(){}  }
class C{  public static HostAddresses parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new HostAddresses(subDer);  }}  }
class C{  public void testBasics() throws IOException {  Analyzer a=new ItalianAnalyzer();  checkOneTerm(a,"abbandonata","abbandonat");  checkOneTerm(a,"abbandonati","abbandonat");  assertAnalyzesTo(a,"dallo",new String[]{});  a.close();}  }
class C{  private void beginCompoundChange(ISourceViewer viewer){  if (viewer instanceof ITextViewerExtension)   ((ITextViewerExtension)viewer).getRewriteTarget().beginCompoundChange();}  }
class C{  @Override public void keyPressed(GlobalKeyEvent event){}  }
class C{  public int size(){  return size;}  }
class C{  public String subtype(){  return subtype;}  }
class C{  public Object clone(){  GPTree newtree=lightClone();  newtree.child=(GPNode)(child.cloneReplacing());  newtree.child.parent=newtree;  newtree.child.argposition=0;  return newtree;}  }
class C{  public boolean isNewChildAllowed(CnATreeElement cte){  return cte instanceof BSIModel || cte instanceof ISO27KModel || isWriteAllowed(cte);}  }
class C{  public HessianSkeleton(Object service,Class<?> apiClass){  super(apiClass);  if (service == null)   service=this;  _service=service;  if (!apiClass.isAssignableFrom(service.getClass()))   throw new IllegalArgumentException("Service " + service + " must be an instance of "+ apiClass.getName());}  }
class C{  PostfixExpression(AST ast){  super(ast);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:44.807 -0500",hash_original_method="AD9B978BF103416C8AF045B7D5E010A1",hash_generated_method="FA79E3433392288203339D438AD103C4") public char[] toChars(char[] existingArray,int[] outLen){  byte[] sig=mSignature;  final int N=sig.length;  final int N2=N * 2;  char[] text=existingArray == null || N2 > existingArray.length ? new char[N2] : existingArray;  for (int j=0; j < N; j++) {    byte v=sig[j];    int d=(v >> 4) & 0xf;    text[j * 2]=(char)(d >= 10 ? ('a' + d - 10) : ('0' + d));    d=v & 0xf;    text[j * 2 + 1]=(char)(d >= 10 ? ('a' + d - 10) : ('0' + d));  }  if (outLen != null)   outLen[0]=N;  return text;}  }
class C{  public JavaCompiler processAnnotations(List<JCCompilationUnit> roots,List<String> classnames){  if (shouldStop(CompileState.PROCESS)) {    if (unrecoverableError()) {      deferredDiagnosticHandler.reportDeferredDiagnostics();      log.popDiagnosticHandler(deferredDiagnosticHandler);      return this;    }  }  if (!processAnnotations) {    if (options.isSet(PROC,"only")) {      log.warning("proc.proc-only.requested.no.procs");      todo.clear();    }    if (!classnames.isEmpty()) {      log.error("proc.no.explicit.annotation.processing.requested",classnames);    }    Assert.checkNull(deferredDiagnosticHandler);    return this;  }  Assert.checkNonNull(deferredDiagnosticHandler);  try {    List<ClassSymbol> classSymbols=List.nil();    List<PackageSymbol> pckSymbols=List.nil();    if (!classnames.isEmpty()) {      if (!explicitAnnotationProcessingRequested()) {        log.error("proc.no.explicit.annotation.processing.requested",classnames);        deferredDiagnosticHandler.reportDeferredDiagnostics();        log.popDiagnosticHandler(deferredDiagnosticHandler);        return this;      } else {        boolean errors=false;        for (        String nameStr : classnames) {          Symbol sym=resolveBinaryNameOrIdent(nameStr);          if (sym == null || (sym.kind == Kinds.PCK && !processPcks) || sym.kind == Kinds.ABSENT_TYP) {            log.error("proc.cant.find.class",nameStr);            errors=true;            continue;          }          try {            if (sym.kind == Kinds.PCK)             sym.complete();            if (sym.exists()) {              if (sym.kind == Kinds.PCK)               pckSymbols=pckSymbols.prepend((PackageSymbol)sym); else               classSymbols=classSymbols.prepend((ClassSymbol)sym);              continue;            }            Assert.check(sym.kind == Kinds.PCK);            log.warning("proc.package.does.not.exist",nameStr);            pckSymbols=pckSymbols.prepend((PackageSymbol)sym);          } catch (          CompletionFailure e) {            log.error("proc.cant.find.class",nameStr);            errors=true;            continue;          }        }        if (errors) {          deferredDiagnosticHandler.reportDeferredDiagnostics();          log.popDiagnosticHandler(deferredDiagnosticHandler);          return this;        }      }    }    try {      JavaCompiler c=procEnvImpl.doProcessing(context,roots,classSymbols,pckSymbols,deferredDiagnosticHandler);      if (c != this)       annotationProcessingOccurred=c.annotationProcessingOccurred=true;      return c;    }  finally {      procEnvImpl.close();    }  } catch (  CompletionFailure ex) {    log.error("cant.access",ex.sym,ex.getDetailValue());    deferredDiagnosticHandler.reportDeferredDiagnostics();    log.popDiagnosticHandler(deferredDiagnosticHandler);    return this;  }}  }
class C{  public static Map<String,Object> createDataResourceAndText(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  Map<String,Object> result=FastMap.newInstance();  Map<String,Object> thisResult=createDataResourceMethod(dctx,context);  if (thisResult.get(ModelService.RESPONSE_MESSAGE) != null) {    return ServiceUtil.returnError((String)thisResult.get(ModelService.ERROR_MESSAGE));  }  result.put("dataResourceId",thisResult.get("dataResourceId"));  context.put("dataResourceId",thisResult.get("dataResourceId"));  String dataResourceTypeId=(String)context.get("dataResourceTypeId");  if (dataResourceTypeId != null && dataResourceTypeId.equals("ELECTRONIC_TEXT")) {    thisResult=createElectronicText(dctx,context);    if (thisResult.get(ModelService.RESPONSE_MESSAGE) != null) {      return ServiceUtil.returnError((String)thisResult.get(ModelService.ERROR_MESSAGE));    }  }  return result;}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public boolean isValid(INode state){  OnePuzzle op=(OnePuzzle)state;  return op.s <= OnePuzzle.MAX_VALUE;}  }
class C{  public void addObjectInitializerStatements(Statement statements){  getObjectInitializerStatements().add(statements);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.566 -0500",hash_original_method="AD9CBD08D1B6621762343776ED03C203",hash_generated_method="7A6A239677F491BDCBE9E262C9CB9B12") public boolean decodeTextString(int startIndex){  int index=startIndex;  while (wspData[index] != 0) {    index++;  }  dataLength=index - startIndex + 1;  if (wspData[startIndex] == 127) {    stringValue=new String(wspData,startIndex + 1,dataLength - 2);  } else {    stringValue=new String(wspData,startIndex,dataLength - 1);  }  return true;}  }
class C{  @Override public void onWrite(EndpointServiceRequest<WriteRequest,WriteResponse> req) throws ServiceFaultException {  WriteRequest request=req.getRequest();  WriteValue[] nodesToWrite=request.getNodesToWrite();  StatusCode[] results=null;  StatusCode serviceResultCode=null;  if (nodesToWrite != null) {    serviceResultCode=StatusCode.GOOD;    results=new StatusCode[nodesToWrite.length];    for (int i=0; i < nodesToWrite.length; i++) {      Map<UnsignedInteger,DataValue> attributeMap=onReadResultsMap.get(nodesToWrite[i].getNodeId());      if (attributeMap != null) {        if (attributeMap.containsKey(nodesToWrite[i].getAttributeId())) {          if (new UnsignedInteger(13).equals(nodesToWrite[i].getAttributeId())) {            NodeId datatype=(NodeId)attributeMap.get(Attributes.DataType).getValue().getValue();            if (datatype == null) {              results[i]=new StatusCode(StatusCodes.Bad_TypeMismatch);            } else {              Class<?> targetDataType=datatypeMap.get(datatype);              if (targetDataType == null) {                results[i]=new StatusCode(StatusCodes.Bad_TypeMismatch);              } else {                if (targetDataType.isAssignableFrom(nodesToWrite[i].getValue().getValue().getValue().getClass())) {                  attributeMap.get(nodesToWrite[i].getAttributeId()).setValue(nodesToWrite[i].getValue().getValue());                  results[i]=StatusCode.GOOD;                } else {                  results[i]=new StatusCode(StatusCodes.Bad_TypeMismatch);                }              }            }          } else {            attributeMap.get(nodesToWrite[i].getAttributeId()).setValue(nodesToWrite[i].getValue().getValue());          }        } else {          results[i]=new StatusCode(StatusCodes.Bad_AttributeIdInvalid);        }      } else {        results[i]=new StatusCode(StatusCodes.Bad_NodeIdInvalid);      }    }  } else {    serviceResultCode=new StatusCode(StatusCodes.Bad_NothingToDo);  }  WriteResponse response=new WriteResponse(null,results,null);  ResponseHeader h=new ResponseHeader(DateTime.currentTime(),request.getRequestHeader().getRequestHandle(),serviceResultCode,null,null,null);  response.setResponseHeader(h);  req.sendResponse(response);}  }
class C{  public void transformPoints(float[] xValues,float[] yValues){  int n=xValues.length;  for (int i=0; i < n; i++) {    float x=xValues[i];    float y=yValues[i];    float denominator=a13 * x + a23 * y + a33;    xValues[i]=(a11 * x + a21 * y + a31) / denominator;    yValues[i]=(a12 * x + a22 * y + a32) / denominator;  }}  }
class C{  public static final double[] recombination(double p[],int L,LabelSet map[]){  double y[]=new double[L];  int i=Utils.maxIndex(p);  LabelSet y_meta=map[i];  for (  int j : y_meta.indices) {    y[j]=1.0;  }  return y;}  }
class C{  public void print(boolean x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).print(x);  flush();}  }
class C{  public static NSObject parse(File f) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {  FileInputStream fis=new FileInputStream(f);  int type=determineType(fis);  fis.close();switch (type) {case TYPE_BINARY:    return BinaryPropertyListParser.parse(f);case TYPE_XML:  return XMLPropertyListParser.parse(f);case TYPE_ASCII:return ASCIIPropertyListParser.parse(f);default :throw new PropertyListFormatException("The given file is not a property list of a supported format.");}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public synchronized byte[] consumeRecordingAndTruncate(){  int len=getConsumedLength();  byte[] bytes=getCurrentRecording(len);  setRecordedLength(0);  setConsumedLength(0);  return bytes;}  }
class C{  public void traverse(TagNodeVisitor visitor){  traverseInternally(visitor);}  }
class C{  public String preview(){  String shortname=resource.getShortname();  try {    File emlFile=dataDir.resourceEmlFile(shortname);    LOG.debug("Loading EML from file: " + emlFile.getAbsolutePath());    InputStream in=new FileInputStream(emlFile);    eml=EmlFactory.build(in);  } catch (  FileNotFoundException e) {    LOG.error("EML file version #" + getStringVersion() + " for resource "+ shortname+ " not found");    return NOT_FOUND;  }catch (  IOException e) {    String msg=getText("portal.resource.eml.error.load",new String[]{getStringVersion(),shortname});    LOG.error(msg);    addActionError(msg);    return ERROR;  }catch (  SAXException e) {    String msg=getText("portal.resource.eml.error.parse",new String[]{getStringVersion(),shortname});    LOG.error(msg);    addActionError(msg);    return ERROR;  }catch (  ParserConfigurationException e) {    String msg=getText("portal.resource.eml.error.parse",new String[]{getStringVersion(),shortname});    LOG.error(msg);    addActionError(msg);    return ERROR;  }  BigDecimal nextVersion=resource.getNextVersion();  resource=generatePreviewResource(resource,eml,nextVersion);  finishLoadingDetail(resource,eml,nextVersion);  setPreview(true);  return SUCCESS;}  }
class C{  public void close(){  shuttingDown=true;  int pendingCount=pendingReceiveTransfers.values().size() + pendingSendPassiveTransfers.values().size();  if (pendingCount > 0) {    log.info("Terminating {} DCC transfers waiting to be accepted",pendingCount);    for (    CountDownLatch curCountdown : pendingReceiveTransfers.values())     curCountdown.countDown();    for (    CountDownLatch curCountdown : pendingSendPassiveTransfers.values())     curCountdown.countDown();  }}  }
class C{  public void testNewProperty() throws Exception {  checkMembers("method_depends_on_new_property(self)");  Assert.assertThat("Method on new property dependency failed",getErrorMemberNames(),Matchers.containsInAnyOrder("new_property","new_property_2"));}  }
class C{  public BiclusterModel(int[] colIDs){  this.colIDs=colIDs;}  }
class C{  public static void writeMlResultToFile(MultilabelResult result,File file) throws FileNotFoundException, IOException {  ObjectOutputStream stream=new ObjectOutputStream(new FileOutputStream(file));  stream.writeObject(result);  stream.close();}  }
class C{  public static void loadExcludesResource(String resourceName) throws IOException {  excludes.clear();  excludes.putAll(loadPropertiesFromResource(resourceName));}  }
class C{  public S1Angle lat(){  return S1Angle.radians(latRadians);}  }
class C{  public String toString(){  final StringBuilder sb=new StringBuilder();  sb.append("addrMetadata=" + addrMetadata);  sb.append(", name=" + (name == null ? "N/A" : name));  sb.append(", indexType=" + indexType);  sb.append(", indexUUID=" + indexUUID);  if (initialDataServiceUUID != null) {    sb.append(", initialDataServiceUUID=" + initialDataServiceUUID);  }  sb.append(", branchingFactor=" + branchingFactor);  sb.append(", pmd=" + pmd);  sb.append(", btreeClassName=" + btreeClassName);  sb.append(", checkpointClass=" + checkpointClassName);  sb.append(", nodeKeysCoder=" + nodeKeysCoder);  sb.append(", btreeRecordCompressorFactory=" + (btreeRecordCompressorFactory == null ? "N/A" : btreeRecordCompressorFactory));  sb.append(", tupleSerializer=" + tupleSer);  sb.append(", conflictResolver=" + (conflictResolver == null ? "N/A" : conflictResolver.getClass().getName()));  sb.append(", deleteMarkers=" + deleteMarkers);  sb.append(", versionTimestamps=" + versionTimestamps);  sb.append(", versionTimestampFilters=" + versionTimestampFilters);  sb.append(", isolatable=" + isIsolatable());  sb.append(", rawRecords=" + rawRecords);  sb.append(", maxRecLen=" + maxRecLen);  sb.append(", bloomFilterFactory=" + (bloomFilterFactory == null ? "N/A" : bloomFilterFactory.toString()));  sb.append(", overflowHandler=" + (overflowHandler == null ? "N/A" : overflowHandler.getClass().getName()));  sb.append(", splitHandler=" + (splitHandler2 == null ? "N/A" : splitHandler2.toString()));  sb.append(", indexSegmentBranchingFactor=" + indexSegmentBranchingFactor);  sb.append(", indexSegmentBufferNodes=" + indexSegmentBufferNodes);  sb.append(", indexSegmentRecordCompressorFactory=" + (indexSegmentRecordCompressorFactory == null ? "N/A" : indexSegmentRecordCompressorFactory));  sb.append(", asynchronousIndexWriteConfiguration=" + asynchronousIndexWriteConfiguration);  sb.append(", scatterSplitConfiguration=" + scatterSplitConfiguration);  toString(sb);  return sb.toString();}  }
class C{  @Override public void afterActivation(ServiceReference<ServiceType> activated) throws Exception {}  }
class C{  public SendableLocationMessage.SendableLocationMessageBuilder replyTo(long replyTo){  this.replyTo=replyTo;  return this;}  }
class C{  public static cuComplex cuConj(cuComplex x){  return cuCmplx(cuCreal(x),-cuCimag(x));}  }
class C{  public final void characters(char chars[],int start,int length) throws org.xml.sax.SAXException {  if (m_elemContext.m_isRaw) {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      }      m_ispreserve=true;      writeNormalizedChars(chars,start,length,false,m_lineSepUse);      if (m_tracer != null)       super.fireCharEvent(chars,start,length);      return;    } catch (    IOException ioe) {      throw new org.xml.sax.SAXException(Utils.messages.createMessage(MsgKey.ER_OIERROR,null),ioe);    }  } else {    super.characters(chars,start,length);  }}  }
class C{  private void reFreshTab(){  try {    this.clearStatusBarMessage();    Tradestrategy tradestrategy=null;    TradestrategyOrders tradestrategyOrders=null;    ChartPanel currentTab=(ChartPanel)m_jTabbedPaneContract.getSelectedComponent();    if (null == currentTab) {      m_tradeOrderModel.setData(new Tradestrategy());      closeAllPositionsButton.setTransferObject(new Tradestrategy());    } else {      tradestrategy=m_tradePersistentModel.findTradestrategyById(currentTab.getTradestrategy());      tradestrategyOrders=m_tradePersistentModel.findPositionOrdersByTradestrategyId(currentTab.getTradestrategy().getIdTradeStrategy());      currentTab.setTradestrategy(tradestrategy);      m_tradeOrderModel.setData(tradestrategy);      RowSorter<?> rsDetail=m_tradeOrderTable.getRowSorter();      rsDetail.setSortKeys(null);      periodEditorComboBox.setItem(BarSize.newInstance(tradestrategy.getBarSize()));      closeAllPositionsButton.setTransferObject(tradestrategy);    }    setStrategyLabel(tradestrategy);    enableChartButtons(tradestrategy);    double netValue=0;    String openQuantity="";    double commision=0;    double unRealizedPL=0;    double realizedPL=0;    String symbol="";    String side="";    String tier="";    String status="";    String portfolio="";    String risk="";    if (null != tradestrategy) {      symbol=tradestrategy.getContract().getSymbol();      side=(tradestrategy.getSide() == null ? "" : Side.newInstance(tradestrategy.getSide()).getDisplayName());      tier=(tradestrategy.getTier() == null ? "" : Tier.newInstance(tradestrategy.getTier()).getDisplayName());      status=(tradestrategy.getStatus() == null ? "" : TradestrategyStatus.newInstance(tradestrategy.getStatus()).getDisplayName());      portfolio=tradestrategy.getPortfolio().getName();      risk=currencyFormater.format((tradestrategy.getRiskAmount() == null ? 0 : tradestrategy.getRiskAmount().doubleValue()));      TradeOrder prevTradeOrder=null;      Integer prevIdTradePosition=null;      for (      TradeOrder order : tradestrategyOrders.getTradeOrders()) {        if (order.getIsFilled()) {          Integer quantity=order.getFilledQuantity();          if (null == prevIdTradePosition || prevIdTradePosition != order.getTradePosition().getIdTradePosition()) {            prevIdTradePosition=order.getTradePosition().getIdTradePosition();          }          if (null != prevTradeOrder) {            if (prevTradeOrder.getIsFilled() && prevTradeOrder.getFilledDate().equals(order.getFilledDate()) && prevTradeOrder.getAverageFilledPrice().equals(order.getAverageFilledPrice())) {              quantity=quantity + prevTradeOrder.getFilledQuantity();            }          }          currentTab.getCandlestickChart().addBuySellTradeArrow(order.getAction(),new Money(order.getAverageFilledPrice()),order.getFilledDate(),quantity);        }        prevTradeOrder=order;      }      if (null != prevIdTradePosition) {        TradePosition tradePosition=m_tradePersistentModel.findTradePositionById(prevIdTradePosition);        unRealizedPL=tradePosition.getUnRealizedProfit(tradestrategy.getStrategyData().getBaseCandleSeries().getContract().getLastPrice()).doubleValue();        realizedPL=tradePosition.getRealizedProfit().doubleValue();        netValue=tradePosition.getTotalNetValue().doubleValue();        openQuantity=String.valueOf(Math.abs(tradePosition.getOpenQuantity()));        commision=tradePosition.getTotalCommission().doubleValue();      }    }    netValue=netValue - commision;    m_tradeLabel.setText(null);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),"Symbol:",false,bold);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padRight(symbol,10),false,null);    CoreUtils.setDocumentText(m_tradeLabel.getDocument()," Side:",false,bold);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padRight(side,6),false,null);    CoreUtils.setDocumentText(m_tradeLabel.getDocument()," Tier:",false,bold);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padRight(tier,6),false,null);    CoreUtils.setDocumentText(m_tradeLabel.getDocument()," Status:",false,bold);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padRight(status,20),false,null);    CoreUtils.setDocumentText(m_tradeLabel.getDocument()," Portfolio:",false,bold);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padRight(portfolio,15),false,null);    CoreUtils.setDocumentText(m_tradeLabel.getDocument()," Risk:",false,bold);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(risk,10),false,null);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),"\n",false,null);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),"Net Total:",false,bold);    if (netValue < 0) {      CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(netValue),10),false,colorRedAttr);    } else     if (netValue > 0) {      CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(netValue),10),false,colorGreenAttr);    } else {      CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(netValue),10),false,null);    }    CoreUtils.setDocumentText(m_tradeLabel.getDocument()," Realized P/L:",false,bold);    if (realizedPL < 0) {      CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(realizedPL),10),false,colorRedAttr);    } else     if (realizedPL > 0) {      CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(realizedPL),10),false,colorGreenAttr);    } else {      CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(realizedPL),10),false,null);    }    CoreUtils.setDocumentText(m_tradeLabel.getDocument()," UnRealized P/L:",false,bold);    if (unRealizedPL < 0) {      CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(unRealizedPL),10),false,colorRedAttr);    } else     if (unRealizedPL > 0) {      CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(unRealizedPL),10),false,colorGreenAttr);    } else {      CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(unRealizedPL),10),false,null);    }    CoreUtils.setDocumentText(m_tradeLabel.getDocument()," Open Qty:",false,bold);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(openQuantity,10),false,null);    CoreUtils.setDocumentText(m_tradeLabel.getDocument()," Comms:",false,bold);    CoreUtils.setDocumentText(m_tradeLabel.getDocument(),CoreUtils.padLeft(currencyFormater.format(commision),10),false,null);  } catch (  Exception ex) {    this.setErrorMessage("Error refreshing Tab.",ex.getMessage(),ex);  }}  }
class C{  public String toChars(int[] indices){  StringBuilder s=new StringBuilder(indices.length);  for (int i=0; i < indices.length; i++)   s.append(toChar(indices[i]));  return s.toString();}  }
class C{  public Relation findRelation(AppContext ctx,RelationPK relationPk) throws ScopeException {  if (relationPk.getCustomerId() == null) {    relationPk.setCustomerId(ctx.getCustomerId());  }  ProjectDynamicContent domains=getProjectContent(ctx,relationPk.getParent(),true);  Relation rel=domains.get(relationPk);  if (rel != null) {    checkRole(ctx,rel);    return cloneWithRole(ctx,rel);  }  return null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:13.030 -0500",hash_original_method="F9A92C9D3CD4AD3DBA18C1A12C406B85",hash_generated_method="F9A92C9D3CD4AD3DBA18C1A12C406B85") TransitionDrawable(){  this(new TransitionState(null,null,null),(Resources)null);}  }
class C{  void reorderPressed(ActionEvent e){  if (checkEditConditional()) {    return;  }  _showReminder=true;  _nextInOrder=0;  _inReorderMode=true;  status.setText(rbx.getString("ReorderMessage"));  conditionalTableModel.fireTableDataChanged();}  }
class C{  private boolean isTagStartOrEnd() throws IOException {  return startsWith("</") || startsWith("<!") || startsWith("<?")|| ((startsWith("<") && isIdentifierStartChar(_pos + 1)));}  }
class C{  private void renderSelectedBody(GL2 gl,SandboxBody body){  double scale=this.simulation.getCamera().getScale();  if (Preferences.isBodyAABBEnabled()) {    this.renderAABB(gl,body);  }  RenderUtilities.pushTransform(gl);  RenderUtilities.applyTransform(gl,body.getTransform());  if (body.getFixtureCount() > 1) {    if (Preferences.isBodyStenciled()) {      RenderUtilities.outlineShapes(gl,body,6,Preferences.getSelectedColor(),scale);      body.setFillColor(gl);      body.fill(gl);    } else {      RenderUtilities.outlineShapes(gl,body,4,Preferences.getSelectedColor(),scale);      body.render(gl);    }  } else {    RenderUtilities.outlineShapes(gl,body,4,Preferences.getSelectedColor(),scale);    body.render(gl);  }  if (Preferences.isBodyNormalEnabled()) {    body.renderNormals(gl);  }  if (Preferences.isBodyRotationDiscEnabled()) {    body.renderRotationDisc(gl);  }  if (Preferences.isBodyCenterEnabled()) {    body.renderCenter(gl);  }  RenderUtilities.popTransform(gl);  if (Preferences.isBodyVelocityEnabled()) {    body.renderVelocity(gl);  }}  }
class C{  private LirsEntry stackTop(){  LirsEntry top=header.nextInStack;  return (top == header) ? null : top;}  }
class C{  public void testGetSingleSecurityConstraint() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <security-constraint>"+ "    <web-resource-collection>"+ "      <web-resource-name>wr1</web-resource-name>"+ "      <url-pattern>/url1</url-pattern>"+ "    </web-resource-collection>"+ "  </security-constraint>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertTrue(WebXmlUtils.hasSecurityConstraint(webXml,"/url1"));  Element securityConstraintElement=WebXmlUtils.getSecurityConstraint(webXml,"/url1");  assertNotNull(securityConstraintElement);}  }
class C{  private double calculateContrast(Relation<? extends NumberVector> relation,DBIDs subset,ArrayDBIDs subspaceIndex1,ArrayDBIDs subspaceIndex2,int dim1,int dim2,Random random){  final double alpha1=Math.sqrt(alpha);  final int windowsize=(int)(relation.size() * alpha1);  double deviationSum=0.0;  for (int i=0; i < m; i++) {    final int cdim1;    ArrayDBIDs cindex1, cindex2;    if (random.nextDouble() > .5) {      cdim1=dim1;      cindex1=subspaceIndex1;      cindex2=subspaceIndex2;    } else {      cdim1=dim2;      cindex1=subspaceIndex2;      cindex2=subspaceIndex1;    }    DBIDArrayIter iter=cindex2.iter();    HashSetModifiableDBIDs conditionalSample=DBIDUtil.newHashSet();    iter.seek(random.nextInt(subset.size() - windowsize));    for (int k=0; k < windowsize && iter.valid(); k++, iter.advance()) {      conditionalSample.add(iter);    }    double[] fullValues=new double[subset.size()];    double[] sampleValues=new double[conditionalSample.size()];{      int l=0, s=0;      for (DBIDIter id=cindex1.iter(); id.valid(); id.advance(), l++) {        final double val=relation.get(id).doubleValue(cdim1);        fullValues[l]=val;        if (conditionalSample.contains(id)) {          sampleValues[s]=val;          s++;        }      }      assert (s == conditionalSample.size());    }    double contrast=statTest.deviation(fullValues,sampleValues);    if (Double.isNaN(contrast)) {      i--;      continue;    }    deviationSum+=contrast;  }  return deviationSum / m;}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  public static void filledEllipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static PrintWriter newPrintWriter(Path self) throws IOException {  return new GroovyPrintWriter(newWriter(self));}  }
class C{  public static Vector<VideoCodec> extractVideoCodecsFromSdp(Vector<MediaDescription> medias){  Vector<VideoCodec> codecs=new Vector<>();  for (  MediaDescription media : medias) {    VideoCodec codec=createVideoCodecFromSdp(media);    if (codec != null) {      codecs.add(codec);    }  }  return codecs;}  }
class C{  public Boolean isOutgoingBlocked(){  return outgoingBlocked;}  }
class C{  public void put(int data){  if (mBuffer.capacity() < (mLength + 1)) {    expandBuffer(mLength + ADDITIONAL_BUFFER_SIZE);  }  mBuffer.put((byte)data);  ++mLength;}  }
class C{  public static void positionScreen(Window window,int position){  window.pack();  GraphicsConfiguration config=window.getGraphicsConfiguration();  Rectangle bounds=config.getBounds();  Dimension sSize=bounds.getSize();  Insets insets=Toolkit.getDefaultToolkit().getScreenInsets(config);  sSize.width-=(insets.left + insets.right);  sSize.height-=(insets.top + insets.bottom);  Dimension wSize=window.getSize();  if (wSize.height > sSize.height)   wSize.height=sSize.height;  if (wSize.width > sSize.width)   wSize.width=sSize.width;  window.setSize(wSize);  int x=(sSize.width - wSize.width) / 2;  int y=(sSize.height - wSize.height) / 2;  if (position == SwingConstants.CENTER)   ; else   if (position == SwingConstants.NORTH_WEST) {    x=0;    y=0;  } else   if (position == SwingConstants.NORTH) {    y=0;  } else   if (position == SwingConstants.NORTH_EAST) {    x=(sSize.width - wSize.width);    y=0;  } else   if (position == SwingConstants.WEST) {    x=0;  } else   if (position == SwingConstants.EAST) {    x=(sSize.width - wSize.width);  } else   if (position == SwingConstants.SOUTH) {    y=(sSize.height - wSize.height);  } else   if (position == SwingConstants.SOUTH_WEST) {    x=0;    y=(sSize.height - wSize.height);  } else   if (position == SwingConstants.SOUTH_EAST) {    x=(sSize.width - wSize.width);    y=(sSize.height - wSize.height);  }  window.setLocation(bounds.x + x + insets.left,bounds.y + y + insets.top);}  }
class C{  private static Vector TLCTranslate(AST ast) throws TLCTranslationException {  WriteAST(ast);  if (PcalParams.SpecOption || PcalParams.Spec2Option) {    try {      Vector parseFile=PcalResourceFileReader.ResourceFileToStringVector(PcalParams.SpecFile + ".tla");      WriteStringVectorToFile(parseFile,PcalParams.SpecFile + ".tla");      parseFile=PcalResourceFileReader.ResourceFileToStringVector(PcalParams.SpecFile + ".cfg");      WriteStringVectorToFile(parseFile,PcalParams.SpecFile + ".cfg");      PcalDebug.reportInfo("Wrote files " + PcalParams.SpecFile + ".tla and "+ PcalParams.SpecFile+ ".cfg.");    } catch (    UnrecoverableException e) {      throw new TLCTranslationException(e.getMessage());    }  }  ;  String javaInvocation;  if (PcalParams.SpecOption || PcalParams.MyspecOption) {    PcalDebug.reportInfo("Running TLC2.");    javaInvocation="java -Xss1m tlc2.TLC ";  } else {    PcalDebug.reportInfo("Running TLC2.");    javaInvocation="java -Xss1m tlc2.TLC ";  }  ;  String tlcOut="      ";  Runtime rt=Runtime.getRuntime();  try {    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(rt.exec(javaInvocation + PcalParams.SpecFile).getInputStream()));    while (tlcOut.indexOf("<<") == -1) {      tlcOut=bufferedReader.readLine();    }    ;    bufferedReader.close();  } catch (  Exception e) {    throw new TLCTranslationException("Error reading output of TLC");  }  ;  if (tlcOut.indexOf("@Error@") != -1) {    throw new TLCTranslationException("TLC's translation of the parsed algorithm failed with\n  Error: " + tlcOut.substring(tlcOut.indexOf("@Error@") + 7,tlcOut.indexOf("@EndError@")));  }  ;  tlcOut=tlcOut.substring(2,tlcOut.lastIndexOf(">>")) + "  ";  PcalDebug.reportInfo("Read TLC output.");  int i=0;  String transl="";  while (i < tlcOut.length()) {    if (tlcOut.charAt(i) == '"') {      i=i + 1;      if ((tlcOut.charAt(i) == '\\') && (tlcOut.charAt(i + 1) == '"')) {        if (tlcOut.charAt(i + 2) != '"') {          throw new TLCTranslationException("I'm confused");        }        ;        i=i + 3;        while (tlcOut.charAt(i) != '"') {          i=i + 1;        }        i=i + 1;        transl=transl + "\"";        while (tlcOut.charAt(i) != '"') {          if (tlcOut.charAt(i) == '\\') {            transl=transl + tlcOut.substring(i,i + 2);            i=i + 2;          } else {            transl=transl + tlcOut.substring(i,i + 1);            i=i + 1;          }          ;        }        ;        i=i + 8;        transl=transl + "\"";      } else {        while (tlcOut.charAt(i) != '"') {          if ((tlcOut.charAt(i) == '\\') && (tlcOut.charAt(i + 1) == '\\')) {            i=i + 1;          }          ;          transl=transl + tlcOut.substring(i,i + 1);          i=i + 1;        }        ;        i=i + 1;      }      ;    } else     if (tlcOut.charAt(i) == ',') {      i=i + 1;    } else {      if (tlcOut.charAt(i) != ' ') {        throw new TLCTranslationException("Expected space but found `" + tlcOut.charAt(i) + "'");      }      ;      transl=transl + tlcOut.substring(i,i + 1);      i=i + 1;    }    ;  }  ;  transl=WrapString(transl,78);  Vector result=new Vector();  result.addElement(transl);  return result;}  }
class C{  @Override public void onAllCategoriesStatisticsSelected(){  Intent intent=new Intent(getActivity().getApplicationContext(),StatisticsActivity.class);  intent.putExtra(ChallengeActivity.EXTRA_CATEGORY_ID,CategoryDataSource.CATEGORY_ID_ALL);  startActivity(intent);}  }
class C{  public static boolean validateSexTemplateReference(CFlags flags,String sexFlag,String pedigreeFlag,File template){  if (flags.isSet(sexFlag) || (pedigreeFlag != null && flags.isSet(pedigreeFlag))) {    if (!new File(template,ReferenceGenome.REFERENCE_FILE).isFile()) {      flags.error("Sex-specific processing was specified but " + template + " is missing a '"+ ReferenceGenome.REFERENCE_FILE+ "'");      return false;    }  }  return true;}  }
class C{  @SafeVarargs public final Bootique modules(Class<? extends Module>... moduleTypes){  Arrays.asList(moduleTypes).forEach(null);  return this;}  }
class C{  public static double intersectRayPlane(double originX,double originY,double originZ,double dirX,double dirY,double dirZ,double pointX,double pointY,double pointZ,double normalX,double normalY,double normalZ,double epsilon){  double denom=normalX * dirX + normalY * dirY + normalZ * dirZ;  if (denom < epsilon) {    double t=((pointX - originX) * normalX + (pointY - originY) * normalY + (pointZ - originZ) * normalZ) / denom;    if (t >= 0.0)     return t;  }  return -1.0;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  private static void initializeReleasePlatform(){  String platformProperty=readConfigProperty(PLATFORM_PROPERTIES,PLATFORM_PROPERTY_KEY);  if (platformProperty == null) {    logInfo("Release platform not defined.");  } else {    currentPlatform=Platform.valueOf(platformProperty.toUpperCase(Locale.UK));    logInfo("Release platform: " + currentPlatform);  }}  }
class C{  public String toString(){  return Double.toString(getValue());}  }
class C{  public boolean isLoop(){  return loop;}  }
class C{  protected Buffer checkErrorPacket() throws SQLException {  return checkErrorPacket(-1);}  }
class C{  public DateTime_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_parsedValue=jcas.getRequiredFeatureDE(casType,"parsedValue","uima.cas.Long",featOkTst);  casFeatCode_parsedValue=(null == casFeat_parsedValue) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_parsedValue).getCode();}  }
class C{  public byte[] toASN1(){  try {    byte[] privKeyBytes=getPrivKeyBytes();    ByteArrayOutputStream baos=new ByteArrayOutputStream(400);    DERSequenceGenerator seq=new DERSequenceGenerator(baos);    seq.addObject(new ASN1Integer(1));    seq.addObject(new DEROctetString(privKeyBytes));    seq.addObject(new DERTaggedObject(0,CURVE_PARAMS.toASN1Primitive()));    seq.addObject(new DERTaggedObject(1,new DERBitString(getPubKey())));    seq.close();    return baos.toByteArray();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected BusinessObjectFormatDdl generateBusinessObjectFormatDdlImpl(BusinessObjectFormatDdlRequest request,boolean skipRequestValidation){  if (!skipRequestValidation) {    validateBusinessObjectFormatDdlRequest(request);  }  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(new BusinessObjectFormatKey(request.getNamespace(),request.getBusinessObjectDefinitionName(),request.getBusinessObjectFormatUsage(),request.getBusinessObjectFormatFileType(),request.getBusinessObjectFormatVersion()));  BusinessObjectFormatKey businessObjectFormatKey=businessObjectFormatHelper.getBusinessObjectFormatKey(businessObjectFormatEntity);  Assert.notEmpty(businessObjectFormatEntity.getSchemaColumns(),String.format("Business object format with namespace \"%s\", business object definition name \"%s\", format usage \"%s\", format file type \"%s\"," + " and format version \"%s\" doesn't have schema information.",businessObjectFormatKey.getNamespace(),businessObjectFormatKey.getBusinessObjectDefinitionName(),businessObjectFormatKey.getBusinessObjectFormatUsage(),businessObjectFormatKey.getBusinessObjectFormatFileType(),businessObjectFormatKey.getBusinessObjectFormatVersion()));  CustomDdlEntity customDdlEntity=null;  if (StringUtils.isNotBlank(request.getCustomDdlName())) {    customDdlEntity=customDdlDaoHelper.getCustomDdlEntity(new CustomDdlKey(businessObjectFormatKey.getNamespace(),businessObjectFormatKey.getBusinessObjectDefinitionName(),businessObjectFormatKey.getBusinessObjectFormatUsage(),businessObjectFormatKey.getBusinessObjectFormatFileType(),businessObjectFormatKey.getBusinessObjectFormatVersion(),request.getCustomDdlName()));  }  BusinessObjectFormatDdl businessObjectFormatDdl=new BusinessObjectFormatDdl();  businessObjectFormatDdl.setNamespace(businessObjectFormatKey.getNamespace());  businessObjectFormatDdl.setBusinessObjectDefinitionName(businessObjectFormatKey.getBusinessObjectDefinitionName());  businessObjectFormatDdl.setBusinessObjectFormatUsage(businessObjectFormatKey.getBusinessObjectFormatUsage());  businessObjectFormatDdl.setBusinessObjectFormatFileType(businessObjectFormatKey.getBusinessObjectFormatFileType());  businessObjectFormatDdl.setBusinessObjectFormatVersion(businessObjectFormatKey.getBusinessObjectFormatVersion());  businessObjectFormatDdl.setOutputFormat(request.getOutputFormat());  businessObjectFormatDdl.setTableName(request.getTableName());  businessObjectFormatDdl.setCustomDdlName(customDdlEntity != null ? customDdlEntity.getCustomDdlName() : request.getCustomDdlName());  DdlGenerator ddlGenerator=ddlGeneratorFactory.getDdlGenerator(request.getOutputFormat());  String ddl;  if (Boolean.TRUE.equals(request.isReplaceColumns())) {    ddl=ddlGenerator.generateReplaceColumnsStatement(request,businessObjectFormatEntity);  } else {    ddl=ddlGenerator.generateCreateTableDdl(request,businessObjectFormatEntity,customDdlEntity);  }  businessObjectFormatDdl.setDdl(ddl);  return businessObjectFormatDdl;}  }
class C{  private boolean applyFailedShard(RoutingAllocation allocation,ShardRouting failedShard,boolean addToIgnoreList,UnassignedInfo unassignedInfo){  IndexRoutingTable indexRoutingTable=allocation.routingTable().index(failedShard.index());  if (indexRoutingTable == null) {    logger.debug("{} ignoring shard failure, unknown index in {} ({})",failedShard.shardId(),failedShard,unassignedInfo.shortSummary());    return false;  }  RoutingNodes routingNodes=allocation.routingNodes();  RoutingNodes.RoutingNodeIterator matchedNode=routingNodes.routingNodeIter(failedShard.currentNodeId());  if (matchedNode == null) {    logger.debug("{} ignoring shard failure, unknown node in {} ({})",failedShard.shardId(),failedShard,unassignedInfo.shortSummary());    return false;  }  boolean matchedShard=false;  while (matchedNode.hasNext()) {    ShardRouting routing=matchedNode.next();    if (routing.isSameAllocation(failedShard)) {      matchedShard=true;      logger.debug("{} failed shard {} found in routingNodes, failing it ({})",failedShard.shardId(),failedShard,unassignedInfo.shortSummary());      break;    }  }  if (matchedShard == false) {    logger.debug("{} ignoring shard failure, unknown allocation id in {} ({})",failedShard.shardId(),failedShard,unassignedInfo.shortSummary());    return false;  }  failedShard=new ShardRouting(matchedNode.current());  matchedNode.remove();  if (addToIgnoreList) {    allocation.addIgnoreShardForNode(failedShard.shardId(),failedShard.currentNodeId());  }  if (failedShard.relocatingNodeId() != null && failedShard.initializing()) {    logger.trace("{} is a relocation target, resolving source to cancel relocation ({})",failedShard,unassignedInfo.shortSummary());    RoutingNode relocatingFromNode=routingNodes.node(failedShard.relocatingNodeId());    if (relocatingFromNode != null) {      for (      ShardRouting shardRouting : relocatingFromNode) {        if (shardRouting.isRelocationSourceOf(failedShard)) {          logger.trace("{}, resolved source to [{}]. canceling relocation ... ({})",failedShard.shardId(),shardRouting,unassignedInfo.shortSummary());          routingNodes.cancelRelocation(shardRouting);          break;        }      }    }  } else {    if (failedShard.relocatingNodeId() != null) {      assert failedShard.initializing() == false;      assert failedShard.relocating();      RoutingNodes.RoutingNodeIterator initializingNode=routingNodes.routingNodeIter(failedShard.relocatingNodeId());      if (initializingNode != null) {        while (initializingNode.hasNext()) {          ShardRouting shardRouting=initializingNode.next();          if (shardRouting.isRelocationTargetOf(failedShard)) {            logger.trace("{} is removed due to the failure of the source shard",shardRouting);            initializingNode.remove();          }        }      }    }    matchedNode.moveToUnassigned(unassignedInfo);  }  assert matchedNode.isRemoved() : "failedShard " + failedShard + " was matched but wasn't removed";  return true;}  }
class C{  @Override public void visitInsn(int opcode){  if ((opcode == Opcodes.ARETURN) || (opcode == Opcodes.IRETURN) || (opcode == Opcodes.LRETURN)|| (opcode == Opcodes.FRETURN)|| (opcode == Opcodes.DRETURN)) {    throw new RuntimeException(new UnmodifiableClassException("Constructors are supposed to return void"));  }  if (opcode == Opcodes.RETURN) {    super.visitVarInsn(Opcodes.ALOAD,0);    super.visitMethodInsn(Opcodes.INVOKESTATIC,"com/google/monitoring/runtime/instrumentation/ConstructorInstrumenter","invokeSamplers","(Ljava/lang/Object;)V",false);  }  super.visitInsn(opcode);}  }
class C{  protected CustomToolBar createRunToolBar(){  CustomToolBar runTools=new CustomToolBar();  runTools.add(actionManager.getIterateNetworkAction());  runTools.add(new ToggleButton(actionManager.getNetworkControlActions()));  return runTools;}  }
class C{  private void saveChanges(MimeMessage message) throws MessagingException {  String messageId=message.getMessageID();  message.saveChanges();  if (messageId != null) {    message.setHeader(RFC2822Headers.MESSAGE_ID,messageId);  }}  }
class C{  public int checkProperties(){  int errorCount=0;  if (isEnabled()) {    Iterator<ParameterType> i=getParameters().getParameterTypes().iterator();    while (i.hasNext()) {      ParameterType type=i.next();      boolean optional=type.isOptional();      if (!optional) {        boolean parameterSet=getParameters().isSet(type.getKey());        if (type.getDefaultValue() == null && !parameterSet) {          addError(new SimpleProcessSetupError(Severity.ERROR,portOwner,Collections.singletonList(new ParameterSettingQuickFix(this,type.getKey())),"undefined_parameter",new Object[]{type.getKey().replace('_',' ')}));          errorCount++;        } else         if (type instanceof ParameterTypeAttribute && parameterSet) {          try {            if ("".equals(getParameter(type.getKey()))) {              addError(new SimpleProcessSetupError(Severity.ERROR,portOwner,Collections.singletonList(new ParameterSettingQuickFix(this,type.getKey())),"undefined_parameter",new Object[]{type.getKey().replace('_',' ')}));              errorCount++;            }          } catch (          UndefinedParameterError e) {          }        }      }      if (type instanceof ParameterTypeRepositoryLocation) {        String value=getParameters().getParameterOrNull(type.getKey());        if (value != null && !((ParameterTypeRepositoryLocation)type).isAllowAbsoluteEntries()) {          if (value.startsWith(RepositoryLocation.REPOSITORY_PREFIX)) {            if (!value.startsWith(RepositoryLocation.REPOSITORY_PREFIX + RepositoryManager.SAMPLE_REPOSITORY_NAME)) {              addError(new SimpleProcessSetupError(Severity.WARNING,portOwner,Collections.<QuickFix>emptyList(),"accessing_repository_by_name",new Object[]{type.getKey().replace('_',' '),value}));            }          } else           if (value.startsWith(String.valueOf(RepositoryLocation.SEPARATOR))) {            addError(new SimpleProcessSetupError(Severity.ERROR,portOwner,Collections.singletonList(new RelativizeRepositoryLocationQuickfix(this,type.getKey(),value)),"absolute_repository_location",new Object[]{type.getKey().replace('_',' '),value}));          }        }      } else       if (!optional && type instanceof ParameterTypeDate) {        String value=getParameters().getParameterOrNull(type.getKey());        if (value != null && !ParameterTypeDate.isValidDate(value)) {          addError(new SimpleProcessSetupError(Severity.WARNING,portOwner,"invalid_date_format",new Object[]{type.getKey().replace('_',' '),value}));        }      }    }  }  return errorCount;}  }
class C{  public void createPersons(int numberOfPersons,boolean initRoutes,Double initPlanScore){  this.numberOfPersons=numberOfPersons;  this.initRoutes=initRoutes;  this.initPlanScore=initPlanScore;  log.info("Create population ...");  createWestEastDemand();  createEastWestDemand();  if (TtCreateParallelNetworkAndLanes.checkNetworkForSecondODPair(this.network)) {    createNorthSouthDemand();    createSouthNorthDemand();  }}  }
class C{  private boolean saveStoredJPEGImage(String file_name,final BufferedImage image,final boolean file_name_is_path){  if (!file_name_is_path) {    file_name=temp_dir + key + file_name;  }  final String s=file_name.toLowerCase();  if (!s.endsWith(".jpg") && !s.endsWith(".jpeg")) {    file_name+=".jpg";  }  try {    DefaultImageHelper.write(image,"jpg",file_name);    tempFileNames.put(file_name,"#");  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " writing image "+ image+ " as "+ file_name);  }  return false;}  }
class C{  public void resumeTriggers(GroupMatcher<TriggerKey> matcher) throws SchedulerException {  sched.resumeTriggers(matcher);}  }
class C{  public synchronized void open(){  if (mOpened) {    return;  }  try {    int result=NativeH264Decoder.InitDecoder();    if (result != 0) {      mEventListener.onPlayerError();      return;    }    releasePort();    mRtpReceiver=new VideoRtpReceiver(mLocalRtpPort);    mRtpDummySender=new DummyPacketGenerator();    mRtpOutput=new MediaRtpOutput();    mRtpOutput.open();    mRtpReceiver.prepareSession(mRemoteHost,mRemotePort,mOrientationHeaderId,mRtpOutput,new H264VideoFormat(),this);    mRtpDummySender.prepareSession(mRemoteHost,mRemotePort,mRtpReceiver.getInputStream());    mRtpDummySender.startSession();  } catch (  RtpException e) {    mEventListener.onPlayerError();    return;  }  mOpened=true;  mEventListener.onPlayerOpened();}  }
class C{  public JSONObject append(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,new org.json.JSONArray().put(value));  } else   if (object instanceof org.json.JSONArray) {    this.put(key,((org.json.JSONArray)object).put(value));  } else {    throw new JSONException("JSONObject[" + key + "] is not a JSONArray.");  }  return this;}  }
class C{  public void loadArg(final int arg){  loadInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  @Deprecated public static void enableExceptionDetail(boolean enable){  proxyFactory.enableExceptionDetail(enable);}  }
class C{  public synchronized void remove(StatusHistoryEntry entry){  entries.remove(entry);}  }
class C{  public boolean isFunction(String name){  return isDefinedAs(name,LocalType.FUNCTION);}  }
class C{  public void grabFocus(){  m_TextSearch.grabFocus();}  }
class C{  private void pushState(Node<K>[] t,int i,int n){  TableStack<K> s=spare;  if (s != null)   spare=s.next; else   s=new TableStack<K>();  s.tab=t;  s.length=n;  s.index=i;  s.next=stack;  stack=s;}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!learningphase) {    return;  }  int num_classes=(int)(snumClasses);  int num_features=(int)(snumFeatures);  double[] data=new double[num_features];  double[] labels=new double[num_classes];  int numChanges=0;  int numCategories_1=numCategories - 1;  numinstances+=1;  if (!instance.classIsMissing()) {    double suminputA=0;    double suminputB=0;    for (int j=0; j < num_features; j++) {      data[j]=instance.value(num_classes + j);      suminputA+=1;    }    for (int j=0; j < num_classes; j++) {      labels[j]=instance.value(j);      suminputB+=labels[j];    }    SortPair[] cateacti=ARTActivateCategories(data,labels);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    double matchB=0;    while (!resonance && currentSortedIndex < cateacti.length) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      if (currentCategory == numCategories_1) {        matchB=1;        matchA=1;      } else {        matchA=ART_Calculate_MatchA(data,weightsA[currentCategory],suminputA);        if (weightsB[currentCategory].sum() == 0) {          matchB=1;        } else {          matchB=ART_Calculate_MatchB(labels,weightsB[currentCategory],suminputB);        }      }      if (matchA >= roa && matchB >= rob) {        if (currentCategory == numCategories_1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            sweightsA[currentCategory]=0;            for (int j=0; j < snumFeatures; j++) {              weightsA[currentCategory].put(j,data[j]);              sweightsA[currentCategory]+=data[j];            }            for (int j=snumFeatures; j < numFeatures; j++) {              double da=data[j - snumFeatures];              weightsA[currentCategory].put(j,da);              sweightsA[currentCategory]+=1 - da;            }            for (int j=0; j < weightsB[currentCategory].size(); j++) {              weightsB[currentCategory].put(j,labels[j]);            }            String s=Arrays.toString(labels);            if (hmclasses.containsKey(s)) {              hmclasses.get(s).add(currentCategory);              hmclasses.put(s,hmclasses.get(s));            } else {              Vector v=new Vector();              v.add(currentCategory);              hmclasses.put(s,v);            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;            break;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;          break;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }    if (!resonance && currentSortedIndex >= cateacti.length) {      sweightsA[numCategories_1]=0;      for (int j=0; j < snumFeatures; j++) {        weightsA[numCategories_1].put(j,data[j]);        sweightsA[numCategories_1]+=data[j];      }      for (int j=snumFeatures; j < numFeatures; j++) {        double da=data[j - snumFeatures];        weightsA[numCategories_1].put(j,da);        sweightsA[numCategories_1]+=1 - da;      }      for (int j=0; j < weightsB[numCategories_1].size(); j++) {        weightsB[numCategories_1].put(j,labels[j]);      }      String s=Arrays.toString(labels);      if (hmclasses.containsKey(s)) {        hmclasses.get(s).add(numCategories_1);        hmclasses.put(s,hmclasses.get(s));      } else {        Vector v=new Vector();        v.add(numCategories_1);        hmclasses.put(s,v);      }      ARAMm_Add_New_Category();      numChanges=numChanges + 1;    }  }}  }
class C{  public static ReflectUtils on(String name,ClassLoader classLoader) throws ReflectException {  return on(forName(name,classLoader));}  }
class C{  public static String middle(String s){  return s.substring(1,s.length() - 1);}  }
class C{  public int size(){  int size=0;  for (  List<V> value : map.values()) {    size+=value.size();  }  return size;}  }
class C{  public float minScore(){  return minScore;}  }
class C{  @Override protected void checkArgs(BOp[] args){  for (  BOp a : args) {    if (a == null)     throw new IllegalArgumentException();  }}  }
class C{  @SuppressWarnings("unchecked") private <T>T serializeBackAndForth(Object original) throws SerializationException {  ByteBufferOutputStream byteBufferOutputStream=new ByteBufferOutputStream(byteBuffer);  Output output=new Output(byteBufferOutputStream);  serializer.serialize(original,output);  byteBuffer.flip();  ByteBufferInputStream byteBufferInputStream=new ByteBufferInputStream(byteBuffer);  Input input=new Input(byteBufferInputStream);  return (T)serializer.deserialize(input);}  }
class C{  private void recordTrustChangeIfAny(){  try {    coordConfigStoringHelper.createOrUpdateConfig(System.nanoTime(),DistributedKeyStoreImpl.TRUSTED_CERTIFICATES_LOCK,DistributedKeyStoreImpl.TRUSTED_CERTIFICATES_CONFIG_KIND,DistributedKeyStoreImpl.UPDATE_LOG,DistributedKeyStoreImpl.UPDATE_TIME);  } catch (  Exception e) {    throw SecurityException.fatals.failToNotifyChange(e);  }}  }
class C{  protected void validatePatch(State current,State patch){  checkState(current.taskInfo.stage.ordinal() < TaskState.TaskStage.FINISHED.ordinal(),"Invalid stage update. Can not patch anymore when in final stage %s",current.taskInfo.stage);  if (patch.taskInfo != null) {    checkState(patch.taskInfo.stage != null,"Invalid stage update. 'stage' can not be null in patch");    checkState(patch.taskInfo.stage.ordinal() >= current.taskInfo.stage.ordinal(),"Invalid stage update. Can not revert to %s from %s",patch.taskInfo.stage,current.taskInfo.stage);    if (patch.taskInfo.subStage != null && current.taskInfo.subStage != null) {      checkState(patch.taskInfo.subStage.ordinal() >= current.taskInfo.subStage.ordinal(),"Invalid stage update. 'subStage' cannot move back.");    }  }  checkArgument(patch.image == null,"image field cannot be updated in a patch");  checkArgument(patch.sourceImageDatastore == null,"sourceImageDatastore field cannot be updated in a patch");}  }
class C{  private boolean updateHeader(){  String sql="UPDATE C_Cash c" + " SET StatementDifference=" + "(SELECT COALESCE(SUM(currencyConvert(cl.Amount, cl.C_Currency_ID, cb.C_Currency_ID, c.DateAcct, 0, c.AD_Client_ID, c.AD_Org_ID)),0) "+ "FROM C_CashLine cl, C_CashBook cb "+ "WHERE cb.C_CashBook_ID=c.C_CashBook_ID"+ " AND cl.C_Cash_ID=c.C_Cash_ID"+ " AND cl.IsActive='Y'"+ ") "+ "WHERE C_Cash_ID="+ getC_Cash_ID();  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 1)   log.warning("Difference #" + no);  sql="UPDATE C_Cash" + " SET EndingBalance = BeginningBalance + StatementDifference " + "WHERE C_Cash_ID="+ getC_Cash_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 1)   log.warning("Balance #" + no);  return no == 1;}  }
class C{  public Observation(List intCps){  this.cps=new int[intCps.size()];  for (int i=0; i < intCps.size(); i++) {    Integer intCp=(Integer)intCps.get(i);    this.cps[i]=intCp.intValue();  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  MyXYBlockRenderer clone=(MyXYBlockRenderer)super.clone();  if (this.paintScale instanceof PublicCloneable) {    PublicCloneable pc=(PublicCloneable)this.paintScale;    clone.paintScale=(PaintScale)pc.clone();  }  return clone;}  }
class C{  private UserNotice(ASN1Sequence as){  if (as.size() == 2) {    noticeRef=NoticeReference.getInstance(as.getObjectAt(0));    explicitText=DisplayText.getInstance(as.getObjectAt(1));  } else   if (as.size() == 1) {    if (as.getObjectAt(0).toASN1Primitive() instanceof ASN1Sequence) {      noticeRef=NoticeReference.getInstance(as.getObjectAt(0));    } else {      explicitText=DisplayText.getInstance(as.getObjectAt(0));    }  } else {    throw new IllegalArgumentException("Bad sequence size: " + as.size());  }}  }
class C{  private void show(List<ConflictImportDTO> choices){  if (choices == null || choices.isEmpty()) {    return;  }  this.choices=choices;  page=0;  selected=new HashMap<>(choices.size());  String selection=choices.get(0).getTypeMatches().get(0);  selected.put(page,selection);  view.setSelectedImport(selection);  updateButtonsState();  view.show(choices.get(page));}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final void testEqualsObject04(){  CertPath cp1=new MyCertPath(testEncoding);  assertFalse(cp1.equals("MyEncoding"));}  }
class C{  public static int nextInt(int n){  Random random=getRandom();  int value=random.nextInt(n);  if (!_isTest)   _freeRandomList.free(random);  return value;}  }
class C{  static public void assertEquals(byte expected,byte actual){  assertEquals(null,expected,actual);}  }
class C{  public T caseTypeAliasDefinition(TypeAliasDefinition object){  return null;}  }
class C{  @Override public ResultSet executeQuery(String sql) throws SQLException {  try {    int id=getNextId(TraceObject.RESULT_SET);    if (isDebugEnabled()) {      debugCodeAssign("ResultSet",TraceObject.RESULT_SET,id,"executeQuery(" + quote(sql) + ")");    }synchronized (session) {      checkClosed();      closeOldResultSet();      sql=JdbcConnection.translateSQL(sql,escapeProcessing);      CommandInterface command=conn.prepareCommand(sql,fetchSize);      ResultInterface result;      boolean scrollable=resultSetType != ResultSet.TYPE_FORWARD_ONLY;      boolean updatable=resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;      setExecutingStatement(command);      try {        result=command.executeQuery(maxRows,scrollable);      }  finally {        setExecutingStatement(null);      }      command.close();      resultSet=new JdbcResultSet(conn,this,result,id,closedByResultSet,scrollable,updatable);    }    return resultSet;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Entry<T> enqueue(T value,double priority){  checkPriority(priority);  Entry<T> result=new Entry<T>(value,priority);  mMin=mergeLists(mMin,result);  ++mSize;  return result;}  }
class C{  public static ClassEnum parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ClassEnum object=null;  java.util.Map attributeMap=new java.util.HashMap();  java.util.List extraAttributeList=new java.util.ArrayList();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement() || reader.hasText()) {        java.lang.String content=reader.getElementText();        if (content.indexOf(":") > 0) {          prefix=content.substring(0,content.indexOf(":"));          namespaceuri=reader.getNamespaceURI(prefix);          object=ClassEnum.Factory.fromString(content,namespaceuri);        } else {          object=ClassEnum.Factory.fromString(content,"");        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static CreateInstanceE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateInstanceE object=new CreateInstanceE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","createInstance").equals(reader.getName())) {          object.setCreateInstance(org.oscm.xsd.CreateInstance.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public boolean isPayScheduleValid(){  Object oo=get_Value(COLUMNNAME_IsPayScheduleValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isLeftToRight(LC lc,ContainerWrapper container){  if (lc != null && lc.getLeftToRight() != null)   return lc.getLeftToRight();  return container == null || container.isLeftToRight();}  }
class C{  public EchoNest(){  mEchoNest=new EchoNestAPI(APIKeys.KEY_ECHONEST);  mEchoNest.setTraceRecvs(DEBUG);  mEchoNest.setTraceSends(DEBUG);}  }
class C{  public Object load(URI uri) throws IOException {  InputStreamReader src=null;  try {    src=new FileReader(new File(uri));    return xstream.fromXML(src);  }  finally {    if (null != src) {      src.close();    }  }}  }
class C{  public void paintTreeCellBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private boolean isClusterStateDone(String state,boolean isVersioned,String svcName) throws Exception {  if (clusterNodeCount == 0) {    throw new IllegalStateException("node count not set");  }  List<Configuration> configs=coordinator.queryAllConfiguration(coordinator.getSiteId(),coordinator.getVersionedDbConfigPath(svcName,getDbsvcVersion(isVersioned)));  List<Configuration> leftoverConfig=coordinator.queryAllConfiguration(coordinator.getVersionedDbConfigPath(svcName,getDbsvcVersion(isVersioned)));  configs.addAll(leftoverConfig);  Set<String> qualifiedConfigs=new HashSet<String>();  for (int i=0; i < configs.size(); i++) {    Configuration config=configs.get(i);    String value=config.getConfig(state);    if (value != null && Boolean.parseBoolean(value)) {      qualifiedConfigs.add(config.getId());    }  }  return (qualifiedConfigs.size() == clusterNodeCount);}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=new OpenCameraManager().build().open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public String showSystemUptime() throws NetworkDeviceControllerException {  SSHPrompt[] prompts={SSHPrompt.MDS_POUND,SSHPrompt.MDS_GREATER_THAN};  StringBuilder buf=new StringBuilder();  String systemUptime=null;  String[] regex={MDSDialogProperties.getString("MDSDialog.showSystem.systemUptime.match")};  SSHPrompt prompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.showSystem.systemUptime.cmd"),10000,prompts,buf);  String[] lines=getLines(buf);  String[] groups=new String[1];  for (  String line : lines) {    if (match(line,regex,groups) == 0) {      systemUptime=groups[0];      break;    }  }  return systemUptime;}  }
class C{  public static boolean isConnected(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected());}  }
class C{  public FileShareRestRep undoReleaseFileSystem(URI fsId){  WebResource rRoot=createRequest(INTERNAL_FILE_ROOT + fsId + RELEASE_UNDO);  FileShareRestRep resp=addSignature(rRoot).post(FileShareRestRep.class);  return resp;}  }
class C{  public DeltaSession8(Manager manager){  super(manager);  setOwner(manager);}  }
class C{  private void addImportClass(String className){  if (className == null || (className.startsWith("java.lang.") && !className.startsWith("java.lang.reflect.")) || className.startsWith(packageName + "."))   return;  for (  String name : s_importClasses) {    if (className.equals(name))     return;  }  s_importClasses.add(className);}  }
class C{  public boolean isNow(){  return isNow;}  }
class C{  private void merge(int[] A,int low,int middle,int high){  int[] helper=new int[A.length];  for (int i=low; i <= high; i++) {    helper[i]=A[i];  }  int left=low;  int right=middle + 1;  int curIdx=low;  while (left <= middle && right <= high) {    if (helper[left] <= helper[right]) {      A[curIdx]=helper[left];      left++;    } else {      A[curIdx]=helper[right];      right++;    }    curIdx++;  }  int remain=middle - left;  for (int i=0; i <= remain; i++) {    A[curIdx + i]=helper[left + i];  }}  }
class C{  @Override public void onClick(View v){  super.onClick(v);}  }
class C{  public void buildClassifier(Instances insts) throws Exception {  Instances newInsts;  getCapabilities().testWithFail(insts);  insts=new Instances(insts);  insts.deleteWithMissingClass();  m_Classifiers=AbstractClassifier.makeCopies(m_Classifier,insts.numClasses());  m_ClassFilters=new MakeIndicator[insts.numClasses()];  for (int i=0; i < insts.numClasses(); i++) {    m_ClassFilters[i]=new MakeIndicator();    m_ClassFilters[i].setAttributeIndex("" + (insts.classIndex() + 1));    m_ClassFilters[i].setValueIndex(i);    m_ClassFilters[i].setNumeric(true);    m_ClassFilters[i].setInputFormat(insts);    newInsts=Filter.useFilter(insts,m_ClassFilters[i]);    m_Classifiers[i].buildClassifier(newInsts);  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof PlotRenderingInfo)) {    return false;  }  PlotRenderingInfo that=(PlotRenderingInfo)obj;  if (!ObjectUtilities.equal(this.dataArea,that.dataArea)) {    return false;  }  if (!ObjectUtilities.equal(this.plotArea,that.plotArea)) {    return false;  }  if (!ObjectUtilities.equal(this.subplotInfo,that.subplotInfo)) {    return false;  }  return true;}  }
class C{  protected boolean handleInterruption(InterruptedException ie,long msecsRemaining) throws InterruptedException, ReplyException {  if (Thread.interrupted())   throw new InterruptedException();  if (this.isCancelled) {    return true;  } else {    throw ie;  }}  }
class C{  private void validateContext(String expectedProto,String[] expectedDefaultProtos,SSLContext context){  if (expectedProto == null) {    expectedProto="Default";  }  if (!context.getProtocol().equals(expectedProto)) {    error("Invalid current protocol: " + context.getProtocol() + ", Expected:"+ expectedProto,null);  }  List<String> actualDefaultProtos=Arrays.asList(context.getDefaultSSLParameters().getProtocols());  for (  String p : expectedDefaultProtos) {    if (!actualDefaultProtos.contains(p)) {      error("Default protocol " + p + "missing",null);    }  }  List<String> actualSupportedProtos=Arrays.asList(context.getSupportedSSLParameters().getProtocols());  for (  String p : expectedSupportedProtos) {    if (!actualSupportedProtos.contains(p)) {      error("Expected to support protocol:" + p,null);    }  }}  }
class C{  public SimpleNode(T id){  super();  this.id=id;}  }
class C{  public List<AdapterPathSegment> segments(){  return mSegments;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof AttributeSet) {    AttributeSet attrs=(AttributeSet)obj;    return ((getAttributeCount() == attrs.getAttributeCount()) && containsAttributes(attrs));  }  return false;}  }
class C{  public boolean canAccess(Environment env,ClassDeclaration c) throws ClassNotFound {  ClassDefinition cdef=c.getClassDefinition(env);  if (cdef.isLocal()) {    return true;  }  if (cdef.isInnerClass()) {    return canAccess(env,cdef.getInnerClassMember());  }  if (cdef.isPublic()) {    return true;  }  return getName().getQualifier().equals(c.getName().getQualifier());}  }
class C{  public static String fromTag(FloatTag tag){  return String.valueOf(tag.getValue()) + MojangsonToken.FLOAT_SUFFIX;}  }
class C{  private static void checkEqualsAndHashCodeMethods(Object lhs,Object rhs,boolean expectedResult){  if ((lhs == null) && (rhs == null)) {    Assert.assertTrue("Your check is dubious...why would you expect null != null?",expectedResult);    return;  }  if ((lhs == null) || (rhs == null)) {    Assert.assertFalse("Your check is dubious...why would you expect an object " + "to be equal to null?",expectedResult);  }  if (lhs != null) {    assertEquals(expectedResult,lhs.equals(rhs));  }  if (rhs != null) {    assertEquals(expectedResult,rhs.equals(lhs));  }  if (expectedResult) {    String hashMessage="hashCode() values for equal objects should be the same";    Assert.assertTrue(hashMessage,lhs.hashCode() == rhs.hashCode());  }}  }
class C{  public static String generateUUID(){  return UUID.randomUUID().toString();}  }
class C{  public synchronized void removeConsumer(ImageConsumer ic){  ics.removeElement(ic);}  }
class C{  public boolean waitFor(int timeout){  checkStarted();  final OSProcessHandler handler;synchronized (myLock) {    if (myIsDestroyed)     return true;    handler=myHandler;  }  if (timeout == -1) {    return handler.waitFor();  } else {    return handler.waitFor(timeout);  }}  }
class C{  public boolean isOwnBank(){  Object oo=get_Value(COLUMNNAME_IsOwnBank);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void serializeLong(long val,byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  buffer[0 + offsetInt]=(byte)((val >> 56) & 0xFFL);  buffer[1 + offsetInt]=(byte)((val >> 48) & 0xFFL);  buffer[2 + offsetInt]=(byte)((val >> 40) & 0xFFL);  buffer[3 + offsetInt]=(byte)((val >> 32) & 0xFFL);  buffer[4 + offsetInt]=(byte)((val >> 24) & 0xFFL);  buffer[5 + offsetInt]=(byte)((val >> 16) & 0xFFL);  buffer[6 + offsetInt]=(byte)((val >> 8) & 0xFFL);  buffer[7 + offsetInt]=(byte)(val & 0xFFL);  offset.add(Type.LONG.getByteSize());}  }
class C{  public static List<String> readAllLines(Path path,Charset cs) throws IOException {  try (BufferedReader reader=newBufferedReader(path,cs)){    List<String> result=new ArrayList<>();    for (; ; ) {      String line=reader.readLine();      if (line == null)       break;      result.add(line);    }    return result;  } }  }
class C{  void pretendIssuesSyncedAndDownloaded(){  communicationInitiated=true;  bugsPopulated.countDown();  issueDataDownloaded.countDown();}  }
class C{  protected void createLine(TransitRoute route){  ArrayList<Id<Link>> routeLinks=new ArrayList<Id<Link>>();  TransitRouteStop fromStop=null;  for (  TransitRouteStop toStop : route.getStops()) {    Link link=getNetworkLink(fromStop,toStop);    routeLinks.add(link.getId());    fromStop=toStop;  }  if (routeLinks.size() > 0) {    route.setRoute(RouteUtils.createNetworkRoute(routeLinks,this.network));  } else {    System.err.println("Transit route " + route.getId() + " has less than two stops. No route assigned.");  }}  }
class C{  public static OMPoly createEdgeOMPoly(CoordFloatString coords,LatLonPoint ll1,LatLonPoint ll2,double dpplat,double dpplon){  double[] llpts=coords.vals;  if (coords.tsize > 2) {    double[] newllpts=new double[coords.tcount * 2];    int len=newllpts.length;    for (int i=0, j=0; i < len; i+=2, j+=3) {      newllpts[i]=ProjMath.degToRad(llpts[j + 1]);      newllpts[i + 1]=ProjMath.degToRad(llpts[j]);    }    llpts=newllpts;  } else {    double lon;    int len=llpts.length;    for (int i=0; i < len; i+=2) {      lon=ProjMath.degToRad(llpts[i]);      llpts[i]=ProjMath.degToRad(llpts[i + 1]);      llpts[i + 1]=lon;    }  }  OMPoly py=new OMPoly(llpts,OMGraphic.RADIANS,OMGraphic.LINETYPE_STRAIGHT);  return py;}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public Fraction negate(){  if (numerator == Integer.MIN_VALUE) {    throw new ArithmeticException("overflow: too large to negate");  }  return new Fraction(-numerator,denominator);}  }
class C{  public Bundler(){  this(null);}  }
class C{  public float length(){  return FastMath.sqrt(lengthSquared());}  }
class C{  Operand popDouble(){  Operand r=pop();  if (VM.VerifyAssertions)   opt_assert(r.isDouble());  popDummy();  return r;}  }
class C{  private void translateTexts(){  for (  guiField f : guiFields) {    f.translateTexts();  }  txtActive.setText(activeName);  checkActiveButtons();}  }
class C{  private void initializeNeighborhoods(){  List<Individual> sortedPopulation=new ArrayList<Individual>(population);  for (  Individual individual : population) {    Collections.sort(sortedPopulation,new WeightSorter(individual));    for (int i=0; i < neighborhoodSize; i++) {      individual.addNeighbor(sortedPopulation.get(i));    }  }}  }
class C{  private void prepare(CoordinatorLayout parent,View child,View dependency){  mDependStartX=(int)dependency.getX();  mDependStartY=(int)dependency.getY();  mDependStartWidth=dependency.getWidth();  mDependStartHeight=dependency.getHeight();  mStartX=(int)child.getX();  mStartY=(int)child.getY();  mStartWidth=child.getWidth();  mStartHeight=child.getHeight();  mStartAlpha=child.getAlpha();  mStartRotateX=child.getRotationX();  mStartRotateY=child.getRotationY();  if (child.getBackground() instanceof ColorDrawable) {    mStartBackgroundColor=((ColorDrawable)child.getBackground()).getColor();  }  if (mAnimationId != 0) {    mAnimation=AnimationUtils.loadAnimation(child.getContext(),mAnimationId);    mAnimation.initialize(child.getWidth(),child.getHeight(),parent.getWidth(),parent.getHeight());  }  if (Build.VERSION.SDK_INT > 16 && parent.getFitsSystemWindows() && targetY != UNSPECIFIED_INT) {    int result=0;    int resourceId=parent.getContext().getResources().getIdentifier("status_bar_height","dimen","android");    if (resourceId > 0) {      result=parent.getContext().getResources().getDimensionPixelSize(resourceId);    }    targetY+=result;  }  isPrepared=true;}  }
class C{  public SignalServiceDataMessage(long timestamp,String body,int expiresInSeconds){  this(timestamp,(List<SignalServiceAttachment>)null,body,expiresInSeconds);}  }
class C{  @Override public int pollMax(){  return _selectMax;}  }
class C{  public boolean crosses180thMeridian(){  return crosses180thMeridian;}  }
class C{  public static boolean addAsUse(BytecodeInstruction u){  if (!(u.isUse() || u.isMethodCallOfField()))   return false;  if (isKnownAsUse(u))   return false;  if (!u.canBeInstrumented())   return false;  boolean registeredAsDU=registerAsDefUse(u);  if (!registeredAsDU && !u.isMethodCallOfField())   throw new IllegalStateException("expect registering to fail only on field method calls");  registerAsUse(u);  return true;}  }
class C{  public static KeyType find(String type,String mediaType,String extension){  return enums.find(new String[]{type,mediaType,extension});}  }
class C{  void createEdges(){  for (int i=0; i < map.keySet().size() * 1.3; i++) {    graph.addEdge(new Double(Math.random()),randomCity(),randomCity(),EdgeType.DIRECTED);  }}  }
class C{  public SetterRace(String appName){  RaceGUI basicGUI=new RaceGUI(appName);  timer=PropertySetter.createAnimator(RACE_TIME,basicGUI.getTrack(),"carPosition",TrackView.START_POS,TrackView.FIRST_TURN_START);  basicGUI.getControlPanel().addListener(this);}  }
class C{  public static DirectedEdgesOnly serializableInstance(){  return new DirectedEdgesOnly();}  }
class C{  public ThaiTokenizerFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static void passedDefinition(Object object,Object caller,int defID){  if (isThreadNeqCurrentThread())   return;  ExecutionTracer tracer=getExecutionTracer();  if (!tracer.disabled)   tracer.trace.definitionPassed(object,caller,defID);}  }
class C{  private void obtainWriteLocksForClear(RegionEventImpl regionEvent,Set<InternalDistributedMember> participants){  lockLocallyForClear(getDistributionManager(),getMyId(),regionEvent);  DistributedClearOperation.lockAndFlushToOthers(regionEvent,participants);}  }
class C{  @SkipValidation @Action(value="/modifyProperty-forwardView") public String forwardView(){  LOGGER.debug("Entered into forwardView");  validateApproverDetails();  if (hasErrors())   if (StringUtils.containsIgnoreCase(userDesignationList,JUNIOR_ASSISTANT) || StringUtils.containsIgnoreCase(userDesignationList,SENIOR_ASSISTANT) || (getModel().getState().getNextAction() != null && getModel().getState().getNextAction().equalsIgnoreCase(WF_STATE_UD_REVENUE_INSPECTOR_APPROVAL_PENDING)))   return NEW; else   if (StringUtils.containsIgnoreCase(userDesignationList,BILL_COLLECTOR_DESGN) || StringUtils.containsIgnoreCase(userDesignationList,COMMISSIONER_DESGN) || StringUtils.containsIgnoreCase(userDesignationList,REVENUE_OFFICER_DESGN))   return VIEW;  propertyModel=(PropertyImpl)getPersistenceService().findByNamedQuery(QUERY_PROPERTYIMPL_BYID,Long.valueOf(getModelId()));  LOGGER.debug("forwardView: Workflow property: " + propertyModel);  transitionWorkFlow(propertyModel);  propService.updateIndexes(propertyModel,getApplicationType());  basicPropertyService.update(basicProp);  setModifyRsn(propertyModel.getPropertyDetail().getPropertyMutationMaster().getCode());  prepareAckMsg();  buildEmailandSms(propertyModel,APPLICATION_TYPE_ALTER_ASSESSENT);  addActionMessage(getText(PROPERTY_FORWARD_SUCCESS,new String[]{propertyModel.getBasicProperty().getUpicNo()}));  LOGGER.debug("Exiting from forwardView");  return RESULT_ACK;}  }
class C{  private void checkWidth(final int[] rect){  final int x1=rect[0];  final int y2=rect[1];  final int y1=y2 + rect[3];  final int x2=x1 + rect[2];  if (x1 < pageX1) {    pageX1=x1;  }  if (x2 > pageX2) {    pageX2=x2;  }  if (y1 > pageY1) {    pageY1=y1;  }  if (y2 < pageY2) {    pageY2=y2;  }}  }
class C{  public static <E>SortedSet<E> synchronizedSortedSet(SortedSet<E> set){  if (set == null) {    throw new NullPointerException("set == null");  }  return new SynchronizedSortedSet<E>(set);}  }
class C{  public void add(final BOpStats o){  if (this == o) {    return;  }  elapsed.add(o.elapsed.get());  opCount.add(o.opCount.get());  chunksIn.add(o.chunksIn.get());  unitsIn.add(o.unitsIn.get());  unitsOut.add(o.unitsOut.get());  chunksOut.add(o.chunksOut.get());  typeErrors.add(o.typeErrors.get());  mutationCount.add(o.mutationCount.get());}  }
class C{  public void testEngineThread1PerSec() throws Exception {  epService=EPServiceProviderManager.getProvider("testExistingTypeNoOptions",makeConfig("TypeA"));  epService.initialize();  EPStatement stmt=epService.getEPAdministrator().createEPL("select symbol, price, volume from TypeA.win:length(100)");  SupportUpdateListener listener=new SupportUpdateListener();  stmt.addListener(listener);  CSVInputAdapterSpec spec=new CSVInputAdapterSpec(new AdapterInputSource(CSV_FILENAME_ONELINE_TRADE_MULTIPLE),"TypeA");  spec.setEventsPerSec(1);  spec.setUsingEngineThread(true);  InputAdapter inputAdapter=new CSVInputAdapter(epService,spec);  inputAdapter.start();  Thread.sleep(1500);  assertEquals(1,listener.getNewDataList().size());  listener.reset();  Thread.sleep(300);  assertEquals(0,listener.getNewDataList().size());  Thread.sleep(2000);  assertTrue(listener.getNewDataList().size() >= 2);}  }
class C{  public void add(String mimeType,String[] extensions){  if (extensions == null) {    return;  }  Object value=mimeMappings.get(mimeType);  String[] a=null;  if (value instanceof String[]) {    String[] old=(String[])value;    a=new String[old.length + extensions.length];    System.arraycopy(old,0,a,0,old.length);    System.arraycopy(extensions,0,a,a.length,extensions.length);  } else   if (value instanceof String) {    a=new String[1 + extensions.length];    a[0]=(String)value;    System.arraycopy(extensions,0,a,1,extensions.length);  } else {    a=new String[extensions.length];    System.arraycopy(extensions,0,a,0,extensions.length);  }  mimeMappings.put(mimeType,a);}  }
class C{  @Override public ChatEvent parse(String text){  RaptorStringTokenizer stringtokenizer=new RaptorStringTokenizer(text," ");  if (stringtokenizer.hasMoreTokens()) {    String s1=stringtokenizer.nextToken();    if (stringtokenizer.hasMoreTokens()) {      String s2=stringtokenizer.nextToken();      if (s2.equals(IDENTIFIER)) {        return new ChatEvent(IcsUtils.stripTitles(s1).trim(),ChatType.CSHOUT,text.trim());      }    }  }  return null;}  }
class C{  private X509CertificatePair(byte[] encoded) throws CertificateException {  try {    parse(new DerValue(encoded));    this.encoded=encoded;  } catch (  IOException ex) {    throw new CertificateException(ex.toString());  }  checkPair();}  }
class C{  public PutMappingRequest source(XContentBuilder mappingBuilder){  try {    return source(mappingBuilder.string());  } catch (  IOException e) {    throw new IllegalArgumentException("Failed to build json for mapping request",e);  }}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  private void handleChildProc(Arguments parsedArgs,FileDescriptor[] descriptors,FileDescriptor pipeFd,PrintStream newStderr) throws ZygoteInit.MethodAndArgsCaller {  closeSocket();  ZygoteInit.closeServerSocket();  if (descriptors != null) {    try {      ZygoteInit.reopenStdio(descriptors[0],descriptors[1],descriptors[2]);      for (      FileDescriptor fd : descriptors) {        IoUtils.closeQuietly(fd);      }      newStderr=System.err;    } catch (    IOException ex) {      Log.e(TAG,"Error reopening stdio",ex);    }  }  if (parsedArgs.niceName != null) {    Process.setArgV0(parsedArgs.niceName);  }  if (parsedArgs.runtimeInit) {    if (parsedArgs.invokeWith != null) {      WrapperInit.execApplication(parsedArgs.invokeWith,parsedArgs.niceName,parsedArgs.targetSdkVersion,pipeFd,parsedArgs.remainingArgs);    } else {      RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,parsedArgs.remainingArgs);    }  } else {    String className;    try {      className=parsedArgs.remainingArgs[0];    } catch (    ArrayIndexOutOfBoundsException ex) {      logAndPrintError(newStderr,"Missing required class name argument",null);      return;    }    String[] mainArgs=new String[parsedArgs.remainingArgs.length - 1];    System.arraycopy(parsedArgs.remainingArgs,1,mainArgs,0,mainArgs.length);    if (parsedArgs.invokeWith != null) {      WrapperInit.execStandalone(parsedArgs.invokeWith,parsedArgs.classpath,className,mainArgs);    } else {      ClassLoader cloader;      if (parsedArgs.classpath != null) {        cloader=new PathClassLoader(parsedArgs.classpath,ClassLoader.getSystemClassLoader());      } else {        cloader=ClassLoader.getSystemClassLoader();      }      try {        ZygoteInit.invokeStaticMain(cloader,className,mainArgs);      } catch (      RuntimeException ex) {        logAndPrintError(newStderr,"Error starting.",ex);      }    }  }}  }
class C{  public synchronized void addReference(){  ensureValid();  mRefCount++;}  }
class C{  @BeforeMethod public void before() throws Exception {  final ResourceBinderImpl resources=new ResourceBinderImpl();  resources.addResource(MyJaxRSService.class,null);  final DependencySupplierImpl dependencies=new DependencySupplierImpl();  final ApplicationProviderBinder providers=new ApplicationProviderBinder();  providers.addExceptionMapper(ApiExceptionMapper.class);  providers.addResponseFilter(EverrestDownloadFileResponseFilter.class);  final URI uri=new URI(BASE_URI);  final ContainerRequest req=new ContainerRequest(null,uri,uri,null,null,null);  final ApplicationContext context=anApplicationContext().withRequest(req).withProviders(providers).withDependencySupplier(dependencies).build();  ApplicationContext.setCurrent(context);  final EverrestProcessor processor=new EverrestProcessor(new EverrestConfiguration(),dependencies,new RequestHandlerImpl(new RequestDispatcher(resources),providers),null);  resourceLauncher=new ResourceLauncher(processor);}  }
class C{  private String execAndReturnStdout(String command,boolean directLogging) throws ReplicatorException {  String[] osArray={"sh","-c",command};  ProcessExecutor pe=new ProcessExecutor();  pe.setCommands(osArray);  if (logger.isDebugEnabled()) {    logger.debug("Executing OS command: " + command);  }  if (directLogging) {    pe.setStdOut(logger);    pe.setStdErr(logger);  }  pe.run();  if (logger.isDebugEnabled()) {    logger.debug("OS command stdout: " + pe.getStdout());    logger.debug("OS command stderr: " + pe.getStderr());    logger.debug("OS command exit value: " + pe.getExitValue());  }  if (!pe.isSuccessful()) {    String msg;    if (directLogging) {      msg="OS command failed: command=" + command + " rc="+ pe.getExitValue();    } else {      msg="OS command failed: command=" + command + " rc="+ pe.getExitValue()+ " stdout="+ pe.getStdout()+ " stderr="+ pe.getStderr();    }    logger.error(msg);    throw new ReplicatorException(msg);  }  return pe.getStdout();}  }
class C{  private boolean isUsable(){  if ((this.access & Opcodes.ACC_SYNTHETIC) != 0)   return false;  if ((this.access & Opcodes.ACC_BRIDGE) != 0)   return false;  if ((this.access & Opcodes.ACC_NATIVE) != 0)   return false;  if (methodName.contains("<clinit>"))   return false;  if (Properties.P_REFLECTION_ON_PRIVATE <= 0.0) {    if (methodName.contains("<init>") && (access & Opcodes.ACC_PRIVATE) == Opcodes.ACC_PRIVATE)     return false;  }  return true;}  }
class C{  public Boolean validate(){  if (this.playStoreOnly && !wasInstalledFromPlayStore(this.context)) {    return false;  }  return isAValidSignature(context,certificateSignature);}  }
class C{  public static void updateDatabase(final SQLProvider provider) throws CouldntUpdateDatabaseException {  try {    if (provider.getDatabaseVersion().compareTo(new DatabaseVersion("4.0.0")) == 0) {      databaseUpdater(provider.getConnection(),"com/google/security/zynamics/binnavi/data/" + "postgresql_convert_4_0_7_to_5_0_0.sql");      databaseUpdater(provider.getConnection(),"com/google/security/zynamics/binnavi/data/" + "postgresql_convert_5_0_0_to_5_0_1.sql");    } else     if (provider.getDatabaseVersion().compareTo(new DatabaseVersion("5.0.0")) == 0) {      databaseUpdater(provider.getConnection(),"com/google/security/zynamics/binnavi/data/" + "postgresql_convert_5_0_0_to_5_0_1.sql");    }  } catch (  final CouldntLoadDataException exception) {    CUtilityFunctions.logException(exception);  }}  }
class C{  private Network createConnectionAndWriteData(IBasicRequest request) throws Exception {  Network network=null;  Exception exception=null;  int retryCount=request.getRetryCount() + 1;  boolean failed=true;  for (; failed && retryCount > 0; retryCount--) {    try {      network=createNetwork(request);      exception=null;      failed=false;    } catch (    Exception e) {      exception=e;    }  }  if (failed) {    throw exception;  } else   if (request.getRequestMethod().allowRequestBody()) {    writeRequestBody(request,network.getOutputStream());  }  return network;}  }
class C{  public TestVocabulary_BLZG1591(){  super();}  }
class C{  public static void write(OutStream out,List records) throws IOException {  for (Iterator enumerator=records.iterator(); enumerator.hasNext(); ) {    ButtonRecord2 rec=(ButtonRecord2)enumerator.next();    rec.write(out);  }  out.writeUI8(0);}  }
class C{  public boolean isSearchMatch(SearchParameters params,int row){  boolean result;  Object value;  int i;  result=false;  for (i=0; i < getColumnCount(); i++) {    if (isColumnNumeric(i))     continue;    value=getUnsortedModel().getValueAt(row,i);    if (value != null) {      result=params.matches(value.toString());      if (result)       break;    }  }  return result;}  }
class C{  @Bean public Queue receiverConnectorQueueFromHawkBit(){  final Map<String,Object> arguments=getDeadLetterExchangeArgs();  arguments.putAll(getTTLMaxArgs());  return QueueBuilder.nonDurable(amqpProperties.getReceiverConnectorQueueFromSp()).autoDelete().withArguments(arguments).build();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.725 -0400",hash_original_method="AD6098A49801FEDA58A88E610AA25434",hash_generated_method="5588E1900A4BAB6A048BAAA410A85A13") public final boolean isWarnEnabled(){  return false;}  }
class C{  public static BinaryObjectBuilderImpl wrap(BinaryObject obj){  BinaryObjectImpl heapObj;  if (obj instanceof BinaryObjectOffheapImpl)   heapObj=(BinaryObjectImpl)((BinaryObjectOffheapImpl)obj).heapCopy(); else   heapObj=(BinaryObjectImpl)obj;  return new BinaryObjectBuilderImpl(heapObj);}  }
class C{  public BillingAdapterNotFoundException(String message){  super(message);}  }
class C{  private boolean supportsMultiApply(IssueResolution resolution){  return resolution.getModification() instanceof N4ModificationWrapper && ((N4ModificationWrapper)resolution.getModification()).getN4Modification() != null && ((N4ModificationWrapper)resolution.getModification()).getN4Modification().supportsMultiApply();}  }
class C{  public DoubleArrayListParameter(OptionID optionID,ParameterConstraint<List<double[]>> constraint,List<double[]> defaultValue){  super(optionID,defaultValue);  addConstraint(constraint);}  }
class C{  public CoordinateSequence create(Coordinate[] coordinates){  return new DefaultCoordinateSequence(coordinates);}  }
class C{  TaskCallbackImpl update(TaskCallbackImpl cb){synchronized (lock) {    callbacks.add(cb);    TaskCallbackImpl callback=null;    TaskCallbackImpl callbackToCommit=null;    TaskCoordinator.RequestScope shutdownRequest=null;    while (!callbacks.isEmpty() && callbacks.peek().matchSeqNum(nextSeqNum)) {      ++nextSeqNum;      callback=callbacks.poll();      if (callback.coordinator.commitRequest().isDefined()) {        callbackToCommit=callback;      }      if (callback.coordinator.shutdownRequest().isDefined()) {        shutdownRequest=callback.coordinator.shutdownRequest().get();      }    }    if (callbackToCommit == null) {      callbackToCommit=callback;    }    if (shutdownRequest != null) {      callbackToCommit.coordinator.shutdown(shutdownRequest);    }    return callbackToCommit;  }}  }
class C{  public void reset(){  mIsDying=false;}  }
class C{  private int sendEmail(MWFActivity activity,String AD_Message,boolean toProcess,boolean toSupervisor){  if (m_client == null || m_client.getAD_Client_ID() != activity.getAD_Client_ID())   m_client=MClient.get(getCtx(),activity.getAD_Client_ID());  MWFProcess process=new MWFProcess(getCtx(),activity.getAD_WF_Process_ID(),null);  String subjectVar=activity.getNode().getName();  String message=activity.getTextMsg();  if (message == null || message.length() == 0)   message=process.getTextMsg();  File pdf=null;  PO po=activity.getPO();  if (po instanceof DocAction) {    message=((DocAction)po).getDocumentInfo() + "\n" + message;    pdf=((DocAction)po).createPDF();  }  String subject=Msg.getMsg(m_client.getAD_Language(),AD_Message,new Object[]{subjectVar});  ArrayList<Integer> list=new ArrayList<Integer>();  int counter=0;  if (m_client.sendEMail(activity.getAD_User_ID(),subject,message,pdf))   counter++;  list.add(new Integer(activity.getAD_User_ID()));  if (toProcess && process.getAD_User_ID() != activity.getAD_User_ID()) {    if (m_client.sendEMail(process.getAD_User_ID(),subject,message,pdf))     counter++;    list.add(new Integer(process.getAD_User_ID()));  }  MWFResponsible responsible=MWFResponsible.get(getCtx(),activity.getAD_WF_Responsible_ID());  counter+=sendAlertToResponsible(responsible,list,process,subject,message,pdf);  if (toProcess && process.getAD_WF_Responsible_ID() != activity.getAD_WF_Responsible_ID()) {    responsible=MWFResponsible.get(getCtx(),process.getAD_WF_Responsible_ID());    counter+=sendAlertToResponsible(responsible,list,process,subject,message,pdf);  }  if (toSupervisor && m_model.getSupervisor_ID() != 0 && !list.contains(new Integer(m_model.getSupervisor_ID()))) {    if (m_client.sendEMail(m_model.getSupervisor_ID(),subject,message,pdf))     counter++;    list.add(new Integer(m_model.getSupervisor_ID()));  }  return counter;}  }
class C{  public static OrientedBoundingBox computeOrientedBoundingBox(ArrayList<GesturePoint> originalPoints){  final int count=originalPoints.size();  float[] points=new float[count * 2];  for (int i=0; i < count; i++) {    GesturePoint point=originalPoints.get(i);    int index=i * 2;    points[index]=point.x;    points[index + 1]=point.y;  }  float[] meanVector=computeCentroid(points);  return computeOrientedBoundingBox(points,meanVector);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_LINKING_OP_2__AND_OP_1:    setAndOp_1((String)newValue);  return;case UmplePackage.ANONYMOUS_LINKING_OP_2__CONSTRAINT_EXPR_1:getConstraintExpr_1().clear();getConstraintExpr_1().addAll((Collection<? extends ConstraintExpr_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Set keySet(){  Set ks=keySet;  return (ks != null) ? ks : (keySet=new KeySet());}  }
class C{  private void printColumns(Table table){  ArrayList<Column> columns=table.getAllColumns();  ArrayList<Column> pkCols=null;  if (table.getPrimaryKey() != null)   pkCols=table.getPrimaryKey().getColumns();  for (  Column column : columns) {    print(column.getName());    if (pkCols != null && pkCols.contains(column))     print("*");    print("\t");  }  println("");}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:06.823 -0500",hash_original_method="80C03A9E4F151BE4271ACE586291D7DE",hash_generated_method="C6BB1C000EDEB0F6A93654FF0C5C25A9") private void checkOpenAndCreate(boolean create) throws SocketException {  if (isClosed()) {    throw new SocketException("Socket is closed");  }  if (!create) {    if (!isConnected()) {      throw new SocketException("Socket is not connected");    }    return;  }  if (isCreated) {    return;  }synchronized (this) {    if (isCreated) {      return;    }    try {      impl.create(true);    } catch (    SocketException e) {      throw e;    }catch (    IOException e) {      throw new SocketException(e.toString());    }    isCreated=true;  }}  }
class C{  public void and(BitSet set){  if (this == set) {    return;  }  int oldUnitsInUse=unitsInUse;  unitsInUse=Math.min(unitsInUse,set.unitsInUse);  int i;  for (i=0; i < unitsInUse; i++) {    bits[i]&=set.bits[i];  }  for (; i < oldUnitsInUse; i++) {    bits[i]=0;  }  if (unitsInUse > 0 && bits[unitsInUse - 1] == 0)   recalculateUnitsInUse();}  }
class C{  private void processCallDetectMessage(LTRNetMessage message){  if (!mActiveCalls.containsKey(message.getChannel()) || !mActiveCalls.get(message.getChannel()).contentEquals(message.getTalkgroupID())) {    mActiveCalls.put(message.getChannel(),message.getTalkgroupID());    int channel=message.getChannel();    long frequency=0;    if (mTransmitFrequencies.containsKey(channel)) {      frequency=mTransmitFrequencies.get(channel);    }    broadcast(new LTRCallEvent.Builder(DecoderType.LTR_NET,CallEventType.CALL_DETECT).aliasList(getAliasList()).channel(String.valueOf(message.getChannel())).frequency(frequency).to(message.getTalkgroupID()).build());  }  broadcast(new DecoderStateEvent(this,Event.CONTINUATION,State.IDLE));}  }
class C{  public static void run(){  if (!enabled)   return;  if (false) {    List<SootClass> android_classes=null;    for (    SootClass clz : android_classes) {      for (      SootMethod meth : clz.getMethods()) {        List<Tag> tlist=meth.getTags();        for (        Tag tag : tlist) {          if (!(tag instanceof VisibilityAnnotationTag))           continue;          VisibilityAnnotationTag vtag=(VisibilityAnnotationTag)tag;          for (          AnnotationTag a : vtag.getAnnotations())           logger.info("tag for method {} = {}, {}",meth.getName(),a.getName(),a.getType());        }        logger.info("tags for method {} = {}",meth.getName(),tlist);      }    }  }  List<SootClass> app_classes=null;  HoistAllocations transformer=new HoistAllocations();  for (  SootClass clz : Scene.v().getClasses()) {    if (Project.v().isSrcClass(clz.toString())) {      logger.info("processing class {}",clz);      for (      SootMethod meth : clz.getMethods()) {        if (meth.isConcrete()) {          List<Unit> orig_chain=null;          Body b=null;          try {            b=meth.retrieveActiveBody();          } catch (          Exception ex) {            logger.info("Exception retrieving method body {}",ex);            continue;          }          if (logger.isInfoEnabled()) {            orig_chain=new ArrayList<Unit>();            orig_chain.addAll(b.getUnits());          }          transformer.transform(b);          log_diffs(logger,orig_chain,meth);        }      }    }  }}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  insets.trim(area);  setFixedRangeAxisSpaceForSubplots(null);  AxisSpace space=calculateAxisSpace(g2,area);  Rectangle2D dataArea=space.shrink(area,null);  setFixedRangeAxisSpaceForSubplots(space);  ValueAxis axis=getDomainAxis();  RectangleEdge edge=getDomainAxisEdge();  double cursor=RectangleEdge.coordinate(dataArea,edge);  AxisState axisState=axis.draw(g2,cursor,area,dataArea,edge,info);  if (parentState == null) {    parentState=new PlotState();  }  parentState.getSharedAxisStates().put(axis,axisState);  for (int i=0; i < this.subplots.size(); i++) {    XYPlot plot=(XYPlot)this.subplots.get(i);    PlotRenderingInfo subplotInfo=null;    if (info != null) {      subplotInfo=new PlotRenderingInfo(info.getOwner());      info.addSubplotInfo(subplotInfo);    }    plot.draw(g2,this.subplotAreas[i],anchor,parentState,subplotInfo);  }  if (info != null) {    info.setDataArea(dataArea);  }}  }
class C{  private void refresh(){  setTitle(ssid);  Context context=getContext();  StringBuilder summary=new StringBuilder();  if (isIBSS)   summary.append(context.getString(R.string.wifi_mode_ibss_short)).append(" ");  if (mConfig != null && mConfig.status == WifiConfiguration.Status.DISABLED) {switch (mConfig.disableReason) {case WifiConfiguration.DISABLED_AUTH_FAILURE:      summary.append(context.getString(R.string.wifi_disabled_password_failure));    break;case WifiConfiguration.DISABLED_DHCP_FAILURE:case WifiConfiguration.DISABLED_DNS_FAILURE:  summary.append(context.getString(R.string.wifi_disabled_network_failure));break;case WifiConfiguration.DISABLED_ASSOCIATION_REJECT:setSummary(context.getString(R.string.wifi_disabled_association_rejected));break;case WifiConfiguration.DISABLED_UNKNOWN_REASON:summary.append(context.getString(R.string.wifi_disabled_generic));}} else if (mRssi == Integer.MAX_VALUE) {summary.append(context.getString(R.string.wifi_not_in_range));} else if (mState != null) {summary.append(Summary.get(context,mState));} else {if (mConfig != null) {summary.append(context.getString(R.string.wifi_remembered));}if (security != SECURITY_NONE) {String securityStrFormat;if (summary.length() == 0) {securityStrFormat=context.getString(R.string.wifi_secured_first_item);} else {securityStrFormat=context.getString(R.string.wifi_secured_second_item);}summary.append(String.format(securityStrFormat,getSecurityString(true)));}if (mConfig == null && wpsAvailable) {if (summary.length() == 0) {summary.append(context.getString(R.string.wifi_wps_available_first_item));} else {summary.append(context.getString(R.string.wifi_wps_available_second_item));}}}setSummary(summary.toString());}  }
class C{  public void testCase11(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=-1;  byte rBytes[]={1,2,3,4,15,26,37,41,52,63,74,15,26,37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(1,result.signum());}  }
class C{  public static boolean isFile(byte flags){  return hasFlag(flags,FLAG_FILE);}  }
class C{  protected boolean isToggleEvent(MouseEvent event){  if (!SwingUtilities.isLeftMouseButton(event)) {    return false;  }  int clickCount=tree.getToggleClickCount();  if (clickCount <= 0) {    return false;  }  return ((event.getClickCount() % clickCount) == 0);}  }
class C{  public PlayPause(int playerId){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("play","toggle");}  }
class C{  public void update(ServletRequest request){  if (getModel().isExactTime()) {    int dayCode=0;    for (int i=0; i < Constants.DAY_CODES.length; i++) {      if (request.getParameter(iName + "_d" + i) != null)       dayCode+=Constants.DAY_CODES[i];    }    int startSlot=-1;    try {      if (request.getParameter(iName + "_hour") != null) {        int hour=Integer.parseInt(request.getParameter(iName + "_hour"));        if (hour == 12)         hour=0;        int min=Integer.parseInt(request.getParameter(iName + "_min"));        boolean morn=(Integer.parseInt(request.getParameter(iName + "_morn")) == 1);        int startTime=((hour + (morn ? 0 : 12)) % 24) * 60 + min;        startSlot=(startTime - Constants.FIRST_SLOT_TIME_MIN) / Constants.SLOT_LENGTH_MIN;      }    } catch (    Exception e) {    }    getModel().setExactDays(dayCode);    getModel().setExactStartSlot(startSlot);    return;  } else {    for (int d=0; d < getModel().getNrDays(); d++) {      for (int t=0; t < getModel().getNrTimes(); t++) {        String prefStr=request.getParameter(iName + "_req_" + d+ "_"+ t);        iModel.setPreference(d,t,(prefStr == null ? getModel().getDefaultPreference() : prefStr));      }    }  }}  }
class C{  public static double logPdf(double x,double m,double sd){  double a=1.0 / (Math.sqrt(2.0 * Math.PI) * sd);  double b=-(x - m) * (x - m) / (2.0 * sd * sd);  return Math.log(a) + b;}  }
class C{  public static LoggingFraction createTraceLoggingFraction(){  return createDefaultLoggingFraction(Level.TRACE);}  }
class C{  private void process(Method method,Annotation[] list) throws Exception {  MethodPart part=factory.getInstance(method,list);  MethodType type=part.getMethodType();  if (type == MethodType.GET) {    process(part,read);  }  if (type == MethodType.IS) {    process(part,read);  }  if (type == MethodType.SET) {    process(part,write);  }}  }
class C{  protected PortImpl(){  super();}  }
class C{  public CF4(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  public static QueryAssociatedProcessorsForArrayResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryAssociatedProcessorsForArrayResponse object=new QueryAssociatedProcessorsForArrayResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryAssociatedProcessorsForArrayResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryAssociatedProcessorsForArrayResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(VasaAssociationObject.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(VasaAssociationObject.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((VasaAssociationObject[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(VasaAssociationObject.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public synchronized void logout() throws ClientException {  if (!mInitialized) {    throw new IllegalStateException("init must be called");  }  mLogger.logDebug("Starting logout");  if (mMSAAuthenticator.getAccountInfo() != null) {    mLogger.logDebug("Starting logout of MSA account");    mMSAAuthenticator.logout();  }  if (mADALAuthenticator.getAccountInfo() != null) {    mLogger.logDebug("Starting logout of ADAL account");    mADALAuthenticator.logout();  }  getSharedPreferences().edit().clear().putInt(VERSION_CODE_KEY,BuildConfig.VERSION_CODE).commit();}  }
class C{  public PasteAction(){  super(pasteAction);}  }
class C{  public ValidatedPredicate(){  super(VisualItem.VALIDATED);}  }
class C{  public String KValueTipText(){  return "Sets the number of randomly chosen attributes. If 0, int(log_2(#predictors) + 1) is used.";}  }
class C{  public static Message newQuery(Record r){  Message m=new Message();  m.header.setOpcode(Opcode.QUERY);  m.header.setFlag(Flags.RD);  m.addRecord(r,Section.QUESTION);  return m;}  }
class C{  public long length() throws IOException {  try {    return Libcore.os.fstat(fd).st_size;  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  public CLIOutputWithRevisionResponse commit(final CommitRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  addFlag(cliArgs,"--keep-changelists",request.isKeepChangeLists());  addFlag(cliArgs,"--no-unlock",request.isKeepLocks());  cliArgs.add("commit");  cliArgs.add("-m");  cliArgs.add(request.getMessage());  final CommandLineResult result=runCommand(null,cliArgs,projectPath,addWorkingCopyPathIfNecessary(request.getPaths()));  return DtoFactory.getInstance().createDto(CLIOutputWithRevisionResponse.class).withCommand(result.getCommandLine().toString()).withRevision(SubversionUtils.getCommitRevision(result.getStdout())).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public void sync(){  for (  Client client : clients) {    generateResponse(client.getOne());  }}  }
class C{  public void add(String name,Expression expression){  map.put(name,expression);}  }
class C{  public final void display(){  if (site != null) {    site.swap(this);  }}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  LambdaFormBuffer insertExpression(int pos,Name expr){  assert (!expr.isParam());  insertName(pos,expr,false);  return this;}  }
class C{  public boolean isDetected(){  return detected != null;}  }
class C{  public String realm(){  return clientConfig.realm();}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  private WroConfiguration createConfiguration(){  final WroConfiguration configAttribute=ServletContextAttributeHelper.create(filterConfig).getWroConfiguration();  if (configAttribute != null) {    setConfiguration(configAttribute);  }  return getWroConfigurationFactory().create();}  }
class C{  public SuffixStringMatcher(Collection<String> suffixes){  super();  Iterator<String> iter=suffixes.iterator();  while (iter.hasNext())   addPatternBackward(iter.next());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void fireEndEntity(String name) throws org.xml.sax.SAXException {  if (m_tracer != null)   flushMyWriter();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean supportsMinimumSQLGrammar(){  debugCodeCall("supportsMinimumSQLGrammar");  return true;}  }
class C{  public LineNumberList(RTextArea textArea,Color numberColor){  super(textArea);  if (numberColor != null) {    setForeground(numberColor);  } else {    setForeground(Color.GRAY);  }  currentLine=0;  setLineNumberingStartIndex(1);  visibleRect=new Rectangle();  addMouseListener(this);  addMouseMotionListener(this);}  }
class C{  public static void makeDoubleMatrixFile(double matrix[][],String outputFileName) throws IOException {  int rowSize=matrix.length;  int colSize=matrix[0].length;  createDirectories(outputFileName);  BufferedWriter out=new BufferedWriter(new FileWriter(outputFileName));  for (int i=0; i < rowSize; i++) {    for (int j=0; j < colSize; j++) {      out.write(String.valueOf(matrix[i][j]) + "\t");      if (j == colSize - 1) {        out.write("\n");      }    }  }  out.close();}  }
class C{  private Object read(String[] list,int length) throws Exception {  Object array=Array.newInstance(entry,length);  for (int i=0; i < length; i++) {    Object item=delegate.read(list[i]);    if (item != null) {      Array.set(array,i,item);    }  }  return array;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.940 -0500",hash_original_method="03753254E092E96423C7A83C5CC1A9C3",hash_generated_method="CC15A200A73D4992EC958230437F897A") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static byte[] sha(byte[] data){  return getShaDigest().digest(data);}  }
class C{  public boolean deleteView(final INaviView view) throws CouldntDeleteException {  Preconditions.checkNotNull(view,"IE00243: View argument can't be null");  Preconditions.checkArgument(m_views.contains(view),"IE00244: View is not part of the module");  m_provider.deleteView(view);  m_views.remove(view);  for (  final IProjectListener listener : m_listeners) {    try {      listener.deletedView(m_project,view);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }  m_project.getConfiguration().updateModificationDate();  return true;}  }
class C{  private IgfsLogger(String endpoint,String igfsName,String dir,int batchSize){  A.notNull(endpoint,"endpoint cannot be null");  A.notNull(dir,"dir cannot be null");  A.ensure(batchSize > 0,"batch size cannot be negative");  enabled=true;  this.endpoint=endpoint;  this.batchSize=batchSize;  pid=U.jvmPid();  File dirFile=new File(dir);  A.ensure(dirFile.isDirectory(),"dir must point to a directory");  A.ensure(dirFile.exists(),"dir must exist");  file=new File(dirFile,"igfs-log-" + igfsName + "-"+ pid+ ".csv");  entries=new ConcurrentLinkedDeque8<>();  cnt=new AtomicInteger();  useCnt=new AtomicInteger();  rwLock=new ReentrantReadWriteLock();  flushLock=new ReentrantLock();  flushCond=flushLock.newCondition();  flushWorker=new Thread(new FlushWorker());  flushWorker.setDaemon(true);  flushWorker.start();}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuffer sb=new StringBuffer();  sb.append(escape(jo.getString("name")));  sb.append("=");  sb.append(escape(jo.getString("value")));  if (jo.has("expires")) {    sb.append(";expires=");    sb.append(jo.getString("expires"));  }  if (jo.has("domain")) {    sb.append(";domain=");    sb.append(escape(jo.getString("domain")));  }  if (jo.has("path")) {    sb.append(";path=");    sb.append(escape(jo.getString("path")));  }  if (jo.optBoolean("secure")) {    sb.append(";secure");  }  return sb.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Map<String,String> checkNodeAddressDiff(PropertyInfoExt localProps,PropertyInfoRestRep rep){  int nodeCount=Integer.parseInt(localProps.getProperty("node_count"));  Map<String,String> diffProps=new HashMap<String,String>();  for (int i=1; i <= nodeCount; i++) {    String address=String.format(ADDRESSV4_FORMAT,i);    if (!rep.getProperty(address).equals(localProps.getProperty(address))) {      diffProps.put(address,rep.getProperty(address));    }    address=String.format(ADDRESSV6_FORMAT,i);    if (!rep.getProperty(address).equals(localProps.getProperty(address))) {      diffProps.put(address,rep.getProperty(address));    }  }  return diffProps;}  }
class C{  public void update(){  JSONObject object=new JSONObject();  object.put("avatar",avatar == null ? api.getSelfInfo().getAvatarId() : (avatar == AvatarUtil.DELETE_AVATAR ? JSONObject.NULL : avatar.getEncoded()));  object.put("username",username == null ? api.getSelfInfo().getUsername() : username);  JSONObject result=api.getRequester().patch(Requester.DISCORD_API_PREFIX + "users/@me",object).getObject();  if (result == null || !result.has("token")) {    throw new RuntimeException("Something went wrong while changing the account settings.");  }  api.setAuthToken(result.getString("token"));  this.avatar=null;  this.username=null;}  }
class C{  public static UITimer timer(int timeMillis,boolean repeat,Runnable r){  UITimer uit=new UITimer(r);  uit.schedule(timeMillis,repeat,Display.getInstance().getCurrent());  return uit;}  }
class C{  public void java_lang_ClassLoader_findBootstrapClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.WILDCARD___GET_DECLARED_OR_IMPLICIT_UPPER_BOUND:    return getDeclaredOrImplicitUpperBound();case TypeRefsPackage.WILDCARD___IS_IMPLICIT_UPPER_BOUND_IN_EFFECT:  return isImplicitUpperBoundInEffect();case TypeRefsPackage.WILDCARD___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  static public final String crypt(String password) throws NoSuchAlgorithmException {  StringBuffer salt=new StringBuffer();  java.util.Random randgen=new java.util.Random();  while (salt.length() < 8) {    int index=(int)(randgen.nextFloat() * SALTCHARS.length());    salt.append(SALTCHARS.substring(index,index + 1));  }  return MD5Crypt.crypt(password,salt.toString());}  }
class C{  public static void shuffle(double[] a){  int N=a.length;  for (int i=0; i < N; i++) {    int r=i + uniform(N - i);    double temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  @Override public String stringValue(final IScope scope) throws GamaRuntimeException {  return toString();}  }
class C{  public Word prepareWord(){  return loadWord();}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  public static StringBuilder stripXMLArrows(final StringBuilder all_tags,final boolean isXMLExtraction){  StringBuilder general_buffer=new StringBuilder();  StringBuilder tag=new StringBuilder();  if (all_tags == null) {    return general_buffer;  }  if (isXMLExtraction) {    char next_token;    char start=' ';    boolean inToken=false;    final int length=all_tags.length();    for (int i=0; i < length; i++) {      next_token=all_tags.charAt(i);      if ((strip_start_token_deliminator.indexOf(next_token) != -1)) {        inToken=true;        start=next_token;      }      if (!inToken) {        general_buffer.append(next_token);      } else {        tag.append(next_token);      }      final int endPointer=strip_end_token_deliminator.indexOf(next_token);      if ((endPointer == 1) & (start == '&')) {        if ((!tag.toString().equals("&lt;")) && (!tag.toString().equals("&gt;"))) {          general_buffer.append(tag);        }        inToken=false;        tag=new StringBuilder();      } else       if ((endPointer == 0) & (start == '<')) {        inToken=false;        tag=new StringBuilder();      }    }  } else {    general_buffer=all_tags;  }  general_buffer=Strip.trim(general_buffer);  return general_buffer;}  }
class C{  @PostConstruct public void init(){  logger.info(getClass().getName() + " init...");  queue=queueFactory.getQueue(MailQueueFactory.SPOOL);  if (logger.isInfoEnabled()) {    String infoBuffer=getClass().getName() + " uses " + numThreads+ " Thread(s)";    logger.info(infoBuffer);  }  active.set(true);  workerService=JMXEnabledThreadPoolExecutor.newFixedThreadPool("org.apache.james:type=component,component=mailetcontainer,name=mailspooler,sub-type=threadpool","spooler",numThreads);  dequeueService=JMXEnabledThreadPoolExecutor.newFixedThreadPool("org.apache.james:type=component,component=mailetcontainer,name=mailspooler,sub-type=threadpool","dequeuer",numDequeueThreads);  for (int i=0; i < numDequeueThreads; i++) {    Thread reader=new Thread(this,"Dequeue Thread #" + i);    dequeueService.execute(reader);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.IMPORT_DECLARATION__DECLARATION:    setDeclaration((Declaration)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void addLdc(String s){  addLdc(constPool.addStringInfo(s));}  }
class C{  public Bindings addOptComponent(String property,Class<? extends IValidatable> clazz,JToggleButton c,boolean enabledByDefault){  Binding b=new OptComponentBinding(this,property,clazz,c,enabledByDefault);  if (_optComponents.containsKey(property)) {    throw new BindingException(Messages.getString("Bindings.duplicate.binding"));  }  _optComponents.put(property,b);  return this;}  }
class C{  private boolean checkForTrustedIdentity(final Certificate cert,PolicyInfo myInfo){  return false;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public void generate(File file){  if (fitnessGraph)   System.out.println("Generating Graph for uncoverd LCSAJ No: " + lcsaj.getID() + " in "+ lcsaj.getClassName()+ "/"+ lcsaj.getMethodName()); else   System.out.println("Generating Graph for LCSAJ No: " + lcsaj.getID() + " in "+ lcsaj.getClassName()+ "/"+ lcsaj.getMethodName());  Graph lcsaj_graph=new Graph();  ArrayList<Node> allNodes=new ArrayList<Node>();  for (  BytecodeInstruction b : graph.vertexSet()) {    Node n=new Node().attr("label",b.toString());    lcsaj_graph=lcsaj_graph.node(n);    allNodes.add(n);  }  for (  ControlFlowEdge edge : graph.edgeSet())   for (  Node source : allNodes)   for (  Node target : allNodes) {    BytecodeInstruction b1=graph.getEdgeSource(edge);    BytecodeInstruction b2=graph.getEdgeTarget(edge);    if (source.attr("label").equals(b1.toString()) && target.attr("label").equals(b2.toString())) {      if (b1.isBranch()) {        Edge newEdge=new Edge(source,target).attr("label",edge.toString());        lcsaj_graph.edge(newEdge);      } else       lcsaj_graph.edge(source,target);    }  }  BytecodeInstruction l1=lcsaj.getStartBranch().getInstruction();  BytecodeInstruction l2=lcsaj.getLastBranch().getInstruction();  if (fitnessGraph)   l2=lcsaj.getBranch(lcsaj.getdPositionReached()).getInstruction();  for (  Node source : allNodes)   for (  Node target : allNodes) {    if (source.attr("label").equals(l1.toString()) && target.attr("label").equals(l2.toString())) {      if (!fitnessGraph || lcsaj.getdPositionReached() == lcsaj.length() - 1) {        Edge newEdge=new Edge(source,target).attr("color","green").attr("label","LCSAJ No." + lcsaj.getID());        lcsaj_graph.edge(newEdge);      } else {        Edge newEdge=new Edge(source,target).attr("color","red").attr("label"," LCSAJ No." + lcsaj.getID() + ". Covered till:");        lcsaj_graph.edge(newEdge);      }    }  }  ArrayList<String> commandos=new ArrayList<String>();  commandos.add("dot");  try {    lcsaj_graph.generateTo(commandos,file);  } catch (  InterruptedException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private JavascriptCompiler(String sourceText){  this(sourceText,DEFAULT_FUNCTIONS);}  }
class C{  void release(long memPtr){  releasePooled(memPtr);}  }
class C{  public InputStream open(){  try {    if ("file".equals(url.getProtocol())) {      if (new File(url.toURI()).exists()) {        inputStream=url.openStream();      }    } else {      con=url.openConnection();      if (con instanceof JarURLConnection) {        JarURLConnection jarCon=(JarURLConnection)con;        jarCon.setUseCaches(false);        jarFile=jarCon.getJarFile();      }      inputStream=con.getInputStream();    }  } catch (  Exception e) {  }  return inputStream;}  }
class C{  private static Map<String,Set<Integer>> readConfigFile(File configFile) throws IOException {  Map<String,Set<Integer>> entries=new HashMap<>();  for (  String line : FileUtils.readLines(configFile)) {    String[] fields=line.split(FIELDSEPARATOR_CONFIGFILE);    if (fields.length < 2) {      throw new IllegalStateException(String.format("Could not parse config file '%s': Invalid line:%n%s",configFile,line));    }    if (entries.containsKey(fields[0])) {      throw new IllegalStateException(String.format("Could not parse config file '%s': duplicate corpus entry '%s'.",configFile,fields[0]));    }    Set<Integer> topicCounts=new HashSet<>(fields.length - 1);    for (int i=1; i < fields.length; i++) {      try {        topicCounts.add(Integer.parseInt(fields[i]));      } catch (      NumberFormatException e) {        throw new IllegalStateException(String.format("Could not parse config file '%s': Invalid topic number '%s'.",configFile,fields[i]));      }    }    entries.put(fields[0],topicCounts);  }  return entries;}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static void execute(Runnable runnable,String name,long warn_time_ms){  Inputs.checkNull(runnable,name);  long start=java.lang.System.currentTimeMillis();  runnable.run();  long delta=java.lang.System.currentTimeMillis() - start;  if (delta > warn_time_ms) {    logger.warn("Operation '{}' took too long: {}ms",name,delta);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.411 -0500",hash_original_method="67BF4A34EF6FC5C0D25A8D063BB6A336",hash_generated_method="9C47A17BBE50DDFC2AC16A06FC1F4AE1") public static ETC1Texture compressTexture(Buffer input,int width,int height,int pixelSize,int stride){  int encodedImageSize=ETC1.getEncodedDataSize(width,height);  ByteBuffer compressedImage=ByteBuffer.allocateDirect(encodedImageSize).order(ByteOrder.nativeOrder());  ETC1.encodeImage(input,width,height,3,stride,compressedImage);  return new ETC1Texture(width,height,compressedImage);}  }
class C{  protected void removeLinkFromStorage(Link lt){  String id=getLinkId(lt);  storageSourceService.deleteRowAsync(LINK_TABLE_NAME,id);}  }
class C{  protected void replace(final String paramText,final String newText){  int loc=builder.indexOf(paramText);  while (loc >= 0) {    builder.replace(loc,loc + paramText.length(),newText);    loc=builder.indexOf(paramText);  }}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  canvas.drawLine(x,y,x + SHAPE_WIDTH,y,paint);  if (isRenderPoints(renderer)) {    pointsChart.drawLegendShape(canvas,renderer,x + 5,y,seriesIndex,paint);  }}  }
class C{  private void addAnnotationItem(AnnotationModel annotationModel,Annotation annotation,Map<String,String> decorations){  if (this.hasTextMarkers != null) {    final String className=decorations.get(annotation.getType());    if (className == null) {      return;    }    final Position position=annotationModel.getPosition(annotation);    if (position == null) {      Log.warn(InlineAnnotationRenderer.class,"Can't add annotation with no position");      return;    }    final TextPosition from=this.document.getPositionFromIndex(position.getOffset());    final TextPosition to=this.document.getPositionFromIndex(position.getOffset() + position.getLength());    final MarkerRegistration registration=this.hasTextMarkers.addMarker(new TextRange(from,to),className);    if (registration != null) {      this.markers.put(annotation,registration);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Inline public static boolean incRC(Address entry,boolean root){  Address data=SimpleHashtable.getPayloadAddress(entry);  int old=data.loadInt();  data.store(old + (root ? ROOT_RC_INC : NORMAL_RC_INC));  return (old == 0);}  }
class C{  public int start(int group){  loadGroup(group);  return groups[2 * group];}  }
class C{  public static SequencesReader createSequencesReader(final File dir,final boolean loadNames,boolean loadFullNames,LongRange region) throws IOException {  return createSequencesReader(dir,loadNames,loadFullNames,region,DIRECT_SDF_LOAD);}  }
class C{  public void shutdown() throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  String path="/v1/system/shutdown".replaceAll("\\{format\\}","json");  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  apiClient.invokeAPI(path,"POST",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,null);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.COMMA_EXPRESSION;}  }
class C{  public void disconnectPort(DCCppNetworkPortController p){  istream=null;  ostream=null;  if (networkController != p) {    log.warn("disconnectPort: disconnect called from non-connected DCCppNetworkPortController");  }  networkController=null;}  }
class C{  public void add(@Nullable Image image,String string,@Nullable Color background,@Nullable Object data){  checkWidget();  if (string == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  TableItem newItem=new TableItem(this.table,SWT.NONE);  newItem.setText(string);  newItem.setData(data);  if (image != null) {    newItem.setImage(image);    if (imageLabel.getImage() == null) {      imageLabel.setImage(image);    }  }  if (background != null) {    newItem.setBackground(background);  }}  }
class C{  private static List<Ignite> allGrids(boolean wait){  List<Ignite> allIgnites=new ArrayList<>(grids.size() + 1);  for (  IgniteNamedInstance grid : grids.values()) {    Ignite g=wait ? grid.grid() : grid.gridx();    if (g != null)     allIgnites.add(g);  }  IgniteNamedInstance dfltGrid0=dfltGrid;  if (dfltGrid0 != null) {    IgniteKernal g=wait ? dfltGrid0.grid() : dfltGrid0.gridx();    if (g != null)     allIgnites.add(g);  }  return allIgnites;}  }
class C{  public void testBug3804() throws Exception {  if (versionMeetsMinimum(4,1)) {    try {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3804");      this.stmt.executeUpdate("CREATE TABLE testBug3804 (field1 VARCHAR(5))");      boolean caughtTruncation=false;      try {        this.stmt.executeUpdate("INSERT INTO testBug3804 VALUES ('1234567')");      } catch (      DataTruncation truncationEx) {        caughtTruncation=true;        System.out.println(truncationEx);      }      assertTrue("Data truncation exception should've been thrown",caughtTruncation);    }  finally {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3804");    }  }}  }
class C{  @AfterMethod public void cleanUp() throws IOException {  if (Files.exists(Paths.get(TEST_FOLDER))) {    Files.walkFileTree(Paths.get(TEST_FOLDER),new DeleteFileVisitor());    Files.deleteIfExists(Paths.get(TEST_FOLDER));  }}  }
class C{  public PingLauncher(){}  }
class C{  public String toString(boolean detail){  if (!detail || resolvedObj == null) {    return toString();  } else {    return (toString() + "; resolved object " + resolvedObj);  }}  }
class C{  public double t(int i){  return timesFromTips[i];}  }
class C{  public void close(){  if (processorIterator != null && processorIterator instanceof ServiceIterator) {    ((ServiceIterator)processorIterator).close();  }}  }
class C{  @Override public void destroySendIO(){  try {    mOut.close();  } catch (  IOException e) {    e.printStackTrace();  } finally {    mOut=null;  }  mOutBuffer=null;}  }
class C{  @RequestMapping(value="/SAML2/SLO",method=RequestMethod.GET) public void sloDefaultTenant(Locale locale,Model model,HttpServletRequest request,HttpServletResponse response) throws IOException {  logger.info("Welcome to Single Logout request/response handler! " + "The client locale is " + locale.toString() + ", DEFAULT tenant");  slo(locale,Shared.getDefaultTenant(),model,request,response);}  }
class C{  protected void clear(){  objectStore.clear();}  }
class C{  void createMap(Thread t,T firstValue){  t.threadLocals=new ThreadLocalMap(this,firstValue);}  }
class C{  public static void addModule(final ConfModule a) throws GeneralException {  if (modulesMap.containsKey(a.getType()) == true) {    if (Cfg.DEBUG) {      Check.log(TAG + " Warn: " + "Substituting module: "+ a);    }  }  final String key=a.getType();  if (Cfg.DEBUG) {    Check.asserts(key != null,"null key");  }  modulesMap.put(a.getType(),a);}  }
class C{  public CommitParams withTag(String tag){  this.tag=tag;  return this;}  }
class C{  public HttpBinaryResponseStrategy(final DeserializationContext context){  this.context=context;}  }
class C{  public static IShape buildPolyhedron(final List<IShape> points,final Double depth){  IShape g=buildPolygon(points);  if (!Spatial.ThreeD.isClockwise(null,g)) {    g=Spatial.ThreeD.changeClockwise(null,g);  }  g.setDepth(depth);  g.setAttribute(IShape.TYPE_ATTRIBUTE,POLYHEDRON);  return g;}  }
class C{  private static BinlogEventV4 formXidEvent(int txId){  BinlogEventV4HeaderImpl xidEventV4Header=new BinlogEventV4HeaderImpl();  xidEventV4Header.setTimestamp(System.currentTimeMillis());  xidEventV4Header.setEventType(MySQLConstants.XID_EVENT);  xidEventV4Header.setServerId(1);  XidEvent xidEvent=new XidEvent(xidEventV4Header);  xidEvent.setXid(txId);  return xidEvent;}  }
class C{  private void readObject(){}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public IntStack(int blocksize){  super(blocksize);}  }
class C{  public void removeChangeListener(ChangeListener cl){  m_listeners.remove(cl);}  }
class C{  public boolean isIdocAdmin(){  try {    UserProfile profile=_profiles.getProductProfile(ISicresAdminUserDefsKeys.PRODUCT_IDOC);    int prof=profile.getProfile();    if ((prof == ISicresAdminUserDefsKeys.PROFILE_MANAGER) || (prof == ISicresAdminUserDefsKeys.PROFILE_SUPERUSER)) {      return true;    }  } catch (  Exception e) {  }  return false;}  }
class C{  public TacticalGraphicLabel(){}  }
class C{  private String sendRequest(String url,Map<String,String> params,String type) throws Exception {  HttpRequestBase request;  if (type.equals("get")) {    request=new HttpGet(url);  } else {    request=new HttpPost(url);  }  URIBuilder uriBuilder=new URIBuilder(request.getURI());  for (  Map.Entry<String,String> entry : params.entrySet()) {    uriBuilder.addParameter(entry.getKey(),entry.getValue());  }  uriBuilder.setParameter("session.id",this.sessionId);  request.setURI(uriBuilder.build());  request.setHeader("Content-Type","application/json");  SSLContextBuilder sslBuilder=new SSLContextBuilder();  sslBuilder.loadTrustMaterial(null,(TrustStrategy)new TrustSelfSignedStrategy());  SSLConnectionSocketFactory sslsf=new SSLConnectionSocketFactory(sslBuilder.build());  CloseableHttpClient httpclient=HttpClients.custom().setSSLSocketFactory(sslsf).build();  HttpResponse response=httpclient.execute(request);  String stringResponse=EntityUtils.toString(response.getEntity());  if (isSessionExpired(stringResponse)) {    String sessionId=getAzkabanSessionId(this.azkabanUserName,this.azkabanPassword);    uriBuilder.setParameter("session.id",sessionId);    request.setURI(uriBuilder.build());    response=httpclient.execute(request);    stringResponse=EntityUtils.toString(response.getEntity());  }  return stringResponse;}  }
class C{  void sendReply(InternalDistributedMember member,int procId,DM dm,ReplyException ex,boolean result,Map<String,Integer> indexBucketsMap,int numTotalBuckets){  IndexCreationReplyMsg.send(member,procId,dm,ex,result,indexBucketsMap,numTotalBuckets);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean itemsEqual(ItemStack item1,ItemStack item2){  if (!item1.getType().equals(item2.getType())) {    return false;  }  return toMaxDurability(item1).isSimilar(toMaxDurability(item2));}  }
class C{  public SpriteSheetDrawer dpSize(@NonNull Context context){  mDpSize=true;  mBitmapDpWidth=Util.convertPixelsToDp(mSpriteSheet.frameWidth,context);  mBitmapDpHeight=Util.convertPixelsToDp(mSpriteSheet.frameHeight,context);  return this;}  }
class C{  private static String findSomeFile(String dir,boolean create){  File d=new File(dir);  String[] dl=d.list();  if (dl == null) {    throw new RuntimeException("Can't list " + dir);  }  for (int i=0; i < dl.length; i++) {    File f=new File(dir,dl[i]);    if (Files.isRegularFile(f.toPath(),LinkOption.NOFOLLOW_LINKS)) {      return dl[i];    }  }  String f=findSomeFile(dir,"",dl);  if (f != null) {    return f;  }  if (create) {    File nf=new File(d,gensym());    OutputStream os;    try {      os=new FileOutputStream(nf);      os.close();    } catch (    IOException x) {      throw new RuntimeException("Can't create a file in " + dir);    }    return nf.getName();  }  return null;}  }
class C{  public void flatten(TreeNode root){  while (root != null) {    if (root.left != null) {      TreeNode n=root.left;      while (n.right != null)       n=n.right;      n.right=root.right;      root.right=root.left;      root.left=null;    }    root=root.right;  }}  }
class C{  synchronized public void deleteMessage(String from){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(InviteMessgeDao.TABLE_NAME,InviteMessgeDao.COLUMN_NAME_FROM + " = ?",new String[]{from});  }}  }
class C{  public boolean isFullRank(){  for (int j=0; j < n; j++) {    if (Rdiag[j] == 0)     return false;  }  return true;}  }
class C{  private int countFeedsWithUnread(){  int total=0;  Cursor c=null;  final SQLiteDatabase db=getOpenHelper().getWritableDatabase();  try {    db.beginTransaction();    final ContentValues cv=new ContentValues(1);    c=db.query(TABLE_ARTICLES,new String[]{"feedId","count(*)"},"isUnread>0",null,"feedId",null,null,null);    while (c.moveToNext()) {      int feedId=c.getInt(0);      int unreadCount=c.getInt(1);      total+=unreadCount;      cv.put(COL_UNREAD,unreadCount);      db.update(TABLE_FEEDS,cv,"_id=" + feedId,null);    }    db.setTransactionSuccessful();  }  finally {    if (c != null && !c.isClosed())     c.close();    db.endTransaction();  }  return total;}  }
class C{  static void luBacksubstitution(double[] matrix1,int[] row_perm,double[] matrix2){  int i, ii, ip, j, k;  int rp;  int cv, rv;  rp=0;  for (k=0; k < 3; k++) {    cv=k;    ii=-1;    for (i=0; i < 3; i++) {      double sum;      ip=row_perm[rp + i];      sum=matrix2[cv + 3 * ip];      matrix2[cv + 3 * ip]=matrix2[cv + 3 * i];      if (ii >= 0) {        rv=i * 3;        for (j=ii; j <= i - 1; j++) {          sum-=matrix1[rv + j] * matrix2[cv + 3 * j];        }      } else       if (sum != 0.0) {        ii=i;      }      matrix2[cv + 3 * i]=sum;    }    rv=2 * 3;    matrix2[cv + 3 * 2]/=matrix1[rv + 2];    rv-=3;    matrix2[cv + 3 * 1]=(matrix2[cv + 3 * 1] - matrix1[rv + 2] * matrix2[cv + 3 * 2]) / matrix1[rv + 1];    rv-=3;    matrix2[cv + 4 * 0]=(matrix2[cv + 3 * 0] - matrix1[rv + 1] * matrix2[cv + 3 * 1] - matrix1[rv + 2] * matrix2[cv + 3 * 2]) / matrix1[rv + 0];  }}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  private double flipLabel(double nonPredictedLabel){  return 1.0d - nonPredictedLabel;}  }
class C{  private Object js_parseFloat(Object[] args){  if (args.length < 1)   return ScriptRuntime.NaNobj;  String s=ScriptRuntime.toString(args[0]);  int len=s.length();  int start=0;  char c;  for (; ; ) {    if (start == len) {      return ScriptRuntime.NaNobj;    }    c=s.charAt(start);    if (!ScriptRuntime.isStrWhiteSpaceChar(c)) {      break;    }    ++start;  }  int i=start;  if (c == '+' || c == '-') {    ++i;    if (i == len) {      return ScriptRuntime.NaNobj;    }    c=s.charAt(i);  }  if (c == 'I') {    if (i + 8 <= len && s.regionMatches(i,"Infinity",0,8)) {      double d;      if (s.charAt(start) == '-') {        d=Double.NEGATIVE_INFINITY;      } else {        d=Double.POSITIVE_INFINITY;      }      return ScriptRuntime.wrapNumber(d);    }    return ScriptRuntime.NaNobj;  }  int decimal=-1;  int exponent=-1;  boolean exponentValid=false;  for (; i < len; i++) {switch (s.charAt(i)) {case '.':      if (decimal != -1)       break;    decimal=i;  continue;case 'e':case 'E':if (exponent != -1) {  break;} else if (i == len - 1) {  break;}exponent=i;continue;case '+':case '-':if (exponent != i - 1) {break;} else if (i == len - 1) {--i;break;}continue;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':if (exponent != -1) {exponentValid=true;}continue;default :break;}break;}if (exponent != -1 && !exponentValid) {i=exponent;}s=s.substring(start,i);try {return Double.valueOf(s);} catch (NumberFormatException ex) {return ScriptRuntime.NaNobj;}}  }
class C{  private static InetAddress findAddressUsingStrategy(AddressDetectionState strategy,InetSocketAddress targetAddress,boolean logging) throws IOException {  if (strategy == AddressDetectionState.LOCAL_HOST) {    InetAddress localhostName=InetAddress.getLocalHost();    if (tryToConnect(localhostName,targetAddress,strategy.getTimeout(),logging)) {      LOG.debug("Using InetAddress.getLocalHost() immediately for the connecting address");      return localhostName;    } else {      return null;    }  }  final byte[] targetAddressBytes=targetAddress.getAddress().getAddress();  Enumeration<NetworkInterface> e=NetworkInterface.getNetworkInterfaces();  while (e.hasMoreElements()) {    NetworkInterface netInterface=e.nextElement();    Enumeration<InetAddress> ee=netInterface.getInetAddresses();    while (ee.hasMoreElements()) {      InetAddress interfaceAddress=ee.nextElement();switch (strategy) {case ADDRESS:        if (hasCommonPrefix(targetAddressBytes,interfaceAddress.getAddress())) {          LOG.debug("Target address {} and local address {} share prefix - trying to connect.",targetAddress,interfaceAddress);          if (tryToConnect(interfaceAddress,targetAddress,strategy.getTimeout(),logging)) {            return tryLocalHostBeforeReturning(interfaceAddress,targetAddress,logging);          }        }      break;case FAST_CONNECT:case SLOW_CONNECT:    LOG.debug("Trying to connect to {} from local address {} with timeout {}",targetAddress,interfaceAddress,strategy.getTimeout());  if (tryToConnect(interfaceAddress,targetAddress,strategy.getTimeout(),logging)) {    return tryLocalHostBeforeReturning(interfaceAddress,targetAddress,logging);  }break;case HEURISTIC:if (LOG.isDebugEnabled()) {LOG.debug("Checking address {} using heuristics: linkLocal: {} loopback: {}",interfaceAddress,interfaceAddress.isLinkLocalAddress(),interfaceAddress.isLoopbackAddress());}if (interfaceAddress instanceof Inet4Address && !interfaceAddress.isLinkLocalAddress() && !interfaceAddress.isLoopbackAddress()) {return tryLocalHostBeforeReturning(interfaceAddress,targetAddress,logging);}break;default :throw new RuntimeException("Unsupported strategy: " + strategy);}}}return null;}  }
class C{  public static void printNumberOfAgentTypes(String population){  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  PopulationReader pr=new PopulationReader(sc);  pr.readFile(population);  Map<String,Integer> map=new TreeMap<String,Integer>();  for (  Id<Person> id : sc.getPopulation().getPersons().keySet()) {    String agentType=id.toString().split("_")[0];    if (map.containsKey(agentType)) {      map.put(agentType,map.get(agentType) + 1);    } else {      map.put(agentType,1);    }  }  LOG.info("--------------------------------------------");  for (  String s : map.keySet()) {    LOG.info("   " + s + ": "+ String.valueOf(map.get(s)));  }  LOG.info("--------------------------------------------");}  }
class C{  public static void installNodePackage(String nodePackageName,String version,boolean global){  logger.debug("installing " + nodePackageName + " with npm");  initNode();  if (global) {    runCommand(NPM_COMMAND,USER_HOME_DIR,false,null,null,null,"install","--prefix",NPM_DIR.getPath(),version == null ? nodePackageName : nodePackageName + "@" + version,"-g");  } else {    runCommand(NPM_COMMAND,USER_HOME_DIR,false,null,null,null,"install",version == null ? nodePackageName : nodePackageName + "@" + version,"--save");  }}  }
class C{  @SuppressWarnings("unchecked") public T withEventIndex(long eventIndex){  response.eventIndex=Assert.argNot(eventIndex,eventIndex < 0,"eventIndex must be positive");  return (T)this;}  }
class C{  private boolean isAccelerating(SensorEvent event){  float ax=event.values[0];  float ay=event.values[1];  float az=event.values[2];  final double magnitude=Math.sqrt(ax * ax + ay * ay + az * az);  return magnitude > ACCELERATION_THRESHOLD;}  }
class C{  static public Formatter percFormatter(){  return percFormatter;}  }
class C{  public static DNSQuestion newQuestion(String name,DNSRecordType type,DNSRecordClass recordClass,boolean unique){switch (type) {case TYPE_A:    return new DNS4Address(name,type,recordClass,unique);case TYPE_A6:  return new DNS6Address(name,type,recordClass,unique);case TYPE_AAAA:return new DNS6Address(name,type,recordClass,unique);case TYPE_ANY:return new AllRecords(name,type,recordClass,unique);case TYPE_HINFO:return new HostInformation(name,type,recordClass,unique);case TYPE_PTR:return new Pointer(name,type,recordClass,unique);case TYPE_SRV:return new Service(name,type,recordClass,unique);case TYPE_TXT:return new Text(name,type,recordClass,unique);default :return new DNSQuestion(name,type,recordClass,unique);}}  }
class C{  public String convert(String text){  String ret=text;  if (cpsUni2Uni == null)   return ret;  Iterator<String> it=cpsUni2Uni.keySet().iterator();  while (it.hasNext()) {    String cpsChar=it.next();    ret=ret.replaceAll(cpsChar,cpsUni2Uni.get(cpsChar));  }  return ret;}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T unwrap(Class<T> iface) throws SQLException {  if (isWrapperFor(iface)) {    return (T)this;  }  throw DbException.getInvalidValueException("iface",iface);}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3){  return construct(e1,e2,e3);}  }
class C{  public OMRaster(int x1,int y1,int w,int h,byte[] bytes,Color[] colorTable,int trans){  super(RENDERTYPE_XY,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  setColorModel(COLORMODEL_INDEXED);  x=x1;  y=y1;  width=w;  height=h;  bits=bytes;  transparent=trans;  if (colorTable != null) {    setColors(colorTable);  }  if (bits != null && bits.length != 0) {    if (colorTable != null && colors.length != 0) {      pixels=computePixels(bits);    }  } else {    bits=new byte[height * width];  }}  }
class C{  public void layout(Container container){  Dimension2D size=getPreferredSize(container);  Rectangle2D bounds=container.getBounds();  Insets2D insets=container.getInsets();  double xMin=bounds.getMinX() + insets.getLeft();  double yMin=bounds.getMinY() + insets.getTop();  double width=bounds.getWidth() - insets.getLeft() - insets.getRight();  double height=bounds.getHeight() - insets.getTop() - insets.getBottom();  int count=0;  if (getOrientation() == Orientation.HORIZONTAL) {    xMin+=Math.max(bounds.getWidth() - size.getWidth(),0.0) * defaultConstraints.getAlignmentX();    for (    Drawable component : container) {      if (count++ > 0) {        xMin+=getGapX();      }      Dimension2D compBounds=component.getPreferredSize();      Constraints constraints=getConstraints(component,container);      double componentHeight;      double componentY;      if (constraints.isStrechted()) {        componentHeight=height;        componentY=yMin;      } else {        componentHeight=Math.min(compBounds.getHeight(),height);        componentY=yMin + (height - componentHeight) * constraints.getAlignmentY();      }      component.setBounds(xMin,componentY,compBounds.getWidth(),componentHeight);      xMin+=compBounds.getWidth();    }  } else   if (getOrientation() == Orientation.VERTICAL) {    yMin+=Math.max(bounds.getHeight() - size.getHeight(),0.0) * defaultConstraints.getAlignmentY();    for (    Drawable component : container) {      if (count++ > 0) {        yMin+=getGapY();      }      Dimension2D compBounds=component.getPreferredSize();      Constraints constraints=getConstraints(component,container);      double componentWidth;      double componentX;      if (constraints.isStrechted()) {        componentWidth=width;        componentX=xMin;      } else {        componentWidth=Math.min(compBounds.getWidth(),width);        componentX=xMin + (width - componentWidth) * constraints.getAlignmentX();      }      component.setBounds(componentX,yMin,componentWidth,compBounds.getHeight());      yMin+=compBounds.getHeight();    }  }}  }
class C{  public SparseArray(int initialCapacity){  initialCapacity=idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  Arrays.fill(mKeys,-1);  mValues=new Double[initialCapacity];  mSize=0;}  }
class C{  private static boolean isCharacterInC0orC1Range(char ch){  if (ch == 0x09 || ch == 0x0A || ch == 0x0D)   return false; else   return (ch >= 0x7F && ch <= 0x9F) || (ch >= 0x01 && ch <= 0x1F);}  }
class C{  private Uri insertTrack(Uri url,ContentValues contentValues){  boolean hasStartTime=contentValues.containsKey(TracksColumns.STARTTIME);  boolean hasStartId=contentValues.containsKey(TracksColumns.STARTID);  if (!hasStartTime || !hasStartId) {    throw new IllegalArgumentException("Both start time and start id values are required.");  }  long rowId=db.insert(TracksColumns.TABLE_NAME,TracksColumns._ID,contentValues);  if (rowId >= 0) {    return ContentUris.appendId(TracksColumns.CONTENT_URI.buildUpon(),rowId).build();  }  throw new SQLException("Failed to insert a track " + url);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public int queryGreaterThanCount(String type,int index,String value,int visibilityScope) throws CloudException {  return ((Integer)queryImpl(type,value,index,0,0,visibilityScope,2,0,false,true,false,null)).intValue();}  }
class C{  public static String arrayToListTrim(String[] array,String delimiter){  return trim(arrayToList(array,delimiter),delimiter,false);}  }
class C{  public void addArchiveResourceId(ArchiveResourceId archiveResourceId){  getArchiveResourceIds().add(archiveResourceId);}  }
class C{  @Inline @Uninterruptible public static void makeUnlogged(ObjectReference object){  Word oldValue, newValue;  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(oldValue.and(LOGGING_MASK).EQ(LOGGED));    newValue=oldValue.or(UNLOGGED);  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));}  }
class C{  public void addLogEntryForAuditLogData(DataService ds,Subscription subscription,String locale,boolean isDescriptionLocalized,boolean isLicenseLocalized){  BESAuditLogEntry logEntry=createAuditLogEntry(ds,SubscriptionAuditLogOperation.LOCALIZE_PRICE_MODEL_FOR_SUBSCRIPTION,subscription);  logEntry.addCustomer(subscription.getOrganization());  logEntry.addParameter(AuditLogParameter.LOCALE,locale);  logEntry.addParameter(AuditLogParameter.DESCRIPTION,toYesOrNo(isDescriptionLocalized));  logEntry.addParameter(AuditLogParameter.LICENSE,toYesOrNo(isLicenseLocalized));  AuditLogData.add(logEntry);}  }
class C{  protected void paint(SynthContext context,Graphics g){  int selectedIndex=tabPane.getSelectedIndex();  int tabPlacement=tabPane.getTabPlacement();  ensureCurrentLayout();  if (!scrollableTabLayoutEnabled()) {    Insets insets=tabPane.getInsets();    int x=insets.left;    int y=insets.top;    int width=tabPane.getWidth() - insets.left - insets.right;    int height=tabPane.getHeight() - insets.top - insets.bottom;    int size;switch (tabPlacement) {case LEFT:      width=calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth);    break;case RIGHT:  size=calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth);x=x + width - size;width=size;break;case BOTTOM:size=calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight);y=y + height - size;height=size;break;case TOP:default :height=calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight);}tabAreaBounds.setBounds(x,y,width,height);if (g.getClipBounds().intersects(tabAreaBounds)) {paintTabArea(tabAreaContext,g,tabPlacement,selectedIndex,tabAreaBounds);}}paintContentBorder(tabContentContext,g,tabPlacement,selectedIndex);}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.PARAMETERIZED_TYPE_REF;}  }
class C{  public boolean isKey(){  Object oo=get_Value(COLUMNNAME_IsKey);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean foo_bar1(String x){  if (x.length() > 0)   return true; else   return false;}  }
class C{  public void testCountTableSql(){  final String expected="SELECT EXISTS(SELECT 1 FROM MockModel )";  String actual=new Select().from(MockModel.class).toExistsSql();  assertEquals(expected,actual);}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  public boolean isHiddenDashed(){  return (hiddenDashed);}  }
class C{  public static boolean hasLocalChanges(boolean staged,Project project,VirtualFile root) throws VcsException {  final GitSimpleHandler diff=new GitSimpleHandler(project,root,GitCommand.DIFF);  diff.addParameters("--name-only");  if (staged) {    diff.addParameters("--cached");  }  diff.setStdoutSuppressed(true);  diff.setStderrSuppressed(true);  diff.setSilent(true);  final String output=diff.run();  return !output.trim().isEmpty();}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public void add(int value){  if (size >= data.length) {    ensureCapacity(size + size);  }  data[size++]=value;}  }
class C{  void registerLaunch(IBinder session,String url){  int outcome;  long elapsedTimeMs=-1;synchronized (mLock) {    SessionParams sessionParams=mSessionParams.get(session);    if (sessionParams == null) {      outcome=NO_PREDICTION;    } else {      String predictedUrl=sessionParams.getPredictedUrl();      outcome=predictedUrl == null ? NO_PREDICTION : predictedUrl.equals(url) ? GOOD_PREDICTION : BAD_PREDICTION;      elapsedTimeMs=SystemClock.elapsedRealtime() - sessionParams.getLastMayLaunchUrlTimestamp();      sessionParams.setPredictionMetrics(null,0);      if (outcome == GOOD_PREDICTION) {        mUidToPredictionsStats.put(sessionParams.mUid,new PredictionStats());      }    }  }  RecordHistogram.recordEnumeratedHistogram("CustomTabs.PredictionStatus",outcome,PREDICTION_STATUS_COUNT);  if (outcome == GOOD_PREDICTION) {    RecordHistogram.recordCustomTimesHistogram("CustomTabs.PredictionToLaunch",elapsedTimeMs,1,TimeUnit.MINUTES.toMillis(3),TimeUnit.MILLISECONDS,100);  }}  }
class C{  public MaterialTab createCustomTextTab(int custom_tab_layout_id,String label_text,boolean withBubble){  final MaterialTab mattab=new MaterialTab(this.getContext(),new tabBuilder(withBubble ? tabBuilder.layout.TAB_CUSTOM_TEXT : tabBuilder.layout.TAB_CUSTOM_NO_BUBBLE).with(getContext()).setLayout(custom_tab_layout_id).initInstance());  mattab.setText(label_text);  return mattab;}  }
class C{  public ProductFilter(){  initComponents();}  }
class C{  public static List executeOn(Connection conn,ExecutablePool pool,String region,Object key,int interestType,InterestResultPolicy policy,boolean isDurable,boolean receiveUpdatesAsInvalidates,byte regionDataPolicy){  AbstractOp op=new RegisterInterestOpImpl(region,key,interestType,policy,isDurable,receiveUpdatesAsInvalidates,regionDataPolicy);  return (List)pool.executeOn(conn,op);}  }
class C{  public ConcurrentModificationException(String type,int version){  super("Outdated " + type + " in version "+ version);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.main);  activity=this;  initViews();  initSmartExecutor();}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryStorageCapabilitiesResponse queryStorageCapabilities(com.emc.storageos.vasa.VasaServiceStub.QueryStorageCapabilities queryStorageCapabilities1) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[0].getName());    _operationClient.getOptions().setAction("urn:queryStorageCapabilities");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryStorageCapabilities1,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryStorageCapabilities")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryStorageCapabilitiesResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryStorageCapabilitiesResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public DrawerBuilder withDrawerLayout(@LayoutRes int resLayout){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (resLayout != -1) {    this.mDrawerLayout=(DrawerLayout)mActivity.getLayoutInflater().inflate(resLayout,mRootView,false);  } else {    this.mDrawerLayout=(DrawerLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer,mRootView,false);  }  return this;}  }
class C{  private void handleLocalAssociatedOther(){  for (  ArrayList<RegisterSpec> specs : localVariables.values()) {    int ropReg=paramRangeEnd;    boolean done=false;    do {      int maxCategory=1;      int sz=specs.size();      for (int i=0; i < sz; i++) {        RegisterSpec ssaSpec=specs.get(i);        int category=ssaSpec.getCategory();        if (!ssaRegsMapped.get(ssaSpec.getReg()) && category > maxCategory) {          maxCategory=category;        }      }      ropReg=findRopRegForLocal(ropReg,maxCategory);      if (canMapRegs(specs,ropReg)) {        done=tryMapRegs(specs,ropReg,maxCategory,true);      }      ropReg++;    } while (!done);  }}  }
class C{  public boolean canSetString(){  return m_parser != null && !(m_parser instanceof ObjectParser);}  }
class C{  private static int checkIdentifier(final String signature,int pos){  if (!Character.isJavaIdentifierStart(getChar(signature,pos))) {    throw new IllegalArgumentException(signature + ": identifier expected at index " + pos);  }  ++pos;  while (Character.isJavaIdentifierPart(getChar(signature,pos))) {    ++pos;  }  return pos;}  }
class C{  public boolean checkNoRotation(){  for (  TrackedFile incomingFile : incoming) {    if (!hasCounterpart(incomingFile))     return false;    TrackedFile currentCounterpart=getCounterpart(incomingFile);    if (!incomingFile.isSameAs(currentCounterpart) || !incomingFile.getPath().equals(currentCounterpart.getPath()))     return false;    if (currentCounterpart == currentOpenFile) {      if (incomingFile.getSize() < currentCounterpart.getSize() || incomingFile.getLastModifiedTime() < currentCounterpart.getLastModifiedTime())       return false;    } else {      if (incomingFile.getSize() != currentCounterpart.getSize() || incomingFile.getLastModifiedTime() != currentCounterpart.getLastModifiedTime())       return false;    }  }  if (incoming.size() > current.size())   return false; else   if (incoming.size() < current.size()) {    int firstMissingFileIndex=incoming.size();    for (int i=0; i < firstMissingFileIndex; ++i)     if (!hasCounterpart(current.get(i)))     return false;    for (int i=firstMissingFileIndex; i < current.size(); ++i)     if (hasCounterpart(current.get(i)))     return false;  }  if (currentOpenFile != null && !hasCounterpart(currentOpenFile))   return false;  if (!getIncomingAnomalies().isEmpty())   return false;  return true;}  }
class C{  public T caseN4InterfaceDeclaration(N4InterfaceDeclaration object){  return null;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void validateCompositeData(CompositeData cd){  if (cd == null) {    throw new NullPointerException("Null CompositeData");  }  if (!isTypeMatched(memoryUsageCompositeType,cd.getCompositeType())) {    throw new IllegalArgumentException("Unexpected composite type for MemoryUsage");  }}  }
class C{  public void addNamespace(String prefix,String namespaceURI){  this.pfxToUri.put(prefix,namespaceURI);  this.uriToPfx.put(namespaceURI,prefix);}  }
class C{  public static void main(final String[] args) throws InterruptedException {  Arrays.sort(args);  final IBufferAccess buf=DirectBufferPool.INSTANCE.acquire();  try {    for (    String arg : args) {      final File file=new File(arg);      if (!file.exists()) {        System.err.println("No such file: " + file);        continue;      }      if (file.isDirectory()) {        doDirectory(file,buf);      } else {        doFile(file,buf);      }    }  }  finally {    buf.release();  }}  }
class C{  public IngestStrategy buildIngestStrategy(UnManagedVolume unManagedVolume,boolean disregardProtection){  String remoteMirrorEnabledInVolume=unManagedVolume.getVolumeCharacterstics().get(SupportedVolumeCharacterstics.REMOTE_MIRRORING.toString());  String replicationStrategy;  boolean isVplexVolume=VolumeIngestionUtil.isVplexVolume(unManagedVolume);  boolean isRpEnabled=VolumeIngestionUtil.checkUnManagedResourceIsRecoverPointEnabled(unManagedVolume);  if (!disregardProtection && isRpEnabled) {    replicationStrategy=ReplicationStrategy.RP.name();  } else   if (isVplexVolume) {    replicationStrategy=ReplicationStrategy.VPLEX.name();  } else   if (null == remoteMirrorEnabledInVolume || !Boolean.parseBoolean(remoteMirrorEnabledInVolume)) {    replicationStrategy=ReplicationStrategy.LOCAL.name();  } else {    replicationStrategy=ReplicationStrategy.REMOTE.name();  }  String volumeType=VolumeType.VOLUME.name();  if ((VolumeIngestionUtil.isSnapshot(unManagedVolume)) && (!VolumeIngestionUtil.isVplexBackendVolume(unManagedVolume))) {    volumeType=VolumeType.SNAPSHOT.name();  } else   if (VolumeIngestionUtil.isMirror(unManagedVolume)) {    volumeType=VolumeType.MIRROR.name();  }  String strategyKey=replicationStrategy + "_" + volumeType;  _logger.info("strategy key is " + strategyKey);  if (null == ingestStrategyMap.get(strategyKey)) {    IngestStrategy strategy=getIngestStrategy(IngestStrategyEnum.getIngestStrategy(strategyKey));    _logger.debug("ingest strategy map does not contain key, adding " + strategyKey + " for "+ strategy);    ingestStrategyMap.put(strategyKey,strategy);  }  return ingestStrategyMap.get(strategyKey);}  }
class C{  private byte[] encodePKCS7() throws CertificateEncodingException {  PKCS7 p7=new PKCS7(new AlgorithmId[0],new ContentInfo(ContentInfo.DATA_OID,null),certs.toArray(new X509Certificate[certs.size()]),new SignerInfo[0]);  DerOutputStream derout=new DerOutputStream();  try {    p7.encodeSignedData(derout);  } catch (  IOException ioe) {    throw new CertificateEncodingException(ioe.getMessage());  }  return derout.toByteArray();}  }
class C{  protected void run(WorkerThread.Paceable paceable,MessageListener listener){  Log.logger.info("START");  while (!done && !shutdown) {    try {      status=sCONNECTING;      buildJMSResources();      status=sRUNNING;      Log.logger.fine("Entering client loop");      if (listener != null) {        startTime=System.currentTimeMillis();        messageConsumer.setMessageListener(listener);        waitForShutdownSignal();      } else {        pace(paceable);      }      done=true;    } catch (    JMSException je) {      if (ignoreExceptions) {        Log.logger.fine("disconnected?");      } else {        handleException(je);      }    }catch (    Throwable e) {      handleException(e);    } finally {      if (done) {        status=(status & sERROR) | sENDING;        if (endTime == 0) {          endTime=System.currentTimeMillis();        }        destroyJMSResources(false);        Log.logger.info("STOP");        status=(status & sERROR) | sENDED;      } else {      }    }  }}  }
class C{  public void printGraphvizDistrPNG(LogicCircuit lc,String outfile){  String gvText="#GRAPHVIZ_OUTPUT \n";  gvText+="digraph{ \n";  gvText+="rankdir=LR; \n";  gvText+="splines=ortho; \n";  for (int i=0; i < lc.get_output_gates().size(); ++i) {    Gate g=lc.get_output_gates().get(i);    gvText+=g.Name + "[shape=none,label=\"" + lc.get_output_gates().get(i).Name+ "\"]; \n";  }  for (int i=lc.get_Gates().size() - 1; i >= 0; --i) {    Gate g=lc.get_Gates().get(i);    if (g.Type == Gate.GateType.OUTPUT || g.Type == Gate.GateType.OUTPUT_OR) {      continue;    }    String shape=g.Name;    if (g.Type == Gate.GateType.INPUT) {      gvText+=g.Name + "[shape=none,label=\"" + shape+ "\"]; \n";    } else {      String image_location="\"" + lc.get_assignment_name() + "_"+ g.Name+ "_gate.png"+ "\"";      gvText+=g.Name + "[fixedsize=true,height=1.0,width=1.0,label=\"\",shape=none,image=" + image_location+ "]; \n";    }  }  for (int i=0; i < lc.get_Wires().size(); ++i) {    Wire w=lc.get_Wires().get(i);    String child=w.To.Name;    String parent=w.From.Name;    gvText+=child + " ->" + parent+ " ; \n";  }  gvText+="} \n";  Util.fileWriter(_output_directory + outfile,gvText,false);}  }
class C{  public void testSetBitException(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.setBit(number);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  LOG.i(TAG,"Apache Cordova native platform version " + CordovaWebView.CORDOVA_VERSION + " is starting");  LOG.d(TAG,"CordovaActivity.onCreate()");  loadConfig();  if (!preferences.getBoolean("ShowTitle",false)) {    getWindow().requestFeature(Window.FEATURE_NO_TITLE);  }  if (preferences.getBoolean("SetFullscreen",false)) {    Log.d(TAG,"The SetFullscreen configuration is deprecated in favor of Fullscreen, and will be removed in a future version.");    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);  } else   if (preferences.getBoolean("Fullscreen",false)) {    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);  } else {    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN,WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);  }  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    initCallbackClass=savedInstanceState.getString("callbackClass");  }}  }
class C{  @Override public void overrideNextAnimation(int animIn,int animOut){  getNavigationManager().overrideNextAnimation(animIn,animOut);}  }
class C{  public void connectionErrorOccurred(ConnectionEvent event){  if (isActive) {    try {      PooledConnection conn=(PooledConnection)event.getSource();      provider.returnAndExpireConnection(conn);    } catch (    Exception ex) {      String exception="GemFireConnPooledDataSource::connectionErrorOccured:error in returning and expiring connection due to " + ex;      if (logger.isDebugEnabled()) {        logger.debug(exception,ex);      }    }  }}  }
class C{  public String apply(){  return null;}  }
class C{  public final void testReadbyteArrayintint02() throws IOException {  assertEquals(0,MY_MESSAGE_LEN % CHUNK_SIZE);  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      byte[] bArray=new byte[MY_MESSAGE_LEN];      for (int i=0; i < MY_MESSAGE_LEN / CHUNK_SIZE; i++) {        assertTrue("retval",dis.read(bArray,i * CHUNK_SIZE,CHUNK_SIZE) == CHUNK_SIZE);      }      assertTrue("bArray",Arrays.equals(myMessage,bArray));      assertTrue("update",Arrays.equals(dis.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[ii])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public synchronized Object pop() throws RuntimeException {  if (m_Head == null) {    throw new RuntimeException("Queue is empty");  }  Object retval=m_Head.contents();  m_Size--;  m_Head=m_Head.next();  if (m_Head == null) {    m_Tail=null;  }  return retval;}  }
class C{  public NoSupportForMissingValuesException(){  super();}  }
class C{  @Override public String toString(){  return getFullPath();}  }
class C{  public static void closeCache(){  if (cache != null && !cache.isClosed()) {    cache.close();    cache.getDistributedSystem().disconnect();  }}  }
class C{  public MeanCentroidDistance(DistanceMetric dm){  this.dm=dm;}  }
class C{  public Builder textColorButton(@ColorRes int... color){  if (color.length > 2) {    Log.e("TextColorButton","Impossible to set Text Color Button value more than 2! Please Check it");    throw new IllegalArgumentException("Impossible to set Text Color Button value more than 2! Please Check it");  }  if (color.length > 0) {    if (color[0] == 0) {      Log.e("TextColorButton","Impossible to set Text Color Button to 0, default value black is set! Please Check it");      mTextColorBtn1=android.R.color.black;    } else {      mTextColorBtn1=color[0];    }  }  if (color.length > 1) {    if (color[1] == 0) {      Log.e("TextColorButton","Impossible to set Text Color Button to 0, default value black is set! Please Check it");      mTextColorBtn2=android.R.color.black;    } else {      mTextColorBtn2=color[1];    }  }  return this;}  }
class C{  final void updateScrimVisibility(){  if (mContentScrim != null || mStatusBarScrim != null) {    setScrimsShown(getHeight() + mCurrentOffset < getScrimVisibleHeightTrigger());  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:18.786 -0500",hash_original_method="418256DED150EC59875240044DA6104A",hash_generated_method="8D968F93EAB2D7A400AB6776E32FE6E3") private char skipWhiteSpace(char c){  int len;  len=line.length();  while (next < len && Character.isWhitespace(c)) {    c=line.charAt(next++);  }  if (Character.isWhitespace(c)) {    throw new ATParseEx();  }  return c;}  }
class C{  public static void disableLighting(){  RenderHelper.disableStandardItemLighting();  OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit,240.0F,240.0F);}  }
class C{  public char nextChar(){  if (!hasNextChar())   throw new IllegalStateException("Reached end of string!");  char c=content.charAt(currentPosition);  stepForward(1);  return c;}  }
class C{  public List<ProductAssociation> findProductAssociations(final Long productId,final String associationCode){  return productAssociationDao.findByNamedQuery("PRODUCT.ASSOCIATIONS.BY.TYPE",productId,associationCode);}  }
class C{  public synchronized void countFeature(int featureId){synchronized (featureCounts) {    if (!featureCounts.containsKey(featureId))     featureCounts.put(featureId,1); else     featureCounts.put(featureId,featureCounts.get(featureId) + 1);  }}  }
class C{  public Jerry last(){  List<Node> result=new NodeList(nodes.length);  if (nodes.length > 0) {    result.add(nodes[nodes.length - 1]);  }  return new Jerry(this,result);}  }
class C{  public Info_Column(String colHeader,String colSQL,Class colClass,boolean readOnly,boolean colorColumn,String IDcolSQL){  setColHeader(colHeader);  setColSQL(colSQL);  setColClass(colClass);  setReadOnly(readOnly);  setColorColumn(colorColumn);  setIDcolSQL(IDcolSQL);}  }
class C{  public void addContactMech(String contactMechPurposeTypeId,String contactMechId){  if (contactMechPurposeTypeId == null)   throw new IllegalArgumentException("You must specify a contactMechPurposeTypeId to add a ContactMech");  contactMechIdsMap.put(contactMechPurposeTypeId,contactMechId);}  }
class C{  public boolean isAddressedModePossible(){  return true;}  }
class C{  Node(E item){  UNSAFE.putObject(this,itemOffset,item);}  }
class C{  private void finishSetup(){  Insets in=new Insets(2,2,2,2);  Component[] comp=keyPanel.getComponents();  for (int i=0; i < comp.length; i++) {    if (comp[i] instanceof JButton) {      JButton b=(JButton)comp[i];      b.setMargin(in);      b.addActionListener(this);      b.addKeyListener(this);    }  }  toggleCurrency();  m_decimal=m_format.getDecimalFormatSymbols().getDecimalSeparator();  if (m_number.doubleValue() != 0.00) {    m_display=m_format.format(m_number);    display.setText(m_display);  }}  }
class C{  public void closeConnection(){  try {    if (m_connection != null) {      m_connection.close();    }  } catch (  final SQLException exception) {    NaviLogger.severe("Error: Closing the database connection failed with exception: %s",exception);  }  m_connection=null;}  }
class C{  public void addStrategySettings(String populationId,final StrategySettings stratSets){  if (this.settings.get(populationId) != null && this.settings.get(populationId).containsKey(stratSets.getId())) {    throw new IllegalArgumentException("A strategy with id: " + stratSets.getId() + " is already configured!");  }  LinkedHashMap<Id<StrategySettings>,StrategySettings> popSettings=this.settings.get(populationId);  if (popSettings == null) {    popSettings=new LinkedHashMap<Id<StrategySettings>,StrategySettings>();    this.settings.put(populationId,popSettings);  }  popSettings.put(stratSets.getId(),stratSets);}  }
class C{  public boolean removeFirstOccurrence(Object o){  if (o == null)   return false;  int mask=elements.length - 1;  int i=head;  Object x;  while ((x=elements[i]) != null) {    if (o.equals(x)) {      delete(i);      return true;    }    i=(i + 1) & mask;  }  return false;}  }
class C{  public static <T>LazyPVectorX<T> fromStreamS(Stream<T> stream){  return new LazyPVectorX<T>(Flux.from(ReactiveSeq.fromStream(stream)));}  }
class C{  ArchivedAttribute(final ArchiveContents parent,final Attribute attribute){  WorkspaceComponent comp=attribute.getParentComponent();  this.parentComponentRef=parent.componentUris.get(comp);  this.baseObjectKey=comp.getKeyFromObject(attribute.getBaseObject());  this.methodBaseName=attribute.getMethodName();  this.argumentDataTypes=attribute.getArgumentDataTypes();  this.argumentValues=attribute.getArgumentValues();  this.dataType=attribute.getDataType();  this.description=attribute.getDescription();}  }
class C{  public void clearCache(){  if (frameProvider instanceof CacheHandler) {    ((CacheHandler)frameProvider).resetCache();  }  if (this.cache != null) {    this.cache.setViewAttributes(null);    this.cache.setFrameProvider(null);    this.cache.clearCaches();  }  frameProvider=null;  setList(null);  this.cache=null;}  }
class C{  void implReset(){  state[0]=0x67452301;  state[1]=0xefcdab89;  state[2]=0x98badcfe;  state[3]=0x10325476;}  }
class C{  synchronized boolean releaseLock(int leaseIdToRelease,RemoteThread remoteThread){  return releaseLock(leaseIdToRelease,remoteThread,true);}  }
class C{  @Override public IList<IAgent> migrateMicroAgents(final IScope scope,final IList<IAgent> microAgents,final ISpecies newMicroSpecies){  final List<IAgent> immigrantCandidates=GamaListFactory.create(Types.AGENT);  for (  final IAgent m : microAgents.iterable(scope)) {    if (m.getSpecies().isPeer(newMicroSpecies)) {      immigrantCandidates.add(m);    }  }  final IList<IAgent> immigrants=GamaListFactory.create(Types.AGENT);  if (!immigrantCandidates.isEmpty()) {    final IPopulation<? extends IAgent> microSpeciesPopulation=this.getPopulationFor(newMicroSpecies);    for (    final IAgent micro : immigrantCandidates) {      final SavedAgent savedMicro=new SavedAgent(scope,micro);      micro.dispose();      immigrants.add(savedMicro.restoreTo(scope,microSpeciesPopulation));    }  }  return immigrants;}  }
class C{  public Object clone(){  BitSet result;  try {    result=(BitSet)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  result.bits=new long[bits.length];  System.arraycopy(bits,0,result.bits,0,unitsInUse);  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void failTask(Throwable e,State state){  ServiceUtils.logSevere(this,e);  this.sendSelfPatch(buildPatch(TaskState.TaskStage.FAILED,e,state));}  }
class C{  public static IntVector seq(int i0,int i1){  if (i1 < i0)   throw new IllegalArgumentException("i1 < i0 ");  IntVector v=new IntVector(i1 - i0 + 1);  for (int i=0; i < i1 - i0 + 1; i++) {    v.set(i,i + i0);  }  return v;}  }
class C{  @SuppressWarnings("rawtypes") public <T extends BinaryProperty>BinaryPropertyAsserter<T> binaryProperty(Class<T> clazz){  return new BinaryPropertyAsserter<T>(vcard.getProperties(clazz),this);}  }
class C{  protected Delegator newInstance(){  try {    return this.getClass().newInstance();  } catch (  Exception ex) {    throw Context.throwAsScriptRuntimeEx(ex);  }}  }
class C{  public ChildFilterParser(FilterModule filterModule,Match match,Element element) throws FilterException {  if (element.getChildren().size() != 1) {    throw new MissingFilterChildException("",element);  }  this.child=filterModule.getFilter(match,element.getChildren().get(0));}  }
class C{  public Query appendIf(final String name,final GitlabAccessLevel value) throws UnsupportedEncodingException {  if (value != null) {    append(name,Integer.toString(value.accessValue));  }  return this;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  org.compiere.util.WebLogin thisLogin=new org.compiere.util.WebLogin(request,response,ctx);  thisLogin.init();  String url=thisLogin.getForward();  String salesRep=thisLogin.getSalesRep_ID();  if (salesRep != null)   session.setAttribute(thisLogin.getP_SalesRep_ID(),salesRep);  boolean checkOut="Y".equals(session.getAttribute(CheckOutServlet.ATTR_CHECKOUT));  boolean addressConfirm="Y".equals(WebUtil.getParameter(request,"AddressConfirm"));  if (checkOut) {    if (addressConfirm)     url="/orderServlet"; else     url="/addressInfo.jsp";  } else   addressConfirm=false;  if (url == null || url.length() == 0) {    url=(String)session.getAttribute(thisLogin.getP_ForwardTo());    if (url == null || url.length() == 0)     url="/index.jsp";  } else {    if (!url.startsWith("/"))     url="/" + url;    session.setAttribute(thisLogin.getP_ForwardTo(),url);  }  salesRep=(String)session.getAttribute(thisLogin.getP_SalesRep_ID());  if (salesRep != null)   url+="?SalesRep_ID=" + salesRep;  log.fine("- targeting url=" + url);  WebUser wu=WebUser.get(request);  thisLogin.setForward(url);  thisLogin.setAddressConfirm(addressConfirm);  if (WebUtil.getParameter(request,"Mode") == null)   if (WebUtil.getParameter(request,"mode") != null)   thisLogin.setP_Action("mode");  thisLogin.action();  url=thisLogin.getForward();  wu=thisLogin.getWebUser();  session.setAttribute(WebUser.NAME,wu);  if (!url.startsWith("/"))   url="/" + url;  log.info("doPost - Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"LDREX");  translateAll(environment,instruction,"LDREX",instructions);}  }
class C{  public void removeMinuteChangeListener(PropertyChangeListener l){  pcMinutes.removePropertyChangeListener(l);}  }
class C{  public Long hsetnx(final String key,final String field,final String value){  checkIsInMulti();  client.hsetnx(key,field,value);  return client.getIntegerReply();}  }
class C{  @RequestMapping(value="/rows",method=RequestMethod.GET) public @ResponseBody List<Message> listMessagesFirstRows() throws ServiceException, CheckException {  if (logger.isDebugEnabled()) {    logger.debug("nbRows:" + 500);  }  return messageService.listByUserNoLimitRows(authentificationUtils.getAuthentificatedUser());}  }
class C{  public void resetTagDefinitions(){  mTagInfo=null;}  }
class C{  private double inBorderVertical(double height,double y){  return Math.min(gridElement.getRectangle().getHeight() - y - 1,height);}  }
class C{  public boolean isTraitAnimatable(String ns,String tn){  return false;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public View newChildView(boolean isLastChild,ViewGroup parent){  return mInflater.inflate((isLastChild) ? mLastChildLayout : mChildLayout,parent,false);}  }
class C{  private void appendBuffer(StringBuilder buffer,String name,String value){  if (buffer.length() > 0) {    buffer.append('&');  }  String encodedName=URLEncoder.encode(name);  buffer.append(encodedName);  buffer.append('=');  String encodedValue=URLEncoder.encode(value);  buffer.append(encodedValue);}  }
class C{  public static IMultipart createPart(ResourceLocation partType,NBTTagCompound tag){  IAdvancedPartFactory factory=partProviders.get(partType);  return factory == null ? null : factory.createPart(partType,tag);}  }
class C{  public boolean isAccessibleChildSelected(int i){  return List.this.isIndexSelected(i);}  }
class C{  public void die(String what,Exception e){  if (e != null)   e.printStackTrace();  die(what);}  }
class C{  private BytePrintStream out(boolean release){  BytePrintStream out;synchronized (streams) {    ThreadGroup grp=Thread.currentThread().getThreadGroup();    while (grp != null && grp.getParent() != baseGrp)     grp=grp.getParent();    out=release == true ? streams.remove(grp) : streams.get(grp);    if (out == null) {      if (release)       return new BytePrintStream();      streams.put(grp,out=new BytePrintStream());    }    return out;  }}  }
class C{  public static IMarker createMarker(IFile file,Position taintPosition,Set<CallLocationModel> sources,Map<String,Set<CallLocationModel>> filteredSources) throws CoreException {  IMarker marker=file.createMarker(TYPE);  int offset=taintPosition.getOffset();  int length=taintPosition.getLength();  marker.setAttributes(new String[]{IMarker.CHAR_START,IMarker.CHAR_END,IMarker.MESSAGE,SOURCES,FILTERED_SOURCES},new Object[]{new Integer(offset),new Integer(offset + length),"Taint",sources,filteredSources});  return marker;}  }
class C{  public boolean isVisible(){  return mIsVisible;}  }
class C{  public void prevotesOnly() throws Exception {  int term=5;  member1.saveVote(term,1);  member2.saveVote(term,-1);  member3.saveVote(term,-1);  gondolaRc.resetMembers();  member1.setCandidate();  member2.setFollower();  member3.setFollower();  member1.deliverRequestVoteReply(member2,term,false,true);  gondolaRc.tick(100);  assertTrue(!member1.cmember.isLeader());}  }
class C{  public EMailProcessor(MClient client){  this(client.getSMTPHost(),client.getRequestUser(),client.getRequestUserPW());}  }
class C{  private void addChart(){  JFreeChart chart=ChartFactory.createXYBarChart(getTitle(),"Elapsed Time (sec)",false,"Time" + unitSuffix(),dataset,PlotOrientation.VERTICAL,true,true,false);  chart.addProgressListener(locker);  XYPlot plot=(XYPlot)chart.getPlot();  XYItemRenderer renderer=plot.getRenderer();  renderer.setToolTipGenerator(dataset);  groupActivatingTable=new GroupActivatingPanel(dataset,locker);  org.jfree.chart.ChartPanel chartPanel=new org.jfree.chart.ChartPanel(chart);  JSplitPane splitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,groupActivatingTable,chartPanel);  splitPane.setDividerLocation(200);  mainPanel().add(BorderLayout.CENTER,splitPane);}  }
class C{  public SeriesSubCatalog(List<Book> books){  super(books);  setCatalogType(Constants.SERIESLIST_TYPE);}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  public void test_ConstructorLjava_lang_ObjectLjava_lang_ref_ReferenceQueue(){  ReferenceQueue rq=new ReferenceQueue();  bool=new Boolean(true);  try {    SoftReference sr=new SoftReference(bool,rq);    assertTrue("Initialization failed.",((Boolean)sr.get()).booleanValue());  } catch (  Exception e) {    fail("Exception during test : " + e.getMessage());  }  boolean exception=false;  try {    new SoftReference(bool,null);  } catch (  NullPointerException e) {    exception=true;  }  assertTrue("Should not throw NullPointerException",!exception);}  }
class C{  public AsyncResult RepublishAsync(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,UnsignedInteger RetransmitSequenceNumber){  RepublishRequest req=new RepublishRequest(RequestHeader,SubscriptionId,RetransmitSequenceNumber);  return channel.serviceRequestAsync(req);}  }
class C{  private void updateHeader(long headerId,int headerPosition){  RecyclerView.ViewHolder holder=getHeaderViewHolder(headerPosition);  if (holder == null) {    return;  }  currentStickyId=headerId;  int stickyViewId=getCustomStickyViewId();  if (stickyViewId != 0) {    View stickyView=holder.itemView.findViewById(stickyViewId);    if (stickyView != null) {      stickyHeader=createStickyViewBitmap(stickyView);      return;    }  }  stickyHeader=createStickyViewBitmap(holder.itemView);}  }
class C{  public static boolean isNotBlank(String string){  return ((string != null) && !containsOnlyWhitespaces(string));}  }
class C{  public SlimAbortException(String message){  super(message);}  }
class C{  @Override public void onDownloadStateChanged(int newState){  setState(newState);  boolean showDashboard=true;  boolean showCellMessage=false;  boolean paused;  boolean indeterminate;switch (newState) {case IDownloaderClient.STATE_IDLE:    paused=false;  indeterminate=true;break;case IDownloaderClient.STATE_CONNECTING:case IDownloaderClient.STATE_FETCHING_URL:showDashboard=true;paused=false;indeterminate=true;break;case IDownloaderClient.STATE_DOWNLOADING:paused=false;showDashboard=true;indeterminate=false;break;case IDownloaderClient.STATE_FAILED_CANCELED:case IDownloaderClient.STATE_FAILED:case IDownloaderClient.STATE_FAILED_FETCHING_URL:case IDownloaderClient.STATE_FAILED_UNLICENSED:paused=true;showDashboard=false;indeterminate=false;break;case IDownloaderClient.STATE_PAUSED_NEED_CELLULAR_PERMISSION:case IDownloaderClient.STATE_PAUSED_WIFI_DISABLED_NEED_CELLULAR_PERMISSION:showDashboard=false;paused=true;indeterminate=false;showCellMessage=true;break;case IDownloaderClient.STATE_PAUSED_BY_REQUEST:paused=true;indeterminate=false;break;case IDownloaderClient.STATE_PAUSED_ROAMING:case IDownloaderClient.STATE_PAUSED_SDCARD_UNAVAILABLE:paused=true;indeterminate=false;break;case IDownloaderClient.STATE_COMPLETED:showDashboard=false;paused=false;indeterminate=false;validateXAPKZipFiles();return;default :paused=true;indeterminate=true;showDashboard=true;}int newDashboardVisibility=showDashboard ? View.VISIBLE : View.GONE;if (mDashboard.getVisibility() != newDashboardVisibility) {mDashboard.setVisibility(newDashboardVisibility);}int cellMessageVisibility=showCellMessage ? View.VISIBLE : View.GONE;if (mCellMessage.getVisibility() != cellMessageVisibility) {mCellMessage.setVisibility(cellMessageVisibility);}mPB.setIndeterminate(indeterminate);setButtonPausedState(paused);}  }
class C{  public ImageNode(){}  }
class C{  private void decode(byte[] data,int width,int height){  Size size=activity.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  Result rawResult=null;  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  mContext=context;  mAccount=account;  mAuthTokenType=authTokenType;  mNotifyAuthFailure=notifyAuthFailure;}  }
class C{  public float[] toArray(){  float[] array=new float[length];  System.arraycopy(data,0,array,0,length);  return array;}  }
class C{  public void readPopulation(final EvolutionState state,final DataInput dataInput) throws IOException {  int numSubpopulations=dataInput.readInt();  if (numSubpopulations != subpops.length)   state.output.fatal("On reading subpopulation from binary stream, the number of subpopulations was wrong.");  for (int i=0; i < subpops.length; i++)   subpops[i].readSubpopulation(state,dataInput);}  }
class C{  public boolean isSubtract(){  return this.constructionElement.getAttributeNS(null,XPath2FilterContainer04._ATT_FILTER).equals(XPath2FilterContainer04._ATT_FILTER_VALUE_SUBTRACT);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.SINGLE_ASSOCIATION_END___MULTIPLICITY_1:    getMultiplicity_1().clear();  getMultiplicity_1().addAll((Collection<? extends Multiplicity_>)newValue);return;case UmplePackage.SINGLE_ASSOCIATION_END___TYPE_1:setType_1((String)newValue);return;case UmplePackage.SINGLE_ASSOCIATION_END___ROLE_NAME_1:setRoleName_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public DoubleVector normalize(){  return new DoubleVector(x,y,z).divide(norm());}  }
class C{  public AdaptiveParanamer(){  this(new DefaultParanamer(),new BytecodeReadingParanamer());}  }
class C{  public NullBuffer(IFile file,IOpenable owner,boolean readOnly){  super(file,owner,readOnly);}  }
class C{  private void createTunnel(int readTimeout,int writeTimeout) throws IOException {  Request tunnelRequest=createTunnelRequest();  HttpUrl url=tunnelRequest.url();  String requestLine="CONNECT " + url.host() + ":"+ url.port()+ " HTTP/1.1";  while (true) {    Http1xStream tunnelConnection=new Http1xStream(null,source,sink);    source.timeout().timeout(readTimeout,MILLISECONDS);    sink.timeout().timeout(writeTimeout,MILLISECONDS);    tunnelConnection.writeRequest(tunnelRequest.headers(),requestLine);    tunnelConnection.finishRequest();    Response response=tunnelConnection.readResponse().request(tunnelRequest).build();    long contentLength=OkHeaders.contentLength(response);    if (contentLength == -1L) {      contentLength=0L;    }    Source body=tunnelConnection.newFixedLengthSource(contentLength);    Util.skipAll(body,Integer.MAX_VALUE,TimeUnit.MILLISECONDS);    body.close();switch (response.code()) {case HTTP_OK:      if (!source.buffer().exhausted() || !sink.buffer().exhausted()) {        throw new IOException("TLS tunnel buffered too many bytes!");      }    return;case HTTP_PROXY_AUTH:  tunnelRequest=OkHeaders.processAuthHeader(route.address().authenticator(),response,route.proxy());if (tunnelRequest != null) continue;throw new IOException("Failed to authenticate with proxy");default :throw new IOException("Unexpected response code for CONNECT: " + response.code());}}}  }
class C{  private void notifyEvictionIfNeeded(){  if (shouldEvict()) {    evictLock.lock();    try {      nothingToEvict.signal();    }  finally {      evictLock.unlock();    }  }}  }
class C{  public void recordingComplete(){}  }
class C{  public FgsMbRunner(GraphWrapper dagWrapper,Parameters params){  super(dagWrapper.getGraph(),params);}  }
class C{  private void selectNeurons(){  List<NeuronNode> nodes=new ArrayList<NeuronNode>();  for (  Neuron neuron : neuronGroup.getNeuronList()) {    nodes.add((NeuronNode)getNetworkPanel().getObjectNodeMap().get(neuron));  }  getNetworkPanel().clearSelection();  getNetworkPanel().setSelection(nodes);}  }
class C{  public void append(String msg,String icon){  append(new JLabel(msg,ComponentHelper.getImageIcon(icon),JLabel.LEFT));}  }
class C{  public XPath(Expression expr){  this.setExpression(expr);  initFunctionTable();}  }
class C{  private static BitmapSampled decodeSampledBitmapRegion(Context context,Uri uri,Rect rect,int reqWidth,int reqHeight,int sampleMulti){  InputStream stream=null;  BitmapRegionDecoder decoder=null;  try {    BitmapFactory.Options options=new BitmapFactory.Options();    options.inSampleSize=sampleMulti * calculateInSampleSizeByReqestedSize(rect.width(),rect.height(),reqWidth,reqHeight);    stream=context.getContentResolver().openInputStream(uri);    decoder=BitmapRegionDecoder.newInstance(stream,false);    do {      try {        return new BitmapSampled(decoder.decodeRegion(rect,options),options.inSampleSize);      } catch (      OutOfMemoryError e) {        options.inSampleSize*=2;      }    } while (options.inSampleSize <= 512);  } catch (  Exception e) {    throw new RuntimeException("Failed to load sampled bitmap: " + uri + "\r\n"+ e.getMessage(),e);  } finally {    closeSafe(stream);    if (decoder != null) {      decoder.recycle();    }  }  return new BitmapSampled(null,1);}  }
class C{  public static void cleanInternalCache(Context context){  deleteFilesInDirectory(context.getCacheDir());}  }
class C{  private CGraphSelecter(){}  }
class C{  private static long parseTimeExpression(String time,int frameRate,int subframeRate,int tickRate) throws ParserException {  Matcher matcher=CLOCK_TIME.matcher(time);  if (matcher.matches()) {    String hours=matcher.group(1);    double durationSeconds=Long.parseLong(hours) * 3600;    String minutes=matcher.group(2);    durationSeconds+=Long.parseLong(minutes) * 60;    String seconds=matcher.group(3);    durationSeconds+=Long.parseLong(seconds);    String fraction=matcher.group(4);    durationSeconds+=(fraction != null) ? Double.parseDouble(fraction) : 0;    String frames=matcher.group(5);    durationSeconds+=(frames != null) ? ((double)Long.parseLong(frames)) / frameRate : 0;    String subframes=matcher.group(6);    durationSeconds+=(subframes != null) ? ((double)Long.parseLong(subframes)) / subframeRate / frameRate : 0;    return (long)(durationSeconds * C.MICROS_PER_SECOND);  }  matcher=OFFSET_TIME.matcher(time);  if (matcher.matches()) {    String timeValue=matcher.group(1);    double offsetSeconds=Double.parseDouble(timeValue);    String unit=matcher.group(2);    if (unit.equals("h")) {      offsetSeconds*=3600;    } else     if (unit.equals("m")) {      offsetSeconds*=60;    } else     if (unit.equals("s")) {    } else     if (unit.equals("ms")) {      offsetSeconds/=1000;    } else     if (unit.equals("f")) {      offsetSeconds/=frameRate;    } else     if (unit.equals("t")) {      offsetSeconds/=tickRate;    }    return (long)(offsetSeconds * C.MICROS_PER_SECOND);  }  throw new ParserException("Malformed time expression: " + time);}  }
class C{  @SuppressFBWarnings(value="DP_DO_INSIDE_DO_PRIVILEGED",justification="EV is run only from within unit tests") public Object instantiate(Class<?>[] paramTypes,Object[] paramValues){  try {    Class<?> type=resolve();    if (type == null) {      return null;    }    Constructor<?> c=type.getConstructor(paramTypes);    c.setAccessible(true);    return c.newInstance(paramValues);  } catch (  Exception e) {    return handleException(e);  }}  }
class C{  public ActiveEntity(){  direction=Direction.STOP;  speed=0.0;  movementOffset=0.0;  stepsTaken=0;}  }
class C{  public PrinterStateReasons(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void deleteShare(String id,String zoneName) throws IsilonException {  String uriWithZoneName=getURIWithZoneName(id,zoneName);  delete(_baseUrl.resolve(URI_SMB_SHARES),uriWithZoneName,"share");}  }
class C{  public void add(final String clazz,final String subclazz){  add(clazz,subclazz,true);}  }
class C{  public String fullSource(){  if (fullSource == null) {    fullSource=addSentenceMarkers(source());  }  return fullSource;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.831 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="74B066602ECC20A74FD97E770D65E8BD") public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  public boolean isAveragePO(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_AveragePO) && COSTELEMENTTYPE_Material.equals(getCostElementType());}  }
class C{  @Override public void close(){  gl.glDeleteShader(vertexShader);  gl.glDeleteShader(fragmentShader);  gl.glDeleteProgram(id);}  }
class C{  public String strLabeling(File file){  List<Sentence> obsvSeqs=dataReader.readFile(file.getPath());  List lblSeqs=labeling(obsvSeqs);  String ret=dataWriter.writeString(lblSeqs);  return ret;}  }
class C{  private static Map<String,File> findProvidedLibraries(Context context) throws IOException {  File exoDir=new File("/data/local/tmp/exopackage/" + context.getPackageName() + "/native-libs/");  HashMap<String,File> providedLibraries=new HashMap<>();  for (  String abi : SysUtil.getSupportedAbis()) {    File abiDir=new File(exoDir,abi);    if (!abiDir.isDirectory()) {      continue;    }    File metadata=new File(abiDir,"metadata.txt");    if (!metadata.isFile()) {      continue;    }    try (FileReader fr=new FileReader(metadata);BufferedReader br=new BufferedReader(fr)){      String line;      while ((line=br.readLine()) != null) {        if (line.length() == 0) {          continue;        }        int sep=line.indexOf(' ');        if (sep == -1) {          throw new RuntimeException("illegal line in exopackage metadata: [" + line + "]");        }        String soName=line.substring(0,sep) + ".so";        String backingFile=line.substring(sep + 1);        if (!providedLibraries.containsKey(soName)) {          providedLibraries.put(soName,new File(abiDir,backingFile));        }      }    }   }  return providedLibraries;}  }
class C{  public void logVelocityMessage(int level,String message){switch (level) {case LogSystem.WARN_ID:    logger.warn(message);  break;case LogSystem.INFO_ID:logger.info(message);break;case LogSystem.DEBUG_ID:logger.debug(message);break;case LogSystem.ERROR_ID:logger.error(message);break;default :logger.debug(message);break;}}  }
class C{  public static Word one(){  return new Word(1);}  }
class C{  public static boolean[] toPrimitive(Boolean[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_BOOLEAN_ARRAY;  }  final boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].booleanValue();  }  return result;}  }
class C{  public static double newPriority(double remote,double stored,int commonFriends,int myFriends){  return Math.max(fractionOfFriendsPriority(remote,commonFriends,myFriends),stored);}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  private void checkDunningEntry(MDunningLevel level){  if (level.isShowAllDue()) {    MDunningRunEntry[] entries=m_run.getEntries(true);    if (entries != null && entries.length > 0) {      for (      MDunningRunEntry element : entries) {        boolean entryDelete=true;        MDunningRunLine[] lines=element.getLines(true);        for (int j=0; j < lines.length; j++) {          if (lines[j].getTimesDunned() < 0) {            lines[j].setTimesDunned(lines[j].getTimesDunned() * -1);            if (!lines[j].save())             throw new IllegalStateException("Cannot save MDunningRunLine");          } else {            entryDelete=false;          }        }        if (entryDelete)         element.delete(false);      }    }  }}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public NBodyForce(float gravConstant,float minDistance,float theta){  params=new float[]{gravConstant,minDistance,theta};  minValues=new float[]{DEFAULT_MIN_GRAV_CONSTANT,DEFAULT_MIN_DISTANCE,DEFAULT_MIN_THETA};  maxValues=new float[]{DEFAULT_MAX_GRAV_CONSTANT,DEFAULT_MAX_DISTANCE,DEFAULT_MAX_THETA};  root=factory.getQuadTreeNode();}  }
class C{  public static void assertTrue(boolean expression){  assertTrue(expression,"");}  }
class C{  public Vector3f normalize(){  float length=x * x + y * y + z * z;  if (length != 1f && length != 0f) {    length=1.0f / FastMath.sqrt(length);    return new Vector3f(x * length,y * length,z * length);  }  return clone();}  }
class C{  @Override public String next(){  return this.nextLine();}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  public static boolean isSupplementaryCodePoint(int codePoint){  return (MIN_SUPPLEMENTARY_CODE_POINT <= codePoint && MAX_CODE_POINT >= codePoint);}  }
class C{  public void storeHoney(double honey){  setHoney(getHoneyAmount() + honey);}  }
class C{  protected String escapeValue(String value){  return value;}  }
class C{  private String addDefaultProfile(){  String profile=System.getProperty("spring.profiles.active");  if (profile != null) {    log.info("Running with Spring profile(s) : {}",profile);    return profile;  }  log.warn("No Spring profile configured, running with default configuration");  return Constants.SPRING_PROFILE_DEVELOPMENT;}  }
class C{  private boolean skipToNextSync(ParsableByteArray pesBuffer){  byte[] adtsData=pesBuffer.data;  int startOffset=pesBuffer.getPosition();  int endOffset=pesBuffer.limit();  for (int i=startOffset; i < endOffset; i++) {    boolean byteIsFF=(adtsData[i] & 0xFF) == 0xFF;    boolean found=lastByteWasFF && !byteIsFF && (adtsData[i] & 0xF0) == 0xF0;    lastByteWasFF=byteIsFF;    if (found) {      hasCrc=(adtsData[i] & 0x1) == 0;      pesBuffer.setPosition(i + 1);      lastByteWasFF=false;      return true;    }  }  pesBuffer.setPosition(endOffset);  return false;}  }
class C{  public K peekLast(){  Entry<K> x=head;  while (x != NULL && x.next != NULL) {    x=x.next;  }  return x.obj;}  }
class C{  @Override protected void populateLocalisationMap(){  localisationKeyConstantToKeyMap.put(ADDRESSES_TITLE,"receiveBitcoinPanel.receivingAddressesTitle");  localisationKeyConstantToKeyMap.put(CREATE_NEW_TOOLTIP,"createOrEditAddressAction.createReceiving.tooltip");}  }
class C{  public static long[] allocate(final long amountInPaise,final long[] weights){  if (weights.length == 0)   return new long[]{amountInPaise};  final long[] splits=new long[weights.length];  long totalWeight=0;  for (  final long w : weights)   totalWeight=totalWeight + w;  long remainder=amountInPaise;  for (int i=0; i < splits.length; i++) {    splits[i]=amountInPaise * weights[i] / totalWeight;    remainder=remainder - splits[i];  }  for (int i=0; i < remainder; i++)   splits[i]=splits[i] + 1;  return splits;}  }
class C{  public void error(SourceLocator srcLctr,String msg) throws TransformerException {  error(srcLctr,null,null,msg,null);}  }
class C{  public static int swapEndian(final int i){  return ((i & 0xff) << 24) | ((i & 0xff00) << 8) | ((i >>> 8) & 0xff00)| ((i >>> 24) & 0xff);}  }
class C{  public static SparseTernaryPolynomial generateRandom(int N,int numOnes,int numNegOnes,SecureRandom random){  int[] coeffs=Util.generateRandomTernary(N,numOnes,numNegOnes,random);  return new SparseTernaryPolynomial(coeffs);}  }
class C{  public boolean pointOnSurface(final double x,final double y,final double z){  return Math.abs(x * x * inverseAb* inverseAb + y * y * inverseAb* inverseAb + z * z * inverseC* inverseC - 1.0) < Vector.MINIMUM_RESOLUTION;}  }
class C{  public static <V>V executeSynchronously(Callable<V> c){  try {    final AtomicReference<V> result=new AtomicReference<>();    final AtomicReference<Exception> err=new AtomicReference<>();    final CountDownLatch doneLatch=new CountDownLatch(1);    final AuthorizationContext context=OperationContext.getAuthorizationContext();    executor.execute(null);    doneLatch.await();    Exception ex=err.get();    if (ex != null) {      throw ex;    } else {      return result.get();    }  } catch (  Exception e) {    if (e instanceof RuntimeException) {      throw (RuntimeException)e;    } else {      throw new RuntimeException(e);    }  }}  }
class C{  public static boolean isUrlExternallyWhiteListed(String url){  if (parser == null) {    Log.e(TAG,"Config was not initialised. Did you forget to Config.init(this)?");    return false;  }  return parser.getExternalWhitelist().isUrlWhiteListed(url);}  }
class C{  public GmlPos(Point copyFrom){  super(Namespaces.GML_NAMESPACE,NAME,copyFrom);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.311 -0500",hash_original_method="6829DC946932105C9401F9B35E7B6F88",hash_generated_method="8428B61909C5F2EBDE360D0D5F0EDE95") public void drawText(String text,int start,int end,float x,float y,Paint paint){  if ((start | end | (end - start)| (text.length() - end)) < 0) {    throw new IndexOutOfBoundsException();  }  native_drawText(mNativeCanvas,text,start,end,x,y,paint.mBidiFlags,paint.mNativePaint);}  }
class C{  public boolean hasLoadRestrictions(){  List<Track> tracks=getTrackList();  for (  Track track : tracks) {    if (!track.getLoadOption().equals(Track.ALL_LOADS)) {      return true;    }  }  return false;}  }
class C{  public void load(Element element,Object o){  Editor p=(Editor)o;  LightIcon l=new LightIcon(p);  String name;  try {    name=element.getAttribute("light").getValue();  } catch (  NullPointerException e) {    log.error("incorrect information for light; must use light name");    p.loadFailed();    return;  }  l.setLight(name);  Element icons=element.getChild("icons");  if (icons == null) {    if (log.isDebugEnabled()) {      log.debug("Main element of Light " + name + "has no icons");    }  } else {    NamedIcon icon=loadIcon(l,"on",icons,"LightIcon \"" + name + "\": icon \"on\" ",p);    if (icon != null) {      l.setOnIcon(icon);    } else {      log.info("LightIcon \"" + name + "\": icon \"on\" removed");      return;    }    icon=loadIcon(l,"off",icons,"LightIcon \"" + name + "\": icon \"off\" ",p);    if (icon != null) {      l.setOffIcon(icon);    } else {      log.info("LightIcon \"" + name + "\": icon \"off\" removed");      return;    }    icon=loadIcon(l,"unknown",icons,"LightIcon \"" + name + "\": icon \"unknown\" ",p);    if (icon != null) {      l.setUnknownIcon(icon);    } else {      log.info("LightIcon \"" + name + "\": icon \"unknown\" removed");      return;    }    icon=loadIcon(l,"inconsistent",icons,"LightIcon \"" + name + "\": icon \"inconsistent\" ",p);    if (icon != null) {      l.setInconsistentIcon(icon);    } else {      log.info("LightIcon \"" + name + "\": icon \"inconsistent\" removed");      return;    }  }  p.putItem(l);  loadCommonAttributes(l,Editor.LIGHTS,element);}  }
class C{  public PublishingToMarketplaceNotPermittedException(){  super();}  }
class C{  private static void displayParamNameAndValue(String paramName,int paramValue){  System.out.println(String.format("%s:   %d",paramName,paramValue));}  }
class C{  public final boolean isRemote(){  return this.isRemote;}  }
class C{  public synchronized void press(){  this.press(1);}  }
class C{  public void next(XlsxReadMode readMode) throws XMLStreamException, ParseException {  if (readMode != XlsxReadMode.WIZARD_WORKPANE) {    skipToStartRow();  }  if (nextRowWithContent == null) {    this.nextRowWithContent=parseNextRowWithContent();  }  ++currentRowIndex;  boolean isRowEmpty=currentRowIndex < parsedRowIndex;  if (currentRowContent == null) {    assignNextCurrentRow(isRowEmpty && (!isUseFirstRowAsNames || readMode == XlsxReadMode.WIZARD_PREVIEW));  } else {    assignNextCurrentRow(isRowEmpty);  }}  }
class C{  public List<Integer> emit(String streamId,List<Object> tuple,Object messageId){  return delegate.emit(streamId,tuple,messageId);}  }
class C{  public void testLongValuePositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,120,-34,-12,45,98};  long result=3268209772258930018L;  long aNumber=new BigInteger(aBytes).longValue();  assertTrue(aNumber == result);}  }
class C{  private void indexAfterRestart() throws IOException {  Directory realDirectory=newFSDirectory(path);  IndexWriter indexWriter=new IndexWriter(realDirectory,newIndexWriterConfig(new MockAnalyzer(random())));  indexWriter.addDocument(getDocument());  indexWriter.close();  assertFalse(slowFileExists(realDirectory,"segments_2"));  realDirectory.close();}  }
class C{  public synchronized int socketReadersRemoved(){  return sockReadersRmv;}  }
class C{  public LocalTime withMinimumValue(){  return setCopy(getMinimumValue());}  }
class C{  public static AnimatedLabel createClassicSpinningLine(int speed){  AnimatedLabel animatedLabel=new AnimatedLabel("-");  animatedLabel.addFrame("\\");  animatedLabel.addFrame("|");  animatedLabel.addFrame("/");  animatedLabel.startAnimation(speed);  return animatedLabel;}  }
class C{  public void action(String target,String action){  checkArgument(StringUtils.isNotBlank(target),"Target '%s' is blank",target);  ctcpCommand(target,"ACTION " + action);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforerefchildnull.class,args);}  }
class C{  private boolean sort(){  final int[] d=this.d;  if (LOGGER.isDebugEnabled())   LOGGER.debug("Peeling hypergraph...");  top=0;  for (int i=0; i < numVertices; i++)   if (d[i] == 1)   peel(i);  if (LOGGER.isDebugEnabled())   LOGGER.debug(top == numEdges ? "Peeling completed." : "Visit failed: peeled " + top + " edges out of "+ numEdges+ ".");  return top == numEdges;}  }
class C{  @Inject public DefaultAlertService(MQService mqService,MetricService metricService,AnnotationService annotationService,AuditService auditService,TSDBService tsdbService,MailService mailService,SystemConfiguration configuration,HistoryService historyService,MonitorService monitorService,NotifierFactory notifierFactory){  super(auditService,configuration);  requireArgument(mqService != null,"MQ service cannot be null.");  requireArgument(metricService != null,"Metric service cannot be null.");  requireArgument(annotationService != null,"Annotation service cannot be null.");  requireArgument(tsdbService != null,"TSDB service cannot be null.");  _tsdbService=tsdbService;  _mqService=mqService;  _metricService=metricService;  _annotationService=annotationService;  _mailService=mailService;  _configuration=configuration;  _historyService=historyService;  _monitorService=monitorService;  _notifierFactory=notifierFactory;}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  protected void processEventProperties(Properties eventProps){  int status;  Node node;  Line line;  String cmd=eventProps.getProperty(COMMAND_FIELD);  int index=PropUtils.intFromProperties(eventProps,INDEX_FIELD,ERROR_VALUE_INT);  if (cmd.equals(NODE_OBJECT)) {    int shape=PropUtils.intFromProperties(eventProps,SHAPE_FIELD,ERROR_VALUE_INT);    if (index == ERROR_VALUE_INT) {      Debug.error("NMGL: error parsing object index for node.");      return;    }    node=nodeList.get(index);    if (shape == 11) {      String icon=eventProps.getProperty(ICON_FIELD);      if (DEBUG)       Debug.output("NetMapReader: jimage  " + icon);    }    if (shape == NODE_DELETE) {      if (node != null) {        lineList.del(node);        nodeList.del(node);      }    } else     if (shape == NODE_MOVE && node != null) {      setNodePositionFromEventProps(node,eventProps);      lineList.move(node);      node.setTime(Double.parseDouble(eventProps.getProperty(TIME_FIELD,"0")));    } else {      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,0);      int menu=PropUtils.intFromProperties(eventProps,MENU_FIELD,0);      String label=eventProps.getProperty(LABEL_FIELD);      if (label == null) {        label=eventProps.getProperty(INDEX_FIELD);      }      String ip=eventProps.getProperty(IP_FIELD);      boolean isLocalhost=false;      if (ip != null && localhostIP != null) {        isLocalhost=localhostIP.equals(ip);        if (DEBUG) {          Debug.output("NetMapGraphicLoader displaying a node running on the localhost: " + localhostIP);        }      }      if (DEBUG) {        Debug.output("Creating node (" + label + ")");      }      try {        if (shape != ERROR_VALUE_INT) {          node=nodeList.add(label,index,shape,menu,status);          node.setLocalhost(isLocalhost);        }      } catch (      Exception e) {        Debug.error("NMGL: error creating node");      }      setNodePositionFromEventProps(node,eventProps);    }  } else   if (cmd.equals(NODE_OBJECT_STATUS)) {    if (index == ERROR_VALUE_INT) {      Debug.error("NMGL: error parsing object index for status update.");      return;    }    node=nodeList.get(index);    if (node != null) {      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,ERROR_VALUE_INT);      if (status != ERROR_VALUE_INT) {        node.setStatus(status);      }    }  } else   if (cmd.equals(LINK_OBJECT_STATUS)) {    if (index == ERROR_VALUE_INT) {      Debug.error("NMGL: error parsing line index for status update.");      return;    }    line=lineList.get(index);    if (line != null) {      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,ERROR_VALUE_INT);      if (status != ERROR_VALUE_INT) {        line.setStatus(status);      }    }  } else   if (cmd.equals(LINK_OBJECT)) {    if (index == ERROR_VALUE_INT) {      Debug.error("NMGL: error parsing line index for link.");      return;    }    line=lineList.get(index);    int shape=PropUtils.intFromProperties(eventProps,SHAPE_FIELD,ERROR_VALUE_INT);    if (shape == NODE_DELETE) {      lineList.del(index);    } else {      status=PropUtils.intFromProperties(eventProps,STATUS_FIELD,0);      int node1=PropUtils.intFromProperties(eventProps,LINK_NODE1_FIELD,ERROR_VALUE_INT);      int node2=PropUtils.intFromProperties(eventProps,LINK_NODE2_FIELD,ERROR_VALUE_INT);      if (node1 == ERROR_VALUE_INT || node2 == ERROR_VALUE_INT) {        Debug.error("NMGL: error parsing node indexes for link");        return;      }      Node n1=nodeList.get(node1);      Node n2=nodeList.get(node2);      if (n1 != null && n2 != null) {        lineList.add(String.valueOf(index),index,shape,status,n1,n2);      } else {        if (DEBUG) {          Debug.output("NetMapGraphicLoader: can't create lobj, nodes are undefined");        }      }    }  } else   if (cmd.equals(REFRESH) || cmd.equals(UPDATE)) {  } else   if (cmd.equals(CLEAR)) {    if (nodeList != null) {      nodeList.flush();    }    if (lineList != null) {      lineList.flush();    }  } else {    if (DEBUG) {      Debug.output("NMGL: received unused event: " + eventProps.toString());    }  }  manageGraphics();}  }
class C{  final void triangulateYMonotonePolygon(MonotonePolygon<DoubleEdgeListVertex> monotonePolygon){  List<MonotoneVertex<DoubleEdgeListVertex>> stack=new ArrayList<MonotoneVertex<DoubleEdgeListVertex>>();  List<MonotoneVertex<DoubleEdgeListVertex>> vertices=monotonePolygon.vertices;  stack.add(vertices.get(0));  stack.add(vertices.get(1));  int i=2;  while (!stack.isEmpty()) {    MonotoneVertex<DoubleEdgeListVertex> v=vertices.get(i);    MonotoneVertex<DoubleEdgeListVertex> vBot=stack.get(0);    MonotoneVertex<DoubleEdgeListVertex> vTop=stack.get(stack.size() - 1);    if (v.isAdjacent(vBot) && !v.isAdjacent(vTop)) {      while (stack.size() > 1) {        MonotoneVertex<DoubleEdgeListVertex> vt=stack.remove(stack.size() - 1);        this.addHalfEdges(v.data,vt.data);      }      stack.clear();      stack.add(vTop);      stack.add(v);    } else     if (v.isAdjacent(vTop) && !v.isAdjacent(vBot)) {      double cross=0;      int sSize=stack.size();      while (sSize > 1) {        MonotoneVertex<DoubleEdgeListVertex> vt=stack.get(sSize - 1);        MonotoneVertex<DoubleEdgeListVertex> vt1=stack.get(sSize - 2);        Vector2 p1=v.data.point;        Vector2 p2=vt.data.point;        Vector2 p3=vt1.data.point;        if (v.chainType == MonotoneChainType.LEFT || v.chainType == MonotoneChainType.BOTTOM) {          Vector2 v1=p2.to(p3);          Vector2 v2=p2.to(p1);          cross=v1.cross(v2);        } else {          Vector2 v1=p1.to(p2);          Vector2 v2=p3.to(p2);          cross=v1.cross(v2);        }        if (cross < Epsilon.E) {          this.addHalfEdges(v.data,vt1.data);          stack.remove(sSize - 1);          sSize--;        } else {          break;        }      }      stack.add(v);    } else     if (v.isAdjacent(vTop) && v.isAdjacent(vBot)) {      stack.remove(stack.size() - 1);      while (stack.size() > 1) {        MonotoneVertex<DoubleEdgeListVertex> vt=stack.remove(stack.size() - 1);        this.addHalfEdges(v.data,vt.data);      }      break;    }    i++;  }}  }
class C{  private boolean isMineshafterPresent(){  try {    Class.forName("mineshafter.MineServer");    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static CurrentSchemaVersion create(){  final CurrentSchemaVersion r=new CurrentSchemaVersion();  r.singleton=new CurrentSchemaVersion.Key();  return r;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  private Boolean shouldCreateQuartzTables(){  return (Boolean)ApplicationContextHolder.getApplicationContext().getBean(CREATE_QUARTZ_TABLES_BEAN_NAME);}  }
class C{  private void addRelatedNullConstituents(Set<Constituent> output,Queue<Constituent> childrenToConsider){  while (!childrenToConsider.isEmpty()) {    Constituent top=childrenToConsider.remove();    for (    Relation r : top.getIncomingRelations()) {      Constituent source=r.getSource();      if (source.getStartSpan() < 0 && !output.contains(source)) {        output.add(source);        childrenToConsider.add(source);      }    }  }}  }
class C{  public static byte[] toBytesWithoutConsume(ChannelBuffer input){  int oldIndex=input.readerIndex();  input.resetReaderIndex();  byte[] output=new byte[input.readableBytes()];  input.readBytes(output);  input.readerIndex(oldIndex);  return output;}  }
class C{  public void addImage(RenderedImage image,int delayMillis,int transparencyColorIndex) throws IOException {  if (this.counter == 0) {    iiom=writer.getDefaultImageMetadata(ImageTypeSpecifier.createFromRenderedImage(image),iwp);    writer.prepareWriteSequence(writer.getDefaultStreamMetadata(iwp));  }  if (this.counter == 0 && loops >= 0) {    IIOMetadata imageMetadata2=writer.getDefaultImageMetadata(ImageTypeSpecifier.createFromRenderedImage(image),iwp);    try {      setMetadata(imageMetadata2,delayMillis,transparencyColorIndex);      setLoops(imageMetadata2,this.loops);      writer.writeToSequence(new IIOImage(image,null,imageMetadata2),iwp);    } catch (    final IIOInvalidTreeException e) {      throw new IOException(e.getMessage());    }  } else   try {    setMetadata(iiom,delayMillis,transparencyColorIndex);    writer.writeToSequence(new IIOImage(image,null,iiom),iwp);  } catch (  final IIOInvalidTreeException e) {    throw new IOException(e.getMessage());  }  this.counter++;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void forceLogout(ImapSession imapSession) throws MailboxException {  final MailboxSession session=ImapSessionUtils.getMailboxSession(imapSession);  if (session == null) {    if (imapSession.getLog().isTraceEnabled()) {      imapSession.getLog().trace("No mailbox session so no force logout needed");    }  } else {    session.close();    mailboxManager.logout(session,true);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object o=stack.pop();  if (o instanceof MetaImage) {    SageRenderer renderEngine=stack.getUIMgrSafe().getRootPanel().getRenderEngine();    if (stack.getUIMgrSafe().getRootPanel().isAcceleratedDrawing() || ((renderEngine instanceof MiniClientSageRenderer) && (((MiniClientSageRenderer)renderEngine).getGfxScalingCaps() & MiniClientSageRenderer.GFX_SCALING_HW) != 0)) {      MetaImage mi=(MetaImage)o;      if (renderEngine instanceof NativeImageAllocator) {        if (mi instanceof MetaImage.Waiter) {          Object waitObj=((MetaImage.Waiter)mi).getWaitObj();          if (waitObj instanceof MediaFile) {            mi=((MediaFile)waitObj).getThumbnail(stack.getUIComponent(),true);            o=mi;          }        }        ((NativeImageAllocator)renderEngine).preloadImage(mi);      }    } else     if (!Sage.EMBEDDED && (Sage.getBoolean("ui/disable_native_image_loader",false) || (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.LOCAL))) {      ((MetaImage)o).getJavaImage(0);      ((MetaImage)o).removeJavaRef(0);    } else     if (!Sage.EMBEDDED && (renderEngine instanceof MiniClientSageRenderer) && ((MiniClientSageRenderer)renderEngine).getGfxScalingCaps() == 0) {      MetaImage mi=(MetaImage)o;      if (mi.getWidth() * mi.getHeight() < 5000000) {        mi.getRawImage(0);        mi.removeRawRef(0);      }    }    return o;  }  return MetaImage.getMetaImage(o == null ? null : o.toString(),stack.getUIComponent());}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMHKernElement(prefix,(AbstractDocument)doc);}  }
class C{  public static boolean makeZipArchive(Context c,String archiveName){  boolean result=false;  FileOutputStream f=null;  ZipOutputStream zip=null;  try {    f=new FileOutputStream(archiveName);    zip=new ZipOutputStream(new BufferedOutputStream(f));    File busybox=new File(PrefStore.getEnvDir(c) + "/bin/busybox");    zip.putNextEntry(new ZipEntry("busybox"));    addFileToZip(busybox,zip);    File updateBinary=new File(PrefStore.getEnvDir(c) + "/scripts/recovery.sh");    zip.putNextEntry(new ZipEntry("META-INF/com/google/android/update-binary"));    addFileToZip(updateBinary,zip);    result=true;  } catch (  IOException e) {    e.printStackTrace();  } finally {    close(zip);    close(f);  }  return result;}  }
class C{  public void addEntrys(List<T> entrys){  if (entrys == null) {    return;  }  if (mViewHolderController.addEntrys(entrys)) {    notifyDataSetChanged();  }}  }
class C{  public static boolean isDominated(AggregationIndividual i1,AggregationIndividual i2){  PerformanceVector pv1=i1.getPerformance();  PerformanceVector pv2=i2.getPerformance();  double[][] performances=new double[pv1.getSize()][2];  for (int p=0; p < performances.length; p++) {    performances[p][0]=pv1.getCriterion(p).getFitness();    performances[p][1]=pv2.getCriterion(p).getFitness();  }  boolean dominated=true;  for (int p=0; p < performances.length; p++) {    dominated&=(performances[p][1] >= performances[p][0]);  }  boolean oneActuallyBetter=false;  for (int p=0; p < performances.length; p++) {    oneActuallyBetter|=(performances[p][1] > performances[p][0]);  }  dominated&=oneActuallyBetter;  return dominated;}  }
class C{  private static int[] add(int[] x,int[] y){  if (x.length < y.length) {    int[] tmp=x;    x=y;    y=tmp;  }  int xIndex=x.length;  int yIndex=y.length;  int result[]=new int[xIndex];  long sum=0;  if (yIndex == 1) {    sum=(x[--xIndex] & LONG_MASK) + (y[0] & LONG_MASK);    result[xIndex]=(int)sum;  } else {    while (yIndex > 0) {      sum=(x[--xIndex] & LONG_MASK) + (y[--yIndex] & LONG_MASK) + (sum >>> 32);      result[xIndex]=(int)sum;    }  }  boolean carry=(sum >>> 32 != 0);  while (xIndex > 0 && carry)   carry=((result[--xIndex]=x[xIndex] + 1) == 0);  while (xIndex > 0)   result[--xIndex]=x[xIndex];  if (carry) {    int bigger[]=new int[result.length + 1];    System.arraycopy(result,0,bigger,1,result.length);    bigger[0]=0x01;    return bigger;  }  return result;}  }
class C{  public static void main(String args[]){  try {    if (System.getSecurityManager() == null) {      System.setSecurityManager(new SecurityManager());    }    MarshalInputStream in=new MarshalInputStream(System.in);    ActivationGroupID id=(ActivationGroupID)in.readObject();    ActivationGroupDesc desc=(ActivationGroupDesc)in.readObject();    long incarnation=in.readLong();    ActivationGroup.createGroup(id,desc,incarnation);  } catch (  Exception e) {    System.err.println("Exception in starting ActivationGroupInit:");    e.printStackTrace();  } finally {    try {      System.in.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1){  return of(Ordering.natural(),k1,v1);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized boolean isTerminated(){  boolean terminated=true;  Iterator<TransactionContext> it=allContexts.iterator();  while (it.hasNext()) {    TransactionContext b=(TransactionContext)it.next();    if (b.isTerminated()) {      it.remove();    } else     terminated=false;  }  if (terminated)   currentContext=null;  return terminated;}  }
class C{  public ByteBuffer createBuffer(){  ByteBuffer buffer=createByteBuffer();  for (  Field field : fields) {    field.write(buffer);  }  buffer.flip();  return buffer;}  }
class C{  private static int flushBuffer(Writer out,char[] buffer,int bufferIndex) throws IOException {  if (bufferIndex > 0)   out.write(buffer,0,bufferIndex);  return 0;}  }
class C{  public void rebuild(boolean force){  propagateProblems();  if (completeParse && !force)   return;  boolean changed=isChanged();  boolean newCompleteParse=isComplete(compilationUnitDeclaration);  if (!newCompleteParse && !force)   return;  top().rebuild();  this.completeParse=newCompleteParse;  if (!changed)   clearChanged();}  }
class C{  public boolean isPublic(){  return Modifier.isPublic(flags);}  }
class C{  private void determineAndProcessEndOfInterval(long inputTime) throws AdeException {  if (m_beginOfInterval == 0) {    m_beginOfInterval=(inputTime / m_numberOf10MinutesSlotsToKeep / TEN_MINUTES) * m_numberOf10MinutesSlotsToKeep * TEN_MINUTES;    m_beginOfNextInterval=m_beginOfInterval + m_numberOf10MinutesSlotsToKeep * TEN_MINUTES;    m_lastReportDateTimeBegin=new DateTime(m_beginOfInterval).withZone(s_outTimeZone);    m_lastReportDateTimeBegin=m_lastReportDateTimeBegin.withTimeAtStartOfDay();    m_processingStartDateTime=new DateTime(m_lastReportDateTimeBegin.getMillis()).withZone(s_outTimeZone);  } else {    boolean isNewInterval=false;    if (inputTime >= m_beginOfNextInterval) {      endOfIntervalProcessing(inputTime);      isNewInterval=true;      m_beginOfInterval=m_beginOfNextInterval;      m_beginOfNextInterval=m_beginOfInterval + m_numberOf10MinutesSlotsToKeep * TEN_MINUTES;      m_currentIndex10MinutesMsgCountArray=0;    }    while (inputTime >= m_beginOfNextInterval) {      endOfIntervalProcessing(inputTime);      m_beginOfInterval=m_beginOfNextInterval;      m_beginOfNextInterval=m_beginOfInterval + m_numberOf10MinutesSlotsToKeep * TEN_MINUTES;    }    if (isNewInterval) {      generateReportIfNeeded(inputTime);    }  }}  }
class C{  public TimePeriod(Date startTime,long duration){  Validate.notNull(startTime);  Validate.isTrue(duration > 0);  this.startTime=startTime;  this.endTime=new Date(startTime.getTime() + duration);}  }
class C{  public static void testValidity(Object o) throws JSONException {  if (o != null) {    if (o instanceof Double) {      if (((Double)o).isInfinite() || ((Double)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    } else     if (o instanceof Float) {      if (((Float)o).isInfinite() || ((Float)o).isNaN()) {        throw new JSONException("JSON does not allow non-finite numbers.");      }    }  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x7563AFA1,version=271) public int sceUsbCamStillWaitInputEnd(){  return 0;}  }
class C{  public X509AttributeCertificateHolder(byte[] certEncoding) throws IOException {  this(parseBytes(certEncoding));}  }
class C{  public void compressMyOwnWay(int[] indexes){  List<Integer> list=new ArrayList<Integer>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  List<Integer> map=new ArrayList<Integer>(CarbonCommonConstants.CONSTANT_SIZE_TEN);  int k=0;  int i=1;  for (; i < indexes.length; i++) {    if (indexes[i] - indexes[i - 1] == 1) {      k++;    } else {      if (k > 0) {        map.add((list.size()));        list.add(indexes[i - k - 1]);        list.add(indexes[i - 1]);      } else {        list.add(indexes[i - 1]);      }      k=0;    }  }  if (k > 0) {    map.add((list.size()));    list.add(indexes[i - k - 1]);    list.add(indexes[i - 1]);  } else {    list.add(indexes[i - 1]);  }  dataAfterComp=convertToArray(list);  if (indexes.length == dataAfterComp.length) {    indexMap=new int[0];  } else {    indexMap=convertToArray(map);  }  if (dataAfterComp.length == 2 && indexMap.length == 1) {    alreadySorted=true;  }}  }
class C{  public ArrayDeque(){  this(DEFAULT_SIZE);}  }
class C{  protected Node newNode(){  return new SVGOMFEMorphologyElement();}  }
class C{  @Override public void uncaughtException(Thread thread,Throwable throwable){  logger.error("EvictionThread Thread " + thread + " died because uncatched Exception",throwable);  evictionIsRunning=false;  evictor=null;}  }
class C{  public void populateFilterResolvedInfo(DimColumnResolvedFilterInfo visitableObj,FilterResolverMetadata metadata) throws FilterUnsupportedException {  DimColumnFilterInfo resolvedFilterObject=null;  List<String> evaluateResultListFinal;  try {    evaluateResultListFinal=metadata.getExpression().evaluate(null).getListAsString();  } catch (  FilterIllegalMemberException e) {    throw new FilterUnsupportedException(e);  }  boolean isNotTimestampType=FilterUtil.checkIfDataTypeNotTimeStamp(metadata.getExpression());  resolvedFilterObject=getDirectDictionaryValKeyMemberForFilter(metadata.getTableIdentifier(),metadata.getColumnExpression(),evaluateResultListFinal,metadata.isIncludeFilter(),isNotTimestampType);  if (!metadata.isIncludeFilter() && null != resolvedFilterObject && !resolvedFilterObject.getFilterList().contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY)) {    resolvedFilterObject.getFilterList().add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);    Collections.sort(resolvedFilterObject.getFilterList());  }  visitableObj.setFilterValues(resolvedFilterObject);}  }
class C{  public TimeWindowRollingPolicy(){}  }
class C{  public static <T0,T1,T2,T3,T4,T5,T6,T7,T8>void print(T0 object0,T1 object1,T2 object2,T3 object3,T4 object4,T5 object5,T6 object6,T7 object7,T8 object8){  System.out.println("" + (object0 == null ? "NullType" : object0) + " "+ (object1 == null ? "NullType" : object1)+ " "+ (object2 == null ? "NullType" : object2)+ " "+ (object3 == null ? "NullType" : object3)+ " "+ (object4 == null ? "NullType" : object4)+ " "+ (object5 == null ? "NullType" : object5)+ " "+ (object6 == null ? "NullType" : object6)+ " "+ (object7 == null ? "NullType" : object7)+ " "+ (object8 == null ? "NullType" : object8));}  }
class C{  private void traceNulledWord(String message){  say(this.toString(),message,", writing a null");}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:32.745 -0500",hash_original_method="D897CF322202613DC6CC465308B391E4",hash_generated_method="5EF8DAFECFDD103332E8F810D33909CE") public boolean enqueue(){  return enqueueInternal();}  }
class C{  public static ModelRelation create(ModelEntity modelEntity,Element relationElement,boolean isAutoRelation){  String type=relationElement.getAttribute("type").intern();  String title=relationElement.getAttribute("title").intern();  String relEntityName=relationElement.getAttribute("rel-entity-name").intern();  String fkName=relationElement.getAttribute("fk-name").intern();  String description=UtilXml.childElementValue(relationElement,"description");  List<ModelKeyMap> keyMaps=Collections.emptyList();  List<? extends Element> elementList=UtilXml.childElementList(relationElement,"key-map");  if (!elementList.isEmpty()) {    keyMaps=new ArrayList<ModelKeyMap>(elementList.size());    for (    Element keyMapElement : elementList) {      keyMaps.add(new ModelKeyMap(keyMapElement));    }    keyMaps=Collections.unmodifiableList(keyMaps);  }  return new ModelRelation(modelEntity,description,type,title,relEntityName,fkName,keyMaps,isAutoRelation);}  }
class C{  public FlatteningPathIterator(PathIterator src,double flatness){  this(src,flatness,10);}  }
class C{  public void fireOperatorMoved(Operator operator){  List<Operator> list=new LinkedList<>();  list.add(operator);  fireOperatorsMoved(list);}  }
class C{  public void parsePushByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  dataStream.writeLong(network.createVertex(Primitive.PUSH).getId());  parseElementByteCode(stream,dataStream,elements,debug,network);  ensureNext(';',stream);}  }
class C{  private void initializeLocalAndTargetInfo(String svcId) throws Exception {  PropertyInfoExt localPropInfo=localRepository.getOverrideProperties();  localConfigVersion=localPropInfo.getProperty(PropertyInfoExt.CONFIG_VERSION);  if (localConfigVersion == null) {    localConfigVersion="0";    localPropInfo.addProperty(PropertyInfoExt.CONFIG_VERSION,localConfigVersion);  }  coordinator.setNodeSessionScopeInfo(new ConfigVersion(localConfigVersion));  log.info("Step1a: Local config version: {}",localConfigVersion);  localTargetPropInfo=getLocalTargetPropInfo(localPropInfo);  log.debug("Step1a: Local target properties: {}",localTargetPropInfo);  targetPropInfo=coordinator.getTargetProperties();  if (targetPropInfo == null) {    try {      coordinator.setTargetProperties(localPropInfo.getAllProperties());      coordinator.setTargetInfo(new PowerOffState(PowerOffState.State.NONE));      targetPropInfo=coordinator.getTargetInfo(PropertyInfoExt.class);      log.info("Step1b: Target property set to local state: {}",targetPropInfo);    } catch (    CoordinatorClientException e) {      log.info("Step1b: Wait another control node to set target");      retrySleep();      throw e;    }  }}  }
class C{  private void highlightLabel(String labelstring,String line,int startOffset){  if (document.data.isConstant(labelstring)) {    applyStyle(labelstring,constant,line,startOffset);  } else   if (document.data.isVariable(labelstring)) {    applyStyle(labelstring,variable,line,startOffset);  } else {    applyStyle(labelstring,label,line,startOffset);  }}  }
class C{  public static Metadata readMetadata(BufferedInputStream inputStream) throws ImageProcessingException {  int magicNumber=readMagicNumber(inputStream);  return readMetadata(inputStream,null,magicNumber);}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  default <T extends AutoCloseable>Proxy<T> autoCloseProxy(Supplier<T> supplier){  return proxy(supplier).onAfter(null);}  }
class C{  private void showGlobalContextActionBar(){  ActionBar actionBar=getActionBar();  actionBar.setDisplayShowTitleEnabled(true);  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);  actionBar.setTitle(R.string.app_name);}  }
class C{  public void addCSSClassOrLogError(CSSClass cls){  try {    cssman.addClass(cls);  } catch (  CSSNamingConflict e) {    LoggingUtil.exception(e);  }}  }
