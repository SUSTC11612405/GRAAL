class C{  protected void checkParameterCount(int len){  int min=0, max=Integer.MAX_VALUE;switch (info.type) {case COALESCE:case CSVREAD:case LEAST:case GREATEST:    min=1;  break;case NOW:case CURRENT_TIMESTAMP:case RAND:max=1;break;case COMPRESS:case LTRIM:case RTRIM:case TRIM:case FILE_READ:case ROUND:case XMLTEXT:case TRUNCATE:min=1;max=2;break;case TO_CHAR:min=1;max=3;break;case REPLACE:case LOCATE:case INSTR:case SUBSTR:case SUBSTRING:case LPAD:case RPAD:min=2;max=3;break;case CONCAT:case CONCAT_WS:case CSVWRITE:min=2;break;case XMLNODE:min=1;max=4;break;case FORMATDATETIME:case PARSEDATETIME:min=2;max=4;break;case CURRVAL:case NEXTVAL:min=1;max=2;break;case DECODE:case CASE:min=3;break;default :DbException.throwInternalError("type=" + info.type);}boolean ok=(len >= min) && (len <= max);if (!ok) {throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2,info.name,min + ".." + max);}}  }
class C{  public void testTypeAsArray() throws Exception {  ObjectMapper m=new ObjectMapper();  m.getSerializationConfig().addMixInAnnotations(Animal.class,TypeWithArray.class);  Map<String,Object> result=writeAndMap(m,new AnimalWrapper(new Dog("Amadeus",7)));  assertEquals(1,result.size());  List<?> l=(List<?>)result.get("animal");  assertNotNull(l);  assertEquals(2,l.size());  assertEquals(Dog.class.getName(),l.get(0));  Map<?,?> doggie=(Map<?,?>)l.get(1);  assertNotNull(doggie);  assertEquals(2,doggie.size());  assertEquals("Amadeus",doggie.get("name"));  assertEquals(Integer.valueOf(7),doggie.get("boneCount"));}  }
class C{  public void testTxPartitionedPessimisticReadCommitted() throws Exception {  checkTx(PARTITIONED,PESSIMISTIC,READ_COMMITTED);}  }
class C{  @Override protected boolean isAllowed(final RPEntity user){  final int level=user.getLevel();  if ((level < minLevel) || (level > maxLevel)) {    return false;  }  return true;}  }
class C{  public GeoLat(){  this(null);}  }
class C{  private static void appendNewlineIfNecessary(StringBuffer buf,Writer out) throws IOException {  int len=buf.length();  if ((len != 0) && (buf.charAt(len - 1) != '\n')) {    out.write('\n');  }}  }
class C{  public static URI applyParameters(URI uri,Map<String,String> queryParameters) throws URISyntaxException {  return applyParameters(uri,queryParameters,"");}  }
class C{  public Action build(){  if (data == null || type == null) {    throw new NullPointerException("Please invoke 'Builder.with()' and 'Builder.putData()' first!");  }  return new Action(type,data);}  }
class C{  public AdeOutputDirectoriesManager(String outputPath) throws AdeException {  m_outputHome=new File(outputPath);  m_modelsPath=new File(m_outputHome,"models");  m_continuousOutputPath=new File(m_outputHome,"continuous");  m_anaAdhocOutputPath=new File(m_outputHome,"analysis_adhoc");  ExtFileUtils.createDir(m_modelsPath);  ExtFileUtils.createDir(m_continuousOutputPath);  ExtFileUtils.createDir(m_anaAdhocOutputPath);}  }
class C{  public void changeRoleToMasterWithRequest() throws Exception {  int xid=4242;  assertTrue("This method can only be called when handler is in " + "MASTER or SLAVE role",handler.isHandshakeComplete());  setupSwitchSendRoleRequestAndVerify(true,xid,Role.MASTER);  reset(sw);  expect(sw.inputThrottled(anyObject(OFMessage.class))).andReturn(false).anyTimes();  sw.setAttribute(IOFSwitch.SWITCH_SUPPORTS_NX_ROLE,true);  expectLastCall().once();  sw.setHARole(Role.MASTER);  expectLastCall().once();  replay(sw);  verify(controller);  reset(controller);  controller.switchActivated(sw);  expectLastCall().once();  OFMessage reply=getRoleReply(xid,Role.MASTER);  sendMessageToHandlerNoControllerReset(Collections.singletonList(reply));  assertEquals(OFChannelHandler.ChannelState.MASTER,handler.getStateForTesting());}  }
class C{  default void unbind(String address){  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  @Override public void writeAsEncodedUnicode(Writer writer) throws XMLStreamException {}  }
class C{  @SuppressWarnings("TypeMayBeWeakened") protected GridKernalContextImpl(GridLoggerProxy log,IgniteEx grid,IgniteConfiguration cfg,GridKernalGateway gw,ExecutorService utilityCachePool,ExecutorService marshCachePool,ExecutorService execSvc,ExecutorService sysExecSvc,ExecutorService p2pExecSvc,ExecutorService mgmtExecSvc,ExecutorService igfsExecSvc,ExecutorService restExecSvc,IgniteStripedThreadPoolExecutor callbackExecSvc,List<PluginProvider> plugins) throws IgniteCheckedException {  assert grid != null;  assert cfg != null;  assert gw != null;  this.grid=grid;  this.cfg=cfg;  this.gw=gw;  this.utilityCachePool=utilityCachePool;  this.marshCachePool=marshCachePool;  this.execSvc=execSvc;  this.sysExecSvc=sysExecSvc;  this.p2pExecSvc=p2pExecSvc;  this.mgmtExecSvc=mgmtExecSvc;  this.igfsExecSvc=igfsExecSvc;  this.restExecSvc=restExecSvc;  this.callbackExecSvc=callbackExecSvc;  marshCtx=new MarshallerContextImpl(plugins);  try {    spring=SPRING.create(false);  } catch (  IgniteCheckedException ignored) {    if (log != null && log.isDebugEnabled())     log.debug("Failed to load spring component, will not be able to extract userVersion from " + "META-INF/ignite.xml.");  }}  }
class C{  private static boolean isTwoSlotType(ClassNode type){  return type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE;}  }
class C{  public static void addPermissionRecursive(Path path,PosixFilePermission permission) throws IOException {  changePermissionsRecursive(path,PermissionChange.ADD,Collections.singleton(permission));}  }
class C{  public void uninstallUI(JComponent c){  super.uninstallUI(c);  uninstallClientDecorations(root);  layoutManager=null;  mouseInputListener=null;  root=null;}  }
class C{  private void DFS(SortedGraphNode node,int numNodes){  push(node);  @SuppressWarnings("unchecked") Enumeration<? extends SortedGraphNode>[] nodeEnum=new Enumeration[numNodes];  recurse:   while (!empty()) {    node=peek();    Enumeration<? extends SortedGraphNode> _enum=nodeEnum[node.getNumber()];    if (_enum == null) {      node.setSortMarker(sortMarker);      if (forward) {        _enum=node.getOutNodes();      } else {        _enum=node.getInNodes();      }    }    while (_enum.hasMoreElements()) {      SortedGraphNode target=_enum.nextElement();      if (target.getSortMarker() != sortMarker) {        nodeEnum[node.getNumber()]=_enum;        push(target);        continue recurse;      }    }    node.setSortNumber(sortNumber--,forward);    node.setSortedNext(lastNumberedNode,forward);    lastNumberedNode=node;    pop();  }}  }
class C{  private void parseConfiguration(){  if (currentCluster == -1) {    logger.debug("Cluster not yet set");    return;  }}  }
class C{  public void show(){  final int height=buildDropDown();  final int widthSpec=getListWidthSpec();  boolean noInputMethod=isInputMethodNotNeeded();  PopupWindowCompat.setWindowLayoutType(mPopup,mDropDownWindowLayoutType);  final int marginsLeft=mMargins.left;  final int marginsTop=mMargins.top;  final int marginsBottom=mMargins.bottom;  final int marginsRight=mMargins.right;  getBackgroundPadding(mTempRect);  final int backgroundLeft=mTempRect.left;  final int backgroundTop=mTempRect.top;  final int backgroundBottom=mTempRect.bottom;  final int backgroundRight=mTempRect.right;  int verticalOffset=mDropDownVerticalOffset;  int horizontalOffset=mDropDownHorizontalOffset;  final int anchorWidth=mDropDownAnchorView.getWidth();  final int anchorHeight=mDropDownAnchorView.getHeight();  getLocationInWindow(mDropDownAnchorView,mTempLocation);  final int anchorLeft=mTempLocation[0];  final int anchorRight=anchorLeft + anchorWidth;  final int anchorTop=mTempLocation[1];  final int anchorBottom=anchorTop + anchorHeight;  final boolean rightAligned=GravityCompat.getAbsoluteGravity(getDropDownGravity() & GravityCompat.RELATIVE_HORIZONTAL_GRAVITY_MASK,mLayoutDirection) == Gravity.RIGHT;  if (rightAligned) {    horizontalOffset+=anchorWidth - widthSpec - (marginsRight - backgroundRight);  } else {    horizontalOffset+=(marginsLeft - backgroundLeft);  }  final int bottomDecorations=getWindowFrame(mDropDownAnchorView,noInputMethod,mTempRect);  final int windowLeft=mTempRect.left;  final int windowRight=mTempRect.right;  final int windowTop=mTempRect.top;  final int windowBottom=mTempRect.bottom;  final int windowWidth=windowRight - windowLeft;  final int windowHeight=windowBottom - windowTop;  getBoundsInWindow(mTempRect);  final int boundsTop=mTempRect.top;  final int boundsRight=mTempRect.right;  final int boundsLeft=mTempRect.left;  final int boundsBottom=mTempRect.bottom;  final int screenRight=windowRight - (marginsRight - backgroundRight) - boundsRight;  final int screenLeft=windowLeft + (marginsLeft - backgroundLeft) + boundsLeft;  final int screenWidth=screenRight - screenLeft;  if (!rightAligned && windowWidth < anchorLeft + horizontalOffset + widthSpec) {    horizontalOffset=mDropDownHorizontalOffset < 0 ? 0 : mDropDownHorizontalOffset;    horizontalOffset-=widthSpec - (windowWidth - anchorLeft);    horizontalOffset-=marginsRight - backgroundRight;  } else   if (rightAligned && 0 > anchorLeft + horizontalOffset) {    horizontalOffset=mDropDownHorizontalOffset > 0 ? 0 : mDropDownHorizontalOffset;    horizontalOffset-=anchorLeft;    horizontalOffset+=marginsLeft - backgroundLeft;  }  if (windowWidth < widthSpec + horizontalOffset + anchorLeft) {    int diff=Math.abs(windowWidth - (widthSpec + horizontalOffset + anchorLeft));    horizontalOffset-=diff;  } else   if (0 > anchorLeft + horizontalOffset) {    int diff=Math.abs(horizontalOffset + anchorLeft);    horizontalOffset+=diff;  }  int maxHeight=getMaxAvailableHeight(mDropDownAnchorView,noInputMethod) + backgroundTop + backgroundBottom;  int availableHeight=maxHeight;  availableHeight-=marginsTop - backgroundTop;  availableHeight-=marginsBottom - backgroundBottom;  int limitHeight=Math.min(windowHeight,availableHeight);  final int heightSpec;  if (mPopup.isShowing()) {    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {      heightSpec=limitHeight;    } else     if (mDropDownHeight == ViewGroup.LayoutParams.WRAP_CONTENT) {      heightSpec=Math.min(height,limitHeight);    } else {      heightSpec=Math.min(mDropDownHeight,limitHeight);    }  } else {    if (mDropDownHeight == ViewGroup.LayoutParams.MATCH_PARENT) {      heightSpec=limitHeight;    } else     if (mDropDownHeight == ViewGroup.LayoutParams.WRAP_CONTENT) {      heightSpec=Math.min(height,limitHeight);    } else {      heightSpec=Math.min(mDropDownHeight,limitHeight);    }  }  final int screenBottom=windowBottom - (marginsBottom - backgroundBottom) - boundsBottom;  final int screenTop=windowTop + (marginsTop - backgroundTop) + boundsTop;{    final int popupTop=anchorBottom + verticalOffset;    final int popupBottom=popupTop + heightSpec;    final int popupHeight=popupBottom - popupTop;    if (popupBottom > screenBottom) {      verticalOffset-=(popupBottom - screenBottom);    } else     if (popupTop < screenTop) {      verticalOffset+=(screenTop - popupTop);    }  }{    final int popupTop=anchorBottom + verticalOffset;    final int popupBottom=popupTop + heightSpec;    final int popupHeight=popupBottom - popupTop;    if (windowBottom < popupBottom) {      int diff=Math.abs(windowBottom - popupBottom);      verticalOffset-=diff;    } else     if (windowTop > popupTop) {      int diff=Math.abs(windowTop - popupTop);      verticalOffset+=diff;    }  }  if (mPopup.isShowing()) {    mPopup.setOutsideTouchable(!mForceIgnoreOutsideTouch && !mDropDownAlwaysVisible);    mPopup.update(getAnchorView(),horizontalOffset,verticalOffset,(widthSpec < 0) ? -1 : widthSpec,(heightSpec < 0) ? -1 : heightSpec);  } else {    mPopup.setWidth(widthSpec);    mPopup.setHeight(heightSpec);    setPopupClipToScreenEnabled(true);    mPopup.setOutsideTouchable(!mForceIgnoreOutsideTouch && !mDropDownAlwaysVisible);    mPopup.setTouchInterceptor(mTouchInterceptor);    PopupWindowCompat.showAsDropDown(mPopup,getAnchorView(),horizontalOffset,verticalOffset,Gravity.NO_GRAVITY);    mDropDownList.setSelection(ListView.INVALID_POSITION);    if (DEBUG)     Log.e(TAG,"isAboveAnchor=" + mPopup.isAboveAnchor());    if (!mModal || mDropDownList.isInTouchMode()) {      clearListSelection();    }    if (!mModal) {      mHandler.post(mHideSelector);    }  }}  }
class C{  private void invokeInsn(final int opcode,final Type type,final Method method,final boolean itf){  String owner=type.getSort() == Type.ARRAY ? type.getDescriptor() : type.getInternalName();  mv.visitMethodInsn(opcode,owner,method.getName(),method.getDescriptor(),itf);}  }
class C{  public IString toLowerCase(){  String s=toString();  String lc=s.toLowerCase();  if (s.equals(lc))   return this;  return new IString(lc,index);}  }
class C{  public void runok(){  final String portStr=System.getProperty("rmi.port",null);  final int port=portStr != null ? Integer.parseInt(portStr) : basePort;  final File[] conf=findConfigurationFilesOk();  if ((conf == null) || (conf.length == 0))   throw new RuntimeException("No configuration found");  String errStr=null;  for (int i=0; i < conf.length; i++) {    for (int j=0; j < PORT_TEST_LEN; i++) {      try {        errStr=testConfiguration(conf[i],port + testPort++);        break;      } catch (      BindException e) {      }    }    if (errStr != null) {      throw new RuntimeException(errStr);    }  }}  }
class C{  public Response<?> response(){  return response;}  }
class C{  protected static int[] randomInt(int m,int i0,int i1){  int[] A=new int[m];  for (int i=0; i < A.length; i++)   A[i]=Random.randInt(i0,i1);  return A;}  }
class C{  public void initialiseInternalStates(){  int nodeCount=tree.getNodeCount();  int maxState=microsatPat.getDataType().getStateCount() - 1;  int internalNodeCount=tree.getInternalNodeCount();  Parameter.DefaultBounds bounds=new Parameter.DefaultBounds(maxState,0,internalNodeCount);  for (int nodeNum=tree.getExternalNodeCount(); nodeNum < nodeCount; nodeNum++) {    NodeRef node=tree.getNode(nodeNum);    NodeRef leftChild=tree.getChild(node,0);    NodeRef rightChild=tree.getChild(node,1);    int nodeValue;    int leftChildState=getNodeValue(leftChild);    int rightChildState=getNodeValue(rightChild);    if (leftChildState < maxState && rightChildState < maxState) {      nodeValue=(leftChildState + rightChildState) / 2;    } else     if (leftChildState < maxState) {      nodeValue=leftChildState;    } else     if (rightChildState < maxState) {      nodeValue=rightChildState;    } else {      nodeValue=MathUtils.nextInt(maxState + 1);    }    parameter.setParameterValueQuietly(nodeNum - tree.getExternalNodeCount(),nodeValue);  }  parameter.addBounds(bounds);}  }
class C{  public Collection<CollapseData> collapseTree(GraphModel graph,TreeModel treeData){  TopoSortState sorter=new TopoSortState(treeData);  List<GraphNode> inOrder=sorter.topoSort(graph.getNodes());  Collection<CollapseData> collapseChanges=Lists.newArrayList();  for (  GraphNode top : inOrder) {    addCollapseData(graph,collapseChanges,treeData,top);  }  return collapseChanges;}  }
class C{  public void registerOptional4(String name,Type arg1,Type arg2,Type arg3,Type arg4,InvocationPlugin plugin){  plugins.register(plugin,true,allowOverwrite,declaringType,name,arg1,arg2,arg3,arg4);}  }
class C{  public boolean isSide(){  Volume dataItem=(Volume)getObject();  return dataItem.isSide();}  }
class C{  public static boolean hasHttpConnectionBug(){  return Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE__TYPE:    setType((EnumLiteralPropertyAttributeType)newValue);  return;case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE__VALUE:setValue((EnumLiteral)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  void drawDivider(Canvas canvas,Rect bounds,int childIndex){  final Drawable divider=mDivider;  final boolean clipDivider=mClipDivider;  if (!clipDivider) {    divider.setBounds(bounds);  } else {    canvas.save();    canvas.clipRect(bounds);  }  divider.draw(canvas);  if (clipDivider) {    canvas.restore();  }}  }
class C{  public static int calcScrimSize(int maxHeight){  int minHeight=MetricsUtil.inPx(80);  int idealHeight=maxHeight / 2;  return idealHeight > minHeight ? idealHeight : minHeight;}  }
class C{  public void scale(double scalex,double scaley,Point2D from){  AffineTransform xf=AffineTransform.getTranslateInstance(from.getX(),from.getY());  xf.scale(scalex,scaley);  xf.translate(-from.getX(),-from.getY());  inverse=null;  transform.preConcatenate(xf);  fireStateChanged();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String02() throws NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  try {    SSLContext.getInstance(null,defaultProviderName);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (protocol is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      SSLContext.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException was not thrown as expected (protocol: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  protected void checkCapacity(){  if (size >= threshold) {    int newCapacity=data.length * 2;    if (newCapacity <= MAXIMUM_CAPACITY) {      ensureCapacity(newCapacity);    }  }}  }
class C{  public static List<Object> toList(Object object){  List<Object> result;  if (object instanceof LazyBinaryArray) {    result=((LazyBinaryArray)object).getList();  } else {    result=(List<Object>)object;  }  return result;}  }
class C{  public Mean put(double[] vals){  for (  double v : vals) {    put(v);  }  return this;}  }
class C{  public static File createLogFileObject(final String logType,final File location,final boolean setInUse){  final TELogFileName logFileName=new TELogFileName(logType);  final File logFile=logFileName.createFileDescriptor(location);  if (setInUse) {    TELogUtils.setInUseLogFileForLogType(logType,logFile);  }  return logFile;}  }
class C{  public static void addFileDependencyCondition(ParameterType parameter,ParameterHandler parameterHandler,PortProvider portProvider){  parameter.registerDependencyCondition(new PortConnectedCondition(parameterHandler,portProvider,true,false));}  }
class C{  public static void renderEPL(StringWriter writer,Object constant){  if (constant == null) {    writer.write("null");    return;  }  if ((constant instanceof String) || (constant instanceof Character)) {    writer.write('\"');    writer.write(constant.toString());    writer.write('\"');  } else   if (constant instanceof Long) {    writer.write(constant.toString() + "L");  } else   if (constant instanceof Double) {    writer.write(constant.toString() + "d");  } else   if (constant instanceof Float) {    writer.write(constant.toString() + "f");  } else {    writer.write(constant.toString());  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  private static Properties filterOutAgentProperties(final Properties props){  final Properties filteredProps=new Properties();  for (  final Object key : props.keySet()) {    if (_getPropertyDescription(key.toString()) == null) {      final String value=props.getProperty(key.toString());      if (value != null) {        filteredProps.setProperty(key.toString(),value);      }    }  }  appendLogFileProperty(filteredProps);  return filteredProps;}  }
class C{  private void startRemoteCommand(Attributes atts){}  }
class C{  public void filter(){  for (Iterator<Entry<Text,Parse>> i=iterator(); i.hasNext(); ) {    Entry<Text,Parse> entry=i.next();    if (!entry.getValue().getData().getStatus().isSuccess()) {      LOG.warn(entry.getKey() + " is not parsed successfully, filtering");      i.remove();    }  }}  }
class C{  public RankSelect(final Rank rank,final Select select){  this(rank,select,null);}  }
class C{  public CCSprite(String filepath,CGRect rect){  assert filepath != null : "Invalid filename for sprite";  CCTexture2D texture=CCTextureCache.sharedTextureCache().addImage(filepath);  if (texture != null) {    init(texture,rect);  }}  }
class C{  public static double magnitude(double[] u){  return Math.sqrt(dot(u,u));}  }
class C{  static public final boolean randomBoolean(float chance){  return MathUtils.random() < chance;}  }
class C{  public static final int unsignedShort(short val){  return (val & 0xFFFF);}  }
class C{  @Override public void writeBatch() throws IOException {  if (getInstances() == null) {    throw new IOException("No instances to save");  }  if (getRetrieval() == INCREMENTAL) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  setRetrieval(BATCH);  setWriteMode(WRITE);  if ((retrieveFile() == null) && (getWriter() == null)) {    System.out.println(matlabHeader());    for (int i=0; i < getInstances().numInstances(); i++) {      System.out.println(instanceToMatlab(getInstances().instance(i)));    }    setWriteMode(WAIT);  } else {    PrintWriter outW=new PrintWriter(getWriter());    outW.println(matlabHeader());    for (int i=0; i < getInstances().numInstances(); i++) {      outW.println(instanceToMatlab(getInstances().instance(i)));    }    outW.flush();    outW.close();    setWriteMode(WAIT);    outW=null;    resetWriter();    setWriteMode(CANCEL);  }}  }
class C{  public static Object toObject(Class clazz,String value,Converter converter) throws ParseException {  if (String.class == clazz) {    return value;  }  if (Integer.class == clazz || Integer.TYPE == clazz || Byte.class == clazz || Byte.TYPE == clazz || Short.class == clazz || Short.TYPE == clazz) {    return Datatypes.get(IntegerDatatype.NAME).parse(value);  }  if (Date.class == clazz) {    try {      return Datatypes.get(DateTimeDatatype.NAME).parse(value);    } catch (    ParseException e) {      try {        return Datatypes.get(DateDatatype.NAME).parse(value);      } catch (      ParseException e1) {        return Datatypes.get(TimeDatatype.NAME).parse(value);      }    }  }  if (BigDecimal.class == clazz) {    return Datatypes.get(BigDecimalDatatype.NAME).parse(value);  }  if (Boolean.class == clazz || Boolean.TYPE == clazz) {    return Datatypes.get(BooleanDatatype.NAME).parse(value);  }  if (Long.class == clazz || Long.TYPE == clazz) {    return Datatypes.get(LongDatatype.NAME).parse(value);  }  if (Double.class == clazz || Double.TYPE == clazz || Float.class == clazz || Float.TYPE == clazz) {    return Datatypes.get(DoubleDatatype.NAME).parse(value);  }  if (UUID.class == clazz) {    return UUID.fromString(value);  }  if (Entity.class.isAssignableFrom(clazz)) {    return converter.parseEntity(value);  }  if (Collection.class.isAssignableFrom(clazz)) {    return converter.parseEntitiesCollection(value,clazz);  }  throw new IllegalArgumentException("Parameters of type " + clazz.getName() + " are not supported");}  }
class C{  private static void appendFile(final File f,final String s){  try (FileWriter w=new FileWriter(f,true)){    w.write(s);  } catch (  final IOException x) {    monitor.infoIOException(x,"append");  }}  }
class C{  public void focusGained(FocusEvent e){  m_infocus=true;  setText(getText());}  }
class C{  static public boolean releaseId(int id,Object purpose){  LinkedList<Integer> freeIds=freeIdsMap.get(purpose);  if (freeIds == null) {    Emulator.log.warn(String.format("Attempt to release ID=%d with unknown purpose='%s'",id,purpose));    return false;  }  for (ListIterator<Integer> lit=freeIds.listIterator(); lit.hasNext(); ) {    int currentId=lit.next();    if (currentId == id) {      Emulator.log.warn(String.format("Attempt to release free ID=%d with purpose='%s'",id,purpose));      return false;    }    if (currentId > id) {      lit.set(id);      lit.add(currentId);      return true;    }  }  freeIds.add(id);  return true;}  }
class C{  public NumericNode numberNode(BigInteger v){  return BigIntegerNode.valueOf(v);}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new HashMap<String,ConcurrentHashMap<String,HttpCookie>>();  Map<String,?> prefsMap=cookiePrefs.getAll();  for (  Map.Entry<String,?> entry : prefsMap.entrySet()) {    if (((String)entry.getValue()) != null && !((String)entry.getValue()).startsWith(COOKIE_NAME_PREFIX)) {      String[] cookieNames=TextUtils.split((String)entry.getValue(),",");      for (      String name : cookieNames) {        String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);        if (encodedCookie != null) {          HttpCookie decodedCookie=decodeCookie(encodedCookie);          if (decodedCookie != null) {            if (!cookies.containsKey(entry.getKey()))             cookies.put(entry.getKey(),new ConcurrentHashMap<String,HttpCookie>());            cookies.get(entry.getKey()).put(name,decodedCookie);          }        }      }    }  }}  }
class C{  public void testCertStore12() throws InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  try {    CertStore.getInstance(null,dParams,dProv);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when type is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertStore.getInstance(invalidValues[i],dParams,dProv);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public Duration plusHours(long hoursToAdd){  return plus(Math.multiplyExact(hoursToAdd,SECONDS_PER_HOUR),0);}  }
class C{  protected void splitData(int[][][][] subsetIndices,double[][][][] subsetWeights,int att,double splitPoint,int[][] sortedIndices,double[][] weights,Instances data) throws Exception {  int j;  int[] num;  for (int i=0; i < data.numAttributes(); i++) {    if (i != data.classIndex()) {      if (data.attribute(att).isNominal()) {        num=new int[data.attribute(att).numValues()];        for (int k=0; k < num.length; k++) {          subsetIndices[k][0][i]=new int[sortedIndices[i].length];          subsetWeights[k][0][i]=new double[sortedIndices[i].length];        }        for (j=0; j < sortedIndices[i].length; j++) {          Instance inst=data.instance(sortedIndices[i][j]);          if (inst.isMissing(att)) {            for (int k=0; k < num.length; k++) {              if (m_Prop[k] > 0) {                subsetIndices[k][0][i][num[k]]=sortedIndices[i][j];                subsetWeights[k][0][i][num[k]]=m_Prop[k] * weights[i][j];                num[k]++;              }            }          } else {            int subset=(int)inst.value(att);            subsetIndices[subset][0][i][num[subset]]=sortedIndices[i][j];            subsetWeights[subset][0][i][num[subset]]=weights[i][j];            num[subset]++;          }        }      } else {        num=new int[2];        for (int k=0; k < 2; k++) {          subsetIndices[k][0][i]=new int[sortedIndices[i].length];          subsetWeights[k][0][i]=new double[weights[i].length];        }        for (j=0; j < sortedIndices[i].length; j++) {          Instance inst=data.instance(sortedIndices[i][j]);          if (inst.isMissing(att)) {            for (int k=0; k < num.length; k++) {              if (m_Prop[k] > 0) {                subsetIndices[k][0][i][num[k]]=sortedIndices[i][j];                subsetWeights[k][0][i][num[k]]=m_Prop[k] * weights[i][j];                num[k]++;              }            }          } else {            int subset=(inst.value(att) < splitPoint) ? 0 : 1;            subsetIndices[subset][0][i][num[subset]]=sortedIndices[i][j];            subsetWeights[subset][0][i][num[subset]]=weights[i][j];            num[subset]++;          }        }      }      for (int k=0; k < num.length; k++) {        int[] copy=new int[num[k]];        System.arraycopy(subsetIndices[k][0][i],0,copy,0,num[k]);        subsetIndices[k][0][i]=copy;        double[] copyWeights=new double[num[k]];        System.arraycopy(subsetWeights[k][0][i],0,copyWeights,0,num[k]);        subsetWeights[k][0][i]=copyWeights;      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:10.471 -0500",hash_original_method="96B9D5C527FFE50D39D28C5BAE93E1F6",hash_generated_method="7DDC272504240B7C0817A1EDA013058A") public static Metrics isBoring(CharSequence text,TextPaint paint){  return isBoring(text,paint,TextDirectionHeuristics.FIRSTSTRONG_LTR,null);}  }
class C{  private void action_button(){  String urlString=m_text.getText();  String message=null;  if (urlString != null && urlString.length() > 0) {    try {      URL url=new URL(urlString);      Env.startBrowser(urlString);      return;    } catch (    Exception e) {      message=e.getMessage();    }  }  ADialog.warn(0,this,"URLnotValid",message);}  }
class C{  @Deprecated public MechTileset(String dir_path){  if (dir_path == null) {    throw new IllegalArgumentException("must provide dir_path");  }  dir=new File(dir_path);}  }
class C{  protected void addWarToDomain(WAR war,Element domain){  Element application=domain.getOwnerDocument().createElement("Application");  domain.appendChild(application);  application.setAttribute("Name","_" + war.getContext() + "_app");  application.setAttribute("Path",getFileHandler().getParent(getAbsolutePath(war)));  application.setAttribute("StagingMode","nostage");  application.setAttribute("TwoPhase","false");  Element webAppComponent=application.getOwnerDocument().createElement("WebAppComponent");  application.appendChild(webAppComponent);  webAppComponent.setAttribute("Name",war.getContext());  webAppComponent.setAttribute("Targets",getServerName());  webAppComponent.setAttribute("URI",getURI(war));}  }
class C{  @Override public boolean isLabelVisible(){  return (labelVisible);}  }
class C{  protected ReactiveElementImpl(){  super();}  }
class C{  public static BigInteger toBigInteger(final Ed25519FieldElement f){  return toBigInteger(f.encode().getRaw());}  }
class C{  private String formatReplicaLabelForSFSEntry(String systemSerial,String replicaReplicationGroupName,String sourceRGName){  return String.format("%s+%s#%s+%s#",systemSerial,sourceRGName,systemSerial,replicaReplicationGroupName);}  }
class C{  public void addTickLabelSection(final Section SECTION){  if (null == SECTION)   return;  tickLabelSections.add(SECTION);  Collections.sort(tickLabelSections,new SectionComparator());  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  public static QueryStorageCapabilities parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStorageCapabilities object=new QueryStorageCapabilities();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStorageCapabilities".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStorageCapabilities)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","capabilityUniqueId").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(reader.getElementText());      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","capabilityUniqueId").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(reader.getElementText());            }          } else {            loopDone1=true;          }        }      }      object.setCapabilityUniqueId((java.lang.String[])list1.toArray(new java.lang.String[list1.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public Size scale(int n,int d){  return new Size(width * n / d,height * n / d);}  }
class C{  public void load(String filename) throws IOException {  DataInputStream dis=new DataInputStream(new FileInputStream(filename));  this.in(dis);  dis.close();}  }
class C{  public Boolean isAutoCreateReceiver(){  return autoCreateReceiver;}  }
class C{  private double[][] parsePoints(List<Object> o) throws ParseException {  double[] lats=new double[o.size()];  double[] lons=new double[o.size()];  for (int i=0; i < o.size(); i++) {    Object point=o.get(i);    if (point instanceof List == false) {      throw newParseException("elements of coordinates array must [lat, lon] array, but got: " + point);    }    List<Object> pointList=(List<Object>)point;    if (pointList.size() != 2) {      throw newParseException("elements of coordinates array must [lat, lon] array, but got wrong element count: " + pointList);    }    if (pointList.get(0) instanceof Double == false) {      throw newParseException("elements of coordinates array must [lat, lon] array, but first element is not a Double: " + pointList.get(0));    }    if (pointList.get(1) instanceof Double == false) {      throw newParseException("elements of coordinates array must [lat, lon] array, but second element is not a Double: " + pointList.get(1));    }    lons[i]=((Double)pointList.get(0)).doubleValue();    lats[i]=((Double)pointList.get(1)).doubleValue();  }  return new double[][]{lats,lons};}  }
class C{  public static String javaDecode(String s){  int length=s.length();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == '\\') {      if (i + 1 >= s.length()) {        throw getFormatException(s,i);      }      c=s.charAt(++i);switch (c) {case 't':        buff.append('\t');      break;case 'r':    buff.append('\r');  break;case 'n':buff.append('\n');break;case 'b':buff.append('\b');break;case 'f':buff.append('\f');break;case '#':buff.append('#');break;case '=':buff.append('=');break;case ':':buff.append(':');break;case '"':buff.append('"');break;case '\\':buff.append('\\');break;case 'u':{try {c=(char)(Integer.parseInt(s.substring(i + 1,i + 5),16));} catch (NumberFormatException e) {throw getFormatException(s,i);}i+=4;buff.append(c);break;}default :if (c >= '0' && c <= '9') {try {c=(char)(Integer.parseInt(s.substring(i,i + 3),8));} catch (NumberFormatException e) {throw getFormatException(s,i);}i+=2;buff.append(c);} else {throw getFormatException(s,i);}}} else {buff.append(c);}}return buff.toString();}  }
class C{  public static void main(String[] args){  Console c;  ForagingBeeGUI fbg2D=new ForagingBeeGUI();  c=new Console(fbg2D);  c.setVisible(true);}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[157];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 160; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }        if ((jj_la1_2[i] & (1 << j)) != 0) {          la1tokens[64 + j]=true;        }        if ((jj_la1_3[i] & (1 << j)) != 0) {          la1tokens[96 + j]=true;        }        if ((jj_la1_4[i] & (1 << j)) != 0) {          la1tokens[128 + j]=true;        }      }    }  }  for (int i=0; i < 157; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage,token_source == null ? null : ASTParserTokenManager.lexStateNames[token_source.curLexState]);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String menuName=getString(stack);  UIManager uiMgr=stack.getUIMgrSafe();  if (uiMgr != null) {    Widget nextUI=uiMgr.getMenuTransitionSource();    PseudoMenu currUI=uiMgr.getCurrUI();    return (nextUI != null && currUI != null && currUI.getUI() != null && nextUI.getName().equalsIgnoreCase(menuName)) ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case BasePackage.NAMED_ELEMENT:    return createNamedElement();case BasePackage.DOCUMENTED_ELEMENT:  return createDocumentedElement();case BasePackage.DOMAIN_ELEMENT:return createDomainElement();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public boolean isValidName(){  String _name=this.getName();  boolean _equals=Objects.equal("prototype",_name);  if (_equals) {    return false;  }  boolean _and=false;  if (!(Objects.equal("constructor",this.getName()) && this.isGenerator())) {    _and=false;  } else {    LiteralOrComputedPropertyName _declaredName=this.getDeclaredName();    PropertyNameKind _kind=null;    if (_declaredName != null) {      _kind=_declaredName.getKind();    }    boolean _tripleNotEquals=(_kind != PropertyNameKind.COMPUTED);    _and=_tripleNotEquals;  }  if (_and) {    return false;  }  return true;}  }
class C{  public FloatConstant addFloat(float value){  FloatConstant entry=getFloatByValue(value);  if (entry != null)   return entry;  entry=new FloatConstant(this,_entries.size(),value);  addConstant(entry);  return entry;}  }
class C{  @Override public synchronized void addInstanceListener(InstanceListener tsl){  m_instanceListeners.add(tsl);}  }
class C{  protected CCCallFunc(Object t,String s,Class<?>[] p){  targetCallback=t;  selector=s;  partypes=p;  if (partypes == null) {    try {      Class<?> cls=targetCallback.getClass();      invocation=cls.getMethod(selector);    } catch (    NoSuchMethodException e) {      e.printStackTrace();    }  } else {    try {      Class<?> cls=targetCallback.getClass();      invocation=cls.getMethod(selector,partypes);    } catch (    NoSuchMethodException e) {      e.printStackTrace();    }  }}  }
class C{  public NameSuffix(String value){  this();  setValue(value);}  }
class C{  protected void dumpVersion(){  StringBuffer vInfo=new StringBuffer();  vInfo.append(lineSep + separator + " Version Info "+ separator+ lineSep);  vInfo.append(left("Version",20,' ') + ":  " + ClientComms.VERSION+ lineSep);  vInfo.append(left("Build Level",20,' ') + ":  " + ClientComms.BUILD_LEVEL+ lineSep);  vInfo.append(separator + separator + separator+ lineSep);  log.fine(CLASS_NAME,"dumpVersion",vInfo.toString());}  }
class C{  public synchronized void clear(){  map.clear();}  }
class C{  public void clearOffScreen(){  if (isDoubleBuffered)   return;  updateWorkingBuffers();  if ((rootCR == null) || (workingBaseRaster == null))   return;  ColorModel cm=rootCR.getColorModel();  WritableRaster syncRaster=workingBaseRaster;synchronized (syncRaster) {    BufferedImage bi=new BufferedImage(cm,workingBaseRaster,cm.isAlphaPremultiplied(),null);    Graphics2D g2d=bi.createGraphics();    g2d.setComposite(AlphaComposite.Clear);    g2d.fillRect(0,0,bi.getWidth(),bi.getHeight());    g2d.dispose();  }}  }
class C{  public LaneDefinitions11 processLaneDefinitions(Map<Integer,Map<Integer,List<Integer>>> spurSpurMapping,Map<Integer,Map<Integer,String>> knotenSpurLinkMapping){  preprocessData(spurSpurMapping,knotenSpurLinkMapping);  LaneDefinitions11 laneDefs=new LaneDefinitions11Impl();  for (  Integer nodeId : spurSpurMapping.keySet()) {    System.out.println();    log.info("##########################################################");    log.info("processing node id " + nodeId);    log.info("##########################################################");    Map<Integer,List<Integer>> vonSpurToSpurMap=spurSpurMapping.get(nodeId);    for (    Integer fromLaneId : vonSpurToSpurMap.keySet()) {      System.out.println();      log.info("processing link id for lane id " + fromLaneId);      String linkIdString=knotenSpurLinkMapping.get(nodeId).get(fromLaneId);      if (!linkIdString.matches("[\\d]+")) {        log.error("cannot create link id from string " + linkIdString + " for nodeId: "+ nodeId+ " and laneId "+ fromLaneId);        continue;      }      Id<Link> linkId=Id.create(linkIdString,Link.class);      LanesToLinkAssignment11 assignment=laneDefs.getLanesToLinkAssignments().get(linkId);      if (assignment == null) {        assignment=laneDefs.getFactory().createLanesToLinkAssignment(linkId);        laneDefs.addLanesToLinkAssignment(assignment);      }      LaneData11 lane=createLaneWithDefaults(fromLaneId);      log.info("checking the length of the lane...");      if (this.network != null) {        Link link=this.network.getLinks().get(linkId);        double linkLaneFraction=0.5 * link.getLength();        if (lane.getStartsAtMeterFromLinkEnd() > linkLaneFraction) {          lane.setStartsAtMeterFromLinkEnd(linkLaneFraction);          log.info("Reset lane length of lane Id : " + lane.getId() + " of Link Id "+ linkId+ " to "+ linkLaneFraction);        }      }      log.info("adding toLinks ...");      if (vonSpurToSpurMap.containsKey(fromLaneId)) {        List<Integer> toLanes=vonSpurToSpurMap.get(fromLaneId);        for (        Integer toLaneId : toLanes) {          String toLinkIdString=knotenSpurLinkMapping.get(nodeId).get(toLaneId);          if (!toLinkIdString.matches("[\\d]+")) {            log.error("cannot create toLink id from string " + toLinkIdString + " for nodeId: "+ nodeId+ " and toLaneId "+ toLaneId);            continue;          }          if (toLinkIdString.equalsIgnoreCase(linkIdString)) {            log.error("Found vonSpurNachSpur mapping on same link id " + linkIdString + " at node id "+ nodeId+ " vonSpur id "+ fromLaneId+ " nachSpur id "+ toLaneId+ " . Lane will be ignored");            continue;          }          Id<Link> toLinkId=Id.create(toLinkIdString,Link.class);          if (this.network != null) {            Link link=this.network.getLinks().get(linkId);            if (!link.getToNode().getOutLinks().containsKey(toLinkId)) {              log.error("for lane id " + lane.getId() + " at link id "+ linkId+ " the toLane id "+ toLaneId+ " at toLink id "+ toLinkId+ " is determined, but this is not an outlink of the link's tonode.");            }          }          lane.addToLinkId(toLinkId);        }      } else {        log.warn("no valid tolanes...");      }      if ((lane.getToLinkIds() != null) && !lane.getToLinkIds().isEmpty()) {        assignment.addLane(lane);        log.info("successfully added lane to lanes to link assignment!");      } else       if (assignment.getLanes().isEmpty()) {        log.info("removed lanes to link assignment cause it has no lanes yet!");        laneDefs.getLanesToLinkAssignments().remove(assignment.getLinkId());      }    }  }  return laneDefs;}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public void writeExif(InputStream jpegStream,String exifOutFileName) throws FileNotFoundException, IOException {  if (jpegStream == null || exifOutFileName == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=null;  try {    s=getExifWriterStream(exifOutFileName);    doExifStreamIO(jpegStream,s);    s.flush();  } catch (  IOException e) {    closeSilently(s);    throw e;  }  s.close();}  }
class C{  private String replaceValue(String string,DescriptorElement left,DescriptorElement right){  String xPath;  Element element;  String result="";  if (string.startsWith("$left:")) {    xPath=string.substring(6);    element=left;  } else   if (string.startsWith("$right:")) {    xPath=string.substring(7);    element=right;  } else {    return "";  }  try {    String nsPrefix=null;    if (!element.getNamespaceURI().isEmpty()) {      nsPrefix=element.getNamespacePrefix();      if (nsPrefix.isEmpty() || !xPath.startsWith(nsPrefix)) {        if (nsPrefix.isEmpty()) {          nsPrefix="cargo-xs";        }        xPath=nsPrefix + ":" + xPath;      }    }    XPath xp=XPath.newInstance(xPath);    if (nsPrefix != null) {      xp.addNamespace(nsPrefix,element.getNamespaceURI());    }    Element nestedText=(Element)xp.selectSingleNode(element);    if (nestedText != null) {      result=nestedText.getText();    }  } catch (  JDOMException e) {    result=e.getMessage();  }  return result;}  }
class C{  @Ignore @Override public void uidShouldreturnEveryThing() throws Exception {}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolution);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  public FileReader(String filePath,int maxFileCount) throws IOException {  this.filePath=filePath;  this.fileDir=Paths.get(filePath).getParent().toString();  this.fileList=new FileList(this.filePath,maxFileCount);  this.fileList.syncWithFileSystem();  this.fileList.sort();}  }
class C{  public LagWorkbench(){  this(new EdgeListGraph());}  }
class C{  public static void recordGCTime(double time){  accumulatedGCTime+=time;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoomGroupListForm roomGroupListForm=(RoomGroupListForm)form;  sessionContext.checkPermission(Right.RoomGroups);  String deptCode=roomGroupListForm.getDeptCodeX();  if (deptCode == null) {    deptCode=(String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom);  }  if (deptCode == null) {    deptCode=request.getParameter("default");    if (deptCode != null)     sessionContext.setAttribute(SessionAttribute.DepartmentCodeRoom,deptCode);  }  if (deptCode != null && !deptCode.isEmpty() && ("All".equals(deptCode) || deptCode.matches("Exam[0-9]*"))) {    roomGroupListForm.setDeptCodeX(deptCode);    if ("Export PDF".equals(request.getParameter("op"))) {      sessionContext.checkPermission(Right.RoomGroupsExportPdf);      OutputStream out=ExportUtils.getPdfOutputStream(response,"roomGroups");      RoomGroupListAction.printPdfGroupTable(out,sessionContext,roomGroupListForm);      out.flush();      out.close();      return null;    }    return mapping.findForward("roomGroupList");  } else {    if (sessionContext.getUser().getCurrentAuthority().getQualifiers("Department").size() == 1) {      roomGroupListForm.setDeptCodeX(sessionContext.getUser().getCurrentAuthority().getQualifiers("Department").get(0).getQualifierReference());      return mapping.findForward("roomGroupList");    }    LookupTables.setupDepartments(request,sessionContext,true);    LookupTables.setupExamTypes(request,sessionContext.getUser(),DepartmentStatusType.Status.ExamView,DepartmentStatusType.Status.ExamTimetable);    return mapping.findForward("showRoomGroupSearch");  }}  }
class C{  public static boolean isExternalStorageReadable(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {    return true;  } else {    return false;  }}  }
class C{  private void doSuccessTask(Class<? extends DataObject> clazz,List<URI> ids,String opId){  try {    for (    URI id : ids) {      _dbClient.ready(clazz,id,opId);    }  } catch (  DatabaseException ioe) {    _log.error(ioe.getMessage());  }}  }
class C{  public static TLAEditor openTLAEditor(String moduleFileName){  IResource module=ResourceHelper.getResourceByName(moduleFileName);  if (module != null && module instanceof IFile) {    IEditorPart editor=UIHelper.openEditor(TLAEditor.ID,(IFile)module);    if (editor instanceof TLAEditorAndPDFViewer) {      return ((TLAEditorAndPDFViewer)editor).getTLAEditor();    }  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.583 -0500",hash_original_method="5EC62A2B879CA2B5D87DB46D668C10E0",hash_generated_method="1C9505ACA5C0BEEC4B42665E83FAB5E1") public String toString(){  return this.scheme + ":" + telephoneNumber.encode();}  }
class C{  public Element createElement(StartElement startEvent){  QName qname=startEvent.getName();  org.dom4j.QName elemName=createQName(qname);  Element elem=factory.createElement(elemName);  for (Iterator<Attribute> i=startEvent.getAttributes(); i.hasNext(); ) {    Attribute attr=i.next();    elem.addAttribute(createQName(attr.getName()),attr.getValue());  }  for (Iterator<Namespace> i=startEvent.getNamespaces(); i.hasNext(); ) {    Namespace ns=i.next();    elem.addNamespace(ns.getPrefix(),ns.getNamespaceURI());  }  return elem;}  }
class C{  public ListenerList(){  this(EQUALITY);}  }
class C{  @SafeVarargs public static final <T>List<T> list(T... items){  ArrayList<T> list=new ArrayList<T>(items.length);  for (  T item : items) {    list.add(item);  }  return list;}  }
class C{  public SimpleStringProperty valueProperty(){  return this.value;}  }
class C{  private int findMarkerSegmentPosition(Class cls,boolean first){  if (first) {    ListIterator iter=markerSequence.listIterator();    for (int i=0; iter.hasNext(); i++) {      MarkerSegment seg=(MarkerSegment)iter.next();      if (cls.isInstance(seg)) {        return i;      }    }  } else {    ListIterator iter=markerSequence.listIterator(markerSequence.size());    for (int i=markerSequence.size() - 1; iter.hasPrevious(); i--) {      MarkerSegment seg=(MarkerSegment)iter.previous();      if (cls.isInstance(seg)) {        return i;      }    }  }  return -1;}  }
class C{  public Queue<Env<AttrContext>> flow(Queue<Env<AttrContext>> envs){  ListBuffer<Env<AttrContext>> results=new ListBuffer<>();  for (  Env<AttrContext> env : envs) {    flow(env,results);  }  return stopIfError(CompileState.FLOW,results);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private void computeIntersects(Edge e0,Edge e1,SegmentIntersector si){  Coordinate[] pts0=e0.getCoordinates();  Coordinate[] pts1=e1.getCoordinates();  for (int i0=0; i0 < pts0.length - 1; i0++) {    for (int i1=0; i1 < pts1.length - 1; i1++) {      si.addIntersections(e0,i0,e1,i1);    }  }}  }
class C{  public String encode(){  return encode(new StringBuffer()).toString();}  }
class C{  public void forceShow(int requestCode){  startActivity(requestCode);}  }
class C{  JarSignerParameters(String[] args,URI tsa,X509Certificate tsaCertificate,String tSAPolicyID,String tSADigestAlg,byte[] signature,String signatureAlgorithm,X509Certificate[] signerCertificateChain,byte[] content,ZipFile source){  if (signature == null || signatureAlgorithm == null || signerCertificateChain == null || tSADigestAlg == null) {    throw new NullPointerException();  }  this.args=args;  this.tsa=tsa;  this.tsaCertificate=tsaCertificate;  this.tSAPolicyID=tSAPolicyID;  this.tSADigestAlg=tSADigestAlg;  this.signature=signature;  this.signatureAlgorithm=signatureAlgorithm;  this.signerCertificateChain=signerCertificateChain;  this.content=content;  this.source=source;}  }
class C{  public void removeKnowledgeGroup(int index){  this.knowledgeGroups.remove(index);  this.generateRequiredEdgeSet();}  }
class C{  void cleanup(){  controller().sendSRCPMessage(SRCPMessage.getExitProgMode(_bus),this);}  }
class C{  protected void addKeyPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Metadata_key_feature"),getString("_UI_PropertyDescriptor_description","_UI_Metadata_key_feature","_UI_Metadata_type"),EipPackage.Literals.METADATA__KEY,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static int randomPort(int min,int max){  int i=min;  for (; i <= max; i++) {    if (isUsable(i)) {      return i;    }  }  throw new IllegalStateException(String.format("random port not found:(%d, %d)",min,max));}  }
class C{  public void removeAll(){  gr.removeAllElements();}  }
class C{  @SuppressWarnings("unchecked") public CutService(IProgressObserver progressObserver,CnATreeElement group,List<CnATreeElement> elementList){  this.progressObserver=progressObserver;  this.selectedGroup=group;  this.elements=elementList;}  }
class C{  public boolean isHierarchyBeingActivelyConnected(){  return (this.tagBits & TagBits.EndHierarchyCheck) == 0 && (this.tagBits & TagBits.BeginHierarchyCheck) != 0 && (this.tagBits & TagBits.PauseHierarchyCheck) == 0;}  }
class C{  public static _IdentityType fromString(final String value) throws SOAPSerializationException {  return (_IdentityType)Enumeration.fromString(value,_IdentityType.VALUES_TO_INSTANCES);}  }
class C{  void loadPrevious(Long maxPosition,Callback<TimelineResult<T>> cb){  if (withinMaxCapacity()) {    if (timelineStateHolder.startTimelineRequest()) {      timeline.previous(maxPosition,cb);    } else {      cb.failure(new TwitterException("Request already in flight"));    }  } else {    cb.failure(new TwitterException("Max capacity reached"));  }}  }
class C{  public HGPersistentHandle store(HGPersistentHandle handle,byte[] data){  if (overlayGraph.get() != null)   return overlayGraph.get().store(handle,data); else   return impl.store(handle,data);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.077 -0500",hash_original_method="2DCD0228D3AB6B3B6D80756266EB3403",hash_generated_method="BE18C1C14CF0932D529700151D21C78F") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AuthenticationInfoParser.parse");  try {    headerName(TokenTypes.AUTHENTICATION_INFO);    AuthenticationInfo authenticationInfo=new AuthenticationInfo();    authenticationInfo.setHeaderName(SIPHeaderNames.AUTHENTICATION_INFO);    this.lexer.SPorHT();    NameValue nv=super.nameValue();    authenticationInfo.setParameter(nv);    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      nv=super.nameValue();      authenticationInfo.setParameter(nv);      this.lexer.SPorHT();    }    this.lexer.SPorHT();    return authenticationInfo;  }  finally {    if (debug)     dbg_leave("AuthenticationInfoParser.parse");  }}  }
class C{  void add(Thread t){synchronized (this) {    if (destroyed) {      throw new IllegalThreadStateException();    }    if (threads == null) {      threads=new Thread[4];    } else     if (nthreads == threads.length) {      threads=Arrays.copyOf(threads,nthreads * 2);    }    threads[nthreads]=t;    nthreads++;    nUnstartedThreads--;  }}  }
class C{  protected void addBlock(BasicBlock nodeBlock){  if (nodeBlock == null)   throw new IllegalArgumentException("null given");  logger.debug("Adding block: " + nodeBlock.getName());  if (containsVertex(nodeBlock))   throw new IllegalArgumentException("block already added before");  if (!addVertex(nodeBlock))   throw new IllegalStateException("internal error while addind basic block to CFG");  if (!containsVertex(nodeBlock))   throw new IllegalStateException("expect graph to contain the given block on returning of addBlock()");  logger.debug(".. succeeded. nodeCount: " + vertexCount());}  }
class C{  private static void assertNameValueEquals(NameValue a,NameValue b){  assertEquals(a,b);  assertEquals(a.toString(),b.toString());  assertEquals(a.hashCode(),b.hashCode());  assertTrue(a.equals(b));}  }
class C{  public static void printHelp(PrintStream out){  checkNotNull(out);  out.println("The set of registered options are:");  Set<Class<? extends PipelineOptions>> sortedOptions=new TreeSet<>(ClassNameComparator.INSTANCE);  sortedOptions.addAll(REGISTERED_OPTIONS);  for (  Class<? extends PipelineOptions> kls : sortedOptions) {    out.format("  %s%n",kls.getName());  }  out.format("%nUse --help=<OptionsName> for detailed help. For example:%n" + "  --help=DataflowPipelineOptions <short names valid for registered options>%n" + "  --help=org.apache.beam.sdk.options.DataflowPipelineOptions%n");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void update(RosterEntry r){  if (labels != null) {    String shunFn="";    for (int i=0; i < labels.length; i++) {      if (labels[i] != null && !labels[i].getText().equals("")) {        r.setFunctionLabel(i,labels[i].getText());        r.setFunctionLockable(i,lockable[i].isSelected());        r.setFunctionImage(i,_imageFilePath[i].getImagePath());        r.setFunctionSelectedImage(i,_imagePressedFilePath[i].getImagePath());      } else       if (labels[i] != null && labels[i].getText().equals("")) {        if (r.getFunctionLabel(i) != null) {          r.setFunctionLabel(i,null);          r.setFunctionImage(i,null);          r.setFunctionSelectedImage(i,null);        }      }      if ((shunterMode[i] != null) && (shunterMode[i].isSelected())) {        shunFn="F" + i;      }    }    r.setShuntingFunction(shunFn);  }}  }
class C{  public static boolean isValidName(String name){  if (name.length() == 0)   return false;  char ch=name.charAt(0);  if (isNameStart(ch) == false)   return false;  for (int i=1; i < name.length(); i++) {    ch=name.charAt(i);    if (isName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public static DeterministicKey createMasterPrivateKey(byte[] seed) throws HDDerivationException {  checkArgument(seed.length > 8,"Seed is too short and could be brute forced");  byte[] i=HDUtils.hmacSha512(MASTER_HMAC_SHA512,seed);  checkState(i.length == 64,i.length);  byte[] il=Arrays.copyOfRange(i,0,32);  byte[] ir=Arrays.copyOfRange(i,32,64);  Arrays.fill(i,(byte)0);  DeterministicKey masterPrivKey=createMasterPrivKeyFromBytes(il,ir);  Arrays.fill(il,(byte)0);  Arrays.fill(ir,(byte)0);  return masterPrivKey;}  }
class C{  public void putBoolean(String key,boolean value){  map.put(key,value);}  }
class C{  private void receiveMessages(){  CleartextMessages mMessagesReceived=lengthValueRead(in,CleartextMessages.class);  this.mMessagesReceived=mMessagesReceived.messages;}  }
class C{  public void removeExperiment(final String expName){  verifyChangesAllowed();  final Experiment exp=activeExperiments.remove(expName);  checkArgument(exp != null,"No active experiment named %s",expName);  availableSegments.addAll(exp.usedSegments);  for (  Integer segment : exp.usedSegments) {    checkState(allocationMap[segment] == exp,"Segment %s is supposed to be allocated to experiment %s but is allocated to %s instead",segment,exp,allocationMap[segment]);    allocationMap[segment]=null;  }}  }
class C{  public NTRUSigningPublicKeyParameters(byte[] b,NTRUSigningParameters params){  super(false);  h=IntegerPolynomial.fromBinary(b,params.N,params.q);  this.params=params;}  }
class C{  public StackedBarRenderer3D(boolean renderAsPercentages){  super();  this.renderAsPercentages=renderAsPercentages;}  }
class C{  public static OrderType newInstance(){  final OrderType returnInstance=new OrderType();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  private List<String> makeList(final String... strings){  final List<String> result=new ArrayList<>();  for (  String string : strings) {    result.add(string);  }  return result;}  }
class C{  public EncoderTestSuiteBuilder(Encoder encoder,String safeAffix,String unsafeAffix){  _suite=new TestSuite(encoder.toString());  _encoder=encoder;  _safeAffix=safeAffix;  _unsafeAffix=unsafeAffix;}  }
class C{  public void write(Writer writer,Integer indent,String xmlVersion) throws TransformerException {  write(writer,new XCardOutputProperties(indent,xmlVersion));}  }
class C{  public void afterRequestRead(AbstractSerialConnection port,ModbusRequest req){}  }
class C{  protected IonInt integer(String s){  return (IonInt)oneValue(s);}  }
class C{  public static byte[] step2b(SMState bstate,byte[] secret) throws SMException {  BigInteger secret_mpi=new BigInteger(1,secret);  bstate.secret=secret_mpi;  BigInteger[] msg2=new BigInteger[11];  msg2[0]=bstate.g1.modPow(bstate.x2,MODULUS_S);  BigInteger[] res=proofKnowLog(bstate.g1,bstate.x2,3);  msg2[1]=res[0];  msg2[2]=res[1];  msg2[3]=bstate.g1.modPow(bstate.x3,MODULUS_S);  res=proofKnowLog(bstate.g1,bstate.x3,4);  msg2[4]=res[0];  msg2[5]=res[1];  BigInteger r=randomExponent();  bstate.p=bstate.g3.modPow(r,MODULUS_S);  msg2[6]=bstate.p;  BigInteger qb1=bstate.g1.modPow(r,MODULUS_S);  BigInteger qb2=bstate.g2.modPow(bstate.secret,MODULUS_S);  bstate.q=qb1.multiply(qb2).mod(MODULUS_S);  msg2[7]=bstate.q;  res=proofEqualCoords(bstate,r,5);  msg2[8]=res[0];  msg2[9]=res[1];  msg2[10]=res[2];  return serialize(msg2);}  }
class C{  public PutIndexTemplateRequest mapping(String type,Map<String,Object> source){  if (source.size() != 1 || !source.containsKey(type)) {    source=MapBuilder.<String,Object>newMapBuilder().put(type,source).map();  }  try {    XContentBuilder builder=XContentFactory.contentBuilder(XContentType.JSON);    builder.map(source);    return mapping(type,builder.string());  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }}  }
class C{  @Override public boolean isLabelVisible(){  return (labelVisible);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:39.170 -0400",hash_original_method="1E4FCC92B87A5FEFB76FC732CC250748",hash_generated_method="637A89E54F27E80A66EB6C66D953970A") public void show(IBinder windowToken){  final MenuBuilder menu=mMenu;  final AlertDialog.Builder builder=new AlertDialog.Builder(menu.getContext());  mPresenter=new ListMenuPresenter(R.layout.abc_list_menu_item_layout,R.style.Theme_AppCompat_CompactMenu_Dialog);  mPresenter.setCallback(this);  mMenu.addMenuPresenter(mPresenter);  builder.setAdapter(mPresenter.getAdapter(),this);  final View headerView=menu.getHeaderView();  if (headerView != null) {    builder.setCustomTitle(headerView);  } else {    builder.setIcon(menu.getHeaderIcon()).setTitle(menu.getHeaderTitle());  }  builder.setOnKeyListener(this);  mDialog=builder.create();  mDialog.setOnDismissListener(this);  WindowManager.LayoutParams lp=mDialog.getWindow().getAttributes();  lp.type=WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG;  if (windowToken != null) {    lp.token=windowToken;  }  lp.flags|=WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;  mDialog.show();}  }
class C{  public static Uri addMessageToUri(ContentResolver resolver,Uri uri,String address,String body,String subject,Long date,boolean read,boolean deliveryReport,long threadId){  ContentValues values=new ContentValues(7);  values.put(Sms.ADDRESS,address);  if (date != null) {    values.put(Sms.DATE,date);  }  values.put(Sms.READ,read ? Integer.valueOf(1) : Integer.valueOf(0));  values.put(Sms.SUBJECT,subject);  values.put(Sms.BODY,body);  if (deliveryReport) {    values.put(Sms.STATUS,Sms.STATUS_PENDING);  }  if (threadId != -1L) {    values.put(Sms.THREAD_ID,threadId);  }  return resolver.insert(uri,values);}  }
class C{  public static void reverse(final char[] buffer,final int len){  reverse(buffer,0,len);}  }
class C{  private void createMultiplePartitionedRegions(){  if (PRCreateDone)   return;  int numthread=0;  while (numthread < TOTAL_THREADS) {    PartionedRegionCreateThread pregionThread=new PartionedRegionCreateThread();    pregionThread.start();    numthread++;  }  while (!createComplete) {synchronized (CREATE_COMPLETE_LOCK) {      if (!createComplete) {        try {          CREATE_COMPLETE_LOCK.wait();        } catch (        Exception ex) {        }      }    }  }  PRCreateDone=true;}  }
class C{  public boolean isZoomEnabled(){  return isZoomXEnabled() || isZoomYEnabled();}  }
class C{  public synchronized EventBean assertOneGetOldAndReset(){  ScopeTestHelper.assertTrue("Listener invocation not received but expected",isInvoked);  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,newDataList.size());  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,oldDataList.size());  if (lastOldData == null) {    ScopeTestHelper.fail("No old-data events received");  }  ScopeTestHelper.assertEquals("Mismatch in the number of old-data events",1,lastOldData.length);  ScopeTestHelper.assertNull("Expected no new-data events",lastNewData);  EventBean lastNew=lastOldData[0];  reset();  return lastNew;}  }
class C{  public void buildPyramid(String path,String globe,LayerType lType,String layerName,int tileSize,String missing,int[] margin,JTextField messageText) throws IOException {  long t=System.currentTimeMillis();  doIt=true;  boolean opened=rasterFile.open("r");  if (!opened) {    System.exit(0);  }  rasterWidth=rasterFile.getRasterWidth();  rasterLength=rasterFile.getRasterLength();  layerType=lType;switch (layerType) {case none:case footprint:case viewshed:case derivative:    break;case elevation:  bytesPerPixel=4;break;case field:bytesPerPixel=4;break;case colorimage:bytesPerPixel=4;break;case grayimage:bytesPerPixel=1;break;}int samplesPerPixel=rasterFile.getSamplesPerPixel();if ((samplesPerPixel > 1) && (layerType != LayerType.colorimage)) {throw new IllegalStateException("Cannot handle " + layerType + " layer with multiple samples per pixel.");}findDimensions(margin,tileSize);if (tileWidth > paddedWidth) {throw new IllegalStateException("Tile width greater than raster width.");}if (tileLength > paddedLength) {throw new IllegalStateException("Tile width greater than raster width.");}int numTiles=numberOfTiles;int maxLevel=(int)(Math.log(numTiles) / Math.log(2) + 0.5);try {if (messageText != null) {messageText.setText("Writing temporary " + paddedWidth + " x "+ paddedLength+ " file ");Thread.yield();} else System.out.println("Writing temporary " + paddedWidth + " x "+ paddedLength+ " file ");Raster raster=createPaddedRaster(path,samplesPerPixel,missing);rasterFile.close();System.gc();File dirFile=new File(path,layerName);dirFile.mkdirs();String dirPath=dirFile.getAbsolutePath();int columnStep=tileWidth;int rowStep=tileLength;for (int level=maxLevel; level >= 0; level--) {if (!doIt) {break;}int kernelSize=(int)Math.pow(2,(maxLevel - level));int rcnt=0;if (messageText == null) System.out.println("Writing " + numTiles + " rows for level "+ (level + 1)+ " of "+ (maxLevel + 1));for (int r=0; r < numTiles; ++r) {if (messageText == null) {if (rcnt % 10 == 0) System.out.print(rcnt); else System.out.print(".");rcnt++;}for (int c=0; c < numTiles; ++c) {if (!doIt) {break;}if (messageText != null) {messageText.setText("Writing " + layerName + " level "+ (level + 1)+ " of "+ (maxLevel + 1)+ ", tile row "+ (r + 1)+ " of "+ numTiles+ " . . .");Thread.yield();}String filePath=getTileFilePath(c,r,numTiles,level,dirPath);writeTile(raster,c * columnStep,r * rowStep,kernelSize,filePath,layerType);}}if (messageText == null) System.out.println();numTiles/=2;columnStep*=2;rowStep*=2;}raster=null;System.gc();System.out.println();System.out.println("Writing projection info for " + layerName);projInfo.rasterWidth=tileWidth * numberOfTiles;projInfo.rasterLength=tileLength * numberOfTiles;projInfo.tiePoint[0]-=(leftMargin - leftInset) * projInfo.scale[0];projInfo.tiePoint[1]+=(topMargin - topInset) * projInfo.scale[1];if (globe != null) {projInfo.globe=globe;}System.out.println(projInfo);if (doIt) {writeProperties(new File(dirPath,"layer.properties").getAbsolutePath(),maxLevel + 1,tileWidth,tileLength,numberOfTiles);}System.out.println("Number of levels for " + layerName + " = "+ (maxLevel + 1)+ " with "+ numberOfTiles+ " tiles per side at the highest resolution level.");int nt=0;int n=1;for (int i=0; i <= maxLevel; ++i) {nt+=n;n*=4;}Properties landscapeProperties=new Properties();File propFile=new File(path,".landscape");if (propFile.exists()) {landscapeProperties.load(new FileInputStream(propFile));}landscapeProperties.setProperty("LastWrite",System.getProperty("user.name"));landscapeProperties.store(new FileOutputStream(propFile),null);System.out.println("Total number of tiles for " + layerName + " = "+ nt+ " using "+ ((double)nt * tileWidth * tileLength* bytesPerPixel / 1073741824.0)+ " GB.");System.out.println("Total time for building " + layerName + " = "+ (float)((System.currentTimeMillis() - t) / 60000.0)+ " minutes.");} catch (Exception e) {e.printStackTrace();}}  }
class C{  public MatchFunctionTemplate generateFunction(){  return this;}  }
class C{  public DailyTimeIntervalTriggerImpl(String name,String group,TimeOfDay startTimeOfDay,TimeOfDay endTimeOfDay,IntervalUnit intervalUnit,int repeatInterval){  this(name,group,new Date(),null,startTimeOfDay,endTimeOfDay,intervalUnit,repeatInterval);}  }
class C{  public static void annotateDataBIO(Data data,NETaggerLevel1 taggerLevel1,NETaggerLevel2 taggerLevel2) throws Exception {  Decoder.annotateBIO_AllLevelsWithTaggers(data,taggerLevel1,taggerLevel2);}  }
class C{  public LauncherScroller(Context context,Interpolator interpolator){  this(context,interpolator,context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB);}  }
class C{  public static void addProblemToCompilationResult(char[] fileNameArray,CompilationResult result,boolean isWarning,String message,int sourceStart,int sourceEnd){  if (result == null)   return;  if (fileNameArray == null)   fileNameArray="(unknown).java".toCharArray();  int lineNumber=0;  int columnNumber=1;  int[] lineEnds=null;  lineNumber=sourceStart >= 0 ? Util.getLineNumber(sourceStart,lineEnds=result.getLineSeparatorPositions(),0,lineEnds.length - 1) : 0;  columnNumber=sourceStart >= 0 ? Util.searchColumnNumber(result.getLineSeparatorPositions(),lineNumber,sourceStart) : 0;  CategorizedProblem ecProblem=new LombokProblem(fileNameArray,message,0,new String[0],isWarning ? ProblemSeverities.Warning : ProblemSeverities.Error,sourceStart,sourceEnd,lineNumber,columnNumber);  result.record(ecProblem,null);}  }
class C{  @Override public void onStart(){  writer.writeHeader("encoder=Lavc56.20.100 libopus");}  }
class C{  public void unregisterObjectsForNotification(final List<Observer> observers){  for (  Observer observer : observers) {    if (observer != null) {      registrator.removeObserver(observer);    }  }}  }
class C{  public void test_compressed_timestamp_01c() throws Exception {  new TestHelper("compressed-timestamp-01c","compressed-timestamp-01c.rq","compressed-timestamp.ttl","compressed-timestamp-01.srx").runTest();}  }
class C{  public static XNodeSet executeFilterExpr(int context,XPathContext xctxt,PrefixResolver prefixResolver,boolean isTopLevel,int stackFrame,Expression expr) throws org.apache.xml.utils.WrappedRuntimeException {  PrefixResolver savedResolver=xctxt.getNamespaceContext();  XNodeSet result=null;  try {    xctxt.pushCurrentNode(context);    xctxt.setNamespaceContext(prefixResolver);    if (isTopLevel) {      VariableStack vars=xctxt.getVarStack();      int savedStart=vars.getStackFrame();      vars.setStackFrame(stackFrame);      result=(org.apache.xpath.objects.XNodeSet)expr.execute(xctxt);      result.setShouldCacheNodes(true);      vars.setStackFrame(savedStart);    } else     result=(org.apache.xpath.objects.XNodeSet)expr.execute(xctxt);  } catch (  javax.xml.transform.TransformerException se) {    throw new org.apache.xml.utils.WrappedRuntimeException(se);  } finally {    xctxt.popCurrentNode();    xctxt.setNamespaceContext(savedResolver);  }  return result;}  }
class C{  public void identicalNodeFound(final Node controlNode,final Node testNode,final String msg){  add(msg);}  }
class C{  @Override public String toString(){  return name().toLowerCase();}  }
class C{  @PUT @Path("/{groupName}/members") @RequiresRole(role=Role.ADMINISTRATOR) public void addMembers(@PathParam("groupName") String groupName,@QueryParam("members") List<String> members,@QueryParam("type") String memberType){  PrincipalId id=PrincipalUtil.fromName(groupName);  Validate.isTrue(getSystemDomain().equalsIgnoreCase(id.getDomain()),sm.getString("valid.not.systemdomain",id.getDomain(),tenant));  MemberType type=getPrincipalType(memberType);  Collection<PrincipalId> memberPrincipals=PrincipalUtil.fromNames(members);  Validate.notNull(type,sm.getString("valid.invalid.type","type",Arrays.toString(MemberType.values())));  Validate.notEqual(type,MemberType.ALL,sm.getString("valid.not.equal","type",MemberType.ALL,EnumSet.of(MemberType.USER,MemberType.GROUP,MemberType.SOLUTIONUSER)));  try {    if (type == MemberType.GROUP) {      addGroupsToGroup(id.getName(),memberPrincipals);    } else     if (type == MemberType.USER) {      addUsersToGroup(id.getName(),memberPrincipals);    } else     if (type == MemberType.SOLUTIONUSER) {      addSolutionUsersToGroup(id.getName(),memberPrincipals);    }  } catch (  NotImplementedError e) {    throw e;  }catch (  InvalidPrincipalException|NoSuchTenantException e) {    log.debug("Failed to add members {} of type {} to group '{}' in tenant '{}'",members.toString(),memberType,groupName,tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  InvalidArgumentException|MemberAlreadyExistException e) {    log.warn("Failed to add members {} of type {} to group '{}' in tenant '{}' due to a client side error",members.toString(),memberType,groupName,tenant,e);    throw new BadRequestException(sm.getString("res.group.add.groups.failed",groupName,tenant),e);  }catch (  Exception e) {    log.error("Failed to add members {} of type {} to group '{}' in tenant '{}' due to a server side error",members.toString(),groupName,tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public void createPictScenario08() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-30 09:00:00"));  String supplierAdminId="Pict08Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict08SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),2);  String customerAdminId="Pict08DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict08DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-06-30 00:00:00"),DateTimeHandling.calculateMillis("2013-08-30 00:00:00"));  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalServiceAsync);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_08",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,technicalServiceAsync,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_08",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-06-30 10:00:00"));  subDetails=subscrSetup.completeAsyncSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,subDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-10 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-11 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-12 02:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-13 00:00:00"));  subDetails=subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT08_RATA_WEEK_SERVICE",TestService.EXAMPLE2_ASYNC,TestPriceModel.EXAMPLE_PICT08_RATA_WEEK,technicalServiceAsync,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,proRataService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-13 12:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-07-14 00:00:00"));  upgradedSubDetails=subscrSetup.completeAsyncUpgradeSubscription(basicSetup.getSupplierAdminKey(),customerAdmin,upgradedSubDetails);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_08",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_08",upgradedSubDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_08",customer);}  }
class C{  protected Texture makeTextureWithBackingImage(DrawContext dc){  BufferedImage backingImage=(BufferedImage)this.rectPacker.getBackingStore();  Texture texture=AWTTextureIO.newTexture(dc.getGL().getGLProfile(),backingImage,this.isUseMipMaps());  this.setTexture(dc,texture);  this.setTextureParameters(dc);  return texture;}  }
class C{  public Outfit putOver(final Outfit other){  int newDetail;  int newHair;  int newHead;  int newDress;  int newBody;  if (this.detail == null) {    newDetail=other.detail;  } else {    newDetail=this.detail;  }  if (this.hair == null) {    newHair=other.hair;  } else {    newHair=this.hair;  }  if (this.head == null) {    newHead=other.head;  } else {    newHead=this.head;  }  if (this.dress == null) {    newDress=other.dress;  } else {    newDress=this.dress;  }  if (this.body == null) {    newBody=other.body;  } else {    newBody=this.body;  }  return new Outfit(newDetail,newHair,newHead,newDress,newBody);}  }
class C{  public static boolean validateIpPortList(String ipPortList){  if (ipPortList == null || ipPortList.isEmpty()) {    return true;  }  String[] serverPortList=ipPortList.split(",");  for (  String serverPort : serverPortList) {    String ip=serverPort.substring(0,serverPort.lastIndexOf(":"));    String port=serverPort.substring(serverPort.lastIndexOf(":") + 1);    if (ip.startsWith("[") && ip.endsWith("]")) {      ip=ip.substring(1,ip.length() - 1);      if (!validateIpv6Addr(ip))       return false;    } else     if (validateIpv6Addr(ip)) {      return false;    } else     if (!validateHostName(ip)) {      return false;    }    if (!validateUint16(port))     return false;  }  return true;}  }
class C{  public StateMachineTestPlanBuilder<S,E> stateMachine(StateMachine<S,E> stateMachine,Object machineId){  this.stateMachines.put(machineId,stateMachine);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.190 -0500",hash_original_method="7FD58797EECF83FE34BEE1F3B093BC46",hash_generated_method="3712E6BE7ED8D8AF9BBA7E5263530F4C") public EventHeader createEventHeader(String eventType) throws ParseException {  if (eventType == null)   throw new NullPointerException("null eventType");  Event event=new Event();  event.setEventType(eventType);  return event;}  }
class C{  public KilledInSumForQuestCondition(String quest,int index,int killsSum){  this.questSlot=checkNotNull(quest);  this.questIndex=index;  this.killsSum=killsSum;}  }
class C{  @Override public boolean isPostOperation(){  return this.postOperation;}  }
class C{  public void testBF1810182(){  assertNotNull("Session not found, should not fail here",MSession.get(getCtx(),true));  Env.reset(false);  assertNotNull("Session not found after cache reset",MSession.get(getCtx(),false));}  }
class C{  protected void notify(final IChangeRecord record){  final BigdataGraphEdit edit=toGraphEdit(record);  if (edit != null) {    for (    BigdataGraphListener listener : listeners) {      listener.graphEdited(edit,record.toString());    }  }}  }
class C{  public PlogReaderThread(PluginContext context,BlockingQueue<DBMSEvent> queue,RedoReaderManager vmrrMgr,RawByteCache cache){  logger.info("PlogReaderThread: " + plogDirectory + "/"+ sleepSizeInMilliseconds+ "/"+ transactionFragSize);  this.context=context;  this.queue=queue;  this.vmrrMgr=vmrrMgr;  this.tungstenSchema=context.getReplicatorSchemaName().toLowerCase();  this.cache=cache;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void useForeGround(final UserRunnerStatus userRunnerStatus){  WaitingActionCondition<RunnerStatus> condition=new RunnerStatusWaitingActionCondition(userRunnerStatus);  Request<RunnerStatus> request=userRunnerStatus.getProject().getCodenvy().runner().status(userRunnerStatus.getProject().getInnerReference(),userRunnerStatus.getInnerStatus().processId());  WaitingAction<RunnerStatus> waitingAction=new WaitingAction<>("Starting project...","Project started.",request,condition);  RunnerStatus executedStatus=waitingAction.execute();  if (executedStatus == null) {    System.out.println("Unable to find updated status");    return;  }  UserRunnerStatus newStatus=new DefaultUserRunnerStatus(executedStatus,userRunnerStatus.getProject());  if (CANCELLED != newStatus.getInnerStatus().status()) {    try {      String logs=newStatus.getProject().getCodenvy().runner().logs(newStatus.getProject().getInnerReference(),newStatus.getInnerStatus().processId()).execute();      System.out.println("Logs:");      System.out.println(logs);    } catch (    CodenvyErrorException|CodenvyException e) {      if (isStackTraceEnabled()) {        throw e;      }      Ansi buffer=Ansi.ansi();      buffer.fg(RED);      buffer.a("Unable to get the logs of the run:");      buffer.a(e.getMessage());      buffer.reset();      System.out.println(buffer.toString());    }  }  if (RUNNING == newStatus.getInnerStatus().status()) {    String link="";    Link webLink=newStatus.getInnerStatus().getWebLink();    if (webLink != null) {      link=webLink.href();    }    System.out.println(format("Project %s is now running. URL is '%s'",newStatus.getProject().name(),link));  } else   if (STOPPED == newStatus.getInnerStatus().status()) {    System.out.println(format("Project %s has been executed",newStatus.getProject().name()));  } else   if (FAILED == newStatus.getInnerStatus().status()) {    System.out.println(format("Project %s has failed",newStatus.getProject().name()));  } else   if (CANCELLED == newStatus.getInnerStatus().status()) {    System.out.println(format("Project %s has been cancelled",newStatus.getProject().name()));  }  Ansi buffer=Ansi.ansi();  buffer.a("Runner ID is ").a(INTENSITY_BOLD).a(userRunnerStatus.shortId()).a(INTENSITY_BOLD_OFF);  System.out.println(buffer.toString());}  }
class C{  public ActionQueueThread(String name){  super(name);}  }
class C{  protected void parseQ() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x1=parseFloat();skipCommaSpaces();float y1=parseFloat();skipCommaSpaces();float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.curvetoQuadraticAbs(x1,y1,x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  public boolean makeReflective(String clazz,String metaobject,String metaclass) throws CannotCompileException, NotFoundException {  return reflection.makeReflective(clazz,metaobject,metaclass);}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel selectedDataModel=getDataEditor().getSelectedDataModel();  if (selectedDataModel instanceof DataSet) {    DataSet dataSet=(DataSet)selectedDataModel;    List variables=dataSet.getVariables();    int n=0;    for (    Object variable : variables) {      if (variable instanceof ContinuousVariable) {        n++;      }    }    if (n == 0) {      JOptionPane.showMessageDialog(getDataEditor(),"There are no continuous variables in this data set.");      return;    }    int[] indices=new int[n];    int m=-1;    for (int i=0; i < variables.size(); i++) {      if (variables.get(i) instanceof ContinuousVariable) {        indices[++m]=i;      }    }    dataSet=dataSet.subsetColumns(indices);    DataModelList list=new DataModelList();    list.add(dataSet);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Requires a tabular data set.");  }}  }
class C{  @Override public boolean markSupported(){  return true;}  }
class C{  public static CommonTransitions createSlide(int type,boolean forward,int duration,boolean drawDialogMenu){  CommonTransitions t=new CommonTransitions(TYPE_SLIDE);  t.slideType=type;  t.forward=forward;  t.speed=duration;  t.position=0;  t.drawDialogMenu=drawDialogMenu;  return t;}  }
class C{  public static Vector padRight(Collection doubles,String pattern){  return padRight(formatDecimal(doubles,pattern));}  }
class C{  @Override public RestStatus status(){  return status;}  }
class C{  static AttrHold createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrHold(str);  }}  }
class C{  private static void write(CharSequence from,File to,Charset charset,boolean append) throws IOException {  asCharSink(to,charset,modes(append)).write(from);}  }
class C{  public CPluginsMenu(final CGraphModel model){  super("Plugins");  m_model=model;  setMnemonic("HK_MENU_PLUGINS".charAt(0));  fillPluginsMenu();  PluginInterface.instance().addListener(m_listener);}  }
class C{  @Override public void onAnimationUpdate(ValueAnimator animation){  float fraction=animation.getAnimatedFraction();  PropertyBundle propertyBundle=mAnimatorMap.get(animation);  int propertyMask=propertyBundle.mPropertyMask;  if ((propertyMask & TRANSFORM_MASK) != 0) {    View v=mView.get();    if (v != null) {      v.invalidate();    }  }  ArrayList<NameValuesHolder> valueList=propertyBundle.mNameValuesHolder;  if (valueList != null) {    int count=valueList.size();    for (int i=0; i < count; ++i) {      NameValuesHolder values=valueList.get(i);      float value=values.mFromValue + fraction * values.mDeltaValue;      setValue(values.mNameConstant,value);    }  }  View v=mView.get();  if (v != null) {    v.invalidate();  }}  }
class C{  public ExecutionVariableImpl(){  super();}  }
class C{  private void popDouble(FPR reg){  asm.emitLFD(reg,spTopOffset + 2 * BYTES_IN_STACKSLOT - BYTES_IN_DOUBLE,FP);  discardSlots(2);}  }
class C{  void incNumOverflowOnDisk(long delta){  this.numOverflowOnDisk.addAndGet(delta);}  }
class C{  public void testCloneSimple(){  final Simple simple=new Simple();  simple.setS("x1");  simple.setX(20);  final Simple clone=cloner.deepClone(simple);  assertEquals(simple.getS(),clone.getS());  assertSame(simple.getS(),clone.getS());  assertEquals(simple.getX(),clone.getX());  simple.setS("x2");  simple.setX(30);  assertNotSame(simple.getS(),clone.getS());  assertFalse(simple.getS().equals(clone.getS()));  assertFalse(simple.getX() == clone.getX());}  }
class C{  protected void init(){  ConfigurationBuilder configurationBuilder=new ConfigurationBuilder().setScanners(new SubTypesScanner(),new TypeAnnotationsScanner());  if (useClassPath) {    configurationBuilder.setUrls(forJavaClassPath());  } else {    configurationBuilder.setUrls(forClassLoader());  }  Reflections reflections=new Reflections(configurationBuilder);  List<Class<?>> annotatedWithDtos=new ArrayList<>(reflections.getTypesAnnotatedWith(DTO.class));  List<Class<?>> interfacesDtos=annotatedWithDtos.stream().filter(null).collect(Collectors.toList());  interfacesDtos.stream().forEach(null);}  }
class C{  public ChemicalPairOutput swap(){  return new ChemicalPairOutput(rightGas,leftGas);}  }
class C{  public void moveTo(TypedFile destination) throws IOException {  if (!mimeType().equals(destination.mimeType())) {    throw new IOException("Type mismatch.");  }  if (!file.renameTo(destination.file())) {    throw new IOException("Rename failed!");  }}  }
class C{  private void commitReviewNote(String reviewCommitHash,Review review){  try (GitNoteWriter<Review> writer=GitNoteWriter.createNoteWriter(reviewCommitHash,repo,author,REVIEWS_REF)){    List<Review> reviews=new ArrayList<Review>();    reviews.add(review);    writer.create("Writing review for " + reviewCommitHash,reviews);  } }  }
class C{  private static int shortArrayCopy(char[] src,char[] dst,int dstOffset){  int ln=src.length;  for (int i=0; i < ln; i++) {    dst[dstOffset++]=src[i];  }  return dstOffset;}  }
class C{  public DoubleMatrix2D assign(DoubleMatrix2D source){  if (!(source instanceof SparseDoubleMatrix2D)) {    return super.assign(source);  }  SparseDoubleMatrix2D other=(SparseDoubleMatrix2D)source;  if (other == this)   return this;  checkShape(other);  if (this.isNoView && other.isNoView) {    this.elements.assign(other.elements);    return this;  }  return super.assign(source);}  }
class C{  public StringLiteralConcatenation extendsWith(StringLiteral lit){  this.sourceEnd=lit.sourceEnd;  final int literalsLength=this.literals.length;  if (this.counter == literalsLength) {    System.arraycopy(this.literals,0,this.literals=new StringLiteral[literalsLength + INITIAL_SIZE],0,literalsLength);  }  int length=this.source.length;  System.arraycopy(this.source,0,this.source=new char[length + lit.source.length],0,length);  System.arraycopy(lit.source,0,this.source,length,lit.source.length);  this.literals[this.counter++]=lit;  return this;}  }
class C{  ValidateAction(ModeUsage modeUsage,Schema schema){  super(modeUsage);  this.schema=schema;}  }
class C{  protected boolean promptBoolean(final String prompt,final Optional<Boolean> defaultValue) throws IOException {  requireNonNull(prompt);  requireNonNull(defaultValue);  final ConsoleReader reader=getReader();  reader.setPrompt(prompt);  Boolean value=null;  boolean prompting=true;  while (prompting) {    final String input=reader.readLine();    if (input.isEmpty() && defaultValue.isPresent()) {      value=defaultValue.get();      prompting=false;    }    if (isAffirmative(input)) {      value=true;      prompting=false;    }    if (isNegative(input)) {      value=false;      prompting=false;    }    if (prompting) {      reader.println("Invalid response (true/false)");    }  }  return value;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="iqr";  String vmSelectionPolicy="mc";  String parameter="1.5";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  TypesPackage theTypesPackage=(TypesPackage)EPackage.Registry.INSTANCE.getEPackage(TypesPackage.eNS_URI);  boolLiteralEClass.getESuperTypes().add(this.getLiteral());  intLiteralEClass.getESuperTypes().add(this.getLiteral());  doubleLiteralEClass.getESuperTypes().add(this.getLiteral());  floatLiteralEClass.getESuperTypes().add(this.getLiteral());  hexLiteralEClass.getESuperTypes().add(this.getLiteral());  stringLiteralEClass.getESuperTypes().add(this.getLiteral());  nullLiteralEClass.getESuperTypes().add(this.getLiteral());  assignmentExpressionEClass.getESuperTypes().add(this.getExpression());  conditionalExpressionEClass.getESuperTypes().add(this.getExpression());  logicalOrExpressionEClass.getESuperTypes().add(this.getExpression());  logicalAndExpressionEClass.getESuperTypes().add(this.getExpression());  logicalNotExpressionEClass.getESuperTypes().add(this.getExpression());  bitwiseXorExpressionEClass.getESuperTypes().add(this.getExpression());  bitwiseOrExpressionEClass.getESuperTypes().add(this.getExpression());  bitwiseAndExpressionEClass.getESuperTypes().add(this.getExpression());  logicalRelationExpressionEClass.getESuperTypes().add(this.getExpression());  shiftExpressionEClass.getESuperTypes().add(this.getExpression());  numericalAddSubtractExpressionEClass.getESuperTypes().add(this.getExpression());  numericalMultiplyDivideExpressionEClass.getESuperTypes().add(this.getExpression());  numericalUnaryExpressionEClass.getESuperTypes().add(this.getExpression());  primitiveValueExpressionEClass.getESuperTypes().add(this.getExpression());  featureCallEClass.getESuperTypes().add(this.getExpression());  elementReferenceExpressionEClass.getESuperTypes().add(this.getExpression());  parenthesizedExpressionEClass.getESuperTypes().add(this.getExpression());  typeCastExpressionEClass.getESuperTypes().add(this.getExpression());  initEClass(expressionEClass,Expression.class,"Expression",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(literalEClass,Literal.class,"Literal",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(boolLiteralEClass,BoolLiteral.class,"BoolLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getBoolLiteral_Value(),ecorePackage.getEBoolean(),"value",null,0,1,BoolLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(intLiteralEClass,IntLiteral.class,"IntLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getIntLiteral_Value(),ecorePackage.getEInt(),"value",null,0,1,IntLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(doubleLiteralEClass,DoubleLiteral.class,"DoubleLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getDoubleLiteral_Value(),ecorePackage.getEDouble(),"value",null,0,1,DoubleLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(floatLiteralEClass,FloatLiteral.class,"FloatLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFloatLiteral_Value(),ecorePackage.getEFloat(),"value",null,0,1,FloatLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(hexLiteralEClass,HexLiteral.class,"HexLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getHexLiteral_Value(),ecorePackage.getEInt(),"value",null,0,1,HexLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(stringLiteralEClass,StringLiteral.class,"StringLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getStringLiteral_Value(),ecorePackage.getEString(),"value",null,0,1,StringLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(nullLiteralEClass,NullLiteral.class,"NullLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(assignmentExpressionEClass,AssignmentExpression.class,"AssignmentExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getAssignmentExpression_VarRef(),this.getExpression(),null,"varRef",null,0,1,AssignmentExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getAssignmentExpression_Operator(),this.getAssignmentOperator(),"operator",null,0,1,AssignmentExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getAssignmentExpression_Expression(),this.getExpression(),null,"expression",null,0,1,AssignmentExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(conditionalExpressionEClass,ConditionalExpression.class,"ConditionalExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getConditionalExpression_Condition(),this.getExpression(),null,"condition",null,0,1,ConditionalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getConditionalExpression_TrueCase(),this.getExpression(),null,"trueCase",null,0,1,ConditionalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getConditionalExpression_FalseCase(),this.getExpression(),null,"falseCase",null,0,1,ConditionalExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(logicalOrExpressionEClass,LogicalOrExpression.class,"LogicalOrExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getLogicalOrExpression_LeftOperand(),this.getExpression(),null,"leftOperand",null,0,1,LogicalOrExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getLogicalOrExpression_RightOperand(),this.getExpression(),null,"rightOperand",null,0,1,LogicalOrExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(logicalAndExpressionEClass,LogicalAndExpression.class,"LogicalAndExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getLogicalAndExpression_LeftOperand(),this.getExpression(),null,"leftOperand",null,0,1,LogicalAndExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getLogicalAndExpression_RightOperand(),this.getExpression(),null,"rightOperand",null,0,1,LogicalAndExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(logicalNotExpressionEClass,LogicalNotExpression.class,"LogicalNotExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getLogicalNotExpression_Operand(),this.getExpression(),null,"operand",null,0,1,LogicalNotExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(bitwiseXorExpressionEClass,BitwiseXorExpression.class,"BitwiseXorExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBitwiseXorExpression_LeftOperand(),this.getExpression(),null,"leftOperand",null,0,1,BitwiseXorExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBitwiseXorExpression_RightOperand(),this.getExpression(),null,"rightOperand",null,0,1,BitwiseXorExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(bitwiseOrExpressionEClass,BitwiseOrExpression.class,"BitwiseOrExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBitwiseOrExpression_LeftOperand(),this.getExpression(),null,"leftOperand",null,0,1,BitwiseOrExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBitwiseOrExpression_RightOperand(),this.getExpression(),null,"rightOperand",null,0,1,BitwiseOrExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(bitwiseAndExpressionEClass,BitwiseAndExpression.class,"BitwiseAndExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getBitwiseAndExpression_LeftOperand(),this.getExpression(),null,"leftOperand",null,0,1,BitwiseAndExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getBitwiseAndExpression_RightOperand(),this.getExpression(),null,"rightOperand",null,0,1,BitwiseAndExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(logicalRelationExpressionEClass,LogicalRelationExpression.class,"LogicalRelationExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getLogicalRelationExpression_LeftOperand(),this.getExpression(),null,"leftOperand",null,0,1,LogicalRelationExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getLogicalRelationExpression_Operator(),this.getRelationalOperator(),"operator",null,0,1,LogicalRelationExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getLogicalRelationExpression_RightOperand(),this.getExpression(),null,"rightOperand",null,0,1,LogicalRelationExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(shiftExpressionEClass,ShiftExpression.class,"ShiftExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getShiftExpression_LeftOperand(),this.getExpression(),null,"leftOperand",null,0,1,ShiftExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getShiftExpression_Operator(),this.getShiftOperator(),"operator",null,0,1,ShiftExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getShiftExpression_RightOperand(),this.getExpression(),null,"rightOperand",null,0,1,ShiftExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(numericalAddSubtractExpressionEClass,NumericalAddSubtractExpression.class,"NumericalAddSubtractExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getNumericalAddSubtractExpression_LeftOperand(),this.getExpression(),null,"leftOperand",null,0,1,NumericalAddSubtractExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getNumericalAddSubtractExpression_Operator(),this.getAdditiveOperator(),"operator",null,0,1,NumericalAddSubtractExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getNumericalAddSubtractExpression_RightOperand(),this.getExpression(),null,"rightOperand",null,0,1,NumericalAddSubtractExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(numericalMultiplyDivideExpressionEClass,NumericalMultiplyDivideExpression.class,"NumericalMultiplyDivideExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getNumericalMultiplyDivideExpression_LeftOperand(),this.getExpression(),null,"leftOperand",null,0,1,NumericalMultiplyDivideExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getNumericalMultiplyDivideExpression_Operator(),this.getMultiplicativeOperator(),"operator",null,0,1,NumericalMultiplyDivideExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getNumericalMultiplyDivideExpression_RightOperand(),this.getExpression(),null,"rightOperand",null,0,1,NumericalMultiplyDivideExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(numericalUnaryExpressionEClass,NumericalUnaryExpression.class,"NumericalUnaryExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getNumericalUnaryExpression_Operator(),this.getUnaryOperator(),"operator",null,0,1,NumericalUnaryExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getNumericalUnaryExpression_Operand(),this.getExpression(),null,"operand",null,0,1,NumericalUnaryExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(primitiveValueExpressionEClass,PrimitiveValueExpression.class,"PrimitiveValueExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPrimitiveValueExpression_Value(),this.getLiteral(),null,"value",null,0,1,PrimitiveValueExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(featureCallEClass,FeatureCall.class,"FeatureCall",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getFeatureCall_Owner(),this.getExpression(),null,"owner",null,0,1,FeatureCall.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFeatureCall_Feature(),ecorePackage.getEObject(),null,"feature",null,0,1,FeatureCall.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getFeatureCall_OperationCall(),ecorePackage.getEBoolean(),"operationCall",null,0,1,FeatureCall.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFeatureCall_Args(),this.getExpression(),null,"args",null,0,-1,FeatureCall.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFeatureCall_ArraySelector(),this.getExpression(),null,"arraySelector",null,0,-1,FeatureCall.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getFeatureCall_ArrayAccess(),ecorePackage.getEBoolean(),"arrayAccess",null,0,1,FeatureCall.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(elementReferenceExpressionEClass,ElementReferenceExpression.class,"ElementReferenceExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getElementReferenceExpression_Reference(),ecorePackage.getEObject(),null,"reference",null,0,1,ElementReferenceExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getElementReferenceExpression_OperationCall(),ecorePackage.getEBoolean(),"operationCall",null,0,1,ElementReferenceExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getElementReferenceExpression_Args(),this.getExpression(),null,"args",null,0,-1,ElementReferenceExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getElementReferenceExpression_ArraySelector(),this.getExpression(),null,"arraySelector",null,0,-1,ElementReferenceExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getElementReferenceExpression_ArrayAccess(),ecorePackage.getEBoolean(),"arrayAccess",null,0,1,ElementReferenceExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(parenthesizedExpressionEClass,ParenthesizedExpression.class,"ParenthesizedExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getParenthesizedExpression_Expression(),this.getExpression(),null,"expression",null,0,1,ParenthesizedExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeCastExpressionEClass,TypeCastExpression.class,"TypeCastExpression",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeCastExpression_Operand(),this.getExpression(),null,"operand",null,0,1,TypeCastExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTypeCastExpression_Type(),theTypesPackage.getType(),null,"type",null,0,1,TypeCastExpression.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEEnum(assignmentOperatorEEnum,AssignmentOperator.class,"AssignmentOperator");  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.MULT_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.DIV_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.MOD_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.ADD_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.SUB_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.LEFT_SHIFT_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.RIGHT_SHIFT_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.AND_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.XOR_ASSIGN);  addEEnumLiteral(assignmentOperatorEEnum,AssignmentOperator.OR_ASSIGN);  initEEnum(shiftOperatorEEnum,ShiftOperator.class,"ShiftOperator");  addEEnumLiteral(shiftOperatorEEnum,ShiftOperator.LEFT);  addEEnumLiteral(shiftOperatorEEnum,ShiftOperator.RIGHT);  initEEnum(additiveOperatorEEnum,AdditiveOperator.class,"AdditiveOperator");  addEEnumLiteral(additiveOperatorEEnum,AdditiveOperator.PLUS);  addEEnumLiteral(additiveOperatorEEnum,AdditiveOperator.MINUS);  initEEnum(multiplicativeOperatorEEnum,MultiplicativeOperator.class,"MultiplicativeOperator");  addEEnumLiteral(multiplicativeOperatorEEnum,MultiplicativeOperator.MUL);  addEEnumLiteral(multiplicativeOperatorEEnum,MultiplicativeOperator.DIV);  addEEnumLiteral(multiplicativeOperatorEEnum,MultiplicativeOperator.MOD);  initEEnum(unaryOperatorEEnum,UnaryOperator.class,"UnaryOperator");  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.POSITIVE);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.NEGATIVE);  addEEnumLiteral(unaryOperatorEEnum,UnaryOperator.COMPLEMENT);  initEEnum(relationalOperatorEEnum,RelationalOperator.class,"RelationalOperator");  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.SMALLER);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.SMALLER_EQUAL);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.GREATER);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.GREATER_EQUAL);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.EQUALS);  addEEnumLiteral(relationalOperatorEEnum,RelationalOperator.NOT_EQUALS);  createResource(eNS_URI);}  }
class C{  public T caseEventValueReferenceExpression(EventValueReferenceExpression object){  return null;}  }
class C{  protected void checkTEForGivenData(double[][] var1,double[][] var2,int historyK,int historyL,int[] kNNs,double[] expectedResults) throws Exception {  ConditionalMutualInfoCalculatorMultiVariateKraskov condMiCalc=getNewCalc(1);  int firstDestTimeIndex=Math.max(historyK,historyL);  var1=MatrixUtils.normaliseIntoNewArray(var1);  var2=MatrixUtils.normaliseIntoNewArray(var2);  for (int kIndex=0; kIndex < kNNs.length; kIndex++) {    int k=kNNs[kIndex];    condMiCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(k));    condMiCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_NORMALISE,Boolean.toString(false));    condMiCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,NUM_THREADS_TO_USE);    condMiCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_ADD_NOISE,"0");    condMiCalc.initialise(var1[0].length * historyL,var2[0].length,var2[0].length * historyK);    double[][] sources=null;    if (historyL == 1) {      sources=MatrixUtils.selectRows(var1,firstDestTimeIndex - historyL,var1.length - firstDestTimeIndex);    } else {      int sourceVars=var1[0].length;      sources=new double[var1.length - firstDestTimeIndex][sourceVars * historyL];      for (int t=0; t < historyL; t++) {        MatrixUtils.arrayCopy(var1,firstDestTimeIndex - historyL + t,0,sources,0,t * sourceVars,var1.length - firstDestTimeIndex,sourceVars);      }    }    double[][] conditionals=null;    if (historyK == 1) {      conditionals=MatrixUtils.selectRows(var2,firstDestTimeIndex - historyK,var2.length - firstDestTimeIndex);    } else {      int destVars=var2[0].length;      conditionals=new double[var2.length - firstDestTimeIndex][destVars * historyK];      for (int t=0; t < historyK; t++) {        MatrixUtils.arrayCopy(var2,firstDestTimeIndex - historyK + t,0,conditionals,0,t * destVars,var2.length - firstDestTimeIndex,destVars);      }    }    condMiCalc.setObservations(sources,MatrixUtils.selectRows(var2,firstDestTimeIndex,var2.length - firstDestTimeIndex),conditionals);    double condMi=condMiCalc.computeAverageLocalOfObservations();    System.out.printf("k=%d: Average MI %.8f (expected %.8f)\n",k,condMi,expectedResults[kIndex]);    assertEquals(expectedResults[kIndex],condMi,0.000001);  }}  }
class C{  private void run0(){  log.info("Starting a default run.");  Config config=ConfigUtils.loadConfig(configFile);  config.controler().setOverwriteFileSetting(OutputDirectoryHierarchy.OverwriteFileSetting.overwriteExistingFiles);  config.controler().setOutputDirectory(outputDirectory);  config.network().setTimeVariantNetwork(false);  Controler controler=new Controler(config);  controler.run();}  }
class C{  public CauseFilterParser(Element element) throws FilterException {  String causeProperty=element.getText();  if (causeProperty == null) {    throw new MissingFilterPropertyException("cause",element);  }  CauseFilter.EventCause cause=CauseFilter.EventCause.getEventCause(causeProperty);  if (cause == null) {    throw new InvalidFilterPropertyException("cause",element);  }  this.cause=cause;}  }
class C{  public PersonalChest(final String bankName){  this.bankName=bankName;  attending=null;  super.removeSlot("content");  super.addSlot(new PersonalChestSlot(this));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void runtimePropertyUpdate() throws Exception {  Configuration configuration=new Configuration();  PropertySection section=new PropertySection();  SingleProperty<Long> property=new LongProperty("","","property1",10L,false,false);  section.addProperty(property);  configuration.addSection(section);  doReturn(configuration).when(transformator).unmarshall(Matchers.<Path>anyObject(),Matchers.<Path>anyObject(),eq(Configuration.class));  doReturn(null).when(transformator).unmarshall(Matchers.<Path>anyObject(),Matchers.<Path>anyObject(),eq(ConfigurationUpdate.class));  doNothing().when(transformator).marshall(Matchers.<Path>anyObject(),any(),anyString());  ConfigurationUpdate configurationUpdate=mock(ConfigurationUpdate.class);  AbstractPropertyUpdate<Long> propertyUpdate=mock(AbstractPropertyUpdate.class);  when(propertyUpdate.getPropertyLogicalName()).thenReturn("property1");  when(propertyUpdate.getUpdateValue()).thenReturn(20L);  when(configurationUpdate.getPropertyUpdates()).thenReturn(Collections.<IPropertyUpdate<?>>singleton(propertyUpdate));  propertyManager.loadConfigurationAndUpdates();  propertyManager.updateConfiguration(configurationUpdate,false);  assertThat(property.getValue(),is(20L));  ArgumentCaptor<List> captor=ArgumentCaptor.forClass(List.class);  verify(propertyUpdateExecutor,times(1)).executePropertyUpdates(captor.capture());  List<SingleProperty<?>> list=captor.getValue();  assertThat(list,hasSize(1));  assertThat(list,hasItem(property));  verify(transformator,times(1)).marshall(Matchers.<Path>anyObject(),eq(configurationUpdate),anyString());}  }
class C{  public static void generateElevation(int hilliness,int width,int height,int range,int invertProb,int invertNegative,int elevationMap[][],int algorithm){  int minLevel=0;  int maxLevel=range;  boolean invert=(Compute.randomInt(100) < invertProb);  for (int w=0; w < width; w++) {    for (int h=0; h < height; h++) {      elevationMap[w][h]=0;    }  }switch (algorithm) {case 0:    cutSteps(hilliness,width,height,elevationMap);  break;case 1:midPoint(hilliness,width,height,elevationMap);break;case 2:cutSteps(hilliness,width,height,elevationMap);midPoint(hilliness,width,height,elevationMap);break;default :if ((algorithm > 2) && (algorithm - 3 < elevationGenerators.size())) {elevationGenerators.get(algorithm - 3).generate(hilliness,width,height,elevationMap);}}int min=elevationMap[0][0];int max=elevationMap[0][0];for (int w=0; w < width; w++) {for (int h=0; h < height; h++) {if (elevationMap[w][h] > max) {max=elevationMap[w][h];}if (elevationMap[w][h] < min) {min=elevationMap[w][h];}}}double scale=(double)(maxLevel - minLevel) / (double)(max - min);int inc=(int)(-scale * min + minLevel);int[] elevationCount=new int[maxLevel + 1];for (int w=0; w < width; w++) {for (int h=0; h < height; h++) {elevationMap[w][h]*=scale;elevationMap[w][h]+=inc;elevationCount[elevationMap[w][h]]++;}}int mostElevation=0;for (int lvl=1; lvl <= range; lvl++) {if (elevationCount[lvl] > elevationCount[mostElevation]) {mostElevation=lvl;}}for (int w=0; w < width; w++) {for (int h=0; h < height; h++) {elevationMap[w][h]-=mostElevation;if (invert) {elevationMap[w][h]*=-1;}}}if (invertNegative == 1) {for (int w=0; w < width; w++) {for (int h=0; h < height; h++) {if (elevationMap[w][h] < 0) {elevationMap[w][h]*=-1;}}}}}  }
class C{  public Container showContainer(String resourceName,Command sourceCommand,Component sourceComponent){  return showContainerImpl(resourceName,sourceCommand,sourceComponent,false);}  }
class C{  private void collectInDir(Vector<File> colfiles,File dir){  if (!dir.exists())   return;  File[] files=dir.listFiles(subdirFileFilter);  for (int i=0; i < files.length; i++) {    if (files[i].isDirectory()) {      collectInDir(colfiles,files[i]);    } else     colfiles.add(files[i]);  }}  }
class C{  @Nullable protected HttpRequestInterceptor createRequestInterceptor(){  return null;}  }
class C{  private static String quadTree(final MapTile aTile){  StringBuilder quadKey=new StringBuilder();  for (int i=aTile.zoomLevel; i > 0; i--) {    int digit=0;    int mask=1 << (i - 1);    if ((aTile.x & mask) != 0)     digit+=1;    if ((aTile.y & mask) != 0)     digit+=2;    quadKey.append(digit);  }  return quadKey.toString();}  }
class C{  public void add(Rect toAdd){  ObjectPool.Entry<Rect> entry=pool.reserve();  Rect r=entry.get();  r.set(toAdd);  recursiveAdd(entry,0);}  }
class C{  public void exit(int status){  System.exit(status);}  }
class C{  protected void globalDataFlowOptimization(){  if (OptimizerUtils.isOptLevel(OptimizationLevel.O4_GLOBAL_TIME_MEMORY)) {    try {      runtimeProgram=GlobalOptimizerWrapper.optimizeProgram(dmlProgram,runtimeProgram);    } catch (    DMLRuntimeException e) {      throw new MLContextException("Exception occurred during global data flow optimization",e);    }catch (    HopsException e) {      throw new MLContextException("Exception occurred during global data flow optimization",e);    }catch (    LopsException e) {      throw new MLContextException("Exception occurred during global data flow optimization",e);    }  }}  }
class C{  public void resetQualifiedName(String qualifiedName){  setIndex(-1);  int index=qualifiedName.lastIndexOf('.');  if (index == -1) {    setName(qualifiedName);    getTable().setName("");    getTable().setTableQualifier("");  } else {    setName(qualifiedName.substring(index + 1,qualifiedName.length()));    getTable().setPossiblyQualifiedName(qualifiedName.substring(0,index));  }}  }
class C{  private static String decodeBase900toBase10(int[] codewords,int count) throws FormatException {  BigInteger result=BigInteger.ZERO;  for (int i=0; i < count; i++) {    result=result.add(EXP900[count - i - 1].multiply(BigInteger.valueOf(codewords[i])));  }  String resultString=result.toString();  if (resultString.charAt(0) != '1') {    throw FormatException.getFormatInstance();  }  return resultString.substring(1);}  }
class C{  public static String removePunctuationMarks(String text){  return removeExtraSpaces(allMarksPat.matcher(text).replaceAll(" "));}  }
class C{  @Deprecated public void authenticateLongSession(final String username,final String password,final String consumerKey,final String consumerSecret,final String deviceIdentifier,final String deviceDescription,final boolean supportsTwoFactor,final OnClientCallback<AuthenticationResult> callback){  AsyncReflector.execute(mClient,callback,"authenticateLongSession",username,password,consumerKey,consumerSecret,deviceIdentifier,deviceDescription,supportsTwoFactor);}  }
class C{  public static boolean isSwingAvailable(){  return isSwingAvailable;}  }
class C{  private void paintString(Graphics g,int x,int y,int width,int height,int fillStart,int amountFull,Insets b){  ReflectHelper.invokeMethod(BasicProgressBarUI.class,this,"paintString",new Class[]{Graphics.class,int.class,int.class,int.class,int.class,int.class,int.class,Insets.class},new Object[]{g,x,y,width,height,fillStart,amountFull,b});}  }
class C{  public NetzKomponente(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());  setTitel(getTypeFactory().getMessage(TYPE_ID));}  }
class C{  public void restorePose(){  this.setPose(physicsState.getSavedPosition(this.index),physicsState.getSavedOrientation(this.index));}  }
class C{  protected double estimateMaximumTickLabelHeight(Graphics2D g2){  RectangleInsets tickLabelInsets=getTickLabelInsets();  double result=tickLabelInsets.getTop() + tickLabelInsets.getBottom();  Font tickLabelFont=getTickLabelFont();  FontRenderContext frc=g2.getFontRenderContext();  result+=tickLabelFont.getLineMetrics("123",frc).getHeight();  return result;}  }
class C{  public Contact addContact(String contact){  Contact prop=new Contact(contact);  setContact(prop);  return prop;}  }
class C{  private static byte randomByte(){  return (byte)(127 - new Random().nextInt(256));}  }
class C{  private static boolean legalize(DTSweepContext tcx,DelaunayTriangle t){  int oi;  boolean inside;  TriangulationPoint p, op;  DelaunayTriangle ot;  for (int i=0; i < 3; i++) {    if (t.dEdge[i]) {      continue;    }    ot=t.neighbors[i];    if (ot != null) {      p=t.points[i];      op=ot.oppositePoint(t,p);      oi=ot.index(op);      if (ot.cEdge[oi] || ot.dEdge[oi]) {        t.cEdge[i]=ot.cEdge[oi];        continue;      }      inside=smartIncircle(p,t.pointCCW(p),t.pointCW(p),op);      if (inside) {        boolean notLegalized;        t.dEdge[i]=true;        ot.dEdge[oi]=true;        rotateTrianglePair(t,p,ot,op);        notLegalized=!legalize(tcx,t);        if (notLegalized) {          tcx.mapTriangleToNodes(t);        }        notLegalized=!legalize(tcx,ot);        if (notLegalized) {          tcx.mapTriangleToNodes(ot);        }        t.dEdge[i]=false;        ot.dEdge[oi]=false;        return true;      }    }  }  return false;}  }
class C{  protected Boolean parseBooleanValue(String booleanValue) throws ParseException {  if (booleanValue == null) {    return null;  }  if (booleanValue.equalsIgnoreCase("false") || booleanValue.equals("0")) {    return Boolean.FALSE;  }  if (booleanValue.equalsIgnoreCase("true") || booleanValue.equals("1")) {    return Boolean.TRUE;  }  ParseException pe=new ParseException(CoreErrorDomain.ERR.invalidBooleanAttribute);  pe.setInternalReason("Invalid value for boolean attribute: " + booleanValue);  throw pe;}  }
class C{  public static void approximate(IR ir,boolean forward){  LTDominators dom=new LTDominators(ir,forward);  ir.setLtDominators(dom);  dom.analyze(ir);}  }
class C{  private boolean isTargetFile(Optional<FileInfo> currentFile2){  String inputFilename=currentFile2.get().getFile().getName();  SimpleDateFormat dateFormat=new SimpleDateFormat(targetFilename);  String substringOfTargetFile=dateFormat.format(new Date());  if (inputFilename.toLowerCase().contains(substringOfTargetFile.toLowerCase())) {    return true;  }  return false;}  }
class C{  @Nonnull public DataFile storeDataFile(@Nonnull DataFile df,@Nullable InputStream is){  df=saveOrUpdate(df);  if (is != null) {    boolean delete=true;    try {      storeFile(is,df);      df=saveOrUpdate(df);      delete=false;    } catch (    IOException e) {      throw new RuntimeException(e);    }catch (    IllegalAccessException e) {      throw new RuntimeException(e);    } finally {      if (delete) {        delete(df);      }    }  } else   if (df.getId() == 0) {    LOG.error("New Datafiles must have a file associated with them.");  }  return df;}  }
class C{  public BeepAction(){  super(beepAction);}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  public static void listObject_test4() throws Exception {  int i;  println("Test: empty bucket: listObjects(final String bucketName)");  i=0;  for (  Result r : client.listObjects(bucketName,"minio",true)) {    println(i++,r.get());    if (i == 10) {      break;    }  }}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.107 -0500",hash_original_method="9BD1F31EAB786A33FC8D6DD03AC7DD13",hash_generated_method="727476E5E8869ABEA4455A58878360E2") public void copy1DRangeFromUnchecked(int off,int count,int[] d){  int dataSize=mType.mElement.getSizeBytes() * count;  data1DChecks(off,count,d.length * 4,dataSize);  mRS.nAllocationData1D(getIDSafe(),off,mSelectedLOD,count,d,dataSize);}  }
class C{  public final boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof ProtocolVersion)) {    return false;  }  ProtocolVersion that=(ProtocolVersion)obj;  return ((this.protocol.equals(that.protocol)) && (this.major == that.major) && (this.minor == that.minor));}  }
class C{  void registerNotificationListener(ObjectName source) throws InstanceNotFoundException {  mBeanServer.addNotificationListener(source,this,null,source);}  }
class C{  protected TreeMaker(JCCompilationUnit toplevel,Names names,Types types,Symtab syms){  this.pos=Position.FIRSTPOS;  this.toplevel=toplevel;  this.names=names;  this.types=types;  this.syms=syms;}  }
class C{  public void testCertificateFactory15() throws CertificateException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory[] certFs=initCertFs();  assertNotNull("CertificateFactory objects were not created",certFs);  List<Certificate> list=new Vector<Certificate>();  for (int i=0; i < certFs.length; i++) {    CertPath cp=certFs[i].generateCertPath(list);    List<? extends Certificate> list1=cp.getCertificates();    assertTrue("List should be empty",list1.isEmpty());  }}  }
class C{  private double hotnessToCounts(double hotness){  return totalCountsTaken * hotness;}  }
class C{  @SuppressWarnings("unchecked") public static <E>ImmutableMultiset<E> of(){  return (ImmutableMultiset<E>)EmptyImmutableMultiset.INSTANCE;}  }
class C{  public void addRaster(int x1,int y1,ImageIcon ii,LinkProperties properties) throws IOException, InterruptedException {  LinkRaster.write(x1,y1,ii,properties,link.dos);}  }
class C{  static XDragSourceProtocol createInstance(XDragSourceProtocolListener listener){  return new MotifDnDDragSourceProtocol(listener);}  }
class C{  private void validateVPCInformation(String vpCId) throws Throwable {  if (this.isAwsClientMock) {    return;  }  Map<String,NetworkState> networkStateMap=getNetworkStates(this.host);  assertNotNull(networkStateMap);  NetworkState networkState=networkStateMap.get(vpCId);  assertNotNull(networkState);  assertNotNull(networkState.subnetCIDR);  assertNotNull(networkState.instanceAdapterReference);  assertNotNull(networkState.customProperties.get(AWS_GATEWAY_ID));  assertNotNull(networkState.customProperties.get(AWS_SUBNET_ID));  assertNotNull(networkState.customProperties.get(AWS_VPC_ROUTE_TABLE_ID));}  }
class C{  public static cuDoubleComplex cuCdiv(cuDoubleComplex x,cuDoubleComplex y){  cuDoubleComplex quot;  double s=Math.abs(cuCreal(y)) + Math.abs(cuCimag(y));  double oos=1.0 / s;  double ars=cuCreal(x) * oos;  double ais=cuCimag(x) * oos;  double brs=cuCreal(y) * oos;  double bis=cuCimag(y) * oos;  s=(brs * brs) + (bis * bis);  oos=1.0 / s;  quot=cuCmplx(((ars * brs) + (ais * bis)) * oos,((ais * brs) - (ars * bis)) * oos);  return quot;}  }
class C{  public static boolean isUniformCollection(Collection<?> c,Class<?> e){  if (e == null) {    throw new IllegalArgumentException("Null reference type");  }  if (c == null) {    throw new IllegalArgumentException("Null collection");  }  if (c.isEmpty()) {    return false;  }  for (  Object o : c) {    if (o == null || !e.isAssignableFrom(o.getClass())) {      return false;    }  }  return true;}  }
class C{  public Vector4f lerp(Vector4fc other,float t){  return lerp(other,t,this);}  }
class C{  public static double doubleFromProperties(Properties p,String propName,double defaultValue){  double ret=defaultValue;  String doubleString=p.getProperty(propName);  if (doubleString != null) {    try {      ret=Double.parseDouble(doubleString.trim());    } catch (    NumberFormatException e) {      ret=defaultValue;    }  }  return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.632 -0400",hash_original_method="831674657A405FDE7D8847FE1F919007",hash_generated_method="D380B7AFFB08D691DE8B27F632863A35") public AgeFileFilter(long cutoff,boolean acceptOlder){  this.acceptOlder=acceptOlder;  this.cutoff=cutoff;}  }
class C{  public void deleteClassInstructors(org.hibernate.Session hibSession){  Set s=getClassInstructors();  if (s == null || s.size() == 0)   return;  for (Iterator i=s.iterator(); i.hasNext(); ) {    ClassInstructor ci=(ClassInstructor)(i.next());    DepartmentalInstructor di=new DepartmentalInstructorDAO().get(ci.getInstructor().getUniqueId());    di.getClasses().remove(ci);    ci.setInstructor(null);    ci.setClassInstructing(null);    hibSession.saveOrUpdate(di);    hibSession.delete(ci);    i.remove();  }}  }
class C{  protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_import_challenges);}  }
class C{  public CViewSelectionDialog(final JFrame parent,final IViewContainer container){  super(parent,"Insert View",ModalityType.APPLICATION_MODAL);  Preconditions.checkNotNull(parent,"IE01824: Parent argument can not be null");  Preconditions.checkNotNull(container,"IE01825: Container argument can not be null");  setLayout(new BorderLayout());  m_tree=new CViewSelectionTree(this,container);  add(new JScrollPane(m_tree));  final CPanelTwoButtons buttons=new CPanelTwoButtons(new InternalListener(),"OK","Cancel");  add(buttons,BorderLayout.SOUTH);  pack();}  }
class C{  protected AnimatableLengthOrIdentValue(AnimationTarget target){  super(target);}  }
class C{  public ClientResponse put(URI resourceURI){  return client.put(resourceURI);}  }
class C{  public boolean isServerFixed(){  return getChangeServerPath() == null;}  }
class C{  private void readObject(final java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  useOnOffSwith=in.readBoolean();  markerColors=(MarkerColors)in.readObject();}  }
class C{  private boolean traverseGivenAxis(int direction,int axis,boolean sendEvent,String contentDescription,boolean sychronous){  final WebViewCore webViewCore=mWebView.getWebViewCore();  if (webViewCore == null) {    return false;  }  if (sendEvent) {    final AccessibilityEvent event=getPartialyPopulatedAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY);    event.setContentDescription(contentDescription);    mScheduledEvent=event;    mScheduledToken++;  }  if (axis == NAVIGATION_AXIS_DEFAULT_WEB_VIEW_BEHAVIOR) {    return false;  }  final SomeArgs args=SomeArgs.obtain();  args.argi1=direction;  args.argi2=axis;  args.argi3=mScheduledToken;  if (!sychronous) {    webViewCore.sendMessage(EventHub.MODIFY_SELECTION,args);    return true;  }  final boolean callbackResult;synchronized (mCallbackLock) {    mCallbackReceived=false;    webViewCore.sendMessage(EventHub.MODIFY_SELECTION,args);    try {      mCallbackLock.wait(MODIFY_SELECTION_TIMEOUT);    } catch (    InterruptedException e) {    }    callbackResult=mCallbackResult;  }  return (mCallbackReceived && callbackResult);}  }
class C{  public ImportWsadminlibScriptCommand(Configuration configuration,String resourcePath,String wsadminlibPath){  super(configuration,resourcePath);  this.wsadminlibPath=wsadminlibPath;}  }
class C{  public void addLogListener(LogListener l){  getLogListeners().add(l);}  }
class C{  public DoubleMatrix2D make(int rows,int columns){  if (this == sparse)   return new SparseDoubleMatrix2D(rows,columns);  if (this == rowCompressed)   return new RCDoubleMatrix2D(rows,columns); else   return new DenseDoubleMatrix2D(rows,columns);}  }
class C{  public boolean changesAllowed(){  return lifecycle.started();}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public TurnoutOperation loadOne(Element e){  try {    Class<?> myOpClass=Class.forName("jmri.SensorTurnoutOperation");    return super.loadOne(e,myOpClass.getConstructor(new Class[]{String.class,int.class,int.class}),NoFeedbackTurnoutOperation.getDefaultIntervalStatic(),NoFeedbackTurnoutOperation.getDefaultMaxTriesStatic());  } catch (  ClassNotFoundException e1) {    log.error("while creating NoFeedbackTurnoutOperation",e1);    return null;  }catch (  NoSuchMethodException e2) {    log.error("while creating NoFeedbackTurnoutOperation",e2);    return null;  }}  }
class C{  public void bind(){  bindViewImmediate(itemView,mViewModel.text()).subscribe(null);  clicks(mCardView).subscribe(null);  mViewModel.onOpenDetails().compose(bindView(itemView)).subscribe(null);}  }
class C{  public static String convertMethodSignature(String className,String methodName,String methodSig,String pkgName){  StringBuilder args=new StringBuilder();  SignatureConverter converter=new SignatureConverter(methodSig);  converter.skip();  args.append('(');  while (converter.getFirst() != ')') {    if (args.length() > 1) {      args.append(", ");    }    args.append(shorten(pkgName,converter.parseNext()));  }  converter.skip();  args.append(')');  StringBuilder result=new StringBuilder();  result.append(className);  result.append('.');  result.append(methodName);  result.append(args.toString());  return result.toString();}  }
class C{  private Tag findTag(final CTag tag,final Tag apiTag){  if (tag == apiTag.getNative().getObject()) {    return apiTag;  }  for (  final Tag child : apiTag.getChildren()) {    final Tag foundTag=findTag(tag,child);    if (foundTag != null) {      return foundTag;    }  }  return null;}  }
class C{  public LocalVarEntry(Label startLabel,Label endLabel,String name,String sig,int slot){  start=startLabel;  end=endLabel;  this.name=new AsciiCP(name);  this.sig=new AsciiCP(sig);  this.slot=slot;}  }
class C{  private void createConfigFile(String repository,File config){  try {    DocumentBuilderFactory docFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder docBuilder=docFactory.newDocumentBuilder();    Document doc=docBuilder.newDocument();    Element rootElement=doc.createElement("project");    doc.appendChild(rootElement);    Element actions=doc.createElement("actions");    rootElement.appendChild(actions);    Element description=doc.createElement("description");    rootElement.appendChild(description);    Element keepDependencies=doc.createElement("keepDependencies");    keepDependencies.appendChild(doc.createTextNode("false"));    rootElement.appendChild(keepDependencies);    Element properties=doc.createElement("properties");    rootElement.appendChild(properties);    Element scm=doc.createElement("scm");    if (repository.equals("")) {      scm.setAttribute("class","hudson.scm.NullSCM");      rootElement.appendChild(scm);    } else {      scm.setAttribute("class","hudson.plugins.git.GitSCM");      scm.setAttribute("plugin","git@2.4.4");      Element configVersion=doc.createElement("configVersion");      configVersion.appendChild(doc.createTextNode("2"));      scm.appendChild(configVersion);      Element userRemoteConfigs=doc.createElement("userRemoteConfigs");      Element userRemoteConfig=doc.createElement("hudson.plugins.git.UserRemoteConfig");      userRemoteConfigs.appendChild(userRemoteConfig);      scm.appendChild(userRemoteConfigs);      Element branches=doc.createElement("branches");      Element branchSpec=doc.createElement("hudson.plugins.git.BranchSpec");      Element name=doc.createElement("name");      name.appendChild(doc.createTextNode("*/master"));      branchSpec.appendChild(name);      branches.appendChild(branchSpec);      scm.appendChild(branches);      Element doGenerateSubmoduleConfigurations=doc.createElement("doGenerateSubmoduleConfigurations");      doGenerateSubmoduleConfigurations.appendChild(doc.createTextNode("false"));      scm.appendChild(doGenerateSubmoduleConfigurations);      Element browser=doc.createElement("browser");      browser.setAttribute("class","hudson.plugins.git.browser.GitLab");      Element url=doc.createElement("url");      url.appendChild(doc.createTextNode(repository));      browser.appendChild(url);      Element version=doc.createElement("version");      version.appendChild(doc.createTextNode("8.7"));      browser.appendChild(version);      scm.appendChild(browser);      Element submoduleCfg=doc.createElement("submoduleCfg");      submoduleCfg.setAttribute("class","list");      scm.appendChild(submoduleCfg);      Element extensions=doc.createElement("extensions");      scm.appendChild(extensions);    }    rootElement.appendChild(scm);    Element canRoam=doc.createElement("canRoam");    canRoam.appendChild(doc.createTextNode("true"));    rootElement.appendChild(canRoam);    Element disabled=doc.createElement("disabled");    disabled.appendChild(doc.createTextNode("false"));    rootElement.appendChild(disabled);    Element blockBuildWhenDownstreamBuilding=doc.createElement("blockBuildWhenDownstreamBuilding");    blockBuildWhenDownstreamBuilding.appendChild(doc.createTextNode("false"));    rootElement.appendChild(blockBuildWhenDownstreamBuilding);    Element blockBuildWhenUpstreamBuilding=doc.createElement("blockBuildWhenUpstreamBuilding");    blockBuildWhenUpstreamBuilding.appendChild(doc.createTextNode("false"));    rootElement.appendChild(blockBuildWhenUpstreamBuilding);    Element triggers=doc.createElement("triggers");    rootElement.appendChild(triggers);    Element concurrentBuild=doc.createElement("concurrentBuild");    concurrentBuild.appendChild(doc.createTextNode("false"));    rootElement.appendChild(concurrentBuild);    Element builders=doc.createElement("builders");    rootElement.appendChild(builders);    Element publishers=doc.createElement("publishers");    rootElement.appendChild(publishers);    Element buildWrappers=doc.createElement("buildWrappers");    rootElement.appendChild(buildWrappers);    TransformerFactory transformerFactory=TransformerFactory.newInstance();    Transformer transformer=transformerFactory.newTransformer();    DOMSource source=new DOMSource(doc);    StreamResult result=new StreamResult(config);    transformer.transform(source,result);  } catch (  Exception e) {    logger.error(repository + ", " + config,e);  }}  }
class C{  private static boolean CallBooleanMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallBooleanMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Boolean,false);  return Reflection.unwrapBoolean(returnObj);}  }
class C{  private static boolean tangentIsValid(ShapeRecord curSegment,int x,int y){  Point tangentPoint=getTangent(curSegment,true,x,y);  return (tangentPoint.x != 0 || tangentPoint.y != 0);}  }
class C{  public @Test final void testHashcode(){  Email e1=new Email("user","user@home.gov");  Email e2=new Email("user","user@home.gov");  Email d1=new Email("user2","user@home.gov");  Email d2=new Email("user","user@home.at");  Set<Email> all=new HashSet<>();  all.add(e1);  assertThat(all).hasSize(1);  assertThat(all.contains(e1)).isTrue();  all.add(e2);  assertThat(all).hasSize(1);  assertThat(all.contains(e1)).isTrue();  assertThat(all.contains(e2)).isTrue();  Email ret=all.iterator().next();  assertThat(ret == e1).isTrue();  assertThat(ret == e2).isFalse();  all.add(d1);  assertThat(all).hasSize(2);  assertThat(all.contains(d1)).isTrue();  all.add(d2);  assertThat(all).hasSize(3);  assertThat(all.contains(d2)).isTrue();}  }
class C{  public void loadTranslate(float x,float y,float z){  loadIdentity();  mMat[12]=x;  mMat[13]=y;  mMat[14]=z;}  }
class C{  public static boolean isTorrentSaveFolderPathValid(boolean checkExist,File folder){  if (checkExist) {    if (!(folder.exists() && folder.isDirectory() && folder.canWrite())) {      errorMessage=I18n.tr("Please enter a valid path for the Torrent Data Folder");      return false;    }  }  String lowerCaseFolderPath=folder.getAbsolutePath().toLowerCase();  if (OSUtils.isWindows() && lowerCaseFolderPath.contains(System.getenv("ProgramFiles").toLowerCase())) {    return false;  }  return true;}  }
class C{  private void remeasure(int width,int height){  MAX_UNEXPANDED_ALLDAY_HEIGHT=(int)(MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 4);  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.min(MAX_UNEXPANDED_ALLDAY_HEIGHT,height / 6);  MAX_UNEXPANDED_ALLDAY_HEIGHT=Math.max(MAX_UNEXPANDED_ALLDAY_HEIGHT,(int)MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT * 2);  mMaxUnexpandedAlldayEventCount=(int)(MAX_UNEXPANDED_ALLDAY_HEIGHT / MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);  for (int day=0; day < mNumDays; day++) {    mEarliestStartHour[day]=25;    mHasAllDayEvent[day]=false;  }  int maxAllDayEvents=mMaxAlldayEvents;  mMinCellHeight=Math.max((height - DAY_HEADER_HEIGHT) / 24,(int)MIN_EVENT_HEIGHT);  if (mCellHeight < mMinCellHeight) {    mCellHeight=mMinCellHeight;  }  mFirstCell=DAY_HEADER_HEIGHT;  int allDayHeight=0;  if (maxAllDayEvents > 0) {    int maxAllAllDayHeight=height - DAY_HEADER_HEIGHT - MIN_HOURS_HEIGHT;    if (maxAllDayEvents == 1) {      allDayHeight=SINGLE_ALLDAY_HEIGHT;    } else     if (maxAllDayEvents <= mMaxUnexpandedAlldayEventCount) {      allDayHeight=maxAllDayEvents * MAX_HEIGHT_OF_ONE_ALLDAY_EVENT;      if (allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {        allDayHeight=MAX_UNEXPANDED_ALLDAY_HEIGHT;      }    } else {      if (mAnimateDayHeight != 0) {        allDayHeight=Math.max(mAnimateDayHeight,MAX_UNEXPANDED_ALLDAY_HEIGHT);      } else {        allDayHeight=(int)(maxAllDayEvents * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);        if (!mShowAllAllDayEvents && allDayHeight > MAX_UNEXPANDED_ALLDAY_HEIGHT) {          allDayHeight=(int)(mMaxUnexpandedAlldayEventCount * MIN_UNEXPANDED_ALLDAY_EVENT_HEIGHT);        } else         if (allDayHeight > maxAllAllDayHeight) {          allDayHeight=maxAllAllDayHeight;        }      }    }    mFirstCell=DAY_HEADER_HEIGHT + allDayHeight + ALLDAY_TOP_MARGIN;  } else {    mSelectionAllday=false;  }  mAlldayHeight=allDayHeight;  mGridAreaHeight=height - mFirstCell;  int allDayIconWidth=mExpandAlldayDrawable.getIntrinsicWidth();  mExpandAllDayRect.left=Math.max((mHoursWidth - allDayIconWidth) / 2,EVENT_ALL_DAY_TEXT_LEFT_MARGIN);  mExpandAllDayRect.right=Math.min(mExpandAllDayRect.left + allDayIconWidth,mHoursWidth - EVENT_ALL_DAY_TEXT_RIGHT_MARGIN);  mExpandAllDayRect.bottom=mFirstCell - EXPAND_ALL_DAY_BOTTOM_MARGIN;  mExpandAllDayRect.top=mExpandAllDayRect.bottom - mExpandAlldayDrawable.getIntrinsicHeight();  mNumHours=mGridAreaHeight / (mCellHeight + HOUR_GAP);  mEventGeometry.setHourHeight(mCellHeight);  final long minimumDurationMillis=(long)(MIN_EVENT_HEIGHT * DateUtils.MINUTE_IN_MILLIS / (mCellHeight / 60.0f));  Event.computePositions(mEvents,minimumDurationMillis);  mMaxViewStartY=HOUR_GAP + 24 * (mCellHeight + HOUR_GAP) - mGridAreaHeight;  if (DEBUG) {    Log.e(TAG,"mViewStartY: " + mViewStartY);    Log.e(TAG,"mMaxViewStartY: " + mMaxViewStartY);  }  if (mViewStartY > mMaxViewStartY) {    mViewStartY=mMaxViewStartY;    computeFirstHour();  }  if (mFirstHour == -1) {    initFirstHour();    mFirstHourOffset=0;  }  if (mFirstHourOffset >= mCellHeight + HOUR_GAP) {    mFirstHourOffset=mCellHeight + HOUR_GAP - 1;  }  mViewStartY=mFirstHour * (mCellHeight + HOUR_GAP) - mFirstHourOffset;  final int eventAreaWidth=mNumDays * (mCellWidth + DAY_GAP);  if (mSelectedEvent != null && mLastPopupEventID != mSelectedEvent.id) {    mPopup.dismiss();  }  mPopup.setWidth(eventAreaWidth - 20);  mPopup.setHeight(WindowManager.LayoutParams.WRAP_CONTENT);}  }
class C{  public POS createPOSAnnotation(int aBegin,int aEnd,String aPosType){  Type type=posMappingProvider.getTagType(aPosType);  POS anno=(POS)jCas.getCas().createAnnotation(type,aBegin,aEnd);  anno.setPosValue(aPosType);  anno.setCoarseValue(anno.getClass().equals(POS.class) ? null : anno.getType().getShortName().intern());  return anno;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.660 -0500",hash_original_method="D5BB760FEF0605F784761761BB05E75A",hash_generated_method="4064B20AE2DE04130AA512E7DA78EE34") public boolean hasNameValue(String name){  return nameValueMap.containsKey(name.toLowerCase());}  }
class C{  public void store(byte value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public ServiceCompatibilityException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void expectFailure(MessageInfo messageInfo,String faultCode){  if (messageInfo == null) {    expectedApiCalls.add(new ApiCall(FAILURE,new Object[]{faultCode}));  } else {    expectedApiCalls.add(new ApiCall(FAILURE,new Object[]{messageInfo.getOrigin(),messageInfo.getClient(),messageInfo.getService(),faultCode}));  }}  }
class C{  public void test_chooseClientAlias(){  init(CLIENT);  assertNull(manager.chooseClientAlias(null,null,new Socket()));  assertNull(manager.chooseClientAlias(new String[0],null,new Socket()));  assertNull(manager.chooseClientAlias(new String[]{"BOGUS"},null,new Socket()));  String res=manager.chooseClientAlias(new String[]{TYPE_RSA},null,null);  assertNotNull(res);  assertKnownAlias(res);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void nextIteration() throws Exception {}  }
class C{  public static boolean isSameInstant(final Date date1,final Date date2){  if (date1 == null || date2 == null) {    throw new IllegalArgumentException("The date must not be null");  }  return date1.getTime() == date2.getTime();}  }
class C{  @SuppressWarnings("unchecked") public static synchronized OneHelperKDTree generate(IMultiPoint[] points){  if (points.length == 0) {    return null;  }  int maxD=points[0].dimensionality();  OneHelperKDTree tree=new OneHelperKDTree(maxD);  comparators=new Comparator[maxD + 1];  for (int i=1; i <= maxD; i++) {    comparators[i]=new DimensionalComparator(i);  }  tree.setRoot(generate(1,maxD,points,0,points.length - 1));  return tree;}  }
class C{  public static CreateWalletResponse create(String password,String apiCode) throws IOException, APIException {  return create(password,apiCode,null,null,null);}  }
class C{  public String lookupNamespaceURI(String specifiedPrefix){  short type=this.getNodeType();switch (type) {case Node.ELEMENT_NODE:{      String namespace=this.getNamespaceURI();      String prefix=this.getPrefix();      if (namespace != null) {        if (specifiedPrefix == null && prefix == specifiedPrefix) {          return namespace;        } else         if (prefix != null && prefix.equals(specifiedPrefix)) {          return namespace;        }      }      if (this.hasAttributes()) {        NamedNodeMap map=this.getAttributes();        int length=map.getLength();        for (int i=0; i < length; i++) {          Node attr=map.item(i);          String attrPrefix=attr.getPrefix();          String value=attr.getNodeValue();          namespace=attr.getNamespaceURI();          if (namespace != null && namespace.equals("http://www.w3.org/2000/xmlns/")) {            if (specifiedPrefix == null && attr.getNodeName().equals("xmlns")) {              return value;            } else             if (attrPrefix != null && attrPrefix.equals("xmlns") && attr.getLocalName().equals(specifiedPrefix)) {              return value;            }          }        }      }      return null;    }case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:  return null;case Node.ATTRIBUTE_NODE:{  if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {    return getOwnerElement().lookupNamespaceURI(specifiedPrefix);  }  return null;}default :{return null;}}}  }
class C{  public static List<String> resourcesArscParser(InputStream arscStream) throws IOException {  final byte[] asa=new byte[arscStream.available()];  arscStream.read(asa);  int pos=0;  final Charset charset=StandardCharsets.UTF_8;  final List<String> s=new ArrayList<>();  parseloop:   while (pos < asa.length) {    while (pos < asa.length && asa[pos] != 0)     pos++;    if (pos + 2 >= asa.length)     break parseloop;    int charcount=asa[++pos];    if (charcount == 0)     continue parseloop;    int bytecount=asa[++pos];    if (bytecount == 0)     continue parseloop;    pos++;    if (bytecount < charcount)     continue parseloop;    if (pos + bytecount + 1 > asa.length)     break parseloop;    if (asa[pos + bytecount] != 0) {      pos++;      continue parseloop;    }    for (int i=pos; i < pos + bytecount; i++)     if (asa[i] == 0) {      pos++;      continue parseloop;    }    String t=new String(asa,pos,bytecount,charset);    if (t.length() == charcount)     s.add(t);    pos+=bytecount;  }  return s;}  }
class C{  @Bean public LanguageBundle languageBundle(){  return LanguageBundleSelector.forLocale(Locale.getDefault());}  }
class C{  public boolean hasChanged(){  if (getValue() != null)   if (m_oldValue != null)   return !m_oldValue.equals(getValue()); else   return true; else   if (m_oldValue != null)   return true; else   return false;}  }
class C{  public boolean containsDs(String dsName) throws IOException {  for (  Datasource datasource : datasources) {    if (datasource.getName().equals(dsName)) {      return true;    }  }  return false;}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public BitcoinSerializer(NetworkParameters params,boolean parseRetain){  this.params=params;  this.parseRetain=parseRetain;}  }
class C{  public DatePicker(Composite parent,int style){  this(parent,style,Calendar.getInstance());}  }
class C{  public boolean isConditional(){  return typeString.contains(SUFFIX_CONDITIONAL);}  }
class C{  @HLEFunction(nid=0x9DF81198,version=150) public int sceNetAdhocPtpAccept(@CheckArgument("checkPtpId") int id,@CanBeNull TPointer peerMacAddr,@CanBeNull TPointer16 peerPortAddr,int timeout,int nonblock){  return ptpObjects.get(id).accept(peerMacAddr.getAddress(),peerPortAddr.getAddress(),timeout,nonblock);}  }
class C{  public static int[] sortIndices(double[] array){  MatrixUtils mUtils=new MatrixUtils();  DoubleWithIndexForSort[] objectArray=new DoubleWithIndexForSort[array.length];  for (int i=0; i < array.length; i++) {    objectArray[i]=mUtils.new DoubleWithIndexForSort(array[i],i);  }  Arrays.sort(objectArray,mUtils.new DoubleWithIndexForSortComparator());  int[] arrayOfOriginalIndices=new int[array.length];  for (int i=0; i < array.length; i++) {    arrayOfOriginalIndices[i]=objectArray[i].originalIndex;  }  return arrayOfOriginalIndices;}  }
class C{  @Override protected void onStop(){  super.onStop();  mDownloadTask.cancel(true);  mLoadingProgressBar.setVisibility(View.INVISIBLE);}  }
class C{  private Region createRegion(String name,Compressor compressor,boolean offHeap){  return getCache().<String,String>createRegionFactory().addCacheListener(CACHE_LISTENER).setCacheWriter(CACHE_WRITER).setDataPolicy(DataPolicy.REPLICATE).setCloningEnabled(true).setCompressor(compressor).setOffHeap(offHeap).create(name);}  }
class C{  public MandatoryUdaMissingException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void ensureOpen() throws IOException {  if (buf == null)   throw new IOException("Stream closed");}  }
class C{  public void processNode(ObjectReference object){  VM.assertions.fail("processNode not implemented.");}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void persistUda(VOUdaDefinition udaDefitionDetails,boolean isSave) throws SaaSApplicationException {  List<VOUdaDefinition> toSave=new ArrayList<VOUdaDefinition>();  List<VOUdaDefinition> toDelete=new ArrayList<VOUdaDefinition>();  if (isSave) {    toSave.add(udaDefitionDetails);  } else {    toDelete.add(udaDefitionDetails);  }  as.saveUdaDefinitions(toSave,toDelete);}  }
class C{  private static CharBuffer grow(CharBuffer buf){  char[] copy=Arrays.copyOf(buf.array(),buf.capacity() * 2);  CharBuffer bigger=CharBuffer.wrap(copy);  bigger.position(buf.position());  bigger.limit(buf.limit());  return bigger;}  }
class C{  private static void addBrewingRecipes(){  addStandardConversionRecipes(ModPotionTypes.TEST,ModPotionTypes.LONG_TEST,ModPotionTypes.STRONG_TEST,ModItems.ARROW);}  }
class C{  @Override public void updateUI(){  super.updateUI();  TreeCellRenderer tcr=getCellRenderer();  if (tcr instanceof DefaultTreeCellRenderer) {    DefaultTreeCellRenderer dtcr=((DefaultTreeCellRenderer)tcr);    dtcr.setTextSelectionColor(UIManager.getColor("Table.selectionForeground"));    dtcr.setBackgroundSelectionColor(UIManager.getColor("Table.selectionBackground"));  }}  }
class C{  public String accessString(){  StringBuffer result;  if (accessString != null)   return accessString;  result=new StringBuffer();  if ((access_flags & 0x0001) != 0)   result.append("public ");  if ((access_flags & 0x0002) != 0)   result.append("private ");  if ((access_flags & 0x0004) != 0)   result.append("protected ");  if ((access_flags & 0x0008) != 0)   result.append("static ");  if ((access_flags & 0x0010) != 0)   result.append("final ");  if ((access_flags & 0x0020) != 0)   result.append("synchronized ");  if ((access_flags & 0x0100) != 0)   result.append("native ");  if ((access_flags & 0x0400) != 0)   result.append("abstract ");  accessString=result.toString();  return accessString;}  }
class C{  public void each(int offset,int maxRows,Closure closure) throws SQLException {  eachRow(getSql(),getParameters(),offset,maxRows,closure);}  }
class C{  public PrintWriterPrinter(PrintWriter pw){  mPW=pw;}  }
class C{  private void filter(int AD_UserQuery_ID){  MUserQuery userQuery=null;  if (AD_UserQuery_ID > 0) {    userQuery=new MUserQuery(Env.getCtx(),AD_UserQuery_ID,null);    m_query=userQuery.getQuery(m_AD_Table_ID,m_targetWindowNo,m_findFields);    if (m_gt != null && m_gc != null) {      if (m_query != null) {        m_gt.setQuery(m_query);        m_gc.query(false,m_onlycurrentdays,0);      }      m_appsaction.setPressed(m_gt.isQueryActive());    }    if (m_reportEngine != null && m_viewer != null) {      m_reportEngine.setQuery(m_query);      m_viewer.revalidate();    }  }}  }
class C{  public String innerName(int nth){  int i=innerNameIndex(nth);  if (i == 0)   return null; else   return constPool.getUtf8Info(i);}  }
class C{  public static void step2a(SMState bstate,byte[] input,boolean received_question) throws SMException {  bstate.receivedQuestion=received_question;  bstate.smProgState=PROG_CHEATED;  BigInteger[] msg1=unserialize(input);  if (checkGroupElem(msg1[0]) || checkExpon(msg1[2]) || checkGroupElem(msg1[3])|| checkExpon(msg1[5])) {    throw new SMException("Invalid parameter");  }  bstate.g3o=msg1[3];  if (checkKnowLog(msg1[1],msg1[2],bstate.g1,msg1[0],1) != 0 || checkKnowLog(msg1[4],msg1[5],bstate.g1,msg1[3],2) != 0) {    throw new SMException("Proof checking failed");  }  bstate.x2=randomExponent();  bstate.x3=randomExponent();  bstate.g2=msg1[0].modPow(bstate.x2,MODULUS_S);  bstate.g3=msg1[3].modPow(bstate.x3,MODULUS_S);  bstate.smProgState=PROG_OK;}  }
class C{  private void _notrace_apply(ChunkString chunkstr){  for (  RegexpChunkRule rule : this._rules) {    rule.apply(chunkstr);  }}  }
class C{  public JSONObject put(String name,JSONValue value){  if (name == null) {    throw new NullPointerException("name is null");  }  if (value == null) {    throw new NullPointerException("value is null");  }  table.add(name,names.size());  names.add(name);  values.add(value);  return this;}  }
class C{  protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){  long min=0;  long pref=0;  long max=0;  multiRowCells=false;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    if (getRowsOccupied(v) > 1) {      multiRowCells=true;      max=Math.max((int)v.getMaximumSpan(axis),max);    } else {      min=Math.max((int)v.getMinimumSpan(axis),min);      pref=Math.max((int)v.getPreferredSpan(axis),pref);      max=Math.max((int)v.getMaximumSpan(axis),max);    }  }  if (r == null) {    r=new SizeRequirements();    r.alignment=0.5f;  }  r.preferred=(int)pref;  r.minimum=(int)min;  r.maximum=(int)max;  return r;}  }
class C{  public Todo_Updater idBetween(long idA,long idB){  return whereBetween(schema.id,idA,idB);}  }
class C{  public final double numCorrect(int index){  return m_perClassPerBag[index][maxClass(index)];}  }
class C{  public static String tranDate2DateMinutesStr(Date date){  try {    SimpleDateFormat formatter2=new SimpleDateFormat("yyyy-MM-dd HH:mm",Locale.getDefault());    formatter2.setTimeZone(timeZone);    return formatter2.format(date);  } catch (  Throwable e) {    Log.e(TAG,e.toString());    return "2015-10-10";  }}  }
class C{  protected void displaySaveUploadErrorDialogServerNotUpToDate(String serverName){  SwingTools.showVerySimpleErrorMessage("configurable_controller_upload_error_server_not_up_to_date",serverName);}  }
class C{  public OutputStream createOutOutputStream(OutputStream os,String linkId){  return new InstrumentedOutputStream(collector(),Direction.Out,os,linkId);}  }
class C{  public void changeProgram(IFilter newFilter){  mFilter.releaseProgram();  mFilter=newFilter;}  }
class C{  public void testBug3920() throws Exception {  String jndiName="/testBug3920";  String databaseName=System.getProperty(DS_DATABASE_PROP_NAME);  String userName=System.getProperty(DS_USER_PROP_NAME);  String password=System.getProperty(DS_PASSWORD_PROP_NAME);  String port=System.getProperty(DS_PORT_PROP_NAME);  String serverName=System.getProperty(DS_HOST_PROP_NAME);  if ((databaseName != null) || (serverName != null) || (userName != null)|| (password != null)|| (port != null)) {    MysqlConnectionPoolDataSource ds=new MysqlConnectionPoolDataSource();    if (databaseName != null) {      ds.setDatabaseName(databaseName);    }    if (userName != null) {      ds.setUser(userName);    }    if (password != null) {      ds.setPassword(password);    }    if (port != null) {      ds.setPortNumber(Integer.parseInt(port));    }    if (serverName != null) {      ds.setServerName(serverName);    }    bindDataSource(jndiName,ds);    ConnectionPoolDataSource boundDs=null;    try {      boundDs=(ConnectionPoolDataSource)lookupDatasourceInJNDI(jndiName);      assertTrue("Datasource not bound",boundDs != null);      Connection dsCon=null;      Statement dsStmt=null;      try {        dsCon=boundDs.getPooledConnection().getConnection();        dsStmt=dsCon.createStatement();        dsStmt.executeUpdate("DROP TABLE IF EXISTS testBug3920");        dsStmt.executeUpdate("CREATE TABLE testBug3920 (field1 varchar(32))");        assertTrue("Connection can not be obtained from data source",dsCon != null);      }  finally {        if (dsStmt != null) {          dsStmt.executeUpdate("DROP TABLE IF EXISTS testBug3920");          dsStmt.close();        }        if (dsCon != null) {          dsCon.close();        }      }    }  finally {      if (boundDs != null) {        this.ctx.unbind(jndiName);      }    }  }}  }
class C{  private void loadStringSettings(){  for (  String settingName : stringSettings.keySet()) {    StringSetting setting=stringSettings.get(settingName);    String value=settings.getString(settingName);    setting.setSettingValue(value);  }}  }
class C{  public StudioSorter(boolean ascending,boolean ignoreThe){  super(ascending);  this.ignoreThe=ignoreThe;}  }
class C{  public URI toURI() throws URISyntaxException {  return new URI(toExternalForm());}  }
class C{  private void addExternalMethodReferences(ClassRef[] sparseRefs){  for (int i=0; i < mMethodIds.length; i++) {    if (!mTypeIds[mMethodIds[i].classIdx].internal) {      MethodIdItem methodId=mMethodIds[i];      MethodRef newMethodRef=new MethodRef(classNameFromTypeIndex(methodId.classIdx),argArrayFromProtoIndex(methodId.protoIdx),returnTypeFromProtoIndex(methodId.protoIdx),mStrings[methodId.nameIdx]);      sparseRefs[mMethodIds[i].classIdx].addMethod(newMethodRef);    }  }}  }
class C{  private double gaussianMaximization(SemIm semIm){  for (int i=0; i < this.numObserved; i++) {    for (int j=0; j < this.numObserved + this.numLatent; j++) {      this.betas[i][j]=0.;    }  }  for (int i=0; i < this.numLatent; i++) {    for (int j=0; j < this.numLatent; j++) {      this.betasLat[i][j]=0.;    }  }  for (int i=0; i < this.numObserved; i++) {    for (int j=0; j < this.numObserved; j++) {      this.covErrors[i][j]=0.;    }  }  for (Iterator it=semIm.getFreeParameters().iterator(); it.hasNext(); ) {    Parameter nextP=(Parameter)it.next();    if (nextP.getType() == ParamType.COEF) {      Node node1=nextP.getNodeA();      Node node2=nextP.getNodeB();      if (node1.getNodeType() == NodeType.LATENT && node2.getNodeType() == NodeType.LATENT) {        continue;      }      Node latent=null, observed=null;      if (node1.getNodeType() == NodeType.LATENT) {        latent=node1;        observed=node2;      } else       if (node2.getNodeType() == NodeType.LATENT) {        latent=node2;        observed=node1;      }      if (latent != null) {        int index1=(Integer)this.latentNames.get(latent.getName());        int index2=(Integer)this.observableNames.get(observed.getName());        this.betas[index2][index1]=semIm.getParamValue(nextP);      } else {        int index1=(Integer)this.observableNames.get(node1.getName());        int index2=(Integer)this.observableNames.get(node2.getName());        if (semIm.getSemPm().getGraph().isParentOf(node1,node2)) {          this.betas[index2][this.numLatent + index1]=semIm.getParamValue(nextP);        } else {          this.betas[index1][this.numLatent + index2]=semIm.getParamValue(nextP);        }      }    } else     if (nextP.getType() == ParamType.COVAR) {      Node exo1=nextP.getNodeA();      Node exo2=nextP.getNodeB();      exo1=semIm.getSemPm().getGraph().getVarNode(exo1);      exo2=semIm.getSemPm().getGraph().getVarNode(exo2);      int index1=(Integer)this.observableNames.get(exo1.getName());      int index2=(Integer)this.observableNames.get(exo2.getName());      this.covErrors[index1][index2]=this.covErrors[index2][index1]=semIm.getParamValue(nextP);    } else     if (nextP.getType() == ParamType.VAR) {      Node exo=nextP.getNodeA();      if (exo.getNodeType() == NodeType.LATENT) {        continue;      }      exo=semIm.getSemPm().getGraph().getVarNode(exo);      if (exo.getNodeType() == NodeType.MEASURED) {        int index=(Integer)this.observableNames.get(exo.getName());        this.covErrors[index][index]=semIm.getParamValue(nextP);      }    }  }  this.varErrorLatent[0]=this.Czz[0][0];  for (int i=1; i < this.numLatent; i++) {    for (int j=0; j < this.parentsLat[i].length; j++) {      this.parentsChildLatCov[i][j]=this.Czz[i][this.parentsLat[i][j]];      for (int k=j; k < this.parentsLat[i].length; k++) {        this.parentsLatCov[i][j][k]=this.Czz[this.parentsLat[i][j]][this.parentsLat[i][k]];        this.parentsLatCov[i][k][j]=this.parentsLatCov[i][j][k];      }    }    double betaL[]=MatrixUtils.product(MatrixUtils.inverse(this.parentsLatCov[i]),this.parentsChildLatCov[i]);    this.varErrorLatent[i]=this.Czz[i][i] - MatrixUtils.innerProduct(this.parentsChildLatCov[i],betaL);    for (int j=0; j < this.parentsLat[i].length; j++) {      this.betasLat[i][this.parentsLat[i][j]]=betaL[j];    }  }  for (int i=0; i < this.numObserved; i++) {    for (int j=0; j < this.parents[i].length; j++) {      if (this.parentsL[i][j]) {        this.parentsChildCov[i][j]=this.Cyz[i][this.parents[i][j]];      } else {        this.parentsChildCov[i][j]=this.Cyy[i][this.parents[i][j]];      }      for (int k=j; k < this.parents[i].length; k++) {        if (this.parentsL[i][j] && this.parentsL[i][k]) {          this.parentsCov[i][j][k]=this.Czz[this.parents[i][j]][this.parents[i][k]];        } else         if (!this.parentsL[i][j] && this.parentsL[i][k]) {          this.parentsCov[i][j][k]=this.Cyz[this.parents[i][j]][this.parents[i][k]];        } else         if (this.parentsL[i][j] && !this.parentsL[i][k]) {          this.parentsCov[i][j][k]=this.Cyz[this.parents[i][k]][this.parents[i][j]];        } else {          this.parentsCov[i][j][k]=this.Cyy[this.parents[i][j]][this.parents[i][k]];        }        this.parentsCov[i][k][j]=this.parentsCov[i][j][k];      }    }  }  double change;  int iter=0;  do {    for (int i=0; i < this.covErrors.length; i++) {      for (int j=0; j < this.covErrors.length; j++) {        this.oldCovErrors[i][j]=this.covErrors[i][j];      }    }    for (int i=0; i < this.numObserved; i++) {      for (int j=0; j < this.betas[i].length; j++) {        this.oldBetas[i][j]=this.betas[i][j];      }    }    for (int i=0; i < this.numObserved; i++) {      for (int ii=0; ii < this.omega.length; ii++) {        for (int j=0; j < this.omega.length; j++) {          this.omega[ii][j]=0.;        }      }      for (int ii=0; ii < this.numLatent; ii++) {        this.omegaI[ii]=0.;        this.omega[ii][ii]=this.varErrorLatent[ii];      }      for (int ii=0; ii < this.numObserved; ii++) {        if (ii > i) {          this.omegaI[this.numLatent + ii - 1]=this.covErrors[i][ii];          this.omega[this.numLatent + ii - 1][this.numLatent + ii - 1]=this.covErrors[ii][ii];        } else         if (ii < i) {          this.omegaI[this.numLatent + ii]=this.covErrors[i][ii];          this.omega[this.numLatent + ii][this.numLatent + ii]=this.covErrors[ii][ii];        }      }      for (int ii=0; ii < this.numObserved; ii++) {        int index_ii;        if (ii > i) {          index_ii=this.numLatent + ii - 1;        } else         if (ii < i) {          index_ii=this.numLatent + ii;        } else {          continue;        }        for (int j=0; j < this.nSpouses[ii]; j++) {          if (this.spouses[ii][j] > i) {            this.omega[index_ii][this.numLatent + this.spouses[ii][j] - 1]=this.covErrors[ii][this.spouses[ii][j]];          } else           if (this.spouses[ii][j] < i) {            this.omega[index_ii][this.numLatent + this.spouses[ii][j]]=this.covErrors[ii][this.spouses[ii][j]];          }        }      }      for (int ii=0; ii < this.numObserved; ii++) {        if (ii == i) {          continue;        }        for (int j=ii; j < this.numObserved; j++) {          if (j == i) {            continue;          }          this.sampleCovErrors[ii][j]=this.Cyy[ii][j];          for (int p=0; p < this.parents[ii].length; p++) {            if (this.parentsL[ii][p]) {              this.sampleCovErrors[ii][j]-=this.betas[ii][this.parents[ii][p]] * this.Cyz[j][this.parents[ii][p]];            } else {              this.sampleCovErrors[ii][j]-=this.betas[ii][this.numLatent + this.parents[ii][p]] * this.Cyy[j][this.parents[ii][p]];            }          }          for (int p=0; p < this.parents[j].length; p++) {            if (this.parentsL[j][p]) {              this.sampleCovErrors[ii][j]-=this.betas[j][this.parents[j][p]] * this.Cyz[ii][this.parents[j][p]];            } else {              this.sampleCovErrors[ii][j]-=this.betas[j][this.numLatent + this.parents[j][p]] * this.Cyy[ii][this.parents[j][p]];            }          }          for (int p1=0; p1 < this.parents[ii].length; p1++) {            for (int p2=0; p2 < this.parents[j].length; p2++) {              if (this.parentsL[ii][p1] && this.parentsL[j][p2]) {                this.sampleCovErrors[ii][j]+=this.betas[ii][this.parents[ii][p1]] * this.betas[j][this.parents[j][p2]] * this.Czz[this.parents[ii][p1]][this.parents[j][p2]];              } else               if (this.parentsL[ii][p1] && !this.parentsL[j][p2]) {                this.sampleCovErrors[ii][j]+=this.betas[ii][this.parents[ii][p1]] * this.betas[j][this.numLatent + this.parents[j][p2]] * this.Cyz[this.parents[j][p2]][this.parents[ii][p1]];              } else               if (!this.parentsL[ii][p1] && this.parentsL[j][p2]) {                this.sampleCovErrors[ii][j]+=this.betas[ii][this.numLatent + this.parents[ii][p1]] * this.betas[j][this.parents[j][p2]] * this.Cyz[this.parents[ii][p1]][this.parents[j][p2]];              } else {                this.sampleCovErrors[ii][j]+=this.betas[ii][this.numLatent + this.parents[ii][p1]] * this.betas[j][this.numLatent + this.parents[j][p2]] * this.Cyy[this.parents[ii][p1]][this.parents[j][p2]];              }            }          }          this.sampleCovErrors[j][ii]=this.sampleCovErrors[ii][j];        }      }      for (int ii=0; ii < this.parents[i].length; ii++) {        if (this.parentsL[i][ii]) {          this.parentsResidualsCovar[i][ii][0]=this.Czz[this.parents[i][ii]][0];        } else {          this.parentsResidualsCovar[i][ii][0]=this.Cyz[this.parents[i][ii]][0];        }        for (int j=1; j < this.numLatent; j++) {          if (this.parentsL[i][ii]) {            this.parentsResidualsCovar[i][ii][j]=this.Czz[this.parents[i][ii]][j];            for (int p=0; p < this.parentsLat[j].length; p++) {              this.parentsResidualsCovar[i][ii][j]-=this.betasLat[j][this.parentsLat[j][p]] * this.Czz[this.parents[i][ii]][this.parentsLat[j][p]];            }          } else {            this.parentsResidualsCovar[i][ii][j]=this.Cyz[this.parents[i][ii]][j];            for (int p=0; p < this.parentsLat[j].length; p++) {              this.parentsResidualsCovar[i][ii][j]-=this.betasLat[j][this.parentsLat[j][p]] * this.Cyz[this.parents[i][ii]][this.parentsLat[j][p]];            }          }        }        for (int j=0; j < this.numObserved; j++) {          int index_j;          if (j < i) {            index_j=this.numLatent + j;          } else           if (j > i) {            index_j=this.numLatent + j - 1;          } else {            continue;          }          if (this.parentsL[i][ii]) {            this.parentsResidualsCovar[i][ii][index_j]=this.Cyz[j][this.parents[i][ii]];            for (int p=0; p < this.parents[j].length; p++) {              if (this.parentsL[j][p]) {                this.parentsResidualsCovar[i][ii][index_j]-=this.betas[j][this.parents[j][p]] * this.Czz[this.parents[i][ii]][this.parents[j][p]];              } else {                this.parentsResidualsCovar[i][ii][index_j]-=this.betas[j][this.numLatent + this.parents[j][p]] * this.Cyz[this.parents[j][p]][this.parents[i][ii]];              }            }          } else {            this.parentsResidualsCovar[i][ii][index_j]=this.Cyy[j][this.parents[i][ii]];            for (int p=0; p < this.parents[j].length; p++) {              if (this.parentsL[j][p]) {                this.parentsResidualsCovar[i][ii][index_j]-=this.betas[j][this.parents[j][p]] * this.Cyz[this.parents[i][ii]][this.parents[j][p]];              } else {                this.parentsResidualsCovar[i][ii][index_j]-=this.betas[j][this.numLatent + this.parents[j][p]] * this.Cyy[this.parents[j][p]][this.parents[i][ii]];              }            }          }        }      }      this.iResidualsCovar[0]=this.Cyz[i][0];      for (int j=1; j < this.numLatent; j++) {        this.iResidualsCovar[j]=this.Cyz[i][j];        for (int p=0; p < this.parentsLat[j].length; p++) {          this.iResidualsCovar[j]-=this.betasLat[j][this.parentsLat[j][p]] * this.Cyz[i][this.parentsLat[j][p]];        }      }      for (int j=0; j < this.numObserved; j++) {        int index_j;        if (j < i) {          index_j=this.numLatent + j;        } else         if (j > i) {          index_j=this.numLatent + j - 1;        } else {          continue;        }        this.iResidualsCovar[index_j]=this.Cyy[i][j];        for (int p=0; p < this.parents[j].length; p++) {          if (this.parentsL[j][p]) {            this.iResidualsCovar[index_j]-=this.betas[j][this.parents[j][p]] * this.Cyz[i][this.parents[j][p]];          } else {            this.iResidualsCovar[index_j]-=this.betas[j][this.numLatent + this.parents[j][p]] * this.Cyy[i][this.parents[j][p]];          }        }      }      double inverseOmega[][]=MatrixUtils.inverse(this.omega);      for (int ii=0; ii < this.nSpouses[i]; ii++) {        int sp_index;        if (this.spouses[i][ii] > i) {          sp_index=this.numLatent + this.spouses[i][ii] - 1;        } else {          sp_index=this.numLatent + this.spouses[i][ii];        }        for (int j=0; j < this.numLatent + this.numObserved - 1; j++) {          this.selectedInverseOmega[i][ii][j]=inverseOmega[sp_index][j];        }      }      for (int ii=0; ii < this.nSpouses[i]; ii++) {        for (int j=0; j < this.numLatent; j++) {          this.auxInverseOmega[i][ii][j]=this.selectedInverseOmega[i][ii][j] * this.varErrorLatent[j];        }        for (int j=0; j < this.numObserved; j++) {          int index_j;          if (j > i) {            index_j=this.numLatent + j - 1;          } else           if (j < i) {            index_j=this.numLatent + j;          } else {            continue;          }          this.auxInverseOmega[i][ii][index_j]=0;          for (int k=0; k < this.numObserved; k++) {            int index_k;            if (k > i) {              index_k=this.numLatent + k - 1;            } else             if (k < i) {              index_k=this.numLatent + k;            } else {              continue;            }            this.auxInverseOmega[i][ii][index_j]+=this.selectedInverseOmega[i][ii][index_k] * this.sampleCovErrors[k][j];          }        }      }      for (int ii=0; ii < this.parents[i].length; ii++) {        for (int j=ii; j < this.parents[i].length; j++) {          this.pseudoParentsCov[i][ii][j]=this.pseudoParentsCov[i][j][ii]=this.parentsCov[i][ii][j];        }      }      for (int ii=0; ii < this.parents[i].length; ii++) {        for (int j=0; j < this.nSpouses[i]; j++) {          this.pseudoParentsCov[i][ii][this.parents[i].length + j]=0.;          for (int k=0; k < this.numLatent + this.numObserved - 1; k++) {            this.pseudoParentsCov[i][ii][this.parents[i].length + j]+=this.parentsResidualsCovar[i][ii][k] * this.selectedInverseOmega[i][j][k];          }          this.pseudoParentsCov[i][this.parents[i].length + j][ii]=this.pseudoParentsCov[i][ii][this.parents[i].length + j];        }      }      for (int ii=0; ii < this.nSpouses[i]; ii++) {        for (int j=ii; j < this.nSpouses[i]; j++) {          this.pseudoParentsCov[i][this.parents[i].length + ii][this.parents[i].length + j]=0;          for (int k=0; k < this.numLatent + this.numObserved - 1; k++) {            this.pseudoParentsCov[i][this.parents[i].length + ii][this.parents[i].length + j]+=this.auxInverseOmega[i][ii][k] * this.selectedInverseOmega[i][j][k];          }          this.pseudoParentsCov[i][this.parents[i].length + j][this.parents[i].length + ii]=this.pseudoParentsCov[i][this.parents[i].length + ii][this.parents[i].length + j];          if (this.pseudoParentsCov[i][this.parents[i].length + j][this.parents[i].length + ii] == 0.) {            System.out.println("Zero here... Iter = " + iter);            iter=1000;            break;          }        }      }      for (int ii=0; ii < this.parents[i].length; ii++) {        this.pseudoParentsChildCov[i][ii]=this.parentsChildCov[i][ii];      }      for (int j=0; j < this.nSpouses[i]; j++) {        this.pseudoParentsChildCov[i][this.parents[i].length + j]=0;        for (int k=0; k < this.numLatent + this.numObserved - 1; k++) {          this.pseudoParentsChildCov[i][this.parents[i].length + j]+=selectedInverseOmega[i][j][k] * this.iResidualsCovar[k];        }      }      double params[]=MatrixUtils.product(MatrixUtils.inverse(this.pseudoParentsCov[i]),this.pseudoParentsChildCov[i]);      for (int j=0; j < this.parents[i].length; j++) {        if (this.parentsL[i][j]) {          this.betas[i][this.parents[i][j]]=params[j];        } else {          this.betas[i][this.numLatent + this.parents[i][j]]=params[j];        }      }      for (int j=0; j < this.nSpouses[i]; j++) {        this.covErrors[i][this.spouses[i][j]]=this.covErrors[this.spouses[i][j]][i]=params[this.parents[i].length + j];        if (this.spouses[i][j] > i) {          this.omegaI[this.numLatent + this.spouses[i][j] - 1]=params[this.parents[i].length + j];        } else {          this.omegaI[this.numLatent + this.spouses[i][j]]=params[this.parents[i].length + j];        }      }      double conditionalVar=this.Cyy[i][i] - MatrixUtils.innerProduct(this.pseudoParentsChildCov[i],params);      this.covErrors[i][i]=conditionalVar + MatrixUtils.innerProduct(MatrixUtils.product(this.omegaI,inverseOmega),this.omegaI);    }    change=0.;    for (int i=0; i < this.covErrors.length; i++) {      for (int j=i; j < this.covErrors.length; j++) {        change+=Math.abs(this.oldCovErrors[i][j] - this.covErrors[i][j]);      }    }    for (int i=0; i < this.numObserved; i++) {      for (int j=0; j < this.betas[i].length; j++) {        change+=Math.abs(oldBetas[i][j] - this.betas[i][j]);      }    }    iter++;  } while (iter < 200 && change > 0.01);  try {    for (int i=0; i < this.numObserved; i++) {      Node node=semIm.getSemPm().getGraph().getNode(this.measuredNodes.get(i).toString());      semIm.getSemPm().getGraph().setShowErrorTerms(true);      Node nodeErrorTerm=semIm.getSemPm().getGraph().getExogenous(node);      for (int j=0; j < this.parents[i].length; j++) {        Node parent;        if (this.parentsL[i][j]) {          parent=semIm.getSemPm().getGraph().getNode(this.latentNodes.get(this.parents[i][j]).toString());        } else {          parent=semIm.getSemPm().getGraph().getNode(this.measuredNodes.get(this.parents[i][j]).toString());        }        if (this.parentsL[i][j]) {          semIm.setParamValue(parent,node,this.betas[i][this.parents[i][j]]);        } else {          semIm.setParamValue(parent,node,this.betas[i][this.numLatent + this.parents[i][j]]);        }      }      for (int j=0; j < this.nSpouses[i]; j++) {        if (this.spouses[i][j] > i) {          Node spouse=semIm.getSemPm().getGraph().getNode(this.measuredNodes.get(this.spouses[i][j]).toString());          Node spouseErrorTerm=semIm.getSemPm().getGraph().getExogenous(spouse);          semIm.setParamValue(nodeErrorTerm,spouseErrorTerm,this.covErrors[i][this.spouses[i][j]]);        }      }    }    for (int i=0; i < this.numLatent; i++) {      Node node=semIm.getSemPm().getGraph().getNode(this.latentNodes.get(i).toString());      if (semIm.getSemPm().getGraph().getParents(node).size() == 0) {        semIm.setParamValue(node,node,this.varErrorLatent[i]);      } else {        for (Iterator it=semIm.getSemPm().getGraph().getParents(node).iterator(); it.hasNext(); ) {          Node nextParent=(Node)it.next();          if (nextParent.getNodeType() == NodeType.ERROR) {            semIm.setParamValue(nextParent,nextParent,this.varErrorLatent[i]);            break;          }        }        for (int j=0; j < this.parentsLat[i].length; j++) {          Node parent=semIm.getSemPm().getGraph().getNode(this.latentNodes.get(this.parentsLat[i][j]).toString());          semIm.setParamValue(parent,node,this.betasLat[i][parentsLat[i][j]]);        }      }    }  } catch (  java.lang.IllegalArgumentException e) {    System.out.println("** Warning: " + e.toString());    return -Double.MAX_VALUE;  }  return -semIm.getTruncLL() - 0.5 * semIm.getNumFreeParams() * Math.log(this.covarianceMatrix.getSampleSize());}  }
class C{  private void visitAncestors(NodeItem n){  if (n == m_root)   return;  visitFocus((NodeItem)n.getParent(),n);}  }
class C{  public static int createTypeMember(final Connection connection,final int containingTypeId,final Optional<Integer> offset,final String name,final int baseTypeId,final Optional<Integer> numberOfElements,final INaviModule module) throws CouldntSaveDataException {  try {    final String query=String.format("INSERT INTO %s (module_id, id, name, base_type, parent_id, \"offset\", argument," + " number_of_elements) VALUES (?, nextval('bn_types_id_seq'), " + "?, ?, ?, ?, NULL, ?) returning id",CTableNames.TYPE_MEMBERS_TABLE);    final PreparedStatement statement=connection.prepareStatement(query);    try {      statement.setInt(1,module.getConfiguration().getId());      statement.setString(2,name);      statement.setInt(3,baseTypeId);      statement.setInt(4,containingTypeId);      if (offset.isPresent()) {        statement.setInt(5,offset.get());      } else {        statement.setNull(5,Types.INTEGER);      }      if (numberOfElements.isPresent()) {        statement.setInt(6,numberOfElements.get());      } else {        statement.setNull(6,Types.INTEGER);      }      final ResultSet resultSet=statement.executeQuery();      if (resultSet.next()) {        return resultSet.getInt(1);      } else {        throw new CouldntSaveDataException("Empty result set while inserting type member.");      }    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  protected void updateButtons(){  boolean present;  boolean running;  boolean editable;  boolean handled;  super.updateButtons();  present=(m_Experiment != null);  running=present && m_Experiment.isRunning();  handled=!m_PanelUnsupported.isVisible();  editable=present && !running && handled;  m_ButtonAddClassifier.setEnabled(editable);  m_ButtonRemoveClassifier.setEnabled(editable && (m_ListClassifiers.getList().getSelectedIndices().length >= 1));  m_ButtonRemoveAllClassifiers.setEnabled(editable && (m_ModelClassifiers.getSize() > 0));  m_ButtonEditClassifier.setEnabled(editable && (m_ListClassifiers.getList().getSelectedIndices().length == 1));  m_ButtonMoveUpClassifier.setEnabled(editable && JListHelper.canMoveUp(m_ListClassifiers.getList()));  m_ButtonMoveDownClassifier.setEnabled(editable && JListHelper.canMoveDown(m_ListClassifiers.getList()));  m_ButtonAddDataset.setEnabled(editable);  m_ButtonRemoveDataset.setEnabled(editable && (m_ListDatasets.getList().getSelectedIndices().length >= 1));  m_ButtonRemoveAllDatasets.setEnabled(editable && (m_ModelDatasets.getSize() > 0));  m_ButtonMoveUpDataset.setEnabled(editable && JListHelper.canMoveUp(m_ListDatasets.getList()));  m_ButtonMoveDownDataset.setEnabled(editable && JListHelper.canMoveDown(m_ListDatasets.getList()));  m_ButtonNotes.setEnabled(editable);}  }
class C{  public synchronized void addSession(MXSession session){  mLoginStorage.addCredentials(session.getHomeserverConfig());synchronized (LOG_TAG) {    mMXSessions.add(session);  }}  }
class C{  public List<Event> decodeMessageEvents(final byte[] data,final Replay replay){  final BitPackedDecoder decoder=new BitPackedDecoder(data,typeInfos,true);  return decodeEventStream(decoder,messageEventIdTypeid,messageEventTypeMap,true,MESSAGE_EF,replay.getPlayerIdUserIdMap());}  }
class C{  private void loadSpinners(Reporter r){  log.debug("Load spinners Reporter location " + r.getSystemName());  physicalLocation.setValue(PhysicalLocation.getBeanPhysicalLocation(r));}  }
class C{  public static HttpResponse httpPost(String httpUrl){  return httpPost(new HttpRequest(httpUrl));}  }
class C{  public BaseDateTime(long instant,Chronology chronology){  super();  iChronology=checkChronology(chronology);  iMillis=checkInstant(instant,iChronology);}  }
class C{  public void addWords(Collection<WordToken> word){  if (word != null) {    words.addAll(word);  }}  }
class C{  @Override public final int computeHashCode(T o){  return o != null ? o.hashCode() : 0;}  }
class C{  public final void testClone03(){  CollectionCertStoreParameters cp1=new CollectionCertStoreParameters();  CollectionCertStoreParameters cp2=(CollectionCertStoreParameters)cp1.clone();  CollectionCertStoreParameters cp3=(CollectionCertStoreParameters)cp2.clone();  assertTrue(cp1.getCollection() == cp2.getCollection() && cp3.getCollection() == cp2.getCollection());}  }
class C{  public boolean stop(){  return stopped.compareAndSet(false,true);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public final boolean isErasure(){  return (this.rule & SearchPattern.R_ERASURE_MATCH) != 0;}  }
class C{  public TokenCollector collect(Reader stream) throws IOException {  doTokenize(stream);  return this;}  }
class C{  public GOCData build(){  return new GOCData(smActivec,smElementNamec + ALERT_ID_SEPARATOR + smEventNamec,smClassNamec,smClearedAtc,smCreatedAtc,smElementNamec,smEventNamec,smEventTextc,smLastNotifiedAtc,smSeverityc,SM_SOURCE_DOMAIN__C,srActionablec);}  }
class C{  private void swap(int i,int j){  m_Instances.swap(i,j);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.EVENT_DEFINITION___AFTER_EVERY_EVENT_1:    return getAfterEveryEvent_1();case UmplePackage.EVENT_DEFINITION___AFTER_EVENT_1:  return getAfterEvent_1();case UmplePackage.EVENT_DEFINITION___EVENT_1:return getEvent_1();case UmplePackage.EVENT_DEFINITION___ANONYMOUS_EVENT_DEFINITION_11:return getAnonymous_eventDefinition_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isDisabled(){  return this.disabled;}  }
class C{  @Deprecated public YearMonthDay toYearMonthDay(){  return new YearMonthDay(getMillis(),getChronology());}  }
class C{  public CActionToggleBreakpoint(final BreakpointManager manager,final INaviModule module,final UnrelocatedAddress address){  super("Toggle Breakpoint");  m_manager=Preconditions.checkNotNull(manager,"IE01386: manager argument can not be null");  m_module=Preconditions.checkNotNull(module,"IE01389: module argument can not be null");  m_address=Preconditions.checkNotNull(address,"IE01564: address argument can not be null");}  }
class C{  @GenerateLink(rel=Constants.LINK_REL_AVAILABLE_BUILDERS) @GET @Path("available") @Produces(MediaType.APPLICATION_JSON) public List<BuilderDescriptor> availableBuilders(){  final Set<Builder> all=builders.getAll();  final List<BuilderDescriptor> list=new ArrayList<>(all.size());  final DtoFactory dtoFactory=DtoFactory.getInstance();  for (  Builder builder : all) {    list.add(dtoFactory.createDto(BuilderDescriptor.class).withName(builder.getName()).withDescription(builder.getDescription()).withEnvironments(builder.getEnvironments()));  }  return list;}  }
class C{  public static int gameStatus(String[][] m,String e){  if (isWin(m,e))   return 0; else   if (isDraw(m))   return 1; else   return 2;}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=HashUtilities.hashCode(result,this.plotArea);  result=HashUtilities.hashCode(result,this.plotLines);  result=HashUtilities.hashCode(result,this.plotShapes);  result=HashUtilities.hashCode(result,this.useFillPaint);  return result;}  }
class C{  public Matrix4x3d arcball(double radius,double centerX,double centerY,double centerZ,double angleX,double angleY){  return arcball(radius,centerX,centerY,centerZ,angleX,angleY,this);}  }
class C{  public void testAdd(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(SIZE);    for (int i=0; i < SIZE; ++i) {      assertTrue(q.add(new Integer(i)));    }    assertEquals(0,q.remainingCapacity());    q.add(new Integer(SIZE));    shouldThrow();  } catch (  IllegalStateException success) {  }}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() instanceof JMenuItem) {    JMenuItem source=(JMenuItem)(e.getSource());    if (source.getText().substring(1).startsWith(":\\") || source.getText().startsWith("/")) {      if (source.getText().endsWith(".tsf")) {        try {          loadSession(new File(source.getText()),true);        } catch (        IOException ex) {          ex.printStackTrace();        }      } else {        dumpFile=source.getText();        openFiles(new File[]{new File(dumpFile)},true);      }    } else     if ("Open...".equals(source.getText())) {      chooseFile();    } else     if ("Open loggc file...".equals(source.getText())) {      openLoggcFile();    } else     if ("Save Logfile...".equals(source.getText())) {      saveLogFile();    } else     if ("Save Session...".equals(source.getText())) {      saveSession();    } else     if ("Open Session...".equals(source.getText())) {      openSession();    } else     if ("Preferences".equals(source.getText())) {      showPreferencesDialog();    } else     if ("Filters".equals(source.getText())) {      showFilterDialog();    } else     if ("Categories".equals(source.getText())) {      showCategoriesDialog();    } else     if ("Get Logfile from clipboard".equals(source.getText())) {      getLogfileFromClipboard();    } else     if ("Exit TDA".equals(source.getText())) {      saveState();      frame.dispose();    } else     if ("Release Notes".equals(source.getText())) {      showInfoFile("Release Notes","doc/README","Document.png");    } else     if ("License".equals(source.getText())) {      showInfoFile("License Information","doc/COPYING","Document.png");    } else     if ("About TDA".equals(source.getText())) {      showInfo();    } else     if ("Search...".equals(source.getText())) {      showSearchDialog();    } else     if ("Parse loggc-logfile...".equals(source.getText())) {      parseLoggcLogfile();    } else     if ("Find long running threads...".equals(source.getText())) {      findLongRunningThreads();    } else     if (("Close logfile...".equals(source.getText())) || ("Close...".equals(source.getText()))) {      closeCurrentDump();    } else     if ("Close all...".equals(source.getText())) {      closeAllDumps();    } else     if ("Diff Selection".equals(source.getText())) {      TreePath[] paths=tree.getSelectionPaths();      if ((paths != null) && (paths.length < 2)) {        JOptionPane.showMessageDialog(this.getRootPane(),"You must select at least two dumps for getting a diff!\n","Error",JOptionPane.ERROR_MESSAGE);      } else {        DefaultMutableTreeNode mergeRoot=fetchTop(tree.getSelectionPath());        Map dumpMap=dumpStore.getFromDumpFiles(mergeRoot.getUserObject().toString());        ((Logfile)mergeRoot.getUserObject()).getUsedParser().mergeDumps(mergeRoot,dumpMap,paths,paths.length,null);        createTree();        this.getRootPane().revalidate();      }    } else     if ("Show selected Dump in logfile".equals(source.getText())) {      navigateToDumpInLogfile();    } else     if ("Show Toolbar".equals(source.getText())) {      setShowToolbar(((JCheckBoxMenuItem)source).getState());    } else     if ("Request Thread Dump...".equals(source.getText())) {      addMXBeanDump();    } else     if ("Expand all nodes".equals(source.getText())) {      expandAllCatNodes(true);    } else     if ("Collapse all nodes".equals(source.getText())) {      expandAllCatNodes(false);    } else     if ("Sort by thread count".equals(source.getText())) {      sortCatByThreads();    } else     if ("Expand all Dump nodes".equals(source.getText())) {      expandAllDumpNodes(true);    } else     if ("Collapse all Dump nodes".equals(source.getText())) {      expandAllDumpNodes(false);    }  } else   if (e.getSource() instanceof JButton) {    JButton source=(JButton)e.getSource();    if ("Open Logfile".equals(source.getToolTipText())) {      chooseFile();    } else     if ("Close selected Logfile".equals(source.getToolTipText())) {      closeCurrentDump();    } else     if ("Preferences".equals(source.getToolTipText())) {      showPreferencesDialog();    } else     if ("Find long running threads".equals(source.getToolTipText())) {      findLongRunningThreads();    } else     if ("Expand all nodes".equals(source.getToolTipText())) {      expandAllDumpNodes(true);    } else     if ("Collapse all nodes".equals(source.getToolTipText())) {      expandAllDumpNodes(false);    } else     if ("Find long running threads".equals(source.getToolTipText())) {      findLongRunningThreads();    } else     if ("Filters".equals(source.getToolTipText())) {      showFilterDialog();    } else     if ("Custom Categories".equals(source.getToolTipText())) {      showCategoriesDialog();    } else     if ("Request a Thread Dump".equals(source.getToolTipText())) {      addMXBeanDump();    }    source.setSelected(false);  }}  }
class C{  public static Long[] nullToEmpty(final Long[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;  }  return array;}  }
class C{  int processRow(int[] rowCounters,int rowNumber,int rowHeight,int[] codewords,int next) throws FormatException {  int width=bitMatrix.getWidth();  int columnNumber=0;  long symbol=0;  for (int i=0; i < width; i+=MODULES_IN_SYMBOL) {    if (i + MODULES_IN_SYMBOL > rowCounters.length) {      throw FormatException.getFormatInstance();    }    for (int mask=MODULES_IN_SYMBOL - 1; mask >= 0; mask--) {      if (rowCounters[i + (MODULES_IN_SYMBOL - 1 - mask)] >= rowHeight >>> 1) {        symbol|=1L << mask;      }    }    if (columnNumber > 0) {      int cw=getCodeword(symbol);      if (cw < 0 && i < width - MODULES_IN_SYMBOL) {        if (eraseCount >= erasures.length) {          throw FormatException.getFormatInstance();        }        erasures[eraseCount]=next;        next++;        eraseCount++;      } else {        codewords[next++]=cw;      }    } else {      int cw=getCodeword(symbol);      if (ecLevel < 0) {        if (rowNumber % 3 == 1) {          leftColumnECData=cw;        }      }    }    symbol=0;    columnNumber++;  }  if (columnNumber > 1) {    --next;    if (ecLevel < 0) {      if (rowNumber % 3 == 2) {        rightColumnECData=codewords[next];        if (rightColumnECData == leftColumnECData && leftColumnECData != 0) {          ecLevel=((rightColumnECData % 30) - rows % 3) / 3;        }      }    }    codewords[next]=0;  }  return next;}  }
class C{  public void close(){  if (sLogger.isActivated()) {    sLogger.info("Capability service API is closed");  }}  }
class C{  protected void bundleToJSON(JSONBuffer re,DBIDRef id){  SingleObjectBundle bundle=db.getBundle(id);  if (bundle != null) {    for (int j=0; j < bundle.metaLength(); j++) {      final Object data=bundle.data(j);      if (data instanceof NumberVector) {        NumberVector v=(NumberVector)data;        re.appendKeyArray(bundle.meta(j));        for (int i=0; i < v.getDimensionality(); i++) {          re.append(v.doubleValue(i));        }        re.closeArray();      } else       if (data instanceof PolygonsObject) {        re.appendKeyArray(bundle.meta(j));        for (        Polygon p : ((PolygonsObject)data).getPolygons()) {          re.startArray();          for (int i=0; i < p.size(); i++) {            re.append(p.get(i));          }          re.closeArray();        }        re.closeArray();      } else {        re.appendKeyValue(bundle.meta(j),data);      }      if (LOG.isDebuggingFiner()) {        re.appendNewline();      }    }  } else {    re.appendKeyValue("error","Object not found.");  }}  }
class C{  public void startSession(){  if (logger.isActivated()) {    logger.debug("Start the session");  }  if (processor != null) {    processor.startProcessing();  }}  }
class C{  synchronized void destroy(){  this.destroyed=true;}  }
class C{  private WifiWatchdogStateMachine(Context context){  super("WifiWatchdogStateMachine");  mContext=context;  mContentResolver=context.getContentResolver();  mWifiManager=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);  mWsmChannel.connectSync(mContext,getHandler(),mWifiManager.getWifiStateMachineMessenger());  setupNetworkReceiver();  registerForSettingsChanges();  registerForWatchdogToggle();  addState(mDefaultState);  addState(mWatchdogDisabledState,mDefaultState);  addState(mWatchdogEnabledState,mDefaultState);  addState(mNotConnectedState,mWatchdogEnabledState);  addState(mVerifyingLinkState,mWatchdogEnabledState);  addState(mConnectedState,mWatchdogEnabledState);  addState(mOnlineWatchState,mConnectedState);  addState(mLinkMonitoringState,mConnectedState);  addState(mOnlineState,mConnectedState);  if (isWatchdogEnabled()) {    setInitialState(mNotConnectedState);  } else {    setInitialState(mWatchdogDisabledState);  }  setLogRecSize(25);  setLogOnlyTransitions(true);  updateSettings();}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  private void executeQuery(){  for (int i=start; i < jClasses.size(); i++) {    queryClass(jClasses.get(i));  }  start=jClasses.size();}  }
class C{  public cudaMipmappedArray(){}  }
class C{  private void onConnect(){  stopDemoService();  mode=MODE.ONLINE;  setMenuItemVisible(R.id.secure_connect_scan,false);  setMenuItemVisible(R.id.disconnect,true);  setMenuItemEnable(R.id.obd_services,true);  setMenuItemEnable(R.id.graph_actions,false);  setStatus(getString(R.string.title_connected_to,mConnectedDeviceName));  CommService.elm.reset();}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="OBL_UNSATISFIED_OBLIGATION") public static void copy(String sourceFileName,String destFileName,Boolean overwrite) throws IOException {  if (!overwrite) {    if (new File(destFileName).exists()) {      throw new IOException("Destination file exists and overwrite is false.");    }  }  try (InputStream source=new FileInputStream(sourceFileName);OutputStream dest=new FileOutputStream(destFileName)){    byte[] buffer=new byte[1024];    int len;    while ((len=source.read(buffer)) > 0) {      dest.write(buffer,0,len);    }  } catch (  IOException ex) {    String msg=String.format("Error copying file: %s to: %s",sourceFileName,destFileName);    throw new IOException(msg,ex);  }  File src=new File(sourceFileName);  File dst=new File(destFileName);  Boolean ok=dst.setLastModified(src.lastModified());  if (!ok) {    throw new RuntimeException("Failed to set modified time on file: " + dst.getAbsolutePath());  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.267 -0400",hash_original_method="EEECDB779BCD3F1C16C4BB7414585E36",hash_generated_method="A55EC4CDFFAE64F1B331AEE9E72C7A09") @Override public void flush() throws IOException {  try {    out.flush();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public ArrayList(Collection c){  size=c.size();  elementData=new Object[(int)Math.min((size * 110L) / 100,Integer.MAX_VALUE)];  c.toArray(elementData);}  }
class C{  public static boolean isWithinDaysFuture(Calendar cal,int days){  if (cal == null) {    throw new IllegalArgumentException("The date must not be null");  }  Calendar today=Calendar.getInstance();  Calendar future=Calendar.getInstance();  future.add(Calendar.DAY_OF_YEAR,days);  return (isAfterDay(cal,today) && !isAfterDay(cal,future));}  }
class C{  private void loadConfigProperties(){  Properties properties=new Properties();  try {    notifyPreloader(0,4,"Loading configuration...");    properties.load(new FileInputStream(CONFIG_FILE));    String apiKey=properties.getProperty("lastfm_api_key");    String apiSecret=properties.getProperty("lastfm_api_secret");    LastFmPreferences servicePreferences=ServiceDemon.getInstance().getLastFmPreferences();    servicePreferences.setApiSecret(apiSecret);    servicePreferences.setApiKey(apiKey);  } catch (  IOException exception) {    LOG.warn("Error loading configuration properties",exception);  }}  }
class C{  public boolean serverIsOpen(){  return serverSocket != null;}  }
class C{  private int processTextToken(final Tj textDecoder,final CommandParser parser,final int commandID,int startCommand,final int dataPointer){  textDecoder.setGS(gs);  final TextState currentTextState=gs.getTextState();  if (commandID == Cmd.BT && parserOptions.isRenderPage()) {    current.drawClip(gs,parserOptions.defaultClip,true);    current.drawTR(GraphicsState.FILL);  }  if (commandID == Cmd.Tj || commandID == Cmd.TJ || commandID == Cmd.quote || commandID == Cmd.doubleQuote) {    if (currentTextState.hasFontChanged() && currentTextState.getTfs() != 0) {      final String fontID=currentTextState.getFontID();      final PdfFont restoredFont=FontResolver.resolveFont(gs,this,fontID,pdfFontFactory,cache);      if (restoredFont != null) {        currentFontData=restoredFont;      }    }    if (currentFontData == null) {      currentFontData=new PdfFont(currentPdfFile);      currentFontData.getGlyphData().logicalfontName=StandardFonts.expandName(currentTextState.getFontID());    }    if (currentTextState.hasFontChanged()) {      currentTextState.setFontChanged(false);    }  }switch (commandID) {case Cmd.BMC:    parserOptions.setLayerLevel(parserOptions.getLayerLevel() + 1);  if (parserOptions.isLayerVisible()) {    parserOptions.getLayerVisibility().add(parserOptions.getLayerLevel());  }if (contentHandler != null) {  contentHandler.BMC(parser.generateOpAsString(0,false));}break;case Cmd.BDC:final PdfObject BDCobj=BDC.execute(startCommand,dataPointer,parser.getStream(),parser.generateOpAsString(0,false),gs,currentPdfFile,current,parserOptions);if (BDCobj.getClip() != null) {BDCDepth=graphicsStates.getDepth();} else {BDCDepth=-1;}textDecoder.setActualText(BDCobj.getTextStreamValue(PdfDictionary.ActualText));if (contentHandler != null) {contentHandler.BDC(BDCobj);}break;case Cmd.BT:currentTextState.resetTm();break;case Cmd.EMC:textDecoder.setActualText(null);if (contentHandler != null) {contentHandler.EMC();}if (parserOptions.getLayerLevel() == 1 && BDCDepth != -1 && BDCDepth != graphicsStates.getDepth()) {graphicsStates.correctDepth(0,gs,current);}BDCDepth=-1;EMC.execute(current,gs,parserOptions);break;case Cmd.ET:current.writeCustom(DynamicVectorRenderer.RESET_COLORSPACE,null);if (gs.getTextRenderType() == GraphicsState.CLIPTEXT) {current.drawClip(gs,null,false);}break;case Cmd.DP:if (contentHandler != null) {final MCObject obj=new MCObject(parser.generateOpAsString(0,false));currentPdfFile.readObject(obj);contentHandler.DP(obj);}break;case Cmd.Tf:currentTextState.TF(parser.parseFloat(0),(parser.generateOpAsString(1,true)));break;case Cmd.Tc:currentTextState.setCharacterSpacing(parser.parseFloat(0));break;case Cmd.TD:TD.execute(false,parser.parseFloat(1),parser.parseFloat(0),currentTextState);multipleTJs=false;break;case Cmd.Td:TD.execute(true,parser.parseFloat(1),parser.parseFloat(0),currentTextState);multipleTJs=false;break;case Cmd.Tj:if (currentTextState.getTfs() != 0) {lastTextValue=textDecoder.TJ(currentTextState,currentFontData,parser.getStream(),startCommand,dataPointer,multipleTJs);}multipleTJs=true;break;case Cmd.TJ:lastTextValue=textDecoder.TJ(currentTextState,currentFontData,parser.getStream(),startCommand,dataPointer,multipleTJs);multipleTJs=true;break;case Cmd.quote:TD.relativeMove(0,-currentTextState.getLeading(),currentTextState);multipleTJs=false;lastTextValue=textDecoder.TJ(currentTextState,currentFontData,parser.getStream(),startCommand,dataPointer,multipleTJs);multipleTJs=true;break;case Cmd.doubleQuote:final byte[] characterStream=parser.getStream();currentTextState.setCharacterSpacing(parser.parseFloat(1));currentTextState.setWordSpacing(parser.parseFloat(2));TD.relativeMove(0,-currentTextState.getLeading(),currentTextState);multipleTJs=false;while (characterStream[startCommand] != '(' && characterStream[startCommand] != '<' && characterStream[startCommand] != '[') {startCommand++;}lastTextValue=textDecoder.TJ(currentTextState,currentFontData,characterStream,startCommand,dataPointer,multipleTJs);multipleTJs=true;break;case Cmd.Tm:currentTextState.Tm[0][0]=parser.parseFloat(5);currentTextState.Tm[0][1]=parser.parseFloat(4);currentTextState.Tm[0][2]=0;currentTextState.Tm[1][0]=parser.parseFloat(3);currentTextState.Tm[1][1]=parser.parseFloat(2);currentTextState.Tm[1][2]=0;currentTextState.Tm[2][0]=parser.parseFloat(1);currentTextState.Tm[2][1]=parser.parseFloat(0);currentTextState.Tm[2][2]=1;currentTextState.setTMAtLineStart();multipleTJs=false;break;case Cmd.Tstar:TD.relativeMove(0,-currentTextState.getLeading(),currentTextState);multipleTJs=false;break;case Cmd.Tr:final int value=TR.execute(parser.parseInt(),gs);if (parserOptions.isRenderPage() && !parserOptions.renderDirectly()) {current.drawTR(value);}break;case Cmd.Ts:currentTextState.setTextRise(parser.parseFloat(0));break;case Cmd.Tw:currentTextState.setWordSpacing(parser.parseFloat(0));break;case Cmd.Tz:currentTextState.setHorizontalScaling(parser.parseFloat(0) / 100);break;case Cmd.TL:currentTextState.setLeading(parser.parseFloat(0));break;}return dataPointer;}  }
class C{  public static DigestAlgorithm forName(final String name,final DigestAlgorithm defaultValue){  final String c14nName=name.replaceAll("-","");  final DigestAlgorithm algorithm=Registry.ALGORITHMS.get(c14nName);  if (algorithm == null) {    return defaultValue;  }  return algorithm;}  }
class C{  public int read() throws IOException {  int val;  if ((val=is.read()) < 0) {    return -1;  }switch (val & 0xf0) {case 0xc0:case 0xd0:    val=((val & 0x1f) << 6) | (is.read() & 0x3f);  break;case 0xe0:val=((val & 0x0f) << 12) | ((is.read() & 0x3f) << 6) | (is.read() & 0x3f);break;case 0xf0:throw new UnsupportedEncodingException();default :break;}return val;}  }
class C{  protected LayerTreeNode createLayerNode(Layer layer){  return new LayerTreeNode(layer);}  }
class C{  @Override public final void addTransitSlightlyUpstreamOfStop(final QVehicle veh){  this.vehQueue.addFirst(veh);}  }
class C{  public static IPath computeDefaultContainerPath(String containerId){  return new Path(containerId);}  }
class C{  protected static boolean isValidChar(char toCheck,int whatToKeep){  if ((whatToKeep & ANY) > 0) {    return true;  }  boolean spaces=((whatToKeep & SPACES) > 0);  if (toCheck == ' ') {    return spaces;  }  boolean digits=((whatToKeep & DIGITS) > 0);  if ((toCheck >= '0') && (toCheck <= '9')) {    return digits;  }  boolean letters=((whatToKeep & LETTERS) > 0);  if (((toCheck >= 'a') && (toCheck <= 'z')) || ((toCheck >= 'A') && (toCheck <= 'Z'))) {    return letters;  }  boolean punctuation=((whatToKeep & PUNCTUATION) > 0);  if (punctuation) {    return isValidChar(toCheck,"`~!@#$%^&*()-_=+\\|]}[{;:,<.>/?\"\'");  } else {    return false;  }}  }
class C{  public void dump(PrintStream ps){  ps.print(rootElement.getCanonicalForm());}  }
class C{  public Complex(double a){  this(a,0);}  }
class C{  public DocumentDescriptor(){  table=new Entry[INITIAL_CAPACITY];}  }
class C{  protected void disconnected(){  if (!disconnectFlag) {    disconnectFlag=true;    if (connected) {      die();    }    if (!host.equals("localhost")) {      game.processGameEvent(new GamePlayerDisconnectedEvent(this,getLocalPlayer()));    }  }}  }
class C{  public void teleport(final GeocentricCoordinates targetXyz){  Log.d(TAG,"Teleporting to target " + targetXyz);  Pointing pointing=model.getPointing();  final GeocentricCoordinates hereXyz=pointing.getLineOfSight();  if (targetXyz.equals(hereXyz)) {    return;  }  Vector3 hereTopXyz=pointing.getPerpendicular();  hereTopXyz.normalize();  final Vector3 normal=VectorUtil.crossProduct(hereXyz,hereTopXyz);  Vector3 newUpXyz=VectorUtil.crossProduct(normal,targetXyz);  model.setPointing(targetXyz,newUpXyz);}  }
class C{  public static String decodedMessage(String message){  return Arrays.toString(Base64.decode(message,Base64.DEFAULT));}  }
class C{  @Override protected void doAction(){  File caCertificatesFile=applicationSettings.getCaCertificatesFile();  if (caCertificatesFile.isFile()) {    openKeyStore(caCertificatesFile,AuthorityCertificates.CACERTS_DEFAULT_PWD);    return;  }  int selected=JOptionPane.showConfirmDialog(frame,res.getString("OpenCaCertificatesAction.NoCaCertificatesKeyStoreCreate.message"),res.getString("OpenCaCertificatesAction.OpenCaCertificatesKeyStore.Title"),JOptionPane.YES_NO_OPTION);  if (selected != JOptionPane.YES_OPTION) {    return;  }  try {    DNewKeyStoreType dNewKeyStoreType=new DNewKeyStoreType(frame);    dNewKeyStoreType.setLocationRelativeTo(frame);    dNewKeyStoreType.setVisible(true);    KeyStoreType keyStoreType=dNewKeyStoreType.getKeyStoreType();    if (keyStoreType == null) {      return;    }    Password password=getNewKeyStorePassword();    if (password == null) {      return;    }    KeyStore caCertificatesKeyStore=KeyStoreUtil.create(keyStoreType);    KeyStoreUtil.save(caCertificatesKeyStore,caCertificatesFile,password);    kseFrame.addKeyStore(caCertificatesKeyStore,caCertificatesFile,password);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public boolean isToExclude(HttpMessage msg,NameValuePair param){  return ((paramType == NameValuePair.TYPE_UNDEFINED) || (param.getType() == paramType)) && ((urlPattern == null) || urlPattern.matcher(msg.getRequestHeader().getURI().toString().toUpperCase(Locale.ROOT)).matches()) && (paramNamePattern.matcher(param.getName()).matches());}  }
class C{  public void selectWeapon(int wn){  if (wn == -1) {    weaponList.setSelectedIndex(-1);    return;  }  int index=((WeaponListModel)weaponList.getModel()).getIndex(wn);  if (index == -1) {    weaponList.setSelectedIndex(-1);    return;  }  weaponList.setSelectedIndex(index);  weaponList.ensureIndexIsVisible(index);  displaySelected();  weaponList.repaint();}  }
class C{  Address(){  tags=new LinkedHashMap<String,ArrayList<String>>();}  }
class C{  public void handleChangesToSharesProductToGLAccountMappings(final Long sharesProductId,final Map<String,Object> changes,final JsonElement element,final AccountingRuleType accountingRuleType){switch (accountingRuleType) {case NONE:    break;case CASH_BASED:  mergeSharesToAssetAccountMappingChanges(element,SHARES_PRODUCT_ACCOUNTING_PARAMS.SHARES_REFERENCE.getValue(),sharesProductId,CASH_ACCOUNTS_FOR_SHARES.SHARES_REFERENCE.getValue(),CASH_ACCOUNTS_FOR_SHARES.SHARES_REFERENCE.toString(),changes);mergeSharesToIncomeAccountMappingChanges(element,SHARES_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue(),sharesProductId,CASH_ACCOUNTS_FOR_SHARES.INCOME_FROM_FEES.getValue(),CASH_ACCOUNTS_FOR_SHARES.INCOME_FROM_FEES.toString(),changes);mergeSharesToLiabilityAccountMappingChanges(element,SHARES_PRODUCT_ACCOUNTING_PARAMS.SHARES_SUSPENSE.getValue(),sharesProductId,CASH_ACCOUNTS_FOR_SHARES.SHARES_SUSPENSE.getValue(),CASH_ACCOUNTS_FOR_SHARES.SHARES_SUSPENSE.toString(),changes);mergeSharesToEquityAccountMappingChanges(element,SHARES_PRODUCT_ACCOUNTING_PARAMS.SHARES_EQUITY.getValue(),sharesProductId,CASH_ACCOUNTS_FOR_SHARES.SHARES_EQUITY.getValue(),CASH_ACCOUNTS_FOR_SHARES.SHARES_EQUITY.toString(),changes);break;case ACCRUAL_PERIODIC:break;case ACCRUAL_UPFRONT:break;default :break;}}  }
class C{  public Date scheduleJob(Trigger trigger) throws SchedulerException {  return sched.scheduleJob(trigger);}  }
class C{  @SuppressWarnings("rawtypes") public void deleteAllRoomsOrganisationOfRoom(long rooms_id){  try {    List ll=this.getRoomsOrganisationByRoomsId(rooms_id);    for (Iterator it=ll.iterator(); it.hasNext(); ) {      Rooms_Organisation rOrg=(Rooms_Organisation)it.next();      this.deleteRoomsOrganisation(rOrg);    }  } catch (  Exception ex2) {    log.error("[deleteAllRoomsOrganisationOfRoom] ",ex2);  }}  }
class C{  public void updateFloat(String columnName,float x) throws SQLException {  updateFloat(findColumn(columnName),x);}  }
class C{  public H263Stream(int cameraId){  super(cameraId);  mCameraImageFormat=ImageFormat.NV21;  mVideoEncoder=MediaRecorder.VideoEncoder.H263;  mPacketizer=new H263Packetizer();}  }
class C{  @Override public boolean isBusy(){  if (m_executorPool == null || (m_executorPool.getQueue().size() == 0 && m_executorPool.getActiveCount() == 0) && m_setsComplete == 0) {    return false;  }  return true;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_BODY_1__LINKING_OP_1:    return getLinkingOp_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {  try {    wrappedCert.verify(key);  } catch (  java.security.cert.CertificateException e) {    throw new CertificateException(e.getMessage());  }}  }
class C{  public static void sort(AggregateAPIEntity entity,List<AggregateParams.SortFieldOrder> sortFieldOrders){  Map<String,AggregateAPIEntity> children=entity.getEntityList();  for (  Map.Entry<String,AggregateAPIEntity> e : children.entrySet()) {    e.getValue().setKey(e.getKey());  }  SortedSet<Map.Entry<String,AggregateAPIEntity>> set=sortByValue(children,sortFieldOrders);  for (  Map.Entry<String,AggregateAPIEntity> entry : set) {    entity.getSortedList().add(entry.getValue());  }  for (  Map.Entry<String,AggregateAPIEntity> entry : entity.getEntityList().entrySet()) {    sort(entry.getValue(),sortFieldOrders);  }  entity.setEntityList(null);}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  if (((XYSeriesRenderer)renderer).isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStyle(Style.STROKE);  }switch (((XYSeriesRenderer)renderer).getPointStyle()) {case X:    drawX(canvas,paint,x + SHAPE_WIDTH,y);  break;case CIRCLE:drawCircle(canvas,paint,x + SHAPE_WIDTH,y);break;case TRIANGLE:drawTriangle(canvas,paint,new float[6],x + SHAPE_WIDTH,y);break;case SQUARE:drawSquare(canvas,paint,x + SHAPE_WIDTH,y);break;case DIAMOND:drawDiamond(canvas,paint,new float[8],x + SHAPE_WIDTH,y);break;case POINT:canvas.drawPoint(x + SHAPE_WIDTH,y,paint);break;}}  }
class C{  public GitlabProjectMember addProjectMember(GitlabProject project,GitlabUser user,GitlabAccessLevel accessLevel) throws IOException {  return addProjectMember(project.getId(),user.getId(),accessLevel);}  }
class C{  public WatchedFilter(boolean matchPasses){  super(matchPasses);}  }
class C{  public void stop(){synchronized (lock) {    schedulerService.shutdownNow();    state=State.STOPPED;  }}  }
class C{  protected void paintText(Graphics g,int tabPlacement,Font font,FontMetrics metrics,int tabIndex,String title,Rectangle textRect,boolean isSelected){  boolean calculate=!(tabPlacement == TOP || tabPlacement == BOTTOM);  if (getTextViewForTab(tabIndex) != null)   calculate=false;  if (!calculate) {    super.paintText(g,tabPlacement,font,metrics,tabIndex,title,textRect,isSelected);    return;  }  String firstLine=title;  String secondLine=null;  int pos=title.indexOf(' ');  if (pos != -1) {    firstLine=title.substring(0,pos);    secondLine=title.substring(pos + 1);  }  g.setFont(font);  int mnemIndex=tabPane.getDisplayedMnemonicIndexAt(tabIndex);  if (tabPane.isEnabled() && tabPane.isEnabledAt(tabIndex)) {    Color c=tabPane.getForegroundAt(tabIndex);    if (!isSelected) {      if (c.equals(Color.black))       c=Color.darkGray; else       c=c.brighter();    }    g.setColor(c);    BasicGraphicsUtils.drawStringUnderlineCharAt(g,firstLine,mnemIndex,textRect.x,textRect.y + metrics.getAscent());    if (secondLine != null)     BasicGraphicsUtils.drawStringUnderlineCharAt(g,secondLine,mnemIndex - firstLine.length(),textRect.x,textRect.y + metrics.getAscent() + metrics.getHeight());  } else {    g.setColor(tabPane.getBackgroundAt(tabIndex).brighter());    BasicGraphicsUtils.drawStringUnderlineCharAt(g,firstLine,mnemIndex,textRect.x,textRect.y + metrics.getAscent());    if (secondLine != null)     BasicGraphicsUtils.drawStringUnderlineCharAt(g,secondLine,mnemIndex - firstLine.length(),textRect.x,textRect.y + metrics.getAscent() + metrics.getHeight());    g.setColor(tabPane.getBackgroundAt(tabIndex).darker());    BasicGraphicsUtils.drawStringUnderlineCharAt(g,firstLine,mnemIndex,textRect.x - 1,textRect.y + metrics.getAscent() - 1);    if (secondLine != null)     BasicGraphicsUtils.drawStringUnderlineCharAt(g,secondLine,mnemIndex - firstLine.length(),textRect.x - 1,textRect.y + metrics.getAscent() + metrics.getHeight() - 1);  }}  }
class C{  protected void put(String tagName,TagInfo tagInfo){  this.tagInfoMap.put(tagName,tagInfo);}  }
class C{  public RotateStrategyBySize(final long maxSize){  m_currentSize=0;  m_maxSize=maxSize;}  }
class C{  private void save(){  if (copyCheckBox.isSelected() && JOptionPane.showConfirmDialog(this,MessageFormat.format(Bundle.getMessage("CopyCarType"),new Object[]{typeComboBox.getSelectedItem(),textCarType.getText()}),Bundle.getMessage("CopyCarTypeTitle"),JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {    return;  }  log.debug("save {} locations",locationCheckBoxList.size());  removePropertyChangeLocations();  for (  JCheckBox cb : locationCheckBoxList) {    Location loc=manager.getLocationById(cb.getName());    if (cb.isSelected()) {      loc.addTypeName((String)typeComboBox.getSelectedItem());      for (      JCheckBox cbt : trackCheckBoxList) {        String[] id=cbt.getName().split("s");        if (loc.getId().equals(id[0])) {          Track track=loc.getTrackById(cbt.getName());          if (cbt.isSelected()) {            track.addTypeName((String)typeComboBox.getSelectedItem());          } else {            track.deleteTypeName((String)typeComboBox.getSelectedItem());          }        }      }    } else {      loc.deleteTypeName((String)typeComboBox.getSelectedItem());    }  }  OperationsXml.save();  updateLocations();  if (Setup.isCloseWindowOnSaveEnabled()) {    dispose();  }}  }
class C{  public String toString(){  String result="[";  for (int i=0; i < 16; ++i) {    result+=this.m[i];    if (i < 15) {      result+=" ";    }  }  result+="]";  return result;}  }
class C{  public static void writeToXml(List<Block> toSerialize,OutputStream os) throws BlocklySerializerException {  writeToXmlImpl(toSerialize,os,null);}  }
class C{  public void run(){  log.info(m_cmd);  try {    m_child=Runtime.getRuntime().exec(m_cmd);    m_outStream=m_child.getInputStream();    m_errStream=m_child.getErrorStream();    m_inStream=m_child.getOutputStream();    if (checkInterrupted())     return;    m_outReader.start();    m_errReader.start();    Integer exitValue=null;    while (exitValue == null) {      try {        Thread.sleep(500);        if (checkInterrupted())         return;        int i=m_child.exitValue();        exitValue=new Integer(i);      } catch (      Exception ie) {        log.log(Level.INFO,"(ie) - " + ie);      }      log.config("done");    }  } catch (  IOException ioe) {    log.log(Level.SEVERE,"(ioe)",ioe);    m_err.append(ioe.getLocalizedMessage());  }}  }
class C{  public EnsembleMLTest(String name){  super(name);}  }
class C{  public void remove(){  checkState();  iterator.remove();}  }
class C{  public static void main(String[] args) throws Exception {  int n, line;  LineNumberReader reader=new LineNumberReader(new StringReader("0\r\n1\r2\n3\r\n\r5\r\r7\n\n9"));  for (n=0; n < 7; n++) {    skipWhiteSpace(reader);    int c=reader.read();    if (c < 0) {      break;    }    line=reader.getLineNumber();    if (line != (c - 48)) {      throw new Exception("Failed test : Line number expected " + (c - 48) + " got "+ line);    }  }}  }
class C{  @Override public boolean acceptSource(final Object source){  return source instanceof List && ((List)source).get(0) instanceof String && ((List)source).get(0).equals(IKeyword.GENSTAR_POPULATION);}  }
class C{  public void testNormalize() throws Throwable {  Document doc;  Document newDoc;  DOMImplementation domImpl;  DocumentType docTypeNull=null;  Element documentElement;  Element element1;  Element element2;  Element element3;  Element element4;  Element element5;  Element element6;  Element element7;  Text text1;  Text text2;  Text text3;  ProcessingInstruction pi;  CDATASection cData;  Comment comment;  EntityReference entRef;  NodeList elementList;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:root",docTypeNull);  element1=newDoc.createElement("element1");  element2=newDoc.createElement("element2");  element3=newDoc.createElement("element3");  element4=newDoc.createElement("element4");  element5=newDoc.createElement("element5");  element6=newDoc.createElement("element6");  element7=newDoc.createElement("element7");  text1=newDoc.createTextNode("text1");  text2=newDoc.createTextNode("text2");  text3=newDoc.createTextNode("text3");  cData=newDoc.createCDATASection("Cdata");  comment=newDoc.createComment("comment");  pi=newDoc.createProcessingInstruction("PITarget","PIData");  entRef=newDoc.createEntityReference("EntRef");  assertNotNull("createdEntRefNotNull",entRef);  documentElement=newDoc.getDocumentElement();  documentElement.appendChild(element1);  element2.appendChild(text1);  element2.appendChild(text2);  element2.appendChild(text3);  element1.appendChild(element2);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  element3.appendChild(entRef);  element3.appendChild(text1);  element3.appendChild(text2);  element1.appendChild(element3);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  element4.appendChild(cData);  element4.appendChild(text1);  element4.appendChild(text2);  element1.appendChild(element4);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  element5.appendChild(comment);  element5.appendChild(text2);  element5.appendChild(text3);  element1.appendChild(element5);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  element6.appendChild(pi);  element6.appendChild(text2);  element6.appendChild(text3);  element1.appendChild(element6);  entRef=(EntityReference)entRef.cloneNode(false);  text1=(Text)text1.cloneNode(false);  text2=(Text)text2.cloneNode(false);  text3=(Text)text3.cloneNode(false);  element7.appendChild(entRef);  element7.appendChild(text1);  element7.appendChild(text2);  element7.appendChild(text3);  element1.appendChild(element7);  elementList=element1.getChildNodes();  assertEquals("nodeNormalize01_1Bef",6,elementList.getLength());  elementList=element2.getChildNodes();  assertEquals("nodeNormalize01_2Bef",3,elementList.getLength());  elementList=element3.getChildNodes();  assertEquals("nodeNormalize01_3Bef",3,elementList.getLength());  elementList=element4.getChildNodes();  assertEquals("nodeNormalize01_4Bef",3,elementList.getLength());  elementList=element5.getChildNodes();  assertEquals("nodeNormalize01_5Bef",3,elementList.getLength());  elementList=element6.getChildNodes();  assertEquals("nodeNormalize01_6Bef",3,elementList.getLength());  elementList=element7.getChildNodes();  assertEquals("nodeNormalize01_7Bef",4,elementList.getLength());  newDoc.normalize();  elementList=element1.getChildNodes();  assertEquals("nodeNormalize01_1Aft",6,elementList.getLength());  elementList=element2.getChildNodes();  assertEquals("nodeNormalize01_2Aft",1,elementList.getLength());  elementList=element3.getChildNodes();  assertEquals("nodeNormalize01_3Aft",2,elementList.getLength());  elementList=element4.getChildNodes();  assertEquals("nodeNormalize01_4Aft",2,elementList.getLength());  elementList=element5.getChildNodes();  assertEquals("nodeNormalize01_5Aft",2,elementList.getLength());  elementList=element6.getChildNodes();  assertEquals("nodeNormalize01_6Aft",2,elementList.getLength());  elementList=element7.getChildNodes();  assertEquals("nodeNormalize01_7Aft",2,elementList.getLength());}  }
class C{  public void writeDdb(Map<String,String> ddb) throws IOException {  if (ddb.isEmpty()) {    return;  }  flush();  writeNfcFileDskHdr(true);  for (  Map.Entry<String,String> entry : ddb.entrySet()) {    writeNfcFileDskDDBEntry(entry.getKey(),entry.getValue());  }  writeNfcFileDskDDBEntry(null,null);  flush();}  }
class C{  public static String stringFor(int n){switch (n) {case cudaKeyValuePair:    return "cudaKeyValuePair";case cudaCSV:  return "cudaCSV";}return "INVALID cudaOutputMode: " + n;}  }
class C{  public static String fromIPv4AddressCollection(Collection<Integer> ipAddresses){  if (ipAddresses == null)   return "null";  StringBuffer sb=new StringBuffer();  sb.append("[");  for (  Integer ip : ipAddresses) {    sb.append(fromIPv4Address(ip));    sb.append(",");  }  sb.replace(sb.length() - 1,sb.length(),"]");  return sb.toString();}  }
class C{  protected void verifyStatus(HttpResponse response) throws IOException {  StatusLine statusLine=response.getStatusLine();  if (statusLine.getStatusCode() != HttpStatus.SC_OK) {    try {      throwKnownError(response,statusLine);    }  finally {      EntityUtils.consumeQuietly(response.getEntity());    }  }}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  @NamespacePermission(fields="#request.customDdlKey.namespace",permissions=NamespacePermissionEnum.WRITE) @Override public CustomDdl createCustomDdl(CustomDdlCreateRequest request){  customDdlHelper.validateCustomDdlKey(request.getCustomDdlKey());  Assert.hasText(request.getDdl(),"DDL must be specified.");  request.setDdl(request.getDdl().trim());  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(new BusinessObjectFormatKey(request.getCustomDdlKey().getNamespace(),request.getCustomDdlKey().getBusinessObjectDefinitionName(),request.getCustomDdlKey().getBusinessObjectFormatUsage(),request.getCustomDdlKey().getBusinessObjectFormatFileType(),request.getCustomDdlKey().getBusinessObjectFormatVersion()));  CustomDdlEntity customDdlEntity=customDdlDao.getCustomDdlByKey(request.getCustomDdlKey());  if (customDdlEntity != null) {    throw new AlreadyExistsException(String.format("Unable to create custom DDL with name \"%s\" because it already exists for the business object format {%s}.",request.getCustomDdlKey().getCustomDdlName(),businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(businessObjectFormatEntity)));  }  customDdlEntity=createCustomDdlEntity(businessObjectFormatEntity,request);  customDdlEntity=customDdlDao.saveAndRefresh(customDdlEntity);  return createCustomDdlFromEntity(customDdlEntity);}  }
class C{  public void testTempTopic(String prod_broker_url,String cons_broker_url) throws Exception {  Connection conn;  Session sess;  Destination cons_dest;  int num_msg;  num_msg=5;  LOG.debug("TESTING TEMP TOPICS " + prod_broker_url + " -> "+ cons_broker_url+ " ("+ num_msg+ " messages)");  conn=createConnection(cons_broker_url);  conn.start();  sess=conn.createSession(false,Session.AUTO_ACKNOWLEDGE);  LOG.trace("Creating destination");  cons_dest=sess.createTemporaryTopic();  testOneDest(conn,sess,cons_dest,num_msg);  sess.close();  conn.close();}  }
class C{  private void add(String projectPath,String relativePath,String containerPath,boolean isPackage,AccessRuleSet access){  containerPath=normalize(containerPath);  relativePath=normalize(relativePath);  int length=this.containerPaths.length, index=(containerPath.hashCode() & 0x7FFFFFFF) % length;  String currentRelativePath, currentContainerPath;  while ((currentRelativePath=this.relativePaths[index]) != null && (currentContainerPath=this.containerPaths[index]) != null) {    if (currentRelativePath.equals(relativePath) && currentContainerPath.equals(containerPath))     return;    if (++index == length) {      index=0;    }  }  int idx=this.projectPaths.indexOf(projectPath);  if (idx == -1) {    this.projectPaths.add(projectPath);    idx=this.projectPaths.indexOf(projectPath);  }  this.projectIndexes[index]=idx;  this.relativePaths[index]=relativePath;  this.containerPaths[index]=containerPath;  this.isPkgPath[index]=isPackage;  if (this.pathRestrictions != null)   this.pathRestrictions[index]=access; else   if (access != null) {    this.pathRestrictions=new AccessRuleSet[this.relativePaths.length];    this.pathRestrictions[index]=access;  }  if (++this.pathsCount > this.threshold)   rehash();}  }
class C{  @NotNull public Collection<String> findModulesWithModel(@NotNull Class modelClazz){  List<String> modules=new ArrayList<String>();  for (  Map.Entry<String,Object> set : projectsByPath.entrySet()) {    if (modelClazz.isInstance(set.getValue())) {      modules.add(extractModulePath(modelClazz,set.getKey()));    }  }  return modules;}  }
class C{  public IgniteInternalFuture<?> rebuildIndexes(@Nullable final String space,String valTypeName){  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to rebuild indexes (grid is stopping).");  try {    return rebuildIndexes(space,typesByName.get(new TypeName(space,valTypeName)));  }  finally {    busyLock.leaveBusy();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public static IntRange valueOf(String string){  if (string.isEmpty()) {    return null;  }  String[] nums=null;  int i=0;  boolean firstMinus=string.charAt(0) == '-';  if (firstMinus) {    string=string.substring(1);  }  while ((i < ByteRange.SPLITS.length) && ((nums == null) || (nums.length != 2))) {    nums=StringUtils.splitByWholeSeparator(string,ByteRange.SPLITS[i++],2);  }  if ((nums == null) || (nums.length != 2)) {    return null;  }  Integer min=DioriteMathUtils.asInt(firstMinus ? ("-" + nums[0]) : nums[0]);  if (min == null) {    return null;  }  Integer max=DioriteMathUtils.asInt(nums[1]);  if ((max == null) || (min > max)) {    return null;  }  return new IntRange(min,max);}  }
class C{  public void initialize(){  if (Strings.isNullOrEmpty(slackBotToken)) {    LOG.warn("No Slack Bot Token, Slack Integration will not broadcast at all");  } else {    try {      slackSession=SlackSessionFactory.createWebSocketSlackSession(slackBotToken);      slackSession.connect();      if (Strings.isNullOrEmpty(slackVerboseChannel)) {        LOG.warn("No Slack Verbose Channel, Slack Integration will not broadcast success/failures");      } else {        verboseChannel=slackSession.findChannelByName(slackVerboseChannel);        if (verboseChannel == null) {          LOG.warn(String.format("Verbose Channel %s not found, Slack Integration will not broadcast success/failures",slackVerboseChannel));        } else {          slackSession.joinChannel(slackVerboseChannel);        }      }      if (Strings.isNullOrEmpty(slackDigestChannel)) {        LOG.warn("No Slack Digest Channel, Slack Integration will not broadcast summaries");      } else {        digestChannel=slackSession.findChannelByName(slackDigestChannel);        if (digestChannel == null) {          LOG.warn(String.format("Digest Channel %s not found, Slack Integration will not broadcast summaries",slackDigestChannel));        } else {          slackSession.joinChannel(slackDigestChannel);        }      }    } catch (    IOException e) {      LOG.warn(String.format("Could not create session with token %s, Slack Integration will not broadcast at all",slackBotToken),e);    }  }}  }
class C{  private void assignBausteinGefaehrdungen(){  try {    LoadAssociatedGefaehrdungen command=new LoadAssociatedGefaehrdungen(getRiskAnalysisWizard().getCnaElement());    command=ServiceFactory.lookupCommandService().executeCommand(command);    List<GefaehrdungsUmsetzung> list=command.getAssociatedGefaehrdungen();    for (    GefaehrdungsUmsetzung selectedGefaehrdung : list) {      if (selectedGefaehrdung != null) {        for (        Gefaehrdung gefaehrdung : getRiskAnalysisWizard().getAllGefaehrdungen()) {          if (gefaehrdung != null && gefaehrdung.getId() != null && gefaehrdung.getId().equals(selectedGefaehrdung.getId())) {            associateGefaehrdung(gefaehrdung,true);          }        }      }    }    UpdateRiskAnalysis updateCommand=new UpdateRiskAnalysis(getRiskAnalysisWizard().getFinishedRiskAnalysisLists());    updateCommand=ServiceFactory.lookupCommandService().executeCommand(updateCommand);  } catch (  CommandException e) {    ExceptionUtil.log(e,"");  }}  }
class C{  public Matrix4d translationRotateScale(double tx,double ty,double tz,double qx,double qy,double qz,double qw,double sx,double sy,double sz){  double dqx=qx + qx, dqy=qy + qy, dqz=qz + qz;  double q00=dqx * qx;  double q11=dqy * qy;  double q22=dqz * qz;  double q01=dqx * qy;  double q02=dqx * qz;  double q03=dqx * qw;  double q12=dqy * qz;  double q13=dqy * qw;  double q23=dqz * qw;  m00=sx - (q11 + q22) * sx;  m01=(q01 + q23) * sx;  m02=(q02 - q13) * sx;  m03=0.0;  m10=(q01 - q23) * sy;  m11=sy - (q22 + q00) * sy;  m12=(q12 + q03) * sy;  m13=0.0;  m20=(q02 + q13) * sz;  m21=(q12 - q03) * sz;  m22=sz - (q11 + q00) * sz;  m23=0.0;  m30=tx;  m31=ty;  m32=tz;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  public Client createClient(int readTimeout,int connectTimeout){  ClientConfig config=new DefaultClientConfig();  config.getClasses().add(JacksonJaxbJsonProvider.class);  config.getProperties().put(ClientConfig.PROPERTY_READ_TIMEOUT,readTimeout);  config.getProperties().put(ClientConfig.PROPERTY_CONNECT_TIMEOUT,connectTimeout);  return createClient(config);}  }
class C{  public WebResourceStatistics computeRawMark(WebResourceStatistics wrStatistics){  float passed=wrStatistics.getNbOfPassed();  if (passed == -1) {    wrStatistics.setRawMark(Float.valueOf(-1));    return wrStatistics;  }  BigDecimal weightedPassed=BigDecimal.valueOf(passed);  BigDecimal weightedFailed=wrStatistics.getWeightedFailed();  if ((weightedFailed.equals(BigDecimal.ZERO) || weightedFailed.equals(ZERO)) && (weightedPassed.equals(BigDecimal.ZERO) || weightedPassed.equals(ZERO))) {    wrStatistics.setRawMark(Float.valueOf(0));    return wrStatistics;  }  float result=weightedPassed.divide(weightedPassed.add(weightedFailed),4,RoundingMode.HALF_UP).floatValue() * 100f;  wrStatistics.setRawMark(result);  return wrStatistics;}  }
class C{  private void launchAnimVectorList(){  if (!animatedVectorFirstLaunched) {    if (animatedVectorList.getLevel() < animatedVectorListMaxLevel) {      animatedVectorList.setLevel(animatedVectorList.getLevel() + 1);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    } else {      animatedVectorList.setLevel(0);      currentAnimatedVectorFromList=(AnimatedVectorDrawable)animatedVectorList.getCurrent();    }  } else {    animatedVectorFirstLaunched=false;  }  currentAnimatedVectorFromList.start();  uiHandler.postDelayed(uiRunnable,300 + 3000);}  }
class C{  protected void generateRows() throws JspException, BadElementException {  RowIterator rowIterator=this.model.getRowIterator(this.exportFull);  while (rowIterator.hasNext()) {    Row row=rowIterator.next();    ColumnIterator columnIterator=row.getColumnIterator(this.model.getHeaderCellList());    while (columnIterator.hasNext()) {      Column column=columnIterator.nextColumn();      Object value=column.getValue(this.decorated);      Cell cell=getCell(ObjectUtils.toString(value));      tablePDF.addCell(cell);    }  }}  }
class C{  public void deleteService(long serviceInfoId) throws PortalException, SystemException {  serviceFileTemplatePersistence.removeByServiceinfoId(serviceInfoId);  serviceInfoPersistence.remove(serviceInfoId);}  }
class C{  public LimeAssociationOption(ShellAssociation association,BooleanSetting setting,String name,String description){  this.association=association;  this.setting=setting;  this.name=name;  this.description=description;}  }
class C{  @Override public boolean add(Instance instance){  Instance newInstance=(Instance)instance.copy();  newInstance.setDataset(this);  m_Instances.add(newInstance);  return true;}  }
class C{  @Transient public boolean isDirty(){  return dirty;}  }
class C{  @Override public int hashCode(){  int result=field.hashCode();  result=31 * result + op.hashCode();  result=31 * result + value.hashCode();  result=31 * result + tokenExtInfo.hashCode();  return result;}  }
class C{  public CustomerExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static void append(Path file,Reader reader,String charset) throws IOException {  append(file,reader,charset,false);}  }
class C{  public byte[] toByteArray() throws MessagingException {  ByteArrayOutputStream headersBytes=new ByteArrayOutputStream();  writeTo(headersBytes);  return headersBytes.toByteArray();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Node firstC;  String childName;  int nodeType;  CharacterData employeeIDNode;  String employeeID;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  testEmployee=(Element)elementList.item(3);  firstC=testEmployee.getFirstChild();  nodeType=(int)firstC.getNodeType();  while (equals(3,nodeType)) {    firstC=firstC.getNextSibling();    nodeType=(int)firstC.getNodeType();  }  childName=firstC.getNodeName();  assertEqualsAutoCase("element","childName","em",childName);  employeeIDNode=(CharacterData)firstC.getFirstChild();  employeeID=employeeIDNode.getNodeValue();  assertEquals("employeeID","EMP0004",employeeID);}  }
class C{  private void handleUpdateSharedContext(EGLContext newSharedContext){  Log.d(TAG,"handleUpdatedSharedContext " + newSharedContext);  mInputWindowSurface.releaseEglSurface();  mInput.destroy();  mEglCore.release();  mEglCore=new EglCore(newSharedContext,EglCore.FLAG_RECORDABLE);  mInputWindowSurface.recreate(mEglCore);  mInputWindowSurface.makeCurrent();  mInput=new MagicCameraInputFilter();  mInput.init();  filter=MagicFilterFactory.initFilters(type);  if (filter != null) {    filter.init();    filter.onInputSizeChanged(mPreviewWidth,mPreviewHeight);    filter.onDisplaySizeChanged(mVideoWidth,mVideoHeight);  }}  }
class C{  public static boolean assertVersionOrder(BigDecimal b,BigDecimal a){  if (a != null && b != null) {    if (b.intValue() > a.intValue()) {      return true;    } else     if (b.intValue() == a.intValue()) {      int scaleB=b.scale();      BigDecimal scaledB=b.scaleByPowerOfTen(scaleB);      int scaleA=a.scale();      BigDecimal scaledA=a.scaleByPowerOfTen(scaleA);      return scaledB.compareTo(scaledA) > 0;    }  }  return false;}  }
class C{  public static void initConfig(Config config){  config.registerForUpdates(null);}  }
class C{  public AbstractMRMessage createOutPacket(){  return null;}  }
class C{  public static boolean copyFile(String sourceFilePath,String destFilePath){  InputStream inputStream=null;  try {    inputStream=new FileInputStream(sourceFilePath);  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }  return writeFile(destFilePath,inputStream);}  }
class C{  @Override public void startRDF() throws RDFHandlerException {}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  if (Debug.debugging("clock")) {    Debug.output("Clock: adding property change listener");  }  super.addPropertyChangeListener(TIMER_STATUS,pcl);  initializePropertyChangeListener(pcl);}  }
class C{  @GET @Path("locale1") @Produces("text/html") public Response locale1(){  return Response.ok(new Viewable("hello.jsp"),"application/xhtml+xml").language(Locale.UK).build();}  }
class C{  public void removeDatasource(String path){  if (StringUtils.isEmpty(path)) {    return;  }  for (int i=tvShowList.size() - 1; i >= 0; i--) {    TvShow tvShow=tvShowList.get(i);    if (new File(path).equals(new File(tvShow.getDataSource()))) {      removeTvShow(tvShow);    }  }}  }
class C{  private void unpackRules(byte[] rules){  startDay=rules[0];  startDayOfWeek=rules[1];  endDay=rules[2];  endDayOfWeek=rules[3];  if (rules.length >= 6) {    startTimeMode=rules[4];    endTimeMode=rules[5];  }}  }
class C{  @Override public void processElement(Wrapper<Element> elementWrapper){  Element element=elementWrapper.getContent();  element.setAttributes(getSortedAttributes(element));}  }
class C{  private static void streamCopy(InputStream inStream,OutputStream outStream) throws IOException {  byte[] temp=new byte[4096];  int bytesRead=inStream.read(temp);  while (bytesRead >= 0) {    outStream.write(temp,0,bytesRead);    bytesRead=inStream.read(temp);  }  inStream.close();  outStream.close();}  }
class C{  public String toString(int index){  if (index < 0 || index >= m_columns.length)   return "POInfo[" + getTableName() + "-(InvalidColumnIndex="+ index+ ")]";  return "POInfo[" + getTableName() + "-"+ m_columns[index].toString()+ "]";}  }
class C{  public Vset checkAssignOp(Environment env,Context ctx,Vset vset,Hashtable exp,Expression outside){  checkCommon(env,ctx,vset,exp,null,true);  if (implementation != null) {    return super.checkLHS(env,ctx,vset,exp);  }  if (field != null && field.isFinal()) {    env.error(where,"assign.to.final",id);  }  return vset;}  }
class C{  void error(String msg){  System.err.println("error: " + msg);  errors++;}  }
class C{  @Override public void create(IProgressMonitor monitor) throws CoreException, SdkException, ClassNotFoundException, BackingStoreException, IOException {  this.monitor=monitor;  boolean useGwt=natureIds.contains(GWTNature.NATURE_ID);  if (useGwt) {    IPath locationPath=URIUtil.toPath(locationURI);    if (!isGenerateEmptyProject) {      createGWTProject(monitor,packageName,locationPath.toOSString());    }    IPath projDirPath=locationPath.append(projectName);    projDirPath.append(".project").toFile().delete();    projDirPath.append(".classpath").toFile().delete();    projDirPath.append("README.txt").toFile().delete();  }  IProject project=createProject(monitor);  if (isGenerateEmptyProject) {    IPath classSourcePath=new Path("src/" + packageName.replace('.','/'));    ResourceUtils.createFolderStructure(project,classSourcePath);  }  project.refreshLocal(IResource.DEPTH_INFINITE,monitor);  createFiles(project);  NatureUtils.addNatures(project,natureIds);  createdJavaProject=JavaCore.create(project);  IResource warFolder=project.findMember(WebAppUtilities.DEFAULT_WAR_DIR_NAME);  boolean createWarFolders=(warFolder != null);  IFolder srcFolder=createFolders(project,createWarFolders,monitor);  if (createWarFolders) {    WebAppUtilities.setDefaultWarSettings(project);    WebAppUtilities.setOutputLocationToWebInfClasses(createdJavaProject,monitor);    Sdk gwtSdk=getGWTSdk();    setGwtSdk(gwtSdk);    if (gwtSdk != null) {      new GWTUpdateWebInfFolderCommand(createdJavaProject,gwtSdk).execute();    }  }  GdtPreferences.setProjectMigratorVersion(project,ProjectMigrator.CURRENT_VERSION);  if (!buildMaven) {    setProjectClasspath(createdJavaProject,srcFolder,monitor);  }  if (!buildMaven) {    createLaunchConfig(project);  }  jobSetupFacets(project);  includeExtensionPartipants();}  }
class C{  private void showCompletion(){  this.textEditor.showCompletionProposals();}  }
class C{  public static String reflectionToString(final Object object,final ToStringStyle style){  return ReflectionToStringBuilder.toString(object,style);}  }
class C{  public static void endSection(){  if (ExoPlayerLibraryInfo.TRACE_ENABLED && Util.SDK_INT >= 18) {    endSectionV18();  }}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public String[] splitAndSQLEscape() throws QueryException {  if (pathString == null)   throwException(QueryMessage.EX_EMPTY_PATH);  int pathLen=pathString.length;  ArrayList<String> result=new ArrayList<String>(10);  StringBuilder sb=new StringBuilder(Math.max(pathLen * 2 + 2,128));  boolean inQuotes=false;  boolean inArray=false;  boolean needsQuotes=false;  boolean allowArray=true;  boolean afterArray=false;  boolean quotedStep=false;  int pos=0;  sb.append(SQL_DELIMITER);  if (pathLen == 0) {    allowArray=false;    needsQuotes=true;  }  while (pos < pathString.length) {    char currentChar=pathString[pos];switch (currentChar) {case SEG_DELIMITER:      if ((afterArray) || (quotedStep))       throwPathException(QueryMessage.EX_MISSING_STEP_DOT,pos);    if (!inQuotes) {      if (sb.length() > 1)       throwPathException(QueryMessage.EX_BAD_BACKQUOTE,pos);      inQuotes=true;      ++pos;      break;    }  ++pos;if (pos < pathString.length) {  currentChar=pathString[pos];  if (currentChar == SEG_DELIMITER) {    sb.append(currentChar);    ++pos;    needsQuotes=true;    break;  }}if (sb.length() == 1) {needsQuotes=true;}inQuotes=false;quotedStep=true;break;case ARRAY_STOP:if (inArray) {inArray=false;String arrStep=buildArrayStep(sb);validateArrayStep(arrStep);result.add(arrStep);afterArray=true;++pos;break;} else if (!inQuotes) {if (currentChar == ARRAY_STOP) throwPathException(QueryMessage.EX_PATH_SYNTAX_ERROR,pos);}case ARRAY_START:case STEP_SEPARATOR:if ((!inQuotes) && (!inArray)) {inArray=(currentChar == ARRAY_START);if ((sb.length() > 1) || quotedStep) {result.add(buildStep(sb,needsQuotes,quotedStep));} else if (!inArray) {if (!afterArray) {result.add(buildStep(sb,true,quotedStep));}} else {if (!allowArray) {result.add(buildStep(sb,true,quotedStep));}}quotedStep=false;allowArray=inArray;needsQuotes=false;afterArray=false;++pos;if (inArray) {sb.setLength(0);sb.append(ARRAY_START);} else {if (pos >= pathString.length) {needsQuotes=true;}}break;}default :if ((afterArray) || (quotedStep)) throwPathException(QueryMessage.EX_MISSING_STEP_DOT,pos);allowArray=true;if (currentChar == '\'') {sb.append(currentChar);sb.append(currentChar);needsQuotes=true;} else if ((currentChar == SQL_DELIMITER) || (currentChar == ESCAPE_CHAR)) {needsQuotes=true;sb.append(ESCAPE_CHAR);sb.append(currentChar);} else if (currentChar < ' ') {sb.append(ESCAPE_CHAR);switch (currentChar) {case '\n':sb.append('n');break;case '\r':sb.append('r');break;case '\t':sb.append('t');break;default :Formatter fmt=new Formatter(sb);fmt.format("u%04x",(int)currentChar);fmt.close();break;}needsQuotes=true;} else {if (!needsQuotes) {int idx=ALPHA_NUM_UNDER.indexOf(currentChar);if (idx < 0) needsQuotes=true; else if ((sb.length() == 1) && (idx >= IS_DIGIT_POS)) needsQuotes=true;}sb.append(currentChar);}++pos;break;}}if (inArray) throwException(QueryMessage.EX_UNCLOSED_STEP,"array",new String(pathString));if (inQuotes) throwException(QueryMessage.EX_UNCLOSED_STEP,"quote",new String(pathString));if (sb.length() > 1 || !allowArray || quotedStep) result.add(buildStep(sb,needsQuotes,quotedStep));String[] stepArr=new String[result.size()];return (result.toArray(stepArr));}  }
class C{  public void sort(){  Arrays.sort(V,0,size());}  }
class C{  public void shutdown() throws IOException {  channel.close();}  }
class C{  public T mapRow(ResultSet rs,int rowNumber) throws SQLException {  Assert.state(this.mappedClass != null,"Mapped class was not specified");  T mappedObject=BeanUtils.instantiate(this.mappedClass);  BeanWrapper bw=PropertyAccessorFactory.forBeanPropertyAccess(mappedObject);  initBeanWrapper(bw);  ResultSetMetaData rsmd=rs.getMetaData();  int columnCount=rsmd.getColumnCount();  Set<String> populatedProperties=(isCheckFullyPopulated() ? new HashSet<String>() : null);  for (int index=1; index <= columnCount; index++) {    String column=JdbcUtils.lookupColumnName(rsmd,index);    String field=lowerCaseName(column.replaceAll(" ",""));    PropertyDescriptor pd=this.mappedFields.get(field);    if (pd != null) {      try {        Object value=getColumnValue(rs,index,pd);        if (rowNumber == 0 && logger.isDebugEnabled()) {          logger.debug("Mapping column '" + column + "' to property '"+ pd.getName()+ "' of type ["+ ClassUtils.getQualifiedName(pd.getPropertyType())+ "]");        }        try {          bw.setPropertyValue(pd.getName(),value);        } catch (        TypeMismatchException ex) {          if (value == null && this.primitivesDefaultedForNullValue) {            if (logger.isDebugEnabled()) {              logger.debug("Intercepted TypeMismatchException for row " + rowNumber + " and column '"+ column+ "' with null value when setting property '"+ pd.getName()+ "' of type ["+ ClassUtils.getQualifiedName(pd.getPropertyType())+ "] on object: "+ mappedObject,ex);            }          } else {            throw ex;          }        }        if (populatedProperties != null) {          populatedProperties.add(pd.getName());        }      } catch (      NotWritablePropertyException ex) {        throw new DataRetrievalFailureException("Unable to map column '" + column + "' to property '"+ pd.getName()+ "'",ex);      }    } else {      if (rowNumber == 0 && logger.isDebugEnabled()) {        logger.debug("No property found for column '" + column + "' mapped to field '"+ field+ "'");      }    }  }  if (populatedProperties != null && !populatedProperties.equals(this.mappedProperties)) {    throw new InvalidDataAccessApiUsageException("Given ResultSet does not contain all fields " + "necessary to populate object of class [" + this.mappedClass.getName() + "]: "+ this.mappedProperties);  }  return mappedObject;}  }
class C{  public void saveToFile(File temp,File destFile) throws IOException {  FileOutputStream stream=null;  lock.lock();  try {    stream=new FileOutputStream(temp);    saveToFileStream(stream);    stream.flush();    stream.getFD().sync();    stream.close();    stream=null;    if (Utils.isWindows()) {      File canonical=destFile.getCanonicalFile();      canonical.delete();      if (temp.renameTo(canonical))       return;      throw new IOException("Failed to rename " + temp + " to "+ canonical);    } else     if (!temp.renameTo(destFile)) {      throw new IOException("Failed to rename " + temp + " to "+ destFile);    }  } catch (  RuntimeException e) {    log.error("Failed whilst saving wallet",e);    throw e;  } finally {    lock.unlock();    if (stream != null) {      stream.close();    }  }}  }
class C{  private static int encodeText(CharSequence msg,int startpos,int count,StringBuilder sb,int initialSubmode){  StringBuilder tmp=new StringBuilder(count);  int submode=initialSubmode;  int idx=0;  while (true) {    char ch=msg.charAt(startpos + idx);switch (submode) {case SUBMODE_ALPHA:      if (isAlphaUpper(ch)) {        if (ch == ' ') {          tmp.append((char)26);        } else {          tmp.append((char)(ch - 65));        }      } else {        if (isAlphaLower(ch)) {          submode=SUBMODE_LOWER;          tmp.append((char)27);          continue;        } else         if (isMixed(ch)) {          submode=SUBMODE_MIXED;          tmp.append((char)28);          continue;        } else {          tmp.append((char)29);          tmp.append((char)PUNCTUATION[ch]);          break;        }      }    break;case SUBMODE_LOWER:  if (isAlphaLower(ch)) {    if (ch == ' ') {      tmp.append((char)26);    } else {      tmp.append((char)(ch - 97));    }  } else {    if (isAlphaUpper(ch)) {      tmp.append((char)27);      tmp.append((char)(ch - 65));      break;    } else     if (isMixed(ch)) {      submode=SUBMODE_MIXED;      tmp.append((char)28);      continue;    } else {      tmp.append((char)29);      tmp.append((char)PUNCTUATION[ch]);      break;    }  }break;case SUBMODE_MIXED:if (isMixed(ch)) {tmp.append((char)MIXED[ch]);} else {if (isAlphaUpper(ch)) {  submode=SUBMODE_ALPHA;  tmp.append((char)28);  continue;} else if (isAlphaLower(ch)) {  submode=SUBMODE_LOWER;  tmp.append((char)27);  continue;} else {  if (startpos + idx + 1 < count) {    char next=msg.charAt(startpos + idx + 1);    if (isPunctuation(next)) {      submode=SUBMODE_PUNCTUATION;      tmp.append((char)25);      continue;    }  }  tmp.append((char)29);  tmp.append((char)PUNCTUATION[ch]);}}break;default :if (isPunctuation(ch)) {tmp.append((char)PUNCTUATION[ch]);} else {submode=SUBMODE_ALPHA;tmp.append((char)29);continue;}}idx++;if (idx >= count) {break;}}char h=0;int len=tmp.length();for (int i=0; i < len; i++) {boolean odd=(i % 2) != 0;if (odd) {h=(char)((h * 30) + tmp.charAt(i));sb.append(h);} else {h=tmp.charAt(i);}}if ((len % 2) != 0) {sb.append((char)((h * 30) + 29));}return submode;}  }
class C{  @Override public XMLStreamReader createXMLStreamReader(Reader reader) throws XMLStreamException {  throw new XMLStreamException("The WBXML is a binary format!");}  }
class C{  public static String pythonEscape(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '\n':      sb.append("\\n");    break;case '\r':  sb.append("\\r");break;case '\t':sb.append("\\t");break;case '\\':sb.append("\\\\");break;case '\"':sb.append("\\\"");break;case '\'':sb.append("\\\'");break;default :sb.append(c);}}return sb.toString();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:48.739 -0500",hash_original_method="785911ECAA138D2E7940B3C09FD49889",hash_generated_method="E3AC2BDA6DE51767040D1673E2EC6B0A") static void parse(Reader r,Map<String,Object> map) throws ParseException, IOException {  final StreamTokenizer st=initTokenizer(r);  final String identifierPattern="[a-zA-Z_$][0-9a-zA-Z_$]*";  final Pattern propertyNamePattern=Pattern.compile("(" + identifierPattern + "\\.)*"+ identifierPattern);  while (true) {    int token;    token=st.nextToken();    if (token == StreamTokenizer.TT_EOF) {      break;    }    if (token != StreamTokenizer.TT_WORD) {      throw new ParseException(st,"type name");    }    final int type=interpretType(st.sval);    if (type == TYPE_ERROR) {      throw new ParseException(st,"valid type name");    }    st.sval=null;    if (type == TYPE_UNSET) {      token=st.nextToken();      if (token != '(') {        throw new ParseException(st,"'('");      }    }    token=st.nextToken();    if (token != StreamTokenizer.TT_WORD) {      throw new ParseException(st,"property name");    }    final String propertyName=st.sval;    if (!propertyNamePattern.matcher(propertyName).matches()) {      throw new ParseException(st,"valid property name");    }    st.sval=null;    if (type == TYPE_UNSET) {      token=st.nextToken();      if (token != ')') {        throw new ParseException(st,"')'");      }      map.remove(propertyName);    } else {      token=st.nextToken();      if (token != '=') {        throw new ParseException(st,"'='");      }      final Object value=parseValue(st,type);      final Object oldValue=map.remove(propertyName);      if (oldValue != null) {        if (value.getClass() != oldValue.getClass()) {          throw new ParseException(st,"(property previously declared as a different type)");        }      }      map.put(propertyName,value);    }    token=st.nextToken();    if (token != ';') {      throw new ParseException(st,"';'");    }  }}  }
class C{  public boolean canShare(){  if (this.getShareContent() == null) {    return false;  }  final AccessToken accessToken=AccessToken.getCurrentAccessToken();  if (accessToken == null) {    return false;  }  final Set<String> permissions=accessToken.getPermissions();  if (permissions == null) {    return false;  }  return (permissions.contains("publish_actions"));}  }
class C{  public static DefaultArrayAdapter adapt(Object array,ObjectWrapperAndUnwrapper wrapper){  final Class componentType=array.getClass().getComponentType();  if (componentType == null) {    throw new IllegalArgumentException("Not an array");  }  if (componentType.isPrimitive()) {    if (componentType == int.class) {      return new IntArrayAdapter((int[])array,wrapper);    }    if (componentType == double.class) {      return new DoubleArrayAdapter((double[])array,wrapper);    }    if (componentType == long.class) {      return new LongArrayAdapter((long[])array,wrapper);    }    if (componentType == boolean.class) {      return new BooleanArrayAdapter((boolean[])array,wrapper);    }    if (componentType == float.class) {      return new FloatArrayAdapter((float[])array,wrapper);    }    if (componentType == char.class) {      return new CharArrayAdapter((char[])array,wrapper);    }    if (componentType == short.class) {      return new ShortArrayAdapter((short[])array,wrapper);    }    if (componentType == byte.class) {      return new ByteArrayAdapter((byte[])array,wrapper);    }    return new GenericPrimitiveArrayAdapter(array,wrapper);  } else {    return new ObjectArrayAdapter((Object[])array,wrapper);  }}  }
class C{  public static double normalizeMinusHalfPiHalfPiFast(double angle){  if ((angle >= -Math.PI / 2) && (angle <= Math.PI / 2)) {    return angle;  }  double angleMinusPiPiOrSo=remainderTwoPiFast(angle);  if (angleMinusPiPiOrSo < -Math.PI / 2) {    return angleMinusPiPiOrSo + Math.PI;  } else   if (angleMinusPiPiOrSo > Math.PI / 2) {    return angleMinusPiPiOrSo - Math.PI;  } else {    return angleMinusPiPiOrSo;  }}  }
class C{  public static Sequence<IString> toIStringSequence(String[] arr){  return toIStringSequence(toIStringArray(arr));}  }
class C{  public void testGenKeyPair01() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator[] kpg=createKPGen();  assertNotNull("KeyPairGenerator objects were not created",kpg);  KeyPair kp, kp1;  SecureRandom rr=new SecureRandom();  for (int i=0; i < kpg.length; i++) {    kpg[i].initialize(512,rr);    kp=kpg[i].generateKeyPair();    kp1=kpg[i].genKeyPair();    assertFalse("Incorrect private key",kp.getPrivate().equals(kp1.getPrivate()));    assertFalse("Incorrect public key",kp.getPublic().equals(kp1.getPublic()));  }}  }
class C{  private Algorithm instantiateAlgorithm(AlgorithmProvider provider,String name,Properties properties,Problem problem){  try {    return provider.getAlgorithm(name,properties,problem);  } catch (  ServiceConfigurationError e) {    System.err.println(e.getMessage());  }  return null;}  }
class C{  public void clearCredentials(){  if (getCredentials() != null) {    Arrays.fill(getCredentials(),(char)0);  }}  }
class C{  public double testData(Vec data){  double d=dCaldO(data);  double n=v.length() * data.length() / ((double)v.length() + data.length());  return pValue(n,d);}  }
class C{  public void onEnd(Interaction iact){}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] copyOf(T[] original,int newLength){  return (T[])copyOf(original,newLength,original.getClass());}  }
class C{  public synchronized void mark(int readlimit){  in.mark(readlimit);}  }
class C{  public PSParser(byte[] data,int start){  this.data=data;  this.loc=start;}  }
class C{  public void tagDefineSound(int id,int format,int frequency,boolean bits16,boolean stereo,int sampleCount,byte[] soundData) throws IOException {  startTag(TAG_DEFINESOUND,id,true);  out.writeUBits(4,format);  out.writeUBits(2,frequency);  out.writeUBits(1,bits16 ? 1 : 0);  out.writeUBits(1,stereo ? 1 : 0);  out.writeUI32(sampleCount);  out.write(soundData);  completeTag();}  }
class C{  public void declineActiveList() throws XMPPException {  Privacy request=new Privacy();  request.setDeclineActiveList(true);  setRequest(request);}  }
class C{  public String format(Object object){  Type type=Type.CLASS_TO_TYPE.get(object.getClass());  if (type == null) {    return object.toString();  }switch (type) {case FLOAT:{      return format((float)((Float)object));    }case DOUBLE:{    return format((double)((Double)object));  }case BYTE:{  return format((byte)((Byte)object));}case SHORT:{return format((short)((Short)object));}case INTEGER:{return format((int)((Integer)object));}case LONG:{return format((long)((Long)object));}default :return object.toString();}}  }
class C{  public static int findInfractionCount(EntityManager em,PrincipalUser user,SubSystem subSystem,long startTime){  List<SuspensionRecord> records;  if (subSystem == null) {    records=findByUser(em,user);  } else {    SuspensionRecord record=findByUserAndSubsystem(em,user,subSystem);    records=record == null ? new ArrayList<SuspensionRecord>(0) : Arrays.asList(new SuspensionRecord[]{record});  }  int count=0;  for (  SuspensionRecord record : records) {    List<Long> timestamps=record.getInfractionHistory();    for (    Long timestamp : timestamps) {      if (timestamp > startTime) {        count++;      }    }  }  return count;}  }
class C{  public boolean cancel(Map settings){  return impl.cancel(settings);}  }
class C{  public void receiveResultqueryAssociatedLunsForPort(com.emc.storageos.vasa.VasaServiceStub.QueryAssociatedLunsForPortResponse result){}  }
class C{  public boolean isMultiValued(final String name){  return metadata.get(name) != null && metadata.get(name).length > 1;}  }
class C{  public void dumpThreads(){  log.info(getThreadDump());}  }
class C{  public static Config fromJsonObject(JsonObject json,Vertx vertx){  Config instance=new Config();  instance.json=json;  instance.vertx=vertx;  instance.readPackages();  instance.createServices();  instance.createTemplateEngines();  instance.createRateLimit();  instance.createAuthHandlers();  instance.webroot=json.getString("webroot","web/assets");  instance.assetsPath=json.getString("static-path","/assets");  instance.tplDir=json.getString("views-dir","web/views");  instance.displayErrors=json.getBoolean("display-errors",Boolean.FALSE);  instance.globalHandlers.add(BodyHandler.create());  return instance;}  }
class C{  public void writeMapEnd() throws IOException {  print("</map>");}  }
class C{  public BlockData(BlockType type,byte metadata){  this.type=type;  this.metadata=metadata;}  }
class C{  protected synchronized void loadValue(String sValue){  value=encode(sValue);}  }
class C{  public static boolean isPreparedStatementClusterError(Throwable e){  while (e != null) {    if (e instanceof InvalidQueryException && e.getMessage().contains(PREP_STATEMENT_CLUSTER_INSTANCE_ERROR))     return true;    e=e.getCause();  }  return false;}  }
class C{  public static ArrayList<HKey> collectMethodKeys(@NotNull PsiMethod method,HKey primaryKey){  return BytecodeAnalysisConverter.mkInOutKeys(method,primaryKey);}  }
class C{  private int writeEncryptedFrame(final byte[] input,final int off,final int len,final byte[] out,final int outOff) throws BadCiphertextException, AwsCryptoException {  if (frameNumber_ > Constants.MAX_FRAME_NUMBER) {    throw new AwsCryptoException("Frame number exceeded the maximum allowed value.");  }  if (out.length == 0) {    return 0;  }  int outLen=0;  byte[] contentAad;  if (isFinalFrame_ == true) {    contentAad=Utils.generateContentAad(messageId_,Constants.FINAL_FRAME_STRING_ID,(int)frameNumber_,len);  } else {    contentAad=Utils.generateContentAad(messageId_,Constants.FRAME_STRING_ID,(int)frameNumber_,frameSize_);  }  final byte[] nonce=new byte[nonceLen_];  RND.nextBytes(nonce);  final CipherHandler cipherHandler=new CipherHandler(encryptionKey_,nonce,contentAad,Cipher.ENCRYPT_MODE,cryptoAlgo_);  final byte[] encryptedBytes=cipherHandler.cipherData(input,off,len);  final int encryptedContentLen=encryptedBytes.length - tagLenBytes_;  final CipherFrameHeaders cipherFrameHeaders=new CipherFrameHeaders((int)frameNumber_,nonce,encryptedContentLen,isFinalFrame_);  final byte[] cipherFrameHeaderBytes=cipherFrameHeaders.toByteArray();  System.arraycopy(cipherFrameHeaderBytes,0,out,outOff + outLen,cipherFrameHeaderBytes.length);  outLen+=cipherFrameHeaderBytes.length;  System.arraycopy(encryptedBytes,0,out,outOff + outLen,encryptedBytes.length);  outLen+=encryptedBytes.length;  frameNumber_++;  return outLen;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void initScanner(final WebAppContext web,final Configs config){  int scanIntervalSeconds=config.getScanIntervalSeconds();  final ArrayList<File> scanList=new ArrayList<File>();  System.err.println("init scanning folders...");  if (config.getScanlist() != null) {    String[] items=config.getScanlist().split(File.pathSeparator);    for (    String item : items) {      File f=new File(item);      scanList.add(f);      System.err.println("add to scan list:" + item);    }  }  Scanner scanner=new Scanner();  scanner.setScanInterval(scanIntervalSeconds);  scanner.setScanDirs(scanList);  scanner.setRecursive(true);  scanner.setReportExistingFilesOnStartup(true);  scanner.addListener(new RJRFileChangeListener(web,config));  System.err.println("Starting scanner at interval of " + scanIntervalSeconds + " seconds.");  try {    scanner.start();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public BooleanMemberValue(ConstPool cp){  super('Z',cp);  setValue(false);}  }
class C{  public void deployContext(String path,URL config,URL war,boolean update,String tag) throws TomcatManagerException, IOException {  deployImpl(path,null,config,war,null,update,tag);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.980 -0500",hash_original_method="D878379E552A4E4CA3B2BC84B825D68D",hash_generated_method="7CD0606BCDE9409948B14414AD145835") public static long countInstancesOfClass(Class cls){  return cls.getTaintLong();}  }
class C{  public void writeToObject(Object object){  try {    Method method=BeanUtils.getWriteMethod(object.getClass(),getName(),getType());    if (method != null) {      method.invoke(object,new Object[]{getValue()});    }  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected DatabaseConnection newDatabaseConnection() throws Exception {  DatabaseConnection result;  checkEnv();  if (m_CustomPropsFile != null) {    File pFile=new File(m_CustomPropsFile.getPath());    String pPath=m_CustomPropsFile.getPath();    try {      pPath=m_env.substitute(pPath);      pFile=new File(pPath);    } catch (    Exception ex) {    }    result=new DatabaseConnection(pFile);  } else {    result=new DatabaseConnection();  }  m_pseudoIncremental=false;  m_checkForTable=true;  String props=result.getProperties().getProperty("nominalToStringLimit");  m_nominalToStringLimit=Integer.parseInt(props);  m_idColumn=result.getProperties().getProperty("idColumn");  if (result.getProperties().getProperty("checkForTable","").equalsIgnoreCase("FALSE")) {    m_checkForTable=false;  }  return result;}  }
class C{  public void testLongValue(){  DoubleAccumulator ai=new DoubleAccumulator(null,0.0);  assertEquals(0,ai.longValue());  ai.accumulate(1.0);  assertEquals(1,ai.longValue());}  }
class C{  private static IClasspathEntry[] computeClasspathEntries(IVMInstallType vm,JavaProject project,String environmentId){  LibraryLocation[] libs=null;  boolean overrideJavaDoc=false;  if (libs == null) {    libs=getLibraryLocations(vm);    overrideJavaDoc=true;  }  IAccessRule[][] rules=null;  IExecutionEnvironment environment=JavaRuntime.getEnvironment(environmentId);  if (environment != null) {    rules=environment.getAccessRules(vm,libs,project);  }  RuleKey key=null;  if (vm != null && rules != null && environmentId != null) {    key=new RuleKey(vm,environmentId);    RuleEntry entry=fgClasspathEntriesWithRules.get(key);    if (entry != null && entry.equals(rules)) {      return entry.getClasspathEntries();    }  }  List<IClasspathEntry> entries=new ArrayList<IClasspathEntry>(libs.length);  for (int i=0; i < libs.length; i++) {    if (!libs[i].getSystemLibraryPath().isEmpty()) {      IPath sourcePath=libs[i].getSystemLibrarySourcePath();      if (sourcePath.isEmpty()) {        sourcePath=null;      }      IPath rootPath=libs[i].getPackageRootPath();      if (rootPath.isEmpty()) {        rootPath=null;      }      IClasspathAttribute[] attributes=JREContainer.buildClasspathAttributes(vm,libs[i],overrideJavaDoc);      IAccessRule[] libRules=null;      if (rules != null) {        libRules=rules[i];      } else {        libRules=EMPTY_RULES;      }      entries.add(JavaCore.newLibraryEntry(libs[i].getSystemLibraryPath(),sourcePath,rootPath,libRules,attributes,false));    }  }  IClasspathEntry[] cpEntries=entries.toArray(new IClasspathEntry[entries.size()]);  if (key != null && rules != null) {    fgClasspathEntriesWithRules.put(key,new RuleEntry(rules,cpEntries));  }  return cpEntries;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);  layout_progress.setVisibility(View.GONE);  txt_progresstext.setVisibility(View.GONE);}  }
class C{  public static void showGroupNodeCommentDialog(final JFrame parent,final CGroupNode node){  final DialogEditGroupNodeComment dlg=new DialogEditGroupNodeComment(parent,node);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);}  }
class C{  private void scrollIntoSlots(){  if (getChildCount() == 0 || mSelectedChild == null)   return;  int selectedCenter=getCenterOfView(mSelectedChild);  int targetCenter=getCenterOfGallery();  int scrollAmount=targetCenter - selectedCenter;  if (scrollAmount != 0) {    mFlingRunnable.startUsingDistance(scrollAmount);  } else {    onFinishedMovement();  }}  }
class C{  public void addToDistPrefs(String distPref,String level){  this.distPrefs.add(distPref);  this.distPrefLevels.add(level);}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  SessionTracker(Context context,Session.StatusCallback callback,Session session){  this(context,callback,session,true);}  }
class C{  public FilteredColdEmissionHandler(final double simulationEndTime,final int noOfTimeBins,final Network network,final AreaFilter areaFilter){  this(simulationEndTime,noOfTimeBins,null,null,network,areaFilter);  LOGGER.info("Area filtering is used, result will include links falls inside the given shape and persons from all user groups.");}  }
class C{  @Deprecated public void peerDeparture(final Seed peer,final String cause){  if (peer == null)   return;  if (Network.log.isFine())   Network.log.fine("connect: no contact to a " + peer.get(Seed.PEERTYPE,Seed.PEERTYPE_VIRGIN) + " peer '"+ peer.getName()+ "' at "+ peer.getIPs()+ ". Cause: "+ cause);synchronized (this.seedDB) {    peer.put(Seed.DCT,Long.toString(System.currentTimeMillis()));    this.seedDB.addDisconnected(peer);  }  EventChannel.channels(EventChannel.PEERNEWS).addMessage(new RSSMessage(peer.getName() + " left the network","",""));}  }
class C{  public Vector2D multiply(double d){  return create(x * d,y * d);}  }
class C{  public long nextRequest(){  return ++requestSequence;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DShowTVPlayer.getDisableSWDecoding());}  }
class C{  private void initConfigurationValues(){  if (properties != null && properties.containsKey(MAX_SUBREQUEST_PROPERTY)) {    try {      maxSubrequestCount=Integer.parseInt((String)properties.get(MAX_SUBREQUEST_PROPERTY));      log.info("Setting maximum allowed subrequest count to " + maxSubrequestCount + " from properties");    } catch (    Exception e) {      maxSubrequestCount=MAX_SUBREQUEST_COUNT_DEFAULT;      log.warn("Setting maximum allowed subrequest count to a default of " + maxSubrequestCount + ", since defined value for "+ MAX_SUBREQUEST_PROPERTY+ " in properties is not a number");    }  } else {    maxSubrequestCount=MAX_SUBREQUEST_COUNT_DEFAULT;    log.warn("Setting maximum allowed subrequest count to a default of " + maxSubrequestCount + ", since no property "+ MAX_SUBREQUEST_PROPERTY+ " is defined!");  }  if (properties != null && properties.containsKey(MAX_RECURSION_DEPTH_PROPERTY)) {    try {      maxRecursionDepth=Integer.parseInt((String)properties.get(MAX_RECURSION_DEPTH_PROPERTY));      log.info("Setting default recursion depth to " + maxRecursionDepth + " from properties");    } catch (    Exception e) {      maxRecursionDepth=RECURSION_DEPTH_DEFAULT;      log.warn("Setting default recursion depth to a default of " + maxRecursionDepth + ", since defined value for "+ MAX_RECURSION_DEPTH_PROPERTY+ " in properties is not a number");    }  } else {    maxRecursionDepth=RECURSION_DEPTH_DEFAULT;    log.warn("Setting default recursion depth to a default of " + maxRecursionDepth + ", since no property "+ MAX_RECURSION_DEPTH_PROPERTY+ " is defined!");  }}  }
class C{  private static final String toXml(Shape shape){  StringBuilder sb=new StringBuilder();  sb.append("<Shape Id=\"").append(shape.getId()).append("\" xsi:type=\"");  String c=XmlGenerator.toXml(shape.getCenter(),"LocalCenter");  if (shape instanceof Circle) {    sb.append("Circle\">").append(c).append("<Radius>").append(((Circle)shape).getRadius()).append("</Radius>");  } else   if (shape instanceof Rectangle) {    Rectangle r=(Rectangle)shape;    sb.append("Rectangle\">").append(c).append("<Width>").append(r.getWidth()).append("</Width>").append("<Height>").append(r.getHeight()).append("</Height>").append("<LocalRotation>").append(Math.toDegrees(r.getRotation())).append("</LocalRotation>");  } else   if (shape instanceof Triangle) {    Triangle t=(Triangle)shape;    Vector2[] vs=t.getVertices();    sb.append("Triangle\">").append(c);    for (    Vector2 v : vs) {      sb.append(XmlGenerator.toXml(v,"Vertex"));    }  } else   if (shape instanceof Polygon) {    Polygon p=(Polygon)shape;    Vector2[] vs=p.getVertices();    sb.append("Polygon\">").append(c);    for (    Vector2 v : vs) {      sb.append(XmlGenerator.toXml(v,"Vertex"));    }  } else   if (shape instanceof Segment) {    Segment s=(Segment)shape;    Vector2[] vs=s.getVertices();    sb.append("Segment\">").append(c);    for (    Vector2 v : vs) {      sb.append(XmlGenerator.toXml(v,"Vertex"));    }  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),shape.getClass().getName()));  }  sb.append("</Shape>");  return sb.toString();}  }
class C{  @SuppressWarnings("unused") private void debugTime(String s,boolean collectGarbage){  if (false) {    if (collectGarbage) {      System.gc();    }    System.out.println(s + ": " + System.currentTimeMillis());  }}  }
class C{  final public void enable_tracing(){}  }
class C{  public CeylonRepoManagerBuilder systemRepo(String systemRepo){  this.systemRepo=systemRepo;  return this;}  }
class C{  private int awdGetGeomLength(Geometry3D geom){  return 24 + (geom.getNumIndices() * 2) + (geom.getNumVertices() * 4)+ (geom.getNormals().limit() * 4)+ (geom.getTextureCoords().limit() * 4);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public InlineQueryResultCachedPhotoBuilder title(String title){  this.title=title;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.184 -0400",hash_original_method="BA30CC8B6C14BA4F77F27F8299494DCA",hash_generated_method="ADDF9B8A39453F5A97A1C92C5AEA6E21") public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  private void addMoney(String slot,RPObject object){  HashMap<String,RPObject> set=money.get(slot);  String id=object.get("id");  boolean add=false;  if ("money".equals(object.get("class"))) {    add=true;  }  if (set == null) {    if (add) {      set=new HashMap<String,RPObject>();      money.put(slot,set);    }  } else   if (set.containsKey(id) && object.has("quantity")) {    add=true;  }  if (add) {    set.put(object.get("id"),object);    updateMoney();  }}  }
class C{  @Deprecated public VolumeRestRep checkFullCopyProgress(URI id,URI copyId){  return client.post(VolumeRestRep.class,getFullCopyUrl() + "/{copyId}/check-progress",id,copyId);}  }
class C{  public double outresScore(final int s,long[] subspace,DBIDRef id,KernelDensityEstimator kernel){  double score=1.0;  final SubspaceEuclideanDistanceFunction df=new SubspaceEuclideanDistanceFunction(subspace);  MeanVariance meanv=new MeanVariance();  for (int i=s; i < kernel.dim; i++) {    if (BitsUtil.get(subspace,i)) {      continue;    }    BitsUtil.setI(subspace,i);    df.setSelectedDimensions(subspace);    final double adjustedEps=kernel.adjustedEps(kernel.dim);    final double range=adjustedEps * 2.;    RangeQuery<V> rq=QueryUtil.getRangeQuery(kernel.relation,df,range);    DoubleDBIDList neighc=rq.getRangeForDBID(id,range);    DoubleDBIDList neigh=refineRange(neighc,adjustedEps);    if (neigh.size() > 2) {      if (relevantSubspace(subspace,neigh,kernel)) {        final double density=kernel.subspaceDensity(subspace,neigh);        meanv.reset();        for (DoubleDBIDListIter neighbor=neigh.iter(); neighbor.valid(); neighbor.advance()) {          DoubleDBIDList n2=subsetNeighborhoodQuery(neighc,neighbor,df,adjustedEps,kernel);          meanv.put(kernel.subspaceDensity(subspace,n2));        }        final double deviation=(meanv.getMean() - density) / (2. * meanv.getSampleStddev());        if (deviation >= 1) {          score*=(density / deviation);        }        score*=outresScore(i + 1,subspace,id,kernel);      }    }    BitsUtil.clearI(subspace,i);  }  return score;}  }
class C{  public void clearNonCustomConstraints(){  clearAdminConstraint();  clearUserConstraint();}  }
class C{  int useCache(SolrCache sc,int numGets,int maxKey,int seed){  int ret=0;  Random r=new Random(seed);  for (int i=0; i < numGets; i++) {    Integer k=r.nextInt(maxKey);    Integer v=(Integer)sc.get(k);    if (v == null) {      sc.put(k,k);      ret++;    }  }  return ret;}  }
class C{  public boolean isSameDate(CalendarDate date){  return getDayOfWeek() == date.getDayOfWeek() && getMonth() == date.getMonth() && getYear() == date.getYear() && getEra() == date.getEra();}  }
class C{  @Override public void addPages(){  page=new NewGraphMLPage(getSelection());  addPage(page);}  }
class C{  public static EWMA fiveMinuteEWMA(){  return new EWMA(M5_ALPHA,5,TimeUnit.SECONDS);}  }
class C{  public void clearParticipants(){  super.removeElement(Who.KEY);}  }
class C{  private static void Starting(String name){  if (Parameters.Debug) {    start=Debug.now();    ToolIO.out.println("Starting " + name);  }}  }
class C{  public static void mergeOutput(String table,String tablePrefix,int numberOfPartitions,Connection connection){  StringBuilder mergeOutputQuery=new StringBuilder();  mergeOutputQuery.append("INSERT INTO ");  mergeOutputQuery.append(table);  for (int i=0; i < numberOfPartitions; i++) {    mergeOutputQuery.append("\n");    mergeOutputQuery.append("SELECT * FROM ");    mergeOutputQuery.append(tablePrefix);    mergeOutputQuery.append(table);    mergeOutputQuery.append("_");    mergeOutputQuery.append(i);    if (i != numberOfPartitions - 1) {      mergeOutputQuery.append("\n");      mergeOutputQuery.append("UNION ALL");    }  }  LOG.info("Merge output: ");  LOG.info(mergeOutputQuery);  executeStatement(mergeOutputQuery.toString(),connection);}  }
class C{  public static boolean isURL(Object value){  String str=Caster.toString(value,null);  if (str == null)   return false;  if (str.indexOf(':') == -1)   return false;  str=str.toLowerCase().trim();  if (!str.startsWith("http://") && !str.startsWith("https://") && !str.startsWith("file://")&& !str.startsWith("ftp://")&& !str.startsWith("mailto:")&& !str.startsWith("news:")&& !str.startsWith("urn:"))   return false;  try {    URI uri=new URI(str);    String proto=uri.getScheme();    if (proto == null)     return false;    if (proto.equals("http") || proto.equals("https") || proto.equals("file")|| proto.equals("ftp")) {      if (uri.getHost() == null)       return false;      String path=uri.getPath();      if (path != null) {        int len=path.length();        for (int i=0; i < len; i++) {          if ("?<>:*|\"".indexOf(path.charAt(i)) > -1)           return false;        }      }    }    return true;  } catch (  Exception ex) {    return false;  }}  }
class C{  Entry<K,V> find(Object key,int hash){  int index=hash & mask;  Entry<K,V> e=entries[index];  while (e != null && !e.key.equals(key)) {    e=e.mapNext;  }  return e;}  }
class C{  private void internalFlush(NextFilter nextFilter,IoSession session,IoBuffer buf) throws Exception {  IoBuffer tmp=null;synchronized (buf) {    buf.flip();    tmp=buf.duplicate();    buf.clear();  }  logger.debug("Flushing buffer: {}",tmp);  nextFilter.filterWrite(session,new DefaultWriteRequest(tmp));}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  RocPoint(RocPoint other){  this(other.mThreshold,other.mTruePositives,other.mFalsePositives,other.mRawTruePositives);}  }
class C{  public boolean isShapeOutlineVisible(){  return this.shapeOutlineVisible;}  }
class C{  public static String formatTimeStamp(long timeStamp){  SimpleDateFormat formatter=new SimpleDateFormat("hh:mm a");  Calendar calendar=Calendar.getInstance();  calendar.setTimeInMillis(timeStamp);  return formatter.format(calendar.getTime());}  }
class C{  public final MutableDouble2D multiply(Double2D other,final double val){  x=other.x * val;  y=other.y * val;  return this;}  }
class C{  protected static boolean isPchar(char c){  return isUnreserved(c) || isSubDelimiter(c) || c == ':' || c == '@';}  }
class C{  private void buildBranch(Object parent,int depth,Container destination){  Vector children=model.getChildren(parent);  int size=children.size();  Integer depthVal=new Integer(depth + 1);  for (int iter=0; iter < size; iter++) {    final Object current=children.elementAt(iter);    Component nodeComponent=createNode(current,depth);    if (model.isLeaf(current)) {      destination.addComponent(nodeComponent);      bindNodeListener(new Handler(current),nodeComponent);    } else {      Container componentArea=new Container(new BorderLayout());      componentArea.addComponent(BorderLayout.NORTH,nodeComponent);      destination.addComponent(componentArea);      bindNodeListener(expansionListener,nodeComponent);    }    nodeComponent.putClientProperty(KEY_OBJECT,current);    nodeComponent.putClientProperty(KEY_PARENT,parent);    nodeComponent.putClientProperty(KEY_DEPTH,depthVal);  }}  }
class C{  RetryHttpRequestInitializer(@Nullable HttpRequestInitializer chained,NanoClock nanoClock,Sleeper sleeper,Collection<Integer> additionalIgnoredResponseCodes,HttpResponseInterceptor responseInterceptor){  this.chained=chained;  this.nanoClock=nanoClock;  this.sleeper=sleeper;  this.ignoredResponseCodes.addAll(additionalIgnoredResponseCodes);  this.responseInterceptor=responseInterceptor;}  }
class C{  Range(int from,int to,Range next){  this.from=from;  this.to=to;  this.next=next;}  }
class C{  protected boolean isCacheUndeployed(Ignite g){  return !(g.configuration().getMarshaller() instanceof BinaryMarshaller);}  }
class C{  public void blacklistApps(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {}  }
class C{  public boolean isNativeEt(){  return nativeEt && NativeSupport.isSupportNativeET();}  }
class C{  @Override public boolean isClosed(){  return channel.isClosed();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__CHARACTER:    setCharacter(CHARACTER_EDEFAULT);  return;case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__SEQUENCE:setSequence(SEQUENCE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public XmlHandler addAnnotatedClassAll(Class<?>... classes){  try {    addClasses(true,classes);  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public ParseException(Exception e){  exception=e;  lineNumber=-1;  columnNumber=-1;}  }
class C{  private void manipulateDynamicClientResponse(Map<String,String> result){  String responseStatus;  if (result != null) {    responseStatus=result.get(Constants.STATUS);    if (Constants.Status.CREATED.equals(responseStatus)) {      String dynamicClientResponse=result.get(Constants.RESPONSE);      if (dynamicClientResponse != null) {        Preference.putString(context,getResources().getString(R.string.shared_pref_client_credentials),dynamicClientResponse);        startAuthentication();      }    } else {      CommonDialogUtils.stopProgressDialog(progressDialog);      showAuthenticationError();    }  } else {    CommonDialogUtils.stopProgressDialog(progressDialog);    showAuthenticationError();  }}  }
class C{  private static <T>ThrottlingQueue<T> createQueue(String throttlingQueueName){  Config config=ConfigFactory.load();  String throttlingQueueType=config.getString(DEFAULT_THROTTLINGQUEUE_PROPERTY_KEY);  String customConfigPath=ConfigUtil.joinPath(throttlingQueueName);  if (config.getConfig(CUSTOM_THROTTLINGQUEUE_KEY_PREFIX).hasPath(customConfigPath)) {    throttlingQueueType=config.getConfig(CUSTOM_THROTTLINGQUEUE_KEY_PREFIX).getString(customConfigPath);  }  ThrottlingQueue<T> instance=getThrottlingQueueInstance(throttlingQueueType,throttlingQueueName);  if (instance == null) {    throw new IllegalArgumentException("Invalid throttling queue type for " + throttlingQueueName + ": "+ throttlingQueueType);  }  return instance;}  }
class C{  public boolean hasWindowFocus(){  Window w=getWindow();  if (w != null) {    View d=w.getDecorView();    if (d != null) {      return d.hasWindowFocus();    }  }  return false;}  }
class C{  public void removeListener(final IInstructionListener listener){  m_listeners.removeListener(listener);}  }
class C{  protected static void filter(ExprEvaluator filterExprNode,Set<MultiKey<EventBean>> events,boolean isNewData,ExprEvaluatorContext exprEvaluatorContext){  for (Iterator<MultiKey<EventBean>> it=events.iterator(); it.hasNext(); ) {    MultiKey<EventBean> key=it.next();    EventBean[] eventArr=key.getArray();    Boolean matched=(Boolean)filterExprNode.evaluate(eventArr,isNewData,exprEvaluatorContext);    if ((matched == null) || (!matched)) {      it.remove();    }  }}  }
class C{  private static boolean isCased(int ch){  int type=Character.getType(ch);  if (type == Character.LOWERCASE_LETTER || type == Character.UPPERCASE_LETTER || type == Character.TITLECASE_LETTER) {    return true;  } else {    if ((ch >= 0x02B0) && (ch <= 0x02B8)) {      return true;    } else     if ((ch >= 0x02C0) && (ch <= 0x02C1)) {      return true;    } else     if ((ch >= 0x02E0) && (ch <= 0x02E4)) {      return true;    } else     if (ch == 0x0345) {      return true;    } else     if (ch == 0x037A) {      return true;    } else     if ((ch >= 0x1D2C) && (ch <= 0x1D61)) {      return true;    } else     if ((ch >= 0x2160) && (ch <= 0x217F)) {      return true;    } else     if ((ch >= 0x24B6) && (ch <= 0x24E9)) {      return true;    } else {      return false;    }  }}  }
class C{  @Transient public boolean containsTradeOrder(TradeOrder tradeOrder){  for (  TradeOrder item : this.getTradeOrders()) {    if (item.getOrderKey().equals(tradeOrder.getOrderKey())) {      return true;    }  }  return false;}  }
class C{  public GmDisapproved(){}  }
class C{  public PrintableComponent(JComponent component){  super();  m_Component=component;  m_AspectRatio=Double.NaN;  getComponent().addMouseListener(new PrintMouseListener(this));  getComponent().setToolTipText(getToolTipText(this));  initFileChooser();}  }
class C{  private void fsyncImpl(Result<Boolean> result,FsyncType fsyncType){  try {    flushData();    ArrayList<SegmentFsyncCallback> fsyncListeners=new ArrayList<>(_fsyncListeners);    _fsyncListeners.clear();    Result<Boolean> resultNext=result.then(null);    if (_isDirty || !fsyncType.isSchedule()) {      _isDirty=false;      try (OutStore sOut=_readWrite.openWrite(_segment.extent())){        if (fsyncType.isSchedule()) {          sOut.fsyncSchedule(resultNext);        } else {          sOut.fsync(resultNext);        }      }     } else {      resultNext.ok(true);    }  } catch (  Throwable e) {    e.printStackTrace();    result.fail(e);  }}  }
class C{  private void doAcquireShared(long arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  private void clearPhotonMapTexture(){  if (caps.GL_ARB_clear_texture) {    ARBClearTexture.glClearTexImage(photonMapTexture,0,GL_RG,GL_HALF_FLOAT,clearTexBuffer);  } else {    int texBuffer=glGenBuffers();    glBindBuffer(GL_PIXEL_UNPACK_BUFFER,texBuffer);    int size=2 * 2 * photonMapSize* photonMapSize* 6* boxes.length / 2;    glBufferData(GL_PIXEL_UNPACK_BUFFER,size,GL_STATIC_DRAW);    glClearBufferSubData(GL_PIXEL_UNPACK_BUFFER,GL_RG16F,0,size,GL_RG,GL_HALF_FLOAT,(ByteBuffer)null);    glBindTexture(GL_TEXTURE_CUBE_MAP_ARRAY,photonMapTexture);    glTexSubImage3D(GL_TEXTURE_CUBE_MAP_ARRAY,0,0,0,0,photonMapSize,photonMapSize,6 * boxes.length / 2,GL_RG,GL_HALF_FLOAT,0L);    glBindTexture(GL_TEXTURE_CUBE_MAP_ARRAY,0);    glBindBuffer(GL_PIXEL_UNPACK_BUFFER,0);    glDeleteBuffers(texBuffer);  }}  }
class C{  public static void main(String[] args) throws Exception {  new LoadStorePerfTest("test1000Transactions").run();}  }
class C{  @Override public String toString(){  if (off > 0) {    return super.toString();  } else {    return str;  }}  }
class C{  public boolean checkPassword(String password){  try {    RandomAccessFile raf=new RandomAccessFile(sLockPasswordFilename,"r");    final byte[] stored=new byte[(int)raf.length()];    int got=raf.read(stored,0,stored.length);    raf.close();    if (got <= 0) {      return true;    }    return Arrays.equals(stored,passwordToHash(password));  } catch (  FileNotFoundException fnfe) {    return true;  }catch (  IOException ioe) {    return true;  }}  }
class C{  public int readLEInt() throws IOException {  int byte1, byte2, byte3, byte4;synchronized (this) {    byte1=in.read();    byte2=in.read();    byte3=in.read();    byte4=in.read();  }  if (byte4 == -1) {    throw new EOFException();  }  return (byte4 << 24) + (byte3 << 16) + (byte2 << 8)+ byte1;}  }
class C{  private static List<AnchorURL> crawlingFileStart(final File crawlingFile,int timezoneOffset,final String crawlingFileContent) throws MalformedURLException, IOException, FileNotFoundException {  List<AnchorURL> hyperlinks_from_file;  final ContentScraper scraper=new ContentScraper(new DigestURL(crawlingFile),10000000,new VocabularyScraper(),timezoneOffset);  final Writer writer=new TransformerWriter(null,null,scraper,null,false);  if ((crawlingFileContent == null || crawlingFileContent.isEmpty()) && crawlingFile != null) {    if (!crawlingFile.exists()) {      throw new FileNotFoundException(crawlingFile.getAbsolutePath() + " does not exists");    }    if (!crawlingFile.isFile()) {      throw new FileNotFoundException(crawlingFile.getAbsolutePath() + " exists but is not a regular file");    }    if (!crawlingFile.canRead()) {      throw new IOException("Can not read : " + crawlingFile.getAbsolutePath());    }  }  if (crawlingFile != null) {    FileInputStream inStream=null;    try {      inStream=new FileInputStream(crawlingFile);      FileUtils.copy(inStream,writer);    }  finally {      if (inStream != null) {        try {          inStream.close();        } catch (        IOException ignoredException) {          ConcurrentLog.info("Crawler_p","Could not close crawlingFile : " + crawlingFile.getAbsolutePath());        }      }    }  } else {    FileUtils.copy(crawlingFileContent,writer);  }  writer.close();  hyperlinks_from_file=scraper.getAnchors();  return hyperlinks_from_file;}  }
class C{  private void initialize(Context context){  LayoutInflater mInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  mInflater.inflate(R.layout.driveimage,this,true);  driveLayout=(DriveImageViewLayout)findViewById(R.id.driveImageViewLayout);  imageView=(ImageView)findViewById(R.id.imageView);  driveLayout.bringToFront();}  }
class C{  public static URL parseURL(String url){  try {    try {      return new URI(url).toURL();    } catch (    URISyntaxException e) {      try {        if (url.startsWith("file:/")) {          return new URI("file",null,url.substring(5),null).toURL();        } else {          return URIUtil.fromString(url).toURL();        }      } catch (      URISyntaxException e1) {        LOG.error(e.getMessage(),e);        return new URL(url);      }    }  } catch (  MalformedURLException e) {    LOG.error(e.getMessage(),e);    return null;  }}  }
class C{  public static boolean isDocOperator(String opr){  boolean is=false;  if (opr.equals(SearchOpr.FULL_TEXT) || opr.equals(SearchOpr.FULL_TEXT_NOT))   is=true;  return is;}  }
class C{  public GenericFeed retrieveNextPageOfAccountInfoRequests(Link next) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return getFeed(new URL(next.getHref()),GenericFeed.class);}  }
class C{  public static Long valueOf(String string,int radix) throws NumberFormatException {  return valueOf(parseLong(string,radix));}  }
class C{  private final Object slotExchange(Object item,boolean timed,long ns){  Node p=participant.get();  Thread t=Thread.currentThread();  if (t.isInterrupted())   return null;  for (Node q; ; ) {    if ((q=slot) != null) {      if (U.compareAndSwapObject(this,SLOT,q,null)) {        Object v=q.item;        q.match=item;        Thread w=q.parked;        if (w != null)         U.unpark(w);        return v;      }      if (NCPU > 1 && bound == 0 && U.compareAndSwapInt(this,BOUND,0,SEQ))       arena=new Node[(FULL + 2) << ASHIFT];    } else     if (arena != null)     return null; else {      p.item=item;      if (U.compareAndSwapObject(this,SLOT,null,p))       break;      p.item=null;    }  }  int h=p.hash;  long end=timed ? System.nanoTime() + ns : 0L;  int spins=(NCPU > 1) ? SPINS : 1;  Object v;  while ((v=p.match) == null) {    if (spins > 0) {      h^=h << 1;      h^=h >>> 3;      h^=h << 10;      if (h == 0)       h=SPINS | (int)t.getId(); else       if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)       Thread.yield();    } else     if (slot != p)     spins=SPINS; else     if (!t.isInterrupted() && arena == null && (!timed || (ns=end - System.nanoTime()) > 0L)) {      U.putObject(t,BLOCKER,this);      p.parked=t;      if (slot == p)       U.park(false,ns);      p.parked=null;      U.putObject(t,BLOCKER,null);    } else     if (U.compareAndSwapObject(this,SLOT,p,null)) {      v=timed && ns <= 0L && !t.isInterrupted() ? TIMED_OUT : null;      break;    }  }  U.putOrderedObject(p,MATCH,null);  p.item=null;  p.hash=h;  return v;}  }
class C{  @Override public final String toString(String f){  StringBuilder buffer=new StringBuilder();  if (field == null || !field.equals(f)) {    buffer.append(field);    buffer.append(":");  }  buffer.append("\"");  int lastPos=-1;  for (int i=0; i < termArrays.length; ++i) {    Term[] terms=termArrays[i];    int position=positions[i];    if (i != 0) {      buffer.append(" ");      for (int j=1; j < (position - lastPos); j++) {        buffer.append("? ");      }    }    if (terms.length > 1) {      buffer.append("(");      for (int j=0; j < terms.length; j++) {        buffer.append(terms[j].text());        if (j < terms.length - 1)         buffer.append(" ");      }      buffer.append(")");    } else {      buffer.append(terms[0].text());    }    lastPos=position;  }  buffer.append("\"");  if (slop != 0) {    buffer.append("~");    buffer.append(slop);  }  return buffer.toString();}  }
class C{  public static void main(String[] args){  final DBMinimalFFDCDataCollector ffdcDBDataCollector=new DBMinimalFFDCDataCollector();  try {    final boolean isFFDCDBDataCollectionSuccessful=ffdcDBDataCollector.run(args);    logger.info(isFFDCDBDataCollectionSuccessful ? "FFDC DB Data Collection was successful." : "FFDC DB Data Collection failed.");  } catch (  AdeException e) {    logger.error("FFDC DB Data Collection failed.",e);  }}  }
class C{  static long[] pythagoreanTriple(int m,int n){  long M=m;  long N=n;  long result[]=new long[3];  result[0]=Math.abs(M * M - N * N);  result[1]=Math.abs(2 * M * N);  result[2]=Math.abs(M * M + N * N);  return result;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_RECORD___RECORD_ENTITY_1:    return recordEntity_1 != null && !recordEntity_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public CustomerOrderDeliveryDetServiceImpl(final GenericDAO<CustomerOrderDeliveryDet,Long> genericDao){  super(genericDao);}  }
class C{  public static void assertEquals(String message,Object expected,Object actual){  Assert.assertEquals(message,expected,actual);}  }
class C{  private void init(){  JPanel header=new JPanel(new BorderLayout());  header.add(initSettingPanel(),BorderLayout.WEST);  add(header,BorderLayout.NORTH);}  }
class C{  public static Node.Nodes parse(ParserController pc,String path,JspReader reader,Node parent,boolean isTagFile,boolean directivesOnly,URL jarFileUrl,String pageEnc,String jspConfigPageEnc,boolean isDefaultPageEncoding,boolean hasBom) throws JasperException {  Parser parser=new Parser(pc,reader,isTagFile,directivesOnly,jarFileUrl,hasBom);  Node.Root root=new Node.Root(reader.mark(),parent,false);  root.setPageEncoding(pageEnc);  root.setJspConfigPageEncoding(jspConfigPageEnc);  root.setIsDefaultPageEncoding(isDefaultPageEncoding);  root.setHasBom(hasBom);  if (hasBom) {    char bomChar=(char)reader.nextChar();    if (bomChar != 0xFEFF) {      parser.err.jspError(reader.mark(),"jsp.error.invalidBom",Integer.toHexString(bomChar).toUpperCase());    }  }  if (directivesOnly) {    parser.parseTagFileDirectives(root);    return new Node.Nodes(root);  }  PageInfo pageInfo=pc.getCompiler().getPageInfo();  if (parent == null) {    parser.addInclude(root,pageInfo.getIncludePrelude());  }  while (reader.hasMoreInput()) {    parser.parseElements(root);  }  if (parent == null) {    parser.addInclude(root,pageInfo.getIncludeCoda());    parser.pageInfo.setRootPath(path);  }  Node.Nodes page=new Node.Nodes(root);  return page;}  }
class C{  @Override public synchronized int hashCode(){  int result=1;  for (int i=0; i < elementCount; i++) {    result=(31 * result) + (elementData[i] == null ? 0 : elementData[i].hashCode());  }  return result;}  }
class C{  public String toString(){  return Short.toString(getValue());}  }
class C{  public float paint(Graphics2D g,float x,float y,RSyntaxTextArea host,TabExpander e,float clipStart){  int origX=(int)x;  int end=textOffset + textCount;  float nextX=x;  int flushLen=0;  int flushIndex=textOffset;  Color fg=host.getForegroundForToken(this);  Color bg=host.getBackgroundForTokenType(type);  g.setFont(host.getFontForTokenType(type));  FontMetrics fm=host.getFontMetricsForTokenType(type);  for (int i=textOffset; i < end; i++) {switch (text[i]) {case '\t':      nextX=e.nextTabStop(x + fm.charsWidth(text,flushIndex,flushLen),0);    if (bg != null) {      paintBackground(x,y,nextX - x,fm.getHeight(),g,fm.getAscent(),host,bg);    }  if (flushLen > 0) {    g.setColor(fg);    g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);    flushLen=0;  }flushIndex=i + 1;x=nextX;break;default :flushLen+=1;break;}}nextX=x + fm.charsWidth(text,flushIndex,flushLen);if (flushLen > 0 && nextX >= clipStart) {if (bg != null) {paintBackground(x,y,nextX - x,fm.getHeight(),g,fm.getAscent(),host,bg);}g.setColor(fg);g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);}if (host.getUnderlineForToken(this)) {g.setColor(fg);int y2=(int)(y + 1);g.drawLine(origX,y2,(int)nextX,y2);}return nextX;}  }
class C{  public void java_lang_Class_getComponentType(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  private void prepareRecommendedVolumes(VolumeCreate param,String task,TaskList taskList,Project project,VirtualArray originalVarray,VirtualPool originalVpool,Integer numberOfVolumesInRequest,List<Recommendation> recommendations,String volumeLabel,VirtualPoolCapabilityValuesWrapper capabilities,List<VolumeDescriptor> descriptors,List<URI> volumeURIs) throws APIException {  boolean isChangeVpool=false;  boolean isChangeVpoolForProtectedVolume=false;  boolean isSrcAndHaSwapped=VirtualPool.isRPVPlexProtectHASide(originalVpool);  boolean metroPointEnabled=VirtualPool.vPoolSpecifiesMetroPoint(originalVpool);  VirtualPoolCapabilityValuesWrapper copyOfCapabilities=new VirtualPoolCapabilityValuesWrapper(capabilities);  String volumeName=volumeLabel;  VirtualArray haVarray=null;  VirtualPool haVpool=null;  SwapContainer container=this.getBlockScheduler().new SwapContainer();  container.setSrcVarray(originalVarray);  container.setSrcVpool(originalVpool);  container.setHaVarray(haVarray);  container.setHaVpool(haVpool);  container=RecoverPointScheduler.initializeSwapContainer(container,_dbClient);  VirtualArray varray=container.getSrcVarray();  VirtualPool vpool=container.getSrcVpool();  BlockConsistencyGroup consistencyGroup=capabilities.getBlockConsistencyGroup() == null ? null : _dbClient.queryObject(BlockConsistencyGroup.class,capabilities.getBlockConsistencyGroup());  int totalVolumeCount=0;  Iterator<Recommendation> recommendationsIter=recommendations.iterator();  while (recommendationsIter.hasNext()) {    RPProtectionRecommendation rpProtectionRec=(RPProtectionRecommendation)recommendationsIter.next();    URI protectionSystemURI=rpProtectionRec.getProtectionDevice();    URI changeVpoolVolumeURI=rpProtectionRec.getVpoolChangeVolume();    Volume changeVpoolVolume=(changeVpoolVolumeURI == null ? null : _dbClient.queryObject(Volume.class,changeVpoolVolumeURI));    isChangeVpool=(changeVpoolVolumeURI != null);    isChangeVpoolForProtectedVolume=rpProtectionRec.isVpoolChangeProtectionAlreadyExists();    boolean addJournalForStandbySourceCopy=capabilities.getAddJournalCapacity() && (rpProtectionRec.getStandbyJournalRecommendation() != null);    String newVolumeLabel=volumeName;    String sourceCopyName=retrieveRpCopyName(originalVpool,varray,consistencyGroup,true);    String standbySourceCopyName="";    if (addJournalForStandbySourceCopy) {      standbySourceCopyName=retrieveRpCopyName(originalVpool,varray,consistencyGroup,true);    }    if (metroPointEnabled) {      haVarray=_dbClient.queryObject(VirtualArray.class,VPlexUtil.getHAVarray(originalVpool));      standbySourceCopyName=retrieveRpCopyName(originalVpool,haVarray,consistencyGroup,true);    }    StringBuffer volumeInfoBuffer=new StringBuffer();    volumeInfoBuffer.append(String.format(NEW_LINE));    try {      prepareRpJournals(rpProtectionRec,project,consistencyGroup,vpool,originalVpool,param,numberOfVolumesInRequest,newVolumeLabel,isChangeVpoolForProtectedVolume,copyOfCapabilities,protectionSystemURI,taskList,task,descriptors,volumeURIs,volumeInfoBuffer,sourceCopyName,standbySourceCopyName);    } catch (    Exception e) {      _log.error("Error trying to prepare RP Journal volumes",e);      throw APIException.badRequests.rpBlockApiImplPrepareVolumeException(newVolumeLabel);    }    if (rpProtectionRec.getSourceRecommendations() != null) {      for (      RPRecommendation sourceRec : rpProtectionRec.getSourceRecommendations()) {        List<Volume> allSourceVolumesInCG=BlockConsistencyGroupUtils.getActiveVplexVolumesInCG(consistencyGroup,_dbClient,Volume.PersonalityTypes.SOURCE);        if (metroPointEnabled && allSourceVolumesInCG.isEmpty()) {          validateMetroPointType(sourceRec.getMetroPointType());        }        int volumeCountInRec=sourceRec.getResourceCount();        if (isChangeVpoolForProtectedVolume) {          _log.info(String.format("Change Virtual Pool Protected: %d existing source volume(s) in CG [%s](%s) are affected.",allSourceVolumesInCG.size(),consistencyGroup.getLabel(),consistencyGroup.getId()));          volumeCountInRec=allSourceVolumesInCG.size();        }        RPRecommendation haRec=sourceRec.getHaRecommendation();        for (int volumeCount=0; volumeCount < volumeCountInRec; volumeCount++) {          sourceRec.setResourceCount(1);          if (haRec != null) {            haRec.setResourceCount(1);          }          newVolumeLabel=generateDefaultVolumeLabel(volumeName,totalVolumeCount,numberOfVolumesInRequest);          Volume preCreatedVolume=StorageScheduler.getPrecreatedVolume(_dbClient,taskList,newVolumeLabel);          String rsetName="RSet-" + newVolumeLabel;          totalVolumeCount++;          param.setName(newVolumeLabel);          Volume sourceVolume=null;          if (!isChangeVpoolForProtectedVolume) {            if (isChangeVpool) {              _log.info(String.format("Change Vpool, use existing Source Volume [%s].",changeVpoolVolume.getLabel()));            } else {              _log.info("Create RP Source Volume...");            }            sourceVolume=createRecoverPointVolume(sourceRec,newVolumeLabel,project,capabilities,consistencyGroup,param,protectionSystemURI,Volume.PersonalityTypes.SOURCE,rsetName,preCreatedVolume,null,taskList,task,sourceCopyName,descriptors,changeVpoolVolume,isChangeVpool,isSrcAndHaSwapped,true);          } else {            if (metroPointEnabled) {              _log.info("Upgrade to MetroPoint operation...");              for (              Volume sourceVol : allSourceVolumesInCG) {                _log.info(String.format("Update the source volume [%s](%s) with new standby journal.",sourceVol.getLabel(),sourceVol.getId()));                setInternalSitesForSourceBackingVolumes(sourceRec,haRec,sourceVol,true,false,originalVpool.getHaVarrayConnectedToRp(),sourceCopyName,standbySourceCopyName);                volumeURIs.add(sourceVol.getId());              }            } else {              _log.error("Error trying to upgrade to MetroPoint. Standby journal is null.");              throw APIException.badRequests.rpBlockApiImplPrepareVolumeException(newVolumeLabel);            }            break;          }          volumeURIs.add(sourceVolume.getId());          setInternalSitesForSourceBackingVolumes(sourceRec,haRec,sourceVolume,metroPointEnabled,isSrcAndHaSwapped,originalVpool.getHaVarrayConnectedToRp(),sourceCopyName,standbySourceCopyName);          List<URI> protectionTargets=new ArrayList<URI>();          for (          RPRecommendation targetRec : sourceRec.getTargetRecommendations()) {            protectionTargets.add(targetRec.getVirtualArray());            VirtualArray targetVirtualArray=_dbClient.queryObject(VirtualArray.class,targetRec.getVirtualArray());            _log.info(String.format("Create Target (%s)...",targetVirtualArray.getLabel()));            if (isChangeVpoolForProtectedVolume) {              Volume alreadyProvisionedTarget=RPHelper.findAlreadyProvisionedTargetVolume(changeVpoolVolume,targetRec.getVirtualArray(),_dbClient);              if (alreadyProvisionedTarget != null) {                _log.info(String.format("Existing target volume [%s] found for varray [%s].",alreadyProvisionedTarget.getLabel(),targetVirtualArray.getLabel()));                continue;              }            }            String targetVolumeName=new StringBuilder(newVolumeLabel).append(VOLUME_TYPE_TARGET + targetVirtualArray.getLabel()).toString();            Volume targetVolume=createRecoverPointVolume(targetRec,targetVolumeName,project,copyOfCapabilities,consistencyGroup,param,protectionSystemURI,Volume.PersonalityTypes.TARGET,rsetName,null,sourceVolume,taskList,task,targetRec.getRpCopyName(),descriptors,null,false,false,false);            volumeInfoBuffer.append(logVolumeInfo(targetVolume));            volumeURIs.add(targetVolume.getId());          }          if (metroPointEnabled && haRec.getTargetRecommendations() != null && !haRec.getTargetRecommendations().isEmpty()) {            for (            RPRecommendation standbyTargetRec : haRec.getTargetRecommendations()) {              VirtualArray standyTargetVirtualArray=_dbClient.queryObject(VirtualArray.class,standbyTargetRec.getVirtualArray());              _log.info(String.format("Create Standby Target (%s)..",standyTargetVirtualArray.getLabel()));              if (protectionTargets.contains(standbyTargetRec.getVirtualArray())) {                continue;              }              if (isChangeVpoolForProtectedVolume) {                Volume alreadyProvisionedTarget=RPHelper.findAlreadyProvisionedTargetVolume(changeVpoolVolume,standyTargetVirtualArray.getId(),_dbClient);                if (alreadyProvisionedTarget != null) {                  _log.info(String.format("Existing target volume [%s] found for varray [%s].",alreadyProvisionedTarget.getLabel(),standyTargetVirtualArray.getLabel()));                  continue;                }              }              String standbyTargetVolumeName=new StringBuilder(newVolumeLabel).append(VOLUME_TYPE_TARGET + standyTargetVirtualArray.getLabel()).toString();              Volume standbyTargetVolume=createRecoverPointVolume(standbyTargetRec,standbyTargetVolumeName,project,copyOfCapabilities,consistencyGroup,param,protectionSystemURI,Volume.PersonalityTypes.TARGET,rsetName,null,sourceVolume,taskList,task,standbyTargetRec.getRpCopyName(),descriptors,null,false,false,false);              volumeInfoBuffer.append(logVolumeInfo(standbyTargetVolume));              volumeURIs.add(standbyTargetVolume.getId());            }          }          volumeInfoBuffer.append(logVolumeInfo(sourceVolume));        }      }      volumeInfoBuffer.append(String.format(NEW_LINE));      _log.info(volumeInfoBuffer.toString());    }  }}  }
class C{  public FileDataProvider(File file){  this.inputFile=file;}  }
class C{  public static Sail createSail(final String file,final Option... args){  return createSail(new Properties(),file,args);}  }
class C{  @SuppressWarnings("nls") @RequestMapping("/visitsseries") public String barberShop(@RequestParam(value="echo",defaultValue="echo") String echo){  Collection<Barber> barbers=barberService.getAllBarbers();  ExecutorService executor=Executors.newFixedThreadPool(barbers.size());  String result=new Date().getTime() + ": " + " Barber Shop starts to work"+ "<br>";  for (  Barber barber : barbers) {    result+=new Date().getTime() + ": " + barber.getName()+ " start to work"+ "<br>";    executor.submit(new BarberShop(barber.getName(),barber.getHairCutPrice()));  }  Collection<Customer> customers=customerService.getAllCustomers();  for (  Customer customer : customers) {    result+=new Date().getTime() + ": " + customer.getName()+ " is comming in a queue"+ "<br>";    rabbitTemplate.convertAndSend(QUEUE_NAME,customer);    try {      Thread.sleep(200);    } catch (    InterruptedException e) {    }  }  return result;}  }
class C{  @Override protected void createMainViewerWindow(final int width,final int height){  if (GUI.debugFX) {    System.out.println("createMainViewerWindow : DONE ");  }  root.setTop(topPane);  root.setCenter(center);  root.setBottom(navButtons);  if (stage != null) {    scene=new Scene(root,width,height);    stage.setScene(scene);    stage.show();  }}  }
class C{  public Boolean isVmDirectPathGen2Active(){  return vmDirectPathGen2Active;}  }
class C{  private void initWidget(){  this.widgetCard=(ImageView)findViewById(R.id.widget_clock_day_card);  widgetCard.setVisibility(View.GONE);  this.widgetIcon=(ImageView)findViewById(R.id.widget_clock_day_icon);  this.widgetClock=(TextClock)findViewById(R.id.widget_clock_day_clock);  this.widgetDate=(TextView)findViewById(R.id.widget_clock_day_date);  this.widgetWeather=(TextView)findViewById(R.id.widget_clock_day_weather);  ImageView wallpaper=(ImageView)findViewById(R.id.activity_create_widget_clock_day_wall);  wallpaper.setImageDrawable(WallpaperManager.getInstance(this).getDrawable());  this.container=(CoordinatorLayout)findViewById(R.id.activity_create_widget_clock_day_container);  ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.spinner_text,nameList);  adapter.setDropDownViewResource(R.layout.spinner_text);  Spinner locationSpinner=(Spinner)findViewById(R.id.activity_create_widget_clock_day_spinner);  locationSpinner.setAdapter(adapter);  locationSpinner.setOnItemSelectedListener(this);  this.showCardSwitch=(Switch)findViewById(R.id.activity_create_widget_clock_day_showCardSwitch);  showCardSwitch.setOnCheckedChangeListener(new ShowCardSwitchCheckListener());  this.blackTextSwitch=(Switch)findViewById(R.id.activity_create_widget_clock_day_blackTextSwitch);  blackTextSwitch.setOnCheckedChangeListener(new BlackTextSwitchCheckListener());  Button doneButton=(Button)findViewById(R.id.activity_create_widget_clock_day_doneButton);  doneButton.setOnClickListener(this);}  }
class C{  public Stack(int capacity){  this.N=capacity;  this.i=-1;  this.v=new int[N];}  }
class C{  public final boolean contains(String key){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equals(key))     return true;  }  return false;}  }
class C{  public void discardUntil(int track,long timeUs){  Assertions.checkState(isPrepared());  sampleQueues.valueAt(track).discardUntil(timeUs);}  }
class C{  public static DoublesUnion build(Memory srcMem){  return new HeapDoublesUnion(srcMem);}  }
class C{  public void shutdown(){  shutdown=true;}  }
class C{  public int findLastVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,false,true);  return child == null ? NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  @Override public List<Class<? extends JavaScriptModule>> createJSModules(){  return new ArrayList<>();}  }
class C{  public boolean containsFile(File file){  return (file == null) ? false : xmlFiles.containsKey(file.getName());}  }
class C{  public PendingCall(String method){  super(method);}  }
class C{  public void addNotify(DropTargetContextPeer dtcp){  dropTargetContextPeer=dtcp;}  }
class C{  public static void fill(Object[] array,int start,int end,Object value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  protected void checkRowIndexes(int[] indexes){  for (int i=indexes.length; --i >= 0; ) {    int index=indexes[i];    if (index < 0 || index >= rows)     checkRow(index);  }}  }
class C{  protected ZonePlayerAndNPCTestImpl(final String zoneName,final String... npcNames){  super(zoneName);  assertTrue(npcNames.length > 0);  for (  final String npcName : npcNames) {    this.npcNames.add(npcName);  }}  }
class C{  public static boolean openRemoteTcpServer(EvoSuiteRemoteAddress remoteServer){  if (remoteServer == null) {    return false;  }  RemoteTcpServer server=new RemoteTcpServer(new EndPointInfo(remoteServer.getHost(),remoteServer.getPort(),VirtualNetwork.ConnectionType.TCP));  VirtualNetwork.getInstance().addRemoteTcpServer(server);  return true;}  }
class C{  public ServerCloneException(String s,Exception cause){  super(s);  initCause(null);  detail=cause;}  }
class C{  @Override public String toString(){  return getClass().getName() + "[attribute=" + myAttribute+ ", field="+ myField+ ", beginIndex="+ beginIndex+ ", endIndex="+ endIndex+ "]";}  }
class C{  public void vetoableChange(PropertyChangeEvent evc) throws PropertyVetoException {  if (evc.getSource() instanceof JInternalFrame) {    currentIFrame=(JInternalFrame)evc.getSource();    String name=evc.getPropertyName();    Object value=evc.getNewValue();    if (name.equals(JInternalFrame.IS_CLOSED_PROPERTY) && ((Boolean)value == Boolean.TRUE)) {    }  }}  }
class C{  private void assertServicesStillJoined(final Quorum<HAGlue,QuorumService<HAGlue>> quorum) throws QuorumException {  final UUID[] tmp=quorum.getJoined();  for (  UUID serviceId : joinedServiceIds) {    boolean found=false;    for (    UUID t : tmp) {      if (serviceId.equals(t)) {        found=true;        break;      }    }    if (!found) {      throw new QuorumException("Service leave during consensus protocol: " + serviceId);    }  }}  }
class C{  public static void run(AdSenseHost service,String adClientId) throws Exception {  System.out.println("=================================================================");  System.out.printf("Running report for ad client %s\n",adClientId);  System.out.println("=================================================================");  Date today=new Date();  Calendar calendar=Calendar.getInstance();  calendar.setTime(today);  calendar.add(Calendar.DATE,-7);  Date oneWeekAgo=calendar.getTime();  String startDate=DATE_FORMATTER.format(oneWeekAgo);  String endDate=DATE_FORMATTER.format(today);  Generate request=service.reports().generate(startDate,endDate);  request.setFilter(Arrays.asList("AD_CLIENT_ID==" + escapeFilterParameter(adClientId)));  request.setMetric(Arrays.asList("PAGE_VIEWS","AD_REQUESTS","AD_REQUESTS_COVERAGE","CLICKS","AD_REQUESTS_CTR","COST_PER_CLICK","AD_REQUESTS_RPM","EARNINGS"));  request.setDimension(Arrays.asList("DATE"));  request.setSort(Arrays.asList("+DATE"));  Report response=request.execute();  if ((response.getRows() != null) && !response.getRows().isEmpty()) {    for (    Report.Headers header : response.getHeaders()) {      System.out.printf("%25s",header.getName());    }    System.out.println();    for (    List<String> row : response.getRows()) {      for (      String column : row) {        System.out.printf("%25s",column);      }      System.out.println();    }    System.out.println();  } else {    System.out.println("No rows returned.");  }  System.out.println();}  }
class C{  public DDateTimeChooser(JDialog parent,String title,Date date){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(date);}  }
class C{  public Impp(String uri){  setUri(uri);}  }
class C{  public TextureReference initialize(GL10 gl,Paint textPaint,LabelData[] labels,Resources res,TextureManager textureManager){  mRes=res;  mTexture=textureManager.createTexture(gl);  mTexture.bind(gl);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MIN_FILTER,GL10.GL_NEAREST);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MAG_FILTER,GL10.GL_NEAREST);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_S,GL10.GL_CLAMP_TO_EDGE);  gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_T,GL10.GL_CLAMP_TO_EDGE);  gl.glTexEnvf(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_REPLACE);  int minHeight=addLabelsInternal(gl,textPaint,false,labels);  int roundedHeight=1;  while (roundedHeight < minHeight)   roundedHeight<<=1;  mStrikeHeight=roundedHeight;  mTexelWidth=(float)(1.0 / mStrikeWidth);  mTexelHeight=(float)(1.0 / mStrikeHeight);  beginAdding(gl);  addLabelsInternal(gl,textPaint,true,labels);  endAdding(gl);  return mTexture;}  }
class C{  private void randomize(Random rand){  polynomial.expandN(mDegree);  polynomial.randomize(rand);}  }
class C{  private void addJBossDescriptor() throws IOException, JDOMException {  InputStream in=null;  try {    in=getResource("WEB-INF/jboss-web.xml");    if (in != null) {      JBossWebXml descr=JBossWebXmlIo.parseJBossWebXml(in);      if (descr != null) {        this.webXml.addVendorDescriptor(descr);      }    }  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  private static String buildFilter(PivotField constraint){  Object value=constraint.getValue();  if (null == value) {    return "-" + constraint.getField() + ":[* TO *]";  }  String prefix="{!term f=" + constraint.getField() + "}";  if (value instanceof Date) {    return prefix + TrieDateField.formatExternal((Date)value);  } else {    return prefix + value;  }}  }
class C{  public Properties toProperties(){  Properties props=new Properties();  flatten(props);  props=convertValuesToString(props);  return props;}  }
class C{  public T caseKeyDefinition_(KeyDefinition_ object){  return null;}  }
class C{  public void checkTableControlDecorations(){  TableViewer activeTableViewer=getActiveTableViewer();  Object sensorClass=activeTableViewer.getTable().getData();  for (  List<AbstractClassSensorAssignment<?>> assignments : configToAssignmentMap.values()) {    for (    AbstractClassSensorAssignment<?> assignment : assignments) {      if (!Objects.equals(sensorClass,assignment.getSensorConfigClass())) {        continue;      }      Set<ValidationState> states=super.getValidationErrorStates(assignment);      if (CollectionUtils.isNotEmpty(states)) {        tableItemControlDecorationManager.showTableItemControlDecoration(activeTableViewer,assignment,TextFormatter.getErroMessageFull(assignment,states));      } else {        tableItemControlDecorationManager.hideTableItemControlDecoration(activeTableViewer,assignment);      }    }  }}  }
class C{  public static Bitmap takeScreenshotBitmap(Activity activity){  if (activity == null) {    throw new IllegalArgumentException("Parameter activity cannot be null.");  }  try {    return takeBitmapUnchecked(activity);  } catch (  Exception e) {    String message="Unable to take screenshot to bitmap of activity " + activity.getClass().getName();    Log.e(TAG,message,e);    throw new UnableToTakeScreenshotException(message,e);  }}  }
class C{  public FromSelectStatementPiece join(List<Axis> axes,SimpleQuery inner) throws SQLScopeException, ScopeException {  FromSelectStatementPiece from=select.from(inner.select);  for (  Axis axis : axes) {    AxisMapping m=inner.getMapper().find(axis);    if (m != null) {      ISelectPiece source=m.getPiece();      ExpressionAST expr=axis.getDefinition();      IPiece target=select.createPiece(Context.WHERE,expr);      IPiece[] p=new IPiece[2];      p[0]=new SubSelectReferencePiece(from,source);      p[1]=target;      IPiece where=new OperatorPiece(OperatorScope.getDefault().lookupByID(IntrinsicOperators.EQUAL),p);      select.getStatement().getConditionalPieces().add(new WherePiece(where));    } else {      throw new SQLScopeException("cannot join the queries using that axis");    }  }  return from;}  }
class C{  public static ScriptEngine $static_propertyMissing(ScriptEngineManager self,String languageShortName){  ScriptEngineManager manager=new ScriptEngineManager();  return manager.getEngineByName(languageShortName);}  }
class C{  synchronized public long findNext(final long timestamp){  if (timestamp < 0L)   throw new IllegalArgumentException();  final long index=findIndexOf(Math.abs(timestamp)) + 1;  if (index == nentries) {    return -1L;  }  return decodeKey(keyAt(index));}  }
class C{  private void loadClassifiers(Instances data) throws Exception {  for (  String path : m_classifiersToLoad) {    if (Environment.containsEnvVariables(path)) {      try {        path=m_env.substitute(path);      } catch (      Exception ex) {      }    }    File toLoad=new File(path);    if (!toLoad.isFile()) {      throw new Exception("\"" + path + "\" does not seem to be a valid file!");    }    ObjectInputStream is=new ObjectInputStream(new BufferedInputStream(new FileInputStream(toLoad)));    Object c=is.readObject();    if (!(c instanceof Classifier)) {      is.close();      throw new Exception("\"" + path + "\" does not contain a classifier!");    }    Object header=null;    header=is.readObject();    if (header instanceof Instances) {      if (data != null && !data.equalHeaders((Instances)header)) {        is.close();        throw new Exception("\"" + path + "\" was trained with data that is "+ "of a differnet structure than the incoming training data");      }    }    if (header == null) {      System.out.println("[Vote] warning: no header instances for \"" + path + "\"");    }    is.close();    addPreBuiltClassifier((Classifier)c);  }}  }
class C{  public void draw(){  for (  GLWave wave : waves) {    wave.draw();  }  rectangle.draw();  for (  GLBubble bubble : usedBubbles) {    bubble.draw();  }}  }
class C{  @Override public void write(int oneByte) throws IOException {  byte[] buf=new byte[1];  buf[0]=(byte)oneByte;  this.write(buf);}  }
class C{  public boolean virtualReturnBoolean(byte val0,char val1,short val2,int val3,long val4,float val5,double val6,Object val7,boolean val8){  return val8;}  }
class C{  public static InetAddress increment(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0xff) {    addr[i]=0;    i--;  }  Preconditions.checkArgument(i >= 0,"Incrementing %s would wrap.",address);  addr[i]++;  return bytesToInetAddress(addr);}  }
class C{  public final DoubleGrid3D truncate(){  double[][] fieldx=null;  double[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       fieldxy[z]=(int)fieldxy[z];    }  }  return this;}  }
class C{  public static PVRChannelEPGListFragment newInstance(Integer channelId){  PVRChannelEPGListFragment fragment=new PVRChannelEPGListFragment();  Bundle args=new Bundle();  args.putInt(BUNDLE_KEY_CHANNELID,channelId);  fragment.setArguments(args);  return fragment;}  }
class C{  EppCommandOperations(CurrencyUnit currency,BaseFee... feesAndCredits){  this.currency=checkArgumentNotNull(currency,"Currency may not be null in EppCommandOperations.");  ImmutableList.Builder<Fee> feeBuilder=new ImmutableList.Builder<>();  ImmutableList.Builder<Credit> creditBuilder=new ImmutableList.Builder<>();  for (  BaseFee feeOrCredit : feesAndCredits) {    if (feeOrCredit instanceof Credit) {      creditBuilder.add((Credit)feeOrCredit);    } else {      feeBuilder.add((Fee)feeOrCredit);    }  }  this.fees=feeBuilder.build();  this.credits=creditBuilder.build();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SGraphPackage.REGION__VERTICES:    return getVertices();case SGraphPackage.REGION__COMPOSITE:  if (resolve)   return getComposite();return basicGetComposite();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Sign(){  super(Number.class,Number.class);}  }
class C{  public void append(){  addArg("append");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static ExtensionObject binaryEncode(Structure encodeable,IEncodeableSerializer serializer,EncoderContext ctx) throws EncodingException {  ctx.setEncodeableSerializer(serializer);  EncoderCalc calc=new EncoderCalc();  calc.setEncoderContext(ctx);  serializer.calcEncodeable(encodeable.getClass(),encodeable,calc);  byte[] data=new byte[calc.getLength()];  BinaryEncoder enc=new BinaryEncoder(data);  enc.setEncoderMode(EncoderMode.NonStrict);  enc.setEncoderContext(ctx);  enc.putEncodeable(null,encodeable);  return new ExtensionObject(encodeable.getBinaryEncodeId(),data);}  }
class C{  public TransactionHit txShipping(Double value){  setDouble(TRANSACTION_SHIPPING,value);  return this;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if ((target != null) && (e != null)) {    if ((!target.isEditable()) || (!target.isEnabled())) {      return;    }    String content=e.getActionCommand();    int mod=e.getModifiers();    if ((content != null) && (content.length() > 0)) {      boolean isPrintableMask=true;      Toolkit tk=Toolkit.getDefaultToolkit();      if (tk instanceof SunToolkit) {        isPrintableMask=((SunToolkit)tk).isPrintableCharacterModifiersMask(mod);      }      if (isPrintableMask) {        char c=content.charAt(0);        if ((c >= 0x20) && (c != 0x7F)) {          target.replaceSelection(content);        }      }    }  }}  }
class C{  private boolean shouldAppendCharsetParam(String... propertyValueList){  if (!mShouldAppendCharsetParam) {    return false;  }  for (  String propertyValue : propertyValueList) {    if (!VCardUtils.containsOnlyPrintableAscii(propertyValue)) {      return true;    }  }  return false;}  }
class C{  public void validate() throws org.apache.thrift.TException {  if (type == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());  }  if (url == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'url' was not present! Struct: " + toString());  }}  }
class C{  public void addOperator(Variation operator){  operators.add(operator);}  }
class C{  public void addButtonActionPerformed(){  jmri.util.JmriJFrame addFrame=new AddNodeFrame(itc);  try {    addFrame.initComponents();  } catch (  Exception ex) {    log.error("Exception initializing Frame: {}",ex.toString());    return;  }  addFrame.setVisible(true);}  }
class C{  public ByteArrayDataProvider(byte[] bytes){  this.bytes=Arrays.copyOf(bytes,bytes.length);}  }
class C{  private VNXeBase prepareHostsForExport(List<VNXeHostInitiator> hostInitiators){  String hostId=null;  Set<VNXeHostInitiator> notExistingInits=new HashSet<VNXeHostInitiator>();  Set<VNXeHostInitiator> existingNoHostInits=new HashSet<VNXeHostInitiator>();  String hostOsType=null;  for (  VNXeHostInitiator init : hostInitiators) {    VNXeHostInitiator existingInit=null;    HostInitiatorRequest initReq=new HostInitiatorRequest(_khClient);    existingInit=initReq.getByIQNorWWN(init.getInitiatorId());    if (existingInit != null && existingInit.getParentHost() != null) {      hostId=existingInit.getParentHost().getId();    } else     if (existingInit != null) {      existingNoHostInits.add(existingInit);    } else {      notExistingInits.add(init);    }    if (hostOsType == null) {      hostOsType=init.getHostOsType();    }  }  if (hostId == null) {    HostListRequest hostReq=new HostListRequest(_khClient);    HostCreateParam hostCreateParm=new HostCreateParam();    hostCreateParm.setName(hostInitiators.get(0).getName());    hostCreateParm.setType(HostTypeEnum.HOSTMANUAL.getValue());    if (isUnityClient() && hostOsType != null) {      hostCreateParm.setOsType(hostOsType);    }    VNXeCommandResult result=hostReq.createHost(hostCreateParm);    hostId=result.getId();  }  for (  VNXeHostInitiator newInit : notExistingInits) {    HostInitiatorCreateParam initCreateParam=new HostInitiatorCreateParam();    VNXeBase host=new VNXeBase(hostId);    initCreateParam.setHost(host);    if (newInit.getType() == HostInitiatorTypeEnum.INITIATOR_TYPE_ISCSI) {      initCreateParam.setInitiatorType(HostInitiatorTypeEnum.INITIATOR_TYPE_ISCSI.getValue());      initCreateParam.setInitiatorWWNorIqn(newInit.getChapUserName());      initCreateParam.setChapUser(newInit.getChapUserName());    } else {      initCreateParam.setInitiatorType(HostInitiatorTypeEnum.INITIATOR_TYPE_FC.getValue());      initCreateParam.setInitiatorWWNorIqn(newInit.getInitiatorId());    }    HostInitiatorRequest req=new HostInitiatorRequest(_khClient);    try {      req.createHostInitiator(initCreateParam);    } catch (    VNXeException e) {      String message=e.getMessage();      if (message != null && message.contains(VNXeConstants.INITIATOR_EXISITNG)) {        _logger.info("The initiator exists. Ignore the error.");      } else {        throw e;      }    }  }  for (  VNXeHostInitiator exitInit : existingNoHostInits) {    HostInitiatorModifyParam initModifyParam=new HostInitiatorModifyParam();    VNXeBase host=new VNXeBase(hostId);    initModifyParam.setHost(host);    HostInitiatorRequest req=new HostInitiatorRequest(_khClient);    req.modifyHostInitiator(initModifyParam,exitInit.getId());  }  return new VNXeBase(hostId);}  }
class C{  public Thread newThread(final Runnable runnable){synchronized (this) {    return new UpdateThread(WorkspaceUpdater.this,runnable,nextThread++);  }}  }
class C{  public JCIdent Super(Type t,TypeSymbol owner){  return Ident(new VarSymbol(FINAL,names._super,t,owner));}  }
class C{  public Angle add(double radians){  double newVal=radians + this.radians;  while (newVal > twoPI)   newVal-=twoPI;  while (newVal < 0)   newVal+=twoPI;  return new Angle(newVal);}  }
class C{  @Override public boolean shouldExecute(){  EntityLivingBase entitylivingbase=this.thePet.getOwner();  if (entitylivingbase == null) {    return false;  } else   if (entitylivingbase instanceof EntityPlayer && ((EntityPlayer)entitylivingbase).isSpectator()) {    return false;  } else   if (this.thePet.getDistanceSqToEntity(entitylivingbase) < this.minDist * this.minDist) {    return false;  } else {    this.theOwner=entitylivingbase;    return true;  }}  }
class C{  public String str(){  if (null == m_strCache)   m_strCache=new String((char[])m_obj,m_start,m_length);  return m_strCache;}  }
class C{  public PermissionCollection newPermissionCollection(){  return new CryptoPermissionCollection();}  }
class C{  public static boolean resolve(Context context){  boolean enable=resolveEnable(context);  if (!enable) {    AlertDialog alertDialog=createDialog(context);    alertDialog.show();  }  return enable;}  }
class C{  public void removeListener(final IDebuggerChooserPanelListener listener){  m_listeners.removeListener(listener);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.BOUND_THIS_TYPE_REF__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  getAstStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__STRUCTURAL_TYPE:setStructuralType((TStructuralType)newValue);return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();getGenStructuralMembers().addAll((Collection<? extends TStructMember>)newValue);return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();getPostponedSubstitutions().addAll((Collection<? extends TypeVariableMapping>)newValue);return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__ACTUAL_THIS_TYPE_REF:setActualThisTypeRef((ParameterizedTypeRef)newValue);return;case TypeRefsPackage.BOUND_THIS_TYPE_REF__DEFINED_TYPING_STRATEGY:setDefinedTypingStrategy((TypingStrategy)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override protected final boolean doControlLogic() throws AdeException, TrainingPredconditionException {  final Set<ISource> sources=ArgumentConstants.getAnalysisGroupSourcesFromArgument(m_analysisGroupId);  m_traceOn=true;  System.out.printf("Start VerifyLinuxTraining for analysis group %s \n",m_analysisGroupId);  System.out.println("\tSources:");  for (  ISource source : sources) {    System.out.println("\t " + source.getSourceId());  }  final MessageMetrics metrics=computeMessageMetrics(a_ade,sources,m_startDate,m_endDate);  checkMessageDensity(metrics);  System.out.println("\nMessage traffic is sufficient for training.\n");  return true;}  }
class C{  private static String collectionToDelimitedString(final Collection<String> coll,final String delim,final String prefix,final String suffix){  if (coll == null || coll.isEmpty()) {    return EMPTY;  }  final StringBuffer sb=new StringBuffer();  final Iterator<String> it=coll.iterator();  while (it.hasNext()) {    sb.append(prefix).append(it.next()).append(suffix);    if (it.hasNext()) {      sb.append(delim);    }  }  return sb.toString();}  }
class C{  public static void iterate(Collection collection,Command command) throws Exception {  iterate(collection.iterator(),command);}  }
class C{  public static <T1,T2,T3,T4,T5,R>BiFunction<T4,T5,R> partial5(final T1 t1,final T2 t2,final T3 t3,final QuintFunction<T1,T2,T3,T4,T5,R> quintFunc){  return null;}  }
class C{  @SuppressWarnings("unchecked") public Object limitedValue(Object value){  Object result;switch (checkRange(value,minValue,maxValue)) {case RC_BELOW_RANGE:    result=minValue;  break;case RC_ABOVE_RANGE:result=maxValue;break;default :result=value;}return result;}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  private Collection<URI> filterVolumes(Collection<URI> volumeURIs,ExportMask exportMask){  List<URI> volumes=new ArrayList<URI>();  for (  URI volumeURI : volumeURIs) {    BlockObject volume=BlockObject.fetch(_dbClient,volumeURI);    if (volume.getStorageController().equals(exportMask.getStorageDevice())) {      volumes.add(volume.getId());    }  }  return volumes;}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public static <F>SimpleFastFeatureIndex<F> load(Stream<F> features){  SimpleFastFeatureIndex<F> featureIndex=new SimpleFastFeatureIndex<>();  features.forEach(null);  return featureIndex;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANG_1:    return codeLang_1 != null && !codeLang_1.isEmpty();case UmplePackage.ANONYMOUS_MORE_CODE_1__CODE_LANGS_1:  return codeLangs_1 != null && !codeLangs_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public SeaGlassSplitPaneDivider(BasicSplitPaneUI ui){  super(ui);  oneTouchSize=DefaultLookup.getInt(ui.getSplitPane(),ui,"SplitPane.oneTouchButtonSize",ONE_TOUCH_SIZE);  oneTouchOffset=DefaultLookup.getInt(ui.getSplitPane(),ui,"SplitPane.oneTouchButtonOffset",ONE_TOUCH_OFFSET);  centerOneTouchButtons=DefaultLookup.getBoolean(ui.getSplitPane(),ui,"SplitPane.centerOneTouchButtons",true);  oneTouchVOffset=DefaultLookup.getInt(ui.getSplitPane(),ui,"SplitPane.oneTouchButtonVOffset",0);  setLayout(new DividerLayout());}  }
class C{  public static PdfWriter initFooter(Document document,OutputStream outputStream) throws DocumentException, IOException {  PdfWriter iWriter=PdfWriter.getInstance(document,outputStream);  iWriter.setPageEvent(new PdfEventHandler());  return iWriter;}  }
class C{  public final void init(Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  if (spi != null) {    spi.engineInit(key,params,random);  } else {    chooseProvider(I_PARAMS,key,params,random);  }  if (!skipDebug && pdebug != null) {    pdebug.println("KeyAgreement." + algorithm + " algorithm from: "+ this.provider.getName());  }}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs) {    if (null != m_name_avt)     m_name_avt.callVisitors(visitor);    if (null != m_namespace_avt)     m_namespace_avt.callVisitors(visitor);  }  super.callChildVisitors(visitor,callAttrs);}  }
class C{  private void cleanImport(long trackId){  if (trackId != -1L) {    MyTracksProviderUtils myTracksProviderUtils=MyTracksProviderUtils.Factory.get(context);    myTracksProviderUtils.deleteTrack(context,trackId);  }  if (importTrackId != -1L) {    File dir=FileUtils.getPhotoDir(importTrackId);    if (FileUtils.isDirectory(dir)) {      for (      File file : dir.listFiles()) {        file.delete();      }      dir.delete();      FileUtils.updateMediaScanner(context,Uri.fromFile(dir));    }  }}  }
class C{  void rollback(){  checkValid();  conn.prepareCommand("ROLLBACK TO SAVEPOINT " + getName(name,savepointId),Integer.MAX_VALUE).executeUpdate();}  }
class C{  public static Page create(MVMap<?,?> map,long version,Object[] keys,Object[] values,PageReference[] children,long totalCount,int memory){  Page p=new Page(map,version);  p.keys=keys;  p.values=values;  p.children=children;  p.totalCount=totalCount;  if (memory == 0) {    p.recalculateMemory();  } else {    p.addMemory(memory);  }  MVStore store=map.store;  if (store != null) {    store.registerUnsavedPage(p.memory);  }  return p;}  }
class C{  private void trace(){  glUseProgram(rayTracingProgram);  if (mouseDown) {    currRotationAboutY=rotationAboutY + (mouseX - mouseDownX) * 0.01f;  } else {    currRotationAboutY=rotationAboutY;  }  cameraPosition.set((float)sin(-currRotationAboutY) * 3.0f,2.0f,(float)cos(-currRotationAboutY) * 3.0f);  viewMatrix.setLookAt(cameraPosition,cameraLookAt,cameraUp);  if (resetFramebuffer) {    projMatrix.setPerspective((float)Math.toRadians(60.0f),(float)width / height,1f,2f);    resizeFramebufferTexture();    resetFramebuffer=false;  }  projMatrix.invertPerspectiveView(viewMatrix,invViewProjMatrix);  updateCameraSettingsUbo();  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  float blendFactor=frameNumber / (frameNumber + 1.0f);  glUniform1f(blendFactorUniform,blendFactor);  glUniform1i(bounceCountUniform,bounceCount);  glUniform1f(widthUniform,width);  glUniform1f(heightUniform,height);  glBindBufferBase(GL_UNIFORM_BUFFER,this.cameraSettingsUboBinding,this.cameraSettingsUbo);  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,tex);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glBindFramebuffer(GL_FRAMEBUFFER,0);  glUseProgram(0);  glBindBufferBase(GL_UNIFORM_BUFFER,this.cameraSettingsUboBinding,0);  frameNumber++;}  }
class C{  public void parseArguments(String[] arguments) throws ArgumentException {  int[] optionIndex=new int[arguments.length];  for (int i=0; i < optionIndex.length; i++) {    optionIndex[i]=-1;  }  for (int i=0; i < options.length; i++) {    Option option=options[i];    int index=findArgument(arguments,option.label);    if (index != -1) {      if (optionIndex[index] != -1) {        throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");      }      String arg=arguments[index].substring(option.label.length() + 1);      optionIndex[index]=i;      option.isAvailable=true;      if (option instanceof IntegerArrayOption) {        IntegerArrayOption o=(IntegerArrayOption)option;        o.values=new int[o.count];        int k=index;        int j=0;        while (j < o.count) {          if (arg.length() > 0) {            StringTokenizer tokenizer=new StringTokenizer(arg,",\t ");            while (tokenizer.hasMoreTokens()) {              String token=tokenizer.nextToken();              if (token.length() > 0) {                try {                  o.values[j]=Integer.parseInt(token);                } catch (                NumberFormatException nfe) {                  throw new ArgumentException("Argument, " + arguments[index] + " has a bad integer value: "+ token);                }                if (o.values[j] > o.maxValue || o.values[j] < o.minValue) {                  throw new ArgumentException("Argument, " + arguments[index] + " has a bad integer value: "+ token);                }                j++;              }            }          }          k++;          if (j < o.count) {            if (k >= arguments.length) {              throw new ArgumentException("Argument, " + arguments[index] + " is missing one or more values: expecting "+ o.count+ " integers");            }            if (optionIndex[k] != -1) {              throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");            }            arg=arguments[k];            optionIndex[k]=i;          }        }      } else       if (option instanceof IntegerOption) {        IntegerOption o=(IntegerOption)option;        if (arg.length() == 0) {          int k=index + 1;          if (k >= arguments.length) {            throw new ArgumentException("Argument, " + arguments[index] + " is missing its value: expecting an integer");          }          if (optionIndex[k] != -1) {            throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");          }          arg=arguments[k];          optionIndex[k]=i;        }        try {          o.value=Integer.parseInt(arg);        } catch (        NumberFormatException nfe) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad integer value: "+ arg);        }        if (o.value > o.maxValue || o.value < o.minValue) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad integer value: "+ arg);        }      } else       if (option instanceof RealArrayOption) {        RealArrayOption o=(RealArrayOption)option;        o.values=new double[o.count];        int k=index;        int j=0;        while (j < o.count) {          if (arg.length() > 0) {            StringTokenizer tokenizer=new StringTokenizer(arg,",\t ");            while (tokenizer.hasMoreTokens()) {              String token=tokenizer.nextToken();              if (token.length() > 0) {                try {                  o.values[j]=Double.parseDouble(token);                } catch (                NumberFormatException nfe) {                  throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ token);                }                if (o.values[j] > o.maxValue || o.values[j] < o.minValue) {                  throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ token);                }                j++;              }            }          }          k++;          if (j < o.count) {            if (k >= arguments.length) {              throw new ArgumentException("Argument, " + arguments[index] + " is missing one or more values: expecting "+ o.count+ " integers");            }            if (optionIndex[k] != -1) {              throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");            }            arg=arguments[k];            optionIndex[k]=i;          }        }      } else       if (option instanceof RealOption) {        RealOption o=(RealOption)option;        if (arg.length() == 0) {          int k=index + 1;          if (k >= arguments.length) {            throw new ArgumentException("Argument, " + arguments[index] + " is missing its value: expecting a real number");          }          if (optionIndex[k] != -1) {            throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");          }          arg=arguments[k];          optionIndex[k]=i;        }        try {          o.value=Double.parseDouble(arg);        } catch (        NumberFormatException nfe) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ arg);        }        if (o.value > o.maxValue || o.value < o.minValue) {          throw new ArgumentException("Argument, " + arguments[index] + " has a bad real value: "+ arg);        }      } else       if (option instanceof StringOption) {        StringOption o=(StringOption)option;        if (arg.length() == 0) {          int k=index + 1;          if (k >= arguments.length) {            throw new ArgumentException("Argument, " + arguments[index] + " is missing its value: expecting a string");          }          if (optionIndex[k] != -1) {            throw new ArgumentException("Argument, " + arguments[index] + " overlaps with another argument");          }          arg=arguments[k];          optionIndex[k]=i;        }        o.value=arg;        if (o.options != null) {          boolean found=false;          for (int j=0; j < o.options.length; j++) {            if (o.options[j].equals(o.value)) {              found=true;              break;            }          }          if (!found) {            throw new ArgumentException("Argument, " + arguments[index] + " has a bad string value: "+ arg);          }        }      } else {      }    }  }  int n=0;  int i=arguments.length - 1;  while (i >= 0 && optionIndex[i] == -1 && !arguments[i].startsWith(ARGUMENT_CHARACTER)) {    n++;    i--;  }  leftoverArguments=new String[n];  for (i=0; i < n; i++) {    leftoverArguments[i]=arguments[arguments.length - n + i];  }  for (i=0; i < arguments.length - n; i++) {    if (optionIndex[i] == -1) {      throw new ArgumentException("Unrecognized argument: " + arguments[i]);    }  }}  }
class C{  private static String encode_base64(final byte d[],final int len) throws IllegalArgumentException {  int off=0;  final StringBuffer rs=new StringBuffer();  int c1, c2;  if (len <= 0 || len > d.length) {    throw new IllegalArgumentException("Invalid len");  }  while (off < len) {    c1=d[off++] & 0xff;    rs.append(base64_code[c1 >> 2 & 0x3f]);    c1=(c1 & 0x03) << 4;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=c2 >> 4 & 0x0f;    rs.append(base64_code[c1 & 0x3f]);    c1=(c2 & 0x0f) << 2;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=c2 >> 6 & 0x03;    rs.append(base64_code[c1 & 0x3f]);    rs.append(base64_code[c2 & 0x3f]);  }  return rs.toString();}  }
class C{  public String numThreadsTipText(){  return "The number of threads to use ; -1 = number of CPUs/cores; 0 or 1 = sequential execution.";}  }
class C{  public void write(int b) throws IOException {  if (currentOffset >= exceptionOffset) {    throw new IOException("Debug exception");  }  currentOffset++;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,int nbatches,int ncycles) throws Exception {  for (int i=0; i < nbatches; i++) {    sbuf.reset();    for (int j=0; j < ncycles; j++) {      oout.writeChar('0');    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readChar();    }  }}  }
class C{  public void crash(){  System.err.println("JavaCUP Fatal Internal Error Detected");  System.err.println(getMessage());  printStackTrace();  System.exit(-1);}  }
class C{  private boolean isStoppable(){  return (isRunning() && getCache() != null);}  }
class C{  public LayoutAnimationController(Animation animation){  this(animation,0.5f);}  }
class C{  public String language(){  String language=getString(CollectionSchema.language_s);  return language;}  }
class C{  public JmsTopicScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  protected void updateSelectionPath(@Nullable Font newValue){  if (newValue == null || selectionPath == null || selectionPath.getPathCount() != 4 || !((FontFaceNode)selectionPath.getLastPathComponent()).getFont().getFontName().equals(newValue.getFontName())) {    if (newValue == null) {      setSelectionPath(null);    } else {      TreePath path=selectionPath;      FontCollectionNode oldCollection=(path != null && path.getPathCount() > 1) ? (FontCollectionNode)path.getPathComponent(1) : null;      FontFamilyNode oldFamily=(path != null && path.getPathCount() > 2) ? (FontFamilyNode)path.getPathComponent(2) : null;      FontFaceNode oldFace=(path != null && path.getPathCount() > 3) ? (FontFaceNode)path.getPathComponent(3) : null;      FontCollectionNode newCollection=oldCollection;      FontFamilyNode newFamily=oldFamily;      FontFaceNode newFace=null;      if (newFace == null && newFamily != null) {        for (        FontFaceNode face : newFamily.faces()) {          if (face.getFont().getFontName().equals(newValue.getFontName())) {            newFace=face;            break;          }        }      }      if (newFace == null && newCollection != null) {        for (        FontFamilyNode family : newCollection.families()) {          for (          FontFaceNode face : family.faces()) {            if (face.getFont().getFontName().equals(newValue.getFontName())) {              newFamily=family;              newFace=face;              break;            }          }        }      }      if (newFace == null) {        TreeNode root=(TreeNode)getModel().getRoot();        OuterLoop:         for (int i=0, n=root.getChildCount(); i < n; i++) {          FontCollectionNode collection=(FontCollectionNode)root.getChildAt(i);          for (          FontFamilyNode family : collection.families()) {            for (            FontFaceNode face : family.faces()) {              if (face.getFont().getFontName().equals(newValue.getFontName())) {                newCollection=collection;                newFamily=family;                newFace=face;                break OuterLoop;              }            }          }        }      }      if (newFace != null) {        setSelectionPath(new TreePath(new Object[]{getModel().getRoot(),newCollection,newFamily,newFace}));      } else {        setSelectionPath(null);      }    }  }}  }
class C{  @Override protected void disconnectTransactions(StoredBlock oldBlock) throws PrunedException, BlockStoreException {  checkState(lock.isHeldByCurrentThread());  blockStore.beginDatabaseBatchWrite();  try {    StoredUndoableBlock undoBlock=blockStore.getUndoBlock(oldBlock.getHeader().getHash());    if (undoBlock == null)     throw new PrunedException(oldBlock.getHeader().getHash());    TransactionOutputChanges txOutChanges=undoBlock.getTxOutChanges();    for (    UTXO out : txOutChanges.txOutsSpent)     blockStore.addUnspentTransactionOutput(out);    for (    UTXO out : txOutChanges.txOutsCreated)     blockStore.removeUnspentTransactionOutput(out);  } catch (  PrunedException e) {    blockStore.abortDatabaseBatchWrite();    throw e;  }catch (  BlockStoreException e) {    blockStore.abortDatabaseBatchWrite();    throw e;  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("WStore[");  sb.append(getWebContext(true)).append("]");  return sb.toString();}  }
class C{  public Matrix3 scale(float scaleX,float scaleY){  tmp[0]=scaleX;  tmp[1]=0;  tmp[2]=0;  tmp[3]=0;  tmp[4]=scaleY;  tmp[5]=0;  tmp[6]=0;  tmp[7]=0;  tmp[8]=1;  mul(val,tmp);  return this;}  }
class C{  public static int dp2px(Context context,float dpValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dpValue * scale + 0.5f);}  }
class C{  public XMLSignatureException(){  super();}  }
class C{  public boolean isDisplayValue0(){  return displayValue0;}  }
class C{  public void writeByteArray(byte[] b,int off,int len){  need(len);  System.arraycopy(b,off,array,pos,len);  pos+=len;}  }
class C{  public boolean isAnyCampaign(){  Object oo=get_Value(COLUMNNAME_AnyCampaign);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void index(GTSEncoder encoder){  Set<String> billed=new HashSet<String>();  String id=GTSHelper.gtsIdToString(encoder.getClassId(),encoder.getLabelsId());  for (  Entry<String,Set<String>> entry : this.subscriptions.entrySet()) {    if (entry.getValue().contains(id)) {      String producer=billedId.get(entry.getKey());      try {        ThrottlingManager.checkDDP(null,producer,null,null,(int)encoder.getCount(),0L);        billed.add(producer);      } catch (      WarpException we) {      }    }  }  if (billed.isEmpty()) {    return;  }  long indexed=this.index.index(encoder);  Map<String,String> labels=new HashMap<String,String>();  for (  String consumer : billed) {    if (null == consumer) {      continue;    }    labels.clear();    labels.put(SensisionConstants.SENSISION_LABEL_CONSUMERID,consumer);    labels.put(SensisionConstants.SENSISION_LABEL_GEODIR,this.name);    Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_INDEXED_PERCONSUMER,labels,indexed);  }  labels.clear();  labels.put(SensisionConstants.SENSISION_LABEL_GEODIR,this.name);  Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_INDEXED,labels,indexed);}  }
class C{  public static void noSpace(String string) throws JSONException {  int i, length=string.length();  if (length == 0) {    throw new JSONException("Empty string.");  }  for (i=0; i < length; i+=1) {    if (Character.isWhitespace(string.charAt(i))) {      throw new JSONException("'" + string + "' contains a space character.");    }  }}  }
class C{  public static long[] subarray(long[] buffer,int offset,int length){  long temp[]=new long[length];  System.arraycopy(buffer,offset,temp,0,length);  return temp;}  }
class C{  public boolean isSetDebug(){  return EncodingUtils.testBit(__isset_bitfield,__DEBUG_ISSET_ID);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public void stop() throws IgniteException {  if (stopped)   throw new IgniteException("Failed to stop MQTT Streamer (already stopped).");  connectionRetrier.stop();  try {    if (disconnectForcibly) {      if (disconnectQuiesceTimeout == null && disconnectForciblyTimeout == null)       client.disconnectForcibly(); else       if (disconnectForciblyTimeout != null && disconnectQuiesceTimeout == null)       client.disconnectForcibly(disconnectForciblyTimeout); else       client.disconnectForcibly(disconnectQuiesceTimeout,disconnectForciblyTimeout);    } else {      if (disconnectQuiesceTimeout == null)       client.disconnect(); else       client.disconnect(disconnectQuiesceTimeout);    }    client.close();    stopped=true;  } catch (  Exception e) {    throw new IgniteException("Failed to stop Exception while stopping MQTT Streamer.",e);  }}  }
class C{  public static IntegerPolynomial fromBinary(InputStream is,int N,int q) throws IOException {  return new IntegerPolynomial(ArrayEncoder.decodeModQ(is,N,q));}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  public Mailbox loadMailbox(MailboxSession session,MailboxPath mailboxPath) throws MailboxNotFoundException, MailboxException {  MaildirFolder folder=new MaildirFolder(getFolderName(mailboxPath),mailboxPath,locker);  folder.setMessageNameStrictParse(isMessageNameStrictParse());  if (!folder.exists())   throw new MailboxNotFoundException(mailboxPath);  return loadMailbox(session,folder.getRootFile(),mailboxPath);}  }
class C{  public static String toUnique(Span span){  String id=span.getId();  if (span.clientSpan()) {    id=getClientId(span.getId());  }  return id;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public TopDocs topDocs(){  return topDocs(0,topDocsSize());}  }
class C{  void addPrevious(Node<T> n){  prevNodes.add(n);  Collections.sort(prevNodes,isVertical ? verticalComparator : horizontalComparator);}  }
class C{  public EntryExistsException(String msg,Object oldValue){  super(msg);  this.oldValue=oldValue;}  }
class C{  public void write(int i){  writeInt(i,false);}  }
class C{  public void invalidateSession(){  for (  SockJsConnection connection : sessions) {    connection.close(javax.websocket.CloseReason.CloseCodes.CANNOT_ACCEPT.getCode(),"CLOSED BY BACKEND");  }}  }
class C{  public AssistantException(IEnum iEnum){  super(iEnum);}  }
class C{  public static Object sum(Object[] self,Closure closure){  return sum(toList(self),null,closure,true);}  }
class C{  private boolean decode5(ByteArrayOutputStream baos) throws PDFParseException {  int[] five=new int[5];  int i;  for (i=0; i < 5; i++) {    five[i]=nextChar();    if (five[i] == '~') {      if (nextChar() == '>') {        break;      } else {        throw new PDFParseException("Bad character in ASCII85Decode: not ~>");      }    } else     if (five[i] >= '!' && five[i] <= 'u') {      five[i]-='!';    } else     if (five[i] == 'z') {      if (i == 0) {        five[i]=0;        i=4;      } else {        throw new PDFParseException("Inappropriate 'z' in ASCII85Decode");      }    } else {      throw new PDFParseException("Bad character in ASCII85Decode: " + five[i] + " ("+ (char)five[i]+ ")");    }  }  if (i > 0) {    i-=1;  }  int value=five[0] * 85 * 85* 85* 85 + five[1] * 85 * 85* 85 + five[2] * 85 * 85 + five[3] * 85 + five[4];  for (int j=0; j < i; j++) {    int shift=8 * (3 - j);    baos.write((byte)((value >> shift) & 0xff));  }  return (i == 4);}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public void assertAtMostMessagesReceived(int messageCount){  int actual=getMessageCount();  assertTrue("at most: " + messageCount + " messages received. Actual: "+ actual,actual <= messageCount);}  }
class C{  private synchronized Style createResolvedStyle(String selector,String[] tags,String[] ids,String[] classes){  SearchBuffer sb=SearchBuffer.obtainSearchBuffer();  Vector<SelectorMapping> tempVector=sb.getVector();  Hashtable<SelectorMapping,SelectorMapping> tempHashtable=sb.getHashtable();  try {    SelectorMapping mapping=getRootSelectorMapping();    int numElements=tags.length;    String tagString=tags[0];    SelectorMapping childMapping=mapping.getChildSelectorMapping(tagString,false);    if (childMapping != null) {      getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);    }    if (classes[0] != null) {      String className=classes[0];      childMapping=mapping.getChildSelectorMapping(tagString + "." + className,false);      if (childMapping != null) {        getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);      }      childMapping=mapping.getChildSelectorMapping("." + className,false);      if (childMapping != null) {        getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);      }    }    if (ids[0] != null) {      String idName=ids[0];      childMapping=mapping.getChildSelectorMapping(tagString + "#" + idName,false);      if (childMapping != null) {        getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);      }      childMapping=mapping.getChildSelectorMapping("#" + idName,false);      if (childMapping != null) {        getStyles(childMapping,tempVector,tags,ids,classes,1,numElements,tempHashtable);      }    }    int numLinkedSS=(linkedStyleSheets != null) ? linkedStyleSheets.size() : 0;    int numStyles=tempVector.size();    AttributeSet[] attrs=new AttributeSet[numStyles + numLinkedSS];    for (int counter=0; counter < numStyles; counter++) {      attrs[counter]=tempVector.elementAt(counter).getStyle();    }    for (int counter=0; counter < numLinkedSS; counter++) {      AttributeSet attr=linkedStyleSheets.elementAt(counter).getRule(selector);      if (attr == null) {        attrs[counter + numStyles]=SimpleAttributeSet.EMPTY;      } else {        attrs[counter + numStyles]=attr;      }    }    ResolvedStyle retStyle=new ResolvedStyle(selector,attrs,numStyles);    resolvedStyles.put(selector,retStyle);    return retStyle;  }  finally {    SearchBuffer.releaseSearchBuffer(sb);  }}  }
class C{  public void dragOver(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragOver(dsde);  }  getDragSource().processDragOver(dsde);  updateCurrentCursor(getSourceActions(),dsde.getTargetActions(),OVER);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  boolean alphaChannelOutput=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      alphaChannelOutput=Boolean.getBoolean(args[i]);    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal, alphaVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    double r, g, b, a;    double z;    double[] data;    float progress=0;    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    String outputHeader=inputHeader.replace(".dep","_Red.dep");    WhiteboxRaster outputFileRed=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileRed.setPreferredPalette("grey.pal");    outputFileRed.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    outputHeader=inputHeader.replace(".dep","_Green.dep");    WhiteboxRaster outputFileGreen=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileGreen.setPreferredPalette("grey.pal");    outputFileGreen.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    outputHeader=inputHeader.replace(".dep","_Blue.dep");    WhiteboxRaster outputFileBlue=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileBlue.setPreferredPalette("grey.pal");    outputFileBlue.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (!alphaChannelOutput) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            r=(double)((int)z & 0xFF);            g=(double)(((int)z >> 8) & 0xFF);            b=(double)(((int)z >> 16) & 0xFF);            outputFileRed.setValue(row,col,r);            outputFileGreen.setValue(row,col,g);            outputFileBlue.setValue(row,col,b);          } else {            outputFileRed.setValue(row,col,noData);            outputFileGreen.setValue(row,col,noData);            outputFileBlue.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      outputFileRed.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileRed.addMetadataEntry("Created on " + new Date());      outputFileRed.close();      outputFileGreen.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileGreen.addMetadataEntry("Created on " + new Date());      outputFileGreen.close();      outputFileBlue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileBlue.addMetadataEntry("Created on " + new Date());      outputFileBlue.close();      image.close();    } else {      outputHeader=inputHeader.replace(".dep","_A.dep");      WhiteboxRaster outputFileA=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);      outputFileA.setPreferredPalette("grey.pal");      outputFileA.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            r=(double)((int)z & 0xFF);            g=(double)(((int)z >> 8) & 0xFF);            b=(double)(((int)z >> 16) & 0xFF);            a=(double)(((int)z >> 24) & 0xFF);            outputFileRed.setValue(row,col,r);            outputFileGreen.setValue(row,col,g);            outputFileBlue.setValue(row,col,b);            outputFileA.setValue(row,col,a);          } else {            outputFileRed.setValue(row,col,noData);            outputFileGreen.setValue(row,col,noData);            outputFileBlue.setValue(row,col,noData);            outputFileA.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      outputFileRed.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileRed.addMetadataEntry("Created on " + new Date());      outputFileRed.close();      outputFileGreen.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileGreen.addMetadataEntry("Created on " + new Date());      outputFileGreen.close();      outputFileBlue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileBlue.addMetadataEntry("Created on " + new Date());      outputFileBlue.close();      outputFileA.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileA.addMetadataEntry("Created on " + new Date());      outputFileA.close();      image.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean hasTextContent() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  return p == PEEKED_ELEMENT_TEXT_CONTENT || p == PEEKED_CDATA;}  }
class C{  public Quaternionf rotateAxis(float angle,Vector3fc axis){  return rotateAxis(angle,axis.x(),axis.y(),axis.z(),this);}  }
class C{  private final void dispatachChars(int node) throws org.xml.sax.SAXException {  m_dtm.dispatchCharactersEvents(node,m_contentHandler,false);}  }
class C{  public static void main(String args[]){  new EightPuzzleApp().startApplication();}  }
class C{  public void landingpageTypeChanged(ValueChangeEvent event){  String marketplaceId=model.getSelectedMarketplace();  String selectedLandingpageType=(String)event.getNewValue();  try {    if (!LandingpageType.contains(selectedLandingpageType)) {      model.setLandingpageType("");    } else     if (LandingpageType.isDefault(selectedLandingpageType)) {      Response r=getLandingpageService().loadPublicLandingpageConfig(marketplaceId);      switchtToPublicLandingpage(r);    } else {      switchToEnterpriseLandingpage();    }  } catch (  SaaSApplicationException e) {    ui.handleException(e);  }}  }
class C{  public BadResponseException(String message,int status,String statusText,HttpResponse<JsonNode> response){  super(message);  this.status=status;  this.statusText=statusText;  this.response=response;}  }
class C{  private void writeTest(PrintStream out,String className,String methodName,ExecutableSequence s){  out.println("  @Test");  out.println("  public void " + methodName + "() throws Throwable {");  out.println();  out.println(indent("if (debug) { System.out.format(\"%n%s%n\",\"" + className + "."+ methodName+ "\"); }"));  out.println();  out.println(indent(s.toCodeString()));  out.println("  }");}  }
class C{  private static void parseUnitDisplaySkinSpec(Element border){  udSpec=new UnitDisplaySkinSpecification();  if (border.getElementsByTagName(GeneralTabIdle).getLength() > 0) {    udSpec.setGeneralTabIdle(border.getElementsByTagName(GeneralTabIdle).item(0).getTextContent());  }  if (border.getElementsByTagName(PilotTabIdle).getLength() > 0) {    udSpec.setPilotTabIdle(border.getElementsByTagName(PilotTabIdle).item(0).getTextContent());  }  if (border.getElementsByTagName(ArmorTabIdle).getLength() > 0) {    udSpec.setArmorTabIdle(border.getElementsByTagName(ArmorTabIdle).item(0).getTextContent());  }  if (border.getElementsByTagName(SystemsTabIdle).getLength() > 0) {    udSpec.setSystemsTabIdle(border.getElementsByTagName(SystemsTabIdle).item(0).getTextContent());  }  if (border.getElementsByTagName(WeaponsTabIdle).getLength() > 0) {    udSpec.setWeaponsTabIdle(border.getElementsByTagName(WeaponsTabIdle).item(0).getTextContent());  }  if (border.getElementsByTagName(ExtrasTabIdle).getLength() > 0) {    udSpec.setExtrasTabIdle(border.getElementsByTagName(ExtrasTabIdle).item(0).getTextContent());  }  if (border.getElementsByTagName(GeneralTabActive).getLength() > 0) {    udSpec.setGeneralTabActive(border.getElementsByTagName(GeneralTabActive).item(0).getTextContent());  }  if (border.getElementsByTagName(PilotTabActive).getLength() > 0) {    udSpec.setPilotTabActive(border.getElementsByTagName(PilotTabActive).item(0).getTextContent());  }  if (border.getElementsByTagName(ArmorTabActive).getLength() > 0) {    udSpec.setArmorTabActive(border.getElementsByTagName(ArmorTabActive).item(0).getTextContent());  }  if (border.getElementsByTagName(SystemsTabActive).getLength() > 0) {    udSpec.setSystemsTabActive(border.getElementsByTagName(SystemsTabActive).item(0).getTextContent());  }  if (border.getElementsByTagName(WeaponsTabActive).getLength() > 0) {    udSpec.setWeaponsTabActive(border.getElementsByTagName(WeaponsTabActive).item(0).getTextContent());  }  if (border.getElementsByTagName(ExtraTabActive).getLength() > 0) {    udSpec.setExtraTabActive(border.getElementsByTagName(ExtraTabActive).item(0).getTextContent());  }  if (border.getElementsByTagName(CornerIdle).getLength() > 0) {    udSpec.setCornerIdle(border.getElementsByTagName(CornerIdle).item(0).getTextContent());  }  if (border.getElementsByTagName(CornerActive).getLength() > 0) {    udSpec.setCornerActive(border.getElementsByTagName(CornerActive).item(0).getTextContent());  }  if (border.getElementsByTagName(BackgroundTile).getLength() > 0) {    udSpec.setBackgroundTile(border.getElementsByTagName(BackgroundTile).item(0).getTextContent());  }  if (border.getElementsByTagName(TopLine).getLength() > 0) {    udSpec.setTopLine(border.getElementsByTagName(TopLine).item(0).getTextContent());  }  if (border.getElementsByTagName(BottomLine).getLength() > 0) {    udSpec.setBottomLine(border.getElementsByTagName(BottomLine).item(0).getTextContent());  }  if (border.getElementsByTagName(LeftLine).getLength() > 0) {    udSpec.setLeftLine(border.getElementsByTagName(LeftLine).item(0).getTextContent());  }  if (border.getElementsByTagName(RightLine).getLength() > 0) {    udSpec.setRightLine(border.getElementsByTagName(RightLine).item(0).getTextContent());  }  if (border.getElementsByTagName(TopLeftCorner).getLength() > 0) {    udSpec.setTopLeftCorner(border.getElementsByTagName(TopLeftCorner).item(0).getTextContent());  }  if (border.getElementsByTagName(BottomLeftCorner).getLength() > 0) {    udSpec.setBottomLeftCorner(border.getElementsByTagName(BottomLeftCorner).item(0).getTextContent());  }  if (border.getElementsByTagName(TopRightCorner).getLength() > 0) {    udSpec.setTopRightCorner(border.getElementsByTagName(TopRightCorner).item(0).getTextContent());  }  if (border.getElementsByTagName(BottomRightCorner).getLength() > 0) {    udSpec.setBottomRightCorner(border.getElementsByTagName(BottomRightCorner).item(0).getTextContent());  }  if (border.getElementsByTagName(MechOutline).getLength() > 0) {    udSpec.setMechOutline(border.getElementsByTagName(MechOutline).item(0).getTextContent());  }}  }
class C{  public void updateEndLocation(Point2D.Double p){}  }
class C{  public boolean hasEstablishedSession(){  return establishedSession != null;}  }
class C{  public HashCodeBuilder append(final short value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  public FileInputStream openRead() throws FileNotFoundException {  if (mBackupName.exists()) {    mBaseName.delete();    mBackupName.renameTo(mBaseName);  }  return new FileInputStream(mBaseName);}  }
class C{  public void clear(){  m_head=new ObjectLiteral(null);  m_tail=null;}  }
class C{  private Resource packIcon(int dpi,Bitmap icon){  Resource res=new Resource();  res.dpi=dpi;  res.data=Utilities.flattenBitmap(icon);  return res;}  }
class C{  public void add(AppInfo info){  if (mAppFilter != null && !mAppFilter.shouldShowApp(info.componentName)) {    return;  }  if (findActivity(data,info.componentName,info.user)) {    return;  }  data.add(info);  added.add(info);}  }
class C{  MetalFontDesktopProperty(String key,int type){  super(key,null);  this.type=type;}  }
class C{  public MethodAccessor generateMethod(Class<?> declaringClass,String name,Class<?>[] parameterTypes,Class<?> returnType,Class<?>[] checkedExceptions,int modifiers){  return (MethodAccessor)generate(declaringClass,name,parameterTypes,returnType,checkedExceptions,modifiers,false,false,null);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void close() throws IOException {  if (sink != null) {    sink.receivedLast();  }}  }
class C{  public void writeTo(final PacketOutputStream os) throws IOException {  if (length == Long.MAX_VALUE) {    ParameterWriter.write(os,is,noBackslashEscapes);  } else {    ParameterWriter.write(os,is,length,noBackslashEscapes);  }}  }
class C{  protected void invoke(final Method method,final Object[] args) throws Throwable {}  }
class C{  public void processIndication(Hashtable<String,String> cimNotification){  String cimIndicationType=getCimIndicationType(cimNotification);  if (_monitoringPropertiesLoader.isToLogIndications()) {    _logger.debug("Indication with key : value pairs received --> \n" + getIndicationData(cimNotification));  }  if (cimIndicationType != null && cimIndicationType.equals(CimConstants.CIM_ALERT_INDICATION_TYPE)) {    if (_monitoringPropertiesLoader.isToLogIndications()) {      _logger.debug("CimIndication of type \"Alert\" received");    }    _alertProcessor.processIndication(cimNotification);  } else   if (cimIndicationType != null && cimIndicationType.equals(CimConstants.CIM_INST_INDICATION_TYPE)) {    if (_monitoringPropertiesLoader.isToLogIndications()) {      _logger.debug("CimIndication of type \"Instance\" received");    }    _eventProcessor.processIndication(cimNotification);  } else {    if (_monitoringPropertiesLoader.isToLogIndications()) {      _logger.debug("Unknown CIM Inidcation received {}",cimIndicationType);    }  }}  }
class C{  public static boolean isEqual(String c,String a){  if (c.length() != a.length())   return false;  for (int i=0; i < c.length(); i++) {    if (c.charAt(i) != a.charAt(i))     return false;  }  return true;}  }
class C{  public long skip(long n) throws IOException {  if (n > 0) {    fp+=n;    return n;  }  return 0;}  }
class C{  public static Command show(String title,Component body,Command[] cmds,final int type,Image icon,long timeout){  return show(title,body,cmds,type,icon,timeout,null);}  }
class C{  public Buffer(){  this(DEFAULT_CAPACITY);}  }
class C{  private Collection<List<Link>> sortLinksByIdenticalTextTarget(Elements elements){  Map<String,List<Link>> linksSortedByTextTarget=new HashMap<>();  for (  Element el : elements) {    Link link=new Link(el);    if (linksSortedByTextTarget.containsKey(link.getLinkText())) {      linksSortedByTextTarget.get(link.getLinkText()).add(link);    } else {      List<Link> linksByTarget=new ArrayList<>();      linksByTarget.add(link);      linksSortedByTextTarget.put(link.getLinkText(),linksByTarget);    }  }  Collection<List<Link>> finalList=new ArrayList<>();  for (  List<Link> links : linksSortedByTextTarget.values()) {    if (links.size() > 1) {      finalList.add(links);    }  }  return finalList;}  }
class C{  public static violatedTuples returnViolatedTuples(Instances i,HashMap<String,String[]> FDs){  Instances v=new Instances(i,0);  HashMap<String,SimpleImmutableEntry<List<Integer>,List<Object>>> map=new HashMap<String,SimpleImmutableEntry<List<Integer>,List<Object>>>();  HashMap<Integer,List<String>> tupleID=new HashMap<Integer,List<String>>();  System.out.println("\nFinding violated tuples...\n");  for (  String premiseID : FDs.keySet()) {    String[] rhsIDs=FDs.get(premiseID);    String fd=premiseID + "->";    String rhs="";    for (    String r : rhsIDs)     rhs=r + ",";    rhs=rhs.substring(0,rhs.length() - 1);    fd=fd + rhs;    fd=FDtoString(i,fd);    for (int j=0; j < i.numInstances(); j++) {      List<Object> rhsValues=new LinkedList<Object>();      for (int k=0; k < rhsIDs.length; k++)       rhsValues.add(i.instance(j).toString(Integer.parseInt(rhsIDs[k])));      String premiseValue=i.instance(j).toString(Integer.parseInt(premiseID));      if (map.containsKey(premiseValue) && !map.get(premiseValue).getValue().equals(rhsValues)) {        List<Integer> tupleIndexes=map.get(premiseValue).getKey();        for (        int index : tupleIndexes) {          if (!tupleID.containsKey(index)) {            List<String> vFDs=new LinkedList<String>();            vFDs.add(fd);            tupleID.put(index,vFDs);          } else {            tupleID.get(index).add(fd);          }          v.add(i.instance(index));        }        if (!tupleID.containsKey(j)) {          List<String> vFDs=new LinkedList<String>();          vFDs.add(fd);          tupleID.put(j,vFDs);        } else {          tupleID.get(j).add(fd);        }        v.add(i.instance(j));      } else       if (map.containsKey(premiseValue) && !map.get(premiseValue).getKey().contains(j)) {        map.get(premiseValue).getKey().add(j);      } else {        List<Integer> newIDsList=new LinkedList<Integer>();        newIDsList.add(j);        map.put(premiseValue,new SimpleImmutableEntry<List<Integer>,List<Object>>(newIDsList,rhsValues));      }    }  }  System.out.println("Found: " + v.numInstances() + " violating tuples.");  violatedTuples pair=new violatedTuples(v,tupleID);  return pair;}  }
class C{  @Deprecated public static @CheckForNull ClassDescriptor fromFieldSignature(String signature){  return DescriptorFactory.createClassDescriptorFromFieldSignature(signature);}  }
class C{  void preRemoveChildEvent(ASTNode node,ASTNode child,StructuralPropertyDescriptor property){}  }
class C{  public void removeMatching(final SemanticMetricFilter filter){  for (  final Map.Entry<MetricId,Metric> entry : metrics.entrySet()) {    if (filter.matches(entry.getKey(),entry.getValue())) {      remove(entry.getKey());    }  }}  }
class C{  public boolean isFilled(){  return filled;}  }
class C{  public boolean forEachValue(TLongProcedure procedure){  byte[] states=_states;  long[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public static int printDocumentMonospaced(Graphics g,Document doc,int fontSize,int pageIndex,PageFormat pageFormat,int tabSize){  g.setColor(Color.BLACK);  g.setFont(new Font("Monospaced",Font.PLAIN,fontSize));  tabSizeInSpaces=tabSize;  fm=g.getFontMetrics();  int fontWidth=fm.charWidth('w');  int fontHeight=fm.getHeight();  int MAX_CHARS_PER_LINE=(int)pageFormat.getImageableWidth() / fontWidth;  int MAX_LINES_PER_PAGE=(int)pageFormat.getImageableHeight() / fontHeight;  final int STARTING_LINE_NUMBER=MAX_LINES_PER_PAGE * pageIndex;  xOffset=(int)pageFormat.getImageableX();  int y=(int)pageFormat.getImageableY() + fm.getAscent() + 1;  int numPrintedLines=0;  currentDocLineNumber=0;  rootElement=doc.getDefaultRootElement();  numDocLines=rootElement.getElementCount();  while (currentDocLineNumber < numDocLines) {    String curLineString;    Element currentLine=rootElement.getElement(currentDocLineNumber);    int startOffs=currentLine.getStartOffset();    try {      curLineString=doc.getText(startOffs,currentLine.getEndOffset() - startOffs);    } catch (    BadLocationException ble) {      ble.printStackTrace();      return Printable.NO_SUCH_PAGE;    }    curLineString=curLineString.replaceAll("\n","");    if (tabSizeInSpaces == 0) {      curLineString=curLineString.replaceAll("\t","");    } else {      int tabIndex=curLineString.indexOf('\t');      while (tabIndex > -1) {        int spacesNeeded=tabSizeInSpaces - (tabIndex % tabSizeInSpaces);        String replacementString="";        for (int i=0; i < spacesNeeded; i++)         replacementString+=' ';        curLineString=curLineString.replaceFirst("\t",replacementString);        tabIndex=curLineString.indexOf('\t');      }    }    while (curLineString.length() > MAX_CHARS_PER_LINE) {      numPrintedLines++;      if (numPrintedLines > STARTING_LINE_NUMBER) {        g.drawString(curLineString.substring(0,MAX_CHARS_PER_LINE),xOffset,y);        y+=fontHeight;        if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)         return Printable.PAGE_EXISTS;      }      curLineString=curLineString.substring(MAX_CHARS_PER_LINE,curLineString.length());    }    currentDocLineNumber+=1;    numPrintedLines++;    if (numPrintedLines > STARTING_LINE_NUMBER) {      g.drawString(curLineString,xOffset,y);      y+=fontHeight;      if (numPrintedLines == STARTING_LINE_NUMBER + MAX_LINES_PER_PAGE)       return Printable.PAGE_EXISTS;    }  }  if (numPrintedLines > STARTING_LINE_NUMBER)   return Printable.PAGE_EXISTS;  return Printable.NO_SUCH_PAGE;}  }
class C{  public boolean isPostBudget(){  Object oo=get_Value(COLUMNNAME_PostBudget);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int gridMagnitudeModel(){  double pixelSizeModel=toModel(1);  double pixelSizeModelLog=MathUtil.log10(pixelSizeModel);  int gridMag=(int)Math.ceil(pixelSizeModelLog);  double gridSizeModel=Math.pow(10,gridMag);  double gridSizeView=toView(gridSizeModel);  if (gridSizeView <= MIN_GRID_RESOLUTION_PIXELS)   gridMag+=1;  return gridMag;}  }
class C{  @ObjectiveCName("formatGroupMembers:") public String formatGroupMembers(int count){  return getPlural("groups.members",count).replace("{count}","" + count);}  }
class C{  static WebServerBuilder include(Class<?> type){  return builder().include(type);}  }
class C{  public void execute(ActionRedirect anAction,Mail aMail,ActionContext context) throws MessagingException {  ActionUtils.detectAndHandleLocalLooping(aMail,context,"redirect");  Collection<MailAddress> recipients=new ArrayList<MailAddress>(1);  recipients.add(new MailAddress(new InternetAddress(anAction.getAddress())));  MailAddress sender=aMail.getSender();  context.post(sender,recipients,aMail.getMessage());  aMail.setState(Mail.GHOST);  Log log=context.getLog();  if (log.isDebugEnabled()) {    log.debug("Redirected Message ID: " + aMail.getMessage().getMessageID() + " to \""+ anAction.getAddress()+ "\"");  }}  }
class C{  public TransformVariablesOscillate(BBOBFunction function){  super(function);}  }
class C{  private boolean verifyTypesForParentChildRelationship(String childType,String parentType,String childId,Errors errors){  if (childType.equals(Constants.notebook) && !(parentType.equals(Constants.tableofcontents) || parentType.equals(Constants.notebook))) {    Errors.add(errors,errorMessages.errorInvalidRelatedType(childType,parentType,childId));    return false;  }  if ((childType.equals(Constants.note) || childType.equals(Constants.quotation) || childType.equals(Constants.source)) && !(parentType.equals(Constants.root) || parentType.equals(Constants.note) || parentType.equals(Constants.quotation)|| parentType.equals(Constants.source))) {    Errors.add(errors,errorMessages.errorInvalidRelatedType(childType,parentType,childId));    return false;  }  return true;}  }
class C{  @Override public void removeVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.removeVetoableChangeListener(name,vcl);}  }
class C{  public static TStream<JsonObject> alertFilter(TStream<JsonObject> readingsDetector,int wellId,boolean simulateNormal){  readingsDetector=readingsDetector.filter(null);  return readingsDetector;}  }
class C{  private void doScroll(int delta){  scrollingOffset+=delta;  int itemHeight=getItemHeight();  int count=scrollingOffset / itemHeight;  int pos=currentItem - count;  int itemCount=viewAdapter.getItemsCount();  int fixPos=scrollingOffset % itemHeight;  if (Math.abs(fixPos) <= itemHeight / 2) {    fixPos=0;  }  if (isCyclic && itemCount > 0) {    if (fixPos > 0) {      pos--;      count++;    } else     if (fixPos < 0) {      pos++;      count--;    }    while (pos < 0) {      pos+=itemCount;    }    pos%=itemCount;  } else {    if (pos < 0) {      count=currentItem;      pos=0;    } else     if (pos >= itemCount) {      count=currentItem - itemCount + 1;      pos=itemCount - 1;    } else     if (pos > 0 && fixPos > 0) {      pos--;      count++;    } else     if (pos < itemCount - 1 && fixPos < 0) {      pos++;      count--;    }  }  int offset=scrollingOffset;  if (pos != currentItem) {    setCurrentItem(pos,false);  } else {    invalidate();  }  scrollingOffset=offset - count * itemHeight;  if (scrollingOffset > getHeight()) {    scrollingOffset=scrollingOffset % getHeight() + getHeight();  }}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  return xySeries;}  }
class C{  @Override protected void validate() throws IllegalStateException {  super.validate();  if (getSitemapType() == null) {    throw new IllegalStateException(SITEMAP_TYPE + " is not set");  }}  }
class C{  @Override public long length() throws SQLException {  try {    debugCodeCall("length");    checkClosed();    if (value.getType() == Value.BLOB) {      long precision=value.getPrecision();      if (precision > 0) {        return precision;      }    }    return IOUtils.copyAndCloseInput(value.getInputStream(),null);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private void parseCacheConfig(final Node node,final ConfigSettings config){  String name;  Long lValue;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_LIMIT_TASK_SIZE_REVISIONS)) {      lValue=Long.parseLong(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.LIMIT_TASK_SIZE_REVISIONS,lValue);    } else     if (name.equals(KEY_LIMIT_TASK_SIZE_DIFFS)) {      lValue=Long.parseLong(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.LIMIT_TASK_SIZE_DIFFS,lValue);    } else     if (name.equals(KEY_LIMIT_SQLSERVER_MAX_ALLOWED_PACKET)) {      lValue=Long.parseLong(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(ConfigurationKeys.LIMIT_SQLSERVER_MAX_ALLOWED_PACKET,lValue);    }  }}  }
class C{  Frame loadVirtualFrame(Frame frame) throws IOException {  frame.arc.output=fstOutputs.getNoOutput();  frame.arc.nextFinalOutput=fstOutputs.getNoOutput();  frame.state=-1;  return frame;}  }
class C{  protected void registerTreeAttributes(){  addAttributeProcessor(new IconSpacingLmlAttribute(),"iconSpacing","iconSpace");  addAttributeProcessor(new TreePaddingLmlAttribute(),"padding","treePad");  addAttributeProcessor(new YSpacingLmlAttribute(),"ySpacing","ySpace");}  }
class C{  @Override public void mark(int limit){}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  @CheckReturnValue public TheoryBuilder3<A,B,C> assuming(Predicate3<A,B,C> newAssumption){  return new TheoryBuilder3<A,B,C>(this.state,this.as,this.bs,this.cs,this.assumptions.and(newAssumption));}  }
class C{  public SafeCalendar(int year,int month){  this(year);  set(MONTH,month);}  }
class C{  private boolean assignInstancesToContainers(ArrayList<Container> containers,Map<Integer,List<InstanceId>> allocation,Map<String,Integer> parallelismMap,int firstTaskIndex,PolicyType policyType){  ArrayList<RamRequirement> ramRequirements=getRAMInstances(parallelismMap);  int globalTaskIndex=firstTaskIndex;  int componentIndex=0;  for (  String component : parallelismMap.keySet()) {    long ramRequirement=ramRequirements.get(componentIndex).getRamRequirement();    int numInstance=parallelismMap.get(component);    for (int i=0; i < numInstance; ++i) {      Resource instanceResource=this.defaultInstanceResources.cloneWithRam(ramRequirement);      boolean sufficientNumContainers=true;      InstanceId instanceId=new InstanceId(component,globalTaskIndex,i);      sufficientNumContainers=policyType.invokePolicy(allocation,containers,instanceId,instanceResource,this);      if (!sufficientNumContainers) {        return false;      }      globalTaskIndex++;    }    componentIndex++;  }  return true;}  }
class C{  public static Pair<Integer,Integer> parseSpsNalUnit(byte[] spsNalUnit){  if (isNalStartCode(spsNalUnit,0) && spsNalUnit.length == 8 && (spsNalUnit[5] & 0x1F) == SPS_NAL_UNIT_TYPE) {    return Pair.create(parseAvcProfile(spsNalUnit),parseAvcLevel(spsNalUnit));  }  return null;}  }
class C{  protected boolean isOpenReadOnly(){  return isLeave() && !isMarkSeen() && isLeaveBlacklisted()&& !isMarkBlacklistedSeen()&& isLeaveRemoteRecipient()&& !isMarkRemoteRecipientSeen()&& isLeaveUserUndefined()&& !isMarkUserUndefinedSeen()&& isLeaveUndeliverable()&& !isMarkUndeliverableSeen()&& isLeaveMaxMessageSizeExceeded()&& !isMarkMaxMessageSizeExceededSeen()&& isLeaveRemoteReceivedHeaderInvalid()&& !isMarkRemoteReceivedHeaderInvalidSeen();}  }
class C{  private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (c.compare(a[cursor2],tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight(a[cursor2],tmp,cursor1,len1,0,c);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft(tmp[cursor1],a,cursor2,len2,0,c);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  private int calculateCrossings(mxGraphHierarchyModel model){  int numRanks=model.ranks.size();  int totalCrossings=0;  for (int i=1; i < numRanks; i++) {    totalCrossings+=calculateRankCrossing(i,model);  }  return totalCrossings;}  }
class C{  public static Map<String,Map<URI,Integer>> groupVolumeBasedOnPolicy(Map<URI,Integer> volumeMap,DbClient dbClient){  Map<String,Map<URI,Integer>> volumeGroup=new HashMap<String,Map<URI,Integer>>();  if (volumeMap != null && !volumeMap.keySet().isEmpty()) {    for (    Map.Entry<URI,Integer> entry : volumeMap.entrySet()) {      String policyName=getAutoTieringPolicyName(entry.getKey(),dbClient);      Map<URI,Integer> volumeUris=volumeGroup.get(policyName);      if (null == volumeUris) {        volumeUris=new HashMap<URI,Integer>();        volumeGroup.put(policyName,volumeUris);      }      volumeUris.put(entry.getKey(),entry.getValue());    }  }  return volumeGroup;}  }
class C{  public void addRange(IgfsFileAffinityRange range){  if (range == null || range.empty())   return;  if (ranges == null) {    ranges=new ArrayList<>();    ranges.add(range);    return;  }  assert !ranges.isEmpty();  IgfsFileAffinityRange last=ranges.get(ranges.size() - 1);  assert last.greater(range.startOffset()) : "Cannot add range to middle of map [last=" + last + ", range="+ range+ ']';  IgfsFileAffinityRange concat=last.concat(range);  if (concat == null)   ranges.add(range); else   ranges.set(ranges.size() - 1,concat);}  }
class C{  private void stopVideoFadingEdgesScreenTimer(){  if (null != mVideoFadingEdgesTimer) {    mVideoFadingEdgesTimer.cancel();    mVideoFadingEdgesTimer=null;    mVideoFadingEdgesTimerTask=null;  }}  }
class C{  public final CC shrink(float... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  shrinkY(widthHeight[1]);case 1:shrinkX(widthHeight[0]);}return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:49.489 -0500",hash_original_method="CF88CF61D429A57A2B7C32EDDBA3E37B",hash_generated_method="BC0C7568898C2FF324345168E2B73A7D") private boolean isInHomeSidNid(int sid,int nid){  if (isSidsAllZeros())   return true;  if (mHomeSystemId.length != mHomeNetworkId.length)   return true;  if (sid == 0)   return true;  for (int i=0; i < mHomeSystemId.length; i++) {    if ((mHomeSystemId[i] == sid) && ((mHomeNetworkId[i] == 0) || (mHomeNetworkId[i] == 65535) || (nid == 0)|| (nid == 65535)|| (mHomeNetworkId[i] == nid))) {      return true;    }  }  return false;}  }
class C{  public ToStringBuilder append(Object[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static final double decodeLongitude(final long hash){  return GeoEncodingUtils.decodeLongitude((int)BitUtil.deinterleave(hash) ^ 0x80000000);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean isEven(MyInteger myInteger){  return myInteger.isEven();}  }
class C{  private void updateJobStatus(String jobId,String status,String rout){  try {    if (jobId == null) {      return;    }    File dir=new File(jobsDir);    if (dir.exists()) {      String jobFile=jobsDir + "/" + jobId+ ".csv";      BufferedWriter writer=new BufferedWriter(new FileWriter(jobFile));      writer.write("Status,rout\n");      writer.write(status + "," + (rout != null ? rout : "")+ "\n");      writer.close();    } else {      log("ERROR: unable to update job status: Jobs directory not found");    }    if (dir.exists()) {      if (dir.listFiles().length > maxJobFiles) {        File[] files=dir.listFiles();        Arrays.sort(files);        files[0].delete();      }    }  } catch (  Exception e) {    log("ERROR: unable to update job status: " + jobId + " "+ status+ " :"+ e.getMessage());  }}  }
class C{  private boolean isUserSlot(){  return parent.getRPObject().getContainerBaseOwner().equals(User.get().getRPObject());}  }
class C{  public Collection<Address> members(){  return members;}  }
class C{  public boolean isRedundant(){  return this.epType == (byte)1;}  }
class C{  public AssignStmt newAssignStmt(Value variable,Value rvalue){  return new JAssignStmt(variable,rvalue);}  }
class C{  public static String capitalise(String str){  if (str == null) {    return null;  } else   if (str.length() == 0) {    return "";  } else {    return new StringBuilder(str.length()).append(Character.toTitleCase(str.charAt(0))).append(str.substring(1)).toString();  }}  }
class C{  public byte[] decrypt(FacesContext facesContext,byte[] bytes){  try {    byte[] macBytes=new byte[MAC_LENGTH];    System.arraycopy(bytes,0,macBytes,0,macBytes.length);    byte[] iv=new byte[IV_LENGTH];    System.arraycopy(bytes,macBytes.length,iv,0,iv.length);    byte[] encdata=new byte[bytes.length - macBytes.length - iv.length];    System.arraycopy(bytes,macBytes.length + iv.length,encdata,0,encdata.length);    IvParameterSpec ivspec=new IvParameterSpec(iv);    SecretKey secKey=getSecretKey(facesContext);    Cipher decryptCipher=Cipher.getInstance(CIPHER_CODE);    decryptCipher.init(Cipher.DECRYPT_MODE,secKey,ivspec);    Mac decryptMac=Mac.getInstance(MAC_CODE);    decryptMac.init(secKey);    decryptMac.update(iv);    decryptMac.update(encdata);    byte[] macBytesCalculated=decryptMac.doFinal();    if (areArrayEqualsConstantTime(macBytes,macBytesCalculated)) {      byte[] plaindata=decryptCipher.doFinal(encdata);      return plaindata;    } else {      System.err.println("ERROR: MAC did not verify!");      return null;    }  } catch (  NoSuchAlgorithmException|NoSuchPaddingException|InvalidKeyException|InvalidAlgorithmParameterException|IllegalStateException|IllegalBlockSizeException|BadPaddingException e) {    System.err.println("ERROR: Decrypting:" + e.getCause());    return null;  }}  }
class C{  protected ImageDTO extractOneImageFromCurrentCursor(Cursor cursor){  int api=android.os.Build.VERSION.SDK_INT;  if (imageIdCol == -1) {    imageIdCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media._ID);    imageTitleCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.TITLE);    imageDisplayNameCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DISPLAY_NAME);    imageDescriptionCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DESCRIPTION);    imageBucketIdCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_ID);    imageBucketDisplayNameCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.BUCKET_DISPLAY_NAME);    imageDataCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);    imageMimeCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.MIME_TYPE);    imageSizeCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.SIZE);    imageOrientationCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.ORIENTATION);    imageDateAddedCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_ADDED);    imageDateTakenCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_TAKEN);    imageDateModifyCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATE_MODIFIED);    latitudeCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.LATITUDE);    longitudeCol=cursor.getColumnIndexOrThrow(MediaStore.Images.Media.LONGITUDE);    if (api >= 16) {      widthCol=cursor.getColumnIndexOrThrow(MediaStore_Media_WIDTH);      heightCol=cursor.getColumnIndexOrThrow(MediaStore_Media_HEIGHT);    }  }  ImageDTO image=new ImageDTO();  image.setId(cursor.getLong(imageIdCol));  image.setTitle(cursor.getString(imageTitleCol));  image.setDisplayName(cursor.getString(imageDisplayNameCol));  image.setDescription(cursor.getString(imageDescriptionCol));  image.setBucketId(cursor.getString(imageBucketIdCol));  image.setBucketDisplayName(cursor.getString(imageBucketDisplayNameCol));  image.setUri(cursor.getString(imageDataCol));  image.setMimeType(cursor.getString(imageMimeCol));  image.setSize(cursor.getLong(imageSizeCol));  image.setOrientation(translateOrientation(cursor.getInt(imageOrientationCol)));  image.setAddedDate(new Date(cursor.getLong(imageDateAddedCol)));  image.setTakenDate(new Date(cursor.getLong(imageDateTakenCol)));  image.setModifyDate(new Date(cursor.getLong(imageDateModifyCol)));  image.setLatitude(cursor.getDouble(latitudeCol));  image.setLongitude(cursor.getDouble(longitudeCol));  if (api >= 16) {    image.setWidth(cursor.getInt(widthCol));    image.setHeight(cursor.getInt(heightCol));  }  return image;}  }
class C{  public View findNextFocusFromRect(ViewGroup root,Rect focusedRect,int direction){  mFocusedRect.set(focusedRect);  return findNextFocus(root,null,mFocusedRect,direction);}  }
class C{  public void addLexWords(Lexicon l){  Iterator<Map.Entry<String,ArrayList<LexWord>>> it=l.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<String,ArrayList<LexWord>> pair=it.next();    if (this.containsKey(pair.getKey())) {      for (int i=0; i < pair.getValue().size(); i++) {        this.get(pair.getKey()).add(pair.getValue().get(i));      }    } else {      this.put(pair.getKey(),pair.getValue());    }  }}  }
class C{  public NativeCommandOutputParser(InputStream is,StringBuffer commandOutput){  this.is=is;  this.outputFromExternalProgram=commandOutput;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void writeAggregatedPopulationData2CSV(final Map<Id,AggregationObject> personClusterMap,UrbanSimParameterConfigModuleV3 module){  try {    log.info("Initializing AnalysisPopulationCSVWriter ...");    BufferedWriter bwAggregatedPopulation=IOUtils.getBufferedWriter(module.getMATSim4OpusOutput() + FILE_NAME_AGGREGATED);    log.info("Writing (population) data into " + module.getMATSim4OpusOutput() + FILE_NAME_AGGREGATED+ " ...");    bwAggregatedPopulation.write(InternalConstants.PARCEL_ID + "," + InternalConstants.NEARESTNODE_ID+ ","+ InternalConstants.NEARESTNODE_X_COORD+ ","+ InternalConstants.NEARESTNODE_Y_COORD+ ","+ PERSONS_COUNT);    bwAggregatedPopulation.newLine();    Iterator<AggregationObject> personIterator=personClusterMap.values().iterator();    while (personIterator.hasNext()) {      AggregationObject person=personIterator.next();      bwAggregatedPopulation.write(person.getParcelID() + "," + person.getNearestNode().getId()+ ","+ person.getNearestNode().getCoord().getX()+ ","+ person.getNearestNode().getCoord().getY()+ ","+ person.getNumberOfObjects());      bwAggregatedPopulation.newLine();    }    bwAggregatedPopulation.flush();    bwAggregatedPopulation.close();    log.info("... done!");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static ODataRequestContext createODataRequestContext(ODataRequest request,ODataUri oDataUri,EntityDataModel entityDataModel) throws UnsupportedEncodingException {  return new ODataRequestContext(request,oDataUri,entityDataModel);}  }
class C{  public void displayURL(String url){  WebBrowser wb=getBrowser();  if (wb == null) {    MapHandler mh=(MapHandler)getBeanContext();    Frame frame=null;    if (mh != null) {      frame=(Frame)mh.get(java.awt.Frame.class);    }    try {      com.bbn.openmap.gui.MiniBrowser.display(frame,new URL(url));    } catch (    java.net.MalformedURLException murle) {      Debug.error("InformationDelegator can't launch " + url);    }  } else {    wb.launch(url);  }}  }
class C{  public boolean isBlockedForContact(ContactId contact){  return BlockingState.BLOCKED == getContactInfo(contact).getBlockingState();}  }
class C{  public int removeAndCount(final Uri uri){  try {    return mContext.getContentResolver().delete(uri,null,null);  } catch (  Throwable e) {    e.printStackTrace();    return 0;  }}  }
class C{  public void pushBooleanExpression(){  pushState();}  }
class C{  public static boolean isNotTime(long timeMillis){  return timeMillis == NO_TIME_MILLIS;}  }
class C{  private String auditDialogs(Set activeCallIDs,long leakedDialogTimer){  String auditReport="  Leaked dialogs:\n";  int leakedDialogs=0;  long currentTime=System.currentTimeMillis();  LinkedList dialogs;synchronized (dialogTable) {    dialogs=new LinkedList(dialogTable.values());  }  Iterator it=dialogs.iterator();  while (it.hasNext()) {    SIPDialog itDialog=(SIPDialog)it.next();    CallIdHeader callIdHeader=(itDialog != null ? itDialog.getCallId() : null);    String callID=(callIdHeader != null ? callIdHeader.getCallId() : null);    if (itDialog != null && callID != null && !activeCallIDs.contains(callID)) {      if (itDialog.auditTag == 0) {        itDialog.auditTag=currentTime;      } else {        if (currentTime - itDialog.auditTag >= leakedDialogTimer) {          leakedDialogs++;          DialogState dialogState=itDialog.getState();          String dialogReport="dialog id: " + itDialog.getDialogId() + ", dialog state: "+ (dialogState != null ? dialogState.toString() : "null");          auditReport+="    " + dialogReport + "\n";          itDialog.setState(SIPDialog.TERMINATED_STATE);          if (isLoggingEnabled())           stackLogger.logDebug("auditDialogs: leaked " + dialogReport);        }      }    }  }  if (leakedDialogs > 0) {    auditReport+="    Total: " + Integer.toString(leakedDialogs) + " leaked dialogs detected and removed.\n";  } else {    auditReport=null;  }  return auditReport;}  }
class C{  protected void locatePackageDeclarations(SearchParticipant participant,IJavaProject[] projects) throws CoreException {  locatePackageDeclarations(this.pattern,participant,projects);}  }
class C{  public Container createContainer(String resPath,String resourceName){  if (this.resourceFilePath == null || (!this.resourceFilePath.equals(resPath))) {    resourceFile=null;  }  setResourceFilePath(resPath);  return createContainer(fetchResourceFile(),resourceName);}  }
class C{  boolean nextSource() throws IOException {  if (mSourceIt.hasNext()) {    final InputStream is=mSourceIt.next();    if (is == null) {      mSource=null;      return false;    } else {      mSource=new BufferedInputStream(is,FileUtils.BUFFERED_STREAM_SIZE);    }    mSourceClosed=false;    mInputBufferPosition=0;    mInputBufferLength=0;    mBufferLength=0;    mBufferPosition=0;    return true;  }  if (mSource != null) {    mSource.close();  }  mSource=null;  return false;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.SegmentList buildSegmentList(List<org.smpte_ra.schemas.st2067_2_2013.SegmentType> segments){  org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.SegmentList segmentList=new org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType.SegmentList();  segmentList.getSegment().addAll(segments);  return segmentList;}  }
class C{  public void testGetSigAlgName(){  if (this.cert == null) {    return;  }  assertEquals("The name of signature algorithm is not correct.",tbt_cert.getSigAlgName(),cert.getSigAlgName());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Vector(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  @Override public void bindView(ViewHolder viewHolder,List payloads){  super.bindView(viewHolder,payloads);  Context ctx=viewHolder.itemView.getContext();  UIUtils.setBackground(viewHolder.view,FastAdapterUIUtils.getSelectableBackground(ctx,Color.RED,true));  StringHolder.applyTo(name,viewHolder.name);  StringHolder.applyToOrHide(description,viewHolder.description);}  }
class C{  public Certificate engineGetCertificate(String alias){  if (alias == null) {    throw new IllegalArgumentException("null alias passed to getCertificate.");  }  Certificate c=(Certificate)certs.get(alias);  if (c == null) {    String id=(String)localIds.get(alias);    if (id != null) {      c=(Certificate)keyCerts.get(id);    } else {      c=(Certificate)keyCerts.get(alias);    }  }  return c;}  }
class C{  public JsonApiDocument readJsonApiDocument(String doc) throws IOException {  JsonNode node=mapper.readTree(doc);  return readJsonApiDocument(node);}  }
class C{  private void put122(final int b,final int s1,final int s2){  pool.put12(b,s1).put2(s2);}  }
class C{  protected Boolean evalExpression(Object t){  return expr.execute(t);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 200) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public ResponseTimeoutException(String message){  super(message);}  }
class C{  public Builder ionSystem(IonSystem val){  this.ionSystem=val;  return this;}  }
class C{  public DateBuilder inMonth(int inMonth){  validateMonth(inMonth);  this.month=inMonth;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.632 -0500",hash_original_method="66F538C19C1B45B9F4975D517A08EBE7",hash_generated_method="9AE1AEC462E0711E2705F635F396C136") @DSSafe(DSCat.SAFE_LIST) public void removeFirst(){  if (hlist.size() != 0)   hlist.remove(0);}  }
class C{  public void filter(double[] src,int sptr,double[] dst,int dptr){  if (src.length != blockSize)   throw new IllegalArgumentException("Data array length not equal to blockSize");  Arrays.fill(segment,0.0f);  System.arraycopy(src,sptr,segment,0,blockSize);  fft.evaluate(segment,transform);  RDFT.dftProduct(kernel,transform,1.0f);  fft.evaluateInverse(transform,segment);  for (int i=0; i < nfft; i++) {    shiftRegister[i]+=segment[i];  }  System.arraycopy(shiftRegister,0,dst,dptr,blockSize);  Sequence.zeroShift(shiftRegister,-blockSize);}  }
class C{  public static String toString(GenomeRelationships pedigree,String... commentLines){  final StringBuilder sb=new StringBuilder();  sb.append("#PED format pedigree").append(StringUtils.LS);  sb.append("#").append(StringUtils.LS);  for (  String comment : commentLines) {    sb.append("#").append(comment).append(StringUtils.LS);  }  sb.append("#fam-id/ind-id/pat-id/mat-id: 0=unknown").append(StringUtils.LS);  sb.append("#sex: 1=male; 2=female; 0=unknown").append(StringUtils.LS);  sb.append("#phenotype: -9=missing, 0=missing; 1=unaffected; 2=affected").append(StringUtils.LS);  sb.append("#").append(StringUtils.LS);  sb.append("#fam-id\tind-id\tpat-id\tmat-id\tsex\tphen").append(StringUtils.LS);  for (  final String genome : pedigree.genomes()) {    final Properties p=pedigree.getProperties(genome);    sb.append(p.getProperty(FAMILY_ID_PROPERTY,UNKNOWN)).append("\t");    sb.append(genome).append("\t");    String paternal=UNKNOWN;    String maternal=UNKNOWN;    for (    final Relationship rel : pedigree.relationships(genome,new RelationshipTypeFilter(RelationshipType.PARENT_CHILD),new SecondInRelationshipFilter(genome))) {      final String parent=rel.first();      if (pedigree.getSex(parent) == Sex.FEMALE) {        maternal=parent;      } else       if (pedigree.getSex(parent) == Sex.MALE) {        paternal=parent;      }    }    sb.append(paternal).append("\t");    sb.append(maternal).append("\t");    sb.append(mapToPedSex(pedigree.getSex(genome))).append("\t");    sb.append(mapToPedPhenotype(p.getProperty(GenomeRelationships.DISEASE_PROPERTY))).append(StringUtils.LS);  }  return sb.toString();}  }
class C{  public static void registerApp(int application,String appName) throws AppIDException {  if ((application & APP_ID_MASK) != application) {    throw new InvalidAppIDValueException(application);  }  String oldApp=appIdMap.putIfAbsent(application,appName);  if (oldApp != null && !oldApp.equals(appName)) {    throw new AppIDInUseException(application,oldApp,appName);  }}  }
class C{  public int incr(T k,int delta){  Integer i=counts.get(k);  if (i == null) {    i=0;  }  int next=i.intValue() + delta;  if (next < 0) {    throw new java.lang.ArithmeticException();  }  if (next == 0) {    counts.remove(k);  } else {    counts.put(k,i + delta);  }  return i;}  }
class C{  protected void sequence_NullLiteral(ISerializationContext context,NullLiteral semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void refreshNewDocument(int id,int newDocId,int newParentDocId,FolderDocUpdIds docUpdIds) throws Exception {  m_documents.refreshNewDocument(id,newDocId,newParentDocId,docUpdIds);}  }
class C{  @Override public Object clone(){  Capabilities result;  result=new Capabilities(m_Owner);  result.assign(this);  return result;}  }
class C{  public void createIndex(String indexPath) throws IOException {  IndexReader reader=DirectoryReader.open(FSDirectory.open(new File(indexPath)));  int numDocs=reader.numDocs();  if (numDocs < numReferenceObjects) {    throw new UnsupportedOperationException("Too few documents in index.");  }  progress.setNumDocsAll(numDocs);  progress.setCurrentState(State.RoSelection);  boolean hasDeletions=reader.hasDeletions();  IndexWriter iw=LuceneUtils.createIndexWriter(indexPath + "-ro",true);  HashSet<Integer> referenceObjsIds=new HashSet<Integer>(numReferenceObjects);  double numDocsDouble=(double)numDocs;  while (referenceObjsIds.size() < numReferenceObjects) {    referenceObjsIds.add((int)(numDocsDouble * Math.random()));  }  int count=0;  if (hasDeletions) {    System.err.println("WARNING: There are deleted docs in your index. You should " + "optimize your index before using this method.");  }  progress.setCurrentState(State.RoIndexing);  for (  int i : referenceObjsIds) {    count++;    Document document=reader.document(i);    document.add(new Field("ro-id",count + "",StringField.TYPE_STORED));    iw.addDocument(document);  }  iw.commit();  iw.close();  progress.setCurrentState(State.Indexing);  IndexReader readerRo=DirectoryReader.open(FSDirectory.open(new File(indexPath + "-ro")));  ImageSearcher searcher=new GenericImageSearcher(numReferenceObjectsUsed,featureClass,featureFieldName);  Map<String,Analyzer> analyzerPerField=new HashMap<String,Analyzer>();  analyzerPerField.put("ro-order",new WhitespaceAnalyzer(LuceneUtils.LUCENE_VERSION));  PerFieldAnalyzerWrapper aWrapper=new PerFieldAnalyzerWrapper(new SimpleAnalyzer(LuceneUtils.LUCENE_VERSION),analyzerPerField);  iw=new IndexWriter(FSDirectory.open(new File(indexPath)),new IndexWriterConfig(LuceneUtils.LUCENE_VERSION,aWrapper).setOpenMode(IndexWriterConfig.OpenMode.CREATE));  StringBuilder sb=new StringBuilder(256);  Bits liveDocs=MultiFields.getLiveDocs(reader);  for (int i=0; i < numDocs; i++) {    if (reader.hasDeletions() && !liveDocs.get(i))     continue;    Document document=reader.document(i);    ImageSearchHits hits=searcher.search(document,readerRo);    sb.delete(0,sb.length());    for (int j=0; j < numReferenceObjectsUsed; j++) {      sb.append(hits.doc(j).getValues("ro-id")[0]);      sb.append(' ');    }    document.add(new TextField("ro-order",sb.toString(),Field.Store.YES));    iw.updateDocument(new Term(DocumentBuilder.FIELD_NAME_IDENTIFIER,document.getValues(DocumentBuilder.FIELD_NAME_IDENTIFIER)[0]),document);    progress.setNumDocsProcessed(progress.getNumDocsProcessed() + 1);  }  iw.commit();  iw.close();  progress.setCurrentState(State.Idle);}  }
class C{  public static SpanQuery spanOrQuery(SpanQuery... subqueries){  return spanQuery(new SpanOrQuery(subqueries));}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  canvas.drawText(mText,getPaddingLeft(),getPaddingTop() - mAscent,mTextPaint);}  }
class C{  public void loadDataDirConfig() throws InvalidConfigException {  log.info("Reading DATA DIRECTORY: " + dataDir.dataDir.getAbsolutePath());  log.info("Loading IPT config ...");  cfg.loadConfig();  log.info("Reloading log4j settings ...");  reloadLogger();  if (cfg.getProxy() != null) {    log.info("Configuring http proxy ...");    try {      setProxy(cfg.getProxy());    } catch (    InvalidConfigException e) {      warnings.addStartupError(e);    }  }  log.info("Loading user accounts ...");  userManager.load();  log.info("Loading vocabularies ...");  vocabManager.load();  log.info("Ensure latest versions of default vocabularies are installed...");  vocabManager.installOrUpdateDefaults();  File vocabDir=dataDir.configFile(VocabulariesManagerImpl.CONFIG_FOLDER);  File deprecatedVocabFile=new File(vocabDir,DEPRECATED_VOCAB_PERSISTENCE_FILE);  if (deprecatedVocabFile.exists()) {    log.info("Perform 1-time event: delete deprecated vocabularies.xml file");    FileUtils.deleteQuietly(deprecatedVocabFile);  }  log.info("Loading extensions ...");  extensionManager.load();  if (!dataDir.configFile(RegistrationManagerImpl.PERSISTENCE_FILE_V2).exists()) {    log.info("Perform 1-time event: migrate registration.xml into registration2.xml with passwords encrypted");    registrationManager.encryptRegistration();  }  log.info("Loading registration configuration...");  registrationManager.load();  log.info("Loading resource configurations ...");  resourceManager.load();  log.info("Starting Publishing Monitor...");  publishingMonitor.start();}  }
class C{  public Long addFolderByExternalUserIdAndType(String SID,String externalUserId,Long parentFileExplorerItemId,String folderName,Long room_id,Boolean isOwner,Long externalFilesid,String externalType) throws AxisFault {  return this.geFileServiceProxy().addFolderByExternalUserIdAndType(SID,externalUserId,parentFileExplorerItemId,folderName,room_id,isOwner,externalFilesid,externalType);}  }
class C{  public String exportedName(){  final IdentifiableElement trgt=this.getOriginalTarget();  if ((trgt instanceof TExportableElement)) {    return ((TExportableElement)trgt).getExportedName();  }  IdentifiableElement _originalTarget=this.getOriginalTarget();  return _originalTarget.getName();}  }
class C{  public UF5(){  this(30);}  }
class C{  public boolean contains(Object o){  return indexOf(o) >= 0;}  }
class C{  public XmlElement addText(String text){  Preconditions.checkNotNull(text);  children.add(new Pair<Object,ChildType>(StringEscapeUtils.escapeXml(text),ChildType.TEXT));  return this;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  public void postCreateUnderLock(Engine.Create create){}  }
class C{  public void clearWrite(){}  }
class C{  public boolean undo(INode n){  FreeCellNode state=(FreeCellNode)n;  state.removeFoundation(suit);  state.insertFree(card);  return true;}  }
class C{  public Builder exitAnimResId(int exitAnimResId){  mExitAnimResId=exitAnimResId;  return this;}  }
class C{  protected void animateToState(boolean checked){  if (mProcessAnimator == null) {    return;  }  if (mProcessAnimator.isRunning()) {    mProcessAnimator.cancel();  }  mProcessAnimator.setDuration(mAnimationDuration);  if (checked) {    mProcessAnimator.setFloatValues(mProcess,1f);  } else {    mProcessAnimator.setFloatValues(mProcess,0);  }  mProcessAnimator.start();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 80) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private void validateTag(final ITreeNode<CTag> tag){  Preconditions.checkNotNull(tag,"IE00859: Tag argument can't be null");  Preconditions.checkNotNull(tag.getObject(),"IE00860: Tag object can't be null");  Preconditions.checkArgument(tag.getObject().getType() == m_type,"IE00861: Tag has an incorrect type");  Preconditions.checkArgument(hasTag(tag),"IE00862: Tag is not managed by this manager");}  }
class C{  protected void processError() throws CommandException {  String errorMessage=getErrorMessage();  throw new CommandException(errorMessage,output);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public void addPhoneNumber(PhoneNumberEntity phoneNumber){  phoneNumbers.add(phoneNumber);}  }
class C{  final Executor executor(){  return executor;}  }
class C{  protected Map<String,String> properties(@Nullable String username,@Nullable String grpName,@Nullable String perm){  Map<String,String> props=new HashMap<>();  if (username != null)   props.put(IgfsUtils.PROP_USER_NAME,username);  if (grpName != null)   props.put(IgfsUtils.PROP_GROUP_NAME,grpName);  if (perm != null)   props.put(IgfsUtils.PROP_PERMISSION,perm);  return props;}  }
class C{  public void connectionEvent(BOSHClientConnEvent connEvent){  try {    if (connEvent.isConnected()) {      connected=true;      if (isFirstInitialization) {        isFirstInitialization=false;        for (        ConnectionCreationListener listener : getConnectionCreationListeners()) {          listener.connectionCreated(connection);        }      } else {        try {          if (wasAuthenticated) {            connection.login(config.getUsername(),config.getPassword(),config.getResource());          }          for (          ConnectionListener listener : getConnectionListeners()) {            listener.reconnectionSuccessful();          }        } catch (        XMPPException e) {          for (          ConnectionListener listener : getConnectionListeners()) {            listener.reconnectionFailed(e);          }        }      }    } else {      if (connEvent.isError()) {        try {          connEvent.getCause();        } catch (        Exception e) {          notifyConnectionError(e);        }      }      connected=false;    }  }  finally {synchronized (connection) {      connection.notifyAll();    }  }}  }
class C{  private boolean addLinkToStructure(Map<NodePortTuple,Set<Link>> s,Link l){  boolean result1=false, result2=false;  NodePortTuple n1=new NodePortTuple(l.getSrc(),l.getSrcPort());  NodePortTuple n2=new NodePortTuple(l.getDst(),l.getDstPort());  if (s.get(n1) == null) {    s.put(n1,new HashSet<Link>());  }  if (s.get(n2) == null) {    s.put(n2,new HashSet<Link>());  }  result1=s.get(n1).add(l);  result2=s.get(n2).add(l);  return (result1 || result2);}  }
class C{  public static void addFile(String s) throws IOException {  File f=new File(s);  addFile(f);}  }
class C{  private void reduceThis(){  if (polynomial.getLength() > mDegree) {    if (((GF2nPolynomialField)mField).isTrinomial()) {      int tc;      try {        tc=((GF2nPolynomialField)mField).getTc();      } catch (      RuntimeException NATExc) {        throw new RuntimeException("GF2nPolynomialElement.reduce: the field" + " polynomial is not a trinomial");      }      if (((mDegree - tc) <= 32) || (polynomial.getLength() > (mDegree << 1))) {        reduceTrinomialBitwise(tc);        return;      }      polynomial.reduceTrinomial(mDegree,tc);      return;    } else     if (((GF2nPolynomialField)mField).isPentanomial()) {      int[] pc;      try {        pc=((GF2nPolynomialField)mField).getPc();      } catch (      RuntimeException NATExc) {        throw new RuntimeException("GF2nPolynomialElement.reduce: the field" + " polynomial is not a pentanomial");      }      if (((mDegree - pc[2]) <= 32) || (polynomial.getLength() > (mDegree << 1))) {        reducePentanomialBitwise(pc);        return;      }      polynomial.reducePentanomial(mDegree,pc);      return;    } else {      polynomial=polynomial.remainder(mField.getFieldPolynomial());      polynomial.expandN(mDegree);      return;    }  }  if (polynomial.getLength() < mDegree) {    polynomial.expandN(mDegree);  }}  }
class C{  public default void onResponse(RPCCall c,MessageBase rsp){}  }
class C{  public MediaWikiParserFactory(Language language){  initVariables();  if (language.equals(Language.german)) {    initGermanVariables();  } else   if (language.equals(Language.english)) {    initEnglishVariables();  } else {    logger.warn("No language specific parser for " + language.toString() + " available. Using default values.");  }}  }
class C{  public AudioFormat(float sampleRate,int sampleSizeInBits,int channels,boolean signed,boolean bigEndian){  this((signed == true ? Encoding.PCM_SIGNED : Encoding.PCM_UNSIGNED),sampleRate,sampleSizeInBits,channels,(channels == AudioSystem.NOT_SPECIFIED || sampleSizeInBits == AudioSystem.NOT_SPECIFIED) ? AudioSystem.NOT_SPECIFIED : ((sampleSizeInBits + 7) / 8) * channels,sampleRate,bigEndian);}  }
class C{  public static Element addElement(String name,Node parentElement){  Document parentDoc=parentElement.getOwnerDocument();  Document doc=(parentDoc != null ? parentDoc : (Document)parentElement);  Node ret=doc.createElement(name);  parentElement.appendChild(ret);  return (Element)ret;}  }
class C{  public void player(final String protagonist,final String text){  out.println("\t\ten.step(player, \"" + javaStringEscaper.escape(text) + "\");");}  }
class C{  public <T>List<T> runTasks(final List<Callable<T>> tasks,final long timeout,final TimeUnit unit,final int maxParallel) throws InterruptedException, ExecutionException, TimeoutException {  if (tasks == null)   throw new IllegalArgumentException();  if (unit == null)   throw new IllegalArgumentException();  if (maxParallel <= 0)   throw new IllegalArgumentException();  if (tasks.isEmpty()) {    return Collections.emptyList();  }  if (tasks.size() == 1) {    return runOne(tasks.get(0),timeout,unit);  } else   if (maxParallel == Integer.MAX_VALUE) {    return runMaxParallel(tasks,timeout,unit);  } else   if (maxParallel > 1) {    return runLimitedParallel(tasks,timeout,unit,maxParallel);  } else {    return runSequence(tasks,timeout,unit);  }}  }
class C{  protected static void println(String msg){  System.out.println(msg);}  }
class C{  public LinearTransform(DataSet dataSet){  this(dataSet,1,0);}  }
class C{  public Alphabet(String alpha){  boolean[] unicode=new boolean[Character.MAX_VALUE];  for (int i=0; i < alpha.length(); i++) {    char c=alpha.charAt(i);    if (unicode[c])     throw new IllegalArgumentException("Illegal alphabet: repeated character = '" + c + "'");    unicode[c]=true;  }  alphabet=alpha.toCharArray();  R=alpha.length();  inverse=new int[Character.MAX_VALUE];  for (int i=0; i < inverse.length; i++)   inverse[i]=-1;  for (int c=0; c < R; c++)   inverse[alphabet[c]]=c;}  }
class C{  protected void dragInitiated(){}  }
class C{  public Document modify(URL source) throws DocumentException, IOException {  try {    return installModifier().modify(source);  } catch (  JAXBRuntimeException ex) {    Throwable cause=ex.getCause();    throw new DocumentException(cause.getMessage(),cause);  }}  }
class C{  public LongArray(final long length){  super(length);  mArray=new long[(int)length];}  }
class C{  private IContentType[] computeBaseContentTypes(IContentType[] contentTypes){  List baseTypes=new ArrayList();  for (int i=0; i < contentTypes.length; i++) {    IContentType baseType=contentTypes[i].getBaseType();    if (baseType != null)     baseTypes.add(baseType);  }  IContentType[] result=null;  int size=baseTypes.size();  if (size > 0) {    result=new IContentType[size];    baseTypes.toArray(result);  }  return result;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException, java.io.InvalidObjectException {  Object a=s.readFields().get("array",null);  if (a == null || !a.getClass().isArray())   throw new java.io.InvalidObjectException("Not array type");  if (a.getClass() != Object[].class)   a=Arrays.copyOf((Object[])a,Array.getLength(a),Object[].class);  unsafe.putObjectVolatile(this,arrayFieldOffset,a);}  }
class C{  public static String replaceChar(String s,char sub,char with){  int startIndex=s.indexOf(sub);  if (startIndex == -1) {    return s;  }  char[] str=s.toCharArray();  for (int i=startIndex; i < str.length; i++) {    if (str[i] == sub) {      str[i]=with;    }  }  return new String(str);}  }
class C{  public static boolean debugFlagPresent(String[] preprocessedArgs){  return Arrays.asList(preprocessedArgs).contains("--debug");}  }
class C{  public void encode(OutputStream out) throws IOException {  derEncode(out);}  }
class C{  public Rectangle(Point[] points){  Point min=new Point(Double.MAX_VALUE,Double.MAX_VALUE);  Point max=new Point(Double.MIN_VALUE,Double.MIN_VALUE);  for (  Point p : points) {    if (p.x < min.x) {      min.x=p.x;    }    if (p.y < min.y) {      min.y=p.y;    }    if (p.x > max.x) {      max.x=p.x;    }    if (p.y > max.y) {      max.y=p.y;    }  }  setRect(new Rect(min,max));}  }
class C{  public static Border createEmpty(){  Border b=new Border();  b.emptyType=true;  return b;}  }
class C{  public boolean isPrecomputedForDoubleScalarMultiplication(){  return null != this.precomputedForDouble;}  }
class C{  public SFileChooser(final String currentDirectory,final String description){  this.currentDirectory=currentDirectory;  this.description=description;}  }
class C{  public void removeMigratingInVm(Vm vm){  vmDeallocate(vm);  getVmsMigratingIn().remove(vm);  getVmList().remove(vm);  getVmScheduler().getVmsMigratingIn().remove(vm.getUid());  vm.setInMigration(false);}  }
class C{  public synchronized void clear(){  if (closed)   return;  try {    if (Env.LOGGER.testTrace())     Env.LOGGER.trace((indexFile.length() == 0 ? "Initializing" : "Clearing") + " persistent map: " + rootFolder);    indexFile.setLength(0L);    indexFile.writeUTF(version.toString());    dataFile.setLength(0L);    indexMap.clear();    pcs.firePropertyChange(null,null,null);  } catch (  final IOException ie) {    Env.LOGGER.error("Error clearing persistent map: " + rootFolder,ie);  }}  }
class C{  @Override public void drawPolygon(int[] xPoints,int[] yPoints,int nPoints){}  }
class C{  public static int compute5(int x){  return 36969 * (x & 65535) + (x >> 16);}  }
class C{  protected void _removeUnwantedProperties(){  Iterator<Map.Entry<String,POJOPropertyBuilder>> it=_properties.entrySet().iterator();  while (it.hasNext()) {    Map.Entry<String,POJOPropertyBuilder> entry=it.next();    POJOPropertyBuilder prop=entry.getValue();    if (!prop.anyVisible()) {      it.remove();      continue;    }    if (prop.anyIgnorals()) {      _addIgnored(prop);      if (!prop.anyExplicitNames()) {        it.remove();        continue;      }      prop.removeIgnored();    }    prop.removeNonVisible();  }}  }
class C{  public void printDocComment(JCTree tree) throws IOException {  if (docComments != null) {    String dc=docComments.getCommentText(tree);    if (dc != null) {      print("/**");      println();      int pos=0;      int endpos=lineEndPos(dc,pos);      while (pos < dc.length()) {        align();        print(" *");        if (pos < dc.length() && dc.charAt(pos) > ' ')         print(" ");        print(dc.substring(pos,endpos));        println();        pos=endpos + 1;        endpos=lineEndPos(dc,pos);      }      align();      print(" */");      println();      align();    }  }}  }
class C{  public String TO_DATE(Timestamp time,boolean dayOnly){  if (time == null) {    if (dayOnly)     return "TRUNC(SysDate)";    return "SysDate";  }  StringBuffer dateString=new StringBuffer("TO_DATE('");  String myDate=time.toString();  if (dayOnly) {    dateString.append(myDate.substring(0,10));    dateString.append("','YYYY-MM-DD')");  } else {    dateString.append(myDate.substring(0,myDate.indexOf('.')));    dateString.append("','YYYY-MM-DD HH24:MI:SS')");  }  return dateString.toString();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.157 -0500",hash_original_method="D2A5F5698F1FC9281D0C68AF0BDE844E",hash_generated_method="9341FE86DB356DCCE766B8064D35353F") public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  public BlockTableAction(String actionName){  super(actionName);  if (jmri.InstanceManager.getNullableDefault(jmri.BlockManager.class) == null) {    setEnabled(false);  }  inchBox.setSelected(true);  centimeterBox.setSelected(false);  if (jmri.InstanceManager.getDefault(jmri.UserPreferencesManager.class).getSimplePreferenceState(getClassName() + ":LengthUnitMetric")) {    inchBox.setSelected(false);    centimeterBox.setSelected(true);  }  defaultBlockSpeedText=(Bundle.getMessage("UseGlobal","Global") + " " + jmri.InstanceManager.getDefault(jmri.BlockManager.class).getDefaultSpeed());  speedList.add(defaultBlockSpeedText);  java.util.Vector<String> _speedMap=jmri.InstanceManager.getDefault(SignalSpeedMap.class).getValidSpeedNames();  for (int i=0; i < _speedMap.size(); i++) {    if (!speedList.contains(_speedMap.get(i))) {      speedList.add(_speedMap.get(i));    }  }  updateSensorList();}  }
class C{  final public static float[] sphericalBetween(float phi1,float lambda0,float c,float Az,int n){  double cosphi1=Math.cos(phi1);  double sinphi1=Math.sin(phi1);  double cosAz=Math.cos(Az);  double sinAz=Math.sin(Az);  int end=n << 1;  float[] points=new float[end + 2];  points[0]=phi1;  points[1]=lambda0;  float inc=c / n;  c=inc;  for (int i=2; i <= end; i+=2, c+=inc) {    double sinc=Math.sin(c);    double cosc=Math.cos(c);    points[i]=(float)Math.asin(sinphi1 * cosc + cosphi1 * sinc * cosAz);    points[i + 1]=(float)Math.atan2(sinc * sinAz,cosphi1 * cosc - sinphi1 * sinc * cosAz) + lambda0;  }  return points;}  }
class C{  protected void visitingURL(String url){  if (trackVisitedURLs) {    if (visitedURLs == null) {      visitedURLs=new Vector();    }    if (!visitedURLs.contains(url)) {      visitedURLs.addElement(url);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.792 -0500",hash_original_method="BBA8F566F6EBBAE4E624DE5E2288492A",hash_generated_method="5E8CAC32EF86836AAB409F83647A3C3E") private static void checkNotNull(Object v){  if (v == null)   throw new NullPointerException();}  }
class C{  public SortedTableModel(){  this(null);}  }
class C{  public JTextArea(String text){  this(null,text,0,0);}  }
class C{  public SimplexNoiseGenerator(long seed){  this(new Random(seed));}  }
class C{  private void updateTextMinWidth(){  String text=mGeneratedTextView.getText().toString();  int maxline=0;  int start=0;  int index=text.indexOf('\n',start);  while (index > 0) {    maxline=Math.max(maxline,index - start);    start=index + 1;    index=text.indexOf('\n',start);  }  int remainder=text.length() - start;  if (remainder > 0) {    maxline=Math.max(maxline,remainder);  }  float density=getResources().getDisplayMetrics().density;  mGeneratedTextView.setMinWidth((int)(maxline * 13 * density));}  }
class C{  public static <T,V>LazyIterable<V> collectIf(Iterable<T> iterable,Predicate<? super T> predicate,Function<? super T,? extends V> function){  return LazyIterate.select(iterable,predicate).collect(function);}  }
class C{  public void createNetworkWithLanes(){  log.info("Create network and lanes ...");  Network net=this.scenario.getNetwork();  if (net.getCapacityPeriod() != 3600.0) {    throw new IllegalStateException();  }  ((Network)net).setEffectiveLaneWidth(1.0);  NetworkFactory fac=net.getFactory();  double scale=LINK_LENGTH;  Node na, nb, n1, n2, n3, n4, n5, n6, n7, n8;  net.addNode(na=fac.createNode(Id.create("a",Node.class),new Coord(0.0,0.0)));  net.addNode(nb=fac.createNode(Id.create("b",Node.class),new Coord(7.0 * scale,0.0)));  net.addNode(n1=fac.createNode(Id.create(1,Node.class),new Coord(1.0 * scale,0.0)));  net.addNode(n2=fac.createNode(Id.create(2,Node.class),new Coord(2.0 * scale,0.0)));  net.addNode(n3=fac.createNode(Id.create(3,Node.class),new Coord(3.0 * scale,1.0 * scale)));  net.addNode(n4=fac.createNode(Id.create(4,Node.class),new Coord(4.0 * scale,1.0 * scale)));  net.addNode(n5=fac.createNode(Id.create(5,Node.class),new Coord(5.0 * scale,0.0)));  net.addNode(n6=fac.createNode(Id.create(6,Node.class),new Coord(6.0 * scale,0.0)));  net.addNode(n7=fac.createNode(Id.create(7,Node.class),new Coord(3.0 * scale,-1.0 * scale)));  net.addNode(n8=fac.createNode(Id.create(8,Node.class),new Coord(4.0 * scale,-1.0 * scale)));  Node nc=null, nd=null, n9=null, n10=null, n11=null, n12=null;  if (useSecondODPair) {    net.addNode(nc=fac.createNode(Id.create("c",Node.class),new Coord(3.5 * scale,4.0 * scale)));    net.addNode(nd=fac.createNode(Id.create("d",Node.class),new Coord(3.5 * scale,-4.0 * scale)));    net.addNode(n9=fac.createNode(Id.create(9,Node.class),new Coord(3.5 * scale,3.0 * scale)));    net.addNode(n10=fac.createNode(Id.create(10,Node.class),new Coord(3.5 * scale,2.0 * scale)));    net.addNode(n11=fac.createNode(Id.create(11,Node.class),new Coord(3.5 * scale,-2.0 * scale)));    net.addNode(n12=fac.createNode(Id.create(12,Node.class),new Coord(3.5 * scale,-3.0 * scale)));  }  initLinkIds();  Link l=fac.createLink(links.get("a_1"),na,n1);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("1_a"),n1,na);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("6_b"),n6,nb);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("b_6"),nb,n6);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("1_2"),n1,n2);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("2_1"),n2,n1);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("2_3"),n2,n3);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("3_2"),n3,n2);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("3_4"),n3,n4);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("4_3"),n4,n3);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("4_5"),n4,n5);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("5_4"),n5,n4);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("5_6"),n5,n6);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("6_5"),n6,n5);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("2_7"),n2,n7);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("7_2"),n7,n2);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("7_8"),n7,n8);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("8_7"),n8,n7);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("8_5"),n8,n5);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  l=fac.createLink(links.get("5_8"),n5,n8);  setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);  net.addLink(l);  if (useSecondODPair) {    l=fac.createLink(links.get("9_c"),n9,nc);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("c_9"),nc,n9);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("12_d"),n12,nd);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("d_12"),nd,n12);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("3_7"),n3,n7);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("7_3"),n7,n3);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("4_8"),n4,n8);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("8_4"),n8,n4);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("3_10"),n3,n10);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("10_3"),n10,n3);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("4_10"),n4,n10);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("10_4"),n10,n4);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("9_10"),n9,n10);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("10_9"),n10,n9);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("7_11"),n7,n11);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("11_7"),n11,n7);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("8_11"),n8,n11);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("11_8"),n11,n8);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("11_12"),n11,n12);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);    l=fac.createLink(links.get("12_11"),n12,n11);    setLinkAttributes(l,capacity,LINK_LENGTH,FREESPEED);    net.addLink(l);  }  createLanes();}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){  inactivityTimer.onActivity();  lastResult=rawResult;  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    beepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,scaleFactor,rawResult);  }  if (barcode != null) {    viewfinderView.drawResultBitmap(barcode);  }  long resultDurationMS;  if (getIntent() == null) {    resultDurationMS=DEFAULT_INTENT_RESULT_DURATION_MS;  } else {    resultDurationMS=getIntent().getLongExtra(Intents.Scan.RESULT_DISPLAY_DURATION_MS,DEFAULT_INTENT_RESULT_DURATION_MS);  }  if (resultDurationMS > 0) {    statusView.setText(R.string.scan_success_string);  }  if (source == IntentSource.NATIVE_APP_INTENT) {    Intent intent=new Intent(getIntent().getAction());    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);    intent.putExtra(Intents.Scan.RESULT,rawResult.toString());    intent.putExtra(Intents.Scan.RESULT_FORMAT,rawResult.getBarcodeFormat().toString());    byte[] rawBytes=rawResult.getRawBytes();    if (rawBytes != null && rawBytes.length > 0) {      intent.putExtra(Intents.Scan.RESULT_BYTES,rawBytes);    }    Map<ResultMetadataType,?> metadata=rawResult.getResultMetadata();    if (metadata != null) {      if (metadata.containsKey(ResultMetadataType.UPC_EAN_EXTENSION)) {        intent.putExtra(Intents.Scan.RESULT_UPC_EAN_EXTENSION,metadata.get(ResultMetadataType.UPC_EAN_EXTENSION).toString());      }      Number orientation=(Number)metadata.get(ResultMetadataType.ORIENTATION);      if (orientation != null) {        intent.putExtra(Intents.Scan.RESULT_ORIENTATION,orientation.intValue());      }      String ecLevel=(String)metadata.get(ResultMetadataType.ERROR_CORRECTION_LEVEL);      if (ecLevel != null) {        intent.putExtra(Intents.Scan.RESULT_ERROR_CORRECTION_LEVEL,ecLevel);      }      @SuppressWarnings("unchecked") Iterable<byte[]> byteSegments=(Iterable<byte[]>)metadata.get(ResultMetadataType.BYTE_SEGMENTS);      if (byteSegments != null) {        int i=0;        for (        byte[] byteSegment : byteSegments) {          intent.putExtra(Intents.Scan.RESULT_BYTE_SEGMENTS_PREFIX + i,byteSegment);          i++;        }      }    }    sendReplyMessage(R.id.return_scan_result,intent,resultDurationMS);  }}  }
class C{  public int lastIndexOf(Object elem){  if (elem == null) {    for (int i=size - 1; i >= 0; i--)     if (elementData[i] == null)     return i;  } else {    for (int i=size - 1; i >= 0; i--)     if (elem.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  @Override public void addChangeListener(AnnotationChangeListener listener){  this.listenerList.add(AnnotationChangeListener.class,listener);}  }
class C{  public static <T>MutableSeq<T> newMutableSeq(){  return new SeqImpl<>();}  }
class C{  protected void add(DistributedRegion r,ReliableDistributionData data,Set roles){synchronized (this) {    Iterator it=roles.iterator();    while (it.hasNext()) {      Role role=(Role)it.next();      List l=(List)this.roleMap.get(role);      if (l == null) {        l=new ArrayList();        this.roleMap.put(role,l);      }      l.addAll(data.getOperations());    }  }}  }
class C{  @Override public void clear(){  this._set.clear();}  }
class C{  public ResultadoBusquedaBean(){}  }
class C{  public static <T>List<T> readNullableCollection(BinaryRawReaderEx reader){  return readNullableCollection(reader,null);}  }
class C{  private void addJointAction(Class<? extends Joint> clazz){synchronized (Simulation.LOCK) {    SandboxBody[] bodies=this.getBodies();    if (bodies == null || bodies.length == 0 || (clazz != PinJoint.class && bodies.length == 1)) {      JOptionPane.showMessageDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.joint.add.warning"),Messages.getString("menu.context.joint.add.warning.title"),JOptionPane.ERROR_MESSAGE);      return;    }    Joint joint=AddJointDialog.show(ControlUtilities.getParentWindow(this),bodies,clazz);    if (joint != null) {      this.simulation.getWorld().addJoint(joint);      DefaultMutableTreeNode jointNode=new DefaultMutableTreeNode(joint);      this.model.insertNodeInto(jointNode,this.jointFolder,this.jointFolder.getChildCount());      this.tree.expandPath(new TreePath(jointNode.getPath()).getParentPath());    }  }}  }
class C{  public PictureDrawable createPictureDrawable(){  return new PictureDrawable(picture);}  }
class C{  public static void removeDnsCache(String host){  try {    InetAddressCacheUtil.removeInetAddressCache(host);  } catch (  Exception e) {    final String message=String.format("Fail to removeDnsCache for host %s, cause: %s",host,e.toString());    throw new DnsCacheManipulatorException(message,e);  }}  }
class C{  public void parseForField(GenericDeclaration genericDecl,String signature){  setInput(genericDecl,signature);  if (!eof) {    this.fieldType=parseFieldTypeSignature();  }}  }
class C{  @Nullable private static String escapeChar(char c,boolean escapeApostrophes,boolean escapeSpaces,boolean escapeLineEnds){switch (c) {case '\n':    return escapeLineEnds ? "&#10;" : null;case '\r':  return escapeLineEnds ? "&#13;" : null;case '\t':return escapeLineEnds ? "&#9;" : null;case ' ':return escapeSpaces ? "&#20" : null;case '<':return "&lt;";case '>':return "&gt;";case '\"':return "&quot;";case '\'':return escapeApostrophes ? "&apos;" : null;case '&':return "&amp;";}return null;}  }
class C{  private Pair<String,String> classPathOf(IJavaProject project) throws JavaModelException {  Pair<List<String>,List<String>> paths=classPathEntries(project);  return new Pair<String,String>(PluginUtil.join(File.pathSeparator,paths.fst),PluginUtil.join(File.pathSeparator,paths.snd));}  }
class C{  public int errorCount(){  if (delegateCompiler != null && delegateCompiler != this)   return delegateCompiler.errorCount(); else {    if (werror && log.nerrors == 0 && log.nwarnings > 0) {      log.error("warnings.and.werror");    }  }  return log.nerrors;}  }
class C{  protected void removeTask(String map,String taskId){synchronized (getMap(map)) {    getMap(map).remove(taskId);  }}  }
class C{  static int checkDesc(final String desc,final int start,final boolean canBeVoid){  if (desc == null || start >= desc.length()) {    throw new IllegalArgumentException("Invalid type descriptor (must not be null or empty)");  }  int index;switch (desc.charAt(start)) {case 'V':    if (canBeVoid) {      return start + 1;    } else {      throw new IllegalArgumentException("Invalid descriptor: " + desc);    }case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':  return start + 1;case '[':index=start + 1;while (index < desc.length() && desc.charAt(index) == '[') {++index;}if (index < desc.length()) {return checkDesc(desc,index,false);} else {throw new IllegalArgumentException("Invalid descriptor: " + desc);}case 'L':index=desc.indexOf(';',start);if (index == -1 || index - start < 2) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}try {checkInternalName(desc,start + 1,index,null);} catch (IllegalArgumentException unused) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}return index + 1;default :throw new IllegalArgumentException("Invalid descriptor: " + desc);}}  }
class C{  protected boolean attachInput(InputStream is){  boolean isOfx1=true;  boolean result=false;  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(is));    reader.mark(HEADER_SIZE + 100);    String header="";    for (int i=0; i < HEADER_SIZE; i++) {      header=header + reader.readLine();    }    if ((header.indexOf("<?OFX") != -1) || (header.indexOf("<?ofx") != -1)) {      isOfx1=false;    } else     if ((header.indexOf("<?XML") != -1) || (header.indexOf("<?xml") != -1)) {      isOfx1=false;    } else {      isOfx1=true;    }    reader.reset();    if (isOfx1) {      m_reader=new BufferedReader(new InputStreamReader(new OFX1ToXML(reader)));    } else {      m_reader=reader;    }    result=true;  } catch (  IOException e) {    m_errorMessage="ErrorReadingData";    m_errorDescription=e.getMessage();    return result;  }  return result;}  }
class C{  public void dynInit() throws Exception {  int AD_Column_ID=3505;  MLookup lookupCur=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,AD_Column_ID,DisplayType.TableDir);  currencyPick=new VLookup("C_Currency_ID",true,false,true,lookupCur);  currencyPick.setValue(new Integer(m_C_Currency_ID));  currencyPick.addVetoableChangeListener(this);  AD_Column_ID=839;  MLookup lookupOrg=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,AD_Column_ID,DisplayType.TableDir);  organizationPick=new VLookup("AD_Org_ID",true,false,true,lookupOrg);  organizationPick.setValue(Env.getAD_Org_ID(Env.getCtx()));  organizationPick.addVetoableChangeListener(this);  AD_Column_ID=3499;  MLookup lookupBP=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,AD_Column_ID,DisplayType.Search);  bpartnerSearch=new VLookup("C_BPartner_ID",true,false,true,lookupBP);  bpartnerSearch.addVetoableChangeListener(this);  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"AllocateStatus"));  statusBar.setStatusDB("");  dateField.setValue(Env.getContextAsDate(Env.getCtx(),"#Date"));  dateField.addVetoableChangeListener(this);  AD_Column_ID=61804;  MLookup lookupCharge=MLookupFactory.get(Env.getCtx(),m_WindowNo,0,AD_Column_ID,DisplayType.TableDir);  chargePick=new VLookup("C_Charge_ID",false,false,true,lookupCharge);  chargePick.setValue(new Integer(m_C_Charge_ID));  chargePick.addVetoableChangeListener(this);}  }
class C{  public Set<String> retainIconRelations(Collection<String> relTokens){  HashSet<String> iconRels=new HashSet<>();  for (  String token : relTokens) {    if (IconLinkRelations.isIconRel(token)) {      iconRels.add(token.toLowerCase(Locale.ENGLISH));    }  }  return iconRels;}  }
class C{  public boolean evaluate(Context context,Writer writer,String logTag,InputStream instream) throws ParseErrorException, MethodInvocationException, ResourceNotFoundException, IOException {  BufferedReader br=null;  String encoding=null;  try {    encoding=ri.getString(INPUT_ENCODING,ENCODING_DEFAULT);    br=new BufferedReader(new InputStreamReader(instream,encoding));  } catch (  UnsupportedEncodingException uce) {    String msg="Unsupported input encoding : " + encoding + " for template "+ logTag;    throw new ParseErrorException(msg);  }  return evaluate(context,writer,logTag,br);}  }
class C{  public void test_setNameConstraintsLB$() throws IOException {  X509CertSelector selector=new X509CertSelector();  for (int i=0; i < constraintBytes.length; i++) {    selector.setNameConstraints(constraintBytes[i]);    assertTrue(Arrays.equals(constraintBytes[i],selector.getNameConstraints()));  }}  }
class C{  private void registerListeners(){  PluginManager pluginManager=Bukkit.getPluginManager();  pluginManager.registerEvents(new PlayerListener(this),this);  if (UltraCosmeticsData.get().getServerVersion().compareTo(ServerVersion.v1_9_R1) >= 0) {    pluginManager.registerEvents(new PlayerSwapItemListener(this),this);  }  this.treasureChestManager=new TreasureChestManager(this);  pluginManager.registerEvents(treasureChestManager,this);}  }
class C{  public StrTokenizer(final String input,final StrMatcher delim){  this(input);  setDelimiterMatcher(delim);}  }
class C{  public MemLiteral(Object creator,String label,IRI datatype){  super(label,datatype);  this.creator=creator;}  }
class C{  public void test_ConstructorILjava_lang_String(){  SimpleTimeZone st=new SimpleTimeZone(1000,"TEST");  assertEquals("Incorrect TZ constructed","TEST",st.getID());  assertTrue("Incorrect TZ constructed: " + "returned wrong offset",st.getRawOffset() == 1000);  assertTrue("Incorrect TZ constructed" + "using daylight savings",!st.useDaylightTime());}  }
class C{  public static TitledBorder createTitledBorder(Border border,String title,int titleJustification,int titlePosition,Font titleFont){  return new TitledBorder(border,title,titleJustification,titlePosition,titleFont);}  }
class C{  public static void checkEnvironment(Map<String,String> environmentVariables){  Baggage.start(environmentVariables.get(BAGGAGE_ENVIRONMENT_VARIABLE));}  }
class C{  public static String readAndCloseQuietly(InputStream inputStream) throws IOException {  try {    return readStream(inputStream);  } catch (  IOException e) {    LOG.error(e.getLocalizedMessage(),e);    throw e;  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {        LOG.error(e.getLocalizedMessage(),e);      }    }  }}  }
class C{  @Override public void actOn(File f){  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(f));    announceSeedsFromReader(reader);  } catch (  FileNotFoundException fnf) {    logger.log(Level.SEVERE,"seed file source not found",fnf);  } finally {    IOUtils.closeQuietly(reader);  }}  }
class C{  @Override public Object adapt(Object object,Object type){  if (isFactoryForType(type)) {    Object adapter=super.adapt(object,type);    if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {      return adapter;    }  }  return null;}  }
class C{  public static boolean containsCharRef(String s){  return characterReferencePattern.matcher(s).find();}  }
class C{  public static EjbJarXmlVersion valueOf(DocumentType docType) throws NullPointerException {  return valueOf(docType.getPublicId());}  }
class C{  void recordUndeployed(){  assert !Thread.holdsLock(mux);  GridEventStorageManager evts=ctx.event();  if (evts.isRecordable(EVT_CLASS_UNDEPLOYED) || evts.isRecordable(EVT_TASK_UNDEPLOYED)) {    for (    Map.Entry<String,Class<?>> depCls : deployedClassMap().entrySet()) {      boolean isTask=isTask(depCls.getValue());      String msg=(isTask ? "Task" : "Class") + " was undeployed in Private or Isolated mode " + "[cls="+ depCls.getValue()+ ", alias="+ depCls.getKey()+ ']';      if (evts.isRecordable(!isTask ? EVT_CLASS_UNDEPLOYED : EVT_TASK_UNDEPLOYED)) {        DeploymentEvent evt=new DeploymentEvent();        evt.node(sndNode);        evt.message(msg);        evt.type(!isTask ? EVT_CLASS_UNDEPLOYED : EVT_TASK_UNDEPLOYED);        evt.alias(depCls.getKey());        evts.record(evt);      }      if (log.isInfoEnabled())       log.info(msg);    }  }  if (obsolete()) {    ctx.resource().onUndeployed(this);    ClassLoader ldr=classLoader();    ctx.cache().onUndeployed(ldr);    if (ctx.config().getMarshaller() instanceof AbstractMarshaller)     ((AbstractMarshaller)ctx.config().getMarshaller()).onUndeploy(ldr);    clearSerializationCaches();    GridAnnotationsCache.onUndeployed(ldr);    GridClassLoaderCache.onUndeployed(ldr);  }}  }
class C{  public void removeWhitelistURL(String URL){  serviceWhitelist.remove(URL);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private int parseSequenceNumber(final byte[] b,final int off) throws ParseException {  sequenceNumber_=PrimitivesParser.parseInt(b,off);  return Integer.SIZE / Byte.SIZE;}  }
class C{  protected final Object clone(){  return this;}  }
class C{  public void saveNewPost(Post post){  postRepository.save(post);  PostSearchService.index(post);  if (post.getStatus() == PostStatus.PUBLIC) {    hotPostService.addHotPost(post);    hotPostService.addTaggedPost(post,post.getTags());    newPostsService.add(post);    newPostsService.addTaggedPost(post,post.getTags());    countingService.incPublicPostsCount();  }  countingService.incPostsCount();}  }
class C{  public static void main(String[] args) throws Exception {  Wiser wiser=new Wiser();  wiser.start();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.441 -0500",hash_original_method="8A489CB2A393053F8EB365921E8E5602",hash_generated_method="D822D24219EEE37C20EBA54E6F6E3402") public static SslCertificate restoreState(Bundle bundle){  if (bundle == null) {    return null;  }  X509Certificate x509Certificate;  byte[] bytes=bundle.getByteArray(X509_CERTIFICATE);  if (bytes == null) {    x509Certificate=null;  } else {    try {      CertificateFactory certFactory=CertificateFactory.getInstance("X.509");      Certificate cert=certFactory.generateCertificate(new ByteArrayInputStream(bytes));      x509Certificate=(X509Certificate)cert;    } catch (    CertificateException e) {      x509Certificate=null;    }  }  return new SslCertificate(bundle.getString(ISSUED_TO),bundle.getString(ISSUED_BY),parseDate(bundle.getString(VALID_NOT_BEFORE)),parseDate(bundle.getString(VALID_NOT_AFTER)),x509Certificate);}  }
class C{  private String guessParameterName(String value){  if (ICalDataType.find(value) != null) {    return ICalParameters.VALUE;  }  if (Encoding.find(value) != null) {    return ICalParameters.ENCODING;  }  return ICalParameters.TYPE;}  }
class C{  public double eval(Map<String,Double> tuple) throws Exception {synchronized (this) {    this.setVariables(tuple);    return this.eval();  }}  }
class C{  public static boolean isPermanentSideMenu(){  return permanentSideMenu;}  }
class C{  public void mergeWith(BlockType other){  if (this.isTop() || other.isBottom()) {    copyFrom(other);  } else   if (isValid()) {    int pfxLen=Math.min(this.depth,other.depth);    int commonLen;    for (commonLen=0; commonLen < pfxLen; ++commonLen) {      if (this.get(commonLen) != other.get(commonLen)) {        break;      }    }    this.depth=commonLen;  }}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  public void testBug12218() throws Exception {  if (runMultiHostTests()) {    Connection replConn=null;    try {      replConn=getMasterSlaveReplicationConnection();      assertTrue(!((MySQLConnection)((ReplicationConnection)replConn).getMasterConnection()).hasSameProperties(((ReplicationConnection)replConn).getSlavesConnection()));    }  finally {      if (replConn != null) {        replConn.close();      }    }  }}  }
class C{  SwitchDataEnumeration(Hashtable<Integer,Label> tab){  table=new Integer[tab.size()];  int i=0;  for (Enumeration<Integer> e=tab.keys(); e.hasMoreElements(); ) {    table[i++]=e.nextElement();  }  Arrays.sort(table);  current_index=0;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public boolean isStateActive(State state){switch (state) {case r1_A:    return stateVector[0] == State.r1_A;case r1_B:  return stateVector[0] == State.r1_B;case r2_C:return stateVector[1] == State.r2_C;case r2_D:return stateVector[1] == State.r2_D;default :return false;}}  }
class C{  protected void fireTradeOrderFilled(TradeOrder tradeOrder){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == BrokerChangeListener.class) {      ((BrokerChangeListener)listeners[i + 1]).tradeOrderFilled(tradeOrder);    }  }}  }
class C{  @Override public BigDataMemAllocator disableActiveGC(){  m_activegc=false;  return this;}  }
class C{  @Override public void undoAccept(Offer offer){  acceptedOffers.remove(offer);  undoOfferAcceptStream.onNext(offer);}  }
class C{  static CharBuffer randomize(CharBuffer cb){  while (cb.hasRemaining()) {    cb.put((char)RAND.nextInt());  }  return randomizeRange(cb);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_ENUM_LITERAL__NAME:    setName(NAME_EDEFAULT);  return;case N4JSPackage.N4_ENUM_LITERAL__VALUE:setValue(VALUE_EDEFAULT);return;case N4JSPackage.N4_ENUM_LITERAL__DEFINED_LITERAL:setDefinedLiteral((TEnumLiteral)null);return;}super.eUnset(featureID);}  }
class C{  public void addProvider(String tenantName,IIdentityStoreData idp) throws LocalISRegistrationException, NotBoundException, MalformedURLException, RemoteException, IDMException {  getService().addProvider(tenantName,idp,this.getServiceContext());}  }
class C{  public long remove(K key){  if (key == null) {    long old=_nullValue;    _nullValue=NULL;    return old;  }  int hash=key.hashCode() & _mask;  while (true) {    Object mapKey=_keys[hash];    if (mapKey == null)     return NULL; else     if (mapKey.equals(key)) {      _flags[hash]|=DELETED;      _size--;      _keys[hash]=null;      return _values[hash];    }    hash=(hash + 1) & _mask;  }}  }
class C{  public String toString(){  return pathstr;}  }
class C{  public void vMotionDuringGII(Set recipientSet,LocalRegion region){}  }
class C{  static PreparedStatement prepareStatement(String sql) throws SQLException {  return prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTrace_();}  }
class C{  public DefaultSocketSessionConfig(){}  }
class C{  public long cnswap(){  return Long.parseLong(fields[36]);}  }
class C{  public boolean isValid(String key){  TimeAndValue timeAndValue=values.get(key);  LocalDateTime now=LocalDateTime.now().minusSeconds(expireSeconds);  return timeAndValue != null && timeAndValue.getTime().isAfter(now);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_MEMORYTYPE_HOST:    return "CU_MEMORYTYPE_HOST";case CU_MEMORYTYPE_DEVICE:  return "CU_MEMORYTYPE_DEVICE";case CU_MEMORYTYPE_ARRAY:return "CU_MEMORYTYPE_ARRAY";case CU_MEMORYTYPE_UNIFIED:return "CU_MEMORYTYPE_UNIFIED";}return "INVALID CUmemorytype: " + n;}  }
class C{  public HtmlListElement(){  this((Element)null);}  }
class C{  public String numberAutoencodersTipText(){  return numberAutoencodersToolTip();}  }
class C{  private static void printEntry(SidewikiEntry entry){  SidewikiAuthor author=(SidewikiAuthor)entry.getAuthors().get(0);  System.out.println("Sidewiki entry by " + author.getName() + " about \""+ entry.getLink(SidewikiLink.Rel.ORIGINAL_URL,ILink.Type.HTML).getHref()+ "\":\n"+ entry.getTitle().getPlainText()+ "\" - \""+ contentToString(entry.getContent())+ "\"\n");}  }
class C{  public SphericalPolarCoordinates(Vector3D v){  this(v,v.modulus());}  }
class C{  @SuppressWarnings("unchecked") public static SingleVariableDeclaration createAsyncCallbackParameter(AST ast,Type syncReturnType,String callbackParameterName,ImportRewrite imports){  ITypeBinding syncReturnTypeBinding=syncReturnType.resolveBinding();  SingleVariableDeclaration parameter=ast.newSingleVariableDeclaration();  String gwtCallbackTypeSig=Signature.createTypeSignature(RemoteServiceUtilities.ASYNCCALLBACK_QUALIFIED_NAME,true);  Type gwtCallbackType=imports.addImportFromSignature(gwtCallbackTypeSig,ast);  if (syncReturnTypeBinding.isPrimitive()) {    String wrapperName=JavaASTUtils.getWrapperTypeName(syncReturnTypeBinding.getName());    String wrapperTypeSig=Signature.createTypeSignature(wrapperName,true);    syncReturnType=imports.addImportFromSignature(wrapperTypeSig,ast);  } else {    syncReturnType=JavaASTUtils.normalizeTypeAndAddImport(ast,syncReturnType,imports);  }  ParameterizedType type=ast.newParameterizedType(gwtCallbackType);  List<Type> typeArgs=type.typeArguments();  typeArgs.add(syncReturnType);  parameter.setType(type);  parameter.setName(ast.newSimpleName(callbackParameterName));  return parameter;}  }
class C{  void addWriteBlocks(int total,int secondary){  IgniteBiTuple<LongAdder8,LongAdder8> blocksWritten0=blocksWritten;  blocksWritten0.get1().add(total);  blocksWritten0.get2().add(secondary);}  }
class C{  public final void clear(){  checkPoint=-1;  if (current_item > 0) {    for (int i=0; i < current_item; i++) {      items[i]=null;    }  } else {    for (int i=0; i < max_size; i++) {      items[i]=null;    }  }  current_item=0;}  }
class C{  public BigDecimalMapper integerDigits(Integer integerDigits){  this.integerDigits=integerDigits;  return this;}  }
class C{  private ActionErrors comprobarDuplicados(GestionDescripcionBI descripcionService,HttpServletRequest request,ActionErrors errors,CampoDatoVO campoDatoVO,String guid){  if (errors == null) {    errors=new ActionErrors();  }  comprobarExistenciaRegistroByKey(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADCAMPODATO_TABLE,guid,Constants.LABEL_CAMPO_DATO,Constants.ETIQUETA_GUID);  comprobarExistenciaRegistroByValue(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADCAMPODATO_TABLE,campoDatoVO.getId(),campoDatoVO.getNombre(),Constants.LABEL_CAMPO_DATO,Constants.ETIQUETA_NOMBRE);  comprobarExistenciaRegistroByKey(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADCAMPOTBL_TABLE,guid,Constants.LABEL_CAMPO_TABLA,Constants.ETIQUETA_GUID);  comprobarExistenciaRegistroByValue(request,errors,ArchivoModules.DESCRIPCION_MODULE,ArchivoTables.ADCAMPOTBL_TABLE,campoDatoVO.getId(),campoDatoVO.getNombre(),Constants.LABEL_CAMPO_TABLA,Constants.ETIQUETA_NOMBRE);  comprobarExistenciaEtiquetaXml(request,errors,campoDatoVO.getEtiquetaXml(),campoDatoVO.getId(),Constants.ETIQUETA_ETIQUETAXML,ArchivoTables.ADCAMPODATO_TABLE);  return errors;}  }
class C{  protected double clampElevation(double elevation){  return elevation < this.threshold ? this.threshold : elevation;}  }
class C{  private WebDoc createPage(Properties ctx,MAttachment attachment,String error){  WebDoc doc=WebDoc.createPopup(Msg.translate(ctx,"AD_Attachment_ID"));  table table=doc.getTable();  if (error != null) {    table.addElement(new tr().addElement(new td("popupHeader",AlignType.RIGHT,AlignType.TOP,false,null)).addElement(new td("popupHeader",AlignType.LEFT,AlignType.TOP,false,new p(error,AlignType.LEFT).setClass("Cerror"))));  }  tr tr=new tr();  td left=new td("popupCenter",AlignType.LEFT,AlignType.TOP,false,new label("TextMsg","T",Msg.translate(ctx,"TextMsg")));  td right=new td("popupCenter",AlignType.LEFT,AlignType.TOP,false);  form textMsg=new form("WAttachment");  textMsg.addElement(new input(input.TYPE_HIDDEN,P_Attachment_ID,attachment.getAD_Attachment_ID()));  textMsg.addElement(new input(input.TYPE_HIDDEN,"AD_Table_ID",attachment.getAD_Table_ID()));  textMsg.addElement(new input(input.TYPE_HIDDEN,"Record_ID",attachment.getRecord_ID()));  textarea msg=new textarea(P_TEXTMSG,5,40);  msg.addElement(attachment.getTextMsg());  textMsg.addElement(msg);  textMsg.addElement(new br());  right.addElement(textMsg);  p p=new p();  MAttachmentEntry[] entries=attachment.getEntries();  for (int i=0; i < entries.length; i++) {    MAttachmentEntry entry=entries[i];    if (i > 0)     p.addElement(" - ");    String url="WAttachment?" + P_Attachment_ID + "="+ attachment.getAD_Attachment_ID()+ "&"+ P_ATTACHMENT_INDEX+ "="+ entry.getIndex();    p.addElement(new a(url,null,a.TARGET_BLANK,entry.getName()));  }  right.addElement(p);  form upload=FileUpload.createForm("WAttachment");  upload.addElement(new input(input.TYPE_HIDDEN,P_Attachment_ID,attachment.getAD_Attachment_ID()));  upload.addElement(new input(input.TYPE_HIDDEN,"AD_Table_ID",attachment.getAD_Table_ID()));  upload.addElement(new input(input.TYPE_HIDDEN,"Record_ID",attachment.getRecord_ID()));  right.addElement(upload);  tr.addElement(left);  tr.addElement(right);  table.addElement(tr);  doc.addPopupClose(ctx);  return doc;}  }
class C{  public static SpringConfig fromOrigamiTensionAndFriction(double qcTension,double qcFriction){  return new SpringConfig(OrigamiValueConverter.tensionFromOrigamiValue(qcTension),OrigamiValueConverter.frictionFromOrigamiValue(qcFriction));}  }
class C{  public OMGraphicList cut(OMGraphicList omgl){  OMGraphicList list=getList();  if (list != null && omgl != null) {    list.removeAll(omgl);  }  return omgl;}  }
class C{  public ExitMonitorStmt newExitMonitorStmt(Value op){  return new JExitMonitorStmt(op);}  }
class C{  public static boolean isPatchExtension(String header){  if (header == null) {    return false;  }  return Arrays.asList(header.split(";")).stream().map(null).filter(null).anyMatch(null);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public List<String> provideWhiteList(){  LinkedList<String> whiteList=new LinkedList<>();  whiteList.add("org.chromium");  return whiteList;}  }
class C{  public SearchResult(String title,Drawable icon){  this.title=title;  this.icon=icon;}  }
class C{  public static char nextKeyTyped(){synchronized (keyLock) {    return keysTyped.removeLast();  }}  }
class C{  public static UnitValue parseUnitValue(String s,boolean isHor){  return parseUnitValue(s,null,isHor);}  }
class C{  private void sendLeftGroupEvent(Set<String> toRemove){  StendhalRPRuleProcessor ruleProcessor=SingletonRepository.getRuleProcessor();  RPEvent event=new GroupChangeEvent();  for (  String playerName : toRemove) {    Player player=ruleProcessor.getPlayer(playerName);    if (player != null) {      player.addEvent(event);      player.notifyWorldAboutChanges();    }  }}  }
class C{  public String toString(){  return "type = " + type;}  }
class C{  private void ensureBlobNamespace(ElementHandler handler,String qName){  NamespaceDecl nsDecl=null;  String alias=qName.substring(0,Math.max(0,qName.indexOf(":")));  if (alias.equals("xml")) {    return;  }  Stack<NamespaceDecl> mapping=namespaceMap.get(alias);  if (mapping != null) {    nsDecl=mapping.peek();  }  assert alias.length() == 0 || nsDecl != null : "Namespace alias '" + alias + "' should be mapped in 'namespaceMap'.";  if (nsDecl != null && !nsDecl.inBlob && nsDecl.ns != null && !handler.blobNamespaces.contains(alias)) {    handler.blobNamespaces.add(alias);    handler.xmlBlob.getNamespaces().add(new XmlNamespace(alias,nsDecl.ns.getUri()));  }}  }
class C{  public TXLockBatch(TXLockId txLockId,List reqs,Set participants){  this.txLockId=(TXLockIdImpl)txLockId;  this.reqs=reqs;  this.participants=participants;}  }
class C{  private int intToZigZag(int n){  return (n << 1) ^ (n >> 31);}  }
class C{  @Override public int numValues(){  return m_Indices.length;}  }
class C{  @Override protected int lookForSelectablePosition(int position,boolean lookDown){  final ListAdapter adapter=mAdapter;  if (adapter == null || isInTouchMode()) {    return INVALID_POSITION;  }  final int count=adapter.getCount();  if (!mAreAllItemsSelectable) {    if (lookDown) {      position=Math.max(0,position);      while (position < count && !adapter.isEnabled(position)) {        position++;      }    } else {      position=Math.min(position,count - 1);      while (position >= 0 && !adapter.isEnabled(position)) {        position--;      }    }    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  } else {    if (position < 0 || position >= count) {      return INVALID_POSITION;    }    return position;  }}  }
class C{  public static boolean readBoolean(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonObject.getBoolean(key);  }  if (notNull && jsonObject.isNull(key)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));  }  boolean value=false;  if (!jsonObject.isNull(key)) {    value=jsonObject.getBoolean(key);  }  return value;}  }
class C{  public static int find(byte[] a,int fromIndex,int toIndex,byte[] key){  int result=-1;  int sublen=key.length;  int maxpos, first, sp=0;  maxpos=Math.min(toIndex,a.length) - sublen;  for (first=fromIndex; sp != sublen && first <= maxpos; first++) {    first=find(a,first,maxpos,key[0]);    if ((first < 0) || (first > maxpos)) {      break;    }    for (sp=1; sp < sublen; sp++) {      if (a[first + sp] != key[sp]) {        sp=sublen;      }    }  }  if (sublen == 0) {    result=0;  } else   if (sp == sublen) {    result=(first - 1);  }  return result;}  }
class C{  @Override public synchronized int read(){  return pos < count ? buffer.charAt(pos++) & 0xFF : -1;}  }
