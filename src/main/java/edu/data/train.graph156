class C{  public XAtomList(long data,int count){  init(data,count);}  }
class C{  private void shrinkAndStretchColumns(int widthMeasureSpec){  if (mMaxWidths == null) {    return;  }  int totalWidth=0;  for (  int width : mMaxWidths) {    totalWidth+=width;  }  int size=MeasureSpec.getSize(widthMeasureSpec) - mPaddingLeft - mPaddingRight;  if ((totalWidth > size) && (mShrinkAllColumns || mShrinkableColumns.size() > 0)) {    mutateColumnsWidth(mShrinkableColumns,mShrinkAllColumns,size,totalWidth);  } else   if ((totalWidth < size) && (mStretchAllColumns || mStretchableColumns.size() > 0)) {    mutateColumnsWidth(mStretchableColumns,mStretchAllColumns,size,totalWidth);  }}  }
class C{  public synchronized void reset(){  cancelThreads();  setState(Sensor.SensorState.NONE);}  }
class C{  public ATR(byte[] atr){  this.atr=atr.clone();  parse();}  }
class C{  protected ElemVariable createGlobalPseudoVarDecl(QName uniquePseudoVarName,StylesheetRoot stylesheetRoot,LocPathIterator lpi) throws org.w3c.dom.DOMException {  ElemVariable psuedoVar=new ElemVariable();  psuedoVar.setIsTopLevel(true);  XPath xpath=new XPath(lpi);  psuedoVar.setSelect(xpath);  psuedoVar.setName(uniquePseudoVarName);  Vector globalVars=stylesheetRoot.getVariablesAndParamsComposed();  psuedoVar.setIndex(globalVars.size());  globalVars.addElement(psuedoVar);  return psuedoVar;}  }
class C{  private void refreshImage(){  imageNode.setImage(getPixelMatrix().getImage());}  }
class C{  public boolean isShapeVisible(){  return this.shapeVisible;}  }
class C{  public void play(){  if (!mPlayer.isReleased()) {    mPlayer.play(mSoundId,DEFAULT_VOLUME);  }}  }
class C{  public void shutdown(){  for (  Entry<HttpClientType,AsyncHttpClient> entry : map.entrySet()) {    AsyncHttpClient client=entry.getValue();    if (client != null)     client.close();  }}  }
class C{  public double[] distributionForInstance(BayesNet bayesNet,Instance instance) throws Exception {  throw new Exception("Incorrect BayesNetEstimator: use subclass instead.");}  }
class C{  public void remove(){  throw new UnsupportedOperationException("Remove not supported");}  }
class C{  public void mergeTurnInfoMaps(Map<Id<Link>,List<TurnInfo>> allowedInLinkTurnInfoMap,Map<Id<Link>,List<TurnInfo>> restrictingTurnInfoMap){  for (  Map.Entry<Id<Link>,List<TurnInfo>> e : allowedInLinkTurnInfoMap.entrySet()) {    if (!restrictingTurnInfoMap.containsKey(e.getKey())) {      continue;    } else {      Id<Link> inLinkId=e.getKey();      List<TurnInfo> allowedTurnInfos=new ArrayList<TurnInfo>(e.getValue());      List<TurnInfo> restrictingTurnInfos=restrictingTurnInfoMap.get(inLinkId);      for (      TurnInfo allowedForOutlink : allowedTurnInfos) {        TurnInfo restrictionForOutlink=this.getTurnInfoForOutlinkId(restrictingTurnInfos,allowedForOutlink.getToLinkId());        if (restrictionForOutlink == null) {          allowedInLinkTurnInfoMap.get(inLinkId).remove(allowedForOutlink);        } else {          if (restrictionForOutlink.getModes() != null && allowedForOutlink.getModes() != null) {            Set<String> commonModes=this.calculateCommonModes(restrictionForOutlink,allowedForOutlink);            Set<String> allowedModes=allowedForOutlink.getModes();            for (            String mode : allowedModes) {              if (!commonModes.contains(mode)) {                allowedForOutlink.getModes().remove(mode);              }            }          }        }      }    }  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public static boolean isWhiteSpace(char ch[],int start,int length){  int end=start + length;  for (int s=start; s < end; s++) {    if (!isWhiteSpace(ch[s]))     return false;  }  return true;}  }
class C{  public boolean unmountVolume(String volumeName,boolean force){  if (log.isDebugEnabled()) {    log.debug("Unmounting volume with params[name,force]: " + volumeName + ","+ force);  }  FlexVolume vol=new FlexVolume(server.getNaServer(),volumeName);  boolean result=vol.unmountVolume(force);  return result;}  }
class C{  private void drawItem(final ISItem item){  final int size=computeSize(item);  final int centerX=computeZPosition(item);  final int centerY=getClientArea().height / 2;  if (size <= 0 || centerX < 0 || centerX > getBounds().width) {    item.resetCornerToNull();    return;  }  final int alpha=computeAlpha(item);  final Image newImage=SWTGraphicUtil.createReflectedResizedImage(item.getImage(),size,size);  cachedGC.setAlpha(alpha);  final int x=centerX - newImage.getBounds().width / 2;  final int y=centerY - newImage.getBounds().height / 2;  cachedGC.drawImage(newImage,x,y);  item.setUpperLeftCorner(x,y);  item.setLowerRightCorner(x + newImage.getBounds().width,(int)(y + newImage.getBounds().height / 1.5));  newImage.dispose();}  }
class C{  public static void save(String filename,double[] input){  AudioFormat format=new AudioFormat(SAMPLE_RATE,16,1,true,false);  byte[] data=new byte[2 * input.length];  for (int i=0; i < input.length; i++) {    int temp=(short)(input[i] * MAX_16_BIT);    data[2 * i + 0]=(byte)temp;    data[2 * i + 1]=(byte)(temp >> 8);  }  try {    ByteArrayInputStream bais=new ByteArrayInputStream(data);    AudioInputStream ais=new AudioInputStream(bais,format,input.length);    if (filename.endsWith(".wav") || filename.endsWith(".WAV")) {      AudioSystem.write(ais,AudioFileFormat.Type.WAVE,new File(filename));    } else     if (filename.endsWith(".au") || filename.endsWith(".AU")) {      AudioSystem.write(ais,AudioFileFormat.Type.AU,new File(filename));    } else {      throw new RuntimeException("File format not supported: " + filename);    }  } catch (  Exception e) {    System.out.println(e);    System.exit(1);  }}  }
class C{  public Sorting(double[] array,boolean copyArray){  if (copyArray) {    A=new double[array.length];    System.arraycopy(array,0,A,0,array.length);  } else {    A=array;  }  order=new int[A.length];  for (int i=0; i < A.length; i++) {    order[i]=i;  }  sort(A);}  }
class C{  public PatternFilenameFilter(String patternStr){  this(Pattern.compile(patternStr));}  }
class C{  public TrafficEstimate(StatsEstimate min,StatsEstimate max){  this.min=min;  this.mean=KeywordOptimizerUtil.calculateMean(min,max);  this.max=max;}  }
class C{  public void add(DirectedEdge de){  outEdges.add(de);  sorted=false;}  }
class C{  public static String join(String join,int from,int length,String... l){  if (l.length < from)   return "";  if (l.length == 1)   return l[0];  int to=Math.min(length + from,l.length - 1);  StringBuilder b=new StringBuilder();  for (int i=from; i < to; ++i) {    if (l[i].length() > 0) {      b.append(l[i]);      b.append(join);    }  }  b.append(l[to]);  return b.toString();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.189 -0500",hash_original_method="AD3650995583655A8D059B5C8CE85FAD",hash_generated_method="366CF084EB99511539C960AAB90DA5DB") public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public void addVolumesToConsistencyGroup(String cgName,List<String> virtualVolumeNames) throws VPlexApiException {  s_logger.info("Request to add volumes to a consistency group on VPlex at {}",_baseURI);  _cgMgr.addVolumesToConsistencyGroup(cgName,virtualVolumeNames);}  }
class C{  public void addFooter(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null footer!");  }  mFooters.add(view);}  }
class C{  public double incompleteGammaFunctionContinuedFractionRepr(final double a,final double x,final double accuracy,final int maxIteration){  double an, b, c, d;  double del;  double h;  final double gln=new GammaFunction().logValue(a);  b=x + 1.0 - a;  c=1.0 / Constants.QL_EPSILON;  d=1.0 / b;  h=d;  for (int i=1; i <= maxIteration; i++) {    an=-i * (i - a);    b+=2.0;    d=an * d + b;    if (Math.abs(d) < Constants.QL_EPSILON) {      d=Constants.QL_EPSILON;    }    c=b + an / c;    if (Math.abs(c) < Constants.QL_EPSILON) {      c=Constants.QL_EPSILON;    }    d=1.0 / d;    del=d * c;    h*=del;    if (Math.abs(del - 1.0) < accuracy)     return Math.exp(-x + a * Math.log(x) - gln) * h;  }  throw new ArithmeticException(ACCURACY_NOT_REACHED);}  }
class C{  protected void writeTransform(AffineTransform t) throws IOException {  pageStream.matrix(t);}  }
class C{  public void logCloseOut(long streamId,long userTime,long writeTime,long total){  addEntry(new Entry(TYPE_CLOSE_OUT,null,null,streamId,null,null,null,null,null,null,null,null,null,null,userTime,writeTime,total,null,null,null));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"QADD8");  translateAll(environment,instruction,"QADD8",instructions);}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  public T caseAnonymous_derivedAttribute_2_(Anonymous_derivedAttribute_2_ object){  return null;}  }
class C{  public void clear(){  m_TextQuery.setText("");  m_SpinnerMaxRows.setValue(new Integer(100));}  }
class C{  @Override public Response post(Entity<?> entity){  clientRequestContext.setMethod(HttpMethod.POST);  clientRequestContext.setMediaType(entity.getMediaType());  clientRequestContext.setEntity(entity.getEntity());  return sendRequest(clientRequestContext);}  }
class C{  public Tween target(float... targetValues){  if (targetValues.length > combinedAttrsLimit)   throwCombinedAttrsLimitReached();  System.arraycopy(targetValues,0,this.targetValues,0,targetValues.length);  return this;}  }
class C{  @Override public String toString(){  return "[" + this.taskType.toString() + " <"+ this.partCounter+ ">"+ "\t"+ this.byteSize+ "\t| "+ this.header.getArticleId()+ "\tR"+ this.container.size()+ "\t"+ this.header.getArticleName()+ "]";}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("LdapConnCfg[");  buffer.append("engine = ").append(m_engine);  buffer.append(", provider = ").append(m_provider);  buffer.append(", url = ").append(m_url);  buffer.append(", user = ").append(m_user);  buffer.append(", pwd = ").append(m_pwd);  buffer.append(", pool = ").append(m_pool);  buffer.append(", poolTimeOut = ").append(m_poolTO);  buffer.append("]");  return buffer.toString();}  }
class C{  public static void checkNull(Object o,Object value){  if (o != null)   error(String.valueOf(value));}  }
class C{  public void deactivate(){  this.button.setSelection(false);  SWTGraphicUtil.disableAllChildrenWidgets(this.content);}  }
class C{  public GeometryOfInterest(OMGraphic geom,MouseEvent me){  omg=geom;  button=getButton(me);  leftButton=isLeftMouseButton(me);}  }
class C{  public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augs) throws XNIException {  try {    if (fDeclHandler != null) {      fDeclHandler.internalEntityDecl(name,text.toString());    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  @Override public void addBatch() throws SQLException {  try {    debugCodeCall("addBatch");    checkClosedForWrite();    try {      ArrayList<? extends ParameterInterface> parameters=command.getParameters();      int size=parameters.size();      Value[] set=new Value[size];      for (int i=0; i < size; i++) {        ParameterInterface param=parameters.get(i);        Value value=param.getParamValue();        set[i]=value;      }      if (batchParameters == null) {        batchParameters=New.arrayList();      }      batchParameters.add(set);    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @After public void teardown() throws Exception {  if (mgr != null)   mgr.removeAndReleaseAll(true);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode15.class,args);}  }
class C{  static boolean ProcessVersion(String ver){  int vnum=VersionToNumber(ver);  if (vnum < 0) {    PcalDebug.reportError("Illegal version " + ver + " specified.");    return false;  }  if (vnum > VersionToNumber(PcalParams.version)) {    PcalDebug.reportError("Specified version " + ver + " later than current version "+ PcalParams.version);    return false;  }  inputVersionNumber=vnum;  return true;}  }
class C{  public CompiledST compile(String name,String template){  CompiledST code=compile(null,name,null,template,null);  code.hasFormalArgs=false;  return code;}  }
class C{  public static int checkArgumentPositive(final int value,final String errorMessage){  if (value <= 0) {    throw new IllegalArgumentException(errorMessage);  }  return value;}  }
class C{  public String formatLogicalUnit(String systemObjectId,String luObjectId){  InputStream responseStream=null;  String asyncTaskMessageId=null;  try {    Map<String,Object> attributeMap=new HashMap<String,Object>();    StorageArray storageArray=new StorageArray(systemObjectId);    Modify modifyOp=new Modify(HDSConstants.LU_FORMAT_TARGET,true);    LogicalUnit logicalUnit=new LogicalUnit(luObjectId,null);    attributeMap.put(HDSConstants.STORAGEARRAY,storageArray);    attributeMap.put(HDSConstants.MODIFY,modifyOp);    attributeMap.put(HDSConstants.LOGICALUNIT,logicalUnit);    String fromatVolumeInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.FORMAT_VOLUME_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);    log.info("Query to format LogicalUnit: {}",fromatVolumeInputXML);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,fromatVolumeInputXML);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      EchoCommand command=result.getBean(EchoCommand.class);      if (HDSConstants.PROCESSING_STR.equalsIgnoreCase(command.getStatus())) {        asyncTaskMessageId=command.getMessageID();      } else       if (HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {        Error error=result.getBean(Error.class);        log.error("Query to format LogicalUnit: failed status messageID: {}",command.getMessageID());        log.error("LogicalUnit formatting failed with error code: {} with message: {}",error.getCode(),error.getDescription());        throw HDSException.exceptions.notAbleToCreateVolume(error.getCode(),error.getDescription());      }    } else {      log.error("LogicalUnit format failed with invalid response code {}",response.getStatus());      throw HDSException.exceptions.invalidResponseFromHDS(String.format("LogicalUnit format failed due to invalid response %1$s from server for system %2$s",response.getStatus(),systemObjectId));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("Exception occurred while closing Formatting LogicalUnit response stream");      }    }  }  return asyncTaskMessageId;}  }
class C{  public static Date daysAfter(Date dateInst,int numDays){  if ((numDays <= 0) || (dateInst == null)) {    throw new IllegalArgumentException();  }  final Calendar cal=new GregorianCalendar();  cal.setTime(dateInst);  cal.add(Calendar.DAY_OF_YEAR,numDays);  return cal.getTime();}  }
class C{  @Override protected void relaxEdges(){  for (  E e : getGraph().getEdges()) {    Pair<V> endpoints=getGraph().getEndpoints(e);    V v1=endpoints.getFirst();    V v2=endpoints.getSecond();    Point2D p1=apply(v1);    Point2D p2=apply(v2);    double vx=p1.getX() - p2.getX();    double vy=p1.getY() - p2.getY();    double len=Math.sqrt(vx * vx + vy * vy);    int level1=minLevels.get(v1).intValue();    int level2=minLevels.get(v2).intValue();    double desiredLen=lengthFunction.apply(e);    len=(len == 0) ? .0001 : len;    double f=force_multiplier * (desiredLen - len) / len;    f=f * Math.pow(stretch / 100.0,(getGraph().degree(v1) + getGraph().degree(v2) - 2));    if (level1 != level2)     f=f / Math.pow(Math.abs(level2 - level1),1.5);    double dx=f * vx;    double dy=f * vy;    SpringVertexData v1D, v2D;    v1D=springVertexData.getUnchecked(v1);    v2D=springVertexData.getUnchecked(v2);    v1D.edgedx+=dx;    v1D.edgedy+=dy;    v2D.edgedx+=-dx;    v2D.edgedy+=-dy;  }}  }
class C{  @Override public Uri insert(Uri uri,ContentValues values){  final SQLiteDatabase db=mOpenHelper.getWritableDatabase();  Uri returnUri;switch (sUriMatcher.match(uri)) {case ACRONYMS:    long id=0;  if (id > 0)   returnUri=AcronymContract.AcronymEntry.buildAcronymUri(id); else   throw new android.database.SQLException("Failed to insert row into " + uri);break;default :throw new UnsupportedOperationException("Unknown uri: " + uri);}getContext().getContentResolver().notifyChange(uri,null);return returnUri;}  }
class C{  public void add(int x,int y,int z){  if (this.size == this.capacity)   flush();  this.xElements[this.size]=x;  this.yElements[this.size]=y;  this.zElements[this.size++]=z;}  }
class C{  public void disableWrites(final String name){  disabledShards.putIfAbsent(name,null);}  }
class C{  private FastMath(){}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_BPartner_ID"))     m_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("DateReport")) {      m_DateFrom=(Timestamp)para[i].getParameter();      m_DateTo=(Timestamp)para[i].getParameter_To();    } else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void generateReport(String dateStr) throws AdeException {  MessagesWithParseErrorStats.getParserErrorStats().writeToLog();  final String reportString=m_source + ", " + dateStr+ ", ";  for (  OverallStats overallStats : m_overallStatsForAllIntervals) {    final String trace=reportString + " " + overallStats.toString();    statsLogger.info(trace);  }}  }
class C{  public void catchUp(){  CatchUpTaskClient catchUpTask=new CatchUpTaskClient(thisPeer,null);  catchUpTask.run();}  }
class C{  @SuppressWarnings("deprecation") public Certificate(String in) throws CertificateParsingException {  try {    CertificateFactory cf=CertificateFactory.getInstance("X.509");    String[] split=in.split("--START INTERMEDIATE CERT--");    byte[] serverCertificate=Base64.decode(split[0].replaceAll(X509Constants.BEGIN_CERT,"").replaceAll(X509Constants.END_CERT,""));    X509Certificate theIntermediateCertificate;    if (split.length == 2) {      byte[] intermediateCertificate=Base64.decode(split[1].replaceAll(X509Constants.BEGIN_CERT,"").replaceAll(X509Constants.END_CERT,""));      theIntermediateCertificate=(X509Certificate)cf.generateCertificate(new ByteArrayInputStream(intermediateCertificate));    } else {      theIntermediateCertificate=null;    }    theCertificate=(X509Certificate)cf.generateCertificate(new ByteArrayInputStream(serverCertificate));    commonName=String.valueOf(PrincipalUtil.getSubjectX509Principal(theCertificate).getValues(X509Name.CN).get(0));    fingerprint=makeThumbPrint(theCertificate);    organization=String.valueOf(PrincipalUtil.getSubjectX509Principal(theCertificate).getValues(X509Name.O).get(0));    validFrom=theCertificate.getNotBefore();    validTo=theCertificate.getNotAfter();    if (trustedRootCert != null) {      HashSet<X509Certificate> chain=new HashSet<>();      try {        chain.add(trustedRootCert.theCertificate);        if (theIntermediateCertificate != null) {          chain.add(theIntermediateCertificate);        }        X509Certificate[] x509Certificates=X509CertificateChainBuilder.buildPath(theCertificate,chain);        for (        X509Certificate x509Certificate : x509Certificates) {          if (x509Certificate.equals(trustedRootCert.theCertificate)) {            Date now=new Date();            valid=(getValidFromDate().compareTo(now) <= 0) && (getValidToDate().compareTo(now) > 0);          }        }      } catch (      Exception e) {        log.error("Problem building certificate chain",e);      }    }    if (trustedRootCert != null && !overrideTrustedRootCert) {      CRL qzCrl=CRL.getInstance();      if (qzCrl.isLoaded()) {        if (qzCrl.isRevoked(getFingerprint()) || theIntermediateCertificate == null || qzCrl.isRevoked(makeThumbPrint(theIntermediateCertificate))) {          log.warn("Problem verifying certificate with CRL");          valid=false;        }      } else {        log.warn("Failed to retrieve QZ CRL, skipping CRL check");      }    }  } catch (  Exception e) {    CertificateParsingException certificateParsingException=new CertificateParsingException();    certificateParsingException.initCause(e);    throw certificateParsingException;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.841 -0500",hash_original_method="2D119148BD5E3059D34FC5038B3E143C",hash_generated_method="176F3D8C6FE354AE4D70B93F612E0F6F") protected void connect() throws IOException {  if (connection == null) {    connection=openSocketConnection();  }}  }
class C{  public void display(){  Iterator i=getKeys();  while (i.hasNext()) {    String key=(String)i.next();    Object value=get(key);    System.out.println(key + " => " + value);  }}  }
class C{  public void testMT() throws Exception {  tryMT(10000);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void parseHeaderLine(FormItemHeader headers,String header){  final int colonOffset=header.indexOf(':');  if (colonOffset == -1) {    return;  }  String headerName=header.substring(0,colonOffset).trim();  String headerValue=header.substring(header.indexOf(':') + 1).trim();  headers.addHeader(headerName,headerValue);}  }
class C{  public boolean canHandleLink(){  return app.getTopLevelWindow() instanceof Window.HasWorkArea;}  }
class C{  public void removeTableModelListener(TableModelListener l){  listenerList.remove(TableModelListener.class,l);}  }
class C{  public boolean isDownloadOverWifiOnly(){  final PrefManager wifiPrefManager=new PrefManager(context,PrefManager.Pref.WIFI);  boolean onlyWifi=wifiPrefManager.getBoolean(PrefManager.Key.DOWNLOAD_ONLY_ON_WIFI,true);  return onlyWifi;}  }
class C{  public long sigignore(){  return Long.parseLong(fields[32]);}  }
class C{  public void dispose(){  setTrain(null);  setDestination(null,null);  setLocation(null,null);  CarRoads.instance().removePropertyChangeListener(this);  CarOwners.instance().removePropertyChangeListener(this);  CarColors.instance().removePropertyChangeListener(this);  if (getIdTag() != null) {    getIdTag().removePropertyChangeListener(_tagListener);  }}  }
class C{  public static EntityIterator newEntityIterator(Cursor cursor,ContentResolver resolver){  return new EntityIteratorImpl(cursor,resolver);}  }
class C{  private void checkCircularity(State state,Obligation obligation,int basicBlockId) throws ObligationAcquiredOrReleasedInLoopException {  if (state.getPath().hasComponent(basicBlockId)) {    throw new ObligationAcquiredOrReleasedInLoopException(obligation);  }}  }
class C{  public static boolean shouldFocusNode(Context context,AccessibilityNodeInfoCompat node){  if (node == null) {    return false;  }  if (!isVisibleOrLegacy(node)) {    LogUtils.log(AccessibilityNodeInfoUtils.class,Log.VERBOSE,"Don't focus, node is not visible");    return false;  }  if (FILTER_ACCESSIBILITY_FOCUSABLE.accept(context,node)) {    if (node.getChildCount() <= 0) {      LogUtils.log(AccessibilityNodeInfoUtils.class,Log.VERBOSE,"Focus, node is focusable and has no children");      return true;    } else     if (isSpeakingNode(context,node)) {      LogUtils.log(AccessibilityNodeInfoUtils.class,Log.VERBOSE,"Focus, node is focusable and has something to speak");      return true;    } else {      LogUtils.log(AccessibilityNodeInfoUtils.class,Log.VERBOSE,"Don't focus, node is focusable but has nothing to speak");      return false;    }  }  if (!hasMatchingAncestor(context,node,FILTER_ACCESSIBILITY_FOCUSABLE) && hasText(node)) {    LogUtils.log(AccessibilityNodeInfoUtils.class,Log.VERBOSE,"Focus, node has text and no focusable ancestors");    return true;  }  LogUtils.log(AccessibilityNodeInfoUtils.class,Log.VERBOSE,"Don't focus, failed all focusability tests");  return false;}  }
class C{  public void addLanguageResources(ServletContext context){  Set<?> resourcePaths=context.getResourcePaths(TRANSLATION_PATH);  if (resourcePaths == null)   return;  for (  Object resourcePathObject : resourcePaths) {    String resourcePath=(String)resourcePathObject;    String languageKey=getLanguageKey(resourcePath);    if (languageKey == null) {      logger.warn("Invalid language file name: \"{}\"",resourcePath);      continue;    }    addLanguageResource(languageKey,new WebApplicationResource(context,"application/json",resourcePath));  }}  }
class C{  private synchronized void switchAddedToStore(IOFSwitch sw){  if (floodlightProvider.getRole() != HARole.STANDBY) {    return;  }  DatapathId dpid=sw.getId();  IOFSwitch oldSw=syncedSwitches.put(dpid,sw);  if (oldSw == null) {    addUpdateToQueue(new SwitchUpdate(dpid,SwitchUpdateType.ADDED));  } else {    sendNotificationsIfSwitchDiffers(oldSw,sw);  }}  }
class C{  public LongAdder(){}  }
class C{  public void testWildcardMaxDeterminizedStates() throws Exception {  QueryParser qp=new QueryParser(FIELD,new MockAnalyzer(random()));  qp.setMaxDeterminizedStates(10);  expectThrows(TooComplexToDeterminizeException.class,null);}  }
class C{  private static void findAllUnused(IBoard board,int terrainType,HashSet<IHex> alreadyUsed,HashSet<IHex> unUsed,IHex searchFrom,HashMap<IHex,Point> reverseHex){  IHex field;  HashSet<IHex> notYetUsed=new HashSet<IHex>();  notYetUsed.add(searchFrom);  do {    Iterator<IHex> iter=notYetUsed.iterator();    field=iter.next();    if (field == null) {      continue;    }    for (int dir=0; dir < 6; dir++) {      Point loc=reverseHex.get(field);      IHex newHex=board.getHexInDir(loc.x,loc.y,dir);      if ((newHex != null) && (!alreadyUsed.contains(newHex)) && (!notYetUsed.contains(newHex))&& (!unUsed.contains(newHex))) {        ((newHex.containsTerrain(terrainType)) ? notYetUsed : unUsed).add(newHex);      }    }    notYetUsed.remove(field);    alreadyUsed.add(field);  } while (!notYetUsed.isEmpty());}  }
class C{  public Configuration(){  this.evolutionParameters=new EvolutionParameters();  this.evolutionParameters.setGenerations(1000);  this.evolutionParameters.setPopulationSize(500);  this.initialSeed=0;  this.jobId=0;  this.jobs=4;  this.objective=new PrecisionCharmaskLengthObjective();  this.constants=Arrays.asList("\\d","\\w","\\.",":",",",";","_","=","\"","'","\\\\","/","\\?","\\!","\\}","\\{","\\(","\\)","\\[","\\]","<",">","@","#"," "," ");  this.ranges=new LinkedList<>();  this.operators=new ArrayList<>(Arrays.asList("it.units.inginf.male.tree.operator.Group","it.units.inginf.male.tree.operator.NonCapturingGroup","it.units.inginf.male.tree.operator.ListMatch","it.units.inginf.male.tree.operator.ListNotMatch","it.units.inginf.male.tree.operator.MatchOneOrMore","it.units.inginf.male.tree.operator.MatchZeroOrMore","it.units.inginf.male.tree.operator.MatchZeroOrOne","it.units.inginf.male.tree.operator.MatchMinMax"));  this.operators.addAll(Arrays.asList("it.units.inginf.male.tree.operator.PositiveLookbehind","it.units.inginf.male.tree.operator.NegativeLookbehind","it.units.inginf.male.tree.operator.PositiveLookahead","it.units.inginf.male.tree.operator.NegativeLookahead"));  this.initNodeFactory();  List<Leaf> terminalSet=this.nodeFactory.getTerminalSet();  terminalSet.add(new RegexRange("A-Z"));  terminalSet.add(new RegexRange("a-z"));  terminalSet.add(new RegexRange("A-Za-z"));  this.evaluator=new CachedTreeEvaluator();  this.evaluator.setup(Collections.EMPTY_MAP);  this.outputFolderName=".";  this.strategyParameters=new HashMap<>();  this.strategyParameters.put("runStrategy","it.units.inginf.male.strategy.impl.SeparateAndConquerStrategy");  this.strategyParameters.put("runStrategy2","it.units.inginf.male.strategy.impl.DiversityElitarismStrategy");  this.strategyParameters.put("objective2","it.units.inginf.male.objective.CharmaskMatchLengthObjective");  this.strategyParameters.put("threads","2");  this.strategy=new CombinedMultithreadStrategy();  this.terminalSetBuilderParameters=new HashMap<>();  this.terminalSetBuilderParameters.put("tokenThreashold","80.0");  this.terminalSetBuilder=new TokenizedContextTerminalSetBuilder();  this.populationBuilderParameters=new HashMap<>();  this.populationBuilderParameters.put("tokenThreashold","80.0");  this.populationBuilder=new TokenizedContextPopulationBuilder();  this.postprocessorParameters=new HashMap<>();  this.postprocessor=new BasicPostprocessor();  this.postprocessor.setup(Collections.EMPTY_MAP);  this.bestSelectorParameters=new HashMap<>();  this.bestSelector=new BasicLearningBestSelector();  this.bestSelector.setup(Collections.EMPTY_MAP);}  }
class C{  public static boolean validateLength(String value,int lengthThreshold,PROP_LENGTH lengthCriteria){  if (value == null) {    return false;  } else   if (lengthCriteria.toString().equals(PROP_LENGTH.MAX.toString())) {    if (value.length() > lengthThreshold) {      return false;    }  } else   if (lengthCriteria.toString().equals(PROP_LENGTH.MIN.toString())) {    if (value.length() < lengthThreshold) {      return false;    }  } else {    return false;  }  return true;}  }
class C{  public String noiseRateTipText(){  return "The gaussian noise rate to use.";}  }
class C{  public void testDefaults() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle").create(stream);  assertTokenStreamContents(stream,new String[]{"this","this is","is","is a","a","a test","test"});}  }
class C{  public static ObjectAnimator ofObject(Object target,String propertyName,TypeEvaluator evaluator,Object... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  private static String wordShapeChris4(String s,boolean omitIfInBoundary,Collection<String> knownLCWords){  int len=s.length();  if (len <= BOUNDARY_SIZE * 2) {    return wordShapeChris4Short(s,len,knownLCWords);  } else {    return wordShapeChris4Long(s,omitIfInBoundary,len,knownLCWords);  }}  }
class C{  IgniteKernal grid(){  if (starterThread != Thread.currentThread())   U.awaitQuiet(startLatch);  return grid;}  }
class C{  private static int[] multWithMonomial(int[] a,int k){  int d=computeDegree(a);  if (d == -1) {    return new int[1];  }  int[] result=new int[d + k + 1];  System.arraycopy(a,0,result,k,d + 1);  return result;}  }
class C{  public synchronized void unpinChildren(){  for (Iterator<Relationship> iterator=allRelationships(); iterator.hasNext(); ) {    iterator.next().getTarget().setPinned(false);  }}  }
class C{  public static String obfuscate(char[] password){  if (password == null)   return null;  byte[] bytes=toByte(password);  for (int i=0; i < bytes.length; i++) {    bytes[i]=(byte)((bytes[i] ^ key[i % key.length]) & 0x00ff);  }  String encryptedValue=xorTag + new String(SimpleBase64Encoder.encode(bytes));  return encryptedValue;}  }
class C{  public boolean contains(AnalysisSmartCacheRequest request){  return contains.contains(request.getSignature().buildCacheKey());}  }
class C{  public TextureAtlas packTexturesFromAssets(int atlasWidth,int altasHeight,int padding,boolean useCompresison,String subDir){  assetsToStreams(subDir);  return createAtlas(atlasWidth,altasHeight,padding,useCompresison);}  }
class C{  public static io.netty.handler.codec.http.HttpHeaders toNettyHttp1(HttpHeaders inputHeaders){  final io.netty.handler.codec.http.DefaultHttpHeaders outputHeaders=new io.netty.handler.codec.http.DefaultHttpHeaders();  for (  Entry<AsciiString,String> e : inputHeaders) {    final AsciiString name=e.getKey();    if (name.isEmpty() || HTTP2_TO_HTTP_HEADER_BLACKLIST.contains(name)) {      continue;    }    outputHeaders.add(name,e.getValue());  }  return outputHeaders;}  }
class C{  public int concurrencyLevel(){  return locks.length;}  }
class C{  void placeOccupant(int x,int y,Occupant o){  if (!isEmpty(x,y)) {    Occupant oldOccupant=getOccupant(x,y);    throw new IllegalArgumentException(String.format("Tried to place a %s at (%d, %d), but " + " space is already occupied by a %s.",o.name,x,y,oldOccupant));  }  occupants[y][x]=o;}  }
class C{  public void addAnnotation(Annotation annotation){  plotArea.addAnnotation(annotation);}  }
class C{  protected RrdNioBackend(String path,boolean readOnly,RrdSyncThreadPool threadPool,int syncPeriod) throws IOException {  super(path,readOnly);  try {    mapFile();  } catch (  IOException ioe) {    super.close();    throw ioe;  }catch (  RuntimeException rte) {    super.close();    throw rte;  }  try {    if (!readOnly) {      syncRunnableHandle=threadPool.scheduleWithFixedDelay(syncRunnable,syncPeriod,syncPeriod,TimeUnit.SECONDS);    }  } catch (  RuntimeException rte) {    unmapFile();    super.close();    throw rte;  }}  }
class C{  public void addRestriction(String ColumnName,String Operator,Object Code){  Restriction r=new Restriction(ColumnName,Operator,Code,null,null,true,0);  m_list.add(r);}  }
class C{  public static String encrypt(final String password,String message) throws GeneralSecurityException {  try {    final SecretKeySpec key=generateKey(password);    byte[] cipherText=encrypt(key,ivBytes,message.getBytes(CHARSET));    String encoded=Base64.encodeToString(cipherText,Base64.NO_WRAP);    return encoded;  } catch (  UnsupportedEncodingException e) {    throw new GeneralSecurityException(e);  }}  }
class C{  public static org.oscm.vo.VOPricedParameter convertToApi(org.oscm.internal.vo.VOPricedParameter oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOPricedParameter newVO=new org.oscm.vo.VOPricedParameter();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setVoParameterDef(convertToApi(oldVO.getVoParameterDef()));  newVO.setPricePerUser(oldVO.getPricePerUser());  newVO.setPricePerSubscription(oldVO.getPricePerSubscription());  newVO.setParameterKey(oldVO.getParameterKey());  newVO.setPricedOptions(convertToApiVOPricedOption(oldVO.getPricedOptions()));  newVO.setRoleSpecificUserPrices(convertToApiVOPricedRole(oldVO.getRoleSpecificUserPrices()));  newVO.setSteppedPrices(convertToApiVOSteppedPrice(oldVO.getSteppedPrices()));  return newVO;}  }
class C{  public GVTFont deriveFont(float size,AttributedCharacterIterator aci){  return null;}  }
class C{  private boolean isShowingInfo(){  if (showInfo) {    return true;  } else {    return mouseEntered;  }}  }
class C{  public static <K,V>Map<K,V> collectEntries(Iterator<?> self){  return collectEntries(self,Closure.IDENTITY);}  }
class C{  public void expandSection(String id){  SectionPart part=sectionParts.get(id);  if (part == null) {    throw new IllegalArgumentException("No section for id");  }  if (!part.getSection().isExpanded()) {    part.getSection().setExpanded(true);  }}  }
class C{  int write(DataOutputStream out,boolean writeKey) throws IOException {  int len=0;  for (  long x : idList) {    len+=writeVarLong(out,x);  }  len+=writeVarLong(out,0);  if (writeKey) {    for (int i=0; i < sortKey.length; i++) {      out.writeInt(sortKey[i]);      len+=4;    }  }  len+=writeVarLong(out,value.length);  out.write(value);  len+=value.length;  return len;}  }
class C{  public List<Strategy> findStrategies() throws PersistentModelException {  return m_strategyHome.findAll();}  }
class C{  private void sendingMessage(boolean isSending,String message){  streamActv.setEnabled(!isSending);  textView.setEnabled(!isSending);  messageEt.setEnabled(!isSending);  topicActv.setEnabled(!isSending);  sendBtn.setEnabled(!isSending);  togglePrivateStreamBtn.setEnabled(!isSending);  if (isSending) {    TextView msg=(TextView)composeStatus.findViewById(R.id.sending_message);    msg.setText(message);    composeStatus.setVisibility(View.VISIBLE);  } else   composeStatus.setVisibility(View.GONE);}  }
class C{  @Override public final int hashCode(){  int hc=this.targetHost.hashCode();  if (this.localAddress != null)   hc^=localAddress.hashCode();  if (this.proxyChain != null) {    hc^=proxyChain.length;    for (    HttpHost aProxyChain : proxyChain)     hc^=aProxyChain.hashCode();  }  if (this.secure)   hc^=0x11111111;  hc^=this.tunnelled.hashCode();  hc^=this.layered.hashCode();  return hc;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  if (instruction.getMnemonic().startsWith("UQSAX")) {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UQSAX");    translateAll(environment,instruction,"UQSAX",instructions);  } else {    TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UQSUBADDX");    translateAll(environment,instruction,"UQSUBADDX",instructions);  }}  }
class C{  @Reference(authors="Sinnott, R. W.",title="Virtues of the Haversine",booktitle="Sky and telescope, 68-2, 1984") public static double haversineFormulaDeg(double lat1,double lon1,double lat2,double lon2){  return haversineFormulaRad(MathUtil.deg2rad(lat1),MathUtil.deg2rad(lon1),MathUtil.deg2rad(lat2),MathUtil.deg2rad(lon2));}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private static PendingIntent createCallBroadcastIntent(Context context,URLSpan[] urlSpans,long eventId){  TelephonyManager tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (tm.getPhoneType() == TelephonyManager.PHONE_TYPE_NONE) {    return null;  }  for (int span_i=0; span_i < urlSpans.length; span_i++) {    URLSpan urlSpan=urlSpans[span_i];    String urlString=urlSpan.getURL();    if (urlString.startsWith(TEL_PREFIX)) {      Intent broadcastIntent=new Intent(CALL_ACTION);      broadcastIntent.setClass(context,AlertReceiver.class);      broadcastIntent.putExtra(EXTRA_EVENT_ID,eventId);      return PendingIntent.getBroadcast(context,Long.valueOf(eventId).hashCode(),broadcastIntent,PendingIntent.FLAG_CANCEL_CURRENT);    }  }  return null;}  }
class C{  public void stop(){  if (output) {    System.setOut((PrintStream)out);  } else {    System.setErr((PrintStream)out);  }}  }
class C{  @Override int calculateEndBottomBound(float yAxisDelta){  return getView().getBottom() + (int)yAxisDelta;}  }
class C{  public static void find2Methods(Class clazz,String superMethod,String thisMethod,int index,String desc,java.lang.reflect.Method[] methods){  methods[index + 1]=thisMethod == null ? null : findMethod(clazz,thisMethod,desc);  methods[index]=findSuperClassMethod(clazz,superMethod,desc);}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.FieldCamera.defaultColor",StringUtil.colorToString(defaultColor));  properties.setProperty("MapElement.FieldCamera.defaultDefinition",defaultDefinition);  properties.setProperty("MapElement.FieldCamera.defaultLabelVisible",Boolean.toString(defaultLabelVisible));  properties.setProperty("MapElement.FieldCamera.defaultFovVisible",Boolean.toString(defaultFovVisible));  properties.setProperty("MapElement.FieldCamera.defaultLineVisible",Boolean.toString(defaultLineVisible));}  }
class C{  public NativeSize(){  this(0);}  }
class C{  public static Script createOutputScript(Address to){  if (to.isP2SHAddress()) {    return new ScriptBuilder().op(OP_HASH160).data(to.getHash160()).op(OP_EQUAL).build();  } else {    return new ScriptBuilder().op(OP_DUP).op(OP_HASH160).data(to.getHash160()).op(OP_EQUALVERIFY).op(OP_CHECKSIG).build();  }}  }
class C{  public boolean isUsingWildcard(){  for (  SelectClauseElementRaw element : selectClauseElements) {    if (element instanceof SelectClauseElementWildcard) {      return true;    }  }  return false;}  }
class C{  public boolean isEmpty(){  return count() == 0;}  }
class C{  protected static void propagatePreviousGlbs(final Subtypes targetSubtypes,InferenceResult solution,final Map<AnnotatedTypeMirror,Set<AnnotationMirror>> subtypesOfTarget){  for (  final Entry<TypeVariable,Set<AnnotationMirror>> subtypeTarget : targetSubtypes.targets.entrySet()) {    final InferredValue subtargetInferredGlb=solution.get(subtypeTarget.getKey());    if (subtargetInferredGlb != null) {      final AnnotatedTypeMirror subtargetGlbType=((InferredType)subtargetInferredGlb).type;      Set<AnnotationMirror> subtargetAnnos=subtypesOfTarget.get(subtargetGlbType);      if (subtargetAnnos != null) {        subtargetAnnos.addAll(subtypeTarget.getValue());      } else {        subtypesOfTarget.put(subtargetGlbType,subtypeTarget.getValue());      }    }  }}  }
class C{  void calculateValue(float fraction){  mAnimatedValue=mKeyframeSet.getValue(fraction);}  }
class C{  public CronExpression(final String cronExpression) throws ParseException {  if (cronExpression == null) {    throw new IllegalArgumentException("cronExpression cannot be null");  }  this.cronExpression=cronExpression.toUpperCase(Locale.US);  buildExpression(this.cronExpression);}  }
class C{  protected String doIt() throws java.lang.Exception {  StringBuffer sql=null;  int no=0;  if (p_AD_Client_ID == 0)   p_AD_Client_ID=Env.getAD_Client_ID(getCtx());  String sqlCheck=" AND AD_Client_ID=" + p_AD_Client_ID;  if (p_DeleteOldImported) {    sql=new StringBuffer("DELETE " + X_I_FixedAsset.Table_Name + " WHERE I_IsImported='Y'").append(sqlCheck);    no=DB.executeUpdateEx(sql.toString(),get_TrxName());    log.fine("Delete Old Imported =" + no);  }  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " "+ "SET AD_Client_ID = COALESCE (AD_Client_ID,").append(p_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID,").append(p_AD_Org_ID).append(")," + " IsActive = COALESCE (IsActive, 'Y')," + " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET AD_Org_ID=(SELECT MAX(AD_Org_ID) FROM AD_Org org"+ " WHERE ifa.OrgValue=org.Value AND org.IsSummary='N' AND org.AD_Client_ID=ifa.AD_Client_ID) "+ "WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0) AND OrgValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Organization from Value=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Org, '"+ "WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0"+ " OR EXISTS (SELECT * FROM AD_Org oo WHERE ifa.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))"+ " AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Org=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Name Is Mandatory, '"+ "WHERE Name IS NULL AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Name=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET A_Asset_Group_ID=(SELECT MAX(A_Asset_Group_ID) FROM A_Asset_Group t"+ " WHERE ifa.A_Asset_Group_Value=t.Name AND ifa.AD_Client_ID=t.AD_Client_ID) "+ "WHERE A_Asset_Group_ID IS NULL AND A_Asset_Group_Value IS NOT NULL"+ " AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Asset Group from Value=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Asset Group Doesnt Have Asset Group Acct Record, ' "+ "WHERE A_Asset_Group_ID IS NOT NULL AND A_Asset_Group_ID>0 "+ "AND NOT EXISTS (SELECT 1 FROM A_Asset_Group_Acct aga WHERE ifa.A_Asset_Group_ID=aga.A_Asset_Group_ID) "+ "AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Asset Group=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET C_BPartnerSR_ID=(SELECT MAX(C_BPartner_ID) FROM C_BPartner t"+ " WHERE ifa.BPartner_Value=t.Value AND ifa.AD_Client_ID=t.AD_Client_ID) "+ "WHERE C_BPartnerSR_ID IS NULL AND BPartner_Value IS NOT NULL"+ " AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set BP from Value=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET C_City_ID=(SELECT MAX(C_City_ID) FROM C_City t"+ " WHERE ifa.C_City_Value=t.Name AND ifa.AD_Client_ID=t.AD_Client_ID) "+ "WHERE C_City_ID IS NULL AND C_City_Value IS NOT NULL"+ " AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set City from Value=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product t"+ " WHERE ifa.ProductValue=t.Value AND ifa.AD_Client_ID=t.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND ProductValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from Value=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Product, ' "+ "WHERE M_Product_ID IS NULL AND ProductValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Product=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Product Using Product Category Without Asset Group Defined, ' "+ "WHERE EXISTS (SELECT 1 FROM M_Product p "+ "JOIN M_Product_Category pc ON p.M_Product_Category_ID=pc.M_Product_Category_ID "+ "WHERE ifa.M_Product_ID=p.M_Product_ID "+ "AND (pc.A_Asset_Group_ID=0 OR pc.A_Asset_Group_ID IS NULL)) "+ "AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Product Category=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " ifa "+ "SET M_Locator_ID=(SELECT MAX(M_Locator_ID) FROM M_Locator t"+ " WHERE ifa.LocatorValue=t.Value AND ifa.AD_Client_ID=t.AD_Client_ID) "+ "WHERE M_Locator_ID IS NULL AND LocatorValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Locator from Value=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " "+ "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Current Period, ' "+ "WHERE a_current_period < 0 OR a_current_period > uselifemonths"+ " AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Current Period=" + no);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " "+ "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg ||'ERR=Invalid Asset Cost, ' "+ "WHERE a_asset_cost < 1 AND I_IsImported<>'Y'").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Asset Cost=" + no);  double toleranceAmt=MSysConfig.getDoubleValue("TOLERANCE_AMT",1,0,0);  sql=new StringBuffer("UPDATE " + MIFixedAsset.Table_Name + " "+ "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Accumulated Depreciation, ' "+ "WHERE ABS(((a_asset_cost / uselifemonths) * (a_current_period - 1)) - a_accumulated_depr) > "+ BigDecimal.valueOf(toleranceAmt)+ " AND I_IsImported<>'Y' AND a_current_period <> 0").append(sqlCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Accumulated Depreciation=" + no);  if (p_IsValidateOnly)   return "Data Was Validated";  int cnt_ok=0;  int cnt_err=0;  String whereClause="NVL(I_IsImported,'N')='N'" + sqlCheck;  POResultSet<X_I_FixedAsset> rs=new Query(getCtx(),X_I_FixedAsset.Table_Name,whereClause,get_TrxName()).scroll();  try {    while (rs.hasNext()) {      X_I_FixedAsset xfa=rs.next();      MIFixedAsset ifa=new MIFixedAsset(getCtx(),xfa.getI_FixedAsset_ID(),get_TrxName());      try {        MAssetAddition assetAdd=MAssetAddition.createAsset(ifa);        if (assetAdd == null) {          ifa.setI_ErrorMsg("Failed Create Assets");          cnt_err++;          assetAdd=null;          continue;        }        if (p_DateAcct != null)         assetAdd.setDateAcct(p_DateAcct);        assetAdd.saveEx();        if (!assetAdd.processIt(ifa.getDocAction())) {          ifa.setI_ErrorMsg("Failed Process Asset Addition");          cnt_err++;          assetAdd=null;          continue;        }        assetAdd.saveEx();        if (ifa.getA_Current_Period() == 0) {          MAsset asset=new MAsset(getCtx(),assetAdd.getA_Asset_ID(),get_TrxName());          asset.setUseLifeYears(0);          asset.setUseLifeMonths(0);          asset.setLifeUseUnits(0);          asset.setUseUnits(0);          asset.saveEx();        }        ifa.setI_IsImported(true);        ifa.setI_ErrorMsg(null);        ifa.setA_Asset_ID(assetAdd.getA_Asset_ID());        ifa.setProcessed(true);        ifa.saveEx();        cnt_ok++;      } catch (      Exception e) {        ifa.setI_ErrorMsg(e.getLocalizedMessage());        cnt_err++;        ifa.saveEx();      }    }  }  finally {    DB.close(rs);    rs=null;    sql=new StringBuffer("UPDATE I_FixedAsset " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(sqlCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    addLog(0,null,new BigDecimal(no),"@Errors@");    addLog(0,null,new BigDecimal(cnt_ok),"@A_Asset_ID@: @Inserted@");    addLog(0,null,new BigDecimal(cnt_err),"@A_Asset_ID@: @Failed@");  }  return "";}  }
class C{  public Method findMethod(String methodName,Class<?>[] parameters){  Method theReturn=null;  Class<?> currentClass=m_class;  while (true) {    try {      Method[] methods=currentClass.getDeclaredMethods();      for (      Method method : methods) {        int modifiers=method.getModifiers();        if (method.getName().equals(methodName) && Modifier.isPublic(modifiers)) {          if (isTargetSignature(method,parameters)) {            theReturn=method;            break;          }        }      }    } catch (    Throwable t) {      break;    }    currentClass=currentClass.getSuperclass();    if (null == currentClass) {      break;    }  }  return theReturn;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  private boolean isNullOrEmpty(String... args){  for (  String a : args) {    if (Strings.isNullOrEmpty(a))     return true;  }  return false;}  }
class C{  public boolean hasType(int type){  return types.contains(type);}  }
class C{  private void showNoWifiNotification(Context context){  if (MurmurService.CONSOLIDATE_ERRORS) {    ServiceWatchDog.getInstance().notifyHardwareStateChanged();    return;  }  if (mContext == null)   return;  SharedPreferences pref=context.getSharedPreferences(MainActivity.PREF_FILE,Context.MODE_PRIVATE);  if (!pref.getBoolean(MainActivity.IS_APP_ENABLED,true)) {    return;  }  int notificationId=R.string.notification_no_wifi_message;  Intent notificationIntent=new Intent(new Intent(Settings.ACTION_WIFI_SETTINGS));  ;  PendingIntent pendingIntent=PendingIntent.getActivity(mContext,0,notificationIntent,0);  Resources res=context.getResources();  BitmapDrawable largeIconDrawable;  if (Build.VERSION.SDK_INT >= 21) {    largeIconDrawable=(BitmapDrawable)res.getDrawable(R.mipmap.ic_launcher,null);  } else {    largeIconDrawable=(BitmapDrawable)res.getDrawable(R.mipmap.ic_launcher);  }  Bitmap largeIcon=largeIconDrawable.getBitmap();  int height=(int)res.getDimension(android.R.dimen.notification_large_icon_height);  int width=(int)res.getDimension(android.R.dimen.notification_large_icon_width);  largeIcon=Bitmap.createScaledBitmap(largeIcon,width,height,false);  Intent onIntent=new Intent();  onIntent.setAction(MurmurService.ACTION_ONWIFI);  PendingIntent pendingOnIntent=PendingIntent.getBroadcast(context,-1,onIntent,0);  Intent offIntent=new Intent();  offIntent.setAction(MurmurService.ACTION_TURNOFF);  PendingIntent pendingOffIntent=PendingIntent.getBroadcast(context,-1,offIntent,0);  NotificationManager mNotificationManager=(NotificationManager)mContext.getSystemService(Context.NOTIFICATION_SERVICE);  Notification notification=new Notification.Builder(mContext).setContentTitle(mContext.getText(R.string.notification_no_wifi_title)).setContentText(mContext.getText(R.string.notification_no_wifi_message)).setLargeIcon(largeIcon).setSmallIcon(R.mipmap.ic_error).setContentIntent(pendingIntent).addAction(R.drawable.blank_square,context.getString(R.string.error_notification_action_onwifi),pendingOnIntent).addAction(R.drawable.blank_square,context.getString(R.string.error_notification_action_off_service),pendingOffIntent).build();  mNotificationManager.notify(notificationId,notification);}  }
class C{  public X3(){  super("X3",1);}  }
class C{  public void addTriggerGroupToNeverDelete(String group){  if (group != null)   triggerGroupsToNeverDelete.add(group);}  }
class C{  public boolean isSetShortList(){  return this.shortList != null;}  }
class C{  public int[] array(int[] array){  if (array == null || array.length != count) {    array=new int[count];  }  System.arraycopy(data,0,array,0,count);  return array;}  }
class C{  @Override public void flush(){}  }
class C{  @Deprecated public <C extends Collection<T>>C addTo(C collection) throws RepositoryException {  try {    while (hasNext()) {      collection.add(next());    }    return collection;  }  finally {    close();  }}  }
class C{  public static Number parseInteger(AST reportNode,String text){  text=text.replace("_","");  char c=' ';  int length=text.length();  boolean negative=false;  if ((c=text.charAt(0)) == '-' || c == '+') {    negative=(c == '-');    text=text.substring(1,length);    length-=1;  }  int radix=10;  if (text.charAt(0) == '0' && length > 1) {    c=text.charAt(1);    if (c == 'X' || c == 'x') {      radix=16;      text=text.substring(2,length);      length-=2;    } else     if (c == 'B' || c == 'b') {      radix=2;      text=text.substring(2,length);      length-=2;    } else {      radix=8;    }  }  char type='x';  if (isNumericTypeSpecifier(text.charAt(length - 1),false)) {    type=Character.toLowerCase(text.charAt(length - 1));    text=text.substring(0,length - 1);    length-=1;  }  if (negative) {    text="-" + text;  }  BigInteger value=new BigInteger(text,radix);switch (type) {case 'i':    if (radix == 10 && reportNode != null && (value.compareTo(MAX_INTEGER) > 0 || value.compareTo(MIN_INTEGER) < 0)) {      throw new ASTRuntimeException(reportNode,"Number of value " + value + " does not fit in the range of int, but int was enforced.");    } else {      return Integer.valueOf(value.intValue());    }case 'l':  if (radix == 10 && reportNode != null && (value.compareTo(MAX_LONG) > 0 || value.compareTo(MIN_LONG) < 0)) {    throw new ASTRuntimeException(reportNode,"Number of value " + value + " does not fit in the range of long, but long was enforced.");  } else {    return new Long(value.longValue());  }case 'g':return value;default :if (value.compareTo(MAX_INTEGER) <= 0 && value.compareTo(MIN_INTEGER) >= 0) {return Integer.valueOf(value.intValue());} else if (value.compareTo(MAX_LONG) <= 0 && value.compareTo(MIN_LONG) >= 0) {return new Long(value.longValue());}return value;}}  }
class C{  public boolean isEmpty(){  return length == 0;}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);  if (fragment != null) {    findViewById(R.id.left_drawer).requestFocus();  }}  }
class C{  public JOptionPane(Object message,int messageType,int optionType,Icon icon,Object[] options,Object initialValue){  this.message=message;  this.options=options;  this.initialValue=initialValue;  this.icon=icon;  setMessageType(messageType);  setOptionType(optionType);  value=UNINITIALIZED_VALUE;  inputValue=UNINITIALIZED_VALUE;  updateUI();}  }
class C{  public PcStable(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  public SizeSequence(int numEntries){  this(numEntries,0);}  }
class C{  public java.sql.Timestamp readTimestamp() throws SQLException {  return (java.sql.Timestamp)getNextAttribute();}  }
class C{  private double parseDouble(String value,String setting){  double number;  int multiplier=getMultiplier(value);  if (multiplier > 1) {    value=value.replaceAll("[^\\d.]","");  }  try {    number=Double.parseDouble(value) * multiplier;  } catch (  NumberFormatException e) {    throw new SettingsError("Invalid numeric setting '" + value + "' for '"+ setting+ "'\n"+ e.getMessage());  }  return number;}  }
class C{  public FastBuffer<E> append(FastBuffer<E> buff){  if (buff.size == 0) {    return this;  }  for (int i=0; i < buff.currentBufferIndex; i++) {    append(buff.buffers[i]);  }  append(buff.currentBuffer,0,buff.offset);  return this;}  }
class C{  @Override public void addPropertyValueIntervals(){  SortedMap<String,NamedRangeSet> ageRangesPerVersion=new TreeMap<String,NamedRangeSet>();  for (  NamedRange interval : intervals) {    String sortableVersion=getSortableVersion(interval.name);    NamedRangeSet versionedAgeRanges=ageRangesPerVersion.get(sortableVersion);    if (null == versionedAgeRanges) {      versionedAgeRanges=new NamedRangeSet();      ageRangesPerVersion.put(sortableVersion,versionedAgeRanges);    }    versionedAgeRanges.add(new NamedRangeSet(interval));  }  String previousVersion=null;  for (  String version : ageRangesPerVersion.keySet()) {    NamedRangeSet targetRanges=ageRangesPerVersion.get(version);    if (null != previousVersion) {      targetRanges.add(ageRangesPerVersion.get(previousVersion));    }    previousVersion=version;    String age=getAge(version);    for (    NamedRange range : targetRanges.getRanges()) {      unicodeVersion.addInterval(propertyName,age,range.start,range.end);    }  }  NamedRangeSet highestVersionRanges=ageRangesPerVersion.get(ageRangesPerVersion.lastKey());  NamedRangeSet unassignedRanges=new NamedRangeSet(new NamedRange(0,unicodeVersion.maximumCodePoint));  unassignedRanges.sub(highestVersionRanges);  for (  NamedRange unassignedRange : unassignedRanges.getRanges()) {    unicodeVersion.addInterval(propertyName,defaultPropertyValue,unassignedRange.start,unassignedRange.end);  }}  }
class C{  public DoubleRange(double min,double max){  this.min=min;  this.max=max;}  }
class C{  public boolean containsConcrete(){  return method(CONCRETE) != null || setter(CONCRETE) != null || getter(CONCRETE) != null || field() != null;}  }
class C{  public boolean checkInFailed(ISchedulingRule rule){  if (checkInFailed.get() != null) {    checkInFailed.set(null);    if (!workspace.isTreeLocked())     jobManager.endRule(rule);    return true;  }  return false;}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public ResolvedFunction(final Function function){  assert function != null;  this.address=function.getAddress();  this.function=function;  this.memoryModule=null;}  }
class C{  public static boolean addAsDefinition(BytecodeInstruction d){  if (!(d.isDefinition() || d.isMethodCallOfField())) {    logger.error("expect instruction of a definition");    return false;  }  if (isKnownAsDefinition(d)) {    logger.error("each definition can be added at most once");    return false;  }  if (!d.canBeInstrumented())   return false;  boolean registeredAsDU=registerAsDefUse(d);  if (!registeredAsDU && !(d.isIINC() || d.isMethodCallOfField()))   throw new IllegalStateException("expect registering to fail only on IINCs and field method calls");  registerAsDefinition(d);  return true;}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public WritableRaster createCompatibleDestRaster(Raster src){  int ncomponents;  if (CSList != null) {    if (CSList.length != 2) {      throw new IllegalArgumentException("Destination ColorSpace is undefined");    }    ncomponents=CSList[1].getNumComponents();  } else {    int nProfiles=profileList.length;    if (nProfiles < 2) {      throw new IllegalArgumentException("Destination ColorSpace is undefined");    }    ncomponents=profileList[nProfiles - 1].getNumComponents();  }  WritableRaster dest=Raster.createInterleavedRaster(DataBuffer.TYPE_BYTE,src.getWidth(),src.getHeight(),ncomponents,new Point(src.getMinX(),src.getMinY()));  return dest;}  }
class C{  public static float intersectRayPlane(float originX,float originY,float originZ,float dirX,float dirY,float dirZ,float pointX,float pointY,float pointZ,float normalX,float normalY,float normalZ,float epsilon){  float denom=normalX * dirX + normalY * dirY + normalZ * dirZ;  if (denom < epsilon) {    float t=((pointX - originX) * normalX + (pointY - originY) * normalY + (pointZ - originZ) * normalZ) / denom;    if (t >= 0.0f)     return t;  }  return -1.0f;}  }
class C{  public static boolean enableDebug(RFunction func,Object text,Object condition,boolean once,boolean implicit){  FunctionStatementsEventListener fbr=getFunctionStatementsEventListener(func);  if (fbr == null) {    attachDebugHandler(func,text,condition,once,implicit);  } else {    fbr.enable();  }  return true;}  }
class C{  private String generateMessage(String labelid1158,Appointment ment,Long language_id,Fieldlanguagesvalues labelid1153,Fieldlanguagesvalues labelid1154,TimeZone timezone){  String message=labelid1158 + " " + ment.getAppointmentName();  if (ment.getAppointmentDescription().length() != 0) {    Fieldlanguagesvalues labelid1152=fieldmanagment.getFieldByIdAndLanguage(new Long(1152),language_id);    message+=labelid1152.getValue() + ment.getAppointmentDescription();  }  message+="<br/>" + labelid1153.getValue() + ' '+ CalendarPatterns.getDateWithTimeByMiliSecondsAndTimeZone(ment.getAppointmentStarttime(),timezone)+ "<br/>";  message+=labelid1154.getValue() + ' ' + CalendarPatterns.getDateWithTimeByMiliSecondsAndTimeZone(ment.getAppointmentEndtime(),timezone)+ "<br/>";  return message;}  }
class C{  public void publishItems(String entityID,DiscoverItems discoverItems) throws XMPPException {  publishItems(entityID,null,discoverItems);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardChartTheme)) {    return false;  }  StandardChartTheme that=(StandardChartTheme)obj;  if (!this.name.equals(that.name)) {    return false;  }  if (!this.extraLargeFont.equals(that.extraLargeFont)) {    return false;  }  if (!this.largeFont.equals(that.largeFont)) {    return false;  }  if (!this.regularFont.equals(that.regularFont)) {    return false;  }  if (!this.smallFont.equals(that.smallFont)) {    return false;  }  if (!PaintUtilities.equal(this.titlePaint,that.titlePaint)) {    return false;  }  if (!PaintUtilities.equal(this.subtitlePaint,that.subtitlePaint)) {    return false;  }  if (!PaintUtilities.equal(this.chartBackgroundPaint,that.chartBackgroundPaint)) {    return false;  }  if (!PaintUtilities.equal(this.legendBackgroundPaint,that.legendBackgroundPaint)) {    return false;  }  if (!PaintUtilities.equal(this.legendItemPaint,that.legendItemPaint)) {    return false;  }  if (!this.drawingSupplier.equals(that.drawingSupplier)) {    return false;  }  if (!PaintUtilities.equal(this.plotBackgroundPaint,that.plotBackgroundPaint)) {    return false;  }  if (!PaintUtilities.equal(this.plotOutlinePaint,that.plotOutlinePaint)) {    return false;  }  if (!this.labelLinkStyle.equals(that.labelLinkStyle)) {    return false;  }  if (!PaintUtilities.equal(this.labelLinkPaint,that.labelLinkPaint)) {    return false;  }  if (!PaintUtilities.equal(this.domainGridlinePaint,that.domainGridlinePaint)) {    return false;  }  if (!PaintUtilities.equal(this.rangeGridlinePaint,that.rangeGridlinePaint)) {    return false;  }  if (!PaintUtilities.equal(this.crosshairPaint,that.crosshairPaint)) {    return false;  }  if (!this.axisOffset.equals(that.axisOffset)) {    return false;  }  if (!PaintUtilities.equal(this.axisLabelPaint,that.axisLabelPaint)) {    return false;  }  if (!PaintUtilities.equal(this.tickLabelPaint,that.tickLabelPaint)) {    return false;  }  if (!PaintUtilities.equal(this.itemLabelPaint,that.itemLabelPaint)) {    return false;  }  if (this.shadowVisible != that.shadowVisible) {    return false;  }  if (!PaintUtilities.equal(this.shadowPaint,that.shadowPaint)) {    return false;  }  if (!this.barPainter.equals(that.barPainter)) {    return false;  }  if (!this.xyBarPainter.equals(that.xyBarPainter)) {    return false;  }  if (!PaintUtilities.equal(this.thermometerPaint,that.thermometerPaint)) {    return false;  }  if (!PaintUtilities.equal(this.wallPaint,that.wallPaint)) {    return false;  }  if (!PaintUtilities.equal(this.errorIndicatorPaint,that.errorIndicatorPaint)) {    return false;  }  if (!PaintUtilities.equal(this.gridBandPaint,that.gridBandPaint)) {    return false;  }  if (!PaintUtilities.equal(this.gridBandAlternatePaint,that.gridBandAlternatePaint)) {    return false;  }  return true;}  }
class C{  private void testJavaAlias() throws SQLException {  deleteDb("spatial");  try (Connection conn=getConnection(URL)){    Statement stat=conn.createStatement();    stat.execute("CREATE ALIAS T_GEOM_FROM_TEXT FOR \"" + TestSpatial.class.getName() + ".geomFromText\"");    stat.execute("create table test(id int primary key " + "auto_increment, the_geom geometry)");    stat.execute("insert into test(the_geom) values(" + "T_GEOM_FROM_TEXT('POLYGON ((" + "62 48, 84 48, 84 42, 56 34, 62 48))',1488))");    stat.execute("DROP ALIAS T_GEOM_FROM_TEXT");    ResultSet rs=stat.executeQuery("select the_geom from test");    assertTrue(rs.next());    assertEquals("POLYGON ((62 48, 84 48, 84 42, 56 34, 62 48))",rs.getObject(1).toString());  }   deleteDb("spatial");}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  Monitor mon=null;  if (params.isInterfaceEnabled && params.isEnabled) {    mon=MonitorFactory.start(labelerInt.getSummaryLabel(method));  }  try {    if (method.equals(EQUALS_METHOD))     return Boolean.valueOf(equals(args[0])); else     return method.invoke(monitoredObj,args);  } catch (  InvocationTargetException e) {    if (params.isEnabled) {      String sqlMessage="";      String detailStackTrace=null;      Throwable rootCause=e.getCause();      if (rootCause instanceof SQLException) {        SQLException sqlException=(SQLException)rootCause;        sqlMessage=",ErrorCode=" + sqlException.getErrorCode() + ",SQLState="+ sqlException.getSQLState();      }      trackException(rootCause,method,sqlMessage);    }    throw e.getCause();  } finally {    if (mon != null)     mon.stop();  }}  }
class C{  public static String urlEncode(String s){  return urlEncode(s,false);}  }
class C{  private static int capacityForInitSize(int size){  int result=(size >> 1) + size;  return (result & ~(MAXIMUM_CAPACITY - 1)) == 0 ? result : MAXIMUM_CAPACITY;}  }
class C{  public GetSnapshotsRequest repository(String repository){  this.repository=repository;  return this;}  }
class C{  public float readFloat(){  return readFloatArray()[0];}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.989 -0500",hash_original_method="48FE73E95EE31EEBE730A030272A67D6",hash_generated_method="5C0C602A635BB6361D07F53B8EE9AF92") public boolean enableCellBroadcastRange(int startMessageId,int endMessageId){  boolean success=false;  try {    ISms iccISms=ISms.Stub.asInterface(ServiceManager.getService("isms"));    if (iccISms != null) {      success=iccISms.enableCellBroadcastRange(startMessageId,endMessageId);    }  } catch (  RemoteException ex) {  }  return success;}  }
class C{  public PcLocalRunner(Graph graph,Parameters params){  super(graph,params);  this.sourceGraph=graph;}  }
class C{  public DefaultRequest userTimingVariableName(String value){  setString(USER_TIMING_VARIABLE_NAME,value);  return this;}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof CGPoint) {    if (this == o)     return true;    CGPoint point=(CGPoint)o;    return (x == point.x && y == point.y);  }  return false;}  }
class C{  IntBuffer usedBuffer(){  byteBuffer.position(PERFDATA_PROLOG_USED_OFFSET);  IntBuffer ib=byteBuffer.asIntBuffer();  ib.limit(1);  return ib;}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public AbUnSlideViewPager(Context context){  super(context);  this.enabled=false;}  }
class C{  public boolean isSetSwPortTuple(){  return this.swPortTuple != null;}  }
class C{  @Override public void mapOutputTransformationMetadata(OutputCollector<IntWritable,DistinctValue> out,int taskID,TfUtils agents) throws IOException {  return;}  }
class C{  public void reportPublicApi(ClassSymbol sym){}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {  if (contentHandler != null) {    contentHandler.endElement(uri,localName,qName);  }}  }
class C{  @Override void toXML(StringBuilder xml,int level){  indent(xml,level);  xml.append("<array>");  xml.append(NSObject.NEWLINE);  for (  NSObject o : set) {    o.toXML(xml,level + 1);    xml.append(NSObject.NEWLINE);  }  indent(xml,level);  xml.append("</array>");}  }
class C{  GeneralRange<T> intersect(GeneralRange<T> other){  checkNotNull(other);  checkArgument(comparator.equals(other.comparator));  boolean hasLowBound=this.hasLowerBound;  @Nullable T lowEnd=getLowerEndpoint();  BoundType lowType=getLowerBoundType();  if (!hasLowerBound()) {    hasLowBound=other.hasLowerBound;    lowEnd=other.getLowerEndpoint();    lowType=other.getLowerBoundType();  } else   if (other.hasLowerBound()) {    int cmp=comparator.compare(getLowerEndpoint(),other.getLowerEndpoint());    if (cmp < 0 || (cmp == 0 && other.getLowerBoundType() == OPEN)) {      lowEnd=other.getLowerEndpoint();      lowType=other.getLowerBoundType();    }  }  boolean hasUpBound=this.hasUpperBound;  @Nullable T upEnd=getUpperEndpoint();  BoundType upType=getUpperBoundType();  if (!hasUpperBound()) {    hasUpBound=other.hasUpperBound;    upEnd=other.getUpperEndpoint();    upType=other.getUpperBoundType();  } else   if (other.hasUpperBound()) {    int cmp=comparator.compare(getUpperEndpoint(),other.getUpperEndpoint());    if (cmp > 0 || (cmp == 0 && other.getUpperBoundType() == OPEN)) {      upEnd=other.getUpperEndpoint();      upType=other.getUpperBoundType();    }  }  if (hasLowBound && hasUpBound) {    int cmp=comparator.compare(lowEnd,upEnd);    if (cmp > 0 || (cmp == 0 && lowType == OPEN && upType == OPEN)) {      lowEnd=upEnd;      lowType=OPEN;      upType=CLOSED;    }  }  return new GeneralRange<T>(comparator,hasLowBound,lowEnd,lowType,hasUpBound,upEnd,upType);}  }
class C{  public final void waitForRepliesUninterruptibly() throws ReplyException {  waitForRepliesUninterruptibly(0);}  }
class C{  private void insertOrder(String orderId,String productId,PurchaseState state,long purchaseTime,String developerPayload){  ContentValues values=new ContentValues();  values.put(HISTORY_ORDER_ID_COL,orderId);  values.put(HISTORY_PRODUCT_ID_COL,productId);  values.put(HISTORY_STATE_COL,state.ordinal());  values.put(HISTORY_PURCHASE_TIME_COL,purchaseTime);  values.put(HISTORY_DEVELOPER_PAYLOAD_COL,developerPayload);  mDb.replace(PURCHASE_HISTORY_TABLE_NAME,null,values);}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  private Map<String,CRV> createRankingMap(final Segment segment,final ReferenceReportCache rrCache,final SolrConnector collectionConnector,ReversibleScoreMap<String> collection1hosts){  final Map<String,CRV> rankings=new ConcurrentHashMap<String,CRV>();  try {    int concurrency=Math.min(collection1hosts.size(),Runtime.getRuntime().availableProcessors());    postprocessingActivity="collecting cr for " + collection1hosts.size() + " hosts, concurrency = "+ concurrency;    ConcurrentLog.info("CollectionConfiguration",postprocessingActivity);    int countcheck=0;    for (    String host : collection1hosts.keyList(true)) {      String patchquery=CollectionSchema.host_s.getSolrFieldName() + ":" + host+ " AND "+ CollectionSchema.canonical_s.getSolrFieldName()+ AbstractSolrConnector.CATCHALL_DTERM;      long patchquerycount=collectionConnector.getCountByQuery("{!cache=false}" + patchquery);      BlockingQueue<SolrDocument> documents_with_canonical_tag=collectionConnector.concurrentDocumentsByQuery(patchquery,CollectionSchema.url_chars_i.getSolrFieldName() + " asc",0,100000000,Long.MAX_VALUE,20,1,true,CollectionSchema.id.getSolrFieldName(),CollectionSchema.sku.getSolrFieldName(),CollectionSchema.canonical_s.getSolrFieldName());      SolrDocument doc_B;      int patchquerycountcheck=0;      try {        while ((doc_B=documents_with_canonical_tag.take()) != AbstractSolrConnector.POISON_DOCUMENT) {          DigestURL doc_C_url=new DigestURL((String)doc_B.getFieldValue(CollectionSchema.canonical_s.getSolrFieldName()));          byte[] doc_B_id=ASCII.getBytes(((String)doc_B.getFieldValue(CollectionSchema.id.getSolrFieldName())));          if (segment.connectedCitation()) {            ReferenceContainer<CitationReference> doc_A_ids=segment.urlCitation().remove(doc_B_id);            if (doc_A_ids == null) {              continue;            }            Iterator<CitationReference> doc_A_ids_iterator=doc_A_ids.entries();            while (doc_A_ids_iterator.hasNext()) {              CitationReference doc_A_citation=doc_A_ids_iterator.next();              segment.urlCitation().add(doc_C_url.hash(),doc_A_citation);            }          }          patchquerycountcheck++;          if (MemoryControl.shortStatus()) {            ConcurrentLog.warn("CollectionConfiguration","terminated canonical collection during postprocessing because of short memory");            break;          }        }      } catch (      InterruptedException e) {        ConcurrentLog.logException(e);      }catch (      SpaceExceededException e) {        ConcurrentLog.logException(e);      }      if (patchquerycount != patchquerycountcheck)       ConcurrentLog.warn("CollectionConfiguration","ambiguous patchquery count for host " + host + ": expected="+ patchquerycount+ ", counted="+ patchquerycountcheck);      if (collection1hosts.get(host) <= 0)       continue;      CRHost crh=new CRHost(segment,rrCache,host,0.85d,6);      int convergence_attempts=0;      while (convergence_attempts++ < 30) {        ConcurrentLog.info("CollectionConfiguration","convergence step " + convergence_attempts + " for host "+ host+ " ...");        if (crh.convergenceStep())         break;        if (MemoryControl.shortStatus()) {          ConcurrentLog.warn("CollectionConfiguration","terminated convergenceStep during postprocessing because of short memory");          break;        }      }      ConcurrentLog.info("CollectionConfiguration","convergence for host " + host + " after "+ convergence_attempts+ " steps");      Map<String,CRV> crn=crh.normalize();      rankings.putAll(crn);      if (MemoryControl.shortStatus()) {        ConcurrentLog.warn("CollectionConfiguration","terminated crn akkumulation during postprocessing because of short memory");        break;      }      countcheck++;    }    if (collection1hosts.size() != countcheck)     ConcurrentLog.warn("CollectionConfiguration","ambiguous host count: expected=" + collection1hosts.size() + ", counted="+ countcheck);  } catch (  final IOException e2) {    ConcurrentLog.logException(e2);    collection1hosts=new ClusteredScoreMap<String>(true);  }  return rankings;}  }
class C{  @Override public boolean isDefinitelyWritable(int column) throws SQLException {  try {    debugCodeCall("isDefinitelyWritable",column);    checkColumnIndex(column);    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public KeyConcurrentHashMapPro(Map<? extends lucee.runtime.type.Collection.Key,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);  putAll(m);}  }
class C{  private void updateButton(){  if (m_ParentButton != null) {    if (m_graph.getSettings().getProximitySettings().getProximityBrowsingFrozen()) {      selectButton();    } else {      unselectButton();    }  }}  }
class C{  private static String timeToDaysMinutesSeconds(Context context,long time){  long days=time / MS_PER_DAY;  long hours=(time / MS_PER_HOUR) % 24;  long minutes=(time / MS_PER_MINUTE) % 60;  return context.getString(R.string.status_days_hours_minutes,days,hours,minutes);}  }
class C{  public static int indexOf(int[] array,int[] sub,int startIndex){  return indexOf(array,sub,startIndex,array.length);}  }
class C{  public NewAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("NewAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("NewAction.statusbar"));  putValue(NAME,res.getString("NewAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("NewAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("NewAction.image")))));}  }
class C{  public DOMSignedInfo(Element siElem,XMLCryptoContext context,Provider provider) throws MarshalException {  localSiElem=siElem;  ownerDoc=siElem.getOwnerDocument();  id=DOMUtils.getAttributeValue(siElem,"Id");  Element cmElem=DOMUtils.getFirstChildElement(siElem,"CanonicalizationMethod");  canonicalizationMethod=new DOMCanonicalizationMethod(cmElem,context,provider);  Element smElem=DOMUtils.getNextSiblingElement(cmElem,"SignatureMethod");  signatureMethod=DOMSignatureMethod.unmarshal(smElem);  boolean secVal=Utils.secureValidation(context);  String signatureMethodAlgorithm=signatureMethod.getAlgorithm();  if (secVal && ((ALGO_ID_MAC_HMAC_NOT_RECOMMENDED_MD5.equals(signatureMethodAlgorithm) || ALGO_ID_SIGNATURE_NOT_RECOMMENDED_RSA_MD5.equals(signatureMethodAlgorithm)))) {    throw new MarshalException("It is forbidden to use algorithm " + signatureMethod + " when secure validation is enabled");  }  ArrayList<Reference> refList=new ArrayList<Reference>(5);  Element refElem=DOMUtils.getNextSiblingElement(smElem,"Reference");  refList.add(new DOMReference(refElem,context,provider));  refElem=DOMUtils.getNextSiblingElement(refElem);  while (refElem != null) {    String name=refElem.getLocalName();    if (!name.equals("Reference")) {      throw new MarshalException("Invalid element name: " + name + ", expected Reference");    }    refList.add(new DOMReference(refElem,context,provider));    if (secVal && (refList.size() > MAXIMUM_REFERENCE_COUNT)) {      String error="A maxiumum of " + MAXIMUM_REFERENCE_COUNT + " "+ "references per Manifest are allowed with secure validation";      throw new MarshalException(error);    }    refElem=DOMUtils.getNextSiblingElement(refElem);  }  references=Collections.unmodifiableList(refList);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public UiBuilder<T> alignFillHorizontal(){  this.control.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,true,false,1,1));  return this;}  }
class C{  public ChebyshevI(int order,double epsilon,PassbandType type,double f1,double f2,double delta){  super(new AnalogChebyshevI(order,epsilon),type,f1,f2,delta);}  }
class C{  public IO(){  this(System.in,System.out,System.err);}  }
class C{  @Override public int hashCode(){  if (mBluetoothLEDevice == null) {    return 0;  }  return mBluetoothLEDevice.hashCode();}  }
class C{  public BulkUserImportExceptionBean(ApplicationExceptionBean sup,Reason reason){  super(sup);  setReason(reason);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public String toString(){  return "HE(" + orig.x + " "+ orig.y+ ", "+ sym.orig.x+ " "+ sym.orig.y+ ")";}  }
class C{  public static long encodePoint(final double x,final double y,final double z){  int XEncoded=encodeX(x);  int YEncoded=encodeY(y);  int ZEncoded=encodeZ(z);  return (((long)(XEncoded & 0x1FFFFF)) << 42) | (((long)(YEncoded & 0x1FFFFF)) << 21) | ((long)(ZEncoded & 0x1FFFFF));}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void updateNCharacterStream(String columnLabel,java.io.Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public long run(String[] args) throws Exception {  int depth=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  Node[] trees=genTrees(depth,ncycles);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,trees,1);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,trees,nbatches);  return System.currentTimeMillis() - start;}  }
class C{  public double dot(Vec2D otherVector){  return x() * otherVector.x() + y() * otherVector.y();}  }
class C{  public void actionPerformed(ActionEvent e){  String newText=String.valueOf(getPassword());  try {    fireVetoableChange(m_columnName,m_oldText,newText);  } catch (  PropertyVetoException pve) {  }}  }
class C{  public int nextChar() throws IOException {  if (pushedBack) {    throw new IllegalStateException("can't read char when a token has been pushed back");  }  if (peekc == NEED_CHAR) {    return read();  } else {    int ch=peekc;    peekc=NEED_CHAR;    return ch;  }}  }
class C{  public Texture(Image image){  super(image);}  }
class C{  private static void storeMethod(ProcessingEnvironment env,AnnotatedTypeFactory atypeFactory,MethodTree meth){  ExecutableElement element=TreeUtils.elementFromDeclaration(meth);  MethodSymbol sym=(MethodSymbol)element;  java.util.List<? extends AnnotationMirror> elementAnnos=element.getAnnotationMirrors();  Set<AnnotationMirror> declAnnotations=atypeFactory.getDeclAnnotations(sym);  List<Compound> tcs=List.nil();  for (  AnnotationMirror anno : declAnnotations) {    if (!AnnotationUtils.containsSame(elementAnnos,anno)) {      tcs=tcs.append(TypeAnnotationUtils.createCompoundFromAnnotationMirror(env,anno));    }  }  sym.appendAttributes(tcs);}  }
class C{  public static boolean isInstrumentationEnabled(){  return IS_ENG_BUILD;}  }
class C{  public boolean dynInit() throws Exception {  log.config("");  setTitle(Msg.getElement(Env.getCtx(),"C_Invoice_ID",false) + " .. " + Msg.translate(Env.getCtx(),"CreateFrom"));  return true;}  }
class C{  public static CCWaves action(int wav,float amp,boolean h,boolean v,ccGridSize gridSize,float d){  return new CCWaves(wav,amp,h,v,gridSize,d);}  }
class C{  public static byte[] parseBssid2bytes(String bssid){  String bssidSplits[]=bssid.split(":");  byte[] result=new byte[bssidSplits.length];  for (int i=0; i < bssidSplits.length; i++) {    result[i]=(byte)Integer.parseInt(bssidSplits[i],16);  }  return result;}  }
class C{  public CompletableFuture<Object> eval(final String script,final Bindings boundVars){  return eval(script,null,boundVars);}  }
class C{  public static long parseGeneration(String filename){  assert filename.startsWith("_");  String parts[]=stripExtension(filename).substring(1).split("_");  if (parts.length == 2 || parts.length == 4) {    return Long.parseLong(parts[1],Character.MAX_RADIX);  } else {    return 0;  }}  }
class C{  public WMFHeaderProperties(){  super();}  }
class C{  protected void sequence_ParameterizedTypeRefNominal_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  static CountingFragment newInstance(int num){  CountingFragment f=new CountingFragment();  Bundle args=new Bundle();  args.putInt("num",num);  f.setArguments(args);  return f;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int capacity=s.readInt();  float loadFactor=s.readFloat();  map=(this instanceof LinkedHashSet ? new LinkedHashMap(capacity,loadFactor) : new HashMap(capacity,loadFactor));  int size=s.readInt();  for (int i=0; i < size; i++) {    Object e=s.readObject();    map.put(e,PRESENT);  }}  }
class C{  public static String truncate(String text,int size){  if (text.length() <= size) {    return text;  }  return text.substring(0,size);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public EndpointDescription[] discoverEndpoints(String connectUrl,String discoveryEndpointUri) throws ServiceResultException {  SecureChannel channel=createSecureChannel(connectUrl,discoveryEndpointUri,SecurityMode.NONE,null);  ChannelService chan=new ChannelService(channel);  try {    GetEndpointsRequest req=new GetEndpointsRequest(null,discoveryEndpointUri,new String[0],new String[0]);    req.setRequestHeader(new RequestHeader());    req.getRequestHeader().setTimeoutHint(UnsignedInteger.valueOf(getTimeout()));    GetEndpointsResponse res=chan.GetEndpoints(req);    EndpointDescription[] result=res.getEndpoints();    return result;  }  finally {    channel.close();    channel.dispose();  }}  }
class C{  public void insertRow(int row,Vector rowData){  dataVector.insertElementAt(rowData,row);  justifyRows(row,row + 1);  fireTableRowsInserted(row,row);}  }
class C{  @Override public void addConnectionListener(SailConnectionListener listener){  getWrappedConnection().addConnectionListener(listener);}  }
class C{  private TypeVariableSignature parseTypeVariableSignature(){  assert (current() == 'T');  if (current() != 'T') {    throw error("expected a type variable usage");  }  advance();  TypeVariableSignature ts=TypeVariableSignature.make(parseIdentifier());  if (current() != ';') {    throw error("; expected in signature of type variable named" + ts.getIdentifier());  }  advance();  return ts;}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public static String byteArrayToString(byte[] bytes){  return hexBytesToString(byteArrayToHex(bytes));}  }
class C{  public boolean isIgnored(DBTransaction transaction,String character,String candidate) throws SQLException {  Map<String,Object> params=new HashMap<String,Object>();  params.put("charname",character);  params.put("candidate",candidate);  int count=transaction.querySingleCellInt("SELECT count(*) FROM buddy WHERE charname='[charname]' AND buddy='[candidate]' AND relationtype='ignore'",params);  return count > 0;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numDownslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numDownslopeNeighbours=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 < z) {              numDownslopeNeighbours++;            }          }          output.setValue(row,col,numDownslopeNeighbours);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void showActionBarIfNeeded(){  ActionBar actionBar=getActionBar();  if (actionBar != null && !actionBar.isShowing()) {    actionBar.show();  }}  }
class C{  void reportError(String msg,Element e){  messager.printMessage(Diagnostic.Kind.ERROR,msg,e);}  }
class C{  private void updateInLoadMenuItems(Menu menu,Tab tab){  if (menu == null) {    return;  }  MenuItem dest=menu.findItem(R.id.stop_reload_menu_id);  MenuItem src=((tab != null) && tab.inPageLoad()) ? menu.findItem(R.id.stop_menu_id) : menu.findItem(R.id.reload_menu_id);  if (src != null) {    dest.setIcon(src.getIcon());    dest.setTitle(src.getTitle());  }  mActivity.invalidateOptionsMenu();}  }
class C{  public UUID creatorNodeId(){  return id.globalId();}  }
class C{  @Override protected void onNewIntent(Intent intent){  super.onNewIntent(intent);  mFragments.noteStateNotSaved();}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public boolean EQ(Address addr2){  return value.EQ(addr2.value);}  }
class C{  private RdapSearchResults searchByIp(final InetAddress inetAddress,DateTime now){  return makeSearchResults(ofy().load().type(HostResource.class).filter("inetAddresses",inetAddress.getHostAddress()).filter("deletionTime",END_OF_TIME).limit(rdapResultSetMaxSize + 1).list(),now);}  }
class C{  protected void prepare(){}  }
class C{  public boolean isInvoker(){  return getAD_User_ID() == 0 && getAD_Role_ID() == 0;}  }
class C{  private String buildInsert(boolean disableReturning){  sb.setLength(0);  sb.append("insert into ");  appendTable(sb);  sb.append(" (\"");  sb.append(options.keyColumnName);  sb.append("\",\"");  if (options.doctypeColumnName != null) {    sb.append(options.doctypeColumnName);    sb.append("\",\"");  }  sb.append(options.contentColumnName);  sb.append("\"");  if (options.timestampColumnName != null) {    sb.append(",\"");    sb.append(options.timestampColumnName);    sb.append("\"");  }  if (options.creationColumnName != null) {    sb.append(",\"");    sb.append(options.creationColumnName);    sb.append("\"");  }  if ((options.versionColumnName != null) && (options.versioningMethod) != CollectionDescriptor.VERSION_NONE) {    sb.append(",\"");    sb.append(options.versionColumnName);    sb.append("\"");  }  sb.append(") values (");  if ((options.keySequenceName != null) && (!disableReturning)) {switch (options.keyDataType) {case CollectionDescriptor.INTEGER_KEY:      sb.append("\"");    sb.append(options.keySequenceName);  sb.append("\".NEXTVAL");break;case CollectionDescriptor.RAW_KEY:sb.append("hextoraw(substr(to_char(\"");sb.append(options.keySequenceName);sb.append("\".NEXTVAL,'0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'),3))");break;case CollectionDescriptor.STRING_KEY:case CollectionDescriptor.NCHAR_KEY:default :sb.append("to_char(\"");sb.append(options.keySequenceName);sb.append("\".NEXTVAL)");break;}} else if ((options.keyAssignmentMethod == CollectionDescriptor.KEY_ASSIGN_GUID) && (!disableReturning)) {switch (options.keyDataType) {case CollectionDescriptor.INTEGER_KEY:sb.append("to_number(");sb.append("rawtohex(SYS_GUID()),");sb.append("'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')");break;case CollectionDescriptor.RAW_KEY:sb.append("SYS_GUID()");break;case CollectionDescriptor.STRING_KEY:case CollectionDescriptor.NCHAR_KEY:default :sb.append("rawtohex(SYS_GUID())");break;}} else {addKey(sb);}if (options.doctypeColumnName != null) {sb.append(",?");}sb.append(",?");if (options.timestampColumnName != null) {if (disableReturning) OracleDatabaseImpl.addToTimestamp(",",sb); else sb.append(",sys_extract_utc(SYSTIMESTAMP)");}if (options.creationColumnName != null) {if (disableReturning) OracleDatabaseImpl.addToTimestamp(",",sb); else sb.append(",sys_extract_utc(SYSTIMESTAMP)");}if ((options.versionColumnName != null) && (options.versioningMethod) != CollectionDescriptor.VERSION_NONE) sb.append(",?");sb.append(")");if (insertHasReturnClause(disableReturning)) {sb.append(" returning ");int count=0;if (returnInsertedKey()) {sb.append("\"");sb.append(options.keyColumnName);sb.append("\"");count++;}if (returnInsertedTime()) {addComma(sb,count);sb.append("to_char(\"");if (options.timestampColumnName != null) sb.append(options.timestampColumnName); else sb.append(options.creationColumnName);sb.append('"');OracleDatabaseImpl.addTimestampReturningFormat(sb);count++;}if (returnInsertedVersion()) {addComma(sb,count);sb.append("\"");sb.append(options.versionColumnName);sb.append("\"");count++;}addInto(sb,count);}return (sb.toString());}  }
class C{  public void updateCompID(FIXMessage message){  FIXValue value;  value=message.findField(SenderCompID);  if (value == null)   throw new IllegalStateException("SenderCompID(49) not found");  value.setString(senderCompId);  value=message.findField(TargetCompID);  if (value == null)   throw new IllegalStateException("TargetCompID(56) not found");  value.setString(targetCompId);}  }
class C{  @Delete public String remove(String fmJson){  IFirewallService firewall=(IFirewallService)getContext().getAttributes().get(IFirewallService.class.getCanonicalName());  FirewallRule rule=jsonToFirewallRule(fmJson);  if (rule == null) {    return "{\"status\" : \"Error! Could not parse firewall rule, see log for details.\"}";  }  String status=null;  boolean exists=false;  Iterator<FirewallRule> iter=firewall.getRules().iterator();  while (iter.hasNext()) {    FirewallRule r=iter.next();    if (r.ruleid == rule.ruleid) {      exists=true;      break;    }  }  if (!exists) {    status="Error! Can't delete, a rule with this ID doesn't exist.";    log.error(status);  } else {    firewall.deleteRule(rule.ruleid);    status="Rule deleted";  }  return ("{\"status\" : \"" + status + "\"}");}  }
class C{  public void cut(){  build();  isCut=true;  for (  Task t : getTasks()) {    myAssignments.addAll(Arrays.asList(t.getAssignments()));    myTaskManager.deleteTask(t);    t.delete();  }}  }
class C{  public InputStream fetchCelerraSystemInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating celerra system query");  InputStream iStream=null;  try {    Query query=new Query();    CelerraSystemQueryParams celerraParams=new CelerraSystemQueryParams();    query.getQueryRequestChoice().add(celerraParams);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(celerraParams,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for celerra system info",jaxbException.getCause());  }  return iStream;}  }
class C{  @Override public boolean connectionAllowed(String eventName){  return eventName.equals("dataSet") || eventName.equals("trainingSet") || eventName.equals("testSet");}  }
class C{  public void testCreateJBossRemoteURLForDeploy() throws Exception {  Mock mockConfiguration=mock(RuntimeConfiguration.class);  mockConfiguration.stubs().method("getPropertyValue").with(eq("cargo.protocol")).will(returnValue("http"));  mockConfiguration.stubs().method("getPropertyValue").with(eq("cargo.hostname")).will(returnValue("remotehost"));  mockConfiguration.stubs().method("getPropertyValue").with(eq("cargo.servlet.port")).will(returnValue("8888"));  mockConfiguration.stubs().method("getPropertyValue").with(eq("cargo.remote.username")).will(returnValue("john"));  mockConfiguration.stubs().method("getPropertyValue").with(eq("cargo.remote.password")).will(returnValue("doe"));  mockConfiguration.stubs().method("getPropertyValue").with(eq("cargo.remote.timeout")).will(returnValue("120000"));  mockConfiguration.stubs().method("getPropertyValue").with(eq("cargo.jboss.remotedeploy.port")).will(returnValue("9999"));  mockConfiguration.stubs().method("getPropertyValue").with(eq("cargo.jboss.remotedeploy.hostname")).will(returnValue("localhost"));  Mock mockContainer=mock(RemoteContainer.class);  mockContainer.stubs().method("getConfiguration").will(returnValue(mockConfiguration.proxy()));  mockContainer.stubs().method("getLogger").will(returnValue(new NullLogger()));  Mock mockDeployable=mock(Deployable.class);  mockDeployable.stubs().method("getFile").will(returnValue("c:/Something With Space/dummy.war"));  String mockURL="http://localhost:9999/Something+With+Space";  Mock mockHttpFileServer=mock(ISimpleHttpFileServer.class);  mockHttpFileServer.stubs().method("setLogger");  mockHttpFileServer.stubs().method("setFile").after("setLogger");  mockHttpFileServer.stubs().method("setListeningParameters").after("setFile");  mockHttpFileServer.stubs().method("start").after("setListeningParameters");  mockHttpFileServer.stubs().method("getURL").after("start").will(returnValue(new URL(mockURL)));  mockHttpFileServer.stubs().method("getCallCount").will(returnValue(0));  mockHttpFileServer.stubs().method("getCallCount").after("start").will(returnValue(1));  mockHttpFileServer.stubs().method("stop").after("start");  Mock mockConnection=mock(HttpURLConnection.class);  String expectedURLPortion=URLEncoder.encode(mockURL,"UTF-8");  mockConnection.expects(once()).method("connect").with(stringContains(expectedURLPortion),eq("john"),eq("doe"));  mockConnection.stubs().method("setTimeout");  JBoss4xRemoteDeployer deployer=new JBoss4xRemoteDeployer((RemoteContainer)mockContainer.proxy(),(HttpURLConnection)mockConnection.proxy(),(ISimpleHttpFileServer)mockHttpFileServer.proxy());  deployer.deploy((Deployable)mockDeployable.proxy());}  }
class C{  public void powerOffCluster(boolean force){  UriBuilder builder=client.uriBuilder(CONTROL_POWER_OFF_CLUSTER_URL);  if (force) {    addQueryParam(builder,FORCE_PARAM,FORCE_VALUE);  }  client.postURI(String.class,builder.build());}  }
class C{  public static CoordinateSequence projectToXZ(CoordinateSequence seq){  return new AxisPlaneCoordinateSequence(seq,XZ_INDEX);}  }
class C{  public void updatePlayerContainers(){  int index=getSize() - 1;  if (index == -1) {    defaultEntry.setScore(0);  } else {    defaultEntry.setScore(-1);  }  ScoreModule scoreModule=Cardinal.getModule(ScoreModule.class);  if (scoreModule.hasScoring(match)) {    score.setScore(index);    index-=score.getSize();  }  if (viewer != null && viewer instanceof Team && teams.containsKey(viewer)) {    ScoreboardGroup group=teams.get(viewer);    group.setScore(index);    index-=group.getSize();  }  for (  Team team : Team.getTeams(match)) {    if (viewer != null && team.equals(viewer)) {      continue;    }    if (teams.containsKey(team)) {      ScoreboardGroup group=teams.get(team);      group.setScore(index);      index-=group.getSize();    }  }}  }
class C{  public URIReferenceException(String message){  super(message);}  }
class C{  public Matrix4f mul4x3ComponentWise(Matrix4fc other){  return mul4x3ComponentWise(other,this);}  }
class C{  public Long expectedTerms(){  return expectedTerms;}  }
class C{  private static boolean isSorted(Comparable[] a){  for (int i=1; i < a.length; i++)   if (less(a[i],a[i - 1]))   return false;  return true;}  }
class C{  @Ignore("This is performance test for manual checks only") @Test public void testSerializationPerformance() throws Exception {  serializationPerformanceRoutine(new ShoppingCartStateSerializerJacksonImpl(),10000,100,5,5);}  }
class C{  public void unlockUI(){  generateComplete();}  }
class C{  public LinearRegression(float[] x,float[] y){  if (x.length != y.length) {    throw new IllegalArgumentException("array lengths are not equal");  }  N=x.length;  double sumx=0.0, sumy=0.0, sumx2=0.0;  for (int i=0; i < N; i++)   sumx+=x[i];  for (int i=0; i < N; i++)   sumx2+=x[i] * x[i];  for (int i=0; i < N; i++)   sumy+=y[i];  double xbar=sumx / N;  double ybar=sumy / N;  double xxbar=0.0, yybar=0.0, xybar=0.0;  for (int i=0; i < N; i++) {    xxbar+=(x[i] - xbar) * (x[i] - xbar);    yybar+=(y[i] - ybar) * (y[i] - ybar);    xybar+=(x[i] - xbar) * (y[i] - ybar);  }  beta=xybar / xxbar;  alpha=ybar - beta * xbar;  double rss=0.0;  double ssr=0.0;  for (int i=0; i < N; i++) {    double fit=beta * x[i] + alpha;    rss+=(fit - y[i]) * (fit - y[i]);    ssr+=(fit - ybar) * (fit - ybar);  }  int degreesOfFreedom=N - 2;  R2=ssr / yybar;  svar=rss / degreesOfFreedom;  svar1=svar / xxbar;  svar0=svar / N + xbar * xbar * svar1;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode16.class,args);}  }
class C{  public static ExpertiseLevel find(String value){  return enums.find(value);}  }
class C{  public void rowsRemoved(TableModelEvent event){  fireTableChanged(event);}  }
class C{  @Override public boolean removeMib(SnmpMibAgent mib,String contextName,SnmpOid[] oids){  return removeMib(mib,oids);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TASK_ID:    return isSetTaskId();case TASK_NAME:  return isSetTaskName();case CLASS_NAME:return isSetClassName();case METHOD:return isSetMethod();case MODULE_CODE:return isSetModuleCode();case PRIORITY:return isSetPriority();case IS_CONCURRENT:return isSetIsConcurrent();case TASK_STATE:return isSetTaskState();case LAST_EXECUTE_TIME:return isSetLastExecuteTime();case NEXT_EXCUTE_DATE:return isSetNextExcuteDate();case OPERATOR_ID:return isSetOperatorId();case CREATE_TIME:return isSetCreateTime();default :;}throw new IllegalStateException();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.GENERATOR_MODEL__ENTRIES:    return entries != null && !entries.isEmpty();case SGenPackage.GENERATOR_MODEL__GENERATOR_ID:  return GENERATOR_ID_EDEFAULT == null ? generatorId != null : !GENERATOR_ID_EDEFAULT.equals(generatorId);}return super.eIsSet(featureID);}  }
class C{  public VOServiceReview(String title,int rating,String comment,String userId,long productKey){  this.title=title;  this.rating=rating;  this.comment=comment;  this.userId=userId;  this.productKey=productKey;}  }
class C{  public Map<String,String> systemVersion(){  HashMap<String,String> info=new HashMap<String,String>();  NaElement elem=new NaElement("system-get-version");  NaElement result=null;  try {    result=server.getNaServer().invokeElem(elem).getChildByName("version");    if (result != null) {      String name=result.getName();      info.put(name,result.getContent());    }    result=server.getNaServer().invokeElem(elem).getChildByName("is-clustered");    if (result != null) {      String name=result.getName();      info.put(name,result.getContent());    }    return info;  } catch (  Exception e) {    String msg="Failed to get array system version " + e.getMessage();    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr){  if (null == byteBufferArr || byteBufferArr.length == 0) {    return null;  }  int noOfCol=byteBufferArr.length;  short toDetermineLengthOfByteArr=2;  short offsetLen=(short)(noOfCol * 2 + toDetermineLengthOfByteArr);  int totalBytes=calculateTotalBytes(byteBufferArr) + offsetLen;  ByteBuffer buffer=ByteBuffer.allocate(totalBytes);  buffer.putShort((short)(totalBytes - toDetermineLengthOfByteArr));  buffer.putShort(offsetLen);  for (int index=0; index < byteBufferArr.length - 1; index++) {    ByteBuffer individualCol=byteBufferArr[index];    int noOfBytes=individualCol.capacity();    buffer.putShort((short)(offsetLen + noOfBytes));    offsetLen+=noOfBytes;    individualCol.rewind();  }  for (int index=0; index < byteBufferArr.length; index++) {    ByteBuffer individualCol=byteBufferArr[index];    buffer.put(individualCol.array());  }  buffer.rewind();  return buffer.array();}  }
class C{  public static float swap(float value){  int intValue=Float.floatToIntBits(value);  intValue=swap(intValue);  return Float.intBitsToFloat(intValue);}  }
class C{  public static synchronized AnnotatedSequencesReader createDefaultSequencesReaderCheckEmpty(final File dir,LongRange region) throws IOException, NoTalkbackSlimException {  final AnnotatedSequencesReader result=createDefaultSequencesReader(dir,region);  ReaderUtils.validateNotEmpty(result);  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("deprecation") public final void testGetAlgorithmPropertyLjava_lang_String_java_lang_String(){  Provider provider=new MyProvider();  Map<String,String> m=new HashMap<String,String>();  m.clear();  m.put("Alg.propName.algName","value");  provider.putAll(m);  try {    Security.addProvider(provider);    assertNotNull(Security.getAlgorithmProperty("algName","propName"));    assertNull(Security.getAlgorithmProperty("DSA",null));    assertNull(Security.getAlgorithmProperty("DSA","propName"));  }  finally {    Security.removeProvider(provider.getName());  }}  }
class C{  public void testDecodeAttributeBody() throws StunException {  char offset=Attribute.HEADER_LENGTH;  char length=(char)(msgFixture.unknownOptionalAttribute.length - offset);  optionalAttribute.decodeAttributeBody(msgFixture.unknownOptionalAttribute,offset,length);  assertTrue("OptionalAttribute did not decode properly.",Arrays.equals(expectedAttributeValue,optionalAttribute.getBody()));  assertEquals("Lenght was not properly decoded",length,optionalAttribute.getDataLength());}  }
class C{  public static DistributedLogServer runServer(Optional<String> uri,Optional<String> conf,Optional<String> streamConf,Optional<Integer> port,Optional<Integer> statsPort,Optional<Integer> shardId,Optional<Boolean> announceServerSet,Optional<Boolean> thriftmux,StatsReceiver statsReceiver,StatsProvider statsProvider) throws ConfigurationException, IllegalArgumentException, IOException {  final DistributedLogServer server=new DistributedLogServer(uri,conf,streamConf,port,statsPort,shardId,announceServerSet,thriftmux,statsReceiver,statsProvider);  server.runServer();  return server;}  }
class C{  private static void validate(VOBillingContact voBillingContact) throws ValidationException {  BLValidator.isId("id",voBillingContact.getId(),true);  BLValidator.isEmail("email",voBillingContact.getEmail(),true);  BLValidator.isName("company name",voBillingContact.getCompanyName(),true);  BLValidator.isDescription("address",voBillingContact.getAddress(),true);}  }
class C{  public int readR820TRegister(Register register,boolean controlI2C) throws UsbException {  int value=readI2CRegister(mDeviceHandle,mI2CAddress,(byte)register.getRegister(),controlI2C);  return value;}  }
class C{  public static String xmlNode(String name,String attributes,String content){  return xmlNode(name,attributes,content,true);}  }
class C{  public String type(final byte[] key){  checkIsInMulti();  client.type(key);  return client.getStatusCodeReply();}  }
class C{  @Deprecated public Set plugins(){  return loadedPlugins;}  }
class C{  private ComplianceFeature checkInstallAppPolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String appIdentifier=null;  String name=null;  try {    JSONObject appData=new JSONObject(operation.getPayLoad().toString());    if (!appData.isNull(resources.getString(R.string.app_identifier))) {      appIdentifier=appData.getString(resources.getString(R.string.app_identifier));    }    if (!appData.isNull(resources.getString(R.string.app_identifier))) {      name=appData.getString(resources.getString(R.string.intent_extra_name));    }    if (isAppInstalled(appIdentifier)) {      policy.setCompliance(true);    } else {      policy.setCompliance(false);      policy.setMessage(resources.getString(R.string.error_app_install_policy) + name);    }  } catch (  JSONException e) {    policy.setCompliance(false);    throw new AndroidAgentException("Invalid JSON format.",e);  }  return policy;}  }
class C{  public static boolean charStartsLigature(char c){  int charVal=c;  if (charVal == 0x064B || charVal == 0x064C || charVal == 0x064D || charVal == 0x064E || charVal == 0x064F || charVal == 0x0650 || charVal == 0x0651 || charVal == 0x0652 || charVal == 0x0622 || charVal == 0x0623 || charVal == 0x0625 || charVal == 0x0627) {    return true;  }  return false;}  }
class C{  public CloseHandle(Figure owner,Locator locator){  super(owner,locator);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static StringBuffer decode(StringBuffer src,boolean[] caseFlags) throws ParseException {  int srcLength=src.length();  StringBuffer result=new StringBuffer();  int n, destLength, i, bias, basicLength, j, in, oldi, w, k, digit, t, destCPCount, firstSupplementaryIndex, cpLength;  char b;  int destCapacity=MAX_CP_COUNT;  char[] dest=new char[destCapacity];  for (j=srcLength; j > 0; ) {    if (src.charAt(--j) == DELIMITER) {      break;    }  }  destLength=basicLength=destCPCount=j;  while (j > 0) {    b=src.charAt(--j);    if (!isBasic(b)) {      throw new ParseException("Illegal char found",-1);    }    if (j < destCapacity) {      dest[j]=b;      if (caseFlags != null) {        caseFlags[j]=isBasicUpperCase(b);      }    }  }  n=INITIAL_N;  i=0;  bias=INITIAL_BIAS;  firstSupplementaryIndex=1000000000;  for (in=basicLength > 0 ? basicLength + 1 : 0; in < srcLength; ) {    for (oldi=i, w=1, k=BASE; ; k+=BASE) {      if (in >= srcLength) {        throw new ParseException("Illegal char found",-1);      }      digit=basicToDigit[(byte)src.charAt(in++)];      if (digit < 0) {        throw new ParseException("Invalid char found",-1);      }      if (digit > (0x7fffffff - i) / w) {        throw new ParseException("Illegal char found",-1);      }      i+=digit * w;      t=k - bias;      if (t < TMIN) {        t=TMIN;      } else       if (k >= (bias + TMAX)) {        t=TMAX;      }      if (digit < t) {        break;      }      if (w > 0x7fffffff / (BASE - t)) {        throw new ParseException("Illegal char found",-1);      }      w*=BASE - t;    }    ++destCPCount;    bias=adaptBias(i - oldi,destCPCount,(oldi == 0));    if (i / destCPCount > (0x7fffffff - n)) {      throw new ParseException("Illegal char found",-1);    }    n+=i / destCPCount;    i%=destCPCount;    if (n > 0x10ffff || isSurrogate(n)) {      throw new ParseException("Illegal char found",-1);    }    cpLength=UTF16.getCharCount(n);    if ((destLength + cpLength) < destCapacity) {      int codeUnitIndex;      if (i <= firstSupplementaryIndex) {        codeUnitIndex=i;        if (cpLength > 1) {          firstSupplementaryIndex=codeUnitIndex;        } else {          ++firstSupplementaryIndex;        }      } else {        codeUnitIndex=firstSupplementaryIndex;        codeUnitIndex=UTF16.moveCodePointOffset(dest,0,destLength,codeUnitIndex,i - codeUnitIndex);      }      if (codeUnitIndex < destLength) {        System.arraycopy(dest,codeUnitIndex,dest,codeUnitIndex + cpLength,(destLength - codeUnitIndex));        if (caseFlags != null) {          System.arraycopy(caseFlags,codeUnitIndex,caseFlags,codeUnitIndex + cpLength,destLength - codeUnitIndex);        }      }      if (cpLength == 1) {        dest[codeUnitIndex]=(char)n;      } else {        dest[codeUnitIndex]=UTF16.getLeadSurrogate(n);        dest[codeUnitIndex + 1]=UTF16.getTrailSurrogate(n);      }      if (caseFlags != null) {        caseFlags[codeUnitIndex]=isBasicUpperCase(src.charAt(in - 1));        if (cpLength == 2) {          caseFlags[codeUnitIndex + 1]=false;        }      }    }    destLength+=cpLength;    ++i;  }  result.append(dest,0,destLength);  return result;}  }
class C{  private int[] toIntArray(){  int length=encoding.length;  int[] result=new int[20];  int which=0;  int fromPos=0;  for (int i=0; i < length; i++) {    if ((encoding[i] & 0x80) == 0) {      if (i - fromPos + 1 > 4) {        BigInteger big=new BigInteger(pack(encoding,fromPos,i - fromPos + 1,7,8));        if (fromPos == 0) {          result[which++]=2;          BigInteger second=big.subtract(BigInteger.valueOf(80));          if (second.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) == 1) {            return null;          } else {            result[which++]=second.intValue();          }        } else {          if (big.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) == 1) {            return null;          } else {            result[which++]=big.intValue();          }        }      } else {        int retval=0;        for (int j=fromPos; j <= i; j++) {          retval<<=7;          byte tmp=encoding[j];          retval|=(tmp & 0x07f);        }        if (fromPos == 0) {          if (retval < 80) {            result[which++]=retval / 40;            result[which++]=retval % 40;          } else {            result[which++]=2;            result[which++]=retval - 80;          }        } else {          result[which++]=retval;        }      }      fromPos=i + 1;    }    if (which >= result.length) {      result=Arrays.copyOf(result,which + 10);    }  }  return Arrays.copyOf(result,which);}  }
class C{  public boolean isExternalZoomEnabled(){  return mExternalZoomEnabled;}  }
class C{  public Rational(long nominator,long denominator){  mNumerator=nominator;  mDenominator=denominator;}  }
class C{  private static void scale(Mat img,Size approxSize,boolean maximize,boolean integerScale){  double scale=makeScale(img,approxSize,maximize,integerScale);  scale(img,scale);}  }
class C{  public static InstanceOfExpression instanceOf(String propertyName,String typeName,String... typeNames){  return new InstanceOfExpression(getPropExpr(propertyName),typeName,typeNames);}  }
class C{  public List query(Envelope searchEnv){  ArrayListVisitor visitor=new ArrayListVisitor();  query(searchEnv,visitor);  return visitor.getItems();}  }
class C{  public static InExpression notIn(Expression value,Expression... set){  return new InExpression(value,true,(Object)set);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof StringVal) {    StringVal stringval=(StringVal)o;    if (stringval.str.equalsIgnoreCase(str)) {      return true;    }  }  return false;}  }
class C{  public Set<String> databaseNames(){  return ddlRecordsByDbName.keySet();}  }
class C{  public MovePath addStep(final MoveStepType type){  return addStep(new MoveStep(this,type));}  }
class C{  public long length(){  return length;}  }
class C{  public void testZeroZero(){  byte aBytes[]={0};  byte bBytes[]={0};  int aSign=0;  int bSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public Label mark(){  Label label=new Label();  mv.visitLabel(label);  return label;}  }
class C{  @UiHandler("cancelButton") public void handleCancelClick(final ClickEvent event){  this.actionDelegate.cancelled();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.107 -0500",hash_original_method="B53822BFF4A674DE454739734B590814",hash_generated_method="EC617CC556BE1483D43B093E2F5B0359") boolean authCredentialsInvalid(){  return (mAuthFailed && !(mAuthHeader.isDigest() && mAuthHeader.getStale()));}  }
class C{  private static Rop throwBadTypes(TypeList types){  throw new IllegalArgumentException("bad types: " + types);}  }
class C{  public String canopyT1TipText(){  return "The T1 distance to use when using canopy clustering. Values < 0 are taken as a positive " + "multiplier for the T2 distance";}  }
class C{  private void addWrapperClassToWrapperClassesList(ClassLoader cl,String pkg,File f) throws Exception {  String name=f.getName();  if (!name.endsWith(".class")) {    return;  }  String className=pkg + name.substring(0,name.length() - 6);  Class<?> c=cl.loadClass(className);  Class<?> wrappedClass=c.getSuperclass();  if (wrappedClass != null) {    if (FacesWrapper.class.isAssignableFrom(wrappedClass) || wrappedClass == Object.class) {      return;    }  }  if (FacesWrapper.class.isAssignableFrom(c)) {    wrapperClasses.add(c);  } else   if (c != FacesWrapper.class && c.getName().endsWith("Wrapper")) {    noWrapperClasses.add(c);  }}  }
class C{  public int size(){  return size;}  }
class C{  public static void fail(int errorCode,String[] parameters){  throw new RuntimeException(MP.getMessage(errorCode,parameters));}  }
class C{  public void clear(){  if (data != null) {    for (int i=0; i < (length * 5); i++)     data[i]=null;  }  length=0;}  }
class C{  Class<?> findBoundCallerClass(MemberName m) throws IllegalAccessException {  Class<?> callerClass=null;  if (MethodHandleNatives.isCallerSensitive(m)) {    if (hasPrivateAccess()) {      callerClass=lookupClass;    } else {      throw new IllegalAccessException("Attempt to lookup caller-sensitive method using restricted lookup object");    }  }  return callerClass;}  }
class C{  public void calculateDimensions(Paint labelpaint,ViewPortHandler viewPortHandler){  if (mPosition == LegendPosition.RIGHT_OF_CHART || mPosition == LegendPosition.RIGHT_OF_CHART_CENTER || mPosition == LegendPosition.LEFT_OF_CHART || mPosition == LegendPosition.LEFT_OF_CHART_CENTER || mPosition == LegendPosition.PIECHART_CENTER) {    mNeededWidth=getMaximumEntryWidth(labelpaint);    mNeededHeight=getFullHeight(labelpaint);    mTextWidthMax=mNeededWidth;    mTextHeightMax=getMaximumEntryHeight(labelpaint);  } else   if (mPosition == LegendPosition.BELOW_CHART_LEFT || mPosition == LegendPosition.BELOW_CHART_RIGHT || mPosition == LegendPosition.BELOW_CHART_CENTER || mPosition == LegendPosition.ABOVE_CHART_LEFT || mPosition == LegendPosition.ABOVE_CHART_RIGHT || mPosition == LegendPosition.ABOVE_CHART_CENTER) {    int labelCount=mLabels.length;    float labelLineHeight=Utils.getLineHeight(labelpaint);    float labelLineSpacing=Utils.getLineSpacing(labelpaint) + mYEntrySpace;    float contentWidth=viewPortHandler.contentWidth();    ArrayList<FSize> calculatedLabelSizes=new ArrayList<FSize>(labelCount);    ArrayList<Boolean> calculatedLabelBreakPoints=new ArrayList<Boolean>(labelCount);    ArrayList<FSize> calculatedLineSizes=new ArrayList<FSize>();    float maxLineWidth=0.f;    float currentLineWidth=0.f;    float requiredWidth=0.f;    int stackedStartIndex=-1;    for (int i=0; i < labelCount; i++) {      boolean drawingForm=mColors[i] != ColorTemplate.COLOR_SKIP;      calculatedLabelBreakPoints.add(false);      if (stackedStartIndex == -1) {        requiredWidth=0.f;      } else {        requiredWidth+=mStackSpace;      }      if (mLabels[i] != null) {        calculatedLabelSizes.add(Utils.calcTextSize(labelpaint,mLabels[i]));        requiredWidth+=drawingForm ? mFormToTextSpace + mFormSize : 0.f;        requiredWidth+=calculatedLabelSizes.get(i).width;      } else {        calculatedLabelSizes.add(new FSize(0.f,0.f));        requiredWidth+=drawingForm ? mFormSize : 0.f;        if (stackedStartIndex == -1) {          stackedStartIndex=i;        }      }      if (mLabels[i] != null || i == labelCount - 1) {        float requiredSpacing=currentLineWidth == 0.f ? 0.f : mXEntrySpace;        if (!mWordWrapEnabled || currentLineWidth == 0.f || (contentWidth - currentLineWidth >= requiredSpacing + requiredWidth)) {          currentLineWidth+=requiredSpacing + requiredWidth;        } else {          calculatedLineSizes.add(new FSize(currentLineWidth,labelLineHeight));          maxLineWidth=Math.max(maxLineWidth,currentLineWidth);          calculatedLabelBreakPoints.set(stackedStartIndex > -1 ? stackedStartIndex : i,true);          currentLineWidth=requiredWidth;        }        if (i == labelCount - 1) {          calculatedLineSizes.add(new FSize(currentLineWidth,labelLineHeight));          maxLineWidth=Math.max(maxLineWidth,currentLineWidth);        }      }      stackedStartIndex=mLabels[i] != null ? -1 : stackedStartIndex;    }    mCalculatedLabelSizes=calculatedLabelSizes.toArray(new FSize[calculatedLabelSizes.size()]);    mCalculatedLabelBreakPoints=calculatedLabelBreakPoints.toArray(new Boolean[calculatedLabelBreakPoints.size()]);    mCalculatedLineSizes=calculatedLineSizes.toArray(new FSize[calculatedLineSizes.size()]);    mTextWidthMax=getMaximumEntryWidth(labelpaint);    mTextHeightMax=getMaximumEntryHeight(labelpaint);    mNeededWidth=maxLineWidth;    mNeededHeight=labelLineHeight * (float)(mCalculatedLineSizes.length) + labelLineSpacing * (float)(mCalculatedLineSizes.length == 0 ? 0 : (mCalculatedLineSizes.length - 1));  } else {    mNeededWidth=getFullWidth(labelpaint);    mNeededHeight=getMaximumEntryHeight(labelpaint);    mTextWidthMax=getMaximumEntryWidth(labelpaint);    mTextHeightMax=mNeededHeight;  }}  }
class C{  public void remove(final File file){  if (m_files.remove(file)) {    fireIntervalRemoved(file,0,m_files.size());  }}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int[] columnIndexes) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("prepareStatement(" + quote(sql) + ", "+ quoteIntArray(columnIndexes)+ ");");    }    return prepareStatement(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void possiblyDisposeOfTipWindow(){  if (tipWindow != null) {    tipWindow.dispose();    tipWindow=null;    textAreaListener.uninstall();    tipVisibleBounds.setBounds(-1,-1,0,0);    lastText=null;    textArea.requestFocus();  }}  }
class C{  @Override public boolean isReady(){  try {    for (    XenonServiceGroup xenonServiceGroup : xenonServiceGroups) {      if (xenonServiceGroup.isReady() == false) {        return false;      }    }    return ServiceHostUtils.areServicesReady(this,FACTORY_SERVICE_FIELD_NAME_SELF_LINK,getFactoryServices());  } catch (  Throwable t) {    logger.debug("IsReady failed: {}",t);    return false;  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case B:    return isSetB();case S:  return isSetS();}throw new IllegalStateException();}  }
class C{  public EditorContainer(){  setLayout(null);}  }
class C{  public void putStatic(final Type owner,final String name,final Type type){  fieldInsn(Opcodes.PUTSTATIC,owner,name,type);}  }
class C{  public static void checkNeedForArgumentCast(BlockScope scope,int operator,int operatorSignature,Expression expression,int expressionTypeId){  if (scope.compilerOptions().getSeverity(CompilerOptions.UnnecessaryTypeCheck) == ProblemSeverities.Ignore) {    return;  }  if ((expression.bits & ASTNode.UnnecessaryCast) == 0 && expression.resolvedType.isBaseType()) {    return;  } else {    TypeBinding alternateLeftType=((CastExpression)expression).expression.resolvedType;    if (alternateLeftType == null) {      return;    }    if (alternateLeftType.id == expressionTypeId) {      scope.problemReporter().unnecessaryCast((CastExpression)expression);      return;    }  }}  }
class C{  public ComputeTaskTimeoutCheckedException(String msg){  super(msg);}  }
class C{  protected void fireRemoveUpdate(DocumentEvent evt){  if (tokenMarker != null) {    DocumentEvent.ElementChange ch=evt.getChange(getDefaultRootElement());    if (ch != null) {      tokenMarker.deleteLines(ch.getIndex() + 1,ch.getChildrenRemoved().length - ch.getChildrenAdded().length);    }  }  super.fireRemoveUpdate(evt);}  }
class C{  public static ArrayList<String> toList(String[] array){  if (array == null) {    return new ArrayList<String>(0);  }  ArrayList<String> list=new ArrayList<String>(array.length);  for (  String s : array) {    list.add(s);  }  return list;}  }
class C{  public static <T>ArrayList<T> jsonToArrayList(String json){  Gson gson=new Gson();  return gson.fromJson(json,new TypeToken<ArrayList<T>>(){  }.getType());}  }
class C{  public static boolean isTrue(boolean expression){  return isTrue(expression,"");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (curNumberOfParameters == 2) {    int masky=getMediaMask(stack);    return Wizard.getInstance().searchByText(getString(stack),masky);  } else   return Wizard.getInstance().searchByText(getString(stack),DBObject.MEDIA_MASK_ALL);}  }
class C{  public MPaymentAllocate(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:15.309 -0500",hash_original_method="15D22B562F85AEAC3F4AC4996FFD23A3",hash_generated_method="690339A57E7981A56E8267DFE7AE9E32") private void signalNotEmpty(){}  }
class C{  public static final Criterion headerDateAfter(String headerName,Date date,DateResolution res){  return new HeaderCriterion(headerName,new DateOperator(DateComparator.AFTER,date,res));}  }
class C{  public SerializedClassifierTest(String name){  super(name);}  }
class C{  public MemoryDownloadTask(URI uri){  super(uri);}  }
class C{  private List buildFileList(){  List fileList=null;  try {    File list[]=directory.listFiles(HTML_FILE_FILTER);    fileList=Arrays.asList(list);  } catch (  Exception ex) {    ex.printStackTrace();  }  return fileList;}  }
class C{  public Object clone(){  SipUri retval=(SipUri)super.clone();  if (this.authority != null)   retval.authority=(Authority)this.authority.clone();  if (this.uriParms != null)   retval.uriParms=(NameValueList)this.uriParms.clone();  if (this.qheaders != null)   retval.qheaders=(NameValueList)this.qheaders.clone();  if (this.telephoneSubscriber != null)   retval.telephoneSubscriber=(TelephoneNumber)this.telephoneSubscriber.clone();  return retval;}  }
class C{  public static void main(String[] args) throws Exception {  String parsePluginFile=null;  String usage="ParsePluginsReader [--file <parse plugin file location>]";  if ((args.length != 0 && args.length != 2) || (args.length == 2 && !"--file".equals(args[0]))) {    System.err.println(usage);    System.exit(1);  }  for (int i=0; i < args.length; i++) {    if (args[i].equals("--file")) {      parsePluginFile=args[++i];    }  }  ParsePluginsReader reader=new ParsePluginsReader();  if (parsePluginFile != null) {    reader.setFParsePluginsFile(parsePluginFile);  }  ParsePluginList prefs=reader.parse(NutchConfiguration.create());  for (  String mimeType : prefs.getSupportedMimeTypes()) {    System.out.println("MIMETYPE: " + mimeType);    List<String> plugList=prefs.getPluginList(mimeType);    System.out.println("EXTENSION IDs:");    for (    String j : plugList) {      System.out.println(j);    }  }}  }
class C{  public void testSetScaleLess(){  String a="2.345726458768760000E+10";  int newScale=5;  BigDecimal aNumber=new BigDecimal(a);  BigDecimal bNumber=aNumber.setScale(newScale);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertEquals("incorrect value",0,bNumber.compareTo(aNumber));}  }
class C{  public static void decode(InputStream in,PrintStream out){  Reader reader;  StringBuffer buffer;  int character;  String string;  boolean newlines;  try {    try {      reader=new BufferedReader(new InputStreamReader(in,"ISO-8859-1"));    } catch (    UnsupportedEncodingException use) {      reader=new BufferedReader(new InputStreamReader(in));    }    buffer=new StringBuffer(1024);    newlines=false;    if (DECODE_LINE_BY_LINE)     while (-1 != (character=reader.read())) {      if (('\r' == character) || ('\n' == character)) {        if (!newlines) {          string=decode(buffer.toString());          out.print(string);          buffer.setLength(0);          newlines=true;        }        buffer.append((char)character);      } else {        if (newlines) {          out.print(buffer.toString());          buffer.setLength(0);          newlines=false;        }        buffer.append((char)character);      }    } else     while (-1 != (character=reader.read()))     buffer.append((char)character);    if (0 != buffer.length()) {      if (newlines)       out.print(buffer.toString()); else {        string=decode(buffer.toString());        out.print(string);      }    }  } catch (  IOException ioe) {    out.println();    out.println(ioe.getMessage());  } finally {    out.flush();  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.PROJECT_DEPENDENCY;}  }
class C{  public boolean isSetClusterJoinResponse(){  return this.clusterJoinResponse != null;}  }
class C{  public CountStarProjectionExpression(){}  }
class C{  private void parse(){  try {    FileInputStream xmlStream=new FileInputStream(requestFile);    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    factory.setIgnoringComments(true);    DocumentBuilder builder=factory.newDocumentBuilder();    doc=builder.parse(xmlStream);    xmlStream.close();    rootElement=doc.getDocumentElement();    NodeList nodes=rootElement.getElementsByTagName("nonvalidated-requests");    nonValidatedRequestsElement=(Element)nodes.item(0);    nodes=rootElement.getElementsByTagName("validated-requests");    validatedRequestsElement=(Element)nodes.item(0);  } catch (  javax.xml.parsers.ParserConfigurationException e) {    e.printStackTrace();  }catch (  org.xml.sax.SAXException e) {    e.printStackTrace();  }catch (  Exception e) {    System.out.println("File error!");    e.printStackTrace();  }}  }
class C{  private StringBuilder typeAncestors(String type,ClassReader info) throws IOException {  StringBuilder b=new StringBuilder();  while (!"java/lang/Object".equals(type)) {    b.append(';').append(type);    type=info.getSuperName();    info=typeInfo(type);  }  return b;}  }
class C{  public void prependMessage(String message){  if (iMessage == null) {    iMessage=message;  } else   if (message != null) {    iMessage=message + ": " + iMessage;  }}  }
class C{  public static void appendStyleBackgroundColor(HtmlBasedComponent component,Color color){  String colorString=createHexColorString(color);  String colorStyleString=STYLE_BACKGROUND_COLOR + colorString;  appendStyle(component,colorStyleString);  return;}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  return getList(baseUrl);}  }
class C{  public ConcurrentModificationException(String message){  super(message);}  }
class C{  public void startFixedDownload(final String hostname,final int port,final String uri,final int maxDuration,final int reportInterval){  initReportTask(reportInterval,true);  mTask.setReportInterval(true);  startFixedDownload(hostname,port,uri,maxDuration);}  }
class C{  public HomogenousSubstitutionModelDelegate(Tree tree,BranchModel branchModel,int partitionNumber){  assert (branchModel.getSubstitutionModels().size() == 1) : "this delegate should only be used with simple branch models";  this.substitutionModel=branchModel.getRootSubstitutionModel();  nodeCount=tree.getNodeCount();  eigenBufferHelper=new BufferIndexHelper(eigenCount,0,partitionNumber);  matrixBufferHelper=new BufferIndexHelper(nodeCount,0,partitionNumber);}  }
class C{  private void changeFontSizes(){  if (!varFontSize) {    return;  }  double fieldWidth=text.getSize().width;  int stringWidth=text.getFontMetrics(text.getFont()).stringWidth(LONGEST_STRING) + 8;  int fontSize=text.getFont().getSize();  if (stringWidth > fieldWidth) {    while ((stringWidth > fieldWidth) && (fontSize > 12)) {      fontSize-=2;      Font f=new Font("",Font.PLAIN,fontSize);      text.setFont(f);      stringWidth=text.getFontMetrics(text.getFont()).stringWidth(LONGEST_STRING) + 8;    }  } else {    while ((fieldWidth - stringWidth > 10) && (fontSize < 48)) {      fontSize+=2;      Font f=new Font("",Font.PLAIN,fontSize);      text.setFont(f);      stringWidth=text.getFontMetrics(text.getFont()).stringWidth(LONGEST_STRING) + 8;    }  }}  }
class C{  public void windowClosed(WindowEvent e){  m_listener.windowStateChanged(e);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case OrientedPackage.PORT__ID:    setId((String)newValue);  return;case OrientedPackage.PORT__TYPE:setType((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public final Angle subtract(Angle angle){  if (angle == null) {    throw new IllegalArgumentException("Angle Is Null");  }  return Angle.fromDegrees(this.degrees - angle.degrees);}  }
class C{  public long centeredNormSq(int q){  int N=coeffs.length;  IntegerPolynomial p=(IntegerPolynomial)clone();  p.shiftGap(q);  long sum=0;  long sqSum=0;  for (int i=0; i != p.coeffs.length; i++) {    int c=p.coeffs[i];    sum+=c;    sqSum+=c * c;  }  long centeredNormSq=sqSum - sum * sum / N;  return centeredNormSq;}  }
class C{  private boolean isDud(boolean inFire){switch (getType()) {case BOMB_WATER:    return inFire || (ticksExisted > 8 && worldObj.provider.dimensionId == -1);default :  return (worldObj.getBlock((int)posX,(int)posY,(int)posZ).getMaterial() == Material.water);}}  }
class C{  public CodedException(String faultCode,String format,Object... args){  this(faultCode,String.format(format,args));  setArguments(args);}  }
class C{  public DomainModelRuntimeException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void resetBall(){  mBall.setDirection(-0.3f,-1.0f);  mBall.setSpeed(mBallInitialSpeed);  mBall.setPosition(ARENA_WIDTH / 2.0f + 45,ARENA_HEIGHT * BRICK_BOTTOM_PERC - 100);}  }
class C{  private static byte unescape(String s,int i){  return (byte)Integer.parseInt(s.substring(i + 1,i + 3),16);}  }
class C{  public void testNegateMathContextNegative(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=49;  int precision=46;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String c="9294878209448847823.121247898748298842980877982";  int cScale=27;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal res=aNumber.negate(mc);  assertEquals("incorrect value",c,res.toString());  assertEquals("incorrect scale",cScale,res.scale());}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  public float nextFloat(boolean includeZero,boolean includeOne){  float d=0.0f;  do {    d=nextFloat();    if (includeOne && nextBoolean())     d+=1.0f;  } while ((d > 1.0f) || (!includeZero && d == 0.0f));  return d;}  }
class C{  public static boolean canRemoveParentheses(Expression expression,ASTNode parent,StructuralPropertyDescriptor locationInParent){  if (!(expression instanceof ParenthesizedExpression)) {    return false;  }  return !needsParentheses(getExpression((ParenthesizedExpression)expression),parent,locationInParent);}  }
class C{  public void moveTo(float x,float y){  if (typeSize > 0 && types[typeSize - 1] == PathIterator.SEG_MOVETO) {    points[pointSize - 2]=x;    points[pointSize - 1]=y;  } else {    checkBuf(2,false);    types[typeSize++]=PathIterator.SEG_MOVETO;    points[pointSize++]=x;    points[pointSize++]=y;  }  dirty=true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public BubbleChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer){  super(dataset,renderer);}  }
class C{  public boolean isModel(String name){  return models.containsKey(name);}  }
class C{  public void test_ticket_1202f() throws Exception {  new TestHelper("ticket-1202-group03-modified3","ticket-1202-group03-modified3.rq","ticket-1202-group03-modified3.ttl","ticket-1202-group03-modified3.srx").runTest();}  }
class C{  public StateSet complement(StateSet set){  if (set == null)   return null;  StateSet result=new StateSet();  result.bits=new long[set.bits.length];  int i;  int m=Math.min(bits.length,set.bits.length);  for (i=0; i < m; i++) {    result.bits[i]=~bits[i] & set.bits[i];  }  if (bits.length < set.bits.length)   System.arraycopy(set.bits,m,result.bits,m,result.bits.length - m);  if (DEBUG)   Out.dump("Complement of " + this + Out.NL+ "and "+ set+ Out.NL+ " is :"+ result);  return result;}  }
class C{  public void addListener(final LoginListener listener){  listeners.add(listener);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=scanManager.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  private void updateUpdaterComboBox(){}  }
class C{  @Override public void executeWithGraph(){  try {    doExecute();  } catch (  CommandException e) {    getLog().error("Error while loading reference properties",e);    throw new RuntimeCommandException(e);  }}  }
class C{  protected Object evaluateLeftLessRight(StructuredContent element,String lvalue,String rvalue){  return null;}  }
class C{  public void evictParticipant(String participantId) throws RoomException {  UserParticipant participant=internalManager.getParticipantInfo(participantId);  Set<UserParticipant> remainingParticipants=internalManager.leaveRoom(participantId);  notificationRoomHandler.onParticipantLeft(participant.getUserName(),remainingParticipants);  notificationRoomHandler.onParticipantEvicted(participant);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public SQLTransientException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  public Builder page(WelcomePage page){  page.setIndex(pages.size());  if (!page.backgroundIsSet()) {    page.background(defaultBackgroundColor);  }  pages.add(page);  return this;}  }
class C{  public static synchronized GUIMediator instance(){  if (_instance == null)   _instance=new GUIMediator();  return _instance;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void toEPL(StringWriter writer){  String delimiter="";  for (  GroupByClauseExpression child : groupByExpressions) {    writer.write(delimiter);    child.toEPL(writer);    delimiter=", ";  }}  }
class C{  public void turnLeft(double amount){  turn(amount);}  }
class C{  public void callGCTraceMovedUp(GCTrace gcTrace){  ArgumentChecking.notNull(gcTrace,"gcTrace");  for (  GCTraceSetListener listener : listeners()) {    listener.gcTraceMovedUp(gcTrace);  }}  }
class C{  public JPasswordQualityField(int columns,int minPasswordQuality) throws IllegalArgumentException {  if ((minPasswordQuality < 0) || (minPasswordQuality > 100)) {    throw new IllegalArgumentException(res.getString("MinimumPasswordQualityInvalid.message"));  }  this.minPasswordQuality=minPasswordQuality;  initComponents(columns);}  }
class C{  public void clear(){synchronized (lock) {    File[] files=cachePath.listFiles();    if (files == null) {      return;    }    for (    File file : files) {      removeFile(file);    }    pendingTasks.clear();  }}  }
class C{  public byte[] decrypt(byte[] cipher,byte[] key,int usage) throws KrbApErrException, KrbCryptoException {  return decrypt(cipher,key,key,usage);}  }
class C{  public BadResultException(String message,Throwable cause){  super(message,cause);}  }
class C{  public KeyBuilder none(){  modifiers=ModifierKeys.NONE;  return this;}  }
class C{  public static <T extends Comparable<T>>Range<T> is(final T element){  return between(element,element,null);}  }
class C{  public void validate() throws org.apache.thrift.TException {  if (receivers == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'receivers' was not present! Struct: " + toString());  }  if (sender == null) {    throw new org.apache.thrift.protocol.TProtocolException("Required field 'sender' was not present! Struct: " + toString());  }}  }
class C{  @SuppressWarnings("LeakingThisInConstructor") public NodePanel(ShaderNodeBlock node,ShaderNodeDefinition def){  super();  shaderType=def.getType();  if (def.getType() == Shader.ShaderType.Vertex) {    type=NodePanel.NodeType.Vertex;  } else {    type=NodePanel.NodeType.Fragment;  }  init(def.getInputs(),def.getOutputs());  node.addPropertyChangeListener(WeakListeners.propertyChange(this,node));  this.addPropertyChangeListener(WeakListeners.propertyChange(node,this));  refresh(node);  addKeyListener(this);  this.filePaths.addAll(def.getShadersPath());  String defPath=((DefinitionBlock)node.getContents().get(0)).getPath();  this.filePaths.add(defPath);  toolBar=new NodeToolBar(this);}  }
class C{  void createEntry(int hash,K key,V value,int bucketIndex){  Entry<K,V> e=table[bucketIndex];  table[bucketIndex]=new Entry<K,V>(hash,key,value,e);  size++;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public static long nanoTime(){  wasTimeAccessed=true;  return currentTime * 1000;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ITERATION_STATEMENT__STATEMENT:    setStatement((Statement)newValue);  return;case N4JSPackage.ITERATION_STATEMENT__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void cancel(){  lock.lock();  timer.cancel();  timer.purge();  lock.unlock();}  }
class C{  public void configure(ContourPlot plot){  double minZ=plot.getDataset().getMinZValue();  double maxZ=plot.getDataset().getMaxZValue();  setMinimumValue(minZ);  setMaximumValue(maxZ);}  }
class C{  public LinkedList<Operator> createAdditionalOperators(PStrategyManager pStrategyManager,int iteration,int numberOfNewOperators){  LinkedList<Operator> emptyOperators=new LinkedList<>();  for (int i=0; i < numberOfNewOperators; i++) {    Operator operator=this.operatorFactory.createNewOperator(this.createNewIdForOperator(iteration));    emptyOperators.add(operator);  }  LinkedList<Operator> initializedOperator=new LinkedList<>();  int numberOfOperatorsFailedToBeInitialized=0;  for (  Operator operator : emptyOperators) {    boolean initComplete=operator.init(this.routeProvider,this.initialStrategy,iteration,this.pConfig.getInitialBudget());    if (initComplete) {      operator.replan(pStrategyManager,iteration);      initializedOperator.add(operator);    } else {      numberOfOperatorsFailedToBeInitialized++;    }  }  if (numberOfOperatorsFailedToBeInitialized > 0) {    log.warn(numberOfOperatorsFailedToBeInitialized + " out of " + numberOfNewOperators+ " operators could no be initialized. Proceeding with "+ initializedOperator.size()+ " new operators.");  }  return initializedOperator;}  }
class C{  protected static CostMatrix handleCostOption(String costFileName,int numClasses) throws Exception {  if ((costFileName != null) && (costFileName.length() != 0)) {    System.out.println("NOTE: The behaviour of the -m option has changed between WEKA 3.0" + " and WEKA 3.1. -m now carries out cost-sensitive *evaluation*" + " only. For cost-sensitive *prediction*, use one of the"+ " cost-sensitive metaschemes such as"+ " weka.classifiers.meta.CostSensitiveClassifier or"+ " weka.classifiers.meta.MetaCost");    Reader costReader=null;    try {      costReader=new BufferedReader(new FileReader(costFileName));    } catch (    Exception e) {      throw new Exception("Can't open file " + e.getMessage() + '.');    }    try {      return new CostMatrix(costReader);    } catch (    Exception ex) {      try {        try {          costReader.close();          costReader=new BufferedReader(new FileReader(costFileName));        } catch (        Exception e) {          throw new Exception("Can't open file " + e.getMessage() + '.');        }        CostMatrix costMatrix=new CostMatrix(numClasses);        costMatrix.readOldFormat(costReader);        return costMatrix;      } catch (      Exception e2) {        throw ex;      }    }  } else {    return null;  }}  }
class C{  public void testGetDataLength(){  char expectedReturn=(char)softwareValue.length();  char actualReturn=softwareAttribute.getDataLength();  assertEquals("getDataLength - failed",expectedReturn,actualReturn);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.517 -0500",hash_original_method="F9AD5FB516FC92F512EBE4470BCD6254",hash_generated_method="D291075F019491CDE84D4F2AF5684185") public static boolean isSelectingMetaTracker(CharSequence text,Object what){  return what == SELECTING;}  }
class C{  private void createDefaultLabelList(){  this.saveLabelType(new AssigneeLabelType());  this.saveLabelType(new UseCaseLabelType());  List<RatingLabelType> ratingLabelTypeList=this.getLabelTypes(RatingLabelType.class);  RatingLabelType ratingLabelType;  if (CollectionUtils.isNotEmpty(ratingLabelTypeList)) {    ratingLabelType=ratingLabelTypeList.get(0);  } else {    ratingLabelType=new RatingLabelType();    this.saveLabelType(ratingLabelType);  }  List<AbstractStorageLabel<String>> ratingLabelList=this.getAllLabelsForType(ratingLabelType);  if (ratingLabelList.isEmpty()) {    this.saveLabel(new StringStorageLabel("Very Bad",ratingLabelType));    this.saveLabel(new StringStorageLabel("Bad",ratingLabelType));    this.saveLabel(new StringStorageLabel("Medium",ratingLabelType));    this.saveLabel(new StringStorageLabel("Good",ratingLabelType));    this.saveLabel(new StringStorageLabel("Very Good",ratingLabelType));  }  List<StatusLabelType> statusLabelTypeList=this.getLabelTypes(StatusLabelType.class);  StatusLabelType statusLabelType;  if (CollectionUtils.isNotEmpty(statusLabelTypeList)) {    statusLabelType=statusLabelTypeList.get(0);  } else {    statusLabelType=new StatusLabelType();    this.saveLabelType(statusLabelType);  }  List<AbstractStorageLabel<String>> statusLabelList=this.getAllLabelsForType(statusLabelType);  if (statusLabelList.isEmpty()) {    this.saveLabel(new StringStorageLabel("Awaiting Review",statusLabelType));    this.saveLabel(new StringStorageLabel("In-Progress",statusLabelType));    this.saveLabel(new StringStorageLabel("Closed",statusLabelType));  }}  }
class C{  @Override public InetSocketAddress ipLocal(){  Socket s=getSocket();  if (s != null) {    return (InetSocketAddress)s.getLocalSocketAddress();  } else {    return null;  }}  }
class C{  protected void populateMap(){  this.layouts.put(C2GM_GNL_PNT_HBR,this.createLayout(SymbologyConstants.ADDITIONAL_INFORMATION,Offset.CENTER,Offset.CENTER));  this.layouts.put(C2GM_GNL_PNT_ACTPNT_DCNPNT,this.createLayout(SymbologyConstants.UNIQUE_DESIGNATION,Offset.CENTER,Offset.CENTER));  List<LabelLayout> layout=new ArrayList<LabelLayout>();  this.addLayout(layout,SymbologyConstants.UNIQUE_DESIGNATION,Offset.fromFraction(1.1,1.0),Offset.fromFraction(0.0,1.0));  this.addLayout(layout,SymbologyConstants.ADDITIONAL_INFORMATION,Offset.TOP_CENTER,Offset.BOTTOM_CENTER);  this.addLayout(layout,SymbologyConstants.HOSTILE_ENEMY,Offset.fromFraction(1.1,0.35),Offset.fromFraction(0.0,0.0));  this.addLayout(layout,SymbologyConstants.DATE_TIME_GROUP,Offset.fromFraction(-0.1,0.8),Offset.fromFraction(1.0,0.0),Offset.fromFraction(-0.1,0.8),Offset.fromFraction(1.0,1.0));  this.putAll(layout,C2GM_GNL_PNT_ACTPNT_CHKPNT,C2GM_GNL_PNT_ACTPNT_LNKUPT,C2GM_GNL_PNT_ACTPNT_PSSPNT,C2GM_GNL_PNT_ACTPNT_RAYPNT,C2GM_GNL_PNT_ACTPNT_RELPNT,C2GM_GNL_PNT_ACTPNT_STRPNT,C2GM_GNL_PNT_ACTPNT_AMNPNT,C2GM_OFF_PNT_PNTD,MOBSU_OBSTBP_CSGSTE_ERP,MOBSU_CBRN_DECONP_USP,MOBSU_CBRN_DECONP_ALTUSP,MOBSU_CBRN_DECONP_TRP,MOBSU_CBRN_DECONP_EQT,MOBSU_CBRN_DECONP_EQTTRP,MOBSU_CBRN_DECONP_OPDECN,MOBSU_CBRN_DECONP_TRGH,FSUPP_PNT_C2PNT_SCP,FSUPP_PNT_C2PNT_FP,FSUPP_PNT_C2PNT_RP,FSUPP_PNT_C2PNT_HP,FSUPP_PNT_C2PNT_LP,CSS_PNT_CBNP,CSS_PNT_CCP,CSS_PNT_CVP,CSS_PNT_DCP,CSS_PNT_EPWCP,CSS_PNT_LRP,CSS_PNT_MCP,CSS_PNT_RRRP,CSS_PNT_ROM,CSS_PNT_TCP,CSS_PNT_TTP,CSS_PNT_UMC,CSS_PNT_SPT_GNL,CSS_PNT_SPT_CLS1,CSS_PNT_SPT_CLS2,CSS_PNT_SPT_CLS3,CSS_PNT_SPT_CLS4,CSS_PNT_SPT_CLS5,CSS_PNT_SPT_CLS6,CSS_PNT_SPT_CLS7,CSS_PNT_SPT_CLS8,CSS_PNT_SPT_CLS9,CSS_PNT_SPT_CLS10,CSS_PNT_AP_ASP,CSS_PNT_AP_ATP);  layout=new ArrayList<LabelLayout>(layout);  this.addLayout(layout,SymbologyConstants.ADDITIONAL_INFORMATION,Offset.TOP_CENTER,Offset.BOTTOM_CENTER,Offset.fromFraction(0.5,0.9),Offset.TOP_CENTER);  this.layouts.put(C2GM_GNL_PNT_ACTPNT,layout);  layout=new ArrayList<LabelLayout>(layout);  this.addLayout(layout,SymbologyConstants.UNIQUE_DESIGNATION,Offset.fromFraction(1.1,1.0),Offset.fromFraction(0.0,1.0),Offset.CENTER,Offset.CENTER);  this.addLayout(layout,SymbologyConstants.ADDITIONAL_INFORMATION,Offset.TOP_CENTER,Offset.BOTTOM_CENTER);  this.layouts.put(CSS_PNT_AEP,layout);  layout=new ArrayList<LabelLayout>();  this.addLayout(layout,SymbologyConstants.LOCATION,Offset.fromFraction(0.5,-0.1),Offset.TOP_CENTER);  this.addLayout(layout,SymbologyConstants.DATE_TIME_GROUP,Offset.fromFraction(0.0,1.0),Offset.fromFraction(1.0,1.0));  this.addLayout(layout,SymbologyConstants.ADDITIONAL_INFORMATION,Offset.fromFraction(1.0,1.0),Offset.fromFraction(0.0,1.0));  this.addLayout(layout,SymbologyConstants.HOSTILE_ENEMY,Offset.fromFraction(1.0,0.0),Offset.fromFraction(0.0,0.0));  this.addLayout(layout,SymbologyConstants.TYPE,Offset.LEFT_CENTER,Offset.RIGHT_CENTER);  this.addLayout(layout,SymbologyConstants.UNIQUE_DESIGNATION,Offset.fromFraction(0.0,0.0),Offset.fromFraction(1.0,0.0));  this.layouts.put(MOBSU_CBRN_REEVNT_BIO,layout);  this.layouts.put(MOBSU_CBRN_REEVNT_CML,layout);  layout=new ArrayList<LabelLayout>(layout);  this.addLayout(layout,SymbologyConstants.QUANTITY,Offset.TOP_CENTER,Offset.BOTTOM_CENTER);  this.layouts.put(MOBSU_CBRN_NDGZ,layout);  layout=this.createLayout(SymbologyConstants.UNIQUE_DESIGNATION,Offset.fromFraction(0.5,0.7),Offset.CENTER);  this.layouts.put(C2GM_GNL_PNT_REFPNT_PNTINR,layout);  layout=this.createLayout(SymbologyConstants.UNIQUE_DESIGNATION,Offset.fromFraction(0.5,0.65),Offset.CENTER);  this.layouts.put(C2GM_GNL_PNT_ACTPNT_CONPNT,layout);  layout=this.createLayout(SymbologyConstants.UNIQUE_DESIGNATION,Offset.fromFraction(0.75,0.5),Offset.LEFT_CENTER);  this.layouts.put(C2GM_GNL_PNT_ACTPNT_WAP,layout);  this.layouts.put(FSUPP_PNT_C2PNT_FSS,layout);  layout=this.createLayout(SymbologyConstants.UNIQUE_DESIGNATION,Offset.fromFraction(0.75,0.75),Offset.fromFraction(0.0,0.0));  this.layouts.put(C2GM_DEF_PNT_TGTREF,layout);  this.layouts.put(FSUPP_PNT_TGT_NUCTGT,layout);  layout=new ArrayList<LabelLayout>(layout);  this.addLayout(layout,SymbologyConstants.ADDITIONAL_INFORMATION,Offset.fromFraction(0.75,0.25),Offset.fromFraction(0.0,1.0),Offset.fromFraction(0.25,0.25),Offset.fromFraction(1.0,1.0));  this.layouts.put(FSUPP_PNT_TGT_PTGT,layout);  layout=this.createLayout(SymbologyConstants.ALTITUDE_DEPTH,Offset.fromFraction(0.75,0.75),Offset.fromFraction(0.0,0.0));  this.layouts.put(MOBSU_OBST_AVN_TWR_LOW,layout);  this.layouts.put(MOBSU_OBST_AVN_TWR_HIGH,layout);}  }
class C{  public void removeHttpRequestListener(HttpRequestListener l){  listeners.removeElement(l);}  }
class C{  public static void main(String[] args) throws IOException {  QueryExample3 queryExample=new QueryExample3();  String token=queryExample.authenticate();  queryExample.displayMyItems(token);}  }
class C{  public boolean isCellEditable(EventObject anEvent){  if (m_rc == null)   return false;  return !m_rc.isReadOnly();}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(nombre)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DocumentosConstants.LABEL_DOCUMENTOS_CLASIFICADOR_NOMBRE,request.getLocale())));  }  return errors;}  }
class C{  public double R2(){  return R2;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'DOWNLOAD_ID_VALUE_DB' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'ID_VALUE' INTEGER NOT NULL UNIQUE );");}  }
class C{  protected void configurePopupMenu(JPopupMenu popupMenu){}  }
class C{  public static ReservationTokenAttribute createNewReservationTokenAttribute(){  ReservationTokenAttribute token=new ReservationTokenAttribute();  generateReservationTokenAttribute(token,8);  return token;}  }
class C{  void checkScheduledExecutionTime(TimerTask task){  long t=System.currentTimeMillis() - task.scheduledExecutionTime();  check(t >= 0 && t < 1000 * 600);}  }
class C{  @NotNull public OptionalDouble findOptionalDouble(@NotNull @SQL String sql,Object... args){  return findOptionalDouble(SqlQuery.query(sql,args));}  }
class C{  private void remoteCreate(DataPolicy dp,InterestPolicy ip,boolean rmtCreate) throws CacheException {  initOtherId();  AttributesFactory af=new AttributesFactory();  af.setDataPolicy(dp);  af.setSubscriptionAttributes(new SubscriptionAttributes(ip));  af.setScope(Scope.DISTRIBUTED_ACK);  Region r1=createRootRegion("r1",af.create());  assertEquals(false,r1.containsKey("key"));  doCreateOtherVm();  if (rmtCreate) {    assertEquals(true,r1.containsKey("key"));    assertEquals("value",r1.getEntry("key").getValue());  } else {    assertEquals(false,r1.containsKey("key"));  }}  }
class C{  public PeerNetwork clone(){  PeerNetwork clone=new HotspotPeerNetwork(scanResult);  return clone;}  }
class C{  public static void merge(final Network baseNetwork,final String addPrefix,final Network addNetwork){  double capacityFactor=baseNetwork.getCapacityPeriod() / addNetwork.getCapacityPeriod();  NetworkFactory factory=baseNetwork.getFactory();  for (  Node node : addNetwork.getNodes().values()) {    Node node2=(Node)factory.createNode(Id.create(addPrefix + node.getId().toString(),Node.class),node.getCoord());    baseNetwork.addNode(node2);  }  for (  Link link : addNetwork.getLinks().values()) {    Id<Node> fromNodeId=Id.create(addPrefix + link.getFromNode().getId().toString(),Node.class);    Id<Node> toNodeId=Id.create(addPrefix + link.getToNode().getId().toString(),Node.class);    Node fromNode=baseNetwork.getNodes().get(fromNodeId);    Node toNode=baseNetwork.getNodes().get(toNodeId);    Link link2=factory.createLink(Id.create(addPrefix + link.getId().toString(),Link.class),fromNode,toNode);    link2.setAllowedModes(link.getAllowedModes());    link2.setCapacity(link.getCapacity() * capacityFactor);    link2.setFreespeed(link.getFreespeed());    link2.setLength(link.getLength());    link2.setNumberOfLanes(link.getNumberOfLanes());    baseNetwork.addLink(link2);  }}  }
class C{  public void nextBlock() throws IOException {  if (!hasMoreBlocks())   throw new NoSuchElementException();  currentBlock++;  if (DEBUG)   LOGGER.debug("Moving to block # " + currentBlock);  nextSegment();}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean removeFieldValues(Object[] fieldValues){  if (this.hasLimitIterator) {    Iterator fieldItr=this.fieldValuesIterator();    while (fieldItr.hasNext()) {      if (Arrays.equals((Object[])fieldItr.next(),fieldValues)) {        fieldItr.remove();        return true;      }    }    return false;  } else {    return super.remove(fieldValues);  }}  }
class C{  public boolean containsWindow(String title){  return (getWindow(title) != null);}  }
class C{  public boolean isAcceptable(X509Certificate cert){  if (permitted_names == null) {    prepareNames();  }  byte[] bytes=getExtensionValue(cert,"2.5.29.17");  List<GeneralName> names;  try {    names=(bytes == null) ? new ArrayList<GeneralName>(1) : ((GeneralNames)GeneralNames.ASN1.decode(bytes)).getNames();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  if ((excluded_names[4] != null) || (permitted_names[4] != null)) {    try {      names.add(new GeneralName(4,cert.getSubjectX500Principal().getName()));    } catch (    IOException e) {    }  }  return isAcceptable(names);}  }
class C{  public static RGB blend(RGB c1,RGB c2,int ratio){  int r=blend(c1.red,c2.red,ratio);  int g=blend(c1.green,c2.green,ratio);  int b=blend(c1.blue,c2.blue,ratio);  return new RGB(r,g,b);}  }
class C{  public static void addMonitor(DependencyMonitor monitor){  monitors.add(monitor);}  }
class C{  public void close(){  if (stream != null) {    try {      stream.close();      stream=null;    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public GSSResult(String contextId,byte[] serverLeg){  assert serverLeg != null && serverLeg.length > 0;  this.principalId=null;  this.contextId=contextId;  this.serverLeg=serverLeg;}  }
class C{  protected void removeRange(int fromIndex,int toIndex){  modCount++;  int numMoved=size - toIndex;  System.arraycopy(elementData,toIndex,elementData,fromIndex,numMoved);  int newSize=size - (toIndex - fromIndex);  while (size != newSize)   elementData[--size]=null;}  }
class C{  private void cmd_applyFormat(boolean next){  if (m_format == null || m_data.size() == 0)   return;  if (next)   m_record++; else   m_record--;  if (m_record < 0)   m_record=0; else   if (m_record >= m_data.size())   m_record=m_data.size() - 1;  record.setText(" " + String.valueOf(m_record + 1) + " ");  String[] lInfo=m_format.parseLine(m_data.get(m_record).toString(),false,true,false);  int size=m_format.getRowCount();  if (lInfo.length != size)   log.log(Level.SEVERE,"FormatElements=" + size + " != Fields="+ lInfo.length);  for (int i=0; i < size; i++) {    m_fields[i].setText(lInfo[i]);    m_fields[i].setCaretPosition(0);  }}  }
class C{  private void expandTree(){  if (treeExpand.isSelected()) {    for (int row=0; row < tree.getRowCount(); row++)     tree.expandRow(row);  } else {    for (int row=tree.getRowCount(); row > 0; row--)     tree.collapseRow(row);  }}  }
class C{  private void writeObject(final java.io.ObjectOutputStream out) throws IOException {  out.writeObject(field);  out.writeObject(pattern.pattern());}  }
class C{  static PlansScoring createPlansScoringDefault(Scenario sc,EventsManager ev,OutputDirectoryHierarchy controlerIO){  throw new RuntimeException("Should use dependency injection.");}  }
class C{  public static Map<String,Object> updateElectronicTextMethod(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  GenericValue electronicText=null;  Locale locale=(Locale)context.get("locale");  String dataResourceId=(String)context.get("dataResourceId");  result.put("dataResourceId",dataResourceId);  String contentId=(String)context.get("contentId");  result.put("contentId",contentId);  if (UtilValidate.isEmpty(dataResourceId)) {    Debug.logError("dataResourceId is null.",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentDataResourceIsNull",locale));  }  String textData=(String)context.get("textData");  if (Debug.verboseOn()) {    Debug.logVerbose("in updateElectronicText, textData:" + textData,module);  }  try {    electronicText=EntityQuery.use(delegator).from("ElectronicText").where("dataResourceId",dataResourceId).queryOne();    if (electronicText != null) {      electronicText.put("textData",textData);      electronicText.store();    } else {      electronicText=delegator.makeValue("ElectronicText");      electronicText.put("dataResourceId",dataResourceId);      electronicText.put("textData",textData);      electronicText.create();    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentElectronicTextNotFound",locale) + " " + e.getMessage());  }  return result;}  }
class C{  public final Builder addDivider(){  bottomSheet.addDivider();  return this;}  }
class C{  public CompletionInfo(long id,int index,CharSequence text){  mId=id;  mPosition=index;  mText=text;  mLabel=null;}  }
class C{  public boolean isProviderEnabled(String provider){  checkProvider(provider);  try {    return mService.isProviderEnabled(provider);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);    return false;  }}  }
class C{  public XMLStreamException(String msg,Location location,Throwable nested){  super(msg);  _nested=nested;  _location=location;}  }
class C{  public Key(Row parent){  keyboard=parent.parent;  height=parent.defaultHeight;  width=Math.round(parent.defaultWidth);  realWidth=parent.defaultWidth;  gap=Math.round(parent.defaultHorizontalGap);  realGap=parent.defaultHorizontalGap;}  }
class C{  public Object[] toArray(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    return Arrays.copyOf(queue,size);  }  finally {    lock.unlock();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattributens03.class,args);}  }
class C{  @Override public void removeHandshakeCompletedListener(HandshakeCompletedListener listener){  if (listener == null) {    throw new IllegalArgumentException("Provided listener is null");  }  if (listeners == null) {    throw new IllegalArgumentException("Provided listener is not registered");  }  if (!listeners.remove(listener)) {    throw new IllegalArgumentException("Provided listener is not registered");  }}  }
class C{  public PackingPlan repack(PackingPlan currentPackingPlan,Map<String,Integer> componentChanges){  int adjustments=0;  this.numContainers=currentPackingPlan.getContainers().size();  resetState();  int additionalContainers=computeNumAdditionalContainers(componentChanges,currentPackingPlan);  increaseNumContainers(additionalContainers);  LOG.info(String.format("Allocated " + "%s additional containers for repack bring the number of containers to %s.",additionalContainers,this.numContainers));  Optional<Map<Integer,List<InstanceId>>> resourceCompliantRRAllocation=getResourceCompliantRRAllocation(currentPackingPlan,componentChanges);  while (!resourceCompliantRRAllocation.isPresent()) {    if (this.numAdjustments > adjustments) {      adjustments++;      resourceCompliantRRAllocation=getResourceCompliantRRAllocation(currentPackingPlan,componentChanges);    } else {      return null;    }  }  Map<String,Long> ramMap=TopologyUtils.getComponentRamMapConfig(topology);  Set<PackingPlan.ContainerPlan> containerPlans=PackingUtils.buildContainerPlans(resourceCompliantRRAllocation.get(),ramMap,defaultInstanceResources,paddingPercentage);  return new PackingPlan(topology.getId(),containerPlans);}  }
class C{  public void addField(String fieldName,String typeName){  addField(new FieldDefinition(fieldName,typeName));}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  private static void d_uarimin(double[] a,double[] c,int m,int n,double init,Builtin builtin,int rl,int ru){  for (int i=rl, aix=rl * n, cix=rl * 2; i < ru; i++, aix+=n, cix+=2) {    int minindex=indexmin(a,aix,init,n,builtin);    c[cix + 0]=(double)minindex + 1;    c[cix + 1]=a[aix + minindex];  }}  }
class C{  private List<MurmurMessage> convertToMessages(Cursor cursor){  List<MurmurMessage> messages=new ArrayList<>();  cursor.moveToFirst();  int messageIdColIndex=cursor.getColumnIndex(COL_MESSAGE_ID);  int trustColIndex=cursor.getColumnIndex(COL_TRUST);  int priorityColIndex=cursor.getColumnIndex(COL_LIKES);  int messageColIndex=cursor.getColumnIndex(COL_MESSAGE);  int pseudonymColIndex=cursor.getColumnIndex(COL_PSEUDONYM);  int timestampColIndex=cursor.getColumnIndex(COL_TIMESTAMP);  int latlongColIndex=cursor.getColumnIndex(COL_LATLONG);  int timeboundColIndex=cursor.getColumnIndex(COL_EXPIRE);  int parentColIndex=cursor.getColumnIndex(COL_PARENT);  int bigparentColIndex=cursor.getColumnIndex(COL_BIGPARENT);  int hopColIndex=cursor.getColumnIndex(COL_HOP);  int hopContactsColIndex=cursor.getColumnIndex(COL_MIN_CONTACTS_FOR_HOP);  if (cursor.getCount() > 0) {    while (!cursor.isAfterLast()) {      messages.add(new MurmurMessage(cursor.getString(messageIdColIndex),cursor.getString(messageColIndex),cursor.getDouble(trustColIndex),cursor.getInt(priorityColIndex),cursor.getString(pseudonymColIndex),cursor.getLong(timestampColIndex),cursor.getString(latlongColIndex),cursor.getLong(timeboundColIndex),cursor.getString(parentColIndex),cursor.getInt(hopColIndex),cursor.getString(bigparentColIndex),cursor.getInt(hopContactsColIndex)));      cursor.moveToNext();    }  }  return messages;}  }
class C{  protected SVGOMFETurbulenceElement(){}  }
class C{  public boolean isSetDeleteRequest(){  return this.deleteRequest != null;}  }
class C{  @SuppressWarnings({"UnusedDeclaration","unchecked"}) public boolean stopLocalListen(long hnd){  return events.stopLocalListen(localFilter(hnd));}  }
class C{  public ArrayStoreException(@Nullable String s){  super(s);}  }
class C{  private void init(){  fsbAcceptingStates=new StringBuilder();  fsbNormalStates=new StringBuilder();  fStartState=null;  fsbStartEdges=new StringBuilder();  fsbEdges=new StringBuilder();  fCounter=0;  fStateNumbers=new HashMap<State,Integer>();  fAppendedNormalStates=new HashSet<State>();  fLegend=new StringBuilder();}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(String message,String marketplaceId){  super(message,new Object[]{marketplaceId});}  }
class C{  public VoidType createVoidType(){  VoidTypeImpl voidType=new VoidTypeImpl();  return voidType;}  }
class C{  public void resolve(ClassScope scope){  internalResolve(scope);}  }
class C{  @Override public void handleQuit(ApplicationEvent event){  event.setHandled(myProj.quitApplication());}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public void clickButtonByName(String name){  TestUtils.clickButtonByName(name);}  }
class C{  public static void validatePositiveNumber(long fieldValue,String fieldName){  if (fieldValue <= 0) {    logAndThrow(String.format("%s should be a positive number: %d",fieldName,fieldValue));  }}  }
class C{  public boolean usesHeaders(){  return usesHeaders;}  }
class C{  public DateOrTimeProperty(PartialDate partialDate){  setPartialDate(partialDate);}  }
class C{  public void registerTags(BridgeContext ctx){  ctx.putBridge(new SVGAElementBridge());  ctx.putBridge(new SVGAltGlyphElementBridge());  ctx.putBridge(new SVGCircleElementBridge());  ctx.putBridge(new SVGClipPathElementBridge());  ctx.putBridge(new SVGColorProfileElementBridge());  ctx.putBridge(new SVGDescElementBridge());  ctx.putBridge(new SVGEllipseElementBridge());  ctx.putBridge(new SVGFeBlendElementBridge());  ctx.putBridge(new SVGFeColorMatrixElementBridge());  ctx.putBridge(new SVGFeComponentTransferElementBridge());  ctx.putBridge(new SVGFeCompositeElementBridge());  ctx.putBridge(new SVGFeComponentTransferElementBridge.SVGFeFuncAElementBridge());  ctx.putBridge(new SVGFeComponentTransferElementBridge.SVGFeFuncRElementBridge());  ctx.putBridge(new SVGFeComponentTransferElementBridge.SVGFeFuncGElementBridge());  ctx.putBridge(new SVGFeComponentTransferElementBridge.SVGFeFuncBElementBridge());  ctx.putBridge(new SVGFeConvolveMatrixElementBridge());  ctx.putBridge(new SVGFeDiffuseLightingElementBridge());  ctx.putBridge(new SVGFeDisplacementMapElementBridge());  ctx.putBridge(new AbstractSVGLightingElementBridge.SVGFeDistantLightElementBridge());  ctx.putBridge(new SVGFeFloodElementBridge());  ctx.putBridge(new SVGFeGaussianBlurElementBridge());  ctx.putBridge(new SVGFeImageElementBridge());  ctx.putBridge(new SVGFeMergeElementBridge());  ctx.putBridge(new SVGFeMergeElementBridge.SVGFeMergeNodeElementBridge());  ctx.putBridge(new SVGFeMorphologyElementBridge());  ctx.putBridge(new SVGFeOffsetElementBridge());  ctx.putBridge(new AbstractSVGLightingElementBridge.SVGFePointLightElementBridge());  ctx.putBridge(new SVGFeSpecularLightingElementBridge());  ctx.putBridge(new AbstractSVGLightingElementBridge.SVGFeSpotLightElementBridge());  ctx.putBridge(new SVGFeTileElementBridge());  ctx.putBridge(new SVGFeTurbulenceElementBridge());  ctx.putBridge(new SVGFontElementBridge());  ctx.putBridge(new SVGFontFaceElementBridge());  ctx.putBridge(new SVGFilterElementBridge());  ctx.putBridge(new SVGGElementBridge());  ctx.putBridge(new SVGGlyphElementBridge());  ctx.putBridge(new SVGHKernElementBridge());  ctx.putBridge(new SVGImageElementBridge());  ctx.putBridge(new SVGLineElementBridge());  ctx.putBridge(new SVGLinearGradientElementBridge());  ctx.putBridge(new SVGMarkerElementBridge());  ctx.putBridge(new SVGMaskElementBridge());  ctx.putBridge(new SVGMissingGlyphElementBridge());  ctx.putBridge(new SVGPathElementBridge());  ctx.putBridge(new SVGPatternElementBridge());  ctx.putBridge(new SVGPolylineElementBridge());  ctx.putBridge(new SVGPolygonElementBridge());  ctx.putBridge(new SVGRadialGradientElementBridge());  ctx.putBridge(new SVGRectElementBridge());  ctx.putBridge(new AbstractSVGGradientElementBridge.SVGStopElementBridge());  ctx.putBridge(new SVGSVGElementBridge());  ctx.putBridge(new SVGSwitchElementBridge());  ctx.putBridge(new SVGTextElementBridge());  ctx.putBridge(new SVGTextPathElementBridge());  ctx.putBridge(new SVGTitleElementBridge());  ctx.putBridge(new SVGUseElementBridge());  ctx.putBridge(new SVGVKernElementBridge());  ctx.putBridge(new SVGSetElementBridge());  ctx.putBridge(new SVGAnimateElementBridge());  ctx.putBridge(new SVGAnimateColorElementBridge());  ctx.putBridge(new SVGAnimateTransformElementBridge());  ctx.putBridge(new SVGAnimateMotionElementBridge());}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),IOUtil.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),IOUtil.US_ASCII));}  }
class C{  private void bind(final IgfsIpcEndpointConfiguration endpointCfg,final boolean mgmt) throws IgniteCheckedException {  if (srvrs == null)   srvrs=new ConcurrentLinkedQueue<>();  IgfsServer ipcSrv=new IgfsServer(igfsCtx,endpointCfg,mgmt);  try {    ipcSrv.start();    srvrs.add(ipcSrv);  } catch (  IpcEndpointBindException ignored) {    int port=ipcSrv.getIpcServerEndpoint().getPort();    String portMsg=port != -1 ? " Failed to bind to port (is port already in use?): " + port : "";    U.warn(log,"Failed to start IGFS " + (mgmt ? "management " : "") + "endpoint "+ "(will retry every "+ (REBIND_INTERVAL / 1000)+ "s)."+ portMsg);    if (bindWorker == null)     bindWorker=new BindWorker();    bindWorker.addConfiguration(endpointCfg,mgmt);  }}  }
class C{  public static Long convertStringToLong(String s){  if (s == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    if (s.length() == 0) {      return null;    }    return Long.valueOf(s);  } catch (  NumberFormatException e) {    String message=Logging.getMessage("generic.ConversionError",s);    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    return null;  }}  }
class C{  @Override public int byteLength(){  return 1 + key().length;}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:40.031 -0500",hash_original_method="8530804EF89502A199885F8B13B3D156",hash_generated_method="D974982D59EF5C700DD07374998DAD9A") public static String adnStringFieldToString(byte[] data,int offset,int length){  if (length == 0) {    return "";  }  if (length >= 1) {    if (data[offset] == (byte)0x80) {      int ucslen=(length - 1) / 2;      String ret=null;      try {        ret=new String(data,offset + 1,ucslen * 2,"utf-16be");      } catch (      UnsupportedEncodingException ex) {        Log.e(LOG_TAG,"implausible UnsupportedEncodingException",ex);      }      if (ret != null) {        ucslen=ret.length();        while (ucslen > 0 && ret.charAt(ucslen - 1) == '\uFFFF')         ucslen--;        return ret.substring(0,ucslen);      }    }  }  boolean isucs2=false;  char base='\0';  int len=0;  if (length >= 3 && data[offset] == (byte)0x81) {    len=data[offset + 1] & 0xFF;    if (len > length - 3)     len=length - 3;    base=(char)((data[offset + 2] & 0xFF) << 7);    offset+=3;    isucs2=true;  } else   if (length >= 4 && data[offset] == (byte)0x82) {    len=data[offset + 1] & 0xFF;    if (len > length - 4)     len=length - 4;    base=(char)(((data[offset + 2] & 0xFF) << 8) | (data[offset + 3] & 0xFF));    offset+=4;    isucs2=true;  }  if (isucs2) {    StringBuilder ret=new StringBuilder();    while (len > 0) {      if (data[offset] < 0) {        ret.append((char)(base + (data[offset] & 0x7F)));        offset++;        len--;      }      int count=0;      while (count < len && data[offset + count] >= 0)       count++;      ret.append(GsmAlphabet.gsm8BitUnpackedToString(data,offset,count));      offset+=count;      len-=count;    }    return ret.toString();  }  Resources resource=Resources.getSystem();  String defaultCharset="";  try {    defaultCharset=resource.getString(com.android.internal.R.string.gsm_alphabet_default_charset);  } catch (  NotFoundException e) {  }  return GsmAlphabet.gsm8BitUnpackedToString(data,offset,length,defaultCharset.trim());}  }
class C{  public static String createTagsForConsistencyGroup(XtremIOClient client,String rootTagName,String clusterName) throws Exception {  List<String> tagNames=client.getTagNames(clusterName);  _log.info("Tag Names found on Array : {}",Joiner.on("; ").join(tagNames));  String cgTagName=XtremIOConstants.V2_CONSISTENCY_GROUP_ROOT_FOLDER.concat(rootTagName);  long waitTime=30000;  int count=0;  while (waitTime > 0) {    count++;    _log.debug("Retrying {} time to find the cg tag",count);    if (!tagNames.contains(cgTagName)) {      _log.debug("sleeping time {} remaining time: {}",SLEEP_TIME,(waitTime - SLEEP_TIME));      Thread.sleep(SLEEP_TIME);      waitTime=waitTime - SLEEP_TIME;      tagNames=client.getTagNames(clusterName);    } else {      _log.info("Found cg tag: {} on the Array.",cgTagName);      break;    }  }  if (!tagNames.contains(cgTagName)) {    _log.info("Sending create cg tag request {}",cgTagName);    client.createTag(cgTagName,null,XtremIOConstants.XTREMIO_ENTITY_TYPE.ConsistencyGroup.name(),clusterName);  } else {    _log.info("Found {} cg tag on the Array.",cgTagName);  }  return cgTagName;}  }
class C{  public void validateIncomplete(MetricFileReader reader){  Assert.assertTrue(reader.hasNext());  Assert.assertArrayEquals(new double[]{0.0,0.1,-0.1,1.0,-1.0,1E-5},reader.next(),Settings.EPS);  Assert.assertFalse(reader.hasNext());  Assert.assertFalse(reader.hasNext());}  }
class C{  static public void assertOnBottomEdgeOfScreen(View origin,View view){  int[] xy=new int[2];  view.getLocationOnScreen(xy);  int[] xyRoot=new int[2];  origin.getLocationOnScreen(xyRoot);  int bottom=xy[1] + view.getHeight();  int bottomOfRoot=xyRoot[1] + origin.getHeight();  assertTrue(bottom > bottomOfRoot);  assertTrue(xy[1] < bottomOfRoot);  assertTrue(bottom > bottomOfRoot);}  }
class C{  public static Model createDefaultValueTypesModel(Model model){  String sparql=JenaUtil.getStringProperty(DASH.DefaultValueTypeRule.inModel(model),SH.construct);  if (sparql == null) {    throw new IllegalArgumentException("Shapes graph does not include " + TOSH.PREFIX + ":"+ DASH.DefaultValueTypeRule);  }  Model resultModel=JenaUtil.createMemoryModel();  MultiUnion multiUnion=new MultiUnion(new Graph[]{model.getGraph(),resultModel.getGraph()});  Model unionModel=ModelFactory.createModelForGraph(multiUnion);  Query query=ARQFactory.get().createQuery(model,sparql);  try (QueryExecution qexec=ARQFactory.get().createQueryExecution(query,unionModel)){    qexec.execConstruct(resultModel);    return resultModel;  } }  }
class C{  public void synchronouslyUpdateViewOnUIThread(int tag,ReactStylesDiffMap props){  UiThreadUtil.assertOnUiThread();  mOperationsQueue.getNativeViewHierarchyManager().updateProperties(tag,props);}  }
class C{  void unregisterDecorators(){  view.removeDrawDecorator(processBackgroundImageDrawer,RenderPhase.BACKGROUND);}  }
class C{  public static boolean isEligibleForFineGrainedScaling(String hostName,SchedulerState state){  for (  NodeTask activeNMTask : state.getActiveTasksByType(NodeManagerConfiguration.DEFAULT_NM_TASK_PREFIX)) {    if (activeNMTask.getProfile().getCpus() == 0 && activeNMTask.getProfile().getMemory() == 0 && activeNMTask.getHostname().equals(hostName)) {      return true;    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String notationName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation1");  notationName=notationNode.getNodeName();  assertEquals("notationGetNotationNameAssert","notation1",notationName);}  }
class C{  public Neighborhood(String value){  this();  setValue(value);}  }
class C{  void checkFrameValue(final Object value){  if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) {    return;  }  if (value instanceof String) {    checkInternalName((String)value,"Invalid stack frame value");    return;  }  if (!(value instanceof Label)) {    throw new IllegalArgumentException("Invalid stack frame value: " + value);  } else {    usedLabels.add((Label)value);  }}  }
class C{  public void start() throws IOException, MqttException {  final String methodName="start";  try {    log.fine(CLASS_NAME,methodName,"252",new Object[]{host,new Integer(port),new Long(conTimeout * 1000)});    SocketAddress sockaddr=new InetSocketAddress(host,port);    socket=factory.createSocket();    socket.connect(sockaddr,conTimeout * 1000);  } catch (  ConnectException ex) {    log.fine(CLASS_NAME,methodName,"250",null,ex);    throw new MqttException(MqttException.REASON_CODE_SERVER_CONNECT_ERROR,ex);  }}  }
class C{  @Deprecated public static <T>IgnitePair<T> pair(@Nullable T t1,@Nullable T t2){  return new IgnitePair<>(t1,t2);}  }
class C{  @Override protected void testInputFormat(Instances instanceInfo) throws Exception {  for (int i=0; i < getRanges().length; i++) {    Instances newi=new Instances(instanceInfo,0);    if (instanceInfo.size() > 0) {      newi.add((Instance)instanceInfo.get(0).copy());    }    Range range=getRanges()[i];    range.setUpper(instanceInfo.numAttributes() - 1);    Instances subset=generateSubset(newi,range);    getFilters()[i].setInputFormat(subset);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MIssueSystem[");  sb.append(get_ID()).append("-").append(getDBAddress()).append(",A_Asset_ID=").append(getA_Asset_ID()).append("]");  return sb.toString();}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  private CallFuture(){}  }
class C{  protected static <A>double[] computeDistances(NumberArrayAdapter<?,A> adapter,A data){  final int size=adapter.size(data);  double[] dMatrix=new double[(size * (size + 1)) >> 1];  for (int i=0, c=0; i < size; i++) {    for (int j=0; j < i; j++) {      double dx=adapter.getDouble(data,i) - adapter.getDouble(data,j);      dMatrix[c++]=(dx < 0) ? -dx : dx;    }    c++;  }  doubleCenterMatrix(dMatrix,size);  return dMatrix;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public <T>T createCoreApi(Class<T> service){  if (!apis.containsKey(service)) {    T instance=mCoreRetrofit.create(service);    apis.put(service,instance);  }  return (T)apis.get(service);}  }
class C{  protected void cleanupEntities(){  cntCleanupEntitiesRuns.updateCounterWithFlush();  Calendar c=Calendar.getInstance();  c.add(Calendar.MILLISECOND,-ENTITY_TIMEOUT);  Date cutoff=c.getTime();  ArrayList<Entity> toRemove=new ArrayList<Entity>();  ArrayList<Entity> toKeep=new ArrayList<Entity>();  Iterator<Device> diter=deviceMap.values().iterator();  LinkedList<DeviceUpdate> deviceUpdates=new LinkedList<DeviceUpdate>();  while (diter.hasNext()) {    Device d=diter.next();    while (true) {      deviceUpdates.clear();      toRemove.clear();      toKeep.clear();      for (      Entity e : d.getEntities()) {        if (e.getLastSeenTimestamp() != null && 0 > e.getLastSeenTimestamp().compareTo(cutoff)) {          toRemove.add(e);        } else {          toKeep.add(e);        }      }      if (toRemove.size() == 0) {        break;      }      cntEntityRemovedTimeout.updateCounterWithFlush();      for (      Entity e : toRemove) {        removeEntity(e,d.getEntityClass(),d.getDeviceKey(),toKeep);      }      if (toKeep.size() > 0) {        Device newDevice=allocateDevice(d.getDeviceKey(),d.getDHCPClientName(),d.oldAPs,d.attachmentPoints,toKeep,d.getEntityClass());        EnumSet<DeviceField> changedFields=EnumSet.noneOf(DeviceField.class);        for (        Entity e : toRemove) {          changedFields.addAll(findChangedFields(newDevice,e));        }        DeviceUpdate update=null;        if (changedFields.size() > 0) {          update=new DeviceUpdate(d,CHANGE,changedFields);        }        if (!deviceMap.replace(newDevice.getDeviceKey(),d,newDevice)) {          d=deviceMap.get(d.getDeviceKey());          if (null != d)           continue;        }        if (update != null) {          cntDeviceChanged.updateCounterWithFlush();          deviceUpdates.add(update);        }      } else {        DeviceUpdate update=new DeviceUpdate(d,DELETE,null);        if (!deviceMap.remove(d.getDeviceKey(),d)) {          d=deviceMap.get(d.getDeviceKey());          if (null != d)           continue;          cntDeviceDeleted.updateCounterWithFlush();        }        deviceUpdates.add(update);      }      processUpdates(deviceUpdates);      break;    }  }  debugEvents.flushEvents();}  }
class C{  public void replaceRange(String str,int start,int end){  if (end < start) {    throw new IllegalArgumentException("end before start");  }  Document doc=getDocument();  if (doc != null) {    try {      if (doc instanceof AbstractDocument) {        ((AbstractDocument)doc).replace(start,end - start,str,null);      } else {        doc.remove(start,end - start);        doc.insertString(start,str,null);      }    } catch (    BadLocationException e) {      throw new IllegalArgumentException(e.getMessage());    }  }}  }
class C{  public void checkNullString(String description){  if (NullColumnValueGetter.getNullStr().equalsIgnoreCase(description)) {    throw APIException.badRequests.requiredParameterMissingOrEmpty("description");  }}  }
class C{  private String toHex(int i){  String result;  result=Integer.toHexString(i);  if (result.length() < 2) {    result="0" + result;  }  return result;}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public RedoAction(KseFrame kseFrame){  super(kseFrame);  defaultName=res.getString("RedoAction.text");  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("RedoAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("RedoAction.statusbar"));  putValue(NAME,defaultName);  putValue(SHORT_DESCRIPTION,res.getString("RedoAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("RedoAction.image")))));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static final byte composeSmeManualAcknowledment(byte esmClass){  return composeMessageType(esmClass,SMPPConstant.ESMCLS_SME_MANUAL_ACK);}  }
class C{  public void addFeature(FeatureVectorBuffer fvb,int offset){  int size=fvb.idxList.size();  for (int i=0; i < size; i++) {    idxList.add(fvb.idxList.get(i) + offset);  }  valList.addAll(fvb.valList);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ConnectionEvent(int from,int to,String interf,boolean up,double time){  super(time);  assert to != from : "Can't self connect";  this.fromAddr=from;  this.toAddr=to;  this.isUp=up;  this.interfaceId=interf;}  }
class C{  public boolean isSendEMail(){  Object oo=get_Value(COLUMNNAME_SendEMail);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void preConcate(CGAffineTransform t1,CGAffineTransform t2){  double m00=t1.m00 * t2.m00 + t1.m10 * t2.m01;  double m01=t1.m00 * t2.m10 + t1.m10 * t2.m11;  double m10=t1.m01 * t2.m00 + t1.m11 * t2.m01;  double m11=t1.m01 * t2.m10 + t1.m11 * t2.m11;  double m02=t1.m02 * t2.m00 + t1.m12 * t2.m01 + t2.m02;  double m12=t1.m02 * t2.m10 + t1.m12 * t2.m11 + t2.m12;  t1.m00=m00;  t1.m10=m10;  t1.m01=m01;  t1.m11=m11;  t1.m02=m02;  t1.m12=m12;}  }
class C{  public Connection connect() throws SQLException {  Properties p=new Properties();  if (isSybase()) {    p.setProperty("JCONNECT_VERSION","3");    p.setProperty("charSet","eucksc");  }  p.setProperty("user",user);  p.setProperty("password",password);  return driver.connect(uri,p);}  }
class C{  protected Shape createOuterFocus(final SegmentType segmentType,final int x,final int y,final int w,final int h){switch (segmentType) {case FIRST:    return shapeGenerator.createRoundRectangle(x - 2,y - 2,w + 3,h + 3,CornerSize.OUTER_FOCUS,CornerStyle.ROUNDED,CornerStyle.ROUNDED,CornerStyle.SQUARE,CornerStyle.SQUARE);case MIDDLE:  return shapeGenerator.createRectangle(x - 2,y - 2,w + 3,h + 3);case LAST:return shapeGenerator.createRoundRectangle(x - 2,y - 2,w + 3,h + 3,CornerSize.OUTER_FOCUS,CornerStyle.SQUARE,CornerStyle.SQUARE,CornerStyle.ROUNDED,CornerStyle.ROUNDED);default :return shapeGenerator.createRoundRectangle(x - 2,y - 2,w + 3,h + 3,CornerSize.OUTER_FOCUS);}}  }
class C{  public boolean isPartial(){  return ((ConsCell)getTerm()).isPartial();}  }
class C{  @Override public final Uri insert(@NonNull Uri uri,ContentValues values){  SQLiteDatabase dbConnection=database.getWritableDatabase();  try {    dbConnection.beginTransaction();switch (URI_MATCHER.match(uri)) {case PRODUCT_DIR:case PRODUCT_ID:      Long productId=dbConnection.insertOrThrow(ProductTable.TABLE_NAME,null,values);    Uri newProduct=ContentUris.withAppendedId(PRODUCT_CONTENT_URI,productId);  getContext().getContentResolver().notifyChange(newProduct,null);dbConnection.setTransactionSuccessful();return newProduct;default :throw new IllegalArgumentException("Unsupported URI: " + uri);}}  finally {dbConnection.endTransaction();}}  }
class C{  public String sqlAD_getSequenceMaxUser(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add(new StringBuffer("max(").append(normalizeColumnName(vendorName,columnName)).append(")").toString());  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("MAX_SEQ");  ArrayList<String> conditions=null;  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  return sql_select(vendorName,catalogName,schemaName,tableName,null,columnNames,aliasNames,conditions,sortColumns,false);}  }
class C{  private String saveTmpFile(byte[] b,int offset,int len){  String path="";  if (len > 0) {    String tmpdir=System.getProperty("java.io.tmpdir");    try {      File temp=File.createTempFile("NanoHTTPD","",new File(tmpdir));      OutputStream fstream=new FileOutputStream(temp);      fstream.write(b,offset,len);      fstream.close();      path=temp.getAbsolutePath();    } catch (    Exception e) {      System.err.println("Error: " + e.getMessage());    }  }  return path;}  }
class C{  public void returnQuery(boolean enableReturn){  return_query=enableReturn;  if (enableReturn)   return_sql_json=new JsonByteArray(SODAConstants.SQL_STATEMENT_SIZE); else   return_sql_json=null;}  }
class C{  public void sort(int columnIndex,boolean ascending){  int columnType;  int i;  ArrayList<SortContainer> sorted;  SortContainer cont;  Object value;  if ((!isInitialized()) || (getUnsortedModel().getRowCount() != m_SortedIndices.length)) {    System.out.println(this.getClass().getName() + ": Table model not initialized!");    return;  }  m_DisplayIndices=null;  m_SortColumn=columnIndex;  m_SortAscending=ascending;  initializeSortIndices();  if (m_SortColumn == -1)   return;  if (ClassDiscovery.hasInterface(Comparable.class,getColumnClassForComparison(m_SortColumn)))   columnType=1; else   columnType=0;  sorted=new ArrayList<SortContainer>();  for (i=0; i < getRowCount(); i++) {    value=getValueForComparison(m_SortedIndices[i],m_SortColumn);    if (columnType == 0) {      cont=new SortContainer((value == null) ? null : value.toString(),m_SortedIndices[i]);    } else {      if (m_ColumnIsNumeric[m_SortColumn] && (!(value instanceof Number))) {        try {          cont=new SortContainer(Double.parseDouble(value.toString()),m_SortedIndices[i]);        } catch (        Exception e) {          try {            cont=new SortContainer((Comparable)value,m_SortedIndices[i]);          } catch (          Exception ex) {            cont=new SortContainer(value.toString(),m_SortedIndices[i]);          }        }      } else {        cont=new SortContainer((Comparable)value,m_SortedIndices[i]);      }    }    sorted.add(cont);  }  Collections.sort(sorted);  for (i=0; i < sorted.size(); i++) {    if (m_SortAscending)     m_SortedIndices[i]=sorted.get(i).getIndex(); else     m_SortedIndices[i]=sorted.get(sorted.size() - 1 - i).getIndex();  }  sorted.clear();  sorted=null;  if (m_SearchString != null)   search(m_SearchString,m_RegExpSearch);}  }
class C{  public CTraceFilterExpression(final String text){  m_text=text;}  }
class C{  public void init(Properties p) throws WorkloadException {  table=p.getProperty(TABLENAME_PROPERTY,TABLENAME_PROPERTY_DEFAULT);  fieldcount=Integer.parseInt(p.getProperty(FIELD_COUNT_PROPERTY,FIELD_COUNT_PROPERTY_DEFAULT));  fieldlengthgenerator=ClosedEconomyWorkload.getFieldLengthGenerator(p);  double readproportion=Double.parseDouble(p.getProperty(READ_PROPORTION_PROPERTY,READ_PROPORTION_PROPERTY_DEFAULT));  double updateproportion=Double.parseDouble(p.getProperty(UPDATE_PROPORTION_PROPERTY,UPDATE_PROPORTION_PROPERTY_DEFAULT));  double insertproportion=Double.parseDouble(p.getProperty(INSERT_PROPORTION_PROPERTY,INSERT_PROPORTION_PROPERTY_DEFAULT));  double scanproportion=Double.parseDouble(p.getProperty(SCAN_PROPORTION_PROPERTY,SCAN_PROPORTION_PROPERTY_DEFAULT));  double readmodifywriteproportion=Double.parseDouble(p.getProperty(READMODIFYWRITE_PROPORTION_PROPERTY,READMODIFYWRITE_PROPORTION_PROPERTY_DEFAULT));  opcount=Integer.parseInt(p.getProperty(OPERATION_COUNT_PROPERTY,"0"));  recordcount=Integer.parseInt(p.getProperty(Client.RECORD_COUNT_PROPERTY));  totalcash=Integer.parseInt(p.getProperty(TOTAL_CASH_PROPERTY,TOTAL_CASH_PROPERTY_DEFAULT));  currenttotal=totalcash;  currentcount=recordcount;  initialvalue=totalcash / recordcount;  String requestdistrib=p.getProperty(REQUEST_DISTRIBUTION_PROPERTY,REQUEST_DISTRIBUTION_PROPERTY_DEFAULT);  int maxscanlength=Integer.parseInt(p.getProperty(MAX_SCAN_LENGTH_PROPERTY,MAX_SCAN_LENGTH_PROPERTY_DEFAULT));  String scanlengthdistrib=p.getProperty(SCAN_LENGTH_DISTRIBUTION_PROPERTY,SCAN_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT);  int insertstart=Integer.parseInt(p.getProperty(INSERT_START_PROPERTY,INSERT_START_PROPERTY_DEFAULT));  readallfields=Boolean.parseBoolean(p.getProperty(READ_ALL_FIELDS_PROPERTY,READ_ALL_FIELDS_PROPERTY_DEFAULT));  writeallfields=Boolean.parseBoolean(p.getProperty(WRITE_ALL_FIELDS_PROPERTY,WRITE_ALL_FIELDS_PROPERTY_DEFAULT));  if (p.getProperty(INSERT_ORDER_PROPERTY,INSERT_ORDER_PROPERTY_DEFAULT).compareTo("hashed") == 0) {    orderedinserts=false;  } else   if (requestdistrib.compareTo("exponential") == 0) {    double percentile=Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_PERCENTILE_PROPERTY,ExponentialGenerator.EXPONENTIAL_PERCENTILE_DEFAULT));    double frac=Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_FRAC_PROPERTY,ExponentialGenerator.EXPONENTIAL_FRAC_DEFAULT));    keychooser=new ExponentialGenerator(percentile,recordcount * frac);  } else {    orderedinserts=true;  }  keysequence=new CounterGenerator(insertstart);  validation_keysequence=new CounterGenerator(insertstart);  operationchooser=new DiscreteGenerator();  if (readproportion > 0) {    operationchooser.addValue(readproportion,"READ");  }  if (updateproportion > 0) {    operationchooser.addValue(updateproportion,"UPDATE");  }  if (insertproportion > 0) {    operationchooser.addValue(insertproportion,"INSERT");  }  if (readmodifywriteproportion > 0) {    operationchooser.addValue(readmodifywriteproportion,"READMODIFYWRITE");  }  transactioninsertkeysequence=new CounterGenerator(recordcount);  if (requestdistrib.compareTo("uniform") == 0) {    keychooser=new UniformIntegerGenerator(0,recordcount - 1);  } else   if (requestdistrib.compareTo("zipfian") == 0) {    int opcount=Integer.parseInt(p.getProperty(Client.OPERATION_COUNT_PROPERTY));    int expectednewkeys=(int)(((double)opcount) * insertproportion * 2.0);    keychooser=new ScrambledZipfianGenerator(recordcount + expectednewkeys);  } else   if (requestdistrib.compareTo("latest") == 0) {    keychooser=new SkewedLatestGenerator(transactioninsertkeysequence);  } else   if (requestdistrib.equals("hotspot")) {    double hotsetfraction=Double.parseDouble(p.getProperty(HOTSPOT_DATA_FRACTION,HOTSPOT_DATA_FRACTION_DEFAULT));    double hotopnfraction=Double.parseDouble(p.getProperty(HOTSPOT_OPN_FRACTION,HOTSPOT_OPN_FRACTION_DEFAULT));    keychooser=new HotspotIntegerGenerator(0,recordcount - 1,hotsetfraction,hotopnfraction);  } else {    throw new WorkloadException("Unknown request distribution \"" + requestdistrib + "\"");  }  fieldchooser=new UniformIntegerGenerator(0,fieldcount - 1);  if (scanlengthdistrib.compareTo("uniform") == 0) {    scanlength=new UniformIntegerGenerator(1,maxscanlength);  } else   if (scanlengthdistrib.compareTo("zipfian") == 0) {    scanlength=new ZipfianGenerator(1,maxscanlength);  } else {    throw new WorkloadException("Distribution \"" + scanlengthdistrib + "\" not allowed for scan length");  }  _measurements=Measurements.getMeasurements();}  }
class C{  public static long hash24_palindromic(long k0,long k1,byte[] data,int offset,int len){  long v0=0x736f6d6570736575L ^ k0;  long v1=0x646f72616e646f6dL ^ k1;  long v2=0x6c7967656e657261L ^ k0;  long v3=0x7465646279746573L ^ k1;  long m;  int last=(2 * len) / 8 * 8;  int idx=0;  int offset2=offset + len + len - 1;  int len8=len - (len % 8);  if (last > 0) {    while (idx < len8) {      m=UNSAFE.getLong(data,base + offset + idx);      idx+=8;      v3^=m;      v0+=v1;      v2+=v3;      v1=(v1 << 13) | v1 >>> 51;      v3=(v3 << 16) | v3 >>> 48;      v1^=v0;      v3^=v2;      v0=(v0 << 32) | v0 >>> 32;      v2+=v1;      v0+=v3;      v1=(v1 << 17) | v1 >>> 47;      v3=(v3 << 21) | v3 >>> 43;      v1^=v2;      v3^=v0;      v2=(v2 << 32) | v2 >>> 32;      v0+=v1;      v2+=v3;      v1=(v1 << 13) | v1 >>> 51;      v3=(v3 << 16) | v3 >>> 48;      v1^=v0;      v3^=v2;      v0=(v0 << 32) | v0 >>> 32;      v2+=v1;      v0+=v3;      v1=(v1 << 17) | v1 >>> 47;      v3=(v3 << 21) | v3 >>> 43;      v1^=v2;      v3^=v0;      v2=(v2 << 32) | v2 >>> 32;      v0^=m;    }{      m=(data[offset + (idx >= len ? (len - 1 - (idx % len)) : idx)] & 0xffL);      idx++;      m|=(data[offset + (idx >= len ? (len - 1 - (idx % len)) : idx)] & 0xffL) << 8;      idx++;      m|=(data[offset + (idx >= len ? (len - 1 - (idx % len)) : idx)] & 0xffL) << 16;      idx++;      m|=(data[offset + (idx >= len ? (len - 1 - (idx % len)) : idx)] & 0xffL) << 24;      idx++;      m|=(data[offset + (idx >= len ? (len - 1 - (idx % len)) : idx)] & 0xffL) << 32;      idx++;      m|=(data[offset + (idx >= len ? (len - 1 - (idx % len)) : idx)] & 0xffL) << 40;      idx++;      m|=(data[offset + (idx >= len ? (len - 1 - (idx % len)) : idx)] & 0xffL) << 48;      idx++;      m|=(data[offset + (idx >= len ? (len - 1 - (idx % len)) : idx)] & 0xffL) << 56;      idx++;      v3^=m;      v0+=v1;      v2+=v3;      v1=(v1 << 13) | v1 >>> 51;      v3=(v3 << 16) | v3 >>> 48;      v1^=v0;      v3^=v2;      v0=(v0 << 32) | v0 >>> 32;      v2+=v1;      v0+=v3;      v1=(v1 << 17) | v1 >>> 47;      v3=(v3 << 21) | v3 >>> 43;      v1^=v2;      v3^=v0;      v2=(v2 << 32) | v2 >>> 32;      v0+=v1;      v2+=v3;      v1=(v1 << 13) | v1 >>> 51;      v3=(v3 << 16) | v3 >>> 48;      v1^=v0;      v3^=v2;      v0=(v0 << 32) | v0 >>> 32;      v2+=v1;      v0+=v3;      v1=(v1 << 17) | v1 >>> 47;      v3=(v3 << 21) | v3 >>> 43;      v1^=v2;      v3^=v0;      v2=(v2 << 32) | v2 >>> 32;      v0^=m;    }    while (idx < last) {      m=Long.reverseBytes(UNSAFE.getLong(data,base + offset2 - (idx + 7)));      idx+=8;      v3^=m;      v0+=v1;      v2+=v3;      v1=(v1 << 13) | v1 >>> 51;      v3=(v3 << 16) | v3 >>> 48;      v1^=v0;      v3^=v2;      v0=(v0 << 32) | v0 >>> 32;      v2+=v1;      v0+=v3;      v1=(v1 << 17) | v1 >>> 47;      v3=(v3 << 21) | v3 >>> 43;      v1^=v2;      v3^=v0;      v2=(v2 << 32) | v2 >>> 32;      v0+=v1;      v2+=v3;      v1=(v1 << 13) | v1 >>> 51;      v3=(v3 << 16) | v3 >>> 48;      v1^=v0;      v3^=v2;      v0=(v0 << 32) | v0 >>> 32;      v2+=v1;      v0+=v3;      v1=(v1 << 17) | v1 >>> 47;      v3=(v3 << 21) | v3 >>> 43;      v1^=v2;      v3^=v0;      v2=(v2 << 32) | v2 >>> 32;      v0^=m;    }  }  m=0;  if (0 != idx) {    int i=0;    while (i < (len * 2 - idx)) {      m<<=8;      m|=data[offset + i] & 0xffL;      i++;    }  } else {    for (int i=0; i < len * 2; i++) {      m<<=8;      m|=data[offset + (i >= len ? (len - 1 - (i % len)) : i)] & 0xffL;    }  }  m|=(long)(len * 2) << 56;  v3^=m;  v0+=v1;  v2+=v3;  v1=(v1 << 13) | v1 >>> 51;  v3=(v3 << 16) | v3 >>> 48;  v1^=v0;  v3^=v2;  v0=(v0 << 32) | v0 >>> 32;  v2+=v1;  v0+=v3;  v1=(v1 << 17) | v1 >>> 47;  v3=(v3 << 21) | v3 >>> 43;  v1^=v2;  v3^=v0;  v2=(v2 << 32) | v2 >>> 32;  v0+=v1;  v2+=v3;  v1=(v1 << 13) | v1 >>> 51;  v3=(v3 << 16) | v3 >>> 48;  v1^=v0;  v3^=v2;  v0=(v0 << 32) | v0 >>> 32;  v2+=v1;  v0+=v3;  v1=(v1 << 17) | v1 >>> 47;  v3=(v3 << 21) | v3 >>> 43;  v1^=v2;  v3^=v0;  v2=(v2 << 32) | v2 >>> 32;  v0^=m;  v2^=0xff;  v0+=v1;  v2+=v3;  v1=(v1 << 13) | v1 >>> 51;  v3=(v3 << 16) | v3 >>> 48;  v1^=v0;  v3^=v2;  v0=(v0 << 32) | v0 >>> 32;  v2+=v1;  v0+=v3;  v1=(v1 << 17) | v1 >>> 47;  v3=(v3 << 21) | v3 >>> 43;  v1^=v2;  v3^=v0;  v2=(v2 << 32) | v2 >>> 32;  v0+=v1;  v2+=v3;  v1=(v1 << 13) | v1 >>> 51;  v3=(v3 << 16) | v3 >>> 48;  v1^=v0;  v3^=v2;  v0=(v0 << 32) | v0 >>> 32;  v2+=v1;  v0+=v3;  v1=(v1 << 17) | v1 >>> 47;  v3=(v3 << 21) | v3 >>> 43;  v1^=v2;  v3^=v0;  v2=(v2 << 32) | v2 >>> 32;  v0+=v1;  v2+=v3;  v1=(v1 << 13) | v1 >>> 51;  v3=(v3 << 16) | v3 >>> 48;  v1^=v0;  v3^=v2;  v0=(v0 << 32) | v0 >>> 32;  v2+=v1;  v0+=v3;  v1=(v1 << 17) | v1 >>> 47;  v3=(v3 << 21) | v3 >>> 43;  v1^=v2;  v3^=v0;  v2=(v2 << 32) | v2 >>> 32;  v0+=v1;  v2+=v3;  v1=(v1 << 13) | v1 >>> 51;  v3=(v3 << 16) | v3 >>> 48;  v1^=v0;  v3^=v2;  v0=(v0 << 32) | v0 >>> 32;  v2+=v1;  v0+=v3;  v1=(v1 << 17) | v1 >>> 47;  v3=(v3 << 21) | v3 >>> 43;  v1^=v2;  v3^=v0;  v2=(v2 << 32) | v2 >>> 32;  return v0 ^ v1 ^ v2^ v3;}  }
class C{  public CompositeCounter wrapCounter(MonitoredCounter templateCounter){  List<Counter> subCounters=Lists.<Counter>newArrayList(templateCounter);  subCounters.addAll(getSubCounters(templateCounter.getName(),templateCounter.getDescription(),templateCounter.getUnit()));  return new CompositeCounter(subCounters);}  }
class C{  public void writeToParcel(Parcel dest,int flags){  dest.writeString(mServiceName);  dest.writeString(mServiceType);  dest.writeParcelable(mTxtRecord,flags);  if (mHost != null) {    dest.writeByte((byte)1);    dest.writeByteArray(mHost.getAddress());  } else {    dest.writeByte((byte)0);  }  dest.writeInt(mPort);}  }
class C{  @Override public void run(){  boolean addedListener=false;  EntryLogger.setSource(serverId,"RI");  try {    this.system.addDisconnectListener(this);    addedListener=true;    if (!waitForCache()) {      logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientUpdater_0_NO_CACHE_EXITING,this));      return;    }    processMessages();  } catch (  CancelException e) {    return;  } finally {    if (addedListener) {      this.system.removeDisconnectListener(this);    }    this.close();    EntryLogger.clearSource();  }}  }
class C{  void onDrag(float elasticOffset,float elasticOffsetPixels,float rawOffset,float rawOffsetPixels){}  }
class C{  public void addVector(AverageVector av){  vectorList.add(av);}  }
class C{  static void stop(){  if (isStarted) {    stopRefreshTimer();    registry.stop();    registry=null;    releaseMBeanServer();    isStarted=false;  }}  }
class C{  public void testNullChecking(){  ArrayNode a1=JsonNodeFactory.instance.arrayNode();  ArrayNode a2=JsonNodeFactory.instance.arrayNode();  a1.addAll(a2);  assertEquals(0,a1.size());  assertEquals(0,a2.size());  a2.addAll(a1);  assertEquals(0,a1.size());  assertEquals(0,a2.size());}  }
class C{  public ResourceImpl(ResourceInfo resourceInfo,String contentType,long initialTime,long maxAge){  this.resourceInfo=resourceInfo;  super.setResourceName(resourceInfo.getName());  super.setLibraryName(resourceInfo.getLibraryInfo() != null ? resourceInfo.getLibraryInfo().getName() : null);  super.setContentType(contentType);  this.initialTime=initialTime;  this.maxAge=maxAge;}  }
class C{  public void incResultsReceived(){  this._stats.incInt(_resultsReceived,1);}  }
class C{  public void turnQuotaOff(String volume){  NaElement elem=new NaElement("quota-off");  elem.addNewChild("volume",volume);  try {    server.invokeElem(elem);  } catch (  Exception e) {    throw createError(elem,e);  }}  }
class C{  public MatrixStack(MatrixStack clone){  this.stack=(Stack<RealMatrix>)clone.stack.clone();  this.current=clone.current.copy();}  }
class C{  public boolean hitExecutionNeeded(){  return hitExecutionNeeded;}  }
class C{  @Override protected void doAction(){  File file=chooseFile();  openFile(file);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.312 -0500",hash_original_method="DCC3E518C2D0EED9BFA3E6DD970895A0",hash_generated_method="36D843F1C66F77DDBDC244F3701C2300") public String replaceAll(String replacement){  reset();  StringBuffer buffer=new StringBuffer(input.length());  while (find()) {    appendReplacement(buffer,replacement);  }  return appendTail(buffer).toString();}  }
class C{  public void execute(@NotNull HgFile... hgFiles){  execute(Arrays.asList(hgFiles));}  }
class C{  private static final void run(Runnable runnable){  runnable.run();}  }
class C{  public float eval(float u){  return (((d * u) + c) * u + b) * u + a;}  }
class C{  public int nextInt(int n,double p){  if (n * Math.min(p,1 - p) <= 0.0)   throw new IllegalArgumentException();  return generateBinomial(n,p);}  }
class C{  public NewConsoleAction(Workspace workspace){  super("New Console",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("Terminal2.png"));  putValue(SHORT_DESCRIPTION,"New console");}  }
class C{  public boolean isResolvingPrefix(){  return resolvingPrefix;}  }
class C{  public void run(){  try {    ConnectionManager connectionManager=CimAdapterTest.getConnectionManager();    connectionManager.shutdown();    System.exit(0);  } catch (  Exception e) {    s_logger.error(e.getMessage(),e);  }}  }
class C{  public void testRecognizePortRestrictedCone() throws Exception {  Response testIResponse1=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse2=null;  Response testIResponse3=MessageFactory.create3489BindingResponse(mappedClientAddress,responseServerAddress,responseServerAddress);  Response testIResponse4=null;  responseServer.addMessage(testIResponse1);  responseServer.addMessage(testIResponse2);  responseServer.addMessage(testIResponse3);  responseServer.addMessage(testIResponse4);  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.PORT_RESTRICTED_CONE_NAT);  expectedReturn.setPublicAddress(mappedClientAddress);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for" + " a no-udp environment.",expectedReturn,actualReturn);}  }
class C{  public BasicPage headerTypeface(String typefacePath){  this.headerTypefacePath=typefacePath;  return this;}  }
class C{  public final ASTNode createMoveTarget(ASTNode node){  return createTargetNode(node,true);}  }
class C{  @SuppressWarnings("unchecked") protected GenericServiceAPIResponseEntity<String> postEntitiesWithService(String resourceURL,List<? extends TaggedLogAPIEntity> entities,String serviceName) throws JsonMappingException, JsonGenerationException, IOException {  final String json=marshall(entities);  final WebResource r=getWebResource(resourceURL);  return putAuthHeaderIfNeeded(r.queryParam(SERVICE_NAME,serviceName).accept(DEFAULT_MEDIA_TYPE)).header(CONTENT_TYPE,DEFAULT_HTTP_HEADER_CONTENT_TYPE).post(GenericServiceAPIResponseEntity.class,json);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:34.075 -0500",hash_original_method="5F18B995A8D5126079C876CBB8B37FF8",hash_generated_method="9B939A32BB270F981CC6D393026C6794") private long scheduleReadyPeriodicSyncs(){  final boolean backgroundDataUsageAllowed=getConnectivityManager().getBackgroundDataSetting();  long earliestFuturePollTime=Long.MAX_VALUE;  if (!backgroundDataUsageAllowed || !mSyncStorageEngine.getMasterSyncAutomatically()) {    return earliestFuturePollTime;  }  final long nowAbsolute=System.currentTimeMillis();  ArrayList<SyncStorageEngine.AuthorityInfo> infos=mSyncStorageEngine.getAuthorities();  for (  SyncStorageEngine.AuthorityInfo info : infos) {    if (!ArrayUtils.contains(mAccounts,info.account)) {      continue;    }    if (!mSyncStorageEngine.getSyncAutomatically(info.account,info.authority)) {      continue;    }    if (mSyncStorageEngine.getIsSyncable(info.account,info.authority) == 0) {      continue;    }    SyncStatusInfo status=mSyncStorageEngine.getOrCreateSyncStatus(info);    for (int i=0, N=info.periodicSyncs.size(); i < N; i++) {      final Bundle extras=info.periodicSyncs.get(i).first;      final Long periodInSeconds=info.periodicSyncs.get(i).second;      final long lastPollTimeAbsolute=status.getPeriodicSyncTime(i);      final long nextPollTimeAbsolute=lastPollTimeAbsolute > nowAbsolute ? nowAbsolute : lastPollTimeAbsolute + periodInSeconds * 1000;      if (nextPollTimeAbsolute <= nowAbsolute) {        final Pair<Long,Long> backoff=mSyncStorageEngine.getBackoff(info.account,info.authority);        final RegisteredServicesCache.ServiceInfo<SyncAdapterType> syncAdapterInfo=mSyncAdapters.getServiceInfo(SyncAdapterType.newKey(info.authority,info.account.type));        if (syncAdapterInfo == null) {          continue;        }        scheduleSyncOperation(new SyncOperation(info.account,SyncStorageEngine.SOURCE_PERIODIC,info.authority,extras,0,backoff != null ? backoff.first : 0,mSyncStorageEngine.getDelayUntilTime(info.account,info.authority),syncAdapterInfo.type.allowParallelSyncs()));        status.setPeriodicSyncTime(i,nowAbsolute);      } else {        if (nextPollTimeAbsolute < earliestFuturePollTime) {          earliestFuturePollTime=nextPollTimeAbsolute;        }      }    }  }  if (earliestFuturePollTime == Long.MAX_VALUE) {    return Long.MAX_VALUE;  }  return SystemClock.elapsedRealtime() + ((earliestFuturePollTime < nowAbsolute) ? 0 : (earliestFuturePollTime - nowAbsolute));}  }
class C{  private synchronized int deserializeProgressive(){  final Context content=Status.getAppContext();  int progessive=0;  try {    final FileInputStream fos=content.openFileInput(PROG_FILENAME);    final byte[] prog=new byte[4];    fos.read(prog);    progessive=ByteArray.byteArrayToInt(prog,0);    fos.close();  } catch (  final IOException e) {    if (Cfg.DEBUG) {      Check.log(TAG + " Warn: " + e.toString());    }  }  return progessive;}  }
class C{  private static List<String> computeDynamicVMArgs(IJavaProject javaProject){  ArrayList<String> out=new ArrayList<String>();  String devJarPath=maybeGetDevJarPath(javaProject);  if (devJarPath.length() > 0) {    out.add("-Dgwt.devjar=\"" + devJarPath + '"');  }  return out;}  }
class C{  public boolean removeCommunity(String comm){  if (!commList.contains(comm))   return false;  commList.removeElement(comm);  return true;}  }
class C{  public OperatorFactory(){  super();}  }
class C{  public final boolean exists(){  return config != null;}  }
class C{  public UserConfig create(UserConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/create-user",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    UserConfig user=new UserConfig();    user.parseXML(root);    this.user=user;    return user;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public static int rgbFromCmyk(float[] cmyk){  float cyan=cmyk[0];  float magenta=cmyk[1];  float yellow=cmyk[2];  float black=cmyk[3];  int red=(int)((1.0f - Math.min(1.0f,cyan * (1.0f - black) + black)) * 255);  int green=(int)((1.0f - Math.min(1.0f,magenta * (1.0f - black) + black)) * 255);  int blue=(int)((1.0f - Math.min(1.0f,yellow * (1.0f - black) + black)) * 255);  return ((0xff & red) << 16) + ((0xff & green) << 8) + (0xff & blue);}  }
class C{  @Override public String generateURL(CategoryDataset dataset,int series,int category){  String url=this.prefix;  Comparable seriesKey=dataset.getRowKey(series);  Comparable categoryKey=dataset.getColumnKey(category);  boolean firstParameter=!url.contains("?");  url+=firstParameter ? "?" : "&amp;";  try {    url+=this.seriesParameterName + "=" + URLEncoder.encode(seriesKey.toString(),"UTF-8");    url+="&amp;" + this.categoryParameterName + "="+ URLEncoder.encode(categoryKey.toString(),"UTF-8");  } catch (  UnsupportedEncodingException ex) {    throw new RuntimeException(ex);  }  return url;}  }
class C{  private double ARAMm_Update_Weights(double[] data,double[] labels,int category){  double weightChange=0;  sweightsA[category]=0;  for (int i=0; i < snumFeatures; i++) {    double wa=(Double)weightsA[category].get(i);    if (data[i] < wa) {      wa=(learningRate * data[i]) + (1 - learningRate) * wa;      weightsA[category].put(i,wa);    }    sweightsA[category]+=wa;  }  for (int i=snumFeatures; i < numFeatures; i++) {    double wa=1 - (Double)weightsA[category].get(i);    double da=1 - data[i - snumFeatures];    if (da < wa) {      wa=(learningRate * da) + (1 - learningRate) * wa;      weightsA[category].put(i,1 - wa);    }    sweightsA[category]+=wa;  }  for (int i=0; i < snumClasses; i++) {    double wb=(Double)weightsB[category].get(i);    if (weightblearnmethod == 0) {      weightsB[category].put(i,labels[i] + wb);      weightChange=1;    } else {      if (labels[i] < wb) {        weightsB[category].put(i,(learningRate * labels[i]) + (1 - learningRate) * wb);        weightChange=1;      }    }  }  return weightChange;}  }
class C{  private void validateBusinessObjectDefinitionColumnCreateRequest(BusinessObjectDefinitionColumnCreateRequest request){  Assert.notNull(request,"A business object definition column create request must be specified.");  validateBusinessObjectDefinitionColumnKey(request.getBusinessObjectDefinitionColumnKey());  Assert.hasText(request.getSchemaColumnName(),"A schema column name must be specified.");  request.setSchemaColumnName(request.getSchemaColumnName().trim());}  }
class C{  public DijkstraDistance(Hypergraph<V,E> g,Function<? super E,? extends Number> nev,boolean cached){  this.g=g;  this.nev=nev;  this.sourceMap=new HashMap<V,SourceData>();  this.cached=cached;  this.max_distance=Double.POSITIVE_INFINITY;  this.max_targets=Integer.MAX_VALUE;}  }
class C{  public boolean isZero(){  return signum() == 0;}  }
class C{  public final String levelDataToString(){  return "Level: " + getLevel() + "\n"+ "LevelParameters: "+ getLevelParams()+ "\n"+ "LevelConstraints: "+ getLevelConstraints()+ "\n"+ "ArgLevelConstraints: "+ getArgLevelConstraints()+ "\n"+ "ArgLevelParams: "+ getArgLevelParams()+ "\n";}  }
class C{  @Override protected RubySassEngine newEngine(){  final RubySassEngine engine=super.newEngine();  engine.addRequire(BOURBON_GEM_REQUIRE);  return engine;}  }
class C{  private Set<SearchIndexEntry> readExistingEntries(DBTransaction transaction) throws SQLException {  Set<SearchIndexEntry> res=Sets.newHashSet();  String query="SELECT id, searchterm, entitytype, entityname, searchscore FROM searchindex";  ResultSet resultSet=transaction.query(query,null);  while (resultSet.next()) {    res.add(new SearchIndexEntry(resultSet.getString(2),resultSet.getString(3).charAt(0),resultSet.getString(4),resultSet.getInt(5),resultSet.getInt(1)));  }  return res;}  }
class C{  public CLIATM6(){  super();  techLevel.put(3070,TechConstants.T_CLAN_EXPERIMENTAL);  this.name="iATM 6";  this.setInternalName("CLiATM6");  this.addLookupName("Clan iATM-6");  this.heat=4;  this.rackSize=6;  this.minimumRange=4;  this.shortRange=5;  this.mediumRange=10;  this.longRange=15;  this.extremeRange=20;  this.tonnage=3.5f;  this.criticals=3;  this.bv=165;  this.cost=250000;  this.shortAV=12;  this.medAV=12;  this.maxRange=RANGE_MED;  introDate=3070;  availRating=new int[]{RATING_X,RATING_X,RATING_F};  techRating=RATING_F;}  }
class C{  public T caseExecutionExit(ExecutionExit object){  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.071 -0400",hash_original_method="55FDC064636609C07EA6D352B59B7C90",hash_generated_method="76BDF28D6E929F021A1122FAA7735C20") @Override public void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);  mFragments.dispatchConfigurationChanged(newConfig);}  }
class C{  public String toString(){  return print("");}  }
class C{  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {  ois.defaultReadObject();  int size=ois.readInt();  index=new ConcurrentHashIndex<>(size);  for (int i=0; i < size; ++i) {    index.add(ois.readUTF());  }}  }
class C{  public PutIndexedScriptRequest opType(IndexRequest.OpType opType){  this.opType=opType;  return this;}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  public void onResult(UUID nodeId){  if (log.isDebugEnabled())   log.debug("Received deferred DHT atomic update future result [nodeId=" + nodeId + ']');  registerResponse(nodeId);}  }
class C{  public static List convertClassesToClassNames(List classes){  if (classes == null) {    return null;  }  List classNames=new ArrayList(classes.size());  for (Iterator it=classes.iterator(); it.hasNext(); ) {    Class cls=(Class)it.next();    if (cls == null) {      classNames.add(null);    } else {      classNames.add(cls.getName());    }  }  return classNames;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  float progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (data[col] < z) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress(label,(int)progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ParameterTypeProcessLocation(String key,String description,boolean optional){  super(key,description,optional);}  }
class C{  public Item(CharSequence text,String htmlText){  mText=text;  mHtmlText=htmlText;  mIntent=null;  mUri=null;}  }
class C{  private static void printUsage(){  String lSep=System.getProperty("line.separator");  StringBuffer msg=new StringBuffer();  msg.append("java -jar scheme2ddl.jar [-url ] [-o] [-s]" + lSep);  msg.append("util for export oracle schema from DB to DDL scripts (file per object)" + lSep);  msg.append("internally call to dbms_metadata.get_ddl " + lSep);  msg.append("more config options in scheme2ddl.config.xml " + lSep);  msg.append("Options: " + lSep);  msg.append("  -help, -h                  print this message" + lSep);  msg.append("  -url,                      DB connection URL" + lSep);  msg.append("                             example: scott/tiger@localhost:1521:ORCL" + lSep);  msg.append("  -o, --output,              output dir" + lSep);  msg.append("  -p, --parallel,            number of parallel thread (default 4)" + lSep);  msg.append("  -s, --schemas,             a comma separated list of schemas for processing" + lSep);  msg.append("                             (works only if connected to oracle as sysdba)" + lSep);  msg.append("  -c, --config,              path to scheme2ddl config file (xml)" + lSep);  msg.append("  -f, --filter,              filter for specific DDL objects" + lSep);  msg.append("                             every LIKE wildcard can be used" + lSep);  msg.append("  -tf, --type-filter,        filter for specific DDL object types" + lSep);  msg.append("  -tfm, --type-filtermode,   mode for type filter: include(default) or exclude" + lSep);  msg.append("  --stop-on-warning,         stop on getting DDL error (skip by default)" + lSep);  msg.append("  -rsv,                      replace actual sequence values with 1 " + lSep);  msg.append("  --replace-sequence-values, " + lSep);  msg.append("  -tc,--test-connection,     test db connection available" + lSep);  msg.append("  -version,                  print version info and exit" + lSep);  System.out.println(msg.toString());}  }
class C{  @Override public boolean equals(Object other){  if (other == null || other.getClass() != this.getClass()) {    return false;  }  DOMNodeElementTuple otherDOMNodeElementTuple=DOMNodeElementTuple.class.cast(other);  boolean result=true;  result&=this.localName.equals(otherDOMNodeElementTuple.getLocalName());  result&=this.namespaceURI.equals(otherDOMNodeElementTuple.getNamespaceURI());  return result;}  }
class C{  public boolean useLayoutEditorTurnouts(SignalMast destination){  if (!destList.containsKey(destination)) {    return false;  }  return destList.get(destination).useLayoutEditorTurnouts();}  }
class C{  public static byte[] readFully(InputStream in) throws IOException {  try {    return readFullyNoClose(in);  }  finally {    in.close();  }}  }
class C{  public String forceGetValueAsString(){  if (mValue == null) {    return "";  } else   if (mValue instanceof byte[]) {    if (mDataType == TYPE_ASCII) {      return new String((byte[])mValue,US_ASCII);    } else {      return Arrays.toString((byte[])mValue);    }  } else   if (mValue instanceof long[]) {    if (((long[])mValue).length == 1) {      return String.valueOf(((long[])mValue)[0]);    } else {      return Arrays.toString((long[])mValue);    }  } else   if (mValue instanceof Object[]) {    if (((Object[])mValue).length == 1) {      Object val=((Object[])mValue)[0];      if (val == null) {        return "";      } else {        return val.toString();      }    } else {      return Arrays.toString((Object[])mValue);    }  } else {    return mValue.toString();  }}  }
class C{  void deleteConditionalPressed(String sName){  if (_curConditional == null) {    return;  }  if (sName == null) {    sName=_curConditional.getSystemName();  }  _showReminder=true;  _curConditional=null;  numConditionals--;  String[] msgs=_curLogix.deleteConditional(sName);  if (msgs != null) {    javax.swing.JOptionPane.showMessageDialog(editLogixFrame,java.text.MessageFormat.format(rbx.getString("Error11"),(Object[])msgs),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);  }  cancelConditionalPressed(null);  conditionalTableModel.fireTableRowsDeleted(conditionalRowNumber,conditionalRowNumber);  if (numConditionals < 1 && !_suppressReminder) {    javax.swing.JOptionPane.showMessageDialog(editLogixFrame,rbx.getString("Warn1"),Bundle.getMessage("WarningTitle"),javax.swing.JOptionPane.WARNING_MESSAGE);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected GridSpiStartStopAbstractTest(){  super(false);}  }
class C{  protected ShippingOrderPositionSplit(){  super();}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  @Override public void close() throws IOException {  buf=null;  InputStream localIn=in;  in=null;  if (localIn != null) {    localIn.close();  }}  }
class C{  public Vector(int capacity,int capacityIncrement){  if (capacity < 0) {    throw new IllegalArgumentException("capacity < 0: " + capacity);  }  elementData=newElementArray(capacity);  elementCount=0;  this.capacityIncrement=capacityIncrement;}  }
class C{  void parseNewick(String sNewick) throws Exception {  m_sNewick=sNewick;  int i=m_sNewick.indexOf('(');  if (i > 0) {    m_sNewick=m_sNewick.substring(i);  }  System.err.println(m_sNewick);  m_tree=parseNewick2(m_sNewick);  System.err.println(m_tree.toString());  m_nLeafs=positionLeafs(m_tree,0);  positionRest(m_tree);  m_fHeight=positionHeight(m_tree,0);}  }
class C{  @Override public void onAccessibilityEvent(AccessibilityEvent event){  if (!mTextToSpeechInitialized) {    Log.e(LOG_TAG,"Text-To-Speech engine not ready.  Bailing out.");    return;  }  AccessibilityNodeInfo source=event.getSource();  if (source == null) {    return;  }  AccessibilityNodeInfo rowNode=getListItemNodeInfo(source);  if (rowNode == null) {    return;  }  AccessibilityNodeInfo labelNode=rowNode.getChild(0);  if (labelNode == null) {    rowNode.recycle();    return;  }  AccessibilityNodeInfo completeNode=rowNode.getChild(1);  if (completeNode == null) {    rowNode.recycle();    return;  }  if (rowNode.getChildCount() < 2 || !rowNode.getChild(1).isCheckable()) {    rowNode.recycle();    return;  }  CharSequence taskLabel=labelNode.getText();  final boolean isComplete=completeNode.isChecked();  String completeStr;  if (isComplete) {    completeStr=getString(R.string.task_complete);  } else {    completeStr=getString(R.string.task_not_complete);  }  String taskStr=getString(R.string.task_complete_template,taskLabel,completeStr);  StringBuilder utterance=new StringBuilder(taskStr);  final int records=event.getRecordCount();  for (int i=0; i < records; i++) {    AccessibilityRecord record=event.getRecord(i);    CharSequence contentDescription=record.getContentDescription();    if (!TextUtils.isEmpty(contentDescription)) {      utterance.append(SEPARATOR);      utterance.append(contentDescription);    }  }  mTts.speak(utterance.toString(),TextToSpeech.QUEUE_FLUSH,null);  Log.d(LOG_TAG,utterance.toString());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore2.class,args);}  }
class C{  public void addAttribute(String pKey,String pValue){  fAttributes.put(pKey,pValue);}  }
class C{  private InputPropertiesImpl(InputPropertiesBuilder builder){  super(builder);  this.expectType=builder.expectType;}  }
class C{  public int size(){  return 4;}  }
class C{  private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  int delta;  if (childCount > 0) {    if (!mStackFromBottom) {      final int firstTop=getScrollChildTop();      delta=firstTop - mListPadding.top;      if (mFirstPosition != 0) {        delta-=mDividerHeight;      }      if (delta < 0) {        delta=0;      }    } else {      final int lastBottom=getScrollChildBottom();      delta=lastBottom - (getHeight() - mListPadding.bottom);      if (mFirstPosition + childCount < mItemCount) {        delta+=mDividerHeight;      }      if (delta > 0) {        delta=0;      }    }    if (delta != 0) {      tryOffsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.409 -0500",hash_original_method="45A2D96003EBC85CF21133EEF592859F",hash_generated_method="4248ED5861E04328D96C1D2507E64617") protected boolean hasAlert(){  return (alert[0] != 0);}  }
class C{  public boolean minValue(float val,float minVal){  return GenericValidator.minValue(val,minVal);}  }
class C{  public MultiInputStream(Iterator<? extends ByteSource> it) throws IOException {  this.it=checkNotNull(it);  advance();}  }
class C{  public StopWatch keepTaskList(boolean keepTaskList){  this.keepTaskList=keepTaskList;  return this;}  }
class C{  public static boolean isSynthetic(int flags){  return (flags & AccSynthetic) != 0;}  }
class C{  public boolean isAccessibleRowSelected(int r){  return false;}  }
class C{  @Override protected WXFrameLayout initComponentHostView(@NonNull Context context){  if (isSticky()) {    WXFrameLayout view=new WXFrameLayout(context);    mRealView=new WXFrameLayout(context);    view.addView(mRealView);    return view;  } else {    WXFrameLayout view=new WXFrameLayout(context);    mRealView=view;    return view;  }}  }
class C{  public JSONWriter value(boolean b) throws JSONException {  return this.append(b ? "true" : "false");}  }
class C{  public boolean isPeriod(){  String pt=getPAPeriodType();  if (pt == null)   return false;  return PAPERIODTYPE_Period.equals(pt);}  }
class C{  public BERSequence(){}  }
class C{  public static XmlSerializer createSerializer(){  try {    return getParserFactory().newSerializer();  } catch (  XmlPullParserException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  private List<GenericAuditEntity> buildAuditEntities(String operation,List<? extends TaggedLogAPIEntity> entities,List<String> encodedRowKeys,EntityDefinition entityDefinition){  String serviceName=entityDefinition.getService();  long timestamp=System.currentTimeMillis() / 1000L;  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();  String userID=null != authentication.getName() ? authentication.getName() : "data not available";  List<GenericAuditEntity> auditEntities=new ArrayList<GenericAuditEntity>();  GenericAuditEntity auditEntity=new GenericAuditEntity();  if (null != entities && 0 != entities.size()) {    Map<String,String> auditTags;    for (    TaggedLogAPIEntity entity : entities) {      auditTags=entity.getTags();      auditTags.put(AUDIT_COLUMN_SERVICE_NAME,serviceName);      auditTags.put(AUDIT_COLUMN_USER_ID,userID);      auditTags.put(AUDIT_COLUMN_OPERATION,operation);      auditTags.put(AUDIT_COLUMN_TIMESTAMP,timestamp + "");      auditEntity=new GenericAuditEntity();      auditEntity.setTags(auditTags);      auditEntities.add(auditEntity);    }    return auditEntities;  } else   if (null != encodedRowKeys && 0 != encodedRowKeys.size()) {    Map<String,String> auditTags;    for (    String encodedRowKey : encodedRowKeys) {      auditTags=new HashMap<String,String>();      auditTags.put("encodedRowKey",encodedRowKey);      auditTags.put(AUDIT_COLUMN_SERVICE_NAME,serviceName);      auditTags.put(AUDIT_COLUMN_USER_ID,userID);      auditTags.put(AUDIT_COLUMN_OPERATION,operation);      auditTags.put(AUDIT_COLUMN_TIMESTAMP,timestamp + "");      auditEntity=new GenericAuditEntity();      auditEntity.setTags(auditTags);      auditEntities.add(auditEntity);    }    return auditEntities;  } else {    return null;  }}  }
class C{  public static boolean isVisible(IMember member,IPackageFragment pack) throws JavaModelException {  int type=member.getElementType();  if (type == IJavaElement.INITIALIZER || (type == IJavaElement.METHOD && member.getElementName().startsWith("<"))) {    return false;  }  int otherflags=member.getFlags();  IType declaringType=member.getDeclaringType();  if (Flags.isPublic(otherflags) || (declaringType != null && isInterfaceOrAnnotation(declaringType))) {    return true;  } else   if (Flags.isPrivate(otherflags)) {    return false;  }  IPackageFragment otherpack=(IPackageFragment)member.getAncestor(IJavaElement.PACKAGE_FRAGMENT);  return (pack != null && otherpack != null && isSamePackage(pack,otherpack));}  }
class C{  public Iterator<E> iterator(){  return m.navigableKeySet().iterator();}  }
class C{  public PasswordEditText(@NonNull final Context context,@Nullable final AttributeSet attributeSet){  super(context,attributeSet);  initialize(attributeSet);}  }
class C{  public JSONObject put(String key,long value) throws JSONException {  this.put(key,new Long(value));  return this;}  }
class C{  public V call(){  final Object[] NOARGS=EMPTY_OBJECT_ARRAY;  return call(NOARGS);}  }
class C{  public Abs(){  super("abs",1);}  }
class C{  static boolean nonZeroDroppedBits(int numberOfBits,int[] digits){  int intCount=numberOfBits >> 5;  int bitCount=numberOfBits & 31;  int i;  for (i=0; (i < intCount) && (digits[i] == 0); i++) {    ;  }  return ((i != intCount) || (digits[i] << (32 - bitCount) != 0));}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public Builder prefixRange(byte[] prefix){  Preconditions.checkNotNull(prefix,"prefix cannot be null");  if (reverse) {    Pair<byte[],byte[]> pair=createNamesForReversePrefixScan(prefix);    this.startInclusive=pair.lhSide;    this.endExclusive=pair.rhSide;  } else {    this.startInclusive=prefix.clone();    this.endExclusive=RangeRequests.createEndNameForPrefixScan(prefix);  }  return this;}  }
class C{  private byte[] convertPasswordToKey(String password){  return convertPasswordToKey(password.getBytes());}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:42.637 -0500",hash_original_method="BB56F6666E3E1FB5BE1E06064B4DC5BD",hash_generated_method="1CD9D56F7E510AAFDDF684F8D4CA4A37") @Override public synchronized int read(){  return pos < count ? buf[pos++] & 0xFF : -1;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void appendAndClearPending(String s){  output.append(s);  complete=current;}  }
class C{  public BaseResult deleteInstance(String instanceId,String organizationId,String subscriptionId,User requestingUser){  ServiceInstance instance=null;  try {    instance=instanceDAO.getInstance(instanceId,subscriptionId,organizationId);  } catch (  ServiceInstanceNotFoundException e) {    logger.info("Instance to be deleted '{}' doesn't exist any more.",instanceId);    return provResultHelper.getOKResult(BaseResult.class);  }  if (instance.isDeleted()) {    logger.info("Instance to be deleted '{}' is already marked for deletion.",instanceId);    return provResultHelper.getOKResult(BaseResult.class);  }  try {    return deleteInstance(instance,requestingUser);  } catch (  Exception e) {    return provResultHelper.getErrorResult(BaseResult.class,e,getLocale(requestingUser),instance,instanceId);  }}  }
class C{  public Matrix4x3d translationRotateTowards(Vector3dc pos,Vector3dc dir,Vector3dc up){  return translationRotateTowards(pos.x(),pos.y(),pos.z(),dir.x(),dir.y(),dir.z(),up.x(),up.y(),up.z());}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Pure public boolean isBound(){  return bound;}  }
class C{  private void precise(Node tree){  preciseOutput(Nodes.render(tree));  preciseOutput(Nodes.render(tree,MarkupRenderMode.HTML));  preciseOutput(Nodes.render(tree,MarkupRenderMode.XML));}  }
class C{  public double re(){  return re;}  }
class C{  @ResponseBody @RequestMapping(value="/group_members",method=RequestMethod.POST) public HttpResponseTemp<?> addGroupMember(@RequestBody UserGroupMap userGroup){  int userId=AuthUtil.getUserId();  userGroup.setUpdateTime(System.currentTimeMillis());  return userGroupService.addGroupMember(userId,userGroup);}  }
class C{  public MediaPrintableArea(float x,float y,float w,float h,int units){  if ((x < 0.0) || (y < 0.0) || (w <= 0.0)|| (h <= 0.0)|| (units < 1)) {    throw new IllegalArgumentException("0 or negative value argument");  }  this.x=(int)(x * units + 0.5f);  this.y=(int)(y * units + 0.5f);  this.w=(int)(w * units + 0.5f);  this.h=(int)(h * units + 0.5f);}  }
class C{  public KnownArgumentsInfo(@NotNull final Collection<Argument> arguments){  this(arguments,arguments.size(),arguments.size());}  }
class C{  public static Object byteToObject(byte[] bytes) throws IOException, ClassNotFoundException {  ObjectInputStream ois=null;  try {    ois=new ObjectInputStream(new ByteArrayInputStream(bytes));    return ois.readObject();  }  finally {    IOUtils.close(ois);  }}  }
class C{  public Anonymous_derivedAttribute_2_ createAnonymous_derivedAttribute_2_(){  Anonymous_derivedAttribute_2_Impl anonymous_derivedAttribute_2_=new Anonymous_derivedAttribute_2_Impl();  return anonymous_derivedAttribute_2_;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public void putWithVersion(RowCursor cursor){  _tableService.put(cursor,PutType.PUT);}  }
class C{  public void testBFS_undirected() throws Exception {  final SmallGraphProblem p=setupSmallGraphProblem();  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final SailConnection cxn=getGraphFixture().getSail().getConnection();    try {      final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(cxn);      final IGASContext<BFS.VS,BFS.ES,Void> gasContext=gasEngine.newGASContext(graphAccessor,new BFS());      final IGASState<BFS.VS,BFS.ES,Void> gasState=gasContext.getGASState();      gasState.setFrontier(gasContext,p.getFoafPerson());      gasContext.setTraversalDirection(TraversalDirectionEnum.Undirected);      gasContext.call();      assertEquals(0,gasState.getState(p.getFoafPerson()).depth());      assertEquals(null,gasState.getState(p.getFoafPerson()).predecessor());      assertEquals(1,gasState.getState(p.getMike()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getMike()).predecessor());      assertEquals(1,gasState.getState(p.getBryan()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getBryan()).predecessor());      assertEquals(1,gasState.getState(p.getMartyn()).depth());      assertEquals(p.getFoafPerson(),gasState.getState(p.getMartyn()).predecessor());    }  finally {      try {        cxn.rollback();      }  finally {        cxn.close();      }    }  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardCategoryItemLabelGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  public int to(){  return w;}  }
class C{  public void testIsRelCanonicalPageWithRelCanonical(){  System.out.println("isRelCanonicalPageWithRelCanonical");  SSP ssp=new MockSSP();  ssp.setURI(URL);  StringBuilder strb=new StringBuilder();  strb.append("<html>");  strb.append("<head>");  strb.append("<link rel=\"canonical\" href=\"http://test.asqatasun.org/lol.html\" />");  strb.append("</head>");  strb.append("</html>");  ssp.setSource(strb.toString());  CrawlerImpl instance=new CrawlerImpl();  boolean result=instance.isRelCanonicalPage(ssp);  assertTrue(result);}  }
class C{  public void add(AnnotatedMethod methodToInsert) throws ProcessingException {  String methodName=methodToInsert.getQualifiedMethodName();  if (methodsMap.containsKey(methodName)) {    throw new ProcessingException(methodToInsert.getElement(),"Conflict: The method \"%1$s\" already exists in %2$s" + CLASS_SUFFIX + "."+ "class"+ "\nThe checked method in conflict is %1$s( %3$s )."+ "\nWe cannot process overloaded methods, so please add the "+ "\"named\" attribute in the annotated method like "+ "RepositoryCache(named = \"%1$s_2\").",methodName,this.simpleClassName,methodToInsert.getExecutableType().getParameterTypes().toString());  }  methodsMap.put(methodName,methodToInsert);}  }
class C{  public void testReadAllBytesOnProcFS() throws IOException {  if (System.getProperty("os.name").equals("Linux")) {    Path statFile=Paths.get("/proc/self/stat");    byte[] data=Files.readAllBytes(statFile);    assertTrue(data.length > 0,"Files.readAllBytes('" + statFile + "') failed to read");  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ASSOCIATION_END___MULTIPLICITY_1:    return getMultiplicity_1();case UmplePackage.ASSOCIATION_END___TYPE_1:  return getType_1();case UmplePackage.ASSOCIATION_END___ROLE_NAME_1:return getRoleName_1();case UmplePackage.ASSOCIATION_END___IS_SORTED_1:return getIsSorted_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void preRestart(Throwable reason,Option<Object> message){  if (FluxError.class.isAssignableFrom(reason.getClass()) && TaskAndEvents.class.isAssignableFrom(message.get().getClass())) {    FluxError fluxError=(FluxError)reason;    TaskAndEvents taskAndEvent=(TaskAndEvents)message.get();    taskAndEvent.setCurrentRetryCount(fluxError.getExecutionContextMeta().getAttemptedNoOfRetries() + 1);    fluxRuntimeConnector.incrementExecutionRetries(taskAndEvent.getStateMachineId(),taskAndEvent.getTaskId());    getContext().system().scheduler().scheduleOnce(FiniteDuration.create(1,TimeUnit.SECONDS),getSelf(),taskAndEvent,getContext().system().dispatcher(),null);  }}  }
class C{  public void configure(){  NceTrafficController tc=new NceTrafficController();  this.getSystemConnectionMemo().setNceTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  if (getOptionState(option2Name).equals(getOptionChoices(option2Name)[1])) {    if (getOptionState(option1Name).equals(getOptionChoices(option1Name)[4])) {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_SB5);      tc.setCmdGroups(NceTrafficController.CMDS_MEM | NceTrafficController.CMDS_AUI_READ | NceTrafficController.CMDS_OPS_PGM| NceTrafficController.CMDS_USB| NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_1_65);    } else     if (getOptionState(option1Name).equals(getOptionChoices(option1Name)[3])) {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_TWIN);      tc.setCmdGroups(NceTrafficController.CMDS_MEM | NceTrafficController.CMDS_AUI_READ | NceTrafficController.CMDS_PROGTRACK| NceTrafficController.CMDS_OPS_PGM| NceTrafficController.CMDS_USB| NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_1_65);    } else     if (getOptionState(option1Name).equals(getOptionChoices(option1Name)[2])) {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_POWERHOUSE);      tc.setCmdGroups(NceTrafficController.CMDS_OPS_PGM | NceTrafficController.CMDS_AUI_READ | NceTrafficController.CMDS_USB| NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_2006);    } else     if (getOptionState(option1Name).equals(getOptionChoices(option1Name)[1])) {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_SB3);      tc.setCmdGroups(NceTrafficController.CMDS_OPS_PGM | NceTrafficController.CMDS_USB | NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_1_28);    } else {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_POWERCAB);      tc.setCmdGroups(NceTrafficController.CMDS_MEM | NceTrafficController.CMDS_AUI_READ | NceTrafficController.CMDS_PROGTRACK| NceTrafficController.CMDS_OPS_PGM| NceTrafficController.CMDS_USB| NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_1_65);    }  } else {    if (getOptionState(option1Name).equals(getOptionChoices(option1Name)[4])) {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_SB5);      tc.setCmdGroups(NceTrafficController.CMDS_OPS_PGM | NceTrafficController.CMDS_USB | NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_1_28);    } else     if (getOptionState(option1Name).equals(getOptionChoices(option1Name)[3])) {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_TWIN);      tc.setCmdGroups(NceTrafficController.CMDS_OPS_PGM | NceTrafficController.CMDS_USB | NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_1_28);    } else     if (getOptionState(option1Name).equals(getOptionChoices(option1Name)[2])) {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_POWERHOUSE);      tc.setCmdGroups(NceTrafficController.CMDS_NONE | NceTrafficController.CMDS_USB | NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_2006);    } else     if (getOptionState(option1Name).equals(getOptionChoices(option1Name)[1])) {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_SB3);      tc.setCmdGroups(NceTrafficController.CMDS_ACCYADDR250 | NceTrafficController.CMDS_OPS_PGM | NceTrafficController.CMDS_USB| NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_1_28);    } else {      tc.setUsbSystem(NceTrafficController.USB_SYSTEM_POWERCAB);      tc.setCmdGroups(NceTrafficController.CMDS_PROGTRACK | NceTrafficController.CMDS_OPS_PGM | NceTrafficController.CMDS_USB| NceTrafficController.CMDS_ALL_SYS);      this.getSystemConnectionMemo().configureCommandStation(NceTrafficController.OPTION_1_28);    }  }  tc.connectPort(this);  this.getSystemConnectionMemo().configureManagers();  jmri.jmrix.nce.ActiveFlag.setActive();}  }
class C{  public void addDataSource(DataSource dataSource){  getDataSources().add(dataSource);}  }
class C{  public void testCapabilities(Instances D) throws Exception {  Capabilities cap=getCapabilities();  cap.enableAllClasses();  int L=D.classIndex();  for (int j=0; j < L; j++) {    Attribute c=D.attribute(j);    cap.testWithFail(c,true);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("GridField[").append(m_vo.ColumnName).append("=").append(m_value);  if (isKey())   sb.append("(Key)");  if (isParentColumn())   sb.append("(Parent)");  sb.append(", IsDisplayed=" + m_vo.IsDisplayed);  sb.append("]");  return sb.toString();}  }
class C{  public void toCharArray(char[] b){  toCharArray(b,0,b.length);}  }
class C{  public void addListener(final ITagListener listener){  m_listeners.addListener(listener);}  }
class C{  public static Border createLineBorder(int thickness){  Border b=new Border();  b.type=TYPE_LINE;  b.themeColors=true;  b.thickness=thickness;  return b;}  }
class C{  public static boolean processAuthHeader(OkAuthenticator authenticator,int responseCode,RawHeaders responseHeaders,RawHeaders successorRequestHeaders,Proxy proxy,URL url) throws IOException {  String responseField;  String requestField;  if (responseCode == HTTP_UNAUTHORIZED) {    responseField="WWW-Authenticate";    requestField="Authorization";  } else   if (responseCode == HTTP_PROXY_AUTH) {    responseField="Proxy-Authenticate";    requestField="Proxy-Authorization";  } else {    throw new IllegalArgumentException();  }  List<Challenge> challenges=parseChallenges(responseHeaders,responseField);  if (challenges.isEmpty()) {    return false;  }  Credential credential=responseHeaders.getResponseCode() == HTTP_PROXY_AUTH ? authenticator.authenticateProxy(proxy,url,challenges) : authenticator.authenticate(proxy,url,challenges);  if (credential == null) {    return false;  }  successorRequestHeaders.set(requestField,credential.getHeaderValue());  return true;}  }
class C{  private static void addController(ControlThread ct){synchronized (controllers) {    controllers.add(ct);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void toEPL(StringWriter writer,Expression optionalWhereClause,EPStatementFormatter formatter){  formatter.beginMerge(writer);  writer.write("merge ");  writer.write(windowName);  if (optionalAsName != null) {    writer.write(" as ");    writer.write(optionalAsName);  }  if (optionalWhereClause != null) {    formatter.beginMergeWhere(writer);    writer.write("where ");    optionalWhereClause.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  }  for (  OnMergeMatchItem item : matchItems) {    item.toEPL(writer,formatter);  }}  }
class C{  private void pan(){  List<Axis> axes=xyGraph.getXAxisList();  for (int i=0; i < axes.size(); ++i) {    final Axis axis=axes.get(i);    axis.pan(xAxisStartRangeList.get(i),axis.getPositionValue(start.x,false),axis.getPositionValue(end.x,false));  }  axes=xyGraph.getYAxisList();  for (int i=0; i < axes.size(); ++i) {    final Axis axis=axes.get(i);    axis.pan(yAxisStartRangeList.get(i),axis.getPositionValue(start.y,false),axis.getPositionValue(end.y,false));  }}  }
class C{  public static boolean uploadSegment(String mapId,String title,ArrayList<Location> locations,MapsClient mapsClient,String authToken,MapsGDataConverter mapsGDataConverter) throws ParseException, HttpException, IOException {  String featuresFeed=MapsClient.getFeaturesFeed(mapId);  Entry entry=mapsGDataConverter.getEntryForFeature(buildMapsLineFeature(title,locations));  try {    mapsClient.createEntry(featuresFeed,authToken,entry);  } catch (  IOException e) {    Log.d(TAG,"Retry upload track points",e);    mapsClient.createEntry(featuresFeed,authToken,entry);  }  return true;}  }
class C{  public void remove(int index){  indexUriMap.removeWithLeft(index);}  }
class C{  static boolean pairSum(int ar[],int x){  Arrays.sort(ar);  int len=ar.length;  for (int i=0, j=len - 1; i < j; ) {    if (ar[i] + ar[j] == x) {      return true;    } else     if (ar[i] + ar[j] < x) {      i++;    } else {      j--;    }  }  return false;}  }
class C{  public boolean isExternal(){  return !hasChildren();}  }
class C{  public static String javaEscape(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);switch (c) {case '\n':      sb.append("\\n");    break;case '\r':  sb.append("\\r");break;case '\t':sb.append("\\t");break;case '\\':sb.append("\\\\");break;case '\"':sb.append("\\\"");break;case '&':sb.append("&amp;");break;case '<':sb.append("&lt;");break;case '>':sb.append("&gt;");break;case '\'':sb.append("\\\'");break;default :sb.append(c);}}return sb.toString();}  }
class C{  public SortedMap findTextWithinInAreaWithTeasers(final int x1,final int y1,final int x2,final int y2,final int rotation,final String[] terms,final int searchType,final SearchListener listener) throws PdfException {  usingMultipleTerms=true;  multipleTermTeasers.clear();  teasers=null;  final boolean origIncludeTease=includeTease;  includeTease=true;  final List highlights=findTextWithinArea(x1,y1,x2,y2,terms,searchType,listener);  final SortedMap<Object,String> highlightsWithTeasers=new TreeMap<Object,String>(new ResultsComparator(rotation));  for (int i=0; i < highlights.size(); i++) {    highlightsWithTeasers.put(highlights.get(i),multipleTermTeasers.get(i));  }  usingMultipleTerms=false;  includeTease=origIncludeTease;  return highlightsWithTeasers;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.SWITCH_STATEMENT;}  }
class C{  public MbClassify(DataSet train,DataSet test,String target,double alpha,int depth,double prior,int maxMissing){  setup(train,test,target,alpha,depth,prior,maxMissing);}  }
class C{  public int delete(String table,String whereClause,String[] whereArgs){  verifyDbIsOpen();  String sql="DELETE FROM " + table + (!StringUtils.isEmpty(whereClause) ? " WHERE " + whereClause : "");  return executeSql(sql,whereArgs);}  }
class C{  public static double[] toDoubleArray(ARRAY array,final double defaultValue) throws SQLException {  if (array == null)   return null;  if (defaultValue == 0)   return array.getDoubleArray();  return toDoubleArray(array.getOracleArray(),defaultValue);}  }
class C{  @Override public boolean isEmpty(){  return contents.length == 0;}  }
class C{  private void prepareTable(){  String sql="UPDATE M_Replenish" + " SET Level_Max = Level_Min " + "WHERE Level_Max < Level_Min";  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected Max_Level=" + no);  sql="UPDATE M_Product_PO" + " SET Order_Min = 1 " + "WHERE Order_Min IS NULL OR Order_Min < 1";  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected Order Min=" + no);  sql="UPDATE M_Product_PO" + " SET Order_Pack = 1 " + "WHERE Order_Pack IS NULL OR Order_Pack < 1";  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected Order Pack=" + no);  sql="UPDATE M_Product_PO p" + " SET IsCurrentVendor='Y' " + "WHERE IsCurrentVendor<>'Y'"+ " AND EXISTS (SELECT pp.M_Product_ID FROM M_Product_PO pp "+ "WHERE p.M_Product_ID=pp.M_Product_ID "+ "GROUP BY pp.M_Product_ID "+ "HAVING COUNT(*) = 1)";  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected CurrentVendor(Y)=" + no);  sql="UPDATE M_Product_PO p" + " SET IsCurrentVendor='N' " + "WHERE IsCurrentVendor = 'Y'"+ " AND EXISTS (SELECT pp.M_Product_ID FROM M_Product_PO pp "+ "WHERE p.M_Product_ID=pp.M_Product_ID AND pp.IsCurrentVendor='Y' "+ "GROUP BY pp.M_Product_ID "+ "HAVING COUNT(*) > 1)";  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected CurrentVendor(N)=" + no);  sql="DELETE T_Replenish WHERE AD_PInstance_ID=" + getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Delete Existing Temp=" + no);}  }
class C{  public static Scenario createScenario(final Config config){  if (config == null) {    throw new NullPointerException("config must not be null!");  }  return new WeeklyScenarioImpl(config);}  }
class C{  public Customers rename(String name){  return new Customers(name,null);}  }
class C{  public boolean forEach(TIntProcedure procedure){  for (int i=0; i < _pos; i++) {    if (!procedure.execute(_data[i])) {      return false;    }  }  return true;}  }
class C{  private void processAdd(){  String input=JOptionPane.showInputDialog(this,this.addNewDescription);  if (input != null && input.trim().length() > 0) {    T newObject=this.objectFactory.createNewObject(input);    this.comboBox.addItem(newObject);    this.comboBox.setSelectedItem(newObject);    this.listener.itemAdded(this,newObject);  }}  }
class C{  private void addNetMap(String netString,Map<String,NetChart> subnetMap,boolean isIn){  String[] subnetArray=netString.split(";");  for (  String subnet : subnetArray) {    if (StringUtils.isEmpty(subnet)) {      continue;    }    String[] net=subnet.split(",");    NetChart netChart=subnetMap.get(net[0]);    if (netChart == null) {      netChart=new NetChart(net[0]);      subnetMap.put(net[0],netChart);    }    float v=NumberUtils.toFloat(net[1]);    if (isIn) {      netChart.addInSeries(v);      netChart.addTotalIn(v);      netChart.setMaxIn(v);    } else {      netChart.addOutSeries(v);      netChart.addTotalOut(v);      netChart.setMaxOut(v);    }  }}  }
class C{  public void run(){  String lastUsedPath=getDialogSetting(LAST_PATH_SETTING);  if (lastUsedPath == null) {    lastUsedPath="";  }  FileDialog dialog=new FileDialog(getShell(),SWT.MULTI);  dialog.setFilterExtensions(new String[]{"*.jar;*.zip","*.*"});  dialog.setText("Jar Selection");  dialog.setFilterPath(lastUsedPath);  String res=dialog.open();  if (res == null) {    return;  }  String[] fileNames=dialog.getFileNames();  int nChosen=fileNames.length;  IPath filterPath=new Path(dialog.getFilterPath());  IPath path=null;  ArrayList<IRuntimeClasspathEntry> list=new ArrayList<IRuntimeClasspathEntry>();  for (int i=0; i < nChosen; i++) {    path=filterPath.append(fileNames[i]).makeAbsolute();    if (path.toFile().exists()) {      list.add(JavaRuntime.newArchiveRuntimeClasspathEntry(path));    }  }  setDialogSetting(LAST_PATH_SETTING,filterPath.toOSString());  getViewer().addEntries(list.toArray(new IRuntimeClasspathEntry[0]));}  }
class C{  @Override protected void init(){  super.init();  mScrollMode=getScrollMode();  if (mScrollMode == DEFAULT_MODE) {    mBaseLineFlingVelocity=2500.0f;    mFlingVelocityInfluence=0.4f;    mScrollInterpolator=new OvershootInterpolator();    setDefaultInterpolator(mScrollInterpolator);  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static int offsetByCodePoints(char[] seq,int start,int count,int index,int codePointOffset){  if (seq == null) {    throw new NullPointerException();  }  int end=start + count;  if (start < 0 || count < 0 || end > seq.length || index < start || index > end) {    throw new IndexOutOfBoundsException();  }  if (codePointOffset == 0) {    return index;  }  if (codePointOffset > 0) {    int codePoints=codePointOffset;    int i=index;    while (codePoints > 0) {      codePoints--;      if (i >= end) {        throw new IndexOutOfBoundsException();      }      if (isHighSurrogate(seq[i])) {        int next=i + 1;        if (next < end && isLowSurrogate(seq[next])) {          i++;        }      }      i++;    }    return i;  }  int codePoints=-codePointOffset;  int i=index;  while (codePoints > 0) {    codePoints--;    i--;    if (i < start) {      throw new IndexOutOfBoundsException();    }    if (isLowSurrogate(seq[i])) {      int prev=i - 1;      if (prev >= start && isHighSurrogate(seq[prev])) {        i--;      }    }  }  return i;}  }
class C{  public synchronized void removeHandler(Handler handler){  this.handlers.remove(handler);}  }
class C{  public static ArrayList<Object> pruneItemSets(ArrayList<Object> toPrune,Hashtable<ItemSet,Integer> kMinusOne){  ArrayList<Object> newVector=new ArrayList<Object>(toPrune.size());  int help, j;  for (int i=0; i < toPrune.size(); i++) {    ItemSet current=(ItemSet)toPrune.get(i);    for (j=0; j < current.m_items.length; j++) {      if (current.m_items[j] != -1) {        help=current.m_items[j];        current.m_items[j]=-1;        if (kMinusOne.get(current) == null) {          current.m_items[j]=help;          break;        } else {          current.m_items[j]=help;        }      }    }    if (j == current.m_items.length) {      newVector.add(current);    }  }  return newVector;}  }
class C{  private static boolean isAppropriatePropertyNameForGetter(@NotNull PsiMethod getter,@NotNull String importedNameForGetter,@NotNull String propertyName){  propertyName=GroovyPropertyUtils.decapitalize(propertyName);  return propertyName.equals(getPropertyNameByGetter(getter,importedNameForGetter));}  }
class C{  public static String convertAndStrip(String phoneNumber){  return stripSeparators(convertKeypadLettersToDigits(phoneNumber));}  }
class C{  private static <T>SortedSet<T> cast(Iterable<T> iterable){  return (SortedSet<T>)iterable;}  }
class C{  protected static Collection findIssuerCerts(X509Certificate cert,ExtendedPKIXBuilderParameters pkixParams) throws AnnotatedException {  X509CertStoreSelector certSelect=new X509CertStoreSelector();  Set certs=new HashSet();  try {    certSelect.setSubject(cert.getIssuerX500Principal().getEncoded());  } catch (  IOException ex) {    throw new AnnotatedException("Subject criteria for certificate selector to find issuer certificate could not be set.",ex);  }  Iterator iter;  try {    List matches=new ArrayList();    matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getCertStores()));    matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getStores()));    matches.addAll(CertPathValidatorUtilities.findCertificates(certSelect,pkixParams.getAdditionalStores()));    iter=matches.iterator();  } catch (  AnnotatedException e) {    throw new AnnotatedException("Issuer certificate cannot be searched.",e);  }  X509Certificate issuer=null;  while (iter.hasNext()) {    issuer=(X509Certificate)iter.next();    certs.add(issuer);  }  return certs;}  }
class C{  public SingleClientConnManager(HttpParams params,SchemeRegistry schreg){  if (schreg == null) {    throw new IllegalArgumentException("Scheme registry must not be null.");  }  this.schemeRegistry=schreg;  this.connOperator=createConnectionOperator(schreg);  this.uniquePoolEntry=new PoolEntry();  this.managedConn=null;  this.lastReleaseTime=-1L;  this.alwaysShutDown=false;  this.isShutDown=false;}  }
class C{  private long minimalSCNInOpenTransactions(){  Collection<PlogTransaction> allTrans=openTransactions.values();  long minSCN=Long.MAX_VALUE;  for (  PlogTransaction tran : allTrans) {    if (tran.startSCN < minSCN) {      minSCN=tran.startSCN;    }  }  return minSCN;}  }
class C{  @Override public void run(){  try {    super.run();  } catch (  Throwable t) {    uncaught=t;  }}  }
class C{  public void notifyOnlinePlayers(){  if (!getPlayers().isEmpty()) {    List<TransferContent> newContents=getContents();    for (    Player player : getPlayers()) {      if (!player.isDisconnected() && player.isClientNewerThan("0.97")) {        StendhalRPAction.transferContent(player,newContents);      }    }  }}  }
class C{  public static boolean doShowExitAlert(){  return showExitAlert == 1;}  }
class C{  public int hashCode(){  return toString().hashCode();}  }
class C{  public void stop(){  try {    if (schemaRegistry != null) {      schemaRegistry.stop();    }  } catch (  Exception e) {    throw new RuntimeException(e);  }  if (broker != null) {    broker.stop();  }  try {    if (zookeeper != null) {      zookeeper.stop();    }  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  protected void onInsertComplete(int token,Object cookie,Uri uri){}  }
class C{  public static int VersionToNumber(String str){  boolean error=false;  int i=0;  int result=0;  int digitsAfterDecimal=0;  boolean afterDecimal=false;  while ((!error) && i < str.length()) {    char c=str.charAt(i);    if (('0' <= c) && (c <= '9')) {      result=10 * result + (c - '0');      if (afterDecimal) {        digitsAfterDecimal++;        if (digitsAfterDecimal > 3) {          error=true;        }      }    } else     if (c == '.') {      afterDecimal=true;    } else {      error=true;    }    i++;  }  if (error) {    return -1;  }  for (int j=0; j < 3 - digitsAfterDecimal; j++) {    result=10 * result;  }  return result;}  }
class C{  public void test() throws Exception {  Similarity sim=getSimilarity("text");  assertEquals(DFRSimilarity.class,sim.getClass());  DFRSimilarity dfr=(DFRSimilarity)sim;  assertEquals(BasicModelIF.class,dfr.getBasicModel().getClass());  assertEquals(AfterEffectB.class,dfr.getAfterEffect().getClass());  assertEquals(NormalizationH2.class,dfr.getNormalization().getClass());}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validOption1(){  List<SystemConnectionMemo> connList=jmri.InstanceManager.getList(SystemConnectionMemo.class);  if (!connList.isEmpty()) {    ArrayList<String> progConn=new ArrayList<String>();    progConn.add("");    String userName="Dcc4Pc";    if (this.getSystemConnectionMemo() != null) {      userName=this.getSystemConnectionMemo().getUserName();    }    for (int i=0; i < connList.size(); i++) {      SystemConnectionMemo scm=connList.get(i);      if (scm.provides(jmri.ProgrammerManager.class) && (!scm.getUserName().equals(userName))) {        progConn.add(scm.getUserName());      }    }    String[] validOption1=new String[progConn.size()];    progConn.toArray(validOption1);    return validOption1;  } else {    return new String[]{""};  }}  }
class C{  public void remove(final ICriteriumTreeNode node){  CCriteriumTreeNode.remove(node);  final ICriteriumTreeNode parent=node.getParent();  parent.getChildren().remove(node);  for (  final ICriteriumTreeListener listener : m_listeners) {    try {      listener.removedNode(this,node);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  @DSComment("Sip Manager") @DSSpec(DSCat.ANDROID_MANAGER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.197 -0500",hash_original_method="44B0A789C05B858CACCF674C81E7AABD",hash_generated_method="CBA5F72A5B5D57CF9151840D5B14FC5C") public void close(String localProfileUri) throws SipException {  try {    mSipService.close(localProfileUri);  } catch (  RemoteException e) {    throw new SipException("close()",e);  }}  }
class C{  @Override public void update(BasicCamera camera){  for (int i=0; i < point.length; ++i) {    point[i].update(camera);  }}  }
class C{  protected String r(String s,String u) throws Exception {  Date dt=DateMathParser.parseMath(null,s + "Z/" + u);  return fmt.format(dt.toInstant());}  }
class C{  private static void appendJSONPair(StringBuilder json,String key,String value) throws UnsupportedEncodingException {  boolean isValueNumeric=false;  try {    if (value.equals("0") || !value.endsWith("0")) {      Double.parseDouble(value);      isValueNumeric=true;    }  } catch (  NumberFormatException e) {    isValueNumeric=false;  }  if (json.charAt(json.length() - 1) != '{') {    json.append(',');  }  json.append(escapeJSON(key));  json.append(':');  if (isValueNumeric) {    json.append(value);  } else {    json.append(escapeJSON(value));  }}  }
class C{  public static void collectGarbage(){  try {    System.gc();    Thread.sleep(fSLEEP_INTERVAL);    System.runFinalization();    Thread.sleep(fSLEEP_INTERVAL);  } catch (  InterruptedException ex) {    ex.printStackTrace();  }}  }
class C{  public static void d(String tag,String s,Throwable e){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s,e);}  }
class C{  public Angle angularDistanceTo(Angle angle){  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double differenceDegrees=angle.subtract(this).degrees;  if (differenceDegrees < -180)   differenceDegrees+=360; else   if (differenceDegrees > 180)   differenceDegrees-=360;  double absAngle=Math.abs(differenceDegrees);  return Angle.fromDegrees(absAngle);}  }
class C{  public T caseIdentifierRef(IdentifierRef object){  return null;}  }
class C{  private void notifyWifiState(){synchronized (mWifiMonitor) {    Log.v(LOG_TAG,"notify wifi state changed.");    mWifiMonitor.notify();  }}  }
class C{  @Override public void beforeFirst() throws SQLException {  try {    debugCodeCall("beforeFirst");    checkClosed();    if (result.getRowId() >= 0) {      resetResult();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @After public void tearDown() throws Exception {  dynamicProperties.delete();}  }
class C{  private Set<String> updateSyncedTracks() throws IOException {  Set<String> result=new HashSet<String>();  Cursor cursor=null;  try {    cursor=myTracksProviderUtils.getTrackCursor(SyncUtils.DRIVE_ID_TRACKS_QUERY,null,null);    if (cursor != null && cursor.moveToFirst()) {      do {        Track track=myTracksProviderUtils.createTrack(cursor);        String driveId=track.getDriveId();        if (driveId != null && !driveId.equals("")) {          if (!track.isSharedWithMe()) {            File driveFile=drive.files().get(driveId).execute();            if (SyncUtils.isInMyTracksAndValid(driveFile,folderId)) {              merge(track,driveFile);              result.add(driveId);            } else {              SyncUtils.updateTrack(myTracksProviderUtils,track,null);            }          }        }      } while (cursor.moveToNext());    }  }  finally {    if (cursor != null) {      cursor.close();    }  }  return result;}  }
class C{  public static void editEdgeComments(final JFrame parent,final NaviEdge edge){  Preconditions.checkNotNull(parent,"IE02115: Parent argument can not be null");  Preconditions.checkNotNull(edge,"IE02116: Edge argument can not be null");  final CDialogEditEdgeComment dlg=new CDialogEditEdgeComment(parent,edge.getRawEdge());  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);}  }
class C{  public static void error(final String message,final Throwable t){  if (JQuantLib.logger != null) {    JQuantLib.logger.error(message,t);  } else {    System.err.printf("ERROR: %s : %s\n",message,t.getMessage());    t.printStackTrace(System.err);  }}  }
class C{  public boolean userCanDeleteDept(int connectedUserId,int DeptId,String entidad) throws Exception {  boolean can=false;  int parentId=ISicresAdminDefsKeys.NULL_ID;  int parentDeptMgrId=ISicresAdminDefsKeys.NULL_ID;  try {    parentId=getDeptParentId(DeptId,entidad);    if (parentId == ISicresAdminDefsKeys.ROOT_DEPT_ID)     parentDeptMgrId=0; else     parentDeptMgrId=getDeptMgrId(parentId,entidad);    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_DELETE,ISicresAdminDefsKeys.NULL_ID,parentDeptMgrId,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public static Vector3f interpolateLinear(float scale,Vector3f startValue,Vector3f endValue,Vector3f store){  if (store == null) {    store=new Vector3f();  }  store.x=interpolateLinear(scale,startValue.x,endValue.x);  store.y=interpolateLinear(scale,startValue.y,endValue.y);  store.z=interpolateLinear(scale,startValue.z,endValue.z);  return store;}  }
class C{  public List<Long> idsStr2List(String idsStr){  return Arrays.stream(idsStr.split(",")).map(null).collect(Collectors.toList());}  }
class C{  protected Sorting(){}  }
class C{  public static void sendFailurePatch(StatefulService service,TaskServiceState taskState,Collection<Throwable> tList){  Throwable errorToPatch=null;  for (  Throwable t : tList) {    errorToPatch=t;    service.logWarning("Operation failed: %s",Utils.toString(t));  }  sendFailurePatch(service,taskState,errorToPatch);}  }
class C{  public Partial withMinimumValue(){  return setCopy(getMinimumValue());}  }
class C{  private ExtremumType extremumType(int n,double[] alpha_extreme,HyperBoundingBox interval){  if (n == alpha_extreme.length - 1) {    return extremumType;  }  double[] alpha_extreme_l=new double[alpha_extreme.length];  double[] alpha_extreme_r=new double[alpha_extreme.length];  double[] alpha_extreme_c=new double[alpha_extreme.length];  System.arraycopy(alpha_extreme,0,alpha_extreme_l,0,alpha_extreme.length);  System.arraycopy(alpha_extreme,0,alpha_extreme_r,0,alpha_extreme.length);  System.arraycopy(alpha_extreme,0,alpha_extreme_c,0,alpha_extreme.length);  double[] centroid=SpatialUtil.centroid(interval);  for (int i=0; i < n; i++) {    alpha_extreme_l[i]=centroid[i];    alpha_extreme_r[i]=centroid[i];    alpha_extreme_c[i]=centroid[i];  }  double intervalLength=interval.getMax(n) - interval.getMin(n);  alpha_extreme_l[n]=Math.random() * intervalLength + interval.getMin(n);  alpha_extreme_r[n]=Math.random() * intervalLength + interval.getMin(n);  double f_c=function(alpha_extreme_c);  double f_l=function(alpha_extreme_l);  double f_r=function(alpha_extreme_r);  if (f_l < f_c) {    if (f_r < f_c || Math.abs(f_r - f_c) < DELTA) {      return ExtremumType.MAXIMUM;    }  }  if (f_r < f_c) {    if (f_l < f_c || Math.abs(f_l - f_c) < DELTA) {      return ExtremumType.MAXIMUM;    }  }  if (f_l > f_c) {    if (f_r > f_c || Math.abs(f_r - f_c) < DELTA) {      return ExtremumType.MINIMUM;    }  }  if (f_r > f_c) {    if (f_l > f_c || Math.abs(f_l - f_c) < DELTA) {      return ExtremumType.MINIMUM;    }  }  if (Math.abs(f_l - f_c) < DELTA && Math.abs(f_r - f_c) < DELTA) {    return ExtremumType.CONSTANT;  }  throw new IllegalArgumentException("Houston, we have a problem!\n" + this + "\n"+ "f_l "+ f_l+ "\n"+ "f_c "+ f_c+ "\n"+ "f_r "+ f_r+ "\n"+ "p "+ vec.toArray()+ "\n"+ "alpha   "+ FormatUtil.format(alpha_extreme_c)+ "\n"+ "alpha_l "+ FormatUtil.format(alpha_extreme_l)+ "\n"+ "alpha_r "+ FormatUtil.format(alpha_extreme_r)+ "\n"+ "n "+ n);}  }
class C{  public void notifyTurnoutCreationError(String conflict,int bitNum){  javax.swing.JOptionPane.showMessageDialog(null,"The output bit, " + bitNum + ", is currently assigned to "+ conflict+ ". Turnout cannot be created as "+ "you specified.","Acela Assignment Conflict",javax.swing.JOptionPane.INFORMATION_MESSAGE,null);}  }
class C{  private void checkEntry(long index,Segment segment,OffsetPredicate predicate,Segment compactSegment){  try (Entry entry=segment.get(index)){    if (entry != null) {      checkEntry(index,entry,segment,predicate,compactSegment);    } else {      compactSegment.skip(1);    }  } }  }
class C{  @SuppressLint("NewApi") @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_ptr_list_fragment);  mPullRefreshListFragment=(PullToRefreshListFragment)getSupportFragmentManager().findFragmentById(R.id.frag_ptr_list);  mPullRefreshListView=mPullRefreshListFragment.getPullToRefreshListView();  mPullRefreshListView.setOnRefreshListener(this);  ListView actualListView=mPullRefreshListView.getRefreshableView();  mListItems=new LinkedList<String>();  mListItems.addAll(Arrays.asList(mStrings));  mAdapter=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,mListItems);  actualListView.setAdapter(mAdapter);  mPullRefreshListFragment.setListShown(true);  ActionBarManager.initBackTitle(this,getActionBar(),this.getClass().getSimpleName());}  }
class C{  private static String hex(char ch){  return Integer.toHexString(ch).toUpperCase(Locale.ENGLISH);}  }
class C{  void close(){  localTcp.close(false);  updateLocalClock();}  }
class C{  public JTree(){  this(getDefaultTreeModel());}  }
class C{  public static boolean isPostgreSQL(DbConnection conn) throws IeciTdException {  if (conn.getEngine() == DbEngine.POSTGRES)   return true;  return false;}  }
class C{  public ECPrivateKeyImpl(BigInteger s,ECParameterSpec params) throws InvalidKeyException {  this.s=s;  this.params=params;  algid=new AlgorithmId(AlgorithmId.EC_oid,ECParameters.getAlgorithmParameters(params));  try {    DerOutputStream out=new DerOutputStream();    out.putInteger(1);    byte[] privBytes=ECUtil.trimZeroes(s.toByteArray());    out.putOctetString(privBytes);    DerValue val=new DerValue(DerValue.tag_Sequence,out.toByteArray());    key=val.toByteArray();  } catch (  IOException exc) {    throw new InvalidKeyException(exc);  }}  }
class C{  public IntrospectorTestCase3(String name){  super(name);}  }
class C{  public static void test(String[] argv){  Instances instances, secondInstances, train, test, transformed, empty;  Instance instance;  Random random=new Random(2);  Reader reader;  int start, num;  double newWeight;  FastVector testAtts, testVals;  int i, j;  try {    if (argv.length > 1) {      throw (new Exception("Usage: Instances [<filename>]"));    }    testVals=new FastVector(2);    testVals.addElement("first_value");    testVals.addElement("second_value");    testAtts=new FastVector(2);    testAtts.addElement(new Attribute("nominal_attribute",testVals));    testAtts.addElement(new Attribute("numeric_attribute"));    instances=new Instances("test_set",testAtts,10);    instances.add(new Instance(instances.numAttributes()));    instances.add(new Instance(instances.numAttributes()));    instances.add(new Instance(instances.numAttributes()));    instances.setClassIndex(0);    System.out.println("\nSet of instances created from scratch:\n");    System.out.println(instances);    if (argv.length == 1) {      String filename=argv[0];      reader=new FileReader(filename);      System.out.println("\nFirst five instances from file:\n");      instances=new Instances(reader,1);      instances.setClassIndex(instances.numAttributes() - 1);      i=0;      while ((i < 5) && (instances.readInstance(reader))) {        i++;      }      System.out.println(instances);      reader=new FileReader(filename);      instances=new Instances(reader);      instances.setClassIndex(instances.numAttributes() - 1);      System.out.println("\nDataset:\n");      System.out.println(instances);      System.out.println("\nClass index: " + instances.classIndex());    }    System.out.println("\nClass name: " + instances.classAttribute().name());    System.out.println("\nClass index: " + instances.classIndex());    System.out.println("\nClass is nominal: " + instances.classAttribute().isNominal());    System.out.println("\nClass is numeric: " + instances.classAttribute().isNumeric());    System.out.println("\nClasses:\n");    for (i=0; i < instances.numClasses(); i++) {      System.out.println(instances.classAttribute().value(i));    }    System.out.println("\nClass values and labels of instances:\n");    for (i=0; i < instances.numInstances(); i++) {      Instance inst=instances.instance(i);      System.out.print(inst.classValue() + "\t");      System.out.print(inst.toString(inst.classIndex()));      if (instances.instance(i).classIsMissing()) {        System.out.println("\tis missing");      } else {        System.out.println();      }    }    System.out.println("\nCreating random weights for instances.");    for (i=0; i < instances.numInstances(); i++) {      instances.instance(i).setWeight(random.nextDouble());    }    System.out.println("\nInstances and their weights:\n");    System.out.println(instances.instancesAndWeights());    System.out.print("\nSum of weights: ");    System.out.println(instances.sumOfWeights());    secondInstances=new Instances(instances);    Attribute testAtt=new Attribute("Inserted");    secondInstances.insertAttributeAt(testAtt,0);    System.out.println("\nSet with inserted attribute:\n");    System.out.println(secondInstances);    System.out.println("\nClass name: " + secondInstances.classAttribute().name());    secondInstances.deleteAttributeAt(0);    System.out.println("\nSet with attribute deleted:\n");    System.out.println(secondInstances);    System.out.println("\nClass name: " + secondInstances.classAttribute().name());    System.out.println("\nHeaders equal: " + instances.equalHeaders(secondInstances) + "\n");    System.out.println("\nData (internal values):\n");    for (i=0; i < instances.numInstances(); i++) {      for (j=0; j < instances.numAttributes(); j++) {        if (instances.instance(i).isMissing(j)) {          System.out.print("? ");        } else {          System.out.print(instances.instance(i).value(j) + " ");        }      }      System.out.println();    }    System.out.println("\nEmpty dataset:\n");    empty=new Instances(instances,0);    System.out.println(empty);    System.out.println("\nClass name: " + empty.classAttribute().name());    if (empty.classAttribute().isNominal()) {      Instances copy=new Instances(empty,0);      copy.renameAttribute(copy.classAttribute(),"new_name");      copy.renameAttributeValue(copy.classAttribute(),copy.classAttribute().value(0),"new_val_name");      System.out.println("\nDataset with names changed:\n" + copy);      System.out.println("\nOriginal dataset:\n" + empty);    }    start=instances.numInstances() / 4;    num=instances.numInstances() / 2;    System.out.print("\nSubset of dataset: ");    System.out.println(num + " instances from " + (start + 1)+ ". instance");    secondInstances=new Instances(instances,start,num);    System.out.println("\nClass name: " + secondInstances.classAttribute().name());    System.out.println("\nInstances and their weights:\n");    System.out.println(secondInstances.instancesAndWeights());    System.out.print("\nSum of weights: ");    System.out.println(secondInstances.sumOfWeights());    System.out.println("\nTrain and test folds for 3-fold CV:");    if (instances.classAttribute().isNominal()) {      instances.stratify(3);    }    for (j=0; j < 3; j++) {      train=instances.trainCV(3,j);      test=instances.testCV(3,j);      System.out.println("\nTrain: ");      System.out.println("\nInstances and their weights:\n");      System.out.println(train.instancesAndWeights());      System.out.print("\nSum of weights: ");      System.out.println(train.sumOfWeights());      System.out.println("\nClass name: " + train.classAttribute().name());      System.out.println("\nTest: ");      System.out.println("\nInstances and their weights:\n");      System.out.println(test.instancesAndWeights());      System.out.print("\nSum of weights: ");      System.out.println(test.sumOfWeights());      System.out.println("\nClass name: " + test.classAttribute().name());    }    System.out.println("\nRandomized dataset:");    instances.randomize(random);    System.out.println("\nInstances and their weights:\n");    System.out.println(instances.instancesAndWeights());    System.out.print("\nSum of weights: ");    System.out.println(instances.sumOfWeights());    System.out.print("\nInstances sorted according to first attribute:\n ");    instances.sort(0);    System.out.println("\nInstances and their weights:\n");    System.out.println(instances.instancesAndWeights());    System.out.print("\nSum of weights: ");    System.out.println(instances.sumOfWeights());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void updateUI(){  setUI((RootPaneUI)UIManager.getUI(this));}  }
class C{  private void processAcceptAuthSubToken(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (request.getParameter("token") != null) {    EventPublisher ep=new EventPublisher();    try {      ep.setSsAuthSubToken(request.getParameter("token"),true);      request.getSession().setAttribute(SESSION_ATTR_SS_AUTH_TOKEN,ep.getSsAuthSubToken());      response.sendRedirect("?action=outputSsList");    } catch (    EPAuthenticationException e) {      System.err.println("Authentication exception: " + e.getMessage());    }  }}  }
class C{  @Override public String toString(){  return date.toString();}  }
class C{  public float distanceTo(AnimatableValue other){  return 0f;}  }
class C{  public static String pad(String string,int n,String padding,boolean right){  if (n < 0) {    n=0;  }  if (n < string.length()) {    return string.substring(0,n);  } else   if (n == string.length()) {    return string;  }  char paddingChar;  if (padding == null || padding.length() == 0) {    paddingChar=' ';  } else {    paddingChar=padding.charAt(0);  }  StringBuilder buff=new StringBuilder(n);  n-=string.length();  if (right) {    buff.append(string);  }  for (int i=0; i < n; i++) {    buff.append(paddingChar);  }  if (!right) {    buff.append(string);  }  return buff.toString();}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 == z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress((int)progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 == constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 == constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Set<String> addUserInput(Map<String,Double> userInput){  String var=(!settings.invertedRole) ? settings.userInput : settings.systemOutput;  CategoricalTable.Builder builder=new CategoricalTable.Builder(var);  for (  String input : userInput.keySet()) {    builder.addRow(input,userInput.get(input));  }  return addContent(builder.build());}  }
class C{  private boolean isOperationNeedAuth(String errorMessage){  return authErrorPattern.matcher(errorMessage).find();}  }
class C{  protected boolean beforeSave(boolean newRecord){  validate();  return true;}  }
class C{  public void addExceptionSensorData(ExceptionSensorData data){  if (null == exceptionSensorDataObjects) {    exceptionSensorDataObjects=new ArrayList<ExceptionSensorData>();  }  exceptionSensorDataObjects.add(data);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.OPERATION__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case FunctionblockPackage.OPERATION__PARAMS:  return params != null && !params.isEmpty();case FunctionblockPackage.OPERATION__RETURN_TYPE:return returnType != null;case FunctionblockPackage.OPERATION__DESCRIPTION:return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);case FunctionblockPackage.OPERATION__BREAKABLE:return breakable != BREAKABLE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static void deleteAll(Resource container){  List<Attachment> attachments=findByContainer(container);  for (  Attachment attachment : attachments) {    attachment.delete();  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.776 -0500",hash_original_method="6E96276EBE2927D59F0A224BEB5CF764",hash_generated_method="AC3C3226CA3E5B6CF253BFCC09D13D8B") public void copyPixelsToBuffer(Buffer dst){  int elements=dst.remaining();  int shift;  if (dst instanceof ByteBuffer) {    shift=0;  } else   if (dst instanceof ShortBuffer) {    shift=1;  } else   if (dst instanceof IntBuffer) {    shift=2;  } else {    throw new RuntimeException("unsupported Buffer subclass");  }  long bufferSize=(long)elements << shift;  long pixelSize=getByteCount();  if (bufferSize < pixelSize) {    throw new RuntimeException("Buffer not large enough for pixels");  }  nativeCopyPixelsToBuffer(mNativeBitmap,dst);  int position=dst.position();  position+=pixelSize >> shift;  dst.position(position);}  }
class C{  public static double ludcmp(double a[][],int indx[]){  int n=a.length;  int i=0, imax=0, j=0, k=0;  double big, dum, sum, temp;  double d=1.0;  double vv[]=new double[n];  for (i=0; i < n; i++) {    big=0.0;    for (j=0; j < n; j++)     if ((temp=Math.abs(a[i][j])) > big)     big=temp;    if (big == 0.0) {      try {        throw new NRException("Error: Singular linearized system. Computation cannot proceed.");      } catch (      NRException ex) {        ex.printStackTrace();      }    }    vv[i]=1.0 / big;  }  for (j=0; j < n; j++) {    for (i=0; i < j; i++) {      sum=a[i][j];      for (k=0; k < i; k++)       sum-=(a[i][k] * a[k][j]);      a[i][j]=sum;    }    big=0.0;    for (i=j; i < n; i++) {      sum=a[i][j];      for (k=0; k < j; k++)       sum-=(a[i][k] * a[k][j]);      a[i][j]=sum;      if ((dum=vv[i] * Math.abs(sum)) >= big) {        big=dum;        imax=i;      }    }    if (j != imax) {      for (k=0; k < n; k++) {        dum=a[imax][k];        a[imax][k]=a[j][k];        a[j][k]=dum;      }      d=-d;      vv[imax]=vv[j];    }    indx[j]=imax;    if (a[j][j] == 0.0)     a[j][j]=TINY;    if (j != n - 1) {      dum=1.0 / (a[j][j]);      for (i=j + 1; i < n; i++)       a[i][j]*=dum;    }  }  return d;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean load(){  DefaultHandler handler=new GanttXMLOptionsParser();  SAXParserFactory factory=SAXParserFactory.newInstance();  try {    String sFileName=".ganttproject";    File file=new File(System.getProperty("user.home") + System.getProperty("file.separator") + sFileName);    if (!file.exists()) {      return false;    }    myDocumentManager.clearRecentDocuments();    SAXParser saxParser=factory.newSAXParser();    saxParser.parse(file,handler);    loadRoleSets(file);  } catch (  Exception e) {    if (!GPLogger.log(e)) {      e.printStackTrace(System.err);    }    return false;  }  isloaded=true;  return true;}  }
class C{  public double end(){  assureRightState("end",true);  lastTime=elapsed();  lapped.add(lastTime);  time=-1;  return lastTime;}  }
class C{  private static Object convertValue(String param,String operator,String type,Locale locale) throws ParseException {  if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_LIKE_TEXT_VALUE))) {    String aux=param.replaceAll("%","");    aux="%" + aux + "%";    return convertValue(type,aux,locale);  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_BEGIN_BY_VALUE))) {    String aux=param.replaceAll("%","");    aux=aux + "%";    return convertValue(type,aux,locale);  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_END_WITH_VALUE))) {    String aux=param.replaceAll("%","");    aux="%" + aux;    return convertValue(type,aux,locale);  } else {    return convertValue(type,param,locale);  }}  }
class C{  public PrimMinimumSpanningTree(Supplier<? extends Graph<V,E>> supplier){  this(supplier,Functions.constant(1.0));}  }
class C{  private String prepareWorkFlowMatrixDetails(final List<WorkFlowMatrixDetails> matrixList){  LOGGER.info("prepareWorkFlowMatrixDetails Method is called");  final List<WorkFlowMatrix> actWorkFlowMatrixList=new LinkedList<WorkFlowMatrix>();  for (int i=0; i < matrixList.size(); i++) {    final WorkFlowMatrix wfMatrixObj=new WorkFlowMatrix();    wfMatrixObj.setFromDate(getFromDate());    if (getLegacyDate() != null) {      setToDate((getLegacyDate()));    }    wfMatrixObj.setToDate(getToDate());    wfMatrixObj.setObjectType((this.workFlowMatrixService.getobjectTypebyId(getObjectType())).getType());    wfMatrixObj.setFromQty(getFromAmount());    wfMatrixObj.setToQty(getToAmount());    wfMatrixObj.setAdditionalRule(getAdditionalRule() != "-1" ? getAdditionalRule() : null);    actWorkFlowMatrixList.add(wfMatrixObj);  }  if (getMode().equals(MODIFY)) {    if (updateExistingMatrix()) {      this.workFlowMatrixService.save(createActualWorkFlowMatrixDetails(actWorkFlowMatrixList,matrixList),getDepartment());    } else {      deleteWorkFlowMatrixObject(getSearchParams());      this.workFlowMatrixService.save(createActualWorkFlowMatrixDetails(actWorkFlowMatrixList,matrixList),getDepartment());      return NEW;    }  } else {    this.workFlowMatrixService.save(createActualWorkFlowMatrixDetails(actWorkFlowMatrixList,matrixList),getDepartment());  }  LOGGER.info("prepareWorkFlowMatrixDetails Method is ended");  return NEW;}  }
class C{  HierarchicalType(TypeSystem typeSystem,Class<ST> superTypeClass,String name,String description,ImmutableSet<String> superTypes,int numFields){  this(typeSystem,superTypeClass,name,description,AtlasConstants.DEFAULT_TYPE_VERSION,superTypes,numFields);}  }
class C{  public void dispatchCharactersEvents(int nodeHandle,org.xml.sax.ContentHandler ch,boolean normalize) throws org.xml.sax.SAXException {}  }
class C{  @Override public String debugPrint(){  DebugPrintVisitor dpv=new DebugPrintVisitor(new StringBuilder(1000));  visitAll(dpv);  return dpv.toString();}  }
class C{  @Override public boolean isFileModified(long fileTimeStamp,long endOffset){  boolean isFileModified=false;  if (getLastModifiedTime() > fileTimeStamp || getSize() > endOffset) {    isFileModified=true;  }  return isFileModified;}  }
class C{  private void onDeleteQuery(String query){  mTimelineManager.deleteTimeline(query);  mTabListAdapter.notifyDataSetChanged();  mTabListAdapter.notifyDataSetChanged();  mPagerAdapter.notifyDataSetChanged();  refreshTabLayout();  updateEmptyState();}  }
class C{  public ZipFile(File f,String encoding) throws IOException {  this.encoding=encoding;  archive=new RandomAccessFile(f,"r");  populateFromCentralDirectory();  resolveLocalFileHeaderData();}  }
class C{  public boolean areModulesLoaded(){  return this.modulesLoaded;}  }
class C{  private void handleUnassociatedParameters(){  int szSsaRegs=ssaMeth.getRegCount();  for (int ssaReg=0; ssaReg < szSsaRegs; ssaReg++) {    if (ssaRegsMapped.get(ssaReg)) {      continue;    }    int paramIndex=getParameterIndexForReg(ssaReg);    RegisterSpec ssaSpec=getDefinitionSpecForSsaReg(ssaReg);    if (paramIndex >= 0) {      addMapping(ssaSpec,paramIndex);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.552 -0500",hash_original_method="4666B536C7E29DA76F907E136B605459",hash_generated_method="28AE349BF3C72FCB010F5933B5A32B1C") public static final void writeListXml(List val,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"list");  if (name != null) {    out.attribute(null,"name",name);  }  int N=val.size();  int i=0;  while (i < N) {    writeValueXml(val.get(i),null,out);    i++;  }  out.endTag(null,"list");}  }
class C{  private void shutdownImpl(ShutdownModeAmp mode,ExitCode exitCode,Result<String> result){  FailSafeHaltThread haltThread=_failSafeHaltThread;  if (haltThread != null) {    haltThread.startShutdown();  }  if (exitCode == null) {    exitCode=ExitCode.FAIL_SAFE_HALT;  }  _exitCode.compareAndSet(null,exitCode);  try {    SystemManager systemManager=_systemManagerRef.get();    if (systemManager != null) {      systemManager.shutdown(mode);    }  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  } finally {    _systemManagerRef=null;    _lifecycle.toDestroy();    System.err.println("\nShutdown reason: " + exitCode + "\n");    log.warning("Shutdown reason: " + exitCode);    if (result != null) {      result.ok("Shutdown reason: " + exitCode);    }    if (!_isEmbedded) {      System.exit(exitCode.ordinal());    }  }}  }
class C{  public int next(){  if (_currentNode == _startNodeID || _currentNode == DTM.NULL) {    return NULL;  } else {    final int node=_currentNode;    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  public void onDigitalPinStatusChange(OneSheeldDevice device,int pinNumber,boolean newValue){}  }
class C{  private static IgniteQueue<String> initializeQueue(Ignite ignite,String queueName) throws IgniteException {  CollectionConfiguration colCfg=new CollectionConfiguration();  colCfg.setCacheMode(PARTITIONED);  IgniteQueue<String> queue=ignite.queue(queueName,0,colCfg);  for (int i=0; i < ignite.cluster().nodes().size() * RETRIES * 2; i++)   queue.put(Integer.toString(i));  System.out.println("Queue size after initializing: " + queue.size());  return queue;}  }
class C{  public IdentityMultiMap(){  map=new IdentityHashMap<>();}  }
class C{  public static DateTimeValue timeFromSecsSinceEpoch(long secsSinceEpoch){  int secsInDay=(int)(secsSinceEpoch % SECS_PER_DAY);  int daysSinceEpoch=(int)(secsSinceEpoch / SECS_PER_DAY);  int approx=(int)((daysSinceEpoch + 10) * 400L / 146097);  int year=(daysSinceEpoch >= fixedFromGregorian(approx + 1,1,1)) ? approx + 1 : approx;  int jan1=fixedFromGregorian(year,1,1);  int priorDays=daysSinceEpoch - jan1;  int march1=fixedFromGregorian(year,3,1);  int correction=(daysSinceEpoch < march1) ? 0 : isLeapYear(year) ? 1 : 2;  int month=(12 * (priorDays + correction) + 373) / 367;  int month1=fixedFromGregorian(year,month,1);  int day=daysSinceEpoch - month1 + 1;  int second=secsInDay % 60;  int minutesInDay=secsInDay / 60;  int minute=minutesInDay % 60;  int hour=minutesInDay / 60;  if (!(hour >= 0 && hour < 24)) {    throw new AssertionError("Input was: " + secsSinceEpoch + "to make hour: "+ hour);  }  return new DateTimeValueImpl(year,month,day,hour,minute,second);}  }
class C{  public ALayoutCollection(){  super();}  }
class C{  public final int ordinal(){  return ordinal;}  }
class C{  public NotificationChain basicSetLeftOperand(Expression newLeftOperand,NotificationChain msgs){  Expression oldLeftOperand=leftOperand;  leftOperand=newLeftOperand;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.BITWISE_OR_EXPRESSION__LEFT_OPERAND,oldLeftOperand,newLeftOperand);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public boolean isNetworkIdValid(PropertyHandler paramHandler) throws Exception {  return resolveValidNetworkId(paramHandler) != null;}  }
class C{  static private boolean isNoncapturingParen(String s,int pos){  boolean isLookbehind=false;{    String pre=s.substring(pos,pos + 4);    isLookbehind=pre.equals("(?<=") || pre.equals("(?<!");  }  return s.charAt(pos + 1) == '?' && (isLookbehind || s.charAt(pos + 2) != '<');}  }
class C{  public void contentTag(String tag,String content){  spacing();  m_out.print('<');  m_out.print(tag);  m_out.print('>');  escapeString(content);  m_out.print('<');  m_out.print('/');  m_out.print(tag);  m_out.print('>');  println();}  }
class C{  public static Object loadSystemLib(String name) throws ScriptException {  checkSupported();  return engine.eval(getSystemLib(name));}  }
class C{  private int parseEndOfLine(String headerPart,int end){  int index=end;  for (; ; ) {    int offset=headerPart.indexOf('\r',index);    if (offset == -1 || offset + 1 >= headerPart.length()) {      throw new IllegalStateException("Expected headers to be terminated by an empty line.");    }    if (headerPart.charAt(offset + 1) == '\n') {      return offset;    }    index=offset + 1;  }}  }
class C{  public GenerateNetBeansProjectDialog(java.awt.Component c,EditableResources res){  super((JFrame)SwingUtilities.windowForComponent(c),true);  initComponents();  initialForm.setModel(new DefaultComboBoxModel(res.getUIResourceNames()));  initialForm.setSelectedIndex(0);  destinationDirectory.setText(System.getProperty("user.home"));  setLocationByPlatform(true);  pack();  setVisible(true);}  }
class C{  public void testCreateTamperedRequest(AbstractDosPlugin instance){  SoapTestRequest s=new SoapTestRequest();  WsdlRequest w=s.getWsdlRequest();  RequestResponsePairTest requestResponsePairTest=new RequestResponsePairTest();  requestResponsePairTest.setWsdlRequest(w);  instance.setOriginalRequestResponsePair(requestResponsePairTest);  instance.initializePlugin();  instance.getOptionTextAreaSoapMessage().currentRequestContentChanged(w.getRequestContent(),"");  instance.createTamperedRequest();  assertTrue(instance.getAttackPrecheck() == false || instance.getTamperedRequestObject().getXmlMessageLength() > 0);}  }
class C{  public void moveItemDown(AutomationItem item){  int sequenceId=item.getSequenceId();  if (sequenceId + 1 > getSize()) {    item.setSequenceId(0);    resequenceIds();  } else {    AutomationItem replaceSi=getItemBySequenceId(sequenceId + 1);    if (replaceSi != null) {      replaceSi.setSequenceId(sequenceId);      item.setSequenceId(sequenceId + 1);    } else {      resequenceIds();    }  }  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,null,sequenceId);}  }
class C{  @Override public boolean isIdleExpired(){  long now=CurrentTime.currentTime();  return (_pool.getLoadBalanceIdleTime() < now - _idleStartTime);}  }
class C{  public static TemporalPrecisionMode parse(String value){  if (value == null)   return null;  value=value.trim();  for (  TemporalPrecisionMode option : TemporalPrecisionMode.values()) {    if (option.getValue().equalsIgnoreCase(value))     return option;  }  return null;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/san-fabrics/{fabricId}/san-zones/activate") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep activateSanZones(@PathParam("id") URI id,@PathParam("fabricId") String fabricId) throws InternalException {  String task=UUID.randomUUID().toString();  String fabricWwn=null;  if (WWNUtility.isValidWWN(fabricId)) {    fabricWwn=fabricId;    fabricId=fabricId.replaceAll(":","");  }  ArgValidator.checkFieldUriType(id,NetworkSystem.class,"id");  NetworkSystem device=queryResource(id);  Operation op=_dbClient.createTaskOpStatus(NetworkSystem.class,device.getId(),task,ResourceOperationTypeEnum.ACTIVATE_SAN_ZONE);  auditOp(OperationTypeEnum.ACTIVATE_SAN_ZONE,true,AuditLogManager.AUDITOP_BEGIN,device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL(),device.getVersion(),device.getUptime());  NetworkController controller=getNetworkController(device.getSystemType());  controller.activateSanZones(device.getId(),fabricId,fabricWwn,task);  return toTask(device,task,op);}  }
class C{  private static void fill(DTSweepContext tcx,AdvancingFrontNode node){  DelaunayTriangle triangle=new DelaunayTriangle(node.prev.point,node.point,node.next.point);  triangle.markNeighbor(node.prev.triangle);  triangle.markNeighbor(node.triangle);  tcx.addToList(triangle);  node.prev.next=node.next;  node.next.prev=node.prev;  tcx.removeNode(node);  if (!legalize(tcx,triangle)) {    tcx.mapTriangleToNodes(triangle);  }}  }
class C{  public Node(Node parent,Object name,Map attributes,Object value){  this.parent=parent;  this.name=name;  this.attributes=attributes;  this.value=value;  if (parent != null) {    getParentList(parent).add(this);  }}  }
class C{  private void appendToPass(DetectorFactory factory,AnalysisPass pass){  pass.append(factory);}  }
class C{  public void rawLine(String line){  checkArgument(StringUtils.isNotBlank(line),"Cannot send empty line to server: '%s'",line);  checkArgument(bot.isConnected(),"Not connected to server");  writeLock.lock();  try {    long curNanos=System.nanoTime();    while (lastSentLine + delayNanos > curNanos) {      writeNowCondition.await(lastSentLine + delayNanos - curNanos,TimeUnit.NANOSECONDS);      curNanos=System.nanoTime();    }    log.info(OUTPUT_MARKER,line);    Utils.sendRawLineToServer(bot,line);    lastSentLine=System.nanoTime();  } catch (  IOException e) {    throw new RuntimeException("IO exception when sending line to server, is the network still up? " + exceptionDebug(),e);  }catch (  InterruptedException e) {    throw new RuntimeException("Couldn't pause thread for message delay. " + exceptionDebug(),e);  }catch (  Exception e) {    throw new RuntimeException("Could not send line to server. " + exceptionDebug(),e);  } finally {    writeLock.unlock();  }}  }
class C{  public void stop(){  mVibrator=null;  mContext.getContentResolver().unregisterContentObserver(mContentObserver);}  }
class C{  public static Throwable shouldFailWithCause(Class expectedCause,Closure code){  if (expectedCause == null) {    fail("The expectedCause class cannot be null");  }  Throwable cause=null;  Throwable orig=null;  int level=0;  try {    code.call();  } catch (  GroovyRuntimeException gre) {    orig=ScriptBytecodeAdapter.unwrap(gre);    cause=orig.getCause();  }catch (  Throwable e) {    orig=e;    cause=orig.getCause();  }  if (orig != null && cause == null) {    fail("Closure " + code + " was expected to fail due to a nested cause of type "+ expectedCause.getName()+ " but instead got a direct exception of type "+ orig.getClass().getName()+ " with no nested cause(s). Code under test has a bug or perhaps you meant shouldFail?");  }  while (cause != null && !expectedCause.isInstance(cause) && cause != cause.getCause() && level < MAX_NESTED_EXCEPTIONS) {    cause=cause.getCause();    level++;  }  if (orig == null) {    fail("Closure " + code + " should have failed with an exception having a nested cause of type "+ expectedCause.getName());  } else   if (cause == null || !expectedCause.isInstance(cause)) {    fail("Closure " + code + " should have failed with an exception having a nested cause of type "+ expectedCause.getName()+ ", instead found these Exceptions:\n"+ buildExceptionList(orig));  }  return cause;}  }
class C{  public void shouldNotContain(String notExpectedString){  if (stdout.contains(notExpectedString)) {    reportDiagnosticSummary();    throw new RuntimeException("'" + notExpectedString + "' found in stdout \n");  }  if (stderr.contains(notExpectedString)) {    reportDiagnosticSummary();    throw new RuntimeException("'" + notExpectedString + "' found in stderr \n");  }}  }
class C{  private void pushFile(String file,String encoding,InputStreamReader reader) throws JasperException, FileNotFoundException {  String longName=file;  int fileid=registerSourceFile(longName);  if (fileid == -1) {    err.jspError("jsp.error.file.already.registered",file);  }  currFileId=fileid;  try {    CharArrayWriter caw=new CharArrayWriter();    char buf[]=new char[1024];    for (int i=0; (i=reader.read(buf)) != -1; )     caw.write(buf,0,i);    caw.close();    if (current == null) {      current=new Mark(this,caw.toCharArray(),fileid,getFile(fileid),master,encoding);    } else {      current.pushStream(caw.toCharArray(),fileid,getFile(fileid),longName,encoding);    }  } catch (  Throwable ex) {    log.log(Level.SEVERE,"Exception parsing file ",ex);    popFile();    err.jspError("jsp.error.file.cannot.read",file);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      Exception any) {      }    }  }}  }
class C{  public String randomAlphaMixedNumericSpecial(int length){  return randomString(alphaMixedNumericSpecial(),length);}  }
class C{  public void remove(Component comp){  int oldCount=getComponentCount();  super.remove(comp);  if (oldCount == getComponentCount()) {    getContentPane().remove(comp);  }}  }
class C{  protected void editClassifier(){  GenericObjectEditorDialog dialog;  String classifier;  if (m_ListClassifiers.getList().getSelectedIndex() == -1)   return;  dialog=getGOEDialog(MultiLabelClassifier.class,new BR());  dialog.setTitle("Edit classifier");  classifier=m_ModelClassifiers.get(m_ListClassifiers.getList().getSelectedIndex());  try {    dialog.setCurrent(OptionUtils.fromCommandLine(MultiLabelClassifier.class,classifier));  } catch (  Exception e) {    handleException("Failed to edit classifier: " + classifier,e);  }  dialog.setLocationRelativeTo(this);  dialog.setVisible(true);  if (dialog.getResult() != GenericObjectEditorDialog.APPROVE_OPTION)   return;  m_ModelClassifiers.setElementAt(OptionUtils.toCommandLine(dialog.getCurrent()),m_ListClassifiers.getList().getSelectedIndex());  m_Modified=true;  updateButtons();}  }
class C{  int[] findNearestArea(int pixelX,int pixelY,int spanX,int spanY,int[] result){  return findNearestArea(pixelX,pixelY,spanX,spanY,spanX,spanY,false,result,null);}  }
class C{  public static void checkColumnDimension(double[][] M,int n){  for (int i=0; i < M.length; i++)   if (M[i].length != n)   throwError("row " + i + " have "+ M[i].length+ " columns instead of "+ n+ " columns expected.");}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  int width=MeasureSpec.getSize(widthMeasureSpec);  int height=MeasureSpec.getSize(heightMeasureSpec);  if (SensorSize != null) {    boolean lsdisplay=(getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE);    boolean lsnative=((NativeRotation == 0) || (NativeRotation == 180));    boolean lssensor=(!lsnative) ^ ((SensorRotation == 0) || (SensorRotation == 180));    SwapAxes=!(lsnative ^ lssensor ^ lsdisplay);    int pwidth=(SwapAxes) ? SensorSize.getWidth() : SensorSize.getHeight();    int pheight=(SwapAxes) ? SensorSize.getHeight() : SensorSize.getWidth();    float xscale=(float)width / (float)pwidth;    float yscale=(float)height / (float)pheight;    float scale=(xscale < yscale) ? xscale : yscale;    width=(int)(scale * (float)pwidth);    height=(int)(scale * (float)pheight);    DisplaySize=new Size(width,height);    setMeasuredDimension(width,height);  }}  }
class C{  @SuppressWarnings("unchecked") public void add(IgniteInternalFuture<T> fut){  assert fut != null;synchronized (sync) {    if (futs == null)     futs=fut; else     if (futs instanceof IgniteInternalFuture) {      Collection<IgniteInternalFuture> futs0=new ArrayList<>(4);      futs0.add((IgniteInternalFuture)futs);      futs0.add(fut);      futs=futs0;    } else     ((Collection<IgniteInternalFuture>)futs).add(fut);  }  fut.listen(this);  if (isCancelled()) {    try {      fut.cancel();    } catch (    IgniteCheckedException e) {      onDone(e);    }  }}  }
class C{  public ESQueryState(Client client,Statement statement) throws SQLException {  this.client=client;  this.statement=statement;  this.props=statement.getConnection().getClientInfo();  this.splitRS=Utils.getBooleanProp(props,Utils.PROP_RESULTS_SPLIT,false);  this.fetchSize=Utils.getIntProp(props,Utils.PROP_FETCH_SIZE,10000);  if (splitRS)   maxRowsRS=fetchSize;}  }
class C{  public static void shouldNotHappen(Exception ex) throws AssertionFailedException {  throw new AssertionFailedException(ex);}  }
class C{  public List peek(int batchSize,int timeToWait) throws InterruptedException {  long start=System.currentTimeMillis();  long end=start + timeToWait;  if (logger.isTraceEnabled()) {    logger.trace("{}: Peek start time={} end time={} time to wait={}",this,start,end,timeToWait);  }  List result=doReturn(batchSize,batchSize);  if (result != null) {    return result;  }  for (; ; ) {    region.getCache().getCancelCriterion().checkCancelInProgress(null);    result=doReturn(batchSize,batchSize);    if (result != null) {      return result;    }    long currentTime=System.currentTimeMillis();    if (logger.isTraceEnabled()) {      logger.trace("{}: Peek current time: {}",this,currentTime);    }    if (timeToWait == -1 || currentTime >= end) {      if (logger.isTraceEnabled()) {        logger.trace("{}: Peek timed out",this);      }      result=doReturn(0,batchSize);      Assert.assertTrue(result != null);      return result;    }    if (logger.isTraceEnabled()) {      logger.trace("{}: Peek continuing",this);    }    boolean interrupted=Thread.interrupted();    try {      Thread.sleep(50);    } catch (    InterruptedException e) {      interrupted=true;      this.region.getCancelCriterion().checkCancelInProgress(null);    } finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public UserProfile read(){  return new UserProfile(null,null,null,null,null,mRcsSettings.getXdmServer(),null,mRcsSettings.getUserProfileImsPassword(),mRcsSettings.getImConferenceUri(),mRcsSettings);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Result)) {    return false;  }  Result otherResult=(Result)o;  if (otherResult.getHypothesis().equals(this.getHypothesis())) {    return true;  } else {    return false;  }}  }
class C{  public void clearViewCached(int parentId,int viewId){  mCacheView.clearViewCached(parentId,viewId);}  }
class C{  public static Collection<String> parseStringList(String stringList,String delimiter){  if (stringList == null)   return Collections.emptyList();  if (!stringList.contains(delimiter))   return Lists.newArrayList(stringList);  String[] array=stringList.split(delimiter);  List<String> list=new ArrayList<>(array.length);  for (  String s : array) {    list.add(s.trim());  }  return list;}  }
class C{  public boolean verify(String hostname,String session){  return (true);}  }
class C{  public static void main(String[] args){  try {    GttService service=new GttService("sample.gtt.GttClient");    if (args.length >= 1 && NAME_TO_COMMAND_MAP.get(args[0]) == GttCommand.LOGIN) {      GttCommand.LOGIN.execute(service,args);    }    BufferedReader in=new BufferedReader(new InputStreamReader(System.in));    while (true) {      System.out.print(USER_PROMPT);      System.out.flush();      String userInput=in.readLine();      System.out.println();      String[] commandArgs=userInput.split("\\s+");      GttCommand command=NAME_TO_COMMAND_MAP.get(commandArgs[0]);      if (command != null) {        command.execute(service,commandArgs);      } else {        System.out.println("Sorry I did not understand that.");      }    }  } catch (  IOException ioe) {    ioe.printStackTrace();  }}  }
class C{  public static BufferedImage readImageFromYUVorGray(ImageInputStream in) throws IOException {  ImageReader r=createNativeJPEGReader();  r.setInput(in);  BufferedImage img=r.read(0);  return img;}  }
class C{  @SuppressWarnings("deprecation") private void updateUi(){  View waypointView=getView().findViewById(R.id.marker_detail_waypoint);  View statisticsView=getView().findViewById(R.id.marker_detail_statistics);  boolean isWaypoint=waypoint.getType() == WaypointType.WAYPOINT;  waypointView.setVisibility(isWaypoint ? View.VISIBLE : View.GONE);  statisticsView.setVisibility(isWaypoint ? View.GONE : View.VISIBLE);  if (isWaypoint) {    String photoUrl=waypoint.getPhotoUrl();    boolean hasPhoto=photoUrl != null && !photoUrl.equals("");    photo.setVisibility(hasPhoto ? View.VISIBLE : View.GONE);    textGradient.setVisibility(hasPhoto ? View.VISIBLE : View.GONE);    waypointInfo.setVisibility(View.VISIBLE);    if (hasPhoto) {      handler.removeCallbacks(hideText);      Display defaultDisplay=getActivity().getWindowManager().getDefaultDisplay();      PhotoUtils.setImageVew(photo,Uri.parse(photoUrl),defaultDisplay.getWidth(),defaultDisplay.getHeight(),true);      handler.postDelayed(hideText,HIDE_TEXT_DELAY);    }    setName(R.id.marker_detail_waypoint_name,hasPhoto);    TextView category=(TextView)getView().findViewById(R.id.marker_detail_waypoint_category);    ListItemUtils.setTextView(getActivity(),category,StringUtils.getCategory(waypoint.getCategory()),hasPhoto);    TextView description=(TextView)getView().findViewById(R.id.marker_detail_waypoint_description);    ListItemUtils.setTextView(getActivity(),description,waypoint.getDescription(),hasPhoto);    setLocation(R.id.marker_detail_waypoint_location,hasPhoto);  } else {    setName(R.id.marker_detail_statistics_name,false);    setLocation(R.id.marker_detail_statistics_location,false);    Track track=myTracksProviderUtils.getTrack(waypoint.getTrackId());    ActivityType activityType=track != null ? CalorieUtils.getActivityType(getActivity(),track.getCategory()) : ActivityType.INVALID;    StatsUtils.setTripStatisticsValues(getActivity(),null,getView(),waypoint.getTripStatistics(),activityType,null);    StatsUtils.setLocationValues(getActivity(),null,getView(),waypoint.getLocation(),false);  }}  }
class C{  private void labelIncompleteNodes(){  int nodeCount=0;  for (Iterator ni=graph.getNodes().iterator(); ni.hasNext(); ) {    Node n=(Node)ni.next();    Label label=n.getLabel();    if (n.isIsolated()) {      nodeCount++;      if (label.isNull(0))       labelIncompleteNode(n,0); else       labelIncompleteNode(n,1);    }    ((DirectedEdgeStar)n.getEdges()).updateLabelling(label);  }}  }
class C{  protected static ProgramBlock recompile(OptNode n) throws DMLRuntimeException {  ProgramBlock pbNew=null;  try {    if (n.getNodeType() == NodeType.HOP) {      OptTreePlanMappingAbstract map=OptTreeConverter.getAbstractPlanMapping();      long pid=map.getMappedParentID(n.getID());      Object[] o=map.getMappedProg(pid);      StatementBlock sbOld=(StatementBlock)o[0];      ProgramBlock pbOld=(ProgramBlock)o[1];      LopProperties.ExecType oldtype=null;      Hop hop=(Hop)map.getMappedHop(n.getID());      hop.setForcedExecType(n.getExecType().toLopsExecType());      hop.setLops(null);      Dag<Lop> dag=new Dag<Lop>();      for (      Hop hops : sbOld.get_hops()) {        hops.resetVisitStatus();        Recompiler.rClearLops(hops);        Lop lops=hops.constructLops();        lops.addToDag(dag);      }      ArrayList<Instruction> newInst=dag.getJobs(sbOld,ConfigurationManager.getDMLConfig());      pbNew=new ProgramBlock(pbOld.getProgram());      pbNew.setInstructions(newInst);      hop.setForcedExecType(oldtype);    } else     if (n.getNodeType() == NodeType.PARFOR) {      OptTreePlanMappingAbstract map=OptTreeConverter.getAbstractPlanMapping();      ParForProgramBlock pb=(ParForProgramBlock)map.getMappedProg(n.getID())[1];      pbNew=ProgramConverter.createShallowCopyParForProgramBlock(pb,pb.getProgram());      ((ParForProgramBlock)pbNew).setExecMode(n.getExecType().toParForExecMode());    } else {      throw new DMLRuntimeException("Unexpected node type.");    }  } catch (  Exception ex) {    throw new DMLRuntimeException(ex);  }  return pbNew;}  }
class C{  @Override public String toString(){  return ByteArrayUtils.toHexString(id);}  }
class C{  public static BindingsConfigurationProvider doBind(BindingsConfigurationProvider provider){  return provider.bindAndRequire(StatusMonitorService.class,StatusMonitorServiceImpl.class).require(BasicInfoSchemaTablesService.class).require(ServerSchemaTablesService.class);}  }
class C{  public static void markPsiFileForUndo(@NotNull final PsiFile file){  Project project=file.getProject();  final Document document=PsiDocumentManager.getInstance(project).getDocument(file);  if (document == null)   return;  CommandProcessor.getInstance().addAffectedDocuments(project,document);}  }
class C{  public static void init(int numUser,Calendar cal,boolean traceFlag,double periodBetweenEvents){  if (periodBetweenEvents <= 0) {    throw new IllegalArgumentException("The minimal time between events should be positive, but is:" + periodBetweenEvents);  }  init(numUser,cal,traceFlag);  minTimeBetweenEvents=periodBetweenEvents;}  }
class C{  @Override public JettySolrRunner createJetty(File solrHome,String dataDir,String shardList,String solrConfigOverride,String schemaOverride) throws Exception {  return createProxiedJetty(solrHome,dataDir,shardList,solrConfigOverride,schemaOverride);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String propV=getString(stack);  String propN=getString(stack);  Agent fav=(Agent)stack.pop();  if (Permissions.hasPermission(Permissions.PERMISSION_EDITMETADATA,stack.getUIMgr())) {    fav.setProperty(propN,propV);    sage.plugin.PluginEventManager.postEvent(sage.plugin.PluginEventManager.FAVORITE_MODIFIED,new Object[]{sage.plugin.PluginEventManager.VAR_FAVORITE,fav});  }  return null;}  }
class C{  public static String join(Object[] list,String delim){  return join(list,delim,false);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  @SuppressWarnings("unchecked") @SkipValidation private void prepareWardDropDownData(final boolean zoneExists,final boolean wardExists){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Entered into prepareWardDropDownData method");    LOGGER.debug("Zone exists ? : " + zoneExists + ", "+ "Ward exists ? : "+ wardExists);  }  if (zoneExists && wardExists) {    List<Boundary> wardNewList=new ArrayList<Boundary>();    wardNewList=boundaryService.getActiveChildBoundariesByBoundaryId(getZoneId());    addDropdownData("wardList",wardNewList);  } else   addDropdownData("wardList",Collections.EMPTY_LIST);  if (LOGGER.isDebugEnabled())   LOGGER.debug("Exit from prepareWardDropDownData method");}  }
class C{  public String format(byte val){  DecimalFormat df=getByteFormat();  if (df != null) {    return df.format(val);  }  return Byte.toString(val);}  }
class C{  public void addTab(String title,Icon icon,Component component,String tip){  insertTab(title,icon,component,tip,pages.size());}  }
class C{  public void swapRows(int r1,int r2){  if (r1 < 0 || rows <= r1 || r2 < 0 || rows <= r2) {    throw new IllegalArgumentException("Row index out of range");  }  byte[] tmp=data[r1];  data[r1]=data[r2];  data[r2]=tmp;}  }
class C{  public static List sort(Collection entries,Sort sort){  final List list=new LinkedList(entries);  if (sort == null) {    log.info("No sort was specified, so we are just going to return the data as-is");    return list;  }  final List<Order> orders=new LinkedList<>();  for (  Sort.Order order : sort) {    final SortDirection direction=order.getDirection().equals(Sort.Direction.ASC) ? SortDirection.ASCENDING : SortDirection.DESCENDING;    final NullHandling nullHandling;switch (order.getNullHandling()) {case NULLS_FIRST:      nullHandling=NullHandling.NULLS_FIRST;    break;case NULLS_LAST:  nullHandling=NullHandling.NULLS_LAST;break;default :nullHandling=NullHandling.DEFAULT;break;}final Order derivedOrder=new ImmutableOrder(direction,order.getProperty(),nullHandling);orders.add(derivedOrder);}log.info("Sorting the retrieved data: " + orders);PropertyComparator.sort(list,new ImmutableSort(orders));return list;}  }
class C{  <D>AttributeMetadata<D> bind(ElementKey<?,?> parent,AttributeKey<D> key,MetadataContext context){  Preconditions.checkNotNull(parent,"parent");  Preconditions.checkNotNull(key,"key");  TransformKey transformKey=TransformKey.forTransform(parent,key,context);  @SuppressWarnings("unchecked") AttributeMetadata<D> transformed=(AttributeMetadata<D>)cache.get(transformKey);  if (transformed == null) {    AttributeTransform transform=getTransform(transformKey,key);    transformed=transform.toMetadata(schema,parent,key,context);    @SuppressWarnings("unchecked") AttributeMetadata<D> previous=(AttributeMetadata<D>)cache.putIfAbsent(transformKey,transformed);    if (previous != null) {      transformed=previous;    }  }  return transformed;}  }
class C{  protected void processResourceCharacteristicsRequest(SimEvent ev){  setDatacenterIdsList(CloudSim.getCloudResourceList());  setDatacenterCharacteristicsList(new HashMap<Integer,DatacenterCharacteristics>());  Log.printConcatLine(CloudSim.clock(),": ",getName(),": Cloud Resource List received with ",getDatacenterIdsList().size()," resource(s)");  for (  Integer datacenterId : getDatacenterIdsList()) {    sendNow(datacenterId,CloudSimTags.RESOURCE_CHARACTERISTICS,getId());  }}  }
class C{  public void testRedeployIsolatedMode() throws Exception {  depMode=DeploymentMode.ISOLATED;  processTest(true,false);}  }
class C{  public static ReilInstruction createLdm(final Address address,final ReilOperand loadSource,final ReilOperand loadTarget){  return new ReilInstruction(address,ReilMnemonics.LDM,loadSource,ReilOperand.EMPTY_OPERAND,loadTarget);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.695 -0400",hash_original_method="AC74491EC46A5F4D5E2635850D49BE12",hash_generated_method="74563480FCB539C53D13497F29297E99") public TaggedIOException(IOException original,Serializable tag){  super(original.getMessage(),original);  this.tag=tag;}  }
class C{  public boolean isDialogsLoaded(){  return isDialogsLoaded;}  }
class C{  private static void extract(String s,int start,ExtractFloatResult result){  int currentIndex=start;  boolean foundSeparator=false;  result.mEndWithNegSign=false;  for (; currentIndex < s.length(); currentIndex++) {    char currentChar=s.charAt(currentIndex);switch (currentChar) {case ' ':case ',':      foundSeparator=true;    break;case '-':  if (currentIndex != start) {    foundSeparator=true;    result.mEndWithNegSign=true;  }break;}if (foundSeparator) {break;}}result.mEndPosition=currentIndex;}  }
class C{  public E pollFirst(){  if (size == 0)   return null;  return removeFirst();}  }
class C{  private void resolvePhis(AbstractBlockBase<?> successorBlock,AbstractBlockBase<?> block){  phiVisitor.loads.clear();  SSAUtil.forEachPhiValuePair(getLIR(),successorBlock,block,phiVisitor);  if (phiVisitor.loads.size() > 0) {    ArrayList<LIRInstruction> instructions=getLIR().getLIRforBlock(block);    instructions.addAll(instructions.size() - 1,phiVisitor.loads);  }}  }
class C{  protected void retrieveExtras(){  Bundle extras=getIntent().getExtras();  selectedIndex=extras.getInt(EXTRA_INDEX,0);}  }
class C{  private void updateWorksheet(String oldTitle,String newTitle,int rowCount,int colCount) throws IOException, ServiceException {  WorksheetFeed worksheetFeed=service.getFeed(worksheetFeedUrl,WorksheetFeed.class);  for (  WorksheetEntry worksheet : worksheetFeed.getEntries()) {    String currTitle=worksheet.getTitle().getPlainText();    if (currTitle.equals(oldTitle)) {      worksheet.setTitle(new PlainTextConstruct(newTitle));      worksheet.setRowCount(rowCount);      worksheet.setColCount(colCount);      worksheet.update();      System.out.println("Worksheet updated.");      return;    }  }  System.out.println("Worksheet not found: " + oldTitle);}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else       if (object != null) {        results.put(key,object.toString());      } else {        results.put(key,"null");      }    }  }  return results;}  }
class C{  public ColorList invert(){  for (  TColor c : colors) {    c.invert();  }  return this;}  }
class C{  public boolean isAfter(ReadableInstant instant){  if (instant == null) {    return isAfterNow();  }  return isAfter(instant.getMillis());}  }
class C{  public HamerlyKMeans(DistanceMetric dm,SeedSelectionMethods.SeedSelection seedSelection){  this(dm,seedSelection,new XORWOW());}  }
class C{  public String formatArray(Object array){  return formatArray(array,", "," and ");}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  public static PropertyValuesHolder ofFloat(String propertyName,float... values){  return new FloatPropertyValuesHolder(propertyName,values);}  }
class C{  public boolean hasPlayerAchievement(Player player,String name){  boolean result=false;  String query;  if (name.contains("'")) {    query="SELECT achievement FROM " + tablePrefix + "achievements WHERE playername = '"+ player.getUniqueId()+ "' AND (achievement = ? OR achievement = ?)";  } else {    query="SELECT achievement FROM " + tablePrefix + "achievements WHERE playername = '"+ player.getUniqueId()+ "' AND achievement = ?";  }  Connection conn=getSQLConnection();  try (PreparedStatement prep=conn.prepareStatement(query)){    if (name.contains("'")) {      prep.setString(1,name);      prep.setString(2,name.replace("'","''"));    } else {      prep.setString(1,name);    }    if (prep.executeQuery().next())     result=true;  } catch (  SQLException e) {    plugin.getLogger().log(Level.SEVERE,"SQL error while checking achievement: ",e);  }  return result;}  }
class C{  public int size(){  return this.elementSize;}  }
class C{  public void addCallbackPush(ICallback callback){  callbacksPush.add(callback);}  }
class C{  public String toString(){  String endianness;  if (rrdFile.isBigEndian())   endianness="Big"; else   endianness="Little";  StringBuilder sb=new StringBuilder(endianness + " endian" + ", "+ rrdFile.getBits()+ " bits\n");  sb.append(header.toString());  sb.append(", lastupdate: ");  sb.append(lastUpdate.getTime() / 1000);  for (  DataSource ds : dataSources) {    sb.append("\n\t");    sb.append(ds.toString());  }  for (  Archive archive : archives) {    sb.append("\n\t");    sb.append(archive.toString());  }  return sb.toString();}  }
class C{  static public String fieldSig2MethodType(String fieldSig){  char c=fieldSig.charAt(0);switch (c) {case 'Z':    return "Boolean";case 'B':  return "Byte";case 'C':return "Char";case 'S':return "Short";case 'I':return "Int";case 'J':return "Long";case 'F':return "Float";case 'D':return "Double";default :return "UNKNOWN";}}  }
class C{  public static boolean namesEqual(@Nullable String name1,@Nullable String name2){  if (name1 == name2)   return true;  if (name1 == null || name2 == null)   return false;  return PATH_HASHING_STRATEGY.equals(name1,name2);}  }
class C{  public ObjectMatrix3D like(int slices,int rows,int columns){  return new DenseObjectMatrix3D(slices,rows,columns);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void validateCounter(String typeStr,long value){  for (  DebugCounterResource dcInfo : dc.getAllCounterValues()) {    if (dcInfo.getCounterHierarchy().contains("/" + typeStr)) {      assertEquals(Long.valueOf(value),dcInfo.getCounterValue());    }  }}  }
class C{  public static void print(MyString2 str){  print(str.toChars());}  }
class C{  @Override public boolean job(){  if (sb.crawlQueues.coreCrawlJobSize() > this.chunksize) {    return false;  }  if (this.urlstack.isEmpty()) {    return processSingleQuery();  }  return feedToCrawler();}  }
class C{  public SortedSetDocValuesFacetCounts(SortedSetDocValuesReaderState state,FacetsCollector hits) throws IOException {  this.state=state;  this.field=state.getField();  dv=state.getDocValues();  counts=new int[state.getSize()];  count(hits.getMatchingDocs());}  }
class C{  public boolean isDrawHoleEnabled(){  return mDrawHole;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.597 -0400",hash_original_method="0D98049E3DCF0B0B79B4780ADF666819",hash_generated_method="A97063EB3364CDEDB3BADB876C5562D6") public IconMenuView(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.IconMenuView,0,0);  mRowHeight=a.getDimensionPixelSize(com.android.internal.R.styleable.IconMenuView_rowHeight,64);  mMaxRows=a.getInt(com.android.internal.R.styleable.IconMenuView_maxRows,2);  mMaxItems=a.getInt(com.android.internal.R.styleable.IconMenuView_maxItems,6);  mMaxItemsPerRow=a.getInt(com.android.internal.R.styleable.IconMenuView_maxItemsPerRow,3);  mMoreIcon=a.getDrawable(com.android.internal.R.styleable.IconMenuView_moreIcon);  a.recycle();  a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.MenuView,0,0);  mItemBackground=a.getDrawable(com.android.internal.R.styleable.MenuView_itemBackground);  mHorizontalDivider=a.getDrawable(com.android.internal.R.styleable.MenuView_horizontalDivider);  mHorizontalDividerRects=new ArrayList<Rect>();  mVerticalDivider=a.getDrawable(com.android.internal.R.styleable.MenuView_verticalDivider);  mVerticalDividerRects=new ArrayList<Rect>();  mAnimations=a.getResourceId(com.android.internal.R.styleable.MenuView_windowAnimationStyle,0);  a.recycle();  if (mHorizontalDivider != null) {    mHorizontalDividerHeight=mHorizontalDivider.getIntrinsicHeight();    if (mHorizontalDividerHeight == -1)     mHorizontalDividerHeight=1;  }  if (mVerticalDivider != null) {    mVerticalDividerWidth=mVerticalDivider.getIntrinsicWidth();    if (mVerticalDividerWidth == -1)     mVerticalDividerWidth=1;  }  mLayout=new int[mMaxRows];  setWillNotDraw(false);  setFocusableInTouchMode(true);  setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);}  }
class C{  protected List<LaunchableTask> generateLaunchableTasks(Map<Protos.Offer,TaskResources> offerResources){  List<LaunchableTask> tasks=new LinkedList<>();  if (isTerminated) {    LOG.info("Job has been killed");    return tasks;  }  while (!toScheduleTasks.isEmpty()) {    String taskId=toScheduleTasks.poll();    BaseContainer baseContainer=containersInfo.get(TaskUtils.getContainerIndexForTaskId(taskId));    TaskResources neededResources=new TaskResources(baseContainer.cpu,baseContainer.memInMB,baseContainer.diskInMB,baseContainer.ports);    boolean isMatched=false;    Iterator<Map.Entry<Protos.Offer,TaskResources>> it=offerResources.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<Protos.Offer,TaskResources> kv=it.next();      Protos.Offer offer=kv.getKey();      TaskResources resources=kv.getValue();      if (resources.canSatisfy(neededResources)) {        resources.consume(neededResources);        List<Integer> freePorts=new ArrayList<>();        for (int port=(int)(neededResources.getPortsHold().get(0).rangeStart); port <= (int)(neededResources.getPortsHold().get(0).rangeEnd); port++) {          freePorts.add(port);        }        tasks.add(new LaunchableTask(taskId,baseContainer,offer,freePorts));        isMatched=true;        break;      }    }    if (!isMatched) {      LOG.info(String.format("Insufficient resources remaining for baseContainer: %s, " + "will append to queue. Need: [%s]",taskId,neededResources.toString()));      toScheduleTasks.add(taskId);      break;    }  }  return tasks;}  }
class C{  private void testSortedAscending(List<VOTag> voTags){  for (int i=0; i < voTags.size(); i++) {    VOTag voTag=voTags.get(i);    if (i >= 1) {      VOTag before=voTags.get(i - 1);      Assert.assertTrue(voTag.getValue().compareTo(before.getValue()) > 0);    }  }}  }
class C{  public static boolean cgSourceVolumesContainsAll(DbClient dbClient,URI consistencyGroupUri,Collection<URI> volumeIDs){  boolean cgSourceVolumesContainsAll=false;  if (consistencyGroupUri != null) {    List<URI> sourceVolumeIDs=new ArrayList<URI>();    BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,consistencyGroupUri);    _log.info("Inspecting consisency group: " + cg.getLabel() + " to see if request contains all source volumes");    List<Volume> sourceVolumes=getCgSourceVolumes(consistencyGroupUri,dbClient);    if (sourceVolumes != null) {      for (      Volume srcVolume : sourceVolumes) {        sourceVolumeIDs.add(srcVolume.getId());      }    }    sourceVolumeIDs.removeAll(volumeIDs);    if (!sourceVolumeIDs.isEmpty()) {      _log.info("Found that the volumes requested do not contain all source volumes in the consistency group, namely: " + Joiner.on(',').join(sourceVolumeIDs));    } else {      _log.info("Found that all of the source volumes in the consistency group are in the request.");      cgSourceVolumesContainsAll=true;    }  }  return cgSourceVolumesContainsAll;}  }
class C{  public boolean isShowXAxisValues(){  return showXAxisValues;}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  super.removeUpdate(changes,adjustAllocation(a),f);  updateVisibilityModel();}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public RxPeople gender(String gender){  mGender=gender;  return mRxPeople;}  }
class C{  public void sphere(float r){  if ((sphereDetailU < 3) || (sphereDetailV < 2)) {    sphereDetail(30);  }  edge(false);  beginShape(TRIANGLE_STRIP);  for (int i=0; i < sphereDetailU; i++) {    normal(0,-1,0);    vertex(0,-r,0);    normal(sphereX[i],sphereY[i],sphereZ[i]);    vertex(r * sphereX[i],r * sphereY[i],r * sphereZ[i]);  }  normal(0,-r,0);  vertex(0,-r,0);  normal(sphereX[0],sphereY[0],sphereZ[0]);  vertex(r * sphereX[0],r * sphereY[0],r * sphereZ[0]);  endShape();  int v1, v11, v2;  int voff=0;  for (int i=2; i < sphereDetailV; i++) {    v1=v11=voff;    voff+=sphereDetailU;    v2=voff;    beginShape(TRIANGLE_STRIP);    for (int j=0; j < sphereDetailU; j++) {      normal(sphereX[v1],sphereY[v1],sphereZ[v1]);      vertex(r * sphereX[v1],r * sphereY[v1],r * sphereZ[v1++]);      normal(sphereX[v2],sphereY[v2],sphereZ[v2]);      vertex(r * sphereX[v2],r * sphereY[v2],r * sphereZ[v2++]);    }    v1=v11;    v2=voff;    normal(sphereX[v1],sphereY[v1],sphereZ[v1]);    vertex(r * sphereX[v1],r * sphereY[v1],r * sphereZ[v1]);    normal(sphereX[v2],sphereY[v2],sphereZ[v2]);    vertex(r * sphereX[v2],r * sphereY[v2],r * sphereZ[v2]);    endShape();  }  beginShape(TRIANGLE_STRIP);  for (int i=0; i < sphereDetailU; i++) {    v2=voff + i;    normal(sphereX[v2],sphereY[v2],sphereZ[v2]);    vertex(r * sphereX[v2],r * sphereY[v2],r * sphereZ[v2]);    normal(0,1,0);    vertex(0,r,0);  }  normal(sphereX[voff],sphereY[voff],sphereZ[voff]);  vertex(r * sphereX[voff],r * sphereY[voff],r * sphereZ[voff]);  normal(0,1,0);  vertex(0,r,0);  endShape();  edge(true);}  }
class C{  @Pure public static FPR lookup(int num){  return vals[num];}  }
class C{  public void createOutFile(String filePath) throws IOException {  this.outFile=new ExifInterface(filePath);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isOverwritingDefinition(Definition targetDefinition,Definition definition){  if (definition.getDefId() == -1)   throw new IllegalArgumentException("expect given Definition to have it's defId set");  return targetDefinition.getVariableName().equals(definition.getVariableName()) && targetDefinition.getDefId() != definition.getDefId();}  }
class C{  private static String[] composeList(MessageFormat format,String[] list){  if (list.length <= 3)   return list;  String[] listItems={list[0],list[1]};  String newItem=format.format(listItems);  String[] newList=new String[list.length - 1];  System.arraycopy(list,2,newList,1,newList.length - 1);  newList[0]=newItem;  return composeList(format,newList);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:12.058 -0500",hash_original_method="154D3A6011E860B522250E3541FB283D",hash_generated_method="ECA46341136F35A0D143427AC23AAAC1") public SocketTimeoutException(Throwable cause){  super(null,cause);}  }
class C{  public boolean toggleBookmark(int line) throws BadLocationException {  if (!isBookmarkingEnabled() || getBookmarkIcon() == null) {    return false;  }  GutterIconImpl[] icons=getTrackingIcons(line);  if (icons.length == 0) {    int offs=textArea.getLineStartOffset(line);    addOffsetTrackingIcon(offs,bookmarkIcon);    return true;  }  boolean found=false;  for (int i=0; i < icons.length; i++) {    if (icons[i].getIcon() == bookmarkIcon) {      removeTrackingIcon(icons[i]);      found=true;    }  }  if (!found) {    int offs=textArea.getLineStartOffset(line);    addOffsetTrackingIcon(offs,bookmarkIcon);  }  return !found;}  }
class C{  public void writeEnum(final int fieldNumber,final int value) throws IOException {  writeTag(fieldNumber,WireFormatNano.WIRETYPE_VARINT);  writeEnumNoTag(value);}  }
class C{  public void testBug22730682() throws Exception {  Properties connProps=getPropertiesFromTestsuiteUrl();  String host=connProps.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY,"localhost");  String port=connProps.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY,"3306");  final String currentHost=host + ":" + port;  final String dummyHost="bug22730682:12345";  final Properties props=new Properties();  Connection testConn;  final String lbConnGroup1="Bug22730682LB1";  props.setProperty("loadBalanceConnectionGroup",lbConnGroup1);  testConn=getLoadBalancedConnection(3,dummyHost,props);  assertEquals(2,ConnectionGroupManager.getActiveHostCount(lbConnGroup1));  assertTrue(ConnectionGroupManager.getActiveHostLists(lbConnGroup1).contains(dummyHost));  assertTrue(ConnectionGroupManager.getActiveHostLists(lbConnGroup1).contains(currentHost));  ConnectionGroupManager.removeHost(lbConnGroup1,dummyHost);  assertEquals(1,ConnectionGroupManager.getActiveHostCount(lbConnGroup1));  assertTrue(ConnectionGroupManager.getActiveHostLists(lbConnGroup1).contains(currentHost));  testConn.close();  final String lbConnGroup2="Bug22730682LB2";  props.setProperty("loadBalanceConnectionGroup",lbConnGroup2);  testConn=getLoadBalancedConnection(3,dummyHost,props);  assertEquals(2,ConnectionGroupManager.getActiveHostCount(lbConnGroup2));  assertTrue(ConnectionGroupManager.getActiveHostLists(lbConnGroup2).contains(dummyHost));  assertTrue(ConnectionGroupManager.getActiveHostLists(lbConnGroup2).contains(currentHost));  ConnectionGroupManager.removeHost(lbConnGroup2,dummyHost,true);  assertEquals(1,ConnectionGroupManager.getActiveHostCount(lbConnGroup2));  assertTrue(ConnectionGroupManager.getActiveHostLists(lbConnGroup2).contains(currentHost));  testConn.close();}  }
class C{  public void doCancel(){  m_brokerModel.onCancelAllRealtimeData();  if ((null != brokerDataRequestProgressMonitor) && !brokerDataRequestProgressMonitor.isDone()) {    brokerDataRequestProgressMonitor.cancel(true);  }  tradingdayPanel.killAllStrategyWorker();  refreshTradingdays(m_tradingdays);  this.setStatusBarMessage("Strategies and live data have been cancelled.",BasePanel.INFORMATION);}  }
class C{  static public IVariable[][] computeRequiredVarsForEachTail(final IRule rule,final int[] order){  if (order == null)   throw new IllegalArgumentException();  if (order.length != rule.getTailCount())   throw new IllegalArgumentException();  final int tailCount=rule.getTailCount();  final IVariable[][] a=new IVariable[tailCount][];  final Set<IVariable> constraintVars=new HashSet<IVariable>();  if (rule.getConstraintCount() > 0) {    final Iterator<IConstraint> constraints=rule.getConstraints();    while (constraints.hasNext()) {      final IConstraint c=constraints.next();      final Iterator<IVariable<?>> vars=BOpUtility.getSpannedVariables(c);      while (vars.hasNext()) {        constraintVars.add(vars.next());      }    }  }  for (int orderIndex=tailCount - 1; orderIndex >= 0; orderIndex--) {    final HashSet<IVariable> required=new HashSet<IVariable>();    if (orderIndex == tailCount - 1) {      final Iterator it=rule.getRequiredVariables();      while (it.hasNext()) {        required.add((IVariable)it.next());      }    } else {      final int nextTailIndex=order[orderIndex + 1];      final IPredicate nextPred=rule.getTail(nextTailIndex);      final int arity=nextPred.arity();      for (int j=0; j < arity; j++) {        final IVariableOrConstant t=nextPred.get(j);        if (t.isVar()) {          final IVariable v=(IVariable)t;          required.add(v);        }      }      if (nextPred instanceof IStarJoin) {        final IStarJoin starJoin=(IStarJoin)nextPred;        final Iterator<IVariable> it=starJoin.getConstraintVariables();        while (it.hasNext()) {          IVariable v=it.next();          required.add(v);        }      }      required.addAll(constraintVars);      final IVariable[] nextRequired=a[nextTailIndex];      for (      IVariable v : nextRequired) {        required.add(v);      }    }    final int tailIndex=order[orderIndex];    a[tailIndex]=required.toArray(new IVariable[required.size()]);    if (log.isDebugEnabled()) {      log.debug("requiredVars=" + Arrays.toString(a[tailIndex]) + ", orderIndex="+ orderIndex+ ", tailIndex="+ orderIndex+ ", pred="+ rule.getTail(tailIndex)+ ", rule="+ rule);    }  }  if (log.isDebugEnabled()) {    String[] s=new String[a.length];    for (int i=0; i < a.length; i++) {      s[i]=Arrays.toString(a[i]);    }    log.debug("requiredVars[]=" + Arrays.toString(s) + ", rule="+ rule);  }  return a;}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  public void zoomIn(){  zoomInAt(null);}  }
class C{  protected String createClassFieldName(String name){  return String.format(FORMAT_CLASS_FIELD_NAME,StringUtils.startUpperCase(name));}  }
class C{  public Map<String,String> mapAllStrings(String uri) throws IOException {  Map<String,String> strings=new HashMap<>();  Map<String,URL> resourcesMap=getResourcesMap(uri);  for (Iterator<Entry<String,URL>> iterator=resourcesMap.entrySet().iterator(); iterator.hasNext(); ) {    Entry<String,URL> entry=iterator.next();    String name=entry.getKey();    URL url=entry.getValue();    String value=readContents(url);    strings.put(name,value);  }  return strings;}  }
class C{  public DSAPrivateKeyImpl(DSAPrivateKeySpec keySpec){  super("DSA");  PrivateKeyInfo pki;  g=keySpec.getG();  p=keySpec.getP();  q=keySpec.getQ();  ThreeIntegerSequence threeInts=new ThreeIntegerSequence(p.toByteArray(),q.toByteArray(),g.toByteArray());  AlgorithmIdentifier ai=new AlgorithmIdentifier(AlgNameMapper.map2OID("DSA"),threeInts.getEncoded());  x=keySpec.getX();  pki=new PrivateKeyInfo(0,ai,ASN1Integer.getInstance().encode(x.toByteArray()),null);  setEncoding(pki.getEncoded());  params=new DSAParameterSpec(p,q,g);}  }
class C{  public void notNested(){  if (nested)   throw new AssertionError("FlatBuffers: object serialization must not be nested.");}  }
class C{  public void executeCharsToContentHandler(XPathContext xctxt,ContentHandler handler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException {  if (Arg0IsNodesetExpr()) {    int node=getArg0AsNode(xctxt);    if (DTM.NULL != node) {      DTM dtm=xctxt.getDTM(node);      dtm.dispatchCharactersEvents(node,handler,true);    }  } else {    XObject obj=execute(xctxt);    obj.dispatchCharactersEvents(handler);  }}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN}) public CatalogImageRestRep updateCatalogImage(@PathParam("id") URI id,CatalogImageUpdateParam param){  CatalogImage catalogImage=getCatalogImageById(id,true);  StorageOSUser user=getUserFromContext();  verifyAuthorizedInTenantOrg(uri(catalogImage.getTenant()),user);  validateParam(uri(catalogImage.getTenant()),param,catalogImage);  updateObject(catalogImage,param);  catalogImageManager.updateCatalogImage(catalogImage);  auditOpSuccess(OperationTypeEnum.UPDATE_CATALOG_IMAGE,catalogImage.auditParameters());  catalogImage=catalogImageManager.getCatalogImageById(catalogImage.getId());  return map(catalogImage);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void fixWhiteSpace(){  final int index=mOutputBuilder.length() - 1;  if (index >= 0) {    final char lastCharacter=mOutputBuilder.charAt(index);    if (!Character.isWhitespace(lastCharacter)) {      mOutputBuilder.append(" ");    }  }}  }
class C{  public CloseableStaticBitmap decodeJpeg(final EncodedImage encodedImage,int length,QualityInfo qualityInfo){  CloseableReference<Bitmap> bitmapReference=mPlatformDecoder.decodeJPEGFromEncodedImage(encodedImage,mBitmapConfig,length);  try {    return new CloseableStaticBitmap(bitmapReference,qualityInfo,encodedImage.getRotationAngle());  }  finally {    bitmapReference.close();  }}  }
class C{  public void visitEnd(){  if (cv != null) {    cv.visitEnd();  }}  }
class C{  public DefaultStateMachineContext(List<StateMachineContext<S,E>> childs,S state,E event,Map<String,Object> eventHeaders,ExtendedState extendedState,Map<S,S> historyStates,String id){  this.childs=childs;  this.state=state;  this.event=event;  this.eventHeaders=eventHeaders;  this.extendedState=extendedState;  this.historyStates=historyStates != null ? historyStates : new HashMap<S,S>();  this.id=id;}  }
class C{  protected int digit(int pos,int base){  char c=ch;  int result=Character.digit(c,base);  if (result >= 0 && c > 0x7f) {    log.error(pos + 1,"illegal.nonascii.digit");    ch="0123456789abcdef".charAt(result);  }  return result;}  }
class C{  @Override protected void createModel(){  InstanceManager.getOptionalDefault(jmri.AudioManager.class).ifPresent(null);  listeners=new AudioListenerTableDataModel();  buffers=new AudioBufferTableDataModel();  sources=new AudioSourceTableDataModel();  atp=new AudioTablePanel(listeners,buffers,sources,helpTarget());}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double x, y;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    int image1Min=(int)image1.getMinimumValue();    int image1Max=(int)image1.getMaximumValue();    int image1Range=image1Max - image1Min + 1;    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    int image2Min=(int)image2.getMinimumValue();    int image2Max=(int)image2.getMaximumValue();    int image2Range=image2Max - image2Min + 1;    long[][] contingencyTable=new long[image1Range][image2Range];    double[] data1, data2;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          contingencyTable[(int)(x - image1Min)][(int)(y - image2Min)]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    DecimalFormat df=new DecimalFormat("###,###,###,###");    String retstr=null;    retstr="CROSS-TABULATION REPORT\n\n";    retstr+="Input Image 1 (X):\t\t" + image1.getShortHeaderFile() + "\n";    retstr+="Input Image 2 (Y):\t\t" + image2.getShortHeaderFile() + "\n\n";    String contingency="\t\tImage 1\nImage 2";    for (int a=0; a < image1Range; a++) {      contingency+="\t" + (a + image1Min);    }    contingency+="\n";    for (int b=0; b < image2Range; b++) {      contingency+=(b + image2Min);      for (int a=0; a < image1Range; a++) {        contingency+="\t" + df.format(contingencyTable[a][b]);      }      contingency+="\n";    }    retstr+=contingency;    returnData(retstr);    image1.close();    image2.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void register(){  CommandCenter.register("displace",new DisplaceAction());}  }
class C{  public void testIntWithOverride() throws Exception {  ObjectMapper mapper=new ObjectMapper();  IntBean2 result=mapper.readValue(new StringReader("{\"v\":8}"),IntBean2.class);  assertEquals(9,result._v);}  }
class C{  boolean isEmpty(){  return fqnToClassEntryMap.isEmpty();}  }
class C{  public boolean isIsGroup(){  return isGroup;}  }
class C{  private void initializeIfBookmarkModelLoaded(){  if (mEnhancedBookmarksModel.isBookmarkModelLoaded()) {    mSearchView.onEnhancedBookmarkDelegateInitialized(this);    mDrawerListView.onEnhancedBookmarkDelegateInitialized(this);    mContentView.onEnhancedBookmarkDelegateInitialized(this);    if (mStateStack.isEmpty()) {      setState(UIState.createStateFromUrl(getUrlFromPreference(),mEnhancedBookmarksModel));    } else     if (mStateStack.peek().mState == UIState.STATE_LOADING) {      String url=mStateStack.pop().mUrl;      setState(UIState.createStateFromUrl(url,mEnhancedBookmarksModel));    }  } else {    mContentView.showLoadingUi();    mDrawerListView.showLoadingUi();    mContentView.showLoadingUi();    if (mStateStack.isEmpty() || mStateStack.peek().mState != UIState.STATE_LOADING) {      setState(UIState.createLoadingState(getUrlFromPreference()));    } else     if (!mStateStack.isEmpty()) {      setState(mStateStack.pop());    }  }}  }
class C{  public void abort(){  aborted=true;  if (waitingThread != null)   waitingThread.interrupt();}  }
class C{  public void testloadAuthenticationInformation() throws ConfigurationException {  AuthenticationInfo authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties");  assertNotNull(authInfo);  authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties");  assertNotNull(authInfo);  ConfigurationException configurationException=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.properties_DOES_NOT_EXIST");  } catch (  ConfigurationException ce) {    configurationException=ce;  }  assertNotNull(configurationException);}  }
class C{  public int read(char[] buffer,int offset,int size) throws IOException {  if (this.atEndOfData) {    return -1;  }  int charsRead=0;  if ((offset + size) > buffer.length) {    size=buffer.length - offset;  }  while (charsRead < size) {    char ch=this.reader.read();    if (ch == '?') {      char ch2=this.reader.read();      if (ch2 == '>') {        this.atEndOfData=true;        break;      }      this.reader.unread(ch2);    }    buffer[charsRead]=ch;    charsRead++;  }  if (charsRead == 0) {    charsRead=-1;  }  return charsRead;}  }
class C{  public InlineQueryResultCachedDocumentBuilder documentFileId(String documentFileId){  this.document_file_id=documentFileId;  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public void downloadArtwork(MediaFileType type){  artworkHelper.downloadArtwork(this,type);}  }
class C{  public void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem() && XMLCharacterRecognizer.isWhiteSpace(ch,start,length))   return;  String s=new String(ch,start,length);  Node n=m_currentNode.getLastChild();  if (n instanceof CDATASection)   ((CDATASection)n).appendData(s); else   if (n instanceof Comment)   ((Comment)n).appendData(s);}  }
class C{  public BitVector toBitVector(){  return new BitVector(bits,size());}  }
class C{  static public IString[] toIStringArray(Collection<String> strings){  IString[] istrs=new IString[strings.size()];  int i=0;  for (  String str : strings) {    istrs[i++]=new IString(str);  }  return istrs;}  }
class C{  protected EntryLink(ElementKey<?,? extends EntryLink> key){  super(key);}  }
class C{  public void advanceToNextRound(){  if (scheduleState.size() == round + 1) {    scheduleState.add(scheduleState.get(round).copy());  } else {    scheduleState.get(round + 1).min(scheduleState.get(round));  }  round++;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void writeMapEnd() throws IOException {  if (SIZE < _offset + 32)   flushBuffer();  _buffer[_offset++]=(byte)BC_END;}  }
class C{  public final boolean peekOrFalse(){  return (m_index > -1) ? m_values[m_index] : false;}  }
class C{  private void loadCorpus(ParallelCorpus corpus){  logger.info("Flattening parallel corpus");  TimeKeeper timer=TimingUtils.start();  numSentences=corpus.size();  int numSourcePositions=corpus.numSourcePositions();  int numTargetPositions=corpus.numTargetPositions();  int srcLength=numSourcePositions + numSentences;  srcBitext=new int[srcLength];  f2e=new int[srcLength];  int tgtLength=numTargetPositions + numSentences;  tgtBitext=new int[tgtLength];  e2f=new int[tgtLength];  int srcOffset=0;  int tgtOffset=0;  for (  AlignedSentence sentence : corpus) {    System.arraycopy(sentence.source,0,srcBitext,srcOffset,sentence.sourceLength());    System.arraycopy(sentence.f2e,0,f2e,srcOffset,sentence.f2e.length);    System.arraycopy(sentence.target,0,tgtBitext,tgtOffset,sentence.targetLength());    System.arraycopy(sentence.e2f,0,e2f,tgtOffset,sentence.e2f.length);    srcOffset+=sentence.sourceLength();    tgtOffset+=sentence.targetLength();    srcBitext[srcOffset]=toSentenceOffset(tgtOffset);    tgtBitext[tgtOffset]=toSentenceOffset(srcOffset);    ++srcOffset;    ++tgtOffset;  }  vocabulary=corpus.getVocabulary();  timer.mark("Corpus loading");  logger.info("Done loading corpus: {}",timer);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  static public void showException(String msg){  throw new RuntimeException(msg);}  }
class C{  private Descriptor validDescriptor(final Descriptor in) throws RuntimeOperationsException {  Descriptor clone;  boolean defaulted=(in == null);  if (defaulted) {    clone=new DescriptorSupport();    MODELMBEAN_LOGGER.finer("Null Descriptor, creating new.");  } else {    clone=(Descriptor)in.clone();  }  if (defaulted && clone.getFieldValue("name") == null) {    clone.setField("name",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor name to " + this.getName());  }  if (defaulted && clone.getFieldValue("descriptorType") == null) {    clone.setField("descriptorType","notification");    MODELMBEAN_LOGGER.finer("Defaulting descriptorType to \"notification\"");  }  if (clone.getFieldValue("displayName") == null) {    clone.setField("displayName",this.getName());    MODELMBEAN_LOGGER.finer("Defaulting Descriptor displayName to " + this.getName());  }  if (clone.getFieldValue("severity") == null) {    clone.setField("severity","6");    MODELMBEAN_LOGGER.finer("Defaulting Descriptor severity field to 6");  }  if (!clone.isValid()) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The isValid() method of the Descriptor object itself returned false," + "one or more required fields are invalid. Descriptor:" + clone.toString());  }  if (!getName().equalsIgnoreCase((String)clone.getFieldValue("name"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"name\" field does not match the object described. " + " Expected: " + this.getName() + " , was: "+ clone.getFieldValue("name"));  }  if (!"notification".equalsIgnoreCase((String)clone.getFieldValue("descriptorType"))) {    throw new RuntimeOperationsException(new IllegalArgumentException("Invalid Descriptor argument"),"The Descriptor \"descriptorType\" field does not match the object described. " + " Expected: \"notification\" ," + " was: "+ clone.getFieldValue("descriptorType"));  }  return clone;}  }
class C{  final TreeNode<K> putTreeVal(int h,K k){  Class<?> kc=null;  boolean searched=false;  for (TreeNode<K> p=root; ; ) {    int dir, ph;    K pk;    if (p == null) {      first=root=new TreeNode<K>(h,k,null,null);      break;    } else     if ((ph=p.hash) > h)     dir=-1; else     if (ph < h)     dir=1; else     if ((pk=p.key) == k || (pk != null && k.equals(pk)))     return p; else     if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0) {      if (!searched) {        TreeNode<K> q, ch;        searched=true;        if (((ch=p.left) != null && (q=ch.findTreeNode(h,k,kc)) != null) || ((ch=p.right) != null && (q=ch.findTreeNode(h,k,kc)) != null))         return q;      }      dir=tieBreakOrder(k,pk);    }    TreeNode<K> xp=p;    if ((p=(dir <= 0) ? p.left : p.right) == null) {      TreeNode<K> x, f=first;      first=x=new TreeNode<K>(h,k,f,xp);      if (f != null)       f.prev=x;      if (dir <= 0)       xp.left=x; else       xp.right=x;      if (!xp.red)       x.red=true; else {        lockRoot();        try {          root=balanceInsertion(root,x);        }  finally {          unlockRoot();        }      }      break;    }  }  assert checkInvariants(root);  return null;}  }
class C{  public static void main(final String[] args){  try {    final String version=System.getProperty("java.specification.version");    if (Float.parseFloat(version) < 1.7f) {      JOptionPane.showMessageDialog(null,"You need at least Java 7 (also known as 1.7.0) but you only have " + version + ". You can download it at http://java.com");    }  } catch (  final RuntimeException e) {  }  ClientRunner.run(args);}  }
class C{  public final boolean hasMessages(int what,Object object){  return mExec.hasMessages(what,object);}  }
class C{  public col addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static JmrixConfigPane instance(int index){  JmrixConfigPane retval=configPaneTable.get(index);  if (retval != null) {    return retval;  }  return createPanel(index);}  }
class C{  protected boolean handle(){  log.debug("Waiting for state change");  waitSensorChange(now,sensor);  now=sensor.getKnownState();  log.debug("Found new state: " + now);  setMomentum(now);  return true;}  }
class C{  public MessagePage(String message){  this.message=message;}  }
class C{  private static boolean isErrorPage(FacesContext context){  return (context.getExternalContext().getRequestMap().get(WEBAPP_ERROR_PAGE_MARKER) != null);}  }
class C{  public boolean connect(){  connection=ConnectionFactory.getInstance().createClientConnection(host,port,1);  boolean result=connection.open();  if (result) {    connection.addConnectionListener(connectionListener);    packetUpdate=new ConnectionHandler();    connThread=new Thread(packetUpdate,"Client Connection, Player " + name);    connThread.start();  }  return result;}  }
class C{  public static String createRoutingBrokenHTMLErrorPage(String message,String url,String urltext){  if (StringUtils.isEmpty(message)) {    message="Not provided!";  }  Engine engine=new Engine();  Map<String,Object> model=new HashMap<>();  model.put("message",message);  model.put("url",url);  model.put("urltext",urltext);  String display="none";  if (StringUtils.isNotEmpty(url) && StringUtils.isNotEmpty(urltext)) {    display="block";  }  model.put("display",display);  return engine.transform(ROUTING_BROKEN_TEMPLATE,model);}  }
class C{  @RequestMapping(method=RequestMethod.DELETE,value="/{query}") @ApiOperation(value="delete parametrized query",notes="delete named, parametrized query by ID",response=void.class) @ApiResponses({@ApiResponse(code=200,message="Deleted successfully."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="queryId does not exist."),@ApiResponse(code=500,message="GemFire throws an error or exception")}) @PreAuthorize("@securityService.authorize('DATA', 'WRITE')") public ResponseEntity<?> delete(@PathVariable("query") final String queryId){  logger.debug("Deleting a named, parametrized Query with ID ({}).",queryId);  deleteNamedQuery(PARAMETERIZED_QUERIES_REGION,queryId);  compiledQueries.remove(queryId);  return new ResponseEntity<Object>(HttpStatus.OK);}  }
class C{  private static void seedAddressList(String street,long streetId,OsmElement e,LinkedList<Address> addresses){  if (e.hasTag(Tags.KEY_ADDR_STREET,street) && e.hasTagKey(Tags.KEY_ADDR_HOUSENUMBER)) {    Address seed=new Address(e,getAddressTags(new LinkedHashMap<String,ArrayList<String>>(Util.getArrayListMap(e.getTags()))));    if (streetId > 0) {      seed.setSide(streetId);    }    if (addresses.size() >= MAX_SAVED_ADDRESSES) {      addresses.removeLast();    }    addresses.addFirst(seed);    Log.d("TagEditor","seedAddressList added " + seed.tags.toString());  }}  }
class C{  private static int constantToValueType(Constant cst){  if (cst instanceof CstByte) {    return VALUE_BYTE;  } else   if (cst instanceof CstShort) {    return VALUE_SHORT;  } else   if (cst instanceof CstChar) {    return VALUE_CHAR;  } else   if (cst instanceof CstInteger) {    return VALUE_INT;  } else   if (cst instanceof CstLong) {    return VALUE_LONG;  } else   if (cst instanceof CstFloat) {    return VALUE_FLOAT;  } else   if (cst instanceof CstDouble) {    return VALUE_DOUBLE;  } else   if (cst instanceof CstString) {    return VALUE_STRING;  } else   if (cst instanceof CstType) {    return VALUE_TYPE;  } else   if (cst instanceof CstFieldRef) {    return VALUE_FIELD;  } else   if (cst instanceof CstMethodRef) {    return VALUE_METHOD;  } else   if (cst instanceof CstEnumRef) {    return VALUE_ENUM;  } else   if (cst instanceof CstArray) {    return VALUE_ARRAY;  } else   if (cst instanceof CstAnnotation) {    return VALUE_ANNOTATION;  } else   if (cst instanceof CstKnownNull) {    return VALUE_NULL;  } else   if (cst instanceof CstBoolean) {    return VALUE_BOOLEAN;  } else {    throw new RuntimeException("Shouldn't happen");  }}  }
class C{  public final static double roundAdjust(double x){  return qint_old(x);}  }
class C{  public int maxSize(){  return maxSize;}  }
class C{  public void writeLink(File file,String body) throws IOException {  startTag(A);  StringBuffer sb=new StringBuffer();  String path=file.getPath().replace(File.separatorChar,'/');  if (file.isAbsolute() && !path.startsWith("/"))   sb.append('/');  sb.append(path);  writeAttr(HREF,sb.toString());  write(body);  endTag(A);}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  public boolean isInvoked(){  return isInvoked;}  }
class C{  public void testExecuteWhenAutoDeployLocationIsOverriden() throws Exception {  String deployableFile="testExecuteWhenAutoDeployLocationIsOverriden.war";  Deployable deployableElement=new Deployable();  deployableElement.setLocation(deployableFile);  setUpMojo(InstalledLocalContainerStub.class,InstalledLocalContainerStub.ID,StandaloneLocalConfigurationStub.class);  this.mojo.setDeployablesElement(new Deployable[]{deployableElement});  this.mojo.setCargoProject(createTestCargoProject("war"));  this.mojo.execute();  LocalContainer localContainer=(LocalContainer)this.mojo.createdContainer;  assertEquals(1,localContainer.getConfiguration().getDeployables().size());  org.codehaus.cargo.container.deployable.Deployable autoDeployable=localContainer.getConfiguration().getDeployables().get(0);  assertEquals(deployableFile,autoDeployable.getFile());}  }
class C{  public void createDatabaseEntitiesForStoragePolicyTesting(){  createDatabaseEntitiesForStoragePolicyTesting(AbstractServiceTest.STORAGE_POLICY_NAMESPACE_CD,Arrays.asList(AbstractServiceTest.STORAGE_POLICY_RULE_TYPE),AbstractServiceTest.BDEF_NAMESPACE,AbstractServiceTest.BDEF_NAME,Arrays.asList(AbstractServiceTest.FORMAT_FILE_TYPE_CODE),Arrays.asList(AbstractServiceTest.STORAGE_NAME),Arrays.asList(AbstractServiceTest.STORAGE_NAME_2));}  }
class C{  public static short[] toShortArray(Character[] array){  short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    result[i]=((short)array[i].charValue());  }  return result;}  }
class C{  public static Datacenter createDatacenter(String name,Class<? extends Datacenter> datacenterClass,List<PowerHost> hostList,VmAllocationPolicy vmAllocationPolicy) throws Exception {  String arch="x86";  String os="Linux";  String vmm="Xen";  double time_zone=10.0;  double cost=3.0;  double costPerMem=0.05;  double costPerStorage=0.001;  double costPerBw=0.0;  DatacenterCharacteristics characteristics=new DatacenterCharacteristics(arch,os,vmm,hostList,time_zone,cost,costPerMem,costPerStorage,costPerBw);  Datacenter datacenter=null;  try {    datacenter=datacenterClass.getConstructor(String.class,DatacenterCharacteristics.class,VmAllocationPolicy.class,List.class,Double.TYPE).newInstance(name,characteristics,vmAllocationPolicy,new LinkedList<Storage>(),Constants.SCHEDULING_INTERVAL);  } catch (  Exception e) {    e.printStackTrace();    System.exit(0);  }  return datacenter;}  }
class C{  public final boolean canSetInt(String field){  return m_table.canSetInt(field);}  }
class C{  public static String importTechnicalServices(ServiceProvisioningService provisioningService,String tsXml) throws Exception {  return provisioningService.importTechnicalServices(tsXml.getBytes("UTF-8"));}  }
class C{  private void loadInputStreamOrReader(Object inputStreamOrReader,String baseURI,RDFFormat dataFormat,RDFHandler rdfHandler) throws IOException, RDFParseException, RDFHandlerException {  RDFParser rdfParser=Rio.createParser(dataFormat,vf);  rdfParser.setParserConfig(config);  rdfParser.setParseErrorListener(new ParseErrorLogger());  rdfParser.setRDFHandler(rdfHandler);  if (inputStreamOrReader instanceof InputStream) {    rdfParser.parse((InputStream)inputStreamOrReader,baseURI);  } else   if (inputStreamOrReader instanceof Reader) {    rdfParser.parse((Reader)inputStreamOrReader,baseURI);  } else {    throw new IllegalArgumentException("Must be an InputStream or a Reader, is a: " + inputStreamOrReader.getClass());  }}  }
class C{  public boolean isAllow_Info_Schedule(){  Object oo=get_Value(COLUMNNAME_Allow_Info_Schedule);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void prefetchSimpleRowIndexes(RbrRowImage image) throws ReplicatorException {  rowUpdates++;  if (logger.isDebugEnabled()) {    logger.debug("Seeking indexes for row image: schema=" + image.getSchemaName() + " table="+ image.getTableName());  }  String schemaName=image.getSchemaName();  String tableName=image.getTableName();  Table table=this.fetchTableDefinition(schemaName,tableName);  logger.debug(table);  List<Key> keys=table.getKeys();  for (  Key key : keys) {    if (logger.isDebugEnabled()) {      logger.debug("Looking for values for key: " + key);    }    KeySelect keySelect=new KeySelect(table,key);    for (    Column col : key.getColumns()) {      int imageColIndex=image.getColumnIndex(col.getName());      ColumnVal colValue=image.getValue(imageColIndex);      keySelect.setValue(col.getName(),colValue.getValue());    }    if (!keySelect.hasNulls()) {      executeIndexQuery(keySelect);    }  }}  }
class C{  @PostConstruct protected void init(){  super.init(rolloutGroupTargetsListHeader,rolloutListGrid);}  }
class C{  public ISchedulingRule copyRule(IResource source,IResource destination){  if (source.getType() == IResource.ROOT || destination.getType() == IResource.ROOT)   return root;  return factoryFor(destination).copyRule(source,destination);}  }
class C{  public static void updateBarsColor(int color,Window window,boolean applyDarken,boolean tintBoth){  if (tintBoth)   updateBarsColor(color,window,applyDarken,true,true);}  }
class C{  public TextState(){  Tm[0][0]=1;  Tm[0][1]=0;  Tm[0][2]=0;  Tm[1][0]=0;  Tm[1][1]=1;  Tm[1][2]=0;  Tm[2][0]=0;  Tm[2][1]=0;  Tm[2][2]=1;  TmAtStart[0][0]=1;  TmAtStart[0][1]=0;  TmAtStart[0][2]=0;  TmAtStart[1][0]=0;  TmAtStart[1][1]=1;  TmAtStart[1][2]=0;  TmAtStart[2][0]=0;  TmAtStart[2][1]=0;  TmAtStart[2][2]=1;}  }
class C{  @Override public String[] apply(String[] words){  if (!isApplicable())   return words;  for (int i=0; i < _colList.length; i++) {    int colID=_colList[i];    try {      double val=UtilFunctions.parseToDouble(words[colID - 1]);      int binid=1;      double tmp=_min[i] + _binWidths[i];      while (val > tmp && binid < _numBins[i]) {        tmp+=_binWidths[i];        binid++;      }      words[colID - 1]=Integer.toString(binid);    } catch (    NumberFormatException e) {      throw new RuntimeException("Encountered \"" + words[colID - 1] + "\" in column ID \""+ colID+ "\", when expecting a numeric value. Consider adding \""+ words[colID - 1]+ "\" to na.strings, along with an appropriate imputation method.");    }  }  return words;}  }
class C{  public Map toMap() throws TemplateModelException {  if (unwrappedMap == null) {    Class mapClass=this.map.getClass();    Map m=null;    try {      m=(Map)mapClass.newInstance();    } catch (    Exception e) {      throw new TemplateModelException("Error instantiating map of type " + mapClass.getName() + "\n"+ e.getMessage());    }    BeansWrapper bw=BeansWrapper.getDefaultInstance();    for (Iterator it=map.entrySet().iterator(); it.hasNext(); ) {      Map.Entry entry=(Map.Entry)it.next();      Object key=entry.getKey();      Object value=entry.getValue();      if (value instanceof TemplateModel) {        value=bw.unwrap((TemplateModel)value);      }      m.put(key,value);    }    unwrappedMap=m;  }  return unwrappedMap;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized String maxRingDurationMessageClass(){  return maxRingTimeMsgCls;}  }
class C{  public boolean isCompatible(Class<?> clazz){  Set<Class<?>> set=COMPATIBILITY_MAP.get(this);  if (set != null) {    return set.contains(clazz);  } else {    return false;  }}  }
class C{  private void finalizeDayCounter(){  boolean bFinalize=false;  for (int i=0; i < DayCounter.HOURS; i++) {    if (counters[i] > -1) {      bFinalize=true;    }    if (bFinalize) {      if (counters[i] == -1) {        counters[i]=0;      }    }  }}  }
class C{  public T caseInterfaceMemberDeclaration_(InterfaceMemberDeclaration_ object){  return null;}  }
class C{  protected void selectValue(int value){  for (int i=0; i < _valueArray.length; i++) {    if (_valueArray[i] == value) {      _value.setSelectedIndex(i);      TreePath path=_pathArray[i];      for (      JTree tree : trees) {        tree.setSelectionPath(path);        tree.scrollPathToVisible(path);      }      return;    }  }  log.debug("Create new item with value " + value + " count was "+ _value.getItemCount()+ " in "+ label());  _valueArray=java.util.Arrays.copyOf(_valueArray,_valueArray.length + 1);  _valueArray[_valueArray.length - 1]=value;  _itemArray=java.util.Arrays.copyOf(_itemArray,_itemArray.length + 1);  _itemArray[_itemArray.length - 1]="Reserved value " + value;  _pathArray=java.util.Arrays.copyOf(_pathArray,_pathArray.length + 1);  TreeLeafNode node=new TreeLeafNode(_itemArray[_itemArray.length - 1],_itemArray.length - 1);  treeNodes.getLast().add(node);  _pathArray[_itemArray.length - 1]=new TreePath(node.getPath());  _value.addItem(_itemArray[_itemArray.length - 1]);  _value.setSelectedItem(_itemArray[_itemArray.length - 1]);  for (  JTree tree : trees) {    ((DefaultTreeModel)tree.getModel()).reload();    tree.setSelectionPath(_pathArray[_itemArray.length - 1]);    tree.scrollPathToVisible(_pathArray[_itemArray.length - 1]);  }}  }
class C{  protected AbstractRed(List srcs,Rectangle bounds,ColorModel cm,SampleModel sm,Map props){  init(srcs,bounds,cm,sm,bounds.x,bounds.y,props);}  }
class C{  public boolean contains(DataSource source){  return data.contains(source);}  }
class C{  public boolean skipTests(Object mode){  if (mode.toString().equals("local")) {    return true;  } else {    return false;  }}  }
class C{  public synchronized boolean removeFirst(K obj){  if (peekFirst() != obj) {    return false;  }  int len=array.length;  @SuppressWarnings("unchecked") K[] a=(K[])new Object[len - 1];  System.arraycopy(array,1,a,0,len - 1);  array=a;  return true;}  }
class C{  public static boolean isServiceEnabled(Connection connection,String user){  try {    DiscoverInfo result=ServiceDiscoveryManager.getInstanceFor(connection).discoverInfo(user);    return result.containsFeature(discoNamespace);  } catch (  XMPPException e) {    e.printStackTrace();    return false;  }}  }
class C{  public void removeActionListener(ActionListener l){  mv.removeActionListener(l);}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  public static boolean isObjectArrayType(PsiType type){  return type instanceof PsiArrayType && !isPrimitiveType(((PsiArrayType)type).getComponentType());}  }
class C{  public static void escapeString(String label,Appendable appendable) throws IOException {  escapeString(label,appendable,true);}  }
class C{  public ActiveMQRAQueueReceiver(final QueueReceiver consumer,final ActiveMQRASession session){  super(consumer,session);  if (ActiveMQRAQueueReceiver.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + consumer + ", "+ session+ ")");  }}  }
class C{  public static java.lang.String toOctalString(int i){  return null;}  }
class C{  public void updateLayerStatus(LayerStatusEvent evt){switch (evt.getStatus()) {case LayerStatusEvent.START_WORKING:    setLayerStatus((Layer)evt.getSource(),redIcon);  break;case LayerStatusEvent.STATUS_UPDATE:break;case LayerStatusEvent.FINISH_WORKING:setLayerStatus((Layer)evt.getSource(),greenIcon);break;default :System.err.println("InformationDelegator.updateLayerStatus(): " + "unknown status: " + evt.getStatus());break;}}  }
class C{  public static String encodeEndpoint(String uri,String operation){  StringBuilder buf=new StringBuilder();  if (uri != null && !uri.trim().isEmpty()) {    buf.append(uri);  }  if (operation != null && !operation.trim().isEmpty()) {    buf.append('[');    buf.append(operation);    buf.append(']');  }  return buf.toString();}  }
class C{  private static <T>List<T> castList(List<?> list,Class<T> castTo){  List<T> casted=new ArrayList<T>(list.size());  for (  Object object : list) {    casted.add(castTo.cast(object));  }  return Collections.unmodifiableList(casted);}  }
class C{  public Host parseHost(String host) throws ParseException {  Lexer lexer=new Lexer("charLexer",host);  return new HostNameParser(lexer).host();}  }
class C{  public GetRepositoriesRequestBuilder(ElasticsearchClient client,GetRepositoriesAction action,String... repositories){  super(client,action,new GetRepositoriesRequest(repositories));}  }
class C{  public Vector product(double d){  double newComponents[]=new double[components.length];  for (int i=0; i < components.length; i++)   newComponents[i]=d * components[i];  return new Vector(newComponents);}  }
class C{  protected boolean checkPoints(float[][] xpoints2,float[][] ypoints2){  if (xpoints == null || ypoints == null || xpoints.length == 0 || ypoints.length == 0) {    return false;  }  return true;}  }
class C{  public boolean contains(Object obj){  return index((T)obj) >= 0;}  }
class C{  public static File createTempDir(String prefix) throws IOException {  return createTempDir(prefix,true);}  }
class C{  public RankSelect(final Rank rank,final Select select,final SelectZero selectZero){  this.rank=rank;  this.select=select;  this.selectZero=selectZero;}  }
class C{  private Capability(int flags,String display){  m_Flags=flags;  m_Display=display;}  }
class C{  protected List refreshTicksHorizontal(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List result=new java.util.ArrayList();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  if (isAutoTickUnitSelection()) {    selectAutoTickUnit(g2,dataArea,edge);  }  DateTickUnit unit=getTickUnit();  Date tickDate=calculateLowestVisibleTickValue(unit);  Date upperDate=getMaximumDate();  boolean hasRolled=false;  while (tickDate.before(upperDate)) {    if (!hasRolled) {      tickDate=correctTickDateForPosition(tickDate,unit,this.tickMarkPosition);    }    long lowestTickTime=tickDate.getTime();    long distance=unit.addToDate(tickDate,this.timeZone).getTime() - lowestTickTime;    int minorTickSpaces=getMinorTickCount();    if (minorTickSpaces <= 0) {      minorTickSpaces=unit.getMinorTickCount();    }    for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {      long minorTickTime=lowestTickTime - distance * minorTick / minorTickSpaces;      if (minorTickTime > 0 && getRange().contains(minorTickTime) && (!isHiddenValue(minorTickTime))) {        result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));      }    }    if (!isHiddenValue(tickDate.getTime())) {      String tickLabel;      DateFormat formatter=getDateFormatOverride();      if (formatter != null) {        tickLabel=formatter.format(tickDate);      } else {        tickLabel=this.tickUnit.dateToString(tickDate);      }      TextAnchor anchor, rotationAnchor;      double angle=0.0;      if (isVerticalTickLabels()) {        anchor=TextAnchor.CENTER_RIGHT;        rotationAnchor=TextAnchor.CENTER_RIGHT;        if (edge == RectangleEdge.TOP) {          angle=Math.PI / 2.0;        } else {          angle=-Math.PI / 2.0;        }      } else {        if (edge == RectangleEdge.TOP) {          anchor=TextAnchor.BOTTOM_CENTER;          rotationAnchor=TextAnchor.BOTTOM_CENTER;        } else {          anchor=TextAnchor.TOP_CENTER;          rotationAnchor=TextAnchor.TOP_CENTER;        }      }      Tick tick=new DateTick(tickDate,tickLabel,anchor,rotationAnchor,angle);      result.add(tick);      hasRolled=false;      long currentTickTime=tickDate.getTime();      tickDate=unit.addToDate(tickDate,this.timeZone);      long nextTickTime=tickDate.getTime();      for (int minorTick=1; minorTick < minorTickSpaces; minorTick++) {        long minorTickTime=currentTickTime + (nextTickTime - currentTickTime) * minorTick / minorTickSpaces;        if (getRange().contains(minorTickTime) && (!isHiddenValue(minorTickTime))) {          result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),"",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));        }      }    } else {      tickDate=unit.rollDate(tickDate,this.timeZone);      hasRolled=true;      continue;    }  }  return result;}  }
class C{  public boolean hasTime(){  return hasTime;}  }
class C{  public void initialize(){  lineState=new LineState();  eq=new SlowEventQueue();  super.initialize();}  }
class C{  void accept(SocketAddress remoteAddress,int timeout) throws IOException {  this.remoteAddr=remoteAddress;  accept(timeout);}  }
class C{  public void accept(final MethodVisitor mv){  int i, j, n;  n=parameters == null ? 0 : parameters.size();  for (i=0; i < n; i++) {    ParameterNode parameter=parameters.get(i);    mv.visitParameter(parameter.name,parameter.access);  }  if (annotationDefault != null) {    AnnotationVisitor av=mv.visitAnnotationDefault();    AnnotationNode.accept(av,null,annotationDefault);    if (av != null) {      av.visitEnd();    }  }  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=visibleParameterAnnotations == null ? 0 : visibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=visibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,true));    }  }  n=invisibleParameterAnnotations == null ? 0 : invisibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=invisibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,false));    }  }  if (visited) {    instructions.resetLabels();  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    mv.visitAttribute(attrs.get(i));  }  if (instructions.size() > 0) {    mv.visitCode();    n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (i=0; i < n; ++i) {      tryCatchBlocks.get(i).updateIndex(i);      tryCatchBlocks.get(i).accept(mv);    }    instructions.accept(mv);    n=localVariables == null ? 0 : localVariables.size();    for (i=0; i < n; ++i) {      localVariables.get(i).accept(mv);    }    n=visibleLocalVariableAnnotations == null ? 0 : visibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      visibleLocalVariableAnnotations.get(i).accept(mv,true);    }    n=invisibleLocalVariableAnnotations == null ? 0 : invisibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      invisibleLocalVariableAnnotations.get(i).accept(mv,false);    }    mv.visitMaxs(maxStack,maxLocals);    visited=true;  }  mv.visitEnd();}  }
class C{  public int length(){  return (myMessage.length());}  }
class C{  public MlBayesIm(BayesPm bayesPm,BayesIm oldBayesIm,int initializationMethod) throws IllegalArgumentException {  if (bayesPm == null) {    throw new NullPointerException("BayesPm must not be null.");  }  this.bayesPm=new BayesPm(bayesPm);  Graph graph=bayesPm.getDag();  this.nodes=graph.getNodes().toArray(new Node[graph.getNodes().size()]);  initialize(oldBayesIm,initializationMethod);}  }
class C{  @Before public void before() throws Exception {  assertU(delQ("*:*"));  assertU(commit());}  }
class C{  protected void sequence_TStructSetter(ISerializationContext context,TStructSetter semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.TSETTER__FPAR) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.TSETTER__FPAR));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTStructSetterAccess().getNameIdentifierNameParserRuleCall_0_0_2_0(),semanticObject.getName());  feeder.accept(grammarAccess.getTStructSetterAccess().getFparTAnonymousFormalParameterParserRuleCall_2_0(),semanticObject.getFpar());  feeder.finish();}  }
class C{  public static long roundDown(int field,long timeInMillis){switch (field) {case Calendar.DAY_OF_MONTH:case Calendar.DAY_OF_WEEK:case Calendar.DAY_OF_YEAR:    return (timeInMillis - timeInMillis % (24 * 60 * 60* 1000));case Calendar.HOUR:  return (timeInMillis - timeInMillis % (60 * 60 * 1000));case Calendar.MINUTE:return (timeInMillis - timeInMillis % (60 * 1000));case Calendar.SECOND:return (timeInMillis - timeInMillis % (1000));default :return 0L;}}  }
class C{  public void dispose() throws SaslException {  if (m_state != STATE_DISPOSED) {    m_state=STATE_DISPOSED;  }}  }
class C{  @Override protected void onPreviewNativeEvent(Event.NativePreviewEvent event){  super.onPreviewNativeEvent(event);switch (event.getTypeInt()) {case Event.ONKEYDOWN:    if (event.getNativeEvent().getKeyCode() == KeyCodes.KEY_ESCAPE) {      hide();    }  break;}}  }
class C{  public double[] computeLocalFromPreviousObservations(int var1[],int var2[],int cond[]){  int rows=var1.length;  double[] localCondMi=new double[rows];  average=0;  max=0;  min=0;  int var1Val, var2Val, condVal;  double logTerm;  for (int r=0; r < rows; r++) {    var1Val=var1[r];    var2Val=var2[r];    condVal=cond[r];    logTerm=((double)firstSecondCondCount[var1Val][var2Val][condVal] / (double)firstCondCount[var1Val][condVal]) / ((double)secondCondCount[var2Val][condVal] / (double)condCount[condVal]);    localCondMi[r]=Math.log(logTerm) / log_2;    average+=localCondMi[r];    if (localCondMi[r] > max) {      max=localCondMi[r];    } else     if (localCondMi[r] < min) {      min=localCondMi[r];    }  }  average=average / (double)rows;  condMiComputed=true;  return localCondMi;}  }
class C{  public final boolean skipAny(char c,CharSequence csq){  int i=index;  int n=csq.length();  for (; (i < n) && (csq.charAt(i) == c); i++) {  }  if (i == index)   return false;  index=i;  return true;}  }
class C{  public static String create(String relativePath){  return create(relativePath,Config.getHostport());}  }
class C{  void notifyClosed(FBBlobInputStream stream){  inputStreams.remove(stream);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.897 -0500",hash_original_method="C67632C7194D1964FA22740DFB1AA62E",hash_generated_method="0E4653112D6DFC40DF909F8C8F059089") public void notifyInvalidated(){synchronized (mObservers) {    for (int i=mObservers.size() - 1; i >= 0; i--) {      mObservers.get(i).onInvalidated();    }  }}  }
class C{  public boolean equals(Object compareTo){  if (!(compareTo instanceof BinaryItem)) {    return false;  }  BinaryItem b=(BinaryItem)compareTo;  if (m_attribute.equals(b.getAttribute()) && m_valueIndex == b.getValueIndex()) {    return true;  }  return false;}  }
class C{  public void wallsAndGatesB(int[][] rooms){  Queue<int[]> queue=new LinkedList<>();  for (int i=0; i < rooms.length; i++) {    for (int j=0; j < rooms[i].length; j++) {      if (rooms[i][j] == GATE) {        queue.add(new int[]{i,j});      }    }  }  while (!queue.isEmpty()) {    int size=queue.size();    for (int i=0; i < size; i++) {      int[] pos=queue.poll();      for (int j=0; j < DIRS.length; j++) {        int nextI=pos[0] + DIRS[j][0];        int nextJ=pos[1] + DIRS[j][1];        if (0 <= nextI && nextI < rooms.length && 0 <= nextJ && nextJ < rooms[0].length && rooms[nextI][nextJ] == Integer.MAX_VALUE) {          rooms[nextI][nextJ]=rooms[pos[0]][pos[1]] + 1;          queue.add(new int[]{nextI,nextJ});        }      }    }  }}  }
class C{  public NativeMemoryChunkPool(MemoryTrimmableRegistry memoryTrimmableRegistry,PoolParams poolParams,PoolStatsTracker nativeMemoryChunkPoolStatsTracker){  super(memoryTrimmableRegistry,poolParams,nativeMemoryChunkPoolStatsTracker);  SparseIntArray bucketSizes=poolParams.bucketSizes;  mBucketSizes=new int[bucketSizes.size()];  for (int i=0; i < mBucketSizes.length; ++i) {    mBucketSizes[i]=bucketSizes.keyAt(i);  }  initialize();}  }
class C{  public static <T>T map(final JBBPFieldStruct root,final String structPath,final Class<T> mappingClass,final int flags){  return map(root,structPath,mappingClass,null,flags);}  }
class C{  public void fine(String msg,Throwable thrown){  log(Level.FINE,thrown,msg,thrown);}  }
class C{  public String str(){  return (null != m_obj) ? ((String)m_obj) : "";}  }
class C{  private boolean isSimilarSignature(Method possiblyMatchingMethod,String desiredMethodName,Class<?>[] desiredParamTypes){  return possiblyMatchingMethod.getName().equals(desiredMethodName) && match(possiblyMatchingMethod.getParameterTypes(),desiredParamTypes);}  }
class C{  protected void escapeString(String str){  if (str == null) {    m_out.print("null");    return;  }  int len=str.length();  for (int i=0; i < len; ++i) {    char c=str.charAt(i);    if ((c < LOWER_RANGE && c != VALID_CHARS[0] && c != VALID_CHARS[1] && c != VALID_CHARS[2]) || (c > UPPER_RANGE)) {      m_out.print("&#");      m_out.print(Integer.toString(c));      m_out.print(';');    } else {      boolean valid=true;      for (int j=INVALID.length - 1; j >= 0; --j) {        if (INVALID[j] == c) {          valid=false;          m_out.print(VALID[j]);          break;        }      }      if (valid) {        m_out.print(c);      }    }  }}  }
class C{  public JIPQuery openSynchronousQuery(final String strQuery) throws JIPSyntaxErrorException {  return openSynchronousQuery(m_termParser.parseTerm(strQuery));}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private static void GetFloatArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetFloatArrayRegion    \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    float[] sourceArray=(float[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > sourceArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(bufAddress,Magic.objectAsAddress(sourceArray).plus(startIndex << LOG_BYTES_IN_FLOAT),length << LOG_BYTES_IN_FLOAT);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public PushbackInputStream(InputStream in,int size){  super(in);  if (size <= 0) {    throw new IllegalArgumentException("size <= 0");  }  this.buf=new byte[size];  this.pos=size;}  }
class C{  public AbstractNavigator(){  navigationListeners=new HashSet<NavigationListener>();  zoomFactor=DEFAULT_ZOOM_FACTOR;  zoomMin=DEFAULT_ZOOM_MIN;  zoomMax=DEFAULT_ZOOM_MAX;  zoomable=true;  pannable=true;}  }
class C{  public static void main(String args[]) throws Exception {  if (args.length == 0) {    System.out.println("java jpeg url [width height]");    System.exit(-1);  }  Debug.init();  int uw=-1;  int uh=-1;  if (args.length > 1) {    uw=Integer.parseInt(args[1]);    uh=Integer.parseInt(args[2]);  }  String urlsource=args[0];  int lastslash=urlsource.lastIndexOf('/');  if (lastslash == -1) {    lastslash=0;  } else {    lastslash++;  }  int lastdot=urlsource.lastIndexOf('.');  if (lastdot == -1) {    lastdot=0;  }  String filebase=urlsource.substring(lastslash,lastdot);  Debug.output("url=" + urlsource + " filebase="+ filebase);  BufferedImage bi=BufferedImageHelper.getBufferedImage(new URL(urlsource),0,0,uw,uh);  if (bi == null) {    Debug.error("JPEGHelper: Image load failed");  } else {    PrintStream html=new PrintStream(new FileOutputStream(new File(filebase + ".html")));    html.println("Source url = " + urlsource + " <br>");    html.println(" width = " + uw + " height="+ uh+ " pixels="+ uw * uh + " <hr>");    for (int i=0; i < 20; i++) {      File f=new File(filebase + ((i < 10) ? "0" : "") + i+ ".jpg");      float quality=0.0499f * i;      encodeAndWriteJPEGFile(f,bi,quality);      html.println("Image Quality Factor: " + quality + " <br>");      html.println("Image Size (bytes) : " + f.length() + " <br>");      html.println("<img src=\"" + f.getName() + "\"> <hr>");    }    html.close();  }  System.exit(-1);}  }
class C{  private void attemptCreation(){  mAliasView.setError(null);  mPasswordView.setError(null);  boolean cancel=false;  boolean warningIPAccount=false;  View focusView=null;  if (TextUtils.isEmpty(mAlias)) {    mAliasView.setError(getString(R.string.error_field_required));    focusView=mAliasView;    cancel=true;  }  if (TextUtils.isEmpty(mHostname)) {    warningIPAccount=true;  }  if (!warningIPAccount && TextUtils.isEmpty(mPassword)) {    mPasswordView.setError(getString(R.string.error_field_required));    focusView=mPasswordView;    cancel=true;  }  if (!warningIPAccount && TextUtils.isEmpty(mUsername)) {    mUsernameView.setError(getString(R.string.error_field_required));    focusView=mUsernameView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else   if (warningIPAccount) {    showIP2IPDialog();  } else {    initAccountCreation(null,null);  }}  }
class C{  public JPEGQTable(int[] table){  if (table == null) {    throw new IllegalArgumentException("table must not be null.");  }  if (table.length != 64) {    throw new IllegalArgumentException("table.length != 64");  }  qTable=Arrays.copyOf(table,table.length);}  }
class C{  protected byte[] generateSalt(){  return HEADER.getBytes(Constants.UTF8);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ARRAY_ELEMENT__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public PointLatLon(final Double lat,final Double lon){  this.point=new CoordinateDD(lat,lon);}  }
class C{  public static String encodeHexString(final byte[] data){  return new String(encodeHex(data));}  }
class C{  public static boolean shouldShowRequestPermissionRationale(Activity activity,String permission){  return ActivityCompat.shouldShowRequestPermissionRationale(activity,permission);}  }
class C{  public static void writeChartSingleDataSet(String filename,String title,String xAxisLabel,String yAxisLable,String series,double[] xAxis,double[] yAxis){  System.out.println("Writing chart: " + filename);  XYLineChart chart=new XYLineChart(title,xAxisLabel,yAxisLable);  chart.addSeries(series,xAxis,yAxis);  chart.saveAsPng(filename,1920,1080);  System.out.println("... finished writing chart.");}  }
class C{  private static int nextIndex(int i,int len){  return ((i + 1 < len) ? i + 1 : 0);}  }
class C{  private static ImmutablePair<Integer,String> checkSampleChanged(Connection conn,Fingerprint fingerprint) throws SQLException {  if (fingerprint.getSampleSetID() == null) {    return new ImmutablePair<Integer,String>(null,null);  }  String query="SELECT `Samples`.`SampleID`, `Samples`.`SampleUUID` FROM `SampleSets` INNER JOIN `Samples` ON `SampleSets`.`SampleID` = `Samples`.`SampleID` WHERE `SampleSetID` = ?" + " AND `ContrastLevel` = ?" + " AND `UserAgent`" + (fingerprint.getUser_agent() == null ? " IS NULL" : " = ?") + " AND `AcceptHeaders`"+ (fingerprint.getAccept_headers() == null ? " IS NULL" : " = ?")+ " AND `Platform`"+ (fingerprint.getPlatform() == null ? " IS NULL" : " = ?")+ " AND `PlatformFlash`"+ (fingerprint.getPlatformFlash() == null ? " IS NULL" : " = ?")+ " AND `PluginDetails`"+ (fingerprint.getPluginDetails() == null ? " IS NULL" : " = ?")+ " AND `TimeZone`"+ (fingerprint.getTimeZone() == null ? " IS NULL" : " = ?")+ " AND `ScreenDetails`"+ (fingerprint.getScreenDetails() == null ? " IS NULL" : " = ?")+ " AND `ScreenDetailsFlash`"+ (fingerprint.getScreenDetailsFlash() == null ? " IS NULL" : " = ?")+ " AND `ScreenDetailsCSS`"+ (fingerprint.getScreenDetailsCSS() == null ? " IS NULL" : " = ?")+ " AND `LanguageFlash`"+ (fingerprint.getLanguageFlash() == null ? " IS NULL" : " = ?")+ " AND `Fonts`"+ (fingerprint.getFonts() == null ? " IS NULL" : " = ?")+ " AND `FontsJS_CSS`"+ (fingerprint.getFontsJS_CSS() == null ? " IS NULL" : " = ?")+ " AND `FontsCSS`"+ (fingerprint.getFontsCSS() == null ? " IS NULL" : " = ?")+ " AND `CharSizes`"+ (fingerprint.getCharSizes() == null ? " IS NULL" : " = ?")+ " AND `CookiesEnabled` = ?"+ " AND `SuperCookieLocalStorage`"+ (fingerprint.getSuperCookieLocalStorage() == null ? " IS NULL" : " = ?")+ " AND `SuperCookieSessionStorage`"+ (fingerprint.getSuperCookieSessionStorage() == null ? " IS NULL" : " = ?")+ " AND `SuperCookieUserData`"+ (fingerprint.getSuperCookieUserData() == null ? " IS NULL" : " = ?")+ " AND `HstsEnabled`"+ (fingerprint.getHstsEnabled() == null ? " IS NULL" : " = ?")+ " AND `IndexedDBEnabled`"+ (fingerprint.getIndexedDBEnabled() == null ? " IS NULL" : " = ?")+ " AND `DoNotTrack`"+ (fingerprint.getDoNotTrack() == null ? " IS NULL" : " = ?")+ " AND `ClockDifference`"+ (fingerprint.getClockDifference() == null ? " IS NULL" : " = ?")+ " AND `DateTime`"+ (fingerprint.getDateTime() == null ? " IS NULL" : " = ?")+ " AND `MathTan`"+ (fingerprint.getMathTan() == null ? " IS NULL" : " = ?")+ " AND `UsingTor` = ?"+ " AND `TbbVersion`"+ (fingerprint.getTbbVersion() == null ? " IS NULL" : " = ?")+ " AND `AdsBlockedGoogle`"+ (fingerprint.getAdsBlockedGoogle() == null ? " IS NULL" : " = ?")+ " AND `AdsBlockedBanner`"+ (fingerprint.getAdsBlockedBanner() == null ? " IS NULL" : " = ?")+ " AND `AdsBlockedScript`"+ (fingerprint.getAdsBlockedScript() == null ? " IS NULL" : " = ?")+ " AND `LikeShareFacebook`"+ (fingerprint.getLikeShareFacebook() == null ? " IS NULL" : " = ?")+ " AND `LikeShareTwitter`"+ (fingerprint.getLikeShareTwitter() == null ? " IS NULL" : " = ?")+ " AND `LikeShareReddit`"+ (fingerprint.getLikeShareReddit() == null ? " IS NULL" : " = ?")+ " AND `Canvas`"+ (fingerprint.getCanvas() == null ? " IS NULL" : " = ?")+ " AND `WebGLVendor`"+ (fingerprint.getWebGLVendor() == null ? " IS NULL" : " = ?")+ " AND `WebGLRenderer`"+ (fingerprint.getWebGLRenderer() == null ? " IS NULL" : " = ?")+ " AND `TouchPoints`"+ (fingerprint.getTouchPoints() == null ? " IS NULL" : " = ?")+ " AND `TouchEvent`"+ (fingerprint.getTouchEvent() == null ? " IS NULL" : " = ?")+ " AND `TouchStart`"+ (fingerprint.getTouchStart() == null ? " IS NULL" : " = ?")+ " AND `AudioFingerprintPXI`"+ (fingerprint.getAudioFingerprintPXI() == null ? " IS NULL" : " = ?")+ " AND `AudioFingerprintPXIFullBuffer`"+ (fingerprint.getAudioFingerprintPXIFullBuffer() == null ? " IS NULL" : " = ?")+ " AND `AudioFingerprintNtVc`"+ (fingerprint.getAudioFingerprintNtVc() == null ? " IS NULL" : " = ?")+ " AND `AudioFingerprintCC`"+ (fingerprint.getAudioFingerprintCC() == null ? " IS NULL" : " = ?")+ " AND `AudioFingerprintHybrid`"+ (fingerprint.getAudioFingerprintHybrid() == null ? " IS NULL" : " = ?")+ ";";  PreparedStatement checkExists=conn.prepareStatement(query);  int index=1;  checkExists.setString(index,fingerprint.getSampleSetID());  ++index;  if (fingerprint.getContrastLevel() != null) {    checkExists.setInt(index,fingerprint.getContrastLevel());    ++index;  }  if (fingerprint.getUser_agent() != null) {    checkExists.setString(index,fingerprint.getUser_agent());    ++index;  }  if (fingerprint.getAccept_headers() != null) {    checkExists.setString(index,fingerprint.getAccept_headers());    ++index;  }  if (fingerprint.getPlatform() != null) {    checkExists.setString(index,fingerprint.getPlatform());    ++index;  }  if (fingerprint.getPlatformFlash() != null) {    checkExists.setString(index,fingerprint.getPlatformFlash());    ++index;  }  if (fingerprint.getPluginDetails() != null) {    checkExists.setString(index,fingerprint.getPluginDetails());    ++index;  }  if (fingerprint.getTimeZone() != null) {    checkExists.setString(index,fingerprint.getTimeZone());    ++index;  }  if (fingerprint.getScreenDetails() != null) {    checkExists.setString(index,fingerprint.getScreenDetails());    ++index;  }  if (fingerprint.getScreenDetailsFlash() != null) {    checkExists.setString(index,fingerprint.getScreenDetailsFlash());    ++index;  }  if (fingerprint.getScreenDetailsCSS() != null) {    checkExists.setString(index,fingerprint.getScreenDetailsCSS());    ++index;  }  if (fingerprint.getLanguageFlash() != null) {    checkExists.setString(index,fingerprint.getLanguageFlash());    ++index;  }  if (fingerprint.getFonts() != null) {    checkExists.setString(index,fingerprint.getFonts());    ++index;  }  if (fingerprint.getFontsJS_CSS() != null) {    checkExists.setString(index,fingerprint.getFontsJS_CSS());    ++index;  }  if (fingerprint.getFontsCSS() != null) {    checkExists.setString(index,fingerprint.getFontsCSS());    ++index;  }  if (fingerprint.getCharSizes() != null) {    checkExists.setString(index,fingerprint.getCharSizes());    ++index;  }  checkExists.setBoolean(index,fingerprint.isCookiesEnabled());  ++index;  if (fingerprint.getSuperCookieLocalStorage() != null) {    checkExists.setBoolean(index,fingerprint.getSuperCookieLocalStorage());    ++index;  }  if (fingerprint.getSuperCookieSessionStorage() != null) {    checkExists.setBoolean(index,fingerprint.getSuperCookieSessionStorage());    ++index;  }  if (fingerprint.getSuperCookieUserData() != null) {    checkExists.setBoolean(index,fingerprint.getSuperCookieUserData());    ++index;  }  if (fingerprint.getHstsEnabled() != null) {    checkExists.setBoolean(index,fingerprint.getHstsEnabled());    ++index;  }  if (fingerprint.getIndexedDBEnabled() != null) {    checkExists.setBoolean(index,fingerprint.getIndexedDBEnabled());    ++index;  }  if (fingerprint.getDoNotTrack() != null) {    checkExists.setString(index,fingerprint.getDoNotTrack());    ++index;  }  if (fingerprint.getClockDifference() != null) {    checkExists.setLong(index,fingerprint.getClockDifference());    ++index;  }  if (fingerprint.getDateTime() != null) {    checkExists.setString(index,fingerprint.getDateTime());    ++index;  }  if (fingerprint.getMathTan() != null) {    checkExists.setString(index,fingerprint.getMathTan());    ++index;  }  checkExists.setBoolean(index,fingerprint.isUsingTor());  ++index;  if (fingerprint.getTbbVersion() != null) {    checkExists.setString(index,fingerprint.getTbbVersion());    ++index;  }  if (fingerprint.getAdsBlockedGoogle() != null) {    checkExists.setBoolean(index,fingerprint.getAdsBlockedGoogle());    ++index;  }  if (fingerprint.getAdsBlockedBanner() != null) {    checkExists.setBoolean(index,fingerprint.getAdsBlockedBanner());    ++index;  }  if (fingerprint.getAdsBlockedScript() != null) {    checkExists.setBoolean(index,fingerprint.getAdsBlockedScript());    ++index;  }  if (fingerprint.getLikeShareFacebook() != null) {    checkExists.setInt(index,fingerprint.getLikeShareFacebook());    ++index;  }  if (fingerprint.getLikeShareTwitter() != null) {    checkExists.setInt(index,fingerprint.getLikeShareTwitter());    ++index;  }  if (fingerprint.getLikeShareReddit() != null) {    checkExists.setInt(index,fingerprint.getLikeShareReddit());    ++index;  }  if (fingerprint.getCanvas() != null) {    checkExists.setString(index,fingerprint.getCanvas());    ++index;  }  if (fingerprint.getWebGLVendor() != null) {    checkExists.setString(index,fingerprint.getWebGLVendor());    ++index;  }  if (fingerprint.getWebGLRenderer() != null) {    checkExists.setString(index,fingerprint.getWebGLRenderer());    ++index;  }  if (fingerprint.getTouchPoints() != null) {    checkExists.setInt(index,fingerprint.getTouchPoints());    ++index;  }  if (fingerprint.getTouchEvent() != null) {    checkExists.setBoolean(index,fingerprint.getTouchEvent());    ++index;  }  if (fingerprint.getTouchStart() != null) {    checkExists.setBoolean(index,fingerprint.getTouchStart());    ++index;  }  if (fingerprint.getAudioFingerprintPXI() != null) {    checkExists.setString(index,fingerprint.getAudioFingerprintPXI());    ++index;  }  if (fingerprint.getAudioFingerprintPXIFullBuffer() != null) {    checkExists.setString(index,fingerprint.getAudioFingerprintPXIFullBuffer());    ++index;  }  if (fingerprint.getAudioFingerprintNtVc() != null) {    checkExists.setString(index,fingerprint.getAudioFingerprintNtVc());    ++index;  }  if (fingerprint.getAudioFingerprintCC() != null) {    checkExists.setString(index,fingerprint.getAudioFingerprintCC());    ++index;  }  if (fingerprint.getAudioFingerprintHybrid() != null) {    checkExists.setString(index,fingerprint.getAudioFingerprintHybrid());    ++index;  }  ResultSet rs=checkExists.executeQuery();  Integer sampleID=null;  String sampleUUID=null;  if (rs.next()) {    sampleID=rs.getInt(1);    sampleUUID=rs.getString(2);  }  rs.close();  checkExists.close();  return new ImmutablePair<Integer,String>(sampleID,sampleUUID);}  }
class C{  public void removeChannelPrivate(){  setMode("-p");}  }
class C{  @SuppressWarnings("unchecked") public PropagationImp(Stack<CompositeTransaction> lineage,boolean serial,long timeout){  serial_=serial;  lineage_=(Stack<CompositeTransaction>)lineage.clone();  timeout_=timeout;}  }
class C{  protected void autoscaleAxes(){  if (data.isEmpty()) {    return;  }  for (  String axisName : getAxesNames()) {    autoscaleAxis(axisName);  }}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length) {    throw new InvalidCipherTextException("pad block corrupted");  }  return count;}  }
class C{  public static byte[] encrypt(byte[] bytes) throws GeneralSecurityException {  SecretKeySpec skeySpec=new SecretKeySpec(Base64.decodeBase64(ENCRYPTION_KEY),"AES");  Cipher cipher=Cipher.getInstance("AES");  cipher.init(Cipher.ENCRYPT_MODE,skeySpec);  byte[] encrypted=cipher.doFinal(bytes);  return Base64.encodeBase64(encrypted);}  }
class C{  public String toString(){  String basic=getClass().getName();  basic=basic.substring(basic.lastIndexOf('.') + 1);  StringBuilder buffer=new StringBuilder(basic);  buffer.append('@').append(Integer.toHexString(hashCode()));  buffer.append("(position=").append(this.position);  if (this.delegate != null)   buffer.append("delegate=").append(this.delegate);  buffer.append(", forwards = [");  for (  int i : forwardReferences) {    buffer.append(forwardReferences[i] + ", ");  }  buffer.deleteCharAt(buffer.length() - 1).deleteCharAt(buffer.length() - 1).append("] )");  return buffer.toString();}  }
class C{  public int hashCode(){  int hc=13 * sort;  if (sort == OBJECT || sort == ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public static ProductFragment newInstance(@SuppressWarnings("TypeMayBeWeakened") Product product){  ProductFragment productFragment=new ProductFragment();  Bundle args=new Bundle();  args.putSerializable(KEY_PRODUCT,product);  productFragment.setArguments(args);  return productFragment;}  }
class C{  @Override public void flush() throws Exception {  IEagleServiceClient client=new EagleServiceClientImpl(MRHistoryJobConfig.get().getEagleServiceConfig().eagleServiceHost,MRHistoryJobConfig.get().getEagleServiceConfig().eagleServicePort,MRHistoryJobConfig.get().getEagleServiceConfig().username,MRHistoryJobConfig.get().getEagleServiceConfig().password);  client.getJerseyClient().setReadTimeout(MRHistoryJobConfig.get().getEagleServiceConfig().readTimeoutSeconds * 1000);  logger.info("start flushing entities of total number " + list.size());  List<GenericMetricEntity> metricEntities=new ArrayList<>();  for (int i=0; i < list.size(); i++) {    JobBaseAPIEntity entity=list.get(i);    if (entity instanceof JobExecutionAPIEntity) {      jobs.add((JobExecutionAPIEntity)entity);      JobHistoryZKStateManager.instance().updateProcessedJob(timeStamp2Date(entity.getTimestamp()),entity.getTags().get(MRJobTagName.JOB_ID.toString()),((JobExecutionAPIEntity)entity).getCurrentState());      metricEntities.addAll(jobExecutionMetricsCreationListener.generateMetrics((JobExecutionAPIEntity)entity));      emitFailedJob((JobExecutionAPIEntity)entity);    } else     if (entity instanceof JobEventAPIEntity) {      jobEvents.add((JobEventAPIEntity)entity);    } else     if (entity instanceof TaskExecutionAPIEntity) {      taskExecs.add((TaskExecutionAPIEntity)entity);    } else     if (entity instanceof TaskAttemptExecutionAPIEntity) {      taskAttemptExecs.add((TaskAttemptExecutionAPIEntity)entity);    }  }  GenericServiceAPIResponseEntity result;  if (jobs.size() > 0) {    logger.info("flush JobExecutionAPIEntity of number " + jobs.size());    result=client.create(jobs);    checkResult(result);    jobs.clear();  }  if (metricEntities.size() > 0) {    logger.info("flush job metrics of number " + metricEntities.size());    result=client.create(metricEntities);    checkResult(result);    metricEntities.clear();  }  if (jobEvents.size() > 0) {    logger.info("flush JobEventAPIEntity of number " + jobEvents.size());    result=client.create(jobEvents);    checkResult(result);    jobEvents.clear();  }  if (taskExecs.size() > 0) {    logger.info("flush TaskExecutionAPIEntity of number " + taskExecs.size());    result=client.create(taskExecs);    checkResult(result);    taskExecs.clear();  }  if (taskAttemptExecs.size() > 0) {    logger.info("flush TaskAttemptExecutionAPIEntity of number " + taskAttemptExecs.size());    result=client.create(taskAttemptExecs);    checkResult(result);    taskAttemptExecs.clear();  }  logger.info("finish flushing entities of total number " + list.size());  list.clear();  client.getJerseyClient().destroy();  client.close();}  }
class C{  protected DelegatingSocket(SocketImpl impl) throws SocketException {  this((Socket)null);}  }
class C{  @Override protected void keyTyped(char par1,int par2){  if (par2 == 28 || par2 == 156)   actionPerformed((GuiButton)buttonList.get(0));}  }
class C{  public boolean isStrictQualifier(){  return isStrict;}  }
class C{  public boolean isAnswerValid(String text){  return text != null && text.length() > 0 && (maximumLength == UNLIMITED_LENGTH || text.length() <= maximumLength);}  }
class C{  public Query since(final String since){  setSince(since);  return this;}  }
class C{  private void tokenizeAndTag(Tagger tagger,Tweet tweet) throws IOException {  tweet.setRawWordList(tagger.tokenizeAndTag(tweet.getRawTweetString()));  tweet.setWordList(tagger.tokenizeAndTag(tweet.getTweetString()));  tweet.setCollapseList(this.collapseTweet(tweet));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.942 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  public static void printCheckboxes(Writer out,String name,String[] values,Set<String> checked) throws IOException {  Set<String> allValues=new TreeSet<String>();  allValues.addAll(Arrays.asList(values));  if (checked == null) {    checked=new HashSet<String>();  }  allValues.addAll(checked);  int middle=(allValues.size() + 2) / 2;  int row=0;  out.write("<table cellpadding=\"0\" cellspacing=\"0\" border=\"0\">");  out.write("<tr><td><ul class=\"inputlist\">");  for (  String value : allValues) {    if (row == middle) {      out.write("</ul></td><td><ul class=\"inputlist\">");    }    out.write("<li>");    printCheckbox(out,name,value,checked.contains(value));    out.write("</li>");    row++;  }  out.write("<li><label>Other:<br/><input id=\"other");  out.write(name);  out.write("\" type=\"text\" name=\"");  out.write(name);  out.write("\" value=\"\" size=\"15\" class=\"txt\"></label></li>");  out.write("</ul></td></tr></table>");}  }
class C{  public void testDoConfigureSetsDefaultPort() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(ServletPropertySet.PORT),"//Server/@ListenPort",config);}  }
class C{  public BitmapDrawable(Resources res,Bitmap bitmap){  this(new BitmapState(bitmap),res);  mBitmapState.mTargetDensity=mTargetDensity;}  }
class C{  public static String stripWhitespace(String s){  return stripCharsInBag(s,whitespace);}  }
