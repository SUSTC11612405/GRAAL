class C{  public static void positionCenterWindow(Window parent,Window window){  if (parent == null) {    positionCenterScreen(window);    return;  }  window.pack();  Dimension sSize=Toolkit.getDefaultToolkit().getScreenSize();  GraphicsConfiguration config=window.getGraphicsConfiguration();  Insets insets=Toolkit.getDefaultToolkit().getScreenInsets(config);  sSize.width-=(insets.left + insets.right);  sSize.height-=(insets.top + insets.bottom);  Dimension wSize=window.getSize();  if (wSize.height > sSize.height)   wSize.height=sSize.height;  if (wSize.width > sSize.width)   wSize.width=sSize.width;  window.setSize(wSize);  Rectangle pBounds=parent.getBounds();  if (pBounds.x == pBounds.y && pBounds.x == 0) {    positionCenterScreen(window);    return;  }  int x=pBounds.x + ((pBounds.width - wSize.width) / 2);  if (x < 0)   x=0;  int y=pBounds.y + ((pBounds.height - wSize.height) / 2);  if (y < 0)   y=0;  if (x + wSize.width > sSize.width)   x=sSize.width - wSize.width;  if (y + wSize.height > sSize.height)   y=sSize.height - wSize.height;  window.setLocation(x + insets.left,y + insets.top);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.152 -0500",hash_original_method="9932B280A007D916C3D0233ED3BF3F06",hash_generated_method="E230E84E63B2CE60CCC0DA1455716A12") static float squaredEuclideanDistance(float[] vector1,float[] vector2){  float squaredDistance=0;  int size=vector1.length;  for (int i=0; i < size; i++) {    float difference=vector1[i] - vector2[i];    squaredDistance+=difference * difference;  }  return squaredDistance / size;}  }
class C{  public Facet buildFacet(Domain domain,DimensionIndex index,Collection<DimensionMember> values,DashboardSelection sel){  Facet resultFacet=new Facet();  resultFacet.setDimension(index.getDimension());  resultFacet.setProxy(index instanceof DimensionIndexProxy);  resultFacet.setCompositeName(index.isCompositeName());  resultFacet.setName(index.getDimensionName());  String id=index.getAxis().prettyPrint();  resultFacet.setId(encode(id));  List<FacetMember> items=resultFacet.getItems();  if (index.getDimension().getType() == Type.CONTINUOUS) {    if (values != null) {      IntervalleObject value=null;      for (      DimensionMember next : values) {        if (value == null) {          if (next.getID() instanceof IntervalleObject) {            value=(IntervalleObject)next.getID();          } else {            items.add(toFacet(index,next));          }        } else {          if (next.getID() instanceof IntervalleObject) {            IntervalleObject moreDate=(IntervalleObject)next.getID();            value=value.merge(moreDate);          } else {            items.add(toFacet(index,next));          }        }      }      if (value != null) {        items.add(toFacet(value));      }    }    resultFacet.setTotalSize(items.size());  } else {    if (values != null) {      for (      DimensionMember member : values) {        FacetMember fm=toFacet(index,member);        items.add(fm);      }    }  }  Collection<DimensionMember> members=sel.getMembers(index.getAxis());  for (  DimensionMember member : members) {    resultFacet.getSelectedItems().add(toFacet(index,member));  }  return resultFacet;}  }
class C{  public static <E>WorkQueueProcessor<E> create(String name,int bufferSize,WaitStrategy strategy){  return create(name,bufferSize,strategy,true);}  }
class C{  public static String uncapitalise(String str){  if (str == null) {    return null;  } else   if (str.length() == 0) {    return "";  } else {    return new StringBuilder(str.length()).append(Character.toLowerCase(str.charAt(0))).append(str.substring(1)).toString();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.223 -0400",hash_original_method="F3793FD3E2505AD035424F13E8FC4E3E",hash_generated_method="A58E4C50621A1951F80865295014D02B") public String decode(String pString,String charset) throws DecoderException, UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(decode(pString.getBytes(StringEncodings.US_ASCII)),charset);}  }
class C{  public char readChar() throws IOException {switch (type) {case MatDataTypes.miUINT8:    return (char)(buf.get() & 0xFF);case MatDataTypes.miINT8:  return (char)buf.get();case MatDataTypes.miUINT16:return (char)(buf.getShort() & 0xFFFF);case MatDataTypes.miINT16:return (char)buf.getShort();case MatDataTypes.miUINT32:return (char)(buf.getInt() & 0xFFFFFFFF);case MatDataTypes.miINT32:return (char)buf.getInt();case MatDataTypes.miDOUBLE:return (char)buf.getDouble();case MatDataTypes.miUTF8:return (char)buf.get();default :throw new IllegalArgumentException("Unknown data type: " + type);}}  }
class C{  public GridClientTopology topology(){  return top;}  }
class C{  public void sync() throws DroidModelException {}  }
class C{  public int hashCode(){  return Objects.hash(y,p,g);}  }
class C{  protected void addDefaultComponents(final ContextInitializer initializer){  initializer.addComponents(new AssetService(),new SkinAssetAnnotationProcessor(),new LocaleService(),new MusicEnabledAnnotationProcessor(),new MusicVolumeAnnotationProcessor(),new SoundEnabledAnnotationProcessor(),new SoundVolumeAnnotationProcessor(),new I18nBundleAnnotationProcessor(),new PreferenceAnnotationProcessor(),new SkinAnnotationProcessor(),new StageViewportAnnotationProcessor(),new PreferencesService(),new ViewAnnotationProcessor(),new ViewDialogAnnotationProcessor(),new ViewActionContainerAnnotationProcessor(),new ViewStageAnnotationProcessor(),new LmlMacroAnnotationProcessor(),new LmlParserSyntaxAnnotationProcessor(),new AvailableLocalesAnnotationProcessor(),new MusicService(),interfaceService,new SkinService());}  }
class C{  private void cleanKnotenVonSpurNachSpurMapping(Map<Integer,Map<Integer,List<Integer>>> knotenVonSpurNachSpurMapping,Map<Integer,Map<Integer,String>> knotenSpurLinkMapping){  List<Tuple<Integer,Integer>> malformedNodeSpurIds=new ArrayList<Tuple<Integer,Integer>>();  List<Integer> malformedNodeIds=new ArrayList<Integer>();  for (  Integer knotenId : knotenVonSpurNachSpurMapping.keySet()) {    if (!knotenSpurLinkMapping.containsKey(knotenId)) {      malformedNodeIds.add(knotenId);    } else {      Map<Integer,List<Integer>> vonSpurNachSpurMap=knotenVonSpurNachSpurMapping.get(knotenId);      for (      Integer vonSpurId : vonSpurNachSpurMap.keySet()) {        if (!knotenSpurLinkMapping.get(knotenId).containsKey(vonSpurId)) {          malformedNodeSpurIds.add(new Tuple<Integer,Integer>(knotenId,vonSpurId));        } else {          List<Tuple<Integer,Integer>> malformedNachSpur=new ArrayList<Tuple<Integer,Integer>>();          for (          Integer nachSpur : vonSpurNachSpurMap.get(vonSpurId)) {            if (!knotenSpurLinkMapping.get(knotenId).containsKey(nachSpur)) {              malformedNachSpur.add(new Tuple<Integer,Integer>(vonSpurId,nachSpur));            }          }          for (          Tuple<Integer,Integer> t : malformedNachSpur) {            vonSpurNachSpurMap.get(t.getFirst()).remove(t.getSecond());          }        }      }    }  }  for (  Integer id : malformedNodeIds) {    knotenVonSpurNachSpurMapping.remove(id);  }  for (  Tuple<Integer,Integer> t : malformedNodeSpurIds) {    if (knotenVonSpurNachSpurMapping.containsKey(t.getFirst())) {      knotenVonSpurNachSpurMapping.get(t.getFirst()).remove(t.getSecond());      if (knotenVonSpurNachSpurMapping.get(t.getFirst()).isEmpty()) {        knotenVonSpurNachSpurMapping.remove(t.getFirst());      }    }  }}  }
class C{  public SymbolTableEntryOriginal basicGetDelegationBaseType(){  return delegationBaseType;}  }
class C{  public static AffineTransform createAffineTransform(Reader r) throws ParseException {  TransformListParser p=new TransformListParser();  AWTTransformProducer th=new AWTTransformProducer();  p.setTransformListHandler(th);  p.parse(r);  return th.getAffineTransform();}  }
class C{  public V put(CharSequence text,V value){  return put(text.toString(),value);}  }
class C{  @Override public E remove(int index){  E oldValue;  while (true) {    Object[] elements=array;    Object[] newElements=createArrayRemove(elements,index);    if (replaceArray(elements,newElements)) {      oldValue=get(elements,index);      break;    }  }  return oldValue;}  }
class C{  public void animateXY(int durationMillisX,int durationMillisY){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillisY);  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setDuration(durationMillisX);  if (durationMillisX > durationMillisY) {    animatorX.addUpdateListener(mListener);  } else {    animatorY.addUpdateListener(mListener);  }  animatorX.start();  animatorY.start();}  }
class C{  private void onRemoveAll(View v){  search_box.setText("");  search_box.requestFocus();  remove_all.setVisibility(View.GONE);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:24.799 -0500",hash_original_method="75F09C9D81AE7E21861BB145326A0585",hash_generated_method="39627E1086EAE975BD62CE1141382E57") public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof X500Name || obj instanceof ASN1Sequence)) {    return false;  }  DERObject derO=((DEREncodable)obj).getDERObject();  if (this.getDERObject().equals(derO)) {    return true;  }  try {    return style.areEqual(this,new X500Name(ASN1Sequence.getInstance(((DEREncodable)obj).getDERObject())));  } catch (  Exception e) {    return false;  }}  }
class C{  public static TransferTransaction createTransfer(final Account signer){  return createTransferWithAttachment(signer,null);}  }
class C{  public static void init(@NonNull final Context context){  getInstance(context).initDefault();}  }
class C{  private String bufferToString(char[] charArray){  return new String(charArray,0,10);}  }
class C{  public void removeDragOverListener(ActionListener l){  if (dragOverListener == null) {    return;  }  dragOverListener.removeListener(l);  if (!dragOverListener.hasListeners()) {    dragOverListener=null;  }}  }
class C{  void addComponent(Component comp,GridBagLayout gb,GridBagConstraints c,int gridx,int gridy,int gridwidth,int anchor,Container cont,int weightx,int weighty,int fill,Insets in){  c.gridx=gridx;  c.gridy=gridy;  c.gridwidth=gridwidth;  c.anchor=anchor;  c.weightx=weightx;  c.weighty=weighty;  c.fill=fill;  c.insets=in;  gb.setConstraints(comp,c);  cont.add(comp);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public HttpClientError(final String message){  super(message);}  }
class C{  protected List<String> convertListToUpperCase(List<String> list){  List<String> upperCaseList=new ArrayList<>();  for (  String value : list) {    upperCaseList.add(value.toUpperCase());  }  return upperCaseList;}  }
class C{  @Override public void stop(){  stop(false,false,true);}  }
class C{  public static List<Attr> findAttributeByValue(Document doc,String attributeValue){  List<Attr> returnedElements=new ArrayList<Attr>();  String xpath=String.format("//attribute::*[string()='%s']",attributeValue);  try {    returnedElements=(List<Attr>)evaluateXPath(doc,xpath);    LOG.trace(String.format("### Element with Attribute '%s' ### \n%s",attributeValue,nodelistToFastXPathList(returnedElements)));  } catch (  XPathExpressionException e) {    LOG.warn(String.format("BAD XPATH: %s",xpath));  }  return returnedElements;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if ((this.bits & ASTNode.IsReachable) == 0) {    return;  }  if (needValueStore()) {    this.expression.generateCode(currentScope,needValue());  }}  }
class C{  public Boolean isNetworkReservationSupported(){  return networkReservationSupported;}  }
class C{  @Override public Enumeration elements(){  return Collections.enumeration(permissions);}  }
class C{  private form printControlPanel(int activeNode,MWorkflow wf,MWFNode[] nodes,ArrayList nodes_ID){  form myForm=new form(FORM_ACTION,form.METHOD_POST,form.ENC_DEFAULT);  myForm.addElement(new input("hidden",M_Command,""));  myForm.addElement(new input("hidden",J_Command,""));  myForm.setTarget(TARGET_WINDOW);  myForm.setName(FORM_NAME);  boolean isFirst=wf.isFirst(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));  boolean isLast=wf.isLast(activeNode,Env.getContextAsInt(ctx,"#AD_Client_ID"));  int First_Window_ID=wf.getFirstNode().getAD_Window_ID();  int Last_Window_ID=nodes[nodes.length - 1].getAD_Window_ID();  int Back_Window_ID=0;  int Next_Window_ID=0;  int index=0;  if (!isFirst) {    index=activeNode >= 0 ? getIndex(activeNode,nodes_ID) - 1 : 0;    Back_Window_ID=nodes[index].getAD_Window_ID();  }  if (!isLast) {    index=activeNode >= 0 ? getIndex(activeNode,nodes_ID) + 1 : 0;    Next_Window_ID=nodes[index].getAD_Window_ID();  }  boolean enableFirst=true;  boolean enableBack=true;  boolean enableNext=true;  boolean enableLast=true;  if (isFirst) {    enableBack=false;    enableFirst=false;  }  if (isLast) {    enableNext=false;    enableLast=false;  }  td firstImage=new td();  td backImage=new td();  td nextImage=new td();  td lastImage=new td();  String url="'WWindow?AD_Window_ID=" + First_Window_ID + "'";  String Target_Window="'WWindow" + First_Window_ID + "'";  String parameters=url + "," + Target_Window;  String js_command="popUp(" + parameters + ");submit()";  firstImage.addElement(createControlButtonImage("Start",js_command,enableFirst));  url="'WWindow?AD_Window_ID=" + Back_Window_ID + "'";  Target_Window="'WWindow" + Back_Window_ID + "'";  parameters=url + "," + Target_Window;  js_command="popUp(" + parameters + ");submit()";  backImage.addElement(createControlButtonImage("Back",js_command,enableBack));  url="'WWindow?AD_Window_ID=" + Next_Window_ID + "'";  Target_Window="'WWindow" + Next_Window_ID + "'";  parameters=url + "," + Target_Window;  js_command="popUp(" + parameters + ");submit()";  nextImage.addElement(createControlButtonImage("Next",js_command,enableNext));  url="'WWindow?AD_Window_ID=" + Last_Window_ID + "'";  Target_Window="'WWindow" + Last_Window_ID + "'";  parameters=url + "," + Target_Window;  js_command="popUp(" + parameters + ");submit()";  lastImage.addElement(createControlButtonImage("End",js_command,enableLast));  tr aRow=new tr();  aRow.addElement(firstImage);  aRow.addElement(backImage);  aRow.addElement(nextImage);  aRow.addElement(lastImage);  myForm.addElement(new table().addElement(aRow));  return myForm;}  }
class C{  @VisibleForTesting Block createNextBlockWithCoinbase(byte[] pubKey){  return createNextBlock(null,null,Utils.currentTimeMillis() / 1000,pubKey,Utils.toNanoCoins(50,0));}  }
class C{  @Override public String toString(){  return "CUsurfObject[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + "]";}  }
class C{  private void updateBusinessObjectFormatAlternateKeyOnCreateRequest(BusinessObjectFormatCreateRequest businessObjectFormatCreateRequest,BusinessObjectFormatKey businessObjectFormatKey){  businessObjectFormatCreateRequest.setNamespace(businessObjectFormatKey.getNamespace());  businessObjectFormatCreateRequest.setBusinessObjectDefinitionName(businessObjectFormatKey.getBusinessObjectDefinitionName());  businessObjectFormatCreateRequest.setBusinessObjectFormatUsage(businessObjectFormatKey.getBusinessObjectFormatUsage());  businessObjectFormatCreateRequest.setBusinessObjectFormatFileType(businessObjectFormatKey.getBusinessObjectFormatFileType());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final void saveAsCopy(String current_image,final String destination){  BufferedInputStream from=null;  BufferedOutputStream to=null;  current_image=removeIllegalFileNameCharacters(current_image);  final String source=temp_dir + key + current_image;  try {    from=new BufferedInputStream(new FileInputStream(source));    to=new BufferedOutputStream(new FileOutputStream(destination));    final byte[] buffer=new byte[65535];    int bytes_read;    while ((bytes_read=from.read(buffer)) != -1) {      to.write(buffer,0,bytes_read);    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " copying file");  }  try {    to.close();    from.close();  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " closing files");  }}  }
class C{  public Blade ioc(String... packages){  applicationConfig.addIocPkgs(packages);  return this;}  }
class C{  @Override public boolean equals(Object that){  if (!(that instanceof S2Cap)) {    return false;  }  S2Cap other=(S2Cap)that;  return (axis.equals(other.axis) && height == other.height) || (isEmpty() && other.isEmpty()) || (isFull() && other.isFull());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected Name parseEscapedFieldName(int[] quads,int qlen,int currQuad,int ch,int currQuadBytes) throws IOException, JsonParseException {  final int[] codes=CharTypes.getInputCodeLatin1();  while (true) {    if (codes[ch] != 0) {      if (ch == INT_QUOTE) {        break;      }      if (ch != INT_BACKSLASH) {        _throwUnquotedSpace(ch,"name");      } else {        ch=_decodeEscaped();      }      if (ch > 127) {        if (currQuadBytes >= 4) {          if (qlen >= quads.length) {            _quadBuffer=quads=growArrayBy(quads,quads.length);          }          quads[qlen++]=currQuad;          currQuad=0;          currQuadBytes=0;        }        if (ch < 0x800) {          currQuad=(currQuad << 8) | (0xc0 | (ch >> 6));          ++currQuadBytes;        } else {          currQuad=(currQuad << 8) | (0xe0 | (ch >> 12));          ++currQuadBytes;          if (currQuadBytes >= 4) {            if (qlen >= quads.length) {              _quadBuffer=quads=growArrayBy(quads,quads.length);            }            quads[qlen++]=currQuad;            currQuad=0;            currQuadBytes=0;          }          currQuad=(currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));          ++currQuadBytes;        }        ch=0x80 | (ch & 0x3f);      }    }    if (currQuadBytes < 4) {      ++currQuadBytes;      currQuad=(currQuad << 8) | ch;    } else {      if (qlen >= quads.length) {        _quadBuffer=quads=growArrayBy(quads,quads.length);      }      quads[qlen++]=currQuad;      currQuad=ch;      currQuadBytes=1;    }    if (_inputPtr >= _inputEnd) {      if (!loadMore()) {        _reportInvalidEOF(" in field name");      }    }    ch=_inputBuffer[_inputPtr++] & 0xFF;  }  if (currQuadBytes > 0) {    if (qlen >= quads.length) {      _quadBuffer=quads=growArrayBy(quads,quads.length);    }    quads[qlen++]=currQuad;  }  Name name=_symbols.findName(quads,qlen);  if (name == null) {    name=addName(quads,qlen,currQuadBytes);  }  return name;}  }
class C{  public int index(){  return currentBufferIndex;}  }
class C{  protected synchronized AbstractMRMessage pollMessage(){  if (getNumNodes() <= 0) {    return null;  }  curSerialNodeIndex++;  if (curSerialNodeIndex >= getNumNodes()) {    curSerialNodeIndex=0;  }  if (getMustInit(curSerialNodeIndex)) {    setMustInit(curSerialNodeIndex,false);    AbstractMRMessage m=getNode(curSerialNodeIndex).createInitPacket();    if (m != null) {      log.debug("send init message: " + m);      m.setTimeout(2000);      return m;    }  }  if (getNode(curSerialNodeIndex).mustSend()) {    log.debug("request write command to send");    AbstractMRMessage m=getNode(curSerialNodeIndex).createOutPacket();    getNode(curSerialNodeIndex).resetMustSend();    m.setTimeout(500);    return m;  }  if (getNode(curSerialNodeIndex).getSensorsActive()) {    SerialMessage m=SerialMessage.getPoll(getNode(curSerialNodeIndex).getNodeAddress());    if (curSerialNodeIndex >= getNumNodes()) {      curSerialNodeIndex=0;    }    return m;  } else {    return null;  }}  }
class C{  private ActionBarBackground fadeBackground(Drawable oldDrawable,Drawable newDrawable){  if (oldDrawable == null) {    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {      newDrawable.setCallback(drawableCallback);    } else {      mActionBar.setBackgroundDrawable(newDrawable);    }  } else {    TransitionDrawable td=new TransitionDrawable(new Drawable[]{oldDrawable,newDrawable});    td.setCrossFadeEnabled(true);    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {      td.setCallback(drawableCallback);    } else {      int paddingTop=mToolbar.getPaddingTop();      mActionBar.setBackgroundDrawable(td);      mToolbar.setPadding(mToolbar.getPaddingLeft(),paddingTop,mToolbar.getPaddingRight(),mToolbar.getPaddingBottom());    }    td.startTransition(500);  }  mOldBackground=newDrawable;  return this;}  }
class C{  protected float[] parseFloats(String floatArrayString){  String[] arrayOfNumbers=floatArrayString.split("\\s");  float[] ary=new float[arrayOfNumbers.length];  int i=0;  for (  String s : arrayOfNumbers) {    if (!WWUtil.isEmpty(s))     ary[i++]=Float.parseFloat(s);  }  return ary;}  }
class C{  public static void checkNotUsedByActiveExportGroup(String endpoint,DbClient dbClient){  if (endpoint != null && !"".equals(endpoint)) {    Initiator initiator=getInitiator(endpoint,dbClient);    if (initiator != null && initiator.getId() != null) {      if (NetworkUtil.isInitiatorInUse(initiator.getId(),dbClient)) {        throw APIException.badRequests.endpointsCannotBeUpdatedActiveExport(endpoint);      }    }    List<StoragePort> ports=findStoragePortsInDB(endpoint,dbClient);    for (    StoragePort port : ports) {      if (port != null && port.getId() != null) {        if (NetworkUtil.isBlockStoragePortInUse(port.getId(),dbClient)) {          throw APIException.badRequests.endpointsCannotBeUpdatedActiveExport(endpoint);        }      }    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public synchronized void updateShort(int columnIndex,short x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setShort(columnIndex,x);  } else {    this.inserter.setShort(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  public Builder addExtra(String key,Object value){  this.extra.put(key,value);  return this;}  }
class C{  public static Validator<Object> notNull(@NonNull final Context context,@StringRes final int resourceId){  return new NotNullValidator(context,resourceId);}  }
class C{  public void clear(){  size=0;  offset=0;  currentBufferIndex=-1;  currentBuffer=null;  buffersCount=0;}  }
class C{  public ExportedVariableBinding createExportedVariableBinding(){  ExportedVariableBindingImpl exportedVariableBinding=new ExportedVariableBindingImpl();  return exportedVariableBinding;}  }
class C{  public void update(StateMachine sm,Message msg,String info,IState state,IState orgState,IState dstState){  mSm=sm;  mTime=System.currentTimeMillis();  mWhat=(msg != null) ? msg.what : 0;  mInfo=info;  mState=state;  mOrgState=orgState;  mDstState=dstState;}  }
class C{  public static long next(long crc,int ch){  return (crc >>> 8) ^ CRC_TABLE[((int)crc ^ ch) & 0xff];}  }
class C{  public Lists(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.819 -0500",hash_original_method="B57BF7E15AE8E364684A85B4AA7D0368",hash_generated_method="C8D831E247FC418CD7C5BC57D1431AF9") public final Iterator<String> schemesIterator(){  return mDataSchemes != null ? mDataSchemes.iterator() : null;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[][] points=new double[4][2];  System.out.println("Enter four points:");  for (int i=0; i < points.length; i++) {    for (int j=0; j < points[i].length; j++) {      points[i][j]=input.nextDouble();    }  }  double[] result=getIntersectingPoint(points);  if (result == null)   System.out.println("The two lines are parallel"); else {    System.out.println("The intersecting point is at (" + result[0] + ", "+ result[1]+ ")");  }}  }
class C{  public void testStringDocValuesMatch() throws Exception {  assertU(adoc("id","1","stringdv","b"));  assertU(adoc("id","2","stringdv","a"));  assertU(adoc("id","3","stringdv","c"));  assertU(adoc("id","4","stringdv","car"));  assertU(adoc("id","5","stringdv","dog","stringdv","cat"));  assertU(commit());  assertQ(req("q","stringdv:car","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/str[@name='id'][.=4]");  assertQ(req("q","stringdv:[b TO d]","sort","id asc"),"//*[@numFound='4']","//result/doc[1]/str[@name='id'][.=1]","//result/doc[2]/str[@name='id'][.=3]","//result/doc[3]/str[@name='id'][.=4]","//result/doc[4]/str[@name='id'][.=5]");  assertQ(req("q","stringdv:c*","sort","id asc"),"//*[@numFound='3']","//result/doc[1]/str[@name='id'][.=3]","//result/doc[2]/str[@name='id'][.=4]","//result/doc[3]/str[@name='id'][.=5]");  assertQ(req("q","stringdv:c?r","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/str[@name='id'][.=4]");  assertQ(req("q","stringdv:/c[a-b]r/","sort","id asc"),"//*[@numFound='1']","//result/doc[1]/str[@name='id'][.=4]");}  }
class C{  public void addContent(List<FunctionInput> inputs){  Collections.sort(inputs,FUNCTION_INPUT_COMPARATOR);  for (  FunctionInput input : inputs) {    if (input.isVisible()) {      if (modelMap.containsKey(input.getCategoryName())) {        modelMap.get(input.getCategoryName()).add(input);      } else {        modelMap.put(input.getCategoryName(),new LinkedList<FunctionInput>());        modelMap.get(input.getCategoryName()).add(input);      }    }  }  applyFilter();}  }
class C{  protected void rankCoordinates(int rankValue,mxGraph graph,mxGraphHierarchyModel model){  mxGraphHierarchyRank rank=model.ranks.get(new Integer(rankValue));  double maxY=0.0;  double localX=initialX + (widestRankValue - rankWidths[rankValue]) / 2;  boolean boundsWarning=false;  Iterator<mxGraphAbstractHierarchyCell> iter=rank.iterator();  while (iter.hasNext()) {    mxGraphAbstractHierarchyCell cell=(mxGraphAbstractHierarchyCell)iter.next();    if (cell.isVertex()) {      mxGraphHierarchyNode node=(mxGraphHierarchyNode)cell;      mxRectangle bounds=layout.getVertexBounds(node.cell);      if (bounds != null) {        if (orientation == SwingConstants.NORTH || orientation == SwingConstants.SOUTH) {          cell.width=bounds.getWidth();          cell.height=bounds.getHeight();        } else {          cell.width=bounds.getHeight();          cell.height=bounds.getWidth();        }      } else {        boundsWarning=true;      }      maxY=Math.max(maxY,cell.height);    } else     if (cell.isEdge()) {      mxGraphHierarchyEdge edge=(mxGraphHierarchyEdge)cell;      int numEdges=1;      if (edge.edges != null) {        numEdges=edge.edges.size();      } else {        logger.info("edge.edges is null");      }      cell.width=(numEdges - 1) * parallelEdgeSpacing;    }    localX+=cell.width / 2.0;    cell.setX(rankValue,localX);    cell.setGeneralPurposeVariable(rankValue,(int)localX);    localX+=cell.width / 2.0;    localX+=intraCellSpacing;  }  if (boundsWarning == true) {    logger.info("At least one cell has no bounds");  }}  }
class C{  @Override public boolean exists(long itemId){  return preloadCache.get().containsKey(itemId);}  }
class C{  public void subjectId(UUID subjId){  this.subjId=subjId;}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  private void updateStats(InstanceContentEvent event){  Instance inst=event.getInstance();  this.model.trainOnInstance(inst);  this.instancesCount++;  if (this.changeDetector != null) {    boolean correctlyClassifies=this.correctlyClassifies(inst);    double oldEstimation=this.changeDetector.getEstimation();    this.changeDetector.input(correctlyClassifies ? 0 : 1);    if (this.changeDetector.getChange() && this.changeDetector.getEstimation() > oldEstimation) {      this.model.resetLearning();      this.changeDetector.resetLearning();    }  }}  }
class C{  private Symbol internalGetField(String fieldName,Symbol instance){  boolean isStatic=instance == null;  for (  Field field : clazz.getFields()) {    if (field.getName().equals(fieldName) && Modifier.isStatic(field.getModifiers()) == isStatic) {      ReflectionBasedField rbf=new ReflectionBasedField(field,resolver);      return rbf;    }  }  List<Method> matchingMethods=new ArrayList<>();  for (  Method method : clazz.getMethods()) {    if (method.getName().equals(fieldName) && Modifier.isStatic(method.getModifiers()) == isStatic) {      matchingMethods.add(method);    }  }  if (matchingMethods.isEmpty()) {    throw new UnsolvedSymbolException(fieldName);  } else {    ReflectionBasedSetOfOverloadedMethods rbsoom=new ReflectionBasedSetOfOverloadedMethods(matchingMethods,instance,resolver);    return rbsoom;  }}  }
class C{  public void unitSelected(BoardViewEvent b){}  }
class C{  private static StringBuilder dump(StringBuilder _cbuffer,byte value){  for (int j=0; j < 2; j++) {    _cbuffer.append(CHARS[value >> SHIFTS[j + 6] & 15]);  }  return _cbuffer;}  }
class C{  private static void refreshExportMask(DbClient dbClient,VPlexStorageViewInfo storageView,ExportMask exportMask,Map<String,String> targetPortToPwwnMap,NetworkDeviceController networkDeviceController,boolean isRemoveOperation){  try {    if (null == exportMask || null == storageView || null == targetPortToPwwnMap || targetPortToPwwnMap.isEmpty()) {      int portNameMapEntryCount=targetPortToPwwnMap != null ? targetPortToPwwnMap.size() : 0;      String message=String.format("export mask was %s, storage view was %s, and port name to wwn map had %d entries",exportMask,storageView,portNameMapEntryCount);      log.error(message);      if (null == storageView) {        if (null != exportMask) {          log.error(String.format("storage view %s could not be found on VPLEX device %s",exportMask.getMaskName(),exportMask.getStorageDevice()));          cleanStaleExportMasks(dbClient,exportMask.getStorageDevice());        }        throw new IllegalArgumentException("storage view could not be found on vplex device; " + message + "; any stale export masks have been removed, so you may retry the operation");      } else {        throw new IllegalArgumentException("export mask refresh arguments are invalid: " + message);      }    }    Map<String,Integer> discoveredVolumes=storageView.getWwnToHluMap();    List<String> discoveredInitiators=storageView.getInitiatorPwwns();    Set<String> existingVolumes=(exportMask.getExistingVolumes() != null) ? exportMask.getExistingVolumes().keySet() : Collections.emptySet();    Set<String> existingInitiators=(exportMask.getExistingInitiators() != null) ? exportMask.getExistingInitiators() : Collections.emptySet();    List<String> viprVolumes=new ArrayList<String>();    if (exportMask.getVolumes() != null) {      List<Volume> vols=dbClient.queryObject(Volume.class,URIUtil.toURIList(exportMask.getVolumes().keySet()));      for (      Volume volume : vols) {        viprVolumes.add(volume.getWWN());      }    }    List<String> viprInits=new ArrayList<String>();    if (exportMask.getInitiators() != null && !exportMask.getInitiators().isEmpty()) {      List<Initiator> inits=dbClient.queryObject(Initiator.class,URIUtil.toURIList(exportMask.getInitiators()));      for (      Initiator init : inits) {        viprInits.add(Initiator.normalizePort(init.getInitiatorPort()));      }    }    String name=exportMask.getMaskName();    log.info(String.format("%nExportMask %s in the ViPR database: ViPR Vols:{%s} ViPR Inits:{%s} Existing Inits:{%s} Existing Vols:{%s}%n",name,Joiner.on(',').join(viprVolumes),Joiner.on(',').join(viprInits),Joiner.on(',').join(existingInitiators),Joiner.on(',').join(existingVolumes)));    log.info(String.format("StorageView %s discovered on VPLEX: Inits:{%s} Vols:{%s}%n",name,Joiner.on(',').join(discoveredInitiators),Joiner.on(',').join(discoveredVolumes.keySet())));    boolean addInitiators=false;    List<String> initiatorPortWwnsToAdd=new ArrayList<String>();    List<Initiator> initiatorObjectsForComputeResourceToAdd=new ArrayList<Initiator>();    for (    String port : discoveredInitiators) {      String normalizedPort=Initiator.normalizePort(port);      Initiator knownInitiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(port),dbClient);      if (!exportMask.hasExistingInitiator(normalizedPort) && (!exportMask.hasUserInitiator(normalizedPort) || !exportMask.hasInitiator(knownInitiator != null ? knownInitiator.getId().toString() : NullColumnValueGetter.getNullURI().toString()))) {        if (knownInitiator != null && !ExportMaskUtils.checkIfDifferentResource(exportMask,knownInitiator)) {          initiatorObjectsForComputeResourceToAdd.add(knownInitiator);        } else {          initiatorPortWwnsToAdd.add(normalizedPort);        }        addInitiators=true;      }    }    boolean removeInitiators=false;    List<String> initiatorsToRemove=new ArrayList<String>();    List<URI> initiatorIdsToRemove=new ArrayList<URI>();    if (exportMask.getExistingInitiators() != null && !exportMask.getExistingInitiators().isEmpty()) {      initiatorsToRemove.addAll(exportMask.getExistingInitiators());      initiatorsToRemove.removeAll(discoveredInitiators);    }    List<String> initiatorsToRemoveFromExisting=new ArrayList<String>();    if (!isRemoveOperation) {      for (      String initWwn : discoveredInitiators) {        Initiator managedInitiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(initWwn),dbClient);        if ((exportMask.hasUserInitiator(initWwn) || (managedInitiator != null && exportMask.hasInitiator(managedInitiator.getId().toString()))) && exportMask.hasExistingInitiator(initWwn)) {          log.info("\texisting initiators contain id {}, but it is also in " + "user added inits, removing from existing inits",initWwn);          initiatorsToRemoveFromExisting.add(initWwn);        }      }    }    if (exportMask.getInitiators() != null && !exportMask.getInitiators().isEmpty()) {      initiatorIdsToRemove.addAll(Collections2.transform(exportMask.getInitiators(),CommonTransformerFunctions.FCTN_STRING_TO_URI));      for (      String port : discoveredInitiators) {        Initiator existingInitiator=ExportUtils.getInitiator(Initiator.toPortNetworkId(port),dbClient);        if (existingInitiator != null) {          initiatorIdsToRemove.remove(existingInitiator.getId());        }      }    }    removeInitiators=!initiatorsToRemove.isEmpty() || !initiatorIdsToRemove.isEmpty() || !initiatorsToRemoveFromExisting.isEmpty();    Map<String,Integer> volumesToAdd=ExportMaskUtils.diffAndFindNewVolumes(exportMask,discoveredVolumes);    boolean addVolumes=!volumesToAdd.isEmpty();    boolean removeVolumes=false;    List<String> volumesToRemoveFromExisting=new ArrayList<String>();    if (exportMask.getExistingVolumes() != null && !exportMask.getExistingVolumes().isEmpty()) {      volumesToRemoveFromExisting.addAll(exportMask.getExistingVolumes().keySet());      volumesToRemoveFromExisting.removeAll(discoveredVolumes.keySet());    }    if (!isRemoveOperation) {      for (      String wwn : discoveredVolumes.keySet()) {        if (exportMask.hasExistingVolume(wwn)) {          URIQueryResultList volumeList=new URIQueryResultList();          dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeWwnConstraint(wwn),volumeList);          if (volumeList.iterator().hasNext()) {            URI volumeURI=volumeList.iterator().next();            if (exportMask.hasUserCreatedVolume(volumeURI)) {              log.info("\texisting volumes contain wwn {}, but it is also in the " + "export mask's user added volumes, so removing from existing volumes",wwn);              volumesToRemoveFromExisting.add(wwn);            }          }        }      }    }    removeVolumes=!volumesToRemoveFromExisting.isEmpty();    List<String> storagePorts=storageView.getPorts();    List<String> portWwns=new ArrayList<String>();    for (    String storagePort : storagePorts) {      if (targetPortToPwwnMap.keySet().contains(storagePort)) {        portWwns.add(WwnUtils.convertWWN(targetPortToPwwnMap.get(storagePort),WwnUtils.FORMAT.COLON));      }    }    List<String> storagePortURIs=ExportUtils.storagePortNamesToURIs(dbClient,portWwns);    boolean addStoragePorts=false;    List<String> storagePortsToAdd=new ArrayList<String>();    if (exportMask.getStoragePorts() == null) {      exportMask.setStoragePorts(new ArrayList<String>());    }    for (    String portID : storagePortURIs) {      if (!exportMask.getStoragePorts().contains(portID)) {        storagePortsToAdd.add(portID);        addStoragePorts=true;      }    }    boolean removeStoragePorts=false;    List<String> storagePortsToRemove=new ArrayList<String>();    if (exportMask.getStoragePorts() != null && !exportMask.getStoragePorts().isEmpty()) {      storagePortsToRemove.addAll(exportMask.getStoragePorts());      storagePortsToRemove.removeAll(storagePortURIs);      removeStoragePorts=!storagePortsToRemove.isEmpty();    }    log.info(String.format("ExportMask %s refresh initiators; addToExisting:{%s} removeAndUpdateZoning:{%s} removeFromExistingOnly:{%s}%n",name,Joiner.on(',').join(initiatorPortWwnsToAdd),Joiner.on(',').join(initiatorsToRemove),Joiner.on(',').join(initiatorsToRemoveFromExisting)));    log.info(String.format("ExportMask %s refresh volumes; addToExisting:{%s} removeFromExistingOnly:{%s}%n",name,Joiner.on(',').join(volumesToAdd.keySet()),Joiner.on(',').join(volumesToRemoveFromExisting)));    log.info(String.format("ExportMask %s refresh ports; add:{%s} remove:{%s}%n",name,Joiner.on(',').join(storagePortsToAdd),Joiner.on(',').join(storagePortsToRemove)));    if (addInitiators || removeInitiators || addVolumes|| removeVolumes|| addStoragePorts|| removeStoragePorts) {      log.info("ExportMask refresh: There are changes to mask, updating it...\n");      exportMask.removeFromExistingInitiators(initiatorsToRemove);      exportMask.removeFromExistingInitiators(initiatorsToRemoveFromExisting);      if (initiatorIdsToRemove != null && !initiatorIdsToRemove.isEmpty()) {        exportMask.removeInitiators(dbClient.queryObject(Initiator.class,initiatorIdsToRemove));      }      List<Initiator> userAddedInitiators=ExportMaskUtils.findIfInitiatorsAreUserAddedInAnotherMask(exportMask,initiatorObjectsForComputeResourceToAdd,dbClient);      exportMask.addToUserCreatedInitiators(userAddedInitiators);      exportMask.addToExistingInitiatorsIfAbsent(initiatorPortWwnsToAdd);      exportMask.addToUserCreatedInitiators(initiatorObjectsForComputeResourceToAdd);      exportMask.addInitiators(initiatorObjectsForComputeResourceToAdd);      exportMask.removeFromExistingVolumes(volumesToRemoveFromExisting);      exportMask.addToExistingVolumesIfAbsent(volumesToAdd);      exportMask.getStoragePorts().addAll(storagePortsToAdd);      exportMask.getStoragePorts().removeAll(storagePortsToRemove);      exportMask.setNativeId(storageView.getPath());      ExportMaskUtils.sanitizeExportMaskContainers(dbClient,exportMask);      dbClient.updateObject(exportMask);      log.info("ExportMask is now:\n" + exportMask.toString());    } else {      log.info("ExportMask refresh: There are no changes to the mask\n");    }    networkDeviceController.refreshZoningMap(exportMask,initiatorsToRemove,Collections.emptyList(),(addInitiators || removeInitiators),true);  } catch (  Exception ex) {    log.error("Failed to refresh VPLEX Storage View: " + ex.getLocalizedMessage(),ex);    String storageViewName=exportMask != null ? exportMask.getMaskName() : "unknown";    throw VPlexApiException.exceptions.failedToRefreshVplexStorageView(storageViewName,ex.getLocalizedMessage());  }}  }
class C{  public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_Means == null) {    bufferInput(instance);    return false;  } else {    convertInstance(instance);    return true;  }}  }
class C{  public RealmSampleUserItem withName(String name){  this.name=name;  return this;}  }
class C{  private void createRasterProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/rasterPhotonMap.vs",GL_VERTEX_SHADER);  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/rasterPhotonMap.fs",GL_FRAGMENT_SHADER);  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertexPosition");  glBindAttribLocation(program,1,"vertexNormal");  glBindAttribLocation(program,2,"boxCenter");  glBindAttribLocation(program,3,"boxHalfSize");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.rasterProgram=program;}  }
class C{  private static int dayToUtilDay(int day){switch (day) {case EventRecurrence.SU:    return Calendar.SUNDAY;case EventRecurrence.MO:  return Calendar.MONDAY;case EventRecurrence.TU:return Calendar.TUESDAY;case EventRecurrence.WE:return Calendar.WEDNESDAY;case EventRecurrence.TH:return Calendar.THURSDAY;case EventRecurrence.FR:return Calendar.FRIDAY;case EventRecurrence.SA:return Calendar.SATURDAY;default :throw new IllegalArgumentException("bad day argument: " + day);}}  }
class C{  public void removeLast(){  remove(innerChain.getLast());}  }
class C{  void closeInternal() throws SQLException {  if (result != null) {    try {      result.close();      if (closeStatement && stat != null) {        stat.close();      }    }  finally {      columnCount=0;      result=null;      stat=null;      conn=null;      insertRow=null;      updateRow=null;    }  }}  }
class C{  @Override protected ReferenceEntry<K,V> createEntry(final HashEntry<K,V> next,final int hashCode,final K key,final V value){  return new ReferenceEntry<K,V>(this,next,hashCode,key,value);}  }
class C{  public final int lineNumber(){  return lineNumber;}  }
class C{  BufferedImage createImage(final int w,final int h,final byte[] rgb){  final BufferedImage image;  byte[] imageData=dataToRGBByteArray(rgb,w,h);  image=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);  final Raster raster=ColorSpaceConvertor.createInterleavedRaster(imageData,w,h);  image.setData(raster);  return image;}  }
class C{  private void mapRelativeToAbsolute(float[] destPoints,float[] srcPoints,int numPoints){  for (int i=0; i < numPoints; i++) {    destPoints[i * 2 + 0]=srcPoints[i * 2 + 0] * mImageBounds.width() + mImageBounds.left;    destPoints[i * 2 + 1]=srcPoints[i * 2 + 1] * mImageBounds.height() + mImageBounds.top;  }}  }
class C{  public static void initImageLoader(Context context){  ImageLoaderConfiguration config=new ImageLoaderConfiguration.Builder(context).threadPriority(Thread.NORM_PRIORITY - 2).denyCacheImageMultipleSizesInMemory().discCacheFileNameGenerator(new Md5FileNameGenerator()).tasksProcessingOrder(QueueProcessingType.LIFO).writeDebugLogs().build();  ImageLoader.getInstance().init(config);}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public static void registerGauge(String key,Gauge g){  try {    MetricRegistry reg=SharedMetricRegistries.getOrCreate("okapi");    reg.removeMatching(null);    reg.register(key,g);  } catch (  Exception e) {    logger.warn("registerGauge caught an exception: " + e.getMessage());  }}  }
class C{  public TimeSeries(Comparable name,String domain,String range){  super(name);  this.domain=domain;  this.range=range;  this.timePeriodClass=null;  this.data=new java.util.ArrayList();  this.maximumItemCount=Integer.MAX_VALUE;  this.maximumItemAge=Long.MAX_VALUE;  this.minY=Double.NaN;  this.maxY=Double.NaN;}  }
class C{  public static UUID fromString(String input){  return input.contains("-") ? UUID.fromString(input) : UUID.fromString(UUID_PAT_NO_DASHES.matcher(input).replaceFirst("$1-$2-$3-$4-$5"));}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == ThisArgProvider.class) {switch (derivedFeatureID) {default :    return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (derivedFeatureID) {case N4JSPackage.N4_FIELD_ACCESSOR__BODY:  return N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY;case N4JSPackage.N4_FIELD_ACCESSOR__LOK:return N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK;default :return -1;}}if (baseClass == PropertyNameOwner.class) {switch (derivedFeatureID) {case N4JSPackage.N4_FIELD_ACCESSOR__DECLARED_NAME:return N4JSPackage.PROPERTY_NAME_OWNER__DECLARED_NAME;default :return -1;}}if (baseClass == eu.numberfour.n4js.n4JS.FieldAccessor.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void install(PivotTracingUpdate update){  if (update.hasRemoveAll() && update.getRemoveAll()) {    weaveManager.removeAll();  }  for (  ByteString weaveIdToRemove : update.getRemoveList()) {    weaveManager.unweave(weaveIdToRemove);  }  for (  WeaveSpec weave : update.getWeaveList()) {    weaveManager.weave(weave.getId(),weave);  }  weaveManager.install();  reportStatus(weaveManager.problems());}  }
class C{  public static void waitMilliseconds(long duration){  wait(duration,TimeUnit.MILLISECONDS);}  }
class C{  public Object putObject(String id,Object object){  return objects.put(id,object);}  }
class C{  public static int parseDpsToPixels(Context context,int dps){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dps * scale + 0.5f);}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public boolean isUseOSAuth(){  return m_useOSAuth;}  }
class C{  public void messageNotSentTo(Set failures){  for (Iterator it=failures.iterator(); it.hasNext(); ) {    this.memberDeparted((InternalDistributedMember)it.next(),true);  }}  }
class C{  public FieldBinding original(){  return this;}  }
class C{  private static Object transformContext(SBJob context,String language){  if (context == null) {    return null;  }  if (!language.equals("#cwl-js-engine") && !language.equals("cwl-js-engine")) {    return context.getInputs();  }  return context;}  }
class C{  public void cancelButtonActionPerformed(){  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText1.setText(stdStatus1);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);}  }
class C{  public ContainerItemSlot(String name,String contentSlotName){  super(name,contentSlotName);}  }
class C{  private String payOff(final RPEntity rpEntity,final int factor){  final StackableItem money=(StackableItem)SingletonRepository.getEntityManager().getItem("money");  money.setQuantity(factor * stake);  rpEntity.equipOrPutOnGround(money);  if (factor == 1) {    return "You get your stake back.";  } else {    return "Here's your stake, plus " + (factor - 1) * stake + " pieces of gold.";  }}  }
class C{  public static List<String> parseList(String listValue){  Matcher matcher=SET_PATTERN.matcher(listValue);  if (matcher.find()) {    String content=matcher.group(1);    List<String> result=new ArrayList<String>();    StringBuilder str=null;    STATE state=null;    char last=0;    for (    char c : content.toCharArray()) {      if (str == null)       str=new StringBuilder();      if (c == DOUBLE_QUOTE && last != SLASH) {        if (state == STATE.STRING)         state=null; else         state=STATE.STRING;      } else       if (c == COMMA && state != STATE.STRING) {        result.add(unescape(str.toString()));        str=null;        last=c;        continue;      }      last=c;      str.append(c);    }    if (str != null)     result.add(unescape(str.toString()));    return result;  } else {    LOG.error("Invalid list value: " + listValue);    throw new IllegalArgumentException("Invalid format of list value: " + listValue + ", must be in format: (item1,item2,...)");  }}  }
class C{  private final void addContractOrder(String groupChars,int anOrder,boolean fwd){  if (contractTable == null) {    contractTable=new Vector<>(INITIALTABLESIZE);  }  int ch=groupChars.codePointAt(0);  int entry=mapping.elementAt(ch);  Vector<EntryPair> entryTable=getContractValuesImpl(entry - RBCollationTables.CONTRACTCHARINDEX);  if (entryTable == null) {    int tableIndex=RBCollationTables.CONTRACTCHARINDEX + contractTable.size();    entryTable=new Vector<>(INITIALTABLESIZE);    contractTable.addElement(entryTable);    entryTable.addElement(new EntryPair(groupChars.substring(0,Character.charCount(ch)),entry));    mapping.setElementAt(ch,tableIndex);  }  int index=RBCollationTables.getEntry(entryTable,groupChars,fwd);  if (index != RBCollationTables.UNMAPPED) {    EntryPair pair=entryTable.elementAt(index);    pair.value=anOrder;  } else {    EntryPair pair=entryTable.lastElement();    if (groupChars.length() > pair.entryName.length()) {      entryTable.addElement(new EntryPair(groupChars,anOrder,fwd));    } else {      entryTable.insertElementAt(new EntryPair(groupChars,anOrder,fwd),entryTable.size() - 1);    }  }  if (fwd && groupChars.length() > 1) {    addContractFlags(groupChars);    addContractOrder(new StringBuffer(groupChars).reverse().toString(),anOrder,false);  }}  }
class C{  private static synchronized void startTransaction(Connection C) throws AdeException {  logger.trace("startTransaction() -->entry");  try {    C.setAutoCommit(false);  } catch (  Throwable t) {    surfaceThrowable("startTransaction() called Connection.setAutocomit()",t);    throw adeExceptionOf(t);  }  logger.trace("startTransaction() <-- exit");}  }
class C{  private void processExtensions(SMTPSession session,SMTPResponse resp){  if (ehloExtensions != null) {    for (    EhloExtension ehloExtension : ehloExtensions) {      List<String> lines=ehloExtension.getImplementedEsmtpFeatures(session);      if (lines != null) {        for (        String line : lines) {          resp.appendLine(line);        }      }    }  }}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public void diff_cleanupEfficiency(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  boolean pre_ins=false;  boolean pre_del=false;  boolean post_ins=false;  boolean post_del=false;  Diff thisDiff=pointer.next();  Diff safeDiff=thisDiff;  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      if (thisDiff.text.length() < Diff_EditCost && (post_ins || post_del)) {        equalities.push(thisDiff);        pre_ins=post_ins;        pre_del=post_del;        lastequality=thisDiff.text;      } else {        equalities.clear();        lastequality=null;        safeDiff=thisDiff;      }      post_ins=post_del=false;    } else {      if (thisDiff.operation == Operation.DELETE) {        post_del=true;      } else {        post_ins=true;      }      if (lastequality != null && ((pre_ins && pre_del && post_ins&& post_del) || ((lastequality.length() < Diff_EditCost / 2) && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0)+ (post_del ? 1 : 0)) == 3))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(thisDiff=new Diff(Operation.INSERT,lastequality));        equalities.pop();        lastequality=null;        if (pre_ins && pre_del) {          post_ins=post_del=true;          equalities.clear();          safeDiff=thisDiff;        } else {          if (!equalities.empty()) {            equalities.pop();          }          if (equalities.empty()) {            thisDiff=safeDiff;          } else {            thisDiff=equalities.lastElement();          }          while (thisDiff != pointer.previous()) {          }          post_ins=post_del=false;        }        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }}  }
class C{  public Graph search(List<Node> nodes){  this.logger.log("info","Starting kPC algorithm");  this.logger.log("info","Independence test = " + getIndependenceTest() + ".");  long startTime=System.currentTimeMillis();  if (getIndependenceTest() == null) {    throw new NullPointerException();  }  List allNodes=getIndependenceTest().getVariables();  if (!allNodes.containsAll(nodes)) {    throw new IllegalArgumentException("All of the given nodes must " + "be in the domain of the independence test provided.");  }  graph=new EdgeListGraph(nodes);  graph.fullyConnect(Endpoint.TAIL);  Fas fas=new Fas(graph,getIndependenceTest());  fas.setKnowledge(getKnowledge());  fas.setDepth(getDepth());  fas.setTrueGraph(trueGraph);  graph=fas.search();  this.sepset=fas.getSepsets();  this.numIndependenceTests=fas.getNumIndependenceTests();  this.numFalseDependenceJudgements=fas.getNumFalseDependenceJudgments();  this.numDependenceJudgements=fas.getNumDependenceJudgments();  enumerateTriples();  SearchGraphUtils.pcOrientbk(knowledge,graph,nodes);  SearchGraphUtils.orientCollidersUsingSepsets(sepset,knowledge,graph,verbose);  MeekRules rules=new MeekRules();  rules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);  rules.setKnowledge(knowledge);  rules.orientImplied(graph);  this.logger.log("graph","\nReturning this graph: " + graph);  this.elapsedTime=System.currentTimeMillis() - startTime;  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.log("info","Finishing PC Algorithm.");  this.logger.flush();  return graph;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static int GetVersion(JNIEnvironment env){  if (traceJNI)   VM.sysWrite("JNI called: GetVersion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  return 0x00010004;}  }
class C{  public void init(){  try {    jbInit();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void testStopwordsParsing() throws Exception {  assertStopQueryEquals("one","b:one t:one");  assertStopQueryEquals("one stop","b:one t:one");  assertStopQueryEquals("one (stop)","b:one t:one");  assertStopQueryEquals("one ((stop))","b:one t:one");  assertStopQueryIsMatchNoDocsQuery("stop");  assertStopQueryIsMatchNoDocsQuery("(stop)");  assertStopQueryIsMatchNoDocsQuery("((stop))");}  }
class C{  public void valueChanged(ListSelectionEvent e){  if (_table == null || _updateButton == null) {    return;  }  int row=_table.getSelectedRow();  if (log.isDebugEnabled()) {    log.debug("Table valueChanged: row= " + row);  }  if (row >= 0) {    _updateButton.setEnabled(true);    _updateButton.setToolTipText(null);    if (_family != null) {      _currentIconMap=getFilteredIconMap(ItemPalette.getIconMap(_itemType,_family));    }  } else {    _updateButton.setEnabled(false);    _updateButton.setToolTipText(Bundle.getMessage("ToolTipPickFromTable"));  }  if (_iconPanel.isVisible()) {    showIcons();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns06.class,args);}  }
class C{  public void toEPL(StringWriter writer){  writer.write("update istream ");  writer.write(eventType);  if (this.optionalAsClauseStreamName != null) {    writer.write(" as ");    writer.write(optionalAsClauseStreamName);  }  writer.write(" ");  renderEPLAssignments(writer,assignments);  if (optionalWhereClause != null) {    writer.write(" where ");    optionalWhereClause.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  }}  }
class C{  private void kickOff(Team offense){  if (gameTime <= 0)   return; else {    if (gameTime < 180 && ((gamePoss && (awayScore - homeScore) <= 8 && (awayScore - homeScore) > 0) || (!gamePoss && (homeScore - awayScore) <= 8 && (homeScore - awayScore) > 0))) {      if (offense.getK(0).ratKickFum * Math.random() > 60 || Math.random() < 0.1) {        gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " successfully executes onside kick! "+ offense.abbr+ " has possession!";      } else {        gameEventLog+=getEventPrefix() + offense.abbr + " K "+ offense.getK(0).name+ " failed the onside kick and lost possession.";        gamePoss=!gamePoss;      }      gameYardLine=50;      gameDown=1;      gameYardsNeed=10;      gameTime-=4 + 5 * Math.random();    } else {      gameYardLine=(int)(100 - (offense.getK(0).ratKickPow + 20 - 40 * Math.random()));      if (gameYardLine <= 0)       gameYardLine=25;      gameDown=1;      gameYardsNeed=10;      gamePoss=!gamePoss;    }    gameTime-=15 * Math.random();  }}  }
class C{  public static SpannableString typeface(Context context,int strResId,int style){  if (sDefaultTypefaceCollection == null) {    throw new IllegalStateException("Default typeface collection not initialized. Forgot to call init()?");  }  return typeface(context.getString(strResId),sDefaultTypefaceCollection,style);}  }
class C{  public AuthenticationInfoHeader createAuthenticationInfoHeader(String response) throws ParseException {  if (response == null)   throw new NullPointerException("null arg response");  AuthenticationInfo auth=new AuthenticationInfo();  auth.setResponse(response);  return auth;}  }
class C{  private File createPasswordProperties(String password) throws IOException {  Properties passwordProperties=new Properties();  InputStream existing=new FileInputStream(AbstractAsAdmin.getPasswordFile(getLocalContainer().getConfiguration()));  try {    passwordProperties.load(existing);  }  finally {    existing.close();    existing=null;    System.gc();  }  passwordProperties.setProperty("AS_ADMIN_USERPASSWORD",password);  File tempFile=File.createTempFile("password",".properties");  OutputStream tempFileStream=new FileOutputStream(tempFile);  try {    passwordProperties.store(tempFileStream,null);  }  finally {    tempFileStream.close();    tempFileStream=null;    System.gc();  }  return tempFile;}  }
class C{  private static Bitmap createSquareBitmap(Bitmap bitmap){  Bitmap resizedBitmap=null;  if (null != bitmap) {    int width=bitmap.getWidth();    int height=bitmap.getHeight();    if (width == height) {      resizedBitmap=bitmap;    } else     if (width > height) {      resizedBitmap=Bitmap.createBitmap(bitmap,(width - height) / 2,0,height,height);    } else {      resizedBitmap=Bitmap.createBitmap(bitmap,0,(height - width) / 2,width,width);    }  }  return resizedBitmap;}  }
class C{  public boolean doInvoke(){  return true;}  }
class C{  public DateTimeFormatterBuilder appendYear(int minDigits,int maxDigits){  return appendSignedDecimal(DateTimeFieldType.year(),minDigits,maxDigits);}  }
class C{  void replaceGetCharSequence(StmtBody stmtBody,Stmt stmt){  if (stmt.getInvokeExpr() instanceof InstanceInvokeExpr) {    InstanceInvokeExpr iInvokeExpr=(InstanceInvokeExpr)stmt.getInvokeExpr();    Chain<Unit> units=stmtBody.getUnits();    List<ValueBox> defBoxList=stmt.getDefBoxes();    ValueBox callerObjectBox=iInvokeExpr.getBaseBox();    ValueBox idValueBox=iInvokeExpr.getArgBox(0);    ValueBox assignToBox=null;    if (defBoxList != null && defBoxList.size() > 0)     assignToBox=defBoxList.get(0);    logger.debug("DefBoxes: {} ",stmt.getDefBoxes());    if (callerObjectBox == null || idValueBox == null) {      logger.warn("Couldnot get boxes for replacement ");      AnalysisReport.v().addEntry("Could not replace resource getString() because called with non-constant argument.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    Integer intId;    String stringId=idValueBox.getValue().toString();    try {      intId=new Integer(stringId);    } catch (    Exception ex) {      logger.info("Couldn't replace getString()  - {} NOT an integer constant",stringId);      AnalysisReport.v().addEntry("Could not replace resource getString() because could not find resource.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    SootMethod getStringMethod=ResourcesSoot.v().retrieveGetCharSequence_ID(intId);    if (getStringMethod == null) {      logger.warn("Could not replace {}, id={} ",stmt,String.format("%x",intId));      logger.warn("Class {} ",stmtBody.getMethod().getDeclaringClass());      AnalysisReport.v().addEntry("Could not replace resource getString() because could not find resource.",stmt,AnalysisReport.Level.ELEVATED);      return;    }    Expr invokeExpr=Jimple.v().newStaticInvokeExpr(getStringMethod.makeRef());    Stmt lookupStmt;    if (assignToBox != null)     lookupStmt=Jimple.v().newAssignStmt(assignToBox.getValue(),invokeExpr); else     lookupStmt=Jimple.v().newInvokeStmt(invokeExpr);    logger.info("replaced {} ",stmt);    try {      units.swapWith(stmt,lookupStmt);      logger.info("replacing with {}, OK ",lookupStmt);    } catch (    Exception ex) {      logger.warn("replacing with {} => NOT OK",lookupStmt);      AnalysisReport.v().addEntry("Could not replace resource getString() because of unknown error.",stmt,AnalysisReport.Level.ELEVATED);    }  } else {    logger.warn("InvokeExpr in {} is not an InstanceInvokeExpr",stmt);    AnalysisReport.v().addEntry("Could not replace resource getString() because of unknown error.",stmt,AnalysisReport.Level.ELEVATED);  }}  }
class C{  public SQLNonTransientConnectionException(){}  }
class C{  private void findClassesInDirectory(File classDir,String packagePrefix,String pathPrefix,Set<String> classNames,Set<String> subpackageNames) throws IOException {  File directory=new File(classDir,pathPrefix);  if (directory.exists()) {    for (    File f : directory.listFiles()) {      String name=f.getName();      if (name.endsWith(CLASS_EXTENSION) && isToplevelClass(name)) {        classNames.add(packagePrefix + getClassName(name));      } else       if (f.isDirectory()) {        subpackageNames.add(packagePrefix + name);      }    }  }}  }
class C{  public boolean writeBlockFile(String fileName){  File file=new File(fileName);  if (file.exists()) {    if (!file.delete()) {      System.err.println("Unable to delete file...(so I could re-write it)");      return false;    }  }  try {    BufferedWriter out=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF-8"));    for (int c=0; c < rawData.size(); c++) {      out.write(rawData.get(c).toString());      out.newLine();    }    out.flush();    out.close();  } catch (  IOException e) {    System.err.println("Unable to save block file " + fileName);    return false;  }  return true;}  }
class C{  public NotificationChain basicSetInitModules(InitModules newInitModules,NotificationChain msgs){  InitModules oldInitModules=initModules;  initModules=newInitModules;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4mfPackage.PROJECT_DESCRIPTION__INIT_MODULES,oldInitModules,newInitModules);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private static void findAnnotations(ClassFile cf,Field m,String name,List<TypeAnnotation> annos){  int index=m.attributes.getIndex(cf.constant_pool,name);  if (index != -1) {    Attribute attr=m.attributes.get(index);    assert attr instanceof RuntimeTypeAnnotations_attribute;    RuntimeTypeAnnotations_attribute tAttr=(RuntimeTypeAnnotations_attribute)attr;    annos.addAll(Arrays.asList(tAttr.annotations));  }}  }
class C{  public void registerTableNodes(SnmpMib mib,MBeanServer server){  tableJvmThreadInstanceTable=createJvmThreadInstanceTableMetaNode("JvmThreadInstanceTable","JvmThreading",mib,server);  if (tableJvmThreadInstanceTable != null) {    tableJvmThreadInstanceTable.registerEntryNode(mib,server);    mib.registerTableMeta("JvmThreadInstanceTable",tableJvmThreadInstanceTable);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:19.802 -0500",hash_original_method="EEAFA1105ED04DD7E614744D210BB1BA",hash_generated_method="B81DD5AB449E12F988064BBF1FA0C514") @Override public CharSequence convertToString(Cursor cursor){  if (cursor == null) {    return null;  }  String query=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_QUERY);  if (query != null) {    return query;  }  if (mSearchable.shouldRewriteQueryFromData()) {    String data=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_INTENT_DATA);    if (data != null) {      return data;    }  }  if (mSearchable.shouldRewriteQueryFromText()) {    String text1=getColumnString(cursor,SearchManager.SUGGEST_COLUMN_TEXT_1);    if (text1 != null) {      return text1;    }  }  return null;}  }
class C{  public Anonymous_singleIsA_1_ createAnonymous_singleIsA_1_(){  Anonymous_singleIsA_1_Impl anonymous_singleIsA_1_=new Anonymous_singleIsA_1_Impl();  return anonymous_singleIsA_1_;}  }
class C{  public ObjectNotFoundException(String message){  super(message);}  }
class C{  public File mapUriToFile(Uri uri){  assertBackgroundThread();switch (getUriType(uri)) {case URI_TYPE_FILE:    return new File(uri.getPath());case URI_TYPE_CONTENT:{    Cursor cursor=contentResolver.query(uri,LOCAL_FILE_PROJECTION,null,null,null);    if (cursor != null) {      try {        int columnIndex=cursor.getColumnIndex(LOCAL_FILE_PROJECTION[0]);        if (columnIndex != -1 && cursor.getCount() > 0) {          cursor.moveToFirst();          String realPath=cursor.getString(columnIndex);          if (realPath != null) {            return new File(realPath);          }        }      }  finally {        cursor.close();      }    }  }}return null;}  }
class C{  public IntVector(int blocksize,int increaseSize){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_map=new int[blocksize];}  }
class C{  private void rescaleCanvas(int width,int height,float strokeWidth,Canvas canvas){  final RectF viewBox=mSvg.getDocumentViewBox();  final float scale=Math.min(width / (viewBox.width() + strokeWidth),height / (viewBox.height() + strokeWidth));  canvas.translate((width - viewBox.width() * scale) / 2.0f,(height - viewBox.height() * scale) / 2.0f);  canvas.scale(scale,scale);  mSvg.renderToCanvas(canvas);}  }
class C{  public void endVisit(VariableDeclarationExpression node){}  }
class C{  public void endDraggingFrame(JComponent f){  Rectangle r=ghostPanel.getBounds();  f.setVisible(true);  f.setBounds(r);  targetPane.remove(ghostPanel);}  }
class C{  public void init(@NotNull final MemberInfoModel<PyElement,PyMemberInfo<PyElement>> memberInfoModel,@NotNull final Collection<PyMemberInfo<PyElement>> members){  Preconditions.checkState(!myInitialized,"Already myInitialized");  myTable.setMemberInfos(members);  myTable.setMemberInfoModel(memberInfoModel);  myTable.addMemberInfoChangeListener(memberInfoModel);  myInitialized=true;}  }
class C{  public void doInference(List data){  if (lambda == null) {    lambda=new double[feaGen.numFeatures()];    for (int i=0; i < feaGen.features.size(); i++) {      Feature f=(Feature)feaGen.features.get(i);      lambda[f.idx]=f.wgt;    }  }  inference.doInference(data);}  }
class C{  public static void normalize(double[] doubles,double sum){  if (Double.isNaN(sum)) {    throw new IllegalArgumentException("Can't normalize array. Sum is NaN.");  }  if (sum == 0) {    throw new IllegalArgumentException("Can't normalize array. Sum is zero.");  }  for (int i=0; i < doubles.length; i++) {    doubles[i]/=sum;  }}  }
class C{  private void addPorts(StorageSystem system) throws IOException {  StorageProtocol.Transport supportedProtocol=getProtocol(system);  _logger.info("Checking if system {} needs a new storage port",system.getLabel());  if (supportedProtocol == null) {    return;  }  _logger.info("System {} supports protocol {}",system.getLabel(),supportedProtocol.name().toString());  boolean isPresent=false;  List<StoragePort> allPorts=new ArrayList<StoragePort>();  URIQueryResultList storagePortURIs=new URIQueryResultList();  URI sysid=system.getId();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePortConstraint(sysid),storagePortURIs);  Iterator<URI> storagePortsIter=storagePortURIs.iterator();  while (storagePortsIter.hasNext()) {    URI storagePortURI=storagePortsIter.next();    StoragePort storagePort=_dbClient.queryObject(StoragePort.class,storagePortURI);    if (storagePort != null && !storagePort.getInactive() && (storagePort.getTransportType().equalsIgnoreCase(supportedProtocol.name().toString()))) {      _logger.info("System {} already has port for protocol {}",system.getLabel(),supportedProtocol.name().toString());      isPresent=true;      if (storagePort.getPortNetworkId() == null) {        storagePort.setPortNetworkId(storagePort.getNativeGuid());        _dbClient.persistObject(storagePort);      }      allPorts.add(storagePort);    }  }  if (!isPresent) {    StorageHADomain adapter=CinderUtils.getStorageAdapter(system,_dbClient);    _logger.info("Adding new storage port of type {} to storage system {}",supportedProtocol.name().toString(),system.getLabel());    StoragePort port=new StoragePort();    port.setId(URIUtil.createId(StoragePort.class));    port.setStorageDevice(sysid);    String portName=CinderConstants.DEFAULT;    String nativeGuid=NativeGUIDGenerator.generateNativeGuid(system,portName,NativeGUIDGenerator.PORT);    port.setNativeGuid(nativeGuid);    port.setPortNetworkId(nativeGuid);    port.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.toString());    port.setPortType(PortType.frontend.name());    port.setOperationalStatus(OperationalStatus.OK.toString());    port.setTransportType(supportedProtocol.name().toString());    port.setLabel(portName);    port.setPortName(portName);    port.setStorageHADomain(adapter.getId());    port.setPortGroup(CinderConstants.CINDER_PORT_GROUP);    port.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.name());    port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());    _dbClient.createObject(port);    allPorts.add(port);  }  StoragePortAssociationHelper.updatePortAssociations(allPorts,_dbClient);  DiscoveryUtils.checkStoragePortsNotVisible(allPorts,_dbClient,sysid);}  }
class C{  public void addResponseListener(ActionListener<NetworkEvent> a){  if (actionListeners == null) {    actionListeners=new EventDispatcher();    actionListeners.setBlocking(false);  }  actionListeners.addListener(a);}  }
class C{  public static <T>Future<T> constantFuture(final T value){  return new ConstantFuture<T>(value);}  }
class C{  private static synchronized final void closeCache(){  if (cache != null) {    try {      if (!cache.isClosed()) {        CacheTransactionManager txMgr=cache.getCacheTransactionManager();        if (txMgr != null) {          if (txMgr.exists()) {            txMgr.rollback();          }        }        cache.close();      }    }  finally {      cache=null;    }  }}  }
class C{  public void callFunction() throws IOException {  writeCode(CALL_FUNCTION);}  }
class C{  private static boolean nodeNameEqualTo(Node node,String target){  if (node == null || target == null)   return false;  String name=node.getNodeName();  if (target.indexOf(':') < 0) {    int index=name.indexOf(':');    if (index >= 0)     name=name.substring(index + 1);  }  return name.equals(target);}  }
class C{  public static GetNetworksParams create(){  return new GetNetworksParams();}  }
class C{  public boolean equalValue(Attribute first,Attribute second){  if (first.isNominal() && second.isNominal()) {    return getValueAsString(first).equals(getValueAsString(second));  } else   if ((!first.isNominal()) && (!second.isNominal())) {    return com.rapidminer.tools.Tools.isEqual(getValue(first),getValue(second));  } else {    return false;  }}  }
class C{  public HexNumberFormat(){  this(DWORD);}  }
class C{  public static String shortFormatDayTime(Date dt){  ensureInited();  return dateFormatter.shortFormatDayTime(dt);}  }
class C{  public boolean isUnAvailable(Timestamp dateTime){  Timestamp date=TimeUtil.trunc(dateTime,TimeUtil.TRUNC_DAY);  Timestamp dateFrom=getDateFrom();  Timestamp dateTo=getDateTo();  if (dateFrom != null && date.before(dateFrom))   return false;  if (dateTo != null && date.after(dateTo))   return false;  return true;}  }
class C{  public V2 addAction(Action action){  N.addAction(action);  return this;}  }
class C{  public static FragmentEventType createNativeFragmentType(Class propertyType,Class genericType,EventAdapterService eventAdapterService){  boolean isIndexed=false;  if (propertyType.isArray()) {    isIndexed=true;    propertyType=propertyType.getComponentType();  } else   if (JavaClassHelper.isImplementsInterface(propertyType,Iterable.class)) {    isIndexed=true;    if (genericType == null) {      return null;    }    propertyType=genericType;  }  if (!JavaClassHelper.isFragmentableType(propertyType)) {    return null;  }  EventType type=eventAdapterService.getBeanEventTypeFactory().createBeanType(propertyType.getName(),propertyType,false,false,false);  return new FragmentEventType(type,isIndexed,true);}  }
class C{  public boolean restoreMsWordListFormatForUser(String userId,InputStreamReader streamReader,boolean isAdmin,Errors errors){  boolean result=reallyRestoreMsWordListFormatForUser(userId,streamReader,isAdmin,errors);  if (!result) {    rollback();  } else {    commit();  }  return result;}  }
class C{  public final void init(KeyStore ks) throws KeyStoreException {  spiImpl.engineInit(ks);}  }
class C{  private void updatePrevious(){  this.prevReplyTimeouts=this.dmStats.getReplyTimeouts();}  }
class C{  @Override public void acceptTestSet(TestSetEvent e){  DataSetEvent de=new DataSetEvent(e.getSource(),e.getTestSet());  acceptDataSet(de);}  }
class C{  public void add(int index,int[] intArray){  if (index > size) {    throwException2(index);  }  int addCount=intArray.length;  ensureCapacity(size + addCount);  int moveCount=size - index;  if (moveCount > 0)   System.arraycopy(data,index,data,index + addCount,moveCount);  System.arraycopy(data,index,intArray,0,moveCount);  size+=addCount;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case CITY:    return is_set_city();case STATE:  return is_set_state();case COUNTRY:return is_set_country();}throw new IllegalStateException();}  }
class C{  public boolean fieldHasAnnotation(Field field,Annotation annotation){  return annotationAccessor.fieldHas(field.getName(),annotation);}  }
class C{  public Interval gap(ReadableInterval interval){  interval=DateTimeUtils.getReadableInterval(interval);  long otherStart=interval.getStartMillis();  long otherEnd=interval.getEndMillis();  long thisStart=getStartMillis();  long thisEnd=getEndMillis();  if (thisStart > otherEnd) {    return new Interval(otherEnd,thisStart,getChronology());  } else   if (otherStart > thisEnd) {    return new Interval(thisEnd,otherStart,getChronology());  } else {    return null;  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (fv != null) {    return fv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public Map<String,SettingsItem> parse(URI xmlFileUri) throws ParserConfigurationException, SAXException, IOException, URISyntaxException {  SAXParser saxParser=SAXParserFactory.newInstance().newSAXParser();  saxParser.parse(xmlFileUri.toString(),this);  return settingsItems;}  }
class C{  public boolean contains(String msg){  final double MIN_PRIORITY=-1.0f;  String msgPriorityKey=MESSAGE_PRIORITY_KEY + msg;  return !(store.getDouble(msgPriorityKey,NOT_FOUND) < MIN_PRIORITY);}  }
class C{  public AuthEnvelopedData(ASN1Sequence seq){  int index=0;  ASN1Primitive tmp=seq.getObjectAt(index++).toASN1Primitive();  version=(ASN1Integer)tmp;  tmp=seq.getObjectAt(index++).toASN1Primitive();  if (tmp instanceof ASN1TaggedObject) {    originatorInfo=OriginatorInfo.getInstance((ASN1TaggedObject)tmp,false);    tmp=seq.getObjectAt(index++).toASN1Primitive();  }  recipientInfos=ASN1Set.getInstance(tmp);  tmp=seq.getObjectAt(index++).toASN1Primitive();  authEncryptedContentInfo=EncryptedContentInfo.getInstance(tmp);  tmp=seq.getObjectAt(index++).toASN1Primitive();  if (tmp instanceof ASN1TaggedObject) {    authAttrs=ASN1Set.getInstance((ASN1TaggedObject)tmp,false);    tmp=seq.getObjectAt(index++).toASN1Primitive();  } else {  }  mac=ASN1OctetString.getInstance(tmp);  if (seq.size() > index) {    tmp=seq.getObjectAt(index++).toASN1Primitive();    unauthAttrs=ASN1Set.getInstance((ASN1TaggedObject)tmp,false);  }}  }
class C{  public Model addRepository(Repository repository){  requireNonNull(repository,"Required not null repository");  repositories().add(repository);  if (root.hasSingleChild("repositories")) {    root.getSingleChild("repositories").appendChild(repository.asXMLElement());    repository.element=root.getLastChild();  } else {    root.insertChild(createElement("repositories",repository.asXMLElement()),beforeAnyOf("pluginRepositories","build","reporting","profiles").or(inTheEnd()));    repository.element=root.getSingleChild("repositories").getFirstChild();  }  return this;}  }
class C{  public boolean isMetaphoneEqual(String str1,String str2){  return metaphone(str1).equals(metaphone(str2));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:31.234 -0500",hash_original_method="913BD9E94B09B64A9AACEEEF134BFD21",hash_generated_method="A44846338F03AE47B701D76C9E226829") BluetoothHealth(Context mContext,ServiceListener l){  IBinder b=ServiceManager.getService(BluetoothAdapter.BLUETOOTH_SERVICE);  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  if (b != null) {    mService=IBluetooth.Stub.asInterface(b);    if (mServiceListener != null) {      mServiceListener.onServiceConnected(BluetoothProfile.HEALTH,this);    }  } else {    Log.w(TAG,"Bluetooth Service not available!");    mService=null;  }}  }
class C{  public synchronized void error(String s,Parameter p1,Parameter p2){  println(a("ERROR:\n" + s),ALL_MESSAGE_LOGS,true);  if (p1 != null)   println(a("PARAMETER: " + p1),ALL_MESSAGE_LOGS,true);  if (p2 != null && p1 != null)   println(a("     ALSO: " + p2),ALL_MESSAGE_LOGS,true); else   println(a("PARAMETER: " + p2),ALL_MESSAGE_LOGS,true);  errors=true;}  }
class C{  static boolean checkState(final BigdataSailRepository repo,final long state,final URI id,final URI pred,final Literal label){  try {    final BigdataSailRepositoryConnection cxn;    try {      cxn=repo.getReadOnlyConnection(state);    } catch (    IllegalStateException e) {      return false;    }    try {      RepositoryResult<Statement> results=cxn.getStatements(id,pred,null,false);      if (!results.hasNext()) {        return false;      }      final String labelstr=label.toString();      final String value=results.next().getObject().toString();      if (!labelstr.equals(value)) {        return false;      }      return !results.hasNext();    }  finally {      cxn.close();    }  } catch (  Exception e) {    e.printStackTrace();    throw new AssertionError("Unable to load index");  }}  }
class C{  public DfaAttackAction(int entityId,int targetId,Coords targetPos){  super(entityId,targetId,targetPos);}  }
class C{  protected void addExchangeTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Route_exchangeType_feature"),getString("_UI_PropertyDescriptor_description","_UI_Route_exchangeType_feature","_UI_Route_type"),EipPackage.Literals.ROUTE__EXCHANGE_TYPE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static final String unescapeHTML(String s){  char[] chars=s.toCharArray();  char[] escaped=new char[chars.length];  int pos=0;  for (int i=0; i < chars.length; ) {    if (chars[i] != '&') {      escaped[pos++]=chars[i++];      continue;    }    int j=i + 1;    if (j < chars.length && chars[j] == '#')     j++;    for (; j < chars.length; j++) {      if (!Character.isLetterOrDigit(chars[j]))       break;    }    boolean replaced=false;    if (j < chars.length && chars[j] == ';') {      if (s.charAt(i + 1) == '#') {        try {          long charcode=0;          char ch=s.charAt(i + 2);          if (ch == 'x' || ch == 'X') {            charcode=Long.parseLong(new String(chars,i + 3,j - i - 3),16);          } else           if (Character.isDigit(ch)) {            charcode=Long.parseLong(new String(chars,i + 2,j - i - 2));          }          if (charcode > 0 && charcode < 65536) {            escaped[pos++]=(char)charcode;            replaced=true;          }        } catch (        NumberFormatException ex) {        }      } else {        String key=new String(chars,i,j - i + 1);        Character repl=escapeStrings.get(key);        if (repl != null) {          escaped[pos++]=repl.charValue();          replaced=true;        }      }      j++;    }    if (!replaced) {      System.arraycopy(chars,i,escaped,pos,j - i);      pos+=j - i;    }    i=j;  }  return new String(escaped,0,pos);}  }
class C{  public void end(String namespace,String name) throws Exception {  ConverterBean top=null;  try {    top=(ConverterBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  FacesConfigBean fcb=(FacesConfigBean)digester.peek();  ConverterBean old=null;  if (top.getConverterId() != null) {    old=fcb.getConverterById(top.getConverterId());  } else {    old=fcb.getConverterByClass(top.getConverterForClass().getName());  }  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ConverterRule]{" + digester.getMatch() + "} New("+ top.getConverterId()+ ","+ top.getConverterForClass()+ ")");    }    fcb.addConverter(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ConverterRule]{" + digester.getMatch() + "} Merge("+ top.getConverterId()+ ","+ top.getConverterForClass()+ ")");    }    mergeConverter(top,old);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void requestToFireIntentAndFinish(){  Log.e("FirstRunSignInProcessor","Attempt to pass-through without completed FRE");  if (mObserver != null)   mObserver.onSigninCancelled();  FirstRunStatus.setFirstRunFlowComplete(mActivity,false);  setFirstRunFlowSignInComplete(mActivity,false);  setFirstRunFlowSignInAccountName(mActivity,null);  setFirstRunFlowSignInSetupSync(mActivity,false);  mActivity.startActivity(FirstRunFlowSequencer.createGenericFirstRunIntent(mActivity,true));}  }
class C{  private ResultSet ConsistencyCheckPostgreSQL(Database conn) throws ConsistencyException {  String schemaName=table.getSchema();  String tableName=table.getName();  String allColumns=columnsWithSeparator(conn,table.getAllColumns()," || ',' || ");  String keyColumns=null;  if (table.getPrimaryKey() != null) {    keyColumns=columnsMySQL(conn,table.getPrimaryKey().getColumns());  }  StringBuffer sb=new StringBuffer();  sb.append("SELECT ");  sb.append("COUNT(*) AS this_cnt,");  sb.append(" COALESCE(");  sb.append("tungsten.right(MAX(tungsten.set_crc(tungsten.concat(LPAD(tungsten.inc_cnt()::text, 16, '0'), MD5(tungsten.concat(tungsten.get_crc(), MD5(");  sb.append(allColumns);  sb.append(")))))), 32)");  sb.append(", (SELECT colcrc FROM tungsten_consistency_check_vars))");  sb.append(" AS this_crc FROM (SELECT * FROM ");  sb.append(schemaName);  sb.append('.');  sb.append(tableName);  sb.append(" ORDER BY ");  if (keyColumns != null) {    sb.append(keyColumns);  } else {    sb.append(allColumns);  }  if (rowFrom >= 0) {    sb.append(" LIMIT ");    sb.append(rowFrom);    sb.append(',');    sb.append(rowLimit);  }  sb.append(") AS tungsten_consistency_check_tmp");  try {    Statement st=conn.createStatement();    st.execute("CREATE OR REPLACE FUNCTION tungsten.right(text, integer)\n" + "RETURNS text AS $$\n" + "  SELECT substring($1 FROM pg_catalog.length($1) + 1 - $2);\n"+ "$$ IMMUTABLE STRICT LANGUAGE SQL;");    st.execute("CREATE OR REPLACE FUNCTION tungsten.concat(text, text)\n" + "RETURNS text AS $$\n" + "SELECT $1 || $2;\n"+ "$$ IMMUTABLE STRICT LANGUAGE sql;");    if (checkColumnNames || checkColumnTypes) {      logger.warn("Column name and type checking is not implemented for PostgreSQL!");    }    st.execute("DROP TABLE IF EXISTS tungsten_consistency_check_vars;");    st.execute("CREATE TEMP TABLE tungsten_consistency_check_vars AS SELECT 0::bigint AS cnt, ''::text AS colcrc, ''::text AS crc;");    st.execute("CREATE OR REPLACE FUNCTION tungsten.get_crc()\n" + "RETURNS char(32) AS $$\n" + "  SELECT crc FROM tungsten_consistency_check_vars;\n"+ "$$ LANGUAGE sql;");    st.execute("CREATE OR REPLACE FUNCTION tungsten.set_crc(value text)\n" + "RETURNS char(32) AS $$\n" + "  UPDATE tungsten_consistency_check_vars SET crc = $1;\n"+ "  SELECT $1;\n"+ "$$ LANGUAGE sql;");    st.execute("CREATE OR REPLACE FUNCTION tungsten.inc_cnt()\n" + "RETURNS bigint AS $$\n" + "  UPDATE tungsten_consistency_check_vars SET cnt = cnt + 1;\n"+ "  SELECT cnt FROM tungsten_consistency_check_vars;\n"+ "$$ LANGUAGE sql;");    ResultSet rs=st.executeQuery(sb.toString());    if (logger.isDebugEnabled()) {      logger.debug(sb.toString());      logger.debug(rs.toString());      logger.debug("Warnings: " + st.getWarnings());    }    return rs;  } catch (  SQLException e) {    String msg="Consistency check failed: " + e.getMessage();    throw new ConsistencyException(msg,e);  }}  }
class C{  public int findPerimeter(int[][] mat,int x,int y){  if (mat == null || mat.length == 0 || mat[0].length == 0)   return 0;  Queue<Integer> q=new LinkedList<Integer>();  int m=mat.length;  int n=mat[0].length;  boolean[][] visited=new boolean[m][n];  int[][] dir={{-1,0},{0,1},{1,0},{0,-1}};  q.add(x * n + y);  visited[x][y]=true;  int perimeter=0;  while (!q.isEmpty()) {    int size=q.size();    for (int i=0; i < size; i++) {      int pos=q.poll();      int curX=pos / n;      int curY=pos % n;      int count=0;      for (      int[] d : dir) {        int nX=curX + d[0];        int nY=curY + d[1];        if (nX >= 0 && nX < m && nY >= 0 && nY < n) {          if (mat[nX][nY] == mat[x][y]) {            if (!visited[nX][nY]) {              q.add(nX * n + nY);              visited[nX][nY]=true;            }          } else           count++;        } else         count++;      }      perimeter+=count;    }  }  return perimeter;}  }
class C{  public static void main(String[] args) throws Exception {  new DetailedEvaluator().start(args);}  }
class C{  public void destroy(){  if (executor != null) {    executor.shutdown();    _log.debug("Shutting down request stat tracker threads");  }}  }
class C{  private static Color fixtureToColor(Fixture fixture){  if (fixture.isSensor()) {    return Color.PINK;  } else {    Body body=fixture.getBody();    if (!body.isActive()) {      return Color.BLACK;    } else {      if (!body.isAwake()) {        return Color.RED;      } else {switch (body.getType()) {case StaticBody:          return Color.CYAN;case KinematicBody:        return Color.WHITE;case DynamicBody:default :      return Color.GREEN;  }}}}}  }
class C{  public static NearCacheConfiguration readNearConfiguration(BinaryRawReader in){  NearCacheConfiguration cfg=new NearCacheConfiguration();  cfg.setNearStartSize(in.readInt());  cfg.setNearEvictionPolicy(readEvictionPolicy(in));  return cfg;}  }
class C{  @SuppressWarnings("unchecked") private void convertTriggersToFunctions(){  resetDBObjects(DBObject_Trigger.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"converTriggersToFunctions",new Object[]{m_objectTypes,m_direction});  m_counterUpd=new Integer(0);  m_totalUpd=new Integer(0);  if (s_dbEngine.isTriggerContainsInlineCode(m_source.getVendor())) {    if (!s_dbEngine.isTriggerContainsInlineCode(m_target.getVendor())) {      if (m_sourceMap != null && m_sourceMap.size() > 0) {        for (Iterator<String> it=m_sourceMap.keySet().iterator(); it.hasNext(); ) {          String key=it.next();          DBObject triggerObject=m_sourceMap.get(key);          DBObject_Trigger_Table triggerHeader=(DBObject_Trigger_Table)triggerObject.getHeaders().get(0);          String funcName=new StringBuffer(triggerHeader.getName().toLowerCase()).append("_trigger").toString();          String actionType=triggerHeader.getActionType();          if (!actionType.equalsIgnoreCase("CALL")) {            Class objectClass=DBObject_Function.class;            DBObject function=new DBObject(m_source,objectClass,funcName);            String funcType="PROCEDURE";            String funcLang=actionType;            String retType="trigger";            int seqNum=0;            String argDir=null;            String argName=null;            String argType=null;            DBObject_Function_Argument funcArgument=new DBObject_Function_Argument(m_source,argName,seqNum);            funcArgument.initializeDefinition(funcName,funcLang,funcType,retType,argDir,argType);            HashMap<Integer,DBObjectDefinition> headerMap=new HashMap<Integer,DBObjectDefinition>();            headerMap.put(new Integer(seqNum),funcArgument);            function.setHeaders(headerMap);            HashMap<Integer,DBObjectDefinition> contentMap=new HashMap<Integer,DBObjectDefinition>();            Vector<Integer> v=new Vector<Integer>(triggerObject.getContents().keySet());            java.util.Collections.sort(v);            for (Iterator<Integer> it2=v.iterator(); it2.hasNext(); ) {              int key2=it2.next();              DBObject_Trigger_Definition triggerContent=(DBObject_Trigger_Definition)triggerObject.getContents().get(key2);              DBObject_Function_Body funcBody=new DBObject_Function_Body(m_source,null,key2);              funcBody.initializeDefinition(triggerContent.getBody());              contentMap.put(new Integer(seqNum),funcBody);            }            function.setContents(contentMap);            if (function.create(m_target))             m_counterUpd=new Integer(m_counterUpd.intValue() + 1);            if (triggerObject.getCustomizationLevel() > s_parameters.CUSTOMNONE)             s_logger.log(Level.WARNING,"mustRewriteTrigger",new Object[]{m_objectType,function.getObjectType(),function.getName()});            m_totalUpd=new Integer(m_totalUpd.intValue() + 1);          }        }      }    }  }  logResults();}  }
class C{  private static void convert(InputStream in,PrintWriter out) throws Exception {  SAXParserFactory factory=SAXParserFactory.newInstance();  factory.setValidating(true);  SAXParser parser=factory.newSAXParser();  DefaultHandler handler=new GenerateMBeanHTML(out);  parser.parse(in,handler);}  }
class C{  @Override public void run(){  amIActive=true;  String redHeader, greenHeader, blueHeader, intensityHeader, saturationHeader, hueHeader;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  intensityHeader=args[0];  hueHeader=args[1];  saturationHeader=args[2];  redHeader=args[3];  greenHeader=args[4];  blueHeader=args[5];  if (redHeader.isEmpty() || greenHeader.isEmpty() || blueHeader == null || intensityHeader.isEmpty() || hueHeader.isEmpty() || saturationHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redMin, greenMin, blueMin;    double r, g, b;    double i, s, h;    float progress;    WhiteboxRasterInfo intensity=new WhiteboxRasterInfo(intensityHeader);    int rows=intensity.getNumberRows();    int cols=intensity.getNumberColumns();    WhiteboxRasterInfo hue=new WhiteboxRasterInfo(hueHeader);    if (hue.getNumberRows() != rows || hue.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo saturation=new WhiteboxRasterInfo(saturationHeader);    if (saturation.getNumberRows() != rows || saturation.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    double iNoData=intensity.getNoDataValue();    double hNoData=hue.getNoDataValue();    double sNoData=saturation.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(redHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    WhiteboxRaster green=new WhiteboxRaster(greenHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    WhiteboxRaster blue=new WhiteboxRaster(blueHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    double[] dataI, dataH, dataS;    for (row=0; row < rows; row++) {      dataI=intensity.getRowValues(row);      dataH=hue.getRowValues(row);      dataS=saturation.getRowValues(row);      for (col=0; col < cols; col++) {        i=dataI[col];        h=dataH[col];        s=dataS[col];        if ((i != iNoData) && (h != hNoData) && (s != sNoData)) {          if (h <= 1) {            r=i * (1 + 2 * s - 3 * s * h) / 3;            g=i * (1 - s + 3 * s * h) / 3;            b=i * (1 - s) / 3;          } else           if (h <= 2) {            r=i * (1 - s) / 3;            g=i * (1 + 2 * s - 3 * s * (h - 1)) / 3;            b=i * (1 - s + 3 * s * (h - 1)) / 3;          } else {            r=i * (1 - s + 3 * s * (h - 2)) / 3;            g=i * (1 - s) / 3;            b=i * (1 + 2 * s - 3 * s * (h - 2)) / 3;          }          red.setValue(row,col,r * 255);          green.setValue(row,col,g * 255);          blue.setValue(row,col,b * 255);        } else {          red.setValue(row,col,iNoData);          green.setValue(row,col,iNoData);          blue.setValue(row,col,iNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    intensity.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    intensity.addMetadataEntry("Created on " + new Date());    intensity.close();    hue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    hue.addMetadataEntry("Created on " + new Date());    hue.close();    saturation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    saturation.addMetadataEntry("Created on " + new Date());    saturation.close();    red.close();    green.close();    blue.close();    returnData(redHeader);    returnData(greenHeader);    returnData(blueHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @SuppressWarnings("unchecked") protected T send(final byte[] fileContents){  mBaseRequest.setHttpMethod(HttpMethod.PUT);  return (T)mBaseRequest.getClient().getHttpProvider().send(this,mBaseRequest.getResponseType(),fileContents);}  }
class C{  private Paint createGraphicInnerShadowGradient(Shape s){  Rectangle2D b=s.getBounds2D();  float midX=(float)b.getCenterX();  float y1=(float)b.getMinY();  float y2=(float)b.getMaxY();  return createGradient(midX,y1,midX,y2,new float[]{0f,0.43f,0.57f,1f},new Color[]{graphicInnerShadow1,graphicInnerShadow2,graphicInnerShadow3,graphicInnerShadow4});}  }
class C{  void ensurePrestart(){  int wc=workerCountOf(ctl.get());  if (wc < corePoolSize)   addWorker(null,true); else   if (wc == 0)   addWorker(null,false);}  }
class C{  private void changetonextstage(NetworkCloudlet cl,TaskStage st){  cl.timespentInStage=0;  cl.timetostartStage=CloudSim.clock();  int currstage=cl.currStagenum;  if (currstage >= (cl.stages.size() - 1)) {    cl.currStagenum=NetworkConstants.FINISH;  } else {    cl.currStagenum=currstage + 1;    int i=0;    for (i=cl.currStagenum; i < cl.stages.size(); i++) {      if (cl.stages.get(i).type == NetworkConstants.WAIT_SEND) {        HostPacket pkt=new HostPacket(cl.getVmId(),cl.stages.get(i).peer,cl.stages.get(i).data,CloudSim.clock(),-1,cl.getCloudletId(),cl.stages.get(i).vpeer);        List<HostPacket> pktlist=pkttosend.get(cl.getVmId());        if (pktlist == null) {          pktlist=new ArrayList<HostPacket>();        }        pktlist.add(pkt);        pkttosend.put(cl.getVmId(),pktlist);      } else {        break;      }    }    NetDatacenterBroker.linkDC.schedule(NetDatacenterBroker.linkDC.getId(),0.0001,CloudSimTags.VM_DATACENTER_EVENT);    if (i == cl.stages.size()) {      cl.currStagenum=NetworkConstants.FINISH;    } else {      cl.currStagenum=i;      if (cl.stages.get(i).type == NetworkConstants.EXECUTION) {        NetDatacenterBroker.linkDC.schedule(NetDatacenterBroker.linkDC.getId(),cl.stages.get(i).time,CloudSimTags.VM_DATACENTER_EVENT);      }    }  }}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot){  return execCommand(commands,isRoot,true);}  }
class C{  void trackVerticalMotionScroll(int deltaY){  if (getChildCount() == 0) {    return;  }  boolean toTop=deltaY < 0;  int limitedDeltaY=getVerticalLimitedMotionScrollAmount(toTop,deltaY);  if (limitedDeltaY != deltaY) {    mFlingRunnable.endFling(false);    onFinishedMovement();  }  offsetChildrenTopAndBottom(limitedDeltaY);  detachVerticalOffScreenChildren(toTop);  if (toTop) {    fillToGalleryBottom();  } else {    fillToGalleryTop();  }  mRecycler.clear();  setVerticalSelectionToCenterChild();  final View selChild=mSelectedChild;  if (selChild != null) {    final int childTop=selChild.getTop();    final int childCenter=selChild.getHeight() / 2;    final int galleryCenter=getHeight() / 2;    mSelectedCenterOffset=childTop + childCenter - galleryCenter;  }  onScrollChanged(0,0,0,0);  invalidate();}  }
class C{  public String convertVariableStatementKeywordToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  @Inject public SnapshotDeletionPolicy(@Named("actual") IndexDeletionPolicy primary){  super(((IndexShardComponent)primary).shardId(),((IndexShardComponent)primary).indexSettings());  this.primary=primary;}  }
class C{  public void ascendTree(){  if (null != parentPath) {    parentPath.append(PARENT_PATH);    return;  }  File parentTree=calcParentTree();  if (null != parentTree) {    treeFile=parentTree;    return;  }  parentPath=new StringBuilder(provideLastName());  parentPath.append(PARENT_PATH);}  }
class C{  protected void cancelWrite(){  for (  final Port port : Port.VALUES) {    final Pipe sendingPipe=getCasing().getSendingPipe(getFace(),port);    sendingPipe.cancelWrite();  }}  }
class C{  private static void enqueueBlit(RenderQueue rq,SurfaceData src,SurfaceData dst,int packedParams,int sx1,int sy1,int sx2,int sy2,double dx1,double dy1,double dx2,double dy2){  RenderBuffer buf=rq.getBuffer();  rq.ensureCapacityAndAlignment(72,24);  buf.putInt(BLIT);  buf.putInt(packedParams);  buf.putInt(sx1).putInt(sy1);  buf.putInt(sx2).putInt(sy2);  buf.putDouble(dx1).putDouble(dy1);  buf.putDouble(dx2).putDouble(dy2);  buf.putLong(src.getNativeOps());  buf.putLong(dst.getNativeOps());}  }
class C{  @MediumTest public void testLifeCycleCreate(){  Forwarding activity=startActivity(mStartIntent,null,null);  getInstrumentation().callActivityOnStart(activity);  getInstrumentation().callActivityOnResume(activity);  getInstrumentation().callActivityOnPause(activity);  getInstrumentation().callActivityOnStop(activity);}  }
class C{  private int intersectionSize(int[] px,int[] py){  int i=0, j=0, c=0;  while (i < px.length && j < py.length) {    final int vx=px[i], vy=py[i];    if (vx < vy) {      ++i;    } else     if (vx > vy) {      ++j;    } else {      ++c;      ++i;      ++j;    }  }  return c;}  }
class C{  public synchronized int sendMessageWithClientWithSyncObject(Object newMessage,boolean sync){  try {    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    HashMap<String,Object> hsm=new HashMap<String,Object>();    hsm.put("client",currentClient);    hsm.put("message",newMessage);    syncMessageToCurrentScope("sendVarsToMessageWithClient",hsm,sync);  } catch (  Exception err) {    log.error("[sendMessageWithClient] ",err);    return -1;  }  return 1;}  }
class C{  public static Appendable leftShift(Appendable self,Object value) throws IOException {  InvokerHelper.append(self,value);  return self;}  }
class C{  public void message(LocoNetMessage m){  if (!mTurnoutNoRetry && immedPacket != null && m.getOpCode() == LnConstants.OPC_LONG_ACK && m.getElement(1) == 0x6D && m.getElement(2) == 0x00) {    tc.sendLocoNetMessage(immedPacket);    immedPacket=null;  }  if (m.getOpCode() == 0xED && m.getElement(1) == 0x0B && m.getElement(2) == 0x7F) {    immedPacket=m;  } else {    immedPacket=null;  }  int i=findSlotFromMessage(m);  if (i != -1) {    forwardMessageToSlot(m,i);    respondToAddrRequest(m,i);    programmerOpMessage(m,i);  }  if (m.getOpCode() == LnConstants.OPC_LONG_ACK) {    handleLongAck(m);  }  if (isExtFunctionMessage(m)) {    int addr=getDirectFunctionAddress(m);    boolean found=false;    for (int j=0; j < 120; j++) {      LocoNetSlot slot=slot(j);      if (slot == null) {        continue;      }      if ((slot.locoAddr() != addr) || (slot.slotStatus() == LnConstants.LOCO_FREE)) {        continue;      }      slot.functionMessage(getDirectDccPacket(m));      found=true;    }    if (!found) {      LocoNetMessage mo=new LocoNetMessage(4);      mo.setOpCode(LnConstants.OPC_LOCO_ADR);      mo.setElement(1,(addr / 128) & 0x7F);      mo.setElement(2,addr & 0x7F);      tc.sendLocoNetMessage(mo);    }  }}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  for (  ActionValidator validator : validators) {    String res=validator.validate(player,action,data);    if (res != null) {      return res;    }  }  return null;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  protected Node newNode(){  return new SVGOMFEFuncGElement();}  }
class C{  public synchronized Future<ReplDBMSHeader> watchForProcessedTimestamp(Timestamp timestamp,boolean cancel) throws InterruptedException {  SourceTimestampWatchPredicate predicate=new SourceTimestampWatchPredicate(timestamp);  return waitForProcessedEvent(predicate,cancel);}  }
class C{  public Quantity add(Quantity quantity){  assertDefined();  if (null == m_value) {    if (null == quantity.getIntegerValue()) {      return new Quantity();    } else {      return new Quantity(quantity.getIntegerValue());    }  }  Integer value=m_value + quantity.getIntegerValue();  return new Quantity(value);}  }
class C{  public boolean visit(SuperMethodInvocation node){  return true;}  }
class C{  public DockableBubble(final Window owner,final AlignedSide preferredAlignment,final String i18nKey,final String docKey,final Object... arguments){  this(owner,preferredAlignment,i18nKey,docKey,null,arguments);}  }
class C{  @Override public void respond(String response){  getBot().sendRaw().rawLine(response);}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public static byte[] appendByte(byte[] bytes,byte b){  byte[] result=Arrays.copyOf(bytes,bytes.length + 1);  result[result.length - 1]=b;  return result;}  }
class C{  public void testBogusArguments() throws Exception {  assumeTrue("JRE does not support Thai dictionary-based BreakIterator",ThaiTokenizer.DBBI_AVAILABLE);  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public long inactiveTimeMillis(){  return System.currentTimeMillis() - lastTimeMillis;}  }
class C{  @Override public boolean needsSolrIndexSearcher(){  for (  DocTransformer kid : children) {    if (kid.needsSolrIndexSearcher()) {      return true;    }  }  return false;}  }
class C{  public void testSerialization() throws IOException {  ObjectMapper m=new ObjectMapper();  DateTime dt=new DateTime(0L,DateTimeZone.UTC);  assertEquals("0",serializeAsString(m,dt));  m=new ObjectMapper();  m.configure(SerializationConfig.Feature.WRITE_DATES_AS_TIMESTAMPS,false);  assertEquals(quote("1970-01-01T00:00:00.000Z"),serializeAsString(m,dt));}  }
class C{  public static Validator<String> allowedChars(BiFunction<String,StringAllowedCharsValidator,? extends IllegalArgumentException> exception,String... chars){  return allowedChars(chars,exception);}  }
class C{  private void reservePort(int port){  if (mTemporaryConnection == null) {    try {      mTemporaryConnection=NetworkRessourceManager.createDatagramConnection();      mTemporaryConnection.open(port);    } catch (    IOException e) {      mTemporaryConnection=null;    }  }}  }
class C{  @Override public boolean onCreate(){  if (mAuthority == null || mMode == 0) {    throw new IllegalArgumentException("Provider not configured");  }  int mWorkingDbVersion=DATABASE_VERSION + mMode;  mOpenHelper=new DatabaseHelper(getContext(),mWorkingDbVersion);  return true;}  }
class C{  public static String repeatString(String str,int count){  if (count <= 0)   return "";  char[] chars=str.toCharArray();  char[] rtn=new char[chars.length * count];  int pos=0;  for (int i=0; i < count; i++) {    for (int y=0; y < chars.length; y++)     rtn[pos++]=chars[y];  }  return new String(rtn);}  }
class C{  public void saveMacros(MacroGroup group) throws XMPPException {  Macros request=new Macros();  request.setType(IQ.Type.SET);  request.setTo(workgroupJID);  request.setPersonal(true);  request.setPersonalMacroGroup(group);  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(request.getPacketID()));  connection.sendPacket(request);  IQ response=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (response == null) {    throw new XMPPException("No response from server on status set.");  }  if (response.getError() != null) {    throw new XMPPException(response.getError());  }}  }
class C{  @org.junit.Test public void verifyGetDateResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiveDateResponse","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,quote(ExampleBuilder.SAMPLE_DATE_PROPERTY_VALUE));}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:46.581 -0500",hash_original_method="AE14EC823AA36078EBCBA6012466D013",hash_generated_method="AE14EC823AA36078EBCBA6012466D013") boolean shouldDiskNameBeVisible(String diskName){  return diskName.startsWith(mFilePrefix);}  }
class C{  void createRaytracingTexture(){  this.raytraceTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA8,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public static void writeStream(InputStream in,File file) throws IOException {  FileOutputStream out=new FileOutputStream(file);  try {    transfer(in,out);  }  finally {    try {      out.flush();    }  finally {      out.close();    }  }}  }
class C{  public final void prependPhase(BasePhase<? super C> phase){  phases.add(0,phase);}  }
class C{  public LetterOrNumberValidator(@NonNull final CharSequence errorMessage,@NonNull final Case caseSensitivity,final boolean allowSpaces,@NonNull final char... allowedCharacters){  super(errorMessage);  setCaseSensitivity(caseSensitivity);  allowSpaces(allowSpaces);  setAllowedCharacters(allowedCharacters);}  }
class C{  public static Object flatten(Object input){  int[] dimens=getDimensions(input);  if (dimens.length <= 1) {    return input;  }  int size=1;  for (  int dimen : dimens) {    size*=dimen;  }  Object flat=ArrayFuncs.newInstance(getBaseClass(input),size);  MultiArrayCopier.copyInto(input,flat);  return flat;}  }
class C{  @Override public List<SingleKeyRecordIterator> buildRecordIterators(ScanContext scanContext){  final ScanResult dynamoDbResult=scanContext.getScanResult();  final int segment=scanContext.getScanRequest().getSegment();  final List<Map<String,AttributeValue>> items=dynamoDbResult.getItems();  if (items.isEmpty()) {    return Collections.emptyList();  }  List<SingleKeyRecordIterator> recordIterators=Lists.newLinkedList();  final Iterator<Map<String,AttributeValue>> itemIterator=items.iterator();  final Map<String,AttributeValue> firstItem=itemIterator.next();  final StaticBuffer firstKey=new KeyBuilder(firstItem).build(Constants.TITAN_HASH_KEY);  final ImmutableSet<StaticBuffer> boundaryKeys=aggregateBoundaryKeys();  if (!boundaryKeys.contains(firstKey)) {    recordIterators.add(buildRecordIteratorForHashKey(firstKey));  }  StaticBuffer hashKey=firstKey;  while (itemIterator.hasNext()) {    final Optional<StaticBuffer> nextKey=findNextHashKey(itemIterator,hashKey);    if (nextKey.isPresent()) {      hashKey=nextKey.get();      recordIterators.add(buildRecordIteratorForHashKey(hashKey));    }  }  if (!hashKey.equals(firstKey) && boundaryKeys.contains(hashKey)) {    recordIterators.remove(recordIterators.size() - 1);  }  if (scanContext.isFirstResult()) {    setInitialBoundaryKeys(segment,firstKey,hashKey);  } else {    updateLastKey(segment,hashKey);  }  return recordIterators;}  }
class C{  private ContextualSearchFieldTrial(){}  }
class C{  public StringBuffer format(long number,StringBuffer toAppendTo,FieldPosition pos){  return nf.format(number * 100,toAppendTo,pos).append("%");}  }
class C{  private SafeHtml buildSafeHtmlMessage(String message){  return new SafeHtmlBuilder().appendHtmlConstant("<pre " + PRE_STYLE + ">").append(SimpleHtmlSanitizer.sanitizeHtml(message)).appendHtmlConstant("</pre>").toSafeHtml();}  }
class C{  @Override public void paintComponent(Graphics g){  int i;  int n;  int len;  double scale;  double perc;  Color color;  super.paintComponent(g);  g.setColor(m_BackgroundColor);  g.fillRect(0,0,getWidth(),getHeight());  scale=getHeight() / 100.0;  for (i=0; i < m_History.size(); i++) {    perc=m_History.get(i);    color=m_DefaultColor;    for (n=m_Percentages.size() - 1; n >= 0; n--) {      if (perc >= m_Percentages.get(n)) {        color=m_Colors.get(m_Percentages.get(n));        break;      }    }    g.setColor(color);    len=(int)Math.round(perc * scale);    g.drawLine(i,getHeight() - 1,i,getHeight() - len);  }}  }
class C{  public Fast64CodeWordCoder(final BitVector[] codeWord,final long[] longCodeWord){  super(codeWord);  this.longCodeWord=longCodeWord;  length=new int[codeWord.length];  for (int i=length.length; i-- != 0; )   length[i]=codeWord[i].size();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  return IOUtils.calcMD5(f);}  }
class C{  public CtClass makeClass(InputStream classfile) throws IOException, RuntimeException {  return makeClass(classfile,true);}  }
class C{  private void startMonitoring(){synchronized (this) {    if (this.started) {      return;    }    final boolean statListenerStarted=startCacheStatListener();    if (!statListenerStarted) {      startMemoryPoolPoller();    }    startJVMThresholdListener();    this.started=true;  }}  }
class C{  public AMM(double lambda){  this(lambda,DEFAULT_CLASS_BUDGET);}  }
class C{  @Override public void onClick(AjaxRequestTarget aTarget){  if (bModel.getDocument() != null) {    JCas mergeJCas=null;    try {      aTarget.addChildren(getPage(),FeedbackPanel.class);      mergeJCas=repository.readCorrectionCas(bModel.getDocument());      int address=getAddr(selectSentenceAt(mergeJCas,bModel.getSentenceBeginOffset(),bModel.getSentenceEndOffset()));      int nextSentenceAddress=getNextPageFirstSentenceAddress(mergeJCas,address,bModel.getPreferences().getWindowSize());      if (address != nextSentenceAddress) {        updateSentenceNumber(mergeJCas,nextSentenceAddress);        SuggestionBuilder builder=new SuggestionBuilder(repository,annotationService,userRepository);        curationContainer=builder.buildCurationContainer(bModel);        setCurationSegmentBeginEnd();        curationContainer.setBratAnnotatorModel(bModel);        update(aTarget);        annotator.bratRenderLater(aTarget);      } else {        aTarget.appendJavaScript("alert('This is last page!')");      }    } catch (    UIMAException e) {      error(ExceptionUtils.getRootCause(e));    }catch (    ClassNotFoundException e) {      error(e.getMessage());    }catch (    IOException e) {      error(e.getMessage());    }catch (    BratAnnotationException e) {      error(e.getMessage());    }  } else {    aTarget.appendJavaScript("alert('Please open a document first!')");  }}  }
class C{  public Builder withFlushOnCommit(){  return withFlushOnCommit(true);}  }
class C{  protected void createFileChooser(){  m_FileChooser=new JFileChooser(new File(System.getProperty("user.dir")));  m_FileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);}  }
class C{  protected void ensureCapacity(int minCapacity){  if (minCapacity - buf.length > 0)   grow(minCapacity,true);}  }
class C{  public byte[] encrypt(byte[] data,byte[] key,int usage) throws KrbCryptoException {  return encrypt(data,key,key,usage);}  }
class C{  SpeedPredictor(){  times=new double[VECTOR_LENGTH];  WtWindowManager wm=WtWindowManager.getInstance();  prediction=MathHelper.parseDoubleDefault(wm.getProperty(SPEED_PROPERTY,Double.toString(INITIAL_PREDICTED_SPEED)),INITIAL_PREDICTED_SPEED);  jitter=MathHelper.parseDouble(wm.getProperty(JITTER_PROPERTY,"0.0"));  double average=TURN_LENGTH / prediction;  for (int i=0; i < VECTOR_LENGTH; i++) {    times[i]=average;  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  mHandler=new Handler();  mDungeonsPurchaseObserver=new DungeonsPurchaseObserver(mHandler);  mBillingService=new BillingService();  mBillingService.setContext(this);  mPurchaseDatabase=new PurchaseDatabase(this);  setupWidgets();  ResponseHandler.register(mDungeonsPurchaseObserver);  if (!mBillingService.checkBillingSupported()) {    showDialog(DIALOG_CANNOT_CONNECT_ID);  }  if (!mBillingService.checkBillingSupported(Consts.ITEM_TYPE_SUBSCRIPTION)) {    showDialog(DIALOG_SUBSCRIPTIONS_NOT_SUPPORTED_ID);  }}  }
class C{  private UpdateTranslationMemoryCommand(){}  }
class C{  public static LongRange resolveRange(IndexFile index,LongRange range){  return resolveRange(range,index.getNumberSequences());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.113 -0500",hash_original_method="03E8D8A5CD41A64BA401E8781419DF72",hash_generated_method="6CC128497949A8153554189397035F64") public void addTestProvider(String name,boolean requiresNetwork,boolean requiresSatellite,boolean requiresCell,boolean hasMonetaryCost,boolean supportsAltitude,boolean supportsSpeed,boolean supportsBearing,int powerRequirement,int accuracy){  try {    mService.addTestProvider(name,requiresNetwork,requiresSatellite,requiresCell,hasMonetaryCost,supportsAltitude,supportsSpeed,supportsBearing,powerRequirement,accuracy);  } catch (  RemoteException ex) {    Log.e(TAG,"addTestProvider: RemoteException",ex);  }}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final long[] array,final Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  public CThreadInformationTableSynchronizer(final CThreadInformationTable table,final CDebugPerspectiveModel debugPerspectiveModel){  Preconditions.checkNotNull(table,"IE00652: Model argument can not be null");  Preconditions.checkNotNull(debugPerspectiveModel,"IE00653: Debug perspective model argument can not be null");  m_model=table.getModel();  m_renderer=table.getDefaultRenderer();  m_debugPerspectiveModel=debugPerspectiveModel;  synchronizeDebugger(null,debugPerspectiveModel.getCurrentSelectedDebugger());  debugPerspectiveModel.addListener(m_listener);}  }
class C{  public void publicMethod(){}  }
class C{  public double unstandardized(double[][] samples){  final int N=totalLength(samples);  return unstandardized(samples,N);}  }
class C{  @Override @GraphTransaction public void deleteTrait(String guid,String traitNameToBeDeleted) throws TraitNotFoundException, EntityNotFoundException, RepositoryException {  LOG.debug("Deleting trait={} from entity={}",traitNameToBeDeleted,guid);  AtlasVertex instanceVertex=graphHelper.getVertexForGUID(guid);  List<String> traitNames=GraphHelper.getTraitNames(instanceVertex);  if (!traitNames.contains(traitNameToBeDeleted)) {    throw new TraitNotFoundException("Could not find trait=" + traitNameToBeDeleted + " in the repository for entity: "+ guid);  }  try {    final String entityTypeName=GraphHelper.getTypeName(instanceVertex);    String relationshipLabel=GraphHelper.getTraitLabel(entityTypeName,traitNameToBeDeleted);    AtlasEdge edge=graphHelper.getEdgeForLabel(instanceVertex,relationshipLabel);    if (edge != null) {      deleteHandler.deleteEdgeReference(edge,DataTypes.TypeCategory.TRAIT,false,true);      traitNames.remove(traitNameToBeDeleted);      updateTraits(instanceVertex,traitNames);    }  } catch (  Exception e) {    throw new RepositoryException(e);  }}  }
class C{  public TermPayloadDocumentPostingList(TermPayloadCoordinator<PAYLOAD> payloadConf){  super();  this.payloadConf=payloadConf;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.NAMED_IMPORT_SPECIFIER___IS_DEFAULT_IMPORT:    return isDefaultImport();}return super.eInvoke(operationID,arguments);}  }
class C{  public static XmlOrderedResult textContentDiffers(String name,String originalElementText,String newElementText){  return new XmlOrderedResult(false,String.format("The xml element <%s>%s</%s> should be placed before <%s>%s</%s>",name,newElementText,name,name,originalElementText,name));}  }
class C{  public boolean stringIsCompilableUnit(String str){  DimIProxy action=new DimIProxy(this,IPROXY_STRING_IS_COMPILABLE);  action.text=str;  action.withContext();  return action.booleanResult;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void onClick(View v){  for (  TextView b : mIcons) {    if (b == v) {      RecentTag tag=(RecentTag)b.getTag();      switchTo(tag);      break;    }  }  dismiss();}  }
class C{  public DialogueRecorder(DialogueSystem system){  this.settings=system.getSettings();}  }
class C{  @SuppressWarnings("unchecked") public static <T extends Comparable<? super T>>void sort(List<T> list){  Object[] array=list.toArray();  Arrays.sort(array);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set((T)array[i++]);  }}  }
class C{  private void pathStyleHelper(String style,String offset){  if (style == null) {    return;  }  if (style.equals("none")) {    strokePaint.setPathEffect(null);    return;  }  StringTokenizer st=new StringTokenizer(style," ,");  int count=st.countTokens();  float[] intervals=new float[(count & 1) == 1 ? count * 2 : count];  float max=0;  float current=1f;  int i=0;  while (st.hasMoreTokens()) {    intervals[i++]=current=toFloat(st.nextToken(),current);    max+=current;  }  for (int start=0; i < intervals.length; i++, start++) {    max+=intervals[i]=intervals[start];  }  float off=0f;  if (offset != null) {    try {      off=Float.parseFloat(offset) % max;    } catch (    NumberFormatException e) {    }  }  strokePaint.setPathEffect(new DashPathEffect(intervals,off));}  }
class C{  private void testNull() throws Exception {  deleteDb("csv");  String fileName=getBaseDir() + "/testNull.csv";  FileUtils.delete(fileName);  OutputStream out=FileUtils.newOutputStream(fileName,false);  String csvContent="\"A\",\"B\",\"C\",\"D\"\n\\N,\"\",\"\\N\",";  byte[] b=csvContent.getBytes("UTF-8");  out.write(b,0,b.length);  out.close();  Csv csv=new Csv();  csv.setNullString("\\N");  ResultSet rs=csv.read(fileName,null,"UTF8");  ResultSetMetaData meta=rs.getMetaData();  assertEquals(4,meta.getColumnCount());  assertEquals("A",meta.getColumnLabel(1));  assertEquals("B",meta.getColumnLabel(2));  assertEquals("C",meta.getColumnLabel(3));  assertEquals("D",meta.getColumnLabel(4));  assertTrue(rs.next());  assertEquals(null,rs.getString(1));  assertEquals("",rs.getString(2));  assertEquals("\\N",rs.getString(3));  assertEquals(null,rs.getString(4));  assertFalse(rs.next());  Connection conn=getConnection("csv");  Statement stat=conn.createStatement();  stat.execute("call csvwrite('" + fileName + "', 'select NULL as a, '''' as b, ''\\N'' as c, NULL as d', "+ "'UTF8', ',', '\"', NULL, '\\N', '\n')");  InputStreamReader reader=new InputStreamReader(FileUtils.newInputStream(fileName));  String data=IOUtils.readStringAndClose(reader,-1);  assertEquals(csvContent + "\\N",data.trim());  conn.close();  FileUtils.delete(fileName);}  }
class C{  public static String convertByte2HexString(byte b){  char u8=convertByte2Uint8(b);  return Integer.toHexString(u8);}  }
class C{  public void resumeActions(){  pauseMutex.release();}  }
class C{  public static boolean validate(final char[] pin){  return describe(pin).isValid();}  }
class C{  public void addReference(Block block){  String procedureName=getProcedureName(block);  if (mProcedureReferences.containsKey(procedureName)) {    mProcedureReferences.get(procedureName).add(block);  } else {    throw new IllegalStateException("Tried to add a reference to a procedure that has not been defined.");  }}  }
class C{  public Resource toResource(){  return toResource(null,null);}  }
class C{  public static Vec4 nearestPointOnSegment(Vec4 p0,Vec4 p1,Vec4 p){  Vec4 v=p1.subtract3(p0);  Vec4 w=p.subtract3(p0);  double c1=w.dot3(v);  double c2=v.dot3(v);  if (c1 <= 0)   return p0;  if (c2 <= c1)   return p1;  return p0.add3(v.multiply3(c1 / c2));}  }
class C{  public final void flushBatch() throws SQLException {  if (m_ps != null && m_batchCount > 0) {    m_ps.executeBatch();    m_batchCount=0;  }}  }
class C{  ORCLUSCluster(double[] o,DBIDRef id){  this.centroid=o;  this.basis=unitMatrix(o.length);  this.objectIDs.add(id);}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public FeatureConfiguration createFeatureConfiguration(){  FeatureConfigurationImpl featureConfiguration=new FeatureConfigurationImpl();  return featureConfiguration;}  }
class C{  public IntLiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private static double[] WFG_calculate_f(double[] x,double[] h){  assert Misc.vector_in_01(x);  assert Misc.vector_in_01(h);  assert x.length == h.length;  int M=h.length;  double[] S=new double[M];  for (int m=1; m <= M; m++) {    S[m - 1]=m * 2.0;  }  return FrameworkFunctions.calculate_f(1.0,x,h,S);}  }
class C{  private long computeFreshnessLifetime(){  if (maxAgeSeconds != -1) {    return TimeUnit.SECONDS.toMillis(maxAgeSeconds);  } else   if (expires != null) {    long servedMillis=servedDate != null ? servedDate.getTime() : receivedResponseMillis;    long delta=expires.getTime() - servedMillis;    return delta > 0 ? delta : 0;  } else   if (lastModified != null && uri.getRawQuery() == null) {    long servedMillis=servedDate != null ? servedDate.getTime() : sentRequestMillis;    long delta=servedMillis - lastModified.getTime();    return delta > 0 ? (delta / 10) : 0;  }  return 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.409 -0400",hash_original_method="E2DD18B436EC71C9A2470341512E64D6",hash_generated_method="D58DD999E921170D7193CA72702E3C8A") @Override public void close(){  manager.checkAccess();  target.close();  setLevel(Level.OFF);}  }
class C{  @Override public StartElement asStartElement(){  return (WbXmlStartElementEvent)this;}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public void changeTargetCPtoTheSameAsEvoSuite(){  File outDir=new File("target" + File.separator + "classes");  if (outDir.exists()) {    changeTargetClassPath(new String[]{outDir.getAbsolutePath()});    File testDir=new File("target" + File.separator + "test-classes");    if (testDir.exists()) {      addElementToTargetProjectClassPath(testDir.getAbsolutePath());    }  } else {    changeTargetClassPath(getEvoSuiteClassPath().split(File.pathSeparator));  }}  }
class C{  private QueryParameter calculateEffectiveGalleryContentQuery(){  return calculateEffectiveGalleryContentQuery(mGalleryContentQuery);}  }
class C{  private List<Runnable> drainQueue(){  BlockingQueue<Runnable> q=workQueue;  ArrayList<Runnable> taskList=new ArrayList<Runnable>();  q.drainTo(taskList);  if (!q.isEmpty()) {    for (    Runnable r : q.toArray(new Runnable[0])) {      if (q.remove(r))       taskList.add(r);    }  }  return taskList;}  }
class C{  public boolean match(final PsiElement el1,final PsiElement el2){  if (el1 == el2)   return true;  if (el1 == null) {    return true;  }  if (el2 == null) {    return allowsAbsenceOfMatch(el1);  }  PsiElement prevElement=myElement;  myElement=el2;  try {    PsiElementVisitor visitor=getVisitorForElement(el1);    if (visitor != null) {      el1.accept(visitor);    }  } catch (  ClassCastException ex) {    myResult=false;  } finally {    myElement=prevElement;  }  return myResult;}  }
class C{  private void processTag(final StringBuilder builder){  boolean started=false;  while (templateReader.hasNextCharacter()) {    final char tagCharacter=templateReader.nextCharacter();    if (!started && Strings.isWhitespace(tagCharacter)) {      continue;    }    started=true;    if (tagCharacter == syntax.getArgumentOpening()) {      processArgument();    } else     if (tagCharacter == syntax.getTagOpening() && isNextCharacterCommentOpening()) {      processComment();    } else     if (tagCharacter == syntax.getTagClosing()) {      processTagEntity(builder);      return;    } else {      builder.append(tagCharacter);    }  }  throwError("Unclosed tag: " + builder.toString());}  }
class C{  public MappedExampleSet(ExampleSet parent,int[] mapping,boolean useMappedExamples,boolean sort){  this.parent=(ExampleSet)parent.clone();  this.mapping=mapping;  if (sort) {    Arrays.sort(this.mapping);  }  if (!useMappedExamples) {    List<Integer> inverseIndexList=new ArrayList<Integer>();    int currentExample=-1;    for (    int m : mapping) {      if (m != currentExample) {        for (int z=currentExample + 1; z < m; z++) {          inverseIndexList.add(z);        }        currentExample=m;      }    }    this.mapping=new int[inverseIndexList.size()];    Iterator<Integer> i=inverseIndexList.iterator();    int index=0;    while (i.hasNext()) {      this.mapping[index++]=i.next();    }  }}  }
class C{  public Record _nextRecord() throws IOException {  Tokenizer.Token token;  String s;  if (included != null) {    Record rec=included.nextRecord();    if (rec != null)     return rec;    included=null;  }  if (generator != null) {    Record rec=nextGenerated();    if (rec != null)     return rec;    endGenerate();  }  while (true) {    Name name;    token=st.get(true,false);    if (token.type == Tokenizer.WHITESPACE) {      Tokenizer.Token next=st.get();      if (next.type == Tokenizer.EOL)       continue; else       if (next.type == Tokenizer.EOF)       return null; else       st.unget();      if (last == null)       throw st.exception("no owner");      name=last.getName();    } else     if (token.type == Tokenizer.EOL)     continue; else     if (token.type == Tokenizer.EOF)     return null; else     if (((String)token.value).charAt(0) == '$') {      s=token.value;      if (s.equalsIgnoreCase("$ORIGIN")) {        origin=st.getName(Name.root);        st.getEOL();        continue;      } else       if (s.equalsIgnoreCase("$TTL")) {        defaultTTL=st.getTTL();        st.getEOL();        continue;      } else       if (s.equalsIgnoreCase("$INCLUDE")) {        String filename=st.getString();        File newfile;        if (file != null) {          String parent=file.getParent();          newfile=new File(parent,filename);        } else {          newfile=new File(filename);        }        Name incorigin=origin;        token=st.get();        if (token.isString()) {          incorigin=parseName(token.value,Name.root);          st.getEOL();        }        included=new Master(newfile,incorigin,defaultTTL);        return nextRecord();      } else       if (s.equalsIgnoreCase("$GENERATE")) {        if (generator != null)         throw new IllegalStateException("cannot nest $GENERATE");        startGenerate();        if (noExpandGenerate) {          endGenerate();          continue;        }        return nextGenerated();      } else {        throw st.exception("Invalid directive: " + s);      }    } else {      s=token.value;      name=parseName(s,origin);      if (last != null && name.equals(last.getName())) {        name=last.getName();      }    }    parseTTLClassAndType();    last=Record.fromString(name,currentType,currentDClass,currentTTL,st,origin);    if (needSOATTL) {      long ttl=((SOARecord)last).getMinimum();      last.setTTL(ttl);      defaultTTL=ttl;      needSOATTL=false;    }    return last;  }}  }
class C{  public boolean isBold(){  return isBold;}  }
class C{  public boolean zoneExportRemoveVolumes(List<NetworkZoningParam> zoningParams,Collection<URI> volumeURIs,String stepId){  NetworkZoningParam zoningParam=zoningParams.get(0);  _log.info(String.format("Entering zoneExportRemoveVolumes for ExportGroup: %s Volumes: %s",zoningParam.getExportGroupDisplay(),volumeURIs.toString()));  return doZoneExportMasksDelete(zoningParams,volumeURIs,stepId);}  }
class C{  public Inference(){}  }
class C{  public static <T>List<T> asImmutable(List<T> self){  return Collections.unmodifiableList(self);}  }
class C{  DHPublicKey(byte[] encodedKey) throws InvalidKeyException {  InputStream inStream=new ByteArrayInputStream(encodedKey);  try {    DerValue derKeyVal=new DerValue(inStream);    if (derKeyVal.tag != DerValue.tag_Sequence) {      throw new InvalidKeyException("Invalid key format");    }    DerValue algid=derKeyVal.data.getDerValue();    if (algid.tag != DerValue.tag_Sequence) {      throw new InvalidKeyException("AlgId is not a SEQUENCE");    }    DerInputStream derInStream=algid.toDerInputStream();    ObjectIdentifier oid=derInStream.getOID();    if (oid == null) {      throw new InvalidKeyException("Null OID");    }    if (derInStream.available() == 0) {      throw new InvalidKeyException("Parameters missing");    }    DerValue params=derInStream.getDerValue();    if (params.tag == DerValue.tag_Null) {      throw new InvalidKeyException("Null parameters");    }    if (params.tag != DerValue.tag_Sequence) {      throw new InvalidKeyException("Parameters not a SEQUENCE");    }    params.data.reset();    this.p=params.data.getBigInteger();    this.g=params.data.getBigInteger();    if (params.data.available() != 0) {      this.l=params.data.getInteger();    }    if (params.data.available() != 0) {      throw new InvalidKeyException("Extra parameter data");    }    this.key=derKeyVal.data.getBitString();    parseKeyBits();    if (derKeyVal.data.available() != 0) {      throw new InvalidKeyException("Excess key data");    }    this.encodedKey=encodedKey.clone();  } catch (  IOException|NumberFormatException e) {    throw new InvalidKeyException("Error parsing key encoding",e);  }}  }
class C{  java.sql.Timestamp toSqlTimestamp(Calendar calendar){  return new java.sql.Timestamp(getTimeInMillis(calendar));}  }
class C{  public void update(long n){  uncounted.add(n);}  }
class C{  public Select<T> offset(int offset){  if (offset < 0) {    throw new QuantumFluxException("Offset must be larger than 0");  }  this.mOffset=offset;  return this;}  }
class C{  @Benchmark public void xmlFriendlyCoding(){  run();}  }
class C{  public static void enableJMS(boolean enable){  ServiceDispatcher.enableJMS=enable;}  }
class C{  protected void closeOldResultSet() throws SQLException {  try {    if (!closedByResultSet) {      if (resultSet != null) {        resultSet.closeInternal();      }    }  }  finally {    cancelled=false;    resultSet=null;    updateCount=-1;  }}  }
class C{  private void onStopAttacked(final IEntity attacker){  attackers.remove(attacker);}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2) private boolean areClingsEnabled(){  if (ActivityManager.isRunningInTestHarness())   return false;  final AccessibilityManager a11yManager=(AccessibilityManager)mLauncher.getSystemService(Launcher.ACCESSIBILITY_SERVICE);  if (a11yManager.isTouchExplorationEnabled()) {    return false;  }  if (Utilities.ATLEAST_JB_MR2) {    UserManager um=(UserManager)mLauncher.getSystemService(Context.USER_SERVICE);    Bundle restrictions=um.getUserRestrictions();    if (restrictions.getBoolean(UserManager.DISALLOW_MODIFY_ACCOUNTS,false)) {      return false;    }  }  if (Settings.Secure.getInt(mLauncher.getContentResolver(),SKIP_FIRST_USE_HINTS,0) == 1) {    return false;  }  return true;}  }
class C{  public static String prettyPrint(String jsonPayload){  int indentSize=0;  final CharBuf output=CharBuf.create((int)(jsonPayload.length() * 1.2));  JsonLexer lexer=new JsonLexer(new StringReader(jsonPayload));  Map<Integer,char[]> indentCache=new HashMap<Integer,char[]>();  while (lexer.hasNext()) {    JsonToken token=lexer.next();switch (token.getType()) {case OPEN_CURLY:      indentSize+=4;    output.addChars(Chr.array(OPEN_BRACE,NEW_LINE)).addChars(getIndent(indentSize,indentCache));  break;case CLOSE_CURLY:indentSize-=4;output.addChar(NEW_LINE);if (indentSize > 0) {output.addChars(getIndent(indentSize,indentCache));}output.addChar(CLOSE_BRACE);break;case OPEN_BRACKET:indentSize+=4;output.addChars(Chr.array(OPEN_BRACKET,NEW_LINE)).addChars(getIndent(indentSize,indentCache));break;case CLOSE_BRACKET:indentSize-=4;output.addChar(NEW_LINE);if (indentSize > 0) {output.addChars(getIndent(indentSize,indentCache));}output.addChar(CLOSE_BRACKET);break;case COMMA:output.addChars(Chr.array(COMMA,NEW_LINE)).addChars(getIndent(indentSize,indentCache));break;case COLON:output.addChars(Chr.array(COLON,SPACE));break;case STRING:String textStr=token.getText();String textWithoutQuotes=textStr.substring(1,textStr.length() - 1);if (textWithoutQuotes.length() > 0) {output.addJsonEscapedString(textWithoutQuotes);} else {output.addQuoted(Chr.array());}break;default :output.addString(token.getText());}}return output.toString();}  }
class C{  public void dispatchEvent(EventObject evt){  if (evt instanceof MouseWheelEvent) {    if (root == null)     return;    if (!eventDispatchEnabled) {      if (eventQueueMaxSize > 0) {        eventQueue.add(evt);        while (eventQueue.size() > eventQueueMaxSize)         eventQueue.remove(0);      }      return;    }    dispatchMouseWheelEvent((MouseWheelEvent)evt);  } else {    super.dispatchEvent(evt);  }}  }
class C{  private String createUpdateSql(boolean insert,String whereClause){  StringBuffer sb=new StringBuffer();  if (insert) {    sb.append("INSERT INTO ").append(m_tableName).append(" (");    for (int i=0; i < m_createSqlColumn.size(); i++) {      if (i != 0)       sb.append(",");      sb.append(m_createSqlColumn.get(i));    }    sb.append(") VALUES ( ");    for (int i=0; i < m_createSqlValue.size(); i++) {      if (i != 0)       sb.append(",");      sb.append(m_createSqlValue.get(i));    }    sb.append(")");  } else {    sb.append("UPDATE ").append(m_tableName).append(" SET ");    for (int i=0; i < m_createSqlColumn.size(); i++) {      if (i != 0)       sb.append(",");      sb.append(m_createSqlColumn.get(i)).append("=").append(m_createSqlValue.get(i));    }    sb.append(" WHERE ").append(whereClause);  }  log.fine(sb.toString());  createUpdateSqlReset();  return sb.toString();}  }
class C{  public VideoQuality(){}  }
class C{  public SQLClientInfoException(String reason,Map<String,ClientInfoStatus> failedProperties){  super(reason);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  public BroadcastTriggerListener(String name,List<TriggerListener> listeners){  this(name);  this.listeners.addAll(listeners);}  }
class C{  synchronized void sendBytes(byte[] bytes){  try {    for (int i=0; i < bytes.length - 1; i++) {      ostream.write(bytes[i]);      wait(3);    }    final byte endbyte=bytes[bytes.length - 1];    ostream.write(endbyte);  } catch (  java.io.IOException e) {    log.error("Exception on output: " + e);  }catch (  java.lang.InterruptedException e) {    Thread.currentThread().interrupt();    log.error("Interrupted output: " + e);  }}  }
class C{  @Deprecated public static boolean box(MethodVisitor mv,ClassNode type){  if (type.isPrimaryClassNode())   return false;  return box(mv,type.getTypeClass());}  }
class C{  public String fileName(){  NumberFormat numFormat=NumberFormat.getInstance();  numFormat.setMinimumIntegerDigits(5);  numFormat.setGroupingUsed(false);  return "part-" + numFormat.format(info().taskNumber());}  }
class C{  public byte[] calculateKeyedChecksum(byte[] data,int size,byte[] key,int usage) throws KrbCryptoException {  try {    return Des3.calculateChecksum(key,usage,data,0,size);  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  public void startFlipping(){  mStarted=true;  updateRunning();}  }
class C{  private static void checkJobStatus(JobStatus status,JobID expJobId,String expJobName,JobStatus.State expState,float expCleanupProgress) throws Exception {  assert F.eq(status.getJobID(),expJobId) : "Expected=" + expJobId + ", actual="+ status.getJobID();  assert F.eq(status.getJobName(),expJobName) : "Expected=" + expJobName + ", actual="+ status.getJobName();  assert F.eq(status.getState(),expState) : "Expected=" + expState + ", actual="+ status.getState();  assert F.eq(status.getCleanupProgress(),expCleanupProgress) : "Expected=" + expCleanupProgress + ", actual="+ status.getCleanupProgress();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static TDoubleDoubleHashMap createHistogram(DescriptivePiStatistics stats,Discretizer discretizer,boolean reweight){  double[] piValues=stats.getPiValues();  double[] weights=new double[piValues.length];  for (int i=0; i < piValues.length; i++) {    weights[i]=1 / piValues[i];  }  return createHistogram(stats.getValues(),weights,discretizer,reweight);}  }
class C{  public static <K,V>LinkedHashMap<K,V> linkedHashMap(int initialCapacity){  return new LinkedHashMap<K,V>(initialCapacity);}  }
class C{  private Set<PersonUser> findPersonUsersByName(String tenantName,SearchCriteria criteria,int limit) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ValidateUtil.validateNotNull(criteria,"Search criteria");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    IIdentityProvider provider=tenantInfo.findProviderADAsFallBack(criteria.getDomain());    ServerUtils.validateNotNullIdp(provider,tenantName,criteria.getDomain());    return provider.findUsersByName(criteria.getSearchString(),criteria.getDomain(),limit);  } catch (  Exception ex) {    logger.error(String.format("Failed to find person users [Criteria : %s] in tenant [%s]",criteria,tenantName));    throw ex;  }}  }
class C{  public CActionSelectSameFunctionType(final ZyGraph graph,final FunctionType functionType){  super(String.format("Select functions of type %s",functionType));  m_graph=Preconditions.checkNotNull(graph,"IE01285: Graph argument can't be null");  m_functionType=Preconditions.checkNotNull(functionType,"IE01286: Function type can't be null");}  }
class C{  public void putAttribute(Attribute attribute) throws IllegalArgumentException {  if (getAttributePresentity(attribute.getAttributeType()) == N_A) {    throw new IllegalArgumentException("The attribute " + attribute.getName() + " is not allowed in a "+ getName());  }synchronized (attributes) {    attributes.put(attribute.getAttributeType(),attribute);  }}  }
class C{  public CloseableStaticBitmap(Bitmap bitmap,ResourceReleaser<Bitmap> resourceReleaser,QualityInfo qualityInfo,int rotationAngle){  mBitmap=Preconditions.checkNotNull(bitmap);  mBitmapReference=CloseableReference.of(mBitmap,Preconditions.checkNotNull(resourceReleaser));  mQualityInfo=qualityInfo;  mRotationAngle=rotationAngle;}  }
class C{  public static int indexOf(long[] array,long[] sub){  return indexOf(array,sub,0,array.length);}  }
class C{  private void findMatchingRightParen(int parenIdx) throws ParenErrorException {  int savedCurrLoc=currLoc;  while (true) {    currLoc++;    int pidx=-1;    while (currLoc <= endCurrRegion && ((pidx=getParenToLeftOf(currLoc)) == -1)) {      currLoc++;    }    if (pidx == -1) {      getNextRegion();      currLoc=beginCurrRegion;    } else {      if (pidx == LEFT_ROUND_PAREN_IDX && getParenToLeftOf(currLoc + 1) == BEGIN_MULTILINE_COMMENT_IDX) {        currLoc++;        pidx=BEGIN_MULTILINE_COMMENT_IDX;      }      if (pidx < PCOUNT) {        findMatchingRightParen(pidx);      } else {        if ((pidx - parenIdx) % PCOUNT == 0) {          return;        } else {          throw new ParenErrorException(PARENS[parenIdx] + " matched by " + PARENS[pidx],new Region(currLoc - PARENS[pidx].length(),PARENS[pidx].length()),new Region(savedCurrLoc - PARENS[parenIdx].length(),PARENS[parenIdx].length()));        }      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  NodeList elementList;  Node refChild;  Node insertedNode;  doc=(Document)load("hc_staff",true);  newChild=doc.createAttribute("title");  elementList=doc.getElementsByTagName("p");  refChild=elementList.item(1);  rootNode=(Element)refChild.getParentNode();{    boolean success=false;    try {      insertedNode=rootNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  private void applyPartnerDeviceProfileOverrides(Context context,DisplayMetrics dm){  Partner p=Partner.get(context.getPackageManager());  if (p != null) {    p.applyInvariantDeviceProfileOverrides(this,dm);  }}  }
class C{  public Iterable<Edge> edges(){  Queue<Edge> mst=new Queue<Edge>();  for (int v=0; v < edgeTo.length; v++) {    Edge e=edgeTo[v];    if (e != null) {      mst.enqueue(e);    }  }  return mst;}  }
class C{  public boolean isDownloadManagerAvailable(Context context){  Intent intent=new Intent(Intent.ACTION_MAIN);  intent.addCategory(Intent.CATEGORY_LAUNCHER);  intent.setClassName(resources.getString(R.string.android_download_manager_ui_resolver),resources.getString(R.string.android_download_manager_list_resolver));  return context.getPackageManager().queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY).size() > 0;}  }
class C{  public UnknownRefactoringDescriptor(final String name){  super(ID_UNKNOWN,null,name,null,RefactoringDescriptor.NONE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:04.905 -0500",hash_original_method="235D12E1C0658EE09BEFB9086E97A54C",hash_generated_method="3E872DC79AAB9673DD68326684BD29B8") @DSVerified("Constructor") @DSSafe(DSCat.SAFE_OTHERS) public FromNetASCIIInputStream(InputStream input){  super(input,_lineSeparatorBytes.length + 1);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.108 -0500",hash_original_method="4B3A97D73E48F79754EA5A86D4C2409D",hash_generated_method="E8E025740DE214A84E53AA7057D82F38") private String readQuotedId(boolean returnText) throws IOException, XmlPullParserException {  int quote=peekCharacter();  char[] delimiter;  if (quote == '"') {    delimiter=DOUBLE_QUOTE;  } else   if (quote == '\'') {    delimiter=SINGLE_QUOTE;  } else {    throw new XmlPullParserException("Expected a quoted string",this,null);  }  position++;  return readUntil(delimiter,returnText);}  }
class C{  private int addExpansion(int anOrder,String expandChars){  if (expandTable == null) {    expandTable=new Vector<>(INITIALTABLESIZE);  }  int offset=(anOrder == RBCollationTables.UNMAPPED) ? 0 : 1;  int[] valueList=new int[expandChars.length() + offset];  if (offset == 1) {    valueList[0]=anOrder;  }  int j=offset;  for (int i=0; i < expandChars.length(); i++) {    char ch0=expandChars.charAt(i);    char ch1;    int ch;    if (Character.isHighSurrogate(ch0)) {      if (++i == expandChars.length() || !Character.isLowSurrogate(ch1=expandChars.charAt(i))) {        break;      }      ch=Character.toCodePoint(ch0,ch1);    } else {      ch=ch0;    }    int mapValue=getCharOrder(ch);    if (mapValue != RBCollationTables.UNMAPPED) {      valueList[j++]=mapValue;    } else {      valueList[j++]=CHARINDEX + ch;    }  }  if (j < valueList.length) {    int[] tmpBuf=new int[j];    while (--j >= 0) {      tmpBuf[j]=valueList[j];    }    valueList=tmpBuf;  }  int tableIndex=RBCollationTables.EXPANDCHARINDEX + expandTable.size();  expandTable.addElement(valueList);  return tableIndex;}  }
class C{  public boolean userCanMoveArch(int connectedUserId,int archId,int dstDirId,String entidad) throws Exception {  boolean can=false;  int parentId;  int parentArchMgrId=Defs.NULL_ID;  int dstDirMgrId=Defs.NULL_ID;  ArchivesTable table=new ArchivesTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    parentId=DbSelectFns.selectLongInteger(dbConn,DaoDATNodeTbl.getTblName(),DaoDATNodeTbl.getParentIdColName(true),table.getLoadNodeArchIdQual(archId));    if (parentId == Defs.ROOT_DIR_ID)     parentArchMgrId=0; else     parentArchMgrId=getDirMgrId(parentId,entidad);    if (dstDirId == Defs.NULL_ID || dstDirId == Defs.ROOT_DIR_ID)     dstDirMgrId=0; else     dstDirMgrId=getDirMgrId(dstDirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_MOVE,Defs.NULL_ID,parentArchMgrId,dstDirMgrId,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  @NonNull public static Animator rotateBy(float rotation){  return rotateBy(rotation,0);}  }
class C{  public boolean isServerClosed(){  return serverSocket == null || serverSocket.isClosed() || !serverSocket.isBound();}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer,Locale locale,boolean designTime,boolean okToUseGui){  super(peer,locale,designTime,okToUseGui);}  }
class C{  public void testSendFunctionGroup5(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendFunctionGroup5();  jmri.util.JUnitAppender.assertErrorMessage("Can't send F21-F28 since no command station defined");}  }
class C{  public List<NamedRelatedVirtualPoolRep> listByTenant(URI tenantId){  UriBuilder builder=client.uriBuilder(baseUrl);  builder.queryParam(SearchConstants.TENANT_ID_PARAM,tenantId);  VirtualPoolList response=client.getURI(VirtualPoolList.class,builder.build());  return ResourceUtils.defaultList(response.getVirtualPool());}  }
class C{  public Builder removePhoto(Photo photo){  this.photos.remove(photo);  return this;}  }
class C{  public Coordinate[] nearestPoints(){  computeMinDistance();  Coordinate[] nearestPts=new Coordinate[]{minDistanceLocation[0].getCoordinate(),minDistanceLocation[1].getCoordinate()};  return nearestPts;}  }
class C{  VPlexConsistencyGroupInfo findConsistencyGroup(String cgName,List<VPlexClusterInfo> clusterInfoList,boolean fetchAtts) throws VPlexApiException {  return findConsistencyGroup(cgName,clusterInfoList,fetchAtts,false);}  }
class C{  public void appendNodes(NodeSet nodes){  int nNodes=nodes.size();  if (null == m_map) {    m_mapSize=nNodes + m_blocksize;    m_map=new Node[m_mapSize];  } else   if ((m_firstFree + nNodes) >= m_mapSize) {    m_mapSize+=(nNodes + m_blocksize);    Node newMap[]=new Node[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + nNodes);    m_map=newMap;  }  System.arraycopy(nodes.m_map,0,m_map,m_firstFree,nNodes);  m_firstFree+=nNodes;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  Node commentImport;  Node commentToImport;  String nodeValue;  doc=(Document)load("staffNS",true);  docImp=(Document)load("staffNS",true);  commentToImport=doc.createComment("Document.importNode test for a COMMENT_NODE");  commentImport=doc.importNode(commentToImport,true);  nodeValue=commentImport.getNodeValue();  assertEquals("documentimportnode17","Document.importNode test for a COMMENT_NODE",nodeValue);}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  return builder.build();}  }
class C{  public static JPanel createDialogButtonPanel(JButton[] jbPositives,boolean resizable){  return createDialogButtonPanel(jbPositives,null,null,resizable,null);}  }
class C{  public AttributeWeightedExampleSet(ExampleSet exampleSet,AttributeWeights weights){  this(exampleSet,weights,1.0d);}  }
class C{  synchronized void recursiveSync(int iter){  if (iter < 40) {    recursiveSync(iter + 1);  } else {    System.out.println("recursiveSync ok");  }}  }
class C{  private void executePreparedStatement(String sql,Object... arguments) throws SQLException {  Connection connection=null;  PreparedStatement preparedStatement=null;  try {    DataSource dataSource=DaoSpringModuleConfig.getHerdDataSource();    connection=dataSource.getConnection();    preparedStatement=connection.prepareStatement(sql);    for (int i=0; i < arguments.length; i++) {      preparedStatement.setObject(i + 1,arguments[i]);    }    preparedStatement.execute();  }  finally {    if (preparedStatement != null) {      preparedStatement.close();    }    if (connection != null) {      connection.close();    }  }}  }
class C{  private void analize(){  StringTokenizer tokenizer=new StringTokenizer(sourceData,",");  event=Integer.parseInt(tokenizer.nextToken());  actionType=Integer.parseInt(tokenizer.nextToken());  macroId=Integer.parseInt(tokenizer.nextToken());}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null || ws == null)   ;  String formName=WebUtil.getParameter(request,FIELD_FORM);  String fieldName=WebUtil.getParameter(request,FIELD_NAME);  String fieldValue=WebUtil.getParameter(request,FIELD_VALUE);  String locationValue=WebUtil.getParameter(request,LOCATION_VALUE);  log.info("doPost - Form=" + formName + " - Field="+ fieldName+ " - Value="+ fieldValue+ " - Location="+ locationValue);  WebDoc doc=createPage(wsc,ws,formName,fieldName,fieldValue,locationValue);  form fu=new form(request.getRequestURI());  fu.setName(FORM_NAME);  fu.addElement(new input(input.TYPE_HIDDEN,FIELD_FORM,"y"));  fu.addElement(new input(input.TYPE_HIDDEN,FIELD_NAME,"y"));  fu.addElement(new input(input.TYPE_HIDDEN,FIELD_VALUE,"y"));  fu.addElement(new input(input.TYPE_HIDDEN,LOCATION_VALUE,locationValue));  doc.getBody().addElement(fu);  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public boolean isMultivalor(){  return multivalor;}  }
class C{  public RosterGroupComboBox(Roster roster){  this(roster,roster.getDefaultRosterGroup());}  }
class C{  public static synchronized void installCompositeTransactionManager(CompositeTransactionManager compositeTransactionManager){  ctxmgr_=compositeTransactionManager;}  }
class C{  public void add(int element){  if (this.size == this.capacity)   flush();  this.elements[size++]=element;}  }
class C{  protected void retain(BaseEvent event){  Info info=events.get(event);  if (info != null) {    info.refcount.incrementAndGet();  } else {    log.warn("Retain called on already released event.");  }}  }
class C{  private Object invokeBroadcasterMethod(Object proxy,Method method,Object[] args) throws Throwable {  final String methodName=method.getName();  final int nargs=(args == null) ? 0 : args.length;  final Class[] paramTypes=method.getParameterTypes();  final String[] signature=new String[paramTypes.length];  if (methodName.equals("addNotificationListener")) {    if (nargs != 3) {      final String msg="Bad arg count to addNotificationListener: " + nargs;      throw new IllegalArgumentException(msg);    }    NotificationListener listener=(NotificationListener)args[0];    NotificationFilter filter=(NotificationFilter)args[1];    Object handback=args[2];    emitter.addNotificationListener(listener,filter,handback);    delegateToFucntionService(objectName,methodName,null,signature);    return null;  } else   if (methodName.equals("removeNotificationListener")) {    NotificationListener listener=(NotificationListener)args[0];switch (nargs) {case 1:      emitter.removeNotificationListener(listener);    delegateToFucntionService(objectName,methodName,null,signature);  return null;case 3:NotificationFilter filter=(NotificationFilter)args[1];Object handback=args[2];emitter.removeNotificationListener(listener,filter,handback);delegateToFucntionService(objectName,methodName,null,signature);return null;default :final String msg="Bad arg count to removeNotificationListener: " + nargs;throw new IllegalArgumentException(msg);}} else if (methodName.equals("getNotificationInfo")) {if (args != null) {throw new IllegalArgumentException("getNotificationInfo has " + "args");}if (!MBeanJMXAdapter.mbeanServer.isRegistered(objectName)) {return new MBeanNotificationInfo[0];}Object obj=delegateToFucntionService(objectName,methodName,args,signature);if (obj instanceof String) {return new MBeanNotificationInfo[0];}MBeanInfo info=(MBeanInfo)obj;return info.getNotifications();} else {throw new IllegalArgumentException("Bad method name: " + methodName);}}  }
class C{  public static byte[] accMemoryRead1(int address){  int addr_h=address / 256;  int addr_l=address & 0xFF;  byte[] retVal=new byte[3];  retVal[0]=(byte)(READ1_CMD);  retVal[1]=(byte)(addr_h);  retVal[2]=(byte)(addr_l);  return retVal;}  }
class C{  public void wrongAction(final long actionId){  m_warningLabel.setText(String.format(WRONG_ACTION_STRING,actionId));  toFront();}  }
class C{  public Query lang(final String lang){  setLang(lang);  return this;}  }
class C{  public NodeList findNodes(String xpath){  return (NodeList)eval(xpath,XPathConstants.NODESET);}  }
class C{  public SQLTransientException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.VERTEX__PARENT_REGION:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetParentRegion((Region)otherEnd,msgs);case SGraphPackage.VERTEX__INCOMING_TRANSITIONS:return ((InternalEList<InternalEObject>)(InternalEList<?>)getIncomingTransitions()).basicAdd(otherEnd,msgs);case SGraphPackage.VERTEX__OUTGOING_TRANSITIONS:return ((InternalEList<InternalEObject>)(InternalEList<?>)getOutgoingTransitions()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static ActionBarBackground changeColor(AppCompatActivity activity,int newColor){  return changeColor(activity,newColor,true);}  }
class C{  void detachView(){  getPresenter().detachView(delegateCallback.shouldInstanceBeRetained());}  }
class C{  public LongRange(long min,long max){  this.min=min;  this.max=max;}  }
class C{  public ItemParserResult parse(final Sentence sentence){  if (itemNames.isEmpty()) {    List<Expression> expressions=sentence.getExpressions();    String chosenName;    int amount;    if (expressions.size() == 1) {      Expression expr=expressions.get(0);      amount=expr.getAmount();      chosenName=expr.getNormalized();    } else {      final Expression numeral=sentence.getNumeral();      amount=numeral != null ? numeral.getAmount() : 1;      chosenName=sentence.getExpressionStringAfterVerb();    }    return new ItemParserResult(false,chosenName,amount,null);  }  NameSearch search=sentence.findMatchingName(itemNames);  boolean found=search.found();  String chosenName=search.getName();  int amount=search.getAmount();  Set<String> mayBeItems=null;  if (!found) {    if ((sentence.getNumeralCount() == 1) && (sentence.getUnknownTypeCount() == 0) && (sentence.getObjectCount() == 0)) {      final Expression number=sentence.getNumeral();      amount=number.getAmount();    } else {      chosenName=sentence.getExpressionStringAfterVerb();      amount=1;    }    if (chosenName == null && itemNames.size() == 1) {      chosenName=itemNames.iterator().next();      found=true;    } else     if (chosenName != null) {      mayBeItems=new HashSet<String>();      for (      String name : itemNames) {        if (name.endsWith(" " + chosenName) || (name.startsWith(chosenName + " "))) {          mayBeItems.add(name);        }      }    }  }  return new ItemParserResult(found,chosenName,amount,mayBeItems);}  }
class C{  public void inviteFriends(String appLinkUrl,String previewImageUrl){}  }
class C{  public void loadLocal(final int local){  loadInsn(getLocalType(local),local);}  }
class C{  public int length(){  return m_str.length();}  }
class C{  public void insert(double x1,double x2,Object item){  super.insert(new Interval(Math.min(x1,x2),Math.max(x1,x2)),item);}  }
class C{  private void updateEmptySearchBackgroundBounds(){  if (mEmptySearchBackground == null) {    return;  }  int x=(getMeasuredWidth() - mEmptySearchBackground.getIntrinsicWidth()) / 2;  int y=mEmptySearchBackgroundTopOffset;  mEmptySearchBackground.setBounds(x,y,x + mEmptySearchBackground.getIntrinsicWidth(),y + mEmptySearchBackground.getIntrinsicHeight());}  }
class C{  public static Event createWithTime(final Event.Type type,@NotNull Map<String,String> parameters){  parameters=new LinkedHashMap<>(parameters);  parameters.put(Event.TIME_PARAM,getTime());  return new Event(type,parameters);}  }
class C{  public static Stream<Entry<Transaction>> stream(){  return StreamSupport.stream(iterate().spliterator(),false);}  }
class C{  public static ChainingTextParser<ChainingTextParser<?>> parse(InputStream in){  return new ChainingTextParser<ChainingTextParser<?>>(in);}  }
class C{  public GeoDistanceSortBuilder points(GeoPoint... points){  this.points.addAll(Arrays.asList(points));  return this;}  }
class C{  private static void close(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException e) {    }  }}  }
class C{  public boolean canTakeDamage(DamageCause damageCause){  return true;}  }
class C{  private void onTrigger1(){  addInstruction(R.string.accessibility_tutorial_lesson_1_text_2_more,true);  mAllApps.setAccessibilityDelegate(mUntouchedIconFocusDelegate);}  }
class C{  protected RequestTask(LazilyLoadedTexture wwTexture){  if (wwTexture == null) {    String message=Logging.getMessage("nullValue.TextureIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.wwTexture=wwTexture;}  }
class C{  public static void createColumn(Table table,String key,int width){  TableColumn column=new TableColumn(table,SWT.NULL);  column.setText(DBPlugin.getResourceString(key));  column.setWidth(width);}  }
class C{  @Nullable public IgniteUuid lastParentId(){  return ids[ids.length - 2];}  }
class C{  public void randomNumber() throws IOException {  print("randomNumber",null);}  }
class C{  public int compare(Instance inst1,Instance inst2){  int result;  int classindex;  int i;  Instances data1;  Instances data2;  int n;  InstanceComparator comp;  m_Range.setUpper(inst1.numAttributes() - 1);  if (inst1.classIndex() == -1)   classindex=inst1.numAttributes() - 1; else   classindex=inst1.classIndex();  result=0;  for (i=0; i < inst1.numAttributes(); i++) {    if (!m_Range.isInRange(i))     continue;    if (!getIncludeClass() && (i == classindex))     continue;    if (inst1.isMissing(i) || inst2.isMissing(i)) {      if (inst1.isMissing(i) && inst2.isMissing(i)) {        continue;      } else {        if (inst1.isMissing(i))         result=-1; else         result=1;        break;      }    } else {switch (inst1.attribute(i).type()) {case Attribute.STRING:        result=inst1.stringValue(i).compareTo(inst2.stringValue(i));      break;case Attribute.RELATIONAL:    data1=inst1.relationalValue(i);  data2=inst2.relationalValue(i);n=0;comp=new InstanceComparator();while ((n < data1.numInstances()) && (n < data2.numInstances()) && (result == 0)) {result=comp.compare(data1.instance(n),data2.instance(n));n++;}break;default :if (Utils.eq(inst1.value(i),inst2.value(i))) {continue;} else {if (inst1.value(i) < inst2.value(i)) result=-1; else result=1;break;}}}if (result != 0) break;}return result;}  }
class C{  @Override protected void onHandleIntent(Intent intent){  Bundle bundle=intent.getExtras();  long trackID=bundle.getLong(ARG_EXPORT_TRACK_ID);  Uri uri=Uri.parse(bundle.getString(ARG_EXPORT_URI));  String path=bundle.getString(ARG_EXPORT_PATH);  PlayMusicManager playMusicManager=PlayMusicManager.getInstance();  if (playMusicManager != null) {    MusicTrackDataSource musicTrackDataSource=new MusicTrackDataSource(playMusicManager);    mTrackCurrent=musicTrackDataSource.getById(trackID);    if (mTrackCurrent != null) {      updateNotification();      if (!playMusicManager.exportMusicTrack(mTrackCurrent,uri,path)) {        mTracksFailed++;      }    } else {      mTracksFailed++;    }  } else {    mTracksFailed++;  }  mTracksDone++;  updateNotification();}  }
class C{  @Thunk Bitmap readFromDb(WidgetCacheKey key,Bitmap recycle,PreviewLoadTask loadTask){  Cursor cursor=null;  try {    cursor=mDb.query(new String[]{CacheDb.COLUMN_PREVIEW_BITMAP},CacheDb.COLUMN_COMPONENT + " = ? AND " + CacheDb.COLUMN_USER+ " = ? AND "+ CacheDb.COLUMN_SIZE+ " = ?",new String[]{key.componentName.flattenToString(),Long.toString(mUserManager.getSerialNumberForUser(key.user)),key.size});    if (loadTask.isCancelled()) {      return null;    }    if (cursor.moveToNext()) {      byte[] blob=cursor.getBlob(0);      BitmapFactory.Options opts=new BitmapFactory.Options();      opts.inBitmap=recycle;      try {        if (!loadTask.isCancelled()) {          return BitmapFactory.decodeByteArray(blob,0,blob.length,opts);        }      } catch (      Exception e) {        return null;      }    }  } catch (  SQLException e) {    Log.w(TAG,"Error loading preview from DB",e);  } finally {    if (cursor != null) {      cursor.close();    }  }  return null;}  }
class C{  protected boolean drawFeaturesFromThematicIndex(FeatureClassInfo fci,VPFFeatureWarehouse warehouse,TableHolder tables,LatLonPoint ll1,LatLonPoint ll2,float dpplat,float dpplon,String currentFeature,char featureType){  if (!fci.initThematicIndex(tablepath)) {    return false;  }  List<Object> v=new ArrayList<Object>();  try {    int primitiveIdColIndex=fci.getTilePrimitiveIdColIndex();    DcwThematicIndex thematicIndex=fci.getThematicIndex();    Object[] indexes=thematicIndex.getValueIndexes();    fci.reopen(1);    for (int i=0; i < indexes.length; i++) {      int tileID=VPFUtil.objectToInt(indexes[i]);      TileDirectory currentTile=cat.getTileWithID(tileID);      if (currentTile == null) {        Debug.error("VPFLayer|CoverageTable.drawFeatures: null tile from bogus ID (" + tileID + ") from "+ fci.filename+ ", skipping...");        continue;      }      if (currentTile.inRegion(ll1.getLatitude(),ll2.getLatitude(),ll2.getLongitude(),ll1.getLongitude())) {        tables.setTables(featureType,currentTile);        tables.findYourself(fci);        int[] featureID=thematicIndex.get(indexes[i]);        if (Debug.debugging("vpf.tile")) {          Debug.output("Drawing " + featureID.length + " "+ featureType+ " features for "+ tileID+ " "+ currentTile);        }        String libraryname=cat.libraryname;        if (!warehouse.needToFetchTileContents(libraryname,currentFeature,currentTile)) {          if (Debug.debugging("vpf")) {            Debug.output("Loaded Cached List for " + currentFeature + " and "+ currentTile.getPath());          }          continue;        }        for (int j=0; j < featureID.length; j++) {          int featurePrimID=featureID[j];          if (!fci.getRow(v,featurePrimID)) {            continue;          }          int primitiveID=VPFUtil.objectToInt(v.get(primitiveIdColIndex));          tables.drawFeature(primitiveID,warehouse,ll1,ll2,dpplat,dpplon,currentFeature,featurePrimID);        }        tables.close();      } else {        if (Debug.debugging("vpf.tile")) {          Debug.output("Skipping " + featureType + " features for "+ tileID+ ", not on map");        }      }    }    return true;  } catch (  FormatException f) {    if (Debug.debugging("vpf.FormatException")) {      Debug.output("CoverageTable.DFFTI: Format Exception creating features: " + f.getClass() + " "+ f.getMessage());    }    return false;  } finally {    fci.close();  }}  }
class C{  public PduPart removePart(int index){  return mParts.remove(index);}  }
class C{  public void checkCanceled(){  throttle();  if (cancelAt == 0) {    return;  }  long time=System.currentTimeMillis();  if (time >= cancelAt) {    cancelAt=0;    throw DbException.get(ErrorCode.STATEMENT_WAS_CANCELED);  }}  }
class C{  @Override protected double solveImpl(final Ops.DoubleOp f,final double xAccuracy){  double min1, min2;  double froot, p, q, r, s, xAcc1, xMid;  double d=0.0, e=0.0;  root=xMax;  froot=fxMax;  while (evaluationNumber <= getMaxEvaluations()) {    if ((froot > 0.0 && fxMax > 0.0) || (froot < 0.0 && fxMax < 0.0)) {      xMax=xMin;      fxMax=fxMin;      e=d=root - xMin;    }    if (Math.abs(fxMax) < Math.abs(froot)) {      xMin=root;      root=xMax;      xMax=xMin;      fxMin=froot;      froot=fxMax;      fxMax=fxMin;    }    xAcc1=2.0 * Constants.QL_EPSILON * Math.abs(root) + 0.5 * xAccuracy;    xMid=(xMax - root) / 2.0;    if (Math.abs(xMid) <= xAcc1 || froot == 0.0)     return root;    if (Math.abs(e) >= xAcc1 && Math.abs(fxMin) > Math.abs(froot)) {      s=froot / fxMin;      if (Closeness.isClose(xMin,xMax)) {        p=2.0 * xMid * s;        q=1.0 - s;      } else {        q=fxMin / fxMax;        r=froot / fxMax;        p=s * (2.0 * xMid * q* (q - r) - (root - xMin) * (r - 1.0));        q=(q - 1.0) * (r - 1.0) * (s - 1.0);      }      if (p > 0.0)       q=-q;      p=Math.abs(p);      min1=3.0 * xMid * q - Math.abs(xAcc1 * q);      min2=Math.abs(e * q);      if (2.0 * p < (min1 < min2 ? min1 : min2)) {        e=d;        d=p / q;      } else {        d=xMid;        e=d;      }    } else {      d=xMid;      e=d;    }    xMin=root;    fxMin=froot;    if (Math.abs(d) > xAcc1)     root+=d; else     root+=sign(xAcc1,xMid);    froot=f.op(root);    evaluationNumber++;  }  throw new ArithmeticException("maximum number of function evaluations exceeded");}  }
class C{  public static SailRepository createRepository(final Option... args){  return createRepository(new Properties(),null,args);}  }
class C{  public ImmutableMap<String,ImmutableMap<String,ImmutableMap<String,FieldMappingMetaData>>> mappings(){  return mappings;}  }
class C{  public TextLayoutStrategy(){  text=new AttributedSegment();}  }
class C{  public static boolean isServiceRunning(Context context,Class<?> serviceClass){  try {    ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);    for (    ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {      if (serviceClass.getName().equals(service.service.getClassName())) {        return true;      }    }  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  public void checkSizeSet(final int pageNumber){  if (pageNumber > pageCount) {    pageCount=pageNumber;  }  if (cropBox != null && (cropBox[0] != mediaBox[0] || cropBox[1] != mediaBox[1] || cropBox[2] != mediaBox[2] || cropBox[3] != mediaBox[3])) {    mediaBoxes.setElementAt(mediaBox,pageNumber);    if (cropBox[0] >= mediaBox[0] && cropBox[1] >= mediaBox[1] && (cropBox[2] - cropBox[0]) <= (mediaBox[2] - mediaBox[0]) && (cropBox[3] - cropBox[1]) <= (mediaBox[3] - mediaBox[1])) {      cropBoxes.setElementAt(cropBox,pageNumber);    }  } else   if (mediaBox != null) {    mediaBoxes.setElementAt(mediaBox,pageNumber);  }  if (pagesRead < pageNumber) {    pagesRead=pageNumber;  }  lastPage=-1;  mediaBox=null;  cropBox=null;}  }
class C{  private void initBarcodeReader(List<String> barCodeTypes){  EnumMap<DecodeHintType,Object> hints=new EnumMap<>(DecodeHintType.class);  EnumSet<BarcodeFormat> decodeFormats=EnumSet.noneOf(BarcodeFormat.class);  if (barCodeTypes != null) {    for (    String code : barCodeTypes) {      BarcodeFormat format=parseBarCodeString(code);      if (format != null) {        decodeFormats.add(format);      }    }  }  hints.put(DecodeHintType.POSSIBLE_FORMATS,decodeFormats);  _multiFormatReader.setHints(hints);}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  try {    int id=getNextId(TraceObject.PREPARED_STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("PreparedStatement",TraceObject.PREPARED_STATEMENT,id,"prepareStatement(" + quote(sql) + ", "+ resultSetType+ ", "+ resultSetConcurrency+ ")");    }    checkTypeConcurrency(resultSetType,resultSetConcurrency);    checkClosed();    sql=translateSQL(sql);    return new JdbcPreparedStatement(this,sql,id,resultSetType,resultSetConcurrency,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static boolean isMaximum(InetAddress address){  byte[] addr=address.getAddress();  for (int i=0; i < addr.length; i++) {    if (addr[i] != (byte)0xff) {      return false;    }  }  return true;}  }
class C{  public Cursor swapCursor(final Cursor newCursor){  final Cursor oldCursor=mClaimsCursor;  mClaimsCursor=newCursor;  notifyDataSetChanged();  return oldCursor;}  }
class C{  public synchronized void storeResourceConfig(String clusterName,ResourceType resourceType,TungstenProperties resourceProps) throws ConfigurationException {  if (getClusterHome() == null) {    throw new ConfigurationException("The 'clusterHome' property was not found in the configuration file:" + getModulePropertiesFileName(ConfigurationConstants.TR_PROPERTIES,getClusterHome()));  }  String resourceDir=getResourceConfigDirName(getClusterHome(),clusterName,resourceType);  File resources=new File(resourceDir);  if (!resources.isDirectory()) {    if (resources.mkdirs()) {      logger.info(String.format("Created directory '%s'",resourceDir));    } else {      String msg=String.format("The path indicated by the name %s must be a directory.",getResourceConfigDirName(getClusterHome(),clusterName,resourceType));      logger.error(msg);      throw new ConfigurationException(msg);    }  }  String outFileName=resources.getAbsolutePath() + File.separator + resourceProps.getString("name")+ ".properties";  store(resourceProps,outFileName);}  }
class C{  public static void logPageFinishedLoading(String url,long duration){  EventLog.writeEvent(BROWSER_PAGE_LOADED,url + "|" + duration);}  }
class C{  public void testTestBitPositive3(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=300;  BigInteger aNumber=new BigInteger(aSign,aBytes);  assertTrue(!aNumber.testBit(number));}  }
class C{  public void execute(String script,Object... parameters){  executeWithReturn(script,parameters);}  }
class C{  public void doPrintPreview(){}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public void close(){}  }
class C{  private void rotate(RecognitionBar bar,double degrees,Point startPosition){  double angle=Math.toRadians(degrees);  int x=centerX + (int)((startPosition.x - centerX) * Math.cos(angle) - (startPosition.y - centerY) * Math.sin(angle));  int y=centerY + (int)((startPosition.x - centerX) * Math.sin(angle) + (startPosition.y - centerY) * Math.cos(angle));  bar.setX(x);  bar.setY(y);  bar.update();}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof IceControlAttribute))   return false;  if (obj == this)   return true;  IceControlAttribute iceControlAtt=(IceControlAttribute)obj;  if (iceControlAtt.getAttributeType() != getAttributeType() || iceControlAtt.isControlling != isControlling || iceControlAtt.getDataLength() != DATA_LENGTH_ICE_CONTROL || getTieBreaker() != iceControlAtt.getTieBreaker()) {    return false;  }  return true;}  }
class C{  public FilteredGuacamoleSocket(GuacamoleSocket socket,GuacamoleFilter readFilter,GuacamoleFilter writeFilter){  this.socket=socket;  if (readFilter != null)   reader=new FilteredGuacamoleReader(socket.getReader(),readFilter); else   reader=socket.getReader();  if (writeFilter != null)   writer=new FilteredGuacamoleWriter(socket.getWriter(),writeFilter); else   writer=socket.getWriter();}  }
class C{  private static final void encodeQuotedPrintable(int b,ByteArrayOutputStream buffer){  buffer.write(ESCAPE_CHAR);  char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));  char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));  buffer.write(hex1);  buffer.write(hex2);}  }
class C{  public void moveRight(double units){  mTempVec.setAll(WorldParameters.RIGHT_AXIS);  mTempVec.rotateBy(mOrientation).normalize();  mTempVec.multiply(units);  mPosition.add(mTempVec);  if (mLookAtValid) {    mLookAt.add(mTempVec);    resetToLookAt();  }  markModelMatrixDirty();}  }
class C{  public RuntimeExceptionConfig(String msg,Throwable e){  super(msg,e);}  }
class C{  public static String makeTextSafeForSQL(String source){  if (source == null)   return null;  String reformedText=source.replaceAll("'","''");  return reformedText;}  }
class C{  @Deprecated public static File createTempDirectory(String prefix) throws IOException {  return createTempDirectory(null,prefix);}  }
class C{  public void add(double x,double y){  xStats.add(x);  if (isFinite(x) && isFinite(y)) {    if (xStats.count() > 1) {      sumOfProductsOfDeltas+=(x - xStats.mean()) * (y - yStats.mean());    }  } else {    sumOfProductsOfDeltas=NaN;  }  yStats.add(y);}  }
class C{  public IconicsDrawable icon(ITypeface typeface,IIcon icon){  mIcon=icon;  mIconPaint.setTypeface(typeface.getTypeface(mContext));  invalidateSelf();  return this;}  }
class C{  public void reverse(){  int[] objs=this.objs;  int numObjs=this.numObjs;  int l=numObjs / 2;  int obj;  for (int x=0; x < l; x++) {    obj=objs[x];    objs[x]=objs[numObjs - x - 1];    objs[numObjs - x - 1]=obj;  }}  }
class C{  @Override public Void call(){  processBatch();  return null;}  }
class C{  public FieldIdItem intern(CstFieldRef field){  if (field == null) {    throw new NullPointerException("field == null");  }  throwIfPrepared();  FieldIdItem result=fieldIds.get(field);  if (result == null) {    result=new FieldIdItem(field);    fieldIds.put(field,result);  }  return result;}  }
class C{  @Override public void createFieldEditors(){  final BooleanFieldEditor derbyWarning=new BooleanFieldEditor(PreferenceConstants.FIRSTSTART,Messages.getString("GeneralSettingsPage.1"),getFieldEditorParent());  addField(derbyWarning);  final BooleanFieldEditor linkToEditor=new BooleanFieldEditor(PreferenceConstants.LINK_TO_EDITOR,Messages.getString("GeneralSettingsPage.4"),getFieldEditorParent());  addField(linkToEditor);  final BooleanFieldEditor errorPopups=new BooleanFieldEditor(PreferenceConstants.ERRORPOPUPS,Messages.getString("GeneralSettingsPage.2"),getFieldEditorParent());  addField(errorPopups);  final BooleanFieldEditor inputHelperHints=new BooleanFieldEditor(PreferenceConstants.INPUTHINTS,Messages.getString("GeneralSettingsPage.3"),getFieldEditorParent());  addField(inputHelperHints);  final BooleanFieldEditor showDBIDDecorator=new BooleanFieldEditor(PreferenceConstants.SHOW_DBID_DECORATOR,Messages.getString("GeneralSettingsPage.ShowDBIDDecorator"),getFieldEditorParent());  addField(showDBIDDecorator);  final BooleanFieldEditor showGsmIsmDecorator=new BooleanFieldEditor(PreferenceConstants.SHOW_GSMISM_DECORATOR,Messages.getString("GeneralSettingsPage.ShowGsmIsmDecorator"),getFieldEditorParent());  addField(showGsmIsmDecorator);  final BooleanFieldEditor showRiskAnalysisDecorator=new BooleanFieldEditor(PreferenceConstants.SHOW_RISK_ANALYSIS_DECORATOR,Messages.getString("GeneralSettingsPage.ShowRiskAnalysisDecorator"),getFieldEditorParent());  addField(showRiskAnalysisDecorator);  final BooleanFieldEditor useValidationGuiHints=new BooleanFieldEditor(PreferenceConstants.USE_VALIDATION_GUI_HINTS,Messages.getString("GeneralSettingsPage.UseValidationGuiHints"),getFieldEditorParent());  addField(useValidationGuiHints);  final BooleanFieldEditor useAutomaticValidation=new BooleanFieldEditor(PreferenceConstants.USE_AUTOMATIC_VALIDATION,Messages.getString("GeneralSettingsPage.UseValidationAlways"),getFieldEditorParent());  addField(useAutomaticValidation);  final BooleanFieldEditor inheritSpecialIcon=new BooleanFieldEditor(PreferenceConstants.INHERIT_SPECIAL_GROUP_ICON,Messages.getString("GeneralSettingsPage.InheritSpecialIcon"),getFieldEditorParent());  addField(inheritSpecialIcon);  final BooleanFieldEditor cutInheritPermissions=new BooleanFieldEditor(PreferenceConstants.CUT_INHERIT_PERMISSIONS,Messages.getString("GeneralSettingsPage.CutInheritPermissions"),getFieldEditorParent());  addField(cutInheritPermissions);  final BooleanFieldEditor copyAttachmentsWithObjects=new BooleanFieldEditor(PreferenceConstants.COPY_ATTACHMENTS_WITH_OBJECTS,Messages.getString("GeneralSettingsPage.CopyAttachmentsWithObjects"),getFieldEditorParent());  addField(copyAttachmentsWithObjects);  final ComboFieldEditor encodingFieldEditor=new ComboFieldEditor(PreferenceConstants.CHARSET_CATALOG,Messages.getString("GeneralSettingsPage.6"),ENCODING_COMBO_VALUES,getFieldEditorParent());  addField(encodingFieldEditor);  final ComboFieldEditor thumbnailSizeEditor=new ComboFieldEditor(PreferenceConstants.THUMBNAIL_SIZE,Messages.getString("GeneralSettingsPage.7"),THUMBNAIL_SIZE_VALUES,getFieldEditorParent());  addField(thumbnailSizeEditor);}  }
class C{  private void dynInit(){  super.dynInit(statusBar);  m_gridController=new ADTabPanel();  m_gridController.init(null,m_WindowNo,m_mTab,m_mWindow);  if (!m_gridController.isGridView())   m_gridController.switchRowPresentation();  Center center=new Center();  mainLayout.appendChild(center);  center.setFlex(true);  center.appendChild(m_gridController);}  }
class C{  public int size(){  return q.size();}  }
class C{  public byte[] decrypt(byte[] data,final String ref,final boolean isEncryption,final String cacheName,final boolean alwaysUseRC4,final boolean isString) throws PdfSecurityException {  if (getBooleanValue(PDFflags.IS_FILE_ENCRYPTED) || isEncryption) {    BufferedOutputStream streamCache=null;    BufferedInputStream bis=null;    boolean isAES=false;    byte[] AESData=null;    if (cacheName != null) {      try {        if (data == null) {          AESData=new byte[16];          final FileInputStream fis=new FileInputStream(cacheName);          fis.read(AESData);          fis.close();        }        final File tempFile2=File.createTempFile("jpedal",".raw",new File(ObjectStore.temp_dir));        cachedObjects.put(tempFile2.getAbsolutePath(),"x");        ObjectStore.copy(cacheName,tempFile2.getAbsolutePath());        final File rawFile=new File(cacheName);        rawFile.delete();        streamCache=new BufferedOutputStream(new FileOutputStream(cacheName));        bis=new BufferedInputStream(new FileInputStream(tempFile2));      } catch (      final IOException e1) {        LogWriter.writeLog("Exception " + e1 + " in decrypt");      }    }    int keyLength=this.keyLength;    String algorithm="RC4", keyType="RC4";    IvParameterSpec ivSpec=null;    final PdfObject AESObj;    if (!isString) {      AESObj=StmFObj;    } else {      AESObj=StrFObj;    }    if (certificate != null) {      setPasswordFromCertificate(AESObj);      AESObj.setIntNumber(PdfDictionary.Length,16);    }    if (!alwaysUseRC4 && AESObj == null && isAESIdentity) {      return data;    }    if (AESObj != null) {      final String cryptName=AESObj.getName(PdfDictionary.CFM);      if (cryptName != null && !alwaysUseRC4 && ((cryptName.equals("AESV2") || (cryptName.equals("AESV3"))))) {        cipher=null;        algorithm="AES/CBC/PKCS5Padding";        keyType="AES";        isAES=true;        final byte[] iv=new byte[16];        if (AESData != null) {          System.arraycopy(AESData,0,iv,0,16);        } else {          System.arraycopy(data,0,iv,0,16);        }        ivSpec=new IvParameterSpec(iv);        if (data == null) {          try {            bis.skip(16);          } catch (          final IOException e) {            LogWriter.writeLog("Exception: " + e.getMessage());          }        } else {          final int origLen=data.length;          final int newLen=origLen - 16;          byte[] newData=new byte[newLen];          System.arraycopy(data,16,newData,0,newLen);          data=newData;          final int diff=(data.length & 15);          int newLength=data.length;          if (diff > 0) {            newLength=newLength + 16 - diff;            newData=new byte[newLength];            System.arraycopy(data,0,newData,0,data.length);            data=newData;          }          if (rev == 5) {            try {              final byte[] finalKey=new byte[32];              System.arraycopy(encryptionKey,0,finalKey,0,finalKey.length);              return decodeAES(finalKey,data,iv);            } catch (            final Exception e) {              throw new PdfSecurityException("Exception " + e + " decrypting content in AES revision 5");            }          }        }      }    }    byte[] currentKey=new byte[keyLength];    if (!ref.isEmpty()) {      currentKey=new byte[keyLength + 5];    }    System.arraycopy(encryptionKey,0,currentKey,0,keyLength);    try {      final byte[] finalKey;      if (rev == 5) {        finalKey=new byte[32];        System.arraycopy(currentKey,0,finalKey,0,finalKey.length);      } else {        if (!ref.isEmpty()) {          final int pointer=ref.indexOf(' ');          final int pointer2=ref.indexOf(' ',pointer + 1);          final int obj=Integer.parseInt(ref.substring(0,pointer));          final int gen=Integer.parseInt(ref.substring(pointer + 1,pointer2));          currentKey[keyLength]=((byte)(obj & 0xff));          currentKey[keyLength + 1]=((byte)((obj >> 8) & 0xff));          currentKey[keyLength + 2]=((byte)((obj >> 16) & 0xff));          currentKey[keyLength + 3]=((byte)(gen & 0xff));          currentKey[keyLength + 4]=((byte)((gen >> 8) & 0xff));        }        finalKey=new byte[Math.min(currentKey.length,16)];        if (!ref.isEmpty()) {          final MessageDigest currentDigest=MessageDigest.getInstance("MD5");          currentDigest.update(currentKey);          if (isAES && keyLength >= 16) {            final byte[] salt={(byte)0x73,(byte)0x41,(byte)0x6c,(byte)0x54};            currentDigest.update(salt);          }          System.arraycopy(currentDigest.digest(),0,finalKey,0,finalKey.length);        } else {          System.arraycopy(currentKey,0,finalKey,0,finalKey.length);        }      }      if (cipher == null) {        cipher=Cipher.getInstance(algorithm);      }      final SecretKey testKey=new SecretKeySpec(finalKey,keyType);      if (isEncryption) {        cipher.init(Cipher.ENCRYPT_MODE,testKey);      } else {        if (ivSpec == null) {          cipher.init(Cipher.DECRYPT_MODE,testKey);        } else {          cipher.init(Cipher.DECRYPT_MODE,testKey,ivSpec);        }      }      if (streamCache != null) {        final CipherInputStream cis=new CipherInputStream(bis,cipher);        int nextByte;        while (true) {          nextByte=cis.read();          if (nextByte == -1) {            break;          }          streamCache.write(nextByte);        }        cis.close();        streamCache.close();        bis.close();      }      if (data != null) {        data=cipher.doFinal(data);      }    } catch (    final Exception e) {      throw new PdfSecurityException("Exception " + e + " decrypting content");    }  }  if (alwaysReinitCipher) {    cipher=null;  }  return data;}  }
class C{  public void testMergeOneServletIntoDocumentWithSameServlet() throws Exception {  String srcXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s1"));}  }
class C{  @Override public T selectPlan(final HasPlansAndId<T,I> person){  if (person.getPlans().size() == 0) {    return null;  }  int index=(int)(MatsimRandom.getRandom().nextDouble() * person.getPlans().size());  return person.getPlans().get(index);}  }
class C{  @Override public Dimension preferredLayoutSize(Container target){  return layoutSize(target,true);}  }
class C{  public final void removeAllHelperTexts(@NonNull final Collection<CharSequence> helperTexts){  ensureNotNull(helperTexts,"The collection may not be null");  for (  CharSequence helperText : helperTexts) {    removeHelperText(helperText);  }}  }
class C{  public void listBattle(final List<String> steps){  if (!SwingUtilities.isEventDispatchThread()) {    throw new IllegalStateException("Not in dispatch thread");  }synchronized (m_mutex) {    m_listModel.removeAllElements();    final Iterator<String> iter=steps.iterator();    while (iter.hasNext()) {      m_listModel.addElement(iter.next());    }    m_listSelectionModel.hiddenSetSelectionInterval(0);    if (!steps.contains(m_targetStep)) {      m_targetStep=null;    }  }  validate();}  }
class C{  public HeapRowIterator(final String table,final String whereColumn,final Pattern wherePattern) throws IOException {  this.whereColumn=whereColumn;  this.whereValue=null;  this.wherePattern=wherePattern == null || wherePattern.toString().isEmpty() ? null : wherePattern;  final BEncodedHeap heap=getHeap(table);  this.i=heap.iterator();}  }
class C{  public static int[] grabPixels(PixelGrabber pg){  try {    pg.startGrabbing();    boolean grabbed=pg.grabPixels();    if (!grabbed) {      logger.fine("Error in loading image, no pixels grabbed");      return null;    }    int framebitCount=0;    while (true) {      int status=pg.getStatus();      if (logger.isLoggable(Level.FINE)) {        logger.fine("pixelgrabber status = " + status);      }      if ((status & ImageObserver.ALLBITS) != 0) {        break;      }      if ((status & ImageObserver.FRAMEBITS) != 0) {        if (framebitCount < 20) {          framebitCount++;        }        break;      }      if ((status & ImageObserver.ERROR) != 0) {        if (logger.isLoggable(Level.FINE)) {          logger.fine("Error in loading image, ImageObserver error");        }        return null;      }      Thread.sleep(100);    }    return (int[])pg.getPixels();  } catch (  InterruptedException ie) {    return null;  }}  }
class C{  void handleServiceDisconnected(){  Log.e(TAG,"handleServiceDisconnected()");synchronized (mServiceRunningLock) {    mService=null;    mServiceRunning=false;  }  mBoundToService=false;  mIsRunning=false;}  }
class C{  protected Report reportAll(List<TaskStats> taskStats){  String longestOp=longestOp(taskStats);  boolean first=true;  StringBuilder sb=new StringBuilder();  sb.append(tableTitle(longestOp));  sb.append(newline);  int reported=0;  for (  final TaskStats stat : taskStats) {    if (stat.getElapsed() >= 0) {      if (!first) {        sb.append(newline);      }      first=false;      String line=taskReportLine(longestOp,stat);      reported++;      if (taskStats.size() > 2 && reported % 2 == 0) {        line=line.replaceAll("   "," - ");      }      sb.append(line);    }  }  String reptxt=(reported == 0 ? "No Matching Entries Were Found!" : sb.toString());  return new Report(reptxt,reported,reported,taskStats.size());}  }
class C{  private float popFloat() throws PDFParseException {  Object obj=stack.pop();  if (obj instanceof Double) {    return ((Double)obj).floatValue();  } else {    throw new PDFParseException("Expected a number here.");  }}  }
class C{  private void fillBuffer(long amount){  fillBuffer(amount,false);}  }
class C{  public static double abs(double d){  return (d < 0) ? -d : d;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if ((null == obj) || (getClass() != obj.getClass())) {    return false;  }  final Building other=(Building)obj;  return (id == other.id);}  }
class C{  public ZipOutputStream(OutputStream out,Charset charset){  super(out,new Deflater(Deflater.DEFAULT_COMPRESSION,true));  if (charset == null)   throw new NullPointerException("charset is null");  this.zc=ZipCoder.get(charset);  usesDefaultDeflater=true;}  }
class C{  public boolean isAfter(ReadableInstant instant){  long instantMillis=DateTimeUtils.getInstantMillis(instant);  return isAfter(instantMillis);}  }
class C{  protected void showPalette(){  Layer layer=getLayer();  if (layer != null) {    layer.showPalette();  }}  }
class C{  protected void fillResourcesRequirementForBaseContainer(BaseContainer container,Integer containerIndex,PackingPlan packing){  PackingPlan updatedPackingPlan=packing.cloneWithHomogeneousScheduledResource();  Resource maxResourceContainer=updatedPackingPlan.getContainers().iterator().next().getRequiredResource();  double cpu=0;  double disk=0;  double mem=0;  for (  PackingPlan.ContainerPlan cp : packing.getContainers()) {    Resource containerResource=cp.getRequiredResource();    cpu=Math.max(cpu,containerResource.getCpu());    disk=Math.max(disk,containerResource.getDisk());    mem=Math.max(mem,containerResource.getRam());  }  container.cpu=maxResourceContainer.getCpu();  container.diskInMB=maxResourceContainer.getDisk() / Constants.MB;  container.memInMB=maxResourceContainer.getRam() / Constants.MB;  container.ports=SchedulerUtils.PORTS_REQUIRED_FOR_EXECUTOR;}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  private void typeInWebBar(String url){  onView(withId(R.id.website_input)).perform(click()).perform(typeText(url + "\n"));}  }
class C{  @Override public boolean sourceRequested(){  return fetchSourceContext != null && fetchSourceContext.fetchSource();}  }
class C{  public static LinkedHashMap<String,String> createMapWithDisplayingColumns(String valueColumn,String displayColumns){  valueColumn=valueColumn.trim();  LinkedHashMap<String,String> columns=new LinkedHashMap<String,String>();  columns.put(toSafeColumnName(valueColumn),valueColumn);  if (displayColumns != null && displayColumns.trim().length() > 0) {    displayColumns=displayColumns.trim();    List<String> commaSplitParts=splitTrimmed(displayColumns,COLUMN_SEPARATOR,FALLBACK_COLUMN_SEPARATOR);    for (    String commaSplitPart : commaSplitParts) {      columns.put(toSafeColumnName(commaSplitPart),commaSplitPart);    }  }  return columns;}  }
class C{  public Builder bkConf(ServerConfiguration bkConf){  this._bkConf=bkConf;  return this;}  }
class C{  public void highlight(OMGraphic omg){  omg.select();  omg.generate(getProjection());  repaint();}  }
class C{  static private void assertEachNamedSubqueryIsUsed(final NamedSubqueriesNode namedSubqueries,final NamedSubqueryInclude[] allIncludes){  final Set<String> namedSets=new LinkedHashSet<String>();  for (  NamedSubqueryRoot aNamedSubquery : namedSubqueries) {    final String namedSet=aNamedSubquery.getName();    if (!namedSets.add(namedSet)) {      throw new RuntimeException("NamedSet declared more than once: " + namedSet);    }    if (namedSet == null || namedSet.trim().length() == 0)     throw new RuntimeException("Missing or illegal name for named subquery.");    final List<NamedSubqueryInclude> includes=new LinkedList<NamedSubqueryInclude>();    for (    NamedSubqueryInclude anInclude : allIncludes) {      if (namedSet.equals(anInclude.getName())) {        includes.add(anInclude);      }    }    if (includes.isEmpty()) {      throw new RuntimeException("Named subquery results are not used by this query: " + namedSet);    }  }}  }
class C{  String readContentFromServiceTicketMail() throws Exception {  return WebserviceTestBase.getMailReader().getLastMailContentWithSubject(MAIL_SUBJECT_SERVICE_TICKET_EN);}  }
class C{  public void testBug9319() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  boolean doASelect=true;  if (isAdminConnectionConfigured()) {    Connection db2Connection=null;    Connection db1Connection=null;    db2Connection=getAdminConnection();    db1Connection=getAdminConnection();    Statement db1st=db1Connection.createStatement();    Statement db2st=db2Connection.createStatement();    createDatabase(db2st,"db_9319_2");    db2Connection.setCatalog("db_9319_2");    createProcedure(db2st,"COMPROVAR_USUARI","(IN p_CodiUsuari VARCHAR(10),\nIN p_contrasenya VARCHAR(10),\nOUT p_userId INTEGER," + "\nOUT p_userName VARCHAR(30),\nOUT p_administrador VARCHAR(1),\nOUT p_idioma VARCHAR(2))\nBEGIN" + (doASelect ? "\nselect 2;" : "\nSELECT 2 INTO p_administrador;") + "\nEND");    createDatabase(db1st,"db_9319_1");    db1Connection.setCatalog("db_9319_1");    createProcedure(db1st,"COMPROVAR_USUARI","(IN p_CodiUsuari VARCHAR(10),\nIN p_contrasenya VARCHAR(10),\nOUT p_userId INTEGER," + "\nOUT p_userName VARCHAR(30),\nOUT p_administrador VARCHAR(1))\nBEGIN" + (doASelect ? "\nselect 1;" : "\nSELECT 1 INTO p_administrador;") + "\nEND");    CallableStatement cstmt=db2Connection.prepareCall("{ call COMPROVAR_USUARI(?, ?, ?, ?, ?, ?) }");    cstmt.setString(1,"abc");    cstmt.setString(2,"def");    cstmt.registerOutParameter(3,java.sql.Types.INTEGER);    cstmt.registerOutParameter(4,java.sql.Types.VARCHAR);    cstmt.registerOutParameter(5,java.sql.Types.VARCHAR);    cstmt.registerOutParameter(6,java.sql.Types.VARCHAR);    cstmt.execute();    if (doASelect) {      this.rs=cstmt.getResultSet();      assertTrue(this.rs.next());      assertEquals(2,this.rs.getInt(1));    } else {      assertEquals(2,cstmt.getInt(5));    }    cstmt=db1Connection.prepareCall("{ call COMPROVAR_USUARI(?, ?, ?, ?, ?, ?) }");    cstmt.setString(1,"abc");    cstmt.setString(2,"def");    cstmt.registerOutParameter(3,java.sql.Types.INTEGER);    cstmt.registerOutParameter(4,java.sql.Types.VARCHAR);    cstmt.registerOutParameter(5,java.sql.Types.VARCHAR);    try {      cstmt.registerOutParameter(6,java.sql.Types.VARCHAR);      fail("Should've thrown an exception");    } catch (    SQLException sqlEx) {      assertEquals(SQLError.SQL_STATE_ILLEGAL_ARGUMENT,sqlEx.getSQLState());    }    cstmt=db1Connection.prepareCall("{ call COMPROVAR_USUARI(?, ?, ?, ?, ?) }");    cstmt.setString(1,"abc");    cstmt.setString(2,"def");    cstmt.registerOutParameter(3,java.sql.Types.INTEGER);    cstmt.registerOutParameter(4,java.sql.Types.VARCHAR);    cstmt.registerOutParameter(5,java.sql.Types.VARCHAR);    cstmt.execute();    if (doASelect) {      this.rs=cstmt.getResultSet();      assertTrue(this.rs.next());      assertEquals(1,this.rs.getInt(1));    } else {      assertEquals(1,cstmt.getInt(5));    }    String quoteChar=db2Connection.getMetaData().getIdentifierQuoteString();    cstmt=db2Connection.prepareCall("{ call " + quoteChar + db1Connection.getCatalog()+ quoteChar+ "."+ quoteChar+ "COMPROVAR_USUARI"+ quoteChar+ "(?, ?, ?, ?, ?) }");    cstmt.setString(1,"abc");    cstmt.setString(2,"def");    cstmt.registerOutParameter(3,java.sql.Types.INTEGER);    cstmt.registerOutParameter(4,java.sql.Types.VARCHAR);    cstmt.registerOutParameter(5,java.sql.Types.VARCHAR);    cstmt.execute();    if (doASelect) {      this.rs=cstmt.getResultSet();      assertTrue(this.rs.next());      assertEquals(1,this.rs.getInt(1));    } else {      assertEquals(1,cstmt.getInt(5));    }  }}  }
class C{  public VALUE remove(long key){  LongEntry<VALUE> e=removeEntryForKey(key);  return (e == null ? null : e.value);}  }
class C{  String toString(int indentFactor,int indent) throws JSONException {  int i;  int n=length();  if (n == 0) {    return "{}";  }  Iterator<String> keys=keys();  StringBuffer sb=new StringBuffer("{");  int newindent=indent + indentFactor;  Object o;  if (n == 1) {    o=keys.next();    sb.append(quote(o.toString()));    sb.append(": ");    sb.append(valueToString(this.myHashMap.get(o),indentFactor,indent));  } else {    while (keys.hasNext()) {      o=keys.next();      if (sb.length() > 1) {        sb.append(",\n");      } else {        sb.append('\n');      }      for (i=0; i < newindent; i+=1) {        sb.append(' ');      }      sb.append(quote(o.toString()));      sb.append(": ");      sb.append(valueToString(this.myHashMap.get(o),indentFactor,newindent));    }    if (sb.length() > 1) {      sb.append('\n');      for (i=0; i < indent; i+=1) {        sb.append(' ');      }    }  }  sb.append('}');  return sb.toString();}  }
class C{  public void runCheck(){  AbstractPlausibilityWarning.setNetwork(network);  for (  TransitLine transitLine : this.schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      Double directionChangeThreshold=thresholds.get(transitRoute.getTransportMode());      Iterator<TransitRouteStop> stopsIterator=transitRoute.getStops().iterator();      List<Link> links=NetworkTools.getLinksFromIds(network,getTransitRouteLinkIds(transitRoute));      Map<Node,Tuple<Link,Link>> nodesInRoute=new HashMap<>();      Set<List<Id<Link>>> loops=new HashSet<>();      TransitRouteStop previousStop=stopsIterator.next();      TransitRouteStop nextStop=stopsIterator.next();      double ttActual=0;      double departTime=previousStop.getDepartureOffset();      for (int i=0; i < links.size() - 2; i++) {        Link linkFrom=links.get(i);        Link linkTo=links.get(i + 1);        ttActual+=linkFrom.getLength() / linkFrom.getFreespeed();        if (nextStop.getStopFacility().getLinkId().equals(linkTo.getId())) {          double ttSchedule=nextStop.getArrivalOffset() - departTime;          if (ttActual > ttSchedule) {            PlausibilityWarning warning=new TravelTimeWarning(transitLine,transitRoute,previousStop,nextStop,ttActual,ttSchedule);            addWarningToContainers(warning);          }          ttActual=0;          previousStop=nextStop;          departTime=previousStop.getDepartureOffset();          if (!nextStop.equals(transitRoute.getStops().get(transitRoute.getStops().size() - 1))) {            nextStop=stopsIterator.next();          }        }        Tuple<Link,Link> tuple=nodesInRoute.put(linkFrom.getToNode(),new Tuple<>(linkFrom,linkTo));        if (tuple != null && !linkFrom.equals(tuple.getSecond())) {          loops.add(ScheduleTools.getLoopSubRouteLinkIds(transitRoute,tuple.getSecond().getId(),linkFrom.getId()));        }        if (directionChangeThreshold != null) {          double angleDiff=CoordTools.getAzimuthDiff(linkFrom,linkTo);          if (Math.abs(angleDiff) > directionChangeThreshold && linkFrom.getLength() > 0 && linkTo.getLength() > 0 && angleDiff != PI) {            PlausibilityWarning warning=new DirectionChangeWarning(transitLine,transitRoute,linkFrom,linkTo,directionChangeThreshold,angleDiff);            addWarningToContainers(warning);          }        }      }      Set<List<Id<Link>>> subsetLoops=new HashSet<>();      for (      List<Id<Link>> loop1 : loops) {        for (        List<Id<Link>> loop2 : loops) {          if (!loop1.equals(loop2) && MiscUtils.listIsSubset(loop1,loop2)) {            subsetLoops.add(loop1);          }        }      }      for (      List<Id<Link>> loop : loops) {        if (!subsetLoops.contains(loop)) {          PlausibilityWarning warning=new LoopWarning(transitLine,transitRoute,loop);          addWarningToContainers(warning);        }      }    }  }}  }
class C{  protected void EMIT_Compare(Instruction s,ConditionOperand cond,Operand val1,Operand val2){  if (getCMP_needsSwap(cond)) {    Operand temp=val1;    val2=val1;    val1=temp;  }switch (cond.value) {case ConditionOperand.CARRY_FROM_ADD:case ConditionOperand.NO_CARRY_FROM_ADD:case ConditionOperand.OVERFLOW_FROM_ADD:case ConditionOperand.NO_OVERFLOW_FROM_ADD:{      RegisterOperand temp=regpool.makeTempInt();      EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp,val1.copy())));      EMIT(MIR_BinaryAcc.mutate(s,IA32_ADD,temp.copyRO(),val2));      break;    }case ConditionOperand.BIT_TEST:case ConditionOperand.NO_BIT_TEST:case ConditionOperand.RBIT_TEST:case ConditionOperand.NO_RBIT_TEST:  if (val2 instanceof MemoryOperand) {    RegisterOperand temp=regpool.makeTempInt();    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp,val2.copy())));    val2=temp;  }EMIT(MIR_Compare.mutate(s,IA32_BT,val1.copy(),val2.copy()));break;case ConditionOperand.OVERFLOW_FROM_MUL:case ConditionOperand.NO_OVERFLOW_FROM_MUL:{RegisterOperand temp=regpool.makeTempInt();EMIT(CPOS(s,MIR_Move.create(IA32_MOV,temp,val1.copy())));EMIT(MIR_BinaryAcc.mutate(s,IA32_IMUL2,temp.copyRO(),val2));break;}default :EMIT(MIR_Compare.mutate(s,IA32_CMP,val1.copy(),val2.copy()));break;}}  }
class C{  public Cases<T,R> append(final int index,final Case<T,R> pattern){  return this.withCases(cases.plus(index,pattern));}  }
class C{  Object processENUM(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  AVT avt=null;  if (getSupportsAVT()) {    try {      avt=new AVT(handler,uri,name,rawName,value,owner);      if (!avt.isSimple())       return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  }  int retVal=this.getEnum(value);  if (retVal == StringToIntTable.INVALID_KEY) {    StringBuffer enumNamesList=getListOfEnums();    handleError(handler,XSLTErrorResources.INVALID_ENUM,new Object[]{name,value,enumNamesList.toString()},null);    return null;  }  if (getSupportsAVT())   return avt; else   return new Integer(retVal);}  }
class C{  public void testBug69298() throws Exception {  if (Util.isJdbc4()) {    return;  }  Connection testConn;  createFunction("testBug69298_func","(param_func INT) RETURNS INT COMMENT 'testBug69298_func comment' DETERMINISTIC RETURN 1");  createProcedure("testBug69298_proc","(IN param_proc INT) COMMENT 'testBug69298_proc comment' SELECT 1");  assertFalse("Property useInformationSchema should be false",((ConnectionProperties)this.conn).getUseInformationSchema());  assertTrue("Property getProceduresReturnsFunctions should be true",((ConnectionProperties)this.conn).getGetProceduresReturnsFunctions());  checkGetProceduresForBug69298("Std. Connection MetaData",this.conn);  checkGetProcedureColumnsForBug69298("Std. Connection MetaData",this.conn);  testConn=getConnectionWithProps("useInformationSchema=true");  assertTrue("Property useInformationSchema should be true",((ConnectionProperties)testConn).getUseInformationSchema());  assertTrue("Property getProceduresReturnsFunctions should be true",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkGetProceduresForBug69298("Prop. useInfoSchema(1) MetaData",testConn);  checkGetProcedureColumnsForBug69298("Prop. useInfoSchema(1) MetaData",testConn);  testConn.close();  testConn=getConnectionWithProps("getProceduresReturnsFunctions=false");  assertFalse("Property useInformationSchema should be false",((ConnectionProperties)testConn).getUseInformationSchema());  assertFalse("Property getProceduresReturnsFunctions should be false",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkGetProceduresForBug69298("Prop. getProcRetFunc(0) MetaData",testConn);  checkGetProcedureColumnsForBug69298("Prop. getProcRetFunc(0) MetaData",testConn);  testConn.close();  testConn=getConnectionWithProps("useInformationSchema=true,getProceduresReturnsFunctions=false");  assertTrue("Property useInformationSchema should be true",((ConnectionProperties)testConn).getUseInformationSchema());  assertFalse("Property getProceduresReturnsFunctions should be false",((ConnectionProperties)testConn).getGetProceduresReturnsFunctions());  checkGetProceduresForBug69298("Prop. useInfoSchema(1) + getProcRetFunc(0) MetaData",testConn);  checkGetProcedureColumnsForBug69298("Prop. useInfoSchema(1) + getProcRetFunc(0) MetaData",testConn);  testConn.close();}  }
class C{  public static final boolean isSegmentNearPolyRegion(Geo s1,Geo s2,GeoArray r,double near){  return isSegmentNearPoly(s1,s2,r,near) != null || isPointInPolygon(s1,r);}  }
class C{  protected void onMiss(Object readerCoreKey,Query query){  assert lock.isHeldByCurrentThread();  assert query != null;  missCount+=1;}  }
class C{  public static boolean isCompatibleTypes(JType from,JType to){  if (from == to) {    return true;  }  JPrimitiveType primitiveFrom=from.isPrimitive();  if (primitiveFrom != null) {    return primitiveFrom.getQualifiedBoxedSourceName().equals(to.getQualifiedSourceName());  }  JPrimitiveType primitiveTo=to.isPrimitive();  if (primitiveTo != null) {    return primitiveTo.getQualifiedBoxedSourceName().equals(from.getQualifiedSourceName());  }  JClassType classOrInterfaceFrom=from.isClassOrInterface();  JClassType classOrInterfaceTo=to.isClassOrInterface();  if (classOrInterfaceFrom != null && classOrInterfaceTo != null) {    return classOrInterfaceFrom.isAssignableTo(classOrInterfaceTo);  }  return false;}  }
class C{  public static JSONObject PostForJson(String uriStr,String deviceBssid,JSONObject json,HeaderPair... headers){  return MeshCommunicationUtils.HttpPost(uriStr,deviceBssid,json,headers);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TYPE_ALIAS__TYPE:    return basicGetType() != null;case TypesPackage.TYPE_ALIAS__TYPE_SPECIFIER:  return typeSpecifier != null;case TypesPackage.TYPE_ALIAS__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case TypesPackage.TYPE_ALIAS__ANNOTATIONS:return annotations != null && !annotations.isEmpty();case TypesPackage.TYPE_ALIAS__ID:return ID_EDEFAULT == null ? getId() != null : !ID_EDEFAULT.equals(getId());case TypesPackage.TYPE_ALIAS__CONSTRAINT:return constraint != null && !constraint.isEmpty();case TypesPackage.TYPE_ALIAS__ABSTRACT:return abstract_ != ABSTRACT_EDEFAULT;case TypesPackage.TYPE_ALIAS__VISIBLE:return visible != VISIBLE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private static void testSwingProperties(){  long start=System.currentTimeMillis();  for (  Class type : TYPES) {    try {      Object bean=Beans.instantiate(type.getClassLoader(),type.getName());      JComponent comp=(JComponent)bean;      for (int k=0; k < NUM_LISTENERS; k++) {        comp.addPropertyChangeListener(new PropertyListener());      }      for (      PropertyDescriptor pd : getPropertyDescriptors(type)) {        if (pd.isBound()) {          if (DEBUG) {            System.out.println("Bound property found: " + pd.getName());          }          Method read=pd.getReadMethod();          Method write=pd.getWriteMethod();          try {            write.invoke(bean,getValue(pd.getPropertyType(),read.invoke(bean)));          } catch (          Exception ex) {            if (DEBUG) {              System.out.println("Reflective method invocation Exception for " + type + " : "+ ex.getMessage());            }          }        }      }    } catch (    Exception ex) {      if (DEBUG) {        System.out.println("Exception for " + type.getName() + " : "+ ex.getMessage());      }    }  }  System.out.println("Exec time (ms): " + (System.currentTimeMillis() - start));}  }
class C{  public static Method publish(){  return create(PUBLISH);}  }
class C{  public CImage(){  m_image=Adempiere.getImageLogo();  tracker.addImage(m_image,0);}  }
class C{  public static org.oscm.vo.LdapProperties convertToApi(org.oscm.internal.vo.LdapProperties oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.LdapProperties newVO=new org.oscm.vo.LdapProperties();  newVO.setSettings(convertToApiSetting(oldVO.getSettings()));  return newVO;}  }
class C{  public int size(){  return 5;}  }
class C{  public MiniDrawer withOnMiniDrawerItemLongClickListener(BaseDrawerAdapter.OnLongClickListener onMiniDrawerItemLongClickListener){  this.mOnMiniDrawerItemLongClickListener=onMiniDrawerItemLongClickListener;  return this;}  }
class C{  private InterfaceMethodRefConstant parseInterfaceMethodRefConstant(int index) throws IOException {  int classIndex=readShort();  int nameAndTypeIndex=readShort();  return new InterfaceMethodRefConstant(_class.getConstantPool(),index,classIndex,nameAndTypeIndex);}  }
class C{  protected void drawVerticalLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){  ValueAxis axis=getDomainAxis();  if (getOrientation() == PlotOrientation.HORIZONTAL) {    axis=getRangeAxis();  }  if (axis.getRange().contains(value)) {    double xx=axis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);    Line2D line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());    g2.setStroke(stroke);    g2.setPaint(paint);    g2.draw(line);  }}  }
class C{  @Override public void seekToUs(long positionUs){  Log.d(TAG,"seekToUs(pos=" + positionUs + "): --> <--");  if (downstreamPositionUs == positionUs) {    return;  }  downstreamPositionUs=positionUs;  for (int i=0; i < pendingDiscontinuities.length; i++) {    pendingDiscontinuities[i]=true;  }}  }
class C{  public static void main(String[] args) throws Exception {  Options options=new Options();  Option helpOpts=OptionBuilder.withArgName("help").withDescription("show this help message").create("help");  Option webGraphOpts=OptionBuilder.withArgName("webgraphdb").hasArg().withDescription("the webgraphdb to use").create("webgraphdb");  Option urlOpts=OptionBuilder.withArgName("url").hasOptionalArg().withDescription("the url to dump").create("url");  options.addOption(helpOpts);  options.addOption(webGraphOpts);  options.addOption(urlOpts);  CommandLineParser parser=new GnuParser();  try {    CommandLine line=parser.parse(options,args);    if (line.hasOption("help") || !line.hasOption("webgraphdb") || !line.hasOption("url")) {      HelpFormatter formatter=new HelpFormatter();      formatter.printHelp("WebGraphReader",options);      return;    }    String webGraphDb=line.getOptionValue("webgraphdb");    String url=line.getOptionValue("url");    NodeReader reader=new NodeReader(NutchConfiguration.create());    reader.dumpUrl(new Path(webGraphDb),url);    return;  } catch (  Exception e) {    e.printStackTrace();    return;  }}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public GridClientTopology(GridClientConfiguration cfg){  metricsCache=cfg.isEnableMetricsCache();  attrCache=cfg.isEnableAttributesCache();  prot=cfg.getProtocol();  routerAddrs=(!cfg.getRouters().isEmpty() && cfg.getServers().isEmpty()) ? new HashSet<>(cfg.getRouters()) : null;}  }
class C{  public static int firstVertex(int L,int K,int i){  int base=1;  int increment=0;  for (int j=0; j < L / 2; j++) {    if (j == i) {      return base;    }    base+=K + increment;    increment+=4;  }  for (int j=L / 2; j < L; j++) {    if (j == i) {      return base;    }    increment-=4;    base+=K + increment;  }  return base;}  }
class C{  public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  public final static float distance(int x1,int y1,int x2,int y2){  double xdiff=x2 - x1;  double ydiff=y2 - y1;  return (float)Math.sqrt((xdiff * xdiff + ydiff * ydiff));}  }
class C{  public ModifyMonitoredItemsResponse clone(){  ModifyMonitoredItemsResponse result=new ModifyMonitoredItemsResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (Results != null) {    result.Results=new MonitoredItemModifyResult[Results.length];    for (int i=0; i < Results.length; i++)     result.Results[i]=Results[i].clone();  }  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public void insert(final AbstractInsnNode insn){  ++size;  if (first == null) {    first=insn;    last=insn;  } else {    first.prev=insn;    insn.next=first;  }  first=insn;  cache=null;  insn.index=0;}  }
class C{  static boolean pairDiff(int ar[],int x,Map<Integer,Integer> map){  for (int i=0; i < ar.length; i++) {    if (map.containsKey(x + ar[i])) {      return true;    }    map.put(ar[i],1);  }  return false;}  }
class C{  public int numDocs(Query a,Query b) throws IOException {  Query absA=QueryUtils.getAbs(a);  Query absB=QueryUtils.getAbs(b);  DocSet positiveA=getPositiveDocSet(absA);  DocSet positiveB=getPositiveDocSet(absB);  if (a == absA) {    if (b == absB)     return positiveA.intersectionSize(positiveB);    return positiveA.andNotSize(positiveB);  }  if (b == absB)   return positiveB.andNotSize(positiveA);  DocSet all=getLiveDocs();  return all.andNotSize(positiveA.union(positiveB));}  }
class C{  public void loadRotate(float rot,float x,float y,float z){  float c, s;  mMat[3]=0;  mMat[7]=0;  mMat[11]=0;  mMat[12]=0;  mMat[13]=0;  mMat[14]=0;  mMat[15]=1;  rot*=(float)(java.lang.Math.PI / 180.0f);  c=(float)java.lang.Math.cos(rot);  s=(float)java.lang.Math.sin(rot);  float len=(float)java.lang.Math.sqrt(x * x + y * y + z * z);  if (!(len != 1)) {    float recipLen=1.f / len;    x*=recipLen;    y*=recipLen;    z*=recipLen;  }  float nc=1.0f - c;  float xy=x * y;  float yz=y * z;  float zx=z * x;  float xs=x * s;  float ys=y * s;  float zs=z * s;  mMat[0]=x * x * nc + c;  mMat[4]=xy * nc - zs;  mMat[8]=zx * nc + ys;  mMat[1]=xy * nc + zs;  mMat[5]=y * y * nc + c;  mMat[9]=yz * nc - xs;  mMat[2]=zx * nc - ys;  mMat[6]=yz * nc + xs;  mMat[10]=z * z * nc + c;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof CenterListener) {    addCenterListener((CenterListener)someObj);  }}  }
class C{  private void executePreparedStatement(OneRowChange oneRowChange,StringBuffer stmt,ArrayList<ColumnSpec> spec,ArrayList<ArrayList<ColumnVal>> values,String sourceDbmsType) throws ApplierException {  PreparedStatement prepStatement=null;  try {    String statement=stmt.toString();    if (logger.isDebugEnabled())     logger.debug("Statement is " + statement.substring(1,Math.min(statement.length(),500)));    prepStatement=conn.prepareStatement(statement);    int bindLoc=1;    for (    ArrayList<ColumnVal> oneRowValues : values) {      bindLoc=bindColumnValues(prepStatement,oneRowValues,bindLoc,spec,false,sourceDbmsType);    }    try {      prepStatement.executeUpdate();    } catch (    SQLWarning e) {      String msg="While applying SQL event:\n" + statement + "\nWarning: "+ e.getMessage();      logger.warn(msg);    }  } catch (  SQLException e) {    ApplierException applierException=new ApplierException(e);    applierException.setExtraData(logFailedRowChangeSQL(stmt,oneRowChange));    throw applierException;  } finally {    if (prepStatement != null)     try {      prepStatement.close();    } catch (    SQLException e) {    }  }}  }
class C{  public LensTranslatingGraphMousePlugin(){  this(MouseEvent.BUTTON1_MASK);}  }
class C{  public static Method findGetMethod(Field field,boolean throwExceptions){  String methodName=methodFromField(field,"get");  Method fieldGetMethod;  try {    fieldGetMethod=field.getDeclaringClass().getMethod(methodName);  } catch (  Exception e) {    if (throwExceptions) {      throw new IllegalArgumentException("Could not find appropriate get method for " + field);    } else {      return null;    }  }  if (fieldGetMethod.getReturnType() != field.getType()) {    if (throwExceptions) {      throw new IllegalArgumentException("Return type of get method " + methodName + " does not return "+ field.getType());    } else {      return null;    }  }  return fieldGetMethod;}  }
class C{  private void installDefaultTransferHandlerIfNecessary(){  if (getTransferHandler() == null) {    if (defaultTransferHandler == null) {      defaultTransferHandler=new DefaultTransferHandler();    }    setTransferHandler(defaultTransferHandler);  }}  }
class C{  public MACDDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  public static SlidrInterface attach(Activity activity){  return attach(activity,-1,-1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.826 -0500",hash_original_method="F67C85082F69BDA511360EC02B0C3E98",hash_generated_method="A02A009C4F33FFC78A7CF1888F57183E") public boolean selectNextArticle() throws IOException {  return selectNextArticle(null);}  }
class C{  public boolean updateStoragePoolObjectFromVNXVolumeViewIndication(){  return retriveAndProcessIndicationAttributeValues(CIMConstants.VOLUME_VIEW_INDICATION_FREE_CAPACITY,CIMConstants.VOLUME_VIEW_INDICATION_POOL_NAME,CIMConstants.VOLUME_VIEW_INDICATION_TOTAL_CAPACITY,null);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isMemorySnapshotsSupported(){  return memorySnapshotsSupported;}  }
class C{  public int findKeyStoreIndex(KeyStore keyStore){  for (int i=0; i < histories.size(); i++) {    if (keyStore.equals(histories.get(i).getCurrentState().getKeyStore())) {      return i;    }  }  return -1;}  }
class C{  public void deleteBuffers(){  if (this.geometryBuffer != null)   this.geometryBuffer.deleteFramebuffer();  if (this.geometryDepthBuffer != null)   this.geometryDepthBuffer.deleteBuffer();}  }
class C{  public static PathImpl lookup(String url){  PathImpl pwd=getPwd();  if (!url.startsWith("/")) {    return pwd.lookup(url,null);  } else {    return PWD.lookup(url,null);  }}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  @Override public boolean shouldVisit(Page referringPage,WebURL url){  String href=url.getURL().toLowerCase();  if (IMAGE_EXTENSIONS.matcher(href).matches()) {    return false;  }  return true;}  }
class C{  public SimpleString concat(final String toAdd){  return concat(new SimpleString(toAdd));}  }
class C{  public BucketItem(final String n,final String p,final String taken,int i){  super(n,p,taken,0);  id=i;}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testCreateInstalledLocalContainerWithSystemPropertiesSet() throws Exception {  org.codehaus.cargo.maven2.configuration.Container containerElement=setUpContainerElement(new InstalledLocalContainerStub());  Map<String,String> props=new HashMap<String,String>();  props.put("id1","value1");  props.put("id2","value2");  containerElement.setSystemProperties(props);  org.codehaus.cargo.container.InstalledLocalContainer container;  File systemPropertiesFile=File.createTempFile(ConfigurationTest.class.getName(),".properties");  try {    OutputStream outputStream=new FileOutputStream(systemPropertiesFile);    try {      Properties properties=new Properties();      properties.put("id2","foobar");      properties.put("id3","value3");      properties.store(outputStream,null);    }  finally {      outputStream.close();    }    containerElement.setSystemPropertiesFile(systemPropertiesFile);    container=(InstalledLocalContainer)containerElement.createContainer(new StandaloneLocalConfigurationStub("configuration/home"),new NullLogger(),createTestCargoProject("whatever"));  }  finally {    systemPropertiesFile.delete();  }  props.put("id3","value3");  assertEquals(props,container.getSystemProperties());}  }
class C{  public void show(){  if (mNextView == null) {    throw new RuntimeException("setView must have been called");  }  INotificationManager service=getService();  String pkg=mContext.getPackageName();  TN tn=mTN;  tn.mNextView=mNextView;  try {    service.enqueueToast(pkg,tn,mDuration);  } catch (  RemoteException e) {  }}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1650) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  protected final void storeState(){  storedLikelihoodKnown=likelihoodKnown;  storedLogLikelihood=logLikelihood;}  }
class C{  public <T>T with(Closure<T> closure){  return DefaultGroovyMethods.with(null,closure);}  }
class C{  public void visitTypeApply(JCTypeApply tree){  Type owntype=types.createErrorType(tree.type);  Type clazztype=chk.checkClassType(tree.clazz.pos(),attribType(tree.clazz,env));  List<Type> actuals=attribTypes(tree.arguments,env);  if (clazztype.hasTag(CLASS)) {    List<Type> formals=clazztype.tsym.type.getTypeArguments();    if (actuals.isEmpty())     actuals=formals;    if (actuals.length() == formals.length()) {      List<Type> a=actuals;      List<Type> f=formals;      while (a.nonEmpty()) {        a.head=a.head.withTypeVar(f.head);        a=a.tail;        f=f.tail;      }      Type clazzOuter=clazztype.getEnclosingType();      if (clazzOuter.hasTag(CLASS)) {        Type site;        JCExpression clazz=TreeInfo.typeIn(tree.clazz);        if (clazz.hasTag(IDENT)) {          site=env.enclClass.sym.type;        } else         if (clazz.hasTag(SELECT)) {          site=((JCFieldAccess)clazz).selected.type;        } else         throw new AssertionError("" + tree);        if (clazzOuter.hasTag(CLASS) && site != clazzOuter) {          if (site.hasTag(CLASS))           site=types.asOuterSuper(site,clazzOuter.tsym);          if (site == null)           site=types.erasure(clazzOuter);          clazzOuter=site;        }      }      owntype=new ClassType(clazzOuter,actuals,clazztype.tsym);    } else {      if (formals.length() != 0) {        log.error(tree.pos(),"wrong.number.type.args",Integer.toString(formals.length()));      } else {        log.error(tree.pos(),"type.doesnt.take.params",clazztype.tsym);      }      owntype=types.createErrorType(tree.type);    }  }  result=check(tree,owntype,TYP,resultInfo);}  }
class C{  private void handleRequestFailure(long requestId,Throwable error,ThreadContext context){  ByteBuf buffer=channel.alloc().buffer(10).writeByte(RESPONSE).writeLong(requestId).writeByte(FAILURE);  try {    writeError(buffer,error,context);  } catch (  SerializationException e) {    return;  }  channel.writeAndFlush(buffer,channel.voidPromise());}  }
class C{  public void addLine(String line){  int index=line.indexOf(":");  if (index == -1) {    addLenient("",line);  } else {    addLenient(line.substring(0,index),line.substring(index + 1));  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.CONSTRAINT__TYPE:    return getType();case DatatypePackage.CONSTRAINT__CONSTRAINT_VALUES:  return getConstraintValues();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void deleteMusicFolderPath(String folderPath){  String condition=FOLDER_PATH + " = '" + folderPath+ "'";  getDatabase().delete(MUSIC_FOLDERS_TABLE,condition,null);}  }
class C{  protected PrinterIsAcceptingJobs(int value){  super(value);}  }
class C{  public void closeButtonActionPerformed(java.awt.event.ActionEvent ae){  if (profileComboBox.getSelectedItem() != null) {    config.setProfileName(profileComboBox.getSelectedItem().toString());  } else {    config.setProfileName("");  }  config.setLocoAddress(addressSelector.getAddress());  if (rosterSelector.getSelectedRosterEntries().length > 0) {    config.setRosterEntry(rosterSelector.getSelectedRosterEntries()[0]);  } else {    config.setRosterEntry(null);  }  firePropertyChange(CONFIG_PROPERTY,null,config);  dispose();}  }
class C{  public boolean useAddressBracketsEnforcement(){  return false;}  }
class C{  @Override public boolean isLastLayoutedView(int recyclerHeight,View view){  boolean isLastLayoutedView;  if (SHOW_LOGS)   Log.v(TAG,"isLastLaidOutView, recyclerHeight " + recyclerHeight);  int spaceToLeftEdge=view.getLeft();  if (SHOW_LOGS)   Log.v(TAG,"isLastLaidOutView, spaceToLeftEdge " + spaceToLeftEdge);  int spaceToBottomEdge=view.getBottom();  if (SHOW_LOGS)   Log.v(TAG,"isLastLaidOutView, spaceToBottomEdge " + spaceToBottomEdge);  isLastLayoutedView=spaceToLeftEdge <= 0 || spaceToBottomEdge >= recyclerHeight;  if (SHOW_LOGS)   Log.v(TAG,"isLastLaidOutView, " + isLastLayoutedView);  return isLastLayoutedView;}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintProgressBarBorder(context,g,x,y,w,h);}  }
class C{  public void writeStructBegin(TStruct struct) throws TException {  lastField_.push(lastFieldId_);  lastFieldId_=0;}  }
class C{  public static String[] parseTokens(String source,char delimiter){  int numtoken=1;  for (int i=0; i < source.length(); i++) {    if (source.charAt(i) == delimiter)     numtoken++;  }  String list[]=new String[numtoken];  int nextfield=0;  for (int i=0; i < numtoken; i++) {    if (nextfield >= source.length()) {      list[i]="";    } else {      int idx=source.indexOf(delimiter,nextfield);      if (idx == -1)       idx=source.length();      list[i]=source.substring(nextfield,idx);      nextfield=idx + 1;    }  }  return list;}  }
class C{  @HLEFunction(nid=0x2BEFDF23,version=150) public int sceNetApctlGetInfo(int code,TPointer pInfo){  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetApctlGetInfo code=0x%X(%s)",code,getApctlInfoName(code)));  }switch (code) {case PSP_NET_APCTL_INFO_PROFILE_NAME:{      String name=sceUtility.getNetParamName(connectionIndex);      pInfo.setStringNZ(128,name);      if (log.isDebugEnabled()) {        log.debug(String.format("sceNetApctlGetInfo returning Profile name '%s'",name));      }      break;    }case PSP_NET_APCTL_INFO_IP:{    String ip=getLocalHostIP();    pInfo.setStringNZ(16,ip);    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetApctlGetInfo returning IP address '%s'",ip));    }    break;  }case PSP_NET_APCTL_INFO_SSID:{  String ssid=getSSID();  if (ssid == null) {    return -1;  }  pInfo.setStringNZ(SSID_NAME_LENGTH,ssid);  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetApctlGetInfo returning SSID '%s'",ssid));  }  break;}case PSP_NET_APCTL_INFO_SSID_LENGTH:{String ssid=getSSID();if (ssid == null) {  return -1;}pInfo.setValue32(Math.min(ssid.length(),SSID_NAME_LENGTH));break;}case PSP_NET_APCTL_INFO_PRIMDNS:{pInfo.setStringNZ(16,getPrimaryDNS());break;}case PSP_NET_APCTL_INFO_SECDNS:{pInfo.setStringNZ(16,getSecondaryDNS());break;}case PSP_NET_APCTL_INFO_GATEWAY:{pInfo.setStringNZ(16,getGateway());break;}case PSP_NET_APCTL_INFO_SUBNETMASK:{pInfo.setStringNZ(16,getSubnetMask());break;}case PSP_NET_APCTL_INFO_CHANNEL:{int channel=Settings.getInstance().readInt("emu.sysparam.adhocchannel",0);pInfo.setValue8((byte)channel);break;}case PSP_NET_APCTL_INFO_STRENGTH:{pInfo.setValue8((byte)Wlan.getSignalStrenth());break;}case PSP_NET_APCTL_INFO_USE_PROXY:{pInfo.setValue32(false);break;}case PSP_NET_APCTL_INFO_START_BROWSER:{pInfo.setValue32(false);break;}default :{log.warn(String.format("sceNetApctlGetInfo unimplemented code=0x%X(%s)",code,getApctlInfoName(code)));return -1;}}return 0;}  }
class C{  public CascadedTable(Table parent,ColumnProjection colFilter){  this(parent,null,colFilter);}  }
class C{  boolean tryWriteAsHandle(Object obj){  assert obj != null;  int pos=out.position();  BinaryWriterHandles handles0=handles();  int old=handles0.put(obj,pos);  if (old == BinaryWriterHandles.POS_NULL)   return false; else {    out.unsafeEnsure(1 + 4);    out.unsafeWriteByte(GridBinaryMarshaller.HANDLE);    out.unsafeWriteInt(pos - old);    return true;  }}  }
class C{  public static <T>List<T> readCollection(BinaryRawReaderEx reader,@Nullable PlatformReaderClosure<T> readClo){  int cnt=reader.readInt();  List<T> res=new ArrayList<>(cnt);  if (readClo == null) {    for (int i=0; i < cnt; i++)     res.add((T)reader.readObjectDetached());  } else {    for (int i=0; i < cnt; i++)     res.add(readClo.read(reader));  }  return res;}  }
class C{  public final boolean isFinished(){  return mFinished;}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener l){  support.addPropertyChangeListener(l);}  }
class C{  static RouteBuilder websocket(String path){  return builder().websocket(path);}  }
class C{  protected void addKindPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Choice_kind_feature"),getString("_UI_PropertyDescriptor_description","_UI_Choice_kind_feature","_UI_Choice_type"),SGraphPackage.Literals.CHOICE__KIND,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static <V extends NumberVector>V project(V v,long[] selectedAttributes,NumberVector.Factory<V> factory){  int card=BitsUtil.cardinality(selectedAttributes);  if (factory instanceof SparseNumberVector.Factory) {    final SparseNumberVector.Factory<?> sfactory=(SparseNumberVector.Factory<?>)factory;    TIntDoubleHashMap values=new TIntDoubleHashMap(card,1);    for (int d=BitsUtil.nextSetBit(selectedAttributes,0); d >= 0; d=BitsUtil.nextSetBit(selectedAttributes,d + 1)) {      if (v.doubleValue(d) != 0.0) {        values.put(d,v.doubleValue(d));      }    }    @SuppressWarnings("unchecked") V projectedVector=(V)sfactory.newNumberVector(values,card);    return projectedVector;  } else {    double[] newAttributes=new double[card];    int i=0;    for (int d=BitsUtil.nextSetBit(selectedAttributes,0); d >= 0; d=BitsUtil.nextSetBit(selectedAttributes,d + 1)) {      newAttributes[i]=v.doubleValue(d);      i++;    }    return factory.newNumberVector(newAttributes);  }}  }
class C{  @NotNull public Couple<HgRevisionNumber> parents(@NotNull VirtualFile repo,@Nullable FilePath file,@Nullable HgRevisionNumber revision){  final List<HgRevisionNumber> revisions=getRevisions(repo,"parents",file,revision,true);switch (revisions.size()) {case 1:    return Couple.of(revisions.get(0),null);case 2:  return Couple.of(revisions.get(0),revisions.get(1));default :return Couple.of(null,null);}}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException ignored) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  public static int findDisplayedMnemonicIndex(String text,int mnemonic){  if (text == null || mnemonic == '\0') {    return -1;  }  char uc=Character.toUpperCase((char)mnemonic);  char lc=Character.toLowerCase((char)mnemonic);  int uci=text.indexOf(uc);  int lci=text.indexOf(lc);  if (uci == -1) {    return lci;  } else   if (lci == -1) {    return uci;  } else {    return (lci < uci) ? lci : uci;  }}  }
class C{  @JavascriptInterface public void showToast(String toast){  Toast.makeText(mContext,toast,Toast.LENGTH_SHORT).show();}  }
class C{  public static void auditBlock(DbClient dbClient,OperationTypeEnum auditType,boolean operationalStatus,String operationStage,Object... descparams){  AuditLogManager auditMgr=AuditLogManagerFactory.getAuditLogManager();  auditMgr.recordAuditLog(null,null,ControllerUtils.BLOCK_EVENT_SERVICE,auditType,System.currentTimeMillis(),operationalStatus ? AuditLogManager.AUDITLOG_SUCCESS : AuditLogManager.AUDITLOG_FAILURE,operationStage,descparams);}  }
class C{  public boolean addMember(Principal user){  if (groupMembers.contains(user))   return false;  if (group.equals(user.toString()))   throw new IllegalArgumentException();  groupMembers.addElement(user);  return true;}  }
class C{  public void testScriptExceptionThrown() throws ScriptException {  try {    jsEngine.eval("print('Hello, world!'); y=random()/0");    fail("Expected exception not thrown");  } catch (  ScriptException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public void testSetF9(){  boolean f9=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF9(f9);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup3 needs to be implemented if invoked");}  }
class C{  public static <T>Predicate<T> or(Predicate<? super T>... components){  components=components.clone();  int n=components.length;  for (int i=0; i < n; ++i) {    Predicate<? super T> p=components[i];    if (p == ALWAYS_TRUE) {      return alwaysTrue();    }    if (p == ALWAYS_FALSE) {      components[i]=components[n - 1];      --i;      --n;    }  }  if (n == 0) {    return alwaysFalse();  }  if (n != components.length) {    @SuppressWarnings("unchecked") Predicate<? super T>[] newComponents=new Predicate[n];    System.arraycopy(newComponents,0,components,0,n);    components=newComponents;  }  return new OrPredicate<T>(components);}  }
class C{  protected void validateCurrentTimeBetweenSinceUntil(FactoryDto factory) throws BadRequestException {  final PoliciesDto policies=factory.getPolicies();  if (policies == null) {    return;  }  final Long since=policies.getSince() == null ? 0L : policies.getSince();  final Long until=policies.getUntil() == null ? 0L : policies.getUntil();  if (since != 0 && currentTimeMillis() < since) {    throw new BadRequestException(FactoryConstants.ILLEGAL_FACTORY_BY_SINCE_MESSAGE);  }  if (until != 0 && currentTimeMillis() > until) {    throw new BadRequestException(FactoryConstants.ILLEGAL_FACTORY_BY_UNTIL_MESSAGE);  }}  }
class C{  private void typeInsn(final int opcode,final Type type){  mv.visitTypeInsn(opcode,type.getInternalName());}  }
class C{  public void register(Object handler,Class<?> cls,String name){  read().add(cls,XMLSerializationMethodHandler.findReadMethod(handler,"read" + name));  write().add(cls,XMLSerializationMethodHandler.findWriteMethod(handler,"write" + name));}  }
class C{  public final void testValidateContainsOnlyAllowedSpecialCharacters(){  char[] allowedCharacters=new char[]{'-'};  LetterOrNumberValidator characterOrNumberValidator=new LetterOrNumberValidator("foo",Case.LOWERCASE,false,allowedCharacters);  assertTrue(characterOrNumberValidator.validate("----"));}  }
class C{  public PreparedStatementHolder retrieveExtended(String key){  return cache.get(key);}  }
class C{  public void updateBusinessObjectDataStatusIgnoreException(BusinessObjectDataKey businessObjectDataKey,String businessObjectDataStatus){  try {    updateBusinessObjectDataStatus(businessObjectDataKey,businessObjectDataStatus);  } catch (  Exception e) {    LOGGER.warn(e.getMessage(),e);  }}  }
class C{  @Override public void serialize(CumulativeTimeBucket ctb,JsonGenerator jGen,SerializerProvider serializer) throws IOException, JsonProcessingException {  jGen.writeStartObject();  Timestamp ts=new Timestamp(ctb.getStartTimeNs() / 1000000);  jGen.writeStringField("start-time",ts.toString());  jGen.writeStringField("current-time",new Timestamp(System.currentTimeMillis()).toString());  jGen.writeNumberField("total-packets",ctb.getTotalPktCnt());  jGen.writeNumberField("average",ctb.getAverageProcTimeNs());  jGen.writeNumberField("min",ctb.getMinTotalProcTimeNs());  jGen.writeNumberField("max",ctb.getMaxTotalProcTimeNs());  jGen.writeNumberField("std-dev",ctb.getTotalSigmaProcTimeNs());  jGen.writeArrayFieldStart("modules");  for (  OneComponentTime oct : ctb.getModules()) {    serializer.defaultSerializeValue(oct,jGen);  }  jGen.writeEndArray();  jGen.writeEndObject();}  }
class C{  public MqttConfig(String serverURL,String clientId){  options.setServerURIs(new String[]{serverURL});  this.clientId=clientId;}  }
class C{  public boolean isStatic(){  return kind.isStatic();}  }
class C{  public void mergeLabel(Label label2){  for (int i=0; i < 2; i++) {    int loc=computeMergedLocation(label2,i);    int thisLoc=label.getLocation(i);    if (thisLoc == Location.NONE)     label.setLocation(i,loc);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrnextsiblingnull.class,args);}  }
class C{  public static final CButton createResetButton(String text){  AppsAction aa=new AppsAction(A_RESET,null,text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  public void clear(){  BasicBlock b;  for (  BasicBlock basicBlock : q) {    b=(basicBlock);    b.inq=false;  }  q.clear();}  }
class C{  @Override public Parcelable onSaveInstanceState(){  Parcelable superState=super.onSaveInstanceState();  SavedState ss=new SavedState(superState);  ss.canSlide=this.canSlide;  ss.runAnimationOnFinishInflate=this.runAnimationOnFinishInflate;  ss.horizontalDragRange=this.horizontalDragRange;  ss.verticalDragRange=this.verticalDragRange;  ss.dragPosition=this.dragPosition;  ss.dragLimit=this.dragLimit;  ss.tension=this.tension;  ss.friction=this.friction;  return ss;}  }
class C{  public boolean removeClient(LaunchConfiguration lc){  assert (lc != null);synchronized (mapLock) {    return (launchConfigurationToDevModeClient.remove(lc) != null);  }}  }
class C{  public static void checkNull(Object o){  if (o != null)   error();}  }
class C{  public boolean isStatic(){  return this == STATIC;}  }
class C{  static BigDecimal bomQty(int p_M_Product_ID,int p_M_Warehouse_ID,int p_M_Locator_ID,String p_what) throws SQLException {  int M_Warehouse_ID=p_M_Warehouse_ID;  if (M_Warehouse_ID == 0) {    if (p_M_Locator_ID == 0)     return Adempiere.ZERO; else {      String sql="SELECT M_Warehouse_ID " + "FROM M_Locator " + "WHERE M_Locator_ID=?";      M_Warehouse_ID=Adempiere.getSQLValue(sql,p_M_Locator_ID);    }  }  if (M_Warehouse_ID == 0 || M_Warehouse_ID == -1)   return Adempiere.ZERO;  boolean isBOM=false;  String ProductType=null;  boolean isStocked=false;  String sql="SELECT IsBOM, ProductType, IsStocked " + "FROM M_Product " + "WHERE M_Product_ID=?";  PreparedStatement pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_M_Product_ID);  ResultSet rs=pstmt.executeQuery();  if (rs.next()) {    isBOM="Y".equals(rs.getString(1));    ProductType=rs.getString(2);    isStocked="Y".equals(rs.getString(3));  }  rs.close();  pstmt.close();  if (ProductType == null)   return Adempiere.ZERO;  if (!isBOM && (!ProductType.equals("I") || !isStocked))   return UNLIMITED;  if (isStocked)   return getStorageQty(p_M_Product_ID,M_Warehouse_ID,p_M_Locator_ID,p_what);  BigDecimal quantity=UNLIMITED;  BigDecimal productQuantity=null;  sql="SELECT bl.M_Product_ID , CASE WHEN bl.IsQtyPercentage = 'N' THEN bl.QtyBOM ELSE bl.QtyBatch / 100 END AS Qty , p.IsBOM , p.IsStocked, p.ProductType FROM PP_Product_BOM b " + "INNER JOIN M_Product p ON (p.M_Product_ID=b.M_Product_ID) " + "INNER JOIN PP_Product_BOMLine bl ON (bl.PP_Product_BOM_ID=b.PP_Product_BOM_ID) "+ "WHERE b.M_Product_ID = ?";  pstmt=Adempiere.prepareStatement(sql);  pstmt.setInt(1,p_M_Product_ID);  rs=pstmt.executeQuery();  while (rs.next()) {    int M_ProductBOM_ID=rs.getInt(1);    BigDecimal bomQty=rs.getBigDecimal(2);    isBOM="Y".equals(rs.getString(3));    isStocked="Y".equals(rs.getString(4));    ProductType=rs.getString(5);    if (ProductType.equals("I") && isStocked) {      productQuantity=getStorageQty(M_ProductBOM_ID,M_Warehouse_ID,p_M_Locator_ID,p_what);      int uomPrecision=getUOMPrecision(M_ProductBOM_ID);      productQuantity=productQuantity.divide(bomQty,uomPrecision,BigDecimal.ROUND_HALF_UP);      if (productQuantity.compareTo(quantity) < 0)       quantity=productQuantity;    } else     if (isBOM) {      productQuantity=bomQty(M_ProductBOM_ID,M_Warehouse_ID,p_M_Locator_ID,p_what);      if (productQuantity.compareTo(quantity) < 0)       quantity=productQuantity;    }  }  rs.close();  pstmt.close();  if (quantity.signum() != 0) {    int uomPrecision=getUOMPrecision(p_M_Product_ID);    return quantity.setScale(uomPrecision,BigDecimal.ROUND_HALF_UP);  }  return Adempiere.ZERO;}  }
class C{  public static BufferedImage loadImagefromJar(Object refObj,String fileName){  BufferedImage bi=null;  try {    bi=ImageIO.read(refObj.getClass().getResourceAsStream(fileName));  } catch (  IOException e) {    e.printStackTrace();  }  return bi;}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=InfiniteViewPager.FakePositionHelper.getAdapterSize(mViewPager);    ;    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public BasicCondition(String variable,Value value,Relation relation){  this.variable=Template.create(variable);  this.templateValue=Template.create(value.toString());  this.groundValue=value;  this.relation=relation;}  }
class C{  public boolean isWin9x(){  if (isWin9x == 0) {    try {      ProcessLauncher launcher=new ProcessLauncher(new String[]{"cmd","/c","echo"});      launcher.launch();      isWin9x=-1;    } catch (    ProcessLauncher.CommandNotExistsException nosuchcommand) {      isWin9x=1;    }catch (    Exception e) {      logger.error("Unexpected exception while checking isWin9x",e);    }  }  return isWin9x == 1;}  }
class C{  private boolean handleFetchFiles(Random random,Socket socket,DataInput destIn,DataOutput destOut,BufferedOutputStream bos) throws IOException {  Thread.currentThread().setName("send");  int replicaID=destIn.readVInt();  message("top: start fetch for R" + replicaID + " socket="+ socket);  byte b=destIn.readByte();  CopyState copyState;  if (b == 0) {    copyState=null;  } else   if (b == 1) {    copyState=getCopyState();    Thread.currentThread().setName("send-R" + replicaID + "-"+ copyState.version);  } else {    throw new IllegalArgumentException("invalid CopyState byte=" + b);  }  try {    if (copyState != null) {      writeCopyState(copyState,destOut);      bos.flush();    }    byte[] buffer=new byte[16384];    int fileCount=0;    long totBytesSent=0;    while (true) {      byte done=destIn.readByte();      if (done == 1) {        break;      } else       if (done != 0) {        throw new IllegalArgumentException("expected 0 or 1 byte but got " + done);      }      String fileName=destIn.readString();      long fpStart=destIn.readVLong();      try (IndexInput in=dir.openInput(fileName,IOContext.DEFAULT)){        long len=in.length();        destOut.writeVLong(len);        in.seek(fpStart);        long upto=fpStart;        while (upto < len) {          int chunk=(int)Math.min(buffer.length,(len - upto));          in.readBytes(buffer,0,chunk);          if (doFlipBitsDuringCopy) {            if (random.nextInt(3000) == 17 && bitFlipped.contains(fileName) == false) {              bitFlipped.add(fileName);              message("file " + fileName + " to R"+ replicaID+ ": now randomly flipping a bit at byte="+ upto);              int x=random.nextInt(chunk);              int bit=random.nextInt(8);              buffer[x]^=1 << bit;            }          }          destOut.writeBytes(buffer,0,chunk);          upto+=chunk;          totBytesSent+=chunk;        }      }       fileCount++;    }    message("top: done fetch files for R" + replicaID + ": sent "+ fileCount+ " files; sent "+ totBytesSent+ " bytes");  } catch (  Throwable t) {    message("top: exception during fetch: " + t.getMessage() + "; now close socket");    socket.close();    return false;  } finally {    if (copyState != null) {      message("top: fetch: now release CopyState");      releaseCopyState(copyState);    }  }  return true;}  }
class C{  public static String objectToString(Object orb,Object obj){  ensureAvailable();  return proxy.objectToString(orb,obj);}  }
class C{  public boolean isPriorityRule(){  Object oo=get_Value(COLUMNNAME_PriorityRule);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private Element toElement(ScheduleTask task){  Element el=doc.createElement("task");  setAttributes(el,task);  return el;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tSpecify list of columns to take the differences between.\n" + "\tFirst and last are valid indexes.\n" + "\t(default none)","R",1,"-R <index1,index2-index4,...>"));  return newVector.elements();}  }
class C{  public static Bot createInstanceFromPool(String instanceName,boolean isSchema){  Bot instance=instances.remove(instanceName);  if (instance != null) {    instancesQueue.remove(instanceName);    if (instance.getState() != ActiveState.POOLED) {      instance.log(instance,"Invalid instance in pool",Level.INFO);      instance=null;    } else {      instance.setState(ActiveState.ACTIVE);      instance.log(instance,"Creating instance from pool, cache size:",Level.INFO,instanceName,instance.memory().cacheSize());    }  }  if (instance == null) {    long start=System.currentTimeMillis();    instance=fastCreateInstance(CONFIG_FILE,instanceName,isSchema);    long time=System.currentTimeMillis() - start;    instance.log(instance,"Creating new instance, time, cache size:",Level.INFO,instanceName,time,instance.memory().cacheSize());  }  return instance;}  }
class C{  public QoSConfig(int percentile,int quorum,int period,int minSampleCount,int minSentinelCount){  this.percentile=percentile;  this.quorum=quorum;  this.period=period;  this.minSampleCount=minSampleCount;  this.minSentinelCount=minSentinelCount;}  }
class C{  @Override public AlarmEvent evaluate(AlarmPoint alarm,String trigger){  if (trigger.equals(AlarmPoint.TRIGGER_ACTIVATE)) {    return activation(alarm);  } else   if (trigger.equals(AlarmPoint.TRIGGER_DEACTIVATE)) {    return deactivation(alarm);  } else   if (trigger.equals(AlarmPoint.TRIGGER_ACKNOWLEDGE)) {    return acknowledge(alarm);  } else {    throw new IllegalArgumentException("'" + trigger + "' is not supported by this AlarmModel.");  }}  }
class C{  public CResolveAllFunctionDialog(final Window owner,final IDatabase database,final INaviProject project){  Preconditions.checkNotNull(project,"IE02356: project argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE02357: Database argument can't be null");  Preconditions.checkArgument(database.isLoaded(),"Error: Database must be loaded before functions can be redirected");  final String message=String.format("Do you really want to resolve all functions in the project '%s'?",project.getConfiguration().getName());  m_targetModules=new ArrayList<INaviModule>();  m_sourceModules=new ArrayList<INaviModule>();  for (  final INaviAddressSpace addressSpace : project.getContent().getAddressSpaces()) {    m_targetModules.addAll(loadModules(addressSpace.getContent().getModules()));    m_sourceModules.addAll(loadModules(addressSpace.getContent().getModules()));  }  resultDialog(questionDialog(owner,message));}  }
class C{  public void release(V value){  Preconditions.checkNotNull(value);  Preconditions.checkState(mInUseLength > 0);  mInUseLength--;  addToFreeList(value);}  }
class C{  public MapsCard withStreetName(boolean isStreetName){  this.isStreetName=isStreetName;  return this;}  }
class C{  public boolean isRegistered(){  Object oo=get_Value(COLUMNNAME_IsRegistered);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean load(Element shared,Element perNode){  boolean result=true;  int x=0;  int y=0;  int height=400;  int width=300;  try {    x=shared.getAttribute("x").getIntValue();    y=shared.getAttribute("y").getIntValue();    height=shared.getAttribute("height").getIntValue();    width=shared.getAttribute("width").getIntValue();  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert PanelEditor's attribute");    result=false;  }  String name="Panel";  if (shared.getAttribute("name") != null) {    name=shared.getAttribute("name").getValue();  }  if (jmri.jmrit.display.PanelMenu.instance().isPanelNameUsed(name)) {    log.warn("File contains a panel with the same name (" + name + ") as an existing panel");    result=false;  }  PanelEditor panel=new PanelEditor(name);  jmri.jmrit.display.PanelMenu.instance().addEditorPanel(panel);  panel.getTargetFrame().setLocation(x,y);  panel.getTargetFrame().setSize(width,height);  panel.setTitle();  Attribute a;  boolean value=true;  if ((a=shared.getAttribute("editable")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllEditable(value);  value=true;  if ((a=shared.getAttribute("positionable")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllPositionable(value);  value=true;  if ((a=shared.getAttribute("showtooltips")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllShowTooltip(value);  value=true;  if ((a=shared.getAttribute("controlling")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setAllControlling(value);  value=false;  if ((a=shared.getAttribute("hide")) != null && a.getValue().equals("yes")) {    value=true;  }  panel.setShowHidden(value);  value=true;  if ((a=shared.getAttribute("panelmenu")) != null && a.getValue().equals("no")) {    value=false;  }  panel.setPanelMenuVisible(value);  String state="both";  if ((a=shared.getAttribute("scrollable")) != null) {    state=a.getValue();  }  panel.setScroll(state);  try {    int red=shared.getAttribute("redBackground").getIntValue();    int blue=shared.getAttribute("blueBackground").getIntValue();    int green=shared.getAttribute("greenBackground").getIntValue();    panel.setBackgroundColor(new Color(red,green,blue));  } catch (  org.jdom2.DataConversionException e) {    log.warn("Could not parse color attributes!");  }catch (  NullPointerException e) {  }  panel.initView();  List<Element> items=shared.getChildren();  for (int i=0; i < items.size(); i++) {    Element item=items.get(i);    String adapterName=item.getAttribute("class").getValue();    log.debug("load via " + adapterName);    try {      XmlAdapter adapter=(XmlAdapter)Class.forName(adapterName).newInstance();      adapter.load(item,panel);      if (!panel.loadOK()) {        result=false;      }    } catch (    Exception e) {      log.error("Exception while loading " + item.getName() + ":"+ e);      result=false;      e.printStackTrace();    }  }  panel.disposeLoadData();  panel.pack();  panel.setAllEditable(panel.isEditable());  panel.getTargetFrame().setVisible(true);  ConfigureManager cm=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  if (cm != null) {    cm.registerUser(panel);  }  panel.getTargetFrame().setLocation(x,y);  panel.getTargetFrame().setSize(width,height);  return result;}  }
class C{  private static int calculateTotalBytes(ByteBuffer[] byteBufferArr){  int total=0;  for (int index=0; index < byteBufferArr.length; index++) {    total+=byteBufferArr[index].capacity();  }  return total;}  }
class C{  private static boolean writeUnmarshalArguments(IndentingWriter p,String streamName,Type[] types,String[] names) throws IOException {  if (types.length != names.length) {    throw new Error("parameter type and name arrays different sizes");  }  boolean readObject=false;  for (int i=0; i < types.length; i++) {    if (writeUnmarshalArgument(p,streamName,types[i],names[i])) {      readObject=true;    }    p.pln(";");  }  return readObject;}  }
class C{  public void statBegin(int pos){  if (pos != Position.NOPOS) {    pendingStatPos=pos;  }}  }
class C{  public void substringMB() throws IOException {  print("substringMB",null);}  }
class C{  public boolean isFinished(){  return this.request == null || request.isDone();}  }
class C{  protected AbstractRed(Rectangle bounds,Map props){  init((CachableRed)null,bounds,null,null,bounds.x,bounds.y,props);}  }
class C{  public void init(){  subjectAreas=new ArrayList<SubjectArea>();  subjectAreaIds=new String[0];  fromSessions=null;  toSessions=null;  sessionToRollForwardTo=null;  rollForwardDatePatterns=new Boolean(false);  sessionToRollDatePatternsForwardFrom=null;  rollForwardTimePatterns=new Boolean(false);  sessionToRollTimePatternsForwardFrom=null;  rollForwardDepartments=new Boolean(false);  sessionToRollDeptsFowardFrom=null;  rollForwardManagers=new Boolean(false);  sessionToRollManagersForwardFrom=null;  rollForwardRoomData=new Boolean(false);  sessionToRollRoomDataForwardFrom=null;  setDepartments(new ArrayList<Department>());  setRollForwardDepartmentIds(new String[0]);  rollForwardSubjectAreas=new Boolean(false);  sessionToRollSubjectAreasForwardFrom=null;  rollForwardInstructorData=new Boolean(false);  sessionToRollInstructorDataForwardFrom=null;  rollForwardCourseOfferings=new Boolean(false);  sessionToRollCourseOfferingsForwardFrom=null;  rollForwardSubjectAreaIds=new String[0];  rollForwardClassInstructors=new Boolean(false);  rollForwardClassInstrSubjectIds=new String[0];  addNewCourseOfferings=new Boolean(false);  addNewCourseOfferingsSubjectIds=new String[0];  rollForwardExamConfiguration=new Boolean(false);  sessionToRollExamConfigurationForwardFrom=null;  rollForwardMidtermExams=new Boolean(false);  rollForwardFinalExams=new Boolean(false);  rollForwardStudents=new Boolean(false);  rollForwardStudentsMode=new Integer(0);  subpartLocationPrefsAction=null;  subpartTimePrefsAction=null;  classPrefsAction=null;  cancelledClassAction=null;  rollForwardCurricula=false;  sessionToRollCurriculaForwardFrom=null;  finalExamsPrefsAction=null;  midtermExamsPrefsAction=null;  rollForwardSessionConfig=false;  sessionToRollSessionConfigForwardFrom=null;  rollForwardReservations=false;  sessionToRollReservationsForwardFrom=null;  rollForwardReservationsSubjectIds=new String[0];  rollForwardCurriculumReservations=false;  rollForwardCourseReservations=false;  rollForwardGroupReservations=false;  expirationCourseReservations=null;  expirationCurriculumReservations=null;  expirationGroupReservations=null;  createStudentGroupsIfNeeded=false;}  }
class C{  public void destroy(){  bitmap=null;  pixels=null;  System.gc();}  }
class C{  protected final void bindLifeCycle(Class<? extends Annotation> annotation,Matcher<? super TypeLiteral<?>> typeMatcher){  bindLifeCycle(asList(annotation),typeMatcher);}  }
class C{  public boolean inPeriod(Timestamp date){  if (date == null)   return false;  if (date.before(m_StartDate))   return false;  if (date.after(m_EndDate))   return false;  return true;}  }
class C{  public PKIMessage(PKIHeader header,PKIBody body,DERBitString protection,CMPCertificate[] extraCerts){  this.header=header;  this.body=body;  this.protection=protection;  if (extraCerts != null) {    ASN1EncodableVector v=new ASN1EncodableVector();    for (int i=0; i < extraCerts.length; i++) {      v.add(extraCerts[i]);    }    this.extraCerts=new DERSequence(v);  }}  }
class C{  public PSOSVM(OperatorDescription description){  super(description);}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  protected void removeTag(short tagId,int ifdId){  getMpIfdData(ifdId).removeTag(tagId);}  }
class C{  public SecurityFilter(final IValueExpression<? extends IV> user,final IValueExpression<? extends IV> document,final GlobalAnnotations globals,GlobalSecurityValidator validator){  this(new BOp[]{user,document},XSDBooleanIVValueExpression.anns(globals));  this.validator=validator;}  }
class C{  private void saveTodo(HttpServletRequest request,HttpServletResponse response){  AsyncContext ctx=request.startAsync();  runAsync(ctx,null);}  }
class C{  public KdNode insert(Coordinate p,Object data){  if (root == null) {    root=new KdNode(p,data);    return root;  }  if (tolerance > 0) {    KdNode matchNode=findBestMatchNode(p);    if (matchNode != null) {      matchNode.increment();      return matchNode;    }  }  return insertExact(p,data);}  }
class C{  public static <K,V>boolean isEmpty(Map<K,V> map){  return (null == map || map.isEmpty());}  }
class C{  public String[][] readStringFrame(String fname,InputInfo iinfo,long rows,long cols) throws IOException {  try {    FrameReader reader=FrameReaderFactory.createFrameReader(iinfo);    FrameBlock mb=reader.readFrameFromHDFS(fname,rows,cols);    return DataConverter.convertToStringFrame(mb);  } catch (  Exception ex) {    throw new IOException(ex);  }}  }
class C{  public mxStylesheetCodec(Object template){  this(template,null,null,null);}  }
class C{  public final void mulTransposeRight(Matrix3d m1,Matrix3d m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m01 * m2.m01 + m1.m02 * m2.m02;    this.m01=m1.m00 * m2.m10 + m1.m01 * m2.m11 + m1.m02 * m2.m12;    this.m02=m1.m00 * m2.m20 + m1.m01 * m2.m21 + m1.m02 * m2.m22;    this.m10=m1.m10 * m2.m00 + m1.m11 * m2.m01 + m1.m12 * m2.m02;    this.m11=m1.m10 * m2.m10 + m1.m11 * m2.m11 + m1.m12 * m2.m12;    this.m12=m1.m10 * m2.m20 + m1.m11 * m2.m21 + m1.m12 * m2.m22;    this.m20=m1.m20 * m2.m00 + m1.m21 * m2.m01 + m1.m22 * m2.m02;    this.m21=m1.m20 * m2.m10 + m1.m21 * m2.m11 + m1.m22 * m2.m12;    this.m22=m1.m20 * m2.m20 + m1.m21 * m2.m21 + m1.m22 * m2.m22;  } else {    double m00, m01, m02, m10, m11, m12, m20, m21, m22;    m00=m1.m00 * m2.m00 + m1.m01 * m2.m01 + m1.m02 * m2.m02;    m01=m1.m00 * m2.m10 + m1.m01 * m2.m11 + m1.m02 * m2.m12;    m02=m1.m00 * m2.m20 + m1.m01 * m2.m21 + m1.m02 * m2.m22;    m10=m1.m10 * m2.m00 + m1.m11 * m2.m01 + m1.m12 * m2.m02;    m11=m1.m10 * m2.m10 + m1.m11 * m2.m11 + m1.m12 * m2.m12;    m12=m1.m10 * m2.m20 + m1.m11 * m2.m21 + m1.m12 * m2.m22;    m20=m1.m20 * m2.m00 + m1.m21 * m2.m01 + m1.m22 * m2.m02;    m21=m1.m20 * m2.m10 + m1.m21 * m2.m11 + m1.m22 * m2.m12;    m22=m1.m20 * m2.m20 + m1.m21 * m2.m21 + m1.m22 * m2.m22;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m20=m20;    this.m21=m21;    this.m22=m22;  }}  }
class C{  public RestResult(String url,int responseCode,String errorMsg,String result){  this(responseCode,errorMsg,result);  this.url=url;}  }
class C{  public SqlFieldsQuery(String sql){  setSql(sql);}  }
class C{  @Override public int deleteCharacters(Uri uri,String selection,String[] selectionArgs){  int recsDeleted=0;synchronized (this) {    for (    CharacterRecord cr : mCharacterMap.values().toArray(new CharacterRecord[mCharacterMap.values().size()]))     recsDeleted+=deleteEntryConditionally(cr,selection,selectionArgs);  }  return recsDeleted;}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public void replaceNotificationEmailAddresses(List<String> newNotificationEmailAddresses){  if (newNotificationEmailAddresses == null) {    throw new IllegalArgumentException("Replacing notification email list with 'null'.");  }  notificationEmailAddresses.clear();  for (  String emailAddress : newNotificationEmailAddresses) {    addNotificationEmailAddress(emailAddress);  }}  }
class C{  public static boolean isDateAfterToday(String date){  if (isEmpty(date))   return defaultEmptyOK;  int dateSlash1=date.indexOf("/");  int dateSlash2=date.lastIndexOf("/");  if (dateSlash1 <= 0)   return false;  java.util.Date passed=null;  if (dateSlash1 == dateSlash2) {    String month=date.substring(0,dateSlash1);    String day="28";    String year=date.substring(dateSlash1 + 1);    if (!isDate(year,month,day))     return false;    try {      int monthInt=Integer.parseInt(month);      int yearInt=Integer.parseInt(year);      Calendar calendar=Calendar.getInstance();      calendar.set(yearInt,monthInt - 1,0,0,0,0);      calendar.add(Calendar.MONTH,1);      passed=new java.util.Date(calendar.getTime().getTime());    } catch (    Exception e) {      passed=null;    }  } else {    String month=date.substring(0,dateSlash1);    String day=date.substring(dateSlash1 + 1,dateSlash2);    String year=date.substring(dateSlash2 + 1);    if (!isDate(year,month,day))     return false;    passed=UtilDateTime.toDate(month,day,year,"0","0","0");  }  java.util.Date now=UtilDateTime.nowDate();  if (passed != null) {    return passed.after(now);  } else {    return false;  }}  }
class C{  public void register(final PanelKeys key,final AbstractPanel panel){  this.components.register(key,panel);}  }
class C{  protected int nextInCDATASection() throws IOException, XMLException {  if (cdataEndRead) {    cdataEndRead=false;    context=CONTENT_CONTEXT;    return LexicalUnits.SECTION_END;  }  while (current != -1) {    while (current != ']' && current != -1) {      nextChar();    }    if (current != -1) {      nextChar();      if (current == ']') {        nextChar();        if (current == '>') {          break;        }      }    }  }  if (current == -1) {    throw createXMLException("unexpected.eof");  }  nextChar();  cdataEndRead=true;  return LexicalUnits.CHARACTER_DATA;}  }
class C{  @Override public void onNotificationPosted(StatusBarNotification sbn){  Intent intent=new Intent(NOTIFICATION_UPDATE);  intent.putExtra(NotificationKey.ACTION,NotificationAction.NOTIFICATION_POSTED);  intent.putExtra(NotificationKey.APPLICATION_PACKAGE_NAME,sbn.getPackageName());  StatusBarNotification[] activeNotifications=NotificationService.this.getActiveNotifications();  String packages[]=new String[activeNotifications.length];  int i=0;  for (  StatusBarNotification nf : activeNotifications) {    packages[i++]=nf.getPackageName();  }  intent.putExtra(NotificationKey.APPLICATION_PACKAGES,packages);  sendBroadcast(intent);  numNotifications=packages.length;}  }
class C{  public static boolean testSntp(){  final SntpClient client=new SntpClient();  if (client.requestTime("0.pool.ntp.org",10000)) {    return true;  }  return false;}  }
class C{  @Override public void collectMetaInformation(final GamlProperties meta){  type.collectMetaInformation(meta);}  }
class C{  @Nullable public static Map<String,String> readProperties(BinaryRawReader in){  int size=in.readInt();  if (size >= 0) {    Map<String,String> props=new HashMap<>(size);    for (int i=0; i < size; i++) {      byte idx=in.readByte();      String key;switch (idx) {case PROP_PERMISSION_IDX:        key=PROP_PERMISSION;      break;case PROP_PREFER_LOCAL_WRITES_IDX:    key=PROP_PREFER_LOCAL_WRITES;  break;case PROP_USER_NAME_IDX:key=PROP_USER_NAME;break;case PROP_GROUP_NAME_IDX:key=PROP_GROUP_NAME;break;default :key=in.readString();}props.put(key,in.readString());}return props;} else return null;}  }
class C{  @Override public int compare(Map.Entry<List<String>,List<Double>> e1,Map.Entry<List<String>,List<Double>> e2){  int r=0;  List<String> keyList1=e1.getKey();  List<Double> valueList1=e1.getValue();  List<String> keyList2=e2.getKey();  List<Double> valueList2=e2.getValue();  for (  SortOption so : sortOptions) {    int index=so.getIndex();    if (index == -1) {      continue;    }    if (!so.isInGroupby()) {      Double value1=valueList1.get(index);      Double value2=valueList2.get(index);      r=value1.compareTo(value2);    } else {      String key1=keyList1.get(index);      String key2=keyList2.get(index);      r=key1.compareTo(key2);    }    if (r == 0)     continue;    if (!so.isAscendant()) {      r=-r;    }    return r;  }  if (r == 0) {    return new GroupbyFieldsComparator().compare(keyList1,keyList2);  }  return r;}  }
class C{  private static void SetObjectField(JNIEnvironment env,int objJREF,int fieldID,int valueJREF){  if (traceJNI)   VM.sysWrite("JNI called: SetObjectField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object value=env.getJNIRef(valueJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setObjectValueUnchecked(obj,value);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  int size=Array.getLength(source);  for (int i=0; i < size; i++) {    OutputNode child=node.getChild(parent);    if (child == null) {      break;    }    write(child,source,i);  }}  }
class C{  public int compareTo(PlogTransaction o){  return this.XID.compareTo(o.XID);}  }
class C{  public a addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void manageRoom(final Context aContext){  manageRoom(aContext,null);}  }
class C{  public CreatureGroupsXMLLoader(final String uri){  try {    this.uri=new URI(uri);  } catch (  URISyntaxException e) {    LOGGER.error(e,e);  }}  }
class C{  void addCaseToComposite(Vector<NodeRepresentation> nodeRepVector,Composite composite){  Composite comp;  GridData gridData;  GridLayout gridLayout;  Label assumeLabel;  for (int i=0; i < nodeRepVector.size(); i++) {    NodeRepresentation aRep=nodeRepVector.elementAt(i);    if ((aRep.nodeType == NodeRepresentation.NEW_NODE) || (aRep.nodeType == NodeRepresentation.OTHER_NODE) || ((aRep.nodeType == NodeRepresentation.EXPR_NODE) && (aRep.nodeSubtype != NodeRepresentation.OR_TYPE) && (aRep.nodeSubtype != NodeRepresentation.EXISTS_TYPE)&& (aRep.nodeSubtype != NodeRepresentation.SQSUB_TYPE))) {      String text=stringArrayToString(nodeRepVector.elementAt(i).primedNodeText());      while (nodeRepVector.elementAt(i).onSameLineAsNext) {        i++;        text=text + ", " + stringArrayToString(nodeRepVector.elementAt(i).primedNodeText());      }      assumeLabel=new Label(composite,SWT.NONE);      assumeLabel.setText(text);      assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));      gridData=new GridData();      gridData.horizontalSpan=3;      assumeLabel.setLayoutData(gridData);    } else     if (aRep.nodeType != NodeRepresentation.OR_DECOMP) {      String labelText=null;      if ((aRep.semanticNode != null) && (aRep.semanticNode.getKind() == ASTConstants.OpApplKind)) {switch (aRep.nodeSubtype) {case NodeRepresentation.AND_TYPE:          labelText=null;        break;case NodeRepresentation.OR_TYPE:case NodeRepresentation.SQSUB_TYPE:      labelText="\\/";    break;case NodeRepresentation.EXISTS_TYPE:  labelText="\\E";break;default :labelText=null;}}if (labelText != null) {Button button=new Button(composite,SWT.PUSH);setupActionButton(button,nodeRepVector.elementAt(i),labelText);if ((aRep.nodeSubtype == NodeRepresentation.AND_TYPE) || (aRep.nodeSubtype == NodeRepresentation.FORALL_TYPE)) {button.setEnabled(false);}} else {comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);assumeLabel=new Label(comp,SWT.NONE);assumeLabel.setText("  ");gridData=new GridData();gridData.horizontalIndent=25;comp.setLayoutData(gridData);}comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);comp.setSize(0,5);comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(3,false);comp.setLayout(gridLayout);assumeLabel=new Label(comp,SWT.NONE);String text=stringArrayToString(nodeRepVector.elementAt(i).primedNodeText());assumeLabel.setText(text);assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));gridData=new GridData();gridData.horizontalIndent=0;gridData.verticalAlignment=SWT.TOP;gridData.horizontalAlignment=SWT.LEFT;assumeLabel.setLayoutData(gridData);} else {{assumeLabel=new Label(composite,SWT.NONE);assumeLabel.setText("  ");comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);}comp=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(1,false);comp.setLayout(gridLayout);Composite inner=new Composite(composite,SWT.NONE);gridLayout=new GridLayout(2,false);inner.setLayout(gridLayout);for (int j=0; j < aRep.children.size(); j++) {assumeLabel=new Label(inner,SWT.NONE);assumeLabel.setText("CASE");assumeLabel.setFont(JFaceResources.getFontRegistry().get(JFaceResources.TEXT_FONT));Composite caseComp=new Composite(inner,SWT.BORDER);gridLayout=new GridLayout(3,false);caseComp.setLayout(gridLayout);addCaseToComposite(aRep.children.elementAt(j),caseComp);gridData=new GridData();gridData.verticalAlignment=SWT.TOP;caseComp.setLayoutData(gridData);}}}}  }
class C{  public static XTIFFField createField(int tag,int type,int count,Object obj){  return factory.createField(tag,type,count,obj);}  }
class C{  public AbFocusView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs);  setClickable(true);  setFocusable(true);  setFocusableInTouchMode(true);  setWillNotDraw(false);  setOnFocusChangeListener(this);  setDrawingCacheEnabled(true);}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new DataLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    System.arraycopy(buf,blockSize,buf,0,blockSize);    bufOff=blockSize;    len-=gapLen;    inOff+=gapLen;    while (len > blockSize) {      System.arraycopy(in,inOff,buf,bufOff,blockSize);      resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);      System.arraycopy(buf,blockSize,buf,0,blockSize);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  public void removeStrategicTarget(String target){  strategicBuildingTargets.remove(target);}  }
class C{  public static boolean validatePassword(String password,String correctHash) throws NoSuchAlgorithmException, InvalidKeySpecException {  return validatePassword(password.toCharArray(),correctHash);}  }
class C{  public static String xmlText(String text,boolean escapeNewline){  int length=text.length();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char ch=text.charAt(i);switch (ch) {case '<':      buff.append("&lt;");    break;case '>':  buff.append("&gt;");break;case '&':buff.append("&amp;");break;case '\'':buff.append("&apos;");break;case '\"':buff.append("&quot;");break;case '\r':case '\n':if (escapeNewline) {buff.append("&#x").append(Integer.toHexString(ch)).append(';');} else {buff.append(ch);}break;case '\t':buff.append(ch);break;default :if (ch < ' ' || ch > 127) {buff.append("&#x").append(Integer.toHexString(ch)).append(';');} else {buff.append(ch);}}}return buff.toString();}  }
class C{  public SyntheticMethodBinding(SourceTypeBinding declaringEnum,char[] selector){  this.declaringClass=declaringEnum;  this.selector=selector;  this.modifiers=ClassFileConstants.AccPublic | ClassFileConstants.AccStatic;  this.tagBits|=(TagBits.AnnotationResolved | TagBits.DeprecatedAnnotationResolved);  LookupEnvironment environment=declaringEnum.scope.environment();  this.thrownExceptions=Binding.NO_EXCEPTIONS;  if (selector == TypeConstants.VALUES) {    this.returnType=environment.createArrayType(environment.convertToParameterizedType(declaringEnum),1);    this.parameters=Binding.NO_PARAMETERS;    this.purpose=SyntheticMethodBinding.EnumValues;  } else   if (selector == TypeConstants.VALUEOF) {    this.returnType=environment.convertToParameterizedType(declaringEnum);    this.parameters=new TypeBinding[]{declaringEnum.scope.getJavaLangString()};    this.purpose=SyntheticMethodBinding.EnumValueOf;  }  SyntheticMethodBinding[] knownAccessMethods=((SourceTypeBinding)this.declaringClass).syntheticMethods();  int methodId=knownAccessMethods == null ? 0 : knownAccessMethods.length;  this.index=methodId;  if (declaringEnum.isStrictfp()) {    this.modifiers|=ClassFileConstants.AccStrictfp;  }}  }
class C{  public FunctionblockProperty basicGetProperty(){  return property;}  }
class C{  public void close() throws IOException {  if (stream != null) {    stream.close();  } else {    reader.close();  }}  }
class C{  private IStatus refresh(final IResource[] resources,final RecursionType recursionType,final IProgressMonitor monitor){  Check.notNull(resources,"resources");  Check.notNull(recursionType,"recursionType");  Check.notNull(monitor,"monitor");  final Collection<IResource> changedResources=new HashSet<IResource>();  final ArrayList<IStatus> errors=new ArrayList<IStatus>();  monitor.beginTask(Messages.getString("SynchronizeSubscriber.RefreshingTFSResources"),(resources.length + 1));  final SubProgressMonitor pcMonitor=new SubProgressMonitor(monitor,1);  refreshPendingChanges(resources,pcMonitor);  pcMonitor.done();  for (int i=0; i < resources.length; i++) {    if (monitor.isCanceled()) {      return Status.CANCEL_STATUS;    }    monitor.subTask(resources[i].getName());    final SubProgressMonitor resourceMonitor=new SubProgressMonitor(monitor,1);    final IStatus status=refreshResource(resources[i],recursionType,changedResources,resourceMonitor);    if (!status.isOK()) {      errors.add(status);    }    resourceMonitor.done();  }  monitor.done();  if (!changedResources.isEmpty()) {    fireTeamResourceChange(changedResources);  }  if (!errors.isEmpty()) {    if (errors.size() == resources.length) {      int errorCode=-1;      for (final Iterator<IStatus> i=errors.iterator(); i.hasNext(); ) {        final IStatus error=i.next();        if ((error.getCode() & PROJECT_REPOSITORY_STATUS_CODE) == 0) {          errorCode=-1;          break;        }        final int thisErrorCode=(error.getCode() & (~PROJECT_REPOSITORY_STATUS_CODE));        if (errorCode < 0) {          errorCode=thisErrorCode;        } else         if (thisErrorCode != errorCode) {          errorCode=-1;          break;        }      }      if (errorCode >= 0) {        String message=Messages.getString("SynchronizeSubscriber.ProjectsNotCurrentlyConnectedToTFS");        if (errorCode == ProjectRepositoryStatus.CONNECTING.getValue()) {          message=Messages.getString("SynchronizeSubscriber.ProjectsBeingConnectedToTFSWaitBeforeRefreshing");        } else         if (errorCode == ProjectRepositoryStatus.OFFLINE.getValue()) {          message=Messages.getString("SynchronizeSubscriber.CurrentlyOfflinePleaseReturnOnlineBeforeRefreshing");        } else         if (errorCode == ProjectRepositoryStatus.INITIALIZING.getValue()) {          message=Messages.getString("SynchronizeSubscriber.ProjectsNotConnectedToTFSOrHaveBeenPermanentlyDisconnected");        }        return new Status(IStatus.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,errorCode,message,null);      }    }    final IStatus[] status=errors.toArray(new IStatus[errors.size()]);    return new MultiStatus(TFSEclipseClientPlugin.PLUGIN_ID,TeamException.NO_REMOTE_RESOURCE,status,Messages.getString("SynchronizeSubscriber.SomeResourcesCouldNotBeRefreshed"),null);  }  return Status.OK_STATUS;}  }
class C{  public void deleteQueue(DeleteQueueRequest deleteQueueRequest) throws AmazonServiceException, AmazonClientException {  amazonSqsToBeExtended.deleteQueue(deleteQueueRequest);}  }
class C{  public void initializeTreehashSeed(byte[] seed,int index){  treehash[index].initializeSeed(seed);}  }
class C{  static double fourNeighborsIDW(SpatialGrid sg,double xCoord,double yCoord,double exp){  double xDif=(xCoord - sg.getXmin()) % sg.getResolution();  double yDif=(yCoord - sg.getYmin()) % sg.getResolution();  if (xDif == 0 && yDif == 0) {    return sg.getValue(xCoord,yCoord);  }  double x1=xCoord - xDif;  double x2=x1 + sg.getResolution();  double y1=yCoord - yDif;  double y2=y1 + sg.getResolution();  double d11=Math.pow(distance(x1,y1,xCoord,yCoord),exp);  double d12=Math.pow(distance(x1,y2,xCoord,yCoord),exp);  double d21=Math.pow(distance(x2,y1,xCoord,yCoord),exp);  double d22=Math.pow(distance(x2,y2,xCoord,yCoord),exp);  if (xCoord == sg.getXmax()) {    return (sg.getValue(x1,y1) / d11 + sg.getValue(x1,y2) / d12) / (1 / d11 + 1 / d12);  }  if (yCoord == sg.getYmax()) {    return (sg.getValue(x1,y1) / d11 + sg.getValue(x2,y1) / d21) / (1 / d11 + 1 / d21);  }  return (sg.getValue(x1,y1) / d11 + sg.getValue(x1,y2) / d12 + sg.getValue(x2,y1) / d21 + sg.getValue(x2,y2) / d22) / (1 / d11 + 1 / d12 + 1 / d21 + 1 / d22);}  }
class C{  public void clear(){  setTime(null);}  }
class C{  @Override public void finalize(){}  }
class C{  protected static Attr[] sortAttributes(NamedNodeMap attrs){  int len=(attrs != null) ? attrs.getLength() : 0;  Attr array[]=new Attr[len];  for (int i=0; i < len; i++) {    array[i]=(Attr)attrs.item(i);  }  for (int i=0; i < len - 1; i++) {    String name=array[i].getNodeName();    int index=i;    for (int j=i + 1; j < len; j++) {      String curName=array[j].getNodeName();      if (curName.compareTo(name) < 0) {        name=curName;        index=j;      }    }    if (index != i) {      Attr temp=array[i];      array[i]=array[index];      array[index]=temp;    }  }  return (array);}  }
class C{  public void addUpdateListener(UpdateListener ul){  this.updateListeners.add(ul);}  }
class C{  public static Object makeCopy(Object source){  Object result;  try {    result=GenericObjectEditor.makeCopy(source);  } catch (  Exception e) {    result=null;  }  return result;}  }
class C{  public void execPostCalls(int status) throws InterceptorException {  for (  Interceptor interceptor : interceptors) {    try {      interceptor.postCall(request,status,serviceMethodInfo);    } catch (    Exception e) {      log.error("Exception while executing a postCall",e);    }  }}  }
class C{  public CustomDdlUpdateRequest createCustomDdlUpdateRequest(String ddl){  CustomDdlUpdateRequest request=new CustomDdlUpdateRequest();  request.setDdl(ddl);  return request;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.834 -0500",hash_original_method="C8A580F0F00F2E8253C1A0038ADFE159",hash_generated_method="6A3420AADD23DFC840F8FCD6EA8F7BF8") public void runBare() throws Throwable {  setUp();  try {    runTest();  }  finally {    tearDown();  }}  }
class C{  public static void copyProperties(Drawable to,Drawable from){  if (from == null || to == null || to == from) {    return;  }  to.setBounds(from.getBounds());  to.setChangingConfigurations(from.getChangingConfigurations());  to.setLevel(from.getLevel());  to.setVisible(from.isVisible(),false);  to.setState(from.getState());}  }
class C{  public EntityXmlAssertTest(String caseName,Element mainElement){  super(caseName);  this.entityXmlUrlString=mainElement.getAttribute("entity-xml-url");  this.action=mainElement.getAttribute("action");  if (UtilValidate.isEmpty(this.action))   this.action="assert";}  }
class C{  private void readCounts() throws IOException {  unigrams=new HashMap<>();  bigrams=new HashMap<>();  getLogger().info("Reading frequencies from " + modelLocation);  BufferedReader reader=new BufferedReader(new InputStreamReader(CompressionUtils.getInputStream(modelLocation,new FileInputStream(modelLocation))));  boolean countingUnigrams=true;  String line;  while ((line=reader.readLine()) != null) {    if (line.equals(FrequencyCounter.NGRAM_SEPARATOR_LINE)) {      if (!countingUnigrams) {        throw new IllegalStateException("Error reading input file; contains multiple separation lines.");      }      countingUnigrams=false;    } else {      String[] columns=line.split(FrequencyCounter.COLUMN_SEPARATOR);      if (columns.length != 2) {        throw new IllegalStateException("Invalid line in input file:\n" + line);      }      String token=columns[0];      int count=Integer.parseInt(columns[1]);      if (countingUnigrams) {        if (unigrams.containsKey(token)) {          throw new IllegalStateException("Duplicate token in input file: '" + token + "'.");        }        unigrams.put(token,count);      } else {        if (bigrams.containsKey(token)) {          throw new IllegalStateException("Duplicate token in input file: '" + token + "'.");        }        bigrams.put(token,count);      }    }  }  reader.close();}  }
class C{  boolean doit(CtClass clazz,MethodInfo minfo,LoopContext context,CodeIterator iterator,int endPos) throws CannotCompileException {  boolean edited=false;  while (iterator.hasNext() && iterator.lookAhead() < endPos) {    int size=iterator.getCodeLength();    if (loopBody(iterator,clazz,minfo,context)) {      edited=true;      int size2=iterator.getCodeLength();      if (size != size2)       endPos+=size2 - size;    }  }  return edited;}  }
class C{  public static byte[] randomBytes(char len){  byte[] data=new byte[len];  for (int i=0; i < len; i++) {    data[i]=randomByte();  }  return data;}  }
class C{  public BST(){}  }
class C{  public final CC growX(float w){  hor.setGrow(new Float(w));  return this;}  }
class C{  public void testDFBlockSize() throws Exception {  Document doc=newDocument();  for (int i=0; i < Lucene50PostingsFormat.BLOCK_SIZE; i++) {    for (    IndexableField f : doc.getFields()) {      ((Field)f).setStringValue(f.name() + " " + f.name()+ "_2");    }    iw.addDocument(doc);  }}  }
class C{  public HashCode append(final char[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final char element : array) {      append(element);    }  }  return this;}  }
class C{  public RAkELTest(String name){  super(name);}  }
class C{  private static void createFolderAudit(String sessionID,String entidad,AuthenticationUser user,AxSf axsfNew,Integer bookID,ScrOfic scrofic,Session session,Date currentDate,boolean updateAudit) throws SQLException, Exception {  if (updateAudit) {    Integer updateAuditId=new Integer(DBEntityDAOFactory.getCurrentDBEntityDAO().getNextIdForScrModifreg(user.getId(),entidad));    String userName=null;    if (isDataBaseCaseSensitive(entidad)) {      userName=user.getName().toUpperCase();    } else {      userName=user.getName();    }    String numReg=axsfNew.getAttributeValueAsString("fld1");    ISicresSaveQueries.saveScrModifreg(session,updateAuditId,userName,currentDate,numReg,2,bookID.intValue(),scrofic.getId().intValue(),1);    DBEntityDAOFactory.getCurrentDBEntityDAO().insertAudit(updateAuditId,axsfNew.getAttributeValue("fld2"),null,entidad);  }}  }
class C{  private void addToRange(int i,int j,RuleCollection to){  if (to != null) {    List<Rule> rules=to.getSortedRules(features);    if (numOptions > 0 && rules.size() > numOptions)     rules=rules.subList(0,numOptions - 1);    try {      int offset=offset(i,j);      if (entries.get(offset) == null)       entries.set(offset,new PhraseNodes(i,j,numOptions));      PhraseNodes nodes=entries.get(offset);      for (      Rule rule : rules) {        ComputeNodeResult result=new ComputeNodeResult(features,rule,null,i,j,null,sentence);        HyperEdge edge=new HyperEdge(rule,result.getViterbiCost(),result.getTransitionCost(),null,null);        HGNode phraseNode=new HGNode(i,j,rule.getLHS(),result.getDPStates(),edge,result.getPruningEstimate());        nodes.add(phraseNode);      }    } catch (    java.lang.IndexOutOfBoundsException e) {      LOG.error("Whoops! {} [{}-{}] too long ({})",to,i,j,entries.size());      LOG.error(e.getMessage(),e);    }  }}  }
class C{  public void testTwoMethods() throws Exception {  Map<String,Method> functions=new HashMap<>();  functions.put("foo",getClass().getMethod("zeroArgMethod"));  functions.put("bar",getClass().getMethod("oneArgMethod",double.class));  Expression expr=JavascriptCompiler.compile("foo() + bar(3)",functions,getClass().getClassLoader());  assertEquals(11,expr.evaluate(0,null),DELTA);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public Statechart createStatechart(){  StatechartImpl statechart=new StatechartImpl();  return statechart;}  }
class C{  @Override public void initialize(Map<String,Object> properties){  return;}  }
class C{  private void writeText(OutputNode node,Object source,Section section) throws Exception {  Label label=section.getText();  if (label != null) {    Contact contact=label.getContact();    Object value=contact.get(source);    Class expect=context.getType(type,source);    if (value == null) {      value=label.getEmpty(context);    }    if (value == null && label.isRequired()) {      throw new TextException("Value for %s is null in %s",label,expect);    }    writeText(node,value,label);  }}  }
class C{  @Override public void registerListener(Object listener){  if (listener instanceof IListener) {    Class<?> rawType=TypeResolver.resolveRawArgument(IListener.class,listener.getClass());    if (IEvent.class.isAssignableFrom(rawType)) {      Class<? extends IEvent> eventType=(Class<? extends IEvent>)rawType;      if (listenerMap.containsKey(eventType)) {        listenerMap.get(eventType).add((IListener)listener);      } else {        listenerMap.put(eventType,new ArrayList<>(Collections.singletonList((IListener)listener)));      }      Discord4J.logger.debug("Registered IListener for {}. Map size now {}.",eventType.getSimpleName(),listenerMap.size());    }  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){  WalletTableData rowTableData=showTransactionsPanel.getSelectedRowData();  final TransactionDetailsDialog transactionDetailsDialog=new TransactionDetailsDialog(this.bitcoinController,mainFrame,rowTableData);  transactionDetailsDialog.setVisible(true);  showTransactionsPanel.getTable().requestFocusInWindow();}  }
class C{  public TupleExpr buildTupleExpr(){  TupleExpr result;  if (requiredTEs.isEmpty()) {    result=new SingletonSet();  } else {    result=requiredTEs.get(0);    for (int i=1; i < requiredTEs.size(); i++) {      TupleExpr te=requiredTEs.get(i);      result=new Join(result,te);    }  }  for (  Map.Entry<TupleExpr,List<ValueExpr>> entry : optionalTEs) {    List<ValueExpr> constraints=entry.getValue();    if (constraints != null && !constraints.isEmpty()) {      ValueExpr condition=constraints.get(0);      for (int i=1; i < constraints.size(); i++) {        condition=new And(condition,constraints.get(i));      }      result=new LeftJoin(result,entry.getKey(),condition);    } else {      result=new LeftJoin(result,entry.getKey());    }  }  for (  ValueExpr constraint : constraints) {    result=new Filter(result,constraint);  }  return result;}  }
class C{  public static PriceModelException convertToApi(org.oscm.internal.types.exception.PriceModelException oldEx){  return convertExceptionToApi(oldEx,PriceModelException.class);}  }
class C{  @NotNull public static GroovyElementType namePartParse(@NotNull PsiBuilder builder,@NotNull GroovyParser parser){  ParserUtils.getToken(builder,GroovyTokenTypes.mAT);  if (ParserUtils.getToken(builder,GroovyTokenTypes.mIDENT) || ParserUtils.getToken(builder,GroovyTokenTypes.mSTRING_LITERAL) || ParserUtils.getToken(builder,GroovyTokenTypes.mGSTRING_LITERAL)) {    return GroovyElementTypes.REFERENCE_EXPRESSION;  }  final IElementType tokenType=builder.getTokenType();  if (tokenType == GroovyTokenTypes.mGSTRING_BEGIN) {    final boolean result=CompoundStringExpression.parse(builder,parser,true,GroovyTokenTypes.mGSTRING_BEGIN,GroovyTokenTypes.mGSTRING_CONTENT,GroovyTokenTypes.mGSTRING_END,null,GroovyElementTypes.GSTRING,GroovyBundle.message("string.end.expected"));    return result ? GroovyElementTypes.PATH_PROPERTY_REFERENCE : GroovyElementTypes.REFERENCE_EXPRESSION;  }  if (tokenType == GroovyTokenTypes.mREGEX_BEGIN) {    final boolean result=CompoundStringExpression.parse(builder,parser,true,GroovyTokenTypes.mREGEX_BEGIN,GroovyTokenTypes.mREGEX_CONTENT,GroovyTokenTypes.mREGEX_END,GroovyTokenTypes.mREGEX_LITERAL,GroovyElementTypes.REGEX,GroovyBundle.message("regex.end.expected"));    return result ? GroovyElementTypes.PATH_PROPERTY_REFERENCE : GroovyElementTypes.REFERENCE_EXPRESSION;  }  if (tokenType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN) {    final boolean result=CompoundStringExpression.parse(builder,parser,true,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_BEGIN,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_END,GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL,GroovyElementTypes.REGEX,GroovyBundle.message("dollar.slash.end.expected"));    return result ? GroovyElementTypes.PATH_PROPERTY_REFERENCE : GroovyElementTypes.REFERENCE_EXPRESSION;  }  if (tokenType == GroovyTokenTypes.mLCURLY) {    OpenOrClosableBlock.parseOpenBlock(builder,parser);    return GroovyElementTypes.PATH_PROPERTY_REFERENCE;  }  if (tokenType == GroovyTokenTypes.mLPAREN) {    PrimaryExpression.parenthesizedExprParse(builder,parser);    return GroovyElementTypes.PATH_PROPERTY_REFERENCE;  }  if (TokenSets.KEYWORDS.contains(builder.getTokenType())) {    builder.advanceLexer();    return GroovyElementTypes.REFERENCE_EXPRESSION;  }  return GroovyElementTypes.WRONGWAY;}  }
class C{  public Label(String text,Image icon){  this(text);  this.icon=icon;  if (icon != null && icon.requiresDrawImage()) {    legacyRenderer=true;  }  endsWith3Points=UIManager.getInstance().getLookAndFeel().isDefaultEndsWith3Points();}  }
class C{  protected UnManagedFileSystem checkUnManagedFileSystemExistsInDB(String nativeGuid) throws IOException {  UnManagedFileSystem filesystemInfo=null;  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileSystemInfoNativeGUIdConstraint(nativeGuid),result);  List<URI> filesystemUris=new ArrayList<URI>();  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI unFileSystemtURI=iter.next();    filesystemUris.add(unFileSystemtURI);  }  for (  URI fileSystemURI : filesystemUris) {    filesystemInfo=_dbClient.queryObject(UnManagedFileSystem.class,fileSystemURI);    if (filesystemInfo != null && !filesystemInfo.getInactive()) {      return filesystemInfo;    }  }  return null;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.TEMPLATE_SEGMENT__RAW_VALUE:    return getRawValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void clearCachedCrc(){  privateCrc=CRC_NOT_SET;  setFlags(false,FLAG_CRC_CALCED);}  }
class C{  public void testFormatInfinitySN(){  mFReal=new FormatReal(2,2);  clearStrBuffer();  mStr=mFReal.format(mStrBuff,Float.NEGATIVE_INFINITY).toString();  assertEquals("Should be negative Infinity","#-Infinity#",mStr);}  }
class C{  public CBreakpointSynchronizer(final BreakpointManager manager,final ZyGraph graph){  m_manager=Preconditions.checkNotNull(manager,"IE01509: Manager argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01510: Graph argument can not be null");  manager.addListener(m_breakpointManagerListener);  CBreakpointPainter.paintBreakpoints(manager,m_graph);}  }
class C{  protected ExpressionListImpl(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:32.931 -0500",hash_original_method="A3CDE33229CB27B38C3E63AFF1767104",hash_generated_method="26BC287997A7254A5A12B42366A4EE4F") @Override public void finish() throws IOException {  super.finish();  writeLong(crc.getValue());  writeLong(crc.tbytes);}  }
class C{  public static Process spawnChildProcess(Class<?> childMain,String[] inputArgs,InputStream in,OutputStream out,OutputStream err) throws IOException {  RuntimeMXBean rmxb=ManagementFactory.getRuntimeMXBean();  List<String> arglist=rmxb.getInputArguments();  String cp=rmxb.getClassPath();  ArrayList<String> arguments=new ArrayList<String>(arglist);  arguments.add(0,"java");  arguments.add("-classpath");  arguments.add(cp);  arguments.add(childMain.getCanonicalName());  for (  String arg : inputArgs)   arguments.add(arg);  ProcessBuilder pb=new ProcessBuilder(arguments);  if (err == out) {    pb.redirectErrorStream(true);  }  Process proc;  proc=pb.start();  if (in != null) {    new OutputReader(in,proc.getOutputStream()).start();  }  if (out == null) {    out=new NullOutputStream();  }  new OutputReader(proc.getInputStream(),out).start();  if (!pb.redirectErrorStream()) {    if (err == null) {      err=new NullOutputStream();    }    new OutputReader(proc.getErrorStream(),err).start();  }  return proc;}  }
class C{  public static boolean sqlType(Object obj){  return obj == null || obj instanceof BigDecimal || obj instanceof Boolean || obj instanceof Byte || obj instanceof byte[] || obj instanceof java.util.Date || obj instanceof Double || obj instanceof Float || obj instanceof Integer || obj instanceof Long || obj instanceof Short || obj instanceof String || obj instanceof URL;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double k=0.5;  double z;  int rIn, gIn, bIn, rOut, gOut, bOut;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  k=Double.parseDouble(args[2]);  if (k < 0) {    k=0;  }  if (k > 1) {    k=1;  }  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int progress=0;    WhiteboxRaster input=new WhiteboxRaster(inputHeader,"r");    if (input.getDataScale() != WhiteboxRasterBase.DataScale.RGB) {      showFeedback("The input image should be of an RGB data scale.");      return;    }    int rows=input.getNumberRows();    int cols=input.getNumberColumns();    double noData=input.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRasterBase.DataScale.RGB);    double[] data;    int minVal;    double rMax=0, gMax=0, bMax=0;    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          rIn=((int)z & 0xFF);          gIn=(((int)z >> 8) & 0xFF);          bIn=(((int)z >> 16) & 0xFF);          minVal=rIn;          if (gIn < minVal) {            minVal=gIn;          }          if (bIn < minVal) {            minVal=bIn;          }          rOut=(int)(rIn - k * minVal);          gOut=(int)(gIn - k * minVal);          bOut=(int)(bIn - k * minVal);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          if (rOut > rMax) {            rMax=rOut;          }          if (gOut > gMax) {            gMax=gOut;          }          if (bOut > bMax) {            bMax=bOut;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    for (row=0; row < rows; row++) {      data=input.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          rIn=((int)z & 0xFF);          gIn=(((int)z >> 8) & 0xFF);          bIn=(((int)z >> 16) & 0xFF);          rOut=(int)(rIn / rMax * 255);          gOut=(int)(gIn / gMax * 255);          bOut=(int)(bIn / bMax * 255);          if (rOut > 255) {            rOut=255;          }          if (gOut > 255) {            gOut=255;          }          if (bOut > 255) {            bOut=255;          }          if (rOut < 0) {            rOut=0;          }          if (gOut < 0) {            gOut=0;          }          if (bOut < 0) {            bOut=0;          }          z=(double)((255 << 24) | (bOut << 16) | (gOut << 8)| rOut);          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    input.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ContextedRuntimeException(final String message){  super(message);  exceptionContext=new DefaultExceptionContext();}  }
class C{  public static IntList incrList(IntList L,int x){  if (L == null) {    return null;  }  IntList incrementedList=new IntList(L.head + x,null);  incrementedList.tail=incrList(L.tail,x);  return incrementedList;}  }
class C{  MethodKey put(InvocationPlugin value,boolean isStatic,boolean isOptional,boolean allowOverwrite,Type declaringClass,String name,Type... argumentTypes){  assert isStatic || argumentTypes[0] == declaringClass;  String internalName=MetaUtil.toInternalName(declaringClass.getTypeName());  ClassPlugins classPlugins=registrations.get(internalName);  if (classPlugins == null) {    classPlugins=new ClassPlugins(declaringClass);    registrations.put(internalName,classPlugins);  }  assert isStatic || argumentTypes[0] == declaringClass;  MethodKey methodKey=new MethodKey(metaAccess,value,isStatic,isOptional,name,argumentTypes);  classPlugins.register(methodKey,allowOverwrite);  return methodKey;}  }
class C{  public static OpenFlags fromOptions(Iterable<? extends OpenOption> options){  OpenFlags flags=new OpenFlags();  for (  OpenOption option : options) {    if (!setStandardOption(flags,option)) {      throw new UnsupportedOperationException("unknown option: " + option);    }  }  return flags;}  }
class C{  protected static int computeNavigableDepth(int lookupStream,int[] nextStreams,QueryGraph queryGraph){  int currentStream=lookupStream;  int currentDepth=0;  for (int i=0; i < nextStreams.length; i++) {    int nextStream=nextStreams[i];    boolean navigable=queryGraph.isNavigableAtAll(currentStream,nextStream);    if (!navigable) {      break;    }    currentStream=nextStream;    currentDepth++;  }  return currentDepth;}  }
class C{  public static <T>Box<T> create(){  return new Box<T>();}  }
class C{  public static String createToken(UserDetails userDetails){  long expires=System.currentTimeMillis() + 1000L * 60 * 60;  StringBuilder tokenBuilder=new StringBuilder();  tokenBuilder.append(userDetails.getUsername()).append(":");  tokenBuilder.append(expires).append(":");  tokenBuilder.append(TokenUtils.computeSignature(userDetails,expires));  return tokenBuilder.toString();}  }
class C{  protected PriceModelType evaluateCalculationMode(Node priceModelNode){  String calculationMode=XMLConverter.getStringAttValue(priceModelNode,BillingResultXMLTags.CALCULATION_MODE_ATTRIBUTE_NAME);  PriceModelType priceModelType=PriceModelType.PRO_RATA;  if (calculationMode != null && calculationMode.equals(PriceModelType.PER_UNIT.name())) {    priceModelType=PriceModelType.PER_UNIT;  }  return priceModelType;}  }
class C{  private <T>List<T> removeDuplicate(List<T> listWithDuplicates){  List<T> uniqueList=new ArrayList<T>(new LinkedHashSet<T>(listWithDuplicates));  return uniqueList;}  }
class C{  protected void appendDetail(final StringBuffer buffer,final String fieldName,final short[] array){  buffer.append(arrayStart);  for (int i=0; i < array.length; i++) {    if (i > 0) {      buffer.append(arraySeparator);    }    appendDetail(buffer,fieldName,array[i]);  }  buffer.append(arrayEnd);}  }
class C{  private static Scenario buildScenario(String folder,int numberOfPersons,long seed,int run){  MatsimRandom.reset(seed * run);  Scenario sc=Utils3D.elevateEquilNetwork();  sc=buildPersonsWithPlans(sc,numberOfPersons);  sc=buildVehicles(sc);  if (folder != null) {    folder+=folder.endsWith("/") ? "" : "/";    new File(folder + "matsim/").mkdirs();    new NetworkWriter(sc.getNetwork()).write(folder + "matsim/network.xml.gz");    new PopulationWriter(sc.getPopulation()).write(folder + "matsim/population.xml.gz");    new ObjectAttributesXmlWriter(sc.getPopulation().getPersonAttributes()).writeFile(folder + "matsim/populationAttributes.xml.gz");    new VehicleWriterV1(sc.getVehicles()).writeFile(folder + "matsim/vehicles.xml.gz");    write3dEquilNetwork(folder,sc);  }  return sc;}  }
class C{  protected String doIt() throws Exception {  log.info("C_Project_ID=" + m_C_Project_ID);  if (m_C_Project_ID == 0)   throw new IllegalArgumentException("C_Project_ID == 0");  MProject fromProject=getProject(getCtx(),m_C_Project_ID,get_TrxName());  Env.setSOTrx(getCtx(),true);  MOrder order=new MOrder(fromProject,true,MOrder.DocSubTypeSO_OnCredit);  if (!order.save())   throw new Exception("Could not create Order");  int count=0;  if (MProject.PROJECTCATEGORY_ServiceChargeProject.equals(fromProject.getProjectCategory())) {    throw new Exception("Service Charge Projects are on the TODO List");  } else {    MProjectLine[] lines=fromProject.getLines();    for (int i=0; i < lines.length; i++) {      MOrderLine ol=new MOrderLine(order);      ol.setLine(lines[i].getLine());      ol.setDescription(lines[i].getDescription());      ol.setM_Product_ID(lines[i].getM_Product_ID(),true);      ol.setQty(lines[i].getPlannedQty().subtract(lines[i].getInvoicedQty()));      ol.setPrice();      if (lines[i].getPlannedPrice() != null && lines[i].getPlannedPrice().compareTo(Env.ZERO) != 0)       ol.setPrice(lines[i].getPlannedPrice());      ol.setDiscount();      ol.setTax();      if (ol.save())       count++;    }    if (lines.length != count)     log.log(Level.SEVERE,"Lines difference - ProjectLines=" + lines.length + " <> Saved="+ count);  }  return "@C_Order_ID@ " + order.getDocumentNo() + " ("+ count+ ")";}  }
class C{  public boolean isTimeout(){  final long timeout=8000;  return (SystemClock.elapsedRealtime() - mLastPostTime > timeout) && (mLastReceiveTime < mLastPostTime);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StackedXYAreaRenderer) || !super.equals(obj)) {    return false;  }  StackedXYAreaRenderer that=(StackedXYAreaRenderer)obj;  if (!PaintUtilities.equal(this.shapePaint,that.shapePaint)) {    return false;  }  if (!ObjectUtilities.equal(this.shapeStroke,that.shapeStroke)) {    return false;  }  return true;}  }
class C{  @Override public void clear(){}  }
class C{  synchronized void checkThreshold(){  Ratio failureRatio=circuit.getFailureThreshold();  if (failureRatio != null && bitSet.occupiedBits() >= failureRatio.denominator && bitSet.negativeRatio() >= failureRatio.ratio)   circuit.open();  if (failureRatio == null && bitSet.negativeRatio() == 1)   circuit.open();}  }
class C{  public h3 addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private void initTable(){  table.setShowCSVInPopupMenu(true);  table.setShowDeleteColumnPopupMenu(false);  table.setShowInsertColumnPopupMenu(false);  table.setShowEditInPopupMenu(false);  table.setDisplayColumnHeadings(true);  table.setColumnHeadings(Arrays.asList("Entry"));  scroller.setTable(table);  scroller.revalidate();}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.245 -0400",hash_original_method="44D5CA24014EE7A19866ABFBD1E3495E",hash_generated_method="6E79CA034362D8596520798E17C51E5E") @Override public void write(String str){}  }
class C{  public MinMaxCriterion(){}  }
class C{  protected void parseMatrix() throws ParseException, IOException {  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 't') {    reportCharacterExpectedError('t',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'r') {    reportCharacterExpectedError('r',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'i') {    reportCharacterExpectedError('i',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'x') {    reportCharacterExpectedError('x',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  if (current != '(') {    reportCharacterExpectedError('(',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  float a=parseFloat();  skipCommaSpaces();  float b=parseFloat();  skipCommaSpaces();  float c=parseFloat();  skipCommaSpaces();  float d=parseFloat();  skipCommaSpaces();  float e=parseFloat();  skipCommaSpaces();  float f=parseFloat();  skipSpaces();  if (current != ')') {    reportCharacterExpectedError(')',current);    skipTransform();    return;  }  transformListHandler.matrix(a,b,c,d,e,f);}  }
class C{  public void print(JTextPane pane){  setDocument(pane);  printDialog();}  }
class C{  public BuilderForDnsDiscoverer clusterDns(String clusterDns){  super.clusterDns=clusterDns;  return this;}  }
class C{  @Override protected void managedVolumeSetLabel(BlockObject blockObject,String deviceLabel){  if (deviceLabel.contains("(")) {    blockObject.setLabel(deviceLabel.substring(0,deviceLabel.indexOf('(') - 1));    blockObject.setDeviceLabel(deviceLabel.substring(deviceLabel.indexOf('(') + 1,deviceLabel.indexOf(')')));  } else {    super.managedVolumeSetLabel(blockObject,deviceLabel);  }}  }
class C{  public void initialize(Context ctx){  mCacheDir=new File(ctx.getCacheDir(),"albumart");  if (!mCacheDir.exists() && !mCacheDir.mkdir()) {    Log.e(TAG,"Cannot mkdir the cache dir " + mCacheDir.getPath());  }  File[] entries=mCacheDir.listFiles();  if (entries != null) {    for (    File entry : entries) {      if (System.currentTimeMillis() - entry.lastModified() > EXPIRATION_TIME && entry.getName().contains("playlist")) {        if (!entry.delete()) {          mEntries.add(entry.getName());        }      } else {        mEntries.add(entry.getName());      }    }  }  mDefaultArt=((BitmapDrawable)ctx.getResources().getDrawable(R.drawable.album_placeholder)).getBitmap();  SharedPreferences prefs=ctx.getSharedPreferences(SettingsKeys.PREF_SETTINGS,0);  AlbumArtCache.CREATIVE_COMMONS=prefs.getBoolean(SettingsKeys.KEY_FREE_ART,false);}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testLinkSetConsistency2(){  doLoadData();  final ValueFactory vf=om.getValueFactory();  final URI workeruri=vf.createURI("gpo:#123");  IGPO workergpo=om.getGPO(workeruri);  final URI worksFor=vf.createURI("attr:/employee#worksFor");  final ILinkSet ls=workergpo.getLinksOut(worksFor);  assertTrue(ls.size() > 0);  final IGPO employer=ls.iterator().next();  final ILinkSet employees=employer.getLinksIn(worksFor);  assertTrue(employees.contains(workergpo));  final URI newuri=vf.createURI("gpo:#999");  workergpo.setValue(worksFor,newuri);  assertFalse(employees.contains(workergpo));  assertTrue(om.getGPO(newuri).getLinksIn(worksFor).contains(workergpo));}  }
class C{  public CoapEndpoint(final Connector connector,final NetworkConfig config,final MessageExchangeStore exchangeStore){  this.config=config;  this.connector=connector;  this.connector.setRawDataReceiver(new InboxImpl());  this.exchangeStore=exchangeStore;  if (connector instanceof TcpConnector) {    this.matcher=new TcpMatcher(config);    this.coapstack=new CoapTcpStack(config,new OutboxImpl());    this.serializer=new TcpDataSerializer();    this.parser=new TcpDataParser();  } else {    this.matcher=new UdpMatcher(config);    this.coapstack=new CoapUdpStack(config,new OutboxImpl());    this.serializer=new UdpDataSerializer();    this.parser=new UdpDataParser();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @SuppressWarnings("unused") public final static int put(IoBuffer out,IoBuffer in,int numBytesMax){  int limit=in.limit();  int capacity=in.capacity();  int numBytesRead=(numBytesMax > in.remaining()) ? in.remaining() : numBytesMax;  int thisLimit=(in.position() + numBytesRead <= in.capacity()) ? in.position() + numBytesRead : capacity;  if (in != null) {    in.limit(thisLimit);    out.put(in);  } else {    numBytesRead=0;  }  in.limit(limit);  return numBytesRead;}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public static void overflowCondition(final long offset,final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions,final String firstOperand){  final OperandSize qw=OperandSize.QWORD;  final OperandSize dw=OperandSize.DWORD;  final OperandSize bt=OperandSize.BYTE;  final String isNotOverflowed=environment.getNextVariableString();  final String tmpVar7=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,qw,firstOperand,dw,String.valueOf(-32),dw,tmpVar7));  instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar7,bt,isNotOverflowed));  instructions.add(ReilHelpers.createBisz(baseOffset++,bt,isNotOverflowed,bt,"Q"));}  }
class C{  public Vertex discover(Vertex source,Vertex vertex,Vertex vertex2,Vertex vertex3,Vertex vertex4,Vertex vertex5){  return discover(true,true,null,vertex,vertex2,vertex3,vertex4,vertex5);}  }
class C{  public T caseOrdinalOp_(OrdinalOp_ object){  return null;}  }
class C{  public IllegalAddressException(String message){  super(message);}  }
class C{  protected void initResultMatrix(){  m_ResultMatrix.setSize(getNumResultsets(),getNumDatasets());  m_ResultMatrix.setShowStdDev(m_ShowStdDevs);  for (int i=0; i < getNumDatasets(); i++) {    m_ResultMatrix.setRowName(i,templateString(m_DatasetSpecifiers.specifier(i)));  }  for (int j=0; j < getNumResultsets(); j++) {    m_ResultMatrix.setColName(j,getResultsetName(j));    m_ResultMatrix.setColHidden(j,!displayResultset(j));  }}  }
class C{  public OFMirrorGetVendorDataReply(){  super(BSN_GET_MIRRORING_REPLY);}  }
class C{  protected String sanitizeFilename(String filename){  return filename.replaceAll("\\\\","_").replaceAll(":","_").replaceAll("/","_");}  }
class C{  public CGroupNodeMenu(final JFrame parent,final INaviView view,final CGroupNode node){  Preconditions.checkNotNull(parent,"IE02138: Parent argument can not be null");  Preconditions.checkNotNull(view,"IE02139: View argument can not be null");  Preconditions.checkNotNull(node,"IE00971: Node argument can't be null");  add(new JMenuItem(CActionProxy.proxy(new CEditGroupCommentAction(parent,node))));  addSeparator();  if (node.isCollapsed()) {    add(new JMenuItem(CActionProxy.proxy(new CActionExpandNode(node))));  } else {    add(new JMenuItem(CActionProxy.proxy(new CActionCollapseNode(node))));  }  addSeparator();  add(new JMenuItem(CActionProxy.proxy(new CRemoveGroupAction(view,node))));}  }
class C{  public String hashCodeExpression(){switch (method.getReturnType().getKind()) {case BYTE:case SHORT:case CHAR:case INT:    return this.toString();case LONG:  return "(" + this + " >>> 32) ^ "+ this;case FLOAT:return "Float.floatToIntBits(" + this + ")";case DOUBLE:return "(Double.doubleToLongBits(" + this + ") >>> 32) ^ "+ "Double.doubleToLongBits("+ this+ ")";case BOOLEAN:return this + " ? 1231 : 1237";case ARRAY:return vars.get("Arrays") + ".hashCode(" + this+ ")";default :if (nullable()) {return "(" + this + " == null) ? 0 : "+ this+ ".hashCode()";} else {return this + ".hashCode()";}}}  }
class C{  public int uLength(){  return nU;}  }
class C{  public FastNodingValidator(Collection segStrings){  this.segStrings=segStrings;}  }
class C{  public void initialize(String name,final Scheduler scheduler,ClassLoadHelper schedulerFactoryClassLoadHelper) throws SchedulerException {  super.initialize(name,scheduler);  this.classLoadHelper=schedulerFactoryClassLoadHelper;  getLog().info("Registering Quartz Job Initialization Plug-in.");  StringTokenizer stok=new StringTokenizer(fileNames,FILE_NAME_DELIMITERS);  while (stok.hasMoreTokens()) {    final String fileName=stok.nextToken();    final JobFile jobFile=new JobFile(fileName);    jobFiles.put(fileName,jobFile);  }}  }
class C{  public Assignment intersect(Assignment assign){  Assignment intersect=new Assignment();  for (  String var : map.keySet()) {    Value v=map.get(var);    if (assign.getValue(var).equals(v)) {      intersect.addPair(var,v);    }  }  return intersect;}  }
class C{  public T caseIdentifiableElement(IdentifiableElement object){  return null;}  }
class C{  void doHandshake(String user,String password,String database) throws SQLException {  this.checkPacketSequence=false;  this.readPacketSequence=0;  Buffer buf=readPacket();  this.protocolVersion=buf.readByte();  if (this.protocolVersion == -1) {    try {      this.mysqlConnection.close();    } catch (    Exception e) {    }    int errno=2000;    errno=buf.readInt();    String serverErrorMessage=buf.readString("ASCII",getExceptionInterceptor());    StringBuilder errorBuf=new StringBuilder(Messages.getString("MysqlIO.10"));    errorBuf.append(serverErrorMessage);    errorBuf.append("\"");    String xOpen=SQLError.mysqlToSqlState(errno,this.connection.getUseSqlStateCodes());    throw SQLError.createSQLException(SQLError.get(xOpen) + ", " + errorBuf.toString(),xOpen,errno,getExceptionInterceptor());  }  this.serverVersion=buf.readString("ASCII",getExceptionInterceptor());  int point=this.serverVersion.indexOf('.');  if (point != -1) {    try {      int n=Integer.parseInt(this.serverVersion.substring(0,point));      this.serverMajorVersion=n;    } catch (    NumberFormatException NFE1) {    }    String remaining=this.serverVersion.substring(point + 1,this.serverVersion.length());    point=remaining.indexOf('.');    if (point != -1) {      try {        int n=Integer.parseInt(remaining.substring(0,point));        this.serverMinorVersion=n;      } catch (      NumberFormatException nfe) {      }      remaining=remaining.substring(point + 1,remaining.length());      int pos=0;      while (pos < remaining.length()) {        if ((remaining.charAt(pos) < '0') || (remaining.charAt(pos) > '9')) {          break;        }        pos++;      }      try {        int n=Integer.parseInt(remaining.substring(0,pos));        this.serverSubMinorVersion=n;      } catch (      NumberFormatException nfe) {      }    }  }  if (versionMeetsMinimum(4,0,8)) {    this.maxThreeBytes=(256 * 256 * 256) - 1;    this.useNewLargePackets=true;  } else {    this.maxThreeBytes=255 * 255 * 255;    this.useNewLargePackets=false;  }  this.colDecimalNeedsBump=versionMeetsMinimum(3,23,0);  this.colDecimalNeedsBump=!versionMeetsMinimum(3,23,15);  this.useNewUpdateCounts=versionMeetsMinimum(3,22,5);  this.threadId=buf.readLong();  if (this.protocolVersion > 9) {    this.seed=buf.readString("ASCII",getExceptionInterceptor(),8);    buf.readByte();  } else {    this.seed=buf.readString("ASCII",getExceptionInterceptor());  }  this.serverCapabilities=0;  if (buf.getPosition() < buf.getBufLength()) {    this.serverCapabilities=buf.readInt();  }  if ((versionMeetsMinimum(4,1,1) || ((this.protocolVersion > 9) && (this.serverCapabilities & CLIENT_PROTOCOL_41) != 0))) {    this.serverCharsetIndex=buf.readByte() & 0xff;    this.serverStatus=buf.readInt();    checkTransactionState(0);    this.serverCapabilities|=buf.readInt() << 16;    if ((this.serverCapabilities & CLIENT_PLUGIN_AUTH) != 0) {      this.authPluginDataLength=buf.readByte() & 0xff;    } else {      buf.readByte();    }    buf.setPosition(buf.getPosition() + 10);    if ((this.serverCapabilities & CLIENT_SECURE_CONNECTION) != 0) {      String seedPart2;      StringBuilder newSeed;      if (this.authPluginDataLength > 0) {        seedPart2=buf.readString("ASCII",getExceptionInterceptor(),this.authPluginDataLength - 8);        newSeed=new StringBuilder(this.authPluginDataLength);      } else {        seedPart2=buf.readString("ASCII",getExceptionInterceptor());        newSeed=new StringBuilder(SEED_LENGTH);      }      newSeed.append(this.seed);      newSeed.append(seedPart2);      this.seed=newSeed.toString();    }  }  if (((this.serverCapabilities & CLIENT_COMPRESS) != 0) && this.connection.getUseCompression()) {    this.clientParam|=CLIENT_COMPRESS;  }  this.useConnectWithDb=(database != null) && (database.length() > 0) && !this.connection.getCreateDatabaseIfNotExist();  if (this.useConnectWithDb) {    this.clientParam|=CLIENT_CONNECT_WITH_DB;  }  if (versionMeetsMinimum(5,7,0) && !this.connection.getUseSSL() && !this.connection.isUseSSLExplicit()) {    this.connection.setUseSSL(true);    this.connection.setVerifyServerCertificate(false);    this.connection.getLog().logWarn(Messages.getString("MysqlIO.SSLWarning"));  }  if (((this.serverCapabilities & CLIENT_SSL) == 0) && this.connection.getUseSSL()) {    if (this.connection.getRequireSSL()) {      this.connection.close();      forceClose();      throw SQLError.createSQLException(Messages.getString("MysqlIO.15"),SQLError.SQL_STATE_UNABLE_TO_CONNECT_TO_DATASOURCE,getExceptionInterceptor());    }    this.connection.setUseSSL(false);  }  if ((this.serverCapabilities & CLIENT_LONG_FLAG) != 0) {    this.clientParam|=CLIENT_LONG_FLAG;    this.hasLongColumnInfo=true;  }  if (!this.connection.getUseAffectedRows()) {    this.clientParam|=CLIENT_FOUND_ROWS;  }  if (this.connection.getAllowLoadLocalInfile()) {    this.clientParam|=CLIENT_LOCAL_FILES;  }  if (this.isInteractiveClient) {    this.clientParam|=CLIENT_INTERACTIVE;  }  if ((this.serverCapabilities & CLIENT_SESSION_TRACK) != 0) {  }  if ((this.serverCapabilities & CLIENT_DEPRECATE_EOF) != 0) {    this.clientParam|=CLIENT_DEPRECATE_EOF;  }  if ((this.serverCapabilities & CLIENT_PLUGIN_AUTH) != 0) {    proceedHandshakeWithPluggableAuthentication(user,password,database,buf);    return;  }  if (this.protocolVersion > 9) {    this.clientParam|=CLIENT_LONG_PASSWORD;  } else {    this.clientParam&=~CLIENT_LONG_PASSWORD;  }  if ((versionMeetsMinimum(4,1,0) || ((this.protocolVersion > 9) && (this.serverCapabilities & CLIENT_RESERVED) != 0))) {    if ((versionMeetsMinimum(4,1,1) || ((this.protocolVersion > 9) && (this.serverCapabilities & CLIENT_PROTOCOL_41) != 0))) {      this.clientParam|=CLIENT_PROTOCOL_41;      this.has41NewNewProt=true;      this.clientParam|=CLIENT_TRANSACTIONS;      this.clientParam|=CLIENT_MULTI_RESULTS;      if (this.connection.getAllowMultiQueries()) {        this.clientParam|=CLIENT_MULTI_STATEMENTS;      }    } else {      this.clientParam|=CLIENT_RESERVED;      this.has41NewNewProt=false;    }    this.use41Extensions=true;  }  int passwordLength=16;  int userLength=(user != null) ? user.length() : 0;  int databaseLength=(database != null) ? database.length() : 0;  int packLength=((userLength + passwordLength + databaseLength) * 3) + 7 + HEADER_LENGTH+ AUTH_411_OVERHEAD;  Buffer packet=null;  if (!this.connection.getUseSSL()) {    if ((this.serverCapabilities & CLIENT_SECURE_CONNECTION) != 0) {      this.clientParam|=CLIENT_SECURE_CONNECTION;      if ((versionMeetsMinimum(4,1,1) || ((this.protocolVersion > 9) && (this.serverCapabilities & CLIENT_PROTOCOL_41) != 0))) {        secureAuth411(null,packLength,user,password,database,true);      } else {        secureAuth(null,packLength,user,password,database,true);      }    } else {      packet=new Buffer(packLength);      if ((this.clientParam & CLIENT_RESERVED) != 0) {        if ((versionMeetsMinimum(4,1,1) || ((this.protocolVersion > 9) && (this.serverCapabilities & CLIENT_PROTOCOL_41) != 0))) {          packet.writeLong(this.clientParam);          packet.writeLong(this.maxThreeBytes);          packet.writeByte((byte)8);          packet.writeBytesNoNull(new byte[23]);        } else {          packet.writeLong(this.clientParam);          packet.writeLong(this.maxThreeBytes);        }      } else {        packet.writeInt((int)this.clientParam);        packet.writeLongInt(this.maxThreeBytes);      }      packet.writeString(user,CODE_PAGE_1252,this.connection);      if (this.protocolVersion > 9) {        packet.writeString(Util.newCrypt(password,this.seed,this.connection.getPasswordCharacterEncoding()),CODE_PAGE_1252,this.connection);      } else {        packet.writeString(Util.oldCrypt(password,this.seed),CODE_PAGE_1252,this.connection);      }      if (this.useConnectWithDb) {        packet.writeString(database,CODE_PAGE_1252,this.connection);      }      send(packet,packet.getPosition());    }  } else {    negotiateSSLConnection(user,password,database,packLength);    if ((this.serverCapabilities & CLIENT_SECURE_CONNECTION) != 0) {      if (versionMeetsMinimum(4,1,1)) {        secureAuth411(null,packLength,user,password,database,true);      } else {        secureAuth411(null,packLength,user,password,database,true);      }    } else {      packet=new Buffer(packLength);      if (this.use41Extensions) {        packet.writeLong(this.clientParam);        packet.writeLong(this.maxThreeBytes);      } else {        packet.writeInt((int)this.clientParam);        packet.writeLongInt(this.maxThreeBytes);      }      packet.writeString(user);      if (this.protocolVersion > 9) {        packet.writeString(Util.newCrypt(password,this.seed,this.connection.getPasswordCharacterEncoding()));      } else {        packet.writeString(Util.oldCrypt(password,this.seed));      }      if (((this.serverCapabilities & CLIENT_CONNECT_WITH_DB) != 0) && (database != null) && (database.length() > 0)) {        packet.writeString(database);      }      send(packet,packet.getPosition());    }  }  if (!(versionMeetsMinimum(4,1,1)) || !((this.protocolVersion > 9) && (this.serverCapabilities & CLIENT_PROTOCOL_41) != 0)) {    checkErrorPacket();  }  if (((this.serverCapabilities & CLIENT_COMPRESS) != 0) && this.connection.getUseCompression() && !(this.mysqlInput instanceof CompressedInputStream)) {    this.deflater=new Deflater();    this.useCompression=true;    this.mysqlInput=new CompressedInputStream(this.connection,this.mysqlInput);  }  if (!this.useConnectWithDb) {    changeDatabaseTo(database);  }  try {    this.mysqlConnection=this.socketFactory.afterHandshake();  } catch (  IOException ioEx) {    throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,ioEx,getExceptionInterceptor());  }}  }
class C{  public JSONObject(){  this.map=new LinkedHashMap<String,Object>();}  }
class C{  @Override public boolean supportsSchemasInTableDefinitions(){  debugCodeCall("supportsSchemasInTableDefinitions");  return true;}  }
class C{  public GmlUpperCorner(){  super(Namespaces.GML_NAMESPACE,NAME);}  }
class C{  protected void onAdjustChildViews(boolean down){  if (down)   correctTooHigh(getChildCount()); else   correctTooLow(getChildCount());}  }
class C{  static short computeSize(final int k) throws SketchesArgumentException {  if (k < 1 || k > MAX_ABS_VALUE) {    throw new SketchesArgumentException("Can only encode strictly positive sketch sizes " + "less than " + MAX_ABS_VALUE + ", found: "+ k);  }  final int p=Util.toLog2(Util.floorPowerOf2(k),"computeSize: p");  if (Util.isPowerOf2(k)) {    return (short)(((p & EXPONENT_MASK) << EXPONENT_SHIFT) & OUTPUT_MASK);  }  final double m=Math.pow(2.0,Math.log(k) * INV_LN_2 - p);  final int i=(int)Math.floor(m * BINS_PER_OCTAVE) - BINS_PER_OCTAVE + 1;  if (i == BINS_PER_OCTAVE) {    return (short)((((p + 1) & EXPONENT_MASK) << EXPONENT_SHIFT) & OUTPUT_MASK);  }  return (short)(((p & EXPONENT_MASK) << EXPONENT_SHIFT) | (i & INDEX_MASK) & OUTPUT_MASK);}  }
class C{  public CLIOutputResponse revert(RevertRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  addOption(cliArgs,"--depth",request.getDepth());  cliArgs.add("revert");  final CommandLineResult result=runCommand(null,cliArgs,projectPath,addWorkingCopyPathIfNecessary(request.getPaths()));  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  public ListDemo(SpreadsheetService service,PrintStream outputStream){  this.out=outputStream;  this.service=service;  this.factory=FeedURLFactory.getDefault();  this.entriesCached=new HashMap<String,ListEntry>();}  }
class C{  public String toString(){  return name.toString();}  }
class C{  private void sendQueuedNotifications(){  Notification n;  while ((n=pendingNotifs.poll()) != null) {    broadcaster.sendNotification(n);  }}  }
class C{  public void buildGraphicsNode(BridgeContext ctx,Element e,GraphicsNode node){  super.buildGraphicsNode(ctx,e,node);  if (ctx.isInteractive()) {    NodeEventTarget target=(NodeEventTarget)e;    EventListener l=new CursorMouseOverListener(ctx);    target.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOVER,l,false,null);    ctx.storeEventListenerNS(target,XMLConstants.XML_EVENTS_NAMESPACE_URI,SVG_EVENT_MOUSEOVER,l,false);  }}  }
class C{  private DisiWrapper insertTailWithOverFlow(DisiWrapper s){  if (tailSize < tail.length) {    addTail(s);    return null;  } else   if (tail.length >= 1) {    final DisiWrapper top=tail[0];    if (top.cost < s.cost) {      tail[0]=s;      downHeapCost(tail,tailSize);      return top;    }  }  return s;}  }
class C{  private static void finalizationConvexHull(DTSweepContext tcx){  AdvancingFrontNode n1, n2;  DelaunayTriangle t1, t2;  TriangulationPoint first, p1;  n1=tcx.aFront.head.next;  n2=n1.next;  first=n1.point;  turnAdvancingFrontConvex(tcx,n1,n2);  n1=tcx.aFront.tail.prev;  if (n1.triangle.contains(n1.next.point) && n1.triangle.contains(n1.prev.point)) {    t1=n1.triangle.neighborAcross(n1.point);    rotateTrianglePair(n1.triangle,n1.point,t1,t1.oppositePoint(n1.triangle,n1.point));    tcx.mapTriangleToNodes(n1.triangle);    tcx.mapTriangleToNodes(t1);  }  n1=tcx.aFront.head.next;  if (n1.triangle.contains(n1.prev.point) && n1.triangle.contains(n1.next.point)) {    t1=n1.triangle.neighborAcross(n1.point);    rotateTrianglePair(n1.triangle,n1.point,t1,t1.oppositePoint(n1.triangle,n1.point));    tcx.mapTriangleToNodes(n1.triangle);    tcx.mapTriangleToNodes(t1);  }  first=tcx.aFront.head.point;  n2=tcx.aFront.tail.prev;  t1=n2.triangle;  p1=n2.point;  n2.triangle=null;  do {    tcx.removeFromList(t1);    p1=t1.pointCCW(p1);    if (p1 == first)     break;    t2=t1.neighborCCW(p1);    t1.clear();    t1=t2;  } while (true);  first=tcx.aFront.head.next.point;  p1=t1.pointCW(tcx.aFront.head.point);  t2=t1.neighborCW(tcx.aFront.head.point);  t1.clear();  t1=t2;  while (p1 != first) {    tcx.removeFromList(t1);    p1=t1.pointCCW(p1);    t2=t1.neighborCCW(p1);    t1.clear();    t1=t2;  }  tcx.aFront.head=tcx.aFront.head.next;  tcx.aFront.head.prev=null;  tcx.aFront.tail=tcx.aFront.tail.prev;  tcx.aFront.tail.next=null;  tcx.finalizeTriangulation();}  }
class C{  public static int staticNextInt(int n,double p){synchronized (shared) {    return shared.nextInt(n,p);  }}  }
class C{  public void delete(ForumPostConfig config){  config.addCredentials(this);  POST(this.url + "/delete-forum-post",config.toXML());}  }
class C{  public PcdRunner(Graph graph,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graph,params,knowledgeBoxModel);}  }
class C{  public static LatLngBounds enlarge(LatLngBounds viewLatLngBounds,double factor){  double n=viewLatLngBounds.getLatNorth();  double e=viewLatLngBounds.getLonEast();  double s=viewLatLngBounds.getLatSouth();  double w=viewLatLngBounds.getLonWest();  double f=(factor - 1) / 2;  return new LatLngBounds.Builder().include(new LatLng(n + f * (n - s),e + f * (e - w))).include(new LatLng(s - f * (n - s),w - f * (e - w))).build();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void store(short val){  SimulatedMemory.setShort(this,val);}  }
class C{  public static void main(String[] argv){  runFilter(new ReservoirSample(),argv);}  }
class C{  protected static Config sandboxConfigs(){  Config config=Config.newBuilder().putAll(ClusterDefaults.getSandboxDefaults()).putAll(ClusterConfig.loadSandboxConfig()).build();  return config;}  }
class C{  public static void cancelTimer(Context context){  Log.d(TAG,"Cancelling timers");  AlarmManager alarmManager=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);  Intent intent=new Intent(context.getApplicationContext(),PodcastPlayerService.class);  intent.setAction(PodcastPlayerService.ACTION_SLEEP_TIMER);  alarmManager.cancel(PendingIntent.getService(context,0,intent,PendingIntent.FLAG_UPDATE_CURRENT));  AppPrefHelper.getInstance(context).removeSleepTimer();}  }
class C{  @SuppressWarnings("unchecked") public PutIndexTemplateRequest source(Map templateSource){  Map<String,Object> source=templateSource;  for (  Map.Entry<String,Object> entry : source.entrySet()) {    String name=entry.getKey();    if (name.equals("template")) {      template(entry.getValue().toString());    } else     if (name.equals("order")) {      order(XContentMapValues.nodeIntegerValue(entry.getValue(),order()));    } else     if (name.equals("settings")) {      if (!(entry.getValue() instanceof Map)) {        throw new IllegalArgumentException("Malformed settings section, should include an inner object");      }      settings((Map<String,Object>)entry.getValue());    } else     if (name.equals("mappings")) {      Map<String,Object> mappings=(Map<String,Object>)entry.getValue();      for (      Map.Entry<String,Object> entry1 : mappings.entrySet()) {        if (!(entry1.getValue() instanceof Map)) {          throw new IllegalArgumentException("Malformed mappings section for type [" + entry1.getKey() + "], should include an inner object describing the mapping");        }        mapping(entry1.getKey(),(Map<String,Object>)entry1.getValue());      }    } else     if (name.equals("aliases")) {      aliases((Map<String,Object>)entry.getValue());    } else {      IndexMetaData.Custom proto=IndexMetaData.lookupPrototype(name);      if (proto != null) {        try {          customs.put(name,proto.fromMap((Map<String,Object>)entry.getValue()));        } catch (        IOException e) {          throw new ElasticsearchParseException("failed to parse custom metadata for [{}]",name);        }      }    }  }  return this;}  }
class C{  public void addItem(Item item){synchronized (items) {    items.add(item);  }}  }
class C{  public void fetchCertificate(Collection<String> domains) throws IOException, AcmeException {  boolean createdNewKeyPair=false;  KeyPair userKeyPair;  if (USER_KEY_FILE.exists()) {    try (FileReader fr=new FileReader(USER_KEY_FILE)){      userKeyPair=KeyPairUtils.readKeyPair(fr);    }   } else {    userKeyPair=KeyPairUtils.createKeyPair(KEY_SIZE);    try (FileWriter fw=new FileWriter(USER_KEY_FILE)){      KeyPairUtils.writeKeyPair(userKeyPair,fw);    }     createdNewKeyPair=true;  }  Session session=new Session("acme://letsencrypt.org/staging",userKeyPair);  Registration reg=null;  try {    reg=new RegistrationBuilder().create(session);    LOG.info("Registered a new user, URI: " + reg.getLocation());  } catch (  AcmeConflictException ex) {    reg=Registration.bind(session,ex.getLocation());    LOG.info("Account does already exist, URI: " + reg.getLocation());  }  URI agreement=reg.getAgreement();  LOG.info("Terms of Service: " + agreement);  if (createdNewKeyPair) {    boolean accepted=acceptAgreement(reg,agreement);    if (!accepted) {      return;    }  }  for (  String domain : domains) {    Authorization auth=null;    try {      auth=reg.authorizeDomain(domain);    } catch (    AcmeUnauthorizedException ex) {      boolean accepted=acceptAgreement(reg,agreement);      if (!accepted) {        return;      }      auth=reg.authorizeDomain(domain);    }    LOG.info("New authorization for domain " + domain);    Challenge challenge=httpChallenge(auth,domain);    if (challenge == null) {      return;    }    challenge.trigger();    int attempts=10;    while (challenge.getStatus() != Status.VALID && attempts-- > 0) {      if (challenge.getStatus() == Status.INVALID) {        LOG.error("Challenge failed... Giving up.");        return;      }      try {        Thread.sleep(3000L);      } catch (      InterruptedException ex) {        LOG.warn("interrupted",ex);      }      challenge.update();    }    if (challenge.getStatus() != Status.VALID) {      LOG.error("Failed to pass the challenge... Giving up.");      return;    }  }  KeyPair domainKeyPair;  if (DOMAIN_KEY_FILE.exists()) {    try (FileReader fr=new FileReader(DOMAIN_KEY_FILE)){      domainKeyPair=KeyPairUtils.readKeyPair(fr);    }   } else {    domainKeyPair=KeyPairUtils.createKeyPair(KEY_SIZE);    try (FileWriter fw=new FileWriter(DOMAIN_KEY_FILE)){      KeyPairUtils.writeKeyPair(domainKeyPair,fw);    }   }  CSRBuilder csrb=new CSRBuilder();  csrb.addDomains(domains);  csrb.sign(domainKeyPair);  try (Writer out=new FileWriter(DOMAIN_CSR_FILE)){    csrb.write(out);  }   Certificate certificate=reg.requestCertificate(csrb.getEncoded());  LOG.info("Success! The certificate for domains " + domains + " has been generated!");  LOG.info("Certificate URI: " + certificate.getLocation());  X509Certificate cert=certificate.download();  try (FileWriter fw=new FileWriter(DOMAIN_CERT_FILE)){    CertificateUtils.writeX509Certificate(cert,fw);  }   X509Certificate[] chain=certificate.downloadChain();  try (FileWriter fw=new FileWriter(CERT_CHAIN_FILE)){    CertificateUtils.writeX509CertificateChain(chain,fw);  } }  }
class C{  public void createNewFile() throws SmbException {  if (getUncPath0().length() == 1) {    throw new SmbException("Invalid operation for workgroups, servers, or shares");  }  close(open0(O_RDWR | O_CREAT | O_EXCL,0,ATTR_NORMAL,0),0L);}  }
class C{  protected int _rowOffset(int absRank){  return rowOffsets[absRank];}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public boolean hasNext(){  return index < bits.length;}  }
class C{  public static boolean isArrayOrObjectLiteralUsedAsDestructuringPattern(EObject obj){  if (!(obj instanceof ArrayLiteral || obj instanceof ObjectLiteral))   return false;  final EObject root=getRootOfDestructuringPattern(obj);  final EObject parent=root.eContainer();  if (parent instanceof AssignmentExpression)   return ((AssignmentExpression)parent).getLhs() == root;  if (parent instanceof ForStatement)   return !((ForStatement)parent).isForPlain() && ((ForStatement)parent).getInitExpr() == root;  return false;}  }
class C{  protected void addProperties(Map<String,String> propMap) throws OpenStegoException {  super.addProperties(propMap);  Iterator<String> keys=null;  String key=null;  String value=null;  keys=propMap.keySet().iterator();  while (keys.hasNext()) {    key=keys.next();    if (key.equals(MAX_BITS_USED_PER_CHANNEL)) {      value=propMap.get(key).toString().trim();      try {        this.maxBitsUsedPerChannel=Integer.parseInt(value);      } catch (      NumberFormatException nfEx) {        throw new OpenStegoException(nfEx,LSBPlugin.NAMESPACE,LSBErrors.MAX_BITS_NOT_NUMBER,value);      }      if (this.maxBitsUsedPerChannel < 1 || this.maxBitsUsedPerChannel > 8) {        throw new OpenStegoException(null,LSBPlugin.NAMESPACE,LSBErrors.MAX_BITS_NOT_IN_RANGE,value);      }    }  }}  }
class C{  public RichText withStrikethrough(){  this.formats.add(Format.STRIKE_THROUGH);  return this;}  }
class C{  public WheelVerticalView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  private static int base64toInt(char c,byte[] alphaToInt){  int result=alphaToInt[c];  if (result < 0)   throw new IllegalArgumentException("Illegal character " + c);  return result;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputFile=null;  int minClass;  int maxClass;  int numClasses;  int i1, i2;  int[][] contingency;  double[] data1, data2;  double z1, z2;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  outputFile=args[2];  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    minClass=(int)(Math.min(image1.getMinimumValue(),image2.getMinimumValue()));    maxClass=(int)(Math.max(image1.getMaximumValue(),image2.getMaximumValue()));    numClasses=maxClass - minClass + 1;    contingency=new int[numClasses][numClasses];    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if (z1 != noData1 && z2 != noData2) {          i1=(int)(z1 - minClass);          i2=(int)(z2 - minClass);          contingency[i1][i2]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    image1.close();    image2.close();    double agreements=0;    double expectedFrequency=0;    double N=0;    double rowTotal=0;    double colTotal=0;    double kappa=0;    double overallAccuracy=0;    for (int a=0; a <= numClasses - 1; a++) {      agreements+=contingency[a][a];      for (int b=0; b <= numClasses - 1; b++) {        N+=contingency[a][b];      }    }    for (int a=0; a <= numClasses - 1; a++) {      rowTotal=0;      colTotal=0;      for (int b=0; b <= numClasses - 1; b++) {        colTotal+=contingency[a][b];        rowTotal+=contingency[b][a];      }      expectedFrequency+=(colTotal * rowTotal) / N;    }    kappa=(agreements - expectedFrequency) / (N - expectedFrequency);    overallAccuracy=agreements / N;    File file=new File(outputFile);    FileWriter fw=null;    BufferedWriter bw=null;    PrintWriter out=null;    try {      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      String str;      str="<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";      out.println(str);      str="<head>";      out.println(str);      str="<meta content=\"text/html; charset=iso-8859-1\" http-equiv=\"content-type\"><title>Kappa Index of Agreement Output</title>";      out.println(str);      str="</head>";      out.println(str);      str="<body><h1>Kappa Index of Agreement</h1>";      out.println(str);      str="<b>Input Images:</b> <br><br><b>Classification Image:</b> " + inputHeader1 + "<br><b>Reference Image:</b> "+ inputHeader2+ "<br>";      out.println(str);      str="<br><b>Contingency Table:</b><br>";      out.println(str);      str="<br><table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">";      out.println(str);      str="<tr>";      out.println(str);      str="<th colspan=\"2\" rowspan=\"2\"></th><th colspan=\"" + numClasses + "\">Class Image</th><th rowspan=\"2\">Row<br>Totals</th>";      out.println(str);      str="</tr>";      out.println(str);      str="<tr>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        str="<th>" + (minClass + a) + "</th>";        out.println(str);      }      str="</tr>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        if (a == 0) {          str="<tr><th rowspan=\"" + numClasses + "\">Ref<br>Image</th> <th>"+ (minClass + a)+ "</th>";          out.println(str);        } else {          str="<tr><th>" + (minClass + a) + "</th>";          out.println(str);        }        rowTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          rowTotal+=contingency[a][b];          str="<td>" + contingency[a][b] + "</td>";          out.println(str);        }        str="<td>" + rowTotal + "</td>";        out.println(str);        str="</tr>";        out.println(str);      }      str="<tr>";      out.println(str);      str="<th colspan=\"2\">Col<br>Totals</th>";      out.println(str);      for (int a=0; a <= numClasses - 1; a++) {        colTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          colTotal+=contingency[b][a];        }        str="<td>" + colTotal + "</td>";        out.println(str);      }      str="<td><b>N</b>=" + N + "</td></tr>";      out.println(str);      str="</table>";      out.println(str);      str="<br><b>Class Accuracy Statistics:</b><br><br>";      out.println(str);      str="<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\">";      out.println(str);      str="<tr><td><b>Class</b></td><td><b>User's<br>Accuracy</b></td><td><b>Producer's<br>Accuracy</b></td></tr>";      out.println(str);      DecimalFormat df=new DecimalFormat("0.00%");      DecimalFormat df2=new DecimalFormat("0.000");      for (int a=0; a <= numClasses - 1; a++) {        rowTotal=0;        colTotal=0;        for (int b=0; b <= numClasses - 1; b++) {          colTotal+=contingency[a][b];          rowTotal+=contingency[b][a];        }        str="<tr><td>" + a + "</td><td>"+ df.format(contingency[a][a] / colTotal)+ "</td><td>"+ df.format(contingency[a][a] / rowTotal)+ "</td></tr>";        out.println(str);      }      str="</table>";      out.println(str);      str="<br>Note: User's accuracy refers to the proportion of cells correctly assigned to a class (i.e. the number of cells correctly classified for a category divided by the row total in the contingency table). " + "Producer's accuracy is a measure of how much of the land in each category was classified correctly (i.e. the number of cells correctly classified for a category divided by the column total in the contingency table).<br>";      out.println(str);      str="<br><b>Overall Accuracy</b> = " + df.format(overallAccuracy);      out.println(str);      str="<br><br><b>Kappa</b> = " + df2.format(kappa);      out.println(str);      str="</body>";      out.println(str);    } catch (    java.io.IOException e) {      System.err.println("Error: " + e.getMessage());    } finally {      if (out != null || bw != null) {        out.flush();        out.close();      }    }    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Result next(){  if (!hasNext()) {    throw new IllegalStateException("you must only call next() when hasNext() is true");  }  incrementCursors();  assert hasNext();  boolean hasLeft=!mCursorLeft.isAfterLast();  boolean hasRight=!mCursorRight.isAfterLast();  if (hasLeft && hasRight) {    populateValues(mValues,mCursorLeft,mColumnsLeft,0);    populateValues(mValues,mCursorRight,mColumnsRight,1);switch (compareStrings(mValues)) {case -1:      mCompareResult=Result.LEFT;    break;case 0:  mCompareResult=Result.BOTH;break;case 1:mCompareResult=Result.RIGHT;break;}} else if (hasLeft) {mCompareResult=Result.LEFT;} else {assert hasRight;mCompareResult=Result.RIGHT;}mCompareResultIsValid=true;return mCompareResult;}  }
class C{  private static List<Challenge> parseChallenges(RawHeaders responseHeaders,String challengeHeader){  List<Challenge> result=new ArrayList<Challenge>();  for (int h=0; h < responseHeaders.length(); h++) {    if (!challengeHeader.equalsIgnoreCase(responseHeaders.getFieldName(h))) {      continue;    }    String value=responseHeaders.getValue(h);    int pos=0;    while (pos < value.length()) {      int tokenStart=pos;      pos=HeaderParser.skipUntil(value,pos," ");      String scheme=value.substring(tokenStart,pos).trim();      pos=HeaderParser.skipWhitespace(value,pos);      if (!value.regionMatches(pos,"realm=\"",0,"realm=\"".length())) {        break;      }      pos+="realm=\"".length();      int realmStart=pos;      pos=HeaderParser.skipUntil(value,pos,"\"");      String realm=value.substring(realmStart,pos);      pos++;      pos=HeaderParser.skipUntil(value,pos,",");      pos++;      pos=HeaderParser.skipWhitespace(value,pos);      result.add(new Challenge(scheme,realm));    }  }  return result;}  }
class C{  public CeFanSearchRunner(DagWrapper dagWrapper,Parameters params){  super(dagWrapper.getDag(),params);}  }
class C{  static void checkSignedByte(final int value,final String msg){  if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed byte): " + value);  }}  }
class C{  public boolean isProperAncestorOf(Node node1,Node node2){  return node1 != node2 && isAncestorOf(node1,node2);}  }
class C{  public static Long toLongObject(Object obj){  if (obj == null) {    return null;  }  if (obj instanceof Long) {    return (Long)obj;  }  if (obj instanceof Number) {    return new Long(((Number)obj).longValue());  }  Long result=null;  try {    result=Long.parseLong(obj.toString());  } catch (  Exception e) {  }  return result;}  }
class C{  public SpanLabelView(String viewName,String viewGenerator,TextAnnotation text,double score){  this(viewName,viewGenerator,text,score,false);}  }
class C{  public static VectorClock increment(VectorClock clock,int... nodes){  for (  int n : nodes)   clock=clock.incremented((short)n,System.currentTimeMillis());  return clock;}  }
class C{  public APLRecord(Name name,int dclass,long ttl,List elements){  super(name,Type.APL,dclass,ttl);  this.elements=new ArrayList(elements.size());  for (Iterator it=elements.iterator(); it.hasNext(); ) {    Object o=it.next();    if (!(o instanceof Element)) {      throw new IllegalArgumentException("illegal element");    }    Element element=(Element)o;    if (element.family != Address.IPv4 && element.family != Address.IPv6) {      throw new IllegalArgumentException("unknown family");    }    this.elements.add(element);  }}  }
class C{  public boolean isUpperExclusive(){  return !upperInclusive;}  }
class C{  public synchronized void deleteObservers(){  observers.clear();}  }
class C{  @Ignore @Test public void test_DR_PGS_1Node_Put_ValidateQueue_No_Receiver() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  @Override protected void initData(){}  }
class C{  public TaskList resynchronizeApplicationFullCopy(URI id,VolumeGroupFullCopyResynchronizeParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_RESYNCHRONIZE_FULL_COPY_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  public final void negate(GMatrix m1){  int i, j;  if (nRow != m1.nRow || nCol != m1.nCol) {    throw new MatrixSizeException();  }  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=-m1.values[i][j];    }  }}  }
class C{  TokenMgrError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,int curChar,int reason){  this(EOFSeen,lexState,errorLine,errorColumn,errorAfter,(char)curChar,reason);}  }
class C{  public ActiveMQRATextMessage(final TextMessage message,final ActiveMQRASession session){  super(message,session);  if (ActiveMQRATextMessage.trace) {    ActiveMQRALogger.LOGGER.trace("constructor(" + message + ", "+ session+ ")");  }}  }
class C{  public static SignalStrength newFromBundle(Bundle m){  SignalStrength ret;  ret=new SignalStrength();  ret.setFromNotifierBundle(m);  return ret;}  }
class C{  @Override protected void onNfcStateChange(boolean enabled){  if (enabled) {    toast(getString(R.string.nfcSettingEnabled));  } else {    toast(getString(R.string.nfcSettingDisabled));  }}  }
class C{  private void addTvShowSeason(TvShowSeason season,TvShow tvShow){  if (nodeMap.get(season) != null) {    return;  }  TvShowTreeNode parent=(TvShowTreeNode)nodeMap.get(tvShow);  TvShowSeasonTreeNode child=new TvShowSeasonTreeNode(season);  if (parent != null) {    parent.add(child);    nodeMap.put(season,child);    int index=getIndexOfChild(parent,child);    if (index > -1) {      TreeModelEvent event=new TreeModelEvent(this,parent.getPath(),new int[]{index},new Object[]{child});      for (      TreeModelListener listener : listeners) {        try {          listener.treeNodesInserted(event);        } catch (        NullPointerException|ArrayIndexOutOfBoundsException ignored) {        }      }    }    TreeModelEvent event=new TreeModelEvent(this,root.getPath(),null,null);    for (    TreeModelListener listener : listeners) {      try {        listener.treeNodesChanged(event);      } catch (      NullPointerException|ArrayIndexOutOfBoundsException ignored) {      }    }  }}  }
class C{  public AlchemyLanguage(String apiKey){  super(apiKey);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(((Agent)stack.pop()).getStopPadding());}  }
class C{  public String[] engineGetPropertyKeys(){  return new String[0];}  }
class C{  @Before public void before(){  mockEmrOperations=mock(EmrOperations.class);  mockEc2Dao=mock(Ec2Dao.class);  originalEmrOperations=(EmrOperations)ReflectionTestUtils.getField(emrDao,"emrOperations");  originalEc2Dao=(Ec2Dao)ReflectionTestUtils.getField(emrDao,"ec2Dao");  ReflectionTestUtils.setField(emrDao,"emrOperations",mockEmrOperations);  ReflectionTestUtils.setField(emrDao,"ec2Dao",mockEc2Dao);}  }
class C{  @Override public boolean containsValue(Object value){  HashMapEntry[] tab=table;  int len=tab.length;  if (value == null) {    for (int i=0; i < len; i++) {      for (HashMapEntry e=tab[i]; e != null; e=e.next) {        if (e.value == null) {          return true;        }      }    }    return entryForNullKey != null && entryForNullKey.value == null;  }  for (int i=0; i < len; i++) {    for (HashMapEntry e=tab[i]; e != null; e=e.next) {      if (value.equals(e.value)) {        return true;      }    }  }  return entryForNullKey != null && value.equals(entryForNullKey.value);}  }
class C{  public static String importResultSet(ResultSet source,Database db,String name,ImportFilter filter,boolean useExistingTable) throws SQLException, IOException {  ResultSetMetaData md=source.getMetaData();  name=TableBuilder.escapeIdentifier(name);  Table table=null;  if (!useExistingTable || ((table=db.getTable(name)) == null)) {    List<ColumnBuilder> columns=toColumns(md);    table=createUniqueTable(db,name,columns,md,filter);  }  List<Object[]> rows=new ArrayList<Object[]>(COPY_TABLE_BATCH_SIZE);  int numColumns=md.getColumnCount();  while (source.next()) {    Object[] row=new Object[numColumns];    for (int i=0; i < row.length; i++) {      row[i]=source.getObject(i + 1);    }    row=filter.filterRow(row);    if (row == null) {      continue;    }    rows.add(row);    if (rows.size() == COPY_TABLE_BATCH_SIZE) {      table.addRows(rows);      rows.clear();    }  }  if (rows.size() > 0) {    table.addRows(rows);  }  return table.getName();}  }
class C{  public void postAnalysisOverview(String project,String repository,String pullRequestId,String sonarQubeURL,int issueThreshold,SonarQubeIssuesReport issueReport,StashClient stashClient){  try {    stashClient.postCommentOnPullRequest(project,repository,pullRequestId,MarkdownPrinter.printReportMarkdown(issueReport,sonarQubeURL,issueThreshold));    LOGGER.info("SonarQube analysis overview has been reported to Stash.");  } catch (  StashClientException e) {    LOGGER.error("Unable to push SonarQube analysis overview to Stash",e);  }}  }
class C{  protected final Map<String,TypeClass> parseClasses(NodeList nodes){  Map<String,TypeClass> entries=new HashMap<>();  for (int i=0; i < nodes.getLength(); i++) {    Node node=nodes.item(i);    String name=node.getAttributes().getNamedItem("name").getTextContent();    TypeClass tc=new TypeClass(name);    TypeBuilder builder=new TypeBuilder(entries);    NodeList inodes=node.getChildNodes();    for (int j=0; j < inodes.getLength(); j++) {      Node inode=inodes.item(j);      NamedNodeMap attrs=inode.getAttributes();      String inst=attrs.getNamedItem("name").getTextContent();      if ("instance".equals(inode.getNodeName())) {        String constrArgs=attrs.getNamedItem("constrainedArgs").getTextContent();        Type t=builder.build(inst);        if (t instanceof TypeCon) {          tc.addInstance((TypeCon)t,Integer.parseInt(constrArgs));        }      } else       if ("superClass".equals(inode.getNodeName())) {        TypeClass sc=entries.get(inst);        if (sc == null) {          throw new RuntimeException("Can't resolve superclass " + inst + " of "+ name);        } else {          tc.addSuperClass(sc);        }      }    }    Node def=node.getAttributes().getNamedItem("default");    if (def != null) {      Type dt=builder.build(def.getTextContent());      if (dt instanceof TypeCon) {        tc.setDefaultType((TypeCon)dt);      }    }    entries.put(name,tc);  }  return entries;}  }
class C{  public void changeTreeToLeaf(Tree node,ColumnExampleTable columnTable,int[] selectedExamples){  Attribute label=columnTable.getLabel();  int[] labelColumn=columnTable.getLabelColumn();  int numberOfLabels=label.getMapping().size();  int[] labelValueCount=new int[numberOfLabels];  for (int i=0; i < selectedExamples.length; i++) {    int indexForAdd=labelColumn[selectedExamples[i]];    labelValueCount[indexForAdd]++;  }  int maxcount=0;  String labelName=null;  for (  String value : label.getMapping().getValues()) {    int count=labelValueCount[label.getMapping().getIndex(value)];    node.addCount(value,count);    if (count > maxcount) {      maxcount=count;      labelName=value;    }  }  node.setLeaf(labelName);}  }
class C{  protected void putByteVolatile(long pos,byte val){  unsafe.putByteVolatile(null,pos + addr,val);}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  return s.toString();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:12.234 -0500",hash_original_method="5CCAE779A521C5AA39F7D74A098F474A",hash_generated_method="C673673F7FA2F5C78C4D05886458027F") public void run(){  try {    ThreadAuditor.ThreadHandle threadHandle=sipStack.getThreadAuditor().addCurrentThread();    while (true) {      EventWrapper eventWrapper=null;      LinkedList eventsToDeliver;synchronized (this.eventMutex) {        while (pendingEvents.isEmpty()) {          if (this.isStopped) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logDebug("Stopped event scanner!!");            return;          }          try {            threadHandle.ping();            eventMutex.wait(threadHandle.getPingIntervalInMillisecs());          } catch (          InterruptedException ex) {            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logDebug("Interrupted!");            return;          }        }        eventsToDeliver=pendingEvents;        pendingEvents=new LinkedList();      }      ListIterator iterator=eventsToDeliver.listIterator();      while (iterator.hasNext()) {        eventWrapper=(EventWrapper)iterator.next();        if (sipStack.isLoggingEnabled()) {          sipStack.getStackLogger().logDebug("Processing " + eventWrapper + "nevents "+ eventsToDeliver.size());        }        try {          deliverEvent(eventWrapper);        } catch (        Exception e) {          if (sipStack.isLoggingEnabled()) {            sipStack.getStackLogger().logError("Unexpected exception caught while delivering event -- carrying on bravely",e);          }        }      }    }  }  finally {    if (sipStack.isLoggingEnabled()) {      if (!this.isStopped) {        sipStack.getStackLogger().logFatalError("Event scanner exited abnormally");      }    }  }}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public CampoDatoVO createCampoDato(CampoDatoVO campoDatoVO){  Locale locale=getServiceClient().getLocale();  iniciarTransaccion();  if (campoDatoVO.getIdTblPadre() != null && !campoDatoVO.getIdTblPadre().trim().equalsIgnoreCase("")) {    List list=getCamposDatoXIdTabla(campoDatoVO.getIdTblPadre());    if (list != null)     campoDatoVO.setPosEnTbl(list.size() + 1);  }  campoDatoVO=campoDatoDbEntity.createCampoDato(campoDatoVO);  AuditoriaDescripcion.auditaCreacionCampo(locale,this,campoDatoVO);  if (campoDatoVO.getIdArea() != null) {    UsoObjetoVO usoOjetoVO=new UsoObjetoVO();    usoOjetoVO.setIdObj(campoDatoVO.getIdArea());    usoOjetoVO.setIdObjUsuario(campoDatoVO.getId());    usoOjetoVO.setTipoObj(TipoObjetoUsado.AREA);    usoOjetoVO.setTipoObjUsuario(TipoObjetoUsuario.CAMPO_DATO);    usoObjetoDbEntity.create(usoOjetoVO);  }  commit();  return campoDatoVO;}  }
class C{  public void readWwwAuthenticateHeader(String header){  if (header != null) {    String value=null;    int end=-1;    int begin=header.toLowerCase().indexOf("realm=\"");    if (begin != -1) {      begin+=7;      end=header.indexOf("\"",begin);      value=header.substring(begin,end);    }    digest.setRealm(value);    value=null;    end=-1;    begin=header.toLowerCase().indexOf("opaque=\"");    if (begin != -1) {      begin+=8;      end=header.indexOf("\"",begin);      value=header.substring(begin,end);    }    digest.setOpaque(value);    value=null;    end=-1;    begin=header.toLowerCase().indexOf("qop=\"");    if (begin != -1) {      begin+=5;      end=header.indexOf("\"",begin);      value=header.substring(begin,end);    }    digest.setQop(value);    value=null;    end=-1;    begin=header.toLowerCase().indexOf("nonce=\"");    if (begin != -1) {      begin+=7;      end=header.indexOf("\"",begin);      value=header.substring(begin,end);    }    digest.setNextnonce(value);  }}  }
class C{  protected void openUrl(){  BrowserUtil.browse(url);}  }
class C{  private byte[] assembleRtcpPacket(){  byte data[]=new byte[0];  RtpSource s=mRtcpSession.getMySource();  if ((s.activeSender) && (mRtcpSession.timeOfLastRTCPSent < mRtcpSession.timeOfLastRTPSent)) {    data=RtcpPacketUtils.append(data,assembleSenderReportPacket());  } else {    data=RtcpPacketUtils.append(data,assembleReceiverReportPacket());  }  Vector<RtcpSdesPacket> repvec=makereports();  for (int i=0; i < repvec.size(); i++) {    if (repvec.elementAt(i).mData != null)     data=RtcpPacketUtils.append(data,repvec.elementAt(i).mData);  }  RtcpByePacket byepacket=null;  if (mRtcpSession.isByeRequested) {    int ssrc[]={mRtcpSession.SSRC};    byepacket=new RtcpByePacket(ssrc,null);    data=RtcpPacketUtils.append(data,byepacket.mData);  }  return data;}  }
class C{  @Override public String globalInfo(){  return "Examines a database and extracts out " + "the results produced by the specified ResultProducer " + "and submits them to the specified ResultListener. If a result needs "+ "to be generated, the ResultProducer is used to obtain the result.";}  }
class C{  public int keyCount(){  int count=0, nextKey;  for (nextKey=0; nextKey < mData.length; count++) {    nextKey+=(0xFF & (mData[nextKey] + 1));  }  return count;}  }
class C{  private static void collectAllTimes(Tree tree,NodeRef node,NodeRef[] excludeBelow,ArrayList times,ArrayList<Integer> childs){  times.add(new ComparableDouble(tree.getNodeHeight(node)));  childs.add(tree.getChildCount(node));  for (int i=0; i < tree.getChildCount(node); i++) {    NodeRef child=tree.getChild(node,i);    if (excludeBelow == null) {      collectAllTimes(tree,child,excludeBelow,times,childs);    } else {      boolean include=true;      for (      NodeRef anExcludeBelow : excludeBelow) {        if (anExcludeBelow.getNumber() == child.getNumber()) {          include=false;          break;        }      }      if (include)       collectAllTimes(tree,child,excludeBelow,times,childs);    }  }}  }
class C{  protected NeighbourNodeData findNearestNeighbour(int sampleIndex,KdTreeNode node,int level,NeighbourNodeData currentBest){  int currentDim=level % totalDimensions;  double[][] data=dimensionToArray[currentDim];  int actualDim=dimensionToArrayIndex[currentDim];  double distOnThisDim=data[sampleIndex][actualDim] - data[node.indexOfThisPoint][actualDim];  double absDistOnThisDim;  if (normTypeToUse == EuclideanUtils.NORM_MAX_NORM) {    absDistOnThisDim=(distOnThisDim > 0) ? distOnThisDim : -distOnThisDim;  } else {    absDistOnThisDim=distOnThisDim * distOnThisDim;  }  if ((node.indexOfThisPoint != sampleIndex) && ((currentBest == null) || (absDistOnThisDim < currentBest.distance))) {    double maxNorm=0;    double[] norms=new double[originalDataSets.length];    for (int v=0; v < originalDataSets.length; v++) {      if (currentBest == null) {        norms[v]=norm(originalDataSets[v][sampleIndex],originalDataSets[v][node.indexOfThisPoint],normTypeToUse);      } else {        norms[v]=normWithAbort(originalDataSets[v][sampleIndex],originalDataSets[v][node.indexOfThisPoint],currentBest.distance,normTypeToUse);      }      if (norms[v] > maxNorm) {        maxNorm=norms[v];        if (Double.isInfinite(maxNorm)) {          break;        }      }    }    if ((currentBest == null) || (maxNorm < currentBest.distance)) {      currentBest=new NeighbourNodeData(node.indexOfThisPoint,norms,maxNorm);    }  }  KdTreeNode closestSubTree=null;  KdTreeNode furthestSubTree=null;  if (distOnThisDim < 0) {    closestSubTree=node.leftTree;    furthestSubTree=node.rightTree;  } else {    closestSubTree=node.rightTree;    furthestSubTree=node.leftTree;  }  if (closestSubTree != null) {    currentBest=findNearestNeighbour(sampleIndex,closestSubTree,level + 1,currentBest);  }  if ((currentBest == null) || (absDistOnThisDim < currentBest.distance)) {    if (furthestSubTree != null) {      currentBest=findNearestNeighbour(sampleIndex,furthestSubTree,level + 1,currentBest);    }  }  return currentBest;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void wrote(int tenant,long time_nanos,long bytes){  finished(Operation.WRITE,tenant,bytes,time_nanos);}  }
class C{  public boolean releasePersistentLock(String svcId,String lockId) throws Exception {  DistributedPersistentLock lock=_coordinator.getSiteLocalPersistentLock(lockId);  if (lock != null) {    String lockOwner=lock.getLockOwner();    if (lockOwner == null) {      _log.info("{} lock is not held by any node",lockId);      return true;    }    if (!lockOwner.equals(svcId)) {      throw SyssvcException.syssvcExceptions.invalidLockOwnerError("Lock owner is " + lockOwner);    } else {      boolean result=lock.releaseLock(lockOwner);      if (result) {        _log.info("{} lock released by owner {} successfully",lockId,lockOwner);        return true;      } else {        _log.info("{} lock released failed for owner {}",lockId,lockOwner);      }    }  }  return false;}  }
class C{  public void addPartContent(MimePath path,int content){  if (partContentDescriptors == null) {    partContentDescriptors=new HashSet<PartContentDescriptor>();  }  PartContentDescriptorImpl currentDescriptor=null;  for (  PartContentDescriptor descriptor : partContentDescriptors) {    if (path.equals(descriptor.path())) {      currentDescriptor=(PartContentDescriptorImpl)descriptor;      break;    }  }  if (currentDescriptor == null) {    currentDescriptor=new PartContentDescriptorImpl(path);    partContentDescriptors.add(currentDescriptor);  }  currentDescriptor.or(content);}  }
class C{  public synchronized void closePath(){  if ((numSeg != 0) && (types[numSeg - 1] == PathIterator.SEG_CLOSE))   return;  if ((numSeg != 0) && (types[numSeg - 1] != PathIterator.SEG_MOVETO))   path.closePath();  makeRoom(0);  types[numSeg++]=PathIterator.SEG_CLOSE;  cx=mx;  cy=my;}  }
class C{  private List<String> fetchFileCosIdList() throws SOSFailure {  final String methodName="fetchFileCosIdList(): ";  log.trace(methodName + "Entry");  final String FILE_COS_URI="/file/vpools";  List<String> fileCosIdList=new ArrayList<String>();  try {    CoSList cosElemList=_client.queryObject(FILE_COS_URI,CoSList.class);    if (cosElemList != null && cosElemList.getCosElements() != null) {      for (      CoSElement elem : cosElemList.getCosElements()) {        if (elem != null) {          fileCosIdList.add(elem.getId());        }      }    }    log.trace(methodName + "File CoS Ids: " + fileCosIdList);    if (cosElemList != null && fileCosIdList != null) {      log.trace(methodName + "Exit returning cos list of size[" + fileCosIdList.size()+ "]");      return fileCosIdList;    }    log.trace(methodName + "Exit returning cos list of size[0]");    return new ArrayList<String>();  } catch (  NoSuchAlgorithmException e) {    log.error(methodName + "NoSuchAlgorithmException occured",e);    throw new SOSFailure(e);  }catch (  UniformInterfaceException e) {    log.error(methodName + "UniformInterfaceException occured",e);    throw new SOSFailure(e);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void testInvokeAll2() throws InterruptedException {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Future<String>> r=e.invokeAll(new ArrayList<Callable<String>>());    assertTrue(r.isEmpty());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  private void moveLaneToBuffer(final double now){  QVehicle veh;  this.moveTransitToQueue(now);  while ((veh=this.vehQueue.peek()) != null) {    if (veh.getEarliestLinkExitTime() > now) {      return;    }    MobsimDriverAgent driver=veh.getDriver();    boolean handled=this.handleTransitStop(now,veh,driver);    if (!handled) {      if ((this.getLink().getId().equals(driver.getDestinationLinkId())) && (driver.chooseNextLinkId() == null)) {        this.addParkedVehicle(veh);        network.simEngine.letVehicleArrive(veh);        this.makeVehicleAvailableToNextDriver(veh,now);        this.vehQueue.poll();        this.usedStorageCapacity-=veh.getSizeInEquivalents();        if (HOLES) {          Hole hole=new Hole();          hole.setEarliestLinkExitTime(now + this.link.getLength() * 3600. / 15. / 1000.);          holes.add(hole);        }        continue;      }      if (!hasFlowCapacityLeftAndBufferSpace()) {        return;      }      if (driver instanceof TransitDriverAgent) {        TransitDriverAgent trDriver=(TransitDriverAgent)driver;        Id<Link> nextLinkId=trDriver.chooseNextLinkId();        if (nextLinkId == null || nextLinkId.equals(trDriver.getCurrentLinkId())) {          network.simEngine.letVehicleArrive(veh);          this.addParkedVehicle(veh);          makeVehicleAvailableToNextDriver(veh,now);          this.vehQueue.poll();          this.usedStorageCapacity-=veh.getSizeInEquivalents();          if (HOLES) {            Hole hole=new Hole();            hole.setEarliestLinkExitTime(now + this.link.getLength() * 3600. / 15. / 1000.);            holes.add(hole);          }          continue;        }      }      addToBuffer(veh,now);      this.vehQueue.poll();      this.usedStorageCapacity-=veh.getSizeInEquivalents();      if (HOLES) {        Hole hole=new Hole();        double offset=this.link.getLength() * 3600. / 15. / 1000.;        hole.setEarliestLinkExitTime(now + 0.9 * offset + 0.2 * MatsimRandom.getRandom().nextDouble() * offset);        holes.add(hole);      }    }  }}  }
class C{  public boolean hasExceptionHandlingOrMethodCalls(){  for (  Instruction i : instructions) {    if (i.isComplexInstruction()) {      return true;    }  }  return false;}  }
class C{  public void scoreSelectedPlans(){  for (  Carrier carrier : carriers.getCarriers().values()) {    CarrierAgent agent=findCarrierAgent(carrier.getId());    agent.scoreSelectedPlan();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String employeeLocalName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=elementList.item(0);  employeeLocalName=testEmployee.getLocalName();  assertEquals("lname","employee",employeeLocalName);}  }
class C{  public static String reloadInstalledTtsEngines(PackageManager pm,List<String> results){  final Intent intent=new Intent(TextToSpeech.Engine.INTENT_ACTION_TTS_SERVICE);  final List<ResolveInfo> resolveInfos=pm.queryIntentServices(intent,PackageManager.GET_SERVICES);  String systemTtsEngine=null;  for (  ResolveInfo resolveInfo : resolveInfos) {    final ServiceInfo serviceInfo=resolveInfo.serviceInfo;    final ApplicationInfo appInfo=serviceInfo.applicationInfo;    final String packageName=serviceInfo.packageName;    final boolean isSystemApp=((appInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0);    results.add(serviceInfo.packageName);    if (isSystemApp) {      systemTtsEngine=packageName;    }  }  return systemTtsEngine;}  }
class C{  public void clear() throws IgniteCheckedException {  cache.clear();}  }
class C{  private static void copySpans(Spannable toSpan,Spanned fromSpan,int startIndex){  if (startIndex < 0 || startIndex >= toSpan.length()) {    LogUtils.log(StringBuilderUtils.class,Log.ERROR,"startIndex parameter (" + startIndex + ") is out of toSpan length "+ toSpan.length());    return;  }  Object[] spans=fromSpan.getSpans(0,fromSpan.length(),Object.class);  if (spans != null && spans.length > 0) {    for (    Object span : spans) {      int spanStartIndex=fromSpan.getSpanStart(span);      int spanEndIndex=fromSpan.getSpanEnd(span);      if (spanStartIndex >= spanEndIndex) {        continue;      }      int spanFlags=fromSpan.getSpanFlags(span);      toSpan.setSpan(span,startIndex + spanStartIndex,startIndex + spanEndIndex,spanFlags);    }  }}  }
class C{  public List<?> range(Value begin,Value end){  List<Object> results=new ArrayList<Object>();  Key[] elementKeys=getElementKeys();  if (elementKeys != null && elementKeys.length > 0) {    List<Record> records=fetchSubRecords(elementKeys);    for (    Record record : records) {      if (record != null && filterBinByRange(record,ListElementBinName,begin,end)) {        results.add(record.getValue(ListElementBinName));      }    }  }  return results;}  }
class C{  @Override public void followAgent(final IAgent a){}  }
class C{  private static boolean addVPoolToUnManagedObjectSupportedVPools(VirtualPool virtualPool,StringSetMap unManagedObjectInfo,UnManagedDiscoveredObject unManagedObject,StorageSystem system,Set<URI> srdfEnabledTargetVPools,Set<URI> rpEnabledTargetVPools){  StringSet supportedVPoolsList=unManagedObject.getSupportedVpoolUris();  if (null != supportedVPoolsList && supportedVPoolsList.contains(virtualPool.getId().toString())) {    _log.debug("Matched VPool already there {}",virtualPool.getId().toString());    return false;  }  if (VirtualPool.Type.block.name().equals(virtualPool.getType())) {    if (system != null && system.getAutoTieringEnabled()) {      String autoTierPolicyId=null;      if (unManagedObjectInfo.containsKey(SupportedVolumeInformation.AUTO_TIERING_POLICIES.toString())) {        for (        String policyName : unManagedObjectInfo.get(SupportedVolumeInformation.AUTO_TIERING_POLICIES.toString())) {          autoTierPolicyId=NativeGUIDGenerator.generateAutoTierPolicyNativeGuid(system.getNativeGuid(),policyName,NativeGUIDGenerator.getTieringPolicyKeyForSystem(system));          break;        }      }      if (!DiscoveryUtils.checkVPoolValidForUnManagedVolumeAutoTieringPolicy(virtualPool,autoTierPolicyId,system)) {        String msg="VPool %s is not added to UnManaged Volume's (%s) supported vPool list " + "since Auto-tiering Policy %s in UnManaged Volume does not match with vPool's (%s)";        _log.debug(String.format(msg,new Object[]{virtualPool.getId(),unManagedObject.getId(),autoTierPolicyId,virtualPool.getAutoTierPolicyName()}));        return false;      }    }    boolean srdfSourceVpool=(null != virtualPool.getProtectionRemoteCopySettings() && !virtualPool.getProtectionRemoteCopySettings().isEmpty());    boolean srdfTargetVpool=srdfEnabledTargetVPools == null ? false : (srdfEnabledTargetVPools.contains(virtualPool.getId()));    StringSet remoteVolType=unManagedObjectInfo.get(SupportedVolumeInformation.REMOTE_VOLUME_TYPE.toString());    boolean isRegularVolume=(null == remoteVolType);    boolean isSRDFSourceVolume=(null != remoteVolType && remoteVolType.contains(RemoteMirrorObject.Types.SOURCE.toString()));    boolean isSRDFTargetVolume=(null != remoteVolType && remoteVolType.contains(RemoteMirrorObject.Types.TARGET.toString()));    if (isRegularVolume && (srdfSourceVpool || srdfTargetVpool)) {      _log.debug("Found a regular volume with SRDF Protection Virtual Pool. No need to update.");      return false;    } else     if (isSRDFSourceVolume && !(srdfSourceVpool || srdfTargetVpool)) {      _log.debug("Found a SRDF unmanaged volume with non-srdf virtualpool. No need to update.");      return false;    } else     if (isSRDFSourceVolume && srdfTargetVpool) {      _log.debug("Found a SRDF source volume & target srdf vpool. No need to update.");      return false;    } else     if (isSRDFTargetVolume && srdfSourceVpool) {      _log.debug("Found a SRDFTarget volume & source srdf source vpool No need to update.");      return false;    }    boolean isRPSourceVpool=(null != virtualPool.getProtectionVarraySettings() && !virtualPool.getProtectionVarraySettings().isEmpty());    boolean isRPTargetVpool=rpEnabledTargetVPools == null ? false : (rpEnabledTargetVPools.contains(virtualPool.getId()));    remoteVolType=unManagedObjectInfo.get(SupportedVolumeInformation.RP_PERSONALITY.toString());    isRegularVolume=(null == remoteVolType);    boolean isRPSourceVolume=(null != remoteVolType && remoteVolType.contains(Volume.PersonalityTypes.SOURCE.toString()));    if (isRegularVolume && (isRPSourceVpool || isRPTargetVpool)) {      _log.debug("Found a regular volume with RP Protection Virtual Pool. No need to update.");      return false;    } else     if (isRPSourceVolume && !isRPSourceVpool) {      _log.debug("Found a RP unmanaged volume with non-rp virtualpool. No need to update.");      return false;    } else     if (isRPSourceVolume && isRPTargetVpool) {      _log.debug("Found a RP source volume & target rp vpool. No need to update.");      return false;    }  }  if (null == supportedVPoolsList) {    _log.debug("Adding a new Supported VPool List {}",virtualPool.getId().toString());    supportedVPoolsList=new StringSet();  }  supportedVPoolsList.add(virtualPool.getId().toString());  return true;}  }
class C{  public static String createStyledCommentString(final String comment,final AnnotationStyle style){  if (comment == null) {    throw new IllegalArgumentException("comment must not be null!");  }  if (style == null) {    throw new IllegalArgumentException("style must not be null!");  }  return String.format(ANNOTATION_HTML_FORMAT,style.getPadding(),style.getAnnotationAlignment().getCSS(),comment);}  }
class C{  private static void showSystemInformationButtonClicked(){  String runningJavaVersion=InternalUtilities.getJavaRunningVersionAsString();  String targetJavaVersion=InternalUtilities.getJavaTargetVersionFromPom();  String projectVersion=InternalUtilities.getProjectVersionString();  boolean isBackport=("1.6".equals(targetJavaVersion));  String message="";  message+="## Current configuration ##";  message+="\nLGoodDatePicker version: \"LGoodDatePicker ";  message+=(isBackport) ? ("Backport " + projectVersion) : (projectVersion + " (Standard)");  message+="\".";  message+="\nJava target version: Java " + targetJavaVersion;  message+="\nJava running version: " + runningJavaVersion;  message+="\n\nMinimum Requirements:" + "\n\"LGoodDatePicker Standard\" requires Java 1.8 (or above). " + "\n\"LGoodDatePicker Backport\" requires Java 1.6 or 1.7.";  panel.messageTextArea.setText(message);}  }
class C{  public static boolean nct(Object left,Object right) throws PageException {  return !ct(left,right);}  }
class C{  public void pauseApp(){}  }
class C{  public void test_22() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,true,false);  insertSparql(cxn);  BigdataValueFactory vf=cxn.getValueFactory();  BigdataValue[] values=new BigdataValue[]{vf.createURI("http://s"),vf.createLiteral("1",XMLSchema.INTEGER),vf.createLiteral(2),vf.createLiteral("3.0",XMLSchema.DECIMAL),vf.createLiteral(4.0),vf.createLiteral(true),vf.createLiteral(false),vf.createLiteral("plain string"),vf.createLiteral("datatyped string",XMLSchema.STRING),vf.createLiteral("english string","en"),vf.createLiteral("very long literal which length exceeds MAX_INLINE_TEXT_LENGTH")};  cxn.getTripleStore().getLexiconRelation().addTerms(values,values.length,true);  assertTrue(values[0].getIV().isInline());  assertTrue(values[1].getIV().isInline());  assertTrue(values[2].getIV().isInline());  assertTrue(values[3].getIV().isInline());  assertTrue(values[4].getIV().isInline());  assertTrue(values[5].getIV().isInline());  assertTrue(values[6].getIV().isInline());  assertTrue(values[7].getIV().isInline());  assertTrue(values[8].getIV().isInline());  assertTrue(values[9].getIV().isInline());  assertFalse(values[10].getIV().isInline());  endTest(cxn);}  }
class C{  void close(boolean force){  boolean actuallyClose=false;synchronized (map) {    if (--useCounter <= 0 || force) {      actuallyClose=true;      map.remove(this);    }  }  if (actuallyClose) {    JdbcUtils.closeSilently(conn);  }}  }
class C{  @Bean @ConditionalOnMissingBean public AuditorAware<String> auditorAware(){  return new SpringSecurityAuditorAware();}  }
class C{  public static List<Tuple<Integer,Integer>> readInputList(String inputPath,String fileName,String extension){  String filePathAndName=inputPath + fileName + "/"+ fileName+ extension;  log.info("Reading edge list list from " + filePathAndName);  List<Tuple<Integer,Integer>> edgeList=new ArrayList<Tuple<Integer,Integer>>();  try {    BufferedReader br=IOUtils.getBufferedReader(filePathAndName);    String lines;    while ((lines=br.readLine()) != null) {      String[] inputString=lines.split(" ");      int source=Integer.parseInt(inputString[0]);      int destination=Integer.parseInt(inputString[1]);      Tuple<Integer,Integer> thisEdgeTuple=new Tuple<Integer,Integer>(source,destination);      edgeList.add(thisEdgeTuple);    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }  return edgeList;}  }
class C{  public long enqueueEndTimeMs(){  return _enqueueEndTimeMs;}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer processId,Principal principal){  RestWrapper restWrapper=null;  try {    Process parentProcess=processDAO.get(processId);    if (parentProcess.getProcess() != null)     processDAO.securityCheck(parentProcess.getProcess().getProcessId(),principal.getName(),WRITE); else     processDAO.securityCheck(processId,principal.getName(),WRITE);    com.wipro.ats.bdre.md.dao.jpa.Process process=new Process();    process.setProcessId(processId);    propertiesDAO.deleteByProcessId(process);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + processId + " deleted from Properties by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  String replacePrefixInName(String name,String prefix,String newPrefix){  Node nameNode=NodeUtil.newQName(compiler,name);  Node placeholder=new Node(Token.EMPTY,nameNode);  replacePrefixInName(nameNode,prefix,newPrefix);  return placeholder.getFirstChild().getQualifiedName();}  }
class C{  public void mouseWheelMove(MouseWheelEvent e){}  }
class C{  public OkHttp3Downloader(final Context context,final long maxSize){  this(defaultCacheDir(context),maxSize);}  }
class C{  private boolean processStillUp(String packageName){  try {    PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,0);    String processName=packageInfo.applicationInfo.processName;    List<RunningAppProcessInfo> runningApps=mActivityManager.getRunningAppProcesses();    for (    RunningAppProcessInfo app : runningApps) {      if (app.processName.equalsIgnoreCase(processName)) {        Log.d(TAG,"Found process " + app.processName);        return true;      }    }    Log.d(TAG,"Failed to find process " + processName + " with package name "+ packageName);  } catch (  NameNotFoundException e) {    Log.w(TAG,"Failed to find package " + packageName);    return false;  }  return false;}  }
class C{  public boolean isRoot(){  return "ROOT".equals(getName());}  }
class C{  public FBUserManager(String gdsType){  super(gdsType);}  }
class C{  @Override public void loadedModule(final INaviModule module){  createChildren();  m_model.nodeStructureChanged(ViewSelectionModuleNode.this);}  }
class C{  public boolean checkSuccess(@NotNull final Logger logger){  if (getExitCode() != 0 || isTimeout()) {    logger.info(getStderr() + (isTimeout() ? "\nTimed out" : "\nExit code " + getExitCode()));    return false;  }  return true;}  }
class C{  public void removeSubClass(ClassType type){  if (null == subClasses) {    return;  }  subClasses.remove(type);}  }
class C{  protected void updateComponent(Component comp,Graphics g){  if (comp != null) {    comp.update(g);  }}  }
class C{  private Date backoffTime(Date startTime){  if (startTime.before(DateUtils.addMinutes(new Date(),-5))) {    return DateUtils.addSeconds(startTime,-1);  }  return DateUtils.addSeconds(startTime,-BACKOFF_TIME);}  }
class C{  public boolean intersects(BoundingBox box){  if (!box.intersects(this.box))   return false;  if (contains(box.lat1,box.lng1))   return true;  if (box.contains(points.get(0)))   return true;  if (segmentIntersects(box.lat1,box.lng1,box.lat1,box.lng2))   return true;  if (segmentIntersects(box.lat1,box.lng2,box.lat2,box.lng2))   return true;  if (segmentIntersects(box.lat2,box.lng2,box.lat2,box.lng1))   return true;  if (segmentIntersects(box.lat2,box.lng1,box.lat1,box.lng1))   return true;  return false;}  }
class C{  public final void cancel(){synchronized (this) {    if (valid) {      valid=false;      ((AbstractSelector)selector()).cancel(this);    }  }}  }
class C{  private void resetNextProxy(HttpUrl url,Proxy proxy){  if (proxy != null) {    proxies=Collections.singletonList(proxy);  } else {    proxies=new ArrayList<>();    List<Proxy> selectedProxies=address.proxySelector().select(url.uri());    if (selectedProxies != null)     proxies.addAll(selectedProxies);    proxies.removeAll(Collections.singleton(Proxy.NO_PROXY));    proxies.add(Proxy.NO_PROXY);  }  nextProxyIndex=0;}  }
class C{  public static void handleException(String emsg){  new Exception().printStackTrace();  System.err.println("Unexepcted INTERNAL ERROR FIXME!!");  System.err.println(emsg);  throw new RuntimeException(emsg);}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public void testSetBitPositiveInside3(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=45;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void selectAllAccessibleSelection(){}  }
class C{  public static Response createErrorResponse(int errCode,String errMsg){  JSONObject outerJsonObj=new JSONObject();  JSONObject innerJsonObj=new JSONObject();  try {    outerJsonObj.put(ERROR_CODE_MAP.get(errCode),innerJsonObj);    innerJsonObj.put("code",errCode);    innerJsonObj.put("message",errMsg);  } catch (  JSONException e) {    _log.error("Error occured while creating JSON error message");  }  return Response.status(errCode).entity(outerJsonObj.toString()).build();}  }
class C{  public boolean search(K k){  int h=hashMethod.hash(k);  LinkedList<Entry<K,V>> list=(LinkedList<Entry<K,V>>)table[h];  if (list == null) {    return false;  }  int sz=list.size();  for (int i=0; i < sz; i++) {    Entry<K,V> e=list.get(i);    if (e.key.equals(k)) {      return true;    }  }  return false;}  }
class C{  static void testCandidateOmission(){  Locale.setDefault(Locale.US);  doTestCandidateOmission("de","DE","EURO",new String[]{"_de",""});  doTestCandidateOmission("de","DE","",new String[]{"_de",""});  doTestCandidateOmission("de","","EURO",new String[]{"_de",""});  doTestCandidateOmission("de","","",new String[]{"_de",""});  doTestCandidateOmission("","DE","EURO",new String[]{"__DE",""});  doTestCandidateOmission("","DE","",new String[]{"__DE",""});  doTestCandidateOmission("","","EURO",new String[]{"___EURO",""});  doTestCandidateOmission("","","",new String[]{""});}  }
class C{  protected TableImpl(boolean testing,List<ColumnImpl> columns) throws IOException {  if (!testing) {    throw new IllegalArgumentException();  }  _database=null;  _tableDefPageNumber=PageChannel.INVALID_PAGE_NUMBER;  _name=null;  _columns.addAll(columns);  for (  ColumnImpl col : _columns) {    if (col.getType().isVariableLength()) {      _varColumns.add(col);    }  }  _maxColumnCount=(short)_columns.size();  _maxVarColumnCount=(short)_varColumns.size();  initAutoNumberColumns();  _fkEnforcer=null;  _flags=0;  _tableType=TYPE_USER;  _indexCount=0;  _logicalIndexCount=0;  _ownedPages=null;  _freeSpacePages=null;}  }
class C{  @JSFunction public Scriptable createElement(String name){  return Context.getCurrentContext().newObject(this,JsA.CLASS_NAME);}  }
class C{  private static PerfCounterLookup createLookup(Connection conn){  return lookups.computeIfAbsent(conn.getURI(),null);}  }
class C{  public void testGetContextWhenWarHasExtension(){  WAR war=new WAR("c:/some/path/to/war/test.war");  assertEquals("test",war.getContext());}  }
class C{  public TransitionReactionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private Collection<OrderedNodePair> pairToOrdered(List<NodePair> orig){  List<OrderedNodePair> ordered=new ArrayList<>(orig.size());  for (  NodePair p : orig) {    ordered.add(new OrderedNodePair(p.getFirst(),p.getSecond()));  }  return ordered;}  }
class C{  public Builder(){}  }
class C{  public void cleanContainer(String ID){  runURLRequest("Container",ID);}  }
class C{  public int export(ConstantPool target){  return target.addFloat(_value).getIndex();}  }
class C{  protected void registerListenerAttributes(){  addAttributeProcessor(new ConditionLmlAttribute(),"if");  addAttributeProcessor(new KeepListenerLmlAttribute(),"keep");  addAttributeProcessor(new ListenerIdsLmlAttribute(),"ids");  addAttributeProcessor(new CombinedKeysLmlAttribute(),"combined");  addAttributeProcessor(new ListenerKeysLmlAttribute(),"keys");}  }
class C{  @Override public void countExample(Example example){  delegate.countExample(example);}  }
class C{  public void onSuspendInfrastructure(){  mIntegratedTapDetector.stop();}  }
class C{  private String printDFormat(int x){  return printDFormat(Integer.toString(x));}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Client_ID"))     m_AD_Client_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Element_ID"))     m_C_Element_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("UpdateDefaultAccounts"))     m_updateDefaultAccounts="Y".equals(para[i].getParameter()); else     if (name.equals("CreateNewCombination"))     m_createNewCombination="Y".equals(para[i].getParameter()); else     if (name.equals("DeleteOldImported"))     m_deleteOldImported="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (m_DateValue == null)   m_DateValue=new Timestamp(System.currentTimeMillis());}  }
class C{  public LR0Item shift(){  if (!isShiftable())   throw new RuntimeException("Shifting not possible: Item already closed: " + this);  return new LR0Item(production,position + 1);}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  public static PrimitiveType.Code toCode(String token){  return (PrimitiveType.Code)CODES.get(token);}  }
class C{  @Override public boolean supportsDifferentTableCorrelationNames(){  debugCodeCall("supportsDifferentTableCorrelationNames");  return false;}  }
class C{  public void receiveIsComposingEvent(ContactId contact,byte[] event) throws PayloadException {  try {    InputSource input=new InputSource(new ByteArrayInputStream(event));    IsComposingParser parser=new IsComposingParser(input).parse();    IsComposingInfo isComposingInfo=parser.getIsComposingInfo();    List<ImsSessionListener> sessionListeners=mSession.getListeners();    if (isComposingInfo != null && isComposingInfo.isStateActive()) {      for (      ImsSessionListener sessionListener : sessionListeners) {        ((ChatSessionListener)sessionListener).onIsComposingEventReceived(contact,true);      }      long timeout=isComposingInfo.getRefreshTime();      if (timeout == 0) {        timeout=DEFAULT_REFESH_TIMEOUT;      }      startExpirationTimer(timeout,contact);    } else {      for (      ImsSessionListener sessionListener : sessionListeners) {        ((ChatSessionListener)sessionListener).onIsComposingEventReceived(contact,false);      }      stopExpirationTimer(contact);    }  } catch (  ParserConfigurationException|SAXException|ParseFailureException e) {    throw new PayloadException("Can't parse is-composing event for session ID : " + mSession.getSessionID(),e);  }}  }
class C{  public void hideWindowImmediately(){  stopAnimations(true);  setVisible(false);  disposeAnimation();}  }
class C{  public Address leader(){  return leader;}  }
class C{  public void rightClickBlock(GlowPlayer player,GlowBlock target,BlockFace face,ItemStack holding,Vector clickedLoc){  if (placeAs != null) {    placeAs.rightClickBlock(player,target,face,holding,clickedLoc);  } else {    rightClickAir(player,holding);  }}  }
class C{  public LatLonPoint inverse(double x,double y){  return coordTransform.inverse(x,y);}  }
class C{  public ViewModelBindingConfig(@LayoutRes int layoutResource,Class<T> viewModelClass,int viewModelVariableName){  mLayoutResource=layoutResource;  mViewModelClass=viewModelClass;  mViewModelVariableName=viewModelVariableName;}  }
class C{  public RenameTypeArguments(String newName,boolean updateReferences,boolean updateSimilarDeclarations,IJavaElement[] similarDeclarations){  super(newName,updateReferences);  if (updateSimilarDeclarations) {    Assert.isNotNull(similarDeclarations);  }  this.updateSimilarDeclarations=updateSimilarDeclarations;  this.similarDeclarations=similarDeclarations;}  }
class C{  public AnalogPrototype lptolp(double omega0){  double[] tn={0.0,1.0};  double[] td={omega0};  Rational T=new Rational(tn,td);  AnalogPrototype retval=new AnalogPrototype();  for (int i=0; i < sections.size(); i++)   retval.addSection(sections.get(i).map(T));  return retval;}  }
class C{  @SuppressWarnings("unused") public long create_audio_sample_entry_atom(MP4DataStream bitstream) throws IOException {  log.trace("Audio sample entry");  bitstream.skipBytes(6);  int dataReferenceIndex=(int)bitstream.readBytes(2);  bitstream.skipBytes(8);  channelCount=(int)bitstream.readBytes(2);  log.trace("Channels: {}",channelCount);  sampleSize=(int)bitstream.readBytes(2);  log.trace("Sample size (bits): {}",sampleSize);  bitstream.skipBytes(4);  timeScale=(int)bitstream.readBytes(2);  log.trace("Time scale: {}",timeScale);  bitstream.skipBytes(2);  readed+=28;  MP4Atom child=MP4Atom.createAtom(bitstream);  this.children.add(child);  readed+=child.getSize();  return readed;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public CreateIndexRequest custom(IndexMetaData.Custom custom){  customs.put(custom.type(),custom);  return this;}  }
class C{  public static void main(String args[]) throws IOException {  VectorDrawableParser parser=new VectorDrawableParser(args);  parser.parseVectorDrawable();}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.EXIT;}  }
class C{  public Iterable<ActionImport> build(FactoryLookup lookup){  List<ActionImport> actionImports=new ArrayList<>();  for (  ActionImportImpl.Builder actionImportBuilder : actionImportBuilders) {    actionImportBuilder.setEntitySet(lookup.getEntitySet(actionImportBuilder.getEntitySetName()));    actionImportBuilder.setAction(lookup.getAction(actionImportBuilder.getActionName()));    actionImports.add(actionImportBuilder.build());  }  return Collections.unmodifiableList(actionImports);}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (eventName.equals("configuration") && m_Filter != null) {    return true;  }  if (!m_listenees.containsKey(eventName)) {    return false;  }  Object source=m_listenees.get(eventName);  if (source instanceof EventConstraints) {    if (!((EventConstraints)source).eventGeneratable(eventName)) {      return false;    }  }  if (eventName.compareTo("instance") == 0) {    if (!(m_Filter instanceof StreamableFilter)) {      return false;    }  }  return true;}  }
class C{  public double distance(Vector other){  return Math.sqrt(Math.pow(other.x - x,2) + Math.pow(other.y - y,2) + Math.pow(other.z - z,2));}  }
class C{  public void removeAll(){  getContentPane().removeAll();}  }
class C{  @Override public Class<CumulativeTimeBucket> handledType(){  return CumulativeTimeBucket.class;}  }
class C{  public boolean remove(JsonElement element){  return elements.remove(element);}  }
class C{  public final LC gridGapY(String boundsSize){  setGridGapY(ConstraintParser.parseBoundSize(boundsSize,true,false));  return this;}  }
class C{  public static LazyQueryContainer createDSLazyQueryContainer(final BeanQueryFactory<? extends AbstractBeanQuery<?>> queryFactory){  queryFactory.setQueryConfiguration(Collections.emptyMap());  return new LazyQueryContainer(new LazyQueryDefinition(true,20,"tagIdName"),queryFactory);}  }
class C{  public CreatureGroupsXMLLoader(final URI uri){  this.uri=uri;}  }
class C{  private DataStore<DBIDs> loadNeighbors(Database database,Relation<?> relation){  final WritableDataStore<DBIDs> store=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC | DataStoreFactory.HINT_TEMP,DBIDs.class);  if (LOG.isVerbose()) {    LOG.verbose("Loading external neighborhoods.");  }  if (LOG.isDebugging()) {    LOG.verbose("Building reverse label index...");  }  Map<String,DBID> lblmap=new HashMap<>(relation.size() << 1);{    Relation<LabelList> olq=database.getRelation(TypeUtil.LABELLIST);    Relation<ExternalID> eidq=database.getRelation(TypeUtil.EXTERNALID);    for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {      if (eidq != null) {        ExternalID eid=eidq.get(iditer);        if (eid != null) {          lblmap.put(eid.toString(),DBIDUtil.deref(iditer));        }      }      if (olq != null) {        LabelList label=olq.get(iditer);        if (label != null) {          for (int i=0; i < label.size(); i++) {            lblmap.put(label.get(i),DBIDUtil.deref(iditer));          }        }      }    }  }  if (LOG.isDebugging()) {    LOG.verbose("Loading neighborhood file.");  }  try (InputStream in=FileUtil.tryGzipInput(new FileInputStream(file));BufferedReader br=new BufferedReader(new InputStreamReader(in))){    for (String line; (line=br.readLine()) != null; ) {      ArrayModifiableDBIDs neighbours=DBIDUtil.newArray();      String[] entries=line.split(" ");      DBID id=lblmap.get(entries[0]);      if (id != null) {        for (int i=0; i < entries.length; i++) {          final DBID neigh=lblmap.get(entries[i]);          if (neigh != null) {            neighbours.add(neigh);          } else {            if (LOG.isDebugging()) {              LOG.debug("No object found for label " + entries[i]);            }          }        }        store.put(id,neighbours);      } else {        if (LOG.isDebugging()) {          LOG.warning("No object found for label " + entries[0]);        }      }    }    return store;  } catch (  IOException e) {    throw new AbortException("Loading of external neighborhood failed.",e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean sendError(final HttpServletResponse resp,final int statusCode) throws IOException {  return sendError(resp,statusCode,null);}  }
class C{  public LoaderConfiguration(){  this.requireMain=true;}  }
class C{  @DSComment("Data structure/no action") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.090 -0500",hash_original_method="2CFD6EBEFF813BB567E469C3740E6AAE",hash_generated_method="832DDE9481661F774B1DBC74C9B1C36D") public static AccessibilityRecord obtain(AccessibilityRecord record){  AccessibilityRecord clone=AccessibilityRecord.obtain();  clone.init(record);  return clone;}  }
class C{  public boolean isWarning(){  return fSeverity == RefactoringStatus.WARNING;}  }
class C{  protected void layoutColumns(int targetSpan,int[] offsets,int[] spans,SizeRequirements[] reqs){  Arrays.fill(offsets,0);  Arrays.fill(spans,0);  colIterator.setLayoutArrays(offsets,spans,targetSpan);  CSS.calculateTiledLayout(colIterator,targetSpan);}  }
class C{  public KDTree(BoundingBox bb,int maxEntities,int maxDepth){  this.bb=bb;  depth=0;  this.maxEntities=maxEntities;  this.maxDepth=maxDepth;  entities=new ArrayList<DefaultMapEntity>();}  }
class C{  public synchronized CacheManager cacheManager(){  if (cacheManager == null) {    CachingProvider cachingProvider=Caching.getCachingProvider();    cacheManager=cachingProvider.getCacheManager();  }  return cacheManager;}  }
class C{  @Override public void onReceive(Context context,Intent intent){  Bundle data=intent.getExtras();  String handleFromIntent=data.getString(MqttServiceConstants.CALLBACK_CLIENT_HANDLE);  if ((handleFromIntent == null) || (!handleFromIntent.equals(clientHandle))) {    return;  }  String action=data.getString(MqttServiceConstants.CALLBACK_ACTION);  if (MqttServiceConstants.CONNECT_ACTION.equals(action)) {    connectAction(data);  } else   if (MqttServiceConstants.MESSAGE_ARRIVED_ACTION.equals(action)) {    messageArrivedAction(data);  } else   if (MqttServiceConstants.SUBSCRIBE_ACTION.equals(action)) {    subscribeAction(data);  } else   if (MqttServiceConstants.UNSUBSCRIBE_ACTION.equals(action)) {    unSubscribeAction(data);  } else   if (MqttServiceConstants.SEND_ACTION.equals(action)) {    sendAction(data);  } else   if (MqttServiceConstants.MESSAGE_DELIVERED_ACTION.equals(action)) {    messageDeliveredAction(data);  } else   if (MqttServiceConstants.ON_CONNECTION_LOST_ACTION.equals(action)) {    connectionLostAction(data);  } else   if (MqttServiceConstants.DISCONNECT_ACTION.equals(action)) {    disconnected(data);  } else   if (MqttServiceConstants.TRACE_ACTION.equals(action)) {    traceAction(data);  } else {    mqttService.traceError(MqttService.TAG,"Callback action doesn't exist.");  }}  }
class C{  private double rParameter(Coordinate p1,Coordinate p2,Coordinate p){  double r;  double dx=Math.abs(p2.x - p1.x);  double dy=Math.abs(p2.y - p1.y);  if (dx > dy) {    r=(p.x - p1.x) / (p2.x - p1.x);  } else {    r=(p.y - p1.y) / (p2.y - p1.y);  }  return r;}  }
class C{  public ImageWrapper(BufferedImage bufferedImage,LanguageType languageType){  this.bufferedImage=bufferedImage;  this.languageType=languageType;  log.info("Loading BufferedImage");  log.info("Dimensions: {}x{}",bufferedImage.getWidth(),bufferedImage.getHeight());  init();  if (languageType.requiresImageWidthValidated()) {    validateImageWidth();  }}  }
class C{  public static void main(String[] args) throws IOException, ServiceException {  String queryString=null;  args=init(args,"Google-MetadataExample-1.0");  if (args.length == 1) {    queryString=args[0];  } else {    System.err.println("Invalid argument count.");    System.err.println("Expected one argument:");    System.err.println(" query");    System.exit(1);  }  queryMetadata(queryString);}  }
class C{  public BuyClientBuilder appId(final String appId){  this.appId=appId;  return this;}  }
class C{  public static void save(File file,Workspace workspace){  if (file != null) {    try {      FileOutputStream ostream=new FileOutputStream(file);      try {        WorkspaceSerializer serializer=new WorkspaceSerializer(workspace);        serializer.serialize(ostream);        workspace.setWorkspaceChanged(false);      }  finally {        ostream.close();      }    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public void regenerate(Projection proj){  if (text != null)   text.regenerate(proj);  setGrabPoints(text);  generate(proj);}  }
class C{  @Override public void actionPerformed(ActionEvent e){  FileDialog chooser=new FileDialog(frame,"Use a .png or .jpg extension",FileDialog.SAVE);  chooser.setVisible(true);  String filename=chooser.getFile();  if (filename != null) {    save(chooser.getDirectory() + File.separator + chooser.getFile());  }}  }
class C{  public synchronized void removeAllElements(){  for (int i=0; i < elementCount; i++) {    elementData[i]=null;  }  modCount++;  elementCount=0;}  }
class C{  private String printDFormat(String sx){  int nLeadingZeros=0;  int nBlanks=0, n=0;  int i=0;  final int jFirst;  final boolean neg=sx.charAt(0) == '-';  if (sx.equals("0") && precisionSet && precision == 0) {    sx="";  }  if (!neg) {    if (precisionSet && sx.length() < precision) {      nLeadingZeros=precision - sx.length();    }  } else {    if (precisionSet && (sx.length() - 1) < precision) {      nLeadingZeros=precision - sx.length() + 1;    }  }  if (nLeadingZeros < 0) {    nLeadingZeros=0;  }  if (fieldWidthSet) {    nBlanks=fieldWidth - nLeadingZeros - sx.length();    if (!neg && (leadingSign || leadingSpace)) {      nBlanks--;    }  }  if (nBlanks < 0) {    nBlanks=0;  }  if (leadingSign) {    n++;  } else   if (leadingSpace) {    n++;  }  n+=nBlanks;  n+=nLeadingZeros;  n+=sx.length();  final char[] ca=new char[n];  if (leftJustify) {    if (neg) {      ca[i++]='-';    } else     if (leadingSign) {      ca[i++]='+';    } else     if (leadingSpace) {      ca[i++]=' ';    }    final char[] csx=sx.toCharArray();    jFirst=neg ? 1 : 0;    for (int j=0; j < nLeadingZeros; i++, j++) {      ca[i]='0';    }    for (int j=jFirst; j < csx.length; j++, i++) {      ca[i]=csx[j];    }    for (int j=0; j < nBlanks; i++, j++) {      ca[i]=' ';    }  } else {    if (!leadingZeros) {      for (i=0; i < nBlanks; i++) {        ca[i]=' ';      }      if (neg) {        ca[i++]='-';      } else       if (leadingSign) {        ca[i++]='+';      } else       if (leadingSpace) {        ca[i++]=' ';      }    } else {      if (neg) {        ca[i++]='-';      } else       if (leadingSign) {        ca[i++]='+';      } else       if (leadingSpace) {        ca[i++]=' ';      }      for (int j=0; j < nBlanks; j++, i++) {        ca[i]='0';      }    }    for (int j=0; j < nLeadingZeros; j++, i++) {      ca[i]='0';    }    final char[] csx=sx.toCharArray();    jFirst=neg ? 1 : 0;    for (int j=jFirst; j < csx.length; j++, i++) {      ca[i]=csx[j];    }  }  return new String(ca);}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.766 -0500",hash_original_method="65CB26B736D03AA97EE4C837F4E38BB0",hash_generated_method="F8C76FD93A412C226F800BEA646A3651") private ThreadContainer findRootSet(){  ThreadContainer root=new ThreadContainer();  Iterator iter=idTable.keySet().iterator();  while (iter.hasNext()) {    Object key=iter.next();    ThreadContainer c=(ThreadContainer)idTable.get(key);    if (c.parent == null) {      if (c.next != null)       throw new RuntimeException("c.next is " + c.next.toString());      c.next=root.child;      root.child=c;    }  }  return root;}  }
class C{  public static void divCol(Matrix A,int j,int start,int to,double[] c){  for (int i=start; i < to; i++)   A.set(i,j,A.get(i,j) / c[i]);}  }
class C{  @Override public void execute(String[] params,Server server,Conversation conversation,IRCService service) throws CommandException {  if (params.length > 2) {    String text=BaseHandler.mergeParams(params);    Message message=new Message(">" + params[1] + "< "+ text);    message.setIcon(R.drawable.info);    conversation.addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),conversation.getName());    service.sendBroadcast(intent);    service.getConnection(server.getId()).sendNotice(params[1],text);  } else {    throw new CommandException(service.getString(R.string.invalid_number_of_params));  }}  }
class C{  public EditingModalGraphMouse(RenderContext<V,E> rc,Supplier<V> vertexFactory,Supplier<E> edgeFactory){  this(rc,vertexFactory,edgeFactory,1.1f,1 / 1.1f);}  }
class C{  private void switchCurrentBuffer(boolean enforceEOF) throws IOException {  bufStart=(long)BUFFER_SIZE * (long)currBufIdx;  if (currBufIdx >= file.numBuffers()) {    if (enforceEOF)     throw new EOFException("read past EOF: " + this);    currBufIdx--;    bufPosition=BUFFER_SIZE;  } else {    currBuf=file.getBuffer(currBufIdx);    bufPosition=0;    long buflen=length - bufStart;    bufLength=buflen > BUFFER_SIZE ? BUFFER_SIZE : (int)buflen;  }}  }
class C{  public TemplateVariable(String type,String name,String[] values,int[] offsets){  this(new TemplateVariableType(type),name,values,offsets);}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public static double quantile(double z,double m,double sd){  return m + Math.sqrt(2.0) * sd * ErrorFunction.inverseErf(2.0 * z - 1.0);}  }
class C{  @Override public void onExited(final ActiveEntity entity,final StendhalRPZone zone,final int oldX,final int oldY){  if (!(entity instanceof RPEntity)) {    return;  }  final RPEntity rpentity=(RPEntity)entity;  if (playersOnly && !(rpentity instanceof Player)) {    return;  }  if (targets.contains(rpentity.getID())) {    handleMovement(rpentity);    removeTarget(rpentity);    handleRemoved(rpentity);  }}  }
class C{  public static void validateForDirectAccess(VOPriceModel priceModel) throws ValidationException {  isZero(FIELD_NAME_PRICE_USERASSIGNMENT,priceModel.getPricePerUserAssignment());  isUserSteppedPricesEmpty(priceModel.getSteppedPrices());  List<VOPricedParameter> parameters=priceModel.getSelectedParameters();  for (  VOPricedParameter param : parameters) {    isZero(ParameterAssembler.FIELD_NAME_PRICE_PER_USER,param.getPricePerUser());    List<VOPricedOption> options=param.getPricedOptions();    if (options != null) {      for (      VOPricedOption po : options) {        isZero(ParameterAssembler.FIELD_NAME_PRICE_PER_USER,po.getPricePerUser());      }    }  }}  }
class C{  public T caseProjectReference(ProjectReference object){  return null;}  }
class C{  protected void updateTooltip(final AbstractZyGraph<?,?> graph,final Node node){  CTooltipUpdater.updateNodeTooltip(graph,node);}  }
class C{  @Override public synchronized void updateLong(String columnName,long x) throws SQLException {  updateLong(findColumn(columnName),x);}  }
class C{  public void removeFromUpload(OsmElement element){  apiStorage.removeElement(element);  element.setState(OsmElement.STATE_UNCHANGED);}  }
class C{  public void runCleanupNow(){  new ExpiredTokenCleaner().run();}  }
class C{  public synchronized boolean stopServer(){  if (!isProxyRunning) {    return false;  }  isProxyRunning=false;  HttpUtil.closeServerSocket(proxySocket);  try {    thread.join();  } catch (  Exception e) {  }  proxySocket=null;  return true;}  }
class C{  final public void print(Object v){  Writer out=this.out;  if (out == null)   return;  try {    if (v == null)     out.write(_nullChars,0,_nullChars.length); else {      String s=v.toString();      out.write(s,0,s.length());    }  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public int size(){  return mCapabilities.size();}  }
class C{  private static View findTouchTargetView(float[] eventCoords,ViewGroup viewGroup){  int childrenCount=viewGroup.getChildCount();  for (int i=childrenCount - 1; i >= 0; i--) {    View child=viewGroup.getChildAt(i);    if (isTouchPointInView(eventCoords[0],eventCoords[1],viewGroup,child)) {      eventCoords[0]+=viewGroup.getScrollY() - child.getTop();      eventCoords[1]+=viewGroup.getScrollX() - child.getLeft();      View targetView=findTouchTargetViewWithPointerEvents(eventCoords,child);      if (targetView != null) {        return targetView;      }      eventCoords[0]-=viewGroup.getScrollY() - child.getTop();      eventCoords[1]-=viewGroup.getScrollX() - child.getLeft();    }  }  return viewGroup;}  }
class C{  public static void openURL(final String url){  if (Desktop.isDesktopSupported()) {    try {      Desktop.getDesktop().browse(URI.create(url));    } catch (    IOException e) {      ClientLogger.logError("Could not open URL " + url,e);    }  } else {    logDesktopAPIMessage(url);  }}  }
class C{  private void explodeBlockAt(Block block,int i,int j,int k,boolean spawnExtraParticles){  if (spawnExtraParticles) {    double d0=(double)((float)i + worldObj.rand.nextFloat());    double d1=(double)((float)j + worldObj.rand.nextFloat());    double d2=(double)((float)k + worldObj.rand.nextFloat());    double d3=d0 - explosionX;    double d4=d1 - explosionY;    double d5=d2 - explosionZ;    double d6=(double)MathHelper.sqrt_double(d3 * d3 + d4 * d4 + d5 * d5);    d3/=d6;    d4/=d6;    d5/=d6;    double d7=0.5D / (d6 / (double)explosionSize + 0.1D);    d7*=(double)(worldObj.rand.nextFloat() * worldObj.rand.nextFloat() + 0.3F);    d3*=d7;    d4*=d7;    d5*=d7;    worldObj.spawnParticle("explode",(d0 + explosionX * 1.0D) / 2.0D,(d1 + explosionY * 1.0D) / 2.0D,(d2 + explosionZ * 1.0D) / 2.0D,d3,d4,d5);    worldObj.spawnParticle("smoke",d0,d1,d2,d3,d4,d5);  }  if (block.getMaterial() != Material.air) {    if (block.canDropFromExplosion(this)) {      block.dropBlockAsItemWithChance(worldObj,i,j,k,worldObj.getBlockMetadata(i,j,k),0.0F,0);    }    block.onBlockExploded(worldObj,i,j,k,this);  }}  }
class C{  private boolean tableproduct(int M_Product_ID,int PP_Product_BOM_ID){  if (tableproduct.containsKey(M_Product_ID)) {    return true;  }  tableproduct.put(M_Product_ID,PP_Product_BOM_ID);  return false;}  }
class C{  public static void main(String[] args){  Header.printHeader(PythonRIntegrator.class.toString(),args);  String baseFolder=args[0];  int numberOfThreads=Integer.parseInt(args[1]);  int blockSize=Integer.parseInt(args[2]);  PythonRIntegrator pji=new PythonRIntegrator(baseFolder);  pji.runMultithreaded(pji.zoneList,numberOfThreads,blockSize);  pji.aggregate();  Header.printFooter();}  }
class C{  public Tasks<HostRestRep> discoverHostArrayAffinity(ArrayAffinityHostParam param){  return postTasks(param,baseUrl + "/discover-array-affinity");}  }
class C{  private static double[] computeLabels(final double start,final double end,final int approxNumLabels){  if (Math.abs(start - end) < 0.0000001f) {    return new double[]{start,start,0};  }  double s=start;  double e=end;  boolean switched=false;  if (s > e) {    switched=true;    double tmp=s;    s=e;    e=tmp;  }  double xStep=roundUp(Math.abs(s - e) / approxNumLabels);  double xStart=xStep * Math.ceil(s / xStep);  double xEnd=xStep * Math.floor(e / xStep);  if (switched) {    return new double[]{xEnd,xStart,-1.0 * xStep};  }  return new double[]{xStart,xEnd,xStep};}  }
class C{  private boolean isSynthetic(FieldOrMethod member){  if (BCELUtil.isSynthetic(member)) {    return true;  }  String name=member.getName();  if (name.startsWith("class$")) {    return true;  }  if (name.startsWith("access$")) {    return true;  }  return false;}  }
class C{  private boolean moveFilesFromInstallationFolderToWwwFolder(){  try {    FilesUtility.copy(newReleaseFS.getDownloadFolder(),newReleaseFS.getWwwFolder());    return true;  } catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  private void visitImplicitFirstFrame(){  int frameIndex=startFrame(0,descriptor.length() + 1,0);  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & ACC_CONSTRUCTOR) == 0) {      frame[frameIndex++]=Frame.OBJECT | cw.addType(cw.thisName);    } else {      frame[frameIndex++]=6;    }  }  int i=1;  loop:   while (true) {    int j=i;switch (descriptor.charAt(i++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':      frame[frameIndex++]=1;    break;case 'F':  frame[frameIndex++]=2;break;case 'J':frame[frameIndex++]=4;break;case 'D':frame[frameIndex++]=3;break;case '[':while (descriptor.charAt(i) == '[') {++i;}if (descriptor.charAt(i) == 'L') {++i;while (descriptor.charAt(i) != ';') {++i;}}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j,++i));break;case 'L':while (descriptor.charAt(i) != ';') {++i;}frame[frameIndex++]=Frame.OBJECT | cw.addType(descriptor.substring(j + 1,i++));break;default :break loop;}}frame[1]=frameIndex - 3;endFrame();}  }
class C{  public void updateKafkaProperties(EtlJobName jobName,int jobRefId) throws Exception {  Properties props;  try {    props=EtlJobPropertyDao.getJobProperties(jobName,jobRefId);  } catch (  Exception e) {    Logger.error("Fail to update Kafka job properties for " + jobName.name() + ", ref id: "+ jobRefId);    return;  }  Logger.info("Get Kafka job properties for " + jobName.name() + ", job ref id: "+ jobRefId);  String[] topics=((String)props.remove("kafka.topics")).split("\\s*,\\s*");  String[] processors=((String)props.remove("kafka.processors")).split("\\s*,\\s*");  String[] dbTables=((String)props.remove("kafka.db.tables")).split("\\s*,\\s*");  _props.clear();  _props.putAll(props);  _topics.clear();  for (int i=0; i < topics.length; i++) {    _topics.put(topics[i],new Topic(topics[i],1,processors[i],dbTables[i]));  }}  }
class C{  public CCVertex3D vertex(ccGridSize pos){  CCGrid3D g=(CCGrid3D)target.getGrid();  return g.vertex(pos);}  }
class C{  public ConcurrentModificationException(){}  }
class C{  private void checkChildElementPresence(String elementToTest,Elements elements,TestSolutionHandler testSolutionHandler){  if (elements.isEmpty()) {    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);    return;  }  TestSolution testSolution=TestSolution.PASSED;  for (  Element el : elements) {    if (el.getElementsByTag(elementToTest).size() >= minimumNumberOfChildRequired) {      testSolution=setTestSolution(testSolution,getSuccessSolution());      addSourceCodeRemark(getSuccessSolution(),el,getSuccessMsgCode());    } else {      testSolution=setTestSolution(testSolution,getFailureSolution());      addSourceCodeRemark(getFailureSolution(),el,getFailureMsgCode());    }  }  testSolutionHandler.addTestSolution(testSolution);}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  protected void selectSubString(Element element,int charnum,int nchars){  TextNode textNode=getTextNode();  AttributedCharacterIterator aci;  aci=textNode.getAttributedCharacterIterator();  if (aci == null)   return;  int firstChar=getElementStartIndex(element);  if (firstChar == -1)   return;  List list=getTextRuns(textNode);  int lastChar=getElementEndIndex(element);  CharacterInformation firstInfo, lastInfo;  firstInfo=getCharacterInformation(list,firstChar,charnum,aci);  lastInfo=getCharacterInformation(list,firstChar,charnum + nchars - 1,aci);  Mark firstMark, lastMark;  firstMark=textNode.getMarkerForChar(firstInfo.characterIndex,true);  if (lastInfo != null && lastInfo.characterIndex <= lastChar) {    lastMark=textNode.getMarkerForChar(lastInfo.characterIndex,false);  } else {    lastMark=textNode.getMarkerForChar(lastChar,false);  }  ctx.getUserAgent().setTextSelection(firstMark,lastMark);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public Future<String> spawnRestore(String uri) throws BackupException {  if (logger.isDebugEnabled()) {    logger.debug("Processing restore request: uri=" + uri);  }  assertEnabled();  StorageAgent storageAgent=null;  URI realUri=null;  StorageSpecification storageSpec=null;  if (uri == null) {    storageAgent=findStorageAgent(null);    realUri=storageAgent.last();    if (realUri == null) {      throw new BackupException("Default storage agent does not have a most recent backup");    }    storageSpec=storageAgent.getSpecification(realUri);  } else {    try {      realUri=new URI(uri);    } catch (    URISyntaxException e) {      throw new BackupException("Invalid URI format: uri=" + uri + " message="+ e.getMessage(),e);    }    for (    String agentName : this.storageAgents.keySet()) {      storageAgent=findStorageAgent(agentName);      storageSpec=storageAgent.getSpecification(realUri);      if (storageSpec != null)       break;    }  }  if (storageSpec == null) {    throw new BackupException("Backup not found: " + uri);  }  String backupAgentName=storageSpec.getAgent();  BackupAgent backupAgent=this.findBackupAgent(backupAgentName);  RestoreTask callable=new RestoreTask(realUri,eventDispatcher,backupAgent,storageAgent);  Future<String> task=taskService.submit(callable);  return task;}  }
class C{  public byte[] toBytecode() throws IOException, CannotCompileException {  ByteArrayOutputStream barray=new ByteArrayOutputStream();  DataOutputStream out=new DataOutputStream(barray);  try {    toBytecode(out);  }  finally {    out.close();  }  return barray.toByteArray();}  }
class C{  public GrahamScan(Point2D[] pts){  int N=pts.length;  Point2D[] points=new Point2D[N];  System.arraycopy(pts,0,points,0,N);  Arrays.sort(points);  Arrays.sort(points,1,N,points[0].polarOrder());  hull.push(points[0]);  int k1;  for (k1=1; k1 < N; k1++)   if (!points[0].equals(points[k1]))   break;  if (k1 == N)   return;  int k2;  for (k2=k1 + 1; k2 < N; k2++)   if (Point2D.ccw(points[0],points[k1],points[k2]) != 0)   break;  hull.push(points[k2 - 1]);  for (int i=k2; i < N; i++) {    Point2D top=hull.pop();    while (Point2D.ccw(hull.peek(),top,points[i]) <= 0) {      top=hull.pop();    }    hull.push(top);    hull.push(points[i]);  }}  }
class C{  @Override public int compareTo(final UriFrequency arg0){  return arg0.cnt - cnt;}  }
class C{  public boolean isValid(){  return (host != null) && (user != null) && (password != null)&& !host.equals("")&& !user.equals("")&& !password.equals("");}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/san-fabrics/{fabricId}/san-zones/remove") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep removeSanZones(SanZonesDeleteParam sanZones,@PathParam("id") URI id,@PathParam("fabricId") String fabricId) throws InternalException {  String task=UUID.randomUUID().toString();  String fabricWwn=null;  if (WWNUtility.isValidWWN(fabricId)) {    fabricWwn=fabricId;    fabricId=fabricId.replaceAll(":","");  }  ArgValidator.checkFieldUriType(id,NetworkSystem.class,"id");  NetworkSystem device=queryResource(id);  Operation op=_dbClient.createTaskOpStatus(NetworkSystem.class,device.getId(),task,ResourceOperationTypeEnum.REMOVE_SAN_ZONE);  List<Zone> zones=new ArrayList<Zone>();  for (  SanZone sz : sanZones.getZones()) {    Zone zone=new Zone(sz.getName());    zones.add(zone);    for (    String szm : sz.getMembers()) {      ZoneMember member=createZoneMember(szm);      zone.getMembers().add(member);    }    auditOp(OperationTypeEnum.REMOVE_SAN_ZONE,true,AuditLogManager.AUDITOP_BEGIN,zone.getName(),device.getId().toString(),device.getLabel(),device.getPortNumber(),device.getUsername(),device.getSmisProviderIP(),device.getSmisPortNumber(),device.getSmisUserName(),device.getSmisUseSSL(),device.getVersion(),device.getUptime());  }  ArgValidator.checkFieldNotEmpty(zones,"zones");  NetworkController controller=getNetworkController(device.getSystemType());  controller.removeSanZones(device.getId(),fabricId,fabricWwn,zones,false,task);  return toTask(device,task,op);}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return (pluggy != null && sage.plugin.CorePluginManager.getInstance().isPluginInstalledSameVersion(pluggy)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  protected GenericEntity(){}  }
class C{  public ProtocolException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public void deviceCollapse(String sourceDeviceNameOrPath,String collapseType) throws VPlexApiException {  s_logger.info("Request to collapse device {} with collapse type {}",sourceDeviceNameOrPath,collapseType);  _virtualVolumeMgr.deviceCollapse(sourceDeviceNameOrPath,collapseType);}  }
class C{  public boolean isStdErrAppend(){  return stdErrAppend;}  }
class C{  private boolean keepWaiting(){  return m_waitingFor != 0;}  }
class C{  private static void __trustAllHostnames(){  if (__hostnameVerifier == null) {    __hostnameVerifier=new _FakeHostnameVerifier();  }  com.sun.net.ssl.HttpsURLConnection.setDefaultHostnameVerifier(__hostnameVerifier);}  }
class C{  public ClassFile(boolean isInterface,String classname,String superclass){  major=MAJOR_VERSION;  minor=0;  constPool=new ConstPool(classname);  thisClass=constPool.getThisClassInfo();  if (isInterface)   accessFlags=AccessFlag.INTERFACE | AccessFlag.ABSTRACT; else   accessFlags=AccessFlag.SUPER;  initSuperclass(superclass);  interfaces=null;  fields=new ArrayList();  methods=new ArrayList();  thisclassname=classname;  attributes=new ArrayList();  attributes.add(new SourceFileAttribute(constPool,getSourcefileName(thisclassname)));}  }
class C{  public Attachment(String formatType,byte[] data){  super(data);  setFormatType(formatType);}  }
class C{  private boolean isValidIndex(int index){  return index >= 0 && index <= this.size() - 1;}  }
class C{  public void handle404SessionNotFound(SipResponse resp){  handleError(new ChatError(ChatError.SESSION_NOT_FOUND,resp.getReasonPhrase()));}  }
class C{  public void pauseTriggers(GroupMatcher<TriggerKey> matcher) throws SchedulerException {  sched.pauseTriggers(matcher);}  }
class C{  public static String xmlProtect(final String s){  if (s == null) {    return null;  }  final int slen=s.length();  if (slen == 0) {    return s;  }  final StringBuilder b=new StringBuilder();  for (int i=0; i < slen; i++) {    final char c=s.charAt(i);switch (c) {case '<':      b.append("&lt;");    break;case '>':  b.append("&gt;");break;case '&':b.append("&amp;");break;case '"':b.append("&quot;");break;default :b.append(c);break;}}return b.toString();}  }
class C{  private void configureFSA(IN4JSProject in4jsProject){  File userdir=new File(".");  File prjdir=new File(in4jsProject.getLocation().toFileString());  java.net.URI relativize=userdir.toURI().relativize(prjdir.toURI());  final String relativePrjReference=relativize.getPath();  if (relativePrjReference.length() == 0) {    return;  }  fsa.setOutputConfigurations(transformedOutputConfiguration(relativePrjReference));}  }
class C{  @Override public void valueUnbound(HttpSessionBindingEvent event){  Iterator iter=this.chartNames.listIterator();  while (iter.hasNext()) {    String filename=(String)iter.next();    File file=new File(System.getProperty("java.io.tmpdir"),filename);    if (file.exists()) {      file.delete();    }  }}  }
class C{  @Override public String toString(){  if (isGenerated()) {    return "(" + low + ","+ high+ ","+ max+ ")";  }  if (isReadyToGenerate()) {    return "{" + low + ","+ max+ "}";  }  return "[" + low + ","+ max+ "]";}  }
class C{  private CInstructionFunctions(){}  }
class C{  public static String escapeTextWithSeparator(String item,char separator){  StringBuilder sb=new StringBuilder(item.length() * 2);  appendEscapedTextToBuilder(sb,item,separator);  return sb.toString();}  }
class C{  public static String toHexString(byte[] buf,String sep,int lineLen){  if (buf == null)   return null;  if (lineLen <= 0)   lineLen=Integer.MAX_VALUE;  StringBuffer res=new StringBuffer(buf.length * 2);  for (int i=0; i < buf.length; i++) {    int b=buf[i];    res.append(HEX_DIGITS[(b >> 4) & 0xf]);    res.append(HEX_DIGITS[b & 0xf]);    if (i > 0 && (i % lineLen) == 0)     res.append('\n'); else     if (sep != null && i < lineLen - 1)     res.append(sep);  }  return res.toString();}  }
class C{  void addAll(Hashset set){  for (Enumeration e=set.table.keys(); e.hasMoreElements(); )   add(e.nextElement());}  }
class C{  public static boolean isBlockEnd(int opcode){  return (flagsArray[opcode & 0xff] & (STOP | FALL_THROUGH)) != 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  private void loadList(final BlacklistFile blFile,final String sep){  final Map<String,Set<Pattern>> blacklistMapMatch=getBlacklistMap(blFile.getType(),true);  final Map<String,Set<Pattern>> blacklistMapNotMatch=getBlacklistMap(blFile.getType(),false);  Set<Map.Entry<String,List<String>>> loadedBlacklist;  Map.Entry<String,List<String>> loadedEntry;  Set<Pattern> paths;  List<String> loadedPaths;  Set<Pattern> loadedPathsPattern;  final Set<String> fileNames=blFile.getFileNamesUnified();  for (  final String fileName : fileNames) {    final File file=new File(this.blacklistRootPath,fileName);    try {      file.createNewFile();    } catch (    final IOException e) {    }    loadedBlacklist=SetTools.loadMapMultiValsPerKey(file.toString(),sep).entrySet();    for (final Iterator<Map.Entry<String,List<String>>> mi=loadedBlacklist.iterator(); mi.hasNext(); ) {      loadedEntry=mi.next();      loadedPaths=loadedEntry.getValue();      loadedPathsPattern=new HashSet<Pattern>();      for (      String a : loadedPaths) {        if (a.equals("*")) {          loadedPathsPattern.add(Pattern.compile(".*",Pattern.CASE_INSENSITIVE));          continue;        }        if (a.indexOf("?*",0) > 0) {          log.warn("ignored blacklist path to prevent 'Dangling meta character' exception: " + a);          continue;        }        loadedPathsPattern.add(Pattern.compile(a,Pattern.CASE_INSENSITIVE));      }      paths=(isMatchable(loadedEntry.getKey())) ? blacklistMapMatch.get(loadedEntry.getKey()) : blacklistMapNotMatch.get(loadedEntry.getKey());      if (paths == null) {        if (isMatchable(loadedEntry.getKey())) {          blacklistMapMatch.put(loadedEntry.getKey(),loadedPathsPattern);        } else {          blacklistMapNotMatch.put(loadedEntry.getKey(),loadedPathsPattern);        }      } else {        paths.addAll(new HashSet<Pattern>(loadedPathsPattern));      }    }  }}  }
class C{  public void stateChanged(ChangeEvent e){}  }
class C{  void processClientHello(){  CipherSuite cipher_suite;  checkCompression: {    for (int i=0; i < clientHello.compression_methods.length; i++) {      if (clientHello.compression_methods[i] == 0) {        break checkCompression;      }    }    fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");  }  byte[] server_version=clientHello.client_version;  if (!ProtocolVersion.isSupported(clientHello.client_version)) {    if (clientHello.client_version[0] >= 3) {      server_version=ProtocolVersion.TLSv1.version;    } else {      fatalAlert(AlertProtocol.PROTOCOL_VERSION,"PROTOCOL VERSION. Unsupported client version " + clientHello.client_version[0] + clientHello.client_version[1]);    }  }  isResuming=false;  FIND:   if (clientHello.session_id.length != 0) {    SSLSessionImpl sessionToResume;    boolean reuseCurrent=false;    if (session != null && Arrays.equals(session.id,clientHello.session_id)) {      if (session.isValid()) {        isResuming=true;        break FIND;      }      reuseCurrent=true;    }    sessionToResume=findSessionToResume(clientHello.session_id);    if (sessionToResume == null || !sessionToResume.isValid()) {      if (!parameters.getEnableSessionCreation()) {        if (reuseCurrent) {          sendWarningAlert(AlertProtocol.NO_RENEGOTIATION);          status=NOT_HANDSHAKING;          clearMessages();          return;        }        fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");      }      session=null;    } else {      session=(SSLSessionImpl)sessionToResume.clone();      isResuming=true;    }  }  if (isResuming) {    cipher_suite=session.cipherSuite;    checkCipherSuite: {      for (int i=0; i < clientHello.cipher_suites.length; i++) {        if (cipher_suite.equals(clientHello.cipher_suites[i])) {          break checkCipherSuite;        }      }      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");    }  } else {    cipher_suite=selectSuite(clientHello.cipher_suites);    if (cipher_suite == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. NO COMMON SUITE");    }    if (!parameters.getEnableSessionCreation()) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");    }    session=new SSLSessionImpl(cipher_suite,parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getInetAddress().getHostName(),socketOwner.getPort());    }  }  recordProtocol.setVersion(server_version);  session.protocol=ProtocolVersion.getByVersion(server_version);  session.clientRandom=clientHello.random;  serverHello=new ServerHello(parameters.getSecureRandom(),server_version,session.getId(),cipher_suite,(byte)0);  session.serverRandom=serverHello.random;  send(serverHello);  if (isResuming) {    sendChangeCipherSpec();    return;  }  if (!cipher_suite.isAnonymous()) {    X509Certificate[] certs=null;    String certType=cipher_suite.getServerKeyType();    if (certType == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO CERT TYPE FOR " + cipher_suite.getName());    }    String alias=null;    X509KeyManager km=parameters.getKeyManager();    if (km instanceof X509ExtendedKeyManager) {      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;      if (this.socketOwner != null) {        alias=ekm.chooseServerAlias(certType,null,this.socketOwner);      } else {        alias=ekm.chooseEngineServerAlias(certType,null,this.engineOwner);      }      if (alias != null) {        certs=ekm.getCertificateChain(alias);      }    } else {      alias=km.chooseServerAlias(certType,null,this.socketOwner);      if (alias != null) {        certs=km.getCertificateChain(alias);      }    }    if (certs == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO SERVER CERTIFICATE FOUND");      return;    }    session.localCertificates=certs;    serverCert=new CertificateMessage(certs);    privKey=km.getPrivateKey(alias);    send(serverCert);  }  RSAPublicKey rsakey=null;  DHPublicKeySpec dhkeySpec=null;  byte[] hash=null;  BigInteger p=null;  BigInteger g=null;  KeyPairGenerator kpg=null;  try {    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {      PublicKey pk=serverCert.certs[0].getPublicKey();      if (getRSAKeyLength(pk) > 512) {        kpg=KeyPairGenerator.getInstance("RSA");        kpg.initialize(512);      }    } else     if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT) {      kpg=KeyPairGenerator.getInstance("DH");      p=new BigInteger(1,DHParameters.getPrime());      g=new BigInteger("2");      DHParameterSpec spec=new DHParameterSpec(p,g);      kpg.initialize(spec);    }  } catch (  Exception e) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);  }  if (kpg != null) {    DigitalSignature ds=new DigitalSignature(cipher_suite.authType);    KeyPair kp=null;    try {      kp=kpg.genKeyPair();      if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {        rsakey=(RSAPublicKey)kp.getPublic();      } else {        DHPublicKey dhkey=(DHPublicKey)kp.getPublic();        KeyFactory kf=KeyFactory.getInstance("DH");        dhkeySpec=kf.getKeySpec(dhkey,DHPublicKeySpec.class);      }      if (!cipher_suite.isAnonymous()) {        ds.init(privKey);        privKey=kp.getPrivate();        ds.update(clientHello.getRandom());        ds.update(serverHello.getRandom());        if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {          ServerKeyExchange.updateSignatureRsa(ds,rsakey.getModulus(),rsakey.getPublicExponent());        } else {          ServerKeyExchange.updateSignatureDh(ds,dhkeySpec.getP(),dhkeySpec.getG(),dhkeySpec.getY());        }        hash=ds.sign();      } else {        privKey=kp.getPrivate();      }    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);    }    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {      serverKeyExchange=new ServerKeyExchange(rsakey.getModulus(),rsakey.getPublicExponent(),null,hash);    } else {      serverKeyExchange=new ServerKeyExchange(p,g,dhkeySpec.getY(),hash);    }    send(serverKeyExchange);  }  certRequest:   if (parameters.getWantClientAuth() || parameters.getNeedClientAuth()) {    X509Certificate[] accepted;    try {      X509TrustManager tm=parameters.getTrustManager();      accepted=tm.getAcceptedIssuers();    } catch (    ClassCastException e) {      break certRequest;    }    byte[] requestedClientCertTypes={CipherSuite.TLS_CT_RSA_SIGN,CipherSuite.TLS_CT_DSS_SIGN};    certificateRequest=new CertificateRequest(requestedClientCertTypes,accepted);    send(certificateRequest);  }  serverHelloDone=new ServerHelloDone();  send(serverHelloDone);  status=NEED_UNWRAP;}  }
class C{  public void replaceSplitElement(int aIndex,DecompoundedWord aSplit){  splits.remove(aIndex);  for (int j=0; j < aSplit.getSplits().size(); j++) {    Fragment e=aSplit.getSplits().get(j);    splits.add(aIndex + j,e);  }}  }
class C{  public static double sinQuick(double angle){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.sin(angle) : Math.sin(angle);  }  return cosTab[((int)(Math.abs(angle - Math.PI / 2) * SIN_COS_INDEXER + 0.5)) & (SIN_COS_TABS_SIZE - 2)];}  }
class C{  public long[] keys(){  return this.keys;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public ToStringBuilder append(byte[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public boolean isSetRegisterRequest(){  return this.registerRequest != null;}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>MapIterator<K,V> emptyMapIterator(){  return (MapIterator<K,V>)INSTANCE;}  }
class C{  private static boolean isOptimizable(final Step step){  return ((step instanceof VertexStep && ((VertexStep)step).returnsVertex()) || (step instanceof PropertiesStep && PropertyType.VALUE.equals(((PropertiesStep)step).getReturnType()))) && (step.getTraversal().getEndStep().getLabels().isEmpty() || step.getNextStep() instanceof CountGlobalStep);}  }
class C{  public static ObjectAnimator ofPropertyValuesHolder(Object target,PropertyValuesHolder... values){  ObjectAnimator anim=new ObjectAnimator();  anim.mTarget=target;  anim.setValues(values);  return anim;}  }
class C{  public TreeLayout(Forest<V,E> g,int distx,int disty){  if (g == null)   throw new IllegalArgumentException("Graph must be non-null");  if (distx < 1 || disty < 1)   throw new IllegalArgumentException("X and Y distances must each be positive");  this.graph=g;  this.distX=distx;  this.distY=disty;  buildTree();}  }
class C{  public static SepsetMap serializableInstance(){  return new SepsetMap();}  }
class C{  public static long registersToLong(byte[] bytes){  return ((((long)(bytes[0] & 0xff) << 56) | ((long)(bytes[1] & 0xff) << 48) | ((long)(bytes[2] & 0xff) << 40)| ((long)(bytes[3] & 0xff) << 32)| ((long)(bytes[4] & 0xff) << 24)| ((long)(bytes[5] & 0xff) << 16)| ((long)(bytes[6] & 0xff) << 8)| ((long)(bytes[7] & 0xff))));}  }
class C{  private org.locationtech.jts.geom.MultiLineString readMultiLineStringText() throws IOException, ParseException {  String nextToken=getNextEmptyOrOpener();  if (nextToken.equals(EMPTY)) {    return geometryFactory.createMultiLineString(new LineString[]{});  }  ArrayList lineStrings=new ArrayList();  LineString lineString=readLineStringText();  lineStrings.add(lineString);  nextToken=getNextCloserOrComma();  while (nextToken.equals(COMMA)) {    lineString=readLineStringText();    lineStrings.add(lineString);    nextToken=getNextCloserOrComma();  }  LineString[] array=new LineString[lineStrings.size()];  return geometryFactory.createMultiLineString((LineString[])lineStrings.toArray(array));}  }
class C{  public static URL createURL(String spec) throws MalformedURLException {  return createURL(null,spec);}  }
class C{  private void rebuildTableChat(){  final boolean showRecipient=showMessageRecipientCheckBox.isSelected();  final boolean formParagraphs=formatIntoPsCheckBox.isSelected();  final long breakMs=Env.APP_SETTINGS.get(Settings.PARAGRAPH_BREAK_TIME_LIMIT) * 1000;  final boolean showPings=showPingsCheckBox.isSelected();  final Vector<String> columns;  if (showRecipient)   columns=Utils.asNewVector("User Color","","Time","User","Recipient","Text"); else   columns=Utils.asNewVector("","","Time","User","Text");  final Vector<Vector<Object>> data=new Vector<>();  long lastTime=0;  for (  final Event e : repProc.replay.messageEvents.events) {    if (!(e instanceof ChatEvent || showPings && e instanceof PingEvent))     continue;    if (formParagraphs) {      final long time=repProc.loopToTime(e.loop);      if (!data.isEmpty() && time - lastTime > breakMs)       data.add(new Vector<>());      lastTime=time;    }    final Vector<Object> row=new Vector<>(columns.size());    final User u=repProc.getUser(e.userId);    row.add(u.getPlayerColor().darkerColor);    row.add(e.getRicon());    row.add(new DurationValue(repProc.loopToTime(e.loop)));    row.add(u.uid.fullName);    if (e instanceof ChatEvent) {      final ChatEvent ce=(ChatEvent)e;      if (showRecipient)       row.add(ce.getRecipient());      row.add(ce.getText());    } else     if (e instanceof PingEvent) {      final PingEvent pe=(PingEvent)e;      if (showRecipient)       row.add(pe.getRecipient());      row.add("Pinged position: X=" + Env.LANG.formatNumber(pe.getXFloat(),3) + ", Y="+ Env.LANG.formatNumber(pe.getYFloat(),3));    }    data.add(row);  }  chatTable.getXTableModel().setDataVector(data,columns);  chatTable.removeColumn(chatTable.getColumnModel().getColumn(0));  chatTable.packColumnsExceptLast();  chatTable.setSortable(false);}  }
class C{  public void moveRowRelative(int rows) throws SQLException {  notSupported();}  }
class C{  @Override public int first(){  CharacterIterator t=getText();  t.first();  return t.getIndex();}  }
class C{  @org.junit.Test public void testHTML(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("html bar");  String response=waitForOutput(output);  if (!response.equals("<b>bold</b><a href=\"foo.com\" target=\"_blank\">bar</a><p>hello<br>world</br></p><ol><li>foo</li><li>bar</li></ol>")) {    fail("Incorrect response: " + response);  }  bot.shutdown();}  }
class C{  public Address toFilebase(final Module module,final Address address){  Preconditions.checkNotNull(module,"Error: Module argument can not be null");  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  return new Address(m_debugger.memoryToFile(module.getNative(),new RelocatedAddress(new CAddress(address.toLong()))).getAddress().toBigInteger());}  }
class C{  public static XMLTreeLocation before(String name){  return new XMLTreeLocation(LocationType.BEFORE,name);}  }
class C{  public boolean isUseCaching(){  return useCaching;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static String scramble(final String name,int seed,final boolean enc){  final char[] retString=name.toCharArray();  final int len=name.length();  int i, j;  final char[] alphabet={'_','B','q','w','H','a','F','8','T','k','K','D','M','f','O','z','Q','A','S','x','4','V','u','X','d','Z','i','b','U','I','e','y','l','J','W','h','j','0','m','5','o','2','E','r','L','t','6','v','G','R','N','9','s','Y','1','n','3','P','p','c','7','g','-','C'};  final int alphabetLen=alphabet.length;  if (seed < 0) {    seed=-seed;  }  seed=(seed > 0) ? seed%=alphabetLen : seed;  if (seed == 0) {    seed=1;  }  if (Cfg.DEBUG) {    Check.asserts(seed > 0,"negative seed");  }  for (i=0; i < len; i++) {    for (j=0; j < alphabetLen; j++) {      if (retString[i] == alphabet[j]) {        if (enc) {          retString[i]=alphabet[(j + seed) % alphabetLen];        } else {          retString[i]=alphabet[(j + alphabetLen - seed) % alphabetLen];        }        break;      }    }  }  return new String(retString);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SVGOMFEColorMatrixElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void endDocument() throws IOException {  _writer.flush();}  }
class C{  protected ContentProtection parseContentProtection(XmlPullParser xpp) throws XmlPullParserException, IOException {  String schemeIdUri=xpp.getAttributeValue(null,"schemeIdUri");  return buildContentProtection(schemeIdUri);}  }
class C{  private void cancelExistingIfAnyAndScheduleTimeoutCall(){  if (timeoutMessageCancellable != null && !timeoutMessageCancellable.isCancelled()) {    timeoutMessageCancellable.cancel();  }  timeoutMessageCancellable=getContext().system().scheduler().scheduleOnce(timeoutDuration,getSelf(),OperationWorkerMsgType.OPERATION_TIMEOUT,getContext().system().dispatcher(),getSelf());}  }
class C{  public void clear(){  vals.clear();}  }
class C{  private void monitorUsedMemory(String labelPrefix,GcInfo gcInfo,String details){  for (  Map.Entry<String,MemoryUsage> entry : gcInfo.getMemoryUsageAfterGc().entrySet()) {    MonKey key=new MonKeyImp(labelPrefix + ".usedMemory." + entry.getKey(),details,"bytes");    MonitorFactory.add(key,entry.getValue().getUsed());  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public PixelMatrixEditorException(final String message){  super(message);}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public double distance(final double x,final double y,final double z){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  final double dz=(double)this.z - z;  return Math.sqrt(dx * dx + dy * dy + dz * dz);}  }
class C{  public final boolean postAtFrontOfQueue(Runnable r){  return mExec.postAtFrontOfQueue(wrapRunnable(r));}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void unflatten(){  shadowRippleGenerator.unflatten();}  }
class C{  private void displayNominalValues(){  List<ValueAndCount> nominalValues=((NominalAttributeStatisticsModel)model).getNominalValuesAndCount();  String valueString="";  if (getModel() != null && getModel().isEnlarged()) {    StringBuilder builderHTML=new StringBuilder();    builderHTML.append("<html>");    int maxDisplayValues=NominalAttributeStatisticsModel.DEFAULT_MAX_DISPLAYED_VALUES_ENLARGED;    Iterator<ValueAndCount> it=new LinkedList<>(nominalValues).iterator();    int n=0;    while (it.hasNext() && n < maxDisplayValues) {      if (n % (NominalAttributeStatisticsModel.DEFAULT_MAX_DISPLAYED_VALUES_ENLARGED / 2) == 0) {        builderHTML.append("<br>");      }      ValueAndCount value=it.next();      String tmpString=value.getValue();      String valueStringTruncated=SwingTools.getShortenedDisplayName(tmpString,17);      builderHTML.append(valueStringTruncated + " (" + value.getCount()+ ")");      if (n < Math.min(nominalValues.size() - 1,maxDisplayValues)) {        builderHTML.append(", ");      }      n++;    }    int omittedCount=0;    while (it.hasNext()) {      it.next();      omittedCount++;    }    if (omittedCount > 0) {      builderHTML.append("<br>");      builderHTML.append(LABEL_DOTS + "[" + omittedCount+ " "+ I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.values_more")+ "]");    }    builderHTML.append("</html>");    valueString=builderHTML.toString();  } else {    StringBuilder builderDefault=new StringBuilder();    int maxDisplayValues=NominalAttributeStatisticsModel.DEFAULT_MAX_DISPLAYED_VALUES_ENLARGED / 2;    Iterator<ValueAndCount> it=new LinkedList<>(nominalValues).iterator();    int n=0;    while (it.hasNext() && n < maxDisplayValues) {      ValueAndCount value=it.next();      String tmpString=value.getValue();      String valueStringTruncated=SwingTools.getShortenedDisplayName(tmpString,17);      builderDefault.append(valueStringTruncated + " (" + value.getCount()+ ")");      if (n < Math.min(nominalValues.size() - 1,maxDisplayValues)) {        builderDefault.append(", ");      }      n++;    }    int omittedCount=0;    while (it.hasNext()) {      it.next();      omittedCount++;    }    if (omittedCount > 0) {      builderDefault.append(LABEL_DOTS + "[" + omittedCount+ " "+ I18N.getMessage(I18N.getGUIBundle(),"gui.label.attribute_statistics.statistics.values_more")+ "]");    }    valueString=builderDefault.toString();  }  nominalValueFiller.setVisible(getModel() != null && !getModel().isEnlarged());  detailsButton.setVisible(getModel() != null && getModel().isEnlarged());  labelStatsValues.setText(valueString);  labelStatsValues.setToolTipText(valueString);  labelStatsValues.setVisible(true);}  }
class C{  public void onFragmentHidden(){  InputMethodManager imm=(InputMethodManager)getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(mField.getWindowToken(),0);}  }
class C{  private void calculateComparisonSet(cern.jet.random.Normal n,DataSet data){  this.comparisonVariable=new double[data.getNumRows()];  int column2=data.getColumn(this.selectedVariable);  for (int i=0; i < data.getNumRows(); i++) {    double valueAtQuantile=findQuantile((i + 1) / (data.getNumRows() + 1.0),this.minData,this.maxData,n,.0001,0,50);    this.comparisonVariable[i]=valueAtQuantile;    if (valueAtQuantile < this.minComparison) {      this.minComparison=valueAtQuantile;    }    if (valueAtQuantile > this.maxComparison) {      this.maxComparison=valueAtQuantile;    }  }}  }
class C{  @Post public String store(String fmJson){  IStorageSourceService storageSource=(IStorageSourceService)getContext().getAttributes().get(IStorageSourceService.class.getCanonicalName());  Map<String,Object> rowValues;  try {    rowValues=StaticFlowEntries.jsonToStorageEntry(fmJson);    String status=null;    int state=checkFlow(rowValues);    if (state == 1) {      status="Warning! Must specify eth_type of IPv4/IPv6 to " + "match on IPv4/IPv6 fields! The flow has been discarded.";      log.error(status);    } else     if (state == 2) {      status="Warning! eth_type not recognized! The flow has been discarded.";      log.error(status);    } else     if (state == 3) {      status="Warning! Must specify ip_proto to match! The flow has been discarded.";      log.error(status);    } else     if (state == 4) {      status="Warning! ip_proto invalid! The flow has been discarded.";      log.error(status);    } else     if (state == 5) {      status="Warning! Must specify icmp6_type to match! The flow has been discarded.";      log.error(status);    } else     if (state == 6) {      status="Warning! icmp6_type invalid! The flow has been discarded.";      log.error(status);    } else     if (state == 7) {      status="Warning! IPv4 & IPv6 fields cannot be specified in the same flow! The flow has been discarded.";      log.error(status);    } else     if (state == 8) {      status="Warning! Must specify switch DPID in flow. The flow has been discarded.";      log.error(status);    } else     if (state == 9) {      status="Warning! Switch DPID invalid! The flow has been discarded.";      log.error(status);    } else     if (state == 0) {      status="Entry pushed";      storageSource.insertRowAsync(StaticFlowEntryPusher.TABLE_NAME,rowValues);    }    return ("{\"status\" : \"" + status + "\"}");  } catch (  IOException e) {    log.error("Error parsing push flow mod request: " + fmJson,e);    return "{\"status\" : \"Error! Could not parse flow mod, see log for details.\"}";  }}  }
class C{  public X509Name(boolean reverse,String dirName){  this(reverse,DefaultLookUp,dirName);}  }
