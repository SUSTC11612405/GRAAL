class C{  public static ResourceServerAccessToken build(String value,RSAPublicKey providerPublicKey,Issuer issuer,String resourceServer,long clockToleranceInSeconds) throws TokenValidationException {  Validate.notEmpty(value,"value");  Validate.notNull(providerPublicKey,"providerPublicKey");  Validate.notNull(issuer,"issuer");  Validate.notEmpty(resourceServer,"resourceServer");  AccessToken accessToken;  try {    accessToken=AccessToken.parse(value);  } catch (  ParseException e) {    throw new TokenValidationException(TokenValidationError.PARSE_ERROR,"Token parsing failed." + e.getMessage(),e);  }  try {    if (!accessToken.hasValidSignature(providerPublicKey)) {      throw new TokenValidationException(TokenValidationError.INVALID_SIGNATURE,"Token signature validation failed.");    }  } catch (  JOSEException e) {    throw new TokenValidationException(TokenValidationError.PARSE_ERROR,"Token Signature verification process failed." + e.getMessage(),e);  }  if (!accessToken.getAudience().contains(resourceServer)) {    throw new TokenValidationException(TokenValidationError.INVALID_AUDIENCE,"Audience in claim set does not contain the specified resource server.");  }  Date adjustedCurrentDate=new Date(new Date().getTime() - clockToleranceInSeconds * 1000);  if ((accessToken.getExpirationTime().before(adjustedCurrentDate))) {    throw new TokenValidationException(TokenValidationError.EXPIRED_TOKEN,"Token is expired.");  }  return new ResourceServerAccessToken(accessToken);}  }
class C{  public TIntFloatHashMap(TIntHashingStrategy strategy){  super(strategy);}  }
class C{  public void addAction(String action){  Object[] args=new String[1];  SimpleDateFormat sdf=new SimpleDateFormat(context.getString(R.string.dateFormat));  args[0]=sdf.format(new Date());  String timestamp=context.getString(R.string.timestamp,args);  history.add(action + timestamp);  notifyListeners(new PropertyChangeEvent(this,ActivityConstants.historyProperty,null,null));}  }
class C{  public static String denormalize(final CharSequence self){  if (lineSeparator == null) {    final StringWriter sw=new StringWriter(2);    try {      final BufferedWriter bw=new BufferedWriter(sw);      bw.newLine();      bw.flush();      lineSeparator=sw.toString();    } catch (    IOException ioe) {      lineSeparator="\n";    }  }  final int len=self.length();  if (len < 1) {    return self.toString();  }  final StringBuilder sb=new StringBuilder((110 * len) / 100);  int i=0;  CharSequence cs=(self instanceof GString) ? self.toString() : self;  while (i < len) {    final char ch=cs.charAt(i++);switch (ch) {case '\r':      sb.append(lineSeparator);    if ((i < len) && (cs.charAt(i) == '\n')) {      ++i;    }  break;case '\n':sb.append(lineSeparator);break;default :sb.append(ch);break;}}return sb.toString();}  }
class C{  private void quit(){  if (JOptionPane.YES_OPTION == CMessageBox.showYesNoCancelQuestion(this,"Do you really want to quit the current tutorial?")) {    m_currentTutorial.removeListener(m_listener);    m_currentTutorial=null;    m_warningLabel.setText("");    updateNextButton();    m_skipButton.setEnabled(true);    m_descriptionField.setText("");    setVisible(false);  }}  }
class C{  public TokenQueue(String data){  Assert.notNull(data);  queue=data;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("DateInvoiced")) {      m_dateInvoiced_From=((Timestamp)para[i].getParameter());      m_dateInvoiced_To=((Timestamp)para[i].getParameter_To());    } else     if (name.equals("EMailPDF"))     p_EMailPDF="Y".equals(para[i].getParameter()); else     if (name.equals("R_MailText_ID"))     p_R_MailText_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     m_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("C_Invoice_ID"))     m_C_Invoice_ID=para[i].getParameterAsInt(); else     if (name.equals("DocumentNo")) {      m_DocumentNo_From=(String)para[i].getParameter();      m_DocumentNo_To=(String)para[i].getParameter_To();    } else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  if (m_DocumentNo_From != null && m_DocumentNo_From.length() == 0)   m_DocumentNo_From=null;  if (m_DocumentNo_To != null && m_DocumentNo_To.length() == 0)   m_DocumentNo_To=null;}  }
class C{  public static String nullSafeToString(double[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public static void test(int size,AbstractDistribution distribution){  for (int j=0, i=size; --i >= 0; j++) {    System.out.print(" " + distribution.nextDouble());    if (j % 8 == 7)     System.out.println();  }  System.out.println("\n\nGood bye.\n");}  }
class C{  public static void registerCodebaseLoader(ClassLoader loader){  codebaseLoaders.put(loader,null);}  }
class C{  @Override protected void initFromNode(final Node fromNode,final Node toNode,final double startTime,final RouterPriorityQueue<Node> pendingNodes){  AStarNodeData data=getData(fromNode);  visitNode(fromNode,data,pendingNodes,startTime,0,null);  data.setExpectedRemainingCost(estimateRemainingTravelCost(fromNode,toNode));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_entitiessetnameditemns1.class,args);}  }
class C{  protected boolean hasAggregateFunction(Collection<? extends ExpressionNode> c){  for (  ExpressionNode expr : c) {    if (hasAggregateFunction(expr))     return true;  }  return false;}  }
class C{  protected void sequence_VariableDeclaration$AllowType$false$_VariableDeclarationImpl(ISerializationContext context,VariableDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  Type attribType(JCTree tree,Env<AttrContext> env,Type pt){  Type result=attribTree(tree,env,new ResultInfo(TYP,pt));  return result;}  }
class C{  private BigInteger bigIntegerProduct(){  return this.injectInto(BigInteger.valueOf(1L),null);}  }
class C{  public void convertAmount(Long amount,String source,String target,Context context,OnAmountConvertedListener listener){  if (amount == null) {    throw new InvalidParameterException("Error converting amount, amount may not be null");  }  if (source == null) {    throw new InvalidParameterException("Error converting amount, source may not be null");  }  if (target == null) {    throw new InvalidParameterException("Error converting amount, target may not be null");  }  if (context == null) {    throw new InvalidParameterException("Error converting amount, context may not be null");  }  if (listener == null) {    throw new InvalidParameterException("Error converting amount, listener may not be null");  }  ConvertAmountAsyncTask task=new ConvertAmountAsyncTask(amount,source,target,context,communicator,listener);  task.execute();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static int[] stableSort(double[] array){  int[] index=new int[array.length];  int[] newIndex=new int[array.length];  int[] helpIndex;  int numEqual;  array=(double[])array.clone();  for (int i=0; i < index.length; i++) {    index[i]=i;    if (Double.isNaN(array[i])) {      array[i]=Double.MAX_VALUE;    }  }  quickSort(array,index,0,array.length - 1);  int i=0;  while (i < index.length) {    numEqual=1;    for (int j=i + 1; ((j < index.length) && Utils.eq(array[index[i]],array[index[j]])); j++)     numEqual++;    if (numEqual > 1) {      helpIndex=new int[numEqual];      for (int j=0; j < numEqual; j++)       helpIndex[j]=i + j;      quickSort(index,helpIndex,0,numEqual - 1);      for (int j=0; j < numEqual; j++)       newIndex[i + j]=index[helpIndex[j]];      i+=numEqual;    } else {      newIndex[i]=index[i];      i++;    }  }  return newIndex;}  }
class C{  protected AbstractRed(List srcs,Rectangle bounds,ColorModel cm,SampleModel sm,int tileGridXOff,int tileGridYOff,Map props){  init(srcs,bounds,cm,sm,tileGridXOff,tileGridYOff,props);}  }
class C{  private int convertToIntPercent(final double percentHeap){  assert percentHeap >= 0.0 && percentHeap <= 1.0;  int ret=(int)Math.ceil(percentHeap * 100.0);  assert ret >= 0 && ret <= 100;  return ret;}  }
class C{  public boolean isDottedUnderlineTriple(Node x,Node y,Node z){  return dottedUnderLineTriples.contains(new Triple(x,y,z));}  }
class C{  public String nextToken() throws NoSuchElementException, ParseException {  if (this.currentToken == null) {    throw new NoSuchElementException("Iteration already finished.");  }  final String result=this.currentToken;  this.searchPos=findNext(this.searchPos);  return result;}  }
class C{  protected int positionForMouseEvent(MouseEvent e){  int newX=(e.getSource() == BasicSplitPaneDivider.this) ? (e.getX() + getLocation().x) : e.getX();  newX=Math.min(maxX,Math.max(minX,newX - offset));  return newX;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void writeUI32(long value) throws IOException {  flushBits();  out.write((int)(value & 0xff));  out.write((int)(value >> 8));  out.write((int)(value >> 16));  out.write((int)(value >> 24));  bytesWritten+=4;}  }
class C{  public synchronized boolean addEntry(Principal caller,AclEntry entry) throws NotOwnerException {  if (!isOwner(caller))   throw new NotOwnerException();  Hashtable<Principal,AclEntry> aclTable=findTable(entry);  Principal key=entry.getPrincipal();  if (aclTable.get(key) != null)   return false;  aclTable.put(key,entry);  return true;}  }
class C{  public ArrayDeque<E> clone(){  try {    @SuppressWarnings("unchecked") ArrayDeque<E> result=(ArrayDeque<E>)super.clone();    result.elements=Arrays.copyOf(elements,elements.length);    return result;  } catch (  CloneNotSupportedException e) {    throw new AssertionError();  }}  }
class C{  private void checkEngineHP() throws BuildFailedException {  if (!_train.getNumberEngines().equals(Train.AUTO_HPT) || Setup.getHorsePowerPerTon() == 0 || _departStageTrack != null)   return;  Engine leadEngine=_train.getLeadEngine();  if (leadEngine == null)   return;  addLine(_buildReport,ONE,BLANK_LINE);  addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildDetermineHpNeeded"),new Object[]{leadEngine.toString(),leadEngine.getHp(),Setup.getHorsePowerPerTon()}));  int hpNeeded=0;  int hpAvailable=0;  Route route=_train.getRoute();  if (route != null) {    boolean helper=false;    for (    RouteLocation rl : route.getLocationsBySequenceList()) {      if ((_train.getSecondLegOptions() == Train.HELPER_ENGINES && rl == _train.getSecondLegStartLocation()) || (_train.getThirdLegOptions() == Train.HELPER_ENGINES && rl == _train.getThirdLegStartLocation())) {        addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("AddHelpersAt"),new Object[]{rl.getName()}));        helper=true;      }      if ((_train.getSecondLegOptions() == Train.HELPER_ENGINES && rl == _train.getSecondLegEndLocation()) || (_train.getThirdLegOptions() == Train.HELPER_ENGINES && rl == _train.getThirdLegEndLocation())) {        addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("RemoveHelpersAt"),new Object[]{rl.getName()}));        helper=false;      }      if (helper) {        continue;      }      if (((_train.getSecondLegOptions() & Train.CHANGE_ENGINES) == Train.CHANGE_ENGINES && rl == _train.getSecondLegStartLocation()) || ((_train.getThirdLegOptions() & Train.CHANGE_ENGINES) == Train.CHANGE_ENGINES && rl == _train.getThirdLegStartLocation())) {        log.debug("Loco change at ({})",rl.getName());        break;      }      if (_train.getTrainHorsePower(rl) > hpAvailable)       hpAvailable=_train.getTrainHorsePower(rl);      int weight=rl.getTrainWeight();      int hpRequired=(int)((36 * rl.getGrade() / 12) * weight);      if (hpRequired < Setup.getHorsePowerPerTon() * weight)       hpRequired=Setup.getHorsePowerPerTon() * weight;      if (hpRequired > hpNeeded) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildReportTrainHpNeeds"),new Object[]{weight,_train.getNumberCarsInTrain(rl),rl.getGrade(),rl.getName(),rl.getId(),hpRequired}));        hpNeeded=hpRequired;      }    }  }  if (hpNeeded > hpAvailable) {    addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildAssignedHpNotEnough"),new Object[]{leadEngine.toString(),hpAvailable,hpNeeded}));    findNewEngine(hpNeeded,leadEngine);  } else   if (hpAvailable > 2 * hpNeeded) {    addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildAssignedHpTooMuch"),new Object[]{leadEngine.toString(),hpAvailable,hpNeeded}));    findNewEngine(hpNeeded,leadEngine);  } else {    log.debug("Keeping engine ({}) it meets the train's HP requirement",leadEngine.toString());  }}  }
class C{  public static void info(final String string,final Object... args){  if (log.isLoggable(Level.INFO)) {    log.info(String.format(string,args));  }}  }
class C{  @Override public void error(int errno){  String errstr=convertGLUTessErrorToString(errno);  String msg=Logging.getMessage("generic.ExceptionWhileTessellating",errstr);  Logging.logger().severe(msg);}  }
class C{  public void copy(ReviewDb db,ChangeControl ctl,PatchSet ps) throws OrmException {  copy(db,ctl,ps,Collections.<PatchSetApproval>emptyList());}  }
class C{  public static void swap(Object[] ar,int pos1,int pos2){  if (pos1 == pos2) {    return;  }  Object tmp=ar[pos1];  ar[pos1]=ar[pos2];  ar[pos2]=tmp;}  }
class C{  public void onRenderingProgress(MapPaneEvent ev){}  }
class C{  public final QuadEdge rPrev(){  return this.sym().oNext();}  }
class C{  Map<String,TypeName> convertPropertiesToTypes(Map<String,ExecutableElement> properties){  Map<String,TypeName> types=new LinkedHashMap<String,TypeName>();  for (  Map.Entry<String,ExecutableElement> entry : properties.entrySet()) {    ExecutableElement el=entry.getValue();    types.put(entry.getKey(),TypeName.get(el.getReturnType()));  }  return types;}  }
class C{  protected void incrementMigrationCount(){  setMigrationCount(getMigrationCount() + 1);}  }
class C{  public static boolean isComparisonOperator(Kind kind){switch (kind) {case GREATER_THAN:case GREATER_THAN_EQUAL:case LESS_THAN:case LESS_THAN_EQUAL:    return true;default :  return false;}}  }
class C{  @Provides @Config("rdeRydeBufferSize") public static Integer provideRdeRydeBufferSize(){  return 64 * 1024;}  }
class C{  public WETriangleMesh transform(Matrix4x4 mat,boolean updateNormals){  for (  Vertex v : vertices.values()) {    mat.applyToSelf(v);  }  rebuildIndex();  if (updateNormals) {    computeFaceNormals();  }  return this;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void actionPerformed(ActionEvent ae){  if (ae.getSource() == getTimer()) {    changeTimeBy(timeIncrement * clockDirection,timeWrap,clockDirection < 0 ? TimerStatus.UPDATE : TimerStatus.FORWARD);  }}  }
class C{  protected GenericResourceManager(String resourceType,String language){  this.resourceType=resourceType;  this.LANGUAGE=language;  this.component=this.getClass();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.IMMUTABLE___IMMUTABLE_1:    return immutable_1 != IMMUTABLE_1_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  void cleanup(){}  }
class C{  private void addZone(String id,Component zone,String constraints,String tweak){  Component previousZone=getZone(id);  if (previousZone != null) {    remove(previousZone);    idToZones.remove(id);  }  if (zone instanceof JComponent) {    JComponent jc=(JComponent)zone;    jc.setOpaque(true);    if (jc.getBorder() == null || jc.getBorder() instanceof UIResource) {      if (jc instanceof JLabel) {        if ("left".equals(tweak)) {          Border border=new CompoundBorder(BorderFactory.createMatteBorder(0,3,0,2,ColorAndFontConstants.BACKGROUND_COLOR),BorderFactory.createLineBorder(Color.lightGray));          jc.setBorder(border);        } else {          if ("right".equals(tweak)) {            jc.setBorder(new CompoundBorder(zoneBorder,new EmptyBorder(0,2,0,1)));          } else {            jc.setBorder(new CompoundBorder(zoneBorder,new EmptyBorder(0,2,0,2)));          }        }        ((JLabel)jc).setText(" ");      } else {        if (!(jc instanceof JPanel)) {          jc.setBorder(zoneBorder);        }      }    }  }  add(zone,constraints);  idToZones.put(id,zone);}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (!eventName.equals("dataSet") && !eventName.equals("trainingSet") && !eventName.equals("testSet")&& !eventName.equals("instance")) {    return false;  }  if (m_listeneeTypes.size() == 0) {    return true;  }  if (m_listeneeTypes.contains("instance") && !eventName.equals("instance")) {    return false;  }  if (!m_listeneeTypes.contains("instance") && eventName.equals("instance")) {    return false;  }  return true;}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  public SimpleLog(String name){  logName=name;  setLevel(SimpleLog.LOG_LEVEL_INFO);  String lvl=getStringProperty(systemPrefix + "log." + logName);  int i=String.valueOf(name).lastIndexOf(".");  while (null == lvl && i > -1) {    name=name.substring(0,i);    lvl=getStringProperty(systemPrefix + "log." + name);    i=String.valueOf(name).lastIndexOf(".");  }  if (null == lvl) {    lvl=getStringProperty(systemPrefix + "defaultlog");  }  if ("all".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_ALL);  } else   if ("trace".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_TRACE);  } else   if ("debug".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_DEBUG);  } else   if ("info".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_INFO);  } else   if ("warn".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_WARN);  } else   if ("error".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_ERROR);  } else   if ("fatal".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_FATAL);  } else   if ("off".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_OFF);  }}  }
class C{  public void requestLocationAccess(final Activity activity){  checkNotNull(accessRequester,MSG_BLE_NOT_SUPPORTED);  accessRequester.requestLocationAccess(activity);}  }
class C{  public static Set<Pair<Integer,Integer>> mapTypeArgumentIndices(final TypeElement subtype,final TypeElement supertype,final Types types){  Set<Pair<Integer,Integer>> result=new HashSet<>();  if (subtype.equals(supertype)) {    for (int i=0; i < subtype.getTypeParameters().size(); i++) {      result.add(Pair.of(Integer.valueOf(i),Integer.valueOf(i)));    }  } else {    Map<TypeParameterElement,Set<TypeParameterElement>> subToSuperElements=mapTypeArguments(subtype,supertype,types);    Map<TypeParameterElement,Integer> supertypeIndexes=getElementToIndex(supertype);    final List<? extends TypeParameterElement> subtypeParams=subtype.getTypeParameters();    for (int subtypeIndex=0; subtypeIndex < subtypeParams.size(); subtypeIndex++) {      final TypeParameterElement subtypeParam=subtypeParams.get(subtypeIndex);      final Set<TypeParameterElement> correspondingSuperArgs=subToSuperElements.get(subtypeParam);      if (correspondingSuperArgs != null) {        for (        TypeParameterElement supertypeParam : subToSuperElements.get(subtypeParam)) {          result.add(Pair.of(subtypeIndex,supertypeIndexes.get(supertypeParam)));        }      }    }  }  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SwaggerWebAppFraction addWebContent(String content){  if (content == null)   return this;  if (content.equals(""))   return this;  File maybeFile=new File(content);  if (!maybeFile.exists()) {    try {      this.webContent=ArtifactLookup.get().artifact(content);    } catch (    Exception e) {    }  } else   if (maybeFile.isDirectory()) {    try {      this.webContent=loadFromDirectory(maybeFile);    } catch (    IOException e) {      e.printStackTrace();    }  } else {    this.webContent=ShrinkWrap.createFromZipFile(JARArchive.class,maybeFile);  }  return this;}  }
class C{  public static Object invokeMethod(Class<?> clazz,Object obj,String name) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {  return invokeMethod(clazz,obj,name,null,null);}  }
class C{  public static boolean volumeHasSnapshotSession(Volume volume,DbClient dbClient){  Constraint constraint=null;  URI cgURI=volume.getConsistencyGroup();  if (NullColumnValueGetter.isNullURI(cgURI)) {    constraint=ContainmentConstraint.Factory.getParentSnapshotSessionConstraint(volume.getId());  } else {    constraint=ContainmentConstraint.Factory.getBlockSnapshotSessionByConsistencyGroup(cgURI);  }  List<BlockSnapshotSession> snapSessions=CustomQueryUtility.queryActiveResourcesByConstraint(dbClient,BlockSnapshotSession.class,constraint);  return !snapSessions.isEmpty();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.HEX_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public Edge updateEdge(Edge edge,final Object from,final Object to,final Object info){  edge=removeEdge(edge);  if (edge != null) {    edge.setTo(from,to,info,-1,-1);    addEdge(edge);  }  return edge;}  }
class C{  public void step(SimState state){}  }
class C{  protected String allInvalidSubmissions(){  return invalidSubmissionNames;}  }
class C{  public ChannelPanel(ChannelModel channelModel,ChannelProcessingManager channelProcessingManager,SettingsManager settingsManager,Channel channel){  mChannelModel=channelModel;  mChannelProcessingManager=channelProcessingManager;  mSettingsManager=settingsManager;  mChannel=channel;  ProcessingChain processingChain=channelProcessingManager.getProcessingChain(mChannel);  if (processingChain != null) {    mChannelState=processingChain.getChannelState();    init();    for (    DecoderState decoderState : processingChain.getDecoderStates()) {      DecoderPanel panel=DecoderFactory.getDecoderPanel(mSettingsManager,decoderState);      mDecoderPanels.add(panel);      add(panel,"grow,span");    }    mChannelState.setChangedAttributeListener(this);    mChannelModel.addListener(this);    mSettingsManager.addListener(this);  } else {    mLog.error("Processing Chain was null!");  }}  }
class C{  public NLDocument(String file){  this(null,file);}  }
class C{  public void copyValueNodesToMe(Entity from){  for (  ValueNode fromChild : from.getChildren(ValueNode.class)) {    ValueNode toChild=getChild(fromChild.getName(),ValueNode.class);    toChild.setValue(fromChild.getValue());  }}  }
class C{  private void testJNP(String serverName,InitialContext context){  System.out.println();  System.out.println("Connecting to MBean ...");  System.out.println();  System.out.println(" Examining context ....");  try {    System.out.println("  Namespace=" + context.getNameInNamespace());    System.out.println("  Environment=" + context.getEnvironment());    System.out.println("  Context '/':");    NamingEnumeration ne=context.list("/");    while (ne.hasMore())     System.out.println("  - " + ne.nextElement());    System.out.println("  Context 'ejb':");    ne=context.list("ejb");    while (ne.hasMore())     System.out.println("  - " + ne.nextElement());    System.out.println("  Context 'ejb/adempiere':");    ne=context.list("ejb/adempiere");    while (ne.hasMore())     System.out.println("  - " + ne.nextElement());  } catch (  Exception e) {    System.err.println("ERROR: Could not examine context: " + e);    return;  }}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public boolean initialize(){  if (mBluetoothManager == null) {    mBluetoothManager=(BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);    if (mBluetoothManager == null) {      Log.e(TAG,"Unable to initialize BluetoothManager.");      return false;    }  }  mBluetoothAdapter=mBluetoothManager.getAdapter();  if (mBluetoothAdapter == null) {    Log.e(TAG,"Unable to obtain a BluetoothAdapter.");    return false;  }  return true;}  }
class C{  private synchronized T perform(long timeout) throws InterruptedException, ExecutionException, TimeoutException {  if (mException != null) {    throw new ExecutionException(mException);  }  if (timeout < 0) {    throw new ExecutionException(new IllegalStateException("Timeout can't be negative"));  }  if (mResultReceived) {    return mResult;  }  wait(timeout);  if (mException != null) {    throw new ExecutionException(mException);  }  if (!mResultReceived) {    throw new TimeoutException();  }  return mResult;}  }
class C{  public CharArrayWriter(){  this(32);}  }
class C{  private void readUnion(InputNode node,Object source,LabelMap map,Label label) throws Exception {  Object value=readInstance(node,source,label);  String[] list=label.getPaths();  for (  String key : list) {    map.getLabel(key);  }  if (label.isInline()) {    criteria.set(label,value);  }}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public boolean isAnyUser1(){  Object oo=get_Value(COLUMNNAME_AnyUser1);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final void flush(){  for (int sizeClass=0; sizeClass < SegregatedFreeListSpace.sizeClassCount(); sizeClass++) {    Address block=currentBlock.get(sizeClass);    if (!block.isZero()) {      Address cell=freeList.get(sizeClass);      space.returnBlock(block,sizeClass,cell);      currentBlock.set(sizeClass,Address.zero());      freeList.set(sizeClass,Address.zero());    }  }}  }
class C{  public static double longestSideLength(Coordinate a,Coordinate b,Coordinate c){  double lenAB=a.distance(b);  double lenBC=b.distance(c);  double lenCA=c.distance(a);  double maxLen=lenAB;  if (lenBC > maxLen)   maxLen=lenBC;  if (lenCA > maxLen)   maxLen=lenCA;  return maxLen;}  }
class C{  public void disabledPeriodic(){}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  PeriodAxisLabelInfo clone=(PeriodAxisLabelInfo)super.clone();  return clone;}  }
class C{  @Override public boolean onUsed(final RPEntity user){  if (user instanceof Player) {    final Player player=(Player)user;    if (isContained()) {      RPObject base=getContainer();      while (base.isContained()) {        base=base.getContainer();      }      if (!user.nextTo((Entity)base)) {        user.sendPrivateText("The consumable item is too far away");        return false;      }    } else {      if (!nextTo(user)) {        user.sendPrivateText("The consumable item is too far away");        return false;      }    }    feeder.feed(this,player);    player.notifyWorldAboutChanges();    return true;  } else {    logger.error("user is no instance of Player but: " + user,new Throwable());    return false;  }}  }
class C{  private void prepareTable(){  String sql="UPDATE M_Replenish" + " SET Level_Max = Level_Min " + "WHERE Level_Max < Level_Min";  int no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected Max_Level=" + no);  sql="UPDATE M_Product_PO" + " SET Order_Min = 1 " + "WHERE Order_Min IS NULL OR Order_Min < 1";  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected Order Min=" + no);  sql="UPDATE M_Product_PO" + " SET Order_Pack = 1 " + "WHERE Order_Pack IS NULL OR Order_Pack < 1";  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected Order Pack=" + no);  sql="UPDATE M_Product_PO p" + " SET IsCurrentVendor='Y' " + "WHERE IsCurrentVendor<>'Y'"+ " AND EXISTS (SELECT pp.M_Product_ID FROM M_Product_PO pp "+ "WHERE p.M_Product_ID=pp.M_Product_ID "+ "GROUP BY pp.M_Product_ID "+ "HAVING COUNT(*) = 1)";  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected CurrentVendor(Y)=" + no);  sql="UPDATE M_Product_PO p" + " SET IsCurrentVendor='N' " + "WHERE IsCurrentVendor = 'Y'"+ " AND EXISTS (SELECT pp.M_Product_ID FROM M_Product_PO pp "+ "WHERE p.M_Product_ID=pp.M_Product_ID AND pp.IsCurrentVendor='Y' "+ "GROUP BY pp.M_Product_ID "+ "HAVING COUNT(*) > 1)";  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Corrected CurrentVendor(N)=" + no);  sql="DELETE T_Replenish WHERE AD_PInstance_ID=" + getAD_PInstance_ID();  no=DB.executeUpdate(sql,get_TrxName());  if (no != 0)   log.fine("Delete Existing Temp=" + no);}  }
class C{  protected boolean isFlashSupported(){  return getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH);}  }
class C{  public T caseScript(Script object){  return null;}  }
class C{  static void read() throws SQLException {  ResultSet rs=new Csv().read("data/test.csv",null,null);  ResultSetMetaData meta=rs.getMetaData();  while (rs.next()) {    for (int i=0; i < meta.getColumnCount(); i++) {      System.out.println(meta.getColumnLabel(i + 1) + ": " + rs.getString(i + 1));    }    System.out.println();  }  rs.close();}  }
class C{  public void insertString(int offs,String str,AttributeSet a) throws BadLocationException {  if (editMask.isEmpty()) {    char[] maskChars=str.toCharArray();    for (int i=0; i < maskChars.length; i++) {      editMask.put(new Integer(i),new Character(maskChars[i]));    }  }  String mask2=null;  for (int i=0; i < editMask.size(); i++) {    Character mask1=editMask.get(i);    if (null == mask2) {      mask2=mask1.toString();    } else {      mask2=mask2 + mask1.toString();    }  }  if (str != null) {    if (!(editMask.isEmpty())) {      Character selected=editMask.get(new Integer(offs));      if (selected != null) {        if (Character.isLetter(selected.charValue())) {        } else {          str=selected.charValue() + str;        }      } else {        return;      }    }  } else {    return;  }  char[] upper=str.toCharArray();  for (int i=0; i < upper.length; i++) {    upper[i]=Character.toUpperCase(upper[i]);    Character selected=editMask.get(new Integer(offs + i));    if (selected != null) {      if (Character.isLetter(selected.charValue())) {        if (!(Character.isDigit(upper[i]))) {          return;        }      }    }  }  if (super.getLength() > offs) {    super.remove(offs,upper.length);  }  super.insertString(offs,new String(upper),a);}  }
class C{  public static boolean isPrime(int number){  for (int divisor=2; divisor <= number / 2; divisor++) {    if (number % divisor == 0) {      return false;    }  }  return true;}  }
class C{  public static <K,V>Collection<V> addAllValuesTo(Map<K,V> map,Collection<V> targetCollection){  MapIterate.forEachValue(map,CollectionAddProcedure.on(targetCollection));  return targetCollection;}  }
class C{  protected void initStore(int flushThreadCnt) throws Exception {  store=new GridCacheWriteBehindStore<>(null,"","",log,delegate);  store.setFlushFrequency(FLUSH_FREQUENCY);  store.setFlushSize(CACHE_SIZE);  store.setFlushThreadCount(flushThreadCnt);  delegate.reset();  store.start();}  }
class C{  public IntervalCategoryToolTipGenerator(){  super(DEFAULT_TOOL_TIP_FORMAT_STRING,NumberFormat.getInstance());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.735 -0400",hash_original_method="3B5128F5D5DD4E4E295E15D46241A9A9",hash_generated_method="EDF3F1563D27654C0E93C85F3F867146") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break; else     offer(item);  }}  }
class C{  public static int nextID(int AD_Sequence_ID,String System) throws SQLException {  boolean isSystem=System != null && "Y".equals(System);  int retValue=-1;  String next="CurrentNext";  if (isSystem)   next=next + "Sys";  StringBuffer sql=new StringBuffer("UPDATE AD_Sequence SET ");  sql.append(next).append(" = ").append(next).append(" WHERE AD_Sequence_ID=?");  PreparedStatement pstmt=prepareStatement(sql.toString());  try {    pstmt.setInt(1,AD_Sequence_ID);    pstmt.executeUpdate();  }  finally {    pstmt.close();  }  sql=new StringBuffer("SELECT ");  sql.append(next).append(" FROM AD_Sequence WHERE AD_Sequence_ID=?");  pstmt=prepareStatement(sql.toString(),ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);  try {    pstmt.setInt(1,AD_Sequence_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      retValue=rs.getInt(1);    }    rs.close();  }  finally {    pstmt.close();  }  sql=new StringBuffer("UPDATE AD_Sequence SET ");  sql.append(next).append(" = ").append(next).append(" + IncrementNo").append(" WHERE AD_Sequence_ID=?");  pstmt=prepareStatement(sql.toString());  try {    pstmt.setInt(1,AD_Sequence_ID);    pstmt.executeUpdate();  }  finally {    pstmt.close();  }  return retValue;}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  protected void drawSphere2D(String sname,double[] cent,double[][] pc){  CSSClass cls=opacStyle == 1 ? new CSSClass(null,"temp") : null;  for (int dim1=0; dim1 < pc.length - 1; dim1++) {    for (int dim2=dim1 + 1; dim2 < pc.length; dim2++) {      for (int i=1; i <= times; i++) {        SVGPath path=new SVGPath();        double[] p1=plusTimes(cent,pc[dim1],i);        double[] p2=plusTimes(cent,pc[dim2],i);        double[] p3=minusTimes(cent,pc[dim1],i);        double[] p4=minusTimes(cent,pc[dim2],i);        path.moveTo(p1);        path.cubicTo(plusTimes(p1,pc[dim2],KAPPA * i),plusTimes(p2,pc[dim1],KAPPA * i),p2);        path.cubicTo(minusTimes(p2,pc[dim1],KAPPA * i),plusTimes(p3,pc[dim2],KAPPA * i),p3);        path.cubicTo(minusTimes(p3,pc[dim2],KAPPA * i),minusTimes(p4,pc[dim1],KAPPA * i),p4);        path.cubicTo(plusTimes(p4,pc[dim1],KAPPA * i),minusTimes(p1,pc[dim2],KAPPA * i),p1);        path.close();        Element ellipse=path.makeElement(svgp);        SVGUtil.addCSSClass(ellipse,sname);        if (cls != null) {          double s=(i >= 1 && i <= sigma.length) ? sigma[i - 1] : 0.0;          cls.setStatement(SVGConstants.CSS_FILL_OPACITY_PROPERTY,s);          SVGUtil.setAtt(ellipse,SVGConstants.SVG_STYLE_ATTRIBUTE,cls.inlineCSS());        }        layer.appendChild(ellipse);      }    }  }}  }
class C{  @Nullable private Closeable resource(IgfsClientSession ses,Long rsrcId){  return ses.resource(rsrcId);}  }
class C{  @Override public void next(Long minPosition,Callback<TimelineResult<Tweet>> cb){  createCollectionRequest(minPosition,null).enqueue(new CollectionCallback(cb));}  }
class C{  public boolean isFirstLevel(){  return this.levelNumber == 0;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static CCFadeTransition transition(float t,CCScene s){  return new CCFadeTransition(t,s);}  }
class C{  public CompletableFuture<T> except(Consumer<Throwable> consumer){  return whenComplete(null);}  }
class C{  public void process(Set<MultiKey<EventBean>> newEvents,Set<MultiKey<EventBean>> oldEvents,ExprEvaluatorContext exprEvaluatorContext){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".process Received update, " + "  newData.length==" + ((newEvents == null) ? 0 : newEvents.size()) + "  oldData.length=="+ ((oldEvents == null) ? 0 : oldEvents.size()));  }  boolean isGenerateSynthetic=parent.getStatementResultService().isMakeSynthetic();  resultSetProcessor.processOutputLimitedLastAllNonBufferedJoin(newEvents,oldEvents,isGenerateSynthetic,isAll);  if (!super.checkAfterCondition(newEvents,parent.getStatementContext())) {    if (InstrumentationHelper.ENABLED) {      InstrumentationHelper.get().aOutputProcessWCondition(false);    }    return;  }  int newEventsSize=0;  if (newEvents != null) {    newEventsSize=newEvents.size();  }  int oldEventsSize=0;  if (oldEvents != null) {    oldEventsSize=oldEvents.size();  }  outputCondition.updateOutputCondition(newEventsSize,oldEventsSize);}  }
class C{  public static MPPOrder forC_OrderLine_ID(Properties ctx,int C_OrderLine_ID,int M_Product_ID,String trxName){  return new Query(ctx,MPPOrder.Table_Name,COLUMNNAME_C_OrderLine_ID + "=? AND " + COLUMNNAME_M_Product_ID+ "=?",trxName).setParameters(C_OrderLine_ID,M_Product_ID).firstOnly();}  }
class C{  @Bean public Jaxb2Marshaller jaxb2Marshaller(){  try {    Jaxb2Marshaller marshaller=new Jaxb2Marshaller();    marshaller.setPackagesToScan("org.finra.herd.model.api.xml");    marshaller.setSchemas(resourceResolver.getResources("classpath:herd.xsd"));    String xmlHeaders=configurationHelper.getProperty(ConfigurationValue.JAXB_XML_HEADERS);    Map<String,Object> marshallerProperties=new HashMap<>();    marshaller.setMarshallerProperties(marshallerProperties);    marshallerProperties.put(Marshaller.JAXB_FRAGMENT,Boolean.TRUE);    marshallerProperties.put(ConfigurationValue.JAXB_XML_HEADERS.getKey(),xmlHeaders);    marshallerProperties.put(MarshallerProperties.CHARACTER_ESCAPE_HANDLER,herdCharacterEscapeHandler);    return marshaller;  } catch (  Exception ex) {    throw new IllegalArgumentException("Unable to create marshaller.",ex);  }}  }
class C{  public PipedOutputStream(){}  }
class C{  public String significanceLevelTipText(){  return "The significance level for the chi-squared test used to decide when to stop merging.";}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:39.488 -0500",hash_original_method="B04E51F22DB6FA67074D367FD62C2A3B",hash_generated_method="B04E51F22DB6FA67074D367FD62C2A3B") SQLiteQuery(SQLiteDatabase db,String query,int offsetIndex,String[] bindArgs){  super(db,query);  mOffsetIndex=offsetIndex;  bindAllArgsAsStrings(bindArgs);}  }
class C{  public void visitVariableExpression(VariableExpression expression){  String variableName=expression.getName();  ClassNode classNode=controller.getClassNode();  if (variableName.equals("this")) {    if (controller.isStaticMethod() || (!controller.getCompileStack().isImplicitThis() && controller.isStaticContext())) {      if (controller.isInClosure())       classNode=controller.getOutermostClass();      visitClassExpression(new ClassExpression(classNode));    } else {      loadThis(expression);    }    return;  }  if (variableName.equals("super")) {    if (controller.isStaticMethod()) {      visitClassExpression(new ClassExpression(classNode.getSuperClass()));    } else {      loadThis(expression);    }    return;  }  BytecodeVariable variable=controller.getCompileStack().getVariable(variableName,false);  if (variable == null) {    processClassVariable(variableName);  } else {    controller.getOperandStack().loadOrStoreVariable(variable,expression.isUseReferenceDirectly());  }  if (!controller.getCompileStack().isLHS())   controller.getAssertionWriter().record(expression);}  }
class C{  Entry<K,V> removeMapping(Object o){  if (!(o instanceof Map.Entry))   return null;  Entry<K,V>[] tab=getTable();  Map.Entry entry=(Map.Entry)o;  Object k=maskNull(entry.getKey());  int h=hasher(k);  int i=indexFor(h,tab.length);  Entry<K,V> prev=tab[i];  Entry<K,V> e=prev;  while (e != null) {    Entry<K,V> next=e.next;    if (h == e.hash && e.equals(entry)) {      modCount++;      size--;      if (prev == e)       tab[i]=next; else       prev.next=next;      return e;    }    prev=e;    e=next;  }  return null;}  }
class C{  public CustomElementSelectionForm(Composite parent,int style){  super(parent,style);  setLayout(new GridLayout(2,false));  treeViewer=new TreeViewer(this,SWT.BORDER);  Tree tree=getTreeViewer().getTree();  tree.setLayoutData(GridDataFactory.fillDefaults().grab(true,true).span(2,1).minSize(0,200).create());  elementLabel=new Label(this,SWT.NONE);  elementLabel.setLayoutData(GridDataFactory.swtDefaults().create());  elementLabel.setText("New Label");  elementInput=new SuffixText(this,SWT.BORDER);  elementInput.setLayoutData(GridDataFactory.fillDefaults().grab(true,false).create());}  }
class C{  public long count(){  return count;}  }
class C{  public static void main(String[] args){  runClassifier(new RandomSubSpace(),args);}  }
class C{  private static void registerProperties(Class<?> clazz,ResourceBundle bundle){  final Map<String,String> bundleMap=resourceBundleMap(bundle);  final Iterator<Map.Entry<String,String>> iter=bundleMap.entrySet().iterator();  while (iter.hasNext()) {    final Map.Entry<String,String> entry=iter.next();    final String key=entry.getKey();    final String property=key.substring(0,key.length() - 5);    if (key.endsWith(".dflt")) {      final String longKey=bundleMap.get(property + ".long");      final String value=entry.getValue();      if (parmsInternal.get(property) != null) {        final String classname=findFirstClassOwningProperty(property);        if (classname == null) {          logger.log(Level.WARNING,"Property [{0}] has been overridden before it was even registered.",property);          parmsInternal.putDefaultString(property,longKey,value);        } else {          Class<?> c=null;          try {            c=Class.forName(classname);          } catch (          ClassNotFoundException e) {          }          if (c.isAssignableFrom(clazz)) {            parmsInternal.putDefaultString(property,longKey,value);          } else {            logger.log(Level.WARNING,"Property [{0}] exists twice in ResourceBundles",property);          }        }      } else {        parmsInternal.putDefaultString(property,longKey,value);      }      checkParameterIsValid(bundle,property);    }  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_name_atv)   m_name_atv.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  public static ConnectionDialog createConnectionDialog(final AbstractConnectionPanel optionsPanel,final ConnectNeurons connection,final NetworkPanel networkPanel){  ConnectionDialog cd=new ConnectionDialog(optionsPanel,connection,networkPanel);  cd.init();  return cd;}  }
class C{  public boolean isSupportsNetworkHints(){  return supportsNetworkHints;}  }
class C{  public static boolean equals(int[][] m1,int[][] m2){  int[] list1=sort(m1);  int[] list2=sort(m2);  for (int i=0; i < list1.length; i++) {    if (list1[i] != list2[i])     return false;  }  return true;}  }
class C{  protected PropertyDescriptor determineDescriptor(String className,String displayName){  PropertyDescriptor result;  result=null;  try {    result=new PropertyDescriptor(displayName,Class.forName(className));  } catch (  Exception e) {    result=null;  }  return result;}  }
class C{  public static Set shutDownAllMembers(DM dm,long timeout){  return ShutdownAllRequest.send(dm,timeout);}  }
class C{  @Override public void close() throws SQLException {  if (this.connection != null) {    this.connection.close();  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (exportedName: ");  result.append(exportedName);  result.append(')');  return result.toString();}  }
class C{  public void flush(Collection areas){  return;}  }
class C{  public static boolean isValidCodePoint(int codePoint){  return (MIN_CODE_POINT <= codePoint && MAX_CODE_POINT >= codePoint);}  }
class C{  public SortedNumericSortField(String field,SortField.Type type,boolean reverse,SortedNumericSelector.Type selector){  super(field,SortField.Type.CUSTOM,reverse);  if (selector == null) {    throw new NullPointerException();  }  if (type == null) {    throw new NullPointerException();  }  this.selector=selector;  this.type=type;}  }
class C{  public static void init(String bootstrapClasspath){  applicationRepositories=".";  BootstrapClassLoader.boot(bootstrapClasspath);}  }
class C{  public IndexStoreEntry next(){  if (needToCallHasNext) {    hasNext();  }  needToCallHasNext=true;  return nextEntry;}  }
class C{  public void init(boolean forEncryption,CipherParameters params){  if (params instanceof KeyParameter) {    workingKey=generateWorkingKey(forEncryption,((KeyParameter)params).getKey());    return;  }  throw new IllegalArgumentException("invalid parameter passed to IDEA init - " + params.getClass().getName());}  }
class C{  public void add(String text){  if (errors == null) {    errors=new ArrayList<String>();  }  errors.add(text);}  }
class C{  private static boolean isDirectory(URL url){  String file=url.getFile();  return (file.length() > 0 && file.charAt(file.length() - 1) == '/');}  }
class C{  public AggregatorItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private Properties newFallbackProperties(){  Properties props=new Properties();  props.setProperty("xr.css.user-agent-default-css","/resources/css/");  props.setProperty("xr.test.files.hamlet","/demos/browser/xhtml/hamlet.xhtml");  props.setProperty("xr.simple-log-format","{1} {2}:: {5}");  props.setProperty("xr.simple-log-format-throwable","{1} {2}:: {5}");  props.setProperty("xr.test-config-byte","8");  props.setProperty("xr.test-config-short","16");  props.setProperty("xr.test-config-int","100");  props.setProperty("xr.test-config-long","2000");  props.setProperty("xr.test-config-float","3000.25F");  props.setProperty("xr.test-config-double","4000.50D");  props.setProperty("xr.test-config-boolean","true");  props.setProperty("xr.util-logging.loggingEnabled","false");  props.setProperty("xr.util-logging.handlers","java.util.logging.ConsoleHandler");  props.setProperty("xr.util-logging.use-parent-handler","false");  props.setProperty("xr.util-logging.java.util.logging.ConsoleHandler.level","INFO");  props.setProperty("xr.util-logging.java.util.logging.ConsoleHandler.formatter","org.xhtmlrenderer.util.XRSimpleLogFormatter");  props.setProperty("xr.util-logging.org.xhtmlrenderer.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.config.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.exception.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.general.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.init.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.load.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.load.xml-entities.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.match.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.cascade.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.css-parse.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.layout.level","ALL");  props.setProperty("xr.util-logging.org.xhtmlrenderer.render.level","ALL");  props.setProperty("xr.load.xml-reader","default");  props.setProperty("xr.load.configure-features","false");  props.setProperty("xr.load.validation","false");  props.setProperty("xr.load.string-interning","false");  props.setProperty("xr.load.namespaces","false");  props.setProperty("xr.load.namespace-prefixes","false");  props.setProperty("xr.layout.whitespace.experimental","true");  props.setProperty("xr.layout.bad-sizing-hack","false");  props.setProperty("xr.renderer.viewport-repaint","true");  props.setProperty("xr.renderer.draw.backgrounds","true");  props.setProperty("xr.renderer.draw.borders","true");  props.setProperty("xr.renderer.debug.box-outlines","false");  props.setProperty("xr.renderer.replace-missing-characters","false");  props.setProperty("xr.renderer.missing-character-replacement","false");  props.setProperty("xr.text.scale","1.0");  props.setProperty("xr.text.aa-smoothing-level","1");  props.setProperty("xr.text.aa-fontsize-threshhold","25");  props.setProperty("xr.text.aa-rendering-hint","RenderingHints.VALUE_TEXT_ANTIALIAS_HGRB");  props.setProperty("xr.cache.stylesheets","false");  props.setProperty("xr.incremental.enabled","false");  props.setProperty("xr.incremental.lazyimage","false");  props.setProperty("xr.incremental.debug.layoutdelay","0");  props.setProperty("xr.incremental.repaint.print-timing","false");  props.setProperty("xr.use.threads","false");  props.setProperty("xr.use.listeners","true");  props.setProperty("xr.image.buffered","false");  props.setProperty("xr.image.scale","LOW");  props.setProperty("xr.image.render-quality","java.awt.RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR");  return props;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void state0() throws IOException {  Initialization initialization=new RandomInitialization(problem,alpha);  Solution[] initialPopulation=initialization.initialize();  int[] initialIds=new int[alpha];  evaluateAll(initialPopulation);  for (int i=0; i < alpha; i++) {    initialIds[i]=addToPopulation(initialPopulation[i]);  }  writePopulation(new File(filePrefix + "ini"),initialIds);}  }
class C{  public GPXReader(){  reader=createGson(false);}  }
class C{  public void analyze(Analyzer analyzer) throws Exception {  analyze(analyzer,true);}  }
class C{  public void loadPreference(int AD_User_ID){  if (AD_User_ID > 0) {    m_AD_User_ID=AD_User_ID;    props=new Properties();    Query query=new Query(Env.getCtx(),I_AD_Preference.Table_Name,"AD_User_ID = ? AND Attribute = ? AND AD_Window_ID Is NULL",null);    for (int i=0; i < PROPERTIES.length; i++) {      String attribute=PROPERTIES[i];      String value=VALUES[i];      MPreference preference=query.setParameters(new Object[]{m_AD_User_ID,attribute}).firstOnly();      if (preference != null) {        value=preference.getValue();      }      props.setProperty(attribute,value);    }  }}  }
class C{  public Note createNote(AuthenticationInfo subject) throws IOException {  Preconditions.checkNotNull(subject,"AuthenticationInfo should not be null");  Note note;  if (conf.getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING)) {    note=createNote(replFactory.getDefaultInterpreterSettingList(),subject);  } else {    note=createNote(null,subject);  }  noteSearchService.addIndexDoc(note);  return note;}  }
class C{  @Override public TreeSet<GeoLocation> find(final String anyname,final boolean locationexact){  final TreeSet<GeoLocation> locations=new TreeSet<GeoLocation>();  for (  final Locations service : this.services.values()) {    locations.addAll(service.find(anyname,locationexact));  }  return locations;}  }
class C{  public void addNonKMLFile(final InputStream data,final String inZipFilename) throws IOException {  try {    byte[] buffer=new byte[4096];    int bytesRead;    ZipEntry entry=new ZipEntry(inZipFilename);    this.zipOut.putNextEntry(entry);    while ((bytesRead=data.read(buffer)) != -1) {      this.zipOut.write(buffer,0,bytesRead);    }    log.debug(entry.getName() + " added to kmz.");  }  finally {    data.close();  }}  }
class C{  public T caseBooleanLiteral(BooleanLiteral object){  return null;}  }
class C{  public boolean suspendSrdfGroupStep(final URI systemURI,final RemoteDirectorGroup group,final List<URI> sourceVolumes,final List<URI> targetVolumes,String opId){  log.info("START Suspend SRDF group {} for {}",group.getLabel(),systemURI);  TaskCompleter completer=null;  try {    WorkflowStepCompleter.stepExecuting(opId);    StorageSystem system=getStorageSystem(systemURI);    List<Volume> volumes=utils.getAssociatedVolumesForSRDFGroup(system,group);    Collection<Volume> tgtVolumes=newArrayList(filter(volumes,utils.volumePersonalityPredicate(TARGET)));    if (!tgtVolumes.isEmpty() && tgtVolumes.iterator().hasNext()) {      List<URI> combinedVolumeList=new ArrayList<URI>();      combinedVolumeList.addAll(sourceVolumes);      combinedVolumeList.addAll(targetVolumes);      completer=new SRDFTaskCompleter(combinedVolumeList,opId);      getRemoteMirrorDevice().doSuspendLink(system,tgtVolumes.iterator().next(),false,false,completer);    } else {      log.info("There are no more volumes in the SRDF group {} {}, so no need to call suspend.",group.getLabel(),group.getId());      WorkflowStepCompleter.stepSucceded(opId);    }  } catch (  Exception e) {    ServiceError error=DeviceControllerException.errors.jobFailed(e);    if (null != completer) {      completer.error(dbClient,error);    }    WorkflowStepCompleter.stepFailed(opId,error);    return false;  }  return true;}  }
class C{  public static org.oscm.internal.vo.VOPricedRole convertToUp(org.oscm.vo.VOPricedRole oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOPricedRole newVO=new org.oscm.internal.vo.VOPricedRole();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setPricePerUser(oldVO.getPricePerUser());  newVO.setRole(convertToUp(oldVO.getRole()));  return newVO;}  }
class C{  public boolean isRegarding(OutputSocket socket){  return socket.equals(this.socket);}  }
class C{  public static int copy(final Reader input,final Writer output) throws IOException {  long count=IOUtils.copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  PrintWriter out=null;  try {    String responseMsg=processPostRequest(request);    response.setContentType("application/json");    out=response.getWriter();    out.println(responseMsg);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));  } finally {    if (out != null) {      out.close();    }  }}  }
class C{  protected Node newNode(){  return new SVGOMFlowSpanElement();}  }
class C{  public void insertArticleFiles(Map<Integer,List<String>> map){  if (!isDBAvailable())   return;  SQLiteDatabase db=getOpenHelper().getWritableDatabase();  write.lock();  try {    db.beginTransaction();    for (    Map.Entry<Integer,List<String>> entry : map.entrySet()) {      insertArticleFiles(entry.getKey(),entry.getValue());    }    db.setTransactionSuccessful();  }  finally {    try {      db.endTransaction();    }  finally {      write.unlock();    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.DERIVED_ATTRIBUTE___MODIFIER_1:    return MODIFIER_1_EDEFAULT == null ? modifier_1 != null : !MODIFIER_1_EDEFAULT.equals(modifier_1);case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_11:  return anonymous_derivedAttribute_1_1 != null && !anonymous_derivedAttribute_1_1.isEmpty();case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_21:return anonymous_derivedAttribute_2_1 != null && !anonymous_derivedAttribute_2_1.isEmpty();case UmplePackage.DERIVED_ATTRIBUTE___CODE_1:return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_31:return anonymous_derivedAttribute_3_1 != null && !anonymous_derivedAttribute_3_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public int endCode(int segment){  isValidIndex(segment);  return endCode(this.data,this.segCount,segment);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected SVGOMPathElement(){}  }
class C{  public void experimentStage(ExecutionStageEvent e){  if (e.getStage() == ExecutionStageEvent.Stage.INITIALIZING) {    m_Statistics=new ArrayList<>();    updateView();  }}  }
class C{  public void removeCacheServerConfig(CacheServerConfig managerConfig){  removeCacheVmConfig((CacheVmConfig)managerConfig);}  }
class C{  @Deprecated public void onSignalStrengthChanged(int asu){}  }
class C{  final int lengthInBits(K key){  return key == null ? 0 : keyAnalyzer.lengthInBits(key);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Listener public void onPlayerLogin(final ClientConnectionEvent.Join event){  Sponge.getScheduler().createTaskBuilder().async().delay(500,TimeUnit.MILLISECONDS).execute(null).submit(plugin);}  }
class C{  protected DateTimeConverter makeConverter(Object defaultValue){  return new DateConverter(defaultValue);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  public int read() throws IOException {  ensureOpen();  return read(singleByteBuf,0,1) == -1 ? -1 : singleByteBuf[0] & 0xff;}  }
class C{  @Beta VirtualFileImpl move(VirtualFileImpl source,VirtualFileImpl parent,String name,boolean overWrite,String lockToken) throws ForbiddenException, ConflictException, ServerException {  final String sourcePath=source.getPath();  final String parentPath=parent.getPath();  if (source.isRoot()) {    throw new ForbiddenException("Unable move root folder. ");  }  if (source.getVirtualFilePath().equals(parent.getVirtualFilePath())) {    throw new ForbiddenException("Item cannot be moved to itself. ");  }  if (!parent.isFolder()) {    throw new ForbiddenException("Unable move. Item specified as parent is not a folder. ");  }  if (source.isFolder() && parent.getVirtualFilePath().isChild(source.getVirtualFilePath())) {    throw new ForbiddenException(String.format("Unable move item '%s' to '%s'. Item may not have itself as parent. ",sourcePath,parentPath));  }  if (!(hasPermission(source,BasicPermissions.WRITE,true) && hasPermission(parent,BasicPermissions.WRITE,true))) {    throw new ForbiddenException(String.format("Unable move item '%s' to %s. Operation not permitted. ",sourcePath,parentPath));  }  if (source.isFile() && !validateLockTokenIfLocked(source,lockToken)) {    throw new ForbiddenException(String.format("Unable move file '%s'. File is locked. ",sourcePath));  }  String newName=nullToEmpty(name).trim().isEmpty() ? source.getName() : name;  final Path newPath=parent.getVirtualFilePath().newPath(newName);  VirtualFileImpl destination=new VirtualFileImpl(new java.io.File(ioRoot,toIoPath(newPath)),newPath,pathToId(newPath),this);  if (destination.exists()) {    doOverWrite(overWrite,destination,newPath);  }  doCopy(source,destination);  doDelete(source,lockToken);  eventService.publish(new MoveEvent(workspaceId,destination.getPath(),sourcePath,destination.isFolder()));  return destination;}  }
class C{  public static float[] toFloatArray(boolean[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? 1 : 0;  }  return result;}  }
class C{  public static int[] sum(int M[][]){  int s[]=new int[M.length];  for (int j=0; j < M.length; j++) {    for (int k=0; k < M[j].length; k++) {      s[j]+=M[j][k];    }  }  return s;}  }
class C{  public static String replaceDuplicatePunctuation(String origText_){  Matcher matcher=TextCleaner.repeatPunctuationPattern.matcher(origText_);  StringBuilder bldr=new StringBuilder();  int pos=0;  int lastPos=0;  while (matcher.find(pos)) {    pos=matcher.start();    int end=matcher.end();    bldr.append(origText_.substring(lastPos,pos + 1));    lastPos=end;    pos=matcher.end();  }  if (lastPos < origText_.length())   bldr.append(origText_.substring(lastPos));  return bldr.toString();}  }
class C{  public Vector rightMultiplyRightCompactForm(Vector vec){  if (!(vec instanceof GF2Vector)) {    throw new ArithmeticException("vector is not defined over GF(2)");  }  if (vec.length != numColumns + numRows) {    throw new ArithmeticException("length mismatch");  }  int[] v=((GF2Vector)vec).getVecArray();  int[] res=new int[(numRows + 31) >>> 5];  int q=numRows >> 5;  int r=numRows & 0x1f;  for (int i=0; i < numRows; i++) {    int help=(v[i >> 5] >>> (i & 0x1f)) & 1;    int vInd=q;    if (r != 0) {      int vw=0;      for (int j=0; j < length - 1; j++) {        vw=(v[vInd++] >>> r) | (v[vInd] << (32 - r));        help^=matrix[i][j] & vw;      }      vw=v[vInd++] >>> r;      if (vInd < v.length) {        vw|=v[vInd] << (32 - r);      }      help^=matrix[i][length - 1] & vw;    } else {      for (int j=0; j < length; j++) {        help^=matrix[i][j] & v[vInd++];      }    }    int bitValue=0;    for (int j=0; j < 32; j++) {      bitValue^=help & 1;      help>>>=1;    }    if (bitValue == 1) {      res[i >> 5]|=1 << (i & 0x1f);    }  }  return new GF2Vector(res,numRows);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_REF:    return getSuperClassRef();case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_EXPRESSION:  return getSuperClassExpression();case N4JSPackage.N4_CLASS_DEFINITION__IMPLEMENTED_INTERFACE_REFS:return getImplementedInterfaceRefs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader=null;  String pointerHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z;  int i, c;  int d, x2, y2;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag=false;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      streamsHeader=args[i];    } else     if (i == 1) {      pointerHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((streamsHeader == null) || (pointerHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",streamsHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    byte numNeighbouringStreamCells=0;    double currentValue=0;    double currentOrder=0;    double maxStreamOrder=noData;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (streams.getValue(row,col) > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells == 0) {            x=col;            y=row;            currentOrder=1;            output.setValue(y,x,currentOrder);            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  currentValue=output.getValue(y,x);                  if (currentValue > currentOrder) {                    flag=false;                    break;                  }                  if (currentValue == currentOrder) {                    numNeighbouringStreamCells=0;                    for (d=0; d < 8; d++) {                      x2=x + dX[d];                      y2=y + dY[d];                      if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d] && output.getValue(y2,x2) == currentOrder) {                        numNeighbouringStreamCells++;                      }                    }                    if (numNeighbouringStreamCells >= 2) {                      currentOrder++;                      if (currentOrder > maxStreamOrder) {                        maxStreamOrder=currentOrder;                      }                    } else {                      flag=false;                      break;                    }                  }                  if (currentValue < currentOrder) {                    output.setValue(y,x,currentOrder);                  }                }              } else {                if (streams.getValue(y,x) > 0) {                  output.setValue(y,x,output.getValue(y,x) + 1);                }                flag=false;              }            } while (flag);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    updateProgress("Loop 2 of 2:",0);    double streamsID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (output.getValue(row,col) == noData && pntr.getValue(row,col) != noData) {          flag=false;          x=col;          y=row;          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                streamsID=z;                flag=true;              }            } else {              streamsID=noData;              flag=true;            }          } while (!flag);          flag=false;          x=col;          y=row;          output.setValue(y,x,streamsID);          do {            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              c=(int)(Math.log(flowDir) / LnOf2);              x+=dX[c];              y+=dY[c];              z=output.getValue(y,x);              if (z != noData) {                flag=true;              }            } else {              flag=true;            }            output.setValue(y,x,streamsID);          } while (!flag);        } else         if (pntr.getValue(row,col) == noData) {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    streams.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Element parse(Reader is){  buffOffset=0;  buffSize=-1;  eventParser=false;  Element rootElement=createNewElement("ROOT");  try {    parseTagContent(rootElement,is);  } catch (  IOException ioe) {    ioe.printStackTrace();  }  if (rootElement.getNumChildren() == 0) {    notifyError(ParserCallback.ERROR_NO_ROOTS,null,null,null,"XML document contains no root element.");    return null;  } else   if (rootElement.getNumChildren() > 1) {    String roots="";    for (int i=1; i < rootElement.getNumChildren(); i++) {      Element elem=rootElement.getChildAt(i);      if (elem.isTextElement()) {        roots+="Text (" + elem.getText() + "),";      } else {        roots+=elem.getTagName() + ",";      }    }    if (roots.endsWith(",")) {      roots=roots.substring(0,roots.length() - 1);    }    Element firstRoot=rootElement.getChildAt(0);    String str=null;    if (firstRoot.isTextElement()) {      str="TEXT:" + firstRoot.getText();    } else {      str=firstRoot.getTagName();    }    notifyError(ParserCallback.ERROR_MULTIPLE_ROOTS,null,null,null,"XML document contains multiple root elements, only the first root (" + str + ") will be used. Excessive roots: "+ roots);  }  rootElement=rootElement.getChildAt(0);  return rootElement;}  }
class C{  public boolean equals(Object other){  if (other instanceof UnitValueBoxPair) {    UnitValueBoxPair otherPair=(UnitValueBoxPair)other;    if (unit.equals(otherPair.unit) && valueBox.equals(otherPair.valueBox))     return true;  }  return false;}  }
class C{  public void mouseMoved(MouseEvent e){  ((MouseMotionListener)a).mouseMoved(e);  ((MouseMotionListener)b).mouseMoved(e);}  }
class C{  public void receiveErrordeleteServiceSessionsForSubscription(java.lang.Exception e){}  }
class C{  public static void forceCancel(Object tag){  ANRequestQueue.getInstance().cancelRequestWithGivenTag(tag,true);}  }
class C{  @Override public Token recoverInline(Parser recognizer) throws RecognitionException {  InputMismatchException e=new InputMismatchException(recognizer);  for (ParserRuleContext context=recognizer.getContext(); context != null; context=context.getParent()) {    context.exception=e;  }  return super.recoverInline(recognizer);}  }
class C{  public void seek(MapElement mapElement){  double distance=mapElement.getSeekPointAndDistance(seekPoint);  if (Double.isNaN(distance)) {    return;  }  rotate.fromAngleNormalAxis(azimuth,Vector3.NEG_UNIT_Z);  if (!hikeMode) {    elevation=Math.PI / 4;    workRot.fromAngleNormalAxis(elevation,Vector3.UNIT_X);    rotate.multiplyLocal(workRot);  }  location.set(Vector3.UNIT_Z);  rotate.applyPost(location,location);  location.normalizeLocal();  location.multiplyLocal(distance);  location.addLocal(seekPoint);  if (hikeMode) {    double z=Landscape.getInstance().getZ(location.getX(),location.getY());    location.setZ(z + zOffset);    elevation=Math.PI / 4;    workRot.fromAngleNormalAxis(elevation,Vector3.UNIT_X);    rotate.multiplyLocal(workRot);  }  camera.setFrame(location,rotate);  camera.setLookAt(seekPoint);  updateFromCamera();  updateCrosshair();  updateGeometricState(0);  changed.set(true);}  }
class C{  public T caseEnumerator(Enumerator object){  return null;}  }
class C{  public long topologyVersion(){  return topVer;}  }
class C{  public void clear(){  mBlockTemplates.clear();  mBlockRefs.clear();}  }
class C{  public Builder removeAddresses(){  this.addresses.clear();  return this;}  }
class C{  public void storeArg(final int arg){  storeInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  public WFG2(int k,int l,int M){  super(k,l,M);}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public PointCloud3D updateBounds(){  min=Vec3D.MAX_VALUE.copy();  max=Vec3D.NEG_MAX_VALUE.copy();  for (  Vec3D p : points) {    min.minSelf(p);    max.maxSelf(p);  }  centroid.set(min.add(max).scaleSelf(0.5f));  radiusSquared=0;  for (  ReadonlyVec3D p : points) {    radiusSquared=MathUtils.max(radiusSquared,p.distanceToSquared(centroid));  }  return this;}  }
class C{  @Override public boolean supportsSubqueriesInIns(){  debugCodeCall("supportsSubqueriesInIns");  return true;}  }
class C{  public NodeList nodelist() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});  return null;}  }
class C{  public Builder(Photo photo){  super(photo);  type=photo.type;}  }
class C{  public BigInteger optBigInteger(String key,BigInteger defaultValue){  try {    return this.getBigInteger(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void stackOp(int opcode){switch (opcode) {case POP:{      ValueNode w1=xpop();      assert w1 != TWO_SLOT_MARKER;      break;    }case POP2:{    xpop();    ValueNode w2=xpop();    assert w2 != TWO_SLOT_MARKER;    break;  }case DUP:{  ValueNode w1=xpeek();  assert w1 != TWO_SLOT_MARKER;  xpush(w1);  break;}case DUP_X1:{ValueNode w1=xpop();ValueNode w2=xpop();assert w1 != TWO_SLOT_MARKER;xpush(w1);xpush(w2);xpush(w1);break;}case DUP_X2:{ValueNode w1=xpop();ValueNode w2=xpop();ValueNode w3=xpop();assert w1 != TWO_SLOT_MARKER;xpush(w1);xpush(w3);xpush(w2);xpush(w1);break;}case DUP2:{ValueNode w1=xpop();ValueNode w2=xpop();xpush(w2);xpush(w1);xpush(w2);xpush(w1);break;}case DUP2_X1:{ValueNode w1=xpop();ValueNode w2=xpop();ValueNode w3=xpop();xpush(w2);xpush(w1);xpush(w3);xpush(w2);xpush(w1);break;}case DUP2_X2:{ValueNode w1=xpop();ValueNode w2=xpop();ValueNode w3=xpop();ValueNode w4=xpop();xpush(w2);xpush(w1);xpush(w4);xpush(w3);xpush(w2);xpush(w1);break;}case SWAP:{ValueNode w1=xpop();ValueNode w2=xpop();assert w1 != TWO_SLOT_MARKER;assert w2 != TWO_SLOT_MARKER;xpush(w1);xpush(w2);break;}default :throw shouldNotReachHere();}}  }
class C{  @Override public void start(){  isPaused=false;}  }
class C{  public static String string(int i){  return rcodes.getText(i);}  }
class C{  @Override public boolean contains(Object o){  for (TLinkable link=_head; link != null; link=link.getNext()) {    if (o.equals(link)) {      return true;    }  }  return false;}  }
class C{  public static boolean ionEquals(final IonValue v1,final IonValue v2){  return ionEqualsImpl(v1,v2,true);}  }
class C{  private static void writeQueryEntity(BinaryRawWriter writer,QueryEntity queryEntity){  assert queryEntity != null;  writer.writeString(queryEntity.getKeyType());  writer.writeString(queryEntity.getValueType());  LinkedHashMap<String,String> fields=queryEntity.getFields();  if (fields != null) {    writer.writeInt(fields.size());    for (    Map.Entry<String,String> field : fields.entrySet()) {      writer.writeString(field.getKey());      writer.writeString(field.getValue());    }  } else   writer.writeInt(0);  Map<String,String> aliases=queryEntity.getAliases();  if (aliases != null) {    writer.writeInt(aliases.size());    for (    Map.Entry<String,String> alias : aliases.entrySet()) {      writer.writeString(alias.getKey());      writer.writeString(alias.getValue());    }  } else   writer.writeInt(0);  Collection<QueryIndex> indexes=queryEntity.getIndexes();  if (indexes != null) {    writer.writeInt(indexes.size());    for (    QueryIndex index : indexes)     writeQueryIndex(writer,index);  } else   writer.writeInt(0);}  }
class C{  public boolean canGetLong(){  return canGet(long.class);}  }
class C{  @Override protected void applyEditorTo(DLangRunAppConfiguration config) throws ConfigurationException {  config.setModule(comboModule.getSelectedModule());  config.setWorkDir(pathWorkingDir.getText());  config.setAdditionalParams(textParameters.getText());  config.setEnvVars(envVariables.getEnvs());}  }
class C{  protected void updateShape(OMGeometry geometry,Projection p,boolean forceProject){  if (geometry.isVisible()) {    if (forceProject) {      geometry.generate(p);    } else {      geometry.regenerate(p);    }    setShape(appendShapeEdge(getShape(),geometry.getShape(),connectParts));  }}  }
class C{  public static boolean isVPlexConvertToDistributed(VirtualPool vpool1,VirtualPool vpool2,StringBuffer notSuppReasonBuff){  s_logger.info("Running isVPlexConvertToDistributed...");  s_logger.info(String.format("Checking isVPlexConvertToDistributed from [%s] to [%s]...",vpool1.getLabel(),vpool2.getLabel()));  String[] excluded=new String[]{ASSIGNED_STORAGE_POOLS,DESCRIPTION,HA_VARRAY_VPOOL_MAP,LABEL,MATCHED_POOLS,INVALID_MATCHED_POOLS,NUM_PATHS,STATUS,TAGS,CREATION_TIME,NON_DISRUPTIVE_EXPANSION,REMOTECOPY_VARRAY_SETTINGS};  Map<String,Change> changes=analyzeChanges(vpool1,vpool2,null,excluded,null);  if (changes.size() > 1) {    notSuppReasonBuff.append("Changes in addition to a change in the " + "virtual pool high availability property are not permitted.");    fillInNotSupportedReasons(changes,notSuppReasonBuff);    s_logger.info("Changes in addition to a change in the " + "virtual pool high availability property are not permitted: ");    for (    Entry<String,Change> entry : changes.entrySet()) {      if (entry.getKey().equals(HIGH_AVAILABILITY)) {        continue;      }      s_logger.info(entry.getKey() + "- " + entry.getValue()+ " ");    }    return false;  }  Change change=changes.get(HIGH_AVAILABILITY);  if (change != null && change._left != null && change._left.equals(VirtualPool.HighAvailabilityType.vplex_local.name()) && change._right != null && change._right.equals(VirtualPool.HighAvailabilityType.vplex_distributed.name())) {    return true;  } else {    notSuppReasonBuff.append(String.format("The virtual pool high availability property can only be changed from %s to %s",VirtualPool.HighAvailabilityType.vplex_local.name(),VirtualPool.HighAvailabilityType.vplex_distributed.name()));    return false;  }}  }
class C{  public Loader(){  this(null);}  }
class C{  @SuppressWarnings("unchecked") protected Object doHighlightingByFastVectorHighlighter(Document doc,int docId,SchemaField schemaField,FvhContainer fvhContainer,IndexReader reader,SolrQueryRequest req) throws IOException {  SolrParams params=req.getParams();  String fieldName=schemaField.getName();  SolrFragmentsBuilder solrFb=getSolrFragmentsBuilder(fieldName,params);  String[] snippets=fvhContainer.fvh.getBestFragments(fvhContainer.fieldQuery,reader,docId,fieldName,params.getFieldInt(fieldName,HighlightParams.FRAGSIZE,100),params.getFieldInt(fieldName,HighlightParams.SNIPPETS,1),getFragListBuilder(fieldName,params),getFragmentsBuilder(fieldName,params),solrFb.getPreTags(params,fieldName),solrFb.getPostTags(params,fieldName),getEncoder(fieldName,params));  if (snippets != null && snippets.length > 0)   return snippets;  return null;}  }
class C{  public <W extends ResourceWatcher>WatcherHandle<W> add(W watcher,Frequency frequency) throws IOException {  watcher.init();switch (frequency) {case LOW:    return lowMonitor.add(watcher);case MEDIUM:  return mediumMonitor.add(watcher);case HIGH:return highMonitor.add(watcher);default :throw new IllegalArgumentException("Unknown frequency [" + frequency + "]");}}  }
class C{  public void addBondedDevices(final Set<BluetoothDevice> devices){  final List<ExtendedBluetoothDevice> bondedDevices=mListBondedValues;  for (  BluetoothDevice device : devices) {    bondedDevices.add(new ExtendedBluetoothDevice(device));  }  notifyDataSetChanged();}  }
class C{  public Test failedTest(){  return fFailedTest;}  }
class C{  public void register(String username,String password,Map<String,String> fields) throws XMPPException {  if (getRegisterInfo().isRegistered()) {    throw new IllegalStateException("You are already registered with this gateway");  }  Registration register=new Registration();  register.setFrom(connection.getUser());  register.setTo(entityJID);  register.setType(IQ.Type.SET);  register.setUsername(username);  register.setPassword(password);  for (  String s : fields.keySet()) {    register.addAttribute(s,fields.get(s));  }  PacketCollector resultCollector=connection.createPacketCollector(new PacketIDFilter(register.getPacketID()));  connection.sendPacket(register);  Packet result=resultCollector.nextResult(SmackConfiguration.getPacketReplyTimeout());  resultCollector.cancel();  if (result != null && result instanceof IQ) {    IQ resultIQ=(IQ)result;    if (resultIQ.getError() != null) {      throw new XMPPException(resultIQ.getError());    }    if (resultIQ.getType() == IQ.Type.ERROR) {      throw new XMPPException(resultIQ.getError());    }    connection.addPacketListener(new GatewayPresenceListener(),new PacketTypeFilter(Presence.class));    roster.createEntry(entityJID,getIdentity().getName(),new String[]{});  } else {    throw new XMPPException("Packet reply timeout");  }}  }
class C{  protected void handleException(Throwable e){  if (endTime == 0) {    endTime=System.currentTimeMillis();  }  Log.logger.log(Level.SEVERE,"Uncaught exception: {0}",e);  status|=sERROR;  ControlThread.signalShutdown();  done=true;}  }
class C{  protected Size2D arrangeFR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){  Size2D size1=arrangeFN(container,g2,constraint.getWidth());  if (constraint.getHeightRange().contains(size1.getHeight())) {    return size1;  } else {    double h=constraint.getHeightRange().constrain(size1.getHeight());    RectangleConstraint c2=constraint.toFixedHeight(h);    return arrange(container,g2,c2);  }}  }
class C{  public ImageAnalyzer(InputStream is) throws IOException {  analyze(is);}  }
class C{  public Object put(String key,Object value){  final int len=key.length();  if (len > m_charBuffer.length) {    m_charBuffer=new char[len];  }  Node node=m_Root;  for (int i=0; i < len; i++) {    Node nextNode=node.m_nextChar[Character.toLowerCase(key.charAt(i))];    if (nextNode != null) {      node=nextNode;    } else {      for (; i < len; i++) {        Node newNode=new Node();        if (m_lowerCaseOnly) {          node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode;        } else {          node.m_nextChar[Character.toUpperCase(key.charAt(i))]=newNode;          node.m_nextChar[Character.toLowerCase(key.charAt(i))]=newNode;        }        node=newNode;      }      break;    }  }  Object ret=node.m_Value;  node.m_Value=value;  return ret;}  }
class C{  public Builder interimResults(Boolean interimResults){  this.interimResults=interimResults;  return this;}  }
class C{  public void addToBlacklist(String line){  addToList(blacklist,line);}  }
class C{  public static String genRandomString(int len){  return UUID.randomUUID().toString().replaceAll("-","").toUpperCase().substring(0,len);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(TITLE).setVisible(false);  builder.addElement(Collection.KEY).setCardinality(Cardinality.MULTIPLE);  builder.addElement(Source.TITLE).setRequired(true);}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] dist=new double[num_classes];  double[] currentData=new double[numFeatures];  double[] ranking=new double[num_classes];  for (int j=0; j < num_features; j++) {    currentData[j]=instance.value(num_classes + j);    currentData[num_features + j]=1 - currentData[j];  }  SortPair[] sortedActivations=ARTActivateCategories(currentData);  java.util.Arrays.sort(sortedActivations);  double diff_act=sortedActivations[0].getValue() - sortedActivations[numCategories - 2].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < sortedActivations.length; i++) {    activ_change=(sortedActivations[0].getValue() - sortedActivations[i].getValue()) / sortedActivations[0].getValue();    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  for (int i=0; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  this.neuronsactivated=new int[largest_activ];  this.neuronsactivity=new double[largest_activ];  for (int i=0; i < largest_activ; i++) {    this.neuronsactivity[i]=best_matches[i];    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    this.neuronsactivated[i]=currentCategory;    for (int j=0; j < num_classes; j++) {      ranking[j]=ranking[j] + best_matches[i] * weightsB[currentCategory][j];    }  }  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
class C{  private String generateUniqueFutureId(){  return String.valueOf(mIdCounter.getAndIncrement());}  }
class C{  public static void hideCurrentActionPopUpWindow(){  if (mCurrentActionPopupWindow != null) {    mCurrentActionPopupWindow.dismiss();    mCurrentActionPopupWindow=null;  }  hideSoftKeyboard();}  }
class C{  public HistoryUriBuilder appendProvider(int providerId){  mUriBuilder.appendQueryParameter(HistoryLog.PROVIDER_ID,String.valueOf(providerId));  return this;}  }
class C{  public String toStringX(){  StringBuffer sb=new StringBuffer("WebBasketLine[");  sb.append(m_line).append("-M_Product_ID=").append(m_M_Product_ID).append(",Qty=").append(m_Quantity).append(",Price=").append(m_Price).append(",Total=").append(getTotal()).append("]");  return sb.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void checkClosed(){  if (result == null) {    throw DbException.get(ErrorCode.OBJECT_CLOSED);  }  if (stat != null) {    stat.checkClosed();  }  if (conn != null) {    conn.checkClosed();  }}  }
class C{  public boolean isModified(){  return _isDigestModified || _jarDepend.isModified();}  }
class C{  public static void nextRand(Unsigned16 rand){  rand.multiply(genArray[0].a);  rand.add(genArray[0].c);}  }
class C{  public SQLNonTransientException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public void testSanityRandomUnsetBit(){  final int max=atLeast(100);  BitSet bits=new BitSet(max + 1);  for (int i=0; i <= max; i++) {    assertFalse("how is bitset already full? iter=" + i + " card="+ bits.cardinality()+ "/max="+ max,bits.cardinality() == max + 1);    final int nextBit=randomUnsetBit(random(),bits,max);    assertTrue("nextBit shouldn't be negative yet: " + nextBit,0 <= nextBit);    assertTrue("nextBit can't exceed max: " + nextBit,nextBit <= max);    assertFalse("expect unset: " + nextBit,bits.get(nextBit));    bits.set(nextBit);  }  assertEquals("why isn't bitset full?",max + 1,bits.cardinality());  final int firstClearBit=bits.nextClearBit(0);  assertTrue("why is there a clear bit? = " + firstClearBit,max < firstClearBit);  assertEquals("why is a bit set above max?",-1,bits.nextSetBit(max + 1));  assertEquals("wrong nextBit at end of all iters",-1,randomUnsetBit(random(),bits,max));  assertEquals("wrong nextBit at redundant end of all iters",-1,randomUnsetBit(random(),bits,max));}  }
class C{  public void addParam(String key,Object value){  if (mParams == null) {    mParams=new HashMap<String,String>();  }  mParams.put(key,String.valueOf(value));}  }
class C{  private static boolean isSpecialDomain(final String domain){  final String ucDomain=domain.toUpperCase(Locale.ENGLISH);  return ucDomain.endsWith(".COM") || ucDomain.endsWith(".EDU") || ucDomain.endsWith(".NET")|| ucDomain.endsWith(".GOV")|| ucDomain.endsWith(".MIL")|| ucDomain.endsWith(".ORG")|| ucDomain.endsWith(".INT");}  }
class C{  public int hashCode(){  int hc=0;  if (rootValue != null)   hc^=rootValue.hashCode();  if (otherValue != null)   hc^=otherValue.hashCode();  for (Enumeration e=nameTable.keys(); e.hasMoreElements(); ) {    Object key=e.nextElement();    hc^=key.hashCode();    hc^=nameTable.get(key).hashCode();  }  return hc;}  }
class C{  public final synchronized boolean claimDrawIfPossible(){  if (!findValidDrawClaim(""))   return false;  updateGUI();  return true;}  }
class C{  public static int mDateGap(String dayName){  Log.d("dayname",dayName);  if (dayName.equals("mon")) {    return 1;  } else   if (dayName.equals("tue")) {    return 2;  } else   if (dayName.equals("wed")) {    return 3;  } else   if (dayName.equals("thu")) {    return 4;  } else   if (dayName.equals("fri")) {    return 5;  } else   if (dayName.equals("sat")) {    return 6;  } else {    return 0;  }}  }
class C{  public static Map<Map<String,String>,List<GeoTimeSerie>> partition(Collection<GeoTimeSerie> series,Collection<String> bylabels){  Map<Map<String,String>,List<GeoTimeSerie>> classes=new HashMap<Map<String,String>,List<GeoTimeSerie>>();  Map<Map<String,String>,Map<String,String>> labelsbyclass=new HashMap<Map<String,String>,Map<String,String>>();  for (  GeoTimeSerie gts : series) {    Map<String,String> eqcls=new HashMap<String,String>();    if (null == bylabels) {      eqcls.putAll(gts.getMetadata().getLabels());    } else {      for (      String label : bylabels) {        if (gts.hasLabel(label)) {          eqcls.put(label,gts.getLabel(label));        }      }    }    if (!classes.containsKey(eqcls)) {      classes.put(eqcls,new ArrayList<GeoTimeSerie>());      classes.get(eqcls).add(gts);      labelsbyclass.put(eqcls,new HashMap<String,String>());      labelsbyclass.get(eqcls).putAll(gts.getLabels());    } else {      classes.get(eqcls).add(gts);      List<String> labelstoremove=new ArrayList<String>();      Map<String,String> gtsLabels=gts.getMetadata().getLabels();      for (      String label : labelsbyclass.get(eqcls).keySet()) {        if (!labelsbyclass.get(eqcls).get(label).equals(gtsLabels.get(label))) {          labelstoremove.add(label);        }      }      for (      String label : labelstoremove) {        labelsbyclass.get(eqcls).remove(label);      }    }  }  Map<Map<String,String>,List<GeoTimeSerie>> partition=new HashMap<Map<String,String>,List<GeoTimeSerie>>();  for (  Map<String,String> key : classes.keySet()) {    partition.put(labelsbyclass.get(key),classes.get(key));  }  return partition;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.777 -0500",hash_original_method="9AE75EDD15A5D634A14FDDC5ABF53B75",hash_generated_method="385399E68448223FBC64104F00D1AF03") public Object[] toArray(){  ArrayList<E> al=new ArrayList<E>();  for (Node<E> p=first(); p != null; p=succ(p)) {    E item=p.item;    if (item != null)     al.add(item);  }  return al.toArray();}  }
class C{  public boolean isIgnoreComments(){  return ignoreComments;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){}  }
class C{  private void draw(int i,Color c){  StdDraw.setPenColor(c);  int x=toX(i);  int y=toY(i);  StdDraw.filledCircle(x + 0.5,y + 0.5,0.25);}  }
class C{  private InterfacesTableMouseListener(TableEditor editor){  this.editor=editor;}  }
class C{  public void addAttributes(Map attributes){  String typeUri;  Iterator iter=attributes.keySet().iterator();  while (iter.hasNext()) {    typeUri=(String)iter.next();    addAttribute(typeUri,(String)attributes.get(typeUri));  }}  }
class C{  public Statement createStatement(int resultSetType,int resultSetConcurrency) throws SQLException {  return createStatement(resultSetType,resultSetConcurrency,this.resultSetHoldability);}  }
class C{  public KilledCondition(final String... toKill){  this.toKill=new TreeSet<String>(Arrays.asList(toKill));}  }
class C{  public static Date convertDate(String date){  Date receivedDate=null;  try {    receivedDate=dateFormat.parse(date);  } catch (  ParseException e) {    Log.e(TAG,"Invalid date format." + e);  }  return receivedDate;}  }
class C{  public static NumberPercentAuto newInstance(NumberPercentAutoAsEnum numberPercentAutoAsEnum){  NumberPercentAuto numberPercentAuto=new NumberPercentAuto();  numberPercentAuto.numberPercentAutoAsEnum=numberPercentAutoAsEnum;  return numberPercentAuto;}  }
class C{  public boolean isMinMeasuredValueVisible(){  return null == minMeasuredValueVisible ? _minMeasuredValueVisible : minMeasuredValueVisible.get();}  }
class C{  public static MonthDay fromCalendarFields(Calendar calendar){  if (calendar == null) {    throw new IllegalArgumentException("The calendar must not be null");  }  return new MonthDay(calendar.get(Calendar.MONTH) + 1,calendar.get(Calendar.DAY_OF_MONTH));}  }
class C{  public int verify(Message m,byte[] b){  TSIGRecord tsig=m.getTSIG();  nresponses++;  if (nresponses == 1) {    int result=key.verify(m,b,lastTSIG);    if (result == Rcode.NOERROR) {      byte[] signature=tsig.getSignature();      DNSOutput out=new DNSOutput();      out.writeU16(signature.length);      verifier.update(out.toByteArray());      verifier.update(signature);    }    lastTSIG=tsig;    return result;  }  if (tsig != null)   m.getHeader().decCount(Section.ADDITIONAL);  byte[] header=m.getHeader().toWire();  if (tsig != null)   m.getHeader().incCount(Section.ADDITIONAL);  verifier.update(header);  int len;  if (tsig == null)   len=b.length - header.length; else   len=m.tsigstart - header.length;  verifier.update(b,header.length,len);  if (tsig != null) {    lastsigned=nresponses;    lastTSIG=tsig;  } else {    boolean required=(nresponses - lastsigned >= 100);    if (required) {      m.tsigState=Message.TSIG_FAILED;      return Rcode.FORMERR;    } else {      m.tsigState=Message.TSIG_INTERMEDIATE;      return Rcode.NOERROR;    }  }  if (!tsig.getName().equals(key.name) || !tsig.getAlgorithm().equals(key.alg)) {    if (Options.check("verbose"))     System.err.println("BADKEY failure");    m.tsigState=Message.TSIG_FAILED;    return Rcode.BADKEY;  }  DNSOutput out=new DNSOutput();  long time=tsig.getTimeSigned().getTime() / 1000;  int timeHigh=(int)(time >> 32);  long timeLow=(time & 0xFFFFFFFFL);  out.writeU16(timeHigh);  out.writeU32(timeLow);  out.writeU16(tsig.getFudge());  verifier.update(out.toByteArray());  if (verifier.verify(tsig.getSignature()) == false) {    if (Options.check("verbose"))     System.err.println("BADSIG failure");    m.tsigState=Message.TSIG_FAILED;    return Rcode.BADSIG;  }  verifier.clear();  out=new DNSOutput();  out.writeU16(tsig.getSignature().length);  verifier.update(out.toByteArray());  verifier.update(tsig.getSignature());  m.tsigState=Message.TSIG_VERIFIED;  return Rcode.NOERROR;}  }
class C{  public void scannerDataEnd(int reqId){  _log.debug("scannerDataEnd: " + reqId);}  }
class C{  public void doSomething(String x,String y){  if (true)   System.out.println("True");}  }
class C{  protected void init(boolean createVBOs){}  }
class C{  protected void atrasExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  goBackExecuteLogic(mapping,form,request,response);}  }
class C{  protected void sendFunctionGroup3(){  byte[] result=jmri.NmraPacket.function9Through12Packet(address.getNumber(),address.isLongAddress(),getF9(),getF10(),getF11(),getF12());  EasyDccMessage m=new EasyDccMessage(4 + 3 * result.length);  int i=0;  m.setElement(i++,'S');  m.setElement(i++,' ');  m.setElement(i++,'0');  m.setElement(i++,'1');  for (int j=0; j < result.length; j++) {    m.setElement(i++,' ');    m.addIntAsTwoHex(result[j] & 0xFF,i);    i=i + 2;  }  tc.sendEasyDccMessage(m,null);}  }
class C{  public Proposition(VariableSource variableSource,Proposition proposition){  this(variableSource);  if (proposition == null) {    throw new NullPointerException();  }  List<Node> variables=variableSource.getVariables();  List<Node> oldVariables=proposition.getVariableSource().getVariables();  for (int i=0; i < variables.size(); i++) {    DiscreteVariable variable=(DiscreteVariable)variables.get(i);    int oldIndex=-1;    for (int j=0; j < oldVariables.size(); j++) {      DiscreteVariable _variable=(DiscreteVariable)oldVariables.get(j);      if (variable.equals(_variable)) {        oldIndex=j;        break;      }    }    if (oldIndex != -1) {      for (int j=0; j < allowedCategories[i].length; j++) {        allowedCategories[i][j]=proposition.isAllowed(oldIndex,j);      }    }  }}  }
class C{  public WordCache(final File dictionaryPath){  this.dictionaryPath=dictionaryPath;  this.dictionaries=new ConcurrentHashMap<String,Dictionary>();  reload();}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  if (extensions == null)   return false;  return extensions.hasUnsupportedCriticalExtension();}  }
class C{  public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){  g.setColor(getColor());  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {    Rectangle alloc;    if (bounds instanceof Rectangle)     alloc=(Rectangle)bounds; else     alloc=bounds.getBounds();    paintSquiggle(g,alloc);    return alloc;  }  try {    Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);    Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();    paintSquiggle(g,r);    return r;  } catch (  BadLocationException e) {    e.printStackTrace();  }  return null;}  }
class C{  public static TypeQueryBuilder typeQuery(String type){  return new TypeQueryBuilder(type);}  }
class C{  @Override public boolean hasMoreElements(){  return (implicitInstructions.hasNext() || explicitInstructions.hasMoreElements());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.258 -0500",hash_original_method="E611EE61C75972DE5AB5B484EC7DE89C",hash_generated_method="0175E884F26CE815B1D956FD49795CD4") protected void headerName(int tok) throws ParseException {  this.lexer.match(tok);  this.lexer.SPorHT();  this.lexer.match(':');  this.lexer.SPorHT();}  }
class C{  protected static void assertion(boolean b,String msg){  if (!b) {    throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_ASSERT_REDUNDENT_EXPR_ELIMINATOR,new Object[]{msg}));  }}  }
class C{  private boolean requestPrimaryState(byte requestedState){  final byte fromState=this.primaryState;switch (fromState) {case NO_PRIMARY_NOT_HOSTING:switch (requestedState) {case NO_PRIMARY_NOT_HOSTING:      return false;case NO_PRIMARY_HOSTING:    this.primaryState=requestedState;  break;case OTHER_PRIMARY_NOT_HOSTING:this.primaryState=requestedState;break;case OTHER_PRIMARY_HOSTING:this.primaryState=requestedState;break;case BECOMING_HOSTING:return false;case VOLUNTEERING_HOSTING:return false;case CLOSED:this.primaryState=requestedState;break;default :throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1.toLocalizedString(new Object[]{this.primaryStateToString(),this.primaryStateToString(requestedState)}));}break;case NO_PRIMARY_HOSTING:switch (requestedState) {case NO_PRIMARY_NOT_HOSTING:this.primaryState=requestedState;break;case NO_PRIMARY_HOSTING:return false;case VOLUNTEERING_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.putStartTime(this,stats.startVolunteering());}break;case BECOMING_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.putStartTime(this,stats.startVolunteering());}break;case OTHER_PRIMARY_HOSTING:this.primaryState=requestedState;break;case CLOSED:this.primaryState=requestedState;break;default :throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1.toLocalizedString(new Object[]{this.primaryStateToString(),this.primaryStateToString(requestedState)}));}break;case OTHER_PRIMARY_NOT_HOSTING:switch (requestedState) {case NO_PRIMARY_NOT_HOSTING:this.primaryState=requestedState;break;case OTHER_PRIMARY_NOT_HOSTING:return false;case OTHER_PRIMARY_HOSTING:this.primaryState=requestedState;break;case BECOMING_HOSTING:return false;case VOLUNTEERING_HOSTING:return false;case CLOSED:this.primaryState=requestedState;break;default :throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1.toLocalizedString(new Object[]{this.primaryStateToString(),this.primaryStateToString(requestedState)}));}break;case OTHER_PRIMARY_HOSTING:switch (requestedState) {case OTHER_PRIMARY_NOT_HOSTING:this.primaryState=requestedState;break;case OTHER_PRIMARY_HOSTING:return false;case NO_PRIMARY_HOSTING:this.primaryState=requestedState;break;case CLOSED:this.primaryState=requestedState;break;case VOLUNTEERING_HOSTING:return false;case BECOMING_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.putStartTime(this,stats.startVolunteering());}break;case IS_PRIMARY_HOSTING:this.primaryState=requestedState;break;default :throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1.toLocalizedString(new Object[]{this.primaryStateToString(),this.primaryStateToString(requestedState)}));}break;case VOLUNTEERING_HOSTING:switch (requestedState) {case NO_PRIMARY_NOT_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.endVolunteeringClosed(stats.removeStartTime(this));}break;case OTHER_PRIMARY_NOT_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.endVolunteeringClosed(stats.removeStartTime(this));}break;case NO_PRIMARY_HOSTING:return false;case IS_PRIMARY_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.incPrimaryBucketCount(1);stats.endVolunteeringBecamePrimary(stats.removeStartTime(this));}break;case OTHER_PRIMARY_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.endVolunteeringOtherPrimary(stats.removeStartTime(this));}break;case VOLUNTEERING_HOSTING:return false;case BECOMING_HOSTING:return false;case CLOSED:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.endVolunteeringClosed(stats.removeStartTime(this));}break;default :throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1.toLocalizedString(new Object[]{this.primaryStateToString(),this.primaryStateToString(requestedState)}));}break;case BECOMING_HOSTING:switch (requestedState) {case NO_PRIMARY_NOT_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.endVolunteeringClosed(stats.removeStartTime(this));}break;case OTHER_PRIMARY_NOT_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.endVolunteeringClosed(stats.removeStartTime(this));}break;case NO_PRIMARY_HOSTING:return false;case IS_PRIMARY_HOSTING:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.incPrimaryBucketCount(1);stats.endVolunteeringBecamePrimary(stats.removeStartTime(this));}break;case OTHER_PRIMARY_HOSTING:return false;case VOLUNTEERING_HOSTING:return false;case BECOMING_HOSTING:return false;case CLOSED:this.primaryState=requestedState;{PartitionedRegionStats stats=getPartitionedRegionStats();stats.endVolunteeringClosed(stats.removeStartTime(this));}break;default :throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1.toLocalizedString(new Object[]{this.primaryStateToString(),this.primaryStateToString(requestedState)}));}break;case IS_PRIMARY_HOSTING:switch (requestedState) {case NO_PRIMARY_HOSTING:changeFromPrimaryTo(requestedState);break;case OTHER_PRIMARY_NOT_HOSTING:changeFromPrimaryTo(requestedState);break;case NO_PRIMARY_NOT_HOSTING:changeFromPrimaryTo(requestedState);break;case VOLUNTEERING_HOSTING:return false;case BECOMING_HOSTING:return false;case CLOSED:changeFromPrimaryTo(requestedState);break;default :throw new IllegalStateException("Cannot change from " + this.primaryStateToString() + " to "+ this.primaryStateToString(requestedState));}break;case CLOSED:switch (requestedState) {case CLOSED:Exception e=new Exception(LocalizedStrings.BucketAdvisor_ATTEMPTED_TO_CLOSE_BUCKETADVISOR_THAT_IS_ALREADY_CLOSED.toLocalizedString());logger.warn(LocalizedMessage.create(LocalizedStrings.BucketAdvisor_ATTEMPTED_TO_CLOSE_BUCKETADVISOR_THAT_IS_ALREADY_CLOSED),e);break;case VOLUNTEERING_HOSTING:return false;case BECOMING_HOSTING:return false;case IS_PRIMARY_HOSTING:return false;case OTHER_PRIMARY_NOT_HOSTING:return false;default :throw new IllegalStateException(LocalizedStrings.BucketAdvisor_CANNOT_CHANGE_FROM_0_TO_1_FOR_BUCKET_2.toLocalizedString(new Object[]{this.primaryStateToString(),this.primaryStateToString(requestedState),getAdvisee().getName()}));}}return this.primaryState == requestedState;}  }
class C{  public GeoRssWhere(){}  }
class C{  public Image baseFor(IHex hex){  return hexTileset.getBase(hex,boardview);}  }
class C{  public static boolean relocateFutureTrip(Trip trip,Plan plan,String mainMode,double departureTime,Network network,TripRouter tripRouter){  return replanFutureTrip(trip,plan,mainMode,departureTime,network,tripRouter);}  }
class C{  public MqttMessage(byte[] payload){  setPayload(payload);}  }
class C{  public synchronized int search(Object o){  final Object[] dumpArray=elementData;  final int size=elementCount;  if (o != null) {    for (int i=size - 1; i >= 0; i--) {      if (o.equals(dumpArray[i])) {        return size - i;      }    }  } else {    for (int i=size - 1; i >= 0; i--) {      if (dumpArray[i] == null) {        return size - i;      }    }  }  return -1;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public final void putAll(Map s){  for (Iterator iter=s.keySet().iterator(); iter.hasNext(); ) {    Object key=iter.next();    put(key,s.get(key));  }}  }
class C{  private void readObject(){}  }
class C{  public Element toSVG(RoundRectangle2D rect){  Element svgRect=toSVG((RectangularShape)rect);  if (svgRect != null && svgRect.getTagName() == SVG_RECT_TAG) {    svgRect.setAttributeNS(null,SVG_RX_ATTRIBUTE,doubleString(Math.abs(rect.getArcWidth() / 2)));    svgRect.setAttributeNS(null,SVG_RY_ATTRIBUTE,doubleString(Math.abs(rect.getArcHeight() / 2)));  }  return svgRect;}  }
class C{  public void copyResource(String resourceName,String destFile,FileHandler handler) throws IOException {  InputStream in=ResourceUtils.resourceLoader.getResourceAsStream(resourceName);  if (in == null) {    throw new IOException("Resource [" + resourceName + "] not found in resource loader "+ ResourceUtils.resourceLoader);  }  OutputStream out=null;  try {    out=handler.getOutputStream(destFile);    byte[] buf=new byte[4096];    int numBytes;    while ((numBytes=in.read(buf)) > 0) {      out.write(buf,0,numBytes);    }  }  finally {    in.close();    if (out != null) {      out.close();    }  }}  }
class C{  public boolean isSuccess(){  return majorCode == SUCCESS;}  }
class C{  public static double version(Context cx,Scriptable thisObj,Object[] args,Function funObj){  double result=cx.getLanguageVersion();  if (args.length > 0) {    double d=Context.toNumber(args[0]);    cx.setLanguageVersion((int)d);  }  return result;}  }
class C{  public boolean hasSequence(){  return hasExtension(SequenceNumberProperty.class);}  }
class C{  public ContentModelState(ContentModel model){  this(model,null,0);}  }
class C{  public void paintTableHeaderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public synchronized void start(){  startDiscovery();  if (D)   Log.d(TAG,"start");  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  setState(STATE_LISTEN);  if (mSecureAcceptThread == null) {    mSecureAcceptThread=new AcceptThread(true);    mSecureAcceptThread.start();  }  if (mInsecureAcceptThread == null) {    mInsecureAcceptThread=new AcceptThread(false);    mInsecureAcceptThread.start();  }}  }
class C{  public boolean addMember(Principal p){  return true;}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  public synchronized OutputStream writeNotify() throws IOException {  if (conn != null) {    throw new IOException("attempt to write on HttpSendSocket after " + "request has been sent");  }  conn=url.openConnection();  conn.setDoOutput(true);  conn.setUseCaches(false);  conn.setRequestProperty("Content-type","application/octet-stream");  inNotifier.deactivate();  in=null;  return out=conn.getOutputStream();}  }
class C{  protected Image cacheLookup(String key){  return (Image)imageCache.get(key);}  }
class C{  public boolean isGraphNeeded(){  return true;}  }
class C{  @SideEffectFree public void logrb(Level level,@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable String bundleName,@Nullable String msg,@Nullable Object param1){  throw new RuntimeException();}  }
class C{  protected String cleanFileName(String fileName){  return fileName.toLowerCase(Locale.US).trim();}  }
class C{  public void updateObject(String columnName,Object x) throws SQLException {  updateObject(findColumn(columnName),x);}  }
class C{  @ObjectiveCName("initWithConfiguration:") public Messenger(@NotNull Configuration configuration){  ActorSystem.system().setTraceInterface(new ActorTrace());  ActorSystem.system().addDispatcher("network_manager",1);  ActorSystem.system().addDispatcher("heavy",2);  this.modules=new Modules(this,configuration);  this.modules.run();}  }
class C{  public int methodIndex(){  return ByteArray.readU16bit(get(),2);}  }
class C{  public Asteroid(Asteroids asteroids,int size,MutableDouble2D velocity,Double2D location){  this.size=size;  this.velocity=velocity;  stopper=asteroids.schedule.scheduleRepeating(this);  shape=shapes[size][asteroids.random.nextInt(shapes[size].length)];  rotationalVelocity=asteroids.random.nextDouble() * MAXIMUM_ROTATIONAL_VELOCITY * (asteroids.random.nextBoolean() ? 1.0 : -1.0);  orientation=asteroids.random.nextDouble() * Math.PI * 2;  asteroids.field.setObjectLocation(this,location);  asteroids.asteroidCount++;}  }
class C{  private void insert(Region x){  this.root=insert(x,this.root);}  }
class C{  public void removeVariableValue(String name){  variables.remove(name);}  }
class C{  private ClassInterface checkParentInUnits(String parentName,CodeAnalysisResults results){  for (  UnitInterface unit : results.getCachedUnits()) {    if (!results.getActiveUnit().isIncluding(unit)) {      continue;    }    ClassInterface found=unit.findClass(parentName);    if (found != null) {      return found;    }  }  return null;}  }
class C{  public ForceDirectedLayout(String group,boolean enforceBounds){  this(group,enforceBounds,false);}  }
class C{  public void delegatesTo(@Nullable PsiElement elem,GdslMembersHolderConsumer consumer){  if (elem instanceof PsiClass) {    final PsiClass clazz=(PsiClass)elem;    final DelegatedMembersHolder holder=new DelegatedMembersHolder();    if (clazz instanceof GrTypeDefinition) {      final PsiClassType type=JavaPsiFacade.getElementFactory(consumer.getProject()).createType(clazz);      final ResolverProcessor processor=CompletionProcessor.createPropertyCompletionProcessor(clazz);      final GroovyPsiElement context=(GroovyPsiElement)clazz;      ResolveUtil.processAllDeclarations(type,processor,ResolveState.initial(),context);      for (      GroovyResolveResult result : processor.getCandidates()) {        final PsiElement element=result.getElement();        if (element instanceof PsiMethod && !((PsiMethod)element).isConstructor() || element instanceof PsiField) {          holder.addMember((PsiMember)element);        }      }    } else {      for (      PsiMethod method : clazz.getAllMethods()) {        if (!method.isConstructor())         holder.addMember(method);      }      for (      PsiField field : clazz.getAllFields()) {        holder.addMember(field);      }    }    consumer.addMemberHolder(holder);  } else   if (elem instanceof GrExpression) {    GrExpression expr=(GrExpression)elem;    final PsiType type=expr.getType();    if (type instanceof PsiClassType) {      PsiClassType ctype=(PsiClassType)type;      delegatesTo(ctype.resolve(),consumer);    }  }}  }
class C{  public static int skipIgnoreSect(char[] buf,int off,int end) throws PartialTokenException, InvalidTokenException {  int level=0;  loop:   while (off != end) {switch (charType(buf[off])) {case CT_LEAD2:      if (end - off < 2)       throw new PartialCharException(off);    check2(buf,off);  off+=2;break;case CT_NONXML:case CT_MALFORM:throw new InvalidTokenException(off);case CT_LT:off+=1;if (off == end) break loop;if (buf[off] != '!') break;off+=1;if (off == end) break loop;if (buf[off] != '[') break;level++;off+=1;break;case CT_RSQB:off+=1;if (off == end) break loop;if (buf[off] != ']') break;off+=1;if (off == end) break loop;if (buf[off] == '>') {if (level == 0) return off + 1;level--;} else if (buf[off] == ']') break;off+=1;break;default :off+=1;break;}}throw new PartialTokenException();}  }
class C{  @NonNull public static Animator rotateBy(float rotation,float duration){  return rotateBy(rotation,duration,null);}  }
class C{  private void uninstallPrequisiteApks(Collection<String> uninstallPackages) throws DeviceNotAvailableException {  for (  String pkgName : uninstallPackages) {    getDevice().uninstallPackage(pkgName);  }}  }
class C{  public Boolean isFullDuplex(){  return fullDuplex;}  }
class C{  public void prependSplitElement(Fragment aSplit){  splits.add(0,aSplit);}  }
class C{  public final Angle multiply(double multiplier){  return Angle.fromDegrees(this.degrees * multiplier);}  }
class C{  public boolean canPace(){  return true;}  }
class C{  void formatAndSend(int housecode,int devicemask,X10Sequence.Function c,SerialListener l){  SpecificMessage m=new SpecificMessage(22);  for (int i=0; i < 16; i++) {    m.setElement(i,0xFF);  }  int level=c.getDimCount();  if (level > 16) {    log.warn("can't handle dim counts > 15?");    level=16;  }  if (logDebug) {    log.debug("dim level: " + level);  }  level=16 - level;  int function=c.getFunction();  int lineHouseCode=X10Sequence.encode(housecode);  m.setElement(16,1);  m.setElement(17,level * 16 + function);  m.setElement(18,lineHouseCode * 16 + 0);  m.setElement(19,devicemask & 0xFF);  m.setElement(20,(devicemask >> 8) & 0xFF);  m.setElement(21,0xFF & (m.getElement(17) + m.getElement(18) + m.getElement(19)+ m.getElement(20)));  sendSerialMessage(m,l);  cmdOutstanding=true;}  }
class C{  public void notifyNeighbors(){}  }
class C{  public Geo(double lat,double lon){  initialize(lat,lon);}  }
class C{  public static Boolean isDictionaryFile(CarbonFile carbonFile){  return (!carbonFile.isDirectory()) && (carbonFile.getName().endsWith(DICTIONARY_EXT));}  }
class C{  @ReactMethod public void logInWithReadPermissions(ReadableArray permissions,final Promise promise){  final LoginManager loginManager=LoginManager.getInstance();  loginManager.registerCallback(mCallbackManager,new LoginManagerCallback(promise));  Activity activity=getCurrentActivity();  if (activity != null) {    loginManager.logInWithReadPermissions(activity,reactArrayToJavaStringCollection(permissions));  }}  }
class C{  public boolean isV1_0(){  return VCAL.equals(maxVersion);}  }
class C{  public static int compare(String left,String right){  if (Decision.isNumber(left)) {    if (Decision.isNumber(right)) {      if (left.length() > 9 || right.length() > 9) {        try {          return new BigDecimal(left).compareTo(new BigDecimal(right));        } catch (        Throwable t) {        }      }      return compare(Caster.toDoubleValue(left,Double.NaN),Caster.toDoubleValue(right,Double.NaN));    }    return compare(Caster.toDoubleValue(left,Double.NaN),right);  }  if (Decision.isBoolean(left))   return compare(Caster.toBooleanValue(left,false) ? 1D : 0D,right);  return left.compareToIgnoreCase(right);}  }
class C{  public static boolean isSuccess(int status){  return (status >= 200 && status < 300);}  }
class C{  public boolean isUseProxyChain(){  return useProxyChain;}  }
class C{  static Class<?> loadClass(String className,ClassLoader loader) throws ReflectionException {  Class<?> theClass;  if (className == null) {    throw new RuntimeOperationsException(new IllegalArgumentException("The class name cannot be null"),"Exception occurred during object instantiation");  }  ReflectUtil.checkPackageAccess(className);  try {    if (loader == null)     loader=MBeanInstantiator.class.getClassLoader();    if (loader != null) {      theClass=Class.forName(className,false,loader);    } else {      theClass=Class.forName(className);    }  } catch (  ClassNotFoundException e) {    throw new ReflectionException(e,"The MBean class could not be loaded");  }  return theClass;}  }
class C{  public static int range(int min,int max,int value){  if (value < min) {    value=min;  }  if (value > max) {    value=max;  }  return value;}  }
class C{  public LVQLLC(DistanceMetric dm,int iterations,Classifier localClasifier,double learningRate,int representativesPerClass){  super(dm,iterations,learningRate,representativesPerClass);  setLocalClassifier(localClasifier);}  }
class C{  public boolean undo(){  return model.undo();}  }
class C{  private List<Quote> readXML(InputStream stream) throws XmlPullParserException, IOException {  List<Quote> quotes=new ArrayList<>();  boolean isInsideItem=false;  boolean isInsideAuthor=false;  boolean isInsideQuote=false;  Quote quote=null;  XmlPullParserFactory factory=XmlPullParserFactory.newInstance();  XmlPullParser parser=factory.newPullParser();  parser.setInput(stream,"UTF-8");  int eventType=parser.getEventType();  while (eventType != XmlPullParser.END_DOCUMENT) {    if (eventType == XmlPullParser.START_TAG) {      String tag=parser.getName();      if ("item".equals(tag)) {        isInsideItem=true;        quote=new Quote();      } else       if (isInsideItem && "title".equals(tag)) {        isInsideAuthor=true;      } else       if (isInsideItem && "description".equals(tag)) {        isInsideQuote=true;      }    } else     if (eventType == XmlPullParser.END_TAG) {      String tag=parser.getName();      if ("item".equals(tag)) {        isInsideItem=false;        quotes.add(quote);      } else       if (isInsideItem && "title".equals(tag)) {        isInsideAuthor=false;      } else       if (isInsideItem && "description".equals(tag)) {        isInsideQuote=false;      }    } else     if (eventType == XmlPullParser.TEXT) {      String text=parser.getText();      if (isInsideAuthor) {        quote.setAuthor(text);      } else       if (isInsideQuote) {        quote.setQuote(text);      }    }    eventType=parser.next();  }  return quotes;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public AttachContainerParams withContainer(@NotNull String container){  requireNonNull(container);  this.container=container;  return this;}  }
class C{  private LoggerHolder(){  throw new AssertionError("The LoggerHolder should never be instantiated");}  }
class C{  private Value readArray(Class type,NodeMap node) throws Exception {  Node entry=node.remove(length);  int size=0;  if (entry != null) {    String value=entry.getValue();    size=Integer.parseInt(value);  }  return new ArrayValue(type,size);}  }
class C{  protected void installListeners(){  Window topLevelWindows[]=EventQueueMonitor.getTopLevelWindows();  if (topLevelWindows != null) {    for (int i=0; i < topLevelWindows.length; i++) {      if (topLevelWindows[i] instanceof Accessible) {        installListeners((Accessible)topLevelWindows[i]);      }    }  }}  }
class C{  public static Instances SLTransformation(Instances D,int L,String cname,int p,int n){  D=new Instances(D);  HashMap<LabelSet,Integer> distinctCombinations=PSUtils.countCombinationsSparse(D,L);  if (p > 0)   MLUtils.pruneCountHashMap(distinctCombinations,p);  if (distinctCombinations.size() <= 1 && p > 0) {    System.err.println("[Warning] You did too much pruning, setting P = P-1");    return PSTransformation(D,L,cname,p - 1,n);  }  ArrayList<String> ClassValues=new ArrayList<String>();  for (  LabelSet y : distinctCombinations.keySet())   ClassValues.add(y.toString());  Attribute C=new Attribute(cname,ClassValues);  D.insertAttributeAt(C,L);  D.setClassIndex(L);  int N=D.numInstances();  for (int i=0; i < N; i++) {    Instance x=D.instance(i);    LabelSet y=new LabelSet(MLUtils.toSparseIntArray(x,L));    String y_string=y.toString();    if (ClassValues.contains(y_string))     x.setClassValue(y_string); else     if (n > 0) {      LabelSet d_subsets[]=PSUtils.getTopNSubsets(y,distinctCombinations,n);      if (d_subsets.length > 0) {        x.setClassValue(d_subsets[0].toString());        if (d_subsets.length > 1) {          for (int s_i=1; s_i < d_subsets.length; s_i++) {            Instance x_=(Instance)(x).copy();            x_.setClassValue(d_subsets[s_i].toString());            D.add(x_);          }        }      } else {        x.setClassMissing();      }    }  }  D.deleteWithMissingClass();  try {    D=F.removeLabels(D,L);  } catch (  Exception e) {  }  D.setClassIndex(0);  return D;}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN;}  }
class C{  public static void createScript(Map<Id<TransitLine>,TransitLine> lines,String outDir,double interval,int maxSlices){  readScript(outDir,interval,maxSlices);  heatmapScript(outDir,interval,maxSlices);  StringBuffer b=new StringBuffer();  for (  TransitLine l : lines.values()) {    for (    TransitRoute r : l.getRoutes().values()) {      createRouteScript(l.getId(),r.getId(),outDir);      b.append(l.getId().toString() + "--" + r.getId().toString()+ ".R\n");    }  }  BufferedWriter w=IOUtils.getBufferedWriter(outDir + "plotAll.bat");  try {    w.write(b.toString());    w.flush();    w.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static <T>T withPrintWriter(OutputStream stream,@ClosureParams(value=SimpleType.class,options="java.io.PrintWriter") Closure<T> closure) throws IOException {  return withWriter(newPrintWriter(stream),closure);}  }
class C{  private void createEmptyStaticReset(){  logger.info("Creating brand-new static initializer in class " + className);  MethodVisitor mv=cv.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC | Opcodes.ACC_SYNTHETIC,ClassResetter.STATIC_RESET,"()V",null,null);  mv.visitCode();  for (  StaticField staticField : static_fields) {    if (!finalFields.contains(staticField.name) && !staticField.name.startsWith("__cobertura") && !staticField.name.startsWith("$jacoco")&& !staticField.name.startsWith("$VRc")) {      logger.info("Adding bytecode for initializing field " + staticField.name);      if (staticField.value != null) {        mv.visitLdcInsn(staticField.value);      } else {        Type type=Type.getType(staticField.desc);switch (type.getSort()) {case Type.BOOLEAN:case Type.BYTE:case Type.CHAR:case Type.SHORT:case Type.INT:          mv.visitInsn(Opcodes.ICONST_0);        break;case Type.FLOAT:      mv.visitInsn(Opcodes.FCONST_0);    break;case Type.LONG:  mv.visitInsn(Opcodes.LCONST_0);break;case Type.DOUBLE:mv.visitInsn(Opcodes.DCONST_0);break;case Type.ARRAY:case Type.OBJECT:mv.visitInsn(Opcodes.ACONST_NULL);break;}}mv.visitFieldInsn(Opcodes.PUTSTATIC,className,staticField.name,staticField.desc);}}mv.visitInsn(Opcodes.RETURN);mv.visitMaxs(0,0);mv.visitEnd();}  }
class C{  void jbInit() throws Exception {  panel.setLayout(mainLayout);  mainLayout.setHgap(5);  mainLayout.setVgap(5);  panel.add(confirmPanel,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);  centerLayout.setHgap(5);  centerLayout.setVgap(5);  centerLayout.setColumns(3);  centerLayout.setRows(m_label.length + 1);  CenterPanel.setLayout(centerLayout);  panel.add(CenterPanel,BorderLayout.CENTER);  CenterPanel.add(new CLabel(),null);  CenterPanel.add(mergeFromLabel,null);  CenterPanel.add(mergeToLabel,null);  Font heading=mergeFromLabel.getFont();  heading=new Font(heading.getName(),Font.BOLD,heading.getSize());  mergeFromLabel.setFont(heading);  mergeFromLabel.setRequestFocusEnabled(false);  mergeFromLabel.setText(Msg.getMsg(Env.getCtx(),"MergeFrom"));  mergeToLabel.setFont(heading);  mergeToLabel.setText(Msg.getMsg(Env.getCtx(),"MergeTo"));  for (int i=0; i < m_label.length; i++) {    CenterPanel.add(m_label[i],null);    CenterPanel.add(m_from[i],null);    CenterPanel.add(m_to[i],null);  }}  }
class C{  public void andWith(QueryPredicate predicate){  children.add(predicate);}  }
class C{  public String ruleString(XMLObject xo){  for (  XMLSyntaxRule rule : rules) {    if (!rule.isSatisfied(xo))     return rule.ruleString(xo);  }  return ruleString();}  }
class C{  private int computeSuperBit(final int stages,final int buckets,final int dimensions){  int code_length=stages * buckets / 2;  int superbit;  for (superbit=dimensions; superbit >= 1; superbit--) {    if (code_length % superbit == 0) {      break;    }  }  if (superbit == 0) {    throw new IllegalArgumentException("Superbit is 0 with parameters: s=" + stages + " b="+ buckets+ " n="+ dimensions);  }  return superbit;}  }
class C{  public void deleteMetadataEntry(int i){  if (i < metadata.size()) {    metadata.remove(i);  }}  }
class C{  public void test_unwrap_06(){  String host="new host";  int port=8080;  ByteBuffer[] bbA={ByteBuffer.allocate(100),ByteBuffer.allocate(10),ByteBuffer.allocate(100)};  ByteBuffer bb=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    SSLEngineResult res=sse.unwrap(bb,bbA,0,bbA.length);    assertEquals(0,res.bytesConsumed());    assertEquals(0,res.bytesProduced());  } catch (  Exception ex) {    fail("Unexpected exception: " + ex);  }}  }
class C{  public static void logPromoTapsBeforeFirstOpen(int promoTaps){  RecordHistogram.recordCountHistogram("Search.ContextualSearchPromoTapsBeforeFirstOpen",promoTaps);}  }
class C{  private void compactEntry(long index,Segment segment,Segment compactSegment){  compactSegment.skip(1);  LOGGER.debug("Compacted entry {} from segment {}",index,segment.descriptor().id());}  }
class C{  public void println(String s){  javaLine++;  writer.println(s);}  }
class C{  public void trainAllSystems(String savename) throws IOException {  SentimentSystemNRC nrcSystem=new SentimentSystemNRC(tweetList);  nrcSystem.train(savename);  SentimentSystemGUMLTLT gumltltSystem=new SentimentSystemGUMLTLT(tweetList);  gumltltSystem.train(savename);  SentimentSystemKLUE klueSystem=new SentimentSystemKLUE(tweetList);  klueSystem.train(savename);}  }
class C{  public Iterator<Integer> iterator(){  return new MyIterator();}  }
class C{  public boolean execute(INode n){  if (!isValid(n)) {    System.err.println("Requested invalid move!");    return false;  }  FreeCellNode state=(FreeCellNode)n;  int ct=num;  int idx=0;  while (ct-- > 0) {    cards[idx++]=state.cols[fromCol].remove();  }  while (idx-- > 0) {    state.cols[toCol].add(cards[idx]);  }  if (state.cols[fromCol].num == 0 || state.cols[toCol].num == 1) {    state.sortMap();  }  return true;}  }
class C{  private Entry lastEntry(){  Entry p=root;  if (p != null)   while (p.right != null)   p=p.right;  return p;}  }
class C{  @Override public Vertex parseStateByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex state=network.createTemporyVertex();  state.addRelationship(Primitive.INSTANTIATION,Primitive.STATE);  try {    long id=dataStream.readLong();    while (id > 0) {      Vertex next=network.findById(id);      Vertex vertex=null;      if (next == null) {        id=dataStream.readLong();        continue;      }      if (next.is(Primitive.CASE)) {        vertex=parseCaseByteCode(dataStream,network);        state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      } else       if (next.is(Primitive.QUOTIENT)) {        parseQuotientByteCode(state,dataStream,network);      } else       if (next.is(Primitive.DO)) {        vertex=parseDoByteCode(dataStream,network);        state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      } else       if (next.is(Primitive.GOTO)) {        vertex=parseGotoByteCode(dataStream,network);        state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      } else       if (next.is(Primitive.PUSH)) {        vertex=parsePushByteCode(dataStream,network);        state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      } else       if (next.is(Primitive.RETURN)) {        vertex=parseReturnByteCode(dataStream,network);        state.addRelationship(Primitive.DO,vertex,Integer.MAX_VALUE);      }      id=dataStream.readLong();    }  } catch (  Exception exception) {    network.getBot().log(this,"Error parsing state bytecode",Level.WARNING,state);    network.getBot().log(this,exception);  }  return state;}  }
class C{  private String classname_to_resource_name(String name){  return (name.replace(".","/") + ".class");}  }
class C{  private Hashtable<IPoint,List<ICircle>> filter(Hashtable<IPoint,ICircle[]> circleIntersections){  Hashtable<IPoint,List<ICircle>> real=new Hashtable<IPoint,List<ICircle>>();  for (  IPoint pt : circleIntersections.keySet()) {    ICircle[] circs=circleIntersections.get(pt);    for (int i=0; i < circs.length - 1; i++) {      for (int j=i + 1; j < circs.length; j++) {        IPoint[] pts=intersects(circs[i],circs[j]);        if (pts != null) {          for (          IPoint p : pts) {            report(real,p,circs[i],circs[j]);          }        }      }    }  }  return real;}  }
class C{  public EdgeListGraphSingleConnections(Graph graph) throws IllegalArgumentException {  this();  if (graph instanceof EdgeListGraphSingleConnections) {    EdgeListGraphSingleConnections _graph=(EdgeListGraphSingleConnections)graph;    nodes=new ArrayList<>(_graph.nodes);    edgesSet=new HashSet<>(_graph.edgesSet);    edgeLists=new ConcurrentHashMap<>();    for (    Node node : nodes)     this.edgeLists.put(node,new ArrayList<>(_graph.edgeLists.get(node)));    ambiguousTriples=new HashSet<>(_graph.ambiguousTriples);    underLineTriples=new HashSet<>(_graph.underLineTriples);    dottedUnderLineTriples=new HashSet<>(_graph.dottedUnderLineTriples);    stuffRemovedSinceLastTripleAccess=_graph.stuffRemovedSinceLastTripleAccess;    highlightedEdges=new HashSet<>(_graph.highlightedEdges);    namesHash=new HashMap<>(_graph.namesHash);  } else {    if (graph == null) {      throw new NullPointerException("Graph must not be null.");    }    transferNodesAndEdges(graph);    this.ambiguousTriples=graph.getAmbiguousTriples();    this.underLineTriples=graph.getUnderLines();    this.dottedUnderLineTriples=graph.getDottedUnderlines();    for (    Edge edge : graph.getEdges()) {      if (graph.isHighlighted(edge)) {        setHighlighted(edge,true);      }    }    for (    Node node : nodes) {      namesHash.put(node.getName(),node);    }  }}  }
class C{  public boolean addAll(AttributeList list){  return (super.addAll(list));}  }
class C{  public static Image resize(final Image source,final int newWidth,final int newHeight){  if (source == null) {    return null;  }  if (source.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  final Image scaledImage=new Image(source.getDevice(),newWidth,newHeight);  final GC gc=new GC(scaledImage);  gc.setAntialias(SWT.ON);  gc.setInterpolation(SWT.HIGH);  gc.drawImage(source,0,0,source.getBounds().width,source.getBounds().height,0,0,newWidth,newHeight);  gc.dispose();  return scaledImage;}  }
class C{  public void invokeVirtual(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEVIRTUAL,owner,method,false);}  }
class C{  public LSDBC(DistanceMetric dm,double alpha){  this(dm,alpha,DEFAULT_NEIGHBORS);}  }
class C{  @DSComment("View state info") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.289 -0500",hash_original_method="67B4AEAF1632FE4AAC04770D8458ACB9",hash_generated_method="8766A25A720CD31004A298C1394F1744") public boolean isCheckable(){  return getBooleanProperty(PROPERTY_CHECKABLE);}  }
class C{  public static DefUseEffect simplify(boolean hir,AbstractRegisterPool regpool,OptOptions opts,Instruction s){  DefUseEffect result;  char opcode=s.getOpcode();switch (opcode) {case GUARD_COMBINE_opcode:    result=guardCombine(s,opts);  break;case TRAP_IF_opcode:result=trapIf(s,opts);break;case NULL_CHECK_opcode:result=nullCheck(s,opts);break;case INT_ZERO_CHECK_opcode:result=intZeroCheck(s,opts);break;case LONG_ZERO_CHECK_opcode:result=longZeroCheck(s,opts);break;case CHECKCAST_opcode:result=checkcast(s,opts);break;case CHECKCAST_UNRESOLVED_opcode:result=checkcast(s,opts);break;case CHECKCAST_NOTNULL_opcode:result=checkcastNotNull(s,opts);break;case INSTANCEOF_opcode:result=instanceOf(s,opts);break;case INSTANCEOF_NOTNULL_opcode:result=instanceOfNotNull(s,opts);break;case OBJARRAY_STORE_CHECK_opcode:result=objarrayStoreCheck(s,opts);break;case OBJARRAY_STORE_CHECK_NOTNULL_opcode:result=objarrayStoreCheckNotNull(s,opts);break;case MUST_IMPLEMENT_INTERFACE_opcode:result=mustImplementInterface(s,opts);break;case INT_COND_MOVE_opcode:result=intCondMove(s,opts);break;case LONG_COND_MOVE_opcode:result=longCondMove(s,opts);break;case FLOAT_COND_MOVE_opcode:result=floatCondMove(s,opts);break;case DOUBLE_COND_MOVE_opcode:result=doubleCondMove(s,opts);break;case REF_COND_MOVE_opcode:result=refCondMove(s,opts);break;case GUARD_COND_MOVE_opcode:result=guardCondMove(s,opts);break;case BOOLEAN_NOT_opcode:result=booleanNot(s,opts);break;case BOOLEAN_CMP_INT_opcode:result=booleanCmpInt(s,opts);break;case BOOLEAN_CMP_ADDR_opcode:result=booleanCmpAddr(s,opts);break;case INT_ADD_opcode:result=intAdd(s,opts);break;case INT_AND_opcode:result=intAnd(s,opts);break;case INT_DIV_opcode:result=intDiv(regpool,s,opts);break;case INT_MUL_opcode:result=intMul(regpool,s,opts);break;case INT_NEG_opcode:result=intNeg(s,opts);break;case INT_NOT_opcode:result=intNot(s,opts);break;case INT_OR_opcode:result=intOr(s,opts);break;case INT_REM_opcode:result=intRem(s,opts);break;case INT_SHL_opcode:result=intShl(s,opts);break;case INT_SHR_opcode:result=intShr(s,opts);break;case INT_SUB_opcode:result=intSub(s,opts);break;case INT_USHR_opcode:result=intUshr(s,opts);break;case INT_XOR_opcode:result=intXor(s,opts);break;case REF_ADD_opcode:result=refAdd(s,opts);break;case REF_AND_opcode:result=refAnd(s,opts);break;case REF_SHL_opcode:result=refShl(s,opts);break;case REF_SHR_opcode:result=refShr(s,opts);break;case REF_NEG_opcode:result=refNeg(s,opts);break;case REF_NOT_opcode:result=refNot(s,opts);break;case REF_OR_opcode:result=refOr(s,opts);break;case REF_SUB_opcode:result=refSub(s,opts);break;case REF_USHR_opcode:result=refUshr(s,opts);break;case REF_XOR_opcode:result=refXor(s,opts);break;case LONG_ADD_opcode:result=longAdd(s,opts);break;case LONG_AND_opcode:result=longAnd(s,opts);break;case LONG_CMP_opcode:result=longCmp(s,opts);break;case LONG_DIV_opcode:result=longDiv(s,opts);break;case LONG_MUL_opcode:result=longMul(regpool,s,opts);break;case LONG_NEG_opcode:result=longNeg(s,opts);break;case LONG_NOT_opcode:result=longNot(s,opts);break;case LONG_OR_opcode:result=longOr(s,opts);break;case LONG_REM_opcode:result=longRem(s,opts);break;case LONG_SHL_opcode:result=longShl(s,opts);break;case LONG_SHR_opcode:result=longShr(s,opts);break;case LONG_SUB_opcode:result=longSub(s,opts);break;case LONG_USHR_opcode:result=longUshr(s,opts);break;case LONG_XOR_opcode:result=longXor(s,opts);break;case FLOAT_ADD_opcode:result=floatAdd(s,opts);break;case FLOAT_CMPG_opcode:result=floatCmpg(s,opts);break;case FLOAT_CMPL_opcode:result=floatCmpl(s,opts);break;case FLOAT_DIV_opcode:result=floatDiv(s,opts);break;case FLOAT_MUL_opcode:result=floatMul(s,opts);break;case FLOAT_NEG_opcode:result=floatNeg(s,opts);break;case FLOAT_REM_opcode:result=floatRem(s,opts);break;case FLOAT_SUB_opcode:result=floatSub(s,opts);break;case FLOAT_SQRT_opcode:result=floatSqrt(s,opts);break;case DOUBLE_ADD_opcode:result=doubleAdd(s,opts);break;case DOUBLE_CMPG_opcode:result=doubleCmpg(s,opts);break;case DOUBLE_CMPL_opcode:result=doubleCmpl(s,opts);break;case DOUBLE_DIV_opcode:result=doubleDiv(s,opts);break;case DOUBLE_MUL_opcode:result=doubleMul(s,opts);break;case DOUBLE_NEG_opcode:result=doubleNeg(s,opts);break;case DOUBLE_REM_opcode:result=doubleRem(s,opts);break;case DOUBLE_SUB_opcode:result=doubleSub(s,opts);break;case DOUBLE_SQRT_opcode:result=doubleSqrt(s,opts);break;case DOUBLE_2FLOAT_opcode:result=double2Float(s,opts);break;case DOUBLE_2INT_opcode:result=double2Int(s,opts);break;case DOUBLE_2LONG_opcode:result=double2Long(s,opts);break;case DOUBLE_AS_LONG_BITS_opcode:result=doubleAsLongBits(s,opts);break;case INT_2DOUBLE_opcode:result=int2Double(s,opts);break;case INT_2BYTE_opcode:result=int2Byte(s,opts);break;case INT_2USHORT_opcode:result=int2UShort(s,opts);break;case INT_2FLOAT_opcode:result=int2Float(s,opts);break;case INT_2LONG_opcode:result=int2Long(s,opts);break;case INT_2ADDRSigExt_opcode:result=int2AddrSigExt(s,opts);break;case INT_2ADDRZerExt_opcode:result=int2AddrZerExt(s,opts);break;case LONG_2ADDR_opcode:result=long2Addr(s,opts);break;case INT_2SHORT_opcode:result=int2Short(s,opts);break;case INT_BITS_AS_FLOAT_opcode:result=intBitsAsFloat(s,opts);break;case ADDR_2INT_opcode:result=addr2Int(s,opts);break;case ADDR_2LONG_opcode:result=addr2Long(s,opts);break;case FLOAT_2DOUBLE_opcode:result=float2Double(s,opts);break;case FLOAT_2INT_opcode:result=float2Int(s,opts);break;case FLOAT_2LONG_opcode:result=float2Long(s,opts);break;case FLOAT_AS_INT_BITS_opcode:result=floatAsIntBits(s,opts);break;case LONG_2FLOAT_opcode:result=long2Float(s,opts);break;case LONG_2INT_opcode:result=long2Int(s,opts);break;case LONG_2DOUBLE_opcode:result=long2Double(s,opts);break;case LONG_BITS_AS_DOUBLE_opcode:result=longBitsAsDouble(s,opts);break;case ARRAYLENGTH_opcode:result=arrayLength(s,opts);break;case BOUNDS_CHECK_opcode:result=boundsCheck(s,opts);break;case CALL_opcode:result=call(hir,regpool,s,opts);break;case GETFIELD_opcode:result=getField(s,opts);break;case GET_OBJ_TIB_opcode:result=getObjTib(s,opts);break;case GET_CLASS_TIB_opcode:result=getClassTib(s,opts);break;case GET_TYPE_FROM_TIB_opcode:result=getTypeFromTib(s,opts);break;case GET_ARRAY_ELEMENT_TIB_FROM_TIB_opcode:result=getArrayElementTibFromTib(s,opts);break;case GET_SUPERCLASS_IDS_FROM_TIB_opcode:result=getSuperclassIdsFromTib(s,opts);break;case GET_DOES_IMPLEMENT_FROM_TIB_opcode:result=getDoesImplementFromTib(s,opts);break;case REF_LOAD_opcode:result=refLoad(s,opts);break;default :result=DefUseEffect.UNCHANGED;}if (VM.VerifyAssertions) {switch (result) {case MOVE_FOLDED:boolean moveHasConstantRHS=Move.conforms(s) && (Move.getVal(s) instanceof ConstantOperand);if (!moveHasConstantRHS) {String msg="RHS of move " + s + " should be constant during simplification of "+ s.operator();VM._assert(VM.NOT_REACHED,msg);}break;case MOVE_REDUCED:boolean moveHasNonConstantRHS=Move.conforms(s) && !(Move.getVal(s) instanceof ConstantOperand);if (!moveHasNonConstantRHS) {String msg="RHS of move " + s + " shouldn't be constant during simplification of "+ s.operator();VM._assert(moveHasNonConstantRHS,msg);}break;default :}}return result;}  }
class C{  private Map<String,ExecutableElement> makeSetterMap(Map<ExecutableElement,String> getterToPropertyName){  Map<String,TypeMirror> getterMap=new TreeMap<String,TypeMirror>();  for (  Map.Entry<ExecutableElement,String> entry : getterToPropertyName.entrySet()) {    getterMap.put(entry.getValue(),entry.getKey().getReturnType());  }  Map<String,ExecutableElement> noPrefixMap=Maps.newLinkedHashMap();  Map<String,ExecutableElement> prefixMap=Maps.newLinkedHashMap();  boolean ok=true;  for (  ExecutableElement setter : setters) {    Map<String,ExecutableElement> map=noPrefixMap;    String name=setter.getSimpleName().toString();    TypeMirror type=getterMap.get(name);    if (type == null && name.startsWith("set")) {      name=Introspector.decapitalize(name.substring(3));      type=getterMap.get(name);      map=prefixMap;    }    if (type == null) {      errorReporter.reportError("Method does not correspond to a property of " + autoValueClass,setter);      ok=false;    } else {      VariableElement parameter=Iterables.getOnlyElement(setter.getParameters());      if (TYPE_EQUIVALENCE.equivalent(type,parameter.asType())) {        getterMap.remove(name);        map.put(name,setter);      } else {        errorReporter.reportError("Parameter type should be " + type,parameter);        ok=false;      }    }  }  if (!ok) {    return null;  }  boolean prefixing=!prefixMap.isEmpty();  if (prefixing && !noPrefixMap.isEmpty()) {    errorReporter.reportError("If any setter methods use the setFoo convention then all must",noPrefixMap.values().iterator().next());    return null;  }  if (!getterMap.isEmpty()) {    for (    Map.Entry<String,TypeMirror> entry : getterMap.entrySet()) {      String setterName=prefixing ? prefixWithSet(entry.getKey()) : entry.getKey();      String error=String.format("Expected a method with this signature: %s%s %s(%s)",builderTypeElement,TypeSimplifier.actualTypeParametersString(builderTypeElement),setterName,entry.getValue());      errorReporter.reportError(error,builderTypeElement);    }    return null;  }  return noPrefixMap.isEmpty() ? prefixMap : noPrefixMap;}  }
class C{  public static Query wrap(Random random,Query query){  return query instanceof AssertingQuery ? query : new AssertingQuery(random,query);}  }
class C{  @Override public void run(){  amIActive=true;  try {    String inputFilesString=null;    String sagaHeaderFile=null;    String sagaDataFile=null;    String whiteboxHeaderFile=null;    String whiteboxDataFile=null;    WhiteboxRaster output=null;    int i=0;    int row, col, rows, cols;    String[] imageFiles;    int numImages=0;    double noData=-32768;    int progress=0;    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      sagaHeaderFile=whiteboxHeaderFile.replace(".dep",".sgrd");      sagaDataFile=whiteboxHeaderFile.replace(".dep",".sdat");      (new File(sagaHeaderFile)).delete();      (new File(sagaDataFile)).delete();      WhiteboxRaster.DataType dataType;      if (wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (wbr.getDataType() == WhiteboxRaster.DataType.INTEGER) {        dataType=WhiteboxRaster.DataType.INTEGER;      } else {        dataType=WhiteboxRaster.DataType.BYTE;      }      output=new WhiteboxRaster(whiteboxHeaderFile.replace(".dep","_temp.dep"),"rw",whiteboxHeaderFile,dataType,noData);      output.setNoDataValue(noData);      whiteboxDataFile=whiteboxHeaderFile.replace(".dep","_temp.tas");      double[] data=null;      for (row=0; row < rows; row++) {        data=wbr.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            output.setValue(rows - row - 1,col,data[col]);          } else {            output.setValue(rows - row - 1,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(progress);      }      output.close();      File dataFile=new File(whiteboxDataFile);      File sagaFile=new File(sagaDataFile);      dataFile.renameTo(sagaFile);      if (!createHeaderFile(wbr,sagaHeaderFile)) {        showFeedback("SAGA header file was not written properly. " + "Tool failed to export");        return;      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }    showFeedback("Operation complete!");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void registerConfigurationCapability(String containerId,ContainerType containerType,ConfigurationType configurationType,String configurationCapabilityClass){  registerImplementation(new RegistrationKey(new FullContainerIdentity(containerId,containerType),configurationType.getType()),configurationCapabilityClass);}  }
class C{  public boolean isAccessor(){  return (Objects.equal(this.getMemberType(),MemberType.SETTER) || Objects.equal(this.getMemberType(),MemberType.GETTER));}  }
class C{  @Override protected void buildActions(final List<String> list){  list.add(ActionType.LOOK_CLOSELY.getRepresentation());  super.buildActions(list);  list.remove(ActionType.LOOK.getRepresentation());  list.remove(ActionType.READ.getRepresentation());}  }
class C{  public boolean isLeaf(){  return leaf;}  }
class C{  public static void writeShort(byte[] memory,int index,short value){  memory[index + 0]=(byte)((value >> (8 * 1)) & 0xFF);  memory[index + 1]=(byte)(value & 0xFF);}  }
class C{  public boolean isExternalIdAlreadyTaken(String externalId){  return resourceDao.isExternalIdAlreadyTaken(externalId);}  }
class C{  public VorbisBitArray(byte[] data){  this(data,data.length);}  }
class C{  public static void printCoverage(){  LoggingUtils.getEvoLogger().info("* Time spent optimizing covered goals analysis: " + DefUseExecutionTraceAnalyzer.timeGetCoveredGoals + "ms");  Map<DefUsePairType,Integer> totalGoals=initTotalGoals();  for (  DefUsePairType type : DefUseCoverageTestFitness.DefUsePairType.values()) {    LoggingUtils.getEvoLogger().info("* Covered goals of type " + type + ": "+ mostCoveredGoals.get(type)+ " / "+ totalGoals.get(type));    for (    DefUseCoverageTestFitness pair : getPairsOfType(type)) {      if (pair.isCovered()) {        LoggingUtils.getEvoLogger().info("*(X) " + pair.toString());      } else {        LoggingUtils.getEvoLogger().info("*( ) " + pair.toString());      }    }  }  LoggingUtils.getEvoLogger().info("* Covered " + countMostCoveredGoals() + "/"+ countGoalsIn(totalGoals)+ " goals");}  }
class C{  public Command prepareLocal(String sql){  if (closed) {    throw DbException.get(ErrorCode.CONNECTION_BROKEN_1,"session closed");  }  Command command;  if (queryCacheSize > 0) {    if (queryCache == null) {      queryCache=SmallLRUCache.newInstance(queryCacheSize);    } else {      command=queryCache.get(sql);      if (command != null && command.canReuse()) {        command.reuse();        return command;      }    }  }  Parser parser=new Parser(this);  command=parser.prepareCommand(sql);  if (queryCache != null) {    if (command.isCacheable()) {      queryCache.put(sql,command);    }  }  return command;}  }
class C{  public void testBug78961() throws Exception {  createProcedure("testBug78961","(IN c1 FLOAT, IN c2 FLOAT, OUT h FLOAT, INOUT t FLOAT) BEGIN SET h = SQRT(c1 * c1 + c2 * c2); SET t = t + h; END;");  Connection highLevelConn=getLoadBalancedConnection(null);  assertTrue(highLevelConn.getClass().getName().startsWith("com.sun.proxy") || highLevelConn.getClass().getName().startsWith("$Proxy"));  Connection lowLevelConn=getMasterSlaveReplicationConnection(null);  ((ReplicationConnection)lowLevelConn).setProxy((MySQLConnection)highLevelConn);  CallableStatement cstmt=lowLevelConn.prepareCall("{CALL testBug78961 (?, ?, ?, ?)}");  cstmt.setFloat(1,3.0f);  cstmt.setFloat(2,4.0f);  cstmt.setFloat(4,5.0f);  cstmt.registerOutParameter(3,Types.FLOAT);  cstmt.registerOutParameter(4,Types.FLOAT);  cstmt.execute();  assertEquals(5.0f,cstmt.getFloat(3));  assertEquals(10.0f,cstmt.getFloat(4));}  }
class C{  public SHACLARQFunction(SHFunction shaclFunction){  this.shaclFunction=shaclFunction;  this.cachable=shaclFunction.hasProperty(DASH.cachable,JenaDatatypes.TRUE);  try {    queryString=shaclFunction.getSPARQL();    arqQuery=ARQFactory.get().createQuery(shaclFunction.getModel(),queryString);  } catch (  Exception ex) {    throw new IllegalArgumentException("Function " + shaclFunction.getURI() + " does not define a valid body",ex);  }  if (!arqQuery.isAskType() && !arqQuery.isSelectType()) {    throw new ExprEvalException("Body must be ASK or SELECT query");  }  addParameters(shaclFunction);}  }
class C{  public static boolean isMask(int value,int mask){  if ((value & mask) < mask) {    return false;  }  return true;}  }
class C{  public static float calculateLeft(float top,float right,float bottom,float targetAspectRatio){  final float height=bottom - top;  final float left=right - (targetAspectRatio * height);  return left;}  }
class C{  Map.Entry<K,V> doRemoveFirstEntry(){  for (; ; ) {    Node<K,V> b=head.node;    Node<K,V> n=b.next;    if (n == null)     return null;    Node<K,V> f=n.next;    if (n != b.next)     continue;    Object v=n.value;    if (v == null) {      n.helpDelete(b,f);      continue;    }    if (!n.casValue(v,null))     continue;    if (!n.appendMarker(f) || !b.casNext(n,f))     findFirst();    clearIndexToFirst();    return new AbstractMap.SimpleImmutableEntry<K,V>(n.key,(V)v);  }}  }
class C{  public Item peek(){  if (isEmpty())   throw new NoSuchElementException("Queue underflow");  return q[first];}  }
class C{  @SuppressWarnings("purity") private static boolean isRegex(String s){  try {    Pattern.compile(s);  } catch (  PatternSyntaxException e) {    return false;  }  return true;}  }
class C{  public void testLoadStore02() throws Exception {  assertTrue(NotSupportMsg,KSSupported);  KeyStore[] kss=createKS();  assertNotNull("KeyStore objects were not created",kss);  for (int i=0; i < kss.length; i++) {    try {      kss[i].load(null);      fail("IOException or IllegalArgumentException should be thrown for null parameter");    } catch (    IOException e) {    }catch (    IllegalArgumentException e) {    }    kss[i].load(null,null);    try {      kss[i].store(null);      fail("IOException or IllegalArgumentException should be thrown for null parameter");    } catch (    IOException e) {    }catch (    IllegalArgumentException e) {    }  }  KeyStore.LoadStoreParameter lParam=new MyLoadStoreParams(new KeyStore.PasswordProtection(new char[0]));  for (int i=0; i < kss.length; i++) {    kss[i].load(lParam);    assertEquals("Incorrect result",kss[i].size(),0);    kss[i].store(lParam);  }}  }
class C{  public PLRange(){  this(0.0f,0.0f);}  }
class C{  public ArrayList<Tuple<String,String>> exportStopOffsetsForMatsim(){  ArrayList<Tuple<String,String>> result=new ArrayList<Tuple<String,String>>();  return result;}  }
class C{  public Switch(Context context){  this(context,null);}  }
class C{  QueuedOperation toFarSideQueuedOp(Object key){  Operation operation=getFarSideOperation();  byte[] valueBytes=null;  byte deserializationPolicy=DistributedCacheOperation.DESERIALIZATION_POLICY_NONE;  if (!operation.isDestroy() && !operation.isInvalidate()) {    Object v=getPendingValue();    if (v == null || v instanceof byte[]) {      valueBytes=(byte[])v;    } else {      deserializationPolicy=DistributedCacheOperation.DESERIALIZATION_POLICY_LAZY;      valueBytes=EntryEventImpl.serialize(v);    }  }  return new QueuedOperation(operation,key,valueBytes,null,deserializationPolicy,null);}  }
class C{  public CreateSessionResponse CreateSession(RequestHeader RequestHeader,ApplicationDescription ClientDescription,String ServerUri,String EndpointUrl,String SessionName,byte[] ClientNonce,byte[] ClientCertificate,Double RequestedSessionTimeout,UnsignedInteger MaxResponseMessageSize) throws ServiceFaultException, ServiceResultException {  CreateSessionRequest req=new CreateSessionRequest(RequestHeader,ClientDescription,ServerUri,EndpointUrl,SessionName,ClientNonce,ClientCertificate,RequestedSessionTimeout,MaxResponseMessageSize);  return (CreateSessionResponse)channel.serviceRequest(req);}  }
class C{  public Label(){}  }
class C{  @TargetApi(8) public Bundler putCharSequenceArrayList(String key,ArrayList<CharSequence> value){  bundle.putCharSequenceArrayList(key,value);  return this;}  }
class C{  public static void RESTORE_XERROR_HANDLER(){  XSync();  current_error_handler=null;}  }
class C{  public Composer call(AnimCallBack callBack){  if (!mTweenParameterList.isEmpty()) {    mTweenParameterList.get(mTweenParameterList.size() - 1).callBack=callBack;  }  return this;}  }
class C{  public ClassClassPath(Class c){  thisClass=c;}  }
class C{  public String longestMatch(String input){  TrieNode node=root;  String result=null;  for (int i=input.length() - 1; i >= 0; i--) {    node=node.getChild(input.charAt(i));    if (node == null)     break;    if (node.isTerminal())     result=input.substring(i);  }  return result;}  }
class C{  public WaferMapDataset(int maxChipX,int maxChipY){  this(maxChipX,maxChipY,null);}  }
class C{  @Override public boolean wasResized(){  return false;}  }
class C{  public boolean isMaxXSet(int scale){  return mMaxX[scale] != -MathHelper.NULL_VALUE;}  }
class C{  private static void validate(int hours,int minutes,int seconds){  if (hours < -18 || hours > 18) {    throw new DateTimeException("Zone offset hours not in valid range: value " + hours + " is not in the range -18 to 18");  }  if (hours > 0) {    if (minutes < 0 || seconds < 0) {      throw new DateTimeException("Zone offset minutes and seconds must be positive because hours is positive");    }  } else   if (hours < 0) {    if (minutes > 0 || seconds > 0) {      throw new DateTimeException("Zone offset minutes and seconds must be negative because hours is negative");    }  } else   if ((minutes > 0 && seconds < 0) || (minutes < 0 && seconds > 0)) {    throw new DateTimeException("Zone offset minutes and seconds must have the same sign");  }  if (Math.abs(minutes) > 59) {    throw new DateTimeException("Zone offset minutes not in valid range: abs(value) " + Math.abs(minutes) + " is not in the range 0 to 59");  }  if (Math.abs(seconds) > 59) {    throw new DateTimeException("Zone offset seconds not in valid range: abs(value) " + Math.abs(seconds) + " is not in the range 0 to 59");  }  if (Math.abs(hours) == 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {    throw new DateTimeException("Zone offset not in valid range: -18:00 to +18:00");  }}  }
class C{  public ECKey(@Nullable BigInteger privKey,@Nullable byte[] pubKey,boolean compressed){  if (privKey == null && pubKey == null)   throw new IllegalArgumentException("ECKey requires at least private or public key");  this.priv=privKey;  this.pub=null;  if (pubKey == null) {    this.pub=publicKeyFromPrivate(privKey,compressed);  } else {    this.pub=pubKey;  }}  }
class C{  public String sqlObjectDetail_renameColumn(String vendorName,String catalogName,String schemaName,String tableName,String columnName,String newName){  columnName=normalizeColumnName(vendorName,columnName);  newName=normalizeColumnName(vendorName,newName);  return m_interfaces.get(getDBVendorID(vendorName)).sqlObjectDetail_renameColumn(catalogName,schemaName,tableName,columnName,newName);}  }
class C{  private void addCharacters(final Map<String,RPObject> characters){  for (  Entry<String,RPObject> character : characters.entrySet()) {    JButton button=createCharacterButton(character.getKey(),character.getValue());    characterPanel.add(button);  }}  }
class C{  private void checkDuplicateNamesDuringDelete(List<Integer> ids){  ArrayList<Entity> myEntities=game.getPlayerEntities(game.getPlayer(localPlayerNumber),false);  Hashtable<String,ArrayList<Integer>> rawNameToId=new Hashtable<String,ArrayList<Integer>>((int)(myEntities.size() * 1.26));  for (  Entity e : myEntities) {    String rawName=e.getShortNameRaw();    ArrayList<Integer> namedIds=rawNameToId.get(rawName);    if (namedIds == null) {      namedIds=new ArrayList<Integer>();    }    namedIds.add(e.getId());    rawNameToId.put(rawName,namedIds);  }  for (  int id : ids) {    Entity removedEntity=game.getEntity(id);    if (removedEntity == null) {      continue;    }    String removedRawName=removedEntity.getShortNameRaw();    Integer count=duplicateNameHash.get(removedEntity.getShortNameRaw());    if ((count != null) && (count > 1)) {      ArrayList<Integer> namedIds=rawNameToId.get(removedRawName);      for (      Integer i : namedIds) {        Entity e=game.getEntity(i);        String eRawName=e.getShortNameRaw();        if (eRawName.equals(removedRawName) && (e.duplicateMarker > removedEntity.duplicateMarker)) {          e.duplicateMarker--;          e.generateShortName();          e.generateDisplayName();          if (!ids.contains(e.getId())) {            sendUpdateEntity(e);          }        }      }      duplicateNameHash.put(removedEntity.getShortNameRaw(),new Integer(count - 1));    } else     if (count != null) {      duplicateNameHash.remove(removedEntity.getShortNameRaw());    }  }}  }
class C{  private void finalizeAdditions(boolean addHomeScreenShortcuts){  finalizeWorkFolder();  if (addHomeScreenShortcuts && !mHomescreenApps.isEmpty()) {    sortList(mHomescreenApps);    mModel.addAndBindAddedWorkspaceItems(mContext,mHomescreenApps);  }}  }
class C{  public static Text valueOf(CharSequence csq){  if (csq instanceof Text)   return (Text)csq;  return Text.valueOf(csq.toString());}  }
class C{  public static SignerInformation replaceUnsignedAttributes(SignerInformation signerInformation,AttributeTable unsignedAttributes){  SignerInfo sInfo=signerInformation.info;  ASN1Set unsignedAttr=null;  if (unsignedAttributes != null) {    unsignedAttr=new DERSet(unsignedAttributes.toASN1EncodableVector());  }  return new SignerInformation(new SignerInfo(sInfo.getSID(),sInfo.getDigestAlgorithm(),sInfo.getAuthenticatedAttributes(),sInfo.getDigestEncryptionAlgorithm(),sInfo.getEncryptedDigest(),unsignedAttr),signerInformation.contentType,signerInformation.content,null);}  }
class C{  protected boolean isSymbolDialogKey(int keyCode){  return keyCode == defaultSymbolDialogKey;}  }
class C{  public static PathPoint lineTo(float x,float y){  return new PathPoint(LINE,x,y);}  }
class C{  void configureDetallePrevision(PrevisionVO prevision,DetallePrevisionVO detallePrevision){  detallePrevision.setPuedeSerEliminado(puedeSerEliminado(prevision,detallePrevision));  detallePrevision.setPuedeSerEditado(puedeSerModificado(prevision,detallePrevision));}  }
class C{  public void verifyPunctuationLeftAssociation(Token left,Token right,Token punc,String puncStr){  Location puncLocation=ListenerUtil.getTokenLocation(punc);  verifyPunctuationLeftAssociation(left,punc,puncStr);  if (checkRightSpaces(right,punc,1)) {    printer.error(rule,puncStr + Messages.AT_COLUMN + puncLocation.column+ " "+ Messages.SPACE_AFTER,puncLocation);  }}  }
class C{  private void generate(SubscriptionAttributes attrs) throws SAXException {  if (attrs == null) {    return;  }  String interestString=null;  InterestPolicy ip=attrs.getInterestPolicy();  AttributesImpl atts=new AttributesImpl();  if (ip.isAll()) {    interestString=ALL;  } else   if (ip.isCacheContent()) {    interestString=CACHE_CONTENT;  } else {    throw new InternalGemFireException(LocalizedStrings.CacheXmlGenerator_UNKNOWN_INTERESTPOLICY_0.toLocalizedString(ip));  }  atts.addAttribute("","",INTEREST_POLICY,"",interestString);  handler.startElement("",SUBSCRIPTION_ATTRIBUTES,SUBSCRIPTION_ATTRIBUTES,atts);  handler.endElement("",SUBSCRIPTION_ATTRIBUTES,SUBSCRIPTION_ATTRIBUTES);}  }
class C{  public void startMonitorServices(Activity activity,IRcsActivityFinishable iFinishable,RcsServiceName... services){  mClientsToNotify.put(activity,new ClientConnectionNotifier(iFinishable,services));}  }
class C{  private boolean isParentMaximum(){  if (rootParent instanceof JFrame) {    return (((JFrame)rootParent).getExtendedState() & Frame.MAXIMIZED_BOTH) != 0;  } else {    return false;  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Connection)) {    return false;  }  Connection c=(Connection)o;  return clientHandle.equals(c.clientHandle);}  }
class C{  @Override protected void process(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (request.getCharacterEncoding() == null) {    request.setCharacterEncoding("UTF-8");  }  response.setHeader("Cache-Control","no-cache, no-store, must-revalidate");  response.setHeader("Pragma","no-cache");  final String locale=request.getParameter(REQUEST_PARAM_LOCALE);  if (emptyString(locale)) {    errorForward(request,response,"Please enter a valid locale.");    return;  }  Map<ContextKey,ContextValue<?>> context=evaluateServicePmContext(request);  if (context != null) {    PriceModel priceModel=getPriceModel(context,createLocaleSet(SUPPORTED_LOCALES));    if (priceModel == null) {      errorForward(request,response,"Price model not found.");      return;    }    PriceModelContent priceModelContent=getPriceModelContent(priceModel,new Locale(locale));    if (priceModelContent != null) {      if (!generatePdfResponse(priceModelContent,generateServicePmFileName(context),response)) {        errorForward(request,response,"Price model found but its file type was not supported.");      }    } else {      errorForward(request,response,"Price model neither found for specified locale nor for default locale.");    }  } else {    errorForward(request,response,"Please enter all required fields.");  }}  }
class C{  private boolean scrollAndFocus(int direction,int top,int bottom){  boolean handled=true;  int height=getHeight();  int containerTop=getScrollY();  int containerBottom=containerTop + height;  boolean up=direction == View.FOCUS_UP;  View newFocused=findFocusableViewInBoundsY(up,top,bottom);  if (newFocused == null) {    newFocused=this;  }  if (top >= containerTop && bottom <= containerBottom) {    handled=false;  } else {    int delta=up ? (top - containerTop) : (bottom - containerBottom);    doScrollY(delta);  }  if (newFocused != findFocus() && newFocused.requestFocus(direction)) {    mScrollViewMovedFocus=true;    mScrollViewMovedFocus=false;  }  return handled;}  }
class C{  public LBHttpSolrServer(HttpClient httpClient,ResponseParser parser,String... solrServerUrl){  clientIsInternal=(httpClient == null);  this.parser=parser;  if (httpClient == null) {    ModifiableSolrParams params=new ModifiableSolrParams();    params.set(HttpClientUtil.PROP_USE_RETRY,false);    this.httpClient=HttpClientUtil.createClient(params);  } else {    this.httpClient=httpClient;  }  for (  String s : solrServerUrl) {    ServerWrapper wrapper=new ServerWrapper(makeServer(s));    aliveServers.put(wrapper.getKey(),wrapper);  }  updateAliveList();}  }
class C{  public HITS(Graph<V,E> g,Function<E,Double> edge_weights,double alpha){  super(g,edge_weights,ScoringUtils.getHITSUniformRootPrior(g.getVertices()),alpha);}  }
class C{  public static Plan selectRandomSegment(List<Plan> list){  return list.get(MatsimRandom.getLocalInstance().nextInt(list.size()));}  }
class C{  public void deleteRow(int selectedRow){  String name=(String)this.getValueAt(selectedRow,0);  for (  final Aspect element : getData().getAspect()) {    if (CoreUtils.nullSafeComparator(((CodeType)element).getName(),name) == 0) {      getData().remove(element);      getData().setDirty(true);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsDaoObjPermRecOwner[");  buffer.append("m_ownerType = ").append(m_ownerType);  buffer.append(", m_ownerId = ").append(m_ownerId);  buffer.append("]");  return buffer.toString();}  }
class C{  public void dispose(){  surfaceData=NullSurfaceData.theInstance;  invalidatePipe();}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public UnixNumericUserPrincipal(String name){  if (name == null) {    java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("invalid.null.input.value","sun.security.util.AuthResources"));    Object[] source={"name"};    throw new NullPointerException(form.format(source));  }  this.name=name;}  }
class C{  static void checkK(int k){  if ((k < 1) || (k >= (1 << 16)) || !isPowerOf2(k)) {    throw new SketchesArgumentException("K must be > 0 and < 65536");  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILES\"";  db.execSQL(sql);}  }
class C{  public void hide(){  if (mIsHiding || getVisibility() != VISIBLE) {    return;  }  if (!ViewCompat.isLaidOut(this)) {    setVisibility(GONE);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    hideIceCreamSandwich();  } else {    hideEclairMr1();  }}  }
class C{  public void paintScrollBarThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public Axis A(Axis a) throws ScopeException, ComputingException, InterruptedException {  if (!a.getParent().getRoot().equals(getDomain())) {    throw new ScopeException("the Axis '" + a.prettyPrint() + "'is incompatible with that Space '"+ prettyPrint()+ "'");  }  Space x=relink(a.getParent());  return relink(x,a.prune());}  }
class C{  public static void fill(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  protected Link findLink(final CommandRequest command){  List<Link> linksFound=new ArrayList<>(getLinkIndex().size());  for (  Link link : getLinkIndex()) {    if (command.getInput().startsWith(link.getRelation())) {      linksFound.add(link);    }  }  if (linksFound.isEmpty()) {    throw new RestApiCallForCommandNotFoundException(String.format("No REST API call for command (%1$s) was found!",command.getInput()));  }  return (linksFound.size() > 1 ? resolveLink(command,linksFound) : linksFound.get(0));}  }
class C{  private double cost(final List<Link> path,final TravelDisutility linkCost){  double result=0.0;  double time_s=this.startTime_s;  for (  Link link : path) {    result+=linkCost.getLinkTravelDisutility(link,time_s,null,null);    time_s+=this.linkTTs.getLinkTravelTime(link,time_s,null,null);  }  return result;}  }
class C{  public static Unsigned roundUp(Unsigned that,Unsigned multiple){  return UnsignedUtils.roundDown(that.add(multiple.subtract(1)),multiple);}  }
class C{  public FieldTypeLookup copyAndAddAll(Collection<FieldMapper> newFieldMappers){  CopyOnWriteHashMap<String,MappedFieldTypeReference> fullName=this.fullNameToFieldType;  CopyOnWriteHashMap<String,MappedFieldTypeReference> indexName=this.indexNameToFieldType;  for (  FieldMapper fieldMapper : newFieldMappers) {    MappedFieldType fieldType=fieldMapper.fieldType();    MappedFieldTypeReference fullNameRef=fullName.get(fieldType.names().fullName());    MappedFieldTypeReference indexNameRef=indexName.get(fieldType.names().indexName());    if (fullNameRef == null && indexNameRef == null) {      fullName=fullName.copyAndPut(fieldType.names().fullName(),fieldMapper.fieldTypeReference());      indexName=indexName.copyAndPut(fieldType.names().indexName(),fieldMapper.fieldTypeReference());    } else     if (fullNameRef == null) {      fullName=fullName.copyAndPut(fieldType.names().fullName(),indexNameRef);      indexNameRef.set(fieldMapper.fieldType());      fieldMapper.setFieldTypeReference(indexNameRef);    } else     if (indexNameRef == null) {      indexName=indexName.copyAndPut(fieldType.names().indexName(),fullNameRef);      fullNameRef.set(fieldMapper.fieldType());      fieldMapper.setFieldTypeReference(fullNameRef);    } else     if (fullNameRef == indexNameRef) {      fullNameRef.set(fieldMapper.fieldType());      fieldMapper.setFieldTypeReference(fullNameRef);    } else {      throw new IllegalStateException("insane mappings found. field " + fieldType.names().fullName() + " maps across types to field "+ fieldType.names().indexName());    }  }  return new FieldTypeLookup(fullName,indexName);}  }
class C{  public Heap(E[] objects,Comparator<? super E> comparator){  this.comparator=comparator;  for (int i=0; i < objects.length; i++) {    add(objects[i]);  }}  }
class C{  public static File leftShift(File file,byte[] bytes) throws IOException {  append(file,bytes);  return file;}  }
class C{  public PlayerMapAdapter(Player player){  this.player=player;}  }
class C{  public int match(Uri uri){  final List<String> pathSegments=uri.getPathSegments();  final int li=pathSegments.size();  UriMatcher node=this;  if (li == 0 && uri.getAuthority() == null) {    return this.mCode;  }  for (int i=-1; i < li; i++) {    String u=i < 0 ? uri.getAuthority() : pathSegments.get(i);    ArrayList<UriMatcher> list=node.mChildren;    if (list == null) {      break;    }    node=null;    int lj=list.size();    for (int j=0; j < lj; j++) {      UriMatcher n=list.get(j);      which_switch: switch (n.mWhich) {case EXACT:        if (n.mText.equals(u)) {          node=n;        }      break;case NUMBER:    int lk=u.length();  for (int k=0; k < lk; k++) {    char c=u.charAt(k);    if (c < '0' || c > '9') {      break which_switch;    }  }node=n;break;case TEXT:node=n;break;}if (node != null) {break;}}if (node == null) {return NO_MATCH;}}return node.mCode;}  }
class C{  public void schedule(String poolName,String serviceName,String dataId,long startTime) throws JobManagerException {  schedule(null,poolName,serviceName,dataId,startTime,-1,0,1,0,-1);}  }
class C{  private void dispatchMessage(OFMessage m){  this.switchManager.handleMessage(this.sw,m,null);}  }
class C{  public TFloatIntHashMap(int initialCapacity,TFloatHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public void init(){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.promptChange"),PROMPT);  try {    sendWaitFor(command,defaultTimeout,prompts,buf);  } catch (  NetworkDeviceControllerException e) {    log.error("timeout when trying to connect to image server: {}",e.getMessage());    log.info("let's retry");    sendWaitFor(command,defaultTimeout / 2,prompts,buf);    log.info("retry worked");  }  command=String.format(ImageServerDialogProperties.getString("cmd.termLength"),1000);  sendWaitFor(command,defaultTimeout,prompts,buf);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static String serialize(Node node){  return serialize(asString(node));}  }
class C{  public static Graph scan(Object o,boolean trace){  if (o == null) {    return null;  }  if (Graph.class.equals(o.getClass())) {    return (Graph)o;  }  Graph graph=new Graph(false,trace);  Node origin=graph.expandReactiveSate(o,null);  graph.addUpstream(origin,null);  graph.addDownstream(origin,null);  return graph;}  }
class C{  public boolean closeKeyStore(KeyStoreHistory history){  KeyStoreState currentState=history.getCurrentState();  if (needSave(currentState)) {    kseFrame.focusOnKeyStore(currentState.getKeyStore());    int wantSave=wantSave(history);    if (wantSave == JOptionPane.YES_OPTION) {      boolean saved=saveKeyStore(history);      if (!saved) {        return false;      }      currentState=history.getCurrentState();    } else     if ((wantSave == JOptionPane.CANCEL_OPTION) || (wantSave == JOptionPane.CLOSED_OPTION)) {      return false;    }  }  kseFrame.removeKeyStore(currentState.getKeyStore());  kseFrame.updateControls(true);  return true;}  }
class C{  public PolyphaseFIRInterpolatingFilter(double[] coefficients,int interpolation){  assert (coefficients.length % interpolation == 0);  mTaps=coefficients;  mPhases=new Phase[interpolation];  int phaseSize=coefficients.length / interpolation;  mBuffer=new double[phaseSize];  for (int x=0; x < interpolation; x++) {    int coefficientIndex=0;    int[] indexes=new int[phaseSize];    for (int y=x; y < coefficients.length; y+=interpolation) {      indexes[coefficientIndex++]=y;    }    mPhases[interpolation - x - 1]=new Phase(indexes,interpolation);  }}  }
class C{  private void initialize(URI p_base,String p_uriSpec) throws MalformedURIException {  if (p_base == null && (p_uriSpec == null || p_uriSpec.trim().length() == 0)) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CANNOT_INIT_URI_EMPTY_PARMS,null));  }  if (p_uriSpec == null || p_uriSpec.trim().length() == 0) {    initialize(p_base);    return;  }  String uriSpec=p_uriSpec.trim();  int uriSpecLen=uriSpec.length();  int index=0;  int colonIndex=uriSpec.indexOf(':');  if (colonIndex < 0) {    if (p_base == null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_SCHEME_IN_URI,new Object[]{uriSpec}));    }  } else {    initializeScheme(uriSpec);    uriSpec=uriSpec.substring(colonIndex + 1);    if (m_scheme != null && p_base != null) {      if (uriSpec.startsWith("/") || !m_scheme.equals(p_base.m_scheme) || !p_base.getSchemeSpecificPart().startsWith("/")) {        p_base=null;      }    }    uriSpecLen=uriSpec.length();  }  if (uriSpec.startsWith("//")) {    index+=2;    int startPos=index;    char testChar='\0';    while (index < uriSpecLen) {      testChar=uriSpec.charAt(index);      if (testChar == '/' || testChar == '?' || testChar == '#') {        break;      }      index++;    }    if (index > startPos) {      initializeAuthority(uriSpec.substring(startPos,index));    } else {      m_host="";    }  }  initializePath(uriSpec.substring(index));  if (p_base != null) {    if (m_path.length() == 0 && m_scheme == null && m_host == null) {      m_scheme=p_base.getScheme();      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();      m_path=p_base.getPath();      if (m_queryString == null) {        m_queryString=p_base.getQueryString();      }      return;    }    if (m_scheme == null) {      m_scheme=p_base.getScheme();    }    if (m_host == null) {      m_userinfo=p_base.getUserinfo();      m_host=p_base.getHost();      m_port=p_base.getPort();    } else {      return;    }    if (m_path.length() > 0 && m_path.startsWith("/")) {      return;    }    String path=new String();    String basePath=p_base.getPath();    if (basePath != null) {      int lastSlash=basePath.lastIndexOf('/');      if (lastSlash != -1) {        path=basePath.substring(0,lastSlash + 1);      }    }    path=path.concat(m_path);    index=-1;    while ((index=path.indexOf("/./")) != -1) {      path=path.substring(0,index + 1).concat(path.substring(index + 3));    }    if (path.endsWith("/.")) {      path=path.substring(0,path.length() - 1);    }    index=-1;    int segIndex=-1;    String tempString=null;    while ((index=path.indexOf("/../")) > 0) {      tempString=path.substring(0,path.indexOf("/../"));      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        if (!tempString.substring(segIndex++).equals("..")) {          path=path.substring(0,segIndex).concat(path.substring(index + 4));        }      }    }    if (path.endsWith("/..")) {      tempString=path.substring(0,path.length() - 3);      segIndex=tempString.lastIndexOf('/');      if (segIndex != -1) {        path=path.substring(0,segIndex + 1);      }    }    m_path=path;  }}  }
class C{  public static boolean isMissingValue(double val){  return Double.isNaN(val);}  }
class C{  public static int ELIBACC(){  return 79;}  }
class C{  public IndependentDistribution build(){  double totalProb=table.values().stream().mapToDouble(null).sum();  if (totalProb < 0.99) {    incrementRow(ValueFactory.none(),1.0 - totalProb);  } else   if (totalProb > 1.01) {    table=InferenceUtils.normalise(table);  }  if (table.size() == 1) {    Value singleValue=table.keySet().iterator().next();    return new SingleValueDistribution(variable,singleValue);  } else {    return new CategoricalTable(variable,table);  }}  }
class C{  static String scanIdentifier(IXMLReader reader) throws IOException, XMLParseException {  StringBuffer result=new StringBuffer();  for (; ; ) {    char ch=reader.read();    if ((ch == '_') || (ch == ':') || (ch == '-')|| (ch == '.')|| ((ch >= 'a') && (ch <= 'z'))|| ((ch >= 'A') && (ch <= 'Z'))|| ((ch >= '0') && (ch <= '9'))|| (ch > '\u007E')) {      result.append(ch);    } else {      reader.unread(ch);      break;    }  }  return result.toString();}  }
class C{  public void drawRenderedImage(RenderedImage img,AffineTransform xform){  if (img == null) {    return;  }  mPrintMetrics.drawImage(this,img);  mDrawingArea.addInfinite();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.STATE_ROOT__DEF:    return getDef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void createGui(){  final JPanel outerNamePanel=new JPanel(new BorderLayout());  outerNamePanel.setBorder(new TitledBorder("Tag"));  final JPanel namePanel=new JPanel(new BorderLayout());  namePanel.setBorder(new EmptyBorder(0,0,5,0));  final JLabel nameLabel=new CHelpLabel("Name" + ":",new CNameHelp());  nameLabel.setPreferredSize(new Dimension(110,25));  namePanel.add(nameLabel,BorderLayout.WEST);  namePanel.add(m_nameTextField,BorderLayout.CENTER);  outerNamePanel.add(namePanel,BorderLayout.CENTER);  final JPanel outerDescriptionPanel=new JPanel(new BorderLayout());  outerDescriptionPanel.setBorder(new EmptyBorder(5,0,0,0));  final JPanel descriptionPanel=new JPanel(new BorderLayout());  descriptionPanel.setBorder(new TitledBorder("Description"));  descriptionPanel.setMinimumSize(new Dimension(0,120));  descriptionPanel.add(new JScrollPane(m_descriptionField));  outerDescriptionPanel.add(descriptionPanel,BorderLayout.CENTER);  final JPanel buttonPanel=new JPanel(new GridLayout(1,2));  buttonPanel.add(new JPanel());  buttonPanel.setBorder(new EmptyBorder(5,0,5,2));  buttonPanel.add(m_saveButton);  final JPanel topPanel=new JPanel(new BorderLayout());  topPanel.add(outerNamePanel,BorderLayout.NORTH);  topPanel.add(outerDescriptionPanel,BorderLayout.CENTER);  topPanel.add(buttonPanel,BorderLayout.SOUTH);  final JPanel bottomPanel=new JPanel(new BorderLayout());  bottomPanel.setBorder(m_tableBorder);  final JScrollPane scrollPane=new JScrollPane(m_childrenTagTable);  bottomPanel.add(scrollPane,BorderLayout.CENTER);  final JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,topPanel,bottomPanel);  splitPane.setOneTouchExpandable(true);  splitPane.setDividerLocation(splitPane.getMinimumDividerLocation());  splitPane.setResizeWeight(0.5);  add(splitPane);}  }
class C{  public Vector3d mulTransposeDirection(Matrix4fc mat){  return mulTransposeDirection(mat,this);}  }
class C{  public TestHarness(String solrHome,String solrXml){  this(new SolrResourceLoader(solrHome),solrXml);}  }
class C{  @Override public void requestWake(){  try {    _state=_state.toWake();    requestLoop();  } catch (  Exception e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  public void subTask(String name){}  }
class C{  public static DoubleMatrix1D plus(DoubleMatrix1D A,DoubleMatrix1D B){  return A.assign(B,F.plus);}  }
class C{  public static void assertEquals(List<IOObject> expected,List<IOObject> actual){  RapidAssert.assertEquals("",expected,actual);}  }
class C{  public static <T>TreeNode<T> copy(TreeDef<T> treeDef,T root){  return copy(treeDef,root,Function.identity());}  }
class C{  private void addParam(Type t){  this.stack.peek().add(t);}  }
class C{  @Override public void notifyOnOperationComplete(){  scheduleBackgroundRead();}  }
class C{  public final boolean canGetString(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetString());}  }
class C{  public static <T>T checkNotNull(T reference,Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  protected boolean removeAt(int index){  Object cur;  HashIndexSetProperties metaData=hashIndexSetProperties;  cur=metaData.set[index];  if (cur == null || cur == REMOVED) {    return false;  } else {    metaData.set[index]=REMOVED;    metaData.size--;    metaData.removedTokens++;    hashIndexSetProperties=metaData;    return true;  }}  }
class C{  private void onNextShow(){}  }
class C{  protected void deleteButtonPressed(ActionEvent e){  log.debug("(" + address + ") Delete Button Pressed");  firePropertyChange(PropertyChangeID.DELETE,address,address);}  }
class C{  public boolean isNonRedundant(){  return this.epType == (byte)0;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  protected BaseInterval(ReadableDuration duration,ReadableInstant end){  super();  iChronology=DateTimeUtils.getInstantChronology(end);  iEndMillis=DateTimeUtils.getInstantMillis(end);  long durationMillis=DateTimeUtils.getDurationMillis(duration);  iStartMillis=FieldUtils.safeAdd(iEndMillis,-durationMillis);  checkInterval(iStartMillis,iEndMillis);}  }
class C{  public OMGraphic generate(OMGrid grid,Projection proj){  Shape gridShape=grid.getShape();  if (gridShape == null || !gridShape.intersects(0,0,proj.getWidth(),proj.getHeight())) {    if (Debug.debugging("grid")) {      Debug.output("SlopeGenerator: OMGrid does not overlap map, skipping generation.");    }    return SinkGraphic.getSharedInstance();  }  OMRaster raster=getRaster(grid);  incomplete=false;  if (grid.height == 0 || grid.width == 0) {    Debug.message("grid","SlopeGenerator: grid height/width ZERO!");    return raster;  }  GridData gd=grid.getData();  if (!(gd instanceof GridData.Short)) {    Debug.message("grid","SlopeGenerator: grid doesn't contain short data.");    return SinkGraphic.getSharedInstance();  }  int rows=grid.getRows();  int columns=grid.getColumns();  short[][] data=((GridData.Short)gd).getData();  double distance=getSlopeRun(grid,getContrast());  LatLonPoint llp=new LatLonPoint.Double();  Point point=new Point();  ElevationColors colors=getColors();  if (colors == null) {    return SinkGraphic.getSharedInstance();  }  for (short x=0; x < grid.width; x++) {    int screenx=(int)grid.point1.getX() + x;    if (screenx < 0 || screenx > proj.getWidth()) {      incomplete=true;      continue;    }    for (short y=0; y < grid.height; y++) {      int screeny=(int)grid.point1.getY() + y;      if (screeny < 0 || screeny > proj.getHeight()) {        incomplete=true;        continue;      }      point.setLocation(screenx,screeny);      llp=proj.inverse(point.x,point.y,new LatLonPoint.Double());      int yc=(int)Math.round((llp.getLatitude() - grid.getLatitude()) / grid.getVerticalResolution());      int xc=(int)Math.round((llp.getLongitude() - grid.getLongitude()) / grid.getHorizontalResolution());      if (yc < 0)       yc=0;      if (yc > rows - 1)       yc=rows - 1;      if (xc < 0)       xc=0;      if (xc > columns - 1)       xc=columns - 1;      int elevation=0;      try {        elevation=(int)data[xc][yc];      } catch (      ArrayIndexOutOfBoundsException aioobe) {        Debug.output("Error Accessing data array:\n\txc: " + xc + ", yc: "+ yc+ " for x: "+ x+ ", y: "+ y);      }      int xnw=xc - 1;      int xse=xc + 1;      if (xc == 0 || xnw < 0) {        xnw=xc;      }      if (xc == columns - 1 || xse > columns - 1) {        xse=columns - 1;      }      int yse=yc - 1;      int ynw=yc + 1;      if (yse < 0) {        yse=0;      }      if (yc == rows - 1 || ynw > rows - 1) {        ynw=rows - 1;      }      try {        short e2=data[xse][yse];        short e1=data[xnw][ynw];        double slope=(e2 - e1) / distance;        raster.setPixel(x,y,colors.getARGB(elevation,grid.getUnits(),slope));      } catch (      ArrayIndexOutOfBoundsException aioobe) {        Debug.output("Error Accessing data array:\n\txse: " + xse + ", yse: "+ yse+ "\n\txnw: "+ xnw+ ", ynw: "+ ynw+ "\n\tfor x: "+ x+ ", y: "+ y);      }    }  }  raster.generate(proj);  if (Debug.debugging("grid"))   Debug.output("SlopeGenerator: leaving generate");  return raster;}  }
class C{  protected void sequence_ArrowFunctionTypeExpression_FunctionTypeExpressionOLD_TAnonymousFormalParameterList(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public OverScroller(Context context,Interpolator interpolator,float bounceCoefficientX,float bounceCoefficientY,boolean flywheel){  this(context,interpolator,flywheel);}  }
class C{  public TFloatHash(int initialCapacity,float loadFactor,TFloatHashingStrategy strategy){  super(initialCapacity,loadFactor);  _hashingStrategy=strategy;}  }
class C{  protected Path createPath(List<Position> positions){  Path path=new Path(positions);  path.setFollowTerrain(true);  path.setPathType(AVKey.GREAT_CIRCLE);  path.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  path.setDelegateOwner(this.getActiveDelegateOwner());  path.setAttributes(this.getActiveShapeAttributes());  return path;}  }
class C{  public boolean hasUnitAdminRole(){  return getUserRoles().contains(UserRoleType.UNIT_ADMINISTRATOR);}  }
class C{  public Pair(Collection<? extends T> values){  if (values == null)   throw new IllegalArgumentException("Input collection cannot be null");  if (values.size() == 2) {    if (values.contains(null))     throw new IllegalArgumentException("Pair cannot contain null values");    Iterator<? extends T> iter=values.iterator();    first=iter.next();    second=iter.next();  } else   throw new IllegalArgumentException("Pair may only be created from a Collection of exactly 2 elements");}  }
class C{  public CUtexObject(){}  }
class C{  public static String normalize(String value,IRI datatype){  String result=value;  if (datatype.equals(XMLSchema.DECIMAL)) {    result=normalizeDecimal(value);  } else   if (datatype.equals(XMLSchema.INTEGER)) {    result=normalizeInteger(value);  } else   if (datatype.equals(XMLSchema.NEGATIVE_INTEGER)) {    result=normalizeNegativeInteger(value);  } else   if (datatype.equals(XMLSchema.NON_POSITIVE_INTEGER)) {    result=normalizeNonPositiveInteger(value);  } else   if (datatype.equals(XMLSchema.NON_NEGATIVE_INTEGER)) {    result=normalizeNonNegativeInteger(value);  } else   if (datatype.equals(XMLSchema.POSITIVE_INTEGER)) {    result=normalizePositiveInteger(value);  } else   if (datatype.equals(XMLSchema.LONG)) {    result=normalizeLong(value);  } else   if (datatype.equals(XMLSchema.INT)) {    result=normalizeInt(value);  } else   if (datatype.equals(XMLSchema.SHORT)) {    result=normalizeShort(value);  } else   if (datatype.equals(XMLSchema.BYTE)) {    result=normalizeByte(value);  } else   if (datatype.equals(XMLSchema.UNSIGNED_LONG)) {    result=normalizeUnsignedLong(value);  } else   if (datatype.equals(XMLSchema.UNSIGNED_INT)) {    result=normalizeUnsignedInt(value);  } else   if (datatype.equals(XMLSchema.UNSIGNED_SHORT)) {    result=normalizeUnsignedShort(value);  } else   if (datatype.equals(XMLSchema.UNSIGNED_BYTE)) {    result=normalizeUnsignedByte(value);  } else   if (datatype.equals(XMLSchema.FLOAT)) {    result=normalizeFloat(value);  } else   if (datatype.equals(XMLSchema.DOUBLE)) {    result=normalizeDouble(value);  } else   if (datatype.equals(XMLSchema.BOOLEAN)) {    result=normalizeBoolean(value);  } else   if (datatype.equals(XMLSchema.DATETIME)) {    result=normalizeDateTime(value);  }  return result;}  }
class C{  @Inject public WebExtension(HtmlEditorProvider htmlEditorProvider,JsEditorProvider jsEditorProvider,EditorRegistry editorRegistry,WebExtensionResource resources,IconRegistry iconRegistry,@Named("JSFileType") FileType jsFile,@Named("HTMLFileType") FileType htmlFile){  iconRegistry.registerIcon(new Icon("JavaScript.samples.category.icon",resources.samplesCategoryJs()));  editorRegistry.registerDefaultEditor(jsFile,jsEditorProvider);  editorRegistry.registerDefaultEditor(htmlFile,htmlEditorProvider);}  }
class C{  public boolean encrypt(){  return encrypt;}  }
class C{  private void generateAndTest(TestEnvironment environment,RandoopOptions options,ExpectedTests expectedRegression,ExpectedTests expectedError){  RandoopRunStatus runStatus=generateAndCompile(environment,options);  String packageName=options.getPackageName();  runRegressionTests(environment,options,expectedRegression,runStatus,packageName);  runErrorTests(environment,options,expectedError,runStatus,packageName);}  }
class C{  public int kthSmallest(int[][] matrix,int k){  int n=matrix.length;  Queue<Element> minHeap=new PriorityQueue<>(n);  for (int i=0; i < n; i++) {    minHeap.offer(new Element(matrix[0][i],0,i));  }  int res=0;  for (int i=0; i < k; i++) {    Element ele=minHeap.poll();    res=ele.number;    if (ele.row + 1 < n) {      minHeap.offer(new Element(matrix[ele.row + 1][ele.col],ele.row + 1,ele.col));    }  }  return res;}  }
class C{  public PanelGraphicDevice(boolean interactive){  super();  this.interactive=interactive;  panel=new Panel();  ToolTipManager.sharedInstance().registerComponent(panel);  antialias=true;}  }
class C{  public void addChild(IXMLElement child){  if (child == null) {    throw new IllegalArgumentException("child must not be null");  }  if ((child.getName() == null) && (!this.children.isEmpty())) {    IXMLElement lastChild=(IXMLElement)this.children.get(this.children.size() - 1);    if (lastChild.getName() == null) {      lastChild.setContent(lastChild.getContent() + child.getContent());      return;    }  }  ((XMLElement)child).parent=this;  this.children.add(child);}  }
class C{  @Override public void updateWith(final OverlayInfo m){  final String[] infos=m.infos;  final List<int[]> colors=m.colors;  if (infos[0] != null) {    left.setText(infos[0]);    if (colors != null) {      setForeground(left,GamaColors.get(colors.get(0)).color());    }  }  if (infos[1] != null) {    center.setText(infos[1]);    if (colors != null) {      setForeground(center,GamaColors.get(colors.get(1)).color());    }  }  if (infos[2] != null) {    right.setText(infos[2]);    if (colors != null) {      setForeground(right,GamaColors.get(colors.get(2)).color());    }  }  getPopup().layout(true);}  }
class C{  public void addModifyListener(final ModifyListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.modifyListeners.add(listener);}  }
class C{  public boolean isValidInet6Address(String ipv6){  return INET_ADDRESS_VALIDATOR.isValidInet6Address(ipv6);}  }
class C{  private void doStartupTasks(){  UpgradeTasks.renameDownloadedFiles();  Utils.extractTemplates();  if (Platform.isLinux()) {    File desktop=new File(TmmOsUtils.DESKTOP_FILE);    if (!desktop.exists()) {      TmmOsUtils.createDesktopFileForLinux(desktop);    }  }}  }
class C{  public void lock(long key){  getLock(key).lock();}  }
class C{  public String findOS(){  return "ViPR OS";}  }
class C{  private ConfigurationItem addConfigurationItem(String key,String value){  ConfigurationItem item=new ConfigurationItem(key,value);  applyLocale(item);  items.put(key,item);  return item;}  }
class C{  @Override public int lengthOfMonth(){  return isoDate.lengthOfMonth();}  }
class C{  public void registerComponents(IConfigurationStorage configurationStorage) throws Exception {  String className=configurationStorage.getBufferStrategyConfig().getClazzName();  String beanName="bufferStrategy[" + className + "]";  registerBeanDefinitionAndInitialize(beanName,className);  StrategyConfig sendingStrategyConfig=configurationStorage.getSendingStrategyConfig();  className=sendingStrategyConfig.getClazzName();  beanName="sendingStrategy[" + className + "]";  registerBeanDefinitionAndInitialize(beanName,className);  for (  AbstractSensorTypeConfig platformSensorTypeConfig : configurationStorage.getPlatformSensorTypes()) {    className=platformSensorTypeConfig.getClassName();    beanName="platformSensorType[" + className + "]";    registerBeanDefinitionAndInitialize(beanName,className);  }  for (  JmxSensorTypeConfig jmxSensorTypeConfig : configurationStorage.getJmxSensorTypes()) {    className=jmxSensorTypeConfig.getClassName();    beanName="jmxSensorType[" + className + "]";    registerBeanDefinitionAndInitialize(beanName,className);  }  for (  AbstractSensorTypeConfig methodSensorTypeConfig : configurationStorage.getMethodSensorTypes()) {    className=methodSensorTypeConfig.getClassName();    beanName="methodSensorType[" + className + "]";    registerBeanDefinitionAndInitialize(beanName,className);  }}  }
class C{  protected void createTitle(String title){  String newTitle;  newTitle="Weka " + new Version();  if (title.length() != 0) {    newTitle+=" - " + title;  }  setTitle(newTitle);}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  public void handleAnimatedAttributeChanged(AnimatedLiveAttributeValue alav){  if (alav.getNamespaceURI() == null) {    String ln=alav.getLocalName();    if (ln.equals(SVG_X_ATTRIBUTE) || ln.equals(SVG_Y_ATTRIBUTE) || ln.equals(SVG_DX_ATTRIBUTE)|| ln.equals(SVG_DY_ATTRIBUTE)|| ln.equals(SVG_ROTATE_ATTRIBUTE)|| ln.equals(SVG_TEXT_LENGTH_ATTRIBUTE)|| ln.equals(SVG_LENGTH_ADJUST_ATTRIBUTE)) {      textBridge.computeLaidoutText(ctx,textBridge.e,textBridge.getTextNode());      return;    }  }  super.handleAnimatedAttributeChanged(alav);}  }
class C{  public void start(){  super.start();  setupPortrayals();  display.reset();  display.repaint();}  }
class C{  public HashCodeBuilder append(Object object){  if (object == null) {    iTotal=iTotal * iConstant;  } else {    if (object.getClass().isArray()) {      if (object instanceof long[]) {        append((long[])object);      } else       if (object instanceof int[]) {        append((int[])object);      } else       if (object instanceof short[]) {        append((short[])object);      } else       if (object instanceof char[]) {        append((char[])object);      } else       if (object instanceof byte[]) {        append((byte[])object);      } else       if (object instanceof double[]) {        append((double[])object);      } else       if (object instanceof float[]) {        append((float[])object);      } else       if (object instanceof boolean[]) {        append((boolean[])object);      } else {        append((Object[])object);      }    } else {      iTotal=iTotal * iConstant + object.hashCode();    }  }  return this;}  }
class C{  public static double logpdf(double x,double location,double shape){  final double v=(x - location) / shape;  return -Math.log(Math.PI * shape * (1 + v * v));}  }
class C{  protected void processMsg(byte[] data,int offset,int length){  SubscriptionImpl sub;  mu.lock();  try {    stats.incrementInMsgs();    stats.incrementInBytes(length);    sub=subs.get(ps.ma.sid);    if (sub == null) {      return;    }    Message msg=new Message(ps.ma,sub,data,offset,length);    sub.lock();    try {      sub.pMsgs++;      if (sub.pMsgs > sub.pMsgsMax) {        sub.pMsgsMax=sub.pMsgs;      }      sub.pBytes+=(msg.getData() == null ? 0 : msg.getData().length);      if (sub.pBytes > sub.pBytesMax) {        sub.pBytesMax=sub.pBytes;      }      if ((sub.pMsgsLimit > 0 && sub.pMsgs > sub.pMsgsLimit) || (sub.pBytesLimit > 0 && sub.pBytes > sub.pBytesLimit)) {        handleSlowConsumer(sub,msg);        return;      } else {        if (sub.getChannel() != null) {          if (sub.getChannel().add(msg)) {            sub.pCond.signal();            sub.setSlowConsumer(false);          } else {            handleSlowConsumer(sub,msg);            return;          }        }      }    }  finally {      sub.unlock();    }  }  finally {    mu.unlock();  }}  }
class C{  public RelationalVal(){  super();}  }
class C{  public void resumeAll() throws SchedulerException {  try {    getRemoteScheduler().resumeAll();  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public String password(){  return password;}  }
class C{  private void processReservedSymbols(TreeSet<String> provides,TypedScope topScope){  Set<String> collapsedNamespaces=new TreeSet<>();  for (  String reservedProvide : provides) {    if (reservedJsWords.contains(getUnqualifiedName(reservedProvide))) {      String namespace=getNamespace(reservedProvide);      if (collapsedNamespaces.contains(namespace))       continue;      collapsedNamespaces.add(namespace);      Set<String> properties=getSubNamespace(provides,namespace);      emitNamespaceBegin(getNamespace(namespace));      emit("var");      emit(getUnqualifiedName(namespace));      emit(": {");      Iterator<String> bundledIt=properties.iterator();      while (bundledIt.hasNext()) {        emit(getUnqualifiedName(bundledIt.next()));        emit(":");        TypedVar var=topScope.getOwnSlot(reservedProvide);        if (var != null) {          TreeWalker walker=new TreeWalker(compiler.getTypeRegistry(),provides,false);          walker.visitType(var.getType());        } else {          emit("any");        }        if (bundledIt.hasNext())         emit(",");      }      emit("};");      emitBreak();      emitNamespaceEnd();      for (      String property : properties) {        declareModule(property,true,property,true);      }    }  }  Iterator<String> it=provides.iterator();  while (it.hasNext()) {    if (collapsedNamespaces.contains(getNamespace(it.next())))     it.remove();  }}  }
class C{  public int bytesConsumed(int character){  int highByte=(character >> 8) & 0xff;  int offset=subHeaderOffset(highByte);  if (offset == 0) {    return 1;  }  return 2;}  }
class C{  public Bits xorSet(Bits xs){  Assert.check(currentState != BitsState.UNKNOWN);  sizeTo(xs.bits.length);  for (int i=0; i < xs.bits.length; i++) {    bits[i]=bits[i] ^ xs.bits[i];  }  currentState=BitsState.NORMAL;  return this;}  }
class C{  public static QueueInfo fromJson(String json) throws CorruptQueueException {  JsonObject rawQueue;  try {    rawQueue=(JsonObject)new JsonParser().parse(json);  } catch (  ClassCastException e) {    throw new CorruptQueueException("Json string '" + json + "' cannot be parsed into QueueInfo.");  }  JsonObject rawName=rawQueue.get("name").getAsJsonObject();  ClientId name=ClientId.create(JsonUtils.getStringPropertyValue(rawName,"xRoadInstance"),JsonUtils.getStringPropertyValue(rawName,"memberClass"),JsonUtils.getStringPropertyValue(rawName,"memberCode"),JsonUtils.getStringPropertyValue(rawName,"subsystemCode"));  QueueState state=new QueueState(JsonUtils.getIntPropertyValue(rawQueue,"requestCount"),JsonUtils.getIntPropertyValue(rawQueue,"firstRequestNo"),JsonUtils.getDatePropertyValue(rawQueue,"lastSentTime"),JsonUtils.getIntPropertyValue(rawQueue,"firstRequestSendCount"),JsonUtils.getStringPropertyValue(rawQueue,"lastSuccessId"),JsonUtils.getDatePropertyValue(rawQueue,"lastSuccessTime"),JsonUtils.getStringPropertyValue(rawQueue,"lastSendResult"));  return new QueueInfo(name,state);}  }
class C{  public void remove(){  _editor.removeFromContents(this);  active=false;  dispose();}  }
class C{  public static boolean equal(DBIDRef id1,DBIDRef id2){  return DBIDFactory.FACTORY.equal(id1,id2);}  }
class C{  public static void log(int severity,int code,String message,Throwable exception){  log(createStatus(severity,code,message,exception));}  }
class C{  public void testUlpPos(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=-45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.ulp();  String res="1E+45";  int resScale=-45;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public double eval(double params[]){  return (Math.cos(params[0]));}  }
class C{  @Override public int compareTo(EgBillDetails other){  return this.orderNo.compareTo(other.orderNo);}  }
class C{  public GapTextStore(int lowWatermark,int highWatermark){  this(highWatermark / 2,highWatermark / 2,0f);}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static Reference toReference(Vector<Object> xmlRpcParameters){  Reference reference=null;  if (!xmlRpcParameters.isEmpty()) {    Requirement requirement=toRequirement((Vector<Object>)xmlRpcParameters.get(REFERENCE_REQUIREMENT_IDX));    Specification specification=toSpecification((Vector<Object>)xmlRpcParameters.get(REFERENCE_SPECIFICATION_IDX));    SystemUnderTest sut=toSystemUnderTest((Vector<Object>)xmlRpcParameters.get(REFERENCE_SUT_IDX));    String sections=StringUtils.stripToNull((String)xmlRpcParameters.get(REFERENCE_SECTIONS_IDX));    reference=Reference.newInstance(requirement,specification,sut,sections);    Execution exe=toExecution((Vector<Object>)xmlRpcParameters.get(REFERENCE_LAST_EXECUTION_IDX));    reference.setLastExecution(exe);  }  return reference;}  }
class C{  public void cleanup(String keySpace,List<String> columnFamilies) throws InterruptedException, ExecutionException, IOException {  if (columnFamilies.isEmpty()) {    getProbe().forceKeyspaceCleanup(0,keySpace);  } else {    String[] families=new String[columnFamilies.size()];    families=columnFamilies.toArray(families);    getProbe().forceKeyspaceCleanup(0,keySpace,families);  }}  }
class C{  public static byte[] generateDataset(int len,int base,int modulo){  byte[] dataset=new byte[len];  for (int i=0; i < len; i++) {    dataset[i]=(byte)(base + (i % modulo));  }  return dataset;}  }
class C{  public static StoragePort parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  StoragePort object=new StoragePort();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"StoragePort".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (StoragePort)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list2=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","uniqueIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setUniqueIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","alternateName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list2.add(null);        reader.next();      } else {        list2.add(reader.getElementText());      }      boolean loopDone2=false;      while (!loopDone2) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone2=true;        } else {          if (new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","alternateName").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list2.add(null);              reader.next();            } else {              list2.add(reader.getElementText());            }          } else {            loopDone2=true;          }        }      }      object.setAlternateName((java.lang.String[])list2.toArray(new java.lang.String[list2.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","iscsiIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setIscsiIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","nodeWwn").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setNodeWwn(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","portType").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setPortType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","portWwn").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setPortWwn(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public boolean isRunning(){  return !isPaused;}  }
class C{  public DependenciesDispatcher(GraphBuilder builder){  this(ElementFilter.ALL_NODES,builder);}  }
class C{  public void mousePressed(MouseEvent e){  JMenu menu=(JMenu)menuItem;  if (!menu.isEnabled())   return;  MenuSelectionManager manager=MenuSelectionManager.defaultManager();  if (menu.isTopLevelMenu()) {    if (menu.isSelected() && menu.getPopupMenu().isShowing()) {      manager.clearSelectedPath();    } else {      Container cnt=menu.getParent();      if (cnt != null && cnt instanceof JMenuBar) {        MenuElement me[]=new MenuElement[2];        me[0]=(MenuElement)cnt;        me[1]=menu;        manager.setSelectedPath(me);      }    }  }  MenuElement selectedPath[]=manager.getSelectedPath();  if (selectedPath.length > 0 && selectedPath[selectedPath.length - 1] != menu.getPopupMenu()) {    if (menu.isTopLevelMenu() || menu.getDelay() == 0) {      appendPath(selectedPath,menu.getPopupMenu());    } else {      setupPostTimer(menu);    }  }}  }
class C{  public LinkedList<Diff> diff_main(String text1,String text2){  return diff_main(text1,text2,true);}  }
class C{  @Override public boolean put(final Entry row) throws IOException, SpaceExceededException {synchronized (this.backend) {    checkBuffer();    return this.buffer.put(row);  }}  }
class C{  public Name[] searchPath(){  return searchlist;}  }
class C{  private static boolean checkMemoryLimits(Lop node,double footprintInMapper){  boolean addNode=true;  if (!node.usesDistributedCache())   return addNode;  double memBudget=Math.min(AggBinaryOp.MAPMULT_MEM_MULTIPLIER,BinaryOp.APPEND_MEM_MULTIPLIER) * OptimizerUtils.getRemoteMemBudgetMap(true);  if (footprintInMapper <= memBudget)   return addNode; else   return !addNode;}  }
class C{  private double[] cuScoresForChildren(Instance newInstance) throws Exception {  double[] categoryUtils=new double[m_children.size()];  for (int i=0; i < m_children.size(); i++) {    CNode temp=m_children.get(i);    temp.updateStats(newInstance,false);    categoryUtils[i]=categoryUtility();    temp.updateStats(newInstance,true);  }  return categoryUtils;}  }
class C{  public static Ignite start(@Nullable String springCfgPath) throws IgniteCheckedException {  return springCfgPath == null ? start() : start(springCfgPath,null);}  }
class C{  @Override public Object eval(byte[] script,List<byte[]> keys,List<byte[]> args){  return eval(script,toByteArray(keys.size()),getParamsWithBinary(keys,args));}  }
class C{  public static void print(int[][] a){  int m=a.length;  int n=a[0].length;  StdOut.println(m + " " + n);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      StdOut.printf("%9d ",a[i][j]);    }    StdOut.println();  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)null);  return;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)null);return;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__DEFINED_FIELD:setDefinedField((TStructField)null);return;case N4JSPackage.PROPERTY_NAME_VALUE_PAIR__EXPRESSION:setExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  protected void initFileLocation(){  PathService pathService=CarbonCommonFactory.getPathService();  CarbonTablePath carbonTablePath=pathService.getCarbonTablePath(columnIdentifier,this.hdfsStorePath,carbonTableIdentifier);  this.columnDictionaryFilePath=carbonTablePath.getDictionaryFilePath(columnIdentifier.getColumnId());}  }
class C{  private boolean looksLikeAnonymousTypeDecl(){  nextToken();  if (fToken == Symbols.TokenIDENT) {    nextToken();    while (fToken == Symbols.TokenOTHER) {      nextToken();      if (fToken != Symbols.TokenIDENT)       return false;      nextToken();    }    return fToken == Symbols.TokenNEW;  }  return false;}  }
class C{  public synchronized void putAll(Map t){  Iterator i=t.entrySet().iterator();  while (i.hasNext()) {    Map.Entry e=(Map.Entry)i.next();    put(e.getKey(),e.getValue());  }}  }
class C{  public int genDcdMapsAndColTypes(FileSystem fs,String txMtdDir,int numCols,TfUtils agents) throws IOException {  TfUtils.ColumnTypes[] ctypes=new TfUtils.ColumnTypes[(int)_dummycodedLength];  for (int i=0; i < _dummycodedLength; i++)   ctypes[i]=TfUtils.ColumnTypes.SCALE;  _dcdColumnMap=new int[numCols];  Path pt=new Path(txMtdDir + "/Dummycode/" + TfUtils.DCD_FILE_NAME);  BufferedWriter br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));  int sum=1;  int idx=0;  for (int colID=1; colID <= numCols; colID++) {    if (_colList != null && idx < _colList.length && _colList[idx] == colID) {      br.write(colID + TfUtils.TXMTD_SEP + "1"+ TfUtils.TXMTD_SEP+ sum+ TfUtils.TXMTD_SEP+ (sum + _domainSizes[idx] - 1)+ "\n");      _dcdColumnMap[colID - 1]=(sum + _domainSizes[idx] - 1) - 1;      for (int i=sum; i <= (sum + _domainSizes[idx] - 1); i++)       ctypes[i - 1]=TfUtils.ColumnTypes.DUMMYCODED;      sum+=_domainSizes[idx];      idx++;    } else {      br.write(colID + TfUtils.TXMTD_SEP + "0"+ TfUtils.TXMTD_SEP+ sum+ TfUtils.TXMTD_SEP+ sum+ "\n");      _dcdColumnMap[colID - 1]=sum - 1;      if (agents.getBinAgent().isApplicable(colID) != -1)       ctypes[sum - 1]=TfUtils.ColumnTypes.ORDINAL;      if (agents.getRecodeAgent().isApplicable(colID) != -1)       ctypes[sum - 1]=TfUtils.ColumnTypes.NOMINAL;      sum+=1;    }  }  br.close();  pt=new Path(txMtdDir + File.separator + TfUtils.TXMTD_COLTYPES);  br=new BufferedWriter(new OutputStreamWriter(fs.create(pt,true)));  br.write(ctypes[0].toID() + "");  for (int i=1; i < _dummycodedLength; i++)   br.write(TfUtils.TXMTD_SEP + ctypes[i].toID());  br.close();  return sum - 1;}  }
class C{  public static Bitmap resizeBitmap(final Bitmap input,int destWidth,int destHeight) throws OutOfMemoryError {  return resizeBitmap(input,destWidth,destHeight,0);}  }
class C{  public MultisigMinCosignatoriesModificationNotification(final Account multisigAccount,final MultisigMinCosignatoriesModification modification){  super(NotificationType.MinCosignatoriesModification);  this.multisigAccount=multisigAccount;  this.modification=modification;}  }
class C{  public void removeSearchListener(SearchListener l){  m_SearchListeners.remove(l);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.318 -0500",hash_original_method="91A5AF22400C8AC862CBF8DA0CDC612B",hash_generated_method="44538EA0BBD7886C3EDF088C05158874") public boolean equals(Object otherObject){  if (otherObject == null) {    return false;  }  if (!otherObject.getClass().equals(this.getClass())) {    return false;  }  NameValueList other=(NameValueList)otherObject;  if (hmap.size() != other.hmap.size()) {    return false;  }  Iterator<String> li=this.hmap.keySet().iterator();  while (li.hasNext()) {    String key=(String)li.next();    NameValue nv1=this.getNameValue(key);    NameValue nv2=(NameValue)other.hmap.get(key);    if (nv2 == null)     return false; else     if (!nv2.equals(nv1))     return false;  }  return true;}  }
class C{  public X509Name(String dirName){  this(DefaultReverse,DefaultLookUp,dirName);}  }
class C{  public static String loadAttachedImages(IImageHolder imageHolder,Element description){  Elements images=description.select("div > a > img.is-hidden");  for (  Element image : images) {    String src=image.attr("src");    if (!TextUtils.isEmpty(src))     imageHolder.attachImage(new Image(src,image.attr("title")));    image.parent().parent().html("");  }  return description.html();}  }
class C{  public boolean isOnBar(){  return m_onBar;}  }
class C{  public int fillWithTimeout(long timeout) throws IOException {  if (_readOffset < _readLength) {    return _readLength - _readOffset;  }  if (_readBuffer == null) {    _readOffset=0;    _readLength=0;    return -1;  }  _readOffset=0;  StreamImpl source=_source;  if (source == null) {    return -1;  }  int readLength=source.readTimeout(_readBuffer,0,_readBuffer.length,timeout);  if (readLength > 0) {    _readLength=readLength;    _position+=readLength;    if (_isEnableReadTime) {      _readTime=CurrentTime.currentTime();    }    return readLength;  } else   if (readLength == READ_TIMEOUT) {    _readLength=0;    return 0;  } else {    _readLength=0;    return -1;  }}  }
class C{  public StatisticsDisabledException(Throwable cause){  super(cause);}  }
class C{  public boolean add(final T data){  try {    final boolean result=queue.add((T)nullSafe(data));    if (result) {      if (sizeSignal != null)       this.sizeSignal.set(queue.size());    }    return result;  } catch (  final IllegalStateException e) {    return false;  }}  }
class C{  public ComposedCharIter(){}  }
class C{  public static int abs(int a){  return (a ^ (a >> 31)) - (a >> 31);}  }
class C{  @Override public CGPoint clone(){  return new CGPoint(x,y);}  }
class C{  public void execute(){  Graph searchGraph;  FindTwoFactorClusters ftfc;  Object source=getData();  TestType tetradTestType=(TestType)getParams().get("tetradTestType",TestType.TETRAD_WISHART);  if (tetradTestType == null || (!(tetradTestType == TestType.TETRAD_DELTA || tetradTestType == TestType.TETRAD_WISHART))) {    tetradTestType=TestType.TETRAD_DELTA;    getParams().set("tetradTestType",tetradTestType);  }  FindTwoFactorClusters.Algorithm algorithm=(FindTwoFactorClusters.Algorithm)getParams().get("ftfcAlgorithm",FindTwoFactorClusters.Algorithm.GAP);  if (source instanceof DataSet) {    ftfc=new FindTwoFactorClusters((DataSet)source,algorithm,getParams().getDouble("alpha",0.001));    ftfc.setVerbose(true);    searchGraph=ftfc.search();  } else   if (source instanceof CovarianceMatrix) {    ftfc=new FindTwoFactorClusters((CovarianceMatrix)source,algorithm,getParams().getDouble("alpha",0.001));    ftfc.setVerbose(true);    searchGraph=ftfc.search();  } else {    throw new IllegalArgumentException("Unrecognized data type.");  }  if (semIm != null) {    List<List<Node>> partition=MimUtils.convertToClusters2(searchGraph);    List<String> variableNames=ReidentifyVariables.reidentifyVariables2(partition,trueGraph,(DataSet)getData());    rename(searchGraph,partition,variableNames);  } else   if (trueGraph != null) {    List<List<Node>> partition=MimUtils.convertToClusters2(searchGraph);    List<String> variableNames=ReidentifyVariables.reidentifyVariables1(partition,trueGraph);    rename(searchGraph,partition,variableNames);  }  System.out.println("Search Graph " + searchGraph);  try {    Graph graph=new MarshalledObject<>(searchGraph).get();    GraphUtils.circleLayout(graph,200,200,150);    GraphUtils.fruchtermanReingoldLayout(graph);    setResultGraph(graph);    setClusters(MimUtils.convertToClusters(graph,getData().getVariables()));  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  }}  }
class C{  private void prepareNames(){  permitted_names=new ArrayList[9];  if (permittedSubtrees != null) {    for (    GeneralSubtree generalSubtree : permittedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (permitted_names[tag] == null) {        permitted_names[tag]=new ArrayList<GeneralName>();      }      permitted_names[tag].add(name);    }  }  excluded_names=new ArrayList[9];  if (excludedSubtrees != null) {    for (    GeneralSubtree generalSubtree : excludedSubtrees.getSubtrees()) {      GeneralName name=generalSubtree.getBase();      int tag=name.getTag();      if (excluded_names[tag] == null) {        excluded_names[tag]=new ArrayList<GeneralName>();      }      excluded_names[tag].add(name);    }  }}  }
class C{  private void verifyExportAnon(ExportRule exportRule){  if (!exportRule.isToProceed()) {    return;  }  String anon=exportRule.getAnon();  if (anon != null) {    exportRule.setIsToProceed(true,ExportOperationErrorType.NO_ERROR);  } else {    _log.info("No Anon supplied");    exportRule.setIsToProceed(false,ExportOperationErrorType.INVALID_ANON);  }}  }
class C{  public static boolean removeLockFile(FileSystem fs,Path lockFile) throws IOException {  if (!fs.exists(lockFile))   return false;  if (fs.getFileStatus(lockFile).isDir())   throw new IOException("lock file " + lockFile + " exists but is a directory!");  return fs.delete(lockFile,false);}  }
class C{  public void draw3DOval(Graphics g,Color colors[],int x,int y,int w,int h,boolean raised){  Color c=g.getColor();  g.setColor(raised ? colors[HIGHLIGHT_COLOR] : colors[SHADOW_COLOR]);  g.drawArc(x,y,w,h,45,180);  g.setColor(raised ? colors[SHADOW_COLOR] : colors[HIGHLIGHT_COLOR]);  g.drawArc(x,y,w,h,225,180);  g.setColor(c);}  }
class C{  public ExistsRequest routing(String routing){  this.routing=routing;  return this;}  }
class C{  public Stream<Tuple2od<I>> similarItems(I i){  return similarItems(item2iidx(i)).map(null);}  }
class C{  public DrawingAttributes(){  propertyChangeSupport=new PropertyChangeSupport(this);}  }
class C{  public final boolean push(boolean val){  if (m_index == m_allocatedSize - 1)   grow();  return (m_values[++m_index]=val);}  }
class C{  protected void onShow(){}  }
class C{  public void injectCacheName(Object obj,String cacheName) throws IgniteCheckedException {  assert obj != null;  if (log.isDebugEnabled())   log.debug("Injecting cache name: " + obj);  obj=unwrapTarget(obj);  inject(obj,GridResourceIoc.ResourceAnnotation.CACHE_NAME,null,null,cacheName);}  }
class C{  public Portfolio findByName(String name){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Portfolio> query=builder.createQuery(Portfolio.class);    Root<Portfolio> from=query.from(Portfolio.class);    query.select(from);    query.where(builder.equal(from.get("name"),name));    List<Portfolio> items=entityManager.createQuery(query).getResultList();    for (    Portfolio item : items) {      item.getPortfolioAccounts().size();    }    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public Bundler putParcelableArray(String key,Parcelable[] value){  bundle.putParcelableArray(key,value);  return this;}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(name,url,duration);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.403 -0500",hash_original_method="19C83E4EF6515D56E4873B39EA152436",hash_generated_method="D5D9B81CB4D09B5832746306331C8117") @Override public void put(String name,char value){  emulatedFields.put(name,value);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  protected int height(TreeNode<E> root){  if (root == null)   return 0;  return 1 + Math.max(height(root.left),height(root.right));}  }
class C{  public HttpStatus createProject(String applicationName){  logger.info("GitlabService : createProject " + applicationName);  if (gitlabToken == null || gitlabToken.trim().length() == 0) {    logger.warn("Cannot use this feature because no token for GitLab");    return HttpStatus.NOT_IMPLEMENTED;  }  if (gitlabAPI == null || gitlabAPI.trim().length() == 0) {    logger.warn("Cannot use this feature because no URL given for GitLab API");    return HttpStatus.NOT_IMPLEMENTED;  }  try {    GitlabAPI api=GitlabAPI.connect(gitlabAPI,gitlabToken,TokenType.PRIVATE_TOKEN,AuthMethod.URL_PARAMETER);    api.createProject(applicationName);    return HttpStatus.OK;  } catch (  Exception e) {    logger.error(applicationName,e);    return HttpStatus.BAD_REQUEST;  }}  }
class C{  public static void writeMetadataFromString(OFFlowMod.Builder fmb,String inst,Logger log){  if (inst == null || inst.equals("")) {    return;  }  if (fmb.getVersion().compareTo(OFVersion.OF_11) < 0) {    log.error("Write Metadata Instruction not supported in OpenFlow 1.0");    return;  }  OFInstructionWriteMetadata.Builder ib=OFFactories.getFactory(fmb.getVersion()).instructions().buildWriteMetadata();  String[] keyValue=inst.split("/");  if (keyValue.length > 2) {    throw new IllegalArgumentException("[Metadata, Mask] " + keyValue + " does not have form 'metadata/mask' or 'metadata' for parsing "+ inst);  } else   if (keyValue.length == 1) {    log.debug("No mask detected in OFInstructionWriteMetaData string.");  } else   if (keyValue.length == 2) {    log.debug("Detected mask in OFInstructionWriteMetaData string.");  }  if (keyValue[0].startsWith("0x")) {    ib.setMetadata(U64.of(Long.valueOf(keyValue[0].replaceFirst("0x",""),16)));  } else {    ib.setMetadata(U64.of(Long.valueOf(keyValue[0])));  }  if (keyValue.length == 2) {    if (keyValue[1].startsWith("0x")) {      ib.setMetadataMask(U64.of(Long.valueOf(keyValue[1].replaceFirst("0x",""),16)));    } else {      ib.setMetadataMask(U64.of(Long.valueOf(keyValue[1])));    }  } else {    ib.setMetadataMask(U64.NO_MASK);  }  log.debug("Appending WriteMetadata instruction: {}",ib.build());  appendInstruction(fmb,ib.build());  log.debug("All instructions after append: {}",fmb.getInstructions());}  }
class C{  public long nextLong(long least,long bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextLong(bound - least) + least;}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public boolean test(String testPattern,String value,char escapeChar){  initPattern(testPattern,escapeChar);  if (invalidPattern) {    return false;  }  return compareAt(value,0,0,value.length(),patternChars,patternTypes);}  }
class C{  public static RegisterSpecList make(RegisterSpec spec0,RegisterSpec spec1,RegisterSpec spec2,RegisterSpec spec3){  RegisterSpecList result=new RegisterSpecList(4);  result.set(0,spec0);  result.set(1,spec1);  result.set(2,spec2);  result.set(3,spec3);  return result;}  }
class C{  @Override public void changeEvent(final IChangeRecord record){  if (log.isTraceEnabled()) {    log.trace(record);  }{    final IV<?,?> p=record.getStatement().p();    if (added.equals(p) || removed.equals(p)) {      return;    }  }  if (!accept(record)) {    return;  }  final ChangeAction action=record.getChangeAction();  if (!(action == ChangeAction.INSERTED || action == ChangeAction.REMOVED)) {    return;  }  final IV<?,?> p=action == ChangeAction.INSERTED ? added : removed;  @SuppressWarnings("rawtypes") final SidIV sid=new SidIV(record.getStatement());  final ISPO spo=new SPO(sid,p,nullTime,StatementEnum.Explicit);  if (log.isTraceEnabled()) {    log.trace(spo);  }  getOrCreateBuffer().add(spo);}  }
class C{  protected void simpleClear(){  _numResults=0;  HIDDEN.clear();  super.simpleClear();}  }
class C{  public int calculateMinimumHP(int[][] dungeon){  if (dungeon == null || dungeon.length == 0 || dungeon[0].length == 0)   return 0;  int m=dungeon.length - 1;  int n=dungeon[0].length - 1;  dungeon[m][n]=Math.max(1 - dungeon[m][n],1);  for (int i=m - 1; i >= 0; i--)   dungeon[i][n]=Math.max(dungeon[i + 1][n] - dungeon[i][n],1);  for (int j=n - 1; j >= 0; j--)   dungeon[m][j]=Math.max(dungeon[m][j + 1] - dungeon[m][j],1);  for (int i=m - 1; i >= 0; i--) {    for (int j=n - 1; j >= 0; j--) {      dungeon[i][j]=Math.max(Math.min(dungeon[i + 1][j],dungeon[i][j + 1]) - dungeon[i][j],1);    }  }  return dungeon[0][0];}  }
class C{  @SuppressWarnings("unchecked") public static DataSource createRasterData(DataSource data){  if (data == null) {    throw new NullPointerException("Cannot convert null data source.");  }  DataTable coordsValueData=new DataTable(Double.class,Double.class,Double.class);  double min=((Number)data.getRowStatistics(Statistics.MIN).getColumnStatistics(Statistics.MIN).get(0,0)).doubleValue();  double max=((Number)data.getRowStatistics(Statistics.MAX).getColumnStatistics(Statistics.MAX).get(0,0)).doubleValue();  double range=max - min;  int i=0;  for (  Comparable<?> cell : data) {    int x=i % data.getColumnCount();    int y=-i / data.getColumnCount();    double v=Double.NaN;    if (cell instanceof Number) {      Number numericCell=(Number)cell;      v=(numericCell.doubleValue() - min) / range;    }    coordsValueData.add((double)x,(double)y,v);    i++;  }  return coordsValueData;}  }
class C{  public ConformingDelaunayTriangulator(Collection initialVertices,double tolerance){  this.initialVertices=new ArrayList(initialVertices);  this.tolerance=tolerance;  kdt=new KdTree(tolerance);}  }
class C{  public Extent loadExtent(Offset offset){  return new Extent(loadArchitecturalWord(offset));}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(uri,localName,DTM.ELEMENT_NODE);  int prefixIndex=(qName.length() != localName.length()) ? m_valuesOrPrefixes.stringToIndex(qName) : 0;  int elemNode=addNode(DTM.ELEMENT_NODE,exName,m_parents.peek(),m_previous,prefixIndex,true);  if (m_indexing)   indexNode(exName,elemNode);  m_parents.push(elemNode);  int startDecls=m_contextIndexes.peek();  int nDecls=m_prefixMappings.size();  String prefix;  if (!m_pastFirstElement) {    prefix="xml";    String declURL="http://www.w3.org/XML/1998/namespace";    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    m_values.addElement(declURL);    int val=m_valueIndex++;    addNode(DTM.NAMESPACE_NODE,exName,elemNode,DTM.NULL,val,false);    m_pastFirstElement=true;  }  for (int i=startDecls; i < nDecls; i+=2) {    prefix=(String)m_prefixMappings.elementAt(i);    if (prefix == null)     continue;    String declURL=(String)m_prefixMappings.elementAt(i + 1);    exName=m_expandedNameTable.getExpandedTypeID(null,prefix,DTM.NAMESPACE_NODE);    m_values.addElement(declURL);    int val=m_valueIndex++;    addNode(DTM.NAMESPACE_NODE,exName,elemNode,DTM.NULL,val,false);  }  int n=attributes.getLength();  for (int i=0; i < n; i++) {    String attrUri=attributes.getURI(i);    String attrQName=attributes.getQName(i);    String valString=attributes.getValue(i);    int nodeType;    String attrLocalName=attributes.getLocalName(i);    if ((null != attrQName) && (attrQName.equals("xmlns") || attrQName.startsWith("xmlns:"))) {      prefix=getPrefix(attrQName,attrUri);      if (declAlreadyDeclared(prefix))       continue;      nodeType=DTM.NAMESPACE_NODE;    } else {      nodeType=DTM.ATTRIBUTE_NODE;      if (m_buildIdIndex && attributes.getType(i).equalsIgnoreCase("ID"))       setIDAttribute(valString,elemNode);    }    if (null == valString)     valString="";    m_values.addElement(valString);    int val=m_valueIndex++;    if (attrLocalName.length() != attrQName.length()) {      prefixIndex=m_valuesOrPrefixes.stringToIndex(attrQName);      int dataIndex=m_data.size();      m_data.addElement(prefixIndex);      m_data.addElement(val);      val=-dataIndex;    }    exName=m_expandedNameTable.getExpandedTypeID(attrUri,attrLocalName,nodeType);    addNode(nodeType,exName,elemNode,DTM.NULL,val,false);  }  if (null != m_wsfilter) {    short wsv=m_wsfilter.getShouldStripSpace(makeNodeHandle(elemNode),this);    boolean shouldStrip=(DTMWSFilter.INHERIT == wsv) ? getShouldStripWhitespace() : (DTMWSFilter.STRIP == wsv);    pushShouldStripWhitespace(shouldStrip);  }  m_previous=DTM.NULL;  m_contextIndexes.push(m_prefixMappings.size());}  }
class C{  public FBXAException(String msg,int errorCode){  this(msg);  this.errorCode=errorCode;}  }
class C{  public static Collection.Key init(String key){  return new KeyImpl(key);}  }
class C{  public double measureNumLeaves(){  return m_root.numLeaves();}  }
class C{  protected AbstractCpeController(String name,CollectionProcessingEngine engine){  this(name,null,engine);}  }
class C{  @SuppressWarnings("unchecked") private void resetDBObjects(Class objectClass){  m_direction=s_logger.localizeMessage("target");  if (m_target.getDirection() != null && m_target.getDirection().length() > 0)   m_direction=m_target.getDirection();  m_objectType=s_logger.localizeMessage("object");  m_objectTypes=s_logger.localizeMessage("objects");  DBObject dbObject=null;  if (objectClass != null)   dbObject=new DBObject(objectClass);  if (dbObject != null) {    m_objectType=dbObject.getObjectType();    m_objectTypes=dbObject.getObjectTypes();  }  m_detailType=s_logger.localizeMessage("record");  m_detailTypes=s_logger.localizeMessage("records");  m_sourceMap=null;  m_targetMap=null;  if (dbObject != null) {    if (objectClass.getSimpleName().equals("DBObject_Table")) {      m_sourceMap=m_source.getTables();      m_targetMap=m_target.getTables();    } else     if (objectClass.getSimpleName().equals("DBObject_View")) {      m_sourceMap=m_source.getViews();      m_targetMap=m_target.getViews();    } else     if (objectClass.getSimpleName().equals("DBObject_Operator")) {      m_sourceMap=m_source.getOperators();      m_targetMap=m_target.getOperators();    } else     if (objectClass.getSimpleName().equals("DBObject_Function")) {      m_sourceMap=m_source.getFunctions();      m_targetMap=m_target.getFunctions();    } else     if (objectClass.getSimpleName().equals("DBObject_Trigger")) {      m_sourceMap=m_source.getTriggers();      m_targetMap=m_target.getTriggers();    } else     if (objectClass.getSimpleName().equals("DBObject_Sequence")) {      m_sourceMap=m_source.getSequences();      m_targetMap=m_target.getSequences();    } else     if (objectClass.getSimpleName().equals("DBObject_PrimaryKey")) {      m_sourceMap=m_source.getPrimaryKeys();      m_targetMap=m_target.getPrimaryKeys();    } else     if (objectClass.getSimpleName().equals("DBObject_ForeignKey")) {      m_sourceMap=m_source.getForeignKeys();      m_targetMap=m_target.getForeignKeys();    } else     if (objectClass.getSimpleName().equals("DBObject_Check")) {      m_sourceMap=m_source.getChecks();      m_targetMap=m_target.getChecks();    } else     if (objectClass.getSimpleName().equals("DBObject_Unique")) {      m_sourceMap=m_source.getUniques();      m_targetMap=m_target.getUniques();    } else     if (objectClass.getSimpleName().equals("DBObject_Index")) {      m_sourceMap=m_source.getIndexes();      m_targetMap=m_target.getIndexes();    }  }  m_objectList=new ArrayList<String>();  if (m_sourceMap != null && m_sourceMap.size() > 0) {    for (Iterator<String> it=m_sourceMap.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      if (!m_objectList.contains(key))       m_objectList.add(key);    }  }  if (m_targetMap != null && m_targetMap.size() > 0) {    for (Iterator<String> it=m_targetMap.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      if (!m_objectList.contains(key))       m_objectList.add(key);    }  }  java.util.Collections.sort(m_objectList);  m_trackingList=new ArrayList<String>();  m_counterPrg=null;  m_counterDrp=null;  m_counterUpd=null;  m_counterAdd=null;  m_totalPrg=null;  m_totalDrp=null;  m_totalUpd=null;  m_totalAdd=null;  m_detailCounterDrp=null;  m_detailCounterUpd=null;  m_detailCounterAdd=null;}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public SchemaAgreementException(final String message,final Throwable throwable){  super(message,throwable);}  }
class C{  public void printSeries(){  for (int i=0; i < this.getItemCount(); i++) {    VwapItem dataItem=(VwapItem)this.getDataItem(i);    _log.debug("Type: " + this.getType() + " Time: "+ dataItem.getPeriod().getStart()+ " Value: "+ dataItem.getVwapPrice());  }}  }
class C{  public boolean isAmbiguousTriple(Node x,Node y,Node z){  Triple triple=new Triple(x,y,z);  if (!triple.alongPathIn(this)) {    throw new IllegalArgumentException("<" + x + ", "+ y+ ", "+ z+ "> is not along a path.");  }  removeTriplesNotInGraph();  return ambiguousTriples.contains(triple);}  }
class C{  protected void parseLayers(String prefix,Properties props){  PropUtils.putDataPrefixToLayerList(this,props,prefix + layersProperty);  String layersString=props.getProperty(prefix + layersProperty);  Vector<Layer> layers=getLayers();  if (layersString == null || layersString.length() == 0) {    logger.info("ScaleFilterLayer(): null layersString!");    return;  }  StringTokenizer tok=new StringTokenizer(layersString);  while (tok.hasMoreTokens()) {    Object obj;    String layerName=tok.nextToken();    String classProperty=layerName + ".class";    String className=props.getProperty(classProperty);    if (className == null) {      logger.info("ScaleFilterLayer.parseLayers(): Failed to locate property \"" + classProperty + "\"");      logger.info("ScaleFilterLayer.parseLayers(): Skipping layer \"" + layerName + "\"");      className=SinkLayer.class.getName();    }    try {      if (className.equals(SinkLayer.class.getName())) {        obj=SinkLayer.getSharedInstance();      } else {        obj=Class.forName(className).newInstance();      }      if (logger.isLoggable(Level.FINE)) {        logger.fine("Instantiated " + className);      }    } catch (    Exception e) {      logger.info("Failed to instantiate \"" + className + "\": "+ e);      obj=SinkLayer.getSharedInstance();    }    if (obj instanceof Layer) {      Layer l=(Layer)obj;      l.setProperties(layerName,props);      l.addLayerStatusListener(this);      l.addInfoDisplayListener(this);      layers.addElement(l);    }  }}  }
class C{  static String intern(String str){  if (VM.VerifyAssertions)   VM._assert(VM.runningVM);  return Atom.internString(str);}  }
class C{  public static String classNameOnly(String typeName){  String dotted=descriptorToDot(typeName);  int start=dotted.lastIndexOf(".");  if (start < 0) {    return dotted;  } else {    return dotted.substring(start + 1);  }}  }
class C{  public static SolidToast make(Activity activity,CharSequence text,ViewGroup parent,int duration,int gravity){  boolean isReused=true;  View view=activity.findViewById(R.id.toast_background);  if (view == null) {    view=View.inflate(activity,R.layout.view_solid_toast,null);    isReused=false;  }  LinearLayout background=(LinearLayout)view.findViewById(R.id.toast_background);  TextView msg=(TextView)view.findViewById(R.id.toast_msg);  background.setBackgroundColor(Color.BLUE);  msg.setText(text);  SolidToast toast=new SolidToast(activity);  toast.setViewIsReused(isReused);  toast.setMsg(text);  toast.setParent(parent);  toast.setActivity(activity);  toast.setDuration(duration);  toast.setGravity(gravity);  toast.setToastView(view);  return toast;}  }
class C{  public ModelBean(){  populate();}  }
class C{  public SkyColorLayer(Color color){  this.setSkyColor(color);}  }
class C{  public boolean isNegative(){  return (this.values[0] & 1) != 0;}  }
class C{  public void testGetInstance03() throws NoSuchAlgorithmException, IllegalArgumentException, InvalidAlgorithmParameterException, CertPathBuilderException {  try {    CertPathBuilder.getInstance(null,mProv);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i],mProv);      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  Provider prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathBuilder.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  CertPathBuilder cerPB;  for (int i=0; i < validValues.length; i++) {    cerPB=CertPathBuilder.getInstance(validValues[i],mProv);    assertEquals("Incorrect type",cerPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPB.getProvider(),mProv);    checkResult(cerPB);  }}  }
class C{  public void initialize(JavaProject project,int possibleMatchSize) throws JavaModelException {  if (this.nameEnvironment != null && possibleMatchSize != 1) {    this.nameEnvironment.cleanup();    this.unitScope=null;  }  SearchableEnvironment searchableEnvironment=project.newSearchableNameEnvironment(this.workingCopies);  this.nameEnvironment=possibleMatchSize == 1 ? (INameEnvironment)searchableEnvironment : (INameEnvironment)new JavaSearchNameEnvironment(project,this.workingCopies);  Map map=project.getOptions(true);  map.put(CompilerOptions.OPTION_TaskTags,org.eclipse.jdt.internal.compiler.util.Util.EMPTY_STRING);  this.options=new CompilerOptions(map);  ProblemReporter problemReporter=new ProblemReporter(DefaultErrorHandlingPolicies.proceedWithAllProblems(),this.options,new DefaultProblemFactory());  this.lookupEnvironment=new LookupEnvironment(this,this.options,problemReporter,this.nameEnvironment);  this.lookupEnvironment.mayTolerateMissingType=true;  this.parser=MatchLocatorParser.createParser(problemReporter,this);  this.basicParser=null;  this.nameLookup=null;  this.numberOfMatches=0;  this.matchesToProcess=new PossibleMatch[possibleMatchSize];  this.lookupEnvironment.addResolutionListener(this.patternLocator);}  }
class C{  static void saveReviewComment(IMAPMessage message,Resource target) throws IOException, MessagingException, PermissionDenied, NoSuchAlgorithmException {  User sender=IMAPMessageUtil.extractSender(message);  if (!AccessControl.isProjectResourceCreatable(sender,target.getProject(),ResourceType.REVIEW_COMMENT)) {    throw new PermissionDenied(cannotCreateMessage(sender,target.getProject(),target.getType()));  }  Content content=extractContent(message);  String messageID=message.getMessageID();  Address[] allRecipients=message.getAllRecipients();  saveReviewComment(target,sender,content,messageID,allRecipients);}  }
class C{  private void createViewToolbar(){  toolBarManager=getViewSite().getActionBars().getToolBarManager();  ShowHideInactiveInstrumentationsAction showHideInactiveInstrumentationsAction=new ShowHideInactiveInstrumentationsAction();  toolBarManager.add(showHideInactiveInstrumentationsAction);  collapseAction=new CollapseAction();  toolBarManager.add(collapseAction);}  }
class C{  @Override public List<Map<String,String>> taskConfigs(int maxTasks){  List<Map<String,String>> configs=new ArrayList<>();  List<String> coll=Arrays.asList(collections.split(","));  int numGroups=Math.min(coll.size(),maxTasks);  List<List<String>> dbsGrouped=ConnectorUtils.groupPartitions(coll,numGroups);  List<String> topics=Arrays.asList(this.topics.split(","));  List<List<String>> topicsGrouped=ConnectorUtils.groupPartitions(topics,numGroups);  for (int i=0; i < numGroups; i++) {    Map<String,String> config=new HashMap<>();    config.put(PORT,port);    config.put(BULK_SIZE,bulkSize);    config.put(HOST,host);    config.put(DATABASE,database);    config.put(COLLECTIONS,StringUtils.join(dbsGrouped.get(i),","));    config.put(TOPICS,StringUtils.join(topicsGrouped.get(i),","));    configs.add(config);  }  return configs;}  }
class C{  protected ExecutionError(@Nullable String message){  super(message);}  }
class C{  public static Match fromString(String match,OFVersion ofVersion) throws IllegalArgumentException {  boolean ver10=false;  if (match.equals("") || match.equalsIgnoreCase("any") || match.equalsIgnoreCase("all")|| match.equals("[]")) {    match="Match[]";  }  String[] tokens=match.split("[\\[,\\]]");  int initArg=0;  if (tokens[0].equals("Match")) {    initArg=1;  }  int i;  String[] tmp;  ArrayDeque<String[]> llValues=new ArrayDeque<String[]>();  for (i=initArg; i < tokens.length; i++) {    tmp=tokens[i].split("=");    if (tmp.length != 2) {      throw new IllegalArgumentException("Token " + tokens[i] + " does not have form 'key=value' parsing "+ match);    }    tmp[0]=tmp[0].toLowerCase();    llValues.add(tmp);  }  Match.Builder mb=OFFactories.getFactory(ofVersion).buildMatch();  if (ofVersion.equals(OFVersion.OF_10)) {    ver10=true;  }  while (!llValues.isEmpty()) {    IpProtocol ipProto=null;    String[] key_value=llValues.pollFirst();    String[] dataMask=key_value[1].split("/");    if (dataMask.length > 2) {      throw new IllegalArgumentException("[Data, Mask] " + dataMask + " does not have form 'data/mask' or 'data'"+ key_value[1]);    } else     if (dataMask.length == 1) {      log.debug("No mask detected in Match string: {}",key_value[1]);    } else     if (dataMask.length == 2) {      log.debug("Detected mask in Match string: {}",key_value[1]);    }switch (key_value[0]) {case STR_IN_PORT:      if (dataMask.length == 1) {        mb.setExact(MatchField.IN_PORT,OFPort.ofShort(dataMask[0].contains("0x") ? U16.of(Integer.valueOf(dataMask[0].replaceFirst("0x",""),16)).getRaw() : U16.of(Integer.valueOf(dataMask[0])).getRaw()));      } else {        mb.setMasked(MatchField.IN_PORT,OFPort.ofShort(dataMask[0].contains("0x") ? U16.of(Integer.valueOf(dataMask[0].replaceFirst("0x",""),16)).getRaw() : U16.of(Integer.valueOf(dataMask[0])).getRaw()),OFPort.ofShort(dataMask[1].contains("0x") ? U16.of(Integer.valueOf(dataMask[1].replaceFirst("0x",""),16)).getRaw() : U16.of(Integer.valueOf(dataMask[1])).getRaw()));      }    break;case STR_DL_DST:  if (dataMask.length == 1) {    mb.setExact(MatchField.ETH_DST,MacAddress.of(dataMask[0]));  } else {    mb.setMasked(MatchField.ETH_DST,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));  }break;case STR_DL_SRC:if (dataMask.length == 1) {mb.setExact(MatchField.ETH_SRC,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.ETH_SRC,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_DL_TYPE:if (dataMask.length == 1) {mb.setExact(MatchField.ETH_TYPE,EthType.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ETH_TYPE,EthType.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),EthType.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}break;case STR_DL_VLAN:if (dataMask.length == 1) {mb.setExact(MatchField.VLAN_VID,OFVlanVidMatch.ofRawVid(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.VLAN_VID,OFVlanVidMatchWithMask.of(OFVlanVidMatch.ofRawVid(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])),OFVlanVidMatch.ofRawVid(dataMask[1].contains("0x") ? Short.valueOf(dataMask[1].replaceFirst("0x",""),16) : Short.valueOf(dataMask[1]))));}break;case STR_DL_VLAN_PCP:if (dataMask.length == 1) {mb.setExact(MatchField.VLAN_PCP,VlanPcp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));} else {mb.setMasked(MatchField.VLAN_PCP,VlanPcp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),VlanPcp.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));}break;case STR_NW_DST:mb.setMasked(MatchField.IPV4_DST,IPv4AddressWithMask.of(key_value[1]));break;case STR_NW_SRC:mb.setMasked(MatchField.IPV4_SRC,IPv4AddressWithMask.of(key_value[1]));break;case STR_IPV6_DST:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setMasked(MatchField.IPV6_DST,IPv6AddressWithMask.of(key_value[1]));break;case STR_IPV6_SRC:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setMasked(MatchField.IPV6_SRC,IPv6AddressWithMask.of(key_value[1]));break;case STR_IPV6_FLOW_LABEL:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.IPV6_FLABEL,IPv6FlowLabel.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.IPV6_FLABEL,IPv6FlowLabel.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),IPv6FlowLabel.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}break;case STR_NW_PROTO:if (dataMask.length == 1) {mb.setExact(MatchField.IP_PROTO,IpProtocol.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.IP_PROTO,IpProtocol.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])),IpProtocol.of(dataMask[1].contains("0x") ? Short.valueOf(dataMask[1].replaceFirst("0x",""),16) : Short.valueOf(dataMask[1])));}break;case STR_NW_TOS:if (dataMask.length == 1) {mb.setExact(MatchField.IP_ECN,IpEcn.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));mb.setExact(MatchField.IP_DSCP,IpDscp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));} else {mb.setMasked(MatchField.IP_ECN,IpEcn.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),IpEcn.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));mb.setMasked(MatchField.IP_DSCP,IpDscp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),IpDscp.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));}break;case STR_NW_ECN:if (dataMask.length == 1) {mb.setExact(MatchField.IP_ECN,IpEcn.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));} else {mb.setMasked(MatchField.IP_ECN,IpEcn.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),IpEcn.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));}break;case STR_NW_DSCP:if (dataMask.length == 1) {mb.setExact(MatchField.IP_DSCP,IpDscp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))));} else {mb.setMasked(MatchField.IP_DSCP,IpDscp.of(dataMask[0].contains("0x") ? U8.t(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[0]))),IpDscp.of(dataMask[1].contains("0x") ? U8.t(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.t(Short.valueOf(dataMask[1]))));}break;case STR_SCTP_DST:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.SCTP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.SCTP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_SCTP_SRC:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.SCTP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.SCTP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_UDP_DST:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.UDP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.UDP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_UDP_SRC:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.UDP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.UDP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_TCP_DST:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.TCP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TCP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_TCP_SRC:if (mb.get(MatchField.IP_PROTO) == null) {llValues.add(key_value);} else {if (dataMask.length == 1) {mb.setExact(MatchField.TCP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TCP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_TP_DST:if ((ipProto=mb.get(MatchField.IP_PROTO)) == null) {llValues.add(key_value);} else if (ipProto == IpProtocol.TCP) {if (dataMask.length == 1) {mb.setExact(MatchField.TCP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TCP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}} else if (ipProto == IpProtocol.UDP) {if (dataMask.length == 1) {mb.setExact(MatchField.UDP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.UDP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}} else if (ipProto == IpProtocol.SCTP) {if (dataMask.length == 1) {mb.setExact(MatchField.SCTP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.SCTP_DST,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_TP_SRC:if ((ipProto=mb.get(MatchField.IP_PROTO)) == null) {llValues.add(key_value);} else if (ipProto == IpProtocol.TCP) {if (dataMask.length == 1) {mb.setExact(MatchField.TCP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TCP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}} else if (ipProto == IpProtocol.UDP) {if (dataMask.length == 1) {mb.setExact(MatchField.UDP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.UDP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}} else if (ipProto == IpProtocol.SCTP) {if (dataMask.length == 1) {mb.setExact(MatchField.SCTP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.SCTP_SRC,TransportPort.of(dataMask[0].contains("0x") ? Integer.valueOf(dataMask[0].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[0])),TransportPort.of(dataMask[1].contains("0x") ? Integer.valueOf(dataMask[1].replaceFirst("0x",""),16) : Integer.valueOf(dataMask[1])));}}break;case STR_ICMP_TYPE:if (dataMask.length == 1) {mb.setExact(MatchField.ICMPV4_TYPE,ICMPv4Type.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ICMPV4_TYPE,ICMPv4Type.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])),ICMPv4Type.of(dataMask[1].contains("0x") ? Short.valueOf(dataMask[1].replaceFirst("0x",""),16) : Short.valueOf(dataMask[1])));}break;case STR_ICMP_CODE:if (dataMask.length == 1) {mb.setExact(MatchField.ICMPV4_CODE,ICMPv4Code.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ICMPV4_CODE,ICMPv4Code.of(dataMask[0].contains("0x") ? Short.valueOf(dataMask[0].replaceFirst("0x",""),16) : Short.valueOf(dataMask[0])),ICMPv4Code.of(dataMask[1].contains("0x") ? Short.valueOf(dataMask[1].replaceFirst("0x",""),16) : Short.valueOf(dataMask[1])));}break;case STR_ICMPV6_TYPE:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.ICMPV6_TYPE,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ICMPV6_TYPE,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U8.of(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[1])));}break;case STR_ICMPV6_CODE:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.ICMPV6_CODE,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ICMPV6_CODE,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U8.of(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[1])));}break;case STR_IPV6_ND_SSL:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.IPV6_ND_SLL,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.IPV6_ND_SLL,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_IPV6_ND_TTL:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}if (dataMask.length == 1) {mb.setExact(MatchField.IPV6_ND_TLL,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.IPV6_ND_TLL,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_IPV6_ND_TARGET:if (ver10 == true) {throw new IllegalArgumentException("OF Version incompatible");}mb.setMasked(MatchField.IPV6_ND_TARGET,IPv6AddressWithMask.of(key_value[1]));break;case STR_ARP_OPCODE:if (dataMask.length == 1) {mb.setExact(MatchField.ARP_OP,dataMask[0].contains("0x") ? ArpOpcode.of(Integer.valueOf(dataMask[0].replaceFirst("0x",""),16)) : ArpOpcode.of(Integer.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.ARP_OP,dataMask[0].contains("0x") ? ArpOpcode.of(Integer.valueOf(dataMask[0].replaceFirst("0x",""),16)) : ArpOpcode.of(Integer.valueOf(dataMask[0])),dataMask[1].contains("0x") ? ArpOpcode.of(Integer.valueOf(dataMask[1].replaceFirst("0x",""),16)) : ArpOpcode.of(Integer.valueOf(dataMask[1])));}break;case STR_ARP_SHA:if (dataMask.length == 1) {mb.setExact(MatchField.ARP_SHA,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.ARP_SHA,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_ARP_DHA:if (dataMask.length == 1) {mb.setExact(MatchField.ARP_THA,MacAddress.of(dataMask[0]));} else {mb.setMasked(MatchField.ARP_THA,MacAddress.of(dataMask[0]),MacAddress.of(dataMask[1]));}break;case STR_ARP_SPA:mb.setMasked(MatchField.ARP_SPA,IPv4AddressWithMask.of(key_value[1]));break;case STR_ARP_DPA:mb.setMasked(MatchField.ARP_TPA,IPv4AddressWithMask.of(key_value[1]));break;case STR_MPLS_LABEL:if (dataMask.length == 1) {mb.setExact(MatchField.MPLS_LABEL,dataMask[0].contains("0x") ? U32.of(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U32.of(Long.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.MPLS_LABEL,dataMask[0].contains("0x") ? U32.of(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U32.of(Long.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U32.of(Long.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U32.of(Long.valueOf(dataMask[1])));}break;case STR_MPLS_TC:if (dataMask.length == 1) {mb.setExact(MatchField.MPLS_TC,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.MPLS_TC,dataMask[0].contains("0x") ? U8.of(Short.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U8.of(Short.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U8.of(Short.valueOf(dataMask[1])));}break;case STR_MPLS_BOS:mb.setExact(MatchField.MPLS_BOS,key_value[1].equalsIgnoreCase("true") ? OFBooleanValue.TRUE : OFBooleanValue.FALSE);break;case STR_METADATA:if (dataMask.length == 1) {mb.setExact(MatchField.METADATA,dataMask[0].contains("0x") ? OFMetadata.ofRaw(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : OFMetadata.ofRaw(Long.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.METADATA,dataMask[0].contains("0x") ? OFMetadata.ofRaw(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : OFMetadata.ofRaw(Long.valueOf(dataMask[0])),dataMask[1].contains("0x") ? OFMetadata.ofRaw(Long.valueOf(dataMask[1].replaceFirst("0x",""),16)) : OFMetadata.ofRaw(Long.valueOf(dataMask[1])));}break;case STR_TUNNEL_ID:if (dataMask.length == 1) {mb.setExact(MatchField.TUNNEL_ID,dataMask[0].contains("0x") ? U64.of(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U64.of(Long.valueOf(dataMask[0])));} else {mb.setMasked(MatchField.TUNNEL_ID,dataMask[0].contains("0x") ? U64.of(Long.valueOf(dataMask[0].replaceFirst("0x",""),16)) : U64.of(Long.valueOf(dataMask[0])),dataMask[1].contains("0x") ? U64.of(Long.valueOf(dataMask[1].replaceFirst("0x",""),16)) : U64.of(Long.valueOf(dataMask[1])));}break;case STR_TUNNEL_IPV4_SRC:if (dataMask.length == 1) {mb.setExact(MatchField.TUNNEL_IPV4_SRC,IPv4Address.of(key_value[1]));} else {mb.setMasked(MatchField.TUNNEL_IPV4_SRC,IPv4AddressWithMask.of(key_value[1]));}break;case STR_TUNNEL_IPV4_DST:if (dataMask.length == 1) {mb.setExact(MatchField.TUNNEL_IPV4_DST,IPv4Address.of(key_value[1]));} else {mb.setMasked(MatchField.TUNNEL_IPV4_DST,IPv4AddressWithMask.of(key_value[1]));}break;case STR_PBB_ISID:break;default :throw new IllegalArgumentException("unknown token " + key_value + " parsing "+ match);}}return mb.build();}  }
class C{  public static NetworkWeb newInstance(Context context){  NetworkWeb web=new NetworkWeb(context);  return web;}  }
class C{  public void clear(){  root=null;  size=0;}  }
class C{  private void handleJsonSignOut(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String csrft;  boolean noMatterWhat;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    csrft=json.getString("csrft");    noMatterWhat=json.getBoolean("noMatterWhat");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (isTheCsrftWrong(requestAndResponse,csrft)) {    returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));    return;  }  final User currentUser=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));  boolean needsPassword=false;  boolean needsUsername=false;  if (currentUser != null) {    needsPassword=doesUserNotHavePasswordAndNeedsIt(currentUser);    needsUsername=currentUser.getIsAnon();  }  if ((needsUsername || needsPassword) && noMatterWhat == false) {    requestAndResponse.setResponseContentTypeJson();    requestAndResponse.response.setStatus(HttpServletResponse.SC_BAD_REQUEST);    requestAndResponse.print("{\"needsPassword\":" + needsPassword + ",\"needsUsername\":"+ needsUsername+ "}");    return;  }  unmapSessionToUser(requestAndResponse);  returnJson200(requestAndResponse);}  }
class C{  private static Bitmap createPaddedBitmap(Bitmap bitmapIn,XMPMeta xmp,int intermediateWidth){  try {    int croppedAreaWidth=getInt(xmp,CROPPED_AREA_IMAGE_WIDTH_PIXELS);    int croppedAreaHeight=getInt(xmp,CROPPED_AREA_IMAGE_HEIGHT_PIXELS);    int fullPanoWidth=getInt(xmp,CROPPED_AREA_FULL_PANO_WIDTH_PIXELS);    int fullPanoHeight=getInt(xmp,CROPPED_AREA_FULL_PANO_HEIGHT_PIXELS);    int left=getInt(xmp,CROPPED_AREA_LEFT);    int top=getInt(xmp,CROPPED_AREA_TOP);    if (fullPanoWidth == 0 || fullPanoHeight == 0) {      return bitmapIn;    }    Bitmap paddedBitmap=null;    float scale=intermediateWidth / (float)fullPanoWidth;    while (paddedBitmap == null) {      try {        paddedBitmap=Bitmap.createBitmap((int)(fullPanoWidth * scale),(int)(fullPanoHeight * scale),Bitmap.Config.ARGB_8888);      } catch (      OutOfMemoryError e) {        System.gc();        scale/=2;      }    }    Canvas paddedCanvas=new Canvas(paddedBitmap);    int right=left + croppedAreaWidth;    int bottom=top + croppedAreaHeight;    RectF destRect=new RectF(left * scale,top * scale,right * scale,bottom * scale);    paddedCanvas.drawBitmap(bitmapIn,null,destRect,null);    return paddedBitmap;  } catch (  XMPException ex) {  }  return bitmapIn;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tSpecify list of columns to copy. First and last are valid\n" + "\tindexes. (default none)","R",1,"-R <index1,index2-index4,...>"));  newVector.addElement(new Option("\tInvert matching sense (i.e. copy all non-specified columns)","V",0,"-V"));  return newVector.elements();}  }
class C{  @POST @Path("/internal/switchover") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response switchover(@QueryParam("newActiveSiteUUid") String newActiveSiteUUID,@QueryParam("vdcVersion") String vdcTargetVersion){  log.info("Begin to switchover internally for standby UUID {}",newActiveSiteUUID);  Site newActiveSite=null;  Site oldActiveSite=null;  try {    newActiveSite=drUtil.getSiteFromLocalVdc(newActiveSiteUUID);    oldActiveSite=drUtil.getSiteFromLocalVdc(drUtil.getActiveSite().getUuid());    if (StringUtils.isEmpty(oldActiveSite.getSiteShortId())) {      oldActiveSite.setSiteShortId(newActiveSite.getVdcShortId());    }    oldActiveSite.setState(SiteState.STANDBY_SYNCED);    coordinator.persistServiceConfiguration(oldActiveSite.toConfiguration());    newActiveSite.setState(SiteState.ACTIVE);    coordinator.persistServiceConfiguration(newActiveSite.toConfiguration());    drUtil.updateVdcTargetVersion(drUtil.getLocalSite().getUuid(),SiteInfo.DR_OP_SWITCHOVER,Long.parseLong(vdcTargetVersion),oldActiveSite.getUuid(),newActiveSite.getUuid());    return Response.status(Response.Status.ACCEPTED).build();  } catch (  Exception e) {    log.error(String.format("Error happened when switchover to site %s",newActiveSiteUUID),e);    throw APIException.internalServerErrors.switchoverFailed(oldActiveSite.getName(),newActiveSite.getName(),e.getMessage());  }}  }
class C{  public boolean deleteEntry(int index){  if (index >= 0 && index < m_items.size()) {    if (isStoreAttachmentsOnFileSystem) {      final MAttachmentEntry entry=m_items.get(index);      final File file=entry.getFile();      log.fine("delete: " + file.getAbsolutePath());      if (file != null && file.exists()) {        if (!file.delete()) {          log.warning("unable to delete " + file.getAbsolutePath());        }      }    }    m_items.remove(index);    log.config("Index=" + index + " - NewSize="+ m_items.size());    return true;  }  log.warning("Not deleted Index=" + index + " - Size="+ m_items.size());  return false;}  }
class C{  public boolean isLong(String input){  return GenericValidator.isLong(input);}  }
class C{  public static void log(Logger logger,long startMillis,String message){  if (logger.isTraceEnabled()) {    long now=System.currentTimeMillis();    logger.trace("PERFORMANCE: {}: {}: {}",new Object[]{now,now - startMillis,message});  }}  }
class C{  public Comment(Document ownerDocument,String comment){  super(ownerDocument,NodeType.COMMENT,null);  this.nodeValue=comment;}  }
class C{  public Cheque withNoteUser(User user){  this.setNotes(SampleDataService.getSetConsistFrom(null));  return this;}  }
class C{  public String globalInfo(){  return "Converts a nominal attribute (that is, a set number of values) to string " + "(that is, an unspecified number of values).";}  }
class C{  public ComponentBuilder retain(FormatRetention retention){  BaseComponent previous=current;switch (retention) {case NONE:    current=new TextComponent(current.getText());  break;case ALL:break;case EVENTS:current=new TextComponent(current.getText());current.setInsertion(previous.getInsertion());current.setClickEvent(previous.getClickEvent());current.setHoverEvent(previous.getHoverEvent());break;case FORMATTING:current.setClickEvent(null);current.setHoverEvent(null);break;}return this;}  }
class C{  public static void createNewFile(File file) throws IOException {  if (file.exists()) {    file.delete();  }  file.getParentFile().mkdirs();  file.createNewFile();}  }
class C{  public GoogleBaseService(String applicationName,String developerKey){  this(applicationName);}  }
class C{  @Override public void SendCanaryToTopicPartition(String topicName,String partitionId){  m_producer.send(createCanaryMessage(topicName,partitionId));}  }
class C{  public void keyReleased(KeyEvent e){}  }
class C{  private void notifiyDownloadState(){synchronized (mDownloadMonitor) {    Log.v(LOG_TAG,"notifiy download manager state changed.");    mDownloadMonitor.notify();  }}  }
class C{  private AlignmentPattern handlePossibleCenter(int[] stateCount,int i,int j){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,2 * stateCount[1],stateCountTotal);  if (!Float.isNaN(centerI)) {    float estimatedModuleSize=(float)(stateCount[0] + stateCount[1] + stateCount[2]) / 3.0f;    for (    AlignmentPattern center : possibleCenters) {      if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {        return center.combineEstimate(centerI,centerJ,estimatedModuleSize);      }    }    AlignmentPattern point=new AlignmentPattern(centerJ,centerI,estimatedModuleSize);    possibleCenters.add(point);    if (resultPointCallback != null) {      resultPointCallback.foundPossibleResultPoint(point);    }  }  return null;}  }
class C{  public final boolean isStrictfp(){  return (this.modifiers & ClassFileConstants.AccStrictfp) != 0;}  }
class C{  public static <T>Task<T> from(CompletionStage<T> stage){  if (stage instanceof Task) {    return (Task<T>)stage;  }  final Task<T> t=new Task<>();  stage.handle(null);  return t;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MGoal[");  sb.append(get_ID()).append("-").append(getName()).append(",").append(getGoalPerformance()).append("]");  return sb.toString();}  }
class C{  @Override public void printCase(Vertex expression,Writer writer,String indent,Set<Vertex> elements,List<Vertex> newVariables,List<Vertex> newFunctions,List<Vertex> newStates,Network network) throws IOException {  Vertex variable=expression.getRelationship(Primitive.CASE);  Vertex pattern=expression.getRelationship(Primitive.PATTERN);  Vertex template=expression.getRelationship(Primitive.TEMPLATE);  Vertex that=expression.getRelationship(Primitive.THAT);  Vertex topic=expression.getRelationship(Primitive.TOPIC);  Vertex as=expression.getRelationship(Primitive.AS);  List<Relationship> states=expression.orderedRelationships(Primitive.GOTO);  List<Relationship> fors=expression.orderedRelationships(Primitive.FOR);  if (variable == null && pattern == null) {    return;  }  if ((variable != null) && variable.instanceOf(Primitive.VARIABLE) && (!elements.contains(variable))) {    newVariables.add(variable);    elements.add(variable);  }  writer.write(indent);  if (pattern != null) {    writer.write("pattern ");    variable=pattern;  } else {    writer.write("case ");  }  if (variable.instanceOf(Primitive.EXPRESSION)) {    writer.write("(");  } else   if (variable.instanceOf(Primitive.ARRAY)) {    writer.write("any ");    if (!variable.hasRelationship(Primitive.TYPE,Primitive.REQUIRED)) {      writer.write("or none ");    }  }  printElement(variable,writer,indent,newFunctions,newVariables,elements,network);  if (variable.instanceOf(Primitive.EXPRESSION)) {    writer.write(")");  }  if (as != null) {    writer.write(" as ");    printElement(as,writer,indent,newFunctions,newVariables,elements,network);  }  if (topic != null) {    writer.write("\r\n");    writer.write(indent);    writer.write("\t");    writer.write("topic ");    printElement(topic,writer,indent,newFunctions,newVariables,elements,network);  }  if (that != null) {    writer.write("\r\n");    writer.write(indent);    writer.write("\t");    writer.write("that ");    printElement(that,writer,indent,newFunctions,newVariables,elements,network);  }  if (template != null) {    writer.write("\r\n");    writer.write(indent);    writer.write("\t");    writer.write("template ");    if (template.instanceOf(Primitive.EXPRESSION)) {      writer.write("(");    }    printElement(template,writer,indent,newFunctions,newVariables,elements,network);    if (template.instanceOf(Primitive.EXPRESSION)) {      writer.write(")");    }  }  if (states != null) {    if ((states.size() == 1) && (states.get(0).getTarget().is(Primitive.RETURN))) {      writer.write(" return");    } else {      writer.write(" goto ");      for (Iterator<Relationship> iterator=states.iterator(); iterator.hasNext(); ) {        Vertex state=iterator.next().getTarget();        if (!elements.contains(state)) {          newStates.add(state);          elements.add(state);        }        printElement(state,writer,indent,null,newVariables,elements,network);        if (iterator.hasNext()) {          writer.write(", ");        }      }    }  }  if (fors != null) {    writer.write(" for each ");    for (Iterator<Relationship> iterator=fors.iterator(); iterator.hasNext(); ) {      Vertex argument=iterator.next().getTarget();      if (argument.instanceOf(Primitive.VARIABLE) && (!elements.contains(argument))) {        newVariables.add(argument);        elements.add(argument);      }      printElement(argument,writer,indent,null,newVariables,elements,network);      if (iterator.hasNext()) {        writer.write(" of ");      }    }  }  writer.write(";\r\n\r\n");}  }
class C{  public void popElement(){  indexMapStack[pointer]=null;  pathStack[pointer]=null;  currentPath=null;  pointer--;}  }
class C{  @Override public <T extends DataObject>void update(T... objs) throws DatabaseException {  this.update(Arrays.asList(objs));}  }
class C{  public FSMImp(Object eventsource,TxState initialstate){  state_=initialstate;  enterlisteners_=new Hashtable<TxState,Set<EventListener>>();  preenterlisteners_=new Hashtable<TxState,Set<EventListener>>();  transitionlisteners_=new Hashtable<TxState,Hashtable<TxState,Set<EventListener>>>();  pretransitionlisteners_=new Hashtable<TxState,Hashtable<TxState,Set<EventListener>>>();  eventsource_=eventsource;  stateLatch_=new Object();}  }
class C{  @Field(10) public double date(){  return this.io.getDoubleField(this,10);}  }
class C{  private void releaseInflatedBytes() throws IOException {  if (bufferBytesHeldByInflater == 0)   return;  int toRelease=bufferBytesHeldByInflater - inflater.getRemaining();  bufferBytesHeldByInflater-=toRelease;  source.skip(toRelease);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.548 -0400",hash_original_method="31F2290758882FE23943782B8BDBF92D",hash_generated_method="45021EC3D26CE7662296424C7BD5E1FD") public SizeFileComparator(){  this.sumDirectoryContents=false;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("execstatus") @Valid ExecStatus execStatus,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.ExecStatus jpaExecStatus=new com.wipro.ats.bdre.md.dao.jpa.ExecStatus();    jpaExecStatus.setExecStateId(execStatus.getExecStateId());    jpaExecStatus.setDescription(execStatus.getDescription());    Integer execStateId=execStatusDAO.insert(jpaExecStatus);    jpaExecStatus.setExecStateId(execStateId);    restWrapper=new RestWrapper(execStatus,RestWrapper.OK);    LOGGER.info("Record with ID:" + execStatus.getExecStateId() + " inserted in ExecStatus by User:"+ principal.getName()+ execStatus);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public void write(OutputStream out) throws Exception {  try (ZipOutputStream zip=new ZipOutputStream(out)){    AsicHelper.write(this,zip);  } }  }
class C{  public void load(int identificador,DbConnection db) throws ISicresAdminDAOException {  DynamicTable tableInfo=new DynamicTable();  DynamicRows rowsInfo=new DynamicRows();  DynamicRow rowInfo=new DynamicRow();  SicresInformeTabla table=new SicresInformeTabla();  if (logger.isDebugEnabled()) {    logger.debug("Obteniendo datos de scr_report...");  }  try {    tableInfo.setTableObject(table);    tableInfo.setClassName(table.getClass().getName());    tableInfo.setTablesMethod("getTableName");    tableInfo.setColumnsMethod("getColumnNames");    rowInfo.addRow(this);    rowInfo.setClassName(this.getClass().getName());    rowInfo.setValuesMethod("loadAllValues");    rowsInfo.add(rowInfo);    if (!DynamicFns.select(db,table.getById(identificador),tableInfo,rowsInfo,false)) {    }    if (logger.isDebugEnabled()) {      logger.debug("Datos de scr_report obtenidos.");    }  } catch (  Exception e) {    if (e instanceof ISicresAdminDAOException)     logger.warn("No se ha encontrado fila en scr_report"); else     logger.error("Error obteniendo datos de scr_report");    throw new ISicresAdminDAOException(ISicresAdminDAOException.EXC_GENERIC_EXCEPCION,e);  }}  }
class C{  public void addNotificationListener(NotificationListener listener,NotificationFilter filter,Object handback){  if (listener == null) {    throw new IllegalArgumentException("Listener can't be null");  }  listenerList.add(new ListenerInfo(listener,filter,handback));}  }
class C{  public CCTest(String name){  super(name);}  }
class C{  public void addConfiguredJavac(final Javac javac){  this.javac=javac;  jointCompilation=true;}  }
class C{  public NewTimeSeriesAction(Workspace workspace){  super("Time Series",workspace);  putValue(SMALL_ICON,ResourceManager.getImageIcon("CurveChart.png"));  putValue(SHORT_DESCRIPTION,"New Time Series");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.513 -0500",hash_original_method="B5DE2229663641D636EF433E62C83E7A",hash_generated_method="D28055B98E7DD2D66204F5D003B9EB24") public boolean isFile(){  return true;}  }
class C{  public static boolean checkPlayServices(Activity activity){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(activity);  if (resultCode != ConnectionResult.SUCCESS) {    Timber.e("Google play services don't working.");    if (apiAvailability.isUserResolvableError(resultCode)) {      apiAvailability.getErrorDialog(activity,resultCode,9000).show();    } else {      Timber.e("GCM - This device is not supported.");    }    return false;  }  return true;}  }
class C{  public SVGOMFontFaceUriElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public final void printJsonString(CharSequence text) throws IOException {  if (text == null) {    appendAscii("null");  } else {    appendAscii('"');    printCodePoints(text,JSON_ESCAPE_CODES);    appendAscii('"');  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (nodes == null) {    throw new NullPointerException();  }  if (edgesSet == null) {    throw new NullPointerException();  }  if (edgeLists == null) {    throw new NullPointerException();  }  if (ambiguousTriples == null) {    ambiguousTriples=new HashSet<>();  }  if (highlightedEdges == null) {    highlightedEdges=new HashSet<>();  }  if (underLineTriples == null) {    underLineTriples=new HashSet<>();  }  if (dottedUnderLineTriples == null) {    dottedUnderLineTriples=new HashSet<>();  }}  }
class C{  public static <S extends HasMouseOutHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseOutEvent event=new MouseOutEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public static BinaryVariable newBoolean(){  return new BinaryVariable(1);}  }
class C{  public int progress(int amount){  int reportCount=reportZeroPercent();  currentProgress+=amount;  while (currentProgress >= reportProgress) {    currentProgress-=reportProgress;    currentPercent=Math.min(currentPercent + percentProgress,100);    report();    ++reportCount;  }  return reportCount;}  }
class C{  private CIndegreeEvaluator(){}  }
class C{  public static BufferedImage downloadImage(String url){  try {    return ImageIO.read(new BufferedInputStream(new URL(url).openStream()));  } catch (  IOException e) {    LLibrary.LOGGER.error(CrashReport.makeCrashReport(e,"Failed to receive data from URL: " + url).getCompleteReport());    return null;  }}  }
class C{  public static String buildRandomSort(final Collection<String> fieldNames){  ArrayList<String> shuffledNames=new ArrayList<>(fieldNames);  Collections.replaceAll(shuffledNames,"id","score");  Collections.shuffle(shuffledNames,random());  final StringBuilder result=new StringBuilder();  final int numClauses=TestUtil.nextInt(random(),2,5);  for (int i=0; i < numClauses; i++) {    String field=shuffledNames.get(i);    if (!"score".equals(field) && 0 == TestUtil.nextInt(random(),0,7)) {      if (field.contains("float") || field.contains("double") || field.contains("int")|| field.contains("long")) {        field="abs(" + field + ")";      } else {        field="if(exists(" + field + "),47,83)";      }    }    result.append(field).append(random().nextBoolean() ? " asc, " : " desc, ");  }  result.append("id").append(random().nextBoolean() ? " asc" : " desc");  return result.toString();}  }
class C{  public void appendValue(ValueSource value,ServerType type,boolean binary) throws IOException {  if (!binary) {switch (type.getBinaryEncoding()) {case BINARY_OCTAL_TEXT:      processBinaryText(value);    break;default :  type.getType().format(value,appender);break;}} else {switch (type.getBinaryEncoding()) {case BINARY_OCTAL_TEXT:getByteStream().write(value.getBytes());break;case INT_8:getDataStream().write((byte)typesTranslator.getIntegerValue(value));break;case INT_16:getDataStream().writeShort((short)typesTranslator.getIntegerValue(value));break;case INT_32:getDataStream().writeInt((int)typesTranslator.getIntegerValue(value));break;case INT_64:getDataStream().writeLong(typesTranslator.getIntegerValue(value));break;case FLOAT_32:getDataStream().writeFloat(value.getFloat());break;case FLOAT_64:getDataStream().writeDouble(value.getDouble());break;case STRING_BYTES:getByteStream().write(value.getString().getBytes(encoding));break;case BOOLEAN_C:getDataStream().write(value.getBoolean() ? 1 : 0);break;case TIMESTAMP_FLOAT64_SECS_2000_NOTZ:getDataStream().writeDouble(seconds2000NoTZ(typesTranslator.getTimestampMillisValue(value)) + typesTranslator.getTimestampNanosValue(value) / 1.0e9);break;case TIMESTAMP_INT64_MICROS_2000_NOTZ:getDataStream().writeLong(seconds2000NoTZ(typesTranslator.getTimestampMillisValue(value)) * 1000000L + typesTranslator.getTimestampNanosValue(value) / 1000);break;case DAYS_2000:getDataStream().writeInt(days2000(typesTranslator.getTimestampMillisValue(value)));break;case TIME_FLOAT64_SECS_NOTZ:getDataStream().writeDouble(timeSecsNoTZ(typesTranslator.getTimestampMillisValue(value)));break;case TIME_INT64_MICROS_NOTZ:getDataStream().writeLong(timeSecsNoTZ(typesTranslator.getTimestampMillisValue(value)) * 1000000L);break;case DECIMAL_PG_NUMERIC_VAR:for (short d : pgNumericVar(typesTranslator.getDecimalValue(value))) {getDataStream().writeShort(d);}break;case UUID:getDataStream().write(AkGUID.uuidToBytes((java.util.UUID)value.getObject()));break;case NONE:default :throw new UnsupportedOperationException("No binary encoding for " + type);}}}  }
class C{  public UiBuilder<T> font(Font font){  this.control.setFont(font);  return this;}  }
class C{  public ImageMaster(URL propertiesURL){  Properties props=new Properties();  loadProperties(props,propertiesURL);  setProperties(props);}  }
class C{  public XMLStreamException(String msg,Throwable nested){  super(msg);  _nested=nested;}  }
class C{  public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  if (type.equals(jmri.ReporterManager.class)) {    return true;  }  if (_xnettunnel != null) {    return _xnettunnel.getStreamPortController().getSystemConnectionMemo().provides(type);  }  return false;}  }
class C{  public boolean isEmpty(){  return callbackSet.isEmpty() && indizes.isEmpty();}  }
class C{  public void deleteInvalidFlows(IOFSwitch sw,Map<Short,List<OFMatch>> invalidOutportAndMatch){  log.debug("Deleting invalid flows on switch : " + sw.getId());  Map<Short,List<OFMatch>> invalidNeighborIngressAndMatches=new HashMap<Short,List<OFMatch>>();  for (  Short outPort : invalidOutportAndMatch.keySet()) {    List<OFFlowStatisticsReply> flows=getFlows(sw,outPort);    for (    OFFlowStatisticsReply flow : flows) {      for (      OFMatch match : invalidOutportAndMatch.get(outPort)) {        if (HexString.toHexString(flow.getMatch().getDataLayerDestination()).equals(HexString.toHexString(match.getDataLayerDestination())) && HexString.toHexString(flow.getMatch().getDataLayerSource()).equals(HexString.toHexString(match.getDataLayerSource())) && flow.getMatch().getDataLayerType() == match.getDataLayerType() && flow.getMatch().getDataLayerVirtualLan() == match.getDataLayerVirtualLan() && flow.getMatch().getNetworkDestination() == match.getNetworkDestination() && flow.getMatch().getNetworkDestinationMaskLen() == match.getNetworkDestinationMaskLen() && flow.getMatch().getNetworkProtocol() == match.getNetworkProtocol() && flow.getMatch().getNetworkSource() == match.getNetworkSource() && flow.getMatch().getNetworkSourceMaskLen() == match.getNetworkSourceMaskLen() && flow.getMatch().getNetworkTypeOfService() == match.getNetworkTypeOfService()) {          if (invalidNeighborIngressAndMatches.containsKey(match.getInputPort()))           invalidNeighborIngressAndMatches.get(match.getInputPort()).add(match); else {            List<OFMatch> matches=new ArrayList<OFMatch>();            matches.add(match);            invalidNeighborIngressAndMatches.put(match.getInputPort(),matches);          }          clearFlowMods(sw,flow.getMatch(),outPort);        }      }    }    Map<IOFSwitch,Map<Short,List<OFMatch>>> neighborSwitches=new HashMap<IOFSwitch,Map<Short,List<OFMatch>>>();    for (    Link link : links.keySet()) {      if (link.getDst() == sw.getId()) {        for (        Entry<Short,List<OFMatch>> ingressPort : invalidNeighborIngressAndMatches.entrySet()) {          if (link.getDstPort() == ingressPort.getKey()) {            Map<Short,List<OFMatch>> invalidNeighborOutportAndMatch=new HashMap<Short,List<OFMatch>>();            invalidNeighborOutportAndMatch.put(link.getSrcPort(),ingressPort.getValue());            neighborSwitches.put(floodlightProvider.getSwitch(link.getSrc()),invalidNeighborOutportAndMatch);          }        }      }    }    log.debug("We have " + neighborSwitches.size() + " neighbors to deal with!");    for (    IOFSwitch neighborSwitch : neighborSwitches.keySet()) {      log.debug("NeighborSwitch ID : " + neighborSwitch.getId());      deleteInvalidFlows(neighborSwitch,neighborSwitches.get(neighborSwitch));    }  }}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Set))   return false;  Collection<?> c=(Collection<?>)o;  if (c.size() != size())   return false;  try {    return containsAll(c);  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }}  }
class C{  public static int countMatches(String str,String sub){  if (sub.equals("")) {    return 0;  }  if (str == null) {    return 0;  }  int count=0;  int idx=0;  while ((idx=str.indexOf(sub,idx)) != -1) {    count++;    idx+=sub.length();  }  return count;}  }
class C{  public void testBug15065() throws Exception {  createTable("testBug15065","(field1 int)");  this.stmt.executeUpdate("INSERT INTO testBug15065 VALUES (1)");  Connection advisorConn=null;  Statement advisorStmt=null;  try {    Properties props=new Properties();    props.setProperty("useUsageAdvisor","true");    props.setProperty("logger","com.mysql.jdbc.log.StandardLogger");    advisorConn=getConnectionWithProps(props);    advisorStmt=advisorConn.createStatement();    Method[] getMethods=ResultSet.class.getMethods();    PrintStream oldErr=System.err;    try {      ByteArrayOutputStream bOut=new ByteArrayOutputStream();      System.setErr(new PrintStream(bOut));      HashMap<String,String> methodsToSkipMap=new HashMap<String,String>();      methodsToSkipMap.put("getURL",null);      methodsToSkipMap.put("getNCharacterStream",null);      methodsToSkipMap.put("getNClob",null);      methodsToSkipMap.put("getNString",null);      methodsToSkipMap.put("getRowId",null);      methodsToSkipMap.put("getSQLXML",null);      for (int j=0; j < 2; j++) {        for (int i=0; i < getMethods.length; i++) {          String methodName=getMethods[i].getName();          if (methodName.startsWith("get") && !methodsToSkipMap.containsKey(methodName)) {            Class<?>[] parameterTypes=getMethods[i].getParameterTypes();            if (parameterTypes.length == 1 && parameterTypes[0] == Integer.TYPE) {              if (j == 0) {                this.rs=advisorStmt.executeQuery("SELECT COUNT(*) FROM testBug15065");              } else {                this.rs=advisorConn.prepareStatement("SELECT COUNT(*) FROM testBug15065").executeQuery();              }              this.rs.next();              try {                getMethods[i].invoke(this.rs,new Object[]{new Integer(1)});              } catch (              InvocationTargetException invokeEx) {                if (!invokeEx.getCause().getClass().isAssignableFrom(java.sql.SQLException.class) && !invokeEx.getCause().getClass().getName().equals("com.mysql.jdbc.NotImplemented") && !invokeEx.getCause().getClass().getName().equals("java.sql.SQLFeatureNotSupportedException")) {                  throw invokeEx;                }              }              this.rs.close();              this.rs=null;            }          }        }      }      String logOut=bOut.toString("ISO8859-1");      if (logOut.indexOf(".Level") != -1) {        return;      }      assertTrue("Usage advisor complained about columns:\n\n" + logOut,logOut.indexOf("columns") == -1);    }  finally {      System.setErr(oldErr);    }  }  finally {    if (advisorConn != null) {      advisorConn.close();    }  }}  }
class C{  public CanReply decodeFromHardware(AbstractMRReply m){  if (log.isDebugEnabled()) {    log.debug("Decoding from hardware: '" + m + "'\n");  }  Reply gc=(Reply)m;  CanReply ret=gc.createReply();  if (log.isDebugEnabled()) {    log.debug("Decoded " + gc + " as "+ ret);  }  return ret;}  }
class C{  private void findRelatedVolumes(){  for (  VolumeSpec volume : volumes) {    volume.relatedVolumes=Lists.newArrayList();    Set<String> volumeWwns=getVolumeWwns(volume);    for (    String relatedWwn : volumeWwns) {      BlockObjectRestRep related=findVolumeRestRepByWwn(relatedWwn);      if (related == null) {        related=BlockStorageUtils.getVolumeByWWN(relatedWwn);      }      if (related != null) {        volume.relatedVolumes.add(related);      }    }  }}  }
class C{  public synchronized void add_event(event_type type,String package_name) throws EventAlreadyProcessedException {  if (_processed) {    throw new EventAlreadyProcessedException();  }  _events.add(new Pair<event_type,String>(type,package_name));}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ContentEncodingParser.parse");  ContentEncodingList list=new ContentEncodingList();  try {    headerName(TokenTypes.CONTENT_ENCODING);    while (lexer.lookAhead(0) != '\n') {      ContentEncoding cl=new ContentEncoding();      cl.setHeaderName(SIPHeaderNames.CONTENT_ENCODING);      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      cl.setEncoding(token.getTokenValue());      this.lexer.SPorHT();      list.add(cl);      while (lexer.lookAhead(0) == ',') {        cl=new ContentEncoding();        this.lexer.match(',');        this.lexer.SPorHT();        this.lexer.match(TokenTypes.ID);        this.lexer.SPorHT();        token=lexer.getNextToken();        cl.setEncoding(token.getTokenValue());        this.lexer.SPorHT();        list.add(cl);      }    }    return list;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("ContentEncodingParser.parse");  }}  }
class C{  private void enablePahoLogging(){  try {    InputStream logPropStream=context.getResources().openRawResource(R.raw.jsr47android);    LogManager.getLogManager().readConfiguration(logPropStream);    logging=true;    HashMap<String,Connection> connections=(HashMap<String,Connection>)Connections.getInstance(context).getConnections();    if (!connections.isEmpty()) {      Entry<String,Connection> entry=connections.entrySet().iterator().next();      Connection connection=(Connection)entry.getValue();      connection.getClient().setTraceEnabled(true);      clientConnections.invalidateOptionsMenu();    } else {      Log.i("SampleListener","No connection to enable log in service");    }  } catch (  IOException e) {    Log.e("MqttAndroidClient","Error reading logging parameters",e);  }}  }
class C{  public static ReferenceRanges<String> createBedReferenceRanges(File bedFile) throws IOException {  final BedRangeLoader<String> brl=new SimpleBedRangeLoader();  brl.loadRanges(bedFile);  return brl.getReferenceRanges();}  }
class C{  private void sendPatch(ReleaseIPTask patchState,Operation postOperation){  if (postOperation == null) {    TaskUtils.sendSelfPatch(this,patchState);  } else {    postOperation.setBody(patchState).complete();  }}  }
class C{  protected HeadTable(){  super(TrueTypeTable.HEAD_TABLE);  setVersion(0x10000);  setFontRevision(0x10000);  setChecksumAdjustment(0);  setMagicNumber(0x5f0f3cf5);  setFlags((short)0x0);  setUnitsPerEm((short)64);  setCreated(System.currentTimeMillis());  setModified(System.currentTimeMillis());  setXMin((short)0);  setXMax((short)Short.MAX_VALUE);  setYMin((short)0);  setYMax((short)Short.MAX_VALUE);  setMacStyle((short)0x0);  setLowestRecPPem((short)0);  setFontDirectionHint((short)0);  setIndexToLocFormat((short)0);  setGlyphDataFormat((short)0);}  }
class C{  public ViPRSystemClient withAuthToken(String token){  setAuthToken(token);  return this;}  }
class C{  private void sendJournalFile(JournalFile[] journalFiles,JournalContent type) throws Exception {  for (  JournalFile jf : journalFiles) {    if (!started)     return;    replicator.syncJournalFile(jf,type);  }}  }
class C{  public static String qualifySignature(final String signature,final IType context){  if (context == null)   return signature;  String qualifier=Signature.getSignatureQualifier(signature);  if (qualifier.length() > 0)   return signature;  String elementType=Signature.getElementType(signature);  String erasure=Signature.getTypeErasure(elementType);  String simpleName=Signature.getSignatureSimpleName(erasure);  String genericSimpleName=Signature.getSignatureSimpleName(elementType);  int dim=Signature.getArrayCount(signature);  try {    String[][] strings=context.resolveType(simpleName);    if (strings != null && strings.length > 0)     qualifier=strings[0][0];  } catch (  JavaModelException e) {  }  if (qualifier.length() == 0)   return signature;  String qualifiedType=Signature.toQualifiedName(new String[]{qualifier,genericSimpleName});  String qualifiedSignature=Signature.createTypeSignature(qualifiedType,true);  String newSignature=Signature.createArraySignature(qualifiedSignature,dim);  return newSignature;}  }
class C{  public ReplDBMSHeaderData(long seqno,short fragno,boolean lastFrag,String sourceId,long epochNumber,String eventId,String shardId,Timestamp extractedTstamp,long latency,Timestamp updateTimestamp,long taskId){  this.seqno=seqno;  this.fragno=fragno;  this.lastFrag=lastFrag;  this.sourceId=sourceId;  this.epochNumber=epochNumber;  this.eventId=eventId;  this.shardId=shardId;  this.extractedTstamp=extractedTstamp;  this.appliedLatency=latency;  this.updateTstamp=updateTimestamp;  this.taskId=taskId;}  }
class C{  @Override public void processEvent(SimEvent ev){  int srcId=-1;switch (ev.getTag()) {case CloudSimTags.RESOURCE_CHARACTERISTICS:    srcId=((Integer)ev.getData()).intValue();  sendNow(srcId,ev.getTag(),getCharacteristics());break;case CloudSimTags.RESOURCE_DYNAMICS:srcId=((Integer)ev.getData()).intValue();sendNow(srcId,ev.getTag(),0);break;case CloudSimTags.RESOURCE_NUM_PE:srcId=((Integer)ev.getData()).intValue();int numPE=getCharacteristics().getNumberOfPes();sendNow(srcId,ev.getTag(),numPE);break;case CloudSimTags.RESOURCE_NUM_FREE_PE:srcId=((Integer)ev.getData()).intValue();int freePesNumber=getCharacteristics().getNumberOfFreePes();sendNow(srcId,ev.getTag(),freePesNumber);break;case CloudSimTags.CLOUDLET_SUBMIT:processCloudletSubmit(ev,false);break;case CloudSimTags.CLOUDLET_SUBMIT_ACK:processCloudletSubmit(ev,true);break;case CloudSimTags.CLOUDLET_CANCEL:processCloudlet(ev,CloudSimTags.CLOUDLET_CANCEL);break;case CloudSimTags.CLOUDLET_PAUSE:processCloudlet(ev,CloudSimTags.CLOUDLET_PAUSE);break;case CloudSimTags.CLOUDLET_PAUSE_ACK:processCloudlet(ev,CloudSimTags.CLOUDLET_PAUSE_ACK);break;case CloudSimTags.CLOUDLET_RESUME:processCloudlet(ev,CloudSimTags.CLOUDLET_RESUME);break;case CloudSimTags.CLOUDLET_RESUME_ACK:processCloudlet(ev,CloudSimTags.CLOUDLET_RESUME_ACK);break;case CloudSimTags.CLOUDLET_MOVE:processCloudletMove((int[])ev.getData(),CloudSimTags.CLOUDLET_MOVE);break;case CloudSimTags.CLOUDLET_MOVE_ACK:processCloudletMove((int[])ev.getData(),CloudSimTags.CLOUDLET_MOVE_ACK);break;case CloudSimTags.CLOUDLET_STATUS:processCloudletStatus(ev);break;case CloudSimTags.INFOPKT_SUBMIT:processPingRequest(ev);break;case CloudSimTags.VM_CREATE:processVmCreate(ev,false);break;case CloudSimTags.VM_CREATE_ACK:processVmCreate(ev,true);break;case CloudSimTags.VM_DESTROY:processVmDestroy(ev,false);break;case CloudSimTags.VM_DESTROY_ACK:processVmDestroy(ev,true);break;case CloudSimTags.VM_MIGRATE:processVmMigrate(ev,false);break;case CloudSimTags.VM_MIGRATE_ACK:processVmMigrate(ev,true);break;case CloudSimTags.VM_DATA_ADD:processDataAdd(ev,false);break;case CloudSimTags.VM_DATA_ADD_ACK:processDataAdd(ev,true);break;case CloudSimTags.VM_DATA_DEL:processDataDelete(ev,false);break;case CloudSimTags.VM_DATA_DEL_ACK:processDataDelete(ev,true);break;case CloudSimTags.VM_DATACENTER_EVENT:updateCloudletProcessing();checkCloudletCompletion();break;case containerCloudSimTags.CONTAINER_SUBMIT:processContainerSubmit(ev,true);break;case containerCloudSimTags.CONTAINER_MIGRATE:processContainerMigrate(ev,false);break;default :processOtherEvent(ev);break;}}  }
class C{  private Map<ContactId,ParticipantStatus> parseEncodedParticipantInfos(String participants){  String[] encodedParticipantInfos=participants.split(PARTICIPANT_INFO_PARTICIPANT_SEPARATOR);  Map<ContactId,ParticipantStatus> participantInfos=new HashMap<>();  for (  String encodedParticipantInfo : encodedParticipantInfos) {    String[] participantInfo=encodedParticipantInfo.split(PARTICIPANT_INFO_STATUS_SEPARATOR);    ContactId participant=ContactUtil.createContactIdFromTrustedData(participantInfo[0]);    ParticipantStatus status=ParticipantStatus.valueOf(Integer.parseInt(participantInfo[1]));    participantInfos.put(participant,status);  }  return participantInfos;}  }
class C{  public DataPoint(Vec numericalValues,int[] categoricalValues,CategoricalData[] categoricalData,double weight){  this.numericalValues=numericalValues;  this.categoricalValues=categoricalValues;  this.categoricalData=categoricalData;  this.weight=weight;}  }
class C{  public static void terminate(final JFrame parent,final IDebugger debugger){  checkArguments(parent,debugger);  try {    if (debugger.isConnected()) {      debugger.terminate();    }  } catch (  final DebugExceptionWrapper e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00193: " + "Could not send terminate command to the debug client";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the terminate command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The state of the debugged process remains unchanged."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);  }}  }
class C{  public void capturePageSnapshot(){  ScreenShot screenShot=new ScreenshotUtil(driver).captureWebPageSnapshot();  String title=screenShot.getTitle();  String url=screenShot.getLocation();  TestLogging.logWebOutput(url,title + " (" + TestLogging.buildScreenshotLog(screenShot)+ ")",false);}  }
class C{  public void selectAll(){  setAll(1.0d);}  }
class C{  void removeTombstoneUnderLock(BytesRef uid){  long uidRAMBytesUsed=BASE_BYTES_PER_BYTESREF + uid.bytes.length;  final VersionValue prev=tombstones.remove(uid);  if (prev != null) {    assert prev.delete();    long v=ramBytesUsedTombstones.addAndGet(-(BASE_BYTES_PER_CHM_ENTRY + prev.ramBytesUsed() + uidRAMBytesUsed));    assert v >= 0 : "bytes=" + v;  }  final VersionValue curVersion=maps.current.get(uid);  if (curVersion != null && curVersion.delete()) {    ramBytesUsedCurrent.addAndGet(curVersion.ramBytesUsed() + uidRAMBytesUsed);  }}  }
class C{  public ORDER_BY ORDER_BY(String orderBy){  return new ORDER_BY(this,orderBy);}  }
class C{  private void loadWallComments(){  getLoaderManager().restartLoader(AppConstants.Loaders.LOAD_WALL_COMMENTS,null,this);}  }
class C{  public DoubleLinkedList<IMove> validMoves(){  DoubleLinkedList<IMove> list=new DoubleLinkedList<IMove>();  list.insert(new IncrementMove(0));  list.insert(new IncrementMove(1));  return list;}  }
class C{  public static void addGhoulChestplateTexture(Item chestplate,ResourceLocation res){  if (chestplate == null || res == null)   return;  if (ghoul_chestplate.containsKey(chestplate))   FMLLog.log("AbyssalCraftAPI",Level.INFO,"Mod %s is overwriting the texture for Chestplate %s",Loader.instance().activeModContainer().getModId(),chestplate.getItemStackDisplayName(new ItemStack(chestplate)));  ghoul_chestplate.put(chestplate,res);}  }
class C{  @Override public void onOutputUpdated(String noteId,String paragraphId,String appId,String output){  Message msg=new Message(OP.APP_UPDATE_OUTPUT).put("noteId",noteId).put("paragraphId",paragraphId).put("appId",appId).put("data",output);  broadcast(noteId,msg);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__BINDING:    return isBinding();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_TYPE:  if (resolve)   return getDeclaredType();return basicGetDeclaredType();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__DECLARED_THIS_TYPE:return getDeclaredThisType();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__OWNED_TYPE_VARS:return getOwnedTypeVars();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS:return getUnboundTypeVars();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__UNBOUND_TYPE_VARS_UPPER_BOUNDS:return getUnboundTypeVarsUpperBounds();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__FPARS:return getFpars();case TypeRefsPackage.FUNCTION_TYPE_EXPRESSION__RETURN_TYPE_REF:return getReturnTypeRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  final void showDisposableMessage(String dialogKey,String message,int msgType){  showDisposableMessage(dialogKey,message,null,msgType);}  }
class C{  public SectionTableAction(String actionName){  super(actionName);  sectionManager=jmri.InstanceManager.getNullableDefault(jmri.SectionManager.class);  if (sectionManager == null) {    setEnabled(false);  }}  }
class C{  final void put(final ByteVector out){  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / (ClassWriter.ACC_SYNTHETIC_ATTRIBUTE / Opcodes.ACC_SYNTHETIC));  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (code.length > 0) {    ++attributeCount;  }  if (exceptionCount > 0) {    ++attributeCount;  }  out.putShort(attributeCount);  if (code.length > 0) {    int size=12 + code.length + 8 * 0;    out.putShort(cw.newUTF8("Code")).putInt(size);    out.putShort(maxStack).putShort(maxLocals);    out.putInt(code.length).putByteArray(code.data,0,code.length);    out.putShort(0);    attributeCount=0;    out.putShort(attributeCount);  }  if (exceptionCount > 0) {    out.putShort(cw.newUTF8("Exceptions")).putInt(2 * exceptionCount + 2);    out.putShort(exceptionCount);    for (int i=0; i < exceptionCount; ++i) {      out.putShort(exceptions[i]);    }  }}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:05.673 -0500",hash_original_method="2A78BD7C43C6EA7A88473349A445518E",hash_generated_method="F02845359F6B6044975DC5E98AE8CF68") public static Bitmap parseToBnW(byte[] data,int length){  int valueIndex=0;  int width=data[valueIndex++] & 0xFF;  int height=data[valueIndex++] & 0xFF;  int numOfPixels=width * height;  int[] pixels=new int[numOfPixels];  int pixelIndex=0;  int bitIndex=7;  byte currentByte=0x00;  while (pixelIndex < numOfPixels) {    if (pixelIndex % 8 == 0) {      currentByte=data[valueIndex++];      bitIndex=7;    }    pixels[pixelIndex++]=bitToBnW((currentByte >> bitIndex--) & 0x01);  }  if (pixelIndex != numOfPixels) {    CatLog.d("IconLoader","parseToBnW; size error");  }  return Bitmap.createBitmap(pixels,width,height,Bitmap.Config.ARGB_8888);}  }
class C{  public static void main(String[] options){  try {    Attribute length=new Attribute("length");    Attribute weight=new Attribute("weight");    ArrayList<String> my_nominal_values=new ArrayList<String>(3);    my_nominal_values.add("first");    my_nominal_values.add("second");    Attribute position=new Attribute("position",my_nominal_values);    ArrayList<Attribute> attributes=new ArrayList<Attribute>(3);    attributes.add(length);    attributes.add(weight);    attributes.add(position);    Instances race=new Instances("race",attributes,0);    race.setClassIndex(position.index());    BinarySparseInstance inst=new BinarySparseInstance(3);    inst.setValue(length,5.3);    inst.setValue(weight,300);    inst.setValue(position,"first");    inst.setDataset(race);    System.out.println("The instance: " + inst);    System.out.println("First attribute: " + inst.attribute(0));    System.out.println("Class attribute: " + inst.classAttribute());    System.out.println("Class index: " + inst.classIndex());    System.out.println("Class is missing: " + inst.classIsMissing());    System.out.println("Class value (internal format): " + inst.classValue());    SparseInstance copy=(SparseInstance)inst.copy();    System.out.println("Shallow copy: " + copy);    copy.setDataset(inst.dataset());    System.out.println("Shallow copy with dataset set: " + copy);    System.out.print("All stored values in internal format: ");    for (int i=0; i < inst.numValues(); i++) {      if (i > 0) {        System.out.print(",");      }      System.out.print(inst.valueSparse(i));    }    System.out.println();    System.out.print("All values set to zero: ");    while (inst.numValues() > 0) {      inst.setValueSparse(0,0);    }    for (int i=0; i < inst.numValues(); i++) {      if (i > 0) {        System.out.print(",");      }      System.out.print(inst.valueSparse(i));    }    System.out.println();    System.out.print("All values set to one: ");    for (int i=0; i < inst.numAttributes(); i++) {      inst.setValue(i,1);    }    for (int i=0; i < inst.numValues(); i++) {      if (i > 0) {        System.out.print(",");      }      System.out.print(inst.valueSparse(i));    }    System.out.println();    copy.setDataset(null);    copy.deleteAttributeAt(0);    copy.insertAttributeAt(0);    copy.setDataset(inst.dataset());    System.out.println("Copy with first attribute deleted and inserted: " + copy);    copy.setDataset(null);    copy.deleteAttributeAt(1);    copy.insertAttributeAt(1);    copy.setDataset(inst.dataset());    System.out.println("Copy with second attribute deleted and inserted: " + copy);    copy.setDataset(null);    copy.deleteAttributeAt(2);    copy.insertAttributeAt(2);    copy.setDataset(inst.dataset());    System.out.println("Copy with third attribute deleted and inserted: " + copy);    System.out.println("Enumerating attributes (leaving out class):");    Enumeration<Attribute> enu=inst.enumerateAttributes();    while (enu.hasMoreElements()) {      Attribute att=enu.nextElement();      System.out.println(att);    }    System.out.println("Header of original and copy equivalent: " + inst.equalHeaders(copy));    System.out.println("Length of copy missing: " + copy.isMissing(length));    System.out.println("Weight of copy missing: " + copy.isMissing(weight.index()));    System.out.println("Length of copy missing: " + Utils.isMissingValue(copy.value(length)));    System.out.println("Number of attributes: " + copy.numAttributes());    System.out.println("Number of classes: " + copy.numClasses());    double[] meansAndModes={2,3,0};    copy.replaceMissingValues(meansAndModes);    System.out.println("Copy with missing value replaced: " + copy);    copy.setClassMissing();    System.out.println("Copy with missing class: " + copy);    copy.setClassValue(0);    System.out.println("Copy with class value set to first value: " + copy);    copy.setClassValue("second");    System.out.println("Copy with class value set to \"second\": " + copy);    copy.setMissing(1);    System.out.println("Copy with second attribute set to be missing: " + copy);    copy.setMissing(length);    System.out.println("Copy with length set to be missing: " + copy);    copy.setValue(0,0);    System.out.println("Copy with first attribute set to 0: " + copy);    copy.setValue(weight,1);    System.out.println("Copy with weight attribute set to 1: " + copy);    copy.setValue(position,"second");    System.out.println("Copy with position set to \"second\": " + copy);    copy.setValue(2,"first");    System.out.println("Copy with last attribute set to \"first\": " + copy);    System.out.println("Current weight of instance copy: " + copy.weight());    copy.setWeight(2);    System.out.println("Current weight of instance copy (set to 2): " + copy.weight());    System.out.println("Last value of copy: " + copy.toString(2));    System.out.println("Value of position for copy: " + copy.toString(position));    System.out.println("Last value of copy (internal format): " + copy.value(2));    System.out.println("Value of position for copy (internal format): " + copy.value(position));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void processTDU(TDUMessage tdu){}  }
class C{  public SendableVideoMessage.SendableVideoMessageBuilder duration(int duration){  this.duration=duration;  return this;}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  public void checkLocalsAverageCorrectly(int algNumber,String numThreads) throws Exception {  MultiInfoCalculatorKraskov miCalc=getNewCalc(algNumber);  String kraskov_K="4";  miCalc.setProperty(MultiInfoCalculatorKraskov.PROP_K,kraskov_K);  miCalc.setProperty(MultiInfoCalculatorKraskov.PROP_NUM_THREADS,numThreads);  super.testLocalsAverageCorrectly(miCalc,2,10000);}  }
class C{  public void prepareStack(Method mainMethod){  stackFrame.clear();  this.pushFrame(new FakeBottomFrame());  final FakeMainCallerFrame fakeMainCallerFrame=new FakeMainCallerFrame(mainMethod,MainConfig.get().MAX_LOCALS_DEFAULT);  if (mainMethod != null) {    boolean isInstrumented=isInstrumented(mainMethod);    fakeMainCallerFrame.invokeInstrumentedCode(isInstrumented);    String[] emptyStringArray=new String[]{};    ReferenceExpression emptyStringRef=heap.getReference(emptyStringArray);    fakeMainCallerFrame.operandStack.pushRef(emptyStringRef);  }  this.pushFrame(fakeMainCallerFrame);}  }
class C{  public static void addWord(Context context,String word,int frequency,String shortcut,Locale locale){  final ContentResolver resolver=context.getContentResolver();  if (TextUtils.isEmpty(word)) {    return;  }  if (frequency < FREQUENCY_MIN)   frequency=FREQUENCY_MIN;  if (frequency > FREQUENCY_MAX)   frequency=FREQUENCY_MAX;  final int COLUMN_COUNT=5;  ContentValues values=new ContentValues(COLUMN_COUNT);  values.put(WORD,word);  values.put(FREQUENCY,frequency);  values.put(LOCALE,null == locale ? null : locale.toString());  values.put(APP_ID,0);  values.put(SHORTCUT,shortcut);  Uri result=resolver.insert(CONTENT_URI,values);}  }
class C{  @Override public void onDestroyView(){  super.onDestroyView();  if (mDialog != null) {    mViewDestroyed=true;    mDialog.dismiss();    mDialog=null;  }}  }
class C{  public Bitmap drawableToBitmap(Drawable drawable){  if (drawable == null) {    return null;  } else   if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  }  try {    Bitmap bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(bitmap);    drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());    drawable.draw(canvas);    return bitmap;  } catch (  Exception e) {    return null;  }}  }
class C{  public boolean bool(){  return m_val;}  }
class C{  public T removeIndex(int index){  if (index >= size)   throw new IndexOutOfBoundsException(String.valueOf(index));  T[] items=this.items;  T value=(T)items[index];  size--;  if (ordered)   System.arraycopy(items,index + 1,items,index,size - index); else   items[index]=items[size];  items[size]=null;  return value;}  }
class C{  public TriangleMesh copy(){  TriangleMesh m=new TriangleMesh(name + "-copy",numVertices,numFaces);  for (  Face f : faces) {    m.addFace(f.a,f.b,f.c,f.normal,f.uvA,f.uvB,f.uvC);  }  return m;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the POST method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  public void characters(org.w3c.dom.Node node) throws org.xml.sax.SAXException {  if (m_state != null) {    m_state.setCurrentNode(node);  }  String data=node.getNodeValue();  if (data != null) {    this.characters(data);  }}  }
class C{  protected void crossover(Program program1,Program program2,Rules rules){  Node node=null;  Node replacement=null;  if (PRNG.nextDouble() <= rules.getFunctionCrossoverProbability()) {    int size=program1.getArgument(0).getNumberOfFunctions();    if (size == 0) {      return;    }    node=program1.getArgument(0).getFunctionAt(PRNG.nextInt(size));  } else {    int size=program1.getArgument(0).getNumberOfTerminals();    if (size == 0) {      return;    }    node=program1.getArgument(0).getTerminalAt(PRNG.nextInt(size));  }  if (PRNG.nextDouble() <= rules.getFunctionCrossoverProbability()) {    int size=program2.getArgument(0).getNumberOfFunctions(node.getReturnType());    if (size == 0) {      return;    }    replacement=program2.getArgument(0).getFunctionAt(node.getReturnType(),PRNG.nextInt(size));  } else {    int size=program2.getArgument(0).getNumberOfTerminals(node.getReturnType());    if (size == 0) {      return;    }    replacement=program2.getArgument(0).getTerminalAt(node.getReturnType(),PRNG.nextInt(size));  }  if (node.isFixed() || replacement.isFixed()) {    return;  }  if (node.getDepth() + replacement.getMaximumHeight() > rules.getMaxVariationDepth()) {    return;  }  Node parent=node.getParent();  for (int i=0; i < parent.getNumberOfArguments(); i++) {    if (parent.getArgument(i) == node) {      parent.setArgument(i,replacement);      break;    }  }}  }
class C{  public static byte[] calendarToRawBytes(Calendar timestamp){  int offsetInHours=MiBandCoordinator.getDeviceTimeOffsetHours();  if (offsetInHours != 0)   timestamp.add(Calendar.HOUR_OF_DAY,offsetInHours);  return new byte[]{(byte)(timestamp.get(Calendar.YEAR) - 2000),(byte)timestamp.get(Calendar.MONTH),(byte)timestamp.get(Calendar.DATE),(byte)timestamp.get(Calendar.HOUR_OF_DAY),(byte)timestamp.get(Calendar.MINUTE),(byte)timestamp.get(Calendar.SECOND)};}  }
class C{  static double distance(IPoint p1,IPoint p2){  return Math.sqrt((p1.getX() - p2.getX()) * (p1.getX() - p2.getX()) + (p1.getY() - p2.getY()) * (p1.getY() - p2.getY()));}  }
class C{  public int export(ConstantPool target){  return target.addMethodRef(getClassName(),getName(),getType()).getIndex();}  }
class C{  public AsyncFileLock(Path p) throws IOException {  Objects.requireNonNull(p);  fileToLock=FileChannel.open(p,StandardOpenOption.CREATE,StandardOpenOption.WRITE);  closeChannel=true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Term parseTermCompletely(String input) throws ParseError {  StreamTokenizer t=tokenize(input);  Term result=parseTerm(t);  if (!isInputExhausted(t)) {    throw new ParseError("unexpected text after expression: " + t);  }  return result;}  }
class C{  protected void doDrawStereoRedBlue(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  View dcView=dc.getView();  if (this.isSwapEyes()) {    if (this.isHardwareStereo())     gl.glDrawBuffer(GL2.GL_BACK_RIGHT);    gl.glColorMask(false,true,true,true);  } else {    if (this.isHardwareStereo())     gl.glDrawBuffer(GL2.GL_BACK_LEFT);    gl.glColorMask(true,false,false,true);  }  if (this.isHardwareStereo())   gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);  super.draw(dc);  Angle viewHeading=dcView.getHeading();  dcView.setHeading(dcView.getHeading().subtract(this.getFocusAngle()));  dcView.apply(dc);  try {    gl.glClear(GL.GL_DEPTH_BUFFER_BIT);    if (this.isSwapEyes()) {      if (this.isHardwareStereo())       gl.glDrawBuffer(GL2.GL_BACK_RIGHT);      gl.glColorMask(true,false,false,true);    } else {      if (this.isHardwareStereo())       gl.glDrawBuffer(GL2.GL_BACK_LEFT);      gl.glColorMask(false,true,true,true);    }    if (this.isHardwareStereo())     gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);    super.draw(dc);  }  finally {    dcView.setHeading(viewHeading);    dcView.apply(dc);    gl.glColorMask(true,true,true,true);  }}  }
class C{  private void adjustPoints(){  if (decodeArr != null) {    float xMin=decodeArr[0];    float xMax=decodeArr[1];    float yMin=decodeArr[2];    float yMax=decodeArr[3];    float xw=xMax - xMin;    float yw=yMax - yMin;    ArrayList<Point2D> tempPoints=new ArrayList<Point2D>();    for (    Point2D p : pp) {      float xx=(float)p.getX();      float yy=(float)p.getY();      xx=(xw * xx) + xMin;      yy=(yw * yy) + yMin;      tempPoints.add(new Point2D.Float(xx,yy));    }    pp.clear();    for (    Point2D t : tempPoints) {      pp.add(t);    }  }  Point2D[] pArr=new Point2D[pp.size()];  for (int i=0; i < pArr.length; i++) {    pArr[i]=pp.get(i);  }  int totalPatches=pp.size() / 12;  int offset=0;  for (int i=0; i < totalPatches; i++) {    Point2D[] pointArr=new Point2D[12];    Color[] colors={pc.get(i * 4),pc.get(i * 4 + 1),pc.get(i * 4 + 2),pc.get(i * 4 + 3)};    System.arraycopy(pArr,offset,pointArr,0,12);    Shape67 sh=new Shape67(pointArr,colors);    shapes.add(sh);    offset+=12;  }}  }
class C{  public static void CF7(double[] x,double[] f,double[] c,int nx){  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    if (j % 2 == 1) {      yj=x[j - 1] - Math.cos(6.0 * PI * x[0] + j * PI / nx);      sum1+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;    } else {      yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);      if (j == 2 || j == 4) {        sum2+=yj * yj;      } else {        sum2+=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;      }    }  }  f[0]=x[0] + sum1;  f[1]=(1.0 - x[0]) * (1.0 - x[0]) + sum2;  c[0]=x[1] - Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - MYSIGN((x[0] - 0.5) * (1.0 - x[0])) * Math.sqrt(Math.abs((x[0] - 0.5) * (1.0 - x[0])));  c[1]=x[3] - Math.sin(6.0 * x[0] * PI + 4.0 * PI / nx) - MYSIGN(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])) * Math.sqrt(Math.abs(0.25 * Math.sqrt(1 - x[0]) - 0.5 * (1.0 - x[0])));}  }
class C{  public void testPrefixes() throws Exception {  int num=atLeast(100);  for (int i=0; i < num; i++)   assertSame(TestUtil.randomUnicodeString(random(),5));}  }
class C{  public static ShortStream newGCspyShortStream(AbstractDriver driver,String name,short minValue,short maxValue,short zeroValue,short defaultValue,String stringPre,String stringPost,int presentation,int paintStyle,int indexMaxStream,Color colour,boolean summary){  return factory.newGCspyShortStream(driver,name,minValue,maxValue,zeroValue,defaultValue,stringPre,stringPost,presentation,paintStyle,indexMaxStream,colour,summary);}  }
class C{  public Matrix4d mulAffineR(Matrix4x3dc right){  return mulAffineR(right,this);}  }
class C{  protected void connect(SocketAddress address,int timeout) throws IOException {  InetSocketAddress inetAddr=(InetSocketAddress)address;  doConnect(inetAddr,timeout);}  }
class C{  public MatFileWriter(File file,Collection<MLArray> data) throws IOException {  this(new FileOutputStream(file).getChannel(),data);}  }
class C{  public static boolean isLetter(char c){  return Character.isLetter(c);}  }
class C{  private void updatePortInfo(String engineName,String directorName,VPlexPortInfo portInfo) throws VPlexApiException {  String portName=portInfo.getName();  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.URI_ENGINES.toString());  uriBuilder.append(engineName);  uriBuilder.append(VPlexApiConstants.URI_DIRECTORS.toString());  uriBuilder.append(directorName);  uriBuilder.append(VPlexApiConstants.URI_DIRECTOR_PORTS.toString());  uriBuilder.append(portName);  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("Port Info Request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw new VPlexApiException(String.format("Failed getting info for port %s on VPlex director %s in engine %s with status: %s",portName,directorName,engineName,status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,portInfo);    s_logger.info("Updated Port Info {}",portInfo.toString());  } catch (  Exception e) {    throw new VPlexApiException(String.format("Error processing port information: %s",e.getMessage()),e);  }}  }
class C{  public void showBranches(Project project,Resource selectedItem){  checkState(project.getLocation().isPrefixOf(selectedItem.getLocation()),"Given selected item is not descendant of given project");  this.project=project;  this.selectedItem=selectedItem;  getBranches();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.863 -0400",hash_original_method="258D2A85E3ECF820EDC9682F6EE3C0F9",hash_generated_method="881EC7E1EDF187DA88DFBDACA02CE183") public FileFilterUtils(){}  }
class C{  public static void notifyUserOfNonLatLonGraphics(int count){  String errMsg="All Drawing Tool Graphics must be rendered as LAT/LON \nto be exported as ESRI shape files. \n\n" + count + " graphic"+ (count > 1 ? "s" : "")+ " not rendered in LAT/LON will not be exported.";  String title="Exporting Error";  JOptionPane.showMessageDialog(null,errMsg,title,JOptionPane.ERROR_MESSAGE);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @Override public void writeToParcel(Parcel dest,int flags){  dest.writeString(mContactId);}  }
class C{  public boolean scrollTo(int line,int offset){  if (visibleLines == 0) {    setFirstLine(Math.max(0,line - electricScroll));    return true;  }  int newFirstLine=firstLine;  int newHorizontalOffset=horizontalOffset;  if (line < firstLine + electricScroll) {    newFirstLine=Math.max(0,line - electricScroll);  } else   if (line + electricScroll >= firstLine + visibleLines) {    newFirstLine=(line - visibleLines) + electricScroll + 1;    if (newFirstLine + visibleLines >= getLineCount()) {      newFirstLine=getLineCount() - visibleLines;    }    if (newFirstLine < 0) {      newFirstLine=0;    }  }  int x=_offsetToX(line,offset);  int width=painter.getFontMetrics().charWidth('w');  if (x < 0) {    newHorizontalOffset=Math.min(0,horizontalOffset - x + width + 5);  } else   if (x + width >= painter.getWidth()) {    newHorizontalOffset=horizontalOffset + (painter.getWidth() - x) - width - 5;  }  return setOrigin(newFirstLine,newHorizontalOffset);}  }
class C{  public RefactoringStatus checkVarargOrder(){  for (Iterator<ParameterInfo> iter=fParameterInfos.iterator(); iter.hasNext(); ) {    ParameterInfo info=iter.next();    if (info.isOldVarargs() && iter.hasNext()) {      return RefactoringStatus.createFatalErrorStatus(Messages.format(RefactoringCoreMessages.ExtractMethodRefactoring_error_vararg_ordering,BasicElementLabels.getJavaElementName(info.getOldName())));    }  }  return new RefactoringStatus();}  }
class C{  public UF10(){  this(30);}  }
class C{  public PointerHierarchyRepresentationResult run(Database db,Relation<O> relation){  DistanceQuery<O> dq=db.getDistanceQuery(relation,getDistanceFunction());  ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  final int size=ids.size();  if (size > 0x10000) {    throw new AbortException("This implementation does not scale to data sets larger than " + 0x10000 + " instances (~16 GB RAM), at which point the Java maximum array size is reached.");  }  if (SingleLinkageMethod.class.isInstance(linkage)) {    LOG.verbose("Notice: SLINK is a much faster algorithm for single-linkage clustering!");  }  double[] scratch=new double[AGNES.triangleSize(size)];  DBIDArrayIter ix=ids.iter(), iy=ids.iter();  final boolean square=WardLinkageMethod.class.isInstance(linkage) && !(SquaredEuclideanDistanceFunction.class.isInstance(dq.getDistanceFunction()));  AGNES.initializeDistanceMatrix(scratch,dq,ix,iy,square);  double[] bestd=new double[size];  int[] besti=new int[size];  initializeNNCache(scratch,bestd,besti);  PointerHierarchyRepresentationBuilder builder=new PointerHierarchyRepresentationBuilder(ids);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("Agglomerative clustering",size - 1,LOG) : null;  int wsize=size;  for (int i=1; i < size; i++) {    int x=findMerge(wsize,scratch,ix,iy,bestd,besti,builder);    if (x == wsize - 1) {      --wsize;      for (ix.seek(wsize - 1); builder.isLinked(ix); ix.retract()) {        --wsize;      }    }    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  return builder.complete();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.EXISTENTIAL_TYPE_REF___IS_EXISTENTIAL:    return isExistential();case TypeRefsPackage.EXISTENTIAL_TYPE_REF___IS_GENERIC:  return isGeneric();case TypeRefsPackage.EXISTENTIAL_TYPE_REF___IS_PARAMETERIZED:return isParameterized();case TypeRefsPackage.EXISTENTIAL_TYPE_REF___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public Throwable fillInStackTrace(){  return this;}  }
class C{  protected void dispose(){  Component component=getComponent();  Window window=SwingUtilities.getWindowAncestor(component);  if (component instanceof JWindow) {    ((Window)component).dispose();    component=null;  }  if (window instanceof DefaultFrame) {    window.dispose();  }}  }
class C{  public ValueNode loadLocal(int i,JavaKind slotKind){  ValueNode x=locals[i];  assert verifyKind(slotKind,x);  assert slotKind.needsTwoSlots() ? locals[i + 1] == TWO_SLOT_MARKER : (i == locals.length - 1 || locals[i + 1] != TWO_SLOT_MARKER);  return x;}  }
class C{  public Birthplace(String text){  super(text);}  }
class C{  public <T>LazyFutureStream<T> fromPublisher(final Publisher<? extends T> publisher){  Objects.requireNonNull(publisher);  final SeqSubscriber<T> sub=SeqSubscriber.subscriber();  publisher.subscribe(sub);  return sub.toFutureStream(this);}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public MandatoryUdaMissingException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void update(byte input){  engineUpdate(input);  state=IN_PROGRESS;}  }
class C{  public final boolean isSafelyReplaceableBy(Node newNode){  return NodeUtil.isReplacementSafe(getParent(),this,newNode);}  }
class C{  public void beginObject() throws IOException {  expect(JsonToken.BEGIN_OBJECT);}  }
class C{  public RhythmOverlayInflater registerFactory(@NonNull String layerType,@NonNull RhythmSpecLayerFactory factory){  mFactories.put(layerType,factory);  return this;}  }
class C{  public Bundler putBundle(String key,Bundle value){  bundle.putBundle(key,value);  return this;}  }
class C{  public JsonHttpResponseHandler(){  super(DEFAULT_CHARSET);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case BasePackage.DOMAIN_ELEMENT__DOMAIN_ID:    setDomainID(DOMAIN_ID_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public int lengthRetrievalMethod(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_RETRIEVALMETHOD);}  }
class C{  void foo(){}  }
class C{  static StreamTestWithHashStreamStore of(StreamTestTableFactory tables){  return new StreamTestWithHashStreamStore(null,tables);}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public Response createClient(@Auth User user,@Valid CreateClientRequest createClientRequest){  logger.info("User '{}' creating client '{}'.",user,createClientRequest.name);  long clientId;  try {    clientId=clientDAO.createClient(createClientRequest.name,user.getName(),"");  } catch (  DataAccessException e) {    logger.warn("Cannot create client {}: {}",createClientRequest.name,e);    throw new ConflictException("Conflict creating client.");  }  URI uri=UriBuilder.fromResource(ClientsResource.class).path("{clientId}").build(clientId);  Response response=Response.created(uri).entity(clientDetailResponseFromId(clientId)).build();  if (response.getStatus() == HttpStatus.SC_CREATED) {    auditLog.recordEvent(new Event(Instant.now(),EventTag.CLIENT_CREATE,user.getName(),createClientRequest.name));  }  return response;}  }
class C{  @Override public void insertNormalPrologue(){  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asPPC();  Register FP=phys.getFP();  Register TR=phys.getTR();  Register TSR=phys.getTSR();  Register R0=phys.getTemp();  Register S0=phys.getGPR(FIRST_SCRATCH_GPR);  Register S1=phys.getGPR(LAST_SCRATCH_GPR);  boolean interruptible=ir.method.isInterruptible();  boolean stackOverflow=interruptible;  boolean yp=hasPrologueYieldpoint();  int frameFixedSize=getFrameFixedSize();  ir.compiledMethod.setFrameFixedSize(frameFixedSize);  if (frameFixedSize >= STACK_SIZE_GUARD || ir.compiledMethod.isSaveVolatile()) {    insertExceptionalPrologue();    return;  }  Instruction ptr=ir.firstInstructionInCodeOrder().nextInstructionInCodeOrder();  if (VM.VerifyAssertions)   VM._assert(ptr.getOpcode() == IR_PROLOGUE_opcode);  ptr.insertBefore(MIR_Move.create(PPC_MFSPR,A(R0),A(phys.getLR())));  if (yp) {    Offset offset=Entrypoints.takeYieldpointField.getOffset();    if (VM.VerifyAssertions)     VM._assert(fits(offset,16));    ptr.insertBefore(MIR_Load.create(PPC_LInt,I(S1),A(TR),IC(PPCMaskLower16(offset))));  }  ptr.insertBefore(MIR_StoreUpdate.create(PPC_STAddrU,A(FP),A(FP),IC(-frameSize)));  if (stackOverflow) {    Offset offset=Entrypoints.stackLimitField.getOffset();    if (VM.VerifyAssertions)     VM._assert(fits(offset,16));    ptr.insertBefore(MIR_Load.create(PPC_LAddr,A(S0),A(phys.getTR()),IC(PPCMaskLower16(offset))));  }  saveNonVolatiles(ptr);  if (yp) {    ptr.insertBefore(MIR_Binary.create(PPC_CMPI,I(TSR),I(S1),IC(0)));  }  int cmid=ir.compiledMethod.getId();  if (cmid <= 0x7fff) {    ptr.insertBefore(MIR_Unary.create(PPC_LDI,I(S1),IC(cmid)));  } else {    ptr.insertBefore(MIR_Unary.create(PPC_LDIS,I(S1),IC(cmid >>> 16)));    ptr.insertBefore(MIR_Binary.create(PPC_ORI,I(S1),I(S1),IC(cmid & 0xffff)));  }  ptr.insertBefore(MIR_Store.create(PPC_STAddr,A(R0),A(FP),IC(frameSize + STACKFRAME_RETURN_ADDRESS_OFFSET.toInt())));  ptr.insertBefore(MIR_Store.create(PPC_STW,I(S1),A(FP),IC(STACKFRAME_METHOD_ID_OFFSET.toInt())));  if (stackOverflow) {    MIR_Trap.mutate(ptr,PPC_TAddr,PowerPCTrapOperand.GREATER(),A(S0),A(FP),TrapCodeOperand.StackOverflow());  } else {    ptr.remove();  }}  }
class C{  public Matrix3f rotationZ(float ang){  float sin, cos;  if (ang == (float)Math.PI || ang == -(float)Math.PI) {    cos=-1.0f;    sin=0.0f;  } else   if (ang == (float)Math.PI * 0.5f || ang == -(float)Math.PI * 1.5f) {    cos=0.0f;    sin=1.0f;  } else   if (ang == (float)-Math.PI * 0.5f || ang == (float)Math.PI * 1.5f) {    cos=0.0f;    sin=-1.0f;  } else {    cos=(float)Math.cos(ang);    sin=(float)Math.sin(ang);  }  m00=cos;  m01=sin;  m02=0.0f;  m10=-sin;  m11=cos;  m12=0.0f;  m20=0.0f;  m21=0.0f;  m22=1.0f;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:50.206 -0500",hash_original_method="91D5DC6D947AF7291A88115C5E64F077",hash_generated_method="05846FE035FF79F0DDFFC1F9C8966403") public static Uri parseWellKnownUriRecord(NdefRecord record) throws FormatException {  byte[] payload=record.getPayload();  if (payload.length < 2) {    throw new FormatException("Payload is not a valid URI (missing prefix)");  }  int prefixIndex=(payload[0] & 0xff);  if (prefixIndex < 0 || prefixIndex >= URI_PREFIX_MAP.length) {    throw new FormatException("Payload is not a valid URI (invalid prefix)");  }  String prefix=URI_PREFIX_MAP[prefixIndex];  byte[] fullUri=concat(prefix.getBytes(Charsets.UTF_8),Arrays.copyOfRange(payload,1,payload.length));  return Uri.parse(new String(fullUri,Charsets.UTF_8));}  }
class C{  private int maxIntegerDigits(double[] values){  int digits=0;  for (  double value : values) {    digits=Math.max(digits,integerDigits(value));  }  return digits;}  }
class C{  public WriteStreamOld(StreamImpl source){  init(source);}  }
class C{  public void add(){  ((TableModel)this.getModel()).addRow();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:36.178 -0500",hash_original_method="B379FF08DED00763293DB0E42243B555",hash_generated_method="518E2784EFC2CD38A3D0129BBD70C017") public void freeLastRow(){  acquireReference();  try {    nativeFreeLastRow(mWindowPtr);  }  finally {    releaseReference();  }}  }
class C{  @Unpreemptible("Non-preemptible but may pause if table needs to be grown") public static void addCandidate(Object object){  finalizableProcessor.add(object);}  }
class C{  public ServiceCall<TranslationResult> translate(final List<String> texts,final String modelId){  Validator.isTrue((modelId != null) && !modelId.isEmpty(),"modelId cannot be null or empty");  return translateRequest(texts,modelId,null,null);}  }
class C{  public static LongRange fixed(long num){  return new LongRange(num,num);}  }
class C{  public CholeskyDecomposition cholesky(){  return new CholeskyDecomposition(this);}  }
class C{  public void release(){  POOL.release(this.directBuffer);  POOL.release(this);}  }
class C{  public OrderedExecutorFactory(final Executor parent){  this.parent=parent;}  }
class C{  public void putSet(String key,Set<String> values){  editor.putStringSet(key,values);  boolean added=editor.commit();}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  area=trimMargin(area);  drawBorder(g2,area);  area=trimBorder(area);  area=trimPadding(area);  EntityBlockParams ebp=null;  StandardEntityCollection sec=null;  Shape entityArea=null;  if (params instanceof EntityBlockParams) {    ebp=(EntityBlockParams)params;    if (ebp.getGenerateEntities()) {      sec=new StandardEntityCollection();      entityArea=(Shape)area.clone();    }  }  g2.setPaint(this.paint);  g2.setFont(this.font);  Point2D pt=RectangleAnchor.coordinates(area,this.textAnchor);  this.label.draw(g2,(float)pt.getX(),(float)pt.getY(),this.contentAlignmentPoint);  BlockResult result=null;  if (ebp != null && sec != null) {    if (this.toolTipText != null || this.urlText != null) {      ChartEntity entity=new ChartEntity(entityArea,this.toolTipText,this.urlText);      sec.add(entity);      result=new BlockResult();      result.setEntityCollection(sec);    }  }  return result;}  }
class C{  public DataSet parseTabular(char[] chars){  CharArrayReader reader=new CharArrayReader(chars);  DataSetDescription description=doFirstTabularPass(reader);  reader.close();  CharArrayReader reader2=new CharArrayReader(chars);  DataSet dataSet=doSecondTabularPass(description,reader2);  this.logger.log("info","\nData set loaded!");  this.logger.reset();  return dataSet;}  }
class C{  public int enumerate(ThreadGroup[] groups){  return enumerate(groups,true);}  }
class C{  public static long parseLong(byte[] bytes,int startIndex,int endIndex){  long l=0;  for (int i=startIndex; i < endIndex; i++) {    l<<=8;    l|=bytes[i] & 0xFF;  }  return l;}  }
class C{  private final String makeSubstRE(int i){  return ("s/" + perLineREs[i] + '/'+ perLineREs[i + 1]+ "/g");}  }
class C{  void logUndo(){  store.logUndo(this,--logId);}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      final byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        final int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      final byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      final int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public void testDelete3() throws SQLException {  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE name_id = 1;");  statement.execute("DELETE FROM " + DatabaseCreator.FKSTRICT_TABLE + " WHERE id = 1;");}  }
class C{  @SuppressWarnings("fallthrough") public Nystrom(KernelTrick k,DataSet dataset,int basisSize,SamplingMethod method,double ridge,boolean sampleWithReplacment){  this(k,basisSize,method,ridge,sampleWithReplacment);  fit(dataset);}  }
class C{  private void verifyParameterConcurrentUser(Subscription subscription) throws ServiceParameterException {  if (subscription == null) {    return;  }  ParameterSet parameterSet=subscription.getParameterSet();  if (parameterSet == null || parameterSet.getParameters() == null) {    return;  }  for (  Parameter parameter : parameterSet.getParameters()) {    if (parameter.getParameterDefinition().getParameterType() == ParameterType.PLATFORM_PARAMETER && PlatformParameterIdentifiers.CONCURRENT_USER.equals(parameter.getParameterDefinition().getParameterId()) && parameter.getValue() != null) {      List<Session> list=getProductSessionsForSubscriptionTKey(subscription.getKey());      if (list != null && list.size() >= parameter.getLongValue()) {        sessionCtx.setRollbackOnly();        String text="Subscription '" + subscription.getSubscriptionId() + "'/Product '"+ subscription.getProduct().getProductId()+ "'";        ServiceParameterException e=new ServiceParameterException(text,ParameterType.PLATFORM_PARAMETER,PlatformParameterIdentifiers.CONCURRENT_USER,new Object[]{parameter.getValue()});        logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_TOO_MANY_CONCURRENT_USER_FOR_SUBSCRIPTION,subscription.getSubscriptionId(),subscription.getProduct().getProductId());        throw e;      }    }  }}  }
class C{  @Override public synchronized String toString(){  if (elementCount == 0) {    return "[]";  }  int length=elementCount - 1;  StringBuilder buffer=new StringBuilder(elementCount * 16);  buffer.append('[');  for (int i=0; i < length; i++) {    if (elementData[i] == this) {      buffer.append("(this Collection)");    } else {      buffer.append(elementData[i]);    }    buffer.append(", ");  }  if (elementData[length] == this) {    buffer.append("(this Collection)");  } else {    buffer.append(elementData[length]);  }  buffer.append(']');  return buffer.toString();}  }
class C{  private List<UnitTaxCalculationInfo> prepareRsnWiseTaxCalInfoList(Installment installment,UnitTaxCalculationInfo prevUnitTax,UnitTaxCalculationInfo currentUnitTax,List<String> changedTaxNames,Boolean isPropertyModified){  List<MiscellaneousTax> prevMiscTaxes=prevUnitTax.getMiscellaneousTaxes();  List<MiscellaneousTax> currentMiscTaxes=currentUnitTax.getMiscellaneousTaxes();  List<UnitTaxCalculationInfo> unitTaxCalcs=new ArrayList<UnitTaxCalculationInfo>();  Map<Date,UnitTaxCalculationInfo> unitTaxForChangeInTaxByDate=new TreeMap<Date,UnitTaxCalculationInfo>();  List<String> prevTaxNames=new ArrayList<String>();  for (  MiscellaneousTax mt : prevMiscTaxes) {    prevTaxNames.add(mt.getTaxName());  }  Boolean isModificationBetInstallment=propertyTaxUtil.between(currentUnitTax.getOccpancyDate(),installment.getFromDate(),installment.getToDate()) ? true : false;  Date taxEffectiveDate=null;  for (  MiscellaneousTax currentMiscTax : currentMiscTaxes) {    Boolean dmdRsnExists=prevTaxNames.contains(currentMiscTax.getTaxName()) ? true : false;    if (currentMiscTax.getTaxDetails().size() == 1) {      taxEffectiveDate=currentMiscTax.getTaxDetails().get(0).getFromDate();      if (dmdRsnExists) {        if (changedTaxNames.contains(currentMiscTax.getTaxName())) {          LOGGER.info(currentMiscTax.getTaxName() + " has changed, " + " for installment: "+ installment+ ", EffecDate: "+ taxEffectiveDate);          if (isPropertyModified && isModificationBetInstallment && currentUnitTax.getOccpancyDate().before(taxEffectiveDate)) {            currentUnitTax.setOccpancyDate(currentUnitTax.getOccpancyDate());          } else {            currentMiscTax.setHasChanged(true);            currentUnitTax.setOccpancyDate(taxEffectiveDate);          }          putUnitTaxInMapByDate(currentUnitTax,unitTaxForChangeInTaxByDate,taxEffectiveDate,currentMiscTax,isPropertyModified,isModificationBetInstallment);          currentMiscTax.setHasChanged(false);        }      } else {        if (propertyTaxUtil.between(taxEffectiveDate,installment.getFromDate(),installment.getToDate())) {          currentMiscTax.setHasChanged(true);          currentUnitTax.setOccpancyDate(taxEffectiveDate);          putUnitTaxInMapByDate(currentUnitTax,unitTaxForChangeInTaxByDate,taxEffectiveDate,currentMiscTax,isPropertyModified,isModificationBetInstallment);          currentMiscTax.setHasChanged(false);        }      }    }  }  unitTaxCalcs.addAll(unitTaxForChangeInTaxByDate.values());  return unitTaxCalcs;}  }
class C{  public DistributionConfigImpl(DistributionConfig other){  this.name=other.getName();  this.tcpPort=other.getTcpPort();  this.mcastPort=other.getMcastPort();  this.mcastTtl=other.getMcastTtl();  this.socketLeaseTime=other.getSocketLeaseTime();  this.socketBufferSize=other.getSocketBufferSize();  this.conserveSockets=other.getConserveSockets();  this.roles=other.getRoles();  this.mcastAddress=other.getMcastAddress();  this.bindAddress=other.getBindAddress();  this.serverBindAddress=other.getServerBindAddress();  this.locators=((DistributionConfigImpl)other).locators;  this.locatorWaitTime=other.getLocatorWaitTime();  this.remoteLocators=other.getRemoteLocators();  this.startLocator=other.getStartLocator();  this.startLocatorPort=((DistributionConfigImpl)other).startLocatorPort;  this.deployWorkingDir=other.getDeployWorkingDir();  this.logFile=other.getLogFile();  this.logLevel=other.getLogLevel();  this.statisticSamplingEnabled=other.getStatisticSamplingEnabled();  this.statisticSampleRate=other.getStatisticSampleRate();  this.statisticArchiveFile=other.getStatisticArchiveFile();  this.ackWaitThreshold=other.getAckWaitThreshold();  this.ackForceDisconnectThreshold=other.getAckSevereAlertThreshold();  this.cacheXmlFile=other.getCacheXmlFile();  this.archiveDiskSpaceLimit=other.getArchiveDiskSpaceLimit();  this.archiveFileSizeLimit=other.getArchiveFileSizeLimit();  this.logDiskSpaceLimit=other.getLogDiskSpaceLimit();  this.logFileSizeLimit=other.getLogFileSizeLimit();  this.clusterSSLEnabled=other.getClusterSSLEnabled();  this.clusterSSLProtocols=other.getClusterSSLProtocols();  this.clusterSSLCiphers=other.getClusterSSLCiphers();  this.clusterSSLRequireAuthentication=other.getClusterSSLRequireAuthentication();  this.clusterSSLKeyStore=other.getClusterSSLKeyStore();  this.clusterSSLKeyStoreType=other.getClusterSSLKeyStoreType();  this.clusterSSLKeyStorePassword=other.getClusterSSLKeyStorePassword();  this.clusterSSLTrustStore=other.getClusterSSLTrustStore();  this.clusterSSLTrustStorePassword=other.getClusterSSLTrustStorePassword();  this.asyncDistributionTimeout=other.getAsyncDistributionTimeout();  this.asyncQueueTimeout=other.getAsyncQueueTimeout();  this.asyncMaxQueueSize=other.getAsyncMaxQueueSize();  this.modifiable=true;  this.mcastSendBufferSize=other.getMcastSendBufferSize();  this.mcastRecvBufferSize=other.getMcastRecvBufferSize();  this.mcastFlowControl=other.getMcastFlowControl();  this.udpSendBufferSize=other.getUdpSendBufferSize();  this.udpRecvBufferSize=other.getUdpRecvBufferSize();  this.udpFragmentSize=other.getUdpFragmentSize();  this.disableTcp=other.getDisableTcp();  this.enableTimeStatistics=other.getEnableTimeStatistics();  this.memberTimeout=other.getMemberTimeout();  this.membershipPortRange=other.getMembershipPortRange();  this.maxWaitTimeForReconnect=other.getMaxWaitTimeForReconnect();  this.maxNumReconnectTries=other.getMaxNumReconnectTries();  this.clientConflation=other.getClientConflation();  this.durableClientId=other.getDurableClientId();  this.durableClientTimeout=other.getDurableClientTimeout();  this.enableNetworkPartitionDetection=other.getEnableNetworkPartitionDetection();  this.disableAutoReconnect=other.getDisableAutoReconnect();  this.securityClientAuthInit=other.getSecurityClientAuthInit();  this.securityClientAuthenticator=other.getSecurityClientAuthenticator();  this.securityClientDHAlgo=other.getSecurityClientDHAlgo();  this.securityUDPDHAlgo=other.getSecurityUDPDHAlgo();  this.securityPeerAuthInit=other.getSecurityPeerAuthInit();  this.securityPeerAuthenticator=other.getSecurityPeerAuthenticator();  this.securityClientAccessor=other.getSecurityClientAccessor();  this.securityClientAccessorPP=other.getSecurityClientAccessorPP();  this.securityPeerMembershipTimeout=other.getSecurityPeerMembershipTimeout();  this.securityLogLevel=other.getSecurityLogLevel();  this.securityLogFile=other.getSecurityLogFile();  this.security.putAll(other.getSecurityProps());  this.removeUnresponsiveClient=other.getRemoveUnresponsiveClient();  this.deltaPropagation=other.getDeltaPropagation();  this.distributedSystemId=other.getDistributedSystemId();  this.redundancyZone=other.getRedundancyZone();  this.enforceUniqueHost=other.getEnforceUniqueHost();  this.sslProperties=other.getSSLProperties();  this.clusterSSLProperties=other.getClusterSSLProperties();  this.jmxManagerSslProperties=other.getJmxSSLProperties();  this.userDefinedProps.putAll(other.getUserDefinedProps());  this.groups=other.getGroups();  this.jmxManager=other.getJmxManager();  this.jmxManagerStart=other.getJmxManagerStart();  this.jmxManagerSSLEnabled=other.getJmxManagerSSLEnabled();  this.jmxManagerSslRequireAuthentication=other.getJmxManagerSSLRequireAuthentication();  this.jmxManagerSslProtocols=other.getJmxManagerSSLProtocols();  this.jmxManagerSslCiphers=other.getJmxManagerSSLCiphers();  this.jmxManagerSSLKeyStore=other.getJmxManagerSSLKeyStore();  this.jmxManagerSSLKeyStoreType=other.getJmxManagerSSLKeyStoreType();  this.jmxManagerSSLKeyStorePassword=other.getJmxManagerSSLKeyStorePassword();  this.jmxManagerSSLTrustStore=other.getJmxManagerSSLTrustStore();  this.jmxManagerSSLTrustStorePassword=other.getJmxManagerSSLTrustStorePassword();  this.jmxManagerSslProperties=other.getJmxSSLProperties();  this.jmxManagerPort=other.getJmxManagerPort();  this.jmxManagerBindAddress=other.getJmxManagerBindAddress();  this.jmxManagerHostnameForClients=other.getJmxManagerHostnameForClients();  this.jmxManagerPasswordFile=other.getJmxManagerPasswordFile();  this.jmxManagerAccessFile=other.getJmxManagerAccessFile();  this.jmxManagerHttpPort=other.getJmxManagerHttpPort();  this.jmxManagerUpdateRate=other.getJmxManagerUpdateRate();  this.memcachedPort=other.getMemcachedPort();  this.memcachedProtocol=other.getMemcachedProtocol();  this.memcachedBindAddress=other.getMemcachedBindAddress();  this.redisPort=other.getRedisPort();  this.redisBindAddress=other.getRedisBindAddress();  this.redisPassword=other.getRedisPassword();  this.userCommandPackages=other.getUserCommandPackages();  this.enableSharedConfiguration=other.getEnableClusterConfiguration();  this.loadSharedConfigurationFromDir=other.getLoadClusterConfigFromDir();  this.clusterConfigDir=other.getClusterConfigDir();  this.useSharedConfiguration=other.getUseSharedConfiguration();  this.serverSSLEnabled=other.getServerSSLEnabled();  this.serverSslRequireAuthentication=other.getServerSSLRequireAuthentication();  this.serverSslProtocols=other.getServerSSLProtocols();  this.serverSslCiphers=other.getServerSSLCiphers();  this.serverSSLKeyStore=other.getServerSSLKeyStore();  this.serverSSLKeyStoreType=other.getServerSSLKeyStoreType();  this.serverSSLKeyStorePassword=other.getServerSSLKeyStorePassword();  this.serverSSLTrustStore=other.getServerSSLTrustStore();  this.serverSSLTrustStorePassword=other.getServerSSLTrustStorePassword();  this.serverSslProperties=other.getServerSSLProperties();  this.gatewaySSLEnabled=other.getGatewaySSLEnabled();  this.gatewaySslRequireAuthentication=other.getGatewaySSLRequireAuthentication();  this.gatewaySslProtocols=other.getGatewaySSLProtocols();  this.gatewaySslCiphers=other.getGatewaySSLCiphers();  this.gatewaySSLKeyStore=other.getGatewaySSLKeyStore();  this.gatewaySSLKeyStoreType=other.getGatewaySSLKeyStoreType();  this.gatewaySSLKeyStorePassword=other.getGatewaySSLKeyStorePassword();  this.gatewaySSLTrustStore=other.getGatewaySSLTrustStore();  this.gatewaySSLTrustStorePassword=other.getGatewaySSLTrustStorePassword();  this.gatewaySslProperties=other.getGatewaySSLProperties();  this.httpServicePort=other.getHttpServicePort();  this.httpServiceBindAddress=other.getHttpServiceBindAddress();  this.httpServiceSSLEnabled=other.getHttpServiceSSLEnabled();  this.httpServiceSSLCiphers=other.getHttpServiceSSLCiphers();  this.httpServiceSSLProtocols=other.getHttpServiceSSLProtocols();  this.httpServiceSSLRequireAuthentication=other.getHttpServiceSSLRequireAuthentication();  this.httpServiceSSLKeyStore=other.getHttpServiceSSLKeyStore();  this.httpServiceSSLKeyStorePassword=other.getHttpServiceSSLKeyStorePassword();  this.httpServiceSSLKeyStoreType=other.getHttpServiceSSLKeyStoreType();  this.httpServiceSSLTrustStore=other.getHttpServiceSSLTrustStore();  this.httpServiceSSLTrustStorePassword=other.getHttpServiceSSLTrustStorePassword();  this.httpServiceSSLProperties=other.getHttpServiceSSLProperties();  this.startDevRestApi=other.getStartDevRestApi();  this.offHeapMemorySize=other.getOffHeapMemorySize();  Map<String,ConfigSource> otherSources=((DistributionConfigImpl)other).sourceMap;  if (otherSources != null) {    this.sourceMap=new HashMap<String,ConfigSource>(otherSources);  }  this.lockMemory=other.getLockMemory();  this.distributedTransactions=other.getDistributedTransactions();  this.shiroInit=other.getShiroInit();  this.securityManager=other.getSecurityManager();  this.postProcessor=other.getPostProcessor();  this.clusterSSLAlias=other.getClusterSSLAlias();  this.gatewaySSLAlias=other.getGatewaySSLAlias();  this.httpServiceSSLAlias=other.getHTTPServiceSSLAlias();  this.jmxManagerSSLAlias=other.getJMXSSLAlias();  this.serverSSLAlias=other.getServerSSLAlias();  this.locatorSSLAlias=other.getLocatorSSLAlias();  this.securableCommunicationChannels=((DistributionConfigImpl)other).securableCommunicationChannels;  this.sslCiphers=other.getSSLCiphers();  this.sslProtocols=other.getSSLProtocols();  this.sslRequireAuthentication=other.getSSLRequireAuthentication();  this.sslKeyStore=other.getSSLKeyStore();  this.sslKeyStorePassword=other.getSSLKeyStorePassword();  this.sslKeyStoreType=other.getSSLKeyStoreType();  this.sslTrustStore=other.getSSLTrustStore();  this.sslTrustStorePassword=other.getSSLTrustStorePassword();  this.sslProperties=other.getSSLProperties();  this.sslDefaultAlias=other.getSSLDefaultAlias();  this.sslWebServiceRequireAuthentication=other.getSSLWebRequireAuthentication();}  }
class C{  public RawData(byte[] data,InetAddress address,int port,Principal clientIdentity){  this(data,address,port,clientIdentity,false);}  }
class C{  @Override public void undo(){  relationship.setForeignKeyEntity(foreignKeySource);  relationship.setForeignKeyEntity(primaryKeyTarget);  foreignKeySource.addForeignKeyRelationship(relationship,true);  primaryKeyTarget.addPrimaryKeyRelationship(relationship,true);}  }
class C{  public void clearVoiceSearchResults(){  mResults.clear();}  }
class C{  @Override public void trainOnInstance(Instance inst){  if (this.isInit == false) {    this.isInit=true;    InstancesHeader instances=new InstancesHeader(dataset);    this.learner.setModelContext(instances);    this.learner.prepareForUse();  }  if (inst.weight() > 0) {    inst.setDataset(dataset);    learner.trainOnInstance(inst);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void prepareTransfers() throws LibUsbException {  if (mAvailableTransfers == null) {    mAvailableTransfers=new LinkedTransferQueue<>();    for (int x=0; x < TRANSFER_BUFFER_POOL_SIZE; x++) {      Transfer transfer=LibUsb.allocTransfer();      if (transfer == null) {        throw new LibUsbException("couldn't allocate transfer",LibUsb.ERROR_NO_MEM);      }      final ByteBuffer buffer=ByteBuffer.allocateDirect(mBufferSize);      LibUsb.fillBulkTransfer(transfer,mDeviceHandle,USB_ENDPOINT,buffer,BufferProcessor.this,"Buffer",USB_TIMEOUT_MS);      mAvailableTransfers.add(transfer);    }  }}  }
class C{  public static LastProjectionExpression last(Expression expression){  return new LastProjectionExpression(expression);}  }
class C{  private void promptSpeechInput(){  if (recognitionRunning)   return;  recognitionRunning=true;  Intent intent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE,Locale.getDefault());  intent.putExtra(RecognizerIntent.EXTRA_PROMPT,getString(R.string.speak_your_treatment));  try {    startActivityForResult(intent,REQ_CODE_SPEECH_INPUT);  } catch (  ActivityNotFoundException a) {    Toast.makeText(getApplicationContext(),R.string.speech_recognition_is_not_supported,Toast.LENGTH_LONG).show();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public CNaviEdge(final int id,final INaviViewNode sourceNode,final INaviViewNode targetNode,final EdgeType type,final double sourceX,final double sourceY,final double targetX,final double targetY,final Color color,final boolean selected,final boolean visible,final ArrayList<IComment> localComment,final List<CBend> edgePaths,final SQLProvider provider){  super(id,sourceNode,targetNode,type,sourceX,sourceY,targetX,targetY,color,selected,visible,edgePaths);  m_provider=Preconditions.checkNotNull(provider,"IE00204: Provider argument can not be null");  CNaviViewNode.link(sourceNode,targetNode);  CommentManager.get(provider).addListener(m_internalCommentListener);  if ((localComment != null) && !localComment.isEmpty()) {    CommentManager.get(m_provider).initializeLocalEdgeComment(this,localComment);  }}  }
class C{  @SuppressWarnings("WeakerAccess") public AWTTerminalFrame(String title,TerminalEmulatorAutoCloseTrigger... autoCloseTriggers) throws HeadlessException {  this(title,new AWTTerminal(),autoCloseTriggers);}  }
class C{  private List<Path> executeBatchHSDAddVolumesCommand(HDSApiClient hdsApiClient,String systemId,List<HostStorageDomain> hsdsWithInitiators,VolumeURIHLU[] volumeURIHLUs,String model) throws Exception {  if (null == hsdsWithInitiators || hsdsWithInitiators.isEmpty()) {    log.error("Batch HSD creation failed. Aborting operation...");    throw HDSException.exceptions.notAbleToAddHSD(systemId);  }  List<Path> pathList=new ArrayList<Path>();  for (  HostStorageDomain hsd : hsdsWithInitiators) {    Map<String,String> volumeLunMap=getVolumeLunMap(systemId,hsd.getObjectID(),volumeURIHLUs,hdsApiClient.getHDSApiExportManager());    for (    Map.Entry<String,String> entry : volumeLunMap.entrySet()) {      Path path=new Path(hsd.getPortID(),hsd.getDomainID(),null,entry.getValue(),entry.getKey());      pathList.add(path);    }  }  return hdsApiClient.getHDSBatchApiExportManager().addLUNPathsToHSDs(systemId,pathList,model);}  }
class C{  public void release() throws IOException {  if (fileLock != null) {    fileLock.release();  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static <T>byte[] toByteArray(T value,Coder<T> coder){  ByteArrayOutputStream baos=new ByteArrayOutputStream();  try {    coder.encode(value,baos,new Coder.Context(true));  } catch (  IOException e) {    throw new IllegalStateException("Error encoding value: " + value,e);  }  return baos.toByteArray();}  }
class C{  @SuppressWarnings("unused") @Test public void testStateCycle_ExitActionExclusion(){  MinimalTSC tsc=new MinimalTSC();  VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,tsc.s_scope);  LocalReaction lr=_createExitAction(tsc.s1);  ReactionEffect lr_eff=_createReactionEffect(lr);  AssignmentExpression assign1=_createVariableAssignment(v1,AssignmentOperator.ASSIGN,_createValue(42),lr_eff);  ExecutionFlow flow=sequencer.transform(tsc.sc);  ExecutionState s1=flow.getStates().get(0);  assertEquals(0,s1.getReactions().size());  assertNotNull(s1.getReactSequence());  assertEquals(1,s1.getReactSequence().getSteps().size());}  }
class C{  private boolean shouldConcatenate(RegisterAllocatorState regAllocState,LiveIntervalElement live,BasicBlock bb){  BasicInterval last=last();  if (VM.VerifyAssertions) {    VM._assert(last.getEnd() <= regAllocState.getDfnBegin(live,bb));  }  int dfnBegin=regAllocState.getDfnBegin(live,bb);  if (live.getBegin() != null) {    if (live.getBegin() == bb.firstRealInstruction()) {      return last.getEnd() + 1 >= dfnBegin;    } else {      return last.getEnd() == dfnBegin;    }  } else {    int dBegin=regAllocState.getDFN(bb.firstInstruction());    return last.getEnd() + 1 >= dBegin;  }}  }
class C{  private Map<String,WorkflowStep> readWorkflowFromDb(String orchTaskId){  Map<String,WorkflowStep> msgToStep=new HashMap<String,WorkflowStep>();  Joiner j=new Joiner(dbClient);  List<WorkflowStep> steps=j.join(com.emc.storageos.db.client.model.Workflow.class,"wf").match("orchTaskId",orchTaskId).join("wf",WorkflowStep.class,"step","workflow").go().list("step");  for (  WorkflowStep step : steps) {    msgToStep.put(step.getDescription(),step);    System.out.println(String.format("Step %s: status: %s message: %s",step.getDescription(),step.getState(),step.getMessage()));    Map<String,WorkflowStep> subWorkflowMap=readWorkflowFromDb(step.getStepId());    msgToStep.putAll(subWorkflowMap);  }  return msgToStep;}  }
class C{  protected Node newNode(){  return new SVGOMFESpotLightElement();}  }
class C{  public static String packageNameOnly(String typeName){  String dotted=descriptorToDot(typeName);  int end=dotted.lastIndexOf(".");  if (end < 0) {    return "";  } else {    return dotted.substring(0,end);  }}  }
class C{  @Override public Set<String> recommend(final String s){  final Set<String> a=new HashSet<String>();  final StringBuilder an=new StringBuilder(s);  if (s.isEmpty()) {    return a;  }  final SortedMap<StringBuilder,List<Integer>> t=this.name2ids.tailMap(an);  for (  final StringBuilder r : t.keySet()) {    if (StringBuilderComparator.CASE_INSENSITIVE_ORDER.startsWith(r,an)) {      a.add(r.toString());    } else {      break;    }  }  return a;}  }
class C{  void removeUntil(int firstUncommittedSection){  if (firstUncommittedSection == 0) {    return;  }  int firstDataPageToKeep=logSectionPageMap.get(firstUncommittedSection);  firstTrunkPage=removeUntil(firstTrunkPage,firstDataPageToKeep);  store.setLogFirstPage(logKey,firstTrunkPage,firstDataPageToKeep);  while (firstSectionId < firstUncommittedSection) {    if (firstSectionId > 0) {      logSectionPageMap.remove(firstSectionId);    }    firstSectionId++;  }}  }
class C{  @Override protected DF_LatticeCell makeCell(Object o){  if (!(o instanceof HeapVariable)) {    throw new OptimizingCompilerException("IndexPropagation:makeCell");  }  DF_LatticeCell result=null;  Object heapType=((HeapVariable<?>)o).getHeapType();  if (heapType instanceof TypeReference) {    result=new ArrayCell((HeapVariable<?>)o);  } else {    result=new ObjectCell((HeapVariable<?>)o);  }  return result;}  }
class C{  private CloseableHttpResponse postOverHttp(Object dataToPost,String pathSuffix){  CloseableHttpResponse httpResponse=null;  HttpPost httpPostRequest;  httpPostRequest=new HttpPost(fluxEndpoint + pathSuffix);  try {    final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();    objectMapper.writeValue(byteArrayOutputStream,dataToPost);    httpPostRequest.setEntity(new ByteArrayEntity(byteArrayOutputStream.toByteArray(),ContentType.APPLICATION_JSON));    httpResponse=closeableHttpClient.execute(httpPostRequest);    final int statusCode=httpResponse.getStatusLine().getStatusCode();    if (statusCode >= Response.Status.OK.getStatusCode() && statusCode < Response.Status.MOVED_PERMANENTLY.getStatusCode()) {    } else {      throw new RuntimeCommunicationException("Did not receive a valid response from Flux core");    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeCommunicationException("Could not communicate with Flux runtime");  }  return httpResponse;}  }
class C{  public void testSubtractEqualScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="123121247898748224119637948679166971643339.7522230419";  int cScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.subtract(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public static void writeValidationSample(List<File> validationList,String outputFolder){  File validation_sample=new File(outputFolder);  if (validation_sample.exists()) {    LOG.warn("The output folder exists and will be deleted.");    LOG.warn("  --> " + validation_sample.getAbsolutePath());    FileUtils.delete(validation_sample);  }  validation_sample.mkdirs();  if (!validationList.isEmpty()) {    for (    File file : validationList) {      String fileName=file.getName();      File newFile=new File(outputFolder + "\\" + fileName);      IOUtils.copyFile(file,newFile);    }  } else {    LOG.error("There are no files in the sampled list to be written.");  }}  }
class C{  public boolean insertFlag(final Key photoKey,final String userId) throws DatastoreException {  List<Property> properties=ImmutableList.of(makeProperty("userId",makeValue(userId)).build(),makeProperty("date",makeValue(new Date())).build());  Entity flag=DbUtils.insertEntity(datastore,FLAG_ENTITY,photoKey,properties);  return flag.hasKey();}  }
class C{  public static void main(String[] argv){  try {    Queue queue=new Queue();    for (int i=0; i < argv.length; i++) {      queue.push(argv[i]);    }    System.out.println("After pushing command line arguments");    System.out.println(queue.toString());    while (!queue.empty()) {      System.out.println("Pop: " + queue.pop().toString());    }    try {      queue.pop();      System.out.println("ERROR: pop did not throw exception!");    } catch (    RuntimeException ex) {      System.out.println("Pop on empty queue correctly gave exception.");    }  } catch (  Exception ex) {    System.out.println(ex.getMessage());  }}  }
class C{  @SuppressWarnings("rawtypes") public static Task createBannedTask(){  return new Task(TaskTypes.BANNED_TASK);}  }
class C{  public ScreenExtent(Vec4 modelReferencePoint,Rectangle screenBounds){  this.modelReferencePoint=modelReferencePoint;  this.screenBounds=(screenBounds != null) ? new Rectangle(screenBounds) : null;}  }
class C{  ArrayList<UpdatePod> updatePods(){  return null;}  }
class C{  public boolean isAuthenticationFailed(){  return authenticationFailed;}  }
class C{  public static org.oscm.vo.VOPaymentType convertToApi(org.oscm.internal.vo.VOPaymentType oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOPaymentType newVO=new org.oscm.vo.VOPaymentType();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setName(oldVO.getName());  newVO.setPaymentTypeId(oldVO.getPaymentTypeId());  newVO.setCollectionType(EnumConverter.convert(oldVO.getCollectionType(),org.oscm.types.enumtypes.PaymentCollectionType.class));  return newVO;}  }
class C{  public GOCDataBuilder withClearedAt(final long smClearedAtc){  this.smClearedAtc=smClearedAtc;  return this;}  }
class C{  public ZDT3(int numberOfVariables){  super(numberOfVariables);}  }
class C{  private static void edit(VirtualArrayForm virtualArray){  JsonObject jobject=getCookieAsJson(VIPR_START_GUIDE);  String isGuideAdd=null;  if (jobject != null && jobject.get(GUIDE_VISIBLE) != null) {    isGuideAdd=jobject.get(GUIDE_VISIBLE).getAsString();  }  if (isGuideAdd != null && StringUtils.equalsIgnoreCase(isGuideAdd,"true")) {    renderArgs.put(GUIDE_VISIBLE,isGuideAdd);  }  Map<Boolean,String> autoSanZoningOptions=Maps.newHashMap();  autoSanZoningOptions.put(Boolean.TRUE,Messages.get("virtualArray.autoSanZoning.true"));  autoSanZoningOptions.put(Boolean.FALSE,Messages.get("virtualArray.autoSanZoning.false"));  renderArgs.put("autoSanZoningOptions",autoSanZoningOptions);  renderArgs.put("storageSystems",new VirtualArrayStorageSystemsDataTable());  renderArgs.put("virtualPools",new VirtualArrayVirtualPoolsDataTable());  if (TenantUtils.canReadAllTenants() && VirtualArrayUtils.canUpdateACLs()) {    renderArgs.put("tenantOptions",dataObjectOptions(await(new TenantsCall().asPromise())));  }  if (!virtualArray.isNew()) {    renderArgs.put("networksCount",NetworkUtils.getNetworksByVirtualArray(virtualArray.id).size());    renderArgs.put("storagePortsCount",StoragePortUtils.getStoragePortsByVirtualArray(uri(virtualArray.id)).size());    renderArgs.put("storagePoolsCount",StoragePoolUtils.getStoragePoolsAssignedToVirtualArray(virtualArray.id).size());  }  render("@edit",virtualArray);}  }
class C{  public T caseTypedElement(TypedElement object){  return null;}  }
class C{  public PropertyDialog(Dialog owner,PropertyEditor pe){  this(owner,pe,-1,-1);}  }
class C{  private void siftDown(int k,RunnableScheduledFuture<?> key){  int half=size >>> 1;  while (k < half) {    int child=(k << 1) + 1;    RunnableScheduledFuture<?> c=queue[child];    int right=child + 1;    if (right < size && c.compareTo(queue[right]) > 0)     c=queue[child=right];    if (key.compareTo(c) <= 0)     break;    queue[k]=c;    setIndex(c,k);    k=child;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  public boolean isIn(Coords coords){  return coordinates.contains(coords);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.104 -0500",hash_original_method="F8F20EF16F95C5B1E0CE2264EC877518",hash_generated_method="A69A351A96146DBA41FCC8B3649180A7") boolean beamBeats(int direction,Rect source,Rect rect1,Rect rect2){  final boolean rect1InSrcBeam=beamsOverlap(direction,source,rect1);  final boolean rect2InSrcBeam=beamsOverlap(direction,source,rect2);  if (rect2InSrcBeam || !rect1InSrcBeam) {    return false;  }  if (!isToDirectionOf(direction,source,rect2)) {    return true;  }  if ((direction == View.FOCUS_LEFT || direction == View.FOCUS_RIGHT)) {    return true;  }  return (majorAxisDistance(direction,source,rect1) < majorAxisDistanceToFarEdge(direction,source,rect2));}  }
class C{  @SuppressWarnings("unchecked") public static <E>Function<E,E> identity(){  return (Function<E,E>)IdentityFunction.INSTANCE;}  }
class C{  public static WindowListener remove(WindowListener l,WindowListener oldl){  return (WindowListener)removeInternal(l,oldl);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.441 -0500",hash_original_method="5CCC2D76AB339C78C9BD8A2A561C74E1",hash_generated_method="EB65942C4CBA85DA81B2535FD453180B") protected void detach(){  wrappedConnection=null;  connManager=null;  duration=Long.MAX_VALUE;}  }
class C{  public boolean removeEdge(Node node1,Node node2){  return false;}  }
class C{  public void testEquals() throws StunException {  ErrorCodeAttribute target=null;  boolean expectedReturn=false;  boolean actualReturn=errorCodeAttribute.equals(target);  assertEquals("equals() failed against a null value target.",expectedReturn,actualReturn);  target=new ErrorCodeAttribute();  expectedReturn=false;  target.setErrorClass(MsgFixture.ERROR_CLASS);  target.setErrorNumber(MsgFixture.ERROR_NUMBER);  errorCodeAttribute.setErrorClass((byte)(MsgFixture.ERROR_CLASS + 1));  errorCodeAttribute.setErrorNumber((byte)(MsgFixture.ERROR_NUMBER + 1));  actualReturn=errorCodeAttribute.equals(target);  assertEquals("equals() failed against a not equal target.",expectedReturn,actualReturn);  target=new ErrorCodeAttribute();  errorCodeAttribute=new ErrorCodeAttribute();  expectedReturn=true;  target.setErrorClass(MsgFixture.ERROR_CLASS);  target.setErrorNumber(MsgFixture.ERROR_NUMBER);  errorCodeAttribute.setErrorClass(MsgFixture.ERROR_CLASS);  errorCodeAttribute.setErrorNumber(MsgFixture.ERROR_NUMBER);  actualReturn=errorCodeAttribute.equals(target);  assertEquals("equals() failed against a not equal target.",expectedReturn,actualReturn);}  }
class C{  public AppConfiguration(final String applicationId){  this();  setApplicationId(applicationId);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.020 -0400",hash_original_method="2D7D395683AE9CE33D072044336B70BB",hash_generated_method="59D12AAE3F3B3C5A4F5D7E6DAC60500B") public ExpandedMenuView(Context context,AttributeSet attrs){  super(context,attrs);  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.MenuView,0,0);  mAnimations=a.getResourceId(com.android.internal.R.styleable.MenuView_windowAnimationStyle,0);  a.recycle();  setOnItemClickListener(this);}  }
class C{  public boolean hasThread(){  return !this.waitingThreads.isEmpty();}  }
class C{  public String substringLower(int start,int count){  return String.valueOf(lcText,start,count);}  }
class C{  protected SubscriptionEvent(String nodeId){  super(nodeId);}  }
class C{  @RequestMapping(value="/emrClusters/namespaces/{namespace}/emrClusterDefinitionNames/{emrClusterDefinitionName}/emrClusterNames/{emrClusterName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_EMR_CLUSTERS_DELETE) public EmrCluster terminateEmrCluster(@PathVariable("namespace") String namespace,@PathVariable("emrClusterDefinitionName") String emrClusterDefinitionName,@PathVariable("emrClusterName") String emrClusterName,@RequestParam(value="overrideTerminationProtection",required=false,defaultValue="false") Boolean overrideTerminationProtection,@RequestParam(value="emrClusterId",required=false) String emrClusterId) throws Exception {  EmrClusterAlternateKeyDto alternateKey=EmrClusterAlternateKeyDto.builder().namespace(namespace).emrClusterDefinitionName(emrClusterDefinitionName).emrClusterName(emrClusterName).build();  return emrService.terminateCluster(alternateKey,overrideTerminationProtection,emrClusterId);}  }
class C{  public static String checkNotEmpty(String string){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && TextUtils.isEmpty(string)) {    throw new IllegalArgumentException();  }  return string;}  }
class C{  public static void doFakeBlockExplosion(World world,int x,int y,int z){  world.spawnParticle("hugeexplosion",x,y,z,0.0D,0.0D,0.0D);  world.playSound(x,y,z,"random.explode",1.0F,1.0F,true);}  }
class C{  public boolean sawUniversalHandler(){  return universalHandler;}  }
class C{  void registerToRemoveAfterSuite(Path f){  assert f != null;  if (LuceneTestCase.LEAVE_TEMPORARY) {    System.err.println("INFO: Will leave temporary file: " + f.toAbsolutePath());    return;  }synchronized (cleanupQueue) {    cleanupQueue.add(f);  }}  }
class C{  protected boolean isIncludeStackTrace(HttpServletRequest request){  ErrorProperties.IncludeStacktrace include=serverProperties.getError().getIncludeStacktrace();  if (include == ErrorProperties.IncludeStacktrace.ALWAYS) {    return true;  }  if (include == ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM) {    return getTraceParameter(request);  }  return false;}  }
class C{  private int reverseAlignForBidi(Component c){  return reverseAlignForBidi(c,c.getStyle().getAlignment());}  }
class C{  private boolean seekTLog(long targetVersion){  if (targetVersion < ((CdcrTransactionLog)tlogs.peekLast()).startVersion) {    return false;  }  tlogReader.close();  TransactionLog last=null;  while (tlogs.size() > 1) {    if (((CdcrTransactionLog)tlogs.peekLast()).startVersion >= targetVersion) {      break;    }    last=tlogs.pollLast();  }  if (last != null)   tlogs.addLast(last);  currentTlog=tlogs.peekLast();  tlogReader=currentTlog.getReader(0);  pointer.set(currentTlog.tlogFile);  numRecordsReadInCurrentTlog=0;  return true;}  }
class C{  public boolean await(int duration,TimeUnit unit) throws InterruptedException {  return latch.await(duration,unit);}  }
class C{  public String nodeLabel(){  RightThreadedBinaryNode<T> thread=getNext();  StringBuilder sb=new StringBuilder();  sb.append("{");  sb.append("{value|" + getValue() + "}");  sb.append("}");  if (thread != null) {    sb.append("|{" + thread.getValue() + "}");  }  return sb.toString();}  }
class C{  private void log(String str){  Log.i(this.getClass().getSimpleName(),"-------" + str);}  }
class C{  private Encode(){}  }
class C{  public void dump(String prefix,Appendable out) throws IOException {  out.append(prefix).append(this.toString());  for (  Node childNode : children) {    if (childNode != null) {      out.append(LINE_SEPARATOR);      ((SimpleNode)childNode).dump(prefix + " ",out);    }  }}  }
class C{  @SuppressWarnings("deprecation") public ItemStack toItemStack(int amount){  ItemStack item=new ItemStack(Material.MONSTER_EGG,amount);  net.minecraft.server.v1_9_R1.ItemStack stack=CraftItemStack.asNMSCopy(item);  NBTTagCompound tagCompound=stack.getTag();  if (tagCompound == null) {    tagCompound=new NBTTagCompound();  }  NBTTagCompound id=new NBTTagCompound();  id.setString("id",type.getName());  tagCompound.set("EntityTag",id);  stack.setTag(tagCompound);  return CraftItemStack.asBukkitCopy(stack);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int indexOf(DurationFieldType type){  return getPeriodType().indexOf(type);}  }
class C{  @Override public void updateNull(String columnLabel) throws SQLException {  try {    debugCodeCall("updateNull",columnLabel);    update(columnLabel,ValueNull.INSTANCE);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static String cellToXML(final int isServing,final int isNeighbour,final String mcc,final String mnc,final String lac,final String logicalId,final String actualId,final String rnc,final String strengthDbm,final String strengthAsu,final int type,final String psc){  final StringBuffer s=new StringBuffer(CELL_XML_DEFAULT_LENGTH);  if (isServing != 0) {    s.append("\n\t\t<gsmserving mcc=\"");    s.append(mcc);    s.append("\"");    s.append(" mnc=\"");    s.append(mnc);    s.append("\"");    s.append(" lac=\"");    s.append(lac);    s.append("\"");    s.append(" id=\"");    s.append(logicalId);    s.append("\"");    s.append(" act_id=\"");    s.append(actualId);    s.append("\"");    s.append(" rnc=\"");    s.append(rnc);    s.append("\"");    s.append(" psc=\"");    s.append(psc);    s.append("\"");    s.append(" ss=\"");    s.append(strengthDbm);    s.append("\"");    s.append(" act=\"");    s.append(CellRecord.TECHNOLOGY_MAP().get(type));    s.append("\"");    s.append(" rxlev=\"");    s.append(strengthAsu);    s.append("\"");    s.append("/>");  }  if (isNeighbour != 0) {    s.append("\n\t\t<gsmneighbour mcc=\"");    s.append(mcc);    s.append("\"");    s.append(" mnc=\"");    s.append(mnc);    s.append("\"");    s.append(" lac=\"");    s.append(lac);    s.append("\"");    s.append(" id=\"");    s.append(logicalId);    s.append("\"");    s.append(" act_id=\"");    s.append(actualId);    s.append("\"");    s.append(" rnc=\"");    s.append(rnc);    s.append("\"");    s.append(" psc=\"");    s.append(psc);    s.append("\"");    s.append(" rxlev=\"");    s.append(strengthAsu);    s.append("\"");    s.append(" act=\"");    s.append(CellRecord.TECHNOLOGY_MAP().get(type));    s.append("\"");    s.append("/>");  }  return s.toString();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_END___MULTIPLICITY_1:    return multiplicity_1 != null && !multiplicity_1.isEmpty();case UmplePackage.ASSOCIATION_END___TYPE_1:  return TYPE_1_EDEFAULT == null ? type_1 != null : !TYPE_1_EDEFAULT.equals(type_1);case UmplePackage.ASSOCIATION_END___ROLE_NAME_1:return ROLE_NAME_1_EDEFAULT == null ? roleName_1 != null : !ROLE_NAME_1_EDEFAULT.equals(roleName_1);case UmplePackage.ASSOCIATION_END___IS_SORTED_1:return isSorted_1 != null && !isSorted_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  @SuppressWarnings("unchecked") public Object clone() throws CloneNotSupportedException {  CommodityChannelIndexDataset clone=(CommodityChannelIndexDataset)super.clone();  clone.data=(List<IndicatorSeries>)ObjectUtilities.deepClone(this.data);  return clone;}  }
class C{  public void addHit(EntryScore<K> entry){  if (hits.size() > 0) {    EntryScore lastEntry=hits.get(hits.size() - 1);    if (comparator.compare(lastEntry,entry) < 0) {      throw new IllegalArgumentException();    }  }  if (hits.size() >= limit) {    return;  }  hits.add(entry);}  }
class C{  public static double variance(int size,double sum,double sumOfSquares){  double mean=sum / size;  return (sumOfSquares - mean * sum) / size;}  }
class C{  public static int solveQuad(double eqn[],double res[]){  double a=eqn[2];  double b=eqn[1];  double c=eqn[0];  int rc=0;  if (a == 0.0) {    if (b == 0.0) {      return -1;    }    res[rc++]=-c / b;  } else {    double d=b * b - 4.0 * a * c;    if (d < 0.0) {      return 0;    }    d=Math.sqrt(d);    res[rc++]=(-b + d) / (a * 2.0);    if (d != 0.0) {      res[rc++]=(-b - d) / (a * 2.0);    }  }  return fixRoots(res,rc);}  }
class C{  public ScPhysicalServer createServer(String ssn,String hostName,boolean isIscsi,String osId) throws StorageCenterAPIException {  Parameters params=new Parameters();  params.add("Name",hostName);  params.add("StorageCenter",ssn);  params.add("Notes",NOTES_STRING);  params.add("OperatingSystem",osId);  RestResult rr=restClient.post("StorageCenter/ScPhysicalServer",params.toJson());  if (!checkResults(rr)) {    String error=String.format("Error creating server '%s': %s",hostName,rr.getErrorMsg());    throw new StorageCenterAPIException(error);  }  return gson.fromJson(rr.getResult(),ScPhysicalServer.class);}  }
class C{  protected void clearEvents(){}  }
class C{  public static Object readInvocationResult(PlatformContext ctx,BinaryRawReaderEx reader) throws IgniteCheckedException {  boolean success=reader.readBoolean();  if (success)   return reader.readObjectDetached(); else {    boolean hasException=reader.readBoolean();    if (hasException) {      Object nativeErr=reader.readObjectDetached();      assert nativeErr != null;      throw ctx.createNativeException(nativeErr);    } else {      String errMsg=reader.readString();      assert errMsg != null;      throw new IgniteCheckedException(errMsg);    }  }}  }
class C{  protected void flushCacheWithAppend(byte bufferToAppend[],int off,int len) throws IOException {  this.out.writeLine(Integer.toHexString(this.cachePosition + len));  this.out.write(this.cache,0,this.cachePosition);  this.out.write(bufferToAppend,off,len);  this.out.writeLine("");  this.cachePosition=0;}  }
class C{  private static CharInfo mutableCopyOf(CharInfo charInfo){  CharInfo copy=new CharInfo();  int max=charInfo.array_of_bits.length;  System.arraycopy(charInfo.array_of_bits,0,copy.array_of_bits,0,max);  copy.firstWordNotUsed=charInfo.firstWordNotUsed;  max=charInfo.shouldMapAttrChar_ASCII.length;  System.arraycopy(charInfo.shouldMapAttrChar_ASCII,0,copy.shouldMapAttrChar_ASCII,0,max);  max=charInfo.shouldMapTextChar_ASCII.length;  System.arraycopy(charInfo.shouldMapTextChar_ASCII,0,copy.shouldMapTextChar_ASCII,0,max);  copy.m_charToString=(HashMap)charInfo.m_charToString.clone();  copy.onlyQuotAmpLtGt=charInfo.onlyQuotAmpLtGt;  return copy;}  }
class C{  public PdfRendererBuilder useDefaultPageSize(float pageWidth,float pageHeight,PageSizeUnits units){  this._pageWidth=pageWidth;  this._pageHeight=pageHeight;  this._isPageSizeInches=(units == PageSizeUnits.INCHES);  return this;}  }
class C{  public NoSuchElementException(){  super();}  }
class C{  protected List<ACL> createACLsToAdd(boolean includeReadOnly,String digestAllUsername,String digestAllPassword,String digestReadonlyUsername,String digestReadonlyPassword){  try {    List<ACL> result=new ArrayList<ACL>();    if (!StringUtils.isEmpty(digestAllUsername) && !StringUtils.isEmpty(digestAllPassword)) {      result.add(new ACL(ZooDefs.Perms.ALL,new Id("digest",DigestAuthenticationProvider.generateDigest(digestAllUsername + ":" + digestAllPassword))));    }    if (includeReadOnly) {      if (!StringUtils.isEmpty(digestReadonlyUsername) && !StringUtils.isEmpty(digestReadonlyPassword)) {        result.add(new ACL(ZooDefs.Perms.READ,new Id("digest",DigestAuthenticationProvider.generateDigest(digestReadonlyUsername + ":" + digestReadonlyPassword))));      }    }    if (result.isEmpty()) {      result=ZooDefs.Ids.OPEN_ACL_UNSAFE;    }    return result;  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Intent offerSuperUser(Activity activity,int requestCode){  return getInternals().offerSuperUser(activity,requestCode);}  }
class C{  public static Appendable withFormatter(Appendable self,Locale locale,@ClosureParams(value=SimpleType.class,options="java.util.Formatter") Closure closure){  Formatter formatter=new Formatter(self,locale);  callWithFormatter(closure,formatter);  return self;}  }
class C{  public void addPlugInSingleRowFunction(String functionName,String className,String methodName,ConfigurationPlugInSingleRowFunction.ValueCache valueCache,ConfigurationPlugInSingleRowFunction.FilterOptimizable filterOptimizable,boolean rethrowExceptions) throws ConfigurationException {  ConfigurationPlugInSingleRowFunction entry=new ConfigurationPlugInSingleRowFunction();  entry.setFunctionClassName(className);  entry.setFunctionMethodName(methodName);  entry.setName(functionName);  entry.setValueCache(valueCache);  entry.setFilterOptimizable(filterOptimizable);  entry.setRethrowExceptions(rethrowExceptions);  plugInSingleRowFunctions.add(entry);}  }
class C{  public float floatValue(){  return 0.0f;}  }
class C{  private void addNewTrain(ActionEvent e){  if (selectedTransit == null) {    JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error15"),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    cancelInitiateTrain(null);    return;  }  String transitName=selectedTransit.getSystemName();  String trainName="";  int index=startingBlockBox.getSelectedIndex();  if (index < 0) {    return;  }  String startBlockName=startingBlockBoxList.get(index).getSystemName();  int startBlockSeq=startingBlockSeqList.get(index).intValue();  index=destinationBlockBox.getSelectedIndex();  if (index < 0) {    return;  }  String endBlockName=destinationBlockBoxList.get(index).getSystemName();  int endBlockSeq=destinationBlockSeqList.get(index).intValue();  boolean autoRun=autoRunBox.isSelected();  if (!checkResetWhenDone()) {    return;  }  boolean resetWhenDone=resetWhenDoneBox.isSelected();  boolean reverseAtEnd=reverseAtEndBox.isSelected();  int delayedStart=delayModeFromBox(delayedStartBox);  int delayedReStart=delayModeFromBox(delayedReStartBox);  int departureTimeHours=8;  try {    departureTimeHours=Integer.parseInt(departureHrField.getText());    if ((departureTimeHours < 0) || (departureTimeHours > 23)) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("BadEntry3",departureHrField.getText()),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      log.warn("Range error in Departure Time Hours field");      return;    }  } catch (  NumberFormatException ehr) {    JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("BadEntry2",departureHrField.getText()),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.warn("Conversion exception in departure time hours field");    return;  }  int departureTimeMinutes=8;  try {    departureTimeMinutes=Integer.parseInt(departureMinField.getText());    if ((departureTimeMinutes < 0) || (departureTimeMinutes > 59)) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("BadEntry3",departureMinField.getText()),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      log.warn("Range error in Departure Time Minutes field");      return;    }  } catch (  NumberFormatException emn) {    JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("BadEntry2",departureMinField.getText()),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.warn("Conversion exception in departure time minutes field");    return;  }  int delayRestartMinutes=0;  try {    delayRestartMinutes=Integer.parseInt(delayMinField.getText());    if ((delayRestartMinutes < 0)) {      JOptionPane.showMessageDialog(initiateFrame,delayMinField.getText(),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      log.warn("Range error in Delay Restart Time Minutes field");      return;    }  } catch (  NumberFormatException emn) {    JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("BadEntry2",delayMinField.getText()),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.warn("Conversion exception in restart delay minutes field");    return;  }  int tSource=0;  String dccAddress="unknown";  if (_TrainsFromRoster) {    index=trainSelectBox.getSelectedIndex();    if (index < 0) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error14"),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      cancelInitiateTrain(null);      return;    }    trainName=(String)trainSelectBox.getSelectedItem();    RosterEntry r=trainBoxList.get(index);    dccAddress=r.getDccAddress();    if (!isAddressFree(r.getDccLocoAddress().getNumber())) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error40",dccAddress),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      return;    }    tSource=ActiveTrain.ROSTER;    if (trainTypeBox.getSelectedIndex() != 0 && (r.getAttribute("DisptacherTrainType") == null || !r.getAttribute("DispatcherTrainType").equals("" + trainTypeBox.getSelectedItem()))) {      r.putAttribute("DispatcherTrainType","" + trainTypeBox.getSelectedItem());      r.updateFile();      Roster.getDefault().writeRoster();    }  } else   if (_TrainsFromTrains) {    tSource=ActiveTrain.OPERATIONS;    index=trainSelectBox.getSelectedIndex();    if (index < 0) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error14"),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      cancelInitiateTrain(null);      return;    }    trainName=(String)trainSelectBox.getSelectedItem();  } else   if (_TrainsFromUser) {    trainName=trainNameField.getText();    if ((trainName == null) || trainName.equals("")) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error14"),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      return;    }    if (!isTrainFree(trainName)) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error24",trainName),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      return;    }    dccAddress=dccAddressField.getText();    int address=-1;    try {      address=Integer.parseInt(dccAddress);    } catch (    NumberFormatException ex) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error23"),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      log.error("Conversion exception in dccAddress field");      return;    }    if ((address < 1) || (address > 9999)) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error23"),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      return;    }    if (!isAddressFree(address)) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error40",address),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);      return;    }    tSource=ActiveTrain.USER;  }  int priority=5;  try {    priority=Integer.parseInt(priorityField.getText());  } catch (  NumberFormatException ex) {    JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("BadEntry",priorityField.getText()),Bundle.getMessage("ErrorTitle"),JOptionPane.ERROR_MESSAGE);    log.error("Conversion exception in priority field");    return;  }  int trainType=trainTypeBox.getSelectedIndex();  if (autoRunBox.isSelected()) {    if (!readAutoRunItems()) {      return;    }  }  ActiveTrain at=_dispatcher.createActiveTrain(transitName,trainName,tSource,startBlockName,startBlockSeq,endBlockName,endBlockSeq,autoRun,dccAddress,priority,resetWhenDone,reverseAtEnd,true,initiateFrame);  if (at == null) {    return;  }  if (tSource == ActiveTrain.ROSTER) {    at.setRosterEntry(trainBoxList.get(trainSelectBox.getSelectedIndex()));  }  at.setDelayedStart(delayedStart);  at.setDelayedReStart(delayedReStart);  at.setDepartureTimeHr(departureTimeHours);  at.setDepartureTimeMin(departureTimeMinutes);  at.setRestartDelay(delayRestartMinutes);  at.setDelaySensor((jmri.Sensor)delaySensor.getSelectedBean());  if ((_dispatcher.isFastClockTimeGE(departureTimeHours,departureTimeMinutes) && delayedStart != ActiveTrain.SENSORDELAY) || delayedStart == ActiveTrain.NODELAY) {    at.setStarted();  }  at.setRestartSensor((jmri.Sensor)delayReStartSensor.getSelectedBean());  at.setTrainType(trainType);  at.setTerminateWhenDone(terminateWhenDoneBox.isSelected());  if (autoRunBox.isSelected()) {    AutoActiveTrain aat=new AutoActiveTrain(at);    setAutoRunItems(aat);    if (!aat.initialize()) {      JOptionPane.showMessageDialog(initiateFrame,Bundle.getMessage("Error27",at.getTrainName()),Bundle.getMessage("InformationTitle"),JOptionPane.INFORMATION_MESSAGE);    }    _dispatcher.getAutoTrainsFrame().addAutoActiveTrain(aat);  }  _dispatcher.allocateNewActiveTrain(at);  initiateFrame.setVisible(false);  initiateFrame.dispose();  initiateFrame=null;  _dispatcher.newTrainDone(at);}  }
class C{  public PictureSizeLoader(Context context,boolean cachedOnly){  mContext=context;  mContentResolver=context.getContentResolver();  mCameraDeviceInfo=CameraAgentFactory.getAndroidCameraAgent(context,CameraAgentFactory.CameraApi.API_1).getCameraDeviceInfo();  mCachedOnly=cachedOnly;}  }
class C{  public static SignalPlanData createSignalPlan(SignalControlDataFactory fac,int cycleTime,int offset){  return createSignalPlan(fac,cycleTime,offset,Id.create(1,SignalPlan.class));}  }
class C{  public void abortTransfer(){  assert msgOnFly != null : "No message to abort at " + msgFromNode;  getOtherNode(msgFromNode).messageAborted(this.msgOnFly.getId(),msgFromNode,getRemainingByteCount());  clearMsgOnFly();  this.transferDoneTime=0;}  }
class C{  public InvalidPropetiesException(Throwable cause){  super(cause);}  }
class C{  public OuterEdgeLayout(){  this(0.0);}  }
class C{  JComboBox createEyesComboBox(){  JComboBox cb=new JComboBox();  fillComboBox(cb);  cb.addActionListener(this);  return cb;}  }
class C{  private static File constructFilePaths(String file1,String file2){  File newPath;  if (file2.startsWith(file1)) {    newPath=new File(file2);  } else {    newPath=new File(file1 + "/" + file2);  }  return newPath;}  }
class C{  private Collection<ProcessErrorStateInfo> launchActivity(String packageName){  Intent homeIntent=new Intent(Intent.ACTION_MAIN);  homeIntent.addCategory(Intent.CATEGORY_HOME);  homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  Intent intent=mPackageManager.getLaunchIntentForPackage(packageName);  if (intent == null) {    Log.d(TAG,"Skipping " + packageName + "; missing launch intent");    return null;  }  final Collection<ProcessErrorStateInfo> preErr=mActivityManager.getProcessesInErrorState();  mContext.startActivity(intent);  try {    Thread.sleep(mAppLaunchTimeout);  } catch (  InterruptedException e) {  }  mContext.startActivity(homeIntent);  try {    Thread.sleep(mWorkspaceLaunchTimeout);  } catch (  InterruptedException e) {  }  final Collection<ProcessErrorStateInfo> postErr=mActivityManager.getProcessesInErrorState();  if (preErr != null && postErr != null) {    postErr.removeAll(preErr);  }  return postErr;}  }
class C{  protected IfImpl(){  super();}  }
class C{  public void readFacilitiesZones(final ActivityFacilitiesImpl zones){  String filename=module.getMATSim4OpusTemp() + InternalConstants.URBANSIM_ZONE_DATASET_TABLE + this.year+ InternalConstants.FILE_TYPE_TAB;  log.info("Starting to read urbansim zones table from " + filename);  try {    BufferedReader reader=IOUtils.getBufferedReader(filename);    String line=reader.readLine();    Map<String,Integer> idxFromKey=HeaderParser.createIdxFromKey(line,InternalConstants.TAB_SEPERATOR);    final int indexXCoodinate=idxFromKey.get(InternalConstants.X_COORDINATE);    final int indexYCoodinate=idxFromKey.get(InternalConstants.Y_COORDINATE);    final int indexZoneID=idxFromKey.get(InternalConstants.ZONE_ID);    Id<ActivityFacility> zone_ID;    Coord coord;    String[] parts;    while ((line=reader.readLine()) != null) {      parts=line.split(InternalConstants.TAB_SEPERATOR);      long zoneIdAsLong=(long)Double.parseDouble(parts[indexZoneID]);      zone_ID=Id.create(zoneIdAsLong,ActivityFacility.class);      coord=new Coord(Double.parseDouble(parts[indexXCoodinate]),Double.parseDouble(parts[indexYCoodinate]));      ActivityFacilityImpl facility=zones.createAndAddFacility(zone_ID,coord);      facility.setDesc("urbansim location");      Map<String,Object> customFacilityAttributes=facility.getCustomAttributes();      customFacilityAttributes.put(InternalConstants.ZONE_ID,zone_ID);    }  } catch (  FileNotFoundException e) {    e.printStackTrace();    System.exit(-1);  }catch (  IOException e) {    e.printStackTrace();    System.exit(-1);  }  log.info("Done reading urbansim parcels. Found " + zones.getFacilities().size() + " zones.");}  }
class C{  private static long countBytes(String s,boolean shortLength) throws UTFDataFormatException {  long result=0;  final int length=s.length();  for (int i=0; i < length; ++i) {    char ch=s.charAt(i);    if (ch != 0 && ch <= 127) {      ++result;    } else     if (ch <= 2047) {      result+=2;    } else {      result+=3;    }    if (shortLength && result > 65535) {      throw new UTFDataFormatException("String more than 65535 UTF bytes long");    }  }  return result;}  }
class C{  @SuppressWarnings("unchecked") private void notifyTextListeners(TextEvent ge){  Vector<TextListener> l;synchronized (this) {    l=(Vector<TextListener>)m_textListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptText(ge);    }  }}  }
class C{  protected String extractMimeTypeFromMethod(Method method){  RequestMapping requestMapping=getRequestMapping(method);  if (requestMapping != null) {    if (requestMapping.produces() != null && requestMapping.produces().length > 0) {      if (requestMapping.produces().length > 1) {        logger.warn("Method " + method.getName() + " is annotated with multiple Produces entries.");      }      return requestMapping.produces()[0];    }  }  return super.extractMimeTypeFromMethod(method);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public static synchronized GridTestPrintStream acquireErr(){  if (testErr == null)   testErr=new GridTestPrintStream(sysErr);  if (errCnt == 0)   System.setErr(testErr);  errCnt++;  return testErr;}  }
class C{  public SearchResponse search(String query) throws IOException {  return search(query,null,null);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_RANGE__LEFT:    setLeft((CharacterClassAtom)newValue);  return;case RegularExpressionPackage.CHARACTER_CLASS_RANGE__RIGHT:setRight((CharacterClassAtom)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public BindingNodeFactory(NodeFactory inner){  this.inner=inner;}  }
class C{  public void addInterface(String className){  _interfaces.add(className);  if (_isWrite)   getConstantPool().addClass(className);}  }
class C{  public boolean isYLegendRounded(){  return mRoundedYLegend;}  }
class C{  protected void notifyDataSetChanged(){  mAdapter.notifyDataSetChanged();}  }
class C{  static private void init(){  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();  String resourcePath=System.getProperty(RESOURCE_DIRECTORY_PROPERTY);  if (resourcePath == null) {    resourcePath=DEFAULT_RESOURCE_DIRECTORY;  }  URL resource=classLoader.getResource(resourcePath);  if (resource == null) {    log.log(Level.SEVERE,"The definition path {0} is not found inside the classpath",resource);    throw new IllegalStateException(String.format("The definition path '%s' is not found inside the classpath",resourcePath));  }  if (resource.getProtocol().equals("jar")) {    loadPropertiesJar(resource,DEFAULT_RESOURCE_DIRECTORY);    processLinkedDefinitions();  } else   if (resource.getProtocol().equals("file")) {    loadPropertiesFile(new File(resource.getFile()));    processLinkedDefinitions();  } else {    log.log(Level.SEVERE,"Invalid protocol for the definitions directory: {0}",resource);    throw new IllegalStateException(String.format("Invalid protocol for the definitions directory '%s'",resource.getProtocol()));  }}  }
class C{  public SketchesException(String message){  super(message);}  }
class C{  @Override public void flush() throws IOException {  super.flush();}  }
class C{  protected void persist(DomainObject<?> obj){  try {    dm.persist(obj);    dm.flush();    dm.refresh(obj);  } catch (  NonUniqueBusinessKeyException e) {    String domainClassName=PersistenceReflection.getDomainClassName(obj);    SaaSSystemException se=new SaaSSystemException(e);    logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_NOT_UNIQUE_BUSINESS_KEY,domainClassName);    throw se;  }}  }
class C{  public static double deviation(Iterator tuples,String field,double mean){  try {    int count=0;    double sumsq=0;    double x;    while (tuples.hasNext()) {      x=((Tuple)tuples.next()).getDouble(field) - mean;      sumsq+=x * x;      ++count;    }    return Math.sqrt(sumsq / count);  } catch (  Exception e) {    return Double.NaN;  }}  }
class C{  public tbody removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  private void merge(VelocityContext context,Table table,Writer writer) throws ReplicatorException {  try {    context.put("table",table);    if (template != null)     template.merge(context,writer);  } catch (  MethodInvocationException mie) {    throw new ReplicatorException("Something invoked in the template caused problem",mie);  }catch (  Exception e) {    throw new ReplicatorException(e);  }}  }
class C{  public Birthday(String text){  super(text);}  }
class C{  protected Node newNode(){  return new GenericEntityReference();}  }
class C{  public static CachedFile addCachedFile(CachedFile cf){  if (cf == null) {    if (logger.isTraceEnabled())     logger.trace("addCachedFile(cf) - unexpected null parameter");    return null;  }  CachedFile cf2=inCache(cf);  if (cf2 == null) {    String path=cf.getPath();    cf2=new CachedFile(path);    cachedFilesMap.put(path,cf2);    if (logger.isTraceEnabled())     logger.trace("Added CachedFile: " + path);  }  return cf2;}  }
class C{  public String useKernelEstimatorTipText(){  return "Use a kernel estimator for numeric attributes rather than a " + "normal distribution.";}  }
class C{  public String toStringX(){  StringBuffer sb=new StringBuffer("CacheMgt[");  sb.append("Instances=").append(m_instances.size()).append(", Elements=").append(getElementCount()).append("]");  return sb.toString();}  }
class C{  private static Map<INaviViewNode,INaviViewNode> createNodes(final INaviView target,final Collection<INaviViewNode> nodes){  final HashMap<INaviViewNode,INaviViewNode> map=new HashMap<INaviViewNode,INaviViewNode>();  for (  final INaviViewNode blockNode : nodes) {    createNodes(target,blockNode,map);  }  return map;}  }
class C{  String enc(String str){  return HTMLEntities.escapeHTML(str,HTMLEntities.HTMLV20);}  }
class C{  public Builder rootView(ViewGroup rootView){  return this;}  }
class C{  @Override public boolean continueExecuting(){  return target != null && target.isEntityAlive() && this.grabDelay < maxGrabDelay;}  }
class C{  public void writeClustersToFile(String filename){  int clusterCount=0;  int clusterMultiplier=1;  int totalClusters=clusterList.size();  log.info("Writing a total of " + totalClusters + " to file.");  try {    BufferedWriter output=new BufferedWriter(new FileWriter(new File(filename)));    try {      output.write("ClusterId,Long,Lat,NumberOfActivities");      output.newLine();      for (      Cluster c : clusterList) {        c.setCenterOfGravity();        Point center=c.getCenterOfGravity();        output.write(c.getClusterId());        output.write(delimiter);        output.write(String.valueOf(center.getX()));        output.write(delimiter);        output.write(String.valueOf(center.getY()));        output.write(delimiter);        output.write(String.valueOf(c.getPoints().size()));        output.newLine();        clusterCount++;        if (clusterCount == clusterMultiplier) {          log.info("   Clusters written: " + clusterCount);          clusterMultiplier*=2;        }      }      log.info("   Clusters written: " + clusterCount + " (Done)");    }  finally {      output.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void characters(XMLString text,Augmentations augs) throws XNIException {  if (text.length == 0) {    return;  }  try {    if (fDocumentHandler != null) {      fDocumentHandler.characters(text.ch,text.offset,text.length);    }    if (fContentHandler != null) {      fContentHandler.characters(text.ch,text.offset,text.length);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  @Override public AccessToken refreshAccessToken() throws IOException {  if (createScopedRequired()) {    throw new IOException("AppEngineCredentials requires createScoped call before use.");  }  GetAccessTokenResult accessTokenResponse=appIdentityService.getAccessToken(scopes);  String accessToken=accessTokenResponse.getAccessToken();  Date expirationTime=accessTokenResponse.getExpirationTime();  return new AccessToken(accessToken,expirationTime);}  }
class C{  @Override public Object clone(){  return new Bundle(this);}  }
class C{  public void join(final RuleSet other){  if (rules.length <= numRules + other.numRules) {    Rule[] tempRules=new Rule[rules.length + other.rules.length];    System.arraycopy(rules,0,tempRules,0,numRules);    rules=tempRules;  }  System.arraycopy(other.rules,0,rules,numRules,other.numRules);  for (int x=numRules; x < numRules + other.numRules; x++)   rules[x]=(Rule)(rules[x].clone());  numRules+=other.numRules;}  }
class C{  public static boolean isSupportedFileReplicationChange(VirtualPool currentVpool,VirtualPool newVpool,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking isSupportedFileReplicationChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  if (VirtualPool.vPoolSpecifiesFileReplication(currentVpool)) {    notSuppReasonBuff.append(String.format("File replication is already enable in source virtual pool %s.",currentVpool.getLabel()));    s_logger.info(notSuppReasonBuff.toString());    return false;  }  if (!VirtualPool.vPoolSpecifiesFileReplication(newVpool)) {    notSuppReasonBuff.append(String.format("File replication is not enable in target virtual pool %s.",newVpool.getLabel()));    s_logger.info(notSuppReasonBuff.toString());    return false;  }  if (!newVpool.getVirtualArrays().containsAll(currentVpool.getVirtualArrays())) {    notSuppReasonBuff.append(String.format("Virtual pool change not supported, Because Target Varray is different %s.",newVpool.getLabel()));    s_logger.info(notSuppReasonBuff.toString());    return false;  }  List<String> excluded=new ArrayList<String>();  String[] exclude=new String[]{FILE_REPLICATION_TYPE,FILE_REPLICATION_COPY_MODE,FILE_REPLICATION_RPO_TYPE,FILE_REPLICATION_RPO_VALUE,FILE_REPLICATION_COPIES,VARRAYS};  excluded.addAll(Arrays.asList(exclude));  excluded.addAll(Arrays.asList(GENERALLY_EXCLUDED));  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,null,excluded.toArray(exclude),null);  if (!changes.isEmpty()) {    notSuppReasonBuff.append(String.format("These target virtual pool [%s] differences are invalid: ",newVpool.getLabel()));    fillInNotSupportedReasons(changes,notSuppReasonBuff);    s_logger.info(String.format("Virtual pool change not supported. %s. Parameters other than %s were changed.",notSuppReasonBuff.toString(),excluded.toString()));    return false;  }  return true;}  }
class C{  public final String pop(){  if (m_firstFree <= 0)   return null;  m_firstFree--;  String s=m_map[m_firstFree];  m_map[m_firstFree]=null;  return s;}  }
class C{  private AnimatorSet createExitingImageAnimation(){  Log.v(TAG,">> createExitingImageAnimation");  ObjectAnimator positionAnimator=createExitingImagePositionAnimator();  ObjectAnimator matrixAnimator=createExitingImageMatrixAnimator();  AnimatorSet exitingImageAnimation=new AnimatorSet();  exitingImageAnimation.playTogether(positionAnimator,matrixAnimator);  Log.v(TAG,"<< createExitingImageAnimation");  return exitingImageAnimation;}  }
class C{  public R1Interval expanded(double radius){  if (isEmpty()) {    return this;  }  return new R1Interval(lo() - radius,hi() + radius);}  }
class C{  private void addMailJarsToExtraClasspath(InstalledLocalContainer container){  String mail=System.getProperty("cargo.testdata.mail-jars");  if (mail != null) {    String[] jars=container.getFileHandler().getChildren(mail);    for (    String jar : jars) {      container.addExtraClasspath(jar);    }  }}  }
class C{  private void makePathBlack(){  if (mPathBlack == null) {    mPathBlack=new Path();  }  Path p=new Path();  p.moveTo(Math.max(getPaddingLeft(),mProgress * mWidth / 100),mHeight / 2 + calculateDeltaY());  p.lineTo(mWidth,mHeight / 2);  mPathBlack.set(p);}  }
class C{  private static void loadTimeZoneMappings(ExceptionInterceptor exceptionInterceptor) throws SQLException {  timeZoneMappings=new Properties();  try {    timeZoneMappings.load(TimeUtil.class.getResourceAsStream(TIME_ZONE_MAPPINGS_RESOURCE));  } catch (  IOException e) {    throw SQLError.createSQLException(Messages.getString("TimeUtil.LoadTimeZoneMappingError"),SQLError.SQL_STATE_INVALID_CONNECTION_ATTRIBUTE,exceptionInterceptor);  }  for (  String tz : TimeZone.getAvailableIDs()) {    if (!timeZoneMappings.containsKey(tz)) {      timeZoneMappings.put(tz,tz);    }  }}  }
class C{  public String relocatingNodeId(){  return this.relocatingNodeId;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Coord forwardMercator(double latitude,double longitude){  double x=longitude * SIZE / 180;  double y=MathUtil.log(Math.tan((90 + latitude) * Math.PI / 360)) / (Math.PI / 180) * SIZE / 180;  return new Coord(y,x,true);}  }
class C{  @Override public Object clone(){  LogFormat clone=(LogFormat)super.clone();  clone.formatter=(NumberFormat)this.formatter.clone();  return clone;}  }
class C{  @Override public Shortcut create(AppContext ctx,Shortcut newInstance){  Persistent<? extends GenericPK> parent=newInstance.getParentObject(ServiceUtils.getInstance().getRootUserContext(ctx));  AccessRightsUtils.getInstance().setAccessRights(ctx,newInstance,parent);  Shortcut shortcut=ds.create(ctx,newInstance);  if (shortcut.getStateId() != null) {    updateAssociatedState(ctx,shortcut);  }  return shortcut;}  }
class C{  public void info(String message){  log(message,INFO);}  }
class C{  public boolean isArray(String key){  return get(key) instanceof Json.Array;}  }
class C{  public void deleteLocalDevice(String localDeviceName) throws VPlexApiException {  s_logger.info("Request to delete local VPLex device at {}",_baseURI);  _virtualVolumeMgr.deleteLocalDevice(localDeviceName);}  }
class C{  @Override @InService(PageServiceImpl.class) void writeImpl(TableKelp table,PageServiceImpl pageServiceImpl,TableWriterService readWrite,SegmentStream sOut,long oldSequence,int saveLength,int saveTail){  Objects.requireNonNull(sOut);  if (saveLength <= 0 || oldSequence != sOut.getSequence() || _stub == null || !_stub.allowDelta()) {    PageLeafImpl newPage;    if (!isDirty() && (_blocks.length == 0 || _blocks[0].isCompact())) {      newPage=copy(getSequence());    } else {      newPage=compact(table);    }    int sequenceWrite=newPage.nextWriteSequence();    if (!pageServiceImpl.compareAndSetLeaf(this,newPage) && !pageServiceImpl.compareAndSetLeaf(_stub,newPage)) {      System.out.println("HMPH: " + pageServiceImpl.getPage(getId()) + " "+ this+ " "+ _stub);    }    saveLength=newPage.getDataLengthWritten();    saveTail=newPage.getSaveTail();    newPage.clearDirty();    readWrite.writePage(newPage,sOut,oldSequence,saveLength,saveTail,sequenceWrite,Result.of(null));  } else {    int sequenceWrite=nextWriteSequence();    clearDirty();    readWrite.writePage(this,sOut,oldSequence,saveLength,saveTail,sequenceWrite,Result.of(null));  }}  }
class C{  public void testParsingNumbersThatAreBestRepresentedAsLongs() throws JSONException {  assertParsed(9223372036854775807L,"9223372036854775807");  assertParsed(9223372036854775806L,"9223372036854775806");  assertParsed(-9223372036854775808L,"-9223372036854775808");  assertParsed(-9223372036854775807L,"-9223372036854775807");}  }
class C{  private boolean verifyGhostBitsClear(){  for (int i=numWords; i < bits.length; i++) {    if (bits[i] != 0)     return false;  }  if ((numBits & 0x3f) == 0)   return true;  long mask=-1L << numBits;  return (bits[numWords - 1] & mask) == 0;}  }
class C{  public void deleteBranch(Serializable projectId,String branchName) throws IOException {  String tailUrl=GitlabProject.URL + "/" + sanitizeProjectId(projectId)+ GitlabBranch.URL+ branchName;  retrieve().method("DELETE").to(tailUrl,Void.class);}  }
class C{  private String generateVolumeLabel(String baseVolumeLabel,int nhIndex,int volumeIndex,int resourceCount){  StringBuilder volumeLabelBuilder=new StringBuilder(baseVolumeLabel);  volumeLabelBuilder.append("-").append(nhIndex);  if (resourceCount > 1) {    volumeLabelBuilder.append("-").append(volumeIndex + 1);  }  return volumeLabelBuilder.toString();}  }
class C{  public void execDetailsEnd(int reqId){  try {    for (    Integer key : tradeOrdersExecutions.keySet()) {      TradeOrder tradeorder=tradeOrdersExecutions.get(key);      if (tradeorder.getIsFilled()) {        if (tradeorder.hasTradePosition() && !tradeorder.getTradePosition().isOpen()) {          this.firePositionClosed(tradeorder.getTradePosition());        }      }    }    if (!executionDetails.isEmpty()) {      if (m_tradePersistentModel.existTradestrategyById(reqId)) {        Tradestrategy tradestrategy=m_tradePersistentModel.findTradestrategyById(reqId);        int nextOrderKey=orderKey.getAndIncrement();        for (        String key : executionDetails.keySet()) {          Execution execution=executionDetails.get(key);          if (execution.m_orderId == Integer.MAX_VALUE || execution.m_orderId < 0) {            execution.m_orderId=nextOrderKey;          } else {            continue;          }          for (          String key1 : executionDetails.keySet()) {            Execution execution1=executionDetails.get(key1);            if (execution1.m_permId == execution.m_permId) {              execution1.m_orderId=nextOrderKey;            }          }          nextOrderKey=orderKey.getAndIncrement();        }        ConcurrentHashMap<Integer,TradeOrder> tradeOrders=new ConcurrentHashMap<Integer,TradeOrder>();        for (        String key : executionDetails.keySet()) {          Execution execution=executionDetails.get(key);          if (tradeOrders.containsKey(execution.m_orderId)) {            continue;          }          TradeOrderfill tradeOrderfill=new TradeOrderfill();          TWSBrokerModel.populateTradeOrderfill(execution,tradeOrderfill);          String action=Action.SELL;          if (Side.BOT.equals(execution.m_side)) {            action=Action.BUY;          }          Integer quantity=tradeOrderfill.getQuantity();          TradeOrder tradeOrder=new TradeOrder(tradestrategy,action,tradeOrderfill.getTime(),OrderType.MKT,quantity,null,null,OverrideConstraints.YES,TimeInForce.DAY,TriggerMethod.DEFAULT);          tradeOrder.setClientId(execution.m_clientId);          tradeOrder.setPermId(execution.m_permId);          tradeOrder.setOrderKey(execution.m_orderId);          for (          String key1 : executionDetails.keySet()) {            Execution execution1=executionDetails.get(key1);            if (execution1.m_permId == execution.m_permId && !execution1.m_execId.equals(execution.m_execId)) {              TradeOrderfill tradeOrderfill1=new TradeOrderfill();              TWSBrokerModel.populateTradeOrderfill(execution1,tradeOrderfill1);              quantity=quantity + tradeOrderfill1.getQuantity();              if (tradeOrder.getCreateDate().isAfter(tradeOrderfill1.getTime())) {                tradeOrder.setCreateDate(tradeOrderfill1.getTime());              }            }          }          tradeOrder.setQuantity(quantity);          tradeOrders.put(tradeOrder.getOrderKey(),tradeOrder);        }        List<TradeOrder> orders=new ArrayList<TradeOrder>();        for (        Integer orderKey : tradeOrders.keySet()) {          TradeOrder tradeOrder=tradeOrders.get(orderKey);          orders.add(tradeOrder);        }        Collections.sort(orders,TradeOrder.CREATE_ORDER);        for (        TradeOrder tradeOrder : orders) {          double totalComms=0;          for (          String key : executionDetails.keySet()) {            Execution execution=executionDetails.get(key);            if (tradeOrder.getPermId().equals(execution.m_permId)) {              TradeOrderfill tradeOrderfill=new TradeOrderfill();              TWSBrokerModel.populateTradeOrderfill(execution,tradeOrderfill);              CommissionReport comms=commissionDetails.get(key);              if (null != comms) {                totalComms=totalComms + comms.m_commission;                tradeOrderfill.setCommission(new BigDecimal(comms.m_commission));              }              tradeOrderfill.setTradeOrder(tradeOrder);              tradeOrder.addTradeOrderfill(tradeOrderfill);            }          }          tradeOrder.setCommission(new BigDecimal(totalComms));          tradeOrder=m_tradePersistentModel.persistTradeOrderfill(tradeOrder);          TradeOrder transientInstance=m_tradePersistentModel.findTradeOrderByKey(tradeOrder.getOrderKey());          if (tradeOrder.getIsFilled()) {            this.fireTradeOrderFilled(transientInstance);          }        }      }    }    this.fireExecutionDetailsEnd(tradeOrdersExecutions);  } catch (  Exception ex) {    error(reqId,3330,"Error adding new open orders: " + ex.getMessage());  }}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(pvno));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(msgType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),encPart.asn1Encode());  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  DerOutputStream aprep=new DerOutputStream();  aprep.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x0F),temp);  return aprep.toByteArray();}  }
class C{  private void parseLoggerConfig(final Node node,final ConfigSettings config,final ConfigurationKeys logPath,final ConfigurationKeys logLevel){  String name, value;  Level level;  Node nnode;  NodeList list=node.getChildNodes();  int length=list.getLength();  for (int i=0; i < length; i++) {    nnode=list.item(i);    name=nnode.getNodeName().toUpperCase();    if (name.equals(KEY_LOG_PATH)) {      value=nnode.getChildNodes().item(0).getNodeValue();      value=value.substring(1,value.length() - 1);      config.setConfigParameter(logPath,value);    } else     if (name.equals(KEY_LOG_LEVEL)) {      level=Level.parse(nnode.getChildNodes().item(0).getNodeValue());      config.setConfigParameter(logLevel,level);    }  }}  }
class C{  @CheckReturnValue public ThreadFactory build(){  return build(this);}  }
class C{  public T caseStandaloneBlock(StandaloneBlock object){  return null;}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public void add(Drawable drawable,Object constraints){  if (drawable == this) {    throw new IllegalArgumentException("A container cannot be added to itself.");  }  this.constraints.put(drawable,constraints);  components.add(drawable);  layout();}  }
class C{  protected void _addMethods(){  final AnnotationIntrospector ai=_annotationIntrospector;  for (  AnnotatedMethod m : _classDef.memberMethods()) {    String explName;    String implName;    int argCount=m.getParameterCount();    boolean visible;    if (argCount == 0) {      if (ai != null) {        if (ai.hasAnyGetterAnnotation(m)) {          if (_anyGetters == null) {            _anyGetters=new LinkedList<AnnotatedMethod>();          }          _anyGetters.add(m);          continue;        }        if (ai.hasAsValueAnnotation(m)) {          if (_jsonValueGetters == null) {            _jsonValueGetters=new LinkedList<AnnotatedMethod>();          }          _jsonValueGetters.add(m);          continue;        }      }      explName=(ai == null) ? null : ai.findGettablePropertyName(m);      if (explName == null) {        implName=BeanUtil.okNameForRegularGetter(m,m.getName());        if (implName == null) {          implName=BeanUtil.okNameForIsGetter(m,m.getName());          if (implName == null) {            continue;          }          visible=_visibilityChecker.isIsGetterVisible(m);        } else {          visible=_visibilityChecker.isGetterVisible(m);        }      } else {        implName=BeanUtil.okNameForGetter(m);        if (implName == null) {          implName=m.getName();        }        if (explName.length() == 0) {          explName=implName;        }        visible=true;      }      boolean ignore=(ai == null) ? false : ai.hasIgnoreMarker(m);      _property(implName).addGetter(m,explName,visible,ignore);    } else     if (argCount == 1) {      explName=(ai == null) ? null : ai.findSettablePropertyName(m);      if (explName == null) {        implName=BeanUtil.okNameForSetter(m);        if (implName == null) {          continue;        }        visible=_visibilityChecker.isSetterVisible(m);      } else {        implName=BeanUtil.okNameForSetter(m);        if (implName == null) {          implName=m.getName();        }        if (explName.length() == 0) {          explName=implName;        }        visible=true;      }      boolean ignore=(ai == null) ? false : ai.hasIgnoreMarker(m);      _property(implName).addSetter(m,explName,visible,ignore);    } else     if (argCount == 2) {      if (ai != null && ai.hasAnySetterAnnotation(m)) {        if (_anySetters == null) {          _anySetters=new LinkedList<AnnotatedMethod>();        }        _anySetters.add(m);      }    }  }}  }
class C{  private void dropTxtMultTbl(DbConnection dbConn) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropTxtMultTbl");  try {    tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_TEXT);    DbTableFns.dropTable(dbConn,tableName);  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  private void handleDelegateRegistration(final HttpServerRequest request){  if (LOG.isTraceEnabled()) {    LOG.trace("handleDelegateRegistration: {}",request.uri());  }  request.bodyHandler(null);}  }
class C{  public static String propertyGet(Context context,String key) throws IllegalArgumentException {  String ret="";  try {    ClassLoader cl=context.getClassLoader();    @SuppressWarnings("rawtypes") Class SystemProperties=cl.loadClass("android.os.SystemProperties");    @SuppressWarnings("rawtypes") Class[] paramTypes=new Class[1];    paramTypes[0]=String.class;    Method get=SystemProperties.getMethod("get",paramTypes);    Object[] params=new Object[1];    params[0]=new String(key);    ret=(String)get.invoke(SystemProperties,params);  } catch (  IllegalArgumentException iAE) {    throw iAE;  }catch (  Exception e) {    ret="";  }  return ret;}  }
class C{  public static boolean isLeftMouseButton(MouseEvent anEvent){  return (anEvent.getModifiersEx() & InputEvent.BUTTON1_DOWN_MASK) > 0;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_VAR:    setTypeVar((TypeVariable)newValue);  return;case TypeRefsPackage.TYPE_VARIABLE_MAPPING__TYPE_ARG:setTypeArg((TypeArgument)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  requestIds=new HashMap<String,String>();  blueSwatch=(Button)findViewById(R.id.blueswatch);  purpleSwatch=(Button)findViewById(R.id.purpleswatch);  greenSwatch=(Button)findViewById(R.id.greenswatch);  clicksLeft=(TextView)findViewById(R.id.numClicks);  centerButton=(Button)findViewById(R.id.button);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.823 -0500",hash_original_method="1F709B7946BD47BE5374DFAB95B97284",hash_generated_method="F9E1A00D9D612614A81E70ADE7A2A25C") public void characters(char ch[],int start,int length) throws SAXException {  if (documentHandler != null)   documentHandler.characters(ch,start,length);}  }
class C{  @SafeVarargs public static <Type>Validator<Type> conjunctive(@NonNull final CharSequence errorMessage,@NonNull final Validator<Type>... validators){  return ConjunctiveValidator.create(errorMessage,validators);}  }
class C{  public void extractFeature(){  Arrays.fill(Local_Edge_Histogram,0d);  makeGreyLevel();  int sub_local_index=0;  int EdgeTypeOfBlock=0;  int[] count_local=new int[16];  for (int i=0; i < 16; i++) {    count_local[i]=0;  }  for (int j=0; j <= height - getBlockSize(); j+=getBlockSize())   for (int i=0; i <= width - getBlockSize(); i+=getBlockSize()) {    sub_local_index=(int)((i << 2) / width) + ((int)((j << 2) / height) << 2);    count_local[sub_local_index]++;    EdgeTypeOfBlock=getEdgeFeature(i,j);switch (EdgeTypeOfBlock) {case EdgeHistogramImplementation.NoEdge:      break;case EdgeHistogramImplementation.vertical_edge:    Local_Edge_Histogram[sub_local_index * 5]++;  break;case EdgeHistogramImplementation.horizontal_edge:Local_Edge_Histogram[sub_local_index * 5 + 1]++;break;case EdgeHistogramImplementation.diagonal_45_degree_edge:Local_Edge_Histogram[sub_local_index * 5 + 2]++;break;case EdgeHistogramImplementation.diagonal_135_degree_edge:Local_Edge_Histogram[sub_local_index * 5 + 3]++;break;case EdgeHistogramImplementation.non_directional_edge:Local_Edge_Histogram[sub_local_index * 5 + 4]++;break;}}for (int k=0; k < 80; k++) {Local_Edge_Histogram[k]/=count_local[(int)k / 5];}}  }
class C{  public EntryStream<K,V> nonNullValues(){  return filter(null);}  }
class C{  public static PasswordValidator buildUpdateValidator(Map<String,String> properties,PasswordUtils passwordUtils){  List<Rule> ruleList=buildBaseRuleList(properties);  ruleList.add(new HistoryRule(NumberUtils.toInt(properties.get(PASSWORD_REUSE_NUMBER),3),passwordUtils));  ruleList.add(new ChangedNumberRule(NumberUtils.toInt(properties.get(PASSWORD_CHANGED_NUMBER),2)));  ruleList.add(new ChangeIntervalRule(NumberUtils.toInt(properties.get(PASSWORD_CHANGE_INTERVAL),60)));  PasswordValidator validator=new PasswordValidator(ruleList);  return validator;}  }
class C{  public String globalInfo(){  return "Determines which values (frequent or infrequent ones) of an " + "(nominal) attribute are retained and filters the instances " + "accordingly. In case of values with the same frequency, they are "+ "kept in the way they appear in the original instances object. E.g. "+ "if you have the values \"1,2,3,4\" with the frequencies \"10,5,5,3\" "+ "and you chose to keep the 2 most common values, the values \"1,2\" "+ "would be returned, since the value \"2\" comes before \"3\", even "+ "though they have the same frequency.";}  }
class C{  public static boolean validateTypesAndMethods(Collection<IType> types,Collection<IMethod> methods){  List<IJavaElement> allElements=ImmutableList.<IJavaElement>builder().addAll(types).addAll(methods).build();  return validateJavaElements(allElements) && validateTypes(types) && validateMethods(methods);}  }
class C{  public BoxPlotLegend(BoxPlot plot){  this.plot=plot;}  }
class C{  public static final void addPgnData(PgnToken.PgnTokenReceiver out,Node node,MoveNumber moveNum,PGNOptions options){  boolean needMoveNr=node.addPgnDataOneNode(out,moveNum,true,options);  while (true) {    int nChild=node.children.size();    if (nChild == 0)     break;    MoveNumber nextMN=moveNum.next();    needMoveNr=node.children.get(0).addPgnDataOneNode(out,nextMN,needMoveNr,options);    if (options.exp.variations) {      for (int i=1; i < nChild; i++) {        out.processToken(node,PgnToken.LEFT_PAREN,null);        addPgnData(out,node.children.get(i),nextMN,options);        out.processToken(node,PgnToken.RIGHT_PAREN,null);        needMoveNr=true;      }    }    node=node.children.get(0);    moveNum=moveNum.next();  }}  }
class C{  public synchronized long loadTerm(){  return buffer.readLong(0);}  }
class C{  void createFinish(String instanceId){  if (!isDomThread()) {    throw new WXRuntimeException("CreateFinish operation must be done in dom thread");  }  WXDomStatement statement=mDomRegistries.get(instanceId);  if (statement == null) {    return;  }  statement.createFinish();}  }
class C{  @Override public List<NamedRelatedResourceRep> list(){  ProtectionSystemList response=client.get(ProtectionSystemList.class,baseUrl);  return defaultList(response.getSystems());}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=getCrossCheckStateCount();  int i=startI;  while (i >= 0 && image.get(centerJ,i)) {    stateCount[2]++;    i--;  }  if (i < 0) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i)) {    stateCount[2]++;    i++;  }  if (i == maxI) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (i == maxI || stateCount[3] >= maxCount) {    return Float.NaN;  }  while (i < maxI && image.get(centerJ,i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  String sourceFormForAnnotation(AnnotationMirror annotationMirror){  StringBuilder sb=new StringBuilder();  new AnnotationSourceFormVisitor().visitAnnotation(annotationMirror,sb);  return sb.toString();}  }
class C{  protected AbstractMatrix1D(){}  }
class C{  private void initQuadProgram(){  glUseProgram(quadProgram);  int texUniform=glGetUniformLocation(quadProgram,"tex");  glUniform1i(texUniform,0);  glUseProgram(0);}  }
class C{  private void searchNotes(String keyWord){  ActiveAccount activeAccount=activeAccountRepository.getActiveAccount();  List<Note> notes=notesRepository.searchNotes(activeAccount.getAccount(),activeAccount.getRootFolder(),keyWord,Utils.getNoteSorting(activity));  mAdapter.clearNotes();  mAdapter.addNotes(notes);  mSearchKeyWord=keyWord;}  }
class C{  protected DatabaseField resolveDatabaseField(DatabaseField childField,DatabaseField parentField){  DatabaseField resolvedDatabaseField=new DatabaseField();  DatabaseField resolvedParentField=databaseFields.get(parentField);  resolvedDatabaseField.setName(childField.getName());  resolvedDatabaseField.setTable(childField.getTable());  if (resolvedParentField != null) {    resolvedDatabaseField.setType(resolvedParentField.getType());    resolvedDatabaseField.setScale(resolvedParentField.getScale());    resolvedDatabaseField.setLength(resolvedParentField.getLength());    resolvedDatabaseField.setPrecision(resolvedParentField.getPrecision());  }  resolvedDatabaseField.setUnique(childField.isUnique());  resolvedDatabaseField.setNullable(childField.isNullable());  resolvedDatabaseField.setUpdatable(childField.isUpdatable());  resolvedDatabaseField.setInsertable(childField.isInsertable());  resolvedDatabaseField.setUseDelimiters(childField.shouldUseDelimiters());  resolvedDatabaseField.useUpperCaseForComparisons(childField.getUseUpperCaseForComparisons());  resolvedDatabaseField.setNameForComparisons(childField.getNameForComparisons());  String columnDef=childField.getColumnDefinition();  if (columnDef == null || columnDef.trim().equals("")) {    if (resolvedParentField != null) {      resolvedDatabaseField.setColumnDefinition(resolvedParentField.getColumnDefinition());    }  } else {    resolvedDatabaseField.setColumnDefinition(columnDef);  }  return resolvedDatabaseField;}  }
class C{  public boolean pointInView(View target,float localX,float localY,float slop){  return localX >= -slop && localY >= -slop && localX < ((target.getRight() - target.getLeft()) + slop) && localY < ((target.getBottom() - target.getTop()) + slop);}  }
class C{  public ChunkedStriterator(final Iterator<E> src){  this(IChunkedIterator.DEFAULT_CHUNK_SIZE,src);}  }
class C{  protected void prepareRequestContextRender(ODataRequest.Method method,ODataUri oDataUri) throws UnsupportedEncodingException {  context=createODataRequestContext(method,oDataUri,entityDataModel);  responseBuilder=new ODataResponse.Builder();}  }
class C{  public MigrationInfo[] failed(){  List<MigrationInfo> failedMigrations=new ArrayList<MigrationInfo>();  for (  MigrationInfo migrationInfo : migrationInfos) {    if (migrationInfo.getState().isFailed()) {      failedMigrations.add(migrationInfo);    }  }  return failedMigrations.toArray(new MigrationInfo[failedMigrations.size()]);}  }
class C{  public IdentifiedDoublePoint(final int[] point,int id){  super(point);  this.id=id;}  }
class C{  public void startSpinning(){  isSpinning=true;  postInvalidate();}  }
class C{  public static void printWarning(String comment,SQLWarning warning){  if (comment == null || warning == null || comment.length() == 0)   throw new IllegalArgumentException("Required parameter missing");  log.warning(comment);  if (warning == null)   return;  SQLWarning warn=warning;  while (warn != null) {    StringBuffer buffer=new StringBuffer();    buffer.append(warn.getMessage()).append("; State=").append(warn.getSQLState()).append("; ErrorCode=").append(warn.getErrorCode());    log.warning(buffer.toString());    warn=warn.getNextWarning();  }}  }
class C{  public NOPTupleSerializer(){}  }
class C{  public static String resolveLocaleCode(String lang,String country,String variant){  StringBuilder code=new StringBuilder(lang);  if (StringUtil.isEmpty(country) == false) {    code.append('_').append(country);    if (StringUtil.isEmpty(variant) == false) {      code.append('_').append(variant);    }  }  return code.toString();}  }
class C{  public static RemoteClass forClass(BatchEnvironment env,ClassDefinition implClassDef){  RemoteClass rc=new RemoteClass(env,implClassDef);  if (rc.initialize()) {    return rc;  } else {    return null;  }}  }
class C{  public void registerQuorumHandler(QuorumVoteHandler quorumVoteHandler){  handlers.put(quorumVoteHandler.getQuorumName(),quorumVoteHandler);}  }
class C{  protected void runUpload(Integer numOfThreads,HashMap<String,String> attributes,Boolean createNewVersion,Boolean force,String hostname,String storageName) throws Exception {  String hostnameToUse=hostname == null ? WEB_SERVICE_HOSTNAME : hostname;  for (  ManifestFile manifestFile : testManifestFiles) {    createLocalFile(LOCAL_TEMP_PATH_INPUT.toString(),manifestFile.getFileName(),FILE_SIZE_1_KB);  }  UploaderInputManifestDto uploaderInputManifestDto=getTestUploaderInputManifestDto();  uploaderInputManifestDto.setAttributes(attributes);  uploaderInputManifestDto.setStorageName(storageName);  File manifestFile=createManifestFile(LOCAL_TEMP_PATH_INPUT.toString(),uploaderInputManifestDto);  Assert.assertTrue(manifestFile.isFile());  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=getTestS3FileTransferRequestParamsDto();  s3FileTransferRequestParamsDto.setLocalPath(LOCAL_TEMP_PATH_INPUT.toString());  s3FileTransferRequestParamsDto.setMaxThreads(numOfThreads);  RegServerAccessParamsDto regServerAccessParamsDto=RegServerAccessParamsDto.builder().regServerHost(hostnameToUse).regServerPort(WEB_SERVICE_HTTPS_PORT).useSsl(true).username(WEB_SERVICE_HTTPS_USERNAME).password(WEB_SERVICE_HTTPS_PASSWORD).build();  uploaderController.performUpload(regServerAccessParamsDto,manifestFile,s3FileTransferRequestParamsDto,createNewVersion,force,TEST_RETRY_ATTEMPTS,TEST_RETRY_DELAY_SECS);}  }
class C{  public Clustering<MedoidModel> run(Database db,Relation<O> relation){  ArrayDBIDs ids=DBIDUtil.ensureArray(relation.getDBIDs());  final int size=ids.size();  int[] assignment=new int[size];  double[][] s=initialization.getSimilarityMatrix(db,relation,ids);  double[][] r=new double[size][size];  double[][] a=new double[size][size];  IndefiniteProgress prog=LOG.isVerbose() ? new IndefiniteProgress("Affinity Propagation Iteration",LOG) : null;  MutableProgress aprog=LOG.isVerbose() ? new MutableProgress("Stable assignments",size + 1,LOG) : null;  int inactive=0;  for (int iteration=0; iteration < maxiter && inactive < convergence; iteration++) {    for (int i=0; i < size; i++) {      double[] ai=a[i], ri=r[i], si=s[i];      double max1=Double.NEGATIVE_INFINITY, max2=Double.NEGATIVE_INFINITY;      int maxk=-1;      for (int k=0; k < size; k++) {        double val=ai[k] + si[k];        if (val > max1) {          max2=max1;          max1=val;          maxk=k;        } else         if (val > max2) {          max2=val;        }      }      for (int k=0; k < size; k++) {        double val=si[k] - ((k != maxk) ? max1 : max2);        ri[k]=ri[k] * lambda + val * (1. - lambda);      }    }    for (int k=0; k < size; k++) {      double colposum=0.;      for (int i=0; i < size; i++) {        if (i == k || r[i][k] > 0.) {          colposum+=r[i][k];        }      }      for (int i=0; i < size; i++) {        double val=colposum;        if (i == k || r[i][k] > 0.) {          val-=r[i][k];        }        if (i != k && val > 0.) {          val=0.;        }        a[i][k]=a[i][k] * lambda + val * (1 - lambda);      }    }    int changed=0;    for (int i=0; i < size; i++) {      double[] ai=a[i], ri=r[i];      double max=Double.NEGATIVE_INFINITY;      int maxj=-1;      for (int j=0; j < size; j++) {        double v=ai[j] + ri[j];        if (v > max || (i == j && v >= max)) {          max=v;          maxj=j;        }      }      if (assignment[i] != maxj) {        changed+=1;        assignment[i]=maxj;      }    }    inactive=(changed > 0) ? 0 : (inactive + 1);    LOG.incrementProcessed(prog);    if (aprog != null) {      aprog.setProcessed(size - changed,LOG);    }  }  if (aprog != null) {    aprog.setProcessed(aprog.getTotal(),LOG);  }  LOG.setCompleted(prog);  TIntObjectHashMap<ModifiableDBIDs> map=new TIntObjectHashMap<>();  DBIDArrayIter i1=ids.iter();  for (int i=0; i1.valid(); i1.advance(), i++) {    int c=assignment[i];    ModifiableDBIDs cids=map.get(c);    if (cids == null) {      cids=DBIDUtil.newArray();      map.put(c,cids);    }    cids.add(i1);  }  for (TIntObjectIterator<ModifiableDBIDs> iter=map.iterator(); iter.hasNext(); ) {    iter.advance();    final int key=iter.key();    int targetkey=key;    ModifiableDBIDs tids=null;    while (ids == null && assignment[targetkey] != targetkey) {      targetkey=assignment[targetkey];      tids=map.get(targetkey);    }    if (tids != null && targetkey != key) {      tids.addDBIDs(iter.value());      iter.remove();    }  }  Clustering<MedoidModel> clustering=new Clustering<>("Affinity Propagation Clustering","ap-clustering");  ModifiableDBIDs noise=DBIDUtil.newArray();  for (TIntObjectIterator<ModifiableDBIDs> iter=map.iterator(); iter.hasNext(); ) {    iter.advance();    i1.seek(iter.key());    if (iter.value().size() > 1) {      MedoidModel mod=new MedoidModel(DBIDUtil.deref(i1));      clustering.addToplevelCluster(new Cluster<>(iter.value(),mod));    } else {      noise.add(i1);    }  }  if (noise.size() > 0) {    MedoidModel mod=new MedoidModel(DBIDUtil.deref(noise.iter()));    clustering.addToplevelCluster(new Cluster<>(noise,true,mod));  }  return clustering;}  }
class C{  public static String nullToEmpty(@Nullable String string){  return (string == null) ? "" : string;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WAttachment.init");}  }
class C{  protected int drawToAddress(int hostRange[],int from){  int to;  do {    to=this.toHostRange != null ? drawHostAddress(this.toHostRange) : drawHostAddress(this.hostRange);  } while (from == to);  return to;}  }
class C{  public RemovalNotAllowedException(String message){  super(message);}  }
class C{  private void waitForLogStored() throws InterruptedException {  Thread.sleep(5000);}  }
class C{  protected void sendBatch(){  isCallbackScheduled=false;  if (this.hasViews()) {    EventBean[] newData=null;    EventBean[] oldData=null;    if (!currentBatch.isEmpty()) {      newData=currentBatch.toArray(new EventBean[currentBatch.size()]);    }    if ((lastBatch != null) && (!lastBatch.isEmpty())) {      oldData=lastBatch.toArray(new EventBean[lastBatch.size()]);    }    if (viewUpdatedCollection != null) {      viewUpdatedCollection.update(newData,oldData);    }    if ((newData != null) || (oldData != null) || (isForceOutput)) {      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().qViewIndicate(this,timeBatchViewFactory.getViewName(),newData,oldData);      }      updateChildren(newData,oldData);      if (InstrumentationHelper.ENABLED) {        InstrumentationHelper.get().aViewIndicate();      }    }  }  if ((!currentBatch.isEmpty()) || ((lastBatch != null) && (!lastBatch.isEmpty())) || (isForceOutput)) {    scheduleCallback();    isCallbackScheduled=true;  }  lastBatch=currentBatch;  currentBatch=new ArrayDeque<EventBean>();}  }
class C{  @NotNull public static Set<BashFile> findIncluders(@NotNull Project project,@NotNull PsiFile file){  if (DumbService.isDumb(project)) {    return Collections.emptySet();  }  GlobalSearchScope searchScope=BashSearchScopes.moduleScope(file);  String filename=file.getName();  if (StringUtils.isEmpty(filename)) {    return Collections.emptySet();  }  Collection<BashIncludeCommand> includeCommands=StubIndex.getElements(BashIncludedFilenamesIndex.KEY,filename,project,searchScope,BashIncludeCommand.class);  if (includeCommands == null) {    return Collections.emptySet();  }  Set<BashFile> includers=Sets.newLinkedHashSet();  for (  BashIncludeCommand command : includeCommands) {    BashFile includer=(BashFile)BashPsiUtils.findFileContext(command);    if (!file.equals(includer)) {      includers.add(includer);    }  }  return includers;}  }
class C{  private static Object copyArrayGrow1(final Object array,final Class<?> newArrayComponentType){  if (array != null) {    int arrayLength=Array.getLength(array);    Object newArray=Array.newInstance(array.getClass().getComponentType(),arrayLength + 1);    System.arraycopy(array,0,newArray,0,arrayLength);    return newArray;  }  return Array.newInstance(newArrayComponentType,1);}  }
class C{  static void checkMethodDesc(final String desc){  if (desc == null || desc.length() == 0) {    throw new IllegalArgumentException("Invalid method descriptor (must not be null or empty)");  }  if (desc.charAt(0) != '(' || desc.length() < 3) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }  int start=1;  if (desc.charAt(start) != ')') {    do {      if (desc.charAt(start) == 'V') {        throw new IllegalArgumentException("Invalid descriptor: " + desc);      }      start=checkDesc(desc,start,false);    } while (start < desc.length() && desc.charAt(start) != ')');  }  start=checkDesc(desc,start + 1,true);  if (start != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public String readHeaders(){  int i=0;  byte b;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  int size=0;  while (i < HEADER_SEPARATOR.length) {    try {      b=readByte();    } catch (    IOException e) {      throw new MalformedStreamException("Stream ended unexpectedly");    }    if (++size > HEADER_PART_SIZE_MAX) {      throw new MalformedStreamException(format("Header section has more than %s bytes (maybe it is not properly terminated)",Integer.valueOf(HEADER_PART_SIZE_MAX)));    }    if (b == HEADER_SEPARATOR[i]) {      i++;    } else {      i=0;    }    baos.write(b);  }  String headers=null;  if (headerEncoding != null) {    try {      headers=baos.toString(headerEncoding);    } catch (    UnsupportedEncodingException e) {      if (!headerEncoding.equals(Charset.defaultCharset().displayName())) {        try {          headers=baos.toString(Charset.defaultCharset().displayName());        } catch (        UnsupportedEncodingException e1) {          throw new FormUploadException("Provided encoding doesn't support",e);        }      }    }  } else {    try {      headers=baos.toString(Charset.defaultCharset().displayName());    } catch (    UnsupportedEncodingException e) {      throw new FormUploadException("Provided encoding doesn't support",e);    }  }  return headers;}  }
class C{  public Node nextNode(){  if (!hasNext()) {    return null;  }  currentNode=nodes.pop();  currentChildren=currentNode.getChildNodes();  int childLen=(currentChildren != null) ? currentChildren.getLength() : 0;  for (int i=childLen - 1; i >= 0; i--) {    nodes.add(currentChildren.item(i));  }  return currentNode;}  }
class C{  public Builder removeEntitlement(Entitlement entitlement){  this.entitlements.remove(entitlement);  return this;}  }
class C{  public static boolean rmdir(Context context,@NonNull final File file){  if (!file.exists() && !file.isDirectory())   return false;  String[] fileList=file.list();  if (fileList != null && fileList.length > 0)   return false;  if (file.delete())   return true;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    DocumentFile document=getDocumentFile(context,file,true,true);    return document != null && document.delete();  }  if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {    ContentResolver resolver=context.getContentResolver();    ContentValues values=new ContentValues();    values.put(MediaStore.MediaColumns.DATA,file.getAbsolutePath());    resolver.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);    resolver.delete(MediaStore.Files.getContentUri("external"),MediaStore.MediaColumns.DATA + "=?",new String[]{file.getAbsolutePath()});  }  return !file.exists();}  }
class C{  private String generateBlendMode(BlendMode blendMode){  if (blendMode == BlendMode.COLOR)   return "        this.blendShader = new ColorShader();\n"; else   if (blendMode == BlendMode.COLORBURN)   return "        this.blendShader = new ColorBurnShader();\n"; else   if (blendMode == BlendMode.COLORDODGE)   return "        this.blendShader = new ColorDodgeShader();\n"; else   if (blendMode == BlendMode.EXCLUSION)   return "        this.blendShader = new ExclusionShader();\n"; else   if (blendMode == BlendMode.HUE)   return "        this.blendShader = new HueShader();\n"; else   if (blendMode == BlendMode.LUMINOSITY)   return "        this.blendShader = new LuminosityShader();\n"; else   if (blendMode == BlendMode.SATURATION)   return "        this.blendShader = new SaturationShader();\n"; else   if (blendMode == BlendMode.SOFTLIGHT)   return "        this.blendShader = new SoftLightShader();\n"; else   return null;}  }
class C{  public AnnotationDefaultAttribute(ConstPool cp,byte[] info){  super(cp,tag,info);}  }
class C{  public RepeatedFieldBuilder<MType,BType,IType> addAllMessages(Iterable<? extends MType> values){  for (  final MType value : values) {    if (value == null) {      throw new NullPointerException();    }  }  if (values instanceof Collection) {    @SuppressWarnings("unchecked") final Collection<MType> collection=(Collection<MType>)values;    if (collection.size() == 0) {      return this;    }    ensureMutableMessageList();    for (    MType value : values) {      addMessage(value);    }  } else {    ensureMutableMessageList();    for (    MType value : values) {      addMessage(value);    }  }  onChanged();  incrementModCounts();  return this;}  }
class C{  public void unparsedEntityDecl(String name,String pubID,String sysID,String notationName) throws SAXException {  try {    DTDprolog();    m_writer.write("<!ENTITY ");    m_writer.write(name);    if (pubID != null) {      m_writer.write(" PUBLIC \"");      m_writer.write(pubID);    } else {      m_writer.write(" SYSTEM \"");      m_writer.write(sysID);    }    m_writer.write("\" NDATA ");    m_writer.write(notationName);    m_writer.write(" >");    m_writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private File launchReport(MPrintFormat pf,HttpServletRequest request,GridTab m_curTab,MQuery m_query){  int Record_ID=0;  WebSessionCtx wsc=WebSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  File fileName=null;  if (m_query.getRestrictionCount() == 1 && m_query.getCode(0) instanceof Integer) {    Record_ID=((Integer)m_query.getCode(0)).intValue();  }  PrintInfo info=new PrintInfo(pf.getName(),pf.getAD_Table_ID(),Record_ID);  info.setDescription(m_query.getInfo());  if (pf != null && pf.getJasperProcess_ID() > 0) {    ProcessInfo pi=new ProcessInfo("",pf.getJasperProcess_ID());    Trx trx=Trx.get(Trx.createTrxName("WebPrc"),true);    WProcessCtl.process(this,m_curTab.getAD_Window_ID(),pi,trx,request);  } else {    ReportEngine re=new ReportEngine(wsc.ctx,pf,m_query,info);    if (re == null) {      log.info("Could not start ReportEngine");    } else {      try {        File file=File.createTempFile("WProcess",".pdf");        boolean ok=re.createPDF(file);        if (ok) {          fileName=file;        } else {          log.info("Could not create Report");        }      } catch (      Exception e) {        log.info(e.toString());      }    }  }  return fileName;}  }
class C{  protected void handleStartedStage(final State current){switch (current.taskInfo.subStage) {case CHECK_IMAGE_TO_IMAGE_DATASTORE_MAPPING_DOC:    checkImageToImageDatastoreMappingDocument(current);  break;case RETRIEVE_HOSTS:getHostsFromDataStores(current);break;case TRANSFER_IMAGE:copyImageHostToHost(current);break;case UPDATE_IMAGE_REPLICATION_DOCUMENT:updateDocumentsAndTriggerCopy(current);break;default :throw new IllegalStateException("Un-supported substage" + current.taskInfo.subStage.toString());}}  }
class C{  @Override public void flush() throws IOException {  if (mBufferCount > 0) {    try {      mQueue.write(mBuffer,0,mBufferCount);    } catch (    InterruptedException e) {      throw new IOException("GzipAsynchOutputStream interrupted during write/3");    }    mBufferCount=0;  }  while (mQueue.available() > 0 && mAsynchOutput.mException == null) {    try {      Thread.sleep(100);    } catch (    InterruptedException e) {      throw new IOException("GzipAsynchOutputStream interrupted during flush");    }  }  checkException();}  }
class C{  protected void wait(int milliseconds){  if (!inThread) {    log.debug("wait invoked from invalid context");  }synchronized (this) {    waiting=true;    try {      if (milliseconds < 0) {        super.wait();      } else {        super.wait(milliseconds);      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();      log.warn("interrupted in wait");    }  }  if (promptOnWait) {    debuggingWait();  }  waiting=false;}  }
class C{  public int eval(INode state){  SmallPuzzle tp=(SmallPuzzle)state;  int diff=Math.abs(target[0] - tp.s[0]) + Math.abs(target[1] - tp.s[1]);  if (tp.s[0] > target[0]) {    diff*=2;  }  if (tp.s[1] > target[1]) {    diff*=2;  }  return diff;}  }
class C{  public void timesEquals(double a){  real*=a;  imag*=a;}  }
class C{  private void randomize(final Player player){  topFaces=new int[NUMBER_OF_DICE];  double karma=player.useKarma(2);  for (int i=0; i < NUMBER_OF_DICE; i++) {    int topFace=Rand.roll1D6();    if (topFace == 6 && karma <= 0) {      topFace=Rand.roll1D6();    }    topFaces[i]=topFace;  }  if (getSum() == NUMBER_OF_DICE && karma <= 0) {    topFaces[0]=2;  }}  }
class C{  public static double toRadians(final double degrees){  return degrees * TO_RADIANS;}  }
class C{  private static int parsePort(String portStr,String addrStr,String errMsgPrefix) throws IgniteCheckedException {  try {    int port=Integer.parseInt(portStr);    if (port < 0 || port > 65535)     throw createParseError(addrStr,errMsgPrefix,"port range contains invalid port " + portStr);    return port;  } catch (  NumberFormatException e) {    throw createParseError(addrStr,errMsgPrefix,"port range contains invalid port " + portStr);  }}  }
class C{  public Llnmon(@Nonnull TurnoutManager turnoutManager,@Nonnull SensorManager sensorManager,@Nonnull ReporterManager reporterManager){  this.setLocoNetTurnoutManager(turnoutManager);  this.setLocoNetSensorManager(sensorManager);  this.setLocoNetReporterManager(reporterManager);}  }
class C{  public GroovyMethodDoc[] methods(){  Collections.sort(methods);  return methods.toArray(new GroovyMethodDoc[methods.size()]);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.SERVICE_REF__NAME:    setName(NAME_EDEFAULT);  return;case EipPackage.SERVICE_REF__REFERENCE:setReference(REFERENCE_EDEFAULT);return;case EipPackage.SERVICE_REF__OPERATIONS:getOperations().clear();return;}super.eUnset(featureID);}  }
class C{  @Override public void addText(String text){  String old=current.getContent();  if (old == null) {    current.setContent(text);  } else {    current.setContent(old + text);  }}  }
class C{  static HeapCompactOrderedSketch heapifyInstance(Memory srcMem,long seed){  long pre0=srcMem.getLong(PREAMBLE_LONGS_BYTE);  int preLongs=extractPreLongs(pre0);  int flags=extractFlags(pre0);  boolean empty=(flags & EMPTY_FLAG_MASK) > 0;  short memSeedHash=(short)extractSeedHash(pre0);  short computedSeedHash=computeSeedHash(seed);  checkSeedHashes(memSeedHash,computedSeedHash);  int curCount=(preLongs > 1) ? srcMem.getInt(RETAINED_ENTRIES_INT) : 0;  long thetaLong=(preLongs > 2) ? srcMem.getLong(THETA_LONG) : Long.MAX_VALUE;  long[] cacheArr=new long[curCount];  if (curCount > 0) {    srcMem.getLongArray(preLongs << 3,cacheArr,0,curCount);  }  HeapCompactOrderedSketch hcs=new HeapCompactOrderedSketch(empty,memSeedHash,curCount,thetaLong,cacheArr);  return hcs;}  }
class C{  private static int med3(byte x[],int a,int b,int c,ByteComparator comp){  int ab=comp.compare(x[a],x[b]);  int ac=comp.compare(x[a],x[c]);  int bc=comp.compare(x[b],x[c]);  return (ab < 0 ? (bc < 0 ? b : ac < 0 ? c : a) : (bc > 0 ? b : ac > 0 ? c : a));}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  private ArrayList<AliasInfo> mapPrivateKeys(ArrayList<byte[]> pkeyIDs,HashMap<String,HashSet<AliasInfo>> certMap) throws PKCS11Exception, CertificateException {  aliasMap=new HashMap<String,AliasInfo>();  ArrayList<AliasInfo> matchedCerts=new ArrayList<AliasInfo>();  for (  byte[] pkeyID : pkeyIDs) {    boolean foundMatch=false;    Set<String> certLabels=certMap.keySet();    for (    String certLabel : certLabels) {      HashSet<AliasInfo> infoSet=certMap.get(certLabel);      for (      AliasInfo aliasInfo : infoSet) {        if (Arrays.equals(pkeyID,aliasInfo.id)) {          if (infoSet.size() == 1) {            aliasInfo.matched=true;            aliasMap.put(certLabel,aliasInfo);          } else {            aliasInfo.matched=true;            aliasMap.put(getID(certLabel,aliasInfo.cert),aliasInfo);          }          matchedCerts.add(aliasInfo);          foundMatch=true;          break;        }      }      if (foundMatch) {        break;      }    }    if (!foundMatch) {      if (debug != null) {        debug.println("did not find match for private key with CKA_ID [" + getID(pkeyID) + "] (ignoring entry)");      }    }  }  return matchedCerts;}  }
class C{  private void ensureReceiverOfExplicitUnlockCallIsEffectivelyFinal(MethodInvocationTree node,ExecutableElement methodElement,ExpressionTree lockExpression){  if (lockExpression == null) {    return;  }  if (!methodElement.getSimpleName().contentEquals("unlock")) {    return;  }  TypeMirror lockExpressionType=InternalUtils.typeOf(lockExpression);  ProcessingEnvironment processingEnvironment=checker.getProcessingEnvironment();  javax.lang.model.util.Types types=processingEnvironment.getTypeUtils();  TypeMirror lockInterfaceTypeMirror=TypesUtils.typeFromClass(types,processingEnvironment.getElementUtils(),Lock.class);  if (types.isSubtype(types.erasure(lockExpressionType),lockInterfaceTypeMirror)) {    ensureExpressionIsEffectivelyFinal(lockExpression);  }}  }
class C{  public static void main(String[] args){  System.out.println("n\tXn in decimal\t\tXn in bits (binary digits)");  double x=0;  for (int i=0; i < 10; i++) {    outputRow(i,x);    x=x - f(x) / fd(x);  }}  }
class C{  public MLOutput execute(String dmlScriptFilePath,ArrayList<String> args,boolean parsePyDML) throws IOException, DMLException, ParseException {  String[] argsArr=new String[args.size()];  argsArr=args.toArray(argsArr);  return execute(dmlScriptFilePath,argsArr,parsePyDML,null);}  }
class C{  private Exit executeAction(final Action action,Trigger trigger){  Exit exit=Exit.SUCCESS;  if (Cfg.DEBUG) {    Check.log(TAG + " CheckActions() triggered: " + action);  }  final Status status=Status.self();  status.unTriggerAction(action);  status.synced=false;  final int ssize=action.getSubActionsNum();  if (Cfg.DEBUG) {    Check.log(TAG + " checkActions, " + ssize+ " subactions");  }  int i=1;  SubAction[] subactions=action.getSubActions();  for (  final SubAction subAction : subactions) {    try {      if (Cfg.DEBUG) {        Check.log(TAG + " Info: (CheckActions) executing subaction (" + (i++)+ "/"+ ssize+ ") : "+ action);      }      subAction.prepareExecute();      final boolean ret=subAction.execute(trigger);      if (status.uninstall) {        if (Cfg.DEBUG) {          Check.log(TAG + " Warn: (CheckActions): uninstalling");        }        exit=Exit.UNINSTALL;        break;      }      if (ret == false) {        if (Cfg.DEBUG) {          Check.log(TAG + " Warn: " + "CheckActions() error executing: "+ subAction);        }        continue;      } else {        if (subAction.considerStop()) {          if (Cfg.DEBUG) {            Check.log(TAG + " (executeAction): stop");          }          break;        }      }    } catch (    final Exception ex) {      if (Cfg.EXCEPTION) {        Check.log(ex);      }      if (Cfg.DEBUG) {        Check.log(ex);        Check.log(TAG + " Error: checkActions for: " + ex);      }    }  }  return exit;}  }
class C{  public boolean isConstant(){  return this instanceof InstanceBinding;}  }
class C{  private void lockFocus(){  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_START);    mState=STATE_WAITING_LOCK;    mCaptureSession.capture(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    e.printStackTrace();  }}  }
class C{  public void onItemLoot(Player player){  getAndCheckAchievementsInCategory(player,Category.ITEM);}  }
class C{  public ClusterStatsRequest(String... nodesIds){  super(nodesIds);}  }
class C{  public Object next(){  String line=readLine();  if (line == null)   return null;  if (line.length() == 0)   return new String[0];  return line.split("\\s+");}  }
class C{  private void CFDupdateViolated(){  violatedTuples v=CFDUtility.returnViolatedTuples(i,CFDs);  violated=v.instances;  violatedTuplesMap=v.tupleID;}  }
class C{  public ActionRef createActionRef(){  ActionRefImpl actionRef=new ActionRefImpl();  return actionRef;}  }
class C{  @Override public ImageSaver build(@Nonnull OneCamera.PictureSaverCallback pictureSaverCallback,@Nonnull OrientationManager.DeviceOrientation orientation,@Nonnull CaptureSession session){  final OrientationManager.DeviceOrientation imageRotation=mImageRotationCalculator.toImageRotation();  YuvImageProcessorListener yuvImageProcessorListener=new YuvImageProcessorListener(session,imageRotation,pictureSaverCallback);  return new MostRecentImageSaver(new ImageSaverImpl(session,imageRotation,yuvImageProcessorListener));}  }
class C{  public ServerSideStateHelper(){  numberOfLogicalViews=getIntegerConfigValue(NumberOfLogicalViews);  numberOfViews=getIntegerConfigValue(NumberOfViews);  WebConfiguration webConfig=WebConfiguration.getInstance();  generateUniqueStateIds=webConfig.isOptionEnabled(GenerateUniqueServerStateIds);  if (generateUniqueStateIds) {    random=new Random(System.nanoTime() + webConfig.getServletContext().hashCode());  } else {    random=null;  }}  }
class C{  String renameFieldSignature(String sig){  if (sig == null) {    return null;  }  SignatureReader reader=new SignatureReader(sig);  SignatureWriter writer=new SignatureWriter();  reader.acceptType(new RenameSignatureAdapter(writer));  sig=writer.toString();  return sig;}  }
class C{  public static void rename(String from,String to){  Process p=null;  Thread std=null;  try {    Runtime runTime=Runtime.getRuntime();    log.debug("Execute runtime");    if (File.separatorChar == '\\') {      p=runTime.exec("CMD /D /C \"REN " + from + ' '+ to+ "\"");    } else {      p=runTime.exec("mv -f " + from + ' '+ to);    }    std=stdOut(p);    while (std.isAlive()) {      try {        Thread.sleep(250);      } catch (      Exception e) {      }    }    log.debug("Process threads wait exited");  } catch (  Exception e) {    log.error("Error running delete script",e);  } finally {    if (null != p) {      log.debug("Destroying process");      p.destroy();      p=null;      std=null;    }  }}  }
class C{  protected void deleteNamespace(){  HttpDelete delete=new HttpDelete(url("/namespace/" + namespace));  submit(delete,200);}  }
class C{  private Collection<ClusterNode> replicatedUnstableDataNodes(final GridCacheContext<?,?> cctx,List<Integer> extraSpaces){  assert cctx.isReplicated() : cctx.name() + " must be replicated";  Set<ClusterNode> nodes=replicatedUnstableDataNodes(cctx);  if (F.isEmpty(nodes))   return null;  if (!F.isEmpty(extraSpaces)) {    for (int i=0; i < extraSpaces.size(); i++) {      GridCacheContext<?,?> extraCctx=cacheContext(extraSpaces.get(i));      if (extraCctx.isLocal())       continue;      if (!extraCctx.isReplicated())       throw new CacheException("Queries running on replicated cache should not contain JOINs " + "with tables in partitioned caches [rCache=" + cctx.name() + ", pCache="+ extraCctx.name()+ "]");      Set<ClusterNode> extraOwners=replicatedUnstableDataNodes(extraCctx);      if (F.isEmpty(extraOwners))       return null;      nodes.retainAll(extraOwners);      if (nodes.isEmpty())       return null;    }  }  return nodes;}  }
