class C{  @Inject public URLRepository(RepositoryName name,RepositorySettings repositorySettings,IndexShardRepository indexShardRepository,Environment environment) throws IOException {  super(name.getName(),repositorySettings,indexShardRepository);  URL url;  String path=repositorySettings.settings().get("url",settings.get("repositories.url.url",settings.get("repositories.uri.url")));  if (path == null) {    throw new RepositoryException(name.name(),"missing url");  } else {    url=new URL(path);  }  supportedProtocols=settings.getAsArray(SUPPORTED_PROTOCOLS_SETTING,DEFAULT_SUPPORTED_PROTOCOLS);  String[] urlWhiteList=settings.getAsArray(ALLOWED_URLS_SETTING,Strings.EMPTY_ARRAY);  this.urlWhiteList=new URIPattern[urlWhiteList.length];  for (int i=0; i < urlWhiteList.length; i++) {    this.urlWhiteList[i]=new URIPattern(urlWhiteList[i]);  }  this.environment=environment;  listDirectories=repositorySettings.settings().getAsBoolean("list_directories",settings.getAsBoolean("repositories.uri.list_directories",true));  URL normalizedURL=checkURL(url);  blobStore=new URLBlobStore(settings,normalizedURL);  basePath=BlobPath.cleanPath();}  }
class C{  public boolean equals(Object other){  if (!(other instanceof PolicyInformation))   return false;  PolicyInformation piOther=(PolicyInformation)other;  if (!policyIdentifier.equals(piOther.getPolicyIdentifier()))   return false;  return policyQualifiers.equals(piOther.getPolicyQualifiers());}  }
class C{  public boolean isSecure(){  return protocolInUse.isSecure();}  }
class C{  @SuppressWarnings("rawtypes") public static String toJSONString(Map map){  if (map == null)   return "null";  StringBuffer sb=new StringBuffer();  boolean first=true;  Iterator iter=map.entrySet().iterator();  sb.append('{');  while (iter.hasNext()) {    if (first)     first=false; else     sb.append(',');    Map.Entry entry=(Map.Entry)iter.next();    toJSONString(String.valueOf(entry.getKey()),entry.getValue(),sb);  }  sb.append('}');  return sb.toString();}  }
class C{  public Object remove(int posn){  Object r=addrs.elementAt(posn);  addrs.removeElementAt(posn);  return r;}  }
class C{  public static AffineTransform worldToScreenTransform(final Envelope mapExtent,final DrawInfo2D info){  return worldToScreenTransform(mapExtent,info.draw);}  }
class C{  public LocationStorage addBounds(AxisAlignedBB... boundingBoxes){  for (  AxisAlignedBB boundingBox : boundingBoxes) {    this.boundingBoxes.add(boundingBox);  }  return this;}  }
class C{  public static void main(String[] args){  try {    PerfTestUtils.setResultFolder(args[0]);    PerfTestUtils.setStandardIndexFolder(args[1]);    PerfTestUtils.setTrigramIndexFolder(args[2]);    PerfTestUtils.setQueryFolder(args[3]);  } catch (  ArrayIndexOutOfBoundsException e) {    e.printStackTrace();  }  try {    List<Double> thresholds=Arrays.asList(0.8,0.65,0.5,0.35);    List<String> regexQueries=Arrays.asList("mosquitos?","v[ir]{2}[us]{2}","market(ing)?","medic(ine|al|ation|are|aid)?","[A-Z][aeiou|AEIOU][A-Za-z]*");    KeywordMatcherPerformanceTest.runTest("sample_queries.txt");    DictionaryMatcherPerformanceTest.runTest("sample_queries.txt");    FuzzyTokenMatcherPerformanceTest.runTest("sample_queries.txt",thresholds);    RegexMatcherPerformanceTest.runTest(regexQueries);    NlpExtractorPerformanceTest.runTest();  } catch (  StorageException|DataFlowException|IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void testDefaultsDynamic() throws Exception {  Similarity sim=getSimilarity("text_sim3");  assertEquals(BM25Similarity.class,sim.getClass());}  }
class C{  public boolean varUsedInFilterOrAssignment(IVariable<?> var){  if (!usageMap.containsKey(var)) {    return false;  }  final List<IQueryNode> varOccurrences=usageMap.get(var);  for (int i=0; i < varOccurrences.size(); i++) {    final IQueryNode n=varOccurrences.get(i);    if (n instanceof FilterNode || n instanceof AssignmentNode) {      return true;    }  }  return false;}  }
class C{  public void clear(){  events.clear();}  }
class C{  private int[] readEventTypes(BinaryRawReaderEx reader){  return reader.readIntArray();}  }
class C{  private void initializeFirstNameEditText(){  firstNameEditText=(EditText)findViewById(R.id.first_name_edit_text);  firstNameEditText.addValidator(Validators.minLength(this,R.string.min_length_validator_error_message,MIN_NAME_LENGTH));  firstNameEditText.addValidator(Validators.beginsWithUppercaseLetter(this,R.string.begins_with_uppercase_letter_validator_error_message));  firstNameEditText.addValidator(Validators.letter(this,R.string.letter_validator_error_message,Case.CASE_INSENSITIVE,false,new char[]{'-'}));}  }
class C{  public static void writeFileContent(String text,File file) throws IOException {  try (BufferedWriter out=Files.newBufferedWriter(file.toPath(),Charset.forName("UTF-8"))){    out.write(text);  } }  }
class C{  private void findFavorites(){  if (favoritesNotFound.isEmpty()) {    return;  }  int count=favoritesNotFound.size();  findFavorites(twitchEmotesById.values());  findFavorites(otherGlobalEmotes);  findFavorites(emoji);  if (favoritesNotFound.isEmpty()) {    LOGGER.info("Emoticons: Found all remaining " + count + " favorites");  } else {    LOGGER.info("Emoticons: " + favoritesNotFound.size() + " favorites still not found");  }}  }
class C{  private byte[] checkRawRecord(final byte[] val){  if (hasRawRecords() && val != null && val.length > htree.getMaxRecLen()) {    final long naddr=htree.writeRawRecord(val);    return ((HTree)htree).encodeRecordAddr(naddr);  } else {    return val;  }}  }
class C{  public CopyOnWriteArrayList(){  elements=EmptyArray.OBJECT;}  }
class C{  @Override public boolean hasMoreElements(){  return current != null;}  }
class C{  protected void undoTo(UndoableEdit edit) throws CannotUndoException {  boolean done=false;  while (!done) {    UndoableEdit next=edits.elementAt(--indexOfNextAdd);    next.undo();    done=next == edit;  }}  }
class C{  public int pixelsWide(){  return mWidth;}  }
class C{  public void onOpenGUI(){}  }
class C{  public GameEntityChangeEvent(final Object source,final Entity entity){  this(source,entity,null);}  }
class C{  public boolean isFadingOut(){  return this.fadeOut;}  }
class C{  private Object loadObject(String className,Class<?>[] argsClass,Object[] args){  Object o=null;  Class<?> objClass=getClass(className);  Constructor<?> constructor;  try {    if (argsClass != null) {      constructor=objClass.getConstructor((Class[])argsClass);      o=constructor.newInstance(args);    } else {      o=objClass.newInstance();    }  } catch (  SecurityException e) {    e.printStackTrace();    throw new SettingsError("Fatal exception " + e,e);  }catch (  IllegalArgumentException e) {    e.printStackTrace();    throw new SettingsError("Fatal exception " + e,e);  }catch (  NoSuchMethodException e) {    throw new SettingsError("Class '" + className + "' doesn't have a suitable constructor",e);  }catch (  InstantiationException e) {    throw new SettingsError("Can't create an instance of '" + className + "'",e);  }catch (  IllegalAccessException e) {    e.printStackTrace();    throw new SettingsError("Fatal exception " + e,e);  }catch (  InvocationTargetException e) {    if (e.getCause() instanceof SettingsError) {      throw (SettingsError)e.getCause();    } else {      e.printStackTrace();      throw new SimError("Couldn't create settings-accepting object" + " for '" + className + "'\n"+ "cause: "+ e.getCause(),e);    }  }  return o;}  }
class C{  public E element(){  return getFirst();}  }
class C{  @SuppressWarnings("PrivateResource") public static void tintSearchView(Context context,@NonNull Toolbar toolbar,MenuItem item,@NonNull SearchView searchView,@ColorInt int color){  item.setIcon(ColorUtils.getTintedIcon(context,R.drawable.ic_search,color));  final Class<?> searchViewClass=searchView.getClass();  try {    final Field mCollapseIconField=toolbar.getClass().getDeclaredField("mCollapseIcon");    mCollapseIconField.setAccessible(true);    final Drawable drawable=(Drawable)mCollapseIconField.get(toolbar);    if (drawable != null)     mCollapseIconField.set(toolbar,ColorUtils.getTintedIcon(drawable,color));    final Field mSearchSrcTextViewField=searchViewClass.getDeclaredField("mSearchSrcTextView");    mSearchSrcTextViewField.setAccessible(true);    final EditText mSearchSrcTextView=(EditText)mSearchSrcTextViewField.get(searchView);    mSearchSrcTextView.setTextColor(color);    mSearchSrcTextView.setHintTextColor(ColorUtils.adjustAlpha(color,0.5f));    setCursorTint(mSearchSrcTextView,color);    hideSearchHintIcon(context,searchView);    Field field=searchViewClass.getDeclaredField("mSearchButton");    tintImageView(searchView,field,color);    field=searchViewClass.getDeclaredField("mGoButton");    tintImageView(searchView,field,color);    field=searchViewClass.getDeclaredField("mCloseButton");    tintImageView(searchView,field,color);    field=searchViewClass.getDeclaredField("mVoiceButton");    tintImageView(searchView,field,color);    field=searchViewClass.getDeclaredField("mCollapsedIcon");    tintImageView(searchView,field,color);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void handleError(@NotNull Throwable e){  String errorMessage=(e.getMessage() != null && !e.getMessage().isEmpty()) ? e.getMessage() : constant.commitFailed();  console.printError(errorMessage);  Notification notification=new Notification(errorMessage,ERROR);  notificationManager.showNotification(notification);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.832 -0500",hash_original_method="2404EE3C179A56E4FBB403E872AACE69",hash_generated_method="726453482F3669E41225D0560A9371CC") public void dispatchChange(boolean selfChange){synchronized (mObservers) {    for (    ContentObserver observer : mObservers) {      if (!selfChange || observer.deliverSelfNotifications()) {        observer.dispatchChange(selfChange);      }    }  }}  }
class C{  public void modifyEnergyStored(int energy){  this.energy+=energy;  if (this.energy > capacity) {    this.energy=capacity;  } else   if (this.energy < 0) {    this.energy=0;  }}  }
class C{  public void clear(){  m.clear();}  }
class C{  public boolean isSetValues(){  return this.values != null;}  }
class C{  public static <T>Collection<T> asSynchronized(Collection<T> self){  return Collections.synchronizedCollection(self);}  }
class C{  @Override protected void determineLabelPositions(DrawContext dc){  Iterator<? extends Position> iterator=this.getPositions().iterator();  Position posA=iterator.next();  int i=0;  while (iterator.hasNext()) {    Position posB=iterator.next();    Position midpoint=Position.interpolate(0.5,posA,posB);    TacticalGraphicLabel label=this.labels.get(i);    if (i == 0) {      label.setPosition(this.getReferencePosition());      label.setPosition(this.computeMainLabelPosition(dc,label,midpoint,posB));      i+=1;      label=this.labels.get(i);    }    label.setPosition(midpoint);    label.setOrientationPosition(posB);    i+=1;    posA=posB;  }}  }
class C{  public Iterator<SymbolTable> iterator(){  ArrayList<SymbolTable> tables;synchronized (myTablesByName) {    tables=new ArrayList<SymbolTable>(myTablesByName.size());    Collection<TreeMap<Integer,SymbolTable>> symtabNames=myTablesByName.values();    for (    TreeMap<Integer,SymbolTable> versions : symtabNames) {synchronized (versions) {        tables.addAll(versions.values());      }    }  }  return tables.iterator();}  }
class C{  public boolean isFinal(){  return Modifier.isFinal(_method.getModifiers());}  }
class C{  @Override public boolean isDefinitelyWritable(int column) throws SQLException {  try {    debugCodeCall("isDefinitelyWritable",column);    checkColumnIndex(column);    return false;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public final MutableDouble2D subtract(MutableDouble2D other1,Double2D other2){  x=other1.x - other2.x;  y=other1.y - other2.y;  return this;}  }
class C{  private static void queryForSpecialValues(Table table){  System.out.println("\nQuerying for time took office 1800");  Vector queryVector=table.makeCellVector(2,"1800");  for (  SearchResult result : table.searchRowVectors(queryVector)) {    System.out.println(result.toTexTableString(20));  }  System.out.println("\nQuerying for year of birth 1800");  queryVector=table.makeCellVector(5,"1800");  for (  SearchResult result : table.searchRowVectors(queryVector)) {    System.out.println(result.toTexTableString(20));  }  System.out.println("\nSorting in order of age upon taking office");  queryVector=table.getColumnAlphaVector(8).copy();  queryVector.bind(table.getColumnVector(8));  for (  SearchResult result : table.searchRowVectors(queryVector)) {    System.out.println(result.toTexTableString(20));  }  System.out.println("\nQuerying for proximity between year of birth and time took office");  Vector elementalYOB=table.getColumnVector(5);  Vector elementalTTO=table.getColumnVector(2);  Vector demarcatorAlpha=table.getColumnAlphaVector(2);  Vector demarcatorOmega=table.getColumnOmegaVector(2);  for (  SearchResult result : table.searchProxRowVectors(elementalYOB,elementalTTO,demarcatorAlpha,demarcatorOmega)) {    System.out.println(result.getScore() + "\t" + result.getObjectVector().getObject().toString());  }}  }
class C{  public boolean isConsumeEvents(){  return consumeEvents;}  }
class C{  public TimePassedCondition(final String questname,final int delayInMinutes){  this.questname=checkNotNull(questname);  this.delay=delayInMinutes;  this.index=0;}  }
class C{  public boolean match(BreakStatement node,Object other){  if (!(other instanceof BreakStatement)) {    return false;  }  BreakStatement o=(BreakStatement)other;  return safeSubtreeMatch(node.getLabel(),o.getLabel());}  }
class C{  public static IntervalleObject createInterval(Object lower,Object upper){  try {    if (lower == null && upper == null) {      return null;    } else {      return new IntervalleObject(lower,upper);    }  } catch (  Exception e) {    return null;  }}  }
class C{  @Override public void fromBytes(ByteBuf buf){  pos=BlockPos.fromLong(buf.readLong());  hasFacing=buf.readBoolean();  if (hasFacing) {    facing=EnumFacing.getFront(buf.readUnsignedByte());  }  lockCode=ByteBufUtils.readUTF8String(buf);}  }
class C{  public SolrQueryResponse(){}  }
class C{  public static Test suite(){  return suite(TestMode.triples);}  }
class C{  public void dispose(){  keyboards.clear();  keyboards=null;  if (logoutTimer != null)   logoutTimer.stop();  logoutTimer=null;  if (m_focusMgr != null)   m_focusMgr.stop();  m_focusMgr=null;  KeyboardFocusManager.setCurrentKeyboardFocusManager(originalKeyboardFocusManager);  if (f_order != null)   f_order.dispose();  f_order=null;  if (f_curLine != null) {    f_curLine.dispose();  }  f_curLine=null;  if (f_functionKeys != null)   f_functionKeys.dispose();  f_functionKeys=null;  if (f_cashfunctions != null)   f_cashfunctions.dispose();  f_cashfunctions=null;  if (m_frame != null)   m_frame.dispose();  m_frame=null;  m_ctx=null;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public void addAll(Change[] changes){  for (int i=0; i < changes.length; i++) {    add(changes[i]);  }}  }
class C{  public ServerAuthenticatorNone(InputStream in,OutputStream out){  this.in=in;  this.out=out;}  }
class C{  private void addToScene(final Node items){  collection.add(items);}  }
class C{  public boolean isEmpty(){  return currentBatch.isEmpty();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.048 -0500",hash_original_method="85D7F2A5B84662980034D44564A77465",hash_generated_method="D9D70BB94976666FC63AFBAD98143A15") public static ParcelFileDescriptor fromSocket(Socket socket){  FileDescriptor fd=socket.getFileDescriptor$();  return fd != null ? new ParcelFileDescriptor(fd) : null;}  }
class C{  public BallNode buildTree() throws Exception {  ArrayList<TempNode> list=new ArrayList<TempNode>();  for (int i=0; i < m_InstList.length; i++) {    TempNode n=new TempNode();    n.points=new int[1];    n.points[0]=m_InstList[i];    n.anchor=m_Instances.instance(m_InstList[i]);    n.radius=0.0;    list.add(n);  }  return mergeNodes(list,0,m_InstList.length - 1,m_InstList);}  }
class C{  private void validateBusinessObjectDataNotificationRegistrationCreateRequest(BusinessObjectDataNotificationRegistrationCreateRequest request){  Assert.notNull(request,"A business object data notification create request must be specified.");  validateBusinessObjectDataNotificationRegistrationKey(request.getBusinessObjectDataNotificationRegistrationKey());  Assert.hasText(request.getBusinessObjectDataEventType(),"A business object data event type must be specified.");  request.setBusinessObjectDataEventType(request.getBusinessObjectDataEventType().trim());  validateBusinessObjectDataNotificationFilter(request.getBusinessObjectDataNotificationFilter(),request.getBusinessObjectDataEventType());  validateNotificationActions(request.getJobActions());  if (request.getNotificationRegistrationStatus() != null) {    request.setNotificationRegistrationStatus(request.getNotificationRegistrationStatus().trim());  }}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof PLRotation) {    if (this == o)     return true;    PLRotation rotation=(PLRotation)o;    return (pitch == rotation.pitch && yaw == rotation.yaw && roll == rotation.roll);  }  return false;}  }
class C{  public boolean match(final Dictionary<String,?> map){  if (map == null) {    return false;  }  Object temp=null;  temp=map.get(id);  if (temp == null) {    temp=map.get(id.toLowerCase());  }  if (temp == null) {    for (final Enumeration<String> keys=map.keys(); keys.hasMoreElements(); ) {      final String key=keys.nextElement();      if (key.equalsIgnoreCase(id)) {        temp=map.get(key);        break;      }    }  }  if (temp == null) {    return false;  }  if (comparator == PRESENT) {    return true;  }  final Object attr=temp;  try {    if (attr instanceof String) {      return compareString(value,comparator,(String)attr);    } else     if (attr instanceof Number) {      return compareNumber(value.trim(),comparator,(Number)attr);    } else     if (attr instanceof String[]) {      final String[] array=(String[])attr;      if (array.length == 0) {        return false;      }      final String val=comparator == APPROX ? stripWhitespaces(value) : value;      for (int i=0; i < array.length; i++) {        if (compareString(val,comparator,array[i])) {          return true;        }      }      return false;    } else     if (attr instanceof Boolean) {      return (comparator == EQUALS || comparator == APPROX) && ((Boolean)attr).equals(Boolean.valueOf(value.trim()));    } else     if (attr instanceof Character) {      final String trimmed=value.trim();      return trimmed.length() == 1 ? compareTyped(new Character(trimmed.charAt(0)),comparator,(Character)attr) : trimmed.length() == 0 && Character.isWhitespace(((Character)attr).charValue());    } else     if (attr instanceof Collection) {      final Collection<?> col=(Collection<?>)attr;      final Object[] obj=col.toArray();      return compareArray(value,comparator,obj);    } else     if (attr instanceof Object[]) {      return compareArray(value,comparator,(Object[])attr);    } else     if (attr.getClass().isArray()) {      for (int i=0; i < Array.getLength(attr); i++) {        final Object obj=Array.get(attr,i);        if (obj instanceof Number && compareNumber(value,comparator,(Number)obj) || obj instanceof Character && compareTyped(new Character(value.trim().charAt(0)),comparator,(Character)obj) || compareReflective(value,comparator,obj)) {          return true;        }      }      return false;    } else {      return compareReflective(value,comparator,attr);    }  } catch (  final Throwable t) {    return false;  }}  }
class C{  @Override public IBinder onBind(Intent arg0){  return mBinder;}  }
class C{  public HarnessAll(){  super(Options.set,"Harness All","Should we wrap the entire execution inside calls to harnessBegin and harnessEnd?",false);}  }
class C{  public void removePauseListener(com.nineoldandroids.animation.Animator.AnimatorPauseListener listener){  mSupportAnimator.removePauseListener(listener);}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(getTitle());  int length=getItemCount();  for (int k=0; k < length; k++) {    xySeries.add(k + 1,getMinimumValue(k));    xySeries.add(k + 1.000001,getMaximumValue(k));  }  return xySeries;}  }
class C{  private void build(Document doc,Node root){  Element file=doc.createElement("file");  file.setAttribute("name",name);  root.appendChild(file);  if (copyright != null && !copyright.isEmpty())   appendTextElement(doc,file,"copyright",copyright);  if (description != null && !description.isEmpty())   appendTextElement(doc,file,"description",description);  for (  Entry<String,String> e : hash.entrySet()) {    Element hash=doc.createElement("hash");    hash.setAttribute("type",e.getKey());    hash.appendChild(doc.createTextNode(e.getValue()));    file.appendChild(hash);  }  if (identity != null && !identity.isEmpty())   appendTextElement(doc,file,"identity",identity);  for (  String lang : language)   appendTextElement(doc,file,"language",lang);  if (logo != null && !logo.isEmpty())   appendTextElement(doc,file,"logo",logo);  for (  BasicElement be : metaUrls)   be.build(doc,file);  for (  String os : this.os)   appendTextElement(doc,file,"os",os);  if (publisher != null)   publisher.build(doc,file);  if (signature != null)   signature.build(doc,file);  if (size >= 0)   appendTextElement(doc,file,"size",String.valueOf(size));  for (  BasicElement url : this.url)   url.build(doc,file);  if (version != null && !version.isEmpty())   appendTextElement(doc,file,"version",version);  for (  MetalinkFilePiecesBuilder pieces : this.pieces)   pieces.build(doc,file);}  }
class C{  private Bitmap scaleBitmap(Bitmap bitmap,float scale){  int width=(int)((float)bitmap.getWidth() * scale);  int height=(int)((float)bitmap.getHeight() * scale);  if (bitmap.getWidth() != width || bitmap.getHeight() != height) {    return Bitmap.createScaledBitmap(bitmap,width,height,true);  } else {    return bitmap;  }}  }
class C{  private void registerDeviceStateReceiver(){  IntentFilter filter=new IntentFilter();  filter.addAction(Intent.ACTION_POWER_DISCONNECTED);  filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);  filter.addAction(Intent.ACTION_SCREEN_ON);  registerReceiver(mDeviceStateReceiver,filter);}  }
class C{  public void enableDiscoverability(Activity activity,int requestCode,int duration){  Intent discoverableIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);  if (duration >= 0) {    discoverableIntent.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION,duration);  }  activity.startActivityForResult(discoverableIntent,requestCode);}  }
class C{  public IHyperlink[] detectHyperlinks(ITextViewer textViewer,IRegion region,boolean canShowMultipleHyperlinks){  if (ToolboxHandle.getSpecObj() == null) {    return null;  }  IDocument document=textViewer.getDocument();  TokenSpec currentTokenSpec=TokenSpec.findCurrentTokenSpec(region);  if (currentTokenSpec == null) {    return null;  }  region=new Region(currentTokenSpec.leftPos,currentTokenSpec.rightPos - currentTokenSpec.leftPos);  String label=currentTokenSpec.token;  SymbolNode resolvedSymbol=currentTokenSpec.resolvedSymbol;  try {    if (resolvedSymbol == null) {      resolvedSymbol=ResourceHelper.getModuleNode(label);    }    if (resolvedSymbol != null) {      SyntaxTreeNode csNode=(SyntaxTreeNode)resolvedSymbol.getTreeNode();      if (resolvedSymbol instanceof ModuleNode) {        csNode=(SyntaxTreeNode)resolvedSymbol.stn.heirs()[0];      }      for (int i=0; i < csNode.getAttachedComments().length; i++) {        TLAEditorActivator.getDefault().logDebug(csNode.getAttachedComments()[i]);      }      IResource resource=null;      if (ToolboxHandle.isUserModule(ResourceHelper.getModuleFileName(csNode.getFilename()))) {        resource=ResourceHelper.getResourceByModuleName(csNode.getFilename());      } else {        return null;      }      FileEditorInput fileEditorInput=new FileEditorInput((IFile)resource);      FileDocumentProvider fileDocumentProvider=new FileDocumentProvider();      try {        fileDocumentProvider.connect(fileEditorInput);        document=fileDocumentProvider.getDocument(fileEditorInput);      }  finally {        fileDocumentProvider.disconnect(fileEditorInput);      }      try {        if (resolvedSymbol instanceof OpDefNode) {          csNode=csNode.getHeirs()[0];          if (csNode.getKind() == SyntaxTreeConstants.N_IdentLHS) {            csNode=csNode.getHeirs()[0];          } else {            if ((csNode.getKind() == SyntaxTreeConstants.N_InfixLHS) || (csNode.getKind() == SyntaxTreeConstants.N_PostfixLHS)) {              csNode=csNode.getHeirs()[1];            }          }        } else         if ((resolvedSymbol instanceof ThmOrAssumpDefNode) && ((csNode.getKind() == SyntaxTreeConstants.N_Theorem) || (csNode.getKind() == SyntaxTreeConstants.N_Assumption))) {          csNode=csNode.getHeirs()[1];        }        IRegion startLineRegion=document.getLineInformation(csNode.getLocation().beginLine() - 1);        IRegion endLineRegion=document.getLineInformation(csNode.getLocation().endLine() - 1);        int startOffset=startLineRegion.getOffset() + csNode.getLocation().beginColumn() - 1;        int endOffset=endLineRegion.getOffset() + csNode.getLocation().endColumn();        return new IHyperlink[]{new OpenDeclarationAction(resource,new Region(startOffset,endOffset - startOffset),label,region)};      } catch (      BadLocationException e) {        e.printStackTrace();      }    }  } catch (  CoreException e) {    e.printStackTrace();  }  return null;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  changeSupport.removePropertyChangeListener(listener);}  }
class C{  public static ArrayList<IComment> loadCommentByCommentId(final SQLProvider provider,final int commentRootId) throws CouldntLoadDataException {  Preconditions.checkNotNull(provider,"IE00440: connection argument can not be null");  final HashMap<Integer,IComment> commentIdToComment=new HashMap<>();  final ArrayList<IComment> comments=new ArrayList<>();  final String commentQuery="SELECT * FROM get_all_comment_ancestors(" + commentRootId + ");";  try (ResultSet resultSet=provider.getConnection().executeQuery(commentQuery,true)){    while (resultSet.next()) {      resultSet.getInt("level");      final int commentId=resultSet.getInt("id");      Integer parentId=resultSet.getInt("parent_id");      if (resultSet.wasNull()) {        parentId=null;      }      final int userId=resultSet.getInt("user_id");      final String commentText=resultSet.getString("comment");      final CComment comment=new CComment(commentId,CUserManager.get(provider).getUserById(userId),commentIdToComment.get(parentId),commentText);      commentIdToComment.put(commentId,comment);      comments.add(comment);    }  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }  return comments;}  }
class C{  public boolean isHidden(){  return hidden;}  }
class C{  @Deprecated public EmailListFeed retrieveAllEmailLists() throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving all email lists.");  URL retrieveUrl=new URL(domainUrlBase + "emailList/" + SERVICE_VERSION+ "/");  EmailListFeed allEmailLists=new EmailListFeed();  EmailListFeed currentPage;  Link nextLink;  do {    currentPage=emailListService.getFeed(retrieveUrl,EmailListFeed.class);    allEmailLists.getEntries().addAll(currentPage.getEntries());    nextLink=currentPage.getLink(Link.Rel.NEXT,Link.Type.ATOM);    if (nextLink != null) {      retrieveUrl=new URL(nextLink.getHref());    }  } while (nextLink != null);  return allEmailLists;}  }
class C{  public Golf(){  super();}  }
class C{  @Deprecated public T withTintSelectedIcon(boolean iconTinted){  return withIconTintingEnabled(iconTinted);}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return true;}  }
class C{  public void typedAdd() throws IOException {  print("typedAdd",null);}  }
class C{  public int findLastCompletelyVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,true,false);  return child == null ? NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  private String translateOperator(String sourceVendorName,String targetVendorName,String operatorName){  if (operatorName == null)   operatorName=new String();  operatorName=operatorName.trim();  return m_interfaces.get(getDBVendorID(targetVendorName)).translateOperator(sourceVendorName.toUpperCase(),operatorName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.976 -0500",hash_original_method="24A3E423DE78176900F1058E127BC8B2",hash_generated_method="5B5F51BF25DAE30DEF4DFB5C781A6B4A") public void send(InetAddress host,int port) throws IOException {  __sendPacket.setAddress(host);  __sendPacket.setPort(port);  _socket_.send(__sendPacket);}  }
class C{  @Override public boolean switchOffFeature(AttributeRole role) throws OperatorException {  Attribute feature=role.getAttribute();  int type=getParameterAsInt(PARAMETER_SKIP_FEATURES_OF_TYPE) + 1;  int exceptionType=getParameterAsInt(PARAMETER_EXCEPT_FEATURES_OF_TYPE);  if (exceptionType == 0) {    return Ontology.ATTRIBUTE_BLOCK_TYPE.isA(feature.getBlockType(),type);  } else {    return Ontology.ATTRIBUTE_BLOCK_TYPE.isA(feature.getBlockType(),type) && !Ontology.ATTRIBUTE_BLOCK_TYPE.isA(feature.getBlockType(),exceptionType);  }}  }
class C{  public boolean isPhantom(){  Object oo=get_Value(COLUMNNAME_IsPhantom);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void add(String name,Object val){  values.add(name,val);}  }
class C{  public static Pair<int[],double[]> convert(Set<Feature> features,Lexicon lexicon,boolean trainingMode){  TIntDoubleHashMap fMap=new TIntDoubleHashMap(features.size());  for (  Feature feature : features) {    final int featureId=FeatureUtilities.getFeatureId(lexicon,trainingMode,feature);    if (featureId < 0)     continue;    double value=feature.getValue() + fMap.get(featureId);    fMap.put(featureId,value);  }  int[] idsOriginal=fMap.keys();  int[] ids=new int[idsOriginal.length];  System.arraycopy(idsOriginal,0,ids,0,ids.length);  Arrays.sort(ids);  double[] vals=new double[fMap.size()];  int count=0;  for (  int key : ids) {    vals[count++]=fMap.get(key);  }  return new Pair<>(ids,vals);}  }
class C{  public Search query(Condition... conditions){  query=add(query,conditions);  return this;}  }
class C{  void update(long time,int rows){  count++;  executionTimeMin=Math.min(time,executionTimeMin);  executionTimeMax=Math.max(time,executionTimeMax);  rowCountMin=Math.min(rows,rowCountMin);  rowCountMax=Math.max(rows,rowCountMax);  double delta=rows - rowCountMean;  rowCountMean+=delta / count;  rowCountM2+=delta * (rows - rowCountMean);  delta=time - executionTimeMean;  executionTimeMean+=delta / count;  executionTimeM2+=delta * (time - executionTimeMean);  executionTimeCumulative+=time;  rowCountCumulative+=rows;  lastUpdateTime=System.currentTimeMillis();}  }
class C{  boolean appendMarker(Node<K,V> f){  return casNext(f,new Node<K,V>(f));}  }
class C{  public void clear(int length){  clear(0,length);}  }
class C{  public NutchDocument filter(NutchDocument doc,Parse parse,Text url,CrawlDatum datum,Inlinks inlinks) throws IndexingException {  for (int i=0; i < this.indexingFilters.length; i++) {    doc=this.indexingFilters[i].filter(doc,parse,url,datum,inlinks);    if (doc == null)     return null;  }  return doc;}  }
class C{  public boolean isStatic(){  return method.isStatic();}  }
class C{  public double nextEventsTime(){  if (eventsLeftInBuffer() <= 0) {    return Double.MAX_VALUE;  } else {    return queue.get(nextEventIndex).getTime();  }}  }
class C{  @Deprecated @Override public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  public void test_ticket_bg1899_i() throws Exception {  new TestHelper("ticket_bg1899c","ticket_bg1899i.rq","ticket_bg1899abcd.ttl","ticket_bg1899abcd.srx").runTest();}  }
class C{  final ResultSetRow nextRow(Field[] fields,int columnCount,boolean isBinaryEncoded,int resultSetConcurrency,boolean useBufferRowIfPossible,boolean useBufferRowExplicit,boolean canReuseRowPacketForBufferRow,Buffer existingRowPacket) throws SQLException {  if (this.useDirectRowUnpack && existingRowPacket == null && !isBinaryEncoded && !useBufferRowIfPossible && !useBufferRowExplicit) {    return nextRowFast(fields,columnCount,isBinaryEncoded,resultSetConcurrency,useBufferRowIfPossible,useBufferRowExplicit,canReuseRowPacketForBufferRow);  }  Buffer rowPacket=null;  if (existingRowPacket == null) {    rowPacket=checkErrorPacket();    if (!useBufferRowExplicit && useBufferRowIfPossible) {      if (rowPacket.getBufLength() > this.useBufferRowSizeThreshold) {        useBufferRowExplicit=true;      }    }  } else {    rowPacket=existingRowPacket;    checkErrorPacket(existingRowPacket);  }  if (!isBinaryEncoded) {    rowPacket.setPosition(rowPacket.getPosition() - 1);    if (!(!isEOFDeprecated() && rowPacket.isEOFPacket() || isEOFDeprecated() && rowPacket.isResultSetOKPacket())) {      if (resultSetConcurrency == ResultSet.CONCUR_UPDATABLE || (!useBufferRowIfPossible && !useBufferRowExplicit)) {        byte[][] rowData=new byte[columnCount][];        for (int i=0; i < columnCount; i++) {          rowData[i]=rowPacket.readLenByteArray(0);        }        return new ByteArrayRow(rowData,getExceptionInterceptor());      }      if (!canReuseRowPacketForBufferRow) {        this.reusablePacket=new Buffer(rowPacket.getBufLength());      }      return new BufferRow(rowPacket,fields,false,getExceptionInterceptor());    }    readServerStatusForResultSets(rowPacket);    return null;  }  if (!(!isEOFDeprecated() && rowPacket.isEOFPacket() || isEOFDeprecated() && rowPacket.isResultSetOKPacket())) {    if (resultSetConcurrency == ResultSet.CONCUR_UPDATABLE || (!useBufferRowIfPossible && !useBufferRowExplicit)) {      return unpackBinaryResultSetRow(fields,rowPacket,resultSetConcurrency);    }    if (!canReuseRowPacketForBufferRow) {      this.reusablePacket=new Buffer(rowPacket.getBufLength());    }    return new BufferRow(rowPacket,fields,true,getExceptionInterceptor());  }  rowPacket.setPosition(rowPacket.getPosition() - 1);  readServerStatusForResultSets(rowPacket);  return null;}  }
class C{  public static java.lang.String toString(int modifiers){  StringBuilder buf=new StringBuilder();  if (isPublic(modifiers)) {    buf.append("public ");  }  if (isProtected(modifiers)) {    buf.append("protected ");  }  if (isPrivate(modifiers)) {    buf.append("private ");  }  if (isAbstract(modifiers)) {    buf.append("abstract ");  }  if (isStatic(modifiers)) {    buf.append("static ");  }  if (isFinal(modifiers)) {    buf.append("final ");  }  if (isTransient(modifiers)) {    buf.append("transient ");  }  if (isVolatile(modifiers)) {    buf.append("volatile ");  }  if (isSynchronized(modifiers)) {    buf.append("synchronized ");  }  if (isNative(modifiers)) {    buf.append("native ");  }  if (isStrict(modifiers)) {    buf.append("strictfp ");  }  if (isInterface(modifiers)) {    buf.append("interface ");  }  if (buf.length() == 0) {    return "";  }  buf.setLength(buf.length() - 1);  return buf.toString();}  }
class C{  public IdentityHashMap(int expectedMaxSize){  if (expectedMaxSize < 0) {    throw new IllegalArgumentException("expectedMaxSize is negative: " + expectedMaxSize);  }  init(capacity(expectedMaxSize));}  }
class C{  public Log4JLogSystem(){}  }
class C{  @SuppressWarnings("deprecation") @Override public void incomingObject(IAnalyzedInterval analyzedInterval) throws AdeException, AdeFlowException {  if (analyzedInterval.getInterval().getSource().getSourceId().equals(m_source)) {    throw new AdeFlowException("Cannot process analyzed interval of source other than " + m_source.getSourceId() + ". Got analyzed interval from source "+ analyzedInterval.getInterval().getSource().getSourceId());  }  long intervalSizeInMillis=analyzedInterval.getInterval().getIntervalSize();  m_xmlMetaData.retrieveXMLMetaData(analyzedInterval.getModelInternalId(),true,intervalSizeInMillis);  createXsltDirectory(analyzedInterval);  Interval jaxbInterval=new Interval();  jaxbInterval.setModelInternalId(analyzedInterval.getModelInternalId());  jaxbInterval.setVersion(XML_VERSION);  jaxbInterval.setAdeVersion(analyzedInterval.getAdeVersion().toInt());  jaxbInterval.setSysId(m_source.getSourceId());  m_gc.setTimeInMillis(analyzedInterval.getInterval().getIntervalStartTime());  jaxbInterval.setStartTime(s_dataTypeFactory.newXMLGregorianCalendar(m_gc));  m_gc.setTimeInMillis(analyzedInterval.getInterval().getIntervalEndTime());  jaxbInterval.setEndTime(s_dataTypeFactory.newXMLGregorianCalendar(m_gc));  double value=Double.valueOf(SingleDigitFormatter.format(analyzedInterval.getScore() * 100));  jaxbInterval.setAnomalyScore(value);  jaxbInterval.setGmtOffset(m_xmlMetaData.getGMTOffset(m_source.getSourceId()));  ModelInfo modelInfo=new ModelInfo();  modelInfo.setAnalysisGroup(m_xmlMetaData.getAnalysisGroupName());  modelInfo.setIntervalSizeInSec(m_xmlMetaData.getIntervalLengthInSeconds());  modelInfo.setModelCreationDate(m_xmlMetaData.getModelCreationDate());  modelInfo.setTrainingPeriod(m_xmlMetaData.getNumberOfDaysInTraining());  modelInfo.setLimitedModel(m_xmlMetaData.getLimitedModelIndicator().toString());  jaxbInterval.setModelInfo(modelInfo);  int numberOfNewMessages=0;  List<IntervalMessageType> jaxbMessageTypeList=jaxbInterval.getIntervalMessage();  Collection<IAnalyzedMessageSummary> sortedMessages=getSortedMessages(analyzedInterval);  for (  IAnalyzedMessageSummary analyzedMessageSummary : sortedMessages) {    IntervalMessageType jaxbIntervalMessage=processAnalyzedMessageSummary(analyzedMessageSummary);    jaxbMessageTypeList.add(jaxbIntervalMessage);    StatisticsChart statChart=analyzedMessageSummary.getStatistics();    String clusterStatus=statChart.getStringStatOrThrow(ClusteringContextScore_status);    if (clusterStatus.equalsIgnoreCase("New")) {      numberOfNewMessages++;    }  }  MsgSummary msgSummary=new MsgSummary();  msgSummary.setNumNewMsg(numberOfNewMessages);  jaxbInterval.setMsgSummary(msgSummary);  writeToXML(analyzedInterval,jaxbInterval,s_marshaller);}  }
class C{  public static Test suite(){  return (new TestSuite(Converter2ITCase.class));}  }
class C{  private static void createFixtureDirectory(MemberType memberType) throws IOException {  final Path path=Paths.get(FIXTURE_ROOT,memberType.name());  if (Files.exists(path))   deleteFixtureDirectory();  Files.createDirectories(path);}  }
class C{  private Intent makeGalleryIntent(Context context,String pathToImageFile){  return UriUtils.buildFileProviderReadUriIntent(context,Uri.fromFile(new File(pathToImageFile)),Intent.ACTION_VIEW,"image/*");}  }
class C{  private void updateMinMax(Instance instance){  for (int j=0; j < m_theInstances.numAttributes(); j++) {    if (!instance.isMissing(j)) {      if (Double.isNaN(m_minValues[j])) {        m_minValues[j]=instance.value(j);        m_maxValues[j]=instance.value(j);      } else {        if (instance.value(j) < m_minValues[j]) {          m_minValues[j]=instance.value(j);        } else {          if (instance.value(j) > m_maxValues[j]) {            m_maxValues[j]=instance.value(j);          }        }      }    }  }}  }
class C{  public void terminate(){  taskQueue.clear();  listener.onSuccess();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void paintComponent(Graphics g){  int fadeX=0;  int blankX=getWidth() / 3;  int bigRectW=getWidth() / 3;  g.setColor(largeRectColors[colorIndex]);  g.fillRect(0,0,bigRectW,getHeight());  g.setColor(Color.WHITE);  g.fillRect(bigRectW,0,bigRectW,getHeight());  int bigRectX=2 * bigRectW;  int smallRectW=4;  int smallRectH=4;  int smallRectX=bigRectX + (bigRectW / 2) - (smallRectW / 2);  int smallRectY=(getHeight() / 2) - (smallRectH / 2);  g.setColor(Color.BLACK);  g.fillRect(2 * getWidth() / 3,0,getWidth() / 3,getHeight());  g.setColor(smallRectColors[colorIndex]);  g.fillRect(smallRectX,smallRectY,smallRectW,smallRectH);}  }
class C{  void onCancel(){  onUp();}  }
class C{  public int delete(){  return DELETE().deleteByExample(this.example);}  }
class C{  @Override public boolean supportsLimitedOuterJoins(){  debugCodeCall("supportsLimitedOuterJoins");  return true;}  }
class C{  private void initializeScheme(String p_uriSpec) throws MalformedURIException {  int uriSpecLen=p_uriSpec.length();  int index=0;  String scheme=null;  char testChar='\0';  while (index < uriSpecLen) {    testChar=p_uriSpec.charAt(index);    if (testChar == ':' || testChar == '/' || testChar == '?' || testChar == '#') {      break;    }    index++;  }  scheme=p_uriSpec.substring(0,index);  if (scheme.length() == 0) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_SCHEME_INURI,null));  } else {    setScheme(scheme);  }}  }
class C{  public final SpaceEffGraphNodeList topSortOrder(){  return _topSortNodes.first();}  }
class C{  public Entry(String tag,long millis){  if (tag == null)   throw new NullPointerException("tag == null");  mTag=tag;  mTimeMillis=millis;  mData=null;  mFileDescriptor=null;  mFlags=IS_EMPTY;}  }
class C{  public static WsSecuritySignature createWsEmptySecuritySignature(){  return new WsEmptySecuritySignature();}  }
class C{  public void calibrate(final List<CalibrationHelper> instruments,final OptimizationMethod method,final EndCriteria endCriteria,final Constraint additionalConstraint,final double[] weights){  QL.require(weights == null || weights.length == instruments.size(),"mismatch between number of instruments and weights");  Constraint c;  if (additionalConstraint.empty()) {    c=constraint_;  } else {    c=new CompositeConstraint(constraint_,additionalConstraint);  }  final double[] w=new double[instruments.size()];  if (weights == null) {    Arrays.fill(w,1.0);  } else {    System.arraycopy(weights,0,w,0,w.length);  }  final CalibrationFunction f=new CalibrationFunction(this,instruments,w);  final Problem prob=new Problem(f,c,params());  shortRateEndCriteria_=method.minimize(prob,endCriteria);  final Array result=new Array(prob.currentValue());  setParams(result);  final Array shortRateProblemValues_=prob.values(result);  notifyObservers();}  }
class C{  private void showAbout(){  if (about == null) {    about=new CommonAboutDialog(frame);  }  about.setVisible(true);}  }
class C{  private void calculateType(){  int ret=TYPE_IDENTITY;  boolean sgn0, sgn1;  double M0, M1, M2, M3;  updateState();switch (state) {default :    stateError();case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):  ret=TYPE_TRANSLATION;case (APPLY_SHEAR | APPLY_SCALE):if ((M0=m00) * (M2=m01) + (M3=m10) * (M1=m11) != 0) {  this.type=TYPE_GENERAL_TRANSFORM;  return;}sgn0=(M0 >= 0.0);sgn1=(M1 >= 0.0);if (sgn0 == sgn1) {if (M0 != M1 || M2 != -M3) {ret|=(TYPE_GENERAL_ROTATION | TYPE_GENERAL_SCALE);} else if (M0 * M1 - M2 * M3 != 1.0) {ret|=(TYPE_GENERAL_ROTATION | TYPE_UNIFORM_SCALE);} else {ret|=TYPE_GENERAL_ROTATION;}} else {if (M0 != -M1 || M2 != M3) {ret|=(TYPE_GENERAL_ROTATION | TYPE_FLIP | TYPE_GENERAL_SCALE);} else if (M0 * M1 - M2 * M3 != 1.0) {ret|=(TYPE_GENERAL_ROTATION | TYPE_FLIP | TYPE_UNIFORM_SCALE);} else {ret|=(TYPE_GENERAL_ROTATION | TYPE_FLIP);}}break;case (APPLY_SHEAR | APPLY_TRANSLATE):ret=TYPE_TRANSLATION;case (APPLY_SHEAR):sgn0=((M0=m01) >= 0.0);sgn1=((M1=m10) >= 0.0);if (sgn0 != sgn1) {if (M0 != -M1) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_GENERAL_SCALE);} else if (M0 != 1.0 && M0 != -1.0) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_UNIFORM_SCALE);} else {ret|=TYPE_QUADRANT_ROTATION;}} else {if (M0 == M1) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_FLIP | TYPE_UNIFORM_SCALE);} else {ret|=(TYPE_QUADRANT_ROTATION | TYPE_FLIP | TYPE_GENERAL_SCALE);}}break;case (APPLY_SCALE | APPLY_TRANSLATE):ret=TYPE_TRANSLATION;case (APPLY_SCALE):sgn0=((M0=m00) >= 0.0);sgn1=((M1=m11) >= 0.0);if (sgn0 == sgn1) {if (sgn0) {if (M0 == M1) {ret|=TYPE_UNIFORM_SCALE;} else {ret|=TYPE_GENERAL_SCALE;}} else {if (M0 != M1) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_GENERAL_SCALE);} else if (M0 != -1.0) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_UNIFORM_SCALE);} else {ret|=TYPE_QUADRANT_ROTATION;}}} else {if (M0 == -M1) {if (M0 == 1.0 || M0 == -1.0) {ret|=TYPE_FLIP;} else {ret|=(TYPE_FLIP | TYPE_UNIFORM_SCALE);}} else {ret|=(TYPE_FLIP | TYPE_GENERAL_SCALE);}}break;case (APPLY_TRANSLATE):ret=TYPE_TRANSLATION;break;case (APPLY_IDENTITY):break;}this.type=ret;}  }
class C{  public boolean isSetDpid(){  return EncodingUtils.testBit(__isset_bitfield,__DPID_ISSET_ID);}  }
class C{  private static byte[] unsalt(final byte[] text){  if (text.length == 0) {    throw new DecodingException("empty input");  }  final int size=text[0];  if (text.length < size + 2) {    throw new DecodingException(String.format("not enough bytes for salt, length is %d while %d required",text.length,size + 2));  }  byte sum=(byte)0;  for (int idx=0; idx < size; ++idx) {    sum+=text[idx + 1];  }  if (text[text.length - 1] != sum) {    throw new DecodingException(String.format("checksum %d failure, while %d expected",text[text.length - 1],sum));  }  final byte[] output=new byte[text.length - size - 2];  System.arraycopy(text,size + 1,output,0,output.length);  return output;}  }
class C{  public static int[] parseJsonIDList(JSONObject spec,String[] colnames,String group) throws JSONException {  int[] colList=new int[0];  boolean ids=spec.containsKey("ids") && spec.getBoolean("ids");  if (spec.containsKey(group)) {    JSONArray attrs=null;    if (spec.get(group) instanceof JSONObject) {      attrs=(JSONArray)((JSONObject)spec.get(group)).get(TfUtils.JSON_ATTRS);      ids=true;    } else     attrs=(JSONArray)spec.get(group);    colList=new int[attrs.size()];    for (int i=0; i < colList.length; i++) {      colList[i]=ids ? UtilFunctions.toInt(attrs.get(i)) : (ArrayUtils.indexOf(colnames,attrs.get(i)) + 1);      if (colList[i] <= 0) {        throw new RuntimeException("Specified column '" + attrs.get(i) + "' does not exist.");      }    }    Arrays.sort(colList);  }  return colList;}  }
class C{  public VectorClock(VectorClock other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetVersions()) {    List<ClockEntry> __this__versions=new ArrayList<ClockEntry>();    for (    ClockEntry other_element : other.versions) {      __this__versions.add(new ClockEntry(other_element));    }    this.versions=__this__versions;  }  this.timestamp=other.timestamp;}  }
class C{  private static void waitForNotificationsToEnd(NotifListener listener) throws InterruptedException {  int oldCout=listener.getCount();  int noChangeCounter=1;  while (listener.getCount() < TASK_COUNT) {    Thread.sleep(1000);    System.out.print('.');    if (oldCout == listener.getCount()) {      if (++noChangeCounter > 10) {        break;      }    } else {      noChangeCounter=1;    }    oldCout=listener.getCount();  }  System.out.println();}  }
class C{  public TFloatDoubleHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public boolean isQuads(){  return getProperty(Annotations.QUAD_DATA) != null;}  }
class C{  public boolean offer(E o){  if (null == o) {    throw new NullPointerException();  }  growToSize(size + 1);  elements[size]=o;  siftUp(size++);  return true;}  }
class C{  public void technologyProviderRoleChanged(ValueChangeEvent event){  Boolean checkBoxChecked=(Boolean)event.getNewValue();  setTechnologyProvider(checkBoxChecked.booleanValue());}  }
class C{  private void typeInsn(final int opcode,final Type type){  mv.visitTypeInsn(opcode,type.getInternalName());}  }
class C{  @SuppressWarnings("unchecked") public <R>LazyFutureStream<R> from(final Collection<R> collection){  return fromStream(collection.stream());}  }
class C{  public static String parseCharacterEncoding(String contentType){  if (contentType == null)   return (null);  int start=contentType.indexOf("charset=");  if (start < 0)   return (null);  String encoding=contentType.substring(start + 8);  int end=encoding.indexOf(';');  if (end >= 0)   encoding=encoding.substring(0,end);  encoding=encoding.trim();  if ((encoding.length() > 2) && (encoding.startsWith("\"")) && (encoding.endsWith("\"")))   encoding=encoding.substring(1,encoding.length() - 1);  return (encoding.trim());}  }
class C{  public UTMCoord(Angle latitude,Angle longitude,int zone,String hemisphere,double easting,double northing,Angle centralMeridian){  if (latitude == null || longitude == null) {    throw new IllegalArgumentException("Latitude Or Longitude Is Null");  }  this.latitude=latitude;  this.longitude=longitude;  this.hemisphere=hemisphere;  this.zone=zone;  this.easting=easting;  this.northing=northing;  this.centralMeridian=centralMeridian;}  }
class C{  @Category(FlakyTest.class) @Test public void testPRWithCacheCloseInOneDatastoreWithoutDelay() throws Exception {  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Querying PR Test with cache Close PR operation without delay*****");  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  setCacheInVMs(vm0,vm1,vm2);  List vmList=new LinkedList();  vmList.add(vm1);  vmList.add(vm2);  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Creating Accessor node on VM0");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRAccessorCreate(name,redundancy,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Successfully Created Accessor node on VM0");  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Creating PR's across all VM1 , VM2");  vm1.invoke(PRQHelp.getCacheSerializableRunnableForPRCreate(name,redundancy,PortfolioData.class));  vm2.invoke(PRQHelp.getCacheSerializableRunnableForPRCreate(name,redundancy,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Successfully Created PR on VM1 , VM2");  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Creating Local Region on VM0");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForLocalRegionCreation(localName,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Successfully Created Local Region on VM0");  LogWriterUtils.getLogWriter().info("Successfully Created PR's across all VM's");  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Successfully Created Local Region on VM0");  final PortfolioData[] portfolio=createPortfolioData(cnt,cntDest);  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Inserting Portfolio data through the accessor node");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRPuts(name,portfolio,cnt,cntDest));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Successfully Inserted Portfolio data through the accessor node");  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Inserting Portfolio data on local node  VM0 for result Set Comparison");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRPuts(localName,portfolio,cnt,cntDest));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Successfully Inserted Portfolio data on local node  VM0 for result Set Comparison");  Random random=new Random();  AsyncInvocation async0;  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Querying on VM0 both on PR Region & local ,also  Comparing the Results sets from both");  async0=vm0.invokeAsync(PRQHelp.getCacheSerializableRunnableForPRQueryAndCompareResults(name,localName));  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Calling for cache close on either of the Datastores VM1 , VM2 at random and then recreating the cache, with no delay ");  for (int j=0; j < queryTestCycle; j++) {    int k=(random.nextInt(vmList.size()));    LogWriterUtils.getLogWriter().info("PROperationWithQueryDUnitTest#getCacheSerializableRunnableForCacheClose: Closing cache");    ((VM)vmList.get(k)).invoke(null);    LogWriterUtils.getLogWriter().info("PROperationWithQueryDUnitTest#getCacheSerializableRunnableForCacheClose: Cache Closed");    setCacheInVMs(((VM)vmList.get(k)));    ((VM)(vmList.get(k))).invoke(PRQHelp.getCacheSerializableRunnableForCacheClose(name,redundancy,PortfolioData.class));  }  ThreadUtils.join(async0,5 * 60 * 1000);  if (async0.exceptionOccurred()) {    boolean isForceReattempt=false;    Throwable t=async0.getException();    do {      if (t instanceof ForceReattemptException) {        isForceReattempt=true;        break;      }      t=t.getCause();    } while (t != null);    if (!isForceReattempt) {      Assert.fail("Unexpected exception during query",async0.getException());    }  }  LogWriterUtils.getLogWriter().info("PRQueryCacheCloseDUnitTest#testPRWithCacheCloseInOneDatastoreWithoutDelay: Querying with PR Operations  without delay ENDED*****");}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case DatatypePackage.PRIMITIVE_TYPE:    return createPrimitiveTypeFromString(eDataType,initialValue);case DatatypePackage.CONSTRAINT_INTERVAL_TYPE:  return createConstraintIntervalTypeFromString(eDataType,initialValue);case DatatypePackage.BOOLEAN_PROPERTY_ATTRIBUTE_TYPE:return createBooleanPropertyAttributeTypeFromString(eDataType,initialValue);case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE_TYPE:return createEnumLiteralPropertyAttributeTypeFromString(eDataType,initialValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public ZipError(String s){  super(s);}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  PagerAdapter adapter=getAdapter();  if (adapter == null)   return super.dispatchTouchEvent(ev);  int action=MotionEventCompat.getActionMasked(ev);  float touchX=ev.getX();  float touchY=ev.getY();  if (action == MotionEvent.ACTION_DOWN) {    downX=touchX;    downY=touchY;    if (isAutoScroll && stopScrollWhenTouch) {      isStopByTouch=true;      scroller.setScrollDurationFactor(swipeScrollFactor);      stopAutoScroll();    }  } else   if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {    if (isStopByTouch && stopScrollWhenTouch) {      startAutoScroll();    }  }  if (slideBorderMode == SLIDE_BORDER_MODE_TO_PARENT) {    int currentItem=getCurrentItem();    int pageCount=adapter.getCount();    if ((currentItem == 0 && downX <= touchX) || (currentItem == pageCount - 1 && downX >= touchX)) {      getParent().requestDisallowInterceptTouchEvent(true);    }  }  if (Math.abs(downX - touchX) > Math.abs(downY - touchY)) {    getParent().requestDisallowInterceptTouchEvent(true);  } else {    getParent().requestDisallowInterceptTouchEvent(false);  }  return super.dispatchTouchEvent(ev);}  }
class C{  @Override protected void doAction(){  File exportFile=null;  try {    String alias=kseFrame.getSelectedEntryAlias();    DExportPublicKeyOpenSsl dExportPublicKey=new DExportPublicKeyOpenSsl(frame,alias);    dExportPublicKey.setLocationRelativeTo(frame);    dExportPublicKey.setVisible(true);    if (!dExportPublicKey.exportSelected()) {      return;    }    exportFile=dExportPublicKey.getExportFile();    boolean pemEncode=dExportPublicKey.pemEncode();    PublicKey publicKey=getPublicKey(alias);    byte[] encoded=null;    if (pemEncode) {      encoded=OpenSslPubUtil.getPem(publicKey).getBytes();    } else {      encoded=OpenSslPubUtil.get(publicKey);    }    exportEncodedPublicKey(encoded,exportFile);    JOptionPane.showMessageDialog(frame,res.getString("ExportKeyPairPublicKeyAction.ExportPublicKeyOpenSslSuccessful.message"),res.getString("ExportKeyPairPublicKeyAction.ExportPublicKeyOpenSsl.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  FileNotFoundException ex) {    String message=MessageFormat.format(res.getString("ExportKeyPairPublicKeyAction.NoWriteFile.message"),exportFile);    JOptionPane.showMessageDialog(frame,message,res.getString("ExportKeyPairPublicKeyAction.ExportPublicKeyOpenSsl.Title"),JOptionPane.WARNING_MESSAGE);  }catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  static public void assertSame(Object expected,Object actual){  assertSame(null,expected,actual);}  }
class C{  public JavaRNG(final RandomUtils seedGenerator){  this(seedGenerator.generateSeed(SEED_SIZE_BYTES));}  }
class C{  public int from(){  return v;}  }
class C{  public static void fadeInAndOut(final JDialog dialog){  fadeInAndOut(dialog,50,0.05f,10000);}  }
class C{  public void delete(URI id){  client.delete(String.class,PathConstants.SCHEDULE_POLICIES_BY_POLICY_URL,id);}  }
class C{  public void printMessage(Diagnostic.Kind kind,CharSequence msg,com.sun.source.tree.Tree t,com.sun.source.tree.CompilationUnitTree root){  printMessage(kind,msg,((JCTree)t).pos(),root);}  }
class C{  public final boolean skip(CharSet charSet,CharSequence csq){  if (this.at(charSet,csq)) {    index++;    return true;  } else {    return false;  }}  }
class C{  private int readNameLength(ByteBuffer buffer){  return ByteUtil.getUnsignedVarInt(buffer,getFormat().SIZE_NAME_LENGTH);}  }
class C{  @Override public void loadUrl(final String url,boolean clearNavigationStack){  webView.loadUrl(url);}  }
class C{  public boolean isShowNumbers(){  return showNumbers;}  }
class C{  public Matrix3d(Matrix3f m1){  this.m00=m1.m00;  this.m01=m1.m01;  this.m02=m1.m02;  this.m10=m1.m10;  this.m11=m1.m11;  this.m12=m1.m12;  this.m20=m1.m20;  this.m21=m1.m21;  this.m22=m1.m22;}  }
class C{  public NbtTagShort(String name){  super(name);}  }
class C{  public final void popQuick(){  m_firstFree--;  m_map[m_firstFree]=DTM.NULL;}  }
class C{  @Override public Color transform(Element element){  return match(element);}  }
class C{  public FixedNodeExtentProvider(double width,double height){  checkArg(width >= 0,"width must be >= 0");  checkArg(height >= 0,"height must be >= 0");  this.width=width;  this.height=height;}  }
class C{  public AbstractCompositeTransaction(){}  }
class C{  public static long rotateRight(long v,int distance){  return (v >>> distance) | (v << -distance);}  }
class C{  public int insertTest(TestCase test){  if (Properties.CALL_PROBABILITY <= 0) {    for (int i=0; i < testCases.size(); i++) {      if (test.isPrefix(testCases.get(i))) {        logger.info("This is a prefix of an existing test");        testCases.get(i).addAssertions(test);        return i;      } else {        if (testCases.get(i).isPrefix(test)) {          test.addAssertions(testCases.get(i));          testCases.set(i,test);          logger.info("We have a prefix of this one");          return i;        }      }    }  }  logger.info("Adding new test case:");  if (logger.isDebugEnabled()) {    logger.debug(test.toCode());  }  testCases.add(test);  return testCases.size() - 1;}  }
class C{  public static void printf(String fmt,int x){  System.out.print(new Format(fmt).format(x));}  }
class C{  public void post(CoapHandler handler,byte[] payload,int format,int accept){  asynchronous(accept(format(newPost().setURI(uri).setPayload(payload),format),accept),handler);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.BLOCK__STATEMENTS:    return getStatements();case GamlPackage.BLOCK__FUNCTION:  return getFunction();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void clear(){  clear(DEFAULT_CLEAR_COLOR);}  }
class C{  @Override protected void paintComponent(Graphics g){  super.paintComponent(g);  Graphics2D g2=(Graphics2D)g;  if (shouldDraw) {    drawDisplayListOn(g2);  }}  }
class C{  public File isAPKExist(Context context,UpdateResponse updateResponse){  String fileName=updateResponse.md5 + ".apk";  File parentPath=null;  try {    parentPath=getDownloadAPKParent();    if (parentPath == null) {      return null;    }    File apk=new File(parentPath,fileName);    if (apk.exists()) {      if (updateResponse.md5.equalsIgnoreCase(getFileMD5(apk))) {        return apk;      }    }  } catch (  Exception e) {    e.printStackTrace();    return null;  }  return null;}  }
class C{  public boolean isReceiveMobileNotification(){  return receiveMobileNotification;}  }
class C{  public void stateChanged(ChangeEvent e){  if (ignoreUpdate) {    return;  }  double value=(double)(1800 - setpointSlider.getValue()) / 10;  setSetPoint(value);  sim.setSetPoint(value);}  }
class C{  public static int hash(double value){  long bits=Double.doubleToLongBits(value);  return (int)(bits ^ (bits >>> 32));}  }
class C{  @Override public UUID sessionId(){  if (sessionId == null)   sessionId=UUID.randomUUID();  return sessionId;}  }
class C{  public OMWarpingImage(int[] pix,int width,int height,GeoCoordTransformation transform,DataBounds imageBounds){  setWarp(pix,width,height,transform,imageBounds);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static int hash(int h){  h+=(h << 15) ^ 0xffffcd7d;  h^=(h >>> 10);  h+=(h << 3);  h^=(h >>> 6);  h+=(h << 2) + (h << 14);  return h ^ (h >>> 16);}  }
class C{  public FFMPEGTranscodeJob(MediaFile mf,String inFormatName,sage.media.format.ContainerFormat targetFormat,boolean replaceOriginal,java.io.File inDestFile,long inClipStartTime,long inClipDuration){  super(mf,inFormatName,targetFormat,replaceOriginal,inDestFile,inClipStartTime,inClipDuration);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  for (  E e : this)   s.writeObject(e);  s.writeObject(null);}  }
class C{  public NGramTokenizer(){  this(DEFAULT_MIN_NGRAM_SIZE,DEFAULT_MAX_NGRAM_SIZE);}  }
class C{  private float[] rayPick(float touchX,float touchY){  float screenW=mViewportData[2] - mViewportData[0];  float screenH=mViewportData[3] - mViewportData[1];  touchY=screenH - touchY;  float[] normalizedVector=new float[4];  normalizedVector[0]=touchX * 2 / screenW - 1;  normalizedVector[1]=touchY * 2 / screenH - 1;  normalizedVector[2]=0f;  normalizedVector[3]=1f;  float[] invertedMatrix=new float[16];  float[] pickedPoint=new float[4];  float[] vpMatrix=new float[16];  Matrix.multiplyMM(vpMatrix,0,mProjectMatrix,0,mViewMatrix,0);  Matrix.invertM(invertedMatrix,0,vpMatrix,0);  Matrix.multiplyMV(pickedPoint,0,invertedMatrix,0,normalizedVector,0);  return new float[]{pickedPoint[0] / pickedPoint[3],pickedPoint[1] / pickedPoint[3],pickedPoint[2] / pickedPoint[3]};}  }
class C{  @Override public R scan(DocTree tree,P p){  if (tree == null)   return null;  DocTreePath prev=path;  path=new DocTreePath(path,tree);  try {    return tree.accept(this,p);  }  finally {    path=prev;  }}  }
class C{  public static final void sendToAllAround(IMessage message,int dimension,double x,double y,double z,double range){  PacketDispatcher.sendToAllAround(message,new NetworkRegistry.TargetPoint(dimension,x,y,z,range));}  }
class C{  protected void loadAgent(){  mv.visitFieldInsn(Opcodes.GETSTATIC,IInstrumenterConstant.AGENT_INTERNAL_NAME,"agent",IInstrumenterConstant.IAGENT_DESCRIPTOR);}  }
class C{  @ServiceActivator(inputChannel=Sink.INPUT) public void taskLauncherSink(TaskLaunchRequest request){  launchTask(request);}  }
class C{  private long previous(long qAddr){  return mem.readLong(qAddr + 11);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:17.354 -0400",hash_original_method="5D2797A6208FC694571C407EACBBC5A4",hash_generated_method="E680E45CF3598570AE16BFCD7E30D451") public boolean equals(Object other){  if (this == other) {    return true;  }  if (!(other instanceof EllipticCurve)) {    return false;  }  EllipticCurve otherEc=(EllipticCurve)other;  return this.field.equals(otherEc.field) && this.a.equals(otherEc.a) && this.b.equals(otherEc.b)&& Arrays.equals(this.seed,otherEc.seed);}  }
class C{  public boolean isRedirectingOutput(){  return this.redirectOutput;}  }
class C{  public static void assertEquals(double expected,double actual){  assertEquals("",expected,actual);}  }
class C{  public Object call(final Object... params){  try {    return RefMethod.this.method.invoke(this.e,params);  } catch (  final Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public AttachOperationFailedException(String message){  super(message);}  }
class C{  public void put(String key,Object value){  mRequestInformation.put(key,value);}  }
class C{  public static String format(Integer i){  if (i == null)   return null;  return i.toString();}  }
class C{  @LargeTest public void testMountSingleEncryptedObb(){  mFile=createObbFile(OBB_FILE_3_ENCRYPTED,R.raw.obb_enc_file100_orig3);  String filePath=mFile.getAbsolutePath();  mountObb(filePath,OBB_FILE_3_PASSWORD,OnObbStateChangeListener.MOUNTED);  verifyObb3Contents(filePath);  unmountObb(filePath,DONT_FORCE);}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  private void doList() throws PageException, SearchException {  required("collection",action,"name",name);  pageContext.setVariable(name,getSearchEngine().getCollectionsAsQuery());}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public static int size(StringBuffer buffer){  return buffer.length();}  }
class C{  protected final void BOOLEAN_CMP_INT_IMM(RegisterOperand def,ConditionOperand cmp,RegisterOperand one,IntConstantOperand two){  Register t1, t=regpool.getInteger();  Register zero=regpool.getPhysicalRegisterSet().asPPC().getTemp();  int value=two.value;switch (cmp.value) {case ConditionOperand.EQUAL:    if (value == 0) {      EMIT(MIR_Unary.create(PPC_CNTLZW,I(t),one));    } else {      EMIT(MIR_Binary.create(PPC_SUBFIC,I(t),one,IC(value)));      EMIT(MIR_Unary.create(PPC_CNTLZW,I(t),I(t)));    }  EMIT(MIR_Binary.create(PPC_SRWI,def,I(t),IC(LOG_BITS_IN_INT)));break;case ConditionOperand.NOT_EQUAL:if (value == 0) {if (VM.BuildFor64Addr) {  t1=regpool.getAddress();  EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one));  EMIT(MIR_Binary.create(PPC_ADDIC,A(t),A(t1),IC(-1)));  EMIT(MIR_Binary.create(PPC_SUBFE,def,A(t),A(t1)));} else {  EMIT(MIR_Binary.create(PPC_ADDIC,A(t),one,IC(-1)));  EMIT(MIR_Binary.create(PPC_SUBFE,def,A(t),one.copyRO()));}} else {t1=regpool.getAddress();if (VM.BuildFor64Addr) {  EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one));  EMIT(MIR_Binary.create(PPC_SUBFIC,A(t1),A(t1),IC(value)));} else {  EMIT(MIR_Binary.create(PPC_SUBFIC,A(t1),one,IC(value)));}EMIT(MIR_Binary.create(PPC_ADDIC,A(t),A(t1),IC(-1)));EMIT(MIR_Binary.create(PPC_SUBFE,def,A(t),A(t1)));}break;case ConditionOperand.LESS:if (value == 0) {EMIT(MIR_Binary.create(PPC_SRWI,def,one,IC(BITS_IN_INT - 1)));} else if (value > 0) {EMIT(MIR_Binary.create(PPC_SRWI,I(t),one,IC(BITS_IN_INT - 1)));if (VM.BuildFor64Addr) {t1=regpool.getAddress();EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one.copyRO()));EMIT(MIR_Binary.create(PPC_SUBFIC,A(zero),A(t1),IC(value - 1)));} else {EMIT(MIR_Binary.create(PPC_SUBFIC,A(zero),one.copyRO(),IC(value - 1)));}EMIT(MIR_Unary.create(PPC_ADDZE,def,I(t)));} else if (value != 0xFFFF8000) {EMIT(MIR_Binary.create(PPC_SRWI,I(t),one,IC(BITS_IN_INT - 1)));if (VM.BuildFor64Addr) {t1=regpool.getAddress();EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one.copyRO()));EMIT(MIR_Binary.create(PPC_SUBFIC,A(zero),A(t1),IC(value - 1)));} else {EMIT(MIR_Binary.create(PPC_SUBFIC,A(zero),one.copyRO(),IC(value - 1)));}EMIT(MIR_Unary.create(PPC_ADDME,def,I(t)));} else {t1=regpool.getAddress();EMIT(MIR_Binary.create(PPC_SRWI,I(t),one,IC(BITS_IN_INT - 1)));EMIT(MIR_Unary.create(PPC_LDI,A(t1),IC(0xFFFF8000)));EMIT(MIR_Binary.create(PPC_ADDI,A(t1),A(t1),IC(-1)));if (VM.BuildFor64Addr) {Register t2=regpool.getAddress();EMIT(MIR_Unary.create(PPC64_EXTSW,A(t2),one.copyRO()));EMIT(MIR_Binary.create(PPC_SUBFC,I(zero),A(t2),I(t1)));} else {EMIT(MIR_Binary.create(PPC_SUBFC,I(zero),one.copyRO(),I(t1)));}EMIT(MIR_Unary.create(PPC_ADDME,def,I(t)));}break;case ConditionOperand.GREATER:if (value == 0) {EMIT(MIR_Unary.create(PPC_NEG,I(t),one));EMIT(MIR_Binary.create(PPC_ANDC,I(t),I(t),one.copyRO()));EMIT(MIR_Binary.create(PPC_SRWI,def,I(t),IC(BITS_IN_INT - 1)));} else if (value >= 0) {EMIT(MIR_Binary.create(PPC_SRAWI,I(t),one,IC(BITS_IN_INT - 1)));if (VM.BuildFor64Addr) {t1=regpool.getAddress();EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one.copyRO()));EMIT(MIR_Binary.create(PPC_ADDIC,A(zero),A(t1),IC(-value - 1)));} else {EMIT(MIR_Binary.create(PPC_ADDIC,A(zero),one.copyRO(),IC(-value - 1)));}EMIT(MIR_Unary.create(PPC_ADDZE,def,I(t)));} else {t1=regpool.getInteger();EMIT(MIR_Binary.create(PPC_SRAWI,I(t),one,IC(BITS_IN_INT - 1)));if (VM.BuildFor64Addr) {EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one.copyRO()));EMIT(MIR_Binary.create(PPC_ADDIC,A(zero),A(t1),IC(-value - 1)));} else {EMIT(MIR_Binary.create(PPC_ADDIC,A(zero),one.copyRO(),IC(-value - 1)));}EMIT(MIR_Unary.create(PPC_LDI,I(t1),IC(1)));EMIT(MIR_Binary.create(PPC_ADDE,def,I(t),I(t1)));}break;case ConditionOperand.LESS_EQUAL:if (value == 0) {EMIT(MIR_Binary.create(PPC_ADDI,I(t),one,IC(-1)));EMIT(MIR_Binary.create(PPC_OR,I(t),I(t),one.copyRO()));EMIT(MIR_Binary.create(PPC_SRWI,def,I(t),IC(BITS_IN_INT - 1)));} else if (value >= 0) {EMIT(MIR_Binary.create(PPC_SRWI,I(t),one,IC(BITS_IN_INT - 1)));if (VM.BuildFor64Addr) {t1=regpool.getAddress();EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one.copyRO()));EMIT(MIR_Binary.create(PPC_SUBFIC,I(zero),A(t1),IC(value)));} else {EMIT(MIR_Binary.create(PPC_SUBFIC,A(zero),one.copyRO(),IC(value)));}EMIT(MIR_Unary.create(PPC_ADDZE,def,I(t)));} else {EMIT(MIR_Binary.create(PPC_SRWI,I(t),one,IC(BITS_IN_INT - 1)));if (VM.BuildFor64Addr) {t1=regpool.getAddress();EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one.copyRO()));EMIT(MIR_Binary.create(PPC_SUBFIC,I(zero),A(t1),IC(value)));} else {EMIT(MIR_Binary.create(PPC_SUBFIC,A(zero),one.copyRO(),IC(value)));}EMIT(MIR_Unary.create(PPC_ADDME,def,I(t)));}break;case ConditionOperand.GREATER_EQUAL:if (value == 0) {EMIT(MIR_Binary.create(PPC_SRWI,I(t),one,IC(BITS_IN_INT - 1)));EMIT(MIR_Binary.create(PPC_XORI,def,I(t),IC(1)));} else if (value >= 0) {EMIT(MIR_Binary.create(PPC_SRAWI,I(t),one,IC(BITS_IN_INT - 1)));if (VM.BuildFor64Addr) {t1=regpool.getAddress();EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one.copyRO()));EMIT(MIR_Binary.create(PPC_ADDIC,A(zero),A(t1),IC(-value)));} else {EMIT(MIR_Binary.create(PPC_ADDIC,A(zero),one.copyRO(),IC(-value)));}EMIT(MIR_Unary.create(PPC_ADDZE,def,I(t)));} else if (value != 0xFFFF8000) {t1=regpool.getInteger();EMIT(MIR_Unary.create(PPC_LDI,I(t1),IC(1)));EMIT(MIR_Binary.create(PPC_SRAWI,I(t),one,IC(BITS_IN_INT - 1)));if (VM.BuildFor64Addr) {t1=regpool.getAddress();EMIT(MIR_Unary.create(PPC64_EXTSW,A(t1),one.copyRO()));EMIT(MIR_Binary.create(PPC_ADDIC,A(zero),A(t1),IC(-value)));} else {EMIT(MIR_Binary.create(PPC_ADDIC,A(zero),one.copyRO(),IC(-value)));}EMIT(MIR_Binary.create(PPC_ADDE,def,I(t),I(t1)));} else {t1=regpool.getInteger();EMIT(MIR_Unary.create(PPC_LDI,I(t1),IC(1)));EMIT(MIR_Binary.create(PPC_SRAWI,I(t),one,IC(BITS_IN_INT - 1)));EMIT(MIR_Binary.create(PPC_SLWI,I(zero),I(t1),IC(15)));if (VM.BuildFor64Addr) {Register t2=regpool.getAddress();EMIT(MIR_Unary.create(PPC64_EXTSW,A(t2),one.copyRO()));EMIT(MIR_Binary.create(PPC_ADDC,I(zero),A(t2),I(zero)));} else {EMIT(MIR_Binary.create(PPC_ADDC,I(zero),one.copyRO(),I(zero)));}EMIT(MIR_Binary.create(PPC_ADDE,def,I(t),I(t1)));}break;case ConditionOperand.HIGHER:EMIT(BooleanCmp.create(BOOLEAN_CMP_INT,def,one,two,cmp,null));break;case ConditionOperand.LOWER:EMIT(BooleanCmp.create(BOOLEAN_CMP_INT,def,one,two,cmp,null));break;case ConditionOperand.HIGHER_EQUAL:EMIT(BooleanCmp.create(BOOLEAN_CMP_INT,def,one,two,cmp,null));break;case ConditionOperand.LOWER_EQUAL:EMIT(BooleanCmp.create(BOOLEAN_CMP_INT,def,one,two,cmp,null));break;default :EMIT(BooleanCmp.create(BOOLEAN_CMP_INT,def,one,two,cmp,null));}}  }
class C{  public void dispose(IoSession session) throws Exception {}  }
class C{  private void sendEntity(){  SendPacket packet=mPacket;  if (packet != null) {    byte[] bytes=getBuffer();    int count=packet.read(bytes,0,mSender.getSendBufferSize());    mCursor+=count;    sendAsync(0,count);    notifyProgress();  }}  }
class C{  public static void saveToSdCard(List<Entry> entries,String path){  File sdcard=Environment.getExternalStorageDirectory();  File saved=new File(sdcard,path);  if (!saved.exists()) {    try {      saved.createNewFile();    } catch (    IOException e) {      Log.e(LOG,e.toString());    }  }  try {    BufferedWriter buf=new BufferedWriter(new FileWriter(saved,true));    for (    Entry e : entries) {      buf.append(e.getVal() + "#" + e.getXIndex());      buf.newLine();    }    buf.close();  } catch (  IOException e) {    Log.e(LOG,e.toString());  }}  }
class C{  protected void registerElementNode(double version,String uri,String localName,Class<? extends FXGNode> nodeClass){  FXGVersionHandler vHandler=FXGVersionHandlerRegistry.getVersionHandler(version);  if (vHandler != null) {    HashMap<String,Class<? extends FXGNode>> elementNodes=new HashMap<String,Class<? extends FXGNode>>(4);    elementNodes.put(localName,nodeClass);    vHandler.registerElementNodes(uri,elementNodes);  } else {    throw new FXGException("FXGVersionHandlerNotRegistered",version);  }}  }
class C{  public static <T>LinkedBindingBuilder<T> bind(Binder binder,Class<T> type){  binder.disableCircularProxies();  return bind(binder,TypeLiteral.get(type));}  }
class C{  public GeneralException(String msg,Throwable nested){  super(msg,nested);}  }
class C{  ElemDesc(int flags){  m_flags=flags;}  }
class C{  public void beginStep(int step,String stepTitle,Logging logger){  setProcessed(step - 1);  this.stepTitle=stepTitle;  logger.progress(this);}  }
class C{  public Bus(){  this(DEFAULT_IDENTIFIER);}  }
class C{  public void pushViewPositionToModel(){  Point2D p=this.getGlobalTranslation();  getNeuron().setX(p.getX());  getNeuron().setY(p.getY());}  }
class C{  public static int hash(int value){  return value;}  }
class C{  public void doSave(){  try {    this.setStatusBarMessage("Save in progress ...",BasePanel.INFORMATION);    int selectedRow=m_table.getSelectedRow();    String className="org.trade.persistent.dao." + ((ReferenceTable)refTableEditorComboBox.getSelectedItem()).getCode();    for (ListIterator<Aspect> itemIter=m_aspects.getAspect().listIterator(); itemIter.hasNext(); ) {      Aspect item=itemIter.next();      if (item.isDirty()) {        item=m_tradePersistentModel.persistAspect(item);      }      itemIter.set(item);    }    m_aspects.setDirty(false);    Aspects aspects=m_tradePersistentModel.findAspectsByClassName(className);    for (    Aspect currAspect : aspects.getAspect()) {      boolean exists=false;      for (      Aspect aspect : m_aspects.getAspect()) {        if (currAspect.getId().equals(aspect.getId())) {          exists=true;          break;        }      }      if (!exists)       m_tradePersistentModel.removeAspect(currAspect);    }    DBTableLookupServiceProvider.clearLookup();    doRefresh();    if (selectedRow > -1)     m_table.setRowSelectionInterval(selectedRow,selectedRow);    this.setStatusBarMessage("Save complete. Note for changed to take effect the Tradinday Tab Search must be re-run.",BasePanel.INFORMATION);  } catch (  Exception ex) {    this.setErrorMessage("Error saving item.",ex.getMessage(),ex);  }}  }
class C{  public void squareThisPreCalc(){  polynomial.squareThisPreCalc();  reduceThis();}  }
class C{  public StemmerOverrideFilterFactory(Map<String,String> args){  super(args);  dictionaryFiles=get(args,"dictionary");  ignoreCase=getBoolean(args,"ignoreCase",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void testConstructionWithNullDocument() throws Exception {  try {    new ApplicationXml(null,null);    fail("Expected NullPointerException");  } catch (  NullPointerException npe) {  }}  }
class C{  public static int generateRandomNumber(){  final Random randomGenerator=new Random();  return randomGenerator.nextInt(11) + 5;}  }
class C{  public void checkSubTree(final TreePath path){  addToCheckedPathsSet(path);  removeFromGreyedPathsSet(path);  Object node=path.getLastPathComponent();  int childrenNumber=this.model.getChildCount(node);  for (int childIndex=0; childIndex < childrenNumber; childIndex++) {    TreePath childPath=path.pathByAddingChild(this.model.getChild(node,childIndex));    checkSubTree(childPath);  }}  }
class C{  private static int addToBin(LiveExprNode check,Vect bin){  if (check == null) {    return -1;  }  int len=bin.size();  int idx;  for (idx=0; idx < len; idx++) {    LiveExprNode ln=(LiveExprNode)bin.elementAt(idx);    if (check.equals(ln)) {      break;    }  }  if (idx >= len) {    bin.addElement(check);  }  return idx;}  }
class C{  public static URL[] parseClassPath(){  return parseClassPath(System.getProperty("java.class.path"));}  }
class C{  public void processObjectPath(CIMObjectPath path){  processObjectPath("",path);}  }
class C{  protected ResolvedJavaMethod findMethod(Class<?> declaringClass,String name){  Method reflectionMethod=null;  for (  Method m : declaringClass.getDeclaredMethods()) {    if (m.getName().equals(name)) {      assert reflectionMethod == null : "More than one method with name " + name + " in class "+ declaringClass.getName();      reflectionMethod=m;    }  }  assert reflectionMethod != null : "No method with name " + name + " in class "+ declaringClass.getName();  return metaAccess.lookupJavaMethod(reflectionMethod);}  }
class C{  public void warning(TransformerException exception) throws TransformerException {  PrintWriter pw=getErrorWriter();  printLocation(pw,exception);  pw.println(exception.getMessage());}  }
class C{  public void add(XMLX509IssuerSerial xmlX509IssuerSerial){  this.constructionElement.appendChild(xmlX509IssuerSerial.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  protected void changeId(int newId){  m_id=newId;}  }
class C{  public static ComponentUI createUI(JComponent b){  return new BESliderUI((JSlider)b);}  }
class C{  private void ensureSingularEnumValueDescriptor(FieldDescriptor field,Object value){  if (value == null) {    throw new NullPointerException();  }  if (!(value instanceof EnumValueDescriptor)) {    throw new IllegalArgumentException("DynamicMessage should use EnumValueDescriptor to set Enum Value.");  }  if (field.getEnumType() != ((EnumValueDescriptor)value).getType()) {    throw new IllegalArgumentException("EnumValueDescriptor doesn't much Enum Field.");  }}  }
class C{  public final boolean isCompatibleValue(Object val){  if (val instanceof Integer) {    int ival=((Integer)val).intValue();    return ival >= 100 && ival <= 250;  }  return false;}  }
class C{  private Map<Class<? extends DataObject>,DataObject> toMap(DataObject[] objects){  Map<Class<? extends DataObject>,DataObject> objectsMap=new HashMap<Class<? extends DataObject>,DataObject>();  for (  DataObject object : objects) {    if (object != null) {      objectsMap.put(object.getClass(),object);    }  }  return objectsMap;}  }
class C{  public AACPlayer(){  this(null);}  }
class C{  public void testFlattening() throws IOException {  TokenBuffer buf1=new TokenBuffer(null);  buf1.writeStartArray();  TokenBuffer buf2=new TokenBuffer(null);  buf2.writeString("a");  TokenBuffer buf3=new TokenBuffer(null);  buf3.writeNumber(13);  TokenBuffer buf4=new TokenBuffer(null);  buf4.writeEndArray();  JsonParserSequence seq1=JsonParserSequence.createFlattened(buf1.asParser(),buf2.asParser());  assertEquals(2,seq1.containedParsersCount());  JsonParserSequence seq2=JsonParserSequence.createFlattened(buf3.asParser(),buf4.asParser());  assertEquals(2,seq2.containedParsersCount());  JsonParserSequence combo=JsonParserSequence.createFlattened(seq1,seq2);  assertEquals(4,combo.containedParsersCount());  assertToken(JsonToken.START_ARRAY,combo.nextToken());  assertToken(JsonToken.VALUE_STRING,combo.nextToken());  assertEquals("a",combo.getText());  assertToken(JsonToken.VALUE_NUMBER_INT,combo.nextToken());  assertEquals(13,combo.getIntValue());  assertToken(JsonToken.END_ARRAY,combo.nextToken());  assertNull(combo.nextToken());}  }
class C{  protected int nextInEnumeration() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '|':nextChar();return LexicalUnits.PIPE;case ')':nextChar();context=ATTLIST_CONTEXT;return LexicalUnits.RIGHT_BRACE;default :return readNmtoken();}}  }
class C{  public static <T>SuperTypesList<T> newSuperTypesList(Comparator<T> comparator){  return new SuperTypesList<>(comparator);}  }
class C{  public T caseAnonymous_derivedAttribute_3_(Anonymous_derivedAttribute_3_ object){  return null;}  }
class C{  protected BasePeriod(ReadableDuration duration,ReadableInstant endInstant,PeriodType type){  super();  type=checkPeriodType(type);  long durationMillis=DateTimeUtils.getDurationMillis(duration);  long endMillis=DateTimeUtils.getInstantMillis(endInstant);  long startMillis=FieldUtils.safeSubtract(endMillis,durationMillis);  Chronology chrono=DateTimeUtils.getInstantChronology(endInstant);  iType=type;  iValues=chrono.get(this,startMillis,endMillis);}  }
class C{  public void addSubTrees(Taxonomy source,Collection<Integer> ids){  for (  final Integer taxId : ids) {    addSubTree(source,taxId);  }}  }
class C{  private static String urlEncode(final String text) throws UnsupportedEncodingException {  return URLEncoder.encode(text,"UTF-8");}  }
class C{  private RunnableScheduledFuture<?> peekExpired(){  RunnableScheduledFuture<?> first=queue[0];  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  public void addStrokePaint(PDFPaint p){  addCommand(new PDFStrokePaintCmd(p));}  }
class C{  public boolean textboxKeyTyped(char p_146201_1_,int p_146201_2_){  if (!isFocused)   return false; else   if (GuiScreen.func_175278_g(p_146201_2_)) {    setCursorPositionEnd();    setSelectionPos(0);    return true;  } else   if (GuiScreen.func_175280_f(p_146201_2_)) {    GuiScreen.setClipboardString(getSelectedText());    return true;  } else   if (GuiScreen.func_175279_e(p_146201_2_)) {    if (isEnabled)     writeText(GuiScreen.getClipboardString());    return true;  } else   if (GuiScreen.func_175277_d(p_146201_2_)) {    GuiScreen.setClipboardString(getSelectedText());    if (isEnabled)     writeText("");    return true;  } else switch (p_146201_2_) {case 14:    if (GuiScreen.isCtrlKeyDown()) {      if (isEnabled)       deleteWords(-1);    } else     if (isEnabled)     deleteFromCursor(-1);  return true;case 199:if (GuiScreen.isShiftKeyDown()) setSelectionPos(0); else setCursorPositionZero();return true;case 203:if (GuiScreen.isShiftKeyDown()) {if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(-1,getSelectionEnd())); else setSelectionPos(getSelectionEnd() - 1);} else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(-1)); else moveCursorBy(-1);return true;case 205:if (GuiScreen.isShiftKeyDown()) {if (GuiScreen.isCtrlKeyDown()) setSelectionPos(getNthWordFromPos(1,getSelectionEnd())); else setSelectionPos(getSelectionEnd() + 1);} else if (GuiScreen.isCtrlKeyDown()) setCursorPosition(getNthWordFromCursor(1)); else moveCursorBy(1);return true;case 207:if (GuiScreen.isShiftKeyDown()) setSelectionPos(text.length()); else setCursorPositionEnd();return true;case 211:if (GuiScreen.isCtrlKeyDown()) {if (isEnabled) deleteWords(1);} else if (isEnabled) deleteFromCursor(1);return true;default :if (EmailAllowedCharacters.isAllowedCharacter(p_146201_1_)) {if (isEnabled) writeText(Character.toString(p_146201_1_));return true;} else return false;}}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void save(){  this.bot.log(this,"Saving",Level.FINE);synchronized (this.bot.memory()) {    try {      this.entityManager.getTransaction().begin();      this.entityManager.getTransaction().commit();      resetSize();    } catch (    RuntimeException failed) {      this.bot.log(this,failed);      if (this.entityManager.getTransaction().isActive()) {        this.entityManager.getTransaction().rollback();      }      clear();      throw failed;    }  }  ((DatabaseNetwork)this.bot.memory().getLongTermMemory()).resetSize();}  }
class C{  public static PidProcess newPidProcess(int pid){  if (SystemUtils.IS_OS_WINDOWS) {    return new WindowsProcess(pid);  }  if (SystemUtils.IS_OS_SOLARIS || SystemUtils.IS_OS_SUN_OS) {    return new SolarisProcess(pid);  }  return new UnixProcess(pid);}  }
class C{  public static Object fromIntValue(int value){  return BigInteger.valueOf(value).toByteArray();}  }
class C{  public void write(char c) throws IOException {  if (_byteBuffer == null)   throw new IOException("Writer closed");  if ((c < 0xd800) || (c > 0xdfff)) {    write((int)c);  } else   if (c < 0xdc00) {    _highSurrogate=c;  } else {    int code=((_highSurrogate - 0xd800) << 10) + (c - 0xdc00) + 0x10000;    write(code);  }}  }
class C{  public Apply(final Expression func,final Expression arg){  this.func=func;  this.arg=arg;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @SuppressWarnings("unchecked") public <T extends SubSystem>T addSystemIfAbsent(Class<?> systemApi,T system){  SubSystem oldService=_systemMap.putIfAbsent(systemApi,system);  if (oldService != null) {    return (T)oldService;  }  _pendingStart.add(system);  if (_lifecycle.isActive()) {    startSystems();  }  return null;}  }
class C{  public boolean hasSkyLight(){  return skyLight != null;}  }
class C{  public static boolean isInfinite(float v){  return false;}  }
class C{  public JCExpression Ident(JCVariableDecl param){  return Ident(param.sym);}  }
class C{  public static void markAsReplaced(Spannable content,int start,int end,String original){  Replaced[] repl=content.getSpans(0,content.length(),Replaced.class);  for (int a=0; a < repl.length; a++) {    content.removeSpan(repl[a]);  }  int len=original.length();  char[] orig=new char[len];  original.getChars(0,len,orig,0);  content.setSpan(new Replaced(orig),start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public void performUpdate(){  getUpdater().performUpdate();}  }
class C{  public boolean routeIsOccupied(){  for (int i=1; i < _savedOrders.size(); i++) {    OBlock block=_savedOrders.get(i).getBlock();    if ((block.getState() & OBlock.OCCUPIED) != 0) {      return true;    }  }  return false;}  }
class C{  @NonNull public static Animator moveBy(float x,float y){  return moveBy(x,y,0);}  }
class C{  public int newLocal(final Type type){  Object t;switch (type.getSort()) {case Type.BOOLEAN:case Type.CHAR:case Type.BYTE:case Type.SHORT:case Type.INT:    t=Opcodes.INTEGER;  break;case Type.FLOAT:t=Opcodes.FLOAT;break;case Type.LONG:t=Opcodes.LONG;break;case Type.DOUBLE:t=Opcodes.DOUBLE;break;case Type.ARRAY:t=type.getDescriptor();break;default :t=type.getInternalName();break;}int local=newLocalMapping(type);setLocalType(local,type);setFrameLocal(local,t);changed=true;return local;}  }
class C{  private void mergeReleased(List<Segment> segments,List<OffsetPredicate> predicates,Segment compactSegment){  for (int i=0; i < segments.size(); i++) {    mergeReleasedEntries(segments.get(i),predicates.get(i),compactSegment);  }}  }
class C{  public static void testPeriodOpen(Properties ctx,Timestamp dateAcct,String docBaseType,int AD_Org_ID) throws PeriodClosedException {  if (!MPeriod.isOpen(ctx,dateAcct,docBaseType,AD_Org_ID)) {    throw new PeriodClosedException(dateAcct,docBaseType);  }}  }
class C{  private int run(){  if (cur == -1) {    return -1;  }  boolean leaf=false;  while (true) {    while (cur != 0) {      if (sc[cur] == 0xFFFF) {        leaf=true;        break;      }      ns.push(new Item((char)cur,'\u0000'));      if (sc[cur] == 0) {        leaf=true;        break;      }      cur=lo[cur];    }    if (leaf) {      break;    }    cur=up();    if (cur == -1) {      return -1;    }  }  StringBuilder buf=new StringBuilder(ks.toString());  if (sc[cur] == 0xFFFF) {    int p=lo[cur];    while (kv.get(p) != 0) {      buf.append(kv.get(p++));    }  }  curkey=buf.toString();  return 0;}  }
class C{  public static void FindLabelAlignments(Token[][] spec){  if (!TokenizeSpec.hasPcal) {    return;  }  int pcalStartLine=TokenizeSpec.pcalStart.line + 1;  int pcalEndLine=TokenizeSpec.pcalEnd.line;  int curLabelLine=pcalStartLine;  while ((curLabelLine <= pcalEndLine) && (curLabelLine < spec.length)) {    if ((spec[curLabelLine].length > 1) && (spec[curLabelLine][0].type == Token.PCAL_LABEL)) {      Token tok=spec[curLabelLine][1];      int alignCol=tok.column;      int curLine=curLabelLine + 1;      int alignLine=curLabelLine;      int alignItem=1;      boolean notDone=true;      while (notDone && (curLine < spec.length)) {        int curItem=0;        boolean shouldSkip=false;        if (spec[curLine].length != 0) {          if (spec[curLine][0].type == Token.PCAL_LABEL) {            if (spec[curLine].length > 1) {              curItem=1;            } else {              notDone=(spec[curLine][0].column >= alignCol);              shouldSkip=true;            }          } else {          }          if (!shouldSkip) {            if (spec[curLine][curItem].column < alignCol) {              notDone=false;            } else             if (spec[curLine][curItem].column == alignCol) {              spec[alignLine][alignItem].belowAlign=new Position(curLine,curItem);              spec[curLine][curItem].aboveAlign=new Position(alignLine,alignItem);              alignLine=curLine;              alignItem=curItem;            }          }        }        curLine++;        if ((curLine > pcalEndLine) || (curLine >= spec.length)) {          notDone=false;        }      }      if ((tok.aboveAlign.line != -1) && (tok.aboveAlign.toToken(spec).belowAlign.equals(new Position(curLabelLine,1)))) {      } else {        curLine=curLabelLine - 1;        alignLine=curLabelLine;        alignItem=1;        notDone=true;        while (notDone) {          if ((spec[curLine].length > 0) && (spec[curLine][0].column <= alignCol) && ((spec[curLine][0].type != Token.PCAL_LABEL) || ((spec[curLine].length > 1) && (spec[curLine][1].column <= alignCol)))) {            if (spec[curLine][0].column == alignCol) {              spec[alignLine][alignItem].aboveAlign=new Position(curLine,0);              spec[curLine][0].belowAlign=new Position(alignLine,alignItem);              alignLine=curLine;              alignItem=0;            } else             if (spec[alignLine][alignItem].aboveAlign.line == -1) {              int item=0;              while ((item < spec[curLine].length) && (spec[curLine][item].column <= alignCol)) {                item++;              }              item--;              Token altok=null;              if (item > 0) {                altok=spec[curLine][item - 1];              }              if ((altok != null) && ((altok.type == Token.PCAL_LABEL) || ((altok.type == Token.BUILTIN) && BuiltInSymbols.IsBuiltInSymbol(altok.string,true) && !BuiltInSymbols.IsBuiltInSymbol(altok.string,false)))) {                spec[alignLine][alignItem].aboveAlign=new Position(curLine,item);                if (spec[curLine][item].column == alignCol) {                  spec[curLine][item].belowAlign=new Position(alignLine,alignItem);                }              }              notDone=false;            } else {              notDone=false;            }          }          curLine--;          if (curLine < pcalStartLine) {            notDone=false;          }        }      }    }    curLabelLine++;  }}  }
class C{  public boolean isShowMatch(){  return showMatch;}  }
class C{  private boolean checkRoomMemberStatus(){  mRoomMember=null;  if (null != mRoom) {    Collection<RoomMember> members=mRoom.getMembers();    for (    RoomMember member : members) {      if (member.getUserId().equals(mMemberId)) {        mRoomMember=member;        break;      }    }  }  return (null == mRoom) || (null != mRoomMember);}  }
class C{  private void convertAndFillByteBufferListToByteArrayList(List<byte[]> dictionaryValues,List<ByteBuffer> dictionaryValueBufferList){  for (  ByteBuffer buffer : dictionaryValueBufferList) {    int length=buffer.limit();    byte[] value=new byte[length];    buffer.get(value,0,value.length);    dictionaryValues.add(value);  }}  }
class C{  public RemoteResult(int rowNum,int rowLength){  m_probabilities=new double[rowLength][0];}  }
class C{  public void handleNotification(Notification notification){}  }
class C{  public void dump(int priority,String tag,String prefix){  AssetManager.dumpTheme(mTheme,priority,tag,prefix);}  }
class C{  public boolean hasArmedMASC(){  for (  Mounted m : getEquipment()) {    if (!m.isDestroyed() && !m.isBreached() && (m.getType() instanceof MiscType)&& m.getType().hasFlag(MiscType.F_MASC)&& (m.curMode().equals("Armed") || m.getType().hasSubType(MiscType.S_JETBOOSTER))) {      return true;    }  }  return false;}  }
class C{  public void clearSnapshot(String snapshotName){  List<File> snapshotDirs=directories.getCFDirectories();  Directories.clearSnapshot(snapshotName,snapshotDirs);}  }
class C{  public static DataAlgorithmRunner serializableInstance(){  return new DataAlgorithmRunner(GraphWrapper.serializableInstance(),new Parameters());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void cancel(){  cancelled=true;  setPageStatus(HTMLCallback.STATUS_CANCELLED);  cancelRedirectsAndImages();}  }
class C{  public static long readLong(final JSONObject jsonObject,final String key,final boolean required,final boolean notNull) throws JSONException {  if (required) {    return jsonObject.getLong(key);  }  if (notNull && jsonObject.isNull(key)) {    throw new JSONException(String.format(Locale.US,NULL_VALUE_FORMAT_OBJECT,key));  }  long value=0l;  if (!jsonObject.isNull(key)) {    value=jsonObject.getLong(key);  }  return value;}  }
class C{  public static Socket doInteraction(final HttpsURLConnection clientConnection,final ServerSocket serverSocket,final int responseCode,final boolean doAuthentication) throws Throwable {  clientConnection.setDoInput(true);  clientConnection.setConnectTimeout(TIMEOUT);  clientConnection.setReadTimeout(TIMEOUT);  ServerWork server=new ServerWork(serverSocket,responseCode,doAuthentication);  ClientConnectionWork client=new ClientConnectionWork(clientConnection);  ExecutorService executorService=Executors.newFixedThreadPool(2);  try {    Future<Void> serverFuture=executorService.submit(server);    Future<Void> clientFuture=executorService.submit(client);    Throwable t=null;    try {      serverFuture.get(30,TimeUnit.SECONDS);    } catch (    ExecutionException e) {      t=e.getCause();    }    try {      clientFuture.get(30,TimeUnit.SECONDS);    } catch (    ExecutionException e) {      if (t != null) {        t.printStackTrace();      }      t=e.getCause();    }    if (t != null) {      throw t;    }  } catch (  ExecutionException e) {    throw e.getCause();  } finally {    executorService.shutdown();  }  return server.peerSocket;}  }
class C{  @Override public TokenStream create(TokenStream input){  if (stopWords == null) {    throw new IllegalStateException("Managed stopwords not initialized correctly!");  }  return new StopFilter(input,stopWords);}  }
class C{  private void createNewFormat(int AD_Table_ID){  MPrintFormat pf=MPrintFormat.createFromTable(Env.getCtx(),AD_Table_ID);  launchReport(pf);}  }
class C{  public static int decodeLowBits(long l){  return (int)l;}  }
class C{  public boolean visit(PostfixExpression node){  return true;}  }
class C{  public void updateAttributeValue(String ns,String ln,AnimatableValue val){  if (ns == null) {    if (ln.equals(SVG_RX_ATTRIBUTE)) {      super.updateAttributeValue(ns,ln,val);      AbstractSVGAnimatedLength ry=(AbstractSVGAnimatedLength)getRy();      if (!ry.isSpecified()) {        super.updateAttributeValue(ns,SVG_RY_ATTRIBUTE,val);      }      return;    } else     if (ln.equals(SVG_RY_ATTRIBUTE)) {      super.updateAttributeValue(ns,ln,val);      AbstractSVGAnimatedLength rx=(AbstractSVGAnimatedLength)getRx();      if (!rx.isSpecified()) {        super.updateAttributeValue(ns,SVG_RX_ATTRIBUTE,val);      }      return;    }  }  super.updateAttributeValue(ns,ln,val);}  }
class C{  public static void initJNI(){  if (_isInitJNI.getAndSet(true)) {    return;  }  FilesystemPath jniFilePath=JniFilePath.create();  if (jniFilePath != null) {    DEFAULT_SCHEME_MAP.put("file",jniFilePath);    SchemeMap localMap=_localSchemeMap.get();    if (localMap != null)     localMap.put("file",jniFilePath);    localMap=_localSchemeMap.get(ClassLoader.getSystemClassLoader());    if (localMap != null)     localMap.put("file",jniFilePath);    VfsOld.PWD=jniFilePath;    VfsOld.setPwd(jniFilePath);  }}  }
class C{  public BalloonScroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  public void initialize(final Body b1,final Body b2,final Vec2 anchor){  bodyA=b1;  bodyB=b2;  bodyA.getLocalPointToOut(anchor,localAnchorA);  bodyB.getLocalPointToOut(anchor,localAnchorB);  referenceAngle=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  private PopulationUtils(){}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public void addRow(Expression[] expr){  list.add(expr);}  }
class C{  public static void run(AdSenseHost service,List<String> productCodes,String websiteUrl) throws Exception {  System.out.println("=================================================================");  System.out.println("Creating new association session");  System.out.println("=================================================================");  AssociationSession associationSession=service.associationsessions().start(productCodes,websiteUrl).execute();  System.out.printf("Association with ID \"%s\" and redirect URL \"%s\" was started.\n",associationSession.getId(),associationSession.getRedirectUrl());  System.out.println();}  }
class C{  protected void advanceToNextPage(){  getPageDelegate().advanceToNextPage();}  }
class C{  private CGraphZoomer(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.230 -0500",hash_original_method="07B15BCA74AC5BE2F84043AACB0A310C",hash_generated_method="B6DBA61B905A0FCCC76CA3CD0DA32EE0") public static int highestOneBit(int i){  i|=(i >> 1);  i|=(i >> 2);  i|=(i >> 4);  i|=(i >> 8);  i|=(i >> 16);  return i - (i >>> 1);}  }
class C{  private void addNotChargedParameterValues(XParameterIdData parameterIdData,Map<TimeSlice,LinkedList<XParameterPeriodValue>> valuesPerSlice,Map<XParameterIdData,Set<XParameterPeriodValue>> notChargedParameterValues){  Set<XParameterPeriodValue> parValuesInSlices=new HashSet<XParameterPeriodValue>();  for (  List<XParameterPeriodValue> parValues : valuesPerSlice.values()) {    parValuesInSlices.addAll(parValues);  }  Set<XParameterPeriodValue> notChargedParValueSet=new HashSet<XParameterPeriodValue>(parameterIdData.getPeriodValues());  notChargedParValueSet.removeAll(parValuesInSlices);  if (notChargedParValueSet.size() > 0) {    notChargedParameterValues.put(parameterIdData,notChargedParValueSet);  }}  }
class C{  static MqttConfig newConfig(Options options){  MqttConfig config=new MqttConfig(options.get(OPT_SERVER_URI),options.get(OPT_CLIENT_ID));  if (options.get(OPT_CLEAN_SESSION) != null)   config.setCleanSession(options.get(OPT_CLEAN_SESSION));  if (options.get(OPT_CN_TIMEOUT_SEC) != null)   config.setConnectionTimeout(options.get(OPT_CN_TIMEOUT_SEC));  if (options.get(OPT_ACTION_TIMEOUT_MILLIS) != null)   config.setActionTimeToWaitMillis(options.get(OPT_ACTION_TIMEOUT_MILLIS));  if (options.get(OPT_IDLE_TIMEOUT_SEC) != null)   config.setIdleTimeout(options.get(OPT_IDLE_TIMEOUT_SEC));  if (options.get(OPT_IDLE_RECONNECT_INTERVAL_SEC) != null)   config.setSubscriberIdleReconnectInterval(options.get(OPT_IDLE_RECONNECT_INTERVAL_SEC));  if (options.get(OPT_USER_ID) != null)   config.setUserName(options.get(OPT_USER_ID));  if (options.get(OPT_PASSWORD) != null)   config.setPassword(((String)options.get(OPT_PASSWORD)).toCharArray());  if (options.get(OPT_TRUST_STORE) != null)   config.setTrustStore(options.get(OPT_TRUST_STORE));  if (options.get(OPT_TRUST_STORE_PASSWORD) != null)   config.setTrustStore(options.get(OPT_TRUST_STORE_PASSWORD));  if (options.get(OPT_KEY_STORE) != null)   config.setKeyStore(options.get(OPT_KEY_STORE));  if (options.get(OPT_KEY_STORE_PASSWORD) != null)   config.setTrustStore(options.get(OPT_KEY_STORE_PASSWORD));  return config;}  }
class C{  public IMouseState createBendClickedLeftState(final Bend b,final MouseEvent event){  final CBendClickedLeftState state=new CBendClickedLeftState(this,m_graph,b);  m_factory.createBendClickedLeftAction().execute(state,event);  return state;}  }
class C{  public Array readArray() throws SQLException {  return (Array)getNextAttribute();}  }
class C{  public void uploadImageAsync(String message,String fileName,Bitmap bitmap,int quality,SocialAuthListener<Integer> listener) throws Exception {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  if (fileName.endsWith("PNG") || fileName.endsWith("png")) {    bitmap.compress(CompressFormat.PNG,0,bos);  } else   if (fileName.endsWith("JPEG") || fileName.endsWith("JPG") || fileName.endsWith("jpg")|| fileName.endsWith("jpeg")) {    bitmap.compress(CompressFormat.JPEG,quality,bos);  } else {    throw new SocialAuthException("Image Format not supported");  }  InputStream inputStream=new ByteArrayInputStream(bos.toByteArray());  try {    if (getCurrentProvider().getProviderId().equalsIgnoreCase("facebook") || getCurrentProvider().getProviderId().equalsIgnoreCase("twitter")) {      new UploadImageTask(listener).execute(message,fileName,inputStream);    } else {      throw new SocialAuthException("Provider not Supported");    }  } catch (  NullPointerException e) {    e.printStackTrace();    throw new SocialAuthException("Provider not Supported");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.737 -0500",hash_original_method="66B10ECC601C3201E5F156FEACCA3B45",hash_generated_method="DB91D5D8E3B28E068975F092C74FBBF7") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.JOIN_TO);    Join join=new Join();    this.lexer.SPorHT();    String callId=lexer.byteStringNoSemicolon();    this.lexer.SPorHT();    super.parse(join);    join.setCallId(callId);    return join;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  @LoopProcessorAnnotations(loopProcessorAnnotations={@LoopProcessorAnnotation(processPath={IModelingElementDefinitions.CLASSES_PROCESSOR,IModelingElementDefinitions.OPERATIONS_PROCESSOR}),@LoopProcessorAnnotation(processPath={IModelingElementDefinitions.INTERFACES_PROCESSOR,IModelingElementDefinitions.OPERATIONS_PROCESSOR})},aspect=LoopAspectConstants.AFTER) public static void operationsProcessor(@GenerationRegistry GenerationPolicyRegistry generationValueGetter,@GenerationBaseElement Object element,@GenerationLoopElement Object modelPackage,@GenerationLoopElement(id={IModelingElementDefinitions.CLASSES_PROCESSOR,IModelingElementDefinitions.INTERFACES_PROCESSOR}) Object parent){  List<Object> userAddedDependTypes=generationValueGetter.getValues(DEPEND_TYPES_TRACKER,parent);  List<Object> parametersArgument=generationValueGetter.getValues(IModelingDecisions.OPERATION_PARAMETER_ARGUMENT,element,parent);  for (  Object item : parametersArgument) {    if (item instanceof SimpleEntry == false) {      continue;    }    SimpleEntry<?,?> simpleEntry=(SimpleEntry<?,?>)item;    Object type=simpleEntry.getKey();    if (!userAddedDependTypes.contains(type)) {      List<Object> types=generationValueGetter.getValues(IModelingConstants.TYPES_TRACKER,modelPackage,type);      if (types.isEmpty()) {        continue;      }      addDepend(generationValueGetter,parent,type);    }  }}  }
class C{  private CustomerOrderDelivery createOrderDelivery(final CustomerOrder order,final ShoppingCart shoppingCart,final List<CustomerOrderDet> items,final String deliveryGroup,final int idx){  Assert.notNull(order,"Expecting order, but found null");  Assert.notNull(shoppingCart,"Expecting shopping cart, but found null");  final CustomerOrderDelivery customerOrderDelivery=entityFactory.getByIface(CustomerOrderDelivery.class);  if (shoppingCart.getCarrierSlaId() != null) {    customerOrderDelivery.setCarrierSla(carrierSlaService.getById(shoppingCart.getCarrierSlaId()));  } else {    customerOrderDelivery.setCarrierSla(null);  }  customerOrderDelivery.setDeliveryNum(order.getOrdernum() + "-" + idx);  customerOrderDelivery.setDeliveryGroup(deliveryGroup);  customerOrderDelivery.setDeliveryStatus(CustomerOrderDelivery.DELIVERY_STATUS_ON_FULLFILMENT);  customerOrderDelivery.setCustomerOrder(order);  for (  CustomerOrderDet orderDet : items) {    fillDeliveryDetail(customerOrderDelivery,orderDet);  }  return customerOrderDelivery;}  }
class C{  public boolean putSingleTask(RootFragment fragment){  boolean isClear=false;  ArrayList<RootFragment> lastList=stackList.get(stackList.size() - 1);  if (lastList.isEmpty()) {    lastList.add(fragment);  } else {    int tempIndex=0;    for (int x=0; x <= lastList.size() - 1; x++) {      if (lastList.get(x).getClass().getName().equals(fragment.getClass().getName())) {        isClear=true;        tempIndex=x;        break;      }    }    if (!isClear) {      lastList.add(fragment);    } else {      if (listener != null) {        listener.show(lastList.get(tempIndex));        StackManager.isFirstClose=true;        for (int i=lastList.size() - 1; i > tempIndex; i--) {          listener.close(lastList.get(i));        }        for (int j=lastList.size() - 1; j > tempIndex; j--) {          lastList.remove(j);        }      }    }  }  return isClear;}  }
class C{  public static double asin(double x){  if (x < -1.0 || x > 1.0)   return MathLib.NaN;  if (x == -1.0)   return -HALF_PI;  if (x == 1.0)   return HALF_PI;  return MathLib.atan(x / MathLib.sqrt(1.0 - x * x));}  }
class C{  protected void adjustRowBy(int amount,int startIndex){  if (isExpanded) {    for (int counter=getChildCount() - 1; counter >= startIndex; counter--)     ((FHTreeStateNode)getChildAt(counter)).adjustRowBy(amount);  }  FHTreeStateNode parent=(FHTreeStateNode)getParent();  if (parent != null) {    parent.adjustRowBy(amount,parent.getIndex(this) + 1);  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Override public void onResume(){  mWebView.onResume();  super.onResume();}  }
class C{  private void storeRequestId(String requestId,String key){  requestIds.put(requestId,key);}  }
class C{  public static final void sort(double[] a,int[] b,int length){  mergesort(a,b,0,length - 1);}  }
class C{  public String globalInfo(){  return "Implementation of SMO for support vector regression as described " + "in :\n\n" + getTechnicalInformation().toString();}  }
class C{  public static List<String> collectAllFacilityOptionTypes(Scenario scenario){  List<String> activityOptionTypes=new ArrayList<String>();  for (  ActivityFacility facility : scenario.getActivityFacilities().getFacilities().values()) {    for (    ActivityOption option : facility.getActivityOptions().values()) {      if (!activityOptionTypes.contains(option.getType())) {        activityOptionTypes.add(option.getType());      }    }  }  LOG.warn("The following activity option types where found within the activity facilities: " + activityOptionTypes);  return activityOptionTypes;}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7){  return construct(e1,e2,e3,e4,e5,e6,e7);}  }
class C{  public static String cleanText(String text){  String plainText=text;  plainText=plainText.replaceAll("<.+?>"," ");  plainText=plainText.replaceAll("__.+?__"," ");  plainText=plainText.replaceAll("\\[http.+?\\]"," ");  plainText=plainText.replaceAll("\\{\\|.+?\\|\\}"," ");  plainText=plainText.replaceAll("\\{\\{.+?\\}\\}"," ");  plainText=plainText.replaceAll(" - "," ");  plainText=plainText.replace('"',' ');  plainText=plainText.replace('\'',' ');  plainText=plainText.replace('[',' ');  plainText=plainText.replace(']',' ');  plainText=plainText.replace('=',' ');  plainText=plainText.replace('*',' ');  plainText=plainText.replace('|',' ');  plainText=plainText.replace(':',' ');  plainText=plainText.replace('{',' ');  plainText=plainText.replace('}',' ');  plainText=plainText.replace('(',' ');  plainText=plainText.replace(')',' ');  plainText=plainText.replaceAll("\\s{2,}"," ");  return plainText;}  }
class C{  public void printin(String s){  writer.print(SPACES.substring(0,indent));  writer.print(s);}  }
class C{  public void testLoading() throws Exception {  JacksonJsonProvider prov=new JacksonJsonProvider();  ObjectMapper m=prov.locateMapper(Bean.class,null);  assertNotNull(m);}  }
class C{  public StructuralNodeModifiersTableModel(List<StructuralNodeModifier> snms){  this.snms=new ArrayList<>(snms);}  }
class C{  public static void register(){  CommandCenter.register("equip",new EquipAction());}  }
class C{  public void testBug45419() throws Exception {  Exception e=null;  String msg=SQLError.createLinkFailureMessageBasedOnHeuristics((MySQLConnection)this.conn,System.currentTimeMillis() - 1000,System.currentTimeMillis() - 2000,e);  Matcher m=Pattern.compile("([\\d\\,\\.]+)",Pattern.MULTILINE).matcher(msg);  assertTrue(m.find());  assertTrue(Long.parseLong(m.group(0).replaceAll("[,.]","")) >= 2000);  assertTrue(Long.parseLong(m.group(1).replaceAll("[,.]","")) >= 1000);}  }
class C{  public TXStateProxy removeHostedTXState(TXId txId){synchronized (this.hostedTXStates) {    TXStateProxy result=this.hostedTXStates.remove(txId);    if (result != null) {      result.close();    }    return result;  }}  }
class C{  public boolean isExperimental(){  return experimental;}  }
class C{  public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  public boolean isDebugging(){  return debugging;}  }
class C{  private void readHeader(BufferedReader br) throws IOException {  String line;  while (true) {    line=br.readLine();    if (line == null) {      throw new AbortException(ARFF_HEADER_RELATION + " not found in file.");    }    if (ARFF_COMMENT.reset(line).matches() || EMPTY.reset(line).matches()) {      continue;    }    if (ARFF_HEADER_RELATION.reset(line).matches()) {      break;    }    throw new AbortException("Expected relation declaration: " + line);  }}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  public CAddBookmarkAction(final CCodeBookmarkManager manager,final INaviModule module,final IAddress address){  super("Add Bookmark");  m_manager=Preconditions.checkNotNull(manager,"IE01248: Manager argument can not be null");  m_module=Preconditions.checkNotNull(module,"IE01249: Module argument can not be null");  m_address=Preconditions.checkNotNull(address,"IE01250: Address argument can not be null");}  }
class C{  protected double compute(String value){  if (value != null) {    try {      return Double.parseDouble(value);    } catch (    NumberFormatException e) {      if (POSITIVE_INFINITY_STRING.equals(value)) {        return Double.POSITIVE_INFINITY;      } else       if (NEGATIVE_INFINITY_STRING.equals(value)) {        return Double.NEGATIVE_INFINITY;      }      return Double.NaN;    }  }  return Double.NaN;}  }
class C{  public synchronized int dailyCheckin(final String userId){  if (activityQueryService.isCheckedinToday(userId)) {    return Integer.MIN_VALUE;  }  final Random random=new Random();  final int sum=random.nextInt(Pointtransfer.TRANSFER_SUM_C_ACTIVITY_CHECKIN_MAX) % (Pointtransfer.TRANSFER_SUM_C_ACTIVITY_CHECKIN_MAX - Pointtransfer.TRANSFER_SUM_C_ACTIVITY_CHECKIN_MIN + 1) + Pointtransfer.TRANSFER_SUM_C_ACTIVITY_CHECKIN_MIN;  final boolean succ=null != pointtransferMgmtService.transfer(Pointtransfer.ID_C_SYS,userId,Pointtransfer.TRANSFER_TYPE_C_ACTIVITY_CHECKIN,sum,userId);  if (!succ) {    return Integer.MIN_VALUE;  }  try {    final JSONObject user=userQueryService.getUser(userId);    int currentStreakStart=user.optInt(UserExt.USER_CURRENT_CHECKIN_STREAK_START);    int currentStreakEnd=user.optInt(UserExt.USER_CURRENT_CHECKIN_STREAK_END);    final Date today=new Date();    final String todayStr=DateFormatUtils.format(today,"yyyyMMdd");    final int todayInt=Integer.valueOf(todayStr);    if (0 == currentStreakStart) {      user.put(UserExt.USER_CURRENT_CHECKIN_STREAK_START,todayInt);      user.put(UserExt.USER_CURRENT_CHECKIN_STREAK_END,todayInt);      user.put(UserExt.USER_LONGEST_CHECKIN_STREAK_START,todayInt);      user.put(UserExt.USER_LONGEST_CHECKIN_STREAK_END,todayInt);      userMgmtService.updateUser(userId,user);      return sum;    }    final Date endDate=DateUtils.parseDate(String.valueOf(currentStreakEnd),new String[]{"yyyyMMdd"});    final Date nextDate=DateUtils.addDays(endDate,1);    if (DateUtils.isSameDay(nextDate,today)) {      user.put(UserExt.USER_CURRENT_CHECKIN_STREAK_END,todayInt);    } else {      user.put(UserExt.USER_CURRENT_CHECKIN_STREAK_START,todayInt);      user.put(UserExt.USER_CURRENT_CHECKIN_STREAK_END,todayInt);    }    currentStreakStart=user.optInt(UserExt.USER_CURRENT_CHECKIN_STREAK_START);    currentStreakEnd=user.optInt(UserExt.USER_CURRENT_CHECKIN_STREAK_END);    final int longestStreakStart=user.optInt(UserExt.USER_LONGEST_CHECKIN_STREAK_START);    final int longestStreakEnd=user.optInt(UserExt.USER_LONGEST_CHECKIN_STREAK_END);    final Date currentStreakStartDate=DateUtils.parseDate(String.valueOf(currentStreakStart),new String[]{"yyyyMMdd"});    final Date currentStreakEndDate=DateUtils.parseDate(String.valueOf(currentStreakEnd),new String[]{"yyyyMMdd"});    final Date longestStreakStartDate=DateUtils.parseDate(String.valueOf(longestStreakStart),new String[]{"yyyyMMdd"});    final Date longestStreakEndDate=DateUtils.parseDate(String.valueOf(longestStreakEnd),new String[]{"yyyyMMdd"});    final int currentStreakDays=(int)((currentStreakEndDate.getTime() - currentStreakStartDate.getTime()) / 86400000) + 1;    final int longestStreakDays=(int)((longestStreakEndDate.getTime() - longestStreakStartDate.getTime()) / 86400000) + 1;    user.put(UserExt.USER_CURRENT_CHECKIN_STREAK,currentStreakDays);    user.put(UserExt.USER_LONGEST_CHECKIN_STREAK,longestStreakDays);    if (longestStreakDays < currentStreakDays) {      user.put(UserExt.USER_LONGEST_CHECKIN_STREAK_START,currentStreakStart);      user.put(UserExt.USER_LONGEST_CHECKIN_STREAK_END,currentStreakEnd);      user.put(UserExt.USER_LONGEST_CHECKIN_STREAK,currentStreakDays);    }    userMgmtService.updateUser(userId,user);    if (currentStreakDays > 0 && 0 == currentStreakDays % 10) {      pointtransferMgmtService.transfer(Pointtransfer.ID_C_SYS,userId,Pointtransfer.TRANSFER_TYPE_C_ACTIVITY_CHECKIN_STREAK,Pointtransfer.TRANSFER_SUM_C_ACTIVITY_CHECKINT_STREAK,userId);    }    final String userName=user.optString(User.USER_NAME);    final JSONObject timeline=new JSONObject();    timeline.put(Common.TYPE,Common.ACTIVITY);    String content=langPropsService.get("timelineActivityCheckinLabel");    content=content.replace("{user}","<a target='_blank' rel='nofollow' href='" + Latkes.getServePath() + "/member/"+ userName+ "'>"+ userName+ "</a>");    timeline.put(Common.CONTENT,content);    timelineMgmtService.addTimeline(timeline);    return sum;  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Checkin streak error",e);    return Integer.MIN_VALUE;  }}  }
class C{  public final void lineStrip3D(List<? extends Vec3D> points){  boolean isFilled=gfx.fill;  gfx.fill=false;  processVertices3D(points.iterator(),PConstants.POLYGON,false);  gfx.fill=isFilled;}  }
class C{  private IV createIV(WikibasePoint wp){  final BigdataLiteral literal=vf.createLiteral(wp.toString(),new URIImpl(GeoSparql.WKT_LITERAL));  TermId mock=TermId.mockIV(VTE.LITERAL);  mock.setValue(vf.asValue(literal));  return mock;}  }
class C{  public Sequence(SimpleList<Statement> statements){  this(statements,computeHashcode(statements),computeNetSize(statements));}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public boolean isBoundsEnforced(){  return boundsEnforced;}  }
class C{  @ObjectiveCName("changeSelectedWallpaper:") public void changeSelectedWallpaper(String uri){  modules.getSettingsModule().changeSelectedWallpapper(uri);}  }
class C{  protected void onException(final Exception e){  throw WroRuntimeException.wrap(e);}  }
class C{  private void performInOutZoom(){  final int pixel_pos=isHorizontal() ? start.x : start.y;  final double center=getPositionValue(pixel_pos,false);switch (zoomType) {case ZOOM_IN:    zoomInOut(center,ZOOM_RATIO);  break;case ZOOM_IN_HORIZONTALLY:zoomInOut(center,ZOOM_RATIO);break;case ZOOM_IN_VERTICALLY:zoomInOut(center,ZOOM_RATIO);break;case ZOOM_OUT:zoomInOut(center,-ZOOM_RATIO);break;case ZOOM_OUT_HORIZONTALLY:zoomInOut(center,-ZOOM_RATIO);break;case ZOOM_OUT_VERTICALLY:zoomInOut(center,-ZOOM_RATIO);break;default :}}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  @Override public <T>T[] toArray(T[] array){  return newArray(array);}  }
class C{  public boolean isArrayTypeLiteral(){  return arrayTypeLiteral;}  }
class C{  public TextHttpResponseHandler(){  this(DEFAULT_CHARSET);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.REGULAR_EXPRESSION_LITERAL;}  }
class C{  void tryLaunchRcsCoreService(Context context,long timerRetry){  int version=mRcsSettings.getProvisioningVersion();  if (version > 0) {    LauncherUtils.launchRcsCoreService(context,mRcsSettings);    if (timerRetry > 0) {      HttpsProvisioningService.startRetryAlarm(context,mRetryIntent,timerRetry);    } else {      retry();    }  } else {    if (Version.DISABLED_DORMANT.toInt() == version) {      if (timerRetry > 0) {        HttpsProvisioningService.startRetryAlarm(context,mRetryIntent,timerRetry);      } else       retry();    }  }}  }
class C{  public TransitionRootItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void testGetNameWhenWarHasNoExtension(){  WAR war=new WAR("/some/path/to/war/test");  assertEquals("test",war.getName());}  }
class C{  static public void showWarning(String msg,Object... args){  showWarning(String.format(msg,args));}  }
class C{  public synchronized boolean isOwner(Principal owner){  return ownerGroup.isMember(owner);}  }
class C{  protected boolean internalLast() throws SQLException {  boolean bool=super.internalLast();  if (p == null) {    return bool;  }  while (bool) {    if (p.evaluate(this)) {      break;    }    bool=super.internalPrevious();  }  return bool;}  }
class C{  public static void updateStoragePoolCapacity(StoragePool dbPool,StorageSystem dbSystem,List<URI> reservedObjects,DbClient dbClient){  _log.info(String.format("Update storage pool capacity for pool %s, system %s ",dbPool.getId(),dbSystem.getId()));  BlockStorageDriver driver=getBlockStorageDriver(dbSystem.getSystemType());  dbPool=dbClient.queryObject(StoragePool.class,dbPool.getId());  com.emc.storageos.storagedriver.model.StoragePool driverPool=driver.getStorageObject(dbSystem.getNativeId(),dbPool.getNativeId(),com.emc.storageos.storagedriver.model.StoragePool.class);  if (driverPool != null) {    _log.info(String.format("Driver pool %s info: free capacity %s, subscribed capacity %s ",driverPool.getNativeId(),driverPool.getFreeCapacity(),driverPool.getSubscribedCapacity()));    dbPool.setFreeCapacity(driverPool.getFreeCapacity());    dbPool.setSubscribedCapacity(driverPool.getSubscribedCapacity());  } else {    _log.error("Driver pool for storage pool {} and storage system {} is null.",dbPool.getNativeId(),dbSystem.getNativeId());  }  dbPool.removeReservedCapacityForVolumes(URIUtil.asStrings(reservedObjects));  dbClient.updateObject(dbPool);}  }
class C{  @SuppressLint("NewApi") private void disableControls(){  this.getSettings().setBuiltInZoomControls(true);  this.getSettings().setDisplayZoomControls(false);}  }
class C{  void moveToStarted(){  ensureNotFrozen();  version++;  assert state == ShardRoutingState.INITIALIZING : "expected an initializing shard " + this;  relocatingNodeId=null;  restoreSource=null;  unassignedInfo=null;  if (allocationId.getRelocationId() != null) {    allocationId=AllocationId.finishRelocation(allocationId);  }  expectedShardSize=UNAVAILABLE_EXPECTED_SHARD_SIZE;  state=ShardRoutingState.STARTED;}  }
class C{  public boolean isSortTab(){  return m_vo.IsSortTab;}  }
class C{  public void environmentStop(EnvironmentClassLoader loader){  Object resource=_resourceRef.get();  if (resource == null)   return;  Method destroy=getStopMethod(resource.getClass());  if (destroy == null)   return;  try {    destroy.invoke(resource,(Object[])null);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  public Join(TupleExpr leftArg,TupleExpr rightArg){  super(leftArg,rightArg);}  }
class C{  private boolean checkStatus(String TableName,int Record_ID,String DocStatus){  String sql="SELECT 2 FROM " + TableName + " WHERE "+ TableName+ "_ID="+ Record_ID+ " AND DocStatus='"+ DocStatus+ "'";  int result=DB.getSQLValue(null,sql);  return result == 2;}  }
class C{  public static void close(Writer writer){  try {    if (writer != null) {      writer.close();    }  } catch (  IOException ex) {    LOGGER.warn(String.format(LOG_FORMAT,"writer"));  }}  }
class C{  public void flush() throws IOException {  byte[] fileBinary=new byte[list.size()];  for (int i=0; i < fileBinary.length; i++) {    fileBinary[i]=list.get(i);  }  list.clear();  baos.write(fileBinary);  cachedPacketNum=0;}  }
class C{  public void deleteValue(String idDescr,String idCampo,String orden){  DbConnection conn=getConnection();  try {    final StringBuffer qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID_DESCR,idDescr)).append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ID_CAMPO,idCampo));    if (StringUtils.isNotBlank(orden))     qual.append(" AND ").append(DBUtils.generateEQTokenField(CAMPO_ORDEN,orden));    DbDeleteFns.delete(conn,TABLE_NAME,qual.toString());  } catch (  Exception e) {    logger.error("Error eliminando campo de tipo texto largo para el descriptor " + idDescr,e);    throw new DBException("eliminando campo de tipo texto largo",e);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void addParameters(final NameValuePair[] parameters){  LOG.trace("enter PostMethod.addParameters(NameValuePair[])");  if (parameters == null) {    LOG.warn("Attempt to addParameters(null) ignored");  } else {    super.clearRequestBody();    for (int i=0; i < parameters.length; i++) {      params.add(parameters[i]);    }  }}  }
class C{  protected void engineSetMode(String mode) throws NoSuchAlgorithmException {  if ((mode != null) && (!mode.equalsIgnoreCase("CBC"))) {    throw new NoSuchAlgorithmException("Invalid cipher mode: " + mode);  }}  }
class C{  public String snapshot(){  return this.snapshot;}  }
class C{  public static boolean hasException(int status){switch (status) {case Status.DOWNLOAD_STATUS_ERROR:case Status.DOWNLOAD_STATUS_FILE_NOT_EXIST:    return true;}return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else   if (myHost == null && progress != previousProgress) {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public CUdevice(){}  }
class C{  public DataColorAction(String group,String dataField,int dataType,String colorField,int[] palette){  super(group,colorField);  setDataType(dataType);  setDataField(dataField);  m_palette=palette;}  }
class C{  public List<PaymentFile> searchPaymentFiles(long groupId,String paymentStatus,String keywords,int start,int end){  String[] names=null;  boolean andOperator=false;  if (Validator.isNotNull(keywords)) {    names=CustomSQLUtil.keywords(keywords);  } else {    andOperator=true;  }  return _searchPaymentFiles(groupId,paymentStatus,andOperator,names,start,end);}  }
class C{  private Vertex<IWorker> vertexOf(IWorker worker){  Vertex<IWorker> vertex=_mapWorkerVertex.get(worker);  if (vertex != null)   return vertex;  vertex=new Vertex<>();  vertex.setData(worker);  _mapWorkerVertex.put(worker,vertex);  return vertex;}  }
class C{  public void addCustomVariable(CustomVariable customVariable){  getCustomVariables().add(customVariable);}  }
class C{  public void create(String[] rpfFilePaths,String outputFile) throws MakeTocException {  create(rpfFilePaths,outputFile,false);}  }
class C{  public static boolean isHTC(){  return sBuildModel.startsWith("htc");}  }
class C{  public VisibilityFilter(String group,Predicate p){  super(group);  setPredicate(p);}  }
class C{  protected void sendTestMessage(QsiMessage m,QsiListener l){  if (log.isDebugEnabled()) {    log.debug("sendTestMessage    [" + m + "]");  }  notifyMessage(m,l);  return;}  }
class C{  public void addIstore(int n){  if (n < 4)   addOpcode(59 + n); else   if (n < 0x100) {    addOpcode(ISTORE);    add(n);  } else {    addOpcode(WIDE);    addOpcode(ISTORE);    addIndex(n);  }}  }
class C{  public AnsibleRunner options(Map<String,String> options){  this.options.putAll(options);  return this;}  }
class C{  public boolean matchesDynamic(Object e,AttributeResolver attRes,TreeResolver treeRes){  if (siblingSelector != null) {    Object sib=siblingSelector.getAppropriateSibling(e,treeRes);    if (sib == null) {      return false;    }    if (!siblingSelector.matchesDynamic(sib,attRes,treeRes)) {      return false;    }  }  if (isPseudoClass(VISITED_PSEUDOCLASS)) {    if (attRes == null || !attRes.isVisited(e)) {      return false;    }  }  if (isPseudoClass(ACTIVE_PSEUDOCLASS)) {    if (attRes == null || !attRes.isActive(e)) {      return false;    }  }  if (isPseudoClass(HOVER_PSEUDOCLASS)) {    if (attRes == null || !attRes.isHover(e)) {      return false;    }  }  if (isPseudoClass(FOCUS_PSEUDOCLASS)) {    if (attRes == null || !attRes.isFocus(e)) {      return false;    }  }  return true;}  }
class C{  public CertificateException(String msg){  super(msg);}  }
class C{  public static void activate(){  checkTransformerState();  MockFramework.enable();  transformer.activate();  LoopCounter.getInstance().setActive(true);}  }
class C{  public InvalidMimeTypeException(String mimeType,String message){  super("Invalid mime type \"" + mimeType + "\": "+ message);  this.mimeType=mimeType;}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    KeyStoreType keyStoreType=KeyStoreType.resolveJce(keyStore.getType());    Key privateKey=keyStore.getKey(alias,password.toCharArray());    File caReplyFile=chooseCaFile();    if (caReplyFile == null) {      return;    }    X509Certificate[] certs=openCaReply(caReplyFile);    if ((certs == null) || (certs.length == 0)) {      return;    }    certs=X509CertUtil.orderX509CertChain(certs);    X509Certificate[] exitingEntryCerts=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(keyStore.getCertificateChain(alias)));    if (!exitingEntryCerts[0].getPublicKey().equals(certs[0].getPublicKey())) {      JOptionPane.showMessageDialog(frame,res.getString("ImportCaReplyFromFileAction.NoMatchPubKeyCaReply.message"),res.getString("ImportCaReplyFromFileAction.ImportCaReply.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    X509Certificate[] newCertChain=null;    if (!applicationSettings.getEnableImportCaReplyTrustCheck()) {      newCertChain=certs;    } else {      KeyStore caCertificates=getCaCertificates();      KeyStore windowsTrustedRootCertificates=getWindowsTrustedRootCertificates();      if (certs.length > 1) {        X509Certificate rootCert=certs[certs.length - 1];        String matchAlias=null;        if (caCertificates != null) {          matchAlias=X509CertUtil.matchCertificate(caCertificates,rootCert);        }        if ((windowsTrustedRootCertificates != null) && (matchAlias == null)) {          matchAlias=X509CertUtil.matchCertificate(windowsTrustedRootCertificates,rootCert);        }        if (matchAlias == null) {          matchAlias=X509CertUtil.matchCertificate(keyStore,rootCert);        }        if (matchAlias == null) {          JOptionPane.showMessageDialog(frame,res.getString("ImportCaReplyFromFileAction.NoMatchRootCertCaReplyConfirm.message"),res.getString("ImportCaReplyFromFileAction.ImportCaReply.Title"),JOptionPane.INFORMATION_MESSAGE);          DViewCertificate dViewCertificate=new DViewCertificate(frame,MessageFormat.format(res.getString("ImportCaReplyFromFileAction.CertDetailsFile.Title"),caReplyFile.getName()),new X509Certificate[]{rootCert},null,DViewCertificate.NONE);          dViewCertificate.setLocationRelativeTo(frame);          dViewCertificate.setVisible(true);          int selected=JOptionPane.showConfirmDialog(frame,res.getString("ImportCaReplyFromFileAction.AcceptCaReply.message"),res.getString("ImportCaReplyFromFileAction.ImportCaReply.Title"),JOptionPane.YES_NO_OPTION);          if (selected != JOptionPane.YES_OPTION) {            return;          }          newCertChain=certs;        } else {          newCertChain=certs;        }      } else {        ArrayList<KeyStore> compKeyStores=new ArrayList<KeyStore>();        compKeyStores.add(keyStore);        if (caCertificates != null) {          compKeyStores.add(caCertificates);        }        if (windowsTrustedRootCertificates != null) {          compKeyStores.add(windowsTrustedRootCertificates);        }        X509Certificate[] trustChain=X509CertUtil.establishTrust(certs[0],compKeyStores.toArray(new KeyStore[compKeyStores.size()]));        if (trustChain != null) {          newCertChain=trustChain;        } else {          JOptionPane.showMessageDialog(frame,res.getString("ImportCaReplyFromFileAction.NoTrustCaReply.message"),res.getString("ImportCaReplyFromFileAction.ImportCaReply.Title"),JOptionPane.WARNING_MESSAGE);          return;        }      }    }    if (keyStoreType.isFileBased()) {      keyStore.deleteEntry(alias);      keyStore.setKeyEntry(alias,privateKey,password.toCharArray(),newCertChain);    } else {      keyStore.setKeyEntry(alias,privateKey,password.toCharArray(),newCertChain);    }    currentState.append(newState);    kseFrame.updateControls(true);    JOptionPane.showMessageDialog(frame,res.getString("ImportCaReplyFromFileAction.ImportCaReplySuccessful.message"),res.getString("ImportCaReplyFromFileAction.ImportCaReply.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void memset(byte data,int length){  memset(0,data,length);}  }
class C{  public void readOctetString() throws IOException {  if (tag == ASN1Constants.TAG_OCTETSTRING) {    readContent();  } else   if (tag == ASN1Constants.TAG_C_OCTETSTRING) {    throw new ASN1Exception("Decoding constructed ASN.1 octet string type is not supported");  } else {    throw expected("octetstring");  }}  }
class C{  @Override public void notifyOnError(){  scheduleBackgroundRead();}  }
class C{  public String readString(){  return scanner.next();}  }
class C{  public boolean isParameterized(){  EList<TypeRef> _typeArgs=this.getTypeArgs();  boolean _isEmpty=_typeArgs.isEmpty();  return (!_isEmpty);}  }
class C{  public MaildirStore(String maildirLocation,MailboxPathLocker locker){  this.maildirLocation=maildirLocation;  this.locker=locker;}  }
class C{  public static ExprBoolean toExprBoolean(Expression left,Expression right,int operation){  if (left instanceof Literal && right instanceof Literal) {    Boolean l=((Literal)left).getBoolean(null);    Boolean r=((Literal)right).getBoolean(null);    if (l != null && r != null) {switch (operation) {case Factory.OP_BOOL_AND:        return left.getFactory().createLitBoolean(l.booleanValue() && r.booleanValue(),left.getStart(),right.getEnd());case Factory.OP_BOOL_OR:      return left.getFactory().createLitBoolean(l.booleanValue() || r.booleanValue(),left.getStart(),right.getEnd());case Factory.OP_BOOL_XOR:    return left.getFactory().createLitBoolean(l.booleanValue() ^ r.booleanValue(),left.getStart(),right.getEnd());}}}return new OpBool(left,right,operation);}  }
class C{  @Override protected Individual<Double> mutate(Individual<Double> child){  List<Double> rep=child.getRepresentation();  List<Double> newRep=new ArrayList<Double>();  for (  double num : rep) {    double r=random.nextDouble() - 0.5;    num+=r * r * r* (maximum - minimum) / 2;    if (num < minimum)     num=minimum; else     if (num > maximum)     num=maximum;    newRep.add(num);  }  return new Individual<>(newRep);}  }
class C{  public boolean put(double lat,double lon,T obj){  return top.put(lat,lon,obj);}  }
class C{  public FlowControlParams(int byteAllowance,float rechargeThreshold,int rechargeBlockMs){  this.byteAllowance=byteAllowance;  this.rechargeThreshold=rechargeThreshold;  this.rechargeBlockMs=rechargeBlockMs;}  }
class C{  void _setTextFromModel(){  Document doc=getDocument();  try {    isSettingAttributes=true;    if (doc instanceof AbstractDocument) {      ((AbstractDocument)doc).readLock();    }    JTextComponent text=getTextComponent();    if (text != null) {      text.setText(getRepresentedText());      resetBorder();      Container host=getContainer();      if (host != null) {        preferenceChanged(this,true,true);        host.repaint();      }    }  }  finally {    isSettingAttributes=false;    if (doc instanceof AbstractDocument) {      ((AbstractDocument)doc).readUnlock();    }  }}  }
class C{  public MessageOnlyLogFilter(LogNode next){  mNext=next;}  }
class C{  public static void scaleImage(ImageView view,Context context){  try {    Drawable drawing=view.getDrawable();    if (drawing == null) {      return;    }    Bitmap bitmap=((BitmapDrawable)drawing).getBitmap();    int width=bitmap.getWidth();    int height=bitmap.getHeight();    int bounding=dpToPx(context,250);    Log.i("ImageResizer","original width = " + Integer.toString(width));    Log.i("ImageResizer","original height = " + Integer.toString(height));    Log.i("ImageResizer","bounding = " + Integer.toString(bounding));    float xScale=((float)bounding) / width;    float yScale=((float)bounding) / height;    float scale=(xScale <= yScale) ? xScale : yScale;    Log.i("ImageResizer","xScale = " + Float.toString(xScale));    Log.i("ImageResizer","yScale = " + Float.toString(yScale));    Log.i("ImageResizer","scale = " + Float.toString(scale));    Matrix matrix=new Matrix();    matrix.postScale(scale,scale);    Bitmap scaledBitmap=Bitmap.createBitmap(bitmap,0,0,width,height,matrix,true);    width=scaledBitmap.getWidth();    height=scaledBitmap.getHeight();    BitmapDrawable result=new BitmapDrawable(scaledBitmap);    Log.i("ImageResizer","scaled width = " + Integer.toString(width));    Log.i("ImageResizer","scaled height = " + Integer.toString(height));    view.setImageDrawable(result);    Log.i("ImageResizer","done");  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public boolean canGrow(World world,BlockPos pos,Tree tree){  return true;}  }
class C{  public void close() throws IOException {  if (mClosed) {    return;  }  mRtcpSession.isByeRequested=true;  mClosed=true;  if (mDatagramConnection != null) {    mDatagramConnection.close();  }  if (sLogger.isActivated()) {    sLogger.debug("RTCP transmitter closed");  }  if (getState() == State.NEW) {    start();  }}  }
class C{  public void initializeUnitListForCreateSubscription(){  VOUserDetails voUserDetails=ui.getUserFromSessionWithoutException();  List<POUserGroup> units=new ArrayList<POUserGroup>();  if (!voUserDetails.hasAdminRole() && !voUserDetails.hasUnitAdminRole()) {    return;  }  if (voUserDetails.hasUnitAdminRole() && !voUserDetails.hasAdminRole()) {    units=getUnitService().getUserGroupsForUserWithRoleWithoutDefault(voUserDetails.getKey(),UnitRoleType.ADMINISTRATOR.getKey());    model.setUnits(units);    if (!units.isEmpty() && model.getSelectedUnitId() == 0L) {      assignToSelectedUnit(units.get(0).getKey());      model.setAssignNoUnit(Constants.RADIO_UNSELECTED);    }  }  if (voUserDetails.hasAdminRole()) {    units=getUnitService().getGroupListForOrganization();  }  if (isUnitSelected()) {    markUnitRadioAsSelected(units);  }  model.setUnits(units);}  }
class C{  @Override public void beginOverlay(final OverlayLayer layer){  final ModelScene scene=sceneBuffer.getSceneToUpdate();  if (scene != null) {    scene.beginOverlay();  }}  }
class C{  public RealBuffer copyOf(){  float[] copy=Arrays.copyOf(mSamples,mSamples.length);  return new RealBuffer(copy);}  }
class C{  protected void addController(String controller){  if (!StringUtils.isEmpty(controller)) {    controllers.add(controller);  }}  }
class C{  protected Component createMessagesBlock(final List<String> messages){  final TextArea textArea=new TextArea();  textArea.addStyleName(ValoTheme.TEXTAREA_BORDERLESS);  textArea.addStyleName(ValoTheme.TEXTAREA_TINY);  textArea.addStyleName("inline-icon");  textArea.setSizeFull();  int index=1;  final StringBuilder updateStatusMessages=new StringBuilder();  if (messages != null && !messages.isEmpty()) {    for (    final String msg : messages) {      updateStatusMessages.append('[').append(index).append("]: ").append(msg).append('\n');      index++;    }  } else {    updateStatusMessages.append(i18n.get("message.no.available"));  }  textArea.setValue(updateStatusMessages.toString());  textArea.setReadOnly(Boolean.TRUE);  return textArea;}  }
class C{  private static int premultiplyColor(int c){  int r=Color.red(c);  int g=Color.green(c);  int b=Color.blue(c);  int a=Color.alpha(c);  r=mul255(r,a);  g=mul255(g,a);  b=mul255(b,a);  return pack8888(r,g,b,a);}  }
class C{  public String lastString(){  if (_lastvalue == null) {    _lastvalue=nextString();  }  return _lastvalue;}  }
class C{  public void reset(){  contexts=new Context[32];  namespaceDeclUris=false;  contextPos=0;  contexts[contextPos]=currentContext=new Context();  currentContext.declarePrefix("xml",XMLNS);}  }
class C{  public Object extractFieldValue(final Object instance,final Field field){  JBBPUtils.assertNotNull(field,"Field must not be null");  try {    if (!field.isAccessible()) {      JBBPUtils.makeAccessible(field);    }    return field.get(instance);  } catch (  Exception ex) {    throw new JBBPException("Can't extract value from field for exception",ex);  }}  }
class C{  public void register(MetaDataRendererFactory factory){  factories.put(factory.getSupportedClass(),factory);}  }
class C{  public String globalInfo(){  return "Evaluate the performance of incrementally trained classifiers.";}  }
class C{  public void addWords(String phrase){  if (phrase.equals("#") || phrase.equals(""))   return;  String[] words=spliterator(phrase);  if (words.length < 2)   return;  for (int i=0; i < words.length; i++) {    if (i == 0) {      Vector<String> startWords=chain.get("_start");      startWords.add(words[i]);      Vector<String> suffix=chain.get(words[i]);      if (suffix == null) {        suffix=new Vector<>();        suffix.add(words[i + 1]);        chain.put(words[i],suffix);      }    } else     if (i == words.length - 1) {      Vector<String> endWords=chain.get("_end");      endWords.add(words[i]);    } else {      Vector<String> suffix=chain.get(words[i]);      if (suffix == null) {        suffix=new Vector<>();        suffix.add(words[i + 1]);        chain.put(words[i],suffix);      } else {        suffix.add(words[i + 1]);        chain.put(words[i],suffix);      }    }  }}  }
class C{  public void right(){  movePuck(puck.x + XOFFSET + 1);}  }
class C{  public void testParentDependenciesOk() throws Exception {  checkMembers("CLASS_FIELD_DEPENDS_ON_PARENT_FIELD","method_depends_on_parent_method(self)","method_depends_on_parent_field(self)");  Assert.assertThat("Dependence check false positive: parent has all required members",getErrorMemberNames(),Matchers.empty());}  }
class C{  private String[] buildException(int exceptionLine,ParsingContext ctx){  if (exceptionLine == -1) {    return emptyException;  }  String[] additionalLines=ctx.getUnmatchedLog().toString().split("\n");  String[] exception=new String[additionalLines.length - exceptionLine];  System.arraycopy(additionalLines,exceptionLine,exception,0,exception.length);  return exception;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x0A41A298,version=271) public int sceUsbCamSetupStillEx(pspUsbCamSetupStillExParam usbCamSetupStillExParam){  return 0;}  }
class C{  @Override public void onDrawFrame(final GL10 unused){  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);  if (requesrUpdateTex) {    requesrUpdateTex=false;    mSTexture.updateTexImage();    mSTexture.getTransformMatrix(mStMatrix);    update(hTex,mStMatrix);  }  GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,0);  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);  GLES20.glEnable(GLES20.GL_BLEND);  final CameraGLView parent=mWeakParent.get();  render(parent.mRenderViewport.x,parent.mRenderViewport.y,parent.mRenderViewport.width,parent.mRenderViewport.height);  GLES20.glDisable(GLES20.GL_BLEND);  flip=!flip;  if (flip) {synchronized (this) {      if (mVideoEncoder != null) {        mVideoEncoder.frameAvailableSoon(mStMatrix,mMvpMatrix);      }    }  }}  }
class C{  public void validate(Document document) throws SAXException {  if (document != null) {    XMLReader reader=getXMLReader();    if (errorHandler != null) {      reader.setErrorHandler(errorHandler);    }    try {      reader.parse(new DocumentInputSource(document));    } catch (    IOException e) {      throw new RuntimeException("Caught and exception that should " + "never happen: " + e);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementsetattributenodenull.class,args);}  }
class C{  public void testRandomStrings() throws Exception {  CatalanAnalyzer a=new CatalanAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  public static void updateToolbarHeight(Context context,Toolbar toolbar){  toolbar.getLayoutParams().height=context.getResources().getDimensionPixelSize(R.dimen.abc_action_bar_default_height_material);}  }
class C{  public static boolean sameWeek(Calendar cal,IWeekItem week){  return (cal.get(Calendar.WEEK_OF_YEAR) == week.getWeekInYear() && cal.get(Calendar.YEAR) == week.getYear());}  }
class C{  public synchronized IAudioProvider remove(int index){  return providers.remove(index);}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public static final double[] normalize(final double[] v1){  double norm=1. / euclideanLength(v1);  double[] re=new double[v1.length];  if (norm < Double.POSITIVE_INFINITY) {    for (int row=0; row < v1.length; row++) {      re[row]=v1[row] * norm;    }  }  return re;}  }
class C{  public int error_sym(){  return 1;}  }
class C{  private UniversalDataSource prepareCatalog(String name,boolean clear) throws ReplicatorException, InterruptedException {  datasourceProps.setString("serviceName",name);  datasourceManager.addAndPrepare(name,datasourceClass,datasourceProps);  UniversalDataSource c=datasourceManager.find(name);  if (clear) {    c.clear();  }  c.initialize();  return c;}  }
class C{  public static ReilInstruction createUnknown(final long offset){  final ReilOperand firstOperand=createOperand(OperandSize.EMPTY,"");  final ReilOperand secondOperand=createOperand(OperandSize.EMPTY,"");  final ReilOperand thirdOperand=createOperand(OperandSize.EMPTY,"");  return new ReilInstruction(new CAddress(offset),ReilHelpers.OPCODE_UNKNOWN,firstOperand,secondOperand,thirdOperand);}  }
class C{  public CActionEditComments(final CGraphModel model,final INaviViewNode node){  super("Edit Comments");  m_model=Preconditions.checkNotNull(model,"Error: model argument can not be null");  m_node=Preconditions.checkNotNull(node,"Error: node argument can not be null");}  }
class C{  private void startCapture(CharSequence sequenceName){  if (mStartTime != 0) {    return;  }  log("Starting image capture.");  displayPersistentNotification();  mStartTime=SystemClock.elapsedRealtime();  mIndex=0;  mInterval=Long.parseLong(pref(R.string.pref_interval_key,R.string.pref_interval_default));  mLimit=Integer.parseInt(pref(R.string.pref_limit_key,R.string.pref_limit_default));  int cameraId=Integer.parseInt(pref(R.string.pref_camera_key,R.string.pref_camera_default));  boolean autofocus=pref(R.string.pref_focus_key,R.string.pref_focus_default).equals("auto");  mImageCapturer=new ImageCapturer(this,cameraId,autofocus,sequenceName);  broadcastStatus();  setAlarm(mStartTime + mInterval);}  }
class C{  private CViewSearcher(){}  }
class C{  protected void removeFromParentInfo(Openable child){  Openable parent=(Openable)child.getParent();  if (parent != null && parent.isOpen()) {    try {      OpenableElementInfo info=(OpenableElementInfo)parent.getElementInfo();      info.removeChild(child);    } catch (    JavaModelException e) {    }  }}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  protected void addChildNode(CNode child){  for (int i=0; i < child.m_clusterInstances.numInstances(); i++) {    Instance temp=child.m_clusterInstances.instance(i);    m_clusterInstances.add(temp);    updateStats(temp,false);  }  if (m_children == null) {    m_children=new ArrayList<CNode>();  }  m_children.add(child);}  }
class C{  public void clean(){  addArg("clean");}  }
class C{  public static TypedByteArrayComparator parseFrom(final byte[] bytes) throws DeserializationException {  TypedByteArrayComparator comparator=new TypedByteArrayComparator();  ByteArrayDataInput byteArrayDataInput=ByteStreams.newDataInput(bytes);  try {    comparator.readFields(byteArrayDataInput);  } catch (  IOException e) {    LOG.error("Got error to deserialize TypedByteArrayComparator from PB bytes",e);    throw new DeserializationException(e);  }  return comparator;}  }
class C{  @GridifySetToSet(gridName="GridifySetToSetTarget",threshold=2,splitSize=2) @Override public Enumeration<Long> findPrimesWithEnumeration(Enumeration<Long> input){  System.out.println(">>>");  System.out.println("Find primes in enumeration: " + input);  System.out.println(">>>");  Collection<Long> res=new ArrayList<>();  while (input.hasMoreElements()) {    Long val=input.nextElement();    Long divisor=checkPrime(val,2,val);    if (divisor == null)     res.add(val);  }  return new MathEnumerationAdapter<>(res);}  }
class C{  private String readSerializationSettings(){  String javaObjectSerializerFQN=null;  CommandInterface ci=prepareCommand("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS " + " WHERE NAME='JAVA_OBJECT_SERIALIZER'",Integer.MAX_VALUE);  try {    ResultInterface result=ci.executeQuery(0,false);    if (result.next()) {      Value[] row=result.currentRow();      javaObjectSerializerFQN=row[0].getString();    }  }  finally {    ci.close();  }  return javaObjectSerializerFQN;}  }
class C{  public HTMLWriter(Writer out,ResourceBundle i18n) throws IOException {  this(out);  this.i18n=i18n;}  }
class C{  @Override protected void drawStatusBar(final Graphics2D g2d,final int x,final int y,final int width){  drawTitle(g2d,x,y + 6,width);  Composite comp=g2d.getComposite();  if (ignored && !entity.isGhostMode()) {    g2d.setComposite(AlphaComposite.SrcAtop);    drawHPbar(g2d,x,y + 6,width);    g2d.setComposite(comp);  } else {    drawHPbar(g2d,x,y + 6,width);  }}  }
class C{  static public IBindingSet[] toArray(final Iterator<IBindingSet[]> itr,final BOpStats stats){  if (!itr.hasNext()) {    return EMPTY_CHUNK;  }  final IBindingSet[] firstChunk=itr.next();  if (!itr.hasNext()) {    if (stats != null) {      stats.chunksIn.add(1);      stats.unitsIn.add(firstChunk.length);    }    return firstChunk;  }  final List<IBindingSet[]> list=new LinkedList<IBindingSet[]>();  list.add(firstChunk);  int nchunks=1, nelements=firstChunk.length;  try {    while (itr.hasNext()) {      final IBindingSet[] a=itr.next();      list.add(a);      nchunks++;      nelements+=a.length;    }    if (stats != null) {      stats.chunksIn.add(nchunks);      stats.unitsIn.add(nelements);    }  }  finally {    if (itr instanceof ICloseable) {      ((ICloseable)itr).close();    }  }  if (nchunks == 0) {    return new IBindingSet[0];  } else   if (nchunks == 1) {    return list.get(0);  } else {    int n=0;    final IBindingSet[] a=new IBindingSet[nelements];    final Iterator<IBindingSet[]> itr2=list.iterator();    while (itr2.hasNext()) {      final IBindingSet[] t=itr2.next();      try {        System.arraycopy(t,0,a,n,t.length);      } catch (      IndexOutOfBoundsException ex) {        final IndexOutOfBoundsException ex2=new IndexOutOfBoundsException("t.length=" + t.length + ", a.length="+ a.length+ ", n="+ n);        ex2.initCause(ex);        throw ex2;      }      n+=t.length;    }    return a;  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operationCall: ");  result.append(operationCall);  result.append(", arrayAccess: ");  result.append(arrayAccess);  result.append(')');  return result.toString();}  }
class C{  public boolean isModernTls(){  return modernTls;}  }
class C{  private boolean isValid(int[] individual){  for (int i=0; i < individual.length; i++) {    if (individual[i] >= 0) {      return true;    }  }  return false;}  }
class C{  public boolean is3D(){  return false;}  }
class C{  public CharBuffer(final int length){  if (length == 0) {    throw new IllegalArgumentException("Can't create an empty CharBuffer");  }  this.c=new char[length];}  }
class C{  protected double constrictionCoefficient(double c1,double c2){  double rho=c1 + c2;  if (rho <= 4) {    return 1.0;  } else {    return 2.0 / (2.0 - rho - Math.sqrt(Math.pow(rho,2.0) - 4.0 * rho));  }}  }
class C{  private static boolean waitTillPageAlive(String url,int timeoutSecs) throws IOException {  int tries=0;  int secsBetweenTries=1;  while (true) {    boolean alive=isURLAlive(url);    tries++;    if (alive)     break;    out.println("Web app not deployed after " + tries + " tries");    try {      Thread.sleep(secsBetweenTries * 1000);    } catch (    InterruptedException ie) {    }    if (tries * secsBetweenTries > timeoutSecs) {      out.println("\n\n\nSORRY! FAILED TO START CORRECTLY AFTER " + tries + " TRIES!\n\n\n");      return false;    }  }  out.println("The ePADD web application was deployed successfully (#tries: " + tries + ")");  return true;}  }
class C{  public synchronized boolean releasePooledConnection(PooledConnection conn){  ConnectionDesc entry;  int loc=conns.indexOf(entry=new ConnectionDesc(conn));  d("release(): ",conn);  if (loc >= 0) {    if (closed || (prefSize > 0 && conns.size() > prefSize)) {      d("release(): closing ",conn);      td("Close ",conn);      conns.remove(entry);      conn.closeConnection();    } else {      d("release(): release ",conn);      td("Release ",conn);      entry=conns.get(loc);      entry.release();    }    notifyAll();    d("release(): notify");    return true;  } else {    return false;  }}  }
class C{  public void testRecord(){  float speed=0.0F;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.record(speed);}  }
class C{  public static Hashtable<String,String> sortClassesByRoot(String classes){  Hashtable<String,Vector<String>> roots;  Hashtable<String,String> result;  Enumeration<String> enm;  int i;  StringTokenizer tok;  String clsname;  Vector<String> list;  HierarchyPropertyParser hpp;  String separator;  String root;  String tmpStr;  if (classes == null) {    return null;  }  roots=new Hashtable<String,Vector<String>>();  hpp=new HierarchyPropertyParser();  separator=hpp.getSeperator();  tok=new StringTokenizer(classes,", ");  while (tok.hasMoreElements()) {    clsname=tok.nextToken();    root=getRootFromClass(clsname,separator);    if (root == null) {      continue;    }    if (!roots.containsKey(root)) {      list=new Vector<String>();      roots.put(root,list);    } else {      list=roots.get(root);    }    list.add(clsname);  }  result=new Hashtable<String,String>();  enm=roots.keys();  while (enm.hasMoreElements()) {    root=enm.nextElement();    list=roots.get(root);    tmpStr="";    for (i=0; i < list.size(); i++) {      if (i > 0) {        tmpStr+=",";      }      tmpStr+=list.get(i);    }    result.put(root,tmpStr);  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.653 -0500",hash_original_method="72BD428D826DE1DC77C96CF7C6F2A06C",hash_generated_method="1A2666F65622A32BE62EAD0D1C33774A") public RetryAfterParser(String retryAfter){  super(retryAfter);}  }
class C{  protected Anonymous_constraintExpr_1_Impl(){  super();}  }
class C{  @Override public void uninitialize(){  super.uninitialize();  defaults.uninitialize();  ImageCache.getInstance().flush();  UIManager.getDefaults().removePropertyChangeListener(defaultsListener);}  }
class C{  private void registerStyles(){  register(Region.ARROW_BUTTON,"ArrowButton");  register(Region.BUTTON,"Button");  register(Region.TOGGLE_BUTTON,"ToggleButton");  register(Region.RADIO_BUTTON,"RadioButton");  register(Region.CHECK_BOX,"CheckBox");  register(Region.COLOR_CHOOSER,"ColorChooser");  register(Region.PANEL,"ColorChooser:\"ColorChooser.previewPanelHolder\"");  register(Region.LABEL,"ColorChooser:\"ColorChooser.previewPanelHolder\":\"OptionPane.label\"");  register(Region.COMBO_BOX,"ComboBox");  register(Region.TEXT_FIELD,"ComboBox:\"ComboBox.textField\"");  register(Region.ARROW_BUTTON,"ComboBox:\"ComboBox.arrowButton\"");  register(Region.LABEL,"ComboBox:\"ComboBox.listRenderer\"");  register(Region.LABEL,"ComboBox:\"ComboBox.renderer\"");  register(Region.SCROLL_PANE,"\"ComboBox.scrollPane\"");  register(Region.FILE_CHOOSER,"FileChooser");  register(Region.INTERNAL_FRAME_TITLE_PANE,"InternalFrameTitlePane");  register(Region.INTERNAL_FRAME,"InternalFrame");  register(Region.INTERNAL_FRAME_TITLE_PANE,"InternalFrame:InternalFrameTitlePane");  register(Region.BUTTON,"InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.menuButton\"");  register(Region.BUTTON,"InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.iconifyButton\"");  register(Region.BUTTON,"InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.maximizeButton\"");  register(Region.BUTTON,"InternalFrame:InternalFrameTitlePane:\"InternalFrameTitlePane.closeButton\"");  register(Region.ROOT_PANE,"RootPane");  register(Region.DESKTOP_ICON,"DesktopIcon");  register(Region.TOOL_BAR,"ToolBar");  register(Region.TOOL_BAR_CONTENT,"ToolBar");  register(Region.TOOL_BAR_DRAG_WINDOW,"ToolBar");  register(Region.TOOL_BAR_SEPARATOR,"ToolBarSeparator");  register(Region.DESKTOP_PANE,"DesktopPane");  register(Region.LABEL,"Label");  register(Region.LIST,"List");  register(Region.LABEL,"List:\"List.cellRenderer\"");  register(Region.MENU_BAR,"MenuBar");  register(Region.MENU,"MenuBar:Menu");  register(Region.MENU_ITEM_ACCELERATOR,"MenuBar:Menu:MenuItemAccelerator");  register(Region.MENU_ITEM,"MenuItem");  register(Region.MENU_ITEM_ACCELERATOR,"MenuItem:MenuItemAccelerator");  register(Region.RADIO_BUTTON_MENU_ITEM,"RadioButtonMenuItem");  register(Region.MENU_ITEM_ACCELERATOR,"RadioButtonMenuItem:MenuItemAccelerator");  register(Region.CHECK_BOX_MENU_ITEM,"CheckBoxMenuItem");  register(Region.MENU_ITEM_ACCELERATOR,"CheckBoxMenuItem:MenuItemAccelerator");  register(Region.MENU,"Menu");  register(Region.MENU_ITEM_ACCELERATOR,"Menu:MenuItemAccelerator");  register(Region.POPUP_MENU,"PopupMenu");  register(Region.POPUP_MENU_SEPARATOR,"PopupMenuSeparator");  register(Region.OPTION_PANE,"OptionPane");  register(Region.SEPARATOR,"OptionPane:\"OptionPane.separator\"");  register(Region.PANEL,"OptionPane:\"OptionPane.messageArea\"");  register(Region.LABEL,"OptionPane:\"OptionPane.messageArea\":\"OptionPane.label\"");  register(Region.PANEL,"Panel");  register(Region.PROGRESS_BAR,"ProgressBar");  register(Region.SEPARATOR,"Separator");  register(Region.SCROLL_BAR,"ScrollBar");  register(Region.ARROW_BUTTON,"ScrollBar:\"ScrollBar.button\"");  register(Region.SCROLL_BAR_THUMB,"ScrollBar:ScrollBarThumb");  register(Region.SCROLL_BAR_TRACK,"ScrollBar:ScrollBarTrack");  register(SeaGlassRegion.SCROLL_BAR_CAP,"ScrollBar:ScrollBarCap");  register(Region.SCROLL_PANE,"ScrollPane");  register(Region.VIEWPORT,"Viewport");  register(Region.SLIDER,"Slider");  register(Region.SLIDER_THUMB,"Slider:SliderThumb");  register(Region.SLIDER_TRACK,"Slider:SliderTrack");  register(Region.SPINNER,"Spinner");  register(Region.PANEL,"Spinner:\"Spinner.editor\"");  register(Region.FORMATTED_TEXT_FIELD,"Spinner:Panel:\"Spinner.formattedTextField\"");  register(Region.ARROW_BUTTON,"Spinner:\"Spinner.previousButton\"");  register(Region.ARROW_BUTTON,"Spinner:\"Spinner.nextButton\"");  register(Region.SPLIT_PANE,"SplitPane");  register(Region.SPLIT_PANE_DIVIDER,"SplitPane:SplitPaneDivider");  register(Region.TABBED_PANE,"TabbedPane");  register(Region.TABBED_PANE_TAB,"TabbedPane:TabbedPaneTab");  register(SeaGlassRegion.TABBED_PANE_TAB_CLOSE_BUTTON,"TabbedPane:TabbedPaneTab:TabbedPaneTabClaseButton");  register(Region.TABBED_PANE_TAB_AREA,"TabbedPane:TabbedPaneTabArea");  register(Region.ARROW_BUTTON,"TabbedPane:TabbedPaneTabArea:\"TabbedPaneTabArea.button\"");  register(Region.TABBED_PANE_CONTENT,"TabbedPane:TabbedPaneContent");  register(Region.TABLE,"Table");  register(Region.LABEL,"Table:\"Table.cellRenderer\"");  register(Region.TABLE_HEADER,"TableHeader");  register(Region.LABEL,"TableHeader:\"TableHeader.renderer\"");  register(Region.TEXT_FIELD,"\"Table.editor\"");  register(Region.TEXT_FIELD,"\"Tree.cellEditor\"");  register(Region.TEXT_FIELD,"TextField");  register(SeaGlassRegion.SEARCH_FIELD_FIND_BUTTON,"TextField:SearchFieldFindButton");  register(SeaGlassRegion.SEARCH_FIELD_CANCEL_BUTTON,"TextField:SearchFieldCancelButton");  register(Region.FORMATTED_TEXT_FIELD,"FormattedTextField");  register(Region.PASSWORD_FIELD,"PasswordField");  register(Region.TEXT_AREA,"TextArea");  register(Region.TEXT_PANE,"TextPane");  register(Region.EDITOR_PANE,"EditorPane");  register(Region.BUTTON,"ToolBar:Button");  register(Region.TOGGLE_BUTTON,"ToolBar:ToggleButton");  register(Region.TOOL_TIP,"ToolTip");  register(Region.TREE,"Tree");  register(Region.TREE_CELL,"Tree:TreeCell");  register(Region.LABEL,"Tree:\"Tree.cellRenderer\"");}  }
class C{  @SuppressWarnings("unchecked") public SortedSet<E> headSet(E end){  return headSet(end,false);}  }
class C{  public boolean containsSampleHandler(SampleHandler handler){  return this.sampleHandlers.contains(handler);}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public GreaterThanOrEqual(){  super(Boolean.class,Number.class,Number.class);}  }
class C{  private void appendOptionGroup(final StringBuffer buff,final OptionGroup group){  if (!group.isRequired()) {    buff.append("[");  }  List optList=new ArrayList(group.getOptions());  Collections.sort(optList,getOptionComparator());  for (Iterator i=optList.iterator(); i.hasNext(); ) {    appendOption(buff,(Option)i.next(),true);    if (i.hasNext()) {      buff.append(" | ");    }  }  if (!group.isRequired()) {    buff.append("]");  }}  }
class C{  public static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public static SharedPreferencesList newInstance(){  SharedPreferencesList sharedPreferencesList=new SharedPreferencesList();  return sharedPreferencesList;}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder("  [" + policyIdentifier.toString());  s.append(policyQualifiers + "  ]\n");  return s.toString();}  }
class C{  public boolean isMaxXSet(int scale){  return mMaxX[scale] != -MathHelper.NULL_VALUE;}  }
class C{  public void registerExtension(String namespace){  if (namespaceIndex(namespace,m_extensions) == -1) {    int predef=namespaceIndex(namespace,m_predefExtensions);    if (predef != -1)     m_extensions.add(m_predefExtensions.get(predef)); else     if (!(m_unregisteredExtensions.contains(namespace)))     m_unregisteredExtensions.add(namespace);  }}  }
class C{  public Long hlen(final byte[] key){  checkIsInMulti();  client.hlen(key);  return client.getIntegerReply();}  }
class C{  @Override protected void fillChunkHeader(TempBuffer tBuf,int length){  if (length == 0)   throw new IllegalStateException();  byte[] buffer=tBuf.buffer();  buffer[0]=(byte)'\r';  buffer[1]=(byte)'\n';  buffer[2]=hexDigit(length >> 12);  buffer[3]=hexDigit(length >> 8);  buffer[4]=hexDigit(length >> 4);  buffer[5]=hexDigit(length);  buffer[6]=(byte)'\r';  buffer[7]=(byte)'\n';}  }
class C{  public String nodeId(){  return this.nodeId;}  }
class C{  public int numberOfFiles(){  return numberOfFiles;}  }
class C{  public void allowDetachToRelease(boolean allowRelease){}  }
class C{  public List<ParallelBenefit> calculateAllBenefits(Map<Integer,int[]> allSelectedExamples,int[] selectedAttributes){  Vector<ParallelBenefit> benefits=new Vector<ParallelBenefit>();  for (  int attribute : selectedAttributes) {    ParallelBenefit currentBenefit=calculateBenefit(allSelectedExamples,attribute);    if (currentBenefit != null) {      benefits.add(currentBenefit);    }  }  return benefits;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'AP_DB' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'BSSID' TEXT NOT NULL ,"+ "'SSID' TEXT NOT NULL ,"+ "'PASSWORD' TEXT NOT NULL ,"+ "'IS_LAST_SELECTED' INTEGER NOT NULL ,"+ "'CONFIGURED_FAILED_COUNT' INTEGER NOT NULL ,"+ "'DEVICE_BSSIDS' TEXT NOT NULL );");}  }
class C{  public boolean isSetIntSet(){  return this.intSet != null;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.METHOD_DECLARATOR___PARAMETER_LIST_1:    return ((InternalEList<?>)getParameterList_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private Collection<TestIdentifier> filterTests(){  mExcludedTestFilter.setTestInclusion(mClassName,mMethodName);  return mExcludedTestFilter.filter(mTests);}  }
class C{  public NormalityTestAction(DataEditor editor){  super("Normality Tests...");  this.dataEditor=editor;}  }
class C{  private RPProtectionRecommendation createRPProtectionRecommendationForMetroPoint(VirtualArray varray,List<VirtualArray> protectionVarrays,VirtualPool vpool,VirtualArray haVarray,VirtualPool haVpool,VirtualPoolCapabilityValuesWrapper capabilities,List<StoragePool> candidateActiveSourcePools,List<StoragePool> candidateStandbySourcePools,Map<VirtualArray,List<StoragePool>> candidateProtectionPools,Volume vpoolChangeVolume,Project project){  Set<ProtectionSystem> secondaryProtectionSystems=null;  placementStatus=new PlacementStatus();  secondaryPlacementStatus=new PlacementStatus();  int requestedResourceCount=capabilities.getResourceCount();  int totalSatisfiedCount=0;  List<URI> protectionVarrayURIs=new ArrayList<URI>();  for (  VirtualArray vArray : protectionVarrays) {    protectionVarrayURIs.add(vArray.getId());    placementStatus.getProcessedProtectionVArrays().put(vArray.getId(),false);  }  VirtualArray activeJournalVarray=(NullColumnValueGetter.isNotNullValue(vpool.getJournalVarray()) ? dbClient.queryObject(VirtualArray.class,URI.create(vpool.getJournalVarray())) : varray);  VirtualPool activeJournalVpool=(NullColumnValueGetter.isNotNullValue(vpool.getJournalVpool()) ? dbClient.queryObject(VirtualPool.class,URI.create(vpool.getJournalVpool())) : vpool);  VirtualArray standbyJournalVarray=(NullColumnValueGetter.isNotNullValue(vpool.getStandbyJournalVarray()) ? dbClient.queryObject(VirtualArray.class,URI.create(vpool.getStandbyJournalVarray())) : haVarray);  VirtualPool standbyJournalVpool=(NullColumnValueGetter.isNotNullValue(vpool.getStandbyJournalVpool()) ? dbClient.queryObject(VirtualPool.class,URI.create(vpool.getStandbyJournalVpool())) : haVpool);  List<VirtualArray> activeProtectionVarrays=new ArrayList<VirtualArray>();  for (  VirtualArray protectionVarray : protectionVarrays) {    if (!protectionVarray.getId().equals(haVarray.getId())) {      activeProtectionVarrays.add(protectionVarray);    }  }  List<VirtualArray> standbyProtectionVarrays=new ArrayList<VirtualArray>();  for (  VirtualArray protectionVarray : protectionVarrays) {    if (!protectionVarray.getId().equals(varray.getId())) {      standbyProtectionVarrays.add(protectionVarray);    }  }  placementStatus.setSrcVArray(varray.getLabel());  placementStatus.setSrcVPool(vpool.getLabel());  boolean secondaryRecommendationSolution=false;  int satisfiedSourceVolCount=0;  int totalRequestedResourceCount=capabilities.getResourceCount();  boolean isChangeVpool=(vpoolChangeVolume != null);  RPProtectionRecommendation rpProtectionRecommendation=new RPProtectionRecommendation();  List<Recommendation> sourcePoolRecommendations=new ArrayList<Recommendation>();  Map<URI,Set<ProtectionSystem>> standbyStoragePoolsToProtectionSystems=new HashMap<URI,Set<ProtectionSystem>>();  rpProtectionRecommendation.setVpoolChangeVolume(vpoolChangeVolume != null ? vpoolChangeVolume.getId() : null);  rpProtectionRecommendation.setVpoolChangeNewVpool(vpoolChangeVolume != null ? vpool.getId() : null);  rpProtectionRecommendation.setVpoolChangeProtectionAlreadyExists(vpoolChangeVolume != null ? vpoolChangeVolume.checkForRp() : false);  Recommendation changeVpoolSourceRecommendation=new Recommendation();  Recommendation changeVpoolStandbyRecommendation=new Recommendation();  if (isChangeVpool) {    if (null == vpoolChangeVolume.getAssociatedVolumes() || vpoolChangeVolume.getAssociatedVolumes().isEmpty()) {      _log.error("VPLEX volume {} has no backend volumes.",vpoolChangeVolume.forDisplay());      throw InternalServerErrorException.internalServerErrors.noAssociatedVolumesForVPLEXVolume(vpoolChangeVolume.forDisplay());    }    for (    String associatedVolume : vpoolChangeVolume.getAssociatedVolumes()) {      Volume assocVol=dbClient.queryObject(Volume.class,URI.create(associatedVolume));      if (assocVol.getVirtualArray().equals(varray.getId())) {        changeVpoolSourceRecommendation.setSourceStoragePool(assocVol.getPool());        StoragePool pool=dbClient.queryObject(StoragePool.class,assocVol.getPool());        changeVpoolSourceRecommendation.setSourceStorageSystem(pool.getStorageDevice());        changeVpoolSourceRecommendation.setResourceCount(1);        sourcePoolRecommendations.add(changeVpoolSourceRecommendation);        _log.info(String.format("RP Placement : Change Virtual Pool - Active source pool already exists, reuse pool: [%s] [%s].",pool.getLabel().toString(),pool.getId().toString()));      } else       if (assocVol.getVirtualArray().equals(haVarray.getId())) {        changeVpoolStandbyRecommendation.setSourceStoragePool(assocVol.getPool());        StoragePool pool=dbClient.queryObject(StoragePool.class,assocVol.getPool());        changeVpoolStandbyRecommendation.setSourceStorageSystem(pool.getStorageDevice());        changeVpoolStandbyRecommendation.setResourceCount(1);        _log.info(String.format("RP Placement : Change Virtual Pool - Standby source pool already exists, reuse pool: [%s] [%s].",pool.getLabel().toString(),pool.getId().toString()));      }    }    satisfiedSourceVolCount=1;  } else {    sourcePoolRecommendations=getRecommendedPools(rpProtectionRecommendation,varray,vpool,null,null,capabilities,RPHelper.SOURCE,null);  }  if (sourcePoolRecommendations == null || sourcePoolRecommendations.isEmpty()) {    _log.error(String.format("RP Placement : No matching storage pools found for the source varray: [%s. " + "There are no storage pools that match the passed vpool parameters and protocols and/or there are " + "no pools that have enough capacity to hold at least one resource of the requested size.",varray.getLabel()));    throw APIException.badRequests.noMatchingStoragePoolsForVpoolAndVarray(vpool.getLabel(),varray.getLabel());  }  _log.info(String.format("RP Placement : Determining RP placement for the primary (active) MetroPoint cluster for %s resources.",totalRequestedResourceCount));  int remainingPossiblePrimarySrcPoolSolutions=sourcePoolRecommendations.size();  for (  Recommendation recommendedPool : sourcePoolRecommendations) {    StoragePool sourcePool=dbClient.queryObject(StoragePool.class,recommendedPool.getSourceStoragePool());    --remainingPossiblePrimarySrcPoolSolutions;    satisfiedSourceVolCount=(recommendedPool.getResourceCount() >= requestedResourceCount) ? requestedResourceCount : recommendedPool.getResourceCount();    Set<ProtectionSystem> primaryProtectionSystems=new HashSet<ProtectionSystem>();    ProtectionSystem cgProtectionSystem=getCgProtectionSystem(capabilities.getBlockConsistencyGroup());    if (cgProtectionSystem != null) {      BlockConsistencyGroup cg=dbClient.queryObject(BlockConsistencyGroup.class,capabilities.getBlockConsistencyGroup());      _log.info(String.format("RP Placement : Narrowing down placement to use protection system %s, which is currently used " + "by RecoverPoint consistency group %s.",cgProtectionSystem.getLabel(),cg));      primaryProtectionSystems.add(cgProtectionSystem);    } else {      primaryProtectionSystems=getProtectionSystemsForStoragePool(sourcePool,varray,true);      if (primaryProtectionSystems.isEmpty()) {        continue;      }    }    List<ProtectionSystem> primaryProtectionSystemsList=sortProtectionSystems(primaryProtectionSystems);    for (    ProtectionSystem primaryProtectionSystem : primaryProtectionSystemsList) {      Calendar cgLastCreated=primaryProtectionSystem.getCgLastCreatedTime();      _log.info(String.format("RP Placement : Attempting to use protection system [%s], which was last used to create a CG on [%s].",primaryProtectionSystem.getLabel(),cgLastCreated != null ? cgLastCreated.getTime().toString() : "N/A"));      List<String> primaryAssociatedStorageSystems=getCandidateVisibleStorageSystems(sourcePool,primaryProtectionSystem,varray,activeProtectionVarrays,true);      if (primaryAssociatedStorageSystems.isEmpty()) {        _log.info(String.format("RP Placement: Protection System %s does not have an rp site cluster connected to Storage pool %s ",primaryProtectionSystem.getLabel(),sourcePool.getLabel()));        continue;      }      for (      String primaryAssociatedStorageSystem : primaryAssociatedStorageSystems) {        rpProtectionRecommendation.setProtectionDevice(primaryProtectionSystem.getId());        _log.info(String.format("RP Placement : Build MetroPoint Active Recommendation..."));        RPRecommendation sourceRec=buildSourceRecommendation(primaryAssociatedStorageSystem,varray,vpool,primaryProtectionSystem,sourcePool,capabilities,satisfiedSourceVolCount,placementStatus,vpoolChangeVolume,false);        if (sourceRec == null) {          _log.warn(String.format("RP Placement : Could not create MetroPoint Active Recommendation using [%s], continuing...",primaryAssociatedStorageSystem));          continue;        }        URI primarySourceStorageSystemURI=sourceRec.getVirtualVolumeRecommendation().getVPlexStorageSystem();        if (rpProtectionRecommendation.getSourceJournalRecommendation() == null) {          _log.info(String.format("RP Placement : Build MetroPoint Active Journal Recommendation..."));          RPRecommendation activeJournalRecommendation=buildJournalRecommendation(rpProtectionRecommendation,sourceRec.getInternalSiteName(),vpool.getJournalSize(),activeJournalVarray,activeJournalVpool,primaryProtectionSystem,capabilities,totalRequestedResourceCount,vpoolChangeVolume,false);          if (activeJournalRecommendation == null) {            _log.warn(String.format("RP Placement : Could not create MetroPoint Active Journal Recommendation, continuing..."));            continue;          }          rpProtectionRecommendation.setSourceJournalRecommendation(activeJournalRecommendation);        }        rpProtectionRecommendation.getSourceRecommendations().add(sourceRec);        _log.info("RP Placement : An RP source placement solution has been identified for the MetroPoint primary (active) cluster.");        if (findSolution(rpProtectionRecommendation,sourceRec,varray,vpool,activeProtectionVarrays,capabilities,satisfiedSourceVolCount,true,null,project)) {          _log.info("RP Placement : An RP target placement solution has been identified for the MetroPoint primary (active) cluster.");          _log.info("RP Placement : Determining RP placement for the secondary (standby) MetroPoint cluster.");          secondaryRecommendationSolution=false;          List<Recommendation> secondaryPoolsRecommendation=new ArrayList<Recommendation>();          if (isChangeVpool) {            secondaryPoolsRecommendation.add(changeVpoolStandbyRecommendation);          } else {            secondaryPoolsRecommendation=getRecommendedPools(rpProtectionRecommendation,haVarray,haVpool,null,null,capabilities,RPHelper.TARGET,null);          }          secondaryPlacementStatus.setSrcVArray(haVarray.getLabel());          secondaryPlacementStatus.setSrcVPool(haVpool.getLabel());          for (          Recommendation secondaryPoolRecommendation : secondaryPoolsRecommendation) {            StoragePool standbySourcePool=dbClient.queryObject(StoragePool.class,secondaryPoolRecommendation.getSourceStoragePool());            if (standbyStoragePoolsToProtectionSystems.containsKey(standbySourcePool.getId())) {              secondaryProtectionSystems=standbyStoragePoolsToProtectionSystems.get(standbySourcePool.getId());            } else {              secondaryProtectionSystems=getProtectionSystemsForStoragePool(standbySourcePool,haVarray,true);              if (secondaryProtectionSystems.isEmpty()) {                continue;              }              standbyStoragePoolsToProtectionSystems.put(standbySourcePool.getId(),secondaryProtectionSystems);            }            ProtectionSystem selectedSecondaryProtectionSystem=null;            for (            ProtectionSystem secondaryProtectionSystem : secondaryProtectionSystems) {              if (secondaryProtectionSystem.getId().equals(rpProtectionRecommendation.getProtectionDevice())) {                selectedSecondaryProtectionSystem=secondaryProtectionSystem;                break;              }            }            if (selectedSecondaryProtectionSystem == null) {              _log.info(String.format("RP Placement: Secondary source storage pool %s " + " does not have connectivity to the selected primary protection system.",standbySourcePool.getLabel()));              continue;            } else {              List<String> secondaryAssociatedStorageSystems=getCandidateVisibleStorageSystems(standbySourcePool,selectedSecondaryProtectionSystem,haVarray,activeProtectionVarrays,true);              if (secondaryAssociatedStorageSystems.isEmpty()) {                _log.info("RP Placement: Protection System " + selectedSecondaryProtectionSystem.getLabel() + " does not have an rp site cluster connected to Storage pool "+ standbySourcePool.getLabel());                continue;              }              Set<String> sortedSecondaryAssociatedStorageSystems=new LinkedHashSet<String>();              Set<String> sameAsPrimary=new HashSet<String>();              String secondarySourceInternalSiteName="";              for (              String secondaryAssociatedStorageSystem : secondaryAssociatedStorageSystems) {                secondarySourceInternalSiteName=ProtectionSystem.getAssociatedStorageSystemSiteName(secondaryAssociatedStorageSystem);                URI secondarySourceStorageSystemURI=ConnectivityUtil.findStorageSystemBySerialNumber(ProtectionSystem.getAssociatedStorageSystemSerialNumber(secondaryAssociatedStorageSystem),dbClient,StorageSystemType.BLOCK);                if (secondaryAssociatedStorageSystem.equals(sourceRec.getRpSiteAssociateStorageSystem())) {                  sameAsPrimary.add(secondaryAssociatedStorageSystem);                } else                 if (secondarySourceStorageSystemURI.equals(primarySourceStorageSystemURI) && !secondarySourceInternalSiteName.equals(sourceRec.getInternalSiteName())) {                  sortedSecondaryAssociatedStorageSystems.add(secondaryAssociatedStorageSystem);                }              }              sortedSecondaryAssociatedStorageSystems.addAll(sameAsPrimary);              for (              String secondaryAssociatedStorageSystem : sortedSecondaryAssociatedStorageSystems) {                _log.info(String.format("RP Placement : Build MetroPoint Standby Recommendation..."));                RPRecommendation secondaryRpRecommendation=buildSourceRecommendation(secondaryAssociatedStorageSystem,haVarray,haVpool,selectedSecondaryProtectionSystem,standbySourcePool,capabilities,satisfiedSourceVolCount,secondaryPlacementStatus,null,true);                if (secondaryRpRecommendation == null) {                  _log.warn(String.format("RP Placement : Could not create MetroPoint Standby Recommendation using [%s], continuing...",secondaryAssociatedStorageSystem));                  continue;                }                if (rpProtectionRecommendation.getStandbyJournalRecommendation() == null) {                  _log.info(String.format("RP Placement : Build MetroPoint Standby Journal Recommendation..."));                  RPRecommendation standbyJournalRecommendation=buildJournalRecommendation(rpProtectionRecommendation,secondarySourceInternalSiteName,vpool.getJournalSize(),standbyJournalVarray,standbyJournalVpool,primaryProtectionSystem,capabilities,totalRequestedResourceCount,vpoolChangeVolume,true);                  if (standbyJournalRecommendation == null) {                    _log.warn(String.format("RP Placement : Could not create MetroPoint Standby Journal Recommendation, continuing..."));                    continue;                  }                  rpProtectionRecommendation.setStandbyJournalRecommendation(standbyJournalRecommendation);                }                sourceRec.setHaRecommendation(secondaryRpRecommendation);                if (findSolution(rpProtectionRecommendation,secondaryRpRecommendation,haVarray,vpool,standbyProtectionVarrays,capabilities,satisfiedSourceVolCount,true,sourceRec,project)) {                  _log.info("RP Placement : An RP target placement solution has been identified for the " + "MetroPoint secondary (standby) cluster.");                  secondaryRecommendationSolution=true;                  break;                } else {                  _log.info("RP Placement : Unable to find a suitable solution, continuining to find other solutions.");                  continue;                }              }              if (secondaryRecommendationSolution) {                break;              } else {                continue;              }            }          }          if (!secondaryRecommendationSolution) {            _log.info("RP Placement : Unable to find MetroPoint secondary cluster placement recommendation that " + "jives with primary cluster recommendation.  Need to find a new primary recommendation.");            break;          }          requestedResourceCount=requestedResourceCount - satisfiedSourceVolCount;          totalSatisfiedCount+=satisfiedSourceVolCount;          if (totalSatisfiedCount >= totalRequestedResourceCount) {            rpProtectionRecommendation.setResourceCount(totalSatisfiedCount);            if (!verifyPlacement(primaryProtectionSystem,rpProtectionRecommendation,rpProtectionRecommendation.getResourceCount())) {              continue;            }            return rpProtectionRecommendation;          } else {            break;          }        } else {          _log.info(String.format("RP Placement : Could not find a solution against protection system %s and internal " + "cluster name %s",primaryProtectionSystem.getLabel(),sourceRec.getInternalSiteName()));          rpProtectionRecommendation=getNewProtectionRecommendation(vpoolChangeVolume,vpool);        }      }      rpProtectionRecommendation=getNewProtectionRecommendation(vpoolChangeVolume,vpool);    }  }  if ((remainingPossiblePrimarySrcPoolSolutions == 0) && totalSatisfiedCount < capabilities.getResourceCount()) {    _log.error("Could not find a MetroPoint placement solution.  In a MetroPoint consistency group, there can " + "exist at most one remote copy and from zero to two local copies.  If there is no remote copy, " + "there must be two local copies, one at each side of the VPLEX Metro.");    throw APIException.badRequests.cannotFindSolutionForRP(buildMetroProintPlacementStatusString());  }  _log.error("ViPR could not find matching target storage pools that could be protected via RecoverPoint");  _log.error("Could not find a MetroPoint placement solution.  In a MetroPoint consistency group, there can " + "exist at most one remote copy and from zero to two local copies.  If there is no remote copy, " + "there must be two local copies, one at each side of the VPLEX Metro.");  throw APIException.badRequests.cannotFindSolutionForRP(buildMetroProintPlacementStatusString());}  }
class C{  @Override public String toString(){  return "P(" + variable + "="+ value.toString()+ ")=1";}  }
class C{  public boolean isReport(){  Object oo=get_Value(COLUMNNAME_IsReport);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int E(){  return E;}  }
class C{  public void hideNotify(){  keyRepeatCharged=false;  longPressCharged=false;  longPointerCharged=false;  pointerPressedAndNotReleasedOrDragged=false;  addNotifyEvent(HIDE_NOTIFY);}  }
class C{  public ObserveRequest(ContentFormat format,int objectId,int objectInstanceId){  this(format,new LwM2mPath(objectId,objectInstanceId),null);}  }
class C{  public synchronized String toPlain(){  StringBuffer sb=new StringBuffer();  int length=size();  for (int i=1; i <= length; i++) {    sb.append(i);    sb.append(": ");    sb.append(get(i - 1,null));    sb.append("\n");  }  return sb.toString();}  }
class C{  protected double singleVariance(double s,double sS,double weight){  return sS - ((s * s) / weight);}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public static float min(final float... array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  }  Validate.isTrue(array.length != 0,"Array cannot be empty.");  float min=array[0];  for (int i=1; i < array.length; i++) {    min=min(array[i],min);  }  return min;}  }
class C{  public CcdRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_3__MORE_CODE_1:    return ((InternalEList<?>)getMoreCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void actionPerformed(ActionEvent e){  JFileChooser chooser=getJFileChooser();  chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);  chooser.showOpenDialog((Component)this.graphEditable);  final File file=chooser.getSelectedFile();  if (file == null) {    System.out.println("File was null.");    return;  }  Preferences.userRoot().put("fileSaveLocation",file.getParent());  Graph graph=GraphUtils.loadGraph(file);  GraphUtils.circleLayout(graph,200,200,150);  graphEditable.setGraph(graph);}  }
class C{  public String generateLabelString(XYDataset dataset,int series,int item){  String result;  Object[] items=createItemArray(dataset,series,item);  result=MessageFormat.format(this.formatString,items);  return result;}  }
class C{  public MBRTest(String name){  super(name);}  }
class C{  public void destroy(MesosClusterFactory factory){  LOGGER.debug("Cluster " + getClusterId() + " - destroy");  Marathon marathon=getMarathon();  if (marathon != null) {    marathon.killAllApps();  }  if (memberPocesses.size() > 0) {    for (int i=memberPocesses.size() - 1; i >= 0; i--) {      ClusterProcess container=memberPocesses.get(i);      LOGGER.debug("Removing container [" + container.getContainerId() + "]");      try {        container.remove();      } catch (      NotFoundException e) {        LOGGER.error(String.format("Cannot remove container %s, maybe it's already dead?",container.getContainerId()));      }    }  }  this.running=false;  this.memberPocesses.clear();  if (clusterId != null) {    factory.destroyRunningCluster(clusterId);    File sandboxLocation=new File(getHostDir(),".minimesos/sandbox-" + clusterId);    if (sandboxLocation.exists()) {      try {        FileUtils.forceDelete(sandboxLocation);      } catch (      IOException e) {        String msg=String.format("Failed to force delete the cluster sandbox at %s",sandboxLocation.getAbsolutePath());        throw new MinimesosException(msg,e);      }    }  } else {    LOGGER.info("Minimesos cluster is not running");  }  this.running=false;}  }
class C{  public void imageMode(int mode){  g.imageMode(mode);}  }
class C{  public boolean isAvailable(){  Presence directedPresence=new Presence(Presence.Type.available);  directedPresence.setTo(workgroupJID);  PacketFilter typeFilter=new PacketTypeFilter(Presence.class);  PacketFilter fromFilter=new FromContainsFilter(workgroupJID);  PacketCollector collector=connection.createPacketCollector(new AndFilter(fromFilter,typeFilter));  connection.sendPacket(directedPresence);  Presence response=(Presence)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());  collector.cancel();  if (response == null) {    return false;  } else   if (response.getError() != null) {    return false;  } else {    return Presence.Type.available == response.getType();  }}  }
class C{  public String numCentroidsTipText(){  return "The number of centroids to use.";}  }
class C{  public void retain(){  bblList.add(this);}  }
class C{  public static final String versionQualifier(IN4JSProject project){  DeclaredVersion ver=project.getVersion();  return ver.getQualifier();}  }
class C{  public int indexOf(final String str,int startIndex){  startIndex=(startIndex < 0 ? 0 : startIndex);  if (str == null || startIndex >= size) {    return -1;  }  final int strLen=str.length();  if (strLen == 1) {    return indexOf(str.charAt(0),startIndex);  }  if (strLen == 0) {    return startIndex;  }  if (strLen > size) {    return -1;  }  final char[] thisBuf=buffer;  final int len=size - strLen + 1;  outer:   for (int i=startIndex; i < len; i++) {    for (int j=0; j < strLen; j++) {      if (str.charAt(j) != thisBuf[i + j]) {        continue outer;      }    }    return i;  }  return -1;}  }
class C{  public void put(String key,Short value){  mValues.put(key,value);}  }
class C{  public static int dayOfWeek(long day){  long[] remainder=new long[1];  floorDivide(day + Calendar.THURSDAY,7,remainder);  int dayOfWeek=(int)remainder[0];  dayOfWeek=(dayOfWeek == 0) ? 7 : dayOfWeek;  return dayOfWeek;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_ENTITY___TRACE_OPTIONS_1:    getTraceOptions_1().clear();  getTraceOptions_1().addAll((Collection<? extends TraceOptions_>)newValue);return;case UmplePackage.TRACE_ENTITY___TRACE_ENTITY_1:setTrace_entity_1((String)newValue);return;case UmplePackage.TRACE_ENTITY___ANONYMOUS_TRACE_ENTITY_11:getAnonymous_traceEntity_1_1().clear();getAnonymous_traceEntity_1_1().addAll((Collection<? extends Anonymous_traceEntity_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:45.977 -0500",hash_original_method="28FA3A141006A5A6B2A507757230F8F2",hash_generated_method="D9F14D5D8B0B46ED2E68775F26CEFAB0") public void retryForeverUsingLastTimeout(){  mRetryCount=mMaxRetryCount;  mRetryForever=true;  if (DBG)   log("retryForeverUsingLastTimeout: " + mRetryForever + ", "+ mRetryCount);}  }
class C{  @Inject DistributedZookeeperSchedulingService(AlertService alertService,UserService userService,ServiceManagementService serviceManagementRecordService,AuditService auditService,SystemConfiguration config){  super(config);  requireArgument(alertService != null,"Alert service cannot be null.");  requireArgument(userService != null,"User service cannot be null.");  requireArgument(serviceManagementRecordService != null,"Service management record service cannot be null.");  requireArgument(auditService != null,"Audit service cannot be null.");  requireArgument(config != null,"System configuration cannot be null.");  _alertService=alertService;  _userService=userService;  _serviceManagementRecordService=serviceManagementRecordService;  _auditService=auditService;  _configuration=config;}  }
class C{  private void initLocator(final ServletContextUriLocator locator){  final Injector injector=InjectorBuilder.create(new BaseWroManagerFactory()).build();  injector.inject(locator);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.692 -0500",hash_original_method="076AF69FA4452B4975423A6D4D7C01B2",hash_generated_method="DC94DD6546D86B4681C6341FA8C70624") private static int tryGetISODigit(char ch){  if ('0' <= ch && ch <= '9') {    return ch - '0';  } else {    return -1;  }}  }
class C{  @SuppressWarnings("unused") public static void bindToRegister(byte value){}  }
class C{  @Override public Type NUMBER(){  return numberType;}  }
class C{  private void throwIfValueChangedConflict(TableReference table,Map<Cell,byte[]> writes,Set<CellConflict> spanningWrites,Set<CellConflict> dominatingWrites,LockRefreshToken commitLocksToken){  Map<Cell,CellConflict> cellToConflict=Maps.newHashMap();  Map<Cell,Long> cellToTs=Maps.newHashMap();  for (  CellConflict c : Sets.union(spanningWrites,dominatingWrites)) {    cellToConflict.put(c.cell,c);    cellToTs.put(c.cell,c.theirStart + 1);  }  Map<Cell,byte[]> oldValues=getIgnoringLocalWrites(table,cellToTs.keySet());  Map<Cell,Value> conflictingValues=keyValueService.get(table,cellToTs);  Set<Cell> conflictingCells=Sets.newHashSet();  for (  Entry<Cell,Long> cellEntry : cellToTs.entrySet()) {    Cell cell=cellEntry.getKey();    if (!writes.containsKey(cell)) {      Validate.isTrue(false,"Missing write for cell: " + cellToConflict.get(cell) + " for table "+ table);    }    if (!conflictingValues.containsKey(cell)) {      throwIfExternalAndCommitLocksNotValid(commitLocksToken);      Validate.isTrue(false,"Missing conflicting value for cell: " + cellToConflict.get(cell) + " for table "+ table);    }    if (conflictingValues.get(cell).getTimestamp() != (cellEntry.getValue() - 1)) {      throwIfExternalAndCommitLocksNotValid(commitLocksToken);      Validate.isTrue(false,"Wrong timestamp for cell in table " + table + " Expected: "+ cellToConflict.get(cell)+ " Actual: "+ conflictingValues.get(cell));    }    @Nullable byte[] oldVal=oldValues.get(cell);    byte[] writeVal=writes.get(cell);    byte[] conflictingVal=conflictingValues.get(cell).getContents();    if (!Transactions.cellValuesEqual(oldVal,writeVal) || !Arrays.equals(writeVal,conflictingVal)) {      conflictingCells.add(cell);    } else     if (log.isInfoEnabled()) {      log.info("Another transaction committed to the same cell before us but their value was the same." + " Cell: " + cell + " Table: "+ table);    }  }  if (conflictingCells.isEmpty()) {    return;  }  Predicate<CellConflict> conflicting=Predicates.compose(Predicates.in(conflictingCells),CellConflict.getCellFunction());  throw TransactionConflictException.create(table,getStartTimestamp(),Sets.filter(spanningWrites,conflicting),Sets.filter(dominatingWrites,conflicting),System.currentTimeMillis() - timeCreated);}  }
class C{  public SootMethod lookupGetUi_ID(Integer intId){  logger.info("calling lookupGetView_ID {}) ",String.format("%08x",intId));  UISootObject obj=mUiObjectTable.get(intId);  if (obj == null) {    logger.warn("Object for id {} info is not available",String.format("%x",intId));    return null;  }  return obj.lookupMethod;}  }
class C{  public int record_log(Properties ctx,int success,String objectName,String objectType,int objectID,int objectIDBackup,String objectStatus,String tableName,int AD_Table_ID) throws SAXException {  StringBuffer recordLayout=new StringBuffer();  int id=0;  TransformerHandler hd_document=getLogDocument(ctx);  AttributesImpl attsOut=new AttributesImpl();  String result=success == 1 ? "Success" : "Failure";  recordLayout.append("Type:").append(objectType).append("  -   Name:").append(objectName).append("  -  ID:").append(objectID).append("  -  Action:").append(objectStatus).append("  -  " + result);  hd_document.startElement("","",result,attsOut);  hd_document.characters(recordLayout.toString().toCharArray(),0,recordLayout.length());  hd_document.endElement("","",result);  X_AD_Package_Imp_Detail detail=new X_AD_Package_Imp_Detail(ctx,0,getTrxName(ctx));  detail.setAD_Package_Imp_ID(getPackageImpId(ctx));  detail.setAD_Org_ID(Env.getAD_Org_ID(ctx));  detail.setType(objectType);  detail.setName(objectName);  detail.setAction(objectStatus);  detail.setSuccess(result);  detail.setAD_Original_ID(objectID);  detail.setAD_Backup_ID(objectIDBackup);  detail.setTableName(tableName);  detail.setAD_Table_ID(AD_Table_ID);  if (!detail.save(getTrxName(ctx)))   log.info("Insert to import detail failed");  id=detail.get_ID();  return id;}  }
class C{  public static void w(String msg,Throwable thr){  log(LEVEL.WARN,null,msg,thr);}  }
class C{  public Expression string(Factory f,SourceCode cfml) throws TemplateException {  cfml.removeSpace();  char quoter=cfml.getCurrentLower();  if (quoter != '"' && quoter != '\'')   return null;  StringBuffer str=new StringBuffer();  boolean insideSpecial=false;  Position line=cfml.getPosition();  while (cfml.hasNext()) {    cfml.next();    if (cfml.isCurrent(specialChar)) {      insideSpecial=!insideSpecial;      str.append(specialChar);    } else     if (!insideSpecial && cfml.isCurrent(quoter)) {      if (cfml.isNext(quoter)) {        cfml.next();        str.append(quoter);      } else {        break;      }    } else {      str.append(cfml.getCurrent());    }  }  if (!cfml.forwardIfCurrent(quoter))   throw new TemplateException(cfml,"Invalid Syntax Closing [" + quoter + "] not found");  LitString rtn=f.createLitString(str.toString(),line,cfml.getPosition());  cfml.removeSpace();  return rtn;}  }
class C{  @Override public boolean supportsMixedCaseIdentifiers(){  debugCodeCall("supportsMixedCaseIdentifiers");  return false;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", part: ");  result.append(part);  result.append(", strategy: ");  result.append(strategy);  result.append(", expression: ");  result.append(expression);  result.append(')');  return result.toString();}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public static void dropIndex(Connection conn,String schema,String table) throws SQLException {  init(conn);  PreparedStatement prep=conn.prepareStatement("DELETE FROM " + SCHEMA + ".INDEXES WHERE SCHEMA=? AND TABLE=?");  prep.setString(1,schema);  prep.setString(2,table);  int rowCount=prep.executeUpdate();  if (rowCount == 0) {    return;  }  reindex(conn);}  }
class C{  public WritableByteChannel create(GcsPath path,String type) throws IOException {  GoogleCloudStorageWriteChannel channel=new GoogleCloudStorageWriteChannel(executorService,storageClient,new ClientRequestHelper<StorageObject>(),path.getBucket(),path.getObject(),AsyncWriteChannelOptions.newBuilder().build(),new ObjectWriteConditions(),Collections.<String,String>emptyMap(),type);  if (uploadBufferSizeBytes != null) {    channel.setUploadBufferSize(uploadBufferSizeBytes);  }  channel.initialize();  return channel;}  }
class C{  protected byte[] computeSHAdigest(final byte[] value){  try {    return MessageDigest.getInstance("SHA").digest(value);  } catch (  Exception e) {    throw new UnsupportedOperationException(e.toString());  }}  }
class C{  public IIOException(String message,Throwable cause){  super(message);  initCause(cause);}  }
class C{  public static void doMain(String[] args){  String job="java:creatingCellRDD";  String KEYSPACENAME="test";  String TABLENAME="tweets";  String CQLPORT="9042";  String RPCPORT="9160";  String HOST="127.0.0.1";  ContextProperties p=new ContextProperties(args);  SparkConf sparkConf=new SparkConf().setMaster(p.getCluster()).setAppName(job).setJars(p.getJars()).setSparkHome(p.getSparkHome()).set("spark.serializer","org.apache.spark.serializer.KryoSerializer").set("spark.kryo.registrator","com.stratio.deep.serializer.DeepKryoRegistrator");  SparkContext sc=new SparkContext(p.getCluster(),job,sparkConf);  LOG.info("spark.serializer: " + System.getProperty("spark.serializer"));  LOG.info("spark.kryo.registrator: " + System.getProperty("spark.kryo.registrator"));  DeepSparkContext deepContext=new DeepSparkContext(sc);  ExtractorConfig<Cells> config=new ExtractorConfig();  config.setExtractorImplClass(CassandraCellExtractor.class);  Map<String,Serializable> values=new HashMap<>();  values.put(ExtractorConstants.KEYSPACE,KEYSPACENAME);  values.put(ExtractorConstants.TABLE,TABLENAME);  values.put(ExtractorConstants.CQLPORT,CQLPORT);  values.put(ExtractorConstants.RPCPORT,RPCPORT);  values.put(ExtractorConstants.HOST,HOST);  config.setValues(values);  RDD rdd=deepContext.createRDD(config);  counts=rdd.count();  LOG.info("Num of rows: " + counts);  deepContext.stop();}  }
class C{  @SuppressWarnings("unchecked") private int insertFromValues(String sql,Insert insert,String index,int maxRequestsPerBulk) throws SQLException {  Heading heading=new Heading();  QueryState state=new BasicQueryState(sql,heading,this.props);  List<Object> values=updateParser.parse(insert,state);  if (state.hasException())   throw state.getException();  if (heading.hasLabel("_index") || heading.hasLabel("_type"))   throw new SQLException("Not possible to set _index and _type fields");  String[] indexAndType=this.getIndexAndType(insert.getTarget().toString(),sql,"into\\s+","\\s+values",index);  index=indexAndType[0];  String type=indexAndType[1];  if (values.size() % heading.getColumnCount() != 0)   throw new SQLException("Number of columns does not match number of values for one of the inserts");  List<IndexRequestBuilder> indexReqs=new ArrayList<IndexRequestBuilder>();  int indexCount=0;  int valueIdx=0;  while (valueIdx < values.size()) {    HashMap<String,Object> fieldValues=new HashMap<String,Object>();    String id=null;    for (    Column col : heading.columns()) {      Object value=values.get(valueIdx);      valueIdx++;      if (col.getColumn().equals("_id")) {        id=value.toString();        continue;      }      if (col.getColumn().indexOf('.') == -1) {        fieldValues.put(col.getColumn(),value);        continue;      }      Map<String,Object> map=fieldValues;      String[] objectDef=col.getColumn().split("\\.");      for (int k=0; k < objectDef.length; k++) {        String key=objectDef[k];        if (k == objectDef.length - 1)         map.put(key,value); else {          if (!map.containsKey(key))           map.put(key,new HashMap<String,Object>());          map=(Map<String,Object>)map.get(key);        }      }    }    IndexRequestBuilder indexReq=client.prepareIndex().setIndex(index).setType(type);    if (id != null)     indexReq.setId(id);    indexReq.setSource(fieldValues);    indexReqs.add(indexReq);    if (indexReqs.size() >= maxRequestsPerBulk) {      indexCount+=this.execute(indexReqs,maxRequestsPerBulk);      indexReqs.clear();    }  }  if (indexReqs.size() > 0)   indexCount+=this.execute(indexReqs,maxRequestsPerBulk);  return indexCount;}  }
class C{  public int rank(){  return new SingularValueDecomposition(this).rank();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  @getter(GamaMessage.UNREAD) public boolean isUnread(){  return unread;}  }
class C{  public synchronized void startListening(Context context){  if (!mListening) {    mContext=context;    IntentFilter filter=new IntentFilter();    filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);    context.registerReceiver(mReceiver,filter);    mListening=true;  }}  }
class C{  private void assertArrayFalse(boolean[] array){  assertArrayFalse(null,array);}  }
class C{  public static FileNamePatternSearchScope newSearchScope(String description,IResource[] resources,boolean includeDerived){  return new FileNamePatternSearchScope(description,removeRedundantEntries(resources,includeDerived),includeDerived);}  }
class C{  public XPathContext(boolean recursiveVarContext){  m_prefixResolvers.push(null);  m_currentNodes.push(DTM.NULL);  m_currentExpressionNodes.push(DTM.NULL);  m_saxLocations.push(null);  m_variableStacks=recursiveVarContext ? new VariableStack() : new VariableStack(1);}  }
class C{  protected boolean handle(){  return false;}  }
class C{  public static <T>Response<T> success(T result,Map<String,String> headers){  return new Response<T>(result,headers);}  }
class C{  public Vertex processUnderstanding(Vertex input,Vertex sentence,float correctnessRequired,Map<Vertex,Vertex> variables,Network network){  if (!sentence.hasRelationship(Primitive.WORD)) {    return null;  }  Network readOnlyMemory=getBot().memory().getLongTermMemory();  Vertex language=readOnlyMemory.createVertex(getPrimitive());  List<Vertex> states=language.orderedRelations(Primitive.STATE);  if (states == null || states.isEmpty()) {    return null;  }  List<Vertex> compoundWords=processCompoundWords(sentence.orderedRelationships(Primitive.WORD));  Vertex compoundSentence=sentence;  if (compoundWords != null) {    if (compoundWords != null) {      compoundSentence=network.createInstance(Primitive.SENTENCE);      for (int index=0; index < compoundWords.size(); index++) {        Vertex word=compoundWords.get(index);        compoundSentence.addRelationship(Primitive.WORD,word,index);      }    }  }  List<Vertex> inputs=new ArrayList<Vertex>(1);  inputs.add(input);  Vertex response=checkState(null,input,compoundSentence,states,0,0,inputs,variables,new ArrayList<Vertex>(),correctnessRequired,network);  if ((response == null) && (compoundWords != null)) {    variables=new HashMap<Vertex,Vertex>();    SelfCompiler.addGlobalVariables(input,sentence,network,variables);    response=checkState(null,input,sentence,states,0,0,inputs,variables,new ArrayList<Vertex>(),correctnessRequired,network);  }  if (response != null) {    response=getWord(response,network);    if (response != null) {      log("Sentence understood",Level.FINE,sentence,response);    } else {      log("Sentence understood but no words",Level.FINE,sentence);      response=null;    }  } else {    log("Sentence not understood",Level.FINE,sentence);  }  return response;}  }
class C{  @Override public void handleMessage(Message msg){  RefreshUIActivity activity=this.mActivity.get();  if (activity != null) {switch (msg.what) {case HANDLER_SUCCESS:{        activity.handlerTV.setText("Use: Handler.sendMessage");        break;      }  }}}  }
class C{  private void disableSpellingSuggestions(boolean disable){  int start=mMentionsEditText.getSelectionStart();  int end=mMentionsEditText.getSelectionEnd();  if (start == -1 || end == -1) {    return;  }  if (disable) {    mOriginalInputType=mMentionsEditText.getInputType();  }  mMentionsEditText.setRawInputType(disable ? InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS : mOriginalInputType);  mMentionsEditText.setSelection(start,end);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  private static int readKeyPairs(final byte[] data,int start,final PdfObject pdfObject){  final ArrayList<byte[]> keys=new ArrayList<byte[]>(100);  final ArrayList<byte[]> values=new ArrayList<byte[]>(100);  while (true) {    start=StreamReaderUtils.skipSpacesOrOtherCharacter(data,start,60);    if (data[start] == 37) {      start=StreamReaderUtils.skipComment(data,start);    }    if (data[start] == 62 || StreamReaderUtils.isEndObj(data,start)) {      break;    }    final int tokenStart=start + 1;    start=StreamReaderUtils.skipToEndOfKey(data,tokenStart);    keys.add(getByteKeyFromStream(start - tokenStart,data,tokenStart));    start=StreamReaderUtils.skipSpaces(data,start);    int refStart=start;    if (StreamReaderUtils.isNull(data,start)) {      start+=4;      values.add(null);    } else {      if (data[start] == 60 || data[start] == '[' || data[start] == '/') {        refStart=start;        if (data[start] == '<') {          start=ObjectUtils.skipToEndOfObject(start,data);        } else         if (data[start] == '[') {          start=StreamReaderUtils.skipToEndOfArray(data,start);        } else         if (data[start] == '/') {          start=StreamReaderUtils.skipToEndOfKey(data,start + 1);        }      } else {        while (data[start] != 'R') {          start++;        }        start++;      }      values.add(getByteKeyFromStream(start - refStart,data,refStart));    }  }  final int size=keys.size();  byte[][] returnKeys=new byte[size][];  byte[][] returnValues=new byte[size][];  for (int a=0; a < size; a++) {    returnKeys[a]=keys.get(a);    returnValues[a]=values.get(a);  }  pdfObject.setDictionaryPairs(returnKeys,returnValues);  return start;}  }
class C{  public static void generateClass(StringBuilder builder){  builder.append("/**\n");  builder.append(" * THIS CLASS WILL BE OVERRIDDEN BY MAVEN BUILD. DON'T EDIT CLASS, IT WILL HAVE NO EFFECT.\n");  builder.append(" */\n");  builder.append("@Singleton\n");  builder.append("@SuppressWarnings(\"rawtypes\")\n");  builder.append("public class DtoFactoryVisitorRegistry\n");  builder.append("{\n");  builder.append("\n");  builder.append(GeneratorUtils.TAB).append("/** Contains the map with all the DtoFactoryVisitor Providers <FullClassFQN, Provider>. */\n");  builder.append(GeneratorUtils.TAB).append("protected final Map<String, Provider> providers = new HashMap<>();\n\n");  builder.append(GeneratorUtils.TAB).append("/** Constructor that accepts all found DtoFactoryVisitor Providers. */\n");  builder.append(GeneratorUtils.TAB).append("@Inject\n");  builder.append(GeneratorUtils.TAB).append("public DtoFactoryVisitorRegistry(\n");  Iterator<Entry<String,String>> entryIterator=dtoFactoryVisitors.entrySet().iterator();  while (entryIterator.hasNext()) {    Entry<String,String> entry=entryIterator.next();    String hasComma=entryIterator.hasNext() ? "," : "";    String classFQN=String.format("Provider<%s>",entry.getKey());    String variableName=entry.getValue().toLowerCase();    builder.append(GeneratorUtils.TAB2).append(classFQN).append(" ").append(variableName).append(hasComma).append("\n");  }  builder.append(GeneratorUtils.TAB).append(")\n");  builder.append(GeneratorUtils.TAB).append("{\n");  for (  Entry<String,String> entries : dtoFactoryVisitors.entrySet()) {    String fullFqn=entries.getKey();    String variableName=entries.getValue().toLowerCase();    String putStatement=String.format("this.providers.put(\"%s\", %s);%n",fullFqn,variableName);    builder.append(GeneratorUtils.TAB2).append(putStatement);  }  builder.append(GeneratorUtils.TAB).append("}\n\n");  builder.append(GeneratorUtils.TAB).append("/** Returns the map with all the DtoFactoryVisitor Providers <FullClassFQN, Provider>. */\n");  builder.append(GeneratorUtils.TAB).append("public Map<String, Provider> getDtoFactoryVisitors()\n");  builder.append(GeneratorUtils.TAB).append("{\n");  builder.append(GeneratorUtils.TAB2).append("return providers;\n");  builder.append(GeneratorUtils.TAB).append("}\n");  builder.append("}\n");}  }
class C{  private GalgoOptions(Builder builder){  numberOfLines=builder.numberOfLines;  backgroundColor=builder.backgroundColor;  textColor=builder.textColor;  textSize=builder.textSize;}  }
class C{  public Condition(FilterOp operator,String value){  this.operatorType=operator;  this.value=value;}  }
class C{  public Builder(String actionSuffix){  intent=new Intent(INTENT_PREFIX + actionSuffix);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public TableQuery(URL feedUrl){  super(feedUrl);}  }
class C{  protected void updateOutput(){  SerialNode tNode=SerialAddress.getNodeFromSystemName(tSystemName);  if (tNode == null) {    log.error("Can't find node for " + tSystemName + ", command ignored");    return;  }  boolean high=(output >= 12);  int tOut=output;  if (high) {    tOut=output - 12;  }  if ((bank < 0) || (bank > 4)) {    log.error("invalid bank " + bank + " for signal "+ getSystemName());    bank=0;  }  int cmd;  if (mLit) {switch (mAppearance) {case RED:      cmd=6;    break;case FLASHRED:  cmd=7;break;case YELLOW:cmd=2;break;case FLASHYELLOW:cmd=3;break;case GREEN:cmd=0;break;case FLASHGREEN:cmd=1;break;case DARK:cmd=4;break;default :log.warn("Unexpected new appearance: " + mAppearance);cmd=7;break;}} else {cmd=4;}SerialMessage m=new SerialMessage(high ? 8 : 4);int i=0;if (high) {m.setElement(i++,tNode.getNodeAddress() | 0x80);m.setElement(i++,122);m.setElement(i++,tNode.getNodeAddress() | 0x80);m.setElement(i++,0x10);m.setParity(i - 4);}m.setElement(i++,tNode.getNodeAddress() | 0x80);m.setElement(i++,(tOut << 3) | cmd);m.setElement(i++,tNode.getNodeAddress() | 0x80);m.setElement(i++,bank << 4);m.setParity(i - 4);SerialTrafficController.instance().sendSerialMessage(m,null);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public static void addTab(final TabIconRenderer renderer,final String tooltip,final String path){  if (API.manualAPI != null)   API.manualAPI.addTab(renderer,tooltip,path);}  }
class C{  public static boolean initializePrivateKey(String password){  privateKey=decryptPrivateKey(password);  return privateKey != null;}  }
class C{  public int size(){  return all.size();}  }
class C{  public static boolean isStatic(Element element){  return element.getModifiers().contains(Modifier.STATIC);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("rawtypes") public static void main(final String[] args) throws Exception {  new BigdataGASRunner(args).call();}  }
class C{  public InteractivePlayer(char mark){  super(mark);}  }
class C{  public GetLatestTask(final Shell shell,final TFSRepository repository){  super(shell,repository);  this.serverItems=null;  this.localItem=null;}  }
class C{  @Override public void alert(Alert alert){  try {    super.alert(alert);    try {      String strAlert=alert.toString();      this.modelMBean.sendNotification(new Notification(NOTIF_ALERT,this.mbeanName,notificationSequenceNumber.addAndGet(1),strAlert));      if (isEmailNotificationEnabled) {        String mess=LocalizedStrings.AdminDistributedSystemJmxImpl_SYSTEM_ALERT_FROM_DISTRIBUTED_SYSTEM_0.toLocalizedString(strAlert);        sendEmail(EML_SUBJ_PRFX_GFE_ALERT + EML_SUBJ_ITEM_GFE_DS + getName()+ " <System Alert>",mess);      }    } catch (    javax.management.MBeanException e) {      logger.warn(e.getMessage(),e);    }  } catch (  RuntimeException e) {    logger.warn(e.getMessage(),e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    logger.error(e.getMessage(),e);    throw e;  }}  }
class C{  public String encode(){  return object.toJSONString();}  }
class C{  @Override public Struct createStruct(String typeName,Object[] attributes) throws SQLException {  throw unsupported("Struct");}  }
class C{  public void show(){  NotificationPopupHandler.getInstance().show(this);}  }
class C{  public boolean insert(String name,RegExp definition){  if (Options.DEBUG)   Out.debug("inserting macro " + name + " with definition :"+ Out.NL+ definition);  used.put(name,Boolean.FALSE);  return macros.put(name,definition) == null;}  }
class C{  private AnimationUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public static <T extends ServiceDocument,B extends ServiceDocument>B doPost(VerificationHost host,T inState,Class<B> type,URI uri) throws Throwable {  final ServiceDocument[] doc={null};  host.testStart(1);  Operation post=Operation.createPost(uri).setBody(inState).setCompletion(null);  host.send(post);  host.testWait();  host.logThroughput();  B outState=host.getServiceState(null,type,UriUtils.buildUri(uri.getHost(),uri.getPort(),doc[0].documentSelfLink,null));  return outState;}  }
class C{  static int findIndex(int c,int[] points){  int a=0;  int b=points.length;  while (b - a > 1) {    int d=(a + b) >>> 1;    if (points[d] > c)     b=d; else     if (points[d] < c)     a=d; else     return d;  }  return a;}  }
class C{  public void testNextBoolean(){  boolean f=ThreadLocalRandom.current().nextBoolean();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextBoolean() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  @SuppressWarnings("unchecked") public ListHashTable(int tableSize,IHash<V> hashMethod){  super(tableSize,hashMethod);  table=new LinkedList[tableSize];}  }
class C{  public void updateVdcTargetVersion(String siteId,String action,long vdcTargetVersion) throws Exception {  updateVdcTargetVersion(siteId,action,vdcTargetVersion,null,null);}  }
class C{  public MicroservicesRunner deploy(String basePath,Object microservice){  Map<String,Object> valuesMap=new HashMap<>();  valuesMap.put("value",basePath);  RuntimeAnnotations.putAnnotation(microservice.getClass(),Path.class,valuesMap);  msRegistry.addService(basePath,microservice);  return this;}  }
class C{  private void initialize(){  HashMap<Object,GVCongruenceClass> labelMap=new HashMap<Object,GVCongruenceClass>(10);  for (Enumeration<GraphNode> e=valueGraph.enumerateVertices(); e.hasMoreElements(); ) {    ValueGraphVertex v=(ValueGraphVertex)e.nextElement();    Object label=v.getLabel();    GVCongruenceClass c=findOrCreateCongruenceClass(label,labelMap);    c.addVertex(v);    v.setValueNumber(c.getValueNumber());  }}  }
class C{  public PaymentGatewayAuthorizeNet(){  m_sCommerceID=AppConfig.getInstance().getProperty("payment.commerceid");  AltEncrypter cypher=new AltEncrypter("cypherkey" + AppConfig.getInstance().getProperty("payment.commerceid"));  this.m_sCommercePassword=cypher.decrypt(AppConfig.getInstance().getProperty("payment.commercepassword").substring(6));  m_bTestMode=Boolean.parseBoolean(AppConfig.getInstance().getProperty("payment.testmode"));  ENDPOINTADDRESS=(m_bTestMode) ? "https://test.authorize.net/gateway/transact.dll" : "https://cardpresent.authorize.net/gateway/transact.dll";}  }
class C{  private String _serializeList(List list,Map<Object,String> done,String id) throws ConverterException {  StringBuilder sb=new StringBuilder(goIn() + "<ARRAY ID=\"" + id+ "\" SIZE="+ del+ list.size()+ del+ ">");  int index;  ListIterator it=list.listIterator();  while (it.hasNext()) {    index=it.nextIndex();    String value=_serialize(it.next(),done);    sb.append(goIn() + "<ITEM INDEX=\"" + (index + 1)+ "\" TYPE=\""+ type+ "\">");    sb.append(value);    sb.append(goIn() + "</ITEM>");  }  sb.append(goIn() + "</ARRAY>");  type="ARRAY";  return sb.toString();}  }
class C{  public Double GetMedian(List<Double> values){  int count=values.size();  double median;  double m1;  double m2;  if ((count % 2) == 1) {    median=values.get((int)(count / 2));  } else   if (count > 0) {    m1=values.get(count / 2);    m2=values.get((count / 2) - 1);    median=(m1 + m2) / 2;  } else {    median=0;  }  return median;}  }
class C{  protected ListDataListener createListDataListener(){  return null;}  }
class C{  public boolean isEmpty(){  return m_Count == 0;}  }
class C{  protected boolean partitionTypeIsIgnoredForLineIndentString(ITypedRegion partition){  return !partition.getType().equals(IDocument.DEFAULT_CONTENT_TYPE);}  }
class C{  void selectColumn(int newColIndex){  selectColumn(newColIndex,true);}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  private static void buildComponents(ExecutionContext context) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {  Collection<BeanDef> cDefs=context.getTopologyDef().getComponents();  if (cDefs != null) {    for (    BeanDef bean : cDefs) {      Object obj=buildObject(bean,context);      context.addComponent(bean.getId(),obj);    }  }}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case SGraphPackage.VERTEX__PARENT_REGION:    return eInternalContainer().eInverseRemove(this,SGraphPackage.REGION__VERTICES,Region.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  @Override public void endDocument() throws SAXException {  if (resource != null) {    resource.addAllResource(jsVector);    for (    Object object : resource.getResourceSet()) {      Resource r=(Resource)object;      if (r.getResource() != null) {        parser.setResource((Resource)r);        parser.run();        jsSet.add(parser.getResult());      }    }  }}  }
class C{  protected Control createContents(Composite parent){  Composite composite=new Composite(parent,SWT.NONE);  POPUP_LAYOUT_FACTORY.applyTo(composite);  LAYOUTDATA_GRAB_BOTH.applyTo(composite);  if (hasTitleArea()) {    createTitleMenuArea(composite);    titleSeparator=createHorizontalSeparator(composite);  }  dialogArea=createDialogArea(composite);  if (dialogArea.getLayoutData() == null) {    LAYOUTDATA_GRAB_BOTH.applyTo(dialogArea);  }  if (hasInfoArea()) {    infoSeparator=createHorizontalSeparator(composite);    createInfoTextArea(composite);  }  applyColors(composite);  applyFonts(composite);  return composite;}  }
class C{  @Deprecated public Tasks<VolumeRestRep> failoverTestCancel(URI id,CopiesParam input){  return postTasks(input,getContinuousCopiesUrl() + "/failover-test-cancel",id);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:55.617 -0500",hash_original_method="CA1DA71A9B8C344527DB0EB280A0A444",hash_generated_method="18AF7E792E4462DFF18625B786A09317") public VerifierInfo(String packageName,PublicKey publicKey){  if (packageName == null || packageName.length() == 0) {    throw new IllegalArgumentException("packageName must not be null or empty");  } else   if (publicKey == null) {    throw new IllegalArgumentException("publicKey must not be null");  }  this.packageName=packageName;  this.publicKey=publicKey;}  }
class C{  @Override public boolean supportsCustomEditor(){  return true;}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public static ComponentUI createUI(JComponent c){  String key=c.getUIClassID().intern();  if (key == "FileChooserUI") {    return GTKFileChooserUI.createUI(c);  }  return SynthLookAndFeel.createUI(c);}  }
class C{  protected void eleminateSharedPartialPaths(ElemTemplateElement psuedoVarRecipient,Vector paths){  MultistepExprHolder list=createMultistepExprList(paths);  if (null != list) {    if (DIAGNOSE_MULTISTEPLIST)     list.diagnose();    boolean isGlobal=(paths == m_absPaths);    int longestStepsCount=list.m_stepCount;    for (int i=longestStepsCount - 1; i >= 1; i--) {      MultistepExprHolder next=list;      while (null != next) {        if (next.m_stepCount < i)         break;        list=matchAndEliminatePartialPaths(next,list,isGlobal,i,psuedoVarRecipient);        next=next.m_next;      }    }  }}  }
class C{  public boolean isNegative(){  assertDefined();  boolean negative=false;  if (m_value.compareTo(new BigDecimal(0)) < 0) {    negative=true;  }  return negative;}  }
class C{  public static void checkJournalsClosed(final TestCase test){  checkJournalsClosed(test,null);}  }
class C{  public static boolean mightBeProximate(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  boolean mightBeProximate=false;  int argLen;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    argLen=compiler.getArgLength(opPos);  break;default :argLen=compiler.getArgLengthOfStep(opPos);}int predPos=compiler.getFirstPredicateOpPos(opPos);int count=0;while (OpCodes.OP_PREDICATE == compiler.getOp(predPos)) {count++;int innerExprOpPos=predPos + 2;int predOp=compiler.getOp(innerExprOpPos);switch (predOp) {case OpCodes.OP_VARIABLE:return true;case OpCodes.OP_LOCATIONPATH:break;case OpCodes.OP_NUMBER:case OpCodes.OP_NUMBERLIT:return true;case OpCodes.OP_FUNCTION:boolean isProx=functionProximateOrContainsProximate(compiler,innerExprOpPos);if (isProx) return true;break;case OpCodes.OP_GT:case OpCodes.OP_GTE:case OpCodes.OP_LT:case OpCodes.OP_LTE:case OpCodes.OP_EQUALS:int leftPos=OpMap.getFirstChildPos(innerExprOpPos);int rightPos=compiler.getNextOpPos(leftPos);isProx=isProximateInnerExpr(compiler,leftPos);if (isProx) return true;isProx=isProximateInnerExpr(compiler,rightPos);if (isProx) return true;break;default :return true;}predPos=compiler.getNextOpPos(predPos);}return mightBeProximate;}  }
class C{  public boolean isConfirmed(){  Object oo=get_Value(COLUMNNAME_IsConfirmed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public List findListasAcceso(String nombre){  return listaControlAccesoDBEntity.getListadoListasControlAccesoByNombre(nombre);}  }
class C{  public boolean hasNextFeature(){  return (hasNextSFeature() || hasNextEFeature());}  }
class C{  public void add(final int operand){  this.value+=operand;}  }
class C{  public static Number multiply(Number left,Number right){  return NumberMath.multiply(left,right);}  }
class C{  private void initActionBar(){  mActionBar=(Toolbar)findViewById(R.id.actionBar);  mActionBar.setTitle(R.string.app_name);  setSupportActionBar(mActionBar);  getSupportActionBar().setDisplayHomeAsUpEnabled(true);}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public void visitApply(JCMethodInvocation tree){  Env<AttrContext> localEnv=env.dup(tree,env.info.dup());  List<Type> argtypes;  List<Type> typeargtypes=null;  Name methName=TreeInfo.name(tree.meth);  boolean isConstructorCall=methName == names._this || methName == names._super;  ListBuffer<Type> argtypesBuf=new ListBuffer<>();  if (isConstructorCall) {    if (checkFirstConstructorStat(tree,env)) {      localEnv.info.isSelfCall=true;      int kind=attribArgs(MTH,tree.args,localEnv,argtypesBuf);      argtypes=argtypesBuf.toList();      typeargtypes=attribTypes(tree.typeargs,localEnv);      Type site=env.enclClass.sym.type;      if (methName == names._super) {        if (site == syms.objectType) {          log.error(tree.meth.pos(),"no.superclass",site);          site=types.createErrorType(syms.objectType);        } else {          site=types.supertype(site);        }      }      if (site.hasTag(CLASS)) {        Type encl=site.getEnclosingType();        while (encl != null && encl.hasTag(TYPEVAR))         encl=encl.getUpperBound();        if (encl.hasTag(CLASS)) {          if (tree.meth.hasTag(SELECT)) {            JCTree qualifier=((JCFieldAccess)tree.meth).selected;            chk.checkRefType(qualifier.pos(),attribExpr(qualifier,localEnv,encl));          } else           if (methName == names._super) {            rs.resolveImplicitThis(tree.meth.pos(),localEnv,site,true);          }        } else         if (tree.meth.hasTag(SELECT)) {          log.error(tree.meth.pos(),"illegal.qual.not.icls",site.tsym);        }        if (site.tsym == syms.enumSym && allowEnums)         argtypes=argtypes.prepend(syms.intType).prepend(syms.stringType);        boolean selectSuperPrev=localEnv.info.selectSuper;        localEnv.info.selectSuper=true;        localEnv.info.pendingResolutionPhase=null;        Symbol sym=rs.resolveConstructor(tree.meth.pos(),localEnv,site,argtypes,typeargtypes);        localEnv.info.selectSuper=selectSuperPrev;        TreeInfo.setSymbol(tree.meth,sym);        Type mpt=newMethodTemplate(resultInfo.pt,argtypes,typeargtypes);        checkId(tree.meth,site,sym,localEnv,new ResultInfo(kind,mpt));      }    }    result=tree.type=syms.voidType;  } else {    int kind=attribArgs(VAL,tree.args,localEnv,argtypesBuf);    argtypes=argtypesBuf.toList();    typeargtypes=attribAnyTypes(tree.typeargs,localEnv);    Type mpt=newMethodTemplate(resultInfo.pt,argtypes,typeargtypes);    localEnv.info.pendingResolutionPhase=null;    Type mtype=attribTree(tree.meth,localEnv,new ResultInfo(kind,mpt,resultInfo.checkContext));    Type restype=mtype.getReturnType();    if (restype.hasTag(WILDCARD))     throw new AssertionError(mtype);    Type qualifier=(tree.meth.hasTag(SELECT)) ? ((JCFieldAccess)tree.meth).selected.type : env.enclClass.sym.type;    restype=adjustMethodReturnType(qualifier,methName,argtypes,restype);    chk.checkRefTypes(tree.typeargs,typeargtypes);    result=check(tree,capture(restype),VAL,resultInfo);  }  chk.validate(tree.typeargs,localEnv);}  }
class C{  public Attribute(String name){  this(name,null,null);}  }
class C{  public boolean isReceiving(){  return receiving;}  }
class C{  public void inc(final long latency){  add(1,latency);}  }
class C{  private static boolean resolveBoolean(Context context,@AttrRes int attr,boolean fallback){  TypedArray a=context.getTheme().obtainStyledAttributes(new int[]{attr});  try {    return a.getBoolean(0,fallback);  }  finally {    a.recycle();  }}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public int lineno(){  return lineno;}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof EfficientTerminalSet) {    return equals((EfficientTerminalSet)o);  } else   if (o instanceof TerminalSet) {    Set<Terminal> otherTerminals=((TerminalSet)o).getTerminals();    if (otherTerminals.size() != indices.size())     return false;    for (    Terminal terminal : otherTerminals) {      if (!contains(terminal))       return false;    }    return true;  } else {    return false;  }}  }
class C{  public byte[] compressed(){  return this.bytes;}  }
class C{  @Override public double discretize(double value){  int idx=(int)index(value);  return binValues[idx];}  }
class C{  @Override public boolean isInRange(Rectangle rect1){  for (  Point p : getLinePoints()) {    Point realPoint=new Point(p.getX() + getRectangle().x,p.getY() + getRectangle().y);    if (!rect1.contains(realPoint)) {      return false;    }  }  return true;}  }
class C{  public T orElseGet(Supplier<? extends T> other){  return value != null ? value : other.get();}  }
class C{  protected Total applyTaxToShippingAndCalculateOrderTotal(final MutableShoppingCart cart,final Total orderTotal){  final ShoppingContext ctx=cart.getShoppingContext();  final String currency=cart.getCurrencyCode();  final CartItemPrices prices=new CartItemPrices();  final List<CartItem> items=cart.getShippingList();  boolean isShippingPromoApplied=false;  final StringBuilder promoCodes=new StringBuilder();  if (items != null) {    for (    final CartItem item : items) {      final TaxProvider.Tax tax=taxProvider.determineTax(ctx.getShopCode(),currency,ctx.getCountryCode(),ctx.getStateCode(),item.getProductSkuCode());      final BigDecimal price=item.getPrice();      final MoneyUtils.Money money=calculateMoney(price,tax.getRate(),!tax.isExcluded());      final BigDecimal netPrice=money.getNet();      final BigDecimal grossPrice=money.getGross();      cart.setShippingTax(item.getProductSkuCode(),netPrice,grossPrice,tax.getRate(),tax.getCode(),tax.isExcluded());      prices.add(new CartItemPrices(item));      if (item.isPromoApplied()) {        isShippingPromoApplied=true;        if (promoCodes.length() > 0) {          promoCodes.append(',');        }        promoCodes.append(item.getAppliedPromo());      }    }  }  final BigDecimal salePriceRemove=prices.salePrice.negate();  final Total draftDeliveryCostRemove=new TotalImpl(Total.ZERO,Total.ZERO,Total.ZERO,Total.ZERO,false,null,Total.ZERO,Total.ZERO,Total.ZERO,salePriceRemove,salePriceRemove,false,null,Total.ZERO,salePriceRemove,salePriceRemove,Total.ZERO,salePriceRemove,salePriceRemove);  final Total deliveryCost=new TotalImpl(Total.ZERO,Total.ZERO,Total.ZERO,Total.ZERO,false,null,Total.ZERO,Total.ZERO,Total.ZERO,prices.listPrice,prices.finalPrice,isShippingPromoApplied,promoCodes.toString(),prices.finalTax,prices.grossFinalPrice,prices.finalPrice,prices.finalTax,prices.grossListPrice,prices.grossFinalPrice);  final Total finalTotal=orderTotal.add(draftDeliveryCostRemove).add(deliveryCost);  return finalTotal;}  }
class C{  private void aboutUpload(List<ImageModel> imageArrayList,final int index){  for (int i=0; i < imageArrayList.size(); i++) {    mAdapter.setProgress(index,false);  }}  }
class C{  private static void WFG1_M5(double[] z,double[] f,int nx,int M){  double[] y=new double[30];  double[] t1=new double[30];  double[] t2=new double[30];  double[] t3=new double[30];  double[] t4=new double[5];  int k=M == 2 ? 4 : 2 * (M - 1);  for (int i=0; i < nx; i++) {    y[i]=z[i] / (2.0 * (i + 1));  }  for (int i=0; i < k; i++) {    t1[i]=y[i];  }  for (int i=k; i < nx; i++) {    t1[i]=s_linear(y[i],0.35);  }  for (int i=0; i < k; i++) {    t2[i]=t1[i];  }  for (int i=k; i < nx; i++) {    t2[i]=b_flat(t1[i],0.8,0.75,0.85);  }  for (int i=0; i < nx; i++) {    t3[i]=b_poly(t2[i],0.02);  }  double[] w=new double[30];  double[] y_sub=new double[30];  double[] w_sub=new double[30];  double[] y_sub2=new double[30];  double[] w_sub2=new double[30];  for (int i=1; i <= nx; i++) {    w[i - 1]=2.0 * i;  }  for (int i=1; i <= M - 1; i++) {    int head=(i - 1) * k / (M - 1);    int tail=i * k / (M - 1);    for (int j=head; j < tail; j++) {      y_sub[j - head]=t3[j];      w_sub[j - head]=w[j];    }    t4[i - 1]=r_sum(y_sub,w_sub,tail - head);  }  for (int j=k; j < nx; j++) {    y_sub2[j - k]=t3[j];    w_sub2[j - k]=w[j];  }  t4[M - 1]=r_sum(y_sub2,w_sub2,nx - k);  int[] A=new int[5];  double[] x=new double[5];  double[] h=new double[5];  double[] S=new double[5];  A[0]=1;  for (int i=1; i < M - 1; i++) {    A[i]=1;  }  for (int i=0; i < M - 1; i++) {    double tmp1=t4[M - 1];    if (A[i] > tmp1) {      tmp1=A[i];    }    x[i]=tmp1 * (t4[i] - 0.5) + 0.5;  }  x[M - 1]=t4[M - 1];  for (int m=1; m <= M - 1; m++) {    h[m - 1]=convex(x,m,M);  }  h[M - 1]=mixed(x,5,1.0);  for (int m=1; m <= M; m++) {    S[m - 1]=m * 2.0;  }  for (int i=0; i < M; i++) {    f[i]=1.0 * x[M - 1] + S[i] * h[i];  }}  }
class C{  public void testSimpleWrite() throws Exception {  IgfsPath path=new IgfsPath("/file1");  IgfsOutputStream os=igfs.create(path,128,true,null,0,256,null);  os.write(chunk);  os.close();  assert igfs.exists(path);  checkFileContent(igfs,path,chunk);  os=igfs.create(path,128,true,null,0,256,null);  assert igfs.exists(path);  os.write(chunk);  assert igfs.exists(path);  os.write(chunk);  assert igfs.exists(path);  os.close();  assert igfs.exists(path);  checkFileContent(igfs,path,chunk,chunk);}  }
class C{  static String shardIdentifierFromRouting(ShardRouting shardRouting){  return shardRouting.shardId().toString() + "[" + (shardRouting.primary() ? "p" : "r")+ "]";}  }
class C{  public void load(){}  }
class C{  public RefactoringSessionDescriptor readSession(final InputSource source) throws CoreException {  fSessionFound=false;  try {    source.setSystemId("/");    createParser(SAXParserFactory.newInstance()).parse(source,this);    if (!fSessionFound)     throw new CoreException(new Status(IStatus.ERROR,RefactoringCorePlugin.getPluginId(),IRefactoringCoreStatusCodes.REFACTORING_HISTORY_FORMAT_ERROR,RefactoringCoreMessages.RefactoringSessionReader_no_session,null));    if (fRefactoringDescriptors != null) {      if (fVersion == null || "".equals(fVersion))       throw new CoreException(new Status(IStatus.ERROR,RefactoringCorePlugin.getPluginId(),IRefactoringCoreStatusCodes.MISSING_REFACTORING_HISTORY_VERSION,RefactoringCoreMessages.RefactoringSessionReader_missing_version_information,null));      if (!IRefactoringSerializationConstants.CURRENT_VERSION.equals(fVersion))       throw new CoreException(new Status(IStatus.ERROR,RefactoringCorePlugin.getPluginId(),IRefactoringCoreStatusCodes.UNSUPPORTED_REFACTORING_HISTORY_VERSION,RefactoringCoreMessages.RefactoringSessionReader_unsupported_version_information,null));      return new RefactoringSessionDescriptor((RefactoringDescriptor[])fRefactoringDescriptors.toArray(new RefactoringDescriptor[fRefactoringDescriptors.size()]),fVersion,fComment);    }  } catch (  IOException exception) {    throwCoreException(exception,exception.getLocalizedMessage());  }catch (  ParserConfigurationException exception) {    throwCoreException(exception,exception.getLocalizedMessage());  }catch (  SAXParseException exception) {    String message=Messages.format(RefactoringCoreMessages.RefactoringSessionReader_invalid_contents_at,new Object[]{Integer.toString(exception.getLineNumber()),Integer.toString(exception.getColumnNumber())});    throwCoreException(exception,message);  }catch (  SAXException exception) {    throwCoreException(exception,exception.getLocalizedMessage());  } finally {    fRefactoringDescriptors=null;    fVersion=null;    fComment=null;    fLocator=null;  }  return null;}  }
class C{  public void sortDataByDate(){  Arrays.sort(this.data);}  }
class C{  public String releaseVersion(){  return version + "." + buildNumber;}  }
class C{  boolean isReadyForDisplayIgnoringKeyguard(){  if (mRootToken.waitingToShow && mService.mAppTransition.isTransitionSet()) {    return false;  }  final AppWindowToken atoken=mAppToken;  if (atoken == null && !mPolicyVisibility) {    return false;  }  return mHasSurface && !mDestroying && ((!mAttachedHidden && mViewVisibility == View.VISIBLE && !mRootToken.hidden) || mWinAnimator.mAnimation != null || ((atoken != null) && (atoken.mAppAnimator.animation != null) && !mWinAnimator.isDummyAnimation()));}  }
class C{  private Object structLookup(Object object,String key){  return internalMergeObjectInspector.getStructFieldData(object,internalMergeObjectInspector.getStructFieldRef(key));}  }
class C{  @Override public List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){  List result=new java.util.ArrayList();  if (RectangleEdge.isTopOrBottom(edge)) {    result=refreshTicksHorizontal(g2,dataArea,edge);  } else   if (RectangleEdge.isLeftOrRight(edge)) {    result=refreshTicksVertical(g2,dataArea,edge);  }  return result;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  double x, y;  double z;  double gpsTime;  int intensity;  byte classValue, numReturns, returnNum, scanAngle;  int a;  int progress=0;  int numPoints=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      numPointsInFile=las.getNumPointRecords();      if (numPointsInFile > 70000000) {        showFeedback("Error: The number of points exceeds the limit on the number of features that a shapefile can contain.");        return;      }      String outputFile=pointFiles[j].replace(".las",".shp");      File file=new File(outputFile);      if (file.exists()) {        file.delete();      }      DBFField fields[]=new DBFField[8];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      fields[1]=new DBFField();      fields[1].setName("Z");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("I");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(8);      fields[2].setDecimalCount(0);      fields[3]=new DBFField();      fields[3].setName("CLASS");      fields[3].setDataType(DBFField.DBFDataType.NUMERIC);      fields[3].setFieldLength(4);      fields[3].setDecimalCount(0);      fields[4]=new DBFField();      fields[4].setName("RTN_NUM");      fields[4].setDataType(DBFField.DBFDataType.NUMERIC);      fields[4].setFieldLength(4);      fields[4].setDecimalCount(0);      fields[5]=new DBFField();      fields[5].setName("NUM_RTNS");      fields[5].setDataType(DBFField.DBFDataType.NUMERIC);      fields[5].setFieldLength(4);      fields[5].setDecimalCount(0);      fields[6]=new DBFField();      fields[6].setName("SCAN_ANGLE");      fields[6].setDataType(DBFField.DBFDataType.NUMERIC);      fields[6].setFieldLength(4);      fields[6].setDecimalCount(0);      fields[7]=new DBFField();      fields[7].setName("GPS_TIME");      fields[7].setDataType(DBFField.DBFDataType.NUMERIC);      fields[7].setFieldLength(14);      fields[7].setDecimalCount(6);      ShapeFile output=new ShapeFile(outputFile,ShapeType.POINT,fields);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);      numPoints=0;      progress=0;      int oldProgress=-1;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          classValue=point.getClassification();          returnNum=point.getReturnNumber();          numReturns=point.getNumberOfReturns();          scanAngle=point.getScanAngle();          gpsTime=point.getGPSTime();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);          Object[] rowData=new Object[8];          rowData[0]=(double)numPoints + 1;          rowData[1]=z;          rowData[2]=(double)intensity;          rowData[3]=(double)classValue;          rowData[4]=(double)returnNum;          rowData[5]=(double)numReturns;          rowData[6]=(double)scanAngle;          rowData[7]=gpsTime;          output.addRecord(wbGeometry,rowData);          numPoints++;        }        progress=(int)(100f * a / numPointsInFile);        if (progress != oldProgress) {          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);        }      }      output.write();    }    showFeedback("Operation Complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public long[] keys(){  long[] keys=new long[size()];  long[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  private static boolean isAValidSignature(Context context,String certificateSignature){  try {    PackageInfo packageInfo=context.getPackageManager().getPackageInfo(context.getPackageName(),PackageManager.GET_SIGNATURES);    if (packageInfo.signatures.length > 1) {      return false;    }    for (    Signature signature : packageInfo.signatures) {      MessageDigest md=MessageDigest.getInstance("SHA");      md.update(signature.toByteArray());      if (certificateSignature.compareToIgnoreCase(Base64.encodeToString(md.digest(),Base64.DEFAULT)) == 0) {        return true;      }    }  } catch (  Exception exception) {    Log.d("TAMPERING_PROTECTION",exception.getStackTrace().toString());  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.TIME_EVENT__PERIODIC:    return periodic != PERIODIC_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private void testColStdDevs(String testName,Sparsity sparsity,DataType dataType,ExecType platform){  RUNTIME_PLATFORM platformOld=rtplatform;switch (platform) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.SINGLE_NODE;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(testName);String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + testName + ".dml";programArgs=new String[]{"-explain","-stats","-args",input(INPUT_NAME),output(OUTPUT_NAME)};fullRScriptName=HOME + testName + ".R";rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();double sparsityVal;switch (sparsity) {case EMPTY:sparsityVal=0;break;case SPARSE:sparsityVal=sparsitySparse;break;case DENSE:default :sparsityVal=sparsityDense;}int r;int c;switch (dataType) {case ROWVECTOR:r=1;c=cols;break;case COLUMNVECTOR:r=rows;c=1;break;case MATRIX:default :r=rows;c=cols;}double[][] X=getRandomMatrix(r,c,-1,1,sparsityVal,7);writeInputMatrixWithMTD(INPUT_NAME,X,true);runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS(OUTPUT_NAME);HashMap<CellIndex,Double> rfile=readRMatrixFromFS(OUTPUT_NAME);TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");}  finally {rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  private void publish(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String action=context.getString(R.string.toast_pub_failed,(Object[])additionalArgs);  c.addAction(action);  Notify.toast(context,action,Toast.LENGTH_SHORT);  System.out.print("Publish failed");}  }
class C{  static void checkUnsignedShort(final int value,final String msg){  if (value < 0 || value > 65535) {    throw new IllegalArgumentException(msg + " (must be an unsigned short): " + value);  }}  }
class C{  protected final void readEmbeddedFont(final byte[] fontDataAsArray,final FontData fontDataAsObject,final boolean hasEncoding){  try {    readFontData(fontDataAsArray,fontDataAsObject);    isFontEmbedded=true;    glyphs.setFontEmbedded(true);    glyphs.setEncodingToUse(hasEncoding,this.getFontEncoding(false),TTstreamisCID);  } catch (  final Exception e) {    isFontEmbedded=false;    LogWriter.writeLog("Exception " + e + " processing TrueType font");  }}  }
class C{  public static List<Integer> createColors(Resources r,int[] colors){  List<Integer> result=new ArrayList<Integer>();  for (  int i : colors) {    result.add(r.getColor(i));  }  return result;}  }
class C{  private void addToCache(CnATreeElement element,ChildrenExist hasChildren){  cache.addObject(new CacheObject(element,false,hasChildren));}  }
class C{  public static void main(String[] args){  DateString date=new DateString();  date.setTimeInMillis(System.currentTimeMillis());  String outputStringGIS=OUTPUT_PRE + date.toString() + OUTPUT_POST_GIS;  String outputStringScatter=OUTPUT_PRE + date.toString() + OUTPUT_POST_SCATTER;  String outputStringBoxHour=OUTPUT_PRE + date.toString() + OUTPUT_POST_BOXPLOT_HOUR;  try {    Scanner inputActual=new Scanner(new BufferedReader(new FileReader(new File(IN_ACTUAL))));    Scanner inputSim=new Scanner(new BufferedReader(new FileReader(new File(IN_SIMULATED))));    String header=inputActual.nextLine();    header=inputSim.nextLine();    BufferedWriter outputGIS=new BufferedWriter(new FileWriter(new File(outputStringGIS)));    BufferedWriter outputScatter=new BufferedWriter(new FileWriter(new File(outputStringScatter)));    BufferedWriter outputBoxHour=new BufferedWriter(new FileWriter(new File(outputStringBoxHour)));    try {      outputGIS.write(header);      outputGIS.newLine();      outputScatter.write("Name" + DELIMITER + "Hour"+ DELIMITER+ "Actual"+ DELIMITER+ "Simulated");      outputScatter.newLine();      outputBoxHour.write(header);      outputBoxHour.newLine();      while (inputActual.hasNextLine() && inputSim.hasNextLine()) {        String[] lineActual=inputActual.nextLine().split(DELIMITER);        String[] lineSim=inputSim.nextLine().split(DELIMITER);        if (!lineActual[0].equalsIgnoreCase(lineSim[0])) {          throw new RuntimeException("Two GAP_IDs are not the same!!");        } else {          outputGIS.write(lineActual[0] + DELIMITER);          outputScatter.write(lineActual[0] + DELIMITER);          outputBoxHour.write(lineActual[0] + DELIMITER);          Double valueActual=Double.NEGATIVE_INFINITY;          Double valueSim=Double.POSITIVE_INFINITY;          Double difference=Double.POSITIVE_INFINITY;          for (int a=1; a < lineActual.length - 1; a++) {            valueActual=Double.parseDouble(lineActual[a]);            valueSim=Double.parseDouble(lineSim[a]);            difference=valueSim - valueActual;            outputGIS.write(difference.toString() + DELIMITER);            String writeActual=valueActual.toString();            String writeSimulated=valueSim.toString();            outputScatter.write(String.valueOf(a - 1));            outputScatter.write(DELIMITER);            outputScatter.write(writeActual);            outputScatter.write(DELIMITER);            outputScatter.write(writeSimulated);            outputScatter.newLine();            outputScatter.write(String.valueOf(lineActual[0]));            outputScatter.write(DELIMITER);            String writeDifference=(valueActual == 0 && valueSim == 0) ? "NA" : difference.toString();            outputBoxHour.write(writeDifference + DELIMITER);          }          valueActual=Double.parseDouble(lineActual[lineActual.length - 1]);          valueSim=Double.parseDouble(lineSim[lineSim.length - 1]);          difference=valueSim - valueActual;          String diff=difference.toString();          outputGIS.write(diff);          outputGIS.newLine();          String writeActual=valueActual.toString();          String writeSimulated=valueSim.toString();          outputScatter.write(String.valueOf(lineActual.length - 2) + DELIMITER);          outputScatter.write(writeActual + DELIMITER + writeSimulated);          outputScatter.newLine();          String writeDifference23=(valueActual == 0 && valueSim == 0) ? "NA" : difference.toString();          outputBoxHour.write(writeDifference23);          outputBoxHour.newLine();        }      }    }  finally {      outputGIS.close();      outputScatter.close();      outputBoxHour.close();    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void testAddAndSumMT() throws Throwable {  final int incs=1000000;  final int nthreads=4;  final ExecutorService pool=Executors.newCachedThreadPool();  DoubleAdder a=new DoubleAdder();  CyclicBarrier barrier=new CyclicBarrier(nthreads + 1);  for (int i=0; i < nthreads; ++i)   pool.execute(new AdderTask(a,barrier,incs));  barrier.await();  barrier.await();  double total=(long)nthreads * incs;  double sum=a.sum();  assertEquals(sum,total);  pool.shutdown();}  }
class C{  public ComponentBuilder(ComponentBuilder original){  current=new TextComponent(original.current);  for (  BaseComponent baseComponent : original.parts) {    parts.add(baseComponent.duplicate());  }}  }
class C{  public static String abbreviate(String s,int offset,int maxWidth){  if (maxWidth < 4) {    throw new IllegalArgumentException("Minimum abbreviation width is 4");  }  if (s.length() <= maxWidth) {    return s;  }  if (offset > s.length()) {    offset=s.length();  }  if ((s.length() - offset) < (maxWidth - 3)) {    offset=s.length() - (maxWidth - 3);  }  if (offset <= 4) {    return s.substring(0,maxWidth - 3) + "...";  }  if (maxWidth < 7) {    throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");  }  if ((offset + (maxWidth - 3)) < s.length()) {    return "..." + abbreviate(s.substring(offset),maxWidth - 3);  }  return "..." + s.substring(s.length() - (maxWidth - 3));}  }
class C{  public void replaceClassName(String oldName,String newName){  checkModify();}  }
class C{  public static boolean isDarkLnf(){  return UIManager.getLookAndFeel().getClass().getName().equals(DARCULA_LAF_CLASS);}  }
class C{  @Override public String toString(){  return "Normalize between " + this.min + " and "+ this.max;}  }
class C{  public int handleNITFHeader(BinaryFile binFile){  try {    byte[] nitfArray=binFile.readBytes(4,false);    String nitf=new String(nitfArray);    binFile.seek(RPF_DATE_LOCATION);    nitfArray=binFile.readBytes(2,false);    nitf=new String(nitfArray);    if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return 0;    binFile.seek(RPF_DATE_LOCATION + TOC_NITF_HEADER_LENGTH);    nitfArray=binFile.readBytes(2,false);    nitf=new String(nitfArray);    if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return TOC_NITF_HEADER_LENGTH;    binFile.seek(RPF_DATE_LOCATION + FRAME_SHORT_NITF_HEADER_LENGTH);    nitfArray=binFile.readBytes(2,false);    nitf=new String(nitfArray);    if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return FRAME_SHORT_NITF_HEADER_LENGTH;    binFile.seek(RPF_DATE_LOCATION + FRAME_LONG_NITF_HEADER_LENGTH);    nitfArray=binFile.readBytes(2,false);    nitf=new String(nitfArray);    if (nitf.equalsIgnoreCase("19") || nitf.equalsIgnoreCase("20"))     return FRAME_LONG_NITF_HEADER_LENGTH;  } catch (  IOException e) {    Debug.error("RpfHeader: File IO Error while handling NITF header:\n" + e);    return -1;  }catch (  FormatException f) {    Debug.error("RpfHeader: File IO Format error while reading header information:\n" + f);    return -1;  }  return -1;}  }
class C{  protected Token createInternalUseOnlyToken(){  return new VisibleWhitespaceToken();}  }
class C{  public int readByte(int index){  if (!this.boundsCheck(index,1)) {    throw new IndexOutOfBoundsException("Index attempted to be read from is out of bounds: " + Integer.toHexString(index));  }  int b=this.array.get(this.boundOffset(index));  if (b < 0) {    throw new IndexOutOfBoundsException("Index attempted to be read from is out of bounds: " + Integer.toHexString(index));  }  return (b << 24) >> 24;}  }
class C{  public Rational(long nominator,long denominator){  mNumerator=nominator;  mDenominator=denominator;}  }
class C{  public int accessFlags(int nth){  return ByteArray.readU16bit(get(),nth * 8 + 8);}  }
class C{  public ClassificationGenerator(){  super();  setNumExamples(defaultNumExamples());}  }
class C{  public RemoteProdTypeAttributeViewGroupServiceImpl(final GenericDTOService<ProdTypeAttributeViewGroupDTO> prodTypeAttributeViewGroupDTOGenericDTOService){  super(prodTypeAttributeViewGroupDTOGenericDTOService);}  }
class C{  protected void extractProperties(RasterServerConfiguration config){  for (  Map.Entry<String,String> prop : config.getProperties().entrySet()) {    this.setValue(prop.getKey(),prop.getValue());  }}  }
class C{  private void onEnter(float x,float y){  mEntryPoint.set(x,y);  mMaybeSingleTap=true;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof KeyedValuesItemKey)) {    return false;  }  KeyedValuesItemKey that=(KeyedValuesItemKey)obj;  if (!this.key.equals(that.key)) {    return false;  }  return true;}  }
class C{  public IIOMetadata convertImageMetadata(IIOMetadata inData,ImageTypeSpecifier imageType,ImageWriteParam param){  if (inData == null) {    throw new IllegalArgumentException("inData == null!");  }  if (imageType == null) {    throw new IllegalArgumentException("imageType == null!");  }  GIFWritableImageMetadata im=(GIFWritableImageMetadata)getDefaultImageMetadata(imageType,param);  boolean isProgressive=im.interlaceFlag;  convertMetadata(IMAGE_METADATA_NAME,inData,im);  if (param != null && param.canWriteProgressive() && param.getProgressiveMode() != param.MODE_COPY_FROM_METADATA) {    im.interlaceFlag=isProgressive;  }  return im;}  }
class C{  public <V>PTuple and(TupleTag<V> tag,V value){  Map<TupleTag<?>,Object> newMap=new LinkedHashMap<TupleTag<?>,Object>();  newMap.putAll(valueMap);  newMap.put(tag,value);  return new PTuple(newMap);}  }
class C{  public static String convertU8ToHexString(char u8){  return Integer.toHexString(u8);}  }
class C{  private void startCropImageActivity(Uri imageUri){  CropImage.activity(imageUri).setGuidelines(CropImageView.Guidelines.ON).setMultiTouchEnabled(true).start(this);}  }
class C{  public List<String[]> nextChunk(){  List<String[]> temp=nextChunk;  readyNextChunk();  return temp;}  }
class C{  public static byte[] calculateDigest(String algorithm,byte[] data) throws OperatorCreationException, IOException {  DigestCalculator dc=createDigestCalculator(algorithm);  return calculateDigest(dc,data);}  }
class C{  public void append(char[] otherChars,int otherOffset,int otherLength){  int newLen=ref.length + otherLength;  grow(newLen);  System.arraycopy(otherChars,otherOffset,ref.chars,ref.length,otherLength);  ref.length=newLen;}  }
class C{  private void createBoxesTexture(){  this.boxesTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,boxesTexture);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 4 * Demo20.boxes.length);  FloatBuffer fb=bb.asFloatBuffer();  for (int i=0; i < Demo20.boxes.length; i+=2) {    Vector3f min=Demo20.boxes[i];    Vector3f max=Demo20.boxes[i + 1];    fb.put(min.x).put(min.y).put(min.z).put(0.0f);    fb.put(max.x).put(max.y).put(max.z).put(0.0f);  }  glTexImage2D(GL_TEXTURE_2D,0,GL_RGBA32F_ARB,Demo20.boxes.length,1,0,GL_RGBA,GL_FLOAT,bb);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public ArrayListIter<double[]> iter(){  return new ArrayListIter<>(points);}  }
class C{  @Override public synchronized void rollback() throws SQLException {  try {    debugCodeCall("rollback");    checkClosed();    try {      rollbackInternal();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ResponseHeaders combine(ResponseHeaders network) throws IOException {  RawHeaders result=new RawHeaders();  result.setStatusLine(headers.getStatusLine());  for (int i=0; i < headers.length(); i++) {    String fieldName=headers.getFieldName(i);    String value=headers.getValue(i);    if ("Warning".equals(fieldName) && value.startsWith("1")) {      continue;    }    if (!isEndToEnd(fieldName) || network.headers.get(fieldName) == null) {      result.add(fieldName,value);    }  }  for (int i=0; i < network.headers.length(); i++) {    String fieldName=network.headers.getFieldName(i);    if (isEndToEnd(fieldName)) {      result.add(fieldName,network.headers.getValue(i));    }  }  return new ResponseHeaders(uri,result);}  }
class C{  public RectangleIntersects(Polygon rectangle){  this.rectangle=rectangle;  rectEnv=rectangle.getEnvelopeInternal();}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  protected void parseAdaptationSetChild(XmlPullParser xpp) throws XmlPullParserException, IOException {}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(OffsetDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(ZonedDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(LocalDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(Instant.class,JSR310DateTimeSerializer.INSTANCE);  module.addDeserializer(LocalDate.class,JSR310LocalDateDeserializer.INSTANCE);  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  public static String obtainLock(EntityManager em,long expiration,long type,String note){  EntityTransaction tx=null;  try {    long now=System.currentTimeMillis();    tx=em.getTransaction();    tx.begin();    GlobalInterlock lock=_findAndRefreshLock(em,type);    if (lock != null && now - lock.lockTime > expiration) {      em.remove(lock);      em.flush();    }    tx.commit();  } catch (  Exception ex) {    LOGGER.warn("An error occurred trying to refresh the type {} lock: {}",type,ex.getMessage());    LOGGER.debug(ex.getMessage(),ex);    if (tx != null && tx.isActive()) {      tx.rollback();    }  }  try {    tx=em.getTransaction();    tx.begin();    GlobalInterlock lock=em.merge(new GlobalInterlock(type,note));    em.flush();    tx.commit();    return Long.toHexString(lock.lockTime);  } catch (  Exception ex) {    throw new GlobalInterlockException("Could not obtain " + type + " lock",ex);  } finally {    if (tx != null && tx.isActive()) {      tx.rollback();    }  }}  }
class C{  public void recordStartTime(){  PreferenceManager.getDefaultSharedPreferences(BlockCanaryContext.get().provideContext()).edit().putLong("BlockCanary_StartTime",System.currentTimeMillis()).commit();}  }
class C{  public static Cert load(URL url) throws IOException, CertificateException {  X509Certificate cert=CertificateUtils.readX509Certificate(url);  return new Cert(cert);}  }
class C{  public Object clone(){  try {    Money other=(Money)super.clone();    return other;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  @Override public AgentAppFrame createFrame(){  return new MapColoringFrame();}  }
class C{  public static void register(Map<String,Taglet> tagletMap){  if (tagletMap.containsKey(NAME)) {    tagletMap.remove(NAME);  }  tagletMap.put(NAME,new BaleenJavadoc());}  }
class C{  static void putTarget(Target target) throws ExportException {  ObjectEndpoint oe=target.getObjectEndpoint();  WeakRef weakImpl=target.getWeakImpl();  if (DGCImpl.dgcLog.isLoggable(Log.VERBOSE)) {    DGCImpl.dgcLog.log(Log.VERBOSE,"add object " + oe);  }synchronized (tableLock) {    if (target.getImpl() != null) {      if (objTable.containsKey(oe)) {        throw new ExportException("internal error: ObjID already in use");      } else       if (implTable.containsKey(weakImpl)) {        throw new ExportException("object already exported");      }      objTable.put(oe,target);      implTable.put(weakImpl,target);      if (!target.isPermanent()) {        incrementKeepAliveCount();      }    }  }}  }
class C{  private boolean checkNullDereference(final Scope scope) throws CodeUnderTestException {  if (retval instanceof FieldReference) {    FieldReference fieldRef=(FieldReference)retval;    if (fieldRef.getField().isStatic()) {      return false;    }    VariableReference source=fieldRef.getSource();    Object sourceValue=source.getObject(scope);    if (sourceValue == null) {      return true;    }  }  return false;}  }
class C{  public void service(Mail mail){  try {    MimeMessage message=mail.getMessage();    String serialisedMessage=getSerialisedMessage(message);    NameValuePair[] nameValuePairs=getNameValuePairs(serialisedMessage);    String result=httpPost(nameValuePairs);    if (passThrough) {      addHeader(mail,(result == null || result.length() == 0),result);    } else {      mail.setState(Mail.GHOST);    }  } catch (  javax.mail.MessagingException me) {    log(me.getMessage());    addHeader(mail,false,me.getMessage());  }catch (  IOException e) {    log(e.getMessage());    addHeader(mail,false,e.getMessage());  }}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("arc iterator out of bounds");  }  double angle=angStRad;  if (index == 0) {    coords[0]=x + Math.cos(angle) * w;    coords[1]=y + Math.sin(angle) * h;    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_MOVETO;  }  if (index > arcSegs) {    if (index == arcSegs + lineSegs) {      return SEG_CLOSE;    }    coords[0]=x;    coords[1]=y;    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_LINETO;  }  angle+=increment * (index - 1);  double relx=Math.cos(angle);  double rely=Math.sin(angle);  coords[0]=x + (relx - cv * rely) * w;  coords[1]=y + (rely + cv * relx) * h;  angle+=increment;  relx=Math.cos(angle);  rely=Math.sin(angle);  coords[2]=x + (relx + cv * rely) * w;  coords[3]=y + (rely - cv * relx) * h;  coords[4]=x + relx * w;  coords[5]=y + rely * h;  if (affine != null) {    affine.transform(coords,0,coords,0,3);  }  return SEG_CUBICTO;}  }
class C{  private static void showDisposableMessage(final String messageKey,final String message,final Switch ignore,int msgType){  MessageService.instance().showDisposableMessage(messageKey,message,ignore,msgType);}  }
class C{  public SocketWrapper accept() throws IOException {  for (; ; ) {    try {      Socket sock=serverSocket.accept();      return new SocketWrapper(sock);    } catch (    SocketTimeoutException e) {    }catch (    IOException e) {      if (done) {        throw new SocketTerminationException("Server socket has been terminated",e);      } else {        throw e;      }    }  }}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  @Override void finish(){  if (!doVectors || bytesHash.size() == 0) {    return;  }  termsWriter.addFieldToFlush(this);}  }
class C{  public static void isUrl(String member,String value,boolean flag) throws ValidationException {  if (!flag) {    if (value == null || value.trim().length() == 0) {      return;    }  }  if (!ADMValidator.isUrl(value)) {    ValidationException vf=new ValidationException(ReasonEnum.URL,member,new Object[]{value});    logValidationFailure(vf);    throw vf;  }  isDescription(member,value,flag);}  }
class C{  public JSONArray put(Collection<Object> value){  this.put(new JSONArray(value));  return this;}  }
class C{  protected void handlePaymentTypeChange(PaymentType newPt,PaymentInfo pi,Organization customer) throws PaymentDeregistrationException, OperationNotPermittedException {  PaymentType oldPt=pi.getPaymentType();  if (oldPt.getKey() != newPt.getKey()) {    if (oldPt.getCollectionType() == PaymentCollectionType.PAYMENT_SERVICE_PROVIDER && newPt.getCollectionType() == PaymentCollectionType.ORGANIZATION && !Strings.isEmpty(pi.getExternalIdentifier())) {      paymentService.deregisterPaymentInPSPSystem(pi);      pi.setExternalIdentifier(null);    }    Set<Subscription> subs=pi.getSubscriptions();    for (    Subscription sub : subs) {      if (!PaymentDataValidator.isPaymentTypeSupportedBySupplier(customer,sub.getProduct(),newPt)) {        suspendChargeableActiveSubscription(sub);      } else {        revokeSuspendedSubscription(sub);      }    }    pi.setPaymentType(newPt);  }}  }
class C{  public CharCharMap(final char[] k,final char[] v){  this(k,v,DEFAULT_LOAD_FACTOR);}  }
class C{  public DSystemProperties(JDialog parent,String title,Dialog.ModalityType modality){  super(parent,title,modality);  initComponents();}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public void countUp(int count){  sync.releaseShared(-1 * (Math.abs(count)));}  }
class C{  public static byte[] toByteArray(String filename) throws IOException {  File f=new File(filename);  if (!f.exists()) {    throw new FileNotFoundException(filename);  }  ByteArrayOutputStream bos=new ByteArrayOutputStream((int)f.length());  BufferedInputStream in=null;  try {    in=new BufferedInputStream(new FileInputStream(f));    int buf_size=1024;    byte[] buffer=new byte[buf_size];    int len=0;    while (-1 != (len=in.read(buffer,0,buf_size))) {      bos.write(buffer,0,len);    }    return bos.toByteArray();  } catch (  IOException e) {    e.printStackTrace();    throw e;  } finally {    try {      in.close();    } catch (    IOException e) {      e.printStackTrace();    }    bos.close();  }}  }
class C{  public final boolean matchAction(String action){  return hasAction(action);}  }
class C{  private String receiveUpdateFromCentral() throws Exception {  ProcessInfo pi=getProcessInfo();  RemoteUpdateVO data=(RemoteUpdateVO)pi.getSerializableObject();  log.info("receiveUpdateFromCentral Start (" + pi + ") - "+ data);  RowSet sourceRS=data.CentralData;  if (sourceRS == null) {    log.log(Level.SEVERE,"receiveUpdateFromCentral - No Data - " + data);    pi.setSummary("NoData",true);  } else   if (!data.Test.booleanValue()) {    RowSet targetRS=ReplicationLocal.getRowSet(data.Sql,null);    Object result=doIt(ReplicationLocal.START,"sync",new Object[]{data.TableName,data.KeyColumns,sourceRS,targetRS,data.Test,Boolean.FALSE});    log.fine("receiveUpdateFromCentral - " + data.TableName + " - "+ result);    pi.setSerializableObject(null);    boolean replicated=ReplicationLocal.isReplicated(result);    if (!replicated)     pi.setError(true);    if (result != null)     pi.addLog(0,null,null,result.toString());    if (Boolean.FALSE.equals(result))     throw new Exception("receiveUpdateFromCentral - " + data.TableName + " - "+ result);  }  pi.setSerializableObject(null);  log.info("receiveUpdateFromCentral End (" + pi + ") - "+ data);  return "Remote Receive Update from Central OK";}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == JSDocNode.class) {switch (baseOperationID) {case DomPackage.JS_DOC_NODE___TO_STRING:      return DomPackage.SIMPLE_TYPE_REFERENCE___TO_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ContentNode.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public boolean isOverwriteUser2(){  Object oo=get_Value(COLUMNNAME_OverwriteUser2);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public URL(String protocol,String host,String file) throws MalformedURLException {  this(protocol,host,-1,file,null);}  }
class C{  public ExampleSetBasedIndividual(AttributeWeightedExampleSet exampleSet){  this.exampleSet=exampleSet;}  }
class C{  public Spatial doPick(int x,int y,Vector3 position,Vector3 normal,boolean terrainOnly){  mousePos.set(x,y);  Ray3 pickRay=new Ray3WithLine();  viewpointNode.getCamera().getPickRay(mousePos,false,pickRay);  return (World.getInstance().select(pickRay,position,normal,null,terrainOnly));}  }
class C{  public void remove(final Sensor sensor){  Set<Sensor> oldSelection=new HashSet<Sensor>(selection);  boolean rv=selection.remove(sensor);  if (rv) {    fireSelectionChanged(oldSelection,selection);  }}  }
class C{  protected void checkOpen() throws SQLException {  if (isClosed()) {    throw new SQLException("The result set is closed",SQLStateConstants.SQL_STATE_NO_RESULT_SET);  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.startBT=(Button)this.findViewById(R.id.start_bt);}  }
class C{  public List<JCTree> build(){  ListBuffer<JCTree> defs=new ListBuffer<JCTree>();  appendDefinitionsTo(defs);  if (javaClassName != null) {    classBuilder.getInitBuilder().modifiers(Flags.PRIVATE);    classBuilder.modifiers(Flags.FINAL | (modifiers & (Flags.PUBLIC | Flags.PRIVATE))).defs(defs.toList());    if (getterClass == null) {      classBuilder.annotations(owner.makeAtAttribute(setterClass)).annotations(owner.makeAtName(attrName)).satisfies(getSatisfies());    } else {      classBuilder.annotations(owner.makeAtIgnore());      classBuilder.annotations(owner.makeAtSetter(getterClass));    }    if (classAnnotations != null)     classBuilder.annotations(classAnnotations.toList());    if (valueConstructor && hasField)     generateValueConstructor(classBuilder.addConstructor(this.attrTypedDecl.isDeprecated()));    return classBuilder.build();  } else {    return defs.toList();  }}  }
class C{  public static String[] schedulerCommand(Config config,Config runtime,List<Integer> freePorts){  List<String> commands=new ArrayList<>();  String javaExecutable=String.format("%s/%s",Context.javaSandboxHome(config),"bin/java");  commands.add(javaExecutable);  commands.add("-cp");  String completeSchedulerProcessClassPath=new StringBuilder().append(Context.schedulerSandboxClassPath(config)).append(":").append(Context.packingSandboxClassPath(config)).append(":").append(Context.stateManagerSandboxClassPath(config)).toString();  commands.add(completeSchedulerProcessClassPath);  commands.add("com.twitter.heron.scheduler.SchedulerMain");  String[] commandArgs=schedulerCommandArgs(config,runtime,freePorts);  commands.addAll(Arrays.asList(commandArgs));  return commands.toArray(new String[0]);}  }
class C{  public boolean hasRel(){  return super.hasAttribute(REL);}  }
class C{  @ApiOperation(value="Drop triggers on the specified engine") @RequestMapping(value="engine/{engine}/droptriggers",method=RequestMethod.POST) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void postDropTriggersByEngine(@PathVariable("engine") String engineName){  dropTriggersImpl(getSymmetricEngine(engineName));}  }
class C{  public void passScoreBeforeParsing(Text url,CrawlDatum datum,Content content){  if (urlMetaTags == null || content == null || datum == null)   return;  for (  String metatag : urlMetaTags) {    Text metaFromDatum=(Text)datum.getMetaData().get(new Text(metatag));    if (metaFromDatum == null)     continue;    content.getMetadata().set(metatag,metaFromDatum.toString());  }}  }
class C{  public void addPart(String key,String streamName,InputStream inputStream,String type) throws IOException {  if (type == null) {    type=APPLICATION_OCTET_STREAM;  }  out.write(boundaryLine);  out.write(createContentDisposition(key,streamName));  out.write(createContentType(type));  out.write(TRANSFER_ENCODING_BINARY);  out.write(CR_LF);  final byte[] tmp=new byte[4096];  int l;  while ((l=inputStream.read(tmp)) != -1) {    out.write(tmp,0,l);  }  out.write(CR_LF);  out.flush();  try {    if (out != null) {      out.close();    }  } catch (  Exception e) {    e.printStackTrace();    AbLogUtil.e(AbMultipartEntity.class,"Cannot close output stream");  }}  }
class C{  public Matrix4f m10(float m10){  this.m10=m10;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  public void start(int taskId){  this.readTasks.get(taskId).start();}  }
class C{  @Override public void generate(final ITranslationEnvironment environment,final long baseOffset,final OperandSize operandSize,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final long offset=baseOffset;  final int previousInstructions=(int)(baseOffset % 0x100);  final OperandSize archSize=environment.getArchitectureSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(archSize);  final String ediChange=String.valueOf(operandSize.getByteSize());  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(archSize));  final String firstVar=environment.getNextVariableString();  final String secondVar=environment.getNextVariableString();  final String tempEsi1=environment.getNextVariableString();  final String tempEdi1=environment.getNextVariableString();  final String tempEsi2=environment.getNextVariableString();  final String tempEdi2=environment.getNextVariableString();  instructions.add(ReilHelpers.createLdm(offset,archSize,"esi",operandSize,firstVar));  instructions.add(ReilHelpers.createLdm(offset + 1,archSize,"edi",operandSize,secondVar));  final String jmpGoal=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + 8);  instructions.add(ReilHelpers.createJcc(offset + 2,OperandSize.BYTE,Helpers.DIRECTION_FLAG,OperandSize.ADDRESS,jmpGoal));  instructions.add(ReilHelpers.createAdd(offset + 3,archSize,"esi",archSize,ediChange,resultSize,tempEsi1));  instructions.add(ReilHelpers.createAnd(offset + 4,resultSize,tempEsi1,resultSize,truncateMask,archSize,"esi"));  instructions.add(ReilHelpers.createAdd(offset + 5,archSize,"edi",archSize,ediChange,resultSize,tempEdi1));  instructions.add(ReilHelpers.createAnd(offset + 6,resultSize,tempEdi1,resultSize,truncateMask,archSize,"edi"));  final String jmpGoal2=String.format("%d.%d",ReilHelpers.toNativeAddress(new CAddress(baseOffset)).toLong(),previousInstructions + 12);  instructions.add(ReilHelpers.createJcc(offset + 7,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal2));  instructions.add(ReilHelpers.createSub(offset + 8,archSize,"esi",archSize,ediChange,resultSize,tempEsi2));  instructions.add(ReilHelpers.createAnd(offset + 9,resultSize,tempEsi2,resultSize,truncateMask,archSize,"esi"));  instructions.add(ReilHelpers.createSub(offset + 10,archSize,"edi",archSize,ediChange,resultSize,tempEdi2));  instructions.add(ReilHelpers.createAnd(offset + 11,resultSize,tempEdi2,resultSize,truncateMask,archSize,"edi"));  Helpers.generateSub(environment,offset + 12,operandSize,firstVar,secondVar,instructions);}  }
class C{  public OrderPage(final PageParameters params){  super(params);  final String email=ApplicationDirector.getShoppingCart().getCustomerEmail();  final Customer customer;  if (StringUtils.hasLength(email)) {    customer=customerServiceFacade.getCustomerByEmail(ApplicationDirector.getCurrentShop(),email);  } else {    customer=null;    final PageParameters rparams=new PageParameters();    rparams.set(ShoppingCartCommand.CMD_LOGOUT,ShoppingCartCommand.CMD_LOGOUT);    setResponsePage(Application.get().getHomePage(),rparams);  }  final String orderGuid=params.get("order").toString();  CustomerOrder customerOrder=checkoutServiceFacade.findByReference(orderGuid);  if (customerOrder != null && customerOrder.getCustomer() != null && customer != null && customerOrder.getCustomer().getCustomerId() != customer.getCustomerId()) {    customerOrder=null;  }  add(new FeedbackPanel(FEEDBACK));  if (customerOrder != null) {    add(new Label(ORDER_NUM,WicketUtil.createStringResourceModel(this,"orderNoTitle",Collections.<String,Object>singletonMap("ordernum",customerOrder.getOrdernum()))));    add(new Label(ORDER_STATE,WicketUtil.createStringResourceModel(this,customerOrder.getOrderStatus())));    add(new ShoppingCartPaymentVerificationView(ORDER_PANEL,orderGuid,true));    add(new ExternalLink("receipt",getWicketUtil().getHttpServletRequest().getContextPath() + "/orderreceipt.pdf?ordernum=" + customerOrder.getOrdernum()));  } else {    add(new Label(ORDER_NUM,""));    add(new Label(ORDER_STATE,""));    add(new Label(ORDER_PANEL,""));    add(new ExternalLink("receipt","#").setVisible(false));    error(getLocalizer().getString("orderNotFound",this));  }  add(new StandardFooter(FOOTER));  add(new StandardHeader(HEADER));  add(new ServerSideJs("serverSideJs"));  add(new HeaderMetaInclude("headerInclude"));}  }
class C{  public void addItem(String text){  StringConverter<E> c=getConverter();  if (c == null)   throw new IllegalArgumentException("You must define a converter before you can add items as Strings");  E item=c.fromString(text);  if (item != null)   getItems().add(item);}  }
class C{  @SuppressWarnings("unchecked") public static <C extends Sail>C findSailInStack(Sail topSail,Class<C> sailClass){  if (sailClass == null) {    return null;  }  Sail currentSail=topSail;  while (currentSail != null) {    if (sailClass.isInstance(currentSail)) {      break;    }    if (currentSail instanceof StackableSail) {      currentSail=((StackableSail)currentSail).getBaseSail();    } else {      currentSail=null;    }  }  return (C)currentSail;}  }
class C{  @Override public void start(Map<String,String> map){  try {    port=Integer.parseInt(map.get(MongodbSinkConnector.PORT));  } catch (  Exception e) {    throw new ConnectException("Setting " + MongodbSinkConnector.PORT + " should be an integer");  }  try {    bulkSize=Integer.parseInt(map.get(MongodbSinkConnector.BULK_SIZE));  } catch (  Exception e) {    throw new ConnectException("Setting " + MongodbSinkConnector.BULK_SIZE + " should be an integer");  }  database=map.get(MongodbSinkConnector.DATABASE);  host=map.get(MongodbSinkConnector.HOST);  collections=map.get(MongodbSinkConnector.COLLECTIONS);  topics=map.get(MongodbSinkConnector.TOPICS);  List<String> collectionsList=Arrays.asList(collections.split(","));  List<String> topicsList=Arrays.asList(topics.split(","));  MongoClient mongoClient=new MongoClient(host,port);  db=mongoClient.getDatabase(database);  mapping=new HashMap<>();  for (int i=0; i < topicsList.size(); i++) {    String topic=topicsList.get(i);    String collection=collectionsList.get(i);    mapping.put(topic,db.getCollection(collection));  }}  }
class C{  public String toDot(){  StringBuilder b=new StringBuilder();  b.append("digraph Automaton {\n");  b.append("  rankdir = LR\n");  final int numStates=getNumStates();  if (numStates > 0) {    b.append("  initial [shape=plaintext,label=\"0\"]\n");    b.append("  initial -> 0\n");  }  Transition t=new Transition();  for (int state=0; state < numStates; state++) {    b.append("  ");    b.append(state);    if (isAccept(state)) {      b.append(" [shape=doublecircle,label=\"" + state + "\"]\n");    } else {      b.append(" [shape=circle,label=\"" + state + "\"]\n");    }    int numTransitions=initTransition(state,t);    for (int i=0; i < numTransitions; i++) {      getNextTransition(t);      assert t.max >= t.min;      b.append("  ");      b.append(state);      b.append(" -> ");      b.append(t.dest);      b.append(" [label=\"");      appendCharString(t.min,b);      if (t.max != t.min) {        b.append('-');        appendCharString(t.max,b);      }      b.append("\"]\n");    }  }  b.append('}');  return b.toString();}  }
class C{  public void addHeaders(List<Header> headers){  if (this.headers == null) {    this.headers=new ArrayList<HeaderItem>();  }  for (  Header header : headers) {    this.headers.add(new HeaderItem(header));  }}  }
class C{  public boolean similar(Object other){  if (!(other instanceof JSONArray)) {    return false;  }  int len=this.length();  if (len != ((JSONArray)other).length()) {    return false;  }  for (int i=0; i < len; i+=1) {    Object valueThis=this.get(i);    Object valueOther=((JSONArray)other).get(i);    if (valueThis instanceof JSONObject) {      if (!((JSONObject)valueThis).similar(valueOther)) {        return false;      }    } else     if (valueThis instanceof JSONArray) {      if (!((JSONArray)valueThis).similar(valueOther)) {        return false;      }    } else     if (!valueThis.equals(valueOther)) {      return false;    }  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public T findUniqueByCriteria(final int firstResult,final Criterion... criterion){  Criteria crit=sessionFactory.getCurrentSession().createCriteria(getPersistentClass());  for (  Criterion c : criterion) {    crit.add(c);  }  return (T)crit.setFirstResult(firstResult).setMaxResults(1).uniqueResult();}  }
class C{  private CodePattern buildCodePattern_EXHAUSTIVE_CODE(Attribute classLabel){  int numberOfClasses=classLabel.getMapping().size();  int numberOfFunctions=(int)Math.pow(2,numberOfClasses - 1) - 1;  CodePattern codePattern=new CodePattern(numberOfClasses,numberOfFunctions);  for (int i=0; i < numberOfFunctions; i++) {    codePattern.data[0][i]="true";  }  for (int i=1; i < numberOfClasses; i++) {    int currentStep=(int)Math.pow(2,numberOfClasses - (i + 1));    for (int j=0; j < numberOfFunctions; j++) {      codePattern.data[i][j]="" + (((j / currentStep) % 2) > 0);    }  }  return codePattern;}  }
class C{  public static TableMeta createTempODPSTable(TableInfo tableMeta,int lifeCycle){  TableMeta tempTable=new TableMeta();  tempTable.setComment(tableMeta.getComments());  tempTable.setLifeCycle(lifeCycle);  String tableSchema=tableMeta.getTableSchema();  String tableName=tableMeta.getTableName();  tempTable.setTableName(generateTempTableName(tableSchema,tableName));  List<FieldSchema> tempColumns=new ArrayList<FieldSchema>();  List<ColumnInfo> columns=tableMeta.getColumns();  for (  ColumnInfo column : columns) {    FieldSchema tempColumn=new FieldSchema();    tempColumn.setName(column.getName());    tempColumn.setType(toODPSDataType(column.getDataType()));    tempColumn.setComment(column.getComment());    tempColumns.add(tempColumn);  }  tempTable.setCols(tempColumns);  tempTable.setPartitionKeys(null);  return tempTable;}  }
class C{  public boolean isStarted(){  return started;}  }
class C{  public void build(BytecodeStream stream){  int codeSize=code.getCodeSize();  BciBlock[] blockMap=new BciBlock[codeSize];  makeExceptionEntries(blockMap);  iterateOverBytecodes(blockMap,stream);  if (hasJsrBytecodes) {    if (!SupportJsrBytecodes.getValue()) {      throw new JsrNotSupportedBailout("jsr/ret parsing disabled");    }    createJsrAlternatives(blockMap,blockMap[0]);  }  if (Debug.isLogEnabled()) {    this.log(blockMap,"Before BlockOrder");  }  computeBlockOrder(blockMap);  fixLoopBits(blockMap);  assert verify();  startBlock=blockMap[0];  if (Debug.isLogEnabled()) {    this.log(blockMap,"Before LivenessAnalysis");  }}  }
class C{  public SimpleSelect(long[] bits,long length){  this(LongArrayBitVector.wrap(bits,length));}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return KEY;case 2:  return VERSIONS;default :return null;}}  }
class C{  public static boolean isEmpty(double[] array){  return array == null || array.length == 0;}  }
class C{  @Override public Object resolveVariable(FacesContext context,String name) throws EvaluationException {  Object result=null;  ELResolverChainType type=ELResolverChainType.Faces;  Object valueObject=RequestStateManager.get(context,RequestStateManager.EL_RESOLVER_CHAIN_TYPE_NAME);  if (null != valueObject && valueObject instanceof ELResolverChainType) {    type=(ELResolverChainType)valueObject;  }  if (ELResolverChainType.JSP == type) {    ValueExpression ve=context.getApplication().getExpressionFactory().createValueExpression(context.getELContext(),"#{" + name + "}",Object.class);    result=ve.getValue(context.getELContext());  } else   if (ELResolverChainType.Faces == type) {    ELResolver elr=context.getApplication().getELResolver();    result=elr.getValue(context.getELContext(),null,name);  }  return result;}  }
class C{  public static Result evaluateModelBatchWindow(MultiLabelClassifier h,Instances D,int numWindows,double rLabeled,String Top,String Vop) throws Exception {  if (h.getDebug())   System.out.println(":- Classifier -: " + h.getClass().getName() + ": "+ Arrays.toString(h.getOptions()));  int N=D.numInstances();  int L=D.classIndex();  Result result=null;  ArrayList<HashMap<String,Object>> samples=new ArrayList<HashMap<String,Object>>();  long train_time=0;  long test_time=0;  int windowSize=(int)Math.floor(D.numInstances() / (double)numWindows);  if (rLabeled * windowSize < 1.)   throw new Exception("[Error] The ratio of labelled instances (" + rLabeled + ") is too small given the window size!");  double nth=1. / rLabeled;  Instances D_init=new Instances(D,0,windowSize);  if (h.getDebug()) {    System.out.println("Training classifier on initial window ...");  }  train_time=System.currentTimeMillis();  h.buildClassifier(D_init);  train_time=System.currentTimeMillis() - train_time;  if (h.getDebug()) {    System.out.println("Done (in " + (train_time / 1000.0) + " s)");  }  D=new Instances(D,windowSize,D.numInstances() - windowSize);  double t[]=new double[L];  Arrays.fill(t,0.5);  int V=MLUtils.getIntegerOption(Vop,3);  if (h.getDebug()) {    System.out.println("--------------------------------------------------------------------------------");    System.out.print("#" + Utils.padLeft("w",6) + " "+ Utils.padLeft("n",6));    for (    String m : measures) {      System.out.print(" ");      System.out.print(Utils.padLeft(m,12));    }    System.out.println("");    System.out.println("--------------------------------------------------------------------------------");  }  int i=0;  for (int w=0; w < numWindows - 1; w++) {    result=new Result(L);    result.setInfo("Supervision",String.valueOf(rLabeled));    result.setInfo("Type","MLi");    int n=0;    test_time=0;    train_time=0;    for (int c=0; i < (w * windowSize) + windowSize; i++) {      Instance x=D.instance(i);      AbstractInstance x_=(AbstractInstance)((AbstractInstance)x).copy();      if (rLabeled < 0.5 && (i % (int)(1 / rLabeled) == 0) || (rLabeled >= 0.5 && (i % (int)(1. / (1. - rLabeled)) != 0))) {        long before_test=System.currentTimeMillis();        double y[]=h.distributionForInstance(x_);        long after_test=System.currentTimeMillis();        test_time+=(after_test - before_test);        result.addResult(y,x);        n++;      } else {        x=MLUtils.setLabelsMissing(x,L);      }      long before=System.currentTimeMillis();      ((UpdateableClassifier)h).updateClassifier(x);      long after=System.currentTimeMillis();      train_time+=(after - before);    }    result.setInfo("Threshold",Arrays.toString(t));    result.output=Result.getStats(result,Vop);    result.setMeasurement("Test time",(test_time) / 1000.0);    result.setMeasurement("Build time",(train_time) / 1000.0);    result.setMeasurement("Total time",(test_time + train_time) / 1000.0);    result.setMeasurement("Threshold",(double)t[0]);    result.setMeasurement("Instances",(double)i);    result.setMeasurement("Samples",(double)(samples.size() + 1));    samples.add(result.output);    if (h.getDebug()) {      System.out.print("#" + Utils.doubleToString((double)w + 1,6,0) + " "+ Utils.doubleToString((double)n,6,0));      n=0;      for (      String m : measures) {        System.out.print(" ");        System.out.print(Utils.doubleToString((Double)result.getMeasurement(m),12,4));      }      System.out.println("");    }    if (Top.equals("PCutL")) {      t=ThresholdUtils.calibrateThresholds(result.predictions,MLUtils.labelCardinalities(result.actuals));    } else {      Arrays.fill(t,ThresholdUtils.calibrateThreshold(result.predictions,MLUtils.labelCardinality(result.allTrueValues())));    }  }  if (h.getDebug()) {    System.out.println("--------------------------------------------------------------------------------");  }  result.setInfo("Classifier",h.getClass().getName());  result.vals.put("Test time",(test_time) / 1000.0);  result.vals.put("Build time",(train_time) / 1000.0);  result.vals.put("Total time",(test_time + train_time) / 1000.0);  result.vals.put("Total instances tested",(double)i);  result.vals.put("Initial instances for training",(double)windowSize);  result.setInfo("Options",Arrays.toString(h.getOptions()));  result.setInfo("Additional Info",h.toString());  result.setInfo("Dataset",MLUtils.getDatasetName(D));  result.output=Result.getStats(result,Vop);  result.setMeasurement("Results sampled over time",Result.getResultsAsInstances(samples));  return result;}  }
class C{  public synchronized void dumpGraph(){  dumpGraph(Controller.options.DYNAMIC_CALL_FILE_OUTPUT);}  }
class C{  public GT_MetaGenerated_Item_X01(String aUnlocalized,OrePrefixes aGeneratedPrefix,int aIconSetIndex){  super(aUnlocalized,(short)32000,(short)766);  mPrefix=aGeneratedPrefix;  mIconSetIndex=aIconSetIndex >= 0 ? aIconSetIndex : aGeneratedPrefix.mTextureIndex >= 0 ? aGeneratedPrefix.mTextureIndex : 0;  for (int i=0; i < GregTech_API.sGeneratedMaterials.length; i++) {    OrePrefixes tPrefix=mPrefix;    if (tPrefix == null)     continue;    Materials tMaterial=GregTech_API.sGeneratedMaterials[i];    if (tMaterial == null)     continue;    if (mPrefix.doGenerateItem(tMaterial)) {      ItemStack tStack=new ItemStack(this,1,i);      GT_LanguageManager.addStringLocalization(getUnlocalizedName(tStack) + ".name",getDefaultLocalization(tPrefix,tMaterial,i));      GT_LanguageManager.addStringLocalization(getUnlocalizedName(tStack) + ".tooltip",tMaterial.getToolTip(tPrefix.mMaterialAmount / M));      String tOreName=getOreDictString(tPrefix,tMaterial);      tPrefix=OrePrefixes.getOrePrefix(tOreName);      if (tPrefix != null && tPrefix.mIsUnificatable) {        GT_OreDictUnificator.set(tPrefix,OrePrefixes.getMaterial(tOreName,tPrefix),tStack);      } else {        GT_OreDictUnificator.registerOre(tOreName,tStack);      }    }  }}  }
class C{  public void stopEnumeration(EnumerationDeletionContext aws){  aws.computeEnumerationRequest.enumerationAction=EnumerationAction.STOP;  handleEnumerationRequestForDeletion(aws);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void checkAtomic(CacheMode cacheMode) throws Exception {  initialize(cacheMode,ATOMIC,null,null);  caches[0].invoke(key1,new Transformer());  checkEventNodeIdsStrict(Transformer.class.getName(),primaryIdsForKeys(key1));  assert evts.isEmpty();  caches[0].invokeAll(keys,new Transformer());  checkEventNodeIdsStrict(Transformer.class.getName(),primaryIdsForKeys(key1,key2));  assert evts.isEmpty();  caches[0].invoke(key1,new TransformerWithInjection());  checkEventNodeIdsStrict(TransformerWithInjection.class.getName(),primaryIdsForKeys(key1));  assert evts.isEmpty();  caches[0].invokeAll(keys,new TransformerWithInjection());  checkEventNodeIdsStrict(TransformerWithInjection.class.getName(),primaryIdsForKeys(key1,key2));}  }
class C{  public BinaryNode binaryNode(byte[] data){  return BinaryNode.valueOf(data);}  }
class C{  public static void d(String msg,Throwable thr){  log(LEVEL.DEBUG,null,msg,thr);}  }
class C{  int warningCount(){  return compiler.warningCount();}  }
class C{  public void actionPerformed(ActionEvent e){  resizeFrame(increment,increment);}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  com.google.common.base.Preconditions.checkArgument(expression,errorMessage);}  }
class C{  public CallSiteTreeNode(InlineSequence seq){  callSite=seq;}  }
class C{  public void testBackupRestoreDefault() throws Exception {  backupRestore("testBackupRestoreDefault",null,null);}  }
class C{  @Override public void useTextExtraction(){  options.setXMLExtraction(false);}  }
class C{  @Override public String toString(){  return MediaTypeHeaderParser.toString(this);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypeRefsPackage.COMPOSED_TYPE_REF__CACHED_COMPOSED_MEMBERS:    return ((InternalEList<?>)getCachedComposedMembers()).basicRemove(otherEnd,msgs);case TypeRefsPackage.COMPOSED_TYPE_REF__TYPE_REFS:  return ((InternalEList<?>)getTypeRefs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final void incrementMessageCounter(int count){  m_instanceCount+=count;}  }
class C{  public static String evaluateModel(Classifier classifier,String[] options) throws Exception {  Instances train=null, tempTrain, test=null, template=null;  int seed=1, folds=10, classIndex=-1;  boolean noCrossValidation=false;  String trainFileName, testFileName, sourceClass, classIndexString, seedString, foldsString, objectInputFileName, objectOutputFileName;  boolean noOutput=false, trainStatistics=true, printMargins=false, printComplexityStatistics=false, printGraph=false, classStatistics=false, printSource=false;  StringBuffer text=new StringBuffer();  DataSource trainSource=null, testSource=null;  ObjectInputStream objectInputStream=null;  BufferedInputStream xmlInputStream=null;  CostMatrix costMatrix=null;  StringBuffer schemeOptionsText=null;  long trainTimeStart=0, trainTimeElapsed=0, testTimeStart=0, testTimeElapsed=0;  String xml="";  String[] optionsTmp=null;  Classifier classifierBackup;  int actualClassIndex=-1;  String splitPercentageString="";  double splitPercentage=-1;  boolean preserveOrder=false;  boolean forceBatchTraining=false;  boolean trainSetPresent=false;  boolean testSetPresent=false;  boolean discardPredictions=false;  String thresholdFile;  String thresholdLabel;  StringBuffer predsBuff=null;  AbstractOutput classificationOutput=null;  if (Utils.getFlag("h",options) || Utils.getFlag("help",options)) {    boolean globalInfo=Utils.getFlag("synopsis",options) || Utils.getFlag("info",options);    throw new Exception("\nHelp requested." + makeOptionString(classifier,globalInfo));  }  String metricsToDisable=Utils.getOption("disable",options);  List<String> disableList=new ArrayList<String>();  if (metricsToDisable.length() > 0) {    String[] parts=metricsToDisable.split(",");    for (    String p : parts) {      disableList.add(p.trim().toLowerCase());    }  }  try {    xml=Utils.getOption("xml",options);    if (!xml.equals("")) {      options=new XMLOptions(xml).toArray();    }    optionsTmp=new String[options.length];    for (int i=0; i < options.length; i++) {      optionsTmp[i]=options[i];    }    String tmpO=Utils.getOption('l',optionsTmp);    if (tmpO.endsWith(".xml")) {      boolean success=false;      try {        PMMLModel pmmlModel=PMMLFactory.getPMMLModel(tmpO);        if (pmmlModel instanceof PMMLClassifier) {          classifier=((PMMLClassifier)pmmlModel);          success=true;        }      } catch (      IllegalArgumentException ex) {        success=false;      }      if (!success) {        XMLClassifier xmlserial=new XMLClassifier();        OptionHandler cl=(OptionHandler)xmlserial.read(Utils.getOption('l',options));        optionsTmp=new String[options.length + cl.getOptions().length];        System.arraycopy(cl.getOptions(),0,optionsTmp,0,cl.getOptions().length);        System.arraycopy(options,0,optionsTmp,cl.getOptions().length,options.length);        options=optionsTmp;      }    }    noCrossValidation=Utils.getFlag("no-cv",options);    classIndexString=Utils.getOption('c',options);    if (classIndexString.length() != 0) {      if (classIndexString.equals("first")) {        classIndex=1;      } else       if (classIndexString.equals("last")) {        classIndex=-1;      } else {        classIndex=Integer.parseInt(classIndexString);      }    }    trainFileName=Utils.getOption('t',options);    objectInputFileName=Utils.getOption('l',options);    objectOutputFileName=Utils.getOption('d',options);    testFileName=Utils.getOption('T',options);    foldsString=Utils.getOption('x',options);    if (foldsString.length() != 0) {      folds=Integer.parseInt(foldsString);    }    seedString=Utils.getOption('s',options);    if (seedString.length() != 0) {      seed=Integer.parseInt(seedString);    }    if (trainFileName.length() == 0) {      if (objectInputFileName.length() == 0) {        throw new Exception("No training file and no object input file given.");      }      if (testFileName.length() == 0) {        throw new Exception("No training file and no test file given.");      }    } else     if ((objectInputFileName.length() != 0) && ((!(classifier instanceof UpdateableClassifier)) || (testFileName.length() == 0))) {      throw new Exception("Classifier not incremental, or no " + "test file provided: can't " + "use both train and model file.");    }    try {      if (trainFileName.length() != 0) {        trainSetPresent=true;        trainSource=new DataSource(trainFileName);      }      if (testFileName.length() != 0) {        testSetPresent=true;        testSource=new DataSource(testFileName);      }      if (objectInputFileName.length() != 0) {        if (objectInputFileName.endsWith(".xml")) {          objectInputStream=null;          xmlInputStream=null;        } else {          InputStream is=new FileInputStream(objectInputFileName);          if (objectInputFileName.endsWith(".gz")) {            is=new GZIPInputStream(is);          }          if (!(objectInputFileName.endsWith(".koml") && KOML.isPresent())) {            objectInputStream=new ObjectInputStream(is);            xmlInputStream=null;          } else {            objectInputStream=null;            xmlInputStream=new BufferedInputStream(is);          }        }      }    } catch (    Exception e) {      throw new Exception("Can't open file " + e.getMessage() + '.');    }    if (testSetPresent) {      template=test=testSource.getStructure();      if (classIndex != -1) {        test.setClassIndex(classIndex - 1);      } else {        if ((test.classIndex() == -1) || (classIndexString.length() != 0)) {          test.setClassIndex(test.numAttributes() - 1);        }      }      actualClassIndex=test.classIndex();    } else {      splitPercentageString=Utils.getOption("split-percentage",options);      if (splitPercentageString.length() != 0) {        if (foldsString.length() != 0) {          throw new Exception("Percentage split cannot be used in conjunction with " + "cross-validation ('-x').");        }        splitPercentage=Double.parseDouble(splitPercentageString);        if ((splitPercentage <= 0) || (splitPercentage >= 100)) {          throw new Exception("Percentage split value needs be >0 and <100.");        }      } else {        splitPercentage=-1;      }      preserveOrder=Utils.getFlag("preserve-order",options);      if (preserveOrder) {        if (splitPercentage == -1) {          throw new Exception("Percentage split ('-split-percentage') is missing.");        }      }      if (splitPercentage > 0) {        testSetPresent=true;        Instances tmpInst=trainSource.getDataSet(actualClassIndex);        if (!preserveOrder) {          tmpInst.randomize(new Random(seed));        }        int trainSize=(int)Math.round(tmpInst.numInstances() * splitPercentage / 100);        int testSize=tmpInst.numInstances() - trainSize;        Instances trainInst=new Instances(tmpInst,0,trainSize);        Instances testInst=new Instances(tmpInst,trainSize,testSize);        trainSource=new DataSource(trainInst);        testSource=new DataSource(testInst);        template=test=testSource.getStructure();        if (classIndex != -1) {          test.setClassIndex(classIndex - 1);        } else {          if ((test.classIndex() == -1) || (classIndexString.length() != 0)) {            test.setClassIndex(test.numAttributes() - 1);          }        }        actualClassIndex=test.classIndex();      }    }    if (trainSetPresent) {      template=train=trainSource.getStructure();      if (classIndex != -1) {        train.setClassIndex(classIndex - 1);      } else {        if ((train.classIndex() == -1) || (classIndexString.length() != 0)) {          train.setClassIndex(train.numAttributes() - 1);        }      }      actualClassIndex=train.classIndex();      if (!(classifier instanceof weka.classifiers.misc.InputMappedClassifier)) {        if ((testSetPresent) && !test.equalHeaders(train)) {          throw new IllegalArgumentException("Train and test file not compatible!\n" + test.equalHeadersMsg(train));        }      }    }    if (template == null) {      throw new Exception("No actual dataset provided to use as template");    }    costMatrix=handleCostOption(Utils.getOption('m',options),template.numClasses());    classStatistics=!Utils.getFlag("do-not-output-per-class-statistics",options);    noOutput=Utils.getFlag('o',options);    trainStatistics=!Utils.getFlag('v',options);    printComplexityStatistics=Utils.getFlag('k',options);    printMargins=Utils.getFlag('r',options);    printGraph=Utils.getFlag('g',options);    sourceClass=Utils.getOption('z',options);    printSource=(sourceClass.length() != 0);    thresholdFile=Utils.getOption("threshold-file",options);    thresholdLabel=Utils.getOption("threshold-label",options);    forceBatchTraining=Utils.getFlag("force-batch-training",options);    String classifications=Utils.getOption("classifications",options);    String classificationsOld=Utils.getOption("p",options);    if (classifications.length() > 0) {      noOutput=true;      classificationOutput=AbstractOutput.fromCommandline(classifications);      if (classificationOutput == null) {        throw new Exception("Failed to instantiate class for classification output: " + classifications);      }      classificationOutput.setHeader(template);    } else     if (classificationsOld.length() > 0) {      noOutput=true;      classificationOutput=new PlainText();      classificationOutput.setHeader(template);      if (!classificationsOld.equals("0")) {        classificationOutput.setAttributes(classificationsOld);      }      classificationOutput.setOutputDistribution(Utils.getFlag("distribution",options));    } else {      if (Utils.getFlag("distribution",options)) {        throw new Exception("Cannot print distribution without '-p' option!");      }    }    discardPredictions=Utils.getFlag("no-predictions",options);    if (discardPredictions && (classificationOutput != null)) {      throw new Exception("Cannot discard predictions ('-no-predictions') and output predictions at the same time ('-classifications/-p')!");    }    if ((!trainSetPresent) && (printComplexityStatistics)) {      throw new Exception("Cannot print complexity statistics ('-k') without training file ('-t')!");    }    if (objectInputFileName.length() != 0) {      Utils.checkForRemainingOptions(options);    } else {      if (classifier instanceof OptionHandler) {        for (        String option : options) {          if (option.length() != 0) {            if (schemeOptionsText == null) {              schemeOptionsText=new StringBuffer();            }            if (option.indexOf(' ') != -1) {              schemeOptionsText.append('"' + option + "\" ");            } else {              schemeOptionsText.append(option + " ");            }          }        }        ((OptionHandler)classifier).setOptions(options);      }    }    Utils.checkForRemainingOptions(options);  } catch (  Exception e) {    throw new Exception("\nWeka exception: " + e.getMessage() + makeOptionString(classifier,false));  }  if (objectInputFileName.length() != 0) {    if (objectInputStream != null) {      classifier=(Classifier)objectInputStream.readObject();      Instances savedStructure=null;      try {        savedStructure=(Instances)objectInputStream.readObject();      } catch (      Exception ex) {      }      if (savedStructure != null) {        if (!template.equalHeaders(savedStructure)) {          throw new Exception("training and test set are not compatible\n" + template.equalHeadersMsg(savedStructure));        }      }      objectInputStream.close();    } else     if (xmlInputStream != null) {      classifier=(Classifier)KOML.read(xmlInputStream);      xmlInputStream.close();    }  }  Evaluation trainingEvaluation=new Evaluation(new Instances(template,0),costMatrix);  Evaluation testingEvaluation=new Evaluation(new Instances(template,0),costMatrix);  if (classifier instanceof weka.classifiers.misc.InputMappedClassifier) {    Instances mappedClassifierHeader=((weka.classifiers.misc.InputMappedClassifier)classifier).getModelHeader(new Instances(template,0));    trainingEvaluation=new Evaluation(new Instances(mappedClassifierHeader,0),costMatrix);    testingEvaluation=new Evaluation(new Instances(mappedClassifierHeader,0),costMatrix);  }  trainingEvaluation.setDiscardPredictions(discardPredictions);  trainingEvaluation.dontDisplayMetrics(disableList);  testingEvaluation.setDiscardPredictions(discardPredictions);  testingEvaluation.dontDisplayMetrics(disableList);  if (!trainSetPresent) {    testingEvaluation.useNoPriors();  }  classifierBackup=AbstractClassifier.makeCopy(classifier);  if ((classifier instanceof UpdateableClassifier) && (testSetPresent || noCrossValidation) && (costMatrix == null)&& (trainSetPresent)&& !forceBatchTraining) {    trainingEvaluation.setPriors(train);    testingEvaluation.setPriors(train);    trainTimeStart=System.currentTimeMillis();    if (objectInputFileName.length() == 0) {      classifier.buildClassifier(train);    }    Instance trainInst;    while (trainSource.hasMoreElements(train)) {      trainInst=trainSource.nextElement(train);      trainingEvaluation.updatePriors(trainInst);      testingEvaluation.updatePriors(trainInst);      ((UpdateableClassifier)classifier).updateClassifier(trainInst);    }    if (classifier instanceof UpdateableBatchProcessor) {      ((UpdateableBatchProcessor)classifier).batchFinished();    }    trainTimeElapsed=System.currentTimeMillis() - trainTimeStart;  } else   if (objectInputFileName.length() == 0) {    tempTrain=trainSource.getDataSet(actualClassIndex);    if (classifier instanceof weka.classifiers.misc.InputMappedClassifier && !trainingEvaluation.getHeader().equalHeaders(tempTrain)) {      Instances mappedClassifierDataset=((weka.classifiers.misc.InputMappedClassifier)classifier).getModelHeader(new Instances(template,0));      for (int zz=0; zz < tempTrain.numInstances(); zz++) {        Instance mapped=((weka.classifiers.misc.InputMappedClassifier)classifier).constructMappedInstance(tempTrain.instance(zz));        mappedClassifierDataset.add(mapped);      }      tempTrain=mappedClassifierDataset;    }    trainingEvaluation.setPriors(tempTrain);    testingEvaluation.setPriors(tempTrain);    trainTimeStart=System.currentTimeMillis();    classifier.buildClassifier(tempTrain);    trainTimeElapsed=System.currentTimeMillis() - trainTimeStart;  }  if (classificationOutput != null) {    if (classifier instanceof weka.classifiers.misc.InputMappedClassifier) {      classificationOutput.setHeader(trainingEvaluation.getHeader());    }  }  if (objectOutputFileName.length() != 0) {    OutputStream os=new FileOutputStream(objectOutputFileName);    if (!(objectOutputFileName.endsWith(".xml") || (objectOutputFileName.endsWith(".koml") && KOML.isPresent()))) {      if (objectOutputFileName.endsWith(".gz")) {        os=new GZIPOutputStream(os);      }      ObjectOutputStream objectOutputStream=new ObjectOutputStream(os);      objectOutputStream.writeObject(classifier);      if (template != null) {        objectOutputStream.writeObject(template);      }      objectOutputStream.flush();      objectOutputStream.close();    } else {      BufferedOutputStream xmlOutputStream=new BufferedOutputStream(os);      if (objectOutputFileName.endsWith(".xml")) {        XMLSerialization xmlSerial=new XMLClassifier();        xmlSerial.write(xmlOutputStream,classifier);      } else       if (objectOutputFileName.endsWith(".koml")) {        KOML.write(xmlOutputStream,classifier);      }      xmlOutputStream.close();    }  }  if ((classifier instanceof Drawable) && (printGraph)) {    return ((Drawable)classifier).graph();  }  if ((classifier instanceof Sourcable) && (printSource)) {    return wekaStaticWrapper((Sourcable)classifier,sourceClass);  }  if (!(noOutput || printMargins)) {    if (classifier instanceof OptionHandler) {      if (schemeOptionsText != null) {        text.append("\nOptions: " + schemeOptionsText);        text.append("\n");      }    }    text.append("\n" + classifier.toString() + "\n");  }  if (!printMargins && (costMatrix != null)) {    text.append("\n=== Evaluation Cost Matrix ===\n\n");    text.append(costMatrix.toString());  }  if (classificationOutput != null) {    DataSource source=testSource;    predsBuff=new StringBuffer();    classificationOutput.setBuffer(predsBuff);    if (source == null && noCrossValidation) {      source=trainSource;      predsBuff.append("\n=== Predictions on training data ===\n\n");    } else {      predsBuff.append("\n=== Predictions on test data ===\n\n");    }    if (source != null) {      classificationOutput.print(classifier,source);    }  }  if ((trainStatistics) && (trainSetPresent)) {    if ((classifier instanceof UpdateableClassifier) && (testSetPresent || noCrossValidation) && (costMatrix == null)&& !forceBatchTraining) {      trainSource.reset();      train=trainSource.getStructure(actualClassIndex);      testTimeStart=System.currentTimeMillis();      Instance trainInst;      while (trainSource.hasMoreElements(train)) {        trainInst=trainSource.nextElement(train);        trainingEvaluation.evaluateModelOnce(classifier,trainInst);      }      testTimeElapsed=System.currentTimeMillis() - testTimeStart;    } else {      testTimeStart=System.currentTimeMillis();      trainingEvaluation.evaluateModel(classifier,trainSource.getDataSet(actualClassIndex));      testTimeElapsed=System.currentTimeMillis() - testTimeStart;    }    if (printMargins) {      return trainingEvaluation.toCumulativeMarginDistributionString();    } else {      if (classificationOutput == null) {        text.append("\nTime taken to build model: " + Utils.doubleToString(trainTimeElapsed / 1000.0,2) + " seconds");        if (splitPercentage > 0) {          text.append("\nTime taken to test model on training split: ");        } else {          text.append("\nTime taken to test model on training data: ");        }        text.append(Utils.doubleToString(testTimeElapsed / 1000.0,2) + " seconds");        if (splitPercentage > 0) {          text.append(trainingEvaluation.toSummaryString("\n\n=== Error on training" + " split ===\n",printComplexityStatistics));        } else {          text.append(trainingEvaluation.toSummaryString("\n\n=== Error on training" + " data ===\n",printComplexityStatistics));        }        if (template.classAttribute().isNominal()) {          if (classStatistics) {            text.append("\n\n" + trainingEvaluation.toClassDetailsString());          }          text.append("\n\n" + trainingEvaluation.toMatrixString());        }      }    }  }  if (testSource != null) {    testSource.reset();    if (classifier instanceof BatchPredictor) {      testingEvaluation.evaluateModel(classifier,testSource.getDataSet(test.classIndex()));    } else {      test=testSource.getStructure(test.classIndex());      Instance testInst;      while (testSource.hasMoreElements(test)) {        testInst=testSource.nextElement(test);        testingEvaluation.evaluateModelOnceAndRecordPrediction(classifier,testInst);      }    }    if (splitPercentage > 0) {      if (classificationOutput == null) {        text.append("\n\n" + testingEvaluation.toSummaryString("=== Error on test split ===\n",printComplexityStatistics));      }    } else {      if (classificationOutput == null) {        text.append("\n\n" + testingEvaluation.toSummaryString("=== Error on test data ===\n",printComplexityStatistics));      }    }  } else   if (trainSource != null) {    if (!noCrossValidation) {      Random random=new Random(seed);      classifier=AbstractClassifier.makeCopy(classifierBackup);      if (classificationOutput == null) {        testingEvaluation.crossValidateModel(classifier,trainSource.getDataSet(actualClassIndex),folds,random);        if (template.classAttribute().isNumeric()) {          text.append("\n\n\n" + testingEvaluation.toSummaryString("=== Cross-validation ===\n",printComplexityStatistics));        } else {          text.append("\n\n\n" + testingEvaluation.toSummaryString("=== Stratified " + "cross-validation ===\n",printComplexityStatistics));        }      } else {        predsBuff=new StringBuffer();        classificationOutput.setBuffer(predsBuff);        predsBuff.append("\n=== Predictions under cross-validation ===\n\n");        testingEvaluation.crossValidateModel(classifier,trainSource.getDataSet(actualClassIndex),folds,random,classificationOutput);      }    }  }  if (template.classAttribute().isNominal() && (classificationOutput == null) && (!noCrossValidation || (testSource != null))) {    if (classStatistics) {      text.append("\n\n" + testingEvaluation.toClassDetailsString());    }    text.append("\n\n" + testingEvaluation.toMatrixString());  }  if (predsBuff != null) {    text.append("\n" + predsBuff);  }  if ((thresholdFile.length() != 0) && template.classAttribute().isNominal()) {    int labelIndex=0;    if (thresholdLabel.length() != 0) {      labelIndex=template.classAttribute().indexOfValue(thresholdLabel);    }    if (labelIndex == -1) {      throw new IllegalArgumentException("Class label '" + thresholdLabel + "' is unknown!");    }    ThresholdCurve tc=new ThresholdCurve();    Instances result=tc.getCurve(testingEvaluation.predictions(),labelIndex);    DataSink.write(thresholdFile,result);  }  return text.toString();}  }
class C{  public final void testIriWithContextAndResourceIdParameters(){  assertNotNull(Validators.iri(getContext(),android.R.string.cancel));}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public String generateSignature(){  return "PASS";}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildHagnurk(zone);}  }
class C{  public void sendButton(short code,boolean repeat,boolean down,boolean queue,short amount,byte axis) throws IOException {  PacketBUTTON p=new PacketBUTTON(code,repeat,down,queue,amount,axis);  p.send(hostAddress,hostPort);}  }
class C{  public static void ValidateSignature(org.opensaml.xml.signature.Signature signature,X509Certificate cert) throws ValidationException, SecurityException {  if (signature == null) {    log.warn("Null signature!");    return;  }  BasicX509Credential pubCredential=new BasicX509Credential();  Credential cred=null;  KeyInfo keyInfo=signature.getKeyInfo();  if (keyInfo == null) {    if (cert == null) {      throw new ValidationException("No signing certificate found.");    }    pubCredential.setEntityCertificate(cert);    cred=pubCredential;  } else {    KeyInfoCredentialResolver kiResolver=Configuration.getGlobalSecurityConfiguration().getDefaultKeyInfoCredentialResolver();    CriteriaSet criteriaSet=new CriteriaSet(new KeyInfoCriteria(keyInfo));    cred=kiResolver.resolveSingle(criteriaSet);  }  SAMLSignatureProfileValidator pv=new SAMLSignatureProfileValidator();  pv.validate(signature);  SignatureValidator sigValidator=new SignatureValidator(cred);  sigValidator.validate(signature);}  }
class C{  private GridDiagnostic(){}  }
class C{  public CombinedActiveEntRateLocalResults computeLocalFromPreviousObservations(int states[][],int col){  int rows=states.length;  double[] localActive=new double[rows];  double[] localEntRate=new double[rows];  double[] localEntropy=new double[rows];  resetOverallStats();  int prevVal, nextVal;  double logTerm=0.0;  for (int r=k; r < rows; r++) {    nextVal=states[r][col];    prevVal=0;    int multiplier=1;    for (int p=1; p <= k; p++) {      prevVal+=states[r - p][col] * multiplier;      multiplier*=base;    }    double p_next=(double)nextCount[nextVal] / (double)observations;    localEntropy[r]=-Math.log(p_next) / Math.log(base);    averageEntropy+=localEntropy[r];    if (localEntropy[r] > maxEntropy) {      maxEntropy=localEntropy[r];    } else     if (localEntropy[r] < minEntropy) {      minEntropy=localEntropy[r];    }    logTerm=((double)jointCount[nextVal][prevVal]) / ((double)nextCount[nextVal] * (double)prevCount[prevVal]);    logTerm*=(double)observations;    localActive[r]=Math.log(logTerm) / Math.log(base);    averageActive+=localActive[r];    if (localActive[r] > maxActive) {      maxActive=localActive[r];    } else     if (localActive[r] < minActive) {      minActive=localActive[r];    }    localEntRate[r]=localEntropy[r] - localActive[r];    if (localEntRate[r] > maxEntRate) {      maxEntRate=localEntRate[r];    } else     if (localEntRate[r] < minEntRate) {      minEntRate=localEntRate[r];    }  }  averageActive=averageActive / (double)(rows - k);  averageEntropy=averageEntropy / (double)(rows - k);  averageEntRate=averageEntropy - averageActive;  CombinedActiveEntRateLocalResults results=new CombinedActiveEntRateLocalResults();  results.localActiveInfo=localActive;  results.localEntropyRate=localEntRate;  results.localEntropy=localEntropy;  return results;}  }
class C{  public Element itemUnknownElement(int i){  NodeList nl=this.constructionElement.getChildNodes();  int res=0;  for (int j=0; j < nl.getLength(); j++) {    Node current=nl.item(j);    if ((current.getNodeType() == Node.ELEMENT_NODE) && current.getNamespaceURI().equals(Constants.SignatureSpecNS)) {      res++;      if (res == i) {        return (Element)current;      }    }  }  return null;}  }
class C{  public FormatResult applyMask(String newValue,String oldValue,Integer cursorIndex){  return formatter.applyMask(displayHints.getMask(),newValue,oldValue,cursorIndex);}  }
class C{  public static void listDatasets(Bigquery bigquery,String projectId) throws IOException {  Datasets.List datasetRequest=bigquery.datasets().list(projectId);  DatasetList datasetList=datasetRequest.execute();  if (datasetList.getDatasets() != null) {    List<DatasetList.Datasets> datasets=datasetList.getDatasets();    System.out.println("Dataset list:");    for (    DatasetList.Datasets dataset : datasets) {      System.out.format("%s\n",dataset.getDatasetReference().getDatasetId());    }  }}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  @SafeVarargs @Pure(Enforcement.FORCE) public PersistentArrayMap(K... init){  this(init,true);}  }
class C{  public Value[] readRow(Value[] row) throws SQLException {  StatementBuilder buff=new StatementBuilder("SELECT ");  appendColumnList(buff,false);  buff.append(" FROM ");  appendTableName(buff);  appendKeyCondition(buff);  PreparedStatement prep=conn.prepareStatement(buff.toString());  setKey(prep,1,row);  ResultSet rs=prep.executeQuery();  if (!rs.next()) {    throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);  }  Value[] newRow=new Value[columnCount];  for (int i=0; i < columnCount; i++) {    int type=result.getColumnType(i);    newRow[i]=DataType.readValue(conn.getSession(),rs,i + 1,type);  }  return newRow;}  }
class C{  public Object wrap(Context cx,Scriptable scope,Object obj,Class<?> staticType){  if (obj == null || obj == Undefined.instance || obj instanceof Scriptable) {    return obj;  }  if (staticType != null && staticType.isPrimitive()) {    if (staticType == Void.TYPE)     return Undefined.instance;    if (staticType == Character.TYPE)     return Integer.valueOf(((Character)obj).charValue());    return obj;  }  if (!isJavaPrimitiveWrap()) {    if (obj instanceof String || obj instanceof Number || obj instanceof Boolean) {      return obj;    } else     if (obj instanceof Character) {      return String.valueOf(((Character)obj).charValue());    }  }  Class<?> cls=obj.getClass();  if (cls.isArray()) {    return NativeJavaArray.wrap(scope,obj);  }  return wrapAsJavaObject(cx,scope,obj,staticType);}  }
class C{  public boolean isSignificant(){  if (buckets.size() >= numSignificantBuckets) {    return true;  }  int totalSamples=0;  for (  Bucket bucket : buckets.values()) {    totalSamples+=bucket.numSamples;  }  return totalSamples >= numSignificantSamples;}  }
class C{  public boolean removeAll(AbstractShortList other){  if (!(other instanceof ShortArrayList))   return super.removeAll(other);  if (other.size() == 0) {    return false;  }  int limit=other.size() - 1;  int j=0;  short[] theElements=elements;  int mySize=size();  double N=(double)other.size();  double M=(double)mySize;  if ((N + M) * cern.jet.math.Arithmetic.log2(N) < M * N) {    ShortArrayList sortedList=(ShortArrayList)other.clone();    sortedList.quickSort();    for (int i=0; i < mySize; i++) {      if (sortedList.binarySearchFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  } else {    for (int i=0; i < mySize; i++) {      if (other.indexOfFromTo(theElements[i],0,limit) < 0)       theElements[j++]=theElements[i];    }  }  boolean modified=(j != mySize);  setSize(j);  return modified;}  }
class C{  public void run(){  DrUtil drUtil=new DrUtil(coordinator.getCoordinatorClient());  if (drUtil.isStandby()) {    log.info("Current site is standby, no need to monitor dbsvc and geodbsvc status");    return;  }  log.info("Monitoring dbsvc and geodbsvc status");  try (AutoCloseable lock=getTrackerLock()){    for (    Site site : drUtil.listSites()) {      updateSiteDbsvcStatus(site);    }  } catch (  Exception e) {    log.warn("Failed to monitor db status",e);  }}  }
class C{  public ParameterRef(Type paramType,int number){  this.n=number;  this.paramType=paramType;}  }
class C{  public Bundler putSparseParcelableArray(String key,SparseArray<? extends Parcelable> value){  bundle.putSparseParcelableArray(key,value);  return this;}  }
class C{  protected int unwrapValue(Object value){  return ((Integer)value).intValue();}  }
class C{  public TreeStatPanel(TreeStatFrame frame,TreeStatData treeStatData){  taxonSetsPanel=new TaxonSetsPanel(frame,treeStatData);  statisticsPanel=new StatisticsPanel(frame,treeStatData);  tabbedPane.addTab("Taxon Sets",null,taxonSetsPanel);  tabbedPane.addTab("Statistics",null,statisticsPanel);  setLayout(new BorderLayout());  add(tabbedPane,BorderLayout.CENTER);}  }
class C{  public void removeLibClass(SootClass clz){  libClasses.remove(clz.getName());}  }
class C{  private int isolationLevel(TransactionIsolation isolation){switch (isolation) {case READ_COMMITTED:    return TransactionDefinition.ISOLATION_READ_COMMITTED;case REPEATABLE_READ:  return TransactionDefinition.ISOLATION_REPEATABLE_READ;case SERIALIZABLE:return TransactionDefinition.ISOLATION_SERIALIZABLE;default :throw new IllegalStateException();}}  }
class C{  public void incrementCount(K key,V value,double count){  FastCounter<V> valueCounter=ensureCounter(key);  valueCounter.incrementCount(value,count);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int size(){  return size;}  }
class C{  @SuppressWarnings("unchecked") private void rankLines(MRfQ rfq,MRfQResponse[] responses){  MRfQLine[] rfqLines=rfq.getLines();  if (rfqLines.length == 0)   throw new IllegalArgumentException("No RfQ Lines found");  for (int i=0; i < rfqLines.length; i++) {    MRfQLine rfqLine=rfqLines[i];    if (!rfqLine.isActive())     continue;    log.fine("rankLines - " + rfqLine);    MRfQLineQty[] rfqQtys=rfqLine.getQtys();    for (int j=0; j < rfqQtys.length; j++) {      MRfQLineQty rfqQty=rfqQtys[j];      if (!rfqQty.isActive() || !rfqQty.isRfQQty())       continue;      log.fine("rankLines Qty - " + rfqQty);      MRfQResponseLineQty[] respQtys=rfqQty.getResponseQtys(false);      for (int kk=0; kk < respQtys.length; kk++) {        MRfQResponseLineQty respQty=respQtys[kk];        if (!respQty.isActive() || !respQty.isValidAmt()) {          respQty.setRanking(999);          respQty.saveEx();          log.fine("  - ignored: " + respQty);        }      }      respQtys=rfqQty.getResponseQtys(false);      if (respQtys.length == 0)       log.fine("  - No Qtys with valid Amounts"); else {        Arrays.sort(respQtys,respQtys[0]);        int lastRank=1;        BigDecimal lastAmt=Env.ZERO;        int rank=0;        for (int k=0; k < respQtys.length; k++) {          MRfQResponseLineQty qty=respQtys[k];          if (!qty.isActive() || qty.getRanking() == 999) {            continue;          }          BigDecimal netAmt=qty.getNetAmt();          if (netAmt == null) {            qty.setRanking(999);            qty.saveEx();            log.fine("  - Rank 999: " + qty);            continue;          }          if (lastAmt.compareTo(netAmt) != 0) {            lastRank=rank + 1;            lastAmt=qty.getNetAmt();          }          qty.setRanking(lastRank);          log.fine("  - Rank " + lastRank + ": "+ qty);          qty.saveEx();          if (rank == 0) {            rfqQty.setBestResponseAmt(qty.getNetAmt());            rfqQty.saveEx();          }          rank++;        }      }    }  }  MRfQResponse winner=null;  for (int ii=0; ii < responses.length; ii++) {    MRfQResponse response=responses[ii];    if (response.isSelectedWinner())     response.setIsSelectedWinner(false);    int ranking=0;    MRfQResponseLine[] respLines=response.getLines(false);    for (int jj=0; jj < respLines.length; jj++) {      MRfQResponseLine respLine=respLines[jj];      if (!respLine.isActive())       continue;      if (respLine.isSelectedWinner())       respLine.setIsSelectedWinner(false);      MRfQResponseLineQty[] respQtys=respLine.getQtys(false);      for (int kk=0; kk < respQtys.length; kk++) {        MRfQResponseLineQty respQty=respQtys[kk];        if (!respQty.isActive())         continue;        ranking+=respQty.getRanking();        if (respQty.getRanking() == 1 && respQty.getRfQLineQty().isPurchaseQty()) {          respLine.setIsSelectedWinner(true);          respLine.saveEx();          break;        }      }    }    response.setRanking(ranking);    response.saveEx();    log.fine("- Response Ranking " + ranking + ": "+ response);    if (!rfq.isQuoteSelectedLines()) {      if (winner == null && ranking > 0)       winner=response;      if (winner != null && response.getRanking() > 0 && response.getRanking() < winner.getRanking())       winner=response;    }  }  if (winner != null) {    winner.setIsSelectedWinner(true);    winner.saveEx();    log.fine("- Response Winner: " + winner);  }}  }
class C{  public void testSerialization() throws Exception {  KerberosHadoopFileSystemFactory fac=new KerberosHadoopFileSystemFactory();  checkSerialization(fac);  fac=new KerberosHadoopFileSystemFactory();  fac.setUri("igfs://igfs@localhost:10500/");  fac.setConfigPaths("/a/core-sute.xml","/b/mapred-site.xml");  fac.setKeyTabPrincipal("foo");  fac.setKeyTab("/etc/krb5.keytab");  fac.setReloginInterval(30 * 60 * 1000L);  checkSerialization(fac);}  }
class C{  public boolean isDasProtected(){  return dasProtected;}  }
class C{  public static void parse(InputStream in,Encoding encoding,ContentHandler contentHandler) throws IOException, SAXException {  XMLReader reader=new ExpatReader();  reader.setContentHandler(contentHandler);  InputSource source=new InputSource(in);  source.setEncoding(encoding.expatName);  reader.parse(source);}  }
class C{  public void handleResultPacket(ReadPacketFetcher packetFetcher) throws QueryException, IOException {  Buffer buffer=packetFetcher.getReusableBuffer();  if (buffer.getByteAt(0) == Packet.ERROR) {    ErrorPacket ep=new ErrorPacket(buffer);    String message=ep.getMessage();    throw new QueryException("Could not connect: " + message,ep.getErrorNumber(),ep.getSqlState());  }}  }
class C{  public void plugin(String name){  this.recipes.add(new PluginRecipe(name,null));}  }
class C{  protected HttpHeaders createBasicHttpHeaderResponse(String contentType){  HttpHeaders responseHeaders=new HttpHeaders();  responseHeaders.add("Content-Type",contentType);  return responseHeaders;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  IonClobLite(ContainerlessContext context,boolean isNull){  super(context,isNull);}  }
class C{  public ReplyKeyboardMarkupBuilder addRow(KeyboardButton... buttons){  return addRow(Arrays.asList(buttons));}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  private void paintClosePressed(Graphics2D g,JComponent c,int width,int height){  paintClose(g,c,width,height,pressed);}  }
class C{  public void disableUpdate(){  enabled=false;}  }
class C{  public void paintScrollBarThumbBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public static void initialize(Context context,OkHttpClient okHttpClient){  if (okHttpClient != null && okHttpClient.cache() == null) {    okHttpClient=okHttpClient.newBuilder().cache(Utils.getCache(context.getApplicationContext(),ANConstants.MAX_CACHE_SIZE,ANConstants.CACHE_DIR_NAME)).build();  }  InternalNetworking.setClient(okHttpClient);  ANRequestQueue.initialize();  ANImageLoader.initialize();}  }
class C{  @Override public final ClassifierSplitModel selectModel(Instances data){  double minResult;  C45Split[] currentModel;  C45Split bestModel=null;  NoSplit noSplitModel=null;  double averageInfoGain=0;  int validModels=0;  boolean multiVal=true;  Distribution checkDistribution;  Attribute attribute;  double sumOfWeights;  int i;  try {    checkDistribution=new Distribution(data);    noSplitModel=new NoSplit(checkDistribution);    if (Utils.sm(checkDistribution.total(),2 * m_minNoObj) || Utils.eq(checkDistribution.total(),checkDistribution.perClass(checkDistribution.maxClass()))) {      return noSplitModel;    }    if (m_allData != null) {      Enumeration<Attribute> enu=data.enumerateAttributes();      while (enu.hasMoreElements()) {        attribute=enu.nextElement();        if ((attribute.isNumeric()) || (Utils.sm(attribute.numValues(),(0.3 * m_allData.numInstances())))) {          multiVal=false;          break;        }      }    }    currentModel=new C45Split[data.numAttributes()];    sumOfWeights=data.sumOfWeights();    for (i=0; i < data.numAttributes(); i++) {      if (i != (data).classIndex()) {        currentModel[i]=new C45Split(i,m_minNoObj,sumOfWeights,m_useMDLcorrection);        currentModel[i].buildClassifier(data);        if (currentModel[i].checkModel()) {          if (m_allData != null) {            if ((data.attribute(i).isNumeric()) || (multiVal || Utils.sm(data.attribute(i).numValues(),(0.3 * m_allData.numInstances())))) {              averageInfoGain=averageInfoGain + currentModel[i].infoGain();              validModels++;            }          } else {            averageInfoGain=averageInfoGain + currentModel[i].infoGain();            validModels++;          }        }      } else {        currentModel[i]=null;      }    }    if (validModels == 0) {      return noSplitModel;    }    averageInfoGain=averageInfoGain / validModels;    minResult=0;    for (i=0; i < data.numAttributes(); i++) {      if ((i != (data).classIndex()) && (currentModel[i].checkModel())) {        if ((currentModel[i].infoGain() >= (averageInfoGain - 1E-3)) && Utils.gr(currentModel[i].gainRatio(),minResult)) {          bestModel=currentModel[i];          minResult=currentModel[i].gainRatio();        }      }    }    if (Utils.eq(minResult,0)) {      return noSplitModel;    }    bestModel.distribution().addInstWithUnknown(data,bestModel.attIndex());    if ((m_allData != null) && (!m_doNotMakeSplitPointActualValue)) {      bestModel.setSplitPoint(m_allData);    }    return bestModel;  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public static void mergeArrayIntoCollection(Object array,Collection collection){  if (collection == null) {    throw new IllegalArgumentException("Collection must not be null");  }  Object[] arr=ObjectUtils.toObjectArray(array);  for (  Object elem : arr) {    collection.add(elem);  }}  }
class C{  static final ByteBuffer BufferToByteBuffer(final byte[] buffer,final ByteOrder order,final int start,final int len){  final ByteBuffer retBuff=ByteBuffer.wrap(buffer,start,len);  retBuff.order(order);  return retBuff;}  }
class C{  public void addPoint(Coordinate pt){  insertPoint(argIndex,pt,Location.INTERIOR);}  }
class C{  public static boolean isNull(TruffleObject foreignObject){  if (foreignObject == null) {    return true;  }  return boolMessage(Message.IS_NULL,foreignObject);}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  int viewType=getItemViewType(cursor.getPosition());  int layoutId=-1;  if (viewType == VIEW_TYPE_TODAY) {    layoutId=R.layout.list_item_forecast_today;  } else   if (viewType == VIEW_TYPE_FUTURE_DAY) {    layoutId=R.layout.list_item_forecast;  }  View view=LayoutInflater.from(context).inflate(layoutId,parent,false);  ViewHolder viewHolder=new ViewHolder(view);  view.setTag(viewHolder);  return view;}  }
class C{  public int read(InputStream in) throws IOException {  readId(in,"RIFF");  int numBytes=readInt(in) - 36;  readId(in,"WAVE");  readId(in,"fmt ");  if (16 != readInt(in))   throw new IOException("fmt chunk length not 16");  mFormat=readShort(in);  mNumChannels=readShort(in);  mSampleRate=readInt(in);  int byteRate=readInt(in);  short blockAlign=readShort(in);  mBitsPerSample=readShort(in);  if (byteRate != mNumChannels * mSampleRate * mBitsPerSample / 8) {    throw new IOException("fmt.ByteRate field inconsistent");  }  if (blockAlign != mNumChannels * mBitsPerSample / 8) {    throw new IOException("fmt.BlockAlign field inconsistent");  }  readId(in,"data");  mNumBytes=readInt(in);  return HEADER_LENGTH;}  }
class C{  public boolean isPrimaryGroup(){  return primaryGroup;}  }
class C{  protected void configDelta(Parameterization config){  DoubleParameter deltaP=new DoubleParameter(DELTA_ID).addConstraint(CommonConstraints.GREATER_THAN_ZERO_DOUBLE);  if (config.grab(deltaP)) {    settings.delta=deltaP.doubleValue();  }}  }
class C{  public BasicI18n(){  this(Locale.getDefault());}  }
class C{  public static void ensureOSXCompatible(){  File nnnAAAAA=new File(DCIM,"100ANDRO");  if (!(nnnAAAAA.exists() || nnnAAAAA.mkdirs())) {    Log.e(TAG,"Failed to create " + nnnAAAAA.getPath());  }}  }
class C{  private XAConnection wrapConnection(Connection conn) throws SQLException {  if (getPinGlobalTxToPhysicalConnection() || ((com.mysql.jdbc.Connection)conn).getPinGlobalTxToPhysicalConnection()) {    return SuspendableXAConnection.getInstance((com.mysql.jdbc.Connection)conn);  }  return MysqlXAConnection.getInstance((com.mysql.jdbc.Connection)conn,getLogXaCommands());}  }
class C{  private void clearScheduledCommercial(){  clearCommercialButtonsSelection();  scheduledCommercialTime=0;  setCommercialResult("");}  }
class C{  public void test_parseLjava_lang_String() throws Exception {  URL resource=getClass().getResource("/simple.xml");  Document d=db.parse(resource.toString());  assertNotNull(d);  assertEquals(2,d.getChildNodes().getLength());  assertEquals("#comment",d.getChildNodes().item(0).getNodeName());  assertEquals("breakfast_menu",d.getChildNodes().item(1).getNodeName());  try {    db.parse((String)null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }  try {    db.parse("_");    fail("Expected IOException was not thrown");  } catch (  IOException ioe) {  }  try {    resource=getClass().getResource("/wrong.xml");    db.parse(resource.toString());    fail("Expected SAXException was not thrown");  } catch (  SAXException sax) {  }}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,int[] value){  if (extras == null) {    extras=new Bundle();  }  extras.putIntArray(name,value);  return this;}  }
class C{  public CNodeEditState(final CStateFactory<?,?> factory,final AbstractZyGraph<?,?> graph,final Node node){  m_factory=factory;  m_graph=graph;  m_node=node;}  }
class C{  public boolean isLinux(){  return operatingSystem == OperatingSystem.LINUX;}  }
class C{  public NodeChangeEvent(Preferences parent,Preferences child){  super(parent);  this.child=child;}  }
class C{  public ExampleSetBasedPopulation(){}  }
class C{  public double toDouble(){  return mNumerator / (double)mDenominator;}  }
class C{  @Override public void run(){  amIActive=true;  String streamsHeader;  String pointerHeader;  String outputFileName;  int row, col, x, y;  double xCoord, yCoord;  int progress;  int c;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  boolean flag;  double flowDir;  double previousFlowDir;  double linkLength;  double streamValue;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  streamsHeader=args[0];  pointerHeader=args[1];  outputFileName=args[2];  if ((streamsHeader == null) || (pointerHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster streams=new WhiteboxRaster(streamsHeader,"r");    int rows=streams.getNumberRows();    int cols=streams.getNumberColumns();    double noData=streams.getNoDataValue();    double gridResX=streams.getCellSizeX();    double gridResY=streams.getCellSizeY();    double diagGridRes=Math.sqrt(gridResX * gridResX + gridResY * gridResY);    double[] gridLengths=new double[]{diagGridRes,gridResX,diagGridRes,gridResY,diagGridRes,gridResX,diagGridRes,gridResY};    double east=streams.getEast() - gridResX / 2.0;    double west=streams.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=streams.getNorth() - gridResY / 2.0;    double south=streams.getSouth() + gridResY / 2.0;    double NSRange=north - south;    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    if (pntr.getNumberRows() != rows || pntr.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("STRM_VAL");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    fields[2]=new DBFField();    fields[2].setName("Length");    fields[2].setDataType(DBFField.DBFDataType.NUMERIC);    fields[2].setFieldLength(10);    fields[2].setDecimalCount(3);    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POLYLINE,fields);    byte numNeighbouringStreamCells;    int FID=0;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        streamValue=streams.getValue(row,col);        if (streamValue > 0) {          numNeighbouringStreamCells=0;          for (c=0; c < 8; c++) {            x=col + dX[c];            y=row + dY[c];            if (streams.getValue(y,x) > 0 && pntr.getValue(y,x) == inflowingVals[c]) {              numNeighbouringStreamCells++;            }          }          if (numNeighbouringStreamCells != 1) {            FID++;            linkLength=0;            int[] parts={0};            PointsList points=new PointsList();            x=col;            y=row;            previousFlowDir=-99;            flag=true;            do {              flowDir=pntr.getValue(y,x);              if (flowDir > 0) {                if (flowDir != previousFlowDir) {                  xCoord=west + ((double)x / cols) * EWRange;                  yCoord=north - ((double)y / rows) * NSRange;                  points.addPoint(xCoord,yCoord);                  previousFlowDir=flowDir;                }                c=(int)(Math.log(flowDir) / LnOf2);                if (c > 7) {                  showFeedback("An unexpected value has " + "been identified in the pointer " + "image. This tool requires a "+ "pointer grid that has been "+ "created using either the D8 "+ "or Rho8 tools.");                  return;                }                x+=dX[c];                y+=dY[c];                linkLength+=gridLengths[c];                if (streams.getValue(y,x) <= 0) {                  flag=false;                } else {                  numNeighbouringStreamCells=0;                  int x2, y2;                  for (int d=0; d < 8; d++) {                    x2=x + dX[d];                    y2=y + dY[d];                    if (streams.getValue(y2,x2) > 0 && pntr.getValue(y2,x2) == inflowingVals[d]) {                      numNeighbouringStreamCells++;                    }                  }                  if (numNeighbouringStreamCells > 1) {                    flag=false;                  }                }              } else {                flag=false;              }              if (!flag) {                xCoord=west + ((double)x / cols) * EWRange;                yCoord=north - ((double)y / rows) * NSRange;                points.addPoint(xCoord,yCoord);              }            } while (flag);            PolyLine line=new PolyLine(parts,points.getPointsArray());            Object[] rowData=new Object[3];            rowData[0]=new Double(FID);            rowData[1]=new Double(streamValue);            rowData[2]=new Double(linkLength / 1000.0);            output.addRecord(line,rowData);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.write();    pntr.close();    streams.close();    returnData(outputFileName);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  final public void write(char[] buf){  Writer out=this.out;  if (out == null)   return;  try {    out.write(buf,0,buf.length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:51.597 -0500",hash_original_method="D12B07FB292F613652E291AA784D1EC3",hash_generated_method="D8C9F48800D894749D82032175A77F99") public UsbAccessory(String[] strings){  mManufacturer=strings[0];  mModel=strings[1];  mDescription=strings[2];  mVersion=strings[3];  mUri=strings[4];  mSerial=strings[5];}  }
class C{  public boolean isIgnoreCase(){  return ignoreCase;}  }
class C{  static public void writeAttribute(Writer out,boolean escapeUnicode,boolean escapeIsocode,char[] buff,char[] text,int start,int length,boolean isScriptInAttributeValueEnabled) throws IOException {  int buffLength=buff.length;  int buffIndex=0;  int end=start + length;  for (int i=start; i < end; i++) {    char ch=text[i];    if (ch <= 0x1f) {      if (!isPrintableControlChar(ch)) {        continue;      }    }    if (ch < 0xA0) {      if (ch >= 0x3f) {        if (ch == 's') {          if (!isScriptInAttributeValueEnabled && ((i + 6) < text.length)) {            if ('c' == text[i + 1] && 'r' == text[i + 2] && 'i' == text[i + 3] && 'p' == text[i + 4] && 't' == text[i + 5] && ':' == text[i + 6]) {              return;            }          }        }        buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);      } else       if (ch >= 0x27) {        if (ch < 0x3c) {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        } else         if (ch == '<') {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,LT_CHARS);        } else         if (ch == '>') {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,GT_CHARS);        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      } else {        if (ch == '&') {          if ((i + 1 < end) && (text[i + 1] == '{')) {            buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);          } else {            buffIndex=addToBuffer(out,buff,buffIndex,buffLength,AMP_CHARS);          }        } else         if (ch == '"') {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,QUOT_CHARS);        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      }    } else     if (ch <= 0xff) {      if (escapeIsocode) {        buffIndex=addToBuffer(out,buff,buffIndex,buffLength,sISO8859_1_Entities[ch - 0xA0]);      } else {        buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);      }    } else {      if (escapeUnicode) {        buffIndex=_writeDecRef(out,buff,buffIndex,buffLength,ch);      } else {        buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);      }    }  }  flushBuffer(out,buff,buffIndex);}  }
class C{  public StoreFsyncServiceImpl(StoreFsync<K> store){  Objects.requireNonNull(store);  _storeFsync=store;}  }
class C{  public RegexSearchTupleSet(boolean caseSensitive){  m_caseSensitive=caseSensitive;}  }
class C{  @Ignore @Override public void flagIsSetShouldReturnUidOfMessageMarkedAsRecentWhenUsedWithFlagRecent() throws MailboxException {}  }
class C{  public static String stripBefore(String value,char c){  String result=value;  if (value != null) {    int index=value.indexOf(c);    if (index > 0) {      result=value.substring(0,index);    }  }  return result;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.shapePaint,stream);  SerialUtilities.writeStroke(this.shapeStroke,stream);}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Subsanacion";  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addFragment(super.toString());  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMAnimateElement(prefix,(AbstractDocument)doc);}  }
class C{  public static boolean isNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;}  }
class C{  public String clusterDefinitionsTipText(){  return "The clusters to use.";}  }
class C{  public final static String encodeToString(byte[] arr,boolean lineSep){  return new String(encodeToChar(arr,lineSep));}  }
class C{  public void removeTranscodingHint(TranscodingHints.Key key){  hints.remove(key);}  }
class C{  public Vector minus(Vector that){  if (this.d != that.d)   throw new IllegalArgumentException("Dimensions don't agree");  Vector c=new Vector(d);  for (int i=0; i < d; i++)   c.data[i]=this.data[i] - that.data[i];  return c;}  }
class C{  public static boolean parse(@NotNull PsiBuilder builder,@NotNull GroovyParser parser,boolean forRefExpr,@NotNull IElementType begin,@NotNull IElementType content,@NotNull IElementType end,@Nullable IElementType literal,@NotNull GroovyElementType compoundLiteral,@NotNull String message){  return new CompoundStringExpression(builder,parser,forRefExpr,begin,content,end,literal,compoundLiteral,message).parse();}  }
class C{  private boolean scanHeaders() throws IOException {  int ch=read();  long length=0;  _headers.clear();  while (ch > 0 && ch != '\n' && ch != '\r') {    _line.clear();    _line.append((char)ch);    for (ch=read(); ch >= 0 && ch != '\n' && ch != '\r'; ch=read()) {      _line.append((char)ch);      if (_maxLength < length++)       throw new IOException(L.l("header length {0} exceeded.",_maxLength));    }    if (ch == '\r') {      if ((ch=read()) == '\n')       ch=read();    } else     if (ch == '\n')     ch=read();    int i=0;    for (; i < _line.length() && _line.charAt(i) != ':'; i++) {    }    String key=null;    String value=null;    if (i < _line.length()) {      key=_line.substring(0,i).trim().toLowerCase(Locale.ENGLISH);      value=_line.substring(i + 1).trim();      List<String> values=_headers.get(key);      if (values == null) {        values=new ArrayList<>();      }      values.add(value);      _headers.put(key,values);    }  }  if (ch == '\r') {    if ((ch=read()) != '\n') {      _peek[0]=(byte)ch;      _peekOffset=0;      _peekLength=1;    }  }  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.946 -0500",hash_original_method="025DF7E231D7740FB891A823A7EE822B",hash_generated_method="45B6A19FC2D426B21B2AC8287429C641") private boolean processGetInkey(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs) throws ResultException {  CatLog.d(this,"process GetInkey");  Input input=new Input();  IconId iconId=null;  ComprehensionTlv ctlv=searchForTag(ComprehensionTlvTag.TEXT_STRING,ctlvs);  if (ctlv != null) {    input.text=ValueParser.retrieveTextString(ctlv);  } else {    throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);  }  ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);  if (ctlv != null) {    iconId=ValueParser.retrieveIconId(ctlv);  }  ctlv=searchForTag(ComprehensionTlvTag.DURATION,ctlvs);  if (ctlv != null) {    input.duration=ValueParser.retrieveDuration(ctlv);  }  input.minLen=1;  input.maxLen=1;  input.digitOnly=(cmdDet.commandQualifier & 0x01) == 0;  input.ucs2=(cmdDet.commandQualifier & 0x02) != 0;  input.yesNo=(cmdDet.commandQualifier & 0x04) != 0;  input.helpAvailable=(cmdDet.commandQualifier & 0x80) != 0;  input.echo=true;  mCmdParams=new GetInputParams(cmdDet,input);  if (iconId != null) {    mIconLoadState=LOAD_SINGLE_ICON;    mIconLoader.loadIcon(iconId.recordNumber,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));    return true;  }  return false;}  }
class C{  private UiUtils(){  throw new AssertionError();}  }
class C{  private static void findPaths(Graph pag,Set<List<Node>> paths,Node previous,Node current,Node target,Set<Node> condition,Set<Node> conditionClosure,List<Node> history){  if (history.contains(current)) {    return;  }  if (current.equals(target)) {    history.add(current);    paths.add(history);    return;  }  List<Node> adjacencies=pag.getAdjacentNodes(current);  for (  Node adj : adjacencies) {    if (previous == null) {      List<Node> h=new ArrayList<>(history);      h.add(current);      findPaths(pag,paths,current,adj,target,condition,conditionClosure,h);      continue;    }    boolean pass;    boolean isConditionClosure=conditionClosure.contains(current);    boolean isCondition=condition.contains(current);    if (pag.isDefCollider(previous,current,adj)) {      pass=isConditionClosure;    } else {      pass=!isCondition || !pag.isUnderlineTriple(previous,current,adj) && isOpen(pag,previous,current,adj);    }    if (pass) {      List<Node> h=new ArrayList<>(history);      h.add(current);      findPaths(pag,paths,current,adj,target,condition,conditionClosure,h);    }  }}  }
class C{  public String[] decode(String input){  try {    if (Encoding.isURLEncoded(input)) {      input=helpers.urlDecode(input);    }    if (Encoding.isBase64Encoded(input)) {      input=helpers.bytesToString(helpers.base64Decode(input));    }    String[] jwt_list=input.split("\\.");    if (jwt_list.length == 3) {      String[] tmp={"","",""};      Decoder b64=Base64.getDecoder();      for (int i=0; i < 2; i++) {        tmp[i]=helpers.bytesToString(b64.decode(jwt_list[i]));      }      tmp[2]=jwt_list[2];      return tmp;    }  } catch (  Exception e) {    Logging.getInstance().log(getClass(),e);  }  return null;}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  public AbstractBeginNode trueSuccessor(){  return trueSuccessor;}  }
class C{  public void updateBigDecimal(String columnName,BigDecimal x) throws SQLException {  updateBigDecimal(findColumn(columnName),x);}  }
class C{  final int inc(int i){  return (++i == items.length) ? 0 : i;}  }
class C{  public boolean isForbiddenBitSet(){  return forbiddenZeroBit;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void restartAndroid(){  RootTools.log("Restart Android");  killProcess("zygote");}  }
class C{  public boolean isChromeFrameCapable(){  return isChromeFrameCapable;}  }
class C{  @Override protected void onMoved(final int oldX,final int oldY,final int newX,final int newY){  getZone().notifyMovement(this,oldX,oldY,newX,newY);}  }
class C{  void validateStepStates(Map<String,WorkflowStep> descriptionToStepMap,String[] successSteps,String[] errorSteps,String[] cancelledSteps,String[] suspendedSteps){  for (  String successStep : successSteps) {    WorkflowStep step=descriptionToStepMap.get(successStep);    assertNotNull("Step not found: " + successStep,step);    assertEquals(String.format("Step %s expected SUCCESS but in state %s",step.getDescription(),step.getState()),StepState.SUCCESS.name(),step.getState());  }  for (  String errorStep : errorSteps) {    WorkflowStep step=descriptionToStepMap.get(errorStep);    assertNotNull("Step not found: " + errorStep,step);    assertEquals(String.format("Step %s expected ERROR but in state %s",step.getDescription(),step.getState()),StepState.ERROR.name(),step.getState());  }  for (  String cancelledStep : cancelledSteps) {    WorkflowStep step=descriptionToStepMap.get(cancelledStep);    assertNotNull("Step not found: " + cancelledStep,step);    assertEquals(String.format("Step %s expected CANCELLED but in state %s",step.getDescription(),step.getState()),StepState.CANCELLED.name(),step.getState());  }  for (  String suspendedStep : suspendedSteps) {    WorkflowStep step=descriptionToStepMap.get(suspendedStep);    assertNotNull("Step not found: " + suspendedStep,step);    boolean isSuspended=(step.getState().equalsIgnoreCase(StepState.SUSPENDED_ERROR.name()) || step.getState().equalsIgnoreCase(StepState.SUSPENDED_NO_ERROR.name()));    assertTrue(String.format("Step %s expected SUSPENDED but in state %s",step.getDescription(),step.getState()),isSuspended);  }}  }
class C{  public void stateChanged(ChangeEvent e){  if (tabbedPane.getSelectedIndex() == 1)   textPane.setText(textArea.getText());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.196 -0500",hash_original_method="1145BB7612B8DCB4209865A3916D22D3",hash_generated_method="AD6D4EAA7D8C0F1641FF3CCD8A40507B") public boolean clipPath(Path path){  return clipPath(path,Region.Op.INTERSECT);}  }
class C{  protected void sequence_ParameterizedTypeRefNominal_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static <E>void shuffle(ArrayList<E> list){  for (int i=0; i < list.size(); i++) {    int index=(int)(Math.random() * list.size());    E temp=list.get(i);    list.set(i,list.get(index));    list.set(index,temp);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  double z;  int progress=0;  int i, a;  long counter=0;  int loopNum=0;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};  double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};  double[] neighbours=new double[8];  boolean patternMatch=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int nRows=image.getNumberRows();    int nCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("black_white.pal");    double[] data=null;    for (row=0; row < nRows; row++) {      data=image.getRowValues(row);      for (col=0; col < nCols; col++) {        if (data[col] > 0) {          output.setValue(row,col,1);        } else         if (data[col] == noData) {          output.setValue(row,col,noData);        } else {          output.setValue(row,col,0);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress(progress);    }    image.close();    output.flush();    do {      loopNum++;      updateProgress("Loop Number " + loopNum + ":",0);      counter=0;      for (row=0; row < nRows; row++) {        for (col=0; col < nCols; col++) {          z=output.getValue(row,col);          if (z > 0 && z != noData) {            for (i=0; i < 8; i++) {              neighbours[i]=output.getValue(row + dY[i],col + dX[i]);            }            for (a=0; a < 8; a++) {              patternMatch=true;              for (i=0; i < elements[a].length; i++) {                if (neighbours[elements[a][i]] != vals[a][i]) {                  patternMatch=false;                }              }              if (patternMatch) {                output.setValue(row,col,0);                counter++;              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }    } while (counter > 0);    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean isTemplateAllowed(DocumentTemplateContext context,Template template){  int offset=context.getCompletionOffset();  try {    return template != null && offset > 0 && !isTemplateNamePart(context.getDocument().getChar(offset - 1));  } catch (  BadLocationException e) {    log.debug(e);  }  return false;}  }
class C{  public void stopButtonActionPerformed(java.awt.event.ActionEvent e){  if (testRunning) {    if (outTest) {      stopOutputTest();    } else     if (wrapTest) {      stopWraparoundTest();    }    testRunning=false;  }}  }
class C{  public OpenRecentFileAction(Application app,URI uri){  super(app);  this.uri=uri;  putValue(Action.NAME,URIUtil.getName(uri));}  }
class C{  private void pinToBottom(){  ViewGroup.LayoutParams params=getLayoutParams();  if (params != null) {    if (params instanceof RelativeLayout.LayoutParams) {      ((LayoutParams)params).addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);    } else     if (params instanceof LinearLayout.LayoutParams) {      ((LinearLayout.LayoutParams)params).gravity=Gravity.BOTTOM;    } else     if (params instanceof FrameLayout.LayoutParams) {      ((FrameLayout.LayoutParams)params).gravity=Gravity.BOTTOM;    }  }}  }
class C{  protected void _skipString() throws IOException, JsonParseException {  _tokenIncomplete=false;  int inputPtr=_inputPtr;  int inputLen=_inputEnd;  char[] inputBuffer=_inputBuffer;  while (true) {    if (inputPtr >= inputLen) {      _inputPtr=inputPtr;      if (!loadMore()) {        _reportInvalidEOF(": was expecting closing quote for a string value");      }      inputPtr=_inputPtr;      inputLen=_inputEnd;    }    char c=inputBuffer[inputPtr++];    int i=(int)c;    if (i <= INT_BACKSLASH) {      if (i == INT_BACKSLASH) {        _inputPtr=inputPtr;        c=_decodeEscaped();        inputPtr=_inputPtr;        inputLen=_inputEnd;      } else       if (i <= INT_QUOTE) {        if (i == INT_QUOTE) {          _inputPtr=inputPtr;          break;        }        if (i < INT_SPACE) {          _inputPtr=inputPtr;          _throwUnquotedSpace(i,"string value");        }      }    }  }}  }
class C{  public void testInit(){  System.out.println("init");  mockAudit.setStatus(AuditStatus.SCENARIO_LOADING);  expectLastCall().once();  expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  setReplayMode();  AbstractScenarioAuditCommandImpl instance=new TestAbstractScenarioAuditCommandImpl();  instance.init();  setVerifyMode();}  }
class C{  public void readFromNBT(final NBTTagCompound nbt){  programs.clear();  final NBTTagList pagesNbt=nbt.getTagList(TAG_PAGES,Constants.NBT.TAG_STRING);  for (int index=0; index < pagesNbt.tagCount(); index++) {    programs.add(Arrays.asList(PATTERN_LINES.split(pagesNbt.getStringTagAt(index))));  }  selectedProgram=nbt.getInteger(TAG_SELECTED);  validateSelectedPage();}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public int compare(Object[] rowA,Object[] rowB){  int diff=0;  int normalIndex=0;  int noDictionaryindex=0;  for (  boolean isNoDictionary : noDictionaryColMaping) {    if (isNoDictionary) {      byte[] byteArr1=(byte[])rowA[IgnoreDictionary.BYTE_ARRAY_INDEX_IN_ROW.getIndex()];      ByteBuffer buff1=ByteBuffer.wrap(byteArr1);      RemoveDictionaryUtil.extractSingleHighCardDims(byteArr1,noDictionaryindex,noDictionaryCount,buff1);      byte[] byteArr2=(byte[])rowB[IgnoreDictionary.BYTE_ARRAY_INDEX_IN_ROW.getIndex()];      ByteBuffer buff2=ByteBuffer.wrap(byteArr2);      RemoveDictionaryUtil.extractSingleHighCardDims(byteArr2,noDictionaryindex,noDictionaryCount,buff2);      int difference=UnsafeComparer.INSTANCE.compareTo(buff1,buff2);      if (difference != 0) {        return difference;      }      noDictionaryindex++;    } else {      int dimFieldA=RemoveDictionaryUtil.getDimension(normalIndex,rowA);      int dimFieldB=RemoveDictionaryUtil.getDimension(normalIndex,rowB);      diff=dimFieldA - dimFieldB;      if (diff != 0) {        return diff;      }      normalIndex++;    }  }  return diff;}  }
class C{  public <T extends SubSystem>void addSystem(Class<T> systemApi,T system){  SubSystem oldSystem=_systemMap.putIfAbsent(systemApi,system);  if (oldSystem != null) {    throw new IllegalStateException(L.l("duplicate system '{0}' is not allowed because another system with that class is already registered '{1}'",system,oldSystem));  }  _pendingStart.add(system);  if (_lifecycle.isActive()) {    startSystems();  }}  }
class C{  public void mark(int readAheadLimit) throws IOException {  throw new IOException(Localizer.getMessage("jsp.error.xml.operationNotSupported","mark()","UTF-8"));}  }
class C{  protected void clearAllInnerSinks(){  for (  ExecutionUnit subprocess : subprocesses) {    subprocess.getInnerSinks().clear(Port.CLEAR_DATA);  }}  }
class C{  public Object dump(){  throw new ConfigException(L.l("HeapDump requires Resin Professional"));}  }
class C{  public File suffixedFile(String suffix){  return suffixedFile(suffix,mGzip);}  }
class C{  public Size rotate(){  return new Size(height,width);}  }
class C{  public int size(){  return count;}  }
class C{  public boolean isAtEppParams(){  return isAtElement(RDE_EPP_PARAMS_URI,"eppParams");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList newList;  Element newElement;  String prefix;  String lname;  Element docElem;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  newList=docElem.getElementsByTagNameNS("*","employee");  assertSize("employeeCount",5,newList);  newElement=(Element)newList.item(3);  prefix=newElement.getPrefix();  assertEquals("prefix","emp",prefix);  lname=newElement.getLocalName();  assertEquals("lname","employee",lname);}  }
class C{  public Builder(Configuration configuration){  this.configuration=configuration;}  }
class C{  public void actionPerformed(ActionEvent e){  Object source=e.getSource();  if (source == selAcctSchema)   actionAcctSchema(); else   if (source == bQuery)   actionQuery(); else   if (source == selDocument)   actionDocument(); else   if (source == selTable)   actionTable(); else   if (source == bRePost)   actionRePost(); else   if (source == bPrint)   PrintScreenPainter.printScreen(this); else   if (source == bExport)   exportExcel(); else   if (source instanceof CButton)   actionButton((CButton)source);}  }
class C{  public MethodHierarchyTreeStructure(final Project project,final PsiMethod method){  super(project,null);  myBaseDescriptor=buildHierarchyElement(project,method);  ((MethodHierarchyNodeDescriptor)myBaseDescriptor).setTreeStructure(this);  myMethod=SmartPointerManager.getInstance(myProject).createSmartPsiElementPointer(method);  setBaseElement(myBaseDescriptor);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_INTERFACE_DECLARATION__SUPER_INTERFACE_REFS:    return superInterfaceRefs != null && !superInterfaceRefs.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void removeNXWarrant(Warrant w){  w.removePropertyChangeListener(this);  _warList.remove(w);  _warNX.remove(w);  _manager.deregister(w);  w.dispose();}  }
class C{  protected void cancel(){  clearImages();  if (callbacks != null) {    for (    GuidedTourLifeCycle guidedTourLifeCycle : callbacks) {      guidedTourLifeCycle.end();    }  }}  }
class C{  protected void onBeforeClusterRendered(Cluster<T> cluster,MarkerOptions markerOptions){  int bucket=getBucket(cluster);  BitmapDescriptor descriptor=mIcons.get(bucket);  if (descriptor == null) {    mColoredCircleBackground.getPaint().setColor(getColor(bucket));    descriptor=BitmapDescriptorFactory.fromBitmap(mIconGenerator.makeIcon(getClusterText(bucket)));    mIcons.put(bucket,descriptor);  }  markerOptions.icon(descriptor);}  }
class C{  private LocalData rotateInJpegExif(LocalData data){  if (!(data instanceof PhotoData)) {    Log.w(TAG,"Rotation can only happen on PhotoData.");    return null;  }  PhotoData imageData=(PhotoData)data;  int originRotation=imageData.getOrientation();  int finalRotationDegrees;  if (mClockwise) {    finalRotationDegrees=(originRotation + 90) % 360;  } else {    finalRotationDegrees=(originRotation + 270) % 360;  }  String filePath=imageData.getPath();  ContentValues values=new ContentValues();  boolean success=false;  int newOrientation=0;  if (imageData.getMimeType().equalsIgnoreCase(LocalData.MIME_TYPE_JPEG)) {    ExifInterface exifInterface=new ExifInterface();    ExifTag tag=exifInterface.buildTag(ExifInterface.TAG_ORIENTATION,ExifInterface.getOrientationValueForRotation(finalRotationDegrees));    if (tag != null) {      exifInterface.setTag(tag);      try {        exifInterface.forceRewriteExif(filePath);        long fileSize=new File(filePath).length();        values.put(Images.Media.SIZE,fileSize);        newOrientation=finalRotationDegrees;        success=true;      } catch (      FileNotFoundException e) {        Log.w(TAG,"Cannot find file to set exif: " + filePath);      }catch (      IOException e) {        Log.w(TAG,"Cannot set exif data: " + filePath);      }    } else {      Log.w(TAG,"Cannot build tag: " + ExifInterface.TAG_ORIENTATION);    }  }  PhotoData result=null;  if (success) {    values.put(Images.Media.ORIENTATION,finalRotationDegrees);    mContext.getContentResolver().update(imageData.getContentUri(),values,null,null);    double[] latLong=data.getLatLong();    double latitude=0;    double longitude=0;    if (latLong != null) {      latitude=latLong[0];      longitude=latLong[1];    }    result=new PhotoData(data.getContentId(),data.getTitle(),data.getMimeType(),data.getDateTaken(),data.getDateModified(),data.getPath(),newOrientation,imageData.getWidth(),imageData.getHeight(),data.getSizeInBytes(),latitude,longitude);  }  return result;}  }
class C{  public InlineQueryResultArticle.InlineQueryResultArticleBuilder thumbUrl(URL thumbUrl){  this.thumb_url=thumbUrl;  return this;}  }
class C{  private void tryReduceLevel(){  HeadIndex<K,V> h=head;  HeadIndex<K,V> d;  HeadIndex<K,V> e;  if (h.level > 3 && (d=(HeadIndex<K,V>)h.down) != null && (e=(HeadIndex<K,V>)d.down) != null && e.right == null && d.right == null && h.right == null && casHead(h,d) && h.right != null)   casHead(d,h);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void readResponseHeaders(State state,HttpURLConnection conn) throws StopRequestException {  state.contentDisposition=conn.getHeaderField("Content-Disposition");  state.contentLocation=conn.getHeaderField("Content-Location");  if (state.mimeType == null) {    state.mimeType=normalizeMimeType(conn.getContentType());  }  state.headerETag=conn.getHeaderField("ETag");  final String transferEncoding=conn.getHeaderField("Transfer-Encoding");  if (transferEncoding == null) {    state.contentLength=getHeaderFieldLong(conn,"Content-Length",UNKNOWN_BYTE_SIZE);  } else {    LLog.i("Ignoring Content-Length since Transfer-Encoding is also defined");    state.contentLength=UNKNOWN_BYTE_SIZE;  }  state.totalBytes=state.contentLength;  final boolean noSizeInfo=state.contentLength == UNKNOWN_BYTE_SIZE && (transferEncoding == null || !transferEncoding.equalsIgnoreCase("chunked"));  if (!originalDownloadInfo.isNoIntegrity() && noSizeInfo) {    throw new StopRequestException(DownloadStatus.CANNOT_RESUME,"can't know size of download, giving up");  }}  }
class C{  public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  public void testAlgorithmParameterGenerator01() throws NoSuchAlgorithmException {  try {    AlgorithmParameterGenerator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException should be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public void addRule(Rule rule){  if (rules == null || (numRules == rules.length)) {    Rule[] tempRules;    if (rules == null) {      tempRules=new Rule[2];    } else {      tempRules=new Rule[(rules.length + 1) * 2];    }    if (rules != null)     System.arraycopy(rules,0,tempRules,0,rules.length);    rules=tempRules;  }  rules[numRules++]=rule;}  }
class C{  @SuppressWarnings("UnusedParameters") protected ByteBuf extractObject(ChannelHandlerContext ctx,ByteBuf buffer,int index,int length){  return buffer.slice(index,length).retain();}  }
class C{  public static boolean isPrintableCharacter(char c){  return !isControlCharacter(c) || c == '\t' || c == '\n' || c == '\b';}  }
class C{  public static void close(){  out.close();}  }
class C{  public InterpreterPool(){  factories.putAll(defaultFactories);}  }
class C{  public IPoint nearest(IPoint target){  if (root == null || target == null)   return null;  TwoDNode parent=parent(target);  IPoint result=parent.point;  double smallest=distance(target,result);  double best[]=new double[]{smallest};  IPoint betterOne=root.nearest(target,best);  if (betterOne != null) {    return betterOne;  }  return result;}  }
class C{  static void register(final Object value){synchronized (HashCodeBuilder.class) {    if (getRegistry() == null) {      REGISTRY.set(new HashSet<IDKey>());    }  }  getRegistry().add(new IDKey(value));}  }
class C{  ClusterNode pickWeightedNode(){  double weight=RAND.nextDouble();  SortedMap<Double,ClusterNode> pick=circle.tailMap(weight);  ClusterNode node=pick.get(pick.firstKey());  rwLock.readLock().lock();  try {    AtomicInteger cnt=nodeJobs.get(node.id());    if (cnt != null)     cnt.incrementAndGet();  }  finally {    rwLock.readLock().unlock();  }  return node;}  }
class C{  private StringBuffer createIndent(int start,final int indent,final boolean convertSpaceRunsToTabs){  final boolean convertTabs=fPrefs.prefUseTabs && convertSpaceRunsToTabs;  final int tabLen=fPrefs.prefTabSize;  final StringBuffer ret=new StringBuffer();  try {    int spaces=0;    while (start < indent) {      char ch=fDocument.getChar(start);      if (ch == '\t') {        ret.append('\t');        spaces=0;      } else       if (convertTabs) {        spaces++;        if (spaces == tabLen) {          ret.append('\t');          spaces=0;        }      } else {        ret.append(' ');      }      start++;    }    while (spaces-- > 0)     ret.append(' ');  } catch (  BadLocationException e) {  }  return ret;}  }
class C{  public CompletableFuture<Void> shutdown(){  if (!started)   return Futures.exceptionalFuture(new IllegalStateException("context not open"));  CompletableFuture<Void> future=new CompletableFuture<>();  context.getThreadContext().executor().execute(null);  return future.whenCompleteAsync(null);}  }
class C{  private void updateCellWidths(){  int oldCellWidth=cellWidth;  cellWidth=RHS_BORDER_WIDTH;  if (textArea != null) {    Font font=getFont();    if (font != null) {      FontMetrics fontMetrics=getFontMetrics(font);      int count=0;      int lineCount=textArea.getLineCount();      while (lineCount >= 10) {        lineCount=lineCount / 10;        count++;      }      cellWidth+=fontMetrics.charWidth('9') * (count + 1) + 5;    }  }  if (cellWidth != oldCellWidth) {    revalidate();  }}  }
class C{  public ObjectFactory(){}  }
class C{  public static boolean isEmpty(final String source){  return source == null || source.trim().isEmpty();}  }
class C{  private static Object fromString(String s) throws IOException, ClassNotFoundException {  byte[] data=Base64.decode(s,Base64.DEFAULT);  ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(data));  Object o=ois.readObject();  ois.close();  return o;}  }
class C{  protected Double wrapValue(double k){  return new Double(k);}  }
class C{  public static ByteBuffer encode(String string) throws CharacterCodingException {  return encode(string,true);}  }
class C{  protected void sendEntriesToSwitch(DatapathId switchId){  IOFSwitch sw=switchService.getSwitch(switchId);  if (sw == null)   return;  String stringId=sw.getId().toString();  if ((entriesFromStorage != null) && (entriesFromStorage.containsKey(stringId))) {    Map<String,OFFlowMod> entries=entriesFromStorage.get(stringId);    List<String> sortedList=new ArrayList<String>(entries.keySet());    Collections.sort(sortedList,new FlowModSorter(stringId));    for (    String entryName : sortedList) {      OFFlowMod flowMod=entries.get(entryName);      if (flowMod != null) {        if (log.isDebugEnabled()) {          log.debug("Pushing static entry {} for {}",stringId,entryName);        }        writeFlowModToSwitch(sw,flowMod);      }    }  }}  }
class C{  public void removeDirectory(String dir) throws IOException {  send("RMD " + dir);  readCode(226,250);}  }
class C{  private void handleAdded(RPObject obj){  ID id=obj.getID();  for (  ItemPanel panel : panels) {    IEntity entity=panel.getEntity();    if (entity != null && id.equals(entity.getRPObject().getID())) {      return;    }  }  IEntity entity=GameObjects.getInstance().get(obj);  for (  ItemPanel panel : panels) {    if (panel.getEntity() == null) {      panel.setEntity(entity);      return;    }  }  logger.error("More objects than slots: " + slotName);}  }
class C{  public boolean parseArgs(String[] args,Main main){  String explicitVersion=null;  for (int i=0; i < args.length; i++) {    String arg=args[i];    if (versionOptions.containsKey(arg)) {      if (explicitVersion != null && !explicitVersion.equals(arg)) {        main.error("rmic.cannot.use.both",explicitVersion,arg);        return false;      }      explicitVersion=arg;      version=versionOptions.get(arg);      args[i]=null;    }  }  return true;}  }
class C{  public void check(Environment env) throws ClassNotFound {}  }
class C{  @TargetApi(23) private boolean maybeRequestPermission(){  if (requiresPermission(contentUri)) {    requestPermissions(new String[]{permission.READ_EXTERNAL_STORAGE},0);    return true;  } else {    return false;  }}  }
class C{  public int update(DatabaseConnection databaseConnection,T data,ObjectCache objectCache) throws SQLException {  try {    if (argFieldTypes.length <= 1) {      return 0;    }    Object[] args=getFieldObjects(data);    Object newVersion=null;    if (versionFieldType != null) {      newVersion=versionFieldType.extractJavaFieldValue(data);      newVersion=versionFieldType.moveToNextValue(newVersion);      args[versionFieldTypeIndex]=versionFieldType.convertJavaFieldToSqlArgValue(newVersion);    }    int rowC=databaseConnection.update(statement,args,argFieldTypes);    if (rowC > 0) {      if (newVersion != null) {        versionFieldType.assignField(data,newVersion,false,null);      }      if (objectCache != null) {        Object id=idField.extractJavaFieldValue(data);        T cachedData=objectCache.get(clazz,id);        if (cachedData != null && cachedData != data) {          for (          FieldType fieldType : tableInfo.getFieldTypes()) {            if (fieldType != idField) {              fieldType.assignField(cachedData,fieldType.extractJavaFieldValue(data),false,objectCache);            }          }        }      }    }    logger.debug("update data with statement '{}' and {} args, changed {} rows",statement,args.length,rowC);    if (args.length > 0) {      logger.trace("update arguments: {}",(Object)args);    }    return rowC;  } catch (  SQLException e) {    throw SqlExceptionUtil.create("Unable to run update stmt on object " + data + ": "+ statement,e);  }}  }
class C{  public static void main(String args[]){  TestRunner.run(new TestSuite(Test01Exceptions.class));}  }
class C{  public JComboBox createComboBox(){  return new JComboBox(m_model);}  }
class C{  public static void find2Methods(Object self,String superMethod,String thisMethod,int index,String desc,java.lang.reflect.Method[] methods){  methods[index + 1]=thisMethod == null ? null : findMethod(self,thisMethod,desc);  methods[index]=findSuperMethod(self,superMethod,desc);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("DocWorkflowManager[");  sb.append("Called=").append(m_noCalled).append(",Stated=").append(m_noStarted).append("]");  return sb.toString();}  }
class C{  public void requestFocus(){  if (!isFocusTraversable()) {    return;  }  Component comp=getTextComponent();  if (comp instanceof JTextComponent) {    comp.requestFocusInWindow();    try {      if (elementInfo.validateIfNecessary()) {        Element elem=elementInfo.getElement();        ((JTextComponent)comp).setCaretPosition(elem.getStartOffset());        AccessibleContext ac=editor.getAccessibleContext();        PropertyChangeEvent pce=new PropertyChangeEvent(this,AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.FOCUSED);        ac.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,pce);      }    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public AddMarketingPermissionException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @Override public void onEnable(){}  }
class C{  private void checkEvenNumber(int number){  Predicate<Integer> evenNumber=null;  System.out.println("The number is even?: " + evenNumber.test(number));}  }
class C{  public LiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private EnumerationAdapter(Collection<T> col){  this.col=col;  iter=col.iterator();}  }
class C{  public int readUInt24(int index){  return 0xffffff & (this.readUByte(index) << 16 | this.readUByte(index + 1) << 8 | this.readUByte(index + 2));}  }
class C{  public static String buildIsComposingInfo(boolean status){  return new StringBuilder("<?xml version=\"1.0\" encoding=\"").append(UTF8_STR).append("\"?>").append(CRLF).append("<isComposing xmlns=\"urn:ietf:params:xml:ns:im-iscomposing\"").append(CRLF).append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"").append(CRLF).append("xsi:schemaLocation=\"urn:ietf:params:xml:ns:im-composing iscomposing.xsd\">").append(CRLF).append("<state>").append(status ? "active" : "idle").append("</state>").append(CRLF).append("<contenttype>").append(MimeType.TEXT_MESSAGE).append("</contenttype>").append(CRLF).append("<lastactive>").append(DateUtils.encodeDate(System.currentTimeMillis())).append("</lastactive>").append(CRLF).append("<refresh>60</refresh>").append(CRLF).append("</isComposing>").toString();}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder();  for (int i=0; i < NDIM; i++) {    s.append(data[i] + " ");  }  return s.toString();}  }
class C{  private void log(Level level,String message){  LOGGER.log(level,"UserSync#" + getId() + ' '+ message);}  }
class C{  public Builder considerExifParams(boolean considerExifParams){  this.considerExifParams=considerExifParams;  return this;}  }
class C{  @EventHandler(ignoreCancelled=true,priority=EventPriority.HIGH) public void onInteractEvent(PlayerInteractEvent event){  if (event.getPlayer().getGameMode() == GameMode.ADVENTURE) {    event.setUseItemInHand(Event.Result.DENY);    event.setUseInteractedBlock(Event.Result.DENY);    event.setCancelled(true);  }}  }
class C{  public void markCompletelyClean(JComponent aComponent){  RepaintManager delegate=getDelegate(aComponent);  if (delegate != null) {    delegate.markCompletelyClean(aComponent);    return;  }synchronized (this) {    dirtyComponents.remove(aComponent);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("address");  expectedResult.add("address");  expectedResult.add("address");  expectedResult.add("emp:address");  expectedResult.add("address");  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("*","address");  for (int indexN10059=0; indexN10059 < elementList.getLength(); indexN10059++) {    child=(Node)elementList.item(indexN10059);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("nodeNames",expectedResult,result);}  }
class C{  public void testConsolidate(){  System.out.println("consolidate");  AuditCommand mockAuditCommand=createMock(AuditCommand.class);  mockAuditCommand.consolidate();  expectLastCall().once();  replay(mockAuditCommand);  AuditServiceThreadImpl instance=initialiseAuditServiceThread(mockAuditCommand);  instance.consolidate();  verify(mockAuditCommand);}  }
class C{  public void methodInheritedFromParent(int p1) throws Exception {}  }
class C{  public static Scale scale(int scale){  return new Scale(scale);}  }
class C{  public Dimension preferredLayoutSize(Container target){synchronized (target.getTreeLock()) {    Dimension dim=new Dimension(0,0);    if ((chart != null) && chart.isVisible()) {      Dimension d=chart.getPreferredSize();      dim.width=d.width;      dim.height=d.height;    }    if ((xLabel != null) && xLabel.isVisible()) {      Dimension d=xLabel.getPreferredSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    if ((yLabel != null) && yLabel.isVisible()) {      Dimension d=yLabel.getPreferredSize();      dim.width+=d.width + hgap;      dim.height=Math.max(d.height,dim.height);    }    if ((title != null) && title.isVisible()) {      Dimension d=title.getPreferredSize();      dim.width=Math.max(d.width,dim.width);      dim.height+=d.height + vgap;    }    Insets insets=target.getInsets();    dim.width+=insets.left + insets.right;    dim.height+=insets.top + insets.bottom;    return dim;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      return makeNetworkedCall(stack);    }    return sage.plugin.CorePluginManager.getInstance().uninstallPlugin(pluggy.getId(),false);  }  return "FAILED - NULL";}  }
class C{  public GridReflectionCache(){}  }
class C{  public String computeVocabularyChecksum(){  MessageDigest md;  try {    md=MessageDigest.getInstance("MD5");  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException("Unknown checksum algorithm");  }  byte[] buffer=new byte[1024];  try (final InputStream is=Files.newInputStream(Paths.get(vocabFile.toString()));DigestInputStream dis=new DigestInputStream(is,md)){    while (dis.read(buffer) != -1) {    }  } catch (  IOException e) {    throw new RuntimeException("Can not find vocabulary file. This should not happen.");  }  byte[] digest=md.digest();  StringBuffer sb=new StringBuffer("");  for (  byte aDigest : digest) {    sb.append(Integer.toString((aDigest & 0xff) + 0x100,16).substring(1));  }  return sb.toString();}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding,boolean append) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file,append);    IOUtils.write(data,out,encoding);    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public void constructorReturned(Spy spy,String constructionInfo){}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void startMainActivity(){  Intent intent=new Intent(this,MainActivity.class);  startActivity(intent);}  }
class C{  public static Object unescapeAttributeValue(String val){  return TypeAndValue.unescapeValue(val);}  }
class C{  protected void debugCodeCall(String methodName,String param){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + methodName+ "("+ quote(param)+ ");");  }}  }
class C{  public TimeEventSpec createTimeEventSpec(){  TimeEventSpecImpl timeEventSpec=new TimeEventSpecImpl();  return timeEventSpec;}  }
class C{  @Interruptible public static void addSoftCandidate(SoftReference<?> ref,ObjectReference referent){  softReferenceProcessor.addCandidate(ref,referent);}  }
class C{  public static String createHash(char[] password) throws NoSuchAlgorithmException, InvalidKeySpecException {  SecureRandom random=new SecureRandom();  byte[] salt=new byte[SALT_BYTE_SIZE];  random.nextBytes(salt);  byte[] hash=pbkdf2(password,salt,PBKDF2_ITERATIONS,HASH_BYTE_SIZE);  return PBKDF2_ITERATIONS + ":" + toHex(salt)+ ":"+ toHex(hash);}  }
class C{  public static Bitmap captureView(View v){  Bitmap b=Bitmap.createBitmap(v.getWidth(),v.getHeight(),Bitmap.Config.ARGB_8888);  Canvas c=new Canvas(b);  v.draw(c);  return b;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:23.277 -0500",hash_original_method="3E7A0A4AB8A0BE85D7EB3547E24BD537",hash_generated_method="F69BF5865306F676EC83FF7CD18A229E") public static NetworkStats stopDataProfiling(Context context){synchronized (sProfilingLock) {    if (sActiveProfilingStart == null) {      throw new IllegalStateException("not profiling data");    }    try {      final NetworkStats profilingStop=getDataLayerSnapshotForUid(context);      final NetworkStats profilingDelta=profilingStop.subtract(sActiveProfilingStart);      sActiveProfilingStart=null;      return profilingDelta;    } catch (    NonMonotonicException e) {      throw new RuntimeException(e);    }  }}  }
class C{  public void ReInit(JavaCharStream stream){  jjmatchedPos=jjnewStateCnt=0;  curLexState=defaultLexState;  input_stream=stream;  ReInitRounds();}  }
class C{  public String printClassDistributionGold(){  StringBuilder sb=new StringBuilder("Gold data distribution\t\t");  sb.append("Predicted data distribution\n");  for (  String goldLabel : this.allGoldLabels) {    int rowSum=getRowSum(goldLabel);    int colSum=getColSum(goldLabel);    sb.append(String.format(Locale.ENGLISH,"%s\t%d\t%.1f",goldLabel,rowSum,(double)rowSum / (double)getTotalSum() * 100.0));    sb.append("%\t");    sb.append(String.format(Locale.ENGLISH,"%d\t%.1f",colSum,(double)colSum / (double)getTotalSum() * 100.0));    sb.append("%\n");  }  sb.append(String.format(Locale.ENGLISH,"Sum\t%d%n",getTotalSum()));  return sb.toString().trim();}  }
class C{  public void unsetCronExpression(){  this.cronExpression=null;}  }
class C{  public boolean checkRootByBuildTags(){  String buildTags=android.os.Build.TAGS;  if (buildTags != null && buildTags.contains(SU_TAG)) {    return true;  }  return false;}  }
class C{  public static void aligned64Copy(Address dstPtr,Address srcPtr,int copyBytes){  if (USE_NATIVE && copyBytes > NATIVE_THRESHOLD) {    memcopy(dstPtr,srcPtr,copyBytes);  } else {    Address endPtr=srcPtr.plus(copyBytes);    while (srcPtr.LT(endPtr)) {      copy8Bytes(dstPtr,srcPtr);      srcPtr=srcPtr.plus(8);      dstPtr=dstPtr.plus(8);    }  }}  }
class C{  GridByteArrayList byteSource(){  return byteSrc;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:53.471 -0500",hash_original_method="BF19E6A321D84C3196CD725DF225766B",hash_generated_method="89BB4FA4A2363FF867FF7FCF5DE0D0FA") public X500Principal(InputStream in){  if (in == null) {    throw new NullPointerException("in == null");  }  try {    dn=(Name)Name.ASN1.decode(in);  } catch (  IOException e) {    throw incorrectInputEncoding(e);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr createdAttr;  doc=(Document)load("staff",true);{    boolean success=false;    try {      createdAttr=doc.createAttribute("invalid^Name");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public static void registerHandlers(){  if (false)   Log.v("ddm","Registering DDM message handlers");  DdmHandleHello.register();  DdmHandleThread.register();  DdmHandleHeap.register();  DdmHandleNativeHeap.register();  DdmHandleProfiling.register();  DdmHandleExit.register();  DdmHandleViewDebug.register();  DdmServer.registrationComplete();}  }
class C{  public byte[] decode(byte[] array) throws DecoderException {  return decodeHex(new String(array).toCharArray());}  }
class C{  public void type(int type){  this.type=type;}  }
class C{  public static final Move stringToMove(Position pos,String strMove){  return stringToMove(pos,strMove,null);}  }
class C{  @Override public void E(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.E()");  }  javascript.execute(formObj,PdfDictionary.E,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  protected final JsonToken _handleFieldName() throws IOException, JsonParseException {  if (_inputPtr >= _inputEnd) {    loadMoreGuaranteed();  }  int ch=_inputBuffer[_inputPtr++];  _typeByte=ch;switch ((ch >> 6) & 3) {case 0:switch (ch) {case 0x20:      _parsingContext.setCurrentName("");    return JsonToken.FIELD_NAME;case 0x30:case 0x31:case 0x32:case 0x33:{    if (_inputPtr >= _inputEnd) {      loadMoreGuaranteed();    }    int index=((ch & 0x3) << 8) + (_inputBuffer[_inputPtr++] & 0xFF);    if (index >= _seenNameCount) {      _reportInvalidSharedName(index);    }    _parsingContext.setCurrentName(_seenNames[index]);  }return JsonToken.FIELD_NAME;case 0x34:_handleLongFieldName();return JsonToken.FIELD_NAME;}break;case 1:{int index=(ch & 0x3F);if (index >= _seenNameCount) {_reportInvalidSharedName(index);}_parsingContext.setCurrentName(_seenNames[index]);}return JsonToken.FIELD_NAME;case 2:{int len=1 + (ch & 0x3f);String name;Name n=_findDecodedFromSymbols(len);if (n != null) {name=n.getName();_inputPtr+=len;} else {name=_decodeShortAsciiName(len);name=_addDecodedToSymbols(len,name);}if (_seenNames != null) {if (_seenNameCount >= _seenNames.length) {_seenNames=_expandSeenNames(_seenNames);}_seenNames[_seenNameCount++]=name;}_parsingContext.setCurrentName(name);}return JsonToken.FIELD_NAME;case 3:ch&=0x3F;{if (ch > 0x37) {if (ch == 0x3B) {if (!_parsingContext.inObject()) {_reportMismatchedEndMarker('}',']');}_parsingContext=_parsingContext.getParent();return JsonToken.END_OBJECT;}} else {final int len=ch + 2;String name;Name n=_findDecodedFromSymbols(len);if (n != null) {name=n.getName();_inputPtr+=len;} else {name=_decodeShortUnicodeName(len);name=_addDecodedToSymbols(len,name);}if (_seenNames != null) {if (_seenNameCount >= _seenNames.length) {_seenNames=_expandSeenNames(_seenNames);}_seenNames[_seenNameCount++]=name;}_parsingContext.setCurrentName(name);return JsonToken.FIELD_NAME;}}break;}_reportError("Invalid type marker byte 0x" + Integer.toHexString(_typeByte) + " for expected field name (or END_OBJECT marker)");return null;}  }
class C{  public ClusteredScoreMap<String> match(final Element element,final CharSequence content){  final ClusteredScoreMap<String> subjects=new ClusteredScoreMap<String>(false);  final List<Attribute> patterns=this.elementMatcher.get(element);  if (patterns == null)   return subjects;  for (  final Attribute attribute : patterns) {    if (attribute.pattern.matcher(content).matches()) {      subjects.inc(attribute.subject);    }  }  return subjects;}  }
class C{  @ZeppelinApi public void show(Object o,int maxResult){  try {    if (supportedClasses.contains(o.getClass())) {      interpreterContext.out.write(showDF(sc,interpreterContext,o,maxResult));    } else {      interpreterContext.out.write(o.toString());    }  } catch (  IOException e) {    throw new InterpreterException(e);  }}  }
class C{  public void eleminateRedundentGlobals(StylesheetRoot stylesheet){  eleminateRedundent(stylesheet,m_absPaths);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (!inputHeader.contains(".dep")) {      throw new Exception("No input file found");    }    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,0);        } else {          outputFile.setValue(row,col,1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void contentsChanged(ListDataEvent event){  calculatePositionArray();  setPreferredSize(calculatePreferredSize());}  }
class C{  public static <E extends Comparable<E>>SingleLinkedNode<E> reverseAlternateNodesAndAppendAtEnd(SingleLinkedNode<E> node){  SingleLinkedNode<E> curr=node, end=node, currNext, endNext;  while (end.next != null) {    end=end.next;  }  while (curr != end && curr.next != end) {    currNext=curr.next.next;    endNext=end.next;    end.next=curr.next;    end.next.next=endNext;    curr.next=currNext;    curr=curr.next;  }  return node;}  }
class C{  public Quaterniond premul(Quaterniondc q){  return premul(q,this);}  }
class C{  private boolean puedeSerEliminada(PrevisionVO prevision){  boolean puedeSerEliminada=false;  if (prevision.getEstado() == (EstadoPrevision.ABIERTA.getIdentificador()) || prevision.getEstado() == (EstadoPrevision.RECHAZADA.getIdentificador()))   puedeSerEliminada=true; else   if (prevision.getEstado() == (EstadoPrevision.ACEPTADA.getIdentificador()))   puedeSerEliminada=prevision.isCaducada();  ServiceClient client=getServiceClient();  if (!client.getId().equals(prevision.getIdusrgestor())) {    puedeSerEliminada=false;  }  boolean tieneRelacionesAsociadas=_relacionDBEntity.previsionTieneRelaciones(prevision.getId());  return puedeSerEliminada && !tieneRelacionesAsociadas;}  }
class C{  private static boolean isValidOpt(char c){  return isValidChar(c) || c == ' ' || c == '?' || c == '@';}  }
class C{  public BloomFilter(){}  }
class C{  protected Error(String message,Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  private Geometry readFeatureCollection(String s) throws ParseException {  Pattern p=Pattern.compile("\\{[^\\{\\}]+?\\}");  Matcher m=p.matcher(s);  List geoms=new ArrayList();  while (true) {    boolean isFound=m.find();    if (!isFound)     break;    String substr=m.group();    if (isGeometry(substr)) {      geoms.add(readGeometry(substr));    }  }  return geomFact.createGeometryCollection(GeometryFactory.toGeometryArray(geoms));}  }
class C{  private boolean isSimilarSignature(Method possiblyMatchingMethod,String desiredMethodName,Class<?>[] desiredParamTypes){  return possiblyMatchingMethod.getName().equals(desiredMethodName) && match(possiblyMatchingMethod.getParameterTypes(),desiredParamTypes);}  }
class C{  void restore(){  System.arraycopy(counterSave,0,counter,0,blockSize);  System.arraycopy(encryptedCounterSave,0,encryptedCounter,0,blockSize);  used=usedSave;}  }
class C{  public RSAPublicKeyImpl(BigInteger n,BigInteger e) throws InvalidKeyException {  this.n=n;  this.e=e;  RSAKeyFactory.checkRSAProviderKeyLengths(n.bitLength(),e);  algid=RSAPrivateCrtKeyImpl.rsaId;  try {    DerOutputStream out=new DerOutputStream();    out.putInteger(n);    out.putInteger(e);    byte[] keyArray=new DerValue(DerValue.tag_Sequence,out.toByteArray()).toByteArray();    setKey(new BitArray(keyArray.length * 8,keyArray));  } catch (  IOException exc) {    throw new InvalidKeyException(exc);  }}  }
class C{  protected final <T extends Node>T insert(final T newChild){  CompilerDirectives.transferToInterpreterAndInvalidate();  assert newChild != null;  adoptHelper(newChild);  return newChild;}  }
class C{  @Override public Uri insert(Uri uri,ContentValues cvs){  return mImpl.insert(uri,cvs);}  }
class C{  public void removeSegment(byte segmentMarker){  _segmentDataMap.remove(new Byte(segmentMarker));  _segmentOffsetDataMap.remove(new Byte(segmentMarker));}  }
class C{  @POST @Path("cluster/recovery") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response clusterRecovery() throws Exception {  _log.info("Received a cluster recovery request");  try {    if (ipreconfigManager.underIpReconfiguration()) {      String errstr="Failed to trigger node recovery, ip reconfiguration is ongoing...";      _log.warn(errstr);      throw new IllegalStateException(errstr);    }    recoveryManager.triggerNodeRecovery();    auditControl(OperationTypeEnum.RECOVER_NODES,AuditLogManager.AUDITLOG_SUCCESS,null);  } catch (  Exception e) {    auditControl(OperationTypeEnum.RECOVER_NODES,AuditLogManager.AUDITLOG_FAILURE,null);    throw APIException.internalServerErrors.triggerRecoveryFailed(e.getMessage());  }  _log.info("Accepted the cluster recovery request");  return Response.status(Response.Status.ACCEPTED).build();}  }
class C{  private void _handle_model_modification_intent(Intent i,Context ctx){  String package_name=i.getDataString();  if (package_name == null) {    Log.v(MainActivity.TAG,"[BroadcastHandler._handle_model_modification_intent] Received an " + i.getAction() + " intent with empty data!");    return;  }  package_name=package_name.substring(package_name.indexOf(":") + 1);  ModelModifiedMessage.event_type type=null;  if (Intent.ACTION_PACKAGE_ADDED.equals(i.getAction())) {    InstalledApp app=InstalledApp.find_app(package_name);    if (app == null) {      type=ModelModifiedMessage.event_type.APP_ADDED;      InstalledApp.create_app(ctx.getPackageManager(),package_name);    } else {      if (!InstalledApp.detect_new_version(ctx,package_name)) {        return;      }      type=ModelModifiedMessage.event_type.APP_UPDATED;    }  } else   if (Intent.ACTION_PACKAGE_REMOVED.equals(i.getAction())) {    if (i.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {      return;    }    type=ModelModifiedMessage.event_type.APP_REMOVED;    InstalledApp.delete_app(package_name);  }  Log.v(MainActivity.TAG,"Received " + type + " ("+ package_name+ "). The activity will be informed.");  EventBusHelper.post_sticky(type,package_name);}  }
class C{  public void write(SpatialGraph graph,String filename){  if (kmlPartitition == null)   kmlPartitition=new DefaultKMLPartition();  if (kmlVertexStyle == null) {    kmlVertexStyle=new KMLIconVertexStyle(graph);    this.addKMZWriterListener((KMZWriterListener)kmlVertexStyle);  }  if (kmlEdgeStyle == null)   kmlEdgeStyle=new DefaultEdgeStyle();  KMZWriter writer=new KMZWriter(filename);  for (  KMZWriterListener listener : writerListeners)   listener.openWriter(writer);  CoordinateReferenceSystem sourceCRS=graph.getCoordinateReferenceSysten();  CoordinateReferenceSystem targetCRS=DefaultGeographicCRS.WGS84;  try {    transform=CRS.findMathTransform(sourceCRS,targetCRS);    DocumentType kmlDocument=kmlFactory.createDocumentType();    for (    Set<? extends SpatialVertex> partition : kmlPartitition.getPartitions(graph)) {      FolderType kmlFolder=createFolder(partition,kmlDocument);      kmlPartitition.addDetail(kmlFolder,partition);      kmlDocument.getAbstractFeatureGroup().add(kmlFactory.createFolder(kmlFolder));    }    KmlType kmlType=kmlFactory.createKmlType();    kmlType.setAbstractFeatureGroup(kmlFactory.createDocument(kmlDocument));    writer.writeMainKml(kmlType);  } catch (  FactoryException e) {    e.printStackTrace();  }  for (  KMZWriterListener listener : writerListeners)   listener.closeWriter(writer);  writer.close();}  }
class C{  public static int numGlyphs(Font font){  return ((MaximumProfileTable)FontUtils.getTable(font,Tag.maxp)).numGlyphs();}  }
class C{  @Override protected void addToPendingBatch(OneRowChange oneRowChange,int row) throws ReplicatorException {  if (logger.isDebugEnabled()) {    logger.debug("Adding change row to pending batch");  }  try {    pendingPreparedStatement.addBatch();    RowReference rowRef=new RowReference();    rowRef.rowChanges=oneRowChange;    rowRef.row=row;    pendingRowChanges.add(rowRef);  } catch (  SQLException e) {    ReplicatorException replicatorException=new ReplicatorException("Unable to add pending row change to JDBC batch");    replicatorException.setExtraData(logFailedRowChangeSQL(pendingSqlStatement,oneRowChange,row));    throw replicatorException;  }}  }
class C{  private final boolean checkProximityPosition(XPathContext xctxt,int predPos,DTM dtm,int context,int pos){  try {    DTMAxisTraverser traverser=dtm.getAxisTraverser(Axis.PRECEDINGSIBLING);    for (int child=traverser.first(context); DTM.NULL != child; child=traverser.next(context,child)) {      try {        xctxt.pushCurrentNode(child);        if (NodeTest.SCORE_NONE != super.execute(xctxt,child)) {          boolean pass=true;          try {            xctxt.pushSubContextList(this);            for (int i=0; i < predPos; i++) {              xctxt.pushPredicatePos(i);              try {                XObject pred=m_predicates[i].execute(xctxt);                try {                  if (XObject.CLASS_NUMBER == pred.getType()) {                    throw new Error("Why: Should never have been called");                  } else                   if (!pred.boolWithSideEffects()) {                    pass=false;                    break;                  }                }  finally {                  pred.detach();                }              }  finally {                xctxt.popPredicatePos();              }            }          }  finally {            xctxt.popSubContextList();          }          if (pass)           pos--;          if (pos < 1)           return false;        }      }  finally {        xctxt.popCurrentNode();      }    }  } catch (  javax.xml.transform.TransformerException se) {    throw new java.lang.RuntimeException(se.getMessage());  }  return (pos == 1);}  }
class C{  @Override protected void initData(){}  }
class C{  protected boolean isDocumentModified(){  return false;}  }
class C{  public void verifyNoError(String substring,Throwable t){  verifyNo(Level.SEVERE,substring,t);}  }
class C{  private void resizeArrays(){  float[] temp_f;  int[] temp_i;  String[] temp_s;  if (max < 5000) {    max*=5;  } else   if (max < 10000) {    max*=2;  } else {    max+=1000;  }  temp_s=contents;  contents=new String[max];  System.arraycopy(temp_s,0,contents,0,pointer);  temp_i=f_writingMode;  f_writingMode=new int[max];  f_writingMode=new int[max];  System.arraycopy(temp_i,0,f_writingMode,0,pointer);  temp_s=colorTag;  colorTag=new String[max];  System.arraycopy(temp_s,0,colorTag,0,pointer);  temp_i=text_length;  text_length=new int[max];  System.arraycopy(temp_i,0,text_length,0,pointer);  temp_f=f_character_spacing;  f_character_spacing=new float[max];  System.arraycopy(temp_f,0,f_character_spacing,0,pointer);  temp_i=f_end_font_size;  f_end_font_size=new int[max];  System.arraycopy(temp_i,0,f_end_font_size,0,pointer);  temp_f=space_width;  space_width=new float[max];  System.arraycopy(temp_f,0,space_width,0,pointer);  temp_f=f_x1;  f_x1=new float[max];  System.arraycopy(temp_f,0,f_x1,0,pointer);  temp_f=f_x2;  f_x2=new float[max];  System.arraycopy(temp_f,0,f_x2,0,pointer);  temp_f=f_y1;  f_y1=new float[max];  System.arraycopy(temp_f,0,f_y1,0,pointer);  temp_f=f_y2;  f_y2=new float[max];  System.arraycopy(temp_f,0,f_y2,0,pointer);}  }
class C{  void unbind(){}  }
class C{  @Transient public boolean isDirty(){  for (  Tradestrategy item : this.getTradestrategies()) {    if (item.isDirty())     return true;  }  return super.isDirty();}  }
class C{  protected static CompositeRule convertOperator(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_OPERATOR_ATTRIBUTE);  if (s.length() == 0) {    return CompositeRule.OVER;  }  if (SVG_ATOP_VALUE.equals(s)) {    return CompositeRule.ATOP;  }  if (SVG_IN_VALUE.equals(s)) {    return CompositeRule.IN;  }  if (SVG_OVER_VALUE.equals(s)) {    return CompositeRule.OVER;  }  if (SVG_OUT_VALUE.equals(s)) {    return CompositeRule.OUT;  }  if (SVG_XOR_VALUE.equals(s)) {    return CompositeRule.XOR;  }  if (SVG_ARITHMETIC_VALUE.equals(s)) {    float k1=convertNumber(filterElement,SVG_K1_ATTRIBUTE,0,ctx);    float k2=convertNumber(filterElement,SVG_K2_ATTRIBUTE,0,ctx);    float k3=convertNumber(filterElement,SVG_K3_ATTRIBUTE,0,ctx);    float k4=convertNumber(filterElement,SVG_K4_ATTRIBUTE,0,ctx);    return CompositeRule.ARITHMETIC(k1,k2,k3,k4);  }  throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_OPERATOR_ATTRIBUTE,s});}  }
class C{  public TimezoneOffsetTo(UtcOffset offset){  super(offset);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.473 -0500",hash_original_method="21909697F743246FF7034BA444D2FBF0",hash_generated_method="174EA5B3EE24112A639E97FE39E5B1D6") public void close(){  if (mInsertStatement != null) {    mInsertStatement.close();    mInsertStatement=null;  }  if (mReplaceStatement != null) {    mReplaceStatement.close();    mReplaceStatement=null;  }  mInsertSQL=null;  mColumns=null;}  }
class C{  public XYEntry<K,V> removeByIndex(int index){  K key=indexList.remove(index);  return new XYEntry<K,V>(key,this.remove(key));}  }
class C{  public static void hideFab(FloatingActionButton fab){  fab.hide();  fab.animate().translationY(fab.getHeight() + 100).setInterpolator(new AccelerateInterpolator(2)).start();}  }
class C{  @SuppressWarnings({"ConstantConditions"}) public final void changeVariable(Node from,Node to){  if (!(from instanceof DiscreteVariable && to instanceof DiscreteVariable)) {    throw new IllegalArgumentException("Only discrete variables supported.");  }  DiscreteVariable _from=(DiscreteVariable)from;  DiscreteVariable _to=(DiscreteVariable)to;  int col=variables.indexOf(_from);  List<String> oldCategories=_from.getCategories();  List<String> newCategories=_to.getCategories();  int[] indexArray=new int[oldCategories.size()];  for (int i=0; i < oldCategories.size(); i++) {    indexArray[i]=newCategories.indexOf(oldCategories.get(i));  }  for (int i=0; i < getNumRows(); i++) {    if (Double.isNaN(tetradMatrix.get(i,col))) {      break;    }    int value=getInt(i,col);    int newIndex=0;    try {      newIndex=indexArray[value];    } catch (    Exception e) {      e.printStackTrace();    }    if (newIndex == -1) {      tetradMatrix.set(i,col,Double.NaN);    } else {      setInt(i,col,newIndex);    }  }  variables.set(col,_to);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:46.997 -0500",hash_original_method="653E955146B329965A610B3602D07E3E",hash_generated_method="5FC282426A31CD7F17EA87DB0C0514BE") public IOException(Throwable cause){  super(cause == null ? null : cause.toString(),cause);}  }
class C{  @Override public boolean isTraceEnabled(){  return logger.isLoggable(Level.FINEST);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodechildnodesempty.class,args);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Nullable @Override public RedeemData findRedeemDataFromScriptHash(byte[] payToScriptHash){  keyChainGroupLock.lock();  try {    return keyChainGroup.findRedeemDataFromScriptHash(payToScriptHash);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  public PartitionSubstitutionModel parsePAUPBlock(BeautiOptions options,List<CharSet> charSets) throws ImportException, IOException {  PartitionSubstitutionModel model=new PartitionSubstitutionModel(options,"nucs");  readTopLevelBlock(options,model,charSets);  return model;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public Categories(String... categories){  super(categories);}  }
class C{  public FocusEvent(Component source,int id,boolean temporary){  this(source,id,temporary,null);}  }
class C{  private ChronoLocalDateTimeImpl<D> with(Temporal newDate,LocalTime newTime){  if (date == newDate && time == newTime) {    return this;  }  D cd=ChronoLocalDateImpl.ensureValid(date.getChronology(),newDate);  return new ChronoLocalDateTimeImpl<>(cd,newTime);}  }
class C{  private void initialize(TemplateResolver templateResolver){  templateEngine=new org.thymeleaf.TemplateEngine();  templateEngine.setTemplateResolver(templateResolver);}  }
class C{  public PolarPlot(XYDataset dataset,ValueAxis radiusAxis,PolarItemRenderer renderer){  super();  this.datasets=new ObjectList();  this.datasets.set(0,dataset);  if (dataset != null) {    dataset.addChangeListener(this);  }  this.angleTickUnit=new NumberTickUnit(DEFAULT_ANGLE_TICK_UNIT_SIZE);  this.axes=new ObjectList();  this.datasetToAxesMap=new TreeMap();  this.axes.set(0,radiusAxis);  if (radiusAxis != null) {    radiusAxis.setPlot(this);    radiusAxis.addChangeListener(this);  }  this.axisLocations=new ObjectList();  this.axisLocations.set(0,PolarAxisLocation.EAST_ABOVE);  this.axisLocations.set(1,PolarAxisLocation.NORTH_LEFT);  this.axisLocations.set(2,PolarAxisLocation.WEST_BELOW);  this.axisLocations.set(3,PolarAxisLocation.SOUTH_RIGHT);  this.axisLocations.set(4,PolarAxisLocation.EAST_BELOW);  this.axisLocations.set(5,PolarAxisLocation.NORTH_RIGHT);  this.axisLocations.set(6,PolarAxisLocation.WEST_ABOVE);  this.axisLocations.set(7,PolarAxisLocation.SOUTH_LEFT);  this.renderers=new ObjectList();  this.renderers.set(0,renderer);  if (renderer != null) {    renderer.setPlot(this);    renderer.addChangeListener(this);  }  this.angleOffset=DEFAULT_ANGLE_OFFSET;  this.counterClockwise=false;  this.angleGridlinesVisible=true;  this.angleGridlineStroke=DEFAULT_GRIDLINE_STROKE;  this.angleGridlinePaint=DEFAULT_GRIDLINE_PAINT;  this.radiusGridlinesVisible=true;  this.radiusMinorGridlinesVisible=true;  this.radiusGridlineStroke=DEFAULT_GRIDLINE_STROKE;  this.radiusGridlinePaint=DEFAULT_GRIDLINE_PAINT;  this.margin=DEFAULT_MARGIN;}  }
class C{  public String[] list() throws RemoteException {  if (!isRunning()) {    throw new IllegalStateException("RMIRegistryService is not running");  }  return registry.list();}  }
class C{  public static Color createColor(int value){  return createColor(value,true);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof ConnectionIdAttribute))   return false;  if (obj == this)   return true;  ConnectionIdAttribute att=(ConnectionIdAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || att.connectionIdValue != this.connectionIdValue)   return false;  return true;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getBayesUpdater() == null) {    throw new NullPointerException();  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:28.712 -0500",hash_original_method="8E76514466172FE6741D8A4C6661DD70",hash_generated_method="35CA469B9DE7E16FED58BBDA37322DDE") protected ClassLoader(){  this(getSystemClassLoader(),false);}  }
class C{  public void treeToList(){  printList(treeToList(root));}  }
class C{  public DatasetListPanel(Experiment exp){  this();  setExperiment(exp);}  }
class C{  public void clearElementos(){  elementos.clear();}  }
class C{  private void forEntryPoints(){  for (  SootMethod method : PTABridge.v().getReachableMethods()) {    if (RCFG.isUserEntryPoint(method)) {      logger.info("Found entry  point {}",method);      SourceCallChainBuilder cb=new SourceCallChainBuilder(timeout,true);      SourceCallChainInfo cci=cb.process_call_chain(null,method);      if (cci != null) {        cci.type="entry-point";        cci.link="as_entry_point";        cci.calculate_scores();        entry_points.add(cci);      }    }  }}  }
class C{  public TextEditor detabify(){  return detabify(4);}  }
class C{  private boolean testClipping(double[] p){  if (clipmin == null || clipmax == null) {    return false;  }  for (int i=0; i < p.length; i++) {    if (p[i] < clipmin[i] || p[i] > clipmax[i]) {      return true;    }  }  return false;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("IdocvtblctlgTVS ver [");  buffer.append(ver);  buffer.append("] logDocColName [");  buffer.append(logDocColName);  buffer.append("] docColName [");  buffer.append(docColName);  buffer.append("] docColFmtDef [");  buffer.append(docColFmtDef);  buffer.append("] logSustColName [");  buffer.append(logSustColName);  buffer.append("] sustColName [");  buffer.append(sustColName);  buffer.append("] sustColFmtDef [");  buffer.append(sustColFmtDef);  buffer.append("] primaryColName [");  buffer.append(primaryColName);  buffer.append("] from [");  buffer.append(from);  buffer.append("] where [");  buffer.append(where);  buffer.append("] docOrderBy [");  buffer.append(docOrderBy);  buffer.append("] sustOrderBy [");  buffer.append(sustOrderBy);  buffer.append("]");  return buffer.toString();}  }
class C{  public boolean containsKey(Object key){  return ValueCell.strip(hash.get(key),false) != null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  protected void makeDropMove(Move move){  long toBB=getBitboard(move.getTo());  int oppositeColor=getOppositeColor(move.getColor());  xor(move.getColor(),toBB);  xor(move.getColor(),move.getPiece(),toBB);  setOccupiedBB(occupiedBB ^ toBB);  setEmptyBB(emptyBB ^ toBB);  updateZobristDrop(move,oppositeColor);  setPiece(move.getTo(),move.getPiece());  setEpSquare(EMPTY_SQUARE);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public ModbusUDPTransaction(AbstractUDPTerminal terminal){  setTerminal(terminal);}  }
class C{  public GeoDistanceCondition minDistance(String minDistance){  this.minDistance=minDistance;  return this;}  }
class C{  public static String download(String siteUrl) throws Exception {  URL url=new URL(siteUrl);  HttpURLConnection con=(HttpURLConnection)url.openConnection();  StringBuffer response=new StringBuffer();  BufferedReader in=null;  try {    con.setRequestMethod("GET");    con.setRequestProperty("User-Agent",USER_AGENT);    in=new BufferedReader(new InputStreamReader(con.getInputStream()));    String inputLine;    while ((inputLine=in.readLine()) != null) {      response.append(inputLine);    }  }  finally {    if (in != null)     in.close();    if (con != null)     con.disconnect();  }  return response.toString();}  }
class C{  private void step_1(){  npc.add(ConversationStates.ATTENDING,Arrays.asList("Blordrough","blordrough","blordroughs"),null,ConversationStates.ATTENDING,"My Mithrilbourgh army have great losses in battles with Blordrough soldiers. They coming from side of Ados tunnels.",null);  npc.add(ConversationStates.ATTENDING,ConversationPhrases.QUEST_MESSAGES,null,ConversationStates.ATTENDING,null,new QuestAction());}  }
class C{  public void hookCommandLineListener(CommandLine cmdLine) throws Exception {  List<CommandLineArgument[]> allCommandLineList=new ArrayList<>();  Map<String,CommandLineListener> extMap=new HashMap<>();  for (  Map.Entry<Extension,ExtensionHook> entry : extensionHooks.entrySet()) {    ExtensionHook hook=entry.getValue();    CommandLineArgument[] arg=hook.getCommandLineArgument();    if (arg.length > 0) {      allCommandLineList.add(arg);    }    Extension extension=entry.getKey();    if (extension instanceof CommandLineListener) {      CommandLineListener cli=(CommandLineListener)extension;      List<String> exts=cli.getHandledExtensions();      if (exts != null) {        for (        String ext : exts) {          extMap.put(ext,cli);        }      }    }  }  cmdLine.parse(allCommandLineList,extMap);}  }
class C{  public void threadAssertTrue(boolean b){  if (!b) {    threadFailed=true;    assertTrue(b);  }}  }
class C{  public void addRaw(final long rawValue){switch (type) {case EMPTY:{      if (explicitThreshold > 0) {        initializeStorage(HLLType.EXPLICIT);        explicitStorage.add(rawValue);      } else       if (!sparseOff) {        initializeStorage(HLLType.SPARSE);        addRawSparseProbabilistic(rawValue);      } else {        initializeStorage(HLLType.FULL);        addRawProbabilistic(rawValue);      }      return;    }case EXPLICIT:{    explicitStorage.add(rawValue);    if (explicitStorage.size() > explicitThreshold) {      if (!sparseOff) {        initializeStorage(HLLType.SPARSE);        for (        LongCursor c : explicitStorage) {          addRawSparseProbabilistic(c.value);        }      } else {        initializeStorage(HLLType.FULL);        for (        LongCursor c : explicitStorage) {          addRawProbabilistic(c.value);        }      }      explicitStorage=null;    }    return;  }case SPARSE:{  addRawSparseProbabilistic(rawValue);  if (sparseProbabilisticStorage.size() > sparseThreshold) {    initializeStorage(HLLType.FULL);    for (    IntByteCursor c : sparseProbabilisticStorage) {      final int registerIndex=c.key;      final byte registerValue=c.value;      probabilisticStorage.setMaxRegister(registerIndex,registerValue);    }    sparseProbabilisticStorage=null;  }  return;}case FULL:addRawProbabilistic(rawValue);return;default :throw new RuntimeException("Unsupported HLL type " + type);}}  }
class C{  public PKCS10Attribute(PKCS9Attribute attr){  this.attributeId=attr.getOID();  this.attributeValue=attr.getValue();}  }
class C{  public synchronized void remove(String k){  if (k == null) {    for (int i=0; i < nkeys; i++) {      while (keys[i] == null && i < nkeys) {        for (int j=i; j < nkeys - 1; j++) {          keys[j]=keys[j + 1];          values[j]=values[j + 1];        }        nkeys--;      }    }  } else {    for (int i=0; i < nkeys; i++) {      while (k.equalsIgnoreCase(keys[i]) && i < nkeys) {        for (int j=i; j < nkeys - 1; j++) {          keys[j]=keys[j + 1];          values[j]=values[j + 1];        }        nkeys--;      }    }  }}  }
class C{  protected final void swap(float[] a,float[] b){  tmp=a;  a=b;  b=tmp;}  }
class C{  private void initXsw(){  payloadValue.setText(code);  Document doc;  try {    doc=DomUtilities.stringToDom(code);    signatureManager=new SignatureManager();    signatureManager.setDocument(doc);  } catch (  SAXException ex) {    Logging.getInstance().log(getClass(),ex);  }  List<Payload> payloadList=signatureManager.getPayloads();  if (payloadList.size() > 0) {    payloadComboBox.setModel(new DefaultComboBoxModel(payloadList.toArray()));    payloadValue.setText(signatureManager.getPayloads().get(0).getValue());    updateOracle.setEnabled(true);    modifyButton.setEnabled(true);    try {      payloadBean.setPayload(payloadList.get(0));    } catch (    IndexOutOfBoundsException e) {      Logging.getInstance().log(getClass(),e);    }    finalPayload.setText("Modify the Payload (1.) and press Update Oracle (2.).");  } else {    attackSlider.setMaximum(0);    attackDescriptionTextArea.setText("No Attack.");    finalPayload.setText("No Payload.");    String[] payloadError={"No Payload found!"};    payloadComboBox.setModel(new DefaultComboBoxModel(payloadError));    payloadValue.setText(payloadError[0]);    updateOracle.setEnabled(false);    modifyButton.setEnabled(false);  }  attackSlider.setValue(0);  attackNumber.setText("0");}  }
class C{  public Link(String rel,String type,URI href){  this();  setRel(rel);  setType(type);  setHref(href);}  }
class C{  public void shutdown(){  executorService.shutdown();}  }
class C{  public static <A>ObservableTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  private PositionRecord positionFromCursor(final Cursor cursor){  final int columnIndex=cursor.getColumnIndex(Schema.COL_LATITUDE);  final int columnIndex2=cursor.getColumnIndex(Schema.COL_LONGITUDE);  final int columnIndex3=cursor.getColumnIndex(Schema.COL_ALTITUDE);  final int columnIndex4=cursor.getColumnIndex(Schema.COL_ACCURACY);  final int columnIndex5=cursor.getColumnIndex(Schema.COL_TIMESTAMP);  final int columnIndex6=cursor.getColumnIndex(Schema.COL_BEARING);  final int columnIndex7=cursor.getColumnIndex(Schema.COL_SPEED);  final int columnIndex8=cursor.getColumnIndex(Schema.COL_SESSION_ID);  final int columnIndex9=cursor.getColumnIndex(Schema.COL_SOURCE);  final PositionRecord position=new PositionRecord();  position.setLatitude(cursor.getDouble(columnIndex));  position.setLongitude(cursor.getDouble(columnIndex2));  position.setAltitude(cursor.getDouble(columnIndex3));  position.setAccuracy(cursor.getDouble(columnIndex4));  position.setTimestampByMillis(cursor.getLong(columnIndex5));  position.setBearing(cursor.getDouble(columnIndex6));  position.setSpeed(cursor.getDouble(columnIndex7));  position.setSession(cursor.getInt(columnIndex8));  position.setSource(cursor.getString(columnIndex9));  return position;}  }
class C{  public ProcessRunner(){  commands=new ArrayList<String>();  env=new LinkedHashMap<String,String>();  redirect=false;}  }
class C{  private CacheConfiguration[] cacheConfiguration(){  CacheConfiguration cacheCfg=defaultCacheConfiguration();  cacheCfg.setName("partitioned");  cacheCfg.setCacheMode(PARTITIONED);  cacheCfg.setNearConfiguration(null);  cacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  cacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(GRP_SIZE));  cacheCfg.setBackups(0);  cacheCfg.setAtomicityMode(TRANSACTIONAL);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("replicated");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  return new CacheConfiguration[]{metaCacheCfg,cacheCfg};}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] minus(T[] self,Object[] removeMe){  return (T[])minus(toList(self),toList(removeMe)).toArray();}  }
class C{  public boolean matches(XPathContext xctxt,int targetNode,QName mode) throws TransformerException {  double score=m_stepPattern.getMatchScore(xctxt,targetNode);  return (XPath.MATCH_SCORE_NONE != score) && matchModes(mode,m_template.getMode());}  }
class C{  public static void createDirectories(String dir){  if (dir != null) {    if (exists(dir)) {      if (!isDirectory(dir)) {        createDirectory(dir);      }    } else {      String parent=getParent(dir);      createDirectories(parent);      createDirectory(dir);    }  }}  }
class C{  public TriggerProcessStatusException(String message,TriggerProcessStatus status){  super(message,new Object[]{status});}  }
