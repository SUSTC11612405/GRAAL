class C{  public Obligations createObligations(String xml) throws XACMLException {  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE,xml);  if (obj == null) {    return new ObligationsImpl(xml);  } else {    return (Obligations)obj;  }}  }
class C{  public CallingStationIdAttribute(String str){  super(OctetUtils.toOctets(AttributeType.CALLING_STATION_ID,str));  this.str=str;}  }
class C{  public static Bitmap resizeImageInFixedSize(Bitmap image,int width,int height){  if (image == null) {    throw new NullPointerException("Bitmap not set!");  }  return Bitmap.createScaledBitmap(image,width,height,true);}  }
class C{  public static IngredientsFragment newInstance(Recipe recipe,int sectionNumber){  IngredientsFragment fragment=new IngredientsFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public synchronized void paint(Graphics g,JComponent c){  AbstractButton b=(AbstractButton)c;  ButtonModel model=b.getModel();  Font f=c.getFont();  g.setFont(f);  FontMetrics fm=SwingUtilities2.getFontMetrics(c,g,f);  Insets i=c.getInsets();  size=b.getSize(size);  viewRect.x=i.left;  viewRect.y=i.top;  viewRect.width=size.width - (i.right + viewRect.x);  viewRect.height=size.height - (i.bottom + viewRect.y);  iconRect.x=iconRect.y=iconRect.width=iconRect.height=0;  textRect.x=textRect.y=textRect.width=textRect.height=0;  Icon altIcon=b.getIcon();  Icon selectedIcon=null;  Icon disabledIcon=null;  String text=SwingUtilities.layoutCompoundLabel(c,fm,b.getText(),altIcon != null ? altIcon : getDefaultIcon(),b.getVerticalAlignment(),b.getHorizontalAlignment(),b.getVerticalTextPosition(),b.getHorizontalTextPosition(),viewRect,iconRect,textRect,b.getText() == null ? 0 : b.getIconTextGap());  if (c.isOpaque()) {    g.setColor(b.getBackground());    g.fillRect(0,0,size.width,size.height);  }  if (altIcon != null) {    if (!model.isEnabled()) {      if (model.isSelected()) {        altIcon=b.getDisabledSelectedIcon();      } else {        altIcon=b.getDisabledIcon();      }    } else     if (model.isPressed() && model.isArmed()) {      altIcon=b.getPressedIcon();      if (altIcon == null) {        altIcon=b.getSelectedIcon();      }    } else     if (model.isSelected()) {      if (b.isRolloverEnabled() && model.isRollover()) {        altIcon=b.getRolloverSelectedIcon();        if (altIcon == null) {          altIcon=b.getSelectedIcon();        }      } else {        altIcon=b.getSelectedIcon();      }    } else     if (b.isRolloverEnabled() && model.isRollover()) {      altIcon=b.getRolloverIcon();    }    if (altIcon == null) {      altIcon=b.getIcon();    }    altIcon.paintIcon(c,g,iconRect.x,iconRect.y);  } else {    getDefaultIcon().paintIcon(c,g,iconRect.x,iconRect.y);  }  if (text != null) {    View v=(View)c.getClientProperty(BasicHTML.propertyKey);    if (v != null) {      v.paint(g,textRect);    } else {      paintText(g,b,textRect,text);    }    if (b.hasFocus() && b.isFocusPainted() && textRect.width > 0 && textRect.height > 0) {      paintFocus(g,textRect,size);    }  }}  }
class C{  @Override public void onNewIntent(final Intent intent){  delegate.onNewIntent(intent);}  }
class C{  public void handleBtnFilterRequest(RequestInvocationEvent event){  CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);  setPageSessionAttribute(ENTITY_TYPE,(String)menu.getValue());  super.handleBtnFilterRequest(event);}  }
class C{  public static boolean logout(String sessionID,HttpServletRequest request,HttpServletResponse response) throws SSOException {  return logout(AuthD.getSession(sessionID),SSOTokenManager.getInstance().createSSOToken(sessionID),request,response);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeclonenodefalse.class,args);}  }
class C{  private void logMsgsSetLockDownMode(LinkedList<LocalizableMessage> failedACIMsgs){  for (  LocalizableMessage msg : failedACIMsgs) {    logger.warn(WARN_ACI_SERVER_DECODE_FAILED,msg);  }  if (!inLockDownMode) {    setLockDownMode();  }}  }
class C{  public static void disableBackend(String backendID) throws DirectoryException {  enableBackend(backendID,FALSE_VALUE,ERR_TASK_CANNOT_DISABLE_BACKEND);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobPriority);}  }
class C{  private FSAuthContextResult decideAuthnContext(String authContextMinRef,String presentAuthContext){  FSUtils.debug.message("FSAuthnDecisionHandler::decideAuthnContext. Entered method");  if (authContextMinRef != null && idpAuthContextMap != null) {    FSIDPAuthenticationContextInfo presentAuthObj=(FSIDPAuthenticationContextInfo)idpAuthContextMap.get(presentAuthContext);    FSIDPAuthenticationContextInfo newAuthObj=(FSIDPAuthenticationContextInfo)idpAuthContextMap.get(authContextMinRef);    if (presentAuthObj != null && newAuthObj != null) {      if (presentAuthObj.getLevel() >= newAuthObj.getLevel()) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSAuthnDecisionHandler::" + "decideAuthnContext.Present Auth Level" + " higher than needed.");        }        return new FSAuthContextResult();      } else {        return getURLForAuthnContext(authContextMinRef);      }    } else {      FSUtils.debug.error("FSAuthnDecisionHandler::decideAuthnContext" + " Not Supported AuthContext");      return null;    }  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnDecisionHandler::decideAuthnContext." + " Method called with authContextMinRef null");    }    return null;  }}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public static UICommand createCommandButton(final String value){  final UICommand cmd=(UICommand)JSFComponentFactory.createComponent(CommandButton.COMPONENT_TYPE);  cmd.setValueExpression(TagAttributeConstants.VALUE,JSFComponentFactory.createLabelValueExpression(value));  return cmd;}  }
class C{  public char current(){  if (count != 0 && pos < offset + count) {    return array[pos];  }  return DONE;}  }
class C{  public static String defaultPCCreateDuringOrgConfig(){  initialize();  return (defaultPCCreateDuringOrgConfig);}  }
class C{  public PropertyValuePrinter(SizeUnit sizeUnit,DurationUnit timeUnit,boolean isScriptFriendly){  this.pimpl=new MyPropertyValueVisitor(sizeUnit,timeUnit,isScriptFriendly);}  }
class C{  @Override public LocalDate date(Era era,int yearOfEra,int month,int dayOfMonth){  return date(prolepticYear(era,yearOfEra),month,dayOfMonth);}  }
class C{  public synchronized void reset() throws IOException {  in.reset();  nread=size - in.available();  monitor.setProgress(nread);}  }
class C{  public boolean canAddMember(String realmName,String idType,String containerIDType) throws AMConsoleException {  boolean can=false;  try {    IdType type=IdUtils.getType(idType);    Set canAdd=type.canAddMembers();    IdType ctype=IdUtils.getType(containerIDType);    can=canAdd.contains(ctype);  } catch (  IdRepoException e) {    debug.warning("EntitiesModelImpl.canAddMember",e);    throw new AMConsoleException(getErrorString(e));  }  return can;}  }
class C{  private static byte[] readFileBytes(File file) throws IOException {  FileInputStream fis=new FileInputStream(file);  return readInputStreamBytes(fis,true);}  }
class C{  public void execute(String[] args){  int configArg=1;  if (args.length < 2) {    System.out.println(rb.getString("usage"));    System.exit(-1);  }  for (int i=0; i < args.length; i++) {    if ((i < args.length - 1) && ("--file".equals(args[i]) || "--f".equals(args[i]))) {      configArg=i + 1;    } else     if (args[i].equals("--acceptLicense")) {      acceptLicense=true;    }  }  Properties config=new Properties();  FileInputStream fis=null;  try {    fis=new FileInputStream(args[configArg]);    config.load(fis);  } catch (  IOException ex) {    System.out.println(rb.getString("errorConfig"));    System.exit(-1);  } finally {    if (fis != null) {      try {        fis.close();      } catch (      IOException ex) {        System.out.println(rb.getString("errorConfig"));        System.exit(-1);      }    }  }  String openAmURL=configure(config);  try {    licensePresenter.presentLicenses(acceptLicense);  } catch (  LicenseRejectedException e) {    System.out.println(licensePresenter.getNotice());    System.exit(-1);  }  StatusChecker sc=new StatusChecker(openAmURL,URI_LOCATION);  Thread readProgressThread=new Thread(sc);  readProgressThread.start();  boolean success=getRequestToServer(readProgressThread,openAmURL);  if (success) {    System.exit(0);  } else {    System.exit(-1);  }}  }
class C{  public void removeRelationType(String relationTypeName) throws RelationServiceNotRegisteredException, IllegalArgumentException, RelationTypeNotFoundException {  isActive();  if (relationTypeName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"removeRelationType",relationTypeName);  RelationType relType=getRelationType(relationTypeName);  List<String> relIdList=null;synchronized (myRelType2RelIdsMap) {    List<String> relIdList1=myRelType2RelIdsMap.get(relationTypeName);    if (relIdList1 != null) {      relIdList=new ArrayList<String>(relIdList1);    }  }synchronized (myRelType2ObjMap) {    myRelType2ObjMap.remove(relationTypeName);  }synchronized (myRelType2RelIdsMap) {    myRelType2RelIdsMap.remove(relationTypeName);  }  if (relIdList != null) {    for (    String currRelId : relIdList) {      try {        removeRelation(currRelId);      } catch (      RelationNotFoundException exc1) {        throw new RuntimeException(exc1.getMessage());      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"removeRelationType");  return;}  }
class C{  public List(int rows,boolean multipleMode) throws HeadlessException {  GraphicsEnvironment.checkHeadless();  this.rows=(rows != 0) ? rows : DEFAULT_VISIBLE_ROWS;  this.multipleMode=multipleMode;}  }
class C{  ForkJoinWorkerThread(ForkJoinPool pool,ThreadGroup threadGroup,AccessControlContext acc){  super(threadGroup,null,"aForkJoinWorkerThread");  U.putOrderedObject(this,INHERITEDACCESSCONTROLCONTEXT,acc);  eraseThreadLocals();  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  @Override public boolean rotateFile(RotatableLogFile writer){  long currInterval=TimeThread.getTime() - writer.getLastRotationTime().getTimeInMillis();  return currInterval > timeInterval;}  }
class C{  public boolean canRedo(){  return !isInProgress() && super.canRedo();}  }
class C{  private boolean expectVlvResponse(){  Boolean expected=Boolean.FALSE;  try {    expected=(Boolean)get(EXPECT_VLV_RESPONSE);  } catch (  Exception e) {  }  return expected == null ? false : expected.booleanValue();}  }
class C{  private static Version[] buildVersions(){  return new Version[]{new Version(1,10,10,8,8,new ECBlocks(5,new ECB(1,3))),new Version(2,12,12,10,10,new ECBlocks(7,new ECB(1,5))),new Version(3,14,14,12,12,new ECBlocks(10,new ECB(1,8))),new Version(4,16,16,14,14,new ECBlocks(12,new ECB(1,12))),new Version(5,18,18,16,16,new ECBlocks(14,new ECB(1,18))),new Version(6,20,20,18,18,new ECBlocks(18,new ECB(1,22))),new Version(7,22,22,20,20,new ECBlocks(20,new ECB(1,30))),new Version(8,24,24,22,22,new ECBlocks(24,new ECB(1,36))),new Version(9,26,26,24,24,new ECBlocks(28,new ECB(1,44))),new Version(10,32,32,14,14,new ECBlocks(36,new ECB(1,62))),new Version(11,36,36,16,16,new ECBlocks(42,new ECB(1,86))),new Version(12,40,40,18,18,new ECBlocks(48,new ECB(1,114))),new Version(13,44,44,20,20,new ECBlocks(56,new ECB(1,144))),new Version(14,48,48,22,22,new ECBlocks(68,new ECB(1,174))),new Version(15,52,52,24,24,new ECBlocks(42,new ECB(2,102))),new Version(16,64,64,14,14,new ECBlocks(56,new ECB(2,140))),new Version(17,72,72,16,16,new ECBlocks(36,new ECB(4,92))),new Version(18,80,80,18,18,new ECBlocks(48,new ECB(4,114))),new Version(19,88,88,20,20,new ECBlocks(56,new ECB(4,144))),new Version(20,96,96,22,22,new ECBlocks(68,new ECB(4,174))),new Version(21,104,104,24,24,new ECBlocks(56,new ECB(6,136))),new Version(22,120,120,18,18,new ECBlocks(68,new ECB(6,175))),new Version(23,132,132,20,20,new ECBlocks(62,new ECB(8,163))),new Version(24,144,144,22,22,new ECBlocks(62,new ECB(8,156),new ECB(2,155))),new Version(25,8,18,6,16,new ECBlocks(7,new ECB(1,5))),new Version(26,8,32,6,14,new ECBlocks(11,new ECB(1,10))),new Version(27,12,26,10,24,new ECBlocks(14,new ECB(1,16))),new Version(28,12,36,10,16,new ECBlocks(18,new ECB(1,22))),new Version(29,16,36,14,16,new ECBlocks(24,new ECB(1,32))),new Version(30,16,48,14,22,new ECBlocks(28,new ECB(1,49)))};}  }
class C{  public static boolean isValidFilter(String filter){  try {    getFilterFromString(filter);  } catch (  IllegalArgumentException e) {    return false;  }  return true;}  }
class C{  public void testProtectedFieldAccess(){  Class fieldClass=new Support_Field().getClass();  String fieldName=null;  Field objectField=null;  Field booleanField=null;  Field byteField=null;  Field charField=null;  Field shortField=null;  Field intField=null;  Field longField=null;  Field floatField=null;  Field doubleField=null;  try {    fieldName="objectField";    objectField=fieldClass.getDeclaredField(fieldName);    fieldName="booleanField";    booleanField=fieldClass.getDeclaredField(fieldName);    fieldName="byteField";    byteField=fieldClass.getDeclaredField(fieldName);    fieldName="charField";    charField=fieldClass.getDeclaredField(fieldName);    fieldName="shortField";    shortField=fieldClass.getDeclaredField(fieldName);    fieldName="intField";    intField=fieldClass.getDeclaredField(fieldName);    fieldName="longField";    longField=fieldClass.getDeclaredField(fieldName);    fieldName="floatField";    floatField=fieldClass.getDeclaredField(fieldName);    fieldName="doubleField";    doubleField=fieldClass.getDeclaredField(fieldName);  } catch (  NoSuchFieldException e) {    fail("missing field " + fieldName + " in test support class "+ fieldClass.getName());  }  Support_Field parentClass=new Support_Field();  SupportSubClass subclass=new SupportSubClass();  SupportSubClass otherSubclass=new SupportSubClass();  Object plainObject=new Object();  Class illegalAccessExceptionClass=new IllegalAccessException().getClass();  Class illegalArgumentExceptionClass=new IllegalArgumentException().getClass();  char types[]={'L','B','S','C','I','J','F','D'};  Field fields[]={objectField,byteField,shortField,charField,intField,longField,floatField,doubleField};  Object values[]={new Byte((byte)1),new Byte((byte)1),new Short((short)1),new Character((char)1),new Integer(1),new Long(1),new Float(1),new Double(1)};  for (int i=0; i < types.length; i++) {    char type=types[i];    Object value=values[i];    for (int j=i; j < fields.length; j++) {      Field field=fields[j];      fieldName=field.getName();      if (field == charField && type != 'C') {        subclass.setField(type,subclass,field,illegalArgumentExceptionClass,value);      } else {        subclass.setField(type,subclass,field,null,value);        subclass.setField(type,otherSubclass,field,null,value);        subclass.setField(type,parentClass,field,illegalAccessExceptionClass,value);        subclass.setField(type,plainObject,field,illegalAccessExceptionClass,value);      }    }    for (int j=0; j < i; j++) {      Field field=fields[j];      fieldName=field.getName();      subclass.setField(type,subclass,field,illegalArgumentExceptionClass,value);    }  }  Boolean booleanValue=Boolean.TRUE;  subclass.setField('Z',subclass,booleanField,null,booleanValue);  subclass.setField('Z',otherSubclass,booleanField,null,booleanValue);  subclass.setField('Z',parentClass,booleanField,illegalAccessExceptionClass,booleanValue);  subclass.setField('Z',plainObject,booleanField,illegalAccessExceptionClass,booleanValue);  for (int j=0; j < fields.length; j++) {    Field listedField=fields[j];    fieldName=listedField.getName();    subclass.setField('Z',subclass,listedField,illegalArgumentExceptionClass,booleanValue);  }  for (int i=0; i < types.length; i++) {    char type=types[i];    Object value=values[i];    subclass.setField(type,subclass,booleanField,illegalArgumentExceptionClass,value);  }  char newTypes[]=new char[]{'B','S','C','I','J','F','D','L'};  Field newFields[]={byteField,shortField,charField,intField,longField,floatField,doubleField,objectField};  fields=newFields;  types=newTypes;  for (int i=0; i < types.length; i++) {    char type=types[i];    for (int j=0; j <= i; j++) {      Field field=fields[j];      fieldName=field.getName();      if (type == 'C' && field != charField) {        subclass.getField(type,subclass,field,illegalArgumentExceptionClass);      } else {        subclass.getField(type,subclass,field,null);        subclass.getField(type,otherSubclass,field,null);        subclass.getField(type,parentClass,field,illegalAccessExceptionClass);        subclass.getField(type,plainObject,field,illegalAccessExceptionClass);      }    }    for (int j=i + 1; j < fields.length; j++) {      Field field=fields[j];      fieldName=field.getName();      subclass.getField(type,subclass,field,illegalArgumentExceptionClass);    }  }  subclass.getField('Z',subclass,booleanField,null);  subclass.getField('Z',otherSubclass,booleanField,null);  subclass.getField('Z',parentClass,booleanField,illegalAccessExceptionClass);  subclass.getField('Z',plainObject,booleanField,illegalAccessExceptionClass);  for (int j=0; j < fields.length; j++) {    Field listedField=fields[j];    fieldName=listedField.getName();    subclass.getField('Z',subclass,listedField,illegalArgumentExceptionClass);  }  for (int i=0; i < types.length - 1; i++) {    char type=types[i];    subclass.getField(type,subclass,booleanField,illegalArgumentExceptionClass);  }  Object res=subclass.getField('L',subclass,booleanField,null);  assertTrue("unexpected object " + res,res instanceof Boolean);}  }
class C{  @Override public boolean isExists(SSOToken token,IdType type,String name) throws IdRepoException {  if (DEBUG.messageEnabled()) {    DEBUG.message("isExists invoked");  }  try {    getDN(type,name);  } catch (  IdentityNotFoundException infe) {    return false;  }  return true;}  }
class C{  public CommandManager(String[] argv){  int exitCode=0;  try {    init(argv);    requestQueue.add(new CLIRequest(null,argv));    serviceRequestQueue();  } catch (  CLIException e) {    if (!importSvcCmd) {      Debugger.error(this,"CommandManager.<init>",e);    }    String remainReq=null;    if (!requestQueue.isEmpty()) {      String[] arg={Integer.toString(requestQueue.size())};      remainReq=MessageFormat.format(rbMessages.getString("remaining-unprocessed-requests"),(Object[])arg);    }    String msg=e.getL10NMessage(getLocale());    if (msg == null) {      msg=e.getMessage();      if (msg == null) {        msg="An unknown error has occurred. Please check the debug logs.";      }    }    if (outputWriter != null) {      outputWriter.printlnError(msg);      if (remainReq != null) {        outputWriter.printlnError(remainReq);      }    } else {      System.out.println(msg);      if (remainReq != null) {        System.out.println(remainReq);      }    }    printUsageOnException(e);    exitCode=e.getExitCode();  } finally {    destroySSOTokens();    ShutdownManager shutdownMan=com.sun.identity.common.ShutdownManager.getInstance();    shutdownMan.shutdown();  }  System.exit(exitCode);}  }
class C{  @Override public int available(){  long avail=size - position;  if (avail <= 0) {    return 0;  } else   if (avail > Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  } else {    return (int)avail;  }}  }
class C{  public ExportException(String s,Exception ex){  super(s,ex);}  }
class C{  public boolean isAllDataValid(){  for (  final JKTableColumn col : this.tableColumns) {    final int lastRow=getRowCount() - 1;    if (col.isVisible() && col.isRequired()) {      final Object colValue=getValueAt(lastRow,col.getIndex());      if (colValue == null || colValue.toString().equals("")) {        return false;      }    }  }  return true;}  }
class C{  public ToTextSAXHandler(ContentHandler handler,String encoding){  super(handler,encoding);}  }
class C{  public UnknownGroupException(String s){  super(s);}  }
class C{  public ProductService initializePersistence(Handler<AsyncResult<Void>> resultHandler){  delegate.initializePersistence(resultHandler);  return this;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  List secondaryURLs=(List)rc.getOption(IArgument.SECONDARY_URLS);  String[] params={siteName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_SITE_FAILOVER_URLS",params);    if (SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      SiteConfiguration.removeSiteSecondaryURLs(adminSSOToken,siteName,secondaryURLs);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-site-secondary-urls-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("remove-site-secondary-urls-no-exists"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_SITE_FAILOVER_URLS",params);  } catch (  SSOException e) {    String[] args={siteName,e.getMessage()};    debugError("RemoveSiteFailoverURLs.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SITE_FAILOVER_URLS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,e.getMessage()};    debugError("RemoveSiteFailoverURLs.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_SITE_FAILOVER_URLS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void allow(){  result=Result.ALLOWED;  message="";}  }
class C{  static Pattern compileWildCardPattern(final String wildCardPattern){  final char slashStarStar='\u0000';  final char starStar='\u0001';  final char star='\u0002';  final String normalizedPattern=new JsonPointer(wildCardPattern).toString().replaceAll("/\\*\\*","" + slashStarStar).replaceAll("\\*\\*","" + starStar).replaceAll("\\*","" + star);  final StringBuilder builder=new StringBuilder();  int elementStart=0;  for (int i=0; i < normalizedPattern.length(); i++) {    final char c=normalizedPattern.charAt(i);    if (c <= star) {      if (elementStart < i) {        builder.append(Pattern.quote(normalizedPattern.substring(elementStart,i)));      }switch (c) {case slashStarStar:        builder.append("(/.*)?");      break;case starStar:    builder.append(".*");  break;case star:builder.append("[^/]*");break;}elementStart=i + 1;}}if (elementStart < normalizedPattern.length()) {builder.append(Pattern.quote(normalizedPattern.substring(elementStart)));}return Pattern.compile(builder.toString());}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public QueryResults(Object results,String strError){  this.results=results;  this.strError=strError;}  }
class C{  private boolean checkNonBlockingWrite(){  boolean nonBlocking=!ob.isBlocking();  if (nonBlocking && !ob.isReady()) {    throw new IllegalStateException(sm.getString("coyoteOutputStream.nbNotready"));  }  return nonBlocking;}  }
class C{  public FlatteningPathIterator(PathIterator src,double flatness,int limit){  if (flatness < 0.0) {    throw new IllegalArgumentException("flatness must be >= 0");  }  if (limit < 0) {    throw new IllegalArgumentException("limit must be >= 0");  }  this.src=src;  this.squareflat=flatness * flatness;  this.limit=limit;  this.levels=new int[limit + 1];  next(false);}  }
class C{  public boolean hasNewHeader(int position,boolean isReverseLayout){  if (indexOutOfBounds(position)) {    return false;  }  long headerId=mAdapter.getHeaderId(position);  if (headerId < 0) {    return false;  }  long nextItemHeaderId=-1;  int nextItemPosition=position + (isReverseLayout ? 1 : -1);  if (!indexOutOfBounds(nextItemPosition)) {    nextItemHeaderId=mAdapter.getHeaderId(nextItemPosition);  }  int firstItemPosition=isReverseLayout ? mAdapter.getItemCount() - 1 : 0;  return position == firstItemPosition || headerId != nextItemHeaderId;}  }
class C{  @SuppressWarnings("UnusedDeclaration") public static String downloadString(String url) throws MalformedURLException {  return downloadString(new URL(url));}  }
class C{  @Override public String toString(){  if (string != null) {    return string;  }  StringBuilder result=new StringBuilder();  if (scheme != null) {    result.append(scheme);    result.append(':');  }  if (opaque) {    result.append(schemeSpecificPart);  } else {    if (authority != null) {      result.append("//");      result.append(authority);    }    if (path != null) {      result.append(path);    }    if (query != null) {      result.append('?');      result.append(query);    }  }  if (fragment != null) {    result.append('#');    result.append(fragment);  }  string=result.toString();  return string;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String groupName=getStringOptionValue(IArgument.AGENT_GROUP_NAME);  String agentType=getStringOptionValue(IArgument.AGENT_TYPE);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  Map attributeValues=Collections.EMPTY_MAP;  if ((datafile != null) || (attrValues != null)) {    attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  }  String serverURL=getStringOptionValue(IArgument.SERVER_URL);  boolean webJ2EEAgent=agentType.equals("WebAgent") || agentType.equals("J2EEAgent");  if (!webJ2EEAgent && (serverURL != null)) {    throw new CLIException(getResourceString("does-not-support-server-url"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  String[] params={realm,agentType,groupName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_AGENT_GROUP",params);  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set set=amir.getAllowedIdOperations(IdType.AGENTGROUP);    if (!set.contains(IdOperation.CREATE)) {      String[] args={realm};      throw new CLIException(MessageFormat.format(getResourceString("does-not-support-agent-group-creation"),(Object[])args),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    if (webJ2EEAgent) {      FQDNUrl fqdnServerURL=null;      try {        if (serverURL != null) {          fqdnServerURL=new FQDNUrl(serverURL);        }      } catch (      MalformedURLException e) {        throw new CLIException(getResourceString("server-url-invalid"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);      }      if (fqdnServerURL != null) {        Map map=AgentConfiguration.getDefaultValues(agentType,true);        map.putAll(attributeValues);        AgentConfiguration.tagswapAttributeValues(map,agentType,fqdnServerURL,null);        AgentConfiguration.createAgentGroup(adminSSOToken,realm,groupName,agentType,map);      } else {        AgentConfiguration.createAgentGroup(adminSSOToken,realm,groupName,agentType,attributeValues);      }    } else {      AgentConfiguration.createAgentGroup(adminSSOToken,realm,groupName,agentType,attributeValues);    }    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("create-agent-group-succeeded"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_CREATE_AGENT_GROUP",params);  } catch (  ConfigurationException e) {    String[] args={realm,agentType,groupName,e.getMessage()};    debugError("CreateAgentGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,agentType,groupName,e.getMessage()};    debugError("CreateAgentGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IdRepoException e) {    String[] args={realm,agentType,groupName,e.getMessage()};    debugError("CreateAgentGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,agentType,groupName,e.getMessage()};    debugError("CreateAgentGroup.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_AGENT_GROUP",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private static LDAPFilter decodeExtensibleMatchFilter(String filterString,int startPos,int equalPos,int endPos) throws LDAPException {  String attributeType=null;  boolean dnAttributes=false;  String matchingRuleID=null;  String lowerLeftStr=toLowerCase(filterString.substring(startPos,equalPos));  if (filterString.charAt(startPos) == ':') {    if (lowerLeftStr.startsWith(":dn:")) {      dnAttributes=true;      if (startPos + 4 < equalPos - 1) {        matchingRuleID=filterString.substring(startPos + 4,equalPos - 1);      }    } else {      matchingRuleID=filterString.substring(startPos + 1,equalPos - 1);    }  } else {    int colonPos=filterString.indexOf(':',startPos);    if (colonPos < 0) {      LocalizableMessage message=ERR_LDAP_FILTER_EXTENSIBLE_MATCH_NO_COLON.get(filterString,startPos);      throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);    }    attributeType=filterString.substring(startPos,colonPos);    if (colonPos < equalPos - 1) {      if (lowerLeftStr.startsWith(":dn:",colonPos - startPos)) {        dnAttributes=true;        if (colonPos + 4 < equalPos - 1) {          matchingRuleID=filterString.substring(colonPos + 4,equalPos - 1);        }      } else {        matchingRuleID=filterString.substring(colonPos + 1,equalPos - 1);      }    }  }  byte[] valueBytes=getBytes(filterString.substring(equalPos + 1,endPos));  boolean hasEscape=false;  for (  byte valueByte : valueBytes) {    if (valueByte == 0x5C) {      hasEscape=true;      break;    }  }  ByteString value;  if (hasEscape) {    ByteStringBuilder valueBuffer=new ByteStringBuilder(valueBytes.length);    for (int i=0; i < valueBytes.length; i++) {      if (valueBytes[i] == 0x5C) {        if (i + 2 >= valueBytes.length) {          LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);          throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);        }        byte byteValue=0;switch (valueBytes[++i]) {case 0x30:          break;case 0x31:        byteValue=(byte)0x10;      break;case 0x32:    byteValue=(byte)0x20;  break;case 0x33:byteValue=(byte)0x30;break;case 0x34:byteValue=(byte)0x40;break;case 0x35:byteValue=(byte)0x50;break;case 0x36:byteValue=(byte)0x60;break;case 0x37:byteValue=(byte)0x70;break;case 0x38:byteValue=(byte)0x80;break;case 0x39:byteValue=(byte)0x90;break;case 0x41:case 0x61:byteValue=(byte)0xA0;break;case 0x42:case 0x62:byteValue=(byte)0xB0;break;case 0x43:case 0x63:byteValue=(byte)0xC0;break;case 0x44:case 0x64:byteValue=(byte)0xD0;break;case 0x45:case 0x65:byteValue=(byte)0xE0;break;case 0x46:case 0x66:byteValue=(byte)0xF0;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}switch (valueBytes[++i]) {case 0x30:break;case 0x31:byteValue|=(byte)0x01;break;case 0x32:byteValue|=(byte)0x02;break;case 0x33:byteValue|=(byte)0x03;break;case 0x34:byteValue|=(byte)0x04;break;case 0x35:byteValue|=(byte)0x05;break;case 0x36:byteValue|=(byte)0x06;break;case 0x37:byteValue|=(byte)0x07;break;case 0x38:byteValue|=(byte)0x08;break;case 0x39:byteValue|=(byte)0x09;break;case 0x41:case 0x61:byteValue|=(byte)0x0A;break;case 0x42:case 0x62:byteValue|=(byte)0x0B;break;case 0x43:case 0x63:byteValue|=(byte)0x0C;break;case 0x44:case 0x64:byteValue|=(byte)0x0D;break;case 0x45:case 0x65:byteValue|=(byte)0x0E;break;case 0x46:case 0x66:byteValue|=(byte)0x0F;break;default :LocalizableMessage message=ERR_LDAP_FILTER_INVALID_ESCAPED_BYTE.get(filterString,equalPos + i + 1);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}valueBuffer.appendByte(byteValue);} else {valueBuffer.appendByte(valueBytes[i]);}}value=valueBuffer.toByteString();} else {value=ByteString.wrap(valueBytes);}if (attributeType == null && matchingRuleID == null) {LocalizableMessage message=ERR_LDAP_FILTER_EXTENSIBLE_MATCH_NO_AD_OR_MR.get(filterString,startPos);throw new LDAPException(LDAPResultCode.PROTOCOL_ERROR,message);}return new LDAPFilter(FilterType.EXTENSIBLE_MATCH,null,null,attributeType,value,null,null,null,matchingRuleID,dnAttributes);}  }
class C{  public void purgeConflictsHistorical(PurgeConflictsHistoricalTask task,long endDate) throws DirectoryException {  logger.trace("[PURGE] purgeConflictsHistorical " + "on domain: " + getBaseDN() + "endDate:"+ new Date(endDate)+ "lastCSNPurgedFromHist: "+ lastCSNPurgedFromHist.toStringUI());  String filter="(" + HISTORICAL_ATTRIBUTE_NAME + ">=dummy:"+ lastCSNPurgedFromHist+ ")";  int count=0;  boolean finished=false;  ByteString pagingCookie=null;  while (!finished) {    if (task != null) {      task.setProgressStats(lastCSNPurgedFromHist,count);    }    finished=true;    SearchRequest request=Requests.newSearchRequest(getBaseDN(),SearchScope.WHOLE_SUBTREE,filter).addAttribute(USER_AND_REPL_OPERATIONAL_ATTRS).addControl(new PagedResultsControl(false,ConfigConstants.DEFAULT_SIZE_LIMIT,pagingCookie)).setSizeLimit(ConfigConstants.DEFAULT_SIZE_LIMIT + 1);    InternalSearchOperation searchOp=conn.processSearch(request);    for (    Control c : searchOp.getResponseControls()) {      if (c.getOID().equals(OID_PAGED_RESULTS_CONTROL)) {        ByteString newPagingCookie=((PagedResultsControl)c).getCookie();        if (newPagingCookie != null && newPagingCookie.length() > 0 && !newPagingCookie.equals(pagingCookie)) {          pagingCookie=newPagingCookie;          finished=false;        }      }    }    for (    SearchResultEntry entry : searchOp.getSearchEntries()) {      long maxTimeToRun=endDate - TimeThread.getTime();      if (maxTimeToRun < 0) {        throw new DirectoryException(ResultCode.ADMIN_LIMIT_EXCEEDED,LocalizableMessage.raw(" end date reached"));      }      EntryHistorical entryHist=EntryHistorical.newInstanceFromEntry(entry);      CSN latestOldCSN=entryHist.getOldestCSN();      entryHist.setPurgeDelay(getHistoricalPurgeDelay());      Attribute attr=entryHist.encodeAndPurge();      if (entryHist.getLastPurgedValuesCount() > 0) {        lastCSNPurgedFromHist=latestOldCSN;        List<Modification> mods=newArrayList(new Modification(ModificationType.REPLACE,attr));        count+=entryHist.getLastPurgedValuesCount();        ModifyOperation newOp=new ModifyOperationBasis(conn,nextOperationID(),nextMessageID(),new ArrayList<Control>(0),entry.getName(),mods);        runAsSynchronizedOperation(newOp);        if (newOp.getResultCode() != ResultCode.SUCCESS) {          logger.error(ERR_CANNOT_ADD_CONFLICT_ATTRIBUTE,newOp,newOp.getResultCode());        } else         if (task != null) {          task.setProgressStats(lastCSNPurgedFromHist,count);        }      }    }  }  lastCSNPurgedFromHist=new CSN(0,0,0);}  }
class C{  public static double lineDistance(Geometry line,String units) throws TurfException {  double d;  if (line.getType().equals("LineString")) {    List<Position> coordinates=(List<Position>)line.getCoordinates();    return length(coordinates,units);  } else   if (line.getType().equals("Polygon") || line.getType().equals("MultiLineString")) {    List<List<Position>> coordinates=(List<List<Position>>)line.getCoordinates();    d=0;    for (int i=0; i < coordinates.size(); i++) {      d+=length(coordinates.get(i),units);    }    return d;  } else   if (line.getType().equals("MultiPolygon")) {    List<List<List<Position>>> coordinates=(List<List<List<Position>>>)line.getCoordinates();    d=0;    for (int i=0; i < coordinates.size(); i++) {      for (int j=0; j < coordinates.get(i).size(); j++) {        d+=length(coordinates.get(i).get(j),units);      }    }    return d;  } else {    throw new TurfException("Input must be a LineString, MultiLineString, " + "Polygon, or MultiPolygon Feature or Geometry (or a FeatureCollection " + "containing only those types)");  }}  }
class C{  public boolean hasNext(String pattern){  return hasNext(patternCache.forName(pattern));}  }
class C{  protected static boolean compare(Vector<FieldContainer> vector1,Vector<FieldContainer> vector2){  return vector1.size() == vector2.size() && vector1.containsAll(vector2);}  }
class C{  public void invoke(String invokeMethod){  invoke(invokeMethod,null,null);}  }
class C{  public Object object(){  if (null == m_obj)   setObject(new Boolean(m_val));  return m_obj;}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public boolean isProtected(){  return Modifier.isProtected(flags);}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("quad iterator iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=(float)quad.getX1();    coords[1]=(float)quad.getY1();    type=SEG_MOVETO;  } else {    coords[0]=(float)quad.getCtrlX();    coords[1]=(float)quad.getCtrlY();    coords[2]=(float)quad.getX2();    coords[3]=(float)quad.getY2();    type=SEG_QUADTO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,index == 0 ? 1 : 2);  }  return type;}  }
class C{  @Override public void commence(HttpServletRequest request,HttpServletResponse response,AuthenticationException arg2) throws IOException, ServletException {  log.debug("Pre-authenticated entry point called. Rejecting access");  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,"Access Denied");}  }
class C{  private AdministrationServiceListener(){}  }
class C{  public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wchar",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_wchar(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected String tagSwap(String template,String tag,String value){  int valLen=value.length();  int tagLen=tag.length();  int idx=template.indexOf(tag);  while (idx != -1) {    template=template.substring(0,idx) + value + template.substring(idx + tagLen);    idx=template.indexOf(tag,idx + valLen);  }  return template;}  }
class C{  public Builder equalityMatchingRule(String equalityMatchingRuleOID){  this.equalityMatchingRuleOID=equalityMatchingRuleOID;  return this;}  }
class C{  private void updateIndexStats(EntryIDSet entryIDSet){  if (!entryIDSet.isDefined()) {    entryLimitExceededCount++;    multiReferenceCount++;  } else {    if (entryIDSet.size() > 1) {      multiReferenceCount++;    }    entryReferencesCount+=entryIDSet.size();    maxEntryPerValue=Math.max(maxEntryPerValue,entryIDSet.size());  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  DefaultFormatter formatter=(DefaultFormatter)super.clone();  formatter.navigationFilter=null;  formatter.documentFilter=null;  formatter.replaceHolder=null;  return formatter;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String bundleName=getStringOptionValue(IArgument.RESOURCE_BUNDLE_NAME);  String localeName=getStringOptionValue(IArgument.RESOURCE_BUNDLE_LOCALE);  try {    String[] params={bundleName,localeName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_RESOURCE_BUNDLE",params);    ISResourceBundle.deleteResourceBundle(adminSSOToken,bundleName,localeName);    IOutput outputWriter=getOutputWriter();    outputWriter.printlnMessage(getResourceString("resourcebundle-deleted"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_DELETE_RESOURCE_BUNDLE",params);  } catch (  SMSException e) {    String[] args={bundleName,localeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_DELETE_RESOURCE_BUNDLE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={bundleName,localeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_DELETE_RESOURCE_BUNDLE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public StatusCliArgumentParser(String mainClassName){  super(mainClassName,INFO_STATUS_CLI_USAGE_DESCRIPTION.get(),false);  setVersionHandler(new DirectoryServerVersionHandler());  setShortToolDescription(REF_SHORT_DESC_STATUS.get());}  }
class C{  public RestartTaskThread(LocalizableMessage shutdownMessage){  super("Restart Task Thread");  this.shutdownMessage=shutdownMessage;}  }
class C{  private void clearIndexToFirst(){  for (; ; ) {    for (Index<K,V> q=head; ; ) {      Index<K,V> r=q.right;      if (r != null && r.indexesDeletedNode() && !q.unlink(r))       break;      if ((q=q.down) == null) {        if (head.right == null)         tryReduceLevel();        return;      }    }  }}  }
class C{  public static String objectToKeyString(FSAccountFedInfoKey fedInfoKeyObject) throws FSAccountMgmtException {  StringBuffer attrValueSB=new StringBuffer(300);  String nameSpace=fedInfoKeyObject.getNameSpace();  if ((nameSpace == null) || (nameSpace.length() <= 0)) {    FSUtils.debug.error("FSAccountUtils.objectToKeyString():" + "Invalid Argument : nameSpace is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_NAME_SPACE,null);  }  String name=fedInfoKeyObject.getName();  if ((name == null) || (name.length() <= 0)) {    FSUtils.debug.error("FSAccountUtils.objectToKeyString():" + "Invalid Argument : name is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_NAME,null);  }  attrValueSB.append(FED_INFO_DELIM).append(nameSpace).append(FED_INFO_DELIM).append(name).append(FED_INFO_DELIM);  String fedKeyValue=attrValueSB.toString();  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAccountUtils.objectToKeyString(): Value: " + fedKeyValue);  }  return fedKeyValue;}  }
class C{  protected String[] findCGI(String pathInfo,String webAppRootDir,String contextPath,String servletPath,String cgiPathPrefix){  String path=null;  String name=null;  String scriptname=null;  if (webAppRootDir != null && webAppRootDir.lastIndexOf(File.separator) == (webAppRootDir.length() - 1)) {    webAppRootDir=webAppRootDir.substring(0,(webAppRootDir.length() - 1));  }  if (cgiPathPrefix != null) {    webAppRootDir=webAppRootDir + File.separator + cgiPathPrefix;  }  if (log.isDebugEnabled()) {    log.debug(sm.getString("cgiServlet.find.path",pathInfo,webAppRootDir));  }  File currentLocation=new File(webAppRootDir);  StringTokenizer dirWalker=new StringTokenizer(pathInfo,"/");  if (log.isDebugEnabled()) {    log.debug(sm.getString("cgiServlet.find.location",currentLocation.getAbsolutePath()));  }  StringBuilder cginameBuilder=new StringBuilder();  while (!currentLocation.isFile() && dirWalker.hasMoreElements()) {    String nextElement=(String)dirWalker.nextElement();    currentLocation=new File(currentLocation,nextElement);    cginameBuilder.append('/').append(nextElement);    if (log.isDebugEnabled()) {      log.debug(sm.getString("cgiServlet.find.location",currentLocation.getAbsolutePath()));    }  }  String cginame=cginameBuilder.toString();  if (!currentLocation.isFile()) {    return new String[]{null,null,null,null};  }  path=currentLocation.getAbsolutePath();  name=currentLocation.getName();  if (".".equals(contextPath)) {    scriptname=servletPath;  } else {    scriptname=contextPath + servletPath;  }  if (!servletPath.equals(cginame)) {    scriptname=scriptname + cginame;  }  if (log.isDebugEnabled()) {    log.debug(sm.getString("cgiServlet.find.found",name,path,scriptname,cginame));  }  return new String[]{path,scriptname,cginame,name};}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  List<String> appNames=(List)rc.getOption(PARAM_APPL_NAMES);  String[] param={realm};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_APPLICATIONS",param);  Subject adminSubject=getAdminSubject();  try {    ApplicationService applicationService=applicationServiceFactory.create(adminSubject,"/");    for (    String a : appNames) {      applicationService.deleteApplication(a);    }    IOutput writer=getOutputWriter();    writer.printlnMessage(MessageFormat.format(getResourceString("delete-applications-succeeded"),(Object[])param));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_APPLICATIONS",param);  } catch (  EntitlementException e) {    String[] params={realm,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_DELETE_APPLICATIONS",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  protected PdfPKCS7 coversWholeDocument() throws GeneralSecurityException {  PdfPKCS7 pkcs7=sgnUtil.verifySignature(signatureName,null);  if (sgnUtil.signatureCoversWholeDocument(signatureName)) {    LOGGER.info("The timestamp covers whole document.");  } else {    throw new VerificationException((Certificate)null,"Signature doesn't cover whole document.");  }  if (pkcs7.verify()) {    LOGGER.info("The signed document has not been modified.");    return pkcs7;  } else {    throw new VerificationException((Certificate)null,"The document was altered after the final signature was applied.");  }}  }
class C{  private boolean matchAddress(final byte[] remoteMask){  if (ruleType == RuleType.ALLWILDCARD) {    return true;  }  if (prefixMask == null) {    return false;  }  if (remoteMask.length != prefixMask.length) {    return false;  }  for (int i=0; i < prefixMask.length; i++) {    if (!wildCard.get(i) && (ruleMask[i] & prefixMask[i]) != (remoteMask[i] & prefixMask[i])) {      return false;    }  }  return true;}  }
class C{  public static void serverFailed(String serviceName){  if (serviceName.startsWith(validRemoteURL)) {    serverFailed=true;  } else {    remoteStubs.remove(serviceName);  }}  }
class C{  private static void deleteEmptySchemas(XMPNode tree){  for (Iterator it=tree.iterateChildren(); it.hasNext(); ) {    XMPNode schema=(XMPNode)it.next();    if (!schema.hasChildren()) {      it.remove();    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.IssuedTokenElement createIssuedTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.IssuedTokenElementImpl();}  }
class C{  private void resetSettings(){  sharedPreferences.edit().clear().commit();  sharedPreferences.edit().putBoolean(PREF_KEY_ACCEPTED_DISCAIMER,true);  sharedPreferences.edit().commit();  startActivity(new Intent(this,ActivitySettings.class));  finish();}  }
class C{  public void dragMouseMoved(DragSourceDragEvent dsde){}  }
class C{  private void genericPostOperation(PostOperationOperation operation,DN dn){  LDAPReplicationDomain domain=findDomain(dn,operation);  if (domain != null) {    domain.synchronize(operation);  }}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  public SetFailedException(Token token,Throwable e){  super(MessageFormat.format("Failed to set Token:\n" + "{0}",token),e);}  }
class C{  public void test_GetCurve(){  assertEquals("wrong elliptic curve",curve,ecps.getCurve());}  }
class C{  static String formatFlags(byte type,byte flags){  if (flags == 0)   return "";switch (type) {case TYPE_SETTINGS:case TYPE_PING:    return flags == FLAG_ACK ? "ACK" : BINARY[flags];case TYPE_PRIORITY:case TYPE_RST_STREAM:case TYPE_GOAWAY:case TYPE_WINDOW_UPDATE:  return BINARY[flags];}String result=flags < FLAGS.length ? FLAGS[flags] : BINARY[flags];if (type == TYPE_PUSH_PROMISE && (flags & FLAG_END_PUSH_PROMISE) != 0) {return result.replace("HEADERS","PUSH_PROMISE");} else if (type == TYPE_DATA && (flags & FLAG_COMPRESSED) != 0) {return result.replace("PRIORITY","COMPRESSED");}return result;}  }
class C{  @Override public void begin(String namespace,String name,Attributes attributes) throws Exception {  Service svc=(Service)digester.peek();  Executor ex=null;  if (attributes.getValue("executor") != null) {    ex=svc.getExecutor(attributes.getValue("executor"));  }  Connector con=new Connector(attributes.getValue("protocol"));  if (ex != null) {    setExecutor(con,ex);  }  String sslImplementationName=attributes.getValue("sslImplementationName");  if (sslImplementationName != null) {    setSSLImplementationName(con,sslImplementationName);  }  digester.push(con);}  }
class C{  private void ensureMinIdle(final K key) throws Exception {  final ObjectDeque<T> objectDeque=poolMap.get(key);  final int deficit=calculateDeficit(objectDeque);  for (int i=0; i < deficit && calculateDeficit(objectDeque) > 0; i++) {    addObject(key);  }}  }
class C{  static String keyToDNString(ByteString key){  return key.toByteString().toASCIIString();}  }
class C{  public boolean equals(Object obj){  if (obj instanceof VMID) {    VMID vmid=(VMID)obj;    if (!uid.equals(vmid.uid))     return false;    if ((addr == null) ^ (vmid.addr == null))     return false;    if (addr != null) {      if (addr.length != vmid.addr.length)       return false;      for (int i=0; i < addr.length; ++i)       if (addr[i] != vmid.addr[i])       return false;    }    return true;  } else {    return false;  }}  }
class C{  public static String printDouble(double val){  if (theConverter == null)   initConverter();  return theConverter.printDouble(val);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  System.out.println("sip provider: " + sipProvider);  try {    System.out.println("shootme: got an ACK " + requestEvent.getRequest());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int length;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  child=employeeList.item(0);  childName=child.getNodeName();  length=(int)employeeList.getLength();  if (equals(6,length)) {    assertEqualsIgnoreCase("firstChildNoWhitespace","employeeId",childName);  } else {    assertEqualsIgnoreCase("firstChildWithWhitespace","#text",childName);  }}  }
class C{  public void verifyCS(){  try {    SODFile sod=null;    try {      sod=lds.getSODFile();    } catch (    IOException ioe) {      LOGGER.severe("Could not read EF.SOd");    }    List<Certificate> chain=new ArrayList<Certificate>();    if (sod == null) {      verificationStatus.setCS(VerificationStatus.Verdict.FAILED,ReasonCode.COULD_NOT_BUILD_CHAIN_FAILURE,chain);      return;    }    X509Certificate docSigningCertificate=null;    X500Principal sodIssuer=null;    BigInteger sodSerialNumber=null;    try {      sodIssuer=sod.getIssuerX500Principal();      sodSerialNumber=sod.getSerialNumber();      docSigningCertificate=sod.getDocSigningCertificate();    } catch (    Exception e) {      LOGGER.warning("Error getting document signing certificate: " + e.getMessage());    }    if (docSigningCertificate != null) {      chain.add(docSigningCertificate);    } else {      LOGGER.warning("Error getting document signing certificate from EF.SOd");    }    List<CertStore> cscaStores=trustManager.getCSCAStores();    if (cscaStores == null || cscaStores.size() <= 0) {      LOGGER.warning("No CSCA certificate stores found.");      verificationStatus.setCS(VerificationStatus.Verdict.FAILED,ReasonCode.NO_CSCA_TRUST_ANCHORS_FOUND_FAILURE,chain);    }    Set<TrustAnchor> cscaTrustAnchors=trustManager.getCSCAAnchors();    if (cscaTrustAnchors == null || cscaTrustAnchors.size() <= 0) {      LOGGER.warning("No CSCA trust anchors found.");      verificationStatus.setCS(VerificationStatus.Verdict.FAILED,ReasonCode.NO_CSCA_TRUST_ANCHORS_FOUND_FAILURE,chain);    }    if (docSigningCertificate != null) {      X500Principal docIssuer=docSigningCertificate.getIssuerX500Principal();      if (sodIssuer != null && !sodIssuer.equals(docIssuer)) {        LOGGER.severe("Security object issuer principal is different from embedded DS certificate issuer!");      }      BigInteger docSerialNumber=docSigningCertificate.getSerialNumber();      if (sodSerialNumber != null && !sodSerialNumber.equals(docSerialNumber)) {        LOGGER.warning("Security object serial number is different from embedded DS certificate serial number!");      }    }    List<Certificate> pkixChain=getCertificateChain(docSigningCertificate,sodIssuer,sodSerialNumber,cscaStores,cscaTrustAnchors);    if (pkixChain == null) {      verificationStatus.setCS(VerificationStatus.Verdict.FAILED,ReasonCode.SIGNATURE_FAILURE,chain);      return;    }    for (    Certificate certificate : pkixChain) {      if (certificate.equals(docSigningCertificate)) {        continue;      }      chain.add(certificate);    }    int chainDepth=chain.size();    if (chainDepth <= 1) {      verificationStatus.setCS(VerificationStatus.Verdict.FAILED,ReasonCode.COULD_NOT_BUILD_CHAIN_FAILURE,chain);      return;    }    if (chainDepth > 1 && verificationStatus.getCS().equals(VerificationStatus.Verdict.UNKNOWN)) {      verificationStatus.setCS(VerificationStatus.Verdict.SUCCEEDED,ReasonCode.FOUND_A_CHAIN_SUCCEEDED,chain);    }  } catch (  Exception e) {    e.printStackTrace();    verificationStatus.setCS(VerificationStatus.Verdict.FAILED,ReasonCode.SIGNATURE_FAILURE,EMPTY_CERTIFICATE_CHAIN);  }}  }
class C{  @Override public boolean supportsPredictiveItemAnimations(){  return true;}  }
class C{  public static Collection<File> listFiles(File directory,String[] extensions,boolean recursive){  IOFileFilter filter;  if (extensions == null) {    filter=TrueFileFilter.INSTANCE;  } else {    String[] suffixes=toSuffixes(extensions);    filter=new SuffixFileFilter(suffixes);  }  return listFiles(directory,filter,recursive ? TrueFileFilter.INSTANCE : FalseFileFilter.INSTANCE);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.OFFSET_DATE_TIME_TYPE,this);}  }
class C{  @Parameters({"logwrite-data","logwrite-modulename","logwrite-domain","logwrite-log-level","logwrite-login-id","logwrite-ip-addr","logwrite-host-name","logwrite-message-id","logwrite-number-of-records"}) @Test(groups={"api-adminwrite"}) public void writeAdminLogRecord(String rData,String rModuleName,String rDomain,String rLogLevel,String rLoginId,String rIPAddr,String rHostName,String rMsgId,String rNumRecs) throws AMLogException {  LogRecord lR=null;  Level llevel=null;  int numRecs=0;  if ((rNumRecs != null) && (rNumRecs.length() > 0)) {    try {      numRecs=Integer.parseInt(rNumRecs);    } catch (    NumberFormatException nfe) {      log(Level.WARNING,"writeAdminLogRecord",nfe.getMessage());      numRecs=1;    }  }  llevel=getLogLevel(rLogLevel);  int totalRecs=0;  SSOToken adminToken=getAdminSSOToken();  for (int i=(numRecs - 1); i >= 0; i--) {    lR=new LogRecord(llevel,msgDataPrefix + i + "|"+ rData,adminToken);    if ((rDomain != null) && (rDomain.length() > 0)) {      lR.addLogInfo(LogConstants.DOMAIN,rDomain);    }    lR.addLogInfo(LogConstants.LOGIN_ID,"amAdmin");    if ((rIPAddr != null) && (rIPAddr.length() > 0)) {      lR.addLogInfo(LogConstants.IP_ADDR,rIPAddr);    }    if ((rHostName != null) && (rHostName.length() > 0)) {      lR.addLogInfo(LogConstants.HOST_NAME,rHostName);    }    if ((rModuleName != null) && (rModuleName.length() > 0)) {      lR.addLogInfo(LogConstants.MODULE_NAME,rModuleName);    }    if ((rMsgId != null) && (rMsgId.length() > 0)) {      String msgid=rMsgId + i;      lR.addLogInfo(LogConstants.MESSAGE_ID,msgid);    }    try {      logger.log(lR,adminToken);      totalRecs++;    } catch (    AMLogException alex) {      log(Level.SEVERE,"writeAdminLogRecord",alex.getMessage());      throw alex;    }  }}  }
class C{  public JMenuItem add(Action a){  JMenuItem mi=createActionComponent(a);  mi.setAction(a);  add(mi);  return mi;}  }
class C{  private void searchNotIndexed(ReadableTransaction txn,SearchOperation searchOperation,PagedResultsControl pageRequest) throws DirectoryException, CanceledOperationException {  DN aBaseDN=searchOperation.getBaseDN();  SearchScope searchScope=searchOperation.getScope();  boolean manageDsaIT=isManageDsaITOperation(searchOperation);  if (pageRequest == null || pageRequest.getCookie().length() == 0) {    final Entry baseEntry=fetchBaseEntry(txn,aBaseDN,searchScope);    if (!manageDsaIT) {      dn2uri.checkTargetForReferral(baseEntry,searchScope);    }    if (searchScope == SearchScope.WHOLE_SUBTREE && searchOperation.getFilter().matchesEntry(baseEntry)) {      searchOperation.returnEntry(baseEntry,null);    }    if (!manageDsaIT && !dn2uri.returnSearchReferences(txn,searchOperation)) {      addPagedResultsControl(searchOperation,pageRequest,null);    }  }  ByteString baseDNKey=dnToDNKey(aBaseDN,this.baseDN.size());  ByteStringBuilder beforeFirstChild=beforeFirstChildOf(baseDNKey);  ByteStringBuilder afterLastChild=afterLastChildOf(baseDNKey);  ByteSequence begin;  if (pageRequest != null && pageRequest.getCookie().length() != 0) {    try {      begin=ByteString.wrap(pageRequest.getCookie().toByteArray());    } catch (    Exception e) {      logger.traceException(e);      throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,ERR_INVALID_PAGED_RESULTS_COOKIE.get(pageRequest.getCookie().toHexString()),e);    }  } else {    begin=beforeFirstChild;  }  int lookthroughCount=0;  int lookthroughLimit=searchOperation.getClientConnection().getLookthroughLimit();  try (final Cursor<ByteString,ByteString> cursor=txn.openCursor(dn2id.getName())){    boolean success=cursor.positionToKeyOrNext(begin);    while (success && cursor.getKey().compareTo(afterLastChild) < 0) {      if (lookthroughLimit > 0 && lookthroughCount > lookthroughLimit) {        searchOperation.setResultCode(ResultCode.ADMIN_LIMIT_EXCEEDED);        searchOperation.appendErrorMessage(NOTE_LOOKTHROUGH_LIMIT_EXCEEDED.get(lookthroughLimit));        return;      }      EntryID entryID=new EntryID(cursor.getValue());      boolean isInScope=searchScope != SearchScope.SINGLE_LEVEL || findDNKeyParent(cursor.getKey()) == baseDNKey.length();      if (isInScope) {        final Entry entry=getEntry(txn,entryID);        if (entry != null) {          lookthroughCount++;          if ((manageDsaIT || entry.getReferralURLs() == null) && searchOperation.getFilter().matchesEntry(entry)) {            if (isPageFull(searchOperation,pageRequest)) {              addPagedResultsControl(searchOperation,pageRequest,cursor.getKey());              return;            }            if (!searchOperation.returnEntry(entry,null)) {              return;            }          }        }      }      searchOperation.checkIfCanceled(false);      success=cursor.next();    }  } catch (  StorageRuntimeException e) {    logger.traceException(e);  }  addPagedResultsControl(searchOperation,pageRequest,null);}  }
class C{  public static void saveAsBinary(NSObject root,OutputStream out) throws IOException {  BinaryPropertyListWriter.write(out,root);}  }
class C{  protected int readBytes() throws IOException {  int nRead=buffer.doRead(readChunk);  pos=readChunk.getStart();  lastValid=pos + nRead;  buf=readChunk.getBytes();  return nRead;}  }
class C{  public void addLocalEjb(ContextLocalEjb ejb){  if (entries.contains(ejb.getName())) {    return;  } else {    entries.add(ejb.getName());  }synchronized (localEjbs) {    ejb.setNamingResources(this);    localEjbs.put(ejb.getName(),ejb);  }  support.firePropertyChange("localEjb",null,ejb);}  }
class C{  public long process(Reader reader,long lastModifiedDate,PrintWriter writer) throws IOException {  SSIMediator ssiMediator=new SSIMediator(ssiExternalResolver,lastModifiedDate);  StringWriter stringWriter=new StringWriter();  IOTools.flow(reader,stringWriter);  String fileContents=stringWriter.toString();  stringWriter=null;  int index=0;  boolean inside=false;  StringBuilder command=new StringBuilder();  try {    while (index < fileContents.length()) {      char c=fileContents.charAt(index);      if (!inside) {        if (c == COMMAND_START.charAt(0) && charCmp(fileContents,index,COMMAND_START)) {          inside=true;          index+=COMMAND_START.length();          command.setLength(0);        } else {          if (!ssiMediator.getConditionalState().processConditionalCommandsOnly) {            writer.write(c);          }          index++;        }      } else {        if (c == COMMAND_END.charAt(0) && charCmp(fileContents,index,COMMAND_END)) {          inside=false;          index+=COMMAND_END.length();          String strCmd=parseCmd(command);          if (debug > 0) {            ssiExternalResolver.log("SSIProcessor.process -- processing command: " + strCmd,null);          }          String[] paramNames=parseParamNames(command,strCmd.length());          String[] paramValues=parseParamValues(command,strCmd.length(),paramNames.length);          String configErrMsg=ssiMediator.getConfigErrMsg();          SSICommand ssiCommand=commands.get(strCmd.toLowerCase(Locale.ENGLISH));          String errorMessage=null;          if (ssiCommand == null) {            errorMessage="Unknown command: " + strCmd;          } else           if (paramValues == null) {            errorMessage="Error parsing directive parameters.";          } else           if (paramNames.length != paramValues.length) {            errorMessage="Parameter names count does not match parameter values count on command: " + strCmd;          } else {            if (!ssiMediator.getConditionalState().processConditionalCommandsOnly || ssiCommand instanceof SSIConditional) {              long lmd=ssiCommand.process(ssiMediator,strCmd,paramNames,paramValues,writer);              if (lmd > lastModifiedDate) {                lastModifiedDate=lmd;              }            }          }          if (errorMessage != null) {            ssiExternalResolver.log(errorMessage,null);            writer.write(configErrMsg);          }        } else {          command.append(c);          index++;        }      }    }  } catch (  SSIStopProcessingException e) {  }  return lastModifiedDate;}  }
class C{  private static String interpolate(String str){  String toInterpolate=str.substring(2,str.length() - 1);  List<String> tokens=Arrays.asList(toInterpolate.split(" "));  StringBuilder builder=new StringBuilder();  Iterator<String> iter=tokens.iterator();  while (iter.hasNext()) {    String token=iter.next();    if (token.equals("Time.now")) {      builder.append(handleTime(tokens,iter));    } else {      logger.warn("Unrecognized token: {}",token);      builder.append(token);    }  }  return builder.toString();}  }
class C{  public boolean import_design(InputStream p_design,IdGenerator p_item_id_no_generator,Stat p_stat){  if (p_design == null)   throw new IllegalArgumentException("import_design: p_design == null");  DsnReadResult read_result;  try {    DsnReadFile reader=new DsnReadFile(this,p_design);    read_result=reader.read(p_item_id_no_generator);    p_design.close();  } catch (  Exception exc) {    stat.userPrintln("import_design",exc);    return false;  }  if (read_result != DsnReadResult.OK)   return false;  r_board.reduce_nets_of_route_items();  set_layer(0);  for (int index=0; index < r_board.get_layer_count(); ++index) {    if (!itera_settings.autoroute_settings.get_layer_active(index)) {      gdi_context.set_layer_visibility(index,0);    }  }  return true;}  }
class C{  private void enterChannelList(){  Log.d(TAG,"enterChannelList");  if (mService != null) {    if (mIsActivityForeground) {      Intent intent=new Intent();      intent.setClass(FmRadioActivity.this,FmRadioFavorite.class);      startActivityForResult(intent,REQUEST_CODE_FAVORITE);    } else {      Log.d(TAG,"enterChannelList. activity is background, not enter channel list.");    }  }}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  Element newElement;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newElement=doc.createElementNS(namespaceURI,malformedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  private static AttributeValue createAttributeValue(AttributeDescription attributeDescription,ByteString attributeValue){  return new AttributeValue(attributeDescription,attributeValue);}  }
class C{  public boolean sameInstallAndInstance(){  boolean sameInstallAndInstance;  String instance=getInstancePath();  String install=getInstallPath();  try {    if (instance != null) {      sameInstallAndInstance=instance.equals(install);      if (!sameInstallAndInstance && (isLocal() || OperatingSystem.isWindows())) {        File f1=new File(instance);        File f2=new File(install);        sameInstallAndInstance=f1.getCanonicalFile().equals(f2.getCanonicalFile());      }    } else {      sameInstallAndInstance=install == null;    }  } catch (  IOException ioe) {    sameInstallAndInstance=false;  }  return sameInstallAndInstance;}  }
class C{  public void delete() throws SMSException, SSOException {  if (readOnly) {    if (debug.warningEnabled()) {      debug.warning("SMSEntry: Attempted to delete an entry that " + "is marked as read-only: " + dn);    }    throw (new SMSException(SMSException.STATUS_NO_PERMISSION,"sms-INSUFFICIENT_ACCESS_RIGHTS"));  }  delete(ssoToken);}  }
class C{  public static BindResult newBindResult(final ResultCode resultCode){  Reject.ifNull(resultCode);  return new BindResultImpl(resultCode);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(30,5);  childData=child.getData();  assertEquals("characterdataDeleteDataEndAssert","1230 North Ave. Dallas, Texas ",childData);}  }
class C{  private static int checkTypeArguments(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkTypeArgument(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkTypeArgument(signature,pos);  }  return pos + 1;}  }
class C{  public int size(){  return size;}  }
class C{  public X500Name(ASN1Sequence seq){  @SuppressWarnings("unchecked") Enumeration e=seq.getObjects();  while (e.hasMoreElements()) {    ASN1Set set=(ASN1Set)e.nextElement();    for (int i=0; i < set.size(); i++) {      ASN1Sequence s=(ASN1Sequence)set.getObjectAt(i);      String id=DefaultSymbols.get((ASN1ObjectIdentifier)s.getObjectAt(0));      if (id == null)       continue;      List<String> vs=values.get(id);      if (vs == null) {        vs=new ArrayList<>();        values.put(id,vs);      }      vs.add(((ASN1String)s.getObjectAt(1)).getString());    }  }}  }
class C{  protected boolean startEditing(TreePath path,MouseEvent event){  if (isEditing(tree) && tree.getInvokesStopCellEditing() && !stopEditing(tree)) {    return false;  }  completeEditing();  if (cellEditor != null && tree.isPathEditable(path)) {    int row=getRowForPath(tree,path);    if (cellEditor.isCellEditable(event)) {      editingComponent=cellEditor.getTreeCellEditorComponent(tree,path.getLastPathComponent(),tree.isPathSelected(path),tree.isExpanded(path),treeModel.isLeaf(path.getLastPathComponent()),row);      Rectangle nodeBounds=getPathBounds(tree,path);      if (nodeBounds == null) {        return false;      }      editingRow=row;      Dimension editorSize=editingComponent.getPreferredSize();      if (editorSize.height != nodeBounds.height && getRowHeight() > 0)       editorSize.height=getRowHeight();      if (editorSize.width != nodeBounds.width || editorSize.height != nodeBounds.height) {        editorHasDifferentSize=true;        treeState.invalidatePathBounds(path);        updateSize();        nodeBounds=getPathBounds(tree,path);        if (nodeBounds == null) {          return false;        }      } else       editorHasDifferentSize=false;      tree.add(editingComponent);      editingComponent.setBounds(nodeBounds.x,nodeBounds.y,nodeBounds.width,nodeBounds.height);      editingPath=path;      AWTAccessor.getComponentAccessor().revalidateSynchronously(editingComponent);      editingComponent.repaint();      if (cellEditor.shouldSelectCell(event)) {        stopEditingInCompleteEditing=false;        tree.setSelectionRow(row);        stopEditingInCompleteEditing=true;      }      Component focusedComponent=SwingUtilities2.compositeRequestFocus(editingComponent);      boolean selectAll=true;      if (event != null) {        Point componentPoint=SwingUtilities.convertPoint(tree,new Point(event.getX(),event.getY()),editingComponent);        Component activeComponent=SwingUtilities.getDeepestComponentAt(editingComponent,componentPoint.x,componentPoint.y);        if (activeComponent != null) {          MouseInputHandler handler=new MouseInputHandler(tree,activeComponent,event,focusedComponent);          if (releaseEvent != null) {            handler.mouseReleased(releaseEvent);          }          selectAll=false;        }      }      if (selectAll && focusedComponent instanceof JTextField) {        ((JTextField)focusedComponent).selectAll();      }      return true;    } else     editingComponent=null;  }  return false;}  }
class C{  public boolean isZero(){  return getStartTime() == 0 && getStopTime() == 0;}  }
class C{  public void testFloatValuePlusZero(){  String a="123809648392384754573567356745735.63567890295784902768787678287E-400";  BigDecimal aNumber=new BigDecimal(a);  int zero=0;  float result=aNumber.floatValue();  assertTrue("incorrect value",Float.floatToIntBits(result) == zero);}  }
class C{  public Builder noCache(){  this.noCache=true;  return this;}  }
class C{  public void clear(){  map.clear();}  }
class C{  public PeerUnavailableException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void fillRect(int x,int y,int width,int height){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Filling rect: " + new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.fillRect(x,y,width,height);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.fillRect(x,y,width,height);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.fillRect(x,y,width,height);}  }
class C{  public static void error(Level level,String msgid,String data[]){  error(level,msgid,data,null);}  }
class C{  @DataProvider(name="testSafeDataLevelOneProvider") private Object[][] testSafeDataLevelOneProvider(){  return new Object[][]{{DEFAULT_GID,false,false,DEFAULT_GID,DEFAULT_GID},{DEFAULT_GID,false,false,OTHER_GID,DEFAULT_GID},{DEFAULT_GID,false,false,DEFAULT_GID,OTHER_GID},{DEFAULT_GID,false,false,OTHER_GID,OTHER_GID},{DEFAULT_GID,true,false,DEFAULT_GID,DEFAULT_GID},{DEFAULT_GID,true,false,OTHER_GID,DEFAULT_GID},{DEFAULT_GID,true,false,DEFAULT_GID,OTHER_GID},{DEFAULT_GID,true,false,OTHER_GID,OTHER_GID},{DEFAULT_GID,false,true,DEFAULT_GID,DEFAULT_GID},{DEFAULT_GID,false,true,OTHER_GID,DEFAULT_GID},{DEFAULT_GID,false,true,DEFAULT_GID,OTHER_GID},{DEFAULT_GID,false,true,OTHER_GID,OTHER_GID},{DEFAULT_GID,true,true,DEFAULT_GID,DEFAULT_GID},{DEFAULT_GID,true,true,OTHER_GID,DEFAULT_GID},{DEFAULT_GID,true,true,DEFAULT_GID,OTHER_GID},{DEFAULT_GID,true,true,OTHER_GID,OTHER_GID},{OTHER_GID,false,false,DEFAULT_GID,DEFAULT_GID},{OTHER_GID,false,false,OTHER_GID,DEFAULT_GID},{OTHER_GID,false,false,DEFAULT_GID,OTHER_GID},{OTHER_GID,false,false,OTHER_GID,OTHER_GID},{OTHER_GID,true,false,DEFAULT_GID,DEFAULT_GID},{OTHER_GID,true,false,OTHER_GID,DEFAULT_GID},{OTHER_GID,true,false,DEFAULT_GID,OTHER_GID},{OTHER_GID,true,false,OTHER_GID,OTHER_GID},{OTHER_GID,false,true,DEFAULT_GID,DEFAULT_GID},{OTHER_GID,false,true,OTHER_GID,DEFAULT_GID},{OTHER_GID,false,true,DEFAULT_GID,OTHER_GID},{OTHER_GID,false,true,OTHER_GID,OTHER_GID},{OTHER_GID,true,true,DEFAULT_GID,DEFAULT_GID},{OTHER_GID,true,true,OTHER_GID,DEFAULT_GID},{OTHER_GID,true,true,DEFAULT_GID,OTHER_GID},{OTHER_GID,true,true,OTHER_GID,OTHER_GID}};}  }
class C{  public Value parseValueFromProcedure(AST.Procedure procedure,STypeDef requiredType,SemanticScope scope) throws SyntaxException {  String methodName="procedure$0";  int i=1;  while (scope.getInnerMethod(methodName) != null) {    methodName="procedure$" + i;    ++i;  }  if (requiredType == null) {    requiredType=getTypeWithName("java.lang.Object",LineCol.SYNTHETIC);  }  assert requiredType != null;  MethodDef methodDef=new MethodDef(methodName,Collections.emptySet(),new AST.Access(requiredType.pkg() == null ? null : new AST.PackageRef(requiredType.pkg(),LineCol.SYNTHETIC),requiredType.fullName().contains(".") ? requiredType.fullName().substring(requiredType.fullName().lastIndexOf('.') + 1) : requiredType.fullName(),LineCol.SYNTHETIC),Collections.emptyList(),Collections.emptySet(),procedure.statements,procedure.line_col());  parseInnerMethod(methodDef,scope,false);  AST.Invocation invocation=new AST.Invocation(new AST.Access(null,methodName,procedure.line_col()),Collections.emptyList(),false,procedure.line_col());  return parseValueFromInvocation(invocation,scope);}  }
class C{  public boolean isGroupMembershipSearchIndexEnabled(){  return groupMembershipSearchIndexEnabled;}  }
class C{  public void removeUser(String username){  UserDatabase database=(UserDatabase)this.resource;  User user=database.findUser(username);  if (user == null) {    return;  }  try {    MBeanUtils.destroyMBean(user);    database.removeUser(user);  } catch (  Exception e) {    IllegalArgumentException iae=new IllegalArgumentException("Exception destroying user [" + username + "] MBean");    iae.initCause(e);    throw iae;  }}  }
class C{  public boolean drawImage(Image img,int x,int y,int width,int height,ImageObserver observer){  DebugGraphicsInfo info=info();  if (debugLog()) {    info.log(toShortString() + " Drawing image: " + img+ " at: "+ new Rectangle(x,y,width,height));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawImage(img,x,y,width,height,observer);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    int i, count=(info.flashCount * 2) - 1;    ImageProducer oldProducer=img.getSource();    ImageProducer newProducer=new FilteredImageSource(oldProducer,new DebugGraphicsFilter(info.flashColor));    Image newImage=Toolkit.getDefaultToolkit().createImage(newProducer);    DebugGraphicsObserver imageObserver=new DebugGraphicsObserver();    Image imageToDraw;    for (i=0; i < count; i++) {      imageToDraw=(i % 2) == 0 ? newImage : img;      loadImage(imageToDraw);      graphics.drawImage(imageToDraw,x,y,width,height,imageObserver);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }  }  return graphics.drawImage(img,x,y,width,height,observer);}  }
class C{  public Response.Builder readResponse() throws IOException {  if (state != STATE_OPEN_REQUEST_BODY && state != STATE_READ_RESPONSE_HEADERS) {    throw new IllegalStateException("state: " + state);  }  try {    while (true) {      StatusLine statusLine=StatusLine.parse(source.readUtf8LineStrict());      Response.Builder responseBuilder=new Response.Builder().protocol(statusLine.protocol).code(statusLine.code).message(statusLine.message).headers(readHeaders());      if (statusLine.code != HTTP_CONTINUE) {        state=STATE_OPEN_RESPONSE_BODY;        return responseBuilder;      }    }  } catch (  EOFException e) {    IOException exception=new IOException("unexpected end of stream on " + streamAllocation);    exception.initCause(e);    throw exception;  }}  }
class C{  synchronized static void computePRF(byte[] out,byte[] secret,byte[] str_byts,byte[] seed) throws GeneralSecurityException {  if (sha_mac == null) {    init();  }  SecretKeySpec keyMd5;  SecretKeySpec keySha1;  if ((secret == null) || (secret.length == 0)) {    secret=new byte[8];    keyMd5=new SecretKeySpec(secret,"HmacMD5");    keySha1=new SecretKeySpec(secret,"HmacSHA1");  } else {    int length=secret.length >> 1;    int offset=secret.length & 1;    keyMd5=new SecretKeySpec(secret,0,length + offset,"HmacMD5");    keySha1=new SecretKeySpec(secret,length,length + offset,"HmacSHA1");  }  if (logger != null) {    logger.println("secret[" + secret.length + "]: ");    logger.printAsHex(16,""," ",secret);    logger.println("label[" + str_byts.length + "]: ");    logger.printAsHex(16,""," ",str_byts);    logger.println("seed[" + seed.length + "]: ");    logger.printAsHex(16,""," ",seed);    logger.println("MD5 key:");    logger.printAsHex(16,""," ",keyMd5.getEncoded());    logger.println("SHA1 key:");    logger.printAsHex(16,""," ",keySha1.getEncoded());  }  md5_mac.init(keyMd5);  sha_mac.init(keySha1);  int pos=0;  md5_mac.update(str_byts);  byte[] hash=md5_mac.doFinal(seed);  while (pos < out.length) {    md5_mac.update(hash);    md5_mac.update(str_byts);    md5_mac.update(seed);    if (pos + md5_mac_length < out.length) {      md5_mac.doFinal(out,pos);      pos+=md5_mac_length;    } else {      System.arraycopy(md5_mac.doFinal(),0,out,pos,out.length - pos);      break;    }    hash=md5_mac.doFinal(hash);  }  if (logger != null) {    logger.println("P_MD5:");    logger.printAsHex(md5_mac_length,""," ",out);  }  pos=0;  sha_mac.update(str_byts);  hash=sha_mac.doFinal(seed);  byte[] sha1hash;  while (pos < out.length) {    sha_mac.update(hash);    sha_mac.update(str_byts);    sha1hash=sha_mac.doFinal(seed);    for (int i=0; (i < sha_mac_length) & (pos < out.length); i++) {      out[pos++]^=sha1hash[i];    }    hash=sha_mac.doFinal(hash);  }  if (logger != null) {    logger.println("PRF:");    logger.printAsHex(sha_mac_length,""," ",out);  }}  }
class C{  public static JsonValue jsonFromFile(String resourceFilePath) throws IOException {  final InputStream configStream=JsonUtils.class.getResourceAsStream(resourceFilePath);  return new JsonValue(MAPPER.readValue(configStream,Map.class));}  }
class C{  public static void writeLines(File file,Collection<?> lines) throws IOException {  writeLines(file,null,lines,null,false);}  }
class C{  public JMenuItem(){  this(null,(Icon)null);}  }
class C{  public static byte[] digest(InputStream data,String hashAlgorithm,String provider) throws GeneralSecurityException, IOException {  MessageDigest messageDigest=getMessageDigest(hashAlgorithm,provider);  return digest(data,messageDigest);}  }
class C{  public void runTest() throws Throwable {  Document newNode;  String newValue;  newNode=(Document)load("hc_staff",true);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  protected <T extends KeySpec>T engineGetKeySpec(Key key,Class<T> keySpec) throws InvalidKeySpecException {  BigInteger p, q, g, x, y;  if (key != null) {    if (keySpec == null) {      throw new NullPointerException("keySpec == null");    }    if (key instanceof DSAPrivateKey) {      DSAPrivateKey privateKey=(DSAPrivateKey)key;      if (keySpec.equals(DSAPrivateKeySpec.class)) {        x=privateKey.getX();        DSAParams params=privateKey.getParams();        p=params.getP();        q=params.getQ();        g=params.getG();        return (T)(new DSAPrivateKeySpec(x,p,q,g));      }      if (keySpec.equals(PKCS8EncodedKeySpec.class)) {        return (T)(new PKCS8EncodedKeySpec(key.getEncoded()));      }      throw new InvalidKeySpecException("'keySpec' is neither DSAPrivateKeySpec nor PKCS8EncodedKeySpec");    }    if (key instanceof DSAPublicKey) {      DSAPublicKey publicKey=(DSAPublicKey)key;      if (keySpec.equals(DSAPublicKeySpec.class)) {        y=publicKey.getY();        DSAParams params=publicKey.getParams();        p=params.getP();        q=params.getQ();        g=params.getG();        return (T)(new DSAPublicKeySpec(y,p,q,g));      }      if (keySpec.equals(X509EncodedKeySpec.class)) {        return (T)(new X509EncodedKeySpec(key.getEncoded()));      }      throw new InvalidKeySpecException("'keySpec' is neither DSAPublicKeySpec nor X509EncodedKeySpec");    }  }  throw new InvalidKeySpecException("'key' is neither DSAPublicKey nor DSAPrivateKey");}  }
class C{  public DSTModifyResponse modify(DSTModify modify) throws DSTException, InteractionRedirectException {  DSTUtils.debug.message("DSTClient:modify:init");  if (modify == null) {    DSTUtils.debug.message("DSTClient:modify:null values");    throw new DSTException(DSTUtils.bundle.getString("nullInputParams"));  }  List request=new ArrayList();  request.add(DSTUtils.parseXML(modify.toString(true,true)));  List response=sendMessage(request);  return new DSTModifyResponse((Element)response.get(0));}  }
class C{  public PrinterResolution(int crossFeedResolution,int feedResolution,int units){  super(crossFeedResolution,feedResolution,units);}  }
class C{  private URLConnection connectURL(String strURL){  URLConnection conn=null;  try {    URL inputURL=new URL(strURL);    conn=inputURL.openConnection();  } catch (  MalformedURLException e) {    System.out.println("Please input a valid URL");  }catch (  IOException ioe) {    System.out.println("Can not connect to the URL");  }  return conn;}  }
class C{  public Object[] parse(String string) throws ParseException {  ParsePosition position=new ParsePosition(0);  Object[] result=parse(string,position);  if (position.getIndex() == 0) {    throw new ParseException("Parse failure",position.getErrorIndex());  }  return result;}  }
class C{  public static String singularize(String in){  if (in.endsWith("lves") || in.endsWith("rves")) {    return in.substring(0,in.length() - 3) + "f";  } else   if (in.endsWith("ies")) {    return in.substring(0,in.length() - 3) + "y";  } else   if (in.charAt(in.length() - 1) == 's') {    return in.substring(0,in.length() - 1);  }  return in;}  }
class C{  @Override public Object clone(){  try {    return (DecimalFormatSymbols)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public final void testHashCode01(){  ECFieldF2m f=new ECFieldF2m(2000);  int hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());}  }
class C{  public FrameBodyTORY(FrameBodyTDOR body){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  String year=body.getText();  if (body.getText().length() > NUMBER_OF_DIGITS_IN_YEAR) {    year=body.getText().substring(0,NUMBER_OF_DIGITS_IN_YEAR);  }  setObjectValue(DataTypes.OBJ_TEXT,year);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType.X509CRL createX509DataTypeX509CRL(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl.X509CRLImpl(value);}  }
class C{  public BAD_TYPECODE(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  @Bean(initMethod="start",destroyMethod="stop") @Profile(Constants.SPRING_PROFILE_DEVELOPMENT) public Server h2TCPServer() throws SQLException {  return Server.createTcpServer("-tcp","-tcpAllowOthers");}  }
class C{  public void writeAddResult(final int messageID,final Result result) throws IOException {  logger.trace("ENCODE LDAP ADD RESULT(messageID=%d, result=%s)",messageID,result);  writeMessageHeader(messageID);{    writeResultHeader(LDAP.OP_TYPE_ADD_RESPONSE,result);    writeResultFooter(writer);  }  writeMessageFooter(result.getControls());}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireServerEntropyElement createRequireServerEntropyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireServerEntropyElementImpl();}  }
class C{  private Future<Job> attemptAdd(){  Future<Job> future=Future.future();  String key=RedisHelper.getKey("job:" + this.id);  if (this.attempts < this.max_attempts) {    client.hincrby(key,"attempts",1,null);  } else {    future.complete(this);  }  return future;}  }
class C{  public MirroredTypeException(TypeMirror type){  super("Attempt to access Class object for TypeMirror " + type.toString(),type);  this.type=type;}  }
class C{  public synchronized boolean isServiced(String name){  return (serviced.contains(name));}  }
class C{  public BAD_OPERATION(){  this("");}  }
class C{  private boolean isValueSupported(Object value){  for (int i=0; i < values.length; i++) {    if (value.equals(values[i])) {      return true;    }  }  return false;}  }
class C{  public boolean isSpecified(int index){  if (index < 0 || index >= getLength())   throw new ArrayIndexOutOfBoundsException("No attribute at index: " + index);  return specified[index];}  }
class C{  public void appendToBody(String text){  body.append(text);}  }
class C{  public boolean first(Object token){switch (type) {case '*':case '?':case '+':    return ((ContentModel)content).first(token);case ',':  for (ContentModel m=(ContentModel)content; m != null; m=m.next) {    if (m.first(token)) {      return true;    }    if (!m.empty()) {      return false;    }  }return false;case '|':case '&':{Element e=(Element)token;if (valSet == null || valSet.length <= Element.getMaxIndex()) {  valSet=new boolean[Element.getMaxIndex() + 1];  val=new boolean[valSet.length];}if (valSet[e.index]) {  return val[e.index];}for (ContentModel m=(ContentModel)content; m != null; m=m.next) {  if (m.first(token)) {    val[e.index]=true;    break;  }}valSet[e.index]=true;return val[e.index];}default :return (content == token);}}  }
class C{  public XMLReaderAdapter() throws SAXException {  setup(XMLReaderFactory.createXMLReader());}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  String serverconfigxml=CLIUtil.getFileContent(getCommandManager(),getStringOptionValue(SERVER_CONFIG_XML_FILE));  String[] params={serverName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_CREATE_SERVER",params);    if (!ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {      ServerConfiguration.createServerInstance(adminSSOToken,serverName,attributeValues,serverconfigxml);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("create-server-config-succeeded"),(Object[])params));    } else {      outputWriter.printlnMessage(MessageFormat.format(getResourceString("create-server-config-already-exists"),(Object[])params));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_CREATE_SERVER",params);  } catch (  UnknownPropertyNameException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ConfigurationException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IOException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_CREATE_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createElementNS06.class,args);}  }
class C{  public PrepareNotSupported(Throwable cause){  super(cause);}  }
class C{  public SendNotificationException(String msg){  super(msg);}  }
class C{  public void testPosPosSameLength(){  String numA="283746278342837476784564875684767";  String numB="293478573489347658763745839457637";  String res="71412358434940908477702819237626";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  private void initializeSubentryManager() throws InitializationException {  try {    subentryManager=new SubentryManager();  } catch (  DirectoryException de) {    throw new InitializationException(de.getMessageObject());  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof AnnotationMember) {    AnnotationMember that=(AnnotationMember)obj;    if (name.equals(that.name) && tag == that.tag) {      if (tag == ARRAY) {        return equalArrayValue(that.value);      } else       if (tag == ERROR) {        return false;      } else {        return value.equals(that.value);      }    }  }  return false;}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  public TagField createField(FieldKey genericKey,String value){  if (genericKey == null) {    throw new IllegalArgumentException(ErrorMessage.GENERAL_INVALID_NULL_ARGUMENT.getMsg());  }  ID3v1FieldKey idv1FieldKey=tagFieldToID3v1Field.get(genericKey);  if (idv1FieldKey == null) {    throw new KeyNotFoundException(ErrorMessage.INVALID_FIELD_FOR_ID3V1TAG.getMsg(genericKey.name()));  }  return new ID3v1TagField(idv1FieldKey.name(),value);}  }
class C{  public UserSubject(String user){  super(user);}  }
class C{  public void printil(String s){  javaLine++;  writer.print(SPACES.substring(0,indent));  writer.println(s);}  }
class C{  public void addProductToken(String pt){  productTokens.add(pt);}  }
class C{  private GenericControl(final String oid,final boolean isCritical,final ByteString value){  Reject.ifNull(oid);  this.oid=oid;  this.isCritical=isCritical;  this.value=value;}  }
class C{  static int writeUTF(String str,DataOutput out) throws IOException {  int strlen=str.length();  int utflen=0;  int c, count=0;  for (int i=0; i < strlen; i++) {    c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      utflen++;    } else     if (c > 0x07FF) {      utflen+=3;    } else {      utflen+=2;    }  }  if (utflen > 65535)   throw new UTFDataFormatException("encoded string too long: " + utflen + " bytes");  byte[] bytearr=null;  if (out instanceof DataOutputStream) {    DataOutputStream dos=(DataOutputStream)out;    if (dos.bytearr == null || (dos.bytearr.length < (utflen + 2)))     dos.bytearr=new byte[(utflen * 2) + 2];    bytearr=dos.bytearr;  } else {    bytearr=new byte[utflen + 2];  }  bytearr[count++]=(byte)((utflen >>> 8) & 0xFF);  bytearr[count++]=(byte)((utflen >>> 0) & 0xFF);  int i=0;  for (i=0; i < strlen; i++) {    c=str.charAt(i);    if (!((c >= 0x0001) && (c <= 0x007F)))     break;    bytearr[count++]=(byte)c;  }  for (; i < strlen; i++) {    c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      bytearr[count++]=(byte)c;    } else     if (c > 0x07FF) {      bytearr[count++]=(byte)(0xE0 | ((c >> 12) & 0x0F));      bytearr[count++]=(byte)(0x80 | ((c >> 6) & 0x3F));      bytearr[count++]=(byte)(0x80 | ((c >> 0) & 0x3F));    } else {      bytearr[count++]=(byte)(0xC0 | ((c >> 6) & 0x1F));      bytearr[count++]=(byte)(0x80 | ((c >> 0) & 0x3F));    }  }  out.write(bytearr,0,utflen + 2);  return utflen + 2;}  }
class C{  public void enqueueNormal(String methodName,int count){  Deque<InvocationHandler> handlers=getHandlers(methodName);  for (int i=0; i < count; i++) {    handlers.add(delegateHandler);  }}  }
class C{  protected void sendMessage(byte[] msg,boolean isClient) throws IOException {  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("sendMessage isClient  = " + isClient + " this = "+ this);  }  lastActivityTimeStamp=System.currentTimeMillis();  NIOHandler nioHandler=((NioTcpMessageProcessor)messageProcessor).nioHandler;  if (this.socketChannel != null && this.socketChannel.isConnected() && this.socketChannel.isOpen()) {    nioHandler.putSocket(NIOHandler.makeKey(this.peerAddress,this.peerPort),this.socketChannel);  }  sendTCPMessage(msg,this.peerAddress,this.peerPort,isClient);}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  public AuditServiceConfigurationProviderImpl(){  this.eventTopicsMetaData=getEventTopicsMetaData();}  }
class C{  protected void writeAppData(byte[] data,int offset,int len) throws IOException {  if (!handshake_started) {    startHandshake();  }  if (logger != null) {    logger.println("SSLSocket.writeAppData: " + len + " "+ SSLRecordProtocol.MAX_DATA_LENGTH);  }  try {    if (len < SSLRecordProtocol.MAX_DATA_LENGTH) {      output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));    } else {      while (len >= SSLRecordProtocol.MAX_DATA_LENGTH) {        output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,SSLRecordProtocol.MAX_DATA_LENGTH));        offset+=SSLRecordProtocol.MAX_DATA_LENGTH;        len-=SSLRecordProtocol.MAX_DATA_LENGTH;      }      if (len > 0) {        output.write(recordProtocol.wrap(ContentType.APPLICATION_DATA,data,offset,len));      }    }  } catch (  AlertException e) {    reportFatalAlert(e.getDescriptionCode(),e.getReason());  }}  }
class C{  @Override public void close(){}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/h2-console/*");  h2ConsoleServlet.setInitParameter("-properties","src/main/resources/");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  public long insert(long timeStamp,String appName,String eventName,String eventParameters,String description){  if (appName == null || eventName == null || eventParameters == null || description == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_TIMESTAMP,timeStamp);  initialValues.put(KEY_APPNAME,appName);  initialValues.put(KEY_EVENTNAME,eventName);  initialValues.put(KEY_EVENTPARAMETERS,eventParameters);  initialValues.put(KEY_DESCRIPTION,description);  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  private BackupProtos.Journal readJournal(ParcelFileDescriptor oldState){  BackupProtos.Journal journal=new BackupProtos.Journal();  if (oldState == null) {    return journal;  }  FileInputStream inStream=new FileInputStream(oldState.getFileDescriptor());  try {    int availableBytes=inStream.available();    if (DEBUG)     Log.d(TAG,"available " + availableBytes);    if (availableBytes < MAX_JOURNAL_SIZE) {      byte[] buffer=new byte[availableBytes];      int bytesRead=0;      boolean valid=false;      InvalidProtocolBufferNanoException lastProtoException=null;      while (availableBytes > 0) {        try {          int result=inStream.read(buffer,bytesRead,1);          if (result > 0) {            availableBytes-=result;            bytesRead+=result;          } else {            Log.w(TAG,"unexpected end of file while reading journal.");            availableBytes=0;          }        } catch (        IOException e) {          buffer=null;          availableBytes=0;        }        try {          MessageNano.mergeFrom(journal,readCheckedBytes(buffer,bytesRead));          valid=true;          availableBytes=0;          if (VERBOSE)           Log.v(TAG,"read " + bytesRead + " bytes of journal");        } catch (        InvalidProtocolBufferNanoException e) {          lastProtoException=e;          journal.clear();        }      }      if (DEBUG)       Log.d(TAG,"journal bytes read: " + bytesRead);      if (!valid) {        Log.w(TAG,"could not find a valid journal",lastProtoException);      }    }  } catch (  IOException e) {    Log.w(TAG,"failed to close the journal",e);  } finally {    try {      inStream.close();    } catch (    IOException e) {      Log.w(TAG,"failed to close the journal",e);    }  }  return journal;}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  @BeforeClass public void before() throws Exception {  TestCaseUtils.startServer();  File pwFile=File.createTempFile("valid-bind-password-",".txt");  pwFile.deleteOnExit();  FileWriter fileWriter=new FileWriter(pwFile);  fileWriter.write("password" + System.getProperty("line.separator"));  fileWriter.close();  validPasswordFile=pwFile.getAbsolutePath();  pwFile=File.createTempFile("invalid-bind-password-",".txt");  pwFile.deleteOnExit();  fileWriter=new FileWriter(pwFile);  fileWriter.write("wrongPassword" + System.getProperty("line.separator"));  fileWriter.close();  invalidPasswordFile=pwFile.getAbsolutePath();}  }
class C{  public void drawTextRun(Canvas c,int start,int end,int contextStart,int contextEnd,float x,float y,int flags,Paint p){  checkRange("drawTextRun",start,end);  int contextLen=contextEnd - contextStart;  int len=end - start;  if (contextEnd <= mGapStart) {    c.drawTextRun(mText,start,len,contextStart,contextLen,x,y,flags,p);  } else   if (contextStart >= mGapStart) {    c.drawTextRun(mText,start + mGapLength,len,contextStart + mGapLength,contextLen,x,y,flags,p);  } else {    char[] buf=TextUtils.obtain(contextLen);    getChars(contextStart,contextEnd,buf,0);    c.drawTextRun(buf,start - contextStart,len,0,contextLen,x,y,flags,p);    TextUtils.recycle(buf);  }}  }
class C{  private EntryIDSet evaluateFilter(SearchFilter filter){  EntryIDSet candidates=evaluateFilter0(filter);  if (buffer != null) {    candidates.toString(buffer);  }  return candidates;}  }
class C{  public static boolean isTeslaHolder(ICapabilityProvider provider,EnumFacing side){  return provider.hasCapability(TeslaCapabilities.CAPABILITY_HOLDER,side);}  }
class C{  public JViewport(){  super();  setLayout(createLayoutManager());  setOpaque(true);  updateUI();  setInheritsPopupMenu(true);}  }
class C{  private Future<List<Product>> prepareProduct(ProductService service,ShoppingCart cart){  List<Future<Product>> futures=cart.getAmountMap().keySet().stream().map(null).collect(Collectors.toList());  return Functional.sequenceFuture(futures);}  }
class C{  public void UnexpectedNewLayerException(LineCol lineCol) throws UnexpectedNewLayerException {  if (fastFail)   throw new UnexpectedNewLayerException(buildErrInfo(lineCol),lineCol);  String msg="unexpected new layer";  msg=buildErrInfo(lineCol) + msg;  error(msg + " at " + lineCol);  errorList.add(new CompilingError(msg,lineCol,CompilingError.UnexpectedNewLayer));}  }
class C{  public void testDoubleValueNegativeInfinity2(){  byte[] a={-1,-1,-1,-1,-1,-1,-1,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=-1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == Double.NEGATIVE_INFINITY);}  }
class C{  @Override protected void doDelete(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  if (readOnly) {    resp.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  String path=getRelativePath(req);  WebResource resource=resources.getResource(path);  if (resource.exists()) {    if (resource.delete()) {      resp.setStatus(HttpServletResponse.SC_NO_CONTENT);    } else {      resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED);    }  } else {    resp.sendError(HttpServletResponse.SC_NOT_FOUND);  }}  }
class C{  @Override public boolean hasMore() throws NamingException {  return iterator.hasNext();}  }
class C{  public void invalidate(){  net_no=-1;  drill_list.clear();}  }
class C{  public InitializationBuilder(String configFile){  this.configFile=configFile;  subSystemsToInitialize.add(SubSystem.CLIENT_INIT);  subSystemsToInitialize.add(SubSystem.CORE_CONFIG);}  }
class C{  public boolean empty(){  return m_firstFree == 0;}  }
class C{  public SAXException(String message){  super(message);  this.exception=null;}  }
class C{  public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  public String jmxExecute(MBeanServerConnection jmxServerConnection) throws Exception {  if ((jmxServerConnection == null)) {    throw new BuildException("Must open a connection!");  } else   if (isEcho()) {    handleOutput("JMX Connection ref=" + ref + " is open!");  }  return null;}  }
class C{  @Override protected void doWriteObject(ObjectOutputStream stream) throws IOException {  doWriteObject((ObjectOutput)stream);}  }
class C{  public static boolean isValidIANAEncoding(String ianaEncoding){  if (ianaEncoding != null) {    int length=ianaEncoding.length();    if (length > 0) {      char c=ianaEncoding.charAt(0);      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {        for (int i=1; i < length; i++) {          c=ianaEncoding.charAt(i);          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  private static Marshaller assertionFailed(String message) throws JAXBException {  throw new JAXBException(message);}  }
class C{  public void endPrefixMapping(String prefix) throws SAXException {  if (DEBUG)   System.out.println("endPrefixMapping: prefix: " + prefix);  if (null == prefix)   prefix="";  int index=m_contextIndexes.peek() - 1;  do {    index=m_prefixMappings.indexOf(prefix,++index);  } while ((index >= 0) && ((index & 0x01) == 0x01));  if (index > -1) {    m_prefixMappings.setElementAt("%@$#^@#",index);    m_prefixMappings.setElementAt("%@$#^@#",index + 1);  }}  }
class C{  private MsgContactElement parseEntry(String entry,Map userMap) throws JAXBException {  if (entry == null || entry.length() == 0) {    return null;  }  if (entry.indexOf(IDPPConstants.ATTRIBUTE_SEPARATOR) == -1) {    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("IDPPMsgContact.parsEntry: Invalid" + " Entry " + entry);    }    return null;  }  MsgContactElement mse=IDPPUtils.getIDPPFactory().createMsgContactElement();  StringTokenizer st=new StringTokenizer(entry,IDPPConstants.ATTRIBUTE_SEPARATOR);  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (token.indexOf("=") == -1) {      continue;    }    StringTokenizer tokenizer=new StringTokenizer(token,"=");    if (tokenizer.countTokens() != 2) {      continue;    }    String attribute=tokenizer.nextToken();    String value=null;    String mappedAttribute=getAttributeMapper().getDSAttribute(attribute);    if (mappedAttribute == null || mappedAttribute.equals(attribute)) {      value=tokenizer.nextToken();    } else {      value=CollectionHelper.getMapAttr(userMap,mappedAttribute.toLowerCase());    }    if (value == null) {      continue;    }    if (attribute.equals("MsgType")) {      mse.getMsgType().add(getDSTURI(value));    } else     if (attribute.equals("Nick")) {      mse.setNick(getDSTString(value));    } else     if (attribute.equals("LComment")) {      mse.setLComment(getDSTString(value));    } else     if (attribute.equals("MsgMethod")) {      mse.getMsgMethod().add(getDSTURI(value));    } else     if (attribute.equals("MsgTechnology")) {      mse.getMsgTechnology().add(getDSTURI(value));    } else     if (attribute.equals("MsgAccount")) {      mse.setMsgAccount(getDSTString(value));    } else     if (attribute.equals("MsgSubAccount")) {      mse.setMsgSubaccount(getDSTString(value));    } else     if (attribute.equals("MsgProvider")) {      mse.setMsgProvider(getDSTString(value));    } else     if (attribute.equals("id")) {      mse.setId(value);    }  }  return mse;}  }
class C{  public void testCase18(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127,75};  byte bBytes[]={27,-15,65,39,100};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-13,20,-74,-57,-27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.remainder(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private int difference(MutableBigInteger b){  MutableBigInteger a=this;  int sign=a.compare(b);  if (sign == 0)   return 0;  if (sign < 0) {    MutableBigInteger tmp=a;    a=b;    b=tmp;  }  long diff=0;  int x=a.intLen;  int y=b.intLen;  while (y > 0) {    x--;    y--;    diff=(a.value[a.offset + x] & LONG_MASK) - (b.value[b.offset + y] & LONG_MASK) - ((int)-(diff >> 32));    a.value[a.offset + x]=(int)diff;  }  while (x > 0) {    x--;    diff=(a.value[a.offset + x] & LONG_MASK) - ((int)-(diff >> 32));    a.value[a.offset + x]=(int)diff;  }  a.normalize();  return sign;}  }
class C{  public DialogTerminatedEvent(Object source,Dialog dialog){  super(source);  m_dialog=dialog;}  }
class C{  @DataProvider(name="createModifyData") public Object[][] createModifyData(){  CSN csn1=new CSN(1,0,1);  CSN csn2=new CSN(TimeThread.getTime(),123,45);  CSN csn3=new CSN(TimeThread.getTime(),67894123,45678);  AttributeType type=getDescriptionAttributeType();  Modification mod1=new Modification(REPLACE,Attributes.create("description","new value"));  List<Modification> mods1=newArrayList(mod1);  Modification mod2=new Modification(DELETE,Attributes.empty("description"));  List<Modification> mods2=newArrayList(mod1,mod2);  AttributeBuilder builder=new AttributeBuilder(type);  builder.add("string");  builder.add("value");  builder.add("again");  Modification mod3=new Modification(ADD,builder.toAttribute());  List<Modification> mods3=newArrayList(mod3);  List<Modification> mods4=new ArrayList<>();  for (int i=0; i < 10; i++) {    mods4.add(new Modification(ADD,Attributes.create("description","string" + i)));  }  Modification mod5=new Modification(REPLACE,Attributes.create("namingcontexts",TEST_ROOT_DN_STRING));  List<Modification> mods5=newArrayList(mod5);  List<Attribute> eclIncludes=getEntryAttributes();  return new Object[][]{{csn1,"dc=test",mods1,false,SAFE_DATA_MODE,(byte)0,null},{csn2,"dc=cn2",mods1,true,SAFE_READ_MODE,(byte)1,eclIncludes},{csn2,"dc=test with a much longer dn in case this would " + "make a difference",mods1,true,SAFE_READ_MODE,(byte)3,null},{csn2,"dc=test, cn=with a, o=more complex, ou=dn",mods1,false,SAFE_READ_MODE,(byte)5,eclIncludes},{csn2,"cn=use\\, backslash",mods1,true,SAFE_READ_MODE,(byte)3,null},{csn2,"dc=test with several mod",mods2,false,SAFE_DATA_MODE,(byte)16,eclIncludes},{csn2,"dc=test with several values",mods3,false,SAFE_READ_MODE,(byte)3,null},{csn2,"dc=test with long mod",mods4,true,SAFE_READ_MODE,(byte)120,eclIncludes},{csn2,"dc=testDsaOperation",mods5,true,SAFE_DATA_MODE,(byte)99,null},{csn3,"dc=serverIdLargerThan32767",mods1,true,SAFE_READ_MODE,(byte)1,null}};}  }
class C{  public void clear(){  for (int i=0; i < count; i++) {    headers[i].recycle();  }  count=0;}  }
class C{  public static void logAccessMessage(String msgIdName,String data[],SSOToken token) throws SSOException {  logAccessMessage(msgIdName,data,token,null);}  }
class C{  public void initializePersistence(Handler<AsyncResult<Void>> resultHandler){  delegate.initializePersistence(resultHandler);}  }
class C{  @Override public WidgetsModel clone(){  return new WidgetsModel(this);}  }
class C{  private boolean isDeployAllowed(String user){  if (deny != null && deny.matcher(user).matches()) {    return false;  }  if (allow != null) {    if (allow.matcher(user).matches()) {      return true;    } else {      return false;    }  }  return true;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.ModifyType.ModificationType.NewDataType createModifyTypeModificationTypeNewDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ModifyTypeImpl.ModificationTypeImpl.NewDataTypeImpl();}  }
class C{  public void put(long hash,byte[] encoding,Object object){  if (last_cached == cache_size) {    last_cached=0;    cache_is_full=true;  }  int index=last_cached++;  hash|=getSuffHash(encoding);  if (cache_is_full) {    long idx_hash=(hashes[index] | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      System.out.println("WARNING! " + idx);      idx=-(idx + 1);    }    long new_hash_idx=(hash | (index + 1));    int new_idx=Arrays.binarySearch(hashes_idx,new_hash_idx);    if (new_idx >= 0) {      if (idx != new_idx) {        System.out.println("WARNING: ");        System.out.println(">> idx: " + idx + " new_idx: "+ new_idx);      }    } else {      new_idx=-(new_idx + 1);      if (new_idx > idx) {        System.arraycopy(hashes_idx,idx + 1,hashes_idx,idx,new_idx - idx - 1);        hashes_idx[new_idx - 1]=new_hash_idx;      } else       if (idx > new_idx) {        System.arraycopy(hashes_idx,new_idx,hashes_idx,new_idx + 1,idx - new_idx);        hashes_idx[new_idx]=new_hash_idx;      } else {        hashes_idx[new_idx]=new_hash_idx;      }    }  } else {    long idx_hash=(hash | (index + 1));    int idx=Arrays.binarySearch(hashes_idx,idx_hash);    if (idx < 0) {      idx=-(idx + 1);    }    idx=idx - 1;    if (idx != cache_size - index - 1) {      System.arraycopy(hashes_idx,cache_size - index,hashes_idx,cache_size - index - 1,idx - (cache_size - index) + 1);    }    hashes_idx[idx]=idx_hash;  }  hashes[index]=hash;  encodings[index]=encoding;  cache[index]=object;}  }
class C{  private void processPendingEvents(){  try {    logger.debug("Querying cluster events");    QueryRequest queryRequest=newQueryRequest(EVENTS_RESOURCE_CONTAINER.toString());    queryRequest.setQueryId(QUERY_EVENTS);    queryRequest.setAdditionalParameter("instanceId",instanceId);    List<ResourceResponse> results=repoService.query(queryRequest);    for (    ResourceResponse resource : results) {      logger.debug("Found pending cluster event {}",resource.getId());      JsonValue eventMap=resource.getContent().get("event");      ClusterEvent event=new ClusterEvent(eventMap);      boolean success=false;      String listenerId=event.getListenerId();      if (listenerId != null) {        ClusterEventListener listener=listeners.get(listenerId);        if (listener != null) {          success=listener.handleEvent(event);        } else {          logger.warn("No listener {} available to receive event {}",listenerId,event.toJsonValue());          success=true;        }      } else {        success=sendEventToListeners(event);      }      if (success) {        try {          logger.debug("Deleting cluster event {}",resource.getId());          DeleteRequest deleteRequest=newDeleteRequest(EVENTS_RESOURCE_CONTAINER.toString(),resource.getId());          deleteRequest.setRevision(resource.getRevision());          repoService.delete(deleteRequest);        } catch (        ResourceException e) {          logger.error("Error deleting cluster event " + resource.getId(),e);        }      }    }  } catch (  ResourceException e) {    logger.error("Error processing cluster events",e);  }}  }
class C{  public String createJNDIRealm(String parent) throws Exception {  JNDIRealm realm=new JNDIRealm();  ObjectName pname=new ObjectName(parent);  Container container=getParentContainerFromParent(pname);  container.setRealm(realm);  ObjectName oname=realm.getObjectName();  if (oname != null) {    return (oname.toString());  } else {    return null;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElement;  Node imported;  boolean success;  String nodeNameOrig;  String nodeNameImported;  doc=(Document)load("staffNS",true);  docElement=doc.getDocumentElement();  imported=doc.importNode(docElement,false);  success=imported.hasChildNodes();  assertFalse("documentimportnode11",success);  nodeNameImported=imported.getNodeName();  nodeNameOrig=docElement.getNodeName();  assertEquals("documentimportnode11_NodeName",nodeNameImported,nodeNameOrig);}  }
class C{  private static ByteString checkLowercase(ByteString name) throws IOException {  for (int i=0, length=name.size(); i < length; i++) {    byte c=name.getByte(i);    if (c >= 'A' && c <= 'Z') {      throw new IOException("PROTOCOL_ERROR response malformed: mixed case name: " + name.utf8());    }  }  return name;}  }
class C{  protected BooleanControl(Type type,boolean initialValue,String trueStateLabel,String falseStateLabel){  super(type);  this.value=initialValue;  this.trueStateLabel=trueStateLabel;  this.falseStateLabel=falseStateLabel;}  }
class C{  public FrameBodyTMOO(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public UserAttributes(){  propertyValues=new HashSet<String>();}  }
class C{  @Override public boolean isExpired(){  return !isNeverExpires() && super.isExpired();}  }
class C{  private static void addAttrsFromAdministratorProperties(AddRequest request,Map<AdministratorProperty,Object> adminProperties,boolean passwordRequired) throws ADSContextException {  if (passwordRequired) {    request.addAttribute("userPassword",getAdministratorPassword(adminProperties));  }  request.addAttribute("objectclass","top","person");  request.addAttribute("sn",GLOBAL_ADMIN_UID);  if (adminProperties.containsKey(AdministratorProperty.DESCRIPTION)) {    request.addAttribute("description",adminProperties.get(AdministratorProperty.DESCRIPTION));  }  if (adminProperties.containsKey(AdministratorProperty.PRIVILEGE)) {    LinkedList<?> privileges=(LinkedList<?>)adminProperties.get(AdministratorProperty.PRIVILEGE);    for (    Object o : privileges) {      String p=o.toString();      if (p.startsWith("-")) {        request.removeAttribute("ds-privilege-name",p.substring(1));      } else {        request.addAttribute("ds-privilege-name",p);      }    }  } else {    request.addAttribute(addRootPrivileges());  }  request.addAttribute("ds-pwp-password-policy-dn","cn=Root Password Policy,cn=Password Policies,cn=config");}  }
class C{  private void layoutChunk(RecyclerView.Recycler recycler,RecyclerView.State state,boolean isFillBottom,boolean isPreLayout){  int widthNum=0, heightNum=0, nextItemIndex=0;  int fakeWidthNum=0, fakeHeightNum=0, fakeNextItemIndex=0;  View view=null;  DisappearingViewParams params=null;  if (disappearingViewCache.containsKey(mCurrentPosition)) {    params=disappearingViewCache.get(mCurrentPosition);  }  view=recycler.getViewForPosition(mCurrentPosition);  final LayoutParams lp=(LayoutParams)view.getLayoutParams();  if (itemLayoutWidthCache.get(mCurrentPosition,0) != 0) {    widthNum=itemLayoutWidthCache.get(mCurrentPosition);    heightNum=itemLayoutHeightCache.get(mCurrentPosition);    nextItemIndex=itemOccupiedStartSpan.get(mCurrentPosition);  } else {    if (lp.widthNum != 0) {      widthNum=lp.widthNum;      heightNum=lp.heightNum;    } else {      widthNum=Math.min(2,Math.max(1,lp.width / sizePerSpan));      heightNum=Math.min(2,Math.max(1,lp.height / sizePerSpan));      lp.widthNum=widthNum;      lp.heightNum=heightNum;    }    if (isFillBottom && firstTwoEmptyBottomSpanIndex == -1) {      widthNum=1;    }    itemLayoutWidthCache.put(mCurrentPosition,widthNum);    itemLayoutHeightCache.put(mCurrentPosition,heightNum);    if (isFillBottom) {      nextItemIndex=widthNum == 1 ? firstOneEmptyBottomSpanIndex : firstTwoEmptyBottomSpanIndex;    }    itemOccupiedStartSpan.put(mCurrentPosition,nextItemIndex);  }  if (isPreLayout && !lp.isItemRemoved()) {    fakeWidthNum=lp.widthNum;    fakeHeightNum=lp.heightNum;    if (fakeFirstTwoEmptyBottomSpanIndex == -1) {      fakeWidthNum=1;    }    fakeNextItemIndex=fakeWidthNum == 1 ? fakeFirstOneEmptyBottomSpanIndex : fakeFirstTwoEmptyBottomSpanIndex;    fakeItemLayoutWidthCache.put(fakeCurrentPosition,fakeWidthNum);    fakeItemLayoutHeightCache.put(fakeCurrentPosition,fakeHeightNum);    fakeItemOccupiedStartSpan.put(fakeCurrentPosition,fakeNextItemIndex);  }  int left=0, right=0, top=0, bottom=0;  int fakeLeft=0, fakeRight=0, fakeTop=0, fakeBottom=0;  if (params == null) {    calculateItemDecorationsForChild(view,mDecorInsets);  }  left=getPaddingLeft() + spanWidthBorders[nextItemIndex] + lp.leftMargin;  right=getPaddingLeft() + spanWidthBorders[nextItemIndex + widthNum] - lp.rightMargin;  if (isFillBottom) {    top=getPaddingTop() + spanBottomMin + lp.topMargin;    bottom=getPaddingTop() + spanBottomMin + sizePerSpan * heightNum - lp.bottomMargin;  } else {    bottom=getPaddingTop() + spanTop[nextItemIndex] - lp.bottomMargin;    top=getPaddingTop() + spanTop[nextItemIndex] - sizePerSpan * heightNum + lp.topMargin;  }  if (isPreLayout && !lp.isItemRemoved()) {    fakeLeft=getPaddingLeft() + spanWidthBorders[fakeNextItemIndex] + lp.leftMargin;    fakeRight=getPaddingLeft() + spanWidthBorders[fakeNextItemIndex + fakeWidthNum] - lp.rightMargin;    fakeTop=getPaddingTop() + fakeSpanBottomMin + lp.topMargin;    fakeBottom=getPaddingTop() + fakeSpanBottomMin + sizePerSpan * fakeHeightNum - lp.bottomMargin;  }  if (isFillBottom) {    if (!isPreLayout) {      addView(view);    } else     if (bottom + lp.bottomMargin >= getPaddingTop() || firstAttachedItemPosition != -1 || fakeBottom + lp.bottomMargin >= getPaddingTop() || fakeFirstAttachedItemPosition != -1) {      if (lp.isItemRemoved()) {        addDisappearingView(view);      } else {        addView(view);      }    }  } else   if (!isFillBottom) {    addView(view,0);  }  int widthSpec, heightSpec;  int fakeWidthSpec=0, fakeHeightSpec=0;  if (params == null) {    widthSpec=View.MeasureSpec.makeMeasureSpec(right - left - mDecorInsets.left- mDecorInsets.right,View.MeasureSpec.EXACTLY);    heightSpec=View.MeasureSpec.makeMeasureSpec(bottom - top - mDecorInsets.top- mDecorInsets.bottom,View.MeasureSpec.EXACTLY);  } else {    widthSpec=params.widthSpec;    heightSpec=params.heightSpec;  }  if (isPreLayout && !lp.isItemRemoved()) {    fakeWidthSpec=View.MeasureSpec.makeMeasureSpec(fakeRight - fakeLeft - mDecorInsets.left- mDecorInsets.right,View.MeasureSpec.EXACTLY);    fakeHeightSpec=View.MeasureSpec.makeMeasureSpec(fakeBottom - fakeTop - mDecorInsets.top- mDecorInsets.bottom,View.MeasureSpec.EXACTLY);  }  if (!isPreLayout || (isPreLayout && (bottom + lp.bottomMargin >= getPaddingTop() || firstAttachedItemPosition != -1 || fakeBottom + lp.bottomMargin >= getPaddingTop() || fakeFirstAttachedItemPosition != -1) && !lp.isItemRemoved())) {    view.measure(widthSpec,heightSpec);    layoutDecorated(view,left,top,right,bottom);  }  if (isPreLayout && (bottom + lp.bottomMargin >= getPaddingTop() || firstAttachedItemPosition != -1) && (fakeBottom + lp.bottomMargin < getPaddingTop() && fakeFirstAttachedItemPosition == -1)&& !lp.isItemRemoved()) {    disappearingViewCache.put(fakeCurrentPosition,new DisappearingViewParams(fakeWidthSpec,fakeHeightSpec,fakeLeft,fakeTop,fakeRight,fakeBottom));  }  if (!isPreLayout && params != null) {    disappearingViewCache.remove(mCurrentPosition);  }  if (isFillBottom) {    for (int i=0; i < widthNum; i++)     spanBottom[nextItemIndex + i]+=sizePerSpan * heightNum;    updateSpanBottomParameters();    if (!isPreLayout) {      lastAttachedItemPosition=mCurrentPosition;    } else {      for (int i=0; i < fakeWidthNum; i++)       fakeSpanBottom[fakeNextItemIndex + i]+=sizePerSpan * fakeHeightNum;      updateFakeSpanBottomParameters();      if (fakeFirstAttachedItemPosition == -1 && !lp.isItemRemoved() && fakeBottom + lp.bottomMargin >= getPaddingTop()) {        fakeFirstAttachedItemPosition=fakeCurrentPosition;      }      if (firstAttachedItemPosition == -1 && bottom + lp.bottomMargin >= getPaddingTop()) {        firstAttachedItemPosition=mCurrentPosition;      }    }    mCurrentPosition++;    if (isPreLayout && !lp.isItemRemoved()) {      fakeCurrentPosition++;    }    if (isPreLayout && fakeFirstAttachedItemPosition == -1) {      for (int i=0; i < fakeWidthNum; i++)       fakeSpanTop[fakeNextItemIndex + i]+=sizePerSpan * fakeHeightNum;    }    if (isPreLayout && firstAttachedItemPosition == -1) {      for (int i=0; i < widthNum; i++)       spanTop[nextItemIndex + i]+=sizePerSpan * heightNum;    }  } else {    for (int i=0; i < widthNum; i++)     spanTop[nextItemIndex + i]-=sizePerSpan * heightNum;    updateSpanTopParameters();    firstAttachedItemPosition=mCurrentPosition;    mCurrentPosition--;  }}  }
class C{  public String toString(){  return ("DataStorePrincipal:  " + name);}  }
class C{  void attachView(){  getPresenter().attachView(delegateCallback.getMvpView());}  }
class C{  void deleteTokens(int startIndex,int endIndex) throws Exception {  ArrayList updatedRawTokens=new ArrayList();  updatedRawTokens.addAll(getRawTokens());  Iterator it=updatedRawTokens.iterator();  boolean delete=false;  int deleteCount=0;  Token lastToken=null;  while (it.hasNext()) {    Token nextToken=(Token)it.next();    if (!delete) {      if (nextToken.getTokenIndex() == startIndex) {        if (lastToken != null && lastToken instanceof WhiteSpaceToken) {          lastToken.markDeleted();        }        nextToken.markDeleted();        deleteCount++;        if (startIndex != endIndex) {          delete=true;        }      }    } else {      deleteCount++;      nextToken.markDeleted();      if (nextToken.getTokenIndex() == endIndex) {        delete=false;        break;      }    }    lastToken=nextToken;  }  if (delete == true) {    throw new Exception("Failed to find last token: index " + endIndex);  }  if (startIndex != endIndex && deleteCount < 2) {    throw new Exception("Failed to delete tokens for range: " + startIndex + "-"+ endIndex);  }  if (startIndex == endIndex && deleteCount != 1) {    throw new Exception("Failed to delete token at index: " + startIndex + ", delete count: "+ deleteCount);  }  setRawTokens(updatedRawTokens);}  }
class C{  public Conditions(java.util.Date notBefore,java.util.Date notOnOrAfter) throws SAMLException {  if (notBefore != null) {    if (notOnOrAfter != null) {      if ((notBefore.after(notOnOrAfter)) || (notBefore.equals(notOnOrAfter))) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("Conditions:  invalid   " + " notBefore or notOnOrAfter");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));      } else {        _notBefore=notBefore;        _notOnOrAfter=notOnOrAfter;      }    } else {      _notBefore=notBefore;    }  } else {    _notOnOrAfter=notOnOrAfter;  }}  }
class C{  public boolean canTraverseOutsideSubtree(){  return super.canTraverseOutsideSubtree() ? true : m_arg2.canTraverseOutsideSubtree();}  }
class C{  public VirtualAttribute(AttributeType attributeType,Entry entry,VirtualAttributeRule rule){  this.attributeDescription=AttributeDescription.create(attributeType);  this.entry=entry;  this.rule=rule;  this.provider=rule.getProvider();}  }
class C{  public void deploy(String routeId,String routeName,JsonValue routeConfig) throws RouterHandlerException {  Reject.ifNull(routeName);  write.lock();  try {    load(routeId,routeName,routeConfig.copy());    directoryMonitor.store(routeId,routeConfig);    logger.info("Deployed the route with id '{}' named '{}'",routeId,routeName);  } catch (  IOException e) {    throw new RouterHandlerException(format("An error occurred while storing the route '%s'",routeId),e);  } finally {    write.unlock();  }}  }
class C{  public static NSObject parse(File f) throws IOException, PropertyListFormatException, ParseException, ParserConfigurationException, SAXException {  FileInputStream fis=new FileInputStream(f);  int type=determineType(fis);  fis.close();switch (type) {case TYPE_BINARY:    return BinaryPropertyListParser.parse(f);case TYPE_XML:  return XMLPropertyListParser.parse(f);case TYPE_ASCII:return ASCIIPropertyListParser.parse(f);default :throw new PropertyListFormatException("The given file is not a property list of a supported format.");}}  }
class C{  public void deleteGroupContainers(Set groupContainerDNs) throws AMException, SSOException {  Iterator iter=groupContainerDNs.iterator();  while (iter.hasNext()) {    String groupContainerDN=(String)iter.next();    AMGroupContainer groupContainer=new AMGroupContainerImpl(token,groupContainerDN);    groupContainer.delete();  }}  }
class C{  public void update(byte[] input,int offset,int len){  if (input == null) {    throw new IllegalArgumentException("No input buffer given");  }  if (input.length - offset < len) {    throw new IllegalArgumentException("Input buffer too short");  }  engineUpdate(input,offset,len);  state=IN_PROGRESS;}  }
class C{  public void forceTermination(){  final Phaser root=this.root;  long s;  while ((s=root.state) >= 0) {    if (UNSAFE.compareAndSwapLong(root,stateOffset,s,s | TERMINATION_BIT)) {      releaseWaiters(0);      releaseWaiters(1);      return;    }  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.ModifyElement createModifyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ModifyElementImpl();}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("ExtendedRequest(oid=");  buffer.append(oid);  if (value != null) {    buffer.append(", value=");    buffer.append(value);  }  buffer.append(")");}  }
class C{  public void testNodeDocumentFragmentNormalize1() throws Throwable {  Document doc;  DocumentFragment docFragment;  String nodeValue;  Text txtNode;  Node retval;  doc=(Document)load("hc_staff",builder);  docFragment=doc.createDocumentFragment();  txtNode=doc.createTextNode("foo");  retval=docFragment.appendChild(txtNode);  txtNode=doc.createTextNode("bar");  retval=docFragment.appendChild(txtNode);  docFragment.normalize();  txtNode=(Text)docFragment.getFirstChild();  nodeValue=txtNode.getNodeValue();  assertEquals("normalizedNodeValue","foobar",nodeValue);  retval=txtNode.getNextSibling();  assertNull("singleChild",retval);}  }
class C{  protected boolean stepsEqual(WalkingIterator iter1,WalkingIterator iter2,int numSteps){  AxesWalker aw1=iter1.getFirstWalker();  AxesWalker aw2=iter2.getFirstWalker();  for (int i=0; (i < numSteps); i++) {    if ((null == aw1) || (null == aw2))     return false;    if (!aw1.deepEquals(aw2))     return false;    aw1=aw1.getNextWalker();    aw2=aw2.getNextWalker();  }  assertion((null != aw1) || (null != aw2),"Total match is incorrect!");  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.AuthenticationMethodType createAuthenticationMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.AuthenticationMethodTypeImpl();}  }
class C{  public void startAnimationToWorkspace(final Launcher.State fromState,final Workspace.State fromWorkspaceState,final Workspace.State toWorkspaceState,final int toWorkspacePage,final boolean animated,final Runnable onCompleteRunnable){  if (toWorkspaceState != Workspace.State.NORMAL && toWorkspaceState != Workspace.State.SPRING_LOADED && toWorkspaceState != Workspace.State.OVERVIEW) {    Log.e(TAG,"Unexpected call to startAnimationToWorkspace");  }  if (fromState == Launcher.State.APPS || fromState == Launcher.State.APPS_SPRING_LOADED) {    startAnimationToWorkspaceFromAllApps(fromWorkspaceState,toWorkspaceState,toWorkspacePage,animated,onCompleteRunnable);  } else {    startAnimationToWorkspaceFromWidgets(fromWorkspaceState,toWorkspaceState,toWorkspacePage,animated,onCompleteRunnable);  }}  }
class C{  public static WhoAmIExtendedRequest newWhoAmIExtendedRequest(){  return new WhoAmIExtendedRequestImpl();}  }
class C{  static void copyToForeignTarget(Path source,Path target,CopyOption... options) throws IOException {  CopyOptions opts=CopyOptions.parse(options);  LinkOption[] linkOptions=(opts.followLinks) ? new LinkOption[0] : new LinkOption[]{LinkOption.NOFOLLOW_LINKS};  BasicFileAttributes attrs=Files.readAttributes(source,BasicFileAttributes.class,linkOptions);  if (attrs.isSymbolicLink())   throw new IOException("Copying of symbolic links not supported");  if (opts.replaceExisting) {    Files.deleteIfExists(target);  } else   if (Files.exists(target))   throw new FileAlreadyExistsException(target.toString());  if (attrs.isDirectory()) {    Files.createDirectory(target);  } else {    try (InputStream in=Files.newInputStream(source)){      Files.copy(in,target);    }   }  if (opts.copyAttributes) {    BasicFileAttributeView view=Files.getFileAttributeView(target,BasicFileAttributeView.class);    try {      view.setTimes(attrs.lastModifiedTime(),attrs.lastAccessTime(),attrs.creationTime());    } catch (    Throwable x) {      try {        Files.delete(target);      } catch (      Throwable suppressed) {        x.addSuppressed(suppressed);      }      throw x;    }  }}  }
class C{  public static ComponentUI createUI(JComponent b){  return new SynthRadioButtonMenuItemUI();}  }
class C{  public synchronized void dontUseGui(){  if (okToUseGui) {    okToUseGui=false;synchronized (children) {      for (Iterator i=children.keySet().iterator(); i.hasNext(); ) {        Visibility v=getChildVisibility(i.next());        if (v != null)         v.dontUseGui();      }    }  }}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  menu.add(Menu.NONE,MENU_SETTINGS,Menu.NONE,getString(R.string.settings_label)).setIcon(android.R.drawable.ic_menu_preferences).setAlphabeticShortcut('s');  menu.add(Menu.NONE,MENU_CLEAR_LOGS,Menu.NONE,getString(R.string.clear_logs)).setAlphabeticShortcut('c').setIcon(android.R.drawable.ic_menu_close_clear_cancel);  return super.onCreateOptionsMenu(menu);}  }
class C{  public Item(char p,char c){  parent=p;  child=c;}  }
class C{  public static QrCode encodeSegments(List<QrSegment> segs,Ecc ecl,int minVersion,int maxVersion,int mask,boolean boostEcl){  if (segs == null || ecl == null)   throw new NullPointerException();  if (!(1 <= minVersion && minVersion <= maxVersion && maxVersion <= 40) || mask < -1 || mask > 7)   throw new IllegalArgumentException("Invalid value");  int version, dataUsedBits;  for (version=minVersion; ; version++) {    int dataCapacityBits=getNumDataCodewords(version,ecl) * 8;    dataUsedBits=QrSegment.getTotalBits(segs,version);    if (dataUsedBits != -1 && dataUsedBits <= dataCapacityBits)     break;    if (version >= maxVersion)     throw new IllegalArgumentException("Data too long");  }  if (dataUsedBits == -1)   throw new AssertionError();  for (  Ecc newEcl : Ecc.values()) {    if (boostEcl && dataUsedBits <= getNumDataCodewords(version,newEcl) * 8)     ecl=newEcl;  }  int dataCapacityBits=getNumDataCodewords(version,ecl) * 8;  BitBuffer bb=new BitBuffer();  for (  QrSegment seg : segs) {    bb.appendBits(seg.mode.modeBits,4);    bb.appendBits(seg.numChars,seg.mode.numCharCountBits(version));    bb.appendData(seg);  }  bb.appendBits(0,Math.min(4,dataCapacityBits - bb.bitLength()));  bb.appendBits(0,(8 - bb.bitLength() % 8) % 8);  for (int padByte=0xEC; bb.bitLength() < dataCapacityBits; padByte^=0xEC ^ 0x11)   bb.appendBits(padByte,8);  if (bb.bitLength() % 8 != 0)   throw new AssertionError();  return new QrCode(version,ecl,bb.getBytes(),mask);}  }
class C{  public final void testGetP(){  DSAPrivateKeySpec dpks=new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(2,dpks.getP().intValue());}  }
class C{  void shutdown(){  cursor=NONE;  if (nextIndex >= 0)   nextIndex=REMOVED;  if (lastRet >= 0) {    lastRet=REMOVED;    lastItem=null;  }  prevTakeIndex=DETACHED;}  }
class C{  public LDIFExportConfig(String ldifFile,ExistingFileBehavior existingFileBehavior){  this.ldifFile=ldifFile;  this.existingFileBehavior=existingFileBehavior;  ldifOutputStream=null;  excludeBranches=new ArrayList<>();  includeBranches=new ArrayList<>();  excludeFilters=new ArrayList<>();  includeFilters=new ArrayList<>();  compressData=false;  encryptData=false;  hashData=false;  includeObjectClasses=true;  includeOperationalAttributes=true;  includeVirtualAttributes=false;  invokeExportPlugins=false;  signHash=false;  typesOnly=false;  writer=null;  excludeAttributes=new HashSet<>();  includeAttributes=new HashSet<>();  wrapColumn=-1;}  }
class C{  @Override public long end() throws IOException {  return 0;}  }
class C{  public void testCreateDocumentType1() throws Throwable {  String publicId="STAFF";  String systemId="staff.xml";  String malformedName="prefix::local";  Document doc;  DOMImplementation domImpl;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();{    boolean success=false;    try {      domImpl.createDocumentType(malformedName,publicId,systemId);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public int next(){  int node;  do {    node=_currentNode;    _currentNode=m_traverser.next(_startNode,_currentNode);  } while (node != DTM.NULL && (getExpandedTypeID(node) != _nodeType && getNodeType(node) != _nodeType));  return (node == DTM.NULL ? DTM.NULL : returnNode(node));}  }
class C{  void waitConnections(){  final long myDomainTicket;synchronized (connectThreadLock) {synchronized (domainTicketLock) {      myDomainTicket=domainTicket + 1;    }    connectThreadLock.notify();  }synchronized (domainTicketLock) {    while (myDomainTicket > domainTicket && !shutdown.get()) {      try {        domainTicketLock.wait(500);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();      }    }  }}  }
class C{  public boolean valueChanged(){  return valueChanged;}  }
class C{  private void resolveCollectiveConflict(CollectiveConflictBehavior conflictBehavior,Attribute collectiveAttr,List<Attribute> attrList,Map<AttributeType,List<Attribute>> attributes,AttributeType attributeType){  if (attrList.get(0).isVirtual()) {    return;  }switch (conflictBehavior) {case REAL_OVERRIDES_VIRTUAL:    break;case VIRTUAL_OVERRIDES_REAL:  suppressedAttributes.put(attributeType,attrList);attributes.put(attributeType,newLinkedList(collectiveAttr));break;case MERGE_REAL_AND_VIRTUAL:attrList.add(collectiveAttr);break;}}  }
class C{  public void rearrangeChildren(int itemCount){  ArrayList<View> views=getItemsInReadingOrder();  mContent.arrangeChildren(views,Math.max(itemCount,views.size()));  mItemsInvalidated=true;}  }
class C{  public int component_count(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("component_count",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    return $self.component_count();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static boolean isTimesEqaualed(Date time1,Date time2){  return formatTime(time1).equals(formatTime(time2));}  }
class C{  public HeapException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void testAddStrikethroughSpan(){  mRichTextView.formatSpan(0,5,RichTextView.FormatType.STRIKETHROUGH);  Object[] spans=mRichTextView.getSpans();  assertEquals(1,spans.length);  Object firstSpan=spans[0];  assertTrue(firstSpan instanceof StrikethroughSpan);}  }
class C{  @VisibleForTesting OAuth2Jwt validateIdToken(OAuth2Request request) throws OAuth2Exception, RealmLookupException {  final String jwt=request.getParameter(OAuth2Constants.JWTTokenParams.ID_TOKEN);  if (StringUtils.isBlank(jwt)) {    throw new BadRequestException("no id_token in request");  }  final OAuth2Jwt idToken;  try {    idToken=OAuth2Jwt.create(jwt);  } catch (  InvalidJwtException e) {    throw new BadRequestException("invalid id_token: " + e.getMessage());  }  request.setToken(OpenIdConnectToken.class,new OpenIdConnectToken(idToken.getSignedJwt().getClaimsSet()));  final String clientId=CollectionUtils.getFirstItem(idToken.getSignedJwt().getClaimsSet().getAudience());  final String realm=idToken.getSignedJwt().getClaimsSet().get(OAuth2Constants.JWTTokenParams.REALM).defaultTo("/").asString();  setRealmOnRequest(request,realm);  final OpenIdConnectClientRegistration clientRegistration=clientRegistrationStore.get(clientId,new ValidateIdTokenRequest(request,realm));  JwsAlgorithm algorithm=JwsAlgorithm.valueOf(clientRegistration.getIDTokenSignedResponseAlgorithm());  boolean requiresClientAuthentication=providerSettingsFactory.get(request).isIdTokenInfoClientAuthenticationEnabled();  if (requiresClientAuthentication && algorithm.getAlgorithmType().equals(JwsAlgorithmType.HMAC)) {    clientAuthenticator.authenticate(request,urisFactory.get(request).getTokenEndpoint());  }  if (idToken.isExpired()) {    throw new BadRequestException("id_token has expired");  }  if (!clientRegistration.verifyJwtIdentity(idToken)) {    throw new BadRequestException("invalid id_token");  }  return idToken;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturecore.class,args);}  }
class C{  Clause buildStringValueClause(String propTable,String operand,String placeholder){  return where(propTable + ".propvalue " + operand+ " ${"+ placeholder+ "}");}  }
class C{  public static boolean matchSecret(String secret){  return secretSet.remove(secret);}  }
class C{  public Vector(int capacity,int capacityIncrement){  if (capacity < 0) {    throw new IllegalArgumentException("capacity < 0: " + capacity);  }  elementData=newElementArray(capacity);  elementCount=0;  this.capacityIncrement=capacityIncrement;}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) public void start(Context context,Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public AsfExtHeaderModifier(final List<ChunkModifier> modifiers){  assert modifiers != null;  this.modifierList=new ArrayList<ChunkModifier>(modifiers);}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public void sendSearchEntry(SearchOperation searchOperation,SearchResultEntry searchEntry) throws DirectoryException {  ((InternalSearchOperation)searchOperation).addSearchEntry(searchEntry);}  }
class C{  public void fatalError(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {  String formattedMsg=e.getMessage();  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    handler.fatalError(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  @Override public void unbind(Name name) throws NamingException {  getBoundContext().unbind(parseName(name));}  }
class C{  public String toXML(){  StringBuilder sb=new StringBuilder();  Iterator iter=resourceResults.iterator();  while (iter.hasNext()) {    ResourceResult rr=(ResourceResult)iter.next();    sb.append(rr.toXML());  }  return sb.toString();}  }
class C{  public boolean hasUnterminatedLine(){  return end == -1;}  }
class C{  @Override public void closeJDBCConn(){  if (conn != null) {    try {      System.out.println("StreamingQuoteDAOModeFull.closeJDBCConn(): Closing JDBC connection for Streaming Quote...");      conn.close();    } catch (    SQLException e) {      System.out.println("StreamingQuoteDAOModeFull.closeJDBCConn(): SQLException on conn close");      e.printStackTrace();    }  } else {    System.out.println("StreamingQuoteDAOModeFull.closeJDBCConn(): WARNING: DB connection already null");  }}  }
class C{  @Override public BasicSplitPaneDivider createDefaultDivider(){  SynthSplitPaneDivider divider=new SynthSplitPaneDivider(this);  divider.setDividerSize(splitPane.getDividerSize());  return divider;}  }
class C{  private int[][] generateWorkingKey(byte[] key,boolean forEncryption){  int KC=key.length / 4;  int t;  if (((KC != 4) && (KC != 6) && (KC != 8)) || ((KC * 4) != key.length)) {    throw new IllegalArgumentException("Key length not 128/192/256 bits.");  }  ROUNDS=KC + 6;  int[][] W=new int[ROUNDS + 1][4];  t=0;  int i=0;  while (i < key.length) {    W[t >> 2][t & 3]=(key[i] & 0xff) | ((key[i + 1] & 0xff) << 8) | ((key[i + 2] & 0xff) << 16)| (key[i + 3] << 24);    i+=4;    t++;  }  int k=(ROUNDS + 1) << 2;  for (i=KC; (i < k); i++) {    int temp=W[(i - 1) >> 2][(i - 1) & 3];    if ((i % KC) == 0) {      temp=subWord(shift(temp,8)) ^ rcon[(i / KC) - 1];    } else     if ((KC > 6) && ((i % KC) == 4)) {      temp=subWord(temp);    }    W[i >> 2][i & 3]=W[(i - KC) >> 2][(i - KC) & 3] ^ temp;  }  if (!forEncryption) {    for (int j=1; j < ROUNDS; j++) {      for (i=0; i < 4; i++) {        W[j][i]=inv_mcol(W[j][i]);      }    }  }  return W;}  }
class C{  public ZoneField zoneField() throws ParseException {  try {    ZoneField zoneField=new ZoneField();    this.lexer.match('z');    this.lexer.SPorHT();    this.lexer.match('=');    this.lexer.SPorHT();    while (lexer.hasMoreChars()) {      char la=lexer.lookAhead(0);      if (la == '\n' || la == '\r')       break;      ZoneAdjustment zoneAdjustment=new ZoneAdjustment();      lexer.match(LexerCore.ID);      Token time=lexer.getNextToken();      this.lexer.SPorHT();      String timeValue=time.getTokenValue();      if (timeValue.length() > 18)       timeValue=timeValue.substring(timeValue.length() - 18);      zoneAdjustment.setTime(Long.parseLong(timeValue));      lexer.match(LexerCore.ID);      Token offset=lexer.getNextToken();      this.lexer.SPorHT();      String sign=getSign(offset.getTokenValue());      TypedTime typedTime=getTypedTime(offset.getTokenValue());      zoneAdjustment.setSign(sign);      zoneAdjustment.setOffset(typedTime);      zoneField.addZoneAdjustment(zoneAdjustment);    }    return zoneField;  } catch (  Exception e) {    throw lexer.createParseException();  }}  }
class C{  private boolean validateResourceNamesUsingRegex(String resource,Set<String> regexPatterns,RegExResourceName resourceHandler){  for (  String regex : regexPatterns) {    ResourceMatch match=resourceHandler.compare(regex,resource,true);    if (match == ResourceMatch.EXACT_MATCH || match == ResourceMatch.WILDCARD_MATCH || match == ResourceMatch.SUB_RESOURCE_MATCH) {      return true;    }  }  return false;}  }
class C{  public static SimpleBindRequest copyOfSimpleBindRequest(final SimpleBindRequest request){  return new SimpleBindRequestImpl(request);}  }
class C{  public String sendRestCommand(SSOTokenID ssoTokenID,URL url,String requestMethod,Map<String,String> headers,String data) throws IOException {  headers.put(SystemProperties.get(Constants.AM_COOKIE_NAME,"iPlanetDirectoryPro"),ssoTokenID.toString());  return sendRestCommand(url,requestMethod,headers,data);}  }
class C{  public static <T>T min(Collection<? extends T> collection,Comparator<? super T> comparator){  if (comparator == null) {    @SuppressWarnings("unchecked") T result=(T)min((Collection<Comparable>)collection);    return result;  }  Iterator<? extends T> it=collection.iterator();  T min=it.next();  while (it.hasNext()) {    T next=it.next();    if (comparator.compare(min,next) > 0) {      min=next;    }  }  return min;}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  public static ComponentListener remove(ComponentListener l,ComponentListener oldl){  return (ComponentListener)removeInternal(l,oldl);}  }
class C{  public static int combine(int hashCode,boolean value){  int v=value ? 1231 : 1237;  return combine(hashCode,v);}  }
class C{  public void removeHeader(String name){  if (qheaders != null)   qheaders.delete(name);}  }
class C{  public void handleFlushError(Throwable ex){  System.err.println(ERR_LOGGER_ERROR_FLUSHING_BUFFER.get(publisherConfigDN,stackTraceToSingleLineString(ex)));}  }
class C{  protected synchronized void bcsPreSerializationHook(ObjectOutputStream oos) throws IOException {  oos.writeInt(serializable);  if (serializable <= 0)   return;  int count=0;  Iterator i=services.entrySet().iterator();  while (i.hasNext() && count < serializable) {    Map.Entry entry=(Map.Entry)i.next();    BCSSServiceProvider bcsp=null;    try {      bcsp=(BCSSServiceProvider)entry.getValue();    } catch (    ClassCastException cce) {      continue;    }    if (bcsp.getServiceProvider() instanceof Serializable) {      oos.writeObject(entry.getKey());      oos.writeObject(bcsp);      count++;    }  }  if (count != serializable)   throw new IOException("wrote different number of service providers than expected");}  }
class C{  @Override protected void writeValue(ASN1Writer writer) throws IOException {  writer.writeOctetString(authorizationID);}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  private Object evaluateNodeValue(int valueType,final XMPNode propNode) throws XMPException {  final Object value;  String rawValue=propNode.getValue();switch (valueType) {case VALUE_BOOLEAN:    value=XMPUtils.convertToBoolean(rawValue);  break;case VALUE_INTEGER:value=XMPUtils.convertToInteger(rawValue);break;case VALUE_LONG:value=XMPUtils.convertToLong(rawValue);break;case VALUE_DOUBLE:value=XMPUtils.convertToDouble(rawValue);break;case VALUE_DATE:value=XMPUtils.convertToDate(rawValue);break;case VALUE_CALENDAR:XMPDateTime dt=XMPUtils.convertToDate(rawValue);value=dt.getCalendar();break;case VALUE_BASE64:value=XMPUtils.decodeBase64(rawValue);break;case VALUE_STRING:default :value=rawValue != null || propNode.getOptions().isCompositeProperty() ? rawValue : "";break;}return value;}  }
class C{  public void testClose() throws SQLException {  Statement st=null;  ResultSet res=null;  try {    String[] queries={"update zoo set name='Masha', family='cat' where id=2;","insert into zoo (id, name, family) values (3, 'Vorobey', 'sparrow');","insert into zoo (id, name, family) values (4, 'Slon', 'elephant');","select * from zoo"};    st=conn.createStatement();    for (int i=0; i < queries.length; i++) {      st.execute(queries[i]);    }    res=st.getResultSet();    assertNotNull(res);    assertTrue(res.next());    st.close();  }  finally {    try {      st.close();    } catch (    SQLException ee) {    }  }  try {    res.next();    fail("Exception expected");  } catch (  SQLException e) {  }}  }
class C{  public boolean isAllowed(){  return allowed;}  }
class C{  public static boolean isAlpha(final char c){  final ASCIICharProp cp=ASCIICharProp.valueOf(c);  return cp != null ? cp.isLetter() : false;}  }
class C{  @Override public int read(byte[] b) throws IOException {  return this.read(b,0,b.length);}  }
class C{  public void paintListBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public ByteStringBuilder(final int capacity){  Reject.ifFalse(capacity >= 0,"capacity must be >= 0");  this.buffer=new byte[capacity];  this.length=0;}  }
class C{  public String toString(){  return ("SAEPrincipal:  " + name);}  }
class C{  public void actualizeTagsProperties(){  for (  Map.Entry<IAccessibleElement,PdfStructElem> structToModel : connectedModelToStruct.entrySet()) {    IAccessibleElement element=structToModel.getKey();    PdfStructElem structElem=structToModel.getValue();    structElem.setRole(element.getRole());    if (element.getAccessibilityProperties() != null) {      element.getAccessibilityProperties().setToStructElem(structElem);    }  }}  }
class C{  public HashPrintJobAttributeSet(PrintJobAttribute[] attributes){  super(attributes,PrintJobAttribute.class);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns04.class,args);}  }
class C{  public void test_setNameConstraintsLB$() throws IOException {  X509CertSelector selector=new X509CertSelector();  for (int i=0; i < constraintBytes.length; i++) {    selector.setNameConstraints(constraintBytes[i]);    assertTrue(Arrays.equals(constraintBytes[i],selector.getNameConstraints()));  }}  }
class C{  public Position createPosition(int offset) throws BadLocationException {  if (marks == null) {    marks=new Vector<PosRec>();  }  return new StickyPosition(offset);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof ECFieldF2m) {    ECFieldF2m o=(ECFieldF2m)obj;    if (this.m == o.m) {      if (this.rp == null) {        if (o.rp == null) {          return true;        }      } else {        return Arrays.equals(this.ks,o.ks);      }    }  }  return false;}  }
class C{  public static void sort(short[] a){  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);}  }
class C{  public int hashCode(){  return ((location == null ? 0 : location.hashCode() << 24) ^ (groupID == null ? 0 : groupID.hashCode() << 16) ^ (className == null ? 0 : className.hashCode() << 9)^ (data == null ? 0 : data.hashCode() << 1)^ (restart ? 1 : 0));}  }
class C{  public static void disableCache(){  typeVariableCache.clear();  CACHE_ENABLED=false;}  }
class C{  public static void logCurrent(String msg){  EGLDisplay display;  EGLContext context;  EGLSurface surface;  display=EGL14.eglGetCurrentDisplay();  context=EGL14.eglGetCurrentContext();  surface=EGL14.eglGetCurrentSurface(EGL14.EGL_DRAW);  Log.i(TAG,"Current EGL (" + msg + "): display="+ display+ ", context="+ context+ ", surface="+ surface);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  if (counter == 99)   new Ttask();  this.counter++;  try {    Response response=messageFactory.createResponse(Response.BUSY_HERE,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    if (serverTransaction == null) {      serverTransaction=sipProvider.getNewServerTransaction(request);    }    serverTransaction.sendResponse(response);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean isScheduled(){  return scheduledExecutionTime() != -1;}  }
class C{  public static FontProgram createRegisteredFont(String fontName) throws java.io.IOException {  return fontRegisterProvider.getFont(fontName,FontConstants.UNDEFINED);}  }
class C{  public static ArgumentException missingNameInPropertyModification(String arg){  LocalizableMessage msg=ERR_DSCFG_ERROR_NO_NAME_IN_PROPERTY_MOD.get(arg);  return new ArgumentException(msg);}  }
class C{  public void test_SelectUnionItself() throws SQLException {  String sql="SELECT b.cnum, b.cname" + " FROM " + DatabaseCreator.CUSTOMERS_TABLE + " a, "+ DatabaseCreator.CUSTOMERS_TABLE+ " b"+ " WHERE a.snum = 1002"+ " AND b.city = a.city";  ResultSet result=statement.executeQuery(sql);  HashMap<Integer,String> value=new HashMap<Integer,String>();  value.put(2003,"Liu");  value.put(2004,"Grass");  value.put(2008,"Cisneros");  while (result.next()) {    int key=result.getInt("cnum");    String val=result.getString("cname");    assertTrue("wrong value of cnum field",value.containsKey(key));    assertEquals("wrong value of cname field",value.get(key),val);    value.remove(key);  }  assertTrue("expected rows number doesn't equal actual rows number",value.isEmpty());  result.close();}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String[] params={};  System.out.println("RYA : EMB: ");  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_EMBEDDED_STATUS",params);    String port=getStringOptionValue(IArgument.EMBEDDED_PORT);    String passwd=getAdminPassword();    if (passwd == null) {      passwd=getStringOptionValue(IArgument.EMBEDDED_PASSWORD);    }    ByteArrayOutputStream bos=new ByteArrayOutputStream();    ByteArrayOutputStream boe=new ByteArrayOutputStream();    Logger.token.set(adminSSOToken);    int stat=EmbeddedOpenDS.getReplicationStatus(port,passwd,bos,boe);    Logger.token.set(null);    String str=bos.toString();    String stre=boe.toString();    String[] params1={Integer.toString(stat)};    outputWriter.printMessage(MessageFormat.format(getResourceString("embedded-status-status"),(Object[])params1));    outputWriter.printlnMessage("\n");    outputWriter.printlnMessage(str);    outputWriter.printlnMessage("\n");    outputWriter.printlnMessage(stre);    outputWriter.printlnMessage("\n");    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_EMBEDDED_STATUS",params);  } catch (  Exception e) {    String[] args={e.getMessage()};    debugError("EmbeddedStatus.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_EMBEDDED_STATUS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void addResourceLink(ContextResourceLink resourceLink){  Reference ref=new ResourceLinkRef(resourceLink.getType(),resourceLink.getGlobal(),resourceLink.getFactory(),null);  Iterator<String> i=resourceLink.listProperties();  while (i.hasNext()) {    String key=i.next();    Object val=resourceLink.getProperty(key);    if (val != null) {      StringRefAddr refAddr=new StringRefAddr(key,val.toString());      ref.add(refAddr);    }  }  javax.naming.Context ctx="UserTransaction".equals(resourceLink.getName()) ? compCtx : envCtx;  try {    if (log.isDebugEnabled())     log.debug("  Adding resource link " + resourceLink.getName());    createSubcontexts(envCtx,resourceLink.getName());    ctx.bind(resourceLink.getName(),ref);  } catch (  NamingException e) {    log.error(sm.getString("naming.bindFailed",e));  }  ResourceLinkFactory.registerGlobalResourceAccess(getGlobalNamingContext(),resourceLink.getName(),resourceLink.getGlobal());}  }
class C{  static void shutdownServer(LocalizableMessage reason){  if (SERVER_STARTED) {    InvocationCounterPlugin.resetShutdownCalled();    DirectoryServer.shutDown("org.opends.server.TestCaseUtils",reason);    assertTrue(InvocationCounterPlugin.shutdownCalled());    SERVER_STARTED=false;  }}  }
class C{  public static String encodeDataFlavor(DataFlavor flav){  return (flav != null) ? SystemFlavorMap.encodeJavaMIMEType(flav.getMimeType()) : null;}  }
class C{  public static void cleanEmbeddedCassandra(){  dropKeyspaces();}  }
class C{  @Override protected void doCatch(Throwable throwable){  exceptionHandler.handle(throwable,getResponse());}  }
class C{  public SpannableStringBuilder(){  this("");}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  static boolean continueEvaluationOnDenyDecision(){  return continueEvaluationOnDenyDecisionFlag;}  }
class C{  ICC_ProfileRGB(Profile p){  super(p);}  }
class C{  private final boolean lookbehind(char c,int n){  boolean isToken;  int lookBehindPos=m_queueMark - (n + 1);  if (lookBehindPos >= 0) {    String lookbehind=(String)m_ops.m_tokenQueue.elementAt(lookBehindPos);    if (lookbehind.length() == 1) {      char c0=(lookbehind == null) ? '|' : lookbehind.charAt(0);      isToken=(c0 == '|') ? false : (c0 == c);    } else {      isToken=false;    }  } else {    isToken=false;  }  return isToken;}  }
class C{  public UserPasswordAttribute(Authenticator ra,String secret,String password){  super(UserPasswordAttribute.toOctets(ra,secret,password));}  }
class C{  @Override public boolean accept(File dir,String name){  if (dir != null && new File(dir,name).isDirectory()) {    return false;  }  for (  String wildcard : wildcards) {    if (FilenameUtils.wildcardMatch(name,wildcard)) {      return true;    }  }  return false;}  }
class C{  private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  public String paramString(){  String scrollTypeStr=null;  if (getScrollType() == WHEEL_UNIT_SCROLL) {    scrollTypeStr="WHEEL_UNIT_SCROLL";  } else   if (getScrollType() == WHEEL_BLOCK_SCROLL) {    scrollTypeStr="WHEEL_BLOCK_SCROLL";  } else {    scrollTypeStr="unknown scroll type";  }  return super.paramString() + ",scrollType=" + scrollTypeStr+ ",scrollAmount="+ getScrollAmount()+ ",wheelRotation="+ getWheelRotation()+ ",preciseWheelRotation="+ getPreciseWheelRotation();}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String() throws Exception {  Provider[] providers=Security.getProviders("KeyPairGenerator.DSA");  for (int i=0; i < providers.length; i++) {    KeyPairGenerator.getInstance("DSA",providers[i].getName());  }  try {    KeyPairGenerator.getInstance("DSA","");    fail("Should have thrown IllegalArgumentException");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public StyleContext(){  styles=new NamedStyle(null);  addStyle(DEFAULT_STYLE,null);}  }
class C{  public ProductService deleteAllProducts(Handler<AsyncResult<Void>> resultHandler){  delegate.deleteAllProducts(resultHandler);  return this;}  }
class C{  private Dimension insetSize(Container parent){  Insets insets=parent.getInsets();  int w=insets.left + insets.right;  int h=insets.top + insets.bottom;  return new Dimension(w,h);}  }
class C{  public EmbeddedServletOptions(ServletConfig config,ServletContext context){  Enumeration<String> enumeration=config.getInitParameterNames();  while (enumeration.hasMoreElements()) {    String k=enumeration.nextElement();    String v=config.getInitParameter(k);    setProperty(k,v);  }  String keepgen=config.getInitParameter("keepgenerated");  if (keepgen != null) {    if (keepgen.equalsIgnoreCase("true")) {      this.keepGenerated=true;    } else     if (keepgen.equalsIgnoreCase("false")) {      this.keepGenerated=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.keepgen"));      }    }  }  String trimsp=config.getInitParameter("trimSpaces");  if (trimsp != null) {    if (trimsp.equalsIgnoreCase("true")) {      trimSpaces=true;    } else     if (trimsp.equalsIgnoreCase("false")) {      trimSpaces=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.trimspaces"));      }    }  }  this.isPoolingEnabled=true;  String poolingEnabledParam=config.getInitParameter("enablePooling");  if (poolingEnabledParam != null && !poolingEnabledParam.equalsIgnoreCase("true")) {    if (poolingEnabledParam.equalsIgnoreCase("false")) {      this.isPoolingEnabled=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.enablePooling"));      }    }  }  String mapFile=config.getInitParameter("mappedfile");  if (mapFile != null) {    if (mapFile.equalsIgnoreCase("true")) {      this.mappedFile=true;    } else     if (mapFile.equalsIgnoreCase("false")) {      this.mappedFile=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.mappedFile"));      }    }  }  String debugInfo=config.getInitParameter("classdebuginfo");  if (debugInfo != null) {    if (debugInfo.equalsIgnoreCase("true")) {      this.classDebugInfo=true;    } else     if (debugInfo.equalsIgnoreCase("false")) {      this.classDebugInfo=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.classDebugInfo"));      }    }  }  String checkInterval=config.getInitParameter("checkInterval");  if (checkInterval != null) {    try {      this.checkInterval=Integer.parseInt(checkInterval);    } catch (    NumberFormatException ex) {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.checkInterval"));      }    }  }  String modificationTestInterval=config.getInitParameter("modificationTestInterval");  if (modificationTestInterval != null) {    try {      this.modificationTestInterval=Integer.parseInt(modificationTestInterval);    } catch (    NumberFormatException ex) {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.modificationTestInterval"));      }    }  }  String recompileOnFail=config.getInitParameter("recompileOnFail");  if (recompileOnFail != null) {    if (recompileOnFail.equalsIgnoreCase("true")) {      this.recompileOnFail=true;    } else     if (recompileOnFail.equalsIgnoreCase("false")) {      this.recompileOnFail=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.recompileOnFail"));      }    }  }  String development=config.getInitParameter("development");  if (development != null) {    if (development.equalsIgnoreCase("true")) {      this.development=true;    } else     if (development.equalsIgnoreCase("false")) {      this.development=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.development"));      }    }  }  String suppressSmap=config.getInitParameter("suppressSmap");  if (suppressSmap != null) {    if (suppressSmap.equalsIgnoreCase("true")) {      isSmapSuppressed=true;    } else     if (suppressSmap.equalsIgnoreCase("false")) {      isSmapSuppressed=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.suppressSmap"));      }    }  }  String dumpSmap=config.getInitParameter("dumpSmap");  if (dumpSmap != null) {    if (dumpSmap.equalsIgnoreCase("true")) {      isSmapDumped=true;    } else     if (dumpSmap.equalsIgnoreCase("false")) {      isSmapDumped=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.dumpSmap"));      }    }  }  String genCharArray=config.getInitParameter("genStringAsCharArray");  if (genCharArray != null) {    if (genCharArray.equalsIgnoreCase("true")) {      genStringAsCharArray=true;    } else     if (genCharArray.equalsIgnoreCase("false")) {      genStringAsCharArray=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.genchararray"));      }    }  }  String errBeanClass=config.getInitParameter("errorOnUseBeanInvalidClassAttribute");  if (errBeanClass != null) {    if (errBeanClass.equalsIgnoreCase("true")) {      errorOnUseBeanInvalidClassAttribute=true;    } else     if (errBeanClass.equalsIgnoreCase("false")) {      errorOnUseBeanInvalidClassAttribute=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.errBean"));      }    }  }  String ieClassId=config.getInitParameter("ieClassId");  if (ieClassId != null)   this.ieClassId=ieClassId;  String classpath=config.getInitParameter("classpath");  if (classpath != null)   this.classpath=classpath;  String dir=config.getInitParameter("scratchdir");  if (dir != null && Constants.IS_SECURITY_ENABLED) {    log.info(Localizer.getMessage("jsp.info.ignoreSetting","scratchdir",dir));    dir=null;  }  if (dir != null) {    scratchDir=new File(dir);  } else {    scratchDir=(File)context.getAttribute(ServletContext.TEMPDIR);    if (scratchDir == null) {      dir=System.getProperty("java.io.tmpdir");      if (dir != null)       scratchDir=new File(dir);    }  }  if (this.scratchDir == null) {    log.fatal(Localizer.getMessage("jsp.error.no.scratch.dir"));    return;  }  if (!(scratchDir.exists() && scratchDir.canRead() && scratchDir.canWrite()&& scratchDir.isDirectory()))   log.fatal(Localizer.getMessage("jsp.error.bad.scratch.dir",scratchDir.getAbsolutePath()));  this.compiler=config.getInitParameter("compiler");  String compilerTargetVM=config.getInitParameter("compilerTargetVM");  if (compilerTargetVM != null) {    this.compilerTargetVM=compilerTargetVM;  }  String compilerSourceVM=config.getInitParameter("compilerSourceVM");  if (compilerSourceVM != null) {    this.compilerSourceVM=compilerSourceVM;  }  String javaEncoding=config.getInitParameter("javaEncoding");  if (javaEncoding != null) {    this.javaEncoding=javaEncoding;  }  String compilerClassName=config.getInitParameter("compilerClassName");  if (compilerClassName != null) {    this.compilerClassName=compilerClassName;  }  String fork=config.getInitParameter("fork");  if (fork != null) {    if (fork.equalsIgnoreCase("true")) {      this.fork=true;    } else     if (fork.equalsIgnoreCase("false")) {      this.fork=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.fork"));      }    }  }  String xpoweredBy=config.getInitParameter("xpoweredBy");  if (xpoweredBy != null) {    if (xpoweredBy.equalsIgnoreCase("true")) {      this.xpoweredBy=true;    } else     if (xpoweredBy.equalsIgnoreCase("false")) {      this.xpoweredBy=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.xpoweredBy"));      }    }  }  String displaySourceFragment=config.getInitParameter("displaySourceFragment");  if (displaySourceFragment != null) {    if (displaySourceFragment.equalsIgnoreCase("true")) {      this.displaySourceFragment=true;    } else     if (displaySourceFragment.equalsIgnoreCase("false")) {      this.displaySourceFragment=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.displaySourceFragment"));      }    }  }  String maxLoadedJsps=config.getInitParameter("maxLoadedJsps");  if (maxLoadedJsps != null) {    try {      this.maxLoadedJsps=Integer.parseInt(maxLoadedJsps);    } catch (    NumberFormatException ex) {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.maxLoadedJsps","" + this.maxLoadedJsps));      }    }  }  String jspIdleTimeout=config.getInitParameter("jspIdleTimeout");  if (jspIdleTimeout != null) {    try {      this.jspIdleTimeout=Integer.parseInt(jspIdleTimeout);    } catch (    NumberFormatException ex) {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.jspIdleTimeout","" + this.jspIdleTimeout));      }    }  }  String strictQuoteEscaping=config.getInitParameter("strictQuoteEscaping");  if (strictQuoteEscaping != null) {    if (strictQuoteEscaping.equalsIgnoreCase("true")) {      this.strictQuoteEscaping=true;    } else     if (strictQuoteEscaping.equalsIgnoreCase("false")) {      this.strictQuoteEscaping=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.strictQuoteEscaping"));      }    }  }  String quoteAttributeEL=config.getInitParameter("quoteAttributeEL");  if (quoteAttributeEL != null) {    if (quoteAttributeEL.equalsIgnoreCase("true")) {      this.quoteAttributeEL=true;    } else     if (quoteAttributeEL.equalsIgnoreCase("false")) {      this.quoteAttributeEL=false;    } else {      if (log.isWarnEnabled()) {        log.warn(Localizer.getMessage("jsp.warning.quoteAttributeEL"));      }    }  }  tldCache=TldCache.getInstance(context);  jspConfig=new JspConfig(context);  tagPluginManager=new TagPluginManager(context);}  }
class C{  private void processPasswordPolicyModifications() throws DirectoryException {  currentPasswordProvided=false;  isEnabled=true;  enabledStateChanged=false;  final PasswordPolicy authPolicy=pwPolicyState.getAuthenticationPolicy();  if (currentEntry.hasAttribute(authPolicy.getPasswordAttribute())) {    numPasswords=1;  } else {    numPasswords=0;  }  passwordChanged=!isInternalOperation() && !isSynchronizationOperation() && isModifyingPassword();  for (  Modification m : modifications) {    AttributeType t=m.getAttribute().getAttributeDescription().getAttributeType();    if (isPassword(t)) {      if (!isSynchronizationOperation()) {        if (!isInternalOperation()) {          validatePasswordModification(m,authPolicy);        }        preProcessPasswordModification(m);      }      processModification(m);    } else     if (!isInternalOrSynchro(m) && t.equals(getSchema().getAttributeType(OP_ATTR_ACCOUNT_DISABLED))) {      enabledStateChanged=true;      isEnabled=!pwPolicyState.isDisabled();    }  }}  }
class C{  @Override public void addExecutor(Executor ex){synchronized (executors) {    if (!executors.contains(ex)) {      executors.add(ex);      if (getState().isAvailable()) {        try {          ex.start();        } catch (        LifecycleException x) {          log.error("Executor.start",x);        }      }    }  }}  }
class C{  @Override public boolean isFormField(){  return isFormField;}  }
class C{  public void testGetPSource(){  String mdName="SHA-1";  String mgfName="MGF1";  AlgorithmParameterSpec mgfSpec=MGF1ParameterSpec.SHA1;  PSource pSrc=PSource.PSpecified.DEFAULT;  OAEPParameterSpec ps=new OAEPParameterSpec(mdName,mgfName,mgfSpec,pSrc);  assertTrue("The returned value does not equal to the " + "value specified in the constructor.",ps.getPSource() == pSrc);}  }
class C{  @Activate public void activate(final ComponentContext context) throws AuthenticationException, IdentityProviderServiceException {  logger.info("Activating Authentication Service with configuration {}",context.getProperties());  config=enhancedConfig.getConfigurationAsJson(context);  identityProviderConfigChanged();  logger.debug("OpenIDM Config for Authentication {} is activated.",config.get(Constants.SERVICE_PID));}  }
class C{  public static char lowSurrogate(int c){  return (char)(((c - 0x00010000) & 0x3FF) + 0xDC00);}  }
class C{  public void handleBtnRealmRequest(RequestInvocationEvent event){  submitCycle=true;  bRealmSelect=true;  forwardTo();}  }
class C{  public boolean seek(int index){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("seek",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    return $self.seek(index);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private boolean isAllowed(AciContainer container,Operation operation){  return skipAccessCheck(operation) || accessAllowed(container);}  }
class C{  public QName(String qname,Stack namespaces){  this(qname,namespaces,false);}  }
class C{  public final boolean equals(Node node){  try {    DTMNodeProxy dtmp=(DTMNodeProxy)node;    return (dtmp.node == this.node) && (dtmp.dtm == this.dtm);  } catch (  ClassCastException cce) {    return false;  }}  }
class C{  private boolean isFilterBranchTrue(Tree<Filter> node){  if (node.isLeafNode()) {    return node.getItem().match(event);  }  for (  Tree<Filter> currentNode : node.getChildren()) {    if (currentNode.getItem().match(event)) {      return isFilterBranchTrue(currentNode);    }  }  return false;}  }
class C{  public int hashCode(){  if (hash == 0) {    int hash0=11;    hash0=hash0 * 31 + field.hashCode();    hash0=hash0 * 31 + a.hashCode();    hash0=hash0 * 31 + b.hashCode();    if (seed != null) {      for (int i=0; i < seed.length; i++) {        hash0=hash0 * 31 + seed[i];      }    } else {      hash0=hash0 * 31;    }    hash=hash0;  }  return hash;}  }
class C{  public static final FileTime winTimeToFileTime(long wtime){  return FileTime.from(wtime / 10 + WINDOWS_EPOCH_IN_MICROSECONDS,TimeUnit.MICROSECONDS);}  }
class C{  public RESTEndpointBuilder parameter(String name,String value){  if (name.startsWith("&") || name.startsWith("?")) {    name=name.substring(1);  }  parameters.put(name,value);  return this;}  }
class C{  public void resetGenerationId(ServerHandler senderHandler,ResetGenerationIdMsg genIdMsg){  if (logger.isTraceEnabled()) {    debug("Receiving ResetGenerationIdMsg from " + senderHandler.getServerId() + ":\n"+ genIdMsg);  }  try {    lock();  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();    return;  }  try {    final long newGenId=genIdMsg.getGenerationId();    if (newGenId != this.generationId) {      changeGenerationId(newGenId);    } else {      if (logger.isTraceEnabled()) {        debug("Reset generation id requested but generationId was already " + this.generationId + ":\n"+ genIdMsg);      }    }    for (    ServerHandler rsHandler : connectedRSs.values()) {      try {        rsHandler.setGenerationId(newGenId);        if (senderHandler.isDataServer()) {          rsHandler.send(genIdMsg);        }      } catch (      IOException e) {        logger.error(ERR_EXCEPTION_FORWARDING_RESET_GEN_ID,baseDN,e.getMessage());      }    }    for (    DataServerHandler dsHandler : connectedDSs.values()) {      try {        dsHandler.changeStatusForResetGenId(newGenId);      } catch (      IOException e) {        logger.error(ERR_EXCEPTION_CHANGING_STATUS_AFTER_RESET_GEN_ID,baseDN,dsHandler.getServerId(),e.getMessage());      }    }    sendTopoInfoToAll();    logger.info(NOTE_RESET_GENERATION_ID,baseDN,newGenId);  } catch (  Exception e) {    logger.error(LocalizableMessage.raw(stackTraceToSingleLineString(e)));  } finally {    release();  }}  }
class C{  private void handlePossibleCancellationInterrupt(int s){  if (s == INTERRUPTING)   while (state == INTERRUPTING)   Thread.yield();}  }
class C{  public StringBuilder encodeBody(StringBuilder encoding){  return encoding.append(token);}  }
class C{  @Override protected void addToken(SoapMessage message){  throw new IllegalStateException("OpenAMSessionTokenSeverInterceptor#addToken called - this is unexpected!");}  }
class C{  public static ChangeRecord newChangeRecord(final String... ldifLines){  return LDIFChangeRecordReader.valueOfLDIFChangeRecord(ldifLines);}  }
class C{  public final void testGetCrtCoefficient(){  RSAOtherPrimeInfo ropi=new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),BigInteger.valueOf(3L));  assertEquals(3L,ropi.getCrtCoefficient().longValue());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(ownerDocument01.class,args);}  }
class C{  public ReplicationServerDomain(DN baseDN,ReplicationServer localReplicationServer){  this.baseDN=baseDN;  this.localReplicationServer=localReplicationServer;  this.assuredTimeoutTimer=new Timer("Replication server RS(" + localReplicationServer.getServerId() + ") assured timer for domain \""+ baseDN+ "\"",true);  this.domainDB=localReplicationServer.getChangelogDB().getReplicationDomainDB();  this.statusAnalyzer=new StatusAnalyzer(this);  this.statusAnalyzer.start();  DirectoryServer.registerMonitorProvider(this);}  }
class C{  public boolean isVimeoURLValid(){  String videoID=getExtractedIdentifier();  return videoID.length() > 0 && TextUtils.isDigitsOnly(videoID);}  }
class C{  protected synchronized void configureStop(){  if (log.isDebugEnabled()) {    log.debug(sm.getString("contextConfig.stop"));  }  int i;  Container[] children=context.findChildren();  for (i=0; i < children.length; i++) {    context.removeChild(children[i]);  }  SecurityConstraint[] securityConstraints=context.findConstraints();  for (i=0; i < securityConstraints.length; i++) {    context.removeConstraint(securityConstraints[i]);  }  ErrorPage[] errorPages=context.findErrorPages();  for (i=0; i < errorPages.length; i++) {    context.removeErrorPage(errorPages[i]);  }  FilterDef[] filterDefs=context.findFilterDefs();  for (i=0; i < filterDefs.length; i++) {    context.removeFilterDef(filterDefs[i]);  }  FilterMap[] filterMaps=context.findFilterMaps();  for (i=0; i < filterMaps.length; i++) {    context.removeFilterMap(filterMaps[i]);  }  String[] mimeMappings=context.findMimeMappings();  for (i=0; i < mimeMappings.length; i++) {    context.removeMimeMapping(mimeMappings[i]);  }  String[] parameters=context.findParameters();  for (i=0; i < parameters.length; i++) {    context.removeParameter(parameters[i]);  }  String[] securityRoles=context.findSecurityRoles();  for (i=0; i < securityRoles.length; i++) {    context.removeSecurityRole(securityRoles[i]);  }  String[] servletMappings=context.findServletMappings();  for (i=0; i < servletMappings.length; i++) {    context.removeServletMapping(servletMappings[i]);  }  String[] welcomeFiles=context.findWelcomeFiles();  for (i=0; i < welcomeFiles.length; i++) {    context.removeWelcomeFile(welcomeFiles[i]);  }  String[] wrapperLifecycles=context.findWrapperLifecycles();  for (i=0; i < wrapperLifecycles.length; i++) {    context.removeWrapperLifecycle(wrapperLifecycles[i]);  }  String[] wrapperListeners=context.findWrapperListeners();  for (i=0; i < wrapperListeners.length; i++) {    context.removeWrapperListener(wrapperListeners[i]);  }  if (antiLockingDocBase != null) {    ExpandWar.delete(antiLockingDocBase,false);  }  initializerClassMap.clear();  typeInitializerMap.clear();  ok=true;}  }
class C{  public void replace(Attr attr){  int index=indexOf(attr.getName());  if (index != -1) {    _attrs.set(index,attr);  } else {    _attrs.add(attr);  }}  }
class C{  public int peek(int n){  try {    return m_map[m_firstFree - (1 + n)];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  @Override public int hashCode(){  return (Integer.valueOf((int)x).hashCode() >> 13) ^ (Integer.valueOf((int)y).hashCode() >> 7) ^ Integer.valueOf((int)z).hashCode();}  }
class C{  public void handleDeprecatedStorageSchemes(ByteString password){  if (passwordPolicy.getDeprecatedPasswordStorageSchemes().isEmpty()) {    if (logger.isTraceEnabled()) {      logger.trace("Doing nothing for user %s because no deprecated storage schemes have been defined.",userDNString);    }    return;  }  AttributeType type=passwordPolicy.getPasswordAttribute();  List<Attribute> attrList=userEntry.getAllAttributes(type);  if (attrList.isEmpty()) {    logger.trace("Doing nothing for entry %s because no password values were found.",userDNString);    return;  }  HashSet<String> existingDefaultSchemes=new HashSet<>();  LinkedHashSet<ByteString> removedValues=new LinkedHashSet<>();  LinkedHashSet<ByteString> updatedValues=new LinkedHashSet<>();  for (  Attribute a : attrList) {    for (    ByteString v : a) {      try {        String[] pwComponents=getPwComponents(v);        String schemeName=pwComponents[0];        PasswordStorageScheme<?> scheme=getPasswordStorageScheme(schemeName);        if (scheme == null) {          if (logger.isTraceEnabled()) {            logger.trace("Skipping password value for user %s because the associated storage scheme %s " + "is not configured for use.",userDNString,schemeName);          }          continue;        }        if (passwordMatches(password,pwComponents,scheme)) {          if (passwordPolicy.isDefaultPasswordStorageScheme(schemeName)) {            existingDefaultSchemes.add(schemeName);            updatedValues.add(v);          } else           if (passwordPolicy.isDeprecatedPasswordStorageScheme(schemeName)) {            if (logger.isTraceEnabled()) {              logger.trace("Marking password with scheme %s for removal from user entry %s.",schemeName,userDNString);            }            removedValues.add(v);          } else {            updatedValues.add(v);          }        }      } catch (      Exception e) {        logger.traceException(e,"Skipping password value for user %s because an error occurred while attempting " + "to decode it based on the user password syntax",userDNString);      }    }  }  if (removedValues.isEmpty()) {    logger.trace("User entry %s does not have any password values encoded using deprecated schemes.",userDNString);    return;  }  LinkedHashSet<ByteString> addedValues=new LinkedHashSet<>();  for (  PasswordStorageScheme<?> s : passwordPolicy.getDefaultPasswordStorageSchemes()) {    if (!existingDefaultSchemes.contains(toLowerCase(s.getStorageSchemeName()))) {      try {        ByteString encodedPassword=encodePassword(password,s);        addedValues.add(encodedPassword);        updatedValues.add(encodedPassword);      } catch (      Exception e) {        logger.traceException(e);        if (logger.isTraceEnabled()) {          logger.traceException(e,"Unable to encode password for user %s using default scheme %s",userDNString,s.getStorageSchemeName());        }      }    }  }  if (updatedValues.isEmpty()) {    logger.trace("Not updating user entry %s because removing deprecated schemes would leave the user without a password.",userDNString);    return;  }  Attribute a=newAttribute(type,removedValues);  modifications.add(new Modification(ModificationType.DELETE,a,true));  if (!addedValues.isEmpty()) {    Attribute a2=newAttribute(type,addedValues);    modifications.add(new Modification(ModificationType.ADD,a2,true));  }  if (logger.isTraceEnabled()) {    logger.trace("Updating user entry %s to replace password values encoded with deprecated schemes " + "with values encoded with the default schemes.",userDNString);  }}  }
class C{  private JFrame newOutputFrame(){  outArea=new LimitedTextArea(LINES_MAX);  errArea=new LimitedTextArea(LINES_MAX);  userArea=new LimitedTextArea(LINES_MAX);  tabbedPane=new JTabbedPane();  tabbedPane.add("User",userArea.getComponentToDisplay());  tabbedPane.add("Output",outArea.getComponentToDisplay());  tabbedPane.add("Error",errArea.getComponentToDisplay());  JFrame aFrame=new JFrame("Boot Log");  ImageIcon icon=new ImageIcon(getClass().getResource("log.gif"));  aFrame.setIconImage(icon.getImage());  aFrame.addWindowListener(new CloserListener());  aFrame.getContentPane().add(tabbedPane);  aFrame.setSize(500,400);  aFrame.setLocationRelativeTo(null);  return aFrame;}  }
class C{  public static boolean addMissingRDNAttributes(){  return directoryServer.addMissingRDNAttributes;}  }
class C{  public AuthSPrincipal(String name){  if (name == null) {    throw new NullPointerException();  }  this.name=name;}  }
class C{  public Component add(Component component,int index){  if (!(component instanceof UIResource)) {    insertTab(component.getName(),null,component,null,index == -1 ? getTabCount() : index);  } else {    super.add(component,index);  }  return component;}  }
class C{  public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits,hints);}  }
class C{  public static FSNameRegistrationResponse parseURLEncodedRequest(HttpServletRequest request) throws FSMsgException, SAMLException {  FSNameRegistrationResponse retNameRegistrationResponse=new FSNameRegistrationResponse();  try {    FSUtils.debug.message("checking minor version");    retNameRegistrationResponse.majorVersion=Integer.parseInt(request.getParameter("MajorVersion"));    retNameRegistrationResponse.minorVersion=Integer.parseInt(request.getParameter("MinorVersion"));  } catch (  NumberFormatException ex) {    FSUtils.debug.error("FSNameRegistrationResponse.parseURL" + "EncodedRequest: version parsing error:" + ex);    throw new FSMsgException("invalidNumber",null);  }  if (request.getParameter("ResponseID") != null) {    retNameRegistrationResponse.responseID=request.getParameter("ResponseID");  } else {    FSUtils.debug.error("FSNameRegistrationResponse.parseURL" + "EncodedRequest: Response ID is null");    String[] args={IFSConstants.RESPONSE_ID};    throw new FSMsgException("missingAttribute",args);  }  String instantString=request.getParameter("IssueInstant");  if (instantString == null || instantString.length() == 0) {    FSUtils.debug.error("FSNameRegistrationResponse.parseURL" + "EncodedRequest: Issue Instant is null");    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  try {    retNameRegistrationResponse.issueInstant=DateUtils.stringToDate(instantString);  } catch (  ParseException e) {    FSUtils.debug.error("FSNameRegistrationResponse.parseURL" + "EncodedRequest: Can not parse Issue Instant",e);    throw new FSMsgException("parseError",null);  }  if (request.getParameter("ProviderID") != null) {    retNameRegistrationResponse.providerId=request.getParameter("ProviderID");  } else {    FSUtils.debug.error("FSNameRegistrationResponse.parseURL" + "EncodedRequest: Provider ID is null ");    throw new FSMsgException("missingElement",null);  }  if (request.getParameter("RelayState") != null) {    retNameRegistrationResponse.relayState=request.getParameter("RelayState");  }  if (request.getParameter("InResponseTo") != null) {    retNameRegistrationResponse.inResponseTo=request.getParameter("InResponseTo");  }  if (request.getParameter("Value") != null) {    FSUtils.debug.message("Status : " + request.getParameter("Value"));    StatusCode statusCode=new StatusCode(request.getParameter("Value"));    retNameRegistrationResponse.status=new Status(statusCode);  } else {    FSUtils.debug.error("FSNameRegistrationResponse.parseURL" + "EncodedRequest: Status Value is  null ");    throw new FSMsgException("missingElement",null);  }  FSUtils.debug.message("Returning registration response Object");  return retNameRegistrationResponse;}  }
class C{  @Override BufferedImage applyEffect(BufferedImage src,BufferedImage dst,int w,int h){  if (src == null || src.getType() != BufferedImage.TYPE_INT_ARGB) {    throw new IllegalArgumentException("Effect only works with " + "source images of type BufferedImage.TYPE_INT_ARGB.");  }  if (dst != null && dst.getType() != BufferedImage.TYPE_INT_ARGB) {    throw new IllegalArgumentException("Effect only works with " + "destination images of type BufferedImage.TYPE_INT_ARGB.");  }  double trangleAngle=Math.toRadians(angle - 90);  int offsetX=(int)(Math.sin(trangleAngle) * distance);  int offsetY=(int)(Math.cos(trangleAngle) * distance);  int tmpOffX=offsetX + size;  int tmpOffY=offsetX + size;  int tmpW=w + offsetX + size+ size;  int tmpH=h + offsetX + size;  int[] lineBuf=getArrayCache().getTmpIntArray(w);  byte[] tmpBuf1=getArrayCache().getTmpByteArray1(tmpW * tmpH);  Arrays.fill(tmpBuf1,(byte)0x00);  byte[] tmpBuf2=getArrayCache().getTmpByteArray2(tmpW * tmpH);  Raster srcRaster=src.getRaster();  for (int y=0; y < h; y++) {    int dy=(y + tmpOffY);    int offset=dy * tmpW;    srcRaster.getDataElements(0,y,w,1,lineBuf);    for (int x=0; x < w; x++) {      int dx=x + tmpOffX;      tmpBuf1[offset + dx]=(byte)((lineBuf[x] & 0xFF000000) >>> 24);    }  }  float[] kernel=EffectUtils.createGaussianKernel(size);  EffectUtils.blur(tmpBuf1,tmpBuf2,tmpW,tmpH,kernel,size);  EffectUtils.blur(tmpBuf2,tmpBuf1,tmpH,tmpW,kernel,size);  float spread=Math.min(1 / (1 - (0.01f * this.spread)),255);  for (int i=0; i < tmpBuf1.length; i++) {    int val=(int)(((int)tmpBuf1[i] & 0xFF) * spread);    tmpBuf1[i]=(val > 255) ? (byte)0xFF : (byte)val;  }  if (dst == null)   dst=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  WritableRaster shadowRaster=dst.getRaster();  int red=color.getRed(), green=color.getGreen(), blue=color.getBlue();  for (int y=0; y < h; y++) {    int srcY=y + tmpOffY;    int shadowOffset=(srcY - offsetY) * tmpW;    for (int x=0; x < w; x++) {      int srcX=x + tmpOffX;      lineBuf[x]=tmpBuf1[shadowOffset + (srcX - offsetX)] << 24 | red << 16 | green << 8 | blue;    }    shadowRaster.setDataElements(0,y,w,1,lineBuf);  }  return dst;}  }
class C{  public void finer(String msg){  log(Level.FINER,msg);}  }
class C{  protected void writeToBody(PdfObject pdfObj) throws IOException {  if (crypto != null) {    crypto.setHashKeyForNextObject(pdfObj.getIndirectReference().getObjNumber(),pdfObj.getIndirectReference().getGenNumber());  }  writeInteger(pdfObj.getIndirectReference().getObjNumber()).writeSpace().writeInteger(pdfObj.getIndirectReference().getGenNumber()).writeBytes(obj);  write(pdfObj);  writeBytes(endobj);}  }
class C{  private void updateToggleButton(Action action,Icon icon){  toggleButton.setAction(action);  toggleButton.setIcon(icon);  toggleButton.setText(null);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignaturePropertiesType createSignaturePropertiesType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignaturePropertiesTypeImpl();}  }
class C{  public Box(int axis){  super();  super.setLayout(new BoxLayout(this,axis));}  }
class C{  public boolean removeAudienceRestrictionCondition(String audience){  Iterator it=_arcs.iterator();  while (it.hasNext()) {    AudienceRestrictionCondition arc=(AudienceRestrictionCondition)it.next();    if (arc.containsAudience(audience)) {      return arc.removeAudience(audience);    }  }  return false;}  }
class C{  public JKException(){  super();}  }
class C{  public BerInputStream(byte[] encoded,int offset,int expectedLength) throws IOException {  this.in=null;  this.buffer=encoded;  this.offset=offset;  next();  if (length != INDEFINIT_LENGTH && (offset + expectedLength) != (this.offset + this.length)) {    throw new ASN1Exception("Wrong content length");  }}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return getService().deleteFoo(fooId);}  }
class C{  private final static boolean _validBackRef(int index){  return (index & 0xFF) < 0xFE;}  }
class C{  private void createInitializeReplicationSubCommand() throws ArgumentException {  initializeReplicationSubCmd=new SubCommand(this,INITIALIZE_REPLICATION_SUBCMD_NAME,INFO_DESCRIPTION_SUBCMD_INITIALIZE_REPLICATION.get(INITIALIZE_ALL_REPLICATION_SUBCMD_NAME));  addArgumentsToSubCommand(initializeReplicationSubCmd,hostNameSourceArg,portSourceArg,hostNameDestinationArg,portDestinationArg);}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.InquiryType.Confirm createInquiryTypeConfirm() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.InquiryTypeImpl.ConfirmImpl();}  }
class C{  @Override public int delete(Uri uri,String selection,String[] selectionArgs){  Log.d(TAG,"FmRadioContentProvider.delete");  int rows=0;  mSqlDb=mDbHelper.getWritableDatabase();switch (URI_MATCHER.match(uri)) {case STATION_FREQ:    rows=mSqlDb.delete(TABLE_NAME,selection,selectionArgs);  getContext().getContentResolver().notifyChange(uri,null);break;case STATION_FREQ_ID:String stationID=uri.getPathSegments().get(1);rows=mSqlDb.delete(TABLE_NAME,FmRadioStation.Station._ID + "=" + stationID+ (TextUtils.isEmpty(selection) ? "" : " AND (" + selection + ")"),selectionArgs);getContext().getContentResolver().notifyChange(uri,null);break;default :Log.e(TAG,"Error: Unkown URI to delete: " + uri);break;}return rows;}  }
class C{  void delete(ByteString val,AttributeType attrType,CSN csn){  update(csn,new AttrValueHistorical(val,attrType,null,csn));}  }
class C{  public void removeAllRetentionPolicies(){  this.retentionPolicies.clear();}  }
class C{  public Object defaultInstance(Object bean) throws InstantiationException, IllegalAccessException {  return bean.getClass().newInstance();}  }
class C{  DurablePositionTrack(File trackerFile,String target,String ino) throws IOException {  Preconditions.checkNotNull(trackerFile,"trackerFile must not be null");  Preconditions.checkNotNull(target,"target must not be null");  this.trackerFile=trackerFile;  this.target=target;  this.targetFile=new File(target);  DatumWriter<TransferStateFileMeta> dout=new SpecificDatumWriter<TransferStateFileMeta>(TransferStateFileMeta.SCHEMA$);  DatumReader<TransferStateFileMeta> din=new SpecificDatumReader<TransferStateFileMeta>(TransferStateFileMeta.SCHEMA$);  writer=new DataFileWriter<TransferStateFileMeta>(dout);  if (trackerFile.exists()) {    writer.appendTo(trackerFile);    reader=new DataFileReader<TransferStateFileMeta>(trackerFile,din);    this.target=reader.getMetaString("file");    this.ino=reader.getMetaString("ino");    logger.info("get ino from meta:" + ino);  } else {    this.target=target;    if (ino == null) {      ino=getFileKey(targetFile);    }    this.ino=ino;    logger.info("get ino from real:" + ino);    writer.setMeta("file",target);    writer.setMeta("ino",ino);    writer.create(TransferStateFileMeta.SCHEMA$,trackerFile);    reader=new DataFileReader<TransferStateFileMeta>(trackerFile,din);  }  target=getTarget();  metaCache=TransferStateFileMeta.newBuilder().setOffset(0L).build();  initReader();  isOpen=true;}  }
class C{  @Override public void onPause(){  super.onPause();  mDelegate.detachView();  if (getActivity().isFinishing()) {    mDelegate.destroyPresenter();  }}  }
class C{  private AST.Try parse_try() throws SyntaxException {  LineCol lineCol=current.getLineCol();  if (!(current.next() instanceof ElementStartNode)) {    err.SyntaxException("invalid try statement without statements",lineCol);    err.debug("ignore the try statement");    return null;  }  nextNode(false);  List<Statement> statements=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);  nextNode(true);  if (current == null) {    err.SyntaxException("invalid try statement without catch or finally",lineCol);    err.debug("assume no catch and finally");    return new AST.Try(statements,null,Collections.emptyList(),Collections.emptyList(),lineCol);  }  if (current instanceof EndingNode && current.next() instanceof Element && (((Element)current.next()).getContent().equals("catch") || ((Element)current.next()).getContent().equals("finally"))) {    nextNode(false);  }  String eName=null;  List<Statement> catchStatements=new ArrayList<>();  if (current instanceof Element) {    String cat=((Element)current).getContent();    if (cat.equals("catch")) {      nextNode(false);      if ((current instanceof Element)) {        eName=((Element)current).getContent();      } else {        err.UnexpectedTokenException("exception variable",current.toString(),current.getLineCol());        err.debug("let the exception variable be 'e'");        eName="e";      }      if (current.getTokenType() != TokenType.VALID_NAME) {        err.UnexpectedTokenException("valid variable name",eName,current.getLineCol());        err.debug("assume that it's a valid name");      }      if (usedVarNames.contains(eName)) {        err.DuplicateVariableNameException(eName,current.getLineCol());        err.debug("assume that it's an unused name");      }      nextNode(true);      if (null != current && !(current instanceof EndingNode)) {        if (current instanceof ElementStartNode) {          catchStatements.addAll(parseElemStart((ElementStartNode)current,true,Collections.singleton(eName),false));          nextNode(true);          if (current instanceof EndingNode && current.next() instanceof Element && ((Element)current.next()).getContent().equals("finally")) {            nextNode(false);          }        } else {          err.UnexpectedTokenException(current.toString(),current.getLineCol());          err.debug("ignore this token");          jumpToTheNearestEndingNode();        }      }    }  }  List<Statement> fin=new ArrayList<>();  if (current instanceof Element) {    String f=((Element)current).getContent();    if (f.equals("finally")) {      LineCol finallyLineCol=current.getLineCol();      nextNode(true);      if (current instanceof ElementStartNode) {        fin=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);      } else       if (current != null && !(current instanceof EndingNode)) {        err.UnexpectedTokenException(current == null ? "NewLine" : current.toString(),current == null ? finallyLineCol : current.getLineCol());        err.debug("ignore this token");        jumpToTheNearestEndingNode();      }    }  }  return new AST.Try(statements == null ? Collections.emptyList() : statements,eName,catchStatements,fin,lineCol);}  }
class C{  public static boolean bootstrap(BootstrapData bootstrapInfo,boolean reinit) throws Exception {  return (getConfiguration(bootstrapInfo,reinit,true) != null);}  }
class C{  public String toString(){  return "TextHitInfo[" + charIndex + (isLeadingEdge ? "L" : "T")+ "]";}  }
class C{  public StringContent(){  this(10);}  }
class C{  private static void addItemsToList(int startIndex,int endIndex){  for (int i=startIndex; i < endIndex; i++) {    values.add(new Integer(i));  }}  }
class C{  public SerialException(){}  }
class C{  private PreparedAssuredInfo processSafeDataUpdateMsg(UpdateMsg update,ServerHandler sourceHandler) throws IOException {  CSN csn=update.getCSN();  boolean interestedInAcks=false;  byte safeDataLevel=update.getSafeDataLevel();  byte groupId=localReplicationServer.getGroupId();  byte sourceGroupId=sourceHandler.getGroupId();  if (safeDataLevel < (byte)1) {    logger.error(ERR_UNKNOWN_ASSURED_SAFE_DATA_LEVEL,localReplicationServer.getServerId(),safeDataLevel,baseDN,update);  } else   if (sourceGroupId == groupId && isSameGenerationId(sourceHandler.getGenerationId())) {    if (sourceHandler.isDataServer()) {      if (safeDataLevel == (byte)1) {        sourceHandler.send(new AckMsg(csn));      } else {        interestedInAcks=true;      }    } else {      if (safeDataLevel > (byte)1) {        sourceHandler.send(new AckMsg(csn));      }    }  }  List<Integer> expectedServers=new ArrayList<>();  if (interestedInAcks && sourceHandler.isDataServer()) {    collectRSsEligibleForAssuredReplication(groupId,expectedServers);  }  PreparedAssuredInfo preparedAssuredInfo=new PreparedAssuredInfo();  int nExpectedServers=expectedServers.size();  if (interestedInAcks) {    if (nExpectedServers > 0) {      int sdl=update.getSafeDataLevel();      int neededAdditionalServers=sdl - 1;      byte finalSdl=(nExpectedServers >= neededAdditionalServers) ? (byte)sdl : (byte)(nExpectedServers + 1);      preparedAssuredInfo.expectedAcksInfo=new SafeDataExpectedAcksInfo(csn,sourceHandler,finalSdl,expectedServers);      preparedAssuredInfo.expectedServers=expectedServers;    } else {      sourceHandler.send(new AckMsg(csn));    }  }  return preparedAssuredInfo;}  }
class C{  private void whenAbortReturnTrue(LoginModule... modules) throws LoginException {  for (  LoginModule module : modules) {    when(module.abort()).thenReturn(true);  }}  }
class C{  public void append(String s){  templateValue.append(s);}  }
class C{  public Compiler(){  baseLoader=ClassLoader.getSystemClassLoader();}  }
class C{  public static XMPDateTime create(int year,int month,int day,int hour,int minute,int second,int nanoSecond){  XMPDateTime dt=new XMPDateTimeImpl();  dt.setYear(year);  dt.setMonth(month);  dt.setDay(day);  dt.setHour(hour);  dt.setMinute(minute);  dt.setSecond(second);  dt.setNanoSecond(nanoSecond);  return dt;}  }
class C{  public ResponseInfo(){}  }
class C{  public void run(){  RenderedImage rdrdImage;  if (rc != null) {    rdrdImage=rdblImage.createRendering(rc);  } else {    rdrdImage=rdblImage.createDefaultRendering();  }  ColorModel colorModel=rdrdImage.getColorModel();  Raster raster=rdrdImage.getData();  SampleModel sampleModel=raster.getSampleModel();  DataBuffer dataBuffer=raster.getDataBuffer();  if (colorModel == null) {    colorModel=ColorModel.getRGBdefault();  }  int minX=raster.getMinX();  int minY=raster.getMinY();  int width=raster.getWidth();  int height=raster.getHeight();  Enumeration icList;  ImageConsumer ic;  icList=ics.elements();  while (icList.hasMoreElements()) {    ic=(ImageConsumer)icList.nextElement();    ic.setDimensions(width,height);    ic.setHints(ImageConsumer.TOPDOWNLEFTRIGHT | ImageConsumer.COMPLETESCANLINES | ImageConsumer.SINGLEPASS| ImageConsumer.SINGLEFRAME);  }  int pix[]=new int[width];  int i, j;  int numBands=sampleModel.getNumBands();  int tmpPixel[]=new int[numBands];  for (j=0; j < height; j++) {    for (i=0; i < width; i++) {      sampleModel.getPixel(i,j,tmpPixel,dataBuffer);      pix[i]=colorModel.getDataElement(tmpPixel,0);    }    icList=ics.elements();    while (icList.hasMoreElements()) {      ic=(ImageConsumer)icList.nextElement();      ic.setPixels(0,j,width,1,colorModel,pix,0,width);    }  }  icList=ics.elements();  while (icList.hasMoreElements()) {    ic=(ImageConsumer)icList.nextElement();    ic.imageComplete(ImageConsumer.STATICIMAGEDONE);  }}  }
class C{  public JsonValue infoReport(Record record){  JsonObject report=JsonValueBuilder.jsonValue();  report.put(GLOBAL_INFO_LABEL,globalInformationReport(record).asMap());  report.put(RECORD_LABEL,RecordProperties.toJson(record.getRecordProperties()).asMap());  report.put(JVM_LABEL,getJVMInformation().asMap());  report.put(SYSTEM_PROPERTIES_LABEL,getSystemProperties().asMap());  return report.build();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatagetdata.class,args);}  }
class C{  public JKPrivilige(String name,JKPrivilige parent,int number){  this.priviligeName=name;  this.parentPrivlige=parent;  this.number=number;}  }
class C{  public void testPosNegSameLength(){  String numA="283746278342837476784564875684767";  String numB="-293478573489347658763745839457637";  String res="-71412358434940908477702819237628";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  @Override public Foo findByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_First(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  private void printSpace(int n) throws IOException {  final java.io.Writer writer=m_writer;  for (int i=0; i < n; i++) {    writer.write(' ');  }}  }
class C{  public void signXML() throws SAMLException {  String certAlias=SystemConfigurationUtil.getProperty("com.sun.identity.saml.xmlsig.certalias");  signXML(certAlias);}  }
class C{  public JPEGImageReadParam(){  super();}  }
class C{  public boolean usePasswordPolicyControl(){  return usePasswordPolicyControl;}  }
class C{  @Override public String toString(){  String s=null;  try {    JSONObject jo=toJSONObject();    s=(jo == null) ? super.toString() : jo.toString(2);  } catch (  JSONException e) {    PolicyConstants.DEBUG.error("NotCondition.toString()",e);  }  return s;}  }
class C{  public void addPermittedDomain(String domainName){  if (StringUtils.isEmpty(domainName)) {    return;  }  if (permittedDomains == null) {    permittedDomains=new ArrayList<>();  }  permittedDomains.add(domainName);}  }
class C{  public NSNumber(byte[] bytes,int type){  this(bytes,0,bytes.length,type);}  }
class C{  public LogoutRequestImpl(){  isMutable=true;}  }
class C{  public void addAccessibleSelection(int i){  TreeModel model=JTree.this.getModel();  if (model != null) {    if (i >= 0 && i < getAccessibleChildrenCount()) {      TreePath path=getChildTreePath(i);      JTree.this.addSelectionPath(path);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode13.class,args);}  }
class C{  @ConstructorProperties({"borderInsets"}) public EmptyBorder(Insets borderInsets){  this.top=borderInsets.top;  this.right=borderInsets.right;  this.bottom=borderInsets.bottom;  this.left=borderInsets.left;}  }
class C{  public static String byteCountToDisplaySize(BigInteger size){  String displaySize;  if (size.divide(ONE_EB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_EB_BI)) + " EB";  } else   if (size.divide(ONE_PB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_PB_BI)) + " PB";  } else   if (size.divide(ONE_TB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_TB_BI)) + " TB";  } else   if (size.divide(ONE_GB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_GB_BI)) + " GB";  } else   if (size.divide(ONE_MB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_MB_BI)) + " MB";  } else   if (size.divide(ONE_KB_BI).compareTo(BigInteger.ZERO) > 0) {    displaySize=String.valueOf(size.divide(ONE_KB_BI)) + " KB";  } else {    displaySize=String.valueOf(size) + " bytes";  }  return displaySize;}  }
class C{  protected void pushGlobalVars(int contextNode) throws TransformerException {  XPathContext xctxt=m_xcontext;  VariableStack vs=xctxt.getVarStack();  StylesheetRoot sr=getStylesheet();  Vector vars=sr.getVariablesAndParamsComposed();  int i=vars.size();  vs.link(i);  while (--i >= 0) {    ElemVariable v=(ElemVariable)vars.elementAt(i);    XObject xobj=new XUnresolvedVariable(v,contextNode,this,vs.getStackFrame(),0,true);    if (null == vs.elementAt(i))     vs.setGlobalVariable(i,xobj);  }}  }
class C{  public static long fromInet4Address(final InetAddress inetAddress){  ensureIsInet4Address(inetAddress);  return Integer.toUnsignedLong(inetAddress.hashCode());}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  public ExecutionException(String message,Throwable cause){  super(message,cause);}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName(),getMask(actions));}  }
class C{  public String toGnuStepASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCIIGnuStep(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  public int compare(File file1,File file2){  String suffix1=FilenameUtils.getExtension(file1.getName());  String suffix2=FilenameUtils.getExtension(file2.getName());  return caseSensitivity.checkCompareTo(suffix1,suffix2);}  }
class C{  public XPathException(String message,Node styleNode,Exception e){  super(message);  m_styleNode=styleNode;  this.m_exception=e;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireExternalReferenceElement createRequireExternalReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireExternalReferenceElementImpl();}  }
class C{  public Vendor query(Connection conn) throws LdapException, SearchResultReferenceIOException {  String result=null;  ConnectionEntryReader res=conn.search(LDAPRequests.newSearchRequest("",SearchScope.BASE_OBJECT,"(objectclass=*)",attrs));  while (res.hasNext()) {    if (res.isReference()) {      res.readReference();    } else {      SearchResultEntry findEntry=res.readEntry();      for (      Attribute attribute : findEntry.getAllAttributes()) {        String attrName=attribute.getAttributeDescriptionAsString();        if ("vendorversion".equalsIgnoreCase(attrName)) {          for (          ByteString value : attribute) {            result=value.toString();            break;          }        }      }    }  }  Vendor vendor=unknownVendor;  if (result != null) {    if (result.startsWith(VENDOR_OPENDJ)) {      String version=result.substring(VENDOR_OPENDJ.length());      vendor=new Vendor(OPENDJ,version);    } else     if (result.startsWith(VENDOR_OPENDS)) {      String version=result.substring(VENDOR_OPENDS.length());      vendor=new Vendor(OPENDS,version);    } else     if (result.startsWith(VENDOR_SUNDS_5)) {      String version=result.substring(VENDOR_SUNDS_5.length());      vendor=new Vendor(ODSEE,version);    } else     if (result.startsWith(VENDOR_SUNDS_6)) {      String version=result.substring(VENDOR_SUNDS_6.length());      vendor=new Vendor(ODSEE,version);    } else     if (result.startsWith(VENDOR_SUNDS_7)) {      String version=result.substring(VENDOR_SUNDS_7.length());      vendor=new Vendor(ODSEE,version);    } else     if (result.startsWith(VENDOR_ODSEE_11)) {      String version=result.substring(VENDOR_ODSEE_11.length());      vendor=new Vendor(ODSEE,version);    }  }  return vendor;}  }
class C{  private boolean hasSubstring(final String value,final int start,final String substring){  try {    if (start < 0) {      return false;    }    final int end=start + substring.length();    if (end > value.length()) {      return false;    }    for (int i=0, pos=start; pos < end; i++, pos++) {      if (value.charAt(pos) != substring.charAt(i)) {        return false;      }    }    return true;  } catch (  final Exception e) {    logger.debug(LocalizableMessage.raw("Unable to check that '%s' has substring '%s' at position %d: %s",value,substring,start,e));    return false;  }}  }
class C{  public static boolean isButtonPressed(MotionEvent event,int button){  if (Build.VERSION.SDK_INT >= 21) {    return event.isButtonPressed(button);  }  if (button == 0) {    return false;  }  return (event.getButtonState() & button) == button;}  }
class C{  private int countLines(Process process) throws IOException {  logErrors(process);  InputStream in=process.getInputStream();  BufferedReader reader=new BufferedReader(new InputStreamReader(in));  int count=0;  while (reader.readLine() != null) {    count++;  }  return count;}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public T action(ReconAction action){  if (null != action) {    jsonValue.put(ACTION,action.name());  }  return self();}  }
class C{  public static List convertElementToJAXB(List elements) throws JAXBException {  List result=new ArrayList();  if (elements != null && !elements.isEmpty()) {    Iterator iter=elements.iterator();    while (iter.hasNext()) {      result.add(convertElementToJAXB((Element)iter.next()));    }  }  return result;}  }
class C{  static public Tasker create(){  return new Tasker();}  }
class C{  public InvalidApplicationException(Object val){  this.val=val;}  }
class C{  private static void printFrame(ProfileStackFrame frame,int indent){  for (int i=0; i < indent; i++) {    System.out.print("\t");  }  System.out.print(frame.getTotalCount());  System.out.print("\t");  System.out.print(frame.getClassName());  System.out.print(".");  System.out.println(frame.getMethodName());  if (frame.hasSubFrames()) {    for (    ProfileStackFrame f : frame.getSubordinateFrames()) {      printFrame(f,indent + 1);    }  }}  }
class C{  public static synchronized String parseQuotedString(String s) throws UnsupportedEncodingException, CharacterCodingException {  List<Byte> strBytes=new LinkedList<Byte>();  StringCharacterIterator iterator=new StringCharacterIterator(s);  char c=iterator.current();  while (iterator.getIndex() < iterator.getEndIndex()) {switch (c) {case '\\':{        byte[] bts=parseEscapedSequence(iterator).getBytes("UTF-8");        for (        byte b : bts)         strBytes.add(b);        break;      }default :{      strBytes.add((byte)0);      strBytes.add((byte)c);      break;    }}c=iterator.next();}byte[] bytArr=new byte[strBytes.size()];int i=0;for (Byte b : strBytes) {bytArr[i]=b.byteValue();i++;}String result=new String(bytArr,"UTF-8");CharBuffer charBuf=CharBuffer.wrap(result);if (asciiEncoder == null) asciiEncoder=Charset.forName("ASCII").newEncoder();if (asciiEncoder.canEncode(charBuf)) return asciiEncoder.encode(charBuf).asCharBuffer().toString();return result;}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  if (isSigned && signedXMLString != null) {    return signedXMLString;  }  this.validateData();  StringBuffer result=new StringBuffer(1000);  String prefix="";  String uri="";  if (includeNSPrefix) {    prefix=SAML2Constants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAML2Constants.PROTOCOL_DECLARE_STR;  }  result.append("<").append(prefix).append("ArtifactResponse").append(uri).append(" ID=\"").append(responseId).append("\"");  if (inResponseTo != null && inResponseTo.trim().length() != 0) {    result.append(" InResponseTo=\"").append(inResponseTo).append("\"");  }  result.append(" Version=\"").append(version).append("\"").append(" IssueInstant=\"").append(DateUtils.toUTCDateFormat(issueInstant)).append("\"");  if (destination != null && destination.trim().length() != 0) {    result.append(" Destination=\"").append(destination).append("\"");  }  if (consent != null && consent.trim().length() != 0) {    result.append(" Consent=\"").append(consent).append("\"");  }  result.append(">");  if (issuer != null) {    result.append(issuer.toXMLString(includeNSPrefix,declareNS));  }  if (signatureString != null) {    result.append(signatureString);  }  if (extensions != null) {    result.append(extensions.toXMLString(includeNSPrefix,declareNS));  }  result.append(status.toXMLString(includeNSPrefix,declareNS));  if (anyString != null && anyString.trim().length() != 0) {    result.append(anyString);  }  result.append("</").append(prefix).append("ArtifactResponse>");  return result.toString();}  }
class C{  public SAX2DTM(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean newNameTable){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);  if (blocksize <= 64) {    m_data=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS_SMALL);    m_dataOrQName=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS_SMALL);    m_valuesOrPrefixes=new DTMStringPool(16);    m_chars=new FastStringBuffer(7,10);    m_contextIndexes=new IntStack(4);    m_parents=new IntStack(4);  } else {    m_data=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS);    m_dataOrQName=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS);    m_valuesOrPrefixes=new DTMStringPool();    m_chars=new FastStringBuffer(10,13);    m_contextIndexes=new IntStack();    m_parents=new IntStack();  }  m_data.addElement(0);  m_useSourceLocationProperty=mgr.getSource_location();  m_sourceSystemId=(m_useSourceLocationProperty) ? new StringVector() : null;  m_sourceLine=(m_useSourceLocationProperty) ? new IntVector() : null;  m_sourceColumn=(m_useSourceLocationProperty) ? new IntVector() : null;}  }
class C{  public static boolean skip_scope(JflexScanner p_scanner){  int open_bracked_count=1;  while (open_bracked_count > 0) {    p_scanner.yybegin(DsnFileScanner.NAME);    Object curr_token=null;    try {      curr_token=p_scanner.next_token();    } catch (    Exception e) {      System.err.println("ScopeKeyword.skip_scope: Error while scanning file");      System.err.println(e);      return false;    }    if (curr_token == null) {      return false;    }    if (curr_token == DsnKeyword.OPEN_BRACKET) {      ++open_bracked_count;    } else     if (curr_token == DsnKeyword.CLOSED_BRACKET) {      --open_bracked_count;    }  }  return true;}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {}  }
class C{  private void createServerGroup(Map<ServerGroupProperty,Object> serverGroupProperties) throws ADSContextException {  String dn=makeDNFromServerGroupProperties(serverGroupProperties);  AddRequest request=newAddRequest(dn).addAttribute("objectclass","top","groupOfUniqueNames");  for (  ServerGroupProperty prop : serverGroupProperties.keySet()) {    request.addAttribute(makeAttrFromServerGroupProperty(prop,serverGroupProperties.get(prop)));  }  try {    throwIfNotSuccess(connectionWrapper.getConnection().add(request));  } catch (  LdapException x) {    if (x.getResult().getResultCode().equals(ResultCode.ENTRY_ALREADY_EXISTS)) {      throw new ADSContextException(ErrorType.ALREADY_REGISTERED);    }    throw new ADSContextException(ErrorType.BROKEN_INSTALL,x);  }}  }
class C{  private Packet receive() throws IOException {  byte[] buffer=new byte[4096];  DatagramPacket dp=new DatagramPacket(buffer,buffer.length);  socket.receive(dp);  byte[] data=dp.getData();  Packet p=PacketFactory.toPacket(data);  if (debug.messageEnabled()) {    debug.message("Received " + p + " size="+ p.getAttributeSet().size());  }  return p;}  }
class C{  @Override public boolean isRespectWidth(){  return true;}  }
class C{  public static FontProgram createFont(String ttc,int ttcIndex,boolean cached) throws java.io.IOException {  if (cached) {    FontProgram fontFound=FontCache.getFont(ttc + ttcIndex);    if (fontFound != null) {      return fontFound;    }  }  FontProgram fontBuilt=new TrueTypeFont(ttc,ttcIndex);  return cached ? FontCache.saveFont(fontBuilt,ttc + ttcIndex) : fontBuilt;}  }
class C{  public boolean isUsageArgumentPresent(){  return usageArgument != null && usageArgument.isPresent();}  }
class C{  private String repoId(String resourceId){  return ResourcePath.valueOf("repo").concat(managedId(resourceId)).toString();}  }
class C{  private void appendByte(int value){  if ((sizeInBits >> 3) == array.length) {    byte[] newArray=new byte[(array.length << 1)];    System.arraycopy(array,0,newArray,0,array.length);    array=newArray;  }  array[sizeInBits >> 3]=(byte)value;  sizeInBits+=8;}  }
class C{  static void loadActionMap(LazyActionMap map){  map.put(new Actions(Actions.HIDE));  map.put(new Actions(Actions.PAGE_DOWN));  map.put(new Actions(Actions.PAGE_UP));  map.put(new Actions(Actions.HOME));  map.put(new Actions(Actions.END));  map.put(new Actions(Actions.DOWN));  map.put(new Actions(Actions.DOWN_2));  map.put(new Actions(Actions.TOGGLE));  map.put(new Actions(Actions.TOGGLE_2));  map.put(new Actions(Actions.UP));  map.put(new Actions(Actions.UP_2));  map.put(new Actions(Actions.ENTER));}  }
class C{  public static void enable(){}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AuthnQueryServiceElement createAuthnQueryServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AuthnQueryServiceElementImpl();}  }
class C{  public synchronized void removeDragSourceListener(DragSourceListener dsl){  if (listener != null && listener.equals(dsl)) {    listener=null;  } else   throw new IllegalArgumentException();}  }
class C{  private void checkUpdateAssuredParameters(UpdateMsg updateMsg){  boolean ok=true;  if (updateMsg.isAssured() != isAssured()) {    debugInfo("Fake DS " + getServerId() + " received update assured flag is wrong: "+ updateMsg);    ok=false;  }  if (isAssured() && updateMsg.getAssuredMode() != getAssuredMode()) {    debugInfo("Fake DS " + getServerId() + " received update assured mode is wrong: "+ updateMsg);    ok=false;  }  if (updateMsg.getSafeDataLevel() != getAssuredSdLevel()) {    debugInfo("Fake DS " + getServerId() + " received update assured sd level is wrong: "+ updateMsg);    ok=false;  }  if (ok) {    debugInfo("Fake DS " + getServerId() + " received update assured parameters are ok: "+ updateMsg);  } else {    nWrongReceivedUpdates++;  }}  }
class C{  private void createEntity(SSOToken token,PersistentObject parentObj,int objectType,Map attributes,String profileName) throws UMSException, AMEntryExistsException, AMException {  String orgDN=getOrganizationDN(internalToken,parentObj.getDN());  AttrSet attrSet=CommonUtils.mapToAttrSet(attributes);  makeNamingFirst(attrSet,getNamingAttribute(objectType),profileName);  String ctName=getCreationTemplateName(objectType);  if (ctName == null) {    ctName="BasicUser";  }  TemplateManager tempMgr=TemplateManager.getTemplateManager();  CreationTemplate creationTemp=tempMgr.getCreationTemplate(ctName,new Guid(orgDN),TemplateManager.SCOPE_ANCESTORS);  attrSet=combineOCs(creationTemp,attrSet);  PersistentObject user=new PersistentObject(creationTemp,attrSet);  try {    parentObj.addChild(user);  } catch (  AccessRightsException e) {    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.createEntity():" + " Insufficient Access rights to create entity",e);    }    throw new AMException(token,"460");  }catch (  EntryAlreadyExistsException ee) {    if (ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {      complianceImpl.checkIfDeletedUser(token,user.getDN());    }    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.createEntity() Entity " + "already exists: ",ee);    }    throw new AMEntryExistsException(token,"462",ee);  }catch (  UMSException ue) {    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.createEntity(): Internal " + "Error occurred. Unable to create User Entry",ue);    }    processInternalException(token,ue,"324");  }}  }
class C{  private StatePinSwap(BrdAbitPin p_pin_to_swap,StateInteractive p_return_state,IteraBoard p_board_handling,Actlog p_logfile){  super(p_return_state,p_board_handling,p_logfile);  from_pin=p_pin_to_swap;  swappable_pins=p_pin_to_swap.get_swappable_pins();}  }
class C{  public int hashCode(){  return this.getName().hashCode() + this.getActions().hashCode();}  }
class C{  public String scmRevision(){  return properties.getProperty("scm.revision");}  }
class C{  public AttributeCertificateIssuer(AttCertIssuer issuer){  form=issuer.getIssuer();}  }
class C{  final boolean isOnSyncQueue(Node node){  if (node.waitStatus == Node.CONDITION || node.prev == null)   return false;  if (node.next != null)   return true;  return findNodeFromTail(node);}  }
class C{  static synchronized void initialize(@NonNull StoroBuilder builder){  try {    File dir=new File(builder.cacheDir,"storo");    if (!dir.exists() && !dir.mkdir()) {      throw new IOException("Cache folder could not be created.");    }    mCache=SimpleDiskCache.open(dir,1,builder.maxSize);    mGson=builder.gson;    mInitialized=true;  } catch (  Exception e) {    throw new RuntimeException("Storo instance could not be initialized!",e);  }}  }
class C{  public int available() throws IOException {  ensureOpen();  if (reachEOF) {    return 0;  }  return 1;}  }
class C{  public static final void clearLoggingBehaviors(){synchronized (loggingBehaviors) {    loggingBehaviors.clear();  }}  }
class C{  private String buildJwtSession(){  JwtClaimsSetBuilder claimsBuilder=factory.claims();  claimsBuilder.claims(this);  return factory.jwe(pair.getPublic()).headers().alg(JweAlgorithm.RSAES_PKCS1_V1_5).enc(EncryptionMethod.A128CBC_HS256).done().claims(claimsBuilder.build()).signedWith(signingHandler,JwsAlgorithm.HS256).build();}  }
class C{  @SuppressWarnings("unchecked") public ConcurrentHashMap(int initialCapacity,float loadFactor,int concurrencyLevel){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGMENTS)   concurrencyLevel=MAX_SEGMENTS;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  this.segmentShift=32 - sshift;  this.segmentMask=ssize - 1;  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=MIN_SEGMENT_TABLE_CAPACITY;  while (cap < c)   cap<<=1;  Segment<K,V> s0=new Segment<K,V>(loadFactor,(int)(cap * loadFactor),(HashEntry<K,V>[])new HashEntry<?,?>[cap]);  Segment<K,V>[] ss=(Segment<K,V>[])new Segment<?,?>[ssize];  UNSAFE.putOrderedObject(ss,SBASE,s0);  this.segments=ss;}  }
class C{  public void close() throws IOException {  if (!closed) {    try {      finish();    }  finally {      out.close();      closed=true;    }  }}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public CharacterSetPasswordValidator(){  super();}  }
class C{  public void from_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("from_any",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.from_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  protected void cleanUp(){  if (isReleaseReferences()) {    cleanUpOnAck();    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("dialog cleanup : " + getDialogId());    }    if (eventListeners != null) {      eventListeners.clear();    }    timerTaskLock=null;    ackSem=null;    contactHeader=null;    eventHeader=null;    firstTransactionId=null;    firstTransactionMethod=null;    lastResponseDialogId=null;    lastResponseMethod=null;    lastResponseTopMostVia=null;    if (originalRequestRecordRouteHeaders != null) {      originalRequestRecordRouteHeaders.clear();      originalRequestRecordRouteHeaders=null;      originalRequestRecordRouteHeadersString=null;    }    if (routeList != null) {      routeList.clear();      routeList=null;    }    responsesReceivedInForkingCase.clear();  }}  }
class C{  public void testCase04_SwitchSpeakerEarphone() throws Exception {  if (!mButtonDecrease.isEnabled()) {    makeFMPowerUp();  }  String earphone=mFmRadioActivity.getString(R.string.optmenu_earphone);  String speaker=mFmRadioActivity.getString(R.string.optmenu_speaker);  sleep(SHORT_TIME);  mInstrumentation.invokeMenuActionSync(mFmRadioActivity,R.id.fm_menu,0);  mSolo.clickOnText(speaker);  sleep(SHORT_TIME);  mInstrumentation.invokeMenuActionSync(mFmRadioActivity,R.id.fm_menu,0);  assertTrue(mSolo.searchText(earphone));  mInstrumentation.waitForIdleSync();  mInstrumentation.invokeMenuActionSync(mFmRadioActivity,R.id.fm_menu,0);  mSolo.clickOnText(earphone);  sleep(SHORT_TIME);  mInstrumentation.invokeMenuActionSync(mFmRadioActivity,R.id.fm_menu,0);  assertTrue(mSolo.searchText(speaker));}  }
class C{  public void refresh(){  autoroute.ArtSettings settings=board_handling.itera_settings.autoroute_settings;  board.BrdLayerStructure layer_structure=board_handling.get_routing_board().layer_structure;  via_cost_field.setValue(settings.get_via_costs());  plane_via_cost_field.setValue(settings.get_plane_via_costs());  start_ripup_costs.setValue(settings.get_start_ripup_costs());  start_pass_no.setValue(settings.pass_no_get());  for (int i=0; i < preferred_direction_trace_cost_arr.length; ++i) {    preferred_direction_trace_cost_arr[i].setValue(settings.get_preferred_direction_trace_costs(layer_structure.get_layer_no(i)));  }  for (int i=0; i < against_preferred_direction_trace_cost_arr.length; ++i) {    against_preferred_direction_trace_cost_arr[i].setValue(settings.get_against_preferred_direction_trace_costs(layer_structure.get_layer_no(i)));  }}  }
class C{  public Enumeration preorderEnumeration(){  return new PreorderEnumeration(this);}  }
class C{  @Override public boolean execute(){  return true;}  }
class C{  public SQLDataException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  private boolean doRemoteRegistration(){  FSUtils.debug.message("Entered FSNameRegistrationHandler::doRemoteRegistration");  try {    try {      if (acctInfo == null) {        acctInfo=managerInst.readAccountFedInfo(userID,remoteEntityId);      }    } catch (    FSAccountMgmtException e) {      returnLocallyAtSource(response,false);      return false;    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::doRemoteRegistration create" + " request start");    }    FSNameRegistrationRequest regisRequest=createNameRegistrationRequest(acctInfo);    if (regisRequest == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameRegistrationHandler::Registration request could " + "not be formed");      }      returnLocallyAtSource(response,false);      return false;    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::Registration request formed" + "successfully");    }    boolean isSOAPProfile=true;    if (acctInfo.isRoleIDP()) {      List hostProfiles=hostedDescriptor.getRegisterNameIdentifierProtocolProfile();      if (hostProfiles == null || hostProfiles.isEmpty()) {        FSUtils.debug.error("FSNameRegistrationHandler::" + "doRemoteRegistration no registration profile" + " cannot process request");        returnLocallyAtSource(response,false);        return false;      }      String hostProfile=(String)hostProfiles.iterator().next();      if (hostProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_SP_SOAP_PROFILE) || hostProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_IDP_SOAP_PROFILE)) {        isSOAPProfile=true;      } else       if (hostProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_SP_HTTP_PROFILE) || hostProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_IDP_HTTP_PROFILE)) {        isSOAPProfile=false;      } else {        FSUtils.debug.error("FSNameRegistrationHandler::" + "doRemoteRegistration Invalid registration profile" + " cannot process request");        returnLocallyAtSource(response,false);        return false;      }    } else {      List remoteProfiles=remoteDescriptor.getRegisterNameIdentifierProtocolProfile();      if (remoteProfiles == null || remoteProfiles.isEmpty()) {        FSUtils.debug.error("FSNameRegistrationHandler::" + "doRemoteRegistration no registration profile" + " cannot process request");        returnLocallyAtSource(response,false);        return false;      }      String remoteProfile=(String)remoteProfiles.iterator().next();      if (remoteProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_SP_SOAP_PROFILE) || remoteProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_IDP_SOAP_PROFILE)) {        isSOAPProfile=true;      } else       if (remoteProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_SP_HTTP_PROFILE) || remoteProfile.equalsIgnoreCase(IFSConstants.REGISTRATION_IDP_HTTP_PROFILE)) {        isSOAPProfile=false;      } else {        FSUtils.debug.error("FSNameRegistrationHandler::" + "doRemoteRegistration Invalid registration profile" + " cannot process request");        returnLocallyAtSource(response,false);        return false;      }    }    if (isSOAPProfile) {      FSSOAPService instSOAP=FSSOAPService.getInstance();      if (instSOAP != null) {        FSUtils.debug.message("Signing suceeded. To call bindRegistrationRequest");        regisRequest.setID(IFSConstants.REGISTRATIONID);        SOAPMessage msgRegistration=instSOAP.bind(regisRequest.toXMLString(true,true));        if (msgRegistration != null) {          SOAPMessage retSOAPMessage=null;          try {            if (FSServiceUtils.isSigningOn()) {              int minorVersion=regisRequest.getMinorVersion();              if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {                msgRegistration=signRegistrationRequest(msgRegistration,IFSConstants.ID,regisRequest.getID());              } else               if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {                msgRegistration=signRegistrationRequest(msgRegistration,IFSConstants.REQUEST_ID,regisRequest.getRequestID());              } else {                FSUtils.debug.message("invalid minor version.");              }            }            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("calling " + "sendRegistrationMessage");            }            retSOAPMessage=instSOAP.sendMessage(msgRegistration,remoteDescriptor.getSoapEndpoint());          } catch (          SOAPException e) {            FSUtils.debug.error("Error in sending request ",e);            returnLocallyAtSource(response,false);            return false;          }catch (          Exception ex) {            FSUtils.debug.error("Error in sending request:",ex);            returnLocallyAtSource(response,false);            return false;          }          if (retSOAPMessage == null) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("sendRegistrationMessage" + "return response is null");            }            returnLocallyAtSource(response,false);            return false;          }          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("calling" + "parseSOAPMessage after return from IDP");          }          Element elt=instSOAP.parseSOAPMessage(retSOAPMessage);          if (FSServiceUtils.isSigningOn() && regisResponse != null) {            if (!verifyResponseSignature(retSOAPMessage,acctInfo.isRoleIDP())) {              if (FSUtils.debug.messageEnabled()) {                FSUtils.debug.message("Response " + "signature verification failed");                FSUtils.debug.message("Name registration" + " failed in doRemoteRegistration");              }              returnLocallyAtSource(response,false);              return false;            }          }          FSUtils.debug.message("Response signature verification succeeded");          if (elt.getLocalName().equalsIgnoreCase(IFSConstants.NAME_REGISTRATION_RESPONSE)) {            FSNameRegistrationResponse regisResponse=null;            try {              regisResponse=new FSNameRegistrationResponse(elt);            } catch (            SAMLException e) {              regisResponse=null;            }            if (regisResponse != null) {              String responseStatus=((regisResponse.getStatus()).getStatusCode()).getValue();              if (responseStatus.equals(IFSConstants.SAML_SUCCESS)) {                FSUtils.debug.message("Name registration Successful");                oldAcctKey=(FSAccountFedInfoKey)returnMap.get("OldAccountKey");                if (oldAcctKey != null) {                  if (FSUtils.debug.messageEnabled()) {                    FSUtils.debug.message("Get OldAcctKet Name : " + oldAcctKey.getName() + "\nGet OldAcctKet Qualifier:"+ oldAcctKey.getNameSpace());                  }                } else {                  FSUtils.debug.message("OldAccount Key is null");                }                newAcctKey=(FSAccountFedInfoKey)returnMap.get("AccountKey");                if (newAcctKey != null) {                  if (FSUtils.debug.messageEnabled()) {                    FSUtils.debug.message("Get newAcctKey Name : " + newAcctKey.getName() + "\nGet newAcctKey Qualifier:"+ newAcctKey.getNameSpace());                  }                } else {                  FSUtils.debug.message("newAcctKey Key is null");                }                newAcctInfo=(FSAccountFedInfo)returnMap.get("AccountInfo");                userID=(String)returnMap.get("userID");                regisSource=(String)returnMap.get("RegisSource");                returnURL=(String)returnMap.get(IFSConstants.LRURL);                boolean bStatus=doCommonRegistration();                if (FSUtils.debug.messageEnabled()) {                  FSUtils.debug.message("doCommonRegistration returns " + bStatus);                }                if (bStatus && hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {                  FSUtils.debug.message("doRemoteRegis");                  callPostRegisterNameIdentifierSuccess(request,response,userID,regisRequest,regisResponse,IFSConstants.NAME_REGISTRATION_SP_SOAP_PROFILE);                }                returnLocallyAtSource(response,bStatus);                return bStatus;              } else               if (responseStatus.equals(IFSConstants.FEDERATION_NOT_EXISTS_STATUS)) {                if (FSUtils.debug.messageEnabled()) {                  FSUtils.debug.message("Name " + "registration Failed. " + "Federation does not exist");                }                returnLocallyAtSource(response,false);                return false;              } else               if (responseStatus.equals(IFSConstants.REGISTRATION_FAILURE_STATUS)) {                FSUtils.debug.message("Name registration Failed.");                returnLocallyAtSource(response,false);                return false;              }            }          }        }      }      returnLocallyAtSource(response,false);      return false;    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameRegistrationHandler::doRemoteRegistration " + "In Redirect profile");      }      FSNameIdentifierHelper nameHelper=new FSNameIdentifierHelper(hostedConfig);      String newId=nameHelper.createNameIdentifier();      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Registration Id : " + newId);      }      regisRequest.setRelayState(newId);      HashMap valMap=new HashMap();      valMap.put("SSODetails",regisMap);      valMap.put("ReturnEntry",returnMap);      if (returnURL != null) {        valMap.put(IFSConstants.LRURL,returnURL);      }      FSRegistrationManager registInst=FSRegistrationManager.getInstance(metaAlias);      registInst.setRegistrationMapInfo(newId,valMap);      Set ketSet=valMap.keySet();      Iterator iter=ketSet.iterator();      String key=null;      String value=null;      while (iter.hasNext()) {        key=(String)iter.next();        value=(String)regisMap.get(key);        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Putting in Map Key : " + key + "\nPutting in Map Value : "+ value);        }      }      String urlEncodedRequest=regisRequest.toURLEncodedQueryString();      if (FSServiceUtils.isSigningOn()) {        String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);        if (certAlias == null || certAlias.length() == 0) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSBrowserArtifactConsumerHandler:: " + "signSAMLRequest:" + "couldn't obtain this site's cert alias.");          }          throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));        }        urlEncodedRequest=FSSignatureUtil.signAndReturnQueryString(urlEncodedRequest,certAlias);      }      StringBuffer redirectURL=new StringBuffer();      String retURL=remoteDescriptor.getRegisterNameIdentifierServiceURL();      redirectURL.append(retURL);      if (retURL.indexOf(IFSConstants.QUESTION_MARK) == -1) {        redirectURL.append(IFSConstants.QUESTION_MARK);      } else {        redirectURL.append(IFSConstants.AMPERSAND);      }      redirectURL.append(urlEncodedRequest);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Request to be sent : " + redirectURL.toString());      }      response.sendRedirect(redirectURL.toString());      return true;    }  } catch (  IOException e) {    FSUtils.debug.error("FSNameRegistrationHandler" + FSUtils.bundle.getString(IFSConstants.FEDERATION_REDIRECT_FAILED));  }catch (  FSMsgException e) {    FSUtils.debug.error("FSNameRegistrationHandler::doRemoteRegistration " + FSUtils.bundle.getString(IFSConstants.TERMINATION_FAILED_SEND_REMOTE));  }catch (  SAMLResponderException e) {    FSUtils.debug.error("FSNameRegistrationHandler::doRemoteRegistration " + FSUtils.bundle.getString(IFSConstants.TERMINATION_FAILED_SEND_REMOTE));  }  returnLocallyAtSource(response,false);  return false;}  }
class C{  static boolean isWindows(){  if (!checkedWindows) {    OSInfo.OSType osType=AccessController.doPrivileged(OSInfo.getOSTypeAction());    if (osType == OSInfo.OSType.WINDOWS) {      isWindows=true;      String systemFonts=AccessController.doPrivileged(new GetPropertyAction("swing.useSystemFontSettings"));      useSystemFonts=(systemFonts != null && (Boolean.valueOf(systemFonts).booleanValue()));    }    checkedWindows=true;  }  return isWindows;}  }
class C{  private void disconnectFromReplServer() throws Exception {  String synchroServerStringDN="cn=" + testName + ", cn=domains,"+ SYNCHRO_PLUGIN_DN;  assertNotNull(synchroServerEntry);  DN synchroServerDN=DN.valueOf(synchroServerStringDN);  deleteEntry(synchroServerDN);  synchroServerEntry=null;  configEntriesToCleanup.remove(synchroServerDN);}  }
class C{  protected File configBase(Context context){  File file=new File(System.getProperty("catalina.base"),"conf");  Container host=context.getParent();  if (host instanceof Host) {    Container engine=host.getParent();    if (engine instanceof Engine) {      file=new File(file,engine.getName());    }    file=new File(file,host.getName());    try {      file=file.getCanonicalFile();    } catch (    IOException e) {      log.error(e);    }  }  return (file);}  }
class C{  public static void crossCheckGetColumnRowAndResultSetMetaData(ResultSet rs,ResultSetMetaData rsmdt) throws SQLException {  int col=rs.getInt("ORDINAL_POSITION");  assertEquals("RSMD.getCatalogName",rsmdt.getCatalogName(col),rs.getString("TABLE_CAT"));  assertEquals("RSMD.getSchemaName",rsmdt.getSchemaName(col),rs.getString("TABLE_SCHEM"));  assertEquals("RSMD.getTableName",rsmdt.getTableName(col),rs.getString("TABLE_NAME"));  assertEquals("COLUMN_NAME",rsmdt.getColumnName(col),rs.getString("COLUMN_NAME"));  int metaColumnType=rs.getInt("DATA_TYPE");  if (metaColumnType == Types.BOOLEAN) {    assertEquals("TYPE_NAME","BOOLEAN",rs.getString("TYPE_NAME"));    assertEquals("TYPE_NAME","SMALLINT",rsmdt.getColumnTypeName(col));    assertEquals("DATA_TYPE",Types.SMALLINT,rsmdt.getColumnType(col));  } else   if (metaColumnType == Types.JAVA_OBJECT) {    assertEquals("DATA_TYPE",Types.LONGVARBINARY,rsmdt.getColumnType(col));  } else   if (metaColumnType == Types.VARBINARY) {    assertEquals("DATA_TYPE",Types.VARBINARY,rsmdt.getColumnType(col));  } else   if (metaColumnType == Types.BINARY) {    assertEquals("DATA_TYPE",Types.BINARY,rsmdt.getColumnType(col));  } else   if (metaColumnType == Types.NUMERIC) {    assertEquals("DATA_TYPE",Types.DECIMAL,rsmdt.getColumnType(col));    assertEquals("TYPE_NAME","DECIMAL",rsmdt.getColumnTypeName(col));    assertEquals("TYPE_NAME","NUMERIC",rs.getString("TYPE_NAME"));  } else {    assertEquals("DATA_TYPE",rsmdt.getColumnType(col),rs.getInt("DATA_TYPE"));    assertEquals("TYPE_NAME",rsmdt.getColumnTypeName(col),rs.getString("TYPE_NAME"));  }  assertEquals("NULLABLE",rsmdt.isNullable(col),rs.getInt("NULLABLE"));  assertEquals("REMARKS","",rs.getString("REMARKS"));switch (rsmdt.isNullable(col)) {case ResultSetMetaData.columnNoNulls:    assertEquals("IS_NULLABLE","NO",rs.getString("IS_NULLABLE"));  break;case ResultSetMetaData.columnNullable:assertEquals("IS_NULLABLE","YES",rs.getString("IS_NULLABLE"));break;case ResultSetMetaData.columnNullableUnknown:assertEquals("IS_NULLABLE","",rs.getString("IS_NULLABLE"));break;default :fail("invalid return from rsmdt.isNullable(col)");}assertNull("SCOPE_CATLOG",rs.getString("SCOPE_CATLOG"));assertNull("SCOPE_SCHEMA",rs.getString("SCOPE_SCHEMA"));assertNull("SCOPE_TABLE",rs.getString("SCOPE_TABLE"));assertEquals("SOURCE_DATA_TYPE",0,rs.getShort("SOURCE_DATA_TYPE"));assertTrue(rs.wasNull());assertEquals("IS_AUTOINCREMENT",rsmdt.isAutoIncrement(col) ? "YES" : "NO",rs.getString("IS_AUTOINCREMENT"));assertFalse(rs.wasNull());}  }
class C{  public boolean isSupported(String feature,String version){  return false;}  }
class C{  @Override public void write(byte[] buffer) throws IOException {  write(buffer,0,buffer.length);}  }
class C{  public final boolean isBatteryPresent(){  return getBatteryStatusIntent().getExtras().getBoolean(BatteryManager.EXTRA_PRESENT);}  }
class C{  protected Future<Void> createHttpServer(Router router,String host,int port){  Future<HttpServer> httpServerFuture=Future.future();  vertx.createHttpServer().requestHandler(null).listen(port,host,httpServerFuture.completer());  return httpServerFuture.map(null);}  }
class C{  public void testCertPathValidator03() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < validValues.length; i++) {    certPV=CertPathValidator.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);  }}  }
class C{  public SyslogFormatter(){  hostname=getLocalHostName();  procId=String.valueOf(SyslogFormatter.class.hashCode());  allFields=LogManagerUtil.getLogManager().getAllFields();  allowed=LogManagerUtil.getLogManager().getSelectedFieldSet();  allFieldsSet=new HashSet<String>();  allFieldsSet.addAll(Arrays.asList(allFields));  String facilityStr=LogManagerUtil.getLogManager().getProperty(LogConstants.SYSLOG_FACILITY);  if (facilityStr != null) {    facility=FACILITIES.indexOf(facilityStr.toLowerCase());    if (facility == -1) {      Debug.error("Invalid facility '" + facilityStr + "', defaulting to local5");      facility=LOCAL5_FACILITY;    }  }  if (Debug.messageEnabled()) {    Debug.message("Syslog formatter initialized. Configuration:" + "\nallFields = " + Arrays.toString(allFields) + "\nallowed = "+ allowed+ "\nhostname = "+ hostname+ "\nfacility = "+ facility+ ", "+ FACILITIES.get(facility));  }}  }
class C{  @Override public void backgroundProcess(){  super.backgroundProcess();  for (  Realm r : realms) {    r.backgroundProcess();  }}  }
class C{  public Phaser(){  this(null,0);}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  private void write(final ByteString record) throws IOException {  ByteString data=new ByteStringBuilder(SIZE_OF_RECORD_SIZE + record.length()).appendInt(record.length()).appendBytes(record).toByteString();  int distanceToBlockStart=BlockLogReader.getDistanceToNextBlockStart(writer.getBytesWritten(),blockSize);  int cumulatedDistanceToBeginning=distanceToBlockStart;  int dataPosition=0;  int dataRemaining=data.length();  final int dataSizeForOneBlock=blockSize - SIZE_OF_BLOCK_OFFSET;  while (distanceToBlockStart < dataRemaining) {    if (distanceToBlockStart > 0) {      final int dataEndPosition=dataPosition + distanceToBlockStart;      writer.write(data.subSequence(dataPosition,dataEndPosition));      dataPosition=dataEndPosition;      dataRemaining-=distanceToBlockStart;    }    writer.write(ByteString.valueOfInt(cumulatedDistanceToBeginning));    distanceToBlockStart=dataSizeForOneBlock;    cumulatedDistanceToBeginning+=blockSize;  }  writer.write(data.subSequence(dataPosition,data.length()));}  }
class C{  @Override public boolean isAllowed(LocalBackendDeleteOperation operation){  AciContainer container=new AciLDAPOperationContainer(operation,ACI_DELETE);  return isAllowed(container,operation);}  }
class C{  public void checkHeaders() throws ParseException {  String prefix="Missing a required header : ";  if (getCSeq() == null) {    throw new ParseException(prefix + CSeqHeader.NAME,0);  }  if (getTo() == null) {    throw new ParseException(prefix + ToHeader.NAME,0);  }  if (this.callIdHeader == null || this.callIdHeader.getCallId() == null || callIdHeader.getCallId().equals("")) {    throw new ParseException(prefix + CallIdHeader.NAME,0);  }  if (getFrom() == null) {    throw new ParseException(prefix + FromHeader.NAME,0);  }  if (getViaHeaders() == null) {    throw new ParseException(prefix + ViaHeader.NAME,0);  }  if (getMaxForwards() == null) {    throw new ParseException(prefix + MaxForwardsHeader.NAME,0);  }  if (getTopmostVia() == null)   throw new ParseException("No via header in request! ",0);  if (getMethod().equals(Request.NOTIFY)) {    if (getHeader(SubscriptionStateHeader.NAME) == null)     throw new ParseException(prefix + SubscriptionStateHeader.NAME,0);    if (getHeader(EventHeader.NAME) == null)     throw new ParseException(prefix + EventHeader.NAME,0);  } else   if (getMethod().equals(Request.PUBLISH)) {    if (getHeader(EventHeader.NAME) == null)     throw new ParseException(prefix + EventHeader.NAME,0);  }  final String method=requestLine.getMethod();  if (SIPTransactionStack.isDialogCreated(method)) {    if (this.getContactHeader() == null) {      if (this.getToTag() == null)       throw new ParseException(prefix + ContactHeader.NAME,0);    }  }  if (requestLine != null && method != null && getCSeq().getMethod() != null && method.compareTo(getCSeq().getMethod()) != 0) {    throw new ParseException("CSEQ method mismatch with  Request-Line ",0);  }}  }
class C{  protected void initCipher() throws IOException {  try {    cipher.init(Cipher.ENCRYPT_MODE,key,params);  } catch (  InvalidKeyException e) {    throw new IOException(e);  }catch (  InvalidAlgorithmParameterException e) {    throw new IOException(e);  }}  }
class C{  public static final <V>V fromJson(String json,Type type){  return GSON.fromJson(json,type);}  }
class C{  public void init(InputMeta in) throws IOException {  style=in.readWord();  color=in.readColor();  hatch=in.readWord();}  }
class C{  public void invalidateLayout(Container c){}  }
class C{  protected void validate(){  super.validate();  updateGrid();}  }
class C{  public String findRole(String rolename){  UserDatabase database=(UserDatabase)this.resource;  Role role=database.findRole(rolename);  if (role == null) {    return (null);  }  try {    ObjectName oname=MBeanUtils.createObjectName(managedRole.getDomain(),role);    return (oname.toString());  } catch (  MalformedObjectNameException e) {    IllegalArgumentException iae=new IllegalArgumentException("Cannot create object name for role [" + rolename + "]");    iae.initCause(e);    throw iae;  }}  }
class C{  public void stopNicely(){  run=false;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof SecretKeySpec)) {    return false;  }  SecretKeySpec ks=(SecretKeySpec)obj;  return (algorithm.equalsIgnoreCase(ks.algorithm)) && (Arrays.equals(key,ks.key));}  }
class C{  public void detach(){  if (m_allowRelease) {    m_DTMXRTreeFrag.destruct();    setObject(null);  }}  }
class C{  private void addHistoryTable(SQLiteDatabase db){  db.execSQL("CREATE TABLE " + HistoryContract.HistoryEntry.TABLE_NAME + " ("+ HistoryContract.HistoryEntry._ID+ " INTEGER PRIMARY KEY,"+ HistoryContract.HistoryEntry.COLUMN_QUERY+ " TEXT NOT NULL,"+ HistoryContract.HistoryEntry.COLUMN_INSERT_DATE+ " INTEGER DEFAULT 0,"+ HistoryContract.HistoryEntry.COLUMN_IS_HISTORY+ " INTEGER NOT NULL DEFAULT 0,"+ "UNIQUE ("+ HistoryContract.HistoryEntry.COLUMN_QUERY+ ") ON CONFLICT REPLACE);");}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.XACMLPDPDescriptorElement createXACMLPDPDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.XACMLPDPDescriptorElementImpl();}  }
class C{  public void test_read$BII() throws IOException {  int bytesRead;  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  byte[] rbuf=new byte[4000];  FileOutputStream fos=new java.io.FileOutputStream(fileName);  fos.write(testString.getBytes(),0,testLength);  fos.close();  bytesRead=raf.read(rbuf,10,testLength / 2);  assertEquals("Test 1: Incorrect number of bytes read. ",testLength / 2,bytesRead);  assertEquals("Test 2: Incorrect bytes read. ",testString.substring(0,testLength / 2),new String(rbuf,10,testLength / 2));  bytesRead=raf.read(rbuf,0,testLength);  assertEquals("Test 3: Incorrect number of bytes read. ",testLength - (testLength / 2),bytesRead);  assertEquals("Test 4: Incorrect bytes read. ",testString.substring(testLength / 2,(testLength / 2) + bytesRead),new String(rbuf,0,bytesRead));  bytesRead=raf.read(rbuf,0,1);  assertTrue("Test 5: EOF (-1) expected. ",bytesRead == -1);  try {    raf.read(rbuf,-1,1);    fail("Test 6: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    raf.read(rbuf,0,-1);    fail("Test 7: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    raf.read(rbuf,2000,2001);    fail("Test 8: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  raf.close();  try {    bytesRead=raf.read(rbuf,0,1);    fail("Test 9: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(priority);}  }
class C{  public void close() throws IOException {  out.close();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrValue;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("title");  attrValue=addrAttr.getNodeValue();  assertEquals("nodeValue","Yes",attrValue);}  }
class C{  public DsnFileScanner(java.io.Reader in){  this.zzReader=in;}  }
class C{  @Override public List<Rule> match(String namespaceURI,String pattern){  List<Rule> rulesList=lookup(namespaceURI,pattern);  if ((rulesList == null) || (rulesList.size() < 1)) {    String longKey="";    Iterator<String> keys=this.cache.keySet().iterator();    while (keys.hasNext()) {      String key=keys.next();      if (key.startsWith("*/")) {        if (pattern.equals(key.substring(2)) || pattern.endsWith(key.substring(1))) {          if (key.length() > longKey.length()) {            rulesList=lookup(namespaceURI,key);            longKey=key;          }        }      }    }  }  if (rulesList == null) {    rulesList=new ArrayList<>();  }  return (rulesList);}  }
class C{  public void select(int index){  ListPeer peer;  do {    peer=(ListPeer)this.peer;    if (peer != null) {      peer.select(index);      return;    }synchronized (this) {      boolean alreadySelected=false;      for (int i=0; i < selected.length; i++) {        if (selected[i] == index) {          alreadySelected=true;          break;        }      }      if (!alreadySelected) {        if (!multipleMode) {          selected=new int[1];          selected[0]=index;        } else {          int newsel[]=new int[selected.length + 1];          System.arraycopy(selected,0,newsel,0,selected.length);          newsel[selected.length]=index;          selected=newsel;        }      }    }  } while (peer != this.peer);}  }
class C{  public LogConfigurationException(String message){  super(message);}  }
class C{  private Entry addEntry(String dn) throws Exception {  return TestCaseUtils.addEntry("dn: " + dn,"objectClass: top","objectClass: person","objectClass: organizationalPerson","objectClass: inetOrgPerson","uid: 1","givenName: test","sn: 1","cn: test");}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.BaseConfigType createBaseConfigType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.BaseConfigTypeImpl();}  }
class C{  public Response createResponse(int statusCode,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards) throws ParseException {  if (callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null)   throw new ParseException("JAIN-SIP Exception, some parameters are missing" + ", unable to create the response",0);  SIPResponse sipResponse=new SIPResponse();  sipResponse.setStatusCode(statusCode);  sipResponse.setCallId(callId);  sipResponse.setCSeq(cSeq);  sipResponse.setFrom(from);  sipResponse.setTo(to);  sipResponse.setVia(via);  sipResponse.setMaxForwards(maxForwards);  if (userAgent != null) {    sipResponse.setHeader(userAgent);  }  return sipResponse;}  }
class C{  public boolean isCollectiveAttributeSubentry(){  return hasObjectClass(OC_COLLECTIVE_ATTR_SUBENTRY_LC);}  }
class C{  public boolean hasChild(OptionalRelationDefinition<?,?> d){  validateRelationDefinition(d);  return serverContext.managedObjectExists(path.child(d));}  }
class C{  protected void defaultExceptionHandling(Object exchange,Throwable ex) throws Throwable {  if (ex instanceof IPublicException) {    defaultPublicExceptionHandling(exchange,(IPublicException)ex);  } else {    defaultPrivateExceptionHandling(exchange,ex);  }}  }
class C{  @Override public String toString(){  return new String(toByteArray());}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MsgTypeElement createMsgTypeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgTypeElementImpl();}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  FSUtils.debug.message("Entered FSTerminationInitiationServlet Init");  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public String toUTF8(byte[] data) throws UnsupportedEncodingException {  Reject.ifNull(data);  return new String(data,ENCODING);}  }
class C{  public void forwardTo(RequestContext context){  String orgDN=(String)getPageSessionAttribute(ORG_DN);  String userDN=(String)getPageSessionAttribute(USER_DN);  ISLocaleContext localeContext=new ISLocaleContext();  localeContext.setLocale(context.getRequest());  java.util.Locale locale=localeContext.getLocale();  if (orgDN == null || orgDN.length() == 0 || userDN == null || userDN.length() == 0) {    PWResetUserValidationViewBean vb=(PWResetUserValidationViewBean)getViewBean(PWResetUserValidationViewBean.class);    vb.forwardTo(context);  } else {    PWResetQuestionModel model=(PWResetQuestionModel)getModel();    model.readPWResetProfile(orgDN);    model.setUserLocale(locale.toString());    populateQuestionsList(userDN,orgDN);    super.forwardTo(context);  }}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public void testDivideRoundDownPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799283E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("domestic");  s=domesticAttr.getParentNode();  assertNull("attrParentNodeNullAssert",s);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrcreatetextnode.class,args);}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mEmailView.setError(null);  mPasswordView.setError(null);  String email=mEmailView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(email,password);    mAuthTask.execute((Void)null);    Intent wellBabyIntent=new Intent(this,wellbabyreport.class);    startActivity(wellBabyIntent);  }}  }
class C{  public static PdfAction createJavaScript(String javaScript){  return new PdfAction().put(PdfName.S,PdfName.JavaScript).put(PdfName.JS,new PdfString(javaScript));}  }
class C{  @Override public void importEntity(Map requestData) throws AMConsoleException {  try {    String standardFile=(String)requestData.get(STANDARD_META);    if (standardFile == null) {      throw new AMConsoleException("missing.metadata");    }    standardMetaData=Task.getContent(standardFile,getUserLocale());    String protocol=getProtocol(standardMetaData);    String extendedFile=(String)requestData.get(EXTENDED_META);    if ((extendedFile != null) && (extendedFile.length() > 0)) {      extendedMetaData=Task.getContent(extendedFile,getUserLocale());      String tmp=getProtocol(standardMetaData);      if (!protocol.equals(tmp)) {        throw new AMConsoleException("protocol.mismatch");      }    }    realm=(String)requestData.get(REALM_NAME);    if (realm == null) {      realm=DEFAULT_ROOT;    }    if (protocol.equals(SAML2Constants.PROTOCOL_NAMESPACE)) {      createSAMLv2Entity();    } else     if (protocol.equals(IDFF)) {      createIDFFEntity();    } else {      createWSFedEntity();    }  } catch (  WorkflowException ex) {    throw new AMConsoleException(ex);  }}  }
class C{  @Override public void fatalError(SAXParseException exception) throws SAXException {  log.error("Parse Fatal Error at line " + exception.getLineNumber() + " column "+ exception.getColumnNumber()+ ": "+ exception.getMessage(),exception);  if (errorHandler != null) {    errorHandler.fatalError(exception);  }}  }
class C{  public static ConnectionFactory configureConnectionFactory(final JsonValue configuration,final String name,final TrustManager trustManager,final X509KeyManager keyManager){  return configureConnectionFactory(configuration,name,trustManager,keyManager,null);}  }
class C{  public void clear(){  al.clear();}  }
class C{  public static boolean isSpace(int c){  return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;}  }
class C{  static byte[] discardWhitespace(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {switch (data[i]) {case (byte)' ':case (byte)'\n':case (byte)'\r':case (byte)'\t':      break;default :    groomedData[bytesCopied++]=data[i];}}byte packedData[]=new byte[bytesCopied];System.arraycopy(groomedData,0,packedData,0,bytesCopied);return packedData;}  }
class C{  private static void dualPivotQuicksort(long[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  long ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    long t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    long t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    long t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    long t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    long t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    long t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    long t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  long pivot1=ae2;  a[e2]=a[left];  long pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      long ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public static byte[] toByteArray(String spacedHex){  int idx=0;  final int len=spacedHex.length();  final StringBuilder sb=new StringBuilder();  final ByteArrayOutputStream bytes=new ByteArrayOutputStream();  while (idx < len) {    final char chr=spacedHex.charAt(idx++);    if (chr != ' ') {      sb.setLength(0);      sb.append(chr);      sb.append(spacedHex.charAt(idx++));      final int i=Integer.parseInt(sb.toString(),16);      final byte b=((byte)i);      bytes.write(b);    }  }  return bytes.toByteArray();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildgetnodename.class,args);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  boolean state;  Attr attribute;  Attr newAttribute;  String nullNS=null;  doc=(Document)load("staff",false);  element=doc.createElementNS("http://www.w3.org/DOM","address");  assertNotNull("createElementNotNull",element);  attribute=doc.createAttributeNS(nullNS,"domestic");  newAttribute=element.setAttributeNode(attribute);  state=element.hasAttributeNS(nullNS,"domestic");  assertTrue("elementhasattributens03",state);}  }
class C{  public final void writeDouble(double v) throws IOException {  writeLong(Double.doubleToLongBits(v));}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public AssertionManagerClient(String[] urls) throws SAMLException {  try {    stub=new SOAPClient(urls);    useLocal=false;  } catch (  Exception e) {    if (SAMLUtils.debug.warningEnabled()) {      SAMLUtils.debug.warning("AssertionManagerClient() Exception",e);    }    throw (new SAMLException(e.getMessage()));  }}  }
class C{  @Override public Context createSubcontext(Name name) throws NamingException {  return getBoundContext().createSubcontext(parseName(name));}  }
class C{  private Builder(){  super(net.aimeizi.person.Person.SCHEMA$);}  }
class C{  public CallbackIdAttribute(String callbackId){  super(OctetUtils.toOctets(AttributeType.CALLBACK_ID,callbackId));  this.str=callbackId;}  }
class C{  public Object clone() throws CloneNotSupportedException {  OneStepIterator clone=(OneStepIterator)super.clone();  if (m_iterator != null) {    clone.m_iterator=m_iterator.cloneIterator();  }  return clone;}  }
class C{  public boolean hasComment(){  return comment != null;}  }
class C{  private TimeThread(){  this.scheduler.scheduleWithFixedDelay(timeInfo,0,200,TimeUnit.MILLISECONDS);}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateCrtKeyParameters key){  super(key);  this.publicExponent=key.getPublicExponent();  this.primeP=key.getP();  this.primeQ=key.getQ();  this.primeExponentP=key.getDP();  this.primeExponentQ=key.getDQ();  this.crtCoefficient=key.getQInv();}  }
class C{  void doSomeSweeping(boolean tryHarder){  int probes=tryHarder ? LONG_SWEEP_PROBES : SHORT_SWEEP_PROBES;  Node o, p;  final Node sweeper=this.sweeper;  boolean passedGo;  if (sweeper == null) {    o=null;    p=head;    passedGo=true;  } else {    o=sweeper;    p=o.next;    passedGo=false;  }  for (; probes > 0; probes--) {    if (p == null) {      if (passedGo)       break;      o=null;      p=head;      passedGo=true;    }    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.isDetached()) {      probes=LONG_SWEEP_PROBES;      p.clear();      p.next=null;      if (o == null) {        head=next;        if (next == null) {          itrs=null;          return;        }      } else       o.next=next;    } else {      o=p;    }    p=next;  }  this.sweeper=(p == null) ? null : o;}  }
class C{  private boolean validateAuthSchemes(Set authSchemeSet) throws PolicyException {  if (authSchemeSet.isEmpty()) {    String args[]={AUTH_SCHEME};    throw new PolicyException(ResBundleUtils.rbName,"property_does_not_allow_empty_values",args,null);  }  Iterator authSchemeSetIter=authSchemeSet.iterator();  authSchemes.clear();  while (authSchemeSetIter.hasNext()) {    try {      String authScheme=(String)authSchemeSetIter.next();      authSchemes.add(authScheme);    } catch (    ClassCastException e) {      String args[]={AUTH_SCHEME};      throw new PolicyException(ResBundleUtils.rbName,"property_is_not_a_String",args,null);    }  }  return true;}  }
class C{  public int showOpenDialog(Component parent) throws HeadlessException {  setDialogType(OPEN_DIALOG);  return showDialog(parent,null);}  }
class C{  public static final Index createTestIndexOneField(){  Index index=new Index("myindexwithonefield");  index.setTable(DB,"mytable");  ArrayList<IndexField> fields=new ArrayList<>();  fields.add(new IndexField("myindexedfield"));  index.setFields(fields);  index.isUnique(false);  return index;}  }
class C{  private BigInteger[] divideAndRemainderKnuth(BigInteger val){  BigInteger[] result=new BigInteger[2];  MutableBigInteger q=new MutableBigInteger(), a=new MutableBigInteger(this.mag), b=new MutableBigInteger(val.mag);  MutableBigInteger r=a.divideKnuth(b,q);  result[0]=q.toBigInteger(this.signum == val.signum ? 1 : -1);  result[1]=r.toBigInteger(this.signum);  return result;}  }
class C{  public static void fill(long[] a,int fromIndex,int toIndex,long val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  private static String verifyXPathRoot(String schemaNS,String rootProp) throws XMPException {  if (schemaNS == null || schemaNS.length() == 0) {    throw new XMPException("Schema namespace URI is required",XMPError.BADSCHEMA);  }  if ((rootProp.charAt(0) == '?') || (rootProp.charAt(0) == '@')) {    throw new XMPException("Top level name must not be a qualifier",XMPError.BADXPATH);  }  if (rootProp.indexOf('/') >= 0 || rootProp.indexOf('[') >= 0) {    throw new XMPException("Top level name must be simple",XMPError.BADXPATH);  }  String prefix=XMPMetaFactory.getSchemaRegistry().getNamespacePrefix(schemaNS);  if (prefix == null) {    throw new XMPException("Unregistered schema namespace URI",XMPError.BADSCHEMA);  }  int colonPos=rootProp.indexOf(':');  if (colonPos < 0) {    verifySimpleXMLName(rootProp);    return prefix + rootProp;  } else {    verifySimpleXMLName(rootProp.substring(0,colonPos));    verifySimpleXMLName(rootProp.substring(colonPos));    prefix=rootProp.substring(0,colonPos + 1);    String regPrefix=XMPMetaFactory.getSchemaRegistry().getNamespacePrefix(schemaNS);    if (regPrefix == null) {      throw new XMPException("Unknown schema namespace prefix",XMPError.BADSCHEMA);    }    if (!prefix.equals(regPrefix)) {      throw new XMPException("Schema namespace URI and prefix mismatch",XMPError.BADSCHEMA);    }    return rootProp;  }}  }
class C{  public CustomObjectInputStream(InputStream stream,ClassLoader classLoader,Log log,Pattern allowedClassNamePattern,boolean warnOnFailure) throws IOException {  super(stream);  if (log == null && allowedClassNamePattern != null && warnOnFailure) {    throw new IllegalArgumentException(sm.getString("customObjectInputStream.logRequired"));  }  this.classLoader=classLoader;  this.log=log;  this.allowedClassNamePattern=allowedClassNamePattern;  if (allowedClassNamePattern == null) {    this.allowedClassNameFilter=null;  } else {    this.allowedClassNameFilter=allowedClassNamePattern.toString();  }  this.warnOnFailure=warnOnFailure;  Set<String> reportedClasses;synchronized (reportedClassCache) {    reportedClasses=reportedClassCache.get(classLoader);  }  if (reportedClasses == null) {    reportedClasses=Collections.newSetFromMap(new ConcurrentHashMap<String,Boolean>());synchronized (reportedClassCache) {      Set<String> original=reportedClassCache.get(classLoader);      if (original == null) {        reportedClassCache.put(classLoader,reportedClasses);      } else {        reportedClasses=original;      }    }  }  this.reportedClasses=reportedClasses;}  }
class C{  public MBeanParameterInfo(String name,String type,String description){  this(name,type,description,(Descriptor)null);}  }
class C{  public boolean is_orthogonal(){  return direction().is_orthogonal();}  }
class C{  public void testMac14() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] b={(byte)0,(byte)0,(byte)0,(byte)0,(byte)0};  byte[] upd1={(byte)0,(byte)1,(byte)5,(byte)4,(byte)3,(byte)2};  byte[] upd2={(byte)5,(byte)4,(byte)3,(byte)2};  byte[] res1;  byte[] res2;  SecretKeySpec scs=new SecretKeySpec(b,"SHA1");  for (int i=0; i < macs.length; i++) {    macs[i].init(scs);    macs[i].update(upd1,2,4);    res1=macs[i].doFinal();    macs[i].init(scs);    macs[i].update(upd2);    res2=macs[i].doFinal();    assertEquals("Results are not the same",res1.length,res2.length);    for (int t=0; t < res1.length; t++) {      assertEquals("Results are not the same",res1[t],res2[t]);    }    macs[i].init(scs);    macs[i].update((byte)5);    res1=macs[i].doFinal();    macs[i].init(scs);    macs[i].update(upd1,2,1);    res2=macs[i].doFinal();    assertEquals("Results are not the same",res1.length,res2.length);    for (int t=0; t < res1.length; t++) {      assertEquals("Results are not the same",res1[t],res2[t]);    }  }}  }
class C{  public void testGetNewClientTransaction(){  try {    Request invite=createTiInviteRequest(null,null,null);    ClientTransaction tran=null;    try {      tran=tiSipProvider.getNewClientTransaction(invite);    } catch (    TransactionUnavailableException exc) {      exc.printStackTrace();      fail("A TransactionUnavailableException was thrown while trying to " + "create a new client transaction");    }    assertNotNull("A null ClientTransaction was returned by SipProvider." + "getNewClientTransaction().",tran);    String tranBranch=tran.getBranchId();    String reqBranch=((ViaHeader)invite.getHeader(ViaHeader.NAME)).getBranch();    assertEquals("The newly created transaction did not have the same " + "branch id as the request that created it",tranBranch,reqBranch);    assertNotNull("The transaction's getRequest() method returned a null Request ",tran.getRequest());    assertEquals("The transaction's getRequest() method returned a Request " + "that did not match the one that we used to create it!",tran.getRequest(),invite);  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  static String checkValidData(final String data){  String tempData=data;  if (tempData == null || tempData.length() == 0) {    tempData=EasyDeviceInfo.notFoundVal;  }  return tempData;}  }
class C{  private static double calc_fanout_via_ripup_cost_factor(BrdTracep p_trace){  final double FANOUT_COST_CONST=20000;  Collection<BrdItem> curr_end_contacts;  for (int i=0; i < 2; ++i) {    if (i == 0) {      curr_end_contacts=p_trace.get_start_contacts();    } else {      curr_end_contacts=p_trace.get_end_contacts();    }    if (curr_end_contacts.size() != 1) {      continue;    }    BrdItem curr_trace_contact=curr_end_contacts.iterator().next();    boolean protect_fanout_via=false;    if (curr_trace_contact instanceof board.items.BrdAbitPin && curr_trace_contact.first_layer() == curr_trace_contact.last_layer()) {      protect_fanout_via=true;    } else     if (curr_trace_contact instanceof BrdTracep && curr_trace_contact.get_fixed_state() == ItemFixState.SHOVE_FIXED) {      BrdTracep contact_trace=(BrdTracep)curr_trace_contact;      if (contact_trace.corner_count() == 2) {        protect_fanout_via=true;      }    }    if (protect_fanout_via) {      double fanout_via_cost_factor=p_trace.get_half_width() / p_trace.get_length();      fanout_via_cost_factor*=fanout_via_cost_factor;      fanout_via_cost_factor*=FANOUT_COST_CONST;      fanout_via_cost_factor=Math.max(fanout_via_cost_factor,1);      return fanout_via_cost_factor;    }  }  return 1;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfNull copyTo(PdfDocument document,boolean allowDuplicating){  return (PdfNull)super.copyTo(document,allowDuplicating);}  }
class C{  public boolean isUserQuestionEnabled(String orgDN){  boolean enabled=false;  try {    String value=getAttributeValue(orgDN,PW_RESET_PERSONAL_ANSWER);    enabled=(value != null) && value.equalsIgnoreCase(STRING_TRUE);  } catch (  SSOException e) {    debug.warning("PWResetQuestionModelImpl.isUserQuestionEnabled",e);  }catch (  SMSException e) {    debug.error("PWResetQuestionModelImpl.isUserQuestionEnabled",e);  }  return enabled;}  }
class C{  public static void prepareUnicode(final StringBuilder buffer,final ByteSequence sequence,final boolean trim,final boolean foldCase){  Reject.ifNull(buffer,sequence);  final int length=sequence.length();  for (int i=0; i < length; i++) {    final byte b=sequence.byteAt(i);    if ((b & 0x7F) != b) {      MappingTable.map(buffer,sequence.subSequence(i,length),trim,foldCase);      String normalizedForm=Normalizer.normalize(buffer,Form.NFKD);      buffer.setLength(0);      buffer.append(normalizedForm);      break;    }switch (b) {case ' ':      if (canMapToSpace(buffer,trim)) {        buffer.append(' ');      }    break;default :  if (b >= '\u0009' && b < '\u000E') {    if (canMapToSpace(buffer,trim)) {      buffer.append(SPACE_CHAR);    }  } else   if ((b >= '\u0000' && b <= '\u0008') || (b >= '\u000E' && b <= '\u001F') || b == '\u007F') {    break;  } else   if (foldCase && b >= 'A' && b <= 'Z') {    buffer.append((char)(b + 32));  } else {    buffer.append((char)b);  }break;}}if (trim) {for (int i=buffer.length() - 1; i > 0; i--) {if (buffer.charAt(i) == SPACE_CHAR) {buffer.delete(i,i + 1);} else {break;}}}}  }
class C{  public int pin_count(){  return pin_arr.length;}  }
class C{  public EncryptedAttribute createEncryptedAttribute(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ENCRYPTED_ATTRIBUTE,xml);  if (obj == null) {    return new EncryptedAttributeImpl(xml);  } else {    return (EncryptedAttribute)obj;  }}  }
class C{  public boolean net_nos_equal(int[] p_net_nos_b){  if (net_nos_arr.length != p_net_nos_b.length)   return false;  for (  int cur_net_b : p_net_nos_b) {    if (!has_net_no(cur_net_b))     return false;  }  return true;}  }
class C{  private XACML3HomeResource(){}  }
class C{  private String updateToken(final HttpSession session,final CsrfGuard csrfGuard){  Object tokenFromSession;  try {    tokenFromSession=RandomGenerator.generateRandomId(csrfGuard.getPrng(),csrfGuard.getTokenLength());  } catch (  final Exception e) {    throw new RuntimeException(String.format("unable to generate the random token - %s",e.getLocalizedMessage()),e);  }  session.setAttribute(csrfGuard.getSessionKey(),tokenFromSession);  final String token=(String)session.getAttribute(csrfGuard.getSessionKey());  System.err.println("@Token : " + token);  if (token == null) {    throw new IllegalStateException("OWASP_CSRF is not configured correctly");  }  return token;}  }
class C{  boolean terminate(){  return (state == null) || state.terminate();}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  try {    s.defaultReadObject();    this.queue=new Object[q.size()];    comparator=q.comparator();    addAll(q);  }  finally {    q=null;  }}  }
class C{  public static Packet toPacket(byte[] octets){  int packetLen=octets[3] & 0xFF;  packetLen|=((octets[2] << 8) & 0xFF00);  return toPacket(ByteBuffer.wrap(octets,0,packetLen));}  }
class C{  public void paintTextPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static Vector send(URL url,String cookies,RequestSet set) throws SendRequestException {  return send(url,cookies,set,null);}  }
class C{  @Override public boolean commit() throws LoginException {  if (log.isDebugEnabled()) {    log.debug("commit " + principal);  }  if (principal == null) {    return false;  }  if (!subject.getPrincipals().contains(principal)) {    subject.getPrincipals().add(principal);    if (principal instanceof GenericPrincipal) {      String roles[]=((GenericPrincipal)principal).getRoles();      for (int i=0; i < roles.length; i++) {        subject.getPrincipals().add(new GenericPrincipal(roles[i],null,null));      }    }  }  committed=true;  return true;}  }
class C{  public TypeName(String fullName,String nickname,String pattern,TypeName... innerTypeNames){  this.topLevelAlias=TypeAlias.create(fullName,nickname);  this.pattern=pattern;  this.innerTypeNames=Arrays.asList(innerTypeNames);}  }
class C{  public RxGalleryFinal cropMaxScaleMultiplier(@FloatRange(from=1.0,fromInclusive=false) float maxScaleMultiplier){  configuration.setMaxScaleMultiplier(maxScaleMultiplier);  return this;}  }
class C{  public InvalidGrantException(final String message){  super(400,"invalid_grant",message);}  }
class C{  private static void fromConfigExportJson(RecordProperties recordProperties,JsonValue jsonProperties){  JsonValue jsonConfigExport=jsonProperties.get(RecordConstants.CONFIG_EXPORT_LABEL).required();  recordProperties.configExportEnable=jsonConfigExport.get(RecordConstants.CONFIG_EXPORT_ENABLE_LABEL).required().asBoolean();  if (recordProperties.configExportEnable) {    recordProperties.configExportPassword=jsonConfigExport.get(RecordConstants.CONFIG_EXPORT_PASSWORD_LABEL).required().asString();    recordProperties.configExportSharePassword=jsonConfigExport.get(RecordConstants.CONFIG_EXPORT_SHARE_PASSWORD_LABEL).required().asBoolean();  } else   if (jsonConfigExport.isDefined(RecordConstants.CONFIG_EXPORT_PASSWORD_LABEL)) {    debug.message("{} is disabled but {} is defined.",RecordConstants.CONFIG_EXPORT_ENABLE_LABEL,RecordConstants.CONFIG_EXPORT_PASSWORD_LABEL);    throw new IllegalArgumentException(RecordConstants.CONFIG_EXPORT_ENABLE_LABEL + " is disabled but " + RecordConstants.CONFIG_EXPORT_PASSWORD_LABEL+ " is defined.");  }}  }
class C{  static boolean packageHasActivities(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  return launcherApps.getActivityList(packageName,user).size() > 0;}  }
class C{  private Iterators(){}  }
class C{  protected MultistepExprHolder matchAndEliminatePartialPaths(MultistepExprHolder testee,MultistepExprHolder head,boolean isGlobal,int lengthToTest,ElemTemplateElement varScope){  if (null == testee.m_exprOwner)   return head;  WalkingIterator iter1=(WalkingIterator)testee.m_exprOwner.getExpression();  if (partialIsVariable(testee,lengthToTest))   return head;  MultistepExprHolder matchedPaths=null;  MultistepExprHolder matchedPathsTail=null;  MultistepExprHolder meh=head;  while (null != meh) {    if ((meh != testee) && (null != meh.m_exprOwner)) {      WalkingIterator iter2=(WalkingIterator)meh.m_exprOwner.getExpression();      if (stepsEqual(iter1,iter2,lengthToTest)) {        if (null == matchedPaths) {          try {            matchedPaths=(MultistepExprHolder)testee.clone();            testee.m_exprOwner=null;          } catch (          CloneNotSupportedException cnse) {          }          matchedPathsTail=matchedPaths;          matchedPathsTail.m_next=null;        }        try {          matchedPathsTail.m_next=(MultistepExprHolder)meh.clone();          meh.m_exprOwner=null;        } catch (        CloneNotSupportedException cnse) {        }        matchedPathsTail=matchedPathsTail.m_next;        matchedPathsTail.m_next=null;      }    }    meh=meh.m_next;  }  int matchCount=0;  if (null != matchedPaths) {    ElemTemplateElement root=isGlobal ? varScope : findCommonAncestor(matchedPaths);    WalkingIterator sharedIter=(WalkingIterator)matchedPaths.m_exprOwner.getExpression();    WalkingIterator newIter=createIteratorFromSteps(sharedIter,lengthToTest);    ElemVariable var=createPseudoVarDecl(root,newIter,isGlobal);    if (DIAGNOSE_MULTISTEPLIST)     System.err.println("Created var: " + var.getName() + (isGlobal ? "(Global)" : ""));    while (null != matchedPaths) {      ExpressionOwner owner=matchedPaths.m_exprOwner;      WalkingIterator iter=(WalkingIterator)owner.getExpression();      if (DIAGNOSE_MULTISTEPLIST)       diagnoseLineNumber(iter);      LocPathIterator newIter2=changePartToRef(var.getName(),iter,lengthToTest,isGlobal);      owner.setExpression(newIter2);      matchedPaths=matchedPaths.m_next;    }  }  if (DIAGNOSE_MULTISTEPLIST)   diagnoseMultistepList(matchCount,lengthToTest,isGlobal);  return head;}  }
class C{  public void updateUI(){  setUI((SplitPaneUI)UIManager.getUI(this));  revalidate();}  }
class C{  final ElemContext push(final String uri,final String localName,final String qName){  ElemContext frame=this.m_next;  if (frame == null) {    frame=new ElemContext(this);    this.m_next=frame;  }  frame.m_elementName=qName;  frame.m_elementLocalName=localName;  frame.m_elementURI=uri;  frame.m_isCdataSection=false;  frame.m_startTagOpen=true;  return frame;}  }
class C{  private static final boolean subPartMatchNS(String p,String t){  return (p == t) || ((null != p) && ((p.length() > 0) ? ((t == WILD) || p.equals(t)) : null == t));}  }
class C{  public boolean isVisible(){  return true;}  }
class C{  public Object createXPathEvaluator(Document doc){  try {    Class xpathClass=Class.forName("org.apache.xpath.domapi.XPathEvaluatorImpl");    Constructor constructor=xpathClass.getConstructor(new Class[]{Document.class});    return constructor.newInstance(new Object[]{doc});  } catch (  Exception ex) {  }  return doc;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfArray makeIndirect(PdfDocument document,PdfIndirectReference reference){  return (PdfArray)super.makeIndirect(document,reference);}  }
class C{  public DatatypeConfigurationException(){}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("Connector[");  sb.append(getProtocol());  sb.append('-');  int port=getPort();  if (port > 0) {    sb.append(port);  } else {    sb.append("auto-");    sb.append(getProperty("nameIndex"));  }  sb.append(']');  return sb.toString();}  }
class C{  public static String toUNIXMode(FilePermission p){  StringBuilder buffer=new StringBuilder(3);  toUNIXMode(buffer,p);  return buffer.toString();}  }
class C{  @Override public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new RuntimeException(e);  }}  }
class C{  public static byte[] unsafeArray(ByteBuffer b){  return ((ByteArrayBuffer)b).backingArray;}  }
class C{  @Override public boolean isNotificationEnabled(Notification notification){  if (notification == null)   return false;  if (!(notification instanceof AttributeChangeNotification))   return false;  AttributeChangeNotification acn=(AttributeChangeNotification)notification;  if (!AttributeChangeNotification.ATTRIBUTE_CHANGE.equals(acn.getType()))   return false;synchronized (names) {    if (names.size() < 1)     return true; else     return (names.contains(acn.getAttributeName()));  }}  }
class C{  public static MBeanServerConnection createJMXConnection(String url,String host,String port,String username,String password) throws MalformedURLException, IOException {  String urlForJMX;  if (url != null)   urlForJMX=url; else   urlForJMX=JMX_SERVICE_PREFIX + host + ":"+ port+ JMX_SERVICE_SUFFIX;  Map<String,String[]> environment=null;  if (username != null && password != null) {    String[] credentials=new String[2];    credentials[0]=username;    credentials[1]=password;    environment=new HashMap<>();    environment.put(JMXConnector.CREDENTIALS,credentials);  }  return JMXConnectorFactory.connect(new JMXServiceURL(urlForJMX),environment).getMBeanServerConnection();}  }
class C{  public static int enableService(PrintStream out,PrintStream err){  LocalizableMessage serviceName=Utils.getCustomizedObject("INFO_WINDOWS_SERVICE_NAME",INFO_WINDOWS_SERVICE_NAME.get(DynamicConstants.PRODUCT_NAME),LocalizableMessage.class);  LocalizableMessage serviceDescription=Utils.getCustomizedObject("INFO_WINDOWS_SERVICE_DESCRIPTION",INFO_WINDOWS_SERVICE_DESCRIPTION.get(getServerRoot()),LocalizableMessage.class);  return enableService(out,err,serviceName.toString(),serviceDescription.toString());}  }
class C{  @Override public void close(){  Throwable localSessionError;synchronized (stateLock) {    if (closeInitiated) {      return;    }    localSessionError=sessionError;    closeInitiated=true;  }  try {    interrupt();    join();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }  if (logger.isTraceEnabled()) {    if (localSessionError == null) {      logger.trace("Closing Session from %s to %s in %s",plainSocket.getLocalSocketAddress(),plainSocket.getRemoteSocketAddress(),stackTraceToSingleLineString(new Exception()));    } else {      logger.traceException(localSessionError,"Aborting Session from %s to %s in %s due to the following error",plainSocket.getLocalSocketAddress(),plainSocket.getRemoteSocketAddress(),stackTraceToSingleLineString(new Exception()));    }  }  if (localSessionError == null && protocolVersion >= ProtocolVersion.REPLICATION_PROTOCOL_V4) {    try {      publish(new StopMsg());    } catch (    final IOException ignored) {    }  }  StaticUtils.close(plainSocket,secureSocket);}  }
class C{  @Override public void write(char[] cbuf,int off,int len) throws IOException {  if (writer != null) {    writer.write(cbuf,off,len);  } else {    ensureOpen();    if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {      throw new IndexOutOfBoundsException();    } else     if (len == 0) {      return;    }    if (len >= bufferSize - nextChar)     reAllocBuff(len);    System.arraycopy(cbuf,off,cb,nextChar,len);    nextChar+=len;  }}  }
class C{  public int read(long pos) throws IOException {  if (pos >= length) {    return -1;  }  byte[] buf=getCacheBlock(pos / BUFFER_LENGTH);  if (buf == null) {    return -1;  }  return buf[(int)(pos % BUFFER_LENGTH)] & 0xff;}  }
class C{  private MPEGFrameHeader(byte[] b) throws InvalidAudioFrameException {  mpegBytes=b;  setBitrate();  setVersion();  setLayer();  setProtected();  setSamplingRate();  setPadding();  setPrivate();  setChannelMode();  setModeExtension();  setCopyrighted();  setOriginal();  setEmphasis();}  }
class C{  public boolean verifyXMLSignature(Document doc,String certAlias) throws XMLSignatureException {  return verifyXMLSignature(SOAPBindingConstants.WSF_10_VERSION,certAlias,doc);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforenomodificationallowederr.class,args);}  }
class C{  public String toString(){  return ("SSOTokenPrincipal:  " + name);}  }
class C{  protected void removeDescendantToggledPaths(Enumeration<TreePath> toRemove){  if (toRemove != null) {    while (toRemove.hasMoreElements()) {      Enumeration<?> descendants=getDescendantToggledPaths(toRemove.nextElement());      if (descendants != null) {        while (descendants.hasMoreElements()) {          expandedState.remove(descendants.nextElement());        }      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecommentnodevalue.class,args);}  }
class C{  public SdpException(String message,Throwable rootCause){  super(rootCause.getMessage() + Separators.SEMICOLON + message);}  }
class C{  public boolean isSuperAdmin(String dn){  boolean isAdmin=false;  if (LDAPUtils.isDN(dn)) {    String nDN=DNUtils.normalizeDN(dn);    if ((nDN != null) && (superAdmin != null || specialUser != null)) {      if (debug.messageEnabled()) {        debug.message("passed dn is :" + dn);      }      if (superAdmin != null) {        if (debug.messageEnabled()) {          debug.message("normalized super dn is :" + superAdmin);        }        isAdmin=nDN.equals(superAdmin);      }      if (!isAdmin) {        isAdmin=isSpecialUser(nDN);      }    }  }  if (debug.messageEnabled()) {    debug.message("is Super Admin :" + isAdmin);  }  return isAdmin;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix02.class,args);}  }
class C{  private JsonValue retrieveObject(String resourceID,String id) throws ResourceException {  return performRead(retrieveFullID(resourceID,id));}  }
class C{  public void addEdge(String label,String fromId,String toId,List<DbDataContainer> attributes){  String insert="MATCH (f" + "{id : '" + fromId + "' })";  insert+="MATCH (t" + "{id : '" + toId + "' })";  insert+="CREATE (f)-[:" + label + "{";  insert=this.addValuesToStatement(insert,attributes);  insert+="}]->(t)";  this.transaction.run(insert);}  }
class C{  public static <T>T unmarshal(URL xml,Class<T> type){  try {    JAXBElement<T> item=getContext(type).createUnmarshaller().unmarshal(toSource(xml),type);    return item.getValue();  } catch (  JAXBException e) {    throw new DataBindingException(e);  }catch (  IOException e) {    throw new DataBindingException(e);  }}  }
class C{  public FileSystemNotFoundException(String msg){  super(msg);}  }
class C{  @SuppressWarnings("unused") static <T>ReplayPromise<T> replayPromise(Class<T> cls,final Duration timeout,final long time){  return new ReplayPromiseImpl<>(timeout,time);}  }
class C{  protected void BuildFDArrayUsed(int Font){  int[] FDSelect=fonts[Font].FDSelect;  for (  Integer glyphsInList1 : glyphsInList) {    int glyph=(int)glyphsInList1;    int FD=FDSelect[glyph];    FDArrayUsed.add(FD);  }}  }
class C{  public Token peekNextToken() throws ParseException {  return (Token)peekNextToken(1)[0];}  }
class C{  public void paintMenuBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private KeyPairGeneratorSpi nextSpi(KeyPairGeneratorSpi oldSpi,boolean reinit){synchronized (lock) {    if ((oldSpi != null) && (oldSpi != spi)) {      return spi;    }    if (serviceIterator == null) {      return null;    }    while (serviceIterator.hasNext()) {      Service s=serviceIterator.next();      try {        Object inst=s.newInstance(null);        if (inst instanceof KeyPairGeneratorSpi == false) {          continue;        }        if (inst instanceof KeyPairGenerator) {          continue;        }        KeyPairGeneratorSpi spi=(KeyPairGeneratorSpi)inst;        if (reinit) {          if (initType == I_SIZE) {            spi.initialize(initKeySize,initRandom);          } else           if (initType == I_PARAMS) {            spi.initialize(initParams,initRandom);          } else           if (initType != I_NONE) {            throw new AssertionError("KeyPairGenerator initType: " + initType);          }        }        provider=s.getProvider();        this.spi=spi;        return spi;      } catch (      Exception e) {      }    }    disableFailover();    return null;  }}  }
class C{  private static boolean matchBaseAndScopeAndFilter(SearchOperation searchOp,Entry entry) throws DirectoryException {  return entry.matchesBaseAndScope(searchOp.getBaseDN(),searchOp.getScope()) && searchOp.getFilter().matchesEntry(entry);}  }
class C{  private static Transform tokenizeTransformation(String transformation) throws NoSuchAlgorithmException {  if (transformation == null) {    throw new NoSuchAlgorithmException("No transformation given.");  }  String[] parts=new String[3];  int count=0;  StringTokenizer parser=new StringTokenizer(transformation,"/");  while (parser.hasMoreTokens() && count < 3) {    parts[count++]=parser.nextToken().trim();  }  if (count != 3 || parser.hasMoreTokens()) {    throw new NoSuchAlgorithmException("Invalid transformation format: " + transformation);  }  return new Transform(parts[0],parts[1],parts[2]);}  }
class C{  private void updatePolyLine(LatLng latLng){  List<LatLng> points=polyLine.getPoints();  points.add(latLng);  polyLine.setPoints(points);}  }
class C{  public void test_parkUntil_1() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(2);  Parker parker=new Parker(barrier,true,500);  Thread parkerThread=new Thread(parker);  Thread waiterThread=new Thread(new WaitAndUnpark(barrier,1000,parkerThread));  parkerThread.start();  waiterThread.start();  parker.assertDurationIsInRange(500);  waiterThread.join();  parkerThread.join();}  }
class C{  public PrefixFileFilter(String[] prefixes){  this(prefixes,IOCase.SENSITIVE);}  }
class C{  public static JScrollPane createScrollPane(Component comp){  JScrollPane scroll=new JScrollPane(comp);  scroll.getViewport().setOpaque(false);  scroll.setOpaque(false);  scroll.getViewport().setBackground(ColorAndFontConstants.background);  scroll.setBackground(ColorAndFontConstants.background);  UIFactory.setScrollIncrementUnit(scroll);  return scroll;}  }
class C{  public final void testGenerateSeedint02(){  for (int i=0; i < LENGTH; i++) {    byte[] myBytes=sr.generateSeed(i);    assertFalse("unexpected: myBytes.length != i  :: i==" + i + " myBytes.length="+ myBytes.length,myBytes.length != i);  }}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  public void logEvent(String eventName){  logEvent(eventName,null);}  }
class C{  public void flush() throws IOException {  out.flush();}  }
class C{  public void removeCOSTemplate(String name) throws UMSException {  Guid tGuid=new Guid(COSTemplate.DEFAULT_NAMING_ATTR + "=" + name+ ","+ this.getGuid());  this.removeChild(tGuid);}  }
class C{  public static long readSwappedUnsignedInteger(InputStream input) throws IOException {  int value1=read(input);  int value2=read(input);  int value3=read(input);  int value4=read(input);  long low=(((value1 & 0xff) << 0) + ((value2 & 0xff) << 8) + ((value3 & 0xff) << 16));  long high=value4 & 0xff;  return (high << 24) + (0xffffffffL & low);}  }
class C{  public void test_getDefaultAlgorithm(){  String def=TrustManagerFactory.getDefaultAlgorithm();  if (getDefaultAlgorithm() == null) {    assertNull("DefaultAlgorithm must be null",def);  } else {    assertEquals("Invalid default algorithm",def,getDefaultAlgorithm());  }  String defA="Proba.trustmanagerfactory.defaul.type";  Security.setProperty("ssl.TrustManagerFactory.algorithm",defA);  assertEquals("Incorrect getDefaultAlgorithm()",TrustManagerFactory.getDefaultAlgorithm(),defA);  if (def == null) {    def="";  }  Security.setProperty("ssl.TrustManagerFactory.algorithm",def);  assertEquals("Incorrect getDefaultAlgorithm()",TrustManagerFactory.getDefaultAlgorithm(),def);}  }
class C{  private void writeAdminConnectorContents(ServerDescriptor desc,int maxLabelWidth){  ConnectionHandlerDescriptor adminConnector=desc.getAdminConnector();  LocalizableMessage text=adminConnector != null ? INFO_CTRL_PANEL_ADMIN_CONNECTOR_DESCRIPTION.get(adminConnector.getPort()) : INFO_NOT_AVAILABLE_SHORT_LABEL.get();  writeLabelValue(INFO_CTRL_PANEL_ADMIN_CONNECTOR_LABEL.get(),text.toString(),maxLabelWidth);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturenoversion.class,args);}  }
class C{  public BAD_TYPECODE(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public void checkShowTextIsoConformance(Object gState,PdfResources resources){}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  byte code=in[in.length - 1];  int index=in.length - 1;  while (index > 0 && in[index - 1] == code) {    index--;  }  return in.length - index;}  }
class C{  public BadKind(){  super();}  }
class C{  private static synchronized String formatDateAsYear(Date d){  return formatYearIn.format(d);}  }
class C{  public Result useItemInHand(){  return useItemInHand;}  }
class C{  public FactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  protected static Set removeFromProfileNameTable(SSOToken ssoToken){  Hashtable pTable=profileNameTable;  if ((pTable == null) || (pTable.isEmpty())) {    return null;  }  if (debug.messageEnabled()) {    debug.message("In ProfileService." + "removeFromProfilefNameTable(SSOTokenID)..");  }  Set dnList=null;synchronized (pTable) {    String principal;    try {      principal=ssoToken.getPrincipal().getName();    } catch (    SSOException ssoe) {      debug.error("AMObjectImpl.removeFromProfileNameTable(): " + "Could not update PFN table");      return null;    }    dnList=(Set)pTable.remove(principal);  }  return dnList;}  }
class C{  public FrameBodyTDLY(){}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  validateData();  StringBuffer xml=new StringBuffer(300);  xml.append(SAML2Constants.START_TAG);  if (includeNSPrefix) {    xml.append(SAML2Constants.ECP_PREFIX);  }  xml.append(SAML2Constants.RELAY_STATE);  if (declareNS) {    xml.append(SAML2Constants.SPACE).append(SAML2Constants.ECP_DECLARE_STR).append(SAML2Constants.SPACE).append(SAML2Constants.SOAP_ENV_DECLARE_STR);  }  xml.append(SAML2Constants.SPACE).append(SAML2Constants.SOAP_ENV_PREFIX).append(SAML2Constants.MUST_UNDERSTAND).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(mustUnderstand.toString()).append(SAML2Constants.QUOTE).append(SAML2Constants.SPACE).append(SAML2Constants.SOAP_ENV_PREFIX).append(SAML2Constants.ACTOR).append(SAML2Constants.EQUAL).append(SAML2Constants.QUOTE).append(actor).append(SAML2Constants.QUOTE).append(SAML2Constants.END_TAG).append(value).append(SAML2Constants.ECP_END_TAG).append(SAML2Constants.RELAY_STATE).append(SAML2Constants.END_TAG);  return xml.toString();}  }
class C{  Worker(Runnable firstTask){  setState(-1);  this.firstTask=firstTask;  this.thread=getThreadFactory().newThread(this);}  }
class C{  public ComparisonFailure(String message,String expected,String actual){  super(message);  fExpected=expected;  fActual=actual;}  }
class C{  public UnsupportedResponseTypeException(final String message,final OAuth2Constants.UrlLocation parameterLocation){  super(400,"unsupported_response_type",message,parameterLocation);}  }
class C{  private void validateName(String name) throws InvalidNameException {  if ((name == null) || (name.length() == 0)) {    DEBUG.message("Invalid policy name:" + name);    throw (new InvalidNameException(ResBundleUtils.rbName,"null_name",null,"",PolicyException.POLICY));  }}  }
class C{  private boolean isNumSubOrdinatesUsable() throws LdapException {  SearchResultEntry entry=getDisplayedEntry();  boolean hasSubOrdinates=BrowserController.getHasSubOrdinates(entry);  if (!hasSubOrdinates) {    LDAPURL url=getDisplayedUrl();    return !controller.getNumSubordinateHacker().contains(url);  }  return true;}  }
class C{  boolean addIndexEntry(ServiceType resourceType,String resourceName,String policyName){  boolean processed=false;  ResourceMatch resourceMatch=resourceType.compare(this.resourceName,resourceName,false);  if (resourceMatch.equals(ResourceMatch.EXACT_MATCH)) {    policyNames.add(policyName);    processed=true;  } else   if (resourceMatch.equals(ResourceMatch.SUB_RESOURCE_MATCH)) {    Iterator iter=childEntries.iterator();    while (!processed && (iter.hasNext())) {      ResourceIndexEntry resourceIndexEntry=(ResourceIndexEntry)iter.next();      if (resourceIndexEntry.addIndexEntry(resourceType,resourceName,policyName)) {        processed=true;      }    }    if (!processed) {      ResourceIndexEntry resourceIndexEntry=new ResourceIndexEntry(resourceName,policyName);      Set children=new HashSet();      children.addAll(childEntries);      Iterator iter1=children.iterator();      while (iter1.hasNext()) {        ResourceIndexEntry rie=(ResourceIndexEntry)iter1.next();        ResourceMatch rm=resourceType.compare(resourceName,rie.resourceName,false);        if (rm.equals(ResourceMatch.SUB_RESOURCE_MATCH)) {          rie.setParent(resourceIndexEntry);        }      }      childEntries.add(resourceIndexEntry);      processed=true;    }  }  return processed;}  }
class C{  public final Node popAndTop(){  m_firstFree--;  m_map[m_firstFree]=null;  return (m_firstFree == 0) ? null : m_map[m_firstFree - 1];}  }
class C{  public void mousePressed(MouseEvent e){}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {}  }
class C{  public void handleButtonLoginRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  protected void paintTabBorder(Graphics g,int tabPlacement,int tabIndex,int x,int y,int w,int h,boolean isSelected){  g.setColor(lightHighlight);switch (tabPlacement) {case LEFT:    g.drawLine(x + 1,y + h - 2,x + 1,y + h - 2);  g.drawLine(x,y + 2,x,y + h - 3);g.drawLine(x + 1,y + 1,x + 1,y + 1);g.drawLine(x + 2,y,x + w - 1,y);g.setColor(shadow);g.drawLine(x + 2,y + h - 2,x + w - 1,y + h - 2);g.setColor(darkShadow);g.drawLine(x + 2,y + h - 1,x + w - 1,y + h - 1);break;case RIGHT:g.drawLine(x,y,x + w - 3,y);g.setColor(shadow);g.drawLine(x,y + h - 2,x + w - 3,y + h - 2);g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 3);g.setColor(darkShadow);g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1);g.drawLine(x + w - 2,y + h - 2,x + w - 2,y + h - 2);g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 3);g.drawLine(x,y + h - 1,x + w - 3,y + h - 1);break;case BOTTOM:g.drawLine(x,y,x,y + h - 3);g.drawLine(x + 1,y + h - 2,x + 1,y + h - 2);g.setColor(shadow);g.drawLine(x + 2,y + h - 2,x + w - 3,y + h - 2);g.drawLine(x + w - 2,y,x + w - 2,y + h - 3);g.setColor(darkShadow);g.drawLine(x + 2,y + h - 1,x + w - 3,y + h - 1);g.drawLine(x + w - 2,y + h - 2,x + w - 2,y + h - 2);g.drawLine(x + w - 1,y,x + w - 1,y + h - 3);break;case TOP:default :g.drawLine(x,y + 2,x,y + h - 1);g.drawLine(x + 1,y + 1,x + 1,y + 1);g.drawLine(x + 2,y,x + w - 3,y);g.setColor(shadow);g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 1);g.setColor(darkShadow);g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 1);g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1);}}  }
class C{  public FileAlterationObserver(String directoryName,FileFilter fileFilter,IOCase caseSensitivity){  this(new File(directoryName),fileFilter,caseSensitivity);}  }
class C{  public String execute(Locale locale,Map params) throws WorkflowException {  String realm=getString(params,ParameterKeys.P_REALM);  if (realm == null) {    String extendedMetaData=getString(params,ParameterKeys.P_EXTENDED_DATA);    if (extendedMetaData != null) {      realm=getRealmFromExtData(getContent(extendedMetaData,locale));    }  }  if (realm == null) {    throw new WorkflowException("invalid-metaalias-slash",null);  }  try {    CircleOfTrustManager mgr=new CircleOfTrustManager();    Set cots=mgr.getAllCirclesOfTrust(realm);    StringBuffer buff=new StringBuffer();    if ((cots != null) && !cots.isEmpty()) {      boolean first=true;      for (Iterator i=cots.iterator(); i.hasNext(); ) {        String c=(String)i.next();        if (first) {          first=false;        } else {          buff.append("|");        }        try {          buff.append(StringUtils.encodeURIComponent(c,"UTF-8"));        } catch (        UnsupportedEncodingException e) {          buff.append(c);        }      }    }    return buff.toString();  } catch (  COTException e) {    throw new WorkflowException("invalid-extended-data-cot",null);  }}  }
class C{  public CallerStationIdAttribute(String calledStationId){  super(OctetUtils.toOctets(AttributeType.CALLER_STATION_ID,calledStationId));  this.str=calledStationId;}  }
class C{  @Override public void onItemsChanged(RecyclerView recyclerView){  isNotifyDataSetChanged=true;}  }
class C{  private void expandRoot(){  TreeModel model=getModel();  if (model != null && model.getRoot() != null) {    expandPath(new TreePath(model.getRoot()));  }}  }
class C{  private KeyManagerProvider loadProvider(String className,KeyManagerProviderCfg configuration,boolean initialize) throws InitializationException {  try {    KeyManagerProviderCfgDefn definition=KeyManagerProviderCfgDefn.getInstance();    ClassPropertyDefinition propertyDefinition=definition.getJavaClassPropertyDefinition();    Class<? extends KeyManagerProvider> providerClass=propertyDefinition.loadClass(className,KeyManagerProvider.class);    KeyManagerProvider provider=providerClass.newInstance();    if (initialize) {      provider.initializeKeyManagerProvider(configuration);    } else {      List<LocalizableMessage> unacceptableReasons=new ArrayList<>();      if (!provider.isConfigurationAcceptable(configuration,unacceptableReasons)) {        String reasons=Utils.joinAsString(".  ",unacceptableReasons);        throw new InitializationException(ERR_CONFIG_KEYMANAGER_CONFIG_NOT_ACCEPTABLE.get(configuration.dn(),reasons));      }    }    return provider;  } catch (  InitializationException ie) {    throw ie;  }catch (  Exception e) {    LocalizableMessage message=ERR_CONFIG_KEYMANAGER_INITIALIZATION_FAILED.get(className,configuration.dn(),stackTraceToSingleLineString(e));    throw new InitializationException(message,e);  }}  }
class C{  private void checkLengthBeforeWrite(int length){  if (pos + length + 4 > headerBuffer.length) {    throw new HeadersTooLargeException(sm.getString("iob.responseheadertoolarge.error"));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodenomodificationallowederrEE.class,args);}  }
class C{  private void examineCompletedOperation(ModifyDNOperation modifyDNOperation){  assertTrue(modifyDNOperation.getProcessingStartTime() > 0);  assertTrue(modifyDNOperation.getProcessingStopTime() > 0);  assertTrue(modifyDNOperation.getProcessingTime() >= 0);  ensurePostReponseHasRun();}  }
class C{  public static final void fullUpdateSingleWidgets(Context context,int widgetId){  if ((widgetId == Globals.STATUS_BAR_WIDGET_ID) || (widgetId == Globals.STATUS_BAR_WIDGET_ID_2)) {    sPollBattery|=updateStatusbarWidget(context);  } else {    sPollBattery|=updateWidget(AppWidgetManager.getInstance(context),context,widgetId,true);  }  setBatteryAlarm(context);}  }
class C{  protected <T>Handler<AsyncResult<T>> rawResultHandler(RoutingContext context){  return null;}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public static PasswordModifyExtendedRequest unmodifiablePasswordModifyExtendedRequest(final PasswordModifyExtendedRequest request){  if (request instanceof UnmodifiablePasswordModifyExtendedRequestImpl) {    return request;  }  return new UnmodifiablePasswordModifyExtendedRequestImpl(request);}  }
class C{  static BitArray interleaveWithECBytes(BitArray bits,int numTotalBytes,int numDataBytes,int numRSBlocks) throws WriterException {  if (bits.getSizeInBytes() != numDataBytes) {    throw new WriterException("Number of bits and data bytes does not match");  }  int dataBytesOffset=0;  int maxNumDataBytes=0;  int maxNumEcBytes=0;  Collection<BlockPair> blocks=new ArrayList<>(numRSBlocks);  for (int i=0; i < numRSBlocks; ++i) {    int[] numDataBytesInBlock=new int[1];    int[] numEcBytesInBlock=new int[1];    getNumDataBytesAndNumECBytesForBlockID(numTotalBytes,numDataBytes,numRSBlocks,i,numDataBytesInBlock,numEcBytesInBlock);    int size=numDataBytesInBlock[0];    byte[] dataBytes=new byte[size];    bits.toBytes(8 * dataBytesOffset,dataBytes,0,size);    byte[] ecBytes=generateECBytes(dataBytes,numEcBytesInBlock[0]);    blocks.add(new BlockPair(dataBytes,ecBytes));    maxNumDataBytes=Math.max(maxNumDataBytes,size);    maxNumEcBytes=Math.max(maxNumEcBytes,ecBytes.length);    dataBytesOffset+=numDataBytesInBlock[0];  }  if (numDataBytes != dataBytesOffset) {    throw new WriterException("Data bytes does not match offset");  }  BitArray result=new BitArray();  for (int i=0; i < maxNumDataBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] dataBytes=block.getDataBytes();      if (i < dataBytes.length) {        result.appendBits(dataBytes[i],8);      }    }  }  for (int i=0; i < maxNumEcBytes; ++i) {    for (    BlockPair block : blocks) {      byte[] ecBytes=block.getErrorCorrectionBytes();      if (i < ecBytes.length) {        result.appendBits(ecBytes[i],8);      }    }  }  if (numTotalBytes != result.getSizeInBytes()) {    throw new WriterException("Interleaving error: " + numTotalBytes + " and "+ result.getSizeInBytes()+ " differ.");  }  return result;}  }
class C{  private boolean verifySignature(String[] record,int signPos,int recPos) throws Exception {  String curSign=record[signPos];  byte[] prevMAC=helper.toByteArray(curMAC);  byte[] newMAC;  if ((prevSignature == null) || prevSignature.equals("")) {    newMAC=new byte[prevMAC.length];    System.arraycopy(prevMAC,0,newMAC,0,prevMAC.length);  } else {    newMAC=new byte[prevMAC.length + helper.toByteArray(prevSignature).length];    System.arraycopy(prevMAC,0,newMAC,0,prevMAC.length);    System.arraycopy(helper.toByteArray(prevSignature),0,newMAC,prevMAC.length,helper.toByteArray(prevSignature).length);  }  if (recPos != 0) {    prevSignature=curSign;  }  verified=helper.verifySignature(helper.toByteArray(curSign),newMAC);  return verified;}  }
class C{  @Override protected void installDefaults(){  updateStyle(splitPane);  setOrientation(splitPane.getOrientation());  setContinuousLayout(splitPane.isContinuousLayout());  resetLayoutManager();  if (nonContinuousLayoutDivider == null) {    setNonContinuousLayoutDivider(createDefaultNonContinuousLayoutDivider(),true);  } else {    setNonContinuousLayoutDivider(nonContinuousLayoutDivider,true);  }  if (managingFocusForwardTraversalKeys == null) {    managingFocusForwardTraversalKeys=new HashSet<KeyStroke>();    managingFocusForwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,managingFocusForwardTraversalKeys);  if (managingFocusBackwardTraversalKeys == null) {    managingFocusBackwardTraversalKeys=new HashSet<KeyStroke>();    managingFocusBackwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,InputEvent.SHIFT_MASK));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,managingFocusBackwardTraversalKeys);}  }
class C{  protected int hstrcmp(char[] s,int si,char[] t,int ti){  for (; s[si] == t[ti]; si++, ti++) {    if (s[si] == 0) {      return 0;    }  }  if (t[ti] == 0) {    return 0;  }  return s[si] - t[ti];}  }
class C{  public boolean import_design(InputStream p_input_stream){  if (!board_panel.itera_board.import_design(p_input_stream,item_id_no_generator,stat)) {    stat.userPrintln(resources.getString("error_6"));    return false;  }  initialize_windows();  try {    p_input_stream.close();  } catch (  java.io.IOException e) {    return false;  }  Point viewport_position=new java.awt.Point(0,0);  Dimension panel_size=board_panel.itera_board.gdi_context.get_panel_size();  board_panel.setSize(panel_size);  board_panel.setPreferredSize(panel_size);  set_viewport_position(viewport_position);  board_panel.create_popup_menus();  board_panel.init_colors();  board_panel.itera_board.create_ratsnest();  hilight_selected_button();  work_frame.setVisible(true);  File defaults_file=new File(design_file.get_parent(),GUI_DEFAULTS_FILE_NAME);  try {    stat.userPrintln("try open " + defaults_file);    InputStream input_stream=new FileInputStream(defaults_file);    GuiConfigFile.read(this,board_panel.itera_board,input_stream);    input_stream.close();  } catch (  Exception exc) {    stat.userPrintln("open defaults exception",exc);    screen_messages.set_status_message(resources.getString("error_1"));    return false;  }  board_panel.zoom_all();  return true;}  }
class C{  public void applyFromAppWidgetProviderInfo(LauncherAppWidgetProviderInfo info,WidgetPreviewLoader loader){  InvariantDeviceProfile profile=LauncherAppState.getInstance().getInvariantDeviceProfile();  mInfo=info;  mWidgetName.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));  int hSpan=Math.min(info.spanX,profile.numColumns);  int vSpan=Math.min(info.spanY,profile.numRows);  mWidgetDims.setText(String.format(mDimensionsFormatString,hSpan,vSpan));  mWidgetPreviewLoader=loader;}  }
class C{  public static int extractPortNumber(final long socketIdentifier){  return (int)((socketIdentifier >> 32) & 0xFFFFL);}  }
class C{  public boolean hasMoreRequirements(){  authDebug.message("AuthContext::requiresMoreInformation()");  if (getRequirements() == null)   return (false); else   return (true);}  }
class C{  boolean contains(PlaDelTriCorner p_corner){  if (is_on_the_left_of_edge_line == null) {    System.out.println("Triangle.contains: array is_on_the_left_of_edge_line not initialized");    return false;  }  for (int index=0; index < 3; ++index) {    PlaDelTriEdge curr_edge=edge_lines[index];    PlaSide curr_side=p_corner.side_of(curr_edge.start_corner,curr_edge.end_corner);    if (is_on_the_left_of_edge_line[index]) {      if (curr_side == PlaSide.ON_THE_RIGHT) {        return false;      }    } else {      if (curr_side == PlaSide.ON_THE_LEFT) {        return false;      }    }  }  return true;}  }
class C{  protected final float calculateModuleSize(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft){  return (calculateModuleSizeOneWay(topLeft,topRight) + calculateModuleSizeOneWay(topLeft,bottomLeft)) / 2.0f;}  }
class C{  @AfterClass public void afterClass() throws Exception {  TestCaseUtils.deleteEntry(DN.valueOf("cn=samba password,cn=Plugins,cn=config"));}  }
class C{  public Observable<Response<T,String>> usingCamera(){  return applicationComponent.camera().takePhoto();}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  super.beginDisplay(event);  setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","invalid.url.message");}  }
class C{  public static void addAttributeToSubConfiguration(String serviceName,String subConfigName,Map attrValues) throws UpgradeException {  String classMethod="UpgradeUtils:addAttributeToSubConfiguration : ";  try {    ServiceConfigManager scm=getServiceConfigManager(serviceName);    ServiceConfig sc=scm.getGlobalConfig(null);    StringTokenizer st=new StringTokenizer(subConfigName,"/");    int tokenCount=st.countTokens();    for (int i=1; i <= tokenCount; i++) {      String scn=st.nextToken();      sc=sc.getSubConfig(scn);    }    for (Iterator i=attrValues.keySet().iterator(); i.hasNext(); ) {      String attrName=(String)i.next();      sc.addAttribute(attrName,(Set)attrValues.get(attrName));    }  } catch (  SMSException sme) {    throw new UpgradeException("Unable to add attribute to subconfig");  }catch (  SSOException ssoe) {    throw new UpgradeException("invalid SSOToken");  }catch (  Exception e) {    debug.error(classMethod + "Error adding attribute to subconfig:",e);  }  if (debug.messageEnabled()) {    debug.message(classMethod + "Added attributes " + attrValues+ " to subconfig "+ subConfigName+ " in service "+ serviceName);  }}  }
class C{  public static void importNewServiceSchema(String[] fileList) throws UpgradeException {  int len=fileList.length;  String[] args=new String[7 + len];  args[0]="--runasdn";  args[1]=bindDN;  args[2]="-w";  args[3]=bindPasswd;  args[4]="-c";  args[5]="-v";  args[6]="-s";  System.arraycopy(fileList,0,args,7,len);  invokeAdminCLI(args);}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  public final void testGetFieldSize(){  assertEquals(5,new ECFieldFp(BigInteger.valueOf(23L)).getFieldSize());}  }
class C{  public void testZipDeflateInflateStress() throws Exception {  final int DATA_SIZE=16384;  Random random=new Random(42);  for (int j=1; j <= 2; j++) {    byte[] input=new byte[DATA_SIZE];    if (j == 1) {      random.nextBytes(input);    } else {      int pos=0;      while (pos < input.length) {        byte what=(byte)random.nextInt(256);        int howMany=random.nextInt(32);        if (pos + howMany >= input.length) {          howMany=input.length - pos;        }        Arrays.fill(input,pos,pos + howMany,what);        pos+=howMany;      }    }    for (int i=1; i <= 9; i++) {      System.out.println("ZipDeflateInflateStress test (" + j + ","+ i+ ")...");      byte[] zipped=new byte[2 * DATA_SIZE];      Deflater deflater=new Deflater(i);      deflater.setInput(input);      deflater.finish();      deflater.deflate(zipped);      deflater.end();      byte[] output=new byte[DATA_SIZE];      Inflater inflater=new Inflater();      inflater.setInput(zipped);      inflater.finished();      inflater.inflate(output);      inflater.end();      assertEquals(input,output);    }  }}  }
class C{  public void addRelation(ObjectName relationObjectName) throws IllegalArgumentException, RelationServiceNotRegisteredException, NoSuchMethodException, InvalidRelationIdException, InstanceNotFoundException, InvalidRelationServiceException, RelationTypeNotFoundException, RoleNotFoundException, InvalidRoleValueException {  if (relationObjectName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"addRelation",relationObjectName);  isActive();  if ((!(myMBeanServer.isInstanceOf(relationObjectName,"javax.management.relation.Relation")))) {    String excMsg="This MBean does not implement the Relation interface.";    throw new NoSuchMethodException(excMsg);  }  String relId;  try {    relId=(String)(myMBeanServer.getAttribute(relationObjectName,"RelationId"));  } catch (  MBeanException exc1) {    throw new RuntimeException((exc1.getTargetException()).getMessage());  }catch (  ReflectionException exc2) {    throw new RuntimeException(exc2.getMessage());  }catch (  AttributeNotFoundException exc3) {    throw new RuntimeException(exc3.getMessage());  }  if (relId == null) {    String excMsg="This MBean does not provide a relation id.";    throw new InvalidRelationIdException(excMsg);  }  ObjectName relServObjName;  try {    relServObjName=(ObjectName)(myMBeanServer.getAttribute(relationObjectName,"RelationServiceName"));  } catch (  MBeanException exc1) {    throw new RuntimeException((exc1.getTargetException()).getMessage());  }catch (  ReflectionException exc2) {    throw new RuntimeException(exc2.getMessage());  }catch (  AttributeNotFoundException exc3) {    throw new RuntimeException(exc3.getMessage());  }  boolean badRelServFlag=false;  if (relServObjName == null) {    badRelServFlag=true;  } else   if (!(relServObjName.equals(myObjName))) {    badRelServFlag=true;  }  if (badRelServFlag) {    String excMsg="The Relation Service referenced in the MBean is not the current one.";    throw new InvalidRelationServiceException(excMsg);  }  String relTypeName;  try {    relTypeName=(String)(myMBeanServer.getAttribute(relationObjectName,"RelationTypeName"));  } catch (  MBeanException exc1) {    throw new RuntimeException((exc1.getTargetException()).getMessage());  }catch (  ReflectionException exc2) {    throw new RuntimeException(exc2.getMessage());  }catch (  AttributeNotFoundException exc3) {    throw new RuntimeException(exc3.getMessage());  }  if (relTypeName == null) {    String excMsg="No relation type provided.";    throw new RelationTypeNotFoundException(excMsg);  }  RoleList roleList;  try {    roleList=(RoleList)(myMBeanServer.invoke(relationObjectName,"retrieveAllRoles",null,null));  } catch (  MBeanException exc1) {    throw new RuntimeException((exc1.getTargetException()).getMessage());  }catch (  ReflectionException exc2) {    throw new RuntimeException(exc2.getMessage());  }  addRelationInt(false,null,relationObjectName,relId,relTypeName,roleList);synchronized (myRelMBeanObjName2RelIdMap) {    myRelMBeanObjName2RelIdMap.put(relationObjectName,relId);  }  try {    myMBeanServer.setAttribute(relationObjectName,new Attribute("RelationServiceManagementFlag",Boolean.TRUE));  } catch (  Exception exc) {  }  List<ObjectName> newRefList=new ArrayList<ObjectName>();  newRefList.add(relationObjectName);  updateUnregistrationListener(newRefList,null);  RELATION_LOGGER.exiting(RelationService.class.getName(),"addRelation");  return;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DSTInteger createDSTInteger() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DSTIntegerImpl();}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public final void suspend(){  if (suspendHelper()) {    Thread.currentThread().suspend();  }}  }
class C{  public void clear(){  Arrays.fill(vals,null);  size=0;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.AgreementMethodType.OriginatorKeyInfo createAgreementMethodTypeOriginatorKeyInfo() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.AgreementMethodTypeImpl.OriginatorKeyInfoImpl();}  }
class C{  private void checkForTipChange(MouseEvent event){  JComponent component=(JComponent)event.getSource();  String newText=component.getToolTipText(event);  Point newPreferredLocation=component.getToolTipLocation(event);  if (newText != null || newPreferredLocation != null) {    mouseEvent=event;    if (((newText != null && newText.equals(toolTipText)) || newText == null) && ((newPreferredLocation != null && newPreferredLocation.equals(preferredLocation)) || newPreferredLocation == null)) {      if (tipWindow != null) {        insideTimer.restart();      } else {        enterTimer.restart();      }    } else {      toolTipText=newText;      preferredLocation=newPreferredLocation;      if (showImmediately) {        hideTipWindow();        showTipWindow();        exitTimer.stop();      } else {        enterTimer.restart();      }    }  } else {    toolTipText=null;    preferredLocation=null;    mouseEvent=null;    insideComponent=null;    hideTipWindow();    enterTimer.stop();    exitTimer.restart();  }}  }
class C{  public static String readFile(String string){  InputStream inputStream=getInputStream(string);  if (inputStream != null) {    return new String(readStream(inputStream));  }  return null;}  }
class C{  public static Cluster ensureDockerCassandraRunningAndEstablished(String cassandraKeyspace,String seed) throws ConfigurationException, IOException, InterruptedException, TTransportException {  Cluster cluster=Cluster.builder().addContactPoints(seed).withPort(9042).build();  final Metadata metadata=cluster.getMetadata();  Session session=cluster.connect();  Utils.initDatabase(DB_CQL,session);  session=cluster.connect(cassandraKeyspace);  logger.info("Connected to cluster: " + metadata.getClusterName() + '\n');  return cluster;}  }
class C{  public final void pushNamespaceContextNull(){  m_prefixResolvers.push(null);}  }
class C{  public EncryptedAttribute createEncryptedAttribute(org.w3c.dom.Element elem) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ENCRYPTED_ATTRIBUTE,elem);  if (obj == null) {    return new EncryptedAttributeImpl(elem);  } else {    return (EncryptedAttribute)obj;  }}  }
class C{  public static int resetPostResponseCount(){  return postResponseCounter.getAndSet(0);}  }
class C{  @Inject public ListApplications(ApplicationServiceFactory applicationServiceFactory){  super(applicationServiceFactory);}  }
class C{  public void layoutContainer(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int nrows=rows;    int ncols=cols;    boolean ltr=parent.getComponentOrientation().isLeftToRight();    if (ncomponents == 0) {      return;    }    if (nrows > 0) {      ncols=(ncomponents + nrows - 1) / nrows;    } else {      nrows=(ncomponents + ncols - 1) / ncols;    }    int totalGapsWidth=(ncols - 1) * hgap;    int widthWOInsets=parent.width - (insets.left + insets.right);    int widthOnComponent=(widthWOInsets - totalGapsWidth) / ncols;    int extraWidthAvailable=(widthWOInsets - (widthOnComponent * ncols + totalGapsWidth)) / 2;    int totalGapsHeight=(nrows - 1) * vgap;    int heightWOInsets=parent.height - (insets.top + insets.bottom);    int heightOnComponent=(heightWOInsets - totalGapsHeight) / nrows;    int extraHeightAvailable=(heightWOInsets - (heightOnComponent * nrows + totalGapsHeight)) / 2;    if (ltr) {      for (int c=0, x=insets.left + extraWidthAvailable; c < ncols; c++, x+=widthOnComponent + hgap) {        for (int r=0, y=insets.top + extraHeightAvailable; r < nrows; r++, y+=heightOnComponent + vgap) {          int i=r * ncols + c;          if (i < ncomponents) {            parent.getComponent(i).setBounds(x,y,widthOnComponent,heightOnComponent);          }        }      }    } else {      for (int c=0, x=(parent.width - insets.right - widthOnComponent) - extraWidthAvailable; c < ncols; c++, x-=widthOnComponent + hgap) {        for (int r=0, y=insets.top + extraHeightAvailable; r < nrows; r++, y+=heightOnComponent + vgap) {          int i=r * ncols + c;          if (i < ncomponents) {            parent.getComponent(i).setBounds(x,y,widthOnComponent,heightOnComponent);          }        }      }    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeAttributeNS02.class,args);}  }
class C{  public static int countByField2(boolean field2){  return getPersistence().countByField2(field2);}  }
class C{  @Override public Object filter(final Object target){  if (target == null) {    return null;  }  if (target instanceof Closure) {    return target;  }  Class<?> clazz=target instanceof Class ? (Class<?>)target : target.getClass();  if (clazz.isArray()) {    clazz=clazz.getComponentType();  }  final String className=clazz.getName();  if (classShutter.visibleToScripts(className)) {    return target;  } else {    throw new SecurityException(String.format(ERROR_MESSAGE,className));  }}  }
class C{  public void endElement(){  nss.popContext();}  }
class C{  public SAML2ConfigBuilder customAuthenticationStatementsProviderClassName(String customAuthenticationStatementsProviderClassName){  this.customAuthenticationStatementsProviderClassName=customAuthenticationStatementsProviderClassName;  return this;}  }
class C{  private static boolean isChildOf(File f,String dirName){  try {    File dir=new File(dirName);    String canonicalDirName=dir.getCanonicalPath();    if (!canonicalDirName.endsWith(File.separator)) {      canonicalDirName+=File.separator;    }    String canonicalFileName=f.getCanonicalPath();    return canonicalFileName.startsWith(canonicalDirName);  } catch (  IOException e) {    return false;  }}  }
class C{  private boolean removeElement(int s){  int at=indexOf(s,0);  if (at < 0)   return false;  removeElementAt(at);  return true;}  }
class C{  public ShapeTileBox gdi_update_get(){  return update_box;}  }
class C{  private Response extractProcessRequest(HttpServletRequest servletReq,org.w3c.dom.Element body,Set partnerSourceID){  Response retResponse=null;  String respID=SAMLUtils.generateID();  String inResponseTo=null;  List contents=new ArrayList();  String message=null;  Status status;  String remoteAddr=ClientUtils.getClientIPAddress(servletReq);  String recipient=remoteAddr;  String invalidRespPrefix=SAMLUtils.bundle.getString("invalidRequestLogMessage") + " " + remoteAddr+ ": ";  String respPrefix=SAMLUtils.bundle.getString("responseLogMessage") + " " + remoteAddr+ ": ";  NodeList nl=body.getElementsByTagNameNS(sc.PROTOCOL_NAMESPACE_URI,"Request");  int length=nl.getLength();  if (length == 0) {    SAMLUtils.debug.error("SOAPReceiver: Body does not have a Request");    message=SAMLUtils.bundle.getString("missingRequest");    try {      status=new Status(new StatusCode("samlp:Requester"),message,null);      retResponse=new Response(respID,inResponseTo,status,recipient,contents);    } catch (    SAMLException se) {      SAMLUtils.debug.error("SOAPReceiver:Fatal error, cannot " + "create status or response:" + se.getMessage());    }    String[] data={invalidRespPrefix,retResponse.toString()};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.INVALID_REQUEST,data);    return retResponse;  }  boolean foundRequest=false;  Request req=null;  for (int i=0; i < length; i++) {    Node child=(Node)nl.item(i);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    if (child.getLocalName().equals("Request")) {      try {        req=new Request((Element)child);        SAMLUtils.debug.message("found request ");        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message(" Received Request:" + req.toString());        }        String[] data={SAMLUtils.bundle.getString("requestLogMessage") + " " + remoteAddr,req.toString()};        LogUtils.access(java.util.logging.Level.FINE,LogUtils.SOAP_REQUEST_MESSAGE,data);        inResponseTo=req.getRequestID();        foundRequest=true;        break;      } catch (      SAMLRequesterException ss) {        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("SOAPReceiver:setting " + "status to samlp:Requester" + " "+ ss.getMessage());        }        message=new String(ss.getMessage());        try {          status=new Status(new StatusCode("samlp:Requester"),message,null);          retResponse=new Response(respID,inResponseTo,status,recipient,contents);        } catch (        SAMLException se) {          SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response:" + se.getMessage());        }        String[] data={invalidRespPrefix,retResponse.toString()};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.INVALID_REQUEST,data);        return retResponse;      }catch (      SAMLRequestVersionTooHighException sv) {        String mesg=new String(sv.getMessage());        StringTokenizer tok1=new StringTokenizer(mesg,"|");        inResponseTo=tok1.nextToken();        message=tok1.nextToken();        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("SOAPReceiver:setting " + "status to samlp:VersionMismatch" + " "+ message);        }        try {          status=new Status(new StatusCode("samlp:RequestVersionTooHigh"),message,null);          retResponse=new Response(respID,inResponseTo,status,recipient,contents);        } catch (        SAMLException se) {          SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response:" + se.getMessage());        }        String[] data={invalidRespPrefix,retResponse.toString()};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.INVALID_REQUEST,data);        return retResponse;      }catch (      SAMLRequestVersionTooLowException sv) {        String mesg=new String(sv.getMessage());        StringTokenizer tok1=new StringTokenizer(mesg,"|");        inResponseTo=tok1.nextToken();        message=tok1.nextToken();        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("SOAPReceiver:setting " + "status to samlp:VersionMismatch" + " "+ message);        }        try {          status=new Status(new StatusCode("samlp:RequestVersionTooLow"),message,null);          retResponse=new Response(respID,inResponseTo,status,recipient,contents);        } catch (        SAMLException se) {          SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response:" + se.getMessage());        }        String[] data={invalidRespPrefix,retResponse.toString()};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.INVALID_REQUEST,data);        return retResponse;      }catch (      Exception e) {        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("SOAPReceiver:setting " + "status to samlp:Responder" + " "+ e.getMessage());        }        message=new String(e.getMessage());        try {          status=new Status(new StatusCode("samlp:Responder"),message,null);          retResponse=new Response(respID,inResponseTo,status,recipient,contents);        } catch (        SAMLException se) {          SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response:" + se.getMessage());        }        String[] data={invalidRespPrefix,retResponse.toString()};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.INVALID_REQUEST,data);        return retResponse;      }    }  }  if (!(foundRequest)) {    SAMLUtils.debug.error("SOAPReceiver: Body does not have a Request");    message=SAMLUtils.bundle.getString("missingRequest");    try {      status=new Status(new StatusCode("samlp:Requester"),message,null);      retResponse=new Response(respID,inResponseTo,status,recipient,contents);    } catch (    SAMLException se) {      SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response:" + se.getMessage());    }    String[] data={invalidRespPrefix,retResponse.toString()};    LogUtils.error(java.util.logging.Level.INFO,LogUtils.INVALID_REQUEST,data);    return retResponse;  } else {    if (!req.isSignatureValid()) {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("SOAPReceiver: couldn't verify " + "the signature on Request.");      }      message=SAMLUtils.bundle.getString("cannotVerifyRequest");      try {        status=new Status(new StatusCode("samlp:Requester"),message,null);        retResponse=new Response(respID,inResponseTo,status,recipient,contents);        retResponse.setMajorVersion(req.getMajorVersion());        retResponse.setMinorVersion(req.getMinorVersion());      } catch (      SAMLException se) {        SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",se);        String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);      }      String[] data={respPrefix,retResponse.toString()};      LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);      return retResponse;    }    int reqType=req.getContentType();    if (reqType == Request.NOT_SUPPORTED) {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("SOAPReceiver:Found " + "element in the request which are not supported");      }      message=SAMLUtils.bundle.getString("unsupportedElement");      try {        status=new Status(new StatusCode("samlp:Responder"),message,null);        retResponse=new Response(respID,inResponseTo,status,recipient,contents);        retResponse.setMajorVersion(req.getMajorVersion());        retResponse.setMinorVersion(req.getMinorVersion());      } catch (      SAMLException se) {        SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",se);        String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);      }      String[] data={respPrefix,retResponse.toString()};      LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);      return retResponse;    }    List respondWith=req.getRespondWith();    if (!parseRespondWith(respondWith)) {      SAMLUtils.debug.error("SOAPReceiver:Supported statements " + "are not present in the RespondWith element.");      message=SAMLUtils.bundle.getString("unsupportedStatement");      try {        status=new Status(new StatusCode("samlp:Responder"),message,null);        retResponse=new Response(respID,inResponseTo,status,recipient,contents);        retResponse.setMajorVersion(req.getMajorVersion());        retResponse.setMinorVersion(req.getMinorVersion());      } catch (      SAMLException se) {        SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",se);        String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);      }      String[] data={respPrefix,retResponse.toString()};      LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);      return retResponse;    }    AssertionManager am=null;    try {      am=AssertionManager.getInstance();    } catch (    SAMLException se) {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("SOAPReceiver: Cannot" + " instantiate AssertionManager");      }      message=se.getMessage();      try {        status=new Status(new StatusCode("samlp:Responder"),message,null);        retResponse=new Response(respID,inResponseTo,status,recipient,contents);        retResponse.setMajorVersion(req.getMajorVersion());        retResponse.setMinorVersion(req.getMinorVersion());      } catch (      SAMLException sse) {        SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",sse);        String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);      }      String[] data={respPrefix,retResponse.toString()};      LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);      return retResponse;    }    List artifacts=null;    List assertions=new ArrayList();    if (reqType == Request.ASSERTION_ARTIFACT) {      artifacts=req.getAssertionArtifact();      length=artifacts.size();      for (int j=0; j < length; j++) {        AssertionArtifact art=(AssertionArtifact)artifacts.get(j);        if (!isThisSiteID(art.getSourceID())) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("SOAPReceiver:Artifact" + " has invalid SourceID");          }          message=SAMLUtils.bundle.getString("mismatchSourceID");          try {            status=new Status(new StatusCode("samlp:Requester"),message,null);            retResponse=new Response(respID,inResponseTo,status,recipient,contents);            retResponse.setMajorVersion(req.getMajorVersion());            retResponse.setMinorVersion(req.getMinorVersion());          } catch (          SAMLException ex) {            SAMLUtils.debug.error("SOAPReceiver:" + "Fatal error, " + "cannot create status or response",ex);            String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};            LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);          }          String[] data={respPrefix,retResponse.toString()};          LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);          return retResponse;        }      }      for (int i=0; i < length; i++) {        AssertionArtifact artifact=(AssertionArtifact)artifacts.get(i);        Assertion assertion=null;        try {          assertion=am.getAssertion(artifact,partnerSourceID);        } catch (        SAMLException se) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("SOAPReceiver:" + " could not find matching assertion");          }          message=se.getMessage();          try {            status=new Status(new StatusCode("samlp:Success"),message,null);            retResponse=new Response(respID,inResponseTo,status,recipient,contents);            retResponse.setMajorVersion(req.getMajorVersion());            retResponse.setMinorVersion(req.getMinorVersion());          } catch (          SAMLException sse) {            SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",sse);            String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};            LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);          }          String[] data={respPrefix,retResponse.toString()};          LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);          return retResponse;        }        if (assertion != null) {          assertions.add(i,assertion);        }      }    } else     if (reqType == Request.ASSERTION_ID_REFERENCE) {      List assertionIdRefs=req.getAssertionIDReference();      length=assertionIdRefs.size();      for (int i=0; i < length; i++) {        AssertionIDReference aidRef=(AssertionIDReference)assertionIdRefs.get(i);        Assertion assertion=null;        try {          assertion=am.getAssertion(aidRef,partnerSourceID);        } catch (        SAMLException se) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("SOAPReceiver:" + " could not find matching assertion");          }          message=se.getMessage();          try {            status=new Status(new StatusCode("samlp:Success"),message,null);            retResponse=new Response(respID,inResponseTo,status,recipient,contents);            retResponse.setMajorVersion(req.getMajorVersion());            retResponse.setMinorVersion(req.getMinorVersion());          } catch (          SAMLException sse) {            SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",sse);            String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};            LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);          }          String[] data={respPrefix,retResponse.toString()};          LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);          return retResponse;        }        if (assertion != null) {          assertions.add(i,assertion);        }      }    } else     if ((reqType == Request.AUTHENTICATION_QUERY) || (reqType == Request.AUTHORIZATION_DECISION_QUERY) || (reqType == Request.ATTRIBUTE_QUERY)) {      Query query=req.getQuery();      if (query != null) {        Assertion assertion=null;        try {          assertion=am.getAssertion(query,(String)((Iterator)partnerSourceID.iterator()).next());        } catch (        SAMLException se) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("SOAPReceiver:" + " could not find matching assertion");          }          message=se.getMessage();          try {            status=new Status(new StatusCode("samlp:Success"),message,null);            retResponse=new Response(respID,inResponseTo,status,recipient,contents);            retResponse.setMajorVersion(req.getMajorVersion());            retResponse.setMinorVersion(req.getMinorVersion());          } catch (          SAMLException sse) {            SAMLUtils.debug.error("SOAPReceiver:Fatal " + " error, cannot create status or " + " response",sse);            String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};            LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);          }          String[] data={respPrefix,retResponse.toString()};          LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);          return retResponse;        }        if (assertion != null) {          assertions.add(assertion);        }      }    } else {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("SOAPReceiver:Request " + "contents has element which is not supported at this" + " time");      }      message=SAMLUtils.bundle.getString("unsupportedElement");      try {        status=new Status(new StatusCode("samlp:Responder"),message,null);        retResponse=new Response(respID,inResponseTo,status,recipient,contents);        retResponse.setMajorVersion(req.getMajorVersion());        retResponse.setMinorVersion(req.getMinorVersion());      } catch (      SAMLException se) {        SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",se);        String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);      }      String[] data={respPrefix,retResponse.toString()};      LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);      return retResponse;    }    int assertionSize=assertions.size();    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("found " + assertionSize + " assertions.");    }    for (int i=0; i < assertionSize; i++) {      Response resp=validateStatements((Assertion)assertions.get(i),respondWith,contents,i,respID,inResponseTo,recipient);      if (resp != null) {        String[] data={respPrefix,retResponse.toString()};        LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);        retResponse.setMajorVersion(req.getMajorVersion());        retResponse.setMinorVersion(req.getMinorVersion());        return resp;      }    }    if (reqType == Request.ASSERTION_ARTIFACT) {      if (contents.size() == artifacts.size()) {        message=null;        if (SAMLUtils.debug.messageEnabled()) {          SAMLUtils.debug.message("SOAPReceiver: Matching " + "Assertion found");        }        try {          status=new Status(new StatusCode("samlp:Success"),message,null);          retResponse=new Response(respID,inResponseTo,status,recipient,contents);          retResponse.setMajorVersion(req.getMajorVersion());          retResponse.setMinorVersion(req.getMinorVersion());        } catch (        SAMLException se) {          SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",se);          String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};          LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);        }        String[] data={respPrefix,retResponse.toString()};        LogUtils.access(java.util.logging.Level.FINE,LogUtils.SENDING_RESPONSE,data);        return retResponse;      } else {        message=SAMLUtils.bundle.getString("unequalMatch");        try {          status=new Status(new StatusCode("samlp:Success"),message,null);          retResponse=new Response(respID,inResponseTo,status,recipient,contents);          retResponse.setMajorVersion(req.getMajorVersion());          retResponse.setMinorVersion(req.getMinorVersion());        } catch (        SAMLException se) {          SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",se);          String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};          LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);        }        String[] data={respPrefix,retResponse.toString()};        LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);        return retResponse;      }    } else {      try {        status=new Status(new StatusCode("samlp:Success"),message,null);        retResponse=new Response(respID,inResponseTo,status,recipient,contents);        retResponse.setMajorVersion(req.getMajorVersion());        retResponse.setMinorVersion(req.getMinorVersion());      } catch (      SAMLException se) {        SAMLUtils.debug.error("SOAPReceiver:Fatal error, " + "cannot create status or response",se);        String[] data={SAMLUtils.bundle.getString("cannotBuildResponse")};        LogUtils.error(java.util.logging.Level.INFO,LogUtils.BUILD_RESPONSE_ERROR,data);      }    }  }  if (LogUtils.isAccessLoggable(java.util.logging.Level.FINER)) {    String[] data={respPrefix,retResponse.toString()};    LogUtils.access(java.util.logging.Level.FINER,LogUtils.SENDING_RESPONSE,data);  } else {    String[] data={respPrefix,retResponse.getResponseID()};    LogUtils.access(java.util.logging.Level.INFO,LogUtils.SENDING_RESPONSE,data);  }  return retResponse;}  }
class C{  public boolean isFinished(){  return isFinished;}  }
class C{  public void testCertPathBuilder08() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  Provider prov=null;  for (int t=0; t < validValues.length; t++) {    try {      CertPathBuilder.getInstance(validValues[t],prov);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e1) {    }  }}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  public List<Triangle> surroundingTriangles(Pnt site,Triangle triangle){  if (!triangle.contains(site))   throw new IllegalArgumentException("Site not in triangle");  List<Triangle> list=new ArrayList<Triangle>();  Triangle start=triangle;  Pnt guide=triangle.getVertexButNot(site);  while (true) {    list.add(triangle);    Triangle previous=triangle;    triangle=this.neighborOpposite(guide,triangle);    guide=previous.getVertexButNot(site,guide);    if (triangle == start)     break;  }  return list;}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  addSigner(key,cert,getEncOID(key,digestOID),digestOID,signedAttrGen,unsignedAttrGen);}  }
class C{  public EntitlementsExceptionMappingHandler(Map<Integer,Integer> errorCodeMapping){  this(errorCodeMapping,Collections.<RequestType,Map<Integer,Integer>>emptyMap(),Collections.<Integer,Integer>emptyMap());}  }
class C{  public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  WNafPreCompInfo wnafPreCompInfo;  if ((preCompInfo != null) && (preCompInfo instanceof WNafPreCompInfo)) {    wnafPreCompInfo=(WNafPreCompInfo)preCompInfo;  } else {    wnafPreCompInfo=new WNafPreCompInfo();  }  int m=k.bitLength();  byte width;  int reqPreCompLen;  if (m < 13) {    width=2;    reqPreCompLen=1;  } else {    if (m < 41) {      width=3;      reqPreCompLen=2;    } else {      if (m < 121) {        width=4;        reqPreCompLen=4;      } else {        if (m < 337) {          width=5;          reqPreCompLen=8;        } else {          if (m < 897) {            width=6;            reqPreCompLen=16;          } else {            if (m < 2305) {              width=7;              reqPreCompLen=32;            } else {              width=8;              reqPreCompLen=127;            }          }        }      }    }  }  int preCompLen=1;  ECPoint[] preComp=wnafPreCompInfo.getPreComp();  ECPoint twiceP=wnafPreCompInfo.getTwiceP();  if (preComp == null) {    preComp=new ECPoint[]{p};  } else {    preCompLen=preComp.length;  }  if (twiceP == null) {    twiceP=p.twice();  }  if (preCompLen < reqPreCompLen) {    ECPoint[] oldPreComp=preComp;    preComp=new ECPoint[reqPreCompLen];    System.arraycopy(oldPreComp,0,preComp,0,preCompLen);    for (int i=preCompLen; i < reqPreCompLen; i++) {      preComp[i]=twiceP.add(preComp[i - 1]);    }  }  byte[] wnaf=windowNaf(width,k);  int l=wnaf.length;  ECPoint q=p.getCurve().getInfinity();  for (int i=l - 1; i >= 0; i--) {    q=q.twice();    if (wnaf[i] != 0) {      if (wnaf[i] > 0) {        q=q.add(preComp[(wnaf[i] - 1) / 2]);      } else {        q=q.subtract(preComp[(-wnaf[i] - 1) / 2]);      }    }  }  wnafPreCompInfo.setPreComp(preComp);  wnafPreCompInfo.setTwiceP(twiceP);  p.setPreCompInfo(wnafPreCompInfo);  return q;}  }
class C{  public ResultImpl() throws XACMLException {}  }
class C{  public int hashCode(){  return map.hashCode();}  }
class C{  private void unarchiveExpandedState(Object state){  if (state instanceof Vector) {    Vector<?> paths=(Vector)state;    for (int counter=paths.size() - 1; counter >= 0; counter--) {      Boolean eState=(Boolean)paths.elementAt(counter--);      TreePath path;      try {        path=getPathForIndexs((int[])paths.elementAt(counter));        if (path != null)         expandedState.put(path,eState);      } catch (      Error error) {      }    }  }}  }
class C{  private static ResultPoint[] expandSquare(ResultPoint[] cornerPoints,float oldSide,float newSide){  float ratio=newSide / (2 * oldSide);  float dx=cornerPoints[0].getX() - cornerPoints[2].getX();  float dy=cornerPoints[0].getY() - cornerPoints[2].getY();  float centerx=(cornerPoints[0].getX() + cornerPoints[2].getX()) / 2.0f;  float centery=(cornerPoints[0].getY() + cornerPoints[2].getY()) / 2.0f;  ResultPoint result0=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result2=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  dx=cornerPoints[1].getX() - cornerPoints[3].getX();  dy=cornerPoints[1].getY() - cornerPoints[3].getY();  centerx=(cornerPoints[1].getX() + cornerPoints[3].getX()) / 2.0f;  centery=(cornerPoints[1].getY() + cornerPoints[3].getY()) / 2.0f;  ResultPoint result1=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result3=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  return new ResultPoint[]{result0,result1,result2,result3};}  }
class C{  public static void deregisterInitializationCompletedListener(InitializationCompletedListener listener){  directoryServer.initializationCompletedListeners.remove(listener);}  }
class C{  @Override public void treeCollapsed(TreeExpansionEvent event){  Object node=event.getPath().getLastPathComponent();  if (!(node instanceof RootNode)) {    BasicNode basicNode=(BasicNode)node;    stopRefreshNode(basicNode);synchronized (refreshQueue) {      boolean isWorking=refreshQueue.isWorking(basicNode);      refreshQueue.cancelForNode(basicNode);      if (isWorking) {        basicNode.setRefreshNeededOnExpansion(true);      }    }  }}  }
class C{  public synchronized Set<Record> listAll() throws IOException {  File[] files=directory.listFiles(endingWithDotJson());  if (files == null) {    return emptySet();  }  Set<Record> records=new HashSet<>();  for (  File file : files) {    records.add(loadRecord(file));  }  return records;}  }
class C{  public boolean hasMoreTokens(){  return index != oid.length();}  }
class C{  XSLTElementProcessor(){}  }
class C{  public void paint(Graphics g){  int len=highlights.size();  for (int i=0; i < len; i++) {    HighlightInfo info=highlights.elementAt(i);    if (!(info instanceof LayeredHighlightInfo)) {      Rectangle a=component.getBounds();      Insets insets=component.getInsets();      a.x=insets.left;      a.y=insets.top;      a.width-=insets.left + insets.right;      a.height-=insets.top + insets.bottom;      for (; i < len; i++) {        info=highlights.elementAt(i);        if (!(info instanceof LayeredHighlightInfo)) {          Highlighter.HighlightPainter p=info.getPainter();          p.paint(g,info.getStartOffset(),info.getEndOffset(),a,component);        }      }    }  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.BootstrapPolicyElement createBootstrapPolicyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.BootstrapPolicyElementImpl();}  }
class C{  public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (logger.isLoggingEnabled())   this.logger.logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(ContentLength.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (logger.isLoggingEnabled()) {      logger.logError("BAD MESSAGE!");      logger.logError(message);    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  private void updateDimmedActivatedHideSensitive(AmbientState ambientState,StackScrollState resultState,StackScrollAlgorithmState algorithmState){  boolean dimmed=ambientState.isDimmed();  boolean dark=ambientState.isDark();  boolean hideSensitive=ambientState.isHideSensitive();  int childCount=algorithmState.visibleChildren.size();  for (int i=0; i < childCount; i++) {    View child=algorithmState.visibleChildren.get(i);    StackScrollState.ViewState childViewState=resultState.getViewStateForView(child);    childViewState.dimmed=dimmed;    childViewState.dark=dark;    childViewState.hideSensitive=hideSensitive;    childViewState.scale=!mScaleDimmed || !dimmed || false ? 1.0f : DIMMED_SCALE;  }}  }
class C{  public FileTag(){  sequential=false;  dataFile=null;  nextIndex=0;  random=null;  fileLines=null;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK " + requestEvent.getRequest());  if (dropAckCount <= 3) {    boolean skip=false;    try {      reSendSt.sendResponse(reSendResponse);      logger.info("shootme: resending the previous 200");    } catch (    Exception ex) {      String s="Unexpected error";      logger.error(s,ex);      AckReTransmissionTest.fail(s);      skip=true;    }    if (!skip) {      dropAckCount++;      return;    }  }  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    AckReTransmissionTest.assertTrue("ACK was not successfully retransmitted 4 times",4 == dropAckCount);    Request byeRequest=dialog.createRequest(Request.BYE);    ClientTransaction ct=sipProvider.getNewClientTransaction(byeRequest);    dialog.sendRequest(ct);    reSendSt=null;    reSendResponse=null;    logger.info("shootme: Sending a BYE");  } catch (  Exception ex) {    String s="Unexpected error";    logger.error(s,ex);    AckReTransmissionTest.fail(s);  }}  }
class C{  public JKTimeObject(){}  }
class C{  private ResultCode saveGenerationId(long generationId){  ResultCode result=runSaveGenerationId(getBaseDN(),generationId);  if (result != ResultCode.SUCCESS) {    generationIdSavedStatus=false;    if (result == ResultCode.NO_SUCH_OBJECT) {      result=runSaveGenerationId(config.dn(),generationId);    }    if (result != ResultCode.SUCCESS) {      logger.error(ERR_UPDATING_GENERATION_ID,getBaseDN(),result.getName());    }  } else {    generationIdSavedStatus=true;  }  return result;}  }
class C{  public static ContainerListener add(ContainerListener a,ContainerListener b){  return (ContainerListener)addInternal(a,b);}  }
class C{  public FilteredImageSource(ImageProducer orig,ImageFilter imgf){  src=orig;  filter=imgf;}  }
class C{  public void removeActionListener(ActionListener l){  if ((l != null) && (getAction() == l)) {    setAction(null);  } else {    listenerList.remove(ActionListener.class,l);  }}  }
class C{  public static MultiChoiceArgument<SearchScope> searchScopeArgument() throws ArgumentException {  return MultiChoiceArgument.<SearchScope>builder(OPTION_LONG_SEARCHSCOPE).shortIdentifier(OPTION_SHORT_SEARCHSCOPE).description(INFO_SEARCH_DESCRIPTION_SEARCH_SCOPE.get()).allowedValues(SearchScope.values()).defaultValue(SearchScope.WHOLE_SUBTREE).valuePlaceholder(INFO_SEARCH_SCOPE_PLACEHOLDER.get()).buildArgument();}  }
class C{  public static URL toURL(String filename) throws MalformedURLException {  URL url;  try {    url=new URL(filename);  } catch (  MalformedURLException e) {    url=new File(filename).toURI().toURL();  }  return url;}  }
class C{  public static String generateTOTP512(String key,String time,String returnDigits){  return generateTOTP(key,time,returnDigits,"HmacSHA512");}  }
class C{  private boolean preventHorizontalAction(final SwipeOpenViewHolder holder,final float translationX){  if (translationX > 0f && ((!isRtl && holder.getStartHiddenViewSize() == 0f) ^ (isRtl && holder.getEndHiddenViewSize() == 0f))) {    return true;  } else   if (translationX < 0f && ((!isRtl && holder.getEndHiddenViewSize() == 0f) ^ (isRtl && holder.getStartHiddenViewSize() == 0f))) {    return true;  }  return false;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.DSAKeyValueType createDSAKeyValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.DSAKeyValueTypeImpl();}  }
class C{  public SoftReferenceObjectPool(final PooledObjectFactory<T> factory){  this.factory=factory;}  }
class C{  protected synchronized void engineSetSeed(byte[] seed){  if (seed == null) {    throw new NullPointerException("seed == null");  }  if (state == NEXT_BYTES) {    System.arraycopy(copies,HASHCOPY_OFFSET,this.seed,HASH_OFFSET,EXTRAFRAME_OFFSET);  }  state=SET_SEED;  if (seed.length != 0) {    updateSeed(seed);  }}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(long fooId) throws PortalException {  return fooPersistence.remove(fooId);}  }
class C{  @DataProvider(name="validRules") public Object[][] validData(){  return new Object[][]{{"129.34.55.67"},{"129.*.78.55"},{".central.sun.com"},{"foo.central.sun.com"},{"foo.*.sun.*"},{"128.*.*.*"},{"129.45.23.67/22"},{"128.33.23.21/32"},{"*.*.*.*"},{"129.45.67.34/0"},{"foo.com"},{"foo"}};}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.RequestProofTokenElement createRequestProofTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.RequestProofTokenElementImpl();}  }
class C{  @ConstructorProperties({"target"}) public OverlayLayout(Container target){  this.target=target;}  }
class C{  private boolean updatedByUser(){  return !javaHome.getText().equals(readJavaHome) || useOpenDSJavaHome.isSelected() != readUseOpenDSJavaHome || useOpenDSJavaArgs.isSelected() != readUseOpenDSJavaArgs || !readJavaArguments.equals(getCurrentJavaArguments());}  }
class C{  public GSSAPISASLMechanismHandler(){  super();}  }
class C{  private String paramsToString(){  StringBuilder result=new StringBuilder();  if (!parameters.isEmpty()) {    for (    Map.Entry<String,String> entry : parameters.entrySet()) {      if (result.length() == 0) {        result.append("?");      } else {        result.append("&");      }      result.append(entry.getKey());      result.append("=");      result.append(entry.getValue());    }  }  return result.toString();}  }
class C{  public void assignService(String universalId,String serviceName,Map values) throws AMConsoleException {  try {    String[] params={universalId,serviceName};    logEvent("ATTEMPT_IDENTITY_ASSIGN_SERVICE",params);    AMIdentity amid=IdUtils.getIdentity(getUserSSOToken(),universalId);    amid.assignService(serviceName,values);    logEvent("SUCCEED_IDENTITY_ASSIGN_SERVICE",params);  } catch (  SSOException e) {    String[] paramsEx={universalId,serviceName,getErrorString(e)};    logEvent("SSO_EXCEPTION_IDENTITY_ASSIGN_SERVICE",paramsEx);    debug.warning("EntitiesModelImpl.assignService",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    debug.error("EntitiesModelImpl.assignService",e);    String[] paramsEx={universalId,serviceName,getErrorString(e)};    logEvent("IDM_EXCEPTION_IDENTITY_ASSIGN_SERVICE",paramsEx);    debug.warning("EntitiesModelImpl.assignService",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  protected static EventListener removeInternal(EventListener l,EventListener oldl){  if (l == oldl || l == null) {    return null;  } else   if (l instanceof AWTEventMulticaster) {    return ((AWTEventMulticaster)l).remove(oldl);  } else {    return l;  }}  }
class C{  public void testSetBitNegativeInside3(){  String as="-18446744073709551615";  String res="-18446744073709551611";  int number=2;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.setBit(number);  assertEquals(res,result.toString());}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  private void disableMapper() throws Exception {  String mapperDN="cn=Subject Equals DN,cn=Certificate Mappers,cn=config";  replace("cn=EXTERNAL,cn=SASL Mechanisms,cn=config","ds-cfg-certificate-mapper",mapperDN);}  }
class C{  static boolean isNextDigits(String text,int textIndex,int numDigits){  int len=text.length();  while (textIndex < len && numDigits > 0) {    if (text.charAt(textIndex) == FNC1) {      ++textIndex;      continue;    }    int n=Math.min(2,numDigits);    if (textIndex + n > len) {      return false;    }    while (n-- > 0) {      char c=text.charAt(textIndex++);      if (c < '0' || c > '9') {        return false;      }      --numDigits;    }  }  return numDigits == 0;}  }
class C{  public Tag buildTag(){  logger.info("old Tag:" + JKObjectUtil.toString(this.tag));  final Tag tag=new Tag(getLocation(),getNamespace(),getLocalName(),getqName(),buildAttribues());  logger.info("New Tag:" + JKObjectUtil.toString(tag));  return tag;}  }
class C{  protected PropertyChangeListener createActionPropertyChangeListener(Action a){  return createActionPropertyChangeListener0(a);}  }
class C{  private void serializeCompactRDFGeneralQualifier(int indent,XMPNode node) throws IOException, XMPException {  write(" rdf:parseType=\"Resource\">");  writeNewline();  serializeCanonicalRDFProperty(node,false,true,indent + 1);  for (Iterator iq=node.iterateQualifier(); iq.hasNext(); ) {    XMPNode qualifier=(XMPNode)iq.next();    serializeCanonicalRDFProperty(qualifier,false,false,indent + 1);  }}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  boolean beep=true;  if ((target != null) && (target.isEditable())) {    try {      Document doc=target.getDocument();      Caret caret=target.getCaret();      int dot=caret.getDot();      int mark=caret.getMark();      if (dot != mark) {        doc.remove(Math.min(dot,mark),Math.abs(dot - mark));        beep=false;      } else       if (dot < doc.getLength()) {        int delChars=1;        if (dot < doc.getLength() - 1) {          String dotChars=doc.getText(dot,2);          char c0=dotChars.charAt(0);          char c1=dotChars.charAt(1);          if (c0 >= '\uD800' && c0 <= '\uDBFF' && c1 >= '\uDC00' && c1 <= '\uDFFF') {            delChars=2;          }        }        doc.remove(dot,delChars);        beep=false;      }    } catch (    BadLocationException bl) {    }  }  if (beep) {    UIManager.getLookAndFeel().provideErrorFeedback(target);  }}  }
class C{  public MissingFormatWidthException(String s){  if (s == null)   throw new NullPointerException();  this.s=s;}  }
class C{  private EnumEvalResult evalNonAnonymous(AciEvalContext evalCtx,UserDNTypeURL dnTypeURL){  return evalNonAnonymous0(evalCtx,dnTypeURL) ? EnumEvalResult.TRUE : EnumEvalResult.FALSE;}  }
class C{  public void remove() throws UnsupportedOperationException {  throw new UnsupportedOperationException("Removing headers is not supported.");}  }
class C{  @Override public ShapeTileBox[] divide_into_sections(double p_max_section_width){  if (p_max_section_width <= 0) {    return new ShapeTileBox[0];  }  double length=box_ur.v_x - box_ll.v_x;  double height=box_ur.v_y - box_ll.v_y;  int x_count=(int)Math.ceil(length / p_max_section_width);  int y_count=(int)Math.ceil(height / p_max_section_width);  int section_length_x=(int)Math.ceil(length / x_count);  int section_length_y=(int)Math.ceil(height / y_count);  ShapeTileBox[] result=new ShapeTileBox[x_count * y_count];  int curr_index=0;  for (int j=0; j < y_count; ++j) {    int curr_lly=box_ll.v_y + j * section_length_y;    int curr_ury;    if (j == (y_count - 1)) {      curr_ury=box_ur.v_y;    } else {      curr_ury=curr_lly + section_length_y;    }    for (int i=0; i < x_count; ++i) {      int curr_llx=box_ll.v_x + i * section_length_x;      int curr_urx;      if (i == (x_count - 1)) {        curr_urx=box_ur.v_x;      } else {        curr_urx=curr_llx + section_length_x;      }      result[curr_index]=new ShapeTileBox(curr_llx,curr_lly,curr_urx,curr_ury);      ++curr_index;    }  }  return result;}  }
class C{  public Lyrics3v2Field(AbstractLyrics3v2FieldFrameBody body){  this.frameBody=body;}  }
class C{  public FSNameRegistrationResponse processSOAPRegistrationRequest(HttpServletRequest request,HttpServletResponse response,FSNameRegistrationRequest regisRequest){  relayState=regisRequest.getRelayState();  try {    boolean regisSucceed=false;    FSNameRegistrationResponse regisResponse=null;    StatusCode statusCode;    FSUtils.debug.message("Entered FSNameRegistrationHandler::processRegistrationRequest");    if (managerInst == null) {      FSUtils.debug.error("FSNameRegistrationHandler Account Manager instance is null");      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegistration" + "failed to get Account Manager instance");      }      statusCode=new StatusCode(IFSConstants.REGISTRATION_FAILURE_STATUS);      try {        regisResponse=new FSNameRegistrationResponse(null,regisRequest.getRequestID(),new Status(statusCode),hostedEntityId,relayState);      } catch (      FSMsgException e) {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response");        }        return null;      }      regisResponse.setID(IFSConstants.REGISTRATIONID);      regisResponse.setMinorVersion(regisRequest.getMinorVersion());      return regisResponse;    }    FSUtils.debug.message("Begin processRegistrationRequest SOAP profile...");    if (regisRequest != null) {      boolean bUserStatus=setUserDN(regisRequest);      if (bUserStatus) {        boolean retStatus=doCommonRegistration();        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("doCommonRegistration returns " + retStatus);        }        if (retStatus) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegistra" + "tion:registration in DS completed " + "successfully");          }          try {            statusCode=new StatusCode(IFSConstants.SAML_SUCCESS);            regisResponse=new FSNameRegistrationResponse(null,regisRequest.getRequestID(),new Status(statusCode),hostedEntityId,relayState);            regisSucceed=true;          } catch (          FSMsgException e) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response");            }            return null;          }catch (          SAMLException ex) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response");            }            return null;          }        } else {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegis" + "tration: registration in DS failed");          }          try {            statusCode=new StatusCode(IFSConstants.REGISTRATION_FAILURE_STATUS);            regisResponse=new FSNameRegistrationResponse(null,regisRequest.getRequestID(),new Status(statusCode),hostedEntityId,relayState);          } catch (          FSMsgException e) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response");            }            return null;          }catch (          SAMLException ex) {            if (FSUtils.debug.messageEnabled()) {              FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response");            }            return null;          }        }      } else {        FSUtils.debug.message("Failed to get UserDN. Invalid registration request");        try {          statusCode=new StatusCode(IFSConstants.FEDERATION_NOT_EXISTS_STATUS);          regisResponse=new FSNameRegistrationResponse(null,regisRequest.getRequestID(),new Status(statusCode),hostedEntityId,relayState);        } catch (        FSMsgException e) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response");          }          return null;        }catch (        SAMLException ex) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSNameRegistrationHandler::" + "failed to create registration response");          }          return null;        }      }    } else {      FSUtils.debug.error("FSNameRegistrationHandler::processRegistrationRequest " + "name registration request is improper");      return null;    }    regisResponse.setID(IFSConstants.REGISTRATIONID);    regisResponse.setMinorVersion(regisRequest.getMinorVersion());    if (regisSucceed && hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {      callPostRegisterNameIdentifierSuccess(request,response,userID,regisRequest,regisResponse,IFSConstants.NAME_REGISTRATION_IDP_SOAP_PROFILE);    }    return regisResponse;  } catch (  SAMLException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::SAMLException",e);    }    return null;  }}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  ch.characters((char[])m_obj,m_start,m_length);}  }
class C{  public Component createComponent(){  AttributeSet attr=getElement().getAttributes();  JPanel panel=new JPanel(new BorderLayout());  panel.setBackground(null);  String prompt=(String)attr.getAttribute(HTML.Attribute.PROMPT);  if (prompt == null) {    prompt=UIManager.getString("IsindexView.prompt");  }  JLabel label=new JLabel(prompt);  textField=new JTextField();  textField.addActionListener(this);  panel.add(label,BorderLayout.WEST);  panel.add(textField,BorderLayout.CENTER);  panel.setAlignmentY(1.0f);  panel.setOpaque(false);  return panel;}  }
class C{  public Bidi(String paragraph,int flags){  if (paragraph == null) {    throw new IllegalArgumentException("paragraph is null");  }  bidiBase=new BidiBase(paragraph.toCharArray(),0,null,0,paragraph.length(),flags);}  }
class C{  public void printError(String str){  buff.append(str).append("\n");}  }
class C{  public StringHolder(String initial){  value=initial;}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm,java.lang.String id,java.lang.String xpath) throws XMLSignatureException {  return signXML(doc,certAlias,algorithm,DEF_ID_ATTRIBUTE,id,false,xpath);}  }
class C{  private int normalizePort(int port,String host){  if ((1 <= port && port <= 65535) || (port == 0 && host == null)) {    return port;  }  throw new IllegalArgumentException("Invalid network port provided: " + port + " is not included in the [1, 65535] range.");}  }
class C{  public String[] findConstraints() throws MBeanException {  Context context;  try {    context=(Context)getManagedResource();  } catch (  InstanceNotFoundException e) {    throw new MBeanException(e);  }catch (  RuntimeOperationsException e) {    throw new MBeanException(e);  }catch (  InvalidTargetObjectTypeException e) {    throw new MBeanException(e);  }  SecurityConstraint[] constraints=context.findConstraints();  String[] stringConstraints=new String[constraints.length];  for (int counter=0; counter < constraints.length; counter++) {    stringConstraints[counter]=constraints[counter].toString();  }  return stringConstraints;}  }
class C{  public static CRAMMD5SASLBindRequest copyOfCRAMMD5SASLBindRequest(final CRAMMD5SASLBindRequest request){  return new CRAMMD5SASLBindRequestImpl(request);}  }
class C{  public void init(String hostedProviderId) throws FSAccountMgmtException {  this.hostedProviderId=hostedProviderId;  try {    datastoreProvider=DataStoreProviderManager.getInstance().getDataStoreProvider(IFSConstants.IDFF);  } catch (  Exception de) {    FSUtils.debug.error("DefaultFSUserProvider.init: couldn't obtain " + "datastore provider:",de);    throw new FSAccountMgmtException(de.getMessage());  }}  }
class C{  public String toString(){  return ("CertAuthPrincipal:  " + name);}  }
class C{  public SocketTimeoutException(Throwable cause){  super(null,cause);}  }
class C{  public RemarshalException(){  super();}  }
class C{  public static Component createRigidArea(Dimension d){  return new Filler(d,d,d);}  }
class C{  private PlaPointFloat left_turn_next_corner(PlaPointFloat p_from_corner,double p_dist,PlaPointFloat p_to_corner,PlaPointFloat p_next_corner){  PlaPointFloat curr_tangential_point=p_from_corner.right_tangential_point(p_to_corner,p_dist);  if (curr_tangential_point == null) {    System.out.println("LocateFoundConnectionAlgo.left_turn_next_corner: right tangential point is null");    return p_from_corner;  }  PlaSegmentFloat first_line=new PlaSegmentFloat(p_from_corner,curr_tangential_point);  curr_tangential_point=p_to_corner.left_tangential_point(p_next_corner,2 * p_dist + c_tolerance);  if (curr_tangential_point == null) {    System.out.println("LocateFoundConnectionAlgo.left_turn_next_corner: left tangential point is null");    return p_from_corner;  }  PlaSegmentFloat second_line=new PlaSegmentFloat(p_to_corner,curr_tangential_point);  second_line=second_line.translate(-p_dist);  return first_line.intersection(second_line);}  }
class C{  @SuppressWarnings("unchecked") @Test public void testUnsupportedCreateWithId() throws Exception {  JsonValue jsonConfiguration=readConfig("/config/provisioner.openicf-xml.json");  ObjectClassInfoHelper objectClassInfoHelper=mock(ObjectClassInfoHelper.class);  ConnectorFacade connectorFacade=mock(ConnectorFacade.class);  when(connectorFacade.getOperation(any(APIOperation.class.getClass()))).thenReturn(mock(CreateApiOp.class));  when(connectorFacade.create(any(ObjectClass.class),any(Set.class),any(OperationOptions.class))).thenReturn(new Uid("newUid"));  OpenICFProvisionerService provisionerService=mock(OpenICFProvisionerService.class);  when(provisionerService.getConnectorFacade()).thenReturn(connectorFacade);  when(provisionerService.getActivityLogger()).thenReturn(mock(ActivityLogger.class));  Map<String,Map<Class<? extends APIOperation>,OperationOptionInfoHelper>> objectOperations=ConnectorUtil.getOperationOptionConfiguration(jsonConfiguration);  Map<Class<? extends APIOperation>,OperationOptionInfoHelper> operations=objectOperations.get(GROUP_NAME);  ObjectClassResourceProvider resourceProvider=new ObjectClassResourceProvider(GROUP_NAME,objectClassInfoHelper,operations,provisionerService,jsonConfiguration);  Map<String,List<String>> httpHeaders=new HashMap<>();  Promise<ResourceResponse,ResourceException> upsertPromise=resourceProvider.handleCreate(createHttpContext("PUT",httpHeaders),Requests.newCreateRequest("","fakeId",json(object())));  assertThat(upsertPromise).isNotNull().failedWithException().hasCauseInstanceOf(UnsupportedOperationException.class).hasMessageContaining("UPSERT");  httpHeaders.put("if-none-match",Collections.singletonList("*"));  upsertPromise=resourceProvider.handleCreate(createHttpContext("PUT",httpHeaders),Requests.newCreateRequest("","fakeId",json(object())));  assertThat(upsertPromise).isNotNull().failedWithException().hasCauseInstanceOf(UnsupportedOperationException.class).hasMessageContaining("Create with client provided ID");  Promise<ResourceResponse,ResourceException> createPromise=resourceProvider.handleCreate(new RootContext(),Requests.newCreateRequest("","fakeId",json(object())));  assertThat(createPromise).isNotNull().failedWithException().hasCauseInstanceOf(UnsupportedOperationException.class).hasMessageContaining("Create with client provided ID");}  }
class C{  @NonNull public static <T>Put<T> put(@NonNull String key,@NonNull T object){  failIfNotInitialized();  return new Put<>(key,object);}  }
class C{  public boolean isPaused(){  return paused;}  }
class C{  static String convertRealmDNToPath(String realmDN){  return coreWrapper.convertOrgNameToRealmName(realmDN);}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanFeatureInfo))   return false;  MBeanFeatureInfo p=(MBeanFeatureInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getDescription(),getDescription()) && Objects.equals(p.getDescriptor(),getDescriptor()));}  }
class C{  public FileSystemUtils(){  super();}  }
class C{  public boolean hasFromTag(){  return hasParameter(ParameterNames.FROM_TAG);}  }
class C{  public SIPETagParser(String etag){  super(etag);}  }
class C{  public static byte[] charToByte(char[] charArray){  byte bytearray[]=null;  try {    if (charArray != null) {      bytearray=(byte[])new String(charArray).getBytes("UTF-8");    }  } catch (  UnsupportedEncodingException e) {  }  return bytearray;}  }
class C{  public static <T>List<T> asList(T... values){  if (values == null) {    return new ArrayList<T>(0);  } else {    return new ArrayList<T>(Arrays.asList(values));  }}  }
class C{  public static List<Foo> findAll(){  return getPersistence().findAll();}  }
class C{  private Promise<ActionResponse,ResourceException> confirmationIdCheck(final ActionRequest request,final String realm){  final String METHOD="IdentityResource.confirmationIdCheck";  final JsonValue jVal=request.getContent();  String tokenID="";  String confirmationId;  String email;  String username;  String hashComponent=null;  String hashComponentAttr=null;  JsonValue result=new JsonValue(new LinkedHashMap<String,Object>(1));  try {    tokenID=jVal.get(TOKEN_ID).asString();    confirmationId=jVal.get(CONFIRMATION_ID).asString();    email=jVal.get(EMAIL).asString();    username=jVal.get(USERNAME).asString();    if (StringUtils.isBlank(confirmationId)) {      if (debug.errorEnabled()) {        debug.error("{} :: Bad Request - confirmationId not found in request.",METHOD);      }      throw new BadRequestException("confirmationId not provided");    }    if (StringUtils.isBlank(email) && !StringUtils.isBlank(username)) {      hashComponent=username;      hashComponentAttr=USERNAME;    }    if (!StringUtils.isBlank(email) && StringUtils.isBlank(username)) {      hashComponent=email;      hashComponentAttr=EMAIL;    }    if (StringUtils.isBlank(hashComponent)) {      if (debug.errorEnabled()) {        debug.error("{} :: Bad Request - hashComponent not found in request.",METHOD);      }      throw new BadRequestException("Required information not provided");    }    if (StringUtils.isBlank(tokenID)) {      if (debug.errorEnabled()) {        debug.error("{} :: Bad Request - tokenID not found in request.",METHOD);      }      throw new BadRequestException("tokenId not provided");    }    validateToken(tokenID,realm,hashComponent,confirmationId);    result.put(hashComponentAttr,hashComponent);    result.put(TOKEN_ID,tokenID);    result.put(CONFIRMATION_ID,confirmationId);    if (debug.messageEnabled()) {      debug.message("{} :: Confirmed for token '{}' with confirmation '{}'",METHOD,tokenID,confirmationId);    }    return newResultPromise(newActionResponse(result));  } catch (  BadRequestException bre) {    debug.warning("{} :: Cannot confirm registration/forgotPassword for : {}",METHOD,hashComponent,bre);    return bre.asPromise();  }catch (  ResourceException re) {    debug.warning("{} :: Resource error for : {}",METHOD,hashComponent,re);    return re.asPromise();  }catch (  CoreTokenException cte) {    debug.error("{} :: CTE error for : {}",METHOD,hashComponent,cte);    return new InternalServerErrorException(cte).asPromise();  }}  }
class C{  protected Digester createStopDigester(){  Digester digester=new Digester();  digester.setUseContextClassLoader(true);  digester.addObjectCreate("Server","org.apache.catalina.core.StandardServer","className");  digester.addSetProperties("Server");  digester.addSetNext("Server","setServer","org.apache.catalina.Server");  return (digester);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptionPropertyElement createEncryptionPropertyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptionPropertyElementImpl();}  }
class C{  public AssertionIDRequest createAssertionIDRequest(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ASSERTION_ID_REQUEST,value);  if (obj == null) {    return new AssertionIDRequestImpl(value);  } else {    return (AssertionIDRequest)obj;  }}  }
class C{  public final void testEqualsObject02(){  CertPath cp1=new MyCertPath(testEncoding);  CertPath cp2=new MyCertPath(testEncoding);  assertTrue(cp1.equals(cp2) && cp2.equals(cp1));}  }
class C{  JCERSAPrivateCrtKey(PrivateKeyInfo info) throws IOException {  this(org.bouncycastle.asn1.pkcs.RSAPrivateKey.getInstance(info.parsePrivateKey()));}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  super.handleButton2Request(event);}  }
class C{  protected synchronized Runnable waitForWork(){  while (tasks.size() == 0) {    try {      wait();    } catch (    InterruptedException ie) {      return null;    }  }  Runnable work=tasks.firstElement();  tasks.removeElementAt(0);  return work;}  }
class C{  public ProcessingInstruction createProcessingInstruction(String target,String data) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public static Foo findByUuid_C_First(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_First(uuid,companyId,orderByComparator);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.OperationalProtectionElement createOperationalProtectionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.OperationalProtectionElementImpl();}  }
class C{  public void close(AtomicInteger nextMessageID){  if (ldapWriter != null) {    if (nextMessageID != null) {      try {        LDAPMessage message=new LDAPMessage(nextMessageID.getAndIncrement(),new UnbindRequestProtocolOp());        ldapWriter.writeMessage(message);      } catch (      Exception e) {      }    }    ldapWriter.close();  }  if (ldapReader != null) {    ldapReader.close();  }}  }
class C{  public PWResetUncaughtExceptionModelImpl(){  super();}  }
class C{  public ProgressMonitor(Component parentComponent,Object message,String note,int min,int max){  this(parentComponent,message,note,min,max,null);}  }
class C{  public static String requestPath(URL url){  String fileOnly=url.getFile();  if (fileOnly == null) {    return "/";  } else   if (!fileOnly.startsWith("/")) {    return "/" + fileOnly;  } else {    return fileOnly;  }}  }
class C{  public final void testGetPrime(){  RSAOtherPrimeInfo ropi=new RSAOtherPrimeInfo(BigInteger.valueOf(1L),BigInteger.valueOf(2L),BigInteger.valueOf(3L));  assertEquals(1L,ropi.getPrime().longValue());}  }
class C{  protected void paintTitleBackground(Graphics g){  boolean isSelected=frame.isSelected();  if (isSelected)   g.setColor(selectedTitleColor); else   g.setColor(notSelectedTitleColor);  g.fillRect(0,0,getWidth(),getHeight());}  }
class C{  protected int unwrap() throws IOException {  if (logger != null) {    logger.println("SSLRecordProtocol.unwrap: BEGIN [");  }  int type=in.readUint8();  if ((type < ContentType.CHANGE_CIPHER_SPEC) || (type > ContentType.APPLICATION_DATA)) {    if (logger != null) {      logger.println("Non v3.1 message type:" + type);    }    if (type >= 0x80) {      int length=(type & 0x7f) << 8 | in.read();      byte[] fragment=in.read(length);      handshakeProtocol.unwrapSSLv2(fragment);      if (logger != null) {        logger.println("SSLRecordProtocol:unwrap ] END, SSLv2 type");      }      return ContentType.HANDSHAKE;    }    throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));  }  if (logger != null) {    logger.println("Got the message of type: " + type);  }  if (version != null) {    if ((in.read() != version[0]) || (in.read() != version[1])) {      throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));    }  } else {    in.skip(2);  }  int length=in.readUint16();  if (logger != null) {    logger.println("TLSCiphertext.fragment[" + length + "]: ...");  }  if (length > MAX_CIPHERED_DATA_LENGTH) {    throw new AlertException(AlertProtocol.RECORD_OVERFLOW,new SSLProtocolException("Received message is too big."));  }  byte[] fragment=in.read(length);  if (logger != null) {    logger.print(fragment);  }  if (activeReadState != null) {    fragment=activeReadState.decrypt((byte)type,fragment);    if (logger != null) {      logger.println("TLSPlaintext.fragment:");      logger.print(fragment);    }  }  if (fragment.length > MAX_DATA_LENGTH) {    throw new AlertException(AlertProtocol.DECOMPRESSION_FAILURE,new SSLProtocolException("Decompressed plain data is too big."));  }switch (type) {case ContentType.CHANGE_CIPHER_SPEC:    handshakeProtocol.receiveChangeCipherSpec();  setSession(handshakeProtocol.getSession());if (logger != null) {  logger.println("activeReadState = pendingConnectionState");}activeReadState=pendingConnectionState;break;case ContentType.ALERT:alert(fragment[0],fragment[1]);break;case ContentType.HANDSHAKE:handshakeProtocol.unwrap(fragment);break;case ContentType.APPLICATION_DATA:if (logger != null) {logger.println("TLSCiphertext.unwrap: APP DATA[" + length + "]:");logger.println(new String(fragment));}appData.append(fragment);break;default :throw new AlertException(AlertProtocol.UNEXPECTED_MESSAGE,new SSLProtocolException("Unexpected message type has been received: " + type));}if (logger != null) {logger.println("SSLRecordProtocol:unwrap ] END, type: " + type);}return type;}  }
class C{  public static XMPDateTime createFromISO8601(String strValue) throws XMPException {  return new XMPDateTimeImpl(strValue);}  }
class C{  private void processDigest(byte[] digest,int offset){  int i, j;  int lastWord;  long nBits=messageLength << 3;  engineUpdate((byte)0x80);  i=0;  lastWord=(buffer[BYTES_OFFSET] + 3) >> 2;  if (buffer[BYTES_OFFSET] != 0) {    if (lastWord < 15) {      i=lastWord;    } else {      if (lastWord == 15) {        buffer[15]=0;      }      SHA1Impl.computeHash(buffer);      i=0;    }  }  Arrays.fill(buffer,i,14,0);  buffer[14]=(int)(nBits >>> 32);  buffer[15]=(int)(nBits & 0xFFFFFFFF);  SHA1Impl.computeHash(buffer);  j=offset;  for (i=HASH_OFFSET; i < HASH_OFFSET + 5; i++) {    int k=buffer[i];    digest[j]=(byte)(k >>> 24);    digest[j + 1]=(byte)(k >>> 16);    digest[j + 2]=(byte)(k >>> 8);    digest[j + 3]=(byte)(k);    j+=4;  }  engineReset();}  }
class C{  public synchronized void startGrabbing(){  if ((flags & DONEBITS) != 0) {    return;  }  if (!grabbing) {    grabbing=true;    flags&=~(ImageObserver.ABORT);    producer.startProduction(this);  }}  }
class C{  @Modified protected void modified(ComponentContext context) throws Exception {  JsonValue configuration=enhancedConfig.getConfigurationAsJson(context);  Set<String> routesToKeep=new HashSet<String>();  for (  JsonValue value : configuration.get("objects").expect(List.class)) {    ManagedObjectSet objectSet=new ManagedObjectSet(scriptRegistry,cryptoService,syncRoute,connectionFactory,value);    if (routesToKeep.contains(objectSet.getName())) {      throw new ComponentException("Duplicate definition of managed object type: " + objectSet.getName());    }    RouteMatcher<Request> oldRoute=managedRoutes.get(objectSet.getName());    if (null != oldRoute) {      managedRouter.removeRoute(oldRoute);    }    managedRoutes.put(objectSet.getName(),managedRouter.addRoute(RoutingMode.STARTS_WITH,uriTemplate(objectSet.getTemplate()),new ManagedObjectSetRequestHandler(objectSet)));    routesToKeep.add(objectSet.getName());  }  for (  Map.Entry<String,RouteMatcher<Request>> entry : managedRoutes.entrySet()) {    if (routesToKeep.contains(entry.getKey())) {      continue;    }    managedRouter.removeRoute(managedRoutes.remove(entry.getKey()));  }}  }
class C{  public void testHasAttributes1() throws Throwable {  Document doc;  Element element;  NodeList elementList;  boolean hasAttributes;  doc=(Document)load("staff",builder);  elementList=doc.getElementsByTagName("employee");  element=(Element)elementList.item(0);  hasAttributes=element.hasAttributes();  assertFalse("nodehasattributes01_1",hasAttributes);  elementList=doc.getElementsByTagName("address");  element=(Element)elementList.item(0);  hasAttributes=element.hasAttributes();  assertTrue("nodehasattributes01_2",hasAttributes);}  }
class C{  public static Builder create(final Context context){  if (SDK_INT >= ICE_CREAM_SANDWICH)   return new Builder(context,THEME_HOLO_LIGHT); else   return new Builder(context);}  }
class C{  @Override public void reset() throws IOException {  throw exception;}  }
class C{  public CertificatePinner certificatePinner(){  return certificatePinner;}  }
class C{  public boolean hasFlicker(){  return flicker;}  }
class C{  public synchronized void redo() throws CannotRedoException {  if (inProgress) {    UndoableEdit edit=editToBeRedone();    if (edit == null) {      throw new CannotRedoException();    }    redoTo(edit);  } else {    super.redo();  }}  }
class C{  public KeyNotFoundException(String msg,Throwable ex){  super(msg,ex);}  }
class C{  public static boolean requiresBidi(char[] text,int start,int limit){  return BidiBase.requiresBidi(text,start,limit);}  }
class C{  public ReflectiveOperationException(Throwable cause){  super(cause);}  }
class C{  public static AnonymousSASLBindRequest copyOfAnonymousSASLBindRequest(final AnonymousSASLBindRequest request){  return new AnonymousSASLBindRequestImpl(request);}  }
class C{  public static String formatDate(final Date date){  final SimpleDateFormat format=new SimpleDateFormat("dd/MM/yyyy");  final String str=format.format(date);  return format(str);}  }
class C{  public static int resetSearchReferenceCount(){  return searchReferenceCounter.getAndSet(0);}  }
class C{  public String post(String url,final int expectedStatusCode){  return post(url,null,expectedStatusCode);}  }
class C{  public Builder add(String name,String value){  checkNameAndValue(name,value);  return addLenient(name,value);}  }
class C{  public boolean verify(PublicKey verificationKey,Signature verificationEngine) throws InvalidKeyException, SignatureException {  verificationEngine.initVerify(verificationKey);  verificationEngine.update(content);  return verificationEngine.verify(signature);}  }
class C{  public static String decEncode(final String value){  return encode(value,5,10);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=xctxt.getCurrentNode();  DTMIterator nl=m_functionExpr.asIterator(xctxt,context);  XNumber score=SCORE_NONE;  if (null != nl) {    int n;    while (DTM.NULL != (n=nl.nextNode())) {      score=(n == context) ? SCORE_OTHER : SCORE_NONE;      if (score == SCORE_OTHER) {        context=n;        break;      }    }    nl.detach();  }  return score;}  }
class C{  public Marshaller createMarshaller() throws JAXBException {  return new MarshallerImpl(this);}  }
class C{  @Override public void connect() throws IOException {  File f=new File(filename);  if (f.isDirectory()) {    isDir=true;    is=getDirectoryListing(f);  } else {    is=new BufferedInputStream(new FileInputStream(f));    long lengthAsLong=f.length();    length=lengthAsLong <= Integer.MAX_VALUE ? (int)lengthAsLong : Integer.MAX_VALUE;  }  connected=true;}  }
class C{  @Override public void receiveChangeCipherSpec(){  if (isResuming) {    if (serverFinished == null) {      unexpectedMessage();    } else {      changeCipherSpecReceived=true;    }  } else {    if ((parameters.getNeedClientAuth() && clientCert == null) || clientKeyExchange == null || (clientCert != null && clientCert.certs.length > 0 && !clientKeyExchange.isEmpty() && certificateVerify == null)) {      unexpectedMessage();    } else {      changeCipherSpecReceived=true;    }    if (serverHello.server_version[1] == 1) {      computerReferenceVerifyDataTLS("client finished");    } else {      computerReferenceVerifyDataSSLv3(SSLv3Constants.client);    }  }}  }
class C{  protected TableCellRenderer createDefaultRenderer(){  return new DefaultTableCellHeaderRenderer();}  }
class C{  default void validate(){}  }
class C{  private static void createAgentGroupEx(SSOToken ssoToken,String realm,String agentGroupName,String agentType,Map attrValues,FQDNUrl serverURL,FQDNUrl agentURL) throws IdRepoException, SSOException, SMSException, ConfigurationException {  if ((agentGroupName == null) || (agentGroupName.trim().length() == 0)) {    throw new ConfigurationException("create.agent.group.missing.name",null);  }  validateAgentType(agentType,true);  AMIdentityRepository amir=new AMIdentityRepository(ssoToken,realm);  Map attributeValues=parseAttributeMap(agentType,attrValues);  if (attributeValues.containsKey(ATTR_NAME_PWD)) {    throw new ConfigurationException("create.agent.group.cannot.have.password",null);  }  Set setAgentType=new HashSet(2);  setAgentType.add(agentType);  attributeValues.put(IdConstants.AGENT_TYPE,setAgentType);  Map inheritedValues=getDefaultValues(agentType,true);  inheritedValues.putAll(attributeValues);  if ((serverURL != null) || (agentURL != null)) {    tagswapAttributeValues(inheritedValues,agentType,serverURL,agentURL);  }  amir.createIdentity(IdType.AGENTGROUP,agentGroupName,inheritedValues);}  }
class C{  static int differenceEncoded(String es1,String es2){  if (es1 == null || es2 == null) {    return 0;  }  int lengthToMatch=Math.min(es1.length(),es2.length());  int diff=0;  for (int i=0; i < lengthToMatch; i++) {    if (es1.charAt(i) == es2.charAt(i)) {      diff++;    }  }  return diff;}  }
class C{  public void addNode(Node n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  this.addElement(n);}  }
class C{  ScheduledFutureTask(Callable<V> callable,long ns){  super(callable);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  void notifyLogFileRotation(Log<?,?> log) throws ChangelogException {  if (logsCNIndexDB.contains(log)) {    updateCNIndexDBLastRotationTime(timeService.now());  }}  }
class C{  public PdfReader(String filename) throws IOException {  this(filename,new ReaderProperties());}  }
class C{  public JSplitPane(int newOrientation,Component newLeftComponent,Component newRightComponent){  this(newOrientation,UIManager.getBoolean("SplitPane.continuousLayout"),newLeftComponent,newRightComponent);}  }
class C{  private Node addConditionWaiter(){  Node t=lastWaiter;  if (t != null && t.waitStatus != Node.CONDITION) {    unlinkCancelledWaiters();    t=lastWaiter;  }  Node node=new Node(Thread.currentThread(),Node.CONDITION);  if (t == null)   firstWaiter=node; else   t.nextWaiter=node;  lastWaiter=node;  return node;}  }
class C{  private byte[][] extractIPsAndSubnetMasks(byte[] ipWithSubmask1,byte[] ipWithSubmask2){  int ipLength=ipWithSubmask1.length / 2;  byte ip1[]=new byte[ipLength];  byte subnetmask1[]=new byte[ipLength];  System.arraycopy(ipWithSubmask1,0,ip1,0,ipLength);  System.arraycopy(ipWithSubmask1,ipLength,subnetmask1,0,ipLength);  byte ip2[]=new byte[ipLength];  byte subnetmask2[]=new byte[ipLength];  System.arraycopy(ipWithSubmask2,0,ip2,0,ipLength);  System.arraycopy(ipWithSubmask2,ipLength,subnetmask2,0,ipLength);  return new byte[][]{ip1,subnetmask1,ip2,subnetmask2};}  }
class C{  public void internalFrameClosed(InternalFrameEvent e){}  }
class C{  public void processPackageAdd(String[] packages){  mHomescreenApps=new ArrayList<>();  mWorkFolderApps=new ArrayList<>();  HashSet<String> packageSet=new HashSet<>();  final boolean userAppsExisted=getUserApps(packageSet);  boolean newPackageAdded=false;  long installTime=System.currentTimeMillis();  LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(mContext);  for (  String packageName : packages) {    if (!packageSet.contains(packageName)) {      packageSet.add(packageName);      newPackageAdded=true;      List<LauncherActivityInfoCompat> activities=launcherApps.getActivityList(packageName,mUser);      if (!activities.isEmpty()) {        markForAddition(activities.get(0),installTime);      }    }  }  if (newPackageAdded) {    mPrefs.edit().putStringSet(mPackageSetKey,packageSet).apply();    finalizeAdditions(userAppsExisted);  }}  }
class C{  public void onPause(){  mHandler.removeMessages(MSGID_TICK_EVENT);  stopTickEventThread();  super.onPause();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrinsertdataoffsetgreater.class,args);}  }
class C{  protected Integer parseNumber(String number,Integer emptyValue,Integer invalidValue){  if (StringUtils.isEmpty(number)) {    return emptyValue;  }  try {    return Integer.parseInt(number);  } catch (  NumberFormatException e) {    return invalidValue;  }}  }
class C{  protected static boolean chunkstartsUnique(final ChunkContainer container){  boolean result=true;  final Set<Long> chunkStarts=new HashSet<Long>();  final Collection<Chunk> chunks=container.getChunks();  for (  final Chunk curr : chunks) {    result&=chunkStarts.add(curr.getPosition());  }  return result;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public StringBuilder toString(final StringBuilder builder){  builder.append(key);  if (value != null) {    builder.append('=');    if (isQuoted) {      builder.append('\'');    }    builder.append(value);    if (isQuoted) {      builder.append('\'');    }  }  return builder;}  }
class C{  public void add(HDR sipheader,boolean top){  if (top)   this.addFirst(sipheader); else   this.add(sipheader);}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (changeSupport == null || (oldValue != null && newValue != null && oldValue.equals(newValue))) {    return;  }  changeSupport.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  public static Date adddMonths(int numOfMonths){  return addMonths(new Date(),numOfMonths);}  }
class C{  private ConfirmCode askForConfirmation(){  ConfirmCode returnValue;  println();  println();  final LocalizableMessage[] msgs=new LocalizableMessage[]{INFO_INSTALLDS_CONFIRM_INSTALL.get(),INFO_INSTALLDS_PROVIDE_DATA_AGAIN.get(),INFO_INSTALLDS_PRINT_EQUIVALENT_COMMAND_LINE.get(),INFO_INSTALLDS_CANCEL.get()};  final MenuBuilder<ConfirmCode> builder=new MenuBuilder<>(this);  builder.setPrompt(INFO_INSTALLDS_CONFIRM_INSTALL_PROMPT.get());  int i=0;  for (  final ConfirmCode code : ConfirmCode.values()) {    builder.addNumberedOption(msgs[i],MenuResult.success(code));    i++;  }  builder.setDefault(LocalizableMessage.raw(String.valueOf(ConfirmCode.CONTINUE.getReturnCode())),MenuResult.success(ConfirmCode.CONTINUE));  final Menu<ConfirmCode> menu=builder.toMenu();  try {    final MenuResult<ConfirmCode> m=menu.run();    if (m.isSuccess()) {      returnValue=m.getValue();    } else {      throw new RuntimeException();    }  } catch (  final ClientException ce) {    returnValue=ConfirmCode.CANCEL;    logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));  }  return returnValue;}  }
class C{  public String toString(){synchronized (lock) {    return new String(buf,0,count);  }}  }
class C{  private void adjust_table(){  table_model=new ViaTableModel(board_frame,resources);  table=new JTable(table_model);  main_panel.remove(scroll_pane);  add_table();  pack();  board_frame.refresh_windows();}  }
class C{  private PooledSoftReference<T> findReference(final T obj){  final Iterator<PooledSoftReference<T>> iterator=allReferences.iterator();  while (iterator.hasNext()) {    final PooledSoftReference<T> reference=iterator.next();    if (reference.getObject() != null && reference.getObject().equals(obj)) {      return reference;    }  }  return null;}  }
class C{  static void b64from24bit(byte b2,byte b1,byte b0,int outLen,StringBuilder buffer){  int w=((b2 << 16) & 0x00ffffff) | ((b1 << 8) & 0x00ffff) | (b0 & 0xff);  int n=outLen;  while (n-- > 0) {    buffer.append(B64T.charAt(w & 0x3f));    w>>=6;  }}  }
class C{  public HttpException(final String message,final Throwable cause){  super(message);  ExceptionUtils.initCause(this,cause);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String version="";  String version1="1.0";  String version2="2.0";  String featureCore;  String featureXML;  boolean success;  java.util.List featuresXML=new java.util.ArrayList();  featuresXML.add("XML");  featuresXML.add("xmL");  java.util.List featuresCore=new java.util.ArrayList();  featuresCore.add("Core");  featuresCore.add("CORE");  doc=(Document)load("staffNS",false);  element=doc.getDocumentElement();  for (int indexN10063=0; indexN10063 < featuresXML.size(); indexN10063++) {    featureXML=(String)featuresXML.get(indexN10063);    success=element.isSupported(featureXML,version);    assertTrue("nodeissupported01_XML1",success);    success=element.isSupported(featureXML,version1);    assertTrue("nodeissupported01_XML2",success);  }  for (int indexN1007C=0; indexN1007C < featuresCore.size(); indexN1007C++) {    featureCore=(String)featuresCore.get(indexN1007C);    success=element.isSupported(featureCore,version);    assertTrue("nodeissupported01_Core1",success);    success=element.isSupported(featureCore,version1);    success=element.isSupported(featureCore,version2);    assertTrue("nodeissupported01_Core3",success);  }}  }
class C{  public static Object instantiate(ClassLoader cls,String beanName,BeanContext beanContext,AppletInitializer initializer) throws IOException, ClassNotFoundException {  InputStream ins;  ObjectInputStream oins=null;  Object result=null;  boolean serialized=false;  IOException serex=null;  if (cls == null) {    try {      cls=ClassLoader.getSystemClassLoader();    } catch (    SecurityException ex) {    }  }  final String serName=beanName.replace('.','/').concat(".ser");  if (cls == null)   ins=ClassLoader.getSystemResourceAsStream(serName); else   ins=cls.getResourceAsStream(serName);  if (ins != null) {    try {      if (cls == null) {        oins=new ObjectInputStream(ins);      } else {        oins=new ObjectInputStreamWithLoader(ins,cls);      }      result=oins.readObject();      serialized=true;      oins.close();    } catch (    IOException ex) {      ins.close();      serex=ex;    }catch (    ClassNotFoundException ex) {      ins.close();      throw ex;    }  }  if (result == null) {    Class<?> cl;    try {      cl=ClassFinder.findClass(beanName,cls);    } catch (    ClassNotFoundException ex) {      if (serex != null) {        throw serex;      }      throw ex;    }    if (!Modifier.isPublic(cl.getModifiers())) {      throw new ClassNotFoundException("" + cl + " : no public access");    }    try {      result=cl.newInstance();    } catch (    Exception ex) {      throw new ClassNotFoundException("" + cl + " : "+ ex,ex);    }  }  if (result != null) {    AppletStub stub=null;    if (result instanceof Applet) {      Applet applet=(Applet)result;      boolean needDummies=initializer == null;      if (needDummies) {        final String resourceName;        if (serialized) {          resourceName=beanName.replace('.','/').concat(".ser");        } else {          resourceName=beanName.replace('.','/').concat(".class");        }        URL objectUrl=null;        URL codeBase=null;        URL docBase=null;        if (cls == null) {          objectUrl=ClassLoader.getSystemResource(resourceName);        } else         objectUrl=cls.getResource(resourceName);        if (objectUrl != null) {          String s=objectUrl.toExternalForm();          if (s.endsWith(resourceName)) {            int ix=s.length() - resourceName.length();            codeBase=new URL(s.substring(0,ix));            docBase=codeBase;            ix=s.lastIndexOf('/');            if (ix >= 0) {              docBase=new URL(s.substring(0,ix + 1));            }          }        }        BeansAppletContext context=new BeansAppletContext(applet);        stub=(AppletStub)new BeansAppletStub(applet,context,codeBase,docBase);        applet.setStub(stub);      } else {        initializer.initialize(applet,beanContext);      }      if (beanContext != null) {        unsafeBeanContextAdd(beanContext,result);      }      if (!serialized) {        applet.setSize(100,100);        applet.init();      }      if (needDummies) {        ((BeansAppletStub)stub).active=true;      } else       initializer.activate(applet);    } else     if (beanContext != null)     unsafeBeanContextAdd(beanContext,result);  }  return result;}  }
class C{  public int doIDPSingleLogout(Set userSession,String userID,HttpServletRequest request,HttpServletResponse response,boolean isSOAPInitiated,boolean isIDPInitiated,String protocol,String realm,String idpEntityID,String spEntityID,String relayState,String singleLogoutRequestXML,String singleLogoutResponseXML,int currentStatus) throws Exception {  if (relayState == null) {    relayState=EMPTY_STRING;  }  if ((protocolList.isEmpty())) {    debug.message("SingleLogoutManager.doIDPSingleLogour : no handler");    return LOGOUT_NO_ACTION_STATUS;  }  String tmpRelayState=relayState;  if (!relayStateMap.containsKey(relayState)) {    tmpRelayState=getShortRelayState(relayState);    if ((tmpRelayState != null) && !relayStateMap.containsKey(tmpRelayState)) {      tmpRelayState=null;    }  }  if (debug.messageEnabled()) {    debug.message("SingleLogoutManager.doIDPSLO: userID=" + userID + ", protocol="+ protocol+ ", relay="+ relayState+ ", hex relay="+ tmpRelayState);  }  if (tmpRelayState == null) {    tmpRelayState=saveParameters(userSession,userID,isSOAPInitiated,isIDPInitiated,protocol,realm,idpEntityID,spEntityID,relayState,singleLogoutRequestXML,singleLogoutResponseXML,currentStatus);    relayState=getRelayStateURL(request,tmpRelayState);    if (debug.messageEnabled()) {      debug.message("SingleLogoutManager.doIDPSingleLogout : save " + tmpRelayState + ", new relayState="+ relayState);    }  } else {    updateStatus(tmpRelayState,currentStatus);    if (tmpRelayState.equals(relayState)) {      relayState=getRelayStateURL(request,tmpRelayState);    }    if (debug.messageEnabled()) {      debug.message("SingleLogoutManager.doIDPSingleLogout : read " + tmpRelayState + ", nu relayState="+ relayState);    }  }  List list=(List)protocolListMap.get(tmpRelayState);  if ((list == null) || list.isEmpty()) {    return ((Integer)currentStatusMap.get(tmpRelayState)).intValue();  } else {    while (!list.isEmpty()) {      String proto=(String)list.remove(0);      SingleLogoutHandler handler=(SingleLogoutHandler)handlerMap.get(proto);      if (handler == null) {        debug.error("SingleLogoutManager.doIDPSingleLogout: " + "no handler for protocol " + proto);        continue;      }      if (debug.messageEnabled()) {        debug.message("SingleLogoutManager.doIDPSingleLogout: " + " handle protocol " + proto);      }      userSession=(Set)userSessionMap.get(tmpRelayState);      userID=(String)userIDMap.get(tmpRelayState);      isSOAPInitiated=((Boolean)isSOAPInitiatedMap.get(tmpRelayState)).booleanValue();      isIDPInitiated=((Boolean)isIDPInitiatedMap.get(tmpRelayState)).booleanValue();      protocol=(String)origProtocolMap.get(tmpRelayState);      realm=(String)realmMap.get(tmpRelayState);      idpEntityID=(String)idpEntityIDMap.get(tmpRelayState);      spEntityID=(String)spEntityIDMap.get(tmpRelayState);      singleLogoutRequestXML=(String)sloRequestXMLMap.get(tmpRelayState);      currentStatus=((Integer)currentStatusMap.get(tmpRelayState)).intValue();      int status=SingleLogoutManager.LOGOUT_SUCCEEDED_STATUS;      try {        status=handler.doIDPSingleLogout(userSession,userID,request,response,isSOAPInitiated,isIDPInitiated,protocol,realm,idpEntityID,spEntityID,relayState,singleLogoutRequestXML,singleLogoutResponseXML,currentStatus);        if (debug.messageEnabled()) {          debug.message("SingleLogoutManager.doIDPSingleLogout: " + " logout status = " + status + " for "+ proto);        }      } catch (      Exception ex) {        debug.error("SingleLogoutManager.doIDPSingleLogout: error" + " for protocol " + proto,ex);        status=SingleLogoutManager.LOGOUT_FAILED_STATUS;      }      if (status == LOGOUT_REDIRECTED_STATUS) {        return status;      } else {        updateStatus(tmpRelayState,status);      }    }    int retVal=((Integer)currentStatusMap.get(tmpRelayState)).intValue();    if (isSOAPInitiated) {      cleanupParameters(tmpRelayState);    }    return retVal;  }}  }
class C{  public static int sum(int a,int b){  return a + b;}  }
class C{  protected void error(String msg,Object[] args) throws javax.xml.transform.TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);{    throw new XPathException(fmsg,this);  }}  }
class C{  @Override public void onWindowFocusChanged(boolean hasFocus){  super.onWindowFocusChanged(hasFocus);  if (sFullScreenActivity && hasFocus) {    View rootView=getWindow().getDecorView().findViewById(android.R.id.content);    if (rootView != null)     rootView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);  }}  }
class C{  public static double lineDistance(Feature line,String units) throws TurfException {  return lineDistance(line.getGeometry(),units);}  }
class C{  public void startDTD(String arg0,String arg1,String arg2) throws SAXException {}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentgetrootnode.class,args);}  }
class C{  public JsonUser(CryptoService service,String userId){  super(new LinkedHashMap<String,Object>());  this.cryptoService=service;  put(SCIM_USERNAME,userId);}  }
class C{  public FramedRouteAttribute(byte[] octets){  super(octets);  routeString=new String(octets,2,octets.length - 2);}  }
class C{  private static int skipWhiteSpace(String rawdata,int i){  int length=rawdata.length();  if (i < length) {    char c=rawdata.charAt(i);    while ((i < length) && Character.isWhitespace(c)) {      ++i;      c=rawdata.charAt(i);    }  }  return i;}  }
class C{  public Token(byte id,int offset,int length,ParserRuleSet rules){  this.id=id;  this.offset=offset;  this.length=length;  this.rules=rules;}  }
class C{  protected void Basis() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  int axesType;  if (lookahead("::",1)) {    axesType=AxisName();    nextToken();    nextToken();  } else   if (tokenIs('@')) {    axesType=OpCodes.FROM_ATTRIBUTES;    appendOp(2,axesType);    nextToken();  } else {    axesType=OpCodes.FROM_CHILDREN;    appendOp(2,axesType);  }  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  NodeTest(axesType);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public WorldCreator type(WorldType type){  this.type=type;  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.LengthElement createLengthElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.LengthElementImpl();}  }
class C{  private void subtreeRename(DN entryDN,DN newParentDN){  Set<DN> childDNSet=childDNs.remove(entryDN);  DN newEntryDN=newParentDN.child(entryDN.rdn());  Entry oldEntry=entryMap.remove(entryDN);  if (oldEntry == null) {    if (logger.isTraceEnabled()) {      logger.trace("Subtree rename encountered entry DN " + entryDN + " for nonexistent entry.");    }    return;  }  Entry newEntry=oldEntry.duplicate(false);  newEntry.setDN(newEntryDN);  entryMap.put(newEntryDN,newEntry);  Set<DN> parentChildren=childDNs.get(newParentDN);  if (parentChildren == null) {    parentChildren=new HashSet<>();    childDNs.put(newParentDN,parentChildren);  }  parentChildren.add(newEntryDN);  if (childDNSet != null) {    for (    DN childDN : childDNSet) {      subtreeRename(childDN,newEntryDN);    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof YearMonth) {    YearMonth other=(YearMonth)obj;    return year == other.year && month == other.month;  }  return false;}  }
class C{  public Type(String name,String extension){  this.name=name;  this.extension=extension;}  }
class C{  protected boolean validateNodeName(String nodeName){  if (null == nodeName)   return false;  if (nodeName.equals("xmlns"))   return false;  return XML11Char.isXML11ValidQName(nodeName);}  }
class C{  public ByteMatrix(int width,int height){  bytes=new byte[height][];  for (int i=0; i < height; i++) {    bytes[i]=new byte[width];  }  this.width=width;  this.height=height;}  }
class C{  public CallInfoParser(String callInfo){  super(callInfo);}  }
class C{  public static final String toJson(final Object object,final boolean includeNulls){  return includeNulls ? GSON.toJson(object) : GSON_NO_NULLS.toJson(object);}  }
class C{  public Token create(Token token) throws DataLayerException {  Entry entry=conversion.getEntry(token);  try {    getConnection();    Result result=connection.add(LDAPRequests.newAddRequest(entry).addControl(PostReadRequestControl.newControl(true,CoreTokenField.ETAG.toString())));    return tokenWithNewEtag(token,result);  } catch (  LdapException e) {    throw new LdapOperationFailedException(e.getResult());  }}  }
class C{  @Override public void update(){  if (hitStats == 3)   return;  if (hitStats == 2)   immu_star.update(); else   if (hitStats == 1) {    if (tileLoop < 30)     if (tileLoop++ == 1)     this.getSpriteFrame().setTranslateY(this.getSpriteFrame().getTranslateY() - BOUNCE_HEIGHT); else     if (tileLoop == 5)     this.getSpriteFrame().setTranslateY(this.getSpriteFrame().getTranslateY() + BOUNCE_HEIGHT);    this.getSpriteFrame().setImage(playerStates.get(1));    Main.updateScore(200);    parent.getChildren().addAll(immu_star.getSpriteFrame(),immu_star.getSpriteBoundsArray()[1],immu_star.getSpriteBoundsArray()[2],immu_star.getSpriteBoundsArray()[3],immu_star.getSpriteBoundsArray()[4],immu_star.getSpriteBoundsArray()[5]);    this.getSpriteFrame().toFront();    hitStats=2;  }  if (immu_star.completeCycle()) {    hitStats=3;    if (immu_star.getPowerupConsumedStats() && mario.getMarioState() >= 1) {      mario.setSetMarioState(2);      mario.resetAura();      mario.setMidGrowth();    }    parent.getChildren().removeAll(immu_star.getSpriteFrame(),immu_star.getSpriteBoundsArray()[1],immu_star.getSpriteBoundsArray()[2],immu_star.getSpriteBoundsArray()[3],immu_star.getSpriteBoundsArray()[4],immu_star.getSpriteBoundsArray()[5]);    immu_star=null;    parent=null;    tileLoop=0;    mario=null;  }}  }
class C{  protected void tearDown(){}  }
class C{  private static Position[] simplifyRadialDist(Position[] points,double sqTolerance){  Position prevPoint=points[0];  ArrayList<Position> newPoints=new ArrayList<>();  newPoints.add(prevPoint);  Position point=null;  for (int i=1, len=points.length; i < len; i++) {    point=points[i];    if (getSqDist(point,prevPoint) > sqTolerance) {      newPoints.add(point);      prevPoint=point;    }  }  if (prevPoint != point) {    newPoints.add(point);  }  return newPoints.toArray(new Position[newPoints.size()]);}  }
class C{  public synchronized StringBuffer insert(int index,char[] chars){  insert0(index,chars);  return this;}  }
class C{  @NonNull public static Animator createCircularReveal(@NonNull View startView,@NonNull View targetView,@NonNull Interpolator interpolator){  Point center=getCenterForView(startView);  return createCircularReveal(center,startView.getWidth(),targetView,interpolator);}  }
class C{  public static byte[] intToTwoBytes(int i) throws SAML2Exception {  if (i < 0 || i > 65535) {    debug.error("SAML2Utils.intToTwoBytes: wrong index value range.");    throw new SAML2Exception(bundle.getString("wrongInput"));  }  String hexStr=Integer.toHexString(i);  int len=hexStr.length();  String norm=null;  if (len > 4) {    norm=hexStr.substring(0,4);  } else {switch (len) {case 1:      norm="000" + hexStr;    break;case 2:  norm="00" + hexStr;break;case 3:norm="0" + hexStr;break;default :norm=hexStr;}}byte[] bytes=hexStringToByteArray(norm);return bytes;}  }
class C{  public String toMutilLineString(){  final String newLine=System.getProperty("line.separator");  final StringBuffer problemStr=new StringBuffer();  for (  final Problem problem : this.problems) {    problemStr.append(problem.getMessage() + newLine);  }  return problemStr.toString();}  }
class C{  public static boolean isHexDigit(byte b){switch (b) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':    return true;default :  return false;}}  }
class C{  void store(Credential credential){  accessToken=credential.getAccessToken();  refreshToken=credential.getRefreshToken();  expirationTimeMillis=credential.getExpirationTimeMilliseconds();}  }
class C{  public static boolean isValidEmail(String email){  boolean isValidEmail=false;  Pattern pattern=Pattern.compile("^[a-z0-9]+([._\\\\-]*[a-z0-9])*@([a-z0-9]+[-a-z0-9]*[a-z0-9]+.){1,63}[a-z0-9]+$");  isValidEmail=pattern.matcher(email).matches();  return isValidEmail;}  }
class C{  @Override public URL findResource(final String name){  if (log.isDebugEnabled())   log.debug("    findResource(" + name + ")");  checkStateForResourceLoading(name);  URL url=null;  String path=nameToPath(name);  WebResource resource=resources.getClassLoaderResource(path);  if (resource.exists()) {    url=resource.getURL();    trackLastModified(path,resource);  }  if ((url == null) && hasExternalRepositories) {    url=super.findResource(name);  }  if (log.isDebugEnabled()) {    if (url != null)     log.debug("    --> Returning '" + url.toString() + "'"); else     log.debug("    --> Resource not found, returning null");  }  return url;}  }
class C{  public void test_rotateLjava_util_ListI(){  try {    Collections.rotate(null,0);    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  LinkedList list1=new LinkedList();  for (int i=0; i < 10; i++) {    list1.add(objArray[i]);  }  testRotate(list1,"Sequential Access");  ArrayList list2=new ArrayList();  for (int i=0; i < 10; i++) {    list2.add(objArray[i]);  }  testRotate(list2,"Random Access");}  }
class C{  public static int decode(byte[] data,OutputStream out) throws IOException {  int off=0;  int length=data.length;  int endOffset=off + length;  int bytesWritten=0;  while (off < endOffset) {    byte ch=data[off++];    if (ch == '_') {      out.write(' ');    } else     if (ch == '=') {      if (off + 1 >= endOffset) {        throw new IOException("Invalid quoted printable encoding; truncated escape sequence");      }      byte b1=data[off++];      byte b2=data[off++];      if (b1 == '\r') {        if (b2 != '\n') {          throw new IOException("Invalid quoted printable encoding; CR must be followed by LF");        }      } else {        int c1=hexToBinary(b1);        int c2=hexToBinary(b2);        out.write((c1 << UPPER_NIBBLE_SHIFT) | c2);        bytesWritten++;      }    } else {      out.write(ch);      bytesWritten++;    }  }  return bytesWritten;}  }
class C{  public Observable<Void> deleteAllAccountsObservable(){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  deleteAllAccounts(resultHandler.toHandler());  return resultHandler;}  }
class C{  private <C extends ConfigurationClient,S extends Configuration>ServerManagedObject<S> decodeAux(ManagedObjectPath<? super C,? super S> path,ManagedObjectDefinition<C,S> d,Map<PropertyDefinition<?>,SortedSet<?>> properties,DN configDN){  ManagedObjectPath<C,S> newPath=path.asSubType(d);  return new ServerManagedObject<>(newPath,d,properties,configDN,this);}  }
class C{  public String toSessionTokenId(InternalSession session){  return toSessionTokenId(session.getID());}  }
class C{  @Override public void doInitBody() throws JspException {}  }
class C{  private void readConstantPool() throws IOException, ClassFormatException {  constant_pool=new ConstantPool(dataInputStream);}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  int result=ISAuthConstants.LOGIN_IGNORE;  HttpServletRequest request=getHttpServletRequest();  if (request != null && hasWDSSOFailed(request)) {    return ISAuthConstants.LOGIN_IGNORE;  }  if (!getConfigParams()) {    initWindowsDesktopSSOAuth(options);  }  byte[] spnegoToken=getSPNEGOTokenFromHTTPRequest(request);  if (spnegoToken == null) {    spnegoToken=getSPNEGOTokenFromCallback(callbacks);  }  if (spnegoToken == null) {    debug.error("spnego token is not valid.");    throw new AuthLoginException(amAuthWindowsDesktopSSO,"token",null);  }  if (debug.messageEnabled()) {    debug.message("SPNEGO token: \n" + DerValue.printByteArray(spnegoToken,0,spnegoToken.length));  }  final byte[] kerberosToken=parseToken(spnegoToken);  if (kerberosToken == null) {    debug.error("kerberos token is not valid.");    throw new AuthLoginException(amAuthWindowsDesktopSSO,"token",null);  }  if (debug.messageEnabled()) {    debug.message("Kerberos token retrieved from SPNEGO token: \n" + DerValue.printByteArray(kerberosToken,0,kerberosToken.length));  }  try {    authenticateToken(kerberosToken,trustedKerberosRealms);    if (debug.messageEnabled()) {      debug.message("WindowsDesktopSSO kerberos authentication passed succesfully.");    }    result=ISAuthConstants.LOGIN_SUCCEED;  } catch (  PrivilegedActionException pe) {    Exception e=extractException(pe);    if (e instanceof GSSException) {      int major=((GSSException)e).getMajor();      if (major == GSSException.CREDENTIALS_EXPIRED) {        debug.message("Credential expired. Re-establish credential...");        serviceLogin();        try {          authenticateToken(kerberosToken,trustedKerberosRealms);          if (debug.messageEnabled()) {            debug.message("Authentication succeeded with new cred.");            result=ISAuthConstants.LOGIN_SUCCEED;          }        } catch (        Exception ee) {          debug.error("Authentication failed with new cred.Stack Trace",ee);          throw new AuthLoginException(amAuthWindowsDesktopSSO,"auth",null,ee);        }      } else {        debug.error("Authentication failed with PrivilegedActionException wrapped GSSException. Stack Trace",e);        throw new AuthLoginException(amAuthWindowsDesktopSSO,"auth",null,e);      }    }  }catch (  GSSException e1) {    int major=e1.getMajor();    if (major == GSSException.CREDENTIALS_EXPIRED) {      debug.message("Credential expired. Re-establish credential...");      serviceLogin();      try {        authenticateToken(kerberosToken,trustedKerberosRealms);        if (debug.messageEnabled()) {          debug.message("Authentication succeeded with new cred.");          result=ISAuthConstants.LOGIN_SUCCEED;        }      } catch (      Exception ee) {        debug.error("Authentication failed with new cred. Stack Trace",ee);        throw new AuthLoginException(amAuthWindowsDesktopSSO,"auth",null,ee);      }    } else {      debug.error("Authentication failed with GSSException. Stack Trace",e1);      throw new AuthLoginException(amAuthWindowsDesktopSSO,"auth",null,e1);    }  }catch (  AuthLoginException e2) {    debug.error("Authentication failed with AuthLoginException. Stack Trace",e2);    throw e2;  }catch (  Exception e3) {    debug.error("Authentication failed with generic exception. Stack Trace",e3);    throw new AuthLoginException(amAuthWindowsDesktopSSO,"auth",null,e3);  }  return result;}  }
class C{  public DirectoryThread(Runnable target,String threadName){  super(DIRECTORY_THREAD_GROUP,target,threadName);  init();}  }
class C{  public boolean isSiteUp(String siteId){  try {    return getClusterMonitor().isSiteUp(siteId);  } catch (  SessionException e) {    sessionDebug.error("Failed to check isSiteUp for {0}",siteId,e);    return false;  }}  }
class C{  @Override public Foo[] findByField2_PrevAndNext(long fooId,boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=findByPrimaryKey(fooId);  Session session=null;  try {    session=openSession();    Foo[] array=new FooImpl[3];    array[0]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,true);    array[1]=foo;    array[2]=getByField2_PrevAndNext(session,foo,field2,orderByComparator,false);    return array;  } catch (  Exception e) {    throw processException(e);  } finally {    closeSession(session);  }}  }
class C{  public void testSecretKeyFactory03() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    SecretKeyFactory secKF=SecretKeyFactory.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",secKF.getAlgorithm(),validValues[i]);  }}  }
class C{  public String encodeURL(String url,boolean escape,Session session){  return encodeURL(url,escape,sessionCookies.getCookieName(),session);}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public void insert_boolean(boolean value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_boolean",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_boolean(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public Issuer createIssuer(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ISSUER,xml);  if (obj == null) {    return new IssuerImpl(xml);  } else {    return (Issuer)obj;  }}  }
class C{  public void spin(){  lastTimeAnimated=SystemClock.uptimeMillis();  isSpinning=true;  invalidate();}  }
class C{  public synchronized void checkUndeploy(){  SortedSet<String> sortedAppNames=new TreeSet<>();  sortedAppNames.addAll(deployed.keySet());  if (sortedAppNames.size() < 2) {    return;  }  Iterator<String> iter=sortedAppNames.iterator();  ContextName previous=new ContextName(iter.next(),false);  do {    ContextName current=new ContextName(iter.next(),false);    if (current.getPath().equals(previous.getPath())) {      Context previousContext=(Context)host.findChild(previous.getName());      Context currentContext=(Context)host.findChild(current.getName());      if (previousContext != null && currentContext != null && currentContext.getState().isAvailable() && !isServiced(previous.getName())) {        Manager manager=previousContext.getManager();        if (manager != null) {          int sessionCount;          if (manager instanceof DistributedManager) {            sessionCount=((DistributedManager)manager).getActiveSessionsFull();          } else {            sessionCount=manager.getActiveSessions();          }          if (sessionCount == 0) {            if (log.isInfoEnabled()) {              log.info(sm.getString("hostConfig.undeployVersion",previous.getName()));            }            DeployedApplication app=deployed.get(previous.getName());            String[] resources=app.redeployResources.keySet().toArray(new String[0]);            undeploy(app);            deleteRedeployResources(app,resources,-1,true);          }        }      }    }    previous=current;  } while (iter.hasNext());}  }
class C{  public static int countByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().countByUuid_C(uuid,companyId);}  }
class C{  public SQLTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  public void testIsParityAdjusted(){  try {    DESedeKeySpec.isParityAdjusted(null,1);    fail("Should raise an NullPointerException " + "in case of null byte array.");  } catch (  NullPointerException e) {  }catch (  InvalidKeyException e) {    fail("Should raise an NullPointerException " + "in case of null byte array.");  }  byte[] key={1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0};  try {    DESedeKeySpec.isParityAdjusted(key,1);    fail("Should raise an InvalidKeyException " + "in case of short byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  byte[] key_not_pa={1,2,3,4,5,6,7,8,9,0,1,2,1,2,3,4,5,6,7,8,9,0,1,2};  try {    assertFalse("Method returns true when false is expected.",DESedeKeySpec.isParityAdjusted(key_not_pa,0));  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {    fail("Unexpected InvalidKeyException was thrown.");  }  byte[] key_pa={(byte)128,(byte)131,(byte)133,(byte)134,(byte)137,(byte)138,(byte)140,(byte)143,(byte)145,(byte)146,(byte)148,(byte)151,(byte)152,(byte)155,(byte)157,(byte)158,(byte)161,(byte)162,(byte)164,(byte)167,(byte)168,(byte)171,(byte)173,(byte)174};  try {    assertTrue("Method returns false when true is expected.",DESedeKeySpec.isParityAdjusted(key_pa,0));  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {    fail("Unexpected InvalidKeyException was thrown.");  }}  }
class C{  public void removeEntry(SSOToken token,String entryDN,int objectType,boolean recursive,boolean softDelete) throws AMException, SSOException {  super.removeEntry(token,entryDN,objectType,recursive,softDelete);  removeFromCache(entryDN);}  }
class C{  public static final String createWarning(String msgKey,Object args[]){  return createMsg(XSLTBundle,msgKey,args);}  }
class C{  private static boolean isSameReplicationServerUrl(String rs1Url,String rs2Url){  try {    final HostPort hp1=HostPort.valueOf(rs1Url);    final HostPort hp2=HostPort.valueOf(rs2Url);    return hp1.isEquivalentTo(hp2);  } catch (  RuntimeException ex) {    return false;  }}  }
class C{  public static void copy(byte[] input,Writer output,String encoding) throws IOException {  ByteArrayInputStream in=new ByteArrayInputStream(input);  copy(in,output,encoding);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.X509DataType.X509CRL createX509DataTypeX509CRL() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.X509DataTypeImpl.X509CRLImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  NodeList childList;  Node child;  int length;  String value;  Node grandChild;  java.util.List result=new java.util.ArrayList();  java.util.List expectedNormal=new java.util.ArrayList();  expectedNormal.add("1900 Dallas Road");  expectedNormal.add(" Dallas, ");  expectedNormal.add("Texas");  expectedNormal.add("\n 98554");  java.util.List expectedExpanded=new java.util.ArrayList();  expectedExpanded.add("1900 Dallas Road Dallas, Texas\n 98554");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  addressNode=elementList.item(1);  childList=addressNode.getChildNodes();  length=(int)childList.getLength();  for (int indexN1007F=0; indexN1007F < childList.getLength(); indexN1007F++) {    child=(Node)childList.item(indexN1007F);    value=child.getNodeValue();    if ((value == null)) {      grandChild=child.getFirstChild();      assertNotNull("grandChildNotNull",grandChild);      value=grandChild.getNodeValue();      result.add(value);    } else {      result.add(value);    }  }  if (equals(4,length)) {    assertEquals("assertEqNormal",expectedNormal,result);  } else {    assertEquals("assertEqCoalescing",expectedExpanded,result);  }}  }
class C{  boolean partialIsVariable(MultistepExprHolder testee,int lengthToTest){  if (1 == lengthToTest) {    WalkingIterator wi=(WalkingIterator)testee.m_exprOwner.getExpression();    if (wi.getFirstWalker() instanceof FilterExprWalker)     return true;  }  return false;}  }
class C{  public ElementAdapterSet(){  super(comparator);}  }
class C{  public AMSearchResults searchSubGroupContainers(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER),getSearchFilter(AMObject.GROUP_CONTAINER),wildcard,avPairs,searchControl);}  }
class C{  public static void main(final String[] args) throws Exception {  if (args.length != 1) {    System.err.println("Verifies the given class.");    System.err.println("Usage: CheckClassAdapter " + "<fully qualified class name or class file name>");    return;  }  ClassReader cr;  if (args[0].endsWith(".class")) {    cr=new ClassReader(new FileInputStream(args[0]));  } else {    cr=new ClassReader(args[0]);  }  verify(cr,false,new PrintWriter(System.err));}  }
class C{  public SQLiteDatabaseConfiguration(String path,@SQLiteDatabase.OpenFlags int openFlags){  if (path == null) {    throw new IllegalArgumentException("path must not be null.");  }  this.path=path;  label=stripPathForLogs(path);  this.openFlags=openFlags;  maxSqlCacheSize=25;  locale=Locale.getDefault();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.TransformsType createTransformsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.TransformsTypeImpl();}  }
class C{  public InvalidAttributesException(String explanation){  super(explanation);}  }
class C{  private void writeLDIF() throws DirectoryException {  File ldifFile=getFileForPath(ldifFilePath);  File tempFile=new File(ldifFile.getAbsolutePath() + ".new");  File oldFile=new File(ldifFile.getAbsolutePath() + ".old");  LDIFWriter writer;  try {    LDIFExportConfig exportConfig=new LDIFExportConfig(tempFile.getAbsolutePath(),ExistingFileBehavior.OVERWRITE);    writer=new LDIFWriter(exportConfig);  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage m=ERR_LDIF_BACKEND_ERROR_CREATING_FILE.get(tempFile.getAbsolutePath(),currentConfig.dn(),stackTraceToSingleLineString(e));    DirectoryServer.sendAlertNotification(this,ALERT_TYPE_LDIF_BACKEND_CANNOT_WRITE_UPDATE,m);    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),m,e);  }  for (  Entry entry : entryMap.values()) {    try {      writer.writeEntry(entry);    } catch (    Exception e) {      logger.traceException(e);      StaticUtils.close(writer);      LocalizableMessage m=ERR_LDIF_BACKEND_ERROR_WRITING_FILE.get(tempFile.getAbsolutePath(),currentConfig.dn(),stackTraceToSingleLineString(e));      DirectoryServer.sendAlertNotification(this,ALERT_TYPE_LDIF_BACKEND_CANNOT_WRITE_UPDATE,m);      throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),m,e);    }  }  try {    writer.close();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage m=ERR_LDIF_BACKEND_ERROR_CLOSING_FILE.get(tempFile.getAbsolutePath(),currentConfig.dn(),stackTraceToSingleLineString(e));    DirectoryServer.sendAlertNotification(this,ALERT_TYPE_LDIF_BACKEND_CANNOT_WRITE_UPDATE,m);    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),m,e);  }  if (!entryMap.isEmpty() && tempFile.exists() && tempFile.length() == 0) {    LocalizableMessage m=ERR_LDIF_BACKEND_ERROR_EMPTY_FILE.get(tempFile.getAbsolutePath(),currentConfig.dn());    DirectoryServer.sendAlertNotification(this,ALERT_TYPE_LDIF_BACKEND_CANNOT_WRITE_UPDATE,m);    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),m);  }  if (tempFile.exists()) {    try {      oldFile.delete();    } catch (    Exception e) {      logger.traceException(e);    }  }  try {    if (ldifFile.exists()) {      ldifFile.renameTo(oldFile);    }  } catch (  Exception e) {    logger.traceException(e);  }  try {    tempFile.renameTo(ldifFile);  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage m=ERR_LDIF_BACKEND_ERROR_RENAMING_FILE.get(tempFile.getAbsolutePath(),ldifFile.getAbsolutePath(),currentConfig.dn(),stackTraceToSingleLineString(e));    DirectoryServer.sendAlertNotification(this,ALERT_TYPE_LDIF_BACKEND_CANNOT_WRITE_UPDATE,m);    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),m,e);  }}  }
class C{  public boolean isByteValues(){  return byteValues;}  }
class C{  public static Object convertNodeToJAXB(Node node) throws JAXBException {  Unmarshaller u=jaxbContext.createUnmarshaller();  return u.unmarshal(node);}  }
class C{  public MarshalException(String message,String errorCode,Throwable exception){  super(message,errorCode,exception);}  }
class C{  private boolean checkEqualResourceAttributes(final ResourceAttribute ra1,final ResourceAttribute ra2){  if (ra1 == ra2) {    return true;  }  if (ra1 == null && ra2 == null) {    return true;  }  if (ra1 == null || ra2 == null) {    return false;  }  return compareStrings(ra1.getPResponseProviderName(),ra2.getPResponseProviderName()) && compareStrings(ra1.getPropertyName(),ra2.getPropertyName()) && compareSetsOfStrings(ra1.getPropertyValues(),ra2.getPropertyValues());}  }
class C{  protected void writeBody() throws IOException, BadLocationException {  ElementIterator it=getElementIterator();  it.current();  Element next;  writeStartTag("<body>");  boolean inContent=false;  while ((next=it.next()) != null) {    if (!inRange(next)) {      continue;    }    if (next instanceof AbstractDocument.BranchElement) {      if (inContent) {        writeEndParagraph();        inContent=false;        fontMask=0;      }      writeStartParagraph(next);    } else     if (isText(next)) {      writeContent(next,!inContent);      inContent=true;    } else {      writeLeaf(next);      inContent=true;    }  }  if (inContent) {    writeEndParagraph();  }  writeEndTag("</body>");}  }
class C{  public boolean isLocalSite(String siteID){  String localID=getSiteID();  if (localID == null) {    localID=getLocalServerID();  }  return localID.equals(siteID) || getSecondarySiteIDs().contains(siteID);}  }
class C{  private PluggablePublisher createPublisher(){  if (PublisherType.DISRUPTOR.equals(publisherType)) {    logger.debug("Event type: " + stringifiedName + " publisher: DISRUPTOR ");    return DisruptorReferringPublisher.getInstance();  } else {    logger.debug("Event type: " + stringifiedName + " publisher: BLOCKING");    return BlockingPublisher.getInstance();  }}  }
class C{  public static <C extends ConfigurationClient,S extends Configuration>CreateSubCommandHandler<C,S> create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,InstantiableRelationDefinition<C,S> r) throws ArgumentException {  return new CreateSubCommandHandler<>(parser,p,r,r.getNamingPropertyDefinition(),p.child(r,"DUMMY"));}  }
class C{  public void destruct(){  if (null != m_obj) {    allowDetachToRelease(true);    detach();    setObject(null);  }}  }
class C{  boolean validate(Set attrVals,String i18nFileName,boolean encodePassword,Map envParam) throws SMSException {  if ((attrVals == null) || (attrVals.isEmpty())) {    return true;  }  if (!validateType(attrVals,envParam) || !validateSyntax(attrVals,encodePassword)) {    if (debug.messageEnabled()) {      debug.message("Validation Failed for attribute: " + as.getName() + " value:"+ attrVals+ " Env Map: "+ envParam);    }    if (i18nFileName != null) {      String[] args={as.getName(),i18nFileName,as.getI18NKey()};      throw (new InvalidAttributeValueException(IUMSConstants.UMS_BUNDLE_NAME,"sms-attribute-values-does-not-match-schema",args));    } else {      String[] args={as.getName()};      throw (new InvalidAttributeValueException(IUMSConstants.UMS_BUNDLE_NAME,"sms-attribute-values-does-not-match-schema",args));    }  }  return (true);}  }
class C{  public static String hasMain(DataInputStream in){  try {    int magic=in.readInt();    int minorVersion=in.readUnsignedShort();    int majorVersion=in.readUnsignedShort();    ConstantPool pool=new ConstantPool(null,in);    int accessFlag=in.readUnsignedShort();    ClassInfo thisClass=(ClassInfo)pool.get(in.readUnsignedShort());    int superClassIndex=in.readUnsignedShort();    ClassInfo superClassInfo=superClassIndex == 0 ? superClassInfo=null : (ClassInfo)pool.get(superClassIndex);    int interfacesCount=in.readUnsignedShort();    ClassInfo[] interfaces=new ClassInfo[interfacesCount];    for (int i=0; i < interfacesCount; i++)     interfaces[i]=(ClassInfo)pool.get(in.readUnsignedShort());    int fieldCount=in.readUnsignedShort();    for (int i=0; i < fieldCount; i++) {      in.readUnsignedShort();      in.readUnsignedShort();      in.readUnsignedShort();      int attributeCount=in.readUnsignedShort();      for (int j=0; j < attributeCount; ++j) {        in.readUnsignedShort();        int length=in.readInt();        in.skipBytes(length);      }    }    int methodCount=in.readUnsignedShort();    for (int i=0; i < methodCount; i++) {      in.readUnsignedShort();      UTF8Info nameInfo=(UTF8Info)pool.get(in.readUnsignedShort());      String name=nameInfo.toString();      UTF8Info descriptorInfo=(UTF8Info)pool.get(in.readUnsignedShort());      String descriptor=descriptorInfo.toString();      if (name.equals("main") && descriptor.equals("([Ljava/lang/String;)V"))       return thisClass.getName().getText();      int attributeCount=in.readUnsignedShort();      for (int j=0; j < attributeCount; j++) {        in.readUnsignedShort();        int length=in.readInt();        in.skipBytes(length);      }    }  } catch (  Exception e) {    e.printStackTrace();    return null;  }  return null;}  }
class C{  public void add(double x){  Cell[] as;  long b, v;  int m;  Cell a;  if ((as=cells) != null || !casBase(b=base,Double.doubleToRawLongBits(Double.longBitsToDouble(b) + x))) {    boolean uncontended=true;    if (as == null || (m=as.length - 1) < 0 || (a=as[getProbe() & m]) == null || !(uncontended=a.cas(v=a.value,Double.doubleToRawLongBits(Double.longBitsToDouble(v) + x))))     doubleAccumulate(x,null,uncontended);  }}  }
class C{  protected boolean isFileExist(String logName){  String fullPath=debugDirectory + File.separator + logName;  File f=new File(fullPath);  return f.exists() && !f.isDirectory();}  }
class C{  public static NameIDInfo parse(String info) throws SAML2Exception {  if (info == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("nullNameIDInfo"));  }  StringTokenizer st=new StringTokenizer(info,DELIM);  if (st.countTokens() != 9) {    throw new SAML2Exception(SAML2Utils.bundle.getString("inValidNameIDInfo"));  }  String hostEntityID=st.nextToken();  String remoteEntityID=st.nextToken();  String nameIDValue=st.nextToken();  String nameQualifier=st.nextToken();  String format=st.nextToken();  String spNameIDValue=st.nextToken();  String spNameQualifier=st.nextToken();  String role=st.nextToken();  boolean isAffiliation=Boolean.valueOf(st.nextToken()).booleanValue();  NameID nameID=AssertionFactory.getInstance().createNameID();  nameID.setValue(nameIDValue);  if (nameQualifier != null && !NULL.equals(nameQualifier)) {    nameID.setNameQualifier(nameQualifier);  }  if (spNameIDValue != null && !NULL.equals(spNameIDValue)) {    nameID.setSPProvidedID(spNameIDValue);  }  if (spNameQualifier != null && !NULL.equals(spNameQualifier)) {    nameID.setSPNameQualifier(spNameQualifier);  }  if (format != null && !NULL.equals(format)) {    nameID.setFormat(format);  }  return new NameIDInfo(hostEntityID,remoteEntityID,nameID,role,isAffiliation);}  }
class C{  public void addLayoutComponent(String s,Component c){  if (s.equals(VIEWPORT)) {    viewport=(JViewport)addSingletonComponent(viewport,c);  } else   if (s.equals(VERTICAL_SCROLLBAR)) {    vsb=(JScrollBar)addSingletonComponent(vsb,c);  } else   if (s.equals(HORIZONTAL_SCROLLBAR)) {    hsb=(JScrollBar)addSingletonComponent(hsb,c);  } else   if (s.equals(ROW_HEADER)) {    rowHead=(JViewport)addSingletonComponent(rowHead,c);  } else   if (s.equals(COLUMN_HEADER)) {    colHead=(JViewport)addSingletonComponent(colHead,c);  } else   if (s.equals(LOWER_LEFT_CORNER)) {    lowerLeft=addSingletonComponent(lowerLeft,c);  } else   if (s.equals(LOWER_RIGHT_CORNER)) {    lowerRight=addSingletonComponent(lowerRight,c);  } else   if (s.equals(UPPER_LEFT_CORNER)) {    upperLeft=addSingletonComponent(upperLeft,c);  } else   if (s.equals(UPPER_RIGHT_CORNER)) {    upperRight=addSingletonComponent(upperRight,c);  } else {    throw new IllegalArgumentException("invalid layout key " + s);  }}  }
class C{  boolean isOutlineMode(){  return outlineMode;}  }
class C{  private void parseQuery(Node child) throws SAMLException {  NamedNodeMap nm=child.getAttributes();  int len=nm.getLength();  String attrName;  String attrValue;  Attr attr;  boolean found=false;  for (int j=0; j < len; j++) {    attr=(Attr)nm.item(j);    attrName=attr.getLocalName();    if ((attrName != null) && (attrName.equals("type"))) {      attrValue=attr.getNodeValue();      if (attrValue.equals("AuthenticationQueryType")) {        if (contentType != NOT_SUPPORTED) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Request(Element): should" + " contain only one AuthenticationQuery.");          }          throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,"wrongInput",null);        }        contentType=AUTHENTICATION_QUERY;        query=new AuthenticationQuery((Element)child);      } else       if (attrValue.equals("AuthorizationDecisionQueryType")) {        if (contentType != NOT_SUPPORTED) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Request(Element): should " + "contain one " + "AuthorizationDecisionQuery.");          }          throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,"wrongInput",null);        }        contentType=AUTHORIZATION_DECISION_QUERY;        query=new AuthorizationDecisionQuery((Element)child);      } else       if (attrValue.equals("AttributeQueryType")) {        if (contentType != NOT_SUPPORTED) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Request(Element): should " + "contain one AttributeQuery.");          }          throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,"wrongInput",null);        }        contentType=ATTRIBUTE_QUERY;        query=new AttributeQuery((Element)child);      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("Request(Element): This type of" + " " + attrName + " is not supported.");        }        throw new SAMLResponderException(FSUtils.BUNDLE_NAME,"queryNotSupported",null);      }      found=true;      break;    }  }  if (!found) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Request(Element): missing" + " xsi:type definition in " + child.getLocalName());    }    throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,"wrongInput",null);  }}  }
class C{  public boolean isCancel(){  return type == Type.CANCEL;}  }
class C{  private boolean destroy(final K key,final PooledObject<T> toDestroy,final boolean always) throws Exception {  final ObjectDeque<T> objectDeque=register(key);  try {    final boolean isIdle=objectDeque.getIdleObjects().remove(toDestroy);    if (isIdle || always) {      objectDeque.getAllObjects().remove(new IdentityWrapper<>(toDestroy.getObject()));      toDestroy.invalidate();      try {        factory.destroyObject(key,toDestroy);      }  finally {        objectDeque.getCreateCount().decrementAndGet();        destroyedCount.incrementAndGet();        numTotal.decrementAndGet();      }      return true;    }    return false;  }  finally {    deregister(key);  }}  }
class C{  private Expression compileUnary(UnaryOperation unary,int opPos) throws TransformerException {  int rightPos=getFirstChildPos(opPos);  unary.setRight(compile(rightPos));  return unary;}  }
class C{  public void requestPasswordResetState(){  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_RESET_STATE);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  FSUtils.debug.message("Entered FSRegistrationRequestServlet Init");  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] copyOfRange(T[] original,int from,int to){  return copyOfRange(original,from,to,(Class<? extends T[]>)original.getClass());}  }
class C{  public Dimension preferredLayoutSize(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    int w=0;    int h=0;    for (int i=0; i < ncomponents; i++) {      Component comp=parent.getComponent(i);      Dimension d=comp.getPreferredSize();      if (d.width > w) {        w=d.width;      }      if (d.height > h) {        h=d.height;      }    }    return new Dimension(insets.left + insets.right + w+ hgap * 2,insets.top + insets.bottom + h+ vgap * 2);  }}  }
class C{  @AfterClass public void shutdown(){  TestPasswordValidator.clearInstanceAfterTests();}  }
class C{  @Override public void close() throws IOException {  try {    super.close();  }  finally {    this.branch.close();  }}  }
class C{  public void testCertificateFactory05() throws CertificateException, NoSuchProviderException {  if (!X509Support) {    fail(NotSupportMsg);    return;  }  CertificateFactory certF;  for (int i=0; i < validValues.length; i++) {    certF=CertificateFactory.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect type",certF.getType(),validValues[i]);    assertEquals("Incorrect provider name",certF.getProvider().getName(),defaultProviderName);  }}  }
class C{  private void makeTunnel(TunnelRequest tunnelRequest) throws IOException {  RawHeaders requestHeaders=tunnelRequest.getRequestHeaders();  while (true) {    out.write(requestHeaders.toBytes());    RawHeaders responseHeaders=RawHeaders.fromBytes(in);switch (responseHeaders.getResponseCode()) {case HTTP_OK:      return;case HTTP_PROXY_AUTH:    requestHeaders=new RawHeaders(requestHeaders);  URL url=new URL("https",tunnelRequest.host,tunnelRequest.port,"/");boolean credentialsFound=HttpAuthenticator.processAuthHeader(route.address.authenticator,HTTP_PROXY_AUTH,responseHeaders,requestHeaders,route.proxy,url);if (credentialsFound) {continue;} else {throw new IOException("Failed to authenticate with proxy");}default :throw new IOException("Unexpected response code for CONNECT: " + responseHeaders.getResponseCode());}}}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  private void write_components(DsnIdentifier p_identifier_type,DsnCoordinateTransform p_coordinate_transform,freert.library.LibPackage p_package) throws IOException {  Collection<BrdItem> board_items=r_board.get_items();  boolean component_found=false;  for (int i=1; i <= r_board.brd_components.count(); ++i) {    board.infos.BrdComponent curr_component=r_board.brd_components.get(i);    if (curr_component.get_package() == p_package) {      boolean undeleted_item_found=false;      Iterator<BrdItem> it=board_items.iterator();      while (it.hasNext()) {        BrdItem curr_item=it.next();        if (curr_item.get_component_no() == curr_component.id_no) {          undeleted_item_found=true;          break;        }      }      if (undeleted_item_found) {        if (!component_found) {          output_file.start_scope();          output_file.write("component ");          p_identifier_type.write(p_package.pkg_name,output_file);          component_found=true;        }        write_component(p_identifier_type,p_coordinate_transform,curr_component);      }    }  }  if (component_found) {    output_file.end_scope();  }}  }
class C{  public void testDatagram() throws Exception {  Reflector reflector=null;  DatagramSocket socket=null;  try {    reflector=new Reflector(1234,InetAddress.getLocalHost());    reflector.start();    byte[] buffer=new byte[256];    DatagramPacket packet=new DatagramPacket(buffer,buffer.length);    socket=new DatagramSocket(2345,InetAddress.getLocalHost());    socket.setSoTimeout(5 * 1000);    for (int i=1; i <= 10; i++) {      String s="Hello, Android world #" + i + "!";      stringToPacket(s,packet);      packet.setAddress(InetAddress.getLocalHost());      packet.setPort(1234);      socket.send(packet);      try {        Thread.sleep(100);      } catch (      InterruptedException ex) {      }      packet.setLength(buffer.length);      socket.receive(packet);      String t=stringFromPacket(packet);      assertEquals(s.toUpperCase(),t);    }  }  finally {    if (reflector != null) {      reflector.alive=false;      reflector.interrupt();      reflector.socket.close();    }    if (socket != null) {      socket.close();    }  }}  }
class C{  public static void sort(float[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public static void createThumb(final File orginFile,final File file,final IConfiguration conf) throws IOException {  BufferedImage image=ImageIO.read(orginFile);  if (image != null) {    Dimension dimension=createThumbDimension(image,conf.getMaxThumbWidth(),conf.getMaxThumbHeight());    FileUtils.createPath(file,conf,true);    if (image.getHeight() == dimension.height && image.getWidth() == dimension.width) {      writeUntouchedImage(orginFile,file);    } else {      resizeImage(image,dimension.width,dimension.height,conf.getThumbsQuality(),file);    }  } else {    if (conf.isDebugMode()) {      throw new IOException("Wrong image file");    }  }}  }
class C{  public boolean isAccessibleFrom(Class<?> lookupClass){  return VerifyAccess.isMemberAccessible(this.getDeclaringClass(),this.getDeclaringClass(),flags,lookupClass,ALL_ACCESS | MethodHandles.Lookup.PACKAGE);}  }
class C{  public void testReceive_NonBlockNoServerChannelClose() throws Exception {  this.channel1.configureBlocking(false);  receiveNoServerChannelClose();}  }
class C{  public AnnotationFormatError(String message){  super(message);}  }
class C{  public synchronized void init(JsonValue config,String... reservedFieldNames) throws HeapException {  this.config=config;  this.properties.bind(config.get("properties").defaultTo(emptyMap()).as(resolvedLocation()).expect(Map.class).as(bindings(getProperties())));  JsonValue heap=config.get("heap").defaultTo(emptyList());  if (heap.isMap()) {    heap=heap.get("objects").required();    logger.warn("The configuration field heap/objects has been deprecated. Heap objects " + "should now be listed directly in the top level \"heap\" field, " + "e.g. { \"heap\" : [ objects... ] }.");  }  for (  JsonValue object : heap.expect(List.class)) {    addDeclaration(object);  }  for (  JsonValue value : defaults) {    String name=value.get("name").required().asString();    if (heaplets.get(name) == null) {      addDeclaration(value);    }  }  int sz=reservedFieldNames.length;  String[] allReservedFieldNames=Arrays.copyOf(reservedFieldNames,sz + 1);  allReservedFieldNames[sz]="heap";  topLevelHandlerDecorator=new GlobalDecorator(null,config,allReservedFieldNames);  if (config.isDefined("globalDecorators")) {    Decorator parentGlobalDecorator=parent != null ? parent.get(GLOBAL_DECORATOR_HEAP_KEY,Decorator.class) : null;    put(GLOBAL_DECORATOR_HEAP_KEY,new GlobalDecorator(parentGlobalDecorator,config.get("globalDecorators").expect(Map.class)));  }  for (  String name : new ArrayList<>(heaplets.keySet())) {    get(name,Object.class);  }}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy){  startScroll(startX,startY,dx,dy,DEFAULT_DURATION);}  }
class C{  public boolean isExists() throws SSOException {  if (rfcDN == null) {    return false;  }  SSOTokenManager.getInstance().validateToken(token);  if (debug.messageEnabled()) {    debug.message("AMObjectImpl.isExists(): DN=" + entryDN);  }  return dsServices.doesEntryExists(token,entryDN);}  }
class C{  static void testExtend(ClassLoader loader){  Class doubledExtendClass;  Object obj;  try {    doubledExtendClass=loader.loadClass("DoubledExtend");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=doubledExtendClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.out.println("Got expected LinkageError on DE");    return;  }  Base baseRef=(Base)obj;  DoubledExtend de=baseRef.getExtended();  try {    String result;    result=Base.doStuff(de);    System.err.println("ERROR: did not get LinkageError on DE");    System.err.println("(result=" + result + ")");  } catch (  LinkageError le) {    System.out.println("Got expected LinkageError on DE");    return;  }}  }
class C{  public boolean onBackPressed(){  OnBackPressListener currentFragment=(OnBackPressListener)mAdapter.getRegisteredFragment(mPager.getCurrentItem());  if (currentFragment != null) {    if (mSlideBackPressSupport) {      if (!currentFragment.onBackPressed()) {        if (mPager.getCurrentItem() == 0) {          return false;        }        withPreviousSlide(true);        return true;      } else {        return true;      }    } else {      return currentFragment.onBackPressed();    }  }  return false;}  }
class C{  public Set searchStaticGroups(String wildcard,int level) throws AMException, SSOException {  return searchStaticGroups(wildcard,null,level);}  }
class C{  @Override public Member findMemberByName(String name){  Member[] currentMembers=getMembers();  for (int i=0; i < currentMembers.length; i++) {    if (name.equals(currentMembers[i].toString()))     return currentMembers[i];  }  return null;}  }
class C{  public void storeChildren(PrintWriter aWriter,int indent,Object aElement,StoreDescription elementDesc) throws Exception {}  }
class C{  public static void logAbandonResult(AbandonOperation abandonOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logAbandonResult(abandonOperation);  }}  }
class C{  public boolean implies(Permission permission){  if (!(permission instanceof BasicPermission))   return false;  BasicPermission bp=(BasicPermission)permission;  if (bp.getClass() != permClass)   return false;  if (all_allowed)   return true;  String path=bp.getCanonicalName();  Permission x;synchronized (this) {    x=perms.get(path);  }  if (x != null) {    return x.implies(permission);  }  int last, offset;  offset=path.length() - 1;  while ((last=path.lastIndexOf(".",offset)) != -1) {    path=path.substring(0,last + 1) + "*";synchronized (this) {      x=perms.get(path);    }    if (x != null) {      return x.implies(permission);    }    offset=last - 1;  }  return false;}  }
class C{  public static void fill(char[] a,int fromIndex,int toIndex,char val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return XBoolean.S_FALSE;}  }
class C{  public URI normalize(){  if (opaque) {    return this;  }  String normalizedPath=normalize(path,false);  if (path.equals(normalizedPath)) {    return this;  }  URI result=duplicate();  result.path=normalizedPath;  result.setSchemeSpecificPart();  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  Attr streetAttr;  String value;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("street");  streetAttr=testEmployee.setAttributeNode(newAttribute);  value=streetAttr.getValue();  assertEquals("streetNo","No",value);}  }
class C{  public ModifyDNRequestProtocolOp(ByteString entryDN,ByteString newRDN,boolean deleteOldRDN,ByteString newSuperior){  this.entryDN=entryDN;  this.newRDN=newRDN;  this.deleteOldRDN=deleteOldRDN;  this.newSuperior=newSuperior;}  }
class C{  public XMLFilter newXMLFilter(Source src) throws TransformerConfigurationException {  Templates templates=newTemplates(src);  if (templates == null)   return null;  return newXMLFilter(templates);}  }
class C{  public void testMovePointLeftPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int shift=18;  int resScale=46;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointLeft(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(a));}  }
class C{  private void breakBarrier(){  generation.broken=true;  count=parties;  trip.signalAll();}  }
class C{  public static Metrics isBoring(LayoutContext layoutContext,CharSequence text,TextPaint paint,TextDirectionHeuristic textDir,Metrics metrics){  char[] temp=TextUtils.obtain(500);  int length=text.length();  boolean boring=true;  outer:   for (int i=0; i < length; i+=500) {    int j=i + 500;    if (j > length)     j=length;    TextUtils.getChars(text,i,j,temp,0);    int n=j - i;    for (int a=0; a < n; a++) {      char c=temp[a];      if (c == '\n' || c == '\t' || c >= FIRST_RIGHT_TO_LEFT) {        boring=false;        break outer;      }    }    if (textDir != null && textDir.isRtl(temp,0,n)) {      boring=false;      break outer;    }  }  TextUtils.recycle(temp);  if (boring && text instanceof Spanned) {    Spanned sp=(Spanned)text;    Object[] styles=sp.getSpans(0,length,ParagraphStyle.class);    if (styles.length > 0) {      boring=false;    }  }  if (boring) {    Metrics fm=metrics;    if (fm == null) {      fm=new Metrics();    }    TextLine line=TextLine.obtain();    line.set(layoutContext,paint,text,0,length,DIR_LEFT_TO_RIGHT,DIRS_ALL_LEFT_TO_RIGHT,false,null);    fm.width=(int)Math.ceil(line.metrics(fm));    TextLine.recycle(line);    return fm;  } else {    return null;  }}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  private boolean matchFilterAttributeValue(AttributeType attrType,ByteString value,SearchFilter filter){  Attribute attr=Attributes.create(attrType,value);  Entry e=new Entry(DN.rootDN(),null,null,null);  e.addAttribute(attr,new ArrayList<ByteString>());  try {    return filter.matchesEntry(e);  } catch (  DirectoryException ex) {    return false;  }}  }
class C{  public LoginLATPortAttribute(String latPort){  super(OctetUtils.toOctets(AttributeType.LOGIN_LAT_PORT,latPort));  this.latPort=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  public static void main(String args[]){  final MBeanServer server;  final ObjectName htmlObjName;  final ObjectName snmpObjName;  final ObjectName sunMibObjName;  final ObjectName forgerockCtsMibObjName;  final ObjectName forgerockPolicyMibObjName;  final ObjectName forgerockSessionMibObjName;  final ObjectName trapGeneratorObjName;  int htmlPort=8082;  int snmpPort=11161;  if ((args.length != 0) && (args.length != 1)) {    usage();    java.lang.System.exit(1);  } else   if (args.length == 1) {    try {      nbTraps=(new Integer(args[0])).intValue();      if (nbTraps < 0) {        usage();        System.exit(1);      }    } catch (    java.lang.NumberFormatException e) {      usage();      System.exit(1);    }  }  try {    List<MBeanServer> servers=MBeanServerFactory.findMBeanServer(null);    if ((servers != null) && !servers.isEmpty()) {      server=servers.get(0);    } else {      server=MBeanServerFactory.createMBeanServer();    }    String domain=server.getDefaultDomain();    htmlObjName=new ObjectName(domain + ":class=HtmlAdaptorServer,protocol=html,port=" + htmlPort);    println("Adding HTML adaptor to MBean server with name \n    " + htmlObjName);    println("NOTE: HTML adaptor is bound on TCP port " + htmlPort);    HtmlAdaptorServer htmlAdaptor=new HtmlAdaptorServer(htmlPort);    server.registerMBean(htmlAdaptor,htmlObjName);    htmlAdaptor.start();    snmpPort=11161;    snmpObjName=new ObjectName(domain + ":class=SnmpAdaptorServer,protocol=snmp,port=" + snmpPort);    println("Adding SNMP adaptor to MBean server with name \n    " + snmpObjName);    println("NOTE: SNMP Adaptor is bound on UDP port " + snmpPort);    snmpAdaptor=new SnmpAdaptorServer(snmpPort);    server.registerMBean(snmpAdaptor,snmpObjName);    snmpAdaptor.start();    print("NOTE: Sending a coldStart SNMP trap" + " to each destination defined in the ACL file...");    snmpAdaptor.setTrapPort(new Integer(snmpPort + 1));    snmpAdaptor.snmpV1Trap(0,0,null);    println("Done.");    try {      JMXServiceURL url=new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:9999/server");      JMXConnectorServer cs=JMXConnectorServerFactory.newJMXConnectorServer(url,null,server);      cs.start();    } catch (    Exception ex) {      println("Error starting RMI : execute rmiregistry 9999; ex=" + ex);    }    sunMibObjName=new ObjectName("snmp:class=SUN_OPENSSO_SERVER_MIB");    println("Adding SUN_OPENSSO_SERVER_MIB-MIB to MBean server with name" + "\n    " + sunMibObjName);    SUN_OPENSSO_SERVER_MIB mib2=new SUN_OPENSSO_SERVER_MIB();    server.registerMBean(mib2,sunMibObjName);    forgerockCtsMibObjName=new ObjectName("snmp:class=FORGEROCK_OPENAM_CTS_MIB");    println("Adding FORGEROCK_OPENAM_CTS_MIB-MIB to MBean server with name" + "\n    " + forgerockCtsMibObjName);    forgerockPolicyMibObjName=new ObjectName("snmp:class=FORGEROCK_OPENAM_POLICY_MIB");    println("Adding FORGEROCK_OPENAM_POLICY_MIB-MIB to MBean server with name" + "\n    " + forgerockPolicyMibObjName);    forgerockSessionMibObjName=new ObjectName("snmp:class=FORGEROCK_OPENAM_SESSION_MIB");    println("Adding FORGEROCK_OPENAM_SESSION_MIB-MIB to MBean server with name" + "\n    " + forgerockSessionMibObjName);    FORGEROCK_OPENAM_CTS_MIB mib3=new FORGEROCK_OPENAM_CTS_MIB();    server.registerMBean(mib3,forgerockCtsMibObjName);    FORGEROCK_OPENAM_POLICY_MIB mib4=new FORGEROCK_OPENAM_POLICY_MIB();    server.registerMBean(mib4,forgerockPolicyMibObjName);    FORGEROCK_OPENAM_SESSION_MIB mib5=new FORGEROCK_OPENAM_SESSION_MIB();    server.registerMBean(mib5,forgerockSessionMibObjName);    mib2.setSnmpAdaptor(snmpAdaptor);    int ifIndex=1;    trapGeneratorObjName=new ObjectName("trapGenerator" + ":class=LinkTrapGenerator,ifIndex=" + ifIndex);    println("Adding LinkTrapGenerator to MBean server with name" + "\n    " + trapGeneratorObjName);    LinkTrapGenerator trapGenerator=new LinkTrapGenerator(nbTraps);    server.registerMBean(trapGenerator,trapGeneratorObjName);    println("\n>> Press <Enter> if you want to start sending traps.");    println("   -or-");    println(">> Press <Ctrl-C> if you want to stop this agent.");    System.in.read();    trapGenerator.start();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void paintPasswordFieldBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public <X extends Throwable>int orElseThrow(Supplier<X> exceptionSupplier) throws X {  if (isPresent) {    return value;  } else {    throw exceptionSupplier.get();  }}  }
class C{  public void callEvent(Event event){  if (event.isAsynchronous()) {    if (Thread.holdsLock(this)) {      throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code.");    }    if (server.isPrimaryThread()) {      throw new IllegalStateException(event.getEventName() + " cannot be triggered asynchronously from primary server thread.");    }    fireEvent(event);  } else {synchronized (this) {      fireEvent(event);    }  }}  }
class C{  private void addChildView(View view,int newWidth){  mRow.addView(view);  resizeRow(newWidth,view);}  }
