class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.defaultPaint=SerialUtilities.readPaint(stream);}  }
class C{  public static <A>ObservableTValue<A> of(final AnyMValue<? extends Observable<A>> obs){  return new ObservableTValue<>(obs);}  }
class C{  final SolrInputDocument doc(SolrInputField... fields){  SolrInputDocument d=new SolrInputDocument();  for (  SolrInputField f : fields) {    d.put(f.getName(),f);  }  return d;}  }
class C{  void validateNumber(int i,int ofs,String name,int min,int max) throws ParseException {  if (i < min || i > max) {    throwInvalid(name,ofs);  }}  }
class C{  public void copy(){  Clipboard.clear();  setNumberOfPastes(0);  setBeginPosition(SimnetUtils.getUpperLeft((ArrayList)getSelectedModelElements()));  ArrayList deepCopy=CopyPaste.getCopy(this.getNetwork(),(ArrayList)getSelectedModelElements());  Clipboard.add(deepCopy);}  }
class C{  private boolean preWrite(BinaryWriterExImpl writer,Object obj){  if (writer.tryWriteAsHandle(obj))   return false;  writer.preWrite(registered ? null : cls.getName());  return true;}  }
class C{  @SuppressWarnings("unchecked") private <T extends Element>Collection<T> castElementCollection(Object obj){  return (Collection<T>)obj;}  }
class C{  public void openStore(){  PointerRef pStore=new PointerRef();  int error=VecsAdapter.VecsOpenCertStoreHW(_serverHandle.getHandle(),_storeName,null,pStore);  BAIL_ON_ERROR(error,"Opening store '%s' failed. [Server: %s, User: %s]",_storeName,_serverName,_userName);  _storeHandle=pStore;}  }
class C{  public static boolean isDouble(String s,boolean allowNegative,boolean allowPositive,int minDecimal,int maxDecimal){  if (isEmpty(s))   return defaultEmptyOK;  try {    double temp=Double.parseDouble(s);    if (!allowNegative && temp < 0)     return false;    if (!allowPositive && temp > 0)     return false;    int decimalPoint=s.indexOf(".");    if (decimalPoint == -1) {      if (minDecimal > 0)       return false;      return true;    }    int numDecimals=s.length() - decimalPoint - 1;    if (minDecimal >= 0 && numDecimals < minDecimal)     return false;    if (maxDecimal >= 0 && numDecimals > maxDecimal)     return false;    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public static Vec4 fromArray4(double[] array,int offset){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return fromDoubleArray(array,offset,4);}  }
class C{  public Tool(String specDir,String specFile,String configFile,FilenameToStream resolver){  super(specDir,specFile,configFile,resolver);  this.actions=null;  this.callStack=null;}  }
class C{  private void invoke(ExtendedCommunicationInterface commInterface) throws BaseCollectionException {  commInterface.injectDBClient(_dbClient);  commInterface.injectCoordinatorClient(_coordinator);  commInterface.injectNetworkDeviceController(_networkDeviceController);  commInterface.injectControllerLockingService(_locker);  commInterface.injectTaskCompleter(_completer);  if (_accessProfile.getProfileName().equalsIgnoreCase(ControllerServiceImpl.SCANNER)) {    commInterface.scan(_accessProfile);  } else   if (ControllerServiceImpl.isDiscoveryJobTypeSupported(_accessProfile.getProfileName())) {    commInterface.discover(_accessProfile);  } else   if (_accessProfile.getProfileName().equalsIgnoreCase(ControllerServiceImpl.ARRAYAFFINITY_DISCOVERY)) {    commInterface.discoverArrayAffinity(_accessProfile);  } else   if (_accessProfile.getProfileName().equalsIgnoreCase(ControllerServiceImpl.METERING)) {    invokeMetering();  } else {    throw new RuntimeException("Unsupported Profile Type :" + _accessProfile.getProfileName());  }}  }
class C{  @Override public void actionPerformed(ActionEvent e){  boolean useRelativePaths=m_relativeCheck.isSelected();  if (e.getSource() == m_AddBut) {    int returnVal=m_FileChooser.showOpenDialog(this);    if (returnVal == JFileChooser.APPROVE_OPTION) {      if (m_FileChooser.isMultiSelectionEnabled()) {        File[] selected=m_FileChooser.getSelectedFiles();        for (        File element : selected) {          if (element.isDirectory()) {            Vector<File> files=new Vector<File>();            getFilesRecursively(element,files);            Collections.sort(files);            for (int j=0; j < files.size(); j++) {              File temp=files.elementAt(j);              if (useRelativePaths) {                try {                  temp=Utils.convertToRelativePath(temp);                } catch (                Exception ex) {                  ex.printStackTrace();                }              }              m_Exp.getDatasets().addElement(temp);            }          } else {            File temp=element;            if (useRelativePaths) {              try {                temp=Utils.convertToRelativePath(temp);              } catch (              Exception ex) {                ex.printStackTrace();              }            }            m_Exp.getDatasets().addElement(temp);          }        }        setButtons(null);      } else {        if (m_FileChooser.getSelectedFile().isDirectory()) {          Vector<File> files=new Vector<File>();          getFilesRecursively(m_FileChooser.getSelectedFile(),files);          Collections.sort(files);          for (int j=0; j < files.size(); j++) {            File temp=files.elementAt(j);            if (useRelativePaths) {              try {                temp=Utils.convertToRelativePath(temp);              } catch (              Exception ex) {                ex.printStackTrace();              }            }            m_Exp.getDatasets().addElement(temp);          }        } else {          File temp=m_FileChooser.getSelectedFile();          if (useRelativePaths) {            try {              temp=Utils.convertToRelativePath(temp);            } catch (            Exception ex) {              ex.printStackTrace();            }          }          m_Exp.getDatasets().addElement(temp);        }        setButtons(null);      }    }  } else   if (e.getSource() == m_DeleteBut) {    int[] selected=m_List.getSelectedIndices();    if (selected != null) {      for (int i=selected.length - 1; i >= 0; i--) {        int current=selected[i];        m_Exp.getDatasets().removeElementAt(current);        if (m_Exp.getDatasets().size() > current) {          m_List.setSelectedIndex(current);        } else {          m_List.setSelectedIndex(current - 1);        }      }    }    setButtons(null);  } else   if (e.getSource() == m_EditBut) {    int selected=m_List.getSelectedIndex();    if (selected != -1) {      ViewerDialog dialog=new ViewerDialog(null);      String filename=m_List.getSelectedValue().toString();      int result;      try {        DataSource source=new DataSource(filename);        result=dialog.showDialog(source.getDataSet());        source=null;        System.gc();        if ((result == ViewerDialog.APPROVE_OPTION) && (dialog.isChanged())) {          result=JOptionPane.showConfirmDialog(this,"File was modified - save changes?");          if (result == JOptionPane.YES_OPTION) {            Saver saver=ConverterUtils.getSaverForFile(filename);            saver.setFile(new File(filename));            saver.setInstances(dialog.getInstances());            saver.writeBatch();          }        }      } catch (      Exception ex) {        JOptionPane.showMessageDialog(this,"Error loading file '" + filename + "':\n"+ ex.toString(),"Error loading file",JOptionPane.INFORMATION_MESSAGE);      }    }    setButtons(null);  } else   if (e.getSource() == m_UpBut) {    JListHelper.moveUp(m_List);  } else   if (e.getSource() == m_DownBut) {    JListHelper.moveDown(m_List);  }}  }
class C{  @Override public byte[] bitcoinSerialize(){  if (headerBytesValid && transactionBytesValid) {    Preconditions.checkNotNull(payload,"Bytes should never be null if headerBytesValid && transactionBytesValid");    if (length == payload.length) {      return payload;    } else {      byte[] buf=new byte[length];      System.arraycopy(payload,offset,buf,0,length);      return buf;    }  }  ByteArrayOutputStream stream=new UnsafeByteArrayOutputStream(length == UNKNOWN_LENGTH ? HEADER_SIZE + guessTransactionsLength() : length);  try {    writeHeader(stream);    writeTransactions(stream);  } catch (  IOException e) {  }  return stream.toByteArray();}  }
class C{  public String nearestNeighbourSearchAlgorithmTipText(){  return "The nearest neighbour search algorithm to use (Default: LinearNN).";}  }
class C{  public Set<String> keySet(){  unparcel();  return mMap.keySet();}  }
class C{  public MarkdownDialog(){  super();}  }
class C{  public static double bearingRad(double latS,double lngS,double latE,double lngE){  final double slatS=Math.sin(latS), clatS=MathUtil.sinToCos(latS,slatS);  final double slatE=Math.sin(latE), clatE=MathUtil.sinToCos(latE,slatE);  return Math.atan2(-Math.sin(lngS - lngE) * clatE,clatS * slatE - slatS * clatE * Math.cos(lngS - lngE));}  }
class C{  public static String changeIndent(String code,int indentUnitsToRemove,int tabWidth,int indentWidth,String newIndentString,String lineDelim){  if (tabWidth < 0 || indentWidth < 0 || code == null || indentUnitsToRemove < 0 || newIndentString == null || lineDelim == null) {    throw new IllegalArgumentException();  }  try {    LineTracker tracker=new DefaultLineTracker();    tracker.set(code);    int nLines=tracker.getNumberOfLines();    if (nLines == 1) {      return code;    }    StringBuffer buf=new StringBuffer();    for (int i=0; i < nLines; i++) {      Region region=tracker.getLineInformation(i);      int start=region.getOffset();      int end=start + region.getLength();      String line=code.substring(start,end);      if (i == 0) {        buf.append(line);      } else {        buf.append(lineDelim);        buf.append(newIndentString);        if (indentWidth != 0) {          buf.append(trimIndent(line,indentUnitsToRemove,tabWidth,indentWidth));        } else {          buf.append(line);        }      }    }    return buf.toString();  } catch (  BadLocationException e) {    return code;  }}  }
class C{  public static void showFeedbackDialog(final List<String> selectedValuesList,final List<DownloadFileDescription> maps){  if (selectedValuesList.isEmpty()) {    return;  }  final Optional<DownloadFileDescription> mapSelection=findFirstSelectedMap(selectedValuesList,maps);  if (mapSelection.isPresent()) {    final String feedbackURL=mapSelection.get().getFeedbackUrl();    SwingComponents.newOpenUrlConfirmationDialog(feedbackURL);  } else {    SwingComponents.newMessageDialog("To open the map feedback from in your web browser, please first select a map title, and then click the feedback button again.");  }}  }
class C{  public boolean isNegated(){  return negated;}  }
class C{  public static Tree createStanfordTree(ROOT root){  return createStanfordTree(root,new LabeledScoredTreeFactory(CoreLabel.factory()));}  }
class C{  private static String stripNonCharCodepoints(String input){  StringBuilder stripped=new StringBuilder(input.length());  char ch;  for (int i=0; i < input.length(); i++) {    ch=input.charAt(i);    if (ch % 0x10000 != 0xffff && ch % 0x10000 != 0xfffe && (ch <= 0xfdd0 || ch >= 0xfdef) && (ch > 0x1F || ch == 0x9 || ch == 0xa || ch == 0xd)) {      stripped.append(ch);    }  }  return stripped.toString();}  }
class C{  @Override public String toString(boolean withMask){  StringBuffer sb=new StringBuffer();  for (  Map.Entry<String,String> entry : getProperties().entrySet()) {    sb.append(entry.getKey());    sb.append(ENCODING_EQUAL);    if (entry.getKey().equals(ConfigService.CERTIFICATE_VERSION)) {      sb.append(entry.getValue());    } else     if (withMask) {      sb.append(HIDDEN_TEXT_MASK);    } else {      sb.append(entry.getValue());    }    sb.append(ENCODING_NEWLINE);  }  return sb.toString();}  }
class C{  public URI createProject(URI tenantOrgId,KeystoneTenant tenant){  ProjectParam projectParam=new ProjectParam(tenant.getName() + CinderConstants.PROJECT_NAME_SUFFIX);  ProjectElement projectResp=_internalTenantServiceClient.createProject(tenantOrgId,projectParam);  return projectResp.getId();}  }
class C{  public static List<ScanResult> scan(){  return WifiAdmin.getInstance().scan();}  }
class C{  public static String packageToPath(String packageName){  return packageName.replace('.',File.separatorChar);}  }
class C{  public CountFIdx(int count,int fidx){  this.count=count;  this.fidx=fidx;}  }
class C{  private Object loadState() throws IOException, ClassNotFoundException {  ObjectInputStream ois=null;  try {    ois=new ObjectInputStream(new BufferedInputStream(new FileInputStream(stateFile)));    return ois.readObject();  }  finally {    if (ois != null) {      ois.close();    }  }}  }
class C{  public boolean updateLast(ConfigBlock last){  if (last == null)   return false;  if (this.startingConfig == null) {    this.startingConfig=last;    return true;  }  ConfigBlock prev=this.lastCheckedConfig;  if (prev == null)   prev=this.startingConfig;  Map<String,String> diffMap=new TreeMap<String,String>();  Map<String,String> prevMap=prev.getVariables();  Map<String,String> lastMap=last.getVariables();  for (  Map.Entry<String,String> e : lastMap.entrySet()) {    String key=e.getKey();    String val=e.getValue();    if (EXCLUDE_ENTRIES.containsKey(key))     continue;    if (val == null)     val="";    if (!prevMap.containsKey(key)) {      diffMap.put(key,val);    } else {      String oldVal=prevMap.get(key);      if (oldVal == null)       oldVal="";      if (!val.equals(oldVal)) {        diffMap.put(key,val);        diffMap.put("+-" + key,oldVal);      }    }  }  for (  Map.Entry<String,String> e : prevMap.entrySet()) {    String key=e.getKey();    String val=e.getValue();    if (EXCLUDE_ENTRIES.containsKey(key))     continue;    if (!lastMap.containsKey(key))     diffMap.put("-" + key,val);  }  if (diffMap.size() == 0)   return false;  this.lastCheckedConfig=last;  ConfigBlock cb=new ConfigBlock();  cb.setTime(last.getTime());  cb.setVariables(diffMap);  this.changes.add(cb);  return true;}  }
class C{  public static double exp(double x){  x=1d + x / 256d;  x*=x;  x*=x;  x*=x;  x*=x;  x*=x;  x*=x;  x*=x;  x*=x;  return x;}  }
class C{  protected boolean handleMovement(final RPEntity entity){  return true;}  }
class C{  public boolean isDSeparated(Node x,Node y,List<Node> z){  if (z == null) {    throw new NullPointerException();  }  for (  Node aZ : z) {    if (aZ == null) {      throw new NullPointerException();    }  }  return getGraph().isDSeparatedFrom(x,y,z);}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  DistinctCountBigDecimalAggregatorObjectSet distinctCountBigDecimalAggregatorObjectSet=(DistinctCountBigDecimalAggregatorObjectSet)aggregator;  agg(distinctCountBigDecimalAggregatorObjectSet.valueSetForObj);}  }
class C{  @Override public void load(Element element,Object o){  Editor ed=(Editor)o;  AnalogClock2Display l=new AnalogClock2Display(ed);  int x=0;  int y=0;  double scale=1.0;  Colors color=Colors.Black;  try {    x=element.getAttribute("x").getIntValue();    y=element.getAttribute("y").getIntValue();    if (element.getAttribute("scale") != null) {      scale=element.getAttribute("scale").getDoubleValue();    }    if (element.getAttribute("color") != null) {      color=Colors.valueOf(element.getAttribute("color").getValue());    }  } catch (  org.jdom2.DataConversionException e) {    log.error("failed to convert positional attribute");  }  if (element.getAttribute("link") != null) {    l.setUrl(element.getAttribute("link").getValue());  }  l.setOpaque(false);  l.update();  l.setLocation(x,y);  if (scale != 1.0 && 10.0 > scale && scale > 0.1) {    l.setScale(scale);  }  l.setColor(color);  l.setDisplayLevel(Editor.CLOCK);  ed.putItem(l);}  }
class C{  public void execCommand(String cmd) throws IOException {  if (cmd == null)   throw new IllegalArgumentException("cmd argument may not be null");synchronized (this) {    if (flag_closed)     throw new IOException("This session is closed.");    if (flag_execution_started)     throw new IOException("A remote execution has already started.");    flag_execution_started=true;  }  cm.requestExecCommand(cn,cmd);}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  private BoxRenderer(float dotsPerPoint,int dotsPerPixel){  this();  init(dotsPerPoint,dotsPerPixel);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecommentnodetype.class,args);}  }
class C{  @Override public void onValueSelected(int pickerIndex,int newValue,boolean autoAdvance){switch (pickerIndex) {case HOUR_INDEX:    if (mAllowAutoAdvance && autoAdvance) {      updateHeaderHour(newValue,false);      setCurrentItemShowing(MINUTE_INDEX,true,false);      ViewCompatUtils.announceForAccessibility(mDelegator,newValue + ". " + mSelectMinutes);    } else {      updateHeaderHour(newValue,true);    }  break;case MINUTE_INDEX:updateHeaderMinute(newValue,true);break;case AMPM_INDEX:updateAmPmLabelStates(newValue);break;case ENABLE_PICKER_INDEX:if (!isTypedTimeFullyLegal()) {mTypedTimes.clear();}finishKbMode();break;}if (mOnTimeChangedListener != null) {mOnTimeChangedListener.onTimeChanged(mDelegator,getCurrentHour(),getCurrentMinute());}}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return AddStatListenerResponse.create(dm,this.getSender(),this.resourceId,this.statName);}  }
class C{  private void createStoragePool(DbClient dbClient,StorageSystem device,CIMInstance poolInstance,String poolClassName,String supportedVolumeTypes,Set<String> protocols,Map<URI,StoragePool> poolsToMatchWithVpool,List<StoragePool> newPoolList,List<StoragePool> updatePoolList) throws URISyntaxException, IOException {  boolean newPool=false;  boolean modifiedPool=false;  String nativeId=getCIMPropertyValue(poolInstance,POOL_ID);  String poolName=getCIMPropertyValue(poolInstance,SmisConstants.CP_ELEMENT_NAME);  StoragePool pool=checkStoragePoolExistsInDB(nativeId,dbClient,device);  if (null == pool) {    newPool=true;    pool=new StoragePool();    pool.setId(URIUtil.createId(StoragePool.class));    pool.setPoolClassName(poolClassName);    pool.setNativeId(nativeId);    pool.setStorageDevice(device.getId());    pool.setPoolServiceType(PoolServiceType.block.toString());    String poolNativeGuid=NativeGUIDGenerator.generateNativeGuid(dbClient,pool);    pool.setNativeGuid(poolNativeGuid);    pool.setLabel(poolNativeGuid);    pool.setMaximumThickVolumeSize(0L);    pool.setMinimumThickVolumeSize(0L);    pool.setMaximumThinVolumeSize(0L);    pool.setMinimumThinVolumeSize(0L);    _logger.info(String.format("Maximum default limits for volume capacity in storage pool: %s  %n   max thin volume capacity: %s, max thick volume capacity: %s ",pool.getId(),pool.getMaximumThinVolumeSize(),pool.getMaximumThickVolumeSize()));    pool.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    Set<String> diskDrives=new HashSet<String>();    if (device.getModel().equalsIgnoreCase("A14")) {      diskDrives.add(SupportedDriveTypeValues.SATA.name());    } else {      diskDrives.add(SupportedDriveTypeValues.SAS.name());    }    pool.addDriveTypes(diskDrives);  }  String subscribedCapacity=getCIMPropertyValue(poolInstance,IBM_SUBSCRIBEDCAPACITY);  if (null != subscribedCapacity) {    pool.setSubscribedCapacity(ControllerUtils.convertBytesToKBytes(subscribedCapacity));  }  pool.setFreeCapacity(SmisUtils.getFreeCapacity(poolInstance));  pool.setTotalCapacity(SmisUtils.getTotalCapacity(poolInstance));  pool.setPoolName(poolName);  String operationalStatus=determineOperationalStatus(poolInstance);  if (!newPool && (ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getOperationalStatus(),operationalStatus) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getProtocols(),protocols) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getSupportedResourceTypes(),supportedVolumeTypes)) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getDiscoveryStatus(),DiscoveredDataObject.DiscoveryStatus.VISIBLE.name())) {    modifiedPool=true;  }  pool.addProtocols(protocols);  pool.setOperationalStatus(operationalStatus);  pool.setSupportedResourceTypes(supportedVolumeTypes);  pool.setDiscoveryStatus(DiscoveredDataObject.DiscoveryStatus.VISIBLE.name());  if (newPool) {    newPoolList.add(pool);    poolsToMatchWithVpool.put(pool.getId(),pool);  } else {    updatePoolList.add(pool);    if (modifiedPool) {      poolsToMatchWithVpool.put(pool.getId(),pool);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment newDocFragment;  NodeList children;  int length;  String newDocFragmentName;  int newDocFragmentType;  String newDocFragmentValue;  doc=(Document)load("staff",true);  newDocFragment=doc.createDocumentFragment();  children=newDocFragment.getChildNodes();  length=(int)children.getLength();  assertEquals("length",0,length);  newDocFragmentName=newDocFragment.getNodeName();  assertEquals("name","#document-fragment",newDocFragmentName);  newDocFragmentType=(int)newDocFragment.getNodeType();  assertEquals("type",11,newDocFragmentType);  newDocFragmentValue=newDocFragment.getNodeValue();  assertNull("value",newDocFragmentValue);}  }
class C{  private void drawAxisLine(){  if (axisConfig.drawXAxis()) {    final int x1=canvas.getInnerLeftPos();    final int x2=canvas.getInnerRightPos();    final int y=axisConfig.getxAxisPos();    base.drawLine(x1,y,x2,y);  }  if (axisConfig.drawYAxis()) {    final int x=axisConfig.getyAxisPos();    final int y1=canvas.getInnerUpPos();    final int y2=canvas.getInnerDownPos();    base.drawLine(x,y1,x,y2);  }}  }
class C{  @Override public void marshal(Object source,HierarchicalStreamWriter writer,MarshallingContext context){  GraphModel graph=(GraphModel)source;  for (  GraphNode node : graph.getNodes()) {    marshalObject(node,writer,context);  }  for (  GraphEdge edge : graph.getEdges()) {    marshalObject(edge,writer,context);  }}  }
class C{  void translate(float x,float y,float z){  xo+=x;  yo+=y;  zo+=z;}  }
class C{  private void checkWithKnowledge(String inputGraph,String answerGraph,IKnowledge knowledge){  Graph input=GraphConverter.convert(inputGraph);  Fgs fgs=new Fgs(new GraphScore(input));  fgs.setKnowledge(knowledge);  Graph result=fgs.search();  Graph answer=GraphConverter.convert(answerGraph);  assertEquals(answer,result);}  }
class C{  public void deleteStaleSubscriptions() throws WBEMException {  CIMInstance subscription;  CIMProperty<?> property;  CIMObjectPath subscriptionHandlerPath;  CIMObjectPath subscriptionFilterPath;  String subscriptionFilterName;  String subscriptionHandlerName;  Set<CIMObjectPath> staleSubscriptionSet=new HashSet<CIMObjectPath>();  Map<String,CIMObjectPath> staleFilterMap=new HashMap<String,CIMObjectPath>();  Map<String,CIMObjectPath> staleHandlerMap=new HashMap<String,CIMObjectPath>();  WBEMClient cimClient=_connection.getCimClient();  CIMObjectPath subscriptionPath=CimObjectPathCreator.createInstance(CimConstants.CIM_SUBSCRIPTION_NAME,_connection.getInteropNamespace());  CloseableIterator<CIMInstance> subscriptionIter=null;  try {    subscriptionIter=cimClient.enumerateInstances(subscriptionPath,true,true,false,null);    while (subscriptionIter.hasNext()) {      subscription=subscriptionIter.next();      property=subscription.getProperty(CimConstants.SUBSCRIPTION_PROP_HANDLER);      subscriptionHandlerPath=(CIMObjectPath)property.getValue();      subscriptionHandlerName=subscriptionHandlerPath.getKey(CimConstants.NAME_KEY).getValue().toString();      if (subscriptionHandlerName.contains(_subscriptionsIdentifier)) {        staleSubscriptionSet.add(subscription.getObjectPath());        if (!staleHandlerMap.keySet().contains(subscriptionHandlerName)) {          staleHandlerMap.put(subscriptionHandlerName,subscriptionHandlerPath);        }        property=subscription.getProperty(CimConstants.SUBSCRIPTION_PROP_FILTER);        subscriptionFilterPath=(CIMObjectPath)property.getValue();        subscriptionFilterName=subscriptionFilterPath.getKey(CimConstants.NAME_KEY).getValue().toString();        if (!staleFilterMap.keySet().contains(subscriptionFilterName)) {          staleFilterMap.put(subscriptionFilterName,subscriptionFilterPath);        }      }    }    Iterator<CIMObjectPath> pathsIter=staleSubscriptionSet.iterator();    while (pathsIter.hasNext()) {      deleteInstance(pathsIter.next());    }    pathsIter=staleFilterMap.values().iterator();    while (pathsIter.hasNext()) {      deleteInstance(pathsIter.next());    }    pathsIter=staleHandlerMap.values().iterator();    while (pathsIter.hasNext()) {      deleteInstance(pathsIter.next());    }  }  finally {    if (subscriptionIter != null) {      subscriptionIter.close();    }  }}  }
class C{  public boolean hasPastCourse(){  if (hasFetchedPastCourse && pastCourse == null) {    return false;  } else   if (pastCourse != null) {    return true;  } else {    pastCourse=GradeGetter.getInstance().getCourseByInstructor(this.getShortenInstructorName(),course,Integer.parseInt(number),Integer.parseInt(section));    hasFetchedPastCourse=true;    return pastCourse != null;  }}  }
class C{  public void animateTrack(boolean animateTrack){  this.animateTrack=animateTrack;}  }
class C{  public CreateRequest(ContentFormat contentFormat,int objectId,LwM2mObjectInstance instance){  this(contentFormat,new LwM2mPath(objectId),instance.getId(),instance.getResources().values().toArray(new LwM2mResource[0]));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.TESTED_PROJECTS__TESTED_PROJECTS:    getTestedProjects().clear();  getTestedProjects().addAll((Collection<? extends TestedProject>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static RenderingHints convertTextRendering(Element e,RenderingHints hints){  Value v=getComputedStyle(e,SVGCSSEngine.TEXT_RENDERING_INDEX);  String s=v.getStringValue();  int len=s.length();  if ((len == 4) && (s.charAt(0) == 'a'))   return hints;  if (len < 13)   return hints;  if (hints == null)   hints=new RenderingHints(null);switch (s.charAt(8)) {case 's':    hints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);  hints.put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);hints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);break;case 'l':hints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);hints.put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);hints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);break;case 'c':hints.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);hints.put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);hints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);hints.put(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);hints.put(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_PURE);break;}return hints;}  }
class C{  public ClusterJoinResponseMessage(ClusterJoinResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.newNodeId=other.newNodeId;  if (other.isSetNodeStore()) {    List<KeyedValues> __this__nodeStore=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.nodeStore) {      __this__nodeStore.add(new KeyedValues(other_element));    }    this.nodeStore=__this__nodeStore;  }}  }
class C{  @Override public boolean isAfterLast() throws SQLException {  try {    debugCodeCall("isAfterLast");    checkClosed();    int row=result.getRowId();    int count=result.getRowCount();    return count > 0 && row >= count;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void updateAlertDefinition(StatAlertDefinition alertDefinition){  if (logger.isDebugEnabled()) {    logger.debug("Entered AdminDistributedSystemJmxImpl.updateAlertDefinition(StatAlertDefinition) *****");  }synchronized (ALERT_DEFINITIONS) {    ALERT_DEFINITIONS.put(Integer.valueOf(alertDefinition.getId()),alertDefinition);    if (logger.isDebugEnabled()) {      logger.debug("AdminDistributedSystemJmxImpl.updateAlertDefinition : alertDefinition :: id={} :: {}",alertDefinition.getId(),alertDefinition.getStringRepresentation());    }    notifyMembersForAlertDefinitionChange(alertDefinition);  }  if (logger.isDebugEnabled()) {    logger.debug("Exiting AdminDistributedSystemJmxImpl.updateAlertDefinition(StatAlertDefinition) *****");  }}  }
class C{  @Override public void onStart(){  super.onStart();  reloadButtons();  if (sStatusBar != null) {    sStatusBar.disable(StatusBarManager.DISABLE_EXPAND);  }  getContext().registerReceiver(mBroadcastReceiver,mBroadcastIntentFilter);  mHandler.removeCallbacks(mCleanup);}  }
class C{  public static double poissonPDFm1(double x_plus_1,double lambda){  if (Double.isInfinite(lambda)) {    return 0.;  }  if (x_plus_1 > 1) {    return rawProbability(x_plus_1 - 1,lambda);  }  if (lambda > Math.abs(x_plus_1 - 1) * MathUtil.LOG2 * Double.MAX_EXPONENT / 1e-14) {    return Math.exp(-lambda - GammaDistribution.logGamma(x_plus_1));  } else {    return rawProbability(x_plus_1,lambda) * (x_plus_1 / lambda);  }}  }
class C{  public boolean isLightEnabled(){  return (lightEnabled);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public AsyncResult HistoryReadAsync(RequestHeader RequestHeader,ExtensionObject HistoryReadDetails,TimestampsToReturn TimestampsToReturn,Boolean ReleaseContinuationPoints,HistoryReadValueId... NodesToRead){  HistoryReadRequest req=new HistoryReadRequest(RequestHeader,HistoryReadDetails,TimestampsToReturn,ReleaseContinuationPoints,NodesToRead);  return channel.serviceRequestAsync(req);}  }
class C{  public final boolean canReach(Environment env,MemberDefinition f){  if (f.isLocal() || !f.isVariable() || !(isVariable() || isInitializer()))   return true;  if ((getClassDeclaration().equals(f.getClassDeclaration())) && (isStatic() == f.isStatic())) {    while (((f=f.getNextMember()) != null) && (f != this))     ;    return f != null;  }  return true;}  }
class C{  private BaseServiceManager(){  throw new IllegalAccessError("Cannot instantiate a BaseServiceManager.");}  }
class C{  private void addLinearFunction(String functionRef,double[] c0,double[] c1,double[] dom) throws IOException {  PDFDictionary function=pdf.openDictionary(functionRef);  function.entry("FunctionType",2);  function.entry("Domain",dom);  function.entry("Range",new double[]{0.,1.,0.,1.,0.,1.});  function.entry("C0",c0);  function.entry("C1",c1);  function.entry("N",1);  pdf.close(function);}  }
class C{  @Override public void removeDataSourceListener(DataSourceListener dsl){  m_dataListeners.remove(dsl);}  }
class C{  public boolean isEmpty(){  return m_size == 0;}  }
class C{  public BasicIconPart(Shape shape,AffineTransform transform,DrawingAttributes da){  geometry=shape;  if (transform == null) {    transform=new AffineTransform();  }  baseTransform=transform;  setRenderingAttributes(da);}  }
class C{  @Override public boolean managed(){  return true;}  }
class C{  public void pause(String url){  getDownloadTaskManager().pause(url,null);}  }
class C{  @Nullable public String readCurrentTipRevision(){  if (!isBranchInfoAvailable())   return null;  String[] branchesWithHeads;  try {    branchesWithHeads=DvcsUtil.tryLoadFile(myBranchHeadsFile).split("\n");  } catch (  RepoStateException e) {    LOG.error(e);    return null;  }  String head=branchesWithHeads[0];  Matcher matcher=HASH_NAME.matcher(head);  if (matcher.matches()) {    return (matcher.group(1));  }  return null;}  }
class C{  private ObjectChecksum readChecksum() throws DeviceDisconnectedException, DfuException, UploadAbortedException, RemoteDfuException, UnknownResponseException {  if (!mConnected)   throw new DeviceDisconnectedException("Unable to read Checksum: device disconnected");  writeOpCode(mControlPointCharacteristic,OP_CODE_CALCULATE_CHECKSUM);  final byte[] response=readNotificationResponse();  final int status=getStatusCode(response,OP_CODE_CALCULATE_CHECKSUM_KEY);  if (status != DFU_STATUS_SUCCESS)   throw new RemoteDfuException("Receiving Checksum failed",status);  final ObjectChecksum checksum=new ObjectChecksum();  checksum.offset=mControlPointCharacteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT32,3);  checksum.CRC32=mControlPointCharacteristic.getIntValue(BluetoothGattCharacteristic.FORMAT_UINT32,3 + 4);  return checksum;}  }
class C{  public void engineHit(){  engineHit=true;  immobilize();  lockTurret(getLocTurret());  lockTurret(getLocTurret2());  for (  Mounted m : getWeaponList()) {    WeaponType wtype=(WeaponType)m.getType();    if (wtype.hasFlag(WeaponType.F_ENERGY) && !(wtype instanceof CLChemicalLaserWeapon) && !(wtype instanceof VehicleFlamerWeapon)) {      m.setBreached(true);    }  }}  }
class C{  public BigDecimal calculatePenalty(Date effectiveFrom,BigDecimal tax){  LOGGER.debug("Entered into calculatePenalty, effectiveFrom={} , tax={} ",effectiveFrom,tax);  Integer noOfMonths=PropertyTaxUtil.getMonthsBetweenDates(effectiveFrom,new Date());  BigDecimal penalty=BigDecimal.ZERO;  if (noOfMonths > 0) {    penalty=tax.multiply(LP_PERCENTAGE_CONSTANT).divide(VALUE_HUNDRED).multiply(BigDecimal.valueOf(noOfMonths));  }  LOGGER.debug("calcPanalty - before rounding -  noOfMonths={}, penalty={}",noOfMonths,penalty);  penalty=MoneyUtils.roundOff(penalty);  LOGGER.debug("calcPanalty - after rounding -  noOfMonths={}, penalty={}",noOfMonths,penalty);  LOGGER.debug("Exiting from calculatePenalty");  return penalty;}  }
class C{  public static String wekaStaticWrapper(Sourcable classifier,String className) throws Exception {  return weka.classifiers.evaluation.Evaluation.wekaStaticWrapper(classifier,className);}  }
class C{  public boolean hasActiveNonDaemonThreads(){  return threads.hasActiveNonDaemonThreads();}  }
class C{  public Node(final String name,final InetSocketAddress address){  this.name=name;  m_address=address.getAddress();  port=address.getPort();}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"PLACE\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"LABEL\" TEXT,"+ "\"NAME\" TEXT,"+ "\"PINYIN\" TEXT,"+ "\"PROVINCE\" TEXT);");}  }
class C{  public int nextClearBit(int fromIndex){  int i=fromIndex >> ADDRESS_BITS;  int max=data.length;  for (; i < max; i++) {    if (data[i] == -1) {      continue;    }    int j=Math.max(fromIndex,i << ADDRESS_BITS);    for (int end=j + 64; j < end; j++) {      if (!get(j)) {        return j;      }    }  }  return max << ADDRESS_BITS;}  }
class C{  @SuppressWarnings("unchecked") public void addValue(V value){  List<V> values=maps.get(value.getClass());  if (values == null) {    values=new LinkedList<V>();    maps.put((Class<V>)value.getClass(),values);  }  values.add(value);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public final void read(final byte[] buffer) throws IOException {  byteBuffer.get(buffer);}  }
class C{  public SecureChannel createSecureChannel(String connectUrl,TransportChannelSettings settings) throws ServiceResultException {  MessageFormat proto=UriUtil.getMessageFormat(connectUrl);  if (proto == MessageFormat.Binary) {    SecureChannel sc=createSecureChannelImpl(connectUrl);    TransportChannelSettings s=new TransportChannelSettings();    s.setConfiguration(endpointConfiguration);    s.getHttpsSettings().readFrom(application.getHttpsSettings());    s.getOpctcpSettings().readFrom(application.getOpctcpSettings());    if (settings != null)     s.readFrom(settings);    KeyPair localApplicationInstanceCertificate=application.getApplicationInstanceCertificate();    if (localApplicationInstanceCertificate != null && s.getDescription().needsCertificate()) {      s.getOpctcpSettings().setPrivKey(localApplicationInstanceCertificate.getPrivateKey());      s.getOpctcpSettings().setClientCertificate(localApplicationInstanceCertificate.getCertificate());    }    try {      sc.initialize(connectUrl,s,getEncoderContext());      sc.open();      return sc;    } catch (    ServiceResultException e) {      sc.dispose();      throw e;    }  }  throw new ServiceResultException("Unsupported protocol " + proto);}  }
class C{  static public TorConfig createConfig(){  final TorConfig config=(TorConfig)Proxy.newProxyInstance(TorConfigProxy.class.getClassLoader(),new Class[]{TorConfig.class},new TorConfigProxy());  if (isAndroidRuntime()) {    logger.warning("Android Runtime detected, disabling V2 Link protocol");    config.setHandshakeV2Enabled(false);  }  return config;}  }
class C{  protected Channel(Channel channel){  this.bot=channel.bot;  this.name=channel.name;  this.channelId=channel.channelId;}  }
class C{  public List<PatternFormatter> patternFormatters(){  return subresources().patternFormatters();}  }
class C{  public boolean isSubcontracting(){  Object oo=get_Value(COLUMNNAME_IsSubcontracting);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void append(char text[],int offset,int length){  buffer.append(text,offset,length);  subwordCount++;}  }
class C{  public void onSnackbarManuallyDismissed(Snackbar snackbar){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static void checkEqualMaps(Map<ClusterNode,Collection> map1,Map<ClusterNode,Collection> map2){  assertEquals(map1.size(),map2.size());  for (  ClusterNode node : map1.keySet()) {    assertTrue(map2.containsKey(node));    assertEquals(map1.get(node).size(),map2.get(node).size());  }}  }
class C{  private static int stringHash(String string){  int hash=5381;  for (int index=0; index < string.length(); index++) {    int character=(int)string.charAt(index);    hash=hash * 33 + character;  }  return hash;}  }
class C{  public void startElement(String name) throws IOException {  startElement(null,name,null,null);}  }
class C{  public CompletableFuture<WriteResult> commit(){  if (isRolledBack) {    throw new IllegalStateException("Cannot commit a rolled-back transaction");  } else   if (isCommitted) {    throw new IllegalStateException("Transaction is already committed");  } else {    isCommitted=true;    return transactionManager.commit(this,userCredentials);  }}  }
class C{  public MarketingPermissionNotFoundException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  boolean isShaking(){  return newest != null && oldest != null && newest.timestamp - oldest.timestamp >= MIN_WINDOW_SIZE && acceleratingCount >= (sampleCount >> 1) + (sampleCount >> 2);}  }
class C{  protected boolean hasOutstandingChanges(){  return (fieldResourceType.hasChanged() || fieldResource.hasChanged() || fieldFrom.hasChanged()|| fieldTo.hasChanged());}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public MethodBinding original(){  return this;}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  if (off < 0 || len < 0 || off + len < 0 || off + len > buf.length)   throw new IndexOutOfBoundsException();  if (len == 0)   return 0;  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  if (endReached)   return -1;  try {    int size=0;    while (len > 0) {      if (uncompressedSize == 0) {        decodeChunkHeader();        if (endReached)         return size == 0 ? -1 : size;      }      int copySizeMax=Math.min(uncompressedSize,len);      if (!isLZMAChunk) {        lz.copyUncompressed(in,copySizeMax);      } else {        lz.setLimit(copySizeMax);        lzma.decode();        if (!rc.isInBufferOK())         throw new CorruptedInputException();      }      int copiedSize=lz.flush(buf,off);      off+=copiedSize;      len-=copiedSize;      size+=copiedSize;      uncompressedSize-=copiedSize;      if (uncompressedSize == 0)       if (!rc.isFinished() || lz.hasPending())       throw new CorruptedInputException();    }    return size;  } catch (  IOException e) {    exception=e;    throw e;  }}  }
class C{  @Override protected void onPostExecute(Void notUsed){  super.onPostExecute(notUsed);  RenderableLayer symbolLayer=new RenderableLayer("MIL-STD-2525 Symbols");  getWorldWindow().getLayers().addLayer(symbolLayer);  MilStd2525LevelOfDetailSelector.setFarThreshold(1500000);  MilStd2525LevelOfDetailSelector.setNearThreshold(750000);  SparseArray<String> unitModifiers=new SparseArray<>();  SparseArray<String> renderAttributes=new SparseArray<>();  renderAttributes.put(MilStdAttributes.KeepUnitRatio,"false");  String codeScheme="S";  String sizeMobility="*";  String countryCode="**";  String orderOfBattle="**";  int numSymbolsCreated=0;  for (  String standardId : StandardIdentities) {    for (    String battleDimension : BattleDimensions) {      for (      String status : StatusCodes) {switch (battleDimension) {case "Z":          for (          String functionId : WarfightingUnknownFunctionIDs) {            String sidc=codeScheme + standardId + battleDimension+ status+ functionId+ sizeMobility+ countryCode+ orderOfBattle;            Position position=getRandomPosition();            unitModifiers.put(ModifiersUnits.W_DTG_1,getDateTimeGroup(new Date()));            unitModifiers.put(ModifiersUnits.Y_LOCATION,getLocation(position));            symbolLayer.addRenderable(new MilStd2525Placemark(position,sidc,unitModifiers,renderAttributes));            numSymbolsCreated++;          }        break;case "P":      for (      String functionId : WarfightingSpaceFunctionIDs) {        String sidc=codeScheme + standardId + battleDimension+ status+ functionId+ sizeMobility+ countryCode+ orderOfBattle;        Position position=getRandomPosition();        unitModifiers.put(ModifiersUnits.W_DTG_1,getDateTimeGroup(new Date()));        unitModifiers.put(ModifiersUnits.Y_LOCATION,getLocation(position));        symbolLayer.addRenderable(new MilStd2525Placemark(position,sidc,unitModifiers,renderAttributes));        numSymbolsCreated++;      }    break;case "A":  for (  String functionId : WarfightingAirFunctionIDs) {    String sidc=codeScheme + standardId + battleDimension+ status+ functionId+ sizeMobility+ countryCode+ orderOfBattle;    Position position=getRandomPosition();    unitModifiers.put(ModifiersUnits.W_DTG_1,getDateTimeGroup(new Date()));    unitModifiers.put(ModifiersUnits.Y_LOCATION,getLocation(position));    symbolLayer.addRenderable(new MilStd2525Placemark(position,sidc,unitModifiers,renderAttributes));    numSymbolsCreated++;  }break;case "G":for (String functionId : WarfightingGroundFunctionIDs) {String sidc=codeScheme + standardId + battleDimension+ status+ functionId+ sizeMobility+ countryCode+ orderOfBattle;symbolLayer.addRenderable(new MilStd2525Placemark(getRandomPosition(),sidc,unitModifiers,renderAttributes));numSymbolsCreated++;}break;case "S":for (String functionId : WarfightingSeaSurfaceFunctionIDs) {String sidc=codeScheme + standardId + battleDimension+ status+ functionId+ sizeMobility+ countryCode+ orderOfBattle;Position position=getRandomPosition();unitModifiers.put(ModifiersUnits.W_DTG_1,getDateTimeGroup(new Date()));unitModifiers.put(ModifiersUnits.Y_LOCATION,getLocation(position));symbolLayer.addRenderable(new MilStd2525Placemark(position,sidc,unitModifiers,renderAttributes));numSymbolsCreated++;}break;case "U":for (String functionId : WarfightingSubsurfaceFunctionIDs) {String sidc=codeScheme + standardId + battleDimension+ status+ functionId+ sizeMobility+ countryCode+ orderOfBattle;Position position=getRandomPosition();unitModifiers.put(ModifiersUnits.W_DTG_1,getDateTimeGroup(new Date()));unitModifiers.put(ModifiersUnits.Y_LOCATION,getLocation(position));symbolLayer.addRenderable(new MilStd2525Placemark(position,sidc,unitModifiers,renderAttributes));numSymbolsCreated++;}break;case "F":for (String functionId : WarfightingSOFFunctionIDs) {String sidc=codeScheme + standardId + battleDimension+ standardId+ functionId+ sizeMobility+ countryCode+ orderOfBattle;Position position=getRandomPosition();unitModifiers.put(ModifiersUnits.W_DTG_1,getDateTimeGroup(new Date()));unitModifiers.put(ModifiersUnits.Y_LOCATION,getLocation(position));symbolLayer.addRenderable(new MilStd2525Placemark(position,sidc,unitModifiers,renderAttributes));numSymbolsCreated++;}break;}}}}getWorldWindow().requestRedraw();statusText.setText(String.format(Locale.US,"%,d Symbols Created",numSymbolsCreated));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Graph createGraph(){  return createGraph(false);}  }
class C{  public SimpleSchedule(Stage stage,SingleThreadStageTask task){  this.stage=stage;  this.task=task;}  }
class C{  public static byte[] toBytes(int x,byte[] bytes,int bytePos){  bytes[bytePos++]=(byte)(x);  bytes[bytePos++]=(byte)(x >> 8);  bytes[bytePos++]=(byte)(x >> 16);  bytes[bytePos]=(byte)(x >> 24);  return bytes;}  }
class C{  public final int y(){  return (int)FastMath.floor(position().getY());}  }
class C{  public void testCompositeComponentResolutionWithinRelocatableResources() throws Exception {  HtmlPage page=getPage("/faces/composite/compAttributeResourceRelocation.xhtml");  List<HtmlStyle> styles=new ArrayList<HtmlStyle>(4);  List<HtmlScript> scripts=new ArrayList<HtmlScript>(1);  getAllElementsOfGivenClass(page,styles,HtmlStyle.class);  getAllElementsOfGivenClass(page,scripts,HtmlScript.class);  assertEquals(5,styles.size());  assertEquals(2,scripts.size());  String[] styleValues={"color:red","color:blue","color:red","color:red","color:red"};  String[] scriptValues={"var a = \"ss\";","var a = \"ss\";"};  for (int i=0, len=styles.size(); i < len; i++) {    assertTrue(styles.get(i).asXml().contains(styleValues[i]));  }  for (int i=0, len=scripts.size(); i < len; i++) {    System.out.println(scripts.get(i).asXml());    assertTrue(scripts.get(i).asXml().contains(scriptValues[i]));  }  HtmlSubmitInput submit=(HtmlSubmitInput)getInputContainingGivenId(page,"form:submit");  page=submit.click();  styles.clear();  scripts.clear();  getAllElementsOfGivenClass(page,styles,HtmlStyle.class);  getAllElementsOfGivenClass(page,scripts,HtmlScript.class);  assertEquals(5,styles.size());  assertEquals(2,scripts.size());  for (int i=0, len=styles.size(); i < len; i++) {    assertTrue(styles.get(i).asXml().contains(styleValues[i]));  }  for (int i=0, len=scripts.size(); i < len; i++) {    assertTrue(scripts.get(i).asXml().contains(scriptValues[i]));  }}  }
class C{  @Override public void putAll(final Map<? extends String,? extends String> m){  for (  final Map.Entry<? extends String,? extends String> entry : m.entrySet()) {    put(entry.getKey(),entry.getValue());  }}  }
class C{  protected AnimationBuilder add(Animator animator){  this.animatorList.add(animator);  return this;}  }
class C{  private DdmHandleViewDebug(){}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(certType);  sb.append(" ");  sb.append(keyTag);  sb.append(" ");  sb.append(alg);  if (cert != null) {    if (Options.check("multiline")) {      sb.append(" (\n");      sb.append(base64.formatString(cert,64,"\t",true));    } else {      sb.append(" ");      sb.append(base64.toString(cert));    }  }  return sb.toString();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public Path makeRelative(){  if (!isAbsolute()) {    return this;  }  return new Path(device,segments,separators & HAS_TRAILING);}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,bytes.length);}  }
class C{  public void releaseAllLocks(){  releaseTargetInfoLock();  if (releaseUpgradeLock()) {    System.out.println("Release all lock succeed!");  } else {    System.out.println("Relase Fail, Please see the log.");  }}  }
class C{  public static Number exp(Number a){  return Math.exp(a.doubleValue());}  }
class C{  private Colors(){}  }
class C{  public int days(){  return this.days;}  }
class C{  public static <V>Mapping<Map<String,V>> map(Mapping<V> vBase,Constraint... constraints){  return map(text(),vBase,constraints);}  }
class C{  public void reassignStrategy(final Strategy fromStrategy,final Strategy toStrategy,final Tradingday tradingday) throws PersistentModelException {  try {    for (    Tradestrategy item : tradingday.getTradestrategies()) {      if (item.getStrategy().getIdStrategy().equals(fromStrategy.getIdStrategy())) {        item.setStrategy(toStrategy);        item.setDirty(true);        item.setStrategyData(null);        m_aspectHome.persist(item);      }    }  } catch (  Exception ex) {    throw new PersistentModelException("Error reassign Strategy: " + ex.getMessage());  }}  }
class C{  @Override protected float ngramLogProbability_helper(int[] ngram,int order){  int[] lm_ngram=new int[ngram.length];  for (int i=0; i < ngram.length; i++) {    lm_ngram[i]=Vocabulary.id(Vocabulary.word(ngram[i]));  }  return wittenBell(lm_ngram,order);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.420 -0400",hash_original_method="056CD22080557022C880836C779D064A",hash_generated_method="7D893911D2500F8BD7B8B956EC82284E") public static void writeSwappedFloat(OutputStream output,float value) throws IOException {  writeSwappedInteger(output,Float.floatToIntBits(value));}  }
class C{  public void actionPerformed(ActionEvent e){  JButton source=(JButton)e.getSource();  if (source.getClientProperty(HOST_PROP) != null) {    gui.setFocus((DTNHost)source.getClientProperty(HOST_PROP));  } else   if (source.getClientProperty(MSG_PROP) != null) {    Message m=(Message)source.getClientProperty(MSG_PROP);    gui.getInfoPanel().showInfo(m);  }}  }
class C{  public static int computeEnumSize(final int fieldNumber,final int value){  return computeTagSize(fieldNumber) + computeEnumSizeNoTag(value);}  }
class C{  private void addOptionalXmlReplacements(LocalContainer container){  if (!"localhost".equals(container.getConfiguration().getPropertyValue(GeneralPropertySet.HOSTNAME))) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"address",GeneralPropertySet.HOSTNAME);    addXmlReplacement("conf/server.xml","//Server/Service/Connector[@protocol='AJP/1.3']","address",GeneralPropertySet.HOSTNAME,true);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.USE_HTTP_ONLY) != null) {    addXmlReplacement("conf/context.xml","//Context","useHttpOnly",TomcatPropertySet.USE_HTTP_ONLY);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.CONNECTOR_KEY_STORE_FILE) != null) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"keystoreFile",TomcatPropertySet.CONNECTOR_KEY_STORE_FILE);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.CONNECTOR_KEY_STORE_PASSWORD) != null) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"keystorePass",TomcatPropertySet.CONNECTOR_KEY_STORE_PASSWORD);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.CONNECTOR_KEY_STORE_TYPE) != null) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"keystoreType",TomcatPropertySet.CONNECTOR_KEY_STORE_TYPE);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.CONNECTOR_KEY_ALIAS) != null) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"keyAlias",TomcatPropertySet.CONNECTOR_KEY_ALIAS);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.CONNECTOR_CLIENT_AUTH) != null) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"clientAuth",TomcatPropertySet.CONNECTOR_CLIENT_AUTH);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.CONNECTOR_TRUST_STORE_FILE) != null) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"truststoreFile",TomcatPropertySet.CONNECTOR_TRUST_STORE_FILE);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.CONNECTOR_TRUST_STORE_PASSWORD) != null) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"truststorePass",TomcatPropertySet.CONNECTOR_TRUST_STORE_PASSWORD);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.CONNECTOR_TRUST_STORE_TYPE) != null) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"truststoreType",TomcatPropertySet.CONNECTOR_TRUST_STORE_TYPE);  }  if (container.getConfiguration().getPropertyValue(TomcatPropertySet.CONNECTOR_SSL_PROTOCOL) != null) {    addXmlReplacement("conf/server.xml",CONNECTOR_XPATH,"sslProtocol",TomcatPropertySet.CONNECTOR_SSL_PROTOCOL);  }}  }
class C{  public void testNamespaceUriMap() throws Exception {  Map<String,String> uris=new HashMap<String,String>();  uris.put("x","fooNamespace");  uris.put("y","barNamespace");  DocumentFactory factory=new DocumentFactory();  factory.setXPathNamespaceURIs(uris);  SAXReader reader=new SAXReader();  reader.setDocumentFactory(factory);  Document doc=getDocument("/xml/test/nestedNamespaces.xml",reader);  String value=doc.valueOf("/x:pizza/y:cheese/x:pepper");  log("Found value: " + value);  assertEquals("XPath used default namesapce URIS","works",value);}  }
class C{  @ObjectiveCName("findPublicGroupByIdWithGid:") public Promise<Peer> findPublicGroupById(int gid){  return modules.getSearchModule().findPublicGroupById(gid);}  }
class C{  public static int bitLength(int i){  if (i < 0)   i=-++i;  return (i < 1 << 16) ? (i < 1 << 8) ? BIT_LENGTH[i] : BIT_LENGTH[i >>> 8] + 8 : (i < 1 << 24) ? BIT_LENGTH[i >>> 16] + 16 : BIT_LENGTH[i >>> 24] + 24;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public int hashCode(){  return Arrays.hashCode(apdu);}  }
class C{  public FractionAtom(Atom num,Atom den,int unit,float t){  this(num,den,true,unit,t);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new MotifPasswordFieldUI();}  }
class C{  @SuppressWarnings("unchecked") public synchronized <T>T registerOrReuse(Monitorable<T> monitorable){  String name=monitorable.getName();  if (monitorables.containsKey(name)) {    Monitorable<?> existingMonitorableWithSameName=monitorables.get(name);    if (monitorable.getSemantics().equals(existingMonitorableWithSameName.getSemantics()) && monitorable.getUnit().equals(existingMonitorableWithSameName.getUnit())) {      return (T)existingMonitorableWithSameName;    } else {      throw new IllegalArgumentException(String.format("Cannot reuse the same name %s for a monitorable with different Semantics or Unit: requested=%s, existing=%s",name,monitorable,existingMonitorableWithSameName));    }  } else {    monitorables.put(name,monitorable);    notifyListenersOfNewMonitorable(monitorable);    return (T)monitorable;  }}  }
class C{  public ArrayList<PerfTask> extractTasks(){  ArrayList<PerfTask> res=new ArrayList<>();  extractTasks(res,sequence);  return res;}  }
class C{  public boolean isShutdownSupported(){  return shutdownSupported;}  }
class C{  public void size(int iwidth,int iheight){  if (iwidth != this.width || iheight != this.height) {    if (insideSettings("size",iwidth,iheight)) {      this.width=iwidth;      this.height=iheight;    }  }}  }
class C{  public FunctionWrapper(FunctionDeclaration declaration){  this.declaration=declaration;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MInOutBound[").append(get_ID()).append("-").append("").append("]");  return sb.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  child=employeeList.item(3);  childName=child.getNodeName();  if (equals("#text",childName)) {    assertEquals("childName_space","#text",childName);  } else {    assertEqualsAutoCase("element","childName_strong","strong",childName);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.602 -0500",hash_original_method="E7A2FB4AC135D29D78CE09D5448C290F",hash_generated_method="BBFCFD2AD6BD270AD38D8FE87FD0572B") protected String encodeBody(){  return encodeBody(new StringBuffer()).toString();}  }
class C{  @SuppressFBWarnings("CHROMIUM_SYNCHRONIZED_METHOD") public synchronized boolean calledOnValidThread(){  ensureThreadIdAssigned();  return mThreadId.equals(Thread.currentThread().getId());}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_DECLARED_THIS_TYPE:    return getDeclaredThisType();case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_FUNCTION_TYPE:  return getFunctionType();case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_VARS:return getTypeVars();case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_VAR_UPPER_BOUND__TYPEVARIABLE:return getTypeVarUpperBound((TypeVariable)arguments.get(0));case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_FPARS:return getFpars();case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_RETURN_TYPE_REF:return getReturnTypeRef();case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___IS_GENERIC:return isGeneric();case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___IS_RAW:return isRaw();case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_FPAR_FOR_ARG_IDX__INT:return getFparForArgIdx((Integer)arguments.get(0));case TypeRefsPackage.FUNCTION_TYPE_EXPR_OR_REF___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  public SwitchPortTuple(SwitchPortTuple other){  __isset_bitfield=other.__isset_bitfield;  this.dpid=other.dpid;  this.port=other.port;}  }
class C{  public IdentityHashMap(int maxSize){  if (maxSize >= 0) {    this.size=0;    threshold=getThreshold(maxSize);    elementData=newElementArray(computeElementArraySize());  } else {    throw new IllegalArgumentException();  }}  }
class C{  @HLEFunction(nid=0x809CE29B,version=150,checkInsideInterrupt=true) public int sceKernelExitDeleteThread(int exitStatus){  if (!isDispatchThreadEnabled() && Modules.SysMemUserForUserModule.hleKernelGetCompiledSdkVersion() > 0x0307FFFF) {    return SceKernelErrors.ERROR_KERNEL_WAIT_CAN_NOT_WAIT;  }  SceKernelThreadInfo thread=currentThread;  thread.setExitStatus(exitStatus);  triggerThreadEvent(thread,currentThread,THREAD_EVENT_EXIT);  triggerThreadEvent(thread,currentThread,THREAD_EVENT_DELETE);  hleChangeThreadState(thread,PSP_THREAD_STOPPED);  RuntimeContext.onThreadExit(thread);  setToBeDeletedThread(thread);  hleRescheduleCurrentThread();  return 0;}  }
class C{  public void testGetRandomAccentColor(){  List<Integer> accentColorList=new ArrayList<>();  try {    for (    String name : MaterialPalettes.COLORS_WITH_ACCENT_NAMES) {      accentColorList.addAll(MaterialPalettes.getAccentColorsByName(name));    }    Integer randomColor=MaterialPalettes.getRandomAccentColor();    assertTrue(accentColorList.contains(randomColor));  } catch (  IllegalAccessException iae) {    fail();  }}  }
class C{  public void reset(){synchronized (chartData) {    chartData.clear();    xExtremityMonitor.reset();    zoomLevel=1;    updateDimensions();  }}  }
class C{  public boolean isSetDpid(){  return EncodingUtils.testBit(__isset_bitfield,__DPID_ISSET_ID);}  }
class C{  @Override public void onFailure(Throwable t){  LOGGER.warn("Exception occurred while converting documents.",t);}  }
class C{  public static String fromTag(CompoundTag tag){  StringBuilder builder=new StringBuilder();  builder.append(COMPOUND_START);  boolean start=true;  for (  String key : tag.getValue().keySet()) {    if (start) {      start=false;    } else {      builder.append(ELEMENT_SEPERATOR);    }    builder.append(key).append(ELEMENT_PAIR_SEPERATOR);    Tag value=tag.getValue().get(key);    builder.append(fromGenericTag(value));  }  builder.append(COMPOUND_END);  return builder.toString();}  }
class C{  protected TypeName[] createTypeVariables(TypeName extractedType,String extractVariableName,int extractArity){  List<TypeName> typeVariables=new ArrayList<>();  typeVariables.add(extractedType);  if (extractArity > 0) {    typeVariables.addAll(IntStream.rangeClosed(1,extractArity).mapToObj(null).collect(Collectors.toList()));  }  return typeVariables.toArray(new TypeName[typeVariables.size()]);}  }
class C{  @Override protected void afterExecute(Runnable r,Throwable t){  super.afterExecute(r,t);  if (t == null && r instanceof Future<?>) {    t=unwrapFutureThrowable((Future<?>)r);  }  if (t != null) {    getLogger().error("Thread: " + Thread.currentThread().getName() + ": task terminated with exception : ",t);    cleanup();    completer.accept(this,t);  }}  }
class C{  @SuppressWarnings("unchecked") public void mousePressed(MouseEvent e){  down=e.getPoint();  VisualizationViewer<V,E> vv=(VisualizationViewer<V,E>)e.getSource();  GraphElementAccessor<V,E> pickSupport=vv.getPickSupport();  PickedState<V> pickedVertexState=vv.getPickedVertexState();  PickedState<E> pickedEdgeState=vv.getPickedEdgeState();  if (pickSupport != null && pickedVertexState != null) {    Layout<V,E> layout=vv.getGraphLayout();    if (e.getModifiers() == modifiers) {      rect.setFrameFromDiagonal(down,down);      Point2D ip=e.getPoint();      vertex=pickSupport.getVertex(layout,ip.getX(),ip.getY());      if (vertex != null) {        if (pickedVertexState.isPicked(vertex) == false) {          pickedVertexState.clear();          pickedVertexState.pick(vertex,true);        }        Point2D q=layout.apply(vertex);        Point2D gp=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.LAYOUT,ip);        offsetx=(float)(gp.getX() - q.getX());        offsety=(float)(gp.getY() - q.getY());      } else       if ((edge=pickSupport.getEdge(layout,ip.getX(),ip.getY())) != null) {        pickedEdgeState.clear();        pickedEdgeState.pick(edge,true);      } else {        vv.addPostRenderPaintable(lensPaintable);        pickedEdgeState.clear();        pickedVertexState.clear();      }    } else     if (e.getModifiers() == addToSelectionModifiers) {      vv.addPostRenderPaintable(lensPaintable);      rect.setFrameFromDiagonal(down,down);      Point2D ip=e.getPoint();      vertex=pickSupport.getVertex(layout,ip.getX(),ip.getY());      if (vertex != null) {        boolean wasThere=pickedVertexState.pick(vertex,!pickedVertexState.isPicked(vertex));        if (wasThere) {          vertex=null;        } else {          Point2D q=layout.apply(vertex);          Point2D gp=vv.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.LAYOUT,ip);          offsetx=(float)(gp.getX() - q.getX());          offsety=(float)(gp.getY() - q.getY());        }      } else       if ((edge=pickSupport.getEdge(layout,ip.getX(),ip.getY())) != null) {        pickedEdgeState.pick(edge,!pickedEdgeState.isPicked(edge));      }    }  }  if (vertex != null)   e.consume();}  }
class C{  @Override protected byte[] encrypt(byte type,byte[] fragment,int offset,int len){  try {    int content_mac_length=len + hash_size;    int padding_length=(block_size == 0) ? 0 : getPaddingSize(++content_mac_length);    byte[] res=new byte[content_mac_length + padding_length];    System.arraycopy(fragment,offset,res,0,len);    mac_material_header[0]=type;    mac_material_header[3]=(byte)((0x00FF00 & len) >> 8);    mac_material_header[4]=(byte)(0x0000FF & len);    encMac.update(write_seq_num);    encMac.update(mac_material_header);    encMac.update(fragment,offset,len);    encMac.doFinal(res,len);    if (block_size != 0) {      Arrays.fill(res,content_mac_length - 1,res.length,(byte)(padding_length));    }    if (logger != null) {      logger.println("SSLRecordProtocol.do_encryption: Generic" + (block_size != 0 ? "BlockCipher with padding[" + padding_length + "]:" : "StreamCipher:"));      logger.print(res);    }    byte[] rez=new byte[encCipher.getOutputSize(res.length)];    encCipher.update(res,0,res.length,rez);    incSequenceNumber(write_seq_num);    return rez;  } catch (  GeneralSecurityException e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during the encryption"));  }}  }
class C{  private static String toUnsignedString0(int val,int shift){  int mag=Integer.SIZE - Integer.numberOfLeadingZeros(val);  int chars=Math.max(((mag + (shift - 1)) / shift),1);  char[] buf=new char[chars];  formatUnsignedInt(val,shift,buf,0,chars);  return new String(buf,true);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void savePaymentChannelToFundSourceMappings(final JsonCommand command,final JsonElement element,final Long productId,final Map<String,Object> changes){  savePaymentChannelToFundSourceMappings(command,element,productId,changes,PortfolioProductType.LOAN);}  }
class C{  public void generateGrid(Geometry g){  LOG.warn("Did you check that the width given is in the same unit-of-measure as the shapefile?");  LOG.info("Generating " + this.type.toString() + " grid. This may take some time...");  this.geometry=g;  Polygon envelope=(Polygon)g.getEnvelope();  qt=new QuadTree<Point>(envelope.getCoordinates()[0].x - width,envelope.getCoordinates()[0].y - width,envelope.getCoordinates()[2].x + width,envelope.getCoordinates()[2].y + width);  Counter counter=new Counter("   cells # ");  double startX=envelope.getCoordinates()[0].x;  double startY=envelope.getCoordinates()[0].y;  double yStep;  double xStep;switch (this.type) {case SQUARE:    xStep=width;  yStep=width;break;case HEX:xStep=0.75 * width;yStep=(Math.sqrt(3.0) / 2) * width;break;case UNKNOWN:throw new RuntimeException("Don't know how to generate grid for type " + GridType.UNKNOWN);default :throw new RuntimeException("Don't know how to generate grid for type " + GridType.UNKNOWN);}double y=startY;int row=0;while (y <= envelope.getCoordinates()[2].y) {double x=startX;int col=0;while (x <= envelope.getCoordinates()[2].x) {double thisX=0.0;double thisY=0.0;if (this.type == GridType.SQUARE) {thisX=x;thisY=y;} else if (this.type == GridType.HEX) {thisX=x;if (col % 2 == 0) {thisY=y;} else {thisY=y - 0.5 * yStep;}}Point p=gf.createPoint(new Coordinate(thisX,thisY));Geometry cell=this.getIndividualGeometry(p);if (g.intersects(cell)) {qt.put(thisX,thisY,p);geometryCache.put(p,cell);}x+=xStep;col++;counter.incCounter();}y+=yStep;row++;}counter.printCounter();}  }
class C{  public void output(Writer out){  output(new PrintWriter(out));}  }
class C{  public Credentials sendAndGetCreds() throws IOException, KrbException {  KrbTgsRep tgs_rep=null;  String kdc=null;  send();  tgs_rep=getReply();  return tgs_rep.getCreds();}  }
class C{  public String toString(){  return _name;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.709 -0500",hash_original_method="8A46F9D63ACB608022037D6ACF8ADC11",hash_generated_method="5B6815BD039578BB6C860D2F4455A90B") public FileDescriptor(){}  }
class C{  public void startUploadRepeat(final String hostname,final int port,final String uri,final int repeatWindow,final int reportPeriodMillis,final int fileSizeOctet,final IRepeatListener repeatListener){  mRepeatWrapper.startUploadRepeat(hostname,port,uri,repeatWindow,reportPeriodMillis,fileSizeOctet,repeatListener);}  }
class C{  public static void main(String[] args){  recurse(new File(args[0]));  System.out.println("errors: " + errorCount);}  }
class C{  private boolean typeImplements(String type,ClassReader info,String itf) throws IOException {  while (!"java/lang/Object".equals(type)) {    String[] itfs=info.getInterfaces();    for (int i=0; i < itfs.length; ++i) {      if (itfs[i].equals(itf)) {        return true;      }    }    for (int i=0; i < itfs.length; ++i) {      if (typeImplements(itfs[i],typeInfo(itfs[i]),itf)) {        return true;      }    }    type=info.getSuperName();    info=typeInfo(type);  }  return false;}  }
class C{  @Override public void removeInstanceSnapshot(final MachineSource machineSource) throws SnapshotException {  final DockerMachineSource dockerMachineSource;  try {    dockerMachineSource=new DockerMachineSource(machineSource);  } catch (  MachineException e) {    throw new SnapshotException(e);  }  if (!snapshotUseRegistry) {    try {      docker.removeImage(RemoveImageParams.create(dockerMachineSource.getLocation(false)));    } catch (    IOException ignore) {    }    return;  }  final String registry=dockerMachineSource.getRegistry();  final String repository=dockerMachineSource.getRepository();  if (registry == null || repository == null) {    LOG.error("Failed to remove instance snapshot: invalid machine source: {}",dockerMachineSource);    throw new SnapshotException("Snapshot removing failed. Snapshot attributes are not valid");  }  try {    URL url=UriBuilder.fromUri("http://" + registry).path("/v2/{repository}/manifests/{digest}").build(repository,dockerMachineSource.getDigest()).toURL();    final HttpURLConnection conn=(HttpURLConnection)url.openConnection();    try {      conn.setConnectTimeout(30 * 1000);      conn.setRequestMethod("DELETE");      final int responseCode=conn.getResponseCode();      if ((responseCode / 100) != 2) {        InputStream in=conn.getErrorStream();        if (in == null) {          in=conn.getInputStream();        }        LOG.error("An error occurred while deleting snapshot with url: {}\nError stream: {}",url,IoUtil.readAndCloseQuietly(in));        throw new SnapshotException("Internal server error occurs. Can't remove snapshot");      }    }  finally {      conn.disconnect();    }  } catch (  IOException e) {    LOG.error(e.getLocalizedMessage(),e);  }}  }
class C{  public ByteBuffer peek(int len) throws BufferUnderflowException {  if (len < 0)   throw new IllegalArgumentException();  if (len > remaining())   throw new BufferUnderflowException();  if (len == 0)   return EMPTY_BUFFER;  ByteBuffer chunks[]=peekChunks(len);  if (chunks.length == 1)   return chunks[0];  ByteBuffer result=ByteBuffer.allocate(len);  result.order(order);  peek(result);  result.rewind();  return result;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  uniqueId=null;  op=null;  abbv=null;  title=null;  externalId=null;  department=null;}  }
class C{  public boolean isPassed(){  return passed;}  }
class C{  public void closeAllTabs(boolean animate,boolean uponExit,boolean canUndo){  ArrayList<Integer> closedTabs=new ArrayList<Integer>();  while (getCount() > 0) {    Tab tab=getTabAt(0);    closedTabs.add(tab.getId());    closeTab(tab,animate,uponExit,canUndo,false);  }  if (!uponExit && canUndo && supportsPendingClosures()) {    for (    TabModelObserver obs : mObservers)     obs.allTabsPendingClosure(closedTabs);  }}  }
class C{  public boolean isSetLastExecuteTime(){  return EncodingUtils.testBit(issetBitfield,LASTEXECUTETIME_ISSET_ID);}  }
class C{  public static String addAndDeHump(String input){  StringBuilder sb=new StringBuilder();  for (int i=0; i < input.length(); i++) {    if ((i != 0) && Character.isUpperCase(input.charAt(i))) {      sb.append('-');    }    sb.append(input.charAt(i));  }  return sb.toString().trim().toLowerCase(Locale.ENGLISH);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    MiniClientSageRenderer mcsr=(MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine();    if (mcsr.supportsAdvancedAspectRatios()) {      return mcsr.getAdvancedAspectRatioMode();    }  }  return BasicVideoFrame.getAspectRatioName(stack.getUIMgrSafe().getVideoFrame().getAspectRatioMode());}  }
class C{  public void addNotification(PingNotification notification){  notifications.add(notification);}  }
class C{  protected boolean checkIdle(IndexShard shard,long inactiveTimeNS){  try {    return shard.checkIdle(inactiveTimeNS);  } catch (  EngineClosedException|FlushNotAllowedEngineException e) {    logger.trace("ignore [{}] while marking shard {} as inactive",e.getClass().getSimpleName(),shard.shardId());    return true;  }}  }
class C{  public boolean isEnabled(){  RequestParameters params=new RequestParameters();  ServiceResultIterator resultItr=this.getServices().get(params);  if (resultItr == null || !resultItr.hasNext()) {    return false;  }  ServiceResult res=resultItr.next();  StringHandle handle=new StringHandle();  String enabled=res.getContent(handle).get();  return Boolean.parseBoolean(enabled);}  }
class C{  public final TextBuilder append(char chars[],int offset,int length){  final int end=offset + length;  if ((offset < 0) || (length < 0) || (end > chars.length))   throw new IndexOutOfBoundsException();  int newLength=_length + length;  while (_capacity < newLength) {    increaseCapacity();  }  for (int i=offset, j=_length; i < end; ) {    char[] dstChars=_high[j >> B1];    int dstBegin=j & M1;    int inc=Math.min(C1 - dstBegin,end - i);    System.arraycopy(chars,i,dstChars,dstBegin,inc);    i+=inc;    j+=inc;  }  _length=newLength;  return this;}  }
class C{  protected void onRemoveTopicProtection(String channel,String sourceNick,String sourceLogin,String sourceHostname){}  }
class C{  public AODE(){}  }
class C{  protected void overrideStyleTextChanged(CSSStylableElement e,String text){  Iterator i=cssNavigableDocumentListeners.keySet().iterator();  while (i.hasNext()) {    CSSNavigableDocumentListener l=(CSSNavigableDocumentListener)i.next();    l.overrideStyleTextChanged(e,text);  }}  }
class C{  public IntervalXYToolTipGenerator(String formatString,DateFormat xFormat,DateFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  protected Node newNode(){  return new BindableElement(null,null,namespaceURI,localName);}  }
class C{  public boolean hasUserGrantedPermission(){  return prefManager.hasContactImportPermissionGranted();}  }
class C{  public RenderTarget(String name,int width,int height){  this(name,width,height,0,0,false,false,GLES20.GL_TEXTURE_2D,Config.ARGB_8888,FilterType.LINEAR,WrapType.CLAMP);}  }
class C{  public static boolean isUnderGit(final VirtualFile vFile){  return gitRootOrNull(vFile) != null;}  }
class C{  protected void recipeUpdate(GoogleBaseService service,Recipe recipe) throws ServiceException, IOException {  URL feedUrl=urlFactory.getItemsEntryURL(recipe.getId());  GoogleBaseEntry entry=recipe.toGoogleBaseEntry(feedUrl.toString());  service.update(feedUrl,entry);}  }
class C{  public static double positiveDistance(double a,double b){  double d=b - a;  if (d >= 0) {    return d;  }  return (b + S2.M_PI) - (a - S2.M_PI);}  }
class C{  public JSONArray put(Map<String,Object> value){  this.put(new JSONObject(value));  return this;}  }
class C{  public Process(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  private void resetNotes(){  if (errorInStatus1) {    if (editMode) {      statusText1.setText(editStatus1);    } else {      statusText1.setText(stdStatus1);    }    errorInStatus1=false;  }  resetNotes2();}  }
class C{  public static org.oscm.internal.vo.VOServiceActivation convertToUp(org.oscm.vo.VOServiceActivation oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServiceActivation newVO=new org.oscm.internal.vo.VOServiceActivation();  newVO.setActive(oldVO.isActive());  newVO.setCatalogEntries(convertToUpVOCatalogEntry(oldVO.getCatalogEntries()));  newVO.setService(convertToUp(oldVO.getService()));  return newVO;}  }
class C{  private void testProbability(double probability){  Insertion insertion=new Insertion(probability);  int count=0;  for (int i=0; i < TestThresholds.SAMPLES; i++) {    Solution original=new Solution(1,0);    original.setVariable(0,new Permutation(100));    Solution mutated=insertion.evolve(new Solution[]{original})[0];    if (testInsertion((Permutation)original.getVariable(0),(Permutation)mutated.getVariable(0))) {      count++;    }  }  Assert.assertEquals((double)count / TestThresholds.SAMPLES,probability,TestThresholds.VARIATION_EPS);}  }
class C{  @CanIgnoreReturnValue public E removeLast(){  if (isEmpty()) {    throw new NoSuchElementException();  }  return removeAndGet(getMaxElementIndex());}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  @Override public void removeTileEntity(@Nonnull BlockPos pos){  this.getCube(pos).removeTileEntity(pos);}  }
class C{  public LatLonPoint toLatLonPoint(){  return toLatLonPoint(Ellipsoid.WGS_84,new LatLonPoint.Double());}  }
class C{  public void add(int size,Register dst,Register src1,Register src2){  super.add(size,dst,src1,src2,ShiftType.LSL,0);}  }
class C{  public Builder timeoutDismissCallback(SnackbarTimeoutDismissCallback callback){  timeoutDismissCallback=callback;  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public final void removeTextChangedListener(final TextWatcher watcher){  getView().removeTextChangedListener(watcher);}  }
class C{  public boolean isImSessionSupported(){  return mImSession;}  }
class C{  protected void LocationPath() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_LOCATIONPATH);  boolean seenSlash=tokenIs('/');  if (seenSlash) {    appendOp(4,OpCodes.FROM_ROOT);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_ROOT);    nextToken();  } else   if (m_token == null) {    error(XPATHErrorResources.ER_EXPECTED_LOC_PATH_AT_END_EXPR,null);  }  if (m_token != null) {    if (!RelativeLocationPath() && !seenSlash) {      error(XPATHErrorResources.ER_EXPECTED_LOC_PATH,new Object[]{m_token});    }  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  @SuppressWarnings({"FinalPrivateMethod"}) private final void assertNotReleased(){  if (!isActive()) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,"Trying to access ViewScope CDI context while it is not active");    }    throw new ContextNotActiveException();  }}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case TypesPackage.PACKAGE:{      org.yakindu.base.types.Package package_=(org.yakindu.base.types.Package)theEObject;      T result=casePackage(package_);      if (result == null)       result=caseNamedElement(package_);      if (result == null)       result=defaultCase(theEObject);      return result;    }case TypesPackage.TYPE:{    Type type=(Type)theEObject;    T result=caseType(type);    if (result == null)     result=casePackageMember(type);    if (result == null)     result=caseNamedElement(type);    if (result == null)     result=caseAnnotatableElement(type);    if (result == null)     result=defaultCase(theEObject);    return result;  }case TypesPackage.DECLARATION:{  Declaration declaration=(Declaration)theEObject;  T result=caseDeclaration(declaration);  if (result == null)   result=caseTypedElement(declaration);  if (result == null)   result=casePackageMember(declaration);  if (result == null)   result=caseNamedElement(declaration);  if (result == null)   result=caseAnnotatableElement(declaration);  if (result == null)   result=defaultCase(theEObject);  return result;}case TypesPackage.OPERATION:{Operation operation=(Operation)theEObject;T result=caseOperation(operation);if (result == null) result=caseDeclaration(operation);if (result == null) result=caseTypedElement(operation);if (result == null) result=casePackageMember(operation);if (result == null) result=caseNamedElement(operation);if (result == null) result=caseAnnotatableElement(operation);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.PROPERTY:{Property property=(Property)theEObject;T result=caseProperty(property);if (result == null) result=caseDeclaration(property);if (result == null) result=caseTypedElement(property);if (result == null) result=casePackageMember(property);if (result == null) result=caseNamedElement(property);if (result == null) result=caseAnnotatableElement(property);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.PARAMETER:{Parameter parameter=(Parameter)theEObject;T result=caseParameter(parameter);if (result == null) result=caseTypedElement(parameter);if (result == null) result=caseNamedElement(parameter);if (result == null) result=caseAnnotatableElement(parameter);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TYPED_ELEMENT:{TypedElement typedElement=(TypedElement)theEObject;T result=caseTypedElement(typedElement);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TYPE_SPECIFIER:{TypeSpecifier typeSpecifier=(TypeSpecifier)theEObject;T result=caseTypeSpecifier(typeSpecifier);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.EVENT:{Event event=(Event)theEObject;T result=caseEvent(event);if (result == null) result=caseDeclaration(event);if (result == null) result=caseTypedElement(event);if (result == null) result=casePackageMember(event);if (result == null) result=caseNamedElement(event);if (result == null) result=caseAnnotatableElement(event);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.ENUMERATION_TYPE:{EnumerationType enumerationType=(EnumerationType)theEObject;T result=caseEnumerationType(enumerationType);if (result == null) result=casePrimitiveType(enumerationType);if (result == null) result=caseType(enumerationType);if (result == null) result=casePackageMember(enumerationType);if (result == null) result=caseNamedElement(enumerationType);if (result == null) result=caseAnnotatableElement(enumerationType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.PRIMITIVE_TYPE:{PrimitiveType primitiveType=(PrimitiveType)theEObject;T result=casePrimitiveType(primitiveType);if (result == null) result=caseType(primitiveType);if (result == null) result=casePackageMember(primitiveType);if (result == null) result=caseNamedElement(primitiveType);if (result == null) result=caseAnnotatableElement(primitiveType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.COMPLEX_TYPE:{ComplexType complexType=(ComplexType)theEObject;T result=caseComplexType(complexType);if (result == null) result=caseParameterizedType(complexType);if (result == null) result=caseType(complexType);if (result == null) result=casePackageMember(complexType);if (result == null) result=caseNamedElement(complexType);if (result == null) result=caseAnnotatableElement(complexType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.ENUMERATOR:{Enumerator enumerator=(Enumerator)theEObject;T result=caseEnumerator(enumerator);if (result == null) result=caseDeclaration(enumerator);if (result == null) result=caseTypedElement(enumerator);if (result == null) result=casePackageMember(enumerator);if (result == null) result=caseNamedElement(enumerator);if (result == null) result=caseAnnotatableElement(enumerator);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TYPE_CONSTRAINT:{TypeConstraint typeConstraint=(TypeConstraint)theEObject;T result=caseTypeConstraint(typeConstraint);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TYPE_PARAMETER:{TypeParameter typeParameter=(TypeParameter)theEObject;T result=caseTypeParameter(typeParameter);if (result == null) result=caseType(typeParameter);if (result == null) result=casePackageMember(typeParameter);if (result == null) result=caseNamedElement(typeParameter);if (result == null) result=caseAnnotatableElement(typeParameter);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.PARAMETERIZED_TYPE:{ParameterizedType parameterizedType=(ParameterizedType)theEObject;T result=caseParameterizedType(parameterizedType);if (result == null) result=caseType(parameterizedType);if (result == null) result=casePackageMember(parameterizedType);if (result == null) result=caseNamedElement(parameterizedType);if (result == null) result=caseAnnotatableElement(parameterizedType);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.PACKAGE_MEMBER:{PackageMember packageMember=(PackageMember)theEObject;T result=casePackageMember(packageMember);if (result == null) result=caseNamedElement(packageMember);if (result == null) result=caseAnnotatableElement(packageMember);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.RANGE_CONSTRAINT:{RangeConstraint rangeConstraint=(RangeConstraint)theEObject;T result=caseRangeConstraint(rangeConstraint);if (result == null) result=caseTypeConstraint(rangeConstraint);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.DOMAIN:{Domain domain=(Domain)theEObject;T result=caseDomain(domain);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.TYPE_ALIAS:{TypeAlias typeAlias=(TypeAlias)theEObject;T result=caseTypeAlias(typeAlias);if (result == null) result=caseTypedElement(typeAlias);if (result == null) result=caseType(typeAlias);if (result == null) result=casePackageMember(typeAlias);if (result == null) result=caseNamedElement(typeAlias);if (result == null) result=caseAnnotatableElement(typeAlias);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.ANNOTATION:{Annotation annotation=(Annotation)theEObject;T result=caseAnnotation(annotation);if (result == null) result=casePackageMember(annotation);if (result == null) result=caseNamedElement(annotation);if (result == null) result=caseAnnotatableElement(annotation);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.ANNOTATABLE_ELEMENT:{AnnotatableElement annotatableElement=(AnnotatableElement)theEObject;T result=caseAnnotatableElement(annotatableElement);if (result == null) result=defaultCase(theEObject);return result;}case TypesPackage.ARRAY_TYPE_SPECIFIER:{ArrayTypeSpecifier arrayTypeSpecifier=(ArrayTypeSpecifier)theEObject;T result=caseArrayTypeSpecifier(arrayTypeSpecifier);if (result == null) result=caseTypeSpecifier(arrayTypeSpecifier);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public void split(IndexReader in,Directory[] outputs,boolean seq) throws IOException {  if (outputs == null || outputs.length < 2) {    throw new IOException("Invalid number of outputs.");  }  if (in == null || in.numDocs() < 2) {    throw new IOException("Not enough documents for splitting");  }  int numParts=outputs.length;  FakeDeleteIndexReader input=new FakeDeleteIndexReader(in);  int maxDoc=input.maxDoc();  int partLen=maxDoc / numParts;  for (int i=0; i < numParts; i++) {    input.undeleteAll();    if (seq) {      int lo=partLen * i;      int hi=lo + partLen;      for (int j=0; j < lo; j++) {        input.deleteDocument(j);      }      if (i < numParts - 1) {        for (int j=hi; j < maxDoc; j++) {          input.deleteDocument(j);        }      }    } else {      for (int j=0; j < maxDoc; j++) {        if ((j + numParts - i) % numParts != 0) {          input.deleteDocument(j);        }      }    }    IndexWriter w=new IndexWriter(outputs[i],new IndexWriterConfig(null).setOpenMode(OpenMode.CREATE));    System.err.println("Writing part " + (i + 1) + " ...");    final List<? extends FakeDeleteLeafIndexReader> sr=input.getSequentialSubReaders();    w.addIndexes(sr.toArray(new CodecReader[sr.size()]));    w.close();  }  System.err.println("Done.");}  }
class C{  public void addSiteAssignedVirtualArrayEntry(String internalSiteName,String virtualArray){  if (this.siteAssignedVirtualArrays == null) {    this.siteAssignedVirtualArrays=new StringSetMap();  }  if (this.siteAssignedVirtualArrays.get(internalSiteName) == null) {    siteAssignedVirtualArrays.put(internalSiteName,new StringSet());  }  this.siteAssignedVirtualArrays.get(internalSiteName).add(virtualArray);}  }
class C{  @Override public Workspace parseOutput(final String stdout,final String stderr){  super.throwIfError(stderr);  final String[] lines=getLines(stdout);  if (lines.length > 2 && lines[0].contains("==========")) {    final String workspaceName=getValue(lines[1]);    final String collectionURL=getValue(lines[2]);    final List<Workspace.Mapping> mappings=new ArrayList<Workspace.Mapping>(10);    for (int i=3; i < lines.length; i++) {      Workspace.Mapping mapping=getMapping(lines[i]);      if (mapping != null) {        mappings.add(mapping);      }    }    return new Workspace(collectionURL,workspaceName,"","","",mappings);  }  return null;}  }
class C{  public CharBox(Char c){  cf=c.getCharFont();  size=c.getMetrics().getSize();  width=c.getWidth();  height=c.getHeight();  depth=c.getDepth();}  }
class C{  @Override public Object copy(){  SparseInstance result=new SparseInstance(this);  result.m_Dataset=m_Dataset;  return result;}  }
class C{  public String toString(){  String result=super.toString() + "IssuerAlternativeName [\n";  if (names == null) {    result+="  null\n";  } else {    for (    GeneralName name : names.names()) {      result+="  " + name + "\n";    }  }  result+="]\n";  return result;}  }
class C{  public QueryExecution createQueryExecution(Query query,Model model,QuerySolution initialBinding){  Dataset dataset=getDataset(model);  if (dataset != null) {    return createQueryExecution(query,dataset,initialBinding);  } else {    QueryExecution qexec=QueryExecutionFactoryFilter.get().create(query,model,initialBinding);    adjustQueryExecution(qexec);    return qexec;  }}  }
class C{  public void testGetListeners(){  AbstractThrottle instance=new AbstractThrottleImpl();  Vector<PropertyChangeListener> expResult=new Vector<>();  Vector<PropertyChangeListener> result=instance.getListeners();  assertEquals(expResult,result);}  }
class C{  private void attemptOutlineStrokeSelection(){  StrokeChooserPanel panel=new StrokeChooserPanel(this.outlineStrokeSample,this.availableStrokeSamples);  int result=JOptionPane.showConfirmDialog(this,panel,localizationResources.getString("Stroke_Selection"),JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE);  if (result == JOptionPane.OK_OPTION) {    this.outlineStrokeSample.setStroke(panel.getSelectedStroke());  }}  }
class C{  public DViewExtensions(JFrame parent,String title,X509Extension extensions){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.extensions=extensions;  initComponents();}  }
class C{  public void testVariance(){  m_Filter=getFilter();  ((PrincipalComponents)m_Filter).setVarianceCovered(0.8);  performTest();}  }
class C{  private void clearReportsDirectory(HttpServlet servlet){}  }
class C{  void updateActionCount(){  if (!artifactUploadState.getFileSelected().isEmpty()) {    processBtn.setCaption(SPUILabelDefinitions.PROCESS + "<div class='unread'>" + artifactUploadState.getFileSelected().size()+ HTML_DIV);  } else {    processBtn.setCaption(SPUILabelDefinitions.PROCESS);  }}  }
class C{  protected DeclaredTypeWithAccessModifierImpl(){  super();}  }
class C{  public Path append(String path){  if (path.indexOf(SEPARATOR) == -1 && path.indexOf("\\") == -1 && path.indexOf(DEVICE_SEPARATOR) == -1) {    int tailLength=path.length();    if (tailLength < 3) {      if (tailLength == 0 || ".".equals(path)) {        return this;      }      if ("..".equals(path))       return removeLastSegments(1);    }    int myLen=segments.length;    String[] newSegments=new String[myLen + 1];    System.arraycopy(segments,0,newSegments,0,myLen);    newSegments[myLen]=path;    return new Path(device,newSegments,separators & ~HAS_TRAILING);  }  return append(new Path(path));}  }
class C{  public final void mul(GMatrix m1,GMatrix m2){  int i, j, k;  if (m1.nCol != m2.nRow || nRow != m1.nRow || nCol != m2.nCol) {    throw new MatrixSizeException();  }  double[][] tmp=new double[nRow][nCol];  for (i=0; i < m1.nRow; i++) {    for (j=0; j < m2.nCol; j++) {      tmp[i][j]=0.0;      for (k=0; k < m1.nCol; k++) {        tmp[i][j]+=m1.values[i][k] * m2.values[k][j];      }    }  }  values=tmp;}  }
class C{  public boolean isCommissionOrders(){  Object oo=get_Value(COLUMNNAME_CommissionOrders);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateDistributionTableStyle(){  if (managementUIState.getDistributionTableFilters().getPinnedTargetId().isPresent() && null != managementUIState.getDistributionTableFilters().getPinnedTargetId().get()) {    final String alreadyPinnedControllerId=managementUIState.getDistributionTableFilters().getPinnedTargetId().get();    if (null != alreadyPinnedControllerId && alreadyPinnedControllerId.equals(target.getControllerId())) {      eventBus.publish(this,PinUnpinEvent.PIN_TARGET);    }  }}  }
class C{  public static boolean isSpecialMap(Class cls){  return HashMap.class.equals(cls) || LinkedHashMap.class.equals(cls);}  }
class C{  public Category(String scheme,String term,String label){  this.scheme=scheme;  if (term == null) {    throw new NullPointerException("Invalid term. Cannot be null");  }  this.term=term;  this.label=label;}  }
class C{  public void testRandomStrings() throws Exception {  Random random=random();  checkRandomData(random,analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  private final short validatePermSplitFactor(String splitFactor) throws AdeFlowException {  short permSplitFactor=Short.parseShort(splitFactor);  if (permSplitFactor <= 0 || ((m_outerFramingFlow.getDuration() / permSplitFactor) < MILLISECONDS_IN_ONE_MINUTE)) {    throw new AdeFlowException("Permanent Split Factor cannot be negative or 0.");  }  return permSplitFactor;}  }
class C{  protected boolean isOffContentRight(float p){  if (p > mContentRect.right)   return true; else   return false;}  }
class C{  public void install(String group,File osgiJar) throws Exception {  String symbolicName;  String version;  boolean isSource;  try (JarFile jarFile=new JarFile(osgiJar)){    if (jarFile.getManifest() != null) {      Attributes attr=jarFile.getManifest().getMainAttributes();      symbolicName=beforeSemicolon(attr.getValue("Bundle-SymbolicName"));      version=attr.getValue("Bundle-Version");      String source=attr.getValue("Eclipse-SourceBundle");      if (source != null) {        isSource=true;        symbolicName=beforeSemicolon(source);      } else {        isSource=false;      }    } else {      String name=osgiJar.getName();      int lastUnderscore=name.lastIndexOf("_");      symbolicName=name.substring(0,lastUnderscore);      version=name.substring(lastUnderscore + 1);      isSource=false;      System.err.println(osgiJar.getAbsolutePath() + " has no manifest.  Guessing name=" + symbolicName+ " and version="+ version);    }  } catch (  RuntimeException e) {    System.err.println("Error parsing manifest of " + osgiJar.getAbsolutePath() + ", unable to put this jar into maven.");    return;  }  artifactMap.put(new Coordinate(group,symbolicName),new Artifact(Version.parseVersion(version),isSource,osgiJar));}  }
class C{  public static Object invokeBIF(PageContext pc,Object[] args,String className,String bundleName,String bundleVersion) throws PageException {  try {    Class<?> clazz=ClassUtil.loadClassByBundle(className,bundleName,bundleVersion,pc.getConfig().getIdentification());    BIF bif;    if (Reflector.isInstaneOf(clazz,BIF.class))     bif=(BIF)clazz.newInstance(); else     bif=new BIFProxy(clazz);    return bif.invoke(pc,args);  } catch (  Exception e) {    throw Caster.toPageException(e);  }}  }
class C{  public ToStringBuilder append(final double[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  protected VisorNodeEventsCollectorJob(VisorNodeEventsCollectorTaskArg arg,boolean debug){  super(arg,debug);}  }
class C{  private static void addInternal(String name,ObjectIdentifier oid,String className){  OIDInfo info=new OIDInfo(name,oid,className);  oidMap.put(oid,info);  nameMap.put(name,info);}  }
class C{  String dup(final String[] split,final boolean match){  if (split.length != 4) {    return "Duplicate line has incorrect number of fields.";  }  final String dup1=split[2];  final RegionRestriction r1=region(mNames,dup1);  if (r1 == null) {    return "Invalid region:" + dup1;  }  final String dup2=split[3];  final RegionRestriction r2=region(mNames,dup2);  if (r2 == null) {    return "Invalid region:" + dup2;  }  if (!lengthsEqual(mNames,r1,r2)) {    return "Lengths of regions disagree.";  }  if (match) {    mDuplicates.add(new Pair<>(r1,r2));  }  return null;}  }
class C{  public boolean isAutoConnect(){  return m_autoConnect;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_4__INDEX_1:    setIndex_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public S first(){  return first;}  }
class C{  protected Anonymous_constraint_1_Impl(){  super();}  }
class C{  public FileUtils(){  super();}  }
class C{  protected void calculatePositionArray(){  if (model == null) {    return;  }  int pos=0;  int items=model.getSize();  positions=new int[items + 1];  positions[0]=0;  for (int i=0; i < items; i++) {    Object value=model.getElementAt(i);    JComponent component=renderer.getTickerRendererComponent(this,value);    Dimension size=component.getPreferredSize();    pos+=size.width + gap;    positions[i + 1]=pos;  }}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String streamHeadsHeader=null;  String elevationModifiedHeader=null;  String correctedDemHeader=null;  List<StreamHead> streamHeadList=new ArrayList<>();  int counter=0;  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      streamHeadsHeader=args[i];    } else     if (i == 2) {      elevationModifiedHeader=args[i];    } else     if (i == 3) {      correctedDemHeader=args[i];    } else     if (i == 4) {      maxRadius=Double.parseDouble(args[i]);    }  }  if ((demHeader == null) || (streamHeadsHeader == null) || (elevationModifiedHeader == null)|| (correctedDemHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    streamHeads=new WhiteboxRaster(streamHeadsHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    noData=dem.getNoDataValue();    gridRes=dem.getCellSizeX();    elevationModified=new WhiteboxRaster(elevationModifiedHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    elevationModified.setPreferredPalette("blueyellow.pal");    elevationModified.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    elevationModified.setZUnits("dimensionless");    correctedDEM=new WhiteboxRaster(correctedDemHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    correctedDEM.setPreferredPalette("blueyellow.pal");    correctedDEM.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    correctedDEM.setZUnits("dimensionless");    if (streamHeads.getNumberColumns() != numCols || streamHeads.getNumberRows() != numRows) {      showFeedback("Input images must have the same dimensions.");      return;    }    updateProgress("Loop 1 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (dem.getValue(row,col) != noData) {          elevationModified.setValue(row,col,0);        } else {          elevationModified.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 4:",(int)progress);    }    updateProgress("Loop 2 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (streamHeads.getValue(row,col) == 1) {          streamHeadList.add(new StreamHead(col,row,dem.getValue(row,col)));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 4:",(int)progress);    }    streamHeadList=OrderStreamHeads(streamHeadList);    updateProgress("Loop 3 of 4:",0);    for (    StreamHead streamHead : streamHeadList) {      CheckFlowPath(streamHead.GetXCoord(),streamHead.GetYCoord());      counter=counter + 1;      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * counter / streamHeadList.size());      updateProgress("Loop 3 of 4:",(int)progress);    }    updateProgress("Loop 4 of 4:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (elevationModified.getValue(row,col) != noData) {          correctedDEM.setValue(row,col,dem.getValue(row,col) - elevationModified.getValue(row,col));        } else {          correctedDEM.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 4 of 4:",(int)progress);    }    elevationModified.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    elevationModified.addMetadataEntry("Created on " + new Date());    correctedDEM.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    correctedDEM.addMetadataEntry("Created on " + new Date());    dem.close();    streamHeads.close();    elevationModified.close();    correctedDEM.close();    returnData(correctedDemHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void clientLeftGame(){  if (!SwingUtilities.isEventDispatchThread()) {    SwingAction.invokeAndWait(null);    return;  }  ThreadUtil.sleep(100);  m_gameSelectorModel.loadDefaultGame(this);  m_setupPanelModel.showSelectType();  setVisible(true);}  }
class C{  public static void show(int t){  defer=false;  draw();  try {    Thread.sleep(t);  } catch (  InterruptedException e) {    System.out.println("Error sleeping");  }  defer=true;}  }
class C{  @Realtime(limit=LINEAR) public void flip(int fromIndex,int toIndex){  if ((fromIndex < 0) || (toIndex < fromIndex))   throw new IndexOutOfBoundsException();  int i=fromIndex >>> 6;  int j=toIndex >>> 6;  ensureCapacity(j + 1);  if (i == j) {    bits[i]^=(-1L << fromIndex) & ((1L << toIndex) - 1);    return;  }  bits[i]^=-1L << fromIndex;  bits[j]^=(1L << toIndex) - 1;  for (int k=i + 1; k < j; k++) {    bits[k]^=-1;  }}  }
class C{  public static boolean isGwtVersionKnownAndAtLeast25(String directoryName){  if (!directoryName.startsWith("gwt-")) {    return false;  }  return SdkUtils.compareVersionStrings(directoryName.substring(4),"2.5.0") >= 0;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.PAIR;}  }
class C{  private void modifyBasicProp(final String docNumber) throws TaxCalculatorExeption {  LOGGER.debug("Entered into modifyBasicProp, BasicProperty: " + basicProp);  LOGGER.debug("modifyBasicProp: PropTypeId: " + propTypeId + ", PropUsageId: "+ propUsageId+ ", PropOccId: "+ propOccId+ ", statusModifyRsn: "+ modifyRsn+ ", NoOfAmalgmatedProps: "+ (amalgPropIds != null ? amalgPropIds.length : "NULL"));  Date propCompletionDate=null;  final Character status=STATUS_WORKFLOW;  final PropertyTypeMaster proptypeMstr=propertyTypeMasterDAO.findById(Integer.valueOf(propTypeId),false);  if (!proptypeMstr.getCode().equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND))   propCompletionDate=propService.getLowestDtOfCompFloorWise(propertyModel.getPropertyDetail().getFloorDetailsProxy()); else   propCompletionDate=propertyModel.getPropertyDetail().getDateOfCompletion();  final PropertyMutationMaster propMutMstr=(PropertyMutationMaster)propService.getPropPerServ().find("from PropertyMutationMaster PM where upper(PM.code) = ?",modifyRsn);  basicProp.setPropertyMutationMaster(propMutMstr);  basicProp.setPropOccupationDate(propCompletionDate);  setProperty(propService.createProperty(propertyModel,getAreaOfPlot(),modifyRsn,propTypeId,propUsageId,propOccId,status,propertyModel.getDocNumber(),null,floorTypeId,roofTypeId,wallTypeId,woodTypeId,taxExemptedReason));  updatePropertyID(basicProp);  propertyModel.setPropertyModifyReason(modifyRsn);  propertyModel.setBasicProperty(basicProp);  propertyModel.setEffectiveDate(propCompletionDate);  final Long oldPropTypeId=oldProperty.getPropertyDetail().getPropertyTypeMaster().getId();  final PropertyTypeMaster propTypeMstr=(PropertyTypeMaster)getPersistenceService().find("from PropertyTypeMaster ptm where ptm.code = ?",OWNERSHIP_TYPE_VAC_LAND);  if ((oldPropTypeId == propTypeMstr.getId() && Long.parseLong(propTypeId) != propTypeMstr.getId() || oldPropTypeId != propTypeMstr.getId() && Long.parseLong(propTypeId) == propTypeMstr.getId()) && !propertyModel.getStatus().equals('W'))   if (propTypeMstr != null && org.apache.commons.lang.StringUtils.equals(propTypeMstr.getId().toString(),propTypeId))   changePropertyDetail(propertyModel,new VacantProperty(),0); else   changePropertyDetail(propertyModel,new BuiltUpProperty(),propertyModel.getPropertyDetail().getNoofFloors());  Property modProperty=null;  try {    modProperty=propService.modifyDemand(propertyModel,oldProperty);    if (PROPERTY_MODIFY_REASON_GENERAL_REVISION_PETITION.equals(modifyRsn)) {      propService.calculateGrpPenalty(modProperty,propCompletionDate);    }  } catch (  TaxCalculatorExeption e) {    throw new TaxCalculatorExeption();  }  if (modProperty != null && !modProperty.getDocuments().isEmpty())   propService.processAndStoreDocument(modProperty.getDocuments());  if (modProperty == null)   basicProp.addProperty(propertyModel); else   basicProp.addProperty(modProperty);  LOGGER.debug("Exiting modifyBasicProp");}  }
class C{  public boolean isSameShard(ShardRouting other){  return index.equals(other.index) && shardId == other.shardId;}  }
class C{  private Response buildLoginResponse(String service,String source,boolean setCookie,boolean setMaxAge,LoginStatus loginStatus,HttpServletRequest request) throws UnsupportedEncodingException, URISyntaxException {  String authTokenName=source != null && source.equals(FROM_PORTAL) ? RequestProcessingUtils.AUTH_PORTAL_TOKEN_HEADER : RequestProcessingUtils.AUTH_TOKEN_HEADER;  Response.ResponseBuilder resp=null;  if (service != null && !service.isEmpty()) {    resp=Response.status(302).location(getServiceURLForRedirect(service,request)).header(authTokenName,loginStatus.getToken());  } else {    resp=Response.ok(new LoggedIn(loginStatus.getUser())).header(authTokenName,loginStatus.getToken());  }  if (setCookie) {    return resp.cookie(createWsCookie(authTokenName,loginStatus.getToken(),setMaxAge,request.getHeader("user-agent"))).build();  } else {    return resp.build();  }}  }
class C{  public void shutdown() throws Exception {  try {    if (solrClient != null)     solrClient.close();    List<Callable<JettySolrRunner>> shutdowns=new ArrayList<>(jettys.size());    for (    final JettySolrRunner jetty : jettys) {      shutdowns.add(null);    }    jettys.clear();    Collection<Future<JettySolrRunner>> futures=executor.invokeAll(shutdowns);    Exception shutdownError=checkForExceptions("Error shutting down MiniSolrCloudCluster",futures);    if (shutdownError != null) {      throw shutdownError;    }  }  finally {    executor.shutdown();    executor.awaitTermination(2,TimeUnit.SECONDS);    try {      if (!externalZkServer) {        zkServer.shutdown();      }    }  finally {      System.clearProperty("zkHost");    }  }}  }
class C{  public RotatingTransformer(int degrees){  this(degrees,0.7f);}  }
class C{  protected void closeDialogOk(){  try {    networkCreationPanel.commit(networkPanel,"FeedForward");    super.closeDialogOk();  } catch (  NumberFormatException nfe) {    JOptionPane.showMessageDialog(null,"Inappropriate Field Values (Numbers only in all all field)","Error",JOptionPane.ERROR_MESSAGE);    nfe.printStackTrace();  }}  }
class C{  public boolean run(){  if (bannedClassesCreated())   return false;  List<JimpleTransform> changes=new LinkedList<JimpleTransform>();  boolean success=generateTransforms(changes);  if (success) {    try {      for (      JimpleTransform jt : changes) {        jt.applyTransform();      }    } catch (    Exception e) {      logger.error("Error applying File Precision Transform.",e);      return false;    }    return true;  } else {    logger.info("FilePrecisionTransforms failed!");    return false;  }}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public static int count(final long x){  long byteSums=x - ((x & 0xa * ONES_STEP_4) >>> 1);  byteSums=(byteSums & 3 * ONES_STEP_4) + ((byteSums >>> 2) & 3 * ONES_STEP_4);  byteSums=(byteSums + (byteSums >>> 4)) & 0x0f * ONES_STEP_8;  return (int)(byteSums * ONES_STEP_8 >>> 56);}  }
class C{  public static String escapeCharacterToDisplay(String text){  Pattern pattern=PLAIN_TEXT_TO_ESCAPE;  Matcher match=pattern.matcher(text);  if (match.find()) {    StringBuilder out=new StringBuilder();    int end=0;    do {      int start=match.start();      out.append(text.substring(end,start));      end=match.end();      int c=text.codePointAt(start);      if (c == ' ') {        for (int i=1, n=end - start; i < n; ++i) {          out.append("&nbsp;");        }        out.append(' ');      } else       if (c == '\r' || c == '\n') {        out.append("<br>");      } else       if (c == '<') {        out.append("&lt;");      } else       if (c == '>') {        out.append("&gt;");      } else       if (c == '&') {        out.append("&amp;");      }    } while (match.find());    out.append(text.substring(end));    text=out.toString();  }  return text;}  }
class C{  public static NSObject parse(byte[] data) throws PropertyListFormatException, UnsupportedEncodingException {  BinaryPropertyListParser parser=new BinaryPropertyListParser();  return parser.doParse(data);}  }
class C{  public void test_stressSessionProtection(){  stressSessionProtection(0);  stressSessionProtection(1024);}  }
class C{  public boolean validateStateTransition(){  Log.v(LOG_TAG,String.format("Print state depository: %s",printStates()));switch (mTransitionDirection) {case DO_NOTHING:    Log.v(LOG_TAG,"No direction requested, verifying network states");  return validateNetworkStates();case TO_CONNECTION:Log.v(LOG_TAG,"Transition to CONNECTED");return validateNetworkConnection();case TO_DISCONNECTION:Log.v(LOG_TAG,"Transition to DISCONNECTED");return validateNetworkDisconnection();default :Log.e(LOG_TAG,"Invalid transition direction.");return false;}}  }
class C{  public TagException(Tag tag,Throwable cause){  super(tag.toString(),cause);}  }
class C{  public void generateCode(BlockScope blockScope){  if ((this.bits & ASTNode.IsReachable) == 0) {    return;  }  if ((this.bits & ASTNode.HasBeenGenerated) != 0)   return;  if (this.binding != null) {    SyntheticArgumentBinding[] enclosingInstances=((NestedTypeBinding)this.binding).syntheticEnclosingInstances();    for (int i=0, slotSize=0, count=enclosingInstances == null ? 0 : enclosingInstances.length; i < count; i++) {      SyntheticArgumentBinding enclosingInstance=enclosingInstances[i];      enclosingInstance.resolvedPosition=++slotSize;      if (slotSize > 0xFF) {        blockScope.problemReporter().noMoreAvailableSpaceForArgument(enclosingInstance,blockScope.referenceType());      }    }  }  generateCode();}  }
class C{  InterfaceAddress(Inet6Address address,short prefixLength){  this.address=address;  this.broadcastAddress=null;  this.prefixLength=prefixLength;}  }
class C{  @PUT @Path("/disablewarden") @Produces(MediaType.APPLICATION_JSON) @Description("Disables warden.") public Response disableWarden(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.disableWarden();  return Response.status(Status.OK).build();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private static String printStatementData(StringBuilder stringBuilder,StatementData statement,String lastSchema,boolean pureSQL,int sqlIndex){  String schema=statement.getDefaultSchema();  printOptions(stringBuilder,statement.getOptions(),pureSQL);  printSchema(stringBuilder,schema,lastSchema,pureSQL);  String query=statement.getQuery();  if (query == null)   query=new String(statement.getQueryAsBytes());  if (pureSQL) {    println(stringBuilder,formatSQL(query));  } else {    println(stringBuilder,"- SQL(" + sqlIndex + ") = "+ query);  }  return schema;}  }
class C{  public int findNextPresentFromEnd(@Nonnull IInventory inv){  for (int i=inv.getSizeInventory() - 1; i >= 0; --i) {    if (inv.getStackInSlot(i) != null)     return i;  }  return -1;}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public boolean isPlural(){  return typeString.contains(SUFFIX_PLURAL);}  }
class C{  public void resetViewPortOffsets(){  mCustomViewPortEnabled=false;  calculateOffsets();}  }
class C{  public static float max(final float a,final float b,final float c){  return Math.max(Math.max(a,b),c);}  }
class C{  public int doEndTag() throws JspException {  return EVAL_PAGE;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E pop(){  if (elementCount == 0) {    throw new EmptyStackException();  }  final int index=--elementCount;  final E obj=(E)elementData[index];  elementData[index]=null;  modCount++;  return obj;}  }
class C{  private void onUserRemoved(int userId){synchronized (this) {    mDbHelpers.delete(userId);    if (LOCAL_LOGV)     Log.d(TAG,"User " + userId + " is removed");  }}  }
class C{  @Override public void testRunStarted(Description description){  LoggingUtils.getEvoLogger().info("* Number of test cases to execute: " + description.testCount());}  }
class C{  public Queue<Pair<Env<AttrContext>,JCClassDecl>> desugar(Queue<Env<AttrContext>> envs){  ListBuffer<Pair<Env<AttrContext>,JCClassDecl>> results=new ListBuffer<>();  for (  Env<AttrContext> env : envs)   desugar(env,results);  return stopIfError(CompileState.FLOW,results);}  }
class C{  public void addValueChangedListener(ValueChangedListener listener){  listeners.add(listener);}  }
class C{  public img addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public double[] ChebyshevNodes(double a,double b,int n){  double t0=(a + b) / 2.0;  double t1=(b - 1) / 2.0;  double[] retval=new double[n];  for (int i=0; i < n; i++)   retval[i]=t0 + t1 * Math.cos((2 * i + 1) / (2 * n) * Math.PI);  return retval;}  }
class C{  public static void show(Context context,String message){  Toast toast=Toast.makeText(context,message,Toast.LENGTH_LONG);  LinearLayout layout=(LinearLayout)toast.getView();  TextView view=(TextView)layout.getChildAt(0);  view.setTextAppearance(context,R.style.text_large_white);  toast.show();}  }
class C{  public Accounting cleanup(){  if (!this.has("requests"))   return this;  JSONObject requests=this.getJSONObject("requests");  for (  String path : requests.keySet()) {    JSONObject events=requests.getJSONObject(path);    long pivotTime=System.currentTimeMillis() - ONE_HOUR_MILLIS;    while (events.length() > 0 && Long.parseLong(events.keys().next()) < pivotTime)     events.remove(events.keys().next());    if (events.length() == 0)     requests.remove(path);  }  return this;}  }
class C{  public String sqlMetadata_primaryKeyTables(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_primaryKeyTables(catalogName,schemaName);}  }
class C{  private void addGroupsToGroup(String groupName,Collection<PrincipalId> groups) throws Exception {  for (  PrincipalId groupId : groups) {    getIDMClient().addGroupToGroup(tenant,groupId,groupName);  }}  }
class C{  private static void readRefactoringDescriptors(final InputStream stream,final Collection collection,final IProgressMonitor monitor) throws CoreException {  try {    monitor.beginTask(RefactoringCoreMessages.RefactoringHistoryService_retrieving_history,1);    final RefactoringDescriptor[] results=new RefactoringSessionReader(true,null).readSession(new InputSource(new BufferedInputStream(stream))).getRefactorings();    for (int index=0; index < results.length; index++)     collection.add(results[index]);  }  finally {    monitor.done();  }}  }
class C{  public Object createReferenceCountOwner(){  Object result=null;  if (trackReferenceCounts()) {    result=new Object();    setReferenceCountOwner(result);  }  return result;}  }
class C{  private static String poolNameToMetricName(String poolName){  return poolName.toLowerCase().replaceAll("\\s+","-");}  }
class C{  final public boolean isReadOnly(){  return true;}  }
class C{  @Override public void endWindow(){  for (  Map.Entry<V,ArrayList<K>> e : map.entrySet()) {    HashMap<V,ArrayList<K>> tuple=new HashMap<V,ArrayList<K>>(1);    tuple.put(e.getKey(),e.getValue());    index.emit(tuple);  }  map.clear();}  }
class C{  public MockHiveMetastoreClient(){  dbNameToDatabase=new HashMap<>();  specToTable=new HashMap<>();  specToPartition=new HashMap<>();}  }
class C{  public int recordReturnType(CtClass type,boolean useResultVar) throws CompileError {  gen.recordType(type);  return gen.recordReturnType(type,"$r",(useResultVar ? resultVarName : null),stable);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return node == null ? "" : node.getSecondaryLabel();}  }
class C{  public static JCExpression typeIn(JCExpression tree){switch (tree.getTag()) {case ANNOTATED_TYPE:    return ((JCAnnotatedType)tree).underlyingType;case IDENT:case TYPEIDENT:case SELECT:case TYPEARRAY:case WILDCARD:case TYPEPARAMETER:case TYPEAPPLY:case ERRONEOUS:  return tree;default :throw new AssertionError("Unexpected type tree: " + tree);}}  }
class C{  Set<Expr> clone_live(Set<Expr> phis,Set<Expr> live,Edge p){  if (phis.isEmpty() || live.isEmpty())   return live;  Set<Expr> copy=new TreeSet<Expr>();  for (  Expr e : live)   copy.add(phis.contains(e) ? e.args[findPhiArg(e,p)] : e);  return copy;}  }
class C{  public static Matcher<Method> names(String methodName){  return new Names(methodName);}  }
class C{  private void decrementAccessCount(){  if (accessCount.get() > 0) {    accessCount.decrementAndGet();  }}  }
class C{  public void checkActions(LexScan scanner,LexParse parser){  EOFActions eofActions=parser.getEOFActions();  for (  Action a : scanner.actions)   if (!a.equals(usedActions.get(a)) && !eofActions.isEOFAction(a))   Out.warning(scanner.file,ErrorMessages.NEVER_MATCH,a.priority - 1,-1);}  }
class C{  public SensorTurnoutOperationConfig(TurnoutOperation op){  super(op);}  }
class C{  public void testCertificates() throws Exception {  Identity i=new IdentityStub("iii");  PublicKeyStub pk1=new PublicKeyStub("kkk","fff",null);  CertificateStub c1=new CertificateStub("fff",null,null,pk1);  CertificateStub c2=new CertificateStub("zzz",null,null,pk1);  i.addCertificate(c1);  i.addCertificate(c2);  java.security.Certificate[] s=i.certificates();  assertEquals(2,s.length);  assertTrue(c1.equals(s[0]) || c2.equals(s[0]));  assertTrue(c1.equals(s[1]) || c2.equals(s[1]));  s[0]=null;  s[1]=null;  s=i.certificates();  assertEquals(2,s.length);  assertTrue(c1.equals(s[0]) || c2.equals(s[0]));  assertTrue(c1.equals(s[1]) || c2.equals(s[1]));}  }
class C{  public void clear(){  for (int i=0; i < this.getSeriesCount(); i++) {    this.getSeries(i).clear();  }}  }
class C{  public void writeLine(long time,String type,float[] column){  String str=Long.toString(time);  str+=", " + type;  for (int i=0; i < column.length; ++i) {    str+=", " + column[i];  }  writer.println(str);}  }
class C{  public static void assertNoExceptionsOnGetters(final Object obj) throws Exception {  final Class<?> clazz=obj.getClass();  final BeanInfo beanInfo=Introspector.getBeanInfo(clazz);  final PropertyDescriptor[] propertyDescriptors=beanInfo.getPropertyDescriptors();  for (  final PropertyDescriptor propertyDescriptor : propertyDescriptors) {    final Method readMethod=propertyDescriptor.getReadMethod();    if (readMethod != null) {      try {        readMethod.invoke(obj,new Object[]{});      } catch (      final InvocationTargetException e) {        final StringBuffer msg=new StringBuffer();        msg.append("Failure: " + propertyDescriptor.getName());        msg.append(" Exception: " + e.getCause().getClass());        msg.append(" Msg: " + e.getCause().getMessage());        throw new AssertionFailedError(msg.toString());      }    }  }}  }
class C{  private Base64(){}  }
class C{  static boolean isFullRelease(int buttonState,int button){  final int buttonsNumber=XToolkit.getNumberOfButtonsForMask();  if (button < 0 || button > buttonsNumber) {    return buttonState == 0;  } else {    return buttonState == XlibUtil.getButtonMask(button);  }}  }
class C{  public TypeScriptClassLoader(ClassLoader parent,TypeScriptCompiler compiler,Cache codeCache){  super(parent);  this.compiler=compiler;  this.codeCache=codeCache;}  }
class C{  public void returnValue(){  mv.visitInsn(returnType.getOpcode(Opcodes.IRETURN));}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (use_1: ");  result.append(use_1);  result.append(')');  return result.toString();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_2__MORE_CODE_1:    getMoreCode_1().clear();  return;}super.eUnset(featureID);}  }
class C{  protected KeySpec engineGetKeySpec(SecretKey key,Class<?> keySpec) throws InvalidKeySpecException {  try {    if ((key instanceof SecretKey) && (key.getAlgorithm().equalsIgnoreCase("DES")) && (key.getFormat().equalsIgnoreCase("RAW"))) {      if ((keySpec != null) && DESKeySpec.class.isAssignableFrom(keySpec)) {        return new DESKeySpec(key.getEncoded());      } else {        throw new InvalidKeySpecException("Inappropriate key specification");      }    } else {      throw new InvalidKeySpecException("Inappropriate key format/algorithm");    }  } catch (  InvalidKeyException e) {    throw new InvalidKeySpecException("Secret key has wrong size");  }}  }
class C{  public static View create(String namespace,String name,List<Expression> parameters){  return new View(namespace,name,parameters);}  }
class C{  void popDummy(){  Operand r=pop();  if (VM.VerifyAssertions)   opt_assert(r == DUMMY);}  }
class C{  public SourceRange(int startPosition,int length){  this.startPosition=startPosition;  this.length=length;}  }
class C{  public List<String> nodePaths(CuratorFramework zkClient,String nodeName) throws Exception {  List<String> nodes=new ArrayList<>();  List<String> parent=zkClient.getChildren().forPath(basePath(nodeName));  for (  String nodePath : parent) {    nodes.add(ZKPaths.makePath(basePath(nodeName),nodePath));  }  return nodes;}  }
class C{  public RMSProp(){  this(0.9);}  }
class C{  public boolean hasTitle(){  return !TextUtils.isEmpty(title);}  }
class C{  protected static boolean isNightMode(Context context){  int currentNightMode=context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;  return currentNightMode == Configuration.UI_MODE_NIGHT_YES;}  }
class C{  public T caseTypeRef(TypeRef object){  return null;}  }
class C{  public Path bin(){  return root.resolve("bin");}  }
class C{  public void dumpCreatedResourceBundles(){  String location=FileUtils.getFilePathToSaveFromUser("Choose Location");  if (location != null) {    dumpCreatedResourceBundles(location);  }}  }
class C{  private static DevAndMainVersions allReleaseFrom(final yacyUpdateLocation location){  Document scraper;  try {    final DigestURL uri=location.getLocationURL();    Thread.currentThread().setName("allReleaseFrom - host " + uri.getHost());    scraper=Switchboard.getSwitchboard().loader.loadDocument(uri,CacheStrategy.NOCACHE,null,ClientIdentification.yacyInternetCrawlerAgent);  } catch (  final IOException e) {    return null;  }  final Collection<AnchorURL> anchors=scraper.getAnchors();  final TreeSet<yacyRelease> mainReleases=new TreeSet<yacyRelease>();  final TreeSet<yacyRelease> devReleases=new TreeSet<yacyRelease>();  for (  final DigestURL url : anchors) {    try {      final yacyRelease release=new yacyRelease(url,location.getPublicKey());      if (release.isMainRelease()) {        mainReleases.add(release);      } else {        devReleases.add(release);      }    } catch (    final RuntimeException e) {      continue;    }  }  Switchboard.getSwitchboard().setConfig("update.time.lookup",System.currentTimeMillis());  return new DevAndMainVersions(devReleases,mainReleases);}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  setBeforeCaretText(this.beforeCaret);  setAfterCaretText(this.afterCaret);}  }
class C{  public void insert(String name,boolean is_inclusive){  if (states.containsKey(name))   return;  Integer code=numStates++;  states.put(name,code);  if (is_inclusive)   inclusive.add(code);}  }
class C{  public void testDeleteIfExistsOpenFile() throws IOException {  Path dir=wrap(createTempDir());  OutputStream file=Files.newOutputStream(dir.resolve("stillopen"));  file.write(5);  file.close();  InputStream is=Files.newInputStream(dir.resolve("stillopen"));  try {    Files.deleteIfExists(dir.resolve("stillopen"));    fail("should have gotten exception");  } catch (  IOException e) {    assertTrue(e.getMessage().contains("access denied"));  }  is.close();}  }
class C{  private int calculateTop(View child,boolean duringLayout){  int myHeight=duringLayout ? getMeasuredHeight() : getHeight();  int childHeight=duringLayout ? child.getMeasuredHeight() : child.getHeight();  int childTop=0;switch (mGravity) {case Gravity.TOP:    childTop=mSpinnerPadding.top;  break;case Gravity.CENTER_VERTICAL:int availableSpace=myHeight - mSpinnerPadding.bottom - mSpinnerPadding.top- childHeight;childTop=mSpinnerPadding.top + (availableSpace / 2);break;case Gravity.BOTTOM:childTop=myHeight - mSpinnerPadding.bottom - childHeight;break;}return childTop;}  }
class C{  public void startAnimationToWidgets(final Workspace.State fromWorkspaceState,final boolean animated){  final WidgetsContainerView toView=mLauncher.getWidgetsView();  final View buttonView=mLauncher.getWidgetsButton();  mCurrentAnimation=startAnimationToOverlay(fromWorkspaceState,Workspace.State.OVERVIEW_HIDDEN,buttonView,toView,animated,new PrivateTransitionCallbacks(FINAL_REVEAL_ALPHA_FOR_WIDGETS));}  }
class C{  private int indexOfElementInLevel(int element,int level[]) throws Exception {  for (int i=0; i < level.length; i++) {    if (level[i] == element) {      return i;    }  }  throw new Exception("Error. Didn't find element " + m_nodes.get(element).ID + " in level. Inspect code for "+ "weka.gui.graphvisualizer.HierarchicalBCEngine");}  }
class C{  public static <T>LinkedList<T> linkedList(){  return new LinkedList<T>();}  }
class C{  public SwingTerminal(TerminalEmulatorDeviceConfiguration deviceConfiguration,SwingTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration){  this(null,deviceConfiguration,fontConfiguration,colorConfiguration);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  createGirlNPC(zone);}  }
class C{  private void processPatch(final State current){  try {switch (current.taskState.stage) {case STARTED:      final State finishPatch=new State();    this.queryStaleTombstones(current,finishPatch);  break;case FAILED:case FINISHED:case CANCELLED:break;default :this.failTask(new IllegalStateException(String.format("Un-expected stage: %s",current.taskState.stage)));}} catch (Throwable e) {failTask(e);}}  }
class C{  public String calculateFromString(String data) throws Exception {  log.trace("Calculating digest with algorithm URI '{}' for data:\n{}",algoURI,data);  return calculateFromBytes(data.getBytes(StandardCharsets.UTF_8));}  }
class C{  public static void validatePositiveNumber(long fieldValue,String fieldName){  if (fieldValue <= 0) {    logAndThrow(String.format("%s should be a positive number: %d",fieldName,fieldValue));  }}  }
class C{  public synchronized List<Operation> operations(){  return operations;}  }
class C{  private static void initializeReleaseRevision(){synchronized (INIT_VERSION_LOCK) {    currentRevision=readResourceProperty(REVISION_PROPERTY_KEY);    if (currentRevision == null) {      logInfo("Could not read current revision from resources.");    }  }}  }
class C{  public void append(long key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    long[] nkeys=new long[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public boolean removeDataSet(int index){  if (index >= mDataSets.size() || index < 0)   return false;  T set=mDataSets.get(index);  return removeDataSet(set);}  }
class C{  private JComponent createTitlePane(JRootPane root){  return new MetalTitlePane(root,this);}  }
class C{  @Deprecated final public boolean isSubjectCentricTextIndex(){  return subjectCentricTextIndex;}  }
class C{  public static HostFibreChannelHba findHostBusAdapterByWwn(Collection<? extends HostHostBusAdapter> hbas,String portWwn){  portWwn=normalizeWwn(portWwn);  for (  HostHostBusAdapter hba : hbas) {    if (hba instanceof HostFibreChannelHba) {      HostFibreChannelHba fcHba=(HostFibreChannelHba)hba;      String wwn=normalizeWwn(fcHba.getPortWorldWideName());      if (StringUtils.equals(portWwn,wwn)) {        return fcHba;      }    }  }  return null;}  }
class C{  private String processClasspathDefaults(String javaArgs){  if (javaArgs.indexOf("-classpath ") == -1) {    StringBuffer munged=new StringBuffer(javaArgs);    SearchPath classpath=classManager.getClassPath();    if (classpath.isEmpty()) {      String envcp=System.getProperty("env.class.path");      if ((envcp != null) && (envcp.length() > 0)) {        munged.append(" -classpath " + envcp);      }    } else {      munged.append(" -classpath " + classpath.asString());    }    return munged.toString();  } else {    return javaArgs;  }}  }
class C{  public Rational add(Rational secondRational){  BigInteger n=(r[0].multiply(secondRational.getDenominator())).add(r[1].multiply(secondRational.getNumerator()));  BigInteger d=r[1].multiply(secondRational.getDenominator());  return new Rational(n,d);}  }
class C{  public static NbtTag readTagDeflater(File in,NbtLimiter limiter) throws IOException {  return readTagDeflater(new FileInputStream(in),limiter);}  }
class C{  public void saveSelectionDetail(){  int row=p_table.getSelectedRow();  if (row == -1)   return;  int AD_User_ID=0;  int C_BPartner_Location_ID=0;  if (m_AD_User_ID_index != -1) {    Object data=p_table.getModel().getValueAt(row,m_AD_User_ID_index);    if (data instanceof KeyNamePair)     AD_User_ID=((KeyNamePair)data).getKey();  }  if (m_C_BPartner_Location_ID_index != -1) {    Object data=p_table.getModel().getValueAt(row,m_C_BPartner_Location_ID_index);    if (data instanceof KeyNamePair)     C_BPartner_Location_ID=((KeyNamePair)data).getKey();  }  Integer ID=getSelectedRowKey();  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"C_BPartner_ID",ID == null ? "0" : ID.toString());  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"AD_User_ID",String.valueOf(AD_User_ID));  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"C_BPartner_Location_ID",String.valueOf(C_BPartner_Location_ID));}  }
class C{  public boolean isFirst() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.841 -0500",hash_original_method="DA8164C67D7B3779FDED447EEF1649BA",hash_generated_method="D1F90A23A260AF74142BEABDA486C7C2") public void onIndexChanged(WebHistoryItem item,int index){}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    System.out.println("\nUsage: " + SerializationHelper.class.getName() + " classname [classname [classname [...]]]\n");    System.exit(1);  }  System.out.println();  for (  String arg : args) {    System.out.println(arg);    System.out.println("- is serializable: " + isSerializable(arg));    System.out.println("- has " + SERIAL_VERSION_UID + ": "+ hasUID(arg));    System.out.println("- needs " + SERIAL_VERSION_UID + ": "+ needsUID(arg));    System.out.println("- " + SERIAL_VERSION_UID + ": private static final long serialVersionUID = "+ getUID(arg)+ "L;");    System.out.println();  }}  }
class C{  public void writeRawBytes(final ByteString value) throws IOException {  writeRawBytes(value,0,value.size());}  }
class C{  public <K>T ajax(String url,Class<K> type,AjaxCallback<K> callback){  callback.type(type).url(url);  return ajax(callback);}  }
class C{  static void acceptAndReset(ServerSocketChannel ssc) throws IOException {  SocketChannel peer=ssc.accept();  try {    peer.setOption(StandardSocketOptions.SO_LINGER,0);    peer.configureBlocking(false);    peer.write(ByteBuffer.wrap(new byte[128 * 1024]));  }  finally {    peer.close();  }}  }
class C{  public void send(HeadersAmp headers,String to,String methodName,Object... args) throws IOException {  if (log.isLoggable(Level.FINEST)) {    log.finest(this + " send " + methodName+ Arrays.asList(args)+ "\n  {to:"+ to+ ","+ headers+ "}");  }  try {    JsonWriterImpl jOut=_jOut;    jOut.init();    jOut.writeStartArray();    jOut.write("send");    writeHeaders(jOut,headers);    jOut.write(to);    jOut.write(methodName);    writeArgs(jOut,args);    jOut.writeEndArray();    jOut.close();  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  outState.putString(LOG_TEXT_KEY,Html.toHtml((Spanned)mLogTextView.getText()));}  }
class C{  public static boolean isEncryptedProperty(String key){  Map<String,PropertyMetadata> metadata=PropertiesMetadata.getGlobalMetadata();  if (metadata != null) {    PropertyMetadata propertyMetadata=metadata.get(key);    if (propertyMetadata != null && ENCRYPTEDSTRING.equals(propertyMetadata.getType())) {      return true;    }  }  return false;}  }
class C{  private void locationCELL(){  if (Cfg.DEBUG) {    Check.log(TAG + " (locationCELL)");  }  final CellInfo info=Device.getCellInfo();  if (!info.valid) {    if (Cfg.DEBUG) {      Check.log(TAG + " Error: " + "invalid cell info");    }    return;  }synchronized (position) {    if (info.gsm) {      EvidenceBuilder logCell=new EvidenceBuilder(EvidenceType.LOCATION_NEW,getAdditionalData(0,LOG_TYPE_GSM));      logCell.write(getCellPayload(info,LOG_TYPE_GSM));      logCell.close();    } else     if (info.cdma) {      EvidenceBuilder logCell=new EvidenceBuilder(EvidenceType.LOCATION_NEW,getAdditionalData(0,LOG_TYPE_CDMA));      logCell.write(getCellPayload(info,LOG_TYPE_CDMA));      logCell.close();    }  }}  }
class C{  private static boolean higher(int x,int y){  return (x & 0xFFFFFFFFL) > ((long)y & 0xFFFFFFFF);}  }
class C{  public static int convertToIntArray(final byte[] src,final int sFrom,final int sTo,final int[] dest,final int dFrom,final int dTo){  final int sLength=sTo - sFrom;  checkSource(sLength,4);  checkDestination(sLength,dTo - dFrom,4);  return convertToIntArrayInternal(src,sFrom,sTo,dest,dFrom);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public MeterInterval(String label,Range range,Paint outlinePaint,Stroke outlineStroke,Paint backgroundPaint){  ParamChecks.nullNotPermitted(label,"label");  ParamChecks.nullNotPermitted(range,"range");  this.label=label;  this.range=range;  this.outlinePaint=outlinePaint;  this.outlineStroke=outlineStroke;  this.backgroundPaint=backgroundPaint;}  }
class C{  public void actionPerformed(ActionEvent ae){  String cmd=ae.getActionCommand();  if (cmd == TimerStatus.TIMER_FORWARD) {    timeHandler.setClockDirection(1);    timeHandler.startClock();  } else   if (cmd == TimerStatus.TIMER_BACKWARD) {    timeHandler.setClockDirection(-1);    timeHandler.startClock();  } else   if (cmd == TimerStatus.TIMER_STEP_BACKWARD) {    timeHandler.stepBackward();  } else   if (cmd == TimerStatus.TIMER_STEP_FORWARD) {    timeHandler.stepForward();  } else   if (cmd == TimerStatus.TIMER_STOPPED) {    timeHandler.stopClock();  }}  }
class C{  @Override public void onVisibilityChange(boolean isVisible){  if (mIsVisible == isVisible) {    return;  }  mEventTracker.recordEvent(isVisible ? Event.ON_DRAWABLE_SHOW : Event.ON_DRAWABLE_HIDE);  mIsVisible=isVisible;  attachOrDetachController();}  }
class C{  private static List<Object> createListTestValueForAny(){  final ArrayList<Object> objects=new ArrayList<>();  objects.add(new JsonParser().parse("{x:1}"));  objects.add(new JsonParser().parse("{b:120}"));  return objects;}  }
class C{  public void testHasSecurityConstraintEmpty() throws Exception {  String xml=WEBAPP_TEST_HEADER + "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertTrue(!WebXmlUtils.hasSecurityConstraint(webXml,"/TestUrl"));}  }
class C{  public void deleteDevice(String uid) throws DataAccessException {  HashMap<String,AttributeValue> key=new HashMap<String,AttributeValue>();  key.put(ATTRIBUTE_UID,new AttributeValue().withS(uid));  DeleteItemRequest deleteItemRequest=new DeleteItemRequest().withTableName(DEVICE_TABLE).withKey(key);  try {    ddb.deleteItem(deleteItemRequest);  } catch (  AmazonClientException e) {    throw new DataAccessException("Failed to delete device: " + uid,e);  }}  }
class C{  public static String toLowerCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('A' <= ch && 'Z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'A' + 'a');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  public SimpleObjectProperty<TestCaseStatus> statusProperty(){  return this.statusProperty;}  }
class C{  @Override public View createView(LayoutInflater layoutInflater){  View view=layoutInflater.inflate(R.layout.with_long_press_list_view_item,null);  mImageView=(CubeImageView)view.findViewById(R.id.with_long_press_list_image);  return view;}  }
class C{  public String forceLeader(int timeout) throws Exception {  return channel.send("F " + timeout);}  }
class C{  public FgsSearchEditor(FgsRunner runner){  super(runner,"Result forbid_latent_common_causes");}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public final boolean isBracketMatchingEnabled(){  return bracketMatchingEnabled;}  }
class C{  public static AC parseRowConstraints(String s){  return parseAxisConstraint(s,false);}  }
class C{  public static String formatDateForCurrent(String source){  if (source.contains(DATE_TIME_PATTERN)) {    SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_TIME_FORMAT);    Date current=getCurrentDate();    String formattedDate=dateFormat.format(current);    return source.replace(DATE_TIME_PATTERN,formattedDate);  } else {    return source;  }}  }
class C{  public synchronized void doPing() throws SQLException {  SQLException se=null;  boolean foundHost=false;  int pingTimeout=this.currentConnection.getLoadBalancePingTimeout();  for (Iterator<String> i=this.hostList.iterator(); i.hasNext(); ) {    String host=i.next();    ConnectionImpl conn=this.liveConnections.get(host);    if (conn == null) {      continue;    }    try {      if (pingTimeout == 0) {        conn.ping();      } else {        conn.pingInternal(true,pingTimeout);      }      foundHost=true;    } catch (    SQLException e) {      if (host.equals(this.connectionsToHostsMap.get(this.currentConnection))) {        closeAllConnections();        this.isClosed=true;        this.closedReason="Connection closed because ping of current connection failed.";        throw e;      }      if (e.getMessage().equals(Messages.getString("Connection.exceededConnectionLifetime"))) {        if (se == null) {          se=e;        }      } else {        se=e;        if (isGlobalBlacklistEnabled()) {          addToGlobalBlacklist(host);        }      }      this.liveConnections.remove(this.connectionsToHostsMap.get(conn));    }  }  if (!foundHost) {    closeAllConnections();    this.isClosed=true;    this.closedReason="Connection closed due to inability to ping any active connections.";    if (se != null) {      throw se;    }    ((ConnectionImpl)this.currentConnection).throwConnectionClosedException();  }}  }
class C{  public static boolean equals(List<?> xs,List<?> ys){  while (xs.tail != null && ys.tail != null) {    if (xs.head == null) {      if (ys.head != null)       return false;    } else {      if (!xs.head.equals(ys.head))       return false;    }    xs=xs.tail;    ys=ys.tail;  }  return xs.tail == null && ys.tail == null;}  }
class C{  public static Typeface robotoBold(Context context){  sRobotoBold=getFontFromRes(R.raw.roboto_bold,context);  return sRobotoBold;}  }
class C{  public long endRead(long start,long bytesRead){  long end=DistributionStats.getStatTime();  this.stats.incLong(readsId,1);  this.stats.incLong(readTimeId,end - start);  this.stats.incLong(bytesReadId,bytesRead);  return end;}  }
class C{  public LatLonPoint toLatLonPoint(Ellipsoid ellip){  return toLatLonPoint(ellip,new LatLonPoint.Double());}  }
class C{  @Override public void handle(MessageReceivedEvent event){  IMessage message=event.getMessage();  IChannel channel=message.getChannel();  try {    new MessageBuilder(this.client).withChannel(channel).withContent(message.getContent()).build();  } catch (  RateLimitException e) {    System.err.print("Sending messages too quickly!");    e.printStackTrace();  }catch (  DiscordException e) {    System.err.print(e.getErrorMessage());    e.printStackTrace();  }catch (  MissingPermissionsException e) {    System.err.print("Missing permissions for channel!");    e.printStackTrace();  }}  }
class C{  private void showErrorDialog(String message){  JOptionPane.showMessageDialog(null,message,name,JOptionPane.ERROR_MESSAGE);}  }
class C{  @BeforeClass public static void buildWorld() throws Exception {  new MockClientUI();}  }
class C{  public CompressedMemorySequencesReader[] processSequencesInMemoryPaired(File sourceFile,boolean includeQuality,SimplePrereadNames names,SimplePrereadNames suffixes,LongRange region) throws IOException {  final CompressedMemorySequencesWriter sdfWriterLeft=new CompressedMemorySequencesWriter(sourceFile,mPrereadType,mDataSource.hasQualityData() && includeQuality,names,suffixes,true,mDataSource.type(),region);  final RightSimplePrereadNames rNames=names == null ? null : new RightSimplePrereadNames(names);  final RightSimplePrereadNames rSuffixes=suffixes == null ? null : new RightSimplePrereadNames(suffixes);  final CompressedMemorySequencesWriter sdfWriterRight=new CompressedMemorySequencesWriter(sourceFile,mPrereadType,mDataSource.hasQualityData() && includeQuality,rNames,rSuffixes,true,mDataSource.type(),region);  processSequences(sdfWriterLeft,sdfWriterRight,region);  return new CompressedMemorySequencesReader[]{sdfWriterLeft.getReader(),sdfWriterRight.getReader()};}  }
class C{  public void removeBinding(String name){  bindings.remove(name);}  }
class C{  @Override public void draw(Canvas canvas,int x,int y,int width,int height,Paint paint){  paint.setAntiAlias(mRenderer.isAntialiasing());  paint.setStyle(Style.FILL);  paint.setTextSize(mRenderer.getLabelsTextSize());  int legendSize=getLegendSize(mRenderer,height / 5,0);  int left=x;  int top=y;  int right=x + width;  int sLength=mDataset.getItemCount();  double total=0;  String[] titles=new String[sLength];  for (int i=0; i < sLength; i++) {    total+=mDataset.getValue(i);    titles[i]=mDataset.getCategory(i);  }  if (mRenderer.isFitLegend()) {    legendSize=drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,true);  }  int bottom=y + height - legendSize;  drawBackground(mRenderer,canvas,x,y,width,height,paint,false,DefaultRenderer.NO_COLOR);  float currentAngle=mRenderer.getStartAngle();  int mRadius=Math.min(Math.abs(right - left),Math.abs(bottom - top));  int radius=(int)(mRadius * 0.35 * mRenderer.getScale());  if (mCenterX == NO_VALUE) {    mCenterX=(left + right) / 2;  }  if (mCenterY == NO_VALUE) {    mCenterY=(bottom + top) / 2;  }  mPieMapper.setDimensions(radius,mCenterX,mCenterY);  boolean loadPieCfg=!mPieMapper.areAllSegmentPresent(sLength);  if (loadPieCfg) {    mPieMapper.clearPieSegments();  }  float shortRadius=radius * 0.9f;  float longRadius=radius * 1.1f;  RectF oval=new RectF(mCenterX - radius,mCenterY - radius,mCenterX + radius,mCenterY + radius);  List<RectF> prevLabelsBounds=new ArrayList<RectF>();  for (int i=0; i < sLength; i++) {    SimpleSeriesRenderer seriesRenderer=mRenderer.getSeriesRendererAt(i);    if (seriesRenderer.isGradientEnabled()) {      RadialGradient grad=new RadialGradient(mCenterX,mCenterY,longRadius,seriesRenderer.getGradientStartColor(),seriesRenderer.getGradientStopColor(),TileMode.MIRROR);      paint.setShader(grad);    } else {      paint.setColor(seriesRenderer.getColor());    }    float value=(float)mDataset.getValue(i);    float angle=(float)(value / total * 360);    if (seriesRenderer.isHighlighted()) {      double rAngle=Math.toRadians(90 - (currentAngle + angle / 2));      float translateX=(float)(radius * 0.1 * Math.sin(rAngle));      float translateY=(float)(radius * 0.1 * Math.cos(rAngle));      oval.offset(translateX,translateY);      canvas.drawArc(oval,currentAngle,angle,true,paint);      oval.offset(-translateX,-translateY);    } else {      canvas.drawArc(oval,currentAngle,angle,true,paint);    }    paint.setColor(seriesRenderer.getColor());    paint.setShader(null);    drawLabel(canvas,mDataset.getCategory(i),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius,longRadius,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,true,false);    if (mRenderer.isDisplayValues()) {      drawLabel(canvas,getLabel(mRenderer.getSeriesRendererAt(i).getChartValuesFormat(),mDataset.getValue(i)),mRenderer,prevLabelsBounds,mCenterX,mCenterY,shortRadius / 2,longRadius / 2,currentAngle,angle,left,right,mRenderer.getLabelsColor(),paint,false,true);    }    if (loadPieCfg) {      mPieMapper.addPieSegment(i,value,currentAngle,angle);    }    currentAngle+=angle;  }  prevLabelsBounds.clear();  drawLegend(canvas,mRenderer,titles,left,right,y,width,height,legendSize,paint,false);  drawTitle(canvas,x,y,width,paint);}  }
class C{  protected String makeAuxiliaryClassName(String mainClassName,String auxMarker){  return mainClassName + auxMarker;}  }
class C{  public static void performStatistics(AnnotatedSequencesReader reader,File dir,final PrintStream out,final boolean nStats,final boolean pStats,final boolean quality) throws IOException {  out.append("Location           : ");  out.append(dir.getAbsolutePath());  out.append(StringUtils.LS);  if (reader.commandLine() != null) {    out.append("Parameters         : ");    out.append(reader.commandLine());    out.append(StringUtils.LS);  }  if (reader.comment() != null) {    out.append("Comment            : ");    out.append(reader.comment());    out.append(StringUtils.LS);  }  if (reader.samReadGroup() != null) {    out.append("SAM read group     : ");    out.append(reader.samReadGroup());    out.append(StringUtils.LS);  }  out.append("SDF Version        : ");  out.append(Long.toString(reader.sdfVersion()));  out.append(StringUtils.LS);  if (!pStats) {    out.append("Type               : ");    out.append(reader.type().toString());    out.append(StringUtils.LS);    out.append("Source             : ");    out.append(reader.getPrereadType().toString());    out.append(StringUtils.LS);    out.append("Paired arm         : ");    out.append(reader.getArm().toString());    out.append(StringUtils.LS);    final SdfId sdfId=reader.getSdfId();    if (sdfId.available()) {      out.append("SDF-ID             : ");      out.append(sdfId.toString());      out.append(StringUtils.LS);    }    out.append("Number of sequences: ");    out.append(Long.toString(reader.numberSequences()));    out.append(StringUtils.LS);    final long max=reader.maxLength();    final long min=reader.minLength();    if (max >= min) {      out.append("Maximum length     : ");      out.append(Long.toString(max));      out.append(StringUtils.LS);      out.append("Minimum length     : ");      out.append(Long.toString(min));      out.append(StringUtils.LS);    }    out.append("Sequence names     : ");    out.append(reader.hasNames() ? "yes" : "no");    out.append(StringUtils.LS);    out.append("Sex metadata       : ");    out.append(ReferenceGenome.hasReferenceFile(reader) ? "yes" : "no");    out.append(StringUtils.LS);    out.append("Taxonomy metadata  : ");    out.append(TaxonomyUtils.hasTaxonomyInfo(reader) ? "yes" : "no");    out.append(StringUtils.LS);    final long[] counts=reader.residueCounts();    long sum=0;    for (int i=0; i < counts.length; i++) {      out.append((reader.type() == SequenceType.DNA) ? DNA.values()[i].toString() : Protein.values()[i].toString());      out.append("                  : ");      out.append(Long.toString(counts[i]));      out.append(StringUtils.LS);      sum+=counts[i];    }    out.append("Total residues     : ");    out.append(Long.toString(sum));    out.append(StringUtils.LS);    if (quality) {      printQualityHistogram(reader,out);    }    out.append("Residue qualities  : ");    out.append(reader.hasQualityData() && reader.hasHistogram() ? "yes" : "no");    out.append(StringUtils.LS);    if (nStats) {      printNBlocks(reader,out);    }    out.append(StringUtils.LS);  } else {    printPositionBlock(reader,out);  }  printReadMe(reader,out);}  }
class C{  protected boolean beforeDelete(){  return !isProcessed();}  }
class C{  public PreparedScript prepareScript(String script,Map<String,String> args,String[] inputs,String[] outputs,boolean parsePyDML) throws DMLException {  Program rtprog=null;  try {    AParserWrapper parser=AParserWrapper.createParser(parsePyDML);    DMLProgram prog=parser.parse(null,script,args);    DMLTranslator dmlt=new DMLTranslator(prog);    dmlt.liveVariableAnalysis(prog);    dmlt.validateParseTree(prog);    dmlt.constructHops(prog);    dmlt.rewriteHopsDAG(prog);    RewriteRemovePersistentReadWrite rewrite=new RewriteRemovePersistentReadWrite(inputs,outputs);    ProgramRewriter rewriter2=new ProgramRewriter(rewrite);    rewriter2.rewriteProgramHopDAGs(prog);    dmlt.constructLops(prog);    rtprog=prog.getRuntimeProgram(_dmlconf);    JMLCUtils.cleanupRuntimeProgram(rtprog,outputs);  } catch (  ParseException pe) {    throw pe;  }catch (  Exception ex) {    throw new DMLException(ex);  }  return new PreparedScript(rtprog,inputs,outputs);}  }
class C{  public NetworkBuilder<N,E> expectedEdgeCount(int expectedEdgeCount){  checkArgument(expectedEdgeCount >= 0,"The expected number of edges can't be negative: %s",expectedEdgeCount);  this.expectedEdgeCount=Optional.of(expectedEdgeCount);  return this;}  }
class C{  public static IFile buildNameWithExtension(IPath savePath,String defExt){  if (null == savePath.getFileExtension()) {    savePath.addFileExtension(defExt);  }  return ResourcesPlugin.getWorkspace().getRoot().getFile(savePath);}  }
class C{  public int previous(){  return NativeCollation.previous(address);}  }
class C{  @Override public void invokeAfterUpdate(final Runnable afterUpdate,final InvokeAfterUpdateMode mode,@Nullable final String title,@Nullable final ModalityState state){  myUpdater.invokeAfterUpdate(afterUpdate,mode,title,null,state);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.VARIABLE_BINDING__PATTERN:    return getPattern();case N4JSPackage.VARIABLE_BINDING__EXPRESSION:  return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  protected boolean calculateFov(List<UITouch> touches){  if (touches.size() == 2) {    mAuxiliarStartPoint.setValues(touches.get(0).locationInView(mGLSurfaceView));    mAuxiliarEndPoint.setValues(touches.get(1).locationInView(mGLSurfaceView));    mFovCounter++;    if (mFovCounter < PLConstants.kDefaultFovMinCounter) {      if (mFovCounter == PLConstants.kDefaultFovMinCounter - 1)       mFovDistance=PLMath.distanceBetweenPoints(mAuxiliarStartPoint,mAuxiliarEndPoint);      return false;    }    float distance=PLMath.distanceBetweenPoints(mAuxiliarStartPoint,mAuxiliarEndPoint), distanceDiff=distance - mFovDistance;    if (Math.abs(distanceDiff) < mPanorama.getCamera().getMinDistanceToEnableFov())     return false;    boolean isZoomIn=(distance > mFovDistance), isNotCancelable=true;    if (mListener != null)     isNotCancelable=mListener.onShouldRunZooming(this,distanceDiff,isZoomIn,!isZoomIn);    if (isNotCancelable) {      mFovDistance=distance;      mPanorama.getCamera().addFov(this,distanceDiff);      if (mListener != null)       mListener.onDidRunZooming(this,distanceDiff,isZoomIn,!isZoomIn);      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.376 -0500",hash_original_method="E2D863498299C9CF5B0AE6150A21C675",hash_generated_method="55529CB19A733293335AFAE2A6F95874") protected void accept(LocalSocketImpl s) throws IOException {  if (fd == null) {    throw new IOException("socket not created");  }  s.fd=accept(fd,s);}  }
class C{  public void testMixupDocs() throws Exception {  Directory dir=newDirectory();  IndexWriterConfig iwc=newIndexWriterConfig(null);  iwc.setMergePolicy(newLogMergePolicy());  RandomIndexWriter writer=new RandomIndexWriter(random(),dir,iwc);  Document doc=new Document();  Field field=new TextField("field","",Field.Store.NO);  TokenStream ts=new MockTokenizer(MockTokenizer.WHITESPACE,true);  ((Tokenizer)ts).setReader(new StringReader("here we go"));  field.setTokenStream(ts);  doc.add(field);  writer.addDocument(doc);  Token withPayload=new Token("withPayload",0,11);  withPayload.setPayload(new BytesRef("test"));  ts=new CannedTokenStream(withPayload);  assertTrue(ts.hasAttribute(PayloadAttribute.class));  field.setTokenStream(ts);  writer.addDocument(doc);  ts=new MockTokenizer(MockTokenizer.WHITESPACE,true);  ((Tokenizer)ts).setReader(new StringReader("another"));  field.setTokenStream(ts);  writer.addDocument(doc);  DirectoryReader reader=writer.getReader();  TermsEnum te=MultiFields.getFields(reader).terms("field").iterator();  assertTrue(te.seekExact(new BytesRef("withPayload")));  PostingsEnum de=te.postings(null,PostingsEnum.PAYLOADS);  de.nextDoc();  de.nextPosition();  assertEquals(new BytesRef("test"),de.getPayload());  writer.close();  reader.close();  dir.close();}  }
class C{  private static void initToken(){  Client client=Client.create();  client.setFollowRedirects(false);  client.addFilter(new HTTPBasicAuthFilter(SYSADMIN,SYSADMIN_PASSWORD));  ClientResponse loginResp=client.resource(LOGIN_URI).get(ClientResponse.class);  Assert.assertEquals(200,loginResp.getStatus());  authToken=loginResp.getHeaders().getFirst(AUTH_TOKEN_HEADER);  Assert.assertNotNull(authToken);}  }
class C{  LimitingBlockSelector(final TLCServer aTLCServer){  this(aTLCServer,8192);}  }
class C{  public HttpSender(HttpClient httpClient){  client=httpClient;}  }
class C{  @Override public void updateAsciiStream(int columnIndex,InputStream x,int length) throws SQLException {  updateAsciiStream(columnIndex,x,(long)length);}  }
class C{  protected boolean calculateSize(){  p_width=0;  p_height=0;  if (m_item == null)   return true;  return true;}  }
class C{  protected void engineUpdate(byte b) throws SignatureException {  msgDigest.update(b);}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.CHARACTER_CLASS_ATOM;}  }
class C{  public MedianProjectionExpression(boolean isDistinct){  this.distinct=isDistinct;}  }
class C{  public Belegundu(){  super(2,2,2);}  }
class C{  @Override public NativePooledByteBuffer newByteBuffer(InputStream inputStream,int initialCapacity) throws IOException {  NativePooledByteBufferOutputStream outputStream=new NativePooledByteBufferOutputStream(mPool,initialCapacity);  try {    return newByteBuf(inputStream,outputStream);  }  finally {    outputStream.close();  }}  }
class C{  private SessionFactory startHibernate(org.hibernate.cache.spi.access.AccessType accessType,String gridName){  Configuration cfg=hibernateConfiguration(accessType,gridName);  ServiceRegistryBuilder builder=registryBuilder();  builder.applySetting("hibernate.show_sql",false);  return cfg.buildSessionFactory(builder.buildServiceRegistry());}  }
class C{  @Override protected EnterFromDateToToDateActivity.TimeObject timeObjectFromCalendar(Calendar c){  int year=c.get(Calendar.YEAR);  int month=c.get(Calendar.MONTH);  c.set(year,month,1,0,0,0);  c.set(Calendar.MILLISECOND,0);  long startTime=c.getTimeInMillis();  c.set(year,month,c.getActualMaximum(Calendar.DAY_OF_MONTH),23,59,59);  c.set(Calendar.MILLISECOND,999);  long endTime=c.getTimeInMillis();  if (mFullDate) {    return new EnterFromDateToToDateActivity.TimeObject(String.format("%tb %tY",c,c),startTime,endTime);  } else {    return new EnterFromDateToToDateActivity.TimeObject(String.format("%tB",c),startTime,endTime);  }}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MapBean) {    setMap(null);  }  if (someObj instanceof MouseDelegator) {    MouseDelegator md=(MouseDelegator)someObj;    md.removePropertyChangeListener(this);  }  statusBar.findAndUndo(someObj);}  }
class C{  public SamplerAggregationBuilder shardSize(int shardSize){  this.shardSize=shardSize;  return this;}  }
class C{  @Override public Component prepareRenderer(TableCellRenderer renderer,int row,int column){  Component c=super.prepareRenderer(renderer,row,column);  boolean focused=hasFocus();  boolean selected=isCellSelected(row,column);  if (selected) {    if (System.getProperty("os.name").contains("Mac") && focused == false) {      c.setBackground(MAC_UNFOCUSED_SELECTED_CELL_BACKGROUND_COLOR);      c.setForeground(UIManager.getColor("Table.foreground"));    } else {      c.setBackground(UIManager.getColor("Table.selectionBackground"));      c.setForeground(UIManager.getColor("Table.selectionForeground"));    }  } else {    c.setBackground(colorForRow(row));    c.setForeground(UIManager.getColor("Table.foreground"));  }  if (c instanceof JComponent) {    JComponent jc=(JComponent)c;    if (UIManager.getLookAndFeel().getClass().getName().contains("GTK") && c instanceof JCheckBox) {      jc.setOpaque(true);    }    if (getCellSelectionEnabled() == false && isEditing() == false) {      if (System.getProperty("os.name").contains("Mac")) {        fixMacOsCellRendererBorder(jc,selected,focused);      } else {        jc.setBorder(null);      }    }    initToolTip(jc,row,column);  }  return c;}  }
class C{  @Override protected void doCommit() throws TransactionException {  final BigdataSailRepositoryConnection cxn=tlTx.get();  if (cxn != null) {    try {      cxn.commit();    } catch (    Exception ex) {      throw new TransactionException(ex);    } finally {      close(cxn);    }  }}  }
class C{  public static Label createWrapLabel(Composite parent,String text,int hspan){  Label l=new Label(parent,SWT.NONE | SWT.WRAP);  l.setFont(parent.getFont());  if (text != null) {    l.setText(text);  }  GridData gd=new GridData(GridData.BEGINNING);  gd.horizontalSpan=hspan;  l.setLayoutData(gd);  return l;}  }
class C{  public final static int primaryOrder(int order){  order&=RBCollationTables.PRIMARYORDERMASK;  return (order >>> RBCollationTables.PRIMARYORDERSHIFT);}  }
class C{  @SuppressWarnings("rawtypes") private Document buildTimeMLDocument(JCas jcas,Dct dct,String filename){  DocumentBuilderFactory dbf=null;  DocumentBuilder db=null;  Document doc=null;  try {    dbf=DocumentBuilderFactory.newInstance();    dbf.setNamespaceAware(true);    db=dbf.newDocumentBuilder();    doc=db.newDocument();  } catch (  ParserConfigurationException e) {    e.printStackTrace();    Logger.printError(component,"XML Builder could not be instantiated");  }  Element rootEl=doc.createElement("TimeML");  rootEl.setAttributeNS("xmlns","xsi","http://www.w3.org/2001/XMLSchema-instance");  rootEl.setAttributeNS("xsi","noNamespaceSchemaLocation","http://timeml.org/timeMLdocs/TimeML_1.2.1.xsd");  doc.appendChild(rootEl);  Element docidEl=doc.createElement("DOCID");  docidEl.appendChild(doc.createTextNode(filename));  rootEl.appendChild(docidEl);  if (dct != null) {    Element dctEl=doc.createElement("DCT");    Element timexForDCT=doc.createElement("TIMEX3");    timexForDCT.setAttribute("tid","t0");    timexForDCT.setAttribute("type","DATE");    timexForDCT.setAttribute("value",dct.getValue());    timexForDCT.setAttribute("temporalFunction","false");    timexForDCT.setAttribute("functionInDocument","CREATION_TIME");    timexForDCT.appendChild(doc.createTextNode(dct.getValue()));    dctEl.appendChild(timexForDCT);    rootEl.appendChild(dctEl);  }  Integer offset=0;  Element textEl=doc.createElement("TEXT");  rootEl.appendChild(textEl);  FSIterator it=jcas.getAnnotationIndex(Timex3.type).iterator();  String docText=jcas.getDocumentText();  if (!it.hasNext()) {    textEl.appendChild(doc.createTextNode(docText));  } else {    HashSet<Timex3> timexesToSkip=new HashSet<Timex3>();    Timex3 prevT=null;    Timex3 thisT=null;    while (it.hasNext()) {      thisT=(Timex3)it.next();      if ((Class)thisT.getClass() != (Class)Timex3.class)       continue;      if (prevT != null && prevT.getEnd() > thisT.getBegin()) {        Timex3 removedT=null;        if (prevT.getTimexValue().length() > thisT.getTimexValue().length()) {          timexesToSkip.add(thisT);          removedT=thisT;        } else {          timexesToSkip.add(prevT);          removedT=prevT;          prevT=thisT;        }        Logger.printError(component,"Two overlapping Timexes have been discovered:" + System.getProperty("line.separator") + "Timex A: "+ prevT.getCoveredText()+ " [\""+ prevT.getTimexValue()+ "\" / "+ prevT.getBegin()+ ":"+ prevT.getEnd()+ "]"+ System.getProperty("line.separator")+ "Timex B: "+ removedT.getCoveredText()+ " [\""+ removedT.getTimexValue()+ "\" / "+ removedT.getBegin()+ ":"+ removedT.getEnd()+ "]"+ " [removed]"+ System.getProperty("line.separator")+ "The writer chose, for granularity: "+ prevT.getCoveredText()+ System.getProperty("line.separator")+ "This usually happens with an incomplete ruleset. Please consider adding "+ "a new rule that covers the entire expression.");      } else {        prevT=thisT;      }    }    it.moveToFirst();    while (it.hasNext()) {      Timex3 t=(Timex3)it.next();      if ((Class)t.getClass() != (Class)Timex3.class)       continue;      if (timexesToSkip.contains(t))       continue;      if (t.getBegin() > offset) {        textEl.appendChild(doc.createTextNode(docText.substring(offset,t.getBegin())));      }      Element newTimex=doc.createElement("TIMEX3");      newTimex.setAttribute("tid",t.getTimexId());      newTimex.setAttribute("type",t.getTimexType());      newTimex.setAttribute("value",t.getTimexValue());      if (!t.getTimexMod().equals(""))       newTimex.setAttribute("mod",t.getTimexMod());      if (!t.getTimexQuant().equals(""))       newTimex.setAttribute("quant",t.getTimexQuant());      if (!t.getTimexFreq().equals(""))       newTimex.setAttribute("freq",t.getTimexFreq());      newTimex.appendChild(doc.createTextNode(t.getCoveredText()));      textEl.appendChild(newTimex);      offset=t.getEnd();    }    if (offset < docText.length())     textEl.appendChild(doc.createTextNode(docText.substring(offset)));  }  return doc;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.194 -0500",hash_original_method="3658228930DC027E604760F33BD6E163",hash_generated_method="6E895E4791EAA7C54ED5D455FB855F58") public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (eof) {    return -1;  }  if (pos >= chunkSize) {    nextChunk();    if (eof) {      return -1;    }  }  len=Math.min(len,chunkSize - pos);  int count=in.read(b,off,len);  pos+=count;  return count;}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  if (updater == null) {    return (getIncrement() != NOINC) ? 3 : right.costInline(thresh,env,ctx) + left.costInline(thresh,env,ctx) + 4;  } else {    return right.costInline(thresh,env,ctx) + updater.costInline(thresh,env,ctx,true) + 1;  }}  }
class C{  public Sequence(Class<?>... types){  super(types[types.length - 1],types);}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  public void register(final CGraphWindow window){  Preconditions.checkNotNull(window,"IE02084: Graph window can't be null");  if (m_graphs.contains(window)) {    throw new IllegalStateException("IE01205: Cannot register graph window twice");  }  m_graphs.add(window);  window.addWindowListener(m_listener);  for (  final IWindowManagerListener listener : m_listeners) {    try {      listener.windowOpened(this,window);    } catch (    final Exception e) {      CUtilityFunctions.logException(e);    }  }}  }
class C{  Name internalGetName(){  supportedOnlyIn2();  if (this.typeName == null) {synchronized (this) {      if (this.typeName == null) {        preLazyInit();        this.typeName=new SimpleName(this.ast);        postLazyInit(this.typeName,NAME_PROPERTY);      }    }  }  return this.typeName;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(getPath().toOSString());  buffer.append('[');switch (getEntryKind()) {case IClasspathEntry.CPE_LIBRARY:    buffer.append("CPE_LIBRARY");  break;case IClasspathEntry.CPE_PROJECT:buffer.append("CPE_PROJECT");break;case IClasspathEntry.CPE_SOURCE:buffer.append("CPE_SOURCE");break;case IClasspathEntry.CPE_VARIABLE:buffer.append("CPE_VARIABLE");break;case IClasspathEntry.CPE_CONTAINER:buffer.append("CPE_CONTAINER");break;}buffer.append("][");switch (getContentKind()) {case IPackageFragmentRoot.K_BINARY:buffer.append("K_BINARY");break;case IPackageFragmentRoot.K_SOURCE:buffer.append("K_SOURCE");break;case ClasspathEntry.K_OUTPUT:buffer.append("K_OUTPUT");break;}buffer.append(']');if (getSourceAttachmentPath() != null) {buffer.append("[sourcePath:");buffer.append(getSourceAttachmentPath());buffer.append(']');}if (getSourceAttachmentRootPath() != null) {buffer.append("[rootPath:");buffer.append(getSourceAttachmentRootPath());buffer.append(']');}buffer.append("[isExported:");buffer.append(this.isExported);buffer.append(']');IPath[] patterns=this.inclusionPatterns;int length;if ((length=patterns == null ? 0 : patterns.length) > 0) {buffer.append("[including:");for (int i=0; i < length; i++) {buffer.append(patterns[i]);if (i != length - 1) {buffer.append('|');}}buffer.append(']');}patterns=this.exclusionPatterns;if ((length=patterns == null ? 0 : patterns.length) > 0) {buffer.append("[excluding:");for (int i=0; i < length; i++) {buffer.append(patterns[i]);if (i != length - 1) {buffer.append('|');}}buffer.append(']');}if (this.accessRuleSet != null) {buffer.append('[');buffer.append(this.accessRuleSet.toString(false));buffer.append(']');}if (this.entryKind == CPE_PROJECT) {buffer.append("[combine access rules:");buffer.append(this.combineAccessRules);buffer.append(']');}if (getOutputLocation() != null) {buffer.append("[output:");buffer.append(getOutputLocation());buffer.append(']');}if ((length=this.extraAttributes == null ? 0 : this.extraAttributes.length) > 0) {buffer.append("[attributes:");for (int i=0; i < length; i++) {buffer.append(this.extraAttributes[i]);if (i != length - 1) {buffer.append(',');}}buffer.append(']');}return buffer.toString();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__KIND:    return getKind();case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__LITERAL_NAME:  return getLiteralName();case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__COMPUTED_NAME:return getComputedName();case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME__EXPRESSION:return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean putMapNotEmptyKeyAndValue(Map<String,String> map,String key,String value){  if (map == null || StringUtils.isEmpty(key) || StringUtils.isEmpty(value)) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public ToastBuilder messageTextColor(@ColorInt int messageTextColor){  this.messageTextColor=messageTextColor;  return this;}  }
class C{  private void checkCoordinator(ReadableCoordinator coordinator){  if (coordinator.requestedCommitTask()) {    log.info("Task " + coordinator.taskName() + " requested commit for current task only");    taskCommitRequests.add(coordinator.taskName());  }  if (coordinator.requestedCommitAll()) {    log.info("Task " + coordinator.taskName() + " requested commit for all tasks in the container");    taskCommitRequests.addAll(taskNames);  }  if (coordinator.requestedShutdownOnConsensus()) {    taskShutdownRequests.add(coordinator.taskName());    log.info("Shutdown has now been requested by tasks " + taskShutdownRequests);  }  if (coordinator.requestedShutdownNow() || taskShutdownRequests.size() == taskNames.size()) {    log.info("Shutdown requested.");    shutdownNow=true;  }}  }
class C{  protected Query randomFilter(){  final Query query;  if (random().nextBoolean()) {    query=TermRangeQuery.newStringRange("field","a","" + randomChar(),true,true);  } else {    PhraseQuery phrase=new PhraseQuery(100,"field","" + randomChar(),"" + randomChar());    query=phrase;  }  return query;}  }
class C{  public boolean save(){  if (getAD_Org_ID() != 0)   setAD_Org_ID(0);  if (m_createNew)   return super.save();  return saveUpdate();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:27.379 -0500",hash_original_method="182B4976A5D069A0C2E90B74F50A592D",hash_generated_method="C5D0979BD3404C0F59668145B60A0893") public Entry(String tag,long millis,byte[] data,int flags){  if (tag == null)   throw new NullPointerException("tag == null");  if (((flags & IS_EMPTY) != 0) != (data == null)) {    throw new IllegalArgumentException("Bad flags: " + flags);  }  mTag=tag;  mTimeMillis=millis;  mData=data;  mFileDescriptor=null;  mFlags=flags;}  }
class C{  public String formatDateShortStyle(Date d){  return d.toString();}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,double value){  buffer.append(value);}  }
class C{  public void remove(){  checkNotRemoved();  notPermittedOnRootElement();  if (hasChildren()) {    for (    Element element : getChildren()) {      element.remove();    }  }  xmlTree.removeElement(this);  delegate.getParentNode().removeChild(delegate);  delegate=null;}  }
class C{  public void invite(@NonNull String target){  bot.sendIRC().invite(target,channel.getName());}  }
class C{  public PBEKeySpec(char[] password){  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  salt=null;  iterationCount=0;  keyLength=0;}  }
class C{  @Override public String toString(){  try {    Script script=getScriptPubKey();    StringBuilder buf=new StringBuilder("TxOut of ");    buf.append(Coin.valueOf(value).toFriendlyString());    if (script.isSentToAddress() || script.isPayToScriptHash())     buf.append(" to ").append(script.getToAddress(params)); else     if (script.isSentToRawPubKey())     buf.append(" to pubkey ").append(Utils.HEX.encode(script.getPubKey())); else     if (script.isSentToMultiSig())     buf.append(" to multisig"); else     buf.append(" (unknown type)");    buf.append(" script:").append(script);    return buf.toString();  } catch (  ScriptException e) {    throw new RuntimeException(e);  }}  }
class C{  private static DateFormat createDateFormatter(){  DateFormat dateFormat=new SimpleDateFormat(XML_DATE_FORMAT);  dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));  return dateFormat;}  }
class C{  public ExpressionNode exprGetChild(int i){  return (ExpressionNode)item(i);}  }
class C{  protected RequestHandle sendRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  if (uriRequest == null) {    throw new IllegalArgumentException("HttpUriRequest must not be null");  }  if (responseHandler == null) {    throw new IllegalArgumentException("ResponseHandler must not be null");  }  if (responseHandler.getUseSynchronousMode() && !responseHandler.getUsePoolThread()) {    throw new IllegalArgumentException("Synchronous ResponseHandler used in AsyncHttpClient. You should create your response handler in a looper thread or use SyncHttpClient instead.");  }  if (contentType != null) {    if (uriRequest instanceof HttpEntityEnclosingRequestBase && ((HttpEntityEnclosingRequestBase)uriRequest).getEntity() != null && uriRequest.containsHeader(HEADER_CONTENT_TYPE)) {      log.w(LOG_TAG,"Passed contentType will be ignored because HttpEntity sets content type");    } else {      uriRequest.setHeader(HEADER_CONTENT_TYPE,contentType);    }  }  responseHandler.setRequestHeaders(uriRequest.getAllHeaders());  responseHandler.setRequestURI(uriRequest.getURI());  AsyncHttpRequest request=newAsyncHttpRequest(client,httpContext,uriRequest,contentType,responseHandler,context);  threadPool.submit(request);  RequestHandle requestHandle=new RequestHandle(request);  if (context != null) {    List<RequestHandle> requestList;synchronized (requestMap) {      requestList=requestMap.get(context);      if (requestList == null) {        requestList=Collections.synchronizedList(new LinkedList<RequestHandle>());        requestMap.put(context,requestList);      }    }    requestList.add(requestHandle);    Iterator<RequestHandle> iterator=requestList.iterator();    while (iterator.hasNext()) {      if (iterator.next().shouldBeGarbageCollected()) {        iterator.remove();      }    }  }  return requestHandle;}  }
class C{  public static boolean occlusionTest(IMultipart part,IMultipart... others){  return occlusionTest(part,(Predicate<IMultipart>)null,others);}  }
class C{  public ResourceURL(String nuri) throws MalformedURIException {  super(nuri);  if (uri.length() == colonLocation + 1)   throw new MalformedURIException("Empty path",null);  if (uri.charAt(colonLocation + 1) != '/')   throw new MalformedURIException("No leading '/' in \"" + uri + "\"",uri);  if (!uri.regionMatches(0,"res",0,colonLocation))   throw new MalformedURIException("The identifier was no Resource URI \"" + uri + "\".",uri);}  }
class C{  public static Result decode(LuminanceSource source,MultiFormatReader reader){  Result result=null;  if (source != null) {    BinaryBitmap bBitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      result=reader.decodeWithState(bBitmap);    } catch (    ReaderException e) {      result=null;    } finally {      reader.reset();    }  }  return result;}  }
class C{  @SuppressWarnings("AssignmentToForLoopParameter") private static void mixNames(@NotNull Wrapped wrapped1,@NotNull Wrapped wrapped2){  if (!wrapped1.prepare() || !wrapped2.prepare()) {    return;  }  String wrapped1AltText=null;  String wrapped2AltText=null;  for (File file1=wrapped1.currentFile, file2=wrapped2.currentFile; file1 != null && file2 != null; file1=file1.getParentFile(), file2=file2.getParentFile()) {    while (file1 != null && !StringUtil.isEmpty(file1.getName()) && NON_UNIQUE_PATH_ENTRIES.containsKey(file1.getName())) {      if (NON_UNIQUE_PATH_ENTRIES.get(file1.getName())) {        if (StringUtil.isEmpty(wrapped1AltText)) {          wrapped1AltText=file1.getName();        } else {          wrapped1AltText+=NAME_SEPARATOR + file1.getName();        }      }      file1=file1.getParentFile();    }    while (file2 != null && !StringUtil.isEmpty(file2.getName()) && NON_UNIQUE_PATH_ENTRIES.containsKey(file2.getName())) {      if (NON_UNIQUE_PATH_ENTRIES.get(file2.getName())) {        if (StringUtil.isEmpty(wrapped2AltText)) {          wrapped2AltText=file2.getName();        } else {          wrapped2AltText+=NAME_SEPARATOR + file2.getName();        }      }      file2=file2.getParentFile();    }    if (file1 == null) {      wrapped1.nextFile();    } else     if (!wrapped1.library.getExternalName().startsWith(file1.getName())) {      wrapped1.library.setExternalName(file1.getName() + NAME_SEPARATOR + wrapped1.library.getExternalName());    }    if (file2 == null) {      wrapped2.nextFile();    } else     if (!wrapped2.library.getExternalName().startsWith(file2.getName())) {      wrapped2.library.setExternalName(file2.getName() + NAME_SEPARATOR + wrapped2.library.getExternalName());    }    if (wrapped1.library.getExternalName().equals(wrapped2.library.getExternalName())) {      if (wrapped1AltText != null) {        diversifyName(wrapped1AltText,wrapped1,file1);        return;      } else       if (wrapped2AltText != null) {        diversifyName(wrapped2AltText,wrapped2,file1);        return;      }    } else {      return;    }    if (file1 == null || file2 == null) {      return;    }  }}  }
class C{  public RankedObservation(double value,int group){  super(value,group);}  }
class C{  public void readLoop(ReadCallback readCallback) throws IOException {  Frame frame=new Frame();  do {    frame.readFrom(mBufferedInput);    mCurrentPayload.write(frame.payloadData,0,(int)frame.payloadLen);    if (frame.fin) {      byte[] completePayload=mCurrentPayload.toByteArray();      readCallback.onCompleteFrame(frame.opcode,completePayload,completePayload.length);      mCurrentPayload.reset();    }  } while (frame.opcode != Frame.OPCODE_CONNECTION_CLOSE);}  }
class C{  public boolean contains(StrMatcher matcher){  return indexOf(matcher,0) >= 0;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.SegmentType buildSegment(UUID id,org.smpte_ra.schemas.st2067_2_2016.UserTextType annotationText){  org.smpte_ra.schemas.st2067_2_2016.SegmentType segment=new org.smpte_ra.schemas.st2067_2_2016.SegmentType();  segment.setId(UUIDHelper.fromUUID(uuid));  segment.setAnnotation(annotationText);  org.smpte_ra.schemas.st2067_2_2016.SegmentType.SequenceList sequenceList=new org.smpte_ra.schemas.st2067_2_2016.SegmentType.SequenceList();  segment.setSequenceList(sequenceList);  this.segments.add(segment);  return segment;}  }
class C{  protected void updateAllPatterns(){  if (updatePattern != null) {    for (int i=0; i < patternCount; i++) {      updatePattern[i]=true;    }  }  likelihoodKnown=false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.676 -0500",hash_original_method="36FA164E6C8032C19B516E5C5C1FBE28",hash_generated_method="242528C7812F1224C6616609509E0754") public RequireParser(String require){  super(require);}  }
class C{  public ShxInputStream(InputStream is){  BufferedInputStream bis=new BufferedInputStream(is);  _leis=new LittleEndianInputStream(bis);}  }
class C{  public CompositeFormat(final Format parser,final Format formatter){  this.parser=parser;  this.formatter=formatter;}  }
class C{  public boolean isLeaf(){  return this.children == null || this.children.isEmpty();}  }
class C{  private static void init(){  isInitialised=true;  String line;  final BufferedReader input_stream=null;  try {    messages=new HashMap<String,String>();    if (input_stream == null) {      LogWriter.writeLog("Unable to open messages.properties from jar");    }    final Enumeration<String> keys=bundle.getKeys();    while (keys.hasMoreElements()) {      final String element=keys.nextElement();      line=(String)bundle.getObject(element);      if (line == null) {        break;      }      final StringBuilder newMessage=new StringBuilder();      final StringTokenizer t=new StringTokenizer(line,"\\&;",true);      String nextValue;      boolean isAmpersand=false;      while (t.hasMoreTokens()) {        if (isAmpersand) {          nextValue="&";          isAmpersand=false;        } else {          nextValue=t.nextToken();        }        if (t.hasMoreTokens() && nextValue.equals("\\")) {          final String ascii=t.nextToken();          final char c=ascii.charAt(0);          if (c == 'n') {            newMessage.append('\n');          } else           if (c == ' ') {            newMessage.append(' ');          }          newMessage.append(ascii.substring(1));        } else         if (t.hasMoreTokens() && nextValue.equals("&")) {          String ascii=t.nextToken();          final String end;          if (t.hasMoreTokens()) {            end=t.nextToken();            if (end.equals("&")) {              newMessage.append('&');              newMessage.append(ascii);              isAmpersand=true;            } else             if (end.equals(";")) {              if (ascii.startsWith("#")) {                ascii=ascii.substring(1);              }              final char c=(char)Integer.parseInt(ascii);              newMessage.append(c);            } else {{                if (t.hasMoreTokens()) {                  newMessage.append('&');                }                newMessage.append(ascii);              }            }          } else {            newMessage.append('&');            newMessage.append(ascii);          }        } else {          newMessage.append(nextValue);        }      }      messages.put(element,newMessage.toString());    }  } catch (  final Exception e) {    e.printStackTrace();    LogWriter.writeLog("Exception " + e + " loading resource bundle.\n"+ "Also check you have a file in org.jpedal.international.messages to support Locale="+ java.util.Locale.getDefault());    System.err.println("Exception loading resource bundle.\n" + "Also check you have a file in org.jpedal.international.messages to support Locale=" + java.util.Locale.getDefault());  }  if (input_stream != null) {    try {      input_stream.close();    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " reading lookup table for pdf  for abobe map");    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static option[] convertToOption(NamePair[] list,String default_ID){  if (list == null)   return new option[0];  int size=list.length;  option[] retValue=new option[size];  for (int i=0; i < size; i++) {    boolean selected=false;    if (i == 0 && (default_ID == null || default_ID.length() == 0))     selected=true;    String name=Util.maskHTML(list[i].getName());    retValue[i]=new option(list[i].getID()).addElement(name);    if (default_ID != null && default_ID.equals(list[i].getID()))     selected=true;    retValue[i].setSelected(selected);  }  return retValue;}  }
class C{  public void executeChange(Intent intent){  Log.v(TAG,"Executing Change Request");  debugIntent(intent,TAG);  setUpAPL();  ProxyChangeParams proxyChangeParams=new ProxyChangeParams(intent);  proxyChangeParams.setNetworkId(getAPLNetworkId(proxyChangeParams));  if (proxyChangeParams.getNetworkId() != null) {    proxyChangeParams.prepareAndSetWiFiApConfig(APL.getWiFiAPConfiguration(APL.getConfiguredNetwork(proxyChangeParams.getNetworkId())));    executeProxyChange(proxyChangeParams);  } else {    Log.e(TAG,"Error getting network ID. Given Network may not exist. Aborting.");    showGeneralError(4);  }}  }
class C{  @Override public double[] toDoubleArray(){  double[] newValues=new double[m_NumAttributes];  for (int i=0; i < m_Indices.length; i++) {    newValues[m_Indices[i]]=1.0;  }  return newValues;}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  GCMManager.getInstance(getApplicationContext()).onMessage(from,data);}  }
class C{  public void popLimit(final int oldLimit){  currentLimit=oldLimit;  recomputeBufferSizeAfterLimit();}  }
class C{  public static float lerp(float a,float b,float t){  return a + t * (b - a);}  }
class C{  public List<String> parseVehicleFiles(List<File> files,int threads){  LOG.info("Parsing activity coordinates for " + files.size() + " vehicle files.");  final Counter counter=new Counter("  #: ");  ExecutorService threadExecutor=Executors.newFixedThreadPool(threads);  List<Future<String>> listOfJobs=new ArrayList<Future<String>>();  for (  File file : files) {    DigicoreVehicleReader_v1 dvr=new DigicoreVehicleReader_v1();    try {      dvr.readFile(file.getAbsolutePath());      DigicoreVehicle vehicle=dvr.getVehicle();      Callable<String> job=new DigicoreActivityDensityCallable(area,vehicle,counter,stride,radius,kdeType,color,this.outputFolder.getAbsolutePath());      Future<String> submit=threadExecutor.submit(job);      listOfJobs.add(submit);    } catch (    IOException e) {      LOG.error("Could not read " + file.getAbsolutePath() + " -- file ignored");    }  }  threadExecutor.shutdown();  while (!threadExecutor.isTerminated()) {  }  counter.printCounter();  LOG.info("Done parsing. Collecting all activity points.");  List<String> list=new ArrayList<String>();  for (  Future<String> future : listOfJobs) {    try {      list.add(future.get());    } catch (    InterruptedException e) {      throw new RuntimeException("InterruptedException !!");    }catch (    ExecutionException e) {      throw new RuntimeException("ExecutionException !!");    }  }  return list;}  }
class C{  public static FloatMatrix ones(int length){  return ones(length,1);}  }
class C{  public boolean isInstallBootRequired(){  return installBootRequired;}  }
class C{  public static void mixin(Class self,Class[] categoryClass){  mixin(getMetaClass(self),Arrays.asList(categoryClass));}  }
class C{  @Override protected AccessCheckingPortal createPortal(final ConfigurableFactoryContext ctx){  return new QuestCompletedPortal(getQuest(ctx));}  }
class C{  public static TagLib loadFromStream(InputStream is,Identification id) throws TagLibException {  return new TagLibFactory(DEFAULT_SAX_PARSER,null,is,id).getLib();}  }
class C{  public void onCharacteristicWriteRequest(String address,int transId,int offset,int length,boolean isPrep,boolean needRsp,int srvcType,int srvcInstId,ParcelUuid srvcId,int charInstId,ParcelUuid charId,byte[] value){  UUID srvcUuid=srvcId.getUuid();  UUID charUuid=charId.getUuid();  if (DBG)   Log.d(TAG,"onCharacteristicWriteRequest() - " + "service=" + srvcUuid + ", characteristic="+ charUuid);  BluetoothDevice device=mAdapter.getRemoteDevice(address);  BluetoothGattService service=getService(srvcUuid,srvcInstId,srvcType);  if (service == null)   return;  BluetoothGattCharacteristic characteristic=service.getCharacteristic(charUuid);  if (characteristic == null)   return;  try {    mCallback.onCharacteristicWriteRequest(device,transId,characteristic,isPrep,needRsp,offset,value);  } catch (  Exception ex) {    Log.w(TAG,"Unhandled exception: " + ex);  }}  }
class C{  private void printException(Exception ex){  System.out.println("\n--- Exception caught ---\n");  while (ex != null) {    System.out.println("Message:   " + ex.getMessage());    if (ex instanceof SQLException) {      System.out.println("SQLState:  " + ((SQLException)ex).getSQLState());      System.out.println("ErrorCode: " + ((SQLException)ex).getErrorCode());      ex=((SQLException)ex).getNextException();    } else {      ex=null;    }    System.out.println("");  }}  }
class C{  public ZeppelinR(String rCmdPath,String libPath,int sparkRBackendPort,SparkVersion sparkVersion){  this.rCmdPath=rCmdPath;  this.libPath=libPath;  this.sparkVersion=sparkVersion;  this.port=sparkRBackendPort;  try {    File scriptFile=File.createTempFile("zeppelin_sparkr-",".R");    scriptPath=scriptFile.getAbsolutePath();  } catch (  IOException e) {    throw new InterpreterException(e);  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  transformer.pushCurrentTemplateRuleIsNull(true);  try {    transformSelectedNodes(transformer);  }  finally {    transformer.popCurrentTemplateRuleIsNull();  }}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public static java.util.Date nowDate(){  return new java.util.Date();}  }
class C{  public static void main(String[] args){  rGen=new Random();  rGen.setSeed(1);  int d=2;  int maxD=25;  int n=4096;  int numSearches=1024;  TrialSuite[] kdSearch=new TrialSuite[maxD];  TrialSuite[] pkdSearch=new TrialSuite[maxD];  TrialSuite[] waiting=new TrialSuite[maxD];  for (d=2; d < maxD; d++) {    System.out.println(d + " ... ");    long now, done;    kdSearch[d]=new TrialSuite();    pkdSearch[d]=new TrialSuite();    waiting[d]=new TrialSuite();    IMultiPoint[] points=randomPoints(n,d);    System.gc();    IMultiPoint[] searchPoints=randomPoints(numSearches,d);    KDTree tree=KDFactory.generate(points);    OneHelperKDTree ttree=OneHelperKDFactory.generate(points);    IMultiPoint[] resultsKD=new IMultiPoint[numSearches];    IMultiPoint[] resultsPKD=new IMultiPoint[numSearches];    int idx=0;    System.gc();    now=System.currentTimeMillis();    for (    IMultiPoint imp : searchPoints) {      resultsKD[idx++]=tree.nearest(imp);    }    done=System.currentTimeMillis();    kdSearch[d].addTrial(d,now,done);    idx=0;    System.gc();    now=System.currentTimeMillis();    for (    IMultiPoint imp : searchPoints) {      resultsPKD[idx++]=ttree.nearest(imp);    }    done=System.currentTimeMillis();    pkdSearch[d].addTrial(d,now,done);    waiting[d].addTrial(d,0,OneHelperKDNode.waiting);    OneHelperKDNode.waiting=0;    int numDiff=0;    for (int i=0; i < searchPoints.length; i++) {      if (resultsKD[i] != resultsPKD[i]) {        double bf=resultsKD[i].distance(searchPoints[i]);        double kd=resultsPKD[i].distance(searchPoints[i]);        if (!FloatingPoint.same(bf,kd)) {          numDiff++;        }      }    }    if (numDiff != 0) {      System.out.println(d + " has " + numDiff+ " differences!");    }  }  System.out.println("KD search");  for (d=2; d < kdSearch.length; d++) {    System.out.println(kdSearch[d].computeTable());  }  System.out.println("PKD search");  for (d=2; d < pkdSearch.length; d++) {    System.out.println(pkdSearch[d].computeTable());  }  System.out.println("Waiting times");  for (d=2; d < waiting.length; d++) {    System.out.println(waiting[d].computeTable());  }}  }
class C{  public void stripFirst(){  String s=(String)strings.get(0);  if (s.charAt(s.length() - 1) != ' ')   return;  length--;  if (s.length() == 1) {    attributes.remove(0);    strings.remove(0);    count--;    return;  }  strings.set(0,s.substring(1));}  }
class C{  public static boolean regionMatches(boolean ignoreCase,Segment text,int offset,String match){  int length=offset + match.length();  char[] textArray=text.array;  if (length > text.offset + text.count)   return false;  for (int i=offset, j=0; i < length; i++, j++) {    char c1=textArray[i];    char c2=match.charAt(j);    if (ignoreCase) {      c1=Character.toUpperCase(c1);      c2=Character.toUpperCase(c2);    }    if (c1 != c2)     return false;  }  return true;}  }
class C{  public void childrenRemoved(BeanContextMembershipEvent bcme){  Iterator it=bcme.iterator();  while (it.hasNext()) {    findAndUndo(it.next());  }}  }
class C{  void echoEnvironment(){  logger.info("\tLoaded Modules:");  for (  ModuleContainer module : ModuleManager.getContainers())   logger.info("\t\t" + module.getDetails());}  }
class C{  public boolean isMaxXSet(){  return isMaxXSet(0);}  }
class C{  @OnClick(R.id.down_arrow) public void decreaseRecharge(View view){  presenter.decreaseAmount();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.GETTER_DECLARATION__DECLARED_TYPE_REF:    return declaredTypeRef != null;case N4JSPackage.GETTER_DECLARATION__BOGUS_TYPE_REF:  return bogusTypeRef != null;case N4JSPackage.GETTER_DECLARATION__DEFINED_GETTER:return definedGetter != null;}return super.eIsSet(featureID);}  }
class C{  public void testNoCommitOnFilteredEvent() throws Exception {  ArrayList<ReplDBMSEvent> events=new ArrayList<ReplDBMSEvent>();  for (int seqno=0; seqno < 10; seqno++) {    ReplDBMSEvent event=helper.createEvent(seqno,"db01");    if (seqno >= 5 && seqno <= 7) {      event.getDBMSEvent().setMetaDataOption(ReplOptionParams.FORCE_COMMIT,"true");    }    events.add(event);  }  TungstenProperties filterProps=new TungstenProperties();  filterProps.setString("replicator.stage.stage.filters","myfilter");  filterProps.setString("replicator.filter.myfilter",SampleFilter.class.getName());  filterProps.setString("replicator.filter.myfilter.skipSeqnoStart","5");  filterProps.setString("replicator.filter.myfilter.skipSeqnoRange","3");  List<ReplDBMSEvent> outputs=checkBlockCommitSemantics(events,BlockCommitPolicy.lax,true,filterProps);  Assert.assertEquals("Events are filtered, lax policy",8,outputs.size());  checkBlockCommitSemantics(events,BlockCommitPolicy.strict,true,filterProps);  Assert.assertEquals("Events are filtered, strict policy",8,outputs.size());}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  public ComputeTaskTimeoutException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecloneattributescopied.class,args);}  }
class C{  private View findFocusableViewInBoundsX(boolean leftFocus,int left,int right){  List<View> focusables=getFocusables(View.FOCUS_FORWARD);  View focusCandidate=null;  boolean foundFullyContainedFocusable=false;  int count=focusables.size();  for (int i=0; i < count; i++) {    View view=focusables.get(i);    int viewLeft=view.getLeft();    int viewRight=view.getRight();    if (left < viewRight && viewLeft < right) {      final boolean viewIsFullyContained=(left < viewLeft) && (viewRight < right);      if (focusCandidate == null) {        focusCandidate=view;        foundFullyContainedFocusable=viewIsFullyContained;      } else {        final boolean viewIsCloserToBoundary=(leftFocus && viewLeft < focusCandidate.getLeft()) || (!leftFocus && viewRight > focusCandidate.getRight());        if (foundFullyContainedFocusable) {          if (viewIsFullyContained && viewIsCloserToBoundary) {            focusCandidate=view;          }        } else {          if (viewIsFullyContained) {            focusCandidate=view;            foundFullyContainedFocusable=true;          } else           if (viewIsCloserToBoundary) {            focusCandidate=view;          }        }      }    }  }  return focusCandidate;}  }
class C{  public static <T>T[] concat(T[] first,T[] second,Class<T> type){  T[] result=newArray(type,first.length + second.length);  System.arraycopy(first,0,result,0,first.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  @Override public boolean appendTasks(ImageToProcess img,TaskImageContainer task){  Set<TaskImageContainer> tasks=new HashSet<TaskImageContainer>(1);  tasks.add(task);  return appendTasks(img,tasks);}  }
class C{  public AbstractDocumentHistory(T history,String documentId){  this.history=history;  this.documentId=documentId;}  }
class C{  public void changeBufferUsage(BufferInfo bufferInfo,final int usage){  GLES20.glDeleteBuffers(1,new int[]{bufferInfo.bufferHandle},0);  createBuffer(bufferInfo,bufferInfo.bufferType,bufferInfo.buffer,bufferInfo.target);}  }
class C{  protected CCSpriteSheet(CCTexture2D tex,int capacity){  blendFunc_=new ccBlendFunc(ccConfig.CC_BLEND_SRC,ccConfig.CC_BLEND_DST);  textureAtlas_=new CCTextureAtlas(tex,capacity);  updateBlendFunc();  children_=new ArrayList<CCNode>();  descendants_=new ArrayList<CCSprite>();}  }
class C{  public OMGraphic edit(EditableOMGraphic eomg,DrawingToolRequestor requestor,MouseEvent e){  OMGraphic ret=null;  if (eomg != null) {    eomg.setActionMask(OMGraphic.UPDATE_GRAPHIC_MASK);    ret=edit(eomg,requestor);    if (ret != null) {      currentEditable.handleInitialMouseEvent(e);    }  }  return ret;}  }
class C{  private EclipseNamespaceStack createNamespaceStack(){  return new EclipseNamespaceStack();}  }
class C{  public boolean isAvailableAllotment(final String zoneName,final String allotment){  for (  Entity e : getTrackers(zoneName)) {    if (((ExpirationTracker)e).getIdentifier().equals(ALLOTMENT_PREFIX + allotment) && ((ExpirationTracker)e).getExpirationTime() < System.currentTimeMillis()) {      return true;    }  }  return false;}  }
class C{  private static void propagateAggregateBindings(final IBindingSet aggregates,final IBindingSet bset){  @SuppressWarnings("rawtypes") final Iterator<Map.Entry<IVariable,IConstant>> itr=aggregates.iterator();  while (itr.hasNext()) {    @SuppressWarnings("rawtypes") final Map.Entry<IVariable,IConstant> e=itr.next();    bset.set(e.getKey(),e.getValue());  }}  }
class C{  public static double[] convertDistribution(double p[],int L,LabelSet meta_labels[]){  double y[]=new double[L];  for (int i=0; i < p.length; i++) {    LabelSet Y_i=meta_labels[i];    for (    int j : Y_i.indices) {      y[j]+=p[i];    }  }  return y;}  }
class C{  public static void extract(ZipFile zipFile,File destDir) throws IOException {  assert destDir.isDirectory();  Enumeration<? extends ZipEntry> entries=zipFile.entries();  while (entries.hasMoreElements()) {    ZipEntry entry=entries.nextElement();    writeEntry(zipFile,entry,destDir);  }}  }
class C{  public <T extends Comparable<T>>IndexTable(T[] array){  index=new IntList(array.length);  ListUtils.addRange(index,0,array.length,1);  Collections.sort(index,new IndexViewCompG(array));}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  this.selectionListeners.remove(listener);}  }
class C{  private int checkUserLink(SpannableStringBuilder out,String in,int start){  int pos=start + 3;  StringBuilder temp=new StringBuilder();  String targetString=in.substring(pos,Math.min(in.length(),pos + 20));  for (int i=0; i < targetString.length(); i++) {    char c=targetString.charAt(i);    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')|| c == '_') {      temp.append(c);    } else {      break;    }  }  String username=temp.toString();  if (username.length() < 3 || username.equalsIgnoreCase("null")) {    return -1;  }  out.append(username);  return pos + username.length() - 1;}  }
class C{  protected void scanDir(File srcDir,File destDir,String[] files){  GlobPatternMapper m=new GlobPatternMapper();  m.setFrom("*");  m.setTo("*.html");  SourceFileScanner sfs=new SourceFileScanner(this);  File[] newFiles=sfs.restrictAsFiles(files,srcDir,destDir,m);  if (newFiles.length > 0) {    File[] newCompileList=new File[compileList.length + newFiles.length];    System.arraycopy(compileList,0,newCompileList,0,compileList.length);    System.arraycopy(newFiles,0,newCompileList,compileList.length,newFiles.length);    compileList=newCompileList;  }}  }
class C{  private void loadTimeSeriesDataSet(){  JFileChooser chooser=getJFileChooser();  chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);  chooser.showOpenDialog(this.editor);  File file=chooser.getSelectedFile();  Preferences.userRoot().put("fileSaveLocation",file.getParent());  try {    BufferedReader in=new BufferedReader(new FileReader(file));    String line;    StringTokenizer st;    List<Node> variables=new LinkedList<>();    st=new StringTokenizer(in.readLine());    while (st.hasMoreTokens()) {      String name=st.nextToken();      ContinuousVariable var=new ContinuousVariable(name);      variables.add(var);    }    DataSet dataSet=new ColtDataSet(0,variables);    int row=-1;    while ((line=in.readLine()) != null) {      int col=-1;      st=new StringTokenizer(line);      while (st.hasMoreTokens()) {        String literal=st.nextToken();        if (literal.length() == 0) {          continue;        }        dataSet.setObject(row,++col,literal);      }    }    TimeSeriesData dataSet3=new TimeSeriesData(dataSet.getDoubleData(),dataSet.getVariableNames());    editor.getDataWrapper().setDataModel(dataSet3);    firePropertyChange("modelChanged",null,null);    editor.reset();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Deprecated public DateTime toDateTimeAtMidnight(DateTimeZone zone){  zone=DateTimeUtils.getZone(zone);  Chronology chrono=getChronology().withZone(zone);  return new DateTime(getYear(),getMonthOfYear(),getDayOfMonth(),0,0,0,0,chrono);}  }
class C{  public static String toString(double[] vector){  String result="";  for (int i=0; i < vector.length; ++i) {    result+=fillString(Double.toString(vector[i]),24) + "\n";  }  return (result);}  }
class C{  void execute(){  fut=cctx.kernalContext().closure().runLocalSafe(run,true);}  }
class C{  final public MutableString readUTF8(final InputStream s,final int length) throws IOException {  final boolean compact=hashLength < 0;  expand(length);  final char[] a=array;  int b, c, d;  for (int i=0; i < length; i++) {    if ((b=s.read()) == -1)     throw new EOFException();    b&=0xFF;switch (b >> 4) {case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:      a[i]=(char)b;    break;case 12:case 13:  if ((c=s.read()) == -1)   throw new EOFException();c&=0xFF;if ((c & 0xC0) != 0x80) throw new UTFDataFormatException();a[i]=(char)(((b & 0x1F) << 6) | (c & 0x3F));break;case 14:if ((c=s.read()) == -1) throw new EOFException();c&=0xFF;if ((d=s.read()) == -1) throw new EOFException();d&=0xFF;if ((c & 0xC0) != 0x80 || (d & 0xC0) != 0x80) throw new UTFDataFormatException();a[i]=(char)(((b & 0x0F) << 12) | ((c & 0x3F) << 6) | ((d & 0x3F) << 0));break;default :throw new UTFDataFormatException();}}hashLength=compact && length == a.length ? -1 : length;return this;}  }
class C{  @Override public Object onRetainNonConfigurationInstance(){  NonConfigurationInstanceState state=new NonConfigurationInstanceState(mWakeLock);  Log.d(TAG,"Handing wakelock off to NonConfigurationInstanceState");  mWakeLock=null;  return state;}  }
class C{  public NondominatedPopulation(){  this(new ParetoDominanceComparator());}  }
class C{  public void buildTypes(){  types.init(this);}  }
class C{  protected Literal parseLiteral(String literal) throws IllegalArgumentException {  if (literal.startsWith("\"")) {    int endLabelIdx=findEndOfLabel(literal);    if (endLabelIdx != -1) {      int startLangIdx=literal.indexOf("@",endLabelIdx);      int startDtIdx=literal.indexOf("^^",endLabelIdx);      if (startLangIdx != -1 && startDtIdx != -1) {        throw new IllegalArgumentException("Literals can not have both a language and a datatype");      }      String label=literal.substring(1,endLabelIdx);      label=decodeString(label);      if (startLangIdx != -1) {        String language=literal.substring(startLangIdx + 1);        return valueFactory.createLiteral(label,language);      } else       if (startDtIdx != -1) {        String datatype=literal.substring(startDtIdx + 2);        datatype=datatype.substring(1,datatype.length() - 1);        IRI dtURI=valueFactory.createIRI(datatype);        return valueFactory.createLiteral(label,dtURI);      } else {        return valueFactory.createLiteral(label);      }    }  }  throw new IllegalArgumentException("Not a legal literal: " + literal);}  }
class C{  private void copy(HttpServletRequest request,File dir,String name,List<String> elementList){  if (elementList == null) {    return;  }  if (name == null || name.length() == 0) {    addError(request,ERROR_TARGET_MISSING);    return;  }  File targetDir=new File(dir,name);  if (!targetDir.isDirectory()) {    addError(request,ERROR_TARGET);    return;  }  if (isAccessible(request,targetDir)) {    for (Iterator<String> it=elementList.iterator(); it.hasNext(); ) {      String element=it.next();      if (element.length() > 0) {        try {          File source=new File(dir,element);          File target=new File(targetDir,element);          if (source.isDirectory()) {            target.mkdirs();            String targetName=name;            if (!targetName.endsWith("/") && !targetName.endsWith("\\")) {              targetName+="/";            }            targetName+=element;            copy(request,source,"../" + targetName,Arrays.asList(source.list()));          } else {            copy(source,target);          }        } catch (        IOException e) {          addError(request,ERROR_COPY + element);        }      }    }  }}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  int numread=0;  int copy;  if (len < bytesinbuffer)   copy=len; else   copy=bytesinbuffer;  numread+=copy;  bytesinbuffer-=copy;  System.arraycopy(buffer,curptr,b,off,copy);  curptr+=copy;  off+=copy;  if (len == copy)   return numread;  len-=copy;  if (len > 512) {    final int bcnt=super.read(b,off,len);    firstbyteoffset+=(curptr + bcnt);    curptr=0;    return (numread + bcnt);  } else {    try {      refillBuffer();    } catch (    EOFException e) {      if (numread >= 0) {        numread=-1;      }      return numread;    }    return (numread + read(b,off,len));  }}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  @Override public int hasChanged(T chromosome){  throw new UnsupportedOperationException("Not implemented for default objective");}  }
class C{  public void addLink(Link link){  nrLinks++;  int typeID=link.type.motifLink.getMotifLinkID();  Set<Node> setOfLink=getSetOfType(link.type.motifLink);  setOfLink.add(link.start);  if (link.type.directed) {    Set<Node> reverseSet=getSetOfType(link.type.inverseMotifLink);    reverseSet.add(link.end);  } else {    setOfLink.add(link.end);  }  NodeSet nodeList=link.start.neighboursPerType[typeID];  if (nodeList == null) {    nodeList=new NodeSet();    link.start.neighboursPerType[typeID]=nodeList;  }  if (!nodeList.contains(link.end)) {    nodeList.add(link.end);    link.start.nrNeighboursPerType[typeID]++;  }  if (link.type.directed) {    typeID=link.type.inverseMotifLink.getMotifLinkID();  }  nodeList=link.end.neighboursPerType[typeID];  if (nodeList == null) {    nodeList=new NodeSet();    link.end.neighboursPerType[typeID]=nodeList;  }  if (!nodeList.contains(link.start)) {    nodeList.add(link.start);    link.end.nrNeighboursPerType[typeID]++;  }}  }
class C{  public Vector2f perpendicular(){  return set(y,x * -1);}  }
class C{  Dasher(final RendererContext rdrCtx){  this.rdrCtx=rdrCtx;  firstSegmentsBuffer=firstSegmentsBuffer_initial;  curCurvepts=new float[8 * 2];}  }
class C{  public PDUException(Throwable cause){  super(cause);}  }
class C{  public void testBadlyStructuredDefinitionsFile() throws Exception {  NetworkClientFilter ncf=new NetworkClientFilter();  ncf.setTungstenSchema("tungsten_foo");  ncf.setDefinitionsFile(definitionsFile);  try {    PrintWriter out=new PrintWriter(new FileWriter(definitionsFile));    out.println("[");    out.println("{");    out.println("  \"schema\": \"vip\",");    out.println("  \"table\": \"clients\",");    out.println("  \"columns\": [");    out.println("    \"personal_code\",");    out.println("    \"birth_date\",");    out.println("    \"email\"");    out.println("    ]");    out.println("}");    out.println("]");    out.close();    filterHelper.setContext(replicatorContext);    filterHelper.setFilter(ncf);    filterHelper.done();    fail("Exception not thrown during preparation though definitions file is structured incorrectly");  } catch (  ReplicatorException e) {    logger.info("Expected error received: " + e);  }}  }
class C{  public CSVReaderBuilder withKeepCarriageReturn(boolean keepCR){  this.keepCR=keepCR;  return this;}  }
class C{  public void run(){  InstantMultimediaMessage msg;  while ((msg=(InstantMultimediaMessage)mBuffer.getObject()) != null) {    try {      sendSipMessage(msg,null);    } catch (    PayloadException|RuntimeException e) {      sLogger.error("Failed to send instant multimedia message",e);    }catch (    NetworkException e) {      if (sLogger.isActivated()) {        sLogger.debug(e.getMessage());      }    }  }}  }
class C{  @Nonnull public String host(){  return host;}  }
class C{  public MapLikeType constructRawMapLikeType(Class<?> mapClass){  return MapLikeType.construct(mapClass,unknownType(),unknownType());}  }
class C{  private void cmd_calculateDifference(){  BigDecimal previousValue, actualValue;  Timestamp today=TimeUtil.getDay(System.currentTimeMillis());  MCash cash=MCash.get(p_pos.getCtx(),p_pos.getC_CashBook_ID(),today,null);  v_previousBalance.setValue(cash.getEndingBalance());  previousValue=cash.getEndingBalance();  actualValue=(BigDecimal)v_ActualBalance.getValue();  v_difference.setValue(actualValue.subtract(previousValue));}  }
class C{  public void testStore1(){  store.put("module1",Arrays.asList(new String[]{"extend1","extend2","extend1"}));  assertTrue(store.getListOfModulesToReparse("extend1").contains("module1") && store.getListOfModulesToReparse("extend1").size() == 1);  assertTrue(store.getListOfModulesToReparse("extend2").contains("module1") && store.getListOfModulesToReparse("extend2").size() == 1);}  }
class C{  public void pushSAXLocator(SourceLocator location){  m_saxLocations.push(location);}  }
class C{  public static boolean objectEquals(Object o1,Object o2){  if (o1 == o2) {    return true;  }  if (o1 == null) {    return false;  }  return o1.equals(o2);}  }
class C{  private boolean verifyVplexSupportsThinProvisioning(StorageSystem vplex){  if (vplex == null) {    return false;  }  int versionValue=VersionChecker.verifyVersionDetails(VPlexApiConstants.MIN_VERSION_THIN_PROVISIONING,vplex.getFirmwareVersion());  boolean isCompatible=versionValue >= 0;  _log.info("VPLEX support for thin volumes is " + isCompatible);  if (!isCompatible) {    _log.info("minimum VPLEX thin provisioning firmware version is {}, discovered firmeware version for VPLEX {} is {}",VPlexApiConstants.MIN_VERSION_THIN_PROVISIONING,vplex.forDisplay(),vplex.getFirmwareVersion());  }  return isCompatible;}  }
class C{  public static BigInteger[] proofKnowLog(BigInteger g,BigInteger x,int version) throws SMException {  BigInteger r=randomExponent();  BigInteger temp=g.modPow(r,SM.MODULUS_S);  BigInteger c=hash(version,temp,null);  temp=x.multiply(c).mod(ORDER_S);  BigInteger d=r.subtract(temp).mod(ORDER_S);  BigInteger[] ret=new BigInteger[2];  ret[0]=c;  ret[1]=d;  return ret;}  }
class C{  public Object read(InputNode node) throws Exception {  Position line=node.getPosition();  Class expect=type.getType();  String name=entry.getKey();  if (name == null) {    name=context.getName(expect);  }  if (entry.isAttribute()) {    throw new AttributeException("Can not have %s as an attribute for %s at %s",expect,entry,line);  }  return read(node,name);}  }
class C{  public static void mergeTabixFiles(File output,List<File> files,List<Long> dataFileSizes) throws IOException {  long pointerAdjust=0;  final SequenceIndex[][] indexesSquared=new SequenceIndex[files.size()][];  final String[][] sequenceNames=new String[files.size()][];  TabixHeader mergedHeader=null;  for (int i=0; i < files.size(); i++) {    final File tbiFile=files.get(i);    try (BlockCompressedInputStream bcis=new BlockCompressedInputStream(tbiFile)){      final TabixHeader th=TabixHeader.readHeader(bcis);      sequenceNames[i]=th.getSequenceNamesUnpacked();      if (mergedHeader != null) {        mergedHeader=TabixHeader.mergeHeaders(mergedHeader,th);      } else {        mergedHeader=th;      }      indexesSquared[i]=loadFileIndexes(bcis,th.getNumSequences(),pointerAdjust);    }     pointerAdjust+=dataFileSizes.get(i);  }  final List<SequenceIndex> indexes=collapseIndexes(indexesSquared,sequenceNames);  TabixIndexer.mergeChunks(indexes);  try (BlockCompressedOutputStream fos=new BlockCompressedOutputStream(output)){    TabixIndexer.writeIndex(indexes,mergedHeader.getOptions(),Arrays.asList(mergedHeader.getSequenceNamesUnpacked()),fos);  } }  }
class C{  public static String stateToString(int state){switch (state) {case STATE_DISCONNECTED:    return "disconnected";case STATE_CONNECTING:  return "connecting";case STATE_CONNECTED:return "connected";case STATE_DISCONNECTING:return "disconnecting";case STATE_PLAYING:return "playing";case STATE_NOT_PLAYING:return "not playing";default :return "<unknown state " + state + ">";}}  }
class C{  public void onInitEngine(int status){  if (status == TextToSpeech.SUCCESS) {    updateWidgetState(true);    if (DBG)     Log.d(TAG,"TTS engine for settings screen initialized.");  } else {    if (DBG)     Log.d(TAG,"TTS engine for settings screen failed to initialize successfully.");    updateWidgetState(false);  }}  }
class C{  public Type resolveType(String typeDefinition){  if (typeDefinition == null) {    throw new TypeException("Missing type definition");  }  if (typeDefinitions.containsKey(typeDefinition)) {    return typeDefinitions.get(typeDefinition);  }  Matcher matcher=TYPE_PATTERN.matcher(typeDefinition);  if (!matcher.matches()) {    throw new IllegalArgumentException("Badly formed type name " + typeDefinition);  }  String optional=matcher.group(1);  String name=matcher.group(2);  String array=matcher.group(3);  String arraySize=matcher.group(4);  boolean isOptional=optional != null;  StructDefinition struct=structDefinitions.get(name);  boolean isArray=array != null;  int length=(arraySize == null) ? 0 : Integer.parseInt(arraySize);  Type type;  if (struct != null) {    type=new Type(isOptional,name,isArray,length,struct);  } else {    try {      type=new Type(isOptional,name,isArray,length,Primitive.valueOf(name));    } catch (    IllegalArgumentException e) {      throw new TypeException("Unknown type " + name);    }  }  return type;}  }
class C{  public <D,E extends Element>ElementMetadata<D,E> bind(ElementKey<?,?> parent,ElementKey<D,E> child){  return bind(parent,child,null);}  }
class C{  private void rescanAll() throws VcsException {  Set<VirtualFile> untrackedFiles=myGit.untrackedFiles(myProject,myRoot,null);synchronized (myDefinitelyUntrackedFiles) {    myDefinitelyUntrackedFiles.clear();    myDefinitelyUntrackedFiles.addAll(untrackedFiles);  }synchronized (LOCK) {    myPossiblyUntrackedFiles.clear();    myReady=true;  }}  }
class C{  @CanIgnoreReturnValue public static <T>T readBytes(InputStream input,ByteProcessor<T> processor) throws IOException {  checkNotNull(input);  checkNotNull(processor);  byte[] buf=createBuffer();  int read;  do {    read=input.read(buf);  } while (read != -1 && processor.processBytes(buf,0,read));  return processor.getResult();}  }
class C{  protected void notifyComplete(){  final String methodName="notifyComplete";  log.fine(CLASS_NAME,methodName,"404",new Object[]{getKey(),this.response,this.exception});synchronized (responseLock) {    if (exception == null && pendingComplete) {      completed=true;      pendingComplete=false;    } else {      pendingComplete=false;    }    responseLock.notifyAll();  }synchronized (sentLock) {    sent=true;    sentLock.notifyAll();  }}  }
class C{  public static ClientRequestType parseClientDeletionRequest(SoapMessageImpl message) throws Exception {  return parse(message,CLIENT_DELETION);}  }
class C{  public String toString(){  String result="Contact=" + mContact + ", Status="+ mRcsStatus+ ", State="+ mRegistrationState+ ", Timestamp="+ mRcsStatusTimestamp+ ", Blocked="+ mBlockingState+ ", Blocked at="+ mBlockingTs;  if (mCapabilities != null) {    result+=", Capabilities=" + mCapabilities.toString();  }  if (mPresenceInfo != null) {    result+=", Presence=" + mPresenceInfo.toString();  }  return result;}  }
class C{  public double compute(int... dataset){  return computeInPlace(intsToDoubles(dataset));}  }
class C{  private void findLinearIntervals(int nc){  double zMin=Double.MAX_VALUE;  double zMax=-zMin;  int ni=funcArray.length;  for (int i=0; i < ni; ++i) {    int nj=funcArray[i].length;    for (int j=0; j < nj; ++j) {      double zVal=funcArray[i][j];      zMin=Math.min(zMin,zVal);      zMax=Math.max(zMax,zVal);    }  }  cAttr=new ContourAttrib[nc];  double delta=(zMax - zMin) / (nc + 1);  for (int i=0; i < nc; i++) {    cAttr[i]=new ContourAttrib(zMin + (i + 1) * delta);    if (DEBUG)     System.out.println("level[" + i + "] = "+ (zMin + (i + 1) * delta));  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s2=getString(stack);  String s1=getString(stack);  return (s1 == null || s2 == null) ? new Integer(-1) : new Integer(s1.lastIndexOf(s2));}  }
class C{  public ProxyDistribution(DistributionSet distributionSet){  setName(distributionSet.getName());  setDescription(distributionSet.getDescription());  setDistId(distributionSet.getId());  setId(distributionSet.getId());  setVersion(distributionSet.getVersion());  setCreatedDate(SPDateTimeUtil.getFormattedDate(distributionSet.getCreatedAt()));  setLastModifiedDate(SPDateTimeUtil.getFormattedDate(distributionSet.getLastModifiedAt()));  setCreatedByUser(UserDetailsFormatter.loadAndFormatCreatedBy(distributionSet));  setModifiedByUser(UserDetailsFormatter.loadAndFormatLastModifiedBy(distributionSet));  setNameVersion(HawkbitCommonUtil.getFormattedNameVersion(distributionSet.getName(),distributionSet.getVersion()));  setIsComplete(distributionSet.isComplete());}  }
class C{  public void testNamedSubqueryPlacement02(){  new Helper(){{      given=select(varNode(x),namedSubQuery("_set1",varNode("x1"),where(statementPatternNode(varNode("x1"),constantNode(a),constantNode(b),1))),where(stmtPatternWithVar("x1"),stmtPatternWithVarOptional("y1"),stmtPatternWithVar("y1"),namedSubQueryInclude("_set1")));      expected=select(varNode(x),namedSubQuery("_set1",varNode("x1"),where(statementPatternNode(varNode("x1"),constantNode(a),constantNode(b),1))),where(namedSubQueryInclude("_set1"),stmtPatternWithVar("x1"),stmtPatternWithVarOptional("y1"),stmtPatternWithVar("y1")));    }  }.testWhileIgnoringExplainHints();}  }
class C{  public int findColumn(int offset){  int line=findLine(offset);  int offsetAtLineStart=lineStarts[line];  return offset - offsetAtLineStart;}  }
class C{  @NotNull public static VcsLogHighlighter.VcsCommitStyle background(@Nullable Color background){  return createStyle(null,background,null);}  }
class C{  public synchronized boolean close(){  if (s_cache != null)   s_cache.remove(getTrxName());  if (m_connection == null)   return true;  if (isActive())   commit();  try {    m_connection.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,m_trxName,e);  }  m_connection=null;  m_active=false;  log.log(Level.ALL,m_trxName);  return true;}  }
class C{  public ComplexColorWheelImageProducer(ColorSpace sys,int w,int h,boolean flipX,boolean flipY){  super(sys,w,h);  this.flipX=flipX;  this.flipY=flipY;}  }
class C{  public static OMRect read(DataInputStream dis) throws IOException {  return read(dis,null);}  }
class C{  public InlineQueryResultCachedGifBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public XTIFFField createField(int tag,int type,int count,Object obj){  return new XTIFFField(tag,type,count,obj);}  }
class C{  public Set<DefUseCoverageTestFitness> determineDefUsePairs(){  Set<DefUseCoverageTestFitness> r=preAnalyzeMethods();  for (  CCFGMethodEntryNode publicMethodEntry : ccfg.publicMethods) {    if (analyzedMethods.contains(publicMethodEntry)) {      continue;    }    if (publicMethodEntry.getEntryInstruction() == null)     throw new IllegalStateException("expect each CCFGMethodEntryNode to have its entryInstruction set");    r.addAll(determineIntraInterMethodPairs(publicMethodEntry));  }  r.addAll(createIntraClassPairs());  freeMemory();  return r;}  }
class C{  public void put(String key,InputStream stream){  put(key,stream,null);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  RoundRobinHashMap oper=new RoundRobinHashMap();  CollectorTestSink mapSink=new CollectorTestSink();  String[] keys=new String[3];  keys[0]="a";  keys[1]="b";  keys[2]="c";  oper.setKeys(keys);  oper.map.setSink(mapSink);  oper.beginWindow(0);  HashMap<String,Integer> t1=new HashMap<String,Integer>();  t1.put("a",0);  t1.put("b",1);  t1.put("c",2);  HashMap<String,Integer> t2=new HashMap<String,Integer>();  t2.put("a",3);  t2.put("b",4);  t2.put("c",5);  HashMap<String,Integer> t3=new HashMap<String,Integer>();  t3.put("a",6);  t3.put("b",7);  t3.put("c",8);  HashMap<String,Integer> t4=new HashMap<String,Integer>();  t4.put("a",9);  t4.put("b",10);  t4.put("c",11);  int numtuples=12;  for (int i=0; i < numtuples; i++) {    oper.data.process(i);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",numtuples / 3,mapSink.collectedTuples.size());  log.debug(mapSink.collectedTuples.toString());  Assert.assertEquals("tuple 1",t1,mapSink.collectedTuples.get(0));  Assert.assertEquals("tuple 2",t2,mapSink.collectedTuples.get(1));  Assert.assertEquals("tuple 3",t3,mapSink.collectedTuples.get(2));  Assert.assertEquals("tuple 4",t4,mapSink.collectedTuples.get(3));}  }
class C{  public Individual(double[] weights){  this.weights=weights;  neighbors=new ArrayList<Individual>();  utility=1.0;}  }
class C{  public static int EFBIG(){  return Errno.EFBIG.intValue();}  }
class C{  public void transformValues(TObjectFunction<V,V> function){  V[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (isFull(values,i)) {      values[i]=wrapNull(function.execute(unwrapNull(values[i])));    }  }}  }
class C{  public void normalize(){  double totalCount=totalCount();  for (  E key : keySet()) {    setCount(key,getCount(key) / totalCount);  }  dirty=true;}  }
class C{  public Route createRoute(){  RouteImpl route=new RouteImpl();  return route;}  }
class C{  public boolean add(long val){  int index=insertionIndex(val);  if (index < 0) {    return false;  }  byte previousState=_states[index];  _set[index]=val;  _states[index]=FULL;  postInsertHook(previousState == FREE);  return true;}  }
class C{  public HTMLEditor(Dialog owner,String title,String htmlText,boolean editable){  super(owner,title == null ? Msg.getMsg(Env.getCtx(),"Editor") : title,true);  init(owner,htmlText,editable);}  }
class C{  public void stop() throws IgniteException {  if (stopped)   return;  stopped=true;  SinkContext.getStreamer().close();  SinkContext.getIgnite().cache(cacheName).close();  SinkContext.getIgnite().close();}  }
class C{  @Override public void onPull(float scale){  int percent=(int)(scale * 100);  mActionBarHeaderPullingProgressLayout.setPercent(percent);}  }
class C{  private void showWindow(){  Window window=getProgressLog().getWindow();  WindowUtils.restoreSize(window);  window.setVisible(true);}  }
class C{  @Override public boolean supportsSchemasInIndexDefinitions(){  debugCodeCall("supportsSchemasInIndexDefinitions");  return true;}  }
class C{  public static boolean isMiddleMouseButton(MouseEvent anEvent){  return (anEvent.getModifiersEx() & InputEvent.BUTTON2_DOWN_MASK) > 0;}  }
class C{  public AuthenticationToken(String username,String password){  this.authMode=AuthenticationMode.BASIC_AUTH;  this.username=username;  this.password=password;}  }
class C{  public void actionPerformed(ActionEvent e){}  }
class C{  protected final String _handleUnusualFieldName(int i) throws IOException, JsonParseException {  if (i == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {    return _parseApostropheFieldName();  }  if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {    _reportUnexpectedChar(i,"was expecting double-quote to start field name");  }  final int[] codes=CharTypes.getInputCodeLatin1JsNames();  final int maxCode=codes.length;  boolean firstOk;  if (i < maxCode) {    firstOk=(codes[i] == 0) && (i < INT_0 || i > INT_9);  } else {    firstOk=Character.isJavaIdentifierPart((char)i);  }  if (!firstOk) {    _reportUnexpectedChar(i,"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");  }  int ptr=_inputPtr;  int hash=0;  final int inputLen=_inputEnd;  if (ptr < inputLen) {    do {      int ch=_inputBuffer[ptr];      if (ch < maxCode) {        if (codes[ch] != 0) {          int start=_inputPtr - 1;          _inputPtr=ptr;          return _symbols.findSymbol(_inputBuffer,start,ptr - start,hash);        }      } else       if (!Character.isJavaIdentifierPart((char)ch)) {        int start=_inputPtr - 1;        _inputPtr=ptr;        return _symbols.findSymbol(_inputBuffer,start,ptr - start,hash);      }      hash=(hash * 31) + ch;      ++ptr;    } while (ptr < inputLen);  }  int start=_inputPtr - 1;  _inputPtr=ptr;  return _parseUnusualFieldName2(start,hash,codes);}  }
class C{  public void onChildThreadResumeBegin(){  _threadCount.incrementAndGet();}  }
class C{  public boolean isMaxYSet(int scale){  return mMaxY[scale] != -MathHelper.NULL_VALUE;}  }
class C{  private void render(GL2 gl){  World world=this.simulation.getWorld();  List<SandboxRay> rays=this.simulation.getRays();  Dimension size=this.canvasSize;  Vector2 offset=this.simulation.getCamera().getTranslation();  double scale=this.simulation.getCamera().getScale();  gl.glPushMatrix();  gl.glScaled(scale,scale,scale);  gl.glTranslated(offset.x,offset.y,0.0);  if (Preferences.isBoundsEnabled()) {    gl.glColor4fv(Preferences.getBoundsColor(),0);    RenderUtilities.drawBounds(gl,world.getBounds());  }  int bSize=world.getBodyCount();  for (int i=0; i < bSize; i++) {    SandboxBody body=(SandboxBody)world.getBody(i);    if (body == this.selectBodyAction.getObject())     continue;    if (body == this.editBodyAction.getObject())     continue;    this.renderBody(gl,body);  }  if (Preferences.isBodyAABBEnabled()) {    for (int i=0; i < bSize; i++) {      SandboxBody body=(SandboxBody)world.getBody(i);      if (body == this.selectBodyAction.getObject())       continue;      if (body == this.editBodyAction.getObject())       continue;      this.renderAABB(gl,body);    }  }  int jSize=world.getJointCount();  for (int i=0; i < jSize; i++) {    Joint joint=world.getJoint(i);    if (joint == this.selectedBodyJoint)     continue;    RenderUtilities.drawJoint(gl,joint,world.getStep().getInverseDeltaTime());  }  if (this.selectBodyAction.isActive()) {    this.renderSelectedBody(gl,this.selectBodyAction.getObject());  }  if (this.editBodyAction.isActive()) {    this.renderEditingBody(gl,this.editBodyAction.getObject());  }  if (this.selectedBodyJoint != null) {    RenderUtilities.drawMouseJoint(gl,this.selectedBodyJoint,this.simulation.getWorld().getStep().getInverseDeltaTime());  }  if (Preferences.isContactPairEnabled() || Preferences.isContactImpulseEnabled() || Preferences.isContactPointEnabled()|| Preferences.isFrictionImpulseEnabled()) {    ContactCounter cc=this.simulation.getContactCounter();    List<ContactPoint> contacts=cc.getContacts();    int cSize=contacts.size();    for (int i=0; i < cSize; i++) {      ContactPoint cp=contacts.get(i);      Vector2 c=cp.getPoint();      if (Preferences.isContactPairEnabled()) {        gl.glColor4fv(Preferences.getContactPairColor(),0);        Vector2 p1=cp.getBody1().getTransform().getTransformed(cp.getFixture1().getShape().getCenter());        Vector2 p2=cp.getBody2().getTransform().getTransformed(cp.getFixture2().getShape().getCenter());        RenderUtilities.drawLineSegment(gl,p1,p2,false);      }      if (Preferences.isContactPointEnabled()) {        gl.glColor4fv(Preferences.getContactPointColor(),0);        RenderUtilities.fillRectangleFromCenter(gl,c.x,c.y,0.05,0.05);      }      if (cp instanceof SolvedContactPoint) {        SolvedContactPoint scp=(SolvedContactPoint)cp;        Vector2 n=scp.getNormal();        Vector2 t=n.cross(1.0);        double j=scp.getNormalImpulse();        double jt=scp.getTangentialImpulse();        if (Preferences.isContactImpulseEnabled()) {          gl.glColor4fv(Preferences.getContactImpulseColor(),0);          RenderUtilities.drawLineSegment(gl,c.x,c.y,c.x + n.x * j,c.y + n.y * j,false);        }        if (Preferences.isFrictionImpulseEnabled()) {          gl.glColor4fv(Preferences.getFrictionImpulseColor(),0);          RenderUtilities.drawLineSegment(gl,c.x,c.y,c.x + t.x * jt,c.y + t.y * jt,false);        }      }    }  }  List<RaycastResult> results=new ArrayList<RaycastResult>();  for (int i=0; i < rays.size(); i++) {    SandboxRay ray=rays.get(i);    Vector2 s=ray.getStart();    Vector2 d=ray.getDirectionVector();    double x=size.getWidth() / scale * 0.5 - (s.x + offset.x);    double y=size.getHeight() / scale * 0.5 - (s.y + offset.y);    double ml=Math.sqrt(x * x + y * y);    double l=ray.length > 0.0 ? ray.length : ml;    gl.glColor4f(1.0f,0.0f,0.0f,0.8f);    gl.glBegin(GL.GL_LINES);    gl.glVertex2d(s.x,s.y);    gl.glVertex2d(s.x + d.x * l,s.y + d.y * l);    gl.glEnd();    if (world.raycast(ray,ray.length,ray.sensors,ray.all,results)) {      int rSize=results.size();      gl.glColor4f(0.0f,1.0f,0.0f,1.0f);      for (int j=0; j < rSize; j++) {        RaycastResult result=results.get(j);        Raycast raycast=result.getRaycast();        Vector2 point=raycast.getPoint();        Vector2 normal=raycast.getNormal();        RenderUtilities.fillRectangleFromCenter(gl,point.x,point.y,0.02,0.02);        gl.glBegin(GL.GL_LINES);        gl.glVertex2d(point.x,point.y);        gl.glVertex2d(point.x + normal.x,point.y + normal.y);        gl.glEnd();      }    }  }  if (this.simulation instanceof CompiledSimulation) {    CompiledSimulation cs=(CompiledSimulation)this.simulation;    cs.render(gl);  }  gl.glPopMatrix();  gl.glPushMatrix();  gl.glLoadIdentity();  if (Preferences.isOriginLabeled()) {    double ox=offset.x * scale;    double oy=offset.y * scale;    this.textRenderer.beginRendering(size.width,size.height);    this.textRenderer.setColor(0.0f,0.0f,0.0f,0.8f);    this.textRenderer.draw(ORIGIN_LABEL,(int)Math.floor(ox) + size.width / 2 + 3,(int)Math.floor(oy) + size.height / 2 - 12);    this.textRenderer.endRendering();    gl.glColor4f(0.0f,0.0f,0.0f,0.8f);    RenderUtilities.fillRectangleFromCenter(gl,ox,oy,3,3);  }  boolean bodyLabels=Preferences.isBodyLabeled();  boolean fixtureLabels=Preferences.isFixtureLabeled();  if ((bodyLabels || fixtureLabels) && !this.editBodyAction.isActive()) {    this.textRenderer.beginRendering(size.width,size.height);    this.textRenderer.setColor(0.0f,0.0f,0.0f,0.8f);    bSize=world.getBodyCount();    for (int i=0; i < bSize; i++) {      SandboxBody body=(SandboxBody)world.getBody(i);      Vector2 c=body.getWorldCenter();      int x, y;      if (bodyLabels) {        x=(int)Math.floor((c.x + offset.x) * scale) + size.width / 2 + 3;        y=(int)Math.floor((c.y + offset.y) * scale) + size.height / 2 - 12;        this.textRenderer.draw(body.getName(),x,y);        this.textRenderer.draw(RenderUtilities.formatVector2(c),x,y - 16);      }      if (fixtureLabels) {        Transform tx=body.getTransform();        int fSize=body.getFixtureCount();        for (int j=0; j < fSize; j++) {          BodyFixture bf=body.getFixture(j);          Vector2 lc=bf.getShape().getCenter();          Vector2 wc=tx.getTransformed(lc);          x=(int)Math.floor((wc.x + offset.x) * scale) + size.width / 2 + 3;          y=(int)Math.floor((wc.y + offset.y) * scale) + size.height / 2 - 12;          this.textRenderer.draw((String)bf.getUserData(),x,y);          this.textRenderer.draw(RenderUtilities.formatVector2(wc),x,y - 16);        }      }    }    this.textRenderer.endRendering();  }  if (Preferences.isScaleEnabled()) {    gl.glPushMatrix();    gl.glLoadIdentity();    gl.glTranslated(-size.getWidth() * 0.5,-size.getHeight() * 0.5,0.0);    final int x=5;    final int y=18;    final int lw=3;    final int w=100;    final int h=15;    final int th=7;    float olw=RenderUtilities.setLineWidth(gl,lw);    final int o=(lw - 1) / 2;    double d=w / scale;    gl.glColor4f(0.0f,0.0f,0.0f,1.0f);    gl.glBegin(GL.GL_LINES);    gl.glVertex2i(x + o,y - h - o + th);    gl.glVertex2i(x + o,y);    gl.glVertex2i(x + o,y - o);    gl.glVertex2i(x + w - o,y - o);    gl.glVertex2i(x + w - o,y);    gl.glVertex2i(x + w - o,y - h - o + th);    gl.glEnd();    RenderUtilities.setLineWidth(gl,olw);    gl.glPopMatrix();    this.textRenderer.beginRendering(size.width,size.height);    this.textRenderer.setColor(0.0f,0.0f,0.0f,1.0f);    if (scale < 1.0) {      this.textRenderer.draw(MessageFormat.format(SCALE_CONVERSION_FRACTION,scale),x + (2 * o) + 8,y + 4);    } else {      this.textRenderer.draw(MessageFormat.format(SCALE_CONVERSION_WHOLE,scale),x + (2 * o) + 8,y + 4);    }    this.textRenderer.draw(MessageFormat.format(SCALE_LENGTH,d),x + (2 * o) + 8,y - (2 * o) - 12);    this.textRenderer.endRendering();  }  gl.glPopMatrix();}  }
class C{  public void startAutoScroll(long delayTimeInMills){  isAutoScroll=true;  sendScrollMessage(delayTimeInMills);}  }
class C{  public synchronized int search(Object o){  final Object[] dumpArray=elementData;  final int size=elementCount;  if (o != null) {    for (int i=size - 1; i >= 0; i--) {      if (o.equals(dumpArray[i])) {        return size - i;      }    }  } else {    for (int i=size - 1; i >= 0; i--) {      if (dumpArray[i] == null) {        return size - i;      }    }  }  return -1;}  }
class C{  private RopeByteString(ByteString left,ByteString right){  this.left=left;  this.right=right;  leftLength=left.size();  totalLength=leftLength + right.size();  treeDepth=Math.max(left.getTreeDepth(),right.getTreeDepth()) + 1;}  }
class C{  String path(){  return path;}  }
class C{  private void invokeCqsConnected(Pool pool,boolean connected){  String poolName=pool.getName();synchronized (cqPoolsConnected) {    if (cqPoolsConnected.containsKey(poolName) && connected == cqPoolsConnected.get(poolName)) {      return;    }    cqPoolsConnected.put(poolName,connected);    Collection<? extends InternalCqQuery> cqs=this.getAllCqs();    String cqName=null;    final boolean isDebugEnabled=logger.isDebugEnabled();    for (    InternalCqQuery query : cqs) {      try {        if (query == null) {          continue;        }        cqName=query.getName();        ClientCQImpl cQuery=(ClientCQImpl)this.getCq(cqName);        if (cQuery == null || cQuery.getCQProxy() == null) {          continue;        }        Pool cqPool=cQuery.getCQProxy().getPool();        if (cQuery.isConnected() == connected || !cqPool.getName().equals(poolName)) {          continue;        }        if ((!cQuery.isRunning() && cQuery.getQueuedEvents() == null)) {          if (isDebugEnabled) {            logger.debug("Unable to invoke CqListener, {}, CqName : {}",((cQuery == null) ? "CQ not found" : " CQ is Not running"),cqName);          }          continue;        }        this.invokeCqConnectedListeners(cqName,cQuery,connected);      } catch (      VirtualMachineError e) {        SystemFailure.initiateFailure(e);        throw e;      }catch (      Throwable t) {        SystemFailure.checkFailure();        logger.warn(LocalizedMessage.create(LocalizedStrings.CqService_ERROR_SENDING_CQ_CONNECTION_STATUS,cqName),t);        if (t instanceof VirtualMachineError) {          logger.warn(LocalizedMessage.create(LocalizedStrings.CqService_VIRTUALMACHINEERROR_PROCESSING_CQLISTENER_FOR_CQ_0,cqName),t);          return;        }      }    }  }}  }
class C{  Resource inferCoreType(Resource resource){  if (resource != null && resource.getCoreRowType() != null) {    if (Constants.DWC_ROWTYPE_OCCURRENCE.equalsIgnoreCase(resource.getCoreRowType())) {      resource.setCoreType(CoreRowType.OCCURRENCE.toString().toLowerCase());    } else     if (Constants.DWC_ROWTYPE_TAXON.equalsIgnoreCase(resource.getCoreRowType())) {      resource.setCoreType(CoreRowType.CHECKLIST.toString().toLowerCase());    } else     if (Constants.DWC_ROWTYPE_EVENT.equalsIgnoreCase(resource.getCoreRowType())) {      resource.setCoreType(CoreRowType.SAMPLINGEVENT.toString().toLowerCase());    }  }  return resource;}  }
class C{  @Override public void close(){synchronized (this) {    if (this.closed)     return; else     this.closed=true;  }  socketDelegate.close();}  }
class C{  public Document read(char[] text) throws DocumentException, IOException, XmlPullParserException {  getXPPParser().setInput(new CharArrayReader(text));  return parseDocument();}  }
class C{  static SslBuilder ssl(){  return builder().ssl();}  }
class C{  public TxRequest64(XBeeAddress64 destination,int[] payload){  this(destination,DEFAULT_FRAME_ID,Option.UNICAST,payload);}  }
class C{  public ManageSieveException(){  super();}  }
class C{  @Override public void require(int type,String namespaceURI,String localName) throws XMLStreamException {  throw new UnsupportedOperationException("Not supported yet.");}  }
class C{  public boolean isPrintFunctionSymbols(){  Object oo=get_Value(COLUMNNAME_IsPrintFunctionSymbols);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Deprecated public void enableResizedPosting(){  resizedPostingDisableCount--;}  }
class C{  public Datenverarbeitung(CnATreeElement parent){  super(parent);  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public void queryError(WebSocket session,HeadersAmp headers,String to,long qid,Throwable exn) throws IOException {}  }
class C{  public Object cloneWithSource(Object newSource){  return new TreeSelectionEvent(newSource,paths,areNew,oldLeadSelectionPath,newLeadSelectionPath);}  }
class C{  @Override public int hashCode(){  int result=23;  long l=Double.doubleToLongBits(this.top);  result=37 * result + (int)(l ^ (l >>> 32));  l=Double.doubleToLongBits(this.bottom);  result=37 * result + (int)(l ^ (l >>> 32));  l=Double.doubleToLongBits(this.left);  result=37 * result + (int)(l ^ (l >>> 32));  l=Double.doubleToLongBits(this.right);  result=37 * result + (int)(l ^ (l >>> 32));  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.495 -0500",hash_original_method="FA28BF7ACB321CCE37D931F114A366BD",hash_generated_method="1EAD434B6308133C51665215BA907C7C") private String base_phone_number() throws ParseException {  StringBuffer s=new StringBuffer();  if (debug)   dbg_enter("base_phone_number");  try {    int lc=0;    while (lexer.hasMoreChars()) {      char w=lexer.lookAhead(0);      if (Lexer.isDigit(w) || w == '-' || w == '.' || w == '(' || w == ')') {        lexer.consume(1);        s.append(w);        lc++;      } else       if (lc > 0)       break; else       throw createParseException("unexpected " + w);    }    return s.toString();  }  finally {    if (debug)     dbg_leave("base_phone_number");  }}  }
class C{  public static String convertTime(int time){  time/=1000;  int minute=time / 60;  int second=time % 60;  minute%=60;  return String.format("%02d:%02d",minute,second);}  }
class C{  public static DataDisplayTable listTables(Font font){  String[] header={"tag","checksum","length","offset"};  Align[] displayAlignment={Align.Left,Align.Right,Align.Right,Align.Right};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  int fontSize=0;  Iterator<? extends Table> fontTableIter=font.iterator();  while (fontTableIter.hasNext()) {    Table fontTable=fontTableIter.next();    fontSize+=fontTable.headerLength();  }  fontTableIter=font.iterator();  while (fontTableIter.hasNext()) {    Table fontTable=fontTableIter.next();    String name=Tag.stringValue(fontTable.headerTag());    String checksum=String.format("0x%0" + CHECKSUM_LENGTH + "X",fontTable.headerChecksum());    int length=fontTable.headerLength();    double lengthPercent=length * 100.0 / fontSize;    int offset=fontTable.headerOffset();    String[] data={name,checksum,String.format("%s (%s%%)",length,twoDecimalPlaces.format(lengthPercent)),String.format("%d",offset)};    table.add(Arrays.asList(data));  }  return table;}  }
class C{  private void _serializeQuery(String name,Query query,StringBuilder sb,Set<Object> done) throws ConverterException {  if (useWDDX)   _serializeWDDXQuery(name,query,sb,done); else   _serializeASQuery(name,query,sb,done);}  }
class C{  public DrawerBuilder withStickyDrawerItems(@NonNull List<IDrawerItem> stickyDrawerItems){  this.mStickyDrawerItems=stickyDrawerItems;  return this;}  }
class C{  public void run(String[] args) throws Throwable {  int n=args.length - 1;  if (n >= 0) {    String[] args2=new String[n];    for (int i=0; i < n; ++i)     args2[i]=args[i + 1];    run(args[0],args2);  }}  }
class C{  protected Container createMessageArea(){  final JPanel top=new JPanel();  top.setBorder(UIManager.getBorder("OptionPane.messageAreaBorder"));  top.setLayout(new BoxLayout(top,BoxLayout.X_AXIS));  final Container body=new JPanel();  final Icon sideIcon=getIcon();  if (sideIcon != null) {    final JLabel iconLabel=new JLabel(sideIcon);    iconLabel.setVerticalAlignment(SwingConstants.TOP);    final JPanel iconPanel=new JPanel();    iconPanel.add(iconLabel);    top.add(iconPanel);    top.add(Box.createHorizontalStrut(kDialogLargePadding));  }  body.setLayout(new GridBagLayout());  final GridBagConstraints cons=new GridBagConstraints();  cons.gridx=cons.gridy=0;  cons.gridwidth=GridBagConstraints.REMAINDER;  cons.gridheight=1;  cons.anchor=GridBagConstraints.WEST;  cons.insets=new Insets(0,0,3,0);  addMessageComponents(body,cons,getMessage(),getMaxCharactersPerLineCount(),false);  top.add(body);  return top;}  }
class C{  public static IStatus validateTypeVariableName(String name){  return validateIdentifier(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  private static AnalysisResult checkAllAppearances(Register reg,IR ir){  return new AnalysisResult(!checkIfUseEscapesThread(reg,ir,null),!checkIfUseEscapesMethod(reg,ir,null));}  }
class C{  public static CompositeData parseComposite(URI uri) throws URISyntaxException {  CompositeData rc=new CompositeData();  rc.scheme=uri.getScheme();  String ssp=stripPrefix(uri.getRawSchemeSpecificPart().trim(),"//").trim();  parseComposite(uri,rc,ssp);  rc.fragment=uri.getFragment();  return rc;}  }
class C{  private static ByteBuffer wrapCalculatedValue(ByteBuffer buffer){  ByteBuffer newBuf=prepareWrappedCalcValue(buffer.remaining(),buffer.order());  newBuf.put(buffer);  newBuf.rewind();  return newBuf;}  }
class C{  public void reset(){  this.okayDiagnoses.clear();  this.poorDiagnoses.clear();}  }
class C{  public void recreateUISharedContexts(Session session){  uiContexts.clear();  for (  Context context : session.getContexts()) {    Context uiContext=context.duplicate();    uiContexts.put(context.getIndex(),uiContext);  }}  }
class C{  public void createPictScenario03_4() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-09-30 00:00:00");  String supplierAdminId="Pict03_4Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict03_4SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict03_4Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_ASYNC_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ASYNC_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC03_4Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC03_4CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  VOServiceDetails serviceDetailsTemp=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT_TEST_03_4",TestService.EXAMPLE2_ASYNC,TestPriceModel.FREE,example2TechService,supplMarketplace);  VOServiceDetails serviceDetails=serviceSetup.savePriceModelForCustomer(serviceDetailsTemp,TestPriceModel.EXAMPLE_PICT03_UNIT_HOUR,customer);  serviceDetails=serviceSetup.activateMarketableService(serviceDetails);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_03_4",serviceDetails,customerAdmin,role);  long usageStartTime=DateTimeHandling.calculateMillis("2013-10-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  subDetails=subscrSetup.completeAsyncSubscription(supplierAdmin.getKey(),customerAdmin,subDetails);  long userDeassignedTime=DateTimeHandling.calculateMillis("2013-10-02 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  long userAssignedTime=DateTimeHandling.calculateMillis("2013-10-02 12:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-10-02 13:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-10-02 14:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  userDeassignedTime=DateTimeHandling.calculateMillis("2013-10-22 10:10:00");  BillingIntegrationTestBase.setDateFactoryInstance(userDeassignedTime);  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  userAssignedTime=DateTimeHandling.calculateMillis("2013-10-22 10:20:00");  BillingIntegrationTestBase.setDateFactoryInstance(userAssignedTime);  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-11-01 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:01"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:02"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetailsTemp);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-11-01 13:00:03"));  container.login(supplierAdmin.getKey(),ROLE_TECHNOLOGY_MANAGER);  serviceSetup.deleteTechnicalService(example2TechService);  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_03_4",subDetails);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_03_4",customer);}  }
class C{  public static DD copy(DD dd){  return new DD(dd);}  }
class C{  @NotNull @ObjectiveCName("joinGroupViaLinkCommandWithToken:") public Command<Integer> joinGroupViaToken(String token){  return null;}  }
class C{  public static void play(int soundNum){  if (SoundResources.sSoundEffectsEnabled) {    SoundResources instance=sSoundResources;    if (instance != null) {      instance.mSounds[soundNum].play();    }  }}  }
class C{  public void addColumn(TableColumn aColumn){  if (aColumn == null) {    throw new IllegalArgumentException("Object is null");  }  tableColumns.addElement(aColumn);  aColumn.addPropertyChangeListener(this);  invalidateWidthCache();  fireColumnAdded(new TableColumnModelEvent(this,0,getColumnCount() - 1));}  }
class C{  static void make72Safe(StringBuffer line){  int length=line.length();  if (length > 72) {    int index=70;    while (index < length - 2) {      line.insert(index,"\r\n ");      index+=72;      length+=3;    }  }  return;}  }
class C{  public static JPopupMenu leftShift(JPopupMenu self,GString gstr){  self.add(gstr.toString());  return self;}  }
class C{  public Plot scatter(String label,double[] x,double[] y){  return scatter(label,toList(x),toList(y));}  }
class C{  public boolean checkRequest(ProxyMessage msg){  return true;}  }
class C{  public void IfConfigIsLoadedTest(){  assertNotNull(Config.singletonConfig);}  }
class C{  public MockHttpServletRequest(ServletContext servletContext,String method,String requestURI){  this.servletContext=servletContext == null ? new MockServletContext() : servletContext;  this.method=method;  this.requestURI=requestURI;  this.locales.add(Locale.ENGLISH);}  }
class C{  protected SelectedSparseDoubleMatrix3D(AbstractIntDoubleMap elements,int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets,int offset){  int slices=sliceOffsets.length;  int rows=rowOffsets.length;  int columns=columnOffsets.length;  setUp(slices,rows,columns);  this.elements=elements;  this.sliceOffsets=sliceOffsets;  this.rowOffsets=rowOffsets;  this.columnOffsets=columnOffsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  public FastStringBuffer append(int n){  append(String.valueOf(n));  return this;}  }
class C{  public final void removeCallbacks(Runnable r,Object token){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable,token);  }}  }
class C{  public Message loadEnemyVillage(int villageIndex,boolean war) throws IOException {  if (villageIndex < 0) {    throw new IllegalArgumentException();  }  if (enemyHomes.length == 0) {    return null;  }  File villageFile=enemyHomes[villageIndex % enemyHomes.length];  try (FileInputStream in=new FileInputStream(villageFile)){    log.debug("loading village {}",villageFile);    Message village=messageFactory.fromStream(in);switch (village.getType()) {case EnemyHomeData:      village=filterEnemyHome(village,war);    break;case VisitedHomeData:  village=visitedHomeToEnemyHome(village,war);break;case WarHomeData:village=warHomeToEnemyHome(village);break;case HomeBattleReplayData:village=replayToEnemyHome(village);break;}return village;} }  }
class C{  private static boolean isAssignableFrom(Type from,GenericArrayType to){  Type toGenericComponentType=to.getGenericComponentType();  if (toGenericComponentType instanceof ParameterizedType) {    Type t=from;    if (from instanceof GenericArrayType) {      t=((GenericArrayType)from).getGenericComponentType();    } else     if (from instanceof Class<?>) {      Class<?> classType=(Class<?>)from;      while (classType.isArray()) {        classType=classType.getComponentType();      }      t=classType;    }    return isAssignableFrom(t,(ParameterizedType)toGenericComponentType,new HashMap<String,Type>());  }  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void changeRoleToSlaveWithRequest() throws Exception {  int xid=2323;  assertTrue("This method can only be called when handler is in " + "MASTER or SLAVE role",handler.isHandshakeComplete());  setupSwitchSendRoleRequestAndVerify(true,xid,Role.SLAVE);  reset(sw);  expect(sw.inputThrottled(anyObject(OFMessage.class))).andReturn(false).anyTimes();  sw.setAttribute(IOFSwitch.SWITCH_SUPPORTS_NX_ROLE,true);  expectLastCall().once();  sw.setHARole(Role.SLAVE);  expectLastCall().once();  replay(sw);  verify(controller);  reset(controller);  controller.switchDeactivated(sw);  expectLastCall().once();  OFMessage reply=getRoleReply(xid,Role.SLAVE);  sendMessageToHandlerNoControllerReset(Collections.singletonList(reply));  assertEquals(OFChannelHandler.ChannelState.SLAVE,handler.getStateForTesting());}  }
class C{  @SuppressLint("NewApi") void executeSqlBatch(String[] queryarr,JSONArray[] jsonparams,String[] queryIDs,CallbackContext cbc){  if (mydb == null) {    cbc.error("database has been closed");    return;  }  String query="";  String query_id="";  int len=queryarr.length;  JSONArray batchResults=new JSONArray();  for (int i=0; i < len; i++) {    int rowsAffectedCompat=0;    boolean needRowsAffectedCompat=false;    query_id=queryIDs[i];    JSONObject queryResult=null;    String errorMessage="unknown";    try {      boolean needRawQuery=true;      query=queryarr[i];      QueryType queryType=getQueryType(query);      if (queryType == QueryType.update || queryType == QueryType.delete) {        if (android.os.Build.VERSION.SDK_INT >= 11) {          SQLiteStatement myStatement=mydb.compileStatement(query);          if (jsonparams != null) {            bindArgsToStatement(myStatement,jsonparams[i]);          }          int rowsAffected=-1;          try {            rowsAffected=myStatement.executeUpdateDelete();            needRawQuery=false;          } catch (          SQLiteException ex) {            ex.printStackTrace();            errorMessage=ex.getMessage();            Log.v("executeSqlBatch","SQLiteStatement.executeUpdateDelete(): Error=" + errorMessage);            needRawQuery=false;          }catch (          Exception ex) {          }          if (rowsAffected != -1) {            queryResult=new JSONObject();            queryResult.put("rowsAffected",rowsAffected);          }        } else {          rowsAffectedCompat=countRowsAffectedCompat(queryType,query,jsonparams,mydb,i);          needRowsAffectedCompat=true;        }      }      if (queryType == QueryType.insert && jsonparams != null) {        needRawQuery=false;        SQLiteStatement myStatement=mydb.compileStatement(query);        bindArgsToStatement(myStatement,jsonparams[i]);        long insertId=-1;        try {          insertId=myStatement.executeInsert();          queryResult=new JSONObject();          if (insertId != -1) {            queryResult.put("insertId",insertId);            queryResult.put("rowsAffected",1);          } else {            queryResult.put("rowsAffected",0);          }        } catch (        SQLiteException ex) {          ex.printStackTrace();          errorMessage=ex.getMessage();          Log.v("executeSqlBatch","SQLiteDatabase.executeInsert(): Error=" + errorMessage);        }      }      if (queryType == QueryType.begin) {        needRawQuery=false;        try {          mydb.beginTransaction();          queryResult=new JSONObject();          queryResult.put("rowsAffected",0);        } catch (        SQLiteException ex) {          ex.printStackTrace();          errorMessage=ex.getMessage();          Log.v("executeSqlBatch","SQLiteDatabase.beginTransaction(): Error=" + errorMessage);        }      }      if (queryType == QueryType.commit) {        needRawQuery=false;        try {          mydb.setTransactionSuccessful();          mydb.endTransaction();          queryResult=new JSONObject();          queryResult.put("rowsAffected",0);        } catch (        SQLiteException ex) {          ex.printStackTrace();          errorMessage=ex.getMessage();          Log.v("executeSqlBatch","SQLiteDatabase.setTransactionSuccessful/endTransaction(): Error=" + errorMessage);        }      }      if (queryType == QueryType.rollback) {        needRawQuery=false;        try {          mydb.endTransaction();          queryResult=new JSONObject();          queryResult.put("rowsAffected",0);        } catch (        SQLiteException ex) {          ex.printStackTrace();          errorMessage=ex.getMessage();          Log.v("executeSqlBatch","SQLiteDatabase.endTransaction(): Error=" + errorMessage);        }      }      if (needRawQuery) {        queryResult=this.executeSqlStatementQuery(mydb,query,jsonparams[i],cbc);        if (needRowsAffectedCompat) {          queryResult.put("rowsAffected",rowsAffectedCompat);        }      }    } catch (    Exception ex) {      ex.printStackTrace();      errorMessage=ex.getMessage();      Log.v("executeSqlBatch","SQLiteAndroidDatabase.executeSql[Batch](): Error=" + errorMessage);    }    try {      if (queryResult != null) {        JSONObject r=new JSONObject();        r.put("qid",query_id);        r.put("type","success");        r.put("result",queryResult);        batchResults.put(r);      } else {        JSONObject r=new JSONObject();        r.put("qid",query_id);        r.put("type","error");        JSONObject er=new JSONObject();        er.put("message",errorMessage);        r.put("result",er);        batchResults.put(r);      }    } catch (    JSONException ex) {      ex.printStackTrace();      Log.v("executeSqlBatch","SQLiteAndroidDatabase.executeSql[Batch](): Error=" + ex.getMessage());    }  }  cbc.success(batchResults);}  }
class C{  public IgniteBiTuple<V2,V1> swap(){  return F.t(val2,val1);}  }
class C{  public DescriptionTextRule() throws Exception {  super(Node.DOCUMENT_FRAGMENT_NODE);}  }
class C{  public T documentEncoding(String value){  setString(DOCUMENT_ENCODING,value);  return (T)this;}  }
class C{  public synchronized void addError(Test test,Throwable e){  fErrors.add(new TestFailure(test,e));  for (  TestListener each : cloneListeners()) {    each.addError(test,e);  }}  }
class C{  private Tree[] readTreesBlock(TaxonList taxonList,boolean useTaxonListNumbering) throws ImportException, IOException {  ArrayList<Tree> trees=new ArrayList<Tree>();  String[] lastToken=new String[1];  HashMap<String,Taxon> translationList=readTranslationList(taxonList,lastToken);  boolean done=false;  do {    Tree tree=readNextTree(translationList,lastToken,useTaxonListNumbering ? taxonList : null);    if (tree != null) {      trees.add(tree);    } else {      done=true;    }  } while (!done);  if (trees.size() == 0) {    throw new BadFormatException("No trees defined in TREES block");  }  Tree[] treeArray=new Tree[trees.size()];  trees.toArray(treeArray);  nextBlock=UNKNOWN_BLOCK;  return treeArray;}  }
class C{  public Transparency(){  super(KEY);}  }
class C{  @Override public void initialize(Map<String,Object> properties){  return;}  }
class C{  private void traceColumnSpec(ColumnSpec columnSpec){  if (logger.isDebugEnabled()) {    trace.append("          - ");    trace.append("col #");    trace.append(columnSpec.getIndex());    trace.append(" - length = ");    trace.append(columnSpec.getLength());    if (columnSpec.getName() != null) {      trace.append(" - ");      trace.append(columnSpec.getName());    }    trace.append(" - Type :");    trace.append(columnSpec.getType());    trace.append("\n");  }}  }
class C{  public final void forceFinished(boolean finished){  mFinished=finished;}  }
class C{  public double score(){  double[][][] priorProbs;  double[][] priorProbsRowSum;  Graph graph=bayesPm.getDag();  int n=graph.getNumNodes();  observedCounts=new int[n][][];  priorProbs=new double[n][][];  int[][] observedCountsRowSum=new int[n][];  priorProbsRowSum=new double[n][];  bayesIm=new MlBayesIm(bayesPm);  for (int i=0; i < n; i++) {    int numRows=bayesIm.getNumRows(i);    observedCounts[i]=new int[numRows][];    priorProbs[i]=new double[numRows][];    observedCountsRowSum[i]=new int[numRows];    priorProbsRowSum[i]=new double[numRows];    for (int j=0; j < numRows; j++) {      observedCountsRowSum[i][j]=0;      priorProbsRowSum[i][j]=0;      int numCols=bayesIm.getNumColumns(i);      observedCounts[i][j]=new int[numCols];      priorProbs[i][j]=new double[numCols];    }  }  computeObservedCounts();  for (int i=0; i < n; i++) {    for (int j=0; j < bayesIm.getNumRows(i); j++) {      for (int k=0; k < bayesIm.getNumColumns(i); k++) {        priorProbs[i][j][k]=1.0;      }    }  }  for (int i=0; i < n; i++) {    for (int j=0; j < bayesIm.getNumRows(i); j++) {      for (int k=0; k < bayesIm.getNumColumns(i); k++) {        observedCountsRowSum[i][j]+=observedCounts[i][j][k];        priorProbsRowSum[i][j]+=priorProbs[i][j][k];      }    }  }  double product=1.0;  for (int i=0; i < n; i++) {    int qi=bayesIm.getNumRows(i);    double prodj=1.0;    for (int j=0; j < qi; j++) {      try {        double numerator=Gamma.gamma(priorProbsRowSum[i][j]);        double denom=Gamma.gamma(priorProbsRowSum[i][j] + observedCountsRowSum[i][j]);        prodj*=(numerator / denom);      } catch (      Exception e) {        e.printStackTrace();      }      int ri=bayesIm.getNumColumns(i);      double prodk=1.0;      for (int k=0; k < ri; k++) {        try {          prodk*=Gamma.gamma(priorProbs[i][j][k] + observedCounts[i][j][k]) / Gamma.gamma(priorProbs[i][j][k]);        } catch (        Exception e) {          e.printStackTrace();        }      }      prodj*=prodk;    }    product*=prodj;  }  return product;}  }
class C{  public NumberTickUnit(double size){  this(size,NumberFormat.getNumberInstance());}  }
class C{  private void captureBarcodeWithResult(final Activity activity,final int buttonId,final boolean success) throws IOException {  final Button captureButton=(Button)activity.findViewById(buttonId);  captureButton.performClick();  ShadowActivity.IntentForResult intentForResult=shadowOf(activity).peekNextStartedActivityForResult();  assertNotNull(intentForResult);  Intent intent=intentForResult.intent;  assertNotNull(intent);  String action=intent.getAction();  assertNotNull(action);  assertEquals(Intents.Scan.ACTION,action);  Bundle bundle=intent.getExtras();  assertNotNull(bundle);  Intent resultIntent=new Intent(intent);  Bundle resultBuddle=new Bundle();  resultBuddle.putString(Intents.Scan.RESULT,BARCODE_DATA);  resultBuddle.putString(Intents.Scan.RESULT_FORMAT,BARCODE_TYPE);  resultIntent.putExtras(resultBuddle);  shadowOf(activity).receiveResult(intent,success ? Activity.RESULT_OK : Activity.RESULT_CANCELED,resultIntent);}  }
class C{  public void delete() throws IOException {  close();  deleteContents(directory);}  }
class C{  public void pOln(String s) throws IOException {  pO(s);  pln();}  }
class C{  public static long subOrZero(long a,long b){  long res=a - b;  if (res < 0L) {    return 0;  }  return res;}  }
class C{  private void endDistributedSystem(){}  }
class C{  public static String encodeHex(byte[] data){  return new String(Hex.encode(data));}  }
class C{  public boolean isDisconnectedByBattery(){  return mDisconnectedByBattery;}  }
class C{  public static JsonToken verifyAndDeserialize(final String jwt) throws Exception {  JsonTokenParser parser=new JsonTokenParser(verifierProviders,new AbelanaTokenAudienceChecker(BackendConstants.TOKEN_ISSUER));  return parser.verifyAndDeserialize(jwt);}  }
class C{  public static int[] shuffle(int[] input){  List<Integer> vals=new ArrayList<Integer>(input.length);  for (int i=0; i < input.length; i++)   vals.add(input[i]);  Collections.shuffle(vals,SEEDED_RANDOM);  int[] copy=new int[input.length];  for (int i=0; i < input.length; i++)   copy[i]=vals.get(i);  return copy;}  }
class C{  boolean isToDirectionOf(int direction,Rect src,Rect dest){switch (direction) {case View.FOCUS_LEFT:    return src.left >= dest.right;case View.FOCUS_RIGHT:  return src.right <= dest.left;case View.FOCUS_UP:return src.top >= dest.bottom;case View.FOCUS_DOWN:return src.bottom <= dest.top;}throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");}  }
class C{  public void actionPerformed(ActionEvent e){  log.config("Action=" + e.getActionCommand());  if (m_actionActive)   return;  m_actionActive=true;  log.config("Action=" + e.getActionCommand());  if (e.getSource().equals(orderField)) {    KeyNamePair pp=(KeyNamePair)orderField.getSelectedItem();    int C_Order_ID=0;    if (pp != null)     C_Order_ID=pp.getKey();    rmaField.setSelectedIndex(-1);    invoiceField.setSelectedIndex(-1);    loadOrder(C_Order_ID,false,locatorField.getValue() != null ? ((Integer)locatorField.getValue()).intValue() : 0);  } else   if (e.getSource().equals(invoiceField)) {    KeyNamePair pp=(KeyNamePair)invoiceField.getSelectedItem();    int C_Invoice_ID=0;    if (pp != null)     C_Invoice_ID=pp.getKey();    orderField.setSelectedIndex(-1);    rmaField.setSelectedIndex(-1);    loadInvoice(C_Invoice_ID,locatorField.getValue() != null ? ((Integer)locatorField.getValue()).intValue() : 0);  } else   if (e.getSource().equals(rmaField)) {    KeyNamePair pp=(KeyNamePair)rmaField.getSelectedItem();    int M_RMA_ID=0;    if (pp != null)     M_RMA_ID=pp.getKey();    orderField.setSelectedIndex(-1);    invoiceField.setSelectedIndex(-1);    loadRMA(M_RMA_ID,locatorField.getValue() != null ? ((Integer)locatorField.getValue()).intValue() : 0);  } else   if (e.getSource().equals(sameWarehouseCb)) {    initBPOrderDetails(((Integer)bPartnerField.getValue()).intValue(),false);  } else   if (e.getSource().equals(upcField)) {    checkProductUsingUPC();  }  m_actionActive=false;}  }
class C{  public boolean utf8(){  return utf8;}  }
class C{  public void changeColor(View v){  if (v.getTag().toString().equals("black")) {    drawingView.setPaintColor(Color.BLACK);  } else   if (v.getTag().toString().equals("red")) {    drawingView.setPaintColor(Color.RED);  } else   if (v.getTag().toString().equals("blue")) {    drawingView.setPaintColor(Color.BLUE);  } else   if (v.getTag().toString().equals("green")) {    drawingView.setPaintColor(Color.GREEN);  } else   if (v.getTag().toString().equals("yellow")) {    drawingView.setPaintColor(Color.YELLOW);  }}  }
class C{  @Override public Iterator<E> iterator(){  return new PriorityIterator();}  }
class C{  @Override public void onSlotAdded(final RPObject object,final String slotName,final RPObject sobject){}  }
class C{  private <T>String createSnapshotSchedule(URI url,String key,T obj) throws IsilonException {  ClientResponse resp=null;  try {    String body=new Gson().toJson(obj);    String id=null;    resp=_client.post(url,body);    if (resp.hasEntity()) {      JSONObject jObj=resp.getEntity(JSONObject.class);      sLogger.debug("Create Snapshot Scedule {} : Output from Server : ",key,jObj.toString());      if (jObj.has("id")) {        id=jObj.getString("id");      } else {        throw IsilonException.exceptions.createSnapshotScheduleError(key,jObj.toString());      }    } else {      throw IsilonException.exceptions.createSnapshotScheduleError(key,String.valueOf(resp.getStatus()));    }    return id;  } catch (  IsilonException ie) {    throw ie;  }catch (  Exception e) {    String response=String.format("%1$s",(resp == null) ? "" : resp);    throw IsilonException.exceptions.createResourceFailedOnIsilonArray(key,response,e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  public void testSSLWithEmptyProtocolsProperty(){  testSSLProtocolsAndCipherSuitesProperties(SecurityHelperTest.TEST_ARG.PROTOCOLS);}  }
class C{  public String login(int AD_Org_ID,int AD_Role_ID,int AD_User_ID){  Env.setContext(Env.getCtx(),CTX_IsLiberoWMEnabled,true);  return null;}  }
class C{  @Override public Adapter adapt(Notifier notifier,Object type){  return super.adapt(notifier,this);}  }
class C{  public FakeClock resetTime(){  fakeNowMs.set(baseTimeMs);  return this;}  }
class C{  public static LogoutRequest createSamlLogoutRequest(String id,String sessionIndex){  String tenantName=ServerConfig.getTenant(0);  String rpName=ServerConfig.getRelyingParty(tenantName,0);  String issuerUrl=ServerConfig.getRelyingPartyUrl(rpName);  String destination=ServerConfig.getTenantEntityId(tenantName).replace("/Metadata","/SLO");  SamlServiceFactory samlFactory=new DefaultSamlServiceFactory();  SamlService service=samlFactory.createSamlService(null,null,null,issuerUrl,null);  return service.createSamlLogoutRequest(id,destination,OasisNames.PERSISTENT,TestConstants.USER + "@" + TestConstants.DOMAIN,sessionIndex);}  }
class C{  public void onStop(){  if (mFullscreenManager != null)   mFullscreenManager.removeListener(this);}  }
class C{  @SuppressWarnings("unchecked") public List<NGramModel> find(String[] aToken){  BooleanQuery q=new BooleanQuery();  PhraseQuery pq=new PhraseQuery();  pq.setSlop((5 - aToken.length) >= 0 ? (5 - aToken.length) : 0);  for (  String t : aToken) {    pq.add(new Term("gram",t.toLowerCase()));  }  q.add(pq,Occur.MUST);  String cacheKey=q.toString();  if (ngramCache.containsKey(cacheKey)) {    List<NGramModel> list=(List<NGramModel>)ngramCache.get(cacheKey);    return list;  }  try {    NGramCollector collector=new NGramCollector();    searcher.search(q,collector);    List<NGramModel> ngrams=collector.getNgrams();    ngramCache.put(cacheKey,ngrams);    return ngrams;  } catch (  IOException e) {    throw new IllegalStateException(e);  }}  }
class C{  @Override public void mouseDragged(MouseEvent evt){  int xTrans=0;  int yTrans=0;  if (slider.getSnapToTicks()) {    int pos=getLocationForValue(getSnappedValue(evt));    if (pos > -1) {      if (slider.getOrientation() == JSlider.HORIZONTAL) {        xTrans=pos - evt.getX() + offset;        evt.translatePoint(xTrans,0);      } else {        yTrans=pos - evt.getY() + offset;        evt.translatePoint(0,yTrans);      }    }  }  delegate.mouseDragged(evt);  evt.translatePoint(xTrans,yTrans);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.719 -0400",hash_original_method="437F187B645F284244F5B74E41AA5BBA",hash_generated_method="5E244C14A54206C531475348A66A59FB") public void debug(Object message,Throwable t){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean assign(LinkedHashSet<E> set){  store[0]=set;  return false;}  }
class C{  JSONStringer close(Scope empty,Scope nonempty,String closeBracket) throws JSONException {  Scope context=peek();  if (context != nonempty && context != empty) {    throw new JSONException("Nesting problem");  }  stack.remove(stack.size() - 1);  if (context == nonempty) {    newline();  }  out.append(closeBracket);  return this;}  }
class C{  public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>();  if (row > 0) {    attrs.add(new XmlWriter.Attribute("row",String.valueOf(row)));  }  if (col > 0) {    attrs.add(new XmlWriter.Attribute("col",String.valueOf(col)));  }  if (inputValue != null) {    attrs.add(new XmlWriter.Attribute("inputValue",inputValue));  }  if (numericValue != null) {    attrs.add(new XmlWriter.Attribute("numericValue",numericValue.toString()));  }  w.simpleElement(Namespaces.gSpreadNs,"cell",attrs,value);}  }
class C{  public int capacity(){  int cap=_buf.capacity();  return cap;}  }
class C{  protected ByteBuffer decompress(final InflaterInputStream iis){  int off=0;  try {    while (true) {      int capacity=_buf.length - off;      if (capacity == 0) {        final byte[] tmp=new byte[_buf.length * 2];        System.arraycopy(_buf,0,tmp,0,off);        _buf=tmp;        capacity=_buf.length - off;      }      final int nread=iis.read(_buf,off,capacity);      if (nread == -1)       break;      off+=nread;    }  } catch (  IOException ex) {    throw new RuntimeException(ex);  }  return ByteBuffer.wrap(_buf,0,off).asReadOnlyBuffer();}  }
class C{  @DSComment("not sensitive, memory stream") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.347 -0500",hash_original_method="F52D84F15F793E7D52B479C7891604F2",hash_generated_method="5951B27DBA1F36D666752B978F5E613C") public synchronized byte[] toByteArray(){  byte[] newArray=new byte[count];  System.arraycopy(buf,0,newArray,0,count);  newArray.addTaint(this.getTaint());  return newArray;}  }
class C{  public UnknownDoubleQuantileEstimator(int b,int k,int h,double precomputeEpsilon,RandomEngine generator){  this.sampler=new WeightedRandomSampler(1,generator);  setUp(b,k);  this.treeHeightStartingSampling=h;  this.precomputeEpsilon=precomputeEpsilon;  this.clear();}  }
class C{  public CDebuggerTemplateWrapper(final DebuggerTemplate template){  super(template);}  }
class C{  public void postIndex(Engine.Index index){}  }
class C{  private void redirectToLocalStorageIndexPage(){  final String indexPage=getStartingPage();  String strippedIndexPage=indexPage;  if (strippedIndexPage.contains("#") || strippedIndexPage.contains("?")) {    int idx=strippedIndexPage.lastIndexOf("?");    if (idx >= 0) {      strippedIndexPage=strippedIndexPage.substring(0,idx);    } else {      idx=strippedIndexPage.lastIndexOf("#");      strippedIndexPage=strippedIndexPage.substring(0,idx);    }  }  String external=Paths.get(fileStructure.getWwwFolder(),strippedIndexPage);  if (!new File(external).exists()) {    Log.d("CHCP","External starting page not found. Aborting page change.");    return;  }  external=Paths.get(fileStructure.getWwwFolder(),indexPage);  webView.loadUrlIntoView(FILE_PREFIX + external,false);  Log.d("CHCP","Loading external page: " + external);}  }
class C{  private void verify(){  if (width <= 0 || height <= 0 || height > (Integer.MAX_VALUE / width)) {    throw new RasterFormatException("Invalid raster dimension");  }  if (scanlineStride < 0 || scanlineStride > (Integer.MAX_VALUE / height)) {    throw new RasterFormatException("Incorrect scanline stride: " + scanlineStride);  }  if ((long)minX - sampleModelTranslateX < 0 || (long)minY - sampleModelTranslateY < 0) {    throw new RasterFormatException("Incorrect origin/translate: (" + minX + ", "+ minY+ ") / ("+ sampleModelTranslateX+ ", "+ sampleModelTranslateY+ ")");  }  if (height > 1 || minY - sampleModelTranslateY > 0) {    for (int i=0; i < data.length; i++) {      if (scanlineStride > data[i].length) {        throw new RasterFormatException("Incorrect scanline stride: " + scanlineStride);      }    }  }  for (int i=0; i < dataOffsets.length; i++) {    if (dataOffsets[i] < 0) {      throw new RasterFormatException("Data offsets for band " + i + "("+ dataOffsets[i]+ ") must be >= 0");    }  }  int lastScanOffset=(height - 1) * scanlineStride;  if ((width - 1) > (Integer.MAX_VALUE - lastScanOffset)) {    throw new RasterFormatException("Invalid raster dimension");  }  int lastPixelOffset=lastScanOffset + (width - 1);  int maxIndex=0;  int index;  for (int i=0; i < numDataElements; i++) {    if (dataOffsets[i] > (Integer.MAX_VALUE - lastPixelOffset)) {      throw new RasterFormatException("Invalid raster dimension");    }    index=lastPixelOffset + dataOffsets[i];    if (index > maxIndex) {      maxIndex=index;    }  }  for (int i=0; i < numDataElements; i++) {    if (data[i].length <= maxIndex) {      throw new RasterFormatException("Data array too small " + "(should be > " + maxIndex + " )");    }  }}  }
class C{  public static void xmlAttributeExistent(String path,Attribute attribute,Class<?> aClass){  throw new XmlMappingAttributeExistException(MSG.INSTANCE.message(xmlMappingAttributeExistException2,attribute.getName(),aClass.getSimpleName(),path));}  }
class C{  @Override public String toString(){  StringBuilder builder=new StringBuilder(host.length() + 8);  if (host.indexOf(':') >= 0) {    builder.append('[').append(host).append(']');  } else {    builder.append(host);  }  if (hasPort()) {    builder.append(':').append(port);  }  return builder.toString();}  }
class C{  static TBigInteger karatsuba(TBigInteger op1,TBigInteger op2){  TBigInteger temp;  if (op2.numberLength > op1.numberLength) {    temp=op1;    op1=op2;    op2=temp;  }  if (op2.numberLength < whenUseKaratsuba) {    return multiplyPAP(op1,op2);  }  int ndiv2=(op1.numberLength & 0xFFFFFFFE) << 4;  TBigInteger upperOp1=op1.shiftRight(ndiv2);  TBigInteger upperOp2=op2.shiftRight(ndiv2);  TBigInteger lowerOp1=op1.subtract(upperOp1.shiftLeft(ndiv2));  TBigInteger lowerOp2=op2.subtract(upperOp2.shiftLeft(ndiv2));  TBigInteger upper=karatsuba(upperOp1,upperOp2);  TBigInteger lower=karatsuba(lowerOp1,lowerOp2);  TBigInteger middle=karatsuba(upperOp1.subtract(lowerOp1),lowerOp2.subtract(upperOp2));  middle=middle.add(upper).add(lower);  middle=middle.shiftLeft(ndiv2);  upper=upper.shiftLeft(ndiv2 << 1);  return upper.add(middle).add(lower);}  }
class C{  public byte[] unwrap(byte[] incoming,int offset,int len) throws SaslException {  if (completed) {    throw new SaslException("PLAIN supports neither integrity nor privacy");  } else {    throw new IllegalStateException("PLAIN authentication not completed");  }}  }
class C{  public RDFObject createObject(String uri,URI... types){  if (connection == null)   throw new IllegalStateException("No ObjectConnection");  ValueFactory vf=connection.getValueFactory();  return createObject(vf.createURI(uri),types);}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public static String reflectionToString(Object object,ToStringStyle style,boolean outputTransients,Class<?> reflectUpToClass){  return ReflectionToStringBuilder.toString(object,style,outputTransients,false,reflectUpToClass);}  }
class C{  public void raise(){  DBCommand command=new LogGameEventCommand(source,event,params);  DBCommandQueue.get().enqueue(command);}  }
class C{  @Override protected void checkThrownExpression(ThrowTree node){  checkForNullability(node.getExpression(),THROWING_NULLABLE);}  }
class C{  private void doIterate(final Map<SolutionKey,IBindingSet> solutions,final QueryEngine queryEngine,final Set<IBindingSet> nextRoundInput,final Gearing gearing){  final boolean bonusRound=upperBound < Long.MAX_VALUE && edgeVar != null;  final long n=upperBound + (bonusRound ? 1 : 0);  final Set<IConstant<?>> visited=bonusRound ? new LinkedHashSet<IConstant<?>>() : null;  for (int i=0; i < n; i++) {    long sizeBefore=solutions.size();    IRunningQuery runningSubquery=null;    ICloseableIterator<IBindingSet[]> subquerySolutionItr=null;    try {      runningSubquery=queryEngine.eval(subquery,nextRoundInput.toArray(new IBindingSet[nextRoundInput.size()]));      long subqueryChunksOut=0L;      long subquerySolutionsOut=0L;      try {        ((AbstractRunningQuery)context.getRunningQuery()).addChild(runningSubquery);        nextRoundInput.clear();        subquerySolutionItr=runningSubquery.iterator();        while (subquerySolutionItr.hasNext()) {          final IBindingSet[] chunk=subquerySolutionItr.next();          subqueryChunksOut++;          if (Thread.interrupted())           throw new InterruptedException();          for (          IBindingSet bs : chunk) {            if (subquerySolutionsOut++ % 10 == 0 && Thread.interrupted()) {              throw new InterruptedException();            }            if (log.isDebugEnabled()) {              log.debug("round " + i + " solution: "+ bs);            }            if (gearing.inVar != null && !bs.isBound(gearing.inVar)) {              bs.set(gearing.inVar,bs.get(gearing.tVarIn));              if (log.isDebugEnabled()) {                log.debug("adding binding for inVar: " + bs);              }            }            if (edgeVar != null && bs.get(edgeVar) != null) {              final IConstant<?> edge=middleTerm.isConstant() ? (IConstant<?>)middleTerm : bs.get((IVariable<?>)middleTerm);              if (!bs.get(edgeVar).equals(edge)) {                continue;              }            }            if (bonusRound) {              final IConstant<?> out=bs.get(gearing.tVarOut);              if (i + 1 == n && !visited.contains(out)) {                continue;              }              visited.add(out);            }            storeAndEmit(bs,gearing,solutions);            if (i + 1 == n) {              continue;            }            final IBindingSet input=bs.clone();            input.set(gearing.tVarIn,bs.get(gearing.tVarOut));            input.clear(gearing.tVarOut);            for (            IVariable<?> var : dropVars) {              if (!projectInVars.contains(var) && !varsToRetain.contains(var) && !var.equals(gearing.inVar)&& !var.equals(gearing.tVarIn)) {                input.clear(var);              }            }            nextRoundInput.add(input);            if (log.isDebugEnabled()) {              log.debug("remapped as input for next round: " + input);            }          }        }        subquerySolutionItr.close();        runningSubquery.get();        if (log.isDebugEnabled()) {          log.debug("done with round " + i + ", count="+ subqueryChunksOut+ ", totalBefore="+ sizeBefore+ ", totalAfter="+ solutions.size()+ ", totalNew="+ (solutions.size() - sizeBefore));        }        if (solutions.size() == sizeBefore) {          break;        }      } catch (      InterruptedException ex) {        runningSubquery.cancel(true);        throw ex;      }    } catch (    Throwable t) {      final Throwable cause=(runningSubquery != null && runningSubquery.getCause() != null) ? runningSubquery.getCause() : t;      throw new RuntimeException(ArbitraryLengthPathTask.this.context.getRunningQuery().halt(cause));    } finally {      try {        if (runningSubquery != null)         runningSubquery.cancel(true);      }  finally {        if (subquerySolutionItr != null)         subquerySolutionItr.close();      }    }  }  if (gearing.outConst != null) {    final Iterator<Map.Entry<SolutionKey,IBindingSet>> it=solutions.entrySet().iterator();    while (it.hasNext()) {      final IBindingSet bs=it.next().getValue();      if (!bs.get(gearing.tVarOut).equals(gearing.outConst)) {        if (log.isDebugEnabled()) {          log.debug("transitive output does not match output const, dropping");          log.debug(bs.get(gearing.tVarOut));          log.debug(gearing.outConst);        }        it.remove();      }    }  }  if (lowerBound == 0 && (gearing.inVar != null && gearing.outVar != null)) {    final Map<SolutionKey,IBindingSet> zlps=new LinkedHashMap<SolutionKey,IBindingSet>();    for (    IBindingSet bs : solutions.values()) {      if (bs.isBound(gearing.outVar)) {        continue;      }{        final IBindingSet zlp=bs.clone();        zlp.set(gearing.tVarOut,zlp.get(gearing.inVar));        final SolutionKey key=newSolutionKey(gearing,zlp);        if (!solutions.containsKey(key)) {          zlps.put(key,zlp);        }      }{        final IBindingSet zlp=bs.clone();        zlp.set(gearing.inVar,zlp.get(gearing.tVarOut));        final SolutionKey key=newSolutionKey(gearing,zlp);        if (!solutions.containsKey(key)) {          zlps.put(key,zlp);        }      }    }    for (    SolutionKey key : zlps.keySet()) {      storeAndEmit(key,zlps.get(key),gearing,solutions);    }  }}  }
class C{  public static boolean isDark(double r,double g,double b){  double whiteDistance=colorDistance(r,g,b,1.0,1.0,1.0);  double blackDistance=colorDistance(r,g,b,0.0,0.0,0.0);  boolean dark=blackDistance < whiteDistance;  return dark;}  }
class C{  public boolean isBackToBackUserAgent(){  return super.isBackToBackUserAgent;}  }
class C{  public static JTextField createTextEntry(String title,String entry,JComponent parent){  JPanel pal=PaletteHelper.createHorizontalPanel(null);  JLabel label=new JLabel(title);  label.setHorizontalTextPosition(JLabel.RIGHT);  JTextField tf=new JTextField(entry);  label.setLabelFor(tf);  pal.add(label);  pal.add(tf);  parent.add(pal);  return tf;}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  private void up(final String userId,final String dataId,final int dataType) throws RepositoryException {  final int oldType=voteRepository.removeIfExists(userId,dataId);  if (Vote.DATA_TYPE_C_ARTICLE == dataType) {    final JSONObject article=articleRepository.get(dataId);    if (null == article) {      LOGGER.log(Level.ERROR,"Not found article [id={0}] to vote up",dataId);      return;    }    if (-1 == oldType) {      article.put(Article.ARTICLE_GOOD_CNT,article.optInt(Article.ARTICLE_GOOD_CNT) + 1);    } else     if (Vote.TYPE_C_DOWN == oldType) {      article.put(Article.ARTICLE_BAD_CNT,article.optInt(Article.ARTICLE_BAD_CNT) - 1);      article.put(Article.ARTICLE_GOOD_CNT,article.optInt(Article.ARTICLE_GOOD_CNT) + 1);    }    final int ups=article.optInt(Article.ARTICLE_GOOD_CNT);    final int downs=article.optInt(Article.ARTICLE_BAD_CNT);    final long t=article.optLong(Keys.OBJECT_ID) / 1000;    final double redditScore=redditScore(ups,downs,t);    article.put(Article.REDDIT_SCORE,redditScore);    articleRepository.update(dataId,article);  }  final JSONObject vote=new JSONObject();  vote.put(Vote.USER_ID,userId);  vote.put(Vote.DATA_ID,dataId);  vote.put(Vote.TYPE,Vote.TYPE_C_UP);  vote.put(Vote.DATA_TYPE,dataType);  voteRepository.add(vote);}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobPrioritySupported);}  }
class C{  @Override public int hashCode(){  return id.hashCode();}  }
class C{  @Override public void keyTyped(KeyEvent e){}  }
class C{  public boolean enqueue(QUERY_TYPE query,META_QUERY metaQuery,QUEUE_CONTEXT queueContext){  return queryQueueManager.enqueue(query,metaQuery,queueContext);}  }
class C{  private void scheduleMaintenance(){  Runnable r=null;  this.maintenanceTask=schedule(r,getMaintenanceIntervalMicros(),TimeUnit.MICROSECONDS);}  }
class C{  public void print(PrintStream ps){  DecimalFormat formatter=new DecimalFormat("##0.00000");  ps.println("  coefficients: \n");  ps.println("    b0: " + formatter.format(b0));  ps.println("    b1: " + formatter.format(b1));  ps.println("    b2: " + formatter.format(b2));  ps.println();  ps.println("    a1: " + formatter.format(a1));  ps.println("    a2: " + formatter.format(a2));  ps.println("\n  states:  \n");  ps.println("    s1: " + formatter.format(s1));  ps.println("    s2: " + formatter.format(s2));}  }
class C{  private void insert(ByteString byteString){  int depthBin=getDepthBinForLength(byteString.size());  int binEnd=minLengthByDepth[depthBin + 1];  if (prefixesStack.isEmpty() || prefixesStack.peek().size() >= binEnd) {    prefixesStack.push(byteString);  } else {    int binStart=minLengthByDepth[depthBin];    ByteString newTree=prefixesStack.pop();    while (!prefixesStack.isEmpty() && prefixesStack.peek().size() < binStart) {      ByteString left=prefixesStack.pop();      newTree=new RopeByteString(left,newTree);    }    newTree=new RopeByteString(newTree,byteString);    while (!prefixesStack.isEmpty()) {      depthBin=getDepthBinForLength(newTree.size());      binEnd=minLengthByDepth[depthBin + 1];      if (prefixesStack.peek().size() < binEnd) {        ByteString left=prefixesStack.pop();        newTree=new RopeByteString(left,newTree);      } else {        break;      }    }    prefixesStack.push(newTree);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean hasPHDRMetaDataTrackSubDescriptor(){  return this.hasInterchangeObject(PHDRMetaDataTrackSubDescriptor.class);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.857 -0500",hash_original_method="A11C498F23B8370C7C5D04AE2A0C173A",hash_generated_method="F3C11577317FE8B59675FBC5C5FEBB98") private byte convertDtmfToAscii(byte dtmfDigit){  byte asciiDigit;switch (dtmfDigit) {case 0:    asciiDigit=68;  break;case 1:asciiDigit=49;break;case 2:asciiDigit=50;break;case 3:asciiDigit=51;break;case 4:asciiDigit=52;break;case 5:asciiDigit=53;break;case 6:asciiDigit=54;break;case 7:asciiDigit=55;break;case 8:asciiDigit=56;break;case 9:asciiDigit=57;break;case 10:asciiDigit=48;break;case 11:asciiDigit=42;break;case 12:asciiDigit=35;break;case 13:asciiDigit=65;break;case 14:asciiDigit=66;break;case 15:asciiDigit=67;break;default :asciiDigit=32;break;}return asciiDigit;}  }
class C{  public void clearData(Context context){  try {    CommonUtils.clearAppData(context);  } catch (  AndroidAgentException e) {    Log.e(TAG,"Failed to clear app data.",e);  }}  }
class C{  private void updateStartingRow(){  int startingRow=(int)startRowSpinner.getValue();  configuration.setStartingRow(startingRow - 1);  previewTable.repaint();}  }
class C{  @SuppressWarnings("unchecked") private static void mergeSort(Object[] in,Object[] out,int start,int end){  int len=end - start;  if (len <= SIMPLE_LENGTH) {    for (int i=start + 1; i < end; i++) {      java.lang.Comparable<Object> current=(java.lang.Comparable<Object>)out[i];      Object prev=out[i - 1];      if (current.compareTo(prev) < 0) {        int j=i;        do {          out[j--]=prev;        } while (j > start && current.compareTo(prev=out[j - 1]) < 0);        out[j]=current;      }    }    return;  }  int med=(end + start) >>> 1;  mergeSort(out,in,start,med);  mergeSort(out,in,med,end);  if (((java.lang.Comparable<Object>)in[med - 1]).compareTo(in[med]) <= 0) {    System.arraycopy(in,start,out,start,len);    return;  }  int r=med, i=start;  do {    java.lang.Comparable<Object> fromVal=(java.lang.Comparable<Object>)in[start];    java.lang.Comparable<Object> rVal=(java.lang.Comparable<Object>)in[r];    if (fromVal.compareTo(rVal) <= 0) {      int l_1=find(in,rVal,-1,start + 1,med - 1);      int toCopy=l_1 - start + 1;      System.arraycopy(in,start,out,i,toCopy);      i+=toCopy;      out[i++]=rVal;      r++;      start=l_1 + 1;    } else {      int r_1=find(in,fromVal,0,r + 1,end - 1);      int toCopy=r_1 - r + 1;      System.arraycopy(in,r,out,i,toCopy);      i+=toCopy;      out[i++]=fromVal;      start++;      r=r_1 + 1;    }  } while ((end - r) > 0 && (med - start) > 0);  if ((end - r) <= 0) {    System.arraycopy(in,start,out,i,med - start);  } else {    System.arraycopy(in,r,out,i,end - r);  }}  }
class C{  protected String convertKey(String key){  return key.toLowerCase(this.locale);}  }
class C{  protected void rewriteSetExportReplicationFactor(OptNode n,LocalVariableMap vars) throws DMLRuntimeException {  boolean apply=false;  int replication=-1;  ParForProgramBlock pfpb=(ParForProgramBlock)OptTreeConverter.getAbstractPlanMapping().getMappedProg(n.getID())[1];  if (n.getExecType() == ExecType.MR || n.getExecType() == ExecType.SPARK) {    apply=true;    replication=(int)Math.min(_N,_rnk);    replication=(int)Math.min(replication,MAX_REPLICATION_FACTOR_EXPORT);  }  if (apply)   pfpb.setExportReplicationFactor(replication);  _numEvaluatedPlans++;  LOG.debug(getOptMode() + " OPT: rewrite 'set export replication factor' - result=" + apply+ ((apply) ? " (" + replication + ")" : ""));}  }
class C{  @Override public void addedProject(final IDatabase connection,final INaviProject project){  add(new CProjectNode(getProjectTree(),CProjectContainerNode.this,m_database,project,new CProjectContainer(m_database,project)));  getTreeModel().nodeStructureChanged(CProjectContainerNode.this);}  }
class C{  public TextFormat(Font font){  this(font,true);}  }
class C{  void drawDisk(Graphics g,int playerNum){  int size=Math.min(getWidth(),getHeight());  g.setColor(playerNum == 1 ? Color.RED : Color.YELLOW);  g.fillOval((getWidth() - size) / 2,(getHeight() - size) / 2,size,size);}  }
class C{  public static void closeQuietly(Closeable c){  if (c != null) {    try {      c.close();    } catch (    IOException e) {    }  }}  }
class C{  public void backupFile(){  createFileHandle();  checkBackupFileAccess();  createBackupFile();}  }
class C{  private DoubleObjPair<Polygon> buildHullsRecursively(Cluster<Model> clu,Hierarchy<Cluster<Model>> hier,Map<Object,DoubleObjPair<Polygon>> hulls,Relation<? extends NumberVector> coords){  final DBIDs ids=clu.getIDs();  GrahamScanConvexHull2D hull=new GrahamScanConvexHull2D();  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    hull.add(coords.get(iter).toArray());  }  double weight=ids.size();  if (hier != null && hulls != null) {    final int numc=hier.numChildren(clu);    if (numc > 0) {      for (Iter<Cluster<Model>> iter=hier.iterChildren(clu); iter.valid(); iter.advance()) {        final Cluster<Model> iclu=iter.get();        DoubleObjPair<Polygon> poly=hulls.get(iclu);        if (poly == null) {          poly=buildHullsRecursively(iclu,hier,hulls,coords);        }        for (ArrayListIter<double[]> vi=poly.second.iter(); vi.valid(); vi.advance()) {          hull.add(vi.get());        }        weight+=poly.first / numc;      }    }  }  DoubleObjPair<Polygon> pair=new DoubleObjPair<>(weight,hull.getHull());  hulls.put(clu,pair);  return pair;}  }
class C{  public void refreshWithoutCmrCall(){  performUpdate(false);}  }
class C{  boolean isUnqualifiable(Symbol sym){  if (sym.name == names.empty || sym.owner == null || sym.owner == syms.rootPackage || sym.owner.kind == MTH || sym.owner.kind == VAR) {    return true;  } else   if (sym.kind == TYP && toplevel != null) {    Scope.Entry e;    e=toplevel.namedImportScope.lookup(sym.name);    if (e.scope != null) {      return e.sym == sym && e.next().scope == null;    }    e=toplevel.packge.members().lookup(sym.name);    if (e.scope != null) {      return e.sym == sym && e.next().scope == null;    }    e=toplevel.starImportScope.lookup(sym.name);    if (e.scope != null) {      return e.sym == sym && e.next().scope == null;    }  }  return false;}  }
class C{  public static void bindKeyToAction(JComponent c,KeyStroke key,Action a,int focusScope){  InputMap inputMap=c.getInputMap(focusScope);  ActionMap actionMap=c.getActionMap();  if (inputMap != null && actionMap != null) {    inputMap.put(key,a);    actionMap.put(a,a);  }}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  protected void resetSearch(){  if (searchString != null && searchResult != null) {    labelProvider.setSearchString(null);    labelProvider.setSearchResultElement(null);    if (!searchResult.isEmpty())     updateTreeViewer(searchResult);  }}  }
class C{  public terminal_set calc_lookahead(terminal_set lookahead_after) throws internal_error {  terminal_set result;  int pos;  production_part part;  symbol sym;  if (dot_at_end())   throw new internal_error("Attempt to calculate a lookahead set with a completed item");  result=new terminal_set();  for (pos=dot_pos() + 1; pos < the_production().rhs_length(); pos++) {    part=the_production().rhs(pos);    if (!part.is_action()) {      sym=((symbol_part)part).the_symbol();      if (!sym.is_non_term()) {        result.add((terminal)sym);        return result;      } else {        result.add(((non_terminal)sym).first_set());        if (!((non_terminal)sym).nullable())         return result;      }    }  }  result.add(lookahead_after);  return result;}  }
class C{  public static void hideKeyboard(Activity act){  if (act != null && act.getCurrentFocus() != null) {    InputMethodManager inputMethodManager=(InputMethodManager)act.getSystemService(Activity.INPUT_METHOD_SERVICE);    inputMethodManager.hideSoftInputFromWindow(act.getCurrentFocus().getWindowToken(),0);  }}  }
class C{  public static Location fromRadians(double latitudeRadians,double longitudeRadians){  Location loc=new Location();  loc.latitude=Math.toDegrees(latitudeRadians);  loc.longitude=Math.toDegrees(longitudeRadians);  return loc;}  }
class C{  public URI relativize(URI uri){  if (isOpaque() || uri.isOpaque()) {    return uri;  }  if (getScheme() == null || uri.getScheme() == null || getScheme().equals(uri.getScheme()) == false) {    return uri;  }  String thisAuthority=null;  String thatAuthority=null;  String thisPath=null;  String thatPath=null;  if ((thisAuthority=getAuthority()) == null || (thatAuthority=uri.getAuthority()) == null || thisAuthority.equals(thatAuthority) == false) {    return uri;  }  if ((thisPath=getPath()) == null || (thatPath=uri.getPath()) == null || thatPath.startsWith(thisPath + PATH_SEPARATOR) == false) {    return uri;  }  try {    return new URI(null,null,thatPath.substring(thisPath.length() + 1),uri.getQuery(),uri.getFragment());  } catch (  URISyntaxException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  public boolean isBannedMethod(String sig){  return banned_methods.contains(sig);}  }
class C{  protected void logWarn(Exception ex){  System.out.println("WARN: Exception: " + ex);  ex.printStackTrace();}  }
class C{  protected List findLibros(Locale locale,int tipoLibro){  List result=null;  try {    List scrRegStates=getScrRegstateByTipo(new Integer(tipoLibro));    if (scrRegStates != null) {      Map esquemasLibros=getEsquemaLibros(scrRegStates);      result=getLibroAdapter().librosAdapter(scrRegStates,esquemasLibros);    }  } catch (  HibernateException e) {    log.warn("No se puede recuperar la lista de libro del tipo: " + tipoLibro);    throw new LibroException("No se puede recuperar la lista de libros de tipo [" + tipoLibro + "] ",e);  }  return result;}  }
class C{  public ParallelQueueExtractor(){}  }
class C{  public double optDouble(int index){  return this.optDouble(index,Double.NaN);}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void testCFII_ServerClosed_NonBlock() throws Exception {  ensureServerOpen();  this.channel1.configureBlocking(false);  statusNotConnected_NotPending();  boolean connected=channel1.connect(localAddr1);  if (!connected) {    statusNotConnected_Pending();  }  ensureServerClosed();  tryFinish();  this.channel1.close();  statusChannelClosed();}  }
class C{  public TimedCache(int capacity,long expireInterval){  _cache=new LruCache<K,Entry<V>>(capacity);  _expireInterval=expireInterval;}  }
class C{  public Plip(double e){  super("plip");  r=0;  g=0;  b=0;  energy=e;}  }
class C{  public static File buildConfigZip(final String configName,final File parentDir){  if (!parentDir.isDirectory()) {    throw new RuntimeException(MSGS.format(Messages.CONFIG_NOT_DIR_1,parentDir.toString()));  }  final File zipFile=createEmptyZipFile(configName);  final ZipOutputStream out;  try {    out=new ZipOutputStream(new FileOutputStream(zipFile));  } catch (  final FileNotFoundException e) {    throw new RuntimeException(MSGS.format(Messages.ERROR_ZIPPING_1,parentDir.toString()),e);  }  try {    addFilesToZip(parentDir,out,parentDir);    return zipFile;  } catch (  final IOException e) {    throw new RuntimeException(MSGS.format(Messages.ERROR_ZIPPING_1,parentDir.toString()),e);  } finally {    try {      out.close();    } catch (    final IOException e) {    }  }}  }
class C{  public MyHashSetIterator(MyHashSet<E> set){  this.set=set;  list=setToList();}  }
class C{  @Override public <T>T deserializeObject(final String inputString,final Class<T> clazz){  final T jsonObject=mGson.fromJson(inputString,clazz);  if (jsonObject instanceof IJsonBackedObject) {    mLogger.logDebug("Deserializing type " + clazz.getSimpleName());    final IJsonBackedObject jsonBackedObject=(IJsonBackedObject)jsonObject;    jsonBackedObject.setRawObject(this,mGson.fromJson(inputString,JsonObject.class));  } else {    mLogger.logDebug("Deserializing a non-IJsonBackedObject type " + clazz.getSimpleName());  }  return jsonObject;}  }
class C{  public String readNString() throws SQLException {  return (String)getNextAttribute();}  }
class C{  public boolean isOvershootClampingEnabled(){  return mOvershootClampingEnabled;}  }
class C{  protected AnimatableIntegerValue(AnimationTarget target){  super(target);}  }
class C{  @Override public void onPostSelected(Post post,boolean isSearch){  pf=(PostFragment)getSupportFragmentManager().findFragmentByTag(POST_FRAGMENT_TAG);  Bundle args=new Bundle();  args.putInt("id",post.getId());  args.putString("title",post.getTitle());  args.putString("date",post.getDate());  args.putString("author",post.getAuthor());  args.putString("content",post.getContent());  args.putString("url",post.getUrl());  args.putString("featuredImage",post.getFeaturedImageUrl());  pf.setUIArguments(args);  FragmentTransaction ft=fm.beginTransaction();  ft.setCustomAnimations(android.R.anim.slide_in_left,android.R.anim.slide_out_right,android.R.anim.slide_in_left,android.R.anim.slide_out_right);  if (!isSearch) {    ft.hide(tlf);  } else {    ft.hide(srf);  }  ft.show(pf);  ft.addToBackStack(null);  ft.commit();}  }
class C{  @Override public void handle(HttpExchange exchange) throws IOException {  assert "GET".equalsIgnoreCase(exchange.getRequestMethod());  assert urlPath == null || urlPath.equals(exchange.getRequestURI().toString());  exchange.getResponseHeaders().set("Content-Type","application/octet-stream");  exchange.sendResponseHeaders(200,0);  try (OutputStream resBody=exchange.getResponseBody()){    resBody.write(GridTestUtils.readFile(downloadFile));  } }  }
class C{  public CustomersRecord(Integer id,String firstName,String lastName){  super(Customers.CUSTOMERS);  setValue(0,id);  setValue(1,firstName);  setValue(2,lastName);}  }
class C{  private void startContainer(Path packagePath,Container container,Map<String,String> env,final String cmd) throws SamzaContainerLaunchException {  log.info("starting container {} {} {} {}",new Object[]{packagePath,container,env,cmd});  LocalResource packageResource=Records.newRecord(LocalResource.class);  URL packageUrl=ConverterUtils.getYarnUrlFromPath(packagePath);  FileStatus fileStatus;  try {    fileStatus=packagePath.getFileSystem(yarnConfiguration).getFileStatus(packagePath);  } catch (  IOException ioe) {    log.error("IO Exception when accessing the package status from the filesystem",ioe);    throw new SamzaContainerLaunchException("IO Exception when accessing the package status from the filesystem");  }  packageResource.setResource(packageUrl);  packageResource.setSize(fileStatus.getLen());  packageResource.setTimestamp(fileStatus.getModificationTime());  packageResource.setType(LocalResourceType.ARCHIVE);  packageResource.setVisibility(LocalResourceVisibility.APPLICATION);  ByteBuffer allTokens;  try {    Credentials credentials=UserGroupInformation.getCurrentUser().getCredentials();    DataOutputBuffer dob=new DataOutputBuffer();    credentials.writeTokenStorageToStream(dob);    Iterator iter=credentials.getAllTokens().iterator();    while (iter.hasNext()) {      TokenIdentifier token=((Token)iter.next()).decodeIdentifier();      if (token != null && token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {        iter.remove();      }    }    allTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());  } catch (  IOException ioe) {    log.error("IOException when writing credentials.",ioe);    throw new SamzaContainerLaunchException("IO Exception when writing credentials to output buffer");  }  ContainerLaunchContext context=Records.newRecord(ContainerLaunchContext.class);  context.setEnvironment(env);  context.setTokens(allTokens.duplicate());  context.setCommands(new ArrayList<String>(){{      add(cmd);    }  });  context.setLocalResources(Collections.singletonMap("__package",packageResource));  log.debug("setting package to {}",packageResource);  log.debug("setting context to {}",context);  StartContainerRequest startContainerRequest=Records.newRecord(StartContainerRequest.class);  startContainerRequest.setContainerLaunchContext(context);  try {    nmClient.startContainer(container,context);  } catch (  YarnException ye) {    log.error("Received YarnException when starting container: " + container.getId(),ye);    throw new SamzaContainerLaunchException("Received YarnException when starting container: " + container.getId(),ye);  }catch (  IOException ioe) {    log.error("Received IOException when starting container: " + container.getId(),ioe);    throw new SamzaContainerLaunchException("Received IOException when starting container: " + container.getId(),ioe);  }}  }
class C{  public final TextBuilder append(long l,int radix){  if (radix == 10)   return append(l);  if (radix < 2 || radix > 36)   throw new IllegalArgumentException("radix: " + radix);  if (l < 0) {    append('-');    if (l == Long.MIN_VALUE) {      appendPositive(-(l / radix),radix);      return (TextBuilder)append(DIGIT_TO_CHAR[(int)-(l % radix)]);    }    l=-l;  }  appendPositive(l,radix);  return this;}  }
class C{  public void addUniqueAttribute(String qName,String value,int flags) throws SAXException {  addAttribute(qName,value);}  }
class C{  public void save(String type,List<ElasticSearchDoc> docs){  if (docs != null && !docs.isEmpty()) {    List<List<ElasticSearchDoc>> partitionedDocs=Lists.partition(docs,100);    partitionedDocs.forEach(null);  }}  }
class C{  public void warning(Supplier<String> msgSupplier){  log(Level.WARNING,msgSupplier);}  }
class C{  void handleQuery(DNSIncoming in,InetAddress addr,int port) throws IOException {  if (logger.isLoggable(Level.FINE)) {    logger.fine(this.getName() + ".handle query: " + in);  }  boolean conflictDetected=false;  final long expirationTime=System.currentTimeMillis() + DNSConstants.KNOWN_ANSWER_TTL;  for (  DNSRecord answer : in.getAllAnswers()) {    conflictDetected|=answer.handleQuery(this,expirationTime);  }  this.ioLock();  try {    if (_plannedAnswer != null) {      _plannedAnswer.append(in);    } else {      DNSIncoming plannedAnswer=in.clone();      if (in.isTruncated()) {        _plannedAnswer=plannedAnswer;      }      this.startResponder(plannedAnswer,port);    }  }  finally {    this.ioUnlock();  }  final long now=System.currentTimeMillis();  for (  DNSRecord answer : in.getAnswers()) {    this.handleRecord(answer,now);  }  if (conflictDetected) {    this.startProber();  }}  }
class C{  public WayNodeElementProcessor(ElementProcessor parentProcessor,WayElementProcessor wayProcessor){  super(parentProcessor);  this.wayProcessor=wayProcessor;}  }
class C{  public static TechnicalServiceNotAliveException convertToApi(org.oscm.internal.types.exception.TechnicalServiceNotAliveException oldEx){  return convertExceptionToApi(oldEx,TechnicalServiceNotAliveException.class);}  }
class C{  protected void skipCommaSpaces() throws IOException {  if (current == ',') {    current=reader.read();  }}  }
class C{  protected void runTestIteration() throws Throwable {  if (iterationFoundFailure) {    LOG.info("skipping test iteration; failure previously detected");    return;  }  try {    testRedeliverAtBrokerShutdownAutoAckMsgListener();  } catch (  Throwable thrown) {    iterationFoundFailure=true;    throw thrown;  }}  }
class C{  public final void testGetG(){  DSAPublicKeySpec dpks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(4,dpks.getG().intValue());}  }
class C{  protected void uninstallPreviewPanel(){  if (this.previewPanel != null) {    this.previewPanel.removeMouseListener(getHandler());    this.previewPanelHolder.remove(this.previewPanel);  }  this.chooser.remove(this.previewPanelHolder);}  }
class C{  public KMP(String pat){  this.R=256;  this.pat=pat;  int m=pat.length();  dfa=new int[R][m];  dfa[pat.charAt(0)][0]=1;  for (int x=0, j=1; j < m; j++) {    for (int c=0; c < R; c++)     dfa[c][j]=dfa[c][x];    dfa[pat.charAt(j)][j]=j + 1;    x=dfa[pat.charAt(j)][x];  }}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static void shareByEmail(final Context context,final String[] receivers,final String subject,final String text,String pickerTitle,String securityExceptionMessage,String noAssociatedAppErrorMessage){  EMailHelper.sendEmail(context,receivers,subject,text,pickerTitle,securityExceptionMessage,noAssociatedAppErrorMessage);}  }
class C{  public boolean isTimeDataAvailable(){  return min != -1;}  }
class C{  public static final Criterion modSeqLessThan(long value){  return new ModSeqCriterion(new NumericOperator(value,NumericComparator.LESS_THAN));}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public Enumeration<V> elements(){  return new ValueIterator();}  }
class C{  public void initQuantumJpegLumin(){  int quality=QUALITY;  if (quality < 50) {    quality=5000 / quality;  } else {    quality=200 - quality * 2;  }  for (int i=0; i < NJPEG; i++) {    for (int j=0; j < NJPEG; j++) {      if (quality != 0) {        this.Quantum[i][j]=(JPEG_LUMIN_QUANT_TBL[i][j] * quality + 50) / 100;      } else {        this.Quantum[i][j]=JPEG_LUMIN_QUANT_TBL[i][j];      }    }  }}  }
class C{  public OrganizationDataException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static int decode_slice_header(H264Context h,H264Context h0){  MpegEncContext s=h.s;  MpegEncContext s0=h0.s;  int first_mb_in_slice;  int pps_id;  int num_ref_idx_active_override_flag;  int slice_type, tmp, i, j;  int default_ref_list_done=0;  int last_pic_structure;  s.dropable=(h.nal_ref_idc == 0) ? 1 : 0;  s.me.qpel_put=s.dsp.put_h264_qpel_pixels_tab;  s.me.qpel_avg=s.dsp.avg_h264_qpel_pixels_tab;  first_mb_in_slice=s.gb.get_ue_golomb("first_mb_in_slice");  if (first_mb_in_slice == 0) {    if ((h0.current_slice != 0) && (s.picture_structure != MpegEncContext.PICT_FRAME)) {      h.field_end();    }    h0.current_slice=0;    if (0 == s0.first_field)     s.current_picture_ptr=null;  }  slice_type=s.gb.get_ue_golomb_31("slice_type");  if (slice_type > 9) {    return -1;  }  if (slice_type > 4) {    slice_type-=5;    h.slice_type_fixed=1;  } else   h.slice_type_fixed=0;  slice_type=H264Data.golomb_to_pict_type[slice_type];  if (slice_type == FF_I_TYPE || (h0.current_slice != 0 && slice_type == h0.last_slice_type)) {    default_ref_list_done=1;  }  h.slice_type=slice_type;  h.slice_type_nos=slice_type & 3;  s.pict_type=h.slice_type;  pps_id=s.gb.get_ue_golomb("pps_id");  if (pps_id >= MAX_PPS_COUNT) {    return -1;  }  if (null == h0.pps_buffers[pps_id]) {    return -1;  }  h0.pps_buffers[pps_id].copyTo(h.pps);  if (null == h0.sps_buffers[(int)h.pps.sps_id]) {    return -1;  }  h0.sps_buffers[(int)h.pps.sps_id].copyTo(h.sps);  s.profile=h.sps.profile_idc;  s.level=h.sps.level_idc;  s.refs=h.sps.ref_frame_count;  if (h == h0 && h.dequant_coeff_pps != pps_id) {    h.dequant_coeff_pps=pps_id;    h.init_dequant_tables();  }  s.mb_width=h.sps.mb_width;  s.mb_height=h.sps.mb_height * (2 - h.sps.frame_mbs_only_flag);  h.b_stride=s.mb_width * 4;  s.width=(int)(16 * s.mb_width - 2 * Math.min(h.sps.crop_right,7));  if (h.sps.frame_mbs_only_flag != 0)   s.height=(int)(16 * s.mb_height - 2 * Math.min(h.sps.crop_bottom,7)); else   s.height=(int)(16 * s.mb_height - 4 * Math.min(h.sps.crop_bottom,7));  if (s.context_initialized != 0 && (av_cmp_q(h.sps.sar,s.sample_aspect_ratio) != 0)) {    if (h != h0) {      return -1;    }    h.free_tables();    s.flush_dpb();    s.MPV_common_end();  }  if (0 == s.context_initialized) {    if (h != h0) {      return -1;    }    s.avcodec_set_dimensions(s.width,s.height);    s.sample_aspect_ratio=h.sps.sar;    if (0 != h.sps.video_signal_type_present_flag) {      s.color_range=((h.sps.full_range != 0) ? MpegEncContext.AVCOL_RANGE_JPEG : MpegEncContext.AVCOL_RANGE_MPEG);      if (h.sps.colour_description_present_flag != 0) {        s.color_primaries=h.sps.color_primaries;        s.color_trc=h.sps.color_trc;        s.colorspace=h.sps.colorspace;      }    }    if (h.sps.timing_info_present_flag != 0) {      long den=h.sps.time_scale;      if (h.x264_build < 44)       den*=2;      int[] param=new int[]{s.time_base.num,s.time_base.den};      av_reduce(param,h.sps.num_units_in_tick,den,1 << 30);      s.time_base.num=param[0];      s.time_base.den=param[1];    }    s.pix_fmt=MpegEncContext.get_format(s.codec.pix_fmts != null ? s.codec.pix_fmts : s.color_range == MpegEncContext.AVCOL_RANGE_JPEG ? hwaccel_pixfmt_list_h264_jpeg_420 : MpegEncContext.ff_hwaccel_pixfmt_list_420);    s.hwaccel=0;    if (s.MPV_common_init() < 0) {      return -1;    }    s.first_field=0;    h.prev_interlaced_frame=1;    h.init_scan_tables();    h.ff_h264_alloc_tables();    for (i=0; i < s.thread_count; i++)     if (h.thread_context[i].context_init() < 0) {      return -1;    }  }  h.frame_num=(int)s.gb.get_bits(h.sps.log2_max_frame_num,"frame_num");  h.mb_mbaff=0;  h.mb_aff_frame=0;  last_pic_structure=s0.picture_structure;  if (h.sps.frame_mbs_only_flag != 0) {    s.picture_structure=MpegEncContext.PICT_FRAME;  } else {    if (s.gb.get_bits1("field_pic_flag") != 0) {      s.picture_structure=(int)(MpegEncContext.PICT_TOP_FIELD + s.gb.get_bits1("bottom_field_flag"));    } else {      s.picture_structure=MpegEncContext.PICT_FRAME;      h.mb_aff_frame=h.sps.mb_aff;    }  }  h.mb_field_decoding_flag=((s.picture_structure) != MpegEncContext.PICT_FRAME ? 1 : 0);  if (h0.current_slice == 0) {    while (h.frame_num != h.prev_frame_num && h.frame_num != ((h.prev_frame_num + 1) % (1 << h.sps.log2_max_frame_num))) {      AVFrame prev=((h.short_ref_count != 0) ? h.short_ref[0] : null);      if (h.ff_h264_frame_start() < 0) {        return -1;      }      h.prev_frame_num++;      h.prev_frame_num%=1 << h.sps.log2_max_frame_num;      s.current_picture_ptr.frame_num=h.prev_frame_num;      h.ff_generate_sliding_window_mmcos();      h.ff_h264_execute_ref_pic_marking(h.mmco,h.mmco_index);      if (h.short_ref_count != 0) {        if (prev != null) {          ImageUtils.av_image_copy(h.short_ref[0].data_base,h.short_ref[0].data_offset,h.short_ref[0].linesize,prev.data_base,prev.data_offset,prev.linesize,s.pix_fmt,s.mb_width * 16,s.mb_height * 16);          h.short_ref[0].poc=prev.poc + 2;        }        h.short_ref[0].frame_num=h.prev_frame_num;      }    }    if (s0.first_field != 0) {      if (!(s.picture_structure != MpegEncContext.PICT_FRAME) || s.picture_structure == last_pic_structure) {        s0.current_picture_ptr=null;        s0.first_field=((s.picture_structure != MpegEncContext.PICT_FRAME) ? 1 : 0);      } else {        if (h.nal_ref_idc != 0 && s0.current_picture_ptr.reference != 0 && s0.current_picture_ptr.frame_num != h.frame_num) {          s0.first_field=1;          s0.current_picture_ptr=null;        } else {          s0.first_field=0;        }      }    } else {      s0.first_field=((s.picture_structure != MpegEncContext.PICT_FRAME) ? 1 : 0);    }    if ((0 == ((s.picture_structure != MpegEncContext.PICT_FRAME) ? 1 : 0) || 0 != s0.first_field) && h.ff_h264_frame_start() < 0) {      s0.first_field=0;      return -1;    }    if (s.picture_structure != MpegEncContext.PICT_FRAME) {      for (i=(s.picture_structure == MpegEncContext.PICT_BOTTOM_FIELD ? 1 : 0); i < s.mb_height; i++) {        Arrays.fill(h.slice_table_base,h.slice_table_offset + i * s.mb_stride,h.slice_table_offset + i * s.mb_stride + (s.mb_stride - (i + 1 == s.mb_height ? 1 : 0)),0xFFFF);      }    } else {      Arrays.fill(h.slice_table_base,h.slice_table_offset,h.slice_table_offset + (s.mb_height * s.mb_stride - 1),0xFFFF);    }  }  if (h != h0)   clone_slice(h,h0);  s.current_picture_ptr.frame_num=h.frame_num;  if (first_mb_in_slice << ((h.mb_aff_frame != 0 || (s.picture_structure != MpegEncContext.PICT_FRAME)) ? 1 : 0) >= s.mb_num || first_mb_in_slice >= s.mb_num) {    return -1;  }  s.resync_mb_x=s.mb_x=first_mb_in_slice % s.mb_width;  s.resync_mb_y=s.mb_y=(first_mb_in_slice / s.mb_width) << ((h.mb_aff_frame != 0 || (s.picture_structure != MpegEncContext.PICT_FRAME)) ? 1 : 0);  if (s.picture_structure == MpegEncContext.PICT_BOTTOM_FIELD)   s.resync_mb_y=s.mb_y=s.mb_y + 1;  if (s.picture_structure == MpegEncContext.PICT_FRAME) {    h.curr_pic_num=h.frame_num;    h.max_pic_num=1 << h.sps.log2_max_frame_num;  } else {    h.curr_pic_num=2 * h.frame_num + 1;    h.max_pic_num=1 << (h.sps.log2_max_frame_num + 1);  }  if (h.nal_unit_type == NAL_IDR_SLICE) {    s.gb.get_ue_golomb("idr_pic_id");  }  if (h.sps.poc_type == 0) {    h.poc_lsb=(int)s.gb.get_bits(h.sps.log2_max_poc_lsb,"poc_lsb");    if (h.pps.pic_order_present == 1 && s.picture_structure == MpegEncContext.PICT_FRAME) {      h.delta_poc_bottom=s.gb.get_se_golomb("delta_poc_bottom");    }  }  if (h.sps.poc_type == 1 && 0 == h.sps.delta_pic_order_always_zero_flag) {    h.delta_poc[0]=s.gb.get_se_golomb("delta_poc[0]");    if (h.pps.pic_order_present == 1 && s.picture_structure == MpegEncContext.PICT_FRAME)     h.delta_poc[1]=s.gb.get_se_golomb("delta_poc[1]");  }  h.init_poc();  if (h.pps.redundant_pic_cnt_present != 0) {    h.redundant_pic_count=s.gb.get_ue_golomb("redundant_pic_count");  }  h.ref_count[0]=h.pps.ref_count[0];  h.ref_count[1]=h.pps.ref_count[1];  if (h.slice_type_nos != FF_I_TYPE) {    if (h.slice_type_nos == FF_B_TYPE) {      h.direct_spatial_mv_pred=(int)s.gb.get_bits1("direct_spatial_mv_pred");    }    num_ref_idx_active_override_flag=(int)s.gb.get_bits1("num_ref_idx_active_override_flag");    if (num_ref_idx_active_override_flag != 0) {      h.ref_count[0]=s.gb.get_ue_golomb("ref_count[0]") + 1;      if (h.slice_type_nos == FF_B_TYPE)       h.ref_count[1]=s.gb.get_ue_golomb("ref_count[1]") + 1;      if (h.ref_count[0] - 1 > 32 - 1 || h.ref_count[1] - 1 > 32 - 1) {        h.ref_count[0]=h.ref_count[1]=1;        return -1;      }    }    if (h.slice_type_nos == FF_B_TYPE)     h.list_count=2; else     h.list_count=1;  } else   h.list_count=0;  if (0 == default_ref_list_done) {    h.ff_h264_fill_default_ref_list();  }  if (h.slice_type_nos != FF_I_TYPE && h.ff_h264_decode_ref_pic_list_reordering() < 0) {    return -1;  }  if (h.slice_type_nos != FF_I_TYPE) {    s.last_picture_ptr=h.ref_list[0][0];    MpegEncContext.ff_copy_picture(s.last_picture,s.last_picture_ptr);  }  if (h.slice_type_nos == FF_B_TYPE) {    s.next_picture_ptr=h.ref_list[1][0];    MpegEncContext.ff_copy_picture(s.next_picture,s.next_picture_ptr);  }  if ((h.pps.weighted_pred != 0 && h.slice_type_nos == FF_P_TYPE) || (h.pps.weighted_bipred_idc == 1 && h.slice_type_nos == FF_B_TYPE))   h.pred_weight_table(); else   if (h.pps.weighted_bipred_idc == 2 && h.slice_type_nos == FF_B_TYPE) {    h.implicit_weight_table(-1);  } else {    h.use_weight=0;    for (i=0; i < 2; i++) {      h.luma_weight_flag[i]=0;      h.chroma_weight_flag[i]=0;    }  }  if (h.nal_ref_idc != 0)   h0.ff_h264_decode_ref_pic_marking(s.gb);  if (h.mb_aff_frame != 0) {    h.ff_h264_fill_mbaff_ref_list();    if (h.pps.weighted_bipred_idc == 2 && h.slice_type_nos == FF_B_TYPE) {      h.implicit_weight_table(0);      h.implicit_weight_table(1);    }  }  if (h.slice_type_nos == FF_B_TYPE && 0 == h.direct_spatial_mv_pred)   h.ff_h264_direct_dist_scale_factor();  h.ff_h264_direct_ref_list_init();  if (h.slice_type_nos != FF_I_TYPE && h.pps.cabac != 0) {    tmp=s.gb.get_ue_golomb_31("cabac_init_idc");    if (tmp > 2) {      return -1;    }    h.cabac_init_idc=tmp;  }  h.last_qscale_diff=0;  tmp=h.pps.init_qp + s.gb.get_se_golomb("init_qp");  if (tmp > 51) {    return -1;  }  s.qscale=tmp;  h.chroma_qp[0]=h.pps.chroma_qp_table[0][s.qscale];  h.chroma_qp[1]=h.pps.chroma_qp_table[1][s.qscale];  if (h.slice_type == FF_SP_TYPE) {    s.gb.get_bits1("sp_for_switch_flag");  }  if (h.slice_type == FF_SP_TYPE || h.slice_type == FF_SI_TYPE) {    s.gb.get_se_golomb("slice_qs_delta");  }  h.deblocking_filter=1;  h.slice_alpha_c0_offset=52;  h.slice_beta_offset=52;  if (0 != h.pps.deblocking_filter_parameters_present) {    tmp=s.gb.get_ue_golomb_31("deblocking_filter_idc");    if (tmp > 2) {      return -1;    }    h.deblocking_filter=tmp;    if (h.deblocking_filter < 2)     h.deblocking_filter^=1;    if (0 != h.deblocking_filter) {      h.slice_alpha_c0_offset+=s.gb.get_se_golomb("slice_alpha_c0_offset") << 1;      h.slice_beta_offset+=s.gb.get_se_golomb("slice_beta_offset") << 1;      if (h.slice_alpha_c0_offset > 104 || h.slice_beta_offset > 104) {        return -1;      }    }  }  if (s.skip_loop_filter >= MpegEncContext.AVDISCARD_ALL || (s.skip_loop_filter >= MpegEncContext.AVDISCARD_NONKEY && h.slice_type_nos != FF_I_TYPE) || (s.skip_loop_filter >= MpegEncContext.AVDISCARD_BIDIR && h.slice_type_nos == FF_B_TYPE) || (s.skip_loop_filter >= MpegEncContext.AVDISCARD_NONREF && h.nal_ref_idc == 0))   h.deblocking_filter=0;  if (h.deblocking_filter == 1 && h0.max_contexts > 1) {    if ((s.flags2 & MpegEncContext.CODEC_FLAG2_FAST) != 0) {      h.deblocking_filter=2;    } else {      h0.max_contexts=1;      if (0 == h0.single_decode_warning) {        h0.single_decode_warning=1;      }      if (h != h0) {        return 1;      }    }  }  h.qp_thresh=15 + 52 - Math.min(h.slice_alpha_c0_offset,h.slice_beta_offset) - Math.max(Math.max(0,h.pps.chroma_qp_index_offset[0]),h.pps.chroma_qp_index_offset[1]);  h0.last_slice_type=slice_type;  h.slice_num=++h0.current_slice;  if (h.slice_num >= MAX_SLICES) {  }  for (j=0; j < 2; j++) {    int[] id_list=new int[16];    int[] ref2frm=h.ref2frm[h.slice_num & (MAX_SLICES - 1)][j];    for (i=0; i < 16; i++) {      id_list[i]=60;      if (h.ref_list[j][i].data_base[0] != null) {        int k;        int[] base=h.ref_list[j][i].base[0];        for (k=0; k < h.short_ref_count; k++)         if (h.short_ref[k].base[0] == base) {          id_list[i]=k;          break;        }        for (k=0; k < h.long_ref_count; k++)         if (h.long_ref[k] != null && h.long_ref[k].base[0] == base) {          id_list[i]=h.short_ref_count + k;          break;        }      }    }    ref2frm[0]=ref2frm[1]=-1;    for (i=0; i < 16; i++)     ref2frm[i + 2]=4 * id_list[i] + (h.ref_list[j][i].reference & 3);    ref2frm[18 + 0]=ref2frm[18 + 1]=-1;    for (i=16; i < 48; i++)     ref2frm[i + 4]=4 * id_list[(i - 16) >> 1] + (h.ref_list[j][i].reference & 3);  }  h.emu_edge_width=((s.flags & MpegEncContext.CODEC_FLAG_EMU_EDGE) != 0 ? 0 : 16);  h.emu_edge_height=(0 != h.mb_aff_frame || (s.picture_structure != MpegEncContext.PICT_FRAME)) ? 0 : h.emu_edge_width;  return 0;}  }
class C{  public JavaCompletionProposal(String replacementString,int replacementOffset,int replacementLength,Image image,StyledString displayString,int relevance){  this(replacementString,replacementOffset,replacementLength,image,displayString,relevance,false);}  }
class C{  public void readFeatures(BufferedReader fin) throws IOException {  if (features != null) {    features.clear();  } else {    features=new ArrayList();  }  if (fmap != null) {    fmap.clear();  } else {    fmap=new HashMap();  }  if (currentFeatures != null) {    currentFeatures.clear();  } else {    currentFeatures=new ArrayList();  }  String line;  if ((line=fin.readLine()) == null) {    System.out.println("Unknown number of features");    return;  }  int numFeatures=Integer.parseInt(line);  if (numFeatures <= 0) {    System.out.println("Invalid number of features");    return;  }  System.out.println("Reading features ...");  for (int i=0; i < numFeatures; i++) {    line=fin.readLine();    if (line == null) {      continue;    }    StringTokenizer strTok=new StringTokenizer(line," ");    if (strTok.countTokens() != 4) {      System.out.println(i + " invalid feature line ");      continue;    }    Feature f=new Feature(line,data.cpStr2Int,data.lbStr2Int);    Integer fidx=(Integer)fmap.get(f.strId);    if (fidx == null) {      fmap.put(f.strId,new Integer(f.idx));      features.add(f);    } else {      fmap.put(f.strId,new Integer(f.idx));      features.add(f);    }  }  System.out.println("Reading " + Integer.toString(features.size()) + " features completed!");  line=fin.readLine();  option.numFeatures=features.size();}  }
class C{  public void clearAdapterData(String requestFrom){  if (mFiles != null) {    mFiles.clear();    if (requestFrom.equals("onBrowseUp")) {      notifyDataSetChanged();    }  }}  }
class C{  protected List<T> createNewRow(final T value){  ArrayList<T> row=new ArrayList<T>();  for (int i=0; i < getLogicalColumnCount(); i++) {    row.add(value);  }  return row;}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  private void paintMinimizeHover(Graphics2D g,JComponent c,int width,int height){  iconifyPainter.paintHover(g,c,width,height);}  }
class C{  public final int[] hashSignature(final boolean[] signature){  long[] acc=new long[stages];  for (int i=0; i < stages; i++) {    acc[i]=0;  }  int rows=signature.length / stages;  for (int i=0; i < signature.length; i++) {    long v=0;    if (signature[i]) {      v=(i + 1) * LARGE_PRIME;    }    int j=Math.min(i / rows,stages - 1);    acc[j]=(acc[j] + v) % Integer.MAX_VALUE;  }  int[] r=new int[stages];  for (int i=0; i < stages; i++) {    r[i]=(int)(acc[i] % buckets);  }  return r;}  }
class C{  public static void onGridStop() throws InterruptedException {synchronized (mux) {    if (gridCnt == 0)     return;    --gridCnt;    Thread timer0=timer;    if (gridCnt == 0 && timer0 != null) {      timer=null;      timer0.interrupt();      timer0.join();    }  }}  }
class C{  protected void removeDescriptorsExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de removeDescriptorsExecuteLogic");  String id=request.getParameter(Constants.ID);  logger.info("Id lista descriptora: " + id);  GestionDescripcionBI descripcionBI=getGestionDescripcionBI(request);  ListaDescriptoraForm frm=(ListaDescriptoraForm)form;  String[] listaIds=frm.getIds();  if (StringUtils.isNotEmpty(listaIds) && !isListaDescriptoraEnUso(request,listaIds)) {    ResultadoRegistrosVO res=descripcionBI.deleteDescriptores(listaIds);    if (!res.getErrores().isEmpty()) {      ActionErrors errores=obtenerErrores(request,true);      errores.add(res.getErrores());    }  }  goLastClientExecuteLogic(mapping,form,request,response);}  }
class C{  protected XMouseDragGestureRecognizer(DragSource ds){  this(ds,null);}  }
class C{  public static boolean mousePressed(){synchronized (mouseLock) {    return mousePressed;  }}  }
class C{  public void reset(){  initialize();}  }
class C{  public IntersectionSimilarity(BipartiteGraph bipartiteGraph,RelatedTweetUpdateNormalization relatedTweetUpdateNormalization,StatsReceiver statsReceiver){  this.bipartiteGraph=bipartiteGraph;  this.relatedTweetUpdateNormalization=relatedTweetUpdateNormalization;  StatsReceiver scopedStatsReceiver=statsReceiver.scope(this.getClass().getSimpleName());  this.queryNodeDegreeIsZeroCounter=scopedStatsReceiver.counter("lessThanMaxNumNeighbors");  this.lessThanMaxNumNeighborsCounter=scopedStatsReceiver.counter("lessThanMaxNumNeighbors");  this.moreThanMaxNumNeighborsCounter=scopedStatsReceiver.counter("moreThanMaxNumNeighbors");  this.queryNodeNullIteratorCounter=scopedStatsReceiver.counter("queryNodeNullIterator");}  }
class C{  public String globalInfo(){  return "Class for running an arbitrary classifier on data that has been passed " + "through an arbitrary filter. Like the classifier, the structure of the filter " + "is based exclusively on the training data and test instances will be processed "+ "by the filter without changing their structure.";}  }
class C{  @Override protected EClass eStaticClass(){  return BasePackage.Literals.DOCUMENTED_ELEMENT;}  }
class C{  public static void deleteDir(Location dir) throws IOException {  assertTrue(dir.startsWith(getWorkingDir()));  FileUtil.deleteDir(dir);}  }
class C{  public static DoubleVector wrapArray(double[] vals){  final DoubleVector v=new DoubleVector();  v.mValues=vals;  return v;}  }
class C{  public void export(DataOutputStream out) throws IOException {  out.writeInt(seqId);  if (info.isRowBlockEnabled())   out.writeInt(nRows);  export(out,primaryKey);  for (  ByteArray cb : cellBlocks) {    export(out,cb);  }}  }
class C{  public static byte[][] splitNalUnits(byte[] data){  if (!isNalStartCode(data,0)) {    return null;  }  List<Integer> starts=new ArrayList<>();  int nalUnitIndex=0;  do {    starts.add(nalUnitIndex);    nalUnitIndex=findNalStartCode(data,nalUnitIndex + NAL_START_CODE.length);  } while (nalUnitIndex != -1);  byte[][] split=new byte[starts.size()][];  for (int i=0; i < starts.size(); i++) {    int startIndex=starts.get(i);    int endIndex=i < starts.size() - 1 ? starts.get(i + 1) : data.length;    byte[] nal=new byte[endIndex - startIndex];    System.arraycopy(data,startIndex,nal,0,nal.length);    split[i]=nal;  }  return split;}  }
class C{  public int countTokens(String delims,boolean delimsAreTokens){  setDelims((delimsAreTokens ? null : delims),(delimsAreTokens ? delims : null));  return countTokens();}  }
class C{  void changeBaseFont(Font old,Font font){  for (int i=0; i < styles.length; i++) {    Style style=styles[i];    if (style != null && style.font != null) {      if (style.font.getFamily().equals(old.getFamily()) && style.font.getSize() == old.getSize()) {        int s=style.font.getStyle();        StyleContext sc=StyleContext.getDefaultStyleContext();        style.font=sc.getFont(font.getFamily(),s,font.getSize());      }    }  }}  }
class C{  @Override public void draw(Canvas canvas){  Barcode barcode=mBarcode;  if (barcode == null) {    return;  }  RectF rect=new RectF(barcode.getBoundingBox());  rect.left=translateX(rect.left);  rect.top=translateY(rect.top);  rect.right=translateX(rect.right);  rect.bottom=translateY(rect.bottom);  canvas.drawRect(rect,mRectPaint);  canvas.drawText(barcode.rawValue,rect.left,rect.bottom,mTextPaint);}  }
class C{  protected CtMember.Cache hasMemberCache(){  if (memberCache != null)   return (CtMember.Cache)memberCache.get(); else   return null;}  }
class C{  public static <U>DeferredResult<List<U>> allOf(List<DeferredResult<U>> deferredResults){  List<CompletableFuture<U>> futures=deferredResults.stream().map(null).collect(Collectors.toList());  CompletableFuture<List<U>> cf=CompletableFuture.allOf(futures.toArray(new CompletableFuture<?>[deferredResults.size()])).thenApply(null);  return new DeferredResult<>(cf);}  }
class C{  public SwipeDismissListViewTouchListener(AbsListView listView,OnDismissCallback callback,SwipeOnScrollListener onScroll){  ViewConfiguration vc=ViewConfiguration.get(listView.getContext());  mSlop=vc.getScaledTouchSlop();  mMinFlingVelocity=vc.getScaledMinimumFlingVelocity() * 16;  mMaxFlingVelocity=vc.getScaledMaximumFlingVelocity();  mAnimationTime=listView.getContext().getResources().getInteger(android.R.integer.config_shortAnimTime);  mListView=listView;  mCallback=callback;  onScroll.setTouchListener(this);  mListView.setOnScrollListener(onScroll);}  }
class C{  public static void throwClassNotFoundException(ClassDescriptor classDescriptor) throws ClassNotFoundException {  throw new ClassNotFoundException("Class " + classDescriptor.toDottedClassName() + " cannot be resolved");}  }
class C{  public static void processEndCallInfo(Activity aCallingActivity,int aCallEndReason){  if (null != aCallingActivity) {    if (IMXCall.END_CALL_REASON_UNDEFINED != aCallEndReason) {switch (aCallEndReason) {case IMXCall.END_CALL_REASON_PEER_HANG_UP:        if (aCallingActivity instanceof InComingCallActivity) {          CommonActivityUtils.displayToastOnUiThread(aCallingActivity,aCallingActivity.getString(R.string.call_error_peer_cancelled_call));        } else {        }      break;case IMXCall.END_CALL_REASON_PEER_HANG_UP_ELSEWHERE:    CommonActivityUtils.displayToastOnUiThread(aCallingActivity,aCallingActivity.getString(R.string.call_error_peer_hangup_elsewhere));  break;default :break;}}}}  }
class C{  public void resolvePrefixTables() throws TransformerException {  super.resolvePrefixTables();  StylesheetRoot stylesheet=getStylesheetRoot();  if ((null != m_namespace) && (m_namespace.length() > 0)) {    NamespaceAlias nsa=stylesheet.getNamespaceAliasComposed(m_namespace);    if (null != nsa) {      m_namespace=nsa.getResultNamespace();      String resultPrefix=nsa.getStylesheetPrefix();      if ((null != resultPrefix) && (resultPrefix.length() > 0))       m_rawName=resultPrefix + ":" + m_localName; else       m_rawName=m_localName;    }  }  if (null != m_avts) {    int n=m_avts.size();    for (int i=0; i < n; i++) {      AVT avt=(AVT)m_avts.get(i);      String ns=avt.getURI();      if ((null != ns) && (ns.length() > 0)) {        NamespaceAlias nsa=stylesheet.getNamespaceAliasComposed(m_namespace);        if (null != nsa) {          String namespace=nsa.getResultNamespace();          String resultPrefix=nsa.getStylesheetPrefix();          String rawName=avt.getName();          if ((null != resultPrefix) && (resultPrefix.length() > 0))           rawName=resultPrefix + ":" + rawName;          avt.setURI(namespace);          avt.setRawName(rawName);        }      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.928 -0500",hash_original_method="4505463E5EDB411267D82D01A0F1D824",hash_generated_method="E9CEE2E3F31C00F30883BA7833B9BDB0") public boolean rejectIncomingConnect(BluetoothDevice device){  if (DBG)   log("rejectIncomingConnect");  if (mService != null) {    try {      return mService.rejectIncomingConnect(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public Builder clear(){  reinitialize();  return this;}  }
class C{  @PostConstruct void init(){  createRequiredComponents();  buildLayout();}  }
class C{  public int hashCode(){  int hash=type.hashCode();  if (name != null)   hash^=name.hashCode();  if (actions != null)   hash^=actions.hashCode();  return hash;}  }
class C{  public static String relativeToAbsolute(String baseURL,String relativeURL){  if (relativeURL.startsWith("/")) {    return getURLProtocol(baseURL) + "://" + getURLHost(baseURL)+ relativeURL;  } else {    return getURLProtocol(baseURL) + "://" + getURLHost(baseURL)+ getURLBasePath(baseURL)+ relativeURL;  }}  }
class C{  public void bindIterator(RuntimeIterator itr){  QScope currentScope=this.currentScope();  int currScopeID=currentScope.getScopeID();  itr.setScopeID(currScopeID);  currentScope.bindIterator(itr);}  }
class C{  public boolean is_set_id(){  return this.id != null;}  }
class C{  public ChoiceDialog(JFrame parent,String title,String question,String[] choices,boolean isSingle,int max){  super(parent,title,true);  initialize(parent,question,choices,isSingle,max);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public static synchronized void fit(String description,UnsafeBlock block){  fit(description,identity(),block);}  }
class C{  public String rmaLine(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer M_RMALine_id=(Integer)value;  if (M_RMALine_id == null || M_RMALine_id.intValue() == 0)   return "";  MRMALine rl=new MRMALine(ctx,M_RMALine_id.intValue(),null);  if (rl.get_ID() != 0) {    if (rl.getC_Charge_ID() > 0 && rl.getM_Product_ID() <= 0) {      mTab.setValue("C_Charge_ID",new Integer(rl.getC_Charge_ID()));    } else {      mTab.setValue("M_Product_ID",new Integer(rl.getM_Product_ID()));      mTab.setValue("M_AttributeSetInstance_ID",new Integer(rl.getM_AttributeSetInstance_ID()));    }    mTab.setValue("C_UOM_ID",new Integer(rl.getC_UOM_ID()));    BigDecimal MovementQty=rl.getQty().subtract(rl.getQtyDelivered());    mTab.setValue("MovementQty",MovementQty);    BigDecimal QtyEntered=MovementQty;    mTab.setValue("QtyEntered",QtyEntered);    mTab.setValue("C_Activity_ID",new Integer(rl.getC_Activity_ID()));    mTab.setValue("C_Campaign_ID",new Integer(rl.getC_Campaign_ID()));    mTab.setValue("C_Project_ID",new Integer(rl.getC_Project_ID()));    mTab.setValue("C_ProjectPhase_ID",new Integer(rl.getC_ProjectPhase_ID()));    mTab.setValue("C_ProjectTask_ID",new Integer(rl.getC_ProjectTask_ID()));    mTab.setValue("AD_OrgTrx_ID",new Integer(rl.getAD_OrgTrx_ID()));    mTab.setValue("User1_ID",new Integer(rl.getUser1_ID()));    mTab.setValue("User2_ID",new Integer(rl.getUser2_ID()));  }  return "";}  }
class C{  public Error(java.lang.String s){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Y lt(X value){  return add(" < ?",value);}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4});}  }
class C{  public ArrayList(int initialCapacity){  super();  if (initialCapacity < 0) {    throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  }  this.elementData=new Object[initialCapacity];}  }
class C{  protected void stopping(){  region.get().setCache(oldCache);  region.get().setCacheHint(oldCacheHint);}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  boolean result=false;  if (size() <= collection.size()) {    Iterator<?> it=iterator();    while (it.hasNext()) {      if (collection.contains(it.next())) {        it.remove();        result=true;      }    }  } else {    Iterator<?> it=collection.iterator();    while (it.hasNext()) {      result=remove(it.next()) || result;    }  }  return result;}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public RequestHandle put(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public static org.oscm.vo.VOPricedRole convertToApi(org.oscm.internal.vo.VOPricedRole oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOPricedRole newVO=new org.oscm.vo.VOPricedRole();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setPricePerUser(oldVO.getPricePerUser());  newVO.setRole(convertToApi(oldVO.getRole()));  return newVO;}  }
class C{  public static long toLong(byte a,byte b,byte c,byte d,byte e,byte f,byte g,byte h){  return (((long)h & BYTE_MASK) << (BYTE_SIZE * 7)) | (((long)g & BYTE_MASK) << (BYTE_SIZE * 6)) | (((long)f & BYTE_MASK) << (BYTE_SIZE * 5))| (((long)e & BYTE_MASK) << (BYTE_SIZE * 4))| ((long)d << (BYTE_SIZE * 3))| (((long)c & BYTE_MASK) << (BYTE_SIZE * 2))| (((long)b & BYTE_MASK) << BYTE_SIZE)| ((long)a & BYTE_MASK);}  }
class C{  private static boolean isDataTypeSetPrecisely(Element bindNode){  String type=bindNode.getAttributeValue(null,ATTRIBUTE_TYPE);  if (type != null && !type.equalsIgnoreCase(DATA_TYPE_TEXT))   return true;  return false;}  }
class C{  public final void unread(){  if (_readOffset <= 0)   throw new RuntimeException();  _readOffset--;}  }
class C{  @SuppressWarnings("unchecked") public static <K>ImmutableArray2<K> empty(){  return (ImmutableArray2<K>)EMPTY;}  }
class C{  public void test_insertLargeValueThenDelete(){  final MyRawStore store=new MyRawStore(new SimpleMemoryRawStore());  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setRawRecords(true);  metadata.setMaxRecLen(64);  final BTree btree=BTree.create(store,metadata);  assertEquals(64,btree.getMaxRecLen());  assertTrue(((ILeafData)btree.getRoot()).hasRawRecords());  final byte[] key=new byte[]{1};  final byte[] val=new byte[btree.getMaxRecLen() + 1];  r.nextBytes(val);  assertNull(btree.insert(key,val));  final Leaf root=(Leaf)btree.getRoot();  final long addr=root.getRawRecord(0);  assertTrue(addr != IRawStore.NULL);  final ByteBuffer actual=btree.readRawRecord(addr);  TestCase3.assertEquals(val,actual);  store.expectDelete=addr;  final byte[] oldval=btree.remove(key);  assertEquals(IRawStore.NULL,store.expectDelete);  assertEquals(val,oldval);}  }
class C{  protected boolean parseMarkupDeclarations(StringBuffer strBuff) throws IOException {  if ((strBuff.length() == "DOCTYPE".length()) && (strBuff.toString().toUpperCase().equals("DOCTYPE"))) {    parseDTDMarkup();    return true;  }  return false;}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  public int evalRPN(String[] tokens){  if (tokens == null || tokens.length == 0)   return 0;  Stack<String> s=new Stack<String>();  int len=tokens.length;  for (int i=0; i < len; i++) {    String cur=tokens[i];    if (isOperator(cur)) {      int t2=Integer.parseInt(s.pop());      int t1=Integer.parseInt(s.pop());      int res=calculate(t1,t2,cur);      s.push(Integer.toString(res));    } else     s.push(cur);  }  return Integer.valueOf(s.peek());}  }
class C{  public static boolean showDetailedInformation(){  return isShiftKeyDown();}  }
class C{  public void onFail(){  _lastFailTime=CurrentTime.currentTime();  if (_firstFailTime == 0) {    _firstFailTime=_lastFailTime;  }  _firstSuccessTime=0;  toState(State.FAIL);  long recoverTimeout=_dynamicRecoverTimeout.get();  long nextRecoverTimeout=Math.min(recoverTimeout + 1000L,_recoverTimeout);  _dynamicRecoverTimeout.compareAndSet(recoverTimeout,nextRecoverTimeout);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:45.275 -0500",hash_original_method="84AE19E5FEA6BD44A102FDD1C7D63C31",hash_generated_method="A7890E5D0CF846B9D0C76B6F6DA78123") private static void populateValues(String[] values,Cursor cursor,int[] columnIndicies,int startingIndex){  assert startingIndex == 0 || startingIndex == 1;  for (int i=0; i < columnIndicies.length; i++) {    values[startingIndex + i * 2]=cursor.getString(columnIndicies[i]);  }}  }
class C{  private void paintMenu(Graphics2D g,JComponent c,int width,int height,ButtonColors colors){  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);  g.setColor(colors.top);  g.drawLine(0,0,width - 2,0);  g.setColor(colors.leftOuter);  g.drawLine(0,0,0,height - 4);  g.setColor(colors.leftInner);  g.drawLine(1,1,1,height - 4);  g.drawLine(2,height - 3,2,height - 3);  Shape s=decodeInterior(width,height);  g.setColor(colors.interior);  g.fill(s);  s=decodeEdge(width,height);  g.setColor(colors.edge);  g.draw(s);  g.setColor(colors.edgeShade);  g.drawLine(2,height - 2,2,height - 2);  g.drawLine(1,height - 3,1,height - 3);  g.drawLine(0,height - 4,0,height - 4);  s=decodeShadow(width,height);  g.setColor(colors.shadow);  g.draw(s);  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  s=decodeMarkInterior(width,height);  g.setColor(colors.markInterior);  g.fill(s);  s=decodeMarkBorder(width,height);  g.setColor(colors.markBorder);  g.draw(s);}  }
class C{  @Override public boolean isPrepared(){  int problemSel=frame.getSelection().getIndex(NQueensFrame.PROBLEM_SEL);  return problemSel == 1 || (agent == null || !agent.isDone()) && (!boardDirty || env.getBoard().getNumberOfQueensOnBoard() == 0);}  }
class C{  public T caseGenericDeclaration(GenericDeclaration object){  return null;}  }
class C{  @Override public int size(){  if (size == 0)   return 0;  expungeStaleEntries();  return size;}  }
class C{  public static WikibasePoint pointFromIV(IV iv){  return new WikibasePoint(asLiteral(iv).stringValue());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void clearCache(){  if (subframeIndex != null && subframeVersion != null) {    for (int i=0; i < subframeIndex.length; i++) {      for (int j=0; j < subframeIndex[0].length; j++) {        subframeIndex[i][j]=NOT_CACHED;        subframeVersion[i][j]=-1;      }    }  }  initCache(false);}  }
class C{  public static long toMicros(Instant instant){  return TimeUnit.SECONDS.toMicros(instant.getEpochSecond()) + TimeUnit.NANOSECONDS.toMicros(instant.getNano());}  }
class C{  String classNameToEntryPath(String className){  return className.replaceAll("\\.","/").concat(".class");}  }
class C{  protected String splitLine(String origLine){  StringBuilder newLines=new StringBuilder();  String currentIndent="";  for (int i=0; i < origLine.length(); i++) {    if (origLine.charAt(i) == '\u00a0')     currentIndent+=HARD_SPACE; else     break;  }  StringBuilder line=new StringBuilder(currentIndent);  String[] words=Util.splitWords(origLine,"[\u00a0 ]");  for (  String word : words) {    if (line.length() + 1 + word.length()+ currentIndent.length() > this.maxLineLength) {      if (newLines.length() == 0)       currentIndent+=INDENT;      newLines.append(line.toString());      line=new StringBuilder("\n").append(currentIndent);    }    if (!line.toString().endsWith(HARD_SPACE))     line.append(HARD_SPACE);    line.append(word);  }  if (line.length() > 1)   newLines.append(line.toString());  return newLines.toString();}  }
class C{  private void extractKeys(KeyStore keystore,Properties props){  String keyspec=props.getProperty(Configuration.INGRESS_KAFKA_META_MAC);  if (null != keyspec) {    byte[] key=keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + Configuration.INGRESS_KAFKA_META_MAC + " MUST be 128 bits long.");    keystore.setKey(KeyStore.SIPHASH_KAFKA_METADATA,key);  }  keyspec=props.getProperty(Configuration.INGRESS_KAFKA_DATA_MAC);  if (null != keyspec) {    byte[] key=keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + Configuration.INGRESS_KAFKA_DATA_MAC + " MUST be 128 bits long.");    keystore.setKey(KeyStore.SIPHASH_KAFKA_DATA,key);  }  keyspec=props.getProperty(Configuration.INGRESS_KAFKA_META_AES);  if (null != keyspec) {    byte[] key=keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + Configuration.INGRESS_KAFKA_META_AES + " MUST be 128, 192 or 256 bits long.");    keystore.setKey(KeyStore.AES_KAFKA_METADATA,key);  }  keyspec=props.getProperty(Configuration.INGRESS_KAFKA_DATA_AES);  if (null != keyspec) {    byte[] key=keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length || 24 == key.length || 32 == key.length,"Key " + Configuration.INGRESS_KAFKA_DATA_AES + " MUST be 128, 192 or 256 bits long.");    keystore.setKey(KeyStore.AES_KAFKA_DATA,key);  }  keyspec=props.getProperty(Configuration.DIRECTORY_PSK);  if (null != keyspec) {    byte[] key=this.keystore.decodeKey(keyspec);    Preconditions.checkArgument(16 == key.length,"Key " + Configuration.DIRECTORY_PSK + " MUST be 128 bits long.");    this.keystore.setKey(KeyStore.SIPHASH_DIRECTORY_PSK,key);  }  this.keystore.forget();}  }
class C{  private void processPorts(SBJob parentJob,SBJob job,List<? extends ApplicationPort> ports) throws SBException {  for (  ApplicationPort port : ports) {    String prefix=job.getId().substring(job.getId().lastIndexOf(SBSchemaHelper.PORT_ID_SEPARATOR) + 1) + SBSchemaHelper.PORT_ID_SEPARATOR;    setScatter(job,prefix,port);    if (parentJob != null) {      setScatter(parentJob,prefix,port);    }    if (parentJob != null && parentJob.getApp().isWorkflow()) {      SBWorkflow workflowApp=(SBWorkflow)parentJob.getApp();      processDataLinks(workflowApp.getDataLinks(),port,job,true);    }    if (job != null && job.getApp().isWorkflow()) {      SBWorkflow workflowApp=(SBWorkflow)job.getApp();      processDataLinks(workflowApp.getDataLinks(),port,job,false);    }  }}  }
class C{  Long selectLongWithDefaultUnregisteredQuery(Connection c,String sql,Long defaultVal,Object... vs) throws PalantirSqlException, PalantirInterruptedException {  return basicSql.selectLongInternal(c,SQLString.getUnregisteredQuery(sql),vs,defaultVal,false);}  }
class C{  public static ARCHType calculateArch(){  String osArch=System.getProperty("os.arch");  osArch=osArch.toLowerCase(Locale.ENGLISH);  if (osArch.equals("i386") || osArch.equals("x86") || osArch.equals("i686")) {    return ARCHType.X86;  }  if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {    return ARCHType.X86_64;  }  if (osArch.equals("ppc") || osArch.equals("powerpc")) {    return ARCHType.PPC;  }  if (osArch.startsWith("ppc")) {    return ARCHType.PPC_64;  }  if (osArch.startsWith("sparc")) {    return ARCHType.SPARC;  }  if (osArch.startsWith("arm")) {    return ARCHType.ARM;  }  if (osArch.startsWith("mips")) {    return ARCHType.MIPS;  }  if (osArch.contains("risc")) {    return ARCHType.RISC;  }  return ARCHType.UNKNOWN;}  }
class C{  private Target createTargetAndStartAction(){  final DistributionSet dsA=testdataFactory.createDistributionSet("");  final Target tA=targetManagement.createTarget(testdataFactory.generateTarget("target-id-A","first description"));  deploymentManagement.assignDistributionSet(dsA,newArrayList(tA));  final Slice<Action> actionsByTarget=deploymentManagement.findActionsByTarget(new PageRequest(0,100),tA);  assertThat(actionsByTarget.getContent()).hasSize(1);  return targetManagement.findTargetByControllerID(tA.getControllerId());}  }
class C{  protected void doCancel(HttpServletRequest request,String subpartId){  SchedulingSubpartDAO sdao=new SchedulingSubpartDAO();  SchedulingSubpart ss=sdao.get(new Long(subpartId));  InstructionalOffering io=ss.getInstrOfferingConfig().getInstructionalOffering();  CourseOffering co=io.getControllingCourseOffering();  InstructionalOfferingListForm frm2=new InstructionalOfferingListForm();  frm2.setSubjectAreaIds(new String[]{co.getSubjectArea().getUniqueId().toString()});  frm2.setSubjectAreaAbbv(co.getSubjectAreaAbbv());  frm2.setCourseNbr(co.getCourseNbr());  frm2.setCtrlInstrOfferingId(io.getCtrlCourseId().toString());  frm2.setIsControl(co.isIsControl());  request.setAttribute("subjectAreaId",co.getSubjectArea().getUniqueId().toString());  request.setAttribute("instructionalOfferingListForm",frm2);}  }
class C{  public JsonUser addUser(JsonNewUser user) throws VolleyError {  JsonUser newUser=addUserOnServer(user);  addUserLocally(newUser);  return newUser;}  }
class C{  public static JFreeChart createXYStepAreaChart(String title,String xAxisLabel,String yAxisLabel,XYDataset dataset){  return createXYStepAreaChart(title,xAxisLabel,yAxisLabel,dataset,PlotOrientation.VERTICAL,true,true,false);}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(SerializationTester.test(flavorMap) ? flavorMap : null);  DnDEventMulticaster.save(s,dragSourceListenerK,listener);  DnDEventMulticaster.save(s,dragSourceMotionListenerK,motionListener);  s.writeObject(null);}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public boolean visitNode(TextEdit edit){  return true;}  }
class C{  public void clearMarkAllHighlights(){  Highlighter h=getHighlighter();  if (h != null && markAllHighlights != null) {    int count=markAllHighlights.size();    for (int i=0; i < count; i++)     h.removeHighlight(markAllHighlights.get(i));    markAllHighlights.clear();  }  markedWord=null;  repaint();}  }
class C{  public static File locateReplicatorLogDir(){  if (replicatorLogDir == null) {    String replicatorLog=System.getProperty(LOG_DIR);    if (replicatorLog == null)     replicatorLogDir=new File(locateReplicatorHomeDir(),"log"); else     replicatorLogDir=new File(replicatorLog);    if (!replicatorLogDir.isDirectory()) {      throw new ServerRuntimeException("Replicator log directory does not exist or is invalid: " + replicatorLogDir);    }  }  return replicatorLogDir;}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public static byte[] toByteArray(Double[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].byteValue();  }  return result;}  }
class C{  public MyIdentityHashMap(Map<? extends K,? extends V> m){  this(Math.max((int)(m.size() / DEFAULT_LOAD_FACTOR) + 1,DEFAULT_INITIAL_CAPACITY),DEFAULT_LOAD_FACTOR);  putAllForCreate(m);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.SYNTAX_RELATED_TELEMENT__AST_ELEMENT:    if (resolve)     return getAstElement();  return basicGetAstElement();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void testSingleThreadedInterval() throws Exception {  AtomicIntervalGuard<String> ati=new AtomicIntervalGuard<String>(3);  Integer[] t={new Integer(0),new Integer(1),new Integer(2)};  long seqno=0;  long time=0;  for (int i=0; i < 100000; i++) {    for (int j=0; j < 3; j++) {      seqno++;      time+=10;      ati.report(t[j],seqno,time);    }    long minimumTime=Math.max(time - 20,0);    long tailTime=ati.waitMinTime(minimumTime,seqno);    assertEquals("Tail time at iteration: " + i,minimumTime,tailTime);  }}  }
class C{  public void close(){  _ncGuards=null;}  }
class C{  @Transient public boolean isDirty(){  for (  PortfolioAccount item : this.getPortfolioAccounts()) {    if (item.isDirty())     return true;  }  return super.isDirty();}  }
class C{  @Path("/token/{tokenId}") @DELETE @ApiOperation(value="Deletes a token") public boolean deleteToken(@Context HttpServletRequest request,@PathParam("tokenId") String tokenId){  AppContext userContext=getAnonymousUserContext(request,null,null);  DAOFactory.getDAOFactory().getDAO(AccessToken.class).delete(userContext,new AccessTokenPK(tokenId));  return true;}  }
class C{  public VfsStreamOld(InputStream is,OutputStream os){  init(is,os);}  }
class C{  public Iterator edges(Node node){  nodeCheck(node,true);  return m_edgeTuples.iterator(edgeRows(node.getRow(),UNDIRECTED));}  }
class C{  public void sendKeepAlive(int handle){  CanMessage msg=new CanMessage(2,tc.getCanid());  msg.setOpCode(CbusConstants.CBUS_DKEEP);  msg.setElement(1,handle);  log.debug("keep alive handle: " + handle);  tc.sendCanMessage(msg,null);}  }
class C{  public void addListener(final ProcessManagerListener listener){  listeners.addListener(listener);}  }
class C{  @Override public void doRunKeys(int run) throws Exception {  if (m_ResultProducer == null) {    throw new Exception("No ResultProducer set");  }  if (m_ResultListener == null) {    throw new Exception("No ResultListener set");  }  if (m_Instances == null) {    throw new Exception("No Instances set");  }  m_ResultProducer.setResultListener(this);  m_ResultProducer.setInstances(m_Instances);  m_ResultProducer.doRunKeys(run);}  }
class C{  @Override public void generateCode(ClassScope classScope){}  }
class C{  private int hash(int hashCode){  return supplementalHash(hashCode) & (capacity - 1);}  }
class C{  public synchronized void insert(byte[] object){  for (int i=0; i < hashFuncs; i++)   Utils.setBitLE(data,murmurHash3(data,nTweak,i,object));}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.CONTENT_FILTER;}  }
class C{  public HAVING HAVING(String having){  return new HAVING(this,having);}  }
class C{  public synchronized boolean hasCapabilities(String... capabilites){  boolean hasCaps=true;  for (  String capability : capabilites) {    if (!hasCapability(capability)) {      hasCaps=false;      break;    }  }  return hasCaps;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  private static List<NetworkRoute> computeNetworkRoutesByTransitRouteStops(Network network,Map<Id<TransitRoute>,TransitRoute> transitRoutes,String[] listOfRoutes){  List<NetworkRoute> newNetworkRoutes=new ArrayList<NetworkRoute>();  PriorityQueue<Id<TransitRoute>> uncheckedTransitRoutes=new PriorityQueue<Id<TransitRoute>>();  for (int i=0; i < listOfRoutes.length; i++) {    uncheckedTransitRoutes.add(Id.create(listOfRoutes[i],TransitRoute.class));  }  List<TransitRouteStop> checkedTransitRouteStops=new ArrayList<TransitRouteStop>();  int maxStops=Integer.MIN_VALUE;  for (  TransitRoute transitRoute : transitRoutes.values()) {    int size=transitRoute.getStops().size();    if (size > maxStops)     maxStops=size;  }  int transitRoutesContaining=0;  TransitRoute currentTransitRoute=null;  while (checkedTransitRouteStops.size() < maxStops) {    List<Id<Link>> routeLinkIds=new ArrayList<Id<Link>>();    currentTransitRoute=transitRoutes.get(uncheckedTransitRoutes.remove());    transitRoutesContaining=1;    for (    TransitRouteStop stop : currentTransitRoute.getStops()) {      if (!checkedTransitRouteStops.contains(stop)) {        int containing=1;        for (        TransitRoute transitRoute : transitRoutes.values()) {          if (!transitRoute.getId().equals(currentTransitRoute.getId())) {            if (transitRoute.getStop(stop.getStopFacility()) != null) {              containing++;            }          }        }        if (transitRoutesContaining != containing) {          if (routeLinkIds.size() < 1) {            transitRoutesContaining=containing;          } else {            newNetworkRoutes.add(RouteUtils.createNetworkRoute(routeLinkIds,network));            transitRoutesContaining=containing;            for (int i=0; i < routeLinkIds.size() - 1; i++)             routeLinkIds.remove(i);          }        }        Id nextLinkId=stop.getStopFacility().getLinkId();        if (routeLinkIds.size() > 0) {          Id lastLinkId=routeLinkIds.get(routeLinkIds.size() - 1);          List<Id<Link>> linkIds=currentTransitRoute.getRoute().getLinkIds();          int lastLinkIndex=linkIds.contains(lastLinkId) ? linkIds.indexOf(lastLinkId) + 1 : 0;          int nextLinkIndex=linkIds.contains(nextLinkId) ? linkIds.indexOf(nextLinkId) : 0;          for (int i=lastLinkIndex; i < nextLinkIndex - 1; i++) {            if (!routeLinkIds.contains(linkIds.get(i)))             routeLinkIds.add(linkIds.get(i));          }        }        routeLinkIds.add(stop.getStopFacility().getLinkId());        checkedTransitRouteStops.add(stop);        if (currentTransitRoute.getStops().indexOf(stop) >= currentTransitRoute.getStops().size() - 1)         newNetworkRoutes.add(RouteUtils.createNetworkRoute(routeLinkIds,network));      }    }  }  return newNetworkRoutes;}  }
class C{  private static final int[] squareToLen(int[] x,int len,int[] z){  int zlen=len << 1;  if (z == null || z.length < zlen)   z=new int[zlen];  implSquareToLenChecks(x,len,z,zlen);  return implSquareToLen(x,len,z,zlen);}  }
class C{  public void testSortOneDocumentWithScores() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newStringField("value","foo",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.SORTED));  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.STRING));  TopDocs expected=searcher.search(new TermQuery(new Term("value","foo")),10);  assertEquals(1,expected.totalHits);  TopDocs actual=searcher.search(new TermQuery(new Term("value","foo")),10,sort,true,true);  assertEquals(expected.totalHits,actual.totalHits);  assertEquals(expected.scoreDocs[0].score,actual.scoreDocs[0].score,0F);  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public MessageProcessor(Context context){  this.context=context;  deviceId=Preference.getString(context,DEVICE_ID_PREFERENCE_KEY);  operationProcessor=new OperationProcessor(context.getApplicationContext());  mapper=new ObjectMapper();  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);  mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS,false);  this.devicePolicyManager=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);  if (deviceId == null) {    DeviceInfo deviceInfo=new DeviceInfo(context.getApplicationContext());    deviceId=deviceInfo.getDeviceId();    Preference.putString(context,DEVICE_ID_PREFERENCE_KEY,deviceId);  }}  }
class C{  public Builder onError(ErrorCallback errorCallback){  this.errorCallback=errorCallback;  return this;}  }
class C{  public final int offsetToX(int line,int offset){  painter.currentLineTokens=null;  return _offsetToX(line,offset);}  }
class C{  private TarEntry(){  this.magic=new StringBuffer(TMAGIC);  this.name=new StringBuffer();  this.linkName=new StringBuffer();  String user=System.getProperty("user.name","");  if (user.length() > MAX_NAMELEN) {    user=user.substring(0,MAX_NAMELEN);  }  this.userId=0;  this.groupId=0;  this.userName=new StringBuffer(user);  this.groupName=new StringBuffer("");  this.file=null;}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  @Override protected long lengthOfData() throws IOException {  LOG.trace("enter lengthOfData()");  return source.getLength();}  }
class C{  public long nextLong(){  return org.evosuite.runtime.Random.nextLong();}  }
class C{  public static boolean isVPLEXCGBackendVolumesInSameStorage(List<Volume> vplexVolumes,DbClient dbClient){  Set<String> backendSystems=new HashSet<>();  Set<String> haBackendSystems=new HashSet<>();  boolean result=true;  for (  Volume vplexVolume : vplexVolumes) {    Volume srcVolume=getVPLEXBackendVolume(vplexVolume,true,dbClient);    backendSystems.add(srcVolume.getStorageController().toString());    Volume haVolume=getVPLEXBackendVolume(vplexVolume,false,dbClient);    if (haVolume != null) {      haBackendSystems.add(haVolume.getStorageController().toString());    }  }  if (backendSystems.size() > 1 || haBackendSystems.size() > 1) {    result=false;  }  return result;}  }
class C{  public boolean isEmpty() throws ParseException {  fetch(false);  return null == current;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","gdhsc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public DrmErrorEvent(int uniqueId,int type,String message){  super(uniqueId,type,message);  checkTypeValidity(type);}  }
class C{  private void addGenericRoad(){  Coords c=new Coords(Compute.randomInt(board.getWidth()),Compute.randomInt(board.getHeight()));  int side0=Compute.randomInt(6);  int side1=Compute.randomInt(5);  if (side1 >= side0) {    side1++;  }  buildStraightRoad(c,side0,1);  buildStraightRoad(c,side1,1);}  }
class C{  public boolean containsKey(K key){  key=sanitizeKey(key);  return map.containsKey(key);}  }
class C{  public AbNumberClock(Context context,Drawable timeBg,Drawable timeColon,List<Drawable> timeBmp,List<Drawable> apmBmp){  super(context);  mTimeBg=timeBg;  mTimeColon=timeColon;  dTimeBmp=timeBmp;  dApmBmp=apmBmp;  mCalendar=new Time();  if (!dApmBmp.isEmpty() && dApmBmp.size() > 0) {    mTimeBgWidth=2 * mTimeColon.getIntrinsicWidth() + 6 * dTimeBmp.get(0).getIntrinsicWidth() + dApmBmp.get(0).getIntrinsicWidth();    mTimeBgHeight=dTimeBmp.get(0).getIntrinsicHeight();  } else {    mTimeBgWidth=2 * mTimeColon.getIntrinsicWidth() + 8 * dTimeBmp.get(0).getIntrinsicWidth();    mTimeBgHeight=dTimeBmp.get(0).getIntrinsicHeight();  }}  }
class C{  public static boolean hasBinary(Context context,String binaryName){  return getInternals().isBinaryAvailable(context,binaryName);}  }
class C{  public final static float radToDeg(float rad){  return (float)Math.toDegrees((double)rad);}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {  this.random=random;}  }
class C{  public static Segment parse(final Iterable<String> document){  List<Segment> segments=new ArrayList<>();  for (  final String line : document) {    segments.add(new TextSegment(null,trimRight(line)));  }  List<Segment> workSegments=new ArrayList<>();  for (  final PatternMapping type : SEGMENT_TYPES) {    for (    final Segment segment : segments) {      segment.refine(type.pattern,type.refiner).forEach(null);    }    final List<Segment> tmp=segments;    segments=workSegments;    workSegments=tmp;    workSegments.clear();  }  for (int i=0; i < segments.size() - 1; i++) {    segments.get(i).setNext(segments.get(i + 1));  }  return segments.size() > 0 ? segments.get(0) : new TextSegment(null,"");}  }
class C{  public boolean removeAll(Collection c){  boolean modified=false;  if (size() > c.size()) {    for (Iterator i=c.iterator(); i.hasNext(); )     modified|=remove(i.next());  } else {    for (Iterator i=iterator(); i.hasNext(); ) {      if (c.contains(i.next())) {        i.remove();        modified=true;      }    }  }  return modified;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  requestWindowFeature(Window.FEATURE_NO_TITLE);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    setContentView(R.layout.materialcolorpicker__layout_color_picker);  } else {    setContentView(R.layout.materialcolorpicker__layout_color_picker_old_android);  }  colorView=findViewById(R.id.colorView);  redSeekBar=(SeekBar)findViewById(R.id.redSeekBar);  greenSeekBar=(SeekBar)findViewById(R.id.greenSeekBar);  blueSeekBar=(SeekBar)findViewById(R.id.blueSeekBar);  seekBarLeft=redSeekBar.getPaddingLeft();  redToolTip=(TextView)findViewById(R.id.redToolTip);  greenToolTip=(TextView)findViewById(R.id.greenToolTip);  blueToolTip=(TextView)findViewById(R.id.blueToolTip);  codHex=(EditText)findViewById(R.id.codHex);  redSeekBar.setOnSeekBarChangeListener(this);  greenSeekBar.setOnSeekBarChangeListener(this);  blueSeekBar.setOnSeekBarChangeListener(this);  redSeekBar.setProgress(red);  greenSeekBar.setProgress(green);  blueSeekBar.setProgress(blue);  colorView.setBackgroundColor(Color.rgb(red,green,blue));  codHex.setText(String.format(COLOR_STRING_FORMAT,red,green,blue));  codHex.setEnabled(false);}  }
class C{  public static void main(String[] args){  String filename=args[0];  BinaryOut out=new BinaryOut(filename);  BinaryIn in=new BinaryIn();  while (!in.isEmpty()) {    char c=in.readChar();    out.write(c);  }  out.flush();}  }
class C{  public T casePackageMember(PackageMember object){  return null;}  }
class C{  public void markAsUnspent(){  if (parent != null)   if (log.isDebugEnabled())   log.debug("Un-marked {}:{} as spent by {}",getParentTransactionHash(),getIndex(),spentBy); else   if (log.isDebugEnabled())   log.debug("Un-marked floating output as spent by {}",spentBy);  availableForSpending=true;  spentBy=null;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PeriodAxis)) {    return false;  }  PeriodAxis that=(PeriodAxis)obj;  if (!this.first.equals(that.first)) {    return false;  }  if (!this.last.equals(that.last)) {    return false;  }  if (!this.timeZone.equals(that.timeZone)) {    return false;  }  if (!this.locale.equals(that.locale)) {    return false;  }  if (!this.autoRangeTimePeriodClass.equals(that.autoRangeTimePeriodClass)) {    return false;  }  if (!(isMinorTickMarksVisible() == that.isMinorTickMarksVisible())) {    return false;  }  if (!this.majorTickTimePeriodClass.equals(that.majorTickTimePeriodClass)) {    return false;  }  if (!this.minorTickTimePeriodClass.equals(that.minorTickTimePeriodClass)) {    return false;  }  if (!this.minorTickMarkPaint.equals(that.minorTickMarkPaint)) {    return false;  }  if (!this.minorTickMarkStroke.equals(that.minorTickMarkStroke)) {    return false;  }  if (!Arrays.equals(this.labelInfo,that.labelInfo)) {    return false;  }  return super.equals(obj);}  }
class C{  protected void handleServerStop(Event event){  logger.debug("Server stopped: {}",event);}  }
class C{  public StatelessSection(int headerResourceId,int itemResourceId){  this(itemResourceId);  this.headerResourceId=headerResourceId;  this.hasHeader=true;}  }
class C{  public static void frustumM(float[] m,int offset,float left,float right,float bottom,float top,float near,float far){  if (left == right) {    throw new IllegalArgumentException("left == right");  }  if (top == bottom) {    throw new IllegalArgumentException("top == bottom");  }  if (near == far) {    throw new IllegalArgumentException("near == far");  }  if (near <= 0.0f) {    throw new IllegalArgumentException("near <= 0.0f");  }  if (far <= 0.0f) {    throw new IllegalArgumentException("far <= 0.0f");  }  final float r_width=1.0f / (right - left);  final float r_height=1.0f / (top - bottom);  final float r_depth=1.0f / (near - far);  final float x=2.0f * (near * r_width);  final float y=2.0f * (near * r_height);  final float A=2.0f * ((right + left) * r_width);  final float B=(top + bottom) * r_height;  final float C=(far + near) * r_depth;  final float D=2.0f * (far * near * r_depth);  m[offset + 0]=x;  m[offset + 5]=y;  m[offset + 8]=A;  m[offset + 9]=B;  m[offset + 10]=C;  m[offset + 14]=D;  m[offset + 11]=-1.0f;  m[offset + 1]=0.0f;  m[offset + 2]=0.0f;  m[offset + 3]=0.0f;  m[offset + 4]=0.0f;  m[offset + 6]=0.0f;  m[offset + 7]=0.0f;  m[offset + 12]=0.0f;  m[offset + 13]=0.0f;  m[offset + 15]=0.0f;}  }
class C{  private void apply_offset(int offset){  if (offset == 0)   return;  if (offset < -24 * 60 || offset > 24 * 60) {    throw new IllegalArgumentException("bad offset " + offset);  }  offset=-offset;  int hour_offset=offset / 60;  int min_offset=offset - (hour_offset * 60);  if (offset < 0) {    _minute+=min_offset;    _hour+=hour_offset;    if (_minute < 0) {      _minute+=60;      _hour-=1;    }    if (_hour >= 0)     return;    _hour+=24;    _day-=1;    if (_day >= 1)     return;    _month-=1;    if (_month >= 1) {      _day+=last_day_in_month(_year,_month);      assert (_day == last_day_in_month(_year,_month));      return;    }    _month+=12;    _year-=1;    if (_year < 1)     throw new IllegalArgumentException("year is less than 1");    _day+=last_day_in_month(_year,_month);    assert (_day == last_day_in_month(_year,_month));  } else {    _minute+=min_offset;    _hour+=hour_offset;    if (_minute > 59) {      _minute-=60;      _hour+=1;    }    if (_hour < 24)     return;    _hour-=24;    _day+=1;    if (_day <= last_day_in_month(_year,_month))     return;    _day=1;    _month+=1;    if (_month <= 12) {      return;    }    _month-=12;    _year+=1;    if (_year > 9999)     throw new IllegalArgumentException("year exceeds 9999");  }}  }
class C{  private void restoreVar(){  log.debug("restoring to: " + intVar + " with dist: "+ checkpointedDistance);  intVar.setConcreteValue(checkpointedConcreteValue);}  }
class C{  public boolean copy(String toRpfDir){  File toDir=new File(toRpfDir);  boolean ret=false;  String sourceRpfDir=getRpfDir();  if ((toDir.exists() || toDir.mkdirs()) && frameList != null) {    if (verbose) {      Debug.output("From " + sourceRpfDir + " to "+ toRpfDir+ ":");    }    for (Iterator<String> it=frameList.iterator(); it.hasNext(); ) {      String relativeFilePath="/" + it.next();      File fromFile=new File(sourceRpfDir + relativeFilePath);      File toFile=new File(toRpfDir + relativeFilePath);      File toParent=toFile.getParentFile();      if (!toParent.exists()) {        toParent.mkdirs();      }      if (verbose) {        Debug.output("Copying " + relativeFilePath);      }      try {        FileUtils.copy(fromFile,toFile,400000);      } catch (      IOException ioe) {        Debug.error("RpfUtil.copy:  IOExeption copying files: " + ioe.getMessage());        return false;      }    }    ret=true;  }  return ret;}  }
class C{  @Override public char[] labelAnnotationIntroducingCharacters(){  return annotationIntroducingChars;}  }
class C{  public NamedColumnProjection(String name,boolean include){  m_names=new HashSet();  m_names.add(name);  m_include=include;}  }
class C{  public static Paint newBorderPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_LINE_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint borderPaint=new Paint();  borderPaint.setColor(Color.parseColor(SEMI_TRANSPARENT));  borderPaint.setStrokeWidth(lineThicknessPx);  borderPaint.setStyle(Paint.Style.STROKE);  return borderPaint;}  }
class C{  private static Set<Node> removeExternallyUsedNodes(Set<Node> set){  boolean change;  do {    change=false;    for (Iterator<Node> iter=set.iterator(); iter.hasNext(); ) {      Node node=iter.next();      for (      Node usage : node.usages()) {        if (!set.contains(usage)) {          change=true;          iter.remove();          break;        }      }    }  } while (change);  return set;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node child;  String childName;  Node insertedNode;  java.util.List expected=new java.util.ArrayList();  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("em");  expected.add("acronym");  java.util.List result=new java.util.ArrayList();  int nodeType;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=((Element)employeeNode).getElementsByTagName("*");  refChild=childList.item(5);  newChild=childList.item(0);  insertedNode=employeeNode.insertBefore(newChild,refChild);  for (int indexN1008C=0; indexN1008C < childList.getLength(); indexN1008C++) {    child=(Node)childList.item(indexN1008C);    nodeType=(int)child.getNodeType();    if (equals(1,nodeType)) {      childName=child.getNodeName();      result.add(childName);    }  }  assertEqualsAutoCase("element","childNames",expected,result);}  }
class C{  protected void export(OMGraphicList list,List<Object> masterRecord,boolean writeFiles){  badGraphics=0;  if (list == null) {    return;  } else   if (list instanceof EsriGraphicList) {    export((EsriGraphicList)list);    return;  }  int dbfIndex=0;  for (  OMGraphic dtlGraphic : list) {    List<Object> record=masterRecord;    Integer recIndex=(Integer)dtlGraphic.getAttribute(SHAPE_INDEX_ATTRIBUTE);    if (recIndex == null) {      recIndex=dbfIndex;    }    if (record == null) {      record=getMasterDBFRecord(recIndex);    }    dbfIndex++;    if (dtlGraphic instanceof OMGraphicList) {      if (DEBUG)       logger.fine("ESE: handling OMGraphicList");      export((OMGraphicList)dtlGraphic,record,false);      continue;    }    if (dtlGraphic.getRenderType() != RENDERTYPE_LATLON) {      badGraphics++;      continue;    }    if (dtlGraphic instanceof OMAreaList) {      if (DEBUG) {        logger.fine("ESE: handling OMAreaList");      }      addAreaList((OMAreaList)dtlGraphic,record);    }    if (dtlGraphic instanceof OMPoly) {      OMPoly omPoly=(OMPoly)dtlGraphic;      if (isPolygon(omPoly)) {        if (DEBUG)         logger.fine("ESE: handling OMPoly polygon");        addPolygon(dtlGraphic,record);      } else {        if (DEBUG)         logger.fine("ESE: handling OMPoly line");        addLine(dtlGraphic,record);      }    } else     if (dtlGraphic instanceof OMRect) {      if (DEBUG)       logger.fine("ESE: handling OMRect");      addPolygon((OMGraphic)EsriPolygonList.convert((OMRect)dtlGraphic),record);    } else     if (dtlGraphic instanceof OMCircle) {      if (DEBUG)       logger.fine("ESE: handling OMCircle");      addPolygon((OMGraphic)EsriPolygonList.convert((OMCircle)dtlGraphic,projection),record);    } else     if (dtlGraphic instanceof OMRangeRings) {      if (DEBUG)       logger.fine("ESE: handling OMRangeRings");      export(EsriPolygonList.convert((OMRangeRings)dtlGraphic,projection),record,false);    } else     if (dtlGraphic instanceof OMLine) {      if (DEBUG)       logger.fine("ESE: handling OMLine");      addLine((OMGraphic)EsriPolylineList.convert((OMLine)dtlGraphic),record);    } else     if (dtlGraphic instanceof OMPoint) {      if (DEBUG)       logger.fine("ESE: handling OMPoint");      addPoint(dtlGraphic,record);    }  }  if (badGraphics > 0) {    DrawingToolRenderException.notifyUserOfNonLatLonGraphics(badGraphics);  }  if (!writeFiles) {    return;  }  boolean needConfirmation=false;  if (filePath == null) {    filePath=getFilePathFromUser();    if (filePath == null) {      return;    }    needConfirmation=true;  }  if (DEBUG)   logger.fine("ESE: writing files...");  boolean needTypeSuffix=false;  if (polyList != null) {    eseInterfaces.add(new ESEInterface(polyList,filePath,null));    needTypeSuffix=true;  }  if (lineList != null) {    eseInterfaces.add(new ESEInterface(lineList,filePath,(needTypeSuffix ? LineSuffix : null)));    needTypeSuffix=true;  }  if (pointList != null) {    eseInterfaces.add(new ESEInterface(pointList,filePath,(needTypeSuffix ? PointSuffix : null)));  }  if (needConfirmation) {    showGUI();  } else {    writeFiles();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputStreamsFile;  int row, col;  int i;  int topRow, bottomRow, leftCol, rightCol;  float progress;  double decrement;  double decayCoefficient=0;  double elevation;  double infVal=9999999;  double value;  double rowYCoord, colXCoord;  double[][] geometry;  BoundingBox box;  int numPoints, numParts, part;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime, yPrime;  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  inputStreamsFile=args[1];  outputHeader=args[2];  decrement=Double.parseDouble(args[3]);  if (!args[4].toLowerCase().contains("not specified")) {    decayCoefficient=Double.parseDouble(args[4]);    if (decayCoefficient < 0) {      decayCoefficient=0;    }  }  if ((demHeader == null) || (inputStreamsFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    DEM=new WhiteboxRaster(demHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    gridRes=(DEM.getCellSizeX() + DEM.getCellSizeY()) / 2;    if (inputStreamsFile.toLowerCase().endsWith(".dep")) {      streamsHeader=inputStreamsFile;      streams=new WhiteboxRaster(streamsHeader,"r");    } else     if (inputStreamsFile.toLowerCase().endsWith(".shp")) {      streamsHeader=inputStreamsFile.replace(".shp","_temp.dep");      ShapeFile input=new ShapeFile(inputStreamsFile);      int numRecs=input.getNumberOfRecords();      if (input.getShapeType() != ShapeType.POLYLINE && input.getShapeType() != ShapeType.POLYLINEZ && input.getShapeType() != ShapeType.POLYLINEM && input.getShapeType() != ShapeType.POLYGON && input.getShapeType() != ShapeType.POLYGONZ && input.getShapeType() != ShapeType.POLYGONM) {        showFeedback("The input shapefile must be of a 'polyline' or " + "'polygon' data type.");        return;      }      streams=new WhiteboxRaster(streamsHeader,"rw",demHeader,WhiteboxRasterBase.DataType.INTEGER,0);      streams.isTemporaryFile=true;      ArrayList<RecordInfo> myList=new ArrayList<RecordInfo>();      for (      ShapeFileRecord record : input.records) {        i=record.getRecordNumber();        box=getBoundingBoxFromShapefileRecord(record);        myList.add(new RecordInfo(box.getMaxY(),i));      }      Collections.sort(myList);      long heapSize=Runtime.getRuntime().totalMemory();      int flushSize=(int)(heapSize / 32);      int j, numCellsToWrite;      PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<RowPriorityGridCell>(flushSize);      RowPriorityGridCell cell;      int numRecords=input.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      progress=0;      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=input.getRecord(ri.recNumber - 1);        value=record.getRecordNumber();        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][0] < box.getMinX()) {              box.setMinX(geometry[i][0]);            }            if (geometry[i][0] > box.getMaxX()) {              box.setMaxX(geometry[i][0]);            }            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=streams.getRowFromYCoordinate(box.getMaxY());          bottomRow=streams.getRowFromYCoordinate(box.getMinY());          leftCol=streams.getColumnFromXCoordinate(box.getMinX());          rightCol=streams.getColumnFromXCoordinate(box.getMaxX());          for (row=topRow; row <= bottomRow; row++) {            rowYCoord=streams.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1);                  col=streams.getColumnFromXCoordinate(xPrime);                  pq.add(new RowPriorityGridCell(row,col,value));                }              }            }          }          for (col=leftCol; col <= rightCol; col++) {            colXCoord=streams.getXCoordinateFromColumn(col);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(colXCoord,geometry[i][0],geometry[i + 1][0])) {                x1=geometry[i][0];                x2=geometry[i + 1][0];                if (x1 != x2) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  yPrime=y1 + (colXCoord - x1) / (x2 - x1) * (y2 - y1);                  row=streams.getRowFromYCoordinate(yPrime);                  pq.add(new RowPriorityGridCell(row,col,value));                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            streams.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress((int)progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        streams.setValue(cell.row,cell.col,cell.z);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      streams.flush();    } else {      showFeedback("The input streams file must be either a Whitebox raster or shapefile.");      return;    }    if (streams.getNumberColumns() != cols || streams.getNumberRows() != rows) {      showFeedback("The input files must have the same dimensions.");      return;    }    output=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,infVal);    output.setPreferredPalette(DEM.getPreferredPalette());    if (decayCoefficient > 0) {      if (!CalculateDistance()) {        showFeedback("An error was encountered calculating distances.");        return;      }      double distVal=0;      double[] data;      for (row=0; row < rows; row++) {        data=DEM.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            distVal=output.getValue(row,col);            elevation=data[col] - (Math.pow((gridRes / (gridRes + distVal)),decayCoefficient) * decrement);            output.setValue(row,col,elevation);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Burning Streams:",(int)progress);      }    } else {      double[] demData;      double[] streamData;      for (row=0; row < rows; row++) {        demData=DEM.getRowValues(row);        streamData=streams.getRowValues(row);        for (col=0; col < cols; col++) {          if (demData[col] != noData && streamData[col] > 0) {            elevation=demData[col] - decrement;            output.setValue(row,col,elevation);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress("Burning Streams:",(int)progress);      }    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static void put(Conversation c){synchronized (sInstance) {    if (Log.isLoggable(LogTag.THREAD_CACHE,Log.VERBOSE)) {      Log.d(TAG,"Conversation.Cache.put: conv= " + c + ", hash: "+ c.hashCode());    }    if (sInstance.mCache.contains(c)) {      if (DEBUG) {        dumpCache();      }      throw new IllegalStateException("cache already contains " + c + " threadId: "+ c.mThreadId);    }    sInstance.mCache.add(c);  }}  }
class C{  public CharacterIterator(DBTransaction transaction,boolean transform) throws SQLException {  this.transaction=transaction;  this.transform=transform;  final String query="select object_id from characters order by object_id";  logger.debug("iterator is executing query " + query);  result=transaction.query(query,null);}  }
class C{  public String currentResource(int depth){  SlingHttpServletRequest request=(SlingHttpServletRequest)context.getBindings(ScriptContext.ENGINE_SCOPE).get(SlingBindings.REQUEST);  try {    return JsonObjectCreator.create(request.getResource(),depth).toString();  } catch (  JSONException e) {    throw new TechnicalException("could not get current resource",e);  }}  }
class C{  public boolean read(BinaryFile binFile){  Compression compression;  LookupTable[] lookupTable=new LookupTable[4];  Image image;  int[][] indices=new int[6][6];  int i, j;  boolean allSubframes;  long currentPos;  long lookupOffsetTableOffset;  int lookupTableOffsetRecLen;  long subframeMaskTableOffset;  long[][] subframeOffset=new long[6][6];  long fsave;  int chummedSubframe;  int attributeId;  int attributeParamId;  long attributeRecOffset;  int numAttributeOffsetRecs;  int numSubframesChummed;  if (DEBUG_RPFDETAIL) {    Debug.output("ENTER RPFFRAME.READ");  }  try {    binFile.seek(0);    nitfHeader=new NitfHeader();    if (!nitfHeader.read(binFile))     binFile.seek(0);    header=new RpfHeader();    if (!header.readHeader(binFile))     return false;    if (DEBUG_RPFDETAIL)     Debug.output(header.toString());    if (!header.standardDate.startsWith("199") && !header.standardDate.startsWith("20")) {      Debug.output("RpfFrame.read: Invalid date in header: " + header.standardDate);      return false;    }    binFile.seek(header.locationSectionLocation);    fileSections=new RpfFileSections(binFile);    RpfFileSections.RpfLocationRecord[] loc=fileSections.getLocations(RpfFileSections.FRAME_LOCATION_KEY);    attributes=fileSections.parseAttributes(binFile);    coverage=fileSections.parseCoverageSection(binFile);    colortable=new RpfColortable();    getColors(binFile,colortable);    if (loc[0] == null) {      Debug.output("RpfFrame: No compression section!");      return false;    }    binFile.seek(loc[0].componentLocation);    compression=new Compression(binFile);    if (DEBUG_RPFDETAIL)     Debug.output(compression.toString());    if (loc[2] == null) {      Debug.output("Warning: Can't find compr. lookup subsection in FrameFile:");      Debug.output("   Using alternate computation");      binFile.seek(loc[0].componentLocation + 10);    } else {      if (DEBUG_RPFDETAIL) {        Debug.output("Comp lkup subsect: loc[2].componentLocation(264?): " + loc[2].componentLocation);      }      binFile.seek(loc[2].componentLocation);    }    lookupOffsetTableOffset=(long)binFile.readInteger();    lookupTableOffsetRecLen=(int)binFile.readShort();    if (DEBUG_RPFDETAIL) {      Debug.output("lookupOffsetTableOffset(6): " + lookupOffsetTableOffset);      Debug.output("lookupTableOffsetRecLen(14): " + lookupTableOffsetRecLen);    }    for (i=0; i < 4; i++) {      lookupTable[i]=new LookupTable(binFile);      if (DEBUG_RPFDETAIL) {        Debug.output("Compression lookup table offset record " + i);        Debug.output(lookupTable[i].toString());      }      if (lookupTable[i].records != 4096 || lookupTable[i].values != 4 || lookupTable[i].bitLength != 8) {        Debug.output("RpfFrame: Bad VQ info in compression record");        return false;      }    }    for (i=0; i < 4; i++) {      binFile.seek(loc[2].componentLocation + lookupTable[i].offset);      if (DEBUG_RPFDETAIL) {        currentPos=binFile.getFilePointer();        Debug.output("Read compr. lookup table (4x4096) at position: " + currentPos);      }      for (j=0; j < 4096; j++)       table[i][j]=binFile.readBytes(4,false);    }    if ((Dchum) && (chumVersion > 1)) {      if (loc[6] == null) {        Debug.output("RpfFrame: Can't find ATTRIBUTE_SUBHEADER section!");        return false;      }      if (DEBUG_RPFDETAIL)       Debug.output("ATTRIBUTE SUBHEADER location: " + loc[6].componentLocation);      binFile.seek(loc[6].componentLocation);      numAttributeOffsetRecs=(int)binFile.readShort();      if (DEBUG_RPFDETAIL)       Debug.output("numAttributeOffsetRecs: " + numAttributeOffsetRecs);      if (loc[7] == null) {        Debug.output("RpfFrame: Can't find ATTRIBUTE_SECTION in Frame file");        return false;      }      if (DEBUG_RPFDETAIL)       Debug.output("ATTRIBUTE SECTION location: " + loc[7].componentLocation);      binFile.seek(loc[7].componentLocation);      descCount=0;      for (i=0; i < numAttributeOffsetRecs; i++) {        attributeId=(int)binFile.readShort();        attributeParamId=binFile.read();        binFile.read();        attributeRecOffset=(long)binFile.readInteger();        if ((attributeId == 24) && (attributeParamId == 4)) {          fsave=binFile.getFilePointer();          binFile.seek(loc[7].componentLocation + attributeRecOffset);          numSubframesChummed=(int)binFile.readShort();          if (DEBUG_RPFDETAIL) {            Debug.output("n_attrib_chummedSubframe: " + numSubframesChummed);          }          for (j=0; j < numSubframesChummed; j++) {            chummedSubframe=(int)binFile.readShort();            if (DEBUG_RPFDETAIL) {              Debug.output("chummedSubframe: " + chummedSubframe);            }            chummed[chummedSubframe / 6][chummedSubframe % 6]=true;          }          binFile.seek(fsave);        }        if ((attributeId == 24) && (attributeParamId == 3)) {          fsave=binFile.getFilePointer();          binFile.seek(loc[7].componentLocation + attributeRecOffset);          descriptorDates[descCount]=binFile.readFixedLengthString(8);          if (DEBUG_RPFDETAIL)           Debug.output("descriptorDate: " + descriptorDates[descCount]);          binFile.seek(fsave);        }        if ((attributeId == 24) && (attributeParamId == 6)) {          fsave=binFile.getFilePointer();          binFile.seek(loc[7].componentLocation + attributeRecOffset);          numCharsInDesc=(int)binFile.readShort();          if (DEBUG_RPFDETAIL) {            Debug.output("Prepare to fread descriptors[descCount]");            Debug.output("RpfFrame.read: descCount: " + descCount);          }          descriptors[descCount]=binFile.readFixedLengthString(numCharsInDesc);          if (DEBUG_RPFDETAIL) {            Debug.output("descriptors[descCount]: " + descriptors[descCount]);          }          descCount++;          binFile.seek(fsave);        }      }    }    if (DEBUG_RPFDETAIL) {      Debug.output("Image descr. subheader location: loc[1].componentLocation(68576?): " + loc[1].componentLocation);    }    binFile.seek(loc[1].componentLocation);    image=new Image(binFile);    subframeMaskTableOffset=binFile.readInteger();    if (DEBUG_RPFDETAIL) {      Debug.output(image.toString());      Debug.output("subframeMaskTableOffset: " + subframeMaskTableOffset);    }    if (subframeMaskTableOffset == 0) {      Debug.error("RpfFrame.read(): subframeMaskTableOffset==0.");      return false;    }    if (subframeMaskTableOffset == 0xFFFFFFFF)     allSubframes=true; else     allSubframes=false;    if (Debug.debugging("rpfframe")) {      Debug.output("allSubframes: " + allSubframes);    }    if (!allSubframes) {      if (loc[5] == null) {        Debug.error("RpfFrame.read(): Can't find MASK_SUBSECTION section in Frame file");        return false;      }      if (DEBUG_RPFDETAIL) {        Debug.output("MASK SUBSECTION location: " + loc[5].componentLocation);      }      binFile.seek(loc[5].componentLocation + subframeMaskTableOffset);      for (i=0; i < 6; i++) {        for (j=0; j < 6; j++) {          subframeOffset[i][j]=(long)binFile.readInteger();          if (subframeOffset[i][j] == 0xFFFFFFFF)           masked[i][j]=true;          if (DEBUG_RPFDETAIL) {            Debug.output("i:" + i + ", j:"+ j+ ", masked[i][j]: "+ masked[i][j]);          }        }      }    }    if (image.vertSubframes != 6 || image.horizSubframes != 6) {      Debug.output("Not 6x6 subframes per frame: must be masked.");    }    if (loc[4] == null) {      Debug.error("RpfFrame.read(): Can't find IMAGE_DISPLAY_PARAM_SUBHEADER section!");      return false;    }    if (DEBUG_RPFDETAIL) {      Debug.output("IMAGE Display params subheader location: " + loc[4].componentLocation);    }    binFile.seek(loc[4].componentLocation);    if (loc[3] == null) {      Debug.output("WARNING: Can't find Image spatial data subsection in FrameFile:");      Debug.output("   Using alternate computation");      binFile.seek(loc[4].componentLocation + 14);    } else {      currentPos=binFile.getFilePointer();      if (DEBUG_RPFDETAIL) {        Debug.output("Current frame file position(68595?): " + currentPos);        Debug.output("Image spatial data subsect: loc[3](68609?): " + loc[3].componentLocation);      }      binFile.seek(loc[3].componentLocation);    }    for (i=0; i < 6; i++) {      for (j=0; j < 6; j++) {        indices[i][j]=i * 6 + j;        if (!masked[i][j]) {          compressedSubframe[i][j]=binFile.readBytes(6144,false);          if (DEBUG_RPFDETAIL)           Debug.output(" i:" + i + ", j:"+ j+ ", read image data. rc(6144):"+ compressedSubframe[i][j].length);        } else         compressedSubframe[i][j]=new byte[6144];      }    }  } catch (  IOException e) {    Debug.error("RpfFrame: read(): File IO Error!\n" + e);    return false;  }catch (  FormatException f) {    Debug.error("RpfFrame: read(): File IO Format error!" + f);    return false;  }  if (DEBUG_RPFDETAIL) {    Debug.output("LEAVE RPFFRAME.READ");  }  valid=true;  return valid;}  }
class C{  public NsHead(){}  }
class C{  public PagelinksParser(InputStream inputStream) throws IOException {  init(inputStream);}  }
class C{  @Deprecated public void register(Process process,String name){}  }
class C{  public boolean isEnablePhoneBookImport(){  return enablePhoneBookImport;}  }
class C{  static ConstantSize dluX(int value){  return new ConstantSize(value,DLUX);}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public void receiveAdditionalData(EvolutionState state,DataInputStream dataIn){}  }
class C{  public synchronized void goToChild(int pos) throws Exception {  if ((m_Current.children == null) || (pos < 0) || (pos >= m_Current.children.size())) {    throw new Exception("Position out of range or leaf reached");  }  m_Current=m_Current.children.elementAt(pos);}  }
class C{  private void layoutPanel(){  setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  setLayout(new BorderLayout());  add(new LabelledItem("Distribution: ",cbDistribution),BorderLayout.NORTH);  add(cardPanel,BorderLayout.CENTER);  cbItemListener.itemStateChanged(new ItemEvent(cbDistribution,ItemEvent.SELECTED,cardPanel,ItemEvent.ITEM_STATE_CHANGED));  repaint();  revalidate();}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public static void installMouseInputAdapterOnAllComponents(MouseInputAdapter m,Container c){  c.addMouseListener(m);  c.addMouseMotionListener(m);  Component[] components=c.getComponents();  for (int i=0; i < components.length; i++) {    if (components[i] instanceof Container) {      MouseInputAdapterInstaller.installMouseInputAdapterOnAllComponents(m,(Container)components[i]);    } else {      c.addMouseListener(m);      c.addMouseMotionListener(m);    }  }}  }
class C{  public Optional<T> reduce(BiFunction<T,T,T> accumulator){  boolean foundAny=false;  T result=null;  while (iterator.hasNext()) {    final T value=iterator.next();    if (!foundAny) {      foundAny=true;      result=value;    } else {      result=accumulator.apply(result,value);    }  }  return foundAny ? Optional.of(result) : Optional.<T>empty();}  }
class C{  @Override @Inline public void release(Address first){  ((FreeListPageResource)pr).releasePages(first);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.REACTION__CHECK:    return basicSetCheck(null,msgs);case SexecPackage.REACTION__EFFECT:  return basicSetEffect(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void init(boolean forEncryption,CipherParameters param){  SecureRandom providedRandom=null;  if (param instanceof ParametersWithRandom) {    ParametersWithRandom rParam=(ParametersWithRandom)param;    key=(CramerShoupKeyParameters)rParam.getParameters();    providedRandom=rParam.getRandom();  } else {    key=(CramerShoupKeyParameters)param;  }  this.random=initSecureRandom(forEncryption,providedRandom);  this.forEncryption=forEncryption;}  }
class C{  public BusinessObjectDataEntity createBusinessObjectDataEntity(BusinessObjectFormatEntity businessObjectFormatEntity,String businessObjectDataPartitionValue,Integer businessObjectDataVersion,Boolean businessObjectDataLatestVersion,BusinessObjectDataStatusEntity businessObjectDataStatusEntity){  return createBusinessObjectDataEntity(businessObjectFormatEntity,businessObjectDataPartitionValue,AbstractDaoTest.NO_SUBPARTITION_VALUES,businessObjectDataVersion,businessObjectDataLatestVersion,businessObjectDataStatusEntity);}  }
class C{  public final int degree(Coords d){  return (int)Math.round((180 / Math.PI) * radian(d));}  }
class C{  @Override public void run(){  amIActive=true;  String NIRHeader=null;  String RedHeader=null;  String outputHeader=null;  int row, col, x, y;  double[] NIRVal;  double[] redVal;  float progress=0;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      NIRHeader=args[i];    } else     if (i == 1) {      RedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((NIRHeader == null) || (RedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster NIR=new WhiteboxRaster(NIRHeader,"r");    int rows=NIR.getNumberRows();    int cols=NIR.getNumberColumns();    double noData=NIR.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(RedHeader,"r");    if (rows != red.getNumberRows() || cols != red.getNumberColumns()) {      showFeedback("The two input images must have the same number of rows and columns.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",NIRHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(NIR.getPreferredPalette());    for (row=0; row < rows; row++) {      NIRVal=NIR.getRowValues(row);      redVal=red.getRowValues(row);      for (col=0; col < cols; col++) {        if (NIRVal[col] != noData && redVal[col] != noData) {          if ((NIRVal[col] + redVal[col]) != 0) {            outputFile.setValue(row,col,(NIRVal[col] - redVal[col]) / (NIRVal[col] + redVal[col]));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    NIR.close();    red.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static <T>boolean isDescendantOf(TreeDef.Parented<T> treeDef,T child,T parent){  T candidateParent=treeDef.parentOf(child);  while (candidateParent != null) {    if (candidateParent.equals(parent)) {      return true;    } else {      candidateParent=treeDef.parentOf(candidateParent);    }  }  return false;}  }
class C{  public Element svgElement(String name){  return SVGUtil.svgElement(document,name);}  }
class C{  @Override public synchronized void stop(){  if (mLocationListeners != null) {    for (    LocationListener listener : mLocationListeners) {      unregisterListener(listener);    }    mLocationListeners=null;  }  if (mTimer != null) {    mTimer.cancel();    mTimer=null;  }}  }
class C{  public EnglishAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  @Override public void onListTouch(MotionEvent event){}  }
class C{  private static String escapeJSON(final String text){  final StringBuilder builder=new StringBuilder();  builder.append('"');  for (int index=0; index < text.length(); index++) {    final char chr=text.charAt(index);switch (chr) {case '"':case '\\':      builder.append('\\');    builder.append(chr);  break;case '\b':builder.append("\\b");break;case '\t':builder.append("\\t");break;case '\n':builder.append("\\n");break;case '\r':builder.append("\\r");break;default :if (chr < ' ') {final String t="000" + Integer.toHexString(chr);builder.append("\\u" + t.substring(t.length() - 4));} else {builder.append(chr);}break;}}builder.append('"');return builder.toString();}  }
class C{  public Node(Animator animation){  this.animation=animation;}  }
class C{  public static int compute2(int x){  int loops=(x >>> 4) & 7;  while (loops-- > 0) {    x=(x * 2147483647) % 16807;  }  return x;}  }
class C{  @Override public int compareTo(final GroupedRow o){  if (o == null) {    return 1;  }  return new CompareToBuilder().append(group,o.group).append(key,o.key).append(value,o.value).toComparison();}  }
class C{  private static void applyDataInternal0(int id,Array<VariableInfo> mTmpVariables,PropertyBindInfo info,ViewHelper mViewHelper,IDataResolver mDataResolver,boolean checkStrictly,SparseArray<ListenerImplContext> mListenerMap,EventParseCaretaker caretaker){  if (!checkStrictly || containsAll(mTmpVariables,info.referVariables)) {    if (!checkStrictly) {      if (sDebug) {        String msg="the property [ id = " + id + " ,name = "+ info.propertyName+ "] defined in xml may couldn't be apply , you should be careful!";        Logger.d(TAG,msg);      }    }    VariableInfo varInfo;    for (int j=0, len=mTmpVariables.size; j < len; j++) {      varInfo=mTmpVariables.get(j);      mDataResolver.putObject(varInfo.variableName,varInfo.data);    }    applyDataReally(id,0,info,mViewHelper,mDataResolver,mListenerMap,caretaker);  } else {    String msg="the property [ id = " + id + " ,name = "+ info.propertyName+ "] defined in xml can't be apply ,caused by some data mapping is missing !";    throw new DataBindException(msg);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.CONFIGURATION_SOURCE__PROPERTY:    setProperty((Property)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void addNote(String noteId){synchronized (registry) {    if (registry.get(noteId) == null) {      registry.put(noteId,new HashMap<String,Map<String,String>>());    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.485 -0500",hash_original_method="0E268DF7E77D68AC976AB928986A09DD",hash_generated_method="2BECFD958CA5727B8248577B0B44C684") public static String[] appendSelectionArgs(String[] originalValues,String[] newValues){  if (originalValues == null || originalValues.length == 0) {    return newValues;  }  String[] result=new String[originalValues.length + newValues.length];  System.arraycopy(originalValues,0,result,0,originalValues.length);  System.arraycopy(newValues,0,result,originalValues.length,newValues.length);  return result;}  }
class C{  public static String saveChartAsJPEG(JFreeChart chart,int width,int height,HttpSession session) throws IOException {  return ServletUtilities.saveChartAsJPEG(chart,width,height,null,session);}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") @Override public void run(){  while (true) {    try {      if (!cleanUp(queue.remove())) {        break;      }    } catch (    InterruptedException e) {    }  }}  }
class C{  public EmergingEpidemicModel(String name,Parameter growthRateParameter,Parameter generationTimeParameter,Parameter generationShapeParameter,Parameter offspringDispersionParameter,TreeModel treeModel,Type units){  super(name);  exponentialGrowth=new ExponentialGrowth(units);  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,0.0,1));  this.generationTimeParameter=generationTimeParameter;  addVariable(generationTimeParameter);  generationTimeParameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,0.0,1));  this.generationShapeParameter=generationShapeParameter;  addVariable(generationShapeParameter);  generationShapeParameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,0.0,1));  this.offspringDispersionParameter=offspringDispersionParameter;  addVariable(offspringDispersionParameter);  offspringDispersionParameter.addBounds(new Parameter.DefaultBounds(Double.MAX_VALUE,0.0,1));  this.treeModel=treeModel;  addModel(treeModel);  addStatistic(new N0Statistic("N0"));  addStatistic(new RStatistic("R"));  setUnits(units);}  }
class C{  static <T>T fieldIsPresent(Optional<T> object,String name){  if (!object.isPresent()) {    throw new MissingField(name,"must be present");  }  return object.get();}  }
class C{  public void testDelete(){  File file=FileTesting.createFile();  MappedBuffer buffer=MappedBuffer.allocate(file,16);  buffer.writeLong(10).writeLong(11).flip();  assertEquals(buffer.readLong(),10);  assertEquals(buffer.readLong(),11);  assertTrue(Files.exists(file.toPath()));  buffer.delete();  assertFalse(Files.exists(file.toPath()));}  }
class C{  public void testNumbersAsJSONStrings() throws IOException {  JsonFactory jf=new JsonFactory();  assertEquals("[1,2,1.25,2.25,3001,0.5,-1]",_writeNumbers(jf));  jf.configure(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS,true);  assertEquals("[\"1\",\"2\",\"1.25\",\"2.25\",\"3001\",\"0.5\",\"-1\"]",_writeNumbers(jf));}  }
class C{  public long distanceSquared(int x,int y){  int dx=this.x - x;  int dy=this.y - y;  return dx * dx + dy * dy;}  }
class C{  public CommonStatsFlags fieldDataFields(String... fieldDataFields){  this.fieldDataFields=fieldDataFields;  return this;}  }
class C{  void displayPrincipalDialog(boolean editPolicyEntry,boolean edit){  PolicyParser.PrincipalEntry editMe=null;  TaggedList prinList=(TaggedList)getComponent(PE_PRIN_LIST);  int prinIndex=prinList.getSelectedIndex();  if (edit) {    editMe=(PolicyParser.PrincipalEntry)prinList.getObject(prinIndex);  }  ToolDialog newTD=new ToolDialog(PolicyTool.getMessage("Principals"),tool,tw,true);  newTD.addWindowListener(new ChildWindowListener(newTD));  Point location=getLocationOnScreen();  newTD.setLayout(new GridBagLayout());  newTD.setResizable(true);  JLabel label=(edit ? new JLabel(PolicyTool.getMessage(".Edit.Principal.")) : new JLabel(PolicyTool.getMessage(".Add.New.Principal.")));  tw.addNewComponent(newTD,label,PRD_DESC_LABEL,0,0,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.TOP_BOTTOM_PADDING);  JComboBox choice=new JComboBox();  choice.addItem(PRIN_TYPE);  choice.getAccessibleContext().setAccessibleName(PRIN_TYPE);  for (int i=0; i < PRIN_ARRAY.size(); i++) {    Prin next=PRIN_ARRAY.get(i);    choice.addItem(next.CLASS);  }  if (edit) {    if (PolicyParser.PrincipalEntry.WILDCARD_CLASS.equals(editMe.getPrincipalClass())) {      choice.setSelectedItem(PRIN_TYPE);    } else {      Prin inputPrin=getPrin(editMe.getPrincipalClass(),true);      if (inputPrin != null) {        choice.setSelectedItem(inputPrin.CLASS);      }    }  }  choice.addItemListener(new PrincipalTypeMenuListener(newTD));  tw.addNewComponent(newTD,choice,PRD_PRIN_CHOICE,0,1,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_PADDING);  JTextField tf;  tf=(edit ? new JTextField(editMe.getDisplayClass(),30) : new JTextField(30));  tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));  tf.getAccessibleContext().setAccessibleName(PRIN_TYPE);  tw.addNewComponent(newTD,tf,PRD_PRIN_TEXTFIELD,1,1,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_PADDING);  label=new JLabel(PRIN_NAME);  tf=(edit ? new JTextField(editMe.getDisplayName(),40) : new JTextField(40));  tf.setPreferredSize(new Dimension(tf.getPreferredSize().width,TEXTFIELD_HEIGHT));  tf.getAccessibleContext().setAccessibleName(PRIN_NAME);  tw.addNewComponent(newTD,label,PRD_NAME_LABEL,0,2,1,1,0.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_PADDING);  tw.addNewComponent(newTD,tf,PRD_NAME_TEXTFIELD,1,2,1,1,1.0,0.0,GridBagConstraints.BOTH,ToolWindow.LR_PADDING);  JButton okButton=new JButton(PolicyTool.getMessage("OK"));  okButton.addActionListener(new NewPolicyPrinOKButtonListener(tool,tw,this,newTD,edit));  tw.addNewComponent(newTD,okButton,PRD_OK_BUTTON,0,3,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.TOP_BOTTOM_PADDING);  JButton cancelButton=new JButton(PolicyTool.getMessage("Cancel"));  ActionListener cancelListener=new CancelButtonListener(newTD);  cancelButton.addActionListener(cancelListener);  tw.addNewComponent(newTD,cancelButton,PRD_CANCEL_BUTTON,1,3,1,1,0.0,0.0,GridBagConstraints.VERTICAL,ToolWindow.TOP_BOTTOM_PADDING);  newTD.getRootPane().setDefaultButton(okButton);  newTD.getRootPane().registerKeyboardAction(cancelListener,escKey,JComponent.WHEN_IN_FOCUSED_WINDOW);  newTD.pack();  newTD.setLocationRelativeTo(tw);  newTD.setVisible(true);}  }
class C{  public PolicyFile(){  apf=new sun.security.provider.AuthPolicyFile();}  }
class C{  public void testConnectorSecuritySettingsSSL_errors_true(){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.ssl.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ServerRuntimeException e) {    assertTrue("An exception was thrown, that's expected !",true);  }catch (  ConfigurationException e) {    assertFalse("That should not be this kind of Exception being thrown",true);  }  assertEquals(null,authInfo);  resetSecuritySystemProperties();  authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.ssl2.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ServerRuntimeException e) {    assertTrue("An exception was thrown, that's expected !",true);  }catch (  ConfigurationException e) {    assertFalse("That should not be this kind of Exception being thrown",true);  }  assertEquals(null,authInfo);}  }
class C{  public static void showReal_2D(String format,int n1,int n2,double[] x,String title){  System.out.println(title);  System.out.println("-------------------");  for (int i=0; i < n1; i++) {    for (int j=0; j < n2; j++) {      if (Math.abs(x[i * n2 + j]) < 5e-5) {        System.out.print("0\t");      } else {        System.out.print(String.format(format,x[i * n2 + j]) + "\t");      }    }    System.out.println();  }  System.out.println();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String newRes=getString(stack);  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).pushResolutionChange(newRes);  }  return null;}  }
class C{  public static int installSilent(Context context,String filePath,String pmParams){  if (filePath == null || filePath.length() == 0) {    return INSTALL_FAILED_INVALID_URI;  }  File file=new File(filePath);  if (file.length() <= 0 || !file.exists() || !file.isFile()) {    return INSTALL_FAILED_INVALID_URI;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm install ").append(pmParams == null ? "" : pmParams).append(" ").append(filePath.replace(" ","\\ "));  ShellUtils.CommandResult commandResult=ShellUtils.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return INSTALL_SUCCEEDED;  }  Log.e(TAG,new StringBuilder().append("installSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return INSTALL_FAILED_OTHER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_ALREADY_EXISTS")) {    return INSTALL_FAILED_ALREADY_EXISTS;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_APK")) {    return INSTALL_FAILED_INVALID_APK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_URI")) {    return INSTALL_FAILED_INVALID_URI;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INSUFFICIENT_STORAGE")) {    return INSTALL_FAILED_INSUFFICIENT_STORAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DUPLICATE_PACKAGE")) {    return INSTALL_FAILED_DUPLICATE_PACKAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NO_SHARED_USER")) {    return INSTALL_FAILED_NO_SHARED_USER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UPDATE_INCOMPATIBLE")) {    return INSTALL_FAILED_UPDATE_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_SHARED_USER_INCOMPATIBLE")) {    return INSTALL_FAILED_SHARED_USER_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_SHARED_LIBRARY")) {    return INSTALL_FAILED_MISSING_SHARED_LIBRARY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_REPLACE_COULDNT_DELETE")) {    return INSTALL_FAILED_REPLACE_COULDNT_DELETE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DEXOPT")) {    return INSTALL_FAILED_DEXOPT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_OLDER_SDK")) {    return INSTALL_FAILED_OLDER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONFLICTING_PROVIDER")) {    return INSTALL_FAILED_CONFLICTING_PROVIDER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NEWER_SDK")) {    return INSTALL_FAILED_NEWER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_TEST_ONLY")) {    return INSTALL_FAILED_TEST_ONLY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CPU_ABI_INCOMPATIBLE")) {    return INSTALL_FAILED_CPU_ABI_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_FEATURE")) {    return INSTALL_FAILED_MISSING_FEATURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONTAINER_ERROR")) {    return INSTALL_FAILED_CONTAINER_ERROR;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_INSTALL_LOCATION")) {    return INSTALL_FAILED_INVALID_INSTALL_LOCATION;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MEDIA_UNAVAILABLE")) {    return INSTALL_FAILED_MEDIA_UNAVAILABLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_TIMEOUT")) {    return INSTALL_FAILED_VERIFICATION_TIMEOUT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_FAILURE")) {    return INSTALL_FAILED_VERIFICATION_FAILURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_PACKAGE_CHANGED")) {    return INSTALL_FAILED_PACKAGE_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UID_CHANGED")) {    return INSTALL_FAILED_UID_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NOT_APK")) {    return INSTALL_PARSE_FAILED_NOT_APK;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_MANIFEST")) {    return INSTALL_PARSE_FAILED_BAD_MANIFEST;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION")) {    return INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NO_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_NO_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING")) {    return INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME")) {    return INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID")) {    return INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_MALFORMED")) {    return INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_EMPTY")) {    return INSTALL_PARSE_FAILED_MANIFEST_EMPTY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INTERNAL_ERROR")) {    return INSTALL_FAILED_INTERNAL_ERROR;  }  return INSTALL_FAILED_OTHER;}  }
class C{  public static IStatus createStatus(int severity,int code,String message,Throwable exception){  return new Status(severity,GWTPlugin.PLUGIN_ID,code,message,exception);}  }
class C{  private void log(LogLevel eventLevel,String message,Object param){switch (eventLevel) {case TRACE:    logger.trace(message,param);  return;case DEBUG:logger.debug(message,param);return;case INFO:logger.info(message,param);return;case WARN:logger.warn(message,param);return;case ERROR:logger.error(message,param);return;default :return;}}  }
class C{  @Deprecated public void delete(String id){  client.delete(String.class,getIdUrl(),id);}  }
class C{  public void startActivities(Bundle options,UserHandle userHandle){  if (mIntents.isEmpty()) {    throw new IllegalStateException("No intents added to TaskStackBuilder; cannot startActivities");  }  mSourceContext.startActivitiesAsUser(getIntents(),options,userHandle);}  }
class C{  private void tryReduceLevel(){  HeadIndex<E> h=head;  HeadIndex<E> d;  HeadIndex<E> e;  if (h.level > 3 && (d=(HeadIndex<E>)h.down) != null && (e=(HeadIndex<E>)d.down) != null && e.right == null && d.right == null && h.right == null && casHead(h,d) && h.right != null)   casHead(d,h);}  }
class C{  public double normalDistanceSquared(final double x,final double y,final double z,final Membership... bounds){  final double normal=normalDistance(x,y,z,bounds);  if (normal == Double.POSITIVE_INFINITY)   return normal;  return normal * normal;}  }
class C{  public boolean isEscapeText(){  return escapeText;}  }
class C{  public CHelpSaveCheckbox(final String text,final IHelpInformation information){  super(text);  m_information=information;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public boolean hasMatchingWithCapacity(FluidStack stack){  if (!isEmpty()) {    if (!hasMatching(stack))     return false;  }  return getAvailableCapacity() >= stack.amount;}  }
class C{  private boolean checkMethodReferenceInference(MemberReferenceTree memberReferenceTree,AnnotatedExecutableType memberReferenceType,AnnotatedExecutableType overridden,AnnotatedTypeMirror overridingType){  if (overridden.getTypeVariables().size() == 0) {    boolean requiresInference=false;    if (memberReferenceType.getTypeVariables().size() > 0 && (memberReferenceTree.getTypeArguments() == null || memberReferenceTree.getTypeArguments().size() == 0)) {      requiresInference=true;    } else     if (overridingType.getKind() == TypeKind.DECLARED && ((AnnotatedDeclaredType)overridingType).getTypeArguments().size() > 0) {      if (memberReferenceTree.getQualifierExpression().getKind() != Tree.Kind.PARAMETERIZED_TYPE) {        requiresInference=true;      } else       if (((AnnotatedDeclaredType)overridingType).getTypeArguments().size() != ((ParameterizedTypeTree)memberReferenceTree.getQualifierExpression()).getTypeArguments().size()) {        requiresInference=true;      }    }    if (requiresInference) {      if (!typeArgumentInferenceCheck) {        checker.report(Result.warning("methodref.inference.unimplemented"),memberReferenceTree);        typeArgumentInferenceCheck=true;      }      return true;    }  }  return false;}  }
class C{  int size(){  return size;}  }
class C{  private void writeLogToFile(File file){  try {    FileWriter writer=new FileWriter(file);    writer.write(this.textArea.getText());    writer.close();  } catch (  IOException ex) {    JOptionPane.showMessageDialog(desktop,"Error while trying to write to the selected file.");  }}  }
class C{  public WordDataReader(boolean isTrainReading){  this.isTrainReading=isTrainReading;}  }
class C{  public SWFTagTypes tagDefineSprite(int id) throws IOException {  if (tags != null) {    return tags.tagDefineSprite(id);  }  return null;}  }
class C{  public final void testMaxLengthWithContextParameter(){  assertNotNull(Validators.maxLength(getContext(),1));}  }
class C{  public boolean hasPrevious(){  checkTokenized();  return tokenPos > 0;}  }
class C{  private void rowOpTransform2(Matrix M,int low,int high,double x,int k,double y,boolean notlast,double z,double r,double q){  double p;  for (int j=low; j <= high; j++) {    p=M.get(k,j) + q * M.get(k + 1,j);    if (notlast) {      p=p + r * M.get(k + 2,j);      M.set(k + 2,j,M.get(k + 2,j) - p * z);    }    M.increment(k,j,-p * x);    M.increment(k + 1,j,-p * y);  }}  }
class C{  static private void assertNamedSubqueryForEachInclude(final AST2BOpContext context,final NamedSubqueriesNode namedSubqueries,final NamedSubqueryInclude[] allIncludes){  for (  NamedSubqueryInclude anInclude : allIncludes) {    final String namedSet=anInclude.getName();    if (namedSet == null || namedSet.trim().length() == 0)     throw new RuntimeException("Missing or illegal name for include.");    boolean found=false;    for (    NamedSubqueryRoot aNamedSubquery : namedSubqueries) {      if (aNamedSubquery.getName().equals(namedSet)) {        found=true;        break;      }    }    if (!found) {      try {        context.getSolutionSetStats(namedSet);      } catch (      RuntimeException e) {        throw new RuntimeException("No subquery produces the solution set: " + namedSet,e);      }    }  }}  }
class C{  public void undo(){}  }
class C{  public static XObject eval(Node contextNode,String str,PrefixResolver prefixResolver) throws TransformerException {  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  XPathContext xpathSupport=new XPathContext(false);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  public boolean hasActiveTasks(){  boolean doesHaveTasks=false;synchronized (asyncTasks) {    if (asyncTasks.isEmpty())     return false;    Iterator<RunnableScheduledFuture<?>> i=asyncTasks.iterator();    while (i.hasNext()) {      RunnableScheduledFuture<?> task=i.next();      if (task.isDone())       i.remove(); else       doesHaveTasks=true;    }  }  return doesHaveTasks;}  }
class C{  public static void showAddressOnMap(Context mContext,String address){  address=address.replace(' ','+');  Intent geoIntent=new Intent(Intent.ACTION_VIEW,Uri.parse("geo:0,0?q=" + address));  mContext.startActivity(geoIntent);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public MutableBoolean(final boolean value){  super();  this.value=value;}  }
class C{  protected SVGOMTitleElement(){}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject expr1=m_left.execute(xctxt);  if (expr1.bool()) {    XObject expr2=m_right.execute(xctxt);    return expr2.bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE;  } else   return XBoolean.S_FALSE;}  }
class C{  public String write(final SimpleProtein simpleProtein,final boolean standalone) throws IOException, TemplateException {  if (simpleProtein != null) {    checkEntryHierarchy();    final SimpleHash model=buildModelMap(simpleProtein,entryHierarchy,standalone);    Writer writer=null;    try {      StringWriter stringWriter=new StringWriter();      writer=new BufferedWriter(stringWriter);      final Template temp=freeMarkerConfig.getTemplate(freeMarkerTemplate);      temp.process(model,writer);      writer.flush();      return stringWriter.toString();    }  finally {      if (writer != null) {        writer.close();      }    }  }  return null;}  }
class C{  public GitlabSSHKey createSSHKey(Integer targetUserId,String title,String key) throws IOException {  Query query=new Query().append("title",title).append("key",key);  String tailUrl=GitlabUser.USERS_URL + "/" + targetUserId+ GitlabSSHKey.KEYS_URL+ query.toString();  return dispatch().to(tailUrl,GitlabSSHKey.class);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void verifyData(byte[] masterSecret,boolean isClient,byte[] handshakeHash) throws HandshakeException {  byte[] myVerifyData=getVerifyData(masterSecret,isClient,handshakeHash);  if (!Arrays.equals(myVerifyData,verifyData)) {    StringBuilder msg=new StringBuilder("Verification of peer's [").append(getPeer()).append("] FINISHED message failed");    if (LOG.isLoggable(Level.FINEST)) {      msg.append(System.lineSeparator()).append("Expected: ").append(ByteArrayUtils.toHexString(myVerifyData));      msg.append(System.lineSeparator()).append("Received: ").append(ByteArrayUtils.toHexString(verifyData));    }    LOG.log(Level.FINE,msg.toString());    AlertMessage alert=new AlertMessage(AlertLevel.FATAL,AlertDescription.HANDSHAKE_FAILURE,getPeer());    throw new HandshakeException("Verification of FINISHED message failed",alert);  }}  }
class C{  public Vertex mostConscious(Primitive type){  return mostConscious(this.network.createVertex(type));}  }
class C{  public static FilePathUnstable register(){  FilePath.register(INSTANCE);  return INSTANCE;}  }
class C{  public void arrayLength(){  mv.visitInsn(Opcodes.ARRAYLENGTH);}  }
class C{  public char reverseMap(short glyphID){  for (int i=0; i < glyphIndex.length; i++) {    if ((glyphIndex[i] & 0xff) == glyphID) {      return (char)i;    }  }  return (char)0;}  }
class C{  public MLet(){  this(new URL[0]);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  NodeList childList;  Node childNode;  Node newChild;  Node memberNode;  String memberName;  java.util.List refreshedActual=new java.util.ArrayList();  java.util.List actual=new java.util.ArrayList();  int nodeType;  java.util.List expected=new java.util.ArrayList();  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  expected.add("em");  Node appendedChild;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  childNode=elementList.item(1);  childList=((Element)childNode).getElementsByTagName("*");  newChild=childList.item(0);  appendedChild=childNode.appendChild(newChild);  for (int indexN10085=0; indexN10085 < childList.getLength(); indexN10085++) {    memberNode=(Node)childList.item(indexN10085);    memberName=memberNode.getNodeName();    actual.add(memberName);  }  assertEqualsAutoCase("element","liveByTagName",expected,actual);  childList=childNode.getChildNodes();  for (int indexN1009C=0; indexN1009C < childList.getLength(); indexN1009C++) {    memberNode=(Node)childList.item(indexN1009C);    nodeType=(int)memberNode.getNodeType();    if (equals(1,nodeType)) {      memberName=memberNode.getNodeName();      refreshedActual.add(memberName);    }  }  assertEqualsAutoCase("element","refreshedChildNodes",expected,refreshedActual);}  }
class C{  public TtmlStyle chain(TtmlStyle ancestor){  return inherit(ancestor,true);}  }
class C{  public Object[] toArray(){  fullyLock();  try {    int size=count.get();    Object[] a=new Object[size];    int k=0;    for (Node<E> p=head.next; p != null; p=p.next)     a[k++]=p.item;    return a;  }  finally {    fullyUnlock();  }}  }
class C{  public static LocalDispatcher makeWebappDispatcher(ServletContext servletContext,Delegator delegator){  if (delegator == null) {    Debug.logError("[ContextFilter.init] ERROR: delegator not defined.",module);    return null;  }  String dispatcherName=servletContext.getInitParameter("localDispatcherName");  if (dispatcherName == null) {    Debug.logError("No localDispatcherName specified in the web.xml file",module);    dispatcherName=delegator.getDelegatorName();  }  LocalDispatcher dispatcher=ServiceContainer.getLocalDispatcher(dispatcherName,delegator);  if (dispatcher == null) {    Debug.logError("[ContextFilter.init] ERROR: dispatcher could not be initialized.",module);  }  return dispatcher;}  }
class C{  @Override public double classifyInstance(Instance inst) throws Exception {  inst=filterInstance(inst);  Matrix k=new Matrix(m_NumTrain,1);  for (int i=0; i < m_NumTrain; i++) {    k.set(i,0,m_kernel.eval(-1,i,inst));  }  double result=k.transpose().times(m_t).get(0,0) + m_avg_target;  result=(result - m_Blin) / m_Alin;  return result;}  }
class C{  public int add(GL10 gl,Drawable background,String text,Paint textPaint,int minWidth,int minHeight){  checkState(STATE_ADDING,STATE_ADDING);  boolean drawBackground=background != null;  boolean drawText=(text != null) && (textPaint != null);  Rect padding=new Rect();  if (drawBackground) {    background.getPadding(padding);    minWidth=Math.max(minWidth,background.getMinimumWidth());    minHeight=Math.max(minHeight,background.getMinimumHeight());  }  int ascent=0;  int descent=0;  int measuredTextWidth=0;  if (drawText) {    ascent=(int)Math.ceil(-textPaint.ascent());    descent=(int)Math.ceil(textPaint.descent());    measuredTextWidth=(int)Math.ceil(textPaint.measureText(text));  }  int textHeight=ascent + descent;  int textWidth=Math.min(mStrikeWidth,measuredTextWidth);  int padHeight=padding.top + padding.bottom;  int padWidth=padding.left + padding.right;  int height=Math.max(minHeight,textHeight + padHeight);  int width=Math.max(minWidth,textWidth + padWidth);  int effectiveTextHeight=height - padHeight;  int effectiveTextWidth=width - padWidth;  int centerOffsetHeight=(effectiveTextHeight - textHeight) / 2;  int centerOffsetWidth=(effectiveTextWidth - textWidth) / 2;  int u=mU;  int v=mV;  int lineHeight=mLineHeight;  if (width > mStrikeWidth) {    width=mStrikeWidth;  }  if (u + width > mStrikeWidth) {    u=0;    v+=lineHeight;    lineHeight=0;  }  lineHeight=Math.max(lineHeight,height);  if (v + lineHeight > mStrikeHeight) {    throw new IllegalArgumentException("Out of texture space.");  }  int u2=u + width;  int vBase=v + ascent;  int v2=v + height;  if (drawBackground) {    background.setBounds(u,v,u + width,v + height);    background.draw(mCanvas);  }  if (drawText) {    mCanvas.drawText(text,u + padding.left + centerOffsetWidth,vBase + padding.top + centerOffsetHeight,textPaint);  }  mU=u + width;  mV=v;  mLineHeight=lineHeight;  mLabels.add(new Label(width,height,ascent,u,v + height,width,-height));  return mLabels.size() - 1;}  }
class C{  @Override public boolean hasNext(){  if ((maxNumber > -1) && (linesRead >= maxNumber)) {    return false;  }  if (lineRead) {    return !eof;  }  try {    eof=!readLine();  } catch (  IOException e) {    LogService.getGlobal().log(e.getMessage(),LogService.ERROR);    return false;  }  lineRead=true;  return (!eof);}  }
class C{  private View fillUp(int pos,int nextBottom){  int end=mListPadding.top;  while (nextBottom > end && pos >= 0) {    makeAndAddView(pos,getItemBottom(pos),false,false);    pos--;    nextBottom=getItemBottom(pos);  }  mFirstPosition=pos + 1;  return null;}  }
class C{  public void testStemming() throws Exception {  Reader reader=new StringReader("dogs");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("PorterStem").create(stream);  assertTokenStreamContents(stream,new String[]{"dog"});}  }
class C{  protected int MultiplicativeExpr(int addPos) throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if (-1 == addPos)   addPos=opPos;  UnaryExpr();  if (null != m_token) {    if (tokenIs('*')) {      nextToken();      insertOp(addPos,2,OpCodes.OP_MULT);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs("div")) {      nextToken();      insertOp(addPos,2,OpCodes.OP_DIV);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs("mod")) {      nextToken();      insertOp(addPos,2,OpCodes.OP_MOD);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    } else     if (tokenIs("quo")) {      nextToken();      insertOp(addPos,2,OpCodes.OP_QUO);      int opPlusLeftHandLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - addPos;      addPos=MultiplicativeExpr(addPos);      m_ops.setOp(addPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(addPos + opPlusLeftHandLen + 1) + opPlusLeftHandLen);      addPos+=2;    }  }  return addPos;}  }
class C{  public void finalize() throws java.lang.Throwable {  super.finalize();  nodeCount=0;  patternCount=0;  matrixCount=0;  partials=null;  currentPartialsIndices=null;  storedPartialsIndices=null;  states=null;  matrices=null;  currentMatricesIndices=null;  storedMatricesIndices=null;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void connect() throws ReplicatorException, IOException, ConfigurationException {  if (logger.isDebugEnabled())   logger.debug("Connecting to " + host + ":"+ port+ " useSSL="+ useSSL);  try {    InetSocketAddress address=new InetSocketAddress(host,port);    if (address.isUnresolved()) {      throw new THLException("THL connection failure; cannot resolve address: host=" + host + " port="+ port);    }    clientSocket=new ClientSocketWrapper();    clientSocket.setAddress(address);    clientSocket.setUseSSL(useSSL);    if (useSSL) {      if (SecurityHelper.getCiphers() == null) {        SecurityHelper.loadAuthenticationInformation(TUNGSTEN_APPLICATION_NAME.REPLICATOR);      }    }    clientSocket.setConnectTimeout(heartbeatMillis);    clientSocket.setReadTimeout(heartbeatMillis * 10);    clientSocket.connect();  } catch (  IllegalArgumentException e) {    throw new THLException("THL connection failure; address is invalid: host=" + host + " port="+ port);  }  protocol=new Protocol(pluginContext,clientSocket,resetPeriod);  SeqNoRange seqNoRange=protocol.clientHandshake(lastEpochNumber,lastSeqno,heartbeatMillis,lastEventId,remoteLogin,remotePassword);  minSeqNo=seqNoRange.getMinSeqNo();  maxSeqNo=seqNoRange.getMaxSeqNo();  serverCapabilities=protocol.getServerCapabities();}  }
class C{  public void mouseDragged(MouseEvent e){  if (dragger != null) {    if (e.getSource() == splitPane) {      dragger.continueDrag(e.getX(),e.getY());    } else     if (e.getSource() == BasicSplitPaneDivider.this) {      Point ourLoc=getLocation();      dragger.continueDrag(e.getX() + ourLoc.x,e.getY() + ourLoc.y);    } else     if (e.getSource() == hiddenDivider) {      Point hDividerLoc=hiddenDivider.getLocation();      int ourX=e.getX() + hDividerLoc.x;      int ourY=e.getY() + hDividerLoc.y;      dragger.continueDrag(ourX,ourY);    }    e.consume();  }}  }
class C{  public void testSynonyms() throws Exception {  assertQ("test synonyms",req("q","fooaaa","qf","text_sw","mm","100%","defType","edismax"),"*[count(//doc)=1]");}  }
class C{  public PriorityQueue(SortedSet<? extends E> c){  getFromSortedSet(c);}  }
