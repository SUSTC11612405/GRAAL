class C{  public void deleteAssignableDynamicGroups(Set assignableDynamicGroupDNs) throws AMException, SSOException {  Iterator iter=assignableDynamicGroupDNs.iterator();  while (iter.hasNext()) {    String assignableDynamicGroupDN=(String)iter.next();    AMAssignableDynamicGroup assignableDynamicGroup=new AMAssignableDynamicGroupImpl(super.token,assignableDynamicGroupDN);    assignableDynamicGroup.delete();  }}  }
class C{  public static boolean isStationExist(Context context,int stationFreq,int stationType){  Log.d(TAG,">>> isStationExist: stationFreq=" + stationFreq + ",stationType="+ stationType);  boolean isExist=false;  Cursor cur=context.getContentResolver().query(Station.CONTENT_URI,new String[]{Station.COLUMN_STATION_NAME},Station.COLUMN_STATION_FREQ + "=? AND " + Station.COLUMN_STATION_TYPE+ "=?",new String[]{String.valueOf(stationFreq),String.valueOf(stationType)},null);  if (null != cur) {    try {      if (cur.moveToFirst()) {        isExist=true;      }    }  finally {      cur.close();    }  }  Log.d(TAG,"<<< isStationExist: " + isExist);  return isExist;}  }
class C{  public void notify_deleted(BrdItem p_item){}  }
class C{  public static <T>List<T> nCopies(int n,T o){  if (n < 0)   throw new IllegalArgumentException("List length = " + n);  return new CopiesList<>(n,o);}  }
class C{  protected int directStep(RouteInfo plan,RouteInfo fact){  if (fact.getHopCount() > 1)   return UNREACHABLE;  if (!plan.getTargetHost().equals(fact.getTargetHost()))   return UNREACHABLE;  if (plan.isSecure() != fact.isSecure())   return UNREACHABLE;  if ((plan.getLocalAddress() != null) && !plan.getLocalAddress().equals(fact.getLocalAddress()))   return UNREACHABLE;  return COMPLETE;}  }
class C{  public static StringArgument trustStorePathArgument() throws ArgumentException {  return trustStorePathArgument(null);}  }
class C{  public void printStackTrace(PrintWriter s){  if (!isJDK14OrAbove && causeOnJDK13OrBelow != null) {    printStackTrace0(s);  } else {    super.printStackTrace(s);  }}  }
class C{  public boolean validate(String value){  if ((value.indexOf("://") != -1))   return true;  return false;}  }
class C{  private static boolean areSimiliar(MappedClass c1,MappedClass c2){  if (c1 == null || c2 == null) {    return false;  }  if (c1.hasParent() && !c2.hasParent()) {    return false;  }  if (c1.getNode() == null || c2.getNode() == null) {    return false;  }  if (c1.getInterfaces().size() != c2.getInterfaces().size()) {    return false;  }  double f1=c1.getFields().size();  double f2=c1.getFields().size();  double percDiffFields=(Math.abs(f1 - f2) / ((f1 + f2) / 2)) * 100;  double maxDiffLevelField=Math.min(25,52 * (Math.pow(f2,-0.5)));  if (percDiffFields > maxDiffLevelField) {    return false;  }  double m1=c1.getMethods().size();  double m2=c2.getMethods().size();  double percDiffMethods=(Math.abs(m1 - m2) / ((m1 + m2) / 2)) * 100;  double maxDiffLevelMethod=Math.min(25,52 * (Math.pow(m2,-0.5)));  if (percDiffMethods > maxDiffLevelMethod) {    return false;  }  return true;}  }
class C{  public synchronized boolean add(E e){  modCount++;  ensureCapacityHelper(elementCount + 1);  elementData[elementCount++]=e;  return true;}  }
class C{  static <T,S>ChangeSet<T,S> newInstance(final T identifier,final S data){  return new ChangeSet<T,S>(identifier,data);}  }
class C{  private void updateCronErrorMessages(String value,JLabel label,LocalizableMessage errorIfEmpty,LocalizableMessage contentError,int minValue,int maxValue,Collection<LocalizableMessage> errorMessages){  if (value.length() == 0) {    errorMessages.add(errorIfEmpty);    setPrimaryInvalid(label);  } else {    try {      RecurringTask.parseTaskTabField(value,minValue,maxValue);    } catch (    Exception ex) {      errorMessages.add(contentError);      setPrimaryInvalid(label);    }  }}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.AffiliationDescriptorConfigElement createAffiliationDescriptorConfigElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.AffiliationDescriptorConfigElementImpl();}  }
class C{  protected void handleALL_SESSION_DATA(SessionMessage msg,Member sender) throws ClassNotFoundException, IOException {  counterReceive_EVT_ALL_SESSION_DATA++;  if (log.isDebugEnabled()) {    log.debug(sm.getString("deltaManager.receiveMessage.allSessionDataBegin",getName()));  }  byte[] data=msg.getSession();  deserializeSessions(data);  if (log.isDebugEnabled()) {    log.debug(sm.getString("deltaManager.receiveMessage.allSessionDataAfter",getName()));  }}  }
class C{  public static Date addMonths(Date date,int numOfMonths){  Calendar instance=Calendar.getInstance();  instance.setTime(date);  instance.add(Calendar.MONTH,numOfMonths);  return instance.getTime();}  }
class C{  public void testSetDate_int_Date() throws SQLException {  Calendar cal=new GregorianCalendar(1799,5,26);  Date[] dates={new Date(cal.getTimeInMillis()),new Date(Integer.MAX_VALUE),new Date(123456789)};  PreparedStatement ps=null;  PreparedStatement ps1=null;  try {    String query="insert into type (dateVal) values (?);";    ps=conn.prepareStatement(query);    for (int i=0; i < dates.length; i++) {      ps.setDate(1,dates[i]);      assertFalse(ps.execute());      assertTrue(ps.getUpdateCount() > 0);    }    try {      ps.setDate(2,dates[0]);      fail("SQLException is not thrown");    } catch (    Exception sqle) {    }    ps.close();    try {      ps.setDate(1,dates[0]);      fail("SQLException is not thrown");    } catch (    SQLException sqle) {    }    String query1="insert into type (Tint) values (?);";    ps1=conn.prepareStatement(query1);    try {      ps1.setDate(1,dates[0]);      fail("SQLException is not thrown");    } catch (    SQLException sqle) {      assertEquals("SQLite.Exception: error in prepare",sqle.getMessage());    }  }  finally {    try {      if (ps != null)       ps.close();      if (ps1 != null)       ps1.close();    } catch (    SQLException ee) {    }  }}  }
class C{  public void removeLayoutComponent(Component comp){}  }
class C{  void verifyClass() throws UMSException {  Class expectedClass=TemplateManager.getTemplateManager().getJavaClassForEntry(this.getGuid().getDn(),this.getAttrSet());  if (this.getClass() != expectedClass) {    String msg=i18n.getString(IUMSConstants.UNMATCHED_CLASS);    throw new IllegalArgumentException(msg);  }}  }
class C{  @Override public void start(){  JsonObject config=config();  init(config);  vertx.setPeriodic(period,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild=null;  Node newChild;  Node child;  String childName;  Node insertedNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newChild=doc.createElement("br");  insertedNode=employeeNode.insertBefore(newChild,refChild);  child=employeeNode.getLastChild();  childName=child.getNodeName();  assertEqualsAutoCase("element","nodeName","br",childName);}  }
class C{  public static SearchFilter createSubstringFilter(AttributeType attributeType,ByteString subInitialElement,List<ByteString> subAnyElements,ByteString subFinalElement){  return new SearchFilter(FilterType.SUBSTRING,null,null,attributeType,null,null,subInitialElement,subAnyElements,subFinalElement,null,false);}  }
class C{  @Override public void close(){  if (context != null) {    OpenSslNativeJna.EVP_CIPHER_CTX_cleanup(context);  }}  }
class C{  public void startContent(){}  }
class C{  public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg,Object param){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(new Object[]{param});  setResourceBundle(record);  log(record);}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element cdataName;  NodeList childList;  Node child;  String cdataNodeValue;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  cdataName=(Element)elementList.item(1);  childList=cdataName.getChildNodes();  child=childList.item(1);  if ((child == null)) {    child=doc.createCDATASection("This is a CDATASection with EntityReference number 2 &ent2;");  }  cdataNodeValue=child.getNodeValue();  assertEquals("value","This is a CDATASection with EntityReference number 2 &ent2;",cdataNodeValue);}  }
class C{  private static String jsdocifyCloudMarkdownLinks(String comment){  StringBuffer sb=new StringBuffer();  Matcher m=CommentPatterns.CLOUD_LINK_PATTERN.matcher(comment);  if (!m.find()) {    return comment;  }  do {    String url="https://cloud.google.com" + m.group(2);    m.appendReplacement(sb,String.format("[%s](%s)",m.group(1),url));  } while (m.find());  m.appendTail(sb);  return sb.toString();}  }
class C{  public AwtreeNode pop(){  if (node_list.isEmpty())   return null;  return node_list.removeLast();}  }
class C{  public FrameBodyTALB(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  private Map<Integer,int[]> readFormat4(boolean fontSpecific) throws java.io.IOException {  Map<Integer,int[]> h=new LinkedHashMap<>();  int table_lenght=raf.readUnsignedShort();  raf.skipBytes(2);  int segCount=raf.readUnsignedShort() / 2;  raf.skipBytes(6);  int[] endCount=new int[segCount];  for (int k=0; k < segCount; ++k) {    endCount[k]=raf.readUnsignedShort();  }  raf.skipBytes(2);  int[] startCount=new int[segCount];  for (int k=0; k < segCount; ++k) {    startCount[k]=raf.readUnsignedShort();  }  int[] idDelta=new int[segCount];  for (int k=0; k < segCount; ++k) {    idDelta[k]=raf.readUnsignedShort();  }  int[] idRO=new int[segCount];  for (int k=0; k < segCount; ++k) {    idRO[k]=raf.readUnsignedShort();  }  int[] glyphId=new int[table_lenght / 2 - 8 - segCount * 4];  for (int k=0; k < glyphId.length; ++k) {    glyphId[k]=raf.readUnsignedShort();  }  for (int k=0; k < segCount; ++k) {    int glyph;    for (int j=startCount[k]; j <= endCount[k] && j != 0xFFFF; ++j) {      if (idRO[k] == 0) {        glyph=j + idDelta[k] & 0xFFFF;      } else {        int idx=k + idRO[k] / 2 - segCount + j - startCount[k];        if (idx >= glyphId.length)         continue;        glyph=glyphId[idx] + idDelta[k] & 0xFFFF;      }      int[] r=new int[2];      r[0]=glyph;      r[1]=getGlyphWidth(r[0]);      if (fontSpecific && ((j & 0xff00) == 0xf000)) {        h.put(j & 0xff,r);      }      h.put(j,r);    }  }  return h;}  }
class C{  public void close(){  isClosed=true;  impl.close();}  }
class C{  public ChunkContainer(final GUID chunkGUID,final long pos,final BigInteger length){  super(chunkGUID,pos,length);  this.chunkTable=new Hashtable<GUID,List<Chunk>>();}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return getService().fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public static Foo fetchByUuid_C_Last(java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByUuid_C_Last(uuid,companyId,orderByComparator);}  }
class C{  public int corner_y(int p_no){  int y;switch (p_no) {case 0:    y=oct_ly;  break;case 1:y=oct_ly;break;case 2:y=oct_rx - oct_lrx;break;case 3:y=oct_urx - oct_rx;break;case 4:y=oct_uy;break;case 5:y=oct_uy;break;case 6:y=oct_lx - oct_ulx;break;case 7:y=oct_llx - oct_lx;break;default :throw new IllegalArgumentException("IntOctagon.corner: p_no out of range");}return y;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (!getClass().equals(obj.getClass())) {    return false;  }  StaticAttributes object=(StaticAttributes)obj;  if (propertyName == null) {    if (object.propertyName != null) {      return false;    }  } else {    if (!propertyName.equals(object.propertyName)) {      return false;    }  }  if (propertyValues == null) {    if (object.propertyValues != null) {      return false;    }  } else {    if (!propertyValues.equals(object.propertyValues)) {      return false;    }  }  if (pResponseProviderName == null) {    if (object.getPResponseProviderName() != null) {      return false;    }  } else {    if (!pResponseProviderName.equals(object.getPResponseProviderName())) {      return false;    }  }  return true;}  }
class C{  protected void handleDirectoryEnd(File directory,int depth,Collection<T> results) throws IOException {}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  private ASCIIPropertyListParser(byte[] propertyListContent){  data=propertyListContent;}  }
class C{  public PWResetAdminLog(SSOToken token){  this.token=token;  if (logStatus) {    logger=(com.sun.identity.log.Logger)Logger.getLogger(logFile);  }  String lstr=SystemProperties.get(Constants.AM_LOCALE);  init(lstr);}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  void change_item_shape(BrdItem p_item,int p_shape_no,ShapeTile p_new_shape){  AwtreeNodeLeaf[] old_entries=p_item.get_search_tree_entries(this);  AwtreeNodeLeaf[] new_leaf_arr=new AwtreeNodeLeaf[old_entries.length];  ShapeTile[] new_precalculated_tree_shapes=new ShapeTile[old_entries.length];  remove_leaf(old_entries[p_shape_no]);  for (int i=0; i < new_precalculated_tree_shapes.length; ++i) {    if (i == p_shape_no) {      new_precalculated_tree_shapes[i]=p_new_shape;    } else {      new_precalculated_tree_shapes[i]=p_item.get_tree_shape(this,i);      new_leaf_arr[i]=old_entries[i];    }  }  p_item.set_precalculated_tree_shapes(new_precalculated_tree_shapes,this);  new_leaf_arr[p_shape_no]=insert(p_item,p_shape_no);  p_item.set_search_tree_entries(this,new_leaf_arr);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.KeyInfoType createKeyInfoType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.KeyInfoTypeImpl();}  }
class C{  public void testConstructor_InetAddressIInetAddressI() throws Exception {  int sport=startServer("Cons InetAddress,I,InetAddress,I");  SSLSocket ssl=getSSLSocket(InetAddress.getLocalHost(),sport,InetAddress.getLocalHost(),0);  assertNotNull(ssl);  assertEquals(sport,ssl.getPort());  ssl.close();  try {    getSSLSocket(InetAddress.getLocalHost(),8081,InetAddress.getLocalHost(),8082);    fail();  } catch (  IOException expected) {  }  try {    getSSLSocket(InetAddress.getLocalHost(),-1,InetAddress.getLocalHost(),sport + 1);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    getSSLSocket(InetAddress.getLocalHost(),sport,InetAddress.getLocalHost(),-1);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    getSSLSocket(InetAddress.getLocalHost(),Integer.MIN_VALUE,InetAddress.getLocalHost(),sport + 1);    fail();  } catch (  IOException expectedOnRI) {    assertTrue(StandardNames.IS_RI);  }catch (  IllegalArgumentException expectedOnAndroid) {    assertFalse(StandardNames.IS_RI);  }  try {    getSSLSocket(InetAddress.getLocalHost(),sport,InetAddress.getLocalHost(),Integer.MAX_VALUE);    fail();  } catch (  IllegalArgumentException expectedOnAndroid) {    assertFalse(StandardNames.IS_RI);  }}  }
class C{  public SpinnerNumberModel(int value,int minimum,int maximum,int stepSize){  this(Integer.valueOf(value),Integer.valueOf(minimum),Integer.valueOf(maximum),Integer.valueOf(stepSize));}  }
class C{  static void sort(double[] a,int left,int right,double[] work,int workBase,int workLen){  while (left <= right && Double.isNaN(a[right])) {    --right;  }  for (int k=right; --k >= left; ) {    double ak=a[k];    if (ak != ak) {      a[k]=a[right];      a[right]=ak;      --right;    }  }  doSort(a,left,right,work,workBase,workLen);  int hi=right;  while (left < hi) {    int middle=(left + hi) >>> 1;    double middleValue=a[middle];    if (middleValue < 0.0d) {      left=middle + 1;    } else {      hi=middle;    }  }  while (left <= right && Double.doubleToRawLongBits(a[left]) < 0) {    ++left;  }  for (int k=left, p=left - 1; ++k <= right; ) {    double ak=a[k];    if (ak != 0.0d) {      break;    }    if (Double.doubleToRawLongBits(ak) < 0) {      a[k]=0.0d;      a[++p]=-0.0d;    }  }}  }
class C{  public int hashCode(){  return uri.hashCode();}  }
class C{  public boolean isCertification(){  return certification;}  }
class C{  private boolean select(JFormattedTextField ftf,AttributedCharacterIterator iterator,DateFormat.Field field){  int max=ftf.getDocument().getLength();  iterator.first();  do {    Map attrs=iterator.getAttributes();    if (attrs != null && attrs.containsKey(field)) {      int start=iterator.getRunStart(field);      int end=iterator.getRunLimit(field);      if (start != -1 && end != -1 && start <= max && end <= max) {        ftf.select(start,end);      }      return true;    }  } while (iterator.next() != CharacterIterator.DONE);  return false;}  }
class C{  boolean canRunInCurrentRunState(boolean periodic){  return isRunningOrShutdown(periodic ? continueExistingPeriodicTasksAfterShutdown : executeExistingDelayedTasksAfterShutdown);}  }
class C{  public String toExternalForm(){  if (entryName == null) {    return url.toExternalForm();  } else {    return "jar:" + url.toExternalForm() + "!/"+ entryName;  }}  }
class C{  public FireballBig(Group root,String SVGData,float xPos,float yPos,float xVel,Image sprite,Image... blastSprites){  super(root,SVGData,xPos,yPos,xVel,1,sprite,blastSprites);}  }
class C{  protected RemoteServer(RemoteRef ref){  super(ref);}  }
class C{  public void nodeClicked(RequestInvocationEvent event,int nodeID){  AMViewConfig amconfig=AMViewConfig.getInstance();  try {    AMViewBeanBase vb=getTabNodeAssociatedViewBean("realms",nodeID);    String tmp=(String)getPageSessionAttribute(AMAdminConstants.PREVIOUS_REALM);    vb.setPageSessionAttribute(AMAdminConstants.PREVIOUS_REALM,tmp);    tmp=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    vb.setPageSessionAttribute(AMAdminConstants.CURRENT_REALM,tmp);    tmp=(String)getPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID);    vb.setPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID,tmp);    unlockPageTrailForSwapping();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    debug.error("RealmPropertiesBase.nodeClicked",e);    forwardTo();  }}  }
class C{  public MyCertPath(byte[] encoding){  super("MyEncoding");  this.encoding=encoding;  certificates=new Vector<MyCertificate>();  certificates.add(new MyCertificate("MyEncoding",encoding));  encodingNames=new Vector<String>();  encodingNames.add("MyEncoding");}  }
class C{  public void removeElementAt(int index){  modifications.remove(index);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  IdType idType=convert2IdType(type);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  String[] params={realm,type,idName,serviceName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_ASSIGN_SERVICE",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    amid.assignService(serviceName,attributeValues);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-assign-service-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_ASSIGN_SERVICE",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,serviceName,e.getMessage()};    debugError("AssignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_ASSIGN_SERVICE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,serviceName,e.getMessage()};    debugError("AssignService.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_ASSIGN_SERVICE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  NamedNodeMap nodeMap;  DocumentType docType;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    nodeMap=docType.getEntities();    assertNotNull("entitiesNotNull",nodeMap);    newNode=nodeMap.getNamedItem("alpha");    assertNotNull("entityNotNull",newNode);    newValue=newNode.getNodeValue();    assertNull("initiallyNull",newValue);    newNode.setNodeValue("This should have no effect");    newValue=newNode.getNodeValue();    assertNull("nullAfterAttemptedChange",newValue);  }}  }
class C{  public Set createGroupContainers(Set groupContainerNames) throws AMException, SSOException {  Iterator iter=groupContainerNames.iterator();  Set groupContainers=new HashSet();  while (iter.hasNext()) {    String groupContainerDN=AMNamingAttrManager.getNamingAttr(GROUP_CONTAINER) + "=" + ((String)iter.next())+ ","+ entryDN;    AMGroupContainerImpl groupContainerImpl=new AMGroupContainerImpl(token,groupContainerDN);    groupContainerImpl.create();    groupContainers.add(groupContainerImpl);  }  return groupContainers;}  }
class C{  public ServerNotActiveException(){}  }
class C{  public static void addErrorMessage(ConfigChangeResult ccr,LocalizableMessage message){  ccr.setResultCode(DirectoryServer.getServerErrorResultCode());  ccr.addMessage(message);}  }
class C{  public HttpAuthorizationMechanismFactory(ServerContext serverContext){  this.serverContext=checkNotNull(serverContext,"serverContext cannot be null");}  }
class C{  private byte[] createSegmentTable(int setupHeaderLength,List<OggPageHeader.PacketStartAndLength> extraPackets){  ByteArrayOutputStream resultBaos=new ByteArrayOutputStream();  byte[] restShouldBe;  byte[] nextPacket;  restShouldBe=createSegments(setupHeaderLength,true);  try {    resultBaos.write(restShouldBe);    if (extraPackets.size() > 0) {      for (      OggPageHeader.PacketStartAndLength packet : extraPackets) {        nextPacket=createSegments(packet.getLength(),false);        resultBaos.write(nextPacket);      }    }  } catch (  IOException ioe) {    throw new RuntimeException("Unable to create segment table:" + ioe.getMessage());  }  return resultBaos.toByteArray();}  }
class C{  private E dequeue(){  int n=size - 1;  if (n < 0)   return null; else {    Object[] array=queue;    E result=(E)array[0];    E x=(E)array[n];    array[n]=null;    Comparator<? super E> cmp=comparator;    if (cmp == null)     siftDownComparable(0,x,array,n); else     siftDownUsingComparator(0,x,array,n,cmp);    size=n;    return result;  }}  }
class C{  public long position(String searchStr,long start) throws SerialException, SQLException {  isValid();  if (start < 1 || start > len) {    return -1;  }  char pattern[]=searchStr.toCharArray();  int pos=(int)start - 1;  int i=0;  long patlen=pattern.length;  while (pos < len) {    if (pattern[i] == buf[pos]) {      if (i + 1 == patlen) {        return (pos + 1) - (patlen - 1);      }      i++;      pos++;    } else     if (pattern[i] != buf[pos]) {      pos++;    }  }  return -1;}  }
class C{  public static long newConnectionAccepted(ClientConnection clientConnection){synchronized (directoryServer.establishedConnections) {    if (directoryServer.lockdownMode) {      InetAddress remoteAddress=clientConnection.getRemoteAddress();      if (remoteAddress != null && !remoteAddress.isLoopbackAddress()) {        return -1;      }    }    final long maxAllowed=directoryServer.maxAllowedConnections;    if (0 < maxAllowed && maxAllowed <= directoryServer.currentConnections) {      return -1;    }    directoryServer.establishedConnections.add(clientConnection);    directoryServer.currentConnections++;    if (directoryServer.currentConnections > directoryServer.maxConnections) {      directoryServer.maxConnections=directoryServer.currentConnections;    }    return directoryServer.totalConnections++;  }}  }
class C{  public void paintText(SynthContext ss,Graphics g,String text,int x,int y,int mnemonicIndex){  if (text != null) {    JComponent c=ss.getComponent();    FontMetrics fm=SwingUtilities2.getFontMetrics(c,g);    y+=fm.getAscent();    SwingUtilities2.drawStringUnderlineCharAt(c,g,text,mnemonicIndex,x,y);  }}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  public void treeExpanded(TreeExpansionEvent event){  getHandler().treeExpanded(event);}  }
class C{  public boolean offer(E e){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.offer(e);    if (q.peek() == e) {      leader=null;      available.signal();    }    return true;  }  finally {    lock.unlock();  }}  }
class C{  public static EntryReader newEntryIteratorReader(final Iterator<Entry> entries){  return new EntryIteratorReader(entries);}  }
class C{  private static void encodeBinary(byte[] bytes,int startpos,int count,int startmode,StringBuilder sb){  if (count == 1 && startmode == TEXT_COMPACTION) {    sb.append((char)SHIFT_TO_BYTE);  } else {    boolean sixpack=((count % 6) == 0);    if (sixpack) {      sb.append((char)LATCH_TO_BYTE);    } else {      sb.append((char)LATCH_TO_BYTE_PADDED);    }  }  int idx=startpos;  if (count >= 6) {    char[] chars=new char[5];    while ((startpos + count - idx) >= 6) {      long t=0;      for (int i=0; i < 6; i++) {        t<<=8;        t+=bytes[idx + i] & 0xff;      }      for (int i=0; i < 5; i++) {        chars[i]=(char)(t % 900);        t/=900;      }      for (int i=chars.length - 1; i >= 0; i--) {        sb.append(chars[i]);      }      idx+=6;    }  }  for (int i=idx; i < startpos + count; i++) {    int ch=bytes[i] & 0xff;    sb.append((char)ch);  }}  }
class C{  private boolean processModifyRequest(LDAPMessage message,List<Control> controls){  if (ldapVersion == 2 && !controls.isEmpty()) {    ModifyResponseProtocolOp responseOp=new ModifyResponseProtocolOp(LDAPResultCode.PROTOCOL_ERROR,ERR_LDAPV2_CONTROLS_NOT_ALLOWED.get());    sendLDAPMessage(message,responseOp);    disconnectControlsNotAllowed();    return false;  }  ModifyRequestProtocolOp protocolOp=message.getModifyRequestProtocolOp();  ModifyOperationBasis modifyOp=new ModifyOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,protocolOp.getDN(),protocolOp.getModifications());  try {    addOperationInProgress(modifyOp);  } catch (  DirectoryException de) {    logger.traceException(de);    ModifyResponseProtocolOp responseOp=new ModifyResponseProtocolOp(de.getResultCode().intValue(),de.getMessageObject(),de.getMatchedDN(),de.getReferralURLs());    sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp,modifyOp.getResponseControls()));  }  return connectionValid;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos < buf.length) {      return buf[pos++];    }    return in.read();  }}  }
class C{  protected Type(String name){  super(name);}  }
class C{  private void appendOutputLine(String msg){  appendErrorLine(msg);}  }
class C{  public final void testGetQ(){  DSAPublicKeySpec dpks=new DSAPublicKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(3,dpks.getQ().intValue());}  }
class C{  public static void fill(double[] array,double value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  void releaseLDAPConnection(ConnectionWithControls conn){  if (conn != connConfig && conn != connUserData) {    connectionPool.releaseConnection(conn);  }}  }
class C{  public FrameBodyTDOR(FrameBodyTORY body){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  setObjectValue(DataTypes.OBJ_TEXT,body.getText());}  }
class C{  public RuleNoResourceEditViewBean(){  super("RuleNoResourceEdit",DEFAULT_DISPLAY_URL);}  }
class C{  @Override public boolean login() throws LoginException {  if (callbackHandler == null)   throw new LoginException("No CallbackHandler specified");  Callback callbacks[]=new Callback[9];  callbacks[0]=new NameCallback("Username: ");  callbacks[1]=new PasswordCallback("Password: ",false);  callbacks[2]=new TextInputCallback("nonce");  callbacks[3]=new TextInputCallback("nc");  callbacks[4]=new TextInputCallback("cnonce");  callbacks[5]=new TextInputCallback("qop");  callbacks[6]=new TextInputCallback("realmName");  callbacks[7]=new TextInputCallback("md5a2");  callbacks[8]=new TextInputCallback("authMethod");  String username=null;  String password=null;  String nonce=null;  String nc=null;  String cnonce=null;  String qop=null;  String realmName=null;  String md5a2=null;  String authMethod=null;  try {    callbackHandler.handle(callbacks);    username=((NameCallback)callbacks[0]).getName();    password=new String(((PasswordCallback)callbacks[1]).getPassword());    nonce=((TextInputCallback)callbacks[2]).getText();    nc=((TextInputCallback)callbacks[3]).getText();    cnonce=((TextInputCallback)callbacks[4]).getText();    qop=((TextInputCallback)callbacks[5]).getText();    realmName=((TextInputCallback)callbacks[6]).getText();    md5a2=((TextInputCallback)callbacks[7]).getText();    authMethod=((TextInputCallback)callbacks[8]).getText();  } catch (  IOException|UnsupportedCallbackException e) {    throw new LoginException(e.toString());  }  if (authMethod == null) {    principal=super.authenticate(username,password);  } else   if (authMethod.equals(HttpServletRequest.DIGEST_AUTH)) {    principal=super.authenticate(username,password,nonce,nc,cnonce,qop,realmName,md5a2);  } else   if (authMethod.equals(HttpServletRequest.CLIENT_CERT_AUTH)) {    principal=super.getPrincipal(username);  } else {    throw new LoginException("Unknown authentication method");  }  if (log.isDebugEnabled()) {    log.debug("login " + username + " "+ principal);  }  if (principal != null) {    return true;  } else {    throw new FailedLoginException("Username or password is incorrect");  }}  }
class C{  private void checkConnection(int dsId,int rsId) throws Exception {  int rsPort=-1;  LDAPReplicationDomain rd=null;switch (dsId) {case DS1_ID:    rd=rd1;  break;case DS2_ID:rd=rd2;break;case DS3_ID:rd=rd3;break;case DS4_ID:rd=rd4;break;case DS5_ID:rd=rd5;break;case DS6_ID:rd=rd6;break;default :fail("Unknown replication domain server id.");}switch (rsId) {case RS1_ID:rsPort=rs1Port;break;case RS2_ID:rsPort=rs2Port;break;case RS3_ID:rsPort=rs3Port;break;default :fail("Unknown replication server id.");}waitConnected(dsId,rsId,rsPort,rd,"");}  }
class C{  public static void deregisterConnectionHandler(ConnectionHandler<?> handler){synchronized (directoryServer.connectionHandlers) {    directoryServer.connectionHandlers.remove(handler);    ConnectionHandlerMonitor monitor=handler.getConnectionHandlerMonitor();    if (monitor != null) {      deregisterMonitorProvider(monitor);      monitor.finalizeMonitorProvider();      handler.setConnectionHandlerMonitor(null);    }  }}  }
class C{  public void rebuildIndex(RebuildIndexParameters parameters) throws EmbeddedDirectoryServerException {  checkServerIsNotRunning();  int returnCode=RebuildIndex.mainRebuildIndex(parameters.toCommandLineArguments(configParams.getConfigurationFile()),!isRunning(),outStream,errStream);  if (returnCode != 0) {    throw new EmbeddedDirectoryServerException(ERR_EMBEDDED_SERVER_REBUILD_INDEX.get(configParams.getServerRootDirectory(),returnCode));  }}  }
class C{  public boolean matchesRDN(RDN rdn){  if (getNumValues() == 1) {    if (typePatterns[0].equals("*") && valuePatterns.get(0) == null) {      return true;    }    if (rdn.size() != 1) {      return false;    }    AVA ava=rdn.getFirstAVA();    if (!typePatterns[0].equals("*")) {      AttributeType thisType=DirectoryServer.getSchema().getAttributeType(typePatterns[0]);      if (thisType.isPlaceHolder() || !thisType.equals(ava.getAttributeType())) {        return false;      }    }    return matchValuePattern(valuePatterns.get(0),ava);  }  if (hasTypeWildcard || typePatterns.length != rdn.size()) {    return false;  }  TreeMap<String,List<ByteString>> patternMap=new TreeMap<>();  for (int i=0; i < typePatterns.length; i++) {    AttributeType type=DirectoryServer.getSchema().getAttributeType(typePatterns[i]);    if (type.isPlaceHolder()) {      return false;    }    patternMap.put(type.getNameOrOID(),valuePatterns.get(i));  }  Iterator<String> patternKeyIter=patternMap.keySet().iterator();  for (  AVA ava : rdn) {    String rdnKey=ava.getAttributeType().getNameOrOID();    if (!rdnKey.equals(patternKeyIter.next()) || !matchValuePattern(patternMap.get(rdnKey),ava)) {      return false;    }  }  return true;}  }
class C{  public void change_panel_size(Dimension p_new_bounds){  if (coordinate_transform == null)   return;  ShapeTileBox design_box=coordinate_transform.design_box;  boolean left_right_swapped=coordinate_transform.is_mirror_left_right();  boolean top_bottom_swapped=coordinate_transform.is_mirror_top_bottom();  double rotation=coordinate_transform.get_rotation();  coordinate_transform=new GdiCoordinateTransform(design_box,p_new_bounds);  coordinate_transform.set_mirror_left_right(left_right_swapped);  coordinate_transform.set_mirror_top_bottom(top_bottom_swapped);  coordinate_transform.set_rotation(rotation);}  }
class C{  String filterLatestAccessTime(Token token){  String contents=blobUtils.getBlobAsString(token);  Matcher matcher=LATEST_ACCESSED_TIME.matcher(contents);  if (!matcher.find()) {    return null;  }  String latestAccessTime=matcher.group(1);  contents=contents.substring(0,matcher.start()) + contents.substring(matcher.end(),contents.length());  blobUtils.setBlobFromString(token,contents);  return latestAccessTime;}  }
class C{  @Override public void dump(final String prefix,final FileDescriptor fd,final PrintWriter writer,final String[] args){  delegate.dump(prefix,fd,writer,args);}  }
class C{  public void paintScrollBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void changed_area_clear(){  changed_area.clear(get_layer_count());}  }
class C{  public static Object convertElementToJAXB(Element element) throws JAXBException {  Unmarshaller u=jc.createUnmarshaller();  return u.unmarshal(element);}  }
class C{  public SQLTransactionRollbackException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  @Override protected void createButtonsForButtonBar(Composite parent){  mOkButton=createButton(parent,IDialogConstants.OK_ID,IDialogConstants.OK_LABEL,true);  createButton(parent,IDialogConstants.CANCEL_ID,IDialogConstants.CANCEL_LABEL,false);  updateButtonState();}  }
class C{  public static Realm root(){  if (root == null) {    root=new Realm(convertRealmPathToDN("/"));  }  return root;}  }
class C{  public LoginLATGroupAttribute(byte[] octets){  super(octets);  latCodes=new String(octets,2,octets.length - 2);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public boolean is_perpendicular(PlaLineInt p_other){  return direction().projection(p_other.direction()) == Signum.ZERO;}  }
class C{  public static void sendResponseToACS(HttpServletRequest request,HttpServletResponse response,PrintWriter out,Object session,AuthnRequest authnReq,String spEntityID,String idpEntityID,String idpMetaAlias,String realm,String nameIDFormat,String relayState,AuthnContext matchingAuthnContext) throws SAML2Exception {  StringBuffer returnedBinding=new StringBuffer();  String acsURL=IDPSSOUtil.getACSurl(spEntityID,realm,authnReq,request,returnedBinding);  String acsBinding=returnedBinding.toString();  if ((acsURL == null) || (acsURL.trim().length() == 0)) {    SAML2Utils.debug.error("IDPSSOUtil.sendResponseToACS:" + " no ACS URL found.");    String[] data={idpMetaAlias};    LogUtil.error(Level.INFO,LogUtil.NO_ACS_URL,data,session);    throw new SAML2Exception(SAML2Utils.bundle.getString("UnableTofindACSURL"));  }  if ((acsBinding == null) || (acsBinding.trim().length() == 0)) {    SAML2Utils.debug.error("IDPSSOUtil.sendResponseToACS:" + " no return binding found.");    String[] data={idpMetaAlias};    LogUtil.error(Level.INFO,LogUtil.NO_RETURN_BINDING,data,session);    throw new SAML2Exception(SAML2Utils.bundle.getString("UnableTofindBinding"));  }  String affiliationID=request.getParameter(SAML2Constants.AFFILIATION_ID);  String remoteServiceURL=SAML2Utils.getRemoteServiceURL(getSessionIndex(session));  if (remoteServiceURL != null) {    remoteServiceURL+=SAML2Utils.removeDeployUri(request.getRequestURI()) + "?" + request.getQueryString();    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("SessionIndex for this SSOToken is not local, forwarding the request to: " + remoteServiceURL);    }    String redirectUrl=null;    String outputData=null;    String responseCode=null;    HashMap<String,String> remoteRequestData=SAML2Utils.sendRequestToOrigServer(request,response,remoteServiceURL);    if (remoteRequestData != null && !remoteRequestData.isEmpty()) {      redirectUrl=remoteRequestData.get(SAML2Constants.AM_REDIRECT_URL);      outputData=remoteRequestData.get(SAML2Constants.OUTPUT_DATA);      responseCode=remoteRequestData.get(SAML2Constants.RESPONSE_CODE);      try {        if (redirectUrl != null && !redirectUrl.isEmpty()) {          response.sendRedirect(redirectUrl);        } else {          if (responseCode != null) {            response.setStatus(Integer.valueOf(responseCode));          }          if (outputData != null && !outputData.isEmpty()) {            SAML2Utils.debug.message("Printing the forwarded response");            response.setContentType("text/html; charset=UTF-8");            out.println(outputData);            return;          }        }      } catch (      IOException ioe) {        if (SAML2Utils.debug.messageEnabled()) {          SAML2Utils.debug.message("IDPSSOUtil.sendResponseToACS() error in Request Routing",ioe);        }      }      return;    }  }  Response res=getResponse(request,session,authnReq,spEntityID,idpEntityID,idpMetaAlias,realm,nameIDFormat,acsURL,affiliationID,matchingAuthnContext);  if (res == null) {    SAML2Utils.debug.error("IDPSSOUtil.sendResponseToACS:" + " response is null");    String errorMsg=SAML2Utils.bundle.getString("UnableToCreateAssertion");    if (authnReq == null) {      throw new SAML2Exception(errorMsg);    }    res=SAML2Utils.getErrorResponse(authnReq,SAML2Constants.RESPONDER,null,errorMsg,idpEntityID);  } else {    try {      String[] values={idpMetaAlias};      sessionProvider.setProperty(session,SAML2Constants.IDP_META_ALIAS,values);    } catch (    SessionException e) {      SAML2Utils.debug.error("IDPSSOUtil.sendResponseToACS:" + " error setting idpMetaAlias into the session: ",e);    }  }  if (res != null) {    MultiProtocolUtils.addFederationProtocol(session,SingleLogoutManager.SAML2);    if (setCOTCookie(request,response,acsBinding,spEntityID,idpEntityID,idpMetaAlias,realm,relayState,acsURL,res,session)) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message("IDPSSOUtil.sendResponseToACS:" + " Redirected to set COT cookie.");      }      return;    }    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("IDPSSOUtil.sendResponseToACS:" + " Doesn't set COT cookie.");      SAML2Utils.debug.message("IDPSSOUtil.sendResponseToACS:" + " Response is:  " + res.toXMLString());    }    try {      SAML2Utils.debug.message("IDPSSOUtil.sendResponseToACS: Invoking the IDP Adapter");      SAML2IdentityProviderAdapter idpAdapter=IDPSSOUtil.getIDPAdapterClass(realm,idpEntityID);      if (idpAdapter != null) {        idpAdapter.preSignResponse(authnReq,res,idpEntityID,realm,request,session,relayState);      }    } catch (    SAML2Exception se) {      SAML2Utils.debug.error("IDPSSOUtil.sendResponseToACS: There was a problem when invoking the " + "preSendResponse of the IDP Adapter: ",se);    }    sendResponse(request,response,out,acsBinding,spEntityID,idpEntityID,idpMetaAlias,realm,relayState,acsURL,res,session);  } else {    SAML2Utils.debug.error("IDPSSOUtil.sendResponseToACS:" + " error response is null");    throw new SAML2Exception(SAML2Utils.bundle.getString("UnableToCreateErrorResponse"));  }}  }
class C{  public void removeAccountFedInfo(String userID,FSAccountFedInfo fedInfo) throws FSAccountMgmtException {  if (fedInfo == null) {    FSUtils.debug.error("FSAccountManager.removeAccountFedInfo():" + "Invalid Argument : FedInfo is NULL");    throw new FSAccountMgmtException(IFSConstants.NULL_FED_INFO_OBJECT,null);  }  try {    Set existFedInfoSet=provider.getAttribute(userID,FSAccountUtils.USER_FED_INFO_ATTR);    if (existFedInfoSet == null) {      existFedInfoSet=new HashSet();    } else     if (!existFedInfoSet.isEmpty()) {      String fedInfoStr=FSAccountUtils.objectToInfoString(fedInfo);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Account Info to be removed:" + fedInfoStr);      }      if (fedInfoStr != null && existFedInfoSet.contains(fedInfoStr)) {        existFedInfoSet.remove(fedInfoStr);      }      HashMap attrMap=new HashMap();      attrMap.put(FSAccountUtils.USER_FED_INFO_ATTR,existFedInfoSet);      provider.setAttributes(userID,attrMap);    }  } catch (  Exception se) {    FSUtils.debug.error("FSAccountManager.removeAccountFedInfo(): Exception: ",se);    throw new FSAccountMgmtException(se.getMessage());  }}  }
class C{  private String badRegister(long s){  return "Attempt to register more than " + MAX_PARTIES + " parties for "+ stateToString(s);}  }
class C{  public int size(){  return attrMap.size();}  }
class C{  private boolean isValidField(final TagField field){  if (field == null) {    return false;  }  if (!(field instanceof AsfTagField)) {    return false;  }  return !field.isEmpty();}  }
class C{  public PlaPointFloat rotate_90_deg(int p_factor,PlaPointFloat p_pole){  PlaPointFloat v=substract(p_pole);  v=v.rotate_90_deg(p_factor);  return p_pole.add(v);}  }
class C{  private static Polynomial25519 innerReciprocal(Polynomial25519 z){  Polynomial25519 z2=Polynomial25519.square(z);  Polynomial25519 t1=Polynomial25519.square(z2);  Polynomial25519 t0=Polynomial25519.square(t1);  Polynomial25519 z9=Polynomial25519.mult(t0,z);  Polynomial25519 z11=Polynomial25519.mult(z9,z2);  t0=Polynomial25519.square(z11);  Polynomial25519 z2FiveZero=Polynomial25519.mult(t0,z9);  t0=Polynomial25519.square(z2FiveZero);  t1=Polynomial25519.square(t0);  t0=Polynomial25519.square(t1);  t1=Polynomial25519.square(t0);  t0=Polynomial25519.square(t1);  Polynomial25519 z2TenZero=Polynomial25519.mult(t0,z2FiveZero);  t0=Polynomial25519.square(z2TenZero);  t1=Polynomial25519.square(t0);  for (int i=2; i < 10; i+=2) {    t0=Polynomial25519.square(t1);    t1=Polynomial25519.square(t0);  }  Polynomial25519 z2TwentyZero=Polynomial25519.mult(t1,z2TenZero);  t0=Polynomial25519.square(z2TwentyZero);  t1=Polynomial25519.square(t0);  for (int i=2; i < 20; i+=2) {    t0=Polynomial25519.square(t1);    t1=Polynomial25519.square(t0);  }  t0=Polynomial25519.mult(t1,z2TwentyZero);  t1=Polynomial25519.square(t0);  t0=Polynomial25519.square(t1);  for (int i=2; i < 10; i+=2) {    t1=Polynomial25519.square(t0);    t0=Polynomial25519.square(t1);  }  Polynomial25519 z2FiftyZero=Polynomial25519.mult(t0,z2TenZero);  t0=Polynomial25519.square(z2FiftyZero);  t1=Polynomial25519.square(t0);  for (int i=2; i < 50; i+=2) {    t0=Polynomial25519.square(t1);    t1=Polynomial25519.square(t0);  }  Polynomial25519 z2HundredZero=Polynomial25519.mult(t1,z2FiftyZero);  t1=Polynomial25519.square(z2HundredZero);  t0=Polynomial25519.square(t1);  for (int i=2; i < 100; i+=2) {    t1=Polynomial25519.square(t0);    t0=Polynomial25519.square(t1);  }  t1=Polynomial25519.mult(t0,z2HundredZero);  t0=Polynomial25519.square(t1);  t1=Polynomial25519.square(t0);  for (int i=2; i < 50; i+=2) {    t0=Polynomial25519.square(t1);    t1=Polynomial25519.square(t0);  }  t0=Polynomial25519.mult(t1,z2FiftyZero);  t1=Polynomial25519.square(t0);  t0=Polynomial25519.square(t1);  t1=Polynomial25519.square(t0);  t0=Polynomial25519.square(t1);  t1=Polynomial25519.square(t0);  return Polynomial25519.mult(t1,z11);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.EncryptedDataType createEncryptedDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.EncryptedDataTypeImpl();}  }
class C{  public static int i(String tag,String msg){  return Log.i(tag,msg);}  }
class C{  private void navigateToConversationsActivity(){  startActivity(this.conversationsIntent);}  }
class C{  public static short swapShort(short value){  return (short)((((value >> 0) & 0xff) << 8) + (((value >> 8) & 0xff) << 0));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(3);  testEmployee.removeAttribute("street");  attrValue=testEmployee.getAttribute("street");  assertEquals("streetYes","Yes",attrValue);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusCodeElement createStatusCodeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusCodeElementImpl();}  }
class C{  public static String keepNumbers(String text){  StringBuilder sb=new StringBuilder();  for (int k=0; k < text.length(); ++k) {    char c=text.charAt(k);    if (c >= '0' && c <= '9') {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public static List<Position> decode(final String encodedPath,int precision){  int len=encodedPath.length();  double factor=Math.pow(10,precision);  final List<Position> path=new ArrayList<>();  int index=0;  int lat=0;  int lng=0;  while (index < len) {    int result=1;    int shift=0;    int b;    do {      b=encodedPath.charAt(index++) - 63 - 1;      result+=b << shift;      shift+=5;    } while (b >= 0x1f);    lat+=(result & 1) != 0 ? ~(result >> 1) : (result >> 1);    result=1;    shift=0;    do {      b=encodedPath.charAt(index++) - 63 - 1;      result+=b << shift;      shift+=5;    } while (b >= 0x1f);    lng+=(result & 1) != 0 ? ~(result >> 1) : (result >> 1);    path.add(Position.fromCoordinates(lng / factor,lat / factor));  }  return path;}  }
class C{  public static String formatBase64BinaryElement(String xmlstr){  int from=0;  int index=xmlstr.indexOf("<ds:X509Certificate>");  int xmlLength=xmlstr.length();  StringBuffer sb=new StringBuffer(xmlLength + 100);  while (index != -1) {    sb.append(xmlstr.substring(from,index));    int indexEnd=xmlstr.indexOf("</ds:X509Certificate>",index);    String encoded=xmlstr.substring(index + 20,indexEnd);    int encodedLength=encoded.length();    sb.append("<ds:X509Certificate>\n");    int i;    for (i=0; i < encodedLength - 76; i+=76) {      sb.append(encoded.substring(i,i + 76)).append("\n");    }    int nlIndex=xmlstr.lastIndexOf('\n',index);    String indention=xmlstr.substring(nlIndex + 1,index);    sb.append(encoded.substring(i,encodedLength)).append("\n").append(indention).append("</ds:X509Certificate>");    from=indexEnd + 21;    index=xmlstr.indexOf("<ds:X509Certificate>",from);  }  sb.append(xmlstr.substring(from,xmlLength));  return sb.toString();}  }
class C{  public void testZeroPos(){  byte aBytes[]={0};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=0;  int bSign=1;  byte rBytes[]={0,-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public int bitCount(){  @SuppressWarnings("deprecation") int bc=bitCount - 1;  if (bc == -1) {    bc=0;    for (int i=0; i < mag.length; i++)     bc+=Integer.bitCount(mag[i]);    if (signum < 0) {      int magTrailingZeroCount=0, j;      for (j=mag.length - 1; mag[j] == 0; j--)       magTrailingZeroCount+=32;      magTrailingZeroCount+=Integer.numberOfTrailingZeros(mag[j]);      bc+=magTrailingZeroCount - 1;    }    bitCount=bc + 1;  }  return bc;}  }
class C{  public String endTblDataActionDefaultHrefDisplay(ChildContentDisplayEvent event){  String lbl=(String)tblModel.getValue(TBL_DATA_ACTION_DEFAULT_LABEL);  return ((lbl != null) && (lbl.length() > 0)) ? event.getContent() : "";}  }
class C{  private void augmentContext(ScriptEntry augmentScript,Context context,org.forgerock.http.protocol.Request request,SecurityContext securityContext) throws ResourceException {  if (!augmentScript.isActive()) {    throw new ServiceUnavailableException("Failed to execute inactive script: " + augmentScript.getName().toString());  }  final Script script=augmentScript.getScript(securityContext);  script.put("context",context);  script.put("httpRequest",request);  script.put("security",securityContext);  try {    script.eval();  } catch (  ScriptThrownException ste) {    throw ste.toResourceException(ResourceException.INTERNAL_ERROR,"Security Context augmentation script '" + augmentScript.getName().toString() + "' resulted in an error");  }catch (  Exception e) {    ResourceException re=Utils.adapt(e);    logger.warn("augment script {} encountered exception with detail {} ",augmentScript.getName().getName(),re.getDetail(),re);    throw re;  }}  }
class C{  protected <T>Handler<AsyncResult<T>> resultHandlerNonEmpty(RoutingContext context){  return null;}  }
class C{  protected void EmptyStack(){  for (int i=0; i < arg_count; i++)   args[i]=null;  arg_count=0;}  }
class C{  public SQLInvalidAuthorizationSpecException(){}  }
class C{  public Resource supportedActions(final Action... actions){  this.supportedActions.addAll(Arrays.asList(actions));  return this;}  }
class C{  @Override public void stop(int svc){  try {    if (impl != null && impl.stop(svc)) {      impl.setChannel(null);      impl=null;      channel=null;    }  } catch (  Exception x) {    log.error(sm.getString("McastService.stopFail",Integer.valueOf(svc)),x);  }}  }
class C{  private void changePassword(String userType,String oldPassword,String newPassword) throws Exception {  String fileEncPassword=getUserPassword(userType);  String userDN=getUserDN(userType);  if ((fileEncPassword == null) || (fileEncPassword.length() == 0) || (userDN == null)|| (userDN.length() == 0)) {    debug.error("Null password or user DN for user type: " + userType + " from file: "+ configFile);    throw new XMLException(i18n.getString("dscfg-corrupted-serverconfig"));  }  if (!oldPassword.equals(AccessController.doPrivileged(new DecodeAction(fileEncPassword)))) {    throw new Exception(i18n.getString("dscfg-old-passwd-donot-match"));  }  if (isAMSDKConfigured) {    try {      new AuthContext(new AuthPrincipal(userDN),newPassword.toCharArray());      if (debug.messageEnabled()) {        debug.message("DN: " + userDN + " new password is already updated in the directory");      }    } catch (    LoginException lee) {      try {        AuthContext ac=new AuthContext(new AuthPrincipal(userDN),oldPassword.toCharArray());        PersistentObject user=UMSObject.getObject(ac.getSSOToken(),new Guid(userDN));        if (debug.messageEnabled()) {          debug.message("For DN: " + userDN + " changing password in directory");        }        user.setAttribute(new Attr("userPassword",newPassword));        user.save();      } catch (      LoginException le) {        if (debug.warningEnabled()) {          debug.warning("For DN: " + userDN + " new and old passwords donot match with directory");        }        throw new Exception(i18n.getString("dscfg-invalid-password") + "\n" + le.getMessage());      }    }  }  setUserPassword(userType,newPassword);}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public static final ParsedQuery createTestParsedQuery2(){  Query query=new Query();  query.setWhere("myindexedfield = 'foo'");  query.setDatabase(Fixtures.DB);  query.setTable("mytable");  WhereClause whereClause=new WhereClause(query.getWhere());  return new ParsedQuery(query,whereClause,createTestIndexOneField());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList employeeList;  Node child;  String childName;  int length;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(2);  employeeList=employeeNode.getChildNodes();  length=(int)employeeList.getLength();  if (equals(6,length)) {    child=employeeList.item(5);    childName=child.getNodeName();    assertEquals("nodeName1","address",childName);  } else {    child=employeeList.item(12);    childName=child.getNodeName();    assertEquals("nodeName2","#text",childName);  }}  }
class C{  public static int[] copyOf(int[] original,int newLength){  int[] copy=new int[newLength];  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  Node entElementContent;  Node entReference;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(1,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).setData("newData");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public IdOperation(String operation){  op=operation;}  }
class C{  public void testToStringboolean() throws Exception {  new IdentityStub("aaa").toString(false);  new IdentityStub("aaa2",IdentityScope.getSystemScope()).toString(false);  new IdentityStub("bbb").toString(true);  new IdentityStub("bbb2",IdentityScope.getSystemScope()).toString(true);}  }
class C{  public static void println(){  System.out.println();}  }
class C{  protected boolean scrollPageDown(TextView widget,Spannable buffer){  final Layout layout=widget.getLayout();  final int innerHeight=getInnerHeight(widget);  final int bottom=widget.getScrollY() + innerHeight + innerHeight;  int bottomLine=layout.getLineForVertical(bottom);  if (bottomLine <= layout.getLineCount() - 1) {    Touch.scrollTo(widget,layout,widget.getScrollX(),layout.getLineTop(bottomLine + 1) - innerHeight);    return true;  }  return false;}  }
class C{  public String toString(){  return attrType;}  }
class C{  public void flip(int i){  bits[i / 32]^=1 << (i & 0x1F);}  }
class C{  public NamespaceSupport(){  reset();}  }
class C{  public CountingOutputStream(OutputStream out){  super(out);}  }
class C{  @Override public void addDateHeader(String name,long value){  if (!included)   ((HttpServletResponse)getResponse()).addDateHeader(name,value);}  }
class C{  public TagNotFoundException(String msg){  super(msg);}  }
class C{  public OrganizationParser(String organization){  super(organization);}  }
class C{  public void toXML(XMLWriter generatedXML){  generatedXML.writeElement("D","activelock",XMLWriter.OPENING);  generatedXML.writeElement("D","locktype",XMLWriter.OPENING);  generatedXML.writeElement("D",type,XMLWriter.NO_CONTENT);  generatedXML.writeElement("D","locktype",XMLWriter.CLOSING);  generatedXML.writeElement("D","lockscope",XMLWriter.OPENING);  generatedXML.writeElement("D",scope,XMLWriter.NO_CONTENT);  generatedXML.writeElement("D","lockscope",XMLWriter.CLOSING);  generatedXML.writeElement("D","depth",XMLWriter.OPENING);  if (depth == maxDepth) {    generatedXML.writeText("Infinity");  } else {    generatedXML.writeText("0");  }  generatedXML.writeElement("D","depth",XMLWriter.CLOSING);  generatedXML.writeElement("D","owner",XMLWriter.OPENING);  generatedXML.writeText(owner);  generatedXML.writeElement("D","owner",XMLWriter.CLOSING);  generatedXML.writeElement("D","timeout",XMLWriter.OPENING);  long timeout=(expiresAt - System.currentTimeMillis()) / 1000;  generatedXML.writeText("Second-" + timeout);  generatedXML.writeElement("D","timeout",XMLWriter.CLOSING);  generatedXML.writeElement("D","locktoken",XMLWriter.OPENING);  Enumeration<String> tokensList=tokens.elements();  while (tokensList.hasMoreElements()) {    generatedXML.writeElement("D","href",XMLWriter.OPENING);    generatedXML.writeText("opaquelocktoken:" + tokensList.nextElement());    generatedXML.writeElement("D","href",XMLWriter.CLOSING);  }  generatedXML.writeElement("D","locktoken",XMLWriter.CLOSING);  generatedXML.writeElement("D","activelock",XMLWriter.CLOSING);}  }
class C{  private void parseMajorVersion(String majorVer) throws SAMLException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("FSSAMLRequest(Element): invalid " + "MajorVersion",e);    }    throw new SAMLRequesterException(FSUtils.BUNDLE_NAME,"wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("FSSAMLRequest(Element): " + "MajorVersion of the Request is too high.");      }      throw new SAMLRequestVersionTooHighException(FSUtils.BUNDLE_NAME,"requestVersionTooHigh",null);    } else {      if (SAMLUtils.debug.messageEnabled()) {        SAMLUtils.debug.message("FSSAMLRequest(Element): " + "MajorVersion of the Request is too low.");      }      throw new SAMLRequestVersionTooLowException(FSUtils.BUNDLE_NAME,"requestVersionTooLow",null);    }  }}  }
class C{  @DataProvider(name="caseFoldRuleData") public Object[][] createIgnoreRuleData(){  return new Object[][]{{"12345678","12345678",ConditionResult.TRUE},{"ABC45678","abc45678",ConditionResult.TRUE},{"\u0020foo\u0020bar\u0020\u0020","foo bar",ConditionResult.TRUE},{"test\u00AD\u200D","test",ConditionResult.TRUE},{"foo\u000Bbar","foo\u0020bar",ConditionResult.TRUE},{"foo\u070Fbar","foobar",ConditionResult.TRUE},{"foo\u0149bar","foo\u02BC\u006Ebar",ConditionResult.TRUE},{"foo\u017Bbar","foo\u017Cbar",ConditionResult.TRUE},{"foo\u017BBAR","foo\u017Cbar",ConditionResult.TRUE}};}  }
class C{  @Override public void firePropertyChange(String propertyName,float oldValue,float newValue){}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  logger.info("Got an INVITE  " + request);  try {    logger.info("shootme: got an Invite sending OK");    Response response=protocolObjects.messageFactory.createResponse(180,request);    ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);      logger.info("Server transaction created!" + request);      logger.info("Dialog = " + st.getDialog());      if (st.getDialog().getApplicationData() == null) {        st.getDialog().setApplicationData(new ApplicationData());      }    } else {      logger.info("This is a RE INVITE ");      ReInviteTest.assertSame("Dialog mismatch ",st.getDialog(),this.dialog);    }    logger.info("got a server tranasaction " + st);    byte[] content=request.getRawContent();    if (content != null) {      logger.info(" content = " + new String(content));      ContentTypeHeader contentTypeHeader=protocolObjects.headerFactory.createContentTypeHeader("application","sdp");      logger.info("response = " + response);      response.setContent(content,contentTypeHeader);    }    dialog=st.getDialog();    if (dialog != null) {      logger.info("Dialog " + dialog);      logger.info("Dialog state " + dialog.getState());    }    st.sendResponse(response);    response=protocolObjects.messageFactory.createResponse(200,request);    toHeader=(ToHeader)response.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    response.addHeader(contactHeader);    st.sendResponse(response);    logger.info("TxState after sendResponse = " + st.getState());    this.inviteTid=st;  } catch (  Exception ex) {    String s="unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  private static String encode_base64(byte d[],int len) throws IllegalArgumentException {  int off=0;  StringBuilder sb=new StringBuilder();  int c1, c2;  if (len <= 0 || len > d.length) {    throw new IllegalArgumentException("Invalid len");  }  while (off < len) {    c1=d[off++] & 0xff;    sb.append(base64_code[(c1 >> 2) & 0x3f]);    c1=(c1 & 0x03) << 4;    if (off >= len) {      sb.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 4) & 0x0f;    sb.append(base64_code[c1 & 0x3f]);    c1=(c2 & 0x0f) << 2;    if (off >= len) {      sb.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 6) & 0x03;    sb.append(base64_code[c1 & 0x3f]);    sb.append(base64_code[c2 & 0x3f]);  }  return sb.toString();}  }
class C{  public static PasswordModifyExtendedRequest copyOfPasswordModifyExtendedRequest(final PasswordModifyExtendedRequest request){  return new PasswordModifyExtendedRequestImpl(request);}  }
class C{  public X509CertificateHolderSelector(X500Name issuer,BigInteger serialNumber){  this(issuer,serialNumber,null);}  }
class C{  public void paint(Graphics g,JComponent c){}  }
class C{  public Boolean isContinueStraight(){  return continueStraight;}  }
class C{  @Override public int doFinal(ByteBuffer inBuffer,ByteBuffer outBuffer) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException {  int uptLen=update(inBuffer,outBuffer);  int[] outlen=new int[1];  int retVal=OpenSslNativeJna.EVP_CipherFinal_ex(context,outBuffer,outlen);  throwOnError(retVal);  int len=uptLen + outlen[0];  outBuffer.position(outBuffer.position() + outlen[0]);  return len;}  }
class C{  public void insert(Component component,int index){  if (index < 0) {    throw new IllegalArgumentException("index less than zero.");  }  int nitems=getComponentCount();  Vector<Component> tempItems=new Vector<Component>();  for (int i=index; i < nitems; i++) {    tempItems.addElement(getComponent(index));    remove(index);  }  add(component);  for (  Component tempItem : tempItems) {    add(tempItem);  }}  }
class C{  public void addTemplateAttribute(String name,String value){  modify(name,value,ModificationType.ADD);}  }
class C{  private boolean isJavaClassAcceptable(ExtendedOperationHandlerCfg config,List<LocalizableMessage> unacceptableReasons){  String className=config.getJavaClass();  ExtendedOperationHandlerCfgDefn d=ExtendedOperationHandlerCfgDefn.getInstance();  ClassPropertyDefinition pd=d.getJavaClassPropertyDefinition();  try {    Class<? extends ExtendedOperationHandler> theClass=pd.loadClass(className,ExtendedOperationHandler.class);    ExtendedOperationHandler extOpHandler=theClass.newInstance();    return extOpHandler.isConfigurationAcceptable(config,unacceptableReasons);  } catch (  Exception e) {    logger.traceException(e);    unacceptableReasons.add(ERR_CONFIG_EXTOP_INVALID_CLASS.get(className,config.dn(),e));    return false;  }}  }
class C{  public boolean match(Event event){  String eventAttributeData=event.getAttribute(eventAttribute);  DataType leftHandSide=FactoryDataType.createObject(filterOnDataType,eventAttributeData);  DataType.Filter comparisonFilter=FactoryDataType.getFilterFromString(filterOnDataType,filter);  Log.d("match","filterOnDataType is : " + filterOnDataType + " comparison is : "+ filter);  DataType rightHandSide=FactoryDataType.createObject(compareWithDataType,compareWithData);  return leftHandSide.matchFilter(comparisonFilter,rightHandSide);}  }
class C{  public DTMIterator createDTMIterator(int whatToShow,DTMFilter filter,boolean entityReferenceExpansion){  return m_dtmManager.createDTMIterator(whatToShow,filter,entityReferenceExpansion);}  }
class C{  public InvalidException(String message){  super(message);}  }
class C{  public String toXMLString() throws FSMsgException {  String xml=this.toXMLString(true,false);  return xml;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementretrieveattrvalue.class,args);}  }
class C{  public void resetBuffer(boolean resetWriterStreamFlags){  if (isCommitted()) {    throw new IllegalStateException(sm.getString("coyoteResponse.resetBuffer.ise"));  }  outputBuffer.reset(resetWriterStreamFlags);  if (resetWriterStreamFlags) {    usingOutputStream=false;    usingWriter=false;    isCharacterEncodingSet=false;  }}  }
class C{  private int up(){  Item i=new Item();  int res=0;  if (ns.size() == 0) {    return -1;  }  if (cur != 0 && tt.sc[cur] == 0) {    return tt.lo[cur];  }  boolean climb=true;  while (climb) {    i=(Item)ns.pop();    i.child++;switch (i.child) {case (char)1:      if (tt.sc[i.parent] != 0) {        res=tt.eq[i.parent];        ns.push(new Item(i));        ks.append(tt.sc[i.parent]);      } else {        i.child++;        ns.push(new Item(i));        res=tt.hi[i.parent];      }    climb=false;  break;case (char)2:res=tt.hi[i.parent];ns.push(new Item(i));if (ks.length() > 0) {ks.setLength(ks.length() - 1);}climb=false;break;default :if (ns.size() == 0) {return -1;}climb=true;break;}}return res;}  }
class C{  public AccessDeniedException(final Throwable cause){  this(cause.getMessage());}  }
class C{  public MidiFileFormat(int type,float divisionType,int resolution,int bytes,long microseconds){  this.type=type;  this.divisionType=divisionType;  this.resolution=resolution;  this.byteLength=bytes;  this.microsecondLength=microseconds;  this.properties=null;}  }
class C{  public CharSequenceReader(CharSequence charSequence){  this.charSequence=charSequence != null ? charSequence : "";}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void handleDeleteConfigButtonRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(AUTH_CONFIG_TABLE);  table.restoreStateData();  CCActionTableModel tableModel=(CCActionTableModel)propertySheetModel.getModel(AUTH_CONFIG_TABLE);  Integer[] selected=tableModel.getSelectedRows();  Set configurations=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    tableModel.setRowIndex(selected[i].intValue());    configurations.add((String)tableModel.getValue(CONFIG_NAME_COLUMN_DATA));  }  try {    AuthConfigurationModel m=(AuthConfigurationModel)getConfigModel();    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    if ((curRealm == null) || (curRealm.length() == 0)) {      curRealm=AMModelBase.getStartDN(getRequestContext().getRequest());    }    m.deleteAuthConfiguration(curRealm,configurations);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.config.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","authentication.config.deleted.multiple");    }    removePageSessionAttribute(AUTH_CONFIG_TABLE);  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public ObjectHolder(){}  }
class C{  private boolean doCommonRegistration(){  try {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("user id is " + userID);      FSUtils.debug.message("To write account fed info to DS");    }    if (oldAcctKey != null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Old Account Key : " + oldAcctKey);      }      String oldNameIDValue=oldAcctKey.getName();      FSAccountFedInfo oldInfo=managerInst.readAccountFedInfo(userID,remoteEntityId,oldNameIDValue);      if (oldInfo != null) {        managerInst.removeAccountFedInfo(userID,oldInfo);      }      managerInst.writeAccountFedInfo(userID,newAcctKey,newAcctInfo,oldAcctKey);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Old Account Key : " + oldAcctKey);      }      if (acctInfo != null) {        managerInst.removeAccountFedInfo(userID,acctInfo);      }      managerInst.writeAccountFedInfo(userID,newAcctKey,newAcctInfo);    }    if ((ssoToken != null) && (hostedProviderRole.equalsIgnoreCase(IFSConstants.SP))) {      FSSessionManager sessManager=FSSessionManager.getInstance(metaAlias);      FSSession ssoSession=sessManager.getSession(ssoToken);      if (ssoSession != null) {        ssoSession.setAccountFedInfo(newAcctInfo);      }    }    return true;  } catch (  FSAccountMgmtException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Error when writing user information:",e);    }    return false;  }}  }
class C{  @Override public Class<?> resolve(String alias){  return ALIASES.get(alias);}  }
class C{  public static boolean verifySignedResponse(String pepEntityID,String pdpEntityID,Response response) throws SAML2Exception {  String classMethod="QueryClient:verifySignedResponse: ";  String realm="/";  XACMLAuthzDecisionQueryConfigElement pepConfig=getPEPConfig(realm,pepEntityID);  String wantResponseSigned=getAttributeValueFromPEPConfig(pepConfig,"wantXACMLAuthzDecisionResponseSigned");  boolean valid;  if (wantResponseSigned != null && wantResponseSigned.equalsIgnoreCase("true")) {    XACMLPDPDescriptorElement pdpDescriptor=saml2MetaManager.getPolicyDecisionPointDescriptor(null,pdpEntityID);    Set<X509Certificate> signingCerts=KeyUtil.getPDPVerificationCerts(pdpDescriptor,pdpEntityID);    if (!signingCerts.isEmpty()) {      valid=response.isSignatureValid(signingCerts);      if (debug.messageEnabled()) {        debug.message(classMethod + "Signature is valid :" + valid);      }    } else {      debug.error(classMethod + "Incorrect configuration for Signing Certificate.");      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("metaDataError"));    }  } else {    if (debug.messageEnabled()) {      debug.message(classMethod + "Response doesn't need to be verified.");    }    valid=true;  }  return valid;}  }
class C{  public static int v(String tag,String msg,Throwable tr){  return isPrint && msg != null ? android.util.Log.v(tag,msg,tr) : -1;}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    return entryForNullKey != null;  }  int hash=key.hashCode();  hash^=(hash >>> 20) ^ (hash >>> 12);  hash^=(hash >>> 7) ^ (hash >>> 4);  HashMapEntry<K,V>[] tab=table;  for (HashMapEntry<K,V> e=tab[hash & (tab.length - 1)]; e != null; e=e.next) {    K eKey=e.key;    if (eKey == key || (e.hash == hash && key.equals(eKey))) {      return true;    }  }  return false;}  }
class C{  public HashSet(){  map=new HashMap<>();}  }
class C{  public InvalidArgumentException(String message){  super(message);}  }
class C{  public boolean hashData(){  return hashData;}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  processRequest(request,response);}  }
class C{  public void error(XPathContext xctxt,int sourceNode,String msg,Object[] args) throws javax.xml.transform.TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);  ErrorListener ehandler=xctxt.getErrorListener();  if (null != ehandler) {    ehandler.fatalError(new TransformerException(fmsg,(SAXSourceLocator)xctxt.getSAXLocator()));  } else {    SourceLocator slocator=xctxt.getSAXLocator();    System.out.println(fmsg + "; file " + slocator.getSystemId()+ "; line "+ slocator.getLineNumber()+ "; column "+ slocator.getColumnNumber());  }}  }
class C{  public AMSearchResults searchGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  String filter="(|" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ ")";  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,searchControl);}  }
class C{  private void verifyHostName(final X509Certificate[] chain) throws CertificateException {  final X500Principal principal=chain[0].getSubjectX500Principal();  try {    final List<String> dnsNamePatterns=new ArrayList<>(0);    final List<String> ipAddresses=new ArrayList<>(0);    final List<Object> allOthers=new ArrayList<>(0);    getSanGeneralNames(chain[0],dnsNamePatterns,ipAddresses,allOthers);    final boolean sanIsCritical=getSanCriticality(chain[0]);    final InetAddress hostAddress=toIpAddress(hostName);    if (hostAddress != null) {      if (verifyIpAddresses(hostAddress,ipAddresses,principal,sanIsCritical)) {        return;      }    } else {      if (verifyDnsNamePatterns(hostName,dnsNamePatterns,principal,sanIsCritical)) {        return;      }    }    if (!allOthers.isEmpty() && sanIsCritical) {      throw new CertificateException(ERR_CERT_NO_MATCH_ALLOTHERS.get(principal,hostName).toString());    }    final DN dn=DN.valueOf(principal.getName(),Schema.getCoreSchema());    final String certSubjectHostName=getLowestCommonName(dn);    if (hostNameMatchesPattern(hostName,certSubjectHostName)) {      return;    }    throw new CertificateException(ERR_CERT_NO_MATCH_SUBJECT.get(principal,hostName).toString());  } catch (  final CertificateException e) {    logger.warn(LocalizableMessage.raw("Certificate verification problem for: %s",principal),e);    throw e;  }}  }
class C{  public static boolean isConformantSchemeName(String p_scheme){  if (p_scheme == null || p_scheme.trim().length() == 0) {    return false;  }  if (!isAlpha(p_scheme.charAt(0))) {    return false;  }  char testChar;  for (int i=1; i < p_scheme.length(); i++) {    testChar=p_scheme.charAt(i);    if (!isAlphanum(testChar) && SCHEME_CHARACTERS.indexOf(testChar) == -1) {      return false;    }  }  return true;}  }
class C{  public String answerAsString(){  if (result == null) {    return null;  }  return Base64.encode(result);}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  NodeList elementList;  Node testAddress;  NamedNodeMap attributes;  Node newAttribute;  Node setNode;  doc1=(Document)load("staff",true);  doc2=(Document)load("staff",true);  elementList=doc1.getElementsByTagName("address");  testAddress=elementList.item(2);  newAttribute=doc2.createAttribute("newAttribute");  attributes=testAddress.getAttributes();{    boolean success=false;    try {      setNode=attributes.setNamedItem(newAttribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  void update(BackendDescriptor backend){  updateBaseDNCombo(backend);  backendName.setText(backend.getBackendID());}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation());  unchecked(null);}  }
class C{  private String stateToString(long s){  return super.toString() + "[phase = " + phaseOf(s)+ " parties = "+ partiesOf(s)+ " arrived = "+ arrivedOf(s)+ "]";}  }
class C{  public LogPublisherErrorHandler(DN publisherConfigDN){  this.publisherConfigDN=publisherConfigDN;}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  public int difference(String s1,String s2) throws EncoderException {  return SoundexUtils.difference(this,s1,s2);}  }
class C{  void onAddToDatabase(Context context,ContentValues values){  values.put(LauncherSettings.BaseLauncherColumns.ITEM_TYPE,itemType);  values.put(LauncherSettings.Favorites.CONTAINER,container);  values.put(LauncherSettings.Favorites.SCREEN,screenId);  values.put(LauncherSettings.Favorites.CELLX,cellX);  values.put(LauncherSettings.Favorites.CELLY,cellY);  values.put(LauncherSettings.Favorites.SPANX,spanX);  values.put(LauncherSettings.Favorites.SPANY,spanY);  values.put(LauncherSettings.Favorites.RANK,rank);  long serialNumber=UserManagerCompat.getInstance(context).getSerialNumberForUser(user);  values.put(LauncherSettings.Favorites.PROFILE_ID,serialNumber);  if (screenId == Workspace.EXTRA_EMPTY_SCREEN_ID) {    throw new RuntimeException("Screen id should not be EXTRA_EMPTY_SCREEN_ID");  }}  }
class C{  public static String convertFromLong(long value){  return String.valueOf(value);}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  Rectangle alloc=(Rectangle)a;  int x=(int)fx;  int y=(int)fy;  if (y < alloc.y) {    return getStartOffset();  } else   if (y > alloc.y + alloc.height) {    return getEndOffset() - 1;  } else {    alloc.height=metrics.getHeight();    int line=(alloc.height > 0 ? (y - alloc.y) / alloc.height : lineCount - 1);    if (line >= lineCount) {      return getEndOffset() - 1;    } else {      int p0=getStartOffset();      int p1;      if (lineCount == 1) {        p1=getEndOffset();      } else {        int[] lineEnds=getLineEnds();        p1=p0 + lineEnds[line];        if (line > 0) {          p0+=lineEnds[line - 1];        }      }      if (x < alloc.x) {        return p0;      } else       if (x > alloc.x + alloc.width) {        return p1 - 1;      } else {        Segment segment=SegmentCache.getSharedSegment();        loadText(segment,p0,p1);        int n=Utilities.getTabbedTextOffset(segment,metrics,alloc.x,x,WrappedPlainView.this,p0);        SegmentCache.releaseSharedSegment(segment);        return Math.min(p0 + n,p1 - 1);      }    }  }}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public UnexpectedException(String s){  super(s);}  }
class C{  public void testBitLengthZero(){  BigInteger aNumber=new BigInteger("0");  assertEquals(0,aNumber.bitLength());}  }
class C{  public void runTest() throws Throwable {  Document doc;  String documentName;  doc=(Document)load("staff",false);  documentName=doc.getNodeName();  assertEquals("documentNodeName","#document",documentName);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  @SuppressWarnings("unused") @DataProvider(name="testInitWithFullUpdateExcludePrecommitProvider") private Object[][] testInitWithFullUpdateExcludePrecommitProvider(){  return new Object[][]{{1,true,new String[]{"inetOrgPerson","displayName"}}};}  }
class C{  private final boolean compareAndSetHead(Node update){  return unsafe.compareAndSwapObject(this,headOffset,null,update);}  }
class C{  private boolean verifyLogRecord(String[] record,int macPos) throws Exception {  StringBuilder data=new StringBuilder();  for (int m=0; m < record.length - 2; m++) {    data.append(record[m]);  }  curMAC=record[macPos];  verified=helper.verifyMAC(data.toString(),helper.toByteArray(curMAC));  return verified;}  }
class C{  public synchronized void stop(){  doStop();}  }
class C{  public boolean drill_allowed(){  return (first_layer() == last_layer());}  }
class C{  public void destroy(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("destroy",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.destroy();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public CMapContentParser(PdfTokenizer tokeniser){  this.tokeniser=tokeniser;}  }
class C{  public ModifyResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;}  }
class C{  public int intValue(){  return (int)longValue;}  }
class C{  public LogConfigurationException(Throwable cause){  this((cause == null) ? null : cause.toString(),cause);}  }
class C{  synchronized public boolean release(DTM dtm,boolean shouldHardDelete){  if (DEBUG) {    System.out.println("Releasing " + (shouldHardDelete ? "HARD" : "soft") + " dtm="+ dtm.getDocumentBaseURI());  }  if (dtm instanceof SAX2DTM) {    ((SAX2DTM)dtm).clearCoRoutine();  }  if (dtm instanceof DTMDefaultBase) {    org.apache.xml.utils.SuballocatedIntVector ids=((DTMDefaultBase)dtm).getDTMIDs();    for (int i=ids.size() - 1; i >= 0; --i)     m_dtms[ids.elementAt(i) >>> DTMManager.IDENT_DTM_NODE_BITS]=null;  } else {    int i=getDTMIdentity(dtm);    if (i >= 0) {      m_dtms[i >>> DTMManager.IDENT_DTM_NODE_BITS]=null;    }  }  dtm.documentRelease();  return true;}  }
class C{  public final void testGetReductionPolynomial02(){  assertNull(new ECFieldF2m(2000).getReductionPolynomial());}  }
class C{  public SizeFileComparator(){  this.sumDirectoryContents=false;}  }
class C{  protected static void lookupMethodResource(Context context,Object instance,Method method,String name,Class<?> clazz) throws NamingException, IllegalAccessException, InvocationTargetException {  if (!Introspection.isValidSetter(method)) {    throw new IllegalArgumentException(sm.getString("defaultInstanceManager.invalidInjection"));  }  Object lookedupResource;  boolean accessibility;  String normalizedName=normalize(name);  if ((normalizedName != null) && (normalizedName.length() > 0)) {    lookedupResource=context.lookup(normalizedName);  } else {    lookedupResource=context.lookup(clazz.getName() + "/" + Introspection.getPropertyName(method));  }synchronized (method) {    accessibility=method.isAccessible();    method.setAccessible(true);    method.invoke(instance,lookedupResource);    method.setAccessible(accessibility);  }}  }
class C{  public ByteBufferOutputStream(int size){  if (size < 1)   size=128;  buf=new byte[size];}  }
class C{  public boolean isDecayable(){  return (getData() & 0x4) == 0;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException {  setHints(null);  return decodeInternal(image);}  }
class C{  public void cleanup(){  if (in != null)   try {    in.close();  } catch (  Exception ignore) {  }  if (out != null)   try {    out.close();  } catch (  Exception ignore) {  }  in=null;  out=null;  size=0;  closed=true;  data=null;  nrOfMessagesProcessed=0;  totalNrOfMessages=0;  msgBuffer.clear();  lastMessageProcessed=null;}  }
class C{  @SuppressWarnings("deprecation") public String toString(){  int hour=super.getHours();  int minute=super.getMinutes();  int second=super.getSeconds();  String hourString;  String minuteString;  String secondString;  if (hour < 10) {    hourString="0" + hour;  } else {    hourString=Integer.toString(hour);  }  if (minute < 10) {    minuteString="0" + minute;  } else {    minuteString=Integer.toString(minute);  }  if (second < 10) {    secondString="0" + second;  } else {    secondString=Integer.toString(second);  }  return (hourString + ":" + minuteString+ ":"+ secondString);}  }
class C{  public static boolean isDualRole(String hostEntityId,String realm){  try {    SPSSOConfigElement spConfig=saml2MetaManager.getSPSSOConfig(realm,hostEntityId);    if (spConfig == null) {      return false;    }    IDPSSOConfigElement idpConfig=saml2MetaManager.getIDPSSOConfig(realm,hostEntityId);    return idpConfig != null;  } catch (  Exception e) {    return false;  }}  }
class C{  public void handleTblSubConfigHrefNameRequest(RequestInvocationEvent event){  String configName=(String)getDisplayFieldValue(AMPropertySheetModel.TBL_SUB_CONFIG_HREF_NAME);  ArrayList subConfigNames=(ArrayList)getPageSessionAttribute(AMServiceProfile.PG_SESSION_SUB_CONFIG_IDS);  if (subConfigNames == null) {    subConfigNames=new ArrayList();    subConfigNames.add("/");    setPageSessionAttribute(AMServiceProfile.PG_SESSION_SUB_CONFIG_IDS,subConfigNames);  }  subConfigNames.add(0,configName);  addViewBeanClassToPageSession();  AMPostViewBean vb=(AMPostViewBean)getViewBean(AMPostViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.setTargetViewBeanURL("../service/SubConfigEdit");  vb.forwardTo(getRequestContext());}  }
class C{  public boolean isTypeSubstituted(){  if (value == null)   return false;  return value.getClass() != declaredType;}  }
class C{  public BasicHeaderElementIterator(final HeaderIterator headerIterator,final HeaderValueParser parser){  if (headerIterator == null) {    throw new IllegalArgumentException("Header iterator may not be null");  }  if (parser == null) {    throw new IllegalArgumentException("Parser may not be null");  }  this.headerIt=headerIterator;  this.parser=parser;}  }
class C{  public int indexOf(String subString,int start){  if (start < 0) {    start=0;  }  int subCount=subString.length();  if (subCount > 0) {    if (subCount + start > count) {      return -1;    }    char firstChar=subString.charAt(0);    while (true) {      int i=start;      boolean found=false;      for (; i < count; i++) {        if (value[i] == firstChar) {          found=true;          break;        }      }      if (!found || subCount + i > count) {        return -1;      }      int o1=i, o2=0;      while (++o2 < subCount && value[++o1] == subString.charAt(o2)) {      }      if (o2 == subCount) {        return i;      }      start=i + 1;    }  }  return (start < count || start == 0) ? start : count;}  }
class C{  private int parseBranch(final int startLineNumber,final String startLine,final String[] lines,final TemplateData templateData,final List<LocalizableMessage> warnings) throws DecodeException {  final String[] branchLines=parseLinesUntilEndOfBlock(startLineNumber,startLine,lines,warnings);  final Branch branch=parseBranchDefinition(branchLines,startLineNumber,templateData.tags,warnings);  final DN branchDN=branch.getBranchDN();  if (templateData.branches.containsKey(branchDN)) {    throw DecodeException.fatalError(ERR_ENTRY_GENERATOR_CONFLICTING_BRANCH_DN.get(String.valueOf(branchDN),startLineNumber + 1));  }  templateData.branches.put(branchDN,branch);  return startLineNumber + branchLines.length;}  }
class C{  private void invalidByte(int position,int count) throws UTFDataFormatException {  throw new UTFDataFormatException(Localizer.getMessage("jsp.error.xml.invalidByte",Integer.toString(position),Integer.toString(count)));}  }
class C{  @Override public Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByField2(field2,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length < IV.length) {      System.arraycopy(iv,0,IV,IV.length - iv.length,iv.length);      for (int i=0; i < IV.length - iv.length; i++) {        IV[i]=0;      }    } else {      System.arraycopy(iv,0,IV,0,IV.length);    }    reset();    if (ivParam.getParameters() != null) {      cipher.init(true,ivParam.getParameters());    }  } else {    reset();    if (params != null) {      cipher.init(true,params);    }  }}  }
class C{  public boolean contains(Object e){  if (e == null)   return false;  Class<?> eClass=e.getClass();  if (eClass != elementType && eClass.getSuperclass() != elementType)   return false;  return (elements & (1L << ((Enum<?>)e).ordinal())) != 0;}  }
class C{  public PollingWaitAssistant(final long timeoutInMilliSeconds,final long shortTimeout,final long medTimeout,final long longTimeout){  this.timeoutInMilliSeconds=timeoutInMilliSeconds;  this.longElapsedThreshold=timeoutInMilliSeconds / 2;  this.mediumElapsedThreshold=timeoutInMilliSeconds / 4;  this.shortTimeout=shortTimeout;  this.medTimeout=medTimeout;  this.longTimeout=longTimeout;}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("Usage: FileMessageFactory fileToBeRead fileToBeWritten");  System.out.println("Usage: This will make a copy of the file on the local file system");  FileMessageFactory read=getInstance(new File(args[0]),false);  FileMessageFactory write=getInstance(new File(args[1]),true);  FileMessage msg=new FileMessage(null,args[0],args[0]);  msg=read.readMessage(msg);  if (msg == null) {    System.out.println("Empty input file : " + args[0]);    return;  }  System.out.println("Expecting to write " + msg.getTotalNrOfMsgs() + " messages.");  int cnt=0;  while (msg != null) {    write.writeMessage(msg);    cnt++;    msg=read.readMessage(msg);  }  System.out.println("Actually wrote " + cnt + " messages.");}  }
class C{  public TransportNotSupportedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public final void testGetPrimeExponentQ(){  RSAMultiPrimePrivateCrtKeySpec ks=new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);  assertTrue(BigInteger.ONE.equals(ks.getPrimeExponentQ()));}  }
class C{  public boolean swap(BrdViaInfo p_1,BrdViaInfo p_2){  int index_1=vinfo_list.indexOf(p_1);  int index_2=vinfo_list.indexOf(p_2);  if (index_1 < 0 || index_2 < 0) {    return false;  }  if (index_1 == index_2) {    return true;  }  this.vinfo_list.set(index_1,p_2);  this.vinfo_list.set(index_2,p_1);  return true;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AddressType createAddressType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AddressTypeImpl();}  }
class C{  public static SearchResultReference unmodifiableSearchResultReference(final SearchResultReference reference){  if (reference instanceof UnmodifiableSearchResultReferenceImpl) {    return reference;  }  return new UnmodifiableSearchResultReferenceImpl(reference);}  }
class C{  private void readV2Tag(File file,int loadOptions,int startByte) throws IOException, TagException {  if (startByte >= AbstractID3v2Tag.TAG_HEADER_LENGTH) {    logger.finer("Attempting to read id3v2tags");    FileInputStream fis=null;    FileChannel fc=null;    ByteBuffer bb;    try {      fis=new FileInputStream(file);      fc=fis.getChannel();      bb=ByteBuffer.allocate(startByte);      fc.read(bb,0);    }  finally {      if (fc != null) {        fc.close();      }      if (fis != null) {        fis.close();      }    }    try {      bb.rewind();      if ((loadOptions & LOAD_IDV2TAG) != 0) {        logger.config("Attempting to read id3v2tags");        try {          this.setID3v2Tag(new ID3v24Tag(bb,file.getName()));        } catch (        TagNotFoundException ex) {          logger.config("No id3v24 tag found");        }        try {          if (id3v2tag == null) {            this.setID3v2Tag(new ID3v23Tag(bb,file.getName()));          }        } catch (        TagNotFoundException ex) {          logger.config("No id3v23 tag found");        }        try {          if (id3v2tag == null) {            this.setID3v2Tag(new ID3v22Tag(bb,file.getName()));          }        } catch (        TagNotFoundException ex) {          logger.config("No id3v22 tag found");        }      }    }  finally {      bb.clear();    }  } else {    logger.config("Not enough room for valid id3v2 tag:" + startByte);  }}  }
class C{  public boolean start_read(InputStream p_input_stream){  scanner=new LogfileScanner(p_input_stream);  return (scanner != null);}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public InvalidPreferencesFormatException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static JCheckBox makeJCheckBox(LocalizableMessage text,LocalizableMessage tooltip,TextStyle style){  JCheckBox cb=new JCheckBox();  cb.setOpaque(false);  if (text != null) {    cb.setText(text.toString());  }  if (tooltip != null) {    cb.setToolTipText(tooltip.toString());  }  setTextStyle(cb,style);  return cb;}  }
class C{  TextComponent(String text) throws HeadlessException {  GraphicsEnvironment.checkHeadless();  this.text=(text != null) ? text : "";  setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (wildcards != null) {    for (int i=0; i < wildcards.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(wildcards[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  @Override public String toString(){  return super.toString() + "[type=" + type+ "][message="+ message+ "]";}  }
class C{  @Override public void stop(int svc) throws ChannelException {  if (getNext() != null)   getNext().stop(svc);  channel=null;}  }
class C{  public FacebookGraphObjectException(String message){  super(message);}  }
class C{  public boolean isAffiliateMember(String realm,String providerID,String affiliationID) throws IDFFMetaException {  boolean isAffiliateMember=false;  if ((realm == null) || (realm.length() == 0)) {    realm=ROOT_REALM;  }  if (providerID != null && affiliationID != null) {    Set entityIDSet=getAllEntities(realm);    if (entityIDSet != null && !entityIDSet.isEmpty()) {      Iterator entityIterator=entityIDSet.iterator();      while (entityIterator.hasNext()) {        String entityID=(String)entityIterator.next();        AffiliationDescriptorType affDescriptor=getAffiliationDescriptor(realm,entityID);        if (affDescriptor != null) {          String affID=affDescriptor.getAffiliationID();          if (affID != null && affID.equals(affiliationID)) {            List affMemberList=affDescriptor.getAffiliateMember();            if (affMemberList != null && !affMemberList.isEmpty() && affMemberList.contains(providerID)) {              isAffiliateMember=true;              break;            }          }        }      }    }  }  String[] args={providerID,affiliationID,realm};  LogUtil.access(Level.INFO,LogUtil.IS_AFFILIATE_MEMBER_SUCCEEDED,args);  return isAffiliateMember;}  }
class C{  public SessionNotification parseXML(){  if (document == null) {    return null;  }  Element elem=document.getDocumentElement();  sessionNotification=new SessionNotification();  String temp=elem.getAttribute("vers");  sessionNotification.setNotificationVersion(temp);  temp=elem.getAttribute("notid");  sessionNotification.setNotificationID(temp);  NodeList nodelist=elem.getElementsByTagName("Session");  if (nodelist != null && nodelist.getLength() != 0) {    Element sess=(Element)nodelist.item(0);    if (sess != null) {      sessionNotification.setSessionInfo(SessionResponseParser.parseSessionElement(sess));    }  }  nodelist=elem.getElementsByTagName("Type");  if (nodelist != null && nodelist.getLength() != 0) {    Element type=(Element)nodelist.item(0);    if (type != null) {      try {        int sType=(new Integer(SessionRequestParser.parseCDATA(type))).intValue();        sessionNotification.setNotificationType(sType);      } catch (      Exception e) {        SessionRequestParser.debug.message("Session.Notif Type",e);      }    }  }  nodelist=elem.getElementsByTagName("Time");  if (nodelist != null && nodelist.getLength() != 0) {    Element time=(Element)nodelist.item(0);    if (time != null) {      try {        long sTime=(new Long(SessionRequestParser.parseCDATA(time))).longValue();        sessionNotification.setNotificationTime(sTime);      } catch (      Exception e) {        SessionRequestParser.debug.message("Session.Notif Time",e);      }    }  }  return sessionNotification;}  }
class C{  public ReasonParser(String reason){  super(reason);}  }
class C{  @Override public void close() throws NamingException {}  }
class C{  public static Object showInternalInputDialog(Component parentComponent,Object message,String title,int messageType,Icon icon,Object[] selectionValues,Object initialSelectionValue){  JOptionPane pane=new JOptionPane(message,messageType,OK_CANCEL_OPTION,icon,null,null);  pane.putClientProperty(PopupFactory_FORCE_HEAVYWEIGHT_POPUP,Boolean.TRUE);  Component fo=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  pane.setWantsInput(true);  pane.setSelectionValues(selectionValues);  pane.setInitialSelectionValue(initialSelectionValue);  JInternalFrame dialog=pane.createInternalFrame(parentComponent,title);  pane.selectInitialValue();  dialog.setVisible(true);  if (dialog.isVisible() && !dialog.isShowing()) {    Container parent=dialog.getParent();    while (parent != null) {      if (parent.isVisible() == false) {        parent.setVisible(true);      }      parent=parent.getParent();    }  }  try {    Method method=AccessController.doPrivileged(new ModalPrivilegedAction(Container.class,"startLWModal"));    if (method != null) {      method.invoke(dialog,(Object[])null);    }  } catch (  IllegalAccessException ex) {  }catch (  IllegalArgumentException ex) {  }catch (  InvocationTargetException ex) {  }  if (parentComponent instanceof JInternalFrame) {    try {      ((JInternalFrame)parentComponent).setSelected(true);    } catch (    java.beans.PropertyVetoException e) {    }  }  if (fo != null && fo.isShowing()) {    fo.requestFocus();  }  Object value=pane.getInputValue();  if (value == UNINITIALIZED_VALUE) {    return null;  }  return value;}  }
class C{  public void clearWelcomeFiles(String hostName,String contextPath,String version){  hostName=renameWildcardHost(hostName);  ContextVersion contextVersion=findContextVersion(hostName,contextPath,version,false);  if (contextVersion == null) {    return;  }  contextVersion.welcomeResources=new String[0];}  }
class C{  public WeakReference(T referent){  super(referent);}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.TransformationParametersElement createTransformationParametersElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.TransformationParametersElementImpl();}  }
class C{  public void mouseEntered(MouseEvent e){}  }
class C{  public boolean isAuthnContextMatching(List requestedACClassRefs,String acClassRef,String comparison,String realm,String hostEntityID){  Map authRefMap=getAuthRefMap(realm,hostEntityID);  return SAML2Utils.isAuthnContextMatching(requestedACClassRefs,acClassRef,comparison,authRefMap);}  }
class C{  public boolean equals(Object thatObject){  if (!(thatObject instanceof MimeType)) {    return false;  }  MimeType that=(MimeType)thatObject;  boolean isIt=((this.primaryType.equals(that.primaryType)) && (this.subType.equals(that.subType)) && (this.parameters.equals(that.parameters)));  return isIt;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public List<MappedMember> findFieldsByDesc(String text){  List<MappedMember> list=new ArrayList<MappedMember>();  for (  MappedMember mm : getFields()) {    if (mm.getDesc().equals(text)) {      list.add(mm);    }  }  return list;}  }
class C{  public SOAPClientException(String className){  this.className=className;}  }
class C{  public OpenDJLoggerFactory(){  loggerMap=new ConcurrentHashMap<>();}  }
class C{  private static long finishDecodingFraction(String value,int startPos,int year,int month,int day,int hour,int minute,int second,int multiplier) throws DirectoryException {  int length=value.length();  StringBuilder fractionBuffer=new StringBuilder(2 + length - startPos);  fractionBuffer.append("0.");  TimeZone timeZone=null;  outerLoop:   for (int i=startPos; i < length; i++) {    char c=value.charAt(i);switch (c) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      fractionBuffer.append(c);    break;case 'Z':  if (i != value.length() - 1) {    LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR.get(value,c);    throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);  }timeZone=TIME_ZONE_UTC_OBJ;break outerLoop;case '+':case '-':timeZone=getTimeZoneForOffset(value,i);break outerLoop;default :LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_FRACTION_CHAR.get(value,c);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}}if (fractionBuffer.length() == 2) {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_EMPTY_FRACTION.get(value);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}if (timeZone == null) {LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_NO_TIME_ZONE_INFO.get(value);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message);}Double fractionValue=Double.parseDouble(fractionBuffer.toString());long additionalMilliseconds=Math.round(fractionValue * multiplier);try {GregorianCalendar calendar=new GregorianCalendar();calendar.setLenient(false);calendar.setTimeZone(timeZone);calendar.set(year,month,day,hour,minute,second);calendar.set(Calendar.MILLISECOND,0);return calendar.getTimeInMillis() + additionalMilliseconds;} catch (Exception e) {logger.traceException(e);LocalizableMessage message=WARN_ATTR_SYNTAX_GENERALIZED_TIME_ILLEGAL_TIME.get(value,e);throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,message,e);}}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null) {    value=NULL_OBJECT;  }  for (int i=1; i < elementData.length; i=i + 2) {    if (elementData[i] == value) {      return true;    }  }  return false;}  }
class C{  public InvalidFileNameException(String pName,String pMessage){  super(pMessage);  name=pName;}  }
class C{  @Override public boolean isConfigurable(){  return delegate instanceof ThreadPoolExecutor;}  }
class C{  public void testShiftRightNegNonZeroesMul32(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,1,0,0,0,0,0,0,0};  int aSign=-1;  int number=64;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public static String decapitalize(String name){  if (name == null || name.length() == 0) {    return name;  }  if (name.length() > 1 && Character.isUpperCase(name.charAt(1)) && Character.isUpperCase(name.charAt(0))) {    return name;  }  char chars[]=name.toCharArray();  chars[0]=Character.toLowerCase(chars[0]);  return new String(chars);}  }
class C{  private boolean match(Class<?>[] declaredTypes,Class<?>[] actualTypes){  if (declaredTypes.length == actualTypes.length) {    for (int i=0; i < actualTypes.length; i++) {      if (actualTypes[i] == NULL.class)       continue;      if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))       continue;      return false;    }    return true;  } else {    return false;  }}  }
class C{  public void startEditingAtPath(TreePath path){  TreeUI tree=getUI();  if (tree != null)   tree.startEditingAtPath(this,path);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlenc.CipherReferenceType createCipherReferenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlenc.impl.CipherReferenceTypeImpl();}  }
class C{  public EntryAlreadyExistsException(Throwable cause){  super(cause);}  }
class C{  void importCipherKeyEntry(Entry entry) throws CryptoManagerException {  if (!entry.hasObjectClass(ocCipherKey)) {    return;  }  try {    String keyID=entry.parseAttribute(ATTR_CRYPTO_KEY_ID).asString();    int ivLengthBits=entry.parseAttribute(ATTR_CRYPTO_INIT_VECTOR_LENGTH_BITS).asInteger();    int keyLengthBits=entry.parseAttribute(ATTR_CRYPTO_KEY_LENGTH_BITS).asInteger();    String transformation=entry.parseAttribute(ATTR_CRYPTO_CIPHER_TRANSFORMATION_NAME).asString();    String compromisedTime=entry.parseAttribute(ATTR_CRYPTO_KEY_COMPROMISED_TIME).asString();    boolean isCompromised=compromisedTime != null;    Set<String> symmetricKeys=entry.parseAttribute(ATTR_CRYPTO_SYMMETRIC_KEY).asSetOfString();    SecretKey secretKey=decodeSymmetricKeyAttribute(symmetricKeys);    if (null != secretKey) {      cipherCryptoManager.importCipherKeyEntry(keyID,transformation,secretKey,keyLengthBits,ivLengthBits,isCompromised);      return;    }    String symmetricKey=getSymmetricKey(symmetricKeys);    if (symmetricKey == null) {      throw new CryptoManagerException(ERR_CRYPTOMGR_IMPORT_KEY_ENTRY_FAILED_TO_DECODE.get(entry.getName()));    }    secretKey=decodeSymmetricKeyAttribute(symmetricKey);    cipherCryptoManager.importCipherKeyEntry(keyID,transformation,secretKey,keyLengthBits,ivLengthBits,isCompromised);    writeValueToEntry(entry,symmetricKey);  } catch (  CryptoManagerException e) {    throw e;  }catch (  Exception ex) {    logger.traceException(ex);    throw new CryptoManagerException(ERR_CRYPTOMGR_IMPORT_KEY_ENTRY_FAILED_OTHER.get(entry.getName(),ex.getMessage()),ex);  }}  }
class C{  PasswordModifyExtendedResultImpl(final ResultCode resultCode){  super(resultCode);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.HeaderType createHeaderType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.HeaderTypeImpl();}  }
class C{  private static final <T>int find(MapElement<T>[] map,String name){  int a=0;  int b=map.length - 1;  if (b == -1) {    return -1;  }  if (name.compareTo(map[0].name) < 0) {    return -1;  }  if (b == 0) {    return 0;  }  int i=0;  while (true) {    i=(b + a) / 2;    int result=name.compareTo(map[i].name);    if (result > 0) {      a=i;    } else     if (result == 0) {      return i;    } else {      b=i;    }    if ((b - a) == 1) {      int result2=name.compareTo(map[b].name);      if (result2 < 0) {        return a;      } else {        return b;      }    }  }}  }
class C{  public Builder names(final String... names){  return names(asList(names));}  }
class C{  public void addIntHeader(String name,int value){  if (this._getHttpServletResponse() != null) {    this._getHttpServletResponse().addIntHeader(name,value);  }  if (internalHeaders.containsKey(name)) {    List<String> existingSet=internalHeaders.get(name);    existingSet.add(Integer.toString(value));    internalHeaders.put(name,existingSet);  } else {    List<String> iSet=new ArrayList<>();    iSet.add(String.valueOf(value));    internalHeaders.put(name,iSet);  }}  }
class C{  public void nodeClicked(RequestInvocationEvent event,int nodeID){  try {    AMViewBeanBase vb=getTabNodeAssociatedViewBean("cscGeneral",nodeID);    String tmp=(String)getPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID);    vb.setPageSessionAttribute(AMAdminConstants.PREVIOUS_TAB_ID,tmp);    unlockPageTrailForSwapping();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    debug.error("ServerEditGeneralViewBean.nodeClicked",e);    forwardTo();  }}  }
class C{  private void updateCacheSize(){  final int desiredMaxSize=contextCacheSize.getDesiredCacheSize();  final int actualMaxSize=cache.getMaxSize();  if (desiredMaxSize != actualMaxSize) {    final LeastRecentlyUsed<String,ContextHolder> newCache=new LeastRecentlyUsed<String,ContextHolder>(desiredMaxSize);    if (desiredMaxSize > cache.size()) {      for (      final Entry<String,ContextHolder> entry : cache.entrySet()) {        newCache.put(entry.getKey(),entry.getValue());      }    } else {      logger.warning("Shrinking ContextHolderCache in response to change of system setting that determines " + "the maximum number of allowable concurrent sessions. Some cache entries will.");      final LinkedList<Entry<String,ContextHolder>> entriesAsList=new LinkedList<Entry<String,ContextHolder>>(cache.entrySet());      final Iterator<Entry<String,ContextHolder>> itr=entriesAsList.descendingIterator();      final LinkedList<Entry<String,ContextHolder>> entriesToCopy=new LinkedList<Entry<String,ContextHolder>>();      int numberCopied=0;      while (itr.hasNext() && numberCopied++ < desiredMaxSize) {        final Entry<String,ContextHolder> entry=itr.next();        entriesToCopy.add(entry);      }      final Iterator<Entry<String,ContextHolder>> toCopyRevItr=entriesToCopy.descendingIterator();      while (toCopyRevItr.hasNext()) {        final Entry<String,ContextHolder> toCopy=toCopyRevItr.next();        newCache.put(toCopy.getKey(),toCopy.getValue());      }    }    cache=newCache;  }}  }
class C{  @Override public String format(DateTimeFormatter formatter){  Objects.requireNonNull(formatter,"formatter");  return formatter.format(this);}  }
class C{  private String createRegistrationAccessToken(Client client,OAuth2Request request) throws ServerException, NotFoundException {  final AccessToken rat=tokenStore.createAccessToken(null,OAuth2Constants.Bearer.BEARER,null,client.getClientID(),client.getClientID(),null,Collections.<String>emptySet(),null,null,null,request);  return rat.getTokenId();}  }
class C{  public void addParentObjectClassesChangedListener(SuperiorObjectClassesChangedListener listener){  listeners.add(listener);}  }
class C{  protected void stop(PrintWriter writer,String name,StringManager smClient){  if (debug >= 1) {    log(sm.getString("hostManagerServlet.stop",name));  }  if ((name == null) || name.length() == 0) {    writer.println(smClient.getString("hostManagerServlet.invalidHostName",name));    return;  }  Container host=engine.findChild(name);  if (host == null) {    writer.println(smClient.getString("hostManagerServlet.noHost",name));    return;  }  if (host == installedHost) {    writer.println(smClient.getString("hostManagerServlet.cannotStopOwnHost",name));    return;  }  if (!host.getState().isAvailable()) {    writer.println(smClient.getString("hostManagerServlet.alreadyStopped",name));    return;  }  try {    host.stop();    writer.println(smClient.getString("hostManagerServlet.stopped",name));  } catch (  Exception e) {    getServletContext().log(sm.getString("hostManagerServlet.stopFailed",name),e);    writer.println(smClient.getString("hostManagerServlet.stopFailed",name));    writer.println(smClient.getString("hostManagerServlet.exception",e.toString()));    return;  }}  }
class C{  public Text(String text){  if (null == text) {    throw new IllegalArgumentException();  }  this.text=text;}  }
class C{  public SessionNotificationParser(String xmlString){  document=XMLUtils.toDOMDocument(xmlString,SessionRequestParser.debug);}  }
class C{  public boolean isAcceptable(X509Certificate cert){  if (permitted_names == null) {    prepareNames();  }  byte[] bytes=getExtensionValue(cert,"2.5.29.17");  List<GeneralName> names;  try {    names=(bytes == null) ? new ArrayList<GeneralName>(1) : ((GeneralNames)GeneralNames.ASN1.decode(bytes)).getNames();  } catch (  IOException e) {    e.printStackTrace();    return false;  }  if ((excluded_names[4] != null) || (permitted_names[4] != null)) {    try {      names.add(new GeneralName(4,cert.getSubjectX500Principal().getName()));    } catch (    IOException e) {    }  }  return isAcceptable(names);}  }
class C{  public static synchronized void unregisterProvider(String providerID) throws SyncFactoryException {  initMapIfNecessary();  if (implementations.containsKey(providerID)) {    implementations.remove(providerID);  }}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public static ArrayList<String> readFileToLines(File file) throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(file)));  ArrayList<String> lines=new ArrayList<>();  String line;  while ((line=reader.readLine()) != null) {    lines.add(line);  }  return lines;}  }
class C{  public BooleanHolder(boolean initial){  value=initial;}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  IDRepoModel model=(IDRepoModel)getModel();  AMPropertySheet prop=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  String idRepoType=(String)propertySheetModel.getValue(IDREPO_TYPE);  String idRepoName=(String)propertySheetModel.getValue(IDREPO_NAME);  Map defaultValues=model.getDefaultAttributeValues(idRepoType);  if (idRepoName.trim().length() > 0) {    try {      boolean LoadSchema=false;      Map values=prop.getAttributeValues(defaultValues.keySet());      String realmName=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);      values.remove(IdConstants.SERVICE_ATTRS);      Set set=(HashSet)values.get("idRepoLoadSchema");      if (set != null) {        Iterator i=set.iterator();        if (i.hasNext()) {          String loadingSchemaFlag=(String)i.next();          if (loadingSchemaFlag.equals("true") && IdRepoUtils.hasIdRepoSchema(idRepoType)) {            LoadSchema=true;          }        }      }      model.editIDRepo(realmName,idRepoName,values);      if (LoadSchema == true) {        ServletContext servletCtx=event.getRequestContext().getServletContext();        model.loadIdRepoSchema(idRepoName,realmName,servletCtx);      }      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","idrepo.missing.idRepoName");  }  forwardTo();}  }
class C{  public synchronized void storeConfig() throws InstanceNotFoundException, MBeanException {  try {    ObjectName sname=new ObjectName("Catalina:type=StoreConfig");    if (mserver.isRegistered(sname)) {      mserver.invoke(sname,"storeConfig",null,null);    } else {      log.error(sm.getString("standardServer.storeConfig.notAvailable",sname));    }  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);    log.error(t);  }}  }
class C{  public boolean isSignatureValid(BasicOCSPResp ocspResp,Certificate responderCert){  try {    return SignUtils.isSignatureValid(ocspResp,responderCert,"BC");  } catch (  Exception e) {    return false;  }}  }
class C{  @Override public void attemptAttack(){  if (checkPlayerCollided())   if (Mario.godMode) {    main.Main.godModeHit.play(0.7);    fireballHit();  } else   if (mario.isBottomCollided()) {    frameCounter=0;    marioDeathSeqRunning=true;    mario.setDeathSeqRunning();    for (int i=0; i < SpriteHandler.getEnemyCast().size(); i++) {      Enemy e=SpriteHandler.getEnemyCast().get(i);      if (e != this) {        SpriteHandler.getEnemyCast().remove(e);        i--;      }    }    if (mario.getMarioState() == 0)     mario.getSpriteFrame().setTranslateY(mario.getSpriteFrame().getTranslateY() - main.Main.MARIO_SCALE_DIFF); else     if (main.Main.auraLoop.isPlaying()) {      main.Main.auraLoop.stop();      mario.removeAura();    }    main.Main.marioDeath.play();  }}  }
class C{  public void filter(Set<String> services) throws SSOException, SMSException {  filterByAuthServices(services);  filterByKnownServices(services);  filterByDisplayableAttribute(services);}  }
class C{  public SQLIntegrityConstraintViolationException(){}  }
class C{  public boolean rightCollide(boolean checkElements){  return collide(1,checkElements);}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return getService().fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  private VbriFrame(ByteBuffer header){  this.header=header;  header.rewind();  header.position(10);  setAudioSize();  setFrameCount();}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  byte[] dKey=generateDerivedKey(KEY_MATERIAL,keySize);  return new KeyParameter(dKey,0,keySize);}  }
class C{  public long count(String database,String table){  return indexesRepo.countAll(new Identifier(database,table));}  }
class C{  private void failAlwaysStrictEvaluation(Entry e){  try {    LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();    DirectoryServer.setSingleStructuralObjectClassPolicy(REJECT);    assertFalse(e.conformsToSchema(null,false,true,true,invalidReason),"Entry validation succeeded with REJECT policy");    DirectoryServer.setSingleStructuralObjectClassPolicy(WARN);    assertFalse(e.conformsToSchema(null,false,true,true,invalidReason),"Entry validation failed with WARN policy:  " + invalidReason);    DirectoryServer.setSingleStructuralObjectClassPolicy(ACCEPT);    assertFalse(e.conformsToSchema(null,false,true,true,invalidReason),"Entry validation failed with ACCEPT policy:  " + invalidReason);  }  finally {    DirectoryServer.setSingleStructuralObjectClassPolicy(REJECT);  }}  }
class C{  public OutputStreamAesEncryption(java.io.OutputStream out,byte[] key,int off,int len){  super(out);  byte[] iv=IVGenerator.getIV();  byte[] nkey=new byte[len];  System.arraycopy(key,off,nkey,0,len);  cipher=new AESCipher(true,nkey,iv);  try {    write(iv);  } catch (  IOException e) {    throw new PdfException(PdfException.PdfEncryption,e);  }}  }
class C{  public void swap(){  mv.visitInsn(Opcodes.SWAP);}  }
class C{  public QName(String namespaceURI,String localName,boolean validate){  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));  if (validate) {    if (!XML11Char.isXML11ValidNCName(localName)) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  _namespaceURI=namespaceURI;  _localName=localName;  m_hashCode=toString().hashCode();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.ConditionsElement createConditionsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionsElementImpl();}  }
class C{  public static Map parseAttributeValuePairs(Node pNode){  Node node=null;  Set nodeSet=XMLUtils.getChildNodes(pNode,ATTRIBUTE_VALUE_PAIR);  if (nodeSet == null) {    debug.error("parseAttribiteValuePairs: " + "missing element " + ATTRIBUTE_VALUE_PAIR);    return null;  }  HashMap attrValuePairs=new HashMap();  Iterator nodes=nodeSet.iterator();  while (nodes.hasNext()) {    node=(Node)nodes.next();    String attributeName=getAttributeName(node);    if (attributeName == null) {      debug.error("PolicyUtils.parseAttribiteValuePairs" + "():missing attribute name");      return null;    }    Set values=getAttributeValues(node);    if (values == null) {      debug.error("PolicyUtils.parseAttribiteValuePairs" + "():missing attribute value");      return null;    }    attrValuePairs.put(attributeName,values);  }  return attrValuePairs;}  }
class C{  public AMSearchResults searchOrganizationalUnits(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ORGANIZATIONAL_UNIT),getSearchFilter(AMObject.ORGANIZATIONAL_UNIT),wildcard,avPairs,searchControl);}  }
class C{  public void flush(){  if (!preambleWritten) {    if (this.declaration) {      writeln("<?xml version=" + quote("1.0") + " encoding="+ quote(this.charset)+ "?>");    }    writeln("<java version=" + quote(System.getProperty("java.version")) + " class="+ quote(XMLDecoder.class.getName())+ ">");    preambleWritten=true;  }  indentation++;  List<Statement> statements=statementList(this);  while (!statements.isEmpty()) {    Statement s=statements.remove(0);    if ("writeObject".equals(s.getMethodName())) {      outputValue(s.getArguments()[0],this,true);    } else {      outputStatement(s,this,false);    }  }  indentation--;  Statement statement=getMissedStatement();  while (statement != null) {    outputStatement(statement,this,false);    statement=getMissedStatement();  }  try {    out.flush();  } catch (  IOException e) {    getExceptionListener().exceptionThrown(e);  }  clear();}  }
class C{  public static Reader newReader(ReadableByteChannel channel,CharsetDecoder decoder,int minBufferCapacity){  return new InputStreamReader(new ChannelInputStream(channel),decoder);}  }
class C{  public DomainFakeCfg(DN baseDN,int serverId,SortedSet<String> replServers){  this(baseDN,serverId,replServers,-1);}  }
class C{  public WorkQueueConfigManager(ServerContext serverContext){  this.serverContext=serverContext;}  }
class C{  public FrameBodyTMED(){}  }
class C{  public final void checkAccess(){}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  boolean isECLEnabled(){  return this.eclDomain.isEnabled();}  }
class C{  void clear(){  this._id=null;  this._rev=null;  this.sourceId=null;  this.targetId=null;}  }
class C{  public final boolean hasSdCard(){  return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState());}  }
class C{  public static Object showInputDialog(Component parentComponent,Object message,String title,int messageType,Icon icon,Object[] selectionValues,Object initialSelectionValue) throws HeadlessException {  JOptionPane pane=new JOptionPane(message,messageType,OK_CANCEL_OPTION,icon,null,null);  pane.setWantsInput(true);  pane.setSelectionValues(selectionValues);  pane.setInitialSelectionValue(initialSelectionValue);  pane.setComponentOrientation(((parentComponent == null) ? getRootFrame() : parentComponent).getComponentOrientation());  int style=styleFromMessageType(messageType);  JDialog dialog=pane.createDialog(parentComponent,title,style);  pane.selectInitialValue();  dialog.show();  dialog.dispose();  Object value=pane.getInputValue();  if (value == UNINITIALIZED_VALUE) {    return null;  }  return value;}  }
class C{  @Override public void execute() throws BuildException {  Mode mode=null;  if ("\n".equals(System.lineSeparator())) {    mode=Mode.LF;  } else   if ("\r\n".equals(System.lineSeparator())) {    mode=Mode.CRLF;  } else {    log("Line ends check skipped, because OS line ends setting is neither LF nor CRLF.",Project.MSG_VERBOSE);    return;  }  int count=0;  List<CheckFailure> errors=new ArrayList<>();  for (  FileSet fs : filesets) {    DirectoryScanner ds=fs.getDirectoryScanner(getProject());    File basedir=ds.getBasedir();    String[] files=ds.getIncludedFiles();    if (files.length > 0) {      log("Checking line ends in " + files.length + " file(s)");      for (int i=0; i < files.length; i++) {        File file=new File(basedir,files[i]);        log("Checking file '" + file + "' for correct line ends",Project.MSG_DEBUG);        try {          check(file,errors,mode);        } catch (        IOException e) {          throw new BuildException("Could not check file '" + file.getAbsolutePath() + "'",e);        }        count++;      }    }  }  if (count > 0) {    log("Done line ends check in " + count + " file(s), "+ errors.size()+ " error(s) found.");  }  if (errors.size() > 0) {    String message="The following files have wrong line ends: " + errors;    log(message,Project.MSG_ERR);    throw new BuildException(message);  }}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  public void preferenceChanged(View child,boolean width,boolean height){  host.revalidate();  host.repaint();}  }
class C{  public SQLRecoverableException(Throwable cause){  super(cause);}  }
class C{  ArrayListSpliterator(ArrayList<E> list,int origin,int fence,int expectedModCount){  this.list=list;  this.index=origin;  this.fence=fence;  this.expectedModCount=expectedModCount;}  }
class C{  private boolean internalIsLoggable(Level l){  int effectiveLevel=levelIntVal;  if (effectiveLevel == Level.OFF.intValue()) {    return false;  }  return l.intValue() >= effectiveLevel;}  }
class C{  public View breakView(int axis,float len,Shape a){  if (axis == View.Y_AXIS) {    if (a != null) {      Rectangle alloc=a.getBounds();      setSize(alloc.width,alloc.height);    }    return this;  }  return this;}  }
class C{  public boolean isHatching(){  return hatching;}  }
class C{  public EncryptedID createEncryptedID(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ENCRYPTEDID,xml);  if (obj == null) {    return new EncryptedIDImpl(xml);  } else {    return (EncryptedID)obj;  }}  }
class C{  public void printStackTrace(java.io.PrintStream ps){  if (rootCause != null) {    String superString=super.toString();synchronized (ps) {      ps.print(superString + (superString.endsWith(".") ? "" : ".") + "  Root exception is ");      rootCause.printStackTrace(ps);    }  } else {    super.printStackTrace(ps);  }}  }
class C{  @Suppress @MediumTest public void testCollateLocalizedForJapanese() throws Exception {  final String testName="DatabaseGeneralTest#testCollateLocalizedForJapanese()";  final Locale[] localeArray=Locale.getAvailableLocales();  final String japanese=Locale.JAPANESE.getLanguage();  final String english=Locale.ENGLISH.getLanguage();  Locale japaneseLocale=null;  Locale englishLocale=null;  for (  Locale locale : localeArray) {    if (locale != null) {      final String language=locale.getLanguage();      if (language == null) {        continue;      } else       if (language.equals(japanese)) {        japaneseLocale=locale;      } else       if (language.equals(english)) {        englishLocale=locale;      }    }    if (japaneseLocale != null && englishLocale != null) {      break;    }  }  if (japaneseLocale == null || englishLocale == null) {    Log.d(TAG,testName + "n is silently skipped since " + (englishLocale == null ? (japaneseLocale == null ? "Both English and Japanese locales do not exist." : "English locale does not exist.") : (japaneseLocale == null ? "Japanese locale does not exist." : "...why?")));    return;  }  Locale originalLocale=Locale.getDefault();  try {    final String dbName="collate_localized_test";    mDatabase.execSQL("CREATE TABLE " + dbName + " ("+ "_id INTEGER PRIMARY KEY, "+ "s TEXT COLLATE LOCALIZED) ");    ContentValues cv=new ContentValues();    cv=new ContentValues();    cv.put("s","\uFF75\uFF77\uFF85\uFF9C");    cv=new ContentValues();    cv.put("s","\u306B\u307B\u3093");    cv=new ContentValues();    cv.put("s","\u30A2\u30E1\u30EA\u30AB");    Locale.setDefault(englishLocale);    Locale.setDefault(japaneseLocale);    Cursor cur=mDatabase.rawQuery("SELECT * FROM " + dbName + " ORDER BY s",null);    assertTrue(cur.moveToFirst());    assertEquals("\u30A2\u30E1\u30EA\u30AB",cur.getString(1));    assertTrue(cur.moveToNext());    assertEquals("\uFF75\uFF77\uFF85\uFF9C",cur.getString(1));    assertTrue(cur.moveToNext());    assertEquals("\u306B\u307B\u3093",cur.getString(1));  }  finally {    if (originalLocale != null) {      try {        Locale.setDefault(originalLocale);      } catch (      Exception ignored) {      }    }  }}  }
class C{  public Cursor fetchAllOrdered(){  return database.query(DATABASE_TABLE,KEYS,null,null,null,null,KEY_EVENTNAME + " ASC");}  }
class C{  private void tryGrow(Object[] array,int oldCap){  lock.unlock();  Object[] newArray=null;  if (allocationSpinLock == 0 && UNSAFE.compareAndSwapInt(this,allocationSpinLockOffset,0,1)) {    try {      int newCap=oldCap + ((oldCap < 64) ? (oldCap + 2) : (oldCap >> 1));      if (newCap - MAX_ARRAY_SIZE > 0) {        int minCap=oldCap + 1;        if (minCap < 0 || minCap > MAX_ARRAY_SIZE)         throw new OutOfMemoryError();        newCap=MAX_ARRAY_SIZE;      }      if (newCap > oldCap && queue == array)       newArray=new Object[newCap];    }  finally {      allocationSpinLock=0;    }  }  if (newArray == null)   Thread.yield();  lock.lock();  if (newArray != null && queue == array) {    queue=newArray;    System.arraycopy(array,0,newArray,0,oldCap);  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  ServerSiteModel model=(ServerSiteModel)getModel();  String serverName=(String)getPageSessionAttribute(ServerEditViewBeanBase.PG_ATTR_SERVER_NAME);  String serverGroupType=(String)getPageSessionAttribute(PG_ATTR_SERVER_GROUP_TYPE);  String name=(String)getDisplayFieldValue(TF_NAME);  name=name.trim();  String host=(String)getDisplayFieldValue(TF_HOST);  host=host.trim();  String port=(String)getDisplayFieldValue(TF_PORT);  port=port.trim();  String type=(String)getDisplayFieldValue(CHOICE_TYPE);  if ((name.length() > 0) && (port.length() > 0) && (host.length() > 0)) {    try {      ServerConfigXML xmlObj=model.getServerConfigObject(serverName);      ServerConfigXML.ServerGroup serverGroup=(serverGroupType.equals(DSConfigMgr.DEFAULT)) ? xmlObj.getDefaultServerGroup() : xmlObj.getSMSServerGroup();      serverGroup.addHost(name,host,port,type);      model.setServerConfigXML(serverName,xmlObj.toXML());      backTrail();      ServerConfigXMLViewBean vb=(ServerConfigXMLViewBean)getViewBean(ServerConfigXMLViewBean.class);      removePageSessionAttribute(PG_ATTR_SERVER_GROUP_TYPE);      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } catch (    ConfigurationException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","serverconfig.create.server.missing.atributes");    forwardTo();  }}  }
class C{  @AfterClass public void cleanup() throws Exception {  String userRootDN="ds-cfg-backend-id=userRoot,cn=Backends,cn=config";  ModifyRequest modifyRequest=Requests.newModifyRequest(userRootDN).addModification(DELETE,"ds-cfg-base-dn","o=airius.com");  ModifyOperation modifyOperation=getRootConnection().processModify(modifyRequest);  assertEquals(modifyOperation.getResultCode(),ResultCode.SUCCESS);}  }
class C{  public boolean handleRegistrationAfterFederation(String LRURL,HttpServletResponse response){  regisSource=IFSConstants.REGIS_FEDERATION;  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Entered FSNameRegistrationHandler:: " + "handleNameRegistration");  }  this.returnURL=LRURL;  this.response=response;  if (managerInst == null) {    FSUtils.debug.error("FSNameRegistrationHandler " + FSUtils.bundle.getString(IFSConstants.FEDERATION_FAILED_ACCOUNT_INSTANCE));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegistration" + "failed to get Account Manager instance");    }    return false;  }  boolean bRemoteStatus=doRemoteRegistration();  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Completed registration after federation with status " + bRemoteStatus);  }  return bRemoteStatus;}  }
class C{  public byte[] toBytes(){  return cipherSuiteCode;}  }
class C{  private static void debugPrintln(String msg){  if (debug) {    System.err.println(CLASS_NAME + ":" + msg);  }}  }
class C{  public Set searchRoles(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ROLE),getSearchFilter(AMObject.ROLE),wildcard,avPairs,level);}  }
class C{  @VisibleForTesting boolean checkSessionUpgrade(SSOToken ssoToken,AuthIndexType indexType,String indexValue) throws AuthLoginException, SSOException {  String value;  boolean upgrade=false;  if (ssoToken == null) {    return true;  }switch (indexType) {case USER:{      value=ssoToken.getProperty("UserToken");      if (indexValue == null || !indexValue.equals(value)) {        upgrade=true;      }      break;    }case ROLE:{    final Set<String> roles=AMAuthUtils.getAuthenticatedRoles(ssoToken);    upgrade=!roles.contains(indexValue);    break;  }case SERVICE:{  final Set<String> services=AMAuthUtils.getAuthenticatedServices(ssoToken);  upgrade=!services.contains(indexValue);  break;}case MODULE:{final Set<String> modules=AMAuthUtils.getAuthenticatedSchemes(ssoToken);upgrade=!modules.contains(indexValue);break;}case LEVEL:{int i=Integer.parseInt(indexValue);String authLevelProperty=ssoToken.getProperty("AuthLevel");int authLevel;if (authLevelProperty.contains(":")) {String[] realmAuthLevel=authLevelProperty.split(":");authLevel=Integer.parseInt(realmAuthLevel[1]);} else {authLevel=Integer.parseInt(authLevelProperty);}if (i > authLevel) {upgrade=true;}break;}case COMPOSITE:{upgrade=true;break;}}return upgrade;}  }
class C{  public boolean isFinalResponse(){  return isFinalResponse(statusLine.getStatusCode());}  }
class C{  public static String parseAnySimpleType(String lexicalXSDAnySimpleType){  if (theConverter == null)   initConverter();  return theConverter.parseAnySimpleType(lexicalXSDAnySimpleType);}  }
class C{  public long tryConvertToWriteLock(long stamp){  long a=stamp & ABITS, m, s, next;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break;      if (U.compareAndSwapLong(this,STATE,s,next=s + WBIT))       return next;    } else     if (m == WBIT) {      if (a != m)       break;      return stamp;    } else     if (m == RUNIT && a != 0L) {      if (U.compareAndSwapLong(this,STATE,s,next=s - RUNIT + WBIT))       return next;    } else     break;  }  return 0L;}  }
class C{  public static boolean isXML11NameHighSurrogate(int c){  return (0xD800 <= c && c <= 0xDB7F);}  }
class C{  private IntegerValidator(){}  }
class C{  public void testFlipBitPositiveInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=15;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,-93,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public void addAuthRole(String authRole){  if (authRole == null)   return;  if (ROLE_ALL_ROLES.equals(authRole)) {    allRoles=true;    return;  }  if (ROLE_ALL_AUTHENTICATED_USERS.equals(authRole)) {    authenticatedUsers=true;    return;  }  String results[]=new String[authRoles.length + 1];  for (int i=0; i < authRoles.length; i++)   results[i]=authRoles[i];  results[authRoles.length]=authRole;  authRoles=results;  authConstraint=true;}  }
class C{  public ModificationResult(final int chunkCountDiff,final long bytesDiffer,final Set<GUID> occurred){  this.chunkDifference=chunkCountDiff;  this.byteDifference=bytesDiffer;  this.occuredGUIDs.addAll(occurred);}  }
class C{  public static int findWordStart(CharSequence line,int pos,String noWordSep,boolean joinNonWordChars,boolean camelCasedWords,boolean eatWhitespace,boolean eatOnlyAfterWord){  char ch=line.charAt(pos);  if (noWordSep == null)   noWordSep="";  int type=getCharType(ch,noWordSep);  for (int i=pos; i >= 0; i--) {    char lastCh=ch;    ch=line.charAt(i);switch (type) {case WHITESPACE:      if (Character.isWhitespace(ch))       break; else       if (!eatOnlyAfterWord) {        return i + 1;      } else       if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) {        type=WORD_CHAR;      } else       type=SYMBOL;    break;case WORD_CHAR:  if (camelCasedWords && Character.isUpperCase(ch) && !Character.isUpperCase(lastCh)&& Character.isLetterOrDigit(lastCh)) {    return i;  } else   if (camelCasedWords && !Character.isUpperCase(ch) && Character.isUpperCase(lastCh)) {    return i + 1;  } else   if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) {    break;  } else   if (Character.isWhitespace(ch) && eatWhitespace && !eatOnlyAfterWord) {    type=WHITESPACE;    break;  } else   return i + 1;case SYMBOL:if (!joinNonWordChars && pos != i) return i + 1;if (Character.isWhitespace(ch)) {if (eatWhitespace && !eatOnlyAfterWord) {  type=WHITESPACE;  break;} else return i + 1;} else if (Character.isLetterOrDigit(ch) || noWordSep.indexOf(ch) != -1) {return i + 1;} else {break;}}}return 0;}  }
class C{  public void deleteFilteredRoles(Set roleDNs) throws AMException, SSOException {  Iterator iter=roleDNs.iterator();  while (iter.hasNext()) {    String roleDN=(String)iter.next();    AMFilteredRole role=new AMFilteredRoleImpl(token,roleDN);    role.delete();  }}  }
class C{  public ELFFormatter(){  String timestampGeneratorClass=lmanager.getProperty(LogConstants.SECURE_TIMESTAMP_GENERATOR);  try {    Class clz=Class.forName(timestampGeneratorClass);    secureTimestampGenerator=(ITimestampGenerator)clz.newInstance();  } catch (  ClassNotFoundException cnfe) {    Debug.error("ELFFormatter: TimeStamp Generator Class " + "not found",cnfe);  }catch (  InstantiationException ie) {    Debug.error("ELFFormatter: Timestamp Generator Could " + "not be Instantiated",ie);  }catch (  IllegalAccessException iae) {    Debug.error("ELFFormatter: Timestamp Generator Could " + "not be Instantiated",iae);  }}  }
class C{  private static int ordinal(int eraValue){  return eraValue + ERA_OFFSET - 1;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.ProblemActionElement createProblemActionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.ProblemActionElementImpl();}  }
class C{  public SCSAML2SOAPBindingViewBean(){  super("SCSAML2SOAPBinding",DEFAULT_DISPLAY_URL,"sunfmSAML2SOAPBindingService");}  }
class C{  public static AdditionalLogItem keyOnly(final Class<?> source,final String key){  Reject.ifNull(source,key);  return new AdditionalLogItem(source,key,null,false);}  }
class C{  public static String[] split(String value,String regex){  return value != null ? value.split(regex) : null;}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  boolean hasAttributes;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  hasAttributes=docType.hasAttributes();  assertFalse("nodehasattributes02",hasAttributes);}  }
class C{  public static String postRequest(URL url,String postData,String encoding,String contentType){  return postRequest(url,postData,encoding,contentType,DEFAULT_READ_TIMEOUT,DEFAULT_SOCKET_TIMEOUT);}  }
class C{  private boolean matchFilter(String string,String pattern){  if (pattern.equals("*") || pattern.equals(string)) {    return true;  }  int length=pattern.length();  int wildCardIndex=pattern.indexOf("*");  if (wildCardIndex >= 0) {    String patternSubStr=pattern.substring(0,wildCardIndex);    if (!string.startsWith(patternSubStr,0)) {      return false;    }    int beginIndex=patternSubStr.length() + 1;    int stringIndex=0;    if (wildCardIndex > 0) {      stringIndex=beginIndex;    }    String sub=pattern.substring(beginIndex,length);    while ((wildCardIndex=pattern.indexOf("*",beginIndex)) != -1) {      patternSubStr=pattern.substring(beginIndex,wildCardIndex);      if (string.indexOf(patternSubStr,stringIndex) == -1) {        return false;      }      beginIndex=wildCardIndex + 1;      stringIndex=stringIndex + patternSubStr.length() + 1;      sub=pattern.substring(beginIndex,length);    }    if (string.endsWith(sub)) {      return true;    }  }  return false;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    int ch=readChar();    if (lastWasCR && ch == '\n') {      ch=readChar();    }    lastWasCR=false;    return ch;  }}  }
class C{  public AttrSet(Collection<Attribute> ldapAttrSet){  int size=ldapAttrSet.size();  _attrs=new ArrayList(size);  for (  Attribute attribute : ldapAttrSet) {    Collection<byte[]> values=new ArrayList<>(attribute.size());    for (    ByteString value : attribute) {      values.add(value.toByteArray());    }    _attrs.add(new Attr(attribute.getAttributeDescriptionAsString(),values.toArray(new byte[0][])));  }}  }
class C{  public static boolean isModifyAnnotationsAllowed(int permissions){  return (EncryptionConstants.ALLOW_MODIFY_ANNOTATIONS & permissions) == EncryptionConstants.ALLOW_MODIFY_ANNOTATIONS;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.EmptyType createEmptyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.EmptyTypeImpl();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton1Request(event);}  }
class C{  protected boolean FunctionCall() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  if (lookahead(':',1)) {    appendOp(4,OpCodes.OP_EXTFUNCTION);    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,m_queueMark - 1);    nextToken();    consumeExpected(':');    m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 2,m_queueMark - 1);    nextToken();  } else {    int funcTok=getFunctionToken(m_token);    if (-1 == funcTok) {      error(XPATHErrorResources.ER_COULDNOT_FIND_FUNCTION,new Object[]{m_token});    }switch (funcTok) {case OpCodes.NODETYPE_PI:case OpCodes.NODETYPE_COMMENT:case OpCodes.NODETYPE_TEXT:case OpCodes.NODETYPE_NODE:      return false;default :    appendOp(3,OpCodes.OP_FUNCTION);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH + 1,funcTok);}nextToken();}consumeExpected('(');while (!tokenIs(')') && m_token != null) {if (tokenIs(',')) {error(XPATHErrorResources.ER_FOUND_COMMA_BUT_NO_PRECEDING_ARG,null);}Argument();if (!tokenIs(')')) {consumeExpected(',');if (tokenIs(')')) {  error(XPATHErrorResources.ER_FOUND_COMMA_BUT_NO_FOLLOWING_ARG,null);}}}consumeExpected(')');m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);return true;}  }
class C{  @Deprecated public static void stopServer(String className,LocalizableMessage reason){  DirectoryServer.shutDown(className,reason);}  }
class C{  protected void serializeElement(Element node,boolean bStart) throws SAXException {  if (bStart) {    fElementDepth++;    if ((fFeatures & WELLFORMED) != 0) {      isElementWellFormed(node);    }    if (!applyFilter(node,NodeFilter.SHOW_ELEMENT)) {      return;    }    if ((fFeatures & NAMESPACES) != 0) {      fNSBinder.pushContext();      fLocalNSBinder.reset();      recordLocalNSDecl(node);      fixupElementNS(node);    }    fSerializer.startElement(node.getNamespaceURI(),node.getLocalName(),node.getNodeName());    serializeAttList(node);  } else {    fElementDepth--;    if (!applyFilter(node,NodeFilter.SHOW_ELEMENT)) {      return;    }    this.fSerializer.endElement(node.getNamespaceURI(),node.getLocalName(),node.getNodeName());    if ((fFeatures & NAMESPACES) != 0) {      fNSBinder.popContext();    }  }}  }
class C{  private Class<?> findPropertyType(Method readMethod,Method writeMethod) throws IntrospectionException {  Class<?> propertyType=null;  try {    if (readMethod != null) {      Class<?>[] params=getParameterTypes(getClass0(),readMethod);      if (params.length != 0) {        throw new IntrospectionException("bad read method arg count: " + readMethod);      }      propertyType=getReturnType(getClass0(),readMethod);      if (propertyType == Void.TYPE) {        throw new IntrospectionException("read method " + readMethod.getName() + " returns void");      }    }    if (writeMethod != null) {      Class<?>[] params=getParameterTypes(getClass0(),writeMethod);      if (params.length != 1) {        throw new IntrospectionException("bad write method arg count: " + writeMethod);      }      if (propertyType != null && !params[0].isAssignableFrom(propertyType)) {        throw new IntrospectionException("type mismatch between read and write methods");      }      propertyType=params[0];    }  } catch (  IntrospectionException ex) {    throw ex;  }  return propertyType;}  }
class C{  public static boolean isPackageNameonResume(Context context,String packageName){  if (packageName == null) {    packageName=context.getPackageName();  }  Log.e("ActivityTaskHelp","isPackageNameonResume: " + packageName);  ActivityManager am=(ActivityManager)context.getSystemService(context.ACTIVITY_SERVICE);  ComponentName cn=am.getRunningTasks(1).get(0).topActivity;  Log.e("ActivityTaskHelp","pkg:" + cn.getPackageName());  if (cn.getPackageName().equals(packageName)) {    Log.e("ActivityTaskHelp","true: ");    return true;  }  Log.e("ActivityTaskHelp","false: ");  return false;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String siteName=getStringOptionValue(IArgument.SITE_NAME);  List serverNames=(List)rc.getOption(IArgument.SERVER_NAMES);  IOutput outputWriter=getOutputWriter();  try {    String[] params={siteName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_SITE_MEMBERS",params);    if (SiteConfiguration.isSiteExist(adminSSOToken,siteName)) {      SiteConfiguration.addServersToSite(adminSSOToken,siteName,serverNames);      outputWriter.printlnMessage(getResourceString("add-site-members-succeeded"));    } else {      outputWriter.printlnMessage(getResourceString("add-site-members-site-not-exist"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_SITE_MEMBERS",params);  } catch (  ConfigurationException e) {    String[] args={siteName,e.getMessage()};    debugError("AddSiteMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SITE_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={siteName,e.getMessage()};    debugError("AddSiteMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SITE_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={siteName,e.getMessage()};    debugError("AddSiteMembers.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SITE_MEMBERS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public AMSearchResults searchDynamicGroups(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchDynamicGroups(wildcard,null,searchControl);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.CommonNameType createCommonNameType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.CommonNameTypeImpl();}  }
class C{  public static void main(String args[]){  if (args.length != 1) {    System.out.println("usage : java SAMLUtils <host_name>");    return;  }  System.out.println(generateSourceID(args[0]));}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.AutomaticPseudonymsElement createAutomaticPseudonymsElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AutomaticPseudonymsElementImpl();}  }
class C{  public static ResourceResult parseResourceResult(Node resourceResultNode) throws PolicyException {  ResourceResult resourceResult=new ResourceResult();  String resourceName=XMLUtils.getNodeAttributeValue(resourceResultNode,RESOURCE_NAME);  if (resourceName == null) {    DEBUG.error("ResourceResult: missing attribute " + RESOURCE_NAME);    Object[] objs={RESOURCE_NAME};    throw new PolicyException(ResBundleUtils.rbName,"missing_attribute_in_resourceresult",objs,null);  }  resourceResult.setResourceName(resourceName);  Node node=XMLUtils.getChildNode(resourceResultNode,PolicyDecision.POLICY_DECISION);  if (node == null) {    DEBUG.error("ResourceResult: missing element " + PolicyDecision.POLICY_DECISION);    Object[] objs={PolicyDecision.POLICY_DECISION};    throw new PolicyException(ResBundleUtils.rbName,"missing_attribute_in_resourceresult",objs,null);  } else {    resourceResult.setPolicyDecision(PolicyDecision.parsePolicyDecision(node));  }  Set nodeSet=XMLUtils.getChildNodes(resourceResultNode,RESOURCE_RESULT);  if (nodeSet != null) {    Iterator nodes=nodeSet.iterator();    while (nodes.hasNext()) {      node=(Node)nodes.next();      ResourceResult rRes=ResourceResult.parseResourceResult(node);      resourceResult.resourceResults.add(rRes);    }  }  return resourceResult;}  }
class C{  void saveResourceIndex(String resourceType,String indexXML) throws PolicyException, SSOException {  Map newAttrs=new HashMap();  Set newSet=new HashSet();  newSet.add(indexXML);  newAttrs.put(RESOURCES_XML,newSet);  ServiceConfig resources=getResourcesServiceConfig(true);  if (resources != null) {    ServiceConfig leafConfig=null;    try {      leafConfig=resources.getSubConfig(resourceType);      if (leafConfig == null) {        resources.addSubConfig(resourceType,PolicyManager.RESOURCES_POLICY_ID,0,newAttrs);      } else {        leafConfig.setAttributes(newAttrs);      }    } catch (    SMSException e1) {      throw new PolicyException(e1);    }  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  @Override public synchronized void remove(Member member){  getTransport().remove(member);}  }
class C{  public HashPrintJobAttributeSet(PrintJobAttribute attribute){  super(attribute,PrintJobAttribute.class);}  }
class C{  public static long[] appendLong(long[] cur,long val){  if (cur == null) {    return new long[]{val};  }  final int N=cur.length;  for (int i=0; i < N; i++) {    if (cur[i] == val) {      return cur;    }  }  long[] ret=new long[N + 1];  System.arraycopy(cur,0,ret,0,N);  ret[N]=val;  return ret;}  }
class C{  public void paintComponent(Graphics g,Component c,Container p,Rectangle r){  paintComponent(g,c,p,r.x,r.y,r.width,r.height);}  }
class C{  public void resetEffectiveRightsParams(){  this.targAttrFilterAcis.clear();  this.decidingAci=null;  this.evalReason=null;  this.targAttrFiltersMatch=false;  this.summaryString=null;  this.targAttrMatch=0;}  }
class C{  public void sendError(int sc) throws IOException {  if (this._getHttpServletResponse() != null) {    this._getHttpServletResponse().sendError(sc);  }}  }
class C{  public static <A>ImmutableList<A> of(final A x1,final A x2,final A x3){  return new ImmutableList<>(x1,of(x2,x3));}  }
class C{  private JAXBElement<?> performLDAPRequest(LDAPConnection connection,ObjectFactory objFactory,org.opends.server.types.Control proxyAuthzControl,DsmlMessage request){  ArrayList<org.opends.server.types.Control> controls=new ArrayList<>(1);  if (proxyAuthzControl != null) {    controls.add(proxyAuthzControl);  }  try {    if (request instanceof SearchRequest) {      SearchRequest sr=(SearchRequest)request;      DSMLSearchOperation ds=new DSMLSearchOperation(connection);      SearchResponse searchResponse=ds.doSearch(objFactory,sr,controls);      return objFactory.createBatchResponseSearchResponse(searchResponse);    } else     if (request instanceof AddRequest) {      AddRequest ar=(AddRequest)request;      DSMLAddOperation addOp=new DSMLAddOperation(connection);      LDAPResult addResponse=addOp.doOperation(objFactory,ar,controls);      return objFactory.createBatchResponseAddResponse(addResponse);    } else     if (request instanceof AbandonRequest) {      AbandonRequest ar=(AbandonRequest)request;      DSMLAbandonOperation ao=new DSMLAbandonOperation(connection);      ao.doOperation(objFactory,ar,controls);      return null;    } else     if (request instanceof ExtendedRequest) {      ExtendedRequest er=(ExtendedRequest)request;      DSMLExtendedOperation eo=new DSMLExtendedOperation(connection,exopStrings);      ExtendedResponse extendedResponse=eo.doOperation(objFactory,er,controls);      return objFactory.createBatchResponseExtendedResponse(extendedResponse);    } else     if (request instanceof DelRequest) {      DelRequest dr=(DelRequest)request;      DSMLDeleteOperation delOp=new DSMLDeleteOperation(connection);      LDAPResult delResponse=delOp.doOperation(objFactory,dr,controls);      return objFactory.createBatchResponseDelResponse(delResponse);    } else     if (request instanceof CompareRequest) {      CompareRequest cr=(CompareRequest)request;      DSMLCompareOperation compareOp=new DSMLCompareOperation(connection);      LDAPResult compareResponse=compareOp.doOperation(objFactory,cr,controls);      return objFactory.createBatchResponseCompareResponse(compareResponse);    } else     if (request instanceof ModifyDNRequest) {      ModifyDNRequest mr=(ModifyDNRequest)request;      DSMLModifyDNOperation moddnOp=new DSMLModifyDNOperation(connection);      LDAPResult moddnResponse=moddnOp.doOperation(objFactory,mr,controls);      return objFactory.createBatchResponseModDNResponse(moddnResponse);    } else     if (request instanceof ModifyRequest) {      ModifyRequest modr=(ModifyRequest)request;      DSMLModifyOperation modOp=new DSMLModifyOperation(connection);      LDAPResult modResponse=modOp.doOperation(objFactory,modr,controls);      return objFactory.createBatchResponseModifyResponse(modResponse);    } else     if (request instanceof AuthRequest) {      ResultCode resultCode=objFactory.createResultCode();      resultCode.setCode(LDAPResultCode.AUTH_METHOD_NOT_SUPPORTED);      LDAPResult ldapResult=objFactory.createLDAPResult();      ldapResult.setResultCode(resultCode);      return objFactory.createBatchResponseAuthResponse(ldapResult);    }  } catch (  Throwable t) {    return createErrorResponse(objFactory,t);  }  return null;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardTo();}  }
class C{  public static int parseVersion(String revision) throws ConflictException {  int ver=-1;  try {    ver=Integer.parseInt(revision);  } catch (  NumberFormatException ex) {    throw new ConflictException("OrientDB repository expects revisions as int, " + "unable to parse passed revision: " + revision);  }  return ver;}  }
class C{  public Name(String name) throws IOException {  rdn=new DNParser(name).parse();}  }
class C{  public void putConstraint(String e1,Component c1,Spring s,String e2,Component c2){  putConstraint(e1,c1,Spring.sum(s,getConstraint(e2,c2)));}  }
class C{  public void testEqualsNull(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  assertFalse(aNumber.equals(null));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Attr newAttr;  Attr newAddrAttr;  String newName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  newAttr=doc.createAttributeNS("http://www.nist.gov","xxx:domestic");  newAddrAttr=((Element)testAddr).setAttributeNodeNS(newAttr);  newName=newAddrAttr.getNodeName();  assertEquals("nodeName","emp:domestic",newName);}  }
class C{  protected JavaElement blockStatement(TokenIterator tokens) throws ParseException {switch (tokens.peek().kind) {case LBRACE:    return block(tokens);case ASSERT:  tokens.jumpPastNext(SEMICOLON);return null;case IF:tokens.getNext(IF);ConsumerExpression<?> ifCondition=consumeBytecodeExpression(BranchExpression.class,tokens.peekPaired().getNextCodeToken(),tokens.peekPairedPartner().getPreviousCodeToken());parenthesizedExpression(tokens);blockStatement(tokens);if (tokens.nextKindIs(ELSE)) {tokens.getNext(ELSE);blockStatement(tokens);}return null;case WHILE:tokens.getNext(WHILE);ConsumerExpression<?> whleCondition=consumeBytecodeExpression(BranchExpression.class,tokens.peekPaired().getNextCodeToken(),tokens.peekPairedPartner().getPreviousCodeToken());parenthesizedExpression(tokens);blockStatement(tokens);return null;case DO:tokens.getNext(DO);blockStatement(tokens);tokens.getNext(WHILE);ConsumerExpression<?> doCondition=consumeBytecodeExpression(BranchExpression.class,tokens.peekPaired().getNextCodeToken(),tokens.peekPairedPartner().getPreviousCodeToken());parenthesizedExpression(tokens);tokens.getNext(SEMICOLON);return null;case FOR:tokens.getNext(FOR);PairedToken openParen=tokens.nextPaired(LPAREN);if (tokens.hasKindBefore(COLON,RPAREN)) {tokens.jumpPastNext(COLON);consumeBytecodeExpression(null,tokens.peek(),tokens.peekBeforeNext(RPAREN));tokens.jumpPast(openParen.getAssociatedToken());return null;} else {consumeBytecodeExpression(null,tokens.peek(),tokens.peekBeforeNext(SEMICOLON));tokens.jumpPastNext(SEMICOLON);if (!tokens.nextKindIs(SEMICOLON)) {consumeBytecodeExpression(BranchExpression.class,tokens.peek(),tokens.peekBeforeNext(SEMICOLON));}tokens.jumpPastNext(SEMICOLON);if (!tokens.nextKindIs(RPAREN)) {consumeBytecodeExpression(null,tokens.peek(),openParen.getAssociatedToken().getPreviousCodeToken());}tokens.jumpPast(openParen.getAssociatedToken());blockStatement(tokens);return null;}case TRY:tokens.getNext(TRY);block(tokens);while (tokens.nextKindIs(CATCH)) {tokens.getNext(CATCH);PairedToken token=tokens.nextPaired(LPAREN);tokens.jumpPast(token.getAssociatedToken());block(tokens);}if (tokens.nextKindIs(FINALLY)) {tokens.getNext(FINALLY);block(tokens);}return null;case SWITCH:tokens.getNext(SWITCH);ConsumerExpression<?> switchCondition=consumeBytecodeExpression(null,tokens.peekPaired().getNextCodeToken(),tokens.peekPairedPartner().getPreviousCodeToken());parenthesizedExpression(tokens);PairedToken brace=tokens.nextPaired(LBRACE);while (tokens.nextKindIs(CASE) || tokens.nextKindIs(DEFAULT)) {tokens.getNext();tokens.jumpPastNext(COLON);while (!(tokens.nextKindIs(CASE) || tokens.nextKindIs(DEFAULT) || tokens.nextKindIs(RBRACE))) blockStatement(tokens);}tokens.nextPaired(RBRACE);return null;case SYNCHRONIZED:tokens.getNext(SYNCHRONIZED);ConsumerExpression<?> syncObject=consumeBytecodeExpression(MonitorEnterExpression.class,tokens.peekPaired().getNextCodeToken(),tokens.peekPairedPartner().getPreviousCodeToken());parenthesizedExpression(tokens);BlockElement block=block(tokens);return block;case RETURN:tokens.getNext(RETURN);if (tokens.nextKindIs(SEMICOLON)) {} else {ConsumerExpression<?> returnExpression=consumeBytecodeExpression(ReturnExpression.class,tokens.peek(),tokens.peekBeforeNext(SEMICOLON));}tokens.jumpPastNext(SEMICOLON);return null;case THROW:tokens.getNext(THROW);ConsumerExpression<?> throwExpression=consumeBytecodeExpression(ThrowExpression.class,tokens.peek(),tokens.peekBeforeNext(SEMICOLON));tokens.jumpPastNext(SEMICOLON);return null;case BREAK:case CONTINUE:tokens.getNext();if (tokens.nextKindIs(SEMICOLON)) {} else tokens.getNext();tokens.getNext();return null;case SEMICOLON:tokens.getNext();return null;}if (tokens.nextKindIs(IDENTIFIER) && tokens.peekNext().kind == COLON) {tokens.getNext();tokens.getNext();return blockStatement(tokens);} else if (tokens.hasKindBefore(CLASS,LBRACE) || tokens.hasKindBefore(INTERFACE,LBRACE) || tokens.hasKindBefore(ENUM,LBRACE)) {Token first=tokens.getNext();PairedToken open=(PairedToken)tokens.jumpPastNext(LBRACE);if (open == null) {return null;}getEnclosingClass().addInnerClass(new ClassElement(this,open,open.getAssociatedToken(),false));return null;} else {Token first=tokens.peek();List<PairedToken> openBraces=passAnonymousInnerClassesUntilSemiColon(tokens);Token last=tokens.getNext(SEMICOLON);for (PairedToken brace : openBraces) {getEnclosingClass().addInnerClass(new ClassElement(this,brace,brace.getAssociatedToken(),true));}ConsumerExpression<?> expr=consumeBytecodeExpression(null,first,last);return null;}}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof LDAPPrincipal)) {    return false;  }  LDAPPrincipal that=(LDAPPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  protected static AttrSet combineAttrSets(AttrSet attrSet1,AttrSet attrSet2){  AttrSet retAttrSet=new AttrSet();  if (attrSet1 != null) {    int count=attrSet1.size();    for (int i=0; i < count; i++) {      Attr attr=attrSet1.elementAt(i);      retAttrSet.add(attr);    }  }  if (attrSet2 != null) {    int count=attrSet2.size();    for (int i=0; i < count; i++) {      Attr attr=attrSet2.elementAt(i);      retAttrSet.add(attr);    }  }  return retAttrSet;}  }
class C{  public void newParameters(String cipherTransformation,int cipherKeyLength,boolean enabled){  cipherInfo=new CipherInfo(cipherTransformation,cipherKeyLength,enabled);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  protected void populateOperators(){  registerContentOperator(DEFAULT_OPERATOR,new IgnoreOperator());  registerContentOperator("q",new PushGraphicsStateOperator());  registerContentOperator("Q",new PopGraphicsStateOperator());  registerContentOperator("cm",new ModifyCurrentTransformationMatrixOperator());  registerContentOperator("Do",new DoOperator());  registerContentOperator("BMC",new BeginMarkedContentOperator());  registerContentOperator("BDC",new BeginMarkedContentDictionaryOperator());  registerContentOperator("EMC",new EndMarkedContentOperator());  if (supportedEvents == null || supportedEvents.contains(EventType.RENDER_TEXT) || supportedEvents.contains(EventType.RENDER_PATH) || supportedEvents.contains(EventType.CLIP_PATH_CHANGED)) {    registerContentOperator("g",new SetGrayFillOperator());    registerContentOperator("G",new SetGrayStrokeOperator());    registerContentOperator("rg",new SetRGBFillOperator());    registerContentOperator("RG",new SetRGBStrokeOperator());    registerContentOperator("k",new SetCMYKFillOperator());    registerContentOperator("K",new SetCMYKStrokeOperator());    registerContentOperator("cs",new SetColorSpaceFillOperator());    registerContentOperator("CS",new SetColorSpaceStrokeOperator());    registerContentOperator("sc",new SetColorFillOperator());    registerContentOperator("SC",new SetColorStrokeOperator());    registerContentOperator("scn",new SetColorFillOperator());    registerContentOperator("SCN",new SetColorStrokeOperator());    registerContentOperator("gs",new ProcessGraphicsStateResourceOperator());  }  if (supportedEvents == null || supportedEvents.contains(EventType.RENDER_IMAGE)) {    registerContentOperator("EI",new EndImageOperator());  }  if (supportedEvents == null || supportedEvents.contains(EventType.RENDER_TEXT) || supportedEvents.contains(EventType.BEGIN_TEXT) || supportedEvents.contains(EventType.END_TEXT)) {    registerContentOperator("BT",new BeginTextOperator());    registerContentOperator("ET",new EndTextOperator());  }  if (supportedEvents == null || supportedEvents.contains(EventType.RENDER_TEXT)) {    SetTextCharacterSpacingOperator tcOperator=new SetTextCharacterSpacingOperator();    registerContentOperator("Tc",tcOperator);    SetTextWordSpacingOperator twOperator=new SetTextWordSpacingOperator();    registerContentOperator("Tw",twOperator);    registerContentOperator("Tz",new SetTextHorizontalScalingOperator());    SetTextLeadingOperator tlOperator=new SetTextLeadingOperator();    registerContentOperator("TL",tlOperator);    registerContentOperator("Tf",new SetTextFontOperator());    registerContentOperator("Tr",new SetTextRenderModeOperator());    registerContentOperator("Ts",new SetTextRiseOperator());    TextMoveStartNextLineOperator tdOperator=new TextMoveStartNextLineOperator();    registerContentOperator("Td",tdOperator);    registerContentOperator("TD",new TextMoveStartNextLineWithLeadingOperator(tdOperator,tlOperator));    registerContentOperator("Tm",new TextSetTextMatrixOperator());    TextMoveNextLineOperator tstarOperator=new TextMoveNextLineOperator(tdOperator);    registerContentOperator("T*",tstarOperator);    ShowTextOperator tjOperator=new ShowTextOperator();    registerContentOperator("Tj",tjOperator);    MoveNextLineAndShowTextOperator tickOperator=new MoveNextLineAndShowTextOperator(tstarOperator,tjOperator);    registerContentOperator("'",tickOperator);    registerContentOperator("\"",new MoveNextLineAndShowTextWithSpacingOperator(twOperator,tcOperator,tickOperator));    registerContentOperator("TJ",new ShowTextArrayOperator());  }  if (supportedEvents == null || supportedEvents.contains(EventType.CLIP_PATH_CHANGED) || supportedEvents.contains(EventType.RENDER_PATH)) {    registerContentOperator("w",new SetLineWidthOperator());    registerContentOperator("J",new SetLineCapOperator());    registerContentOperator("j",new SetLineJoinOperator());    registerContentOperator("M",new SetMiterLimitOperator());    registerContentOperator("d",new SetLineDashPatternOperator());    int fillStroke=PathRenderInfo.FILL | PathRenderInfo.STROKE;    registerContentOperator("m",new MoveToOperator());    registerContentOperator("l",new LineToOperator());    registerContentOperator("c",new CurveOperator());    registerContentOperator("v",new CurveFirstPointDuplicatedOperator());    registerContentOperator("y",new CurveFourhPointDuplicatedOperator());    registerContentOperator("h",new CloseSubpathOperator());    registerContentOperator("re",new RectangleOperator());    registerContentOperator("S",new PaintPathOperator(PathRenderInfo.STROKE,-1,false));    registerContentOperator("s",new PaintPathOperator(PathRenderInfo.STROKE,-1,true));    registerContentOperator("f",new PaintPathOperator(PathRenderInfo.FILL,PdfCanvasConstants.FillingRule.NONZERO_WINDING,false));    registerContentOperator("F",new PaintPathOperator(PathRenderInfo.FILL,PdfCanvasConstants.FillingRule.NONZERO_WINDING,false));    registerContentOperator("f*",new PaintPathOperator(PathRenderInfo.FILL,PdfCanvasConstants.FillingRule.EVEN_ODD,false));    registerContentOperator("B",new PaintPathOperator(fillStroke,PdfCanvasConstants.FillingRule.NONZERO_WINDING,false));    registerContentOperator("B*",new PaintPathOperator(fillStroke,PdfCanvasConstants.FillingRule.EVEN_ODD,false));    registerContentOperator("b",new PaintPathOperator(fillStroke,PdfCanvasConstants.FillingRule.NONZERO_WINDING,true));    registerContentOperator("b*",new PaintPathOperator(fillStroke,PdfCanvasConstants.FillingRule.EVEN_ODD,true));    registerContentOperator("n",new PaintPathOperator(PathRenderInfo.NO_OP,-1,false));    registerContentOperator("W",new ClipPathOperator(PdfCanvasConstants.FillingRule.NONZERO_WINDING));    registerContentOperator("W*",new ClipPathOperator(PdfCanvasConstants.FillingRule.EVEN_ODD));  }}  }
class C{  public UnsavedChangesDialog.Result checkUnsavedChanges(){  UnsavedChangesDialog.Result result;  UnsavedChangesDialog unsavedChangesDlg=new UnsavedChangesDialog(Utilities.getParentDialog(this),getInfo());  unsavedChangesDlg.setMessage(INFO_CTRL_PANEL_UNSAVED_CHANGES_SUMMARY.get(),INFO_CTRL_PANEL_UNSAVED_ENTRY_CHANGES_DETAILS.get(searchResult.getName()));  Utilities.centerGoldenMean(unsavedChangesDlg,Utilities.getParentDialog(this));  unsavedChangesDlg.setVisible(true);  result=unsavedChangesDlg.getResult();  if (result == UnsavedChangesDialog.Result.SAVE) {    saveChanges(false);    if (newTask == null || newTask.getState() != Task.State.FINISHED_SUCCESSFULLY) {      result=UnsavedChangesDialog.Result.CANCEL;    }  }  return result;}  }
class C{  @Override public int available(){  return input.getLength();}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  public FrameBodyTENC(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public static void registerIdentityMapper(DN configEntryDN,IdentityMapper<?> identityMapper){  directoryServer.identityMappers.put(configEntryDN,identityMapper);}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  @Override public boolean isSmapDumped(){  return isSmapDumped;}  }
class C{  private void attemptLogin(){  mJidView.setError(null);  mPasswordView.setError(null);  String email=mJidView.getText().toString();  String password=mPasswordView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mJidView.setError(getString(R.string.error_field_required));    focusView=mJidView;    cancel=true;  } else   if (!isEmailValid(email)) {    mJidView.setError(getString(R.string.error_invalid_jid));    focusView=mJidView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    saveCredentialsAndLogin();  }}  }
class C{  public void addFileset(FileSet fs){  filesets.add(fs);}  }
class C{  public int corner_count(){  return polyline.corner_count();}  }
class C{  public JKInvalidUserException(String message){  super(message);}  }
class C{  public String createUserDatabaseRealm(String parent,String resourceName) throws Exception {  UserDatabaseRealm realm=new UserDatabaseRealm();  realm.setResourceName(resourceName);  ObjectName pname=new ObjectName(parent);  Container container=getParentContainerFromParent(pname);  container.setRealm(realm);  ObjectName oname=realm.getObjectName();  if (oname != null) {    return (oname.toString());  } else {    return null;  }}  }
class C{  private static Map<String,String> toStringMap(Map<CharSequence,CharSequence> charSeqMap){  Map<String,String> stringMap=new HashMap<String,String>();  for (  Map.Entry<CharSequence,CharSequence> entry : charSeqMap.entrySet()) {    stringMap.put(entry.getKey().toString(),entry.getValue().toString());  }  return stringMap;}  }
class C{  public StatusMessage createStatusMessage() throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_MESSAGE);  if (object == null) {    return new StatusMessageImpl();  } else {    return (StatusMessage)object;  }}  }
class C{  static int[] outputConversionFromTranslationTable(char[] table){  int[] conversion=new int[2 * table.length];  int index;  for (index=0; index < table.length; index++) {    conversion[index * 2]=table[index];    conversion[(index * 2) + 1]=index;  }  return conversion;}  }
class C{  public ShapelessRecipe removeIngredient(MaterialData ingredient){  return removeIngredient(ingredient.getItemType(),ingredient.getData());}  }
class C{  private OperationMonitor(final RateTimer timer){  this(timer,new RateWindow(timer,WINDOW_SIZE,SAMPLE_RATE));}  }
class C{  protected EmptyFileFilter(){}  }
class C{  private void assertSetEquals(SortedSet<String> actual,String... expected){  SortedSet<String> values=new TreeSet<>(TestChildCfgDefn.getInstance().getAggregationPropertyPropertyDefinition());  if (expected != null) {    for (    String value : expected) {      values.add(value);    }  }  Assert.assertEquals((Object)actual,(Object)values);}  }
class C{  public static Foo removeByUUID_G(java.lang.String uuid,long groupId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().removeByUUID_G(uuid,groupId);}  }
class C{  public static String convertFromDate(XMPDateTime value){  return ISO8601Converter.render(value);}  }
class C{  private void parseClassDefInfo(SClassDef sClassDef,AST.Invocation superWithInvocation,List<AST.Access> superWithoutInvocation,List<Import> imports,LineCol lineCol) throws SyntaxException {  Iterator<AST.Access> superWithoutInvocationAccess;  if (superWithInvocation == null) {    if (superWithoutInvocation.isEmpty()) {      sClassDef.setParent((SClassDef)getTypeWithName("java.lang.Object",lineCol));      superWithoutInvocationAccess=null;    } else {      superWithoutInvocationAccess=superWithoutInvocation.iterator();      AST.Access mightBeClassAccess=superWithoutInvocationAccess.next();      STypeDef tmp=getTypeWithAccess(mightBeClassAccess,imports);      if (tmp instanceof SClassDef) {        sClassDef.setParent((SClassDef)tmp);      } else       if (tmp instanceof SInterfaceDef) {        sClassDef.superInterfaces().add((SInterfaceDef)tmp);        sClassDef.setParent((SClassDef)getTypeWithName("java.lang.Object",lineCol));      } else {        err.SyntaxException(mightBeClassAccess.toString() + " is not class or interface",mightBeClassAccess.line_col());        return;      }    }  } else {    if (!(superWithInvocation.exp instanceof AST.Access)) {      throw new LtBug("classDef.superWithInvocation.exp should always be AST.Access");    }    AST.Access access=(AST.Access)superWithInvocation.exp;    STypeDef tmp=getTypeWithAccess(access,imports);    if (tmp instanceof SClassDef) {      sClassDef.setParent((SClassDef)tmp);    } else {      err.SyntaxException(access.toString() + " is not class or interface",access.line_col());      return;    }    superWithoutInvocationAccess=superWithoutInvocation.iterator();  }  while (superWithoutInvocationAccess != null && superWithoutInvocationAccess.hasNext()) {    AST.Access interfaceAccess=superWithoutInvocationAccess.next();    STypeDef tmp=getTypeWithAccess(interfaceAccess,imports);    if (tmp instanceof SInterfaceDef) {      sClassDef.superInterfaces().add((SInterfaceDef)tmp);    } else {      err.SyntaxException(interfaceAccess.toString() + " is not interface",interfaceAccess.line_col());      return;    }  }}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  RestAssured.baseURI=BASE_URI;  RestAssured.port=PORT;  f=Fixtures.getInstance();  RestExpressManager.getManager().ensureRestExpressRunning();}  }
class C{  public Scroller(Context context,Interpolator interpolator){  this(context,interpolator,context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB);}  }
class C{  public void insert_dyn_any(org.omg.DynamicAny.DynAny value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_dyn_any",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_dyn_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.PseudonymType createPseudonymType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.PseudonymTypeImpl();}  }
class C{  public void undo() throws CannotUndoException {  if (!canUndo()) {    throw new CannotUndoException();  }  hasBeenDone=false;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  @Override protected void entryRemoved(boolean evicted,String key,BitmapDrawable oldValue,BitmapDrawable newValue){  if (RecyclingBitmapDrawable.class.isInstance(oldValue)) {    ((RecyclingBitmapDrawable)oldValue).setIsCached(false);  } else {    if (Utils.hasHoneycomb()) {      mReusableBitmaps.add(new SoftReference<Bitmap>(oldValue.getBitmap()));    }  }}  }
class C{  private boolean windowBlitPaint(Graphics g){  int width=getWidth();  int height=getHeight();  if ((width == 0) || (height == 0)) {    return false;  }  boolean retValue;  RepaintManager rm=RepaintManager.currentManager(this);  JComponent view=(JComponent)getView();  if (lastPaintPosition == null || lastPaintPosition.equals(getViewLocation())) {    paintView(g);    retValue=false;  } else {    Point blitFrom=new Point();    Point blitTo=new Point();    Dimension blitSize=new Dimension();    Rectangle blitPaint=new Rectangle();    Point newLocation=getViewLocation();    int dx=newLocation.x - lastPaintPosition.x;    int dy=newLocation.y - lastPaintPosition.y;    boolean canBlit=computeBlit(dx,dy,blitFrom,blitTo,blitSize,blitPaint);    if (!canBlit) {      paintView(g);      retValue=false;    } else {      Rectangle r=view.getBounds().intersection(blitPaint);      r.x-=view.getX();      r.y-=view.getY();      blitDoubleBuffered(view,g,r.x,r.y,r.width,r.height,blitFrom.x,blitFrom.y,blitTo.x,blitTo.y,blitSize.width,blitSize.height);      retValue=true;    }  }  lastPaintPosition=getViewLocation();  return retValue;}  }
class C{  public static void addExtensionHeader(String headerName,String className){  nameMap.put(headerName.toLowerCase(),className);}  }
class C{  public int size(){  return count;}  }
class C{  public void modAciOldNewEntry(Entry oldEntry,Entry newEntry,boolean hasAci,boolean hasGlobalAci){  lock.writeLock().lock();  try {    List<LocalizableMessage> failedACIMsgs=new LinkedList<>();    if (hasAci) {      aciList.remove(oldEntry.getName());      List<Attribute> attributeList=newEntry.getOperationalAttribute(aciType);      addAciAttributeList(aciList,newEntry.getName(),configDN,attributeList,failedACIMsgs);    }    if (hasGlobalAci && oldEntry.getName().equals(configDN)) {      aciList.remove(DN.rootDN());      List<Attribute> attributeList=newEntry.getAllAttributes(globalAciType);      addAciAttributeList(aciList,DN.rootDN(),configDN,attributeList,failedACIMsgs);    }  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public DefaultHighlightPainter(Color c){  color=c;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  populateValues=true;  forwardTo();}  }
class C{  public static BooleanArgument noPromptArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_NO_PROMPT).shortIdentifier(OPTION_SHORT_NO_PROMPT).description(INFO_DESCRIPTION_NO_PROMPT.get()).buildArgument();}  }
class C{  static void drawDark3DBorder(Graphics g,Rectangle r){  drawDark3DBorder(g,r.x,r.y,r.width,r.height);}  }
class C{  public static IOCase forName(String name){  if (IOCase.SENSITIVE.name.equals(name)) {    return IOCase.SENSITIVE;  }  if (IOCase.INSENSITIVE.name.equals(name)) {    return IOCase.INSENSITIVE;  }  if (IOCase.SYSTEM.name.equals(name)) {    return IOCase.SYSTEM;  }  throw new IllegalArgumentException("Invalid IOCase name: " + name);}  }
class C{  public void test_setEndRuleIII(){  SimpleTimeZone st=new SimpleTimeZone(1000,"Test_TZ");  st.setStartRule(Calendar.NOVEMBER,1,0);  st.setEndRule(Calendar.NOVEMBER,20,0);  assertTrue("StartRule improperly set1",st.useDaylightTime());  assertTrue("StartRule improperly set2",st.inDaylightTime(new GregorianCalendar(1998,Calendar.NOVEMBER,13).getTime()));  assertTrue("StartRule improperly set3",!(st.inDaylightTime(new GregorianCalendar(1998,Calendar.OCTOBER,13).getTime())));  try {    st.setEndRule(13,20,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(1,32,0);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }  try {    st.setEndRule(1,30,10);    fail("IllegalArgumentException is not thrown.");  } catch (  IllegalArgumentException iae) {  }}  }
class C{  public String toXMLString() throws XACMLException {  return toXMLString(true,false);}  }
class C{  public static void saveAsGnuStepASCII(NSDictionary root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  OutputStreamWriter w=new OutputStreamWriter(new FileOutputStream(out),"ASCII");  w.write(root.toGnuStepASCIIPropertyList());  w.close();}  }
class C{  public Status createStatus(Element elem) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS,elem);  if (object == null) {    return new StatusImpl(elem);  } else {    return (Status)object;  }}  }
class C{  void updateItem(Barcode barcode){  mBarcode=barcode;  postInvalidate();}  }
class C{  public static JLabel createPrimaryLabel(LocalizableMessage text){  JLabel label=new JLabel(text.toString());  label.setFont(ColorAndFontConstants.primaryFont);  label.setForeground(ColorAndFontConstants.foreground);  return label;}  }
class C{  void recycle(){  wrapper=null;  request.recycle();  for (int i=0; i <= lastActiveFilter; i++) {    activeFilters[i].recycle();  }  lastValid=0;  pos=0;  lastActiveFilter=-1;  parsingHeader=true;  swallowInput=true;  headerParsePos=HeaderParsePosition.HEADER_START;  parsingRequestLine=true;  parsingRequestLinePhase=0;  parsingRequestLineEol=false;  parsingRequestLineStart=0;  parsingRequestLineQPos=-1;  headerData.recycle();}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void handleTblHandlersButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  setSubmitCycle(true);  CCActionTable table=(CCActionTable)getChild(WSAuthNServicesModelImpl.ATTRIBUTE_NAME_HANDLERS);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(WSAuthNServicesModelImpl.ATTRIBUTE_NAME_HANDLERS);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(WSAuthNServicesModelImpl.ATTRIBUTE_NAME_HANDLERS);    tblValues.removeAll(selected);    setPageSessionAttribute(WSAuthNServicesModelImpl.ATTRIBUTE_NAME_HANDLERS,tblValues);    populateHandlersTable(tblValues);  }  forwardTo();}  }
class C{  public InputStream extractRevision(String field) throws IOException {  getSignatureNames();  if (!sigNames.containsKey(field))   return null;  int length=sigNames.get(field)[0];  RandomAccessFileOrArray raf=document.getReader().getSafeFile();  return new RASInputStream(new WindowRandomAccessSource(raf.createSourceView(),0,length));}  }
class C{  public boolean isFileSelectionEnabled(){  return ((fileSelectionMode == FILES_ONLY) || (fileSelectionMode == FILES_AND_DIRECTORIES));}  }
class C{  boolean isRealmSubject(){  return subject instanceof SharedSubject;}  }
class C{  public void clear(){  mContext.getContentResolver().delete(mContentUri,null,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeinsertbeforenewchilddiffdocument.class,args);}  }
class C{  public static URL[] toURLs(File[] files) throws IOException {  URL[] urls=new URL[files.length];  for (int i=0; i < urls.length; i++) {    urls[i]=files[i].toURI().toURL();  }  return urls;}  }
class C{  public static int computeStation(float frequency){  return (int)(frequency * CONVERT_RATE);}  }
class C{  public SerializedField(View parent,Model model,String name,String boundName,Serializable value){  super(parent,model,name,boundName,null);  setValue(value,false);}  }
class C{  private void createLayout(){  GridBagConstraints gbc=new GridBagConstraints();  JLabel lTitle=Utilities.createTitleLabel(INFO_CTRL_PANEL_ENTRY_CACHES.get());  gbc.fill=GridBagConstraints.NONE;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridwidth=2;  gbc.gridx=0;  gbc.gridy=0;  gbc.insets.top=5;  gbc.insets.bottom=7;  add(lTitle,gbc);  gbc.insets.bottom=0;  gbc.insets.top=10;  gbc.gridy++;  gbc.anchor=GridBagConstraints.WEST;  gbc.gridwidth=1;  for (int i=0; i < ngOperations.size(); i++) {    gbc.gridy++;    gbc.insets.left=0;    gbc.gridx=0;    gbc.weightx=0.0;    gbc.gridwidth=1;    add(labels.get(i),gbc);    gbc.insets.left=10;    gbc.gridx=1;    gbc.gridwidth=2;    add(monitoringLabels.get(i),gbc);  }  gbc.gridx=0;  gbc.gridy++;  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=1.0;  gbc.weighty=1.0;  gbc.gridwidth=3;  add(Box.createGlue(),gbc);  setBorder(PANEL_BORDER);}  }
class C{  public boolean isValidToken(SSOToken token,boolean resetIdleTime){  try {    return (getProvider(token).isValidToken(token,resetIdleTime));  } catch (  SSOException ignored) {    return (false);  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    System.out.println("shootme: got an ACK " + requestEvent.getRequest());    int ackCount=((ApplicationData)dialog.getApplicationData()).ackCount;    if (ackCount == 1) {      dialog=inviteTid.getDialog();      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction tr=sipProvider.getNewClientTransaction(byeRequest);      System.out.println("shootme: got an ACK -- sending bye! ");      dialog.sendRequest(tr);      System.out.println("Dialog State = " + dialog.getState());    } else     ((ApplicationData)dialog.getApplicationData()).ackCount++;  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  protected Set replaceAciListMacros(Set aciSet,String roleDN,String orgDN,String groupDN,String pcDN){  Set resultSet=new HashSet();  Iterator iter=aciSet.iterator();  while (iter.hasNext()) {    resultSet.add(replaceAciMacros((String)iter.next(),roleDN,orgDN,groupDN,pcDN));  }  return resultSet;}  }
class C{  public String toXMLString() throws SAML2Exception {  return this.toXMLString(true,false);}  }
class C{  public XPathFunctionException(String message){  super(message);}  }
class C{  public static String convertMime2JavaEncoding(String encoding){  for (int i=0; i < _encodings.length; ++i) {    if (_encodings[i].name.equalsIgnoreCase(encoding)) {      return _encodings[i].javaName;    }  }  return encoding;}  }
class C{  public static XMPMeta parse(InputStream in,ParseOptions options) throws XMPException {  return XMPMetaParser.parse(in,options);}  }
class C{  public void logWarning(String string){  getLogger().warn(string);}  }
class C{  private void generateConfigRef() throws MojoExecutionException {  String generatorClass="org.opends.server.admin.doc.ConfigGuideGeneration";  List<String> commands=new LinkedList<>();  try {    commands.add(getJavaCommand());    commands.add("-classpath");    commands.add(Paths.get(serverArchiveDirectory,"lib","bootstrap.jar").toString());    commands.add("-DGenerationDir=" + outputDirectory);    commands.add(generatorClass);  } catch (  Exception e) {    throw new MojoExecutionException("Failed to set the classpath.",e);  }  try {    ProcessBuilder builder=new ProcessBuilder(commands);    Process process=builder.redirectError(ProcessBuilder.Redirect.INHERIT).start();    process.waitFor();    final int result=process.exitValue();    if (result != 0) {      final StringBuilder message=new StringBuilder();      message.append("Failed to generate the config ref. Exit code: ").append(result).append(EOL).append("To debug the problem, run the following command and connect your IDE:").append(EOL);      commands.add(1,"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=8000");      for (      String arg : commands) {        message.append(arg).append(' ');      }      message.append(EOL);      throw new MojoExecutionException(message.toString());    }  } catch (  InterruptedException e) {    throw new MojoExecutionException(generatorClass + " interrupted",e);  }catch (  IOException e) {    throw new MojoExecutionException(generatorClass + " not found",e);  }}  }
class C{  private boolean check_connection_to_pin(boolean p_at_start){  if (corner_count() < 2)   return true;  Collection<BrdItem> contact_list;  if (p_at_start)   contact_list=get_start_contacts(); else   contact_list=get_end_contacts();  BrdAbitPin contact_pin=null;  for (  BrdItem curr_contact : contact_list) {    if (curr_contact instanceof BrdAbitPin) {      contact_pin=(BrdAbitPin)curr_contact;      break;    }  }  if (contact_pin == null)   return true;  Collection<BrdTraceExitRestriction> trace_exit_restrictions=contact_pin.get_trace_exit_restrictions(get_layer());  if (trace_exit_restrictions.isEmpty())   return true;  PlaPointInt end_corner;  PlaPointInt prev_end_corner;  if (p_at_start) {    end_corner=corner_first().round();    prev_end_corner=polyline.corner_first_next().round();  } else {    end_corner=corner_last().round();    prev_end_corner=polyline.corner_last_prev().round();  }  PlaDirection trace_end_direction=new PlaDirection(prev_end_corner,end_corner);  if (trace_end_direction.is_NaN())   return true;  BrdTraceExitRestriction matching_exit_restriction=null;  for (  BrdTraceExitRestriction curr_exit_restriction : trace_exit_restrictions) {    if (curr_exit_restriction.direction.equals(trace_end_direction)) {      matching_exit_restriction=curr_exit_restriction;      break;    }  }  if (matching_exit_restriction == null)   return false;  final double edge_to_turn_dist=r_board.brd_rules.get_pin_edge_to_turn_dist();  if (edge_to_turn_dist < 0)   return false;  double end_line_length=end_corner.distance(prev_end_corner);  double curr_clearance=r_board.get_clearance(clearance_idx(),contact_pin.clearance_idx(),get_layer());  double add_width=Math.max(edge_to_turn_dist,curr_clearance + 1);  double preserve_length=matching_exit_restriction.min_length + get_half_width() + add_width;  return preserve_length <= end_line_length;}  }
class C{  public static void clear(){  INSTANCES.remove();}  }
class C{  public void handleTblDSAttributeMapListHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    WSPPServiceDSAttributeMapListEditViewBean vb=(WSPPServiceDSAttributeMapListEditViewBean)getViewBean(WSPPServiceDSAttributeMapListEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.populateValues((String)getDisplayFieldValue("tblDSAttributeMapListHrefAction"));    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public BufferedHeader(final CharArrayBuffer buffer) throws ParseException {  super();  if (buffer == null) {    throw new IllegalArgumentException("Char array buffer may not be null");  }  int colon=buffer.indexOf(':');  if (colon == -1) {    throw new ParseException("Invalid header: " + buffer.toString());  }  String s=buffer.substringTrimmed(0,colon);  if (s.length() == 0) {    throw new ParseException("Invalid header: " + buffer.toString());  }  this.buffer=buffer;  this.name=s;  this.valuePos=colon + 1;}  }
class C{  private ScheduleConfig initConfig(ComponentContext compContext) throws ResourceException {  configFactoryPID=(String)compContext.getProperties().get("config.factory-pid");  Map<String,Object> config=enhancedConfig.getConfiguration(compContext);  logger.debug("Scheduler service activating with configuration {}",config);  if (config == null) {    return null;  }  return new ScheduleConfig(new JsonValue(config));}  }
class C{  public static void addAttribute(SerializationHandler handler,int attr) throws TransformerException {  TransformerImpl transformer=(TransformerImpl)handler.getTransformer();  DTM dtm=transformer.getXPathContext().getDTM(attr);  if (SerializerUtils.isDefinedNSDecl(handler,attr,dtm))   return;  String ns=dtm.getNamespaceURI(attr);  if (ns == null)   ns="";  try {    handler.addAttribute(ns,dtm.getLocalName(attr),dtm.getNodeName(attr),"CDATA",dtm.getNodeValue(attr),false);  } catch (  SAXException e) {  }}  }
class C{  public final PlaPointInt mirror_vertical(PlaPointInt p_pole){  PlaVectorInt v=difference_by(p_pole);  v=v.mirror_at_y_axis();  return p_pole.translate_by(v);}  }
class C{  @Override public void realWriteChars(char c[],int off,int len) throws IOException {  markPos=-1;  cb.setOffset(0);  cb.setEnd(0);}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name"}) @Test(groups={"api","memberships"}) public void assignUnassignMembers(String parentRealm,String idType,String entityName) throws Exception {  Object[] params={parentRealm,idType,entityName};  entering("assignUnassignMembers",params);  try {    AMIdentity amid1=createDummyUser(parentRealm,entityName,"1");    AMIdentity amid2=createDummyUser(parentRealm,entityName,"2");    AMIdentity amid3=createDummyUser(parentRealm,entityName,"3");    AMIdentity amid=getIdentity(parentRealm,IdUtils.getType(idType),entityName);    amid.addMember(amid1);    assert amid1.isMember(amid);    amid.addMember(amid2);    assert amid1.isMember(amid);    assert amid2.isMember(amid);    amid.addMember(amid3);    assert amid1.isMember(amid);    assert amid2.isMember(amid);    assert amid3.isMember(amid);    Set<AMIdentity> set=new HashSet<AMIdentity>();    set.add(amid2);    set.add(amid3);    amid.removeMember(amid1);    assert !amid1.isMember(amid);    Set members=amid.getMembers(IdType.USER);    assert members.equals(set);    amid.removeMembers(set);    assert !amid1.isMember(amid);    assert !amid2.isMember(amid);    assert !amid3.isMember(amid);    deleteIdentity(parentRealm,IdType.USER,entityName + "1");    deleteIdentity(parentRealm,IdType.USER,entityName + "2");    deleteIdentity(parentRealm,IdType.USER,entityName + "3");  } catch (  Exception e) {    log(Level.SEVERE,"assignUnassignMembers",e.getMessage(),params);    e.printStackTrace();    throw e;  }  exiting("assignUnassignMembers");}  }
class C{  private void updateMnemonics(){  resetMnemonics();  for (int counter=tabPane.getTabCount() - 1; counter >= 0; counter--) {    int mnemonic=tabPane.getMnemonicAt(counter);    if (mnemonic > 0) {      addMnemonic(counter,mnemonic);    }  }}  }
class C{  public FastStringBuffer(){  this(10,15,2);}  }
class C{  public Session createSession(String sessionId,boolean distribute){  DeltaSession session=(DeltaSession)super.createSession(sessionId);  if (distribute) {    sendCreateSession(session.getId(),session);  }  if (log.isDebugEnabled())   log.debug(sm.getString("deltaManager.createSession.newSession",session.getId(),Integer.valueOf(sessions.size())));  return (session);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapgetnameditemns06.class,args);}  }
class C{  boolean isSecureReplication(){  return secureReplication;}  }
class C{  public long executeForLong(String sql,Object[] bindArgs,int connectionFlags,CancellationSignal cancellationSignal){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags,cancellationSignal)) {    return 0;  }  acquireConnection(sql,connectionFlags,cancellationSignal);  try {    return mConnection.executeForLong(sql,bindArgs,cancellationSignal);  }  finally {    releaseConnection();  }}  }
class C{  public boolean writeMessage(FileMessage msg) throws IllegalArgumentException, IOException {  if (!openForWrite)   throw new IllegalArgumentException("Can't write message, this factory is reading.");  if (log.isDebugEnabled())   log.debug("Message " + msg + " data "+ HexUtils.toHexString(msg.getData())+ " data length "+ msg.getDataLength()+ " out "+ out);  if (msg.getMessageNumber() <= lastMessageProcessed.get()) {    log.warn("Receive Message again -- Sender ActTimeout too short [ name: " + msg.getContextName() + " war: "+ msg.getFileName()+ " data: "+ HexUtils.toHexString(msg.getData())+ " data length: "+ msg.getDataLength()+ " ]");    return false;  }  FileMessage previous=msgBuffer.put(Long.valueOf(msg.getMessageNumber()),msg);  if (previous != null) {    log.warn("Receive Message again -- Sender ActTimeout too short [ name: " + msg.getContextName() + " war: "+ msg.getFileName()+ " data: "+ HexUtils.toHexString(msg.getData())+ " data length: "+ msg.getDataLength()+ " ]");    return false;  }  FileMessage next=null;synchronized (this) {    if (!isWriting) {      next=msgBuffer.get(Long.valueOf(lastMessageProcessed.get() + 1));      if (next != null) {        isWriting=true;      } else {        return false;      }    } else {      return false;    }  }  while (next != null) {    out.write(next.getData(),0,next.getDataLength());    lastMessageProcessed.incrementAndGet();    out.flush();    if (next.getMessageNumber() == next.getTotalNrOfMsgs()) {      out.close();      cleanup();      return true;    }synchronized (this) {      next=msgBuffer.get(Long.valueOf(lastMessageProcessed.get() + 1));      if (next == null) {        isWriting=false;      }    }  }  return false;}  }
class C{  public Iterator<NameValue> iterator(){  return this.nameValueMap.values().iterator();}  }
class C{  protected SimpleFileVisitor(){}  }
class C{  public PdfCanvas saveState(){  document.checkIsoConformance('q',IsoKey.CANVAS_STACK);  gsStack.push(currentGs);  currentGs=new CanvasGraphicsState(currentGs);  contentStream.getOutputStream().writeBytes(q);  return this;}  }
class C{  public String toString(){  StringBuilder aci=new StringBuilder();  StringBuffer bindRule=new StringBuffer();  StringBuffer tempBuffer=new StringBuffer();  String value=null;  value=getTarget();  if (value != null && value.length() != 0) {    aci.append(SPACE).append(OPENPARENTH).append(TARGET).append(SPACE).append(EQ).append(SPACE).append(QUOTE).append(value).append(QUOTE).append(CLOSEPARENTH).append(NEWLINE);  }  QualifiedCollection qc=null;  Iterator iter=null;  boolean exclusive;  String operator;  qc=getTargetAttributes();  if (qc != null && qc.getCollection() != null && !qc.getCollection().isEmpty()) {    exclusive=qc.isExclusive();    operator=exclusive ? NE : EQ;    aci.append(SPACE).append(OPENPARENTH).append(TARGETATTR).append(SPACE).append(operator).append(SPACE);    iter=qc.getCollection().iterator();    if (iter.hasNext()) {      value=(String)iter.next();      aci.append(QUOTE).append(value);    }    while (iter.hasNext()) {      value=(String)iter.next();      aci.append(OR_PIPE).append(value);    }    aci.append(QUOTE).append(CLOSEPARENTH).append(NEWLINE);  }  value=getTargetFilter();  if (value != null && value.length() != 0) {    aci.append(SPACE).append(OPENPARENTH).append(TARGETFILTER).append(SPACE).append(EQ).append(SPACE).append(QUOTE).append(value).append(QUOTE).append(CLOSEPARENTH).append(NEWLINE);  }  value=getTargetAttrFilters();  if (value != null && value.length() != 0) {    aci.append(SPACE).append(OPENPARENTH).append(TARGETATTRFILTERS).append(SPACE).append(EQ).append(SPACE).append(QUOTE).append(value).append(QUOTE).append(CLOSEPARENTH).append(NEWLINE);  }  aci.append(SPACE).append(OPENPARENTH).append(VERSION).append(SPACE).append(getVersion()).append(SEMICOLON);  aci.append(ACL).append(SPACE).append(QUOTE).append(getName()).append(QUOTE).append(SEMICOLON);  qc=getPermissions();  if (qc != null && qc.getCollection() != null && !qc.getCollection().isEmpty()) {    exclusive=qc.isExclusive();    String permissionType=exclusive ? DENY : ALLOW;    aci.append(permissionType).append(OPENPARENTH);    iter=qc.getCollection().iterator();    if (iter.hasNext()) {      value=(String)iter.next();      aci.append(value);    }    while (iter.hasNext()) {      value=(String)iter.next();      aci.append(COMMA).append(SPACE).append(value);    }    aci.append(CLOSEPARENTH).append(NEWLINE);  }  Collection collection=null;  collection=getUsers();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(USERDN).append(EQ).append(QUOTE).append(LDAP_PREFIX).append(value);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(OR_PIPE).append(SPACE).append(LDAP_PREFIX).append(value);    }    tempBuffer.append(QUOTE).append(SPACE);  }  if (tempBuffer.length() != 0) {    bindRule.append(tempBuffer);  }  tempBuffer.setLength(0);  collection=getGroups();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(GROUPDN).append(EQ).append(QUOTE).append(LDAP_PREFIX).append(value);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(OR_PIPE).append(SPACE).append(LDAP_PREFIX).append(value);    }    tempBuffer.append(QUOTE).append(SPACE);  }  if (tempBuffer.length() != 0) {    if (bindRule.length() > 0) {      bindRule.append(SPACE).append(OR).append(SPACE);    }    bindRule.append(tempBuffer);  }  tempBuffer.setLength(0);  collection=getRoles();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(ROLEDN).append(EQ).append(QUOTE).append(LDAP_PREFIX).append(value);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(OR_PIPE).append(SPACE).append(LDAP_PREFIX).append(value);    }    tempBuffer.append(QUOTE).append(SPACE);  }  if (tempBuffer.length() != 0) {    if (bindRule.length() > 0) {      bindRule.append(" or ");    }    bindRule.append(tempBuffer);  }  tempBuffer.setLength(0);  collection=getUserDNAttrs();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(USERDNATTR).append(EQ).append(QUOTE).append(value).append(QUOTE);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(OR).append(SPACE);      tempBuffer.append(USERDNATTR).append(EQ).append(QUOTE).append(value).append(QUOTE);    }  }  if (tempBuffer.length() != 0) {    if (bindRule.length() > 0) {      bindRule.append(SPACE).append(OR).append(SPACE);    }    bindRule.append(tempBuffer);  }  tempBuffer.setLength(0);  collection=getGroupDNAttrs();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(GROUPDNATTR).append(EQ).append(QUOTE).append(value).append(QUOTE);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(OR).append(SPACE);      tempBuffer.append(GROUPDNATTR).append(EQ).append(QUOTE).append(value).append(QUOTE);    }  }  if (tempBuffer.length() != 0) {    if (bindRule.length() > 0) {      bindRule.append(SPACE).append(OR).append(SPACE);    }    bindRule.append(tempBuffer);  }  tempBuffer.setLength(0);  collection=getUserAttrs();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(USERATTR).append(EQ).append(QUOTE).append(value).append(QUOTE);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(OR).append(SPACE);      tempBuffer.append(USERATTR).append(EQ).append(QUOTE).append(value).append(QUOTE);    }  }  if (tempBuffer.length() != 0) {    if (bindRule.length() > 0) {      bindRule.append(SPACE).append(OR).append(SPACE);    }    bindRule.append(tempBuffer);  }  if (bindRule.length() > 0) {    bindRule.insert(0,SPACE);    bindRule.insert(1,OPENPARENTH);    bindRule.append(CLOSEPARENTH).append(NEWLINE);  }  tempBuffer.setLength(0);  collection=getAuthMethods();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(AUTHMETHOD).append(EQ).append(QUOTE).append(value).append(QUOTE);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(OR).append(SPACE);      tempBuffer.append(AUTHMETHOD).append(EQ).append(QUOTE).append(value).append(QUOTE);    }  }  if (tempBuffer.length() != 0) {    if (bindRule.length() > 0) {      bindRule.append(SPACE).append(AND).append(SPACE);    }    bindRule.append(OPENPARENTH).append(tempBuffer).append(CLOSEPARENTH);  }  StringBuffer ipBuffer=new StringBuffer();  collection=getClientIP();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      ipBuffer.append(IP).append(EQ).append(QUOTE).append(value).append(QUOTE);    }    while (iter.hasNext()) {      value=(String)iter.next();      ipBuffer.append(SPACE).append(OR).append(SPACE);      ipBuffer.append(IP).append(EQ).append(QUOTE).append(value).append(QUOTE);    }  }  tempBuffer.setLength(0);  collection=getClientHostNames();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(DNS).append(EQ).append(QUOTE).append(value).append(QUOTE);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(OR).append(SPACE);      tempBuffer.append(DNS).append(EQ).append(QUOTE).append(value).append(QUOTE);    }  }  if (ipBuffer.length() != 0) {    ipBuffer.append(SPACE).append(OR).append(SPACE).append(tempBuffer);  } else {    ipBuffer.append(tempBuffer);  }  if (ipBuffer.length() != 0) {    if (bindRule.length() > 0) {      bindRule.append(NEWLINE).append(SPACE).append(AND);    }    bindRule.append(SPACE).append(OPENPARENTH).append(ipBuffer).append(CLOSEPARENTH);  }  tempBuffer.setLength(0);  collection=getDaysOfWeek();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(DAYOFWEEK).append(EQ).append(QUOTE).append(value);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(COMMA).append(SPACE).append(value);    }    tempBuffer.append(QUOTE).append(SPACE);  }  if (tempBuffer.length() != 0) {    if (bindRule.length() > 0) {      bindRule.append(NEWLINE).append(SPACE).append(AND).append(SPACE);    }    bindRule.append(OPENPARENTH).append(tempBuffer).append(CLOSEPARENTH);  }  tempBuffer.setLength(0);  collection=getTimesOfDay();  if (collection != null && !collection.isEmpty()) {    iter=collection.iterator();    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(TIMEOFDAY).append(GE).append(QUOTE).append(value).append(QUOTE);    }    if (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(AND).append(SPACE);      tempBuffer.append(TIMEOFDAY).append(LE).append(QUOTE).append(value).append(QUOTE);    }    while (iter.hasNext()) {      value=(String)iter.next();      tempBuffer.append(SPACE).append(OR).append(SPACE);      tempBuffer.append(TIMEOFDAY).append(GE).append(QUOTE).append(value).append(QUOTE);      if (iter.hasNext()) {        value=(String)iter.next();        tempBuffer.append(SPACE).append(AND).append(SPACE);        tempBuffer.append(TIMEOFDAY).append(LE).append(QUOTE).append(value).append(QUOTE);      }    }  }  if (tempBuffer.length() != 0) {    if (bindRule.length() > 0) {      bindRule.append(NEWLINE).append(SPACE).append(AND).append(SPACE);    }    bindRule.append(OPENPARENTH).append(tempBuffer).append(CLOSEPARENTH);  }  if (bindRule.length() != 0) {    aci.append(bindRule);  }  aci.append(SEMICOLON).append(SPACE).append(CLOSEPARENTH);  return aci.toString().replace('\n',' ');}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  public boolean validate(String value,String rule){  return validate(value);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GREEN_STRATEGY\"";  db.execSQL(sql);}  }
class C{  @BeforeClass public void startServer() throws Exception {  user1=DN.valueOf("cn=user1,dc=example,dc=com");  user2=DN.valueOf("cn=user2,dc=example,dc=com");  user3=DN.valueOf("cn=user3,dc=example,dc=com");  user4=DN.valueOf("cn=user4,dc=example,dc=com");  user5=DN.valueOf("cn=user5,dc=example,dc=com");  int resultCode=TestCaseUtils.applyModifications(true,"dn: cn=schema","changetype: modify","add: attributeTypes","attributeTypes: " + TEST_TIME_DEF,"attributeTypes: " + TEST_DATE_DEF,"-","add: objectclasses","objectclasses: " + TEST_OC_DEF,"objectclasses: " + TEST_OC2_DEF);  assertEquals(0,resultCode);}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void testCaseInsensitiveCanceledInvite(){  try {    Request invite=createRiInviteRequest(null,null,null);    SipEventCollector responseCollector=new SipEventCollector();    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    ClientTransaction riInviteCt;    try {      eventCollector.collectRequestEvent(tiSipProvider);      riInviteCt=riSipProvider.getNewClientTransaction(invite);      riInviteCt.sendRequest();    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent inviteReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (inviteReceivedEvent == null || inviteReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The initial invite request was not received by the TI!");    ServerTransaction tran=null;    try {      tran=tiSipProvider.getNewServerTransaction(inviteReceivedEvent.getRequest());    } catch (    Exception ex) {      ex.printStackTrace();      fail(ex.getClass().getName() + "was thrown while trying to " + "create the server transaction");    }    assertNotNull("tiSipProvider.getNewServerTransaction() returned null",tran);    waitForMessage();    assertEquals(TransactionState.PROCEEDING,tran.getState());    ResponseEvent responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("No TRYING response has been sent by the TI upon reception " + "of an INVITE request",responseEvent);    assertTrue("A response different from 100 was sent by the TI upon " + "reception of INVITE",Response.TRYING == responseEvent.getResponse().getStatusCode());    Response ringing=null;    try {      ringing=tiMessageFactory.createResponse(Response.RINGING,tran.getRequest());      ((ToHeader)ringing.getHeader(ToHeader.NAME)).setTag(Integer.toString(hashCode()));      addStatus(tran.getRequest(),ringing);      ringing.setHeader(createTiContact());    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a ringing " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(ringing);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a RINGING response");    }    assertEquals("The Transaction did not remain PROCEEDING after transmitting a RINGING response",TransactionState.PROCEEDING,tran.getState());    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The RINGING response was not received by the RI",responseEvent);    assertTrue("A response different from RINGING was sent by the TI",Response.RINGING == responseEvent.getResponse().getStatusCode());    Request riCancel=riInviteCt.createCancel();    ViaHeader topVia=(ViaHeader)riCancel.getHeader("Via");    topVia.setBranch(topVia.getBranch().toLowerCase());    try {      eventCollector.collectRequestEvent(tiSipProvider);      riSipProvider.sendRequest(riCancel);    } catch (    SipException ex) {      throw new TckInternalError("A SipExceptionOccurred while trying to send CANCEL request!",ex);    }catch (    TooManyListenersException ex) {      throw new TiUnexpectedError("Failed to register a SipListener with a TI SipProvider",ex);    }    waitForMessage();    RequestEvent cancelReceivedEvent=eventCollector.extractCollectedRequestEvent();    if (cancelReceivedEvent == null || cancelReceivedEvent.getRequest() == null)     throw new TiUnexpectedError("The CANCEL request was not received by the TI!");    Response cancelOK;    try {      cancelOK=tiMessageFactory.createResponse(Response.OK,cancelReceivedEvent.getRequest());      addStatus(cancelReceivedEvent.getRequest(),cancelOK);    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a OK " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      cancelReceivedEvent.getServerTransaction().sendResponse(cancelOK);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a CANCEL OK response");    }    waitForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The CANCEL OK response was not received by the RI",responseEvent);    assertTrue("A response different from OK was sent by the TI",Response.OK == responseEvent.getResponse().getStatusCode());    Response reqTerminated=null;    try {      reqTerminated=tiMessageFactory.createResponse(Response.REQUEST_TERMINATED,tran.getRequest());      addStatus(tran.getRequest(),reqTerminated);    } catch (    ParseException ex) {      throw new TiUnexpectedError("A ParseException was thrown while trying to create a req_terminated " + "response using TI",ex);    }    try {      responseCollector.collectResponseEvent(riSipProvider);    } catch (    TooManyListenersException ex) {      throw new TckInternalError("Failed to register a SipListener with an RI SipProvider",ex);    }    try {      tran.sendResponse(reqTerminated);    } catch (    SipException ex) {      ex.printStackTrace();      fail("The TI failed to send a REQUEST_TERMINATED response");    }    assertEquals("The Transaction did not remain COMPLETED after transmitting a REQUEST_TERMINATED response",TransactionState.COMPLETED,tran.getState());    waitShortForMessage();    responseEvent=responseCollector.extractCollectedResponseEvent();    assertNotNull("The REQUEST_TERMINATED response was not received by the RI",responseEvent);    assertTrue("A response different from REQUEST_TERMINATED was sent by the TI",Response.REQUEST_TERMINATED == responseEvent.getResponse().getStatusCode());    assertEquals("The ServerTransaction did not pas into the confirmed state" + "after receiving an ACK.",TransactionState.CONFIRMED,tran.getState());  } catch (  Throwable exc) {    exc.printStackTrace();    fail(exc.getClass().getName() + ": " + exc.getMessage());  }  assertTrue(new Exception().getStackTrace()[0].toString(),true);}  }
class C{  private String findIDPMetaAlias(String idpEntityID,String spEntityID,String realm,String protocol,SAML2MetaManager saml2Manager){  try {    List hostedIdps=saml2Manager.getAllHostedIdentityProviderEntities(realm);    if (debug.messageEnabled()) {      debug.message("SAML2SingleLogoutHandler.findIDPMetaAlias: " + " all hosted SAML2 IDPs = " + hostedIdps);    }    if ((hostedIdps == null) || hostedIdps.isEmpty()) {      return null;    }    CircleOfTrustManager cotManager=new CircleOfTrustManager();    Set cots=cotManager.getAllActiveCirclesOfTrust(realm);    int num=hostedIdps.size();    for (int i=0; i < num; i++) {      String idpId=(String)hostedIdps.get(i);      Iterator it=cots.iterator();      while (it.hasNext()) {        String cotName=(String)it.next();        if (debug.messageEnabled()) {          debug.message("SAML2SLOHandler.findIDPMetaAlias: " + " check COT = " + cotName);        }        Set providers=cotManager.listCircleOfTrustMember(realm,cotName,SingleLogoutManager.SAML2);        if ((providers == null) || !providers.contains(idpId)) {          continue;        }        providers=cotManager.listCircleOfTrustMember(realm,cotName,protocol);        if ((providers == null) || !providers.contains(idpEntityID)) {          continue;        }        if ((spEntityID != null) && (spEntityID.length() != 0) && !providers.contains(spEntityID)) {          continue;        }        if (SingleLogoutManager.debug.messageEnabled()) {          SingleLogoutManager.debug.message("SAML2SingleLogoutHandler.findIDPMetaAlias : " + "found IDP " + idpId + " in COT "+ cotName);        }        IDPSSOConfigElement config=saml2Manager.getIDPSSOConfig(realm,idpId);        return config.getMetaAlias();      }    }  } catch (  Exception e) {    SingleLogoutManager.debug.error("SAML2SingleLogoutHandler." + "findIDPMetaAlias",e);  }  return null;}  }
class C{  public final void lazySet(V newValue){  unsafe.putOrderedObject(this,valueOffset,newValue);}  }
class C{  public boolean remove(MidiEvent event){synchronized (eventsList) {    if (set.remove(event)) {      int i=eventsList.indexOf(event);      if (i >= 0) {        eventsList.remove(i);        return true;      }    }  }  return false;}  }
class C{  @Override public void bind() throws Exception {  try {    rootPool=Pool.create(0);  } catch (  UnsatisfiedLinkError e) {    throw new Exception(sm.getString("endpoint.init.notavail"));  }  serverSockPool=Pool.create(rootPool);  String addressStr=null;  if (getAddress() != null) {    addressStr=getAddress().getHostAddress();  }  int family=Socket.APR_INET;  if (Library.APR_HAVE_IPV6) {    if (addressStr == null) {      if (!OS.IS_BSD && !OS.IS_WIN32 && !OS.IS_WIN64)       family=Socket.APR_UNSPEC;    } else     if (addressStr.indexOf(':') >= 0) {      family=Socket.APR_UNSPEC;    }  }  long inetAddress=Address.info(addressStr,family,getPort(),0,rootPool);  serverSock=Socket.create(Address.getInfo(inetAddress).family,Socket.SOCK_STREAM,Socket.APR_PROTO_TCP,rootPool);  if (OS.IS_UNIX) {    Socket.optSet(serverSock,Socket.APR_SO_REUSEADDR,1);  }  Socket.optSet(serverSock,Socket.APR_SO_KEEPALIVE,1);  int ret=Socket.bind(serverSock,inetAddress);  if (ret != 0) {    throw new Exception(sm.getString("endpoint.init.bind","" + ret,Error.strerror(ret)));  }  ret=Socket.listen(serverSock,getBacklog());  if (ret != 0) {    throw new Exception(sm.getString("endpoint.init.listen","" + ret,Error.strerror(ret)));  }  if (OS.IS_WIN32 || OS.IS_WIN64) {    Socket.optSet(serverSock,Socket.APR_SO_REUSEADDR,1);  }  if (!useSendFileSet) {    setUseSendfileInternal(Library.APR_HAS_SENDFILE);  } else   if (getUseSendfile() && !Library.APR_HAS_SENDFILE) {    setUseSendfileInternal(false);  }  if (acceptorThreadCount == 0) {    acceptorThreadCount=1;  }  if (deferAccept) {    if (Socket.optSet(serverSock,Socket.APR_TCP_DEFER_ACCEPT,1) == Status.APR_ENOTIMPL) {      deferAccept=false;    }  }  if (isSSLEnabled()) {    for (    SSLHostConfig sslHostConfig : sslHostConfigs.values()) {      createSSLContext(sslHostConfig);    }    SSLHostConfig defaultSSLHostConfig=sslHostConfigs.get(getDefaultSSLHostConfigName());    Long defaultSSLContext=defaultSSLHostConfig.getOpenSslContext();    sslContext=defaultSSLContext.longValue();    SSLContext.registerDefault(defaultSSLContext,this);  }}  }
class C{  public boolean isCollapsed(TreePath path){  return !isExpanded(path);}  }
class C{  public static void usage(){  println("java Agent <nb_traps>");  println("where");  println("    -nb_traps: " + "number of traps the SNMP agent will send.");  println("              " + "If not specified, the agent will send traps continuously.");}  }
class C{  public NASIdentifierAttribute(byte[] octets){  super(octets);  id=new String(octets,2,octets.length - 2);}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  void initialize_is_on_the_left_of_edge_line_array(){  if (is_on_the_left_of_edge_line != null) {    return;  }  is_on_the_left_of_edge_line=new boolean[3];  for (int i=0; i < 3; ++i) {    is_on_the_left_of_edge_line[i]=(edge_lines[i].left_triangle == this);  }}  }
class C{  private String createConnector(String parent,String address,int port,boolean isAjp,boolean isSSL) throws Exception {  String protocol=isAjp ? "AJP/1.3" : "HTTP/1.1";  Connector retobj=new Connector(protocol);  if ((address != null) && (address.length() > 0)) {    retobj.setProperty("address",address);  }  retobj.setPort(port);  retobj.setSecure(isSSL);  retobj.setScheme(isSSL ? "https" : "http");  ObjectName pname=new ObjectName(parent);  Service service=getService(pname);  service.addConnector(retobj);  ObjectName coname=retobj.getObjectName();  return (coname.toString());}  }
class C{  public boolean containsValue(String val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSString.class)) {      NSString str=(NSString)o;      if (str.getContent().equals(val))       return true;    }  }  return false;}  }
class C{  public Background(Color color){  this(color,0,0,0,0);}  }
class C{  public void register(DataServerHandler dsHandler){  startMonitoringPublisher();  connectedDSs.put(dsHandler.getServerId(),dsHandler);  enqueueTopoInfoToAllExcept(dsHandler);}  }
class C{  private SSOToken checkAuthentication(HttpServletRequest request) throws SSOException {  SSOTokenManager manager=SSOTokenManager.getInstance();  SSOToken ssoToken=manager.createSSOToken(request);  manager.validateToken(ssoToken);  return ssoToken;}  }
class C{  protected SizeRequirements calculateMajorAxisRequirements(int axis,SizeRequirements r){  updateInsets();  rowIterator.updateAdjustments();  r=CSS.calculateTiledRequirements(rowIterator,r);  r.maximum=r.preferred;  return r;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("ContextResource[");  sb.append("name=");  sb.append(getName());  if (getDescription() != null) {    sb.append(", description=");    sb.append(getDescription());  }  if (getType() != null) {    sb.append(", type=");    sb.append(getType());  }  if (auth != null) {    sb.append(", auth=");    sb.append(auth);  }  if (scope != null) {    sb.append(", scope=");    sb.append(scope);  }  sb.append("]");  return (sb.toString());}  }
class C{  public String encode(String value) throws EncoderException {  if (value == null) {    return null;  }  return encode(value,getDefaultCharset());}  }
class C{  @Override public boolean isRespectWidth(){  return true;}  }
class C{  protected int layoutRow(FlowView fv,int rowIndex,int p0){  int p1=super.layoutRow(fv,rowIndex,p0);  View row=fv.getView(rowIndex);  Document doc=fv.getDocument();  Object i18nFlag=doc.getProperty(AbstractDocument.I18NProperty);  if ((i18nFlag != null) && i18nFlag.equals(Boolean.TRUE)) {    int n=row.getViewCount();    if (n > 1) {      AbstractDocument d=(AbstractDocument)fv.getDocument();      Element bidiRoot=d.getBidiRootElement();      byte[] levels=new byte[n];      View[] reorder=new View[n];      for (int i=0; i < n; i++) {        View v=row.getView(i);        int bidiIndex=bidiRoot.getElementIndex(v.getStartOffset());        Element bidiElem=bidiRoot.getElement(bidiIndex);        levels[i]=(byte)StyleConstants.getBidiLevel(bidiElem.getAttributes());        reorder[i]=v;      }      BidiUtils.reorderVisually(levels,reorder);      row.replace(0,n,reorder);    }  }  return p1;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnomodificationallowederr.class,args);}  }
class C{  public void w(Object str){  if (logFlag) {    if (logLevel <= android.util.Log.WARN) {      String name=getFunctionName();      if (name != null) {        android.util.Log.w(tag,name + " - " + str);      } else {        android.util.Log.w(tag,str.toString());      }    }  }}  }
class C{  private SearchTemplate toSearchTemplate(AttrSet t){  Attr nameAttr=t.getAttribute(TEMPLATE_NAME);  String name=null;  if (nameAttr != null) {    name=nameAttr.getValue();  }  Attr filterAttr=t.getAttribute(SCHEMA2_SEARCH_FILTER);  if (filterAttr == null) {    filterAttr=t.getAttribute(TEMPLATE_SEARCH_FILTER);  }  String filter=null;  if (filterAttr != null) {    filter=filterAttr.getValue();  }  AttrSet attrSet=decodeAttr(t.getAttribute(TEMPLATE_ATTRS),"=");  SearchTemplate template=new SearchTemplate();  template=new SearchTemplate(name,attrSet,filter);  return template;}  }
class C{  @Override public void flush(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  NodeList childNodes;  Node retval;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  childNodes=titleAttr.getChildNodes();  textNode=doc.createTextNode("terday");  retval=titleAttr.appendChild(textNode);  assertSize("childNodesSize",2,childNodes);  textNode=(Text)childNodes.item(0);  value=textNode.getNodeValue();  assertEquals("child1IsYes","Yes",value);  textNode=(Text)childNodes.item(1);  value=textNode.getNodeValue();  assertEquals("child2IsTerday","terday",value);  textNode=(Text)childNodes.item(2);  assertNull("thirdItemIsNull",textNode);}  }
class C{  public void addRuleSet(RuleSet ruleSet){  String oldNamespaceURI=getRuleNamespaceURI();  String newNamespaceURI=ruleSet.getNamespaceURI();  if (log.isDebugEnabled()) {    if (newNamespaceURI == null) {      log.debug("addRuleSet() with no namespace URI");    } else {      log.debug("addRuleSet() with namespace URI " + newNamespaceURI);    }  }  setRuleNamespaceURI(newNamespaceURI);  ruleSet.addRuleInstances(this);  setRuleNamespaceURI(oldNamespaceURI);}  }
class C{  public static void makeVersionInfoBits(int version,BitVector bits) throws WriterException {  bits.appendBits(version,6);  int bchCode=calculateBCHCode(version,VERSION_INFO_POLY);  bits.appendBits(bchCode,12);  if (bits.size() != 18) {    throw new WriterException("should not happen but we got: " + bits.size());  }}  }
class C{  @Override public void connectionErrorOccurred(final ConnectionEvent event){  final PooledConnection pc=(PooledConnection)event.getSource();  if (null != event.getSQLException()) {    System.err.println("CLOSING DOWN CONNECTION DUE TO INTERNAL ERROR (" + event.getSQLException() + ")");  }  pc.removeConnectionEventListener(this);  final PooledConnectionAndInfo pci=pcMap.get(pc);  if (pci == null) {    throw new IllegalStateException(NO_KEY_MESSAGE);  }  try {    _pool.invalidateObject(pci);  } catch (  final Exception e) {    System.err.println("EXCEPTION WHILE DESTROYING OBJECT " + pci);    e.printStackTrace();  }}  }
class C{  public void read(InputStream in,Document doc,int pos) throws IOException, BadLocationException {  if (doc instanceof StyledDocument) {    RTFReader rdr=new RTFReader((StyledDocument)doc);    rdr.readFromStream(in);    rdr.close();  } else {    super.read(in,doc,pos);  }}  }
class C{  public static void saveAsBinary(NSObject root,File out) throws IOException {  File parent=out.getParentFile();  if (!parent.exists())   if (!parent.mkdirs())   throw new IOException("The output directory does not exist and could not be created.");  BinaryPropertyListWriter.write(out,root);}  }
class C{  public void readHeader(String[] recordListHeader){  Vector header=new Vector(recordListHeader.length);  header.addAll(Arrays.asList(recordListHeader));  String signFieldName=LogConstants.SIGNATURE_FIELDNAME;  for (int j=0; j < header.size(); j++) {    if ((((String)header.get(j))).equalsIgnoreCase(signFieldName)) {      break;    }  }}  }
class C{  public V put(K key,V value){  if (value == null)   throw new NullPointerException();  return doPut(key,value,false);}  }
class C{  VorbisCommentTag(){}  }
class C{  public boolean isDebugOn(){  return (environment.get(CLIConstants.ARGUMENT_DEBUG) != null);}  }
class C{  public static Set updateAndGetRemovableOCs(Set origSet,Set removeOCs){  Set returnOCs=removeOCs;  if (removeOCs != null && !removeOCs.isEmpty()) {    returnOCs=new HashSet();    Iterator itr1=origSet.iterator();    while (itr1.hasNext()) {      String origOC=(String)itr1.next();      Iterator itr2=removeOCs.iterator();      while (itr2.hasNext()) {        String removeOC=(String)itr2.next();        if (origOC.equalsIgnoreCase(removeOC)) {          returnOCs.add(origOC);          break;        }      }    }    origSet.removeAll(returnOCs);  }  return returnOCs;}  }
class C{  public boolean isLogEnabled(){  if (logger == null) {    return false;  } else {    return logger.isLogEnabled();  }}  }
class C{  public boolean hide(){  boolean previous=hidden;  hidden=true;  return previous;}  }
class C{  public static <K,I,M,E extends Exception>Map<K,M> transformMap(final Map<K,I> map,final Function<I,M,E> mapper) throws E {  Reject.ifNull(map,mapper);  final Map<K,M> newMap=new HashMap<K,M>(map.size());  for (  Map.Entry<K,I> entry : map.entrySet()) {    newMap.put(entry.getKey(),mapper.apply(entry.getValue()));  }  return newMap;}  }
class C{  boolean isBeforeEnd(ConcurrentSkipListMap.Node<K,V> n,Comparator<? super K> cmp){  if (n == null)   return false;  if (hi == null)   return true;  K k=n.key;  if (k == null)   return true;  int c=cpr(cmp,k,hi);  if (c > 0 || (c == 0 && !hiInclusive))   return false;  return true;}  }
class C{  public SyncProviderException(){  super();}  }
class C{  @Override public List<Foo> findByField2(boolean field2){  return findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public void testIsConnected_WithServer() throws IOException {  connectLocalServer();  disconnectAfterConnected();  this.datagramSocket1.close();  this.channel1.close();  assertFalse(this.channel1.isConnected());}  }
class C{  public List<Certificate> peerCertificates(){  return peerCertificates;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.RequestElement createRequestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestElementImpl();}  }
class C{  public void testDoubleValueNegMaxValue(){  byte[] a={0,-1,-1,-1,-1,-1,-1,-8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=-1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == -Double.MAX_VALUE);}  }
class C{  public AuthContext(String orgName) throws AuthLoginException {  organizationName=orgName;}  }
class C{  public boolean containsAnnotation(PdfAnnotation annotation){  for (  PdfAnnotation a : getAnnotations()) {    if (a.getPdfObject().equals(annotation.getPdfObject())) {      return true;    }  }  return false;}  }
class C{  public LDAPStatistics(String instanceName){  this.instanceName=instanceName;}  }
class C{  public void testSetKeyEntry() throws Exception {  assertTrue(NotSupportMsg,KSSupported);  KeyStore[] kss=createKS();  assertNotNull("KeyStore objects were not created",kss);  byte[] kk={(byte)1,(byte)2,(byte)127,(byte)77};  String alias="keyEntry";  char[] pwd=new char[0];  byte[] res;  Certificate certs[]={new KeyStoreTestSupport.MCertificate(alias,kk),new KeyStoreTestSupport.MCertificate(alias,kk)};  for (int i=0; i < kss.length; i++) {    kss[i].load(null,null);    try {      kss[i].setKeyEntry("proba",null,null);      fail("KeyStoreException must be thrown");    } catch (    KeyStoreException e) {    }    kss[i].setKeyEntry(alias,kk,certs);    res=kss[i].getKey(alias,pwd).getEncoded();    assertEquals(kk.length,res.length);    for (int j=0; j < res.length; j++) {      assertEquals(res[j],kk[j]);    }    assertEquals(kss[i].getCertificateChain(alias).length,certs.length);    kss[i].setKeyEntry(alias,kk,null);    res=kss[i].getKey(alias,pwd).getEncoded();    assertEquals(kk.length,res.length);    for (int j=0; j < res.length; j++) {      assertEquals(res[j],kk[j]);    }    assertNull(kss[i].getCertificateChain(alias));  }}  }
class C{  public static boolean isUrl(String url){  Pattern pattern=Pattern.compile("^([hH][tT]{2}[pP]://|[hH][tT]{2}[pP][sS]://)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\\/])+$");  return pattern.matcher(url).matches();}  }
class C{  public StartTLSExtendedOperation(){  super();}  }
class C{  @Post("form") @Get public Representation introspect(Representation body) throws OAuth2RestletException {  final OAuth2Request request=requestFactory.create(getRequest());  try {    return new JsonRepresentation(tokenIntrospectionService.introspect(request).asMap());  } catch (  OAuth2Exception e) {    throw new OAuth2RestletException(e.getStatusCode(),e.getError(),e.getMessage(),null);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  Element newOne;  Node domesticNode;  NamedNodeMap attributes;  Attr attribute;  String attrName;  Node appendedChild;  int langAttrCount=0;  doc=(Document)load("hc_staff",true);  docFragment=doc.createDocumentFragment();  newOne=doc.createElement("html");  newOne.setAttribute("lang","EN");  appendedChild=docFragment.appendChild(newOne);  domesticNode=docFragment.getFirstChild();  attributes=domesticNode.getAttributes();  for (int indexN10078=0; indexN10078 < attributes.getLength(); indexN10078++) {    attribute=(Attr)attributes.item(indexN10078);    attrName=attribute.getNodeName();    if (equalsAutoCase("attribute","lang",attrName)) {      langAttrCount+=1;    }  }  assertEquals("hasLangAttr",1,langAttrCount);}  }
class C{  public LauncherScroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  mInterpolator=interpolator;  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;  mPhysicalCoeff=computeDeceleration(0.84f);}  }
class C{  private void addNameForm(String definition,Schema currentSchema,SchemaBuilder schemaBuilder,Set<String> modifiedSchemaFiles) throws DirectoryException {  String oid=SchemaUtils.parseNameFormOID(definition);  final String finalDefinition;  if (!currentSchema.hasNameForm(oid)) {    finalDefinition=completeDefinitionWhenAddingSchemaElement(definition,modifiedSchemaFiles);  } else {    NameForm existingNF=currentSchema.getNameForm(oid);    finalDefinition=completeDefinitionWhenReplacingSchemaElement(definition,existingNF,modifiedSchemaFiles);  }  schemaBuilder.addNameForm(finalDefinition,true);}  }
class C{  public Client(String clientID,String clientType,List<String> redirectionURIs,List<String> allowedGrantScopes,List<String> defaultGrantScopes,List<String> displayName,List<String> displayDescription,List<String> clientName,String subjectType,String idTokenSignedResponseAlgorithm,List<String> postLogoutRedirectionURIs,String accessToken,String clientSessionURI,String applicationType,String clientSecret,List<String> responseTypes,List<String> contacts,Long defaultMaxAge,Boolean defaultMaxAgeEnabled,String tokenEndpointAuthMethod,String jwks,String jwksUri,String x509,String selector,String sectorIdUri,Long authorizationCodeLifeTime,Long accessTokenLifeTime,Long refreshTokenLifeTime,Long jwtTokenLifeTime){  super(new HashMap<String,Object>());  setAccessToken(accessToken);  setAllowedGrantScopes(allowedGrantScopes);  setClientID(clientID);  setClientSessionURI(clientSessionURI);  setClientType(clientType);  setDefaultGrantScopes(defaultGrantScopes);  setDisplayDescription(displayDescription);  setDisplayName(displayName);  setClientName(clientName);  setSubjectType(subjectType);  setIdTokenSignedResponseAlgorithm(idTokenSignedResponseAlgorithm);  setPostLogoutRedirectionURIs(postLogoutRedirectionURIs);  setRedirectionURIs(redirectionURIs);  setApplicationType(applicationType);  setClientSecret(clientSecret);  setResponseTypes(responseTypes);  setContacts(contacts);  setDefaultMaxAge(defaultMaxAge);  setDefaultMaxAgeEnabled(defaultMaxAgeEnabled);  setTokenEndpointAuthMethod(tokenEndpointAuthMethod);  setJwks(jwks);  setJwksUri(jwksUri);  setX509(x509);  setKeySelector(selector);  setSectorIdUri(sectorIdUri);  setAuthorizationCodeLifeTime(authorizationCodeLifeTime);  setAccessTokenLifeTime(accessTokenLifeTime);  setRefreshTokenLifeTime(refreshTokenLifeTime);  setJwtTokenLifeTime(jwtTokenLifeTime);}  }
class C{  public boolean isDirectorySelectionEnabled(){  return ((fileSelectionMode == DIRECTORIES_ONLY) || (fileSelectionMode == FILES_AND_DIRECTORIES));}  }
class C{  public FieldDataInvalidException(Throwable ex){  super(ex);}  }
class C{  DatabaseHelper(Context context){  super(context,DATABASE_NAME,null,DATABASE_VERSION);}  }
class C{  public PlaSegmentInt change_length_approx(double p_new_length){  System.err.println("testing, the original is the commented out");  PlaPointFloat start_approx=start_point_approx();  PlaPointInt start=start_point.round();  PlaPointFloat new_end_point=start_approx.change_length(end_point_approx(),p_new_length);  PlaPointInt end=new_end_point.round();  return new PlaSegmentInt(start,end);}  }
class C{  private void cyclicCircularGradientFillRaster(int pixels[],int off,int adjust,int x,int y,int w,int h){  final double constC=-radiusSq + (centerX * centerX) + (centerY * centerY);  double A, B, C;  double slope, yintcpt;  double solutionX, solutionY;  final float constX=(a00 * x) + (a01 * y) + a02;  final float constY=(a10 * x) + (a11 * y) + a12;  final float precalc2=2 * centerY;  final float precalc3=-2 * centerX;  float g;  float det;  float currentToFocusSq;  float intersectToFocusSq;  float deltaXSq, deltaYSq;  int indexer=off;  int pixInc=w + adjust;  for (int j=0; j < h; j++) {    float X=(a01 * j) + constX;    float Y=(a11 * j) + constY;    for (int i=0; i < w; i++) {      if (X == focusX) {        solutionX=focusX;        solutionY=centerY;        solutionY+=(Y > focusY) ? trivial : -trivial;      } else {        slope=(Y - focusY) / (X - focusX);        yintcpt=Y - (slope * X);        A=(slope * slope) + 1;        B=precalc3 + (-2 * slope * (centerY - yintcpt));        C=constC + (yintcpt * (yintcpt - precalc2));        det=(float)Math.sqrt((B * B) - (4 * A * C));        solutionX=-B;        solutionX+=(X < focusX) ? -det : det;        solutionX=solutionX / (2 * A);        solutionY=(slope * solutionX) + yintcpt;      }      deltaXSq=X - focusX;      deltaXSq=deltaXSq * deltaXSq;      deltaYSq=Y - focusY;      deltaYSq=deltaYSq * deltaYSq;      currentToFocusSq=deltaXSq + deltaYSq;      deltaXSq=(float)solutionX - focusX;      deltaXSq=deltaXSq * deltaXSq;      deltaYSq=(float)solutionY - focusY;      deltaYSq=deltaYSq * deltaYSq;      intersectToFocusSq=deltaXSq + deltaYSq;      g=(float)Math.sqrt(currentToFocusSq / intersectToFocusSq);      pixels[indexer + i]=indexIntoGradientsArrays(g);      X+=a00;      Y+=a10;    }    indexer+=pixInc;  }}  }
class C{  public SQLWarning(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.CompanyElement createCompanyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.CompanyElementImpl();}  }
class C{  public void netWorkTypeStart(int type){switch (NetType.values()[type]) {case TYPE_WIFI:    if (mDebug)     Log.e(TAG,"TYPE_WIFI ");  netTyp=true;break;case TYPE_4G:if (mDebug) Log.e(TAG,"TYPE_4G ");netTyp=true;break;case TYPE_3G:if (mDebug) Log.e(TAG,"TYPE_3G ");netTyp=true;break;case TYPE_2G:if (mDebug) Log.e(TAG,"TYPE_2G ");netTyp=true;break;case TYPE_NULL:if (mDebug) Log.e(TAG,"TYPE_NULL ");netTyp=false;progressDiloag();break;case TYPE_UNKNOWN:netTyp=false;if (mDebug) Log.e(TAG,"TYPE_UNKNOWN: ");default :break;}}  }
class C{  public void putAll(Map t){  rwlock.writeLock().lock();  try {    for (Iterator i=t.entrySet().iterator(); i.hasNext(); ) {      Map.Entry e=(Map.Entry)i.next();      put(e.getKey(),e.getValue());    }  }  finally {    rwlock.writeLock().unlock();  }}  }
class C{  public Time(long time){  super(time);}  }
class C{  protected byte[] engineSign() throws SignatureException {  BigInteger r=null;  BigInteger s=null;  BigInteger k=null;  BigInteger p, q, g, x;  BigInteger digestBI;  byte[] randomBytes;  byte[] rBytes;  byte[] sBytes;  byte[] signature;  int n, n1, n2;  DSAParams params;  if (appRandom == null) {    appRandom=new SecureRandom();  }  params=dsaKey.getParams();  p=params.getP();  q=params.getQ();  g=params.getG();  x=((DSAPrivateKey)dsaKey).getX();  digestBI=new BigInteger(1,msgDigest.digest());  randomBytes=new byte[20];  for (; ; ) {    appRandom.nextBytes(randomBytes);    k=new BigInteger(1,randomBytes);    if (k.compareTo(q) != -1) {      continue;    }    r=g.modPow(k,p).mod(q);    if (r.signum() == 0) {      continue;    }    s=k.modInverse(q).multiply(digestBI.add(x.multiply(r)).mod(q)).mod(q);    if (s.signum() != 0) {      break;    }  }  rBytes=r.toByteArray();  n1=rBytes.length;  if ((rBytes[0] & 0x80) != 0) {    n1++;  }  sBytes=s.toByteArray();  n2=sBytes.length;  if ((sBytes[0] & 0x80) != 0) {    n2++;  }  signature=new byte[6 + n1 + n2];  signature[0]=(byte)0x30;  signature[1]=(byte)(4 + n1 + n2);  signature[2]=(byte)0x02;  signature[3]=(byte)n1;  signature[4 + n1]=(byte)0x02;  signature[5 + n1]=(byte)n2;  if (n1 == rBytes.length) {    n=4;  } else {    n=5;  }  System.arraycopy(rBytes,0,signature,n,rBytes.length);  if (n2 == sBytes.length) {    n=6 + n1;  } else {    n=7 + n1;  }  System.arraycopy(sBytes,0,signature,n,sBytes.length);  return signature;}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_security_IdentityScope(){  String nameNull=null;  String[] str={"test","","!@#$%^&*()","identity name"};  IdentityScope is;  IdentityScope iss=new IdentityScopeSubclass("test scope");  for (int i=0; i < str.length; i++) {    try {      is=new IdentityScopeSubclass(str[i],new IdentityScopeSubclass());      assertNotNull(is);      assertTrue(is instanceof IdentityScope);    } catch (    Exception e) {      fail("Unexpected exception for parameter " + str[i]);    }  }  try {    is=new IdentityScopeSubclass(nameNull,new IdentityScopeSubclass());  } catch (  NullPointerException npe) {  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  try {    is=new IdentityScopeSubclass("test",iss);    is=new IdentityScopeSubclass("test",iss);    fail("KeyManagementException was not thrown");  } catch (  KeyManagementException npe) {  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown instead of KeyManagementException");  }}  }
class C{  public void addPropertyChangeListener(String name,PropertyChangeListener pcl){  pcSupport.addPropertyChangeListener(name,pcl);}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  static Class<?> canonicalize(Class<?> t,int how){  Class<?> ct;  if (t == Object.class) {  } else   if (!t.isPrimitive()) {switch (how) {case UNWRAP:      ct=Wrapper.asPrimitiveType(t);    if (ct != t)     return ct;  break;case RAW_RETURN:case ERASE:return Object.class;}} else if (t == void.class) {switch (how) {case RAW_RETURN:return int.class;case WRAP:return Void.class;}} else {switch (how) {case WRAP:return Wrapper.asWrapperType(t);case INTS:if (t == int.class || t == long.class) return null;if (t == double.class) return long.class;return int.class;case LONGS:if (t == long.class) return null;return long.class;case RAW_RETURN:if (t == int.class || t == long.class || t == float.class || t == double.class) return null;return int.class;}}return null;}  }
class C{  @Override public Promise<QueryResponse,ResourceException> handleQuery(final Context context,final QueryRequest request,final QueryResourceHandler handler){  final int requestPageSize=request.getPageSize();  final String pagedResultsCookie=request.getPagedResultsCookie();  final boolean pagedResultsRequested=requestPageSize > 0;  final int firstResultIndex;  if (pagedResultsRequested) {    if (StringUtils.isNotEmpty(pagedResultsCookie)) {      try {        firstResultIndex=Integer.parseInt(pagedResultsCookie);      } catch (      final NumberFormatException e) {        return new BadRequestException("Invalid paged results cookie").asPromise();      }    } else {      firstResultIndex=Math.max(0,request.getPagedResultsOffset());    }  } else {    firstResultIndex=0;  }  request.setPagedResultsOffset(firstResultIndex);  try {    List<ResourceResponse> results=query(request);    for (    ResourceResponse result : results) {      handler.handleResource(result);    }    final String nextCookie;    final int resultCount;    if (pagedResultsRequested) {switch (request.getTotalPagedResultsPolicy()) {case ESTIMATE:case EXACT:        final String countQueryId=request.getQueryId() + "-count";      if (queries.queryIdExists(countQueryId)) {        QueryRequest countRequest=Requests.copyOfQueryRequest(request);        countRequest.setQueryId(countQueryId);        countRequest.setPageSize(0);        countRequest.setPagedResultsOffset(0);        countRequest.setPagedResultsCookie(null);        List<ResourceResponse> countResult=query(countRequest);        if (countResult != null && !countResult.isEmpty()) {          resultCount=countResult.get(0).getContent().get("total").asInteger();        } else {          logger.debug("Count query {} failed.",countQueryId);          resultCount=NO_COUNT;        }      } else {        logger.debug("No count query found with id {}",countQueryId);        resultCount=NO_COUNT;      }    break;case NONE:default :  resultCount=NO_COUNT;break;}if (results.size() < requestPageSize) {nextCookie=null;} else {final int remainingResults=resultCount - (firstResultIndex + results.size());if (remainingResults == 0) {nextCookie=null;} else {nextCookie=String.valueOf(firstResultIndex + requestPageSize);}}} else {resultCount=NO_COUNT;nextCookie=null;}if (resultCount == NO_COUNT) {return newQueryResponse(nextCookie).asPromise();} else {return newQueryResponse(nextCookie,EXACT,resultCount).asPromise();}} catch (ResourceException e) {return e.asPromise();}}  }
class C{  private static String javaCharset(String charset){  if (charset == null) {    return null;  }  String mappedCharset=MIME2JAVA.get(charset.toLowerCase(Locale.ENGLISH));  if (mappedCharset == null) {    return charset;  }  return mappedCharset;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap entities;  DocumentType docType;  Node retval;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    entities=docType.getEntities();    assertNotNull("entitiesNotNull",entities);    try {      retval=entities.removeNamedItemNS("http://www.w3.org/1999/xhtml","alpha");      fail("throw_NO_MOD_OR_NOT_FOUND_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 7:        break;case 8:      break;default :    throw ex;}}}}  }
class C{  protected void BuildFDSubrsOffsets(int Font,int FD){  fonts[Font].PrivateSubrsOffset[FD]=-1;  seek(fonts[Font].fdprivateOffsets[FD]);  while (getPosition() < fonts[Font].fdprivateOffsets[FD] + fonts[Font].fdprivateLengths[FD]) {    getDictItem();    if ("Subrs".equals(key))     fonts[Font].PrivateSubrsOffset[FD]=(int)((Integer)args[0]) + fonts[Font].fdprivateOffsets[FD];  }  if (fonts[Font].PrivateSubrsOffset[FD] >= 0)   fonts[Font].PrivateSubrsOffsetsArray[FD]=getIndex(fonts[Font].PrivateSubrsOffset[FD]);}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  void pushSpaceHandling(Attributes attrs) throws org.xml.sax.SAXParseException {  String value=attrs.getValue("xml:space");  if (null == value) {    m_spacePreserveStack.push(m_spacePreserveStack.peekOrFalse());  } else   if (value.equals("preserve")) {    m_spacePreserveStack.push(true);  } else   if (value.equals("default")) {    m_spacePreserveStack.push(false);  } else {    SAXSourceLocator locator=getLocator();    ErrorListener handler=m_stylesheetProcessor.getErrorListener();    try {      handler.error(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_XMLSPACE_VALUE,null),locator));    } catch (    TransformerException te) {      throw new org.xml.sax.SAXParseException(te.getMessage(),locator,te);    }    m_spacePreserveStack.push(m_spacePreserveStack.peek());  }}  }
class C{  public String readNString() throws SQLException {  return (String)getNextAttribute();}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  if (changeSupport != null) {    changeSupport.removePropertyChangeListener(listener);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element badElement;  doc=(Document)load("hc_staff",true);{    boolean success=false;    try {      badElement=doc.createElement("invalid^Name");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public LoginException(String message){  super(message);}  }
class C{  private void removeObjectClass(String definition,SchemaBuilder newSchemaBuilder,List<Modification> modifications,int currentPosition,Set<String> modifiedSchemaFiles) throws DirectoryException {  Schema currentSchema=newSchemaBuilder.toSchema();  String ocOID=SchemaUtils.parseObjectClassOID(definition);  if (!currentSchema.hasObjectClass(ocOID)) {    LocalizableMessage message=ERR_SCHEMA_MODIFY_REMOVE_NO_SUCH_OBJECTCLASS.get(ocOID);    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  for (int i=currentPosition + 1; i < modifications.size(); i++) {    Modification m=modifications.get(i);    Attribute a=m.getAttribute();    if (m.getModificationType() != ModificationType.ADD || !a.getAttributeDescription().getAttributeType().equals(objectClassesType)) {      continue;    }    for (    ByteString v : a) {      String oid;      try {        oid=SchemaUtils.parseObjectClassOID(v.toString());      } catch (      DirectoryException de) {        logger.traceException(de);        throw de;      }      if (ocOID.equals(oid)) {        return;      }    }  }  newSchemaBuilder.removeObjectClass(ocOID);  addElementIfNotNull(modifiedSchemaFiles,getElementSchemaFile(currentSchema.getObjectClass(ocOID)));}  }
class C{  private final void postEventPrivate(AWTEvent theEvent){  theEvent.isPosted=true;  pushPopLock.lock();  try {    if (nextQueue != null) {      nextQueue.postEventPrivate(theEvent);      return;    }    if (dispatchThread == null) {      if (theEvent.getSource() == AWTAutoShutdown.getInstance()) {        return;      } else {        initDispatchThread();      }    }    postEvent(theEvent,getPriority(theEvent));  }  finally {    pushPopLock.unlock();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childNodes;  ProcessingInstruction piNode;  String data;  doc=(Document)load("staff",false);  childNodes=doc.getChildNodes();  piNode=(ProcessingInstruction)childNodes.item(0);  data=piNode.getData();  assertEquals("processinginstructionGetTargetAssert","PIDATA",data);}  }
class C{  public ConnectException(){}  }
class C{  public SchemaFactoryConfigurationError(String message){  super(message);}  }
class C{  public boolean isExclusive(){  return exclusive;}  }
class C{  public final int _firstch2(int identity){  if (identity < m_blocksize)   return m_firstch_map0[identity]; else   return m_firstch_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  @Override public void addHeader(String name,String value){  if (!included)   ((HttpServletResponse)getResponse()).addHeader(name,value);}  }
class C{  private void sendResponse(Document doc,MessageFactory messageFactory,String contentType,HttpServletResponse res) throws IOException, SOAPException {  SOAPMessage reply=messageFactory.createMessage();  SOAPHeader header=reply.getSOAPHeader();  header.detachNode();  SOAPBody replyBody=reply.getSOAPBody();  res.setHeader("Content-Type",contentType);  replyBody.addDocument(doc);  reply.saveChanges();  OutputStream os=res.getOutputStream();  reply.writeTo(os);  os.flush();}  }
class C{  public void warning(SAXParseException e) throws SAXException {  System.err.println(e.getMessage());}  }
class C{  public org.omg.CORBA.TCKind discriminator_kind(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("discriminator_kind",_opsClass);  DynUnionOperations $self=(DynUnionOperations)$so.servant;  try {    return $self.discriminator_kind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void newPixels(){  newPixels(0,0,width,height,true);}  }
class C{  public String generateCode(CodeGeneratorSource alphabet,int length){  Reject.ifTrue(length < 1);  Reject.ifNull(alphabet);  StringBuilder codeBuilder=new StringBuilder(length);  String chars=alphabet.getChars();  for (int k=0; k < length; k++) {    codeBuilder.append(chars.charAt(secureRandom.nextInt(chars.length())));  }  return codeBuilder.toString();}  }
class C{  void delete(SSOToken token) throws SMSException, SSOException {  if (!newEntry) {    if (backendProxyEnabled) {      if (isAllowed(token,normalizedDN,modifyActionSet)) {        if (adminSSOToken == null) {          adminSSOToken=(SSOToken)AccessController.doPrivileged(com.sun.identity.security.AdminTokenAction.getInstance());        }        token=adminSSOToken;      }    } else {      getDelegationPermission(token,normalizedDN,modifyActionSet);    }    smsObject.delete(token,dn);    newEntry=true;    attrSet=null;    modSet=null;    SMSNotificationManager.getInstance().localObjectChanged(dn,SMSObjectListener.DELETE);  } else {    if (debug.warningEnabled()) {      debug.warning("SMSEntry: Attempted to delete an entry that " + "does not exist: " + dn);    }  }}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  if (null == m_selectPattern && sroot.getOptimizer()) {    XPath newSelect=rewriteChildToExpression(this);    if (null != newSelect)     m_selectPattern=newSelect;  }  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_selectPattern)   m_selectPattern.fixupVariables(vnames,cstate.getGlobalsSize());  if (!(m_parentNode instanceof Stylesheet) && m_qname != null) {    m_index=cstate.addVariableName(m_qname) - cstate.getGlobalsSize();  } else   if (m_parentNode instanceof Stylesheet) {    cstate.resetStackFrameSize();  }  super.compose(sroot);}  }
class C{  public static BooleanArgument showUsageArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_HELP).shortIdentifier(OPTION_SHORT_HELP).description(INFO_DESCRIPTION_SHOWUSAGE.get()).buildArgument();}  }
class C{  public void stopLogVerifier(){  if (verifier != null) {    verifier.cancel();    verifier=null;  }}  }
class C{  private void parsedExpsNotEmpty(Node tokenNode) throws UnexpectedTokenException {  if (parsedExps.empty()) {    err.UnexpectedTokenException(tokenNode.toString(),tokenNode.getLineCol());    throw new ParseFail();  }}  }
class C{  public static int dip2px(float dpValue){  float scale=2;  try {    scale=WXEnvironment.getApplication().getResources().getDisplayMetrics().density;  } catch (  Exception e) {    WXLogUtils.e("[WXViewUtils] dip2px:" + WXLogUtils.getStackTrace(e));  }  float finalPx=(dpValue * scale + 0.5f);  return finalPx > 0 && finalPx < 1 ? 1 : (int)finalPx;}  }
class C{  public void assignService(Map map) throws AMConsoleException {  String[] params={currentRealm,serviceName};  logEvent("ATTEMPT_ASSIGN_SERVICE_TO_REALM",params);  try {    AMIdentityRepository repo=new AMIdentityRepository(getUserSSOToken(),currentRealm);    AMIdentity realmIdentity=repo.getRealmIdentity();    Set servicesFromIdRepo=realmIdentity.getAssignableServices();    if (servicesFromIdRepo.contains(serviceName)) {      realmIdentity.assignService(serviceName,map);    } else {      OrganizationConfigManager orgCfgMgr=new OrganizationConfigManager(getUserSSOToken(),currentRealm);      orgCfgMgr.assignService(serviceName,map);    }    logEvent("SUCCEED_ASSIGN_SERVICE_TO_REALM",params);  } catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={currentRealm,serviceName,strError};    logEvent("SSO_EXCEPTION_ASSIGN_SERVICE_TO_REALM",paramsEx);    throw new AMConsoleException(strError);  }catch (  IdRepoException e) {    String strError=getErrorString(e);    String[] paramsEx={currentRealm,serviceName,strError};    logEvent("IDREPO_EXCEPTION_ASSIGN_SERVICE_TO_REALM",paramsEx);    throw new AMConsoleException(strError);  }catch (  SMSException e) {    String strError=getErrorString(e);    String[] paramsEx={currentRealm,serviceName,strError};    logEvent("SMS_EXCEPTION_ASSIGN_SERVICE_TO_REALM",paramsEx);    throw new AMConsoleException(strError);  }}  }
class C{  public int hashCode(){  int value=m << 5;  value+=(rp == null ? 0 : rp.hashCode());  return value;}  }
class C{  public static void updateProviderKeyInfo(String realm,String entityID,Set<String> certAliases,boolean isSigning,boolean isIDP,String encAlgo,int keySize) throws SAML2MetaException {  SAML2MetaManager metaManager=new SAML2MetaManager();  EntityConfigElement config=metaManager.getEntityConfig(realm,entityID);  if (!config.isHosted()) {    String[] args={entityID,realm};    throw new SAML2MetaException("entityNotHosted",args);  }  EntityDescriptorElement desp=metaManager.getEntityDescriptor(realm,entityID);  BaseConfigType baseConfig;  RoleDescriptorType descriptor;  if (isIDP) {    baseConfig=SAML2MetaUtils.getIDPSSOConfig(config);    descriptor=SAML2MetaUtils.getIDPSSODescriptor(desp);    if (baseConfig == null || descriptor == null) {      String[] args={entityID,realm};      throw new SAML2MetaException("entityNotIDP",args);    }  } else {    baseConfig=SAML2MetaUtils.getSPSSOConfig(config);    descriptor=SAML2MetaUtils.getSPSSODescriptor(desp);    if (baseConfig == null || descriptor == null) {      String[] args={entityID,realm};      throw new SAML2MetaException("entityNotSP",args);    }  }  if (CollectionUtils.isEmpty(certAliases)) {    removeKeyDescriptor(descriptor,isSigning);    if (isSigning) {      setExtendedAttributeValue(baseConfig,SAML2Constants.SIGNING_CERT_ALIAS,null);    } else {      setExtendedAttributeValue(baseConfig,SAML2Constants.ENCRYPTION_CERT_ALIAS,null);    }  } else {    Set<KeyDescriptorType> keyDescriptors=new LinkedHashSet<>(certAliases.size());    for (    String certAlias : certAliases) {      keyDescriptors.add(getKeyDescriptor(certAlias,isSigning,encAlgo,keySize));    }    updateKeyDescriptor(descriptor,keyDescriptors);    if (isSigning) {      setExtendedAttributeValue(baseConfig,SAML2Constants.SIGNING_CERT_ALIAS,certAliases);    } else {      setExtendedAttributeValue(baseConfig,SAML2Constants.ENCRYPTION_CERT_ALIAS,certAliases);    }  }  metaManager.setEntityDescriptor(realm,desp);  metaManager.setEntityConfig(realm,config);}  }
class C{  private static boolean transform(JsonValue subject,PatchOperation operation,PatchValueTransformer transformer) throws ResourceException {  if (!operation.isTransform()) {    throw new BadRequestException("Operation is a " + operation.getOperation() + ", not a transform!");  }  JsonValue value=transformer.getTransformedValue(operation,subject);  if (value == null) {    subject.remove(operation.getField());  } else {    subject.put(operation.getField(),value.getObject());  }  return true;}  }
class C{  private static int parseFractionalConfig(Iterator<?> exclIt,Iterator<?> inclIt,Map<String,Set<String>> fractionalSpecificClassesAttributes,Set<String> fractionalAllClassesAttributes) throws ConfigException {  int fractionalMode;  Iterator<?> iterator;  if (exclIt != null && exclIt.hasNext()) {    if (inclIt != null && inclIt.hasNext()) {      throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_BOTH_MODES.get());    }    fractionalMode=EXCLUSIVE_FRACTIONAL;    iterator=exclIt;  } else {    if (inclIt != null && inclIt.hasNext()) {      fractionalMode=INCLUSIVE_FRACTIONAL;      iterator=inclIt;    } else {      return NOT_FRACTIONAL;    }  }  while (iterator.hasNext()) {    String fractCfgStr=iterator.next().toString();    StringTokenizer st=new StringTokenizer(fractCfgStr,":");    int nTokens=st.countTokens();    if (nTokens < 2) {      throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_WRONG_FORMAT.get(fractCfgStr));    }    String classNameLower=st.nextToken().toLowerCase();    boolean allClasses="*".equals(classNameLower);    String attributes=st.nextToken();    st=new StringTokenizer(attributes,",");    while (st.hasMoreTokens()) {      String attrNameLower=st.nextToken().toLowerCase();      if (allClasses) {        fractionalAllClassesAttributes.add(attrNameLower);      } else {        Set<String> attrList=fractionalSpecificClassesAttributes.get(classNameLower);        if (attrList == null) {          attrList=new LinkedHashSet<>();          fractionalSpecificClassesAttributes.put(classNameLower,attrList);        }        attrList.add(attrNameLower);      }    }  }  return fractionalMode;}  }
class C{  public X509CRLEntryImpl(TBSCertList.RevokedCertificate rcert,X500Principal issuer){  this.rcert=rcert;  this.extensions=rcert.getCrlEntryExtensions();  this.issuer=issuer;}  }
class C{  public String toASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCII(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  protected ConnectionStateSSLv3(SSLSessionImpl session){  try {    CipherSuite cipherSuite=session.cipherSuite;    boolean is_exportabe=cipherSuite.isExportable();    hash_size=cipherSuite.getMACLength();    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;    int iv_size=cipherSuite.ivSize;    block_size=cipherSuite.getBlockSize();    String algName=cipherSuite.getBulkEncryptionAlgorithm();    String hashName=cipherSuite.getHashName();    if (logger != null) {      logger.println("ConnectionStateSSLv3.create:");      logger.println("  cipher suite name: " + session.getCipherSuite());      logger.println("  encryption alg name: " + algName);      logger.println("  hash alg name: " + hashName);      logger.println("  hash size: " + hash_size);      logger.println("  block size: " + block_size);      logger.println("  IV size:" + iv_size);      logger.println("  key size: " + key_size);    }    byte[] clientRandom=session.clientRandom;    byte[] serverRandom=session.serverRandom;    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];    byte[] seed=new byte[clientRandom.length + serverRandom.length];    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);    PRF.computePRF_SSLv3(key_block,session.master_secret,seed);    byte[] client_mac_secret=new byte[hash_size];    byte[] server_mac_secret=new byte[hash_size];    byte[] client_key=new byte[key_size];    byte[] server_key=new byte[key_size];    boolean is_client=!session.isServer;    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);    IvParameterSpec clientIV=null;    IvParameterSpec serverIV=null;    if (is_exportabe) {      if (logger != null) {        logger.println("ConnectionStateSSLv3: is_exportable");      }      MessageDigest md5=MessageDigest.getInstance("MD5");      md5.update(client_key);      md5.update(clientRandom);      md5.update(serverRandom);      client_key=md5.digest();      md5.update(server_key);      md5.update(serverRandom);      md5.update(clientRandom);      server_key=md5.digest();      key_size=cipherSuite.expandedKeyMaterial;      if (block_size != 0) {        md5.update(clientRandom);        md5.update(serverRandom);        clientIV=new IvParameterSpec(md5.digest(),0,iv_size);        md5.update(serverRandom);        md5.update(clientRandom);        serverIV=new IvParameterSpec(md5.digest(),0,iv_size);      }    } else     if (block_size != 0) {      clientIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size,iv_size);      serverIV=new IvParameterSpec(key_block,2 * hash_size + 2 * key_size + iv_size,iv_size);    }    if (logger != null) {      logger.println("is exportable: " + is_exportabe);      logger.println("master_secret");      logger.print(session.master_secret);      logger.println("client_random");      logger.print(clientRandom);      logger.println("server_random");      logger.print(serverRandom);      logger.println("client_mac_secret");      logger.print(client_mac_secret);      logger.println("server_mac_secret");      logger.print(server_mac_secret);      logger.println("client_key");      logger.print(client_key,0,key_size);      logger.println("server_key");      logger.print(server_key,0,key_size);      if (clientIV != null) {        logger.println("client_iv");        logger.print(clientIV.getIV());        logger.println("server_iv");        logger.print(serverIV.getIV());      } else {        logger.println("no IV.");      }    }    if (algName == null) {      encCipher=new NullCipher();      decCipher=new NullCipher();    } else {      encCipher=Cipher.getInstance(algName);      decCipher=Cipher.getInstance(algName);      if (is_client) {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);      } else {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,0,key_size,algName),serverIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,0,key_size,algName),clientIV);      }    }    messageDigest=MessageDigest.getInstance(hashName);    if (is_client) {      mac_write_secret=client_mac_secret;      mac_read_secret=server_mac_secret;    } else {      mac_write_secret=server_mac_secret;      mac_read_secret=client_mac_secret;    }    if (hashName.equals("MD5")) {      pad_1=SSLv3Constants.MD5pad1;      pad_2=SSLv3Constants.MD5pad2;    } else {      pad_1=SSLv3Constants.SHApad1;      pad_2=SSLv3Constants.SHApad2;    }  } catch (  Exception e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));  }}  }
class C{  public Iterator<E> iterator(){  return m.navigableKeySet().iterator();}  }
class C{  private EditorComponent(BinaryCellPanel binaryPanel){  comp=binaryPanel;}  }
class C{  public PasswordStorageSchemeConfigManager(ServerContext serverContext){  this.serverContext=serverContext;  storageSchemes=new ConcurrentHashMap<>();}  }
class C{  public AuthConfigTest(){  super("CLI");}  }
class C{  private static String keyUsageToString(boolean[] k){  String s="KeyUsage [\n";  try {    if (k[0]) {      s+="  DigitalSignature\n";    }    if (k[1]) {      s+="  Non_repudiation\n";    }    if (k[2]) {      s+="  Key_Encipherment\n";    }    if (k[3]) {      s+="  Data_Encipherment\n";    }    if (k[4]) {      s+="  Key_Agreement\n";    }    if (k[5]) {      s+="  Key_CertSign\n";    }    if (k[6]) {      s+="  Crl_Sign\n";    }    if (k[7]) {      s+="  Encipher_Only\n";    }    if (k[8]) {      s+="  Decipher_Only\n";    }  } catch (  ArrayIndexOutOfBoundsException ex) {  }  s+="]\n";  return (s);}  }
class C{  public static String convertJAXBToString(Object jaxbObj) throws JAXBException {  StringWriter sw=new StringWriter();  Marshaller marshaller=jaxbContext.createMarshaller();  marshaller.setProperty(PROP_JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  marshaller.setProperty(PROP_NAMESPACE_PREFIX_MAPPER,nsPrefixMapper);  marshaller.marshal(jaxbObj,sw);  return sw.toString();}  }
class C{  @Inject public JSONSerialisation(@Named(CoreTokenConstants.OBJECT_MAPPER) ObjectMapper mapper){  this.mapper=mapper;}  }
class C{  public static ExecutorService newWorkStealingPool(int parallelism){  return new ForkJoinPool(parallelism,ForkJoinPool.defaultForkJoinWorkerThreadFactory,null,true);}  }
class C{  public String toString(){  return uri.toString();}  }
class C{  public Duration minus(Duration duration){  long secsToSubtract=duration.getSeconds();  int nanosToSubtract=duration.getNano();  if (secsToSubtract == Long.MIN_VALUE) {    return plus(Long.MAX_VALUE,-nanosToSubtract).plus(1,0);  }  return plus(-secsToSubtract,-nanosToSubtract);}  }
class C{  public void removeFromEntityConfig(String realm,String cotName,String entityID) throws IDFFMetaException, JAXBException {  String classMethod="IDFFCOTUtils.removeFromEntityConfig: ";  IDFFMetaManager idffMetaMgr=new IDFFMetaManager(callerSession);  EntityDescriptorElement entityDesc=idffMetaMgr.getEntityDescriptor(realm,entityID);  if (entityDesc == null) {    debug.error(classMethod + "No such entity: " + entityID);    String[] data={entityID};    throw new IDFFMetaException("invalidEntityID",data);  }  EntityConfigElement entityConfig=idffMetaMgr.getEntityConfig(realm,entityID);  if (entityConfig != null) {    List spConfigList=entityConfig.getSPDescriptorConfig();    List idpConfigList=entityConfig.getIDPDescriptorConfig();    removeCOTNameFromConfig(realm,spConfigList,cotName,entityConfig,idffMetaMgr);    removeCOTNameFromConfig(realm,idpConfigList,cotName,entityConfig,idffMetaMgr);    BaseConfigType affiConfig=entityConfig.getAffiliationDescriptorConfig();    if (affiConfig != null) {      List affiConfigList=new ArrayList();      affiConfigList.add(affiConfig);      removeCOTNameFromConfig(realm,affiConfigList,cotName,entityConfig,idffMetaMgr);    }  }}  }
class C{  public static MultiLineString fromJson(String json){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionDeserializer());  return gson.create().fromJson(json,MultiLineString.class);}  }
class C{  public LogException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public void removeListener(String listenerID){  if (scm != null) {    scm.removeListener(listenerID);  }}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  if ((this.getAny() != null) && (this.getAny().size() > 0)) {    stringBuilder.append("<StatusDetail>");    Iterator iterator=this.getAny().iterator();    while (iterator.hasNext()) {      Object object=iterator.next();      if (object != null) {        object.toString();      }    }    stringBuilder.append("</StatusDetail>");  }  return stringBuilder.toString();}  }
class C{  private void repaint(long delay){  if (container != null && fBounds != null) {    container.repaint(delay,fBounds.x,fBounds.y,fBounds.width,fBounds.height);  }}  }
class C{  public static boolean isMultiProtocolRelayState(String relayState){  if ((relayState == null) || (relayState.length() == 0)) {    return false;  }  SingleLogoutManager manager=SingleLogoutManager.getInstance();  int index=relayState.indexOf(RELAY_SERVLET_BLOCK);  if (index == -1) {    return false;  }  String handler=relayState.substring(index + RELAY_SERVLET_BLOCK.length());  return manager.containRelayState(handler);}  }
class C{  public void testClearBitZeroOutside1(){  byte aBytes[]={0};  int aSign=0;  int number=95;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public void detach(){}  }
class C{  public String resolveFrom(OAuth2Request request){  AccessToken accessToken=request.getToken(AccessToken.class);  String realm;  if (accessToken != null) {    realm=accessToken.getRealm();  } else {    realm=request.getParameter(RestletRealmRouter.REALM);  }  return realm;}  }
class C{  public void postinvoke(byte[] oid,org.omg.PortableServer.POA adapter,String operation,java.lang.Object the_cookie,org.omg.PortableServer.Servant the_servant){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("postinvoke",_opsClass);  ServantLocatorOperations $self=(ServantLocatorOperations)$so.servant;  try {    $self.postinvoke(oid,adapter,operation,the_cookie,the_servant);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private static synchronized String makeDateStringGnuStep(Date date){  return sdfGnuStep.format(date);}  }
class C{  public BigInt(int i){  if (i < (1 << 8)) {    places=new byte[1];    places[0]=(byte)i;  } else   if (i < (1 << 16)) {    places=new byte[2];    places[0]=(byte)(i >> 8);    places[1]=(byte)i;  } else   if (i < (1 << 24)) {    places=new byte[3];    places[0]=(byte)(i >> 16);    places[1]=(byte)(i >> 8);    places[2]=(byte)i;  } else {    places=new byte[4];    places[0]=(byte)(i >> 24);    places[1]=(byte)(i >> 16);    places[2]=(byte)(i >> 8);    places[3]=(byte)i;  }}  }
class C{  public static TokenEndpointAuthMethod fromString(String type){  if (type != null) {    for (    TokenEndpointAuthMethod authMethod : TokenEndpointAuthMethod.values()) {      if (type.equalsIgnoreCase(authMethod.type)) {        return authMethod;      }    }  }  return null;}  }
class C{  public void clear(ResourceSaveIndexes indexes,String dn){  if (indexes != null) {    clear(dn,indexes.getHostIndexes(),hostIndexCache);    clear(dn,indexes.getPathIndexes(),pathIndexCache);    clear(dn,indexes.getParentPathIndexes(),parentPathIndexCache);  }}  }
class C{  private String updateFieldDesc(String desc){  String fieldClass=Type.getType(desc).getClassName().replace(".","/");  if (needsRenaming(fieldClass)) {    ClassNode fcn=getClassNode(fieldClass);    desc=desc.replace(fcn.name,getRefactoredName(fcn));  }  return desc;}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  return generateX509Certificate(key,provider,null);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  private boolean doValidate(int action){  if (action == PooledConnection.VALIDATE_BORROW && poolProperties.isTestOnBorrow())   return true; else   if (action == PooledConnection.VALIDATE_RETURN && poolProperties.isTestOnReturn())   return true; else   if (action == PooledConnection.VALIDATE_IDLE && poolProperties.isTestWhileIdle())   return true; else   if (action == PooledConnection.VALIDATE_INIT && poolProperties.isTestOnConnect())   return true; else   if (action == PooledConnection.VALIDATE_INIT && poolProperties.getInitSQL() != null)   return true; else   return false;}  }
class C{  public void newInstance(final Type type){  typeInsn(Opcodes.NEW,type);}  }
class C{  public static String encodeBase64URLSafeString(final byte[] binaryData){  return StringUtils.newStringUtf8(encodeBase64(binaryData,false,true));}  }
class C{  public String fromSAMLPrimaryTokenId(String primaryId){  return encoding.decodeKey(primaryId);}  }
class C{  public TaskClientException(){}  }
class C{  public void loginAnonymous() throws XmlRpcFault {  login("","","en");}  }
class C{  @DataProvider(name="createModifyData") public Object[][] createModifyData(){  CSN csn1=new CSN(1,0,1);  CSN csn2=new CSN(TimeThread.getTime(),123,45);  Modification mod1=new Modification(REPLACE,Attributes.create("description","new value"));  List<Modification> mods1=newArrayList(mod1);  Modification mod2=new Modification(DELETE,Attributes.empty("description"));  List<Modification> mods2=newArrayList(mod1,mod2);  AttributeBuilder builder=new AttributeBuilder(getDescriptionAttributeType());  builder.add("string");  builder.add("value");  builder.add("again");  List<Modification> mods3=newArrayList(new Modification(ADD,builder.toAttribute()));  List<Modification> mods4=new ArrayList<>();  for (int i=0; i < 10; i++) {    Attribute attr=Attributes.create("description","string" + i);    mods4.add(new Modification(ADD,attr));  }  Modification mod5=new Modification(REPLACE,Attributes.create("namingcontexts","o=test"));  List<Modification> mods5=newArrayList(mod5);  Attribute eattr1=Attributes.create("description","eav description");  Attribute eattr2=Attributes.create("namingcontexts","eav naming contexts");  List<Attribute> entryAttrList=newArrayList(eattr1,eattr2);  return new Object[][]{{csn1,"dc=test",mods1,false,AssuredMode.SAFE_DATA_MODE,(byte)0,null},{csn2,"dc=cn2",mods1,true,AssuredMode.SAFE_READ_MODE,(byte)1,entryAttrList},{csn2,"dc=test with a much longer dn in case this would " + "make a difference",mods1,true,AssuredMode.SAFE_READ_MODE,(byte)3,null},{csn2,"dc=test, cn=with a, o=more complex, ou=dn",mods1,false,AssuredMode.SAFE_READ_MODE,(byte)5,entryAttrList},{csn2,"cn=use\\, backslash",mods1,true,AssuredMode.SAFE_READ_MODE,(byte)3,null},{csn2,"dc=test with several mod",mods2,false,AssuredMode.SAFE_DATA_MODE,(byte)16,entryAttrList},{csn2,"dc=test with several values",mods3,false,AssuredMode.SAFE_READ_MODE,(byte)3,null},{csn2,"dc=test with long mod",mods4,true,AssuredMode.SAFE_READ_MODE,(byte)120,entryAttrList},{csn2,"dc=testDsaOperation",mods5,true,AssuredMode.SAFE_DATA_MODE,(byte)99,null}};}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentFragment docFrag;  Node aNode;  boolean hasChild;  Document ownerDocument;  DocumentType docType;  String system;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  docFrag=aNewDoc.createDocumentFragment();  aNode=doc.importNode(docFrag,false);  hasChild=aNode.hasChildNodes();  assertFalse("hasChild",hasChild);  ownerDocument=aNode.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("system",null,null,null,"staffNS.dtd",null,null,null,null,system);}  }
class C{  public void insert_short(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_short",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    $self.insert_short(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public String toString(){  return getClass().getName() + "[value=" + value+ "]";}  }
class C{  public boolean inUse(){  return !messageQueue.isEmpty();}  }
class C{  public PolicyModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  public SdpFactoryException(Exception ex){  super(ex.getMessage());  this.ex=ex;}  }
class C{  public String toString(){  return this.toString(true,false);}  }
class C{  public static boolean containsObjectClass(final Entry entry,final ObjectClass objectClass){  return containsObjectClass(entry,Schema.getDefaultSchema(),objectClass);}  }
class C{  public boolean startsWith(Name n){  if (n == null) {    return false;  }  int len1=rdns.size();  int len2=n.size();  return (len1 >= len2 && matches(0,len2,n));}  }
class C{  public ResponseProviderAddViewBean(){  super("ResponseProviderAdd",DEFAULT_DISPLAY_URL);}  }
class C{  public void removeLast(){  if (hlist.size() != 0)   hlist.remove(hlist.size() - 1);}  }
class C{  public static void toLowerCase(ByteSequence b,StringBuilder buffer,boolean trim){  if (b == null) {    return;  }  if (trim) {    int begin=0;    int end=b.length() - 1;    while (begin <= end) {      if (b.byteAt(begin) == ' ') {        begin++;      } else       if (b.byteAt(end) == ' ') {        end--;      } else {        break;      }    }    if (begin > 0 || end < b.length() - 1) {      b=b.subSequence(begin,end + 1);    }  }  com.forgerock.opendj.util.StaticUtils.toLowerCase(b,buffer);}  }
class C{  @Override public String toString(){  return super.toString() + "(" + filter.toString()+ ")";}  }
class C{  public HasSubordinatesVirtualAttributeProvider(){  super();}  }
class C{  public static boolean checkImageFile(final FileItem item){  BufferedImage bi;  InputStream is=null;  try {    is=item.getInputStream();    bi=ImageIO.read(is);  } catch (  IOException e) {    return false;  } finally {    if (is != null) {      try {        is.close();      } catch (      Exception e) {      }    }  }  return (bi != null);}  }
class C{  static String createUTCTimeValue(final Date d){synchronized (DATE_FORMAT_LOCK) {    return DATE_FORMAT.format(d);  }}  }
class C{  public AciListenerManager(AciList aciList,DN cfgDN){  this.aciList=aciList;  this.configurationDN=cfgDN;  this.plugin=new AciChangeListenerPlugin();  for (  Backend<?> backend : DirectoryServer.getBackends()) {    performBackendPreInitializationProcessing(backend);  }  DirectoryServer.registerInternalPlugin(plugin);  DirectoryServer.registerBackendInitializationListener(this);  DirectoryServer.registerAlertGenerator(this);}  }
class C{  public static UIComponent createComponent(final String componentType){  final UIComponent component=FacesContext.getCurrentInstance().getApplication().createComponent(componentType);  component.getAttributes().put(RIConstants.DYNAMIC_COMPONENT,Integer.MAX_VALUE);  return component;}  }
class C{  private static void writeUntouchedImage(final InputStream stream,final File destFile) throws IOException {  ByteArrayOutputStream byteArrayOS=new ByteArrayOutputStream();  byte[] buffer=new byte[MAX_BUFF_SIZE];  int readNum;  while ((readNum=stream.read(buffer)) != -1) {    byteArrayOS.write(buffer,0,readNum);  }  byte[] bytes=byteArrayOS.toByteArray();  byteArrayOS.close();  FileOutputStream fileOS=new FileOutputStream(destFile);  fileOS.write(bytes);  fileOS.flush();  fileOS.close();}  }
class C{  public InvalidConfigurationException(){}  }
class C{  public int process(Callback[] callbacks,int state) throws AuthLoginException {  HttpServletRequest request=getHttpServletRequest();  if (configuredHTTPHeaders != null) {    request.setAttribute("SM-HTTPHeaders",configuredHTTPHeaders);  }  if (checkRemoteUserOnly) {    Enumeration headers=request.getHeaderNames();    while (headers.hasMoreElements()) {      String headerName=(String)headers.nextElement();      if (headerName.equals(remoteUserHeader)) {        userId=request.getHeader(headerName);      }    }    if (userId == null) {      throw new AuthLoginException("No remote user header found");    }    return ISAuthConstants.LOGIN_SUCCEED;  }  Cookie[] cookies=request.getCookies();  String SMCookie=null;  String principal=null;  boolean cookieFound=false;  for (int i=0; i < cookies.length; i++) {    Cookie cookie=cookies[i];    if (cookie.getName().equals("SMSESSION")) {      cookieFound=true;      String value=cookie.getValue();      System.out.println("cookie value" + value);      value=value.replaceAll(" ","+");      value=value.replaceAll("%3D","=");      System.out.println("cookie value afer replacing: " + value);      InitDef id=new InitDef(hostName,sharedSecret,true,new ServerDef());      id.addServerDef(policyServerIP,connectionMin,connectionMin,connectionStep,timeout,authorizationPort,authenticationPort,authorizationPort);      AgentAPI agentAPI=new AgentAPI();      int initStat=agentAPI.init(id);      if (initStat == AgentAPI.SUCCESS) {        System.out.println("Agent API init succeeded");      }      int version=0;      boolean thirdParty=false;      TokenDescriptor td=new TokenDescriptor(version,thirdParty);      AttributeList al=new AttributeList();      StringBuffer token=new StringBuffer();      int status=agentAPI.decodeSSOToken(value,td,al,true,token);      if (status == AgentAPI.FAILURE) {        System.out.println("SM session decode failed");        throw new AuthLoginException("SMSession decode failed");      } else {        Enumeration attributes=al.attributes();        while (attributes.hasMoreElements()) {          Attribute attr=(Attribute)attributes.nextElement();          int attrId=attr.id;          System.out.println("Attribute Id: " + attrId);          String attrValue=XMLUtils.removeNullCharAtEnd(new String(attr.value));          System.out.println("Attribute value: " + attrValue);          if (attrId == AgentAPI.ATTR_USERDN)           userId=attrValue;        }      }    }  }  return ISAuthConstants.LOGIN_SUCCEED;}  }
class C{  public org.w3c.dom.Document encryptAndReplace(org.w3c.dom.Document doc,org.w3c.dom.Element element,java.lang.String secretKeyAlg,int keySize,java.lang.String certAlias) throws EncryptionException {  return ep.encryptAndReplace(doc,element,secretKeyAlg,keySize,certAlias,0);}  }
class C{  @Override public Foo fetchByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid(uuid,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  void signedSubtract(SignedMutableBigInteger addend){  if (sign == addend.sign)   sign=sign * subtract(addend); else   add(addend);}  }
class C{  private void writeLog(Map<DN,DN> modDNmap){synchronized (logFile) {    try (BufferedWriter writer=setupWriter()){      for (      Map.Entry<DN,DN> mapEntry : modDNmap.entrySet()) {        writer.write(mapEntry.getKey() + "\t" + mapEntry.getValue());        writer.newLine();      }    } catch (    IOException io) {      logger.error(ERR_PLUGIN_REFERENT_CLOSE_LOGFILE,io.getMessage());    }  }}  }
class C{  public synchronized void flush() throws IOException {  if (!initialized)   return;  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  @NonNull public static Agera merge(@NonNull Observable... sources){  if (sources.length == 0) {    return empty();  } else   if (sources.length == 1) {    return wrap(sources[0]);  }  return new AgeraMerge(sources);}  }
class C{  public SocketException(String detailMessage){  super(detailMessage);}  }
class C{  protected Signature(String algorithm){  this.algorithm=algorithm;}  }
class C{  public LdapName(String name) throws InvalidNameException {  unparsed=name;  parse();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  types=null;}  }
class C{  public static String prependArray(final String value,final String[] prepends){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (prepends == null || prepends.length == 0) {    return value;  }  StringJoiner joiner=new StringJoiner("");  for (  String prepend : prepends) {    joiner.add(prepend);  }  return joiner.toString() + value;}  }
class C{  public void reset() throws SecurityException {  checkPermission();synchronized (this) {    props=new Properties();    initializedGlobalHandlers=true;  }  for (  LoggerContext cx : contexts()) {    Enumeration<String> enum_=cx.getLoggerNames();    while (enum_.hasMoreElements()) {      String name=enum_.nextElement();      Logger logger=cx.findLogger(name);      if (logger != null) {        resetLogger(logger);      }    }  }}  }
class C{  protected int baseCharactersCount(){  int count=0;  for (  IRenderer child : childRenderers) {    if (child instanceof TextRenderer) {      count+=((TextRenderer)child).baseCharactersCount();    }  }  return count;}  }
class C{  public SynthContext(JComponent component,Region region,SynthStyle style,int state){  if (component == null || region == null || style == null) {    throw new NullPointerException("You must supply a non-null component, region and style");  }  reset(component,region,style,state);}  }
class C{  @BeforeClass public void entryCacheTestInit() throws Exception {  TestCaseUtils.startServer();  Entry cacheConfigEntry=TestCaseUtils.makeEntry("dn: cn=Soft Reference,cn=Entry Caches,cn=config","objectClass: ds-cfg-soft-reference-entry-cache","objectClass: ds-cfg-entry-cache","objectClass: top","cn: Soft Reference","ds-cfg-cache-level: 1","ds-cfg-java-class: " + "org.opends.server.extensions.SoftReferenceEntryCache","ds-cfg-enabled: true");  super.configuration=InitializationUtils.getConfiguration(SoftReferenceEntryCacheCfgDefn.getInstance(),cacheConfigEntry);  System.gc();  super.cache=new SoftReferenceEntryCache();  super.cache.initializeEntryCache(configuration);  super.testEntriesList=new ArrayList<>(super.NUMTESTENTRIES);  for (int i=0; i < super.NUMTESTENTRIES; i++) {    super.testEntriesList.add(TestCaseUtils.makeEntry("dn: uid=test" + i + ".user"+ i+ ",ou=test"+ i+ ",o=test","objectClass: person","objectClass: inetorgperson","objectClass: top","objectClass: organizationalperson","postalAddress: somewhere in Testville" + i,"street: Under Construction Street" + i,"l: Testcounty" + i,"st: Teststate" + i,"telephoneNumber: +878 8378 8378" + i,"mobile: +878 8378 8378" + i,"homePhone: +878 8378 8378" + i,"pager: +878 8378 8378" + i,"mail: test" + i + ".user"+ i+ "@testdomain.net","postalCode: 8378" + i,"userPassword: testpassword" + i,"description: description for Test" + i + "User"+ i,"cn: Test" + i + "User"+ i,"sn: User" + i,"givenName: Test" + i,"initials: TST" + i,"employeeNumber: 8378" + i,"uid: test" + i + ".user"+ i));  }}  }
class C{  public void zoomInImage(float deltaScale){  zoomInImage(deltaScale,mCropRect.centerX(),mCropRect.centerY());}  }
class C{  private int returnNextNode(int n){  return n;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node removedNode;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);{    boolean success=false;    try {      removedNode=entRef.removeChild(entElement);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public boolean isCentralized(String uid){  boolean centralized=false;  try {    AMIdentity amid=new AMIdentity(getUserSSOToken(),uid);    String type=getAgentType(amid);    if (type.equals(AgentConfiguration.AGENT_TYPE_J2EE) || type.equals(AgentConfiguration.AGENT_TYPE_WEB)) {      Set set=amid.getAttribute(AgentConfiguration.ATTR_CONFIG_REPO);      centralized=(set != null) && !set.isEmpty() && ((String)set.iterator().next()).equals("centralized");    }  } catch (  AMConsoleException e) {    debug.error("AgentsModelImpl.isCentralized",e);  }catch (  IdRepoException e) {    debug.error("AgentsModelImpl.isCentralized",e);  }catch (  SSOException e) {    debug.error("AgentsModelImpl.isCentralized",e);  }  return centralized;}  }
class C{  @Override public Promise<ActionResponse,ResourceException> handle(String tokenId,Context context,ActionRequest request){  final JsonValue json=request.getContent();  if (!json.isDefined(SESSION_HANDLES) && !json.get(SESSION_HANDLES).isList()) {    return new BadRequestException("The \"" + SESSION_HANDLES + "\" field is not defined in the request or it's"+ " not a JSON array").asPromise();  }  SSOTokenContext ssoTokenContext=context.asContext(SSOTokenContext.class);  Session requester=ssoTokenContext.getCallerSession();  final List<String> sessionHandles=json.get(SESSION_HANDLES).asList(String.class);  Map<String,Object> map=new HashMap<>();  for (  String sessionHandle : sessionHandles) {    try {      requester.destroySession(new Session(new SessionID(sessionHandle)));      map.put(sessionHandle,true);    } catch (    SessionTimedOutException|InvalidSessionIdException se) {      map.put(sessionHandle,true);    }catch (    SessionException se) {      DEBUG.warning("Unable to invalidate session based on session handle",se);      map.put(sessionHandle,false);    }  }  return newResultPromise(newActionResponse(json(object(field("result",map)))));}  }
class C{  private String newRequestID(){  String requestIDString=null;synchronized (REQUEST_ID_LOCK) {    requestIDString=String.valueOf(requestID++);  }  return requestIDString;}  }
class C{  private boolean handleOverwrite(final File sourceFile,final File destFile) throws IOException {  return FileUtils.delete(destFile) && FileUtils.copyFromSourceToDestFile(sourceFile,destFile,true,configuration);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  ChatCacheEntityDao.dropTable(db,ifExists);}  }
class C{  private UpdateMsg findReplicaUpdateMessage(final MultiDomainDBCursor replicaUpdatesCursor,CSN csn) throws ChangelogException, DirectoryException {  while (true) {    final UpdateMsg updateMsg=replicaUpdatesCursor.getRecord();    final int compareIndexWithUpdateMsg=csn.compareTo(updateMsg.getCSN());    if (compareIndexWithUpdateMsg < 0) {      return null;    } else     if (compareIndexWithUpdateMsg == 0) {      return updateMsg;    }    if (!replicaUpdatesCursor.next()) {      throw new DirectoryException(ResultCode.OPERATIONS_ERROR,LocalizableMessage.raw("Could not find replica update message matching index record. " + "No more replica update messages with a csn newer than " + updateMsg.getCSN() + " exist."));    }  }}  }
class C{  public JKValidationException(Problems problems){  this.problems=problems;}  }
class C{  public ObjectCreateRule(String className,String attributeName){  this.className=className;  this.attributeName=attributeName;}  }
class C{  public AMSearchResults searchAllRoles(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  int[] objectTypes={AMObject.ROLE,AMObject.FILTERED_ROLE};  return searchObjects(objectTypes,wildcard,avPairs,searchControl);}  }
class C{  public SOAPConnection openSOAPConnection() throws SOAPException {  return soapConnectionFactory.createConnection();}  }
class C{  public void testLongValuePos(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  long result=1246043477766677607L;  assertTrue("incorrect value",aNumber.longValue() == result);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node piNode;  String piName;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  piNode=testList.item(0);  piName=piNode.getNodeName();  assertEquals("nodeProcessingInstructionNodeNameAssert1","TEST-STYLE",piName);}  }
class C{  static boolean equals(String dn1,String dn2){  return DN.valueOf(dn1).equals(DN.valueOf(dn2));}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  public boolean isLogOff(){  return (environment.get(CLIConstants.ARGUMENT_NOLOG) != null);}  }
class C{  public ConnectionPool createPool() throws SQLException {  if (pool != null) {    return pool;  } else {    return pCreatePool();  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.RequestedAttributeElement createRequestedAttributeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.RequestedAttributeElementImpl();}  }
class C{  public IDPEntry createIDPEntry(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.IDPENTRY,value);  if (obj == null) {    return new IDPEntryImpl(value);  } else {    return (IDPEntry)obj;  }}  }
class C{  public static void convertToASCII(File in,File out) throws ParserConfigurationException, ParseException, SAXException, PropertyListFormatException, IOException {  NSObject root=parse(in);  if (root instanceof NSDictionary) {    saveAsASCII((NSDictionary)root,out);  } else   if (root instanceof NSArray) {    saveAsASCII((NSArray)root,out);  } else {    throw new PropertyListFormatException("The root of the given input property list " + "is neither a Dictionary nor an Array!");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element newNode;  String newValue;  doc=(Document)load("staff",true);  newNode=doc.createElement("address");  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  public void moveCaretPosition(int pos){  Document doc=getDocument();  if (doc != null) {    if (pos > doc.getLength() || pos < 0) {      throw new IllegalArgumentException("bad position: " + pos);    }    caret.moveDot(pos);  }}  }
class C{  public void testGenExemptionBlob() throws Exception {  Provider mProv=(new SpiEngUtils()).new MyProvider("MyExMechProvider","Provider for ExemptionMechanism testing",srvExemptionMechanism.concat(".").concat(defaultAlg),ExemptionMechanismProviderClass);  ExemptionMechanism em=new ExemptionMechanism(new MyExemptionMechanismSpi(),mProv,defaultAlg){  };  Key key=new MyExemptionMechanismSpi().new tmpKey("Proba",new byte[0]);  em.init(key);  em.genExemptionBlob(null,0);  em.genExemptionBlob(new byte[0],0);  em.genExemptionBlob(new byte[10],-5);}  }
class C{  public ErrorResource(ExceptionHandler exceptionHandler,OAuth2Exception e){  this.exceptionHandler=exceptionHandler;  this.e=e;}  }
class C{  public void schedule(TimerTask task,Date firstTime,long period){  if (period <= 0)   throw new IllegalArgumentException("Non-positive period.");  sched(task,firstTime.getTime(),-period);}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  private DualPivotQuicksort(){}  }
class C{  public final int pop(){  return m_map[--m_firstFree];}  }
class C{  protected boolean pageDown(TextView widget,Spannable buffer){  return false;}  }
class C{  private static String makeDNFromServerGroupProperties(Map<ServerGroupProperty,Object> serverGroupProperties) throws ADSContextException {  String serverGroupId=(String)serverGroupProperties.get(ServerGroupProperty.UID);  if (serverGroupId == null) {    throw new ADSContextException(ErrorType.MISSING_NAME);  }  return "cn=" + Rdn.escapeValue(serverGroupId) + ","+ getServerGroupContainerDN();}  }
class C{  protected final boolean handlePossibleCenter(int[] stateCount,int i,int j,boolean pureBarcode){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);  if (!Float.isNaN(centerI)) {    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);    if (!Float.isNaN(centerJ) && (!pureBarcode || crossCheckDiagonal((int)centerI,(int)centerJ,stateCount[2],stateCountTotal))) {      float estimatedModuleSize=(float)stateCountTotal / 7.0f;      boolean found=false;      for (int index=0; index < possibleCenters.size(); index++) {        FinderPattern center=possibleCenters.get(index);        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {          possibleCenters.set(index,center.combineEstimate(centerI,centerJ,estimatedModuleSize));          found=true;          break;        }      }      if (!found) {        FinderPattern point=new FinderPattern(centerJ,centerI,estimatedModuleSize);        possibleCenters.add(point);        if (resultPointCallback != null) {          resultPointCallback.foundPossibleResultPoint(point);        }      }      return true;    }  }  return false;}  }
class C{  private void buildFun(StringBuilder sb,FunDef funDef,int indentation) throws SyntaxException {  assertNoAnno(funDef.annos);  buildIndentation(sb,indentation);  sb.append("function ").append(funDef.name).append("(");  buildParameters(sb,funDef.params);  buildIndentation(sb,indentation);  sb.append(") {\n");  buildStatements(sb,funDef.statements,indentation + INDENT);  buildIndentation(sb,indentation);  sb.append("}\n");}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.ArtifactResolutionServiceElement createArtifactResolutionServiceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.ArtifactResolutionServiceElementImpl();}  }
class C{  Object processNCNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    AVT avt=null;    try {      avt=new AVT(handler,uri,name,rawName,value,owner);      if ((avt.isSimple()) && (!XML11Char.isXML11ValidNCName(value))) {        handleError(handler,XSLTErrorResources.INVALID_NCNAME,new Object[]{name,value},null);        return null;      }      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    if (!XML11Char.isXML11ValidNCName(value)) {      handleError(handler,XSLTErrorResources.INVALID_NCNAME,new Object[]{name,value},null);      return null;    }    return value;  }}  }
class C{  public void handleHrefExceptionRequest(RequestInvocationEvent event) throws ServletException, IOException {  ViewBean targetView=getViewBean(LoginViewBean.class);  targetView.forwardTo(getRequestContext());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelisttraverselist.class,args);}  }
class C{  @Fluent public Job onPromotion(Handler<Job> handler){  this.on("promotion",null);  return this;}  }
class C{  public JTidyDocumentBuilderFactory(DocumentBuilderSetting[] settings) throws DOMTestIncompatibleException {  super(settings);  try {    ClassLoader classLoader=ClassLoader.getSystemClassLoader();    Class tidyClass=classLoader.loadClass("org.w3c.tidy.Tidy");    tidyConstructor=tidyClass.getConstructor(NO_CLASSES);    parseDOMMethod=tidyClass.getMethod("parseDOM",new Class[]{java.io.InputStream.class,java.io.OutputStream.class});    domImpl=new JTidyDOMImplementation();  } catch (  Exception ex) {    throw new DOMTestIncompatibleException(ex,null);  }  if (settings != null) {    for (int i=0; i < settings.length; i++) {    }  }}  }
class C{  public static Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_Last(field2,orderByComparator);}  }
class C{  public String toString(){  return instanceName(value) + "=" + super.toString();}  }
class C{  public SiteAddViewBean(){  super("SiteAdd");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public static boolean modifyLDIF(LDIFReader sourceReader,LDIFReader changeReader,LDIFWriter targetWriter,List<LocalizableMessage> errorList) throws IOException, LDIFException {  TreeMap<DN,AddChangeRecordEntry> adds=new TreeMap<>();  TreeMap<DN,Entry> ldifEntries=new TreeMap<>();  HashMap<DN,DeleteChangeRecordEntry> deletes=new HashMap<>();  HashMap<DN,LinkedList<Modification>> modifications=new HashMap<>();  while (true) {    ChangeRecordEntry changeRecord;    try {      changeRecord=changeReader.readChangeRecord(false);    } catch (    LDIFException le) {      if (le.canContinueReading()) {        errorList.add(le.getMessageObject());        continue;      } else {        throw le;      }    }    if (changeRecord == null) {      break;    }    DN changeDN=changeRecord.getDN();switch (changeRecord.getChangeOperationType()) {case ADD:      if (adds.containsKey(changeDN)) {        errorList.add(ERR_LDIFMODIFY_CANNOT_ADD_ENTRY_TWICE.get(changeDN));        continue;      } else {        adds.put(changeDN,(AddChangeRecordEntry)changeRecord);      }    break;case DELETE:  if (adds.containsKey(changeDN)) {    errorList.add(ERR_LDIFMODIFY_CANNOT_DELETE_AFTER_ADD.get(changeDN));    continue;  } else {    modifications.remove(changeDN);    deletes.put(changeDN,(DeleteChangeRecordEntry)changeRecord);  }break;case MODIFY:if (adds.containsKey(changeDN) || deletes.containsKey(changeDN)) {errorList.add(ERR_LDIFMODIFY_CANNOT_MODIFY_ADDED_OR_DELETED.get(changeDN));continue;} else {LinkedList<Modification> mods=modifications.get(changeDN);if (mods == null) {  mods=new LinkedList<>();  modifications.put(changeDN,mods);}for (RawModification mod : ((ModifyChangeRecordEntry)changeRecord).getModifications()) {  try {    mods.add(mod.toModification());  } catch (  LDAPException le) {    errorList.add(le.getMessageObject());    continue;  }}}break;case MODIFY_DN:errorList.add(ERR_LDIFMODIFY_MODDN_NOT_SUPPORTED.get(changeDN));continue;default :errorList.add(ERR_LDIFMODIFY_UNKNOWN_CHANGETYPE.get(changeDN,changeRecord.getChangeOperationType()));continue;}}while (true) {Entry entry;try {entry=sourceReader.readEntry();} catch (LDIFException le) {if (le.canContinueReading()) {errorList.add(le.getMessageObject());continue;} else {throw le;}}if (entry == null) {break;}DN entryDN=entry.getName();if (deletes.remove(entryDN) != null) {continue;}if (adds.remove(entryDN) != null) {errorList.add(ERR_LDIFMODIFY_ADD_ALREADY_EXISTS.get(entryDN));continue;}LinkedList<Modification> mods=modifications.remove(entryDN);if (mods != null && !mods.isEmpty()) {try {entry.applyModifications(mods);} catch (DirectoryException de) {errorList.add(de.getMessageObject());continue;}}ldifEntries.put(entry.getName(),entry);}for (AddChangeRecordEntry add : adds.values()) {Map<ObjectClass,String> objectClasses=new LinkedHashMap<>();Map<AttributeType,List<Attribute>> userAttributes=new LinkedHashMap<>();Map<AttributeType,List<Attribute>> operationalAttributes=new LinkedHashMap<>();for (Attribute a : add.getAttributes()) {AttributeType t=a.getAttributeDescription().getAttributeType();if (t.isObjectClass()) {for (ByteString v : a) {String ocName=v.toString();objectClasses.put(DirectoryServer.getSchema().getObjectClass(ocName),ocName);}} else if (t.isOperational()) {List<Attribute> attrList=operationalAttributes.get(t);if (attrList == null) {attrList=new LinkedList<>();operationalAttributes.put(t,attrList);}attrList.add(a);} else {List<Attribute> attrList=userAttributes.get(t);if (attrList == null) {attrList=new LinkedList<>();userAttributes.put(t,attrList);}attrList.add(a);}}Entry e=new Entry(add.getDN(),objectClasses,userAttributes,operationalAttributes);ldifEntries.put(e.getName(),e);}if (!deletes.isEmpty()) {for (DN dn : deletes.keySet()) {errorList.add(ERR_LDIFMODIFY_DELETE_NO_SUCH_ENTRY.get(dn));}}if (!modifications.isEmpty()) {for (DN dn : modifications.keySet()) {errorList.add(ERR_LDIFMODIFY_MODIFY_NO_SUCH_ENTRY.get(dn));}}return targetWriter.writeEntries(ldifEntries.values()) && errorList.isEmpty();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Text textNode;  Text splitNode;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  textNode=(Text)nameNode.getFirstChild();{    boolean success=false;    try {      splitNode=textNode.splitText(300);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public PluginResult.PostResponse invokePostResponseBindPlugins(PostResponseBindOperation bindOperation){  PluginResult.PostResponse result=null;  for (  DirectoryServerPlugin p : postResponseBindPlugins) {    if (isInternalOperation(bindOperation,p)) {      continue;    }    try {      result=p.doPostResponse(bindOperation);    } catch (    Exception e) {      logException(bindOperation,p,e,ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(bindOperation,p,ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostResponse.continueOperationProcessing();  }  return result;}  }
class C{  public SynchronizationException(Throwable cause){  super(cause);}  }
class C{  void put(final ByteVector out){  final int FACTOR=ClassWriter.TO_ACC_SYNTHETIC;  int mask=Opcodes.ACC_DEPRECATED | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE | ((access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) / FACTOR);  out.putShort(access & ~mask).putShort(name).putShort(desc);  int attributeCount=0;  if (value != 0) {    ++attributeCount;  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;  }  if (attrs != null) {    attributeCount+=attrs.getCount();  }  out.putShort(attributeCount);  if (value != 0) {    out.putShort(cw.newUTF8("ConstantValue"));    out.putInt(2).putShort(value);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((cw.version & 0xFFFF) < Opcodes.V1_5 || (access & ClassWriter.ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(cw.newUTF8("Synthetic")).putInt(0);    }  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(cw.newUTF8("Deprecated")).putInt(0);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(cw.newUTF8("Signature"));    out.putInt(2).putShort(signature);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(cw.newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(cw.newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(cw,null,0,-1,-1,out);  }}  }
class C{  @Override public void init() throws ServletException {  if (getServletConfig().getInitParameter("debug") != null)   debug=Integer.parseInt(getServletConfig().getInitParameter("debug"));  isVirtualWebappRelative=Boolean.parseBoolean(getServletConfig().getInitParameter("isVirtualWebappRelative"));  if (getServletConfig().getInitParameter("expires") != null)   expires=Long.valueOf(getServletConfig().getInitParameter("expires"));  buffered=Boolean.parseBoolean(getServletConfig().getInitParameter("buffered"));  inputEncoding=getServletConfig().getInitParameter("inputEncoding");  if (getServletConfig().getInitParameter("outputEncoding") != null)   outputEncoding=getServletConfig().getInitParameter("outputEncoding");  allowExec=Boolean.parseBoolean(getServletConfig().getInitParameter("allowExec"));  if (debug > 0)   log("SSIServlet.init() SSI invoker started with 'debug'=" + debug);}  }
class C{  public void write(ByteString bs) throws IOException {  bs.copyTo(stream);}  }
class C{  private void doPrint(PrintStream writer,List<String> args){  String rootPath=mAppContext.getApplicationInfo().dataDir + "/shared_prefs";  String offsetPrefix=args.isEmpty() ? "" : args.get(0);  String keyPrefix=(args.size() > 1) ? args.get(1) : "";  printRecursive(writer,rootPath,"",offsetPrefix,keyPrefix);}  }
class C{  private void insertEntryIntoIndexes(IndexBuffer buffer,Entry entry,EntryID entryID) throws StorageRuntimeException, DirectoryException {  for (  AttributeIndex index : attrIndexMap.values()) {    index.addEntry(buffer,entryID,entry);  }  for (  VLVIndex vlvIndex : vlvIndexMap.values()) {    vlvIndex.addEntry(buffer,entryID,entry);  }}  }
class C{  public static final boolean isLeapYear(int year){  return ((year & 0x3) == 0) && ((year % 100 != 0) || (year % 400 == 0));}  }
class C{  public E enqueue(E newElement){  if (queue.size() > 0 && queue.getFirst() == newElement)   return null;  for (Iterator<E> it=queue.iterator(); it.hasNext(); ) {    E element=it.next();    if (newElement == element) {      it.remove();      queue.addFirst(newElement);      return null;    }  }  queue.addFirst(newElement);  if (queue.size() > limit)   return queue.removeLast();  return null;}  }
class C{  public EmbeddedDirectoryServerException(LocalizableMessage message){  super(message);}  }
class C{  public String toDisplayString(){  return toDisplayString(Locale.getDefault());}  }
class C{  private static SearchScope register(final int intValue,final String name,Enum searchScopeEnum){  final SearchScope t=new SearchScope(intValue,name,searchScopeEnum);  ELEMENTS[intValue]=t;  return t;}  }
class C{  public void putUnknownHost(String hostname,String detailMessage){  cache.put(hostname,new AddressCacheEntry(detailMessage));}  }
class C{  @Override public boolean equals(Object ox){  try {    Level lx=(Level)ox;    return (lx.value == this.value);  } catch (  Exception ex) {    return false;  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AffiliateMemberElement createAffiliateMemberElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AffiliateMemberElementImpl();}  }
class C{  @Override public void removeContainerListener(ContainerListener listener){  listeners.remove(listener);}  }
class C{  public ChangelogBaseDNVirtualAttributeProvider(){  super();}  }
class C{  public static ContainerListener remove(ContainerListener l,ContainerListener oldl){  return (ContainerListener)removeInternal(l,oldl);}  }
class C{  public void testFloatValueNegRounded1(){  byte[] a={-128,1,-1,-4,4,5,60,23,1,-3,-5};  int aSign=-1;  float result=-1.5475195E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public void unlock(){  if (!isLocked) {    throw new IllegalStateException("Already unlocked");  }  lock.releaseParentSubtreeReadLock();  subtreeLock.unlock();  entryLock.unlock();  dereference(lock);  isLocked=false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("noMatch");  assertSize("elementGetElementsByTagNameNoMatchNoMatchAssert",0,elementList);}  }
class C{  public void testGetKeyLength(){  char[] password=new char[]{'1','2','3','4','5'};  byte[] salt=new byte[]{1,2,3,4,5};  int iterationCount=10;  int keyLength=10;  PBEKeySpec pbeks=new PBEKeySpec(password,salt,iterationCount,keyLength);  assertTrue("The returned keyLength is not equal to the value specified " + "in the constructor.",pbeks.getKeyLength() == keyLength);  pbeks=new PBEKeySpec(password);  assertTrue("The getKeyLength() method should return 0 " + "if the keyLength is not specified.",pbeks.getKeyLength() == 0);}  }
class C{  protected void arrangeGrid(Container parent){  ArrangeGrid(parent);}  }
class C{  public final void testHashCode02(){  ECFieldF2m f=new ECFieldF2m(2000,new int[]{981,2,1});  int hc=f.hashCode();  assertTrue(hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode() && hc == f.hashCode());}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  String xmlStr=null;  if (statusCode != null) {    StringBuffer xmlString=new StringBuffer(500);    xmlString.append(SAML2Constants.START_TAG);    if (includeNSPrefix) {      xmlString.append(SAML2Constants.PROTOCOL_PREFIX);    }    xmlString.append(SAML2Constants.STATUS);    if (declareNS) {      xmlString.append(SAML2Constants.PROTOCOL_DECLARE_STR);    }    xmlString.append(SAML2Constants.END_TAG);    xmlString.append(SAML2Constants.NEWLINE).append(statusCode.toXMLString(includeNSPrefix,declareNS));    if ((statusMessage != null) && (statusMessage.length() != 0)) {      ProtocolFactory protoFactory=ProtocolFactory.getInstance();      StatusMessage sMessage=protoFactory.createStatusMessage(statusMessage);      xmlString.append(SAML2Constants.NEWLINE).append(sMessage.toXMLString(includeNSPrefix,declareNS));    }    if (statusDetail != null) {      xmlString.append(SAML2Constants.NEWLINE).append(statusDetail.toXMLString(includeNSPrefix,declareNS));    }    xmlString.append(SAML2Constants.NEWLINE).append(SAML2Constants.SAML2_END_TAG).append(SAML2Constants.STATUS).append(SAML2Constants.END_TAG);    xmlStr=xmlString.toString();  }  return xmlStr;}  }
class C{  public Vector copy(Vector vec){  x=vec.x;  y=vec.y;  z=vec.z;  return this;}  }
class C{  public AuthorizationToken authorize(OAuth2Request request,boolean consentGiven,boolean saveConsent) throws AccessDeniedException, ResourceOwnerAuthenticationRequired, InvalidClientException, UnsupportedResponseTypeException, InvalidRequestException, RedirectUriMismatchException, ServerException, LoginRequiredException, BadRequestException, InteractionRequiredException, InvalidScopeException, NotFoundException, DuplicateRequestParameterException, CsrfException {  final OAuth2ProviderSettings providerSettings=providerSettingsFactory.get(request);  if (csrfProtection.isCsrfAttack(request)) {    logger.debug("Session id from consent request does not match users session");    throw new CsrfException();  }  for (  final AuthorizeRequestValidator requestValidator : requestValidators) {    requestValidator.validateRequest(request);  }  final ResourceOwner resourceOwner=resourceOwnerSessionValidator.validate(request);  final ClientRegistration clientRegistration=clientRegistrationStore.get(request.<String>getParameter(CLIENT_ID),request);  if (!consentGiven) {    logger.debug("Resource Owner did not authorize the request");    throw new AccessDeniedException("Resource Owner did not authorize the request",Utils.getRequiredUrlLocation(request,clientRegistration));  }  final Set<String> scope=Utils.splitScope(request.<String>getParameter(SCOPE));  final Set<String> validatedScope=providerSettings.validateAuthorizationScope(clientRegistration,scope,request);  if (saveConsent) {    providerSettings.saveConsent(resourceOwner,clientRegistration.getClientId(),validatedScope);  }  return tokenIssuer.issueTokens(request,clientRegistration,resourceOwner,scope,providerSettings);}  }
class C{  public UrlFilterRule(String ruleText){  super(ruleText);  String urlRuleText=ruleText;  if (StringUtils.startsWith(urlRuleText,MASK_WHITE_LIST)) {    urlRuleText=urlRuleText.substring(MASK_WHITE_LIST.length());    whiteListRule=true;  }  int optionsIndex=StringUtils.lastIndexOf(urlRuleText,OPTIONS_DELIMITER);  if (optionsIndex > -1) {    urlRuleText=urlRuleText.substring(0,optionsIndex);  }  urlRuleText=toPunycode(urlRuleText);  boolean regexRule=urlRuleText.startsWith(MASK_REGEX_RULE) && urlRuleText.endsWith(MASK_REGEX_RULE);  if (!regexRule) {    shortcut=findShortcut(urlRuleText);  }}  }
class C{  public int start(String name){  return groups[getMatchedGroupIndex(name) * 2];}  }
class C{  private void grow(int minCapacity){  int oldCapacity=queue.length;  int newCapacity=oldCapacity + ((oldCapacity < 64) ? (oldCapacity + 2) : (oldCapacity >> 1));  if (newCapacity - MAX_ARRAY_SIZE > 0)   newCapacity=hugeCapacity(minCapacity);  queue=Arrays.copyOf(queue,newCapacity);}  }
class C{  public static String convertToASCII(final String fileName){  String newFileName=fileName;  fillLowerAccents();  fillUpperAccents();  for (  Map.Entry<String,String> entry : UTF8_LOWER_ACCENTS.entrySet()) {    newFileName=newFileName.replace(entry.getKey(),entry.getValue());  }  for (  Map.Entry<String,String> entry : UTF8_UPPER_ACCENTS.entrySet()) {    newFileName=newFileName.replace(entry.getKey(),entry.getValue());  }  return newFileName;}  }
class C{  public void addDirtyRegion(Window window,int x,int y,int w,int h){  addDirtyRegion0(window,x,y,w,h);}  }
class C{  public static String showInputDialog(Component parentComponent,Object message,String title,int messageType) throws HeadlessException {  return (String)showInputDialog(parentComponent,message,title,messageType,null,null,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattribute04.class,args);}  }
class C{  private EditorComponent(ObjectClassCellPanel ocPanel){  comp=ocPanel;}  }
class C{  protected byte[] wrap(byte content_type,byte[] fragment,int offset,int len){  if (logger != null) {    logger.println("SSLRecordProtocol.wrap: TLSPlaintext.fragment[" + len + "]:");    logger.print(fragment,offset,len);  }  if (len > MAX_DATA_LENGTH) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("The provided chunk of data is too big: " + len + " > MAX_DATA_LENGTH == "+ MAX_DATA_LENGTH));  }  byte[] ciphered_fragment=fragment;  if (activeWriteState != null) {    ciphered_fragment=activeWriteState.encrypt(content_type,fragment,offset,len);    if (ciphered_fragment.length > MAX_CIPHERED_DATA_LENGTH) {      throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("The ciphered data increased more than on 1024 bytes"));    }    if (logger != null) {      logger.println("SSLRecordProtocol.wrap: TLSCiphertext.fragment[" + ciphered_fragment.length + "]:");      logger.print(ciphered_fragment);    }  }  return packetize(content_type,version,ciphered_fragment);}  }
class C{  public void flushBuffer() throws IOException {  if (response != null) {    this.response.flushBuffer();  }}  }
class C{  public void testFloatValuePosMantissaIsZero(){  byte[] a={-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=1;  float result=1.7014118E38f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public List<VerificationOK> verify(X509Certificate signCert,X509Certificate issuerCert,Date signDate) throws GeneralSecurityException, IOException {  if (signDate != null)   signCert.checkValidity(signDate);  if (issuerCert != null) {    signCert.verify(issuerCert.getPublicKey());  } else {    signCert.verify(signCert.getPublicKey());  }  List<VerificationOK> result=new ArrayList<>();  if (verifier != null)   result.addAll(verifier.verify(signCert,issuerCert,signDate));  return result;}  }
class C{  public void remove() throws UnsupportedOperationException {  if (this.lastIndex < 0) {    throw new IllegalStateException("No header to remove.");  }  this.allHeaders.remove(this.lastIndex);  this.lastIndex=-1;  this.currentIndex--;}  }
class C{  public ExecutorCompletionService(Executor executor,BlockingQueue<Future<V>> completionQueue){  if (executor == null || completionQueue == null)   throw new NullPointerException();  this.executor=executor;  this.aes=(executor instanceof AbstractExecutorService) ? (AbstractExecutorService)executor : null;  this.completionQueue=completionQueue;}  }
class C{  public static void main(final String[] args){  if (args.length < 7) {    System.err.println("Usage: host port username password baseDN scope " + "filter [attribute ...]");    System.exit(1);  }  final String hostName=args[0];  final int port=Integer.parseInt(args[1]);  final String userName=args[2];  final String password=args[3];  final String baseDN=args[4];  final String scopeString=args[5];  final String filter=args[6];  String[] attributes;  if (args.length > 7) {    attributes=Arrays.copyOfRange(args,7,args.length);  } else {    attributes=new String[0];  }  final SearchScope scope=SearchScope.valueOf(scopeString);  if (scope == null) {    System.err.println("Unknown scope: " + scopeString);    System.exit(ResultCode.CLIENT_SIDE_PARAM_ERROR.intValue());    return;  }  final LDIFEntryWriter writer=new LDIFEntryWriter(System.out);  final LDAPConnectionFactory factory=new LDAPConnectionFactory(hostName,port);  Connection connection=null;  try {    connection=factory.getConnection();    connection.bind(userName,password.toCharArray());    final ConnectionEntryReader reader=connection.search(baseDN,scope,filter,attributes);    while (reader.hasNext()) {      if (!reader.isReference()) {        final SearchResultEntry entry=reader.readEntry();        writer.writeComment("Search result entry: " + entry.getName());        writer.writeEntry(entry);      } else {        final SearchResultReference ref=reader.readReference();        writer.writeComment("Search result reference: " + ref.getURIs());      }    }    writer.flush();  } catch (  final LdapException e) {    System.err.println(e.getMessage());    System.exit(e.getResult().getResultCode().intValue());  }catch (  final IOException e) {    System.err.println(e.getMessage());    System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());  } finally {    if (connection != null) {      connection.close();    }  }}  }
class C{  public static String decryptOrDeobfuscate(String encrypted){  if (encrypted == null) {    return null;  }  final String decrypted;  try {    decrypted=new String(CryptoUtil.unfold(encrypted));  } catch (  GeneralSecurityException ex) {    throw new RuntimeException("Failed to decrypt/de-obfuscate value of string",ex);  }  return decrypted;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PrincipalAuthenticationMechanismElement createPrincipalAuthenticationMechanismElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrincipalAuthenticationMechanismElementImpl();}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {  if (null != m_resultDTDHandler)   m_resultDTDHandler.unparsedEntityDecl(name,publicId,systemId,notationName);}  }
class C{  public void delete(boolean recursive) throws AMException, SSOException {  modAttributes=new HashMap();  try {    ServiceConfigManager scm=new ServiceConfigManager(serviceName,token);    scm.removeOrganizationConfiguration(orgDN,null,false);  } catch (  ServiceNotFoundException ex) {    Object args[]={serviceName};    throw new AMException(AMSDKBundle.getString("481",args),"481",args);  }catch (  SMSException ex) {    Object args[]={serviceName};    throw new AMException(AMSDKBundle.getString("913",args),"913",args);  }}  }
class C{  private void firePolicyChanged(String serviceName,Set affectedResourceNames,int changeType){  if (DEBUG.messageEnabled()) {    StringBuilder sb=new StringBuilder(255);    sb.append("at firePolicyChanged(serrviceName,affectedResourceNames):");    sb.append(serviceName).append(":");    sb.append(affectedResourceNames.toString());    DEBUG.message(sb.toString());  }  PolicyEvent policyEvent=new PolicyEvent();  policyEvent.setResourceNames(affectedResourceNames);  policyEvent.setChangeType(changeType);  Set pListeners=(Set)policyListenersMap.get(serviceName);  if (pListeners != null) {    Iterator listeners=pListeners.iterator();    while (listeners.hasNext()) {      PolicyListener policyListener=(PolicyListener)listeners.next();      try {        policyListener.policyChanged(policyEvent);      } catch (      Exception e) {        DEBUG.error("policy change not handled properly",e);      }    }  }  PolicyEvaluator.policyChanged(serviceName,policyEvent);}  }
class C{  public void removeFromHash(Thread thread,String hashName){  if (debug.messageEnabled()) {    debug.message("Request to remove thread " + thread + "from hash : "+ hashName);  }  if (hashName.equals("timeoutHash")) {    removeHash(timeoutHash,thread);    if (debug.messageEnabled()) {      debug.message("timeOutHash is : " + timeoutHash);    }  }  if (hashName.equals("timedOutHash")) {    removeHash(timedOutHash,thread);    if (debug.messageEnabled()) {      debug.message("timedOutHash is : " + timedOutHash);    }  }}  }
class C{  @SuppressLint("CommitPrefEdits") public static void writeUserBasicData(Context context,String string){  SharedPreferences.Editor editor=PreferenceManager.getDefaultSharedPreferences(context).edit();  JSONObject jsonObject=null;  try {    jsonObject=new JSONObject(string);    SettingsManager.setUserId(jsonObject.getInt("id"));  } catch (  JSONException e) {    e.printStackTrace();  }  editor.commit();}  }
class C{  public void handleTblCharsetAliasButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    G11NCharsetAliasAddViewBean vb=(G11NCharsetAliasAddViewBean)getViewBean(G11NCharsetAliasAddViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public IllegalFormatWidthException(int w){  this.w=w;}  }
class C{  public boolean isTearOff(){  throw new Error("boolean isTearOff() {} not yet implemented");}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.ReferenceParametersType createReferenceParametersType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.ReferenceParametersTypeImpl();}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  checkNotNull(e);  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(e);    return true;  }  finally {    lock.unlock();  }}  }
class C{  public void processTerminationRequest(HttpServletRequest request,HttpServletResponse response,FSFederationTerminationNotification reqTermination){  FSUtils.debug.message("Entered FSFedTerminationHandler::processTerminationRequest...");  this.request=request;  this.locale=FSServiceUtils.getLocale(request);  this.response=response;  this.relayState=reqTermination.getRelayState();  setTerminationURL();  if (managerInst == null) {    FSUtils.debug.error("FSSPFedTerminationHandler " + FSUtils.bundle.getString(IFSConstants.FEDERATION_FAILED_ACCOUNT_INSTANCE));    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSPFedTerminationHandler::handleFederationTermination" + "failed to get Account Manager instance");    }    returnToSource();    return;  }  boolean bStatus=updateAccountInformation(reqTermination.getNameIdentifier());  if (!bStatus) {    FSUtils.debug.message("Termination request processing failed");    String[] data={FSUtils.bundle.getString(IFSConstants.TERMINATION_REQUEST_PROCESSING_FAILED)};    LogUtil.error(Level.INFO,LogUtil.TERMINATION_FAILED,data,ssoToken);    returnToSource();    return;  }  FSUtils.debug.message("User sucessfully defederated");  String[] data={FSUtils.bundle.getString(IFSConstants.TERMINATION_SUCCEEDED)};  LogUtil.access(Level.INFO,LogUtil.TERMINATION_SUCCESS,data,ssoToken);  if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {    FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);    if (spAdapter != null) {      FSUtils.debug.message("FSFedTerminationHandler.HTTP");      try {        spAdapter.postTerminationNotificationSuccess(hostedEntityId,request,response,userID,reqTermination,IFSConstants.TERMINATION_IDP_HTTP_PROFILE);      } catch (      Exception e) {        FSUtils.debug.error("postTermNotification.IDP/HTTP",e);      }    }  }  returnToSource();  return;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attrList;  doc=(Document)load("hc_staff",false);  attrList=doc.getAttributes();  assertNull("doc_attributes_is_null",attrList);}  }
class C{  public PolicyResponseProvider(String pResponseProviderName,String className,String propertyName,Set<String> propertyValues){  this.className=className;  this.pResponseProviderName=pResponseProviderName;  this.propertyName=propertyName;  this.propertyValues=propertyValues;}  }
class C{  public void testSetAttributeNS1() throws Throwable {  String namespaceURI="http://www.nist.gov";  String qualifiedName="emp:qual?name";  Document doc;  NodeList elementList;  Node testAddr;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagName("employee");  testAddr=elementList.item(0);{    boolean success=false;    try {      ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  protected void drawCheckBox(PdfCanvas canvas,float width,float height,float fontSize,boolean on){  if (!on) {    return;  }  if (checkType == TYPE_CROSS) {    float offset=borderWidth * 2;    canvas.moveTo((width - height) / 2 + offset,height - offset).lineTo((width + height) / 2 - offset,offset).moveTo((width + height) / 2 - offset,height - offset).lineTo((width - height) / 2 + offset,offset).stroke();    return;  }  PdfFont ufont=getFont();  canvas.beginText().setFontAndSize(ufont,fontSize).resetFillColorRgb().setTextMatrix((width - ufont.getWidth(text,fontSize)) / 2,(height - ufont.getAscent(text,fontSize)) / 2).showText(text).endText();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new MetalRootPaneUI();}  }
class C{  public ScenarioBuilder master(){  try {    git.checkout().setName("master").call();  } catch (  Exception ex) {    throw new IllegalStateException("cannot checkout master",ex);  }  return this;}  }
class C{  protected void BuildSubrUsed(int Font,int FD,int SubrOffset,int[] SubrsOffsets,Map<Integer,int[]> hSubr,List<Integer> lSubr){  int LBias=CalcBias(SubrOffset,Font);  for (int i=0; i < glyphsInList.size(); i++) {    int glyph=(int)glyphsInList.get(i);    int Start=fonts[Font].charstringsOffsets[glyph];    int End=fonts[Font].charstringsOffsets[glyph + 1];    if (FD >= 0) {      EmptyStack();      NumOfHints=0;      int GlyphFD=fonts[Font].FDSelect[glyph];      if (GlyphFD == FD)       ReadASubr(Start,End,GBias,LBias,hSubr,lSubr,SubrsOffsets);    } else     ReadASubr(Start,End,GBias,LBias,hSubr,lSubr,SubrsOffsets);  }  for (int i=0; i < lSubr.size(); i++) {    int Subr=(int)lSubr.get(i);    if (Subr < SubrsOffsets.length - 1 && Subr >= 0) {      int Start=SubrsOffsets[Subr];      int End=SubrsOffsets[Subr + 1];      ReadASubr(Start,End,GBias,LBias,hSubr,lSubr,SubrsOffsets);    }  }}  }
class C{  public void addLiteralResultAttribute(String attrUri,String attrLocalName,String attrRawName,String attrValue){  QName key=new QName(attrUri,attrLocalName);  m_outputProperties.setProperty(key,attrValue);}  }
class C{  private File paramClassResource(String className) throws URISyntaxException {  URL url=getClass().getClassLoader().getResource(className + ".class");  assertNotNull(url);  File file=new File(url.toURI());  return file;}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  private void initMinimalExternalClientTypesData(){  Set clients=extCapInstance.getMinimalClientInfo();  Iterator iter=clients.iterator();  while (iter.hasNext()) {    Map clientData=(Map)iter.next();    String clientType=getClientType(clientData);    if ((clientType != null) && (clientType.length() > 0)) {      Map mMap=mergeWithInternal(clientType,clientData);      if (mMap != null) {        clientData=mMap;      }      externalClientData.put(clientType,clientData);    } else {      debug.error(CLASS + "Found clientType == NULL in external DB");      continue;    }  }}  }
class C{  public LDIFChangeRecordReader(final InputStream in){  super(in);}  }
class C{  private DayOfWeek(List<EnumDayOfWeek> days,EnumBindRuleType type){  this.days=days;  this.type=type;}  }
class C{  protected void prepareMyRecordsIfNeeded(ProtocolMessage pm){  if (pm.getRecords() != null && !pm.getRecords().isEmpty()) {    byte[] records=recordHandler.wrapData(messageBytesCollector.getProtocolMessageBytes(),pm.getProtocolMessageType(),pm.getRecords());    messageBytesCollector.appendRecordBytes(records);    messageBytesCollector.flushProtocolMessageBytes();  }}  }
class C{  public void testFloatValuePositive1(){  String a="27467238";  float result=2.7467238E7f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public static boolean isAMLoggingMode(){  return isAMLog;}  }
class C{  public byte[] digest(){  byte[] result=engineDigest();  state=INITIAL;  return result;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private void sprint(String s){  if (s == null) {    stringRep+=getIndentation();    stringRep+="<null>\n";    return;  }  if (s.compareTo("}") == 0 || s.compareTo("]") == 0) {    indentation--;  }  stringRep+=getIndentation();  stringRep+=s;  stringRep+="\n";  if (s.compareTo("{") == 0 || s.compareTo("[") == 0) {    indentation++;  }}  }
class C{  public static String unqualifyPid(String qualifiedPid){  if (qualifiedPid != null && qualifiedPid.startsWith(ServerConstants.SERVICE_RDN_PREFIX)) {    return qualifiedPid.substring(ServerConstants.SERVICE_RDN_PREFIX.length());  } else {    return qualifiedPid;  }}  }
class C{  @Override public int lengthOfMonth(){  return isoDate.lengthOfMonth();}  }
class C{  private boolean postRequestToServer(Thread readProgress,String openAmURL){  DataOutputStream os=null;  BufferedReader br=null;  HttpURLConnection conn=null;  try {    URL url=new URL(openAmURL + "/config/configurator");    conn=(HttpURLConnection)url.openConnection();    conn.setRequestMethod("POST");    conn.setDoOutput(true);    conn.setUseCaches(false);    conn.setRequestProperty("Content-Length",Integer.toString(postBodySB.length()));    conn.setRequestProperty("Content-Type","application/x-www-form-urlencoded");    conn.connect();    os=new DataOutputStream(conn.getOutputStream());    os.writeBytes(postBodySB.toString());    os.flush();    int responseCode=conn.getResponseCode();    if (responseCode == 200) {      br=new BufferedReader(new InputStreamReader(conn.getInputStream()));      String str;      while ((str=br.readLine()) != null) {        System.out.println(str);      }    } else {      System.out.println(rb.getString("configFailed") + responseCode);      if ((userStoreType != null) && (userStoreType.equals("LDAPv3ForADDC"))) {        System.out.println(rb.getString("cannot.connect.to.UM.datastore"));      }      return false;    }  } catch (  ProtocolException ex) {    ex.printStackTrace();    return false;  }catch (  IOException ex) {    ex.printStackTrace();    return false;  } finally {    if (os != null) {      try {        os.close();      } catch (      IOException ex) {      }    }    if (br != null) {      try {        br.close();      } catch (      IOException ex) {      }    }    try {      readProgress.join(5000);    } catch (    InterruptedException e) {    }    if (conn != null) {      try {        conn.disconnect();      } catch (      Exception ex) {      }    }  }  return true;}  }
class C{  public AuthenticationInfo(){  super(NAME);  parameters.setSeparator(COMMA);}  }
class C{  public final ManagedObjectDefinition<? extends C,? extends S> resolveManagedObjectDefinition(DefinitionResolver r) throws DefinitionDecodingException {  AbstractManagedObjectDefinition<? extends C,? extends S> rd;  rd=resolveManagedObjectDefinitionAux(this,r);  if (rd == null) {    throw new DefinitionDecodingException(this,Reason.WRONG_TYPE_INFORMATION);  } else   if (rd instanceof ManagedObjectDefinition) {    return (ManagedObjectDefinition<? extends C,? extends S>)rd;  } else {    throw new DefinitionDecodingException(this,Reason.ABSTRACT_TYPE_INFORMATION);  }}  }
class C{  public byte[] sign(){  try {    if (md5 != null && md5_hash == null) {      md5_hash=new byte[16];      md5.digest(md5_hash,0,md5_hash.length);    }    if (md5_hash != null) {      if (signature != null) {        signature.update(md5_hash);      } else       if (cipher != null) {        cipher.update(md5_hash);      }    }    if (sha != null && sha_hash == null) {      sha_hash=new byte[20];      sha.digest(sha_hash,0,sha_hash.length);    }    if (sha_hash != null) {      if (signature != null) {        signature.update(sha_hash);      } else       if (cipher != null) {        cipher.update(sha_hash);      }    }    if (signature != null) {      return signature.sign();    } else     if (cipher != null) {      return cipher.doFinal();    }    return EmptyArray.BYTE;  } catch (  DigestException e) {    return EmptyArray.BYTE;  }catch (  SignatureException e) {    return EmptyArray.BYTE;  }catch (  BadPaddingException e) {    return EmptyArray.BYTE;  }catch (  IllegalBlockSizeException e) {    return EmptyArray.BYTE;  }}  }
class C{  public final void testGetMGFParameters01(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertTrue(MGF1ParameterSpec.SHA1.equals(pssps.getMGFParameters()));}  }
class C{  public static boolean isReconAction(String action){  try {    valueOf(action);    return true;  } catch (  IllegalArgumentException ex) {    return false;  }}  }
class C{  public static RequestSecurityTokenResponse parseXML(String xml) throws WSFederationException {  Document doc=XMLUtils.toDOMDocument(xml,debug);  Element root=doc.getDocumentElement();  return new RequestSecurityTokenResponse(root);}  }
class C{  public void printlnError(String str){  System.err.println(str);}  }
class C{  @SuppressWarnings("unchecked") @Override public boolean equals(Object that){  if (that == this)   return true;  if (that instanceof SipURI) {    final SipURI a=this;    final SipURI b=(SipURI)that;    if (a.isSecure() ^ b.isSecure())     return false;    if (a.getUser() == null ^ b.getUser() == null)     return false;    if (a.getUserPassword() == null ^ b.getUserPassword() == null)     return false;    if (a.getUser() != null && !UriDecoder.decode(a.getUser()).equals(UriDecoder.decode(b.getUser())))     return false;    if (a.getUserPassword() != null && !UriDecoder.decode(a.getUserPassword()).equals(UriDecoder.decode(b.getUserPassword())))     return false;    if (a.getHost() == null ^ b.getHost() == null)     return false;    if (a.getHost() != null && !a.getHost().equalsIgnoreCase(b.getHost()))     return false;    if (a.getPort() != b.getPort())     return false;    for (Iterator i=a.getParameterNames(); i.hasNext(); ) {      String pname=(String)i.next();      String p1=a.getParameter(pname);      String p2=b.getParameter(pname);      if (p1 != null && p2 != null && !UriDecoder.decode(p1).equalsIgnoreCase(UriDecoder.decode(p2)))       return false;    }    if (a.getTransportParam() == null ^ b.getTransportParam() == null)     return false;    if (a.getUserParam() == null ^ b.getUserParam() == null)     return false;    if (a.getTTLParam() == -1 ^ b.getTTLParam() == -1)     return false;    if (a.getMethodParam() == null ^ b.getMethodParam() == null)     return false;    if (a.getMAddrParam() == null ^ b.getMAddrParam() == null)     return false;    if (a.getHeaderNames().hasNext() && !b.getHeaderNames().hasNext())     return false;    if (!a.getHeaderNames().hasNext() && b.getHeaderNames().hasNext())     return false;    if (a.getHeaderNames().hasNext() && b.getHeaderNames().hasNext()) {      HeaderFactory headerFactory=null;      try {        headerFactory=SipFactory.getInstance().createHeaderFactory();      } catch (      PeerUnavailableException e) {        Debug.logError("Cannot get the header factory to parse the header of the sip uris to compare",e);        return false;      }      for (Iterator i=a.getHeaderNames(); i.hasNext(); ) {        String hname=(String)i.next();        String h1=a.getHeader(hname);        String h2=b.getHeader(hname);        if (h1 == null && h2 != null)         return false;        if (h2 == null && h1 != null)         return false;        if (h1 == null && h2 == null)         continue;        try {          Header header1=headerFactory.createHeader(hname,UriDecoder.decode(h1));          Header header2=headerFactory.createHeader(hname,UriDecoder.decode(h2));          if (!header1.equals(header2))           return false;        } catch (        ParseException e) {          Debug.logError("Cannot parse one of the header of the sip uris to compare " + a + " "+ b,e);          return false;        }      }    }    return true;  }  return false;}  }
class C{  private String applyReplacement(final BidiMap replacement,String contents){  for (  Object key : replacement.keySet()) {    String attributeName=(String)key;    String attributeInitials=(String)replacement.get(key);    contents=contents.replaceAll(JSONSerialisation.jsonAttributeName(attributeName),JSONSerialisation.jsonAttributeName(attributeInitials));  }  return contents;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newChild;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node insertedNode;  doc=(Document)load("staff",true);  newChild=doc.getDocumentElement();  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  refChild=childList.item(0);{    boolean success=false;    try {      insertedNode=employeeNode.insertBefore(newChild,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public boolean isBefore(LocalTime other){  return compareTo(other) < 0;}  }
class C{  private void unregisterTask(Task task){  tasks.remove(task);}  }
class C{  public ProtocolVersion(String protocol,int major,int minor){  if (protocol == null) {    throw new IllegalArgumentException("Protocol name must not be null.");  }  if (major < 0) {    throw new IllegalArgumentException("Protocol major version number must not be negative.");  }  if (minor < 0) {    throw new IllegalArgumentException("Protocol minor version number may not be negative");  }  this.protocol=protocol;  this.major=major;  this.minor=minor;}  }
class C{  public static void initializeProperties(String propertyName,String propertyValue){  Properties newProps=new Properties();  newProps.put(propertyName,propertyValue);  initializeProperties(newProps,false,false);}  }
class C{  SynchronizationProviderResult handleConflictResolution(PreOperationDeleteOperation deleteOperation){  if (!deleteOperation.isSynchronizationOperation() && !brokerIsConnected()) {    LocalizableMessage msg=ERR_REPLICATION_COULD_NOT_CONNECT.get(getBaseDN());    return new SynchronizationProviderResult.StopProcessing(ResultCode.UNWILLING_TO_PERFORM,msg);  }  DeleteContext ctx=(DeleteContext)deleteOperation.getAttachment(SYNCHROCONTEXT);  Entry deletedEntry=deleteOperation.getEntryToDelete();  if (ctx != null) {    String operationEntryUUID=ctx.getEntryUUID();    String deletedEntryUUID=getEntryUUID(deletedEntry);    if (!operationEntryUUID.equals(deletedEntryUUID)) {      return new SynchronizationProviderResult.StopProcessing(ResultCode.NO_SUCH_OBJECT,null);    }  } else {    CSN csn=generateCSN(deleteOperation);    String modifiedEntryUUID=getEntryUUID(deletedEntry);    ctx=new DeleteContext(csn,modifiedEntryUUID);    deleteOperation.setAttachment(SYNCHROCONTEXT,ctx);synchronized (replayOperations) {      int size=replayOperations.size();      if (size >= 10000) {        replayOperations.remove(replayOperations.firstKey());      }      FakeOperation op=new FakeDelOperation(deleteOperation.getEntryDN(),csn,modifiedEntryUUID);      replayOperations.put(csn,op);    }  }  return new SynchronizationProviderResult.ContinueProcessing();}  }
class C{  public NoRealmFoundException(String realm){  super(IdRepoErrorCode.NO_MAPPING_FOUND,realm);}  }
class C{  public static boolean isLeftMouseButton(MouseEvent anEvent){  return ((anEvent.getModifiersEx() & InputEvent.BUTTON1_DOWN_MASK) != 0 || anEvent.getButton() == MouseEvent.BUTTON1);}  }
class C{  public long insert(String appName,String pkgName,Boolean enabled,Boolean loginEnabled){  if (appName == null || pkgName == null || enabled == null || loginEnabled == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_APPNAME,appName);  initialValues.put(KEY_PKGNAME,pkgName);  initialValues.put(KEY_ENABLED,enabled);  initialValues.put(KEY_LOGIN,loginEnabled);  initialValues.put(KEY_USERNAME,"");  initialValues.put(KEY_PASSWORD,"");  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  private ZipExtractor(InputStream is,int minRatio,int maxRatio,int numberZipEntries,String zipFileName,Application app){  this.is=is;  this.minRatio=minRatio;  this.maxRatio=maxRatio;  this.numberZipEntries=numberZipEntries;  this.zipFileName=zipFileName;  this.application=app;}  }
class C{  public AccessibleRelation[] toArray(){  if (relations == null) {    return new AccessibleRelation[0];  } else {    AccessibleRelation[] relationArray=new AccessibleRelation[relations.size()];    for (int i=0; i < relationArray.length; i++) {      relationArray[i]=(AccessibleRelation)relations.elementAt(i);    }    return relationArray;  }}  }
class C{  public String name(){  return name;}  }
class C{  public FrameBodyTPE1(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  final void registerInParent(){  if (parent != null) {    parent.children.put(name,this);  }}  }
class C{  public Point toViewCoordinates(Point p){  return new Point(p);}  }
class C{  public JCheckBoxMenuItem(String text,Icon icon){  this(text,icon,false);}  }
class C{  public void test_ConstructorILjava_lang_String(){  SimpleTimeZone st=new SimpleTimeZone(1000,"TEST");  assertEquals("Incorrect TZ constructed","TEST",st.getID());  assertTrue("Incorrect TZ constructed: " + "returned wrong offset",st.getRawOffset() == 1000);  assertTrue("Incorrect TZ constructed" + "using daylight savings",!st.useDaylightTime());}  }
class C{  public boolean isSubtreeDelete(){  return this.isSubtreeDelete;}  }
class C{  public void ifPresent(DoubleConsumer consumer){  if (isPresent)   consumer.accept(value);}  }
class C{  public static void fill(short[] array,int start,int end,short value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private boolean isPlaceholder(int index,char aChar){  return (getPlaceholderCharacter() == aChar);}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  return extns != null && !extns.isEmpty();}  }
class C{  public Arg(){  m_qname=new QName("");  ;  m_val=null;  m_expression=null;  m_isVisible=true;  m_isFromWithParam=false;}  }
class C{  @Override public final void clear() throws IOException {  if ((bufferSize == 0) && (out != null))   throw new IllegalStateException(getLocalizeMessage("jsp.error.ise_on_clear"));  if (flushed)   throw new IOException(getLocalizeMessage("jsp.error.attempt_to_clear_flushed_buffer"));  ensureOpen();  nextChar=0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrreplacedatacountnegative.class,args);}  }
class C{  protected void paintIndeterminate(Graphics g,JComponent c){  if (!(g instanceof Graphics2D)) {    return;  }  Insets b=progressBar.getInsets();  int barRectWidth=progressBar.getWidth() - (b.right + b.left);  int barRectHeight=progressBar.getHeight() - (b.top + b.bottom);  if (barRectWidth <= 0 || barRectHeight <= 0) {    return;  }  Graphics2D g2=(Graphics2D)g;  boxRect=getBox(boxRect);  if (boxRect != null) {    g2.setColor(progressBar.getForeground());    g2.fillRect(boxRect.x,boxRect.y,boxRect.width,boxRect.height);  }  if (progressBar.isStringPainted()) {    if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {      paintString(g2,b.left,b.top,barRectWidth,barRectHeight,boxRect.x,boxRect.width,b);    } else {      paintString(g2,b.left,b.top,barRectWidth,barRectHeight,boxRect.y,boxRect.height,b);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrcreatedocumentfragment.class,args);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported13.class,args);}  }
class C{  static boolean orgAliasMappedResourcesEnabled(){  return orgAliasMappedResourcesEnabledFlag;}  }
class C{  AuthContextLocal createAuthContext(HttpServletRequest request,HttpServletResponse response,SessionID sid,Map<String,String> requestHash) throws AuthException {  this.loginURL=AuthUtils.constructLoginURL(request);  this.forwardSuccess=AuthUtils.forwardSuccessExists(request);  setRequestLocale(request);  if (DEBUG.messageEnabled()) {    DEBUG.message("locale : " + localeContext.getLocale());  }  this.userOrg=getUserDomain(request,sid,requestHash);  if (DEBUG.messageEnabled()) {    DEBUG.message("createAuthContext: userOrg is : " + userOrg);  }  if ((this.userOrg == null) || this.userOrg.length() == 0) {    DEBUG.message("domain is null, error condition");    logFailed(LazyConfig.AUTHD.bundle.getString("invalidDomain"),"INVALIDDOMAIN");    auditor.auditLoginFailure(this,INVALID_REALM);    throw new AuthException(AMAuthErrorCode.AUTH_INVALID_DOMAIN,null);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("AuthUtil:getAuthContext: Creating new AuthContextLocal & LoginState");  }  AuthContextLocal authContext=new AuthContextLocal(this.userOrg);  newRequest=true;  servletRequest=request;  servletResponse=response;  setParamHash(requestHash);  client=getClient();  this.finalSessionId=sid;  if (DEBUG.messageEnabled()) {    DEBUG.message("requestType : " + newRequest);    DEBUG.message("client : " + client);    DEBUG.message("sid : " + sid);  }  try {    createSession(request,authContext);  } catch (  Exception e) {    DEBUG.error("Exception creating session .. :",e);    throw new AuthException(e);  }  String cookieSupport=AuthUtils.getCookieSupport(getClientType());  cookieDetect=AuthUtils.getCookieDetect(cookieSupport);  if ((cookieSupport != null) && cookieSupport.equals("false")) {    cookieSupported=false;  }  if (DEBUG.messageEnabled()) {    DEBUG.message("cookieSupport is : " + cookieSupport);    DEBUG.message("cookieDetect is .. : " + cookieDetect);    DEBUG.message("cookieSupported is .. : " + cookieSupported);  }  if (AuthUtils.isClientDetectionEnabled() && cookieDetect) {    cookieSet=true;  }  setDecodedGoToOnFailURL();  amIdRepo=LazyConfig.AUTHD.getAMIdentityRepository(getOrgDN());  populateOrgProfile();  return authContext;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsse.EmbeddedElement createEmbeddedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsse.impl.EmbeddedElementImpl();}  }
class C{  public final TreeSet<AwtreeObject> find_overlap_objects(ShapeConvex p_shape,int p_layer,NetNosList p_ignore_net_nos){  TreeSet<AwtreeObject> risul=new TreeSet<AwtreeObject>();  Collection<AwtreeFindEntry> tree_entries=find_overlap_tree_entries(p_shape,p_layer,p_ignore_net_nos);  for (  AwtreeFindEntry curr_entry : tree_entries)   risul.add(curr_entry.object);  return risul;}  }
class C{  private static int resolveMethodRefOffset(ConstantPool constantPool,Class<?> lambdaType){  int offset=METHOD_REF_OFFSET;  if (offset == -1) {    int constantPoolSize=constantPool.getSize();    for (int i=0; i < constantPoolSize; i++) {      try {        constantPool.getMemberRefInfoAt(constantPoolSize - i);        offset=i;        break;      } catch (      IllegalArgumentException ignore) {      }    }    METHOD_REF_OFFSET=offset;  }  if (offset >= 0)   return offset; else   throw new MethodRefOffsetResolutionFailed();}  }
class C{  protected void output(char[] chars,int start,int length) throws IOException {  if (!replaceEntities) {    super.output(chars,start,length);    return;  }  int last=start;  length+=start;  for (int counter=start; counter < length; counter++) {switch (chars[counter]) {case '<':      if (counter > last) {        super.output(chars,last,counter - last);      }    last=counter + 1;  output("&lt;");break;case '>':if (counter > last) {super.output(chars,last,counter - last);}last=counter + 1;output("&gt;");break;case '&':if (counter > last) {super.output(chars,last,counter - last);}last=counter + 1;output("&amp;");break;case '"':if (counter > last) {super.output(chars,last,counter - last);}last=counter + 1;output("&quot;");break;case '\n':case '\t':case '\r':break;default :if (chars[counter] < ' ' || chars[counter] > 127) {if (counter > last) {super.output(chars,last,counter - last);}last=counter + 1;output("&#");output(String.valueOf((int)chars[counter]));output(";");}break;}}if (last < length) {super.output(chars,last,length - last);}}  }
class C{  @Override public Foo fetchByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid_C(uuid,companyId,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public final void testToString(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.toString();}  }
class C{  private void updateSizes(){  int length=0;  if (progressBar.getOrientation() == JProgressBar.HORIZONTAL) {    length=getBoxLength(componentInnards.width,componentInnards.height);    maxPosition=componentInnards.x + componentInnards.width - length;  } else {    length=getBoxLength(componentInnards.height,componentInnards.width);    maxPosition=componentInnards.y + componentInnards.height - length;  }  delta=2.0 * (double)maxPosition / (double)numFrames;}  }
class C{  public static boolean isAuthenticed(String host,int port,String userName,String password) throws NamingException {  log.info("isAuthenticed");  Hashtable<String,String> env=new Hashtable<String,String>();  env.put(Context.INITIAL_CONTEXT_FACTORY,"com.sun.jndi.ldap.LdapCtxFactory");  env.put(Context.PROVIDER_URL,"ldap://" + host + ":"+ port);  env.put(Context.SECURITY_AUTHENTICATION,"simple");  env.put(Context.SECURITY_PRINCIPAL,userName + "@" + host);  log.info(env.toString());  env.put(Context.SECURITY_CREDENTIALS,password);  DirContext ctx=new InitialDirContext(env);  log.info("DirContext Init Succ");  boolean result=ctx != null;  if (ctx != null) {    log.info("Closing DirContext");    ctx.close();  }  return result;}  }
class C{  public OperationRejectedException(OperationType type,LocalizableMessage ufn){  this(type,ufn,ERR_OPERATION_REJECTED_DEFAULT.get());}  }
class C{  int parseDayString(String dayString) throws PolicyException {  int day=-1;  String dayStringLc=dayString.toLowerCase();  for (int i=1; i < 8; i++) {    if (DAYS_OF_WEEK[i].equals(dayStringLc)) {      day=i;      break;    }  }  if (day == -1) {    String[] args={"day",dayString};    throw new PolicyException(ResBundleUtils.rbName,"invalid_property_value",args,null);  }  return day;}  }
class C{  public CtsConnectionSuccessRateImpl(SnmpMib myMib){  super(myMib);  this.monitoringStore=InjectorHolder.getInstance(CTSConnectionMonitoringStore.class);}  }
class C{  @Override public Object deepclone(){  byte[] d=this.getDataPackage();  return ChannelData.getDataFromPackage(d);}  }
class C{  private boolean execute(boolean readResponse) throws IOException {  try {    httpEngine.sendRequest();    if (readResponse) {      httpEngine.readResponse();    }    return true;  } catch (  IOException e) {    if (handleFailure(e)) {      return false;    } else {      throw e;    }  }}  }
class C{  public static void addEnvParamsFromAssertion(Map envParameters,Assertion assertion,com.sun.identity.saml.assertion.Subject subject){  Set statements=assertion.getStatement();  Statement statement=null;  Iterator stmtIter=null;  List attrs=null;  Iterator attrIter=null;  Attribute attribute=null;  Element attrValue=null;  List attrValues=null;  String attrName=null;  String attrValueString=null;  if ((statements != null) && (!statements.isEmpty())) {    stmtIter=statements.iterator();    while (stmtIter.hasNext()) {      statement=(Statement)stmtIter.next();      if (statement.getStatementType() == Statement.ATTRIBUTE_STATEMENT) {        if (!subject.equals(((AttributeStatement)statement).getSubject())) {          continue;        }        attrs=((AttributeStatement)statement).getAttribute();        attrIter=attrs.iterator();        while (attrIter.hasNext()) {          attribute=(Attribute)attrIter.next();          try {            attrValues=attribute.getAttributeValue();          } catch (          Exception e) {            debug.error("SAMLUtils.addEnvParamsFromAssertion:" + " cannot obtain attribute value:",e);            continue;          }          attrName=attribute.getAttributeName();          List attrValueList=null;          for (Iterator avIter=attrValues.iterator(); avIter.hasNext(); ) {            attrValue=(Element)avIter.next();            if (!XMLUtils.hasElementChild(attrValue)) {              attrValueString=XMLUtils.getElementValue(attrValue);              if (attrValueList == null) {                attrValueList=new ArrayList();              }              attrValueList.add(attrValueString);            }          }          if (attrValueList != null) {            if (debug.messageEnabled()) {              debug.message("SAMLUtils.addEnvParamsFromAssertion:" + " attrName = " + attrName + " attrValue = "+ attrValueList);            }            String[] attrValueStrs=(String[])attrValueList.toArray(new String[attrValueList.size()]);            try {              envParameters.put(attrName,attrValueStrs);            } catch (            Exception ex) {              if (debug.messageEnabled()) {                debug.message("SAMLUtils.addEnvParamsFromAssertion:",ex);              }            }          } else           if (debug.messageEnabled()) {            if (debug.messageEnabled()) {              debug.message("SAMLUtils.addEnvParamsFromAssertion:" + " attrName = " + attrName + " has no value");            }          }        }      }    }  }}  }
class C{  public boolean isStylesheetParsingComplete(){  return m_parsingComplete;}  }
class C{  public void accessed(){  lastHeardFrom=System.currentTimeMillis();}  }
class C{  public HttpURLConnectionWrapper httpURLConnectionWrapper(URL url) throws IOException {  return new HttpURLConnectionWrapperImpl(url);}  }
class C{  private boolean validateProperties() throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_can_not_be_null_or_empty",null,null);  }  Set keySet=properties.keySet();  if (!keySet.contains(IP_RANGE) && !keySet.contains(DNS_NAME) && !keySet.contains(START_IP)&& !keySet.contains(IP_VERSION)) {    String[] args={DNS_NAME + "," + START_IP};    throw new PolicyException(ResBundleUtils.rbName,"at_least_one_of_the_properties_should_be_defined",args,null);  }  Iterator keys=keySet.iterator();  while (keys.hasNext()) {    String key=(String)keys.next();    if (!IP_RANGE.equals(key) && !DNS_NAME.equals(key) && !START_IP.equals(key)&& !END_IP.equals(key)&& !IP_VERSION.equals(key)) {      String args[]={key};      throw new PolicyException(ResBundleUtils.rbName,"attempt_to_set_invalid_property ",args,null);    }  }  Set ipRangeSet=(Set)properties.get(IP_RANGE);  if (ipRangeSet != null) {    validateIpRangeSet(ipRangeSet);  }  Set dnsNameSet=(Set)properties.get(DNS_NAME);  if (dnsNameSet != null) {    validateDnsNames(dnsNameSet);  }  Set startIpSet=(Set)properties.get(START_IP);  Set endIpSet=(Set)properties.get(END_IP);  if (startIpSet != null) {    if (endIpSet == null) {      String args[]={START_IP,END_IP};      throw new PolicyException(ResBundleUtils.rbName,"pair_property_not_defined",args,null);    }    validateStartIp(startIpSet);  }  if (endIpSet != null) {    validateEndIp(endIpSet);  }  return true;}  }
class C{  private MethodNode findMethod(ClassNode cn,String name,String desc){  if (cn == null) {    return null;  }  for (  MethodNode mn : cn.methods) {    if (mn.desc.equals(desc) && mn.name.equals(name)) {      return mn;    }  }  return null;}  }
class C{  public ColorConvertOp(RenderingHints hints){  profileList=new ICC_Profile[0];  this.hints=hints;}  }
class C{  boolean isCaseSensitive(){  return caseSensitive;}  }
class C{  public FrameBodyTRDA(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS02.class,args);}  }
class C{  private static long mix64(long z){  z=(z ^ (z >>> 30)) * 0xbf58476d1ce4e5b9L;  z=(z ^ (z >>> 27)) * 0x94d049bb133111ebL;  return z ^ (z >>> 31);}  }
class C{  public void deinstall(JEditorPane c){  c.removeCaretListener(inputAttributeUpdater);  c.removePropertyChangeListener(inputAttributeUpdater);  currentRun=null;  currentParagraph=null;}  }
class C{  protected SmallAttributeSet createSmallAttributeSet(AttributeSet a){  return new SmallConversionSet(a);}  }
class C{  public AnnotationVisitor visitParameterAnnotation(int parameter,String desc,boolean visible){  if (mv != null) {    return mv.visitParameterAnnotation(parameter,desc,visible);  }  return null;}  }
class C{  public DsnLayerStructure(board.BrdLayerStructure p_board_layer_structure){  arr=new DsnLayer[p_board_layer_structure.size()];  for (int index=0; index < arr.length; ++index) {    BrdLayer board_layer=p_board_layer_structure.get(index);    arr[index]=new DsnLayer(board_layer.name,index,board_layer.is_signal);  }}  }
class C{  @Deprecated public AttributeValueExp(){}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (!(pObject instanceof byte[])) {    throw new DecoderException("Parameter supplied to Base64 decode is not a byte[]");  }  return decode((byte[])pObject);}  }
class C{  public Conditions(org.w3c.dom.Element conditionsElement) throws SAMLException {  Element elt=(Element)conditionsElement;  String eltName=elt.getLocalName();  if (eltName == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Conditions: local name missing");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  if (!(eltName.equals("Conditions"))) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Conditions: invalid root element");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("invalidElement") + ":" + eltName);  }  String dt=elt.getAttribute("NotBefore");  if ((dt != null) && (dt.length() != 0)) {    try {      _notBefore=DateUtils.stringToDate(dt);    } catch (    ParseException pe) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("Conditions: could not parse  " + "NotBefore or NotOnOrAfter ");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput") + pe.getMessage());    }  }  dt=elt.getAttribute("NotOnOrAfter");  if ((dt != null) && (dt.length() != 0)) {    try {      _notOnOrAfter=DateUtils.stringToDate(elt.getAttribute("NotOnOrAfter"));    } catch (    ParseException pe) {      if (SAMLUtilsCommon.debug.messageEnabled()) {        SAMLUtilsCommon.debug.message("Conditions: could not " + "parse NotBefore or NotOnOrAfter ");      }      throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput") + pe.getMessage());    }  }  NodeList nl=conditionsElement.getChildNodes();  int length=nl.getLength();  for (int n=0; n < length; n++) {    Node child=(Node)nl.item(n);    if (child.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    String childName=child.getLocalName();    if (childName.equals("AudienceRestrictionCondition")) {      _arcs.add(createAudienceRestrictionCondition((Element)child));    } else     if (childName.equals("DoNotCacheCondition")) {      doNotCache=createDoNotCacheCondition((Element)child);    } else {      String type=((Element)child).getAttribute("xsi:type");      if (type.equals("AudienceRestrictionCondition")) {        _arcs.add(createAudienceRestrictionCondition((Element)child));      } else       if (type.equals("DoNotCacheCondition")) {        doNotCache=createDoNotCacheCondition((Element)child);      } else {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("Conditions: unsupported " + "condition, cannot determine extension ");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("unsupportedCondition"));      }    }  }}  }
class C{  @Override public Response<DirectionsResponse> executeCall() throws IOException {  return getCall().execute();}  }
class C{  public ByteVector(int capacity){  if (capacity > 0) {    blockSize=capacity;  } else {    blockSize=DEFAULT_BLOCK_SIZE;  }  array=new byte[blockSize];  n=0;}  }
class C{  public final boolean checkTag(int identifier){  return this.id == identifier;}  }
class C{  public static String urlDecode(String value){  return Uris.formDecodeParameterNameOrValue(value);}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {  lh.comment((char[])m_obj,m_start,m_length);}  }
class C{  public void addItemToParentPosition(int position,ModelItem item){  int positionOld=position;  int positionNew;  if (position < 0) {    if (item instanceof ModelEvent) {      rule.setRootEvent((ModelEvent)item);      positionNew=0;    } else {      throw new IllegalArgumentException("Somehow you added a non-event item as the root element!");    }  } else {    if (item instanceof ModelRuleFilter) {      RuleNode nodeParent=getNodeWrapper(position).getNode();      if (position == 0 && rule.getFirstActionPosition() > -1) {        int insertionIndex=rule.getFirstActionPosition();        nodeParent.addChild(item,insertionIndex);        positionNew=insertionIndex;      } else {        nodeParent.addChild(item);        positionNew=position + nodeParent.getChildren().size();      }    } else     if (item instanceof ModelRuleAction) {      RuleNode nodeParent=getNodeWrapper(0).getNode();      nodeParent.addChild(item);      positionNew=flat.size();    } else {      throw new IllegalArgumentException("Couldn't add unknown item type to node!");    }  }  flat=(new TreeToFlatArray()).convert(rule.getRootNode());  notifyDataSetChanged();  if (positionOld > -1) {    listView.setItemChecked(positionOld,false);  }  listView.setItemChecked(positionNew,true);}  }
class C{  public void display(String[] aliases){  if (aliases == null || aliases.length == 0) {    throw new IllegalArgumentException("The provided aliases are null or empty.");  }  isCanceled=true;  TreeSet<String> s=new TreeSet<>();  Collections.addAll(s,aliases);  String[] orderedAliases=new String[s.size()];  s.toArray(orderedAliases);  comboAliases.setModel(new DefaultComboBoxModel(orderedAliases));  comboAliases.setSelectedIndex(0);  setVisible(true);}  }
class C{  public void shutdown(){  if (!shutdownThePool) {    shutdownThePool=true;    for (    WorkerThread thread : threads) {      thread.terminate();    }    lock.lock();    try {      hasTasks.signalAll();    }  finally {      lock.unlock();    }  }}  }
class C{  public boolean isVertical(){  return isVerticalLine;}  }
class C{  public static boolean isAccessLoggable(Level level){  if (logger == null) {    return false;  } else {    return logger.isAccessLoggable(level);  }}  }
class C{  private void processGlobalResourcesChange(String name,Object oldValue,Object newValue){  if (name.equals("ejb")) {    if (oldValue != null) {      ContextEjb ejb=(ContextEjb)oldValue;      if (ejb.getName() != null) {        removeEjb(ejb.getName());      }    }    if (newValue != null) {      ContextEjb ejb=(ContextEjb)newValue;      if (ejb.getName() != null) {        addEjb(ejb);      }    }  } else   if (name.equals("environment")) {    if (oldValue != null) {      ContextEnvironment env=(ContextEnvironment)oldValue;      if (env.getName() != null) {        removeEnvironment(env.getName());      }    }    if (newValue != null) {      ContextEnvironment env=(ContextEnvironment)newValue;      if (env.getName() != null) {        addEnvironment(env);      }    }  } else   if (name.equals("localEjb")) {    if (oldValue != null) {      ContextLocalEjb ejb=(ContextLocalEjb)oldValue;      if (ejb.getName() != null) {        removeLocalEjb(ejb.getName());      }    }    if (newValue != null) {      ContextLocalEjb ejb=(ContextLocalEjb)newValue;      if (ejb.getName() != null) {        addLocalEjb(ejb);      }    }  } else   if (name.equals("resource")) {    if (oldValue != null) {      ContextResource resource=(ContextResource)oldValue;      if (resource.getName() != null) {        removeResource(resource.getName());      }    }    if (newValue != null) {      ContextResource resource=(ContextResource)newValue;      if (resource.getName() != null) {        addResource(resource);      }    }  } else   if (name.equals("resourceEnvRef")) {    if (oldValue != null) {      ContextResourceEnvRef resourceEnvRef=(ContextResourceEnvRef)oldValue;      if (resourceEnvRef.getName() != null) {        removeResourceEnvRef(resourceEnvRef.getName());      }    }    if (newValue != null) {      ContextResourceEnvRef resourceEnvRef=(ContextResourceEnvRef)newValue;      if (resourceEnvRef.getName() != null) {        addResourceEnvRef(resourceEnvRef);      }    }  } else   if (name.equals("resourceLink")) {    if (oldValue != null) {      ContextResourceLink rl=(ContextResourceLink)oldValue;      if (rl.getName() != null) {        removeResourceLink(rl.getName());      }    }    if (newValue != null) {      ContextResourceLink rl=(ContextResourceLink)newValue;      if (rl.getName() != null) {        addResourceLink(rl);      }    }  } else   if (name.equals("service")) {    if (oldValue != null) {      ContextService service=(ContextService)oldValue;      if (service.getName() != null) {        removeService(service.getName());      }    }    if (newValue != null) {      ContextService service=(ContextService)newValue;      if (service.getName() != null) {        addService(service);      }    }  }}  }
class C{  void copyValue(int[] val){  int len=val.length;  if (value.length < len)   value=new int[len];  System.arraycopy(val,0,value,0,len);  intLen=len;  offset=0;}  }
class C{  public static void remove(DN baseDN){  deregisterLocalBackend(baseDN);}  }
class C{  public MethodType erasedType(){  return erasedType;}  }
class C{  public void testConstrCharIntIntMathContextException1(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=120;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  try {    new BigDecimal(value,offset,len,mc);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  @Override public void send(ClusterMessage msg){  send(msg,null);}  }
class C{  @Override public boolean isEmpty(){  return size == 0;}  }
class C{  protected void log(int type,Object message,Throwable t){  StringBuffer buf=new StringBuffer();  if (showDateTime) {    buf.append(dateFormatter.format(new Date()));    buf.append(" ");  }switch (type) {case SimpleLog.LOG_LEVEL_TRACE:    buf.append("[TRACE] ");  break;case SimpleLog.LOG_LEVEL_DEBUG:buf.append("[DEBUG] ");break;case SimpleLog.LOG_LEVEL_INFO:buf.append("[INFO] ");break;case SimpleLog.LOG_LEVEL_WARN:buf.append("[WARN] ");break;case SimpleLog.LOG_LEVEL_ERROR:buf.append("[ERROR] ");break;case SimpleLog.LOG_LEVEL_FATAL:buf.append("[FATAL] ");break;}if (showShortName) {if (shortLogName == null) {shortLogName=logName.substring(logName.lastIndexOf(".") + 1);shortLogName=shortLogName.substring(shortLogName.lastIndexOf("/") + 1);}buf.append(String.valueOf(shortLogName)).append(" - ");} else if (showLogName) {buf.append(String.valueOf(logName)).append(" - ");}buf.append(String.valueOf(message));if (t != null) {buf.append(" <");buf.append(t.toString());buf.append(">");java.io.StringWriter sw=new java.io.StringWriter(1024);java.io.PrintWriter pw=new java.io.PrintWriter(sw);t.printStackTrace(pw);pw.close();buf.append(sw.toString());}write(buf);}  }
class C{  protected void moveCaret(MouseEvent e){  Point pt=new Point(e.getX(),e.getY());  Position.Bias[] biasRet=new Position.Bias[1];  int pos=component.getUI().viewToModel(component,pt,biasRet);  if (biasRet[0] == null)   biasRet[0]=Position.Bias.Forward;  if (pos >= 0) {    moveDot(pos,biasRet[0]);  }}  }
class C{  private Field(final String str,final int id){  this.str=str;  this.id=id;}  }
class C{  public void testMaxUnequal1(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=41;  String c="92948782094488478231212478987482988429808779810457634781384756794987";  int cScale=24;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal cNumber=new BigDecimal(new BigInteger(c),cScale);  assertEquals("incorrect value",cNumber,aNumber.max(bNumber));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenomodificationallowederrEE.class,args);}  }
class C{  protected void handleRenegotiation(){  workflowContext.setProtocolMessagePointer(0);  tlsContext.getDigest().reset();  if (tlsContext.getKeyStore() != null && !tlsContext.isClientAuthentication()) {    tlsContext.setClientAuthentication(true);    RenegotiationWorkflowConfiguration reneWorkflowConfig=new RenegotiationWorkflowConfiguration(tlsContext);    reneWorkflowConfig.createWorkflow();  } else   if (tlsContext.getKeyStore() == null && tlsContext.isSessionResumption()) {    RenegotiationWorkflowConfiguration reneWorkflowConfig=new RenegotiationWorkflowConfiguration(tlsContext);    reneWorkflowConfig.createWorkflow();  }  tlsContext.setSessionResumption(false);  renegotiation=false;  executed=false;  executeWorkflow();}  }
class C{  public JobImpressionsCompleted(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  @Override public String toString(){  String s=null;  try {    JSONObject jo=toJSONObject();    s=(jo == null) ? super.toString() : jo.toString(2);  } catch (  JSONException e) {    PolicyConstants.DEBUG.error("NotSubject.toString()",e);  }  return s;}  }
class C{  public final boolean isNfcEnabled(){  return nfcAdapter != null && nfcAdapter.isEnabled();}  }
class C{  protected void ReadASubr(int begin,int end,int GBias,int LBias,Map<Integer,int[]> hSubr,List<Integer> lSubr,int[] LSubrsOffsets){  EmptyStack();  NumOfHints=0;  seek(begin);  while (getPosition() < end) {    ReadCommand();    int pos=getPosition();    Object TopElement=null;    if (arg_count > 0)     TopElement=args[arg_count - 1];    int NumOfArgs=arg_count;    HandelStack();    if (null != key) switch (key) {case "callsubr":      if (NumOfArgs > 0) {        int Subr=(int)((Integer)TopElement) + LBias;        if (!hSubr.containsKey(Subr)) {          hSubr.put(Subr,null);          lSubr.add(Subr);        }        CalcHints(LSubrsOffsets[Subr],LSubrsOffsets[Subr + 1],LBias,GBias,LSubrsOffsets);        seek(pos);      }    break;case "callgsubr":  if (NumOfArgs > 0) {    int Subr=(int)((Integer)TopElement) + GBias;    if (!hGSubrsUsed.containsKey(Subr)) {      hGSubrsUsed.put(Subr,null);      lGSubrsUsed.add(Subr);    }    CalcHints(gsubrOffsets[Subr],gsubrOffsets[Subr + 1],LBias,GBias,LSubrsOffsets);    seek(pos);  }break;case "hstem":case "vstem":case "hstemhm":case "vstemhm":NumOfHints+=NumOfArgs / 2;break;case "hintmask":case "cntrmask":NumOfHints+=NumOfArgs / 2;int SizeOfMask=NumOfHints / 8;if (NumOfHints % 8 != 0 || SizeOfMask == 0) SizeOfMask++;for (int i=0; i < SizeOfMask; i++) {getCard8();}break;}}}  }
class C{  public static String trailingSlash(String value){  if (value == null || value.endsWith("/")) {    return value;  }  return value.concat("/");}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private Object readResolve(){  return (list instanceof RandomAccess ? new SynchronizedRandomAccessList<>(list) : this);}  }
class C{  protected boolean isRequestWithoutSessionChange(String uri){  Pattern f=filter;  return f != null && f.matcher(uri).matches();}  }
class C{  public static void copy(String input,Writer output) throws IOException {  output.write(input);}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  @AfterClass public void tearDown() throws Exception {  if (TEMP_FILE != null) {    TEMP_FILE.delete();  }}  }
class C{  private static Entry createChangelogEntry(final DN baseDN,final long changeNumber,final String cookie,final LDAPUpdateMsg msg,final String ldifChanges,final String changeType,final String changeInitiatorsName) throws DirectoryException {  final CSN csn=msg.getCSN();  String dnString;  if (changeNumber > 0) {    dnString="changeNumber=" + changeNumber + ","+ DN_EXTERNAL_CHANGELOG_ROOT;  } else {    dnString="replicationCSN=" + csn + ","+ baseDN+ ","+ DN_EXTERNAL_CHANGELOG_ROOT;  }  final Map<AttributeType,List<Attribute>> userAttrs=new LinkedHashMap<>();  final Map<AttributeType,List<Attribute>> opAttrs=new LinkedHashMap<>();  addAttributeByType(ATTR_SUBSCHEMA_SUBENTRY_LC,DN_DEFAULT_SCHEMA_ROOT,userAttrs,opAttrs);  addAttributeByType("numSubordinates","0",userAttrs,opAttrs);  addAttributeByType("hasSubordinates","false",userAttrs,opAttrs);  addAttributeByType("entryDN",dnString,userAttrs,opAttrs);  if (changeNumber > 0) {    addAttributeByType("changeNumber",String.valueOf(changeNumber),userAttrs,opAttrs);  }  SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_GMT_TIME);  dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));  final String format=dateFormat.format(new Date(csn.getTime()));  addAttributeByType("changeTime",format,userAttrs,opAttrs);  addAttributeByType("changeType",changeType,userAttrs,opAttrs);  addAttributeByType("targetDN",msg.getDN().toString(),userAttrs,opAttrs);  addAttributeByType("replicationCSN",csn.toString(),userAttrs,opAttrs);  addAttributeByType("replicaIdentifier",Integer.toString(csn.getServerId()),userAttrs,opAttrs);  if (ldifChanges != null) {    addAttributeByType("changes",ldifChanges,userAttrs,opAttrs);  }  if (changeInitiatorsName != null) {    addAttributeByType("changeInitiatorsName",changeInitiatorsName,userAttrs,opAttrs);  }  final String targetUUID=msg.getEntryUUID();  if (targetUUID != null) {    addAttributeByType("targetEntryUUID",targetUUID,userAttrs,opAttrs);  }  final String cookie2=cookie != null ? cookie : "";  addAttributeByType("changeLogCookie",cookie2,userAttrs,opAttrs);  final List<RawAttribute> includedAttributes=msg.getEclIncludes();  if (includedAttributes != null && !includedAttributes.isEmpty()) {    final StringBuilder builder=new StringBuilder(256);    for (    final RawAttribute includedAttribute : includedAttributes) {      final String name=includedAttribute.getAttributeType();      for (      final ByteString value : includedAttribute.getValues()) {        builder.append(name);        appendLDIFSeparatorAndValue(builder,value);        builder.append('\n');      }    }    final String includedAttributesLDIF=builder.toString();    addAttributeByType("includedAttributes",includedAttributesLDIF,userAttrs,opAttrs);  }  return new Entry(DN.valueOf(dnString),CHANGELOG_ENTRY_OBJECT_CLASSES,userAttrs,opAttrs);}  }
class C{  private byte[] twosComplement(){  prepareJavaRepresentation();  if (this.sign == 0) {    return new byte[]{0};  }  BigInteger temp=this;  int bitLen=bitLength();  int iThis=getFirstNonzeroDigit();  int bytesLen=(bitLen >> 3) + 1;  byte[] bytes=new byte[bytesLen];  int firstByteNumber=0;  int highBytes;  int bytesInInteger=4;  int hB;  if (bytesLen - (numberLength << 2) == 1) {    bytes[0]=(byte)((sign < 0) ? -1 : 0);    highBytes=4;    firstByteNumber++;  } else {    hB=bytesLen & 3;    highBytes=(hB == 0) ? 4 : hB;  }  int digitIndex=iThis;  bytesLen-=iThis << 2;  if (sign < 0) {    int digit=-temp.digits[digitIndex];    digitIndex++;    if (digitIndex == numberLength) {      bytesInInteger=highBytes;    }    for (int i=0; i < bytesInInteger; i++, digit>>=8) {      bytes[--bytesLen]=(byte)digit;    }    while (bytesLen > firstByteNumber) {      digit=~temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  } else {    while (bytesLen > firstByteNumber) {      int digit=temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  }  return bytes;}  }
class C{  public void handleDecode(Result rawResult,Bitmap barcode,float scaleFactor){  inactivityTimer.onActivity();  lastResult=rawResult;  ResultHandler resultHandler=ResultHandlerFactory.makeResultHandler(this,rawResult);  boolean fromLiveScan=barcode != null;  if (fromLiveScan) {    historyManager.addHistoryItem(rawResult,resultHandler);    beepManager.playBeepSoundAndVibrate();    drawResultPoints(barcode,scaleFactor,rawResult);  }switch (source) {case NATIVE_APP_INTENT:case PRODUCT_SEARCH_LINK:    handleDecodeExternally(rawResult,resultHandler,barcode);  break;case ZXING_LINK:if (scanFromWebPageManager == null || !scanFromWebPageManager.isScanFromWebPage()) {  handleDecodeInternally(rawResult,resultHandler,barcode);} else {  handleDecodeExternally(rawResult,resultHandler,barcode);}break;case NONE:SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);if (fromLiveScan && prefs.getBoolean(PreferencesActivity.KEY_BULK_MODE,false)) {Toast.makeText(getApplicationContext(),getResources().getString(R.string.msg_bulk_mode_scanned) + " (" + rawResult.getText()+ ')',Toast.LENGTH_SHORT).show();restartPreviewAfterDelay(BULK_MODE_SCAN_DELAY_MS);} else {handleDecodeInternally(rawResult,resultHandler,barcode);}break;}}  }
class C{  @Override public void cancelAllOperationsExcept(CancelRequest cancelRequest,int messageID){}  }
class C{  public void insert(MutableTreeNode newChild,int childIndex){  if (!allowsChildren) {    throw new IllegalStateException("node does not allow children");  } else   if (newChild == null) {    throw new IllegalArgumentException("new child is null");  } else   if (isNodeAncestor(newChild)) {    throw new IllegalArgumentException("new child is an ancestor");  }  MutableTreeNode oldParent=(MutableTreeNode)newChild.getParent();  if (oldParent != null) {    oldParent.remove(newChild);  }  newChild.setParent(this);  if (children == null) {    children=new Vector();  }  children.insertElementAt(newChild,childIndex);}  }
class C{  public void test_getInstanceLjava_lang_String() throws Exception {  try {    TrustManagerFactory.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      TrustManagerFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  TrustManagerFactory tmf;  for (int i=0; i < validValues.length; i++) {    tmf=TrustManagerFactory.getInstance(validValues[i]);    assertTrue("Not instanceof TrustManagerFactory object",tmf instanceof TrustManagerFactory);    assertEquals("Incorrect algorithm",tmf.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",tmf.getProvider(),mProv);    checkResult(tmf);  }}  }
class C{  private void addWaitingTrigger(Trigger trigger) throws JobPersistenceException {synchronized (lock) {    try {      int retries=0;      while (writeRetries == -1 || retries <= writeRetries && !shutdown) {        try {          addRepoListName(getTriggerId(trigger.getGroup(),trigger.getName()),WAITING_TRIGGERS_RESOURCE_PATH,"names");          break;        } catch (        PreconditionFailedException e) {          logger.debug("Adding waiting trigger failed {}, retrying",e);          retries++;        }      }    } catch (    ResourceException e) {      throw new JobPersistenceException("Error adding waiting trigger",e);    }  }}  }
class C{  @Deprecated public static void accessStatistic(String name,long currentTimeMillis,long costTimeMillis,long bizProcessTime,AccessStatus accessStatus){  Application application=new Application(URLParamType.application.getValue(),URLParamType.module.getValue());  accessStatistic(name,application,currentTimeMillis,costTimeMillis,bizProcessTime,accessStatus);}  }
class C{  public static boolean isClassAvilableInClassPath(String string){  try {    Class.forName(string);    return true;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  private LDIFReader createLDIFReader(String ldifString) throws Exception {  byte[] bytes=StaticUtils.getBytes(ldifString);  LDIFReader reader=new LDIFReader(new LDIFImportConfig(new ByteArrayInputStream(bytes)));  return reader;}  }
class C{  public void collapse(){  collapse(true);}  }
class C{  protected Component addSingletonComponent(Component oldC,Component newC){  if ((oldC != null) && (oldC != newC)) {    oldC.getParent().remove(oldC);  }  return newC;}  }
class C{  public void test_DivideBigDecimalRoundingModeHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.HALF_UP;  String c="50000260373164286401361913";  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  BigDecimal result=aNumber.divide(bNumber,rm);  assertEquals("incorrect value",c,result.toString());}  }
class C{  public Style addStyle(String nm,Style parent){  Style style=new NamedStyle(nm,parent);  if (nm != null) {    styles.addAttribute(nm,style);  }  return style;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Notation notationNode;  String notationName;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=(Notation)notations.getNamedItem("notation1");  notationName=notationNode.getNodeName();  assertEquals("notationGetNotationNameAssert","notation1",notationName);}  }
class C{  public AttributeFilter includeAttribute(final String attributeDescription){  return includeAttribute(attributeDescription,Schema.getDefaultSchema());}  }
class C{  public static void waitForMessage(){  sleep(MESSAGES_ARRIVE_FOR);}  }
class C{  @Inject public EvaluationMonitoringStore(final RateTimer timer){  this(timer,new RateWindow(timer,WINDOW_SIZE,SAMPLE_RATE));}  }
class C{  public Observable<Void> removeStoreObservable(String sellerId){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  removeStore(sellerId,resultHandler.toHandler());  return resultHandler;}  }
class C{  public void onLogout(HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {}  }
class C{  public static Map<String,String> parseAttributeMapping(Set<String> mappings){  Map<String,String> map=new CaseInsensitiveHashMap();  if (mappings == null) {    return map;  }  for (  String mapping : mappings) {    int idx=mapping.indexOf('=');    if (idx == -1) {      map.put(mapping,mapping);    } else {      String from=mapping.substring(0,idx);      String to=mapping.substring(idx + 1);      map.put(from,to);    }  }  return map;}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in,file.length());  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  protected Fidelity(int value){  super(value);}  }
class C{  public ProcessBuilder redirectErrorStream(boolean redirectErrorStream){  this.redirectErrorStream=redirectErrorStream;  return this;}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Method.GET:  return new HttpGet(request.getUrl());case Method.DELETE:return new HttpDelete(request.getUrl());case Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Method.HEAD:return new HttpHead(request.getUrl());case Method.OPTIONS:return new HttpOptions(request.getUrl());case Method.TRACE:return new HttpTrace(request.getUrl());case Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  final void forgetContents(){  UNSAFE.putObject(this,itemOffset,this);  UNSAFE.putObject(this,waiterOffset,null);}  }
class C{  public To(From from){  super(TO);  setAddress(from.address);  setParameters(from.parameters);}  }
class C{  public GetPropertyNamesActionHandler(SessionPropertyWhitelist sessionPropertyWhitelist){  this.sessionPropertyWhitelist=sessionPropertyWhitelist;}  }
class C{  @ApiOperation(value="create document",notes="This method creates a document",response=Document.class) @ApiModelRequest(model=Document.class,required=false,modelName="Document") public Document create(Request request,Response response){  String database=request.getHeader(Constants.Url.DATABASE,"No database provided");  String table=request.getHeader(Constants.Url.TABLE,"No table provided");  String data=request.getBody().toString(ContentType.CHARSET);  if (data == null || data.isEmpty()) {    throw new BadRequestException("No document data provided");  }  try {    Document saved=documentService.create(database,table,data);    response.setResponseCreated();    TokenResolver resolver=HyperExpress.bind(Constants.Url.DOCUMENT_ID,saved.getUuid().toString());    String locationPattern=request.getNamedUrl(HttpMethod.GET,Constants.Routes.DOCUMENT);    response.addLocationHeader(LOCATION_BUILDER.build(locationPattern,resolver));    return new LinkableDocument(saved);  } catch (  IndexParseException e) {    ServiceUtils.setBadRequestExceptionToResponse(e,response);    return null;  }}  }
class C{  private void doAcquireShared(int arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public static AsfHeader readHeader(final RandomAccessFile file) throws IOException {  final InputStream stream=createStream(file);  return FULL_READER.read(Utils.readGUID(stream),stream,0);}  }
class C{  private static void redirectAuthentication(HttpServletRequest request,HttpServletResponse response,IDPAuthnContextInfo info,IDPSSOFederateRequest data,boolean isSessionUpgrade) throws SAML2Exception, IOException {  String classMethod="UtilProxySAMLAuthenticator.redirectAuthentication: ";  String authService=IDPSSOUtil.getAuthenticationServiceURL(data.getRealm(),data.getIdpEntityID(),request);  StringBuilder appliRootUrl=getAppliRootUrl(request);  boolean forward;  StringBuffer newURL;  if (FSUtils.isSameContainer(request,authService)) {    forward=true;    String relativePath=getRelativePath(authService,appliRootUrl.toString());    newURL=new StringBuffer(relativePath).append("&forward=true");  } else {    forward=false;    newURL=new StringBuffer(authService);  }  if (data.getSpEntityID() != null) {    if (newURL.indexOf("?") == -1) {      newURL.append("?");    } else {      newURL.append("&");    }    newURL.append(SAML2Constants.SPENTITYID).append("=").append(URLEncDec.encode(data.getSpEntityID()));  }  Set<String> authnTypeAndValues=info.getAuthnTypeAndValues();  if (CollectionUtils.isNotEmpty(authnTypeAndValues)) {    boolean isFirst=true;    StringBuilder authSB=new StringBuilder();    for (    String authnTypeAndValue : authnTypeAndValues) {      int index=authnTypeAndValue.indexOf("=");      if (index != -1) {        if (isFirst) {          isFirst=false;        } else {          authSB.append("&");        }        authSB.append(authnTypeAndValue.substring(0,index + 1)).append(URLEncDec.encode(authnTypeAndValue.substring(index + 1)));      }    }    if (newURL.indexOf("?") == -1) {      newURL.append("?");    } else {      newURL.append("&");    }    newURL.append(authSB.toString());    SAML2Utils.debug.message("{} authString= {}",classMethod,authSB.toString());  }  if (newURL.indexOf("?") == -1) {    if (isSessionUpgrade) {      newURL.append("?ForceAuth=true&goto=");    } else {      newURL.append("?goto=");    }  } else {    if (isSessionUpgrade) {      newURL.append("&ForceAuth=true");    }    newURL.append("&goto=");  }  StringBuffer gotoURL;  if (forward) {    gotoURL=new StringBuffer(getRelativePath(request.getRequestURI(),request.getContextPath()));  } else {    String rpUrl=IDPSSOUtil.getAttributeValueFromIDPSSOConfig(data.getRealm(),data.getIdpEntityID(),SAML2Constants.RP_URL);    if (StringUtils.isNotEmpty(rpUrl)) {      gotoURL=new StringBuffer(rpUrl);      gotoURL.append(getRelativePath(request.getRequestURI(),request.getContextPath()));    } else {      gotoURL=request.getRequestURL();    }  }  gotoURL.append("?ReqID=").append(data.getAuthnRequest().getID()).append('&').append(INDEX).append('=').append(data.getAuthnRequest().getAssertionConsumerServiceIndex()).append('&').append(ACS_URL).append('=').append(URLEncDec.encode(data.getAuthnRequest().getAssertionConsumerServiceURL())).append('&').append(SP_ENTITY_ID).append('=').append(URLEncDec.encode(data.getAuthnRequest().getIssuer().getValue())).append('&').append(BINDING).append('=').append(URLEncDec.encode(data.getAuthnRequest().getProtocolBinding()));  newURL.append(URLEncDec.encode(gotoURL.toString()));  SAML2Utils.debug.message("{} New URL for authentication: {}",classMethod,newURL.toString());  if (forward) {    newURL.append('&').append(SystemPropertiesManager.get(Constants.AM_AUTH_COOKIE_NAME,"AMAuthCookie"));    newURL.append('=');    SAML2Utils.debug.message("{} Forward to ",classMethod,newURL.toString());    try {      request.setAttribute(Constants.FORWARD_PARAM,Constants.FORWARD_YES_VALUE);      request.getRequestDispatcher(newURL.toString()).forward(request,response);    } catch (    ServletException se) {      SAML2Utils.debug.error("{} Exception Bad Forward URL: {}",classMethod,newURL.toString());    }  } else {    response.sendRedirect(newURL.toString());  }}  }
class C{  public static void initDatabaseSingleReplication(boolean dropDb,Session session){  initDatabase(dropDb,"{ 'class' : 'SimpleStrategy', 'replication_factor' : 1}",session);}  }
class C{  protected OperationsException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  private boolean broadcastUploadFinished(@Nullable Uri downloadUrl,@Nullable Uri fileUri){  boolean success=downloadUrl != null;  String action=success ? UPLOAD_COMPLETED : UPLOAD_ERROR;  Intent broadcast=new Intent(action).putExtra(EXTRA_DOWNLOAD_URL,downloadUrl).putExtra(EXTRA_FILE_URI,fileUri);  return LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(broadcast);}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public void sendUserCreateNotification(Map attributes){  try {    if (createNotifyList != null && !createNotifyList.isEmpty()) {      sendEmail(createNotifyList,attributes,"497","490","493");    }  } catch (  MessagingException e) {    if (debug.warningEnabled()) {      debug.warning("EmailNotificationHelper." + "sendUserCreateNotification() Unable to send " + "email for user: "+ entryDN,e);    }  }}  }
class C{  public static boolean canWrite(String path){  final File file=new File(path);  if (file.exists()) {    return file.canWrite();  }  final File parentFile=file.getParentFile();  return parentFile != null && parentFile.canWrite();}  }
class C{  @Override public void updatePosition(){  spriteFrame.setTranslateX(xPos - xPosOffset);  spriteFrame.setTranslateY(yPos - yPosOffset);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public final void add(final String problem,final Severity severity){  this.problems.add(new Problem(problem,severity));  this.hasFatal|=severity == Severity.FATAL;}  }
class C{  public LinkedListNode addFirst(Object object){  LinkedListNode node=new LinkedListNode(object,head.next,head);  node.previous.next=node;  node.next.previous=node;  return node;}  }
class C{  @Override public int lengthOfMonth(){  return isoDate.lengthOfMonth();}  }
class C{  private void archiveRecord(Record record) throws RecordException {  try {    PrintWriter printWriter=getPrintWriterForFile(record,RecordConstants.HISTORY_FILE_NAME);    printWriter.println("********* OPENAM RECORD **********");    printWriter.println(recordReport.recordHistoryReport(record));    printWriter.println("**********************************");    printWriter.flush();  } catch (  IOException e) {    debug.warning("Issue '{}' can't be archived due to an IO issue.",record,e);    throw new RecordException("Issue '" + record + "' can't be archived due to an IO issue.",e);  }catch (  Exception e) {    debug.warning("Record '{}' can't be archived",record.getFolderPath(),e);  }  if (record.getRecordProperties().isZipEnabled()) {    SimpleDateFormat dateFormat=new SimpleDateFormat(DATE_FORMAT_UID);    String zipArchiveName=record.getFolderPath() + "_" + dateFormat.format(newDate())+ ".zip";    try {      ZipUtils.generateZip(record.getFolderPath(),zipArchiveName);      delete(record.getFolderPath());    } catch (    IOException e) {      debug.warning("Issue '{}' can't be zipped due to an IO issue.",record,e);      try {        delete(zipArchiveName);      } catch (      IOException e1) {        debug.warning("Zip file '{}' can't be delete.",zipArchiveName,e);      }      throw new RecordException("Issue '" + record + "' can't be zipped due to an IO issue.",e);    }catch (    URISyntaxException e) {      debug.warning("Record '{}' can't be deleted",record.getFolderPath(),e);    }  }}  }
class C{  public void trace(Object message){}  }
class C{  public void writeModifyRequest(final int messageID,final ModifyRequest request) throws IOException {  logger.trace("ENCODE LDAP MODIFY REQUEST(messageID=%d, request=%s)",messageID,request);  writeMessageHeader(messageID);{    writer.writeStartSequence(LDAP.OP_TYPE_MODIFY_REQUEST);{      writer.writeOctetString(request.getName().toString());      writer.writeStartSequence();{        for (        final Modification change : request.getModifications()) {          writeChange(change);        }      }      writer.writeEndSequence();    }    writer.writeEndSequence();  }  writeMessageFooter(request.getControls());}  }
class C{  public int handshake() throws IOException {  return 0;}  }
class C{  private byte[] generateDigestMD5RspAuth(String authID,String authzID,ByteSequence password,String realm,String nonce,String cnonce,String nonceCount,String digestURI,String qop,String charset) throws UnsupportedEncodingException {  String a1String1=authID + ':' + realm+ ':';  byte[] a1Bytes1a=a1String1.getBytes(charset);  byte[] a1Bytes1=new byte[a1Bytes1a.length + password.length()];  System.arraycopy(a1Bytes1a,0,a1Bytes1,0,a1Bytes1a.length);  password.copyTo(a1Bytes1,a1Bytes1a.length);  byte[] urpHash=md5Digest.digest(a1Bytes1);  StringBuilder a1String2=new StringBuilder();  a1String2.append(':');  a1String2.append(nonce);  a1String2.append(':');  a1String2.append(cnonce);  if (authzID != null) {    a1String2.append(':');    a1String2.append(authzID);  }  byte[] a1Bytes2a=a1String2.toString().getBytes(charset);  byte[] a1Bytes2=new byte[urpHash.length + a1Bytes2a.length];  System.arraycopy(urpHash,0,a1Bytes2,0,urpHash.length);  System.arraycopy(a1Bytes2a,0,a1Bytes2,urpHash.length,a1Bytes2a.length);  byte[] a1Hash=md5Digest.digest(a1Bytes2);  String a2String=":" + digestURI;  if (qop.equals("auth-int") || qop.equals("auth-conf")) {    a2String+=":00000000000000000000000000000000";  }  byte[] a2Bytes=a2String.getBytes(charset);  byte[] a2Hash=md5Digest.digest(a2Bytes);  String a1HashHex=getHexString(a1Hash);  String a2HashHex=getHexString(a2Hash);  String kdStr=a1HashHex + ':' + nonce+ ':'+ nonceCount+ ':'+ cnonce+ ':'+ qop+ ':'+ a2HashHex;  return md5Digest.digest(kdStr.getBytes(charset));}  }
class C{  public static ValueRange of(long min,long maxSmallest,long maxLargest){  return of(min,min,maxSmallest,maxLargest);}  }
class C{  public AttributeModificationException(String explanation){  super(explanation);}  }
class C{  public void push(int val){  this.push(new BaseTypeWrapper(val));}  }
class C{  @Override public String toString(){  return currencyCode;}  }
class C{  @Override public void removeClusterListener(ClusterListener listener){  if (listener != null) {    clusterListeners.remove(listener);    listener.setCluster(null);  }}  }
class C{  public String forceGetValueAsString(){  if (mValue == null) {    return "";  } else   if (mValue instanceof byte[]) {    if (mDataType == TYPE_ASCII) {      return new String((byte[])mValue,US_ASCII);    } else {      return Arrays.toString((byte[])mValue);    }  } else   if (mValue instanceof long[]) {    if (((long[])mValue).length == 1) {      return String.valueOf(((long[])mValue)[0]);    } else {      return Arrays.toString((long[])mValue);    }  } else   if (mValue instanceof Object[]) {    if (((Object[])mValue).length == 1) {      Object val=((Object[])mValue)[0];      if (val == null) {        return "";      } else {        return val.toString();      }    } else {      return Arrays.toString((Object[])mValue);    }  } else {    return mValue.toString();  }}  }
class C{  public boolean isErrorEnabled(){  return (getLogger().isLoggable(Level.SEVERE));}  }
class C{  public void mouseReleased(MouseEvent e){  if (dragger != null) {    if (e.getSource() == splitPane) {      dragger.completeDrag(e.getX(),e.getY());    } else     if (e.getSource() == BasicSplitPaneDivider.this) {      Point ourLoc=getLocation();      dragger.completeDrag(e.getX() + ourLoc.x,e.getY() + ourLoc.y);    } else     if (e.getSource() == hiddenDivider) {      Point hDividerLoc=hiddenDivider.getLocation();      int ourX=e.getX() + hDividerLoc.x;      int ourY=e.getY() + hDividerLoc.y;      dragger.completeDrag(ourX,ourY);    }    dragger=null;    e.consume();  }}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement elem){  if (m_selectPattern != null) {    error(XSLTErrorResources.ER_CANT_HAVE_CONTENT_AND_SELECT,new Object[]{"xsl:" + this.getNodeName()});    return null;  }  return super.appendChild(elem);}  }
class C{  public boolean isDecaying(){  return (getData() & 0x8) != 0;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(0);{    boolean success=false;    try {      employeeNode.setPrefix("pre^fix xmlns='http//www.nist.gov'");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  private synchronized void addRoute(SIPResponse sipResponse){  try {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("setContact: dialogState: " + this + "state = "+ this.getState());    }    if (sipResponse.getStatusCode() == 100) {      return;    } else     if (this.dialogState == TERMINATED_STATE) {      return;    } else     if (this.dialogState == CONFIRMED_STATE) {      if (sipResponse.getStatusCode() / 100 == 2 && !this.isServer()) {        ContactList contactList=sipResponse.getContactHeaders();        if (contactList != null && SIPRequest.isTargetRefresh(sipResponse.getCSeq().getMethod())) {          this.setRemoteTarget((ContactHeader)contactList.getFirst());        }      }      if (!this.pendingRouteUpdateOn202Response)       return;    }    if (!isServer() || this.pendingRouteUpdateOn202Response) {      if ((this.getState() != DialogState.CONFIRMED && this.getState() != DialogState.TERMINATED) || this.pendingRouteUpdateOn202Response) {        RecordRouteList rrlist=sipResponse.getRecordRouteHeaders();        if (rrlist != null) {          this.addRoute(rrlist);        } else {          this.routeList=new RouteList();        }      }      ContactList contactList=sipResponse.getContactHeaders();      if (contactList != null) {        this.setRemoteTarget((ContactHeader)contactList.getFirst());      }    }  }  finally {    if (logger.isLoggingEnabled(LogLevels.TRACE_DEBUG)) {      logger.logStackTrace();    }  }}  }
class C{  public static PropertyEditor findEditor(Class<?> targetType){  return ThreadGroupContext.getContext().getPropertyEditorFinder().find(targetType);}  }
class C{  public boolean hasItemMeta(){  return !Bukkit.getItemFactory().equals(meta,null);}  }
class C{  static public void assertNotSame(Object expected,Object actual){  assertNotSame(null,expected,actual);}  }
class C{  public boolean isRedirectionDone(){  return redirectionDone;}  }
class C{  public int parameterCount(){  return ptypes.length;}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  address.encode(retval);  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty()) {    retval.append(SEMICOLON);    parameters.encode(retval);  }  return retval;}  }
class C{  SynchronizationProviderResult handleConflictResolution(PreOperationAddOperation addOperation){  if (!addOperation.isSynchronizationOperation() && !brokerIsConnected()) {    LocalizableMessage msg=ERR_REPLICATION_COULD_NOT_CONNECT.get(getBaseDN());    return new SynchronizationProviderResult.StopProcessing(ResultCode.UNWILLING_TO_PERFORM,msg);  }  if (fractionalConfig.isFractional()) {    if (addOperation.isSynchronizationOperation()) {      fractionalFilterOperation(addOperation,true);    } else {      if (fractionalFilterOperation(addOperation,false)) {        LocalizableMessage msg=NOTE_ERR_FRACTIONAL_FORBIDDEN_OPERATION.get(getBaseDN(),addOperation);        return new SynchronizationProviderResult.StopProcessing(ResultCode.UNWILLING_TO_PERFORM,msg);      }    }  }  if (addOperation.isSynchronizationOperation()) {    AddContext ctx=(AddContext)addOperation.getAttachment(SYNCHROCONTEXT);    String uuid=ctx.getEntryUUID();    if (findEntryDN(uuid) != null) {      return new SynchronizationProviderResult.StopProcessing(ResultCode.NO_OPERATION,null);    }    String parentEntryUUID=ctx.getParentEntryUUID();    if (parentEntryUUID != null) {      DN parentDnFromCtx=findEntryDN(ctx.getParentEntryUUID());      if (parentDnFromCtx == null) {        return new SynchronizationProviderResult.StopProcessing(ResultCode.NO_SUCH_OBJECT,null);      }      DN entryDN=addOperation.getEntryDN();      DN parentDnFromEntryDn=DirectoryServer.getParentDNInSuffix(entryDN);      if (parentDnFromEntryDn != null && !parentDnFromCtx.equals(parentDnFromEntryDn)) {        return new SynchronizationProviderResult.StopProcessing(ResultCode.NO_SUCH_OBJECT,null);      }    }  }  return new SynchronizationProviderResult.ContinueProcessing();}  }
class C{  public ShapeTile offset_shape(int p_half_width,int p_no){  if (p_no < 0 || p_no > plaline_len(-3)) {    System.out.println("Polyline.offset_shape: p_no out of range");    return null;  }  ArrayList<ShapeTile> result=offset_shapes(p_half_width,p_no,p_no + 2);  if (result.size() < 1)   return ShapeTileOctagon.EMPTY;  return result.get(0);}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  ObjectInputStream.GetField gf=s.readFields();  readOnly=gf.get("readOnly",false);  Set<Principal> inputPrincs=(Set<Principal>)gf.get("principals",null);  if (inputPrincs == null) {    throw new NullPointerException(ResourcesMgr.getString("invalid.null.input.s."));  }  try {    principals=Collections.synchronizedSet(new SecureSet<Principal>(this,PRINCIPAL_SET,inputPrincs));  } catch (  NullPointerException npe) {    principals=Collections.synchronizedSet(new SecureSet<Principal>(this,PRINCIPAL_SET));  }  this.pubCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PUB_CREDENTIAL_SET));  this.privCredentials=Collections.synchronizedSet(new SecureSet<Object>(this,PRIV_CREDENTIAL_SET));}  }
class C{  public PolicyNormalAddViewBean(){  super("PolicyNormalAdd",DEFAULT_DISPLAY_URL);}  }
class C{  public File createBaseEntryTempFile(String baseDn) throws ApplicationException {  File ldifFile;  try {    ldifFile=File.createTempFile("opendj-base-entry",".ldif");    ldifFile.deleteOnExit();  } catch (  IOException ioe) {    LocalizableMessage failedMsg=getThrowableMsg(INFO_ERROR_CREATING_TEMP_FILE.get(),ioe);    throw new ApplicationException(ReturnCode.FILE_SYSTEM_ACCESS_ERROR,failedMsg,ioe);  }  LDIFExportConfig exportConfig=new LDIFExportConfig(ldifFile.getAbsolutePath(),OVERWRITE);  try (LDIFWriter writer=new LDIFWriter(exportConfig)){    DN dn=DN.valueOf(baseDn);    writer.writeEntry(StaticUtils.createEntry(dn));  } catch (  LocalizedIllegalArgumentException|LDIFException|IOException de) {    throw new ApplicationException(ReturnCode.CONFIGURATION_ERROR,getThrowableMsg(INFO_ERROR_IMPORTING_LDIF.get(),de),de);  }catch (  Throwable t) {    throw new ApplicationException(ReturnCode.BUG,getThrowableMsg(INFO_BUG_MSG.get(),t),t);  }  return ldifFile;}  }
class C{  private boolean needTypeState(final boolean isBlocking,final boolean throwEofException) throws IOException {  if (!isBlocking && in.available() <= 0) {    return false;  }  final int type=in.read();  if (type == -1) {    if (throwEofException) {      final LocalizableMessage message=ERR_ASN1_TRUCATED_TYPE_BYTE.get();      throw DecodeException.fatalError(message);    }    return false;  }  peekType=(byte)type;  state=ASN1.ELEMENT_READ_STATE_NEED_FIRST_LENGTH_BYTE;  return true;}  }
class C{  private void updatePercentagesAndAdjustmentWeights(int span){  adjustmentWeights=new int[columnRequirements.length];  for (int i=0; i < columnRequirements.length; i++) {    adjustmentWeights[i]=0;  }  if (relativeCells) {    percentages=new int[columnRequirements.length];  } else {    percentages=null;  }  int nrows=getRowCount();  for (int rowIndex=0; rowIndex < nrows; rowIndex++) {    RowView row=getRow(rowIndex);    int col=0;    int ncells=row.getViewCount();    for (int cell=0; cell < ncells; cell++, col++) {      View cv=row.getView(cell);      for (; row.isFilled(col); col++)       ;      int rowSpan=getRowsOccupied(cv);      int colSpan=getColumnsOccupied(cv);      AttributeSet a=cv.getAttributes();      CSS.LengthValue lv=(CSS.LengthValue)a.getAttribute(CSS.Attribute.WIDTH);      if (lv != null) {        int len=(int)(lv.getValue(span) / colSpan + 0.5f);        for (int i=0; i < colSpan; i++) {          if (lv.isPercentage()) {            percentages[col + i]=Math.max(percentages[col + i],len);            adjustmentWeights[col + i]=Math.max(adjustmentWeights[col + i],WorstAdjustmentWeight);          } else {            adjustmentWeights[col + i]=Math.max(adjustmentWeights[col + i],WorstAdjustmentWeight - 1);          }        }      }      col+=colSpan - 1;    }  }}  }
class C{  private boolean processDeleteRequest(LDAPMessage message,List<Control> controls){  if (ldapVersion == 2 && !controls.isEmpty()) {    DeleteResponseProtocolOp responseOp=new DeleteResponseProtocolOp(LDAPResultCode.PROTOCOL_ERROR,ERR_LDAPV2_CONTROLS_NOT_ALLOWED.get());    sendLDAPMessage(message,responseOp);    disconnectControlsNotAllowed();    return false;  }  DeleteRequestProtocolOp protocolOp=message.getDeleteRequestProtocolOp();  DeleteOperationBasis deleteOp=new DeleteOperationBasis(this,nextOperationID.getAndIncrement(),message.getMessageID(),controls,protocolOp.getDN());  try {    addOperationInProgress(deleteOp);  } catch (  DirectoryException de) {    logger.traceException(de);    DeleteResponseProtocolOp responseOp=new DeleteResponseProtocolOp(de.getResultCode().intValue(),de.getMessageObject(),de.getMatchedDN(),de.getReferralURLs());    sendLDAPMessage(new LDAPMessage(message.getMessageID(),responseOp,deleteOp.getResponseControls()));  }  return connectionValid;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.DemographicsType createDemographicsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.DemographicsTypeImpl();}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void keyPressed(KeyEvent e){  ((KeyListener)a).keyPressed(e);  ((KeyListener)b).keyPressed(e);}  }
class C{  public void test_setIntLjava_lang_ObjectII(){  int[] x={0};  boolean thrown=false;  try {    Array.setInt(x,0,(int)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getInt(x,0));  try {    Array.setInt(new Object(),0,(int)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setInt(x,4,(int)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setInt(null,0,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public boolean forceASCII(){  return this.forceASCII;}  }
class C{  public void testDecodingPlus() throws Exception {  assertEquals("a b",URLDecoder.decode("a+b"));  assertEquals("a b",URLDecoder.decode("a+b","UTF-8"));  assertEquals("a+b",new URI("http://foo#a+b").getFragment());}  }
class C{  private static void processResourceMap(Map attrs){  Set values=(Set)attrs.get(RESOURCE_COMPARATOR);  if (values != null && !values.isEmpty()) {    Iterator valIterator=values.iterator();    while (valIterator.hasNext()) {      String elemVal=(String)valIterator.next();      if (elemVal != null) {        StringTokenizer st=new StringTokenizer(elemVal,"|");        String[] tokens=new String[6];        int count=0;        while (st.hasMoreTokens()) {          tokens[count++]=st.nextToken();          if (count > 5) {            break;          }        }        Map configMap=new HashMap();        String serviceType=null;        for (int i=0; i < count; i++) {          int equal=tokens[i].indexOf("=");          String name=tokens[i].substring(0,equal);          String value=tokens[i].substring(equal + 1);          if (name == null) {            PolicyManager.debug.error("Resource comapartaor: " + " name is null");            continue;          }          if (value == null) {            PolicyManager.debug.error("Resource comapartaor: " + " value is null");            continue;          }          if (PolicyManager.debug.messageEnabled()) {            PolicyManager.debug.message("Attr Name = " + name + " Attr Value = "+ value);          }          if (name.equalsIgnoreCase(RESOURCE_COMPARATOR_TYPE)) {            serviceType=value;          } else           if (name.equalsIgnoreCase(RESOURCE_COMPARATOR_CLASS)) {            configMap.put(RESOURCE_COMPARATOR_CLASS,value);          } else           if (name.equalsIgnoreCase(RESOURCE_COMPARATOR_DELIMITER)) {            configMap.put(RESOURCE_COMPARATOR_DELIMITER,value);          } else           if (name.equalsIgnoreCase(RESOURCE_COMPARATOR_WILDCARD)) {            configMap.put(RESOURCE_COMPARATOR_WILDCARD,value);          } else           if (name.equalsIgnoreCase(RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD)) {            configMap.put(RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD,value);          } else           if (name.equalsIgnoreCase(RESOURCE_COMPARATOR_CASE_SENSITIVE)) {            configMap.put(RESOURCE_COMPARATOR_CASE_SENSITIVE,value);          }        }        if (PolicyManager.debug.messageEnabled()) {          PolicyManager.debug.message("PolicyConfig." + "processResourceMap():configMap.toString()" + configMap.toString());        }synchronized (resourceCompMap) {          resourceCompMap.put(serviceType,configMap);        }      }    }  }}  }
class C{  public org.w3c.dom.Element signWithWSSSAMLTokenProfile(org.w3c.dom.Document doc,java.security.cert.Certificate cert,String assertionID,String algorithm,java.util.List ids,String wsfVersion) throws XMLSignatureException {  return sp.signWithWSSSAMLTokenProfile(doc,cert,assertionID,algorithm,ids,wsfVersion);}  }
class C{  public Boolean isConfidential(){  return confidential;}  }
class C{  public BlindTrustManagerProvider(){}  }
class C{  @Override public void startIntentSenderFromFragment(final Fragment fragment,final IntentSender intent,final int requestCode,@Nullable final Intent fillInIntent,final int flagsMask,final int flagsValues,final int extraFlags,final Bundle options) throws IntentSender.SendIntentException {  try {    delegate.startIntentSenderFromFragment(fragment,intent,requestCode,fillInIntent,flagsMask,flagsValues,extraFlags,options);  } catch (  SuppressedException e) {    throw (IntentSender.SendIntentException)e.getCause();  }}  }
class C{  public Set createAssignableDynamicGroups(Set assignableDynamicGroupNames) throws AMException, SSOException {  Iterator iter=assignableDynamicGroupNames.iterator();  Set assignableDynamicGroups=new HashSet();  while (iter.hasNext()) {    String assignableDynamicGroupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + ((String)iter.next())+ ","+ super.entryDN;    AMAssignableDynamicGroupImpl assignableDynamicGroupImpl=new AMAssignableDynamicGroupImpl(super.token,assignableDynamicGroupDN);    assignableDynamicGroupImpl.create();    assignableDynamicGroups.add(assignableDynamicGroupImpl);  }  return assignableDynamicGroups;}  }
class C{  public static Finder wrap(final Class<? extends ServerResource> resource){  return wrap(Key.get(resource));}  }
class C{  private static int determineType(String dataBeginning){  dataBeginning=dataBeginning.trim();  if (dataBeginning.length() == 0) {    return TYPE_ERROR_BLANK;  }  if (dataBeginning.startsWith("bplist")) {    return TYPE_BINARY;  }  if (dataBeginning.startsWith("(") || dataBeginning.startsWith("{") || dataBeginning.startsWith("/")) {    return TYPE_ASCII;  }  if (dataBeginning.startsWith("<")) {    return TYPE_XML;  }  return TYPE_ERROR_UNKNOWN;}  }
class C{  public AMServiceProfileViewBeanBase(String name,String url,String serviceName){  super(name);  setDefaultDisplayURL(url);  if (serviceName != null) {    initialize(serviceName);  }}  }
class C{  private void processNotification(SessionNotification snot,boolean isLocal){  SessionInfo info=snot.getSessionInfo();  sessionDebug.message("SESSION NOTIFICATION : " + info.toXMLString());  if (!info.getState().equals("valid")) {    if (isLocal) {      sessionCache.removeLocalSID(info);    } else {      sessionCache.removeRemoteSID(info);    }    return;  }  SessionID sid=new SessionID(info.getSessionID());  Session session=sessionCache.readSession(sid);  try {    if (session == null) {      return;    }    session.update(info);  } catch (  Exception e) {    sessionDebug.error("SessionNotificationHandler:processNotification : ",e);    sessionCache.removeSID(sid);    return;  }  SessionEventType sessionEventType=SessionEventType.fromCode(snot.getNotificationType());  SessionEvent evt=new SessionEvent(session,sessionEventType,snot.getNotificationTime());  Session.invokeListeners(evt);}  }
class C{  public NamePath append(String head){  pathPieces.add(head);  return this;}  }
class C{  public X509Name(String dirName){  this(DefaultReverse,DefaultLookUp,dirName);}  }
class C{  public void readSetOf(ASN1SetOf setOf) throws IOException {  if (tag != ASN1Constants.TAG_C_SETOF) {    throw expected("setOf");  }  decodeValueCollection(setOf);}  }
class C{  private void extract(String destination) throws ApplicationException {  extract(destination,true);}  }
class C{  public void insert_val(java.io.Serializable value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_val",_opsClass);  DynSequenceOperations $self=(DynSequenceOperations)$so.servant;  try {    $self.insert_val(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  AlignmentPatternFinder(BitMatrix image,int startX,int startY,int width,int height,float moduleSize,ResultPointCallback resultPointCallback){  this.image=image;  this.possibleCenters=new ArrayList<>(5);  this.startX=startX;  this.startY=startY;  this.width=width;  this.height=height;  this.moduleSize=moduleSize;  this.crossCheckStateCount=new int[3];  this.resultPointCallback=resultPointCallback;}  }
class C{  protected void releaseContent(){  map=null;}  }
class C{  protected synchronized void internalStart(int svc) throws ChannelException {  try {    boolean valid=false;    svc=svc & Channel.DEFAULT;    if (startLevel == Channel.DEFAULT)     return;    if (svc == 0)     return;    if (svc == (svc & startLevel)) {      throw new ChannelException(sm.getString("channelCoordinator.alreadyStarted",Integer.toString(svc)));    }    if (Channel.SND_RX_SEQ == (svc & Channel.SND_RX_SEQ)) {      clusterReceiver.setMessageListener(this);      clusterReceiver.setChannel(getChannel());      clusterReceiver.start();      Member localMember=getChannel().getLocalMember(false);      if (localMember instanceof StaticMember) {        StaticMember staticMember=(StaticMember)localMember;        staticMember.setHost(getClusterReceiver().getHost());        staticMember.setPort(getClusterReceiver().getPort());        staticMember.setSecurePort(getClusterReceiver().getSecurePort());      } else {        membershipService.setLocalMemberProperties(getClusterReceiver().getHost(),getClusterReceiver().getPort(),getClusterReceiver().getSecurePort(),getClusterReceiver().getUdpPort());      }      valid=true;    }    if (Channel.SND_TX_SEQ == (svc & Channel.SND_TX_SEQ)) {      clusterSender.setChannel(getChannel());      clusterSender.start();      valid=true;    }    if (Channel.MBR_RX_SEQ == (svc & Channel.MBR_RX_SEQ)) {      membershipService.setMembershipListener(this);      membershipService.setChannel(getChannel());      if (membershipService instanceof McastService) {        ((McastService)membershipService).setMessageListener(this);      }      membershipService.start(MembershipService.MBR_RX);      valid=true;    }    if (Channel.MBR_TX_SEQ == (svc & Channel.MBR_TX_SEQ)) {      membershipService.setChannel(getChannel());      membershipService.start(MembershipService.MBR_TX);      valid=true;    }    if (!valid) {      throw new IllegalArgumentException(sm.getString("channelCoordinator.invalid.startLevel"));    }    startLevel=(startLevel | svc);  } catch (  ChannelException cx) {    throw cx;  }catch (  Exception x) {    throw new ChannelException(x);  }}  }
class C{  public ZonkyOAuthApi oauth(final CommonFilter filter){  return this.obtain(ZonkyOAuthApi.class,ApiProvider.ZONKY_URL,filter);}  }
class C{  private boolean verifyIpAddresses(InetAddress hostAddress,List<String> ipAddresses,X500Principal principal,boolean failureIsCritical) throws CertificateException {  if (!ipAddresses.isEmpty()) {    for (    String address : ipAddresses) {      try {        if (InetAddress.getByName(address).equals(hostAddress)) {          return true;        }      } catch (      UnknownHostException e) {      }    }    if (failureIsCritical) {      throw new CertificateException(ERR_CERT_NO_MATCH_IP.get(principal,hostName).toString());    }  }  return false;}  }
class C{  public static AttrSet mapToAttrSet(Map map,boolean byteValues){  AttrSet attrSet=new AttrSet();  if (map == null) {    return attrSet;  }  if (!byteValues) {    Iterator itr=map.keySet().iterator();    while (itr.hasNext()) {      String attrName=(String)(itr.next());      Set set=(Set)(map.get(attrName));      String attrValues[]=(set == null ? null : (String[])set.toArray(new String[set.size()]));      attrSet.replace(new Attr(attrName,attrValues));    }  } else {    Iterator itr=map.keySet().iterator();    while (itr.hasNext()) {      String attrName=(String)(itr.next());      byte[][] attrValues=(byte[][])(map.get(attrName));      attrSet.replace(new Attr(attrName,attrValues));    }  }  return attrSet;}  }
class C{  public ReplicationMsg receive() throws SocketTimeoutException {  return receive(false,true,false);}  }
