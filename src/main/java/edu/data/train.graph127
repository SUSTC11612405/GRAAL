class C{  public static boolean compare(long ptr,byte[] bytes){  final int addrSize=GridUnsafe.ADDR_SIZE;  int off=(int)(ptr % addrSize);  int align=addrSize - off;  int len=bytes.length;  if (align != addrSize) {    for (int i=0; i < align && i < len; i++) {      if (GridUnsafe.getByte(ptr) != bytes[i])       return false;      ptr++;    }  } else   align=0;  if (len <= align)   return true;  assert ptr % addrSize == 0 : "Invalid alignment [ptr=" + ptr + ", addrSize="+ addrSize+ ", mod="+ (ptr % addrSize)+ ']';  int words=(len - align) / addrSize;  int left=(len - align) % addrSize;switch (addrSize) {case 4:    for (int i=0; i < words; i++) {      int step=i * addrSize + align;      int word=GridUnsafe.getInt(ptr);      int comp=GridUnsafe.getInt(bytes,GridUnsafe.BYTE_ARR_OFF + step);      if (word != comp)       return false;      ptr+=GridUnsafe.ADDR_SIZE;    }  break;default :for (int i=0; i < words; i++) {  int step=i * addrSize + align;  long word=GridUnsafe.getLong(ptr);  long comp=GridUnsafe.getLong(bytes,GridUnsafe.BYTE_ARR_OFF + step);  if (word != comp)   return false;  ptr+=GridUnsafe.ADDR_SIZE;}break;}if (left != 0) {for (int i=0; i < left; i++) if (GridUnsafe.getByte(ptr + i) != bytes[i + align + words * GridUnsafe.ADDR_SIZE]) return false;}return true;}  }
class C{  private static boolean isNetworkProblem(Object error){  return (error instanceof NetworkError) || (error instanceof NoConnectionError);}  }
class C{  void remove(){  this.dirEdge=null;}  }
class C{  public List<FileStatusEntity> joinFileSensitivity(String site,List<FileStatus> fileStatuses){  List<FileStatusEntity> result=new ArrayList<>();  HDFSResourceSensitivityService sensitivityService=new HDFSResourceSensitivityService();  Map<String,String> sensitivityMap=sensitivityService.getFileSensitivityMapBySite(site);  LOG.info("Joining Resource with Sensitivity data ..");  for (  FileStatus fileStatus : fileStatuses) {    String resource=fileStatus.getPath().toUri().getPath();    FileStatusEntity entity;    try {      entity=new FileStatusEntity(fileStatus);      entity.setResource(resource);      entity.setSensitiveType(sensitivityMap.get(resource));      entity.setChildSensitiveTypes(getChildSensitivityTypes(resource,sensitivityMap));      result.add(entity);    } catch (    IOException e) {      LOG.error(" Exception when joining FileSensitivity .. Error Message : " + e.getMessage());    }  }  return result;}  }
class C{  @Override public void init() throws ServletException {  try {    dataSource=getResource("jdbc/DefaultDB");  } catch (  IOException e) {    throw new ServletException("Unable to establish a connectivity to the data source",e);  }}  }
class C{  public EventStoreBuilder tcpConnectTimeout(Duration duration){  tcpSettingsBuilder.connectTimeout(duration);  return this;}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    ListAdapter adapter=getAdapter();    if (adapter != null && ((HeaderViewGridAdapter)adapter).removeFooter(v)) {      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public static PcPatternRunner serializableInstance(){  return new PcPatternRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public void postPostBreedingExchangeStatistics(final EvolutionState state){  for (int x=0; x < children.length; x++)   children[x].postPostBreedingExchangeStatistics(state);}  }
class C{  static String generateNodeName(final String hostName,final String hostPort,final String hostContext){  try {    return hostName + ':' + hostPort+ '_'+ URLEncoder.encode(trimLeadingAndTrailingSlashes(hostContext),"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new Error("JVM Does not seem to support UTF-8",e);  }}  }
class C{  public void afterLoad(Entity entity){  if (!isAuthorizationRequired()) {    return;  }  if (entity != null) {    metadataTools.traverseAttributes(entity,new FillingInaccessibleAttributesVisitor());  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoUserRecUb[");  buffer.append("m_pwd = ").append(m_pwd);  buffer.append(", m_pwdMbc = ").append(m_pwdMbc);  buffer.append(", m_pwdLastUpdts = ").append(m_pwdLastUpdts);  buffer.append("]");  return buffer.toString();}  }
class C{  public static void throwIfNotAuthenticated(final User user) throws UnauthorizedException {  if (user == null || user.getEmail() == null) {    throw new UnauthorizedException("Only authenticated users may invoke this operation");  }}  }
class C{  public void test_getInstanceLjava_lang_String() throws Exception {  try {    KeyManagerFactory.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  KeyManagerFactory keyMF;  for (int i=0; i < validValues.length; i++) {    keyMF=KeyManagerFactory.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",keyMF.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyMF.getProvider(),mProv);    checkResult(keyMF);  }}  }
class C{  public CoverageInformationItem(Location location,long count,String modelName){  this.location=location;  this.locationString=this.location.toString();  this.count=count;  this.modelName=modelName;}  }
class C{  public static void handleEntry(File file,boolean toUpper){  try {    String[] filenames=file.list();    if (filenames != null) {      File[] contents=new File[filenames.length];      for (int i=0; i < contents.length; i++)       contents[i]=new File(file.getAbsolutePath() + File.separator,filenames[i]);      for (int i=0; i < contents.length; i++) {        handleEntry(contents[i],toUpper);      }    }    File newFile;    String parent=file.getParent();    if (parent != null) {      if (toUpper) {        newFile=new File(parent,file.getName().toUpperCase());      } else {        newFile=new File(parent,file.getName().toLowerCase());      }    } else {      if (toUpper) {        newFile=new File(file.getName().toUpperCase());      } else {        newFile=new File(file.getName().toLowerCase());      }    }    if (file.renameTo(newFile)) {      System.out.println("Renamed " + (file.getParent() == null ? "." : file.getParent()) + File.separator+ file.getName()+ " to "+ (newFile.getParent() == null ? "." : newFile.getParent())+ File.separator+ newFile.getName());    } else {      System.out.println("Renaming " + (file.getParent() == null ? "." : file.getParent()) + File.separator+ file.getName()+ " to "+ (newFile.getParent() == null ? "." : newFile.getParent())+ File.separator+ newFile.getName()+ " FAILED");    }  } catch (  NullPointerException npe) {  }catch (  SecurityException se) {  }}  }
class C{  public static boolean checkCondition(String condition){  if ((condition == null) || condition.trim().equals("")) {    return true;  }  String value=condition.trim();  if (value.charAt(0) == '!') {    return System.getProperty(value.substring(1)) == null;  }  return System.getProperty(value) != null;}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  Instance newInstance=(Instance)instance.copy();  int index=m_AttIndex.getIndex();  if (!newInstance.isMissing(index)) {    double value=instance.value(index);    try {      value=m_OutputAttribute.parseDate(m_OutputAttribute.formatDate(value));    } catch (    ParseException pe) {      throw new RuntimeException("Output date format couldn't parse its own output!!");    }    newInstance.setValue(index,value);  }  push(newInstance);  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ACTIVE_DEFINITION___ACTIVE_1:    setActive_1(ACTIVE_1_EDEFAULT);  return;case UmplePackage.ACTIVE_DEFINITION___NAME_1:setName_1(NAME_1_EDEFAULT);return;case UmplePackage.ACTIVE_DEFINITION___CODE_1:setCode_1(CODE_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static AnimatablePaintValue createURICurrentColorPaintValue(AnimationTarget target,String uri){  AnimatablePaintValue v=new AnimatablePaintValue(target);  v.uri=uri;  v.paintType=PAINT_URI_CURRENT_COLOR;  return v;}  }
class C{  private static String addDays(int days,@Nullable String format){  Calendar now=Calendar.getInstance();  now.add(Calendar.DAY_OF_YEAR,days);  DateFormat formatter=getFormatter(format);  return formatter.format(now.getTime());}  }
class C{  public MultiLineString(LineString[] lineStrings,PrecisionModel precisionModel,int SRID){  super(lineStrings,new GeometryFactory(precisionModel,SRID));}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public FontBuilder(int code,FontManager manager,String alias,URL location,int style,boolean hasLayout,boolean flashType){  this(code,hasLayout,flashType);  if (manager == null)   throw new NoFontManagerException();  if (Trace.font)   Trace.trace("Locating font using FontManager '" + manager.getClass().getName() + "'");  boolean useTwips=code != TagValues.stagDefineFont && code != TagValues.stagDefineFont2;  FontFace fontFace=manager.getEntryFromLocation(location,style,useTwips);  if (fontFace == null)   FontManager.throwFontNotFound(alias,null,style,location.toString());  if (Trace.font)   Trace.trace("Initializing font at '" + location.toString() + "' as '"+ alias+ "'");  this.defaultFace=fontFace;  init(alias);}  }
class C{  private void insertString(Connection connection,String columnName,String testString,int id) throws SQLException {  PreparedStatement insert=connection.prepareStatement(String.format(INSERT_FORMAT,columnName));  try {    insert.setInt(1,id);    insert.setString(2,testString);    insert.executeUpdate();  }  finally {    insert.close();  }}  }
class C{  static <V,A>void invoke(PendingFuture<V,A> future){  assert future.isDone();  CompletionHandler<V,? super A> handler=future.handler();  if (handler != null) {    invoke(future.channel(),handler,future.attachment(),future.value(),future.exception());  }}  }
class C{  @Override public String toString(){  String ret;switch (ttype) {case TT_EOF:    ret="EOF";  break;case TT_EOL:ret="EOL";break;case TT_WORD:ret=sval;break;case TT_NUMBER:ret="n=" + nval;break;case TT_NOTHING:ret="NOTHING";break;default :{char s[]=new char[3];s[0]=s[2]='\'';s[1]=(char)ttype;ret=new String(s);break;}}return "Token[" + ret + "], line "+ lineno;}  }
class C{  public void loadByteArray(SdfBuffer buffer){  super.loadByteArray(buffer);}  }
class C{  private void initLabelView(){  mTextPaint=new Paint();  mTextPaint.setAntiAlias(true);  mTextPaint.setTextSize(16);  mTextPaint.setColor(0xFF000000);  mPaddingLeft=3;  mPaddingTop=3;  mPaddingRight=3;  mPaddingBottom=3;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public CopyCompleteTableTask(Configuration conf,DestinationObjectFactory objectFactory,ObjectConflictHandler objectConflictHandler,Cluster srcCluster,Cluster destCluster,HiveObjectSpec spec,Optional<Path> tableLocation,ParallelJobExecutor copyPartitionsExecutor,DirectoryCopier directoryCopier){  this.conf=conf;  this.objectModifier=objectFactory;  this.objectConflictHandler=objectConflictHandler;  this.srcCluster=srcCluster;  this.destCluster=destCluster;  this.spec=spec;  this.tableLocation=tableLocation;  this.copyPartitionsExecutor=copyPartitionsExecutor;  this.directoryCopier=directoryCopier;}  }
class C{  private void generateSignature() throws OpenStegoException {  OpenStego openStego=null;  byte[] sigData=null;  String inputKey=null;  String sigFileName=null;  File sigFile=null;  OpenStegoConfig config=null;  OpenStegoPlugin plugin=null;  plugin=getDefaultPlugin(OpenStegoPlugin.Purpose.WATERMARKING);  config=plugin.createConfig();  inputKey=getGenSigPanel().getInputKeyTextField().getText();  sigFileName=getGenSigPanel().getSignatureFileTextField().getText();  sigFile=new File(sigFileName);  if (!checkMandatory(getGenSigPanel().getInputKeyTextField(),labelUtil.getString("gui.label.wmGenSig.inputKey"))) {    return;  }  if (!checkMandatory(getGenSigPanel().getSignatureFileTextField(),labelUtil.getString("gui.label.wmGenSig.sigFile"))) {    return;  }  config.setPassword(inputKey);  openStego=new OpenStego(plugin,config);  if (sigFile.exists()) {    if (JOptionPane.showConfirmDialog(this,labelUtil.getString("gui.msg.warn.fileExists",sigFileName),labelUtil.getString("gui.msg.title.warn"),JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE) == JOptionPane.NO_OPTION) {      return;    }  }  sigData=openStego.generateSignature();  CommonUtil.writeFile(sigData,sigFile);  JOptionPane.showMessageDialog(this,labelUtil.getString("gui.msg.success.wmGenSig"),labelUtil.getString("gui.msg.title.success"),JOptionPane.INFORMATION_MESSAGE);  getGenSigPanel().getInputKeyTextField().setText("");  getGenSigPanel().getSignatureFileTextField().setText("");  getGenSigPanel().getInputKeyTextField().requestFocus();}  }
class C{  private Object readElement(InputNode node,Instance value) throws Exception {  Object result=read(node,expect);  if (value != null) {    value.setInstance(result);  }  return result;}  }
class C{  public boolean promptForDisconnect(){  return true;}  }
class C{  public static float intersectRayLine(Vector2fc origin,Vector2fc dir,Vector2fc point,Vector2fc normal,float epsilon){  return intersectRayLine(origin.x(),origin.y(),dir.x(),dir.y(),point.x(),point.y(),normal.x(),normal.y(),epsilon);}  }
class C{  @Override public V put(K key,V value){  Object _key=key;  Object _value=value;  if (_key == null) {    _key=NULL_OBJECT;  }  if (_value == null) {    _value=NULL_OBJECT;  }  int index=findIndex(_key,elementData);  if (elementData[index] != _key) {    modCount++;    if (++size > threshold) {      rehash();      index=findIndex(_key,elementData);    }    elementData[index]=_key;    elementData[index + 1]=null;  }  Object result=elementData[index + 1];  elementData[index + 1]=_value;  return massageValue(result);}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  private Start build(Start event){  Iterator<Attribute> list=event.getAttributes();  while (list.hasNext()) {    Attribute node=list.next();    Entry entry=attribute(node);    if (!entry.isReserved()) {      event.add(entry);    }  }  return event;}  }
class C{  public IllegalArgumentException(){  super();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean hasVersionExt(){  return hasExtension(GphotoVersion.class);}  }
class C{  public void addSubSessionizerInfo(String key,SessionizationInfo info){  if (this.subSessionizerMap == null) {    subSessionizerMap=new HashMap<String,SessionizationInfo>();  }  subSessionizerMap.put(key,info);}  }
class C{  public final void writeLong(final long value){  byteBuffer.putLong(value);}  }
class C{  public static boolean isValidExpression(String cronExpression){  try {    new CronExpression(cronExpression);  } catch (  ParseException pe) {    return false;  }  return true;}  }
class C{  public void addExternalEntity(String name,String publicID,String systemID){  if (!this.entities.containsKey(name)) {    this.entities.put(name,new String[]{publicID,systemID});  }}  }
class C{  public void readAll() throws IOException {  while (read() > 0)   ;}  }
class C{  public DefaultReflectionPredicate(Pattern omitMethods,Set<String> omitFields){  super();  this.omitMethods=omitMethods;  this.omitFields=omitFields;}  }
class C{  public MachineTagsCollection findTags(String namespace,Integer index,String... keys){  MachineTagsCollection foundTags=new MachineTagsCollection();  for (  String key : keys) {    foundTags.addAll(findOccurrencesOfTag(namespace,index,key));  }  return foundTags;}  }
class C{  public boolean ready() throws IOException {  return false;}  }
class C{  public void parseArgumentsByteCode(Vertex equation,DataInputStream dataStream,Vertex type,Network network) throws IOException {  long id=dataStream.readLong();  while (id > 0) {    Vertex element=network.findById(id);    if (element == null) {      id=dataStream.readLong();      continue;    }    if (element.is(Primitive.EQUATION)) {      element=parseOperatorByteCode(dataStream,network);    }    equation.addRelationship(type,element,Integer.MAX_VALUE);    id=dataStream.readLong();  }}  }
class C{  public Rule(String name,IPredicate head,IPredicate[] tail,IQueryOptions queryOptions,IConstraint[] constraints,IBindingSet constants,IRuleTaskFactory taskFactory,IVariable[] requiredVars){  if (name == null)   throw new IllegalArgumentException();  if (tail == null)   throw new IllegalArgumentException();  if (queryOptions == null)   throw new IllegalArgumentException();  if (constants == null) {    constants=EmptyBindingSet.INSTANCE;  }  this.name=name;  this.tail=tail;  final Set<IVariable> vars=new HashSet<IVariable>();  for (int i=0; i < tail.length; i++) {    final IPredicate pred=tail[i];    if (pred == null)     throw new IllegalArgumentException();    final int arity=pred.arity();    for (int j=0; j < arity; j++) {      final IVariableOrConstant t=pred.get(j);      if (t.isVar()) {        vars.add((IVariable)t);      }    }    if (pred instanceof IStarJoin) {      final IStarJoin starJoin=(IStarJoin)pred;      final Iterator<IVariable> it=starJoin.getConstraintVariables();      while (it.hasNext()) {        IVariable v=it.next();        vars.add(v);      }    }  }  this.head=head;  if (head != null) {    if (head.getRelationCount() != 1) {      throw new IllegalArgumentException("Expecting a single relation identifier for the head: head=" + head);    }    final int arity=head.arity();    for (int j=0; j < arity; j++) {      final IVariableOrConstant t=head.get(j);      if (t.isVar()) {        if (!vars.contains((IVariable)t)) {          throw new IllegalArgumentException("Variable not declared in the tail: " + t);        }      }    }  }  this.vars=Collections.unmodifiableSet(vars);  this.queryOptions=queryOptions;  this.constraints=constraints;  if (constraints != null) {    for (int i=0; i < constraints.length; i++) {      assert constraints[i] != null;    }  }  this.constants=constants;  this.taskFactory=taskFactory;  final Set<IVariable> s=new HashSet<IVariable>();  if (requiredVars == null) {    s.addAll(vars);  } else {    for (    IVariable v : requiredVars) {      s.add(v);    }  }  this.requiredVars=Collections.unmodifiableSet(s);}  }
class C{  public RhythmOverlay inflateOverlay(String configString,@NonNull Map<String,String> vars){  List<String> configStrings=Arrays.asList(configString.split("\\r?\\n"));  return inflateOverlayInternal(configStrings,vars,0);}  }
class C{  public void build() throws AndroidAgentException {  device=new Device();  getInfo();}  }
class C{  protected void draw(final Graphics2D g2d,final int x,final int y,final int width,final int height){  drawEntity(g2d,x,y,width,height);  if (stendhal.SHOW_COLLISION_DETECTION) {    g2d.setColor(Color.blue);    g2d.drawRect(x,y,width,height);    g2d.setColor(Color.green);    g2d.draw(entity.getArea());  }  drawAttachedSprites(g2d,x,y);}  }
class C{  public void clearWarnings() throws SQLException {  firstWarning=null;}  }
class C{  public boolean hasComment(){  return comment != null;}  }
class C{  public void testClearPassword(){  char[] password=new char[]{'1','2','3','4','5'};  PBEKeySpec pbeks=new PBEKeySpec(password);  pbeks.clearPassword();  try {    pbeks.getPassword();    fail("An IllegalStateException should be was thrown " + "after the clearing the password.");  } catch (  IllegalStateException e) {  }}  }
class C{  @Override public BNetwork reduce(Query.ReduceQuery query){  BNetwork network=query.getNetwork();  Collection<String> queryVars=query.getQueryVars();  DoubleFactor queryFactor=createQueryFactor(query);  BNetwork reduced=new BNetwork();  List<String> sortedNodesIds=network.getSortedNodesIds();  sortedNodesIds.retainAll(queryVars);  Collections.reverse(sortedNodesIds);  for (  String var : sortedNodesIds) {    Set<String> directAncestors=network.getNode(var).getAncestorsIds(queryVars);    DoubleFactor factor=getRelevantFactor(queryFactor,var,directAncestors);    ProbDistribution distrib=createProbDistribution(var,factor);    ChanceNode cn=new ChanceNode(var,distrib);    for (    String ancestor : directAncestors) {      cn.addInputNode(reduced.getNode(ancestor));    }    reduced.addNode(cn);  }  return reduced;}  }
class C{  public static boolean loadDriver(String driverClassName){  try {    Class.forName(driverClassName).newInstance();    return true;  } catch (  ClassNotFoundException e) {    return false;  }catch (  IllegalAccessException e) {    return true;  }catch (  InstantiationException e) {    return false;  }catch (  Throwable e) {    return false;  }}  }
class C{  public static void clear(){  if (mCachePool != null) {    WeakCache c=null;    WeakReference<Object> weakObj=null;    Object cacheObj=null;    for (    String key : mCachePool.keySet()) {      c=mCachePool.get(key);      if (c != null && c.mCache != null) {        for (        Object key2 : c.mCache.keySet()) {          weakObj=c.mCache.get(key2);          if (weakObj != null) {            cacheObj=weakObj.get();            if (cacheObj instanceof LuaCache.CacheableObject) {              ((LuaCache.CacheableObject)cacheObj).onCacheClear();            }          }        }        c.mCache.clear();      }    }    mCachePool.clear();  }}  }
class C{  public void addSearchTerm(String keyword){  seedKeywords.add(keyword);}  }
class C{  @Deprecated public void findNotesMetadataAsync(NoteFilter filter,int offset,int maxNotes,NotesMetadataResultSpec resultSpec,OnClientCallback<NotesMetadataList> callback){  AsyncReflector.execute(this,callback,"findNotesMetadata",filter,offset,maxNotes,resultSpec);}  }
class C{  public static boolean isValidLocation(final Location test,final boolean strictMode){  if (test == null) {    Log.w(TAG,"Invalid location: Location is null");    return false;  }  if (test.getLatitude() == 0 && test.getLongitude() == 0) {    Log.w(TAG,"Invalid location: only default values provided");    return false;  }  if (test.getLongitude() > 180 || test.getLongitude() < -180) {    Log.w(TAG,"Invalid longitude: " + test.getLongitude());    return false;  }  if (test.getLatitude() > 90 || test.getLatitude() < -90) {    Log.w(TAG,"Invalid latitude: " + test.getLatitude());    return false;  }  if (strictMode) {    final long tomorrow=System.currentTimeMillis() + GeometryUtils.MILLIS_PER_DAY;    if (test.getTime() < GeometryUtils.MIN_TIMESTAMP || test.getTime() > tomorrow) {      Log.w(TAG,"Invalid timestamp: either to old or more than one day in the future");      return false;    }    if ((test.hasAltitude()) && (test.getAltitude() < GeometryUtils.MIN_ALTITUDE || test.getAltitude() > MAX_ALTITUDE)) {      Log.w(TAG,"Altitude out-of-range [" + GeometryUtils.MIN_ALTITUDE + ".."+ MAX_ALTITUDE+ "]:"+ test.getAltitude());      return false;    }    if ((test.hasSpeed()) && (test.getSpeed() < GeometryUtils.MIN_SPEED || test.getSpeed() > GeometryUtils.MAX_SPEED)) {      Log.w(TAG,"Speed out-of-range [" + GeometryUtils.MIN_SPEED + ".."+ GeometryUtils.MAX_SPEED+ "]:"+ test.getSpeed());      return false;    }  }  return true;}  }
class C{  private static boolean eq(Object o1,Object o2){  return o1 == o2 || o1 != null && o1.equals(o2);}  }
class C{  public CompilerDirective create(String data,int startPosition,int endPosition) throws CompilerDirectiveFactoryUnsupportedDirectiveException, CompilerDirectiveFactorySyntaxException {  int directiveFirstChar=getDirectiveFirstChar(data,startPosition);  int directiveLastChar=getDirectiveLastChar(data,startPosition);  String directiveName=getName(data,directiveFirstChar);  String directiveItem=getItem(data,directiveFirstChar);  CompilerDirectiveType type=CompilerDirectiveType.getTypeByName(directiveName.toLowerCase());switch (type) {case DEFINE:    return new DefineDirective(directiveItem,directiveFirstChar,directiveLastChar);case UNDEFINE:  return new UndefineDirective(directiveItem,directiveFirstChar,directiveLastChar);case IF:return new IfDirective(directiveItem,directiveFirstChar,directiveLastChar);case IFDEF:return new IfDefDirective(directiveName,directiveItem,directiveFirstChar,directiveLastChar);case IFEND:return new IfEndDirective(directiveItem,directiveFirstChar,directiveLastChar);case ENDIF:return new EndIfDirective(directiveItem,directiveFirstChar,directiveLastChar);case ELSE:return new ElseDirective(directiveItem,directiveFirstChar,directiveLastChar);case INCLUDE:return new IncludeDirective(directiveItem,directiveFirstChar,directiveLastChar);case UNUSED:return new UnusedDirective(directiveFirstChar,directiveLastChar);default :throw new CompilerDirectiveFactoryUnsupportedDirectiveException("Not implemented directive name: " + directiveName);}}  }
class C{  public static byte[] fromBase64(String data){  if (data == null) {    return null;  }  int len=data.length();  assert (len % 4) == 0;  if (len == 0) {    return new byte[0];  }  char[] chars=new char[len];  data.getChars(0,len,chars,0);  int olen=3 * (len / 4);  if (chars[len - 2] == '=') {    --olen;  }  if (chars[len - 1] == '=') {    --olen;  }  byte[] bytes=new byte[olen];  int iidx=0;  int oidx=0;  while (iidx < len) {    int c0=base64Values[chars[iidx++] & 0xff];    int c1=base64Values[chars[iidx++] & 0xff];    int c2=base64Values[chars[iidx++] & 0xff];    int c3=base64Values[chars[iidx++] & 0xff];    int c24=(c0 << 18) | (c1 << 12) | (c2 << 6)| c3;    bytes[oidx++]=(byte)(c24 >> 16);    if (oidx == olen) {      break;    }    bytes[oidx++]=(byte)(c24 >> 8);    if (oidx == olen) {      break;    }    bytes[oidx++]=(byte)c24;  }  return bytes;}  }
class C{  public void addListener(final IFilterPanelListener<T> listener){  m_listeners.addListener(listener);}  }
class C{  @Override public void endWindow(){  for (  Map.Entry<V,ArrayList<K>> e : map.entrySet()) {    HashMap<V,ArrayList<K>> tuple=new HashMap<V,ArrayList<K>>(1);    tuple.put(e.getKey(),e.getValue());    index.emit(tuple);  }  map.clear();}  }
class C{  public void addElement(MarkData m){  insertElementAt(m,size());}  }
class C{  public Date parseMath(Date now,String val){  String math=null;  final DateMathParser p=new DateMathParser();  if (null != now)   p.setNow(now);  if (val.startsWith(NOW)) {    math=val.substring(NOW.length());  } else {    final int zz=val.indexOf(Z);    if (0 < zz) {      math=val.substring(zz + 1);      try {        p.setNow(parseDate(val.substring(0,zz + 1)));      } catch (      ParseException e) {        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Date in Date Math String:'" + val + '\'',e);      }    } else {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Date String:'" + val + '\'');    }  }  if (null == math || math.equals("")) {    return p.getNow();  }  try {    return p.parseMath(math);  } catch (  ParseException e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Invalid Date Math String:'" + val + '\'',e);  }}  }
class C{  public boolean isNoLib(){  return noLib;}  }
class C{  private void validateVatSupportEnabled(Organization organization) throws ValidationException {  if (organization.getDefinedVatRates().isEmpty()) {    ValidationException e=new ValidationException(ReasonEnum.VAT_NOT_SUPPORTED,null,null);    logger.logWarn(Log4jLogger.SYSTEM_LOG,e,LogMessageIdentifier.WARN_VAT_NOT_SUPPORTED);    throw e;  }}  }
class C{  private Object readResolve(){  return forName(name);}  }
class C{  public static OutputStream constructOutputStream(DataOutput out){  if (out instanceof OutputStream) {    return (OutputStream)out;  } else {    return new DataOutputOutputStream(out);  }}  }
class C{  public void register(String username,String password) throws XMPPException {  register(username,password,new HashMap<String,String>());}  }
class C{  public static Command createCommand(String command,NodeConfig node) throws AgentException {  return SimpleCommand.createCommand(command,node.getHost(),node.getPort(),node.getUser(),node.getPrivateKeyFile(),true);}  }
class C{  private boolean verifyExistingSourceProtectionPools(Volume srcVolume,VirtualPool vpool,String cgName){  List<Volume> sourceJournals=RPHelper.findExistingJournalsForCopy(dbClient,srcVolume.getConsistencyGroup(),srcVolume.getRpCopyName());  Volume sourceJournal=sourceJournals.get(0);  if (sourceJournal == null) {    _log.warn(String.format("No existing source journal found in CG [%s] for copy [%s], returning false",cgName,srcVolume.getRpCopyName()));    return false;  }  if (!verifyStoragePoolAvailability(vpool,srcVolume)) {    _log.warn(String.format("Unable to fully align placement with existing volumes in RecoverPoint consistency group %s.  " + "The storage pool %s used by an existing source volume cannot be used.",cgName,srcVolume.getPool()));    return false;  } else   if (!verifyStoragePoolAvailability(vpool,sourceJournal)) {    _log.warn(String.format("Unable to fully align placement with existing volumes in RecoverPoint consistency group %s.  " + "The storage pool %s used by an existing source journal volume cannot be used.",cgName,sourceJournal.getPool()));    return false;  }  Iterator<String> targetVolumes=srcVolume.getRpTargets().iterator();  while (targetVolumes.hasNext()) {    Volume targetVolume=dbClient.queryObject(Volume.class,URI.create(targetVolumes.next()));    if (!verifyTargetStoragePoolAvailability(targetVolume,vpool)) {      _log.warn(String.format("Unable to fully align placement with existing volumes in RecoverPoint consistency group %s.  " + "The storage pool %s used by an existing target volumes cannot be used.",cgName,targetVolume.getPool()));      return false;    }    List<Volume> targetJournals=RPHelper.findExistingJournalsForCopy(dbClient,targetVolume.getConsistencyGroup(),targetVolume.getRpCopyName());    Volume targetJournal=targetJournals.get(0);    if (targetJournal == null) {      _log.warn(String.format("No existing target journal found in CG [%s] for copy [%s], returning false",cgName,targetVolume.getRpCopyName()));      return false;    }    if (!verifyTargetStoragePoolAvailability(targetJournal,vpool)) {      _log.warn(String.format("Unable to fully align placement with existing volumes in RecoverPoint consistency group %s.  " + "The storage pool %s used by an existing target journal volume cannot be used.",cgName,targetJournal.getPool()));      return false;    }  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_4__INDEX_1:    setIndex_1(INDEX_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public void addFeature(IFeatureVector fv,int offset){  for (int i=0; i < fv.getNumActiveFeatures(); i++) {    idxList.add(fv.getIdx(i) + offset);  }  valList.addAll(Floats.asList(fv.getValues()));}  }
class C{  public VariableSizeHeap(){  super(Options.set,"Variable Size Heap","Should we shrink/grow the heap to adjust to application working set?",true);}  }
class C{  @Deprecated public static void divide(String name,double amount) throws UserDoesNotExistException, NoLoanPermittedException {  try {    divide(name,BigDecimal.valueOf(amount));  } catch (  ArithmeticException e) {    logger.log(Level.WARNING,"Failed to divide balance of " + name + " by "+ amount+ ": "+ e.getMessage(),e);  }}  }
class C{  protected boolean parseLog(final byte[] result) throws ProtocolException {  return checkOk(result);}  }
class C{  protected void doLog(Level level,String msg,String cls,String method,int lineno){  super.doLog(level,msg,cls,method,lineno);  append(m_DateFormat.format(new Date()) + " " + cls+ " "+ method+ m_LineFeed+ level+ ": "+ msg+ m_LineFeed);}  }
class C{  public static LatLon rhumbEndPosition(LatLon p,double rhumbAzimuthRadians,double pathLengthRadians){  if (p == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return rhumbEndPosition(p,Angle.fromRadians(rhumbAzimuthRadians),Angle.fromRadians(pathLengthRadians));}  }
class C{  public static Pair<AtomTypeCondition,TypeConditionAggregate> reduce(HyperGraph graph,Set<TypeCondition> bytype){  HGHandle typeHandle=null;  TypeConditionAggregate taggr=new TypeConditionAggregate();  for (  TypeCondition c : bytype) {    if (hg.isVar(c.getTypeReference())) {      taggr.watchTypeReference(c);      continue;    }    HGHandle th=null;    if (c.getTypeReference().get() instanceof Class<?>) {      th=graph.getTypeSystem().getTypeHandleIfDefined(c.getTypeReference().getClass());      if (th == null) {        taggr.watchTypeReference(c);        continue;      }    } else     th=(HGHandle)c.getTypeReference().get();    if (typeHandle != null) {      typeHandle=findMostSpecific(graph,typeHandle,th);      if (typeHandle == null)       return new Pair<AtomTypeCondition,TypeConditionAggregate>(new AtomTypeCondition((Ref<?>)null),taggr);    } else     typeHandle=th;  }  if (typeHandle != null)   return new Pair<AtomTypeCondition,TypeConditionAggregate>(new AtomTypeCondition(hg.constant(typeHandle)),taggr); else   return null;}  }
class C{  private void processDD(JCas aJCas,String text){  Pattern[] patterns=new Pattern[]{llDDPattern,llDDSymPattern};  for (  Pattern p : patterns) {    Matcher matcher=p.matcher(text);    while (matcher.find()) {      if (currencySymbols.contains(text.substring(matcher.start(1) - 1,matcher.start(1)))) {        getMonitor().info("Skipping coordinate as it is preceded by a currency symbol");        continue;      }      try {        Double lat;        Double lon;        if (!lonlat) {          lat=Double.parseDouble(matcher.group(1));          lon=Double.parseDouble(matcher.group(4));        } else {          lon=Double.parseDouble(matcher.group(1));          lat=Double.parseDouble(matcher.group(4));        }        addCoordinate(aJCas,matcher,lon,lat,"dd");      } catch (      NumberFormatException e) {        getMonitor().warn(COULD_NOT_PARSE,e);      }    }  }}  }
class C{  private void connectErrorMessagesInExceptionData(ExceptionSensorData exceptionSensorData){  ExceptionSensorData child=exceptionSensorData.getChild();  if (null != child) {    child.setErrorMessage(exceptionSensorData.getErrorMessage());    connectErrorMessagesInExceptionData(child);  }}  }
class C{  public static FilterResult excluded(String reason){  return new FilterResult(false,reason);}  }
class C{  protected synchronized void damage(Rectangle r){  if (r != null) {    validateWidth(r);    x=r.x - 1;    y=r.y;    width=r.width + 4;    height=r.height;    repaint();  }}  }
class C{  private void updateValidationMessagesForBusinessTransactions(Collection<BusinessTransactionDefinition> businessTransactions){  for (  BusinessTransactionDefinition businessTxDefinition : businessTransactions) {    if (isValid(businessTxDefinition)) {      hideMessage(businessTxDefinition);    } else {      showMessage(businessTxDefinition,getValidationErrorStates(businessTxDefinition));    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void handlePlan(CarrierPlan carrierPlan){  if (carrierPlan == null)   throw new IllegalStateException("carrierPlan is null and cannot be handled.");  route(carrierPlan);}  }
class C{  private static Date determineStartDate(VAlarm valarm,ICalComponent parent){  Trigger trigger=valarm.getTrigger();  if (trigger == null) {    return null;  }  Date triggerStart=trigger.getDate();  if (triggerStart != null) {    return triggerStart;  }  Duration triggerDuration=trigger.getDuration();  if (triggerDuration == null) {    return null;  }  if (parent == null) {    return null;  }  Related related=trigger.getRelated();  Date date=null;  if (related == Related.START) {    date=ValuedProperty.getValue(parent.getProperty(DateStart.class));  } else   if (related == Related.END) {    date=ValuedProperty.getValue(parent.getProperty(DateEnd.class));    if (date == null) {      Date dateStart=ValuedProperty.getValue(parent.getProperty(DateStart.class));      Duration duration=ValuedProperty.getValue(parent.getProperty(DurationProperty.class));      if (duration != null && dateStart != null) {        date=duration.add(dateStart);      }    }  }  return (date == null) ? null : triggerDuration.add(date);}  }
class C{  public RealBuffer apply(RealBuffer buffer){  float[] samples=buffer.getSamples();  apply(samples);  return buffer;}  }
class C{  public void testSetF23(){  boolean f23=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF23(f23);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F21-F28 since no command station defined");}  }
class C{  private boolean rollbackOtherTransaction(long startTs,TransactionService transactionService){  try {    transactionService.putUnlessExists(startTs,TransactionConstants.FAILED_COMMIT_TS);    return true;  } catch (  KeyAlreadyExistsException e) {    String msg="Two transactions tried to roll back someone else's request with start: " + startTs;    log.error("This isn't a bug but it should be very infrequent. " + msg,new TransactionFailedRetriableException(msg,e));    return false;  }}  }
class C{  public static FileShare addFileSystemDetails(StringSetMap filesystemInformation,FileShare filesystem) throws Exception {  for (  FileSystemObjectProperties filesystemObjectProp : FileSystemObjectProperties.values()) {    addFileSystemDetail1(filesystemInformation,filesystem,filesystemObjectProp);  }  return filesystem;}  }
class C{  public void execute(){  mRS.nScriptGroupExecute(getID(mRS));}  }
class C{  public Collection values(){  Collection vs=values;  return (vs != null ? vs : (values=new Values()));}  }
class C{  protected void sequence_CharacterEscapeSequence_Term(ISerializationContext context,CharacterEscapeSequence semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Uri remapUri(Uri uri){  return null;}  }
class C{  public RetrofitType(Type type){  if (type instanceof ParameterizedType && ((ParameterizedType)type).getRawType().equals(JSONAPIDocument.class)) {    initialize(((ParameterizedType)type).getActualTypeArguments()[0]);    isParentType=true;  } else {    initialize(type);  }}  }
class C{  public void init(ModeledAuthenticatedUser currentUser,ModeledUser user){  super.init(currentUser);  this.user=user;}  }
class C{  public final void testIPv4AddressWithContextAndResourceIdParameters(){  assertNotNull(Validators.iPv4Address(getContext(),android.R.string.cancel));}  }
class C{  public static void removeBuilderFromProject(IProject project,String builderId) throws CoreException {  IProjectDescription description=project.getDescription();  List<ICommand> builders=new ArrayList<ICommand>(Arrays.asList(description.getBuildSpec()));  Iterator<ICommand> iter=builders.iterator();  while (iter.hasNext()) {    ICommand curBuilder=iter.next();    if (curBuilder.getBuilderName().equals(builderId)) {      iter.remove();    }  }  description.setBuildSpec(builders.toArray(new ICommand[builders.size()]));  project.setDescription(description,null);}  }
class C{  @Nullable private UIManager.LookAndFeelInfo findLaf(@Nullable String className){  if (className == null) {    return null;  }  for (  UIManager.LookAndFeelInfo laf : myLaFs) {    if (Comparing.equal(laf.getClassName(),className)) {      return laf;    }  }  return null;}  }
class C{  @SuppressWarnings("rawtypes") private void processMoveInstruction(ExecutionContext ec) throws DMLRuntimeException {  if (input3 == null) {    Data srcData=ec.getVariable(input1.getName());    if (srcData == null)     throw new DMLRuntimeException("Unexpected error: could not find a data object for variable name:" + input1.getName() + ", while processing instruction "+ this.toString());    Data tgt=ec.removeVariable(input2.getName());    if (tgt != null && tgt instanceof MatrixObject) {      ec.cleanupMatrixObject((MatrixObject)tgt);    }    ec.setVariable(input2.getName(),srcData);    ec.removeVariable(input1.getName());  } else {    if (ec.getVariable(input1.getName()) == null)     throw new DMLRuntimeException("Unexpected error: could not find a data object for variable name:" + input1.getName() + ", while processing instruction "+ this.toString());    Object object=ec.getVariable(input1.getName());    if (input3.getName().equalsIgnoreCase("binaryblock")) {      boolean success=false;      success=((CacheableData)object).moveData(input2.getName(),input3.getName());      if (!success) {        throw new DMLRuntimeException("Failed to move var " + input1.getName() + " to file "+ input2.getName()+ ".");      }    } else     if (object instanceof MatrixObject)     throw new DMLRuntimeException("Unexpected formats while copying: from matrix blocks [" + ((MatrixObject)object).getNumRowsPerBlock() + ","+ ((MatrixObject)object).getNumColumnsPerBlock()+ "] to "+ input3.getName()); else     if (object instanceof FrameObject)     throw new DMLRuntimeException("Unexpected formats while copying: from fram object [" + ((FrameObject)object).getNumColumns() + ","+ ((FrameObject)object).getNumColumns()+ "] to "+ input3.getName());  }}  }
class C{  protected void paintComponent(Graphics g){  if (ui != null) {    super.paintComponent(g);  } else   if (isOpaque()) {    g.setColor(getBackground());    g.fillRect(0,0,getWidth(),getHeight());  }}  }
class C{  public static double[] performRegression(Matrix x,Matrix y,double[] weights,double ridge){  Matrix weightedIndependent=new Matrix(x.getRowDimension(),x.getColumnDimension());  Matrix weightedDependent=new Matrix(x.getRowDimension(),1);  for (int i=0; i < weights.length; i++) {    double sqrtWeight=Math.sqrt(weights[i]);    for (int j=0; j < x.getColumnDimension(); j++) {      weightedIndependent.set(i,j,x.get(i,j) * sqrtWeight);    }    weightedDependent.set(i,0,y.get(i,0) * sqrtWeight);  }  return performRegression(weightedIndependent,weightedDependent,ridge);}  }
class C{  public static void onItemChanged(RecyclerView recyclerView,int aroundPosition){  if (recyclerView.getLayoutManager() instanceof StaggeredGridLayoutManager) {    recyclerView.addOnScrollListener(new ScrollHack(aroundPosition));  } else {    throw new IllegalArgumentException("This method is to fix issues on StaggeredGridLayoutManager");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:12.928 -0500",hash_original_method="F6CF6D1723C677ECF3CA7B0D6EA7AC86",hash_generated_method="7F9EB34057262551D1EE998AFAFDF802") @Override public SSLEngineResult unwrap(ByteBuffer src,ByteBuffer[] dsts,int offset,int length) throws SSLException {  if (engine_was_shutteddown) {    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);  }  if ((src == null) || (dsts == null)) {    throw new IllegalStateException("Some of the input parameters are null");  }  if (!handshake_started) {    beginHandshake();  }  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);  }  if (src.remaining() < recordProtocol.getMinRecordSize()) {    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);  }  try {    src.mark();    int capacity=0;    for (int i=offset; i < offset + length; i++) {      if (dsts[i] == null) {        throw new IllegalStateException("Some of the input parameters are null");      }      if (dsts[i].isReadOnly()) {        throw new ReadOnlyBufferException();      }      capacity+=dsts[i].remaining();    }    if (capacity < recordProtocol.getDataSize(src.remaining())) {      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,getHandshakeStatus(),0,0);    }    recProtIS.setSourceBuffer(src);    int type=recordProtocol.unwrap();switch (type) {case ContentType.HANDSHAKE:case ContentType.CHANGE_CIPHER_SPEC:      if (handshakeProtocol.getStatus().equals(SSLEngineResult.HandshakeStatus.FINISHED)) {        session=recordProtocol.getSession();      }    break;case ContentType.APPLICATION_DATA:  break;case ContentType.ALERT:if (alertProtocol.isFatalAlert()) {  alertProtocol.setProcessed();  if (session != null) {    session.invalidate();  }  String description="Fatal alert received " + alertProtocol.getAlertDescription();  shutdown();  throw new SSLException(description);} else {  if (logger != null) {    logger.println("Warning allert has been received: " + alertProtocol.getAlertDescription());  }switch (alertProtocol.getDescriptionCode()) {case AlertProtocol.CLOSE_NOTIFY:    alertProtocol.setProcessed();  close_notify_was_received=true;if (!close_notify_was_sent) {  closeOutbound();  closeInbound();} else {  closeInbound();  shutdown();}break;case AlertProtocol.NO_RENEGOTIATION:alertProtocol.setProcessed();if (session == null) {throw new AlertException(AlertProtocol.HANDSHAKE_FAILURE,new SSLHandshakeException("Received no_renegotiation " + "during the initial handshake"));} else {handshakeProtocol.stop();}break;default :alertProtocol.setProcessed();}}break;}return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),recProtIS.consumed(),appData.placeTo(dsts,offset,length));} catch (BufferUnderflowException e) {src.reset();return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);}catch (AlertException e) {alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());engine_was_closed=true;src.reset();if (session != null) {session.invalidate();}throw e.getReason();}catch (SSLException e) {throw e;}catch (IOException e) {alertProtocol.alert(AlertProtocol.FATAL,AlertProtocol.INTERNAL_ERROR);engine_was_closed=true;throw new SSLException(e.getMessage());}}  }
class C{  public Response addUserToGroup(String username,String groupName){  return restClient.post("users/" + username + "/groups/"+ groupName,null,new HashMap<String,String>());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.790 -0500",hash_original_method="C5023085042082F0979BC336BA173BAC",hash_generated_method="C3B88D2CC4B9D570E2335D0B2FEE75D3") public void reset(int valueCount,int frameCount){  mValueCount=valueCount;  mFrameCount=frameCount;  nativeReset(native_instance,valueCount,frameCount);}  }
class C{  public static void i(String msg){  if (DEBUG)   android.util.Log.i(TAG,buildMessage(msg));}  }
class C{  static void putTarget(int typeRef,TypePath typePath,ByteVector out){switch (typeRef >>> 24) {case 0x00:case 0x01:case 0x16:    out.putShort(typeRef >>> 16);  break;case 0x13:case 0x14:case 0x15:out.putByte(typeRef >>> 24);break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:out.putInt(typeRef);break;default :out.put12(typeRef >>> 24,(typeRef & 0xFFFF00) >> 8);break;}if (typePath == null) {out.putByte(0);} else {int length=typePath.b[typePath.offset] * 2 + 1;out.putByteArray(typePath.b,typePath.offset,length);}}  }
class C{  public static boolean hasPermission(CordovaPlugin plugin,String permission){  try {    Method hasPermission=CordovaInterface.class.getDeclaredMethod("hasPermission",String.class);    return (Boolean)hasPermission.invoke(plugin.cordova,permission);  } catch (  NoSuchMethodException noSuchMethodException) {    LOG.d(LOG_TAG,"No need to check for permission " + permission);    return true;  }catch (  IllegalAccessException illegalAccessException) {    LOG.e(LOG_TAG,"IllegalAccessException when checking permission " + permission,illegalAccessException);  }catch (  InvocationTargetException invocationTargetException) {    LOG.e(LOG_TAG,"invocationTargetException when checking permission " + permission,invocationTargetException);  }  return false;}  }
class C{  static boolean deleteFile(@NonNull final File file){  boolean fileDelete=rmFile(file);  if (file.delete() || fileDelete) {    return true;  }  if (Helper.isAtLeastAPI(LOLLIPOP)) {    DocumentFile document=getDocumentFile(file,false);    if (document != null) {      return document.delete();    }  }  return !file.exists();}  }
class C{  public boolean isSetStore(){  return this.store != null;}  }
class C{  protected void showRSSEntry(Hashtable h){  Form newForm=null;  if (targetContainer != null) {    if (targetContainer instanceof Form) {      newForm=(Form)targetContainer;    } else {      newForm=new Form((String)h.get("title"));      newForm.setLayout(new BorderLayout());      newForm.addComponent(BorderLayout.CENTER,targetContainer);    }    updateComponentValues(newForm,h);  } else {    newForm=new Form((String)h.get("title"));    newForm.setScrollable(false);    WebBrowser c=new WebBrowser();    String s=(String)h.get("description");    s="<html><body>" + s + "</body></html>";    c.setPage(s,null);    newForm.setLayout(new BorderLayout());    newForm.addComponent(BorderLayout.CENTER,c);  }  if (addBackToTaget) {    final Form sourceForm=Display.getInstance().getCurrent();    Command back=new BackCommand(sourceForm);    newForm.addCommand(back);    newForm.setBackCommand(back);  }  newForm.show();}  }
class C{  public RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState){  this.includeGlobalState=includeGlobalState;  return this;}  }
class C{  public boolean contains(Sector that){  if (that == null)   return false;  if (that.minLongitude.degrees < this.minLongitude.degrees)   return false;  if (that.maxLongitude.degrees > this.maxLongitude.degrees)   return false;  if (that.minLatitude.degrees < this.minLatitude.degrees)   return false;  if (that.maxLatitude.degrees > this.maxLatitude.degrees)   return false;  return true;}  }
class C{  private void handleError(String errorMessage,String errorTitle){  JOptionPane.showMessageDialog(this,errorMessage,errorTitle,JOptionPane.ERROR_MESSAGE);  if (getOwner() != null) {    setVisible(false);    getOwner().setEnabled(true);    dispose();  } else {    System.exit(1);  }}  }
class C{  private void clearMessages(){  animationHandler.removeMessages(MESSAGE_SCROLL);  animationHandler.removeMessages(MESSAGE_JUSTIFY);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + String.valueOf(progress)+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized void arcTo(float rx,float ry,float angle,boolean largeArcFlag,boolean sweepFlag,float x,float y){  if (rx == 0 || ry == 0) {    lineTo(x,y);    return;  }  checkMoveTo();  double x0=cx;  double y0=cy;  if (x0 == x && y0 == y) {    return;  }  Arc2D arc=computeArc(x0,y0,rx,ry,angle,largeArcFlag,sweepFlag,x,y);  if (arc == null)   return;  AffineTransform t=AffineTransform.getRotateInstance(Math.toRadians(angle),arc.getCenterX(),arc.getCenterY());  Shape s=t.createTransformedShape(arc);  path.append(s,true);  makeRoom(7);  types[numSeg++]=ExtendedPathIterator.SEG_ARCTO;  values[numVals++]=rx;  values[numVals++]=ry;  values[numVals++]=angle;  values[numVals++]=largeArcFlag ? 1 : 0;  values[numVals++]=sweepFlag ? 1 : 0;  cx=values[numVals++]=x;  cy=values[numVals++]=y;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.761 -0500",hash_original_method="F26DF600BAA1C269DA55D89F10A0C288",hash_generated_method="DCA866CF6051ABCF94E32379CF95396C") public void info(Object message){  log(Level.INFO,String.valueOf(message),null);}  }
class C{  public boolean isMultivalor(){  return multivalor;}  }
class C{  static Object doStrictFloorDiv(int x,int y){  try {    return StrictMath.floorDiv(x,y);  } catch (  ArithmeticException ae) {    return ae;  }}  }
class C{  public File makeFileForForm(){  return new File(Collect.getInstance().getFormsPath() + File.separator + uuid+ ".xml");}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PROPERTY_SETTER_DECLARATION___GET_DEFINED_SETTER:    return getDefinedSetter();case N4JSPackage.PROPERTY_SETTER_DECLARATION___GET_DEFINED_MEMBER:  return getDefinedMember();case N4JSPackage.PROPERTY_SETTER_DECLARATION___IS_VALID_NAME:return isValidName();case N4JSPackage.PROPERTY_SETTER_DECLARATION___GET_ANNOTATIONS:return getAnnotations();}return super.eInvoke(operationID,arguments);}  }
class C{  public StackedBarRenderer3D(double xOffset,double yOffset){  super(xOffset,yOffset);}  }
class C{  protected void buildComposite(BridgeContext ctx,Element e,CompositeGraphicsNode parentNode){  for (Node n=e.getFirstChild(); n != null; n=n.getNextSibling()) {    if (n.getNodeType() == Node.ELEMENT_NODE) {      buildGraphicsNode(ctx,(Element)n,parentNode);    }  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isIpMuted(final String ip){  final long muteTill=getIpUnmuteTime(ip);  return muteTill > System.currentTimeMillis();}  }
class C{  @Override public String toString(){  long nanos=elapsedNanos();  TimeUnit unit=chooseUnit(nanos);  double value=(double)nanos / NANOSECONDS.convert(1,unit);  return Platform.formatCompact4Digits(value) + " " + abbreviate(unit);}  }
class C{  public SBX(double probability,double distributionIndex){  this(probability,distributionIndex,true,false);}  }
class C{  public static MethodBinding computeCompatibleMethod(MethodBinding originalMethod,TypeBinding[] arguments,Scope scope,InvocationSite invocationSite){  ParameterizedGenericMethodBinding methodSubstitute;  TypeVariableBinding[] typeVariables=originalMethod.typeVariables;  TypeBinding[] substitutes=invocationSite.genericTypeArguments();  InferenceContext inferenceContext=null;  TypeBinding[] uncheckedArguments=null;  computeSubstitutes: {    if (substitutes != null) {      if (substitutes.length != typeVariables.length) {        return new ProblemMethodBinding(originalMethod,originalMethod.selector,substitutes,ProblemReasons.TypeParameterArityMismatch);      }      methodSubstitute=scope.environment().createParameterizedGenericMethod(originalMethod,substitutes);      break computeSubstitutes;    }    TypeBinding[] parameters=originalMethod.parameters;    inferenceContext=new InferenceContext(originalMethod);    methodSubstitute=inferFromArgumentTypes(scope,originalMethod,arguments,parameters,inferenceContext);    if (methodSubstitute == null)     return null;    if (inferenceContext.hasUnresolvedTypeArgument()) {      if (inferenceContext.isUnchecked) {        int length=inferenceContext.substitutes.length;        System.arraycopy(inferenceContext.substitutes,0,uncheckedArguments=new TypeBinding[length],0,length);      }      if (methodSubstitute.returnType != TypeBinding.VOID) {        TypeBinding expectedType=invocationSite.expectedType();        if (expectedType != null) {          inferenceContext.hasExplicitExpectedType=true;        } else {          expectedType=scope.getJavaLangObject();        }        inferenceContext.expectedType=expectedType;      }      methodSubstitute=methodSubstitute.inferFromExpectedType(scope,inferenceContext);      if (methodSubstitute == null)       return null;    }  }  Substitution substitution=null;  if (inferenceContext != null) {    substitution=new LingeringTypeVariableEliminator(typeVariables,inferenceContext.substitutes,scope);  } else {    substitution=methodSubstitute;  }  for (int i=0, length=typeVariables.length; i < length; i++) {    TypeVariableBinding typeVariable=typeVariables[i];    TypeBinding substitute=methodSubstitute.typeArguments[i];    TypeBinding substituteForChecks=Scope.substitute(new LingeringTypeVariableEliminator(typeVariables,null,scope),substitute);    if (uncheckedArguments != null && uncheckedArguments[i] == null)     continue;switch (typeVariable.boundCheck(substitution,substituteForChecks)) {case TypeConstants.MISMATCH:      int argLength=arguments.length;    TypeBinding[] augmentedArguments=new TypeBinding[argLength + 2];  System.arraycopy(arguments,0,augmentedArguments,0,argLength);augmentedArguments[argLength]=substitute;augmentedArguments[argLength + 1]=typeVariable;return new ProblemMethodBinding(methodSubstitute,originalMethod.selector,augmentedArguments,ProblemReasons.ParameterBoundMismatch);case TypeConstants.UNCHECKED:methodSubstitute.tagBits|=TagBits.HasUncheckedTypeArgumentForBoundCheck;break;}}return methodSubstitute;}  }
class C{  private void subscriptionUpdate(){  Sensision.update(SensisionConstants.SENSISION_CLASS_PLASMA_BACKEND_SUBSCRIPTIONS_UPDATES,Sensision.EMPTY_LABELS,1);  List<String> entries=null;  try {    entries=this.curatorFramework.getChildren().forPath(properties.getProperty(io.warp10.continuum.Configuration.PLASMA_BACKEND_SUBSCRIPTIONS_ZNODE));  } catch (  Exception e) {    e.printStackTrace();  }  if (null == entries) {    return;  }  Map<String,Set<BigInteger>> subsbytopic=new HashMap<String,Set<BigInteger>>();  for (  String entry : entries) {    try {      String[] tokens=entry.split("\\.");      UUID uuid=UUID.fromString(tokens[1]);      String topic=tokens[2];      long hash=new BigInteger(tokens[4],16).longValue();      String path=properties.getProperty(io.warp10.continuum.Configuration.PLASMA_BACKEND_SUBSCRIPTIONS_ZNODE) + "/" + entry;      byte[] content=this.curatorFramework.getData().forPath(path);      long sip=SipHashInline.hash24(uuid.getMostSignificantBits(),uuid.getLeastSignificantBits(),content,0,content.length);      if (hash != sip) {        Map<String,String> labels=new HashMap<String,String>();        labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,topic);        Sensision.update(SensisionConstants.SENSISION_CLASS_PLASMA_BACKEND_SUBSCRIPTIONS_INVALID_HASHES,labels,1);        continue;      }      Set<BigInteger> subs=subsbytopic.get(topic);      if (null == subs) {        subs=new HashSet<BigInteger>();        subsbytopic.put(topic,subs);      }      byte[] bytes=new byte[16];      for (int i=0; i < content.length; i+=16) {        System.arraycopy(content,i,bytes,0,16);        BigInteger id=new BigInteger(bytes);        subs.add(id);      }    } catch (    Exception e) {      e.printStackTrace();    }  }  for (  String topic : subsbytopic.keySet()) {    Map<String,String> labels=new HashMap<String,String>();    labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,topic);    Sensision.set(SensisionConstants.SENSISION_CLASS_PLASMA_BACKEND_SUBSCRIPTIONS,labels,subsbytopic.get(topic).size());  }  if (null != this.subscriptions) {    for (    String topic : this.subscriptions.keySet()) {      if (!subsbytopic.containsKey(topic)) {        Map<String,String> labels=new HashMap<String,String>();        labels.put(SensisionConstants.SENSISION_LABEL_TOPIC,topic);        Sensision.set(SensisionConstants.SENSISION_CLASS_PLASMA_BACKEND_SUBSCRIPTIONS,labels,0);      }    }  }  this.subscriptions=subsbytopic.isEmpty() ? null : subsbytopic;}  }
class C{  public RunOnDevice(String helpResource){  initComponents();  try {    help.setPage(getClass().getResource(helpResource));  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  public void finish(String footer){  m_bias=0;  m_out.print(footer);  m_out.flush();}  }
class C{  public static LatLon fromRadians(double latitude,double longitude){  return new LatLon(Math.toDegrees(latitude),Math.toDegrees(longitude));}  }
class C{  public ProviderInfo(){  m_iProviderID=0;  m_sName="";}  }
class C{  public THLBinaryEvent(long seqno,short fragno,boolean lastFrag,byte[] data){  this.seqno=seqno;  this.fragno=fragno;  this.lastFrag=lastFrag;  this.data=data;}  }
class C{  public static Object[] findMethodWithListParameters(Object service,String methodName,List<?> args){  Object[] arguments=new Object[args.size()];  for (int i=0; i < args.size(); i++) {    arguments[i]=args.get(i);  }  return findMethodWithListParameters(service,methodName,arguments);}  }
class C{  protected void doDeleteWithPostTest(final RDFFormat format) throws Exception {  doInsertWithBodyTest("POST",23,format);  assertEquals(23,countAll());  doDeleteWithBody(23,format);  assertEquals(0,countAll());}  }
class C{  public ToStringBuilder(final Object object,ToStringStyle style,StringBuffer buffer){  if (style == null) {    style=getDefaultStyle();  }  if (buffer == null) {    buffer=new StringBuffer(512);  }  this.buffer=buffer;  this.style=style;  this.object=object;  style.appendStart(buffer,object);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.130 -0500",hash_original_method="720FA5A94E3C004CE3F70B83E46D48C3",hash_generated_method="2FEE2CEB69723C8302E4C3B639633353") public View findNearestTouchable(ViewGroup root,int x,int y,int direction,int[] deltas){  ArrayList<View> touchables=root.getTouchables();  int minDistance=Integer.MAX_VALUE;  View closest=null;  int numTouchables=touchables.size();  int edgeSlop=ViewConfiguration.get(root.mContext).getScaledEdgeSlop();  Rect closestBounds=new Rect();  Rect touchableBounds=mOtherRect;  for (int i=0; i < numTouchables; i++) {    View touchable=touchables.get(i);    touchable.getDrawingRect(touchableBounds);    root.offsetRectBetweenParentAndChild(touchable,touchableBounds,true,true);    if (!isTouchCandidate(x,y,touchableBounds,direction)) {      continue;    }    int distance=Integer.MAX_VALUE;switch (direction) {case View.FOCUS_LEFT:      distance=x - touchableBounds.right + 1;    break;case View.FOCUS_RIGHT:  distance=touchableBounds.left;break;case View.FOCUS_UP:distance=y - touchableBounds.bottom + 1;break;case View.FOCUS_DOWN:distance=touchableBounds.top;break;}if (distance < edgeSlop) {if (closest == null || closestBounds.contains(touchableBounds) || (!touchableBounds.contains(closestBounds) && distance < minDistance)) {minDistance=distance;closest=touchable;closestBounds.set(touchableBounds);switch (direction) {case View.FOCUS_LEFT:deltas[0]=-distance;break;case View.FOCUS_RIGHT:deltas[0]=distance;break;case View.FOCUS_UP:deltas[1]=-distance;break;case View.FOCUS_DOWN:deltas[1]=distance;break;}}}}return closest;}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  protected static void clearStaticSSLContext(){  ServerSocketFactory defaultServerFact=SSLServerSocketFactory.getDefault();  Map<Field,Object> contextMap=getSSLFields(defaultServerFact,new Class[]{SSLContext.class,SSLContextSpi.class});  makeNullSSLFields(defaultServerFact,contextMap);  for (Iterator contextObjsIter=contextMap.values().iterator(); contextObjsIter.hasNext(); ) {    Object contextObj=contextObjsIter.next();    Map<Field,Object> contextObjsMap=getSSLFields(contextObj,new Class[]{TrustManager.class,KeyManager.class,TrustManager[].class,KeyManager[].class});    makeNullSSLFields(contextObj,contextObjsMap);  }  makeNullStaticField(SSLServerSocketFactory.class);  SocketFactory defaultFact=SSLSocketFactory.getDefault();  contextMap=getSSLFields(defaultFact,new Class[]{SSLContext.class,SSLContextSpi.class});  makeNullSSLFields(defaultFact,contextMap);  for (Iterator contextObjsIter=contextMap.values().iterator(); contextObjsIter.hasNext(); ) {    Object contextObj=contextObjsIter.next();    Map<Field,Object> contextObjsMap=getSSLFields(contextObj,new Class[]{TrustManager.class,KeyManager.class,TrustManager[].class,KeyManager[].class});    makeNullSSLFields(contextObj,contextObjsMap);  }  makeNullStaticField(SSLSocketFactory.class);  makeNullStaticField(SSLContext.class);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public synchronized void storeDataSourceConfig(String clusterName,TungstenProperties ds) throws ConfigurationException {  storeResourceConfig(clusterName,ResourceType.DATASOURCE,ds);}  }
class C{  private void checkIfDirectoriesExist(File[] diskDirs){  for (int i=0; i < diskDirs.length; i++) {    if (!diskDirs[i].isDirectory()) {      throw new IllegalArgumentException(LocalizedStrings.RegionAttributesCreation__0_WAS_NOT_AN_EXISTING_DIRECTORY.toLocalizedString(diskDirs[i]));    }  }}  }
class C{  public VNXeCommandJob restoreLunGroupSnap(String snapId,VNXeSnapRestoreParam restoreParam) throws VNXeException {  StringBuilder urlBuilder=new StringBuilder(URL_INSTANCE);  urlBuilder.append(snapId);  urlBuilder.append(URL_RESTORE);  _url=urlBuilder.toString();  return postRequestAsync(restoreParam);}  }
class C{  private CNodesDisplayString(){}  }
class C{  public Button findCommandComponent(Command c){  Button b=findCommandComponent(c,this);  if (b == null) {    return findCommandComponent(c,getTitleAreaContainer());  }  return b;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void scrollToSectionAddress(final Section section,final long address){  sections.setSelectedItem(section);  hexView.gotoOffset(address - section.getStartAddress().toLong());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.305 -0400",hash_original_method="15EB03FA0194F74DE4425326F21E5173",hash_generated_method="C5FCD57BCC48D6AB7F2665345C0A88DA") protected TextAttribute(String name){  super(name);}  }
class C{  public void addLayoutCallback(LayoutCallback callback){  if (callback == null)   throw new NullPointerException();  if (callbackList == null)   callbackList=new ArrayList<LayoutCallback>(1);  callbackList.add(callback);}  }
class C{  public void testMac04() throws NoSuchAlgorithmException, IllegalArgumentException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  try {    Mac.getInstance(null,defaultProviderName);    fail("NullPointerException or NoSuchAlgorithmException should be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      Mac.getInstance(invalidValues[i],defaultProviderName);      fail("NoSuchAlgorithmException must be throws when algorithm is not available: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  protected TypeDefsImpl(){  super();}  }
class C{  public static void encode(long v,OutputStream stream) throws IOException {  do {    long bits=v & 0x7F;    v>>>=7;    byte b=(byte)(bits | ((v != 0) ? 0x80 : 0));    stream.write(b);  } while (v != 0);}  }
class C{  @LargeTest public void testTouchScrolling(){  Instrumentation inst=getInstrumentation();  int firstVisiblePosition=touchScroll(inst);  inst.sendCharacterSync(KeyEvent.KEYCODE_BACK);  inst.waitForIdleSync();  assertTrue("List not in touch mode",mListView.isInTouchMode());  assertTrue("List did not preserve scroll position",firstVisiblePosition == mListView.getFirstVisiblePosition());}  }
class C{  public Throwable initCause(Throwable cause){  super.initCause(cause);  setRootCause(cause);  return this;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:22.445 -0500",hash_original_method="87C78188301D65B3202299E6E894F1D3",hash_generated_method="87C78188301D65B3202299E6E894F1D3") RtpStream(InetAddress address) throws SocketException {  mLocalPort=create(address.getHostAddress());  mLocalAddress=address;}  }
class C{  public final boolean isFocusDimmerUsed(){  return mUseFocusDimmer;}  }
class C{  public static org.oscm.internal.vo.VOTag convertToUp(org.oscm.vo.VOTag oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOTag newVO=new org.oscm.internal.vo.VOTag();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setLocale(oldVO.getLocale());  newVO.setValue(oldVO.getValue());  newVO.setNumberReferences(oldVO.getNumberReferences());  return newVO;}  }
class C{  private Object execute0(PlatformContext ctx,MutableEntry entry) throws IgniteCheckedException {  try (PlatformMemory outMem=ctx.memory().allocate()){    PlatformOutputStream out=outMem.output();    BinaryRawWriterEx writer=ctx.writer(out);    writeEntryAndProcessor(entry,writer);    out.synchronize();    try (PlatformMemory inMem=ctx.memory().allocate()){      PlatformInputStream in=inMem.input();      ctx.gateway().cacheInvoke(outMem.pointer(),inMem.pointer());      in.synchronize();      BinaryRawReaderEx reader=ctx.reader(in);      return readResultAndUpdateEntry(ctx,entry,reader);    }   } }  }
class C{  public SolrCore fetchBestCoreByHealthForReplica(String core){  return coreToBestReplicaMappingByHealth.get(core);}  }
class C{  public GreaterConstraint(int constraintValue){  super(Integer.valueOf(constraintValue));}  }
class C{  @Override public ConnectionConsumer createConnectionConsumer(final Queue queue,final String messageSelector,final ServerSessionPool sessionPool,final int maxMessages) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createConnectionConsumer(" + queue + ", "+ messageSelector+ ", "+ sessionPool+ ", "+ maxMessages+ ")");  }  throw new IllegalStateException(ISE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.741 -0500",hash_original_method="9926DEDCE0AD57538A98733BEC1EBC43",hash_generated_method="C6FE64D8EC648CFC28775D65084A39F7") public Reader retrieveArticle(String articleId) throws IOException {  return retrieveArticle(articleId,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(isSupported02.class,args);}  }
class C{  private void initialize(){  this.setSize(288,133);  this.setTitle("Change password for user");  this.setContentPane(getJContentPane());}  }
class C{  public UGraphic[] packGraphics(){  UGraphic retval[]=new UGraphic[graphics.size()];  for (int i=0; i < graphics.size(); i++) {    Object o=graphics.elementAt(i);    if (o instanceof SGraphic) {      retval[i]=((SGraphic)o).ufill();    } else {      retval[i]=(UGraphic)o;    }  }  return retval;}  }
class C{  public boolean isExternal(){  EList<N4Modifier> _declaredModifiers=this.getDeclaredModifiers();  return _declaredModifiers.contains(N4Modifier.EXTERNAL);}  }
class C{  public static Input composite(File... files){  if (files.length == 0)   return NullInput.INSTANCE;  if (files.length == 1)   return new FileInput(files[0]);  return new CompositeInput(multiple(files));}  }
class C{  private void writeComment(OutputNode node) throws Exception {  String comment=node.getComment();  if (comment != null) {    writer.writeComment(comment);  }}  }
class C{  public boolean isUrlSafe(){  return this.encodeTable == URL_SAFE_ENCODE_TABLE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:40.148 -0500",hash_original_method="A962F701648C4B4117BD0A815ABD46EE",hash_generated_method="C5959FD7F403B73D5FB2665135675C08") public ContentValues resolveValueBackReferences(ContentProviderResult[] backRefs,int numBackRefs){  if (mValuesBackReferences == null) {    return mValues;  }  final ContentValues values;  if (mValues == null) {    values=new ContentValues();  } else {    values=new ContentValues(mValues);  }  for (  Map.Entry<String,Object> entry : mValuesBackReferences.valueSet()) {    String key=entry.getKey();    Integer backRefIndex=mValuesBackReferences.getAsInteger(key);    if (backRefIndex == null) {      Log.e(TAG,this.toString());      throw new IllegalArgumentException("values backref " + key + " is not an integer");    }    values.put(key,backRefToValue(backRefs,numBackRefs,backRefIndex));  }  return values;}  }
class C{  public ResourceLineage(ResourceLineage sharedLineage,PersistentResource next,String nextAlias){  resourceMap=new LinkedMap<>(sharedLineage.resourceMap);  addRecord(next,nextAlias);}  }
class C{  public void excluir(int idEstratigrafia){  try {    String sql="DELETE FROM tb_estratigrafia WHERE id_estratigrafia = ? ";    stm=conector.prepareStatement(sql);    stm.setInt(1,idEstratigrafia);    stm.execute();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao excluir na base de dados estratigrafias! \n" + ex);  }}  }
class C{  private static InputStreamReader readXMLFile(final String archivePath){  try {    return new InputStreamReader(new FileInputStream(archivePath),WIKIPEDIA_ENCODING);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public MultipartEncoder(OutputStream out,String topBoundary){  this.out=out;  this.topBoundary=topBoundary;  parts.add(topBoundary);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  protected SimpleLiteral(String label,IRI datatype){  setLabel(label);  if (RDF.LANGSTRING.equals(datatype)) {    throw new IllegalArgumentException("datatype rdf:langString requires a language tag");  } else   if (datatype == null) {    datatype=XMLSchema.STRING;  }  setDatatype(datatype);}  }
class C{  public InterruptedNamingException(){  super();}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  protected Alert(){  super(null);}  }
class C{  private int findInsertionPoint(SortedListEntry entry){  int insertionPoint=sortedModel.size();  if (sortOrder != SortOrder.UNORDERED) {    insertionPoint=Collections.binarySearch((List)sortedModel,entry);    if (insertionPoint < 0) {      insertionPoint=-(insertionPoint + 1);    }  }  return insertionPoint;}  }
class C{  private Bitmap loadContactPhotoThumbnail(String photoData,int imageSize){  if (!isAdded() || getActivity() == null) {    return null;  }  AssetFileDescriptor afd=null;  try {    Uri thumbUri;    if (Utils.hasHoneycomb()) {      thumbUri=Uri.parse(photoData);    } else {      final Uri contactUri=Uri.withAppendedPath(Contacts.CONTENT_URI,photoData);      thumbUri=Uri.withAppendedPath(contactUri,Photo.CONTENT_DIRECTORY);    }    afd=getActivity().getContentResolver().openAssetFileDescriptor(thumbUri,"r");    FileDescriptor fileDescriptor=afd.getFileDescriptor();    if (fileDescriptor != null) {      return ImageLoader.decodeSampledBitmapFromDescriptor(fileDescriptor,imageSize,imageSize);    }  } catch (  FileNotFoundException e) {  } finally {    if (afd != null) {      try {        afd.close();      } catch (      IOException e) {      }    }  }  return null;}  }
class C{  public void initActions(){  initShortPressAction();  initLongPressAction();}  }
class C{  protected Object[] argsWithReceiver(Object receiver,Object... args){  Object[] executeArgs;  if (receiver == null) {    executeArgs=args;  } else {    executeArgs=new Object[args.length + 1];    executeArgs[0]=receiver;    for (int i=0; i < args.length; i++) {      executeArgs[i + 1]=args[i];    }  }  return applyArgSuppliers(executeArgs);}  }
class C{  @Nullable private static BinaryContext pushContext(BinaryContext ctx){  BinaryContext old=BINARY_CTX.get();  BINARY_CTX.set(ctx);  return old;}  }
class C{  private Map<String,String> parseURL(HttpServletRequest req){  Map<String,String> reqParams=new HashMap<String,String>();  String path=req.getServletPath();  if (path != null) {    String[] paths=path.split("/");    if (paths.length > 2) {      reqParams.put(Constants.URL_PATH_CMD,paths[2]);      if (paths.length > 3)       reqParams.put(Constants.URL_PATH_DBGROUP,paths[3]);      if (paths.length > 4)       reqParams.put(Constants.URL_PATH_DBHOST,paths[4]);      if (paths.length > 5)       reqParams.put(Constants.URL_PATH_METRICS,paths[5]);      if (paths.length > 6)       reqParams.put(Constants.URL_PATH_START_TS,paths[6]);      if (paths.length > 7)       reqParams.put(Constants.URL_PATH_END_TS,paths[7]);    }  }  return reqParams;}  }
class C{  public static String createAlias(String columnPath){  String[] columnPathElements=columnPath.split("\\.|\\<|\\>|\\/|\\:");  int lastElement=columnPathElements.length - 1;  String propertyId;  String message;  try {    propertyId=columnPathElements[lastElement];    String element=columnPathElements[lastElement - 1];    LOG.debug(columnPath);    LOG.debug("Element:" + columnPathElements[lastElement - 1]);    LOG.debug("Property:" + propertyId);    if (columnPath.contains(LinkTableOperationType.RELATION.getOutput())) {      message=LinkTableUtil.getCnaLinkPropertyMessage(propertyId);    } else {      message=loader.getLabel(propertyId) + " (" + loader.getLabel(element)+ ")";    }  } catch (  IndexOutOfBoundsException e) {    LOG.warn("String-split did not work, using old way",e);    int propertyBeginning=columnPath.lastIndexOf(LinkTableOperationType.PROPERTY.getOutput());    propertyId=columnPath.substring(propertyBeginning + 1);    if (columnPath.contains(":")) {      message=LinkTableUtil.getCnaLinkPropertyMessage(propertyId);    } else {      message=loader.getLabel(propertyId);    }  }  message=StringUtils.replaceEachRepeatedly(message,new String[]{"/",":",".","<",">"},new String[]{"","","","",""});  message=message.replaceAll(" ","_");  return columnPath + ALIAS_DELIMITER + message;}  }
class C{  @Transactional @SuppressWarnings("unchecked") public PersistedProteins insertNewProteins(Collection<Protein> newProteins){  PersistedProteins persistentProteins=new PersistedProteins();  if (newProteins.size() > 0) {    final List<String> newMd5s=new ArrayList<String>(newProteins.size());    for (    Protein newProtein : newProteins) {      newMd5s.add(newProtein.getMd5());      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("MD5 of new protein: " + newProtein.getMd5());      }    }    final Map<String,Protein> md5ToExistingProtein=new HashMap<String,Protein>();    final Query query=entityManager.createQuery("select p from Protein p left outer join fetch p.crossReferences where p.md5 in (:md5)");    query.setParameter("md5",newMd5s);    for (    Protein existingProtein : (List<Protein>)query.getResultList()) {      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Found 1 existing protein with MD5: " + existingProtein.getMd5());      }      md5ToExistingProtein.put(existingProtein.getMd5(),existingProtein);    }    for (    Protein candidate : newProteins) {      if (md5ToExistingProtein.keySet().contains(candidate.getMd5())) {        Protein existingProtein=md5ToExistingProtein.get(candidate.getMd5());        boolean updateRequired=false;        if (candidate.getCrossReferences() != null) {          if (LOGGER.isTraceEnabled()) {            LOGGER.trace("Protein TO BE STORED has xrefs:");          }          for (          ProteinXref xref : candidate.getCrossReferences()) {            if (LOGGER.isTraceEnabled()) {              LOGGER.trace(xref.getIdentifier());            }            if (!existingProtein.getCrossReferences().contains(xref)) {              if (LOGGER.isTraceEnabled()) {                LOGGER.trace("Adding " + xref.getIdentifier() + " and setting updateRequired = true");              }              existingProtein.addCrossReference(xref);              updateRequired=true;            }          }        }        if (updateRequired) {          if (LOGGER.isTraceEnabled()) {            LOGGER.trace("Merging protein with new Xrefs: " + existingProtein.getMd5());          }          entityManager.merge(existingProtein);        }        persistentProteins.addPreExistingProtein(existingProtein);      } else {        if (LOGGER.isTraceEnabled()) {          LOGGER.trace("Saving new protein: " + candidate.getMd5());        }        entityManager.persist(candidate);        persistentProteins.addNewProtein(candidate);        md5ToExistingProtein.put(candidate.getMd5(),candidate);      }    }  }  entityManager.flush();  return persistentProteins;}  }
class C{  public final double doOperation() throws OperatorFailedException {  int index;  if (updateMap == null) {    index=MathUtils.nextInt(parameter.getDimension());  } else {    index=updateMap.get(MathUtils.nextInt(updateMapSize));  }  double draw=(2.0 * MathUtils.nextDouble() - 1.0) * windowSize;  double newValue=parameter.getParameterValue(index) + draw;  final Bounds<Double> bounds=parameter.getBounds();  final double lower=(lowerOperatorBound == null ? bounds.getLowerLimit(index) : Math.max(bounds.getLowerLimit(index),lowerOperatorBound));  final double upper=(upperOperatorBound == null ? bounds.getUpperLimit(index) : Math.min(bounds.getUpperLimit(index),upperOperatorBound));  if (condition == BoundaryCondition.reflecting) {    newValue=reflectValue(newValue,lower,upper);  } else   if (condition == BoundaryCondition.absorbing && (newValue < lower || newValue > upper)) {    return 0.0;  } else   if (newValue < lower || newValue > upper) {    throw new OperatorFailedException("proposed value outside boundaries");  }  parameter.setParameterValue(index,newValue);  return 0.0;}  }
class C{  @Override public void addAttribute(String name,double value){  String str=Double.toString(value);  if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2);  current.setAttribute(name,str);}  }
class C{  public Future<ReplDBMSHeader> watchForProcessedSequenceNumber(long seqno,boolean terminate) throws InterruptedException {  Future<ReplDBMSHeader> watch=progressTracker.watchForProcessedSequenceNumber(seqno,terminate);  notifyThreads();  return watch;}  }
class C{  public long cstime(){  return Long.parseLong(fields[16]);}  }
class C{  @Override public boolean storesLowerCaseIdentifiers() throws SQLException {  debugCodeCall("storesLowerCaseIdentifiers");  String m=conn.getMode();  if (m.equals("MySQL")) {    return true;  }  return false;}  }
class C{  public ShearingGraphMousePlugin(){  this(MouseEvent.BUTTON1_MASK | mask);}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.494 -0500",hash_original_method="6C30326EEBD8635124BFC9218A6B6422",hash_generated_method="C75337EC13A828BA2CF290B1734627F0") public Intent putExtra(String name,boolean[] value){  mExtras.put(name,value);  return this;}  }
class C{  protected void assertBaseDirectoryContainsSpaces(){  assertFalse("Base directory cannot contain spaces.",new File(System.getProperty("basedir",".")).getAbsoluteFile().toString().contains(" "));}  }
class C{  protected <T>Database makeSimpleDatabase(String filename,int expectedSize,ListParameterization params,Class<?>[] filters){  try (InputStream is=open(filename)){    List<ObjectFilter> filterlist=new ArrayList<>();    filterlist.add(new FixedDBIDsFilter(1));    if (filters != null) {      for (      Class<?> filtercls : filters) {        ObjectFilter filter=ClassGenericsUtil.parameterizeOrAbort(filtercls,params);        filterlist.add(filter);      }    }    NumberVectorLabelParser<DoubleVector> parser=new NumberVectorLabelParser<>(DoubleVector.FACTORY);    InputStreamDatabaseConnection dbc=new InputStreamDatabaseConnection(is,filterlist,parser);    params.addParameter(AbstractDatabase.Parameterizer.DATABASE_CONNECTION_ID,dbc);    Database db=ClassGenericsUtil.parameterizeOrAbort(StaticArrayDatabase.class,params);    testParameterizationOk(params);    db.initialize();    Relation<?> rel=db.getRelation(TypeUtil.ANY);    assertEquals("Database size does not match.",expectedSize,rel.size());    return db;  } catch (  IOException e) {    fail("Test data " + filename + " not found.");    return null;  }}  }
class C{  public <T extends Point2D>T inverse(double x,double y,T llp){  if (llp == null) {    llp=(T)new LatLonPoint.Double();  }  double lon=((x - wx) / ppd) + cLon;  double lat=((hy - y) / ppd) + cLat;  llp.setLocation(lon,lat);  return llp;}  }
class C{  public BooleanQueryResultFormat(String name,String mimeType,String fileExt){  this(name,mimeType,null,fileExt);}  }
class C{  void implDigest(byte[] out,int ofs){  long bitsProcessed=bytesProcessed << 3;  int index=(int)bytesProcessed & 0x3f;  int padLen=(index < 56) ? (56 - index) : (120 - index);  engineUpdate(padding,0,padLen);  i2bLittle4((int)bitsProcessed,buffer,56);  i2bLittle4((int)(bitsProcessed >>> 32),buffer,60);  implCompress(buffer,0);  i2bLittle(state,0,out,ofs,16);}  }
class C{  public MCashLine(MCash cash){  this(cash.getCtx(),0,cash.get_TrxName());  setClientOrg(cash);  setC_Cash_ID(cash.getC_Cash_ID());  m_parent=cash;  m_cashBook=m_parent.getCashBook();}  }
class C{  public SVGOMAnimateColorElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public static List<InputProperties> parse(File file){  LineNumberReader reader=IOTools.getReaderFromFile(file);  List<InputProperties> propertiesList=new ArrayList<>();  try {    for (String line; (line=reader.readLine()) != null; ) {      InputProperties inputProperties=fromString(line);      propertiesList.add(inputProperties);    }    reader.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }  return propertiesList;}  }
class C{  @After public void afterTest(){  if (null != targetPlatformFile) {    targetPlatformFile.delete();    targetPlatformFile=null;  }  if (null != targetPlatformInstallLocation) {    targetPlatformInstallLocation.delete();    targetPlatformInstallLocation=null;  }}  }
class C{  public Coordinate toExternal(Coordinate internal){  Coordinate external=new Coordinate(internal);  return external;}  }
class C{  public PersistentSubscriptionSettings build(){  if (resolveLinkTos == null) {    resolveLinkTos=false;  }  if (startFrom == null) {    startFrom=StreamPosition.END;  } else {    checkArgument(startFrom >= -1,"startFrom should be >= -1");  }  if (timingStatistics == null) {    timingStatistics=false;  }  if (messageTimeout == null) {    messageTimeout=Duration.ofSeconds(30);  }  if (readBatchSize == null) {    readBatchSize=20;  } else {    checkArgument(isPositive(readBatchSize),"readBatchSize should be positive");  }  if (maxRetryCount == null) {    maxRetryCount=10;  } else {    checkArgument(isPositive(maxRetryCount),"maxRetryCount should be positive");  }  if (liveBufferSize == null) {    liveBufferSize=500;  } else {    checkArgument(isPositive(liveBufferSize),"liveBufferSize should be positive");  }  if (historyBufferSize == null) {    historyBufferSize=500;  } else {    checkArgument(isPositive(historyBufferSize),"historyBufferSize should be positive");  }  if (checkPointAfter == null) {    checkPointAfter=Duration.ofSeconds(2);  }  if (minCheckPointCount == null) {    minCheckPointCount=10;  } else {    checkArgument(isPositive(minCheckPointCount),"minCheckPointCount should be positive");  }  if (maxCheckPointCount == null) {    maxCheckPointCount=1000;  } else {    checkArgument(isPositive(maxCheckPointCount),"maxCheckPointCount should be positive");  }  if (maxSubscriberCount == null) {    maxSubscriberCount=0;  } else {    checkArgument(!isNegative(maxSubscriberCount),"maxSubscriberCount should not be negative.");  }  if (namedConsumerStrategy == null) {    namedConsumerStrategy=SystemConsumerStrategy.ROUND_ROBIN;  }  return new PersistentSubscriptionSettings(this);}  }
class C{  @Override protected void changeSide(@NotNull ChangeSide sideToChange,@NotNull DiffRangeMarker newRange){  for (int i=0; i < mySides.length; i++) {    SimpleChangeSide side=mySides[i];    if (side.equals(sideToChange)) {      mySides[i]=new SimpleChangeSide(sideToChange,newRange);      break;    }  }}  }
class C{  protected static void usage(String message){  System.err.println();  System.err.println(message);  System.err.println();  System.err.println("Usage: " + version.program_name + " [options]\n"+ "  and expects a specification file on standard input.\n"+ "  Legal options include:\n"+ "    -out path      specify the output files path [default current directory]\n"+ "    -package name  specify package generated classes go in [default none]\n"+ "    -parser name   specify parser class name [default \"parser\"]\n"+ "    -symbols name  specify name for symbol constant class [default \"sym\"]\n"+ "    -nonterms      put non terminals in symbol constant class\n"+ "    -expect #      number of conflicts expected/allowed [default 0]\n"+ "    -compact_red   compact tables by defaulting to most frequent reduce\n"+ "    -nowarn        don't warn about useless productions, etc.\n"+ "    -nosummary     don't print the usual summary of parse states, etc.\n"+ "    -progress      print messages to indicate progress of the system\n"+ "    -time          print time usage summary\n"+ "    -dump_grammar  produce a human readable dump of the symbols and grammar\n"+ "    -dump_states   produce a dump of parse state machine\n"+ "    -dump_tables   produce a dump of the parse tables\n"+ "    -dump          produce a dump of all of the above\n");  System.exit(1);}  }
class C{  public IIOByteBuffer(byte[] data,int offset,int length){  this.data=data;  this.offset=offset;  this.length=length;}  }
class C{  public void enable(RAbstractVector left,RAbstractVector right){}  }
class C{  @Override public boolean isCatalogAtStart(){  debugCodeCall("isCatalogAtStart");  return true;}  }
class C{  @Override @FeatureRequirement(featureClass=Graph.Features.VertexFeatures.class,feature=Graph.Features.VertexFeatures.FEATURE_NUMERIC_IDS) @FeatureRequirement(featureClass=Graph.Features.VertexPropertyFeatures.class,feature=Graph.Features.VertexPropertyFeatures.FEATURE_USER_SUPPLIED_IDS) public void shouldAttachWithCreateMethod(){}  }
class C{  public WordOccurrence(final CharSequence text,int start,int end,@Nullable final Kind kind){  myKind=kind;  myText=text;  myStart=start;  myEnd=end;}  }
class C{  public Complex subtract(Complex c){  Complex ret=new Complex(real,imag);  ret.mutableSubtract(c);  return ret;}  }
class C{  private void displayCompletionNotification(String errorMessage){  Notification notification=new NotificationCompat.Builder(this).setCategory(NotificationCompat.CATEGORY_PROGRESS).setColor(getResources().getColor(R.color.material_primary)).setContentText(errorMessage == null ? getText(R.string.notification_status_complete) : "Error: " + errorMessage).setContentTitle(getText(R.string.notification_title)).setSmallIcon(R.drawable.ic_stat_notify).build();  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notification);}  }
class C{  public void cleanup(){  mSnapshots.cleanup();}  }
class C{  protected void updateFilterList(){  Form f=getComponentForm();  boolean v=filter.getSize() > 0 && getText().length() >= minimumLength;  if (v != popup.isVisible()) {    popup.getComponentAt(0).setScrollY(0);    popup.setVisible(v);    popup.setEnabled(v);    f.repaint();  }  if (f != null) {    dontCalcSize=false;    f.revalidate();    dontCalcSize=true;  }}  }
class C{  public static int unsignedByteToInt(int b){  return b & 0xFF;}  }
class C{  private static CimConnectionInfo createConnectionInfo(){  CimConnectionInfo connectionInfo=new CimConnectionInfo();  connectionInfo.setType(CimConstants.ECOM_CONNECTION_TYPE);  connectionInfo.setHost(providerIP);  connectionInfo.setPort(providerPort);  connectionInfo.setUser(providerUser);  connectionInfo.setPassword(providerPassword);  connectionInfo.setInteropNS(providerInterOpNamespace);  connectionInfo.setImplNS(providerNamespace);  connectionInfo.setUseSSL(isProviderSslEnabled);  return connectionInfo;}  }
class C{  public DOMCryptoBinary(Node cbNode) throws MarshalException {  value=cbNode.getNodeValue();  try {    bigNum=Base64.decodeBigIntegerFromText((Text)cbNode);  } catch (  Exception ex) {    throw new MarshalException(ex);  }}  }
class C{  protected void adjustIcons(JDesktopPane desktop){  JInternalFrame.JDesktopIcon icon=new JInternalFrame.JDesktopIcon(new JInternalFrame());  Dimension iconSize=icon.getPreferredSize();  iconWidth=iconSize.width;  iconHeight=iconSize.height;  JInternalFrame[] frames=desktop.getAllFrames();  for (int i=0; i < frames.length; i++) {    icon=frames[i].getDesktopIcon();    Point ip=icon.getLocation();    adjustBoundsForIcon(icon,ip.x,ip.y);  }}  }
class C{  public long skip(long n) throws IOException {  if ((n % frameSize) != 0) {    n-=(n % frameSize);  }  if (frameLength != AudioSystem.NOT_SPECIFIED) {    if ((n / frameSize) > (frameLength - framePos)) {      n=(frameLength - framePos) * frameSize;    }  }  long temp=stream.skip(n);  if (temp % frameSize != 0) {    throw new IOException("Could not skip an integer number of frames.");  }  if (temp >= 0) {    framePos+=temp / frameSize;  }  return temp;}  }
class C{  public void testNegPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=1;  byte rBytes[]={-1,127,-10,-57,-101,1,2,2,2,-96,-16,8,-40,-59,68,-88,-88,16,72};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.andNot(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof JMXPrincipal))   return false;  JMXPrincipal that=(JMXPrincipal)o;  return (this.getName().equals(that.getName()));}  }
class C{  @Override public void onDrawChart(Canvas canvas,ArrayList<ChartSet> data){  final int nSets=data.size();  final int nEntries=data.get(0).size();  float offset;  BarSet barSet;  Bar bar;  for (int i=0; i < nEntries; i++) {    offset=data.get(0).getEntry(i).getX() - drawingOffset;    for (int j=0; j < nSets; j++) {      barSet=(BarSet)data.get(j);      bar=(Bar)barSet.getEntry(i);      if (!barSet.isVisible() || bar.getValue() == 0)       continue;      if (!bar.hasGradientColor())       style.barPaint.setColor(bar.getColor()); else       style.barPaint.setShader(new LinearGradient(bar.getX(),this.getZeroPosition(),bar.getX(),bar.getY(),bar.getGradientColors(),bar.getGradientPositions(),Shader.TileMode.MIRROR));      style.barPaint.setAlpha((int)(barSet.getAlpha() * 255));      applyShadow(style.barPaint,barSet.getAlpha(),bar);      if (style.hasBarBackground) {        drawBarBackground(canvas,offset,this.getInnerChartTop(),offset + barWidth,this.getInnerChartBottom());      }      if (bar.getValue() > 0)       drawBar(canvas,offset,bar.getY(),offset + barWidth,this.getZeroPosition()); else       drawBar(canvas,offset,this.getZeroPosition(),offset + barWidth,bar.getY());      offset+=barWidth;      if (j != nSets - 1)       offset+=style.setSpacing;    }  }}  }
class C{  public static String formatGeolocation(Context context,Geoloc geoloc){  StringBuilder result=new StringBuilder(context.getString(R.string.label_geolocation_msg)).append("\n");  String label=geoloc.getLabel();  if (label != null) {    result.append(context.getString(R.string.label_location)).append(" ").append(label).append("\n");  }  return result.append(context.getString(R.string.label_latitude)).append(" ").append(geoloc.getLatitude()).append("\n").append(context.getString(R.string.label_longitude)).append(" ").append(geoloc.getLongitude()).append("\n").append(context.getString(R.string.label_accuracy)).append(" ").append(geoloc.getAccuracy()).toString();}  }
class C{  public boolean isStrict(){  return session.isStrict();}  }
class C{  @Override public String toString(){  return "cudaExtent[" + "width=" + width + ","+ "height="+ height+ ","+ "depth="+ depth+ "]";}  }
class C{  public Class<?> lookupEntityClass(Class<?> objClass){  for (Class<?> cls=objClass; cls != null; cls=cls.getSuperclass()) {    if (entityBindings.containsKey(cls) || cls.isAnnotationPresent(Entity.class)) {      return cls;    }  }  throw new IllegalArgumentException("Unknown Entity " + objClass);}  }
class C{  public static <T extends Errors>T parseErrorResponse(ObjectMapper mapper,ResponseBody errorResponse,Class<T> cls) throws IOException {  return mapper.readValue(errorResponse.bytes(),cls);}  }
class C{  public void adjust(int dx,int dy){  transformer.adjust(dx,dy);  paintPreview(dx,dy,1f);  viewChanged(MapViewEvent.Type.ADJUST);}  }
class C{  public SipStatusLine createStatusLine(String statusLine) throws ParseException {  StatusLineParser statusLineParser=new StatusLineParser(statusLine);  return (SipStatusLine)statusLineParser.parse();}  }
class C{  public final void testGetPublicKey(){  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.getPublicKey();}  }
class C{  public CallableStatement(MySQLConnection conn,String sql,String catalog,boolean isFunctionCall) throws SQLException {  super(conn,sql,catalog);  this.callingStoredFunction=isFunctionCall;  if (!this.callingStoredFunction) {    if (!StringUtils.startsWithIgnoreCaseAndWs(sql,"CALL")) {      fakeParameterTypes(false);    } else {      determineParameterTypes();    }    generateParameterMap();  } else {    determineParameterTypes();    generateParameterMap();    this.parameterCount+=1;  }  this.retrieveGeneratedKeys=true;}  }
class C{  public long addJob(Job job){  return addJob(job.getPriority(),job.getDelayInMs(),job);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.popupwindow_left_tv:{      CustomPopupWindow p=new CustomPopupWindow(this);      p.showAtDropDownLeft(this.leftTV);      break;    }case R.id.popupwindow_center_tv:{    CustomPopupWindow p=new CustomPopupWindow(this);    p.showAtDropDownCenter(this.centerTV);    break;  }case R.id.popupwindow_right_tv:{  CustomPopupWindow p=new CustomPopupWindow(this);  p.showAtDropDownRight(this.rightTV);  break;}}}  }
class C{  public void loadMedia(MediaInfo media,boolean autoPlay,int position) throws TransientNetworkDisconnectionException, NoConnectionException {  loadMedia(media,autoPlay,position,null);}  }
class C{  protected SecretKey engineGenerateKey(){  if (this.random == null) {    this.random=SunJCE.getRandom();  }  byte[] keyBytes=new byte[this.keysize];  this.random.nextBytes(keyBytes);  return new SecretKeySpec(keyBytes,"HmacMD5");}  }
class C{  public void clear(){  updateRule.clear(this);}  }
class C{  private void parseRule(String rule,boolean forward){  int p=0;  int currentState=1;  int lastState=currentState;  String pendingChars="";  decisionPointStack=new Stack<>();  decisionPointList=new Vector<>();  loopingStates=new Vector<>();  statesToBackfill=new Vector<>();  short[] state;  boolean sawEarlyBreak=false;  if (!forward) {    loopingStates.addElement(new Integer(1));  }  decisionPointList.addElement(new Integer(currentState));  currentState=tempStateTable.size() - 1;  while (p < rule.length()) {    int c=rule.codePointAt(p);    clearLoopingStates=false;    if (c == '[' || c == '\\' || Character.isLetter(c) || Character.isDigit(c) || c < ' ' || c == '.' || c >= '\u007f') {      if (c != '.') {        int q=p;        if (c == '\\') {          q=p + 2;          ++p;        } else         if (c == '[') {          int bracketLevel=1;          q+=Character.charCount(rule.codePointAt(q));          while (bracketLevel > 0) {            c=rule.codePointAt(q);            if (c == '[') {              ++bracketLevel;            } else             if (c == ']') {              --bracketLevel;            } else             if (c == '\\') {              c=rule.codePointAt(++q);            }            q+=Character.charCount(c);          }        } else {          q=p + Character.charCount(c);        }        pendingChars=(String)expressions.get(rule.substring(p,q));        p=q - Character.charCount(rule.codePointBefore(q));      } else {        int rowNum=decisionPointList.lastElement().intValue();        state=tempStateTable.elementAt(rowNum);        if (p + 1 < rule.length() && rule.charAt(p + 1) == '*' && state[0] != 0) {          decisionPointList.addElement(new Integer(state[0]));          pendingChars="";          ++p;        } else {          StringBuffer temp=new StringBuffer();          for (int i=0; i < numCategories; i++)           temp.append((char)(i + 0x100));          pendingChars=temp.toString();        }      }      if (pendingChars.length() != 0) {        if (p + 1 < rule.length() && rule.charAt(p + 1) == '*') {          @SuppressWarnings("unchecked") Vector<Integer> clone=(Vector<Integer>)decisionPointList.clone();          decisionPointStack.push(clone);        }        int newState=tempStateTable.size();        if (loopingStates.size() != 0) {          statesToBackfill.addElement(new Integer(newState));        }        state=new short[numCategories + 1];        if (sawEarlyBreak) {          state[numCategories]=DONT_LOOP_FLAG;        }        tempStateTable.addElement(state);        updateStateTable(decisionPointList,pendingChars,(short)newState);        decisionPointList.removeAllElements();        lastState=currentState;        do {          ++currentState;          decisionPointList.addElement(new Integer(currentState));        } while (currentState + 1 < tempStateTable.size());      }    } else     if (c == '{') {      @SuppressWarnings("unchecked") Vector<Integer> clone=(Vector<Integer>)decisionPointList.clone();      decisionPointStack.push(clone);    } else     if (c == '}' || c == '*') {      if (c == '*') {        for (int i=lastState + 1; i < tempStateTable.size(); i++) {          Vector<Integer> temp=new Vector<>();          temp.addElement(new Integer(i));          updateStateTable(temp,pendingChars,(short)(lastState + 1));        }      }      Vector<Integer> temp=decisionPointStack.pop();      for (int i=0; i < decisionPointList.size(); i++)       temp.addElement(decisionPointList.elementAt(i));      decisionPointList=temp;    } else     if (c == '?') {      setLoopingStates(decisionPointList,decisionPointList);    } else     if (c == '(') {      tempStateTable.addElement(new short[numCategories + 1]);      lastState=currentState;      ++currentState;      decisionPointList.insertElementAt(new Integer(currentState),0);      @SuppressWarnings("unchecked") Vector<Integer> clone=(Vector<Integer>)decisionPointList.clone();      decisionPointStack.push(clone);      decisionPointStack.push(new Vector<Integer>());    } else     if (c == '|') {      Vector<Integer> oneDown=decisionPointStack.pop();      Vector<Integer> twoDown=decisionPointStack.peek();      decisionPointStack.push(oneDown);      for (int i=0; i < decisionPointList.size(); i++)       oneDown.addElement(decisionPointList.elementAt(i));      @SuppressWarnings("unchecked") Vector<Integer> clone=(Vector<Integer>)twoDown.clone();      decisionPointList=clone;    } else     if (c == ')') {      Vector<Integer> exitPoints=decisionPointStack.pop();      for (int i=0; i < decisionPointList.size(); i++)       exitPoints.addElement(decisionPointList.elementAt(i));      decisionPointList=exitPoints;      if (p + 1 >= rule.length() || rule.charAt(p + 1) != '*') {        decisionPointStack.pop();      } else {        @SuppressWarnings("unchecked") Vector<Integer> clone=(Vector<Integer>)decisionPointList.clone();        exitPoints=clone;        Vector<Integer> temp=decisionPointStack.pop();        int tempStateNum=temp.firstElement().intValue();        short[] tempState=tempStateTable.elementAt(tempStateNum);        for (int i=0; i < decisionPointList.size(); i++)         temp.addElement(decisionPointList.elementAt(i));        decisionPointList=temp;        for (int i=0; i < tempState.length; i++) {          if (tempState[i] > tempStateNum) {            updateStateTable(exitPoints,new Character((char)(i + 0x100)).toString(),tempState[i]);          }        }        lastState=currentState;        currentState=tempStateTable.size() - 1;        ++p;      }    } else     if (c == '/') {      sawEarlyBreak=true;      for (int i=0; i < decisionPointList.size(); i++) {        state=tempStateTable.elementAt(decisionPointList.elementAt(i).intValue());        state[numCategories]|=LOOKAHEAD_STATE_FLAG;      }    }    if (clearLoopingStates) {      setLoopingStates(null,decisionPointList);    }    p+=Character.charCount(c);  }  setLoopingStates(null,decisionPointList);  for (int i=0; i < decisionPointList.size(); i++) {    int rowNum=decisionPointList.elementAt(i).intValue();    state=tempStateTable.elementAt(rowNum);    state[numCategories]|=END_STATE_FLAG;    if (sawEarlyBreak) {      state[numCategories]|=LOOKAHEAD_STATE_FLAG;    }  }}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public char readChar(int r){  if (r < 1 || r > 16)   throw new RuntimeException("Illegal value of r = " + r);  if (r == 8)   return readChar();  char x=0;  for (int i=0; i < r; i++) {    x<<=1;    boolean bit=readBoolean();    if (bit)     x|=1;  }  return x;}  }
class C{  private void read(String key,boolean dumpContent,boolean dumpHeaders,boolean dumpLinks,boolean dumpText) throws ClassNotFoundException, IOException, Exception {  DataStore<String,WebPage> datastore=StorageUtils.createWebStore(getConf(),String.class,WebPage.class);  Query<String,WebPage> query=datastore.newQuery();  String reversedUrl=TableUtil.reverseUrl(key);  query.setKey(reversedUrl);  Result<String,WebPage> result=datastore.execute(query);  boolean found=false;  while (result.next()) {    try {      WebPage page=result.get();      String skey=result.getKey();      if (page == null || skey == null)       break;      found=true;      String url=TableUtil.unreverseUrl(skey);      System.out.println(getPageRepresentation(url,page,dumpContent,dumpHeaders,dumpLinks,dumpText));    } catch (    Exception e) {      e.printStackTrace();    }  }  if (!found)   System.out.println(key + " not found");  result.close();  datastore.close();}  }
class C{  public static boolean isMaximum(InetAddress address){  byte[] addr=address.getAddress();  for (int i=0; i < addr.length; i++) {    if (addr[i] != (byte)0xff) {      return false;    }  }  return true;}  }
class C{  public Map<URI,List<URI>> addTargetVolumeFullCopies(){  List<URI> fullCopies=Lists.newArrayList();  Map<URI,List<URI>> fullCopiesMap=new HashMap<>();  URI targetCG=null;  for (  URI volumeId : uris(volumeIds)) {    List<URI> targets=getTargets(volumeId);    for (    URI target : targets) {      if (targetCG == null) {        targetCG=getConsistencyGroup(target);      }      List<URI> volumeFullCopies=getFullCopies(target);      fullCopies.addAll(volumeFullCopies);      fullCopiesMap.put(target,volumeFullCopies);    }  }  if (!fullCopies.isEmpty() && targetCG != null) {    BlockStorageUtils.addVolumesToConsistencyGroup(targetCG,fullCopies);  }  return fullCopiesMap;}  }
class C{  public static void hideOnScreenKeyboardForEditText(Activity activity,EditText editText){  ((InputMethodManager)activity.getSystemService(Context.INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(editText.getWindowToken(),0);}  }
class C{  @Override public void mapChanged(ColorMap cMap){  layerInfo.colorMapName=cMap.getName();  Landscape.getInstance().markDirty(DirtyType.RenderState);}  }
class C{  @Override public void createPartControl(Composite parent){  createActions();  addTerminatedLaunchListener();  createLayouts(parent);  contributeToActionBars();  initControls();}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exc) {    throw new JSONException(exc);  }  this.back();  return c;}  }
class C{  public static org.apache.nutch.storage.WebPage.Builder newBuilder(org.apache.nutch.storage.WebPage.Builder other){  return new org.apache.nutch.storage.WebPage.Builder(other);}  }
class C{  @VisibleForTesting public synchronized void reset(List<Version> initialDefaults){  threadVersions=new ThreadLocal<List<Version>>();  if (initialDefaults != null) {    defaultVersions=new ArrayList<Version>(initialDefaults);  } else {    defaultVersions=new ArrayList<Version>();  }}  }
class C{  private GroupMembership(){}  }
class C{  public static void main(String... args) throws Exception {  new CheckExamples().run();}  }
class C{  public Bitmap toBitmap(){  setDrawingCacheEnabled(false);  if (!isDrawingCacheEnabled()) {    setDrawingCacheEnabled(true);  }  if (mRenderer.isApplyBackgroundColor()) {    setDrawingCacheBackgroundColor(mRenderer.getBackgroundColor());  }  setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);  return getDrawingCache(true);}  }
class C{  public void test_termsIndex_addLookupValues_with_standard_bnode_semantics(){  doTermsIndexAddLookupTest(false);}  }
class C{  public PlainCredentials(String user,String pwd){  this.user=user;  this.pwd=pwd;}  }
class C{  public static Character next(Character self){  return (char)(self + 1);}  }
class C{  @Override public boolean shouldDelayChildPressedState(){  return false;}  }
class C{  private static void addToBG(AbstractButton button,Container cont,ButtonGroup bg){  bg.add(button);  cont.add(button);}  }
class C{  public ObjectInputStream createObjectInputStream(final Reader xmlReader) throws IOException {  return createObjectInputStream(hierarchicalStreamDriver.createReader(xmlReader));}  }
class C{  public Object2DoubleOpenHashMap<int[]> supportMap(int supportThreshold){  List<ItemSet> itemSets=learn();  Object2DoubleOpenHashMap<int[]> supportMap=new Object2DoubleOpenHashMap<>(itemSets.size());  for (  ItemSet itemSet : itemSets) {    if (itemSet.support >= supportThreshold) {      supportMap.put(itemSet.items,itemSet.support);    }  }  return supportMap;}  }
class C{  @Override public boolean isTimeIncluded(long timeStamp){  if (super.isTimeIncluded(timeStamp) == false) {    return false;  }  Date lookFor=getStartOfDayJavaCalendar(timeStamp).getTime();  return !(dates.contains(lookFor));}  }
class C{  public void close() throws IOException {  this.bf.close();}  }
class C{  private void createMetricChartPanel(int metric,DatasetGenerator datasetGenerator,List<GCStatsChartPanel> list){  ChangingCategoryDatasetWithTTG dataset=datasetGenerator.newCategoryDatasetWithTTG(metric,false);  GCStatsChartPanel panel=new MetricChartPanel(CHART_PREFIX + DatasetGenerator.getMetricName(metric),DatasetGenerator.getUnitName(metric),dataset,locker);  list.add(panel);}  }
class C{  private boolean checkPathParameterModified(Integer vpoolValue,Integer paramValue){  boolean isModified=false;  if (null != vpoolValue) {    if (paramValue == null) {      isModified=false;    } else     if (paramValue != vpoolValue) {      isModified=true;    }  } else {    if (null != paramValue) {      isModified=true;    }  }  return isModified;}  }
class C{  public double measureBestNumIts(){  return m_bestNumIts;}  }
class C{  public boolean supportsContexts(){  return supportsContexts;}  }
class C{  public void endDTD() throws org.xml.sax.SAXException {  try {    if (m_needToOutputDocTypeDecl) {      outputDocTypeDecl(m_elemContext.m_elementName,false);      m_needToOutputDocTypeDecl=false;    }    final java.io.Writer writer=m_writer;    if (!m_inDoctype)     writer.write("]>"); else {      writer.write('>');    }    writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public ByteArrayRequestEntity(final byte[] content,final String contentType){  super();  if (content == null) {    throw new IllegalArgumentException("The content cannot be null");  }  this.content=content;  this.contentType=contentType;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public final boolean sendMessageAtFrontOfQueue(Message msg){  return mExec.sendMessageAtFrontOfQueue(msg);}  }
class C{  private String createGLJournal(){  final String whereClause="AD_PInstance_ID=?";  List<X_T_InvoiceGL> list=new Query(getCtx(),X_T_InvoiceGL.Table_Name,whereClause,get_TrxName()).setParameters(getAD_PInstance_ID()).setOrderBy("AD_Org_ID").list();  if (list.size() == 0)   return " - No Records found";  MAcctSchema as=MAcctSchema.get(getCtx(),p_C_AcctSchema_ID);  MAcctSchemaDefault asDefaultAccts=MAcctSchemaDefault.get(getCtx(),p_C_AcctSchema_ID);  MGLCategory cat=MGLCategory.getDefaultSystem(getCtx());  if (cat == null) {    MDocType docType=MDocType.get(getCtx(),p_C_DocTypeReval_ID);    cat=MGLCategory.get(getCtx(),docType.getGL_Category_ID());  }  MJournalBatch batch=new MJournalBatch(getCtx(),0,get_TrxName());  batch.setDescription(getName());  batch.setC_DocType_ID(p_C_DocTypeReval_ID);  batch.setDateDoc(new Timestamp(System.currentTimeMillis()));  batch.setDateAcct(p_DateReval);  batch.setC_Currency_ID(as.getC_Currency_ID());  if (!batch.save())   return " - Could not create Batch";  MJournal journal=null;  BigDecimal drTotal=Env.ZERO;  BigDecimal crTotal=Env.ZERO;  int AD_Org_ID=0;  for (int i=0; i < list.size(); i++) {    X_T_InvoiceGL gl=list.get(i);    if (gl.getAmtRevalDrDiff().signum() == 0 && gl.getAmtRevalCrDiff().signum() == 0)     continue;    MInvoice invoice=new MInvoice(getCtx(),gl.getC_Invoice_ID(),null);    if (invoice.getC_Currency_ID() == as.getC_Currency_ID())     continue;    if (journal == null) {      journal=new MJournal(batch);      journal.setC_AcctSchema_ID(as.getC_AcctSchema_ID());      journal.setC_Currency_ID(as.getC_Currency_ID());      journal.setC_ConversionType_ID(p_C_ConversionTypeReval_ID);      MOrg org=MOrg.get(getCtx(),gl.getAD_Org_ID());      journal.setDescription(getName() + " - " + org.getName());      journal.setGL_Category_ID(cat.getGL_Category_ID());      if (!journal.save())       return " - Could not create Journal";    }    MJournalLine line=new MJournalLine(journal);    line.setLine((i + 1) * 10);    line.setDescription(invoice.getSummary());    MFactAcct fa=new MFactAcct(getCtx(),gl.getFact_Acct_ID(),null);    line.setC_ValidCombination_ID(MAccount.get(fa));    BigDecimal dr=gl.getAmtRevalDrDiff();    BigDecimal cr=gl.getAmtRevalCrDiff();    drTotal=drTotal.add(dr);    crTotal=crTotal.add(cr);    line.setAmtSourceDr(dr);    line.setAmtAcctDr(dr);    line.setAmtSourceCr(cr);    line.setAmtAcctCr(cr);    line.saveEx();    if (AD_Org_ID == 0)     AD_Org_ID=gl.getAD_Org_ID();    if (AD_Org_ID != gl.getAD_Org_ID()) {      createBalancing(asDefaultAccts,journal,drTotal,crTotal,AD_Org_ID,(i + 1) * 10);      AD_Org_ID=gl.getAD_Org_ID();      drTotal=Env.ZERO;      crTotal=Env.ZERO;      journal=null;    }  }  createBalancing(asDefaultAccts,journal,drTotal,crTotal,AD_Org_ID,(list.size() + 1) * 10);  return " - " + batch.getDocumentNo() + " #"+ list.size();}  }
class C{  public SetHallOfFameToAgeDiffAction(final String questname,String fametype){  this.questname=checkNotNull(questname);  this.index=-1;  this.fametype=checkNotNull(fametype);}  }
class C{  public LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,HttpClient httpClient,String... solrServerUrl){  clientIsInternal=httpClient == null;  this.httpSolrClientBuilder=httpSolrClientBuilder;  httpClient=constructClient(null);  this.httpClient=httpClient;  if (solrServerUrl != null) {    for (    String s : solrServerUrl) {      ServerWrapper wrapper=new ServerWrapper(makeSolrClient(s));      aliveServers.put(wrapper.getKey(),wrapper);    }  }  updateAliveList();}  }
class C{  @Override public void run(){  amIActive=true;  String NIRHeader=null;  String RedHeader=null;  String outputHeader=null;  int row, col, x, y;  double[] NIRVal;  double[] redVal;  float progress=0;  int a;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      NIRHeader=args[i];    } else     if (i == 1) {      RedHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((NIRHeader == null) || (RedHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster NIR=new WhiteboxRaster(NIRHeader,"r");    int rows=NIR.getNumberRows();    int cols=NIR.getNumberColumns();    double noData=NIR.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(RedHeader,"r");    if (rows != red.getNumberRows() || cols != red.getNumberColumns()) {      showFeedback("The two input images must have the same number of rows and columns.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",NIRHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(NIR.getPreferredPalette());    for (row=0; row < rows; row++) {      NIRVal=NIR.getRowValues(row);      redVal=red.getRowValues(row);      for (col=0; col < cols; col++) {        if (NIRVal[col] != noData && redVal[col] != noData) {          if ((NIRVal[col] + redVal[col]) != 0) {            outputFile.setValue(row,col,(NIRVal[col] - redVal[col]) / (NIRVal[col] + redVal[col] + 0.16));          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    NIR.close();    red.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchorA,Vector2 anchorB){  this.bodyA=bodyA;  this.bodyB=bodyB;  this.localAnchorA.set(bodyA.getLocalPoint(anchorA));  this.localAnchorB.set(bodyB.getLocalPoint(anchorB));  this.length=anchorA.dst(anchorB);}  }
class C{  @Override public void buildStructure(BayesNet bayesNet,Instances instances) throws Exception {  m_BayesNet=bayesNet;  super.buildStructure(bayesNet,instances);}  }
class C{  public static Border createRoundBorder(int arcWidth,int arcHeight,int color){  Border b=new Border();  b.type=TYPE_ROUNDED;  b.themeColors=false;  b.colorA=color;  b.arcHeight=arcHeight;  b.arcWidth=arcWidth;  return b;}  }
class C{  public void run(){  serverThread.run();}  }
class C{  private Instruction do_lload(int index){  Operand r=getLocalDual(index);  if (VM.VerifyAssertions)   opt_assert(r.isLong());  if (LOCALS_ON_STACK) {    pushDual(r);    return null;  } else {    return _moveDualHelper(LONG_MOVE,r,TypeReference.Long);  }}  }
class C{  public String rightString(final int length){  if (length <= 0) {    return "";  } else   if (length >= size) {    return new String(buffer,0,size);  } else {    return new String(buffer,size - length,length);  }}  }
class C{  @Override public int compareTo(Snapshot o){  return Long.compare(startTime,o.startTime);}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  @After public void tearDown(){  comparator=null;}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  MemberState completeInstall(){  installing=false;  return this;}  }
class C{  public int align() throws IOException {  if (free != 8)   return writeInCurrent(0,free); else   return 0;}  }
class C{  public Object deserialize(String s,byte[] bytes,Schema readerSchema){  return deserialize(bytes,readerSchema);}  }
class C{  private boolean cleanUp(Reference<?> reference){  Method finalizeReferentMethod=getFinalizeReferentMethod();  if (finalizeReferentMethod == null) {    return false;  }  do {    reference.clear();    if (reference == frqReference) {      return false;    }    try {      finalizeReferentMethod.invoke(reference);    } catch (    Throwable t) {      logger.log(Level.SEVERE,"Error cleaning up after reference.",t);    }  } while ((reference=queue.poll()) != null);  return true;}  }
class C{  private void validateAttributeName(String attributeName) throws ConflictException {  if (attributeName == null || attributeName.isEmpty() || attributeName.toLowerCase().startsWith("codenvy")) {    throw new ConflictException(String.format("Attribute2 name '%s' is not valid",attributeName));  }}  }
class C{  private Map<String,String> sendData() throws IOException {  Map<String,String> keyValMap=new HashMap<>();  for (int evt=0; evt < EVENT_CNT; evt++) {    long runtime=System.currentTimeMillis();    String key="test_" + String.valueOf(evt);    String msg=runtime + String.valueOf(evt);    if (evt >= EVENT_CNT / 2)     key="conditioned_" + key;    grid.cache(CACHE_NAME).put(key,msg);    keyValMap.put(key,msg);  }  return keyValMap;}  }
class C{  public NecronomiconEnchantmentRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,EnchantmentData enchantment,Object... offerings){  this(unlocalizedName,bookType,dimension,requiredEnergy,false,enchantment,offerings);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private boolean doNext() throws IOException {  if (loneState != null) {    restoreState(loneState);    loneState=null;    return true;  } else {    if (exhausted) {      return false;    } else     if (input.incrementToken()) {      return true;    } else {      exhausted=true;      return false;    }  }}  }
class C{  protected void printResults(PrintStream out){  log.debug("printResults()");  StringBuilder line=new StringBuilder();  out.println(line);  out.println();}  }
class C{  public static void throwException(Throwable t){  if (UNSAFE != null) {    UNSAFE.throwException(t);  } else {    JUnsafe.<RuntimeException>throwException0(t);  }}  }
class C{  public short readShortBE() throws IOException {  return inputStream.readShort();}  }
class C{  @Override public String toString(){  return blocks.toString();}  }
class C{  private Number parse(Class sourceType,Class targetType,String value,NumberFormat format){  ParsePosition pos=new ParsePosition(0);  Number parsedNumber=format.parse(value,pos);  if (pos.getErrorIndex() >= 0 || pos.getIndex() != value.length() || parsedNumber == null) {    String msg="Error converting from '" + toString(sourceType) + "' to '"+ toString(targetType)+ "'";    if (format instanceof DecimalFormat) {      msg+=" using pattern '" + ((DecimalFormat)format).toPattern() + "'";    }    if (locale != null) {      msg+=" for locale=[" + locale + "]";    }    throw new ConversionException(msg);  }  return parsedNumber;}  }
class C{  public void testDoCheckWithNotDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithNotDetectionResultOverridenByConstructor");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.FAILED);  expectLastCall().once();  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.FAILED,element,ATTR_ABSENT_MSG);  expectLastCall().once();  AttributePresenceChecker instance=new AttributePresenceChecker(AttributeStore.CLASS_ATTR,TestSolution.PASSED,TestSolution.FAILED,ATTR_PRESENT_MSG,ATTR_ABSENT_MSG);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  @Override protected Iterator<Attr> handleAttributes(Element element,NameSpaceSymbTable ns) throws CanonicalizationException {  throw new CanonicalizationException("c14n.Canonicalizer.UnsupportedOperation");}  }
class C{  public void rethrowError() throws Throwable {  if (tag == ERROR) {    if (value instanceof TypeNotPresentException) {      TypeNotPresentException tnpe=(TypeNotPresentException)value;      throw new TypeNotPresentException(tnpe.typeName(),tnpe.getCause());    } else     if (value instanceof EnumConstantNotPresentException) {      EnumConstantNotPresentException ecnpe=(EnumConstantNotPresentException)value;      throw new EnumConstantNotPresentException(ecnpe.enumType(),ecnpe.constantName());    } else     if (value instanceof ArrayStoreException) {      ArrayStoreException ase=(ArrayStoreException)value;      throw new ArrayStoreException(ase.getMessage());    }    Throwable error=(Throwable)value;    StackTraceElement[] ste=error.getStackTrace();    ByteArrayOutputStream bos=new ByteArrayOutputStream(ste == null ? 512 : (ste.length + 1) * 80);    ObjectOutputStream oos=new ObjectOutputStream(bos);    oos.writeObject(error);    oos.flush();    oos.close();    ByteArrayInputStream bis=new ByteArrayInputStream(bos.toByteArray());    ObjectInputStream ois=new ObjectInputStream(bis);    error=(Throwable)ois.readObject();    ois.close();    throw error;  }}  }
class C{  @Provides @Config("commitLogDiffExportBatchSize") public static int provideCommitLogDiffExportBatchSize(){  return 100;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.345 -0500",hash_original_method="F417CE3385B772AADA134FBE4FF63C9E",hash_generated_method="CF994FCC7B87BF04A6C8FECB8C53A973") public int size(){  return count;}  }
class C{  public static void saveNonvolatilesAroundSysCall(Instruction call,IR ir){}  }
class C{  void calculateValue(float fraction){  mAnimatedValue=mKeyframeSet.getValue(fraction);}  }
class C{  @Override public void onRestore(BackupDataInput data,int appVersionCode,ParcelFileDescriptor newState) throws IOException {  while (data.readNextHeader()) {    String key=data.getKey();    int dataSize=data.getDataSize();    if (APP_DATA_KEY.equals(key)) {      byte[] dataBuf=new byte[dataSize];      data.readEntityData(dataBuf,0,dataSize);      ByteArrayInputStream baStream=new ByteArrayInputStream(dataBuf);      DataInputStream in=new DataInputStream(baStream);      mFilling=in.readInt();      mAddMayo=in.readBoolean();      mAddTomato=in.readBoolean();synchronized (HugeBackupActivity.sDataLock) {        RandomAccessFile file=new RandomAccessFile(mDataFile,"rw");        file.setLength(0L);        file.writeInt(mFilling);        file.writeBoolean(mAddMayo);        file.writeBoolean(mAddTomato);      }    } else {      data.skipEntityData();    }  }  writeStateFile(newState);}  }
class C{  private TemplatePersistenceData[] read(InputSource source,ResourceBundle bundle,String singleId) throws IOException {  try {    Collection templates=new ArrayList();    Set ids=new HashSet();    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder parser=factory.newDocumentBuilder();    parser.setErrorHandler(new DefaultHandler());    Document document=parser.parse(source);    NodeList elements=document.getElementsByTagName(TEMPLATE_ELEMENT);    int count=elements.getLength();    for (int i=0; i != count; i++) {      Node node=elements.item(i);      NamedNodeMap attributes=node.getAttributes();      if (attributes == null)       continue;      String id=getStringValue(attributes,ID_ATTRIBUTE,null);      if (id != null && ids.contains(id))       throw new IOException(TemplatePersistenceMessages.getString("TemplateReaderWriter.duplicate.id"));      if (singleId != null && !singleId.equals(id))       continue;      boolean deleted=getBooleanValue(attributes,DELETED_ATTRIBUTE,false);      String name=getStringValue(attributes,NAME_ATTRIBUTE);      name=translateString(name,bundle);      String description=getStringValue(attributes,DESCRIPTION_ATTRIBUTE,"");      description=translateString(description,bundle);      String context=getStringValue(attributes,CONTEXT_ATTRIBUTE);      if (name == null || context == null)       throw new IOException(TemplatePersistenceMessages.getString("TemplateReaderWriter.error.missing_attribute"));      boolean enabled=getBooleanValue(attributes,ENABLED_ATTRIBUTE,true);      boolean autoInsertable=getBooleanValue(attributes,AUTO_INSERTABLE_ATTRIBUTE,true);      StringBuffer buffer=new StringBuffer();      NodeList children=node.getChildNodes();      for (int j=0; j != children.getLength(); j++) {        String value=children.item(j).getNodeValue();        if (value != null)         buffer.append(value);      }      String pattern=buffer.toString();      pattern=translateString(pattern,bundle);      Template template=new Template(name,description,context,pattern,autoInsertable);      TemplatePersistenceData data=new TemplatePersistenceData(template,enabled,id);      data.setDeleted(deleted);      templates.add(data);      if (singleId != null && singleId.equals(id))       break;    }    return (TemplatePersistenceData[])templates.toArray(new TemplatePersistenceData[templates.size()]);  } catch (  ParserConfigurationException e) {    Assert.isTrue(false);  }catch (  SAXException e) {    throw (IOException)new IOException("Could not read template file").initCause(e);  }  return null;}  }
class C{  public static String fromIPv4AddressCollection(Collection<Integer> ipAddresses){  if (ipAddresses == null)   return "null";  StringBuffer sb=new StringBuffer();  sb.append("[");  for (  Integer ip : ipAddresses) {    sb.append(fromIPv4Address(ip));    sb.append(",");  }  sb.replace(sb.length() - 1,sb.length(),"]");  return sb.toString();}  }
class C{  public static boolean validateMetadata(Metadata metadata){  if (null == metadata) {    return false;  }  if (null != metadata.getAttributes()) {    if (metadata.getAttributes().containsKey(Constants.PRODUCER_LABEL)) {      return false;    }    if (metadata.getAttributes().containsKey(Constants.OWNER_LABEL)) {      return false;    }    if (metadata.getAttributes().containsKey(Constants.APPLICATION_LABEL)) {      return false;    }  }  if (null != metadata.getLabels() && null != metadata.getAttributes()) {    for (    String key : metadata.getAttributes().keySet()) {      if (metadata.getLabels().containsKey(key)) {        return false;      }    }  }  int total=0;  if (null != metadata.getLabels()) {    for (    Entry<String,String> entry : metadata.getLabels().entrySet()) {      total+=entry.getKey().length();      total+=entry.getValue().length();    }    if (total > MAX_LABELS_SIZE) {      return false;    }  }  total=0;  if (null != metadata.getAttributes()) {    for (    Entry<String,String> entry : metadata.getAttributes().entrySet()) {      total+=entry.getKey().length();      total+=entry.getValue().length();    }    if (total > MAX_ATTRIBUTES_SIZE) {      return false;    }  }  return true;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SHSUB16");  translateAll(environment,instruction,"SHSUB16",instructions);}  }
class C{  public void resamplePatterns(){  int siteCount=patterns.getSiteCount();  siteIndices=MathUtils.shuffled(siteCount);}  }
class C{  public void generateConfig(XmlWriter w,ExtensionProfile extProfile) throws IOException {  List<Attribute> attrs=new ArrayList<Attribute>();  attrs.add(new Attribute("namespace",namespace.getUri()));  attrs.add(new Attribute("localName",localName));  attrs.add(new Attribute("extensionClass",extensionClass.getName()));  attrs.add(new Attribute("required",required));  attrs.add(new Attribute("repeatable",repeatable));  attrs.add(new Attribute("aggregate",aggregate));  attrs.add(new Attribute("arbitraryXml",arbitraryXml));  attrs.add(new Attribute("mixedContent",mixedContent));  generateStartElement(w,Namespaces.gdataConfigNs,"extensionDescription",attrs,null);  generateExtensions(w,extProfile);  w.endElement(Namespaces.gdataConfigNs,"extensionDescription");}  }
class C{  public void onGoToBondi(View view){  if (!checkReady()) {    return;  }  changeCamera(CameraUpdateFactory.newCameraPosition(BONDI));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.REACTION_TRIGGER__TRIGGERS:    return getTriggers();case StextPackage.REACTION_TRIGGER__GUARD:  return getGuard();}return super.eGet(featureID,resolve,coreType);}  }
class C{  double evaluateFoldCV(Instances fold,int[] fs) throws Exception {  int i;  int numFold=fold.numInstances();  int numCl=m_theInstances.classAttribute().numValues();  double[][] class_distribs=new double[numFold][numCl];  double[] instA=new double[fs.length];  double[] normDist;  DecisionTableHashKey thekey;  double acc=0.0;  int classI=m_theInstances.classIndex();  Instance inst;  if (m_classIsNominal) {    normDist=new double[numCl];  } else {    normDist=new double[2];  }  for (i=0; i < numFold; i++) {    inst=fold.instance(i);    for (int j=0; j < fs.length; j++) {      if (fs[j] == classI) {        instA[j]=Double.MAX_VALUE;      } else       if (inst.isMissing(fs[j])) {        instA[j]=Double.MAX_VALUE;      } else {        instA[j]=inst.value(fs[j]);      }    }    thekey=new DecisionTableHashKey(instA);    if ((class_distribs[i]=m_entries.get(thekey)) == null) {      throw new Error("This should never happen!");    } else {      if (m_classIsNominal) {        class_distribs[i][(int)inst.classValue()]-=inst.weight();      } else {        class_distribs[i][0]-=(inst.classValue() * inst.weight());        class_distribs[i][1]-=inst.weight();      }    }    m_classPriorCounts[(int)inst.classValue()]-=inst.weight();  }  double[] classPriors=m_classPriorCounts.clone();  Utils.normalize(classPriors);  for (i=0; i < numFold; i++) {    inst=fold.instance(i);    System.arraycopy(class_distribs[i],0,normDist,0,normDist.length);    if (m_classIsNominal) {      boolean ok=false;      for (      double element : normDist) {        if (Utils.gr(element,1.0)) {          ok=true;          break;        }      }      if (!ok) {        normDist=classPriors.clone();      }      Utils.normalize(normDist);      if (m_evaluationMeasure == EVAL_AUC) {        m_evaluation.evaluateModelOnceAndRecordPrediction(normDist,inst);      } else {        m_evaluation.evaluateModelOnce(normDist,inst);      }    } else {      if (Utils.eq(normDist[1],0.0)) {        double[] temp=new double[1];        temp[0]=m_majority;        m_evaluation.evaluateModelOnce(temp,inst);      } else {        double[] temp=new double[1];        temp[0]=normDist[0] / normDist[1];        m_evaluation.evaluateModelOnce(temp,inst);      }    }  }  for (i=0; i < numFold; i++) {    inst=fold.instance(i);    m_classPriorCounts[(int)inst.classValue()]+=inst.weight();    if (m_classIsNominal) {      class_distribs[i][(int)inst.classValue()]+=inst.weight();    } else {      class_distribs[i][0]+=(inst.classValue() * inst.weight());      class_distribs[i][1]+=inst.weight();    }  }  return acc;}  }
class C{  protected void sequence_BinaryIntLiteral(ISerializationContext context,BinaryIntLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.NUMERIC_LITERAL__VALUE));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getBinaryIntLiteralAccess().getValueBINARY_INTTerminalRuleCall_0(),semanticObject.getValue());  feeder.finish();}  }
class C{  public static int dpToPx(Context context,float dp){  DisplayMetrics displayMetrics=context.getResources().getDisplayMetrics();  return (int)((dp * displayMetrics.density) + 0.5);}  }
class C{  public ParameterizedPropertyAccessExpression_IM createParameterizedPropertyAccessExpression_IM(){  ParameterizedPropertyAccessExpression_IMImpl parameterizedPropertyAccessExpression_IM=new ParameterizedPropertyAccessExpression_IMImpl();  return parameterizedPropertyAccessExpression_IM;}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public TestProperties(){  InputStream stream=null;  try {    String filename=System.getProperty("TEST_PROPERTY_FILENAME","test.properties");    stream=getPropertyFileAsStream(filename);    if (stream == null) {      filename="test.properties";      stream=cclass.getClassLoader().getResourceAsStream(filename);    }    if (stream != null) {      log.info("Loading properties from: '" + filename + "'");      properties.load(stream);    }  } catch (  Exception e) {    log.log(Level.SEVERE,"caught exception:",e);  } finally {    if (stream != null) {      try {        stream.close();      } catch (      IOException e) {        log.log(Level.SEVERE,"caught exception:",e);      }    }  }  for (  String key : defaults.keySet()) {    String systemValue=System.getProperty(key);    if (systemValue != null) {      properties.put(key,systemValue);    }  }  for (  Object object : properties.keySet()) {    if (object instanceof String) {      String key=(String)object;      String systemValue=System.getProperty(key);      if (systemValue != null) {        properties.put(key,systemValue);      }      String defaultValue=defaults.get(key);      String value=getProperty(key);      boolean isSame=false;      if (defaultValue == null) {        if (value == null) {          isSame=true;        }      } else       if (value != null) {        isSame=defaultValue.equals(value);      }      if (systemValue != null) {        log.info("    System property: " + key + " = "+ getProperty(key));      } else       if (isSame == false) {        log.info("                     " + key + " = "+ getProperty(key));      }    }  }}  }
class C{  private static void cleanModel(Model pom){  Properties properties=new SortedProperties();  properties.putAll(pom.getProperties());  pom.setProperties(properties);}  }
class C{  protected void fireValueChangedEvent(ValueChangedEvent<?> ev){  for (  ValueChangedListener listener : listeners) {    listener.onValueChanged(ev);  }}  }
class C{  @SuppressWarnings("unchecked") public <Result,Progress>Promise<Result,Progress> absent(){  return (Promise<Result,Progress>)mAbsentPromise;}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public void closeJsonStream() throws IOException {  if (generator == null) {    return;  }  while (open) {    writeEndVCard();  }  if (wrapInArray) {    generator.writeEndArray();  }  if (closeGenerator) {    generator.close();  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    args=new String[2];    Scanner sc=new Scanner(System.in);    System.out.print("NCOL from file:");    args[0]=sc.nextLine();    System.out.print("GDL to file:");    args[1]=sc.nextLine();    sc.close();  }  Scanner sc=new Scanner(new File(args[0]));  PrintWriter pw=new PrintWriter(new File(args[1]));  pw.println("graph: {title: \"FreeCellSearch \"");  pw.println("layoutalgorithm: tree ");  pw.println("node.shape     : ellipse");  pw.println("splines        : yes");  Hashtable<Integer,ArrayList<Integer>> map=new Hashtable<Integer,ArrayList<Integer>>();  int maxId=-1;  while (sc.hasNextLine()) {    int n1=sc.nextInt();    int n2=sc.nextInt();    sc.nextLine();    ArrayList<Integer> exist=map.get(n1);    if (exist == null) {      exist=new ArrayList<Integer>();      map.put(n1,exist);    }    exist.add(n2);    if (n2 > maxId) {      maxId=n2;    }    if (n1 > maxId) {      maxId=n1;    }  }  sc.close();  for (int i=0; i <= maxId; i++) {    ArrayList<Integer> exist=map.get(i);    if (exist == null || exist.size() == 0) {      continue;    }    pw.println("node: {title: \"n" + i + "\"}");  }  for (int i=0; i <= maxId; i++) {    ArrayList<Integer> exist=map.get(i);    if (exist == null || exist.size() == 0) {      continue;    }    for (int j=0; j < exist.size(); j++) {      pw.println("edge: {source: \"n" + i + "\" target: \"n"+ exist.get(j)+ "\"}");    }  }  pw.println("}");  pw.flush();  pw.close();}  }
class C{  public static void reverse(final float[] array){  if (array == null) {    return;  }  int i=0;  int j=array.length - 1;  float tmp;  while (j > i) {    tmp=array[j];    array[j]=array[i];    array[i]=tmp;    j--;    i++;  }}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  public boolean sent(Wallet wallet){  for (  TransactionInput in : inputs) {    if (isTransactionInputMine(in,wallet)) {      return true;    }  }  return false;}  }
class C{  public Builder play(){  return apply(new SetPlayWhenReady(tag,true));}  }
class C{  public static boolean isValidQName(String str){  final int colon=str.indexOf(':');  if (colon == 0 || colon == str.length() - 1) {    return false;  }  if (colon > 0) {    final String prefix=str.substring(0,colon);    final String localPart=str.substring(colon + 1);    return isValidNCName(prefix) && isValidNCName(localPart);  } else {    return isValidNCName(str);  }}  }
class C{  public Iterator iterator(){  return nodeMap.values().iterator();}  }
class C{  public JValueSlider(String title,double min,double max,double value){  this(title,new Double(min),new Double(max),new Double(value));}  }
class C{  public FindServersRequest clone(){  FindServersRequest result=new FindServersRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.EndpointUrl=EndpointUrl;  result.LocaleIds=LocaleIds == null ? null : LocaleIds.clone();  result.ServerUris=ServerUris == null ? null : ServerUris.clone();  return result;}  }
class C{  private void displayData(int index){  MAttachmentEntry entry=m_attachment.getEntry(index);  log.config("Index=" + index + " - "+ entry);  gifPanel.setImage(null);  graphPanel.removeAll();  bDelete.setEnabled(false);  bOpen.setEnabled(false);  bSave.setEnabled(false);  Dimension size=null;  if (entry == null || entry.getData() == null) {    info.setText("-");  } else {    bOpen.setEnabled(true);    bSave.setEnabled(true);    bDelete.setEnabled(true);    log.config(entry.toStringX());    info.setText(entry.toStringX());    if (entry.isPDF() && pdfViewer != null) {      try {        pdfViewer.loadPDF(entry.getInputStream());        pdfViewer.setScale(50);        size=pdfViewer.getPreferredSize();        graphPanel.add(pdfViewer,BorderLayout.CENTER);      } catch (      Exception e) {        log.log(Level.SEVERE,"(pdf)",e);      }    } else     if (entry.isGraphic()) {      Image image=Toolkit.getDefaultToolkit().createImage(entry.getData());      if (image != null) {        gifPanel.setImage(image);        size=gifPanel.getPreferredSize();        if (size.width == -1 && size.height == -1) {          log.log(Level.SEVERE,"Invalid Image");        } else {          graphPanel.add(gifScroll,BorderLayout.CENTER);        }      } else       log.log(Level.SEVERE,"Could not create image");    }  }  if (graphPanel.getComponentCount() == 0) {    graphPanel.add(info,BorderLayout.CENTER);  }  log.config("Size=" + size);  pack();}  }
class C{  public String orig_toHtmlString(){  StringBuffer buf=new StringBuffer();  buf.append("<h4>whitelist</h4>\n");  for (  Method m : whitelist) {    buf.append(m.toString() + "<br>");  }  List<Method> entry_points=new ArrayList<Method>(eventBlocks.keySet());  Collections.sort(entry_points);  TreeSet<String> all_banned_methods=new TreeSet<String>();  for (  Method ie : entry_points) {    buf.append("<h4> " + ie.toString().replaceAll("<","&lt;") + "</h4>\n");    List<Method> outm=new ArrayList<Method>(eventBlocks.get(ie));    Collections.sort(outm);    List<String> methods=new ArrayList<String>();    List<String> banned_methods=new ArrayList<String>();    for (    Method oe : outm) {      String msig="";      String dbSig=oe.getSignature();      boolean unsup=!API.v().isSupportedMethod(oe.getSootMethod());      if (unsup) {        msig+="<b>";      }      String txt=oe.toSignatureString().replaceAll("<","&lt;");      msig+=API.v().api_xref(dbSig,txt);      if (unsup) {        msig+="</b>";        banned_methods.add(dbSig);      }      String calls=String.format("<span title='%s'>[%d calls]</span>",source_locations_to_title(oe),oe.getLines().size());      methods.add(msig + calls);    }    for (    String m : methods) {      buf.append(m + "<br>\n");    }    Collections.sort(banned_methods);    if (banned_methods.size() > 0)     buf.append("<br>");    for (    String m : banned_methods) {      m=m.replaceFirst("^<","");      m=m.replaceFirst(">$","");      m=m.replaceAll("<","&lt;");      all_banned_methods.add(m);      buf.append(m + "<br>\n");    }  }  buf.append("\n<p>" + all_banned_methods.size() + " banned methods<p>\n");  for (  String m : all_banned_methods)   buf.append(m + "<br>\n");  return buf.toString();}  }
class C{  @RabbitListener(queues="${hawkbit.dmf.rabbitmq.authenticationReceiverQueue}",containerFactory="listenerContainerFactory") public Message onAuthenticationRequest(final Message message){  checkContentTypeJson(message);  final SecurityContext oldContext=SecurityContextHolder.getContext();  try {    return handleAuthenticationMessage(message);  } catch (  final RuntimeException ex) {    throw new AmqpRejectAndDontRequeueException(ex);  } finally {    SecurityContextHolder.setContext(oldContext);  }}  }
class C{  public static void clearOldFiles(){  clearOldFiles(defaultPath);}  }
class C{  public void stopAllInspectors(boolean killDraggedOutWindowsToo){  Iterator i=allInspectors.keySet().iterator();  while (i.hasNext()) {    Inspector insp=(Inspector)(i.next());    insp.updateInspector();    insp.repaint();  }  for (int x=0; x < inspectorStoppables.size(); x++) {    Stoppable stopper=((Stoppable)(inspectorStoppables.elementAt(x)));    if (stopper != null)     stopper.stop();  }  if (killDraggedOutWindowsToo) {    i=allInspectors.keySet().iterator();    while (i.hasNext()) {      Inspector insp=(Inspector)(i.next());      Stoppable stopper=(Stoppable)(allInspectors.get(insp));      if (stopper != null)       stopper.stop();    }  }}  }
class C{  public void waitForFrame(int frameNumber,String jumpLabel) throws IOException {  print("waitForFrame",new String[]{Integer.toString(frameNumber),"\"" + jumpLabel + "\""});}  }
class C{  public boolean isAbstract(){  return false;}  }
class C{  public static void resetTerminalInCookie(HttpServletResponse response){  Cookie cookie=new Cookie(Constants.POSTERMINAL,"");  response.addCookie(cookie);}  }
class C{  public IndexFile(final File dir) throws IOException {  mPrereadArm=PrereadArm.UNKNOWN;  mPrereadType=PrereadType.UNKNOWN;  mSdfId=new SdfId(0);  final File index=new File(dir,SdfFileUtils.INDEX_FILENAME);  try (DataInputStream indexStream=new DataInputStream(new BufferedInputStream(new FileInputStream(index),FileUtils.BUFFERED_STREAM_SIZE))){    final PrereadHashFunction headerHash=new PrereadHashFunction();    version1Load(indexStream,headerHash,dir);    if (mVersion > VERSION) {      throw new NoTalkbackSlimException("The SDF " + dir.toString() + " has been created with a newer version of RTG tools and cannot be read with this version.");    }    loadVersion3Fields(indexStream,headerHash);    loadVersion4Fields(indexStream,headerHash,dir);    loadVersion6Fields(indexStream,headerHash);    loadVersion8Fields(indexStream,headerHash);    loadVersion9Fields();    loadVersion10Fields(indexStream,headerHash);    loadVersion12Fields(indexStream,headerHash);    loadVersion13Fields(indexStream,headerHash);    checksumLoad(indexStream,headerHash,dir);  } catch (  final EOFException e) {    throw new CorruptSdfException(dir);  }}  }
class C{  public ol addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @Override public boolean incrementToken() throws IOException {  if (savedState != null) {    restoreState(savedState);    savedState=null;    saveTermBuffer();    return true;  } else   if (!input.incrementToken()) {    return false;  }  if (lastWasCommon || (isCommon() && buffer.length() > 0)) {    savedState=captureState();    gramToken();    return true;  }  saveTermBuffer();  return true;}  }
class C{  public static <T>List<T> createProxies(Optional<SSLSocketFactory> sslSocketFactory,Collection<String> endpointUris,Class<T> type){  List<T> ret=Lists.newArrayListWithCapacity(endpointUris.size());  for (  String uri : endpointUris) {    ret.add(createProxy(sslSocketFactory,uri,type));  }  return ret;}  }
class C{  @Scheduled(cron="0 0 1 * * ?") public void removeNotActivatedUsers(){  ZonedDateTime now=ZonedDateTime.now();  List<User> users=userRepository.findAllByActivatedIsFalseAndCreatedDateBefore(now.minusDays(3));  for (  User user : users) {    log.debug("Deleting not activated user {}",user.getLogin());    userRepository.delete(user);  }}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  public static void createHorizontalSpacer(Composite comp,int numlines){  Label lbl=new Label(comp,SWT.NONE);  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=numlines;  lbl.setLayoutData(gd);}  }
class C{  private final void addToTokenQueue(String s){  m_compiler.getTokenQueue().addElement(s);}  }
class C{  protected void checkOpen(){  Preconditions.checkState(!this.closed,"Operations cannot be performed on closed TransactionManager.");}  }
class C{  public boolean containsType(GasStack stack){  if (stack == null || stack.amount == 0) {    return false;  }  return stack.isGasEqual(leftGas) || stack.isGasEqual(rightGas);}  }
class C{  protected void requestResource(DrawContext dc){  if (WorldWind.getTaskService().isFull())   return;  KMLLink link=this.getLinkOrUrl();  if (link == null)   return;  String address=link.getAddress(dc);  if (address != null)   address=address.trim();  if (WWUtil.isEmpty(address))   return;  if (this.hasNetworkLinkControl() && this.getRoot().getNetworkLinkControl().getCookie() != null)   address=address + this.getRoot().getNetworkLinkControl().getCookie();  WorldWind.getTaskService().addTask(new RequestTask(this,address));}  }
class C{  @Override public NativePooledByteBuffer newByteBuffer(InputStream inputStream) throws IOException {  NativePooledByteBufferOutputStream outputStream=new NativePooledByteBufferOutputStream(mPool);  try {    return newByteBuf(inputStream,outputStream);  }  finally {    outputStream.close();  }}  }
class C{  public Walker(byte[] data){  info=data;  numOfEntries=ByteArray.readU16bit(data,0);}  }
class C{  protected void generateIndividualSeries(ResultKey key,DefaultTableXYDataset dataset){  for (  Accumulator accumulator : controller.get(key)) {    if (!accumulator.keySet().contains(metric)) {      continue;    }    XYSeries series=new XYSeries(key,false,false);    for (int i=0; i < accumulator.size(metric); i++) {      series.add((Number)accumulator.get("NFE",i),(Number)accumulator.get(metric,i));    }    dataset.addSeries(series);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public FormatException(String s,Throwable rootCause){  super(s + ": " + rootCause.getLocalizedMessage());  this.rootCause=rootCause;}  }
class C{  public void updateClientTimeout(TimeSpan span) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  if (span != null)   scope.setAttribute("clienttimeout",span.getDay() + "," + span.getHour()+ ","+ span.getMinute()+ ","+ span.getSecond()); else   scope.removeAttribute("clienttimeout");  if (scope.hasAttribute("client-max-age"))   scope.removeAttribute("client-max-age");}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ColorBlock)) {    return false;  }  ColorBlock that=(ColorBlock)obj;  if (!PaintUtilities.equal(this.paint,that.paint)) {    return false;  }  return super.equals(obj);}  }
class C{  private void scan(Detail detail) throws Exception {  DefaultType access=detail.getOverride();  Class type=detail.getType();  while (type != null) {    Detail value=support.getDetail(type,access);    namespace(value);    method(value);    definition(value);    type=value.getSuper();  }  commit(detail);}  }
class C{  public DateTime toDateTime(DateTimeZone zone){  zone=DateTimeUtils.getZone(zone);  Chronology chrono=iChronology.withZone(zone);  return new DateTime(getYear(),getMonthOfYear(),getDayOfMonth(),getHourOfDay(),getMinuteOfHour(),getSecondOfMinute(),getMillisOfSecond(),chrono);}  }
class C{  @LogMessageDoc(level="ERROR",message="Error {error type} {error code} from {switch} " + "in state {state}",explanation="The switch responded with an unexpected error" + "to an OpenFlow message from the controller",recommendation="This could indicate improper network operation. " + "If the problem persists restarting the switch and " + "controller may help.") protected void logError(OFErrorMsg error){  log.error("{} from switch {} in state {}",new Object[]{error.toString(),getSwitchInfoString(),this.toString()});}  }
class C{  public void notPrimary(InternalDistributedMember member){  if (!member.equals(getDistributionManager().getId())) {    removePrimary(member);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementreplaceexistingattribute.class,args);}  }
class C{  private char[] createTypeDisplayName(char[] typeSignature) throws IllegalArgumentException {  char[] displayName=Signature.getSimpleName(Signature.toCharArray(typeSignature));  boolean useShortGenerics=false;  if (useShortGenerics) {    StringBuffer buf=new StringBuffer();    buf.append(displayName);    int pos;    do {      pos=buf.indexOf("? extends ");      if (pos >= 0) {        buf.replace(pos,pos + 10,"+");      } else {        pos=buf.indexOf("? super ");        if (pos >= 0)         buf.replace(pos,pos + 8,"-");      }    } while (pos >= 0);    return buf.toString().toCharArray();  }  return displayName;}  }
class C{  private void close(){  saveSettings();  if (scheduledCommercialTime != 0) {    int result=confirmContinueScheduledOnClose();    if (result != JOptionPane.CLOSED_OPTION) {      if (result == 1) {        clearScheduledCommercial();      }      super.setVisible(false);    }  } else {    super.setVisible(false);  }}  }
class C{  public String toDisplayString(){  if (origin_server != null)   resolveWeak();  if (domainName != null) {    String str;    if (type == SID_TYPE_DOMAIN) {      str=domainName;    } else     if (type == SID_TYPE_WKN_GRP || domainName.equals("BUILTIN")) {      if (type == SID_TYPE_UNKNOWN) {        str=toString();      } else {        str=acctName;      }    } else {      str=domainName + "\\" + acctName;    }    return str;  }  return toString();}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public UpgradeRequest(String... indices){  super(indices);}  }
class C{  public Builder add(Term term){  return add(new Term[]{term});}  }
class C{  public boolean isModified(){  boolean is;  if (m_editFlag == FolderEditFlag.NONE)   is=false; else   is=true;  return is;}  }
class C{  public void insert(byte[] object){  for (int i=0; i < hashFuncs; i++)   Utils.setBitLE(data,hash(i,object));}  }
class C{  public String name(){  return theType.name();}  }
class C{  public void rebuildClassifier(int new_chain[],Instances D) throws Exception {}  }
class C{  public void testRenameDirectoryParentRootSourceMissing() throws Exception {  IgfsPath dir1=new IgfsPath("/dir1");  IgfsPath dir2=new IgfsPath("/dir2");  create(igfsSecondary,paths(dir1),null);  create(igfs,null,null);  igfs.rename(dir1,dir2);  checkExist(igfs,igfsSecondary,dir2);  checkNotExist(igfs,igfsSecondary,dir1);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  addPreferencesFromResource(R.xml.preferences);}  }
class C{  @Override public void addLafManagerListener(@NotNull final LafManagerListener l){  myListenerList.add(LafManagerListener.class,l);}  }
class C{  public static void add(final Type type){  threadLocal.get().add(type);}  }
class C{  public boolean isGradientEnabled(){  return mGradientEnabled;}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  if (DOCSTATUS_Closed.equals(getDocStatus()) || DOCSTATUS_Reversed.equals(getDocStatus()) || DOCSTATUS_Voided.equals(getDocStatus())) {    m_processMsg="Document Closed: " + getDocStatus();    return false;  }  if (DOCSTATUS_Drafted.equals(getDocStatus()) || DOCSTATUS_Invalid.equals(getDocStatus()) || DOCSTATUS_InProgress.equals(getDocStatus())|| DOCSTATUS_Approved.equals(getDocStatus())|| DOCSTATUS_NotApproved.equals(getDocStatus())) {    MMovementLine[] lines=getLines(false);    for (int i=0; i < lines.length; i++) {      MMovementLine line=lines[i];      BigDecimal old=line.getMovementQty();      if (old.compareTo(Env.ZERO) != 0) {        line.setMovementQty(Env.ZERO);        line.addDescription("Void (" + old + ")");        line.saveEx();      }    }  } else {    return reverseCorrectIt();  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  private static boolean matchNaN(CharSequence str,char firstchar,int start,int end){  final int len=end - start;  if (len < 2 || len > 3) {    return false;  }  if (firstchar != 'N' && firstchar != 'n') {    return false;  }  final char c1=str.charAt(start + 1);  if (c1 != 'a' && c1 != 'A') {    return false;  }  if (len == 2) {    return true;  }  final char c2=str.charAt(start + 2);  if (c2 != 'N' && c2 != 'n') {    return false;  }  return true;}  }
class C{  public void addColumn(Class classType,boolean readOnly,String header){  m_modelHeaderClass.add(classType);  setColumnReadOnly(m_modelHeaderClass.size() - 1,readOnly);  addColumn(header);  WListItemRenderer renderer=(WListItemRenderer)getItemRenderer();  renderer.setColumnClass((renderer.getNoColumns() - 1),classType);  return;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  protected String engineGetURI(){  return TransformBase64Decode.implementedTransformURI;}  }
class C{  public void test1(){  final GridLayoutManager layout=new GridLayoutManager(1,3,new Insets(0,0,0,0),7,0);  layout.setSameSizeHorizontally(true);  final JPanel panel=new JPanel(layout);  final JTextField field1=new JTextField();  field1.setMinimumSize(new Dimension(5,20));  field1.setPreferredSize(new Dimension(10,20));  final JTextField field2=new JTextField();  field2.setMinimumSize(new Dimension(25,20));  field2.setPreferredSize(new Dimension(50,20));  final JTextField field3=new JTextField();  field3.setMinimumSize(new Dimension(70,20));  field3.setPreferredSize(new Dimension(100,20));  panel.add(field1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field3,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension minimumSize=panel.getMinimumSize();  assertEquals(70 + 7 + 70+ 7+ 70,minimumSize.width);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(100 + 7 + 100+ 7+ 100,preferredSize.width);  panel.setSize(panel.getPreferredSize());  panel.doLayout();  assertEquals(100,field1.getWidth());  assertEquals(100,field2.getWidth());  assertEquals(100,field3.getWidth());  panel.setSize(new Dimension(1000,1000));  panel.doLayout();  assertEquals(329,field1.getWidth());  assertEquals(329,field2.getWidth());  assertEquals(328,field3.getWidth());}  }
class C{  @Override public boolean logModified(Logger log){  return _depend.logModified(log);}  }
class C{  public GasTank(int max){  maxGas=max;}  }
class C{  public void testDoubleValueNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  double result=-1.2380964839238476E53;  assertEquals("incorrect value",result,aNumber.doubleValue(),0);}  }
class C{  public void prepare() throws ReplicatorException, InterruptedException {  logger.info(String.format("Using directory '%s' for replicator logs",logDirName));  logger.info("Checksums enabled for log records: " + doChecksum);  if (logger.isDebugEnabled()) {    logger.debug("logFileSize = " + logFileSize);  }  logDir=new File(logDirName);  if (!logDir.exists()) {    if (readOnly) {      throw new ReplicatorException("Log directory does not exist : " + logDir.getAbsolutePath());    } else {      logger.info("Log directory does not exist; creating now:" + logDir.getAbsolutePath());      if (!logDir.mkdirs()) {        throw new ReplicatorException("Unable to create log directory: " + logDir.getAbsolutePath());      }    }  }  if (!logDir.isDirectory()) {    throw new ReplicatorException("Log directory is not a directory: " + logDir.getAbsolutePath());  }  if (readOnly) {    logger.info("Using read-only log connection");  } else {    if (!logDir.canWrite()) {      throw new ReplicatorException("Log directory is not writable: " + logDir.getAbsolutePath());    }    File lockFile=new File(logDir,"disklog.lck");    if (logger.isDebugEnabled()) {      logger.debug("Attempting to acquire lock on write lock file: " + lockFile.getAbsolutePath());    }    writeLock=new WriteLock(lockFile);    writeLock.acquire();    if (writeLock.isLocked())     logger.info("Acquired write lock; log is writable"); else     logger.info("Unable to acquire write lock; log is read-only");  }  try {    eventSerializer=(Serializer)Class.forName(eventSerializerClass).newInstance();  } catch (  Exception e) {    throw new ReplicatorException("Unable to load event serializer class: " + eventSerializerClass,e);  }  logger.info("Loaded event serializer class: " + eventSerializer.getClass().getName());  if (listLogFiles(logDir,DATA_FILENAME_PREFIX).length == 0) {    if (readOnly) {      throw new ReplicatorException("Attempting to read a non-existent log; is log initialized? dirName=" + logDir.getAbsolutePath());    } else {      String logFileName=getDataFileName(fileIndex);      LogFile logFile=new LogFile(logDir,logFileName);      logFile.setBufferSize(bufferSize);      logger.info("Initializing logs: logDir=" + logDir.getAbsolutePath() + " file="+ logFile.getFile().getName());      logFile.create(-1);      logFile.close();    }  }  if (logger.isDebugEnabled())   logger.debug("Preparing index");  index=new LogIndex(logDir,DATA_FILENAME_PREFIX,logFileRetainMillis,bufferSize,isWritable());  String logFileName=index.getLastFile();  int logFileIndexPos=logFileName.lastIndexOf(".");  fileIndex=Long.valueOf(logFileName.substring(logFileIndexPos + 1));  LogFile logFile=null;  boolean recoveryComplete=false;  try {    int iteration=0;    while (!recoveryComplete && iteration < 2) {      iteration++;      logFile=openLastFile(readOnly);      long maxSeqno=logFile.getBaseSeqno();      long lastCompleteEventOffset=LogFile.HEADER_LENGTH;      boolean logFileIsEmpty=true;      boolean lastFrag=true;      if (logger.isDebugEnabled())       logger.debug("Starting max seqno is " + maxSeqno);      logger.info("Validating last log file: " + logFile.getFile().getAbsolutePath());      LogRecord currentRecord=null;      currentRecord=logFile.readRecord(0);      byte lastRecordType=-1;      while (!currentRecord.isEmpty()) {        lastRecordType=currentRecord.getData()[0];        if (lastRecordType == LogRecord.EVENT_REPL) {          LogEventReplReader eventReader=new LogEventReplReader(currentRecord,eventSerializer,doChecksum);          lastFrag=eventReader.isLastFrag();          if (lastFrag) {            logFileIsEmpty=false;            maxSeqno=eventReader.getSeqno();            lastCompleteEventOffset=logFile.getOffset();          }          eventReader.done();        } else         if (lastRecordType == LogRecord.EVENT_ROTATE) {          String fileName=logFile.getFile().getName();          logger.info("Last log file ends on rotate log event: " + fileName);          logFile.close();          if (isWritable()) {            if (maxSeqno <= -1) {              throw new LogConsistencyException("Last log file consists of header plus rotate log event only: " + fileName);            }            logFile.setLength(lastCompleteEventOffset);            index.setMaxIndexedSeqno(maxSeqno);          }          recoveryComplete=true;          break;        }        currentRecord=logFile.readRecord(0);      }      if (recoveryComplete)       continue;      index.setMaxIndexedSeqno(maxSeqno);      if (!lastFrag) {        if (isWritable()) {          logger.warn("Log file contains partially written transaction; " + "truncating to last full transaction: seqno=" + maxSeqno + " length="+ lastCompleteEventOffset);          logFile.setLength(lastCompleteEventOffset);        } else {          logger.warn("Log ends with a partially written " + "transaction, but this log is read-only.  " + "It is possible that the process that "+ "owns the write lock is still writing it.");        }      } else       if (currentRecord.isTruncated()) {        if (isWritable()) {          logger.warn("Log file contains partially written record: offset=" + currentRecord.getOffset() + " partially written bytes="+ (logFile.getLength() - currentRecord.getOffset()));          logFile.setLength(currentRecord.getOffset());          logger.info("Log file truncated to end of last good record: length=" + logFile.getLength());        } else {          logger.warn("Log ends with a partially written record " + "at end, but this log is read-only.  " + "It is possible that the process that "+ "owns the write lock is still writing it.");          break;        }      }      if (logFileIsEmpty && index.size() > 1) {        if (isWritable()) {          if (iteration == 1) {            File emptyFile=logFile.getFile();            logger.warn("Log ends with an empty file: name=" + emptyFile.getAbsolutePath());            logFile.close();            logFile=null;            if (!emptyFile.delete()) {              throw new LogConsistencyException("Unable to delete empty log file: " + emptyFile.getAbsolutePath());            }            index.removeFile(index.getLastFile());          } else {            throw new LogConsistencyException("Unable to clean up multiple empty files at end of log; use 'thl index' to check logs");          }        } else {          logger.warn("Ignoring empty file at end of log as we are not writable");          recoveryComplete=true;        }      } else       if (maxSeqno >= 0) {        recoveryComplete=true;      } else       if (index.size() <= 1) {        recoveryComplete=true;      }    }  } catch (  IOException e) {    throw new ReplicatorException("I/O error while scanning log file: name=" + logFile.getFile().getAbsolutePath() + " offset="+ logFile.getOffset(),e);  } finally {    if (logFile != null)     logFile.close();  }  logger.info("Setting up log flush policy: fsyncIntervalMillis=" + flushIntervalMillis + " fsyncOnFlush="+ this.fsyncOnFlush);  if (!this.readOnly) {    startLogSyncTask();  }  this.cursorManager=new LogCursorManager();  cursorManager.setTimeoutMillis(logConnectionTimeoutMillis);  logger.info(String.format("Idle log connection timeout: %dms",logConnectionTimeoutMillis));  logger.info("Log preparation is complete");}  }
class C{  public static Class<?> loadClass(String name) throws ClassNotFoundException {  return loadClass(name,false,null);}  }
class C{  public static InstructionFragment newInstance(Recipe recipe,int sectionNumber){  InstructionFragment fragment=new InstructionFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  static public void fail(){  fail(null);}  }
class C{  public static GridJavaProcess exec(Class cls,String params,@Nullable IgniteLogger log,@Nullable IgniteInClosure<String> printC,@Nullable GridAbsClosure procKilledC) throws Exception {  return exec(cls.getCanonicalName(),params,log,printC,procKilledC,null,null,null);}  }
class C{  private void updateHomeTime(){  String tz=Utils.getTimeZone(mActivity,null);  if (!mAllDayCheckBox.isChecked() && !TextUtils.equals(tz,mTimezone) && mModification != EditEventHelper.MODIFY_UNINITIALIZED) {    int flags=DateUtils.FORMAT_SHOW_TIME;    boolean is24Format=DateFormat.is24HourFormat(mActivity);    if (is24Format) {      flags|=DateUtils.FORMAT_24HOUR;    }    long millisStart=mStartTime.toMillis(false);    long millisEnd=mEndTime.toMillis(false);    boolean isDSTStart=mStartTime.isDst != 0;    boolean isDSTEnd=mEndTime.isDst != 0;    String tzDisplay=TimeZone.getTimeZone(tz).getDisplayName(isDSTStart,TimeZone.SHORT,Locale.getDefault());    StringBuilder time=new StringBuilder();    mSB.setLength(0);    time.append(DateUtils.formatDateRange(mActivity,mF,millisStart,millisStart,flags,tz)).append(" ").append(tzDisplay);    mStartTimeHome.setText(time.toString());    flags=DateUtils.FORMAT_ABBREV_ALL | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR| DateUtils.FORMAT_SHOW_WEEKDAY;    mSB.setLength(0);    mStartDateHome.setText(DateUtils.formatDateRange(mActivity,mF,millisStart,millisStart,flags,tz).toString());    if (isDSTEnd != isDSTStart) {      tzDisplay=TimeZone.getTimeZone(tz).getDisplayName(isDSTEnd,TimeZone.SHORT,Locale.getDefault());    }    flags=DateUtils.FORMAT_SHOW_TIME;    if (is24Format) {      flags|=DateUtils.FORMAT_24HOUR;    }    time.setLength(0);    mSB.setLength(0);    time.append(DateUtils.formatDateRange(mActivity,mF,millisEnd,millisEnd,flags,tz)).append(" ").append(tzDisplay);    mEndTimeHome.setText(time.toString());    flags=DateUtils.FORMAT_ABBREV_ALL | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_SHOW_YEAR| DateUtils.FORMAT_SHOW_WEEKDAY;    mSB.setLength(0);    mEndDateHome.setText(DateUtils.formatDateRange(mActivity,mF,millisEnd,millisEnd,flags,tz).toString());    mStartHomeGroup.setVisibility(View.VISIBLE);    mEndHomeGroup.setVisibility(View.VISIBLE);  } else {    mStartHomeGroup.setVisibility(View.GONE);    mEndHomeGroup.setVisibility(View.GONE);  }}  }
class C{  @Override public void roll(int field,int value){  if (value == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  complete();  int days, day, mod, maxWeeks, newWeek;  int max=-1;switch (field) {case YEAR:    max=maximums[field];  break;case WEEK_OF_YEAR:days=daysInYear(fields[YEAR]);day=DAY_OF_YEAR;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {int addDays=(newWeek - fields[field]) * 7;if (fields[day] > addDays && fields[day] + addDays > days) {set(field,1);} else {set(field,newWeek - 1);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(field,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case WEEK_OF_MONTH:days=daysInMonth();day=DATE;mod=mod7(fields[DAY_OF_WEEK] - fields[day] - (getFirstDayOfWeek() - 1));maxWeeks=(days - 1 + mod) / 7 + 1;newWeek=mod(fields[field] - 1 + value,maxWeeks) + 1;if (newWeek == maxWeeks) {if (fields[day] + (newWeek - fields[field]) * 7 > days) {set(day,days);} else {set(field,newWeek);}} else if (newWeek == 1) {int week=(fields[day] - ((fields[day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;if (week > 1) {set(day,1);} else {set(field,newWeek);}} else {set(field,newWeek);}break;case DATE:max=daysInMonth();break;case DAY_OF_YEAR:max=daysInYear(fields[YEAR]);break;case DAY_OF_WEEK:max=maximums[field];lastDateFieldSet=WEEK_OF_MONTH;break;case DAY_OF_WEEK_IN_MONTH:max=(fields[DATE] + ((daysInMonth() - fields[DATE]) / 7 * 7) - 1) / 7 + 1;break;case ERA:case MONTH:case AM_PM:case HOUR:case HOUR_OF_DAY:case MINUTE:case SECOND:case MILLISECOND:set(field,mod(fields[field] + value,maximums[field] + 1));if (field == MONTH && fields[DATE] > daysInMonth()) {set(DATE,daysInMonth());} else if (field == AM_PM) {lastTimeFieldSet=HOUR;}break;}if (max != -1) {set(field,mod(fields[field] - 1 + value,max) + 1);}complete();}  }
class C{  public Map<String,String> parse(final String str,char[] separators){  if (separators == null || separators.length == 0) {    return new HashMap<String,String>();  }  char separator=separators[0];  if (str != null) {    int idx=str.length();    for (    char separator2 : separators) {      int tmp=str.indexOf(separator2);      if (tmp != -1 && tmp < idx) {        idx=tmp;        separator=separator2;      }    }  }  return parse(str,separator);}  }
class C{  public static Match createCopy(Match m){  return m.createBuilder().build();}  }
class C{  public SQLWarning(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  static void executeRemoteCommand(InetSocketAddress adbSockAddr,String command,Device device,IShellOutputReceiver rcvr,long maxTimeToOutputResponse,TimeUnit maxTimeUnits) throws TimeoutException, AdbCommandRejectedException, ShellCommandUnresponsiveException, IOException {  executeRemoteCommand(adbSockAddr,AdbService.SHELL,command,device,rcvr,maxTimeToOutputResponse,maxTimeUnits,null);}  }
class C{  public long writeLock(){  long s, next;  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : acquireWrite(false,0L));}  }
class C{  private static <T>Class<? super T> implementsMBean(Class<T> c,String clName){  String clMBeanName=clName + "MBean";  if (c.getName().equals(clMBeanName)) {    return c;  }  Class<?>[] interfaces=c.getInterfaces();  for (int i=0; i < interfaces.length; i++) {    if (interfaces[i].getName().equals(clMBeanName) && (Modifier.isPublic(interfaces[i].getModifiers()) || ALLOW_NONPUBLIC_MBEAN)) {      return Util.cast(interfaces[i]);    }  }  return null;}  }
class C{  private void resetThemeProps(Hashtable installedTheme){  themeProps=new HashMap<String,Object>();  wasThemeInstalled=false;  String disabledColor=Integer.toHexString(getLookAndFeel().getDisableColor());  Integer centerAlign=new Integer(Component.CENTER);  Integer rightAlign=new Integer(Component.RIGHT);  Integer leftAlign=new Integer(Component.LEFT);  themeProps.put("sel#transparency","255");  themeProps.put("dis#fgColor",disabledColor);  Font thinFont=Font.getDefaultFont();  Font lightFont=thinFont;  Font italic=Font.createSystemFont(Font.FACE_SYSTEM,Font.STYLE_ITALIC,Font.SIZE_MEDIUM);  if (Font.isNativeFontSchemeSupported()) {    int size=Display.getInstance().convertToPixels(2.5f);    thinFont=Font.createTrueTypeFont("native:MainThin","native:MainThin").derive(size,Font.STYLE_PLAIN);    lightFont=Font.createTrueTypeFont("native:MainLight","native:MainLight").derive(size,Font.STYLE_PLAIN);    italic=Font.createTrueTypeFont("native:ItalicLight","native:ItalicLight").derive(size,Font.STYLE_ITALIC);  }  if (installedTheme == null || !installedTheme.containsKey("ToolbarSearch.derive")) {    themeProps.put("ToolbarSearch.derive","Toolbar");  }  if (installedTheme == null || !installedTheme.containsKey("TextFieldSearch.derive")) {    themeProps.put("TextFieldSearch.derive","Title");    themeProps.put("TextFieldSearch.align",leftAlign);    themeProps.put("TextFieldSearch.sel#align",leftAlign);    themeProps.put("TextFieldSearch.press#align",leftAlign);    themeProps.put("TextFieldSearch.dis#align",leftAlign);    themeProps.put("TextFieldSearch.sel#derive","TextFieldSearch");    themeProps.put("TextFieldSearch.press#derive","TextFieldSearch");    themeProps.put("TextFieldSearch.dis#derive","TextFieldSearch");  }  if (installedTheme == null || !installedTheme.containsKey("TextHintSearch.derive")) {    themeProps.put("TextHintSearch.derive","TextHint");    themeProps.put("TextHintSearch.transparency","0");  }  if (installedTheme == null || !installedTheme.containsKey("AccordionItem.derive")) {    themeProps.put("AccordionItem.margin","0,0,0,0");    themeProps.put("AccordionItem.padding","1,1,1,1");    themeProps.put("AccordionItem.border",Border.createLineBorder(1));  }  if (installedTheme == null || !installedTheme.containsKey("AccordionHeader.derive")) {    themeProps.put("AccordionHeader.margin","0,0,0,0");    themeProps.put("AccordionHeader.sel#margin","0,0,0,0");    themeProps.put("AccordionHeader.press#margin","0,0,0,0");    themeProps.put("AccordionHeader.padding","0,0,0,0");    themeProps.put("AccordionHeader.sel#padding","0,0,0,0");    themeProps.put("AccordionHeader.press#padding","0,0,0,0");  }  if (installedTheme == null || !installedTheme.containsKey("SignatureButton.derive")) {    themeProps.put("SignatureButton.align",centerAlign);    themeProps.put("SignatureButton.sel#derive","SignatureButton");    themeProps.put("SignatureButton.press#derive","SignatureButton");    themeProps.put("SignatureButton.dis#derive","SignatureButton");  }  if (installedTheme == null || !installedTheme.containsKey("ToastBar.derive")) {    themeProps.put("ToastBar.margin","0,0,0,0");    themeProps.put("ToastBar.bgColor","0");    themeProps.put("ToastBar.transparency","200");    themeProps.put("ToastBar.bgType",new Byte(Style.BACKGROUND_NONE));    themeProps.put("ToastBar.border",Border.createEmpty());    themeProps.put("ToastBar.sel#derive","ToastBar");    themeProps.put("ToastBar.press#derive","ToastBar");    themeProps.put("ToastBar.dis#derive","ToastBar");  }  if (installedTheme == null || !installedTheme.containsKey("ToastBarMessage.derive")) {    themeProps.put("ToastBarMessage.font",lightFont);    themeProps.put("ToastBarMessage.transparency","0");    themeProps.put("ToastBarMessage.fgColor","FFFFFF");    themeProps.put("ToastBarMessage.bgType",new Byte(Style.BACKGROUND_NONE));    themeProps.put("ToastBarMessage.border",Border.createEmpty());    themeProps.put("ToastBarMessage.sel#derive","ToastBarMessage");    themeProps.put("ToastBarMessage.press#derive","ToastBarMessage");    themeProps.put("ToastBarMessage.dis#derive","ToastBarMessage");  }  if (installedTheme == null || !installedTheme.containsKey("Button.derive")) {    themeProps.put("Button.border",Border.getDefaultBorder());    themeProps.put("Button.padding","4,4,4,4");  }  if (installedTheme == null || !installedTheme.containsKey("Button.sel#derive")) {    themeProps.put("Button.sel#border",Border.getDefaultBorder());    themeProps.put("Button.sel#bgColor","a0a0a0");    themeProps.put("Button.sel#padding","4,4,4,4");  }  if (installedTheme == null || !installedTheme.containsKey("Button.press#derive")) {    themeProps.put("Button.press#border",Border.getDefaultBorder().createPressedVersion());    themeProps.put("Button.press#derive","Button");    themeProps.put("Button.press#padding","4,4,4,4");  }  themeProps.put("Button.dis#derive","Button");  if (installedTheme == null || !installedTheme.containsKey("CalendarTitle.derive")) {    themeProps.put("CalendarTitle.align",centerAlign);  }  if (installedTheme == null || !installedTheme.containsKey("CalendarSelectedDay.derive")) {    themeProps.put("CalendarSelectedDay.border",Border.getDefaultBorder());    themeProps.put("CalendarSelectedDay.align",centerAlign);  }  themeProps.put("CalendarSelectedDay.sel#derive","CalendarSelectedDay");  if (installedTheme == null || !installedTheme.containsKey("CalendarDay.derive")) {    themeProps.put("CalendarDay.align",centerAlign);  }  themeProps.put("CalendarDay.dis#derive","CalendarDay");  themeProps.put("CalendarDay.press#derive","CalendarDay");  if (installedTheme == null || !installedTheme.containsKey("CalendarDay.sel#derive")) {    themeProps.put("CalendarDay.sel#align",centerAlign);  }  if (installedTheme == null || !installedTheme.containsKey("ComboBox.derive")) {    themeProps.put("ComboBox.border",Border.getDefaultBorder());  }  themeProps.put("ComboBox.sel#derive","ComboBox");  if (installedTheme == null || !installedTheme.containsKey("MenuButton.derive")) {    themeProps.put("MenuButton.transparency","0");  }  if (installedTheme == null || !installedTheme.containsKey("ComboBoxItem.derive")) {    themeProps.put("ComboBoxItem.margin","0,0,0,0");    themeProps.put("ComboBoxItem.transparency","0");  }  themeProps.put("ComboBoxItem.sel#derive","ComboBoxItem");  themeProps.put("ComboBoxItem.dis#derive","ComboBoxItem");  if (installedTheme == null || !installedTheme.containsKey("ComboBoxList.derive")) {    themeProps.put("ComboBoxList.margin","2,2,2,2");    themeProps.put("ComboBoxList.padding","0,0,0,0");    themeProps.put("ComboBoxList.transparency","0");  }  if (installedTheme == null || !installedTheme.containsKey("ComboBoxList.sel#derive")) {    themeProps.put("ComboBoxList.sel#margin","2,2,2,2");    themeProps.put("ComboBoxList.sel#padding","0,0,0,0");    themeProps.put("ComboBoxList.sel#transparency","0");  }  if (installedTheme == null || !installedTheme.containsKey("ComboBoxPopup.derive")) {    themeProps.put("ComboBoxPopup.border",Border.getDefaultBorder());  }  themeProps.put("ComboBoxPopup.sel#derive","ComboBoxPopup");  if (installedTheme == null || !installedTheme.containsKey("Command.derive")) {    themeProps.put("Command.margin","0,0,0,0");    themeProps.put("Command.transparency","0");  }  themeProps.put("Command.sel#derive","Command");  themeProps.put("Command.dis#derive","Command");  if (installedTheme == null || !installedTheme.containsKey("CommandList.derive")) {    themeProps.put("CommandList.margin","0,0,0,0");    themeProps.put("CommandList.padding","0,0,0,0");    themeProps.put("CommandList.transparency","0");  }  themeProps.put("CommandList.sel#derive","CommandList");  if (installedTheme == null || !installedTheme.containsKey("ComponentGroup.derive")) {    themeProps.put("ComponentGroup.derive","Container");  }  if (installedTheme == null || !installedTheme.containsKey("Container.derive")) {    themeProps.put("Container.transparency","0");    themeProps.put("Container.margin","0,0,0,0");    themeProps.put("Container.padding","0,0,0,0");  }  themeProps.put("Container.sel#derive","Container");  themeProps.put("Container.dis#derive","Container");  themeProps.put("Container.press#derive","Container");  if (installedTheme == null || !installedTheme.containsKey("OnOffSwitch.derive")) {    themeProps.put("OnOffSwitch.transparency","255");    themeProps.put("OnOffSwitch.bgColor","222222");    themeProps.put("OnOffSwitch.padding","0,0,0,0");    themeProps.put("OnOffSwitch.font",lightFont);  }  if (installedTheme == null || !installedTheme.containsKey("OnOffSwitch.sel#derive")) {    themeProps.put("OnOffSwitch.sel#transparency","255");    themeProps.put("OnOffSwitch.sel#bgColor","222222");    themeProps.put("OnOffSwitch.sel#padding","0,0,0,0");    themeProps.put("OnOffSwitch.sel#font",lightFont);  }  if (installedTheme == null || !installedTheme.containsKey("ContentPane.derive")) {    themeProps.put("ContentPane.transparency","0");    themeProps.put("ContentPane.margin","0,0,0,0");    themeProps.put("ContentPane.padding","0,0,0,0");  }  themeProps.put("ContentPane.sel#derive","ContentPane");  if (installedTheme == null || !installedTheme.containsKey("DialogContentPane.derive")) {    themeProps.put("DialogContentPane.margin","0,0,0,0");    themeProps.put("DialogContentPane.padding","0,0,0,0");    themeProps.put("DialogContentPane.transparency","0");  }  if (installedTheme == null || !installedTheme.containsKey("DialogTitle.derive")) {    themeProps.put("DialogTitle.align",centerAlign);  }  if (installedTheme == null || !installedTheme.containsKey("Form.derive")) {    themeProps.put("Form.padding","0,0,0,0");    themeProps.put("Form.margin","0,0,0,0");  }  themeProps.put("Form.sel#derive","Form");  if (installedTheme == null || !installedTheme.containsKey("HorizontalScroll.derive")) {    themeProps.put("HorizontalScroll.margin","0,0,0,0");    themeProps.put("HorizontalScroll.padding","1,1,1,1");  }  if (installedTheme == null || !installedTheme.containsKey("HorizontalScrollThumb.derive")) {    themeProps.put("HorizontalScrollThumb.padding","0,0,0,0");    themeProps.put("HorizontalScrollThumb.bgColor","0");    themeProps.put("HorizontalScrollThumb.margin","0,0,0,0");  }  if (installedTheme == null || !installedTheme.containsKey("List.derive")) {    themeProps.put("List.transparency","0");    themeProps.put("List.margin","0,0,0,0");  }  themeProps.put("List.sel#derive","List");  if (installedTheme == null || !installedTheme.containsKey("ListRenderer.derive")) {    themeProps.put("ListRenderer.transparency","0");  }  if (installedTheme == null || !installedTheme.containsKey("ListRenderer.sel#derive")) {    themeProps.put("ListRenderer.sel#transparency","100");  }  themeProps.put("ListRenderer.dis#derive","ListRenderer");  if (installedTheme == null || !installedTheme.containsKey("Menu.derive")) {    themeProps.put("Menu.padding","0,0,0,0");  }  themeProps.put("Menu.sel#derive","Menu");  if (installedTheme == null || !installedTheme.containsKey("PopupContentPane.derive")) {    themeProps.put("PopupContentPane.transparency","0");  }  if (installedTheme == null || !installedTheme.containsKey("Scroll.derive")) {    themeProps.put("Scroll.margin","0,0,0,0");    int halfMM=Display.getInstance().convertToPixels(10,true) / 20;    halfMM=Math.max(1,halfMM);    themeProps.put("Scroll.padding",halfMM + "," + halfMM+ ","+ halfMM+ ","+ halfMM);  }  if (installedTheme == null || !installedTheme.containsKey("ScrollThumb.derive")) {    themeProps.put("ScrollThumb.padding","0,0,0,0");    themeProps.put("ScrollThumb.margin","0,0,0,0");    themeProps.put("ScrollThumb.bgColor","0");  }  if (installedTheme == null || !installedTheme.containsKey("SliderFull.derive")) {    themeProps.put("SliderFull.bgColor","0");  }  themeProps.put("SliderFull.sel#derive","SliderFull");  if (installedTheme == null || !installedTheme.containsKey("SoftButton.derive")) {    themeProps.put("SoftButton.transparency","255");    themeProps.put("SoftButton.margin","0,0,0,0");    themeProps.put("SoftButton.padding","0,0,0,0");  }  themeProps.put("SoftButton.sel#derive","SoftButton");  if (installedTheme == null || !installedTheme.containsKey("SoftButtonCenter.derive")) {    themeProps.put("SoftButtonCenter.align",centerAlign);    themeProps.put("SoftButtonCenter.transparency","0");    themeProps.put("SoftButtonCenter.derive","SoftButton");    themeProps.put("SoftButtonCenter.padding","4,4,4,4");  }  themeProps.put("SoftButtonCenter.sel#derive","SoftButtonCenter");  themeProps.put("SoftButtonCenter.press#derive","SoftButtonCenter");  themeProps.put("SoftButtonCenter.dis#derive","SoftButtonCenter");  if (installedTheme == null || !installedTheme.containsKey("SoftButtonLeft.derive")) {    themeProps.put("SoftButtonLeft.transparency","0");    themeProps.put("SoftButtonLeft.derive","SoftButton");    themeProps.put("SoftButtonLeft.padding","4,4,4,4");  }  themeProps.put("SoftButtonLeft.sel#derive","SoftButtonLeft");  themeProps.put("SoftButtonLeft.press#derive","SoftButtonLeft");  themeProps.put("SoftButtonLeft.dis#derive","SoftButtonLeft");  if (installedTheme == null || !installedTheme.containsKey("SoftButtonRight.derive")) {    themeProps.put("SoftButtonRight.align",rightAlign);    themeProps.put("SoftButtonRight.transparency","0");    themeProps.put("SoftButtonRight.derive","SoftButton");    themeProps.put("SoftButtonRight.padding","4,4,4,4");  }  themeProps.put("SoftButtonRight.sel#derive","SoftButtonRight");  themeProps.put("SoftButtonRight.press#derive","SoftButtonRight");  themeProps.put("SoftButtonRight.dis#derive","SoftButtonRight");  if (installedTheme == null || !installedTheme.containsKey("Spinner.derive")) {    themeProps.put("Spinner.border",Border.getDefaultBorder());  }  themeProps.put("Spinner.sel#derive","Spinner");  if (installedTheme == null || !installedTheme.containsKey("SpinnerOverlay.derive")) {    themeProps.put("SpinnerOverlay.transparency","0");  }  if (installedTheme == null || !installedTheme.containsKey("Tab.derive")) {    themeProps.put("Tab.margin","1,1,1,1");  }  if (installedTheme == null || !installedTheme.containsKey("Tab.sel#derive")) {    themeProps.put("Tab.sel#derive","Tab");    themeProps.put("Tab.sel#border",Border.createLineBorder(1));  }  themeProps.put("TabbedPane.margin","0,0,0,0");  themeProps.put("TabbedPane.padding","0,0,0,0");  themeProps.put("TabbedPane.transparency","0");  themeProps.put("TabbedPane.sel#margin","0,0,0,0");  themeProps.put("TabbedPane.sel#padding","0,0,0,0");  if (installedTheme == null || !installedTheme.containsKey("Table.derive")) {    themeProps.put("Table.border",Border.getDefaultBorder());  }  themeProps.put("Table.sel#derive","Table");  if (installedTheme == null || !installedTheme.containsKey("TableCell.derive")) {    themeProps.put("TableCell.transparency","0");  }  themeProps.put("TableCell.sel#derive","TableCell");  if (installedTheme == null || !installedTheme.containsKey("TableHeader.derive")) {    themeProps.put("TableHeader.transparency","0");  }  themeProps.put("TableHeader.sel#derive","TableHeader");  if (installedTheme == null || !installedTheme.containsKey("Tabs.derive")) {    themeProps.put("Tabs.bgColor","a0a0a0");    themeProps.put("Tabs.padding","0,0,0,0");  }  if (installedTheme == null || !installedTheme.containsKey("TabsContainer.derive")) {    themeProps.put("TabsContainer.padding","0,0,0,0");    themeProps.put("TabsContainer.margin","0,0,0,0");    themeProps.put("TabsContainer.bgColor","a0a0a0");  }  if (installedTheme == null || !installedTheme.containsKey("TextArea.derive")) {    themeProps.put("TextArea.border",Border.getDefaultBorder());  }  themeProps.put("TextArea.sel#derive","TextArea");  themeProps.put("TextArea.dis#derive","TextArea");  if (installedTheme == null || !installedTheme.containsKey("TextField.derive")) {    themeProps.put("TextField.border",Border.getDefaultBorder());  }  themeProps.put("TextField.sel#derive","TextField");  themeProps.put("TextField.dis#derive","TextField");  if (installedTheme == null || !installedTheme.containsKey("TextFieldInvalid.derive")) {    themeProps.put("TextFieldInvalid.derive","TextField");    themeProps.put("TextFieldInvalid.fgColor","ff0000");    themeProps.put("TextFieldInvalid.sel#fgColor","ff0000");    themeProps.put("TextFieldInvalid.sel#fgColor","ff0000");    themeProps.put("TextFieldInvalid.sel#derive","TextField");    themeProps.put("TextFieldInvalid.dis#derive","TextField");  }  if (installedTheme == null || !installedTheme.containsKey("TextAreaInvalid.derive")) {    themeProps.put("TextAreaInvalid.derive","TextArea");    themeProps.put("TextAreaInvalid.fgColor","ff0000");    themeProps.put("TextAreaInvalid.sel#fgColor","ff0000");    themeProps.put("TextAreaInvalid.sel#fgColor","ff0000");    themeProps.put("TextAreaInvalid.sel#derive","TextArea");    themeProps.put("TextAreaInvalid.dis#derive","TextArea");  }  if (installedTheme == null || !installedTheme.containsKey("TextHint.derive")) {    themeProps.put("TextHint.transparency","0");    themeProps.put("TextHint.fgColor","cccccc");    themeProps.put("TextHint.font",italic);  }  if (installedTheme == null || !installedTheme.containsKey("Title.derive")) {    themeProps.put("Title.margin","0,0,0,0");    themeProps.put("Title.transparency","255");    themeProps.put("Title.align",centerAlign);  }  themeProps.put("Title.sel#derive","Title");  if (installedTheme == null || !installedTheme.containsKey("TitleArea.derive")) {    themeProps.put("TitleArea.transparency","0");    themeProps.put("TitleArea.margin","0,0,0,0");    themeProps.put("TitleArea.padding","0,0,0,0");  }  if (installedTheme == null || !installedTheme.containsKey("TouchCommand.derive")) {    themeProps.put("TouchCommand.border",Border.getDefaultBorder());    themeProps.put("TouchCommand.padding","10,10,10,10");    themeProps.put("TouchCommand.margin","0,0,0,0");    themeProps.put("TouchCommand.align",centerAlign);  }  if (installedTheme == null || !installedTheme.containsKey("TouchCommand.press#derive")) {    themeProps.put("TouchCommand.press#border",Border.getDefaultBorder().createPressedVersion());    themeProps.put("TouchCommand.press#derive","TouchCommand");  }  themeProps.put("TouchCommand.sel#derive","TouchCommand");  if (installedTheme == null || !installedTheme.containsKey("TouchCommand.dis#derive")) {    themeProps.put("TouchCommand.dis#derive","TouchCommand");    themeProps.put("TouchCommand.dis#fgColor",disabledColor);  }  if (installedTheme == null || !installedTheme.containsKey("AdsComponent.sel#derive")) {    themeProps.put("AdsComponent.sel#border",Border.getDefaultBorder());    themeProps.put("AdsComponent.sel#padding","2,2,2,2");    themeProps.put("AdsComponent.sel#transparency","0");  }  themeProps.put("AdsComponent#derive","Container");  themeProps.put("WebBrowser#derive","Container");  if (installedTheme == null || !installedTheme.containsKey("MapZoomOut.derive")) {    themeProps.put("MapZoomOut.derive","Button");  }  themeProps.put("MapZoomOut.sel#derive","Button.sel");  themeProps.put("MapZoomOut.press#derive","Button.press");  if (installedTheme == null || !installedTheme.containsKey("MapZoomIn.derive")) {    themeProps.put("MapZoomIn.derive","Button");  }  themeProps.put("MapZoomIn.sel#derive","Button.sel");  themeProps.put("MapZoomIn.press#derive","Button.press");  if (installedTheme == null || !installedTheme.containsKey("SideCommand.derive")) {    themeProps.put("SideCommand.derive","TouchCommand");    themeProps.put("SideCommand.align",leftAlign);  }  if (installedTheme == null || !installedTheme.containsKey("SideCommand.sel#.derive")) {    themeProps.put("SideCommand.sel#derive","TouchCommand.sel");    themeProps.put("SideCommand.sel#align",leftAlign);  }  if (installedTheme == null || !installedTheme.containsKey("SideCommand.press#.derive")) {    themeProps.put("SideCommand.press#derive","TouchCommand.press");    themeProps.put("SideCommand.press#align",leftAlign);  }  if (installedTheme == null || !installedTheme.containsKey("SideNavigationPanel.derive")) {    themeProps.put("SideNavigationPanel.padding","0,0,0,0");    themeProps.put("SideNavigationPanel.margin","0,0,0,0");    themeProps.put("SideNavigationPanel.bgColor","343434");    themeProps.put("SideNavigationPanel.transparency","255");  }  if (installedTheme == null || !installedTheme.containsKey("PullToRefresh.derive")) {    themeProps.put("PullToRefresh.padding","0,0,0,0");    themeProps.put("PullToRefresh.margin","0,0,0,0");    themeProps.put("PullToRefresh.align",centerAlign);    themeProps.put("PullToRefresh.transparency","0");    themeProps.put("PullToRefresh.fgColor","0");  }  if (installedTheme == null || !installedTheme.containsKey("AutoCompletePopup.derive")) {    themeProps.put("AutoCompletePopup.transparency","255");    themeProps.put("AutoCompletePopup.padding","0,0,0,0");    themeProps.put("AutoCompletePopup.border",Border.createLineBorder(1));  }  if (installedTheme == null || !installedTheme.containsKey("AutoCompletePopup.sel#derive")) {    themeProps.put("AutoCompletePopup.sel#transparency","255");    themeProps.put("AutoCompletePopup.sel#padding","0,0,0,0");    themeProps.put("AutoCompletePopup.sel#border",Border.createLineBorder(1));  }  if (installedTheme == null || !installedTheme.containsKey("AutoCompleteList.derive")) {    themeProps.put("AutoCompleteList.margin","1,1,1,1");    themeProps.put("AutoCompleteList.padding","0,0,0,0");  }  if (installedTheme == null || !installedTheme.containsKey("AutoCompleteList.sel#derive")) {    themeProps.put("AutoCompleteList.sel#margin","1,1,1,1");    themeProps.put("AutoCompleteList.sel#padding","0,0,0,0");  }  if (installedTheme == null || !installedTheme.containsKey("AutoCompleteList.press#derive")) {    themeProps.put("AutoCompleteList.press#margin","1,1,1,1");    themeProps.put("AutoCompleteList.press#padding","0,0,0,0");  }  if (installedTheme == null || !installedTheme.containsKey("CommandList.derive")) {    themeProps.put("CommandList.transparency","255");    themeProps.put("CommandList.border",Border.createLineBorder(1));  }  if (installedTheme == null || !installedTheme.containsKey("CommandList.sel#derive")) {    themeProps.put("CommandList.sel#transparency","255");    themeProps.put("CommandList.sel#border",Border.createLineBorder(1));  }  if (installedTheme == null || !installedTheme.containsKey("Toolbar.derive")) {    themeProps.put("Toolbar.derive","TitleArea");  }  if (installedTheme == null || !installedTheme.containsKey("FloatingActionButton.derive")) {    themeProps.put("FloatingActionButton.fgColor","ffffff");    themeProps.put("FloatingActionButton.bgColor","d32f2f");    themeProps.put("FloatingActionButton.transparency","0");    themeProps.put("FloatingActionButton.marUnit",new byte[]{Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS});    themeProps.put("FloatingActionButton.margin","0,2,1,2");  }  if (installedTheme == null || !installedTheme.containsKey("FloatingActionButton.press#derive")) {    themeProps.put("FloatingActionButton.press#fgColor","ffffff");    themeProps.put("FloatingActionButton.press#bgColor","b71c1c");    themeProps.put("FloatingActionButton.sel#transparency","0");    themeProps.put("FloatingActionButton.press#marUnit",new byte[]{Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS});    themeProps.put("FloatingActionButton.press#margin","0,2,1,2");  }  if (installedTheme == null || !installedTheme.containsKey("FloatingActionButton.sel#derive")) {    themeProps.put("FloatingActionButton.sel#fgColor","ffffff");    themeProps.put("FloatingActionButton.sel#transparency","0");    themeProps.put("FloatingActionButton.sel#bgColor","b71c1c");    themeProps.put("FloatingActionButton.sel#marUnit",new byte[]{Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS});    themeProps.put("FloatingActionButton.sel#margin","0,2,1,2");  }  if (installedTheme == null || !installedTheme.containsKey("FloatingActionButton.derive")) {    themeProps.put("Badge.fgColor","ffffff");    themeProps.put("Badge.bgColor","d32f2f");    themeProps.put("Badge.press#fgColor","ffffff");    themeProps.put("Badge.press#bgColor","b71c1c");    themeProps.put("Badge.sel#fgColor","ffffff");    themeProps.put("Badge.sel#bgColor","b71c1c");    themeProps.put("Badge#padUnit",new byte[]{Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS});    themeProps.put("Badge#padding","0,0,0,0");    themeProps.put("Badge.sel#padUnit",new byte[]{Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS});    themeProps.put("Badge.sel#padding","0,0,0,0");    themeProps.put("Badge.press#padUnit",new byte[]{Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS,Style.UNIT_TYPE_DIPS});    themeProps.put("Badge.press#padding","0,0,0,0");    if (Font.isNativeFontSchemeSupported()) {      themeProps.put("Badge.font",lightFont.derive(Display.getInstance().convertToPixels(1.5f),Font.STYLE_PLAIN));    }    themeProps.put("Badge.align",centerAlign);  }  if (installedTheme == null || !installedTheme.containsKey("FloatingActionText.derive")) {    themeProps.put("FloatingActionText.bgColor","ffffff");    themeProps.put("FloatingActionText.fgColor","a0a0a0");    themeProps.put("FloatingActionText.align",rightAlign);  }}  }
class C{  void updateRate(){  factorField.setText(threeDigits.format(clock.userGetRate()));  changed=true;}  }
class C{  public CustomerExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  @Override public void init(Processor processor){  super.init(processor);  EvaluateURIAction action=(EvaluateURIAction)getAction();  if (action.getTemplate() == null || action.getTemplate().trim().isEmpty()) {    ProcessorIssue pi=new ProcessorIssue();    pi.setProcessor(processor.getDescription());    pi.setAction(getAction().getDescription());    pi.setField("template");    pi.setSeverity(Severity.Error);    pi.setDescription(TEMPLATE_MUST_BE_SPECIFIED);    if (getIssues() == null) {      setIssues(new ArrayList<Issue>());    }    getIssues().add(0,pi);  }}  }
class C{  public void dismiss(int[] id){  boolean changed=false;  for (int i=0; i < id.length; i++) {    MessageKey key=getKey(id[i]);    if (key != null) {      mMessagesList.remove(key);      changed=true;    }  }  if (changed) {    adapter.notifyDataSetChanged();  }}  }
class C{  public static <V>boolean isEmpty(V[] sourceArray){  return (sourceArray == null || sourceArray.length == 0);}  }
class C{  public void state(PrintStream out,String agentContainerId){  JSONObject stateInfo;  if (StringUtils.isEmpty(agentContainerId)) {    stateInfo=getClusterStateInfo();  } else {    stateInfo=getAgentStateInfo(agentContainerId);  }  if (stateInfo != null) {    out.println(stateInfo.toString(2));  } else {    throw new MinimesosException("Did not find the cluster or requested container");  }}  }
class C{  public IteratingTupleQueryResult(List<String> bindingNames,CloseableIteration<? extends BindingSet,QueryEvaluationException> bindingSetIter){  super(bindingSetIter);  this.bindingNames=Collections.unmodifiableList(bindingNames);}  }
class C{  public OrganizationAlreadyBannedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public TXStateProxy masqueradeAs(TransactionMessage msg) throws InterruptedException {  if (msg.getTXUniqId() == NOTX || !msg.canParticipateInTransaction()) {    return null;  }  TXId key=new TXId(msg.getMemberToMasqueradeAs(),msg.getTXUniqId());  TXStateProxy val=getOrSetHostedTXState(key,msg);  if (val != null) {    boolean success=getLock(val,key);    while (!success) {      val=getOrSetHostedTXState(key,msg);      if (val != null) {        success=getLock(val,key);      } else {        break;      }    }  }  setTXState(val);  return val;}  }
class C{  private void findBouncedInstrument(){  for (  final ReceiptInstrumentInfo instrumentInfo : instrumentDetails)   if (instrumentInfo.isBounced())   bouncedInstruments.add(instrumentInfo);}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_ADMIN}) public Response updateSchedulePolicy(@PathParam("id") URI policyId,PolicyParam param){  ArgValidator.checkFieldUriType(policyId,SchedulePolicy.class,"policyId");  SchedulePolicy schedulePolicy=getPolicyById(policyId,true);  StringSet resources=schedulePolicy.getAssignedResources();  if (resources != null && !resources.isEmpty()) {    _log.error("Unable to update schedule policy {} as it is already associated with resources",schedulePolicy.getPolicyName());    throw APIException.badRequests.unableToUpdateSchedulePolicy(schedulePolicy.getPolicyName());  }  if (!ArgValidator.isValidEnum(param.getPolicyType(),SchedulePolicyType.class)) {    throw APIException.badRequests.invalidSchedulePolicyType(param.getPolicyType());  }  _log.info("Schedule policy {} update started",schedulePolicy.getPolicyName());  if (null != param.getPolicyName() && !param.getPolicyName().isEmpty() && !schedulePolicy.getLabel().equalsIgnoreCase(param.getPolicyName())) {    checkForDuplicateName(param.getPolicyName(),SchedulePolicy.class,schedulePolicy.getTenantOrg().getURI(),"tenantOrg",_dbClient);    NamedURI tenant=schedulePolicy.getTenantOrg();    if (tenant != null) {      tenant.setName(param.getPolicyName());      schedulePolicy.setTenantOrg(tenant);    }  }  StringBuilder errorMsg=new StringBuilder();  boolean isValidSchedule=validateSchedulePolicyParam(param.getPolicySchedule(),schedulePolicy,errorMsg);  if (!isValidSchedule && errorMsg != null && errorMsg.length() > 0) {    _log.error("Failed to update schedule policy due to {} ",errorMsg.toString());    throw APIException.badRequests.invalidSchedulePolicyParam(param.getPolicyName(),errorMsg.toString());  }  boolean isValidSnapshotExpire=false;  if (param.getSnapshotExpire() != null) {    String expireType=param.getSnapshotExpire().getExpireType();    if (!ArgValidator.isValidEnum(expireType,SnapshotExpireType.class)) {      _log.error("Invalid schedule snapshot expire type {}. Valid Snapshot expire types are hours, days, weeks, months and never",expireType);      throw APIException.badRequests.invalidScheduleSnapshotExpireType(expireType);    }    isValidSnapshotExpire=validateSnapshotExpireParam(param.getSnapshotExpire());    if (!isValidSnapshotExpire) {      int expireTime=param.getSnapshotExpire().getExpireValue();      int minExpireTime=2;      int maxExpireTime=10;      _log.error("Invalid schedule snapshot expire time {}. Try an expire time between {} hours to {} years",expireTime,minExpireTime,maxExpireTime);      throw APIException.badRequests.invalidScheduleSnapshotExpireValue(expireTime,minExpireTime,maxExpireTime);    }  } else {    if (param.getPolicyType().equalsIgnoreCase(SchedulePolicyType.file_snapshot.toString())) {      errorMsg.append("Required parameter snapshot_expire was missing or empty");      _log.error("Failed to update schedule policy due to {} ",errorMsg.toString());      throw APIException.badRequests.invalidSchedulePolicyParam(param.getPolicyName(),errorMsg.toString());    }  }  if (isValidSchedule) {    schedulePolicy.setPolicyType(param.getPolicyType());    schedulePolicy.setLabel(param.getPolicyName());    schedulePolicy.setPolicyName(param.getPolicyName());    schedulePolicy.setScheduleFrequency(param.getPolicySchedule().getScheduleFrequency().toLowerCase());    if (isValidSnapshotExpire) {      schedulePolicy.setSnapshotExpireType(param.getSnapshotExpire().getExpireType().toLowerCase());      if (!param.getSnapshotExpire().getExpireType().equalsIgnoreCase(SnapshotExpireType.NEVER.toString())) {        schedulePolicy.setSnapshotExpireTime((long)param.getSnapshotExpire().getExpireValue());      } else {        schedulePolicy.setSnapshotExpireTime(0L);      }    }    _dbClient.updateObject(schedulePolicy);    _log.info("Schedule policy {} updated successfully",schedulePolicy.getPolicyName());  }  return Response.ok().build();}  }
class C{  protected int chooseRandomIndexBasedOnProportions(double[] proportionArray,Random random){  double probSum;  double val;  int index;  double sum;  probSum=Utils.sum(proportionArray);  val=random.nextDouble() * probSum;  index=0;  sum=0.0;  while ((sum <= val) && (index < proportionArray.length)) {    sum+=proportionArray[index++];  }  return index - 1;}  }
class C{  public void listenModLog(String username,String token){  if (!hasServer()) {    return;  }  if (modLogListen.containsKey(username)) {    return;  }  this.token=token;  long userId=getUserId(username);  modLogListen.put(username,userId);  LOGGER.info("[PubSub] LISTEN ModLog " + username + " "+ userId);  if (userId != -1) {    sendListenModLog(userId,true);  }}  }
class C{  public SyncDetectTap(){  super(TapType.EVENT_SYNC_DETECT,"Sync Detected",0);}  }
class C{  public static boolean isAbsoluteURI(String systemId){  if (isWindowsAbsolutePath(systemId)) {    return false;  }  final int fragmentIndex=systemId.indexOf('#');  final int queryIndex=systemId.indexOf('?');  final int slashIndex=systemId.indexOf('/');  final int colonIndex=systemId.indexOf(':');  int index=systemId.length() - 1;  if (fragmentIndex > 0)   index=fragmentIndex;  if ((queryIndex > 0) && (queryIndex < index))   index=queryIndex;  if ((slashIndex > 0) && (slashIndex < index))   index=slashIndex;  return ((colonIndex > 0) && (colonIndex < index));}  }
class C{  public ListSelectDialogBuilder<T> addListItems(T... items){  this.content.addAll(Arrays.asList(items));  return this;}  }
class C{  private boolean hasInvalidArguments(final String[] params,final String remainder){  return (params == null) || (remainder == null) || (params.length < getMinimumParameters());}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFontFaceFormatElement(prefix,(AbstractDocument)doc);}  }
class C{  public CommandReader(ProcessBuilder cmd,boolean restart){  super(cmd,restart);}  }
class C{  public String sqlAction_updateChildRecord(String vendorName,String catalogName,String schemaName,String foreignTableName,ArrayList<String> foreignColumnNames,String localTableName,ArrayList<String> localColumnNames,ArrayList<String> whereColumnNames){  ArrayList<String> translatedLocalColumnNames=new ArrayList<String>();  for (  String columnName : localColumnNames) {    translatedLocalColumnNames.add(new StringBuffer("p.").append(columnName).toString());  }  ArrayList<String> translatedWhereColumnNames=new ArrayList<String>();  for (  String columnName : whereColumnNames) {    translatedWhereColumnNames.add(new StringBuffer("p.").append(columnName).append(" = ?").toString());  }  String subQuery=sql_select(vendorName,catalogName,schemaName,localTableName,"p",translatedLocalColumnNames,null,translatedWhereColumnNames,null,false);  StringBuffer condition=null;  if (foreignColumnNames != null) {    condition=new StringBuffer();    for (int i=0; i < foreignColumnNames.size(); i++) {      String foreignColName=normalizeColumnName(vendorName,foreignColumnNames.get(i));      if (i == 0)       condition.append("("); else       condition.append(", ");      condition.append(foreignColName);    }    condition.append(")");  }  ArrayList<String> conditions=new ArrayList<String>();  conditions.add(condition.append(" IN (").append(subQuery).append(")").toString());  return sql_update(vendorName,catalogName,schemaName,foreignTableName,null,foreignColumnNames,null,conditions);}  }
class C{  private String nextToInternal(String excluded){  int start=pos;  for (; pos < in.length(); pos++) {    char c=in.charAt(pos);    if (c == '\r' || c == '\n' || excluded.indexOf(c) != -1) {      return in.substring(start,pos);    }  }  return in.substring(start);}  }
class C{  public void test_allocCommitFreeCommitWriteCache(){  Journal store=(Journal)getStore();  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final long addr=bs.write(randomData(78));    assertTrue(bs.inWriteCache(addr));    store.commit();    bs.delete(addr);    assertTrue(bs.inWriteCache(addr));    store.commit();    assertFalse(bs.inWriteCache(addr));  }  finally {    store.destroy();  }}  }
class C{  final public MutableString insert(final int index,final boolean b){  return insert(index,String.valueOf(b));}  }
class C{  public void addWebEventListener(String type,ActionListener listener){  getEventDispatcher(type,true).addListener(listener);}  }
class C{  public static boolean find(JTextArea textArea,String text,boolean forward,boolean matchCase,boolean wholeWord,boolean regex) throws PatternSyntaxException {  Caret c=textArea.getCaret();  int start=forward ? Math.max(c.getDot(),c.getMark()) : Math.min(c.getDot(),c.getMark());  String findIn=getFindInText(textArea,start,forward);  if (findIn == null || findIn.length() == 0)   return false;  if (regex == false) {    int pos=getNextMatchPos(text,findIn,forward,matchCase,wholeWord);    findIn=null;    if (pos != -1) {      c.setSelectionVisible(true);      pos=forward ? start + pos : pos;      selectAndPossiblyCenter(textArea,pos,pos + text.length());      return true;    }  } else {    Point regExPos=getNextMatchPosRegEx(text,findIn,forward,matchCase,wholeWord);    findIn=null;    if (regExPos != null) {      c.setSelectionVisible(true);      if (forward) {        regExPos.translate(start,start);      }      selectAndPossiblyCenter(textArea,regExPos.x,regExPos.y);      return true;    }  }  return false;}  }
class C{  public void testTimedInvokeAll4() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new NPETask());    List<Future<String>> futures=e.invokeAll(l,LONG_DELAY_MS,MILLISECONDS);    assertEquals(1,futures.size());    try {      futures.get(0).get();      shouldThrow();    } catch (    ExecutionException success) {      assertTrue(success.getCause() instanceof NullPointerException);    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public boolean isFinally(){  return etable.catchType(index) == 0;}  }
class C{  protected void updateButtons(){  boolean present;  boolean running;  boolean editable;  boolean handled;  super.updateButtons();  present=(m_Experiment != null);  running=present && m_Experiment.isRunning();  handled=!m_PanelUnsupported.isVisible();  editable=present && !running && handled;  m_ButtonAddClassifier.setEnabled(editable);  m_ButtonRemoveClassifier.setEnabled(editable && (m_ListClassifiers.getList().getSelectedIndices().length >= 1));  m_ButtonRemoveAllClassifiers.setEnabled(editable && (m_ModelClassifiers.getSize() > 0));  m_ButtonEditClassifier.setEnabled(editable && (m_ListClassifiers.getList().getSelectedIndices().length == 1));  m_ButtonMoveUpClassifier.setEnabled(editable && JListHelper.canMoveUp(m_ListClassifiers.getList()));  m_ButtonMoveDownClassifier.setEnabled(editable && JListHelper.canMoveDown(m_ListClassifiers.getList()));  m_ButtonNotes.setEnabled(editable);}  }
class C{  private DownloadManager(){  mDownloaderMap=new LinkedHashMap<String,Downloader>();}  }
class C{  public JDBFileFilter(String extension,String description){  this();  if (extension != null) {    addExtension(extension);  }  if (description != null) {    setDescription(description);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatadeletedatamiddle.class,args);}  }
class C{  public static String[] toStringArray(float[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=String.valueOf(array[i]);  }  return result;}  }
class C{  void pack(boolean reflect){  int newWidth=computeHeaderWidth();  if (CommonUtils.isEmpty(children)) {    int topIndex=grid.getTopIndex();    int bottomIndex=grid.getBottomIndex();    if (topIndex >= 0 && bottomIndex >= topIndex) {      int itemCount=grid.getItemCount();      for (int i=topIndex; i <= bottomIndex && i < itemCount; i++) {        newWidth=Math.max(newWidth,computeCellWidth(element,grid.getRowElement(i)));      }    }  } else {    int childrenWidth=0;    for (    GridColumn child : children) {      child.pack(reflect);      childrenWidth+=child.getWidth();    }    if (newWidth > childrenWidth) {      GridColumn lastChild=children.get(children.size() - 1);      lastChild.setWidth(lastChild.getWidth() + newWidth - childrenWidth);    } else {      newWidth=childrenWidth;    }  }  if (reflect) {    setWidth(newWidth,false);  } else {    this.width=newWidth;  }}  }
class C{  private boolean acquireSuspendLockPermission(DLockRequestMessage request){  boolean permitLockRequest=false;  final RemoteThread rThread=request.getRemoteThread();  Assert.assertTrue(rThread != null);synchronized (suspendLock) {    checkDestroyed();    if (!dm.isCurrentMember(request.getSender())) {      logger.info(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.DLockGrantor_IGNORING_LOCK_REQUEST_FROM_NONMEMBER_0,request));      return false;    }    Integer integer=(Integer)readLockCountMap.get(rThread);    int readLockCount=integer == null ? 0 : integer.intValue();    boolean othersHaveReadLocks=totalReadLockCount > readLockCount;    final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);    if (isLockingSuspended() || writeLockWaiters > 0 || othersHaveReadLocks) {      writeLockWaiters++;      suspendQueue.addLast(request);      this.thread.checkTimeToWait(calcWaitMillisFromNow(request),false);      checkWriteLockWaiters();      if (isDebugEnabled_DLS) {        logger.trace(LogMarker.DLS,"[DLockGrantor.acquireSuspend] added '{}' to end of suspendQueue.",request);      }    } else {      permitLockRequest=true;      suspendLocking(rThread,request.getLockId());      if (isDebugEnabled_DLS) {        logger.trace(LogMarker.DLS,"[DLockGrantor.acquireSuspendLockPermission] permitted and suspended for {}",request);      }    }    if (isDebugEnabled_DLS) {      logger.trace(LogMarker.DLS,"[DLockGrantor.acquireSuspendLockPermission] new status  permitLockRequest = {}{}",permitLockRequest,displayStatus(rThread,null));    }  }  return permitLockRequest;}  }
class C{  protected long unwrapKey(Object key){  return ((Long)key).longValue();}  }
class C{  @Override public boolean isRegisterByteSizeObserverCheap(NullWritable value,Context context){  return true;}  }
class C{  public boolean requiresTunnel(){  return route.address.sslSocketFactory != null && route.proxy.type() == Proxy.Type.HTTP;}  }
class C{  @Override public void onValueSelected(Entry e,int dataSetIndex,Highlight h){  mHolder.onValueSelected(e);}  }
class C{  private Element createKeyValue() throws Exception {  Element keyValueEle=null;  PrivateKey key=idmClient.getTenantPrivateKey(tenantName);  if (key != null) {    RSAPrivateKey rsaKey=(RSAPrivateKey)key;    Element rsaKeyEle=createRSAKeyValue(rsaKey);    if (rsaKeyEle != null) {      keyValueEle=doc.createElement(SAMLNames.DS_KEYVALUE);      keyValueEle.appendChild(rsaKeyEle);    }  }  return keyValueEle;}  }
class C{  @DSSpec(DSCat.IO) @DSSink({DSSinkKind.CONTENT}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:57.517 -0500",hash_original_method="69A0DD4660ADD7C5594E4FDC51D65483",hash_generated_method="A734C04153E78B8243BB6411677AF49A") public static final String insertImage(ContentResolver cr,Bitmap source,String title,String description){  ContentValues values=new ContentValues();  values.put(Images.Media.TITLE,title);  values.put(Images.Media.DESCRIPTION,description);  values.put(Images.Media.MIME_TYPE,"image/jpeg");  Uri url=null;  String stringUrl=null;  try {    url=cr.insert(EXTERNAL_CONTENT_URI,values);    if (source != null) {      OutputStream imageOut=cr.openOutputStream(url);      try {        source.compress(Bitmap.CompressFormat.JPEG,50,imageOut);      }  finally {        imageOut.close();      }      long id=ContentUris.parseId(url);      Bitmap miniThumb=Images.Thumbnails.getThumbnail(cr,id,Images.Thumbnails.MINI_KIND,null);      Bitmap microThumb=StoreThumbnail(cr,miniThumb,id,50F,50F,Images.Thumbnails.MICRO_KIND);    } else {      Log.e(TAG,"Failed to create thumbnail, removing original");      cr.delete(url,null,null);      url=null;    }  } catch (  Exception e) {    Log.e(TAG,"Failed to insert image",e);    if (url != null) {      cr.delete(url,null,null);      url=null;    }  }  if (url != null) {    stringUrl=url.toString();  }  return stringUrl;}  }
class C{  public Hours toStandardHours(){  return Hours.hours(getValue() / DateTimeConstants.MINUTES_PER_HOUR);}  }
class C{  public T caseEquationDefinition(EquationDefinition object){  return null;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep updateStorageSystem(@PathParam("id") URI id,StorageSystemUpdateRequestParam param) throws ControllerException {  StorageSystem system=_dbClient.queryObject(StorageSystem.class,id);  ArgValidator.checkEntity(system,id,isIdEmbeddedInURL(id));  StorageSystem.Type systemType=StorageSystem.Type.valueOf(system.getSystemType());  if (param.getName() != null && !param.getName().isEmpty() && !param.getName().equalsIgnoreCase(system.getLabel())) {    checkForDuplicateName(param.getName(),StorageSystem.class);    system.setLabel(param.getName());  }  if (null != param.getIsUnlimitedResourcesSet()) {    if (param.getIsUnlimitedResourcesSet()) {      system.setIsResourceLimitSet(false);    } else {      if (null != param.getMaxResources()) {        system.setIsResourceLimitSet(true);        system.setMaxResources(param.getMaxResources());      } else {        throw APIException.badRequests.parameterMaxResourcesMissing();      }    }  } else   if (null != param.getMaxResources()) {    system.setMaxResources(param.getMaxResources());    system.setIsResourceLimitSet(true);  }  if (systemType.equals(StorageSystem.Type.vmax) || systemType.equals(StorageSystem.Type.vnxblock) || systemType.equals(StorageSystem.Type.hds)|| systemType.equals(StorageSystem.Type.openstack)|| systemType.equals(StorageSystem.Type.scaleio)|| systemType.equals(StorageSystem.Type.xtremio)|| systemType.equals(StorageSystem.Type.ceph)) {    if (param.getIpAddress() != null || param.getPortNumber() != null || param.getUserName() != null || param.getPassword() != null || param.getSmisProviderIP() != null || param.getSmisPortNumber() != null || param.getSmisUserName() != null || param.getSmisPassword() != null || param.getSmisUseSSL() != null) {      throw APIException.badRequests.onlyNameAndMaxResourceCanBeUpdatedForSystemWithType(systemType.name());    }    _dbClient.persistObject(system);    String taskId=UUID.randomUUID().toString();    TaskList taskList=new TaskList();    Operation op=new Operation();    op.ready("Updated Storage System name");    op.setResourceType(ResourceOperationTypeEnum.UPDATE_STORAGE_SYSTEM);    _dbClient.createTaskOpStatus(StorageSystem.class,system.getId(),taskId,op);    taskList.getTaskList().add(toTask(system,taskId,op));    return taskList.getTaskList().listIterator().next();  }  if (systemType.equals(StorageSystem.Type.vnxfile)) {    validateVNXFileSMISProviderMandatoryDetails(param);  }  String existingIPAddress=system.getIpAddress();  Integer existingPortNumber=system.getPortNumber();  if (((param.getIpAddress() != null && !param.getIpAddress().equals(existingIPAddress)) || (param.getPortNumber() != null && !param.getPortNumber().equals(existingPortNumber)))) {    String ipAddress=(param.getIpAddress() != null) ? param.getIpAddress() : system.getIpAddress();    Integer portNumber=(param.getPortNumber() != null) ? param.getPortNumber() : system.getPortNumber();    ArgValidator.checkFieldValidIP(ipAddress,"ip_address");    ArgValidator.checkFieldRange(portNumber,1,65535,"port_number");    validateStorageSystemExists(ipAddress,portNumber);    system.setMgmtAccessPoint(ipAddress + "-" + portNumber);  }  updateStorageObj(system,param);  auditOp(OperationTypeEnum.UPDATE_STORAGE_SYSTEM,true,null,id.toString(),param.getIpAddress(),param.getPortNumber());  startStorageSystem(system);  StorageController controller=getController(FileController.class,system.getSystemType());  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  String taskId=UUID.randomUUID().toString();  tasks.add(new AsyncTask(StorageSystem.class,system.getId(),taskId));  TaskList taskList=discoverStorageSystems(tasks,controller);  return taskList.getTaskList().listIterator().next();}  }
class C{  static String encodeUrl(String originalUrl){  try {    URL newUrl=new URL(originalUrl);    URI uri=new URI(newUrl.getProtocol(),newUrl.getUserInfo(),newUrl.getHost(),newUrl.getPort(),newUrl.getPath(),newUrl.getQuery(),newUrl.getRef());    return uri.toURL().toString();  } catch (  Exception e) {    return null;  }}  }
class C{  public Object object(){  return m_origObj;}  }
class C{  public DefinedMethod(String methodName,boolean isCompleteList){  this(methodName,isCompleteList,new ArrayList());}  }
class C{  public Categories addCategories(String... categories){  Categories prop=new Categories(categories);  addCategories(prop);  return prop;}  }
class C{  private final Collection findCRLs(X509CRLStoreSelector crlSelect,List crlStores) throws AnnotatedException {  Set crls=new HashSet();  Iterator iter=crlStores.iterator();  AnnotatedException lastException=null;  boolean foundValidStore=false;  while (iter.hasNext()) {    Object obj=iter.next();    if (obj instanceof X509Store) {      X509Store store=(X509Store)obj;      try {        crls.addAll(store.getMatches(crlSelect));        foundValidStore=true;      } catch (      StoreException e) {        lastException=new AnnotatedException("Exception searching in X.509 CRL store.",e);      }    } else {      CertStore store=(CertStore)obj;      try {        crls.addAll(store.getCRLs(crlSelect));        foundValidStore=true;      } catch (      CertStoreException e) {        lastException=new AnnotatedException("Exception searching in X.509 CRL store.",e);      }    }  }  if (!foundValidStore && lastException != null) {    throw lastException;  }  return crls;}  }
class C{  public static String formatTextBox(String text,int width,Pattern splitter,Set<String> singleRowers){  requireNonNulls(text,splitter);  requireNonNullElements(singleRowers);  final StringBuilder sb=new StringBuilder();  final AtomicInteger col=new AtomicInteger();  final List<String> words=splitter.splitAsStream(text).collect(toList());  for (  final String w : words) {    final int wordLen=w.length();    if (singleRowers.contains(w)) {      sb.append(NL);      sb.append(w);      sb.append(NL);      col.set(0);    } else {      if (col.get() + wordLen >= width) {        sb.append(NL);        col.set(0);      } else       if (col.get() > 0) {        sb.append(" ");        col.incrementAndGet();      }      sb.append(w);      col.getAndAdd(wordLen);    }  }  return sb.toString();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  int findSubstring(String s){  int[] map=new int[128];  int counter;  int begin=0, end=0;  int d=Integer.MAX_VALUE;  while (end < s.length()) {  }  return d;}  }
class C{  public void close(){  ps.close();}  }
class C{  public static boolean equals(String s1,String s2){  return Util.equals(s1,s2);}  }
class C{  boolean connectionEvent(String action) throws RcsAccountException, IOException {  try {    if (!ConnectivityManager.CONNECTIVITY_ACTION.equals(action)) {      return false;    }    NetworkInfo networkInfo=mNetworkCnx.getConnectionMngr().getActiveNetworkInfo();    if (networkInfo == null) {      return false;    }    if (!networkInfo.isConnected()) {      if (sLogger.isActivated()) {        sLogger.debug("Disconnection from network");      }      return false;    }    if (sLogger.isActivated()) {      sLogger.debug("Connected to data network");    }    updateConfig();    return true;  }  finally {    mNetworkCnx.unregisterNetworkStateListener();  }}  }
class C{  private void paintBorder(Graphics2D g,JComponent c,int x,int y,int width,int height){  boolean useToolBarColors=isInToolBar(c);  Shape s;  if (focused) {    s=shapeGenerator.createRoundRectangle(x - 2,y - 2,width + 4 - 1,height + 4 - 1,CornerSize.ROUND_HEIGHT_DRAW);    g.setPaint(getFocusPaint(s,FocusType.OUTER_FOCUS,useToolBarColors));    g.draw(s);    s=shapeGenerator.createRoundRectangle(x - 1,y - 1,width + 2 - 1,height + 2 - 1,CornerSize.ROUND_HEIGHT_DRAW);    g.setPaint(getFocusPaint(s,FocusType.INNER_FOCUS,useToolBarColors));    g.draw(s);  }  if (type != CommonControlState.DISABLED) {    s=shapeGenerator.createInternalDropShadowRounded(x + 1,y + 1,width - 2,height - 2);    internalShadow.fill(g,s,true,true);  }  g.setPaint(getTextBorderPaint(type,!focused && useToolBarColors));  s=shapeGenerator.createRoundRectangle(x,y,width - 1,height - 1,CornerSize.ROUND_HEIGHT_DRAW);  g.draw(s);}  }
class C{  public StringCollectionRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public Pr1ExportAction(String actionName,CvTableModel pModel,JFrame pParent){  super(actionName);  mModel=pModel;  mParent=pParent;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.550 -0400",hash_original_method="ABA0E5A2C93CAE7FB231C0521EE3670F",hash_generated_method="BA0BC47B135E42DFD56AF5B19141022D") public int compare(File file1,File file2){  long size1=0;  if (file1.isDirectory()) {    size1=sumDirectoryContents && file1.exists() ? FileUtils.sizeOfDirectory(file1) : 0;  } else {    size1=file1.length();  }  long size2=0;  if (file2.isDirectory()) {    size2=sumDirectoryContents && file2.exists() ? FileUtils.sizeOfDirectory(file2) : 0;  } else {    size2=file2.length();  }  long result=size1 - size2;  if (result < 0) {    return -1;  } else   if (result > 0) {    return 1;  } else {    return 0;  }}  }
class C{  public void createFailureListenerCount(){  new Capacity(0,0,-3);}  }
class C{  private void prefix() throws Exception {  ComponentBean base=configBean.getComponent(cb.getBaseComponentType());  if (base == null) {    throw new IllegalArgumentException("No base component type for '" + cb.getComponentType() + "'");  }  writer.writeBlockComment(propManager.getProperty(PropertyManager.COPYRIGHT));  writer.writePackage("javax.faces.component.html");  writer.write('\n');  writer.writeImport("java.io.IOException");  writer.writeImport("java.util.ArrayList");  writer.writeImport("java.util.Arrays");  if (useBehavior) {    writer.writeImport("java.util.Collection");    writer.writeImport("java.util.Collections");  }  writer.writeImport("java.util.List");  writer.write('\n');  writer.writeImport("javax.faces.context.FacesContext");  if (useBehavior) {    writer.writeImport("javax.faces.component.behavior.ClientBehaviorHolder");  }  writer.writeImport("javax.el.MethodExpression");  writer.writeImport("javax.el.ValueExpression");  writer.write("\n\n");  writer.writeBlockComment("******* GENERATED CODE - DO NOT EDIT *******");  writer.write("\n\n");  DescriptionBean db=cb.getDescription("");  String rendererType=cb.getRendererType();  String description=null;  if (db != null) {    description=db.getDescription().trim();  }  if (rendererType != null) {    if (description == null) {      description="";    }    description+="\n<p>By default, the <code>rendererType</code> property must be set to \"<code>" + rendererType + "</code>\".\nThis value can be changed by calling the <code>setRendererType()</code> method.</p>\n";  }  if (description != null && description.length() > 0) {    writer.writeJavadocComment(description);  }  writer.writePublicClassDeclaration(shortName(cb.getComponentClass()),base.getComponentClass(),useBehavior ? (new String[]{"ClientBehaviorHolder"}) : null,false,false);  writer.write("\n\n");  writer.indent();  writer.fwrite("private static final String OPTIMIZED_PACKAGE = \"javax.faces.component.\";\n\n");  writer.fwrite("public ");  writer.write(shortName(cb.getComponentClass()));  writer.write("() {\n");  writer.indent();  writer.fwrite("super();\n");  if (rendererType != null) {    writer.fwrite("setRendererType(\"");    writer.write(rendererType);    writer.write("\");\n");  }  PropertyBean[] pbs=cb.getProperties();  for (  PropertyBean pb : pbs) {    if (pb.isPassThrough() && pb.getDefaultValue() != null) {      writer.fwrite("handleAttribute(\"");      writer.write(pb.getPropertyName());      writer.write("\", ");      writer.write(pb.getDefaultValue());      writer.write(");\n");    }  }  writer.outdent();  writer.fwrite("}\n\n\n");  writer.writeJavadocComment("<p>The standard component type for this component.</p>\n");  writer.fwrite("public static final String COMPONENT_TYPE = \"");  writer.write(cb.getComponentType());  writer.write("\";\n\n\n");}  }
class C{  public static float addExp_Old(float[] logV){  float max=Float.NEGATIVE_INFINITY;  float maxIndex=0;  for (int i=0; i < logV.length; i++) {    if (logV[i] > max) {      max=logV[i];      maxIndex=i;    }  }  if (max == Float.NEGATIVE_INFINITY)   return Float.NEGATIVE_INFINITY;  float threshold=max - LOGTOLERANCE_F;  float sumNegativeDifferences=0.0f;  for (int i=0; i < logV.length; i++) {    if (i != maxIndex && logV[i] > threshold) {      sumNegativeDifferences+=Math.exp(logV[i] - max);    }  }  return (float)Math.exp(max) * (1.0f + sumNegativeDifferences);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:58.391 -0500",hash_original_method="9E02A818380AAE8C95423CA4DF6BB0F2",hash_generated_method="BFBA7D2C1A20185D7C22E0B60CEDB86A") public void teardown(){  if (mPosterDownloader != null) {    mPosterDownloader.cancelAndReleaseQueue();  }  mNativePointer=0;}  }
class C{  private Operation buildSelfPatchOperation(State s){  return Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(s);}  }
class C{  public ChannelFuture bind(SocketAddress address){  if (flushTask == null) {    flushTask=new ChallengeTokenFlushTask();    flushTask.runTaskTimerAsynchronously(null,600,600);  }  return bootstrap.bind(address);}  }
class C{  public boolean isActiva(){  return MElementValue.ACCOUNTTYPE_Asset.equals(getAccountType());}  }
class C{  public static int hashCode(char[] array,int start,int end){  int code=0;  for (int i=end - 1; i >= start; i--)   code=code * 31 + array[i];  return code;}  }
class C{  public CLUserEvent createUserEvent(){}  }
class C{  public IntConstant(){  this.value=-1;}  }
class C{  public Observable<String> exerciseFilterMap(Observable<Integer> nums){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  public static <T>ObservableTSeq<T> observableT(Publisher<Observable<T>> nested){  return ObservableT.fromPublisher(nested);}  }
class C{  public static String[] decode(final String[] encodedValues,final String encoding){  if (encodedValues != null) {    for (int index=0; index < encodedValues.length; index++) {      encodedValues[index]=decode(encodedValues[index],encoding);    }  }  return encodedValues;}  }
class C{  public static byte[] stringToByte58(String string){  try {    return Base58.decode(string);  } catch (  AddressFormatException e) {    throw new RuntimeException(e);  }}  }
class C{  protected Map<String,String> makeExportParams(){  final HashMap<String,String> params=new HashMap<>();  final RyaExportParameters ryaParams=new RyaExportParameters(params);  ryaParams.setExportToRya(true);  ryaParams.setAccumuloInstanceName(instanceName);  ryaParams.setZookeeperServers(zookeepers);  ryaParams.setExporterUsername(ACCUMULO_USER);  ryaParams.setExporterPassword(ACCUMULO_PASSWORD);  ryaParams.setRyaInstanceName(RYA_INSTANCE_NAME);  return params;}  }
class C{  @Override public void onBrowserEvent(Event event){  if (!enabled) {    return;  }switch (DOM.eventGetType(event)) {case Event.ONMOUSEOVER:    onMouseOver();  break;case Event.ONMOUSEOUT:onMouseOut();break;case Event.ONMOUSEDOWN:if (event.getButton() == Event.BUTTON_LEFT) {onMouseDown();}break;case Event.ONCLICK:onMouseClick();break;}}  }
class C{  final boolean tokenIs(String s){  return (m_token != null) ? (m_token.equals(s)) : (s == null);}  }
class C{  private void updateHierarchyKeyGenerators(Map<String,KeyGenerator> keyGenerators,Map<String,int[]> hirches,int[] dimLens,String[] dimCols){  String timeHierNameVal="";  if (meta.getCarbonTime() == null || "".equals(meta.getCarbonTime())) {    timeHierNameVal="";  } else {    String[] hies=meta.getCarbonTime().split(":");    timeHierNameVal=hies[1];  }  Iterator<Entry<String,int[]>> itr=hirches.entrySet().iterator();  while (itr.hasNext()) {    Entry<String,int[]> hieEntry=itr.next();    int[] a=hieEntry.getValue();    int[] lens=new int[a.length];    String name=hieEntry.getKey();    if (name.equalsIgnoreCase(timeHierNameVal)) {      for (int i=0; i < a.length; i++) {        lens[i]=dimLens[a[i]];      }    } else {      String[] columns=meta.hierColumnMap.get(name);      if (meta.getComplexTypes().get(columns[0]) != null) {        continue;      }      boolean isNoDictionary=false;      for (int i=0; i < a.length; i++) {        if (null != meta.noDictionaryCols && isDimensionNoDictionary(meta.noDictionaryCols,columns[i])) {          isNoDictionary=true;          break;        }      }      if (isNoDictionary) {        continue;      }      for (int i=0; i < a.length; i++) {        int newIndex=-1;        for (int j=0; j < dimCols.length; j++) {          if (checkDimensionColName(dimCols[j],columns[i])) {            newIndex=j;            break;          }        }        lens[i]=dimLens[newIndex];      }    }    KeyGenerator generator=KeyGeneratorFactory.getKeyGenerator(lens);    keyGenerators.put(name,generator);  }  Iterator<Entry<String,GenericDataType>> complexMap=meta.getComplexTypes().entrySet().iterator();  while (complexMap.hasNext()) {    Entry<String,GenericDataType> complexDataType=complexMap.next();    List<GenericDataType> primitiveTypes=new ArrayList<GenericDataType>();    complexDataType.getValue().getAllPrimitiveChildren(primitiveTypes);    for (    GenericDataType eachPrimitive : primitiveTypes) {      KeyGenerator generator=KeyGeneratorFactory.getKeyGenerator(new int[]{-1});      keyGenerators.put(eachPrimitive.getName(),generator);    }  }}  }
class C{  public void advanceSeason(){  currentWeek=0;  for (int t=0; t < teamList.size(); ++t) {    teamList.get(t).advanceSeason();  }  int blessNumber=(int)(Math.random() * 9);  Team blessTeam=teamList.get(50 + blessNumber);  if (!blessTeam.userControlled && !blessTeam.name.equals("American Samoa")) {    blessTeam.teamPrestige+=35;    saveBless=blessTeam;    if (blessTeam.teamPrestige > 90)     blessTeam.teamPrestige=90;  } else   saveBless=null;  int curseNumber=(int)(Math.random() * 7);  Team curseTeam=teamList.get(3 + curseNumber);  if (!curseTeam.userControlled && curseTeam.teamPrestige > 85) {    curseTeam.teamPrestige-=25;    saveCurse=curseTeam;  } else   saveCurse=null;  advanceSeasonWinStreaks();  for (int c=0; c < conferences.size(); ++c) {    conferences.get(c).robinWeek=0;    conferences.get(c).week=0;  }  for (int i=0; i < conferences.size(); ++i) {    conferences.get(i).setUpSchedule();  }  for (int i=0; i < conferences.size(); ++i) {    conferences.get(i).setUpOOCSchedule();  }  for (int i=0; i < conferences.size(); ++i) {    conferences.get(i).insertOOCSchedule();  }  hasScheduledBowls=false;}  }
class C{  public HessianProxyFactory(){  this(Thread.currentThread().getContextClassLoader());}  }
class C{  public static boolean isVolatile(int flags){  return (flags & AccVolatile) != 0;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#ignorableWhitespace: " + start + ", "+ length);  if (m_contentHandler != null) {    m_contentHandler.ignorableWhitespace(ch,start,length);  }}  }
class C{  protected KeyDefinition_Impl(){  super();}  }
class C{  public PicasawebCommandLine(PicasawebService service,String uname,String passwd){  super(service,uname,passwd);}  }
class C{  public void deleteFichas(String[] idsFichas){  String qual=new StringBuffer().append(" WHERE ").append(DBUtils.generateInTokenField(CAMPO_ID,idsFichas)).toString();  if (logger.isDebugEnabled())   logger.debug("Se van a eliminar las fichas con ids: " + idsFichas);  deleteVO(qual,TABLE_NAME);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:06.963 -0500",hash_original_method="528D0C1B73FE44D3972E9181B60A9BF2",hash_generated_method="E9E31F6841952F2FAD4091E09A2999A9") public static ComprehensionTlv decode(byte[] data,int startIndex) throws ResultException {  try {    int curIndex=startIndex;    int endIndex=data.length;    int tag;    boolean cr;    int temp=data[curIndex++] & 0xff;switch (temp) {case 0:case 0xff:case 0x80:      return null;case 0x7f:    tag=((data[curIndex] & 0xff) << 8) | (data[curIndex + 1] & 0xff);  cr=(tag & 0x8000) != 0;tag&=~0x8000;curIndex+=2;break;default :tag=temp;cr=(tag & 0x80) != 0;tag&=~0x80;break;}int length;temp=data[curIndex++] & 0xff;if (temp < 0x80) {length=temp;} else if (temp == 0x81) {length=data[curIndex++] & 0xff;if (length < 0x80) {throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);}} else if (temp == 0x82) {length=((data[curIndex] & 0xff) << 8) | (data[curIndex + 1] & 0xff);curIndex+=2;if (length < 0x100) {throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);}} else if (temp == 0x83) {length=((data[curIndex] & 0xff) << 16) | ((data[curIndex + 1] & 0xff) << 8) | (data[curIndex + 2] & 0xff);curIndex+=3;if (length < 0x10000) {throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);}} else {throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);}return new ComprehensionTlv(tag,cr,length,data,curIndex);} catch (IndexOutOfBoundsException e) {throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);}}  }
class C{  public void documentChangedLength(){  View view=editorPane.getUI().getRootView(editorPane);  int newPrefHeight=(int)view.getPreferredSpan(View.Y_AXIS);  Insets insets=getInsets();  int yoffs=insets.top + frw;  if (!scrollBar.isVisible()) {    int rpHeight=Math.max(newPrefHeight,prefViewHeight) + yoffs + frw;    repaint(0,0,getWidth(),rpHeight);  } else {    repaint(0,Math.min(newPrefHeight,prefViewHeight) + yoffs,getWidth(),Math.abs(newPrefHeight - prefViewHeight) + frw);  }  prefViewHeight=newPrefHeight;}  }
class C{  public MarshalException(String s,Exception ex){  super(s,ex);}  }
class C{  public void addChildResult(Result child){  hierarchy.add(this,child);}  }
class C{  private boolean isSparkOrigin(String objectName){  LOG.trace("Check if created by Stocator: {}",objectName);  if (cachedSparkOriginated.containsKey(objectName)) {    return cachedSparkOriginated.get(objectName).booleanValue();  }  String obj=objectName;  Boolean sparkOriginated=Boolean.FALSE;  StoredObject so=mJossAccount.getAccount().getContainer(container).getObject(obj);  if (so != null && so.exists()) {    Object sparkOrigin=so.getMetadata("Data-Origin");    if (sparkOrigin != null) {      String tmp=(String)sparkOrigin;      if (tmp.equals("stocator")) {        sparkOriginated=Boolean.TRUE;        LOG.trace("Object {} was created by Stocator",objectName);      }    }  }  cachedSparkOriginated.put(objectName,sparkOriginated);  return sparkOriginated.booleanValue();}  }
class C{  public AsSingleton<T> withDefaultValue(T defaultValue){  return new AsSingleton<>(defaultValue);}  }
class C{  public SaveFileAction(Application app,@Nullable View view,boolean saveAs){  super(app,view);  this.saveAs=saveAs;  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public PackageItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected void addPolyGrabPointsToOGP(OffsetGrabPoint ogp){  if (ogp == null)   return;  int count=0;  for (  GrabPoint gb : polyGrabPoints) {    if (gb != null) {      ogp.addGrabPoint(gb);      count++;    }  }  ogp.updateOffsets();}  }
class C{  private void init(OsmElement e,LinkedHashMap<String,ArrayList<String>> tags){switch (e.getType()) {case NODE:    lat=((Node)e).getLat() / 1E7F;  lon=((Node)e).getLon() / 1E7F;break;case WAY:case CLOSEDWAY:case AREA:if (Way.NAME.equals(e.getName())) {double[] center=Logic.centroidLonLat((Way)e);if (center != null) {  lat=(float)center[1];  lon=(float)center[0];}} else {}break;case RELATION:default :break;}this.tags=new LinkedHashMap<String,ArrayList<String>>(tags);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:58.299 -0500",hash_original_method="6DA0E2DE853AFE92CEEE23D7625EA5CB",hash_generated_method="D14E373FB5C0C305D1EECCFB4C942FA0") public FactoryConfigurationError(Exception e,String msg){  super(msg);  this.exception=e;}  }
class C{  public static void createFolder(IFolder folder,boolean force,boolean local,IProgressMonitor monitor) throws CoreException {  if (!folder.exists()) {    IContainer parent=folder.getParent();    if (parent instanceof IFolder) {      createFolder((IFolder)parent,force,local,null);    }    folder.create(force,local,monitor);  }}  }
class C{  public CastCorrectionProposal(String label,Expression nodeToCast,ITypeBinding castType,int relevance,Document document){  super(label,null,relevance,document,Images.correction_cast);  fNodeToCast=nodeToCast;  fCastType=castType;  setCommandId(ADD_CAST_ID);}  }
class C{  public String[] keywords(){  return (keywords == null) ? null : keywords.clone();}  }
class C{  private void doDescribeNamespaces(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final long timestamp=getTimestamp(req);  final boolean describeEachNamedGraph;{    final String s=req.getParameter(DESCRIBE_EACH_NAMED_GRAPH);    describeEachNamedGraph=s != null ? Boolean.valueOf(s) : getBigdataRDFContext().getConfig().describeEachNamedGraph;  }  final boolean describeDefaultNamespace;{    final String s=req.getParameter(DESCRIBE_DEFAULT_NAMESPACE);    describeDefaultNamespace=s != null ? Boolean.valueOf(s) : false;  }  final long tx=getBigdataRDFContext().newTx(timestamp);  try {    final Graph g=new LinkedHashModel();    if (describeDefaultNamespace) {      final String namespace=getBigdataRDFContext().getConfig().namespace;      describeNamespaceTx(req,g,namespace,describeEachNamedGraph,tx);    } else {      final List<String> namespaces=getBigdataRDFContext().getNamespacesTx(tx);      for (      String namespace : namespaces) {        describeNamespaceTx(req,g,namespace,describeEachNamedGraph,tx);      }    }    sendGraph(req,resp,g);  } catch (  Throwable t) {    launderThrowable(t,resp,"describeEachNamedGraph=" + describeEachNamedGraph + ", describeDefaultNamespace="+ describeDefaultNamespace);  } finally {    getBigdataRDFContext().abortTx(tx);  }}  }
class C{  public static boolean truncatedEquals(final Calendar cal1,final Calendar cal2,final int field){  return truncatedCompareTo(cal1,cal2,field) == 0;}  }
class C{  public boolean validate(DB db) throws WorkloadException {  HashSet<String> fields=new HashSet<String>();  fields.add("field0");  System.out.println("Validating data");  HashMap<String,ByteIterator> values=new HashMap<String,ByteIterator>();  int counted_sum=0;  for (int i=0; i < recordcount; i++) {    String keyname=buildKeyName(validation_keysequence.nextInt());    try {      db.start();      db.read(table,keyname,fields,values);      db.commit();    } catch (    DBException e) {      throw new WorkloadException(e);    }    counted_sum+=Integer.parseInt(values.get("field0").toString());  }  if (counted_sum != totalcash) {    System.out.println("Validation failed");    System.out.println("[TOTAL CASH], " + totalcash);    System.out.println("[COUNTED CASH], " + counted_sum);    int count=actualopcount.intValue();    System.out.println("[ACTUAL OPERATIONS], " + count);    System.out.println("[ANOMALY SCORE], " + Math.abs((totalcash - counted_sum) / (1.0 * count)));    return false;  } else {    return true;  }}  }
class C{  private OnScreenHint(Context context){  mWM=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  mY=context.getResources().getDimensionPixelSize(R.dimen.hint_y_offset);  mParams.height=WindowManager.LayoutParams.WRAP_CONTENT;  mParams.width=WindowManager.LayoutParams.WRAP_CONTENT;  mParams.flags=WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;  mParams.format=PixelFormat.TRANSLUCENT;  mParams.windowAnimations=R.style.Animation_OnScreenHint;  mParams.type=WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;  mParams.setTitle("OnScreenHint");}  }
class C{  private Base64(){}  }
class C{  protected void replaceInFile(String file,Map<String,String> replacements,String encoding) throws CargoException {  boolean ignoreNonExistingProperties=Boolean.valueOf(getPropertyValue(GeneralPropertySet.IGNORE_NON_EXISTING_PROPERTIES)).booleanValue();  if (replacements.isEmpty()) {    return;  }  String path=getHome() + "/" + file;  getFileHandler().replaceInFile(path,replacements,encoding,ignoreNonExistingProperties);}  }
class C{  public WhereBuilder or(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "OR",columnName,op,value);  return this;}  }
class C{  public String toStringWithoutRowDef(String missingRowDefExplanation){  final AkibanAppender sb=AkibanAppender.of(new StringBuilder());  try {    sb.append("RowData[");    sb.append(missingRowDefExplanation);    sb.append("]?(rowDefId=");    sb.append(getRowDefId());    sb.append(": ");    AkServerUtil.hex(sb,bytes,rowStart,rowEnd - rowStart);  } catch (  Exception e) {    int size=Math.min(getRowSize(),64);    if (size > 0 && rowStart >= 0) {      sb.append(AkServerUtil.dump(bytes,rowStart,size));    }    return sb.toString();  }  return sb.toString();}  }
class C{  public void pushFile(String local,String remote) throws IOException, AdbCommandRejectedException, TimeoutException, SyncException {  SyncService sync=null;  try {    String targetFileName=getFileName(local);    Log.d(targetFileName,String.format("Uploading %1$s onto device '%2$s'",targetFileName,getSerialNumber()));    sync=getSyncService();    if (sync != null) {      String message=String.format("Uploading file onto device '%1$s'",getSerialNumber());      Log.d(LOG_TAG,message);      sync.pushFile(local,remote,SyncService.getNullProgressMonitor());    } else {      throw new IOException("Unable to open sync connection!");    }  } catch (  TimeoutException e) {    Log.e(LOG_TAG,"Error during Sync: timeout.");    throw e;  }catch (  SyncException|IOException e) {    Log.e(LOG_TAG,String.format("Error during Sync: %1$s",e.getMessage()));    throw e;  } finally {    if (sync != null) {      sync.close();    }  }}  }
class C{  public static byte[] toSeed(List<String> words,String passphrase){  return toSeed(words,passphrase,Version.V0_6);}  }
class C{  public void propagate_lookaheads(terminal_set incoming) throws internal_error {  boolean change=false;  if (!needs_propagation && (incoming == null || incoming.empty()))   return;  if (incoming != null) {    change=lookahead().add(incoming);  }  if (change || needs_propagation) {    needs_propagation=false;    for (int i=0; i < propagate_items().size(); i++)     ((lalr_item)propagate_items().elementAt(i)).propagate_lookaheads(lookahead());  }}  }
class C{  @Override public void beforeActivation(ServiceReference<ServiceType> activating) throws Exception {}  }
class C{  public static void logException(Throwable ex){  ILog log=getDefault().getLog();  IStatus status=null;  if (ex instanceof CoreException) {    status=((CoreException)ex).getStatus();  } else {    status=new Status(IStatus.ERROR,PLUGIN_ID,0,ex.toString(),ex);  }  log.log(status);  ex.printStackTrace();}  }
class C{  public int connectionsLimit(){  return connectionsLimit;}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public FaultyResponseContentType(){  requestFileName="getstate.query";  responseFile="getstate.answer";  responseContentType="blah";}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public static void showPropertiesDialog(Shell shell,String id,IAdaptable element,Object data){  PreferencesUtil.createPropertyDialogOn(shell,element,id,new String[]{id},data).open();}  }
class C{  private void readObject(){}  }
class C{  public static <T extends BlockObject>void updateExportGroup(ExportGroup exportGroup,T volume,DbClient dbClient,List<Initiator> allInitiators,List<Host> hosts,Cluster cluster){  for (  Host host : hosts) {    if (null == exportGroup.getHosts() || !exportGroup.getHosts().contains(host.getId().toString())) {      exportGroup.addHost(host);    }  }  if (null != cluster && (null == exportGroup.getClusters() || !exportGroup.getClusters().contains(cluster.getId().toString()))) {    exportGroup.addCluster(cluster);  }  for (  Initiator ini : allInitiators) {    if (exportGroup.getInitiators() == null || !exportGroup.getInitiators().contains(ini.getId().toString())) {      exportGroup.addInitiator(ini);    }  }  if (!volume.checkInternalFlags(Flag.PARTIALLY_INGESTED)) {    _logger.info("adding volume {} to export group {}",volume.forDisplay(),exportGroup.forDisplay());    exportGroup.addVolume(volume.getId(),ExportGroup.LUN_UNASSIGNED);  } else {    _logger.info("volume {} is partially ingested, so not adding to export group {}",volume.forDisplay(),exportGroup.forDisplay());  }  if (volume instanceof Volume) {    Volume vol=(Volume)volume;    URI haVarray=checkVplexHighAvailabilityArray(vol,dbClient);    if (null != haVarray) {      exportGroup.putAltVirtualArray(volume.getStorageController().toString(),haVarray.toString());    }  }}  }
class C{  private void notifyOnProvisioningCompletion(ServiceInstance currentSI,InstanceResult instanceResult) throws BESNotificationException {  ProvisioningStatus provisioningStatus=currentSI.getProvisioningStatus();switch (provisioningStatus) {case WAITING_FOR_SYSTEM_CREATION:    besDAO.notifyAsyncSubscription(currentSI,instanceResult,true,null);  break;case WAITING_FOR_SYSTEM_MODIFICATION:besDAO.notifyAsyncModifySubscription(currentSI,instanceResult,true,null);break;case WAITING_FOR_SYSTEM_UPGRADE:besDAO.notifyAsyncUpgradeSubscription(currentSI,instanceResult,true,null);break;case WAITING_FOR_SYSTEM_OPERATION:Operation operation=operationDAO.getOperationByInstanceId(currentSI.getInstanceId());if (operation != null) {besDAO.notifyAsyncOperationStatus(currentSI,operation.getTransactionId(),OperationStatus.COMPLETED,null);em.remove(operation);}break;default :return;}if (currentSI.isDeleted()) {logger.info("The processing of service instance '{}' was completed, but OSCM subscription is already terminated.",Long.valueOf(currentSI.getTkey()));} else {logger.info("The processing of service instance '{}' was completed and OSCM has been notified accordingly",Long.valueOf(currentSI.getTkey()));}}  }
class C{  protected void processChange(Database currentModel,Database desiredModel,AddIndexChange change,StringBuilder ddl){  writeExternalIndexCreateStmt(change.getChangedTable(),change.getNewIndex(),ddl);  change.apply(currentModel,delimitedIdentifierModeOn);}  }
class C{  public EpsilonBoxObjectiveComparator(double[] epsilons){  this.epsilons=epsilons.clone();}  }
class C{  @Override public String toString(){  return super.toString() + "[Count = " + sync.getCount()+ "]";}  }
class C{  public void columnRemoved(TableColumnModelEvent e){  populatePopup();}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((Dcc4PcListener)client).message((Dcc4PcMessage)m);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4mfPackage.TESTED_PROJECT__VERSION_CONSTRAINT:    return basicSetVersionConstraint(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public T module(BQModuleProvider moduleProvider){  bootique.module(moduleProvider);  return (T)this;}  }
class C{  public boolean isSecure(){  return false;}  }
class C{  static String encodeEntity(char ch){  for (int i=0; i < HTML_ENTITIES.length; i++) {    if (HTML_ENTITIES[i] == ch) {      return HTML_ENCODED_ENTITIES[i];    }  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateGroupNodes(Collection<Group> groups){  for (  Group group : groups) {    PNode groupNode=objectNodeMap.get(group);    if (groupNode != null) {      ((GroupNode)groupNode).updateConstituentNodes();    }  }  updateComplete.decrementAndGet();}  }
class C{  public boolean isUnlimitedLease(){  return unlimitedLease;}  }
class C{  void showDialog(boolean modal,boolean reverse){  int h=Display.getInstance().getDisplayHeight() - menuBar.getPreferredH() - title.getPreferredH();  int w=Display.getInstance().getDisplayWidth();  int topSpace=h / 100 * 20;  int bottomSpace=h / 100 * 10;  int sideSpace=w / 100 * 20;  showModal(topSpace,bottomSpace,sideSpace,sideSpace,true,modal,reverse);}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes mAttributes) throws SAXException {  super.startElement(uri,localName,qName,mAttributes);  String name=localName.length() != 0 ? localName : qName;  this.mAttributes=mAttributes;switch (mState) {case INIT:{      log.info("init " + name);      if ("seq".equalsIgnoreCase(name)) {        mState=State.SEQ;        mRootSequence=createSequenceElement();        mCurrentElement=mRootSequence;      }      break;    }case SEQ:{    log.info("seq " + name);    SequenceElement seq=(SequenceElement)mCurrentElement;    if ("par".equalsIgnoreCase(name)) {      mState=State.PARA;      mCurrentElement=new ParallelElement(mCurrentElement);      seq.add(mCurrentElement);    } else     if ("text".equalsIgnoreCase(name)) {      seq.add(createTextElement());    } else     if ("audio".equalsIgnoreCase(name)) {      seq.add(createAudioElement());    }    break;  }case PARA:{  log.info("para " + name);  ParallelElement par=(ParallelElement)mCurrentElement;  if ("text".equalsIgnoreCase(name)) {    par.setTextElement(createTextElement());  } else   if ("audio".equalsIgnoreCase(name)) {    SequenceElement seq=new SequenceElement(mCurrentElement);    par.setAudioSequence(seq);    seq.add(createAudioElement());  } else   if ("seq".equalsIgnoreCase(name)) {    SequenceElement seq=createSequenceElement();    par.setAudioSequence(seq);    mCurrentElement=seq;    mState=State.SEQ;  }  break;}}}  }
class C{  private void addDataArray(){  if (!concatenate_data)   traceData.clear();  if (chronological) {    double[] newXValueArray;    newXValueArray=new double[currentYDataArray.length];    if (traceData.size() == 0)     for (int i=0; i < currentYDataArray.length; i++) {      newXValueArray[i]=i;    } else     for (int i=1; i < currentYDataArray.length + 1; i++) {      newXValueArray[i - 1]=traceData.getTail().getXValue() + i;    }    for (int i=0; i < Math.min(traceData.getBufferSize(),Math.min(newXValueArray.length,currentYDataArray.length)); i++) {      traceData.add(new Sample(newXValueArray[i],currentYDataArray[i]));    }  } else {    for (int i=0; i < Math.min(traceData.getBufferSize(),Math.min(currentXDataArray.length,currentYDataArray.length)); i++) {      traceData.add(new Sample(currentXDataArray[i],currentYDataArray[i]));    }  }  currentXDataChanged=false;  currentYDataChanged=false;  fireDataChange();}  }
class C{  public BitVector bitVector(){  final LongArrayBitVector result=LongArrayBitVector.ofLength(n);  for (long i=length; i-- != 0; )   result.set(select(i));  return result;}  }
class C{  public void addError(String level,TableModel table,ColumnModel column,String message){  if (level.equals(DBPlugin.LEVEL_ERROR)) {    this.errors.add(new DiagramError(table,createColumnMessage(table,column,message),level));    addErrorMessageToModel(table,ERROR_PREFIX + createColumnMessage(column,message));  } else   if (level.equals(DBPlugin.LEVEL_WARNING)) {    this.errors.add(new DiagramError(table,createColumnMessage(table,column,message),level));    addErrorMessageToModel(table,WARNING_PREFIX + createColumnMessage(column,message));  }}  }
class C{  public static double L_LogLossL(int Y[][],double Rpred[][]){  int N=Y.length;  int L=Y[0].length;  return L_LogLoss(Y,Rpred,Math.log((double)L)) / ((double)N * (double)L);}  }
class C{  private static void onEntityOpened(KeyEvent event) throws BadLocationException {  JEditorPane editor=(JEditorPane)event.getSource();  Document doc=editor.getDocument();  int pos=editor.getCaretPosition();  String tag=getCurrentTag(doc.getText(0,pos));  if (tag.equals("")) {    return;  }  String remainder=doc.getText(pos,doc.getLength() - pos);  for (int i=0; i < remainder.length(); i++) {    char c=remainder.charAt(i);    if (c == '\n') {      break;    } else     if (!Character.isWhitespace(c)) {      return;    }  }  StringBuffer buffer=new StringBuffer();  int newPosition=pos;  String indent=getIndent(doc,pos);  if (tag.equals("if")) {    buffer.append(" var=\"\" relation=\"=\" value=\"\"/>");    newPosition+=6;  } else   if (tag.equals("set")) {    buffer.append(" var=\"\" value=\"\"/>");    newPosition+=6;  } else   if (tag.equals("value")) {    buffer.append(" prob=\"\"></value>");    newPosition+=7;  } else   if (tag.equals("variable")) {    buffer.append(" id=\"\">\n");    buffer.append(indent + "\t<value prob=\"1\"></value>\n");    buffer.append(indent + "</variable>\n");    newPosition+=5;  } else   if (tag.equals("model")) {    buffer.append(" trigger=\"\">\n\n");    buffer.append(indent + "</model>");    newPosition+=10;  } else   if (tag.equals("effect")) {    buffer.append(" prob=\"1\">\n");    buffer.append(indent + "\t<set var=\"\" value=\"\"/>\n");    buffer.append(indent + "</effect>\n");    newPosition+=22 + indent.length();  } else {    return;  }  doc.insertString(pos,buffer.toString(),null);  editor.setCaretPosition(newPosition);  event.consume();}  }
class C{  public void mapOptions(CeylonConfig config){  setTimeout((int)DefaultToolOptions.getDefaultTimeout(config));  setOffline(DefaultToolOptions.getDefaultOffline(config));  setOverrides(DefaultToolOptions.getDefaultOverrides(config));  setRun(DefaultToolOptions.getRunToolRun(config,null));  setDowngradeDist(!DefaultToolOptions.getLinkWithCurrentDistribution(config));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:31.342 -0500",hash_original_method="B3BE4D570FA623471DB2047631197E6D",hash_generated_method="F3FD63ABD3BE3678AF17069F54E5D0D5") public void close() throws IOException {  guard.close();  RandomAccessFile raf=mRaf;  if (raf != null) {synchronized (raf) {      mRaf=null;      raf.close();    }    if (fileToDeleteOnClose != null) {      fileToDeleteOnClose.delete();      fileToDeleteOnClose=null;    }  }}  }
class C{  public void initialise() throws Exception {  initialise(k);}  }
class C{  public static byte[] toByteArray(char[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(byte)array[i];  }  return result;}  }
class C{  private static Point2D.Double v2ScaleIII(Point2D.Double v,double s){  Point2D.Double result=new Point2D.Double();  result.x=v.x * s;  result.y=v.y * s;  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  void appendOptions(Document xmldoc,LocalizerServiceLocal localizer,ParameterDefinition def,Element defNode){  List<ParameterOption> optionList=def.getOptionList();  if (optionList == null || optionList.isEmpty()) {    return;  }  Element optsNode=xmldoc.createElement("Options");  defNode.appendChild(optsNode);  for (  ParameterOption option : optionList) {    Element optNode=xmldoc.createElement("Option");    optNode.setAttribute("id",option.getOptionId());    optsNode.appendChild(optNode);    appendLocalizedValues(xmldoc,localizer,optNode,LocalizedObjectTypes.OPTION_PARAMETER_DEF_DESC,option.getKey(),"LocalizedOption");  }}  }
class C{  public void deleteInstance(){  int index;  index=m_TableArff.getSelectedRow();  if (index == -1) {    return;  }  ((ArffSortedTableModel)m_TableArff.getModel()).deleteInstanceAt(index);}  }
class C{  public Code39Reader(){  usingCheckDigit=false;  extendedMode=false;}  }
class C{  public void drawToOpenGL(final GL2 gl,final JOGLRenderer renderer){  loadObject(renderer.getSurface().getScope(),true);  int nextmat=-1;  int matcount=0;  final int totalmats=matTimings.size();  String[] nextmatnamearray=null;  String nextmatname=null;  if (totalmats > 0 && materials != null) {    nextmatnamearray=matTimings.get(matcount);    nextmatname=nextmatnamearray[0];    nextmat=Integer.parseInt(nextmatnamearray[1]);  }  Texture texture=null;  for (int i=0; i < faces.size(); i++) {    if (i == nextmat) {      if (texture != null) {        texture.disable(gl);        texture.destroy(gl);        texture=null;      }      gl.glEnable(GLLightingFunc.GL_COLOR_MATERIAL);      GLUtilGLContext.SetCurrentColor(gl,materials.getKd(nextmatname)[0],materials.getKd(nextmatname)[1],materials.getKd(nextmatname)[2],materials.getd(nextmatname));      final String mapKa=materials.getMapKa(nextmatname);      final String mapKd=materials.getMapKd(nextmatname);      final String mapd=materials.getMapd(nextmatname);      if (mapKa != null || mapKd != null || mapd != null) {        File f=new File(mtlPath);        String path=f.getAbsolutePath().replace(f.getName(),"");        if (mapd != null) {          path+=mapd;        } else         if (mapKa != null) {          path+=mapKa;        } else         if (mapKd != null) {          path+=mapKd;        }        f=new File(path);        if (f.exists()) {          final TextureCache cache=renderer.getSharedTextureCache();          if (!cache.contains(f)) {            cache.buildAndSaveTextureImmediately(gl,f);          }          texture=cache.get(gl,f);          texture.setTexParameteri(gl,GL2.GL_TEXTURE_WRAP_S,GL2.GL_REPEAT);          texture.setTexParameteri(gl,GL2.GL_TEXTURE_WRAP_T,GL2.GL_REPEAT);          texture.enable(gl);          texture.bind(gl);        }      }      matcount++;      if (matcount < totalmats) {        nextmatnamearray=matTimings.get(matcount);        nextmatname=nextmatnamearray[0];        nextmat=Integer.parseInt(nextmatnamearray[1]);      }    }    final int[] tempfaces=faces.get(i);    final int[] tempfacesnorms=facesNorms.get(i);    final int[] tempfacestexs=facesTexs.get(i);    int polytype;    if (tempfaces.length == 3) {      polytype=GL.GL_TRIANGLES;    } else     if (tempfaces.length == 4) {      polytype=GL2ES3.GL_QUADS;    } else {      polytype=GL2.GL_POLYGON;    }    gl.glBegin(polytype);    for (int w=0; w < tempfaces.length; w++) {      if (tempfacesnorms[w] != 0) {        final float normtempx=vertexsetsNorms.get(tempfacesnorms[w] - 1)[0];        final float normtempy=vertexsetsNorms.get(tempfacesnorms[w] - 1)[1];        final float normtempz=vertexsetsNorms.get(tempfacesnorms[w] - 1)[2];        gl.glNormal3f(normtempx,normtempy,normtempz);      }      if (tempfacestexs[w] != 0) {        final float textempx=vertexSetsTexs.get(tempfacestexs[w] - 1)[0];        final float textempy=vertexSetsTexs.get(tempfacestexs[w] - 1)[1];        final float textempz=vertexSetsTexs.get(tempfacestexs[w] - 1)[2];        final float valy=1f - textempy;        if (valy >= 0 && valy <= 1.0) {          gl.glTexCoord3f(textempx,valy,textempz);        } else {          gl.glTexCoord3f(textempx,Math.abs(textempy),textempz);        }      }      final float tempx=vertexSets.get(tempfaces[w] - 1)[0];      final float tempy=vertexSets.get(tempfaces[w] - 1)[1];      final float tempz=vertexSets.get(tempfaces[w] - 1)[2];      gl.glVertex3f(tempx,tempy,tempz);    }    gl.glEnd();  }  if (texture != null) {    texture.disable(gl);    texture=null;  }}  }
class C{  public void addUsedHeapMemorySize(long usedHeapMemorySize){  this.totalUsedHeapMemorySize+=usedHeapMemorySize;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public JCMethodInvocation App(JCExpression meth){  return Apply(null,meth,List.<JCExpression>nil()).setType(meth.type.getReturnType());}  }
class C{  protected static ValueTrackerElement transformRegisters(final ReilInstruction instruction,final ValueTrackerElement incomingState,final IElementGenerator generator){  final ReilOperand firstOperand=instruction.getFirstOperand();  final ReilOperand secondOperand=instruction.getSecondOperand();  final ReilOperand thirdOperand=instruction.getThirdOperand();  final IValueElement previousState1=incomingState.getState(firstOperand.getValue());  final IValueElement previousState2=incomingState.getState(secondOperand.getValue());  final IValueElement outputValue=getOutputValue(firstOperand,previousState1,secondOperand,previousState2,generator);  return incomingState.update(instruction,new Register(thirdOperand.getValue()),outputValue);}  }
class C{  public void sendMapSettings(MapSettings settings){  send(new Packet(Packet.COMMAND_SENDING_MAP_SETTINGS,settings));}  }
class C{  protected void playMedia(){  mState=State.STOPPED;  releaseResources(false);  try {    if (mFile == null) {      Toast.makeText(this,R.string.media_err_nothing_to_play,Toast.LENGTH_LONG).show();      processStopRequest(true);      return;    } else     if (mAccount == null) {      Toast.makeText(this,R.string.media_err_not_in_owncloud,Toast.LENGTH_LONG).show();      processStopRequest(true);      return;    }    createMediaPlayerIfNeeded();    mPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);    String url=mFile.getStoragePath();    mIsStreaming=false;    mPlayer.setDataSource(url);    mState=State.PREPARING;    setUpAsForeground(String.format(getString(R.string.media_state_loading),mFile.getFileName()));    mPlayer.prepareAsync();    if (mIsStreaming) {      mWifiLock.acquire();    } else     if (mWifiLock.isHeld()) {      mWifiLock.release();    }  } catch (  SecurityException e) {    Log_OC.e(TAG,"SecurityException playing " + mAccount.name + mFile.getRemotePath(),e);    Toast.makeText(this,String.format(getString(R.string.media_err_security_ex),mFile.getFileName()),Toast.LENGTH_LONG).show();    processStopRequest(true);  }catch (  IOException e) {    Log_OC.e(TAG,"IOException playing " + mAccount.name + mFile.getRemotePath(),e);    Toast.makeText(this,String.format(getString(R.string.media_err_io_ex),mFile.getFileName()),Toast.LENGTH_LONG).show();    processStopRequest(true);  }catch (  IllegalStateException e) {    Log_OC.e(TAG,"IllegalStateException " + mAccount.name + mFile.getRemotePath(),e);    Toast.makeText(this,String.format(getString(R.string.media_err_unexpected),mFile.getFileName()),Toast.LENGTH_LONG).show();    processStopRequest(true);  }catch (  IllegalArgumentException e) {    Log_OC.e(TAG,"IllegalArgumentException " + mAccount.name + mFile.getRemotePath(),e);    Toast.makeText(this,String.format(getString(R.string.media_err_unexpected),mFile.getFileName()),Toast.LENGTH_LONG).show();    processStopRequest(true);  }}  }
class C{  void dumpOids(){  for (int i=0; i < objectTypes.size(); i++) {    String typeName=objectTypes.get(i);    if (typeName != null) {      System.out.printf("// %s\n\n",typeName);      System.out.printf("public static final int %-47s = %d;\n","TYPE_" + typeName.toUpperCase().replace(' ','_'),i);      for (      String subTypeName : getSubTypeNames(typeName)) {        System.out.printf("public static final int %-47s = %d;\n",subTypeName.toUpperCase().replace(' ','_'),this.getTypeId(typeName,subTypeName));      }      System.out.println();    }  }}  }
class C{  public void addToThis(PolynomialGF2mSmallM addend){  coefficients=add(coefficients,addend.coefficients);  computeDegree();}  }
class C{  public AbstractGrammar(final String owner,final JoshuaConfiguration config,final int spanLimit){  this.sorted=false;  this.owner=OwnerMap.register(owner);  this.joshuaConfiguration=config;  this.spanLimit=spanLimit;}  }
class C{  public static boolean isSuperAdmin(RepositoryService aProjectRepository,User aUser){  boolean roleAdmin=false;  for (  String role : getRoles(aProjectRepository,aUser)) {    if (Role.ROLE_ADMIN.name().equals(role)) {      roleAdmin=true;      break;    }  }  return roleAdmin;}  }
class C{  public void addVolumePairsToCg(StorageSystem system,List<URI> sourceURIs,URI remoteDirectorGroupURI,TaskCompleter completer){  RemoteDirectorGroup group=dbClient.queryObject(RemoteDirectorGroup.class,remoteDirectorGroupURI);  List<CIMObjectPath> syncPairs=newArrayList();  List<Volume> sources=dbClient.queryObject(Volume.class,sourceURIs);  List<Volume> targets=new ArrayList<>();  try {    for (    Volume source : sources) {      for (      String targetStr : source.getSrdfTargets()) {        URI targetURI=URI.create(targetStr);        Volume target=dbClient.queryObject(Volume.class,targetURI);        targets.add(target);      }    }    StorageSystem sourceSystem=dbClient.queryObject(StorageSystem.class,sources.get(0).getStorageController());    StorageSystem targetSystem=dbClient.queryObject(StorageSystem.class,targets.get(0).getStorageController());    Collection<String> srcDevIds=transform(filter(sources,hasNativeID()),fctnBlockObjectToNativeID());    Collection<String> tgtDevIds=transform(filter(targets,hasNativeID()),fctnBlockObjectToNativeID());    int attempts=0;    final int MAX_ATTEMPTS=12;    final int DELAY_TIME_IN_MS=5000;    do {      log.info("Attempt {}/{}...",attempts + 1,MAX_ATTEMPTS);      List<CIMObjectPath> repPaths=helper.getReplicationRelationships(system,REMOTE_LOCALITY_VALUE,MIRROR_VALUE,Mode.valueOf(targets.get(0).getSrdfCopyMode()).getMode(),STORAGE_SYNCHRONIZED_VALUE);      log.info("Found {} relationships",repPaths.size());      log.info("Looking for System elements on {} with IDs {}",sourceSystem.getNativeGuid(),Joiner.on(',').join(srcDevIds));      log.info("Looking for Synced elements on {} with IDs {}",targetSystem.getNativeGuid(),Joiner.on(',').join(tgtDevIds));      Collection<CIMObjectPath> syncPaths=filter(repPaths,and(cgSyncPairsPredicate(sourceSystem.getNativeGuid(),srcDevIds,CP_SYSTEM_ELEMENT),cgSyncPairsPredicate(targetSystem.getNativeGuid(),tgtDevIds,CP_SYNCED_ELEMENT)));      log.info("Need {} paths / Found {} paths",syncPaths.size(),sources.size());      if (syncPaths.size() == sources.size()) {        syncPairs.addAll(syncPaths);      } else {        try {          Thread.sleep(DELAY_TIME_IN_MS);        } catch (        InterruptedException ie) {          log.warn("Error:",ie);        }      }    } while (syncPairs.isEmpty() && (attempts++) < MAX_ATTEMPTS);    if (syncPairs.isEmpty()) {      throw new IllegalStateException("Failed to find synchronization paths");    }    findOrCreateTargetBlockConsistencyGroup(targets);    CIMObjectPath groupSynchronized=getGroupSyncObject(system,sources.get(0),group.getSourceReplicationGroupName(),group.getTargetReplicationGroupName());    if (groupSynchronized == null || syncPairs.isEmpty()) {      log.warn("Expected Group Synchronized not found");      log.error("Expected Group Synchronized not found for volumes {}",sources.get(0).getNativeId());      ServiceError error=SmisException.errors.jobFailed("Expected Group Synchronized not found");      WorkflowStepCompleter.stepFailed(completer.getOpId(),error);      completer.error(dbClient,error);      return;    }    Mode mode=Mode.valueOf(targets.get(0).getSrdfCopyMode());    CIMInstance settingInstance=getReplicationSettingDataInstance(system,mode.getMode(),true);    @SuppressWarnings("rawtypes") CIMArgument[] inArgs=helper.getAddSyncPairInputArguments(groupSynchronized,settingInstance,syncPairs.toArray(new CIMObjectPath[syncPairs.size()]));    helper.callModifyReplica(system,inArgs);    completer.ready(dbClient);  } catch (  WBEMException wbeme) {    log.error("SMI-S error adding sync pairs for volumes {}",sources,wbeme);    ServiceError error=SmisException.errors.jobFailed(wbeme.getMessage());    WorkflowStepCompleter.stepFailed(completer.getOpId(),error);    completer.error(dbClient,error);  }catch (  Exception e) {    log.error("Error error adding sync pairs for volumes {}",sources,e);    ServiceError error=SmisException.errors.jobFailed(e.getMessage());    WorkflowStepCompleter.stepFailed(completer.getOpId(),error);    completer.error(dbClient,error);  }}  }
class C{  public static boolean containsAny(CharSequence cs,char[] searchChars){  if (isEmpty(cs) || isEmpty(searchChars)) {    return false;  }  int csLength=cs.length();  int searchLength=searchChars.length;  int csLast=csLength - 1;  int searchLast=searchLength - 1;  for (int i=0; i < csLength; i++) {    char ch=cs.charAt(i);    for (int j=0; j < searchLength; j++) {      if (searchChars[j] == ch) {        if (Character.isHighSurrogate(ch)) {          if (j == searchLast) {            return true;          }          if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {            return true;          }        } else {          return true;        }      }    }  }  return false;}  }
class C{  private Location registerLocationListener(){  Preferences prefs=new Preferences(this);  locationManager=(LocationManager)getApplicationContext().getSystemService(Context.LOCATION_SERVICE);  List<String> providers=locationManager.getProviders(true);  Location bestLocation=null;  for (  String provider : providers) {    try {      locationManager.requestLocationUpdates(provider,prefs.getGpsInterval(),prefs.getGpsDistance(),this);      Location location=locationManager.getLastKnownLocation(provider);      if (bestLocation == null || !bestLocation.hasAccuracy() || (location != null && location.hasAccuracy() && location.getAccuracy() < bestLocation.getAccuracy())) {        bestLocation=location;      }    } catch (    IllegalArgumentException e) {    }catch (    SecurityException e) {    }  }  return bestLocation;}  }
class C{  public void address(InetSocketAddress addr){  this.addr=addr;}  }
class C{  static void showData(final PdfObject pdfObject,final int i,final int length,final byte[] raw,final String padding){  System.out.println("\n\n" + padding + " ------------readDictionaryAsObject ref="+ pdfObject.getObjectRefAsString()+ " into "+ pdfObject+ "-----------------\ni="+ i+ "\nData=>>>>");  System.out.print(padding);  for (int jj=i; jj < length; jj++) {    System.out.print((char)raw[jj]);    if (raw[jj] == 37) {      jj=StreamReaderUtils.skipComment(raw,jj);    }    if (jj > 5 && raw[jj - 5] == 's' && raw[jj - 4] == 't' && raw[jj - 3] == 'r' && raw[jj - 2] == 'e' && raw[jj - 1] == 'a' && raw[jj] == 'm') {      jj=length;    }    if (jj > 2 && raw[jj - 2] == 'B' && raw[jj - 1] == 'D' && raw[jj] == 'C') {      jj=length;    }  }  System.out.println(padding + "\n<<<<-----------------------------------------------------\n");}  }
class C{  private static boolean verifyZipFile(File file){  try {    ZipFile zipFile=new ZipFile(file);    try {      zipFile.close();      return true;    } catch (    IOException e) {      Log.w(TAG,"Failed to close zip file: " + file.getAbsolutePath());    }  } catch (  ZipException ex) {    Log.w(TAG,"File " + file.getAbsolutePath() + " is not a valid zip file.",ex);  }catch (  IOException ex) {    Log.w(TAG,"Got an IOException trying to open zip file: " + file.getAbsolutePath(),ex);  }  return false;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public TrainingSetPanel(List<Neuron> inputNeurons,NumericMatrix inputData,List<Neuron> targetNeurons,NumericMatrix targetData,int numVisibleColumnsPerTable){  inputPanel=new DataPanel(inputNeurons,inputData,numVisibleColumnsPerTable,"Input data");  targetPanel=new DataPanel(targetNeurons,targetData,numVisibleColumnsPerTable,"Target data");  init();}  }
class C{  protected NewExpressionImpl(){  super();}  }
class C{  private boolean translateBinary2(String op,RexNode left,RexNode right){  RexLiteral rightLiteral;switch (right.getKind()) {case CAST:    rightLiteral=(RexLiteral)((RexCall)right).getOperands().get(0);  break;case LITERAL:rightLiteral=(RexLiteral)right;break;default :return false;}switch (left.getKind()) {case INPUT_REF:final RexInputRef left1=(RexInputRef)left;String name=fieldNames.get(left1.getIndex());translateOp2(op,name,rightLiteral);return true;case CAST:return translateBinary2(op,((RexCall)left).operands.get(0),right);case OTHER_FUNCTION:default :return false;}}  }
class C{  public static GracePeriod createWithoutBillingEvent(GracePeriodStatus type,DateTime expirationTime,String clientId){  return createInternal(type,expirationTime,clientId,null,null);}  }
class C{  protected void onTrackStart() throws SAXException {  trackData=new TrackData();  long trackId;  if (importTrackId == -1L) {    Uri uri=myTracksProviderUtils.insertTrack(trackData.track);    trackId=Long.parseLong(uri.getLastPathSegment());  } else {    if (trackIds.size() > 0) {      throw new SAXException(createErrorMessage("Cannot import more than one track to an existing track " + importTrackId));    }    trackId=importTrackId;    myTracksProviderUtils.clearTrack(context,trackId);  }  trackIds.add(trackId);  trackData.track.setId(trackId);}  }
class C{  protected void installKeyboardActions(){  InputMap iMap=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  SwingUtilities.replaceUIInputMap(spinner,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,iMap);  LazyActionMap.installLazyActionMap(spinner,BasicSpinnerUI.class,"Spinner.actionMap");}  }
class C{  public void run(){  KMLLink.this.setUpdateTime(System.currentTimeMillis());  KMLLink.this.getRoot().requestRedraw();}  }
class C{  private void addKeyCondition(final EntityType entityType,Object entityKey){  final QueryObject<Object> query=getQueryForEntityType(entityType);  final QCondition condition=getKeyCondition(entityType,query,entityKey);  if (query.getCondition() == null) {    query.where(condition);  } else {    query.or(condition);  }}  }
class C{  private RSAAMResult authenticateRsaSecurId(String tenantName,String sessionId,String userName,String passcode) throws IDMException {  long startTime=System.nanoTime();  boolean authFailed=false;  RSAAMResult authResult=null;  logger.debug("Authenticating with RSA securID ..");  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ValidateUtil.validateNotNull(userName,"User Principal");    TenantInformation info=findTenant(tenantName);    AuthnPolicy aPolicy=info.getAuthnPolicy();    Validate.notNull(aPolicy,"AuthnPolicy can not be null.");    Validate.isTrue(aPolicy.IsRsaSecureIDAuthnEnabled(),"SecureID authentication is not turned on for this tenant.");    RSAAgentConfig rsaConfig=aPolicy.get_rsaAgentConfig();    Validate.notNull(rsaConfig,"RSAAgentConfig is not defined");    HashMap<String,String> userIDAttrMap=rsaConfig.get_idsUserIDAttributeMap();    AuthenticationSessionFactory api=null;    String[] userInfo=separateUserIDAndDomain(userName);    IIdentityProvider provider=info.findProviderADAsFallBack(userInfo[1]);    if (null == provider) {      throw new IDMLoginException(String.format("Identity source was not defined for user: %s.",userName));    }    validateProviderAllowedAuthnTypes(DirectoryConfigStore.FLAG_AUTHN_TYPE_ALLOW_RSA_SECUREID,provider.getName(),info);    api=this._rsaSessionFactoryCache.getAuthnFactory(info);    String userID=extractRsaUserID(info,userName,userIDAttrMap);    AuthenticationSession session=null;    String cachedSessionId=sessionId;    PrincipalId pId=getPrincipalIDFromUserName(info,userName,userIDAttrMap);    try {      if (cachedSessionId != null) {        session=IdentityManager._rsaSessionCache.getSession(tenantName,cachedSessionId);      }      if (session == null) {        logger.debug("Using new AuthSession ...");        session=api.createSession();        String newSessionId=createSessionId();        int status=session.authenticate(userID,new AuthenticationSecret(passcode)).getStatusCode();        if (status == AuthenticationResult.NEXT_CODE_REQUIRED) {          IdentityManager._rsaSessionCache.addSession(tenantName,newSessionId,session);        }        authResult=afterProcessRSAStatus(status,newSessionId,userName,pId);      } else {        logger.debug("Using cached AuthSession, in second leg of NEXT_CODE_REQUIRED mode ...");        int prevStatus=session.getAuthenticationStatus().getStatusCode();        if (prevStatus != AuthenticationResult.NEXT_CODE_REQUIRED) {          throw new IDMLoginException(String.format("Unexpected status in a cached rsa session: %s.",prevStatus));        }        int status=session.nextAuthenticationStep(new AuthenticationSecret(passcode)).getStatusCode();        authResult=afterProcessRSAStatus(status,cachedSessionId,userName,pId);        if (status != AuthenticationResult.NEXT_CODE_REQUIRED) {          IdentityManager._rsaSessionCache.removeSession(tenantName,cachedSessionId);        }      }    }  finally {      if (session.getAuthenticationStatus().getStatusCode() != AuthenticationResult.NEXT_CODE_REQUIRED) {        session.closeSession();      }    }  } catch (  IDMLoginException ex) {    authFailed=true;    throw ex;  }catch (  IDMException ex) {    authFailed=true;    throw ex;  }catch (  Exception ex) {    authFailed=true;    logger.error(String.format("Failed to authenticate principal [%s] by passcode",userName != null ? userName : "null"),ex);    throw new IDMException(ex.getMessage());  } finally {    long delta=TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime);    if (logger.isInfoEnabled()) {      logger.info(String.format("Authentication %s for user [%s] in tenant [%s] in [%d] milliseconds with rsa secureID",authFailed ? "failed" : "succeeded or entered \"NEXT_CODE_REQUIRED\" mode",userName,tenantName,delta));    }    IdmServer.getPerfDataSinkInstance().addMeasurement(new PerfBucketKey(PerfMeasurementPoint.IDMAuthenticate,userName),delta);  }  return authResult;}  }
class C{  public int length(){  return this.myHashMap.size();}  }
class C{  public PLImageFileDownloaderListener(PLIImage image,PLTextureColorFormat colorFormat){  super();  mImage=image;  mColorFormat=colorFormat;}  }
class C{  public static Date createTimeSinceOrigin(double age,Type units,double origin){  return new Date(age,units,false,origin);}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  private static GeoPolygon fromPolygon(final Polygon polygon){  final Polygon[] theHoles=polygon.getHoles();  final List<GeoPolygon> holeList=new ArrayList<>(theHoles.length);  for (  final Polygon hole : theHoles) {    final GeoPolygon component=fromPolygon(hole);    if (component != null) {      holeList.add(component);    }  }  final double[] polyLats=polygon.getPolyLats();  final double[] polyLons=polygon.getPolyLons();  final List<GeoPoint> points=new ArrayList<>(polyLats.length - 1);  for (int i=0; i < polyLats.length - 1; i++) {    final int index=polyLats.length - 2 - i;    points.add(new GeoPoint(PlanetModel.WGS84,fromDegrees(polyLats[index]),fromDegrees(polyLons[index])));  }  final GeoPolygon rval=GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84,points,holeList);  return rval;}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (getClassifier(history,index) instanceof MultiLabelClassifier) && (history.getResultAt(index).getMeasurement(CURVE_DATA_MICRO) != null);}  }
class C{  public boolean acceptsDropTrain(Train train){  if (_dropOption.equals(ANY)) {    return true;  }  if (getTrackType().equals(YARD)) {    return true;  }  if (_dropOption.equals(TRAINS)) {    return containsDropId(train.getId());  }  if (_dropOption.equals(EXCLUDE_TRAINS)) {    return !containsDropId(train.getId());  } else   if (train.getRoute() == null) {    return false;  }  return acceptsDropRoute(train.getRoute());}  }
class C{  public void turn(){  if (turningClip != null) {    turningClip.play();  }}  }
class C{  public void testPassiveJoin() throws Throwable {  testServerJoin(Member.Type.PASSIVE);}  }
class C{  public SmellSource(final double[] distalstim){  this.stimulusVector=distalstim;}  }
class C{  public void removeVoiceChannel(VoiceChannel channel){  voiceChannels.remove(channel.getId());}  }
class C{  private ScServer createOrFindScServer(StorageCenterAPI api,String ssn,List<Initiator> initiators,List<ScServerHba> matchedHbas){  return createOrFindScServer(api,ssn,initiators,matchedHbas,true);}  }
class C{  private void yypushback(int number){  if (number > yylength())   yy_ScanError(YY_PUSHBACK_2BIG);  yy_markedPos-=number;}  }
class C{  private ReaderWorld(){  pattern=Pattern.compile(regularExpression);  matcher=pattern.matcher(getText());}  }
class C{  public int writeUInt24(int index,int ui){  this.writeByte(index,(byte)((ui >> 16) & 0xff));  this.writeByte(index + 1,(byte)((ui >> 8) & 0xff));  this.writeByte(index + 2,(byte)(ui & 0xff));  return 3;}  }
class C{  @Inline @Override public final void floatWrite(ObjectReference objref,float value,Word offset,Word location,int mode){  Magic.setFloatAtOffset(objref.toObject(),offset.toOffset(),value,location.toInt());}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void testFlipBitPositiveOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=150;  byte rBytes[]={64,0,0,0,0,0,1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public long readDouble(String filePath,long offset){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.LONG_SIZE_IN_BYTE,offset);  return byteBffer.getLong();}  }
class C{  public static MethodHandle identity(Class<?> type){  Wrapper btw=(type.isPrimitive() ? Wrapper.forPrimitiveType(type) : Wrapper.OBJECT);  int pos=btw.ordinal();  MethodHandle ident=IDENTITY_MHS[pos];  if (ident == null) {    ident=setCachedMethodHandle(IDENTITY_MHS,pos,makeIdentity(btw.primitiveType()));  }  if (ident.type().returnType() == type)   return ident;  assert (btw == Wrapper.OBJECT);  return makeIdentity(type);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.020 -0500",hash_original_method="72E6824355C9DBC273758F3BBD7B1F36",hash_generated_method="80910418259D620C34834AD17DF81588") public byte[] toByteArray(){  int len=(mPos >>> 3) + ((mPos & 0x07) > 0 ? 1 : 0);  byte[] newBuf=new byte[len];  System.arraycopy(mBuf,0,newBuf,0,len);  return newBuf;}  }
class C{  public int compare(Decode o1,Decode o2){  int returnVal=CoreUtils.nullSafeComparator(o1.getDisplayName(),o2.getDisplayName());  if (m_ascending.equals(Boolean.FALSE)) {    returnVal=returnVal * -1;  }  return returnVal;}  }
class C{  private void cleanupSecurity(){  if (!m_source.isObjectExists("AD_Role",m_source.getTables()))   return;  resetDBObjects(DBObject_Table.class);  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"cleanupSecurity",m_direction);  String vendor=m_target.getVendor();  String catalog=m_target.getCatalog();  String schema=m_target.getSchema();  Savepoint sp=m_target.setSavepoint("set security levels");  HashMap<Integer,String> roleAccess=new HashMap<Integer,String>();  Statement stmt=m_target.setStatement();  ResultSet rs=m_target.executeQuery(stmt,s_dbEngine.sql_select(vendor,catalog,schema,"AD_Role","ismanual='N' ORDER BY ad_role_id"));  while (m_target.getResultSetNext(rs)) {    int ad_role_id=m_target.getResultSetInt(rs,"AD_Role_ID");    String userlevel=m_target.getResultSetString(rs,"UserLevel");    int securityMask=0;    if (userlevel.toUpperCase().contains("S"))     securityMask=securityMask | 4;    if (userlevel.toUpperCase().contains("C"))     securityMask=securityMask | 2;    if (userlevel.toUpperCase().contains("O"))     securityMask=securityMask | 1;    StringBuffer securityClearance=new StringBuffer("(");    for (int i=1; i <= 7; i++) {      if ((i & securityMask) != 0) {        if (securityClearance.length() > 1)         securityClearance.append(", ");        securityClearance.append("'").append(i).append("'");      }    }    securityClearance.append(")");    roleAccess.put(ad_role_id,securityClearance.toString());  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  for (Iterator<String> it=m_objectList.iterator(); it.hasNext(); ) {    String key=it.next();    DBObject obj=m_sourceMap.get(key);    if (obj == null) {      obj=m_targetMap.get(key);      if (obj.getCustomizationLevel() == s_parameters.CUSTOMNONE)       obj=null;    }    if (obj != null) {      String tableName=obj.getName();      if (tableName.toUpperCase().endsWith("_ACCESS") && hasTableColumn(obj,"AD_Role_ID")) {        if (!hasTableColumn(obj,"IsExclude")) {          String baseKey=key.substring(0,tableName.toUpperCase().lastIndexOf("_ACCESS"));          if (tableName.equalsIgnoreCase("AD_Document_Action_Access"))           baseKey="AD_CLIENT";          DBObject baseObj=m_sourceMap.get(baseKey);          if (baseObj != null) {            String baseTableName=baseObj.getName();            if (hasTableColumn(baseObj,"AccessLevel") || baseTableName.equalsIgnoreCase("AD_Window") || tableName.equalsIgnoreCase("AD_Document_Action_Access")) {              Vector<Integer> vRoles=new Vector<Integer>(roleAccess.keySet());              java.util.Collections.sort(vRoles);              for (Iterator<Integer> roleIterator=vRoles.iterator(); roleIterator.hasNext(); ) {                int ad_role_id=roleIterator.next();                PreparedStatementWrapper stmtDeleteRoleAccess=m_target.setPreparedStatement(s_dbEngine.sql_deleteByCondition(vendor,catalog,schema,tableName,"ad_role_id = ?"));                m_target.setPreparedStatementInt(stmtDeleteRoleAccess,1,ad_role_id);                Integer sqlResult=m_target.executeUpdate(stmtDeleteRoleAccess,false);                if (sqlResult != null) {                  logDropDetail(sqlResult,null);                }                m_target.releasePreparedStatement(stmtDeleteRoleAccess);                String baseTableID=new StringBuffer(baseTableName).append("_ID").toString();                ArrayList<String> insertColumnNames=new ArrayList<String>();                ArrayList<String> insertColumnValues=new ArrayList<String>();                Vector<Integer> vColumns=new Vector<Integer>(obj.getContents().keySet());                java.util.Collections.sort(vColumns);                for (Iterator<Integer> columnIterator=vColumns.iterator(); columnIterator.hasNext(); ) {                  Integer col=columnIterator.next();                  DBObject_Table_Column accessColumn=(DBObject_Table_Column)obj.getContents().get(col);                  String columnName=accessColumn.getName();                  if (columnName.equalsIgnoreCase(baseTableID)) {                    insertColumnNames.add(columnName);                    insertColumnValues.add(new StringBuffer("t.").append(baseTableID).toString());                  } else                   if (columnName.equalsIgnoreCase("C_DocType_ID")) {                    insertColumnNames.add(columnName);                    insertColumnValues.add("t0.C_DocType_ID");                  } else                   if (columnName.equalsIgnoreCase("AD_Ref_List_ID")) {                    if (tableName.equalsIgnoreCase("AD_Document_Action_Access")) {                      insertColumnNames.add(columnName);                      insertColumnValues.add("t1.AD_Ref_List_ID");                    }                  } else                   if (columnName.equalsIgnoreCase("AD_Role_ID")) {                    insertColumnNames.add(columnName);                    if (tableName.equalsIgnoreCase("AD_Document_Action_Access")) {                      insertColumnValues.add("t2.AD_Role_ID");                    } else {                      insertColumnValues.add(new Integer(ad_role_id).toString());                    }                  } else                   if (columnName.equalsIgnoreCase("AD_Client_ID")) {                    if (!tableName.equalsIgnoreCase("AD_Document_Action_Access")) {                      insertColumnNames.add(columnName);                      insertColumnValues.add("0");                    }                  } else                   if (columnName.equalsIgnoreCase("AD_Org_ID") || columnName.equalsIgnoreCase("CreatedBy") || columnName.equalsIgnoreCase("UpdatedBy")) {                    insertColumnNames.add(columnName);                    insertColumnValues.add("0");                  } else                   if (columnName.equalsIgnoreCase("IsActive") || columnName.equalsIgnoreCase("isReadWrite")) {                    insertColumnNames.add(columnName);                    insertColumnValues.add("'Y'");                  } else                   if (columnName.equalsIgnoreCase("Created") || columnName.equalsIgnoreCase("Updated")) {                    insertColumnNames.add(columnName);                    insertColumnValues.add(s_dbEngine.translateExpression("POSTGRES",vendor,"now()"));                  }                }                ArrayList<String> joinTypes=new ArrayList<String>();                ArrayList<String> joinTables=new ArrayList<String>();                ArrayList<String> joinConditions=new ArrayList<String>();                if (tableName.equalsIgnoreCase("AD_Window_Access")) {                  joinTypes.add("INNER JOIN");                  joinTables.add("AD_Tab");                  joinConditions.add("t.AD_Window_ID = t0.AD_Window_ID");                  joinTypes.add("INNER JOIN");                  joinTables.add("AD_Table");                  joinConditions.add("t0.AD_Table_ID = t1.AD_Table_ID");                }                if (tableName.equalsIgnoreCase("AD_Document_Action_Access")) {                  joinTypes.add("INNER JOIN");                  joinTables.add("C_Doctype");                  joinConditions.add("t0.AD_Client_ID = t.AD_Client_ID");                  joinTypes.add("INNER JOIN");                  joinTables.add("AD_Ref_List");                  joinConditions.add("t1.AD_Reference_ID = 135");                  joinTypes.add("INNER JOIN");                  joinTables.add("AD_Role");                  joinConditions.add(new StringBuffer("t2.AD_Client_ID = t.AD_Client_ID AND t2.AD_Role_ID = ").append(ad_role_id).toString());                }                String whereClause=new StringBuffer("t.AccessLevel IN ").append(roleAccess.get(ad_role_id)).toString();                if (tableName.equalsIgnoreCase("AD_Window_Access")) {                  String winAccess=roleAccess.get(ad_role_id);                  StringBuffer winWhere=new StringBuffer("t1.AccessLevel IN ").append(winAccess).append(" ");                  if (!(winAccess.contains("2") || winAccess.contains("4"))) {                    winWhere.append("AND t.Name NOT LIKE '%(all)%' ");                  }                  String sql=s_dbEngine.sql_select(vendor,catalog,schema,"AD_Tab","tx.AD_Window_ID = t.AD_Window_ID").replace("*","min(SeqNo)").replace(" t "," tx ");                  winWhere.append("AND t0.SeqNo = (").append(sql).append(") ");                  whereClause=winWhere.toString();                }                if (tableName.equalsIgnoreCase("AD_Document_Action_Access")) {                  whereClause=null;                }                String sqlCommand=s_dbEngine.sql_insertFromTable(vendor,catalog,schema,tableName,insertColumnNames,insertColumnValues,baseTableName,joinTypes,joinTables,joinConditions,whereClause);                stmt=m_target.setStatement();                sqlResult=m_target.executeUpdate(stmt,sqlCommand,false,false);                if (sqlResult != null) {                  logAddDetail(sqlResult,null);                }                m_target.releaseStatement(stmt);              }            }          }        }      }    }  }  m_target.releaseSavepoint(sp);  logResults();}  }
class C{  private java.util.HashMap<Float,java.awt.Color> recalculate(final java.util.List<Float> FRACTION_LIST,final java.util.List<java.awt.Color> COLOR_LIST,final float OFFSET){  final int MAX_FRACTIONS=FRACTION_LIST.size();  final java.util.HashMap<Float,java.awt.Color> FRACTION_COLORS=new java.util.HashMap<Float,java.awt.Color>(MAX_FRACTIONS);  for (int i=0; i < MAX_FRACTIONS; i++) {    final float TMP_FRACTION=FRACTION_LIST.get(i) + OFFSET;    final java.awt.Color TMP_COLOR=COLOR_LIST.get(i);    if (TMP_FRACTION <= 0) {      FRACTION_COLORS.put(1.0f + TMP_FRACTION + 0.0001f,TMP_COLOR);      final float NEXT_FRACTION;      final java.awt.Color NEXT_COLOR;      if (i < MAX_FRACTIONS - 1) {        NEXT_FRACTION=FRACTION_LIST.get(i + 1) + OFFSET;        NEXT_COLOR=COLOR_LIST.get(i + 1);      } else {        NEXT_FRACTION=1 - FRACTION_LIST.get(0) + OFFSET;        NEXT_COLOR=COLOR_LIST.get(0);      }      if (NEXT_FRACTION > 0) {        final java.awt.Color NEW_FRACTION_COLOR=getColorFromFraction(TMP_COLOR,NEXT_COLOR,(int)((NEXT_FRACTION - TMP_FRACTION) * 10000),(int)((-TMP_FRACTION) * 10000));        FRACTION_COLORS.put(0.0f,NEW_FRACTION_COLOR);        FRACTION_COLORS.put(1.0f,NEW_FRACTION_COLOR);      }    } else     if (TMP_FRACTION >= 1) {      FRACTION_COLORS.put(TMP_FRACTION - 1.0f - 0.0001f,TMP_COLOR);      final float PREVIOUS_FRACTION;      final java.awt.Color PREVIOUS_COLOR;      if (i > 0) {        PREVIOUS_FRACTION=FRACTION_LIST.get(i - 1) + OFFSET;        PREVIOUS_COLOR=COLOR_LIST.get(i - 1);      } else {        PREVIOUS_FRACTION=FRACTION_LIST.get(MAX_FRACTIONS - 1) + OFFSET;        PREVIOUS_COLOR=COLOR_LIST.get(MAX_FRACTIONS - 1);      }      if (PREVIOUS_FRACTION < 1) {        final java.awt.Color NEW_FRACTION_COLOR=getColorFromFraction(TMP_COLOR,PREVIOUS_COLOR,(int)((TMP_FRACTION - PREVIOUS_FRACTION) * 10000),(int)(TMP_FRACTION - 1.0f) * 10000);        FRACTION_COLORS.put(1.0f,NEW_FRACTION_COLOR);        FRACTION_COLORS.put(0.0f,NEW_FRACTION_COLOR);      }    } else {      FRACTION_COLORS.put(TMP_FRACTION,TMP_COLOR);    }  }  FRACTION_LIST.clear();  COLOR_LIST.clear();  return FRACTION_COLORS;}  }
class C{  @Override public final char readChar() throws IOException {  dis.readFully(work,0,2);  return (char)((work[1] & 0xff) << 8 | (work[0] & 0xff));}  }
class C{  private void rpVPlexJournalMigrations(boolean journalMigrationsExist,List<RPVPlexMigration> journalVpoolMigrations,Map<Volume,VirtualPool> singleMigrations,Set<URI> cgURIs,StringBuffer logMigrations,TaskList taskList,String taskId){  if (journalMigrationsExist) {    for (    URI cgURI : cgURIs) {      BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,cgURI);      List<Volume> journalVolumes=RPHelper.getCgVolumes(_dbClient,cg.getId(),Volume.PersonalityTypes.METADATA.name());      for (      Volume journalVolume : journalVolumes) {        RPVPlexMigration journalMigration=null;        for (        RPVPlexMigration migration : journalVpoolMigrations) {          if (journalVolume.getVirtualArray().equals(migration.getVarray()) && journalVolume.getVirtualPool().equals(migration.getMigrateFromVpool().getId())) {            boolean isSourceJournal=migration.getSubType().equals(Volume.PersonalityTypes.SOURCE) ? true : false;            String copyName=RPHelper.getCgCopyName(_dbClient,cg,migration.getVarray(),isSourceJournal);            if (journalVolume.getRpCopyName().equals(copyName)) {              journalMigration=migration;              break;            }          }        }        if (journalMigration != null) {          BlockServiceUtils.checkForPendingTasks(journalVolume.getTenant().getURI(),Arrays.asList(journalVolume),_dbClient);          Operation op=new Operation();          op.setResourceType(ResourceOperationTypeEnum.CHANGE_BLOCK_VOLUME_VPOOL);          op.setDescription("Change vpool operation - Migrate RP+VPLEX Journal");          op=_dbClient.createTaskOpStatus(Volume.class,journalVolume.getId(),taskId,op);          taskList.addTask(toTask(journalVolume,taskId,op));          VirtualPool migrateToVpool=journalMigration.getMigrateToVpool();          logMigrations.append(String.format("\tRP+VPLEX migrate JOURNAL [%s](%s) to vpool [%s](%s)\n",journalVolume.getLabel(),journalVolume.getId(),migrateToVpool.getLabel(),migrateToVpool.getId()));          singleMigrations.put(journalVolume,migrateToVpool);        } else {          _log.info(String.format("No migration info was found for Journal volume [%s](%s). Skipping...",journalVolume.getLabel(),journalVolume.getId()));        }      }    }  }}  }
class C{  public ZipLong(long value){  this.value=value;}  }
class C{  private static String floatToString(float f,boolean asAPI){  String valS=String.valueOf(f);  return valS.endsWith(".0") ? valS.substring(0,valS.length() - 2) : (valS + (asAPI ? "f" : ""));}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoomGroupEditForm roomGroupEditForm=(RoomGroupEditForm)form;  MessageResources rsc=getResources(request);  String doit=roomGroupEditForm.getDoit();  if (doit != null) {    if (doit.equals(rsc.getMessage("button.addNew"))) {      ActionMessages errors=new ActionMessages();      errors=roomGroupEditForm.validate(mapping,request);      if (errors.size() == 0) {        save(mapping,roomGroupEditForm,request,response);        return mapping.findForward("showRoomGroupList");      } else {        saveErrors(request,errors);      }    }    if (doit.equals(rsc.getMessage("button.returnToRoomGroupList"))) {      return mapping.findForward("showRoomGroupList");    }  }  LookupTables.setupDepartments(request,sessionContext,false);  TreeSet<Department> departments=Department.getUserDepartments(sessionContext.getUser());  if (departments.size() == 1) {    roomGroupEditForm.setDeptCode(departments.first().getDeptCode());  } else {    String deptCode=(String)sessionContext.getAttribute(SessionAttribute.DepartmentCodeRoom);    if (deptCode != null && !deptCode.isEmpty() && !deptCode.equals("All") && !deptCode.matches("Exam[0-9]*"))     roomGroupEditForm.setDeptCode(deptCode);  }  if (roomGroupEditForm.getDeptCode() == null || roomGroupEditForm.getDeptCode().isEmpty() || roomGroupEditForm.getDeptCode().matches("Exam[0-9]*") || !sessionContext.hasPermission(roomGroupEditForm.getDeptCode(),"Department",Right.DepartmentRoomGroupAdd)) {    sessionContext.checkPermission(Right.GlobalRoomGroupAdd);    roomGroupEditForm.setGlobal(true);  } else {    sessionContext.checkPermission(roomGroupEditForm.getDeptCode(),"Department",Right.DepartmentRoomGroupAdd);    roomGroupEditForm.setGlobal(false);  }  roomGroupEditForm.setSessionId(sessionContext.getUser().getCurrentAcademicSessionId());  return mapping.findForward("showAdd");}  }
class C{  @Override public void write(DataOutput out) throws IOException {  out.writeByte(type.val);  out.writeInt(nodeid);  if (type.equals(Type.Distance)) {    out.writeInt(distance);    return;  }  if (type.equals(Type.Complete)) {    out.writeInt(distance);  }  adjacenyList.write(out);}  }
class C{  private boolean ensureServiceChangedEnabled(){  final BluetoothGatt gatt=mBluetoothGatt;  if (gatt == null)   return false;  final BluetoothDevice device=gatt.getDevice();  if (device.getBondState() != BluetoothDevice.BOND_BONDED)   return false;  final BluetoothGattService gaService=gatt.getService(GENERIC_ATTRIBUTE_SERVICE);  if (gaService == null)   return false;  final BluetoothGattCharacteristic scCharacteristic=gaService.getCharacteristic(SERVICE_CHANGED_CHARACTERISTIC);  if (scCharacteristic == null)   return false;  return enableIndications(scCharacteristic);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public final T blockingGet(){  if (getCount() != 0) {    try {      await();    } catch (    InterruptedException ex) {      dispose();      throw ExceptionHelper.propagate(ex);    }  }  Throwable e=error;  if (e != null) {    ExceptionHelper.propagate(e);  }  return value;}  }
class C{  public SipUri parseSIPUrl(String url) throws ParseException {  try {    return new URLParser(url).sipURL(true);  } catch (  ClassCastException ex) {    throw new ParseException(url + " Not a SIP URL ",0);  }}  }
class C{  public int readTag() throws IOException {  if (isAtEnd()) {    lastTag=0;    return 0;  }  lastTag=readRawVarint32();  if (WireFormat.getTagFieldNumber(lastTag) == 0) {    throw InvalidProtocolBufferException.invalidTag();  }  return lastTag;}  }
class C{  public void dismiss(){  dismissInternal(false);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void testFileDirectory() throws Exception {  Properties properties=loadProperties("test-file-directory/test-subfolder");  assertEquals("@cargo.servlet.port@",properties.getProperty("cargo.servlet.port"));}  }
class C{  public long downMask(){  return downMask;}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,Object[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public void call(SlackMessage message){  if (message != null) {    this.send(message.prepare());  }}  }
class C{  public static double filter(double value,double lastvalue,double fail){  return (value == fail) ? lastvalue : value;}  }
class C{  public boolean isEmpty(){  throw new UnsupportedOperationException();}  }
class C{  public PdxInputStream(ByteBuffer bb){  super(bb);}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  @Deactivate protected void deactivate(ComponentContext ctx){}  }
class C{  public void pushPackets(@Nullable EntityPlayerMP player,Packet<?>... packets){  if (player == null) {    List<Packet<?>[]> queue=this.playerPacketMap.get(null);    if (queue == null) {      queue=new ArrayList<>();      this.playerPacketMap.put(null,queue);    }    queue.add(packets);  } else {    List<Packet<?>[]> queue=this.playerPacketMap.get(player.getUniqueID());    if (queue == null) {      queue=new ArrayList<>();      this.playerPacketMap.put(player.getUniqueID(),queue);    }    queue.add(packets);  }}  }
class C{  public boolean isSpring(){  return this.frequency > 0.0;}  }
class C{  private boolean hasTopLeft(SentencePair sentencePair,int ei,int fj){  int i_p, j_p;  int tgtLen=sentencePair.targetLength();  for (i_p=ei; i_p < tgtLen; ++i_p) {    if (!sentencePair.isTargetUnaligned(i_p))     break;  }  final int srcLen=sentencePair.sourceLength();  for (j_p=fj; j_p < srcLen; ++j_p) {    if (!sentencePair.isSourceUnaligned(j_p))     break;  }  if (i_p == tgtLen && j_p == srcLen)   return false;  int[] a_i_p=e2f(sentencePair,i_p);  int[] a_j_p=f2e(sentencePair,j_p);  if (min(a_j_p) < ei || min(a_i_p) < fj)   return false;  int max_j=Math.max(j_p,max(a_i_p));  int max_i=Math.max(i_p,max(a_j_p));  while (max_i >= i_p || max_j >= j_p) {    for (; j_p <= max_j; ++j_p) {      if (sentencePair.isSourceUnaligned(j_p))       continue;      a_j_p=f2e(sentencePair,j_p);      if (min(a_j_p) < ei)       return false;      max_i=Math.max(max_i,max(a_j_p));    }    for (; i_p <= max_i; ++i_p) {      if (sentencePair.isTargetUnaligned(i_p))       continue;      a_i_p=e2f(sentencePair,i_p);      if (min(a_i_p) < fj)       return false;      max_j=Math.max(max_j,max(a_i_p));    }  }  return true;}  }
class C{  public static File createFile(final String fullpath){  File file=new File(fullpath);  if (file.exists()) {    return file;  } else {    File parent=file.getParentFile();    if (!parent.exists()) {      parent.mkdirs();    }    String fileName=file.getName();    return new File(parent,fileName);  }}  }
class C{  private int bindValues(PersistenceStrategy stgy,Serializer serializer,List<PojoField> fields,Object obj,Object[] values,int offset){  if (PersistenceStrategy.PRIMITIVE == stgy) {    if (PropertyMappingHelper.getCassandraType(obj.getClass()) == null || obj.getClass().equals(ByteBuffer.class) || obj instanceof byte[]) {      throw new IllegalArgumentException("Couldn't deserialize instance of class '" + obj.getClass().getName() + "' using PRIMITIVE strategy. Please use BLOB strategy for this case.");    }    values[offset]=obj;    return ++offset;  }  if (PersistenceStrategy.BLOB == stgy) {    values[offset]=serializer.serialize(obj);    return ++offset;  }  if (fields == null || fields.isEmpty())   return offset;  for (  PojoField field : fields) {    Object val=field.getValueFromObject(obj,serializer);    if (val instanceof byte[])     val=ByteBuffer.wrap((byte[])val);    values[offset]=val;    offset++;  }  return offset;}  }
class C{  public void putAllWriteable(BeanMap map){  Iterator<String> readableKeys=map.readMethods.keySet().iterator();  while (readableKeys.hasNext()) {    String key=readableKeys.next();    if (getWriteMethod(key) != null) {      this.put(key,map.get(key));    }  }}  }
class C{  public static DateTime toDate(double d,TimeZone tz){  return DateCaster.toDateSimple(d,tz);}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  if (result == null) {    result=new AnimatablePointListValue(target);  }  return super.interpolate(result,to,interpolation,accumulation,multiplier);}  }
class C{  public TomcatEmbedded(ClassLoader classLoader) throws Exception {  this.classLoader=classLoader;  ClassLoader old=Thread.currentThread().getContextClassLoader();  try {    Thread.currentThread().setContextClassLoader(classLoader);    preloadEngine(classLoader);    preloadMemoryRealm(classLoader);    preloadEmbedded(classLoader);    preloadContext(classLoader);    preloadHost(classLoader);  }  finally {    Thread.currentThread().setContextClassLoader(old);  }}  }
class C{  private void close0(@Nullable Throwable err){  busyLock.writeLock().lock();  try {    if (stopping)     return;    stopping=true;  }  finally {    busyLock.writeLock().unlock();  }  if (err == null)   err=new IgniteCheckedException("Failed to perform request (connection was concurrently closed before response " + "is received).");  U.closeQuiet(out);  if (endpoint != null)   endpoint.close();  Iterator<HadoopIgfsFuture> it=reqMap.values().iterator();  while (it.hasNext()) {    HadoopIgfsFuture fut=it.next();    fut.onDone(err);    it.remove();  }  for (  HadoopIgfsIpcIoListener lsnr : lsnrs)   lsnr.onClose();}  }
class C{  public mxImage(String src,int width,int height){  this.src=src;  this.width=width;  this.height=height;}  }
class C{  private Configuration prepareJobForCancelling() throws Exception {  prepareFile("/testFile",1500);  executedTasks.set(0);  cancelledTasks.set(0);  failMapperId.set(0);  splitsCount.set(0);  Configuration cfg=new Configuration();  setupFileSystems(cfg);  Job job=Job.getInstance(cfg);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(IntWritable.class);  job.setMapperClass(CancellingTestMapper.class);  job.setNumReduceTasks(0);  job.setInputFormatClass(InFormat.class);  FileInputFormat.setInputPaths(job,new Path("igfs://:" + getTestGridName(0) + "@/"));  FileOutputFormat.setOutputPath(job,new Path("igfs://:" + getTestGridName(0) + "@/output/"));  job.setJarByClass(getClass());  return job.getConfiguration();}  }
class C{  protected void sequence_S_Species(ISerializationContext context,S_Species semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void afterDataFlush(PageServiceImpl tableService,int sequenceFlush){  super.afterDataFlush(tableService,sequenceFlush);  tableService.compareAndSetBlobPage(this,_stub);  ArrayList<TempBuffer> buffers=_buffers;  _buffers=null;  if (buffers != null) {    for (    TempBuffer buffer : buffers) {      buffer.free();    }  }}  }
class C{  @Override public void onCompletion(MediaPlayer mp){  mVideoPlayer.seekTo(0);}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  public List<IComment> appendGlobalComment(final String comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException, com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException {  try {    return m_node.getComments().appendGlobalCodeNodeComment(comment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }catch (  final CouldntLoadDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException(exception);  }}  }
class C{  public int trace(){  int result=0;  int max=mLength - 1;  for (int i=0; i < max; i++) {    for (int j=0; j < MAXLONG; j++) {      if ((mPol[i] & mBitmask[j]) != 0) {        result^=1;      }    }  }  int b=mBit;  for (int j=0; j < b; j++) {    if ((mPol[max] & mBitmask[j]) != 0) {      result^=1;    }  }  return result;}  }
class C{  protected void doWork(){  if (m_serverSocket != null) {    try {      m_serverSocket.close();    } catch (    Exception e) {    }  }  m_counter=0;  m_summary=new StringBuffer(m_model.toString()).append(" - ");  try {    m_serverSocket=new ServerSocket(m_model.getLdapPort());    log.log(Level.INFO,"Opened Port=" + m_model.getLdapPort());    while (!isInterrupted()) {      Socket socket=m_serverSocket.accept();      log.log(Level.FINE,"Connection on Port=" + m_model.getLdapPort());      LdapConnectionHandler handler=new LdapConnectionHandler(socket,m_model);      handler.start();      m_counter++;    }  } catch (  Exception e) {    log.log(Level.WARNING,"Port=" + m_model.getLdapPort(),e);    m_summary.append(e.toString());  }  m_summary.append("; ").append(m_model.getInfo());  int no=m_model.deleteLog();  m_summary.append("; Logs deleted=").append(no);  MLdapProcessorLog pLog=new MLdapProcessorLog(m_model,m_summary.toString());  pLog.setReference("#" + String.valueOf(p_runCount) + " - "+ TimeUtil.formatElapsed(new Timestamp(p_startWork)));  pLog.saveEx();}  }
class C{  static double[] loadExpIntA(){  return EXP_INT_A.clone();}  }
class C{  public IdentifiableElement createIdentifiableElement(){  IdentifiableElementImpl identifiableElement=new IdentifiableElementImpl();  return identifiableElement;}  }
class C{  public AList(){  items=new int[100];  size=0;}  }
class C{  public static boolean isPresent(){  return m_Present;}  }
class C{  public int lightenColor(int color,float factor){  float r=Color.red(color) * factor;  float g=Color.green(color) * factor;  float b=Color.blue(color) * factor;  int ir=Math.min(255,(int)r);  int ig=Math.min(255,(int)g);  int ib=Math.min(255,(int)b);  int ia=Color.alpha(color);  return (Color.argb(ia,ir,ig,ib));}  }
class C{  public GenericProxyFactory version(String version){  this.version=version;  return this;}  }
class C{  private boolean isCacheValid(){  long now=CurrentTime.currentTime();  if ((now - _lastTime < 100) && !CurrentTime.isTest())   return true;  long oldLastModified=_lastModified;  long oldLength=_length;  long newLastModified=getBacking().getLastModified();  long newLength=getBacking().length();  _lastTime=now;  if (newLastModified == oldLastModified && newLength == oldLength) {    _lastTime=now;    return true;  } else {    _changeSequence.incrementAndGet();    clearCache();    _depend=null;    _isSigned=null;    _zipEntryCache.clear();    _lastModified=newLastModified;    _length=newLength;    _lastTime=now;    return false;  }}  }
class C{  public XObject execute(XPathContext xctxt,boolean destructiveOK) throws javax.xml.transform.TransformerException {  XNodeSet xns=(XNodeSet)super.execute(xctxt,destructiveOK);  DTMManager dtmMgr=xctxt.getDTMManager();  int context=xctxt.getContextNode();  if (dtmMgr.getDTM(xns.getRoot()).getDocument() != dtmMgr.getDTM(context).getDocument()) {    Expression expr=(Expression)xns.getContainedIter();    xns=(XNodeSet)expr.asIterator(xctxt,context);  }  return xns;}  }
class C{  @TargetApi(21) public Bundler putSizeF(String key,SizeF value){  bundle.putSizeF(key,value);  return this;}  }
class C{  public Parenthesize(Object object){  clause=format("(%s)",object);}  }
class C{  private static long readDWord(final ClientReader inputStream,final long expectedValue) throws IOException {  final long value=readDWord(inputStream);  if (value != expectedValue) {    NaviLogger.severe("Error: Received value does not match expected value");  }  return value;}  }
class C{  @Override public void notify(TopologyInfo topologyInfo,Map stormConf,StormTopology stormTopology) throws IllegalAccessException {  LOG.info("Collecting metadata for a new storm topology: {}",topologyInfo.get_name());  try {    ArrayList<Referenceable> entities=new ArrayList<>();    Referenceable topologyReferenceable=createTopologyInstance(topologyInfo,stormConf);    List<Referenceable> dependentEntities=addTopologyDataSets(stormTopology,topologyReferenceable,topologyInfo.get_owner(),stormConf);    if (dependentEntities.size() > 0) {      entities.addAll(dependentEntities);    }    ArrayList<Referenceable> graphNodes=createTopologyGraph(stormTopology,stormTopology.get_spouts(),stormTopology.get_bolts());    topologyReferenceable.set("nodes",graphNodes);    entities.add(topologyReferenceable);    LOG.debug("notifying entities, size = {}",entities.size());    String user=getUser(topologyInfo.get_owner(),null);    notifyEntities(user,entities);  } catch (  Exception e) {    throw new RuntimeException("Atlas hook is unable to process the topology.",e);  }}  }
class C{  public boolean isTraceEnabled(){  return isLoggable(Log.VERBOSE);}  }
class C{  public void readData() throws IOException, FormatException {  readData(0,_rowCount);}  }
class C{  public TextParsingReader(Logger logger,InputStream input) throws IOException {  super(logger,input);}  }
class C{  @Override public void reset(){  foundServices.clear();  stop();}  }
class C{  public static void orthoNormalize(Vector3 v1,Vector3 v2){  v1.normalize();  v2.subtract(Vector3.projectAndCreate(v2,v1));  v2.normalize();}  }
class C{  @Override public String findToken(){  IRequestInfo iri=super.getCallbacks().getHelpers().analyzeRequest(getMessage());  List<IParameter> list=iri.getParameters();  for (  IParameter p : list) {    if (p.getName().equals(OAuth.ID)) {      return decode(p.getValue());    }    if (p.getName().equals(ID)) {      return decode(p.getValue());    }  }  return "Not Found!";}  }
class C{  public int[] generateRandomInts(int length,int cap){  int[] data=new int[length];  for (int i=0; i < length; i++) {    data[i]=random.nextInt(cap);  }  return data;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T registerJSONObject(final T key,final Object json){  try {    return (T)REGISTER_JSON_OBJECT.invoke(null,key,json);  } catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new AssertionError(e);  }}  }
class C{  public DERUTCTime(String time){  this.time=Strings.toByteArray(time);  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  public Builder serverId(int serverId){  this.innerServerId=serverId;  return this;}  }
class C{  protected final void addDefaultHttpMessageConverters(List<HttpMessageConverter<?>> converters){  converters.add(converter(new ByteBufferEncoder(),new ByteBufferDecoder()));  converters.add(converter(new StringEncoder(),new StringDecoder()));  converters.add(new ResourceHttpMessageConverter());  if (jaxb2Present) {    converters.add(converter(new Jaxb2Encoder(),new Jaxb2Decoder()));  }  if (jackson2Present) {    converters.add(converter(new JacksonJsonEncoder(),new JacksonJsonDecoder()));  }}  }
class C{  protected Entry<K,V> nextEntry(){  if (modCount != expectedModCount)   throw new ConcurrentModificationException();  if (nextKey == null && !hasNext())   throw new NoSuchElementException();  lastReturned=entry;  entry=entry.next;  currentKey=nextKey;  nextKey=null;  return lastReturned;}  }
class C{  @ObjectiveCName("isNotificationsEnabledWithPeer:") public boolean isNotificationsEnabled(Peer peer){  return modules.getSettingsModule().isNotificationsEnabled(peer);}  }
class C{  public long readLELong() throws IOException {  long byte1=in.read();  long byte2=in.read();  long byte3=in.read();  long byte4=in.read();  long byte5=in.read();  long byte6=in.read();  long byte7=in.read();  long byte8=in.read();  if (byte8 == -1) {    throw new EOFException();  }  return (byte8 << 56) + (byte7 << 48) + (byte6 << 40)+ (byte5 << 32)+ (byte4 << 24)+ (byte3 << 16)+ (byte2 << 8)+ byte1;}  }
class C{  @Override protected void loadPlugins(){  pickingPlugin=new PickingGraphMousePlugin<V,E>();  animatedPickingPlugin=new AnimatedPickingGraphMousePlugin<V,E>();  translatingPlugin=new TranslatingGraphMousePlugin(InputEvent.BUTTON1_MASK);  scalingPlugin=new ScalingGraphMousePlugin(new CrossoverScalingControl(),0,in,out);  rotatingPlugin=new RotatingGraphMousePlugin();  shearingPlugin=new ShearingGraphMousePlugin();  editingPlugin=new EditingGraphMousePlugin<V,E>(vertexFactory,edgeFactory);  labelEditingPlugin=new LabelEditingGraphMousePlugin<V,E>();  annotatingPlugin=new AnnotatingGraphMousePlugin<V,E>(rc);  popupEditingPlugin=new EditingPopupGraphMousePlugin<V,E>(vertexFactory,edgeFactory);  add(scalingPlugin);  setMode(Mode.EDITING);}  }
class C{  public void windowClosing(WindowEvent e){  setSelected(false);}  }
class C{  public McRaptorStateBag createStateBag(){  if (request.maxFare >= 0) {    if (network.fareCalculator == null)     throw new IllegalArgumentException("Fares requested in ProfileRequest but no fare data loaded");    return new McRaptorStateBag(null);  } else {    return new McRaptorStateBag(null);  }}  }
class C{  public void endMethod(){  if ((access & Opcodes.ACC_ABSTRACT) == 0) {    mv.visitMaxs(0,0);  }  mv.visitEnd();}  }
class C{  private synchronized void loadNodejsInstalls(){  if (nodeJSInstalls != null)   return;  Trace.trace(Trace.EXTENSION_POINT,"->- Loading .nodeJSInstalls extension point ->-");  IExtensionRegistry registry=Platform.getExtensionRegistry();  IConfigurationElement[] cf=registry.getConfigurationElementsFor(TypeScriptCorePlugin.PLUGIN_ID,EXTENSION_NODEJS_INSTALLS);  List<IEmbeddedNodejs> list=new ArrayList<IEmbeddedNodejs>(cf.length);  addNodejsInstalls(cf,list);  addRegistryListenerIfNeeded();  nodeJSInstalls=list;  Trace.trace(Trace.EXTENSION_POINT,"-<- Done loading .nodeJSInstalls extension point -<-");}  }
class C{  private void beforeValue() throws JSONException {  if (stack.isEmpty()) {    return;  }  Scope context=peek();  if (context == Scope.EMPTY_ARRAY) {    replaceTop(Scope.NONEMPTY_ARRAY);    newline();  } else   if (context == Scope.NONEMPTY_ARRAY) {    out.append(',');    newline();  } else   if (context == Scope.DANGLING_KEY) {    out.append(indent == null ? ":" : ": ");    replaceTop(Scope.NONEMPTY_OBJECT);  } else   if (context != Scope.NULL) {    throw new JSONException("Nesting problem");  }}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  Camera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public void clearData(){  db.clearData();}  }
class C{  public BloomFilter(byte[] data,int entries,double error) throws RuntimeException {  if (entries < 1 || ((1.0 <= error) || (error <= errorPrecision))) {    throw new RuntimeException("Invalid params for bloom filter");  }  this.entries=entries;  this.error=error;  bpe=-(Math.log(error) / denom);  bits=(int)((double)entries * bpe);  bytes=(bits / 8) + (bits % 8 != 0 ? 1 : 0);  if (data != null) {    if (bytes != data.length) {      throw new RuntimeException(String.format("Expected %d bytes, got %d",bytes,data.length));    }    bf=data;  } else {    bf=new byte[bytes];    ;  }  hashes=(int)Math.ceil(0.693147180559945 * bpe);}  }
class C{  public IntRange(int from,int to){  this.inclusive=null;  if (from > to) {    this.from=to;    this.to=from;    this.reverse=true;  } else {    this.from=from;    this.to=to;    this.reverse=false;  }  checkSize();}  }
class C{  private void onCardClick(View view){  MemoryCard card1=(MemoryCard)view.getTag();  if (mVisibleCard1 != null && mVisibleCard2 != null) {    hideCard(mVisibleCard1);    hideCard(mVisibleCard2);    mVisibleCard2.setOnClickListener(this);    mVisibleCard1.setOnClickListener(this);    mVisibleCard1=view;    mVisibleCard2=null;    mVisibleCard1.setOnClickListener(null);    showCard(mVisibleCard1);  } else   if (mVisibleCard1 != null && mVisibleCard2 == null) {    MemoryCard card2=(MemoryCard)mVisibleCard1.getTag();    if (card1.mCardImageId == card2.mCardImageId) {      mVisibleCard2=view;      mVisibleCard2.setOnClickListener(null);      mVisibleCard1.setOnClickListener(null);      showCard(view);      if (mVisibleCard1.findViewById(R.id.card_cover).getVisibility() != View.GONE) {        mVisibleCard1.findViewById(R.id.card_cover).setBackgroundColor(Color.GREEN);        mVisibleCard2.findViewById(R.id.card_cover).setBackgroundColor(Color.GREEN);        mVisibleCard1.findViewById(R.id.card_cover).clearAnimation();        mVisibleCard2.findViewById(R.id.card_cover).clearAnimation();        mVisibleCard1.findViewById(R.id.card_cover).setVisibility(View.VISIBLE);        mVisibleCard2.findViewById(R.id.card_cover).setVisibility(View.VISIBLE);        mAnimationCardCover.setAnimationListener(this);        mHiddenCard1=mVisibleCard1;        mHiddenCard2=mVisibleCard2;        mVisibleCard1.findViewById(R.id.card_cover).startAnimation(mAnimationCardCover);        mVisibleCard2.findViewById(R.id.card_cover).startAnimation(mAnimationCardCover);        mVisibleCard2=null;        mVisibleCard1=null;        mCurrentCorrectMoves++;        increaseScoreMatch();        checkNextLevel();      }    } else {      mSoundPool.play(mSoundMatchWrong,1,1,0,0,1.0f);      mWrongAnswers++;      mVisibleCard2=view;      mVisibleCard2.setOnClickListener(null);      showCard(mVisibleCard2);      mVisibleCard1.findViewById(R.id.card_cover).setBackgroundColor(Color.RED);      mVisibleCard2.findViewById(R.id.card_cover).setBackgroundColor(Color.RED);      mVisibleCard1.findViewById(R.id.card_cover).clearAnimation();      mVisibleCard2.findViewById(R.id.card_cover).clearAnimation();      mVisibleCard1.findViewById(R.id.card_cover).setVisibility(View.VISIBLE);      mVisibleCard2.findViewById(R.id.card_cover).setVisibility(View.VISIBLE);      mAnimationCardCover.setAnimationListener(null);      mVisibleCard1.findViewById(R.id.card_cover).startAnimation(mAnimationCardCover);      mVisibleCard2.findViewById(R.id.card_cover).startAnimation(mAnimationCardCover);    }  } else {    mVisibleCard1=view;    mVisibleCard1.setOnClickListener(null);    showCard(mVisibleCard1);  }}  }
class C{  public STRtree(){  this(DEFAULT_NODE_CAPACITY);}  }
class C{  protected DoubleFactory2D(){}  }
class C{  public UUID(long mostSigBits,long leastSigBits){  this.mostSigBits=mostSigBits;  this.leastSigBits=leastSigBits;  init();}  }
class C{  @Override public void flush(){  target.flush();}  }
class C{  public Node removeLast(){  Node node=header.getPreviousNode();  lastByte-=node.ba.last();  return removeNode(node);}  }
class C{  private static void processAnnotationsInClass(boolean key,Class<?> cls,TypeDescriptor type,@Nullable ClassProperty parent){  if (U.isJdk(cls) || isGeometryClass(cls)) {    if (parent == null && !key && isSqlType(cls)) {      String idxName=_VAL + "_idx";      type.addIndex(idxName,isGeometryClass(cls) ? GEO_SPATIAL : SORTED);      type.addFieldToIndex(idxName,_VAL,0,false);    }    return;  }  if (parent != null && parent.knowsClass(cls))   throw new CacheException("Recursive reference found in type: " + cls.getName());  if (parent == null) {    QueryTextField txtAnnCls=cls.getAnnotation(QueryTextField.class);    if (txtAnnCls != null)     type.valueTextIndex(true);    QueryGroupIndex grpIdx=cls.getAnnotation(QueryGroupIndex.class);    if (grpIdx != null)     type.addIndex(grpIdx.name(),SORTED);    QueryGroupIndex.List grpIdxList=cls.getAnnotation(QueryGroupIndex.List.class);    if (grpIdxList != null && !F.isEmpty(grpIdxList.value())) {      for (      QueryGroupIndex idx : grpIdxList.value())       type.addIndex(idx.name(),SORTED);    }  }  for (Class<?> c=cls; c != null && !c.equals(Object.class); c=c.getSuperclass()) {    for (    Field field : c.getDeclaredFields()) {      QuerySqlField sqlAnn=field.getAnnotation(QuerySqlField.class);      QueryTextField txtAnn=field.getAnnotation(QueryTextField.class);      if (sqlAnn != null || txtAnn != null) {        ClassProperty prop=new ClassProperty(field);        prop.parent(parent);        processAnnotation(key,sqlAnn,txtAnn,field.getType(),prop,type);        type.addProperty(prop,true);      }    }    for (    Method mtd : c.getDeclaredMethods()) {      if (mtd.isBridge())       continue;      QuerySqlField sqlAnn=mtd.getAnnotation(QuerySqlField.class);      QueryTextField txtAnn=mtd.getAnnotation(QueryTextField.class);      if (sqlAnn != null || txtAnn != null) {        if (mtd.getParameterTypes().length != 0)         throw new CacheException("Getter with QuerySqlField " + "annotation cannot have parameters: " + mtd);        ClassProperty prop=new ClassProperty(mtd);        prop.parent(parent);        processAnnotation(key,sqlAnn,txtAnn,mtd.getReturnType(),prop,type);        type.addProperty(prop,true);      }    }  }}  }
class C{  @Override public void decl(char[] buff,int offset,int length) throws SAXException {  String s=new String(buff,offset,length);  String name=null;  String systemid=null;  String publicid=null;  String[] v=split(s);  if (v.length > 0 && "DOCTYPE".equalsIgnoreCase(v[0])) {    if (theDoctypeIsPresent)     return;    theDoctypeIsPresent=true;    if (v.length > 1) {      name=v[1];      if (v.length > 3 && "SYSTEM".equals(v[2])) {        systemid=v[3];      } else       if (v.length > 3 && "PUBLIC".equals(v[2])) {        publicid=v[3];        if (v.length > 4) {          systemid=v[4];        } else {          systemid="";        }      }    }  }  publicid=trimquotes(publicid);  systemid=trimquotes(systemid);  if (name != null) {    publicid=cleanPublicid(publicid);    theLexicalHandler.startDTD(name,publicid,systemid);    theLexicalHandler.endDTD();    theDoctypeName=name;    theDoctypePublicId=publicid;    if (theScanner instanceof Locator) {      theDoctypeSystemId=((Locator)theScanner).getSystemId();      try {        theDoctypeSystemId=new URL(new URL(theDoctypeSystemId),systemid).toString();      } catch (      Exception ignore) {      }    }  }}  }
class C{  private void assertCacheSize(){  IgniteCache<Integer,String> cache=grid(0).cache(null);  assertEquals(KEYS_CNT,cache.size(CachePeekMode.PRIMARY));  int total=0;  for (int i=0; i < GRIDS_CNT; i++)   total+=grid(i).cache(null).localSize(CachePeekMode.PRIMARY);  assertEquals(KEYS_CNT,total);}  }
class C{  public void line(String srcName,Paint color,String legend){  line(srcName,color,legend,1F,false);}  }
class C{  public int readInt() throws IOException {  int v=dataInput.readInt();  offset+=4;  available-=4;  return v;}  }
class C{  public void removeNode(int n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  this.removeElement(n);}  }
class C{  public static void main(String[] args){  runJavadoc(new OptionHandlerJavadoc(),args);}  }
class C{  public static void main(String[] args){  com.bbn.openmap.util.ArgParser ap=new com.bbn.openmap.util.ArgParser("WholeWorldTileHandler");  ap.add(SOURCE,"Path to the tile root directory.",1);  ap.add(TARGET,"Path to the tile root directory for the jarred tile files.",1);  ap.add(SUB_JAR_ZOOM,"Zoom level tiles that subjar boundaries are based on (3 is default).",1);  ap.add(MAX_ZOOM_IN_SUBJARS,"Maximum tile zoom level added to sub jars (20 is default).",1);  ap.add(WORLD_WIDE_ZOOM_LEVEL,"Maximum tile zoom level to add to world wide jar (10 is default).",1);  ap.add(TILE_EXT,"Tile extension (.png is default).",1);  ap.add(MINX,"Subjar x minimum to create",1);  ap.add(MINY,"Subjar y minimum to create",1);  ap.add(MAXX,"Subjar x maximum to create",1);  ap.add(MAXY,"Subjar y maximum to create",1);  ap.add(NO_WORLD_JAR,"Don't create world level jar file");  ap.add(VERBOSE,"Comment on what's going on");  ap.add(FILL,"Just create jars that don't exist.");  if (!ap.parse(args)) {    ap.printUsage();    System.exit(0);  }  String[] arg=ap.getArgValues(SOURCE);  if (arg != null) {    try {      Builder wwthBuilder=new Builder(new File(arg[0]));      arg=ap.getArgValues(TARGET);      if (arg != null) {        wwthBuilder.targetFile(new File(arg[0]));      }      arg=ap.getArgValues(SUB_JAR_ZOOM);      if (arg != null) {        wwthBuilder.subJarZoomDef(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues(MAX_ZOOM_IN_SUBJARS);      if (arg != null) {        wwthBuilder.maxZoomLevelInSubJars(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues(WORLD_WIDE_ZOOM_LEVEL);      if (arg != null) {        wwthBuilder.worldWideZoomLevel(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues(TILE_EXT);      if (arg != null) {        wwthBuilder.tileExt(arg[0]);      }      arg=ap.getArgValues(MINX);      if (arg != null) {        wwthBuilder.minx(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues(MINY);      if (arg != null) {        wwthBuilder.miny(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues(MAXX);      if (arg != null) {        wwthBuilder.maxx(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues(MAXY);      if (arg != null) {        wwthBuilder.maxy(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues(VERBOSE);      if (arg != null) {        wwthBuilder.logLevel=Level.INFO;      }      arg=ap.getArgValues(FILL);      if (arg != null) {        wwthBuilder.setFill(true);      }      arg=ap.getArgValues(NO_WORLD_JAR);      if (arg != null) {        logger.log(wwthBuilder.logLevel,"setting build world file to false");        wwthBuilder.setDoWorldJar(false);      }      System.out.println(wwthBuilder.toString());      wwthBuilder.go();    } catch (    NumberFormatException nfe) {      nfe.printStackTrace();      logger.warning(nfe.getMessage());    }catch (    FileNotFoundException fnfe) {      fnfe.printStackTrace();      logger.warning(fnfe.getMessage());    }catch (    IOException ioe) {      ioe.printStackTrace();      logger.warning(ioe.getMessage());    }  } else {    ap.bail("Need a source directory.",true);  }  System.exit(0);}  }
class C{  private void addParserNoticeHighlights(ParseResult res){  if (DEBUG_PARSING) {    System.out.println("[DEBUG]: Adding parser notices from " + res.getParser());  }  if (noticesToHighlights == null) {    noticesToHighlights=new HashMap();  }  removeParserNotices(res);  List notices=res.getNotices();  if (notices.size() > 0) {    RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();    for (Iterator i=notices.iterator(); i.hasNext(); ) {      ParserNotice notice=(ParserNotice)i.next();      if (DEBUG_PARSING) {        System.out.println("[DEBUG]: ... adding: " + res);      }      try {        Object highlight=null;        if (notice.getShowInEditor()) {          highlight=h.addParserHighlight(notice,parserErrorHighlightPainter);        }        noticesToHighlights.put(notice,highlight);      } catch (      BadLocationException ble) {        ble.printStackTrace();      }    }  }  if (DEBUG_PARSING) {    System.out.println("[DEBUG]: Done adding parser notices from " + res.getParser());  }}  }
class C{  public DateMidnight withCenturyOfEra(int centuryOfEra){  return withMillis(getChronology().centuryOfEra().set(getMillis(),centuryOfEra));}  }
class C{  private void srcFromToken(SLStatementNode node,Token token){  node.setSourceSection(source.createSection(token.charPos,token.val.length()));}  }
class C{  public int headerTag(){  return this.header().tag();}  }
class C{  protected void writeAttribute(String nsAlias,String name,String value) throws IOException {  writer.write(" ");  writeQualifiedName(nsAlias,name);  writer.write('=');  writer.write('\'');  if (value != null) {    writer.write(StringUtil.xmlEscape(value));  }  writer.write('\'');}  }
class C{  private Object writeReplace(){  return new UnmodifiableList<E>(list);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrreplacedataoffsetgreater.class,args);}  }
class C{  @Override protected void installApplicationListeners(Application app){  super.installApplicationListeners(app);  if (applicationListener == null) {    applicationListener=createApplicationListener();  }  app.addPropertyChangeListener(applicationListener);}  }
class C{  @Override public void updateScreen(){  proxyBox.updateCursorCounter();}  }
class C{  private static void reply_Login2_Client(body body,MobileSessionCtx wsc,String formName,String fieldValue,String locationValue){  log.info("Location-Client: " + locationValue);  String form=null;  form=locationValue + MobileEnv.TARGET_WINDOW + ".document."+ formName+ ".";  StringBuffer script=new StringBuffer();  script.append("var B=").append(form).append(WLogin.P_ORG).append(".options; ");  script.append("B.length=0; ");  KeyNamePair client=new KeyNamePair(Integer.parseInt(fieldValue),fieldValue);  Login login=new Login(wsc.ctx);  KeyNamePair[] orgs=login.getOrgs(client);  for (int i=0; i < orgs.length; i++) {    KeyNamePair p=orgs[i];    script.append("B[").append(i).append("]=new Option('");    script.append(p.getName());    script.append("','");    script.append(p.getKey());    script.append("'); ");  }  script.append("\n");  script.append("var C=").append(form).append(WLogin.P_WAREHOUSE).append(".options; ");  script.append("C.length=0; ");  KeyNamePair[] whs=login.getWarehouses(orgs[0]);  if (whs != null) {    for (int i=0; i < whs.length; i++) {      KeyNamePair p=whs[i];      script.append("C[").append(i).append("]=new Option('");      script.append(p.getName());      script.append("','");      script.append(p.getKey());      script.append("'); ");    }  }  body.addElement(new p().addElement(WLogin.P_WAREHOUSE + "="));  body.addElement(new script(script.toString()));}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction action=new RPAction();  action.put("type","group_message");  action.put("text",remainder);  ClientSingletonRepository.getClientFramework().send(action);  return true;}  }
class C{  @Override public String toString(){  return actionId + "[" + keyStrokeToText(keyStroke)+ "]"+ type+ delay+ custom;}  }
class C{  public void parse(final String osmFilename){  parse(osmFilename,null);}  }
class C{  public static double celsiusToFahrenheit(double celsius){  return ((celsius * (9d / 5d)) + 32d);}  }
class C{  private static synchronized int allocateObjectId(){  return nextObjectId++;}  }
class C{  public S1Interval expanded(double radius){  if (isEmpty()) {    return this;  }  if (getLength() + 2 * radius >= 2 * S2.M_PI - 1e-15) {    return full();  }  double lo=Math.IEEEremainder(lo() - radius,2 * S2.M_PI);  double hi=Math.IEEEremainder(hi() + radius,2 * S2.M_PI);  if (lo == -S2.M_PI) {    lo=S2.M_PI;  }  return new S1Interval(lo,hi);}  }
class C{  public int exit_code(){  return Integer.parseInt(fields[51]);}  }
class C{  public void readOSM(File file){  if (file.exists()) {    streetLayer.openOSM(file);  } else {    LOG.info("osm.mapdb doesn't exist in graph folder. This means that street names won't be shown");  }}  }
class C{  public boolean hasMatridIds(Context context){  Boolean localUpdateOnly=(null != mMXIDsByElement);  if (null == mMXIDsByElement) {    mMXIDsByElement=new HashMap<String,MXID>();  }  if (couldContainMatridIds()) {    PIDsRetriever.getIntance().retrieveMatrixIds(context,this,localUpdateOnly);  }  return (mMXIDsByElement.size() != 0);}  }
class C{  public boolean isDebugEnabled(){  return isDebug;}  }
class C{  public StandardizedSemIm(SemIm im,Initialization initialization){  this.semPm=new SemPm(im.getSemPm());  this.semGraph=new SemGraph(semPm.getGraph());  semGraph.setShowErrorTerms(true);  if (semGraph.existsDirectedCycle()) {    throw new IllegalArgumentException("The cyclic case is not handled.");  }  if (initialization == Initialization.CALCULATE_FROM_SEM) {    edgeParameters=new HashMap<>();    List<Node> nodes=im.getVariableNodes();    TetradMatrix impliedCovar=im.getImplCovar(true);    for (    Parameter parameter : im.getSemPm().getParameters()) {      if (parameter.getType() == ParamType.COEF) {        Node a=parameter.getNodeA();        Node b=parameter.getNodeB();        int aindex=nodes.indexOf(a);        int bindex=nodes.indexOf(b);        double vara=impliedCovar.get(aindex,aindex);        double stda=Math.sqrt(vara);        double varb=impliedCovar.get(bindex,bindex);        double stdb=Math.sqrt(varb);        double oldCoef=im.getEdgeCoef(a,b);        double newCoef=(stda / stdb) * oldCoef;        edgeParameters.put(Edges.directedEdge(a,b),newCoef);      } else       if (parameter.getType() == ParamType.COVAR) {        Node a=parameter.getNodeA();        Node b=parameter.getNodeB();        Node exoa=semGraph.getExogenous(a);        Node exob=semGraph.getExogenous(b);        double covar=im.getErrCovar(a,b) / Math.sqrt(im.getErrVar(a) * im.getErrVar(b));        edgeParameters.put(Edges.bidirectedEdge(exoa,exob),covar);      }    }  } else {    DataSet dataSet=im.simulateData(1000,false);    TetradMatrix _dataSet=dataSet.getDoubleData();    _dataSet=DataUtils.standardizeData(_dataSet);    DataSet dataSetStandardized=ColtDataSet.makeData(dataSet.getVariables(),_dataSet);    SemEstimator estimator=new SemEstimator(dataSetStandardized,im.getSemPm());    SemIm imStandardized=estimator.estimate();    edgeParameters=new HashMap<>();    for (    Parameter parameter : imStandardized.getSemPm().getParameters()) {      if (parameter.getType() == ParamType.COEF) {        Node a=parameter.getNodeA();        Node b=parameter.getNodeB();        double coef=imStandardized.getEdgeCoef(a,b);        edgeParameters.put(Edges.directedEdge(a,b),coef);      } else       if (parameter.getType() == ParamType.COVAR) {        Node a=parameter.getNodeA();        Node b=parameter.getNodeB();        Node exoa=semGraph.getExogenous(a);        Node exob=semGraph.getExogenous(b);        double covar=-im.getErrCovar(a,b) / Math.sqrt(im.getErrVar(a) * im.getErrVar(b));        edgeParameters.put(Edges.bidirectedEdge(exoa,exob),covar);      }    }  }}  }
class C{  public void pauseWork(){  mExitTasksEarly=false;  setPause(true);  if (DEBUG) {    Log.d(Log_TAG,String.format("work_status: pauseWork %s",this));  }}  }
class C{  static private String quotedOrHyphen(String value){  if (value == null) {    return "-";  } else {    return "\"" + StringEscapeUtils.escapeJava(value) + "\"";  }}  }
class C{  public ProtocolHandshakeResponse(String sourceId,long lastEpochNumber,long lastSeqno,int heartbeatMillis){  super(null);  this.sourceId=sourceId;  this.lastEpochNumber=lastEpochNumber;  this.lastSeqno=lastSeqno;  this.heartbeatMillis=heartbeatMillis;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if (!remainder.isEmpty()) {    RPAction answer=new RPAction();    answer.put("type","answer");    answer.put("text",remainder);    ClientSingletonRepository.getClientFramework().send(answer);    return true;  }  return false;}  }
class C{  public static ValueExp value(Number val){  return new NumericValueExp(val);}  }
class C{  public static String[] signatureParameterTypes(String sig){  int pos1=sig.indexOf("(");  int pos2=sig.indexOf(",",pos1 + 1);  int pos3=sig.lastIndexOf(")");  String paramType;  List<String> paramTypes=new ArrayList<String>();  while (pos2 > 0) {    paramType=sig.substring(pos1 + 1,pos2);    paramTypes.add(paramType);    pos1=pos2;    pos2=sig.indexOf(",",pos1 + 1);  }  paramType=sig.substring(pos1 + 1,pos3);  if (!paramType.isEmpty())   paramTypes.add(paramType);  return paramTypes.toArray(new String[0]);}  }
class C{  public static List<IResource> collectIncremental(IResourceDelta delta){  List<IResource> result=new ArrayList<IResource>();  List<IResourceDelta> foldersDelta=new ArrayList<IResourceDelta>();  for (  IResourceDelta childDelta : delta.getAffectedChildren()) {    IResource child=childDelta.getResource();    if (child.isDerived()) {      continue;    }    int childType=child.getType();    int deltaKind=childDelta.getKind();    if (childType == FILE) {      if ((deltaKind == IResourceDelta.ADDED || deltaKind == IResourceDelta.CHANGED) && Util.isJavaArtifact(child)) {        result.add(child);      }    } else     if (childType == FOLDER) {      if (deltaKind == IResourceDelta.ADDED) {        result.add(child);      } else       if (deltaKind == IResourceDelta.REMOVED) {        IContainer parent=child.getParent();        if (parent instanceof IProject) {          result.clear();          result.add(parent);          return result;        }        result.add(parent);      } else {        foldersDelta.add(childDelta);      }    }  }  for (  IResourceDelta childDelta : foldersDelta) {    result.addAll(collectIncremental(childDelta));  }  return result;}  }
class C{  public int columns(){  return columns;}  }
class C{  public List<Movie> findClassics(List<Movie> movies){  return movies.stream().parallel().filter(null).collect(toList());}  }
class C{  public Object nextObject(Random rnd,Class cls,boolean allowNull){  if (cls == null) {    return nextObject(rnd,allowNull);  } else {    return nextObject(rnd,getType(cls),allowNull);  }}  }
class C{  protected void substituteFontUsed(final String substituteFontFile) throws PdfFontException {  InputStream from=null;  try {    from=loader.getResourceAsStream("org/jpedal/res/fonts/" + substituteFontFile);    if (from == null) {      from=new FileInputStream(substituteFontFile);    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " reading "+ substituteFontFile+ " Check cid  jar installed");  }  if (from == null) {    throw new PdfFontException("Unable to load font " + substituteFontFile);  }  try {    final FastByteArrayOutputStream to=new FastByteArrayOutputStream();    final byte[] buffer=new byte[65535];    int bytes_read;    while ((bytes_read=from.read(buffer)) != -1) {      to.write(buffer,0,bytes_read);    }    from.close();    final FontData fontData=null;    readFontData(to.toByteArray(),fontData);    glyphs.setEncodingToUse(hasEncoding,this.getFontEncoding(false),isCIDFont);    isFontEmbedded=true;  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " reading "+ substituteFontFile+ " Check cid  jar installed");    if (ExternalHandlers.throwMissingCIDError && e.getMessage() != null && e.getMessage().contains("kochi")) {      throw new Error(e);    }  }}  }
class C{  public void removeCovering(MapTile me){  covering.remove(me);  calculatePosition();}  }
class C{  public void showAMap(int MCSiteIndex){  VM.sysWriteln("show the map for MCSite index= ",MCSiteIndex);  VM.sysWrite("machine code offset = ",MCSites[MCSiteIndex]);  VM.sysWrite("   reference Map  =  ");  for (int i=0; i < bytesPerMap(); i++) {    VM.sysWrite(referenceMaps[(MCSiteIndex * bytesPerMap()) + i]);  }  VM.sysWriteln();}  }
class C{  @Override public int numElements() throws Exception {  if (m_Classifier instanceof PartitionGenerator) {    int size=0;    for (int i=0; i < m_Classifiers.length; i++) {      size+=((PartitionGenerator)m_Classifiers[i]).numElements();    }    return size;  } else   throw new Exception("Classifier: " + getClassifierSpec() + " cannot generate a partition");}  }
class C{  protected CacheConfiguration cacheConfiguration() throws Exception {  CacheConfiguration cfg=defaultCacheConfiguration();  cfg.setCacheMode(PARTITIONED);  cfg.setStartSize(700000);  cfg.setWriteSynchronizationMode(FULL_ASYNC);  cfg.setEvictionPolicy(null);  cfg.setBackups(1);  cfg.setNearConfiguration(null);  cfg.setStatisticsEnabled(true);  return cfg;}  }
class C{  public void copyChars(CharSequence text){  copyChars(text,0,text.length());}  }
class C{  private String orderDiscount(MOrder order){  String DISCOUNT="Discount";  int C_Tax_ID=0;  BigDecimal totalLines=Env.ZERO;  MOrderLine discountLine=null;  MOrderLine[] lines=order.getLines();  for (int i=0; i < lines.length; i++) {    MOrderLine oLine=lines[i];    String description=oLine.getDescription();    if (description != null && description.equals(DISCOUNT))     discountLine=oLine; else {      totalLines=totalLines.add(oLine.getLineNetAmt());      if (C_Tax_ID == 0)       C_Tax_ID=oLine.getC_Tax_ID(); else       if (C_Tax_ID != oLine.getC_Tax_ID())       return "Order has more then one Tax, cannot add discount";    }  }  if (discountLine == null) {    discountLine=new MOrderLine(order);    discountLine.setDescription(DISCOUNT);    discountLine.setQty(Env.ONE);    discountLine.setC_Tax_ID(C_Tax_ID);    discountLine.setLine(9999);  }  BigDecimal discountPercent=new BigDecimal(3);  BigDecimal discountAmt=totalLines.multiply(discountPercent);  discountAmt=discountAmt.divide(Env.ONEHUNDRED,order.getPrecision(),BigDecimal.ROUND_HALF_UP);  discountLine.setPrice(discountAmt.negate());  if (!discountLine.save())   return "Could not save discount line";  log.info(discountLine.toString());  order.getLines(true,null);  return null;}  }
class C{  public FloatMatrix put(FloatMatrix indices,float v){  return put(indices.findIndices(),v);}  }
class C{  private static CimListener createListener(){  CimListenerInfo listenerInfo=new CimListenerInfo();  listenerInfo.setHostIP(LISTENER_IP);  listenerInfo.setPort(LISTENER_PORT);  listenerInfo.setProtocol(LISTENER_PROTOCOL);  listenerInfo.setQueueSize(LISTENER_QUEUE_SIZE);  ArrayList<CimIndicationConsumer> consumers=new ArrayList<CimIndicationConsumer>();  CimListener listener=new CimListener(listenerInfo,new CimIndicationConsumerList(consumers));  return listener;}  }
class C{  public Chunk(int position,T[] lines){  this.position=position;  this.lines=Arrays.asList(lines);}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  @Deprecated public ClassificationEvoOptimization(ExampleSet exampleSet,Kernel kernel,double c,int initType,int maxIterations,int generationsWithoutImprovement,int popSize,int selectionType,double tournamentFraction,boolean keepBest,int mutationType,double crossoverProb,boolean showConvergencePlot,boolean showPopulationPlot,ExampleSet holdOutSet,RandomGenerator random,LoggingHandler logging){  this(exampleSet,kernel,c,initType,maxIterations,generationsWithoutImprovement,popSize,selectionType,tournamentFraction,keepBest,mutationType,crossoverProb,showConvergencePlot,showPopulationPlot,holdOutSet,random,logging,null);}  }
class C{  public void connect() throws SmsException, IOException {  transport_.connect();}  }
class C{  public void shutdown(){  GridClientUtils.shutdownNow(GridClientTopology.class,exec,log);}  }
class C{  public void animateCapture(){  Bitmap bitmap=null;  animateCapture(bitmap);}  }
class C{  public QuadBuilder addVertex(Vec3d pos){  this.vertices.add(new Vertex(pos,0.0F,0.0F,this.sprite,this.switchUV,this.transformation,this.color,this.normal));  return this;}  }
class C{  public ModdedZipArchiveOutputStream(File file) throws IOException {  OutputStream o=null;  RandomAccessFile _raf=null;  try {    _raf=new RandomAccessFile(file,"rw");    _raf.setLength(0);  } catch (  IOException e) {    if (_raf != null) {      try {        _raf.close();      } catch (      IOException inner) {      }      _raf=null;    }    o=new FileOutputStream(file);  }  out=o;  raf=_raf;}  }
class C{  @Override public void force(){  assertNotDisposed();  if (isDirty()) {    myPool.flushPages(this);    myIsDirty=false;  }}  }
class C{  public static int uninstallSilent(Context context,String packageName){  return uninstallSilent(context,packageName,true);}  }
class C{  public Object invoke(Method method,Object target,ExtensionContext extensionContext,ExtensionRegistry extensionRegistry){  @SuppressWarnings("unchecked") Optional<Object> optionalTarget=(target instanceof Optional ? (Optional<Object>)target : Optional.ofNullable(target));  return ReflectionUtils.invokeMethod(method,target,resolveParameters(method,optionalTarget,extensionContext,extensionRegistry));}  }
class C{  protected void sceneGraphCreated(){}  }
class C{  private void addAttributeExchangeToAuthRequest(HttpServletRequest httpReq,AuthRequest authReq) throws MessageException {  String[] aliases=httpReq.getParameterValues("alias");  String[] typeUris=httpReq.getParameterValues("typeUri");  String[] counts=httpReq.getParameterValues("count");  FetchRequest fetch=FetchRequest.createFetchRequest();  for (int i=0, l=typeUris == null ? 0 : typeUris.length; i < l; i++) {    String typeUri=typeUris[i];    if (StringUtils.isNotBlank(typeUri)) {      String alias=aliases[i];      boolean required=httpReq.getParameter("required" + i) != null;      int count=NumberUtils.toInt(counts[i],1);      fetch.addAttribute(alias,typeUri,required,count);    }  }  authReq.addExtension(fetch);}  }
class C{  public static void convert2BindInfos(Context ctx,List<PropertyElement> propEles,Array<DataBindParser.PropertyBindInfo> infos){  if (propEles.size() == 0) {    return;  }  DataBindParser.PropertyBindInfo info;  DataBindParser.ImagePropertyBindInfo ipb;  PropertyElement pe;  ImagePropertyElement ipe;  CornersElement ce;  String expre;  for (int i=0, size=propEles.size(); i < size; i++) {    pe=propEles.get(i);    if (pe instanceof ImagePropertyElement) {      ipe=(ImagePropertyElement)pe;      ipb=new DataBindParser.ImagePropertyBindInfo();      try {        ipb.referVariables=DataBindUtil.convertRefer(ipe.getReferVariable());        ipb.type=ipe.getType().hashCode();        expre=ipe.getUrlText();        if (expre != null) {          ipb.url=ExpressionParser.parse(expre);        }        expre=ipe.getDefaultText();        if (expre != null) {          ipb.defaultExpre=ExpressionParser.parse(expre);        }        expre=ipe.getErrorResIdText();        if (expre != null) {          ipb.errorExpre=ExpressionParser.parse(expre);        }        expre=ipe.getRoundSizeText();        if (expre != null) {          ipb.roundSizeExpre=ExpressionParser.parse(expre);        }        expre=ipe.getBorderColorText();        if (expre != null) {          ipb.borderColorExpre=ExpressionParser.parse(expre);        }        expre=ipe.getBorderWidthText();        if (expre != null) {          ipb.borderWidthExpre=ExpressionParser.parse(expre);        }        ce=ipe.getCornersElement();        if (ce != null) {          ipb.cornerInfo=new DataBindParser.CornerInfo();          expre=ce.getTopLeftText();          if (!TextUtils.isEmpty(expre)) {            ipb.cornerInfo.topLeftExpre=ExpressionParser.parse(expre);          }          expre=ce.getTopRightText();          if (!TextUtils.isEmpty(expre)) {            ipb.cornerInfo.topRightExpre=ExpressionParser.parse(expre);          }          expre=ce.getBottomLeftText();          if (!TextUtils.isEmpty(expre)) {            ipb.cornerInfo.bottomLeftExpre=ExpressionParser.parse(expre);          }          expre=ce.getBottomRightText();          if (!TextUtils.isEmpty(expre)) {            ipb.cornerInfo.bottomRightExpre=ExpressionParser.parse(expre);          }        }        info=ipb;      } catch (      ExpressionParseException e) {        throw new DataBindException("while parse the <imageProperty> , the view id = " + ResourceUtil.getResId(ctx,ipe.getId(),ResourceUtil.ResourceType.Id),e);      }    } else {      info=new DataBindParser.PropertyBindInfo();      convert(info,pe);    }    if (pe.getId() != null) {      info.viewId=ResourceUtil.getResId(ctx,pe.getId(),ResourceUtil.ResourceType.Id);    }    infos.add(info);  }}  }
class C{  public void commitChanges(){  currentEffectorPanel.commitChanges();}  }
class C{  public ColorList sortByDistance(DistanceProxy proxy,boolean isReversed){  if (colors.size() == 0) {    return this;  }  TColor root=getDarkest();  ArrayList<TColor> stack=new ArrayList<TColor>(colors);  stack.remove(root);  ArrayList<TColor> sorted=new ArrayList<TColor>(colors.size());  sorted.add(root);  int sortedCount=0;  while (stack.size() > 1) {    TColor closest=stack.get(0);    TColor lastSorted=sorted.get(sortedCount);    float distance=proxy.distanceBetween(closest,lastSorted);    for (int i=stack.size() - 1; i >= 0; i--) {      TColor c=stack.get(i);      float d=proxy.distanceBetween(c,lastSorted);      if (d < distance) {        closest=c;        distance=d;      }    }    stack.remove(closest);    sorted.add(closest);    sortedCount++;  }  sorted.add(stack.get(0));  if (isReversed) {    Collections.reverse(sorted);  }  colors=sorted;  return this;}  }
class C{  public void revertRow(int row){  newFields.remove(row);  deletedFields.remove(row);  fireTableRowsUpdated(row,row);}  }
class C{  public void registerText(Label label) throws Exception {  if (text != null) {    throw new TextException("Duplicate text annotation on %s",label);  }  text=label;}  }
class C{  public static String sqrt(String[] params) throws FBSQLParseException {  if (params.length != 1)   throw new FBSQLParseException("Incorrect number of " + "parameters of function sqrt : " + params.length);  return "sqrt(" + params[0] + ")";}  }
class C{  public int dataCount(){  return tagData.size();}  }
class C{  private void processField(Object instance,Field field) throws MojoExecutionException {  try {    log.debug("Processing field \"" + field.getName() + "\".");    if (!Modifier.isStatic(field.getModifiers())) {      Class<?> fieldClass=field.getType();      if (Collection.class.isAssignableFrom(fieldClass)) {        Class<?> actualTypeClass=FieldUtils.getCollectionType(field);        if (List.class.isAssignableFrom(fieldClass)) {          List<Object> list=new ArrayList<>();          field.set(instance,list);          list.add(processClass(actualTypeClass));        } else         if (Set.class.isAssignableFrom(fieldClass)) {          Set<Object> set=new HashSet<>();          field.set(instance,set);          set.add(processClass(actualTypeClass));        }      } else {        field.set(instance,processClass(field.getType()));      }    }  } catch (  IllegalAccessException e) {    throw new MojoExecutionException("Unable to process field \"" + field.getName() + "\". Reason: "+ e.getMessage(),e);  }}  }
class C{  public void testDoCheckWithDetectionResultOverridenByConstructorAndNoMessageThrown(){  LOGGER.debug("doCheckWithDetectionResultOverridenByConstructorAndNoMessageThrown");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.PASSED);  expectLastCall().once();  AttributePresenceChecker instance=new AttributePresenceChecker(AttributeStore.ALT_ATTR,TestSolution.PASSED,TestSolution.FAILED,null,ATTR_ABSENT_MSG);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  private boolean equal(File[] array1,File[] array2){  if (array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    boolean found=false;    for (int j=0; j < array2.length; j++) {      if (equal(array1[i].getAbsoluteFile(),array2[j].getAbsoluteFile())) {        found=true;        break;      }    }    if (!found) {      StringBuffer sb=new StringBuffer();      sb.append("Didn't find ");      sb.append(array1[i]);      sb.append(" in ");      for (int k=0; k < array2.length; k++) {        sb.append(array2[k]);        sb.append(" ");      }      System.out.println(sb);      return false;    }  }  return true;}  }
class C{  public DeltaTetradTest(ICovarianceMatrix cov){  if (cov == null) {    throw new NullPointerException();  }  this.cov=cov;  this.N=cov.getSampleSize();  this.variables=cov.getVariables();  this.variablesHash=new HashMap<>();  for (int i=0; i < variables.size(); i++) {    variablesHash.put(variables.get(i),i);  }}  }
class C{  public boolean isComputerNode(File dir){  return false;}  }
class C{  public static @Nullable Drawable cloneDrawable(Drawable drawable){  if (drawable instanceof CloneableDrawable) {    return ((CloneableDrawable)drawable).cloneDrawable();  }  Drawable.ConstantState constantState=drawable.getConstantState();  return constantState != null ? constantState.newDrawable() : null;}  }
class C{  @Override protected void finalize() throws Throwable {  super.finalize();  nullPassword();}  }
class C{  public ComparatorCreatorBasic(String[] sHeaders,Datas[] aDatas,int[] iAvailableIndexes){  m_sHeaders=sHeaders;  m_aDatas=aDatas;  m_iAvailableIndexes=iAvailableIndexes;}  }
class C{  public final void testAddConstraint(){  Constraint<CharSequence> constraint=Constraints.containsNumber();  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addConstraint(constraint);  passwordEditText.addConstraint(constraint);  assertEquals(1,passwordEditText.getConstraints().size());  assertEquals(constraint,passwordEditText.getConstraints().iterator().next());}  }
class C{  public FilterSelectSpinnerAdapter(Context context){  super(context,layoutID);  this.selectValuesList=new ArrayList<>();  this.layoutInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);}  }
class C{  public OptionsSpiderPanel(){  super();  initialize();}  }
class C{  public static float min(float... numbers){  if (numbers.length < 1) {    throw new IllegalArgumentException();  }  float min=numbers[0];  for (int i=1; i < numbers.length; i++) {    if (numbers[i] < min) {      min=numbers[i];    }  }  return min;}  }
class C{  @Override public void processInstruction(ExecutionContext ec) throws DMLRuntimeException {  Statistics.incrementNoOfExecutedGPUInst();  MatrixObject mat=ec.getMatrixInputForGPUInstruction(_input.getName());  boolean isLeftTransposed=(_type == MMTSJType.LEFT);  int rlen=(int)(isLeftTransposed ? mat.getNumColumns() : mat.getNumRows());  int clen=rlen;  ec.setMetaData(_output.getName(),rlen,clen);  MatrixObject out=ec.getDenseMatrixOutputForGPUInstruction(_output.getName());  LibMatrixCUDA.matmultTSMM(mat,out,isLeftTransposed);  ec.releaseMatrixInputForGPUInstruction(_input.getName());  ec.releaseMatrixOutputForGPUInstruction(_output.getName());}  }
class C{  public void copy(){  if (getClientProperty("JPasswordField.cutCopyAllowed") != Boolean.TRUE) {    UIManager.getLookAndFeel().provideErrorFeedback(this);  } else {    super.copy();  }}  }
class C{  @Override public void selectionChanged(IWorkbenchPart part,ISelection input){  if (serverIsRunning) {    setEnabled(checkRights());    if (input instanceof IStructuredSelection) {      IStructuredSelection selection=(IStructuredSelection)input;      for (Iterator servers=selection.iterator(); servers.hasNext(); ) {        Object serverelement=servers.next();        if (!(serverelement instanceof Server)) {          setEnabled(false);          return;        }      }      if (checkRights()) {        setEnabled(true);      }      return;    }    setEnabled(false);  }}  }
class C{  public LogicAsserter stream(Stream stream){  this.stream=stream;  return this;}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  ConstPool constPool=getConstPool();  int pos=currentPos;  int index=iterator.u16bitAt(pos + 1);  Javac jc=new Javac(thisClass);  CodeAttribute ca=iterator.get();  try {    CtClass[] params;    CtClass retType;    CtClass fieldType=Descriptor.toCtClass(constPool.getFieldrefType(index),thisClass.getClassPool());    boolean read=isReader();    if (read) {      params=new CtClass[0];      retType=fieldType;    } else {      params=new CtClass[1];      params[0]=fieldType;      retType=CtClass.voidType;    }    int paramVar=ca.getMaxLocals();    jc.recordParams(constPool.getFieldrefClassName(index),params,true,paramVar,withinStatic());    boolean included=checkResultValue(retType,statement);    if (read)     included=true;    int retVar=jc.recordReturnType(retType,included);    if (read)     jc.recordProceed(new ProceedForRead(retType,opcode,index,paramVar)); else {      jc.recordType(fieldType);      jc.recordProceed(new ProceedForWrite(params[0],opcode,index,paramVar));    }    Bytecode bytecode=jc.getBytecode();    storeStack(params,isStatic(),paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    if (included)     if (retType == CtClass.voidType) {      bytecode.addOpcode(ACONST_NULL);      bytecode.addAstore(retVar);    } else {      bytecode.addConstZero(retType);      bytecode.addStore(retVar,retType);    }    jc.compileStmnt(statement);    if (read)     bytecode.addLoad(retVar,retType);    replace0(pos,bytecode,3);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.SCRIPT_IM__SYMBOL_TABLE:    setSymbolTable((SymbolTable)null);  return;}super.eUnset(featureID);}  }
class C{  public T caseEntry(Entry object){  return null;}  }
class C{  public static void spooky4(final long[] triple,final long seed,final long[] tuple){  long h0, h1, h2, h3;  h0=seed;  h1=ARBITRARY_BITS + triple[0];  h2=ARBITRARY_BITS + triple[1];  h3=ARBITRARY_BITS + triple[2];  h2=Long.rotateLeft(h2,50);  h2+=h3;  h0^=h2;  h3=Long.rotateLeft(h3,52);  h3+=h0;  h1^=h3;  h0=Long.rotateLeft(h0,30);  h0+=h1;  h2^=h0;  h1=Long.rotateLeft(h1,41);  h1+=h2;  h3^=h1;  h2=Long.rotateLeft(h2,54);  h2+=h3;  h0^=h2;  h3=Long.rotateLeft(h3,48);  h3+=h0;  h1^=h3;  h0=Long.rotateLeft(h0,38);  h0+=h1;  h2^=h0;  h1=Long.rotateLeft(h1,37);  h1+=h2;  h3^=h1;  h2=Long.rotateLeft(h2,62);  h2+=h3;  h0^=h2;  h3=Long.rotateLeft(h3,34);  h3+=h0;  h1^=h3;  h0=Long.rotateLeft(h0,5);  h0+=h1;  h2^=h0;  h1=Long.rotateLeft(h1,36);  h1+=h2;  h3^=h1;switch (tuple.length) {case 4:    tuple[3]=h3;case 3:  tuple[2]=h2;case 2:tuple[1]=h1;case 1:tuple[0]=h0;}}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static _ExtensionTypeEnum fromString(final String value) throws SOAPSerializationException {  return (_ExtensionTypeEnum)Enumeration.fromString(value,_ExtensionTypeEnum.VALUES_TO_INSTANCES);}  }
class C{  public static void clearCondition(String condition){  BValue cond;synchronized (conditions) {    cond=(BValue)conditions.get(condition);    if (cond == null) {      return;    }synchronized (cond) {      if (cond.v) {        conditions.remove(condition);      }    }  }}  }
class C{  private synchronized boolean isSelectedTrackRecording(){  return trackDataHub != null && trackDataHub.isSelectedTrackRecording();}  }
class C{  private byte[] sizeKey(){  return subspace.pack(Tuple2.from(SIZE_KEY));}  }
class C{  public <U extends T>OngoingMatchingC1<T,U,U> when(MatchesAny<U> o){  List<Matcher<Object>> matchers=Lists.of(ArgumentMatchers.any());  return new OngoingMatchingC1<>(this,new DecomposableMatchBuilder1<U,U>(matchers,0,new IdentityFieldExtractor<>()).build());}  }
class C{  public void addProgressListener(ProgressListener list){  progressSupport.add(list);}  }
class C{  public void load(){  madvise();  int ps=unsafe.pageSize();  int count=pageCount(ps,capacityBytes_);  long a=nativeRawStartAddress_;  for (int i=0; i < count; i++) {    unsafe.getByte(a);    a+=ps;  }}  }
class C{  public static Map<String,Entity> entityMapFromSchema(Schema schema){  final Map<String,Entity> entityMap=new HashMap<>((int)(schema.getEntities().size() * 1.33F));  for (  Entity entity : schema.getEntities()) {    entityMap.put(entity.getClassName(),entity);  }  return entityMap;}  }
class C{  private void checkUsingAdaptation(){  if (tsUseAdaptation.isSelected()) {    tfAdaptationTime.setEnabled(true);    tfAdaptationParam.setEnabled(true);  } else {    tfAdaptationTime.setEnabled(false);    tfAdaptationParam.setEnabled(false);  }}  }
class C{  public ContentValues(ContentValues from){  mValues=new HashMap<String,Object>(from.mValues);}  }
class C{  public int size(){  return size;}  }
class C{  static public void assertNotSame(String message,Object expected,Object actual){  if (expected == actual)   failSame(message);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.579 -0500",hash_original_method="23B47A857E4542DE9F8AF3FFA1A4FD79",hash_generated_method="80C28A92B5530B0A051DCE6A3362D766") public static boolean isEmergencyNumber(String number,String defaultCountryIso){  return isEmergencyNumberInternal(number,defaultCountryIso,true);}  }
class C{  public VRDirectionalLightShadowRenderer(AssetManager assetManager,int shadowMapSize,int nbSplits){  super(assetManager,shadowMapSize,nbSplits);}  }
class C{  public boolean isAudio(){  return is(AUDIO);}  }
class C{  @Override public void processFrame(final Frame frame,final boolean detectShots){  updateMovingAveragePeriod();  brightPixels.clear();  final Mat frameHSV=new Mat();  Imgproc.cvtColor(frame.getOriginalMat(),frameHSV,Imgproc.COLOR_BGR2HSV);  final Set<Pixel> thresholdPixels=findThresholdPixelsAndUpdateFilter(frameHSV,(detectShots && filtersInitialized));  final int thresholdPixelsSize=thresholdPixels.size();  if (logger.isTraceEnabled() && checkIfInitialized()) {    if (thresholdPixelsSize >= 1)     logger.trace("thresholdPixels {} getMinimumShotDimension {}",thresholdPixelsSize,getMinimumShotDimension());    for (    final Pixel pixel : thresholdPixels) {      logger.trace("thresholdPixel {} {} - from array {} from pixel cur {} avg {}",pixel.x,pixel.y,lumsMovingAverage[pixel.x][pixel.y],pixel.getCurrentLum(),pixel.getLumAverage());    }  }  if (!filtersInitialized)   filtersInitialized=checkIfInitialized();  if (detectShots && filtersInitialized) {    updateAvgThresholdPixels(thresholdPixelsSize);    updateAvgBrightPixels(brightPixels.size());    if (shouldShowBrightnessWarning()) {      cameraManager.showBrightnessWarning();    }    if (thresholdPixelsSize >= getMinimumShotDimension() && !isExcessiveMotion(thresholdPixelsSize)) {      final Set<PixelCluster> clusters=pixelClusterManager.clusterPixels(thresholdPixels,getMinimumShotDimension());      if (logger.isTraceEnabled()) {        logger.trace("thresholdPixels {}",thresholdPixelsSize);        logger.trace("clusters {}",clusters.size());      }      detectShots(new Frame(frameHSV,frame.getTimestamp()),clusters);    } else     if (isExcessiveMotion(thresholdPixelsSize)) {      if (shouldShowMotionWarning(thresholdPixelsSize))       cameraManager.showMotionWarning();      for (      final Pixel pixel : thresholdPixels) {        frame.getOriginalMat().put(pixel.y,pixel.x,BLUE_MAT_PIXEL);      }    }    if (shouldShowBrightnessWarningBool && !brightPixels.isEmpty()) {synchronized (brightPixels) {        for (        final Pixel pixel : brightPixels) {          frame.getOriginalMat().put(pixel.y,pixel.x,RED_MAT_PIXEL);        }      }    }  }}  }
class C{  @Override public void beginWindow(long windowId){}  }
class C{  public void clear(){  modCount++;  Entry[] tab=table;  for (int i=0; i < tab.length; i++)   tab[i]=null;  size=0;}  }
class C{  long highMask(){  return _highMask;}  }
class C{  public void addProcedure(Procedure procedure){  if (procedures == null) {    procedures=database.newStringMap();  }  procedures.put(procedure.getName(),procedure);}  }
class C{  @SuppressWarnings("try") public static void emitFrontEnd(Providers providers,TargetProvider target,StructuredGraph graph,PhaseSuite<HighTierContext> graphBuilderSuite,OptimisticOptimizations optimisticOpts,ProfilingInfo profilingInfo,Suites suites){  try (Scope s=Debug.scope("FrontEnd");DebugCloseable a=FrontEnd.start()){    HighTierContext highTierContext=new HighTierContext(providers,graphBuilderSuite,optimisticOpts);    if (graph.start().next() == null) {      graphBuilderSuite.apply(graph,highTierContext);      new DeadCodeEliminationPhase(Optional).apply(graph);    } else {      Debug.dump(Debug.INFO_LOG_LEVEL,graph,"initial state");    }    if (UseGraalInstrumentation.getValue()) {      new ExtractInstrumentationPhase().apply(graph,highTierContext);    }    suites.getHighTier().apply(graph,highTierContext);    graph.maybeCompress();    MidTierContext midTierContext=new MidTierContext(providers,target,optimisticOpts,profilingInfo);    suites.getMidTier().apply(graph,midTierContext);    graph.maybeCompress();    LowTierContext lowTierContext=new LowTierContext(providers,target);    suites.getLowTier().apply(graph,lowTierContext);    Debug.dump(Debug.BASIC_LOG_LEVEL,graph.getLastSchedule(),"Final HIR schedule");  } catch (  Throwable e) {    throw Debug.handle(e);  }}  }
class C{  public static URI scrubURI(URI uri){  String scheme=uri.getScheme();  String path=uri.getSchemeSpecificPart();  if (StringUtils.isEmpty(scheme)) {    if (path.startsWith("/")) {      return new File(path).toURI();    } else {      return new File(RelativeContentFactory.getWorkingDirectory(),path).toURI();    }  } else   if (scheme.equals("rel")) {    return RelativeContentFactory.toFile(uri).toURI();  } else {    return uri;  }}  }
class C{  public void addRestartListener(RestartListener listener){  listeners.addListener(listener);}  }
class C{  private void writeFlowModToSwitch(IOFSwitch sw,OFFlowMod flowMod){  sw.write(flowMod);}  }
class C{  public static Timestamp adjustTimestamp(Timestamp stamp,int adjType,int adjQuantity,TimeZone timeZone,Locale locale){  Calendar tempCal=toCalendar(stamp,timeZone,locale);  tempCal.add(adjType,adjQuantity);  return new Timestamp(tempCal.getTimeInMillis());}  }
class C{  void createMap(Thread t,T firstValue){  t.inheritableThreadLocals=new ThreadLocalMap(this,firstValue);}  }
class C{  public static boolean parseScalarOrElement(PsiBuilder b,int l){  PsiBuilder.Marker m=b.mark();  if (PerlParserImpl.scalar_primitive(b,l)) {    assert b instanceof PerlBuilder;    b.getTokenType();    IElementType lastRawTokenType=b.rawLookup(-1);    if (!((PerlBuilder)b).isInterpolated() || lastRawTokenType != TokenType.WHITE_SPACE) {      if (PerlParserImpl.array_index(b,l)) {        m.done(SCALAR_ARRAY_ELEMENT);      } else       if (PerlParserImpl.hash_index(b,l)) {        m.done(SCALAR_HASH_ELEMENT);      } else {        m.drop();      }    } else {      m.drop();    }    return true;  }  m.drop();  return false;}  }
class C{  boolean isDelimiter(int c){  if (c == ',' || c == -1 || c == '\n') {    putback(c);    return true;  } else {    return false;  }}  }
class C{  public int length(){  return mLength;}  }
class C{  public byte[] wrap(byte[] in,int inOff,int inLen){  if (!forWrapping) {    throw new IllegalStateException("Not initialized for wrapping");  }  byte keyToBeWrapped[]=new byte[inLen];  System.arraycopy(in,inOff,keyToBeWrapped,0,inLen);  byte[] CKS=calculateCMSKeyChecksum(keyToBeWrapped);  byte[] WKCKS=new byte[keyToBeWrapped.length + CKS.length];  System.arraycopy(keyToBeWrapped,0,WKCKS,0,keyToBeWrapped.length);  System.arraycopy(CKS,0,WKCKS,keyToBeWrapped.length,CKS.length);  int blockSize=engine.getBlockSize();  if (WKCKS.length % blockSize != 0) {    throw new IllegalStateException("Not multiple of block length");  }  engine.init(true,paramPlusIV);  byte TEMP1[]=new byte[WKCKS.length];  for (int currentBytePos=0; currentBytePos != WKCKS.length; currentBytePos+=blockSize) {    engine.processBlock(WKCKS,currentBytePos,TEMP1,currentBytePos);  }  byte[] TEMP2=new byte[this.iv.length + TEMP1.length];  System.arraycopy(this.iv,0,TEMP2,0,this.iv.length);  System.arraycopy(TEMP1,0,TEMP2,this.iv.length,TEMP1.length);  byte[] TEMP3=reverse(TEMP2);  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(true,param2);  for (int currentBytePos=0; currentBytePos != TEMP3.length; currentBytePos+=blockSize) {    engine.processBlock(TEMP3,currentBytePos,TEMP3,currentBytePos);  }  return TEMP3;}  }
class C{  public void testGetPropertyNames(){  UnboundArbitraryBean instance=new UnboundBeanImpl();  Set<String> expResult=new HashSet<>(6);  expResult.add(CLASS);  expResult.add(PROPERTY_NAMES);  expResult.add(STRING_PROPERTY);  expResult.add(INDEXED_PROPERTY);  expResult.add(MAPPED_STRING);  expResult.add(MAPPED_INDEXED);  Set<String> result=instance.getPropertyNames();  assertEquals(expResult,result);}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < length()) {    this.myArrayList.set(index,value);  } else {    while (index != length()) {      put(null);    }    put(value);  }  return this;}  }
class C{  public void persist(SequenceLoadListener sequenceLoadListener,Map<String,SignatureLibraryRelease> analysisJobMap){  persistBatch();  Collection<String> nonUniqueIdentifiers=nucleotideSequenceXrefDAO.getNonUniqueXrefs();  if (nonUniqueIdentifiers != null && nonUniqueIdentifiers.size() > 0) {    System.out.println("Found " + nonUniqueIdentifiers.size() + " non unique identifier(s). These identifiers do have different sequences, within the FASTA nucleotide sequence input file.");    System.out.println("Please find below a list of detected identifiers:");    for (    String nonUniqueIdentifier : nonUniqueIdentifiers) {      System.out.println(nonUniqueIdentifier);    }    System.out.println("InterProScan will shutdown, because there is no way to map nucleic sequences and predicted proteins.");    System.exit(0);  }}  }
class C{  protected void expandPanel(StateChangeReason reason){  animatePanelToState(PanelState.EXPANDED,reason);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MGoalRestriction[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  protected void findYourself(FeatureClassInfo fci){  if (aft != null) {    fci.findYourself(aft);  } else   if (tft != null) {    fci.findYourself(tft);  } else   if (edg != null) {    fci.findYourself(edg);  } else   if (ent != null) {    fci.findYourself(ent);  }}  }
class C{  public static boolean arrayequals(byte[] a,byte[] b,int count){  for (int i=0; i < count; i++) {    if (a[i] != b[i]) {      return false;    }  }  return true;}  }
class C{  public void actionUpload() throws PageException {  FormItem item=getFormItem(pageContext,filefield);  Struct cffile=_actionUpload(pageContext,securityManager,item,strDestination,nameconflict,accept,strict,mode,attributes,acl,serverPassword);  if (StringUtil.isEmpty(result)) {    pageContext.undefinedScope().set(KeyConstants._file,cffile);    pageContext.undefinedScope().set("cffile",cffile);  } else {    pageContext.setVariable(result,cffile);  }}  }
class C{  public WriteLockedOffHeapClockCacheFactory(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,EvictionListener<K,V> evictionListener,int tableSize){  this.storageEngineFactory=storageEngineFactory;  this.tableSource=tableSource;  this.tableSize=tableSize;  this.evictionListener=evictionListener;}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  final AbstractLeafEntry that=(AbstractLeafEntry)o;  return id == that.id;}  }
class C{  public void add(double value,double weigth){  values.add(value);  weights.add(weigth);}  }
class C{  protected Date compute(String dateString){  if (dateString == null) {    return null;  }  Date date;  try {    date=((DateFormat)DateFormat.getDateInstance(DateFormat.SHORT).clone()).parse(dateString);    Calendar cal=Calendar.getInstance();    cal.setTime(date);    return date;  } catch (  ParseException e) {    throw new FunctionInputException("expression_parser.invalid_argument.date",getFunctionName(),dateString);  }}  }
class C{  public static RequestBuilder post(String url){  return new RequestBuilder(HTTPMethod.POST,url);}  }
class C{  public WrappedIntArray(final int[] left,final int[] right){  assert left.length == right.length;  final int size=left.length + right.length;  mArray=new int[size];  for (int i=0; i < left.length; i++) {    final int j=i << 1;    mArray[j]=left[i];    mArray[j + 1]=right[i];  }}  }
class C{  public void insertComment(String value) throws HeaderCardException {  insertCommentStyle(COMMENT.key(),value);}  }
class C{  public static void main(String[] args){  runDataGenerator(new RDG1(),args);}  }
class C{  @Override public void paintControl(final PaintEvent e){  final GC gc=e.gc;  final Rectangle r=getClientArea();  gc.setBackground(getParent().getBackground());  gc.fillRectangle(r);  gc.setBackground(color);  r.y=(int)((double)parent.getSize().y / 2 - 2d);  r.height=3;  gc.fillRoundRectangle(r.x,r.y,r.width,r.height,3,3);}  }
class C{  public void parseFile() throws Exception {  while (read() != null) {  }}  }
class C{  public static float intersectRayTriangle(Vector3fc origin,Vector3fc dir,Vector3fc v0,Vector3fc v1,Vector3fc v2,float epsilon){  return intersectRayTriangle(origin.x(),origin.y(),origin.z(),dir.x(),dir.y(),dir.z(),v0.x(),v0.y(),v0.z(),v1.x(),v1.y(),v1.z(),v2.x(),v2.y(),v2.z(),epsilon);}  }
class C{  public void after(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){}  }
class C{  private void writeElements(OutputNode node,Object source,Section section) throws Exception {  for (  String name : section) {    Section child=section.getSection(name);    if (child != null) {      OutputNode next=node.getChild(name);      writeSection(next,source,child);    } else {      String path=section.getPath(name);      Label label=section.getElement(path);      Class expect=context.getType(type,source);      Object value=criteria.get(label);      if (value == null) {        if (label == null) {          throw new ElementException("Element '%s' not defined in %s",name,expect);        }        writeUnion(node,source,section,label);      }    }  }}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case R.id.toggle_number_display:    numbered=!numbered;  mDemoSlider.presentation(numbered ? SliderLayout.PresentationConfig.Numbers : SliderLayout.PresentationConfig.Dots);break;case R.id.indicator_default:mDemoSlider.setCustomIndicator((PagerIndicator)findViewById(R.id.custom_indicator2));break;case R.id.action_custom_indicator:mDemoSlider.setCustomIndicator((PagerIndicator)findViewById(R.id.custom_indicator));break;case R.id.action_restore_default:mDemoSlider.setPresetIndicator(SliderLayout.PresetIndicators.Center_Bottom);mDemoSlider.setCustomAnimation(new DescriptionAnimation());break;case R.id.custom_slider_layout:newcustomSliderView();break;case R.id.default_slider_layout:newloaddefaultCompleteSlider();break;}return super.onOptionsItemSelected(item);}  }
class C{  public void tagProtect(byte[] password) throws IOException {  if (tags != null) {    tags.tagProtect(password);  }}  }
class C{  public static boolean createFolder(@SuppressWarnings("UnusedParameters") Context mContext,String path,String folderName){  File SDCardRoot=new File(path,folderName);  if (!SDCardRoot.exists()) {    return SDCardRoot.mkdir();  }  return false;}  }
class C{  public RSAPublicKeySpec(BigInteger modulus,BigInteger publicExponent){  this.modulus=modulus;  this.publicExponent=publicExponent;}  }
class C{  public static Map updateOrderItemShipGroupAssoc(DispatchContext dctx,Map context) throws GeneralException {  Map<String,Object> result=ServiceUtil.returnSuccess();  String message=null;  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderId=(String)context.get("orderId");  String orderItemSeqId=(String)context.get("orderItemSeqId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  BigDecimal quantity=(BigDecimal)context.get("quantity");  if (UtilValidate.isEmpty(quantity)) {    quantity=BigDecimal.ZERO;  }  BigDecimal totalQuantity=(BigDecimal)context.get("totalQuantity");  if (UtilValidate.isEmpty(totalQuantity)) {    totalQuantity=BigDecimal.ZERO;  }  String mainErrorMessage=UtilProperties.getMessage(resource_error,"OrderUnableToUpdateOrderItemFromOISG",locale);  Integer rowCount=(Integer)context.get("rowCount");  Integer rowNumber=(Integer)context.get("rowNumber");  if (rowNumber == null) {    Long count=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where("orderId",orderId,"orderItemSeqId",orderItemSeqId).queryCount();    if (count != null) {      rowNumber=new Integer(count.intValue());      result.put("rowNumber",rowNumber);    }  }  GenericValue oisga=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where("orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId).queryOne();  if (UtilValidate.isEmpty(oisga)) {    String errMsg=mainErrorMessage + " : Order Item Ship Group Assoc Does Not Exist";    Debug.logError(errMsg,module);    return ServiceUtil.returnError(errMsg);  }  GenericValue oisg=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId,"shipGroupSeqId",shipGroupSeqId).queryOne();  GenericValue orderItem=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId,"orderItemSeqId",orderItemSeqId).queryOne();  if (UtilValidate.isEmpty(orderItem)) {    String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderErrorOrderItemNotFound",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId),locale);    return ServiceUtil.returnError(errMsg);  }  if (oisg != null) {    if (ZERO.compareTo(quantity) == 0) {      if (rowNumber.intValue() == 1) {        String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedCannotBeNullOrNegative",locale);        Debug.logError(errMsg,module);        return ServiceUtil.returnError(errMsg);      }      try {        Map<String,Object> cancelOrderInventoryReservationMap=dctx.makeValidContext("cancelOrderInventoryReservation","IN",context);        Map<String,Object> localResult=dispatcher.runSync("cancelOrderInventoryReservation",cancelOrderInventoryReservationMap);        if (ServiceUtil.isError(localResult))         return localResult;        Map<String,Object> deleteOrderItemShipGroupAssocMap=dctx.makeValidContext("deleteOrderItemShipGroupAssoc","IN",context);        localResult=dispatcher.runSync("deleteOrderItemShipGroupAssoc",deleteOrderItemShipGroupAssocMap);        if (ServiceUtil.isError(localResult))         return localResult;      } catch (      GenericServiceException e) {        return ServiceUtil.returnError(e.toString());      }      if (rowCount != null && rowNumber != null) {        int rowCountInt=rowCount.intValue();        int rowNumberInt=rowNumber.intValue();        if (rowCountInt == rowNumberInt - 1) {          try {            message=validateOrderItemShipGroupAssoc(delegator,dispatcher,orderItem,totalQuantity,oisga,userLogin,locale);          } catch (          Exception e) {            String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedIsLessThanOrderItemQuantity",locale);            Debug.logError(errMsg,module);            return ServiceUtil.returnError(errMsg);          }        }      }      result.put("totalQuantity",totalQuantity);      if (UtilValidate.isNotEmpty(message)) {        result.put("successMessage",message);      }      return result;    }    BigDecimal actualQuantity=totalQuantity.add(quantity);    BigDecimal qty=(BigDecimal)orderItem.get("quantity");    if (UtilValidate.isEmpty(qty)) {      qty=BigDecimal.ZERO;    }    BigDecimal cancelQty=(BigDecimal)orderItem.get("cancelQuantity");    if (UtilValidate.isEmpty(cancelQty)) {      cancelQty=BigDecimal.ZERO;    }    BigDecimal orderItemQuantity=qty.subtract(cancelQty);    if (actualQuantity.compareTo(orderItemQuantity) > 0) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedIsBiggerThanOrderItemQuantity",locale);      Debug.logError(errMsg,module);      return ServiceUtil.returnError(errMsg);    }    if (quantity.compareTo(orderItemQuantity) > 0) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedIsBiggerThanOrderItemQuantity",locale);      Debug.logError(errMsg,module);      return ServiceUtil.returnError(errMsg);    }    oisga.set("quantity",quantity);    oisga.store();    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",orderId).queryOne();    if (UtilValidate.isNotEmpty(orderHeader)) {      Map<String,Object> cancelResp=dispatcher.runSync("cancelOrderInventoryReservation",UtilMisc.toMap("userLogin",userLogin,"orderId",orderId,"orderItemSeqId",orderItemSeqId,"shipGroupSeqId",shipGroupSeqId));      if (ServiceUtil.isError(cancelResp)) {        throw new GeneralException(ServiceUtil.getErrorMessage(cancelResp));      }      String productStoreId=orderHeader.getString("productStoreId");      String orderTypeId=orderHeader.getString("orderTypeId");      List<String> resErrorMessages=new LinkedList<String>();      if (Debug.infoOn())       Debug.logInfo("Calling reserve inventory...",module);      reserveInventory(delegator,dispatcher,userLogin,locale,UtilMisc.toList(oisga),null,UtilMisc.<String,GenericValue>toMap(orderItemSeqId,orderItem),orderTypeId,productStoreId,resErrorMessages);    }    totalQuantity=totalQuantity.add(quantity);    result.put("totalQuantity",totalQuantity);    if (rowCount != null && rowNumber != null) {      int rowCountInt=rowCount.intValue();      int rowNumberInt=rowNumber.intValue();      if (rowCountInt == rowNumberInt - 1) {        try {          message=validateOrderItemShipGroupAssoc(delegator,dispatcher,orderItem,totalQuantity,oisga,userLogin,locale);        } catch (        GeneralException e) {          String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedIsLessThanOrderItemQuantity",locale);          Debug.logError(errMsg,module);          return ServiceUtil.returnError(errMsg);        }      }      if (UtilValidate.isNotEmpty(message)) {        result.put("successMessage",message);      }    }  } else {    totalQuantity=totalQuantity.add(quantity);    result.put("totalQuantity",totalQuantity);  }  return result;}  }
class C{  public static void assertNotEqual(short expected,short actual){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ")");  }  assertBool(expected != actual);}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  public PageRanges(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 1) {    throw new IllegalArgumentException("Page value < 1 specified");  }}  }
class C{  protected void updateRadioLinks(){  m_SetTestBut.setEnabled(m_TestSplitBut.isSelected());  if ((m_SetTestFrame != null) && (!m_TestSplitBut.isSelected())) {    m_SetTestFrame.setVisible(false);  }  m_CVText.setEnabled(m_CVBut.isSelected());  m_CVLab.setEnabled(m_CVBut.isSelected());  m_PercentText.setEnabled(m_PercentBut.isSelected());  m_PercentLab.setEnabled(m_PercentBut.isSelected());}  }
class C{  public ActionForward addInstructionalOfferings(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  InstructionalOfferingListForm frm=(InstructionalOfferingListForm)form;  Long subjAreaId=(frm.getSubjectAreaIds() == null || frm.getSubjectAreaIds().length < 1 ? null : Long.valueOf(frm.getSubjectAreaIds()[0]));  String courseNbr=frm.getCourseNbr().trim();  ActionMessages errors=new ActionMessages();  if (!errors.isEmpty()) {    frm.setSubjectAreas(SubjectArea.getUserSubjectAreas(sessionContext.getUser()));    saveErrors(request,errors);    if (frm.getInstructionalOfferings() == null || frm.getInstructionalOfferings().isEmpty()) {      return mapping.findForward("showInstructionalOfferingSearch");    } else {      return mapping.findForward("showInstructionalOfferingList");    }  }  if (subjAreaId != null) {    sessionContext.setAttribute(SessionAttribute.OfferingsSubjectArea,subjAreaId.toString());    sessionContext.setAttribute(SessionAttribute.OfferingsCourseNumber,courseNbr);  }  if (subjAreaId != null && !courseNbr.isEmpty()) {    if (ApplicationProperty.CourseOfferingNumberMustBeUnique.isTrue()) {      CourseOffering course=CourseOffering.findBySessionSubjAreaIdCourseNbr(sessionContext.getUser().getCurrentAcademicSessionId(),subjAreaId,courseNbr);      if (course != null) {        ActionRedirect redirect=new ActionRedirect(mapping.findForward("showInstructionalOfferingDetail"));        redirect.addParameter("op","view");        redirect.addParameter("io",course.getInstructionalOffering().getUniqueId().toString());        return redirect;      }    }  }  ActionRedirect redirect=new ActionRedirect(mapping.findForward("showCourseOfferingEdit"));  redirect.addParameter("op",MSG.actionAddCourseOffering());  if (subjAreaId != null)   redirect.addParameter("subjAreaId",subjAreaId.toString());  redirect.addParameter("courseNbr",courseNbr);  return redirect;}  }
class C{  public void removeAllInventory(final long productId){  ((ProductSkuService)getService()).removeAllInventory(productId);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.488 -0500",hash_original_method="B9802AB7FB2D6944C0543E71DB189BC5",hash_generated_method="DEEB77B2C68BB909DABA5292FF87F355") public OverScroller(Context context){  this(context,null);}  }
class C{  private void publish(GridClockDeltaSnapshot snapshot,GridDiscoveryTopologySnapshot top){  if (!rw.tryReadLock())   return;  try {    lastSnapshot=new T2<>(snapshot.version(),snapshot);    timeSyncHist.put(snapshot.version(),snapshot);    for (    ClusterNode n : top.topologyNodes()) {      GridClockDeltaSnapshotMessage msg=new GridClockDeltaSnapshotMessage(snapshot.version(),snapshot.deltas());      try {        ctx.io().send(n,TOPIC_TIME_SYNC,msg,SYSTEM_POOL);      } catch (      IgniteCheckedException e) {        if (ctx.discovery().pingNodeNoError(n.id()))         U.error(log,"Failed to send time sync snapshot to remote node (did not leave grid?) " + "[nodeId=" + n.id() + ", msg="+ msg+ ", err="+ e.getMessage()+ ']'); else         if (log.isDebugEnabled())         log.debug("Failed to send time sync snapshot to remote node (did not leave grid?) " + "[nodeId=" + n.id() + ", msg="+ msg+ ", err="+ e.getMessage()+ ']');      }    }  }  finally {    rw.readUnlock();  }}  }
class C{  public GenericURI parse() throws ParseException {  return uriReference(true);}  }
class C{  public static LazyPBagX<Long> rangeLong(long start,long end){  return fromStreamS(ReactiveSeq.rangeLong(start,end));}  }
class C{  protected JvmRTInputArgsTableMeta createJvmRTInputArgsTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmRTInputArgsTableMetaImpl(mib,objectserver);}  }
class C{  @Override public Revision findHighestRevision(@Nullable String revId){  ImmutableList.Builder<String> argsBuilder=ImmutableList.<String>builder().add("log").add("--branch=" + tipCloneSupplier.get().getBranch()).add("--limit=1").add("--template={node}");  if (!Strings.isNullOrEmpty(revId)) {    argsBuilder.add("--rev=" + revId);  }  List<String> args=argsBuilder.build();  String changesetID;  HgClonedRepository tipClone=tipCloneSupplier.get();  try {    changesetID=runner.runCommand(hgBinary.getPath(),ImmutableList.copyOf(args),tipClone.getLocalTempDir().getAbsolutePath());  } catch (  CommandException e) {    throw new MoeProblem("Failed hg run: %s %d %s %s",args,e.returnStatus,e.stdout,e.stderr);  }  return Revision.create(changesetID,tipClone.getRepositoryName());}  }
class C{  protected void cleanStationsAndNetwork(){  log.info("Clean Stations and Network...");  cleanSchedule();  prepareNetwork();  removeNonUsedStopFacilities();  setConnectedStopFacilitiesToIsBlocking();  log.info("Clean Stations and Network... done.");}  }
class C{  String sourceFormForInitializer(AnnotationValue annotationValue,ProcessingEnvironment processingEnv,String memberName,Element context){  SourceFormVisitor visitor=new InitializerSourceFormVisitor(processingEnv,memberName,context);  StringBuilder sb=new StringBuilder();  visitor.visit(annotationValue,sb);  return sb.toString();}  }
class C{  public boolean isNonConfigurableOneTimeParameter(){  return !getParameter().isConfigurable() && isOneTimeParameter();}  }
class C{  private static BoundSize[] parseGaps(String s){  BoundSize[] ret=new BoundSize[4];  int ix=startsWithLenient(s,"gaptop",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[0]=parseBoundSize(s,true,false);    return ret;  }  ix=startsWithLenient(s,"gapleft",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[1]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,"gapbottom",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[2]=parseBoundSize(s,true,false);    return ret;  }  ix=startsWithLenient(s,"gapright",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[3]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,"gapbefore",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[1]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,"gapafter",-1,true);  if (ix > -1) {    s=s.substring(ix).trim();    ret[3]=parseBoundSize(s,true,true);    return ret;  }  ix=startsWithLenient(s,new String[]{"gapx","gapy"},null,true);  if (ix > -1) {    boolean x=s.charAt(3) == 'x';    String[] gaps=toTrimmedTokens(s.substring(ix).trim(),' ');    ret[x ? 1 : 0]=parseBoundSize(gaps[0],true,x);    if (gaps.length > 1) {      ret[x ? 3 : 2]=parseBoundSize(gaps[1],true,!x);    }    return ret;  }  ix=startsWithLenient(s,"gap ",1,true);  if (ix > -1) {    String[] gaps=toTrimmedTokens(s.substring(ix).trim(),' ');    ret[1]=parseBoundSize(gaps[0],true,true);    if (gaps.length > 1) {      ret[3]=parseBoundSize(gaps[1],true,false);      if (gaps.length > 2) {        ret[0]=parseBoundSize(gaps[2],true,true);        if (gaps.length > 3) {          ret[2]=parseBoundSize(gaps[3],true,false);        }      }    }    return ret;  }  throw new IllegalArgumentException("Unknown Gap part: '" + s + "'");}  }
class C{  public synchronized boolean step(final SimState state){  if (inStep) {    throw new RuntimeException("Schedule.step() is not reentrant, yet is being called recursively.");  }  inStep=true;  Bag currentSteps=this.currentSteps;  final MersenneTwisterFast random=state.random;  int topSubstep=0;synchronized (lock) {    if (time == AFTER_SIMULATION || queue.isEmpty()) {      time=AFTER_SIMULATION;      inStep=false;      return false;    }    time=((Key)(queue.getMinKey())).time;    final boolean shuffling=this.shuffling;    while (true) {      queue.extractMin(substeps);      if (substeps.numObjs > 1) {        if (shuffling)         substeps.shuffle(random); else         substeps.reverse();      }      if (topSubstep < substeps.numObjs)       topSubstep=substeps.numObjs;      currentSteps.addAll(substeps);      substeps.numObjs=0;      Key currentKey=(Key)(queue.getMinKey());      if (currentKey == null || currentKey.time != time)       break;    }  }  substeps.numObjs=topSubstep;  substeps.clear();  int len=currentSteps.numObjs;  Object[] objs=currentSteps.objs;  try {    for (int x=0; x < len; x++) {      assert sim.util.LocationLog.set(((Steppable)(objs[x])));      ((Steppable)(objs[x])).step(state);      assert sim.util.LocationLog.clear();      objs[x]=null;    }  }  finally {    currentSteps.numObjs=0;synchronized (lock) {      steps++;    }    inStep=false;  }  return true;}  }
class C{  public static DefaultCoordinateSequenceFactory instance(){  return instanceObject;}  }
class C{  public static void unjar(File inputJar,File outputPath) throws IOException {  outputPath.mkdirs();  JarFile jar=new JarFile(inputJar);  Enumeration<JarEntry> jarEntries=jar.entries();  while (jarEntries.hasMoreElements()) {    JarEntry jarEntry=jarEntries.nextElement();    File file=new File(outputPath.getAbsolutePath() + java.io.File.separator + jarEntry.getName());    new File(file.getParent()).mkdirs();    if (jarEntry.isDirectory()) {      file.mkdir();      continue;    }    InputStream is=jar.getInputStream(jarEntry);    FileOutputStream fos=new FileOutputStream(file);    while (is.available() > 0) {      fos.write(is.read());    }    fos.close();    is.close();  }  jar.close();}  }
class C{  public ColorPanel(Color initialColor){  this(initialColor,true);}  }
class C{  public AbstractEffect(Nature nature,int amount,int atk,int def,double lifesteal,int rate,int regen,double modifier){  super();  this.amount=amount;  this.atk=atk;  this.def=def;  this.lifesteal=lifesteal;  this.rate=rate;  this.regen=regen;  this.nature=nature;  this.modifier=modifier;}  }
class C{  public static Region createPartitionedRegion(String regionName,String localMaxMemory,int redundancy){  Region pr=null;  PartitionAttributes pa;  PartitionAttributesFactory paf=new PartitionAttributesFactory();  AttributesFactory af=new AttributesFactory();  RegionAttributes ra;  int lmax;  try {    lmax=Integer.parseInt(localMaxMemory);  } catch (  NumberFormatException nfe) {    throw new IllegalArgumentException("localMaxMemory must be an integer (" + localMaxMemory + ")");  }  pa=paf.setLocalMaxMemory(lmax).setRedundantCopies(redundancy).create();  af.setPartitionAttributes(pa);  ra=af.create();  cache=createCache();  try {    pr=cache.createRegion(regionName,ra);  } catch (  RegionExistsException rex) {    pr=cache.getRegion(regionName);  }  return pr;}  }
class C{  public void componentResized(ComponentEvent e){}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public Artifact(final String group,final String artifact,final String version){  if (group == null || group.isEmpty())   throw new IllegalArgumentException("group cannot be null or empty");  if (artifact == null || artifact.isEmpty())   throw new IllegalArgumentException("artifact cannot be null or empty");  if (version == null || version.isEmpty())   throw new IllegalArgumentException("version cannot be null or empty");  this.group=group;  this.artifact=artifact;  this.version=version;}  }
class C{  public final boolean readBoolean() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return temp != 0;}  }
class C{  private XYPlot initializeUpperPlot(){  loadedClasses=new YIntervalSeriesImproved("loaded classes");  totalLoadedClasses=new YIntervalSeriesImproved("total loaded classes");  YIntervalSeriesCollection yintervalseriescollection=new YIntervalSeriesCollection();  yintervalseriescollection.addSeries(loadedClasses);  yintervalseriescollection.addSeries(totalLoadedClasses);  DeviationRenderer renderer=new DeviationRenderer(true,false);  renderer.setBaseShapesVisible(true);  renderer.setSeriesStroke(0,new BasicStroke(3.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));  renderer.setSeriesFillPaint(0,new Color(255,200,200));  renderer.setSeriesOutlineStroke(0,new BasicStroke(2.0f));  renderer.setSeriesShape(0,new Ellipse2D.Double(-2.5,-2.5,5.0,5.0));  renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator(StandardXYToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT,DateFormat.getDateTimeInstance(),NumberFormat.getNumberInstance()));  final NumberAxis rangeAxis=new NumberAxis("Classes");  rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  rangeAxis.setAutoRangeMinimumSize(2000.0d);  rangeAxis.setRangeType(RangeType.POSITIVE);  rangeAxis.setAutoRangeIncludesZero(true);  final XYPlot subplot=new XYPlot(yintervalseriescollection,null,rangeAxis,renderer);  subplot.setAxisOffset(new RectangleInsets(5.0,5.0,5.0,5.0));  subplot.setRangeAxisLocation(AxisLocation.TOP_OR_LEFT);  subplot.setRangeCrosshairVisible(true);  return subplot;}  }
class C{  @Override public void putAll(Map<? extends Long,? extends Double> map){  Iterator<? extends Entry<? extends Long,? extends Double>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Long,? extends Double> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public static Scene scene(Parent root){  Scene scene=new Scene(root);  scene.getStylesheets().add("media/style.css");  return scene;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_TYPING_STRATEGY:    return getTypingStrategy();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___SET_TYPING_STRATEGY__TYPINGSTRATEGY:  setTypingStrategy((TypingStrategy)arguments.get(0));return null;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___IS_USE_SITE_STRUCTURAL_TYPING:return isUseSiteStructuralTyping();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_STRUCTURAL_MEMBERS:return getStructuralMembers();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___GET_TYPE_REF_AS_STRING:return getTypeRefAsString();case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL___HAS_POSTPONED_SUBSTITUTION_FOR__TYPEVARIABLE:return hasPostponedSubstitutionFor((TypeVariable)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  public static void main(String[] args){  HaltStep es=new HaltStep();  HaltStepInfo haltStepInfo=es.execute(args);  OozieUtil oozieUtil=new OozieUtil();  try {    oozieUtil.persistBeanData(haltStepInfo,false);  } catch (  Exception e) {    LOGGER.error(e);    throw new MetadataException(e);  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ERROR_CODE:    return isSetErrorCode();case MESSAGE:  return isSetMessage();}throw new IllegalStateException();}  }
class C{  public void processRemoteComment(String commentFile,String commentSize){  RemoteFileFetcher commentFetcher=new RemoteFileFetcher(workspace,logger,commentFile,commentSize);  try {    String customComment=commentFetcher.getRemoteFile();    commenter.addUserComment(customComment);  } catch (  InterruptedException e) {    e.printStackTrace(logger.getStream());  }catch (  IOException e) {    e.printStackTrace(logger.getStream());  }}  }
class C{  public PreClearFlashEvent(FacesContext facesContext,Map<String,Object> source){  super(facesContext,source);}  }
class C{  private void installModuleMBeanServer(){  try {    Method method=ModuleLoader.class.getDeclaredMethod("installMBeanServer");    method.setAccessible(true);    method.invoke(null);  } catch (  Exception e) {    SwarmMessages.MESSAGES.moduleMBeanServerNotInstalled(e);  }}  }
class C{  public void testHasIntrospectedProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  assertTrue(Beans.hasIntrospectedProperty(new Object(),CLASS));  assertFalse(Beans.hasIntrospectedProperty(new Object(),STRING_PROPERTY));  assertTrue(Beans.hasIntrospectedProperty(introspectedTarget,STRING_PROPERTY));  assertFalse(Beans.hasIntrospectedProperty(hashedTarget,STRING_PROPERTY));  assertFalse(Beans.hasIntrospectedProperty(introspectedTarget,NOT_A_PROPERTY));}  }
class C{  public static void main(String[] argv){  runClassifier(new KStar(),argv);}  }
class C{  private File writeTestClass(List<ExecutableSequence> sequences,String testClassName){  File file=new File(getDir(),testClassName + ".java");  PrintStream out=createTextOutputStream(file);  NameGenerator methodNameGen=new NameGenerator("test",1,numDigits(sequences.size()));  try {    outputPackageName(out,packageName);    out.println();    out.println("import org.junit.FixMethodOrder;");    out.println("import org.junit.Test;");    out.println("import org.junit.runners.MethodSorters;");    out.println();    out.println("@FixMethodOrder(MethodSorters.NAME_ASCENDING)");    out.println("public class " + testClassName + " {");    out.println();    out.println("  public static boolean debug = false;");    out.println();    for (    ExecutableSequence s : sequences) {      if (includeParsableString) {        out.println("/*");        out.println(s.sequence.toString());        out.println("*/");      }      writeTest(out,testClassName,methodNameGen.next(),s);      out.println();    }    out.println("}");    classMethodCounts.put(testClassName,methodNameGen.nameCount());  }  finally {    if (out != null)     out.close();  }  return file;}  }
class C{  public static XmlOrderedResult nameDiffers(String originalElementName,String newElementName){  return new XmlOrderedResult(false,String.format("The xml element <%s> should be placed before <%s>",newElementName,originalElementName));}  }
class C{  static boolean isFatal(GDSException ex){  int iscErrorCode=ex.getFbErrorCode();  return Arrays.binarySearch(FATAL_ERRORS,iscErrorCode) >= 0;}  }
class C{  public static void main(String[] args){  TestPackagePage tester=new TestPackagePage();  run(tester,ARGS1,TEST1,NO_TEST);  run(tester,ARGS2,TEST2,NO_TEST);  tester.printSummary();}  }
class C{  public boolean equals(Object r){  if (r == null) {    return false;  }  if (!(r.getClass().equals(this.getClass()))) {    return false;  }  CbusAddress opp=(CbusAddress)r;  if (opp.aFrame.length != this.aFrame.length) {    return false;  }  for (int i=0; i < this.aFrame.length; i++) {    if (this.aFrame[i] != opp.aFrame[i]) {      return false;    }  }  return true;}  }
class C{  @Bean public LoggerFactory logStreamFactory(){  return new LoggerFactory();}  }
class C{  boolean validateVariable(){  String name=_variableNameField.getText().trim();  _variableNameField.setText(name);  _curVariable.setDataString("");  _curVariable.setNum1(0);  _curVariable.setNum2(0);  int itemType=_variableTypeBox.getSelectedIndex();  int testType=0;switch (itemType) {case Conditional.ITEM_TYPE_SENSOR:    testType=Conditional.ITEM_TO_SENSOR_TEST[_variableStateBox.getSelectedIndex()];  break;case Conditional.ITEM_TYPE_TURNOUT:testType=Conditional.ITEM_TO_TURNOUT_TEST[_variableStateBox.getSelectedIndex()];break;case Conditional.ITEM_TYPE_LIGHT:testType=Conditional.ITEM_TO_LIGHT_TEST[_variableStateBox.getSelectedIndex()];break;case Conditional.ITEM_TYPE_SIGNALHEAD:testType=Conditional.ITEM_TO_SIGNAL_HEAD_TEST[_variableStateBox.getSelectedIndex()];break;case Conditional.ITEM_TYPE_SIGNALMAST:testType=Conditional.ITEM_TO_SIGNAL_MAST_TEST[_variableStateBox.getSelectedIndex()];break;case Conditional.ITEM_TYPE_MEMORY:testType=Conditional.ITEM_TO_MEMORY_TEST[_variableCompareTypeBox.getSelectedIndex()];break;case Conditional.ITEM_TYPE_CONDITIONAL:testType=Conditional.ITEM_TO_CONDITIONAL_TEST[_variableStateBox.getSelectedIndex()];break;case Conditional.ITEM_TYPE_WARRANT:testType=Conditional.ITEM_TO_WARRANT_TEST[_variableStateBox.getSelectedIndex()];break;case Conditional.ITEM_TYPE_CLOCK:testType=Conditional.TYPE_FAST_CLOCK_RANGE;break;case Conditional.ITEM_TYPE_OBLOCK:testType=Conditional.TYPE_BLOCK_STATUS_EQUALS;break;case Conditional.ITEM_TYPE_ENTRYEXIT:testType=Conditional.ITEM_TO_ENTRYEXIT_TEST[_variableStateBox.getSelectedIndex()];break;default :javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,rbx.getString("ErrorVariableType"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);return false;}_curVariable.setType(testType);if (log.isDebugEnabled()) {log.debug("validateVariable: itemType= " + itemType + ", testType= "+ testType);}switch (itemType) {case Conditional.ITEM_TYPE_SENSOR:name=validateSensorReference(name);if (name == null) {return false;}break;case Conditional.ITEM_TYPE_TURNOUT:name=validateTurnoutReference(name);if (name == null) {return false;}break;case Conditional.ITEM_TYPE_CONDITIONAL:name=validateConditionalReference(name);if (name == null) {return false;}_curVariable.setName(name);break;case Conditional.ITEM_TYPE_LIGHT:name=validateLightReference(name);if (name == null) {return false;}break;case Conditional.ITEM_TYPE_MEMORY:name=validateMemoryReference(name);if (name == null) {return false;}String name2=_variableData1Field.getText();if ((testType == Conditional.TYPE_MEMORY_COMPARE) || (testType == Conditional.TYPE_MEMORY_COMPARE_INSENSITIVE)) {name2=validateMemoryReference(name2);if (name2 == null) {return false;}}_curVariable.setDataString(name2);_curVariable.setNum1(_variableCompareOpBox.getSelectedIndex() + 1);break;case Conditional.ITEM_TYPE_CLOCK:int beginTime=parseTime(_variableData1Field.getText());if (beginTime < 0) {return (false);}int endTime=parseTime(_variableData2Field.getText());if (endTime < 0) {return (false);}_curVariable.setNum1(beginTime);_curVariable.setNum2(endTime);name="Clock";break;case Conditional.ITEM_TYPE_SIGNALHEAD:name=validateSignalHeadReference(name);if (name == null) {return false;}if (testType == Conditional.TYPE_SIGNAL_HEAD_APPEARANCE_EQUALS) {String appStr=(String)_variableSignalBox.getSelectedItem();int type=ConditionalVariable.stringToVariableTest(appStr);if (type < 0) {javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,rbx.getString("ErrorAppearance"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);return false;}_curVariable.setType(type);_curVariable.setDataString(appStr);if (log.isDebugEnabled()) {log.debug("SignalHead \"" + name + "\"of type '"+ testType+ "' _variableSignalBox.getSelectedItem()= "+ _variableSignalBox.getSelectedItem());}}break;case Conditional.ITEM_TYPE_SIGNALMAST:name=validateSignalMastReference(name);if (name == null) {return false;}if (testType == Conditional.TYPE_SIGNAL_MAST_ASPECT_EQUALS) {if (_variableSignalBox.getSelectedIndex() < 0) {javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,rbx.getString("ErrorAspect"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);return false;}_curVariable.setDataString((String)_variableSignalBox.getSelectedItem());}break;case Conditional.ITEM_TYPE_WARRANT:name=validateWarrantReference(name);if (name == null) {return false;}break;case Conditional.ITEM_TYPE_OBLOCK:name=validateOBlockReference(name);if (name == null) {return false;}String str=(String)_variableStateBox.getSelectedItem();_curVariable.setDataString(OBlock.getSystemStatusName(str));if (log.isDebugEnabled()) {log.debug("OBlock \"" + name + "\"of type '"+ testType+ "' _variableStateBox.getSelectedItem()= "+ _variableStateBox.getSelectedItem());}break;case Conditional.ITEM_TYPE_ENTRYEXIT:name=validateEntryExitReference(name);if (name == null) {return false;}break;default :javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,rbx.getString("ErrorVariableType"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);return false;}_curVariable.setName(name);boolean result=_curVariable.evaluate();if (log.isDebugEnabled()) {log.debug("State Variable \"" + name + "\"of type '"+ ConditionalVariable.getTestTypeString(testType)+ "' state= "+ result+ " type= "+ _curVariable.getType());}if (_curVariable.getType() == Conditional.TYPE_NONE) {javax.swing.JOptionPane.showMessageDialog(editConditionalFrame,rbx.getString("ErrorVariableState"),Bundle.getMessage("ErrorTitle"),javax.swing.JOptionPane.ERROR_MESSAGE);return false;}return (true);}  }
class C{  @Override public PathImpl schemeWalk(String userPath,Map<String,Object> attributes,String uri,int offset){  int length=uri.length();  if (length < 2 + offset || uri.charAt(offset) != '/' || uri.charAt(offset + 1) != '/')   throw new RuntimeException(L.l("bad scheme in `{0}'",uri));  CharBuffer buf=CharBuffer.allocate();  int i=2 + offset;  int ch=0;  boolean isInBrace=false;  for (; i < length && ((ch=uri.charAt(i)) != ':' || isInBrace) && ch != '/' && ch != '?'; i++) {    buf.append((char)ch);    if (ch == '[')     isInBrace=true; else     if (ch == ']')     isInBrace=false;  }  String host=buf.close();  if (host.length() == 0)   throw new RuntimeException(L.l("bad host in `{0}'",uri));  int port=0;  if (ch == ':') {    for (i++; i < length && (ch=uri.charAt(i)) >= '0' && ch <= '9'; i++) {      port=10 * port + uri.charAt(i) - '0';    }  }  if (port == 0)   port=80;  HttpPath root=create(host,port);  return root.fsWalk(userPath,attributes,uri.substring(i));}  }
class C{  public BluRayParser(java.io.File inBdmvDir){  this(inBdmvDir,null);}  }
class C{  public static void closeTag(String name){  Log.write("</");  Log.write(name);  Log.writeln(">");}  }
class C{  public E point(Coordinate coordinate){  shell.point(coordinate);  return thisRef();}  }
class C{  Item newFieldItem(final String owner,final String name,final String desc){  key3.set(FIELD,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(FIELD,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public static java.awt.Font toAwtFont(final Device device,final FontData fontData,final boolean ensureSameSize){  int style;switch (fontData.getStyle()) {case SWT.NORMAL:    style=java.awt.Font.PLAIN;  break;case SWT.ITALIC:style=java.awt.Font.ITALIC;break;case SWT.BOLD:style=java.awt.Font.BOLD;break;default :style=java.awt.Font.PLAIN;break;}int height=(int)Math.round(fontData.getHeight() * device.getDPI().y / 72.0);if (ensureSameSize) {final GC tmpGC=new GC(device);final Font tmpFont=new Font(device,fontData);tmpGC.setFont(tmpFont);final JPanel DUMMY_PANEL=new JPanel();java.awt.Font tmpAwtFont=new java.awt.Font(fontData.getName(),style,height);if (DUMMY_PANEL.getFontMetrics(tmpAwtFont).stringWidth(Az) > tmpGC.textExtent(Az).x) {while (DUMMY_PANEL.getFontMetrics(tmpAwtFont).stringWidth(Az) > tmpGC.textExtent(Az).x) {height--;tmpAwtFont=new java.awt.Font(fontData.getName(),style,height);}} else if (DUMMY_PANEL.getFontMetrics(tmpAwtFont).stringWidth(Az) < tmpGC.textExtent(Az).x) {while (DUMMY_PANEL.getFontMetrics(tmpAwtFont).stringWidth(Az) < tmpGC.textExtent(Az).x) {height++;tmpAwtFont=new java.awt.Font(fontData.getName(),style,height);}}tmpFont.dispose();tmpGC.dispose();}return new java.awt.Font(fontData.getName(),style,height);}  }
class C{  public void logInfo(Object message,Throwable exception){  logInternal(INFO,message,exception);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  private void processDocument(JCas jcas,String document) throws CollectionException {  String[] lines=document.split(LINE_SEP);  int i=0;  int startOffset=0;  for (  String line : lines) {    i++;    if (line.startsWith(commentChar)) {      startOffset+=line.length() + LINE_SEP.length();      continue;    }    String[] parts=line.split(separatorChar);    if (parts.length < 2 || parts.length > 5) {      this.getLogger().log(Level.SEVERE,"Wrong file format:  " + line);      throw new CollectionException(new Throwable("Wrong file format on line '" + i + " "+ line+ "'. It should be word1:word2:gold[:pos1:pos2]"));    }    Token token1=new Token(jcas);    token1.setBegin(startOffset);    token1.setEnd((startOffset + parts[0].length()));    token1.addToIndexes();    Token token2=new Token(jcas);    token2.setBegin(startOffset + parts[0].length() + 1);    token2.setEnd(startOffset + parts[0].length() + 1+ parts[1].length());    token2.addToIndexes();    String goldValueString=parts[2];    double goldValue=-1.0;    try {      goldValue=new Double(goldValueString);    } catch (    NumberFormatException e) {      this.getLogger().log(Level.INFO,"Wrong number format: " + goldValueString);      startOffset+=line.length() + LINE_SEP.length();      continue;    }    POS pos1=new POS(jcas,token1.getBegin(),token1.getEnd());    pos1.setPosValue(parts[3]);    pos1.addToIndexes();    POS pos2=new POS(jcas,token2.getBegin(),token2.getEnd());    pos2.setPosValue(StringUtils.chomp(parts[4]));    pos2.addToIndexes();    SemRelWordPair wordPairAnnotation=new SemRelWordPair(jcas);    wordPairAnnotation.setBegin(token1.getBegin());    wordPairAnnotation.setEnd(token2.getEnd());    wordPairAnnotation.setWord1(token1.getCoveredText());    wordPairAnnotation.setWord2(token2.getCoveredText());    wordPairAnnotation.setToken1(token1);    wordPairAnnotation.setToken2(token2);    wordPairAnnotation.setPos1(pos1);    wordPairAnnotation.setPos2(pos2);    wordPairAnnotation.setGoldValue(goldValue);    wordPairAnnotation.addToIndexes();    startOffset+=line.length() + LINE_SEP.length();  }}  }
class C{  public Obayashi(){  super(2,2,1);}  }
class C{  public boolean isProspect(){  Object oo=get_Value(COLUMNNAME_IsProspect);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void inform(ResourceLoader resourceLoader){  provider.inform(resourceLoader);  boolean reloaded=provider.reload();  if (!reloaded) {    log.warn("Failed reloading currencies");  }}  }
class C{  public static VersionedObjectList execute(ExecutablePool pool,Region region,Map map,EventID eventId,boolean skipCallbacks,int retryAttempts,Object callbackArg){  ClientMetadataService cms=((LocalRegion)region).getCache().getClientMetadataService();  Map<ServerLocation,HashSet> serverToFilterMap=cms.getServerToFilterMap(map.keySet(),region,true);  if (serverToFilterMap == null || serverToFilterMap.isEmpty()) {    AbstractOp op=new PutAllOpImpl(region,map,eventId,((PoolImpl)pool).getPRSingleHopEnabled(),skipCallbacks,callbackArg);    op.initMessagePart();    return (VersionedObjectList)pool.execute(op);  }  List callableTasks=constructAndGetPutAllTasks(region,map,eventId,skipCallbacks,serverToFilterMap,(PoolImpl)pool,callbackArg);  final boolean isDebugEnabled=logger.isDebugEnabled();  if (isDebugEnabled) {    logger.debug("PutAllOp#execute : Number of putAll tasks is : {}",callableTasks.size());  }  HashMap<ServerLocation,RuntimeException> failedServers=new HashMap<ServerLocation,RuntimeException>();  PutAllPartialResult result=new PutAllPartialResult(map.size());  try {    Map<ServerLocation,Object> results=SingleHopClientExecutor.submitBulkOp(callableTasks,cms,(LocalRegion)region,failedServers);    for (    Map.Entry<ServerLocation,Object> entry : results.entrySet()) {      Object value=entry.getValue();      if (value instanceof PutAllPartialResultException) {        PutAllPartialResultException pap=(PutAllPartialResultException)value;        if (isDebugEnabled) {          logger.debug("PutAll SingleHop encountered PutAllPartialResultException exception: {}, failedServers are {}",pap,failedServers.keySet());        }        result.consolidate(pap.getResult());      } else {        if (value != null) {          VersionedObjectList list=(VersionedObjectList)value;          result.addKeysAndVersions(list);        }      }    }  } catch (  RuntimeException ex) {    if (isDebugEnabled) {      logger.debug("single-hop putAll encountered unexpected exception: ",ex);    }    throw ex;  }  if (!failedServers.isEmpty()) {    if (retryAttempts == 0) {      throw failedServers.values().iterator().next();    }    if (result.getSucceededKeysAndVersions().size() == 0) {      Set succeedKeySet=new LinkedHashSet();      Set<ServerLocation> serverSet=serverToFilterMap.keySet();      for (      ServerLocation server : serverSet) {        if (!failedServers.containsKey(server)) {          succeedKeySet.addAll(serverToFilterMap.get(server));        }      }      result.addKeys(succeedKeySet);    }    boolean oneSubMapRetryFailed=false;    Set<ServerLocation> failedServerSet=failedServers.keySet();    for (    ServerLocation failedServer : failedServerSet) {      RuntimeException savedRTE=failedServers.get(failedServer);      if (savedRTE instanceof PutAllPartialResultException) {        oneSubMapRetryFailed=true;        continue;      }      Map newMap=new LinkedHashMap();      Set keySet=serverToFilterMap.get(failedServer);      for (      Object key : keySet) {        newMap.put(key,map.get(key));      }      try {        VersionedObjectList v=PutAllOp.execute(pool,region,newMap,eventId,skipCallbacks,true,callbackArg);        if (v == null) {          result.addKeys(keySet);        } else {          result.addKeysAndVersions(v);        }      } catch (      PutAllPartialResultException pre) {        oneSubMapRetryFailed=true;        if (logger.isDebugEnabled()) {          logger.debug("Retry failed with PutAllPartialResultException: {} Before retry: {}",pre,result.getKeyListString());        }        result.consolidate(pre.getResult());      }catch (      Exception rte) {        oneSubMapRetryFailed=true;        Object firstKey=newMap.keySet().iterator().next();        result.saveFailedKey(firstKey,rte);      }    }    if (oneSubMapRetryFailed && result.hasFailure()) {      PutAllPartialResultException pre=new PutAllPartialResultException(result);      throw pre;    }  }  return result.getSucceededKeysAndVersions();}  }
class C{  public KernelLogisticRegressionModel(ExampleSet exampleSet,List<SupportVector> supportVectors,Kernel kernel,double bias){  super(exampleSet,ExampleSetUtilities.SetsCompareOption.ALLOW_SUPERSET,ExampleSetUtilities.TypesCompareOption.ALLOW_SAME_PARENTS);  this.supportVectors=supportVectors;  if (supportVectors == null || supportVectors.size() == 0) {    throw new IllegalArgumentException("Null or empty support vector collection: not possible to predict values!");  }  this.kernel=kernel;  this.bias=bias;}  }
class C{  public boolean hasNoChildren(){  return noChildren;}  }
class C{  public static void showSnackbar(Context context,View container,String content,SnackbarDisplayType displayType){  Snackbar snackbar=Snackbar.make(container,content,Snackbar.LENGTH_LONG);  View snackbarView=snackbar.getView();switch (displayType) {case FAILURE:    snackbarView.setBackgroundColor(ContextCompat.getColor(context,R.color.worse_10));  break;case FAILURE_BLUE:snackbarView.setBackgroundColor(ContextCompat.getColor(context,R.color.best_100));break;case DROP:TextView tv=(TextView)snackbarView.findViewById(android.support.design.R.id.snackbar_text);tv.setMaxLines(5);snackbarView.setBackgroundColor(ContextCompat.getColor(context,R.color.best_10));break;}snackbar.show();}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof String)) {    throw new EncoderException("Parameter supplied to Soundex encode is not of type java.lang.String");  }  return soundex((String)pObject);}  }
class C{  public static List<Integer> preorderTraversal(TreeNode root){  List<Integer> res=new ArrayList<Integer>();  if (root == null) {    return res;  }  preorderTraversalTree(root,res);  return res;}  }
class C{  private int createPOFromSO(MOrder so) throws Exception {  log.info(so.toString());  MOrderLine[] soLines=so.getLines(true,null);  if (soLines == null || soLines.length == 0) {    log.warning("No Lines - " + so);    return 0;  }  int counter=0;  String sql="SELECT MIN(po.C_BPartner_ID), po.M_Product_ID " + "FROM M_Product_PO po" + " INNER JOIN C_OrderLine ol ON (po.M_Product_ID=ol.M_Product_ID) "+ "WHERE ol.C_Order_ID=? AND po.IsCurrentVendor='Y' " + ((p_Vendor_ID > 0) ? " AND po.C_BPartner_ID=? " : "") + "GROUP BY po.M_Product_ID "+ "ORDER BY 1";  PreparedStatement pstmt=null;  ResultSet rs=null;  MOrder po=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,so.getC_Order_ID());    if (p_Vendor_ID != 0)     pstmt.setInt(2,p_Vendor_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      int C_BPartner_ID=rs.getInt(1);      if (po == null || po.getBill_BPartner_ID() != C_BPartner_ID) {        po=createPOForVendor(rs.getInt(1),so);        addLog(0,null,null,po.getDocumentNo());        counter++;      }      int M_Product_ID=rs.getInt(2);      for (int i=0; i < soLines.length; i++) {        if (soLines[i].getM_Product_ID() == M_Product_ID) {          MOrderLine poLine=new MOrderLine(po);          poLine.setLink_OrderLine_ID(soLines[i].getC_OrderLine_ID());          poLine.setM_Product_ID(soLines[i].getM_Product_ID());          poLine.setC_Charge_ID(soLines[i].getC_Charge_ID());          poLine.setM_AttributeSetInstance_ID(soLines[i].getM_AttributeSetInstance_ID());          poLine.setC_UOM_ID(soLines[i].getC_UOM_ID());          poLine.setQtyEntered(soLines[i].getQtyEntered());          poLine.setQtyOrdered(soLines[i].getQtyOrdered());          poLine.setDescription(soLines[i].getDescription());          poLine.setDatePromised(soLines[i].getDatePromised());          poLine.setPrice();          poLine.saveEx();          soLines[i].setLink_OrderLine_ID(poLine.getC_OrderLine_ID());          soLines[i].saveEx();        }      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    throw e;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (counter == 1 && po != null) {    so.setLink_Order_ID(po.getC_Order_ID());    so.saveEx();  }  return counter;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.998 -0500",hash_original_method="35265A493F0E0565DD01B430CD5CF199",hash_generated_method="D16A86D975EB7971AAFB535B139AEDDF") final synchronized void _requestWont(int option) throws IOException {  if ((_willResponse[option] == 0 && _stateIsWont(option)) || _requestedWont(option)) {    return;  }  _setWantWont(option);  ++_doResponse[option];  _sendWont(option);}  }
class C{  public void addTempEmoticon(Emoticon emote){  twitchEmotesById.put(emote.numericId,emote);}  }
class C{  public String encode(byte[] input){  return encode(input,false);}  }
class C{  public void connect(SocketAddress endpoint,int timeout) throws IOException {  if (endpoint == null)   throw new IllegalArgumentException("connect: The address can't be null");  if (timeout < 0)   throw new IllegalArgumentException("connect: timeout can't be negative");  if (isClosed())   throw new SocketException("Socket is closed");  if (!oldImpl && isConnected())   throw new SocketException("already connected");  if (!(endpoint instanceof InetSocketAddress))   throw new IllegalArgumentException("Unsupported address type");  InetSocketAddress epoint=(InetSocketAddress)endpoint;  InetAddress addr=epoint.getAddress();  int port=epoint.getPort();  checkAddress(addr,"connect");  SecurityManager security=System.getSecurityManager();  if (security != null) {    if (epoint.isUnresolved())     security.checkConnect(epoint.getHostName(),port); else     security.checkConnect(addr.getHostAddress(),port);  }  if (!created)   createImpl(true);  if (!oldImpl)   impl.connect(epoint,timeout); else   if (timeout == 0) {    if (epoint.isUnresolved())     impl.connect(addr.getHostName(),port); else     impl.connect(addr,port);  } else   throw new UnsupportedOperationException("SocketImpl.connect(addr, timeout)");  connected=true;  bound=true;}  }
class C{  protected void onException(final WroRuntimeException e){  throw e;}  }
class C{  public static byte[] sha3_256(final byte[]... inputs){  return hash("SHA3-256",inputs);}  }
class C{  public boolean hasNext(){  return (current != null);}  }
class C{  public boolean endsWith(List<Rdn> rdns){  if (rdns == null) {    return false;  }  int len1=this.rdns.size();  int len2=rdns.size();  return (len1 >= len2 && doesListMatch(len1 - len2,len1,rdns));}  }
class C{  private SipRequest createInviteRequest(String content) throws PayloadException {  try {    SipRequest invite=SipMessageFactory.createMultipartInvite(getDialogPath(),getFeatureTags(),getAcceptContactTags(),content,BOUNDARY_TAG);    if (getSubject() != null) {      invite.addHeader(SubjectHeader.NAME,getSubject());    }    invite.addHeader(RequireHeader.NAME,"recipient-list-invite");    invite.addHeader(ChatUtils.HEADER_CONTRIBUTION_ID,getContributionID());    return invite;  } catch (  ParseException e) {    throw new PayloadException("Failed to create invite request!",e);  }}  }
class C{  public select addElement(option[] element){  for (int x=0; x < element.length; x++) {    addElementToRegistry(element[x]);  }  return (this);}  }
class C{  public static <Req,Res>void loadTestConcurrency(final int concurrency,final int warmupRequests,final ReceivePort<Req> requests,final RequestExecutor<Req,Res> executor,final SendPort<TimingEvent<Res>> eventChannel) throws SuspendExecution, InterruptedException {  loadTestConcurrency(concurrency,warmupRequests,requests,executor,eventChannel,null,null);}  }
class C{  public static void ellipse(double x,double y,double semiMajorAxis,double semiMinorAxis){  if (semiMajorAxis < 0)   throw new IllegalArgumentException("ellipse semimajor axis must be nonnegative");  if (semiMinorAxis < 0)   throw new IllegalArgumentException("ellipse semiminor axis must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * semiMajorAxis);  double hs=factorY(2 * semiMinorAxis);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.draw(new Ellipse2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public RetryingMessageListenerAdapter(MessageListener<K,V> messageListener,RetryTemplate retryTemplate){  this(messageListener,retryTemplate,null);}  }
class C{  public static <TK,FV>List<RichTranslation<TK,FV>> mergeAndDedup(List<RichTranslation<TK,FV>> standard,List<RichTranslation<TK,FV>> alt,int maxAltItems){  IntSet hashCodeSet=new IntOpenHashSet(standard.size());  for (  RichTranslation<TK,FV> s : standard) {    hashCodeSet.add(derivationHashCode(s.getFeaturizable().derivation));  }  List<RichTranslation<TK,FV>> returnList=new ArrayList<>(standard);  for (int i=0, sz=Math.min(maxAltItems,alt.size()); i < sz; ++i) {    RichTranslation<TK,FV> t=alt.get(i);    int hashCode=derivationHashCode(t.getFeaturizable().derivation);    if (!hashCodeSet.contains(hashCode))     returnList.add(t);  }  Collections.sort(returnList);  return returnList;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private CharBuffer filter(char[] array){  CharBuffer buf=new CharBuffer();  CharBuffer fun=new CharBuffer();  CharBuffer file=new CharBuffer();  int i=0;  while (i < array.length) {    fun.clear();    file.clear();    int start=i;    int end;    for (end=i; end < array.length && array[end] != '\n'; end++) {    }    for (; i < end && Character.isWhitespace(array[i]); i++) {      fun.append(array[i]);    }    for (; i < end && !Character.isWhitespace(array[i]); i++) {      fun.append(array[i]);    }    if (!fun.endsWith("at")) {      for (i=start; i < end; i++) {        buf.append(array[i]);      }      i=end + 1;      buf.append('\n');      continue;    }    for (; i < end && Character.isWhitespace(array[i]); i++) {    }    fun.clear();    for (; i < end && !Character.isWhitespace(array[i]) && array[i] != '('; i++) {      fun.append(array[i]);    }    if (i < end && array[i] == '(')     i++;    for (; i < end && !Character.isWhitespace(array[i]) && array[i] != ':' && array[i] != ')'; i++) {      file.append(array[i]);    }    int line=-1;    if (i < end && array[i] == ':') {      line=0;      for (i++; i < end && array[i] >= '0' && array[i] <= '9'; i++) {        line=10 * line + array[i] - '0';      }    }    for (; i < end && !Character.isWhitespace(array[i]) && array[i] != ':' && array[i] != ')'; i++) {      file.append(array[i]);    }    buf.append("\tat ");    buf.append(fun);    buf.append("(");    String dstFile=file.toString();    if (dstFile.equals(_dstFilename)) {      convertError(buf,line);    } else {      buf.append(file);      if (line > 0) {        buf.append(":");        buf.append(line);      }    }    buf.append(array,i,end - i);    buf.append('\n');    i=end + 1;  }  return buf;}  }
class C{  public AbstractPreferencePagePresenter(String title){  this(title,DEFAULT_CATEGORY);}  }
class C{  private List<Element> children(){  return XmlUtils.toElementList(element.getChildNodes());}  }
class C{  public void subTearDown() throws Exception {}  }
class C{  public static void UF7(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    if (j % 2 == 0) {      sum2+=yj * yj;      count2++;    } else {      sum1+=yj * yj;      count1++;    }  }  yj=Math.pow(x[0],0.2);  f[0]=yj + 2.0 * sum1 / (double)count1;  f[1]=1.0 - yj + 2.0 * sum2 / (double)count2;}  }
class C{  public boolean verifySignature(byte[] signature){  try {    block=cipher.processBlock(signature,0,signature.length);  } catch (  Exception e) {    return false;  }  BigInteger t=new BigInteger(block);  BigInteger f;  if (t.mod(BigInteger.valueOf(16)).equals(BigInteger.valueOf(12))) {    f=t;  } else {    t=kParam.getModulus().subtract(t);    if (t.mod(BigInteger.valueOf(16)).equals(BigInteger.valueOf(12))) {      f=t;    } else {      return false;    }  }  createSignatureBlock();  byte[] fBlock=BigIntegers.asUnsignedByteArray(block.length,f);  boolean rv=Arrays.constantTimeAreEqual(block,fBlock);  clearBlock(block);  clearBlock(fBlock);  return rv;}  }
class C{  public static boolean containsAny(Collection source,Collection candidates){  if (isEmpty(source) || isEmpty(candidates)) {    return false;  }  for (  Object candidate : candidates) {    if (source.contains(candidate)) {      return true;    }  }  return false;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.bouncing_balls);  LinearLayout container=(LinearLayout)findViewById(R.id.container);  container.addView(new MyAnimationView(this));}  }
class C{  public DataSourceFactory(){}  }
class C{  public boolean isFrameEdge(QuadEdge e){  if (isFrameVertex(e.orig()) || isFrameVertex(e.dest()))   return true;  return false;}  }
class C{  public static MemberAccessModifier toMemberModifier(TypeAccessModifier modifier){switch (modifier) {case PRIVATE:    return MemberAccessModifier.PRIVATE;case PROJECT:  return MemberAccessModifier.PROJECT;case PUBLIC_INTERNAL:return MemberAccessModifier.PUBLIC_INTERNAL;case PUBLIC:return MemberAccessModifier.PUBLIC;default :return MemberAccessModifier.PROJECT;}}  }
class C{  public final ASTNode createStringPlaceholder(String code,int nodeType){  if (code == null) {    throw new IllegalArgumentException();  }  ASTNode placeholder=getNodeStore().newPlaceholderNode(nodeType);  if (placeholder == null) {    throw new IllegalArgumentException("String placeholder is not supported for type" + nodeType);  }  getNodeStore().markAsStringPlaceholder(placeholder,code);  return placeholder;}  }
class C{  public void flush() throws IOException {  this.flushBuffer();}  }
class C{  public void logIssue(String message,Throwable ex){  foamLogger.w(message,ex);}  }
class C{  public Boolean(boolean value){  this.value=value;}  }
class C{  protected boolean calculateZoomToPointTransform(Matrix outTransform,float scale,PointF imagePoint,PointF viewPoint,@LimitFlag int limitFlags){  float[] viewAbsolute=mTempValues;  viewAbsolute[0]=imagePoint.x;  viewAbsolute[1]=imagePoint.y;  mapRelativeToAbsolute(viewAbsolute,viewAbsolute,1);  float distanceX=viewPoint.x - viewAbsolute[0];  float distanceY=viewPoint.y - viewAbsolute[1];  boolean transformCorrected=false;  outTransform.setScale(scale,scale,viewAbsolute[0],viewAbsolute[1]);  transformCorrected|=limitScale(outTransform,viewAbsolute[0],viewAbsolute[1],limitFlags);  outTransform.postTranslate(distanceX,distanceY);  transformCorrected|=limitTranslation(outTransform,limitFlags);  return transformCorrected;}  }
class C{  public void logInWithPublishPermissions(Fragment fragment,Collection<String> permissions){  validatePublishPermissions(permissions);  LoginClient.Request loginRequest=createLoginRequest(permissions);  startLogin(new FragmentStartActivityDelegate(fragment),loginRequest);}  }
class C{  public String ensureSessionParticipant(String sessionParticipantUrl){  Validate.notNull(sessionParticipantUrl);  String retval=null;  SessionParticipant participant=null;  for (  SessionParticipant sp : getSessionParticipants()) {    if (sp.getRelyingPartyUrl().equals(sessionParticipantUrl)) {      participant=sp;      break;    }  }  if (participant == null) {    try {      participant=new SessionParticipant(sessionParticipantUrl);      addSessionParticipant(participant);    } catch (    NoSuchAlgorithmException e) {      participant=null;    }  }  if (participant != null) {    retval=participant.getSessionId();  }  return retval;}  }
class C{  public void verifyError(String substring){  verify(Level.SEVERE,substring);}  }
class C{  public void configureBaudRate(String rate){  log.debug("configureBaudRate: " + rate);  selectedSpeed=rate;  super.configureBaudRate(rate);}  }
class C{  public void addParam(String param,IDomain type){  params.put(param.toUpperCase(),type);}  }
class C{  private boolean retryAfter511Error(){  if (mRetryAfter511ErrorCount < HttpsProvisioningUtils.RETRY_AFTER_511_ERROR_MAX_COUNT) {    mRetryAfter511ErrorCount++;    HttpsProvisioningService.startRetryAlarm(mCtx,mRetryIntent,HttpsProvisioningUtils.RETRY_AFTER_511_ERROR_TIMEOUT);    if (sLogger.isActivated()) {      sLogger.debug("Retry after 511 error (" + mRetryAfter511ErrorCount + "/"+ HttpsProvisioningUtils.RETRY_AFTER_511_ERROR_MAX_COUNT+ ") provisioning after "+ HttpsProvisioningUtils.RETRY_AFTER_511_ERROR_TIMEOUT+ "ms");    }    return true;  }  if (sLogger.isActivated()) {    sLogger.debug("No more retry after 511 error for provisioning");  }  mRetryAfter511ErrorCount=0;  return false;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("properties") @Valid Properties properties,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    Process parentProcess=processDAO.get(properties.getProcessId());    if (parentProcess.getProcess() != null)     processDAO.securityCheck(parentProcess.getProcess().getProcessId(),principal.getName(),WRITE); else     processDAO.securityCheck(properties.getProcessId(),principal.getName(),WRITE);    com.wipro.ats.bdre.md.dao.jpa.Properties insertProperties=new com.wipro.ats.bdre.md.dao.jpa.Properties();    PropertiesId propertiesId=new PropertiesId();    propertiesId.setPropKey(properties.getKey());    propertiesId.setProcessId(properties.getProcessId());    insertProperties.setId(propertiesId);    Process process=new Process();    process.setProcessId(properties.getProcessId());    insertProperties.setProcess(process);    insertProperties.setConfigGroup(properties.getConfigGroup());    insertProperties.setPropValue(properties.getValue());    insertProperties.setDescription(properties.getDescription());    propertiesDAO.insert(insertProperties);    restWrapper=new RestWrapper(properties,RestWrapper.OK);    LOGGER.info("Record with ID:" + properties.getProcessId() + " inserted in Properties by User:"+ principal.getName()+ properties);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static double selectExcludingZeros(final double[] arr,final int nonZeros,final int pivot){  if (pivot > nonZeros) {    return 0L;  }  int arrSize=arr.length;  int zeros=arrSize - nonZeros;  int adjK=(pivot + zeros) - 1;  return select(arr,0,arrSize - 1,adjK);}  }
class C{  private void checkDistanceFunction(SpatialPrimitiveDistanceFunction<? super O> distanceFunction){  if (!settings.distanceFunction.equals(distanceFunction)) {    throw new IllegalArgumentException("Parameter distanceFunction must be an instance of " + this.distanceQuery.getClass() + ", but is "+ distanceFunction.getClass());  }}  }
class C{  @Override public final void scrollTabToVisible(final int index){  if (myScrollableTabSupport == null || WRAP_TAB_LAYOUT == getTabLayoutPolicy()) {    return;  }  final TabbedPaneUI tabbedPaneUI=getUI();  Rectangle tabBounds=tabbedPaneUI.getTabBounds(this,index);  final int tabPlacement=getTabPlacement();  if (TOP == tabPlacement || BOTTOM == tabPlacement) {    if (tabBounds.x < 50) {      int leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();      while (leadingTabIndex != index && leadingTabIndex > 0 && tabBounds.x < 50) {        myScrollableTabSupport.setLeadingTabIndex(leadingTabIndex - 1);        leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();        tabBounds=tabbedPaneUI.getTabBounds(this,index);      }    } else     if (tabBounds.x + tabBounds.width > getWidth() - 50) {      int leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();      while (leadingTabIndex != index && leadingTabIndex < getTabCount() - 1 && tabBounds.x + tabBounds.width > getWidth() - 50) {        myScrollableTabSupport.setLeadingTabIndex(leadingTabIndex + 1);        leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();        tabBounds=tabbedPaneUI.getTabBounds(this,index);      }    }  } else {    if (tabBounds.y < 30) {      int leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();      while (leadingTabIndex != index && leadingTabIndex > 0 && tabBounds.y < 30) {        myScrollableTabSupport.setLeadingTabIndex(leadingTabIndex - 1);        leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();        tabBounds=tabbedPaneUI.getTabBounds(this,index);      }    } else     if (tabBounds.y + tabBounds.height > getHeight() - 30) {      int leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();      while (leadingTabIndex != index && leadingTabIndex < getTabCount() - 1 && tabBounds.y + tabBounds.height > getHeight() - 30) {        myScrollableTabSupport.setLeadingTabIndex(leadingTabIndex + 1);        leadingTabIndex=myScrollableTabSupport.getLeadingTabIndex();        tabBounds=tabbedPaneUI.getTabBounds(this,index);      }    }  }}  }
class C{  ShowDialog(JFrame frame){  innerFrame=frame;}  }
class C{  public void removeSelectionListener(SelectionListener listener){  checkWidget();  if (listener == null)   SWT.error(SWT.ERROR_NULL_ARGUMENT);  removeListener(SWT.Selection,listener);  removeListener(SWT.DefaultSelection,listener);}  }
class C{  private static AnswerInlineQuery converteResultsToResponse(InlineQuery inlineQuery,List<RaeService.RaeResult> results){  AnswerInlineQuery answerInlineQuery=new AnswerInlineQuery();  answerInlineQuery.setInlineQueryId(inlineQuery.getId());  answerInlineQuery.setCacheTime(CACHETIME);  answerInlineQuery.setResults(convertRaeResults(results));  return answerInlineQuery;}  }
class C{  public int resolveEnd(SAMSequenceDictionary dict){  final int sequenceLength=dict.getSequence(getSequenceName()).getSequenceLength();  return (getEnd() == MISSING) ? sequenceLength : getEnd();}  }
class C{  public void findMinAndMaxVals(){  double[] data;  double min=Double.MAX_VALUE;  double max=-Double.MAX_VALUE;  double z;  for (int row=0; row < numberRows; row++) {    data=getRowValues(row);    for (int col=0; col < numberColumns; col++) {      z=data[col];      if (z != noDataValue) {        if (z < min) {          min=z;        }        if (z > max) {          max=z;        }      }    }  }  maximumValue=max;  minimumValue=min;}  }
class C{  public void register(){  register(XTIFF.COMPRESSION_LZW);}  }
class C{  public GuacamoleServerException(String message,Throwable cause){  super(message,cause);}  }
class C{  private static URI url(String path){  return URI.create("http://localhost:9999/bigdata" + path);}  }
class C{  public void stream(OutputStream os,HeadersAmp headers,String from,long qId,String address,String methodName,PodRef podCaller,ResultStream<?> result,Object[] args) throws IOException {  init(os);  OutH3 out=_out;  if (out == null) {    return;  }  if (log.isLoggable(Level.FINEST)) {    log.finest("hamp-stream-w " + methodName + (args != null ? Arrays.asList(args) : "[]")+ " {to:"+ address+ ", from:"+ from+ "}");  }  out.writeLong(MessageTypeHamp.STREAM.ordinal());  writeHeaders(out,headers);  writeFromAddress(out,from);  out.writeLong(qId);  writeMethod(out,address,methodName,podCaller);  out.writeObject(result);  writeArgs(out,args);  out.flush();}  }
class C{  public SummonPetScroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  private void attachToRelation(Database database,Relation<?> r,TIntArrayList assignment,ArrayList<String> name){  DBIDs ids=r.getDBIDs();  if (!(ids instanceof ArrayDBIDs)) {    throw new AbortException("External clusterings can only be used with static DBIDs.");  }  TIntIntMap sizes=new TIntIntHashMap();  for (TIntIterator it=assignment.iterator(); it.hasNext(); ) {    sizes.adjustOrPutValue(it.next(),1,1);  }  TIntObjectHashMap<ArrayModifiableDBIDs> cids=new TIntObjectHashMap<>(sizes.size());  for (TIntIntIterator it=sizes.iterator(); it.hasNext(); ) {    it.advance();    cids.put(it.key(),DBIDUtil.newArray(it.value()));  }{    DBIDArrayIter it=((ArrayDBIDs)ids).iter();    for (int i=0; i < assignment.size(); i++) {      cids.get(assignment.get(i)).add(it.seek(i));    }  }  String nam=FormatUtil.format(name," ");  String snam=nam.toLowerCase().replace(' ','-');  Clustering<ClusterModel> result=new Clustering<>(nam,snam);  for (TIntObjectIterator<ArrayModifiableDBIDs> it=cids.iterator(); it.hasNext(); ) {    it.advance();    boolean noise=it.key() < 0;    result.addToplevelCluster(new Cluster<>(it.value(),noise,ClusterModel.CLUSTER));  }  database.getHierarchy().add(r,result);}  }
class C{  public static int[] subarray(final int[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return ArrayUtils.EMPTY_INT_ARRAY;  }  int[] subarray=new int[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.700 -0500",hash_original_method="1AF1C4539078F536A57F5CC0E82C2CE1",hash_generated_method="E8BD1E6F807FEECBD8C5F138BED93963") private ProfileSyncState(){}  }
class C{  public SolrQuery addFacetPivotField(String... fields){  add(FacetParams.FACET_PIVOT,fields);  this.set(FacetParams.FACET,true);  return this;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:30.754 -0500",hash_original_method="313D4989F4A5423E3CAD270FA74FCE9F",hash_generated_method="D82190EFFD443E9437BE5E85D9A18C7A") private void onSignalStrengthResult(AsyncResult ar){  SignalStrength oldSignalStrength=mSignalStrength;  int rssi=99;  int lteSignalStrength=-1;  int lteRsrp=-1;  int lteRsrq=-1;  int lteRssnr=-1;  int lteCqi=-1;  if (ar.exception != null) {    setSignalStrengthDefaultValues();  } else {    int[] ints=(int[])ar.result;    if (ints.length != 0) {      rssi=ints[0];      lteSignalStrength=ints[7];      lteRsrp=ints[8];      lteRsrq=ints[9];      lteRssnr=ints[10];      lteCqi=ints[11];    } else {      loge("Bogus signal strength response");      rssi=99;    }  }  mSignalStrength=new SignalStrength(rssi,-1,-1,-1,-1,-1,-1,lteSignalStrength,lteRsrp,lteRsrq,lteRssnr,lteCqi,true);  if (!mSignalStrength.equals(oldSignalStrength)) {    try {      phone.notifySignalStrength();    } catch (    NullPointerException ex) {      log("onSignalStrengthResult() Phone already destroyed: " + ex + "SignalStrength not notified");    }  }}  }
class C{  public static boolean toBooleanValue(Boolean b){  return b.booleanValue();}  }
class C{  static void e(String msg){  log(Log.ERROR,DEFAULT_TAG,msg);}  }
class C{  public void addTable(Table table){  tables.add(table);}  }
class C{  @Override public boolean resizeFromLayer(){  return this.resizeFromLayer(null);}  }
class C{  private static boolean singleDayEvent(long startMillis,long endMillis,long localGmtOffset){  if (startMillis == endMillis) {    return true;  }  int startDay=Time.getJulianDay(startMillis,localGmtOffset);  int endDay=Time.getJulianDay(endMillis - 1,localGmtOffset);  return startDay == endDay;}  }
class C{  @Override public int hashCode(){  return this.name.hashCode();}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>OperatorSwitchThenUnsubscribe<T> instance(boolean delayError){  if (delayError) {    return (OperatorSwitchThenUnsubscribe<T>)HolderDelayError.INSTANCE;  }  return (OperatorSwitchThenUnsubscribe<T>)Holder.INSTANCE;}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  private JSONObject moveFile(File srcFile,File destFile) throws IOException, JSONException, InvalidModificationException {  if (destFile.exists() && destFile.isDirectory()) {    throw new InvalidModificationException("Can't rename a file to a directory");  }  if (!srcFile.renameTo(destFile)) {    copyAction(srcFile,destFile);    if (destFile.exists()) {      srcFile.delete();    } else {      throw new IOException("moved failed");    }  }  return makeEntryForFile(destFile);}  }
class C{  public final Instance instance(int index){  return (Instance)m_Instances.elementAt(index);}  }
class C{  public void testDoConfigureSetsDefaultAdminServer() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(WebLogicPropertySet.SERVER),"//weblogic:admin-server-name",config);}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public static int typecode(Type type){switch (type.getTag()) {case BYTE:    return BYTEcode;case SHORT:  return SHORTcode;case CHAR:return CHARcode;case INT:return INTcode;case LONG:return LONGcode;case FLOAT:return FLOATcode;case DOUBLE:return DOUBLEcode;case BOOLEAN:return BYTEcode;case VOID:return VOIDcode;case CLASS:case ARRAY:case METHOD:case BOT:case TYPEVAR:case UNINITIALIZED_THIS:case UNINITIALIZED_OBJECT:return OBJECTcode;default :throw new AssertionError("typecode " + type.getTag());}}  }
class C{  private static void generatePopResult(ClassFileWriter cfw,Class<?> retType){  if (retType.isPrimitive()) {    String typeName=retType.getName();switch (typeName.charAt(0)) {case 'b':case 'c':case 's':case 'i':case 'z':      cfw.add(ByteCode.IRETURN);    break;case 'l':  cfw.add(ByteCode.LRETURN);break;case 'f':cfw.add(ByteCode.FRETURN);break;case 'd':cfw.add(ByteCode.DRETURN);break;}} else {cfw.add(ByteCode.ARETURN);}}  }
class C{  public boolean isSubmissionEntireForm(){  IDataReference sub=getSubmissionDataReference();  return (getInstance().resolveReference(sub) == null);}  }
class C{  public byte[] decode(final byte[] array) throws IllegalArgumentException {  return decodeHex(new String(array,getCharset()).toCharArray());}  }
class C{  public static IndirectCall findIndirectCall(final Debugger debugger,final List<IndirectCall> indirectCallAddresses,final BigInteger callAddress){  for (  final IndirectCall indirectCall : indirectCallAddresses) {    final Module module=indirectCall.getModule();    final Address address=indirectCall.getAddress();    final Address rebasedAddress=debugger.toImagebase(module,address);    if (rebasedAddress.equals(new Address(callAddress))) {      return indirectCall;    }  }  return null;}  }
class C{  public static SQLException create(String message,Throwable cause){  SQLException sqlException=new SQLException(message);  sqlException.initCause(cause);  return sqlException;}  }
class C{  void generateLeafNodeList(){  this.heightLimit=this.trunkSize + this.crownSize;  this.height=(int)((double)this.heightLimit * this.heightAttenuation);  if (this.height >= this.heightLimit) {    this.height=this.heightLimit - 1;  }  int i=(int)(1.382D + Math.pow(this.leafDensity * (double)this.heightLimit / 13.0D,2.0D));  if (i < 1) {    i=1;  }  int j=this.basePos.getY() + this.height;  int k=this.heightLimit - this.leafDistanceLimit;  this.field_175948_j=Lists.<TreeRTGQuercusRobur.FoliageCoordinates>newArrayList();  this.field_175948_j.add(new TreeRTGQuercusRobur.FoliageCoordinates(this.basePos.up(k),j));  for (; k >= 0; --k) {    float f=this.layerSize(k);    if (f >= 0.0F) {      for (int l=0; l < i; ++l) {        double d0=this.scaleWidth * (double)f * ((double)this.rand.nextFloat() + 0.328D);        double d1=(double)(this.rand.nextFloat() * 2.0F) * Math.PI;        double d2=d0 * Math.sin(d1) + 0.5D;        double d3=d0 * Math.cos(d1) + 0.5D;        BlockPos blockpos=this.basePos.add(d2,(double)(k - 1),d3);        BlockPos blockpos1=blockpos.up(this.leafDistanceLimit);        if (this.checkBlockLine(blockpos,blockpos1) == -1) {          int i1=this.basePos.getX() - blockpos.getX();          int j1=this.basePos.getZ() - blockpos.getZ();          double d4=(double)blockpos.getY() - Math.sqrt((double)(i1 * i1 + j1 * j1)) * this.branchSlope;          int k1=d4 > (double)j ? j : (int)d4;          BlockPos blockpos2=new BlockPos(this.basePos.getX(),k1,this.basePos.getZ());          if (this.checkBlockLine(blockpos2,blockpos) == -1) {            this.field_175948_j.add(new TreeRTGQuercusRobur.FoliageCoordinates(blockpos,blockpos2.getY()));          }        }      }    }  }}  }
class C{  public title removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public boolean isStatic(){  return static_;}  }
class C{  void sendNextItem(){  if (!mRunButton.isSelected()) {    return;  }  if (mNextSequenceElement >= MAXSEQUENCE) {    mNextSequenceElement=0;  }  if (mUseField[mNextSequenceElement].isSelected()) {    CanMessage m=createPacket(mPacketField[mNextSequenceElement].getText());    tc.sendCanMessage(m,this);    startSequenceDelay();  } else {    mNextSequenceElement++;    sendNextItem();  }}  }
class C{  public boolean isReplicated(){  Object oo=get_Value(COLUMNNAME_IsReplicated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void test_addPathToNameLintLbyte_array2() throws Exception {  TestUtils.initCertPathSSCertChain();  setupEnvironment();  byte[] bytes, bytesName;  bytes=new byte[]{-127,8,56,50,50,46,78,97,109,101};  bytesName=new byte[]{22,8,56,50,50,46,78,97,109,101};  bytes[bytes.length - 3]=(byte)200;  try {    theCertSelector.addPathToName(1,bytes);  } catch (  IOException e) {  }  theCertSelector.setPathToNames(null);  theCertSelector.addPathToName(1,bytesName);  assertNotNull(theCertSelector.getPathToNames());  CertPath p=buildCertPath();  assertNull(p);  theCertSelector.setPathToNames(null);  theCertSelector.addPathToName(4,TestUtils.rootCertificateSS.getIssuerX500Principal().getEncoded());  assertNotNull(theCertSelector.getPathToNames());  p=TestUtils.buildCertPathSSCertChain();  assertNotNull(p);}  }
class C{  static public String attrib(final String s){  return HTMLUtility.escapeForXHTML(s);}  }
class C{  public void showException(Exception e){  showException(e.getMessage(),e);}  }
class C{  public PcdRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public void resetSession(){  builder.resetSession();}  }
class C{  void probeForLineRecords(ActionList list,ActionLocation where,DSwfInfo info){  int size=list.size();  for (int i=0; i < size; i++) {    try {      where.at=i;      where.actions=list;      Action a=list.getAction(i);      if ((a.code == ActionConstants.sactionDefineFunction) || (a.code == ActionConstants.sactionDefineFunction2)) {        where.function=(DefineFunction)a;        probeForLineRecords(((DefineFunction)a).actionList,where,info);        where.function=null;      } else       if (a.code == ActionList.sactionLineRecord) {        info.processLineRecord(where,(LineRecord)a);      } else       if (a instanceof DummyAction) {        where.className=((DummyAction)a).getClassName();        probeForLineRecords(((DummyAction)a).getActionList(),where,info);        where.className=null;      }    } catch (    Exception e) {      if (Trace.error) {        Trace.trace("Error processing ActionList at " + where.at + " at offset "+ where.actions.getOffset(where.at)+ " in swf "+ info.getUrl());        e.printStackTrace();      }    }  }}  }
class C{  public void sleepMillis(final long millis){  try {    Thread.sleep(millis);  } catch (  final InterruptedException e) {    logger.error(e,e);  }}  }
class C{  public void testDoubleValuePositiveInfinity1(){  byte[] a={-1,-1,-1,-1,-1,-1,-1,-8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == Double.POSITIVE_INFINITY);}  }
class C{  private boolean invokeJavadoc(Batch batch,long batchID){  List<String> javadocArgs=new ArrayList<String>();  javadocArgs.add("-private");  javadocArgs.add("-Xclasses");  if (batch.verbose) {    javadocArgs.add("-verbose");  }  if (batch.bootClassPath != null) {    javadocArgs.add("-bootclasspath");    javadocArgs.add(batch.bootClassPath);  }  if (batch.extDirs != null) {    javadocArgs.add("-extdirs");    javadocArgs.add(batch.extDirs);  }  if (batch.classPath != null) {    javadocArgs.add("-classpath");    javadocArgs.add(batch.classPath);  }  javadocArgs.add("-batchID");  javadocArgs.add(Long.toString(batchID));  Set<String> classNames=new HashSet<String>();  for (  Generator gen : batch.generators) {    classNames.addAll(gen.bootstrapClassNames());  }  classNames.addAll(batch.classes);  for (  String s : classNames) {    javadocArgs.add(s);  }  int status=com.sun.tools.javadoc.Main.execute(program,new PrintWriter(out,true),new PrintWriter(out,true),new PrintWriter(out,true),this.getClass().getName(),javadocArgs.toArray(new String[javadocArgs.size()]));  return status == 0;}  }
class C{  public static void v(String msg,Throwable cause){  if (BuildConfig.DEBUG) {    Log.v(LOG_TAG,msg,cause);  }}  }
class C{  public static String[] split(String value){  return splitList.split(value.trim(),0);}  }
class C{  public int size(){  return m_keys.size();}  }
class C{  public MaterialEditText wordCountColor(int color){  mWordCountColor=color;  mWordCount.setTextColor(mWordCountColor);  return this;}  }
class C{  public void info(Throwable throwable,String msg,Object arg0){  innerLog(Level.INFO,throwable,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
