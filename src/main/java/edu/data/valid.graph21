class C{  public double board_to_screen_angle(double p_angle){  double result=p_angle + rotation_radiants;  if (mirror_left_right) {    result=Math.PI - result;  }  if (mirror_top_bottom) {    result=-result;  }  while (result >= 2 * Math.PI) {    result-=2 * Math.PI;  }  while (result < 0) {    result+=2 * Math.PI;  }  return result;}  }
class C{  int[] updateLayoutArray(int[] oldArray,int offset,int nInserted){  int n=getViewCount();  int[] newArray=new int[n];  System.arraycopy(oldArray,0,newArray,0,offset);  System.arraycopy(oldArray,offset,newArray,offset + nInserted,n - nInserted - offset);  return newArray;}  }
class C{  @Inject public CreateApplication(ApplicationServiceFactory applicationServiceFactory){  super(applicationServiceFactory);}  }
class C{  public static byte[] compress(byte[] data,int width,int height){  CCITTG4Encoder g4=new CCITTG4Encoder(width);  g4.fax4Encode(data,0,g4.rowbytes * height);  return g4.close();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.ObjectElement createObjectElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.ObjectElementImpl();}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ContentDispositionParser.parse");  try {    headerName(TokenTypes.CONTENT_DISPOSITION);    ContentDisposition cd=new ContentDisposition();    cd.setHeaderName(SIPHeaderNames.CONTENT_DISPOSITION);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    cd.setDispositionType(token.getTokenValue());    this.lexer.SPorHT();    super.parse(cd);    this.lexer.SPorHT();    this.lexer.match('\n');    return cd;  } catch (  ParseException ex) {    throw createParseException(ex.getMessage());  } finally {    if (debug)     dbg_leave("ContentDispositionParser.parse");  }}  }
class C{  public SQLNonTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  protected boolean isServiced(String name) throws Exception {  String[] params={name};  String[] signature={"java.lang.String"};  Boolean result=(Boolean)mBeanServer.invoke(oname,"isServiced",params,signature);  return result.booleanValue();}  }
class C{  private static Map<String,String> parseEnvList(List<String> list){  Map<String,String> map=new HashMap<>();  if ((list == null) || (list.isEmpty())) {    return map;  }  for (  String val : list) {    if (debug.messageEnabled()) {      debug.message("SAML2Utils.parseEnvList : processing " + val);    }    if ((val == null) || (val.length() == 0)) {      continue;    }    int pos=val.indexOf("=");    if (pos == -1) {      if (debug.warningEnabled()) {        debug.warning("SAML2Utils.parseEnvList : invalid value : " + val + ". Value must be in key=value format.");      }    } else {      map.put(val.substring(0,pos),val.substring(pos + 1));    }  }  return map;}  }
class C{  public void popCurrentMatched(){  m_currentMatchTemplates.pop();  m_currentMatchedNodes.pop();}  }
class C{  public Mp4AtomTree(RandomAccessFile raf) throws IOException, CannotReadException {  buildTree(raf,true);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  String currentRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  try {    if (reconstructPolicy()) {      forwardTo();    } else {      CachedPolicy cachedPolicy=getCachedPolicy();      PolicyModel model=(PolicyModel)getModel();      String name=cachedPolicy.getPolicy().getName();      if (name.equals(model.getLocalizedString("policy.create.name"))) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("policy.name.change"));        forwardTo();      } else {        try {          model.createPolicy(currentRealm,cachedPolicy.getPolicy());          backTrail();          forwardToPolicyViewBean();        } catch (        AMConsoleException e) {          setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());          forwardTo();        }      }    }  } catch (  AMConsoleException e) {    redirectToStartURL();  }}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public FixedSetPrompt(String... fixedSet){  super();  this.fixedSet=Arrays.asList(fixedSet);}  }
class C{  public ByteBuffer convert(Tag tag,int padding) throws UnsupportedEncodingException {  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    Iterator<TagField> it=tag.getFields();    boolean processedArtwork=false;    while (it.hasNext()) {      TagField frame=it.next();      if (frame instanceof Mp4TagCoverField) {        if (processedArtwork) {        } else {          processedArtwork=true;          ByteArrayOutputStream covrDataBaos=new ByteArrayOutputStream();          try {            for (            TagField artwork : tag.getFields(FieldKey.COVER_ART)) {              covrDataBaos.write(((Mp4TagField)artwork).getRawContentDataOnly());            }          } catch (          KeyNotFoundException knfe) {            throw new RuntimeException("Unable to find COVERART Key");          }          byte[] data=covrDataBaos.toByteArray();          baos.write(Utils.getSizeBEInt32(Mp4BoxHeader.HEADER_LENGTH + data.length));          baos.write(Utils.getDefaultBytes(Mp4FieldKey.ARTWORK.getFieldName(),"ISO-8859-1"));          baos.write(data);        }      } else {        baos.write(frame.getRawContent());      }    }    ByteArrayOutputStream ilst=new ByteArrayOutputStream();    ilst.write(Utils.getSizeBEInt32(Mp4BoxHeader.HEADER_LENGTH + baos.size()));    ilst.write(Utils.getDefaultBytes(Mp4AtomIdentifier.ILST.getFieldName(),"ISO-8859-1"));    ilst.write(baos.toByteArray());    ByteBuffer buf=ByteBuffer.wrap(ilst.toByteArray());    buf.rewind();    return buf;  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public void testGetPublicKey() throws Exception {  Identity i=new IdentityStub("testGetPublicKey");  assertNull(i.getPublicKey());  PublicKey pk=new PublicKeyStub("kkk","Identity.testGetPublicKey",null);  i.setPublicKey(pk);  assertSame(pk,i.getPublicKey());}  }
class C{  public AMSearchResults searchOrganizations(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchOrganizations(wildcard,null,searchControl);}  }
class C{  public PriorityQueue(int initialCapacity){  this(initialCapacity,null);}  }
class C{  public AbandonedTrace(final AbandonedTrace parent){  init(parent);}  }
class C{  private String convertIntToIntString(int quoteParam){  String quoteParamString=(new Integer(quoteParam)).toString();  return quoteParamString;}  }
class C{  public void resetFilterPath(){  attribute=null;  modelFilter=null;  ruleFilter=null;  ruleFilterDataOld=null;}  }
class C{  private static ArrayList<Control> readControls(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();    ArrayList<Control> controls=new ArrayList<>();    while (reader.hasNextElement()) {      controls.add(readControl(reader));    }    reader.readEndSequence();    return controls;  } catch (  Exception e) {    LocalizableMessage message=ERR_LDAP_CONTROL_DECODE_CONTROLS_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }}  }
class C{  public AccessibleStateSet(){  states=null;}  }
class C{  private ZoneOffsetTransition[] findTransitionArray(int year){  Integer yearObj=year;  ZoneOffsetTransition[] transArray=lastRulesCache.get(yearObj);  if (transArray != null) {    return transArray;  }  ZoneOffsetTransitionRule[] ruleArray=lastRules;  transArray=new ZoneOffsetTransition[ruleArray.length];  for (int i=0; i < ruleArray.length; i++) {    transArray[i]=ruleArray[i].createTransition(year);  }  if (year < LAST_CACHED_YEAR) {    lastRulesCache.putIfAbsent(yearObj,transArray);  }  return transArray;}  }
class C{  public static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public SQLTransientException(String reason){  super(reason,null,0);}  }
class C{  public void runTest() throws Throwable {  Document newNode;  String newValue;  newNode=(Document)load("staff",true);  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  @Ignore("Takes too long") @Test() public void testAttack(){  TestECOracle oracle=new TestECOracle("secp256r1");  ICEAttacker attacker=new ICEAttacker(oracle);  attacker.attack();  BigInteger result=attacker.getResult();  System.out.println(result);  System.out.println(oracle.getComputer().getSecret());  assertEquals(oracle.getComputer().getSecret(),result);}  }
class C{  public static boolean areDnsEqual(String dn1,String dn2){  try {    LdapName name1=new LdapName(dn1);    LdapName name2=new LdapName(dn2);    return name1.equals(name2);  } catch (  Exception ignored) {    return false;  }}  }
class C{  public void handleException(ParseException ex,SIPMessage sipMessage,Class hdrClass,String header,String message) throws ParseException {  if (logger.isLoggingEnabled())   logger.logException(ex);  if ((hdrClass != null) && (hdrClass.equals(From.class) || hdrClass.equals(To.class) || hdrClass.equals(CSeq.class)|| hdrClass.equals(Via.class)|| hdrClass.equals(CallID.class)|| hdrClass.equals(ContentLength.class)|| hdrClass.equals(RequestLine.class)|| hdrClass.equals(StatusLine.class))) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("Encountered Bad Message \n" + sipMessage.toString());    }    String msgString=sipMessage.toString();    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {      if (mySock != null) {        if (logger.isLoggingEnabled(LogWriter.TRACE_ERROR)) {          logger.logError("Malformed mandatory headers: closing socket! :" + mySock.toString());        }        try {          mySock.close();        } catch (        IOException ie) {          if (logger.isLoggingEnabled(LogWriter.TRACE_ERROR)) {            logger.logError("Exception while closing socket! :" + mySock.toString() + ":"+ ie.toString());          }        }      }    }    throw ex;  } else {    sipMessage.addUnparsed(header);  }}  }
class C{  protected Rectangle calculateBBox(List<Point> points){  double minX=Double.MAX_VALUE;  double minY=Double.MAX_VALUE;  double maxX=-Double.MAX_VALUE;  double maxY=-Double.MAX_VALUE;  for (  Point p : points) {    minX=Math.min(p.getX(),minX);    minY=Math.min(p.getY(),minY);    maxX=Math.max(p.getX(),maxX);    maxY=Math.max(p.getY(),maxY);  }  return new Rectangle((float)minX,(float)minY,(float)(maxX - minX),(float)(maxY - minY));}  }
class C{  public Object clone(){  return this;}  }
class C{  public boolean isMixed(){  return bidiBase.isMixed();}  }
class C{  public RSASSAPSSparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  saltLength=DEFAULT_SALT_LENGTH;  trailerField=DEFAULT_TRAILER_FIELD;}  }
class C{  public long scheduledExecutionTime(){synchronized (this) {    if (headTask != null) {      return headTask.scheduledExecutionTime();    }  }  return -1;}  }
class C{  public String toString(){  if (userObject == null) {    return null;  } else {    return userObject.toString();  }}  }
class C{  public Boolean isAutoStopFileSizeEnabled(){  return autoStopFileSizeEnable;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.DSAKeyValueType createDSAKeyValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DSAKeyValueTypeImpl();}  }
class C{  public static MouseMotionListener remove(MouseMotionListener l,MouseMotionListener oldl){  return (MouseMotionListener)removeInternal(l,oldl);}  }
class C{  private X509Certificate[] cleanupCertChainAndFindTrustAnchors(X509Certificate[] chain,Set<TrustAnchor> trustAnchors){  X509Certificate[] original=chain;  int currIndex;  for (currIndex=0; currIndex < chain.length; currIndex++) {    boolean foundNext=false;    for (int nextIndex=currIndex + 1; nextIndex < chain.length; nextIndex++) {      if (chain[currIndex].getIssuerDN().equals(chain[nextIndex].getSubjectDN())) {        foundNext=true;        if (nextIndex != currIndex + 1) {          if (chain == original) {            chain=original.clone();          }          X509Certificate tempCertificate=chain[nextIndex];          chain[nextIndex]=chain[currIndex + 1];          chain[currIndex + 1]=tempCertificate;        }        break;      }    }    if (!foundNext) {      break;    }  }  int anchorIndex;  for (anchorIndex=0; anchorIndex <= currIndex; anchorIndex++) {    TrustAnchor trustAnchor=findTrustAnchorBySubjectAndPublicKey(chain[anchorIndex]);    if (trustAnchor != null) {      trustAnchors.add(trustAnchor);      break;    }  }  int chainLength=anchorIndex;  X509Certificate[] newChain=((chainLength == chain.length) ? chain : Arrays.copyOf(chain,chainLength));  if (trustAnchors.isEmpty()) {    TrustAnchor trustAnchor=findTrustAnchorByIssuerAndSignature(newChain[anchorIndex - 1]);    if (trustAnchor != null) {      trustAnchors.add(trustAnchor);    }  }  return newChain;}  }
class C{  public boolean isCancelled(){  return cancelled;}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("base64.input.not.properly.padded");    }  }}  }
class C{  public MemberName(Field fld){  this(fld,false);}  }
class C{  public void testDivideBigDecimalScaleRoundingModeHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=-51;  String b="74723342238476237823787879183470";  int bScale=45;  int newScale=3;  RoundingMode rm=RoundingMode.HALF_UP;  String c="50000260373164286401361913262100972218038099522752460421" + "05959924024355721031761947728703598332749334086415670525" + "3761096961.670";  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,newScale,rm);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",newScale,result.scale());}  }
class C{  public RADIUSServer(String host,int port){  this.host=host;  this.port=port;}  }
class C{  public void addShutdownListener(ShutdownListener listener,ShutdownPriority priority) throws IllegalMonitorStateException {  if (acquireValidLock()) {    try {      removeShutdownListener(listener);      listeners[priority.getIntValue() - 1].add(listener);    }  finally {      releaseLockAndNotify();    }  } else {    throw new IllegalMonitorStateException("Failed to acquire lock registering the ShutdownListener");  }}  }
class C{  public void notifyListeners() throws IdentityProviderServiceException {  for (  IdentityProviderListener listener : identityProviderListeners.values()) {    listener.identityProviderConfigChanged();  }}  }
class C{  public ServerException(String s,Exception ex){  super(s,ex);}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.ContactType createContactType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.ContactTypeImpl();}  }
class C{  private boolean handleTopologyCache(TopologyCache cache,UninstallUserData userData) throws UserDataException, ClientException {  boolean result=handleTopologyCache0(cache,userData);  logger.info(LocalizableMessage.raw("Return value: " + result));  return result;}  }
class C{  protected void loadChildren(ViewFactory f){  Document doc=getDocument();  int offs0=getStartOffset();  int offs1=getEndOffset();  append(createZone(offs0,offs1));  handleInsert(offs0,offs1 - offs0);}  }
class C{  protected static Map convertJAXBToAttrMap(String attrName,Object jaxbObj) throws JAXBException {  String xmlString=convertJAXBToString(jaxbObj);  Map attrs=new HashMap();  Set values=new HashSet();  values.add(xmlString);  attrs.put(attrName,values);  return attrs;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException, AMConsoleException {  FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);  backTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  @Deprecated public MapCursor addCursor(int x,int y,byte direction,byte type,boolean visible){  return addCursor(new MapCursor((byte)x,(byte)y,direction,type,visible));}  }
class C{  Object processQNAME(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  try {    QName qname=new QName(value,handler,true);    return qname;  } catch (  IllegalArgumentException ie) {    handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},ie);    return null;  }catch (  RuntimeException re) {    handleError(handler,XSLTErrorResources.INVALID_QNAME,new Object[]{name,value},re);    return null;  }}  }
class C{  protected Level(String name,int value,String resourceBundleName){  this(name,value,resourceBundleName,true);}  }
class C{  public Builder names(final String... names){  return names(Arrays.asList(names));}  }
class C{  public void close(){  sendMessage(new CloseWebsocketMessage());}  }
class C{  public static int twoBytesToInt(byte[] bytes) throws SAML2Exception {  if (bytes == null || bytes.length != 2) {    debug.error("SAML2Utils.twoBytesToInt: input is null or length is " + "not 2.");    throw new SAML2Exception(bundle.getString("wrontInput"));  }  String str0=Integer.toHexString(bytes[0]);  int len0=str0.length();  String norm0=null;  if (len0 > 2) {    norm0=str0.substring(len0 - 2,len0);  } else {    norm0=str0;  }  String str1=Integer.toHexString(bytes[1]);  int len1=str1.length();  String norm1=null;  if (len1 > 2) {    norm1=str1.substring(len1 - 2,len1);  } else   if (len1 == 1) {    norm1="0" + str1;  } else {    norm1=str1;  }  String wholeHexStr=norm0 + norm1;  int i=Integer.parseInt(wholeHexStr,16);  return i;}  }
class C{  private static byte[] hexStr2Bytes(String hex){  byte[] bArray=new BigInteger("10" + hex,16).toByteArray();  byte[] ret=new byte[bArray.length - 1];  for (int i=0; i < ret.length; i++)   ret[i]=bArray[i + 1];  return ret;}  }
class C{  private void safeDamageRange(int a0,int a1) throws BadLocationException {  Document doc=component.getDocument();  safeDamageRange(doc.createPosition(a0),doc.createPosition(a1));}  }
class C{  private boolean doAcquireSharedNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        long r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public RemoteHttpServletRequest(){  super();}  }
class C{  protected BeanContextEvent(BeanContext bc){  super(bc);}  }
class C{  public void printStackTrace(PrintStream printStream){  super.printStackTrace(printStream);}  }
class C{  public void create(Token token,ResultHandler<Token,?> handler) throws CoreTokenException {  Reject.ifNull(token);  try {    taskExecutor.execute(token.getTokenId(),taskFactory.create(token,handler));  } catch (  DataLayerException e) {    throw new CoreTokenException("Error in data layer",e);  }}  }
class C{  public void moveColumn(int columnIndex,int newIndex){  if ((columnIndex < 0) || (columnIndex >= getColumnCount()) || (newIndex < 0)|| (newIndex >= getColumnCount()))   throw new IllegalArgumentException("moveColumn() - Index out of range");  TableColumn aColumn;  if (columnIndex == newIndex) {    fireColumnMoved(new TableColumnModelEvent(this,columnIndex,newIndex));    return;  }  aColumn=tableColumns.elementAt(columnIndex);  tableColumns.removeElementAt(columnIndex);  boolean selected=selectionModel.isSelectedIndex(columnIndex);  selectionModel.removeIndexInterval(columnIndex,columnIndex);  tableColumns.insertElementAt(aColumn,newIndex);  selectionModel.insertIndexInterval(newIndex,1,true);  if (selected) {    selectionModel.addSelectionInterval(newIndex,newIndex);  } else {    selectionModel.removeSelectionInterval(newIndex,newIndex);  }  fireColumnMoved(new TableColumnModelEvent(this,columnIndex,newIndex));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditem.class,args);}  }
class C{  private boolean isRunningOnServer(ServerDescriptor server,Task task){  if (server.isLocal() && task.getServer().isLocal()) {    return true;  }  String host1=server.getHostname();  String host2=task.getServer().getHostname();  boolean isRunningOnServer=host1 != null ? host1.equalsIgnoreCase(host2) : host2 == null;  if (!isRunningOnServer) {    return false;  }  if (server.isLocal()) {    String path1=server.getInstancePath();    String path2=task.getServer().getInstancePath();    return Objects.equals(path1,path2);  }  int adminPort1=-1;  int adminPort2=-1;  if (server.getAdminConnector() != null) {    adminPort1=server.getAdminConnector().getPort();  }  if (getConnection() != null) {    adminPort2=getConnection().getHostPort().getPort();  }  return adminPort1 == adminPort2;}  }
class C{  public void cleanup(PdfCanvas cb){  int k=savedStates.size();  while (k-- > 0)   cb.restoreState();}  }
class C{  protected void reconcileIDs() throws SAXException {  if (!validateID)   return;  for (Iterator itr=IDREFs.entrySet().iterator(); itr.hasNext(); ) {    Map.Entry e=(Map.Entry)itr.next();    if (IDs.contains(e.getKey()))     continue;    ValidatableObject source=(ValidatableObject)e.getValue();    reportEvent(source,new NotIdentifiableEventImpl(ValidationEvent.ERROR,Messages.format(Messages.ID_NOT_FOUND,e.getKey()),new ValidationEventLocatorImpl(source)));  }  IDREFs.clear();}  }
class C{  private String outOfBoundsMsg(int index){  return "Index: " + index + ", Size: "+ size;}  }
class C{  public static void main(String[] args){  try {    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());  } catch (  Exception e) {  }  new Scanner();}  }
class C{  public SQLInvalidAuthorizationSpecException(Throwable cause){  super(cause);}  }
class C{  protected V create(K key){  return null;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem())   return;  String s=new String(ch,start,length);  append(m_doc.createTextNode(s));}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public TRANSACTION_MODE(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public URI(String p_scheme,String p_userinfo,String p_host,int p_port,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_SCHEME_REQUIRED,null));  }  if (p_host == null) {    if (p_userinfo != null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_USERINFO_IF_NO_HOST,null));    }    if (p_port != -1) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_PORT_IF_NO_HOST,null));    }  }  if (p_path != null) {    if (p_path.indexOf('?') != -1 && p_queryString != null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_QUERY_STRING_IN_PATH,null));    }    if (p_path.indexOf('#') != -1 && p_fragment != null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_FRAGMENT_STRING_IN_PATH,null));    }  }  setScheme(p_scheme);  setHost(p_host);  setPort(p_port);  setUserinfo(p_userinfo);  setPath(p_path);  setQueryString(p_queryString);  setFragment(p_fragment);}  }
class C{  public BindException(String detailMessage){  super(detailMessage);}  }
class C{  public PrintWriter(Writer out,boolean autoFlush){  super(out);  this.out=out;  this.autoFlush=autoFlush;  lineSeparator=java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction("line.separator"));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementNS05.class,args);}  }
class C{  public static final boolean isWhiteSpace(char ch){  if (ch > 0x20)   return false;  return ch == 0x9 || ch == 0xA || ch == 0xD || ch == 0x20;}  }
class C{  public EngineRuleSet(String prefix){  this.namespaceURI=null;  this.prefix=prefix;}  }
class C{  @Inject public XACMLExportImport(PrivilegeManagerFactory privilegeManagerFactory,XACMLReaderWriter xacmlReaderWriter,PrivilegeValidator privilegeValidator,SearchFilterFactory searchFilterFactory,@Named(XACMLConstants.DEBUG) Debug debug,ApplicationServiceFactory applicationServiceFactory,ResourceTypeService resourceTypeService){  this.privilegeManagerFactory=privilegeManagerFactory;  this.xacmlReaderWriter=xacmlReaderWriter;  this.searchFilterFactory=searchFilterFactory;  this.privilegeValidator=privilegeValidator;  this.debug=debug;  this.applicationServiceFactory=applicationServiceFactory;  this.resourceTypeService=resourceTypeService;}  }
class C{  public InvalidParameterSpecException(String msg){  super(msg);}  }
class C{  private GrizzlyUtils(){}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.PGPDataType createPGPDataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.PGPDataTypeImpl();}  }
class C{  @Deprecated public static String openUrl(String url,String method,Bundle params) throws MalformedURLException, IOException {  String strBoundary="3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f";  String endLine="\r\n";  OutputStream os;  if (method.equals("GET")) {    url=url + "?" + encodeUrl(params);  }  Utility.logd("Facebook-Util",method + " URL: " + url);  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();  conn.setRequestProperty("User-Agent",System.getProperties().getProperty("http.agent") + " FacebookAndroidSDK");  if (!method.equals("GET")) {    Bundle dataparams=new Bundle();    for (    String key : params.keySet()) {      Object parameter=params.get(key);      if (parameter instanceof byte[]) {        dataparams.putByteArray(key,(byte[])parameter);      }    }    if (!params.containsKey("method")) {      params.putString("method",method);    }    if (params.containsKey("access_token")) {      String decoded_token=URLDecoder.decode(params.getString("access_token"));      params.putString("access_token",decoded_token);    }    conn.setRequestMethod("POST");    conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + strBoundary);    conn.setDoOutput(true);    conn.setDoInput(true);    conn.setRequestProperty("Connection","Keep-Alive");    conn.connect();    os=new BufferedOutputStream(conn.getOutputStream());    try {      os.write(("--" + strBoundary + endLine).getBytes());      os.write((encodePostBody(params,strBoundary)).getBytes());      os.write((endLine + "--" + strBoundary+ endLine).getBytes());      if (!dataparams.isEmpty()) {        for (        String key : dataparams.keySet()) {          os.write(("Content-Disposition: form-data; filename=\"" + key + "\""+ endLine).getBytes());          os.write(("Content-Type: content/unknown" + endLine + endLine).getBytes());          os.write(dataparams.getByteArray(key));          os.write((endLine + "--" + strBoundary+ endLine).getBytes());        }      }      os.flush();    }  finally {      os.close();    }  }  String response="";  try {    response=read(conn.getInputStream());  } catch (  FileNotFoundException e) {    response=read(conn.getErrorStream());  }  return response;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedataexceedslength.class,args);}  }
class C{  public void processAttributes(java.io.Writer writer,int nAttrs) throws IOException, SAXException {  String encoding=getEncoding();  for (int i=0; i < nAttrs; i++) {    final String name=m_attributes.getQName(i);    final String value=m_attributes.getValue(i);    writer.write(' ');    writer.write(name);    writer.write("=\"");    writeAttrString(writer,value,encoding);    writer.write('\"');  }}  }
class C{  public int hashCode(){  return m_transactionState;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!klazz.isInstance(obj)) {    return false;  }  Object handler=null;  if (Proxy.isProxyClass(obj.getClass()) && (handler=Proxy.getInvocationHandler(obj)) instanceof AnnotationFactory) {    AnnotationFactory other=(AnnotationFactory)handler;    if (elements.length != other.elements.length) {      return false;    }    next:     for (    AnnotationMember el1 : elements) {      for (      AnnotationMember el2 : other.elements) {        if (el1.equals(el2)) {          continue next;        }      }      return false;    }    return true;  } else {    for (    final AnnotationMember el : elements) {      if (el.tag == AnnotationMember.ERROR) {        return false;      }      try {        if (!el.definingMethod.isAccessible()) {          el.definingMethod.setAccessible(true);        }        Object otherValue=el.definingMethod.invoke(obj);        if (otherValue != null) {          if (el.tag == AnnotationMember.ARRAY) {            if (!el.equalArrayValue(otherValue)) {              return false;            }          } else {            if (!el.value.equals(otherValue)) {              return false;            }          }        } else         if (el.value != AnnotationMember.NO_VALUE) {          return false;        }      } catch (      Throwable e) {        return false;      }    }    return true;  }}  }
class C{  public RowSorterEvent(RowSorter source,Type type,int[] previousRowIndexToModel){  super(source);  if (type == null) {    throw new IllegalArgumentException("type must be non-null");  }  this.type=type;  this.oldViewToModel=previousRowIndexToModel;}  }
class C{  public ServerState(){  super();}  }
class C{  public void printError(String str){  buff.append(str);}  }
class C{  public void reset(){  this.count.set(0);  released=false;}  }
class C{  public ShapeTileOctagon bounding_octagon(PlaPointFloat[] p_point_arr){  double lx=Integer.MAX_VALUE;  double ly=Integer.MAX_VALUE;  double rx=Integer.MIN_VALUE;  double uy=Integer.MIN_VALUE;  double ulx=Integer.MAX_VALUE;  double lrx=Integer.MIN_VALUE;  double llx=Integer.MAX_VALUE;  double urx=Integer.MIN_VALUE;  for (int i=0; i < p_point_arr.length; ++i) {    PlaPointFloat curr=p_point_arr[i];    lx=Math.min(lx,curr.v_x);    ly=Math.min(ly,curr.v_y);    rx=Math.max(rx,curr.v_x);    uy=Math.max(uy,curr.v_y);    double tmp=curr.v_x - curr.v_y;    ulx=Math.min(ulx,tmp);    lrx=Math.max(lrx,tmp);    tmp=curr.v_x + curr.v_y;    llx=Math.min(llx,tmp);    urx=Math.max(urx,tmp);  }  ShapeTileOctagon surrounding_octagon=new ShapeTileOctagon((int)Math.floor(lx),(int)Math.floor(ly),(int)Math.ceil(rx),(int)Math.ceil(uy),(int)Math.floor(ulx),(int)Math.ceil(lrx),(int)Math.floor(llx),(int)Math.ceil(urx));  return surrounding_octagon;}  }
class C{  public synchronized void cancel(){  cancelled=true;  tasks.reset();  this.notify();}  }
class C{  public static boolean isJavaIdentifier(final String text){  return false;}  }
class C{  public RenderContext(AffineTransform usr2dev,Shape aoi,RenderingHints hints){  this.hints=hints;  this.aoi=aoi;  this.usr2dev=(AffineTransform)usr2dev.clone();}  }
class C{  public AttributedString(AttributedCharacterIterator text,int beginIndex,int endIndex){  this(text,beginIndex,endIndex,null);}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){  if (!e.isShutdown()) {    e.getQueue().poll();    e.execute(r);  }}  }
class C{  public InputSource resolveEntity(StylesheetHandler handler,String publicId,String systemId) throws org.xml.sax.SAXException {  return null;}  }
class C{  public void handleTblServerConfigXMLServerButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  String serverName=(String)getPageSessionAttribute(ServerEditViewBeanBase.PG_ATTR_SERVER_NAME);  ServerSiteModel model=(ServerSiteModel)getModel();  try {    ServerConfigXML xmlObj=model.getServerConfigObject(serverName);    ServerConfigXML.ServerGroup smsServerGroup=xmlObj.getSMSServerGroup();    CCActionTable table=(CCActionTable)getChild(TBL_SERVERS);    table.restoreStateData();    Integer[] selected=tblServerModel.getSelectedRows();    if (selected.length >= smsServerGroup.hosts.size()) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",model.getLocalizedString("exception.cannot,delete.all.servers"));    } else {      for (int i=selected.length - 1; i >= 0; --i) {        smsServerGroup.hosts.remove(selected[i].intValue());      }      model.setServerConfigXML(serverName,xmlObj.toXML());      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","serverconfig.updated");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public void logout(final Session session) throws SessionException {  sessionOperationStrategy.getOperation(session.getSessionID()).logout(session);}  }
class C{  public boolean isLoginTimeout(long lastCallbackSent,long timeout){  long now=currentTimeMillis();  long timeoutVal=lastCallbackSent + (timeout - 3) * 1000;  return (timeoutVal < now);}  }
class C{  private boolean isImplicitImport(String name){  Boolean yes=implicitImports.get(name);  if (yes != null) {    return yes;  }  try {    Class.forName("java.lang." + name);    yes=true;  } catch (  Exception e) {    yes=false;  }  implicitImports.put(name,yes);  return yes;}  }
class C{  Object findNextMatch(String substring){  int max=list.size();  if (max == 0) {    return null;  }  int counter=index;  do {    Object value=list.get(counter);    String string=value.toString();    if (string != null && string.startsWith(substring)) {      return value;    }    counter=(counter + 1) % max;  } while (counter != index);  return null;}  }
class C{  private void doGetPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String classMethod="CookieWriterServlet.doGetPost: ";  preferred_cookie_name=CookieUtils.getPreferCookieName(request.getRequestURI());  if (preferred_cookie_name == null) {    CookieUtils.debug.error(classMethod + "The request uri is null.");    CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"nullRequestUri",CookieUtils.bundle.getString("nullRequestUri"));    return;  } else   if (preferred_cookie_name.equals("")) {    CookieUtils.debug.error(classMethod + "Cannot match the cookie name from " + "the request uri.");    CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"invalidRequestUri",CookieUtils.bundle.getString("invalidRequestUri"));    return;  }  if (CookieUtils.debug.messageEnabled()) {    CookieUtils.debug.message(classMethod + "Preferred Cookie Name is " + preferred_cookie_name);  }  try {    if (INTRODUCTION_COOKIE_TYPE == null || INTRODUCTION_COOKIE_TYPE.trim().length() <= 0) {      if (CookieUtils.debug.messageEnabled()) {        CookieUtils.debug.message(classMethod + "Cookie type is null, set to persistent.");      }      INTRODUCTION_COOKIE_TYPE=IDPDiscoveryConstants.PERSISTENT_COOKIE;    }    if (INTRODUCTION_URL_SCHEME == null || INTRODUCTION_URL_SCHEME.trim().length() <= 0) {      if (CookieUtils.debug.messageEnabled()) {        CookieUtils.debug.message(classMethod + "URL Scheme is null, set to https.");      }      INTRODUCTION_URL_SCHEME=IDPDiscoveryConstants.HTTPS;    }    boolean isValidReturn=false;    String returnURL=request.getParameter(IDPDiscoveryConstants.LRURL);    if (returnURL == null || returnURL.trim().length() <= 0) {      CookieUtils.debug.error(classMethod + "Redirect URL not specified. " + "Cannot reset Preferred IDP cookie.");      isValidReturn=false;    } else {      isValidReturn=true;    }    String providerId=request.getParameter(preferred_cookie_name);    if (providerId == null || providerId.trim().length() <= 0) {      CookieUtils.debug.error(classMethod + "Provider Id not in request, " + "Cannot reset preferred idp.");      if (isValidReturn) {        response.sendRedirect(returnURL);      } else {        CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"noRedirectionURL",CookieUtils.bundle.getString("noRedirectionURL"));      }      return;    }    String cookieValue=CookieUtils.getCookieValueFromReq(request,preferred_cookie_name);    boolean bIsSAML2=CookieUtils.isSAML2(request);    if (cookieValue == null || cookieValue.trim().length() <= 0) {      if (CookieUtils.debug.messageEnabled()) {        CookieUtils.debug.message(classMethod + "Preferred IDP Cookie Not found");      }      cookieValue=Base64.encode(generateSuccinctID(providerId,bIsSAML2));    } else {      cookieValue=resetPreferredIDPCookie(cookieValue,providerId,bIsSAML2);    }    if (CookieUtils.debug.messageEnabled()) {      CookieUtils.debug.message(classMethod + "Cookie Type is " + INTRODUCTION_COOKIE_TYPE);      CookieUtils.debug.message(classMethod + "Cookie value is " + cookieValue);      CookieUtils.debug.message(classMethod + "Preferred Cookie Name " + preferred_cookie_name);    }    int maxAge;    String domain=null;    if (!(INTRODUCTION_COOKIE_DOMAIN == null || INTRODUCTION_COOKIE_DOMAIN.length() < 1)) {      domain=INTRODUCTION_COOKIE_DOMAIN;    }    if (INTRODUCTION_COOKIE_TYPE.equalsIgnoreCase(IDPDiscoveryConstants.SESSION_COOKIE)) {      maxAge=IDPDiscoveryConstants.SESSION_COOKIE_AGE;    } else {      maxAge=IDPDiscoveryConstants.PERSISTENT_COOKIE_AGE;    }    Cookie idpListCookie=CookieUtils.newCookie(preferred_cookie_name,cookieValue,maxAge,"/",domain);    CookieUtils.addCookieToResponse(response,idpListCookie);    if (isValidReturn) {      if (CookieUtils.debug.messageEnabled()) {        CookieUtils.debug.message(classMethod + "Redirect to " + returnURL);      }      response.sendRedirect(returnURL);    } else {      if (CookieUtils.debug.messageEnabled()) {        CookieUtils.debug.message(classMethod + "No return URL. " + "Set preferred IDP cookie and "+ "return error page");      }      CookieUtils.sendError(request,response,response.SC_INTERNAL_SERVER_ERROR,"noRedirectionURL",CookieUtils.bundle.getString("noRedirectionURL"));    }    return;  } catch (  IOException e) {    CookieUtils.debug.error(classMethod,e);  }}  }
class C{  @Override public boolean isField2(){  return _foo.isField2();}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof HOTPPrincipal)) {    return false;  }  HOTPPrincipal that=(HOTPPrincipal)o;  if (this.getName().equals(that.getName())) {    return true;  }  return false;}  }
class C{  public static String generateCQLStatementForInsert(Index index){  String iTableToUpdate=Utils.calculateITableName(index);  List<String> fields=index.getFieldsValues();  String fieldNamesInsertSyntax=Utils.join(", ",fields);  StringBuilder fieldValueInsertSyntax=new StringBuilder();  for (int i=0; i < fields.size(); i++) {    if (i != 0) {      fieldValueInsertSyntax.append(", ");    }    fieldValueInsertSyntax.append("?");  }  return String.format(ITABLE_INSERT_CQL,iTableToUpdate,fieldNamesInsertSyntax,fieldValueInsertSyntax);}  }
class C{  public ContentModelState(ContentModel model){  this(model,null,0);}  }
class C{  protected String deserializeSessionId(byte[] data) throws IOException {  ReplicationStream ois=getReplicationStream(data);  String sessionId=ois.readUTF();  ois.close();  return sessionId;}  }
class C{  public void toLDIF(StringBuilder buffer,int wrapColumn){  String dnString;  int colsRemaining;  if (needsBase64Encoding(dn)) {    dnString=Base64.encode(dn);    buffer.append("dn:: ");    colsRemaining=wrapColumn - 5;  } else {    dnString=dn.toString();    buffer.append("dn: ");    colsRemaining=wrapColumn - 4;  }  int dnLength=dnString.length();  if (dnLength <= colsRemaining || colsRemaining <= 0) {    buffer.append(dnString);    buffer.append(EOL);  } else {    buffer.append(dnString,0,colsRemaining);    buffer.append(EOL);    int startPos=colsRemaining;    while (dnLength - startPos > wrapColumn - 1) {      buffer.append(" ");      buffer.append(dnString,startPos,startPos + wrapColumn - 1);      buffer.append(EOL);      startPos+=wrapColumn - 1;    }    if (startPos < dnLength) {      buffer.append(" ");      buffer.append(dnString.substring(startPos));      buffer.append(EOL);    }  }  for (  RawAttribute a : attributes) {    String name=a.getAttributeType();    int nameLength=name.length();    for (    ByteString v : a.getValues()) {      String valueString;      if (needsBase64Encoding(v)) {        valueString=Base64.encode(v);        buffer.append(name);        buffer.append(":: ");        colsRemaining=wrapColumn - nameLength - 3;      } else {        valueString=v.toString();        buffer.append(name);        buffer.append(": ");        colsRemaining=wrapColumn - nameLength - 2;      }      int valueLength=valueString.length();      if (valueLength <= colsRemaining || colsRemaining <= 0) {        buffer.append(valueString);        buffer.append(EOL);      } else {        buffer.append(valueString,0,colsRemaining);        buffer.append(EOL);        int startPos=colsRemaining;        while (valueLength - startPos > wrapColumn - 1) {          buffer.append(" ");          buffer.append(valueString,startPos,startPos + wrapColumn - 1);          buffer.append(EOL);          startPos+=wrapColumn - 1;        }        if (startPos < valueLength) {          buffer.append(" ");          buffer.append(valueString.substring(startPos));          buffer.append(EOL);        }      }    }  }  buffer.append(EOL);}  }
class C{  private void renameThumb(){  File thumbDir=new File(configuration.getThumbsPath() + File.separator + type+ this.currentFolder);  File newThumbDir=new File(configuration.getThumbsPath() + File.separator + type+ this.newFolderPath);  thumbDir.renameTo(newThumbDir);}  }
class C{  public void replaceText(int startIndex,int endIndex,String s){  selectText(startIndex,endIndex);  JTextComponent.this.replaceSelection(s);}  }
class C{  public void store() throws AMException, SSOException {  Map attributes=modAttributes;  modAttributes=new HashMap();  try {    serviceConfig.setAttributes(attributes);  } catch (  ServiceNotFoundException ex) {    Object args[]={serviceName};    throw new AMException(AMSDKBundle.getString("481",args),"481",args);  }catch (  InvalidAttributeValueException ex) {    Object args[]=ex.getMessageArgs();    debug.error("Store exception from SMS: " + ex,ex);    throw new AMException(AMSDKBundle.getString("975",args),"975",args);  }catch (  SMSException ex) {    Object args[]={serviceName};    debug.error("Store exception from SMS: " + ex,ex);    throw new AMException(AMSDKBundle.getString("486",args),"486",args);  }}  }
class C{  public ConcurrentSkipListMap(SortedMap<K,? extends V> m){  this.comparator=m.comparator();  initialize();  buildFromSorted(m);}  }
class C{  public char current(){  if (pos >= begin && pos < end) {    return text.charAt(pos);  } else {    return DONE;  }}  }
class C{  public static boolean isValidPhone(String phone){  boolean isValidPhone=false;  Pattern pattern=Pattern.compile("^((13[0-9])|(17[^4,\\D])|(15[^4,\\D])|(18[0-9]))\\d{8}$");  isValidPhone=pattern.matcher(phone).matches();  return isValidPhone;}  }
class C{  public FrameBodyTPOS(){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  setObjectValue(DataTypes.OBJ_TEXT,new PartOfSet.PartOfSetValue());}  }
class C{  private boolean checkNameForm(NameForm nameForm,AcceptRejectWarn structuralPolicy,LocalizableMessageBuilder invalidReason){  RDN rdn=dn.rdn();  if (rdn != null) {    for (    AttributeType t : nameForm.getRequiredAttributes()) {      if (!rdn.hasAttributeType(t)) {        LocalizableMessage message=ERR_ENTRY_SCHEMA_RDN_MISSING_REQUIRED_ATTR.get(dn,t.getNameOrOID(),nameForm.getNameOrOID());        if (structuralPolicy == AcceptRejectWarn.REJECT) {          invalidReason.append(message);          return false;        } else         if (structuralPolicy == AcceptRejectWarn.WARN) {          logger.error(message);        }      }    }    for (    AVA ava : rdn) {      AttributeType t=ava.getAttributeType();      if (!nameForm.isRequiredOrOptional(t)) {        LocalizableMessage message=ERR_ENTRY_SCHEMA_RDN_DISALLOWED_ATTR.get(dn,t.getNameOrOID(),nameForm.getNameOrOID());        if (structuralPolicy == AcceptRejectWarn.REJECT) {          invalidReason.append(message);          return false;        } else         if (structuralPolicy == AcceptRejectWarn.WARN) {          logger.error(message);        }      }    }  }  return true;}  }
class C{  public void layoutContainer(Container parent){synchronized (parent.getTreeLock()) {    Insets insets=parent.getInsets();    int ncomponents=parent.getComponentCount();    Component comp=null;    boolean currentFound=false;    for (int i=0; i < ncomponents; i++) {      comp=parent.getComponent(i);      comp.setBounds(hgap + insets.left,vgap + insets.top,parent.width - (hgap * 2 + insets.left + insets.right),parent.height - (vgap * 2 + insets.top + insets.bottom));      if (comp.isVisible()) {        currentFound=true;      }    }    if (!currentFound && ncomponents > 0) {      parent.getComponent(0).setVisible(true);    }  }}  }
class C{  public void resetToPreferredSizes(){  SplitPaneUI ui=getUI();  if (ui != null) {    ui.resetToPreferredSizes(this);  }}  }
class C{  public void toggle(){  mButtonStyle=(mButtonStyle == STYLE_NEXT) ? STYLE_DONE : STYLE_NEXT;  setImageDrawable(mButtonStyle == STYLE_NEXT ? mNextDrawable : mDoneDrawable);  if (Utils.hasLollipop()) {    Drawable drawable=getDrawable();    if (drawable instanceof Animatable) {      Animatable animatable=(Animatable)drawable;      if (animatable.isRunning()) {        animatable.stop();      }      animatable.start();    }  }}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  public void paintSpinnerBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo updateFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return _fooLocalService.updateFoo(foo);}  }
class C{  @Deprecated public static ObjectId massageToObjectId(Object o){  if (o == null) {    return null;  }  if (o instanceof ObjectId) {    return (ObjectId)o;  }  if (o instanceof String) {    String s=o.toString();    if (isValid(s)) {      return new ObjectId(s);    }  }  return null;}  }
class C{  public static int countByUuid(java.lang.String uuid){  return getPersistence().countByUuid(uuid);}  }
class C{  public ResolutionSyntax(int crossFeedResolution,int feedResolution,int units){  if (crossFeedResolution < 1) {    throw new IllegalArgumentException("crossFeedResolution is < 1");  }  if (feedResolution < 1) {    throw new IllegalArgumentException("feedResolution is < 1");  }  if (units < 1) {    throw new IllegalArgumentException("units is < 1");  }  this.crossFeedResolution=crossFeedResolution * units;  this.feedResolution=feedResolution * units;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix10.class,args);}  }
class C{  ResourceIndex(ServiceType resourceType,ResourceManager resourceManager){  this.resourceType=resourceType;  this.resourceManager=resourceManager;}  }
class C{  private AST.Synchronized parse_synchronized() throws SyntaxException {  LineCol lineCol=current.getLineCol();  nextNode(false);  expecting("(",current.previous(),current,err);  List<Expression> expressions=new ArrayList<>();  if (current.next() instanceof ElementStartNode) {    nextNode(false);    List<Statement> statements=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);    for (    Statement s : statements) {      if (s instanceof Expression) {        expressions.add((AST.Access)s);      } else {        err.UnexpectedTokenException("expression",s.toString(),s.line_col());        err.debug("ignore this value");      }    }  }  nextNode(false);  expecting(")",current.previous(),current,err);  nextNode(true);  List<Statement> statements=null;  if (current instanceof ElementStartNode) {    statements=parseElemStart((ElementStartNode)current,true,Collections.emptySet(),false);  }  return new AST.Synchronized(expressions,statements == null ? Collections.emptyList() : statements,lineCol);}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  public ListeningPoint createListeningPoint(int port,String transport) throws TransportNotSupportedException, InvalidArgumentException {  if (super.stackAddress == null)   throw new NullPointerException("Stack does not have a default IP Address!");  return this.createListeningPoint(super.stackAddress,port,transport);}  }
class C{  public int validateGlobalOptions(final LocalizableMessageBuilder buf){  final int ret=secureArgsList.validateGlobalOptions(buf);  if (appendErrorMessageIfArgumentsConflict(buf,noPropertiesFileArg,propertiesFileArg)) {    return CONFLICTING_ARGS.get();  }  return ret;}  }
class C{  public static Test suite(File catalogXml) throws Exception {  XsltXPathConformanceTestSuite suite=new XsltXPathConformanceTestSuite();  Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(catalogXml);  Element testSuiteElement=document.getDocumentElement();  TestSuite result=new TestSuite();  for (  Element testCatalog : elementsOf(testSuiteElement.getElementsByTagName("test-catalog"))) {    Element majorPathElement=(Element)testCatalog.getElementsByTagName("major-path").item(0);    String majorPath=majorPathElement.getTextContent();    File base=new File(catalogXml.getParentFile(),majorPath);    for (    Element testCaseElement : elementsOf(testCatalog.getElementsByTagName("test-case"))) {      result.addTest(suite.create(base,testCaseElement));    }  }  return result;}  }
class C{  public Token toToken(JsonValue request){  assertObjectIsAMap(request);  Collection<String> idSet=request.get(TokenIdFactory.ID).asCollection(String.class);  String id=null;  if (idSet != null && !idSet.isEmpty()) {    id=tokenIdFactory.generateTokenId(idSet.iterator().next());  } else {    id=tokenIdFactory.generateTokenId(null);  }  request.get(TokenIdFactory.ID).setObject(id);  Token token=new Token(id,TokenType.OAUTH);  Map<String,Object> values=request.asMap();  if (values != null) {    for (    OAuthTokenField field : OAuthTokenField.values()) {      String key=field.getOAuthField();      if (values.containsKey(key)) {        Object value=values.get(key);        if (OAuthTokenField.ID.getOAuthField().equals(key)) {          continue;        }        if (OAuthTokenField.EXPIRY_TIME.getOAuthField().equals(key) || OAuthTokenField.AUTH_TIME.getOAuthField().equals(key)) {          if (!Collection.class.isAssignableFrom(value.getClass())) {            throw new IllegalStateException("Date must be in a collection");          }          if (isSetToNeverExpire((Collection<String>)value)) {            continue;          }          value=oAuthValues.getDateValue((Collection<String>)value);        } else         if (value instanceof Collection) {          value=oAuthValues.getSingleValue((Collection<String>)value);        }        token.setAttribute(field.getField(),value);      }    }  }  Object objectToStore=request.getObject();  String serialisedObject=serialisation.serialise(objectToStore);  blobUtils.setBlobFromString(token,serialisedObject);  return token;}  }
class C{  public ServiceInformation(int[] __service_options,org.omg.CORBA.ServiceDetail[] __service_details){  service_options=__service_options;  service_details=__service_details;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  removePageSessionAttribute(PAGE_MODIFIED);  super.handleButton1Request(event);}  }
class C{  static void needToExitWithErrorCode(){  Upgrade.exitWithErrorCode=true;}  }
class C{  public UnsupportedOperationException(){}  }
class C{  private QueueSelector(){}  }
class C{  private <T>Handler<AsyncResult<T>> resultHandler(RoutingContext context,Consumer<T> consumer){  return null;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public ConfigChangeResult(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  int nodeType;  doc=(Document)load("hc_staff",false);  rootNode=doc.getDocumentElement();  nodeType=(int)rootNode.getNodeType();  assertEquals("nodeElementNodeTypeAssert1",1,nodeType);}  }
class C{  public static void run(boolean timing){  ManyInterfaces.timing=timing;  ManyInterfaces obj=new ManyInterfaces();  Interface001 one;  Interface049 forty;  Interface099 ninety;  long start, end;  int iter=32768;  int rept=16;  int i;  System.gc();  start=System.nanoTime();  testIface001(obj,iter);  end=System.nanoTime();  report("testIface001",start,end,iter,rept);  start=System.nanoTime();  testIface049(obj,iter);  end=System.nanoTime();  report("testIface049",start,end,iter,rept);  start=System.nanoTime();  testIface099(obj,iter);  end=System.nanoTime();  report("testIface099",start,end,iter,rept);  start=System.nanoTime();  testVirt001(obj,iter);  end=System.nanoTime();  report("testVirt001",start,end,iter,rept);  start=System.nanoTime();  testVirt049(obj,iter);  end=System.nanoTime();  report("testVirt049",start,end,iter,rept);  start=System.nanoTime();  testVirt099(obj,iter);  end=System.nanoTime();  report("testVirt099",start,end,iter,rept);  start=System.nanoTime();  testInstance001(obj,iter);  end=System.nanoTime();  report("testInst001",start,end,iter,rept);  start=System.nanoTime();  testInstance049(obj,iter);  end=System.nanoTime();  report("testInst049",start,end,iter,rept);  start=System.nanoTime();  testInstance099(obj,iter);  end=System.nanoTime();  report("testInst099",start,end,iter,rept);}  }
class C{  public static String makeStartElementTagXML(String elementName,boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(1000);  String appendNS="";  String NS="";  if (includeNS) {    appendNS="saml:";  }  if (declareNS) {    NS=sc.assertionDeclareStr;  }  xml.append(sc.LEFT_ANGLE).append(appendNS).append(elementName).append(NS).append(sc.RIGHT_ANGLE);  return xml.toString();}  }
class C{  public PMAuthenticatedUsersSubjectEditViewBean(){  super("PMAuthenticatedUsersSubjectEdit",DEFAULT_DISPLAY_URL);}  }
class C{  static <T>Stream<T> makeRef(AbstractPipeline<?,T,?> upstream){  return new OfRef<>(upstream);}  }
class C{  public Drawable2d(Prefab shape){switch (shape) {case TRIANGLE:    mVertexArray=TRIANGLE_BUF;  mTexCoordArray=TRIANGLE_TEX_BUF;mCoordsPerVertex=2;mVertexStride=mCoordsPerVertex * SIZEOF_FLOAT;mVertexCount=TRIANGLE_COORDS.length / mCoordsPerVertex;break;case RECTANGLE:mVertexArray=RECTANGLE_BUF;mTexCoordArray=RECTANGLE_TEX_BUF;mCoordsPerVertex=2;mVertexStride=mCoordsPerVertex * SIZEOF_FLOAT;mVertexCount=RECTANGLE_COORDS.length / mCoordsPerVertex;break;case FULL_RECTANGLE:mVertexArray=FULL_RECTANGLE_BUF;mTexCoordArray=FULL_RECTANGLE_TEX_BUF;mCoordsPerVertex=2;mVertexStride=mCoordsPerVertex * SIZEOF_FLOAT;mVertexCount=FULL_RECTANGLE_COORDS.length / mCoordsPerVertex;break;default :throw new RuntimeException("Unknown shape " + shape);}mTexCoordStride=2 * SIZEOF_FLOAT;mPrefab=shape;}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  refreshTextStatus(view,index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  public static void initialize(Context context){  Contacts.context=context.getApplicationContext();}  }
class C{  public static void ungzip(String srcFile,String destDir) throws IOException {  String tempDestFileName=srcFile.substring(0,srcFile.lastIndexOf("."));  tempDestFileName=tempDestFileName.substring(srcFile.lastIndexOf(FILE_SEPARATOR) + 1);  File bdbDir=new File(destDir);  if (!bdbDir.exists()) {    bdbDir.mkdir();    byte[] buffer=new byte[BUFFER_SIZE];    GZIPInputStream gzin=new GZIPInputStream(new FileInputStream(srcFile));    FileOutputStream fout=new FileOutputStream(new File(destDir,tempDestFileName));    int byteRead=0;    while ((byteRead=gzin.read(buffer)) != -1) {      fout.write(buffer,0,byteRead);    }    gzin.close();    fout.close();  }}  }
class C{  private static boolean isLoanPresent(final Loan loan,final Collection<Investment> investments){  return investments.stream().filter(null).findFirst().isPresent();}  }
class C{  private FSLogoutNotification createSingleLogoutRequest(FSAccountFedInfo acctInfo,String sessionIndex){  FSUtils.debug.message("Entered FSSingleLogoutHandler::createSingleLogoutRequest");  FSLogoutNotification reqName=new FSLogoutNotification();  if (reqName != null) {    NameIdentifier nameIdentifier=acctInfo.getRemoteNameIdentifier();    if (nameIdentifier == null) {      nameIdentifier=acctInfo.getLocalNameIdentifier();    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Hosted Provider Id : " + hostedEntityId);    }    reqName.setProviderId(hostedEntityId);    reqName.setNameIdentifier(nameIdentifier);    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("Session index is " + sessionIndex);    }    if (sessionIndex != null) {      reqName.setSessionIndex(sessionIndex);    }    return reqName;  }  return null;}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  public void mouseReleased(MouseEvent e){  getHandler().mouseReleased(e);}  }
class C{  public void specifyLines(int line_num){  int childNum=0;  if (line_num > lineNumList.size()) {    line_num=lineNumList.size();  }  for (int i=0; i < line_num; i++) {    childNum+=lineNumList.get(i);  }  List<View> viewList=new ArrayList<>();  for (int i=0; i < childNum; i++) {    viewList.add(getChildAt(i));  }  removeAllViews();  for (  View v : viewList) {    addView(v);  }}  }
class C{  static boolean isConfigurationAcceptable(JEBackendCfg cfg,List<LocalizableMessage> unacceptableReasons,ServerContext context){  if (context != null) {    MemoryQuota memQuota=context.getMemoryQuota();    if (cfg.getDBCacheSize() > 0 && !memQuota.isMemoryAvailable(cfg.getDBCacheSize())) {      unacceptableReasons.add(ERR_BACKEND_CONFIG_CACHE_SIZE_GREATER_THAN_JVM_HEAP.get(cfg.getDBCacheSize(),memQuota.getAvailableMemory()));      return false;    } else     if (!memQuota.isMemoryAvailable(memQuota.memPercentToBytes(cfg.getDBCachePercent()))) {      unacceptableReasons.add(ERR_BACKEND_CONFIG_CACHE_PERCENT_GREATER_THAN_JVM_HEAP.get(cfg.getDBCachePercent(),memQuota.memBytesToPercent(memQuota.getAvailableMemory())));      return false;    }  }  return checkConfigurationDirectories(cfg,unacceptableReasons);}  }
class C{  public static boolean isNCName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;}  }
class C{  public JsonEntitlement(Entitlement entitlement){  Reject.ifNull(entitlement);  this.entitlement=entitlement;}  }
class C{  public long roundTripTime(long timeout,TimeUnit unit) throws InterruptedException {  if (latch.await(timeout,unit)) {    return received - sent;  } else {    return -2;  }}  }
class C{  protected SizeRequirements baselineRequirements(int axis,SizeRequirements r){  SizeRequirements totalAscent=new SizeRequirements();  SizeRequirements totalDescent=new SizeRequirements();  if (r == null) {    r=new SizeRequirements();  }  r.alignment=0.5f;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    float align=v.getAlignment(axis);    float span;    int ascent;    int descent;    span=v.getPreferredSpan(axis);    ascent=(int)(align * span);    descent=(int)(span - ascent);    totalAscent.preferred=Math.max(ascent,totalAscent.preferred);    totalDescent.preferred=Math.max(descent,totalDescent.preferred);    if (v.getResizeWeight(axis) > 0) {      span=v.getMinimumSpan(axis);      ascent=(int)(align * span);      descent=(int)(span - ascent);      totalAscent.minimum=Math.max(ascent,totalAscent.minimum);      totalDescent.minimum=Math.max(descent,totalDescent.minimum);      span=v.getMaximumSpan(axis);      ascent=(int)(align * span);      descent=(int)(span - ascent);      totalAscent.maximum=Math.max(ascent,totalAscent.maximum);      totalDescent.maximum=Math.max(descent,totalDescent.maximum);    } else {      totalAscent.minimum=Math.max(ascent,totalAscent.minimum);      totalDescent.minimum=Math.max(descent,totalDescent.minimum);      totalAscent.maximum=Math.max(ascent,totalAscent.maximum);      totalDescent.maximum=Math.max(descent,totalDescent.maximum);    }  }  r.preferred=(int)Math.min((long)totalAscent.preferred + (long)totalDescent.preferred,Integer.MAX_VALUE);  if (r.preferred > 0) {    r.alignment=(float)totalAscent.preferred / r.preferred;  }  if (r.alignment == 0.0f) {    r.minimum=totalDescent.minimum;    r.maximum=totalDescent.maximum;  } else   if (r.alignment == 1.0f) {    r.minimum=totalAscent.minimum;    r.maximum=totalAscent.maximum;  } else {    r.minimum=Math.round(Math.max(totalAscent.minimum / r.alignment,totalDescent.minimum / (1.0f - r.alignment)));    r.maximum=Math.round(Math.min(totalAscent.maximum / r.alignment,totalDescent.maximum / (1.0f - r.alignment)));  }  return r;}  }
class C{  public static SearchResultEntry unmodifiableSearchResultEntry(final SearchResultEntry entry){  if (entry instanceof UnmodifiableSearchResultEntryImpl) {    return entry;  }  return new UnmodifiableSearchResultEntryImpl(entry);}  }
class C{  public DefaultMutableTreeNode(){  this(null);}  }
class C{  @Override public void addSecurityRole(String role){synchronized (securityRolesLock) {    String results[]=new String[securityRoles.length + 1];    for (int i=0; i < securityRoles.length; i++)     results[i]=securityRoles[i];    results[securityRoles.length]=role;    securityRoles=results;  }  fireContainerEvent("addSecurityRole",role);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens03.class,args);}  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId,boolean retrieveFromCache){  return getPersistence().fetchByUUID_G(uuid,groupId,retrieveFromCache);}  }
class C{  public Ping ping() throws IOException {  Ping ping=new Ping();  int pingId;synchronized (this) {    if (shutdown) {      throw new IOException("shutdown");    }    pingId=nextPingId;    nextPingId+=2;    if (pings == null)     pings=new HashMap<Integer,Ping>();    pings.put(pingId,ping);  }  writePing(pingId,ping);  return ping;}  }
class C{  public void paintInternalFrameTitlePaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public SOAPException(String reason){  super(reason);  this.cause=null;}  }
class C{  public static double parseStringAsDouble(String in) throws IndexParseFieldException {  try {    return Double.parseDouble(in);  } catch (  NumberFormatException e) {    throw new IndexParseFieldException(in,e);  }}  }
class C{  public ItemStack(final Material type,final int amount,final short damage){  this(type.getId(),amount,damage);}  }
class C{  public static boolean isEncoded(final HttpEntity entity){  final Header contentType=entity.getContentType();  return (contentType != null && contentType.getValue().equalsIgnoreCase(CONTENT_TYPE));}  }
class C{  public PrintStream(OutputStream out){  this(out,false);}  }
class C{  protected void addMoreAttributeSchemasForModification(Set attributeSchemas){}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof URLPermission)) {    return false;  }  URLPermission that=(URLPermission)p;  if (!this.methods.get(0).equals("*") && Collections.indexOfSubList(this.methods,that.methods) == -1) {    return false;  }  if (this.requestHeaders.isEmpty() && !that.requestHeaders.isEmpty()) {    return false;  }  if (!this.requestHeaders.isEmpty() && !this.requestHeaders.get(0).equals("*") && Collections.indexOfSubList(this.requestHeaders,that.requestHeaders) == -1) {    return false;  }  if (!this.scheme.equals(that.scheme)) {    return false;  }  if (this.ssp.equals("*")) {    return true;  }  if (!this.authority.implies(that.authority)) {    return false;  }  if (this.path == null) {    return that.path == null;  }  if (that.path == null) {    return false;  }  if (this.path.endsWith("/-")) {    String thisprefix=this.path.substring(0,this.path.length() - 1);    return that.path.startsWith(thisprefix);  }  if (this.path.endsWith("/*")) {    String thisprefix=this.path.substring(0,this.path.length() - 1);    if (!that.path.startsWith(thisprefix)) {      return false;    }    String thatsuffix=that.path.substring(thisprefix.length());    if (thatsuffix.indexOf('/') != -1) {      return false;    }    if (thatsuffix.equals("-")) {      return false;    }    return true;  }  return this.path.equals(that.path);}  }
class C{  public void validateUserID(String userID,Map envParams) throws AMException {  StringBuilder errorString=new StringBuilder(10);  SSOToken token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  String orgDN=(String)envParams.get(com.sun.identity.shared.Constants.ORGANIZATION_NAME);  String regEx=getOrgUserInvalidChars(orgDN,token);  if (userID == null || userID.length() == 0) {    debug.error("AMUserPasswordValidationPlugin." + "validateUserID() : Source string is null or empty" + userID);    throw new AMInvalidDNException(AMSDKBundle.getString("157"),"157");  }  if (regEx == null || regEx.length() == 0) {    debug.error("AMUserPasswordValidationPlugin." + "validateUserID() : List of invalid characters is null " + "or empty"+ regEx);    throw new AMInvalidDNException(AMSDKBundle.getString("157"),"157");  }  StringTokenizer st=new StringTokenizer(regEx,SEPERATOR);  while (st.hasMoreTokens()) {    String obj=st.nextToken();    if (userID.indexOf(obj) > -1) {      debug.error("AMUserPasswordValidationPlugin." + "validateUserID() : Detected invalid chars ...");      debug.error("AMUserPasswordValidationPlugin." + "validateUserID() : User Name validation Failed:" + obj);      errorString.append(obj).append(" ");    }  }  Object args[]={userID,errorString.toString()};  if (errorString.length() != 0) {    throw new AMException(AMSDKBundle.getString("1002",args),"1002",args);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Node psNode;  String psName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(1);  psNode=nameNode.getPreviousSibling();  psName=psNode.getNodeName();  if (equals("#text",psName)) {    psNode=psNode.getPreviousSibling();    psName=psNode.getNodeName();  }  assertEquals("nodeName","employeeId",psName);}  }
class C{  public org.w3c.dom.Element signWithSAMLToken(org.w3c.dom.Document doc,java.security.Key key,boolean symmetricKey,java.security.cert.Certificate signingCert,java.security.cert.Certificate encryptCert,java.lang.String assertionID,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return sp.signWithSAMLToken(doc,key,symmetricKey,signingCert,encryptCert,assertionID,algorithm,ids);}  }
class C{  VectorSpliterator(Vector<E> list,Object[] array,int origin,int fence,int expectedModCount){  this.list=list;  this.array=array;  this.index=origin;  this.fence=fence;  this.expectedModCount=expectedModCount;}  }
class C{  public boolean isPreExternalInitializationSubcommand(){  return isSubcommand(PRE_EXTERNAL_INITIALIZATION_SUBCMD_NAME);}  }
class C{  protected DnDEventMulticaster(EventListener a,EventListener b){  super(a,b);}  }
class C{  public static synchronized String[][] read(String logName,String logType,LogQuery logQuery,Object userCrdential) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {  queryResult=read(logName,logType,null,logQuery,userCrdential);  return queryResult;}  }
class C{  private boolean matchPattern(final String remoteHostName){  final int len=remoteHostName.length() - hostPattern.length();  return len > 0 && remoteHostName.regionMatches(true,len,hostPattern,0,hostPattern.length());}  }
class C{  public static ModifyRequest copyOfModifyRequest(final ModifyRequest request){  return new ModifyRequestImpl(request);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  config.getExcludedAttribute().add(getModifyTimestampAttributeType());  provider.initializeVirtualAttributeProvider(config);}  }
class C{  protected void configurePropertiesFromAction(Action a){  AbstractAction.setEnabledFromAction(this,a);  AbstractAction.setToolTipTextFromAction(this,a);  setActionCommandFromAction(a);}  }
class C{  private void findFreePorts() throws IOException {  int[] ports=TestCaseUtils.findFreePorts(2);  rs1Port=ports[0];  rs2Port=ports[1];}  }
class C{  public String toString(){  StringBuffer retBuffer=new StringBuffer();  retBuffer.append(getClass().getName() + " " + Integer.toString(hashCode()));  if (path != null)   retBuffer.append(" path " + path);  if (childIndices != null) {    retBuffer.append(" indices [ ");    for (int counter=0; counter < childIndices.length; counter++)     retBuffer.append(Integer.toString(childIndices[counter]) + " ");    retBuffer.append("]");  }  if (children != null) {    retBuffer.append(" children [ ");    for (int counter=0; counter < children.length; counter++)     retBuffer.append(children[counter] + " ");    retBuffer.append("]");  }  return retBuffer.toString();}  }
class C{  protected void releaseContent(){  list=null;}  }
class C{  public ResourceOwner validate(OAuth2Request request) throws ResourceOwnerAuthenticationRequired, AccessDeniedException, BadRequestException, InteractionRequiredException, LoginRequiredException, ServerException, NotFoundException {  final OpenIdPrompt openIdPrompt=new OpenIdPrompt(request);  if (!openIdPrompt.isValid()) {    String message="Invalid prompt parameter \"" + openIdPrompt.getOriginalValue() + "\"";    logger.message(message);    throw new BadRequestException(message);  }  SSOToken token=getResourceOwnerSession(request);  try {    if (token != null && ssoTokenManager.isValidToken(token)) {      try {        String auth2Realm=dnWrapper.orgNameToDN(realmNormaliser.normalise((String)request.getParameter("realm"))).toLowerCase();        String tokenRealm=token.getProperty("Organization");        if (!auth2Realm.equals(tokenRealm)) {          throw authenticationRequired(request);        }      } catch (      SSOException e) {        throw new AccessDeniedException(e);      }catch (      org.forgerock.json.resource.NotFoundException e) {        throw new NotFoundException(e.getMessage());      }      if (openIdPrompt.containsLogin()) {        throw authenticationRequired(request,token);      }      final String acrValuesStr=request.getParameter(ACR_VALUES);      if (acrValuesStr != null) {        setCurrentAcr(token,request,acrValuesStr);      }      try {        final long authTime=stringToDate(token.getProperty(ISAuthConstants.AUTH_INSTANT)).getTime();        if (isPastMaxAge(getMaxAge(request),authTime)) {          alterMaxAge(request);          throw authenticationRequired(request,token);        }        final AMIdentity id=IdUtils.getIdentity(AccessController.doPrivileged(AdminTokenAction.getInstance()),token.getProperty(Constants.UNIVERSAL_IDENTIFIER));        return new ResourceOwner(id.getName(),id,authTime);      } catch (      Exception e) {        logger.error("Error authenticating user against OpenAM: ",e);        throw new LoginRequiredException();      }    } else     if (OAuth2Constants.TokenEndpoint.PASSWORD.equals(request.getParameter(GRANT_TYPE)) || OAuth2Constants.TokenEndpoint.CLIENT_CREDENTIALS.equals(request.getParameter(GRANT_TYPE))) {      return getResourceOwner(request.getToken(AccessToken.class));    } else {      if (openIdPrompt.containsNone()) {        logger.error("Not pre-authenticated and prompt parameter equals none.");        if (request.getParameter(OAuth2Constants.Params.RESPONSE_TYPE) != null) {          throw new InteractionRequiredException(Utils.isOpenIdConnectFragmentErrorType(splitResponseType(request.<String>getParameter(RESPONSE_TYPE))) ? FRAGMENT : QUERY);        } else {          throw new InteractionRequiredException();        }      } else       if (!isRefreshToken(request)) {        throw authenticationRequired(request);      } else {        return getResourceOwner(request.getToken(RefreshToken.class));      }    }  } catch (  SSOException|UnsupportedEncodingException|URISyntaxException e) {    throw new AccessDeniedException(e);  }}  }
class C{  public void init(KeyGenerationParameters param){  this.random=param.getRandom();  this.strength=(param.getStrength() + 7) / 8;}  }
class C{  public void removeFromEntityConfig(String realm,String name,String entityId) throws SAML2MetaException, JAXBException {  String classMethod="SAML2COTUtils.removeFromEntityConfig: ";  SAML2MetaManager metaManager=null;  if (callerSession == null) {    metaManager=new SAML2MetaManager();  } else {    metaManager=new SAML2MetaManager(callerSession);  }  EntityDescriptorElement edes=metaManager.getEntityDescriptor(realm,entityId);  if (edes == null) {    debug.error(classMethod + "No such entity: " + entityId);    String[] data={realm,entityId};    throw new SAML2MetaException("entityid_invalid",data);  }  EntityConfigElement eConfig=metaManager.getEntityConfig(realm,entityId);  boolean isAffiliation=false;  if (metaManager.getAffiliationDescriptor(realm,entityId) != null) {    isAffiliation=true;  }  if (debug.messageEnabled()) {    debug.message(classMethod + "is " + entityId+ " in realm "+ realm+ " an affiliation? "+ isAffiliation);  }  if (eConfig != null) {    List elist=null;    if (isAffiliation) {      AffiliationConfigElement affiliationCfgElm=metaManager.getAffiliationConfig(realm,entityId);      elist=new ArrayList();      elist.add(affiliationCfgElm);    } else {      elist=eConfig.getIDPSSOConfigOrSPSSOConfigOrAuthnAuthorityConfig();    }    boolean needToSave=false;    for (Iterator iter=elist.iterator(); iter.hasNext(); ) {      BaseConfigType bConfig=(BaseConfigType)iter.next();      List list=bConfig.getAttribute();      for (Iterator iter2=list.iterator(); iter2.hasNext(); ) {        AttributeType avp=(AttributeType)iter2.next();        if (avp.getName().trim().equalsIgnoreCase(SAML2Constants.COT_LIST)) {          List avpl=avp.getValue();          if (avpl != null && !avpl.isEmpty() && containsValue(avpl,name)) {            avpl.remove(name);            needToSave=true;            break;          }        }      }    }    if (needToSave) {      metaManager.setEntityConfig(realm,eConfig);    }  }}  }
class C{  public int compareTo(TIFFField o){  if (o == null) {    throw new IllegalArgumentException();  }  int oTag=o.getTag();  if (tag < oTag) {    return -1;  } else   if (tag > oTag) {    return 1;  } else {    return 0;  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  PolicyModel model=(PolicyModel)getModel();  String policyName=(String)propertySheetModel.getValue(PolicyModel.TF_NAME);  policyName=policyName.trim();  String policyType=(String)propertySheetModel.getValue(ATTR_POLICY_TYPE);  if (policyName.length() > 0) {    try {      boolean referralType=!policyType.equals(ATTR_VALUE_POLICY_TYPE_NORMAL);      String id=model.cachePolicy(policyName,"",referralType,true);      setPageSessionAttribute(PolicyOpViewBeanBase.PG_SESSION_POLICY_CACHE_ID,id);      PolicyOpViewBeanBase vb=null;      if (referralType) {        vb=(PolicyReferralAddViewBean)getViewBean(PolicyReferralAddViewBean.class);      } else {        vb=(PolicyNormalAddViewBean)getViewBean(PolicyNormalAddViewBean.class);      }      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } catch (    AMConsoleException e) {      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      forwardTo();    }  } else {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error","policy.missing.policyName");    forwardTo();  }}  }
class C{  public void traceException(String msg,Throwable exception){  StackTraceElement[] stackTrace=null;  StackTraceElement[] filteredStackTrace=null;  StackTraceElement callerFrame=null;  final boolean hasException=exception != null;  for (  PublisherSettings settings : publisherSettings) {    TraceSettings activeSettings=settings.classSettings;    Map<String,TraceSettings> methodSettings=settings.methodSettings;    if (shouldLog(activeSettings,hasException) || methodSettings != null) {      if (stackTrace == null) {        stackTrace=Thread.currentThread().getStackTrace();      }      if (callerFrame == null) {        callerFrame=getCallerFrame(stackTrace);      }      String signature=callerFrame.getMethodName();      if (methodSettings != null) {        TraceSettings mSettings=methodSettings.get(signature);        if (mSettings == null) {          int idx=signature.indexOf('(');          if (idx != -1) {            mSettings=methodSettings.get(signature.substring(0,idx));          }        }        if (!shouldLog(mSettings,hasException)) {          continue;        }        activeSettings=mSettings;      }      String sourceLocation=callerFrame.getFileName() + ":" + callerFrame.getLineNumber();      if (filteredStackTrace == null && activeSettings.getStackDepth() > 0) {        StackTraceElement[] trace=hasException ? exception.getStackTrace() : stackTrace;        filteredStackTrace=DebugStackTraceFormatter.SMART_FRAME_FILTER.getFilteredStackTrace(trace);      }      if (hasException) {        settings.debugPublisher.traceException(activeSettings,signature,sourceLocation,msg,exception,filteredStackTrace);      } else {        settings.debugPublisher.trace(activeSettings,signature,sourceLocation,msg,filteredStackTrace);      }    }  }}  }
class C{  private static <T>void readPropertyValues(ConsoleApplication app,ManagedObjectDefinition<?,?> d,PropertyDefinition<T> pd,SortedSet<T> values) throws ClientException {  if (values.isEmpty()) {    while (true) {      try {        LocalizableMessage prompt;        if (pd.hasOption(PropertyOption.MANDATORY)) {          prompt=INFO_EDITOR_PROMPT_READ_FIRST_VALUE.get(pd.getName());        } else {          prompt=INFO_EDITOR_PROMPT_READ_FIRST_VALUE_OPTIONAL.get(pd.getName());        }        app.println();        String s=app.readLineOfInput(prompt);        if (s.trim().length() == 0 && !pd.hasOption(PropertyOption.MANDATORY)) {          return;        }        T value=pd.decodeValue(s);        if (values.contains(value)) {          app.println();          app.println(ERR_EDITOR_READ_FIRST_DUPLICATE.get(s));        } else {          values.add(value);        }        break;      } catch (      PropertyException e) {        app.errPrintln();        app.errPrintln(ArgumentExceptionFactory.adaptPropertyException(e,d).getMessageObject());      }    }  }  if (pd.hasOption(PropertyOption.MULTI_VALUED)) {    while (true) {      try {        LocalizableMessage prompt=INFO_EDITOR_PROMPT_READ_NEXT_VALUE.get(pd.getName());        app.println();        String s=app.readLineOfInput(prompt);        if (s.trim().length() == 0) {          return;        }        T value=pd.decodeValue(s);        if (values.contains(value)) {          app.println();          app.println(ERR_EDITOR_READ_NEXT_DUPLICATE.get(s));        } else {          values.add(value);        }      } catch (      PropertyException e) {        app.errPrintln();        app.errPrintln(ArgumentExceptionFactory.adaptPropertyException(e,d).getMessageObject());        app.errPrintln();      }    }  }}  }
class C{  public ValidationResult isDirectoryReadWrite(String dirname,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  if (isStringValid(dirname)) {    File dir=new File(dirname);    if (dir.exists() && dir.isDirectory() && (dir.canRead())&& (dir.canWrite())) {      returnMessage=LocalizedMessage.get(LOC_VA_MSG_DIR_READ_WRITE,new Object[]{dirname});      validRes=ValidationResultStatus.STATUS_SUCCESS;    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_DIR_NOT_READ_WRITE,new Object[]{dirname});  }  Debug.log("FileSystemValidator : Is directory : " + dirname + " read/writable ? "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  public static SessionID generateSessionID(SessionServerConfig serverConfig,String domain) throws SessionException {  String encryptedID=generateEncryptedID(serverConfig);  String siteID=serverConfig.getPrimaryServerID();  String primaryID=getPrimaryId(serverConfig);  String storageKey=String.valueOf(secureRandom.getInstanceForCurrentThread().nextLong());  LegacySessionIDExtensions ext=new LegacySessionIDExtensions(primaryID,siteID,storageKey);  String sessionID=SessionID.makeSessionID(encryptedID,ext,null);  return new SessionID(sessionID,serverConfig.getLocalServerID(),domain);}  }
class C{  public Set searchUsers(String wildcard,Map avPairs,int level) throws AMException, SSOException {  if ((level != AMConstants.SCOPE_ONE) && (level != AMConstants.SCOPE_SUB)) {    throw new AMException(AMSDKBundle.getString("123",super.locale),"123");  }  if ((wildcard == null) || (wildcard.length() == 0)) {    throw new AMException(AMSDKBundle.getString("122",super.locale),"122");  }  String userFilter="(&(" + AMNamingAttrManager.getNamingAttr(USER) + "="+ wildcard+ ")"+ getFilter()+ ")";  String filter=null;  if (avPairs == null) {    filter=userFilter;  } else {    if (avPairs.isEmpty()) {      filter=userFilter;    } else {      StringBuilder filterSB=new StringBuilder();      filterSB.append("(&").append(userFilter).append("(|");      Iterator iter=avPairs.keySet().iterator();      while (iter.hasNext()) {        String attributeName=(String)(iter.next());        Iterator iter2=((Set)(avPairs.get(attributeName))).iterator();        while (iter2.hasNext()) {          String attributeValue=(String)iter2.next();          filterSB.append("(").append(attributeName).append("=").append(attributeValue).append(")");        }      }      filterSB.append("))");      filter=filterSB.toString();    }  }  return dsServices.search(token,getOrganizationDN(),filter,level);}  }
class C{  public void removeServiceAttributes(String serviceName,Set attrNames) throws IdRepoException, SSOException {  Map attrMap=new HashMap(attrNames.size() * 2);  Iterator it=attrNames.iterator();  while (it.hasNext()) {    String attrName=(String)it.next();    attrMap.put(attrName,Collections.EMPTY_SET);  }  modifyService(serviceName,attrMap);}  }
class C{  public void test_parseLjava_lang_String() throws Exception {  URL resource=getClass().getResource("/simple.xml");  Document d=db.parse(resource.toString());  assertNotNull(d);  assertEquals(2,d.getChildNodes().getLength());  assertEquals("#comment",d.getChildNodes().item(0).getNodeName());  assertEquals("breakfast_menu",d.getChildNodes().item(1).getNodeName());  try {    db.parse((String)null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }  try {    db.parse("_");    fail("Expected IOException was not thrown");  } catch (  IOException ioe) {  }  try {    resource=getClass().getResource("/wrong.xml");    db.parse(resource.toString());    fail("Expected SAXException was not thrown");  } catch (  SAXException sax) {  }}  }
class C{  private static int hashWrapperName(String xn){  if (xn.length() < 3) {    return 0;  }  return (3 * xn.charAt(1) + xn.charAt(2)) % 16;}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttributes){  for (ElemTemplateElement node=m_firstChild; node != null; node=node.m_nextSibling) {    node.callVisitors(visitor);  }}  }
class C{  public Cursor query(SQLiteDatabase db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder){  return query(db,projectionIn,selection,selectionArgs,groupBy,having,sortOrder,null,null);}  }
class C{  protected void fireTreeNodesChanged(Object source,Object[] path,int[] childIndices,Object[] children){  Object[] listeners=listenerList.getListenerList();  TreeModelEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeModelListener.class) {      if (e == null)       e=new TreeModelEvent(source,path,childIndices,children);      ((TreeModelListener)listeners[i + 1]).treeNodesChanged(e);    }  }}  }
class C{  public void skipZeroSeparator() throws DataFormatException {  if (bytes.peek() != (byte)0) {    throw new DataFormatException("Expected a zero separator at position " + bytes.position() + " but found byte "+ bytes.peek());  }  bytes.skip(1);}  }
class C{  public void printMessage(String str){  buff.append(str).append("\n");}  }
class C{  public Duration plusMillis(long millisToAdd){  return plus(millisToAdd / 1000,(millisToAdd % 1000) * 1000_000);}  }
class C{  @Override public Foo findByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_First(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.XACMLAuthzDecisionQueryDescriptorType createXACMLAuthzDecisionQueryDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.XACMLAuthzDecisionQueryDescriptorTypeImpl();}  }
class C{  public ArrayStoreException(String s){  super(s);}  }
class C{  public String toXMLString() throws SAML2Exception {  return xmlString;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptionPropertiesType createEncryptionPropertiesType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptionPropertiesTypeImpl();}  }
class C{  public void message(String msg,Throwable t){  getDebugServiceInstance().message(msg,t);}  }
class C{  protected void updateNextObject(){  if (!updateNextIndex()) {    findNextValidParent();  }}  }
class C{  public DocumentName(String documentName,Locale locale){  super(documentName,locale);}  }
class C{  public Attributes2Impl(){  specified=null;  declared=null;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.EvidenceElement createEvidenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.EvidenceElementImpl();}  }
class C{  public void handleTblServerConfigXMLUserButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  ServerConfigXMLAddServerViewBean vb=(ServerConfigXMLAddServerViewBean)getViewBean(ServerConfigXMLAddServerViewBean.class);  unlockPageTrail();  vb.setPageSessionAttribute(ServerConfigXMLAddServerViewBean.PG_ATTR_SERVER_GROUP_TYPE,DSConfigMgr.DEFAULT);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public void handleButton2Request(RequestInvocationEvent event) throws ModelControlException {  bRealmSelect=true;  super.handleButton2Request(event);}  }
class C{  public BoldAction(){  super("font-bold");}  }
class C{  public void paintTabbedPaneTabAreaBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintTabbedPaneTabAreaBackground(context,g,x,y,w,h);}  }
class C{  public void test_toString() throws Exception {  CertificateFactory certFact=CertificateFactory.getInstance("X509");  X509Certificate pemCert=(X509Certificate)certFact.generateCertificate(new ByteArrayInputStream(TestUtils.getX509Certificate_v3()));  byte[] extnValue=pemCert.getExtensionValue("2.5.29.35");  assertEquals(Arrays.toString(new byte[]{0x04,0x02,0x30,0x00}),Arrays.toString(extnValue));  assertNotNull(pemCert.toString());}  }
class C{  public boolean isRichText(){  return getFieldFlag(FF_RICH_TEXT);}  }
class C{  public static String printShort(short val){  if (theConverter == null)   initConverter();  return theConverter.printShort(val);}  }
class C{  public static void error(Level level,String msgid,String data[],Object session){  if (logger != null) {    try {      logger.error(level,msgid,data,session);    } catch (    LogException le) {      debug.error("LogUtil.error: Couldn't write log:",le);    }  }}  }
class C{  public TimePolicyModelImpl(HttpServletRequest req,Map map){  super(req,map);}  }
class C{  public boolean isValidating(){  return false;}  }
class C{  private static Object maskNull(Object key){  return (key == null ? NULL_KEY : key);}  }
class C{  public static Map<String,ClassNode> loadClasses(File jarFile) throws IOException {  Map<String,ClassNode> classes=new HashMap<String,ClassNode>();  JarFile jar=new JarFile(jarFile);  Stream<JarEntry> str=jar.stream();  str.forEach(null);  jar.close();  return classes;}  }
class C{  public void reset(Reader in){  lexer.yyreset(in);  reset();}  }
class C{  public Enumeration<String> attributeNames(){  return getTable().keys();}  }
class C{  public BufferedInputStream(InputStream in){  this(in,DEFAULT_BUFFER_SIZE);}  }
class C{  public void ssoTokenChanged(SSOTokenEvent evt){  try {    int type=evt.getType();switch (type) {case SSOTokenEvent.SSO_TOKEN_IDLE_TIMEOUT:case SSOTokenEvent.SSO_TOKEN_MAX_TIMEOUT:case SSOTokenEvent.SSO_TOKEN_DESTROY:      SSOToken token=evt.getToken();    clearAllPolicies(token.getTokenID());  break;}} catch (SSOException ssoe) {AMModelBase.debug.warning("PolicyCache.ssoTokenChanged",ssoe);}}  }
class C{  private void changeOpenAMDebugFolder(String newOpenAMDebugFolder){  SystemPropertiesManager.initializeProperties(DebugConstants.CONFIG_DEBUG_DIRECTORY,newOpenAMDebugFolder);}  }
class C{  public void authenticateUser(String user,String password) throws LDAPUtilException {  if (password == null) {    throw new LDAPUtilException("PwdInvalid",ResultCode.INVALID_CREDENTIALS,null);  }  userId=user;  userPassword=password;  boolean shouldRetry=false;  do {    try {      searchForUser();      if (screenState == ModuleState.SERVER_DOWN || screenState == ModuleState.USER_NOT_FOUND) {        return;      }      authenticate();      shouldRetry=false;    } catch (    LDAPUtilException e) {      if (ResultCode.UNWILLING_TO_PERFORM.equals(e.getResultCode())) {        if (!shouldRetry) {          Object[] errMsg=e.getMessageArgs();          debug.error("Retying user authentication due to err(" + ResultCode.UNWILLING_TO_PERFORM + ") '"+ errMsg[0]+ "'");          shouldRetry=true;        } else {          shouldRetry=false;          throw e;        }      } else {        throw e;      }    }  } while (shouldRetry);}  }
class C{  protected ColorType(String description){  if (description == null) {    throw new NullPointerException("ColorType must have a valid description");  }  this.description=description;synchronized (ColorType.class) {    this.index=nextID++;  }}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(getTotalCount());  buffer.append("    ");  buffer.append(className);  buffer.append('.');  buffer.append(methodName);  return buffer.toString();}  }
class C{  public void startProduction(ImageConsumer ic){  addConsumer(ic);}  }
class C{  public static long longForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForLong();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  StringBuffer sb=new StringBuffer();  sb.append(m_arg0.execute(xctxt).str());  sb.append(m_arg1.execute(xctxt).str());  if (null != m_arg2)   sb.append(m_arg2.execute(xctxt).str());  if (null != m_args) {    for (int i=0; i < m_args.length; i++) {      sb.append(m_args[i].execute(xctxt).str());    }  }  return new XString(sb.toString());}  }
class C{  public final int readPort(LocalizableMessage prompt,final int defaultValue) throws ClientException {  if (defaultValue != -1) {    prompt=INFO_PROMPT_SINGLE_DEFAULT.get(prompt,defaultValue);  }  return readValidatedInput(prompt,Utils.portValidationCallback(defaultValue),CONFIRMATION_MAX_TRIES);}  }
class C{  private ASN1EncodableVector buildUnauthenticatedAttributes(byte[] timeStampToken) throws IOException {  if (timeStampToken == null)   return null;  String ID_TIME_STAMP_TOKEN="1.2.840.113549.1.9.16.2.14";  ASN1InputStream tempstream=new ASN1InputStream(new ByteArrayInputStream(timeStampToken));  ASN1EncodableVector unauthAttributes=new ASN1EncodableVector();  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(new ASN1ObjectIdentifier(ID_TIME_STAMP_TOKEN));  ASN1Sequence seq=(ASN1Sequence)tempstream.readObject();  v.add(new DERSet(seq));  unauthAttributes.add(new DERSequence(v));  return unauthAttributes;}  }
class C{  public SQLSyntaxErrorException(String reason){  super(reason,null,0);}  }
class C{  public void transact(TransactInfo transactInfo,Marshallable invokeParam,ClientCallback<?> clientCallback){  if (clientCallback != null) {    final long callbackId=SystemClock.elapsedRealtime();    callbacks.put(callbackId,clientCallback);    transactInfo.setCallbackId(callbackId);  }  mJsExecutor.transact(transactInfo,invokeParam);}  }
class C{  public void addRequest(Request request){  requestSet.add(request);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public void clearSelection(){  if (selection != null && selection.length > 0) {    int selSize=selection.length;    boolean[] newness=new boolean[selSize];    for (int counter=0; counter < selSize; counter++)     newness[counter]=false;    TreeSelectionEvent event=new TreeSelectionEvent(this,selection,newness,leadPath,null);    leadPath=null;    leadIndex=leadRow=-1;    uniquePaths.clear();    selection=null;    resetRowSelection();    fireValueChanged(event);  }}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.RedirectRequestType createRedirectRequestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.RedirectRequestTypeImpl();}  }
class C{  public double sum(){  Cell[] as=cells;  Cell a;  double sum=Double.longBitsToDouble(base);  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       sum+=Double.longBitsToDouble(a.value);    }  }  return sum;}  }
class C{  public void map(Context context,MessageBytes uri,MappingData mappingData) throws IOException {  ContextVersion contextVersion=contextObjectToContextVersionMap.get(context);  uri.toChars();  CharChunk uricc=uri.getCharChunk();  uricc.setLimit(-1);  internalMapWrapper(contextVersion,uricc,mappingData);}  }
class C{  public Builder names(final Collection<String> names){  this.names.addAll(names);  return this;}  }
class C{  @Override public void onLoadFinished(Loader<Cursor> loader,Cursor data){  mAdapter.swapCursor(data);}  }
class C{  public void parseArguments(final String[] rawArguments,final String propertiesFile,final boolean requirePropertiesFile) throws ArgumentException {  Properties argumentProperties=null;  try (final FileInputStream fis=new FileInputStream(propertiesFile)){    final Properties p=new Properties();    p.load(fis);    argumentProperties=p;  } catch (  final Exception e) {    if (requirePropertiesFile) {      final LocalizableMessage message=ERR_ARGPARSER_CANNOT_READ_PROPERTIES_FILE.get(propertiesFile,getExceptionMessage(e));      throw new ArgumentException(message,e);    }  }  parseArguments(rawArguments,argumentProperties);}  }
class C{  public static boolean isAbstract(int mod){  return (mod & ACC_ABSTRACT) != 0;}  }
class C{  public void auditModify(ModificationItem[] mods){  if (shouldAudit(AuditConstants.ConfigOperation.UPDATE)) {    Map<String,Object> finalState=deriveFinalState(mods);    String[] fieldList=new String[mods.length];    for (int i=0; i < mods.length; i++) {      fieldList[i]=mods[i].getAttribute().getID();    }    super.auditModify(finalState,fieldList);  }}  }
class C{  protected void runSQL(String sql){  try {    DataSource dataSource=fooPersistence.getDataSource();    DB db=DBManagerUtil.getDB();    sql=db.buildSQL(sql);    sql=PortalUtil.transformSQL(sql);    SqlUpdate sqlUpdate=SqlUpdateFactoryUtil.getSqlUpdate(dataSource,sql);    sqlUpdate.update();  } catch (  Exception e) {    throw new SystemException(e);  }}  }
class C{  XPathFactory createInstance(String className){  try {    if (debug)     debugPrintln("instantiating " + className);    Class clazz;    if (classLoader != null)     clazz=classLoader.loadClass(className); else     clazz=Class.forName(className);    if (debug)     debugPrintln("loaded it from " + which(clazz));    Object o=clazz.newInstance();    if (o instanceof XPathFactory)     return (XPathFactory)o;    if (debug)     debugPrintln(className + " is not assignable to " + SERVICE_CLASS.getName());  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    if (debug) {      debugPrintln("failed to instantiate " + className);      t.printStackTrace();    }  }  return null;}  }
class C{  public RuleNoResourceAddViewBean(){  super("RuleNoResourceAdd",DEFAULT_DISPLAY_URL);}  }
class C{  protected final Entry createEntry(DN entryDN,Set<ObjectClass> objectClasses){  HashMap<ObjectClass,String> map=new HashMap<>();  for (  ObjectClass oc : objectClasses) {    if (oc != null) {      map.put(oc,oc.getNameOrOID());    }  }  return new Entry(entryDN,map,null,null);}  }
class C{  String parseToken(boolean quoted) throws JasperException {  StringBuilder StringBuilder=new StringBuilder();  skipSpaces();  StringBuilder.setLength(0);  if (!hasMoreInput()) {    return "";  }  int ch=peekChar();  if (quoted) {    if (ch == '"' || ch == '\'') {      char endQuote=ch == '"' ? '"' : '\'';      ch=nextChar();      for (ch=nextChar(); ch != -1 && ch != endQuote; ch=nextChar()) {        if (ch == '\\')         ch=nextChar();        StringBuilder.append((char)ch);      }      if (ch == -1) {        err.jspError(mark(),"jsp.error.quotes.unterminated");      }    } else {      err.jspError(mark(),"jsp.error.attr.quoted");    }  } else {    if (!isDelimiter()) {      do {        ch=nextChar();        if (ch == '\\') {          if (peekChar() == '"' || peekChar() == '\'' || peekChar() == '>' || peekChar() == '%')           ch=nextChar();        }        StringBuilder.append((char)ch);      } while (!isDelimiter());    }  }  return StringBuilder.toString();}  }
class C{  @DataProvider(name="urlobjects1") public Object[][] createURLObjects1(){  return new Object[][]{{new LDAPUrl(false,null,null,null,null,null),"ldap:///???"},{new LDAPUrl(true,null,null,null,null,null),"ldaps:///???"},{new LDAPUrl(true,"void.central.sun.com",null,null,null,null),"ldaps://void.central.sun.com/???"},{new LDAPUrl(true,null,1245,null,null,null),"ldaps://:1245/???"},{new LDAPUrl(true,"void.central",123,null,null,null),"ldaps://void.central:123/???"},{new LDAPUrl(true,null,null,null,null,null,"cn","sn"),"ldaps:///?cn,sn??"},{new LDAPUrl(true,null,null,null,null,Filter.equality("uid","abc"),"cn"),"ldaps:///?cn??(uid=abc)"},{new LDAPUrl(true,null,null,null,SearchScope.WHOLE_SUBTREE,Filter.equality("uid","abc"),"cn"),"ldaps:///?cn?sub?(uid=abc)"},{new LDAPUrl(true,null,null,DN.valueOf("uid=abc,o=target"),SearchScope.WHOLE_SUBTREE,Filter.equality("uid","abc"),"cn"),"ldaps:///uid=abc,o=target?cn?sub?(uid=abc)"},{new LDAPUrl(true,"localhost",1345,DN.valueOf("uid=abc,o=target"),SearchScope.WHOLE_SUBTREE,Filter.equality("uid","abc"),"cn"),"ldaps://localhost:1345/uid=abc,o=target?cn?sub?(uid=abc)"}};}  }
class C{  KeyedObjectPoolMinIdleTimerTask(final KeyedObjectPool<K,V> keyedPool,final K key,final int minIdle) throws IllegalArgumentException {  if (keyedPool == null) {    throw new IllegalArgumentException("keyedPool must not be null.");  }  this.keyedPool=keyedPool;  this.key=key;  this.minIdle=minIdle;}  }
class C{  public boolean update(Long attributeID,String attributeName,Long eventID,Long dataTypeID){  if (attributeID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (attributeName != null) {    args.put(KEY_EVENTATTRIBUTENAME,attributeName);  }  if (eventID != null) {    args.put(KEY_EVENTID,eventID);  }  if (dataTypeID != null) {    args.put(KEY_DATATYPEID,dataTypeID);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_EVENTATTRIBUTEID + "=" + attributeID,null) > 0;  }  return false;}  }
class C{  public BufferOverflowException(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementremoveattribute.class,args);}  }
class C{  public final void testGetM(){  assertEquals(2000,new ECFieldF2m(2000).getM());}  }
class C{  Set findRemovableAciList(Set aciList) throws AMException, SSOException {  Set resultSet=new HashSet();  if (aciList == null) {    return resultSet;  }  Iterator iter=aciList.iterator();  while (iter.hasNext()) {    String aci=(String)iter.next();    Set objs=dsServices.search(token,AMStoreConnection.getAMSdkBaseDN(),"(&" + AMSearchFilterManager.getGlobalSearchFilter(AMObject.GROUP) + "(iplanet-am-role-aci-list="+ aci+ "))",AMConstants.SCOPE_SUB);    if (objs.size() < 2) {      resultSet.add(aci);    }  }  return resultSet;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsu.AttributedURI createAttributedURI() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsu.impl.AttributedURIImpl();}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  Rectangle alloc=(Rectangle)a;  if (x < alloc.x + (alloc.width / 2)) {    bias[0]=Position.Bias.Forward;    return getStartOffset();  }  bias[0]=Position.Bias.Backward;  return getEndOffset();}  }
class C{  public DoubleBorder(Color color,float width){  super(color,width);}  }
class C{  @DataProvider(name="sequenceValues") public Object[][] createSequenceValues(){  return new Object[][]{{"{123,122}",true},{"{ 123,1}",true},{"{ 123   ,   1   }",true},{"{0123,}",false},{"{0123 42 }",false},{"{123  , 11 ",false},{" {123  , 11 ",false},{" 123  , 11}",false}};}  }
class C{  public ByteArrayBuilder appendShort(int s){  builder.appendShort(s);  return this;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootmeA: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("ShootmeA <sip:" + myAddress + ":"+ myPort+ ";lr"+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    if (toHeader.getTag() == null) {      toHeader.setTag(new Integer((int)(Math.random() * 10000)).toString());    } else {      System.out.println("Re-INVITE processing");    }    okResponse.addHeader(contactHeader);    ContentTypeHeader contentTypeHeader=headerFactory.createContentTypeHeader("application","sdp");    String sdpData="v=0\r\n" + "o=4855 13760799956958020 13760799956958020" + " IN IP4  129.6.55.78\r\n"+ "s=mysession session\r\n"+ "p=+46 8 52018010\r\n"+ "c=IN IP4  129.6.55.78\r\n"+ "t=0 0\r\n"+ "m=audio 6022 RTP/AVP 0 4 18\r\n"+ "a=rtpmap:0 PCMU/8000\r\n"+ "a=rtpmap:4 G723/8000\r\n"+ "a=rtpmap:18 G729A/8000\r\n"+ "a=ptime:20\r\n";    byte[] contents=sdpData.getBytes();    okResponse.setContent(contents,contentTypeHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this,false),1000);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  Map<String,Set<String>> readPropertiesFile(String type){  String propertyFileName=type + ".properties";  try {    return MapHelper.readMap(ConfigureSocialAuthN.class.getResourceAsStream(propertyFileName));  } catch (  IOException ioe) {    DEBUG.warning("Caught IOException while reading properties file " + propertyFileName,ioe);    return Collections.emptyMap();  }}  }
class C{  private <T>T doInvokeAny(Collection<? extends Callable<T>> tasks,boolean timed,long nanos) throws InterruptedException, ExecutionException, TimeoutException {  if (tasks == null)   throw new NullPointerException();  int ntasks=tasks.size();  if (ntasks == 0)   throw new IllegalArgumentException();  ArrayList<Future<T>> futures=new ArrayList<Future<T>>(ntasks);  ExecutorCompletionService<T> ecs=new ExecutorCompletionService<T>(this);  try {    ExecutionException ee=null;    final long deadline=timed ? System.nanoTime() + nanos : 0L;    Iterator<? extends Callable<T>> it=tasks.iterator();    futures.add(ecs.submit(it.next()));    --ntasks;    int active=1;    for (; ; ) {      Future<T> f=ecs.poll();      if (f == null) {        if (ntasks > 0) {          --ntasks;          futures.add(ecs.submit(it.next()));          ++active;        } else         if (active == 0)         break; else         if (timed) {          f=ecs.poll(nanos,TimeUnit.NANOSECONDS);          if (f == null)           throw new TimeoutException();          nanos=deadline - System.nanoTime();        } else         f=ecs.take();      }      if (f != null) {        --active;        try {          return f.get();        } catch (        ExecutionException eex) {          ee=eex;        }catch (        RuntimeException rex) {          ee=new ExecutionException(rex);        }      }    }    if (ee == null)     ee=new ExecutionException();    throw ee;  }  finally {    for (int i=0, size=futures.size(); i < size; i++)     futures.get(i).cancel(true);  }}  }
class C{  public void deregisterMonitoredDirectory(File directory,DiskSpaceMonitorHandler handler){synchronized (monitoredDirs) {    List<MonitoredDirectory> directories=monitoredDirs.get(directory);    if (directories != null) {      Iterator<MonitoredDirectory> itr=directories.iterator();      while (itr.hasNext()) {        MonitoredDirectory curDirectory=itr.next();        if (curDirectory.handler.equals(handler)) {          DirectoryServer.deregisterMonitorProvider(curDirectory);          itr.remove();        }      }      if (directories.isEmpty()) {        monitoredDirs.remove(directory);      }    }  }}  }
class C{  public boolean noCache(){  return noCache;}  }
class C{  public RecordedRequest takeRequest() throws InterruptedException {  return requestQueue.take();}  }
class C{  public MaterialBarcodeScannerBuilder withOnly3DScanning(){  mBarcodeFormats=Barcode.QR_CODE | Barcode.DATA_MATRIX | Barcode.PDF417| Barcode.AZTEC;  return this;}  }
class C{  protected static Set combineOCs(Set one,Set two){  if (one == null || one.isEmpty()) {    return two;  }  if (two == null || two.isEmpty()) {    return one;  }  Set resultSet=new HashSet();  Iterator itr1=one.iterator();  while (itr1.hasNext()) {    String value1=(String)itr1.next();    resultSet.add(value1.toLowerCase());  }  Iterator itr2=two.iterator();  while (itr2.hasNext()) {    String value2=(String)itr2.next();    resultSet.add(value2.toLowerCase());  }  return resultSet;}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  public void close(){  closeSilently(context);}  }
class C{  public InitialContext() throws NamingException {  init(null);}  }
class C{  @Override public void doPut(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  StringManager smClient=StringManager.getManager(Constants.Package,request.getLocales());  String command=request.getPathInfo();  if (command == null)   command=request.getServletPath();  String path=request.getParameter("path");  ContextName cn=null;  if (path != null) {    cn=new ContextName(path,request.getParameter("version"));  }  String tag=request.getParameter("tag");  boolean update=false;  if ((request.getParameter("update") != null) && (request.getParameter("update").equals("true"))) {    update=true;  }  response.setContentType("text/plain;charset=" + Constants.CHARSET);  PrintWriter writer=response.getWriter();  if (command == null) {    writer.println(smClient.getString("managerServlet.noCommand"));  } else   if (command.equals("/deploy")) {    deploy(writer,cn,tag,update,request,smClient);  } else {    writer.println(smClient.getString("managerServlet.unknownCommand",command));  }  writer.flush();  writer.close();}  }
class C{  private void logOutIfPossible(){  try {    openActionBarOverflowOrOptionsMenu(InstrumentationRegistry.getTargetContext());    onView(withText(R.string.menu_logout)).perform(click());  } catch (  NoMatchingViewException e) {  }}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  load();  return super.modelToView(pos,a,b);}  }
class C{  public void remove_complete_expansion_room(ExpandRoomFreespaceComplete p_room){  if (p_room == null)   return;  ShapeTile room_shape=p_room.get_shape();  int room_layer=p_room.get_layer();  Collection<ExpandDoor> room_doors=p_room.get_doors();  for (  ExpandDoor curr_door : room_doors) {    ExpandRoom curr_neighbour=curr_door.other_room_complete(p_room);    if (curr_neighbour == null)     continue;    curr_neighbour.remove_door(curr_door);    ShapeTile neighbour_shape=curr_neighbour.get_shape();    ShapeTile intersection=room_shape.intersection(neighbour_shape);    if (intersection.dimension() != PlaDimension.LINE)     continue;    int[] touching_sides=room_shape.touching_sides(neighbour_shape);    PlaLineInt a_line=neighbour_shape.border_line(touching_sides[1]).opposite();    ShapeTileSimplex new_incomplete_room_shape=new ShapeTileSimplex(a_line);    ExpandRoomFreespaceIncomplete new_incomplete_room=add_incomplete_expansion_room(new_incomplete_room_shape,room_layer,intersection);    ExpandDoor new_door=new ExpandDoor(curr_neighbour,new_incomplete_room,PlaDimension.LINE);    curr_neighbour.add_door(new_door);    new_incomplete_room.add_door(new_door);  }  remove_all_doors(p_room);  p_room.remove_from_tree(art_search_tree);  complete_expansion_rooms.remove(p_room);  drill_page_array.invalidate(room_shape);}  }
class C{  public boolean supportsSAX(){  return true;}  }
class C{  public final boolean isInfoEnabled(){  return isLevelEnabled(SimpleLog.LOG_LEVEL_INFO);}  }
class C{  private void refreshStationUI(int station){  mTextStationValue.setText(FmRadioUtils.formatStation(station));  if (FmRadioStation.isFavoriteStation(mContext,station)) {    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_on_selector);    mTextStationName.setText(FmRadioStation.getStationName(mContext,station,FmRadioStation.STATION_TYPE_FAVORITE));  } else {    mButtonAddToFavorite.setImageResource(R.drawable.btn_fm_favorite_off_selector);    mTextStationName.setText("");  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public boolean isAllowed(SSOToken token,String resourceName,String actionName,Map envParameters) throws PolicyException, SSOException {  if (debug.messageEnabled()) {    debug.message("PolicyEvaluator:isAllowed():" + "token=" + token.getPrincipal().getName() + ":resourceName="+ resourceName+ ":actionName="+ actionName+ ":envParameters) : entering");  }  boolean actionAllowed=false;  Set actionNames=new HashSet(1);  actionNames.add(actionName);  PolicyDecision policyDecision=getPolicyDecision(token,resourceName,actionNames,envParameters);  ActionDecision actionDecision=(ActionDecision)policyDecision.getActionDecisions().get(actionName);  String trueValue=policyProperties.getTrueValue(serviceName,actionName);  String falseValue=policyProperties.getFalseValue(serviceName,actionName);  if ((actionDecision != null) && (trueValue != null) && (falseValue != null)) {    Set set=(Set)actionDecision.getValues();    if ((set != null)) {      if (set.contains(falseValue)) {        actionAllowed=false;      } else       if (set.contains(trueValue)) {        actionAllowed=true;      }    }  }  String result=actionAllowed ? "ALLOW" : "DENY";  String[] objs={resourceName,actionName,result};  if (PolicyProperties.ALLOW.equals(logActions) && actionAllowed) {    logAccessMessage(Level.INFO,ResBundleUtils.getString("policy_eval_allow",objs),token);  } else   if (PolicyProperties.DENY.equals(logActions) && !actionAllowed) {    logAccessMessage(Level.INFO,ResBundleUtils.getString("policy_eval_deny",objs),token);  } else   if (PolicyProperties.BOTH.equals(logActions) || PolicyProperties.DECISION.equals(logActions)) {    logAccessMessage(Level.INFO,ResBundleUtils.getString("policy_eval_result",objs),token);  }  if (debug.messageEnabled()) {    debug.message("PolicyEvaluator.isAllowed():" + "token=" + token.getPrincipal().getName() + ":resourceName="+ resourceName+ ":actionName="+ actionName+ ":returning: "+ actionAllowed);  }  return actionAllowed;}  }
class C{  public static void initializeProperties(Properties properties,boolean reset){  initializeProperties(properties,reset,false);}  }
class C{  public void checkAccess() throws SecurityException {  checkPermission();}  }
class C{  private void configure() throws NullLocationException, FormatterInitException {  String bufferSize=lmanager.getProperty(LogConstants.BUFFER_SIZE);  if (bufferSize != null && bufferSize.length() > 0) {    try {      recCountLimit=Integer.parseInt(bufferSize);    } catch (    NumberFormatException nfe) {      Debug.warning(fileName + ":FileHandler: NumberFormatException ",nfe);      if (Debug.messageEnabled()) {        Debug.message(fileName + ":FileHandler: Setting buffer size to 1");      }      recCountLimit=1;    }  } else {    Debug.warning(fileName + ":FileHandler: Invalid buffer size: " + bufferSize);    if (Debug.messageEnabled()) {      Debug.message(fileName + ":FileHandler: Setting buffer size to 1");    }    recCountLimit=1;  }  String status=lmanager.getProperty(LogConstants.TIME_BUFFERING_STATUS);  if (status != null && status.equalsIgnoreCase("ON")) {    timeBufferingEnabled=true;  }  String strCount=lmanager.getProperty(LogConstants.NUM_HISTORY_FILES);  if ((strCount == null) || (strCount.length() == 0)) {    count=0;  } else {    count=Integer.parseInt(strCount);  }  String strMaxFileSize=lmanager.getProperty(LogConstants.MAX_FILE_SIZE);  if ((strMaxFileSize == null) || (strMaxFileSize.length() == 0)) {    maxFileSize=0L;  } else {    maxFileSize=Long.parseLong(strMaxFileSize);  }  location=lmanager.getProperty(LogConstants.LOG_LOCATION);  if ((location == null) || (location.length() == 0)) {    throw new NullLocationException("Location Not Specified");  }  if (!location.endsWith(File.separator)) {    location+=File.separator;  }  String strFormatter=lmanager.getProperty(LogConstants.ELF_FORMATTER);  try {    Class clz=Class.forName(strFormatter);    formatter=(Formatter)clz.newInstance();  } catch (  Exception e) {    throw new FormatterInitException("Unable to initialize Formatter Class" + e);  }  String strRotateEnabled=lmanager.getProperty(LogConstants.ENABLE_ROTATION);  if (strRotateEnabled != null && !strRotateEnabled.isEmpty()) {    rotateEnabled=Boolean.parseBoolean(strRotateEnabled);  }  if (rotateEnabled) {    String rotation=lmanager.getProperty(LogConstants.LOGFILE_ROTATION);    try {      if (rotation != null) {        rotationInterval=Integer.parseInt(rotation);      }    } catch (    NumberFormatException nfe) {      rotationInterval=-1;    }    if (rotationInterval > 0) {      lastRotation=currentTimeMillis();      rotatingBySize=false;    }  }}  }
class C{  public SearchResultReference(List<String> referralURLs,List<Control> controls){  if (referralURLs == null) {    this.referralURLs=new ArrayList<>();  } else {    this.referralURLs=referralURLs;  }  if (controls == null) {    this.controls=new ArrayList<>(0);  } else {    this.controls=controls;  }}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append(IFSConstants.XML_PREFIX).append(IFSConstants.DEFAULT_ENCODING).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE);  }  String prefix="";  String uri="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uri=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uri=IFSConstants.LIB_NAMESPACE_STRING;    }  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.IDP_LIST).append(uri).append(IFSConstants.RIGHT_ANGLE);  if (idpEntries != null) {    xml.append(idpEntries.toXMLString(true,false));  }  if ((this.getCompleteList != null) && (getCompleteList != Collections.EMPTY_LIST)) {    Iterator i=getCompleteList.iterator();    while (i.hasNext()) {      xml.append((String)i.next());    }  }  xml.append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.IDP_LIST).append(IFSConstants.RIGHT_ANGLE);  return xml.toString();}  }
class C{  public List<String> search(CrestQuery crestQuery,Map<String,Set<String>> searchModifiers,SSOToken admin) throws ResourceException {  List<String> rv=new ArrayList<>();  try {    String realm="/";    String objectType="User";    if (searchModifiers != null) {      realm=attractValues("realm",searchModifiers,"/");      objectType=attractValues("objecttype",searchModifiers,"User");    }    AMIdentityRepository repo=getRepo(admin,realm);    IdType idType=getIdType(objectType);    if (idType != null) {      List<AMIdentity> objList=fetchAMIdentities(idType,crestQuery,false,repo,searchModifiers);      if (objList != null && !objList.isEmpty()) {        List<String> names=getNames(realm,idType,objList);        if (!names.isEmpty()) {          for (          String name : names) {            rv.add(name);          }        }      }    } else {      debug.error("IdentityServicesImpl:search unsupported IdType" + objectType);      throw new BadRequestException("search unsupported IdType: " + objectType);    }  } catch (  IdRepoException e) {    debug.error("IdentityServicesImpl:search",e);    throw new InternalServerErrorException(e.getMessage());  }catch (  SSOException e) {    debug.error("IdentityServicesImpl:search",e);    throw new InternalServerErrorException(e.getMessage());  }catch (  ObjectNotFound e) {    debug.error("IdentityServicesImpl:search",e);    throw new NotFoundException(e.getMessage());  }  return rv;}  }
class C{  private void decrementInDegree(){  --inDegree;}  }
class C{  public void createEntityDescriptor(String realm,EntityDescriptorElement descriptor) throws SAML2MetaException {  debug.message("SAML2MetaManager.createEntityDescriptor: called.");  createEntity(realm,descriptor,null);}  }
class C{  public void archive(String fileName,String location){  if ((fileName == null) || (fileName.length() == 0)) {    Debug.error("Archiver:archive:FileName is null");    return;  } else   if ((location == null) || (location.length() == 0)) {    Debug.error("Archiver:archive:Location is null");    return;  }  Logger logger=(com.sun.identity.log.Logger)Logger.getLogger(fileName);  filesPerKeystoreCounter++;  Date d=newDate();  String timestampedFileName=location + PREFIX + fileName+ "."+ sdf.format(d).toString();  String completePath=location + PREFIX + fileName;  File f=new File(completePath);  f.renameTo(new File(timestampedFileName));  SecureFileHandler.addToCurrentFileList(fileName,fileName + "." + sdf.format(d).toString(),fileName);  return;}  }
class C{  public void goToNextColor(){  setColorIndex(getNextColorIndex());}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void jspError(Mark where,Exception e,String errCode,String... args) throws JasperException {  dispatch(where,errCode,args,e);}  }
class C{  protected void handleComment(char text[]){}  }
class C{  public Builder withColor(Color... colors) throws IllegalArgumentException {  Validate.notNull(colors,"Cannot have null colors");  if (colors.length == 0) {    return this;  }  ImmutableList.Builder<Color> list=this.colors;  for (  Color color : colors) {    Validate.notNull(color,"Color cannot be null");    list.add(color);  }  return this;}  }
class C{  public AuthnStatement createAuthnStatement(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.AUTHN_STATEMENT);  if (obj == null) {    return new AuthnStatementImpl();  } else {    return (AuthnStatement)obj;  }}  }
class C{  public static IOFileFilter nameFileFilter(String name,IOCase caseSensitivity){  return new NameFileFilter(name,caseSensitivity);}  }
class C{  public static void initializeProperties(String propertyName,String propertyValue){  if (systemProperties != null) {    systemProperties.initializeProperties(propertyName,propertyValue);  }}  }
class C{  public static int convertDpToPixel(final float dp,final Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  return (int)(dp * (metrics.densityDpi / 160f));}  }
class C{  public static Future<VersionIdentifier> retrieveLatestVersion(final ExecutorService e){  return e.submit(new VersionRetriever());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementhasattribute03.class,args);}  }
class C{  EvaluationMonitoringStore(final RateTimer timer,final RateWindow rateWindow){  this.timerGetter=timer;  this.rateWindow=rateWindow;}  }
class C{  public NoSuchAlgorithmException(String msg){  super(msg);}  }
class C{  public synchronized boolean retainAll(Collection<?> c){  return super.retainAll(c);}  }
class C{  void encodeHeader(byte msgType,ByteArrayBuilder builder,short protocolVersion){  builder.appendByte(msgType);  builder.appendByte(protocolVersion);  builder.appendLongUTF8(generationId);  builder.appendByte(groupId);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectStatementElement createSubjectStatementElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectStatementElementImpl();}  }
class C{  public PdfCanvas closePath(){  contentStream.getOutputStream().writeBytes(h);  return this;}  }
class C{  public boolean isWritable(){  return isWritable;}  }
class C{  public long nextLongUTF8() throws DataFormatException {  return Long.valueOf(nextString());}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  public NSObject lastObject(){  return array[array.length - 1];}  }
class C{  private static void sort(int[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        int ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        int a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      int last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    int t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    int t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    int t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    int t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    int pivot1=a[e2];    int pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      int ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        int ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    int pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      int ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  protected static void updateCache(String dn,int eventType){  if ((dn == null) || !LDAPUtils.isDN(dn)) {    return;  }  String rfcDN=LDAPUtils.formatToRFC(dn);switch (eventType) {case AMEvent.OBJECT_ADDED:    return;case AMEvent.OBJECT_RENAMED:synchronized (orgMapCache) {    orgMapCache.clear();  }return;case AMEvent.OBJECT_REMOVED:case AMEvent.OBJECT_CHANGED:synchronized (orgMapCache) {Iterator keys=orgMapCache.keySet().iterator();Set removeKeys=new HashSet();while (keys.hasNext()) {  String key=(String)keys.next();  String val=(String)orgMapCache.get(key);  if (val.equalsIgnoreCase(rfcDN)) {    removeKeys.add(key);  }}if (removeKeys != null) {  keys=removeKeys.iterator();  while (keys.hasNext()) {    String removeKey=(String)keys.next();    orgMapCache.remove(removeKey);  }}}}}  }
class C{  public static View showTips(View targetView,TipsType tipsType){  Tips tips=tipsType.createTips(targetView.getContext());  return tips.applyTo(targetView,tipsType.ordinal());}  }
class C{  @Deprecated public void rewind(){  reset();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XML","");  assertTrue("throw_True",state);}  }
class C{  @Override public boolean equals(Object obj){  if (!super.equals(obj)) {    return false;  }  SimpleDateFormat that=(SimpleDateFormat)obj;  return (pattern.equals(that.pattern) && formatData.equals(that.formatData));}  }
class C{  public AuthPermission(String name,String actions){  super("createLoginContext".equals(name) ? "createLoginContext.*" : name,actions);}  }
class C{  public void refresh(){}  }
class C{  public static Address featureToAddress(CarmenFeature geocodingFeature,Locale locale){  Address address=new Address(locale);  address.setAddressLine(0,geocodingFeature.getPlaceName());  address.setFeatureName(geocodingFeature.getText());  Position position=geocodingFeature.asPosition();  address.setLongitude(position.getLongitude());  address.setLatitude(position.getLatitude());  return address;}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().deleteFoo(foo);}  }
class C{  public ProxyRequireParser(String require){  super(require);}  }
class C{  public XMLString newstr(FastStringBuffer fsb,int start,int length){  return new XStringForFSB(fsb,start,length);}  }
class C{  public void start_polygonshape_item(Point2D p_point){  if (board_is_read_only)   return;  PlaPointFloat location=gdi_context.coordinate_transform.screen_to_board(p_point);  set_interactive_state(StateConstructPolygon.get_instance(location,interactive_state,this,actlog));}  }
class C{  protected int invalidateSessions(ContextName cn,String[] sessionIds,StringManager smClient){  if (null == sessionIds) {    return 0;  }  int nbAffectedSessions=0;  for (int i=0; i < sessionIds.length; ++i) {    String sessionId=sessionIds[i];    HttpSession session=getSessionForNameAndId(cn,sessionId,smClient).getSession();    if (null == session) {      if (debug >= 1) {        log("WARNING: can't invalidate null session " + sessionId);      }      continue;    }    try {      session.invalidate();      ++nbAffectedSessions;      if (debug >= 1) {        log("Invalidating session id " + sessionId);      }    } catch (    IllegalStateException ise) {      if (debug >= 1) {        log("Can't invalidate already invalidated session id " + sessionId);      }    }  }  return nbAffectedSessions;}  }
class C{  @Override public void backgroundProcess(){  if (clusterDeployer != null)   clusterDeployer.backgroundProcess();  if (isHeartbeatBackgroundEnabled() && channel != null)   channel.heartbeat();  fireLifecycleEvent(Lifecycle.PERIODIC_EVENT,null);}  }
class C{  public KeyStoreJwtTokenConfig withTokenLifeTimeInSeconds(long tokenLifeTimeInSeconds){  this.tokenLifeTimeInSeconds=tokenLifeTimeInSeconds;  return this;}  }
class C{  private void sched(TimerTask task,long time,long period){  if (time < 0)   throw new IllegalArgumentException("Illegal execution time.");  if (Math.abs(period) > (Long.MAX_VALUE >> 1))   period>>=1;synchronized (queue) {    if (!thread.newTasksMayBeScheduled)     throw new IllegalStateException("Timer already cancelled.");synchronized (task.lock) {      if (task.state != TimerTask.VIRGIN)       throw new IllegalStateException("Task already scheduled or cancelled");      task.nextExecutionTime=time;      task.period=period;      task.state=TimerTask.SCHEDULED;    }    queue.add(task);    if (queue.getMin() == task)     queue.notify();  }}  }
class C{  public static CompareResult newCompareResult(final ResultCode resultCode){  Reject.ifNull(resultCode);  return new CompareResultImpl(resultCode);}  }
class C{  public void makeImmutable(){  if (isMutable) {    if (audiences != null) {      audiences=Collections.unmodifiableList(audiences);    }    isMutable=false;  }}  }
class C{  public ForgottenPasswordBuilder(){  subjectTranslations=new HashMap<>();  messageTranslations=new HashMap<>();  validQueryAttributes=new HashSet<>();}  }
class C{  public void deleteSubConfigurations(Set names) throws AMConsoleException {  subConfigMeta.setParentId("/");  subConfigMeta.deleteSubConfigurations(names);}  }
class C{  public INV_POLICY(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public boolean isDefaultNamespace(String namespaceURI){  return false;}  }
class C{  public static final byte[] encodeQuotedPrintable(BitSet printable,byte[] bytes){  if (bytes == null) {    return null;  }  if (printable == null) {    printable=PRINTABLE_CHARS;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b < 0) {      b=256 + b;    }    if (printable.get(b)) {      buffer.write(b);    } else {      encodeQuotedPrintable(b,buffer);    }  }  return buffer.toByteArray();}  }
class C{  public static File downloadFileToTemp(final String fileUrl,final String ext) throws IOException {  final File file=File.createTempFile("jk-",ext);  HttpUtil.downloadFile(fileUrl,file.getAbsolutePath());  return file;}  }
class C{  public void mouseClicked(MouseEvent e){}  }
class C{  public synchronized void co_exit_to(Object arg_object,int thisCoroutine,int toCoroutine) throws java.lang.NoSuchMethodException {  if (!m_activeIDs.get(toCoroutine))   throw new java.lang.NoSuchMethodException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COROUTINE_NOT_AVAIL,new Object[]{Integer.toString(toCoroutine)}));  m_yield=arg_object;  m_nextCoroutine=toCoroutine;  m_activeIDs.clear(thisCoroutine);  notify();}  }
class C{  public static Builder newBuilder(AclEntry entry){  return new Builder(entry.type,entry.who,entry.perms,entry.flags);}  }
class C{  private int hitToCaret(TextHitInfo hit){  int hitIndex=hit.getCharIndex();  if (hitIndex < 0) {    return textLine.isDirectionLTR() ? 0 : characterCount;  } else   if (hitIndex >= characterCount) {    return textLine.isDirectionLTR() ? characterCount : 0;  }  int visIndex=textLine.logicalToVisual(hitIndex);  if (hit.isLeadingEdge() != textLine.isCharLTR(hitIndex)) {    ++visIndex;  }  return visIndex;}  }
class C{  public SuballocatedIntVector(int blocksize){  this(blocksize,NUMBLOCKS_DEFAULT);}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarDragWindowBorder(context,g,x,y,w,h);}  }
class C{  public void deleteMetaObject(int index){  MetaObjects.set(index,null);}  }
class C{  public XMLStringBuffer(int size){  ch=new char[size];}  }
class C{  public boolean isResetChangeNumber(){  return isSubcommand(RESET_CHANGE_NUMBER_SUBCMD_NAME);}  }
class C{  public static void log(CommandManager mgr,int type,Level level,String msgid,String[] msgdata,SSOToken ssoToken) throws CLIException {  if (!mgr.isLogOff()) {    Logger logger;    String logName=mgr.getLogName();switch (type) {case LOG_ERROR:      logger=(com.sun.identity.log.Logger)Logger.getLogger(logName + ".error");    break;default :  logger=(com.sun.identity.log.Logger)Logger.getLogger(logName + ".access");}try {LogMessageProvider msgProvider=MessageProviderFactory.getProvider(LOG_MSG_XML);SSOToken adminSSOToken=AccessController.doPrivileged(AdminTokenAction.getInstance());if (ssoToken == null) {  ssoToken=adminSSOToken;}if (logger.isLoggable(level)) {  LogRecord logRec=msgProvider.createLogRecord(msgid,msgdata,ssoToken);  if (logRec != null) {    logger.log(logRec,adminSSOToken);  }}logToAuditService(type,msgid,msgdata,ssoToken,msgProvider,adminSSOToken);} catch (Exception e) {throw new CLIException(e,ExitCodes.CANNOT_WRITE_LOG);}}}  }
class C{  public WildcardFileFilter(String[] wildcards){  this(wildcards,null);}  }
class C{  public Validator createValidator() throws JAXBException {  return new ValidatorImpl(this);}  }
class C{  protected void onTakeView(V view){}  }
class C{  protected static boolean isExternalGetAttributesEnabled(String orgDN){  Set attrVal;  SSOToken token=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  try {    ServiceConfig sc=AMServiceUtils.getOrgConfig(token,orgDN,ADMINISTRATION_SERVICE);    if (sc != null) {      Map attributes=sc.getAttributes();      attrVal=(Set)attributes.get(EXTERNAL_ATTRIBUTES_FETCH_ENABLED_ATTR);    } else {      attrVal=getDefaultGlobalConfig(token,EXTERNAL_ATTRIBUTES_FETCH_ENABLED_ATTR);    }  } catch (  Exception ee) {    attrVal=getDefaultGlobalConfig(token,EXTERNAL_ATTRIBUTES_FETCH_ENABLED_ATTR);  }  boolean enabled=false;  if (attrVal != null && !attrVal.isEmpty()) {    String val=(String)attrVal.iterator().next();    enabled=(val.equalsIgnoreCase("true"));  }  if (debug.messageEnabled()) {    debug.message("DirectoryServicesImpl." + "isExternalGetAttributeEnabled() = " + enabled);  }  return enabled;}  }
class C{  private void readObject(ObjectInputStream s) throws InvalidObjectException {  throw new InvalidObjectException("Deserialization via serialization delegate");}  }
class C{  PersistentCompressedSchema(ServerContext serverContext,final Storage storage,WriteableTransaction txn,AccessMode accessMode) throws StorageRuntimeException, InitializationException {  super(serverContext);  this.storage=storage;  load(txn,accessMode.isWriteable());}  }
class C{  public void processLocalNotification(SessionNotification sessionNotification){  processNotification(sessionNotification,true);}  }
class C{  public static byte[] decode(String s,int options){  byte[] bytes;  try {    bytes=s.getBytes(PREFERRED_ENCODING);  } catch (  java.io.UnsupportedEncodingException uee) {    bytes=s.getBytes();  }  bytes=decode(bytes,0,bytes.length,options);  if (bytes != null && bytes.length >= 4) {    int head=(bytes[0] & 0xff) | ((bytes[1] << 8) & 0xff00);    if (java.util.zip.GZIPInputStream.GZIP_MAGIC == head) {      java.io.ByteArrayInputStream bais=null;      java.util.zip.GZIPInputStream gzis=null;      java.io.ByteArrayOutputStream baos=null;      byte[] buffer=new byte[2048];      int length=0;      try {        baos=new java.io.ByteArrayOutputStream();        bais=new java.io.ByteArrayInputStream(bytes);        gzis=new java.util.zip.GZIPInputStream(bais);        while ((length=gzis.read(buffer)) >= 0) {          baos.write(buffer,0,length);        }        bytes=baos.toByteArray();      } catch (      java.io.IOException e) {      } finally {        try {          baos.close();        } catch (        Exception e) {        }        try {          gzis.close();        } catch (        Exception e) {        }        try {          bais.close();        } catch (        Exception e) {        }      }    }  }  return bytes;}  }
class C{  protected boolean accept(Component aComponent){  if (!aComponent.canBeFocusOwner()) {    return false;  }  if (!(aComponent instanceof Window)) {    for (Container enableTest=aComponent.getParent(); enableTest != null; enableTest=enableTest.getParent()) {      if (!(enableTest.isEnabled() || enableTest.isLightweight())) {        return false;      }      if (enableTest instanceof Window) {        break;      }    }  }  return true;}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.CredentialsContextType createCredentialsContextType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.CredentialsContextTypeImpl();}  }
class C{  private static long longMultiplyPowerTen(long val,int n){  if (val == 0 || n <= 0)   return val;  long[] tab=LONG_TEN_POWERS_TABLE;  long[] bounds=THRESHOLDS_TABLE;  if (n < tab.length && n < bounds.length) {    long tenpower=tab[n];    if (val == 1)     return tenpower;    if (Math.abs(val) <= bounds[n])     return val * tenpower;  }  return INFLATED;}  }
class C{  public Helper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public static List<Foo> findByField2(boolean field2){  return getPersistence().findByField2(field2);}  }
class C{  public String toString(){  String result=super.toString();  int vmcid=minor & 0xFFFFF000;switch (vmcid) {case OMGVMCID.value:    result+="  vmcid: OMG";  break;case SUNVMCID.value:result+="  vmcid: SUN";break;default :result+="  vmcid: 0x" + Integer.toHexString(vmcid);break;}int mc=minor & 0x00000FFF;result+="  minor code: " + mc;switch (completed.value()) {case CompletionStatus._COMPLETED_YES:result+="  completed: Yes";break;case CompletionStatus._COMPLETED_NO:result+="  completed: No";break;case CompletionStatus._COMPLETED_MAYBE:default :result+=" completed: Maybe";break;}return result;}  }
class C{  public Object parse(String s) throws XMLException {  ByteArrayInputStream bin=null;  String st=stripWhitespaces(s);  try {    bin=new ByteArrayInputStream(st.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException ex) {    throw new XMLException("Encoding not supported:" + ex.toString());  }  return parse(bin);}  }
class C{  public void startWholeAnimation(){  if (animationState > 0 || !isWindowFocused) {    return;  }  initAnimationParameters();  if (mShrinkingController == null || mProgressingController == null) {    initShrinkingAnimationController();    initProgressingAnimationController();  }  if (mShrinkingController.isRunning() || mProgressingController.isRunning()) {    mShrinkingController.end();    mShrinkingController.cancel();    mProgressingController.end();    mProgressingController.cancel();  }  mShrinkingController.start();}  }
class C{  public boolean overlaps(ShapeTileOctagon p_other){  int is_lx;  int is_rx;  if (p_other.oct_lx > this.oct_lx) {    is_lx=p_other.oct_lx;  } else {    is_lx=this.oct_lx;  }  if (p_other.oct_rx < this.oct_rx) {    is_rx=p_other.oct_rx;  } else {    is_rx=this.oct_rx;  }  if (is_lx >= is_rx) {    return false;  }  int is_ly;  int is_uy;  if (p_other.oct_ly > this.oct_ly) {    is_ly=p_other.oct_ly;  } else {    is_ly=this.oct_ly;  }  if (p_other.oct_uy < this.oct_uy) {    is_uy=p_other.oct_uy;  } else {    is_uy=this.oct_uy;  }  if (is_ly >= is_uy) {    return false;  }  int is_llx;  int is_urx;  if (p_other.oct_llx > this.oct_llx) {    is_llx=p_other.oct_llx;  } else {    is_llx=this.oct_llx;  }  if (p_other.oct_urx < this.oct_urx) {    is_urx=p_other.oct_urx;  } else {    is_urx=this.oct_urx;  }  if (is_llx >= is_urx) {    return false;  }  int is_ulx;  int is_lrx;  if (p_other.oct_ulx > this.oct_ulx) {    is_ulx=p_other.oct_ulx;  } else {    is_ulx=this.oct_ulx;  }  if (p_other.oct_lrx < this.oct_lrx) {    is_lrx=p_other.oct_lrx;  } else {    is_lrx=this.oct_lrx;  }  if (is_ulx >= is_lrx) {    return false;  }  return true;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SynthPopupMenuUI();}  }
class C{  public NSDate(Date d){  if (d == null)   throw new IllegalArgumentException("Date cannot be null");  date=d;}  }
class C{  public static Filter newOAuth2ResourceServerFilter(final String realm,final Set<String> scopes,final AccessTokenResolver resolver,final String authzIdTemplate){  return createResourceServerFilter(realm,scopes,resolver,authzIdTemplate);}  }
class C{  public final void println(final LocalizableMessage msg,final int indent){  if (!isQuiet()) {    out.println(wrapText(msg,MAX_LINE_WIDTH,indent));  }}  }
class C{  private void createNamingContext() throws NamingException {  if (container instanceof Server) {    compCtx=namingContext;    envCtx=namingContext;  } else {    compCtx=namingContext.createSubcontext("comp");    envCtx=compCtx.createSubcontext("env");  }  int i;  if (log.isDebugEnabled())   log.debug("Creating JNDI naming context");  if (namingResources == null) {    namingResources=new NamingResourcesImpl();    namingResources.setContainer(container);  }  ContextResourceLink[] resourceLinks=namingResources.findResourceLinks();  for (i=0; i < resourceLinks.length; i++) {    addResourceLink(resourceLinks[i]);  }  ContextResource[] resources=namingResources.findResources();  for (i=0; i < resources.length; i++) {    addResource(resources[i]);  }  ContextResourceEnvRef[] resourceEnvRefs=namingResources.findResourceEnvRefs();  for (i=0; i < resourceEnvRefs.length; i++) {    addResourceEnvRef(resourceEnvRefs[i]);  }  ContextEnvironment[] contextEnvironments=namingResources.findEnvironments();  for (i=0; i < contextEnvironments.length; i++) {    addEnvironment(contextEnvironments[i]);  }  ContextEjb[] ejbs=namingResources.findEjbs();  for (i=0; i < ejbs.length; i++) {    addEjb(ejbs[i]);  }  ContextService[] services=namingResources.findServices();  for (i=0; i < services.length; i++) {    addService(services[i]);  }  if (container instanceof Context) {    try {      Reference ref=new TransactionRef();      compCtx.bind("UserTransaction",ref);      ContextTransaction transaction=namingResources.getTransaction();      if (transaction != null) {        Iterator<String> params=transaction.listProperties();        while (params.hasNext()) {          String paramName=params.next();          String paramValue=(String)transaction.getProperty(paramName);          StringRefAddr refAddr=new StringRefAddr(paramName,paramValue);          ref.add(refAddr);        }      }    } catch (    NameAlreadyBoundException e) {    }catch (    NamingException e) {      log.error(sm.getString("naming.bindFailed",e));    }  }  if (container instanceof Context) {    try {      compCtx.bind("Resources",((Context)container).getResources());    } catch (    NamingException e) {      log.error(sm.getString("naming.bindFailed",e));    }  }}  }
class C{  public void makeImmutable(){  mutable=false;}  }
class C{  protected boolean copy(File from,File to){  try {    if (!to.exists()) {      if (!to.createNewFile()) {        log.error(sm.getString("fileNewFail",to));        return false;      }    }  } catch (  IOException e) {    log.error(sm.getString("farmWarDeployer.fileCopyFail",from,to),e);    return false;  }  try (java.io.FileInputStream is=new java.io.FileInputStream(from);java.io.FileOutputStream os=new java.io.FileOutputStream(to,false)){    byte[] buf=new byte[4096];    while (true) {      int len=is.read(buf);      if (len < 0)       break;      os.write(buf,0,len);    }  } catch (  IOException e) {    log.error(sm.getString("farmWarDeployer.fileCopyFail",from,to),e);    return false;  }  return true;}  }
class C{  public void add(){  count.incrementAndGet();  rateWindow.incrementForTimestamp(timer.now());}  }
class C{  AbstractMap.SimpleImmutableEntry<K,V> createSnapshot(){  V v=getValidValue();  if (v == null)   return null;  return new AbstractMap.SimpleImmutableEntry<K,V>(key,v);}  }
class C{  public List<PdfObject> parse(List<PdfObject> ls) throws IOException {  if (ls == null)   ls=new ArrayList<>(); else   ls.clear();  PdfObject ob=null;  while ((ob=readObject()) != null) {    ls.add(ob);    if (tokeniser.getTokenType() == PdfTokenizer.TokenType.Other) {      if (ob.toString().equals("BI")) {        PdfStream inlineImageAsStream=InlineImageParsingUtils.parse(this,currentResources.getResource(PdfName.ColorSpace));        ls.clear();        ls.add(inlineImageAsStream);        ls.add(new PdfLiteral("EI"));      }      break;    }  }  return ls;}  }
class C{  @Override public int hashCode(){  int code=super.hashCode();  if (eCondition != null) {    code+=eCondition.hashCode();  }  if (pConditionName != null) {    code+=pConditionName.hashCode();  }  return code;}  }
class C{  public void readConfiguration(final ConnectionWrapper connWrapper){  final List<Exception> errors=new ArrayList<>();  final Set<ConnectionHandlerDescriptor> connectionHandlers=new HashSet<>();  final Set<BackendDescriptor> backendDescriptors=new HashSet<>();  final Set<DN> as=new HashSet<>();  final Set<TaskEntry> tasks=new HashSet<>();  rootMonitor=null;  jvmMemoryUsage=null;  systemInformation=null;  entryCaches=null;  workQueue=null;  versionMonitor=null;  hmConnectionHandlersMonitor.clear();  readSchemaIfNeeded(connWrapper,errors);  try {    readConfig(connWrapper,connectionHandlers,backendDescriptors,as,errors);  } catch (  final Throwable t) {    errors.add(new OnlineUpdateException(ERR_READING_CONFIG_LDAP.get(t),t));  }  for (  Exception oe : errors) {    logger.warn(LocalizableMessage.raw("Error reading configuration: " + oe,oe));  }  administrativeUsers=Collections.unmodifiableSet(as);  listeners=Collections.unmodifiableSet(connectionHandlers);  backends=Collections.unmodifiableSet(backendDescriptors);  try {    updateMonitorInformation(connWrapper,errors);  } catch (  Throwable t) {    logger.warn(LocalizableMessage.raw("Error reading monitoring: " + t,t));    errors.add(new OnlineUpdateException(ERR_READING_CONFIG_LDAP.get(t),t));  }  try {    updateTaskInformation(connWrapper,errors,tasks);  } catch (  Throwable t) {    logger.warn(LocalizableMessage.raw("Error reading task information: " + t,t));    errors.add(new OnlineUpdateException(ERR_READING_CONFIG_LDAP.get(t),t));  }  taskEntries=Collections.unmodifiableSet(tasks);  for (  ConnectionHandlerDescriptor ch : getConnectionHandlers()) {    ch.setMonitoringEntries(getMonitoringEntries(ch));  }  if (adminConnector != null) {    adminConnector.setMonitoringEntries(getMonitoringEntries(adminConnector));  }  exceptions=Collections.unmodifiableList(errors);}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  font=null;  super.changedUpdate(e,a,f);}  }
class C{  public static SchemaBuilder addOpenDJProviderSchema(final SchemaBuilder builder){  for (  final AttributeType attributeType : ATTRIBUTE_TYPES) {    builder.buildAttributeType(attributeType).addToSchema();  }  for (  final ObjectClass objectClass : OBJECT_CLASSES) {    builder.buildObjectClass(objectClass).addToSchema();  }  return builder;}  }
class C{  public IDPList createIDPList() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.IDPLIST);  if (obj == null) {    return new IDPListImpl();  } else {    return (IDPList)obj;  }}  }
class C{  @ApiOperation(value="read all the databases",notes="delete the document Warning: once the document is deleted cant be restored",response=Database.class) @ApiModelRequest(model=Database.class,required=true,modelName="Database") public void delete(Request request,Response response){  String database=request.getHeader(Constants.Url.DATABASE,"No database provided");  String table=request.getHeader(Constants.Url.TABLE,"No table provided");  String id=request.getHeader(Constants.Url.DOCUMENT_ID,"No document ID supplied");  documentService.delete(database,table,new Identifier(database,table,UUID.fromString(id)));  response.setResponseNoContent();}  }
class C{  public static void ok(String p_message){  javax.swing.JOptionPane.showMessageDialog(null,p_message);}  }
class C{  public long insert(Long ruleID,Long actionID,Integer failureType,String message){  if (ruleID == null || actionID == null || failureType == null) {    throw new IllegalArgumentException("insert parameter null.");  }  ContentValues initialValues=new ContentValues();  initialValues.put(KEY_RULEID,ruleID);  initialValues.put(KEY_ACTIONID,actionID);  initialValues.put(KEY_FAILURE_TYPE,failureType);  initialValues.put(KEY_MESSAGE,message);  initialValues.put(KEY_TIMESTAMP,(new Date()).getTime());  return database.insert(DATABASE_TABLE,null,initialValues);}  }
class C{  @Override public int show(final FragmentTransaction transaction,final String tag){  return super.show(transaction,tag);}  }
class C{  public void format(CommandManager mgr) throws CLIException {  StringBuffer buff=new StringBuffer();  buff.append("\n\n");  formatUsage(mgr,buff);  formatGlobalOptions(mgr,buff);  formatSubcmds(mgr,buff);  mgr.getOutputWriter().printlnMessage(buff.toString());}  }
class C{  private static Map<CharSequence,CharSequence> toCharSeqMap(Map<String,String> stringMap){  Map<CharSequence,CharSequence> charSeqMap=new HashMap<CharSequence,CharSequence>();  for (  Map.Entry<String,String> entry : stringMap.entrySet()) {    charSeqMap.put(entry.getKey(),entry.getValue());  }  return charSeqMap;}  }
class C{  public final void testGetPrimeExponentP(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrimeExponentP()));}  }
class C{  private final void internalMapWildcardWrapper(MappedWrapper[] wrappers,int nesting,CharChunk path,MappingData mappingData){  int pathEnd=path.getEnd();  int lastSlash=-1;  int length=-1;  int pos=find(wrappers,path);  if (pos != -1) {    boolean found=false;    while (pos >= 0) {      if (path.startsWith(wrappers[pos].name)) {        length=wrappers[pos].name.length();        if (path.getLength() == length) {          found=true;          break;        } else         if (path.startsWithIgnoreCase("/",length)) {          found=true;          break;        }      }      if (lastSlash == -1) {        lastSlash=nthSlash(path,nesting + 1);      } else {        lastSlash=lastSlash(path);      }      path.setEnd(lastSlash);      pos=find(wrappers,path);    }    path.setEnd(pathEnd);    if (found) {      mappingData.wrapperPath.setString(wrappers[pos].name);      if (path.getLength() > length) {        mappingData.pathInfo.setChars(path.getBuffer(),path.getOffset() + length,path.getLength() - length);      }      mappingData.requestPath.setChars(path.getBuffer(),path.getOffset(),path.getLength());      mappingData.wrapper=wrappers[pos].object;      mappingData.jspWildCard=wrappers[pos].jspWildCard;      mappingData.matchType=MappingMatch.PATH;    }  }}  }
class C{  @Deprecated public PdfOutline(String title,PdfDictionary content,PdfOutline parent){  this.title=title;  this.content=content;  this.parent=parent;  this.pdfDoc=parent.pdfDoc;  content.makeIndirect(parent.pdfDoc);}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  List<String> appTypeNames=(List)rc.getOption(PARAM_APPL_TYPE_NAMES);  String[] param={appTypeNames.toString()};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_APPLICATION_TYPES",param);  Subject adminSubject=getAdminSubject();  try {    for (    String appTypeName : appTypeNames) {      ApplicationType applType=ApplicationTypeManager.getAppplicationType(adminSubject,appTypeName);      if (applType != null) {        ApplicationTypeManager.removeApplicationType(adminSubject,appTypeName);      }    }    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("delete-application-types-succeeded"),(Object[])param));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_DELETE_APPLICATION_TYPES",param);  } catch (  EntitlementException e) {    String[] params={appTypeNames.toString(),e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_DELETE_APPLICATION_TYPES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public SSOToken createSSOToken(HttpServletRequest request) throws SSOException {  try {    SessionID sid=new SessionID(request);    Session session=sessionCache.getSession(sid);    if (sid != null) {      Boolean cookieMode=sid.getCookieMode();      if (debug.messageEnabled()) {        debug.message("cookieMode is :" + cookieMode);      }      if (cookieMode != null) {        session.setCookieMode(cookieMode);      }    }    if (checkIP && !isIPValid(session,ClientUtils.getClientIPAddress(request))) {      throw new Exception(SSOProviderBundle.getString("invalidIP"));    }    SSOToken ssoToken=new SSOTokenImpl(session);    return ssoToken;  } catch (  Exception e) {    if (debug.messageEnabled()) {      debug.message("could not create SSOToken from HttpRequest (" + e.getMessage() + ")");    }    throw new SSOException(e);  }}  }
class C{  public InvalidClassException(String cname,String reason){  super(reason);  classname=cname;}  }
class C{  public void parseField(VariableDef v,STypeDef type,List<Import> imports,int mode,boolean isStatic,boolean isParam) throws SyntaxException {  SFieldDef fieldDef=new SFieldDef(v.line_col());  fieldDef.setName(v.getName());  fieldDef.setType(v.getType() == null ? getTypeWithName("java.lang.Object",v.line_col()) : getTypeWithAccess(v.getType(),imports));  fieldDef.setDeclaringType(type);  boolean hasAccessModifier=false;  for (  Modifier m : v.getModifiers()) {    if (m.modifier.equals(Modifier.Available.PUBLIC) || m.modifier.equals(Modifier.Available.PRIVATE) || m.modifier.equals(Modifier.Available.PROTECTED)|| m.modifier.equals(Modifier.Available.PKG)) {      hasAccessModifier=true;    }  }  if (!hasAccessModifier) {    if (mode == PARSING_CLASS) {      if (isStatic) {        fieldDef.modifiers().add(SModifier.PUBLIC);      } else {        fieldDef.modifiers().add(SModifier.PRIVATE);      }    } else     if (mode == PARSING_INTERFACE) {      fieldDef.modifiers().add(SModifier.PUBLIC);      fieldDef.modifiers().add(SModifier.STATIC);    }  }  for (  Modifier m : v.getModifiers()) {switch (m.modifier) {case PUBLIC:      fieldDef.modifiers().add(SModifier.PUBLIC);    break;case PRIVATE:  if (mode == PARSING_INTERFACE) {    err.UnexpectedTokenException("valid modifier for interface fields (public|val)",m.toString().toLowerCase(),m.line_col());    return;  }fieldDef.modifiers().add(SModifier.PRIVATE);break;case PROTECTED:if (mode == PARSING_INTERFACE) {err.UnexpectedTokenException("valid modifier for interface fields (public|val)",m.toString().toLowerCase(),m.line_col());return;}fieldDef.modifiers().add(SModifier.PROTECTED);break;case PKG:if (mode == PARSING_INTERFACE) {err.UnexpectedTokenException("valid modifier for interface fields (public|val)",m.toString().toLowerCase(),m.line_col());return;}break;case VAL:fieldDef.modifiers().add(SModifier.FINAL);break;case NONNULL:if (isParam) break;case NONEMPTY:if (isParam) break;default :err.UnexpectedTokenException("valid modifier for fields (class:(public|private|protected|internal|val)|interface:(pub|val))",m.toString().toLowerCase(),m.line_col());return;}}if (mode == PARSING_INTERFACE && !fieldDef.modifiers().contains(SModifier.FINAL)) {fieldDef.modifiers().add(SModifier.FINAL);}if (isStatic && mode == PARSING_CLASS) {fieldDef.modifiers().add(SModifier.STATIC);}parseAnnos(v.getAnnos(),fieldDef,imports,ElementType.FIELD,Collections.singletonList(ElementType.PARAMETER));List<SFieldDef> fields;if (mode == PARSING_CLASS) {fields=((SClassDef)type).fields();} else if (mode == PARSING_INTERFACE) {fields=((SInterfaceDef)type).fields();} else throw new LtBug(Integer.toString(mode));for (SFieldDef f : fields) {if (fieldDef.name().equals(f.name())) {if ((fieldDef.modifiers().contains(SModifier.STATIC) && f.modifiers().contains(SModifier.STATIC)) || (!fieldDef.modifiers().contains(SModifier.STATIC) && !f.modifiers().contains(SModifier.STATIC))) {err.DuplicateVariableNameException(v.getName(),v.line_col());return;}}}if (mode == PARSING_CLASS) {((SClassDef)type).fields().add(fieldDef);} else {((SInterfaceDef)type).fields().add(fieldDef);}}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("http://www.nist.gov","address");  assertSize("addresses",3,elementList);}  }
class C{  boolean notificationEnabled(){  return notificationEnabledFlag;}  }
class C{  public boolean isPrimitive(){  Class<?> t=getTypeInternal();  return t != null && t.isPrimitive();}  }
class C{  public PlaSegmentFloat segment_projection(PlaSegmentFloat p_line_segment){  if (point_b.scalar_product(point_a,p_line_segment.point_a) < 0) {    return null;  }  if (point_a.scalar_product(point_b,p_line_segment.point_b) < 0) {    return null;  }  PlaPointFloat projected_a;  if (point_a.scalar_product(point_b,p_line_segment.point_a) < 0) {    projected_a=point_a;  } else {    projected_a=perpendicular_projection(p_line_segment.point_a);    if (projected_a.is_NaN())     return null;    if (Math.abs(projected_a.v_x) >= PlaLimits.CRIT_INT || Math.abs(projected_a.v_y) >= PlaLimits.CRIT_INT)     return null;  }  PlaPointFloat projected_b;  if (point_b.scalar_product(point_a,p_line_segment.point_b) < 0) {    projected_b=point_b;  } else {    projected_b=perpendicular_projection(p_line_segment.point_b);  }  if (projected_b.is_NaN())   return null;  if (Math.abs(projected_b.v_x) >= PlaLimits.CRIT_INT || Math.abs(projected_b.v_y) >= PlaLimits.CRIT_INT)   return null;  return new PlaSegmentFloat(projected_a,projected_b);}  }
class C{  static byte[] concatLengthPrefixed(List<Protocol> protocols){  Buffer result=new Buffer();  for (int i=0, size=protocols.size(); i < size; i++) {    Protocol protocol=protocols.get(i);    if (protocol == Protocol.HTTP_1_0)     continue;    result.writeByte(protocol.toString().length());    result.writeUtf8(protocol.toString());  }  return result.readByteArray();}  }
class C{  @Override public final void invoke(Request request,Response response) throws IOException, ServletException {  Context context=request.getContext();  if (context == null) {    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,sm.getString("standardHost.noContext"));    return;  }  if (request.isAsyncSupported()) {    request.setAsyncSupported(context.getPipeline().isAsyncSupported());  }  boolean asyncAtStart=request.isAsync();  boolean asyncDispatching=request.isAsyncDispatching();  try {    context.bind(Globals.IS_SECURITY_ENABLED,MY_CLASSLOADER);    if (!asyncAtStart && !context.fireRequestInitEvent(request)) {      return;    }    try {      if (!asyncAtStart || asyncDispatching) {        context.getPipeline().getFirst().invoke(request,response);      } else {        if (!response.isErrorReportRequired()) {          throw new IllegalStateException(sm.getString("standardHost.asyncStateError"));        }      }    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);      container.getLogger().error("Exception Processing " + request.getRequestURI(),t);      if (!response.isErrorReportRequired()) {        request.setAttribute(RequestDispatcher.ERROR_EXCEPTION,t);        throwable(request,response,t);      }    }    response.setSuspended(false);    Throwable t=(Throwable)request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);    if (!context.getState().isAvailable()) {      return;    }    if (response.isErrorReportRequired()) {      if (t != null) {        throwable(request,response,t);      } else {        status(request,response);      }    }    if (!request.isAsync() && (!asyncAtStart || !response.isErrorReportRequired())) {      context.fireRequestDestroyEvent(request);    }  }  finally {    if (ACCESS_SESSION) {      request.getSession(false);    }    context.unbind(Globals.IS_SECURITY_ENABLED,MY_CLASSLOADER);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeparentnodenull.class,args);}  }
class C{  @NotNull @Override @SuppressWarnings("unchecked") public <T>T[] toArray(@NotNull final T[] vec){  int i=0;  ImmutableList<A> l=this;  while (l.nonEmpty() && i < vec.length) {    vec[i]=(T)l.head;    l=l.tail;    i++;  }  if (l.isEmpty()) {    if (i < vec.length) {      vec[i]=null;    }    return vec;  }  return toArray((T[])Array.newInstance(vec.getClass().getComponentType(),size()));}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof ID3v23Tag)) {    return false;  }  ID3v23Tag object=(ID3v23Tag)obj;  if (this.crc32 != object.crc32) {    return false;  }  if (this.crcDataFlag != object.crcDataFlag) {    return false;  }  if (this.experimental != object.experimental) {    return false;  }  if (this.extended != object.extended) {    return false;  }  return this.paddingSize == object.paddingSize && super.equals(obj);}  }
class C{  public void dispose(){  graphics.dispose();  graphics=null;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String serverName=getStringOptionValue(IArgument.SERVER_NAME);  String xmlFile=getStringOptionValue(IArgument.XML_FILE);  String[] params={serverName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IMPORT_SERVER",params);    if (!ServerConfiguration.isServerInstanceExist(adminSSOToken,serverName)) {      ServerConfiguration.importServerInstance(adminSSOToken,serverName,xmlFile);      outputWriter.printlnMessage(getResourceString("import-server-succeeded"));    } else {      outputWriter.printlnMessage(getResourceString("import-server-already-exists"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IMPORT_SERVER",params);  } catch (  ConfigurationException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IMPORT_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  ParserConfigurationException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IMPORT_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SAXException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IMPORT_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IMPORT_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IOException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IMPORT_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serverName,e.getMessage()};    debugError("CreateServer.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IMPORT_SERVER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public boolean isOptional(){  return (as.isOptional());}  }
class C{  public static String workerAddress(String eventType){  return "vertx.kue.handler.workers." + eventType;}  }
class C{  PreparedStatement resolveInlineQuery(Connection con,String queryExpression,Map<String,Object> params) throws SQLException, ResourceException {  List<String> tokenNames=new ArrayList<String>();  QueryInfo info=new QueryInfo(queryExpression,tokenNames);  return resolveQuery(info,con,params);}  }
class C{  public void insert_item(BrdItem p_item){  if (p_item == null)   return;  if (p_item.clearance_idx() < 0 || p_item.clearance_idx() >= brd_rules.clearance_matrix.get_class_count()) {    System.err.println(classname + "insert_item: clearance_class no out of range");    p_item.set_clearance_idx(0);  }  p_item.r_board=this;  p_item.art_item_clear();  undo_items.insert(p_item);  search_tree_manager.insert(p_item);  observers.notify_new(p_item);}  }
class C{  public static double parseDouble(byte[] bytes,int startIndex,int endIndex){  if (endIndex - startIndex == 8) {    return Double.longBitsToDouble(parseLong(bytes,startIndex,endIndex));  } else   if (endIndex - startIndex == 4) {    return Float.intBitsToFloat((int)parseLong(bytes,startIndex,endIndex));  } else {    throw new IllegalArgumentException("endIndex (" + endIndex + ") - startIndex ("+ startIndex+ ") != 4 or 8");  }}  }
class C{  public static void closeQuietly(FileDescriptor fd){  try {    IoUtils.close(fd);  } catch (  IOException ignored) {  }}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQueryCount(dynamicQuery);}  }
class C{  public final void testOn() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      dis.on(false);      for (int i=0; i < MY_MESSAGE_LEN - 1; i++) {        dis.read();      }      dis.on(true);      dis.read();      byte[] digest=dis.getMessageDigest().digest();      assertFalse(Arrays.equals(digest,MDGoldenData.getDigest(algorithmName[ii])) || Arrays.equals(digest,MDGoldenData.getDigest(algorithmName[ii] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public static IntegerArgument sampleDataArgument() throws ArgumentException {  return IntegerArgument.builder("sampleData").shortIdentifier('d').description(INFO_SETUP_DESCRIPTION_SAMPLE_DATA.get()).lowerBound(0).defaultValue(0).valuePlaceholder(INFO_NUM_ENTRIES_PLACEHOLDER.get()).buildArgument();}  }
class C{  protected void error(String msg,Object args[],Exception e) throws org.xml.sax.SAXException {  String formattedMsg=XSLMessages.createMessage(msg,args);  error(formattedMsg,e);}  }
class C{  private String parseName(){  char ch=(char)reader.peekChar();  if (Character.isLetter(ch) || ch == '_' || ch == ':') {    StringBuilder buf=new StringBuilder();    buf.append(ch);    reader.nextChar();    ch=(char)reader.peekChar();    while (Character.isLetter(ch) || Character.isDigit(ch) || ch == '.' || ch == '_' || ch == '-' || ch == ':') {      buf.append(ch);      reader.nextChar();      ch=(char)reader.peekChar();    }    return buf.toString();  }  return null;}  }
class C{  public LogoutRequestImpl(String xmlString) throws SAML2Exception {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (xmlDocument == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  parseElement(xmlDocument.getDocumentElement());  if (isSigned) {    signedXMLString=xmlString;  }}  }
class C{  public HyperlinkEvent(Object source,EventType type,URL u,String desc){  this(source,type,u,desc,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementnotfounderr.class,args);}  }
class C{  public static void registerStaticAttributeKey(Object key){  String ioFmt=key.getClass().getName() + "." + key.toString();  if (freezeKeyMap == null) {    freezeKeyMap=new Hashtable<Object,String>();    thawKeyMap=new Hashtable<String,Object>();  }  freezeKeyMap.put(key,ioFmt);  thawKeyMap.put(ioFmt,key);}  }
class C{  private void pushRun(int runBase,int runLen){  this.runBase[stackSize]=runBase;  this.runLen[stackSize]=runLen;  stackSize++;}  }
class C{  InitializeRequestMsg(byte[] in,short version) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  final byte msgType=scanner.nextByte();  if (msgType != MSG_TYPE_INITIALIZE_REQUEST) {    throw new DataFormatException("input is not a valid InitializeRequestMessage");  }  baseDN=scanner.nextDN();  senderID=scanner.nextIntUTF8();  destination=scanner.nextIntUTF8();  if (version >= ProtocolVersion.REPLICATION_PROTOCOL_V4) {    initWindow=scanner.nextIntUTF8();  }}  }
class C{  private JsonValue updateGroup(String groupId,JsonValue groupJson) throws Exception {  System.out.println("1. Update a group: ");  HttpResponse<String> response=Unirest.put(azureEndpoint + "/group/" + groupId).header("x-openidm-username","openidm-admin").header("x-openidm-password","openidm-admin").header("content-type","application/json").header("if-match","*").body(writeValueAsString(groupJson)).asString();  return json(readJson(response.getBody()));}  }
class C{  public CertificateEncodingException(String message){  super(message);}  }
class C{  public int component_count(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("component_count",_opsClass);  DynAnyOperations $self=(DynAnyOperations)$so.servant;  try {    return $self.component_count();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private int min(int a,int b){  if (a < b)   return a;  return b;}  }
class C{  private LDAPURL findUrlForDisplayedEntry(BasicNode node){  if (isFollowReferrals() && node.getRemoteUrl() != null) {    return node.getRemoteUrl();  }  return findUrlForLocalEntry(node);}  }
class C{  public boolean isMouseOver(){  return mouseOver;}  }
class C{  public boolean addEdit(UndoableEdit anEdit){  if (!inProgress) {    return false;  } else {    UndoableEdit last=lastEdit();    if (last == null) {      edits.addElement(anEdit);    } else     if (!last.addEdit(anEdit)) {      if (anEdit.replaceEdit(last)) {        edits.removeElementAt(edits.size() - 1);      }      edits.addElement(anEdit);    }    return true;  }}  }
class C{  private int convertModelToColumn(int index){  int size=list.getModel().getSize();  if ((index < 0) || (index >= size)) {    return -1;  }  if (layoutOrientation != JList.VERTICAL && rowsPerColumn > 0 && columnCount > 1) {    if (layoutOrientation == JList.VERTICAL_WRAP) {      return index / rowsPerColumn;    }    return index % columnCount;  }  return 0;}  }
class C{  public SAX2DTM2(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){  this(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,DEFAULT_BLOCKSIZE,true,true,false);}  }
class C{  public void addListener(final FileAlterationListener listener){  if (listener != null) {    listeners.add(listener);  }}  }
class C{  private void copyOutlines(Set<PdfOutline> outlines,PdfDocument toDocument,Map<PdfPage,PdfPage> page2page){  Set<PdfOutline> outlinesToCopy=new HashSet<>();  outlinesToCopy.addAll(outlines);  for (  PdfOutline outline : outlines) {    getAllOutlinesToCopy(outline,outlinesToCopy);  }  PdfOutline rootOutline=toDocument.getOutlines(false);  if (rootOutline == null) {    rootOutline=new PdfOutline(toDocument);    rootOutline.setTitle("Outlines");  }  cloneOutlines(outlinesToCopy,rootOutline,getOutlines(false),page2page,toDocument);}  }
class C{  public CharHolder(){}  }
class C{  void runListen(){  logger.info(NOTE_REPLICATION_SERVER_LISTENING,getServerId(),listenSocket.getInetAddress().getHostAddress(),listenSocket.getLocalPort());  while (!shutdown.get() && !stopListen) {    try {      Session session;      Socket newSocket=null;      try {        newSocket=listenSocket.accept();        newSocket.setTcpNoDelay(true);        newSocket.setKeepAlive(true);        int timeoutMS=MultimasterReplication.getConnectionTimeoutMS();        session=replSessionSecurity.createServerSession(newSocket,timeoutMS);        if (session == null) {          continue;        }      } catch (      Exception e) {        if (newSocket != null) {          newSocket.close();        }        continue;      }      ReplicationMsg msg=session.receive();      final int queueSize=this.config.getQueueSize();      final int rcvWindow=this.config.getWindowSize();      if (msg instanceof ServerStartMsg) {        DataServerHandler dsHandler=new DataServerHandler(session,queueSize,this,rcvWindow);        dsHandler.startFromRemoteDS((ServerStartMsg)msg);      } else       if (msg instanceof ReplServerStartMsg) {        ReplicationServerHandler rsHandler=new ReplicationServerHandler(session,queueSize,this,rcvWindow);        rsHandler.startFromRemoteRS((ReplServerStartMsg)msg);      } else {        logger.error(ERR_REPLICATION_UNEXPECTED_MESSAGE,session.getRemoteAddress().toString(),(msg == null) ? "(null)" : msg.getClass().getSimpleName());        session.close();      }    } catch (    Exception e) {      logger.traceException(e);      if (!shutdown.get()) {        logger.error(ERR_EXCEPTION_LISTENING,e.getLocalizedMessage());      }    }  }}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public boolean isSecure(){  return false;}  }
class C{  public MulticastSocket() throws IOException {  setReuseAddress(true);}  }
class C{  public void test_setILjava_lang_Object(){  Object obj;  ll.set(65,obj=new Object());  assertTrue("Failed to set object",ll.get(65) == obj);  try {    ll.set(-1,obj=new Object());    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    ll.set(ll.size() + 1,obj=new Object());    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  View view=super.newView(context,cursor,parent);  ViewHolder viewHolder=new ViewHolder();  viewHolder.mStationTypeView=(ImageView)view.findViewById(R.id.lv_station_type);  viewHolder.mStationFreqView=(TextView)view.findViewById(R.id.lv_station_freq);  viewHolder.mStationNameView=(TextView)view.findViewById(R.id.lv_station_name);  view.setTag(viewHolder);  return view;}  }
class C{  public void flush() throws java.io.IOException {  flushBuffer();  m_os.flush();}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (!this.getClass().equals(other.getClass()))   return false;  SDPFieldList that=(SDPFieldList)other;  if (sdpFields == null)   return that.sdpFields == null;  return this.sdpFields.equals(that.sdpFields);}  }
class C{  private JMXConnectorFactory(){}  }
class C{  public Job createJob(String type,JsonObject data){  return new Job(type,data);}  }
class C{  public static void close(FileDescriptor fd) throws IOException {  try {    if (fd != null && fd.valid()) {      Libcore.os.close(fd);    }  } catch (  ErrnoException errnoException) {    throw errnoException.rethrowAsIOException();  }}  }
class C{  public boolean lessThan(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.greaterThan(this);  return this.num() < obj2.num();}  }
class C{  public String toXMLString(){  return toXMLString(true,true);}  }
class C{  public ByteArray(byte[] byteArray){  bytes=byteArray;  size=bytes.length;}  }
class C{  public boolean is_overlap(){  Set<BrdItem> start_contacts=get_start_contacts();  Set<BrdItem> end_contacts=get_end_contacts();  for (  BrdItem end_contact : end_contacts) {    if (start_contacts.contains(end_contact))     return true;  }  return false;}  }
class C{  private static boolean missingHashColorFormat(String colStr){  int len=colStr.length();  if (len == 3 || len == 6) {    String match="[0-9a-f]{" + len + "}";    return colStr.matches(match);  }  return false;}  }
class C{  public void move_mouse(PlaPointFloat p_to_location){  if (board_is_read_only)   return;  board_panel.move_mouse(gdi_context.coordinate_transform.board_to_screen(p_to_location));}  }
class C{  public SQLiteTable(String mTableName){  this.mTableName=mTableName;  mColumns.add(new Column(BaseColumns._ID,Column.Constraint.PRIMARY_KEY,Column.DataType.INTEGER));}  }
class C{  public void test_DivideBigDecimalRoundingExc(){  String a="3736186567876876578956958765675671119238118911893939591735";  String b="74723342238476237823787879183470";  RoundingMode rm=RoundingMode.UNNECESSARY;  BigDecimal aNumber=new BigDecimal(new BigInteger(a));  BigDecimal bNumber=new BigDecimal(new BigInteger(b));  try {    aNumber.divide(bNumber,rm);    fail("ArithmeticException is not thrown for RoundingMode.UNNECESSARY divider");  } catch (  java.lang.ArithmeticException ae) {  }  try {    bNumber=new BigDecimal(0);    aNumber.divide(bNumber,rm);    fail("ArithmeticException is not thrown for zero divider");  } catch (  java.lang.ArithmeticException ae) {  }}  }
class C{  static void copyInputStreamToFile(InputStream original,File copy) throws IOException {  if (original == null) {    throw new IOException("Could not read input to copy.");  }  createFile(copy);  try (OutputStream outputStream=new FileOutputStream(copy)){    int bytesRead;    byte[] buffer=new byte[4096];    while ((bytesRead=original.read(buffer)) > 0) {      outputStream.write(buffer,0,bytesRead);    }  }  finally {    closeSilently(original);  }}  }
class C{  public XPathContext(boolean recursiveVarContext){  m_prefixResolvers.push(null);  m_currentNodes.push(DTM.NULL);  m_currentExpressionNodes.push(DTM.NULL);  m_saxLocations.push(null);  m_variableStacks=recursiveVarContext ? new VariableStack() : new VariableStack(1);}  }
class C{  public void ret(final int local){  mv.visitVarInsn(Opcodes.RET,local);}  }
class C{  public ParameterMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public PdfReader(InputStream is,ReaderProperties properties) throws IOException {  this(new RandomAccessSourceFactory().createSource(is),properties);}  }
class C{  public void addValidation(String attrName,String validatorClass,String rule){  if (validatorClass != null && attrName != null) {    String validationString=encodeValidationString(validatorClass,rule);    if (validationString != null) {      if (m_validated == null) {        m_validated=new AttrSet();      }      if (!m_validated.contains(attrName,validationString)) {        m_validated.add(new Attr(attrName,validationString));      }    }  }}  }
class C{  public Iterator<String> parameterSignatureIterator(){  return new ParameterSignatureIterator();}  }
class C{  private final boolean subparse(String text,ParsePosition parsePosition,String positivePrefix,String negativePrefix,DigitList digits,boolean isExponent,boolean status[]){  int position=parsePosition.index;  int oldStart=parsePosition.index;  int backup;  boolean gotPositive, gotNegative;  gotPositive=text.regionMatches(position,positivePrefix,0,positivePrefix.length());  gotNegative=text.regionMatches(position,negativePrefix,0,negativePrefix.length());  if (gotPositive && gotNegative) {    if (positivePrefix.length() > negativePrefix.length()) {      gotNegative=false;    } else     if (positivePrefix.length() < negativePrefix.length()) {      gotPositive=false;    }  }  if (gotPositive) {    position+=positivePrefix.length();  } else   if (gotNegative) {    position+=negativePrefix.length();  } else {    parsePosition.errorIndex=position;    return false;  }  status[STATUS_INFINITE]=false;  if (!isExponent && text.regionMatches(position,symbols.getInfinity(),0,symbols.getInfinity().length())) {    position+=symbols.getInfinity().length();    status[STATUS_INFINITE]=true;  } else {    digits.decimalAt=digits.count=0;    char zero=symbols.getZeroDigit();    char decimal=isCurrencyFormat ? symbols.getMonetaryDecimalSeparator() : symbols.getDecimalSeparator();    char grouping=symbols.getGroupingSeparator();    String exponentString=symbols.getExponentSeparator();    boolean sawDecimal=false;    boolean sawExponent=false;    boolean sawDigit=false;    int exponent=0;    int digitCount=0;    backup=-1;    for (; position < text.length(); ++position) {      char ch=text.charAt(position);      int digit=ch - zero;      if (digit < 0 || digit > 9) {        digit=Character.digit(ch,10);      }      if (digit == 0) {        backup=-1;        sawDigit=true;        if (digits.count == 0) {          if (!sawDecimal) {            continue;          }          --digits.decimalAt;        } else {          ++digitCount;          digits.append((char)(digit + '0'));        }      } else       if (digit > 0 && digit <= 9) {        sawDigit=true;        ++digitCount;        digits.append((char)(digit + '0'));        backup=-1;      } else       if (!isExponent && ch == decimal) {        if (isParseIntegerOnly() || sawDecimal) {          break;        }        digits.decimalAt=digitCount;        sawDecimal=true;      } else       if (!isExponent && ch == grouping && isGroupingUsed()) {        if (sawDecimal) {          break;        }        backup=position;      } else       if (!isExponent && text.regionMatches(position,exponentString,0,exponentString.length()) && !sawExponent) {        ParsePosition pos=new ParsePosition(position + exponentString.length());        boolean[] stat=new boolean[STATUS_LENGTH];        DigitList exponentDigits=new DigitList();        if (subparse(text,pos,"",Character.toString(symbols.getMinusSign()),exponentDigits,true,stat) && exponentDigits.fitsIntoLong(stat[STATUS_POSITIVE],true)) {          position=pos.index;          exponent=(int)exponentDigits.getLong();          if (!stat[STATUS_POSITIVE]) {            exponent=-exponent;          }          sawExponent=true;        }        break;      } else {        break;      }    }    if (backup != -1) {      position=backup;    }    if (!sawDecimal) {      digits.decimalAt=digitCount;    }    digits.decimalAt+=exponent;    if (!sawDigit && digitCount == 0) {      parsePosition.index=oldStart;      parsePosition.errorIndex=oldStart;      return false;    }  }  if (!isExponent) {    if (gotPositive) {      gotPositive=text.regionMatches(position,positiveSuffix,0,positiveSuffix.length());    }    if (gotNegative) {      gotNegative=text.regionMatches(position,negativeSuffix,0,negativeSuffix.length());    }    if (gotPositive && gotNegative) {      if (positiveSuffix.length() > negativeSuffix.length()) {        gotNegative=false;      } else       if (positiveSuffix.length() < negativeSuffix.length()) {        gotPositive=false;      }    }    if (gotPositive == gotNegative) {      parsePosition.errorIndex=position;      return false;    }    parsePosition.index=position + (gotPositive ? positiveSuffix.length() : negativeSuffix.length());  } else {    parsePosition.index=position;  }  status[STATUS_POSITIVE]=gotPositive;  if (parsePosition.index == oldStart) {    parsePosition.errorIndex=position;    return false;  }  return true;}  }
class C{  public static void deregisterShortCircuit(OperationType operation,String section){  shortCircuits.remove(operation + "/" + section.toLowerCase());}  }
class C{  @Override public synchronized int read(){  return pos < count ? buf[pos++] & 0xFF : -1;}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (address == null)   return null;  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  address.encode(retval);  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty()) {    retval.append(SEMICOLON);    parameters.encode(retval);  }  return retval;}  }
class C{  private long tryDecReaderOverflow(long s){  if ((s & ABITS) == RFULL) {    if (U.compareAndSwapLong(this,STATE,s,s | RBITS)) {      int r;      long next;      if ((r=readerOverflow) > 0) {        readerOverflow=r - 1;        next=s;      } else       next=s - RUNIT;      state=next;      return next;    }  } else   if ((LockSupport.nextSecondarySeed() & OVERFLOW_YIELD_RATE) == 0)   Thread.yield();  return 0L;}  }
class C{  public void endNamespaceDecls(){  if (!decls.isEmpty()) {    for (Iterator itr=decls.entrySet().iterator(); itr.hasNext(); ) {      Map.Entry e=(Map.Entry)itr.next();      String prefix=(String)e.getKey();      String uri=(String)e.getValue();      if (!uri.equals(nss.getURI(prefix)))       nss.declarePrefix(prefix,uri);    }    decls.clear();    reverseDecls.clear();  }  inCollectingMode=false;}  }
class C{  @Override public short shortValue(){  return value;}  }
class C{  public PythonDiscoveryContext(Service service,ApiaryConfig apiaryConfig){  super(service,apiaryConfig);  pythonCommon=new PythonContextCommon();}  }
class C{  void disablePercentages(){  percentages=null;}  }
class C{  public void initialize(String realm,String config){  verifyConfigurationService(realm);  try {    if (configData == null) {      String[] params={realm,config};      logEvent("ATTEMPT_GET_AUTH_CONFIG_PROFILE",params);      configData=AMAuthConfigUtils.getNamedConfig(config,realm,getUserSSOToken());      logEvent("SUCCEED_GET_AUTH_CONFIG_PROFILE",params);    }  } catch (  SSOException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,config,strError};    logEvent("SSO_EXCEPTION_GET_AUTH_CONFIG_PROFILE",paramsEx);    debug.warning("AuthConfigurationModelImpl.initialize",e);    configData=Collections.EMPTY_MAP;  }catch (  AMConfigurationException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,config,strError};    logEvent("AUTH_CONFIGURATION_EXCEPTION_GET_AUTH_CONFIG_PROFILE",paramsEx);    debug.error("AuthConfigurationModelImpl.initialize",e);    configData=Collections.EMPTY_MAP;  }catch (  SMSException e) {    String strError=getErrorString(e);    String[] paramsEx={realm,config,strError};    logEvent("SMS_EXCEPTION_GET_AUTH_CONFIG_PROFILE",paramsEx);    debug.error("AuthConfigurationModelImpl.initialize",e);    configData=Collections.EMPTY_MAP;  }  if ((configData != null) && !configData.isEmpty() && (xmlValue == null)) {    Set tmp=(Set)configData.get(AUTH_CONFIG_ATTR);    if ((tmp != null) && (!tmp.isEmpty())) {      xmlValue=(String)tmp.iterator().next();      entryList=new ArrayList(AMAuthConfigUtils.xmlToAuthConfigurationEntry(xmlValue));    }  }}  }
class C{  public void write(int b,long pos) throws IOException {  if (pos < 0) {    throw new ArrayIndexOutOfBoundsException("pos < 0");  }  if (pos >= length) {    pad(pos);    length=pos + 1;  }  byte[] buf=getCacheBlock(pos / BUFFER_LENGTH);  int offset=(int)(pos % BUFFER_LENGTH);  buf[offset]=(byte)b;}  }
class C{  private int[] createPalette(){  int[] palette=new int[PALETTE_SIZE];  float[] hsv=new float[3];  hsv[1]=hsv[2]=1;  for (int i=0; i < PALETTE_SIZE; i++) {    hsv[0]=(HUE_END - HUE_BEGIN) * i / PALETTE_SIZE + HUE_BEGIN;    palette[i]=Color.HSVToColor(hsv);  }  return palette;}  }
class C{  public void _read(org.omg.CORBA.portable.InputStream in){  value=org.omg.CORBA.ServiceInformationHelper.read(in);}  }
class C{  public void error(SourceLocator srcLctr,Node styleNode,Node sourceNode,String msg,Object args[]) throws TransformerException {  String formattedMsg=XSLMessages.createMessage(msg,args);  ErrorListener errHandler=m_transformer.getErrorListener();  if (null != errHandler)   errHandler.fatalError(new TransformerException(formattedMsg,srcLctr)); else   throw new TransformerException(formattedMsg,srcLctr);}  }
class C{  public static ConnectionParameters connectionParams(){  return new ConnectionParameters();}  }
class C{  public StatusDetail createStatusDetail(String xml) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.STATUS_DETAIL,xml);  if (object == null) {    return new StatusDetailImpl(xml);  } else {    return (StatusDetail)object;  }}  }
class C{  public String toXMLString(){  StringBuilder xmlsb=new StringBuilder(1000);  xmlsb.append("<").append(POLICY_REQUEST).append(" ").append(APP_SSOTOKEN).append("=\"").append(appSSOToken).append("\" ").append(REQUEST_ID).append("=\"").append(requestId).append("\">").append(CRLF);  if (methodID == POLICY_REQUEST_GET_RESOURCE_RESULTS) {    xmlsb.append(resourceResultReq.toXMLString());  } else   if (methodID == POLICY_REQUEST_ADD_POLICY_LISTENER) {    xmlsb.append(policyListenerReq.toXMLString());  } else   if (methodID == POLICY_REQUEST_REMOVE_POLICY_LISTENER) {    xmlsb.append(removeListenerReq.toXMLString());  } else   if (methodID == POLICY_REQUEST_ADVICES_HANDLEABLE_BY_AM_REQUEST) {    xmlsb.append(advicesHandleableByAMRequest.toXMLString());  }  xmlsb.append("</").append(POLICY_REQUEST).append(">").append(CRLF);  return xmlsb.toString();}  }
class C{  @Override public void write(char[] buf,int offset,int count){  if (0 <= offset && offset <= buf.length && 0 <= count && count <= buf.length - offset) {synchronized (lock) {      this.buf.append(buf,offset,count);    }  } else {    throw new ArrayIndexOutOfBoundsException();  }}  }
class C{  @Fluent public Job priority(Priority level){  if (level != null)   this.priority=level;  return this;}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQueryCount(dynamicQuery);}  }
class C{  public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  public CoreGeneralLogsDbHelper(Context context){  super(context);  logDbAdapter=new LogGeneralDbAdapter(database);}  }
class C{  public void startCDATA() throws SAXException {  m_handler.startCDATA();}  }
class C{  public Set<AclEntryFlag> flags(){  return new HashSet<AclEntryFlag>(flags);}  }
class C{  public boolean removeRemotePolicyListener(SSOToken appToken,String serviceName,String notificationURL){  boolean status=false;  URL policyServiceURL=null;  remotePolicyListeners.remove(notificationURL);  if (appToken != null) {    try {      policyServiceURL=getPolicyServiceURL(appToken);    } catch (    PolicyException pe) {      debug.error("ResourceResultCache.removeRemotePolicyListener():" + "Can not remove policy listner:",pe);    }  }  if ((appToken != null) && (policyServiceURL != null)) {    RemoveListenerRequest rmReq=new RemoveListenerRequest();    rmReq.setServiceName(serviceName);    rmReq.setNotificationURL(notificationURL);    PolicyRequest policyReq=new PolicyRequest();    policyReq.setAppSSOToken(appToken.getTokenID().toString());    policyReq.setMethodID(PolicyRequest.POLICY_REQUEST_REMOVE_POLICY_LISTENER);    policyReq.setRemoveListenerRequest(rmReq);    try {      PolicyService ps=sendPLLRequest(policyServiceURL,policyReq);      if (ps != null) {        if (debug.messageEnabled()) {          debug.message("ResourceResultCache." + "removeRemotePolicyListener():" + "result="+ ps.toXMLString());        }        PolicyResponse psres=ps.getPolicyResponse();        if (psres.getMethodID() == PolicyResponse.POLICY_REMOVE_LISTENER_RESPONSE) {          status=true;        }      } else {        debug.message("ResourceResultCache." + "removeRemotePolicyListener():" + "no result");      }    } catch (    Exception e) {      debug.error("ResourceResultCache.removeRemotePolicyListener():",e);    }  }  return status;}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public Builder generateUUID(){  this.uuid=UUID.randomUUID().toString();  return this;}  }
class C{  public void testHasAttributes1() throws Throwable {  Document doc;  NodeList addrList;  Node addrNode;  boolean state;  doc=(Document)load("staff",builder);  addrList=doc.getElementsByTagName("name");  addrNode=addrList.item(0);  state=addrNode.hasAttributes();  assertFalse("throw_False",state);}  }
class C{  private boolean isValidCharacter(int index,char aChar){  return getMaskCharacter(index).isValidCharacter(aChar);}  }
class C{  public static short readSwappedShort(InputStream input) throws IOException {  return (short)(((read(input) & 0xff) << 0) + ((read(input) & 0xff) << 8));}  }
class C{  public static long fieldsToDay(int year,int month,int dom){  int y=year - 1;  long julian=365 * y + floorDivide(y,4) + (JULIAN_1_CE - 3) + floorDivide(y,400) - floorDivide(y,100) + 2 + DAYS_BEFORE[month + (isLeapYear(year) ? 12 : 0)] + dom;  return julian - JULIAN_1970_CE;}  }
class C{  public synchronized void addObject(NSObject obj){  set.add(obj);}  }
class C{  public void testCase17(){  byte aBytes[]={-120,34,78,-23,-111,45,127,23,45,-3};  byte bBytes[]={-120,34,78,-23,-111,45,127,23,45,-3};  byte rBytes[]={0};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(0,result.signum());}  }
class C{  public void mousePressed(MouseEvent e){  isBeingPressed=true;}  }
class C{  public PWResetUncaughtExceptionViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  registerChildren();}  }
class C{  public boolean shouldWarn(){  refreshIfUndefined(shouldWarn);  return shouldWarn == ConditionResult.TRUE;}  }
class C{  public void testBusy_handler() throws SQLException, Exception {  TestBusyHandler bh=new TestBusyHandler();  db.busy_handler(bh);  int counter=0;  ThreadPool threadPool=new ThreadPool(numThreads);  ResultSet userTabs;  userTabs=conn.getMetaData().getTables(null,null,null,null);  while (userTabs.next()) {    String tableName=userTabs.getString("TABLE_NAME");    if (tableName.equals(DatabaseCreator.TEST_TABLE1)) {      statement.execute(DatabaseCreator.DROP_TABLE1);    }  }  db.exec(DatabaseCreator.CREATE_TABLE3,null);  db.exec(DatabaseCreator.CREATE_TABLE1,null);  try {    conn.setAutoCommit(false);    int id1=numOfRecords - 3;    threadPool.runTask(createTask1(id1,dbFile.getPath(),tracker));    int id2=numOfRecords + 3;    threadPool.runTask(createTask2(id2,dbFile.getPath(),tracker));    int oldID=5;    int newID=100;    threadPool.runTask(createTask3(oldID,dbFile.getPath(),newID,tracker));    threadPool.join();    List<String> errors=tracker.getErrors();    if (errors.size() > 0) {      for (      String s : errors) {        System.out.println("Round 2 Error: " + s);      }    } else {      fail("No error happened");    }    db.exec("delete from " + DatabaseCreator.TEST_TABLE1 + " where 1",null);    db.exec("delete from " + DatabaseCreator.TEST_TABLE3 + " where 1",null);  }  finally {    conn.setAutoCommit(true);    db.exec(DatabaseCreator.DROP_TABLE1,null);    db.exec(DatabaseCreator.DROP_TABLE3,null);  }}  }
class C{  public final void testWriteint05() throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);  DigestOutputStream dos=new DigestOutputStream(bos,null);  dos.on(false);  for (int i=0; i < MY_MESSAGE_LEN; i++) {    dos.write(myMessage[i]);  }  assertTrue(Arrays.equals(MDGoldenData.getMessage(),bos.toByteArray()));}  }
class C{  public static byte[] asUnsignedByteArray(BigInteger value){  byte[] bytes=value.toByteArray();  if (bytes[0] == 0) {    byte[] tmp=new byte[bytes.length - 1];    System.arraycopy(bytes,1,tmp,0,tmp.length);    return tmp;  }  return bytes;}  }
class C{  @DataProvider public Object[][] invalidSchemaElements(){  return new Object[][]{{"(testtype+oid NAME 'testtype' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,false},{"(testtype_oid NAME 'testtype' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,false},{"(testtype.oid NAME 'testtype' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,false},{"(1.2.8.5 NAME 'test+type' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,false},{"(1.2.8.5 NAME 'test.type' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,false},{"(1.2.8.5 NAME 'test_type' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,false},{"(1.2.8.5 NAME 'test+type' DESC 'full type' OBSOLETE SUP cn " + " EQUALITY caseIgnoreMatch ORDERING caseIgnoreOrderingMatch" + " SUBSTR caseIgnoreSubstringsMatch"+ " SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 SINGLE-VALUE"+ " USAGE userApplications )",ATD_SYNTAX,true}};}  }
class C{  public void dispatchCharactersEvents(int nodeHandle,ContentHandler ch,boolean normalize) throws SAXException {  int identity=makeNodeIdentity(nodeHandle);  if (identity == DTM.NULL)   return;  int type=_type(identity);  if (isTextType(type)) {    int dataIndex=m_dataOrQName.elementAt(identity);    int offset=m_data.elementAt(dataIndex);    int length=m_data.elementAt(dataIndex + 1);    if (normalize)     m_chars.sendNormalizedSAXcharacters(ch,offset,length); else     m_chars.sendSAXcharacters(ch,offset,length);  } else {    int firstChild=_firstch(identity);    if (DTM.NULL != firstChild) {      int offset=-1;      int length=0;      int startNode=identity;      identity=firstChild;      do {        type=_type(identity);        if (isTextType(type)) {          int dataIndex=_dataOrQName(identity);          if (-1 == offset) {            offset=m_data.elementAt(dataIndex);          }          length+=m_data.elementAt(dataIndex + 1);        }        identity=getNextNodeIdentity(identity);      } while (DTM.NULL != identity && (_parent(identity) >= startNode));      if (length > 0) {        if (normalize)         m_chars.sendNormalizedSAXcharacters(ch,offset,length); else         m_chars.sendSAXcharacters(ch,offset,length);      }    } else     if (type != DTM.ELEMENT_NODE) {      int dataIndex=_dataOrQName(identity);      if (dataIndex < 0) {        dataIndex=-dataIndex;        dataIndex=m_data.elementAt(dataIndex + 1);      }      String str=m_valuesOrPrefixes.indexToString(dataIndex);      if (normalize)       FastStringBuffer.sendNormalizedSAXcharacters(str.toCharArray(),0,str.length(),ch); else       ch.characters(str.toCharArray(),0,str.length());    }  }}  }
class C{  public static Color flashColor(){  return info().flashColor;}  }
class C{  public void testSignerStringIdentityScope() throws Exception {  Signer s=new SignerStub("sss4",IdentityScope.getSystemScope());  assertNotNull(s);  assertEquals("sss4",s.getName());  assertSame(IdentityScope.getSystemScope(),s.getScope());  assertNull(s.getPrivateKey());  try {    Signer s2=new SignerStub("sss4",IdentityScope.getSystemScope());    fail("expected KeyManagementException not thrown");  } catch (  KeyManagementException e) {  }  Signer s2=new SignerStub(null);  assertNull(s2.getName());}  }
class C{  public boolean addAttributeAlways(String uri,String localName,String rawName,String type,String value,boolean xslAttribute){  boolean was_added;  int index;  if (uri == null || localName == null || uri.length() == 0)   index=m_attributes.getIndex(rawName); else {    index=m_attributes.getIndex(uri,localName);  }  if (index >= 0) {    String old_value=null;    if (m_tracer != null) {      old_value=m_attributes.getValue(index);      if (value.equals(old_value))       old_value=null;    }    m_attributes.setValue(index,value);    was_added=false;    if (old_value != null)     firePseudoAttributes();  } else {    if (xslAttribute) {      final int colonIndex=rawName.indexOf(':');      if (colonIndex > 0) {        String prefix=rawName.substring(0,colonIndex);        NamespaceMappings.MappingRecord existing_mapping=m_prefixMap.getMappingFromPrefix(prefix);        if (existing_mapping != null && existing_mapping.m_declarationDepth == m_elemContext.m_currentElemDepth && !existing_mapping.m_uri.equals(uri)) {          prefix=m_prefixMap.lookupPrefix(uri);          if (prefix == null) {            prefix=m_prefixMap.generateNextPrefix();          }          rawName=prefix + ':' + localName;        }      }      try {        String prefixUsed=ensureAttributesNamespaceIsDeclared(uri,localName,rawName);      } catch (      SAXException e) {        e.printStackTrace();      }    }    m_attributes.addAttribute(uri,localName,rawName,type,value);    was_added=true;    if (m_tracer != null)     firePseudoAttributes();  }  return was_added;}  }
class C{  public GetBufferedRandomAccessSource(IRandomAccessSource source){  this.source=source;  this.getBuffer=new byte[(int)Math.min(Math.max(source.length() / 4,1),4096)];  this.getBufferStart=-1;  this.getBufferEnd=-1;}  }
class C{  public static Matcher findMatch(String self,String pattern){  if (pattern != null) {    Matcher matcher=compile(pattern,CASE_INSENSITIVE | UNICODE_CHARACTER_CLASS).matcher(self);    if (matcher.find()) {      return matcher.reset();    }  }  return null;}  }
class C{  static void checkSupportedExtendedOperations(Connection connection) throws LdapException {  extendedOperations=RootDSE.readRootDSE(connection).getSupportedExtendedOperations();}  }
class C{  public static void importNewServiceSchema(List<String> fileList) throws UpgradeException {  int len=fileList.size();  String[] args=new String[7 + len];  args[0]="--runasdn";  args[1]=bindDN;  args[2]="-w";  args[3]=bindPasswd;  args[4]="-c";  args[5]="-v";  args[6]="-s";  for (int i=0; i < len; i++) {    args[7 + i]=fileList.get(i);  }  invokeAdminCLI(args);}  }
class C{  private static boolean isURIString(String p_uric){  if (p_uric == null) {    return false;  }  int end=p_uric.length();  char testChar='\0';  for (int i=0; i < end; i++) {    testChar=p_uric.charAt(i);    if (testChar == '%') {      if (i + 2 >= end || !isHex(p_uric.charAt(i + 1)) || !isHex(p_uric.charAt(i + 2))) {        return false;      } else {        i+=2;        continue;      }    }    if (isReservedCharacter(testChar) || isUnreservedCharacter(testChar)) {      continue;    } else {      return false;    }  }  return true;}  }
class C{  public void invalidate(){  this.authScheme=null;  this.authScope=null;  this.credentials=null;}  }
class C{  @Deprecated public void clearAdvices(){  advice.clear();}  }
class C{  private void createUser(SSOToken token,PersistentObject parentObj,Map attributes,String profileName) throws UMSException, AMEntryExistsException, AMException {  String orgDN=getOrganizationDN(internalToken,parentObj.getDN());  String entryDN=getNamingAttribute(AMObject.USER) + "=" + profileName+ ","+ parentObj.getDN();  attributes=callBackHelper.preProcess(token,entryDN,orgDN,null,attributes,CallBackHelper.CREATE,AMObject.USER,false);  AttrSet attrSet=CommonUtils.mapToAttrSet(attributes);  makeNamingFirst(attrSet,getNamingAttribute(AMObject.USER),profileName);  UserPasswordValidationHelper pluginImpl=new UserPasswordValidationHelper(token,orgDN);  try {    pluginImpl.validate(CommonUtils.attrSetToMap(attrSet));  } catch (  AMException ame) {    debug.error("DirectoryServicesImpl.createUser(): Invalid " + "characters for user",ame);    throw ame;  }  TemplateManager tempMgr=TemplateManager.getTemplateManager();  CreationTemplate creationTemp=tempMgr.getCreationTemplate("BasicUser",new Guid(orgDN),TemplateManager.SCOPE_ANCESTORS);  attrSet=combineOCs(creationTemp,attrSet);  PersistentObject user=new PersistentObject(creationTemp,attrSet);  try {    parentObj.addChild(user);  } catch (  AccessRightsException e) {    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.createUser(): Insufficient " + "Access rights to create user",e);    }    throw new AMException(token,"460");  }catch (  EntryAlreadyExistsException ee) {    if (ComplianceServicesImpl.isComplianceUserDeletionEnabled()) {      complianceImpl.checkIfDeletedUser(token,user.getDN());    }    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.createUser() User " + "already exists: ",ee);    }    throw new AMEntryExistsException(token,"328",ee);  }catch (  UMSException ue) {    if (debug.warningEnabled()) {      debug.warning("DirectoryServicesImpl.createUser(): Internal " + "Error occurred. Unable to create User Entry",ue);    }    processInternalException(token,ue,"324");  }  callBackHelper.postProcess(token,user.getDN(),orgDN,null,attributes,CallBackHelper.CREATE,AMObject.USER,false);  AMUserEntryProcessed postPlugin=getUserPostPlugin();  if (postPlugin != null) {    Map attrMap=CommonUtils.attrSetToMap(attrSet);    postPlugin.processUserAdd(token,user.getDN(),attrMap);  }  EmailNotificationHelper mailerObj=new EmailNotificationHelper(user.getDN());  mailerObj.setUserCreateNotificationList();  mailerObj.sendUserCreateNotification(attributes);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node child;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  length=(int)attributes.getLength();  assertEquals("length",2,length);  child=attributes.item(0);  child=attributes.item(1);}  }
class C{  public DuplicateFormatFlagsException(String f){  if (f == null)   throw new NullPointerException();  this.flags=f;}  }
class C{  public boolean equalsIgnoreCase(String anotherString){  return str().equalsIgnoreCase(anotherString);}  }
class C{  public void testFieldTEN(){  String oneS="10";  double oneD=10.0;  assertEquals("incorrect string value",oneS,BigDecimal.TEN.toString());  assertEquals("incorrect double value",oneD,BigDecimal.TEN.doubleValue(),0);}  }
class C{  void updateInsets(){  short top=(short)painter.getInset(TOP,this);  short bottom=(short)painter.getInset(BOTTOM,this);  if (captionIndex != -1) {    View caption=getView(captionIndex);    short h=(short)caption.getPreferredSpan(Y_AXIS);    AttributeSet a=caption.getAttributes();    Object align=a.getAttribute(CSS.Attribute.CAPTION_SIDE);    if ((align != null) && (align.equals("bottom"))) {      bottom+=h;    } else {      top+=h;    }  }  setInsets(top,(short)painter.getInset(LEFT,this),bottom,(short)painter.getInset(RIGHT,this));}  }
class C{  public BuildVersion(final int major,final int minor,final int point,final String rev){  this.major=major;  this.minor=minor;  this.point=point;  this.rev=rev;}  }
class C{  public static boolean isSignatureValid(Assertion assertion,String realm,String issuer){  boolean valid=false;  String signedXMLString=assertion.toString(true,true);  String id=assertion.getAssertionID();  try {    FederationElement idp=metaManager.getEntityDescriptor(realm,issuer);    X509Certificate cert=KeyUtil.getVerificationCert(idp,issuer,true);    XMLSignatureManager manager=XMLSignatureManager.getInstance();    valid=SigManager.getSigInstance().verify(signedXMLString,id,Collections.singleton(cert));  } catch (  WSFederationMetaException ex) {    valid=false;  }catch (  SAML2Exception ex) {    valid=false;  }  if (!valid) {    String[] data={LogUtil.isErrorLoggable(Level.FINER) ? signedXMLString : id,realm,issuer};    LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE_ASSERTION,data,null);  }  return valid;}  }
class C{  public int hashCode(){  return value;}  }
class C{  public void consumeUpTo(UpdateMsg finalMsg){  final CSN finalCSN=finalMsg.getCSN();  UpdateMsg msg;  do {    msg=removeFirst();  } while (!finalCSN.equals(msg.getCSN()));}  }
class C{  public WeakReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);}  }
class C{  private void hideSoftKeyboard(){  hideSoftKeyboard(editText);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PreviousSessionType createPreviousSessionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PreviousSessionTypeImpl();}  }
class C{  public void addAccessibleSelection(int i){  if (i < 0 || i >= getItemCount()) {    return;  }  JMenuItem mi=getItem(i);  if (mi != null) {    if (mi instanceof JMenu) {      MenuElement me[]=buildMenuElementArray((JMenu)mi);      MenuSelectionManager.defaultManager().setSelectedPath(me);    } else {      MenuSelectionManager.defaultManager().setSelectedPath(null);    }  }}  }
class C{  public final void lazySet(int newValue){  unsafe.putOrderedInt(this,valueOffset,newValue);}  }
class C{  public static void assertPropName(String propName) throws XMPException {  if (propName == null || propName.length() == 0) {    throw new XMPException("Empty property name",XMPError.BADPARAM);  }}  }
class C{  public static String rdnTypeFromDn(String dn){  return rdnTypeFromDn(DN.valueOf(dn));}  }
class C{  public static boolean isGuiAvailable(){  return ThreadGroupContext.getContext().isGuiAvailable();}  }
class C{  public void paintInternalFrameTitlePaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  void addString(int c){  if (strpos == str.length) {    char newstr[]=new char[str.length + 128];    System.arraycopy(str,0,newstr,0,str.length);    str=newstr;  }  str[strpos++]=(char)c;}  }
class C{  @Override public boolean isStretchHeight(){  return true;}  }
class C{  public Observable<Long> completeCountObservable(String type){  io.vertx.rx.java.ObservableFuture<Long> handler=io.vertx.rx.java.RxHelper.observableFuture();  completeCount(type,handler.toHandler());  return handler;}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  public void clearLastLoginTime(){  logger.trace("Clearing last login time for user %s",userDNString);  lastLoginTime=-1;  clearAttribute(OP_ATTR_LAST_LOGIN_TIME);}  }
class C{  public static void sort(int[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias,java.lang.String algorithm) throws XMLSignatureException {  return sp.signXML(doc,certAlias,algorithm);}  }
class C{  public String toXMLString(){  StringBuilder xmlsb=new StringBuilder(1000);  xmlsb.append("<").append(PolicyService.POLICY_NOTIFICATION).append(" ").append(NOTIFICATION_ID).append("=\"").append(notificationId).append("\">").append(CRLF);  if (notificationType == POLICY_CHANGE_TYPE) {    xmlsb.append(policyChangeNotification.toXMLString());  } else {    debug.error("PolicyNotification.toXMLString(): unknown notification type");  }  xmlsb.append("</").append(PolicyService.POLICY_NOTIFICATION).append(">").append(CRLF);  return xmlsb.toString();}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof BinaryRefAddr)) {    BinaryRefAddr target=(BinaryRefAddr)obj;    if (addrType.compareTo(target.addrType) == 0) {      if (buf == null && target.buf == null)       return true;      if (buf == null || target.buf == null || buf.length != target.buf.length)       return false;      for (int i=0; i < buf.length; i++)       if (buf[i] != target.buf[i])       return false;      return true;    }  }  return false;}  }
class C{  static void toString(ProtocolOp op) throws Exception {  StringBuilder sb=new StringBuilder();  op.toString(sb);  op.toString(sb,1);}  }
class C{  public LoginConfiguration httpResponse(HttpServletResponse httpResponse){  this.httpResponse=httpResponse;  return this;}  }
class C{  public boolean isDefaultNamespace(String namespaceURI){  return false;}  }
class C{  public String basicTypeName(Field field){  String result=FIELD_TYPE_MAP.get(field.getKind());  if (result != null) {    if (result.contains(".")) {      return getTypeName(result);    }    return result;  }  throw new IllegalArgumentException("unknown type kind: " + field.getKind());}  }
class C{  public BrdFromSide(PlaPointInt p_from_point,ShapeTile p_shape){  PlaPoint border_projection=p_shape.nearest_border_point(p_from_point);  side_no=p_shape.contains_on_border_line_no(border_projection);  if (side_no < 0) {    System.out.println("CalcFromSide: side_no >= 0 expected");  }  border_intersection=border_projection.to_float();}  }
class C{  public void test_engineCreateSSLEngine_02(){  int[] invalid_port={Integer.MIN_VALUE,-65535,-1,65536,Integer.MAX_VALUE};  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  try {    SSLEngine sleng=ssl.engineCreateSSLEngine("localhost",1080);    fail("RuntimeException wasn't thrown");  } catch (  RuntimeException re) {    String str=re.getMessage();    if (!str.equals("Not initialiazed"))     fail("Incorrect exception message: " + str);  }catch (  Exception e) {    fail("Incorrect exception " + e + " was thrown");  }  for (int i=0; i < invalid_port.length; i++) {    try {      SSLEngine sleng=ssl.engineCreateSSLEngine("localhost",invalid_port[i]);      fail("IllegalArgumentException wasn't thrown");    } catch (    IllegalArgumentException iae) {    }  }}  }
class C{  public CallIdHeader createCallIdHeader(String callId) throws ParseException {  if (callId == null)   throw new NullPointerException("null arg callId");  CallID c=new CallID();  c.setCallId(callId);  return c;}  }
class C{  public ServerManagedObjectAddListenerAdaptor(ConfigurationAddListener<T> listener){  this.listener=listener;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.TokenTypesOfferedElement createTokenTypesOfferedElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenTypesOfferedElementImpl();}  }
class C{  public boolean change_layer_action(int p_new_layer){  int r_layer=i_brd.set_layer(p_new_layer);  return r_layer == p_new_layer;}  }
class C{  public void cancel(){  this.cancelled=true;}  }
class C{  public static void processNotification(String xml) throws PolicyEvaluationException {  if (debug.messageEnabled()) {    debug.message("ResultsCacheUtil.processNotification():" + "recieved notification xml=" + xml);  }  PolicyNotification pn=extractPolicyNotification(xml);  if (pn != null) {    ResourceResultCache.processPolicyNotification(pn);  } else {    debug.error("ResultsCacheUtil.processPolicyNotification():" + "PolicyNotification is null");  }}  }
class C{  final Node firstDataNode(){  for (Node p=head; p != null; ) {    Object item=p.item;    if (p.isData) {      if (item != null && item != p)       return p;    } else     if (item == null)     break;    if (p == (p=p.next))     p=head;  }  return null;}  }
class C{  protected void removeFromMarkedPosition(){  System.arraycopy(buffer,read_pos,buffer,marked_pos,read_pos_end - read_pos);  read_pos_end-=(read_pos - marked_pos);  read_pos=marked_pos;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("MimeVersionParser.parse");  MimeVersion mimeVersion=new MimeVersion();  try {    headerName(TokenTypes.MIME_VERSION);    mimeVersion.setHeaderName(SIPHeaderNames.MIME_VERSION);    try {      String majorVersion=this.lexer.number();      mimeVersion.setMajorVersion(Integer.parseInt(majorVersion));      this.lexer.match('.');      String minorVersion=this.lexer.number();      mimeVersion.setMinorVersion(Integer.parseInt(minorVersion));    } catch (    InvalidArgumentException ex) {      throw createParseException(ex.getMessage());    }    this.lexer.SPorHT();    this.lexer.match('\n');    return mimeVersion;  }  finally {    if (debug)     dbg_leave("MimeVersionParser.parse");  }}  }
class C{  private void translateImageToCenterTouchPosition(float t){  float targetX=startTouch.x + t * (endTouch.x - startTouch.x);  float targetY=startTouch.y + t * (endTouch.y - startTouch.y);  PointF curr=transformCoordBitmapToTouch(bitmapX,bitmapY);  matrix.postTranslate(targetX - curr.x,targetY - curr.y);}  }
class C{  public void warning(SAXParseException spe) throws SAXParseException {  if (PolicyManager.debug.warningEnabled()) {    PolicyManager.debug.warning(spe.getMessage() + "\nLine Number in XML file : " + spe.getLineNumber()+ "\nColumn Number in XML file : "+ spe.getColumnNumber());  }}  }
class C{  public static StringArgument propertiesFileArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_PROP_FILE_PATH).description(INFO_DESCRIPTION_PROP_FILE_PATH.get()).valuePlaceholder(INFO_PROP_FILE_PATH_PLACEHOLDER.get()).buildArgument();}  }
class C{  public static void shuffleList(ArrayList<SongDetail> songs){  if (MusicPreferance.shuffledPlaylist.isEmpty()) {    ArrayList<SongDetail> songList=new ArrayList<SongDetail>(songs);    int n=songList.size();    Random random=new Random();    random.nextInt();    for (int i=0; i < n; i++) {      int change=i + random.nextInt(n - i);      swap(songList,i,change);    }    MusicPreferance.shuffledPlaylist=songList;  }}  }
class C{  public final void testWriteint02() throws IOException {  for (int k=0; k < algorithmName.length; k++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      DigestOutputStream dos=new DigestOutputStream(bos,md);      dos.on(false);      for (int i=0; i < MY_MESSAGE_LEN; i++) {        dos.write(myMessage[i]);      }      assertTrue("write",Arrays.equals(MDGoldenData.getMessage(),bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Add Request");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  DN:  ");  buffer.append(dn);  buffer.append(EOL);  buffer.append("  Attributes:");  buffer.append(EOL);  for (  RawAttribute attribute : attributes) {    attribute.toString(buffer,indent + 4);  }}  }
class C{  public ValidationException(String message,Throwable exception){  this(message,null,exception);}  }
class C{  public void shutdown(){  if (shutdown.compareAndSet(false,true)) {    final RSUpdater rsUpdater=this.rsUpdater.get();    if (rsUpdater != null) {      rsUpdater.initiateShutdown();    }    if (flushThread != null) {      flushThread.initiateShutdown();synchronized (flushThread) {        flushThread.notify();      }    }    DirectoryServer.deregisterAlertGenerator(this);    DirectoryServer.deregisterBackendInitializationListener(this);    DirectoryServer.deregisterShutdownListener(this);    disableService();  }  try {    while (!done) {      Thread.sleep(50);    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  public void put(byte[] buffer){  put(buffer,0,buffer.length);}  }
class C{  private UnionIndexQuery(Collection<IndexQuery> subIndexQueries){  this.subIndexQueries=subIndexQueries;}  }
class C{  protected void fireValueChanged(int firstIndex,int lastIndex){  fireValueChanged(firstIndex,lastIndex,getValueIsAdjusting());}  }
class C{  public Query whereEqualTo(Contact.Field field,Object value){  addNewConstraint(field,Where.equalTo(field.getColumn(),value));  return this;}  }
class C{  public static Foo fetchByPrimaryKey(long fooId){  return getPersistence().fetchByPrimaryKey(fooId);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createDocument05.class,args);}  }
class C{  public SnsRegistrationPredicate(String realm){  this();  this.realm=realm;}  }
class C{  protected boolean top(TextView widget,Spannable buffer){  return false;}  }
class C{  public static void main(String[] args){  int retCode=mainCompare(args,true,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle alloc=(allocation instanceof Rectangle) ? (Rectangle)allocation : allocation.getBounds();  int n=getViewCount();  int x=alloc.x + getLeftInset();  int y=alloc.y + getTopInset();  Rectangle clip=g.getClipBounds();  for (int i=0; i < n; i++) {    tempRect.x=x + getOffset(X_AXIS,i);    tempRect.y=y + getOffset(Y_AXIS,i);    tempRect.width=getSpan(X_AXIS,i);    tempRect.height=getSpan(Y_AXIS,i);    int trx0=tempRect.x, trx1=trx0 + tempRect.width;    int try0=tempRect.y, try1=try0 + tempRect.height;    int crx0=clip.x, crx1=crx0 + clip.width;    int cry0=clip.y, cry1=cry0 + clip.height;    if ((trx1 >= crx0) && (try1 >= cry0) && (crx1 >= trx0)&& (cry1 >= try0)) {      paintChild(g,tempRect,i);    }  }}  }
class C{  public SearchResultDoneProtocolOp(int resultCode){  this.resultCode=resultCode;}  }
class C{  public IIOException(String message,Throwable cause){  super(message);  initCause(cause);}  }
class C{  public AMSearchResults searchFilteredRoles(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchFilteredRoles(wildcard,null,searchControl);}  }
class C{  private JAXB(){}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.ReferenceListType.DataReference createReferenceListTypeDataReference() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.ReferenceListTypeImpl.DataReferenceImpl();}  }
class C{  public static double fixAmount(final double value){  final BigDecimal b1=new BigDecimal(value);  final BigDecimal b2=b1.setScale(3,BigDecimal.ROUND_HALF_UP);  return b2.doubleValue();}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("arc iterator out of bounds");  }  double angle=angStRad;  if (index == 0) {    coords[0]=(float)(x + Math.cos(angle) * w);    coords[1]=(float)(y + Math.sin(angle) * h);    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_MOVETO;  }  if (index > arcSegs) {    if (index == arcSegs + lineSegs) {      return SEG_CLOSE;    }    coords[0]=(float)x;    coords[1]=(float)y;    if (affine != null) {      affine.transform(coords,0,coords,0,1);    }    return SEG_LINETO;  }  angle+=increment * (index - 1);  double relx=Math.cos(angle);  double rely=Math.sin(angle);  coords[0]=(float)(x + (relx - cv * rely) * w);  coords[1]=(float)(y + (rely + cv * relx) * h);  angle+=increment;  relx=Math.cos(angle);  rely=Math.sin(angle);  coords[2]=(float)(x + (relx + cv * rely) * w);  coords[3]=(float)(y + (rely - cv * relx) * h);  coords[4]=(float)(x + relx * w);  coords[5]=(float)(y + rely * h);  if (affine != null) {    affine.transform(coords,0,coords,0,3);  }  return SEG_CUBICTO;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.SecurityTokenElement createSecurityTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.SecurityTokenElementImpl();}  }
class C{  public void clearInterceptors(){  clearRequestInterceptors();  clearResponseInterceptors();}  }
class C{  public PlainSASLMechanismHandler(){  super();}  }
class C{  @Override public boolean accept(File file){  return !filter.accept(file);}  }
class C{  public String matchByEpisodeIdentifier(String name){  String seriesName=seasonEpisodeMatcher.head(name);  if (seriesName != null && seriesName.length() > 0) {    return seriesName;  }  int datePosition=dateMatcher.find(name,0);  if (datePosition > 0) {    return name.substring(0,datePosition);  }  return null;}  }
class C{  public AttributeFilter(final Collection<String> attributeDescriptions){  this(attributeDescriptions,Schema.getDefaultSchema());}  }
class C{  private void put112(final int b1,final int b2,final int s){  pool.put11(b1,b2).putShort(s);}  }
class C{  public String encode(){  return encode(new StringBuilder()).toString();}  }
class C{  public boolean canAcceptVariables(){  return true;}  }
class C{  public static void removeFromSite(SSOToken ssoToken,String instanceName,String siteId) throws SMSException, SSOException {  ServiceConfig svr=getServerConfig(ssoToken,instanceName);  if (svr != null) {    Map attrs=svr.getAttributes();    Set setID=(Set)attrs.get(ATTR_SERVER_ID);    String serverId=(String)setID.iterator().next();    if (!serverId.equals(DEFAULT_SERVER_ID)) {      attrs.put(ATTR_PARENT_SITE_ID,Collections.emptySet());      svr.setAttributes(attrs);    }  }}  }
class C{  public static long checksumCRC32(File file) throws IOException {  CRC32 crc=new CRC32();  checksum(file,crc);  return crc.getValue();}  }
class C{  public Class<?> type(){  if (isClass) {    return (Class<?>)object;  } else {    return object.getClass();  }}  }
class C{  public CloneNotSupportedException(String s){  super(s);}  }
class C{  public SSOToken createSSOToken(String tokenId) throws SSOException, UnsupportedOperationException {  return createSSOToken(tokenId,false);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    if (serverTransaction == null) {      System.out.println("null server transaction -- ignoring the ACK!");      return;    }    Dialog dialog=serverTransaction.getDialog();    this.createdCount++;    System.out.println("Dialog Created = " + dialog.getDialogId() + " createdCount "+ this.createdCount+ " Dialog State = "+ dialog.getState());    if (this.dialogIds.contains(dialog.getDialogId())) {      System.out.println("OOPS ! I already saw " + dialog.getDialogId());    } else {      this.dialogIds.add(dialog.getDialogId());    }    Request byeRequest=dialog.createRequest(Request.BYE);    ClientTransaction tr=sipProvider.getNewClientTransaction(byeRequest);    dialog.sendRequest(tr);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void save_design_file(java.io.ObjectOutputStream p_object_stream) throws IOException {  p_object_stream.writeObject(r_board);  p_object_stream.writeObject(itera_settings);  p_object_stream.writeObject(coordinate_transform);  p_object_stream.writeObject(gdi_context);}  }
class C{  public LocalBackendDeleteOperation(DeleteOperation delete){  super(delete);  LocalBackendWorkflowElement.attachLocalOperation(delete,this);}  }
class C{  public void push(final float value){  int bits=Float.floatToIntBits(value);  if (bits == 0L || bits == 0x3f800000 || bits == 0x40000000) {    mv.visitInsn(Opcodes.FCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  static int readInt(final byte[] b,final int index){  return ((b[index] & 0xFF) << 24) | ((b[index + 1] & 0xFF) << 16) | ((b[index + 2] & 0xFF) << 8)| (b[index + 3] & 0xFF);}  }
class C{  public GenericPrincipal(String name,String password,List<String> roles,Principal userPrincipal,LoginContext loginContext){  this(name,password,roles,userPrincipal,loginContext,null);}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  final void tryTerminate(){  for (; ; ) {    int c=ctl.get();    if (isRunning(c) || runStateAtLeast(c,TIDYING) || (runStateOf(c) == SHUTDOWN && !workQueue.isEmpty()))     return;    if (workerCountOf(c) != 0) {      interruptIdleWorkers(ONLY_ONE);      return;    }    final ReentrantLock mainLock=this.mainLock;    mainLock.lock();    try {      if (ctl.compareAndSet(c,ctlOf(TIDYING,0))) {        try {          terminated();        }  finally {          ctl.set(ctlOf(TERMINATED,0));          termination.signalAll();        }        return;      }    }  finally {      mainLock.unlock();    }  }}  }
class C{  public FrameBodyTIT1(){}  }
class C{  public static NSObject parse(File f) throws IOException, ParseException {  return parse(new FileInputStream(f));}  }
class C{  protected Type(String name){  this.name=name;}  }
class C{  public void write(byte[] buf,int off,int len) throws IOException {  output.write(buf,off,len);  bytesWritten+=len;}  }
class C{  public final void testGetPrimeP(){  RSAPrivateCrtKeySpec ks=new RSAPrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.valueOf(5L),BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE);  assertTrue(BigInteger.valueOf(5L).equals(ks.getPrimeP()));}  }
class C{  public void test_subList_addAll(){  List mainList=new ArrayList();  Object[] mainObjects={"a","b","c"};  mainList.addAll(Arrays.asList(mainObjects));  List subList=mainList.subList(1,2);  assertFalse("subList should not contain \"a\"",subList.contains("a"));  assertFalse("subList should not contain \"c\"",subList.contains("c"));  assertTrue("subList should contain \"b\"",subList.contains("b"));  Object[] subObjects={"one","two","three"};  subList.addAll(Arrays.asList(subObjects));  assertFalse("subList should not contain \"a\"",subList.contains("a"));  assertFalse("subList should not contain \"c\"",subList.contains("c"));  Object[] expected={"b","one","two","three"};  ListIterator iter=subList.listIterator();  for (int i=0; i < expected.length; i++) {    assertTrue("subList should contain " + expected[i],subList.contains(expected[i]));    assertTrue("should be more elements",iter.hasNext());    assertEquals("element in incorrect position",expected[i],iter.next());  }}  }
class C{  private void decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int xl=BytesTo32bits(src,srcIndex);  int xr=BytesTo32bits(src,srcIndex + 4);  xl^=P[ROUNDS + 1];  for (int i=ROUNDS; i > 0; i-=2) {    xr^=F(xl) ^ P[i];    xl^=F(xr) ^ P[i - 1];  }  xr^=P[0];  Bits32ToBytes(xr,dst,dstIndex);  Bits32ToBytes(xl,dst,dstIndex + 4);}  }
class C{  public GuardedObject(Object object,Guard guard){  this.guard=guard;  this.object=object;}  }
class C{  private Set findDynamicGroupMembersByUrl(LDAPUrl url,String userRDN) throws PolicyException {  Connection ld=null;  Set<String> groupMemberDNs=new HashSet<>();  try (Connection conn=connPool.getConnection()){    StringBuilder filter=new StringBuilder(25);    filter.append("(&").append(userRDN);    String groupFilter=url.getFilter().toString();    int index=groupFilter.indexOf("(");    if (index != 0) {      filter.append("(").append(groupFilter).append("))");    } else {      filter.append(groupFilter).append(")");    }    debug.message("search filter in LDAPGroups : {}",filter);    String[] attrs={userRDNAttrName};    SearchRequest searchRequest=LDAPRequests.newSearchRequest(url.getName(),url.getScope(),Filter.valueOf(filter.toString()),attrs);    ConnectionEntryReader reader=conn.search(searchRequest);    while (reader.hasNext()) {      if (reader.isReference()) {        reader.readReference();      } else {        SearchResultEntry entry=reader.readEntry();        if (entry != null) {          groupMemberDNs.add(entry.getName().toString());        }      }    }  } catch (  LdapException le) {    String objs[]={orgName};    ResultCode resultCode=le.getResult().getResultCode();    if (ResultCode.SIZE_LIMIT_EXCEEDED.equals(resultCode)) {      debug.warning("LDAPGroups.findDynamicGroupMembersByUrl(): exceeded the size limit");      throw new PolicyException(ResBundleUtils.rbName,"ldap_search_exceed_size_limit",objs,null);    } else     if (ResultCode.TIME_LIMIT_EXCEEDED.equals(resultCode)) {      debug.warning("LDAPGroups.findDynamicGroupMembersByUrl(): exceeded the time limit");      throw new PolicyException(ResBundleUtils.rbName,"ldap_search_exceed_time_limit",objs,null);    } else {      throw new PolicyException(le);    }  }catch (  Exception e) {    throw new PolicyException(e);  }  return groupMemberDNs;}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name","entity-modify-attributes"}) @Test(groups={"api"}) public void modifyAttributes(String parentRealm,String idType,String entityName,String modificationAttributes) throws Exception {  Object[] params={parentRealm,idType,entityName,modificationAttributes};  entering("modifyAttributes",params);  Map<String,Set<String>> values=CollectionUtils.parseStringToMap(modificationAttributes);  if (!values.isEmpty()) {    try {      AMIdentity amid=getIdentity(parentRealm,IdUtils.getType(idType),entityName);      modifyIdentity(amid,values);      Map verification=amid.getAttributes(values.keySet());      assert verification.equals(values);    } catch (    Exception e) {      log(Level.SEVERE,"modifyAttributes",e.getMessage(),params);      e.printStackTrace();      throw e;    }  }  exiting("modifyAttributes");}  }
class C{  public String transform(String password){  if (AuthnSvcUtils.debug.messageEnabled()) {    AuthnSvcUtils.debug.message("UppercaseTransform.transform");  }  if (password == null) {    return null;  }  return password.toUpperCase();}  }
class C{  public void testConstructorStringRadix8(){  String value="76356237071623450";  int radix=8;  byte rBytes[]={7,-50,-28,-8,-25,39,40};  BigInteger aNumber=new BigInteger(value,radix);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String attributeSchemaName=getStringOptionValue(IArgument.ATTRIBUTE_SCHEMA);  List defaultValues=(List)rc.getOption(IArgument.DEFAULT_VALUES);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  String defaultValue=null;  try {    for (Iterator i=defaultValues.iterator(); i.hasNext(); ) {      defaultValue=(String)i.next();      String[] params={serviceName,schemaType,subSchemaName,attributeSchemaName,defaultValue};      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_REMOVE_ATTRIBUTE_SCHEMA_DEFAULT_VALUE",params);      AttributeSchema attrSchema=ss.getAttributeSchema(attributeSchemaName);      if (attrSchema == null) {        String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,defaultValue,"attribute schema does not exist"};        attributeSchemaNoExist(attributeSchemaName,"FAILED_REMOVE_ATTRIBUTE_SCHEMA_DEFAULT_VALUE",args);      }      attrSchema.removeDefaultValue(defaultValue);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_REMOVE_ATTRIBUTE_SCHEMA_DEFAULT_VALUE",params);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("attribute-schema-remove-default-values-succeed"),(Object[])params));    }  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,defaultValue,e.getMessage()};    debugError("RemoveAttributeSchemaDefaultValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_ATTRIBUTE_SCHEMA_DEFAULT_VALUE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeSchemaName,defaultValue,e.getMessage()};    debugError("RemoveAttributeSchemaDefaultValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_REMOVE_ATTRIBUTE_SCHEMA_DEFAULT_VALUE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static Set<String> putSetIntoMap(String key,Map<String,Set<String>> map,String value){  Set<String> set=new HashSet<String>();  set.add(value);  map.put(key,set);  return set;}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(ZonedDateTime.class,new ZonedDateTimeSerializer(ISO_FIXED_FORMAT));  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  @Override public void execute() throws MojoExecutionException, MojoFailureException {  createOutputDirectory();  generateConfigRef();  try {    copyResources();  } catch (  IOException e) {    throw new MojoExecutionException("Failed to copy resource files.",e);  }}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 1) % length;  while (index != last) {    if (array[index] == key || array[index] == null) {      break;    }    index=(index + 1) % length;  }  return index;}  }
class C{  @NonNull public final Agera takeWhile(@NonNull Condition condition){  return new AgeraTakeWhile(this,condition);}  }
class C{  public double distance(PlaPointFloat p_from_point){  double result=p_from_point.distance(nearest_point_approx(p_from_point));  return result;}  }
class C{  public static String toBcp47Language(Locale locale){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    return locale.toLanguageTag();  }  final char SEP='-';  String language=locale.getLanguage();  String region=locale.getCountry();  String variant=locale.getVariant();  if (language.equals("no") && region.equals("NO") && variant.equals("NY")) {    language="nn";    region="NO";    variant="";  }  if (language.isEmpty() || !language.matches("\\p{Alpha}{2,8}")) {    language="und";  } else   if (language.equals("iw")) {    language="he";  } else   if (language.equals("in")) {    language="id";  } else   if (language.equals("ji")) {    language="yi";  }  if (!region.matches("\\p{Alpha}{2}|\\p{Digit}{3}")) {    region="";  }  if (!variant.matches("\\p{Alnum}{5,8}|\\p{Digit}\\p{Alnum}{3}")) {    variant="";  }  StringBuilder bcp47Tag=new StringBuilder(language);  if (!region.isEmpty()) {    bcp47Tag.append(SEP).append(region);  }  if (!variant.isEmpty()) {    bcp47Tag.append(SEP).append(variant);  }  return bcp47Tag.toString();}  }
class C{  public void removeFromFace(BlockFace face){switch (face) {case WEST:    setData((byte)(getData() & ~VINE_WEST));  break;case NORTH:setData((byte)(getData() & ~VINE_NORTH));break;case SOUTH:setData((byte)(getData() & ~VINE_SOUTH));break;case EAST:setData((byte)(getData() & ~VINE_EAST));break;case NORTH_WEST:removeFromFace(BlockFace.WEST);removeFromFace(BlockFace.NORTH);break;case SOUTH_WEST:removeFromFace(BlockFace.WEST);removeFromFace(BlockFace.SOUTH);break;case NORTH_EAST:removeFromFace(BlockFace.EAST);removeFromFace(BlockFace.NORTH);break;case SOUTH_EAST:removeFromFace(BlockFace.EAST);removeFromFace(BlockFace.SOUTH);break;case UP:break;default :throw new IllegalArgumentException("Vines can't go on face " + face.toString());}}  }
class C{  public PrintException(){  super();}  }
class C{  public static Cookie newCookie(String name,String value,int maxAge,String path,String domain){  Cookie cookie=null;  if (cookieEncoding && value != null) {    cookie=new Cookie(name,URLEncDec.encode(value));  } else {    cookie=new Cookie(name,value);  }  cookie.setMaxAge(maxAge);  if ((path != null) && (path.length() > 0)) {    cookie.setPath(path);  } else {    cookie.setPath("/");  }  if ((domain != null) && (domain.length() > 0)) {    cookie.setDomain(domain);  }  cookie.setSecure(isCookieSecure());  return cookie;}  }
class C{  private void releaseReader(BlockLogReader<K,V> reader){  readerPool.release(reader);}  }
class C{  public DN child(final String dn){  Reject.ifNull(dn);  return child(valueOf(dn));}  }
class C{  public static List xmlToAuthConfigurationEntry(String xmlValue){  if (debug.messageEnabled()) {    debug.message("AuthConfUtil.xmltoentries, xml=" + xmlValue);  }  List entries=new ArrayList();  Document document=XMLUtils.toDOMDocument(xmlValue,debug);  if (document == null) {    return entries;  }  Element valuePair=document.getDocumentElement();  NodeList children=valuePair.getChildNodes();  final int number=children.getLength();  for (int i=0; i < number; i++) {    try {      entries.add(new AuthConfigurationEntry(children.item(i)));    } catch (    Exception e) {      debug.error("parseValue",e);    }  }  return entries;}  }
class C{  public Dimension preferredLayoutSize(Container container){  int prePrimary=0;  int preSecondary=0;  Insets insets=splitPane.getInsets();  for (int counter=0; counter < 3; counter++) {    if (components[counter] != null) {      Dimension preSize=components[counter].getPreferredSize();      int secSize=getSizeForSecondaryAxis(preSize);      prePrimary+=getSizeForPrimaryAxis(preSize);      if (secSize > preSecondary)       preSecondary=secSize;    }  }  if (insets != null) {    prePrimary+=getSizeForPrimaryAxis(insets,true) + getSizeForPrimaryAxis(insets,false);    preSecondary+=getSizeForSecondaryAxis(insets,true) + getSizeForSecondaryAxis(insets,false);  }  if (axis == 0) {    return new Dimension(prePrimary,preSecondary);  }  return new Dimension(preSecondary,prePrimary);}  }
class C{  static void checkSignedByte(final int value,final String msg){  if (value < Byte.MIN_VALUE || value > Byte.MAX_VALUE) {    throw new IllegalArgumentException(msg + " (must be a signed byte): " + value);  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MaritalStatusElement createMaritalStatusElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MaritalStatusElementImpl();}  }
class C{  @Override public void destroySubcontext(String name) throws NamingException {  destroySubcontext(new CompositeName(name));}  }
class C{  TrueTypeFontSubset(String fileName,RandomAccessFileOrArray rf,Set<Integer> glyphsUsed,int directoryOffset,boolean includeCmap,boolean includeExtras){  this.fileName=fileName;  this.rf=rf;  this.glyphsUsed=glyphsUsed;  this.includeCmap=includeCmap;  this.includeExtras=includeExtras;  this.directoryOffset=directoryOffset;  glyphsInList=new ArrayList<>(glyphsUsed);}  }
class C{  final Node predecessor() throws NullPointerException {  Node p=prev;  if (p == null)   throw new NullPointerException(); else   return p;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.EmailAddressElement createEmailAddressElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.EmailAddressElementImpl();}  }
class C{  public static String jsdocify(String comment){  comment=jsdocifyProtoMarkdownLinks(comment);  comment=jsdocifyCloudMarkdownLinks(comment);  return comment.trim();}  }
class C{  protected FloatControl(Type type,float minimum,float maximum,float precision,int updatePeriod,float initialValue,String units){  this(type,minimum,maximum,precision,updatePeriod,initialValue,units,"","","");}  }
class C{  public ConnectException(){}  }
class C{  public final void testToString(){  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      assertNotNull(dis.toString());      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void init(Subject subject,Map sharedState,Map options){  this.options=options;}  }
class C{  public void delete(String id) throws CoreTokenException {  try {    cts.delete(id);    if (auditLogger.isAuditLogEnabled()) {      String[] obs={"DELETED_TOKEN",id};      auditLogger.logAccessMessage("DELETED_TOKEN",obs,null);    }  } catch (  CoreTokenException e) {    if (auditLogger.isAuditLogEnabled()) {      String[] obs={"FAILED_DELETE_TOKEN",id};      auditLogger.logErrorMessage("FAILED_DELETE_TOKEN",obs,null);    }    logger.error("Could not delete token " + e.getMessage());    throw e;  }}  }
class C{  static Map trustedProviderSetToProtocolMap(Set providerSet,String realm){  if ((providerSet == null) || providerSet.isEmpty()) {    return Collections.EMPTY_MAP;  }  Map map=new HashMap();  Set wsfedSet=new HashSet();  Set saml2Set=new HashSet();  Set idffSet=new HashSet();  Iterator it=providerSet.iterator();  while (it.hasNext()) {    String val=(String)it.next();    if (debug.messageEnabled()) {      debug.message("COTUtils.setToPrototolMap: check " + val);    }    if (val.endsWith(SAML2_DELIM)) {      saml2Set.add(val.substring(0,val.length() - SAML2_DELIM.length()));    } else     if (val.endsWith(IDFF_DELIM)) {      idffSet.add(val.substring(0,val.length() - IDFF_DELIM.length()));    } else     if (val.endsWith(WSFED_DELIM)) {      wsfedSet.add(val.substring(0,val.length() - WSFED_DELIM.length()));    } else {      Set protocolSet=findProtocolsForEntity(val,realm);      if ((protocolSet != null) && !protocolSet.isEmpty()) {        Iterator pIt=protocolSet.iterator();        while (pIt.hasNext()) {          String proto=(String)pIt.next();          if (proto.equals(COTConstants.SAML2)) {            saml2Set.add(val);          } else           if (proto.equals(COTConstants.IDFF)) {            idffSet.add(val);          } else           if (proto.equals(COTConstants.WS_FED)) {            wsfedSet.add(val);          }        }      }    }  }  map.put(COTConstants.SAML2,saml2Set);  map.put(COTConstants.IDFF,idffSet);  map.put(COTConstants.WS_FED,wsfedSet);  if (debug.messageEnabled()) {    debug.message("COTUtils.setToProtocolMap: return " + map);  }  return map;}  }
class C{  public long skip(long n) throws IOException {  long nr=in.skip(n);  if (nr > 0)   monitor.setProgress(nread+=nr);  return nr;}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public void addEvent(String e){  if (TextUtils.isEmpty(e)) {    return;  }  if (event == null) {    event=new WXEvent();  }  if (containsEvent(e)) {    return;  }  event.add(e);}  }
class C{  public DTMIterator createDTMIterator(String xpathString,PrefixResolver presolver){  return m_dtmManager.createDTMIterator(xpathString,presolver);}  }
class C{  private static void doSSO(HttpServletRequest request,HttpServletResponse response,String target,String service) throws IOException, SAMLException {  if (request == null || response == null || target == null) {    SAMLUtils.debug.error("SAMLClient:Input parameter is null.");    throw new SAMLException(SAMLUtils.bundle.getString("nullInput"));  }  if ((!service.equals(SAMLConstants.SAML_AWARE_NAMING)) && (!service.equals(SAMLConstants.SAML_POST_NAMING)) && (!service.equals(SAMLConstants.SAML_SOAP_NAMING))) {    SAMLUtils.debug.error("SAMLClient:illegal naming service name.");    throw new SAMLException(SAMLUtils.bundle.getString("illegalNamingService"));  }  Object ssoToken=null;  SessionProvider sessionProvider;  try {    sessionProvider=SessionManager.getProvider();    ssoToken=sessionProvider.getSession(request);    if (ssoToken == null) {      SAMLUtils.debug.error("SAMLClient:SSOToken is null.");      throw new SAMLException(SAMLUtils.bundle.getString("nullSSOToken"));    }    if (!sessionProvider.isValid(ssoToken)) {      SAMLUtils.debug.error("SAMLClient:Session is invalid.");      throw new SAMLException(SAMLUtils.bundle.getString("invalidSSOToken"));    }  } catch (  SessionException se) {    SAMLUtils.debug.error("SAMLClient",se);    throw new SAMLException("SAMLClient:doSSO:" + se.getMessage());  }  URL weburl=null;  try {    URL serverurl=new URL(SAMLServiceManager.getServerURL());    weburl=SystemConfigurationUtil.getServiceURL(service,serverurl.getProtocol(),serverurl.getHost(),serverurl.getPort(),serverurl.getPath());  } catch (  SystemConfigurationException ue) {    SAMLUtils.debug.error("SAMLClient",ue);    throw new SAMLException(SAMLUtils.bundle.getString("URLNotFoundException"));  }  StringBuffer redirectedurl=new StringBuffer(200);  String tname=(String)SAMLServiceManager.getAttribute(SAMLConstants.TARGET_SPECIFIER);  redirectedurl.append(weburl).append("?").append(tname).append("=").append(target);  response.sendRedirect(redirectedurl.toString());}  }
class C{  public void testConstrStringWithoutExpPos1(){  String a="732546982374982347892379283571094797.287346782359284756";  int aScale=18;  BigInteger bA=new BigInteger("732546982374982347892379283571094797287346782359284756");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public static AbandonRequest unmodifiableAbandonRequest(final AbandonRequest request){  if (request instanceof UnmodifiableAbandonRequestImpl) {    return request;  }  return new UnmodifiableAbandonRequestImpl(request);}  }
class C{  public CertificateException(String msg){  super(msg);}  }
class C{  @Override public void run(){  try {    while (!shutdown) {      try {        ReplicationMsg replicationMsg=session.receive();        if (!(replicationMsg instanceof UpdateMsg)) {          debugInfo("Fake RS " + serverId + " received non update message: "+ replicationMsg);          continue;        }        UpdateMsg updateMsg=(UpdateMsg)replicationMsg;        checkUpdateAssuredParameters(updateMsg);        nReceivedUpdates++;switch (scenario) {case REPLY_OK_RS_SCENARIO:          if (updateMsg.isAssured()) {            AckMsg ackMsg=new AckMsg(updateMsg.getCSN());            session.publish(ackMsg);            ackReplied=true;          }        break;case TIMEOUT_RS_SCENARIO:      break;case DS_TIMEOUT_RS_SCENARIO_SAFE_READ:    if (updateMsg.isAssured()) {      sleep(MAX_SEND_UPDATE_TIME);      AckMsg ackMsg=new AckMsg(updateMsg.getCSN());      ackMsg.setHasTimeout(true);      ackMsg.setFailedServers(newArrayList(serverId + 10));      session.publish(ackMsg);      ackReplied=true;    }  break;case DS_WRONG_STATUS_RS_SCENARIO_SAFE_READ:if (updateMsg.isAssured()) {  AckMsg ackMsg=new AckMsg(updateMsg.getCSN());  ackMsg.setHasWrongStatus(true);  ackMsg.setFailedServers(newArrayList(serverId + 10));  session.publish(ackMsg);  ackReplied=true;}break;case DS_REPLAY_ERROR_RS_SCENARIO_SAFE_READ:if (updateMsg.isAssured()) {AckMsg ackMsg=new AckMsg(updateMsg.getCSN());ackMsg.setHasReplayError(true);ackMsg.setFailedServers(newArrayList(serverId + 10));session.publish(ackMsg);ackReplied=true;}break;default :Assert.fail("Unknown scenario: " + scenario);}} catch (SocketTimeoutException toe) {debugInfo("Fake RS " + serverId + " : "+ toe.getMessage()+ " (this is normal)");}}} catch (Throwable th) {debugInfo("Terminating thread of fake RS " + serverId + " :"+ th.getMessage());}}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  load();  return super.viewToModel(x,y,a,bias);}  }
class C{  public boolean isReadable(String attributeName){  if (readables.contains(attributeName.toLowerCase()))   return true; else   return false;}  }
class C{  public long max(){  return deltaMax.get();}  }
class C{  public String toXMLString() throws SAML2Exception {  return toXMLString(true,false);}  }
class C{  public final short readShort() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (short)((ch1 << 8) + (ch2 << 0));}  }
class C{  protected String generateSessionId(){  String result=null;  do {    if (result != null) {      duplicates++;    }    result=sessionIdGenerator.generateSessionId();  } while (sessions.containsKey(result));  return result;}  }
class C{  public CachedPolicy(Policy policy){  this.policy=policy;  trackPolicyName=policy.getName();}  }
class C{  private Diffs(){}  }
class C{  public void insert_wchar(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_wchar",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_wchar(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void message(String msg){  getDebugServiceInstance().message(msg,null);}  }
class C{  public COMM_FAILURE(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  private void exitService(){  Log.i(TAG,"exitService");  if (mIsServiceBinded) {    unbindService(mServiceConnection);    mIsServiceBinded=false;  }  if (mIsServiceStarted) {    boolean isSuccess=stopService(new Intent(FmRadioActivity.this,FmRadioService.class));    if (!isSuccess) {      Log.e(TAG,"Error: Cannot stop the FM service.");    }    mIsServiceStarted=false;  }}  }
class C{  private void examineCompletedOperation(SearchOperation searchOperation){  assertTrue(searchOperation.getProcessingStartTime() > 0);  assertTrue(searchOperation.getProcessingStopTime() > 0);  assertTrue(searchOperation.getProcessingTime() >= 0);  ensurePostReponseHasRun();}  }
class C{  public void updateOperationErrMsgAndResCode(){}  }
class C{  private boolean is_legal(String p_string){  if (p_string == null) {    System.out.println("IdentifierType.is_legal: p_string is null");    return false;  }  for (int i=0; i < reserved_chars.length; ++i) {    if (p_string.contains(reserved_chars[i])) {      return false;    }  }  return true;}  }
class C{  public SAXException(String message,Exception e){  super(message);  this.exception=e;}  }
class C{  public boolean validate(Set<String> properties){  try {    validateProperty(properties);    return true;  } catch (  UnknownPropertyNameException|ConfigurationException ex) {    return false;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.utility.ExpiresElement createExpiresElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.utility.impl.ExpiresElementImpl();}  }
class C{  public static URI toNormalizedURI(File file){  return file.toURI().normalize();}  }
class C{  public LinkedHashMapEntry(final String name){  this(DN.valueOf(name));}  }
class C{  public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.ignorableWhitespace(ch,start,length);}  }
class C{  public void traverse(int pos) throws org.xml.sax.SAXException {  m_dtm=m_transformer.getXPathContext().getDTM(pos);  m_startNode=pos;  super.traverse(pos);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS05.class,args);}  }
class C{  public void saveAuthenticatedPrincipal(String principalName){  authenticatedPrincipals.add(principalName);  requestMap.put(ISAuthConstants.AUTHENTICATED_PRINCIPALS,StringUtils.join(authenticatedPrincipals,"|"));}  }
class C{  public void endAttributes() throws SAXException {  String uri=getCurrentElementUri();  String local=getCurrentElementLocal();  String prefix=nsContext.getPrefix(uri);  _assert(prefix != null);  String qname;  if (prefix.length() != 0)   qname=prefix + ':' + local; else   qname=local;  nsContext.iterateDeclaredPrefixes(startPrefixCallback);  writer.startElement(uri,local,qname,attributes);  attributes.clear();  textBuf.setLength(0);}  }
class C{  public ArrayIndexOutOfBoundsException(int index){  super("Array index out of range: " + index);}  }
class C{  public EncryptedAssertion createEncryptedAssertion(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ENCRYPTED_ASSERTION,xml);  if (obj == null) {    return new EncryptedAssertionImpl(xml);  } else {    return (EncryptedAssertion)obj;  }}  }
class C{  public boolean equals(XMLString obj2){  if (obj2 != null) {    if (!obj2.hasString()) {      return obj2.equals(str());    } else {      return str().equals(obj2.toString());    }  }  return false;}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    out.close();  }}  }
class C{  public void insert_val(java.io.Serializable value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_val",_opsClass);  DynValueOperations $self=(DynValueOperations)$so.servant;  try {    $self.insert_val(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthSeparatorUI();}  }
class C{  public PluginResult.PreOperation invokePreOperationExtendedPlugins(PreOperationExtendedOperation extendedOperation) throws CanceledOperationException {  PluginResult.PreOperation result=null;  for (int i=0; i < preOperationExtendedPlugins.length; i++) {    DirectoryServerPlugin p=preOperationExtendedPlugins[i];    if (isInternalOperation(extendedOperation,p)) {      registerSkippedPreOperationPlugin(p,extendedOperation);      continue;    }    try {      result=p.doPreOperation(extendedOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreOperationException(e,i,preOperationExtendedPlugins,extendedOperation,p);    }    if (result == null) {      return handlePreOperationResult(extendedOperation,i,preOperationExtendedPlugins,p);    } else     if (!result.continuePluginProcessing()) {      registerSkippedPreOperationPlugins(i,preOperationExtendedPlugins,extendedOperation);      return result;    }  }  if (result == null) {    result=PluginResult.PreOperation.continueOperationProcessing();  }  return result;}  }
class C{  public SMProfileViewBean(String name){  super(name);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createTableModel();  ptModel=new CCPageTitleModel(getClass().getClassLoader().getResourceAsStream("com/sun/identity/console/simplePageTitle.xml"));  registerChildren();}  }
class C{  void flushBuffer() throws IOException {synchronized (lock) {    ensureOpen();    if (nextChar == 0)     return;    out.write(cb,0,nextChar);    nextChar=0;  }}  }
class C{  public void writeStatement(Statement oldStm){  boolean internal=this.internal;  this.internal=true;  try {    super.writeStatement(oldStm);    mark(oldStm);    Object target=oldStm.getTarget();    if (target instanceof Field) {      String method=oldStm.getMethodName();      Object[] args=oldStm.getArguments();      if ((method == null) || (args == null)) {      } else       if (method.equals("get") && (args.length == 1)) {        target=args[0];      } else       if (method.equals("set") && (args.length == 2)) {        target=args[0];      }    }    statementList(target).add(oldStm);  } catch (  Exception e) {    getExceptionListener().exceptionThrown(new Exception("XMLEncoder: discarding statement " + oldStm,e));  }  this.internal=internal;}  }
class C{  private void prefixMask(int prefix){  int i;  for (i=0; prefix > 8; i++) {    this.prefixMask[i]=(byte)0xff;    prefix-=8;  }  this.prefixMask[i]=(byte)(0xff << 8 - prefix);}  }
class C{  public final int updateAndGet(IntUnaryOperator updateFunction){  int prev, next;  do {    prev=get();    next=updateFunction.applyAsInt(prev);  } while (!compareAndSet(prev,next));  return next;}  }
class C{  public void pushElemTemplateElement(ElemTemplateElement elem){  m_currentTemplateElements.push(elem);}  }
class C{  static void checkMethodDesc(final String desc){  if (desc == null || desc.length() == 0) {    throw new IllegalArgumentException("Invalid method descriptor (must not be null or empty)");  }  if (desc.charAt(0) != '(' || desc.length() < 3) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }  int start=1;  if (desc.charAt(start) != ')') {    do {      if (desc.charAt(start) == 'V') {        throw new IllegalArgumentException("Invalid descriptor: " + desc);      }      start=checkDesc(desc,start,false);    } while (start < desc.length() && desc.charAt(start) != ')');  }  start=checkDesc(desc,start + 1,true);  if (start != desc.length()) {    throw new IllegalArgumentException("Invalid descriptor: " + desc);  }}  }
class C{  public boolean isMethod(){  return memberNode == null ? false : memberNode instanceof MethodNode;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("xml","2.0");  assertTrue("domimplementationFeaturexmlVersion2Assert",state);}  }
class C{  public Set searchRoles(String wildcard,Map avPairs,int level) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(ROLE),getSearchFilter(AMObject.ROLE),wildcard,avPairs,level);}  }
class C{  public void print(long lnum){  print(String.valueOf(lnum));}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws NotSerializableException {  throw new NotSerializableException("Not serializable.");}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == null) {    return false;  }  if (this == obj) {    return true;  }  if (obj instanceof Size) {    Size other=(Size)obj;    return mWidth == other.mWidth && mHeight == other.mHeight;  }  return false;}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public boolean lessThanOrEquals(ResolutionSyntax other){  return (this.crossFeedResolution <= other.crossFeedResolution && this.feedResolution <= other.feedResolution);}  }
class C{  @RequestMapping(value="/foos",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Foo> updateFoo(@RequestBody Foo foo) throws URISyntaxException {  log.debug("REST request to update Foo : {}",foo);  if (foo.getId() == null) {    return createFoo(foo);  }  Foo result=fooRepository.save(foo);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("foo",foo.getId().toString())).body(result);}  }
class C{  private synchronized void initResourceBundle(String resourceBundleName){  String current=this.resourceBundleName;  if (current != null) {    if (current.equals(resourceBundleName)) {      return;    } else {      throw new IllegalArgumentException("Resource bundle name '" + resourceBundleName + "' is inconsistent with the existing '"+ current+ "'");    }  }  if (resourceBundleName != null) {    this.resourceBundle=loadResourceBundle(resourceBundleName);    this.resourceBundleName=resourceBundleName;  }}  }
class C{  public FilterProxy(Filter filter,ClassLoader threadCtxClassloader,Map<String,Object> preInvokeReqAttributes){  this.filter=filter;  this.threadCtxClassloader=threadCtxClassloader;  this.preInvokeReqAttributes=preInvokeReqAttributes;}  }
class C{  public synchronized void trimToSize(){  if (elementData.length != elementCount) {    grow(elementCount);  }}  }
class C{  public static String slash(String self,String replacement){  return SLASH.matcher(self).replaceAll(replacement);}  }
class C{  public boolean visitStylesheet(ElemTemplateElement elem){  return true;}  }
class C{  public void deleteGroup(String groupId){  try {    DeleteRequest request=Requests.newDeleteRequest(GROUP_PATH + groupId);    getConnection().delete(context,request);  } catch (  ResourceException e) {    throw new RuntimeException(e);  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  try {    int sourceNode=xctxt.getCurrentNode();    xctxt.pushCurrentNode(sourceNode);    DTM dtm=xctxt.getDTM(sourceNode);    short nodeType=dtm.getNodeType(sourceNode);    if ((DTM.DOCUMENT_NODE != nodeType) && (DTM.DOCUMENT_FRAGMENT_NODE != nodeType)) {      SerializationHandler rthandler=transformer.getSerializationHandler();      ClonerToResultTree.cloneToResultTree(sourceNode,nodeType,dtm,rthandler,false);      if (DTM.ELEMENT_NODE == nodeType) {        super.execute(transformer);        SerializerUtils.processNSDecls(rthandler,sourceNode,nodeType,dtm);        transformer.executeChildTemplates(this,true);        String ns=dtm.getNamespaceURI(sourceNode);        String localName=dtm.getLocalName(sourceNode);        transformer.getResultTreeHandler().endElement(ns,localName,dtm.getNodeName(sourceNode));      }    } else {      super.execute(transformer);      transformer.executeChildTemplates(this,true);    }  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  } finally {    xctxt.popCurrentNode();  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.security.ValidityRestrictionConditionType createValidityRestrictionConditionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.security.impl.ValidityRestrictionConditionTypeImpl();}  }
class C{  public void componentResized(ComponentEvent e){}  }
class C{  private AckMsg sendAssuredAddMsg(Entry entry,String parentUid) throws Exception {  AddMsg addMsg=new AddMsg(gen.newCSN(),entry.getName(),UUID.randomUUID().toString(),parentUid,entry.getObjectClassAttribute(),entry.getAllAttributes(),null);  addMsg.setAssured(isAssured);  addMsg.setAssuredMode(assuredMode);  addMsg.setSafeDataLevel(safeDataLevel);  session.publish(addMsg);  return waitForSpecificMsg(session,AckMsg.class);}  }
class C{  private void removeAttributeType(String definition,SchemaBuilder newSchemaBuilder,List<Modification> modifications,int currentPosition,Set<String> modifiedSchemaFiles) throws DirectoryException {  Schema currentSchema=newSchemaBuilder.toSchema();  String atOID=SchemaUtils.parseAttributeTypeOID(definition);  if (!currentSchema.hasAttributeType(atOID)) {    LocalizableMessage message=ERR_SCHEMA_MODIFY_REMOVE_NO_SUCH_ATTRIBUTE_TYPE.get(atOID);    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  for (int i=currentPosition + 1; i < modifications.size(); i++) {    Modification m=modifications.get(i);    Attribute a=m.getAttribute();    if (m.getModificationType() != ModificationType.ADD || !a.getAttributeDescription().getAttributeType().equals(attributeTypesType)) {      continue;    }    for (    ByteString v : a) {      try {        String oid=SchemaUtils.parseAttributeTypeOID(v.toString());        if (atOID.equals(oid)) {          return;        }      } catch (      DirectoryException de) {        logger.traceException(de);        throw de;      }    }  }  newSchemaBuilder.removeAttributeType(atOID);  addElementIfNotNull(modifiedSchemaFiles,getElementSchemaFile(currentSchema.getAttributeType(atOID)));}  }
class C{  public final CRL generateCRL(InputStream inStream) throws CRLException {  return spiImpl.engineGenerateCRL(inStream);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildnodeancestor.class,args);}  }
class C{  private static long now(){  return System.nanoTime() - NANO_ORIGIN;}  }
class C{  public void reset(){  super.reset();  H1=0x6a09e667f3bcc908L;  H2=0xbb67ae8584caa73bL;  H3=0x3c6ef372fe94f82bL;  H4=0xa54ff53a5f1d36f1L;  H5=0x510e527fade682d1L;  H6=0x9b05688c2b3e6c1fL;  H7=0x1f83d9abfb41bd6bL;  H8=0x5be0cd19137e2179L;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.IDPListElement createIDPListElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPListElementImpl();}  }
class C{  @Override public Set<K> keySet(){  Set<K> ks=keySet;  return (ks != null) ? ks : (keySet=new KeySet());}  }
class C{  public int hashCode(){  return attrSyntax.hashCode();}  }
class C{  public NumberUpSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 1) {    throw new IllegalArgumentException("Number up value must be > 0");  }}  }
class C{  private static void storeServerAndSiteList(Set<String> servers,Set<String> sites){  int numberOfServers=servers != null ? servers.size() : 0;  int numberOfSites=sites != null ? sites.size() : 0;  int numberOfItems=numberOfServers + numberOfSites;  if (numberOfItems == 0) {    serverList=Collections.EMPTY_LIST;    serverToIdTable=null;    idToServerTable=null;    return;  }  serverList=new ArrayList(numberOfItems);  serverToIdTable=new Hashtable(numberOfItems);  idToServerTable=new Hashtable(numberOfItems);  if (servers != null) {    for (    String serverEntry : servers) {      try {        ServerOrSiteEntry entry=new ServerOrSiteEntry(serverEntry);        serverList.add(entry.getUrl());        idToServerTable.put(entry.getId(),entry.getOriginalUrl());        serverToIdTable.put(entry.getUrl(),entry.getId());        if (getDebug().messageEnabled()) {          getDebug().message("SystemConfigUtil.storeServerAndSiteList: " + "adding server " + entry.getId() + ": "+ entry.getUrl());        }      } catch (      IllegalArgumentException ex) {        getDebug().error("SystemConfigurationUtil.storeServerAndSiteList: " + "Platform Server List entry is invalid:" + serverEntry);      }    }  }  if (sites != null) {    if (numberOfSites == 0) {      siteList=Collections.EMPTY_LIST;    } else {      siteList=new ArrayList<String>(numberOfSites);      idToSiteTable=new HashMap<String,String>(numberOfSites);      siteToIdTable=new HashMap<String,String>(numberOfSites);    }    for (    String siteEntry : sites) {      try {        ServerOrSiteEntry entry=new ServerOrSiteEntry(siteEntry);        serverList.add(entry.getUrl());        siteList.add(entry.getUrl());        idToServerTable.put(entry.getId(),entry.getUrl());        serverToIdTable.put(entry.getUrl(),entry.getId());        idToSiteTable.put(entry.getId(),entry.getUrl());        siteToIdTable.put(entry.getUrl(),entry.getId());        if (getDebug().messageEnabled()) {          getDebug().message("SystemConfigUtil.storeServerAndSiteList: " + "adding site " + entry.getId() + ": "+ entry.getUrl());        }      } catch (      IllegalArgumentException ex) {        getDebug().error("SystemConfigurationUtil.storeServerAndSiteList: " + "Platform Site List entry is invalid:" + siteEntry);      }    }  }}  }
class C{  public static void write(File file,CharSequence data) throws IOException {  write(file,data,Charset.defaultCharset(),false);}  }
class C{  public boolean equals(Object obj){  return (obj instanceof TextHitInfo) && equals((TextHitInfo)obj);}  }
class C{  public DeadLetterQueueHandler(ConnectionFactory connectionFactory){  this.connectionFactory=connectionFactory;}  }
class C{  void errorForDOM3(String msg,Object[] args) throws TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);  ErrorListener ehandler=this.getErrorListener();  TransformerException te=new XPathStylesheetDOM3Exception(fmsg,m_sourceLocator);  if (null != ehandler) {    ehandler.fatalError(te);  } else {    throw te;  }}  }
class C{  public boolean isStopScrollWhenTouch(){  return stopScrollWhenTouch;}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("roundrect iterator out of bounds");  }  double ctrls[]=ctrlpts[index];  int nc=0;  for (int i=0; i < ctrls.length; i+=4) {    coords[nc++]=(float)(x + ctrls[i + 0] * w + ctrls[i + 1] * aw);    coords[nc++]=(float)(y + ctrls[i + 2] * h + ctrls[i + 3] * ah);  }  if (affine != null) {    affine.transform(coords,0,coords,0,nc / 2);  }  return types[index];}  }
class C{  public void handle(short operation,String key,Object data,Node src,Node dst){  notifications.add(new UserDataNotification(operation,key,data,src,dst));}  }
class C{  public String toNormalizedUrlSafeString(){  if (rdn() == null) {    return "";  }  final StringBuilder builder=new StringBuilder();  int i=size() - 1;  parent(i).rdn().toNormalizedUrlSafeString(builder);  for (i--; i >= 0; i--) {    final RDN rdn=parent(i).rdn();    if (rdn.size() != 0) {      builder.append(RDN_CHAR_SEPARATOR);    }    rdn.toNormalizedUrlSafeString(builder);  }  return builder.toString();}  }
class C{  ConstantDouble(final DataInput file) throws IOException {  super(Const.CONSTANT_Double);  this.bytes=file.readDouble();}  }
class C{  public Cell(int rowspan,int colspan){  this.rowspan=Math.max(rowspan,1);  this.colspan=Math.max(colspan,1);}  }
class C{  private void escapedFunctions(String[][] specList,String metaDataList) throws SQLException {  boolean[] seenFunction=new boolean[specList.length];  StringTokenizer st=new StringTokenizer(metaDataList,",");  int counter=0;  while (st.hasMoreTokens()) {    counter++;    String function=st.nextToken();    boolean isSpecFunction=false;    for (int f=0; f < specList.length; f++) {      String[] specDetails=specList[f];      if (function.equals(specDetails[0])) {        if (seenFunction[f])         fail("Function in list twice: " + function);        seenFunction[f]=true;        isSpecFunction=true;        executeEscaped(specDetails);        break;      }    }    if (!isSpecFunction) {      fail("Non-JDBC spec function in list: " + function);    }  }  assertSame("Function missing in metadata impl",specList.length,counter);  for (int f=0; f < specList.length; f++) {    if (seenFunction[f])     continue;    String[] specDetails=specList[f];    if ("CHAR".equals(specDetails[0]))     continue;    try {      executeEscaped(specDetails);      fail("function works but not declared in list: " + specDetails[0]);    } catch (    SQLException e) {    }  }}  }
class C{  public StringBuffer format(double number,StringBuffer toAppendTo,FieldPosition status){  int i;  for (i=0; i < choiceLimits.length; ++i) {    if (!(number >= choiceLimits[i])) {      break;    }  }  --i;  if (i < 0)   i=0;  return toAppendTo.append(choiceFormats[i]);}  }
class C{  private void whenLoginReturnFalse(LoginModule... modules) throws LoginException {  for (  LoginModule module : modules) {    when(module.login()).thenReturn(false);  }}  }
class C{  public void test_engineInit(){  SSLContextSpiImpl ssl=new SSLContextSpiImpl();  String defaultAlgorithm=Security.getProperty("ssl.KeyManagerFactory.algorithm");  try {    KeyManagerFactory kmf=KeyManagerFactory.getInstance(defaultAlgorithm);    char[] pass="password".toCharArray();    kmf.init(null,pass);    KeyManager[] km=kmf.getKeyManagers();    defaultAlgorithm=Security.getProperty("ssl.TrustManagerFactory.algorithm");    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(defaultAlgorithm);    KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());    ks.load(null,null);    trustMF.init(ks);    TrustManager[] tm=trustMF.getTrustManagers();    SecureRandom sr=SecureRandom.getInstance("SHA1PRNG");    try {      ssl.engineInit(km,tm,sr);    } catch (    KeyManagementException kme) {      fail(kme + " was throw for engineInit method");    }    try {      ssl.engineInit(km,tm,null);      fail("KeyManagementException wasn't thrown");    } catch (    KeyManagementException kme) {    }  } catch (  Exception ex) {    fail(ex + " unexpected exception");  }}  }
class C{  protected void sendParams(HttpURLConnection request,Object params) throws IOException {  request.setDoOutput(true);  if (params != null) {    request.setRequestProperty(HEADER_CONTENT_TYPE,CONTENT_TYPE_JSON + "; charset=" + CHARSET_UTF8);    byte[] data=toJson(params).getBytes(CHARSET_UTF8);    request.setFixedLengthStreamingMode(data.length);    BufferedOutputStream output=new BufferedOutputStream(request.getOutputStream(),bufferSize);    try {      output.write(data);      output.flush();    }  finally {      try {        output.close();      } catch (      IOException ignored) {      }    }  } else {    request.setFixedLengthStreamingMode(0);    request.setRequestProperty("Content-Length","0");  }}  }
class C{  public ProtobufSchema withRootType(String typeName) throws IllegalArgumentException {  if (_rootType.getName().equals(typeName)) {    return this;  }  return _source.forType(typeName);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public void handleTblButtonInvalidateRequest(RequestInvocationEvent event) throws ModelControlException {  SMProfileModel model=(SMProfileModel)getModel();  String serverName=(String)getPageSessionAttribute(SERVER_NAME);  model.setProfileServerName(serverName);  CCActionTable child=(CCActionTable)getChild(TBL_SESSIONS);  child.restoreStateData();  Integer[] selected=tblModel.getSelectedRows();  List names=new ArrayList(selected.length * 2);  for (int i=0; i < selected.length; i++) {    tblModel.setRowIndex(selected[i].intValue());    names.add((String)tblModel.getValue(TBL_DATA_SESSION_ID));  }  boolean error=false;  List failList=null;  try {    failList=model.invalidateSessions(names,getFilterString());  } catch (  AMConsoleException e) {    error=true;    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  if (!error && failList != null && !failList.isEmpty()) {  }  if (!model.isSessionValid()) {    validSession=false;  }  forwardTo();}  }
class C{  private void startProgressingAnimation(){  if (animationState == STATE_PROGRESSING || !isWindowFocused) {    return;  }  if (mProgressingController == null) {    initProgressingAnimationController();  }  if (mProgressingController.isRunning()) {    mProgressingController.end();    mProgressingController.cancel();  }  mProgressingController.start();}  }
class C{  public Map<String,Set<String>> evaluate(Subject adminSubject,String realm,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  try {    ResponseProvider rp=getResponseProvider();    SSOToken token=(subject != null) ? getSSOToken(subject) : null;    Map<String,Set<String>> result=rp.getResponseDecision(token,environment);    return result;  } catch (  SSOException ex) {    throw new EntitlementException(510,ex);  }catch (  PolicyException ex) {    throw new EntitlementException(510,ex);  }}  }
class C{  public DomainComponentTree(SSOToken token,Guid dcRoot) throws InvalidDCRootException, UMSException {  if (token == null)   throw new IllegalArgumentException(i18n.getString(IUMSConstants.NULL_TOKEN));  try {    SSOTokenManager.getInstance().validateToken(token);  } catch (  SSOException se) {    throw new UMSException(i18n.getString(IUMSConstants.INVALID_TOKEN),se);  }  setSSOToken(token);  try {    setDCRoot(dcRoot);  } catch (  EntryNotFoundException e) {    throw new InvalidDCRootException(dcRoot.getDn(),e.getRootCause());  }}  }
class C{  private static int unitIndex(int bitIndex){  return bitIndex >>> 6;}  }
class C{  public void reset(){  token=null;  status=S_INIT;  handlerStatusStack=null;}  }
class C{  public final void testEqualsObject01(){  ECFieldF2m obj=new ECFieldF2m(1999,new int[]{367});  assertTrue(obj.equals(obj));}  }
class C{  public boolean next(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("next",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    return $self.next();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void resetToPreferredSizes(JSplitPane jc){  if (splitPane != null) {    layoutManager.resetToPreferredSizes();    splitPane.revalidate();    splitPane.repaint();  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  private JobDataMap createJobDataMap(String jobName,ScheduleConfig scheduleConfig){  String invokeService=scheduleConfig.getInvokeService();  Object invokeContext=scheduleConfig.getInvokeContext();  String invokeLogLevel=scheduleConfig.getInvokeLogLevel();  JobDataMap map=new JobDataMap();  map.put(ScheduledService.CONFIG_NAME,"scheduler" + (jobName != null ? "-" + jobName : ""));  map.put(ScheduledService.CONFIGURED_INVOKE_SERVICE,invokeService);  map.put(ScheduledService.CONFIGURED_INVOKE_CONTEXT,invokeContext);  map.put(ScheduledService.CONFIGURED_INVOKE_LOG_LEVEL,invokeLogLevel);  map.put(CONFIG,scheduleConfig.getConfig().toString());  return map;}  }
class C{  public void removeThread(WaitingThread wt){  if (wt == null)   return;  this.waitingThreads.remove(wt);}  }
class C{  @Override public void send(HandshakeIODataStream out){  if (exchange_keys.length != 0) {    if (!isRSA || isTLS) {      out.writeUint16(exchange_keys.length);    }    out.write(exchange_keys);  }}  }
class C{  public javax.sip.address.SipURI createSipURI(String user,String host) throws ParseException {  if (host == null)   throw new NullPointerException("null host");  StringBuilder uriString=new StringBuilder("sip:");  if (user != null) {    uriString.append(user);    uriString.append("@");  }  if (host.indexOf(':') != host.lastIndexOf(':') && host.trim().charAt(0) != '[')   host='[' + host + ']';  uriString.append(host);  try {    return this.createSipURI(uriString.toString());  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }}  }
class C{  protected void openSocket() throws IOException {  if (isConnected())   return;  try {    socket=new Socket();    InetSocketAddress sockaddr=new InetSocketAddress(getAddress(),getPort());    socket.connect(sockaddr,(int)getTimeout());    socket.setSendBufferSize(getTxBufSize());    socket.setReceiveBufferSize(getRxBufSize());    socket.setSoTimeout((int)getTimeout());    socket.setTcpNoDelay(getTcpNoDelay());    socket.setKeepAlive(getSoKeepAlive());    socket.setReuseAddress(getSoReuseAddress());    socket.setOOBInline(getOoBInline());    socket.setSoLinger(getSoLingerOn(),getSoLingerTime());    socket.setTrafficClass(getSoTrafficClass());    setConnected(true);    soOut=socket.getOutputStream();    soIn=socket.getInputStream();    setRequestCount(0);    setConnectTime(System.currentTimeMillis());    if (log.isDebugEnabled())     log.debug(sm.getString("bioSender.openSocket",getAddress().getHostAddress(),Integer.valueOf(getPort()),Long.valueOf(0)));  } catch (  IOException ex1) {    SenderState.getSenderState(getDestination()).setSuspect();    if (log.isDebugEnabled())     log.debug(sm.getString("bioSender.openSocket.failure",getAddress().getHostAddress(),Integer.valueOf(getPort()),Long.valueOf(0)),ex1);    throw (ex1);  }}  }
class C{  public static Date toDate(final Object value){  if (value instanceof Date) {    return (Date)value;  }  if (value == null || value.equals("null")) {    return null;  }  if (value instanceof String) {    throw new IllegalStateException("fix me");  }  return null;}  }
class C{  public PWResetException(List errors){  super(errors.toArray().toString());  errList=errors;}  }
class C{  public void testPBEKeySpec1(){  try {    PBEKeySpec pbeks=new PBEKeySpec(null);    assertTrue("An empty char[] should be used in case of null " + "char array.",pbeks.getPassword().length == 0);  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }  char[] password=new char[]{'1','2','3','4','5'};  PBEKeySpec pbeks=new PBEKeySpec(password);  password[0]++;  assertFalse("The change of password specified in the constructor " + "should not cause the change of internal array.",password[0] == pbeks.getPassword()[0]);}  }
class C{  public static void moveFileToDirectory(File srcFile,File destDir,boolean createDestDir) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveFile(srcFile,new File(destDir,srcFile.getName()));}  }
class C{  protected void prepareMyProtocolMessageBytes(ProtocolMessage pm){  LOGGER.debug("Preparing the following protocol message to send: {}",pm.getClass());  ProtocolMessageHandler<? extends ProtocolMessage> handler=pm.getProtocolMessageHandler(tlsContext);  byte[] pmBytes;  boolean finished=pm.getClass().toString().equals("class de.rub.nds.tlsattacker.tls.protocol.handshake.FinishedMessage");  boolean ccs=pm.getClass().toString().equals("class de.rub.nds.tlsattacker.tls.protocol.ccs.ChangeCipherSpecMessage");  if (ccs || finished || !pm.isGoingToBeSent()) {    pmBytes=handler.prepareMessage();  } else {    pmBytes=pm.getCompleteResultingMessage().getValue();  }  if ((pm.isGoingToBeModified() || modify) && !ccs) {    javax.swing.JFrame frame=new javax.swing.JFrame();    MitM_Dialog dialog=new MitM_Dialog(frame,true,pm,tlsContext.getMyConnectionEnd().toString());    dialog.setVisible(true);    dialog.setVisible(false);    dialog.dispose();    frame.setVisible(false);    frame.dispose();    pmBytes=pm.getCompleteResultingMessage().getValue();  }  if (!finished && pm.isGoingToBeSent()) {    int dataPointer=0;    dataPointer=handler.parseMessage(pmBytes,dataPointer);  }  pm.setGoingToBeSent(true);  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(pm.toString());  }  if (pm.isGoingToBeSent()) {    messageBytesCollector.appendProtocolMessageBytes(pmBytes);  }}  }
class C{  public void delete(Set<IPrivilege> privileges) throws EntitlementException {  Subject adminSubject=getAdminSubject();  String realm=getRealm();  for (  IPrivilege p : privileges) {    String dn=null;    if (p instanceof Privilege) {      dn=delete(p.getName(),true);    } else {      dn=deleteReferral(p.getName(),true);    }    if (indexCacheSize > 0) {      ResourceSaveIndexes sIndex=p.getResourceSaveIndexes(adminSubject,DNMapper.orgNameToRealmName(realm));      if (sIndex != null) {        if (p instanceof Privilege) {          indexCache.clear(sIndex,dn);        } else {          referralIndexCache.clear(sIndex,dn);        }      }    }  }}  }
class C{  private ArgumentConstants(){}  }
class C{  AuthContextLocal createAuthContext(SessionID sid,String orgName,HttpServletRequest req) throws AuthException {  this.userOrg=getDomainNameByOrg(orgName);  if (DEBUG.messageEnabled()) {    DEBUG.message("createAuthContext: userOrg is : " + userOrg);  }  if ((this.userOrg == null) || (this.userOrg.equals(""))) {    DEBUG.error("domain is null, error condtion");    logFailed(LazyConfig.AUTHD.bundle.getString("invalidDomain"),"INVALIDDOMAIN");    auditor.auditLoginFailure(this,INVALID_REALM);    throw new AuthException(AMAuthErrorCode.AUTH_INVALID_DOMAIN,null);  }  if (DEBUG.messageEnabled()) {    DEBUG.message("AuthUtil::getAuthContext::Creating new " + "AuthContextLocal & LoginState");  }  AuthContextLocal authContext=new AuthContextLocal(this.userOrg);  newRequest=true;  this.finalSessionId=sid;  if (DEBUG.messageEnabled()) {    DEBUG.message("requestType : " + newRequest);    DEBUG.message("sid : " + sid);    DEBUG.message("orgName passed: " + orgName);  }  try {    createSession(req,authContext);  } catch (  Exception e) {    DEBUG.error("Exception creating session .. :",e);    throw new AuthException(AMAuthErrorCode.AUTH_ERROR,null);  }  amIdRepo=LazyConfig.AUTHD.getAMIdentityRepository(getOrgDN());  populateOrgProfile();  isLocaleSet=false;  return authContext;}  }
class C{  @Inject public MapToJsonBytesConverter(@Named("cts-json-object-mapper") ObjectMapper mapper){  this.mapper=mapper;}  }
class C{  public final HashCode append(Object value){  hashCode=combine(hashCode,value);  return this;}  }
class C{  public byte[] signMAC(byte[] mac) throws Exception {  try {    PrivateKey loggerPrivKey=null;    try {      loggerPrivKey=ksManager.getPrivateKey(loggerKey);    } catch (    Exception e) {      Debug.error("SecureLogHelper.signMAC() : " + " Exception : ",e);    }    Signature loggerSign=Signature.getInstance(signingAlgorithm);    loggerSign.initSign(loggerPrivKey);    loggerSign.update(mac);    byte[] signedBytes=loggerSign.sign();    writeToSecretStore(signedBytes,logFileName,loggerPass,currentSignature);    return signedBytes;  } catch (  Exception e) {    Debug.error("SecureLogHelper.signMAC() : " + " Exception : ",e);    throw new Exception(e.getMessage());  }}  }
class C{  public BrokenOutputStream(IOException exception){  this.exception=exception;}  }
class C{  @Override public String generateTokenId(String existingId){  if (existingId != null) {    return existingId;  }  return UUID.randomUUID().toString();}  }
class C{  public BAD_OPERATION(String s){  this(s,0,CompletionStatus.COMPLETED_NO);}  }
class C{  private boolean stackContains(Stack stack,String url){  int n=stack.size();  boolean contains=false;  for (int i=0; i < n; i++) {    String url2=(String)stack.elementAt(i);    if (url2.equals(url)) {      contains=true;      break;    }  }  return contains;}  }
class C{  public boolean isInteractive(){  return this.interactive;}  }
class C{  public PdfCanvas arc(double x1,double y1,double x2,double y2,double startAng,double extent){  List<double[]> ar=bezierArc(x1,y1,x2,y2,startAng,extent);  if (ar.isEmpty())   return this;  double[] pt=ar.get(0);  moveTo(pt[0],pt[1]);  for (int i=0; i < ar.size(); ++i) {    pt=ar.get(i);    curveTo(pt[2],pt[3],pt[4],pt[5],pt[6],pt[7]);  }  return this;}  }
class C{  private String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString();}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  public void add(Component component,Object constraints){  if (!(component instanceof UIResource)) {    if (constraints instanceof String) {      addTab((String)constraints,component);    } else     if (constraints instanceof Icon) {      addTab(null,(Icon)constraints,component);    } else {      add(component);    }  } else {    super.add(component,constraints);  }}  }
class C{  public OrSubject(Set<EntitlementSubject> eSubjects,String pSubjectName){  super(eSubjects,pSubjectName);}  }
class C{  public JKSecurityException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  private String readValue(char delimiter,boolean resolveEntities,boolean throwOnResolveFailure,ValueContext valueContext) throws IOException, XmlPullParserException {  int start=position;  StringBuilder result=null;  if (valueContext == ValueContext.TEXT && text != null) {    result=new StringBuilder();    result.append(text);  }  while (true) {    if (position >= limit) {      if (start < position) {        if (result == null) {          result=new StringBuilder();        }        result.append(buffer,start,position - start);      }      if (!fillBuffer(1)) {        return result != null ? result.toString() : "";      }      start=position;    }    char c=buffer[position];    if (c == delimiter || (delimiter == ' ' && (c <= ' ' || c == '>')) || c == '&' && !resolveEntities) {      break;    }    if (c != '\r' && (c != '\n' || valueContext != ValueContext.ATTRIBUTE) && c != '&' && c != '<' && (c != ']' || valueContext != ValueContext.TEXT) && (c != '%' || valueContext != ValueContext.ENTITY_DECLARATION)) {      isWhitespace&=(c <= ' ');      position++;      continue;    }    if (result == null) {      result=new StringBuilder();    }    result.append(buffer,start,position - start);    if (c == '\r') {      if ((position + 1 < limit || fillBuffer(2)) && buffer[position + 1] == '\n') {        position++;      }      c=(valueContext == ValueContext.ATTRIBUTE) ? ' ' : '\n';    } else     if (c == '\n') {      c=' ';    } else     if (c == '&') {      isWhitespace=false;      readEntity(result,false,throwOnResolveFailure,valueContext);      start=position;      continue;    } else     if (c == '<') {      if (valueContext == ValueContext.ATTRIBUTE) {        checkRelaxed("Illegal: \"<\" inside attribute value");      }      isWhitespace=false;    } else     if (c == ']') {      if ((position + 2 < limit || fillBuffer(3)) && buffer[position + 1] == ']' && buffer[position + 2] == '>') {        checkRelaxed("Illegal: \"]]>\" outside CDATA section");      }      isWhitespace=false;    } else     if (c == '%') {      throw new XmlPullParserException("This parser doesn't support parameter entities",this,null);    } else {      throw new AssertionError();    }    position++;    result.append(c);    start=position;  }  if (result == null) {    return stringPool.get(buffer,start,position - start);  } else {    result.append(buffer,start,position - start);    return result.toString();  }}  }
class C{  public Builder removeName(String name){  this.names.remove(name);  return this;}  }
class C{  public Compiler(){  m_errorHandler=null;  m_locator=null;}  }
class C{  public void enableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glEnableVertexAttribArray(location);}  }
class C{  public boolean leftCollide(boolean checkElements){  return collide(3,checkElements);}  }
class C{  protected void doUnload() throws IOException {  if (log.isDebugEnabled())   log.debug(sm.getString("standardManager.unloading.debug"));  if (sessions.isEmpty()) {    log.debug(sm.getString("standardManager.unloading.nosessions"));    return;  }  File file=file();  if (file == null) {    return;  }  if (log.isDebugEnabled()) {    log.debug(sm.getString("standardManager.unloading",pathname));  }  ArrayList<StandardSession> list=new ArrayList<>();  try (FileOutputStream fos=new FileOutputStream(file.getAbsolutePath());BufferedOutputStream bos=new BufferedOutputStream(fos);ObjectOutputStream oos=new ObjectOutputStream(bos)){synchronized (sessions) {      if (log.isDebugEnabled()) {        log.debug("Unloading " + sessions.size() + " sessions");      }      oos.writeObject(Integer.valueOf(sessions.size()));      Iterator<Session> elements=sessions.values().iterator();      while (elements.hasNext()) {        StandardSession session=(StandardSession)elements.next();        list.add(session);        session.passivate();        session.writeObjectData(oos);      }    }  }   if (log.isDebugEnabled()) {    log.debug("Expiring " + list.size() + " persisted sessions");  }  Iterator<StandardSession> expires=list.iterator();  while (expires.hasNext()) {    StandardSession session=expires.next();    try {      session.expire(false);    } catch (    Throwable t) {      ExceptionUtils.handleThrowable(t);    } finally {      session.recycle();    }  }  if (log.isDebugEnabled()) {    log.debug("Unloading complete");  }}  }
class C{  public void updateMatchingRule(MatchingRule matchingRule,Schema schema){  matchingRulePanel.update(matchingRule,schema);  schemaElementPanel=matchingRulePanel;  ((CardLayout)mainPanel.getLayout()).show(mainPanel,matchingRulePanel.getTitle().toString());}  }
class C{  static Object find(String factoryId) throws SOAPException {  return find(factoryId,null,false);}  }
class C{  public boolean canCreateClients(){  return (intCapInstance.canCreateInternalClients());}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  if (type != null) {    buf.append(type.toString() + " (." + type.getExtension()+ ") file");  } else {    buf.append("unknown file format");  }  if (byteLength != AudioSystem.NOT_SPECIFIED) {    buf.append(", byte length: " + byteLength);  }  buf.append(", data format: " + format);  if (frameLength != AudioSystem.NOT_SPECIFIED) {    buf.append(", frame length: " + frameLength);  }  return new String(buf);}  }
class C{  public void test_read_writeFloat() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeFloat(Float.MAX_VALUE);  raf.writeFloat(555.55f);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read. ",Float.MAX_VALUE,raf.readFloat());  assertEquals("Test 2: Incorrect value written or read. ",555.55f,raf.readFloat());  try {    raf.readFloat();    fail("Test 3: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeFloat(Float.MIN_VALUE);    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readFloat();    fail("Test 5: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public InvalidNameException(String explanation){  super(explanation);}  }
class C{  static String calculateResponse(String algorithm,String username_value,String realm_value,String passwd,String nonce_value,String nc_value,String cnonce_value,String method,String digest_uri_value,String entity_body,String qop_value,StackLogger stackLogger){  if (stackLogger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    stackLogger.logDebug("trying to authenticate using : " + algorithm + ", "+ username_value+ ", "+ realm_value+ ", "+ (passwd != null && passwd.trim().length() > 0)+ ", "+ nonce_value+ ", "+ nc_value+ ", "+ cnonce_value+ ", "+ method+ ", "+ digest_uri_value+ ", "+ entity_body+ ", "+ qop_value);  }  if (username_value == null || realm_value == null || passwd == null || method == null || digest_uri_value == null || nonce_value == null)   throw new NullPointerException("Null parameter to MessageDigestAlgorithm.calculateResponse()");  String A1=null;  if (algorithm == null || algorithm.trim().length() == 0 || algorithm.trim().equalsIgnoreCase("MD5")) {    A1=username_value + ":" + realm_value+ ":"+ passwd;  } else {    if (cnonce_value == null || cnonce_value.length() == 0)     throw new NullPointerException("cnonce_value may not be absent for MD5-Sess algorithm.");    A1=H(username_value + ":" + realm_value+ ":"+ passwd) + ":" + nonce_value+ ":"+ cnonce_value;  }  String A2=null;  if (qop_value == null || qop_value.trim().length() == 0 || qop_value.trim().equalsIgnoreCase("auth")) {    A2=method + ":" + digest_uri_value;  } else {    if (entity_body == null)     entity_body="";    A2=method + ":" + digest_uri_value+ ":"+ H(entity_body);  }  String request_digest=null;  if (cnonce_value != null && qop_value != null && nc_value != null && (qop_value.equalsIgnoreCase("auth") || qop_value.equalsIgnoreCase("auth-int"))) {    request_digest=KD(H(A1),nonce_value + ":" + nc_value+ ":"+ cnonce_value+ ":"+ qop_value+ ":"+ H(A2));  } else {    request_digest=KD(H(A1),nonce_value + ":" + H(A2));  }  return request_digest;}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  public ListIterator<HDR> listIterator(int position){  return hlist.listIterator(position);}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    this.okResponse=messageFactory.createResponse(Response.OK,request);    Address address=addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    ContactHeader contactHeader=headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)okResponse.getHeader(ToHeader.NAME);    toHeader.setTag("4321");    okResponse.addHeader(contactHeader);    this.inviteTid=st;    this.inviteRequest=request;    new Timer().schedule(new MyTimerTask(this),1000);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public RoundDotsBorder(float width){  super(width);}  }
class C{  public void addDeleteActionListener(ActionListener listener){  deleteButton.addActionListener(listener);}  }
class C{  public void loadRules(Reader in,URL ref) throws IOException {  CssParser parser=new CssParser();  parser.parse(ref,in,false,false);}  }
class C{  private void buildPrimitive(MethodVisitor methodVisitor,CodeInfo info,PrimitiveValue p){  if (p instanceof IntValue) {    methodVisitor.visitLdcInsn(((IntValue)p).getValue());    info.push(CodeInfo.Size._1);  } else   if (p instanceof ShortValue) {    methodVisitor.visitLdcInsn(((ShortValue)p).getValue());    info.push(CodeInfo.Size._1);  } else   if (p instanceof ByteValue) {    methodVisitor.visitLdcInsn(((ByteValue)p).getValue());    info.push(CodeInfo.Size._1);  } else   if (p instanceof BoolValue) {    methodVisitor.visitLdcInsn(((BoolValue)p).getValue());    info.push(CodeInfo.Size._1);  } else   if (p instanceof CharValue) {    methodVisitor.visitLdcInsn(((CharValue)p).getValue());    info.push(CodeInfo.Size._1);  } else   if (p instanceof LongValue) {    methodVisitor.visitLdcInsn(((LongValue)p).getValue());    info.push(CodeInfo.Size._2);  } else   if (p instanceof FloatValue) {    methodVisitor.visitLdcInsn(((FloatValue)p).getValue());    info.push(CodeInfo.Size._1);  } else   if (p instanceof DoubleValue) {    methodVisitor.visitLdcInsn(((DoubleValue)p).getValue());    info.push(CodeInfo.Size._2);  } else   throw new LtBug("unknown primitive value " + p);}  }
class C{  public void copyInto(Object anArray[]){  delegate.copyInto(anArray);}  }
class C{  public PdfWin(PdfDictionary pdfObject){  super(pdfObject);}  }
class C{  @Override public void rejectedExecution(Runnable r,ThreadPoolExecutor executor){  RadiusRequestHandler handler=(RadiusRequestHandler)r;  LOG.warning("RADIUS thread pool queue full. Dropping packet from " + handler.getClientName());}  }
class C{  @Override public int write(ByteBuffer src) throws IOException {  checkInterruptStatus();  return sc.write(src);}  }
class C{  public SessionSubject(NameIdentifier nameIdentifier,IDPProvidedNameIdentifier idpNameIdentifier) throws FSMsgException, SAMLException {  super(nameIdentifier,idpNameIdentifier);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AttributeDesignatorType createAttributeDesignatorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AttributeDesignatorTypeImpl();}  }
class C{  private static boolean needIncrement(long ldivisor,int roundingMode,int qsign,long q,long r){  assert r != 0L;  int cmpFracHalf;  if (r <= HALF_LONG_MIN_VALUE || r > HALF_LONG_MAX_VALUE) {    cmpFracHalf=1;  } else {    cmpFracHalf=longCompareMagnitude(2 * r,ldivisor);  }  return commonNeedIncrement(roundingMode,qsign,cmpFracHalf,(q & 1L) != 0L);}  }
class C{  public synchronized void removeDropTargetListener(DropTargetListener dtl){  if (dtl != null && dtListener != null) {    if (dtListener.equals(dtl))     dtListener=null; else     throw new IllegalArgumentException("listener mismatch");  }}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  boolean debug=log.isDebugEnabled();  if (debug) {    if (saxLog.isDebugEnabled()) {      saxLog.debug("endElement(" + namespaceURI + ","+ localName+ ","+ qName+ ")");    }    log.debug("  match='" + match + "'");    log.debug("  bodyText='" + bodyText + "'");  }  bodyText=updateBodyText(bodyText);  String name=localName;  if ((name == null) || (name.length() < 1)) {    name=qName;  }  List<Rule> rules=matches.pop();  if ((rules != null) && (rules.size() > 0)) {    String bodyText=this.bodyText.toString();    for (int i=0; i < rules.size(); i++) {      try {        Rule rule=rules.get(i);        if (debug) {          log.debug("  Fire body() for " + rule);        }        rule.body(namespaceURI,name,bodyText);      } catch (      Exception e) {        log.error("Body event threw exception",e);        throw createSAXException(e);      }catch (      Error e) {        log.error("Body event threw error",e);        throw e;      }    }  } else {    if (debug) {      log.debug("  No rules found matching '" + match + "'.");    }    if (rulesValidation) {      log.warn("  No rules found matching '" + match + "'.");    }  }  bodyText=bodyTexts.pop();  if (rules != null) {    for (int i=0; i < rules.size(); i++) {      int j=(rules.size() - i) - 1;      try {        Rule rule=rules.get(j);        if (debug) {          log.debug("  Fire end() for " + rule);        }        rule.end(namespaceURI,name);      } catch (      Exception e) {        log.error("End event threw exception",e);        throw createSAXException(e);      }catch (      Error e) {        log.error("End event threw error",e);        throw e;      }    }  }  int slash=match.lastIndexOf('/');  if (slash >= 0) {    match=match.substring(0,slash);  } else {    match="";  }}  }
class C{  public void paintComponent(Graphics g,Component c,Container p,int x,int y,int w,int h,boolean shouldValidate){  if (c == null) {    if (p != null) {      Color oldColor=g.getColor();      g.setColor(p.getBackground());      g.fillRect(x,y,w,h);      g.setColor(oldColor);    }    return;  }  if (c.getParent() != this) {    this.add(c);  }  c.setBounds(x,y,w,h);  if (shouldValidate) {    c.validate();  }  boolean wasDoubleBuffered=false;  if ((c instanceof JComponent) && ((JComponent)c).isDoubleBuffered()) {    wasDoubleBuffered=true;    ((JComponent)c).setDoubleBuffered(false);  }  Graphics cg=g.create(x,y,w,h);  try {    c.paint(cg);  }  finally {    cg.dispose();  }  if (wasDoubleBuffered && (c instanceof JComponent)) {    ((JComponent)c).setDoubleBuffered(true);  }  c.setBounds(-w,-h,0,0);}  }
class C{  private Schema readSchema(ConnectionWrapper connWrapper) throws OpenDsException {  try {    schema=isLocal ? super.readSchema() : new RemoteSchemaLoader().readSchema(connWrapper);    return schema;  } catch (  LdapException e) {    throw new OnlineUpdateException(ERR_READING_SCHEMA_LDAP.get(e),e);  }catch (  ConfigException e) {    throw new org.opends.server.config.ConfigException(e.getMessageObject(),e);  }}  }
class C{  @Override public synchronized void publish(LogRecord record){  if (!isLoggable(record)) {    return;  }  super.publish(record);  flush();}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  if (SynthLookAndFeel.shouldUpdateStyle(evt)) {    updateStyle((JTextComponent)evt.getSource());  }  super.propertyChange(evt);}  }
class C{  public void print(int i){  writer.print(i);}  }
class C{  public void testToBigIntegerNeg3(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+45";  BigInteger bNumber=new BigInteger("-123809648392384754573567356745735635678902957849027687876782870000000000000000");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  private boolean objectClassExists(String objectClass,PersistentObject pObject){  Attr attr=pObject.getAttribute("objectclass");  String[] vals=attr.getStringValues();  for (int i=0; i < vals.length; i++) {    if (objectClass.equalsIgnoreCase(vals[i])) {      return true;    }  }  return false;}  }
class C{  public synchronized void startPreview(){  OpenCamera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.getCamera().startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,theCamera.getCamera());  }}  }
class C{  private static String[] toSuffixes(String[] extensions){  String[] suffixes=new String[extensions.length];  for (int i=0; i < extensions.length; i++) {    suffixes[i]="." + extensions[i];  }  return suffixes;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.Basic192Rsa15Element createBasic192Rsa15Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.Basic192Rsa15ElementImpl();}  }
class C{  public Entitlement(){}  }
class C{  private void mergeConfigFiles(String instanceConfigFileMigrate,String instanceConfigFile,Properties mappedProperties) throws Exception {  BufferedReader br=null;  PrintWriter pw=null;  FileInputStream fStream=null;  String oldPropertyName=null;  Debug.log("MigrateWebAgentConfigurePropertiesTask.mergeConfigFiles() - " + "config file to migrate from: " + instanceConfigFileMigrate + " config file to migrate to: "+ instanceConfigFile);  try {    FileReader fr=new FileReader(instanceConfigFile);    br=new BufferedReader(fr);    String tmpFileName=instanceConfigFile + ".tmp";    pw=new PrintWriter(new FileWriter(tmpFileName));    String lineData=null;    KeyValue keyValue=null;    ArrayList migrateLines=null;    while ((lineData=br.readLine()) != null) {      lineData=lineData.trim();      if (lineData.startsWith(FileUtils.HASH) || lineData.length() == 0) {        pw.println(lineData);      } else {        keyValue=new KeyValue(lineData);        if (nonMigratedParameters.contains(keyValue.getKey())) {          pw.println(lineData);          continue;        }        oldPropertyName=mappedProperties.getProperty(keyValue.getParameter());        migrateLines=getMigrateLines(keyValue.getParameter(),oldPropertyName,instanceConfigFileMigrate);        Debug.log("MigrateWebAgentConfigurePropertiesTask.mergeConfigFiles()- " + "parameter: " + keyValue.getParameter() + " matched migration parameter: "+ migrateLines);        if (migrateLines.size() > 0) {          for (int i=0; i < migrateLines.size(); i++) {            pw.println(migrateLines.get(i));          }        } else {          if (lineData.indexOf(AGENT_ENCRYPT_KEY_PROPERTY) >= 0) {            StringBuffer newLineData=new StringBuffer();            int count=0;            StringTokenizer st=new StringTokenizer(lineData,"=");            while (st.hasMoreElements()) {              String tok=st.nextToken();              if (count == 0) {                newLineData.append(tok);                newLineData.append("= ");              } else {                newLineData.append(AGENT_22_ENCRYPT_KEY_VALUE);              }              count++;            }            pw.println(newLineData);          } else {            pw.println(lineData);          }        }      }    }    br.close();    pw.flush();    pw.close();    FileUtils.copyFile(tmpFileName,instanceConfigFile);    File tmpFile=new File(tmpFileName);    tmpFile.delete();  } catch (  Exception ex) {    if (br != null) {      try {        br.close();      } catch (      Exception ex1) {      }    }    if (pw != null) {      try {        pw.close();      } catch (      Exception ex1) {      }    }  }}  }
class C{  public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  public void insert_float(float value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_float",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_float(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void unread(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (len > pos) {    throw new IOException("Push back buffer is full");  }  pos-=len;  System.arraycopy(b,off,buf,pos,len);}  }
class C{  public CMSSignedData generate(CMSProcessable content,String sigProvider) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return generate(content,CMSUtils.getProvider(sigProvider));}  }
class C{  private void handleFlawedDiscovery(String logAdapterClassName,ClassLoader classLoader,Throwable discoveryFlaw){  if (isDiagnosticsEnabled()) {    logDiagnostic("Could not instantiate Log '" + logAdapterClassName + "' -- "+ discoveryFlaw.getClass().getName()+ ": "+ discoveryFlaw.getLocalizedMessage());  }  if (!allowFlawedDiscovery) {    throw new LogConfigurationException(discoveryFlaw);  }}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("parse");  try {    headerName(TokenTypes.JOIN_TO);    Join join=new Join();    this.lexer.SPorHT();    String callId=lexer.byteStringNoSemicolon();    this.lexer.SPorHT();    super.parse(join);    join.setCallId(callId);    return join;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  private boolean checkIsSubClass(String target){  TypeElement type=element;  while (true) {    if (type == null) {      return false;    } else     if (target.equals(type.getQualifiedName().toString())) {      return true;    }    type=getParentClass(type);  }}  }
class C{  static MatchingRuleImpl collationSubstringMatchingRule(Locale locale){  return new CollationSubstringMatchingRuleImpl(locale);}  }
class C{  public ConsonantVowelNameGenerator(final ConsonantVowelNameGeneratorBuilder builder){  final int totalConsonants=builder.getConsonants().size();  final int totalVowels=builder.getVowels().size();  consonants=builder.getConsonants().toArray(new String[totalConsonants]);  vowels=builder.getVowels().toArray(new String[totalVowels]);}  }
class C{  private static long[] innerMult(long[] a,long[] b){  long[] output=new long[19];  output[0]=b[0] * a[0];  output[1]=b[0] * a[1] + b[1] * a[0];  output[2]=b[1] * a[1] * 2 + b[0] * a[2] + b[2] * a[0];  output[3]=b[1] * a[2] + b[2] * a[1] + b[0] * a[3] + b[3] * a[0];  output[4]=b[2] * a[2] + (b[1] * a[3] + b[3] * a[1]) * 2 + b[0] * a[4] + b[4] * a[0];  output[5]=b[2] * a[3] + b[3] * a[2] + b[1] * a[4] + b[4] * a[1] + b[0] * a[5] + b[5] * a[0];  output[6]=(b[3] * a[3] + b[1] * a[5] + b[5] * a[1]) * 2 + b[2] * a[4] + b[4] * a[2] + b[0] * a[6] + b[6] * a[0];  output[7]=b[3] * a[4] + b[4] * a[3] + b[2] * a[5] + b[5] * a[2] + b[1] * a[6] + b[6] * a[1] + b[0] * a[7] + b[7] * a[0];  output[8]=b[4] * a[4] + (b[3] * a[5] + b[5] * a[3] + b[1] * a[7] + b[7] * a[1]) * 2 + b[2] * a[6] + b[6] * a[2] + b[0] * a[8] + b[8] * a[0];  output[9]=b[4] * a[5] + b[5] * a[4] + b[3] * a[6] + b[6] * a[3] + b[2] * a[7] + b[7] * a[2] + b[1] * a[8] + b[8] * a[1] + b[0] * a[9] + b[9] * a[0];  output[10]=(b[5] * a[5] + b[3] * a[7] + b[7] * a[3] + b[1] * a[9] + b[9] * a[1]) * 2 + b[4] * a[6] + b[6] * a[4] + b[2] * a[8] + b[8] * a[2];  output[11]=b[5] * a[6] + b[6] * a[5] + b[4] * a[7] + b[7] * a[4] + b[3] * a[8] + b[8] * a[3] + b[2] * a[9] + b[9] * a[2];  output[12]=b[6] * a[6] + (b[5] * a[7] + b[7] * a[5] + b[3] * a[9] + b[9] * a[3]) * 2 + b[4] * a[8] + b[8] * a[4];  output[13]=b[6] * a[7] + b[7] * a[6] + b[5] * a[8] + b[8] * a[5] + b[4] * a[9] + b[9] * a[4];  output[14]=(b[7] * a[7] + b[5] * a[9] + b[9] * a[5]) * 2 + b[6] * a[8] + b[8] * a[6];  output[15]=b[7] * a[8] + b[8] * a[7] + b[6] * a[9] + b[9] * a[6];  output[16]=b[8] * a[8] + (b[7] * a[9] + b[9] * a[7]) * 2;  output[17]=b[8] * a[9] + b[9] * a[8];  output[18]=b[9] * a[9] * 2;  return output;}  }
class C{  @Deprecated public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  doLog(lr,bundleName);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasubstringexceedsvalue.class,args);}  }
class C{  public BaseRowSet(){  listeners=new Vector<RowSetListener>();}  }
class C{  public void addAttribute(String attrName,Set values) throws SMSException, SSOException {  validateServiceConfigImpl();  Map attributes=getAttributes();  Set newVals=values;  Set oldVals=(Set)attributes.get(attrName);  if (oldVals != null) {    newVals=new HashSet();    newVals.addAll(values);    newVals.addAll(oldVals);  }  ss.validateAttrValues(token,attrName,newVals,true,sc.getOrganizationName());  SMSEntry e=sc.getSMSEntry();  SMSUtils.addAttribute(e,attrName,values,ss.getSearchableAttributeNames());  saveSMSEntry(e);}  }
class C{  public Pnt bisector(Pnt point){  dimCheck(point);  Pnt diff=this.subtract(point);  Pnt sum=this.add(point);  double dot=diff.dot(sum);  return diff.extend(-dot / 2);}  }
class C{  private String stringRep(String s,int n){  StringBuilder sb=new StringBuilder(s.length() * n);  for (int i=0; i < n; i++) {    sb.append(s);  }  return sb.toString();}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.SubjectType createSubjectType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.SubjectTypeImpl();}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public UnknownSchemaElementException(final LocalizableMessage message){  super(message);}  }
class C{  private boolean isInternalFrameSystemMenu(){  String actionCommand=menuItem.getActionCommand();  if ((actionCommand == "Close") || (actionCommand == "Minimize") || (actionCommand == "Restore")|| (actionCommand == "Maximize")) {    return true;  } else {    return false;  }}  }
class C{  public void testConnect_Null() throws IOException {  assertFalse(this.channel1.isConnected());  try {    this.channel1.connect(null);    fail("Should throw an IllegalArgumentException here.");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public void addCharsetMappingFromDeploymentDescriptor(String locale,String charset){  map.put(locale,charset);}  }
class C{  public TabStop(float tabPosition){  this(tabPosition,TabAlignment.LEFT);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (!(obj instanceof AbstractTagFrame)) {    return false;  }  AbstractTagFrame that=(AbstractTagFrame)obj;  return EqualsUtil.areEqual(this.getIdentifier(),that.getIdentifier()) && EqualsUtil.areEqual(this.frameBody,that.frameBody) && super.equals(that);}  }
class C{  public void drawLine(int x1,int y1,int x2,int y2){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing line: from " + pointToString(x1,y1)+ " to "+ pointToString(x2,y2));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawLine(x1,y1,x2,y2);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawLine(x1,y1,x2,y2);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawLine(x1,y1,x2,y2);}  }
class C{  public SecurityServerHeader createSecurityServerHeader(){  SecurityServer secServer=new SecurityServer();  return secServer;}  }
class C{  public NO_RESPONSE(){  this("");}  }
class C{  public void addChangeListener(ChangeListener l){  styles.addChangeListener(l);}  }
class C{  public boolean isActive(){  return (getData() & 0x8) == 0;}  }
class C{  private static boolean merge(final ClassWriter cw,int t,final int[] types,final int index){  int u=types[index];  if (u == t) {    return false;  }  if ((t & ~DIM) == NULL) {    if (u == NULL) {      return false;    }    t=NULL;  }  if (u == 0) {    types[index]=t;    return true;  }  int v;  if ((u & BASE_KIND) == OBJECT || (u & DIM) != 0) {    if (t == NULL) {      return false;    } else     if ((t & (DIM | BASE_KIND)) == (u & (DIM | BASE_KIND))) {      if ((u & BASE_KIND) == OBJECT) {        v=(t & DIM) | OBJECT | cw.getMergedType(t & BASE_VALUE,u & BASE_VALUE);      } else {        int vdim=ELEMENT_OF + (u & DIM);        v=vdim | OBJECT | cw.addType("java/lang/Object");      }    } else     if ((t & BASE_KIND) == OBJECT || (t & DIM) != 0) {      int tdim=(((t & DIM) == 0 || (t & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (t & DIM);      int udim=(((u & DIM) == 0 || (u & BASE_KIND) == OBJECT) ? 0 : ELEMENT_OF) + (u & DIM);      v=Math.min(tdim,udim) | OBJECT | cw.addType("java/lang/Object");    } else {      v=TOP;    }  } else   if (u == NULL) {    v=(t & BASE_KIND) == OBJECT || (t & DIM) != 0 ? t : TOP;  } else {    v=TOP;  }  if (u != v) {    types[index]=v;    return true;  }  return false;}  }
class C{  public static Extension parseURLEncodedRequest(HttpServletRequest request,String prefix,int minorVersion) throws FSMsgException {  Map attrMap=null;  for (Enumeration e=request.getParameterNames(); e.hasMoreElements(); ) {    String paraName=(String)e.nextElement();    if (paraName.startsWith(prefix)) {      String key=paraName.substring(prefix.length());      String value=request.getParameter(paraName);      if (attrMap == null) {        attrMap=new HashMap();      }      attrMap.put(key,value);    }  }  if (attrMap == null) {    return null;  }  Extension extension=new Extension(attrMap);  extension.setMinorVersion(minorVersion);  return extension;}  }
class C{  protected void decrypt(ByteBuffer buf,int offset,int len) throws IOException {  final int pos=buf.position();  final int limit=buf.limit();  int n=0;  while (n < len) {    buf.position(offset + n);    buf.limit(offset + n + Math.min(len - n,inBuffer.remaining()));    inBuffer.put(buf);    try {      decrypt();      buf.position(offset + n);      buf.limit(limit);      n+=outBuffer.remaining();      buf.put(outBuffer);    }  finally {      padding=postDecryption(streamOffset - (len - n));    }  }  buf.position(pos);}  }
class C{  public void test_setLongLjava_lang_ObjectIJ(){  long[] x={0};  boolean thrown=false;  try {    Array.setLong(x,0,1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getLong(x,0));  try {    Array.setLong(new Object(),0,9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setLong(x,4,9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setLong(null,0,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  checkNotNull(e);  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(e);    return true;  }  finally {    lock.unlock();  }}  }
class C{  private UnicodeBlock(String idName,String... aliases){  this(idName);  for (  String alias : aliases)   map.put(alias,this);}  }
class C{  public AtomicIntegerArray(int[] array){  this.array=array.clone();}  }
class C{  protected void inc(){  msgCount.incrementAndGet();}  }
class C{  public boolean visitTopLevelInstruction(ElemTemplateElement elem){  return true;}  }
class C{  static public boolean isWindows(){  return matchApprox(WINDOWS);}  }
class C{  public EncryptionException(Throwable rootCause,String message){  super(message);  _message=message;  this.rootCause=rootCause;}  }
class C{  private Object writeReplace(){  return new Ser(Ser.PERIOD_TYPE,this);}  }
class C{  public Builder withGoogleEndpoint(String googleEndpoint){  config.setGoogleEndpoint(googleEndpoint);  return this;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasetdatanomodificationallowederr.class,args);}  }
class C{  public void startLogVerifier(){  String period=manager.getProperty(LogConstants.LOGVERIFY_PERIODINSECONDS);  long interval;  if ((period != null) || (period.length() != 0)) {    interval=Long.parseLong(period);  } else {    interval=LogConstants.LOGVERIFY_PERIODINSECONDS_DEFAULT;  }  interval*=1000;  if (verifier == null) {    verifier=new VerifyTask(interval);    SystemTimer.getTimer().schedule(verifier,new Date(((currentTimeMillis() + interval) / 1000) * 1000));    if (Debug.messageEnabled()) {      Debug.message(name + ":Verifier Thread Started");    }  }}  }
class C{  public RequireParser(String require){  super(require);}  }
class C{  public Set<AclEntryPermission> permissions(){  return new HashSet<AclEntryPermission>(perms);}  }
class C{  public boolean isMutable(){  return isMutable;}  }
class C{  public Style addStyle(String nm,Style parent){  StyledDocument doc=getStyledDocument();  return doc.addStyle(nm,parent);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.ConditionElement createConditionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionElementImpl();}  }
class C{  private void unparkSuccessor(Node node){  int ws=node.waitStatus;  if (ws < 0)   compareAndSetWaitStatus(node,ws,0);  Node s=node.next;  if (s == null || s.waitStatus > 0) {    s=null;    for (Node t=tail; t != null && t != node; t=t.prev)     if (t.waitStatus <= 0)     s=t;  }  if (s != null)   LockSupport.unpark(s.thread);}  }
class C{  public static AuthorizationIdentityResponseControl newControl(final String authorizationID){  return new AuthorizationIdentityResponseControl(false,authorizationID);}  }
class C{  public static ComponentListener add(ComponentListener a,ComponentListener b){  return (ComponentListener)addInternal(a,b);}  }
class C{  public void writeConcatenatedSchema(){  String concatFilePath=null;  try {    Set<String> attributeTypes=new LinkedHashSet<>();    Set<String> objectClasses=new LinkedHashSet<>();    Set<String> nameForms=new LinkedHashSet<>();    Set<String> ditContentRules=new LinkedHashSet<>();    Set<String> ditStructureRules=new LinkedHashSet<>();    Set<String> matchingRuleUses=new LinkedHashSet<>();    Set<String> ldapSyntaxes=new LinkedHashSet<>();    generateConcatenatedSchema(attributeTypes,objectClasses,nameForms,ditContentRules,ditStructureRules,matchingRuleUses,ldapSyntaxes);    File upgradeDirectory=getUpgradeDirectory();    upgradeDirectory.mkdir();    File concatFile=new File(upgradeDirectory,SCHEMA_CONCAT_FILE_NAME);    concatFilePath=concatFile.getAbsolutePath();    File tempFile=new File(concatFilePath + ".tmp");    try (BufferedWriter writer=new BufferedWriter(new FileWriter(tempFile,false))){      writeLines(writer,"dn: " + DirectoryServer.getSchemaDN(),"objectClass: top","objectClass: ldapSubentry","objectClass: subschema");      writeLines(writer,ATTR_ATTRIBUTE_TYPES,attributeTypes);      writeLines(writer,ATTR_OBJECTCLASSES,objectClasses);      writeLines(writer,ATTR_NAME_FORMS,nameForms);      writeLines(writer,ATTR_DIT_CONTENT_RULES,ditContentRules);      writeLines(writer,ATTR_DIT_STRUCTURE_RULES,ditStructureRules);      writeLines(writer,ATTR_MATCHING_RULE_USE,matchingRuleUses);      writeLines(writer,ATTR_LDAP_SYNTAXES,ldapSyntaxes);    }     if (concatFile.exists()) {      concatFile.delete();    }    tempFile.renameTo(concatFile);  } catch (  Exception e) {    logger.traceException(e);    logger.error(ERR_SCHEMA_CANNOT_WRITE_CONCAT_SCHEMA_FILE,concatFilePath,getExceptionMessage(e));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementNS06.class,args);}  }
class C{  public int update(byte[] input,int inputOffset,int inputLen,byte[] output,int outputOffset) throws ShortBufferException {  checkState();  return OpenSslNative.updateByteArray(context,input,inputOffset,inputLen,output,outputOffset,output.length - outputOffset);}  }
class C{  public DerivedFont(String key,float sizeOffset,Boolean bold,Boolean italic){  if (key == null) {    throw new IllegalArgumentException("You must specify a key");  }  this.parentKey=key;  this.sizeOffset=sizeOffset;  this.bold=bold;  this.italic=italic;}  }
class C{  private void removeOneNode(BasicNode node){  stopRefreshNode(node);  treeModel.removeNodeFromParent(node);}  }
class C{  boolean replace(ReplaceHolder rh) throws BadLocationException {  boolean valid=true;  int direction=1;  if (rh.length > 0 && (rh.text == null || rh.text.length() == 0) && (getFormattedTextField().getSelectionStart() != rh.offset || rh.length > 1)) {    direction=-1;  }  if (getOverwriteMode() && rh.text != null && getFormattedTextField().getSelectedText() == null) {    rh.length=Math.min(Math.max(rh.length,rh.text.length()),rh.fb.getDocument().getLength() - rh.offset);  }  if ((rh.text != null && !isLegalInsertText(rh.text)) || !canReplace(rh) || (rh.length == 0 && (rh.text == null || rh.text.length() == 0))) {    valid=false;  }  if (valid) {    int cursor=rh.cursorPosition;    rh.fb.replace(rh.offset,rh.length,rh.text,rh.attrs);    if (cursor == -1) {      cursor=rh.offset;      if (direction == 1 && rh.text != null) {        cursor=rh.offset + rh.text.length();      }    }    updateValue(rh.value);    repositionCursor(cursor,direction);    return true;  } else {    invalidEdit();  }  return false;}  }
class C{  private void checkPrivilege(final String name,final Node configNode,final ServiceConfig privilegesConfig) throws SMSException, SSOException {  final ServiceConfig privilegeConfig=privilegesConfig.getSubConfig(name);  if (privilegeConfig != null) {    @SuppressWarnings("unchecked") final Map<String,Set<String>> existingAttributes=privilegeConfig.getAttributes();    final Map<String,Set<String>> passedAttributes=parseAttributeValuePairTags(configNode);    final Set<String> existingPermissionList=existingAttributes.get(LIST_OF_PERMISSIONS);    final Set<String> passedPermissionList=passedAttributes.get(LIST_OF_PERMISSIONS);    final Set<String> newPermissions=new HashSet<String>();    for (    String passedPermission : passedPermissionList) {      if (!existingPermissionList.contains(passedPermission)) {        newPermissions.add(passedPermission);      }    }    if (!newPermissions.isEmpty()) {      privilegeUpdates.add(ChangeSet.newInstance(name,newPermissions));    }  } else {    newPrivileges.add(ChangeSet.newInstance(name,configNode));  }}  }
class C{  public boolean is_valid(){  return plaline_len() >= 3;}  }
class C{  public void load(){  if (!isLoaded()) {    setEstimatedMajorSpan(true);    Element e=getElement();    ViewFactory f=getViewFactory();    int index0=e.getElementIndex(getStartOffset());    int index1=e.getElementIndex(getEndOffset());    View[] added=new View[index1 - index0 + 1];    for (int i=index0; i <= index1; i++) {      added[i - index0]=f.create(e.getElement(i));    }    replace(0,0,added);    zoneWasLoaded(this);  }}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns,long period){  super(r,result);  this.time=ns;  this.period=period;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  public void addInitParameter(String name,String value){  if (parameters.containsKey(name)) {    return;  }  parameters.put(name,value);}  }
class C{  public void readLabel(String readLabelFile) throws Exception {  BufferedReader trUsers=new BufferedReader(new InputStreamReader(new FileInputStream(readLabelFile)));  String line="";  while ((line=trUsers.readLine()) != null) {    String[] strs=line.split("\t");    labels[Integer.valueOf(strs[0])]=Integer.valueOf(strs[1]);  }  trUsers.close();}  }
class C{  protected void requestHandler(HttpServletRequest req,HttpServletResponse res) throws IOException {  ServletContext servletContext=getServletContext();  String path=SSIServletRequestUtil.getRelativePath(req);  if (debug > 0)   log("SSIServlet.requestHandler()\n" + "Serving " + (buffered ? "buffered " : "unbuffered ") + "resource '"+ path+ "'");  if (path == null || path.toUpperCase(Locale.ENGLISH).startsWith("/WEB-INF") || path.toUpperCase(Locale.ENGLISH).startsWith("/META-INF")) {    res.sendError(HttpServletResponse.SC_NOT_FOUND,path);    log("Can't serve file: " + path);    return;  }  URL resource=servletContext.getResource(path);  if (resource == null) {    res.sendError(HttpServletResponse.SC_NOT_FOUND,path);    log("Can't find file: " + path);    return;  }  String resourceMimeType=servletContext.getMimeType(path);  if (resourceMimeType == null) {    resourceMimeType="text/html";  }  res.setContentType(resourceMimeType + ";charset=" + outputEncoding);  if (expires != null) {    res.setDateHeader("Expires",(new java.util.Date()).getTime() + expires.longValue() * 1000);  }  req.setAttribute(Globals.SSI_FLAG_ATTR,"true");  processSSI(req,res,resource);}  }
class C{  public boolean isADDOperation(){  return attrTypeIsNull && !isModDN;}  }
class C{  public void delete() throws IOException {  cache.delete();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumenttypenodetype.class,args);}  }
class C{  private DSInfo createDSInfo(int dsId,int rsId){  ServerStatus status=ServerStatus.NORMAL_STATUS;  byte groupId=-1;  AssuredType assuredType=null;  int assuredSdLevel=-100;  SortedSet<String> refUrls=null;  Set<String> eclIncludes=new HashSet<>();  short protocolVersion=ProtocolVersion.getCurrentVersion();switch (dsId) {case DS1_ID:    groupId=DS1_GID;  assuredType=DS1_AT;assuredSdLevel=DS1_SDL;refUrls=DS1_RU;break;case DS2_ID:groupId=DS2_GID;assuredType=DS2_AT;assuredSdLevel=DS2_SDL;refUrls=DS2_RU;break;case DS3_ID:groupId=DS3_GID;assuredType=DS3_AT;assuredSdLevel=DS3_SDL;refUrls=DS3_RU;break;case DS4_ID:groupId=DS4_GID;assuredType=DS4_AT;assuredSdLevel=DS4_SDL;refUrls=DS4_RU;break;case DS5_ID:groupId=DS5_GID;assuredType=DS5_AT;assuredSdLevel=DS5_SDL;refUrls=DS5_RU;break;case DS6_ID:groupId=DS6_GID;assuredType=DS6_AT;assuredSdLevel=DS6_SDL;refUrls=DS6_RU;break;default :fail("Unknown replication domain server id.");}boolean assuredFlag=assuredType != AssuredType.NOT_ASSURED;AssuredMode assMode=assuredType == AssuredType.SAFE_READ ? AssuredMode.SAFE_READ_MODE : AssuredMode.SAFE_DATA_MODE;return new DSInfo(dsId,"dummy:1234",rsId,TEST_DN_WITH_ROOT_ENTRY_GENID,status,assuredFlag,assMode,(byte)assuredSdLevel,groupId,refUrls,eclIncludes,eclIncludes,protocolVersion);}  }
class C{  public static int sizeOfDate(){  return 12;}  }
class C{  public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulong",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_ulong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public JTextArea(){  this(null,null,0,0);}  }
class C{  @NonNull public final Agera doOnUpdate(@NonNull Runnable run){  return new AgeraDoOnUpdate(this,run);}  }
class C{  public void printStackTrace(java.io.PrintStream s){  super.printStackTrace(s);}  }
class C{  private void push(String input,int pos,int limit,boolean addTrailingSlash,boolean alreadyEncoded){  String segment=canonicalize(input,pos,limit,PATH_SEGMENT_ENCODE_SET,alreadyEncoded,false,true);  if (isDot(segment)) {    return;  }  if (isDotDot(segment)) {    pop();    return;  }  if (encodedPathSegments.get(encodedPathSegments.size() - 1).isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,segment);  } else {    encodedPathSegments.add(segment);  }  if (addTrailingSlash) {    encodedPathSegments.add("");  }}  }
class C{  public final void testF4Value(){  assertEquals(65537,RSAKeyGenParameterSpec.F4.intValue());}  }
class C{  private String partiallyEscapeAssertionValue(String assertionValue){  StringBuilder sb=new StringBuilder(assertionValue.length());  for (int j=0; j < assertionValue.length(); j++) {    char c=assertionValue.charAt(j);    if (c == '*') {      sb.append(c);    } else {      sb.append(Filter.escapeAssertionValue(String.valueOf(c)));    }  }  return sb.toString();}  }
class C{  public void unlock(long stamp){  long a=stamp & ABITS, m, s;  WNode h;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L)     break; else     if (m == WBIT) {      if (a != m)       break;      state=(s+=WBIT) == 0L ? ORIGIN : s;      if ((h=whead) != null && h.status != 0)       release(h);      return;    } else     if (a == 0L || a >= WBIT)     break; else     if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        return;      }    } else     if (tryDecReaderOverflow(s) != 0L)     return;  }  throw new IllegalMonitorStateException();}  }
class C{  protected static AttrSet mapToAttrSet(Map map){  return mapToAttrSet(map,false);}  }
class C{  public static void putFloat(final String key,final float value){  try {    systemRoot.putFloat(fixKey(key),value);  } catch (  final Exception e) {    System.err.print(e);  }}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    TlsTest.fail(s);  }}  }
class C{  @Override public void flush() throws IOException {  super.flush();}  }
class C{  void endRequest() throws IOException {  if (swallowInput && (lastActiveFilter != -1)) {    int extraBytes=(int)activeFilters[lastActiveFilter].end();    pos=pos - extraBytes;  }}  }
class C{  public boolean isSite(String serverOrSiteId){  return WebtopNaming.isSite(serverOrSiteId);}  }
class C{  public void testFloatValueNegative1(){  String a="-27467238";  float result=-2.7467238E7f;  float aNumber=new BigInteger(a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public static Map<String,Set<String>> parse(CommandManager mgr,String fileName,List listAttributeValues) throws CLIException {  Map<String,Set<String>> results=null;  if (fileName != null) {    results=parse(mgr,fileName);  }  if ((listAttributeValues != null) && !listAttributeValues.isEmpty()) {    if (results != null) {      results.putAll(parse(mgr,listAttributeValues));    } else {      results=parse(mgr,listAttributeValues);    }  }  return (results == null) ? new HashMap<String,Set<String>>() : results;}  }
class C{  static FractionalConfig toFractionalConfig(ReplicationDomainCfg configuration) throws ConfigException {  Iterator<String> exclIt=configuration.getFractionalExclude().iterator();  Iterator<String> inclIt=configuration.getFractionalInclude().iterator();  Map<String,Set<String>> newFractionalSpecificClassesAttributes=new HashMap<>();  Set<String> newFractionalAllClassesAttributes=new HashSet<>();  int newFractionalMode=parseFractionalConfig(exclIt,inclIt,newFractionalSpecificClassesAttributes,newFractionalAllClassesAttributes);  FractionalConfig result=new FractionalConfig(configuration.getBaseDN());switch (newFractionalMode) {case NOT_FRACTIONAL:    result.setFractional(false);  result.setFractionalExclusive(true);break;case EXCLUSIVE_FRACTIONAL:case INCLUSIVE_FRACTIONAL:result.setFractional(true);result.setFractionalExclusive(newFractionalMode == EXCLUSIVE_FRACTIONAL);break;}result.setFractionalSpecificClassesAttributes(newFractionalSpecificClassesAttributes);result.setFractionalAllClassesAttributes(newFractionalAllClassesAttributes);return result;}  }
class C{  public PluginResult.PreOperation invokePreOperationDeletePlugins(PreOperationDeleteOperation deleteOperation) throws CanceledOperationException {  PluginResult.PreOperation result=null;  for (int i=0; i < preOperationDeletePlugins.length; i++) {    DirectoryServerPlugin p=preOperationDeletePlugins[i];    if (isInternalOperation(deleteOperation,p)) {      continue;    }    try {      result=p.doPreOperation(deleteOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreOperationException(e,i,preOperationDeletePlugins,deleteOperation,p);    }    if (result == null) {      return handlePreOperationResult(deleteOperation,i,preOperationDeletePlugins,p);    } else     if (!result.continuePluginProcessing()) {      registerSkippedPreOperationPlugins(i,preOperationDeletePlugins,deleteOperation);      return result;    }  }  if (result == null) {    result=PluginResult.PreOperation.continueOperationProcessing();  }  return result;}  }
class C{  public boolean isFlavorRemoteObjectType(){  return isRepresentationClassRemote() && isRepresentationClassSerializable() && isMimeTypeEqual(javaRemoteObjectMimeType);}  }
class C{  public Set subEntries(String tokenID,String dn,String filter,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws SMSException, SSOException {  initialize();  if (debug.messageEnabled()) {    debug.message("SMSJAXRPCObjectImpl::subentries dn: " + dn);  }  CachedSubEntries ce=CachedSubEntries.getInstance(getToken(tokenID),dn);  return (ce.getSubEntries(getToken(tokenID),filter));}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (CookieUtils.debug.messageEnabled()) {    CookieUtils.debug.message("CookieWriterServlet Initializing...");  }}  }
class C{  public Builder auxiliaryObjectClasses(final Collection<String> objectClassNamesOrOIDs){  this.auxiliaryClassOIDs.addAll(objectClassNamesOrOIDs);  return this;}  }
class C{  private Component createTitlePanel(){  JPanel titlePanel=new JPanel(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  titlePanel.setOpaque(false);  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.fill=GridBagConstraints.BOTH;  gbc.weightx=0.0;  gbc.gridwidth=GridBagConstraints.RELATIVE;  LocalizableMessage title=INFO_SECURITY_OPTIONS_TITLE.get();  JLabel l=UIFactory.makeJLabel(UIFactory.IconType.NO_ICON,title,UIFactory.TextStyle.TITLE);  l.setOpaque(false);  titlePanel.add(l,gbc);  gbc.gridwidth=GridBagConstraints.RELATIVE;  gbc.anchor=GridBagConstraints.NORTHWEST;  gbc.weightx=1.0;  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.insets.left=0;  gbc.weightx=1.0;  gbc.gridwidth=GridBagConstraints.REMAINDER;  titlePanel.add(Box.createHorizontalGlue(),gbc);  return titlePanel;}  }
class C{  public void paint(Graphics g,Shape allocation){  Rectangle a=(Rectangle)allocation;  painter.paint(g,a.x,a.y,a.width,a.height,this);  super.paint(g,a);}  }
class C{  public FrameBodyWPUB(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public void testCase18(){  byte aBytes[]={0};  byte bBytes[]={0};  byte rBytes[]={0};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  @Activate void activate(ComponentContext compContext){  logger.debug("Activating Service with configuration {}",compContext.getProperties());  try {    config=enhancedConfig.getConfigurationAsJson(compContext);    dataSourceService=dataSourceServices.get(config.get(CONFIG_USE_DATASOURCE).required().asString());  } catch (  RuntimeException ex) {    logger.warn("Configuration invalid and could not be parsed, can not start JDBC repository: " + ex.getMessage(),ex);    throw ex;  }  init(config);  logger.info("Repository started.");}  }
class C{  public BoolStack(int size){  m_allocatedSize=size;  m_values=new boolean[size];  m_index=-1;}  }
class C{  public JRootPane(){  setGlassPane(createGlassPane());  setLayeredPane(createLayeredPane());  setContentPane(createContentPane());  setLayout(createRootLayout());  setDoubleBuffered(true);  updateUI();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  System.out.println("Error! Function.execute should not be called!");  return null;}  }
class C{  public boolean verify() throws Exception {  Logger logger=(com.sun.identity.log.Logger)Logger.getLogger(name);  ArrayList fileList=new ArrayList();  String[][] tmpResult=new String[1][1];  Object token=new Object();synchronized (logger) {    verificationOn=true;    long start=currentTimeMillis();    helper=SecureFileHandler.getSecureLogHelper(name);    fileList=SecureFileHandler.getCurrentFileList(name);    if (fileList == null) {      Debug.error("No fileList found in handler.");      return VerifierAction.doVerifierAction(name,verified);    }    token=Token.createToken("AUDITOR",new String(verPassword.getChars()));    tmpResult=LogReader.read((String)fileList.get(fileList.size() - 1),token);  }  for (int i=0; i < fileList.size() - 1; i++) {    String[][] result=new String[1][1];    try {      result=LogReader.read((String)fileList.get(i),token);    } catch (    Exception e) {      Debug.error("Error in reading File : " + fileList.get(i));    }    if (result != null && result.length != 0) {      Vector header=new Vector(result[0].length);      header.addAll(Arrays.asList(result[0]));      int signPos=-1, macPos=-1;      String signFldName, macFldName;      signFldName=LogConstants.SIGNATURE_FIELDNAME;      macFldName=LogConstants.MAC_FIELDNAME;      for (int l=0; l < header.size(); l++) {        if ((((String)header.get(l))).equalsIgnoreCase(signFldName)) {          signPos=l;          break;        }      }      for (int l=0; l < header.size(); l++) {        if ((((String)header.get(l))).equalsIgnoreCase(macFldName)) {          macPos=l;          break;        }      }      if ((signPos == -1) || (macPos == -1)) {        Debug.error("Could not locate mac and sign header");        return VerifierAction.doVerifierAction(name,verified);      }      for (int k=1; k < result.length; k++) {        if (Debug.messageEnabled()) {          Debug.message(name + ":Start checking records " + result.length+ ":"+ fileList.get(i));        }        if (result[k][signPos].equals("-")) {          verified=verifyLogRecord(result[k],macPos);          if (!verified) {            Debug.error("Log Record Verification " + "Failed in file:" + (String)fileList.get(i) + " at record no. "+ k);            break;          }          if (Debug.messageEnabled()) {            Debug.message(name + ":Log Record Verification Succeeded in file:" + (String)fileList.get(i)+ "at record no."+ k);          }        } else {          int lastRecInFile=0;          lastRecInFile=(result.length - 1) - k;          verified=verifySignature(result[k],signPos,lastRecInFile);          if (!verified) {            Debug.error("Log Signature Verification " + "Failed in file:" + (String)fileList.get(i) + " at record no. "+ k);            break;          }          if (Debug.messageEnabled()) {            Debug.message("Log Signature Verification " + "Succeeded in file:" + (String)fileList.get(i) + "at record no."+ k);          }        }      }    } else {      if (Debug.messageEnabled()) {        Debug.message("LogVerifier::verify::Empty return " + "from read of " + (String)fileList.get(i) + ":"+ fileList.get(i));      }      verified=false;      break;    }    if (!verified) {      break;    }  }  if (tmpResult != null && tmpResult.length != 0) {    Vector header=new Vector(tmpResult[0].length);    header.addAll(Arrays.asList(tmpResult[0]));    int signPos=-1, macPos=-1;    String signFldName, macFldName;    signFldName=LogConstants.SIGNATURE_FIELDNAME;    macFldName=LogConstants.MAC_FIELDNAME;    for (int l=0; l < header.size(); l++) {      if ((((String)header.get(l))).equalsIgnoreCase(signFldName)) {        signPos=l;        break;      }    }    for (int l=0; l < header.size(); l++) {      if ((((String)header.get(l))).equalsIgnoreCase(macFldName)) {        macPos=l;        break;      }    }    if ((signPos == -1) || (macPos == -1)) {      Debug.error("Could not locate mac and sign header");      return VerifierAction.doVerifierAction(name,verified);    }    for (int k=1; k < tmpResult.length; k++) {      if (Debug.messageEnabled()) {        Debug.message(name + ":Start checking records " + tmpResult.length+ ":"+ fileList.get(fileList.size() - 1));      }      if (tmpResult[k][signPos].equals("-")) {        verified=verifyLogRecord(tmpResult[k],macPos);        if (!verified) {          Debug.error("Log Record Verification Failed in file:" + (String)fileList.get(fileList.size() - 1) + " at record no. "+ k);          break;        }        if (Debug.messageEnabled()) {          Debug.message(name + ":Log Record Verification " + "Succeeded in file:"+ (String)fileList.get(fileList.size() - 1)+ "at record no."+ k);        }      } else {        int lastRecInFile=0;        lastRecInFile=(tmpResult.length - 1) - k;        verified=verifySignature(tmpResult[k],signPos,lastRecInFile);        if (!verified) {          Debug.error("Log Signature Verification Failed " + "in file:" + (String)fileList.get(fileList.size() - 1) + " at record no. "+ k);          break;        }        if (Debug.messageEnabled()) {          Debug.message("Log Signature Verification Succeeded" + " in file:" + (String)fileList.get(fileList.size() - 1) + "at record no."+ k);        }      }    }  } else {    if (Debug.messageEnabled()) {      Debug.message("LogVerifier::verify::Empty return from read of " + (String)fileList.get(fileList.size() - 1) + ":"+ fileList.get(fileList.size() - 1));    }    verified=false;  }  prevSignature=null;  curMAC=null;  String path=manager.getProperty(LogConstants.LOG_LOCATION);  if (!path.endsWith("/"))   path+="/";  String verKeyStoreName=path + PREFIX + "ver."+ name;  helper.setLastLineforVerifier(true);  boolean intrusion=helper.isIntrusionTrue();  if (intrusion) {    Debug.error(name + " Last Line check in Verifier failed." + " Possible intrusion detected");    verified=false;  }  helper.setLastLineforVerifier(false);  helper.reinitializeVerifier(verKeyStoreName,verPassword);  if (Debug.messageEnabled()) {    Debug.message(name + ":Done Verifying");  }  return VerifierAction.doVerifierAction(name,verified);}  }
class C{  public synchronized void queue(AbstractNodeTask nodeTask){  if (nodeTask == null) {    throw new IllegalArgumentException("null argument");  }  waitingQueue.add(nodeTask);  notify();}  }
class C{  void ensurePrestart(){  int wc=workerCountOf(ctl.get());  if (wc < corePoolSize)   addWorker(null,true); else   if (wc == 0)   addWorker(null,false);}  }
class C{  public ValueNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void writeFile(String path,byte[] contents) throws IOException {  try (FileOutputStream fos=new FileOutputStream(path)){    fos.write(contents);  } }  }
class C{  private int processError(L10NMessageImpl e,String headerMessageCode,String debugMessage,Object... messageParameters) throws AuthLoginException {  if (null == e) {    return processError(headerMessageCode,debugMessage,messageParameters);  }  String headerMessage;  if (null == headerMessageCode) {    headerMessage=e.getL10NMessage(getLoginLocale());  } else {    headerMessage=bundle.getString(headerMessageCode);  }  if (debugMessage != null) {    DEBUG.error(debugMessage,messageParameters,e);  }  substituteHeader(STATE_ERROR,headerMessage);  return STATE_ERROR;}  }
class C{  public final boolean peekOrFalse(){  return (m_index > -1) ? m_values[m_index] : false;}  }
class C{  public ClientRegistration authenticate(OAuth2Request request,String endpoint) throws InvalidClientException, InvalidRequestException, NotFoundException {  final ClientCredentials clientCredentials=clientCredentialsReader.extractCredentials(request,endpoint);  Reject.ifTrue(isEmpty(clientCredentials.getClientId()),"Missing parameter, 'client_id'");  boolean authenticated=false;  try {    final String realm=realmNormaliser.normalise(request.<String>getParameter(OAuth2Constants.Custom.REALM));    final ClientRegistration clientRegistration=clientRegistrationStore.get(clientCredentials.getClientId(),request);    if (!clientRegistration.isConfidential()) {      return clientRegistration;    }    if (!clientCredentials.isAuthenticated() && !authenticate(request,clientCredentials.getClientId(),clientCredentials.getClientSecret(),realm)) {      logger.error("ClientVerifierImpl::Unable to verify password for: " + clientCredentials.getClientId());      throw failureFactory.getException(request,"Client authentication failed");    }    authenticated=true;    return clientRegistration;  } catch (  org.forgerock.json.resource.NotFoundException e) {    throw new NotFoundException(e.getMessage());  } finally {    if (auditLogger.isAuditLogEnabled()) {      if (authenticated) {        String[] obs={clientCredentials.getClientId()};        auditLogger.logAccessMessage("AUTHENTICATED_CLIENT",obs,null);      } else {        String[] obs={clientCredentials.getClientId()};        auditLogger.logErrorMessage("FAILED_AUTHENTICATE_CLIENT",obs,null);      }    }  }}  }
class C{  private List createSubjectAndProxySubject(NameIdentifier senderIdentity,SessionContext invocatorSession,boolean isBear) throws Exception {  List returnList=new ArrayList();  Subject subject=null;  SubjectConfirmation subConfirmation=null;  ProxySubject proxySubject=null;  NameIdentifier sessIdentity=null;  if (invocatorSession != null && !(sessIdentity=invocatorSession.getSessionSubject().getNameIdentifier()).equals(senderIdentity)) {    subConfirmation=new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_SENDERVOUCHES);    subject=new Subject(sessIdentity,subConfirmation);    proxySubject=createProxySubject(senderIdentity,isBear);    returnList.add(subject);    returnList.add(proxySubject);  } else {    if (isBear) {      subConfirmation=new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_BEARER);    } else {      subConfirmation=new SubjectConfirmation(SAMLConstants.CONFIRMATION_METHOD_HOLDEROFKEY);      subConfirmation.setKeyInfo(createKeyInfo());    }    subject=new Subject(senderIdentity,subConfirmation);    returnList.add(subject);  }  return returnList;}  }
class C{  private Object readResolve(){  if (getDescriptor().getFieldNames().length == 0) {    OpenType<Object> xopenType=cast(openType);    Set<Object> xlegalValues=cast(legalValues);    Comparable<Object> xminValue=cast(minValue);    Comparable<Object> xmaxValue=cast(maxValue);    return new OpenMBeanParameterInfoSupport(name,description,openType,makeDescriptor(xopenType,defaultValue,xlegalValues,xminValue,xmaxValue));  } else   return this;}  }
class C{  private static void ImportSubtree(Preferences prefsNode,Element xmlNode){  NodeList xmlKids=xmlNode.getChildNodes();  int numXmlKids=xmlKids.getLength();  Preferences[] prefsKids;synchronized (((AbstractPreferences)prefsNode).lock) {    if (((AbstractPreferences)prefsNode).isRemoved())     return;    Element firstXmlKid=(Element)xmlKids.item(0);    ImportPrefs(prefsNode,firstXmlKid);    prefsKids=new Preferences[numXmlKids - 1];    for (int i=1; i < numXmlKids; i++) {      Element xmlKid=(Element)xmlKids.item(i);      prefsKids[i - 1]=prefsNode.node(xmlKid.getAttribute("name"));    }  }  for (int i=1; i < numXmlKids; i++)   ImportSubtree(prefsKids[i - 1],(Element)xmlKids.item(i));}  }
class C{  public void select_items_in_region(){  if (board_is_read_only)   return;  if (!(interactive_state instanceof StateMenu))   return;  set_interactive_state(StateSelectRegionItems.get_instance(interactive_state,this,actlog));}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public void initializeVirtualAttributes() throws ConfigException, InitializationException {  RootCfg rootConfiguration=serverContext.getRootConfig();  rootConfiguration.addVirtualAttributeAddListener(this);  rootConfiguration.addVirtualAttributeDeleteListener(this);  for (  String providerName : rootConfiguration.listVirtualAttributes()) {    VirtualAttributeCfg cfg=rootConfiguration.getVirtualAttribute(providerName);    cfg.addChangeListener(this);    if (cfg.isEnabled()) {      String className=cfg.getJavaClass();      try {        VirtualAttributeProvider<? extends VirtualAttributeCfg> provider=loadProvider(className,cfg,true);        Map<LocalizableMessage,DirectoryException> reasons=new LinkedHashMap<>();        Set<SearchFilter> filters=buildFilters(cfg,reasons);        if (!reasons.isEmpty()) {          Entry<LocalizableMessage,DirectoryException> entry=reasons.entrySet().iterator().next();          throw new ConfigException(entry.getKey(),entry.getValue());        }        if (cfg.getAttributeType().isSingleValue()) {          if (provider.isMultiValued()) {            LocalizableMessage message=ERR_CONFIG_VATTR_SV_TYPE_WITH_MV_PROVIDER.get(cfg.dn(),cfg.getAttributeType().getNameOrOID(),className);            throw new ConfigException(message);          } else           if (cfg.getConflictBehavior() == VirtualAttributeCfgDefn.ConflictBehavior.MERGE_REAL_AND_VIRTUAL) {            LocalizableMessage message=ERR_CONFIG_VATTR_SV_TYPE_WITH_MERGE_VALUES.get(cfg.dn(),cfg.getAttributeType().getNameOrOID());            throw new ConfigException(message);          }        }        VirtualAttributeRule rule=createRule(cfg,provider,filters);        rules.put(cfg.dn(),rule);      } catch (      InitializationException ie) {        logger.error(ie.getMessageObject());        continue;      }    }  }}  }
class C{  private void readElementDeclaration() throws IOException, XmlPullParserException {  read(START_ELEMENT);  skip();  readName();  readContentSpec();  skip();  read('>');}  }
class C{  private static void initializeStaticEvaluationWeights(){  EVALUATION_WEIGHTS=com.iplanet.am.util.SystemProperties.get(EVALUATION_WEIGHTS_KEY,DEFAULT_EVALUATION_WEIGHTS);  StringTokenizer st=new StringTokenizer(EVALUATION_WEIGHTS,":");  int tokenCount=st.countTokens();  if (tokenCount != 3) {    if (PolicyManager.debug.warningEnabled()) {      PolicyManager.debug.warning("Policy.initializeStaticEvaluationWeights:" + " invalid evaulationWeights defined, " + " defaulting to "+ DEFAULT_EVALUATION_WEIGHTS);    }    EVALUATION_WEIGHTS=DEFAULT_EVALUATION_WEIGHTS;  } else {    String weight=st.nextToken();    try {      subjectWeight=Integer.parseInt(weight);    } catch (    NumberFormatException nfe) {      if (PolicyManager.debug.warningEnabled()) {        PolicyManager.debug.warning("Policy.initializeStaticEvaluationWeights:" + " invalid subjectWeight defined, defaulting to 0");      }      subjectWeight=0;    }    weight=st.nextToken();    try {      ruleWeight=Integer.parseInt(weight);    } catch (    NumberFormatException nfe) {      if (PolicyManager.debug.warningEnabled()) {        PolicyManager.debug.warning("Policy.initializeStaticEvaluationWeights:" + " invalid ruleWeight defined, defaulting to 0");      }      ruleWeight=0;    }    weight=st.nextToken();    try {      conditionWeight=Integer.parseInt(weight);    } catch (    NumberFormatException nfe) {      if (PolicyManager.debug.warningEnabled()) {        PolicyManager.debug.warning("Policy.initializeStaticEvaluationWeights:" + " invalid conditionWeight defined, defaulting to 0");      }      conditionWeight=0;    }  }}  }
class C{  @Override public void onViewRecycled(ListBaseViewHolder holder){  long begin=System.currentTimeMillis();  holder.setComponentUsing(false);  recycleViewList.add(holder);  WXLogUtils.d(TAG,"Recycle holder " + (System.currentTimeMillis() - begin) + "  Thread:"+ Thread.currentThread().getName());}  }
class C{  protected CharArrayBuffer initBuffer(CharArrayBuffer buffer){  if (buffer != null) {    buffer.clear();  } else {    buffer=new CharArrayBuffer(64);  }  return buffer;}  }
class C{  private void checkSaveButton(){  if (!ignoreCheckSave && index != null) {    saveChanges.setEnabled(!authenticationRequired(getInfo().getServerDescriptor()) && isModified());  }}  }
class C{  public ZipOutputStream(OutputStream out,Charset charset){  super(out,new Deflater(Deflater.DEFAULT_COMPRESSION,true));  if (charset == null)   throw new NullPointerException("charset is null");  this.zc=ZipCoder.get(charset);  usesDefaultDeflater=true;}  }
class C{  Object processValue(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  int type=getType();  Object processedValue=null;switch (type) {case T_AVT:    processedValue=processAVT(handler,uri,name,rawName,value,owner);  break;case T_CDATA:processedValue=processCDATA(handler,uri,name,rawName,value,owner);break;case T_CHAR:processedValue=processCHAR(handler,uri,name,rawName,value,owner);break;case T_ENUM:processedValue=processENUM(handler,uri,name,rawName,value,owner);break;case T_EXPR:processedValue=processEXPR(handler,uri,name,rawName,value,owner);break;case T_NMTOKEN:processedValue=processNMTOKEN(handler,uri,name,rawName,value,owner);break;case T_PATTERN:processedValue=processPATTERN(handler,uri,name,rawName,value,owner);break;case T_NUMBER:processedValue=processNUMBER(handler,uri,name,rawName,value,owner);break;case T_QNAME:processedValue=processQNAME(handler,uri,name,rawName,value,owner);break;case T_QNAMES:processedValue=processQNAMES(handler,uri,name,rawName,value);break;case T_QNAMES_RESOLVE_NULL:processedValue=processQNAMESRNU(handler,uri,name,rawName,value);break;case T_SIMPLEPATTERNLIST:processedValue=processSIMPLEPATTERNLIST(handler,uri,name,rawName,value,owner);break;case T_URL:processedValue=processURL(handler,uri,name,rawName,value,owner);break;case T_YESNO:processedValue=processYESNO(handler,uri,name,rawName,value);break;case T_STRINGLIST:processedValue=processSTRINGLIST(handler,uri,name,rawName,value);break;case T_PREFIX_URLLIST:processedValue=processPREFIX_URLLIST(handler,uri,name,rawName,value);break;case T_ENUM_OR_PQNAME:processedValue=processENUM_OR_PQNAME(handler,uri,name,rawName,value,owner);break;case T_NCNAME:processedValue=processNCNAME(handler,uri,name,rawName,value,owner);break;case T_AVT_QNAME:processedValue=processAVT_QNAME(handler,uri,name,rawName,value,owner);break;case T_PREFIXLIST:processedValue=processPREFIX_LIST(handler,uri,name,rawName,value);break;default :}return processedValue;}  }
class C{  public static boolean isWeak(byte[] key,int offset) throws InvalidKeyException {  if (key == null) {    throw new InvalidKeyException("key == null");  }  if (key.length - offset < DES_KEY_LEN) {    throw new InvalidKeyException("key too short");  }  I:   for (int i=0; i < SEMIWEAKS.length; i++) {    for (int j=0; j < DES_KEY_LEN; j++) {      if (SEMIWEAKS[i][j] != key[offset + j]) {        continue I;      }    }    return true;  }  return false;}  }
class C{  public ModificationResult(final int chunkCountDiff,final long bytesDiffer,final GUID... occurred){  assert occurred != null && occurred.length > 0;  this.chunkDifference=chunkCountDiff;  this.byteDifference=bytesDiffer;  this.occuredGUIDs.addAll(Arrays.asList(occurred));}  }
class C{  static AccountIdentifier extractFromInput(final String decodedUserInput) throws DiscoveryException {  if (decodedUserInput == null || decodedUserInput.isEmpty()) {    throw new DiscoveryException("Invalid input");  }  try {    final URI uri;    String normalizedIdentifier=decodedUserInput;    if (decodedUserInput.startsWith("acct:") || decodedUserInput.contains("@")) {      if (!decodedUserInput.startsWith("acct:")) {        normalizedIdentifier="acct:" + decodedUserInput;      }      if (decodedUserInput.lastIndexOf('@') > decodedUserInput.indexOf('@') + 1) {        uri=new URI("https://".concat(decodedUserInput.substring(decodedUserInput.lastIndexOf('@') + 1,decodedUserInput.length())));      } else {        uri=new URI(normalizedIdentifier.replace("acct:","acct://"));      }    } else {      uri=new URI(decodedUserInput);      if (decodedUserInput.contains("#")) {        normalizedIdentifier=decodedUserInput.substring(0,decodedUserInput.indexOf('#'));      }    }    final int port=uri.getPort();    final String host=uri.getHost();    return new AccountIdentifier(new URI(normalizedIdentifier),new URI("http".equals(uri.getScheme()) ? "http" : "https",null,host,port,"/",null,null));  } catch (  URISyntaxException e) {    throw new DiscoveryException("Unable to parse the user input",e);  }}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  public static Node.Nodes parse(ParserController pc,JspReader reader,Node parent,boolean isTagFile,boolean directivesOnly,Jar jar,String pageEnc,String jspConfigPageEnc,boolean isDefaultPageEncoding,boolean isBomPresent) throws JasperException {  Parser parser=new Parser(pc,reader,isTagFile,directivesOnly,jar);  Node.Root root=new Node.Root(reader.mark(),parent,false);  root.setPageEncoding(pageEnc);  root.setJspConfigPageEncoding(jspConfigPageEnc);  root.setIsDefaultPageEncoding(isDefaultPageEncoding);  root.setIsBomPresent(isBomPresent);  PageInfo pageInfo=pc.getCompiler().getPageInfo();  if (parent == null && !isTagFile) {    parser.addInclude(root,pageInfo.getIncludePrelude());  }  if (directivesOnly) {    parser.parseFileDirectives(root);  } else {    while (reader.hasMoreInput()) {      parser.parseElements(root);    }  }  if (parent == null && !isTagFile) {    parser.addInclude(root,pageInfo.getIncludeCoda());  }  Node.Nodes page=new Node.Nodes(root);  return page;}  }
class C{  public final boolean isWifiEnabled(){  boolean wifiState=false;  WifiManager wifiManager=(WifiManager)context.getSystemService(Context.WIFI_SERVICE);  if (wifiManager != null) {    wifiState=wifiManager.isWifiEnabled();  }  return wifiState;}  }
class C{  public void testGetInstanceString02() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  KeyAgreement keyA;  for (int i=0; i < validValues.length; i++) {    keyA=KeyAgreement.getInstance(validValues[i]);    assertEquals("Incorrect algorithm",keyA.getAlgorithm(),validValues[i]);  }}  }
class C{  private boolean isPastMaxAge(long maxAge,long authTime) throws SSOException {  return maxAge > -1 && maxAge <= currentTimeMillis() - authTime;}  }
class C{  public DTMConfigurationException(String message,SourceLocator locator,Throwable e){  super(message,locator,e);}  }
class C{  private ViewAction scroll(){  return new GeneralSwipeAction(Swipe.SLOW,GeneralLocation.BOTTOM_CENTER,GeneralLocation.TOP_CENTER,Press.FINGER);}  }
class C{  private Schema loadSchemaWithConfigurationEnabled() throws InitializationException {  final File schemaDir=serverContext.getEnvironment().getSchemaDirectory();  try (LDIFEntryReader reader=new LDIFEntryReader(new FileReader(new File(schemaDir,CONFIGURATION_FILE_NAME)))){    final Schema schema=Schema.getDefaultSchema();    reader.setSchema(schema);    final Entry entry=reader.readEntry();    return new SchemaBuilder(schema).addSchema(entry,false).toSchema().asNonStrictSchema();  } catch (  Exception e) {    throw new InitializationException(ERR_UNABLE_TO_LOAD_CONFIGURATION_ENABLED_SCHEMA.get(stackTraceToSingleLineString(e)),e);  }}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer sb=new StringBuffer(2000);  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  sb.append("<").append(appendNS).append(CONDITIONS_ELEMENT).append(NS);  String str=null;  if (notBefore != null) {    str=DateUtils.toUTCDateFormat(notBefore);    sb.append(" ").append(NOT_BEFORE_ATTR).append("=\"").append(str).append("\"");  }  if (notOnOrAfter != null) {    str=DateUtils.toUTCDateFormat(notOnOrAfter);    sb.append(" ").append(NOT_ON_OR_AFTER_ATTR).append("=\"").append(str).append("\"");  }  sb.append(">\n");  int length=0;  if (conditions != null) {    length=conditions.size();    for (int i=0; i < length; i++) {      Condition condition=(Condition)conditions.get(i);      sb.append(condition.toXMLString(includeNSPrefix,false));    }  }  if (audienceRestrictions != null) {    length=audienceRestrictions.size();    for (int i=0; i < length; i++) {      AudienceRestriction ar=(AudienceRestriction)audienceRestrictions.get(i);      sb.append(ar.toXMLString(includeNSPrefix,false));    }  }  if (oneTimeUses != null) {    length=oneTimeUses.size();    for (int i=0; i < length; i++) {      OneTimeUse ar=(OneTimeUse)oneTimeUses.get(i);      sb.append(ar.toXMLString(includeNSPrefix,false));    }  }  if (proxyRestrictions != null) {    length=proxyRestrictions.size();    for (int i=0; i < length; i++) {      ProxyRestriction pr=(ProxyRestriction)proxyRestrictions.get(i);      sb.append(pr.toXMLString(includeNSPrefix,false));    }  }  sb.append("</").append(appendNS).append(CONDITIONS_ELEMENT).append(">\n");  return sb.toString();}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  bias[0]=Position.Bias.Forward;  int n=0;  Container c=getContainer();  if (c instanceof JPasswordField) {    JPasswordField f=(JPasswordField)c;    if (!f.echoCharIsSet()) {      return super.viewToModel(fx,fy,a,bias);    }    char echoChar=f.getEchoChar();    int charWidth=f.getFontMetrics(f.getFont()).charWidth(echoChar);    a=adjustAllocation(a);    Rectangle alloc=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();    n=(charWidth > 0 ? ((int)fx - alloc.x) / charWidth : Integer.MAX_VALUE);    if (n < 0) {      n=0;    } else     if (n > (getStartOffset() + getDocument().getLength())) {      n=getDocument().getLength() - getStartOffset();    }  }  return getStartOffset() + n;}  }
class C{  public void mouse_moved(Point p_point){  if (board_is_read_only)   return;  if (interactive_state != null && gdi_context != null) {    current_mouse_position=gdi_context.coordinate_transform.screen_to_board(p_point);    StateInteractive return_state=interactive_state.mouse_moved();    if (return_state != interactive_state) {      set_interactive_state(return_state);      repaint();    }  }}  }
class C{  private int nextTlsMode(){  if (nextTlsMode == TLS_MODE_MODERN) {    nextTlsMode=TLS_MODE_COMPATIBLE;    return TLS_MODE_MODERN;  } else   if (nextTlsMode == TLS_MODE_COMPATIBLE) {    nextTlsMode=TLS_MODE_NULL;    return TLS_MODE_COMPATIBLE;  } else {    throw new AssertionError();  }}  }
class C{  public SuffixDescriptor(DN suffixDn,ReplicaDescriptor replica){  this.suffixDN=suffixDn;  this.replicas.add(replica);}  }
class C{  public boolean isUpdate(){  return valueUpdateTime != null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        newNode=doc.createEntityReference("ent1");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {    newNode=doc.createEntityReference("ent1");    assertNotNull("createdEntRefNotNull",newNode);    newValue=newNode.getNodeValue();    assertNull("initiallyNull",newValue);    newNode.setNodeValue("This should have no effect");    newValue=newNode.getNodeValue();    assertNull("nullAfterAttemptedChange",newValue);  }}  }
class C{  public static String decodeAsUTF8String(String s){  byte[] decodedValue=decode(s);  if (decodedValue != null) {    return new String(decode(s),Charset.forName("UTF-8"));  } else {    return null;  }}  }
class C{  private static boolean isTainted(Collection<?> c){  try {    checkTypeSafe(c);  } catch (  IllegalArgumentException e) {    return true;  }  return false;}  }
class C{  public Cursor fetch(Long parameterID){  if (parameterID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_ACTIONPARAMETERID + "=" + parameterID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public OrganizationAlreadyExistsException(String msg){  super(msg);}  }
class C{  public static void restart(String className,LocalizableMessage reason,DirectoryEnvironmentConfig config){  try {    shutDown(className,reason);    reinitialize(config);    directoryServer.startServer();  } catch (  Exception e) {    System.err.println("ERROR:  Unable to perform an in-core restart:");    e.printStackTrace();    System.err.println("Halting the JVM so that it must be manually " + "restarted.");    Runtime.getRuntime().halt(1);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.IDPEntriesType createIDPEntriesType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.IDPEntriesTypeImpl();}  }
class C{  void register(Itr itr){  head=new Node(itr,head);}  }
class C{  private Converters(){  throw new AssertionError();}  }
class C{  public static short[] doPlacement(int nrow,int ncol){  int key=nrow * 1000 + ncol;  short[] pc=cache.get(key);  if (pc != null)   return pc;  Placement p=new Placement();  p.nrow=nrow;  p.ncol=ncol;  p.array=new short[nrow * ncol];  p.ecc200();  cache.put(key,p.array);  return p.array;}  }
class C{  public static LDAPURL valueOf(String host,int port,Boolean isSSL){  return new LDAPURL(host,port,isSSL);}  }
class C{  public java.io.InputStream readAsciiStream() throws SQLException {  return (java.io.InputStream)getNextAttribute();}  }
class C{  public static void test_diff_constructor(){  new Target2();}  }
class C{  @Override public int read() throws IOException {  int ch=super.read();  if (ch != -1) {    branch.write(ch);  }  return ch;}  }
class C{  protected PrintStream findStream(){  Stack<CaptureLog> stack=logs.get();  if (stack != null && !stack.isEmpty()) {    CaptureLog log=stack.peek();    if (log != null) {      PrintStream ps=log.getStream();      if (ps != null) {        return ps;      }    }  }  return out;}  }
class C{  Class<?> findBoundCallerClass(MemberName m) throws IllegalAccessException {  Class<?> callerClass=null;  if (MethodHandleNatives.isCallerSensitive(m)) {    if (hasPrivateAccess()) {      callerClass=lookupClass;    } else {      throw new IllegalAccessException("Attempt to lookup caller-sensitive method using restricted lookup object");    }  }  return callerClass;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  String actions=(String)fields.get("actions",null);  init(actions);}  }
class C{  @DataProvider public Object[][] invalidEscapeSequenceFilters(){  final char[] VALID_NIBBLES={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','A','B','C','D','E','F'};  final char[] INVALID_NIBBBLES={'g','z','G','Z','-','=','+','\00',')','n','t','\\'};  List<String> invalidEscapeSequences=new ArrayList<>();  for (  char validNibble : VALID_NIBBLES) {    for (    char invalidNibble : INVALID_NIBBBLES) {      invalidEscapeSequences.add("\\" + validNibble + invalidNibble);      invalidEscapeSequences.add("\\" + invalidNibble + validNibble);    }    invalidEscapeSequences.add("\\" + validNibble);  }  List<String[]> allParameters=new ArrayList<>();  for (  String invalidEscape : invalidEscapeSequences) {    allParameters.add(new String[]{"(sn=" + invalidEscape + ")"});    allParameters.add(new String[]{"(sn=" + invalidEscape});    allParameters.add(new String[]{"(sn=" + invalidEscape + "*"+ invalidEscape+ "*"+ invalidEscape+ ")"});    allParameters.add(new String[]{"(sn=" + invalidEscape + "*"+ invalidEscape+ "*"+ invalidEscape});    allParameters.add(new String[]{"(sn<=" + invalidEscape + ")"});    allParameters.add(new String[]{"(sn<=" + invalidEscape});    allParameters.add(new String[]{"(sn>=" + invalidEscape + ")"});    allParameters.add(new String[]{"(sn>=" + invalidEscape});    allParameters.add(new String[]{"(sn>=" + invalidEscape + ")"});    allParameters.add(new String[]{"(sn>=" + invalidEscape});    allParameters.add(new String[]{"(sn:caseExactMatch:=" + invalidEscape + ")"});    allParameters.add(new String[]{"(sn:caseExactMatch:=" + invalidEscape});  }  return allParameters.toArray(new String[][]{});}  }
class C{  public IdentityHashMap(){  init(DEFAULT_CAPACITY);}  }
class C{  private static boolean containsKeyStorePasswordErrorMessage(Collection<LocalizableMessage> msgs){  for (  final LocalizableMessage msg : msgs) {    if (StaticUtils.hasDescriptor(msg,INFO_JKS_KEYSTORE_DOES_NOT_EXIST) || StaticUtils.hasDescriptor(msg,INFO_JCEKS_KEYSTORE_DOES_NOT_EXIST) || StaticUtils.hasDescriptor(msg,INFO_PKCS12_KEYSTORE_DOES_NOT_EXIST)|| StaticUtils.hasDescriptor(msg,INFO_PKCS11_KEYSTORE_DOES_NOT_EXIST)|| StaticUtils.hasDescriptor(msg,INFO_ERROR_ACCESSING_JKS_KEYSTORE)|| StaticUtils.hasDescriptor(msg,INFO_ERROR_ACCESSING_JCEKS_KEYSTORE)|| StaticUtils.hasDescriptor(msg,INFO_ERROR_ACCESSING_PKCS12_KEYSTORE)|| StaticUtils.hasDescriptor(msg,INFO_ERROR_ACCESSING_PKCS11_KEYSTORE)|| StaticUtils.hasDescriptor(msg,INFO_ERROR_ACCESSING_KEYSTORE_JDK_BUG)) {      return true;    }  }  return false;}  }
class C{  public StyledEditorKit(){  createInputAttributeUpdated();  createInputAttributes();}  }
class C{  public boolean skipped(){  return skipped;}  }
class C{  @Override protected void encryptFinal() throws IOException {  encrypt();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignatureElement createSignatureElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignatureElementImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  Attr districtAttr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("lang");  districtAttr=testEmployee.setAttributeNode(newAttribute);  assertNull("elementSetAttributeNodeNullAssert",districtAttr);}  }
class C{  public Object processDSTRequest(Object request,Message requestMsg,Message responseMsg) throws SOAPFaultException, DSTException {  IDPPUtils.debug.message("PPRequestHandler:processRequest:Init");  try {    IDPPServiceManager serviceManager=IDPPServiceManager.getInstance();    String providerID=serviceManager.getProviderID();    ProviderHeader ph=new ProviderHeader(providerID);    responseMsg.setProviderHeader(ph);    if (serviceManager.isServiceInstanceUpdateEnabled()) {      ServiceInstanceUpdateHeader siuHeader=getServiceInstanceUpdateHeader();      responseMsg.setServiceInstanceUpdateHeader(siuHeader);    }    if (request instanceof QueryElement) {      QueryElement query=(QueryElement)request;      Document doc=IDPPUtils.getDocumentBuilder().newDocument();      IDPPUtils.getMarshaller().setProperty("com.sun.xml.bind.namespacePrefixMapper",new NamespacePrefixMapperImpl());      IDPPUtils.getMarshaller().marshal(query,doc);      return processQueryRequest(query,providerID,requestMsg,doc);    } else     if (request instanceof ModifyElement) {      ModifyElement modify=(ModifyElement)request;      Document doc=IDPPUtils.getDocumentBuilder().newDocument();      IDPPUtils.getMarshaller().setProperty("com.sun.xml.bind.namespacePrefixMapper",new NamespacePrefixMapperImpl());      IDPPUtils.getMarshaller().marshal(modify,doc);      return processModifyRequest(modify,providerID,requestMsg,doc);    } else {      IDPPUtils.debug.error("PPRequestHandler:processRequest:invalid" + " Request.");      throw new DSTException(IDPPUtils.bundle.getString("invalidRequest"));    }  } catch (  IDPPException ie) {    IDPPUtils.debug.error("PPRequestHandler:processRequest fail",ie);    throw new DSTException(ie);  }catch (  JAXBException je) {    IDPPUtils.debug.error("PPRequestHandler:processRequest fail",je);    throw new DSTException(IDPPUtils.bundle.getString("jaxbFailure"));  }catch (  SOAPBindingException sbe) {    IDPPUtils.debug.error("PPRequestHandler:processRequest fail",sbe);    throw new DSTException(sbe);  }}  }
class C{  private static void rdf_PropertyElementList(XMPMetaImpl xmp,XMPNode xmpParent,Node xmlParent,boolean isTopLevel) throws XMPException {  for (int i=0; i < xmlParent.getChildNodes().getLength(); i++) {    Node currChild=xmlParent.getChildNodes().item(i);    if (isWhitespaceNode(currChild)) {      continue;    } else     if (currChild.getNodeType() != Node.ELEMENT_NODE) {      throw new XMPException("Expected property element node not found",BADRDF);    } else {      rdf_PropertyElement(xmp,xmpParent,currChild,isTopLevel);    }  }}  }
class C{  protected void drawPdfA1RadioAppearance(float width,float height,String value){  PdfStream stream=new PdfStream().makeIndirect(getDocument());  PdfCanvas canvas=new PdfCanvas(stream,new PdfResources(),getDocument());  Rectangle rect=new Rectangle(0,0,width,height);  PdfFormXObject xObject=new PdfFormXObject(rect);  drawBorder(canvas,xObject,width,height);  drawRadioField(canvas,rect.getWidth(),rect.getHeight(),!value.equals("Off"));  PdfWidgetAnnotation widget=getWidgets().get(0);  xObject.getPdfObject().getOutputStream().writeBytes(stream.getBytes());  widget.setNormalAppearance(xObject.getPdfObject());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildinvalidnodetype.class,args);}  }
class C{  @Override public void handle(R context){  IWebsocketConnectionConfig connectionConfig=getWebsocketRoute().getWebsocketController().onPeerPreConnect(context);  if (connectionConfig == null) {    manageCancellationFromOnPeerPreConnect();    return;  }  String endpointId=connectionConfig.getEndpointId();  if (StringUtils.isBlank(endpointId)) {    throw new RuntimeException("The WebSocket endpoint id can't be empty.");  }  String peerId=connectionConfig.getPeerId();  if (StringUtils.isBlank(peerId)) {    peerId=generatePeerId(context,endpointId);  }  if (!getWebsocketEndpointToControllerManager().isManagingEndpoint(endpointId,getWebsocketRoute().getWebsocketController())) {synchronized (getEndpointCreationLock(endpointId)) {      if (!getWebsocketEndpointToControllerManager().isManagingEndpoint(endpointId,getWebsocketRoute().getWebsocketController())) {        try {          getWebsocketEndpointToControllerManager().addEndpointController(endpointId,getWebsocketRoute().getWebsocketController());        } catch (        WebsocketEndpointAlreadyManagedByAnotherControllerException ex) {          throw new RuntimeException("The endpoint '" + endpointId + "' is already managed by another controller : "+ ex.getCurrentManagingControllerKey()+ ". It can't be managed by: "+ ex.getNewControllerKey());        }        IWebsocketEndpointManager websocketEndpointManager=getServer().getWebsocketEndpointManager(endpointId);        if (websocketEndpointManager != null) {          throw new RuntimeException("No existing controller was found to manage the WebSocket endpoint '" + endpointId + "' "+ "but we found a "+ IWebsocketEndpointManager.class.getSimpleName()+ " object in the server.");        }        IWebsocketEndpointHandler websocketEndpointHandler=createWebsocketEndpointHandler(endpointId,getWebsocketRoute().getWebsocketController());        websocketEndpointManager=getServer().websocketCreateEndpoint(endpointId,websocketEndpointHandler);        getWebsocketRoute().getWebsocketController().onEndpointReady(websocketEndpointManager);      }    }  }  getServer().websocketConnection(context.exchange(),endpointId,peerId);  throw new SkipRemainingHandlersException();}  }
class C{  public static final Index createTestBankIndexCountryName(){  Index lastname=new Index("countryname");  lastname.isUnique(false);  ArrayList<IndexField> fields=new ArrayList<>(1);  fields.add(new IndexField("countryshortname"));  lastname.setFields(fields);  lastname.setTable(Fixtures.createTestWorldBankTable());  return lastname;}  }
