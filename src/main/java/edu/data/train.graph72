class C{  public void terminateSubscription(long supplierKey,VOSubscription voSubscription,String reason) throws Exception {  container.login(supplierKey,UserRoleType.SERVICE_MANAGER.name());  subscriptionService.terminateSubscription(voSubscription,reason);}  }
class C{  private void forceNSDecls(){  Enumeration prefixes=forcedDeclTable.keys();  while (prefixes.hasMoreElements()) {    String prefix=(String)prefixes.nextElement();    doPrefix(prefix,null,true);  }}  }
class C{  public Value predecessor(){  return predecessor.get();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEScrollBarUI();}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  public void initialize(String nodeId,long version,long expectedShardSize){  innerRemove();  nodes.initialize(new ShardRouting(current,version),nodeId,expectedShardSize);}  }
class C{  public static void report(String what,long time){  VM.sysWrite(what);  if (what.length() < 8) {    VM.sysWrite('\t');  }  if (what.length() < 16) {    VM.sysWrite('\t');  }  VM.sysWrite('\t' + time + " ms");}  }
class C{  public boolean isParseStatusDirty(org.apache.nutch.storage.ParseStatus value){  throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_ENTRY_OR_EXIT_ACTION_2__MORE_CODE_1:    getMoreCode_1().clear();  getMoreCode_1().addAll((Collection<? extends MoreCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void wait(int src,Predicate p){  entities.get(src).setState(SimEntity.WAITING);  if (p != SIM_ANY) {    waitPredicates.put(src,p);  }}  }
class C{  private boolean cloneAllAllocsOfClass(SootClass currentClass,AllocationGraph aGraph){  if (originalToCloneMap.keySet().contains(currentClass) || isClonedClass(currentClass)) {    logger.error("Trying to clone allocs for already cloned class: {}",currentClass);    droidsafe.main.Main.exit(1);  }  boolean haveCloned=false;  HashMap<SootMethod,List<AssignStmt>> allocs=(HashMap<SootMethod,List<AssignStmt>>)allocStmts.clone();  for (  Map.Entry<SootMethod,List<AssignStmt>> entry : allocs.entrySet()) {    SootMethod method=entry.getKey();    List<AssignStmt> assigns=entry.getValue();    for (    AssignStmt assign : assigns) {      NewExpr newExpr=(NewExpr)assign.getRightOp();      SootClass base=newExpr.getBaseType().getSootClass();      String baseClassName=base.getName();      if (!currentClass.equals(base))       continue;      logger.info("Found new expr to replace and clone class: {} {}\n",method,assign);      try {        Set<Local> local=new HashSet<Local>();        local.add((Local)assign.getLeftOp());        Body body=method.getActiveBody();        StmtBody stmtBody=(StmtBody)body;        Chain units=stmtBody.getUnits();        Stmt specialStmt=TransformsUtils.findConstructorCall(method,(Stmt)units.getSuccOf(assign),local);        if (specialStmt.containsInvokeExpr() && specialStmt.getInvokeExpr() instanceof SpecialInvokeExpr) {          SpecialInvokeExpr special=(SpecialInvokeExpr)specialStmt.getInvokeExpr();          ClassCloner cCloner=ClassCloner.cloneClassAndInheritedMethods(base,false);          SootClass cloned=cCloner.getClonedClass();          addToAllocList(cCloner.getReachableClonedMethods());          rememberCloneContext(cCloner.getCloneToOriginalMap());          SootMethodRef origMethodRef=special.getMethodRef();          special.setMethodRef(Scene.v().makeMethodRef(cloned,origMethodRef.name(),origMethodRef.parameterTypes(),origMethodRef.returnType(),origMethodRef.isStatic()));          newExpr.setBaseType(RefType.v(cloned));          numClonedClasses++;          cloneToOriginalMap.put(cloned,currentClass);          if (!originalToCloneMap.containsKey(currentClass))           originalToCloneMap.put(currentClass,new HashSet<SootClass>());          originalToCloneMap.get(currentClass).add(cloned);          haveCloned=true;        } else {          throw new Exception("Special Invoke Not Found!");        }      } catch (      Exception e) {        logger.info("Error processing constructor call after modifying new expr: {} in {}",assign,method,e);        cloneErrors++;      }    }  }  return haveCloned;}  }
class C{  public boolean hasImplemented(){  return hasSource(IMPLEMENTED);}  }
class C{  public void clearGenericFontFamilies(){  genericFontFamilies=null;}  }
class C{  public static void notUsDollar(PSITypeLister typeLister,FlagConfig flagConfig) throws ZeroVectorException {  Vector dollar=typeLister.semanticVectors.getVector("united_states_dollar");  Vector usesCurrency=typeLister.predicateVectors.getVector("HAS_CURRENCY-INV");  Vector countryUsesDollar=dollar.copy();  countryUsesDollar.release(usesCurrency);  System.out.println("Results without negation ...");  VectorSearcher searcher=new VectorSearcherCosine(typeLister.elementalVectors,typeLister.elementalVectors,null,typeLister.flagConfig,countryUsesDollar);  for (  SearchResult result : searcher.getNearestNeighbors(flagConfig.numsearchresults())) {    System.out.println(result.toTexTableString(20));  }  ArrayList<Vector> setToNegate=new ArrayList<>();  Vector usa=typeLister.elementalVectors.getVector("united_states");  setToNegate.add(usa);  setToNegate.add(countryUsesDollar);  VectorUtils.orthogonalizeVectors(setToNegate);  countryUsesDollar.normalize();  System.out.println("Results with negation ...");  searcher=new VectorSearcherCosine(typeLister.elementalVectors,typeLister.elementalVectors,null,typeLister.flagConfig,countryUsesDollar);  for (  SearchResult result : searcher.getNearestNeighbors(flagConfig.numsearchresults())) {    System.out.println(result.toTexTableString(20));  }}  }
class C{  public DSAPublicKeyImpl(X509EncodedKeySpec keySpec) throws InvalidKeySpecException {  super("DSA");  AlgorithmIdentifier ai;  ThreeIntegerSequence threeInts=null;  SubjectPublicKeyInfo subjectPublicKeyInfo=null;  byte[] encoding=keySpec.getEncoded();  String alg, algName;  try {    subjectPublicKeyInfo=(SubjectPublicKeyInfo)SubjectPublicKeyInfo.ASN1.decode(encoding);  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode keySpec encoding: " + e);  }  try {    y=new BigInteger((byte[])ASN1Integer.getInstance().decode(subjectPublicKeyInfo.getSubjectPublicKey()));  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  ai=subjectPublicKeyInfo.getAlgorithmIdentifier();  try {    threeInts=(ThreeIntegerSequence)ThreeIntegerSequence.ASN1.decode(ai.getParameters());  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  p=new BigInteger(threeInts.p);  q=new BigInteger(threeInts.q);  g=new BigInteger(threeInts.g);  params=(DSAParams)(new DSAParameterSpec(p,q,g));  setEncoding(encoding);  alg=ai.getAlgorithm();  algName=AlgNameMapper.map2AlgName(alg);  setAlgorithm(algName == null ? alg : algName);}  }
class C{  public boolean isOK(){  return m_ok;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void run(){  ConnectionTable.threadWantsSharedResources();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"Starting P2P Listener on  {}",id);  }  for (; ; ) {    SystemFailure.checkFailure();    if (stopper.isCancelInProgress()) {      break;    }    if (stopped) {      break;    }    if (Thread.currentThread().isInterrupted()) {      break;    }    if (stopper.isCancelInProgress()) {      break;    }    Socket othersock=null;    try {      if (this.useNIO) {        SocketChannel otherChannel=channel.accept();        othersock=otherChannel.socket();      } else {        try {          othersock=socket.accept();        } catch (        SSLException ex) {          logger.warn(LocalizedMessage.create(LocalizedStrings.TCPConduit_STOPPING_P2P_LISTENER_DUE_TO_SSL_CONFIGURATION_PROBLEM),ex);          break;        }        socketCreator.configureServerSSLSocket(othersock);      }      if (stopped) {        try {          if (othersock != null) {            othersock.close();          }        } catch (        Exception e) {        }        continue;      }      acceptConnection(othersock);    } catch (    ClosedByInterruptException cbie) {    }catch (    ClosedChannelException e) {      break;    }catch (    CancelException e) {      break;    }catch (    Exception e) {      if (!stopped) {        if (e instanceof SocketException && "Socket closed".equalsIgnoreCase(e.getMessage())) {          if (!socket.isClosed()) {            logger.warn(LocalizedMessage.create(LocalizedStrings.TCPConduit_SERVERSOCKET_THREW_SOCKET_CLOSED_EXCEPTION_BUT_SAYS_IT_IS_NOT_CLOSED),e);            try {              socket.close();              createServerSocket();            } catch (            IOException ioe) {              logger.fatal(LocalizedMessage.create(LocalizedStrings.TCPConduit_UNABLE_TO_CLOSE_AND_RECREATE_SERVER_SOCKET),ioe);              try {                Thread.sleep(5000);              } catch (              InterruptedException ie) {                logger.info(LocalizedMessage.create(LocalizedStrings.TCPConduit_INTERRUPTED_AND_EXITING_WHILE_TRYING_TO_RECREATE_LISTENER_SOCKETS));                return;              }            }          }        } else {          this.stats.incFailedAccept();          if (e instanceof IOException && "Too many open files".equals(e.getMessage())) {            getConTable().fileDescriptorsExhausted();          } else {            logger.warn(e.getMessage(),e);          }        }      }    }    if (!stopped && socket.isClosed()) {      logger.warn(LocalizedMessage.create(LocalizedStrings.TCPConduit_SERVERSOCKET_CLOSED_REOPENING));      try {        createServerSocket();      } catch (      ConnectionException ex) {        logger.warn(ex.getMessage(),ex);      }    }  }  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.debug("Stopped P2P Listener on  {}",id);  }}  }
class C{  @Override public final boolean sendValues(){  return true;}  }
class C{  private void initComponents(){  toolButtonGroup=new javax.swing.ButtonGroup();}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public NetworkSelectionModel(final NetworkPanel networkPanel){  adjusting=false;  selection=new CopyOnWriteArraySet();  this.networkPanel=networkPanel;  listenerList=new EventListenerList();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.EXPRESSION__LEFT:    return left != null;case GamlPackage.EXPRESSION__OP:  return OP_EDEFAULT == null ? op != null : !OP_EDEFAULT.equals(op);case GamlPackage.EXPRESSION__RIGHT:return right != null;}return super.eIsSet(featureID);}  }
class C{  public synchronized boolean isSubsetOfSet(NSSet otherSet){  for (  NSObject o : set) {    if (!otherSet.containsObject(o))     return false;  }  return true;}  }
class C{  boolean alwaysOnTop(){  return true;}  }
class C{  public ImageFileFilter(String description){  desc=description;}  }
class C{  @RequestProcessing(value="/status",method=HTTPRequestMethod.GET) public void reportStatus(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws Exception {  final String key=Symphonys.get("keyOfSymphony");  if (!key.equals(request.getParameter("key"))) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  final JSONObject ret=new JSONObject();  context.renderJSON(ret);  ret.put(Common.ONLINE_VISITOR_CNT,optionQueryService.getOnlineVisitorCount());  ret.put(Common.ARTICLE_CHANNEL_CNT,ArticleChannel.SESSIONS.size());  ret.put(Common.ARTICLE_LIST_CHANNEL_CNT,ArticleListChannel.SESSIONS.size());  final JSONObject memory=new JSONObject();  ret.put("memory",memory);  final int mb=1024 * 1024;  final Runtime runtime=Runtime.getRuntime();  memory.put("totoal",runtime.totalMemory() / mb);  memory.put("free",runtime.freeMemory() / mb);  memory.put("used",(runtime.totalMemory() - runtime.freeMemory()) / mb);  memory.put("max",runtime.maxMemory() / mb);  LOGGER.info(ret.toString(SymphonyServletListener.JSON_PRINT_INDENT_FACTOR));  ret.put(Keys.STATUS_CODE,true);}  }
class C{  protected BNode parseNodeID() throws IOException, RDFParseException {  verifyCharacterOrFail(read(),"_");  verifyCharacterOrFail(read(),":");  int c=read();  if (c == -1) {    throwEOFException();  }  StringBuilder name=new StringBuilder(32);  name.append((char)c);  c=read();  if (!TurtleUtil.isNameChar(c)) {    unread(c);  }  while (TurtleUtil.isNameChar(c)) {    int previous=c;    c=read();    if (previous == '.' && (c == -1 || TurtleUtil.isWhitespace(c) || c == '<' || c == '_')) {      unread(c);      unread(previous);      break;    }    name.append((char)previous);    if (!TurtleUtil.isNameChar(c)) {      unread(c);    }  }  return createBNode(name.toString());}  }
class C{  public RegistrationContextMessage(Instantiator s){  this.instantiatorClass=s.getClass();  this.instantiatedClass=s.getInstantiatedClass();  this.id=s.getId();  this.eventId=(EventID)s.getEventId();  this.context=(ClientProxyMembershipID)s.getContext();}  }
class C{  public static ColumnSpec decode(String encodedColumnSpec,LayoutMap layoutMap){  checkNotBlank(encodedColumnSpec,"The encoded column specification must not be null, empty or whitespace.");  checkNotNull(layoutMap,"The LayoutMap must not be null.");  String trimmed=encodedColumnSpec.trim();  String lower=trimmed.toLowerCase(Locale.ENGLISH);  return decodeExpanded(layoutMap.expand(lower,true));}  }
class C{  public void addRemoteExperimentListener(RemoteExperimentListener r){  m_listeners.add(r);}  }
class C{  public static Relay relay(int relayPort){  return relayRegistrar.fetch(relayPort,Relay.class,null);}  }
class C{  public NodesInfoRequest clear(){  settings=false;  os=false;  process=false;  jvm=false;  threadPool=false;  transport=false;  http=false;  plugins=false;  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ENUM___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.ENUM___STATE_NAME_1:setStateName_1((String)newValue);return;case UmplePackage.ENUM___ANONYMOUS_ENUM_11:getAnonymous_enum_1_1().clear();getAnonymous_enum_1_1().addAll((Collection<? extends Anonymous_enum_1_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public SelectedGroup<T> useAll(){  return new SelectedGroup<>(all);}  }
class C{  public static Method methodFromName(String fullyQualifiedMethodName,Class[] parameterTypes) throws ClassNotFoundException, NoSuchMethodException, SecurityException {  int classIndex=fullyQualifiedMethodName.lastIndexOf('.');  if (classIndex <= 0) {    throw new ClassNotFoundException("Static creation function [" + fullyQualifiedMethodName + "] should be fully qualified");  }  String className=fullyQualifiedMethodName.substring(0,classIndex);  if (checkForPrimType(className) != null) {    throw new NoSuchMethodException(className + " cannot be one of the primitive types");  }  String methodName=fullyQualifiedMethodName.substring(classIndex + 1);  Class result=ClassPathLoader.getLatest().forName(className);  return result.getMethod(methodName,parameterTypes);}  }
class C{  public static <T,S>ResourceList<T> xenonQueryResultToResourceList(Class<S> documentType,ServiceDocumentQueryResult queryResult,Function<S,T> convert){  List<T> documents=new ArrayList<>();  if (queryResult.documentLinks != null) {    for (    String link : queryResult.documentLinks) {      documents.add(convert.apply(Utils.fromJson(queryResult.documents.get(link),documentType)));    }  }  ResourceList<T> resourceList=new ResourceList<>();  resourceList.setItems(documents);  resourceList.setNextPageLink(queryResult.nextPageLink);  resourceList.setPreviousPageLink(queryResult.prevPageLink);  return resourceList;}  }
class C{  public void load() throws CouldntLoadDataException, PartialLoadException {  if (isLoaded()) {    return;  }  try {    naviView.load();  } catch (  com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDataException|LoadCancelledException e) {    throw new CouldntLoadDataException(e);  }catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CPartialLoadException e) {    throw new PartialLoadException(e);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.174 -0500",hash_original_method="910C3A78FCE0B1E574FD9CA74D1EE7A9",hash_generated_method="D28FE7594F08537D0E73353BED18B374") private void didReceiveIcon(Bitmap icon){  mCallbackProxy.onReceivedIcon(icon);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  private void validateTypeNotIn(TypeMirror t,Set<TypeKind> invalidKinds){  if (invalidKinds.contains(t.getKind()))   throw new IllegalArgumentException(t.toString());}  }
class C{  public Anonymous_linkingOp_1_ createAnonymous_linkingOp_1_(){  Anonymous_linkingOp_1_Impl anonymous_linkingOp_1_=new Anonymous_linkingOp_1_Impl();  return anonymous_linkingOp_1_;}  }
class C{  public Program mapRuleForTruthMaintenance(final IRule rule,final String focusStore){  if (rule == null)   throw new IllegalArgumentException();  if (focusStore == null)   throw new IllegalArgumentException();  final List<IRule> rules=new LinkedList<IRule>();  final int tailCount=rule.getTailCount();  if (rule.getHead() == null)   throw new IllegalArgumentException("No head for this rule: rule=" + rule);  final IPredicate<?> head;  if (rule.getHead() instanceof SPOPredicate) {    head=rule.getHead().setRelationName(new String[]{focusStore});  } else {    head=rule.getHead();  }  final IPredicate[] tail=new IPredicate[tailCount];{    final Iterator<IPredicate> itr=rule.getTail();    int i=0;    while (itr.hasNext()) {      tail[i++]=itr.next();    }  }  final IConstraint[] constraints;{    final int constraintCount=rule.getConstraintCount();    if (constraintCount > 0) {      constraints=new IConstraint[constraintCount];      final Iterator<IConstraint> itr=rule.getConstraints();      int i=0;      while (itr.hasNext()) {        constraints[i++]=itr.next();      }    } else {      constraints=null;    }  }  for (int i=0; i < tailCount; i++) {    final IPredicate[] tail2=new IPredicate[tailCount];    for (int j=0; j < tailCount; j++) {      final IPredicate<?> p=tail[j];      final IPredicate<?> p2;      if (p instanceof SPOPredicate) {        if (i == j || tailCount == 1) {          p2=p.setRelationName(new String[]{focusStore});        } else {          p2=p.setRelationName(new String[]{p.getOnlyRelationName(),focusStore});        }      } else {        p2=p;      }      tail2[j]=p2;    }    final Rule newRule=new Rule(rule.getName() + "[" + i+ "]",head,tail2,rule.getQueryOptions(),constraints,rule.getConstants(),rule.getTaskFactory());    rules.add(newRule);  }  final Program program=new Program(rule.getName(),parallel);  program.addSteps(rules.iterator());  return program;}  }
class C{  public boolean readBit() throws IOException {  if (bitField == -1) {    bitField=in.read();    if (bitField == -1) {      throw new EOFException();    }    mask=1;  }  boolean bit=(bitField & mask) != 0;  if ((mask<<=1) == 0x100) {    bitField=-1;  }  return bit;}  }
class C{  private CEdgeDrawingFunctions(){}  }
class C{  public static String dumpAsString(Object obj){  return dumpAsString(obj,false);}  }
class C{  public Double zincrby(final byte[] key,final double score,final byte[] member){  checkIsInMulti();  client.zincrby(key,score,member);  String newscore=client.getBulkReply();  return Double.valueOf(newscore);}  }
class C{  private void stopChristmas(Player admin){  if (System.getProperty("stendhal.santa") == null) {    admin.sendPrivateText("Santa is not active.");    return;  }  System.getProperties().remove("stendhal.santa");  StendhalQuestSystem.get().unloadQuest(MeetSanta.QUEST_NAME);}  }
class C{  public void testLengthConstructor(){  int len=22;  AlgVector v=new AlgVector(len);  assertEquals("Length differs",len,v.numElements());}  }
class C{  @Override public V waitForValue() throws ExecutionException {  if (computedReference == UNSET) {    boolean interrupted=false;    try {synchronized (this) {        while (computedReference == UNSET) {          try {            wait();          } catch (          InterruptedException ie) {            interrupted=true;          }        }      }    }  finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }  return computedReference.waitForValue();}  }
class C{  private synchronized void notifyPendingChange(){  notifyAll();}  }
class C{  public JSONStringer(){  super(new StringWriter());}  }
class C{  public void doHandshake(final NextFilter nextFilter) throws ProxyAuthException {  logger.debug(" doHandshake()");  if (authHandler != null) {    authHandler.doHandshake(nextFilter);  } else {    if (requestSent) {      throw new ProxyAuthException("Authentication request already sent");    }    logger.debug("  sending HTTP request");    HttpProxyRequest req=(HttpProxyRequest)getProxyIoSession().getRequest();    Map<String,List<String>> headers=req.getHeaders() != null ? req.getHeaders() : new HashMap<String,List<String>>();    AbstractAuthLogicHandler.addKeepAliveHeaders(headers);    req.setHeaders(headers);    writeRequest(nextFilter,req);    requestSent=true;  }}  }
class C{  private AnalyticsUtil(){  instanceNotAllowed(getClass());}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  public InactivePeerException(final String message){  super(message);}  }
class C{  protected BytesRef encode(IntsRef ordinals){  return facetsConfig.dedupAndEncode(ordinals);}  }
class C{  public DistributionLocator addDistributionLocator(){  DistributionLocatorConfig conf=new DistributionLocatorConfigImpl();  DistributionLocator locator=createDistributionLocatorImpl(conf);synchronized (this.locatorSet) {    this.locatorSet.add(new FutureResult(locator));  }  setLocators(parseLocatorSet());  return locator;}  }
class C{  public static String fromCacheOrNew(String s){  if (!SysProperties.OBJECT_CACHE) {    return s;  }  if (s == null) {    return null;  } else   if (s.length() == 0) {    return "";  }  int hash=s.hashCode();  String[] cache=getCache();  int index=hash & (SysProperties.OBJECT_CACHE_SIZE - 1);  if (cache == null) {    return s;  }  String cached=cache[index];  if (cached != null) {    if (s.equals(cached)) {      return cached;    }  }  s=new String(s);  cache[index]=s;  return s;}  }
class C{  public int maxConnections(){  return maxConnections;}  }
class C{  public void removeAtRange(int index,int size){  final int end=Math.min(mSize,index + size);  for (int i=index; i < end; i++) {    removeAt(i);  }}  }
class C{  public CMTest(String name){  super(name);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isCompleteAt(int length){  if (mImageFormat != DefaultImageFormats.JPEG) {    return true;  }  if (mInputStreamSupplier != null) {    return true;  }  Preconditions.checkNotNull(mPooledByteBufferRef);  PooledByteBuffer buf=mPooledByteBufferRef.get();  return (buf.read(length - 2) == (byte)JfifUtil.MARKER_FIRST_BYTE) && (buf.read(length - 1) == (byte)JfifUtil.MARKER_EOI);}  }
class C{  public static TransportNetwork buildNetwork(TransitNetwork... networks){  try {    File osmFile=File.createTempFile("columbus",".osm.pbf");    InputStream is=new BufferedInputStream(FakeGraph.class.getResourceAsStream("columbus.osm.pbf"));    OutputStream os=new BufferedOutputStream(new FileOutputStream(osmFile));    ByteStreams.copy(is,os);    is.close();    os.close();    List<File> filesToDelete=new ArrayList<>();    filesToDelete.add(osmFile);    List<String> gtfsFiles=new ArrayList<>();    for (    TransitNetwork network : networks) {      File gtfsFile=File.createTempFile(network.toString(),".gtfs.zip");      network.get().toFile(gtfsFile.getAbsolutePath());      filesToDelete.add(gtfsFile);      gtfsFiles.add(gtfsFile.getAbsolutePath());    }    TransportNetwork net=TransportNetwork.fromFiles(osmFile.getAbsolutePath(),gtfsFiles,new TNBuilderConfig());    filesToDelete.forEach(null);    return net;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void preorder(TreeNode<E> root){  if (root == null)   return;  list.add(root.element);  preorder(root.left);  preorder(root.right);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void exportProperties() throws IOException {  prepare();  final AbstractTripleStore kb=conn.getTripleStore();  final StringBuilder comments=new StringBuilder("Configuration properties.\n");  if (kb.getIndexManager() instanceof IRawStore) {    comments.append("source=" + ((IRawStore)kb.getIndexManager()).getFile() + "\n");    comments.append("namespace=" + namespace + "\n");    comments.append("timestamp=" + kb.getTimestamp() + "\n");    comments.append("fastStatementCount=" + kb.getStatementCount(false) + "\n");    comments.append("uriCount=" + kb.getURICount() + "\n");    comments.append("literalCount=" + kb.getLiteralCount() + "\n");    comments.append("bnodeCount=" + kb.getBNodeCount() + "\n");  }  final Properties properties=flatCopy(kb.getProperties());  final File file=new File(kbdir,"kb.properties");  System.out.println("Writing " + file);  final OutputStream os=new BufferedOutputStream(new FileOutputStream(file));  try {    properties.store(os,comments.toString());  }  finally {    os.close();  }}  }
class C{  public long node(){  if (version() != 1) {    throw new UnsupportedOperationException("Not a time-based UUID");  }  return leastSigBits & 0x0000FFFFFFFFFFFFL;}  }
class C{  @Override public void start(){  super.start();  final GameData data=getData();  if (!m_needToInitialize) {    return;  }  final Map<PlayerID,Collection<TechAdvance>> techMap=DelegateFinder.techDelegate(data).getAdvances();  final Collection<TechAdvance> advances=techMap.get(m_player);  if ((advances != null) && (advances.size() > 0)) {    m_bridge.getHistoryWriter().startEvent(m_player.getName() + " activating " + advancesAsString(advances));    for (    final TechAdvance advance : advances) {      TechTracker.addAdvance(m_player,m_bridge,advance);    }  }  techMap.put(m_player,null);  if (games.strategy.triplea.Properties.getTriggers(data)) {    final Match<TriggerAttachment> techActivationDelegateTriggerMatch=new CompositeMatchAnd<>(TriggerAttachment.availableUses,TriggerAttachment.whenOrDefaultMatch(null,null),new CompositeMatchOr<TriggerAttachment>(TriggerAttachment.unitPropertyMatch(),TriggerAttachment.techMatch(),TriggerAttachment.supportMatch()));    final HashSet<TriggerAttachment> toFirePossible=TriggerAttachment.collectForAllTriggersMatching(new HashSet<>(Collections.singleton(m_player)),techActivationDelegateTriggerMatch,m_bridge);    if (!toFirePossible.isEmpty()) {      final HashMap<ICondition,Boolean> testedConditions=TriggerAttachment.collectTestsForAllTriggers(toFirePossible,m_bridge);      final Set<TriggerAttachment> toFireTestedAndSatisfied=new HashSet<>(Match.getMatches(toFirePossible,TriggerAttachment.isSatisfiedMatch(testedConditions)));      TriggerAttachment.triggerUnitPropertyChange(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);      TriggerAttachment.triggerTechChange(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);      TriggerAttachment.triggerSupportChange(toFireTestedAndSatisfied,m_bridge,null,null,true,true,true,true);    }  }  shareTechnology();  m_needToInitialize=false;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.148 -0500",hash_original_method="D747170A7F04B613231E2142802ABE4F",hash_generated_method="06E36CF176CAA6C02E3009ABCB7C47D7") public static void sort(int[] array){  DualPivotQuicksort.sort(array);}  }
class C{  protected void writeBytes(byte[] bytes) throws IOException {  this.bytes=bytes;}  }
class C{  public String splitEvaluatorTipText(){  return "The evaluator to apply to the test data. " + "This may be a classifier, regression scheme etc.";}  }
class C{  public void close() throws AdeInternalException {  if (dbConnection != null) {    try {      dbConnection.close();    } catch (    SQLException e) {      throw new AdeInternalException("Failed closing connection ",e);    } finally {      dbConnection=null;    }  }  if (embeddedDBConnection != null) {    closeEmbeddedDBConnection();  }}  }
class C{  public void add(PropertyEvalAtom atom){  atoms.add(atom);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof symbol_set))   return false; else   return equals((symbol_set)other);}  }
class C{  public boolean validateEmbedAction() throws OpenStegoException {  return true;}  }
class C{  public void normalizeRow(int nodeIndex,final int rowIndex){  final int numColumns=getNumColumns(nodeIndex);  double total=0.0;  for (int colIndex=0; colIndex < numColumns; colIndex++) {    total+=getProbability(nodeIndex,rowIndex,colIndex);  }  if (total != 0.0) {    for (int colIndex=0; colIndex < numColumns; colIndex++) {      double probability=getProbability(nodeIndex,rowIndex,colIndex);      double prob=probability / total;      setProbability(nodeIndex,rowIndex,colIndex,prob);    }  } else {    double prob=1.0 / numColumns;    for (int colIndex=0; colIndex < numColumns; colIndex++) {      setProbability(nodeIndex,rowIndex,colIndex,prob);    }  }}  }
class C{  @Override public synchronized boolean removeAll(Collection<?> collection){  return super.removeAll(collection);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void validate() throws MessageException {  super.validate();  AssociationSessionType type;  try {    type=getType();    if (type.isVersion2() != isVersion2()) {      throw new MessageException("Protocol verison mismatch " + "between association session type: " + type + " and AssociationRequest message type.",OpenIDException.ASSOC_ERROR);    }  } catch (  AssociationException e) {    throw new MessageException("Error verifying association request validity.",OpenIDException.ASSOC_ERROR,e);  }  if (!isVersion2() && getSessionType() == null) {    throw new MessageException("sess_type cannot be omitted in OpenID1 association requests",OpenIDException.ASSOC_ERROR);  }  if (type.getHAlgorithm() != null && getDhPublicKey() == null) {    throw new MessageException("DH consumer public key not specified.",OpenIDException.ASSOC_ERROR);  }  if (type.getHAlgorithm() == null && (getDhGen() != null || getDhModulus() != null || getDhPublicKey() != null)) {    throw new MessageException("No-encryption session, but DH parameters specified.",OpenIDException.ASSOC_ERROR);  }}  }
class C{  public NetworkTimeStamp(final long timeStamp){  super(timeStamp,NetworkTimeStamp.class);}  }
class C{  @Override protected void controllerCheckAfterCrash() throws SQLException {  Statement stat=conn.createStatement();  ResultSet rs=stat.executeQuery("SELECT COUNT(*) FROM TEST");  rs.next();  int count=rs.getInt(1);  System.out.println("count: " + count);  if (count % 2 != 0) {    traceOperation("row count: " + count);    throw new SQLException("Unexpected odd row count: " + count);  }}  }
class C{  public static boolean isWhiteSpace(StringBuffer buf){  int n=buf.length();  for (int i=0; i < n; i++) {    if (!isWhiteSpace(buf.charAt(i)))     return false;  }  return true;}  }
class C{  public static String ensureFileEndsWith(String filename,String ending){  if (filename.regionMatches(false,filename.length() - ending.length(),ending,0,ending.length()))   return filename; else   return filename + ending;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.623 -0500",hash_original_method="EB800BB0EE5BEF185F11F0CA48ECBE70",hash_generated_method="9F673CA79464E8D7D448ED1AD5F9D034") public boolean onKeyEvent(KeyEvent event){  if (isEnterActionKey(event.getKeyCode())) {    return false;  }  if (event.getAction() == KeyEvent.ACTION_UP) {    return mLastDownEventHandled;  }  mLastDownEventHandled=false;  AccessibilityWebContentKeyBinding binding=null;  for (  AccessibilityWebContentKeyBinding candidate : sBindings) {    if (event.getKeyCode() == candidate.getKeyCode() && event.hasModifiers(candidate.getModifiers())) {      binding=candidate;      break;    }  }  if (binding == null) {    return false;  }  for (int i=0, count=binding.getActionCount(); i < count; i++) {    int actionCode=binding.getActionCode(i);    String contentDescription=Integer.toHexString(binding.getAction(i));switch (actionCode) {case ACTION_SET_CURRENT_AXIS:      int axis=binding.getFirstArgument(i);    boolean sendEvent=(binding.getSecondArgument(i) == 1);  setCurrentAxis(axis,sendEvent,contentDescription);mLastDownEventHandled=true;break;case ACTION_TRAVERSE_CURRENT_AXIS:int direction=binding.getFirstArgument(i);if (direction == mLastDirection && mIsLastSelectionStringNull) {mIsLastSelectionStringNull=false;return false;}mLastDirection=direction;sendEvent=(binding.getSecondArgument(i) == 1);mLastDownEventHandled=traverseCurrentAxis(direction,sendEvent,contentDescription);break;case ACTION_TRAVERSE_GIVEN_AXIS:direction=binding.getFirstArgument(i);if (direction == mLastDirection && mIsLastSelectionStringNull) {mIsLastSelectionStringNull=false;return false;}mLastDirection=direction;axis=binding.getSecondArgument(i);sendEvent=(binding.getThirdArgument(i) == 1);traverseGivenAxis(direction,axis,sendEvent,contentDescription);mLastDownEventHandled=true;break;case ACTION_PERFORM_AXIS_TRANSITION:int fromAxis=binding.getFirstArgument(i);int toAxis=binding.getSecondArgument(i);sendEvent=(binding.getThirdArgument(i) == 1);prefromAxisTransition(fromAxis,toAxis,sendEvent,contentDescription);mLastDownEventHandled=true;break;case ACTION_TRAVERSE_DEFAULT_WEB_VIEW_BEHAVIOR_AXIS:if (mCurrentAxis == NAVIGATION_AXIS_DEFAULT_WEB_VIEW_BEHAVIOR) {mLastDirection=binding.getFirstArgument(i);sendEvent=(binding.getSecondArgument(i) == 1);traverseGivenAxis(mLastDirection,NAVIGATION_AXIS_DEFAULT_WEB_VIEW_BEHAVIOR,sendEvent,contentDescription);mLastDownEventHandled=false;} else {mLastDownEventHandled=true;}break;default :Log.w(LOG_TAG,"Unknown action code: " + actionCode);}}return mLastDownEventHandled;}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (Decimal.class.equals(targetType)) {    rVal=true;  }  return (rVal);}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  public FireworkEffectBuilder withTrail(){  this.trail=true;  return this;}  }
class C{  public void mouseClicked(MouseEvent e){  if (!e.isConsumed()) {    RTextArea textArea=getTextArea();    int nclicks=e.getClickCount();    if (SwingUtilities.isLeftMouseButton(e)) {      if (nclicks <= 2) {        if (IS_JAVA_1_4) {          if (nclicks == 1) {            selectedWordEvent=null;          } else {            selectWord(e);            selectedWordEvent=null;          }        }      } else {        nclicks%=2;switch (nclicks) {case 0:          selectWord(e);        selectedWordEvent=null;      break;case 1:    Action a=null;  ActionMap map=textArea.getActionMap();if (map != null) a=map.get(RTextAreaEditorKit.selectLineAction);if (a == null) {if (selectLine == null) {  selectLine=new RTextAreaEditorKit.SelectLineAction();}a=selectLine;}a.actionPerformed(new ActionEvent(textArea,ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));}}} else if (SwingUtilities.isMiddleMouseButton(e)) {if (nclicks == 1 && textArea.isEditable() && textArea.isEnabled()) {JTextComponent c=(JTextComponent)e.getSource();if (c != null) {try {Toolkit tk=c.getToolkit();Clipboard buffer=tk.getSystemSelection();if (buffer != null) {adjustCaret(e);TransferHandler th=c.getTransferHandler();if (th != null) {Transferable trans=buffer.getContents(null);if (trans != null) th.importData(c,trans);}adjustFocus(true);} else {textArea.paste();}} catch (HeadlessException he) {}}}}}}  }
class C{  public synchronized StringBuffer delete(int start,int end){  delete0(start,end);  return this;}  }
class C{  public Builder bySetPos(Integer... positions){  return bySetPos(Arrays.asList(positions));}  }
class C{  public void clearChangedValue(String field){  if (_changed != null) {    _changed.remove(field);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected Shape stroke(Shape line){  if (line == null) {    return null;  }  Stroke stroke=getStroke();  Shape lineShape=stroke.createStrokedShape(line);  return lineShape;}  }
class C{  @GET @Path("table/{tableName}/schema") @Consumes(Servlets.JSON_MEDIA_TYPE) @Produces(Servlets.JSON_MEDIA_TYPE) public Response schema(@Context HttpServletRequest request,@PathParam("tableName") String tableName){  LOG.info("Fetching schema for tableName={}",tableName);  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"DataSetLineageResource.schema(" + tableName + ")");    }    final String jsonResult=lineageService.getSchema(tableName);    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put("tableName",tableName);    response.put(AtlasClient.RESULTS,new JSONObject(jsonResult));    return Response.ok(response).build();  } catch (  EntityNotFoundException e) {    LOG.error("table entity not found for {}",tableName);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.NOT_FOUND));  }catch (  DiscoveryException|IllegalArgumentException e) {    LOG.error("Unable to get schema for table {}",tableName,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to get schema for table {}",tableName,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  @Transactional public void addCommentNotification(final JSONObject requestJSONObject) throws ServiceException {  try {    requestJSONObject.put(Notification.NOTIFICATION_DATA_TYPE,Notification.DATA_TYPE_C_COMMENT);    addNotification(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds notification [type=comment] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  private static long longGCD(long a,long b){  while (b > 0) {    long temp=b;    b=a % b;    a=temp;  }  return a;}  }
class C{  private static void fillCallerData(String callerFQCN,LogRecord record){  StackTraceElement[] steArray=new Throwable().getStackTrace();  int selfIndex=-1;  for (int i=0; i < steArray.length; i++) {    final String className=steArray[i].getClassName();    if (className.equals(callerFQCN) || className.equals(SUPER)) {      selfIndex=i;      break;    }  }  int found=-1;  for (int i=selfIndex + 1; i < steArray.length; i++) {    final String className=steArray[i].getClassName();    if (!(className.equals(callerFQCN) || className.equals(SUPER))) {      found=i;      break;    }  }  if (found != -1) {    StackTraceElement ste=steArray[found];    record.setSourceClassName(ste.getClassName());    record.setSourceMethodName(ste.getMethodName());  }}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  inorder(root.left);  System.out.print(root.element + " ");  inorder(root.right);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.217 -0400",hash_original_method="8752F68D48E0E30171A3505F074FD7CA",hash_generated_method="DF020307F5580C93864A55F8DCFB6283") @Override public boolean onPreparePanel(int featureId,View view,Menu menu){  if (featureId == Window.FEATURE_OPTIONS_PANEL && menu != null) {    if (mOptionsMenuInvalidated) {      mOptionsMenuInvalidated=false;      menu.clear();      onCreatePanelMenu(featureId,menu);    }    boolean goforit=onPrepareOptionsPanel(view,menu);    goforit|=mFragments.dispatchPrepareOptionsMenu(menu);    return goforit;  }  return super.onPreparePanel(featureId,view,menu);}  }
class C{  public void writeLine(String s) throws IOException {  this.writeString(s);  this.writeByte((byte)'\n');}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  private void updateStatus(){  String statusText;  if (game.isTerminal(currState))   if (game.getUtility(currState,TicTacToeState.X) == 1)   statusText="X has won :-)"; else   if (game.getUtility(currState,TicTacToeState.O) == 1)   statusText="O has won :-)"; else   statusText="No winner..."; else   statusText="Next move: " + game.getPlayer(currState);  if (searchMetrics != null)   statusText+="    " + searchMetrics;  statusBar.setText(statusText);}  }
class C{  public Boolean isPropertyBifurcated(final BasicProperty basicProperty){  Boolean propBifurcated=Boolean.FALSE;  for (  final Property property : basicProperty.getPropertySet())   if ((PROPERTY_MODIFY_REASON_BIFURCATE.equalsIgnoreCase(property.getPropertyModifyReason()) || PROP_CREATE_RSN_BIFUR.equalsIgnoreCase(property.getPropertyModifyReason())) && !(STATUS_WORKFLOW.equals(property.getStatus()) || STATUS_CANCELLED.equals(property.getStatus()))) {    propBifurcated=Boolean.TRUE;    break;  }  return propBifurcated;}  }
class C{  public DSubjectInformationAccess(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DSubjectInformationAccess.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  private static void __trustAllHttpsCertificates(){  com.sun.net.ssl.SSLContext context;  if (__trustManagers == null) {    __trustManagers=new com.sun.net.ssl.TrustManager[]{new _FakeX509TrustManager()};  }  try {    context=com.sun.net.ssl.SSLContext.getInstance("SSL");    context.init(null,__trustManagers,new SecureRandom());  } catch (  GeneralSecurityException gse) {    throw new IllegalStateException(gse.getMessage());  }  com.sun.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory());}  }
class C{  public int length(){  return size;}  }
class C{  protected LazyJavaCompletionProposal createRequiredTypeCompletionProposal(CompletionProposal completionProposal,JavaContentAssistInvocationContext invocationContext){  return (LazyJavaCompletionProposal)new FillArgumentNamesCompletionProposalCollector(invocationContext).createJavaCompletionProposal(completionProposal);}  }
class C{  public int lastIndexOf(float value){  return lastIndexOf(_pos,value);}  }
class C{  public boolean exportSelected(){  return exportSelected;}  }
class C{  public GridLayout(int rows,int columns){  this.rows=rows;  this.columns=columns;  if (rows < 1 || columns < 1) {    throw new IllegalArgumentException("Rows and columns must be greater than zero");  }}  }
class C{  protected void serializeCDATASection(CDATASection node) throws SAXException {  if ((fFeatures & WELLFORMED) != 0) {    isCDATASectionWellFormed(node);  }  if ((fFeatures & CDATA) != 0) {    String nodeValue=node.getNodeValue();    int endIndex=nodeValue.indexOf("]]>");    if ((fFeatures & SPLITCDATA) != 0) {      if (endIndex >= 0) {        String relatedData=nodeValue.substring(0,endIndex + 2);        String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_WARNING,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT,null,relatedData,null));        }      }    } else {      if (endIndex >= 0) {        String relatedData=nodeValue.substring(0,endIndex + 2);        String msg=Utils.messages.createMessage(MsgKey.ER_CDATA_SECTIONS_SPLIT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_CDATA_SECTIONS_SPLIT));        }        return;      }    }    if (!applyFilter(node,NodeFilter.SHOW_CDATA_SECTION)) {      return;    }    if (fLexicalHandler != null) {      fLexicalHandler.startCDATA();    }    dispatachChars(node);    if (fLexicalHandler != null) {      fLexicalHandler.endCDATA();    }  } else {    dispatachChars(node);  }}  }
class C{  public String readConfigName(String collection){  String configName=null;  String path=COLLECTIONS_ZKNODE + "/" + collection;  LOG.debug("Loading collection config from: [{}]",path);  try {    byte[] data=zkClient.getData(path,null,null,true);    if (data != null) {      ZkNodeProps props=ZkNodeProps.load(data);      configName=props.getStr(CONFIGNAME_PROP);    }    if (configName != null) {      String configPath=CONFIGS_ZKNODE + "/" + configName;      if (!zkClient.exists(configPath,true)) {        LOG.error("Specified config=[{}] does not exist in ZooKeeper at location=[{}]",configName,configPath);        throw new ZooKeeperException(ErrorCode.SERVER_ERROR,"Specified config does not exist in ZooKeeper: " + configName);      } else {        LOG.debug("path=[{}] [{}]=[{}] specified config exists in ZooKeeper",configPath,CONFIGNAME_PROP,configName);      }    } else {      throw new ZooKeeperException(ErrorCode.INVALID_STATE,"No config data found at path: " + path);    }  } catch (  KeeperException|InterruptedException e) {    SolrZkClient.checkInterrupted(e);    throw new SolrException(ErrorCode.SERVER_ERROR,"Error loading config name for collection " + collection,e);  }  return configName;}  }
class C{  private String constructInitialClientResponse() throws IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream(512);  out.write(0);  out.write(user.getBytes("UTF-8"));  out.write(0);  out.write(password.getBytes("UTF-8"));  return Base64.encodeToString(out.toByteArray(),false);}  }
class C{  static public boolean isAllowedToAbortImageSharingSession(ImageSharing imageSharing) throws RcsPersistentStorageException, RcsGenericException {switch (imageSharing.getState()) {case STARTED:case INITIATING:case ACCEPTING:case RINGING:    return true;default :  return false;}}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_ENUM_DECLARATION__LITERALS:    return getLiterals();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private IEntity findPartner(){  int partnerId=event.getInt("partner_id");  final RPObject.ID partnerEntityID=new RPObject.ID(partnerId,entity.getRPObject().get("zoneid"));  return GameObjects.getInstance().get(partnerEntityID);}  }
class C{  @Override public void publishDomain(String domainName){  String absoluteDomainName=getAbsoluteHostName(domainName);  Optional<DomainResource> domainResource=Optional.fromNullable(loadByForeignKey(DomainResource.class,domainName,clock.nowUtc()));  if (!domainResource.isPresent() || !domainResource.get().shouldPublishToDns()) {    desiredRecordsBuilder.put(absoluteDomainName,ImmutableSet.<ResourceRecordSet>of());    return;  }  ImmutableSet.Builder<ResourceRecordSet> domainRecords=new ImmutableSet.Builder<>();  Set<DelegationSignerData> dsData=domainResource.get().getDsData();  if (!dsData.isEmpty()) {    HashSet<String> dsRrData=new HashSet<>();    for (    DelegationSignerData ds : dsData) {      dsRrData.add(ds.toRrData());    }    if (!dsRrData.isEmpty()) {      domainRecords.add(new ResourceRecordSet().setName(absoluteDomainName).setTtl((int)defaultTtl.getStandardSeconds()).setType("DS").setKind("dns#resourceRecordSet").setRrdatas(ImmutableList.copyOf(dsRrData)));    }  }  Set<String> nameserverData=domainResource.get().loadNameserverFullyQualifiedHostNames();  if (!nameserverData.isEmpty()) {    HashSet<String> nsRrData=new HashSet<>();    for (    String hostName : nameserverData) {      nsRrData.add(getAbsoluteHostName(hostName));      if (hostName.endsWith(domainName)) {        publishSubordinateHost(hostName);      }    }    if (!nsRrData.isEmpty()) {      domainRecords.add(new ResourceRecordSet().setName(absoluteDomainName).setTtl((int)defaultTtl.getStandardSeconds()).setType("NS").setKind("dns#resourceRecordSet").setRrdatas(ImmutableList.copyOf(nsRrData)));    }  }  desiredRecordsBuilder.put(absoluteDomainName,domainRecords.build());  logger.finefmt("Will write %s records for domain %s",domainRecords.build().size(),absoluteDomainName);}  }
class C{  public void dumpToConsole(){  this.log.info("Dumping arrival delay histogram...");  System.out.println("delay; count");  for (int i=0; i < this.arrivalDelay.length; i++) {    System.out.println(i + "; " + this.arrivalDelay[i]);  }  this.log.info("Dumping departure delay histogram...");  System.out.println("delay; count");  for (int i=0; i < this.departureDelay.length; i++) {    System.out.println(i + "; " + this.departureDelay[i]);  }}  }
class C{  public static void msgShort(final Context c,final String msg){  if (c != null && msg != null) {    Toast.makeText(c,msg.trim(),Toast.LENGTH_SHORT).show();  }}  }
class C{  protected void ensurePathExists(String path){  String[] paths=path.split("/");  StringBuffer spath=new StringBuffer("/");  for (  String temp : paths) {    if (StringUtils.isBlank(temp)) {      continue;    }    spath.append(temp);    ensureExists(spath.toString(),null,acl,CreateMode.PERSISTENT);    spath.append("/");  }}  }
class C{  public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(SEMICOLON + this.parameters.encode());  return retval.toString();}  }
class C{  void bindIfNotBound(String modName,ModulePointer modPointer){  if (context.get(modName) == null)   context.put(modName,modPointer);}  }
class C{  public boolean isActive(){  return active;}  }
class C{  protected void appendSummary(StringBuffer buffer,String fieldName,short[] array){  appendSummarySize(buffer,fieldName,array.length);}  }
class C{  public synchronized boolean isCancelled(){  return cancelled;}  }
class C{  private long accessInfoAPI(){  mState=SantaServiceMessages.STATUS_PROCESSING;  final String url=String.format(Locale.US,API_URL,API_CLIENT,mPreferences.getRandValue(),mPreferences.getRouteOffset(),mPreferences.getStreamOffset(),TIMEZONE,LANGUAGE,mPreferences.getFingerprint());  Log.d(TAG,"Tracking Santa.");  long result=mApiProcessor.accessAPI(url);  if (result < 0) {    long delay=(long)Math.min((mBackoff * BACKOFF_FACTOR),MAX_BACKOFF_TIME);    Log.d(TAG,"Couldn't communicate with Santa, trying again in: " + delay);    mBackoff=delay;    if (haveValidData()) {      mState=SantaServiceMessages.STATUS_ERROR;      sendMessage(Message.obtain(null,SantaServiceMessages.MSG_ERROR));    } else {      mState=SantaServiceMessages.STATUS_ERROR_NODATA;      sendMessage(Message.obtain(null,SantaServiceMessages.MSG_ERROR_NODATA));    }    return delay;  } else {    SantaLog.d(TAG,"Accessed API, next access in: " + result);    mBackoff=INITIAL_BACKOFF_TIME;    sendMessage(Message.obtain(null,SantaServiceMessages.MSG_SUCCESS));    mState=SantaServiceMessages.STATUS_IDLE;    return result;  }}  }
class C{  public BigInteger calculateFee(Wallet wallet){  BigInteger totalOut=BigInteger.ZERO;  BigInteger totalIn=BigInteger.ZERO;  for (  TransactionInput input : getInputs()) {    TransactionOutput connected=input.getConnectedOutput(wallet.unspent);    if (connected == null)     connected=input.getConnectedOutput(wallet.spent);    if (connected == null)     connected=input.getConnectedOutput(wallet.pending);    if (connected == null)     continue;    totalIn=totalIn.add(connected.getValue());  }  List<TransactionOutput> outputs=getOutputs();  for (  TransactionOutput output : outputs) {    totalOut=totalOut.add(output.getValue());  }  return totalIn.subtract(totalOut);}  }
class C{  public void delete() throws IOException {  close();  IOUtil.deleteContents(directory);}  }
class C{  private HeatSink(){}  }
class C{  @Inject protected WorkspaceViewImpl(){  add(uiBinder.createAndBindUi(this));  getElement().setId("codenvyIdeWorkspaceViewImpl");  ideMainDockPanel.setWidgetHidden(noToolbarPanel,true);  ideMainDockPanel.setWidgetHidden(actionsPanel,true);  ideMainDockPanel.setWidgetHidden(statusPanel,false);}  }
class C{  public void initialize(){  forwarding=false;  forwardingDestination=null;  aliasing=false;  alias="";}  }
class C{  @Override public boolean supportsGroupBy(){  debugCodeCall("supportsGroupBy");  return true;}  }
class C{  public static final CButton createZoomButton(String text){  AppsAction aa=new AppsAction(A_ZOOM,null,text);  CButton button=(CButton)aa.getButton();  button.setMargin(s_insets);  return button;}  }
class C{  public boolean hasReceiverTypeDispatch(){  return MethodHandleNatives.refKindDoesDispatch(getReferenceKind());}  }
class C{  public static LongUnaryOperator identity(){  return null;}  }
class C{  public void add(byte[] vals,int offset,int length){  ensureCapacity(_pos + length);  System.arraycopy(vals,offset,_data,_pos,length);  _pos+=length;}  }
class C{  public static byte[] genKey(byte[] keyBytes){  byte[] key=new byte[SECRET_KEY_SIZE_BYTES];  for (int i=0; i < keyBytes.length; i++) {    key[i % SECRET_KEY_SIZE_BYTES]^=keyBytes[i];  }  return key;}  }
class C{  private JCTree matchAnnoToTree(Attribute.Compound findme,List<Attribute.Compound> annos,List<JCAnnotation> trees){  for (  Attribute.Compound anno : annos) {    for (    JCAnnotation tree : trees) {      JCTree match=matchAnnoToTree(findme,anno,tree);      if (match != null)       return match;    }  }  return null;}  }
class C{  public FloatMatrix addi(float v,FloatMatrix result){  ensureResultLength(null,result);  for (int i=0; i < length; i++) {    result.put(i,get(i) + v);  }  return result;}  }
class C{  public boolean isEnumConstant(){  return (getModifiers() & Modifier.ENUM) != 0;}  }
class C{  public void startTag(String tag) throws IOException {  if (state == IN_TAG) {    out.write(">");    state=IN_BODY;  }  out.write("<");  out.write(tag);  state=IN_TAG;}  }
class C{  public CUsurfref(){}  }
class C{  Counter(ElemNumber numberElem,NodeSetDTM countNodes) throws TransformerException {  m_countNodes=countNodes;  m_numberElem=numberElem;}  }
class C{  public static void main(String[] args) throws Exception {  final Properties options=StringUtils.argsToProperties(args);  final String configFile=options.containsKey("") ? (String)options.get("") : null;  options.remove("");  if ((options.size() == 0 && configFile == null) || options.containsKey("help") || options.containsKey("h")) {    System.err.println(usage());    System.exit(-1);  }  Thread.setDefaultUncaughtExceptionHandler(null);  final Map<String,List<String>> configuration=getConfigurationFrom(configFile,options);  final Phrasal p=Phrasal.loadDecoder(configuration);  if (options.containsKey("text"))   p.decode(new FileInputStream(new File(options.getProperty("text"))),true); else   p.decode(System.in,true);}  }
class C{  public boolean mouseReleased(MouseEvent e){  Debug.message("eomg","GraphicStateMachine|add node state|mouseReleased");  GrabPoint mp=graphic.getMovingPoint(e);  if (mp == null) {    if (graphic.isMouseEventTouching(e)) {      OMPoly poly=(OMPoly)graphic.getGraphic();      double x=e.getX();      double y=e.getY();      if (poly.getRenderType() == OMGraphic.RENDERTYPE_LATLON) {        Point2D llp=graphic.getProjection().inverse(x,y);        x=llp.getX();        y=llp.getY();      }      int index=poly.getIndexOfFirstNodeOfSegIntersect(x,y,2);      if (index != -1) {        ((EditableOMPoly)graphic).addPoint(e.getX(),e.getY(),index + 1);        graphic.fireEvent(EOMGEvent.EOMG_SELECTED);      }      graphic.fireEvent(EOMGCursors.DEFAULT,"",e,EOMGEvent.EOMG_UNDO);    }  }  graphic.getStateMachine().setSelected();  graphic.redraw(e,true);  return false;}  }
class C{  private String buildS3KeyPrefixHelper(String s3KeyPrefixVelocityTemplate,String dataProviderName,BusinessObjectFormat businessObjectFormat,BusinessObjectDataKey businessObjectDataKey,String storageName){  Map<String,Object> context=new HashMap<>();  context.put("environment",s3KeyPrefixFormat(configurationHelper.getProperty(ConfigurationValue.HERD_ENVIRONMENT)));  context.put("namespace",s3KeyPrefixFormat(businessObjectFormat.getNamespace()));  context.put("dataProviderName",s3KeyPrefixFormat(dataProviderName));  context.put("businessObjectDefinitionName",s3KeyPrefixFormat(businessObjectFormat.getBusinessObjectDefinitionName()));  context.put("businessObjectFormatUsage",s3KeyPrefixFormat(businessObjectFormat.getBusinessObjectFormatUsage()));  context.put("businessObjectFormatFileType",s3KeyPrefixFormat(businessObjectFormat.getBusinessObjectFormatFileType()));  context.put("businessObjectFormatVersion",s3KeyPrefixFormat(String.valueOf(businessObjectFormat.getBusinessObjectFormatVersion())));  context.put("businessObjectDataVersion",s3KeyPrefixFormat(String.valueOf(businessObjectDataKey.getBusinessObjectDataVersion())));  context.put("businessObjectFormatPartitionKey",s3KeyPrefixFormat(s3KeyPrefixFormat(businessObjectFormat.getPartitionKey())));  context.put("businessObjectDataPartitionValue",businessObjectDataKey.getPartitionValue());  Map<String,String> subPartitions=new LinkedHashMap<>();  if (!CollectionUtils.isEmpty(businessObjectDataKey.getSubPartitionValues())) {    Assert.notNull(businessObjectFormat.getSchema(),String.format("Schema must be defined when using subpartition values for business object format {%s}.",businessObjectFormatHelper.businessObjectFormatKeyToString(businessObjectFormatHelper.getBusinessObjectFormatKey(businessObjectFormat))));    Assert.notNull(businessObjectFormat.getSchema().getPartitions(),String.format("Schema partition(s) must be defined when using subpartition values for business object " + "format {%s}.",businessObjectFormatHelper.businessObjectFormatKeyToString(businessObjectFormatHelper.getBusinessObjectFormatKey(businessObjectFormat))));    Assert.isTrue(businessObjectFormat.getSchema().getPartitions().size() > businessObjectDataKey.getSubPartitionValues().size(),String.format("Number of subpartition values specified for the business object data is greater than or equal to " + "the number of partition columns defined in the schema for the associated business object format." + "Business object data: {%s}",businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));    for (int i=0; i < businessObjectDataKey.getSubPartitionValues().size(); i++) {      subPartitions.put(s3KeyPrefixFormat(businessObjectFormat.getSchema().getPartitions().get(i + 1).getName()),businessObjectDataKey.getSubPartitionValues().get(i));    }  }  context.put("businessObjectDataSubPartitions",subPartitions);  context.put("CollectionUtils",CollectionUtils.class);  String s3KeyPrefix=velocityHelper.evaluate(s3KeyPrefixVelocityTemplate,context,configurationHelper.getProperty(ConfigurationValue.S3_ATTRIBUTE_NAME_KEY_PREFIX_VELOCITY_TEMPLATE));  Assert.isTrue(StringUtils.isNotBlank(s3KeyPrefix),String.format("S3 key prefix velocity template \"%s\" configured for \"%s\" storage results in an empty S3 key prefix.",s3KeyPrefixVelocityTemplate,storageName));  return s3KeyPrefix;}  }
class C{  private void createFactoryChange(ASTRewrite unitRewriter,CompilationUnit unit,TextEditGroup gd) throws CoreException {  AST ast=unit.getAST();  fFactoryMethod=createFactoryMethod(ast,fCtorBinding,unitRewriter);  AbstractTypeDeclaration factoryOwner=(AbstractTypeDeclaration)unit.findDeclaringNode(fFactoryOwningClass.resolveBinding().getKey());  fImportRewriter.addImport(fCtorOwningClass.resolveBinding());  int idx=ASTNodes.getInsertionIndex(fFactoryMethod,factoryOwner.bodyDeclarations());  if (idx < 0)   idx=0;  unitRewriter.getListRewrite(factoryOwner,factoryOwner.getBodyDeclarationsProperty()).insertAt(fFactoryMethod,idx,gd);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StandardCategoryURLGenerator)) {    return false;  }  StandardCategoryURLGenerator that=(StandardCategoryURLGenerator)obj;  if (!ObjectUtilities.equal(this.prefix,that.prefix)) {    return false;  }  if (!ObjectUtilities.equal(this.seriesParameterName,that.seriesParameterName)) {    return false;  }  if (!ObjectUtilities.equal(this.categoryParameterName,that.categoryParameterName)) {    return false;  }  return true;}  }
class C{  public void diff_cleanupEfficiency(LinkedList<Diff> diffs){  if (diffs.isEmpty()) {    return;  }  boolean changes=false;  Stack<Diff> equalities=new Stack<Diff>();  String lastequality=null;  ListIterator<Diff> pointer=diffs.listIterator();  boolean pre_ins=false;  boolean pre_del=false;  boolean post_ins=false;  boolean post_del=false;  Diff thisDiff=pointer.next();  Diff safeDiff=thisDiff;  while (thisDiff != null) {    if (thisDiff.operation == Operation.EQUAL) {      if (thisDiff.text.length() < Diff_EditCost && (post_ins || post_del)) {        equalities.push(thisDiff);        pre_ins=post_ins;        pre_del=post_del;        lastequality=thisDiff.text;      } else {        equalities.clear();        lastequality=null;        safeDiff=thisDiff;      }      post_ins=post_del=false;    } else {      if (thisDiff.operation == Operation.DELETE) {        post_del=true;      } else {        post_ins=true;      }      if (lastequality != null && ((pre_ins && pre_del && post_ins&& post_del) || ((lastequality.length() < Diff_EditCost / 2) && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0) + (post_ins ? 1 : 0)+ (post_del ? 1 : 0)) == 3))) {        while (thisDiff != equalities.lastElement()) {          thisDiff=pointer.previous();        }        pointer.next();        pointer.set(new Diff(Operation.DELETE,lastequality));        pointer.add(thisDiff=new Diff(Operation.INSERT,lastequality));        equalities.pop();        lastequality=null;        if (pre_ins && pre_del) {          post_ins=post_del=true;          equalities.clear();          safeDiff=thisDiff;        } else {          if (!equalities.empty()) {            equalities.pop();          }          if (equalities.empty()) {            thisDiff=safeDiff;          } else {            thisDiff=equalities.lastElement();          }          while (thisDiff != pointer.previous()) {          }          post_ins=post_del=false;        }        changes=true;      }    }    thisDiff=pointer.hasNext() ? pointer.next() : null;  }  if (changes) {    diff_cleanupMerge(diffs);  }}  }
class C{  protected double innerProduct(double[] x,double[] y){  double sum=0;  for (int i=0; i < x.length; i++) {    sum+=x[i] * y[i];  }  return sum;}  }
class C{  public LongDataBox(long[][] data){  int length=data[0].length;  for (  long[] datum : data) {    if (datum.length != length) {      throw new IllegalArgumentException("All rows must have same length.");    }  }  this.data=data;}  }
class C{  public void runJob(Job job) throws JobManagerException {  assertIsRunning();  if (job.isValid()) {    JobPoller.getInstance().queueNow(job);  }}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  double p3=params[2];  double p4=params[3];  return (p1 >= p2) ? p3 : p4;}  }
class C{  public static int convertDFSchemaToFrameSchema(StructType dfschema,String[] colnames,ValueType[] fschema,boolean containsID){  int off=containsID ? 1 : 0;  boolean containsVect=false;  int lenVect=fschema.length - (dfschema.fields().length - off) + 1;  int colVect=-1;  for (int i=off, pos=0; i < dfschema.fields().length; i++) {    StructField structType=dfschema.apply(i);    colnames[pos]=structType.name();    if (structType.dataType() == DataTypes.DoubleType || structType.dataType() == DataTypes.FloatType)     fschema[pos++]=ValueType.DOUBLE; else     if (structType.dataType() == DataTypes.LongType || structType.dataType() == DataTypes.IntegerType)     fschema[pos++]=ValueType.INT; else     if (structType.dataType() == DataTypes.BooleanType)     fschema[pos++]=ValueType.BOOLEAN; else     if (structType.dataType() instanceof VectorUDT) {      if (containsVect)       throw new RuntimeException("Found invalid second vector column.");      String name=colnames[pos];      colVect=pos;      for (int j=0; j < lenVect; j++) {        colnames[pos]=name + "v" + j;        fschema[pos++]=ValueType.DOUBLE;      }      containsVect=true;    } else     fschema[pos++]=ValueType.STRING;  }  return colVect;}  }
class C{  public void close() throws IOException {  if (isConnected()) {    issueCommand("QUIT");    loggedIn=false;  }  disconnect();}  }
class C{  public mxPoint(){  this(0,0);}  }
class C{  public void remove(){  if (currPos == 0) {    throw new IllegalStateException("next() must be called before remove()");  } else {synchronized (ResultsCollectionWrapper.this.limitLock) {      this.iter.remove();      --ResultsCollectionWrapper.this.limit;    }  }}  }
class C{  public static double P_Hamming(int Y[][],int Ypred[][],int j){  int y_j[]=MatrixUtils.getCol(Y,j);  int ypred_j[]=MatrixUtils.getCol(Ypred,j);  int[][] aligned=align(y_j,ypred_j);  int[] y_jAligned=aligned[0];  int[] ypred_jAligned=aligned[1];  return 1. - L_Hamming(y_jAligned,ypred_jAligned);}  }
class C{  public static int bitCount(long v){  v-=(v >>> 1) & 0x5555555555555555L;  v=(v & 0x3333333333333333L) + ((v >>> 2) & 0x3333333333333333L);  int i=((int)(v >>> 32)) + (int)v;  i=(i & 0x0F0F0F0F) + ((i >>> 4) & 0x0F0F0F0F);  i+=i >>> 8;  i+=i >>> 16;  return i & 0x0000007F;}  }
class C{  void playDialogSound(final int type){  impl.playDialogSound(type);}  }
class C{  @Override protected IgniteInternalFuture currentFuture() throws IgniteCheckedException {  IgniteInternalFuture fut=curFut.get();  if (fut == null)   throw new IllegalStateException("Asynchronous operation not started.");  return fut;}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("Regression by discretization");  if (m_ClassMeans == null) {    text.append(": No model built yet.");  } else {    text.append("\n\nClass attribute discretized into " + m_ClassMeans.length + " values\n");    text.append("\nClassifier spec: " + getClassifierSpec() + "\n");    text.append(m_Classifier.toString());  }  return text.toString();}  }
class C{  @Override public void merge(MeasureAggregator aggregator){  MaxAggregator maxAggregator=(MaxAggregator)aggregator;  if (!aggregator.isFirstTime()) {    agg(maxAggregator.aggVal);    firstTime=false;  }}  }
class C{  public final int countDataSchemes(){  return mDataSchemes != null ? mDataSchemes.size() : 0;}  }
class C{  ConcurrentMap createConcurrentMap(){  return new ConcurrentHashMap();}  }
class C{  public String completeIt(){  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  String DocSubTypeSO=dt.getDocSubTypeSO();  if (DOCACTION_Prepare.equals(getDocAction())) {    setProcessed(false);    return DocAction.STATUS_InProgress;  }  if (MDocType.DOCSUBTYPESO_Proposal.equals(DocSubTypeSO) || MDocType.DOCSUBTYPESO_Quotation.equals(DocSubTypeSO)) {    if (MDocType.DOCSUBTYPESO_Quotation.equals(DocSubTypeSO))     reserveStock(dt,getLines(true,MOrderLine.COLUMNNAME_M_Product_ID));    m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);    if (m_processMsg != null)     return DocAction.STATUS_Invalid;    m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);    if (m_processMsg != null)     return DocAction.STATUS_Invalid;    setDefiniteDocumentNo();    setProcessed(true);    return DocAction.STATUS_Completed;  }  if (!m_forceCreation && MDocType.DOCSUBTYPESO_PrepayOrder.equals(DocSubTypeSO) && getC_Payment_ID() == 0 && getC_CashLine_ID() == 0) {    setProcessed(true);    return DocAction.STATUS_WaitingPayment;  }  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  getLines(true,null);  log.info(toString());  StringBuffer info=new StringBuffer();  boolean realTimePOS=MSysConfig.getBooleanValue("REAL_TIME_POS",false,getAD_Client_ID());  MInOut shipment=null;  if (MDocType.DOCSUBTYPESO_OnCreditOrder.equals(DocSubTypeSO) || MDocType.DOCSUBTYPESO_WarehouseOrder.equals(DocSubTypeSO) || MDocType.DOCSUBTYPESO_POSOrder.equals(DocSubTypeSO)|| MDocType.DOCSUBTYPESO_PrepayOrder.equals(DocSubTypeSO)) {    if (!DELIVERYRULE_Force.equals(getDeliveryRule()))     setDeliveryRule(DELIVERYRULE_Force);    shipment=createShipment(dt,realTimePOS ? null : getDateOrdered());    if (shipment == null)     return DocAction.STATUS_Invalid;    info.append("@M_InOut_ID@: ").append(shipment.getDocumentNo());    String msg=shipment.getProcessMsg();    if (msg != null && msg.length() > 0)     info.append(" (").append(msg).append(")");  }  if (MDocType.DOCSUBTYPESO_POSOrder.equals(DocSubTypeSO) || MDocType.DOCSUBTYPESO_OnCreditOrder.equals(DocSubTypeSO) || MDocType.DOCSUBTYPESO_PrepayOrder.equals(DocSubTypeSO)) {    MInvoice invoice=createInvoice(dt,shipment,realTimePOS ? null : getDateOrdered());    if (invoice == null)     return DocAction.STATUS_Invalid;    info.append(" - @C_Invoice_ID@: ").append(invoice.getDocumentNo());    String msg=invoice.getProcessMsg();    if (msg != null && msg.length() > 0)     info.append(" (").append(msg).append(")");  }  MOrder counter=createCounterDoc();  if (counter != null)   info.append(" - @CounterDoc@: @Order@=").append(counter.getDocumentNo());  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    if (info.length() > 0)     info.append(" - ");    info.append(valid);    m_processMsg=info.toString();    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  setProcessed(true);  m_processMsg=info.toString();  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  private static ValueAnimator loadAnimator(Context c,Resources res,Resources.Theme theme,AttributeSet attrs,ValueAnimator anim,float pathErrorScale) throws Resources.NotFoundException {  TypedArray arrayAnimator=null;  TypedArray arrayObjectAnimator=null;  if (theme != null) {    arrayAnimator=theme.obtainStyledAttributes(attrs,R.styleable.Animator,0,0);  } else {    arrayAnimator=res.obtainAttributes(attrs,R.styleable.Animator);  }  if (anim != null) {    if (theme != null) {      arrayObjectAnimator=theme.obtainStyledAttributes(attrs,R.styleable.PropertyAnimator,0,0);    } else {      arrayObjectAnimator=res.obtainAttributes(attrs,R.styleable.PropertyAnimator);    }  }  if (anim == null) {    anim=new ValueAnimator();  }  parseAnimatorFromTypeArray(anim,arrayAnimator,arrayObjectAnimator);  final int resId=arrayAnimator.getResourceId(R.styleable.Animator_android_interpolator,0);  if (resId > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(c,resId));  }  arrayAnimator.recycle();  if (arrayObjectAnimator != null) {    arrayObjectAnimator.recycle();  }  return anim;}  }
class C{  public void write(ResourceBundle i18n,String key,Object[] args) throws IOException {  write(getString(i18n,key,args));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public <K,V>GridCloseableIterator<IgniteBiTuple<K,V>> query(String qry,IndexingQueryFilter filters) throws IgniteCheckedException {  IndexReader reader;  try {    long updates=updateCntr.get();    if (updates != 0) {      writer.commit();      updateCntr.addAndGet(-updates);    }    reader=IndexReader.open(writer,true);  } catch (  IOException e) {    throw new IgniteCheckedException(e);  }  IndexSearcher searcher=new IndexSearcher(reader);  MultiFieldQueryParser parser=new MultiFieldQueryParser(Version.LUCENE_30,idxdFields,writer.getAnalyzer());  Filter f=new TermRangeFilter(EXPIRATION_TIME_FIELD_NAME,DateTools.timeToString(U.currentTimeMillis(),DateTools.Resolution.MILLISECOND),null,false,false);  TopDocs docs;  try {    docs=searcher.search(parser.parse(qry),f,Integer.MAX_VALUE);  } catch (  Exception e) {    throw new IgniteCheckedException(e);  }  IgniteBiPredicate<K,V> fltr=null;  if (filters != null)   fltr=filters.forSpace(spaceName);  return new It<>(reader,searcher,docs.scoreDocs,fltr);}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public DigitalIn createDigitalIn(){  return new SimpleDigitalIn();}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public SendableStickerMessage.SendableStickerMessageBuilder replyTo(long replyTo){  this.replyTo=replyTo;  return this;}  }
class C{  public KMeansClusterer(){  this(100,0.001);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatasetnodevalue.class,args);}  }
class C{  public SecP521R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y){  this(curve,x,y,false);}  }
class C{  protected void sequence_Argument(ISerializationContext context,Argument semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void initActionBar(){  Window window=getWindow();  window.getDecorView();  if (isChild() || !window.hasFeature(Window.FEATURE_ACTION_BAR) || mActionBar != null) {    return;  }  mActionBar=new ActionBarImpl(this);  mActionBar.setDefaultDisplayHomeAsUpEnabled(mEnableDefaultActionBarUp);}  }
class C{  public static Iterator<?> iterator(final Object focus,final int rangeStyle){  if (focus == null) {    throw new IllegalArgumentException("The date must not be null");  }  if (focus instanceof Date) {    return iterator((Date)focus,rangeStyle);  } else   if (focus instanceof Calendar) {    return iterator((Calendar)focus,rangeStyle);  } else {    throw new ClassCastException("Could not iterate based on " + focus);  }}  }
class C{  public ValidateMemorySynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  protected Transferable createTransferable(JComponent c){  if (c instanceof TabularDataJTable) {    TabularDataJTable tabularData=(TabularDataJTable)c;    DataSet dataSet=tabularData.getDataSet();    int[] rows;    int[] cols;    if (!tabularData.getRowSelectionAllowed() && !tabularData.getColumnSelectionAllowed()) {      return null;    }    if (!tabularData.getRowSelectionAllowed()) {      int rowCount=tabularData.getDataSet().getNumRows();      rows=new int[rowCount + 1];      for (int i=0; i < rowCount + 1; i++) {        rows[i]=i + getNumLeadingRows() - 1;      }    } else {      int[] _rows=tabularData.getSelectedRows();      if (Arrays.binarySearch(_rows,1) == -1) {        rows=new int[_rows.length + 1];        rows[0]=1;        System.arraycopy(_rows,0,rows,1,_rows.length);      } else {        rows=_rows;      }    }    if (!tabularData.getColumnSelectionAllowed()) {      int colCount=tabularData.getDataSet().getNumColumns();      cols=new int[colCount];      for (int j=0; j < colCount; j++) {        cols[j]=j + getNumLeadingCols();      }    } else {      cols=tabularData.getSelectedColumns();    }    if (rows == null || cols == null || rows.length == 0 || cols.length == 0) {      return null;    }    StringBuilder buf=new StringBuilder();    for (    int displayRow : rows) {      if (displayRow == 0) {        continue;      }      for (      int displayCol : cols) {        if (displayCol == 0) {          continue;        }        String name=(String)(tabularData.getValueAt(1,displayCol));        if (name == null) {          continue;        }        if (displayRow == 1) {          String s=(String)tabularData.getValueAt(displayRow,displayCol);          if (s.trim().equals("")) {            s="C" + (displayCol - 1);          }          String val="";          if (s != null) {            val=s;          }          buf.append(val).append("\t");        } else {          int dataRow=displayRow - getNumLeadingRows();          int dataCol=displayCol - getNumLeadingCols();          if (dataCol < 0) {            continue;          }          if (dataCol < dataSet.getNumColumns()) {            if (dataRow < dataSet.getNumRows()) {              Object datumObj=dataSet.getObject(dataRow,dataCol);              String datumString="";              if (datumObj != null) {                if (datumObj instanceof Number) {                  datumString=datumObj.toString();                } else                 if (datumObj instanceof String) {                  datumString="\"" + datumObj.toString() + "\"";                } else {                  throw new IllegalArgumentException();                }              }              buf.append(datumString).append("\t");            } else {              buf.append("\t");            }          }        }      }      if (buf.length() - 1 > 0) {        buf.deleteCharAt(buf.length() - 1).append("\n");      }    }    if (buf.length() - 1 > 0) {      buf.deleteCharAt(buf.length() - 1);    }    return new StringSelection(buf.toString());  }  return null;}  }
class C{  public boolean add(E e){  typeCheck(e);  int eOrdinal=e.ordinal();  int eWordNum=eOrdinal >>> 6;  long oldElements=elements[eWordNum];  elements[eWordNum]|=(1L << eOrdinal);  boolean result=(elements[eWordNum] != oldElements);  if (result)   size++;  return result;}  }
class C{  @Override protected void register(ConfigurationFactory configurationFactory){  configurationFactory.registerConfiguration("resin2x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Resin2xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("resin2x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Resin2xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("resin3x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Resin3xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("resin3x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Resin3xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("resin31x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Resin31xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("resin31x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Resin3xExistingLocalConfiguration.class);  configurationFactory.registerConfiguration("resin4x",ContainerType.INSTALLED,ConfigurationType.STANDALONE,Resin4xStandaloneLocalConfiguration.class);  configurationFactory.registerConfiguration("resin4x",ContainerType.INSTALLED,ConfigurationType.EXISTING,Resin3xExistingLocalConfiguration.class);}  }
class C{  public void attrModified(Attr node,String oldv,String newv){  if (!mutate) {    declaration=cssEngine.parseStyleDeclaration(SVGStylableElement.this,newv);  }}  }
class C{  private static long configFileLastModified(String configFileName,long timeLastModified){  File configFile=new File(getGlobalConfigDirName(clusterHomeName),configFileName);  if (!configFile.exists()) {    return timeLastModified;  }  if (configFile.lastModified() > timeLastModified) {    return configFile.lastModified();  }  return timeLastModified;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.093 -0500",hash_original_method="50E452D86A3E55153B3E0F1DD816D615",hash_generated_method="BB2A008545B8C231B09A8BC474F79D7F") private void reportError(int errorCode,String description,String failingUrl){  resetLoadingStates();  if (description == null || description.isEmpty()) {    description=ErrorStrings.getString(errorCode,mContext);  }  mCallbackProxy.onReceivedError(errorCode,description,failingUrl);}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.trees.J48";}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  }  finally {    try {      if (bis != null) {        bis.close();      }    } catch (    Exception ignored) {    }  }  return encodedData;}  }
class C{  public static <K>byte[] generate(ArrayList<Integer> list){  ByteStream out=new ByteStream();  generate(list,0,out);  return out.toByteArray();}  }
class C{  public Sphere(float radius,int segmentsW,int segmentsH,boolean createTextureCoordinates,boolean createVertexColorBuffer,boolean createVBOs){  super();  mRadius=radius;  mSegmentsW=segmentsW;  mSegmentsH=segmentsH;  mCreateTextureCoords=createTextureCoordinates;  mCreateVertexColorBuffer=createVertexColorBuffer;  init(createVBOs);}  }
class C{  protected void transportMail(MimeMessage msg) throws MessagingException {  LOGGER.debug("Send message.");  Transport.send(msg);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.052 -0500",hash_original_method="C65286C81FD9123E310F422158F574EC",hash_generated_method="E1EA0E6D54BAF1B13A10C5BA854D1303") public static ParcelFileDescriptor[] createPipe() throws IOException {  FileDescriptor[] fds=new FileDescriptor[2];  createPipeNative(fds);  ParcelFileDescriptor[] pfds=new ParcelFileDescriptor[2];  pfds[0]=new ParcelFileDescriptor(fds[0]);  pfds[1]=new ParcelFileDescriptor(fds[1]);  return pfds;}  }
class C{  protected void doPrintFooter(){  append("</table>\n");  append("</div>\n");  append("</body>\n");  append("</html>\n");}  }
class C{  private void forwardFileTransferInvitationToUi(Intent invitation,FileTransferDAO ftDao){  ContactId contact=ftDao.getContact();  if (ftDao.getContact() == null) {    if (LogUtils.isActive) {      Log.e(LOGTAG,"forwardFileTransferInvitationToUi failed: cannot parse contact");    }    return;  }  Intent intent=ReceiveFileTransfer.forgeInvitationIntent(this,ftDao,invitation);  int uniqueId=Utils.getUniqueIdForPendingIntent();  PendingIntent pi=PendingIntent.getActivity(this,uniqueId,intent,PendingIntent.FLAG_ONE_SHOT);  String displayName=RcsContactUtil.getInstance(this).getDisplayName(contact);  String title=getString(R.string.title_recv_file_transfer);  String message=getString(R.string.label_from_args,displayName);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  Notification notif=buildNotification(pi,title,message);  notificationManager.notify(uniqueId,notif);  TalkList.notifyNewConversationEvent(this,FileTransferIntent.ACTION_NEW_INVITATION);}  }
class C{  public void init() throws ServletException {}  }
class C{  private void addInterest(SelectableChannel channel,int operation,ISelectHandler callback) throws ClosedChannelException {  SelectionKey key=channel.keyFor(selector);  if (key == null) {    channel.register(selector,operation,callback);  } else   if (!key.isValid()) {    throw new RuntimeException(String.format("Unable to add %d in %s due to key is invalid",operation,channel));  } else {    if ((key.interestOps() & operation) != 0) {      throw new RuntimeException(String.format("%d has been registered in %s",operation,channel));    }    if (key.attachment() == null) {      key.attach(callback);    } else {      if (callback != key.attachment()) {        throw new RuntimeException("Unmatched SelectHandler has already been attached" + " for other operation");      }    }    key.interestOps(key.interestOps() | operation);  }}  }
class C{  public void start(){  if (period > 0) {    reporter.start(period,TimeUnit.MILLISECONDS);  }}  }
class C{  public final boolean isTracking(){  return mIsTracking;}  }
class C{  public void simulate(){  while (!env.isDone() && !CancelableThread.currIsCanceled()) {    env.step();    simPaneCtrl.setStatus("Performance=" + env.getPerformanceMeasure(agent));    simPaneCtrl.waitAfterStep();  }  envViewCtrl.notify("Performance=" + env.getPerformanceMeasure(agent));}  }
class C{  public static void main(String[] args){  com.bbn.openmap.util.ArgParser ap=new com.bbn.openmap.util.ArgParser("TileGrabber");  ap.add("source","Path to fetch tiles from, should be http://path/{z}/{x}/{y}.png form",1);  ap.add("target","Path to the output directory for fetched tiles",1);  ap.add("fromZoom","Starting zoom level",1);  ap.add("toZoom","Ending zoom level",1);  ap.add("minx","min x tile (only used if fromZoom and toZoom match)",1);  ap.add("miny","min y tile (only used if fromZoom and toZoom match)",1);  ap.add("maxx","max x tile (only used if fromZoom and toZoom match)",1);  ap.add("maxy","max y tile (only used if fromZoom and toZoom match)",1);  ap.add("minlon","min longitude",1);  ap.add("minlat","min latitude",1);  ap.add("maxlon","max longitude",1);  ap.add("maxlat","max latitude",1);  ap.add("shapefile","fetch coverage over shapes in shapefile",1);  ap.add("verbose","Describe what's going on.");  ap.add("extraVerbose","Really describe what's going on.");  ap.add("fill","Only fetch tiles that don't exist.");  ap.add("TMS","Specify that the tile numbering scheme matches TMS (OSM is default)");  if (!ap.parse(args)) {    ap.printUsage();    System.exit(0);  }  String[] arg=ap.getArgValues("source");  if (arg != null) {    try {      Builder wwthBuilder=new Builder(arg[0]);      arg=ap.getArgValues("target");      if (arg != null) {        wwthBuilder.targetFile(arg[0]);      }      arg=ap.getArgValues("fromZoom");      if (arg != null) {        wwthBuilder.fromZoom(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues("toZoom");      if (arg != null) {        wwthBuilder.toZoom(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues("minx");      if (arg != null) {        wwthBuilder.minx(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues("miny");      if (arg != null) {        wwthBuilder.miny(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues("maxx");      if (arg != null) {        wwthBuilder.maxx(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues("maxy");      if (arg != null) {        wwthBuilder.maxy(Integer.parseInt(arg[0]));      }      arg=ap.getArgValues("minlon");      if (arg != null) {        wwthBuilder.minlon(Double.parseDouble(arg[0]));      }      arg=ap.getArgValues("minlat");      if (arg != null) {        wwthBuilder.minlat(Double.parseDouble(arg[0]));      }      arg=ap.getArgValues("maxlon");      if (arg != null) {        wwthBuilder.maxlon(Double.parseDouble(arg[0]));      }      arg=ap.getArgValues("maxlat");      if (arg != null) {        wwthBuilder.maxlat(Double.parseDouble(arg[0]));      }      arg=ap.getArgValues("verbose");      if (arg != null) {        wwthBuilder.verbose=true;      }      arg=ap.getArgValues("extraVerbose");      if (arg != null) {        wwthBuilder.verbose=true;        wwthBuilder.extraVerbose=true;      }      arg=ap.getArgValues("fill");      if (arg != null) {        wwthBuilder.setFill(true);      }      arg=ap.getArgValues("TMS");      if (arg != null) {        wwthBuilder.transform=new TMSMapTileCoordinateTransform();      }      arg=ap.getArgValues("shapefile");      if (arg != null) {        wwthBuilder.go(arg[0]);      } else {        System.out.println(wwthBuilder.toString());        wwthBuilder.go();      }    } catch (    NumberFormatException nfe) {      nfe.printStackTrace();      System.out.println(nfe.getMessage());    }catch (    FileNotFoundException fnfe) {      fnfe.printStackTrace();      System.out.println(fnfe.getMessage());    }catch (    IOException ioe) {      ioe.printStackTrace();      System.out.println(ioe.getMessage());    }  } else {    ap.bail("Need a source directory.",true);  }  System.exit(0);}  }
class C{  public static void removeValue(GeoTimeSerie gts,long timestamp,boolean all){  GeoTimeSerie altered=gts.cloneEmpty(gts.values);  int todelete=Integer.MAX_VALUE;  if (all) {    todelete=1;  }  for (int i=0; i < gts.values; i++) {    if (todelete > 1 && timestamp == gts.ticks[i]) {      todelete--;      continue;    }    GTSHelper.setValue(altered,gts.ticks[i],GTSHelper.locationAtIndex(gts,i),GTSHelper.elevationAtIndex(gts,i),GTSHelper.valueAtIndex(gts,i),false);  }}  }
class C{  protected SymbolTableEntryIMOnlyImpl(){  super();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public int hashCode(){  return address.hashCode() + ((broadcast != null) ? broadcast.hashCode() : 0) + maskLength;}  }
class C{  public ModuleDeclaration withAssembler(Class<?> assemblerClass) throws AssemblyException {  Assembler assembler=createAssemblerInstance(assemblerClass);  assemblers.add(assembler);  return this;}  }
class C{  public void safeDelta(){  this.noDeltaMetaTimestamp=true;  this.noDeltaMetaLocation=true;  this.noDeltaMetaElevation=true;  this.noDeltaValue=true;}  }
class C{  private List<String> missingFish(final Player player,final boolean hash){  final List<String> result=new LinkedList<String>();  String doneText=player.getQuest(QUEST_SLOT);  if (doneText == null) {    doneText="";  }  final List<String> done=Arrays.asList(doneText.split(";"));  for (  final String fish : neededFish) {    if (!done.contains(fish)) {      if (hash) {        result.add("#" + fish);      } else {        result.add(fish);      }    }  }  return result;}  }
class C{  public SubscriptionController createSubscriptionTab(final boolean allTab,final ManagedMessageStoreWithFiltering<FormattedMqttMessage> observableMessageStore,final MqttSubscription subscription,final MqttAsyncConnection connection,final MqttConnectionController connectionController){  final FXMLLoader loader=FxmlUtils.createFxmlLoaderForProjectFile("SubscriptionPane.fxml");  final AnchorPane subscriptionPane=FxmlUtils.loadAnchorPane(loader);  final SubscriptionController subscriptionController=((SubscriptionController)loader.getController());  final Tab tab=new Tab();  if (subscription != null) {    eventBus.subscribeWithFilterOnly(subscriptionController,null,SubscriptionStatusChangeEvent.class,subscription);  }  subscriptionController.setStore(observableMessageStore);  subscriptionController.setEventBus(eventBus);  subscriptionController.setConfingurationManager(configurationManager);  if (connection != null) {    subscriptionController.setFormattingManager(connection.getStore().getFormattingManager());    subscriptionController.setConnectionProperties(connection.getProperties());  } else {    subscriptionController.setFormattingManager(new FormattingManager(new MqttScriptManager(null,null,null)));  }  subscriptionController.setTab(tab);  subscriptionController.toggleMessagePayloadSize(connectionController.getResizeMessageContentMenu().isSelected());  tab.setClosable(false);  tab.setContent(subscriptionPane);  if (subscription != null) {    tab.setStyle(StylingUtils.createBaseRGBString(subscription.getColor()));  }  if (allTab) {    subscriptionControllers.put(ALL_SUBSCRIPTIONS_TAB_TITLE,subscriptionController);    tab.setGraphic(new Label(ALL_SUBSCRIPTIONS_TAB_TITLE));    tab.getGraphic().getStyleClass().add("subscribed");  } else {    logger.debug("Mapping subscription topic {} to controller",subscription.getTopic());    subscriptionControllers.put(subscription.getTopic(),subscriptionController);    tab.setGraphic(new Label(subscription.getTopic()));    tab.getGraphic().getStyleClass().add("unsubscribed");    tab.setTooltip(new Tooltip("Status: " + "unsubscribed"));  }  return subscriptionController;}  }
class C{  protected void deleteDevice(Device device){  ArrayList<Entity> emptyToKeep=new ArrayList<Entity>();  for (  Entity entity : device.getEntities()) {    this.removeEntity(entity,device.getEntityClass(),device.getDeviceKey(),emptyToKeep);  }  if (!deviceMap.remove(device.getDeviceKey(),device)) {    if (logger.isDebugEnabled())     logger.debug("device map does not have this device -" + device.toString());  }}  }
class C{  public boolean isFtAutoAcceptedModeChangeable(){  return readBoolean(RcsSettingsData.AUTO_ACCEPT_FT_CHANGEABLE);}  }
class C{  public static boolean detect_new_version(Context ctx,String package_name){  InstalledApp app=find_app(package_name);  if (app == null) {    return false;  }  try {    PackageInfo pi=ctx.getPackageManager().getPackageInfo(package_name,0);    if (pi == null || pi.versionName == null || pi.versionName.equals(app.get_version())) {      return false;    }    app.set_version(pi.versionName);    app.set_has_notified(false);    if (!app.is_update_available() && app.get_download_id() != 0) {      app.clean_downloads(ctx);    }    app.save();    return true;  } catch (  PackageManager.NameNotFoundException e) {    Log.v(MainActivity.TAG,"[InstalledApp.detect_new_version] " + package_name + " is not installed on the device!");    return false;  }}  }
class C{  @Ignore("NaN behavior TBD") @Test public void testRhumbDistance_WithNaN() throws Exception {  Location begin=new Location(Double.NaN,Double.NaN);  Location end=new Location(34.2,-119.2);  double distance=begin.rhumbDistance(end);  assertTrue("expecting NaN",Double.isNaN(distance));}  }
class C{  public static void testSecKeyVerifyPos() throws AssertFailException {  boolean result=false;  byte[] sec=BaseEncoding.base16().lowerCase().decode("67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530".toLowerCase());  result=NativeSecp256k1.secKeyVerify(sec);  assertEquals(result,true,"testSecKeyVerifyPos");}  }
class C{  protected void rampSpeedTo(String endSpeedType){  if (_speedType.equals(endSpeedType)) {    return;  }  if (_throttle.getSpeedSetting() <= 0 && (endSpeedType.equals(Warrant.Stop) || endSpeedType.equals(Warrant.EStop))) {synchronized (this) {      _waitForClear=true;    }    _speedType=endSpeedType;    return;  }synchronized (this) {    if (_ramp != null) {      _ramp.quit();      _ramp=null;    }    if (log.isDebugEnabled())     log.debug("rampSpeedTo: \"{}\" from \"{}\" setting= {} for warrant {}",endSpeedType,_speedType,_throttle.getSpeedSetting(),_warrant.getDisplayName());    _ramp=new ThrottleRamp(endSpeedType);    new Thread(_ramp).start();  }}  }
class C{  public static void sinft(double[] y){  com.nr.fft.FFT.sinft(y);}  }
class C{  private void parseConditions(ConditionsType conditions,Boolean allowNonUpnFormat) throws MalformedTokenException {  _startTime=conditions.getNotBefore().toGregorianCalendar(TimeZone.getTimeZone(DEFAULT_TIME_ZONE),null,null).getTimeInMillis();  _expirationTime=conditions.getNotOnOrAfter().toGregorianCalendar(TimeZone.getTimeZone(DEFAULT_TIME_ZONE),null,null).getTimeInMillis();  List<ConditionAbstractType> conditionList=conditions.getConditionOrAudienceRestrictionOrOneTimeUseOrProxyRestriction();  for (  ConditionAbstractType condition : conditionList) {    if (condition instanceof ProxyRestrictionType) {      BigInteger count=((ProxyRestrictionType)condition).getCount();      _isDelegable=(count != null && count.longValue() > 0) ? true : false;    } else     if (condition instanceof AudienceRestrictionType) {      HashSet<String> audienceSet=new HashSet<String>();      audienceSet.addAll(((AudienceRestrictionType)condition).getAudience());      _audienceRestrictionList=Collections.unmodifiableSet(audienceSet);    } else     if (condition instanceof RenewRestrictionType) {      BigInteger count=((RenewRestrictionType)condition).getCount();      _isRenewable=(count != null && count.longValue() > 0) ? true : false;    } else     if (condition instanceof DelegationRestrictionType) {      parseDelegationChain((DelegationRestrictionType)condition,allowNonUpnFormat);    }  }  if (_log.isDebugEnabled()) {    _log.debug("Conditions parsed successfully." + " Got startTime: " + new Date(_startTime) + " expirationTime: "+ new Date(_expirationTime));  }}  }
class C{  public void send(DNSOutgoing out) throws IOException {  if (!out.isEmpty()) {    byte[] message=out.data();    final DatagramPacket packet=new DatagramPacket(message,message.length,_group,DNSConstants.MDNS_PORT);    if (logger.isLoggable(Level.FINEST)) {      try {        final DNSIncoming msg=new DNSIncoming(packet);        if (logger.isLoggable(Level.FINEST)) {          logger.finest("send(" + this.getName() + ") JmDNS out:"+ msg.print(true));        }      } catch (      final IOException e) {        logger.throwing(getClass().toString(),"send(" + this.getName() + ") - JmDNS can not parse what it sends!!!",e);      }    }    final MulticastSocket ms=_socket;    if (ms != null && !ms.isClosed()) {      ms.send(packet);    }  }}  }
class C{  public SequenceItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public GEPExpressionTreeNode parseGeneWithConstants(int gene[],int geneDc[],double geneConstants[],GEPSymbolSet ss){  LinkedList nodeQ=new LinkedList();  LinkedList parentNodeQ=new LinkedList();  GEPSymbol symbols[]=ss.symbols;  int nextGeneIndex=0;  int nextGeneElt;  GEPExpressionTreeNode rootNode, parentNode;  int i;  int constantIndex=0;  GEPSymbol s, s1;  nextGeneElt=gene[nextGeneIndex++];  s=symbols[nextGeneElt];  if (s instanceof GEPConstantTerminalSymbol)   rootNode=new GEPExpressionTreeNode(s,geneConstants[geneDc[constantIndex++]]); else   rootNode=new GEPExpressionTreeNode(s);  for (i=0; i < s.arity; i++) {    s1=symbols[gene[nextGeneIndex++]];    if (s1 instanceof GEPConstantTerminalSymbol)     nodeQ.addLast(new GEPExpressionTreeNode(s1,geneConstants[geneDc[constantIndex++]])); else     nodeQ.addLast(new GEPExpressionTreeNode(s1));    parentNodeQ.addLast(rootNode);  }  while (!nodeQ.isEmpty()) {    GEPExpressionTreeNode node=(GEPExpressionTreeNode)nodeQ.removeFirst();    parentNode=(GEPExpressionTreeNode)parentNodeQ.removeFirst();    parentNode.addParameter(node);    int arity=node.symbol.arity;    for (i=0; i < arity; i++) {      s1=symbols[gene[nextGeneIndex++]];      if (s1 instanceof GEPConstantTerminalSymbol)       nodeQ.addLast(new GEPExpressionTreeNode(s1,geneConstants[geneDc[constantIndex++]])); else       nodeQ.addLast(new GEPExpressionTreeNode(s1));      parentNodeQ.addLast(node);    }  }  return rootNode;}  }
class C{  public TransferEntropyCalculatorDiscrete(int base,int destHistoryEmbedLength,int destEmbeddingDelay,int sourceHistoryEmbeddingLength,int sourceEmbeddingDelay,int delay){  super(base,destHistoryEmbedLength);  this.destEmbeddingDelay=destEmbeddingDelay;  if (sourceHistoryEmbeddingLength <= 0) {    throw new RuntimeException("Cannot have source embedding length of zero or less");  }  this.sourceHistoryEmbedLength=sourceHistoryEmbeddingLength;  this.sourceEmbeddingDelay=sourceEmbeddingDelay;  this.delay=delay;  base_power_l=MathsUtils.power(base,sourceHistoryEmbedLength);  if (sourceHistoryEmbedLength > Math.log(Integer.MAX_VALUE) / log_base) {    throw new RuntimeException("Base and source history combination too large");  }  maxShiftedSourceValue=new int[base];  for (int v=0; v < base; v++) {    maxShiftedSourceValue[v]=v * MathsUtils.power(base,sourceHistoryEmbedLength - 1);  }  sourceNextPastCount=new int[base_power_l][base][base_power_k];  sourcePastCount=new int[base_power_l][base_power_k];  int startTimeBasedOnDestPast=(k - 1) * destEmbeddingDelay + 1;  int startTimeBasedOnSourcePast=(sourceHistoryEmbedLength - 1) * sourceEmbeddingDelay + delay;  startObservationTime=Math.max(startTimeBasedOnDestPast,startTimeBasedOnSourcePast);}  }
class C{  public int skipFully(int n) throws IOException {  int total=0;  int cur;  while (total < n && (cur=(int)in.skip(n - total)) > 0) {    total+=cur;  }  return total;}  }
class C{  public AttributeSet removeAttribute(AttributeSet old,Object key){  if (key instanceof StyleConstants) {    HTML.Tag tag=HTML.getTagForStyleConstantsKey((StyleConstants)key);    if (tag != null) {      old=super.removeAttribute(old,tag);    }    Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);    if (cssKey != null) {      return super.removeAttribute(old,cssKey);    }  }  return super.removeAttribute(old,key);}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_UTF8);  out.writeUTF8(_value);}  }
class C{  @Override public UpdateResponse commit() throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.commit();  return ur;}  }
class C{  public CViewLoadOperation(final INaviView view){  m_view=view;  m_progressBar=new CProgressPanel(String.format("Loading view '%s'",view.getName()),true,false);  m_progressBar.start();  CGlobalProgressManager.instance().add(this);}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(nombre)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DocumentosVitalesConstants.LABEL_DOCVITALES_DOCVITAL_TIPODOCVITAL_NOMBRE,request.getLocale())));  }  return errors;}  }
class C{  public UndoAction(KseFrame kseFrame){  super(kseFrame);  defaultName=res.getString("UndoAction.text");  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("UndoAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));  putValue(LONG_DESCRIPTION,res.getString("UndoAction.statusbar"));  putValue(NAME,defaultName);  putValue(SHORT_DESCRIPTION,res.getString("UndoAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("UndoAction.image")))));}  }
class C{  private int calculateNewCapacity(){  int oldCapacity=queue.length;  int newCapacity=(oldCapacity < 64) ? (oldCapacity + 1) * 2 : IntMath.checkedMultiply(oldCapacity / 2,3);  return capAtMaximumSize(newCapacity,maximumSize);}  }
class C{  private void recvpackets(){  for (  NetworkPacket hs : packetrecieved) {    hs.pkt.recievetime=CloudSim.clock();    Vm vm=VmList.getById(getVmList(),hs.pkt.reciever);    List<HostPacket> pktlist=((NetworkCloudletSpaceSharedScheduler)vm.getCloudletScheduler()).pktrecv.get(hs.pkt.sender);    if (pktlist == null) {      pktlist=new ArrayList<HostPacket>();      ((NetworkCloudletSpaceSharedScheduler)vm.getCloudletScheduler()).pktrecv.put(hs.pkt.sender,pktlist);    }    pktlist.add(hs.pkt);  }  packetrecieved.clear();}  }
class C{  public static LogicConstantNode forBoolean(boolean v,Graph graph){  return graph.unique(new LogicConstantNode(v));}  }
class C{  public boolean isLookup(){  return m_lookup;}  }
class C{  public static KeyStorage createKeyStorage(Context context,int currentSdkInt,String prefFileName,String keystoreAlias,int saltIndex,String cipherAlgorithm,String presharedSecret,SaltGenerator saltGenerator) throws GeneralSecurityException {  int oldWrapperType=determineCurrentWrapperType(context,prefFileName,keystoreAlias);  int bestSupportedWrapperType=determineBestSupportedWrapperType(context,currentSdkInt,prefFileName,keystoreAlias);  return createKeyStorage(context,currentSdkInt,prefFileName,keystoreAlias,saltIndex,cipherAlgorithm,presharedSecret,saltGenerator,oldWrapperType,bestSupportedWrapperType);}  }
class C{  public long roundTripTime(long timeout,TimeUnit unit) throws InterruptedException {  if (latch.await(timeout,unit)) {    return received - sent;  } else {    return -2;  }}  }
class C{  private void calc1BytePrices(int pos,int posState,int avail,int anyRepPrice){  boolean nextIsByte=false;  int curByte=lz.getByte(0);  int matchByte=lz.getByte(opts[optCur].reps[0] + 1);  int literalPrice=opts[optCur].price + literalEncoder.getPrice(curByte,matchByte,lz.getByte(1),pos,opts[optCur].state);  if (literalPrice < opts[optCur + 1].price) {    opts[optCur + 1].set1(literalPrice,optCur,-1);    nextIsByte=true;  }  if (matchByte == curByte && (opts[optCur + 1].optPrev == optCur || opts[optCur + 1].backPrev != 0)) {    int shortRepPrice=getShortRepPrice(anyRepPrice,opts[optCur].state,posState);    if (shortRepPrice <= opts[optCur + 1].price) {      opts[optCur + 1].set1(shortRepPrice,optCur,0);      nextIsByte=true;    }  }  if (!nextIsByte && matchByte != curByte && avail > MATCH_LEN_MIN) {    int lenLimit=Math.min(niceLen,avail - 1);    int len=lz.getMatchLen(1,opts[optCur].reps[0],lenLimit);    if (len >= MATCH_LEN_MIN) {      nextState.set(opts[optCur].state);      nextState.updateLiteral();      int nextPosState=(pos + 1) & posMask;      int price=literalPrice + getLongRepAndLenPrice(0,len,nextState,nextPosState);      int i=optCur + 1 + len;      while (optEnd < i)       opts[++optEnd].reset();      if (price < opts[i].price)       opts[i].set2(price,optCur,0);    }  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="lr";  String vmSelectionPolicy="mmt";  String parameter="1.2";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public boolean isOnline(){  return online;}  }
class C{  public void addClusterTopologyListenerForReplication(ClusterTopologyListener listener){  replicationLocator.addClusterTopologyListener(listener);}  }
class C{  public static ECKey fromPrivateAndPrecalculatedPublic(byte[] priv,byte[] pub){  checkNotNull(priv);  checkNotNull(pub);  return new ECKey(new BigInteger(1,priv),CURVE.getCurve().decodePoint(pub));}  }
class C{  int copy(int srcIndex){  return srcPool.copy(srcIndex,destPool,classnames);}  }
class C{  public void startCandidateTrickle(TrickleCallback trickleCallback) throws IllegalStateException {  if (!isTrickling()) {    throw new IllegalStateException("Trying to start trickling without enabling it on the agent!");  }  if (harvestingStarted) {    logger.warning("Hmmm ... why are you harvesting twice? You shouldn't be!");  }  List<Component> components=new LinkedList<>();  for (  IceMediaStream stream : getStreams()) {    components.addAll(stream.getComponents());  }  harvesters.harvest(components,trickleCallback);  trickleCallback.onIceCandidates(null);}  }
class C{  private JspPropertyGroup selectProperty(JspPropertyGroup prev,JspPropertyGroup curr){  if (prev == null) {    return curr;  }  if (prev.getExtension() == null) {    return prev;  }  if (curr.getExtension() == null) {    return curr;  }  String prevPath=prev.getPath();  String currPath=curr.getPath();  if (prevPath == null && currPath == null) {    return prev;  }  if (prevPath == null && currPath != null) {    return curr;  }  if (prevPath != null && currPath == null) {    return prev;  }  if (prevPath.length() >= currPath.length()) {    return prev;  }  return curr;}  }
class C{  public void appendText(String text){}  }
class C{  public void remove(){  throw new UnsupportedOperationException(getClass().getName());}  }
class C{  private void checkEmpty(){  for (int i=0; i < gridCount(); i++) {    IgniteCache<Integer,String> cache=jcache(i);    assertEquals(0,cache.localSize());    assertEquals(0,cache.size());    for (    CachePeekMode peekMode : CachePeekMode.values()) {      assertEquals(0,cache.localSize(peekMode));      assertEquals(0,cache.size(peekMode));    }  }  checkPrimarySize(0);}  }
class C{  protected boolean flipEastAndWestAtEnds(int position,Position.Bias bias){  Document doc=getDocument();  position=getStartOffset();  return !AbstractDocument.isLeftToRight(doc,position,position + 1);}  }
class C{  public Response(String status,String mimeType,String txt){  this.status=status;  this.mimeType=mimeType;  try {    this.data=new ByteArrayInputStream(txt.getBytes("UTF-8"));  } catch (  java.io.UnsupportedEncodingException uee) {    uee.printStackTrace();  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.AUTO_TRANSITION_BLOCK___GUARD_1:    getGuard_1().clear();  getGuard_1().addAll((Collection<? extends Guard_>)newValue);return;case UmplePackage.AUTO_TRANSITION_BLOCK___ACTION_1:getAction_1().clear();getAction_1().addAll((Collection<? extends Action_>)newValue);return;case UmplePackage.AUTO_TRANSITION_BLOCK___STATE_NAME_1:setStateName_1((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static int parseInt(java.lang.String s,int radix) throws java.lang.NumberFormatException {  return 0;}  }
class C{  public boolean sanitizeRequestedKeyIds(TokenKeysBundle bundle,String reqId){  int sz=bundle.getKeyEntries().size();  if (sz == 0) {    log.info("There is no cached bundle to compare against.");    return true;  }  String upperBound=sz == 1 ? null : bundle.getKeyEntries().get(1);  String lowerBound=bundle.getKeyEntries().get(0);  long lowKey=Long.parseLong(lowerBound);  long highKey=upperBound == null ? 0 : Long.parseLong(upperBound);  long requestedKeyId=Long.parseLong(reqId);  long rotationInterval=maxLifeValuesHolder.computeRotationTimeInMSecs();  rotationInterval+=CassandraTokenValidator.FOREIGN_TOKEN_KEYS_BUNDLE_REFRESH_RATE_IN_MINS * 60 * 1000;  if (upperBound == null) {    if (requestedKeyId < lowKey || requestedKeyId > lowKey + rotationInterval) {      log.error("One bound.  Key id {} is not legitimate for query",requestedKeyId);      return false;    }    log.info("One bound. Key id {} is legitimate for query",requestedKeyId);    return true;  }  if (requestedKeyId < lowKey || (requestedKeyId > lowKey && requestedKeyId < highKey) || requestedKeyId > highKey + rotationInterval) {    log.error("Two bounds.  Key id {} is not legitimate for query",requestedKeyId);    return false;  }  log.info("Two bounds.  Key id {} is legitimate for query",requestedKeyId);  return true;}  }
class C{  public double cdf(double x){  return Probability.gamma(alpha,lambda,x);}  }
class C{  final boolean isInvalid(){  if (status == null) {    status=(this.path.indexOf('\u0000') < 0) ? PathStatus.CHECKED : PathStatus.INVALID;  }  return status == PathStatus.INVALID;}  }
class C{  public static void log(final long actionId){  if (!m_countMap.containsKey(actionId)) {    m_countMap.put(actionId,0);  }  m_countMap.put(actionId,m_countMap.get(actionId) + 1);  try {    FileUtils.writeTextFile(m_actionsLogFile,mapToText());  } catch (  final IOException e) {    CUtilityFunctions.logException(e);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.EXPORT_SPECIFIER__ELEMENT:    setElement((IdentifierRef)newValue);  return;case N4JSPackage.EXPORT_SPECIFIER__ALIAS:setAlias((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public double valueAt(double x){  return constant * Math.pow(1 - x * x,outsideExp);}  }
class C{  public static final Parameter base(){  return new Parameter(P_ES);}  }
class C{  @Override public int read() throws IOException {  if (max >= 0 && pos >= max) {    return -1;  }  int result=in.read();  pos++;  return result;}  }
class C{  public void deleteQtree(String path,boolean force){  if (log.isDebugEnabled()) {    log.debug("Deleting Qtree " + path);  }  ClusterQtreeCommands commands=new ClusterQtreeCommands(server.getNaServer());  commands.deleteQtree(path,force);}  }
class C{  public Class<?> marshalType(Class<?> sourceType){  if (sourceType == null) {    return null;  }  Class<?> targetType=getTargetType(getTargetLoader(),sourceType);  if (targetType != null) {    return targetType;  } else {    return sourceType;  }}  }
class C{  public T caseStringEvaluator(StringEvaluator object){  return null;}  }
class C{  private CSVParser(String path,Charset encoding) throws IOException {  this(Paths.get(path),encoding);}  }
class C{  @Deprecated public static int rank(int key,int[] a){  return indexOf(a,key);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  protected Object translateLeftToRight(Object left){  return null;}  }
class C{  public int partition(int left,int right,int pivotIndex){  E pivot=ar[pivotIndex];  E tmp=ar[right];  ar[right]=ar[pivotIndex];  ar[pivotIndex]=tmp;  int store=left;  for (int idx=left; idx < right; idx++) {    if (ar[idx].compareTo(pivot) <= 0) {      tmp=ar[idx];      ar[idx]=ar[store];      ar[store]=tmp;      store++;    }  }  tmp=ar[right];  ar[right]=ar[store];  ar[store]=tmp;  return store;}  }
class C{  private Set<DTNHost> selectTrackedHosts(List<DTNHost> allHosts){  Set<DTNHost> trackedHosts=new HashSet<DTNHost>();  if (this.nrofHosts > allHosts.size()) {    throw new SettingsError("Can't use more hosts than there are " + "in the simulation scenario");  }  for (int i=0; i < nrofHosts; i++) {    DTNHost nextHost=allHosts.get(rng.nextInt(allHosts.size()));    if (trackedHosts.contains(nextHost)) {      i--;    } else {      trackedHosts.add(nextHost);    }  }  return trackedHosts;}  }
class C{  public FolderTokenMultFld findById(int fldId) throws Exception {  int i;  FolderTokenMultFld fld=null;  boolean find=false;  for (i=0; i < count(); i++) {    fld=get(i);    if (fld.getId() == fldId) {      find=true;      break;    }  }  if (!find) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  return fld;}  }
class C{  public boolean hasCostBasis(){  return hasExtension(CostBasis.class);}  }
class C{  public RandomInitialization(Problem problem,int populationSize){  super();  this.problem=problem;  this.populationSize=populationSize;}  }
class C{  public JumpingSolitaireState(int n){  if (n < 10) {    throw new IllegalArgumentException("invalid triangle problem size. Must be >= 10");  }  k=n;  filled=new boolean[k];  for (int i=0; i < k; i++) {    filled[i]=true;  }  filled[4]=false;  r=1 + (int)(Math.ceil(Math.sqrt(k)));  computeMoves();}  }
class C{  private void assertBacklog(int specifiedBacklog,InetSocketAddress serverAddress) throws IOException {  List<Socket> backlog=new ArrayList<Socket>();  int peak=0;  try {    int max=100;    for (int i=0; i < max; i++) {      Socket socket=new Socket();      backlog.add(socket);      socket.connect(serverAddress,500);      peak++;    }    fail("Failed to exhaust backlog after " + max + " connections!");  } catch (  IOException expected) {  }  System.out.println("backlog peaked at " + peak);  for (  Socket socket : backlog) {    socket.close();  }  assertTrue(peak >= specifiedBacklog && peak <= (specifiedBacklog + 3) * 1.5);}  }
class C{  public boolean equals(Object obj){  if (this == obj)   return true;  if (obj instanceof ECFieldFp) {    return (p.equals(((ECFieldFp)obj).p));  }  return false;}  }
class C{  public int length() throws UnsupportedOperationException {  if (this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR) {    return this.length;  }  throw new UnsupportedOperationException("length meaningless for " + toString());}  }
class C{  void sendReply(InternalDistributedMember member,int procId,DM dm,ReplyException ex,boolean result,int bucketIndexesRemoved,int totalNumBuckets){  RemoveIndexesReplyMessage.send(member,processorId,dm,ex,result,bucketIndexesRemoved,totalNumBuckets);}  }
class C{  private Call createCall(Request request){  final Request.Builder builder=request.newBuilder();  if (RequestUtils.isRelative(request)) {    builder.url(RequestUtils.replaceEndPoint(request.url().toString(),getEndPoint()));  }  String userAgent=RequestUtils.getUserAgent();  if (defaultHeaders != null) {    for (    String key : defaultHeaders.names()) {      builder.header(key,defaultHeaders.get(key));    }    if (defaultHeaders.get(HttpHeaders.USER_AGENT) != null) {      userAgent+=" " + defaultHeaders.get(HttpHeaders.USER_AGENT);    }  }  builder.header(HttpHeaders.USER_AGENT,userAgent);  setAuthentication(builder);  final Request newRequest=builder.build();  return client.newCall(newRequest);}  }
class C{  public ASN1InputStream(InputStream input,boolean lazyEvaluate){  this(input,StreamUtil.findLimit(input),lazyEvaluate);}  }
class C{  MetaData loadFullState() throws Exception {  MetaData globalMetaData=loadGlobalState();  MetaData.Builder metaDataBuilder;  if (globalMetaData != null) {    metaDataBuilder=MetaData.builder(globalMetaData);  } else {    metaDataBuilder=MetaData.builder();  }  final Set<String> indices=nodeEnv.findAllIndices();  for (  String index : indices) {    IndexMetaData indexMetaData=loadIndexState(index);    if (indexMetaData == null) {      logger.debug("[{}] failed to find metadata for existing index location",index);    } else {      metaDataBuilder.put(indexMetaData,false);    }  }  return metaDataBuilder.build();}  }
class C{  public static String restoreAutoSaveList(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue productStore=ProductStoreWorker.getProductStore(request);  if (!ProductStoreWorker.autoSaveCart(productStore)) {    return "success";  }  HttpSession session=request.getSession();  ShoppingCart cart=ShoppingCartEvents.getCartObject(request);  if (cart.getWebSiteId() == null) {    cart.setWebSiteId(WebSiteWorker.getWebSiteId(request));  }  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  if (userLogin == null) {    userLogin=(GenericValue)session.getAttribute("autoUserLogin");  }  String autoSaveListId=cart.getAutoSaveListId();  if (autoSaveListId == null) {    try {      autoSaveListId=getAutoSaveListId(delegator,dispatcher,null,userLogin,cart.getProductStoreId());    } catch (    GeneralException e) {      Debug.logError(e,module);    }    cart.setAutoSaveListId(autoSaveListId);  } else   if (userLogin != null) {    String existingAutoSaveListId=null;    try {      existingAutoSaveListId=getAutoSaveListId(delegator,dispatcher,null,userLogin,cart.getProductStoreId());    } catch (    GeneralException e) {      Debug.logError(e,module);    }    if (existingAutoSaveListId != null) {      if (!existingAutoSaveListId.equals(autoSaveListId)) {        cart.setAutoSaveListId(existingAutoSaveListId);        autoSaveListId=existingAutoSaveListId;        cart.setLastListRestore(null);      } else {        return "success";      }    }  }  java.sql.Timestamp lastLoad=cart.getLastListRestore();  boolean okayToLoad=autoSaveListId == null ? false : (lastLoad == null ? true : false);  if (!okayToLoad && lastLoad != null) {    GenericValue shoppingList=null;    try {      shoppingList=EntityQuery.use(delegator).from("ShoppingList").where("shoppingListId",autoSaveListId).queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }    if (shoppingList != null) {      java.sql.Timestamp lastModified=shoppingList.getTimestamp("lastAdminModified");      if (lastModified != null) {        if (lastModified.after(lastLoad)) {          okayToLoad=true;        }        if (cart.size() == 0 && lastModified.after(cart.getCartCreatedTime())) {          okayToLoad=true;        }      }    }  }  if (okayToLoad) {    String prodCatalogId=CatalogWorker.getCurrentCatalogId(request);    try {      addListToCart(delegator,dispatcher,cart,prodCatalogId,autoSaveListId,false,false,userLogin != null ? true : false);      cart.setLastListRestore(UtilDateTime.nowTimestamp());    } catch (    IllegalArgumentException e) {      Debug.logError(e,module);    }  }  return "success";}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void prepareCacheConfiguration(IgniteConfiguration cfg,CacheConfiguration ccfg){  FileSystemConfiguration[] igfsCfgs=cfg.getFileSystemConfiguration();  if (igfsCfgs != null) {    for (    FileSystemConfiguration igfsCfg : igfsCfgs) {      if (igfsCfg != null) {        if (F.eq(ccfg.getName(),igfsCfg.getMetaCacheName())) {          ccfg.setCopyOnRead(false);          ccfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);          if (igfsCfg.isColocateMetadata() && ccfg.getAffinityMapper() == null)           ccfg.setAffinityMapper(new IgfsColocatedMetadataAffinityKeyMapper());          return;        }        if (F.eq(ccfg.getName(),igfsCfg.getDataCacheName())) {          ccfg.setCopyOnRead(false);          ccfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);          if (ccfg.getAffinityMapper() == null)           ccfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper());          return;        }      }    }  }}  }
class C{  protected void execGroovy(final String txt,final PrintStream out){  log.debug("execGroovy()");  if ("".equals(txt.trim())) {    return;  }  log.verbose("Script: " + txt);  if (classpath != null) {    log.debug("Explicit Classpath: " + classpath.toString());  }  if (fork) {    log.debug("Using fork mode");    try {      createClasspathParts();      createNewArgs(txt);      super.setFork(fork);      super.setClassname(useGroovyShell ? "groovy.lang.GroovyShell" : "org.codehaus.groovy.ant.Groovy");      configureCompiler();      super.execute();    } catch (    Exception e) {      StringWriter writer=new StringWriter();      new ErrorReporter(e,false).write(new PrintWriter(writer));      String message=writer.toString();      throw new BuildException("Script Failed: " + message,e,getLocation());    }    return;  }  Object mavenPom=null;  final Project project=getProject();  final ClassLoader baseClassLoader;  ClassLoader savedLoader=null;  final Thread thread=Thread.currentThread();  boolean maven="org.apache.commons.grant.GrantProject".equals(project.getClass().getName());  if (maven) {    if (contextClassLoader) {      throw new BuildException("Using setContextClassLoader not permitted when using Maven.",getLocation());    }    try {      final Object propsHandler=project.getClass().getMethod("getPropsHandler").invoke(project);      final Field contextField=propsHandler.getClass().getDeclaredField("context");      contextField.setAccessible(true);      final Object context=contextField.get(propsHandler);      mavenPom=InvokerHelper.invokeMethod(context,"getProject",EMPTY_OBJECT_ARRAY);    } catch (    Exception e) {      throw new BuildException("Impossible to retrieve Maven's Ant project: " + e.getMessage(),getLocation());    }    baseClassLoader=mavenPom.getClass().getClassLoader();  } else {    baseClassLoader=GroovyShell.class.getClassLoader();  }  if (contextClassLoader || maven) {    savedLoader=thread.getContextClassLoader();    thread.setContextClassLoader(GroovyShell.class.getClassLoader());  }  final String scriptName=computeScriptName();  final GroovyClassLoader classLoader=new GroovyClassLoader(baseClassLoader);  addClassPathes(classLoader);  configureCompiler();  final GroovyShell groovy=new GroovyShell(classLoader,new Binding(),configuration);  try {    parseAndRunScript(groovy,txt,mavenPom,scriptName,null,new AntBuilder(this));  }  finally {    groovy.resetLoadedClasses();    groovy.getClassLoader().clearCache();    if (contextClassLoader || maven)     thread.setContextClassLoader(savedLoader);  }}  }
class C{  public Project peekProject(AppContext ctx,ProjectPK projectPk) throws ScopeException {  ProjectDynamicContent content=projects.get(projectPk);  if (content != null) {    return getProject(ctx,projectPk);  } else {    return null;  }}  }
class C{  public static ArrayList<Integer> createColors(Context c,int[] colors){  ArrayList<Integer> result=new ArrayList<Integer>();  for (  int i : colors) {    result.add(c.getResources().getColor(i));  }  return result;}  }
class C{  public DistributionLocatorConfig createDistributionLocatorConfig(){  checkReadOnly();  DistributionLocatorConfig config=new DistributionLocatorConfigImpl();  addDistributionLocatorConfig(config);  return config;}  }
class C{  public DefaultLmlParser(final LmlData data,final LmlSyntax syntax){  super(data,syntax,new DefaultLmlTemplateReader(),new DefaultLmlStyleSheet(),true);}  }
class C{  public Matrix4x3d reflect(double nx,double ny,double nz,double px,double py,double pz){  return reflect(nx,ny,nz,px,py,pz,this);}  }
class C{  public BasicRequestHandler(){  this(new ConsoleRequestLogger());}  }
class C{  public void testEqualsUnequal2(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="92948782094488478231212478987482988429808779810457634781384756794987";  int bScale=13;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  assertFalse(aNumber.equals(bNumber));}  }
class C{  public EstimatedPerformance(String name,double value,int numberOfExamples,boolean minimizeForFitness){  this.name=name;  setMikroAverage(value,numberOfExamples);  this.minimizeForFitness=minimizeForFitness;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public ClusterInfo resetProps(PropertyList propertyList){  return resetProps(propertyList,true);}  }
class C{  public VCardFloatFormatter(){  this(6);}  }
class C{  @Override public void extract(BufferedImage image){  image=ImageUtils.get8BitRGBImage(image);  Arrays.fill(histogram,0);  WritableRaster raster=image.getRaster();  for (int x=0; x < image.getWidth(); x++) {    for (int y=0; y < image.getHeight(); y++) {      raster.getPixel(x,y,pixel);      if (histogramType == HistogramType.HSV) {        ColorConversion.rgb2hsv(pixel[0],pixel[1],pixel[2],pixel);        histogram[quant(pixel)]++;      } else       if (histogramType == HistogramType.Luminance) {        rgb2yuv(pixel[0],pixel[1],pixel[2],pixel);      } else       if (histogramType == HistogramType.HMMD) {        histogram[quantHmmd(rgb2hmmd(pixel[0],pixel[1],pixel[2]),DEFAULT_NUMBER_OF_BINS)]++;      } else       histogram[quant(pixel)]++;    }  }  normalize(histogram,image.getWidth() * image.getHeight());}  }
class C{  private String commandSet(String[] parameters){  if (parameters.length == 2) {    String name=parameters[0].trim();    String categoriesString=parameters[1].trim();    Set<String> categories=getCategoriesFromString(categoriesString);    AddressbookEntry previousEntry=get(name);    clearSomewhatUniqueCategories(categories);    set(name,categories);    String categoriesOutput=categoriesToString(categories);    if (previousEntry == null) {      return "Added '" + name + "' with categories "+ categoriesOutput+ ".";    } else     if (previousEntry.getCategories().equals(categories)) {      return "Didn't change '" + name + "', categories already "+ categoriesOutput+ ".";    }    return "Set '" + name + "' to categories "+ categoriesOutput+ ".";  }  return "Set: Invalid number of parameters.";}  }
class C{  public boolean equals(Object obj){  return (obj != null && obj instanceof CompoundName && impl.equals(((CompoundName)obj).impl));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrdeletedatacountnegative.class,args);}  }
class C{  private GridNioFuture<Boolean> shutdownSession(GridNioSession ses,GridNioSslHandler hnd) throws IgniteCheckedException {  try {    hnd.closeOutbound();    hnd.writeNetBuffer();  } catch (  SSLException e) {    U.warn(log,"Failed to shutdown SSL session gracefully (will force close) [ex=" + e + ", ses="+ ses+ ']');  }  return proceedSessionClose(ses);}  }
class C{  public static AsymmetricKeyParameter createKey(InputStream inStr) throws IOException {  return createKey(PrivateKeyInfo.getInstance(new ASN1InputStream(inStr).readObject()));}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public static String valueOf(float value){  return Float.toString(value);}  }
class C{  @Override protected void parse(){  confirmDropMessage=getConfig().getBoolean(PARAM_CONFIRM_DROP_MESSAGE_KEY,false);  buttonMode=getConfig().getInt(PARAM_UI_BUTTON_MODE,BUTTON_MODE_SIMPLE);  alwaysOnTop=getConfig().getBoolean(PARAM_BRK_ALWAYS_ON_TOP,null);  inScopeOnly=getConfig().getBoolean(PARAM_BRK_IN_SCOPE_ONLY,false);}  }
class C{  public static String checksumEnc(final long c,final boolean compl){  byte[] asc=new byte[CHECKSUM_STRING_SIZE];  final int[] exclude={0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x5b,0x5c,0x5d,0x5e,0x5f,0x60};  final long[] mask={BYTE_4_OF_LONG_MASK,BYTE_3_OF_LONG_MASK,BYTE_2_OF_LONG_MASK,BYTE_1_OF_LONG_MASK};  final int offset=0x30;  final long value=compl ? ~c : c;  for (int i=0; i < CHECKSUM_BLOCK_SIZE; i++) {    final int byt=(int)((value & mask[i]) >>> FitsIO.BITS_OF_3_BYTES - FitsIO.BITS_OF_1_BYTE * i);    final int quotient=byt / CHECKSUM_BLOCK_SIZE + offset;    final int remainder=byt % CHECKSUM_BLOCK_SIZE;    int[] ch=new int[CHECKSUM_BLOCK_SIZE];    for (int j=0; j < CHECKSUM_BLOCK_SIZE; j++) {      ch[j]=quotient;    }    ch[0]+=remainder;    boolean check=true;    while (check) {      check=false;      for (      int element : exclude) {        for (int j=0; j < CHECKSUM_BLOCK_SIZE; j+=CHECKSUM_HALF_BLOCK_SIZE) {          if (ch[j] == element || ch[j + 1] == element) {            ch[j]++;            ch[j + 1]--;            check=true;          }        }      }    }    for (int j=0; j < CHECKSUM_BLOCK_SIZE; j++) {      asc[CHECKSUM_BLOCK_SIZE * j + i]=(byte)ch[j];    }  }  String resul=AsciiFuncs.asciiString(asc,CHECKSUM_STRING_SIZE - 1,1);  return resul.concat(AsciiFuncs.asciiString(asc,0,CHECKSUM_STRING_SIZE - 1));}  }
class C{  private static void closeAll(final Iterable<CGraphPanel> panels){  for (  final CGraphPanel panel : panels) {    panel.close(false);  }}  }
class C{  public int indexOfNext(char c){  for (int i=pos; i < lcText.length; i++) {    if (lcText[i] == c)     return i;  }  return -1;}  }
class C{  public void homeDocumentosExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.DOCUMENTOS_VITALES_GESTIONAR_DOCUMENTOS,request);  List documentos=getGestionDocumentosVitalesBI(request).getDocumentosVitalesAGestionar();  if (documentos.size() > 5)   documentos=documentos.subList(0,5);  request.setAttribute(DocumentosVitalesConstants.DOCUMENTOS_VITALES_KEY,documentos);  setReturnActionFordward(request,mappings.findForward("home_documentos_vitales"));}  }
class C{  public static StringBuilder formatTo(StringBuilder buf,float[] d,String sep){  if (d == null) {    return buf.append("null");  }  if (d.length == 0) {    return buf;  }  buf.append(d[0]);  for (int i=1; i < d.length; i++) {    buf.append(sep);    buf.append(d[i]);  }  return buf;}  }
class C{  public void addProviderName(Provider provider,String name){  if (provider == Provider.GENERIC) {    provider.setName(name);  } else {    Log.d("SocialAuthAdapter","Only to set Generic Provider Name");  }}  }
class C{  public byte[] toByteArray(){  byte[] newArray=new byte[count];  System.arraycopy(buf,0,newArray,0,count);  return newArray;}  }
class C{  @Override public String toString(){  if (className != null) {    return className + "." + super.toString();  } else {    return super.toString();  }}  }
class C{  public static FSDirectory newFSDirectory(Class<? extends FSDirectory> clazz,Path path,LockFactory lf) throws ReflectiveOperationException {  Constructor<? extends FSDirectory> ctor=clazz.getConstructor(Path.class,LockFactory.class);  return ctor.newInstance(path,lf);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public static byte[] MD5(final byte[] message,final int offset,final int length){  MessageDigest digest;  try {    digest=MessageDigest.getInstance("MD5");    digest.update(message,offset,length);    final byte[] md5=digest.digest();    return md5;  } catch (  final NoSuchAlgorithmException e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }  }  return null;}  }
class C{  private void removeAllJointsAction(){  int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.jointFolder.removeAll.warning"),Messages.getString("menu.context.jointFolder.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);  if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().removeAllJoints();    }    this.jointFolder.removeAllChildren();    this.model.reload(this.jointFolder);  }}  }
class C{  public static String readFileAsString(String absolutePath) throws IOException {  return new FileReader(absolutePath).readFully().toString(StandardCharsets.UTF_8);}  }
class C{  public ModelImporterVisualPanel3(ModelImporterWizardPanel3 panel){  initComponents();  this.panel=panel;  offPanel=new OffScenePanel(320,320);  jPanel1.add(offPanel);}  }
class C{  private void initData(Context context){  scroller=new WheelScroller(getContext(),scrollingListener);}  }
class C{  private void extractValuesFromEntry(int numValue,String attrName,GoogleBaseEntry entry){  MetadataEntryExtension metadata=entry.getGoogleBaseMetadata();  AttributeHistogram attributeHistogram=metadata.getAttributeHistogram();  List<? extends UniqueValue> values=attributeHistogram.getValues();  int valuesCount=Math.min(numValue,values.size());  String[] usedValues=new String[valuesCount];  for (int i=0; i < valuesCount; i++) {    usedValues[i]=values.get(i).getValueAsString();  }  updateMostUsedValue(attrName,usedValues);}  }
class C{  public final void writeShort(int v) throws IOException {  write((v >>> 8) & 0xFF);  write((v) & 0xFF);}  }
class C{  @Override public boolean test(final Array params){  return true;}  }
class C{  public OrientedPortrayal2D(SimplePortrayal2D child,int offset,double scale,Paint paint){  this(child,offset,scale,paint,SHAPE_LINE);}  }
class C{  public static AttribKey forHtmlAttrib(ElKey el,String localName){  return new AttribKey(el,HTML_NS,localName);}  }
class C{  public static boolean verifyDiscoverInfoVersion(String ver,String hash,DiscoverInfo info){  if (info.containsDuplicateIdentities())   return false;  if (info.containsDuplicateFeatures())   return false;  if (verifyPacketExtensions(info))   return false;  String calculatedVer=generateVerificationString(info,hash);  if (!ver.equals(calculatedVer))   return false;  return true;}  }
class C{  private List<int[]> prepareExpectedData(){  List<int[]> indexList=new ArrayList<>(2);  int[] sortIndex={0,3,2,4,1};  int[] sortIndexInverted={0,2,4,1,2};  indexList.add(0,sortIndex);  indexList.add(1,sortIndexInverted);  return indexList;}  }
class C{  protected void runDownload(DownloaderInputManifestDto downloaderInputManifestDto,String localPath,Integer numOfThreads,String hostname) throws Exception {  String hostnameToUse=hostname == null ? WEB_SERVICE_HOSTNAME : hostname;  uploadAndRegisterTestDataParents(downloaderWebClient);  uploadAndRegisterTestData(S3_TEST_PATH_V0);  File downloaderInputManifestFile=createManifestFile(LOCAL_TEMP_PATH_INPUT.toString(),downloaderInputManifestDto);  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=getTestS3FileTransferRequestParamsDto();  s3FileTransferRequestParamsDto.setS3KeyPrefix(S3_TEST_PATH_V0);  s3FileTransferRequestParamsDto.setLocalPath(localPath);  s3FileTransferRequestParamsDto.setMaxThreads(numOfThreads);  RegServerAccessParamsDto regServerAccessParamsDto=RegServerAccessParamsDto.builder().regServerHost(hostnameToUse).regServerPort(WEB_SERVICE_HTTPS_PORT).useSsl(true).username(WEB_SERVICE_HTTPS_USERNAME).password(WEB_SERVICE_HTTPS_PASSWORD).build();  downloaderController.performDownload(regServerAccessParamsDto,downloaderInputManifestFile,s3FileTransferRequestParamsDto);}  }
class C{  public String toString(){  String interpolation=null;  return this.getClass().getName() + "(" + ((cdf != null) ? cdf.length : 0)+ ")";}  }
class C{  protected static int convertInteger(Element filterElement,String attrName,int defaultValue,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,attrName);  if (s.length() == 0) {    return defaultValue;  } else {    try {      return SVGUtilities.convertSVGInteger(s);    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attrName,s});    }  }}  }
class C{  public DoubleAdder(){}  }
class C{  public ExecutableImage loadMainModule(File moduleFile) throws IOException, BinaryParseException {  ExecutableImage module=loadModule(moduleFile);  mainModule=module;  setEntryAddress(module.getEntryPoint());  installStubs();  return module;}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  private CShowViewFunctions(){}  }
class C{  public static WritableByteChannel newChannel(OutputStream outputStream){  return new OutputStreamChannel(outputStream);}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public static void copyDirectoryRecursively(Path source,Path destination) throws IOException {  Files.walkFileTree(source,new TreeCopier(source,destination,false));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:16.574 -0500",hash_original_method="EAEA6182C3DE8E7E3FA46C84A2197DA5",hash_generated_method="B180F6983476FEA8B8920141905124B4") public synchronized boolean acceptCookie(){  if (JniUtil.useChromiumHttpStack()) {    return nativeAcceptCookie();  }  return mAcceptCookie;}  }
class C{  private static void serialize(DataOutputStream out,MethodGroup[] methods) throws IOException {  out.writeInt(SNAPSHOT_MAGIC);  out.writeInt(SNAPSHOT_PROTOCOL_VERSION);  out.writeInt(SNAPSHOT_TYPE_CALLTRACE);  out.writeInt(sessionId);  out.writeLong(System.currentTimeMillis());  int n=0;  for (  MethodGroup m : methods) {    if (m.hits > 0) {      n++;    }  }  Log.print(0,"Retrieving " + n + " methods");  out.writeInt(n);  for (  MethodGroup m : methods) {    if (m.hits == 0) {      continue;    }    out.writeInt(m.globalId & 0xffff);    out.writeUTF(m.name);    out.writeInt(m.hits);    out.writeLong(m.netTime);    out.writeLong(m.selfTime);    out.writeInt(m.childCount);    for (int i=0; i < m.childCount; i++) {      out.writeInt(m.children[i].globalId & 0xffff);      out.writeLong(m.childrenTimes[i]);    }  }}  }
class C{  public void testBoundedGenericMethods(){  assertLenghtOne(clazz.getTypeParameters());}  }
class C{  public Years minus(Years years){  if (years == null) {    return this;  }  return minus(years.getValue());}  }
class C{  public boolean permitInlinedAccess(Environment env,ClassDeclaration c) throws ClassNotFound {  return (env.opt() && c.equals(declaration)) || (env.opt_interclass() && canAccess(env,c));}  }
class C{  private void removeInterest(SelectableChannel channel,int operation){  SelectionKey key=channel.keyFor(selector);  key.interestOps(key.interestOps() & (~operation));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int extractSegmentPart(long segmentedPosition){  return AdaptersSet.extractSegment(segmentedPosition);}  }
class C{  public static int computeColumn(Angle delta,Angle longitude,Angle origin){  if (delta == null || longitude == null || origin == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (delta.degrees <= 0d) {    String message=Logging.getMessage("generic.DeltaAngleOutOfRange",delta);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (longitude.degrees < -180d || longitude.degrees > 180d) {    String message=Logging.getMessage("generic.AngleOutOfRange",longitude);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double gridLongitude=longitude.degrees - origin.degrees;  if (gridLongitude < 0.0)   gridLongitude=360d + gridLongitude;  int col=(int)(gridLongitude / delta.degrees);  if ((longitude.degrees - origin.degrees) == 360d)   col=col - 1;  return col;}  }
class C{  void freeWriteLock(){synchronized (WRITE_LOCK) {    isWriteLocked=false;    WRITE_LOCK.notifyAll();  }}  }
class C{  public ImageBevelBorder(Image img,Insets borderInsets){  this(img,borderInsets,borderInsets,true);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, j, k;  int featureNum, numFeatures;  int filterSize, halfFilterSize;  double[][] geometry;  int numPoints, numParts, part, startingPointInPart, endingPointInPart;  int numPointsInFilter;  ShapeType shapeType;  ShapeFileRecord outputRecord;  double sumX, sumY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  filterSize=Integer.parseInt(args[2]);  if (filterSize < 3) {    filterSize=3;  }  if (filterSize % 2 == 0) {    showFeedback("The filter size must be an odd number. The specified value " + "has been incremented by one.");    filterSize++;  }  halfFilterSize=(int)Math.floor(filterSize / 2.0);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYLINE && shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polyline or polygon base shape type.");      return;    }    ShapeFile output=new ShapeFile(outputFile,shapeType);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    featureNum=0;    for (    ShapeFileRecord record : input.records) {      featureNum++;      PointsList points=new PointsList();      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        startingPointInPart=partData[part];        if (part < numParts - 1) {          endingPointInPart=partData[part + 1];        } else {          endingPointInPart=numPoints;        }        if (geometry[startingPointInPart][0] == geometry[endingPointInPart - 1][0] && geometry[startingPointInPart][1] == geometry[endingPointInPart - 1][1]) {          for (i=startingPointInPart; i < endingPointInPart; i++) {            numPointsInFilter=0;            sumX=0;            sumY=0;            for (j=i - halfFilterSize; j <= i + halfFilterSize; j++) {              k=j;              if (k < startingPointInPart) {                k=endingPointInPart + k - 1;              }              if (k >= endingPointInPart) {                k=startingPointInPart + (k - endingPointInPart) + 1;              }              if (k >= startingPointInPart && k < endingPointInPart) {                numPointsInFilter++;                sumX+=geometry[k][0];                sumY+=geometry[k][1];              }            }            x=sumX / numPointsInFilter;            y=sumY / numPointsInFilter;            points.addPoint(x,y);          }        } else {          for (i=startingPointInPart; i < endingPointInPart; i++) {            numPointsInFilter=0;            sumX=0;            sumY=0;            for (j=i - halfFilterSize; j <= i + halfFilterSize; j++) {              if (j >= startingPointInPart && j < endingPointInPart) {                numPointsInFilter++;                sumX+=geometry[j][0];                sumY+=geometry[j][1];              }            }            x=sumX / numPointsInFilter;            y=sumY / numPointsInFilter;            points.addPoint(x,y);          }        }      }switch (shapeType) {case POLYLINE:        PolyLine line=new PolyLine(partData,points.getPointsArray());      output.addRecord(line);    break;case POLYLINEZ:  PolyLineZ polyLineZ=(PolyLineZ)(record.getGeometry());PolyLineZ linez=new PolyLineZ(partData,points.getPointsArray(),polyLineZ.getzArray(),polyLineZ.getmArray());output.addRecord(linez);break;case POLYLINEM:PolyLineM polyLineM=(PolyLineM)(record.getGeometry());PolyLineM linem=new PolyLineM(partData,points.getPointsArray(),polyLineM.getmArray());output.addRecord(linem);break;case POLYGON:Polygon poly=new Polygon(partData,points.getPointsArray());output.addRecord(poly);break;case POLYGONZ:PolygonZ polygonZ=(PolygonZ)(record.getGeometry());PolygonZ polyz=new PolygonZ(partData,points.getPointsArray(),polygonZ.getzArray(),polygonZ.getmArray());output.addRecord(polyz);break;case POLYGONM:PolygonM polygonM=(PolygonM)(record.getGeometry());PolygonM polym=new PolygonM(partData,points.getPointsArray(),polygonM.getmArray());output.addRecord(polym);break;}if (cancelOp) {cancelOperation();return;}progress=(int)(featureNum * 100.0 / numFeatures);updateProgress(progress);}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean isBackedIntoHullDown(){  return m_bBackedIntoHullDown;}  }
class C{  static private void configureLogging(String config) throws IOException {  Properties p=new Properties();  FileInputStream f=new FileInputStream(config);  try {    p.load(f);  }  finally {    f.close();  }  if (System.getProperty("jmri.log.path") == null || p.getProperty("jmri.log.path") == null) {    System.setProperty("jmri.log.path",FileUtil.getPreferencesPath() + "log" + File.separator);    p.put("jmri.log.path",System.getProperty("jmri.log.path"));  }  File logDir=new File(p.getProperty("jmri.log.path"));  if (!logDir.exists()) {    logDir.mkdirs();  }  PropertyConfigurator.configure(p);}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  public static void verifyCaretsAndSelections(int... coordinates){  int caretCount=coordinates.length / 4;  List<Caret> carets=myEditor.getCaretModel().getAllCarets();  assertEquals("Unexpected caret count",caretCount,carets.size());  for (int i=0; i < caretCount; i++) {    Caret caret=carets.get(i);    assertEquals("Unexpected position for caret " + (i + 1),new VisualPosition(coordinates[i * 4],coordinates[i * 4 + 1]),caret.getVisualPosition());    assertEquals("Unexpected selection start for caret " + (i + 1),new VisualPosition(coordinates[i * 4],coordinates[i * 4 + 2]),caret.getSelectionStartPosition());    assertEquals("Unexpected selection end for caret " + (i + 1),new VisualPosition(coordinates[i * 4],coordinates[i * 4 + 3]),caret.getSelectionEndPosition());  }}  }
class C{  public boolean compareTo(String toCompareType,String toCompareTest){  return this.objectType.equals(toCompareType) && (this.test == null || this.test.equals(toCompareTest));}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (resultCode == RESULT_OK) {    setResult(Activity.RESULT_OK);    finish();  }}  }
class C{  public void test_putGet2(){  final List<IBindingSet[]> in=new LinkedList<IBindingSet[]>();{    final List<IBindingSet> t=new LinkedList<IBindingSet>();{      final ListBindingSet b=new ListBindingSet();      t.add(b);    }{      final ListBindingSet b=new ListBindingSet();      t.add(b);    }    in.add(t.toArray(new IBindingSet[0]));  }  final String solutionSet=getName();  try {    solutionSetsManager.getSolutions(solutionSet);    fail("Expecting: " + IllegalStateException.class);  } catch (  IllegalStateException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }  solutionSetsManager.putSolutions(solutionSet,new CloseableIteratorWrapper<IBindingSet[]>(in.iterator()));  final ICloseableIterator<IBindingSet[]> out=solutionSetsManager.getSolutions(solutionSet);  assertSameSolutionsAnyOrder(flatten(in.iterator()),out);}  }
class C{  public boolean isWildcard(){  return true;}  }
class C{  public boolean isDbFilled(){  if (!isEmpty())   return true;  return super.getNextRowId() != 0;}  }
class C{  public Segment flush(){  buffer.flush();  offsetIndex.flush();  return this;}  }
class C{  public JPaymentBank(JPaymentNotifier notifier){  m_notifier=notifier;  initComponents();  m_jTendered.addPropertyChangeListener("Edition",new RecalculateState());  m_jTendered.addEditorKeys(m_jKeys);}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public ShoppingCart(ShoppingCart cart){  this.delegator=cart.getDelegator();  this.delegatorName=delegator.getDelegatorName();  this.productStoreId=cart.getProductStoreId();  this.doPromotions=cart.getDoPromotions();  this.poNumber=cart.getPoNumber();  this.orderId=cart.getOrderId();  this.orderName="Copy of " + cart.getOrderName();  this.workEffortId=cart.getWorkEffortId();  this.firstAttemptOrderId=cart.getFirstAttemptOrderId();  this.billingAccountId=cart.getBillingAccountId();  this.agreementId=cart.getAgreementId();  this.quoteId=cart.getQuoteId();  this.orderAdditionalEmails=cart.getOrderAdditionalEmails();  this.adjustments.addAll(cart.getAdjustments());  this.contactMechIdsMap=new HashMap<String,String>(cart.getOrderContactMechIds());  this.freeShippingProductPromoActions=new ArrayList<GenericValue>(cart.getFreeShippingProductPromoActions());  this.desiredAlternateGiftByAction=cart.getAllDesiredAlternateGiftByActionCopy();  this.productPromoUseInfoList.addAll(cart.productPromoUseInfoList);  this.productPromoCodes=new HashSet<String>(cart.productPromoCodes);  this.locale=cart.getLocale();  this.currencyUom=cart.getCurrency();  this.externalId=cart.getExternalId();  this.internalCode=cart.getInternalCode();  this.viewCartOnAdd=cart.viewCartOnAdd();  this.defaultShipAfterDate=cart.getDefaultShipAfterDate();  this.defaultShipBeforeDate=cart.getDefaultShipBeforeDate();  this.cancelBackOrderDate=cart.getCancelBackOrderDate();  this.terminalId=cart.getTerminalId();  this.transactionId=cart.getTransactionId();  this.autoOrderShoppingListId=cart.getAutoOrderShoppingListId();  this.additionalPartyRole=new HashMap<String,List<String>>();  for (  Map.Entry<String,List<String>> me : cart.additionalPartyRole.entrySet()) {    this.additionalPartyRole.put(me.getKey(),new LinkedList<String>(me.getValue()));  }  for (  ShoppingCartItemGroup itemGroup : cart.itemGroupByNumberMap.values()) {    ShoppingCartItemGroup parentGroup=null;    if (itemGroup.getParentGroup() != null)     parentGroup=this.getItemGroupByNumber(itemGroup.getParentGroup().getGroupNumber());    ShoppingCartItemGroup newGroup=new ShoppingCartItemGroup(itemGroup,parentGroup);    itemGroupByNumberMap.put(newGroup.getGroupNumber(),newGroup);  }  for (  ShoppingCartItem item : cart.items()) {    cartLines.add(new ShoppingCartItem(item));  }  this.facilityId=cart.facilityId;  this.webSiteId=cart.webSiteId;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.874 -0500",hash_original_method="DB4617691A261C8EE4F48E744A2721BA",hash_generated_method="DB4617691A261C8EE4F48E744A2721BA") boolean _requestedWont(int option){  return !_requestedWill(option);}  }
class C{  public static Uri buildAuthorizeUri(String clientId,String scope,String redirectUri){  Uri.Builder builder=Uri.parse(DisqusConstants.AUTHORIZE_URL).buildUpon();  builder.appendQueryParameter(DisqusConstants.PARAM_CLIENT_ID,clientId);  if (scope != null) {    builder.appendQueryParameter(DisqusConstants.PARAM_SCOPE,scope);  }  builder.appendQueryParameter(DisqusConstants.PARAM_RESPONSE_TYPE,DisqusConstants.RESPONSE_TYPE_CODE);  builder.appendQueryParameter(DisqusConstants.PARAM_REDIRECT_URI,redirectUri);  return builder.build();}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTableUI();  return MultiLookAndFeel.createUIs(mui,((MultiTableUI)mui).uis,a);}  }
class C{  public boolean isInstance(){  return kind.isInstance();}  }
class C{  public DeleteNodesResponse DeleteNodes(DeleteNodesRequest req) throws ServiceFaultException, ServiceResultException {  return (DeleteNodesResponse)channel.serviceRequest(req);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  public static void fill(Object[] array,int start,int end,Object value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public String put(String key,String value,boolean percentEncode){  SortedSet<String> values=wrappedMap.get(key);  if (values == null) {    values=new TreeSet<String>();    wrappedMap.put(percentEncode ? OAuth.percentEncode(key) : key,values);  }  if (value != null) {    value=percentEncode ? OAuth.percentEncode(value) : value;    values.add(value);  }  return value;}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public void connectAndBind(String host,int port,BindType bindType,String systemId,String password,String systemType,TypeOfNumber addrTon,NumberingPlanIndicator addrNpi,String addressRange) throws IOException {  connectAndBind(host,port,new BindParameter(bindType,systemId,password,systemType,addrTon,addrNpi,addressRange),60000);}  }
class C{  private static void tandemMerge(final double[] keySrc,final long[] valSrc,final int arrStart1,final int arrLen1,final int arrStart2,final int arrLen2,final double[] keyDst,final long[] valDst,final int arrStart3){  final int arrStop1=arrStart1 + arrLen1;  final int arrStop2=arrStart2 + arrLen2;  int i1=arrStart1;  int i2=arrStart2;  int i3=arrStart3;  while (i1 < arrStop1 && i2 < arrStop2) {    if (keySrc[i2] < keySrc[i1]) {      keyDst[i3]=keySrc[i2];      valDst[i3]=valSrc[i2];      i3++;      i2++;    } else {      keyDst[i3]=keySrc[i1];      valDst[i3]=valSrc[i1];      i3++;      i1++;    }  }  if (i1 < arrStop1) {    arraycopy(keySrc,i1,keyDst,i3,arrStop1 - i1);    arraycopy(valSrc,i1,valDst,i3,arrStop1 - i1);  } else {    assert i2 < arrStop2;    arraycopy(keySrc,i2,keyDst,i3,arrStop2 - i2);    arraycopy(valSrc,i2,valDst,i3,arrStop2 - i2);  }}  }
class C{  @Override public IBinder onBind(Intent intent){  return sSyncAdapter.getSyncAdapterBinder();}  }
class C{  private static boolean isInside(int offset,int start,int end){  return offset == start || offset == end || (offset > start && offset < end);}  }
class C{  public boolean isReceipt(){  Object oo=get_Value(COLUMNNAME_IsReceipt);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void clickResumeGame(View view){  startGame();}  }
class C{  void register(Itr itr){  head=new Node(itr,head);}  }
class C{  public static void main(String[] args) throws Exception {  System.exit(compile(args));}  }
class C{  public ToStringBuilder appendSuper(String superToString){  if (superToString != null) {    style.appendSuper(buffer,superToString);  }  return this;}  }
class C{  public static Object parse(Class clazz,String text){  Class classBoxed=JavaClassHelper.getBoxedType(clazz);  if (classBoxed == String.class) {    return text;  }  if (classBoxed == Character.class) {    return text.charAt(0);  }  if (classBoxed == Boolean.class) {    return BoolValue.parseString(text.toLowerCase().trim());  }  if (classBoxed == Byte.class) {    return ByteValue.parseString(text.trim());  }  if (classBoxed == Short.class) {    return ShortValue.parseString(text.trim());  }  if (classBoxed == Long.class) {    return LongValue.parseString(text.trim());  }  if (classBoxed == Float.class) {    return FloatValue.parseString(text.trim());  }  if (classBoxed == Double.class) {    return DoubleValue.parseString(text.trim());  }  if (classBoxed == Integer.class) {    return IntValue.parseString(text.trim());  }  return null;}  }
class C{  public void clear(){  counter.clear();  total=0;}  }
class C{  void sendRoleRequestIfNotPending(OFControllerRole role){  try {    roleChanger.sendRoleRequestIfNotPending(role,0);  } catch (  IOException e) {    log.error("Disconnecting switch {} due to IO Error: {}",getSwitchInfoString(),e.getMessage());    mainConnection.disconnect();  }}  }
class C{  @SuppressWarnings("unchecked") private static void updateLanguageTone(Map<String,Object> user,List<ToneScore> languageTone,Boolean maintainHistory){  List<String> currentLanguage=new ArrayList<String>();  Map<String,Object> currentLanguageObject=new HashMap<String,Object>();  for (  ToneScore tone : languageTone) {    if (tone.getScore() >= LANGUAGE_HIGH_SCORE_THRESHOLD) {      currentLanguage.add(tone.getName().toLowerCase() + "_high");      currentLanguageObject.put("tone_name",tone.getName().toLowerCase());      currentLanguageObject.put("score",tone.getScore());      currentLanguageObject.put("interpretation","likely high");    } else     if (tone.getScore() <= LANGUAGE_NO_SCORE_THRESHOLD) {      currentLanguageObject.put("tone_name",tone.getName().toLowerCase());      currentLanguageObject.put("score",tone.getScore());      currentLanguageObject.put("interpretation","no evidence");    } else {      currentLanguageObject.put("tone_name",tone.getName().toLowerCase());      currentLanguageObject.put("score",tone.getScore());      currentLanguageObject.put("interpretation","likely medium");    }  }  Map<String,Object> language=(Map<String,Object>)((Map<String,Object>)user.get("tone")).get("language");  language.put("current",currentLanguage);  if (maintainHistory) {    List<Map<String,Object>> history=new ArrayList<Map<String,Object>>();    if (language.get("history") != null) {      history=(List<Map<String,Object>>)language.get("history");    }    history.add(currentLanguageObject);    language.put("history",history);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:53.142 -0500",hash_original_method="061B568C08B51F012B887F4F0E2A3802",hash_generated_method="127E2908C4A5EAD90780B79D3E4E8DA8") private void applyCompatibilityScaleIfNeeded(AccessibilityNodeInfo info,float scale){  if (scale == 1.0f) {    return;  }  Rect bounds=mTempBounds;  info.getBoundsInParent(bounds);  bounds.scale(scale);  info.setBoundsInParent(bounds);  info.getBoundsInScreen(bounds);  bounds.scale(scale);  info.setBoundsInScreen(bounds);}  }
class C{  public static Geo crossNormalize(Geo a,Geo b,Geo ret){  return a.crossNormalize(b,ret);}  }
class C{  protected int _sliceOffset(int absRank){  return absRank;}  }
class C{  public FormParamIterator(Request request) throws FormUploadException, IOException {  this(new RequestContext(request));}  }
class C{  public Matrix4f(float[] v){  this.m00=v[0];  this.m01=v[1];  this.m02=v[2];  this.m03=v[3];  this.m10=v[4];  this.m11=v[5];  this.m12=v[6];  this.m13=v[7];  this.m20=v[8];  this.m21=v[9];  this.m22=v[10];  this.m23=v[11];  this.m30=v[12];  this.m31=v[13];  this.m32=v[14];  this.m33=v[15];}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__REFERENCE:    setReference((EObject)newValue);  return;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__OPERATION_CALL:setOperationCall((Boolean)newValue);return;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARGS:getArgs().clear();getArgs().addAll((Collection<? extends Expression>)newValue);return;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARRAY_SELECTOR:getArraySelector().clear();getArraySelector().addAll((Collection<? extends Expression>)newValue);return;case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION__ARRAY_ACCESS:setArrayAccess((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public CompressedImageHDU forceNoLoss(int x,int y,int width,int heigth){  getData().forceNoLoss(x,y,width,heigth);  return this;}  }
class C{  public int numObjectsAtLocationOfObject(Object obj){  Object location=getObjectLocation(obj);  if (location == null)   return 0; else   return numObjectsAtLocation(location);}  }
class C{  private void checkGETStatusCodeWithAwait(final String request,final Integer statusCode){  await().atMost(Duration.FIVE_SECONDS).until(null,equalTo(String.valueOf(statusCode)));}  }
class C{  public final int addAndGet(int delta){  return unsafe.getAndAddInt(this,valueOffset,delta) + delta;}  }
class C{  private void defineBaseColors(UIDefaults d){  d.put("control",new ColorUIResource(0xf8f8f8));  addColor(d,"text",0,0,0,255);  addColor(d,"seaGlassBase",51,98,140,255);  addColor(d,"seaGlassBlueGrey","seaGlassBase",0.032459438f,-0.52518797f,0.19607842f,0);  addColor(d,"seaGlassOrange",191,98,4,255);  addColor(d,"seaGlassGreen",176,179,50,255);  addColor(d,"seaGlassRed",169,46,34,255);  addColor(d,"seaGlassBorder","seaGlassBlueGrey",0.0f,-0.017358616f,-0.11372548f,0);  addColor(d,"seaGlassSelection","seaGlassBase",-0.010750473f,-0.04875779f,-0.007843137f,0);  addColor(d,"seaGlassInfoBlue",47,92,180,255);  addColor(d,"seaGlassAlertYellow",255,220,35,255);  addColor(d,"seaGlassFocus",115,164,209,255);  addColor(d,"seaGlassSelectedText",255,255,255,255);  addColor(d,"seaGlassSelectionBackground",57,105,138,255);  addColor(d,"seaGlassDisabledText",142,143,145,255);  addColor(d,"seaGlassLightBackground",255,255,255,255);  addColor(d,"infoText","text",0.0f,0.0f,0.0f,0);  addColor(d,"info",242,242,189,255);  addColor(d,"menuText","text",0.0f,0.0f,0.0f,0);  addColor(d,"menu","seaGlassBase",0.021348298f,-0.6150531f,0.39999998f,0);  addColor(d,"scrollbar","seaGlassBlueGrey",-0.006944418f,-0.07296763f,0.09019607f,0);  addColor(d,"controlText","text",0.0f,0.0f,0.0f,0);  addColor(d,"controlHighlight","seaGlassBlueGrey",0.0f,-0.07333623f,0.20392156f,0);  addColor(d,"controlLHighlight","seaGlassBlueGrey",0.0f,-0.098526314f,0.2352941f,0);  addColor(d,"controlShadow","seaGlassBlueGrey",-0.0027777553f,-0.0212406f,0.13333333f,0);  addColor(d,"controlDkShadow","seaGlassBlueGrey",-0.0027777553f,-0.0018306673f,-0.02352941f,0);  addColor(d,"textHighlight","seaGlassSelectionBackground",0.0f,0.0f,0.0f,0);  addColor(d,"textHighlightText","seaGlassSelectedText",0.0f,0.0f,0.0f,0);  addColor(d,"textInactiveText","seaGlassDisabledText",0.0f,0.0f,0.0f,0);  addColor(d,"desktop","seaGlassBase",-0.009207249f,-0.13984653f,-0.07450983f,0);  addColor(d,"activeCaption","seaGlassBlueGrey",0.0f,-0.049920253f,0.031372547f,0);  addColor(d,"inactiveCaption","seaGlassBlueGrey",-0.00505054f,-0.055526316f,0.039215684f,0);  addColor(d,"textForeground","text",0.0f,0.0f,0.0f,255);  addColor(d,"[Disabled].textForeground","textForeground",0.0f,0.0f,0.0f,80);  addColor(d,"textBackground","seaGlassSelectionBackground",0.0f,0.0f,0.0f,0);  addColor(d,"background","control",0,0,0,0);  d.put("TitledBorder.position","ABOVE_TOP");  d.put("TitledBorder.titleColor",Color.BLACK);  d.put("TitledBorder.font",new DerivedFont("defaultFont",1.0f,false,false));  d.put("FileView.fullRowSelection",Boolean.TRUE);  d.put("seaGlassSelection",new Color(0x6181a5));  d.put("seaGlassFocus",new Color(0x73a4d1));  d.put("seaGlassBorder",new Color(0x9297a1));  d.put("seaGlassSelectedText",Color.WHITE);  d.put("seaGlassSelectionBackground",new Color(0x6181a5));  d.put("seaGlassDisabledText",new Color(0xc8c8c8));  d.put("textHighlight",d.get("seaGlassSelectionBackground"));  d.put("textHighlightText",Color.WHITE);  d.put("textInactiveText",d.get("seaGlassDisabledText"));  d.put("menuText",Color.WHITE);  d.put("menu",Color.WHITE);  d.put("seaGlassTransparent",new Color(0x0,true));  d.put("seaGlassTextEmphasis",new Color(255,255,255,110));  d.put("seaGlassDropShadow",new Color(211,211,211));  d.put("seaGlassInnerShadow",new Color(0x20000000,true));  d.put("seaGlassStyleDefaultColor",new ColorUIResource(Color.BLACK));  d.put("seaGlassFocusInsets",new Insets(2,2,2,2));  d.put("seaGlassTransparent",new Color(0,true));  d.put("seaGlassFocus",new Color(0x73a4d1));  d.put("seaGlassOuterFocus",getDerivedColor("seaGlassFocus",-0.0028f,0.01f,0f,-0x80,true));  if (PlatformUtils.isMac()) {    d.put("seaGlassToolBarFocus",d.get("seaGlassFocus"));    d.put("seaGlassToolBarOuterFocus",d.get("seaGlassOuterFocus"));    d.put("seaGlassToolBarDisabledText",new Color(0x80000000,true));  } else {    d.put("seaGlassToolBarFocus",new Color(0x5b7ea4));    d.put("seaGlassToolBarOuterFocus",getDerivedColor("seaGlassToolBarFocus",-0.0028f,0.01f,0f,-0x80,true));    d.put("seaGlassToolBarDisabledText",new Color(0x80000000,true));  }  d.put("seaGlassTableSelectionActiveBottom",new Color(0x7daaea));  d.put("seaGlassTableSelectionInactiveBottom",new Color(0xe0e0e0));  d.put("seaGlassSearchPlaceholderText",new Color(0x808080));  d.put("seaGlassSearchIcon",new Color(0x404040));  d.put("seaGlassCancelIcon",new Color(0xb3b3b3));  d.put("seaGlassCancelIconPressed",new Color(0x808080));  d.put("seaGlassTextEnabledBorder",new Color(0x709ad0));  d.put("seaGlassTextDisabledBorder",SeaGlassGraphicsUtils.disable(new Color(0x709ad0)));  d.put("seaGlassTextEnabledToolbarBorder",new Color(0x888888));  d.put("seaGlassMenuIcon",new Color(0x5b7ea4));}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  p_AD_Column_ID=getRecord_ID();}  }
class C{  public void testUserConfiguresDriverAndRequestsDataSourceWithLocalTransactionSupport() throws MalformedURLException {  DataSourceFixture fixture=ConfigurationFixtureFactory.createDriverConfiguredDataSourceWithLocalTransactionSupport();  testServletThatIssuesGetConnectionFrom(fixture,"datasource-cmt-local");}  }
class C{  public String toStringKey(){  String result;  int i;  result="\\begin{table}[thb]\n\\caption{\\label{labelname}" + "Table Caption (Key)}\n";  result+="\\scriptsize\n";  result+="{\\centering\n";  result+="\\begin{tabular}{cl}\\\\\n";  for (i=0; i < getColCount(); i++) {    if (getColHidden(i))     continue;    result+=LEFT_PARENTHESES + (i + 1) + RIGHT_PARENTHESES+ " & "+ removeFilterName(m_ColNames[i]).replace('_','-').replaceAll("\\\\","\\\\textbackslash")+ " \\\\\n";  }  result+="\\end{tabular}\n";  result+="}\n";  result+="\\end{table}\n";  return result;}  }
class C{  @RequestMapping(value={"/optionslist"},method=RequestMethod.POST) @ResponseBody public RestWrapperOptions listOptions(){  RestWrapperOptions restWrapperOptions=null;  try {    List<com.wipro.ats.bdre.md.dao.jpa.ProcessType> jpaProcessTypes=processTypeDAO.list(null);    List<ProcessType> processTypes=new ArrayList<ProcessType>();    for (    com.wipro.ats.bdre.md.dao.jpa.ProcessType processType : jpaProcessTypes) {      ProcessType returnProcessType=new ProcessType();      returnProcessType.setProcessTypeId(processType.getProcessTypeId());      returnProcessType.setParentProcessTypeId(processType.getParentProcessTypeId());      returnProcessType.setProcessTypeName(processType.getProcessTypeName());      returnProcessType.setCounter(jpaProcessTypes.size());      processTypes.add(returnProcessType);    }    LOGGER.debug(processTypes.get(0).getProcessTypeId());    List<RestWrapperOptions.Option> options=new ArrayList<RestWrapperOptions.Option>();    for (    ProcessType type : processTypes) {      RestWrapperOptions.Option option=new RestWrapperOptions.Option(type.getProcessTypeName(),type.getProcessTypeId());      options.add(option);      LOGGER.debug(option.getDisplayText());    }    restWrapperOptions=new RestWrapperOptions(options,RestWrapperOptions.OK);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapperOptions=new RestWrapperOptions(e.getMessage(),RestWrapperOptions.ERROR);  }  return restWrapperOptions;}  }
class C{  public static void logReadTaskOutOfMemoryError(final Logger logger,final Task<Diff> task,final OutOfMemoryError e){  if (task != null) {    logger.logError(Level.WARNING,"Error while reading a task: " + task.toString(),e);  } else {    logger.logError(Level.WARNING,"Error while reading an unknown task",e);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.396 -0500",hash_original_method="D64C2A148CFECC0338F81243CC161580",hash_generated_method="D64C2A148CFECC0338F81243CC161580") EmulatedFieldsForDumping(ObjectOutputStream oos,ObjectStreamClass streamClass){  this.oos=oos;  this.emulatedFields=new EmulatedFields(streamClass.fields(),(ObjectStreamField[])null);}  }
class C{  public Transaction(NetworkParameters params,byte[] payload,@Nullable Message parent,MessageSerializer setSerializer,int length) throws ProtocolException {  super(params,payload,0,parent,setSerializer,length);}  }
class C{  public static JSAStrings v(){  if (jsa != null) {    return jsa;  } else {    jsa=new JSAStrings();    return jsa;  }}  }
class C{  public static int[] parseStringArrayOfInts(String stringOfInts){  int[] returnValues;  if (stringOfInts.indexOf(':') >= 0) {    String[] indices=stringOfInts.split(":");    int startIndex=Integer.parseInt(indices[0]);    int endIndex=Integer.parseInt(indices[1]);    returnValues=new int[endIndex - startIndex + 1];    for (int i=0; i < returnValues.length; i++) {      returnValues[i]=startIndex + i;    }  } else {    String[] repeatStrings=stringOfInts.split(",");    returnValues=new int[repeatStrings.length];    for (int i=0; i < returnValues.length; i++) {      returnValues[i]=Integer.parseInt(repeatStrings[i]);    }  }  return returnValues;}  }
class C{  private static int convertSQLTypeToValueType(int sqlType,String sqlTypeName){  return convertSQLTypeToValueType(sqlType);}  }
class C{  protected void createDynamicType(MetadataDescriptor descriptor,Map<String,DynamicType> dynamicTypes,DynamicClassLoader dcl){  if (!dynamicTypes.containsKey(descriptor.getJavaClassName())) {    JPAMDynamicTypeBuilder typeBuilder=null;    if (descriptor.isInheritanceSubclass()) {      MetadataDescriptor parentDescriptor=descriptor.getInheritanceParentDescriptor();      createDynamicType(parentDescriptor,dynamicTypes,dcl);      typeBuilder=new JPAMDynamicTypeBuilder(dcl,descriptor.getClassDescriptor(),dynamicTypes.get(parentDescriptor.getJavaClassName()));    } else {      typeBuilder=new JPAMDynamicTypeBuilder(dcl,descriptor.getClassDescriptor(),null);    }    dynamicTypes.put(descriptor.getJavaClassName(),typeBuilder.getType());  }}  }
class C{  public static void removeSignature(JSONObject obj){  if (obj.has(signatureString))   obj.remove(signatureString);}  }
class C{  public Byte onLoadData8(byte[] ioPage,int addr,byte value,DebuggableMemory.AccessSource accessSource){  if (addr >= REGISTER_IMC00 && addr < (REGISTER_IMC19 + 4)) {    return (byte)(((TxInterruptController)platform.getInterruptController()).getImc(addr - REGISTER_IMC00));  }  if (addr >= REGISTER_PORT0 && addr < REGISTER_PORT0 + (NUM_PORT << PORT_OFFSET_SHIFT)) {    int portNr=(addr - REGISTER_PORT0) >> PORT_OFFSET_SHIFT;    TxIoPort txIoPort=(TxIoPort)platform.getIoPorts()[portNr];switch (addr - (portNr << PORT_OFFSET_SHIFT)) {case REGISTER_PORT0 + 3:      return txIoPort.getValue();case REGISTER_PORT0CR + 3:    return txIoPort.getControlRegister();case REGISTER_PORT0FC1 + 3:  return txIoPort.getFunctionRegister1();case REGISTER_PORT0FC2 + 3:return txIoPort.getFunctionRegister2();case REGISTER_PORT0FC3 + 3:return txIoPort.getFunctionRegister3();case REGISTER_PORT0ODE + 3:return txIoPort.getOpenDrainControlRegister();case REGISTER_PORT0PUP + 3:return txIoPort.getPullUp();case REGISTER_PORT0PIE + 3:return txIoPort.getInputEnableControlRegister();}} else if (addr >= REGISTER_TB0EN && addr < REGISTER_TB0EN + (NUM_16B_TIMER << TIMER_OFFSET_SHIFT)) {int timerNr=(addr - REGISTER_TB0EN) >> TIMER_OFFSET_SHIFT;TxTimer txTimer=(TxTimer)platform.getProgrammableTimers()[timerNr];switch (addr - (timerNr << TIMER_OFFSET_SHIFT)) {case REGISTER_TB0EN + 3:return (byte)txTimer.getTben();case REGISTER_TB0RUN + 3:return (byte)txTimer.getTbrun();case REGISTER_TB0CR + 3:return (byte)txTimer.getTbcr();case REGISTER_TB0MOD + 3:return (byte)txTimer.getTbmod();case REGISTER_TB0FFCR + 3:return (byte)txTimer.getTbffcr();case REGISTER_TB0ST + 3:return (byte)txTimer.getTbst();case REGISTER_TB0IM + 3:return (byte)txTimer.getTbim();case REGISTER_TB0UC + 2:case REGISTER_TB0UC + 3:stop("The TBnUC register cannot be accessed by 8-bit");case REGISTER_TB0RG0 + 2:case REGISTER_TB0RG0 + 3:stop("The TBnRG0 register cannot be accessed by 8-bit for now");case REGISTER_TB0RG1 + 2:case REGISTER_TB0RG1 + 3:stop("The TBnRG1 register cannot be accessed by 8-bit for now");case REGISTER_TB0CP0 + 3:return (byte)txTimer.getTbcp0();case REGISTER_TB0CP1 + 3:return (byte)txTimer.getTbcp1();}} else if (addr >= REGISTER_TCEN && addr < REGISTER_CAPCR0 + (NUM_CAPTURE_CHANNEL << INPUT_CAPTURE_OFFSET_SHIFT)) {TxInputCaptureTimer txInputCaptureTimer=(TxInputCaptureTimer)platform.getProgrammableTimers()[NUM_16B_TIMER];if (addr < REGISTER_CMPCTL0) {switch (addr) {case REGISTER_TCEN + 3:return (byte)txInputCaptureTimer.getTcen();case REGISTER_TBTRUN + 3:return (byte)txInputCaptureTimer.getTbtrun();case REGISTER_TBTCR + 3:return (byte)txInputCaptureTimer.getTbtcr();case REGISTER_TBTCAP + 3:return (byte)txInputCaptureTimer.getTbtcap();case REGISTER_TBTRDCAP + 3:return (byte)txInputCaptureTimer.getCurrentValue();}} else if (addr < REGISTER_CAPCR0) {int compareChannel=(addr - REGISTER_CMPCTL0) >> INPUT_COMPARE_OFFSET_SHIFT;switch (addr - (compareChannel << INPUT_COMPARE_OFFSET_SHIFT)) {case REGISTER_CMPCTL0 + 3:return (byte)txInputCaptureTimer.getCmpctl(compareChannel);case REGISTER_TCCMP0 + 3:return (byte)txInputCaptureTimer.getTccmp(compareChannel);}} else {int captureChannel=(addr - REGISTER_CAPCR0) >> INPUT_CAPTURE_OFFSET_SHIFT;switch (addr - (captureChannel << INPUT_CAPTURE_OFFSET_SHIFT)) {case REGISTER_CAPCR0 + 3:return (byte)txInputCaptureTimer.getCapcr(captureChannel);case REGISTER_TCCAP0 + 3:return (byte)txInputCaptureTimer.getTccap(captureChannel);}}} else if (addr >= REGISTER_SC0EN && addr < REGISTER_SC0EN + (NUM_SERIAL_IF << SERIAL_OFFSET_SHIFT)) {int serialInterfaceNr=(addr - REGISTER_SC0EN) >> SERIAL_OFFSET_SHIFT;TxSerialInterface txSerialInterface=(TxSerialInterface)platform.getSerialInterfaces()[serialInterfaceNr];switch (addr - (serialInterfaceNr << SERIAL_OFFSET_SHIFT)) {case REGISTER_SC0EN + 3:return (byte)txSerialInterface.getEn();case REGISTER_SC0BUF + 3:return (byte)txSerialInterface.getBuf();case REGISTER_SC0CR + 3:return (byte)txSerialInterface.getCr();case REGISTER_SC0MOD0 + 3:return (byte)txSerialInterface.getMod0();case REGISTER_SC0MOD1 + 3:return (byte)txSerialInterface.getMod1();case REGISTER_SC0MOD2 + 3:return (byte)txSerialInterface.getMod2();case REGISTER_BR0CR + 3:return (byte)txSerialInterface.getBrcr();case REGISTER_BR0ADD + 3:return (byte)txSerialInterface.getBradd();case REGISTER_SC0RFC + 3:return (byte)txSerialInterface.getRfc();case REGISTER_SC0TFC + 3:return (byte)txSerialInterface.getTfc();case REGISTER_SC0RST + 3:return (byte)txSerialInterface.getRst();case REGISTER_SC0TST + 3:return (byte)txSerialInterface.getTst();case REGISTER_SC0FCNF + 3:return (byte)txSerialInterface.getFcnf();}} else if (addr >= REGISTER_HSC0BUF && addr < REGISTER_HSC0BUF + (NUM_HSERIAL_IF << HSERIAL_OFFSET_SHIFT)) {int hserialInterfaceNr=(addr - REGISTER_HSC0BUF) >> HSERIAL_OFFSET_SHIFT;TxSerialInterface txSerialInterface=(TxSerialInterface)platform.getSerialInterfaces()[NUM_SERIAL_IF + hserialInterfaceNr];switch (addr - (hserialInterfaceNr << HSERIAL_OFFSET_SHIFT)) {case REGISTER_HSC0BUF:return (byte)txSerialInterface.getBuf();case REGISTER_HBR0ADD:return (byte)txSerialInterface.getBradd();case REGISTER_HSC0MOD1:return (byte)txSerialInterface.getMod1();case REGISTER_HSC0MOD2:return (byte)txSerialInterface.getMod2();case REGISTER_HSC0EN:return (byte)txSerialInterface.getEn();case REGISTER_HSC0RFC:return (byte)txSerialInterface.getRfc();case REGISTER_HSC0TFC:return (byte)txSerialInterface.getTfc();case REGISTER_HSC0RST:return (byte)txSerialInterface.getRst();case REGISTER_HSC0TST:return (byte)txSerialInterface.getTst();case REGISTER_HSC0FCNF:return (byte)txSerialInterface.getFcnf();case REGISTER_HSC0CR:return (byte)txSerialInterface.getCr();case REGISTER_HSC0MOD0:return (byte)txSerialInterface.getMod0();case REGISTER_HBR0CR:return (byte)txSerialInterface.getBrcr();}} else if (addr >= REGISTER_CCR0 && addr < REGISTER_CCR0 + (NUM_DMA_CHANNEL << DMA_CHANNEL_OFFSET_SHIFT)) {int dmaChannelNr=(addr - REGISTER_CCR0) >> DMA_CHANNEL_OFFSET_SHIFT;TxDmaChannel channel=((TxDmaController)platform.getDmaController()).getChannel(dmaChannelNr);switch (addr - (dmaChannelNr << DMA_CHANNEL_OFFSET_SHIFT)) {case REGISTER_CCR0:case REGISTER_CCR0 + 1:case REGISTER_CCR0 + 2:case REGISTER_CCR0 + 3:return (byte)(channel.getCcr() >> ((3 - (addr & 0b11)) * 8));case REGISTER_CSR0 + 3:return (byte)channel.getCsr();case REGISTER_SAR0 + 3:return (byte)channel.getSar();case REGISTER_DAR0 + 3:return (byte)channel.getDar();case REGISTER_BCR0 + 3:return (byte)channel.getBcr();case REGISTER_DTCR0 + 3:return (byte)channel.getDtcr();default :stop("Address 0x" + Format.asHex(addr,8) + " is not a DMA register");}} else if (addr >= REGISTER_HOURR && addr < REGISTER_RESTR + 4) {TxRealtimeClock realtimeClock=((TxRealtimeClock)platform.getRealtimeClock());switch (addr) {case REGISTER_HOURR + 1:return realtimeClock.getHourr();case REGISTER_MINR:return realtimeClock.getMinr();case REGISTER_SECR:return realtimeClock.getSecr();case REGISTER_YEARR:return realtimeClock.getYearr();case REGISTER_MONTHR:return realtimeClock.getMonthr();case REGISTER_DATER:return realtimeClock.getDater();case REGISTER_DAYR:return realtimeClock.getDayr();case REGISTER_PAGER + 3:return (byte)realtimeClock.getPager();case REGISTER_RESTR + 3:return (byte)realtimeClock.getRestr();default :stop("Address 0x" + Format.asHex(addr,8) + " is not a RTC register");}} else if (addr >= REGISTER_KWUPST00 && addr < REGISTER_KWUPINT + 4) {TxKeyCircuit keyCircuit=((TxKeyCircuit)platform.getKeyCircuit());int keyNumber=(addr - REGISTER_KWUPST00) >> KEY_OFFSET_SHIFT;switch (addr) {case REGISTER_PKEY:case REGISTER_PKEY + 1:case REGISTER_PKEY + 2:case REGISTER_PKEY + 3:return (byte)(keyCircuit.getPKEY() >> ((3 - (addr & 0b11)) * 8));case REGISTER_KWUPCNT + 3:return (byte)keyCircuit.getKWUPCNT();case REGISTER_KWUPCLR + 3:return (byte)keyCircuit.getKWUPCLR();case REGISTER_KWUPINT:case REGISTER_KWUPINT + 1:case REGISTER_KWUPINT + 2:case REGISTER_KWUPINT + 3:return keyCircuit.getKWUPINTn(addr & 0b11);default :if ((addr - REGISTER_KWUPST00) == (keyNumber << KEY_OFFSET_SHIFT)) {return (byte)keyCircuit.keys[keyNumber].getKWUPST();}stop("Address 0x" + Format.asHex(addr,8) + " is not a KEY register");}} else if (addr >= REGISTER_ADACLK && addr < REGISTER_ADACLK + (NUM_AD_UNIT << AD_UNIT_OFFSET_SHIFT)) {int adUnitNumber=(addr - REGISTER_ADACLK) >> AD_UNIT_OFFSET_SHIFT;TxAdUnit unit=((TxAdConverter)platform.getAdConverter()).units[adUnitNumber];int shiftedAddress=addr - (adUnitNumber << AD_UNIT_OFFSET_SHIFT);if (shiftedAddress >= REGISTER_ADAREG0 && shiftedAddress < REGISTER_ADAREG0 + 32) {int channelNumber=(shiftedAddress - REGISTER_ADAREG0) / 4;if (channelNumber < unit.getNumChannels()) {return (byte)unit.getReg(channelNumber);} else {stop("Address 0x" + Format.asHex(addr,8) + " is not a A/D converter channel register");}} else {switch (shiftedAddress) {case REGISTER_ADACLK + 3:return (byte)unit.getClk();case REGISTER_ADAMOD0 + 3:return (byte)unit.getMod0();case REGISTER_ADAMOD1 + 3:return (byte)unit.getMod1();case REGISTER_ADAMOD2 + 3:return (byte)unit.getMod2();case REGISTER_ADAMOD3 + 3:return (byte)unit.getMod3();case REGISTER_ADAMOD4 + 3:return (byte)unit.getMod4();case REGISTER_ADAMOD5 + 3:return (byte)unit.getMod5();case REGISTER_ADAREGSP + 3:return (byte)(unit.getRegSp());case REGISTER_ADACOMREG0 + 3:return (byte)(unit.getComReg0());case REGISTER_ADACOMREG1 + 3:return (byte)(unit.getComReg1());default :stop("Address 0x" + Format.asHex(addr,8) + " is not a A/D converter register");}}} else if (addr >= REGISTER_IMCGA && addr < (REGISTER_IMCG11 + 4)) {return (byte)(((TxInterruptController)platform.getInterruptController()).getImcg(addr - REGISTER_IMCGA));} else switch (addr) {case REGISTER_SYSCR:return 0;case REGISTER_SYSCR + 1:return ((TxClockGenerator)platform.getClockGenerator()).getSyscr2();case REGISTER_SYSCR + 2:return ((TxClockGenerator)platform.getClockGenerator()).getSyscr1();case REGISTER_SYSCR + 3:return ((TxClockGenerator)platform.getClockGenerator()).getSyscr0();case REGISTER_OSCCR:return 0;case REGISTER_OSCCR + 1:return 0;case REGISTER_OSCCR + 2:return ((TxClockGenerator)platform.getClockGenerator()).getOsccr1();case REGISTER_OSCCR + 3:return ((TxClockGenerator)platform.getClockGenerator()).getOsccr0();case REGISTER_PLLSEL + 3:return (byte)((TxClockGenerator)platform.getClockGenerator()).getPllsel();case REGISTER_NMIFLG + 3:return (byte)((TxInterruptController)platform.getInterruptController()).readAndClearNmiFlag();case REGISTER_RSTFLG + 3:return (byte)((TxClockGenerator)platform.getClockGenerator()).getRstflg();case REGISTER_DREQFLG + 3:return (byte)((TxInterruptController)platform.getInterruptController()).getDreqflg();case REGISTER_DCR + 3:return (byte)((TxDmaController)platform.getDmaController()).getDcr();case REGISTER_RSR + 3:return (byte)((TxDmaController)platform.getDmaController()).getRsr();case REGISTER_DHR + 3:return (byte)((TxDmaController)platform.getDmaController()).getDhr();}if (logRegisterMessages) warn("Register 0x" + Format.asHex(addr,8) + ": Load8 is not supported yet");return null;}  }
class C{  public Object evaluate(StructuredContent element){  return _evaluate(element);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  private int divadd(int[] a,int[] result,int offset){  long carry=0;  for (int j=a.length - 1; j >= 0; j--) {    long sum=(a[j] & LONG_MASK) + (result[j + offset] & LONG_MASK) + carry;    result[j + offset]=(int)sum;    carry=sum >>> 32;  }  return (int)carry;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:43.381 -0500",hash_original_method="6D794A242164C6F60D732256A15CB380",hash_generated_method="F0BBF8BAAA27EEAEBE61BE18BA557A10") public String simpleQueryForString(){  if (mState == 0)   throw new SQLiteDoneException("expected 1 row from this query but query returned no data. check the query: " + mSql);  mDatabase.addTaint(this.getTaint());  String ret=new String();  ret.addTaint(this.getTaint());  ret.addTaint(mDatabase.getTaint());  return ret;}  }
class C{  public void clear(){  for (  Entity entity : entitiesToCleanup) {    this.getZone().remove(entity);  }  boxes.clear();  containerLocations.clear();  entitiesToCleanup.clear();  playerName=null;}  }
class C{  public FrameStateBuilder(GraphBuilderTool tool,Bytecode code,StructuredGraph graph){  this.tool=tool;  if (tool instanceof BytecodeParser) {    this.parser=(BytecodeParser)tool;  } else {    this.parser=null;  }  this.code=code;  this.locals=allocateArray(code.getMaxLocals());  this.stack=allocateArray(Math.max(1,code.getMaxStackSize()));  this.lockedObjects=allocateArray(0);  assert graph != null;  this.monitorIds=EMPTY_MONITOR_ARRAY;  this.graph=graph;  this.canVerifyKind=true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public GPUImage3x3ConvolutionFilter(final float[] convolutionKernel){  super(THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER);  mConvolutionKernel=convolutionKernel;}  }
class C{  public boolean hasType(){  return getType() != null;}  }
class C{  public static Spinner create(int min,int max,int currentValue,int step){  Spinner s=new Spinner(new SpinnerNumberModel(min,max,currentValue,step),new SpinnerRenderer<Object>());  s.setRenderingPrototype(new Integer(max * 10));  return s;}  }
class C{  public long renderFrame(SurfaceHolder surfaceHolder,long timeMs){  if (surfaceHolder == null) {    throw new IllegalArgumentException("Surface Holder is null");  }  if (timeMs > mDurationMs || timeMs < 0) {    throw new IllegalArgumentException("requested time not correct");  }  final Surface surface=surfaceHolder.getSurface();  if (surface == null) {    throw new RuntimeException("Surface could not be retrieved from Surface holder");  }  if (mFilename != null) {    return mMANativeHelper.renderMediaItemPreviewFrame(surface,mFilename,timeMs,mWidth,mHeight);  } else {    return 0;  }}  }
class C{  public void parentRemoved(SessionEvent event){  getSessionSupport().fireSessionEvent(event);  setSessionChanged(true);}  }
class C{  public void animateExpand(int duration,long popTime){  long timeDifference=System.currentTimeMillis() - popTime;  ObjectAnimator animatorExpandY=ObjectAnimator.ofFloat(peekView,"scaleY",1.025f);  ObjectAnimator animatorExpandX=ObjectAnimator.ofFloat(peekView,"scaleX",1.025f);  animatorExpandX.setInterpolator(new DecelerateInterpolator());  animatorExpandY.setInterpolator(new DecelerateInterpolator());  animatorExpandX.setDuration(Math.max(0,duration - timeDifference));  animatorExpandY.setDuration(Math.max(0,duration - timeDifference));  animatorExpandX.start();  animatorExpandY.start();}  }
class C{  public void testDivideRoundDownPos(){  String a="92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="1.24390557635720517122423359799283E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public JPEGWriter(JComponent c,File f){  super(c,f);  m_Quality=1.0f;  m_Background=Color.WHITE;}  }
class C{  protected void init(InputStream in,String defaultEncoding) throws IOException {  PushbackInputStream tempIn=new PushbackInputStream(in,BOM_SIZE);  byte bom[]=new byte[BOM_SIZE];  int n, unread;  n=tempIn.read(bom,0,bom.length);  if ((bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) && (bom[2] == (byte)0xFE)&& (bom[3] == (byte)0xFF)) {    encoding="UTF-32BE";    unread=n - 4;  } else   if (n == BOM_SIZE && (bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) && (bom[2] == (byte)0x00) && (bom[3] == (byte)0x00)) {    encoding="UTF-32LE";    unread=n - 4;  } else   if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {    encoding="UTF-8";    unread=n - 3;  } else   if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {    encoding="UTF-16BE";    unread=n - 2;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {    encoding="UTF-16LE";    unread=n - 2;  } else {    encoding=defaultEncoding;    unread=n;  }  if (unread > 0)   tempIn.unread(bom,(n - unread),unread); else   if (unread < -1)   tempIn.unread(bom,0,0);  if (encoding == null) {    internalIn=new InputStreamReader(tempIn);    encoding=internalIn.getEncoding();  } else {    internalIn=new InputStreamReader(tempIn,encoding);  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deactivate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep deleteConsistencyGroup(@PathParam("id") final URI id,@DefaultValue("FULL") @QueryParam("type") String type) throws InternalException {  final BlockConsistencyGroup consistencyGroup=(BlockConsistencyGroup)queryResource(id);  ArgValidator.checkReference(BlockConsistencyGroup.class,id,checkForDelete(consistencyGroup));  String task=UUID.randomUUID().toString();  if (deletingUncreatedConsistencyGroup(consistencyGroup) || VolumeDeleteTypeEnum.VIPR_ONLY.name().equals(type)) {    markCGForDeletion(consistencyGroup);    return finishDeactivateTask(consistencyGroup,task);  }  TaskResourceRep taskRep=null;  try {    List<StorageSystem> vplexSystems=BlockConsistencyGroupUtils.getVPlexStorageSystems(consistencyGroup,_dbClient);    if (!vplexSystems.isEmpty()) {      BlockServiceApi blockServiceApi=getBlockServiceImpl(DiscoveredDataObject.Type.vplex.name());      taskRep=blockServiceApi.deleteConsistencyGroup(vplexSystems.get(0),consistencyGroup,task);    } else {      List<URI> localSystemURIs=BlockConsistencyGroupUtils.getLocalSystems(consistencyGroup,_dbClient);      if (!localSystemURIs.isEmpty()) {        boolean foundSystem=false;        for (        URI localSystemURI : localSystemURIs) {          StorageSystem localSystem=_dbClient.queryObject(StorageSystem.class,localSystemURI);          if (localSystem != null) {            foundSystem=true;            BlockServiceApi blockServiceApi=getBlockServiceImpl(BLOCKSERVICEAPIIMPL_GROUP);            taskRep=blockServiceApi.deleteConsistencyGroup(localSystem,consistencyGroup,task);            if (Task.Status.error.name().equals(taskRep.getState())) {              break;            }          } else {            _log.warn("Local system {} for consistency group {} does not exist",localSystemURI,consistencyGroup.getLabel());          }        }        if (!foundSystem) {          _log.warn("Deleting created consistency group {} where none of the local systems for the group exist",consistencyGroup.getLabel());          markCGForDeletion(consistencyGroup);          return finishDeactivateTask(consistencyGroup,task);        }      } else {        _log.info("Deleting created consistency group {} with no local or VPLEX systems",consistencyGroup.getLabel());        markCGForDeletion(consistencyGroup);        return finishDeactivateTask(consistencyGroup,task);      }    }  } catch (  APIException|InternalException e) {    String errorMsg=String.format("Exception attempting to delete consistency group %s: %s",consistencyGroup.getLabel(),e.getMessage());    _log.error(errorMsg);    taskRep.setState(Operation.Status.error.name());    taskRep.setMessage(errorMsg);    _dbClient.error(BlockConsistencyGroup.class,taskRep.getResource().getId(),task,e);  }catch (  Exception e) {    String errorMsg=String.format("Exception attempting to delete consistency group %s: %s",consistencyGroup.getLabel(),e.getMessage());    _log.error(errorMsg);    APIException apie=APIException.internalServerErrors.genericApisvcError(errorMsg,e);    taskRep.setState(Operation.Status.error.name());    taskRep.setMessage(apie.getMessage());    _dbClient.error(BlockConsistencyGroup.class,taskRep.getResource().getId(),task,apie);  }  if (Task.Status.ready.name().equals(taskRep.getState())) {    markCGForDeletion(consistencyGroup);  }  return taskRep;}  }
class C{  public void testCleanNetwork() throws SAXException, ParserConfigurationException, IOException {  MyShapefileReader msr=new MyShapefileReader(getInputDirectory() + "Test.shp");  MultiPolygon mp=msr.readMultiPolygon();  assertEquals("Polygon is not a square.",5,mp.getNumPoints());  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  MatsimNetworkReader nr=new MatsimNetworkReader(sc.getNetwork());  nr.readFile(getOutputDirectory() + "network.xml.gz");  assertEquals("Network must have 8 links.",8,sc.getNetwork().getLinks().size());  MyOsmNetworkCleaner monc=new MyOsmNetworkCleaner();  monc.cleanNetwork(sc.getNetwork(),mp);  assertEquals("Wrong number of remaining links.",4,monc.getNewNetwork().getLinks().size());  Network n=monc.getNewNetwork();  assertEquals("Link 3-4 is not in network.",true,n.getLinks().containsKey(Id.create("34",Link.class)));  assertEquals("Link 4-3 is not in network.",true,n.getLinks().containsKey(Id.create("43",Link.class)));  assertEquals("Link 4-5 is not in network.",true,n.getLinks().containsKey(Id.create("45",Link.class)));  assertEquals("Link 5-4 is not in network.",true,n.getLinks().containsKey(Id.create("54",Link.class)));}  }
class C{  protected void init(InputStream in,String defaultEncoding) throws IOException {  PushbackInputStream tempIn=new PushbackInputStream(in,BOM_SIZE);  byte bom[]=new byte[BOM_SIZE];  int n, unread;  n=tempIn.read(bom,0,bom.length);  if ((bom[0] == (byte)0x00) && (bom[1] == (byte)0x00) && (bom[2] == (byte)0xFE)&& (bom[3] == (byte)0xFF)) {    encoding="UTF-32BE";    unread=n - 4;  } else   if (n == BOM_SIZE && (bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE) && (bom[2] == (byte)0x00) && (bom[3] == (byte)0x00)) {    encoding="UTF-32LE";    unread=n - 4;  } else   if ((bom[0] == (byte)0xEF) && (bom[1] == (byte)0xBB) && (bom[2] == (byte)0xBF)) {    encoding="UTF-8";    unread=n - 3;  } else   if ((bom[0] == (byte)0xFE) && (bom[1] == (byte)0xFF)) {    encoding="UTF-16BE";    unread=n - 2;  } else   if ((bom[0] == (byte)0xFF) && (bom[1] == (byte)0xFE)) {    encoding="UTF-16LE";    unread=n - 2;  } else {    encoding=defaultEncoding;    unread=n;  }  if (unread > 0)   tempIn.unread(bom,(n - unread),unread); else   if (unread < -1)   tempIn.unread(bom,0,0);  if (encoding == null) {    internalIn=new InputStreamReader(tempIn);    encoding=internalIn.getEncoding();  } else {    internalIn=new InputStreamReader(tempIn,encoding);  }}  }
class C{  protected AbstractEditorTool(){}  }
class C{  public InitialTransition(State<S,E> target,Action<S,E> action){  super(null,target,action != null ? Collections.singleton(action) : null,null,TransitionKind.INITIAL,null,null,null);}  }
class C{  public IllegalBoundaryException(){  super();}  }
class C{  public void downloadImage(View view){  try {    UiUtils.hideKeyboard(this,mUrlEditText.getWindowToken());    startDownloadImageActivity(getUrl());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  RaveException(@NonNull List<RaveError> errors){  super(getFirstString(errors));  this.errors=errors;}  }
class C{  public PSPIdentifierForSellerException(final String message){  super(message);}  }
class C{  public static Thread newManagedThread(Runnable r,String name){  Thread thread=newManagedThread(r);  thread.setName(name);  return thread;}  }
class C{  public Class parseClass(File file) throws CompilationFailedException, IOException {  return parseClass(new GroovyCodeSource(file,config.getSourceEncoding()));}  }
class C{  private Token(int type){  fType=type;  fData=null;}  }
class C{  public static String valueToString(Object value) throws JSONException {  if (value == null || value.equals(null)) {    return "null";  }  if (value instanceof JSONString) {    Object object;    try {      object=((JSONString)value).toJSONString();    } catch (    Exception e) {      throw new JSONException(e);    }    if (object instanceof String) {      return (String)object;    }    throw new JSONException("Bad value from toJSONString: " + object);  }  if (value instanceof Number) {    return numberToString((Number)value);  }  if (value instanceof Boolean || value instanceof JSONObject || value instanceof JSONArray) {    return value.toString();  }  if (value instanceof Map) {    return new JSONObject((Map<String,Object>)value).toString();  }  if (value instanceof Collection) {    return new JSONArray((Collection<Object>)value).toString();  }  if (value.getClass().isArray()) {    return new JSONArray(value).toString();  }  return quote(value.toString());}  }
class C{  public void clearDeleted(){  deleted=false;}  }
class C{  public String gameDate(){  return gameDate;}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  protected void writeTags() throws IOException {  writer.writeComment("===================== HTML 4.0 basic tags ======================");  Map<String,ComponentBean> componentsByComponentFamily=GeneratorUtil.getComponentFamilyComponentMap(configBean);  Map<String,ArrayList<RendererBean>> renderersByComponentFamily=GeneratorUtil.getComponentFamilyRendererMap(configBean,propManager.getProperty(PropertyManager.RENDERKIT_ID));  String targetPackage=propManager.getProperty(PropertyManager.TARGET_PACKAGE);  for (  Map.Entry entry : renderersByComponentFamily.entrySet()) {    String componentFamily=(String)entry.getKey();    List<RendererBean> renderers=(List<RendererBean>)entry.getValue();    for (Iterator<RendererBean> rendererIter=renderers.iterator(); rendererIter.hasNext(); ) {      RendererBean renderer=rendererIter.next();      if (renderer.isIgnoreForJsp() || renderer.isIgnoreAll()) {        continue;      }      String rendererType=renderer.getRendererType();      if (this.propManager.isExcludeRenderer(rendererType)) {        continue;      }      writer.startElement("tag");      DescriptionBean description=renderer.getDescription("");      if (description != null) {        String descriptionText=description.getDescription().trim();        if (descriptionText != null) {          writer.startElement("description");          StringBuffer sb=new StringBuffer();          sb.append("<![CDATA[");          sb.append(descriptionText);          sb.append("]]>\n");          writer.writeText(sb.toString());          writer.closeElement();        }      }      String tagName=makeTldTagName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType));      if (tagName == null) {        throw new IllegalStateException("Could not determine tag name");      }      writer.startElement("name");      writer.writeText(tagName);      writer.closeElement();      if (GeneratorUtil.makeTagClassName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType)) == null) {        throw new IllegalStateException("Could not determine tag class name");      }      writer.startElement("tag-class");      writer.writeText(targetPackage + '.' + GeneratorUtil.makeTagClassName(GeneratorUtil.stripJavaxFacesPrefix(componentFamily),GeneratorUtil.stripJavaxFacesPrefix(rendererType)));      writer.closeElement();      writer.startElement("body-content");      writer.writeText(getBodyContent(tagName));      writer.closeElement();      ComponentBean component=componentsByComponentFamily.get(componentFamily);      PropertyBean[] properties=component.getProperties();      PropertyBean property;      for (int i=0, len=properties.length; i < len; i++) {        if (null == (property=properties[i])) {          continue;        }        if (!property.isTagAttribute()) {          continue;        }        writer.startElement("attribute");        description=property.getDescription("");        if (description != null) {          String descriptionText=description.getDescription().trim();          if (descriptionText != null) {            writer.startElement("description");            StringBuffer sb=new StringBuffer();            sb.append("<![CDATA[");            sb.append(descriptionText);            sb.append("]]>\n");            writer.writeText(sb.toString());            writer.closeElement();          }        }        String propertyName=property.getPropertyName();        writer.startElement("name");        writer.writeText(propertyName);        writer.closeElement();        writer.startElement("required");        writer.writeText(property.isRequired() ? Boolean.TRUE.toString() : Boolean.FALSE.toString());        writer.closeElement();        if (!"id".equals(propertyName)) {          if (property.isMethodExpressionEnabled()) {            writer.startElement("deferred-method");            writer.startElement("method-signature");            writer.writeText(property.getMethodSignature());            writer.closeElement(2);          } else           if (property.isValueExpressionEnabled()) {            String type=property.getPropertyClass();            writer.startElement("deferred-value");            writer.startElement("type");            writer.writeText(type);            writer.closeElement(2);          } else {            writer.startElement("rtexprvalue");            writer.writeText(getRtexprvalue(tagName,propertyName));            writer.closeElement();          }        } else {          writer.startElement("rtexprvalue");          writer.writeText(getRtexprvalue(tagName,propertyName));          writer.closeElement();        }        writer.closeElement();      }      AttributeBean[] attributes=renderer.getAttributes();      AttributeBean attribute;      for (int i=0, len=attributes.length; i < len; i++) {        if (null == (attribute=attributes[i])) {          continue;        }        if (!attribute.isTagAttribute()) {          continue;        }        if (attributeShouldBeExcluded(renderer,attribute.getAttributeName())) {          continue;        }        writer.startElement("attribute");        description=attribute.getDescription("");        if (description != null) {          String descriptionText=description.getDescription().trim();          if (descriptionText != null) {            writer.startElement("description");            StringBuffer sb=new StringBuffer();            sb.append("<![CDATA[");            sb.append(descriptionText);            sb.append("]]>\n");            writer.writeText(sb.toString());            writer.closeElement();          }        }        String attributeName=attribute.getAttributeName();        writer.startElement("name");        writer.writeText(attributeName);        writer.closeElement();        writer.startElement("required");        writer.writeText(attribute.isRequired() ? Boolean.TRUE.toString() : Boolean.FALSE.toString());        writer.closeElement();        if (!"id".equals(attributeName)) {          String type=attribute.getAttributeClass();          writer.startElement("deferred-value");          writer.startElement("type");          writer.writeText(type);          writer.closeElement(2);        } else {          writer.startElement("rtexprvalue");          writer.writeText(getRtexprvalue(tagName,attributeName));          writer.closeElement();        }        writer.closeElement();      }      writer.startElement("attribute");      writer.startElement("description");      writer.writeText("The ValueExpression linking this component to a property in a backing bean");      writer.closeElement();      writer.startElement("name");      writer.writeText("binding");      writer.closeElement();      writer.startElement("required");      writer.writeText("false");      writer.closeElement();      writer.startElement("deferred-value");      writer.startElement("type");      writer.writeText("javax.faces.component.UIComponent");      writer.closeElement(2);      writer.closeElement(2);    }  }  String tagDef=loadOptionalTags();  if (tagDef != null) {    writer.write(tagDef);  }}  }
class C{  private static int sumEqNe(double value,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int ix=Arrays.binarySearch(bv,value);  int cnt=0;  if (ix >= 0) {    while (ix > 0 && value == bv[ix - 1])     --ix;    while (ix < bv.length && value == bv[ix]) {      ix++;      cnt++;    }  }  if (bOp.fn instanceof NotEquals)   cnt=bv.length - cnt;  return cnt;}  }
class C{  private void handleReceivedEnumerationData(){switch (this.aws.subStage) {case QUERY_LOCAL_RESOURCES:    getLocalResources(EBSVolumesEnumerationSubStage.COMPARE);  break;case COMPARE:compareLocalStateWithEnumerationData(EBSVolumesEnumerationSubStage.CREATE_UPDATE_DISK_STATES);break;case CREATE_UPDATE_DISK_STATES:EBSVolumesEnumerationSubStage next;if (this.aws.nextToken == null) {next=EBSVolumesEnumerationSubStage.DELETE_DISKS;} else {next=EBSVolumesEnumerationSubStage.GET_NEXT_PAGE;}createOrUpdateDiskStates(next);break;case GET_NEXT_PAGE:getNextPageFromEnumerationAdapter(EBSVolumesEnumerationSubStage.QUERY_LOCAL_RESOURCES);break;case DELETE_DISKS:deleteDiskStates(EBSVolumesEnumerationSubStage.ENUMERATION_STOP);break;case ENUMERATION_STOP:signalStopToEnumerationAdapter();break;default :Throwable t=new Exception("Unknown AWS enumeration sub stage");signalErrorToEnumerationAdapter(t);}}  }
class C{  @SideEffectFree public void logp(Level level,@Nullable String sourceClass,@Nullable String sourceMethod,@Nullable String msg){  throw new RuntimeException();}  }
class C{  @Override public String toString(){  return new String(this.text);}  }
class C{  public void startBlocking() throws InterruptedException {  run(false);}  }
class C{  public void playerOnPlay(PlayerType.GetActivePlayersReturnType getActivePlayerResult,PlayerType.PropertyValue getPropertiesResult,ListType.ItemsAll getItemResult){  buildNotification(getActivePlayerResult,getPropertiesResult,getItemResult);}  }
class C{  public int match(final AuthScope that){  int factor=0;  if (LangUtils.equals(this.scheme,that.scheme)) {    factor+=1;  } else {    if (this.scheme != ANY_SCHEME && that.scheme != ANY_SCHEME) {      return -1;    }  }  if (LangUtils.equals(this.realm,that.realm)) {    factor+=2;  } else {    if (this.realm != ANY_REALM && that.realm != ANY_REALM) {      return -1;    }  }  if (this.port == that.port) {    factor+=4;  } else {    if (this.port != ANY_PORT && that.port != ANY_PORT) {      return -1;    }  }  if (LangUtils.equals(this.host,that.host)) {    factor+=8;  } else {    if (this.host != ANY_HOST && that.host != ANY_HOST) {      return -1;    }  }  return factor;}  }
class C{  public void addEndElement() throws IOException {  String tag=tagStack_.pop();  writer_.write("</" + tag + ">\r\n");}  }
class C{  public static String stripFromChar(String string,char c){  int ndx=string.indexOf(c);  if (ndx == -1) {    return string;  }  return string.substring(0,ndx);}  }
class C{  @PUT public Response updateOrder(Order order){  orderService.updateOrder(order);  return Response.ok().build();}  }
class C{  public void init(final PdfObject OCProperties,final PdfObject PropertiesObj,final PdfObjectReader currentPdfFile,final int pageNumber){  OCpageNumber=pageNumber;  propertyMap=new HashMap<String,PdfObject>();  refToPropertyID=new HashMap<String,String>();  refTolayerName=new HashMap<String,String>();  RBconstraints=new HashMap<String,String>();  this.currentPdfFile=currentPdfFile;  if (PropertiesObj != null) {    setupOCMaps(PropertiesObj,currentPdfFile);  }  final PdfObject layerDict=OCProperties.getDictionary(PdfDictionary.D);  if (layerDict == null) {    return;  }  int OCBaseState=layerDict.getNameAsConstant(PdfDictionary.BaseState);  if (OCBaseState == PdfDictionary.Unknown) {    OCBaseState=PdfDictionary.ON;  }  order=layerDict.getObjectArray(PdfDictionary.Order);  if (debug) {    System.out.println("PropertiesObj=" + PropertiesObj);    System.out.println("layerDict=" + layerDict);    System.out.println("propertyMap=" + propertyMap);    System.out.println("propertyMap=" + propertyMap);    System.out.println("refToPropertyID=" + refToPropertyID);    System.out.println("refTolayerName=" + refTolayerName);    System.out.println("OCBaseState=" + OCBaseState + " (ON="+ PdfDictionary.ON+ ')');    System.out.println("order=" + Arrays.toString(order));    showValues("ON=",PdfDictionary.ON,layerDict);    showValues("OFF=",PdfDictionary.OFF,layerDict);    showValues("RBGroups=",PdfDictionary.RBGroups,layerDict);  }  addLayer(OCBaseState,order,null);  if (OCBaseState != PdfDictionary.ON) {    addLayer(PdfDictionary.ON,layerDict.getKeyArray(PdfDictionary.ON),null);  }  if (OCBaseState != PdfDictionary.OFF) {    addLayer(PdfDictionary.OFF,layerDict.getKeyArray(PdfDictionary.OFF),null);  }  if (OCBaseState == PdfDictionary.ON) {    final Iterator<String> keys=refToPropertyID.keySet().iterator();    String ref;    String layerName;    while (keys.hasNext()) {      ref=keys.next();      layerName=refToPropertyID.get(ref);      refTolayerName.put(ref,layerName);      if (!layersTested.containsKey(layerName)) {        layersTested.put(layerName,"x");        layersEnabled.put(layerName,"x");      }    }  }  setLocks(currentPdfFile,layerDict.getKeyArray(PdfDictionary.Locked));  setConstraints(layerDict.getKeyArray(PdfDictionary.RBGroups));  setAS(layerDict.getKeyArray(PdfDictionary.AS),currentPdfFile);  final int[] keys={PdfDictionary.Name,PdfDictionary.Creator};  final String[] titles={"Name","Creator"};  final int count=keys.length;  String val;  for (int jj=0; jj < count; jj++) {    val=layerDict.getTextStreamValue(keys[jj]);    if (val != null) {      metaData.put(titles[jj],val);    }  }  val=layerDict.getName(PdfDictionary.ListMode);  if (val != null) {    metaData.put("ListMode",val);  }}  }
class C{  public PiecewiseExponentialPopulation(double[] intervals,double N0,double[] lambdas,Type units){  super(units);  if (lambdas == null || intervals == null) {    throw new IllegalArgumentException();  }  if (lambdas.length != intervals.length + 1) {    throw new IllegalArgumentException();  }  this.thetas=new double[]{N0};  this.intervals=intervals;  this.lambdas=lambdas;}  }
class C{  public void compactBuffer(){  if (offset != buffer.length) {    byte[] newBuffer=new byte[offset];    System.arraycopy(buffer,0,newBuffer,0,offset);    buffer=newBuffer;  }}  }
class C{  public CViewWrapper(final INaviView module){  m_view=module;}  }
class C{  private final void nextToken(){  if (m_queueMark < m_ops.getTokenQueueSize()) {    m_token=(String)m_ops.m_tokenQueue.elementAt(m_queueMark++);    m_tokenChar=m_token.charAt(0);  } else {    m_token=null;    m_tokenChar=0;  }}  }
class C{  @Override public final boolean isNonPairedMagicWord(String missing){  return (missing == null || missing.equalsIgnoreCase("root"));}  }
class C{  public void release(){  if (logFile != null) {    logFile.close();    logFile=null;  }}  }
class C{  public int hashCode(){  return getPrefId().intValue();}  }
class C{  private void changeButtonsEnableState(boolean isEnable){  view.setEnableResumeButton(isEnable);  view.setEnableStepIntoButton(isEnable);  view.setEnableStepOverButton(isEnable);  view.setEnableStepReturnButton(isEnable);  view.setEnableEvaluateExpressionButtonEnable(isEnable);}  }
class C{  public static Element createElementInSignature11Space(Document doc,String elementName){  if (doc == null) {    throw new RuntimeException("Document is null");  }  if ((ds11Prefix == null) || (ds11Prefix.length() == 0)) {    return doc.createElementNS(Constants.SignatureSpec11NS,elementName);  }  return doc.createElementNS(Constants.SignatureSpec11NS,ds11Prefix + ":" + elementName);}  }
class C{  public static Color rgb(int red,int green,int blue){  return rgba(red,green,blue,255);}  }
class C{  public Vec3 multiply(double scalar){  this.x*=scalar;  this.y*=scalar;  this.z*=scalar;  return this;}  }
class C{  public void removeChannel(String channel){  if (listeningChannels.remove(channel)) {    EventFactory.callEvent(new PlayerUnregisterChannelEvent(this,channel));  }}  }
class C{  private static ApiUsage of(String implementationId,List<IN4JSProject> projects,Map<IN4JSProject,IN4JSProject> concreteApiImplProjectMapping,ApiImplMapping apiImplMapping,List<String> missingImplementationIds){  return new ApiUsage(implementationId,projects,concreteApiImplProjectMapping,apiImplMapping,missingImplementationIds,true);}  }
class C{  public void testSimpleReplication() throws IOException {  Journal store1=(Journal)getStore();  Journal store2=(Journal)getStore();  final RWStore rw1=((RWStrategy)store1.getBufferStrategy()).getStore();  final RWStore rw2=((RWStrategy)store2.getBufferStrategy()).getStore();  assertTrue(rw1 != rw2);  final int addr1=rw1.alloc(123,null);  rw2.addAddress(addr1,123);  assertTrue(rw1.physicalAddress(addr1) == rw2.physicalAddress(addr1));  rw1.free(addr1,123);  rw2.removeAddress(addr1);  assertTrue(rw1.physicalAddress(addr1) == rw2.physicalAddress(addr1));  assert (addr1 == rw1.alloc(123,null));  rw2.addAddress(addr1,123);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ComputeSystemRestRep deregisterComputeSystem(@PathParam("id") URI id) throws ControllerException {  ArgValidator.checkUri(id);  ComputeSystem cs=_dbClient.queryObject(ComputeSystem.class,id);  ArgValidator.checkEntity(cs,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.UNREGISTERED.toString().equalsIgnoreCase(cs.getRegistrationStatus())) {    cs.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(cs);    ComputeElementListRestRep result=getComputeElements(cs.getId());    List<ComputeElementRestRep> blades=result.getList();    List<URI> unprovisionedBlades=new ArrayList<URI>();    for (    ComputeElementRestRep ce : blades) {      if (ce.getAvailable()) {        unprovisionedBlades.add(ce.getId());        _log.debug("Found unprovisioned blade:" + ce.getName());      }    }    List<URI> cvpIds=_dbClient.queryByType(ComputeVirtualPool.class,true);    Iterator<ComputeVirtualPool> iter=_dbClient.queryIterativeObjects(ComputeVirtualPool.class,cvpIds);    while (iter.hasNext()) {      ComputeVirtualPool cvp=iter.next();      _log.debug("Remove unprovisioned blades from cvp: " + cvp.getLabel());      StringSet currentElements=new StringSet();      if (cvp.getMatchedComputeElements() != null) {        currentElements.addAll(cvp.getMatchedComputeElements());        for (        URI bladeId : unprovisionedBlades) {          currentElements.remove(bladeId.toString());        }      }      cvp.setMatchedComputeElements(currentElements);      _dbClient.updateAndReindexObject(cvp);      _log.debug("Removed ces from cvp");    }    recordAndAudit(cs,OperationTypeEnum.DEREGISTER_COMPUTE_SYSTEM,true,null);  }  return getComputeSystem(id);}  }
class C{  public void initialWorkerState(){  Long timeAlive=System.currentTimeMillis() - startUpTime;  String localhostname="";  String fullHostName="";  try {    localhostname=java.net.InetAddress.getLocalHost().getHostName();    fullHostName=java.net.InetAddress.getLocalHost().getCanonicalHostName();  } catch (  UnknownHostException e) {    e.printStackTrace();  }  workerState.setTimeAliveMillis(timeAlive);  workerState.setHostName(localhostname);  workerState.setTcpUri(tcpUri);  workerState.setProjectId(projectId);  workerState.setWorkerIdentification(UUID.randomUUID());  workerState.setMasterTcpUri(masterUri);  workerState.setLogDir(logDir);  workerState.setTier(tier);  workerState.setProcessors(Runtime.getRuntime().availableProcessors());  workerState.setWorkersSpawned(getNumberOfWorkers());  workerState.setWorkerStatus("RUNNING");  StringBuffer buf=new StringBuffer("The following [ ");  if (tcpUri == null) {    buf.append("tcpUri,");  }  if (masterUri == null) {    buf.append("masterUri,");  }  if (projectId == null) {    buf.append("projectId,");  }  if (logDir == null) {    buf.append("logDir,");  }  buf.append("] are null \n");  Utilities.verboseLog(buf.toString());}  }
class C{  public static String convertColor(String color){  if (color == null)   return BLACK;  if (color.length() != 6)   return color;  if (!color.startsWith("#"))   return "#" + color;  return color;}  }
class C{  public static void configureUserMenu(HttpServletRequest request,ServletContext context){  final AppUser user=(AppUser)request.getSession().getAttribute(Constants.USUARIOKEY);  final MenuRepository originalMenuRepository=(MenuRepository)context.getAttribute(MenuRepository.MENU_REPOSITORY_KEY);  final MenuConfigurator mc=new MenuConfigurator();  mc.configureMenu(originalMenuRepository,user);  request.getSession().setAttribute(MenuRepository.MENU_REPOSITORY_KEY,mc.getUserMenuRepository());  request.getSession().setAttribute(Constants.USER_AVAILABLE_MENUS,mc.getUserTopMenus());}  }
class C{  public static int copyChangedValues(PO to,PO from){  return copyValues(to,from,null,null,true);}  }
class C{  public void cleanUp(){  mFrameLayout.cleanUp();  if (mToolTipViewGroup != null) {    ((ViewGroup)mActivity.getWindow().getDecorView()).removeView(mToolTipViewGroup);  }}  }
class C{  public TestCaseStep(final String stepNumber,final String description,final TestCaseStatus status,final String info){  this.stepNumber=stepNumber;  this.description=description;  this.status=status;  this.executionInfo=info;}  }
class C{  public static void showDirections(Context ctx,Location start,Location dest){  String uri=String.format(ctx.getResources().getConfiguration().locale,"http://maps.google.com/maps?saddr=%f,%f&daddr=%f,%f",start.getLatitude(),start.getLongitude(),dest.getLatitude(),dest.getLongitude());  startIntent(ctx,uri);}  }
class C{  public ServiceOperationException(){  super();}  }
class C{  public NbtTagByte(String name,int value){  super(name);  this.value=(byte)value;}  }
class C{  public void createLog(){  List<String> commandList=new ArrayList<String>();  commandList.add("logcat");  commandList.add("-f");  commandList.add(getLogPath());  commandList.add("-v");  commandList.add("time");  try {    process=Runtime.getRuntime().exec(commandList.toArray(new String[commandList.size()]));  } catch (  Exception e) {    Log.e(TAG,e.getMessage(),e);  }}  }
class C{  private String dependencyToArtifactId(String newPropertyKey,String dependency){  StringBuilder artifactId=new StringBuilder();  Matcher matcher=COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);  if (matcher.matches()) {    String artifact=matcher.group(2);    artifact=artifact.replace('/','-');    artifact=artifact.replaceAll("(?<!solr-)analysis-","analyzers-");    if ("lucene".equals(matcher.group(1))) {      artifactId.append("lucene-");    }    artifactId.append(artifact);  } else {    matcher=internalJarPattern.matcher(dependency);    if (matcher.matches()) {      artifactId.append(matcher.group(1));      artifactId.append(matcher.group(2));    } else {      throw new BuildException("Malformed module dependency from '" + newPropertyKey + "': '"+ dependency+ "'");    }  }  return artifactId.toString();}  }
class C{  private void drawScaled(Graphics g){  long startTime, endTime, totalTime;  ((Graphics2D)g).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);  startTime=System.nanoTime();  for (int i=0; i < 100; ++i) {    g.drawImage(picture,SCALE_X,DIRECT_Y,scaleW,scaleH,null);  }  endTime=System.nanoTime();  totalTime=(endTime - startTime) / 1000000;  g.setColor(Color.BLACK);  g.drawString("Direct: " + ((float)totalTime / 100) + " ms",SCALE_X,DIRECT_Y + scaleH + 20);  System.out.println("scaled: " + totalTime);  if (scaledImage == null || scaledImage.getWidth() != scaleW || scaledImage.getHeight() != scaleH) {    GraphicsConfiguration gc=getGraphicsConfiguration();    scaledImage=gc.createCompatibleImage(scaleW,scaleH);    Graphics gImg=scaledImage.getGraphics();    ((Graphics2D)gImg).setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);    gImg.drawImage(picture,0,0,scaleW,scaleH,null);  }  startTime=System.nanoTime();  for (int i=0; i < 100; ++i) {    g.drawImage(scaledImage,SCALE_X,INTERMEDIATE_Y,null);  }  endTime=System.nanoTime();  totalTime=(endTime - startTime) / 1000000;  g.drawString("Intermediate: " + ((float)totalTime / 100) + " ms",SCALE_X,INTERMEDIATE_Y + scaleH + 20);  System.out.println("Intermediate scaled: " + totalTime);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tNew field specification (name@type@value).\n" + "\t Environment variables may be used for any/all parts of the\n" + "\tspecification. Type can be one of (numeric, nominal, string or date).\n"+ "\tThe value for date be a specific date string or the special string\n"+ "\t\"now\" to indicate the current date-time. A specific date format\n"+ "\tstring for parsing specific date values can be specified by suffixing\n"+ "\tthe type specification - e.g. \"myTime@date:MM-dd-yyyy@08-23-2009\"."+ "This option may be specified multiple times","A",1,"-A <name:type:value>"));  return newVector.elements();}  }
class C{  public void incNumEvents(){  this._stats.incLong(_numEventsId,1);}  }
class C{  public GraphBuilder<N> expectedNodeCount(int expectedNodeCount){  checkArgument(expectedNodeCount >= 0,"The expected number of nodes can't be negative: %s",expectedNodeCount);  this.expectedNodeCount=Optional.of(expectedNodeCount);  return this;}  }
class C{  public Document read(InputSource in) throws DocumentException {  try {    XMLReader reader=getXMLReader();    reader=installXMLFilter(reader);    EntityResolver thatEntityResolver=this.entityResolver;    if (thatEntityResolver == null) {      thatEntityResolver=createDefaultEntityResolver(in.getSystemId());      this.entityResolver=thatEntityResolver;    }    reader.setEntityResolver(thatEntityResolver);    SAXContentHandler contentHandler=createContentHandler(reader);    contentHandler.setEntityResolver(thatEntityResolver);    contentHandler.setInputSource(in);    boolean internal=isIncludeInternalDTDDeclarations();    boolean external=isIncludeExternalDTDDeclarations();    contentHandler.setIncludeInternalDTDDeclarations(internal);    contentHandler.setIncludeExternalDTDDeclarations(external);    contentHandler.setMergeAdjacentText(isMergeAdjacentText());    contentHandler.setStripWhitespaceText(isStripWhitespaceText());    contentHandler.setIgnoreComments(isIgnoreComments());    reader.setContentHandler(contentHandler);    configureReader(reader,contentHandler);    reader.parse(in);    return contentHandler.getDocument();  } catch (  Exception e) {    if (e instanceof SAXParseException) {      SAXParseException parseException=(SAXParseException)e;      String systemId=parseException.getSystemId();      if (systemId == null) {        systemId="";      }      String message="Error on line " + parseException.getLineNumber() + " of document "+ systemId+ " : "+ parseException.getMessage();      throw new DocumentException(message,e);    } else {      throw new DocumentException(e.getMessage(),e);    }  }}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener l){  pcs.removePropertyChangeListener(l);}  }
class C{  public boolean isCatchup(){  return catchup;}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  for (int i=0; i < m_Elements.length; i++) {    if (i > 0)     text.append(",");    text.append(Utils.doubleToString(m_Elements[i],6));  }  text.append("\n");  return text.toString();}  }
class C{  public BST(){}  }
class C{  public void renderPostEffects(float partialTicks){  ScaledResolution scaledResolution=new ScaledResolution(Minecraft.getMinecraft());  GL11.glMatrixMode(GL11.GL_PROJECTION);  GL11.glLoadIdentity();  GL11.glOrtho(0.0D,scaledResolution.getScaledWidth(),scaledResolution.getScaledHeight(),0.0D,1000.0D,3000.0D);  GL11.glMatrixMode(GL11.GL_MODELVIEW);  GL11.glLoadIdentity();  GL11.glTranslatef(0.0F,0.0F,-2000.0F);  this.applyBloodSky(partialTicks);  this.applySwirl(partialTicks);}  }
class C{  public static <T>List<T> toList(T obj1,T obj2){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  return list;}  }
class C{  public static IStatus validateImportDeclaration(String name,String sourceLevel,String complianceLevel){  if (name == null || name.length() == 0) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_import_nullImport,null);  }  if (name.charAt(name.length() - 1) == '*') {    if (name.charAt(name.length() - 2) == '.') {      return validatePackageName(name.substring(0,name.length() - 2),sourceLevel,complianceLevel);    } else {      return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_import_unqualifiedImport,null);    }  }  return validatePackageName(name,sourceLevel,complianceLevel);}  }
class C{  public PredicateFilterBuilder(final Predicate predicate){  Objects.requireNonNull(predicate);  this.predicate=predicate;}  }
class C{  private void lockFocus(){  Log.d(TAG,"lockFocus: ");  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_START);    mState=STATE_WAITING_LOCK;    mCaptureSession.setRepeatingRequest(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    Log.e(TAG,"CameraAccessException: " + e);    e.printStackTrace();  }}  }
class C{  private void createEditor(){  m_editor=VEditorFactory.getEditor(m_mField,true);  m_editor.addVetoableChangeListener(this);  m_editor.addActionListener(this);}  }
class C{  @SuppressWarnings("unchecked") public void coupleOneToMany(final List<PotentialProducer> sourceAttributes,final List<PotentialConsumer> targetAttributes){  for (  PotentialProducer producingAttribute : sourceAttributes) {    for (    PotentialConsumer consumingAttribute : targetAttributes) {      Coupling<?> coupling=new Coupling(producingAttribute.createProducer(),consumingAttribute.createConsumer());      try {        getCouplingManager().addCoupling(coupling);      } catch (      UmatchedAttributesException e) {        e.printStackTrace();      }    }  }}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private static void checkArguments(final AbstractSQLProvider provider,final INaviView view,final List<INaviModule> modules,final CTagManager nodeTagManager){  Preconditions.checkNotNull(provider,"IE00619: Provider argument can not be null");  Preconditions.checkNotNull(view,"IE00620: View argument can not be null");  Preconditions.checkArgument(view.inSameDatabase(provider),"IE00621: View is not part of this database");  Preconditions.checkNotNull(modules,"IE00622: Modules argument can not be null");  for (  final INaviModule module : modules) {    Preconditions.checkNotNull(module,"IE00623: Modules list contains a null element");    Preconditions.checkArgument(module.inSameDatabase(provider),"IE00624: Module is not part of this database");  }  Preconditions.checkNotNull(nodeTagManager,"IE00625: Node tag manager argument can not be null");  Preconditions.checkArgument(nodeTagManager.inSameDatabase(provider),"IE00626: Node tag manager is not part of this database");}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  nbrRooms=null;  expectedCapacity=null;  classId=null;  section=null;  managingDept=null;  subpart=null;  className="";  courseName="";  courseTitle="";  parentClassName="-";  itypeDesc="";  datePattern=null;  instrLead=DynamicList.getInstance(new ArrayList(),factoryInstructors);  managingDeptLabel="-";  notes="";  displayInstructor=null;  schedulePrintNote=null;  classSuffix=null;  enabledForStudentScheduling=null;  maxExpectedCapacity=null;  roomRatio=null;  unlimitedEnroll=null;  isCrosslisted=null;  isCancelled=null;  instructors=DynamicList.getInstance(new ArrayList(),factoryInstructors);  instrPctShare=DynamicList.getInstance(new ArrayList(),factoryInstructors);  assignments=null;  enrollment=null;  accommodation=null;  super.reset(mapping,request);}  }
class C{  public boolean handleMessage(Message m,Object o){  if (!shouldLive || !m.getType().equals("collectiveUpdate-" + name))   return false;  final String logSender=observer + "#collectiveUpdate";  Logger.debug(logSender,"Update from " + m.getSender());  if (!m.getRecipient().name.equals(contributor.getName()))   Logger.warning(logSender,"Recipient and my contributor are not the same:\n" + "Recipient: " + m.getRecipient().name + "\n"+ "Contributor: "+ contributor.getName(),null);  Collective c=(Collective)o;  cacheCollection=null;  commandCollection=null;  cache.remove(m.getRecipient().name);  c.cache.remove(m.getRecipient().name);  cache.remove(m.getSender().name);  c.cache.remove(m.getSender().name);  if (contributor == null)   Logger.warning(logSender,"Non-contributor observer is known by " + m.getSender(),null);  updateLocalInfo();  m.setReply(this);  repairSenderAddress(c,m.getSender());  merge(c);  observer.collectiveUpdated((ContributionBox)cache.get(m.getSender().name));  return true;}  }
class C{  public IRPrinter(String m){  msg=m;}  }
class C{  public static boolean isFlag(int index){  flags.check(index);  if ((index >= 1 && index <= 4) || (index >= 12))   return false;  return true;}  }
class C{  public Intent isSipRequestResolved(SipRequest request){  Set<String> tags=request.getFeatureTags();  for (  String featureTag : tags) {    Intent intent=generateSipIntent(request,featureTag);    if (intent == null) {      continue;    }    if (logger.isActivated()) {      logger.debug("SIP intent: " + intent.getAction() + ", "+ intent.getType());    }    if (isSipIntentResolvedByBroadcastReceiver(intent)) {      return intent;    }  }  return null;}  }
class C{  public CompleteGraphRelationshipGenerator(NumberOfNodesBasedConfig configuration){  super(configuration);}  }
class C{  public RIXMLProvider(){  providerID=this.getClass().getName();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getBOMProductType().equals(BOMPRODUCTTYPE_OutsideProcessing)) {    if (getM_ProductBOM_ID() != 0)     setM_ProductBOM_ID(0);  } else   if (getM_ProductBOM_ID() == 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@NotFound@ @M_ProductBOM_ID@"));    return false;  }  if (getM_ProductOperation_ID() == 0) {    if (getSeqNo() != 0)     setSeqNo(0);  } else   if (getSeqNo() == 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@NotFound@ @SeqNo@"));    return false;  }  if (getM_AttributeSetInstance_ID() != 0) {    getBOM();    if (m_bom != null && MBOM.BOMTYPE_Make_To_Order.equals(m_bom.getBOMType()))     ; else {      log.saveError("Error",Msg.parseTranslation(getCtx(),"Reset @M_AttributeSetInstance_ID@: Not Make-to-Order"));      setM_AttributeSetInstance_ID(0);      return false;    }  }  if ((getBOMProductType().equals(BOMPRODUCTTYPE_Alternative) || getBOMProductType().equals(BOMPRODUCTTYPE_AlternativeDefault)) && getM_BOMAlternative_ID() == 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@NotFound@ @M_BOMAlternative_ID@"));    return false;  }  if (getM_ProductOperation_ID() != 0) {    if (getSeqNo() == 0) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@NotFound@ @SeqNo@"));      return false;    }  } else {    if (getSeqNo() != 0)     setSeqNo(0);    if (getLeadTimeOffset() != 0)     setLeadTimeOffset(0);  }  if (getLine() == 0) {    String sql="SELECT NVL(MAX(Line),0)+10 FROM M_BOMProduct WHERE M_BOM_ID=?";    int ii=DB.getSQLValue(get_TrxName(),sql,getM_BOM_ID());    setLine(ii);  }  return true;}  }
class C{  @Deprecated public ApprovalInfo reject(String id,String message){  UriBuilder uriBuilder=client.uriBuilder(PathConstants.REJECT_URL);  if (message != null) {    uriBuilder.replaceQueryParam("message",message);  }  return client.postURI(ApprovalInfo.class,uriBuilder.build(id));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.COMMENT___INLINE_COMMENT_1:    return inlineComment_1 != null && !inlineComment_1.isEmpty();case UmplePackage.COMMENT___MULTILINE_COMMENT_1:  return multilineComment_1 != null && !multilineComment_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public int add(int[] slab,int slabPos,int slabMask,int slabLength,byte[] blob,int blobPos,int blobMask,int blobLength){  int i=bloomSeeds.length;  int seen=1;  while (--i >= 0) {    int seed=bloomSeeds[i];    int slabHash=MurmurHash.hash32(slab,slabPos,slabLength,slabMask,seed);    int blobHash=MurmurHash.hash32(blob,blobPos,blobLength,blobMask,seed);    seen=updateBloom(bloom,bloomMask,seen,MurmurHash.hash32(slabHash,blobHash,seed));  }  return seen;}  }
class C{  public void addSelection(final Object element){  selectionModel.add(element);}  }
class C{  public void testLowMemoryLoad() throws Exception {  final String[] classToLoad={"Bug4168625Class"};  final String[] classToWait={"Bug4168625Resource3_en_US","Bug4168625Resource3_en","Bug4168625Resource3"};  final Loader loader=new Loader(classToLoad,classToWait);  final Class c=loader.loadClass("Bug4168625Class");  final Bug4168625Getter test=(Bug4168625Getter)c.newInstance();  causeResourceBundleCacheFlush();  ConcurrentLoadingThread thread1=new ConcurrentLoadingThread(loader,test,new Locale("en","US"));  thread1.start();  loader.waitForNotify(1);  causeResourceBundleCacheFlush();  thread1.ping();  loader.waitForNotify(2);  causeResourceBundleCacheFlush();  thread1.ping();  loader.waitForNotify(3);  causeResourceBundleCacheFlush();  thread1.ping();  thread1.join();  ResourceBundle bundle=(ResourceBundle)thread1.bundle;  String s1=bundle.getString("Bug4168625Resource3_en_US");  String s2=bundle.getString("Bug4168625Resource3_en");  String s3=bundle.getString("Bug4168625Resource3");  if ((s1 == null) || (s2 == null) || (s3 == null)) {    errln("Bundle not constructed correctly.  The parent chain is incorrect.");  }}  }
class C{  public void redistributePercentage(final TableColumn tableColumn,final Double value){  final int qtdCols=(this.pcolumns.size() - 1);  for (  final DynamicColumnData data : this.pcolumns) {    final DynamicLength preferredLength=data.getPreferredLength();    if (tableColumn != data.getTableColumn()) {      preferredLength.setValue((preferredLength.getValue() + (value / qtdCols)));    }  }}  }
class C{  void simplifyAffix(List<String> strList,boolean isSuffix){  TranslatorUtils.removeDuplicateAffix(strList,isSuffix);  int gramLength=TranslatorUtils.GRAM_LENGTH;  match=GramBooleanQuery.combine(match,strList);  for (int n=gramLength; n == gramLength || strList.size() > TranslatorUtils.MAX_SET_SIZE; n--) {    int w=0;    for (    String str : strList) {      if (str.length() > n) {        if (!isSuffix) {          str=str.substring(0,n);        } else {          str=str.substring(str.length() - n,str.length());        }      }      if (w == 0 || strList.get(w - 1) != str) {        strList.set(w,str);        w++;      }    }    strList=strList.subList(0,w);    TranslatorUtils.removeDuplicateAffix(strList,isSuffix);  }  if (!isSuffix) {    TranslatorUtils.removeRedundantAffix(null,strList);  } else {    TranslatorUtils.removeRedundantAffix(null,strList);  }}  }
class C{  public View addProperty(String name,@Nullable View view,FetchMode fetchMode){  properties.put(name,new ViewProperty(name,view,fetchMode));  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:44.070 -0500",hash_original_method="7F059AE8F3F932B35FF16ED888919AA8",hash_generated_method="7F059AE8F3F932B35FF16ED888919AA8") GLES20Canvas(int layer,boolean translucent){  mOpaque=!translucent;  mRenderer=nCreateLayerRenderer(layer);  setupFinalizer();}  }
class C{  public static ColumnType fromString(String text){  if (text != null) {    for (    final ColumnType col : ColumnType.values()) {      if (text.equalsIgnoreCase(col.type)) {        return col;      }    }  }  return null;}  }
class C{  @SuppressWarnings({"squid:S1206"}) public boolean equals(Object o){  if (o == null || !(o instanceof MetaVolumeRecommendation)) {    return false;  }  MetaVolumeRecommendation other=(MetaVolumeRecommendation)o;  return (isCreateMetaVolumes() == other.isCreateMetaVolumes() && getMetaMemberSize() == other.getMetaMemberSize() && getMetaMemberCount() == other.getMetaMemberCount() && getMetaVolumeType().equals(other.getMetaVolumeType()));}  }
class C{  public String consumeAttributeKey(){  int start=pos;  while (!isEmpty() && (matchesWord() || matchesAny('-','_',':')))   pos++;  return queue.substring(start,pos);}  }
class C{  @Deprecated public NotesMetadataList findNotesMetadata(NoteFilter filter,int offset,int maxNotes,NotesMetadataResultSpec resultSpec) throws EDAMUserException, EDAMSystemException, EDAMNotFoundException, TException {  return getAsyncClient().getClient().findNotesMetadata(getAuthenticationToken(),filter,offset,maxNotes,resultSpec);}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public PossibleDsepFci(Graph graph,IndependenceTest test){  if (graph == null) {    throw new NullPointerException("null GaSearchGraph passed in " + "PossibleDSepSearch constructor!");  }  if (test == null) {    throw new NullPointerException("null IndependenceChecker passed " + "in PossibleDSepSearch " + "constructor!");  }  this.graph=graph;  this.test=test;  this.sepset=new SepsetMap();  setMaxPathLength(maxReachablePathLength);}  }
class C{  public static boolean checkForAdjacentManipulators(World world,BlockPos pos){  for (  EnumFacing face : EnumFacing.values())   if (isManipulator(world.getTileEntity(pos.offset(face))))   return false;  if (isManipulator(world.getTileEntity(pos.up(2))))   return false;  if (isManipulator(world.getTileEntity(pos.down(2))))   return false;  return true;}  }
class C{  private boolean isEndOfLine(int c) throws IOException {  if (c == '\r') {    if (in.lookAhead() == '\n') {      c=in.read();    }  }  return (c == '\n');}  }
class C{  protected TextBlock createLabel(Comparable category,float width,RectangleEdge edge,Graphics2D g2){  TextBlock label=TextUtilities.createTextBlock(category.toString(),getTickLabelFont(category),getTickLabelPaint(category),width,this.maximumCategoryLabelLines,new G2TextMeasurer(g2));  return label;}  }
class C{  public ClassicAnalyzer(Reader stopwords) throws IOException {  this(loadStopwordSet(stopwords));}  }
class C{  private void addMnemonic(int index,int mnemonic){  if (mnemonicToIndexMap == null) {    initMnemonics();  }  mnemonicInputMap.put(KeyStroke.getKeyStroke(mnemonic,BasicLookAndFeel.getFocusAcceleratorKeyMask()),"setSelectedIndex");  mnemonicToIndexMap.put(Integer.valueOf(mnemonic),Integer.valueOf(index));}  }
class C{  private void handshake(SocketAddress address,ProxyClient sc,FutureEventListener<ServerInfo> listener,boolean logging,boolean getOwnerships){  if (clientConfig.getHandshakeWithClientInfo()) {    ClientInfo clientInfo=new ClientInfo();    clientInfo.setGetOwnerships(getOwnerships);    clientInfo.setStreamNameRegex(clientConfig.getStreamNameRegex());    if (logging) {      logger.info("Handshaking with {} : {}",address,clientInfo);    }    sc.getService().handshakeWithClientInfo(clientInfo).addEventListener(listener);  } else {    if (logging) {      logger.info("Handshaking with {}",address);    }    sc.getService().handshake().addEventListener(listener);  }}  }
class C{  void handleMaxbuf(ParsedDirective pd) throws SaslException {  if (-1 != m_maxBuf)   throw new SaslException("Too many maxBuf directives.");  m_maxBuf=Integer.parseInt(pd.getValue());  if (0 == m_maxBuf)   throw new SaslException("Max buf value must be greater than zero.");}  }
class C{  public String visitedAtEncrypted(){  return visitedAtEncrypted;}  }
class C{  public static Protos.PaymentACK createPaymentAck(Protos.Payment paymentMessage,@Nullable String memo){  final Protos.PaymentACK.Builder builder=Protos.PaymentACK.newBuilder();  builder.setPayment(paymentMessage);  if (memo != null)   builder.setMemo(memo);  return builder.build();}  }
class C{  double calcESS(Vector<Integer> cluster){  double[] fValues1=new double[m_instances.numAttributes()];  for (int i=0; i < cluster.size(); i++) {    Instance instance=m_instances.instance(cluster.elementAt(i));    for (int j=0; j < m_instances.numAttributes(); j++) {      fValues1[j]+=instance.value(j);    }  }  for (int j=0; j < m_instances.numAttributes(); j++) {    fValues1[j]/=cluster.size();  }  Instance centroid=(Instance)m_instances.instance(cluster.elementAt(0)).copy();  for (int j=0; j < m_instances.numAttributes(); j++) {    centroid.setValue(j,fValues1[j]);  }  double fESS=0;  for (int i=0; i < cluster.size(); i++) {    Instance instance=m_instances.instance(cluster.elementAt(i));    fESS+=m_DistanceFunction.distance(centroid,instance);  }  return fESS / cluster.size();}  }
class C{  private ObjectAnimator createEnteringImageMatrixAnimator(){  Matrix initMatrix=MatrixUtils.getImageMatrix(mAnimatedImage);  initMatrix.getValues(mInitThumbnailMatrixValues);  final Matrix endMatrix=MatrixUtils.getImageMatrix(mImageTo);  Log.v(TAG,"createEnteringImageMatrixAnimator, mInitThumbnailMatrixValues " + Arrays.toString(mInitThumbnailMatrixValues));  Log.v(TAG,"createEnteringImageMatrixAnimator, initMatrix " + initMatrix);  Log.v(TAG,"createEnteringImageMatrixAnimator,  endMatrix " + endMatrix);  mAnimatedImage.setScaleType(ImageView.ScaleType.MATRIX);  return ObjectAnimator.ofObject(mAnimatedImage,MatrixEvaluator.ANIMATED_TRANSFORM_PROPERTY,new MatrixEvaluator(),initMatrix,endMatrix);}  }
class C{  public void documentRegistration(){}  }
class C{  public boolean containsKey(Object key){  return map.containsKey(key);}  }
class C{  public ArrayMemberValue(MemberValue t,ConstPool cp){  super('[',cp);  type=t;  values=null;}  }
class C{  @Override public void warn(String format,Object... argArray){  if (logger.isLoggable(Level.WARNING)) {    FormattingTuple ft=MessageFormatter.arrayFormat(format,argArray);    log(SELF,Level.WARNING,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public NetAppClusterFacade(String host,int port,String username,String password,boolean useHTTPS,boolean isSVM,String svmName){  if (log.isDebugEnabled()) {    String svm=(svmName != null ? svmName : "");    log.debug("Connecting to NetApp server: " + host + ":"+ port+ ":"+ svm);  }  _svmName=svmName;  log.info("Connecting to NetApp server: " + host + ":"+ port+ ":"+ svmName);  server=new Server(host,port,username,password,useHTTPS,isSVM,svmName,true);}  }
class C{  static final double honeyToNectar(double honey){  return honey / honeyExpandFactor;}  }
class C{  public void testCopyGeometryWithNonDefaultDimension() throws ParseException {  GeometryFactory gf=new GeometryFactory(CoordinateArraySequenceFactory.instance());  CoordinateSequence mpSeq=gf.getCoordinateSequenceFactory().create(1,2);  mpSeq.setOrdinate(0,0,50);  mpSeq.setOrdinate(0,1,-2);  Point g=gf.createPoint(mpSeq);  CoordinateSequence pSeq=((Point)g.getGeometryN(0)).getCoordinateSequence();  assertEquals(2,pSeq.getDimension());  Point g2=(Point)geometryFactory.createGeometry(g);  assertEquals(2,g2.getCoordinateSequence().getDimension());}  }
class C{  public ProxyFactory<I> invokeType(InvokeType invokeType){  this.invokeType=checkNotNull(invokeType);  return this;}  }
class C{  public CanvasComponentBuilder painter(CanvasPainter painter){  painters.add(painter);  return this;}  }
class C{  public static int compareTo(byte[] buffer1,int offset1,int length1,byte[] buffer2,int offset2,int length2){  int end1=offset1 + length1;  int end2=offset2 + length2;  for (int i=offset1, j=offset2; i < end1 && j < end2; i++, j++) {    int a=(buffer1[i] & 0xff);    int b=(buffer2[j] & 0xff);    if (a != b) {      return a - b;    }  }  return length1 - length2;}  }
class C{  public void testLog(){  assert log.isDebugEnabled();  assert log.isInfoEnabled();  log.debug("This is 'debug' message.");  log.info("This is 'info' message.");  log.warning("This is 'warning' message.");  log.warning("This is 'warning' message.",new Exception("It's a test warning exception"));  log.error("This is 'error' message.");  log.error("This is 'error' message.",new Exception("It's a test error exception"));}  }
class C{  public boolean _isEsxi6x(){  if (osName.equals(ESXI) && osVersion.startsWith("6.")) {    return true;  }  return false;}  }
class C{  private static void findArtworkInArtworkFolder(MovieSet movieSet){  String artworkFolder=MovieModuleManager.MOVIE_SETTINGS.getMovieSetArtworkFolder();  if (!MovieModuleManager.MOVIE_SETTINGS.isEnableMovieSetArtworkFolder() || StringUtils.isBlank(artworkFolder)) {    return;  }  for (  MediaFileType type : SUPPORTED_ARTWORK_TYPES) {    for (    String fileType : SUPPORTED_ARTWORK_FILETYPES) {      String artworkFileName=MovieRenamer.replaceInvalidCharacters(movieSet.getTitle()) + "-" + type.name().toLowerCase()+ "."+ fileType;      Path artworkFile=Paths.get(artworkFolder,artworkFileName);      if (Files.exists(artworkFile)) {        MediaFile mediaFile=new MediaFile(artworkFile,type);        mediaFile.gatherMediaInformation();        movieSet.addToMediaFiles(mediaFile);      }    }  }}  }
class C{  public void removeAtttributes() throws XmlPullParserException {  if (element != null) {    element.setAttributes(new ArrayList());  }}  }
class C{  public void showDialog(){  ProjectDescriptor project=appContext.getCurrentProject().getRootProject();  getCommitsLog(project);  selectedRevision=null;  view.selectProjectChangesButton(true);  view.selectResourceChangesButton(false);  showChangesInProject=true;  view.selectDiffWithPrevVersionButton(true);  diffType=DiffWith.DIFF_WITH_PREV_VERSION;  displayCommitA(null);  displayCommitB(null);  view.setDiffContext("");  view.setCompareType(constant.historyNothingToDisplay());  if (isViewClosed) {    workspaceAgent.openPart(this,PartStackType.TOOLING);    isViewClosed=false;  }  PartPresenter activePart=partStack.getActivePart();  if (activePart == null || !activePart.equals(this)) {    partStack.setActivePart(this);  }}  }
class C{  private void addTermFrequencies(Map<String,Int> termFreqMap,Terms vector,@Nullable String fieldName) throws IOException {  final TermsEnum termsEnum=vector.iterator();  final CharsRefBuilder spare=new CharsRefBuilder();  BytesRef text;  while ((text=termsEnum.next()) != null) {    spare.copyUTF8Bytes(text);    final String term=spare.toString();    if (isNoiseWord(term)) {      continue;    }    if (isSkipTerm(fieldName,term)) {      continue;    }    final PostingsEnum docs=termsEnum.postings(null);    int freq=0;    while (docs != null && docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {      freq+=docs.freq();    }    Int cnt=termFreqMap.get(term);    if (cnt == null) {      cnt=new Int();      termFreqMap.put(term,cnt);      cnt.x=freq;    } else {      cnt.x+=freq;    }  }}  }
class C{  protected void preProcessPasoFormData(AccionMultientidadForm accionMultientidadForm,HttpServletRequest request,HttpServletResponse response) throws Exception {  AccionMultientidadVO accionMultientidadVO=null;  if (StringUtils.isEmpty(accionMultientidadForm.getPaso())) {    ServicioAdministracion oServicio=LocalizadorServicios.getServicioAdministracion();    AccionMultientidad accionMultientidad=oServicio.getAccionMultientidad(accionMultientidadForm.getIdAccion());    accionMultientidadVO=new AccionMultientidadVO();    accionMultientidadVO.setIdAccion(accionMultientidadForm.getIdAccion());    accionMultientidadVO.setNombreAccion(accionMultientidad.getNombre());    accionMultientidadVO.setClaseConfiguradora(accionMultientidad.getClaseConfiguradora());    accionMultientidadVO.setClaseEjecutora(accionMultientidad.getClaseEjecutora());    request.getSession().setAttribute(Defs.ACCION_MULTIENTIDAD_WIZARD,accionMultientidadVO);  } else {    accionMultientidadVO=(AccionMultientidadVO)request.getSession().getAttribute(Defs.ACCION_MULTIENTIDAD_WIZARD);  }  if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_ENTIDADES.equals(accionMultientidadForm.getPaso())) {    accionMultientidadVO.setEntidades(accionMultientidadForm.getEntidades());  } else   if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_ENTIDADES_ORIGEN.equals(accionMultientidadForm.getPaso())) {    accionMultientidadVO.setEntidadesOrigen(accionMultientidadForm.getEntidades());  } else   if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_ENTIDADES_DESTINO.equals(accionMultientidadForm.getPaso())) {    accionMultientidadVO.setEntidadesDestino(accionMultientidadForm.getEntidades());  } else   if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_FICHERO.equals(accionMultientidadForm.getPaso())) {    File ficheroTemporal=File.createTempFile(accionMultientidadVO.getIdAccion() + "-temp",".tmp");    OutputStream tmpFileOutputStream=null;    try {      tmpFileOutputStream=new FileOutputStream(ficheroTemporal);      FileUtils.copy(accionMultientidadForm.getFichero().getInputStream(),tmpFileOutputStream);    }  finally {      if (tmpFileOutputStream != null) {        try {          tmpFileOutputStream.flush();          tmpFileOutputStream.close();        } catch (        Exception e) {        }      }    }    accionMultientidadVO.setFicheroTemporal(ficheroTemporal.getAbsolutePath());    accionMultientidadVO.setNombreFicheroTemporal(accionMultientidadForm.getFichero().getFileName());  } else   if (ConfiguracionAccionMultientidadConstants.PASO_SELECCION_OPCION.equals(accionMultientidadForm.getPaso())) {    accionMultientidadVO.setOpcion(accionMultientidadForm.getOpcion());  }}  }
class C{  public static JpegSegmentData fromFile(File file) throws IOException, ClassNotFoundException {  ObjectInputStream inputStream=null;  try {    inputStream=new ObjectInputStream(new FileInputStream(file));    return (JpegSegmentData)inputStream.readObject();  }  finally {    if (inputStream != null)     inputStream.close();  }}  }
class C{  public int nextInt(int least,int bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextInt(bound - least) + least;}  }
class C{  public static void resetCache(){  s_cache.reset();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:43.844 -0500",hash_original_method="25D47A11917433AAC827E07C052136CF",hash_generated_method="F70E6BECEBE68D29D42E13A82E32E01C") public String toString(){  return getName() + "(" + getClass().getName()+ ")";}  }
class C{  protected QuadTree createData(){  QuadTree qt=new QuadTree(90.0f,-180.0f,-90.0f,180.0f,100,50f);  ByteRasterLocation loc;  byte bytearr[];  if (locationQueryString == null) {    return qt;  }  try {    if (jdbcDriver != null) {      Class.forName(getJdbcDriver());    }    Connection connection=DriverManager.getConnection(getJdbcString(),getUserName(),getUserPassword());    RawDataRecordSet gifdataRS=new RawDataRecordSet(connection,getPropertyPrefix(),props);    RecordSet locationdataRS=new RecordSet(connection,locationQueryString);    while (locationdataRS.next()) {      LocationData ld=new LocationData(locationdataRS);      if (logger.isLoggable(Level.FINE)) {        logger.fine("DBLocationHandler:  location information:\n" + ld);      }      bytearr=gifdataRS.getRawData(ld.getGraphicName());      float lat=ld.getLatitude();      float lon=ld.getLongitude();      loc=new ByteRasterLocation(lat,lon,ld.getCityName(),bytearr);      loc.setLocationHandler(this);      loc.setShowName(isShowNames());      loc.setShowLocation(isShowLocations());      loc.setLocationPaint(getLocationColor());      loc.getLabel().setLinePaint(getNameColor());      loc.setDetails(ld.getCityName() + " is at lat: " + lat+ ", lon: "+ lon);      qt.put(lat,lon,loc);    }    locationdataRS.close();    connection.close();  } catch (  SQLException sqlE) {    logger.warning("DBLocationHandler:SQL Exception: " + sqlE.getMessage());    sqlE.printStackTrace();  }catch (  ClassNotFoundException cnfE) {    logger.warning("DBLocationHandler: Class not found Exception: " + cnfE);  }  return qt;}  }
class C{  protected void imageSubmit(String imageData){  StringBuilder dataBuffer=new StringBuilder();  Element elem=getElement();  HTMLDocument hdoc=(HTMLDocument)elem.getDocument();  getFormData(dataBuffer);  if (dataBuffer.length() > 0) {    dataBuffer.append('&');  }  dataBuffer.append(imageData);  submitData(dataBuffer.toString());  return;}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public void init(){  getWritableDatabase();}  }
class C{  @Override public byte[] serializeKey(Object obj){  return getKeyBuilder().reset().append((Long)obj).getKey();}  }
class C{  public DocumentDictionary(IndexReader reader,String field,String weightField,String payloadField,String contextsField){  this.reader=reader;  this.field=field;  this.weightField=weightField;  this.payloadField=payloadField;  this.contextsField=contextsField;}  }
class C{  private static double[] subvector(double[] v,int head,int tail){  assert (head >= 0) && (head < tail);  assert tail <= v.length;  double[] result=new double[tail - head];  for (int i=head; i < tail; i++) {    result[i - head]=v[i];  }  return result;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void writeTree(JsonGenerator jgen,JsonNode rootNode,SerializationConfig cfg) throws IOException, JsonProcessingException {  _serializerProvider.serializeValue(cfg,jgen,rootNode,_serializerFactory);  if (cfg.isEnabled(SerializationConfig.Feature.FLUSH_AFTER_WRITE_VALUE)) {    jgen.flush();  }}  }
class C{  void loadTweets(final List<Long> tweetIds,final Callback<List<Tweet>> cb){  final String commaSepIds=TextUtils.join(",",tweetIds);  twitterCore.getApiClient().getStatusesService().lookup(commaSepIds,null,null,null).enqueue(new MultiTweetsCallback(tweetIds,cb));}  }
class C{  public void analyze1(CompilationUnit unit,SymbolTable symbolTable){  CompilationUnit ascUnit=(CompilationUnit)unit.getContext().getAttribute(DELEGATE_UNIT);  Logger original=ThreadLocalToolkit.getLogger();  LineNumberMap map=(LineNumberMap)unit.getContext().getAttribute(LINE_NUMBER_MAP);  Logger adapter=new MxmlLogAdapter(original,map);  ThreadLocalToolkit.setLogger(adapter);  delegateSubCompiler.analyze1(ascUnit,symbolTable);  ThreadLocalToolkit.setLogger(original);  Source.transferTypeInfo(ascUnit,unit);  Source.transferNamespaces(ascUnit,unit);}  }
class C{  @Ignore @Test public void test_DR_CREATED_PGS_STARTED_NO_RECEIVER() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);    vm4.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  public void allowDetachToRelease(boolean allowRelease){  if ((false == allowRelease) && !hasCache()) {    setShouldCacheNodes(true);  }  if (null != m_iter)   m_iter.allowDetachToRelease(allowRelease);  super.allowDetachToRelease(allowRelease);}  }
class C{  public final CC x(String x){  return corrPos(x,0);}  }
class C{  public static String join(Object[] objects,char sep){  if (objects.length == 0) {    return "";  }  StringBuffer buffer=new StringBuffer(objects[0].toString());  for (int i=1; i < objects.length; i++) {    buffer.append(sep);    buffer.append(objects[i].toString());  }  return buffer.toString();}  }
class C{  public HashCode append(final boolean[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final boolean element : array) {      append(element);    }  }  return this;}  }
class C{  public ImportItem readComplete(){  progress=100;  updateProgress();  return this;}  }
class C{  public ConverterException(Throwable cause){  super(cause);}  }
class C{  public static void copyResponseParameters(JsonObject jsonRequest,JsonObject jsonResponse){  if (jsonResponse != null) {    for (    JsonParameter responseParameter : jsonResponse.getParameters()) {      JsonParameter requestParameter=jsonRequest.getParameter(responseParameter.getId());      if (requestParameter != null) {        requestParameter.setValue(responseParameter.getValue());        requestParameter.setValueError(responseParameter.isValueError());      }    }  }}  }
class C{  private void composePageSerializedColor(File outputFile) throws Exception {  File fileSerialize=null;  FileInputStream fis=null;  ObjectInputStream ois=null;  ImageData imageData=null;  int bpr, width, height, r, g, b, row, pixel, x, i;  byte[] data;  BufferedImage imageSerialized=new BufferedImage(memoryWidth,memoryHeight,BufferedImage.TYPE_INT_RGB);  for (i=memoryBlockProcessed; i < memoryBlockTotal; i++) {    try {      fileSerialize=new File(path,prefix + "-serialize" + i+ ".data");      fis=new FileInputStream(fileSerialize);      ois=new ObjectInputStream(fis);      imageData=(ImageData)ois.readObject();      ois.close();      fis.close();    } catch (    Exception e) {      throw e;    } finally {      if (ois != null) {        ois.close();      }      if (fis != null) {        fis.close();      }    }    fileSerialize.delete();    width=imageData.getWidth();    height=imageData.getHeight() + memoryRow;    bpr=imageData.getBpr();    data=imageData.getData();    row=0;    pixel=0;    while (memoryRow < height) {      for (x=0; x < width; x++) {        r=data[pixel++] & 0x00FF;        g=data[pixel++] & 0x00FF;        b=data[pixel++] & 0x00FF;        imageSerialized.setRGB(x,memoryRow,(r << 16) | (g << 8) | b);      }      row+=bpr;      pixel=row;      memoryRow++;    }  }  imageSerialized.flush();  numPage++;  ImageIO.write(imageSerialized,"png",outputFile);  addTempFile(outputFile);  addScanFile(outputFile);}  }
class C{  public void stop(){synchronized (paceMakers) {    Iterator<PaceMaker> paceMakersIter=paceMakers.iterator();    while (paceMakersIter.hasNext()) {      PaceMaker paceMaker=paceMakersIter.next();synchronized (paceMaker) {        paceMaker.running=false;        paceMaker.notify();      }      paceMakersIter.remove();    }  }}  }
class C{  public void zoneMemberPwwn(String pwwn) throws NetworkDeviceControllerException {  zoneMemberPwwn(pwwn,false);}  }
class C{  private String cleanUpCall(String sql) throws FBSQLParseException {  int startIndex=0;  int endIndex=sql.length();  while (startIndex < endIndex && Character.isWhitespace(sql.charAt(startIndex))) {    startIndex++;  }  while (endIndex > startIndex && Character.isWhitespace(sql.charAt(endIndex - 1))) {    endIndex--;  }  if (startIndex < endIndex && sql.charAt(startIndex) == '{' && endIndex > 0 && sql.charAt(endIndex - 1) == '}') {    startIndex++;    endIndex--;  }  if (startIndex >= endIndex) {    throw new FBSQLParseException("Escaped call statement was empty.");  }  return sql.substring(startIndex,endIndex);}  }
class C{  private void notifyDisconnection(RcsServiceName service,ReasonCode error){  if (LogUtils.isActive) {    Log.w(LOGTAG,service.name() + " " + error);  }  for (  ClientConnectionNotifier clientToNotify : mClientsToNotify.values()) {    Set<RcsServiceName> monitoredServices=clientToNotify.getMonitoredServices();    if (monitoredServices == null || monitoredServices.contains(service)) {      clientToNotify.notifyDisconnection(error);    }  }}  }
class C{  protected void addSeparator(){  getPanelMenu().add(Box.createVerticalStrut(2));  getPanelMenu().add(new JSeparator());  getPanelMenu().add(Box.createVerticalStrut(2));}  }
class C{  public static GraphWithParameters regress(DataSet dataSet,Graph graph){  SemPm semPmEstDag=new SemPm(graph);  SemEstimator estimatorEstDag=new SemEstimator(dataSet,semPmEstDag);  estimatorEstDag.estimate();  SemIm semImEstDag=estimatorEstDag.getEstimatedSem();  GraphWithParameters estimatedGraph=new GraphWithParameters(semImEstDag,graph);  return estimatedGraph;}  }
class C{  public static void multiply(int[] n1,int[] n2,int[] result){  int pos=result.length - 1;  for (int i=0; i < result.length; i++) {    result[i]=0;  }  int off;  for (int m=n1.length - 1; m >= 0; m--) {    off=n1.length - 1 - m;    if (n1[m] == 0) {      continue;    }    for (int n=n2.length - 1; n >= 0; n--) {      int prod=n1[m] * n2[n];      result[pos - off]+=prod % 10;      if (result[pos - off] > 9) {        do {          result[pos - off]-=10;          result[pos - off - 1]++;        } while (result[pos - off] > 9);      }      if (prod > 9) {        result[pos - off - 1]+=prod / 10;      }      off++;    }  }}  }
class C{  private void outputCommentToWriter(Comment currentComment) throws IOException {  if (currentComment == null) {    return;  }  this.writer.write("&lt;!--");  String data=currentComment.getData();  int length=data.length();  for (int i=0; i < length; i++) {    char c=data.charAt(i);switch (c) {case 0x0D:      this.writer.write("&amp;#xD;");    break;case ' ':  this.writer.write("&middot;");break;case '\n':this.writer.write("&para;\n");break;default :this.writer.write(c);break;}}this.writer.write("--&gt;");}  }
class C{  public void checkStateErrors(MediaPlayerStateErrors stateErrors){  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(!stateErrors.errorInPreparedStateAfterStop);  assertTrue(!stateErrors.errorInStartedState);  assertTrue(!stateErrors.errorInStartedStateAfterPause);  assertTrue(!stateErrors.errorInPausedState);  assertTrue(!stateErrors.errorInPlaybackCompletedState);  assertTrue(stateErrors.errorInIdleState);  assertTrue(stateErrors.errorInErrorState);  assertTrue(stateErrors.errorInIdleStateAfterReset);  assertTrue(stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInStoppedState);}  }
class C{  public Object resolveRemote(String type,String url) throws IOException {  return new BurlapRemote(type,url);}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){  if (item.getItemId() == android.R.id.home) {    finish();    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String surferFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  int progress=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double arcNoData=-9999;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      surferFile=imageFiles[i];      if (!((new File(surferFile)).exists())) {        showFeedback("Surfer raster file does not exist.");        break;      }      if (surferFile.lastIndexOf(".") >= 0) {        String extension=surferFile.substring(surferFile.lastIndexOf("."));        whiteboxHeaderFile=surferFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=surferFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(surferFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (surferFile != null) {        String line;        String[] str;        i=1;        while ((line=br.readLine()) != null && i < 5) {          str=line.split(delimiter);          if (str.length <= 1 && i > 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (i == 1) {            if (!(str[0].toLowerCase().equals("dsaa"))) {              showFeedback("Warning: Surfer ASCII GRD ID value " + "was not located. This file may be " + "improperly structured.");            }          } else           if (i == 2) {            cols=Integer.parseInt(str[0]);            rows=Integer.parseInt(str[str.length - 1]);          } else           if (i == 3) {            west=Double.parseDouble(str[0]);            east=Double.parseDouble(str[str.length - 1]);          } else           if (i == 4) {            south=Double.parseDouble(str[0]);            north=Double.parseDouble(str[str.length - 1]);          } else {            break;          }          i++;        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t-32768";        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        delimiter=" ";        row=rows - 1;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          for (i=0; i < str.length; i++) {            if (!str[i].trim().isEmpty()) {              z=Double.parseDouble(str[i]);              wbr.setValue(row,col,z);              col++;              if (col == cols) {                col=0;                row--;              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.flush();        wbr.findMinAndMaxVals();        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void updateBucketRetention(String bucketName,String namespace,Integer retention) throws ECSException {  _log.debug("ECSApi:updateBucketRetention Update bucket initiated for : {}",bucketName);  ClientResponse clientResp=null;  String retentionUpdate=" { \"period\": \"" + (retention * DAY_TO_SECONDS) + "\", \"namespace\": \""+ namespace+ "\" }  ";  final String path=MessageFormat.format(URI_UPDATE_BUCKET_RETENTION,bucketName);  try {    clientResp=put(path,retentionUpdate);  } catch (  Exception e) {    _log.error("Error occured while Retention update for bucket : {}",bucketName,e);  } finally {    if (null == clientResp) {      throw ECSException.exceptions.bucketUpdateFailed(bucketName,"Quota","no response from ECS");    } else     if (clientResp.getStatus() != 200) {      throw ECSException.exceptions.bucketUpdateFailed(bucketName,"Retention",getResponseDetails(clientResp));    }    closeResponse(clientResp);  }}  }
class C{  public void generateCode(BlockScope currentScope,boolean valueRequired){  if (this.constant != Constant.NotAConstant) {    return;  }  Constant cst=this.right.constant;  if (cst != Constant.NotAConstant) {    if (cst.booleanValue() == true) {      this.left.generateCode(currentScope,valueRequired);    } else {      this.left.generateCode(currentScope,false);    }    return;  }  BranchLabel falseLabel=new BranchLabel();  cst=this.left.optimizedBooleanConstant();  boolean leftIsConst=cst != Constant.NotAConstant;  boolean leftIsTrue=leftIsConst && cst.booleanValue() == true;  cst=this.right.optimizedBooleanConstant();  boolean rightIsConst=cst != Constant.NotAConstant;  generateOperands: {    if (leftIsConst) {      this.left.generateCode(currentScope,false);      if (!leftIsTrue) {        break generateOperands;      }    } else {      this.left.generateOptimizedBoolean(currentScope,null,falseLabel,true);    }    if (rightIsConst) {      this.right.generateCode(currentScope,false);    } else {      this.right.generateOptimizedBoolean(currentScope,null,falseLabel,valueRequired);    }  }}  }
class C{  protected void fireIntervalAdded(Object source,int index0,int index1){  Object[] listeners=listenerList.getListenerList();  ListDataEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ListDataListener.class) {      if (e == null) {        e=new ListDataEvent(source,ListDataEvent.INTERVAL_ADDED,index0,index1);      }      ((ListDataListener)listeners[i + 1]).intervalAdded(e);    }  }}  }
class C{  public static String randomString(int length){  StringBuilder sb=new StringBuilder();  for (int i=0; i < length; i++) {    sb.append(chars[AbstractCaptcha.rnd(0,chars.length - 1)]);  }  return sb.toString();}  }
class C{  public VerletPhysics3D(Vec3D gravity,int numIterations,float drag,float timeStep){  particles=new ArrayList<VerletParticle3D>();  springs=new ArrayList<VerletSpring3D>();  this.numIterations=numIterations;  this.timeStep=timeStep;  setDrag(drag);  if (gravity != null) {    addBehavior(new GravityBehavior3D(gravity));  }}  }
class C{  public JavaContentAssistInvocationContext(ICompilationUnit unit){  super();  fCU=unit;  fCUComputed=true;  fEditor=null;}  }
class C{  @Override public int hashCode(){  return range.hashCode() - 1;}  }
class C{  public void removeTrailingEmptyLines(){  Line line=this.lineTail;  while (line != null && line.isEmpty) {    this.removeLine(line);    line=this.lineTail;  }}  }
class C{  public final double sampleMax(){synchronized (_lock) {    long max=_max.getAndSet(0);    return _scale * max;  }}  }
class C{  private void animateUnlayout(final int duration,boolean wait,int opacity,Runnable callback){  setShouldCalcPreferredSize(true);  enableLayoutOnPaint=false;  final int componentCount=getComponentCount();  int[] beforeX=new int[componentCount];  int[] beforeY=new int[componentCount];  int[] beforeW=new int[componentCount];  int[] beforeH=new int[componentCount];  final Motion[] xMotions=new Motion[componentCount];  final Motion[] yMotions=new Motion[componentCount];  final Motion[] wMotions=new Motion[componentCount];  final Motion[] hMotions=new Motion[componentCount];  for (int iter=0; iter < componentCount; iter++) {    Component current=getComponentAt(iter);    beforeX[iter]=current.getX();    beforeY[iter]=current.getY();    beforeW[iter]=current.getWidth();    beforeH[iter]=current.getHeight();  }  layoutContainer();  for (int iter=0; iter < componentCount; iter++) {    Component current=getComponentAt(iter);    xMotions[iter]=createAnimateMotion(current.getX(),beforeX[iter],duration);    yMotions[iter]=createAnimateMotion(current.getY(),beforeY[iter],duration);    wMotions[iter]=createAnimateMotion(current.getWidth(),beforeW[iter],duration);    hMotions[iter]=createAnimateMotion(current.getHeight(),beforeH[iter],duration);    xMotions[iter].start();    yMotions[iter].start();    wMotions[iter].start();    hMotions[iter].start();  }  MorphAnimation a=new MorphAnimation(this,duration,new Motion[][]{xMotions,yMotions,wMotions,hMotions});  setAnimOpacity(255,opacity,a,componentCount,duration);  a.dontRevalidate=true;  if (wait) {    getAnimationManager().addAnimationAndBlock(a);  } else {    if (callback != null) {      getAnimationManager().addAnimation(a,callback);    } else {      getAnimationManager().addAnimation(a);    }  }}  }
class C{  public synchronized void mark(int readlimit){  marklimit=readlimit;  markpos=pos;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.KEY___KEY_ID_1:    return KEY_ID_1_EDEFAULT == null ? keyId_1 != null : !KEY_ID_1_EDEFAULT.equals(keyId_1);case UmplePackage.KEY___ANONYMOUS_KEY_11:  return anonymous_key_1_1 != null && !anonymous_key_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public final void run(){  try {    while (!shutdown) {      clientSocket=serverSocket.accept();      out=new PrintWriter(clientSocket.getOutputStream(),true);      BufferedReader in=new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));      String inputLine;      sendMessage("connected to SocketCommandProcessor on port " + port);      while ((inputLine=in.readLine()) != null) {        if (inputLine.equals("quit"))         break;        processMessage(inputLine);      }      out.close();      in.close();      clientSocket.close();    }    serverSocket.close();  } catch (  IOException e) {    Log.logger.log(Level.WARNING,"Warning client failed to accept on SocketCommandProcessor on port " + port);  }}  }
class C{  private Double clickDistance(Node node,final float x,final float y){  return clickDistance(node,x,y,node.isTagged() ? DataStyle.getCurrent().nodeToleranceValue : DataStyle.getCurrent().wayToleranceValue / 2);}  }
class C{  public void propertiesChanged(CSSEngineEvent evt){  Element elem=evt.getElement();  SVGContext ctx=getSVGContext(elem);  if (ctx == null) {    GraphicsNode pgn=getGraphicsNode(elem.getParentNode());    if ((pgn == null) || !(pgn instanceof CompositeGraphicsNode)) {      return;    }    CompositeGraphicsNode parent=(CompositeGraphicsNode)pgn;    int[] properties=evt.getProperties();    for (int i=0; i < properties.length; ++i) {      if (properties[i] == SVGCSSEngine.DISPLAY_INDEX) {        if (!CSSUtilities.convertDisplay(elem)) {          break;        }        GVTBuilder builder=getGVTBuilder();        GraphicsNode childNode=builder.build(BridgeContext.this,elem);        if (childNode == null) {          break;        }        int idx=-1;        for (Node ps=elem.getPreviousSibling(); ps != null; ps=ps.getPreviousSibling()) {          if (ps.getNodeType() != Node.ELEMENT_NODE)           continue;          Element pse=(Element)ps;          GraphicsNode gn=getGraphicsNode(pse);          if (gn == null)           continue;          idx=parent.indexOf(gn);          if (idx == -1)           continue;          break;        }        idx++;        parent.add(idx,childNode);        break;      }    }  }  if (ctx != null && (ctx instanceof BridgeUpdateHandler)) {    ((BridgeUpdateHandler)ctx).handleCSSEngineEvent(evt);  }}  }
class C{  public CFMetaData copy(UUID newCfId){  return copyOpts(new CFMetaData(ksName,cfName,cfType,comparator,newCfId),this);}  }
class C{  public void lineStartsAt(int charInFile){  if (immutable) {    throw new UnsupportedOperationException();  }  if (nLines == lineNums.length) {    int[] newLineNums=new int[nLines * 2];    System.arraycopy(lineNums,0,newLineNums,0,nLines);    lineNums=newLineNums;  }  lineNums[nLines++]=charInFile;  cachedCharInFile=-1;}  }
class C{  @Pure static float countToFloat(int count){  if (count < 0) {    final float MAX_UNSIGNED_INT=2147483648f;    return MAX_UNSIGNED_INT + (count & 0x7FFFFFFF);  } else {    return count;  }}  }
class C{  public void testCase22(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={1,30,40,56,-1,45};  int aSign=1;  int bSign=-1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  try {    aNumber.mod(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public synchronized void merge(BloomFilter filter){  if (!this.matchesAll() && !filter.matchesAll()) {    checkArgument(filter.data.length == this.data.length && filter.hashFuncs == this.hashFuncs && filter.nTweak == this.nTweak);    for (int i=0; i < data.length; i++)     this.data[i]|=filter.data[i];  } else {    this.data=new byte[]{(byte)0xff};  }}  }
class C{  public static void checkFieldMaximum(final long value,final long maximum,final String units,final String fieldName){  if (value > maximum) {    throw APIException.badRequests.invalidParameterAboveMaximum(fieldName,value,maximum,(" " + units));  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  @Override public void printStackTrace(PrintStream stream){  super.printStackTrace(stream);  if (cause != null) {    stream.println("Caused by:");    cause.printStackTrace(stream);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {{      ZComp focusOwner=uiComp.getLastFocusedChild();      if (focusOwner == null)       return new Integer(-1);      if (focusOwner instanceof ZPseudoComp) {        ZPseudoComp focusComp=(ZPseudoComp)focusOwner;        Object o1=focusComp.getRelatedContext().safeLookup("TableRow");        Object o2=focusComp.getRelatedContext().safeLookup("NumColsPerPage");        Object o3=focusComp.getRelatedContext().safeLookup("VScrollIndex");        Object o4=focusComp.getRelatedContext().safeLookup("NumRowsPerPage");        Object o5=focusComp.getRelatedContext().safeLookup("HScrollIndex");        Object o6=focusComp.getRelatedContext().safeLookup("NumCols");        Object o7=focusComp.getRelatedContext().safeLookup("NumRows");        int tablePosition=o1 != null ? (Integer.parseInt(o1.toString()) - 1) : 0;        int colsPerPage=o2 != null ? Math.max(1,Integer.parseInt(o2.toString())) : 1;        int vscrollIndex=o3 != null ? (Integer.parseInt(o3.toString()) - 1) : 0;        int rowsPerPage=o4 != null ? Math.max(1,Integer.parseInt(o4.toString())) : 1;        int hscrollIndex=o5 != null ? (Integer.parseInt(o5.toString()) - 1) : 0;        int numCols=o6 != null ? Integer.parseInt(o6.toString()) : 1;        int numRows=o7 != null ? Integer.parseInt(o7.toString()) : 1;        return new Integer(1 + (tablePosition - colsPerPage * vscrollIndex - rowsPerPage * hscrollIndex + numRows * numCols) % (numRows * numCols));      }    }  }  return new Integer(-1);}  }
class C{  public boolean includeAliases(){  return includeAliases;}  }
class C{  public ParserString subCFMLString(int start,int count){  return new ParserString(String.valueOf(text,start,count));}  }
class C{  static byte[] discardNonBase64(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isBase64(data[i])) {      groomedData[bytesCopied++]=data[i];    }  }  byte packedData[]=new byte[bytesCopied];  System.arraycopy(groomedData,0,packedData,0,bytesCopied);  return packedData;}  }
class C{  private StoragePort findPortInDB(StorageSystem vplexStorageSystem,VPlexPortInfo portInfo,Map<String,StoragePort> autoUpgradePortsMap) throws IOException {  StoragePort port=null;  String portWWN=WWNUtility.getWWNWithColons(portInfo.getPortWwn());  String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(vplexStorageSystem,portWWN,NativeGUIDGenerator.PORT);  if (null != autoUpgradePortsMap && autoUpgradePortsMap.containsKey(portWWN)) {    s_logger.info("Found port {} in the auto upgrade ports map",portWWN);    return autoUpgradePortsMap.get(portWWN);  }  s_logger.info("Looking for port {} in database",portNativeGuid);  URIQueryResultList queryResults=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),queryResults);  Iterator<URI> resultsIter=queryResults.iterator();  if (resultsIter.hasNext()) {    s_logger.info("Found port {}",portNativeGuid);    port=_dbClient.queryObject(StoragePort.class,resultsIter.next());  }  return port;}  }
class C{  static void checkUnqualifiedName(int version,final String name,final String msg){  if ((version & 0xFFFF) < Opcodes.V1_5) {    checkIdentifier(name,msg);  } else {    for (int i=0; i < name.length(); ++i) {      if (".;[/".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public int[] validBaudNumber(){  return validSpeedValues;}  }
class C{  @Override public void pool(){  disconnect();}  }
class C{  public void decreaseKey(int id,Comparable<E> reducedPriority){  int size=_n;  _n=_pos[id] - 1;  insert(id,reducedPriority);  _n=size;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void present(Name name,int type){  newPrereq(Record.newRecord(name,type,DClass.ANY,0));}  }
class C{  public void testAllConnectedUsingMulticast() throws Exception {  bridgeAllBrokers();  startAllBrokers();  Destination dest=createDestination("TEST.FOO",true);  MessageConsumer clientA=createConsumer("BrokerA",dest);  MessageConsumer clientB=createConsumer("BrokerB",dest);  MessageConsumer clientC=createConsumer("BrokerC",dest);  Thread.sleep(2000);  sendMessages("BrokerA",dest,MESSAGE_COUNT);  sendMessages("BrokerB",dest,MESSAGE_COUNT);  sendMessages("BrokerC",dest,MESSAGE_COUNT);  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);  MessageIdList msgsB=getConsumerMessages("BrokerB",clientB);  MessageIdList msgsC=getConsumerMessages("BrokerC",clientC);  msgsA.waitForMessagesToArrive(MESSAGE_COUNT * 3);  msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 3);  msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 3);  assertEquals(MESSAGE_COUNT * 3,msgsA.getMessageCount());  assertEquals(MESSAGE_COUNT * 3,msgsB.getMessageCount());  assertEquals(MESSAGE_COUNT * 3,msgsC.getMessageCount());}  }
class C{  public small addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType){  if (fieldType == null) {    throw new IllegalArgumentException("Field type must not be null");  }  return append0(new TextField(fieldType,true));}  }
class C{  public Inspector(ActionListener al){  actionListener=al;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:33.678 -0500",hash_original_method="21B6C08F5C9193686AC48EB890043753",hash_generated_method="1688924C06269CC56407DFDFB3878B74") public boolean doesClassMatch(int profile){  if (profile == PROFILE_A2DP) {    if (hasService(Service.RENDER)) {      return true;    }switch (getDeviceClass()) {case Device.AUDIO_VIDEO_HIFI_AUDIO:case Device.AUDIO_VIDEO_HEADPHONES:case Device.AUDIO_VIDEO_LOUDSPEAKER:case Device.AUDIO_VIDEO_CAR_AUDIO:      return true;default :    return false;}} else if (profile == PROFILE_HEADSET) {if (hasService(Service.RENDER)) {  return true;}switch (getDeviceClass()) {case Device.AUDIO_VIDEO_HANDSFREE:case Device.AUDIO_VIDEO_WEARABLE_HEADSET:case Device.AUDIO_VIDEO_CAR_AUDIO:  return true;default :return false;}} else if (profile == PROFILE_OPP) {if (hasService(Service.OBJECT_TRANSFER)) {return true;}switch (getDeviceClass()) {case Device.COMPUTER_UNCATEGORIZED:case Device.COMPUTER_DESKTOP:case Device.COMPUTER_SERVER:case Device.COMPUTER_LAPTOP:case Device.COMPUTER_HANDHELD_PC_PDA:case Device.COMPUTER_PALM_SIZE_PC_PDA:case Device.COMPUTER_WEARABLE:case Device.PHONE_UNCATEGORIZED:case Device.PHONE_CELLULAR:case Device.PHONE_CORDLESS:case Device.PHONE_SMART:case Device.PHONE_MODEM_OR_GATEWAY:case Device.PHONE_ISDN:return true;default :return false;}}return 1 == (profile + getDeviceClass() + (hasService(profile) ? 1 : 0));}  }
class C{  @Override public void onFailure(Call call,IOException e){  Log.i("HU","handle==onFailure=REQ_GET_INIT=reqType=");  mDownEntity.statue=false;  mDownEntity.isCanceled=call.isCanceled();  mDownEntity.isExecuted=call.isExecuted();  mDownEntity.downMessage(e.toString());  if (baseHttpClient != null && baseHttpClient.configuration != null && baseHttpClient.configuration.getHandler() != null)   baseHttpClient.configuration.getHandler().post(new LoadTask(mDownEntity));}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case DomPackage.TAG_DEFINITION:    return createTagDefinitionFromString(eDataType,initialValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public static VideoCastControllerFragment newInstance(Bundle extras){  VideoCastControllerFragment f=new VideoCastControllerFragment();  Bundle b=new Bundle();  b.putBundle(EXTRAS,extras);  f.setArguments(b);  return f;}  }
class C{  private List<String> reorderAssociatedStorageSystems(ProtectionSystem protectionSystem,Collection<String> validAssociatedStorageSystems,VirtualArray varray){  Map<String,Boolean> serialNumberInVarray=new HashMap<>();  List<String> sortedVisibleStorageSystems=new ArrayList<String>();  for (  String assocStorageSystem : validAssociatedStorageSystems) {    String assocSerialNumber=ProtectionSystem.getAssociatedStorageSystemSerialNumber(assocStorageSystem);    String rpCluster=ProtectionSystem.getAssociatedStorageSystemSiteName(assocStorageSystem);    if (!serialNumberInVarray.containsKey(assocSerialNumber)) {      if (isStorageArrayInVarray(varray,assocSerialNumber)) {        serialNumberInVarray.put(assocSerialNumber,Boolean.TRUE);      } else {        serialNumberInVarray.put(assocSerialNumber,Boolean.FALSE);      }    }    if (!serialNumberInVarray.get(assocSerialNumber)) {      continue;    }    if (protectionSystem.getSiteVisibleStorageArrays() != null) {      for (      Map.Entry<String,AbstractChangeTrackingSet<String>> clusterStorageSystemsEntry : protectionSystem.getSiteVisibleStorageArrays().entrySet()) {        if (rpCluster.equals(clusterStorageSystemsEntry.getKey())) {          for (          String serialNumber : clusterStorageSystemsEntry.getValue()) {            if (assocSerialNumber.equals(serialNumber)) {              sortedVisibleStorageSystems.add(rpCluster + " " + serialNumber);            }          }        }      }    }  }  for (  String assocStorageSystem : validAssociatedStorageSystems) {    String assocSerialNumber=ProtectionSystem.getAssociatedStorageSystemSerialNumber(assocStorageSystem);    String rpCluster=ProtectionSystem.getAssociatedStorageSystemSiteName(assocStorageSystem);    if (!sortedVisibleStorageSystems.contains(rpCluster + " " + assocSerialNumber) && serialNumberInVarray.get(assocSerialNumber)) {      sortedVisibleStorageSystems.add(rpCluster + " " + assocSerialNumber);    }  }  return sortedVisibleStorageSystems;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof Year) {    return year == ((Year)obj).year;  }  return false;}  }
class C{  public static _BuildQueryOrder fromString(final String value) throws SOAPSerializationException {  return (_BuildQueryOrder)Enumeration.fromString(value,_BuildQueryOrder.VALUES_TO_INSTANCES);}  }
class C{  private BaseWatchMeFragment openFragment(FragmentManager manager,BaseWatchMeFragment fragment,Bundle args,String name){  if (args != null) {    fragment.setArguments(args);  }  manager.beginTransaction().replace(R.id.container,fragment,name).addToBackStack(name).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();  return fragment;}  }
class C{  public static int byteArrayToInt(final byte[] src,final int srcPos,final int dstInit,final int dstPos,final int nBytes){  if ((src.length == 0 && srcPos == 0) || 0 == nBytes) {    return dstInit;  }  if ((nBytes - 1) * 8 + dstPos >= 32) {    throw new IllegalArgumentException("(nBytes-1)*8+dstPos is greather or equal to than 32");  }  int out=dstInit;  int shift=0;  for (int i=0; i < nBytes; i++) {    shift=i * 8 + dstPos;    final int bits=(0xff & src[i + srcPos]) << shift;    final int mask=0xff << shift;    out=(out & ~mask) | bits;  }  return out;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public TextEdit perform(){  TextEdit result=doCopy(fEdit);  if (result != null) {    for (Iterator iter=fCopies.keySet().iterator(); iter.hasNext(); ) {      TextEdit edit=(TextEdit)iter.next();      edit.postProcessCopy(this);    }  }  return result;}  }
class C{  public void addTransform(String transformURI,Element contextElement) throws TransformationException {  try {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,"Transforms.addTransform(" + transformURI + ")");    }    Transform transform=new Transform(this.doc,transformURI,contextElement);    this.addTransform(transform);  } catch (  InvalidTransformException ex) {    throw new TransformationException("empty",ex);  }}  }
class C{  private int measureHeight(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=mPaintSelected.getStrokeWidth() + getPaddingTop() + getPaddingBottom();    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public static void startActionFoo(Context context,String param1,String param2){  Intent intent=new Intent(context,MyIntentService2.class);  intent.setAction(ACTION_FOO);  intent.putExtra(EXTRA_PARAM1,param1);  intent.putExtra(EXTRA_PARAM2,param2);  context.startService(intent);}  }
class C{  protected WriteFuture writeData(final NextFilter nextFilter,final IoBuffer data){  ProxyHandshakeIoBuffer writeBuffer=new ProxyHandshakeIoBuffer(data);  LOGGER.debug("   session write: {}",writeBuffer);  WriteFuture writeFuture=new DefaultWriteFuture(getSession());  getProxyFilter().writeData(nextFilter,getSession(),new DefaultWriteRequest(writeBuffer,writeFuture),true);  return writeFuture;}  }
class C{  public JSONArray put(int index,Collection<?> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  @Inline private boolean testMarkState(ObjectReference object){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert((markState & ~MARK_COUNT_MASK) == 0);  return (VM.objectModel.readAvailableByte(object) & MARK_COUNT_MASK) == markState;}  }
class C{  public static Name shortName(Name classname){  return classname.subName(classname.lastIndexOf((byte)'.') + 1,classname.getByteLength());}  }
class C{  private static int byteCompaction(int mode,int[] codewords,int codeIndex,StringBuilder result){  if (mode == BYTE_COMPACTION_MODE_LATCH) {    int count=0;    long value=0;    char[] decodedData=new char[6];    int[] byteCompactedCodewords=new int[6];    boolean end=false;    int nextCode=codewords[codeIndex++];    while ((codeIndex < codewords[0]) && !end) {      byteCompactedCodewords[count++]=nextCode;      value=900 * value + nextCode;      nextCode=codewords[codeIndex++];      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      } else {        if ((count % 5 == 0) && (count > 0)) {          for (int j=0; j < 6; ++j) {            decodedData[5 - j]=(char)(value % 256);            value>>=8;          }          result.append(decodedData);          count=0;        }      }    }    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {      byteCompactedCodewords[count++]=nextCode;    }    for (int i=0; i < count; i++) {      result.append((char)byteCompactedCodewords[i]);    }  } else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {    int count=0;    long value=0;    boolean end=false;    while (codeIndex < codewords[0] && !end) {      int code=codewords[codeIndex++];      if (code < TEXT_COMPACTION_MODE_LATCH) {        count++;        value=900 * value + code;      } else {        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {          codeIndex--;          end=true;        }      }      if ((count % 5 == 0) && (count > 0)) {        char[] decodedData=new char[6];        for (int j=0; j < 6; ++j) {          decodedData[5 - j]=(char)(value & 0xFF);          value>>=8;        }        result.append(decodedData);        count=0;      }    }  }  return codeIndex;}  }
class C{  public LMSNetwork(final Network network,int numInputNeurons,int numOutputNeurons,Point2D initialPosition){  super(network,new int[]{numInputNeurons,numOutputNeurons},initialPosition);  getOutputLayer().setNeuronType(new LinearRule());  setLabel("LMS Network");}  }
class C{  public static void write(byte[] b){  for (int i=0; i < b.length; i++) {    add((char)b[i]);  }}  }
class C{  public static Command show(String title,Component body,Command defaultCommand,Command[] cmds,int type,Image icon,long timeout,Transition transition){  Dialog dialog=new Dialog(title);  dialog.dialogType=type;  dialog.setTransitionInAnimator(transition);  dialog.setTransitionOutAnimator(transition);  dialog.lastCommandPressed=null;  dialog.setLayout(new BorderLayout());  if (cmds != null) {    if (commandsAsButtons) {      dialog.placeButtonCommands(cmds);    } else {      for (int iter=0; iter < cmds.length; iter++) {        dialog.addCommand(cmds[iter]);      }    }    if (cmds.length == 1 || cmds.length == 2) {      dialog.setBackCommand(cmds[0]);    }  }  if (defaultCommand != null) {    dialog.setDefaultCommand(defaultCommand);  }  dialog.addComponent(BorderLayout.CENTER,body);  if (icon != null) {    dialog.addComponent(BorderLayout.EAST,new Label(icon));  }  if (timeout != 0) {    dialog.setTimeout(timeout);  }  if (body.isScrollable() || disableStaticDialogScrolling) {    dialog.setScrollable(false);  }  dialog.show();  return dialog.lastCommandPressed;}  }
class C{  public void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (ambientLightManager != null) {    ambientLightManager.stop();    ambientLightManager=null;  }  if (camera != null && previewing) {    camera.stopPreview();    cameraPreviewCallback.setCallback(null);    previewing=false;  }}  }
class C{  public HGHandle add(Object atom){  return add(atom,0);}  }
class C{  public boolean useRegisteredSuffixPatternMatch(){  return this.useRegisteredSuffixPatternMatch;}  }
class C{  public static Object createOrb(String[] args,Properties props) throws IOException {  if (proxy == null)   throw new IOException("ORB initialization failed, RMI/IIOP not available");  return proxy.createOrb(args,props);}  }
class C{  public FeedForward(final Network network,int[] nodesPerLayer,Point2D initialPosition,final Neuron inputNeuronTemplate){  super(network);  buildNetwork(network,nodesPerLayer,initialPosition,inputNeuronTemplate);}  }
class C{  public void onPause(){  if (activeProvider != null) {    activeProvider.onPause();  }  gpServicesSwitchTask.pause();}  }
class C{  private void printBranchHistoryItem(final BranchHistoryTreeItem branchHistoryTreeItem){  Check.notNull(branchHistoryTreeItem,"branchHistoryTreeItem");  final StringBuffer sb=new StringBuffer();  for (int i=0; i < branchHistoryTreeItem.getLevel(); i++) {    sb.append(INDENT);  }  final Item targetItem=branchHistoryTreeItem.getItem();  if (targetItem == null) {    sb.append(Messages.getString("CommandBranches.NoPermissionToReadBranchItem"));  } else {    sb.append(VersionedFileSpec.formatPathWithDeletionIfNecessary(targetItem.getServerItem(),targetItem.getDeletionID()));  }  sb.append(INDENT);  if (branchHistoryTreeItem.getFromItemChangesetID() != 0) {    final Item sourceItem=branchHistoryTreeItem.getFromItem();    if (sourceItem == null) {      sb.append(Messages.getString("CommandBranches.NoPermissionToReadBranchItem"));    } else {      final String messageFormat=Messages.getString("CommandBranches.BranchedFromVersionFormat");      final String message=MessageFormat.format(messageFormat,Integer.toString(sourceItem.getChangeSetID()));      sb.append(message);    }  }  if (branchHistoryTreeItem.isRequested()) {    sb.insert(0,">> ");    sb.append(" <<");  }  getDisplay().printLine(sb.toString());  if (branchHistoryTreeItem.getChildren() != null) {    for (int i=0; i < branchHistoryTreeItem.getChildren().length; i++) {      printBranchHistoryItem((BranchHistoryTreeItem)branchHistoryTreeItem.getChildren()[i]);    }  }}  }
class C{  public void restoreState(){  treeColouring=storedTreeColouring;}  }
class C{  public static void createHorizonalHintBox(JPanel parent,JComponent c,String txt){  parent.setAlignmentX(Component.LEFT_ALIGNMENT);  parent.setBorder(BorderFactory.createEmptyBorder(10,10,0,5));  c.setAlignmentX(Component.LEFT_ALIGNMENT);  JLabel l1=N9ComponentFactory.createLabel_style3(txt);  l1.setAlignmentX(Component.LEFT_ALIGNMENT);  parent.add(l1);}  }
class C{  public static int parseInt(java.lang.String s) throws java.lang.NumberFormatException {  return 0;}  }
class C{  protected ScannerUtilities(){}  }
class C{  public float[] generateTransformedValuesHorizontalBarChart(List<? extends Entry> entries,int dataSet,BarData bd,float phaseY){  float[] valuePoints=new float[entries.size() * 2];  int setCount=bd.getDataSetCount();  float space=bd.getGroupSpace();  for (int j=0; j < valuePoints.length; j+=2) {    Entry e=entries.get(j / 2);    int i=e.getXIndex();    float x=i + i * (setCount - 1) + dataSet + space * i + space / 2f;    float y=e.getVal();    valuePoints[j]=y * phaseY;    valuePoints[j + 1]=x;  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float x=timePassed * mDurationReciprocal;    if (mInterpolator == null)     x=viscousFluid(x); else     x=mInterpolator.getInterpolation(x);  mCurrX=mStartX + Math.round(x * mDeltaX);mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);float distanceCoef=1.f;float velocityCoef=0.f;if (index < NB_SAMPLES) {final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE_POSITION[index];final float d_sup=SPLINE_POSITION[index + 1];velocityCoef=(d_sup - d_inf) / (t_sup - t_inf);distanceCoef=d_inf + (t - t_inf) * velocityCoef;}mCurrVelocity=velocityCoef * mDistance / mDuration * 1000.0f;mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  protected StringWriter addLoggingWriterAppender(String appenderName){  return loggingHelper.addLoggingWriterAppender(appenderName);}  }
class C{  public MultiErrorException check(boolean valid,String messageKey,Object... args){  return check(null,valid,messageKey,args);}  }
class C{  public static DiscoverFragment newInstance(String param1,String param2){  DiscoverFragment fragment=new DiscoverFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mAccountAuthenticatorResponse=getIntent().getParcelableExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE);  if (mAccountAuthenticatorResponse != null) {    mAccountAuthenticatorResponse.onRequestContinued();  }  mAccountManager=AccountManager.get(getBaseContext());  mAccountType=getIntent().getStringExtra(AccountManager.KEY_ACCOUNT_TYPE);  mAccountName=getIntent().getStringExtra(AccountManager.KEY_ACCOUNT_NAME);  mAuthTokenType=getIntent().getStringExtra(AccountManager.AUTHENTICATOR_ATTRIBUTES_NAME);}  }
class C{  private static int calculateMaxHotSize(int maximumSize){  int result=(int)(HOT_RATE * maximumSize);  return (result == maximumSize) ? maximumSize - 1 : result;}  }
class C{  static boolean isCOctetStringNullOrNValValid(String value,int length){  if (value == null) {    return true;  }  if (value.length() == 0) {    return true;  }  if (value.length() == length - 1) {    return true;  }  return false;}  }
class C{  public boolean isActive(){  return this.active;}  }
class C{  public static ColumnReference column(String columnName){  return new ColumnReference(columnName);}  }
class C{  protected double kNNDistance(){  double knnDist=0.;  for (int i=0; i < getNumEntries(); i++) {    MkMaxEntry entry=getEntry(i);    knnDist=Math.max(knnDist,entry.getKnnDistance());  }  return knnDist;}  }
class C{  public RosterExchangeManager(Connection con){  this.con=con;  init();}  }
class C{  @Override public void environmentStop(EnvironmentClassLoader loader){}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  private static LosEffects losForCoords(IGame game,AttackInfo ai,Coords coords,Building thruBldg,boolean diagramLoS,boolean partialCover){  LosEffects los=new LosEffects();  if (!game.getBoard().contains(coords)) {    return los;  }  Building bldg=game.getBoard().getBuildingAt(coords);  if ((bldg != null) && bldg.equals(thruBldg)) {    los.setThruBldg(thruBldg);  }  if (coords.equals(ai.attackPos) || coords.equals(ai.targetPos)) {    return los;  }  if ((game.getBoard().getBuildingAt(ai.attackPos) != null) && (game.getBoard().getBuildingAt(ai.targetPos) != null) && (thruBldg != null)&& game.getBoard().getBuildingAt(ai.attackPos).equals(game.getBoard().getBuildingAt(ai.targetPos))&& ai.targetEntity&& thruBldg.equals(game.getBoard().getBuildingAt(ai.attackPos))) {    los.buildingLevelsOrHexes+=1;  }  IHex hex=game.getBoard().getHex(coords);  int hexEl=ai.underWaterCombat ? hex.floor() : hex.surface();  if (!(hex.containsTerrain(Terrains.WATER))) {    ai.minimumWaterDepth=0;  } else   if ((hex.terrainLevel(Terrains.WATER) >= 0) && ((ai.minimumWaterDepth == -1) || (hex.terrainLevel(Terrains.WATER) < ai.minimumWaterDepth))) {    ai.minimumWaterDepth=hex.terrainLevel(Terrains.WATER);  }  int bldgEl=0;  if ((null == los.getThruBldg()) && hex.containsTerrain(Terrains.BLDG_ELEV)) {    bldgEl=hex.terrainLevel(Terrains.BLDG_ELEV);  }  if ((null == los.getThruBldg()) && hex.containsTerrain(Terrains.FUEL_TANK_ELEV) && hex.terrainLevel(Terrains.FUEL_TANK_ELEV) > bldgEl) {    bldgEl=hex.terrainLevel(Terrains.FUEL_TANK_ELEV);  }  boolean coveredByDropship=false;  Entity coveringDropship=null;  if (bldgEl < 10) {    for (    Entity inHex : game.getEntitiesVector(coords)) {      if (ai.attackerId == inHex.getId() || ai.targetId == inHex.getId()) {        continue;      }      if (inHex instanceof Dropship && !inHex.isAirborne() && !inHex.isSpaceborne()) {        bldgEl=10;        coveredByDropship=true;        coveringDropship=inHex;      }    }  }  int totalEl=hexEl + bldgEl;  if (diagramLoS) {    if (totalEl > (ai.targetAbsHeight * ai.attackPos.distance(coords) + ai.attackAbsHeight * ai.targetPos.distance(coords)) / (ai.targetPos.distance(coords) + ai.attackPos.distance(coords))) {      los.blocked=true;      if (hex.terrainLevel(Terrains.BLDG_CF) > 90) {        los.hardBuildings++;      } else       if (bldgEl > 0) {        los.softBuildings++;      } else {        los.blockedByHill=true;      }    }  } else   if (((totalEl > ai.attackAbsHeight) && (totalEl > ai.targetAbsHeight)) || ((totalEl > ai.attackAbsHeight) && (ai.attackPos.distance(coords) == 1)) || ((totalEl > ai.targetAbsHeight) && (ai.targetPos.distance(coords) == 1))) {    los.blocked=true;    if (hex.terrainLevel(Terrains.BLDG_CF) > 90) {      los.hardBuildings++;    } else     if (bldgEl > 0) {      los.softBuildings++;    } else {      los.blockedByHill=true;    }  }  if (ai.underWaterCombat && (hex.terrainLevel(Terrains.WATER) == ITerrain.LEVEL_NONE) && ((totalEl > ai.attackAbsHeight) || (totalEl > ai.targetAbsHeight))) {    los.blocked=true;  }  if (!ai.underWaterCombat) {    if (hex.containsTerrain(Terrains.SCREEN)) {      los.screen++;    }    int industrialLevel=hex.terrainLevel(Terrains.INDUSTRIAL);    if (industrialLevel != ITerrain.LEVEL_NONE) {      for (int level=1; level < 11; level++) {        if (((hexEl + level > ai.attackAbsHeight) && (hexEl + level > ai.targetAbsHeight)) || ((hexEl + level > ai.attackAbsHeight) && (ai.attackPos.distance(coords) == 1)) || ((hexEl + level > ai.targetAbsHeight) && (ai.targetPos.distance(coords) == 1))) {          if (industrialLevel == level) {            los.heavyIndustrial++;          }        }      }    }    if (hex.containsTerrain(Terrains.FIELDS)) {      if (((hexEl + 1 > ai.attackAbsHeight) && (hexEl + 2 > ai.targetAbsHeight)) || ((hexEl + 1 > ai.attackAbsHeight) && (ai.attackPos.distance(coords) == 1)) || ((hexEl + 1 > ai.targetAbsHeight) && (ai.targetPos.distance(coords) == 1))) {        los.plantedFields++;      }    }    int smokeLevel=hex.terrainLevel(Terrains.SMOKE);    int woodsLevel=hex.terrainLevel(Terrains.WOODS);    int jungleLevel=hex.terrainLevel(Terrains.JUNGLE);    if ((smokeLevel != ITerrain.LEVEL_NONE) || (woodsLevel != ITerrain.LEVEL_NONE) || (jungleLevel != ITerrain.LEVEL_NONE)) {      int terrainEl=hexEl + 2;      boolean affectsLoS;      if (diagramLoS) {        affectsLoS=terrainEl > (ai.targetAbsHeight * ai.attackPos.distance(coords) + ai.attackAbsHeight * ai.targetPos.distance(coords)) / (ai.targetPos.distance(coords) + ai.attackPos.distance(coords));      } else {        affectsLoS=((terrainEl > ai.attackAbsHeight) && (terrainEl > ai.targetAbsHeight)) || ((terrainEl > ai.attackAbsHeight) && (ai.attackPos.distance(coords) == 1)) || ((terrainEl > ai.targetAbsHeight) && (ai.targetPos.distance(coords) == 1));      }      if (affectsLoS) {        if ((smokeLevel == SmokeCloud.SMOKE_LIGHT) || (smokeLevel == SmokeCloud.SMOKE_LI_LIGHT) || (smokeLevel == SmokeCloud.SMOKE_LI_HEAVY)|| (smokeLevel == SmokeCloud.SMOKE_CHAFF_LIGHT)) {          los.lightSmoke++;        } else         if ((smokeLevel == SmokeCloud.SMOKE_HEAVY)) {          los.heavySmoke++;        }        if ((woodsLevel == 1) || (jungleLevel == 1)) {          los.lightWoods++;        } else         if ((woodsLevel == 2) || (jungleLevel == 2)) {          los.heavyWoods++;        }      }      terrainEl=hexEl + 3;      if (diagramLoS) {        affectsLoS=terrainEl > (ai.targetAbsHeight * ai.attackPos.distance(coords) + ai.attackAbsHeight * ai.targetPos.distance(coords)) / (ai.targetPos.distance(coords) + ai.attackPos.distance(coords));      } else {        affectsLoS=((terrainEl > ai.attackAbsHeight) && (terrainEl > ai.targetAbsHeight)) || ((terrainEl > ai.attackAbsHeight) && (ai.attackPos.distance(coords) == 1)) || ((terrainEl > ai.targetAbsHeight) && (ai.targetPos.distance(coords) == 1));      }      if (affectsLoS) {        if ((woodsLevel == 3) || (jungleLevel == 3)) {          los.ultraWoods++;        }      }    }  }  boolean potentialCover=false;  if (ai.targetPos.distance(coords) == 1 && ai.targetIsMech) {    if (los.blocked && partialCover) {      los.targetCover=COVER_FULL;      potentialCover=true;    } else     if ((totalEl == ai.targetAbsHeight) && (ai.attackAbsHeight <= ai.targetAbsHeight) && (ai.targetHeight > 0)) {      los.targetCover|=COVER_HORIZONTAL;      potentialCover=true;    }  }  if (ai.attackPos.distance(coords) == 1 && ai.attackerIsMech) {    if (los.blocked && partialCover) {      los.attackerCover=COVER_FULL;      potentialCover=true;    } else     if ((totalEl == ai.attackAbsHeight) && (ai.attackAbsHeight >= ai.targetAbsHeight) && (ai.attackHeight > 0)) {      los.attackerCover|=COVER_HORIZONTAL;      potentialCover=true;    }  }  if (potentialCover) {    if (coveredByDropship) {      los.setDamagableCoverTypePrimary(DAMAGABLE_COVER_DROPSHIP);      los.coverDropshipPrimary=coveringDropship;    } else     if (bldg != null) {      los.setDamagableCoverTypePrimary(DAMAGABLE_COVER_BUILDING);      los.coverBuildingPrimary=bldg;    } else {      los.setDamagableCoverTypePrimary(DAMAGABLE_COVER_NONE);    }    los.coverLocPrimary=coords;  }  return los;}  }
class C{  @TargetApi(Build.VERSION_CODES.FROYO) public static File storeOnExternalStorage(Context context,Bitmap bitmap,String type,String path,String filename,Bitmap.CompressFormat format,int quality){  if (!Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {    return null;  }  File dir=new File(context.getExternalFilesDir(type),path);  FileUtils.makeDirsIfNeeded(dir);  File file=new File(dir,filename);  if (!storeAsFile(bitmap,file,format,quality)) {    return null;  }  return file;}  }
class C{  public Script parse(final GroovyCodeSource codeSource) throws CompilationFailedException {  return InvokerHelper.createScript(parseClass(codeSource),context);}  }
class C{  public int size(){  return size;}  }
class C{  public boolean isClass(){  return rawClass.equals(Class.class);}  }
class C{  public final boolean isInitiator(){  return initiator;}  }
class C{  @SuppressWarnings("unchecked") private void notifyTestSetProduced(TestSetEvent tse){  Vector<TestSetListener> l;synchronized (this) {    l=(Vector<TestSetListener>)m_testListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      if (m_foldThread == null) {        break;      }      l.elementAt(i).acceptTestSet(tse);    }  }}  }
class C{  public static <T>Field<T> field(String expression,String qualifier){  return new Field<>(expression,qualifier);}  }
class C{  private LosEffects.AttackInfo buildAttackInfo(Coords c1,Coords c2,int h1,int h2,boolean attackerIsMech,boolean targetIsMech){  LosEffects.AttackInfo ai=new LosEffects.AttackInfo();  ai.attackPos=c1;  ai.targetPos=c2;  ai.attackHeight=h1;  ai.targetHeight=h2;  ai.attackerIsMech=attackerIsMech;  ai.targetIsMech=targetIsMech;  ai.attackAbsHeight=client.getGame().getBoard().getHex(c1).floor() + h1;  ai.targetAbsHeight=client.getGame().getBoard().getHex(c2).floor() + h2;  return ai;}  }
class C{  void advance(double deltaTime){  for (  Spring spring : mActiveSprings) {    if (spring.systemShouldAdvance()) {      spring.advance(deltaTime / 1000.0);    } else {      mActiveSprings.remove(spring);    }  }}  }
class C{  public TemplateModelIterator iterator(){  if (iterator != null) {    return new SimpleTemplateModelIterator(iterator,false);  } else {synchronized (collection) {      return new SimpleTemplateModelIterator(collection.iterator(),true);    }  }}  }
class C{  public void adjustForNoTerms(long actualUsed){  breaker.addWithoutBreaking(actualUsed);}  }
class C{  public void addECM(ECMInfo info){  ecmEffects.add(info);}  }
class C{  public int bins(){  return binBoundaries.length - 1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:51.594 -0500",hash_original_method="7CD9FDFE8EAEAE0E43B9A1D60D60D495",hash_generated_method="DD31A186A9214AD12BC5569857DBF8AD") public UsbAccessory(String manufacturer,String model,String description,String version,String uri,String serial){  mManufacturer=manufacturer;  mModel=model;  mDescription=description;  mVersion=version;  mUri=uri;  mSerial=serial;}  }
class C{  protected IJavaElement findElement(IJavaElement elt,int position,SourceMapper mapper){  SourceRange range=mapper.getSourceRange(elt);  if (range == null || position < range.getOffset() || range.getOffset() + range.getLength() - 1 < position) {    return null;  }  if (elt instanceof IParent) {    try {      IJavaElement[] children=((IParent)elt).getChildren();      for (int i=0; i < children.length; i++) {        IJavaElement match=findElement(children[i],position,mapper);        if (match != null) {          return match;        }      }    } catch (    JavaModelException npe) {    }  }  return elt;}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case SRuntimePackage.EVENT_DIRECTION:    return createEventDirectionFromString(eDataType,initialValue);case SRuntimePackage.JAVA_OBJECT:  return createJavaObjectFromString(eDataType,initialValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public void doTerrainEditToolAlternateActivated(){  if (terrainTool != null && alternate && !primary) {    Vector3f point=getMarkerLocation();    if (point != null) {      topComponent.getExtraToolParams();      terrainTool.actionSecondary(point,selectedTextureIndex,jmeRootNode,editorController.getCurrentDataObject());    }  }}  }
class C{  private void initBounds(){  fBounds.clear();  fBounds.add(OBJECT_SIGNATURE);}  }
class C{  public double[] apply(double[][] inputVectors) throws Exception {  double[] prediction=new double[inputVectors.length];  for (int i=0; i < inputVectors.length; i++) {    prediction[i]=applyToVector(inputVectors[i]);    if (!regression) {      if (prediction[i] > 0.0) {        prediction[i]=1.0;      } else {        prediction[i]=0.0;      }    }  }  return prediction;}  }
class C{  public T caseRefParam(RefParam object){  return null;}  }
class C{  protected OMGraphic createGraphic(MysqlGeometry mg){  OMGraphic ret=null;  if (mg != null) {    String type=mg.getType();    if (type.equals(MysqlGeometry.POINTTYPE)) {      ret=createPoint((MysqlPoint)mg);    } else     if (type.equals(MysqlGeometry.LINESTRINGTYPE)) {      ret=createLine((MysqlLine)mg);    } else     if (type.equals(MysqlGeometry.POLYGONTTYPE)) {      ret=createPolygon((MysqlPolygon)mg);    } else     if (type.equals(MysqlGeometry.MULTIPOINTTYPE) || type.equals(MysqlGeometry.MULTILINESTRINGTYPE) || type.equals(MysqlGeometry.MULTIPOLYGONTYPE)|| type.equals(MysqlGeometry.GEOMETRYCOLLECTIONTYPE)) {      MysqlMulti multi=(MysqlMulti)mg;      OMGraphicList subList=new OMGraphicList();      for (int i=0; i < multi.countElements(); i++) {        OMGraphic subRet=null;        if (type.equals(MysqlGeometry.MULTIPOINTTYPE)) {          subRet=createPoint((MysqlPoint)multi.getElementByIndex(i));        } else         if (type.equals(MysqlGeometry.MULTILINESTRINGTYPE)) {          subRet=createLine((MysqlLine)multi.getElementByIndex(i));        } else         if (type.equals(MysqlGeometry.MULTIPOLYGONTYPE)) {          subRet=createPolygon((MysqlPolygon)multi.getElementByIndex(i));        } else         if (type.equals(MysqlGeometry.GEOMETRYCOLLECTIONTYPE)) {          subRet=createGraphic((MysqlGeometry)multi.getElementByIndex(i));        }        if (subRet != null) {          subList.add(subRet);        }      }      ret=subList;    } else {      if (Debug.debugging("mysql")) {        Debug.output("MysqlGeometryLayer.createGeometry: Geometry type not supported");      }    }  }  return ret;}  }
class C{  public void printStackTrace(){  super.printStackTrace();}  }
class C{  public void removeParameter(String name){  parameters.removeAll(name);}  }
class C{  public String sql_insertFromTable(String vendorName,String catalogName,String schemaName,String tableName,ArrayList<String> columnNames,ArrayList<String> columnValues,String sourceTableName,ArrayList<String> joinTypes,ArrayList<String> joinTables,ArrayList<String> joinConditions,String whereClause){  ArrayList<String> translatedColumnNames=null;  if (columnNames != null) {    translatedColumnNames=new ArrayList<String>();    for (    String columnName : columnNames) {      translatedColumnNames.add(normalizeColumnName(vendorName,columnName));    }  }  return m_interfaces.get(getDBVendorID(vendorName)).sql_insertFromTable(catalogName,schemaName,tableName,translatedColumnNames,columnValues,sourceTableName,joinTypes,joinTables,joinConditions,whereClause);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public void addNamedParameter(String parameterName,String parameterPlaceholder,int startIndex,int endIndex){  this.parameterNames.add(parameterName);  this.parameterPlaceholders.add(parameterPlaceholder);  this.parameterIndexes.add(new int[]{startIndex,endIndex});}  }
class C{  protected BooleanProperty activeProperty(){  return active;}  }
class C{  @Override public void onUpdate(Context context,AppWidgetManager appWidgetManager,int[] appWidgetIds){  super.onUpdate(context,appWidgetManager,appWidgetIds);  for (  int appWidgetId : appWidgetIds) {    updateWidget(context,appWidgetId,isSmallWidget(appWidgetManager,appWidgetId));  }}  }
class C{  public double localScore(int i,int[] parents){  throw new UnsupportedOperationException();}  }
class C{  public ServiceCall<VisualClassifier> updateClassifier(String classifierId,ClassifierOptions options){  Validator.notNull(classifierId,"classifierId cannot be null");  Validator.notNull(options," options cannot be null");  String errorMessage="To update a classifier, you must supply at least 1 zip file - " + "either a positive or negative zip file.";  Validator.isTrue(!options.classNames().isEmpty() || (options.negativeExamples() != null),errorMessage);  Builder bodyBuilder=new MultipartBody.Builder().setType(MultipartBody.FORM);  for (  String className : options.classNames()) {    String dataName=className + "_" + PARAM_POSITIVE_EXAMPLES;    RequestBody requestBody=RequestBody.create(HttpMediaType.BINARY_FILE,options.positiveExamplesByClassName(className));    bodyBuilder.addFormDataPart(dataName,options.positiveExamplesByClassName(className).getName(),requestBody);  }  if (options.negativeExamples() != null) {    RequestBody requestBody=RequestBody.create(HttpMediaType.BINARY_FILE,options.negativeExamples());    bodyBuilder.addFormDataPart(PARAM_NEGATIVE_EXAMPLES,options.negativeExamples().getName(),requestBody);  }  RequestBuilder requestBuilder=RequestBuilder.post(String.format(PATH_CLASSIFIER,classifierId));  requestBuilder.query(VERSION,versionDate).body(bodyBuilder.build());  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(VisualClassifier.class));}  }
class C{  public List<WebMediumConfig> browse(BrowseConfig config){  config.addCredentials(this);  String type="";  if (config.type.equals("Bot")) {    type="/get-instances";  } else   if (config.type.equals("Forum")) {    type="/get-forums";  } else   if (config.type.equals("Channel")) {    type="/get-channels";  } else   if (config.type.equals("Domain")) {    type="/get-domains";  }  String xml=POST(this.url + type,config.toXML());  List<WebMediumConfig> instances=new ArrayList<WebMediumConfig>();  Element root=parse(xml);  if (root == null) {    return instances;  }  for (int index=0; index < root.getChildNodes().getLength(); index++) {    WebMediumConfig instance=null;    if (config.type.equals("Bot")) {      instance=new InstanceConfig();    } else     if (config.type.equals("Forum")) {      instance=new ForumConfig();    } else     if (config.type.equals("Channel")) {      instance=new ChannelConfig();    } else     if (config.type.equals("Domain")) {      instance=new DomainConfig();    }    instance.parseXML((Element)root.getChildNodes().item(index));    instances.add(instance);  }  return instances;}  }
class C{  protected IndexedAccessExpressionImpl(){  super();}  }
class C{  private static void processFile(String fileName) throws Exception {  File testCases=new File(System.getProperty("test.src","."),fileName);  FileInputStream in=new FileInputStream(testCases);  BufferedReader r=new BufferedReader(new InputStreamReader(in));  String aLine;  while ((aLine=r.readLine()) != null) {    String patternString=grabLine(r);    Pattern p=null;    try {      p=compileTestPattern(patternString);    } catch (    PatternSyntaxException e) {      String dataString=grabLine(r);      String expectedResult=grabLine(r);      if (expectedResult.startsWith("error"))       continue;      explainFailure(patternString,dataString,e);      failCount++;      continue;    }    String dataString=grabLine(r);    Matcher m=p.matcher(dataString);    StringBuffer result=new StringBuffer();    failCount+=preMatchInvariants(m);    boolean found=m.find();    if (found)     failCount+=postTrueMatchInvariants(m); else     failCount+=postFalseMatchInvariants(m);    if (found) {      result.append("true ");      result.append(m.group(0) + " ");    } else {      result.append("false ");    }    result.append(m.groupCount());    if (found) {      for (int i=1; i < m.groupCount() + 1; i++)       if (m.group(i) != null)       result.append(" " + m.group(i));    }    String expectedResult=grabLine(r);    if (!result.toString().equals(expectedResult)) {      explainFailure(patternString,dataString,expectedResult,result.toString());      failCount++;    }  }  report(fileName);}  }
class C{  public SecondOrderSection(double b0,double b1,double b2,double a1,double a2){  this.b0=b0;  this.b1=b1;  this.b2=b2;  this.a1=a1;  this.a2=a2;  initialize();}  }
class C{  public C multipleLineTest(){  return null;}  }
class C{  public void quit(){  super.quit();  if (displayFrame != null) {    displayFrame.dispose();  }  displayFrame=null;  display=null;}  }
class C{  public List<Integer> readVectorInt(){  throw new RuntimeException("Vector objects not supported with AMF0");}  }
class C{  private String linesToString(int startLine,String... lines){  final StringBuilder builder=new StringBuilder();  for (int i=0; i < lines.length; i++) {    if (i >= startLine) {      String line=lines[i];      builder.append(line).append(String.format("%n"));    }  }  return builder.toString();}  }
class C{  public EnhancedServer remoteConnection(){  return remoteConnection(MessagingProperties.DEFAULT_REMOTE_MQ_NAME);}  }
class C{  public void learn(Object example){  String form=extractor.discreteValue(example);  String label=labeler.discreteValue(example);  if (form.length() >= 5) {    boolean allLetters=true;    for (int i=form.length() - 3; i < form.length() && allLetters; ++i)     allLetters=Character.isLetter(form.charAt(i));    if (allLetters) {      Word w=(Word)example;      HashMap<String,TreeMap<String,Integer>> t=null;      if (w.capitalized) {        if (w.previous == null)         t=firstCapitalized; else         t=notFirstCapitalized;      } else {        if (form.contains("-"))         return;        t=table;      }      form=form.toLowerCase();      increment(t,form.substring(form.length() - 3),label);      if (form.length() >= 6 && Character.isLetter(form.charAt(form.length() - 4)))       increment(t,form.substring(form.length() - 4),label);    }  }}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  public SharedPreferences clear(){  editor.clear();  return this;}  }
class C{  @Override public boolean test(List<Object> strings){  IPType type=IPType.DEFAULT;  if (strings.isEmpty()) {    return false;  }  Object ip=strings.get(0);  if (ip == null) {    return false;  }  if (strings.size() >= 2) {    Object ipType=strings.get(1);    if (ipType != null) {      try {        type=IPType.get(ipType.toString());      } catch (      Exception e) {        type=IPType.DEFAULT;      }    }  }  return type.isValid(ip.toString());}  }
class C{  public SWFShape tagDefineShape2(int id,Rect outline) throws IOException {  if (tags != null) {    return tags.tagDefineShape2(id,outline);  }  return null;}  }
class C{  protected void openEncounterForm(){  expectVisibleSoon(Espresso.onView(OVERFLOW_BUTTON_MATCHER));  openActionBarOptionsMenu();  EventBusIdlingResource<FetchXformSucceededEvent> xformIdlingResource=new EventBusIdlingResource<>(UUID.randomUUID().toString(),mEventBus);  ViewInteraction testForm=viewWithText("[test] Form");  expectVisibleSoon(testForm);  click(testForm);  Espresso.registerIdlingResources(xformIdlingResource);  expectVisibleSoon(viewWithText("Encounter"));}  }
class C{  public void checkRight(Table table,int rightMask){  if (!hasRight(table,rightMask)) {    throw DbException.get(ErrorCode.NOT_ENOUGH_RIGHTS_FOR_1,table.getSQL());  }}  }
class C{  public void addStroke(GestureStroke stroke){  mStrokes.add(stroke);  mBoundingBox.union(stroke.boundingBox);}  }
class C{  public void subscribeToServicesOfTwoMarketplaces(String testName,BigDecimal discount,double operatorShare1,double operatorShare2,double marketplaceShare1,double marketplaceShare2) throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  createMarketplace(supplierData);  setDateFactory("2013-07-10 20:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomerWithDiscount(supplierData,discount,DateTimeHandling.calculateMillis("2013-01-01 08:00:00"),DateTimeHandling.calculateMillis("2014-01-01 08:00:00"));  VOServiceDetails service1=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv1",supplierData.getMarketplace(0));  VOServiceDetails service2=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv2",supplierData.getMarketplace(1));  updateMarketplaceRevenueShare(marketplaceShare1,supplierData.getMarketplaceId(0));  updateMarketplaceRevenueShare(marketplaceShare2,supplierData.getMarketplaceId(1));  updateOperatorRevenueShare(operatorShare1,service1.getKey());  updateOperatorRevenueShare(operatorShare2,service2.getKey());  subscribe(customerData.getAdminUser(),"srv1_subscr",service1,"2013-08-01 12:00:00","ADMIN");  subscribe(customerData.getAdminUser(),"srv2_subscr",service2,"2013-08-01 12:00:00","ADMIN");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData(testName,new TestData(supplierData));}  }
class C{  public ProjectElement createProject(URI id,ProjectParam param,String owner,String ownerTenantId){  TenantOrg tenant=getTenantById(id,true);  if (param.getName() != null && !param.getName().isEmpty()) {    checkForDuplicateName(param.getName(),Project.class,id,"tenantOrg",_dbClient);  }  Project project=new Project();  project.setId(URIUtil.createId(Project.class));  project.setLabel(param.getName());  project.setTenantOrg(new NamedURI(tenant.getId(),project.getLabel()));  project.setOwner(owner);  project.addAcl(new PermissionsKey(PermissionsKey.Type.SID,owner,ownerTenantId).toString(),ACL.OWN.toString());  _dbClient.createObject(project);  recordTenantEvent(OperationTypeEnum.CREATE_PROJECT,tenant.getId(),project.getId());  return new ProjectElement(project.getId(),toLink(ResourceTypeEnum.PROJECT,project.getId()),project.getLabel());}  }
class C{  public T border(String value){  return attr("border",value);}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  TabularType other;  try {    other=(TabularType)obj;  } catch (  ClassCastException e) {    return false;  }  if (!this.getTypeName().equals(other.getTypeName())) {    return false;  }  if (!this.rowType.equals(other.rowType)) {    return false;  }  if (!this.indexNames.equals(other.indexNames)) {    return false;  }  return true;}  }
class C{  public void deleteNodes(){}  }
class C{  public void centerFrame(){  final Dimension screenSize=Toolkit.getDefaultToolkit().getScreenSize();  final Dimension frameSize=this.getSize();  if (frameSize.height > screenSize.height) {    frameSize.height=screenSize.height;  }  if (frameSize.width > screenSize.width) {    frameSize.width=screenSize.width;  }  this.setLocation((screenSize.width - frameSize.width) / 2,(screenSize.height - frameSize.height) / 2);}  }
class C{  private TextHitInfo(int charIndex,boolean isLeadingEdge){  this.charIndex=charIndex;  this.isLeadingEdge=isLeadingEdge;}  }
class C{  public TIntArrayList(){  this(DEFAULT_CAPACITY);}  }
class C{  public NodesStatsRequest transport(boolean transport){  this.transport=transport;  return this;}  }
class C{  private static double remainderTwoPiFast(double angle){  if (USE_JDK_MATH) {    return jdkRemainderTwoPi(angle);  }  boolean negateResult=false;  if (angle < 0.0) {    angle=-angle;    negateResult=true;  }  if (angle <= TWO_POW_26 * (2 * Math.PI)) {  } else   if (angle <= TWO_POW_52 * (2 * Math.PI)) {    final double fn=(int)(angle * (TWOPI_INV / TWO_POW_26) + 0.5);    angle=angle - fn * (TWOPI_HI * TWO_POW_26) - fn * (TWOPI_LO * TWO_POW_26);    if (angle < 0.0) {      angle=-angle;      negateResult=!negateResult;    }  } else   if (angle < Double.POSITIVE_INFINITY) {    return 0.0;  } else {    return Double.NaN;  }  final double fn=(int)(angle * TWOPI_INV + 0.5);  angle=angle - fn * TWOPI_HI - fn * TWOPI_LO;  if (angle < -Math.PI) {    angle=angle + TWOPI_HI + TWOPI_LO;  } else   if (angle > Math.PI) {    angle=angle - TWOPI_HI - TWOPI_LO;  }  return negateResult ? -angle : angle;}  }
class C{  private String whereToGo(String body,String previous){  if (previous == null) {    return "mock://a";  } else   if ("mock://a".equals(previous)) {    return "language://simple:Bye ${body}";  } else {    return null;  }}  }
class C{  public void onChange(){}  }
class C{  public static void updateVPlexBackingVolumeVpools(Volume volume,URI newVpoolURI,DbClient dbClient){  if (isVplexVolume(volume,dbClient)) {    if (null == volume.getAssociatedVolumes()) {      _log.warn("VPLEX volume {} has no backend volumes. It was probably ingested 'Virtual Volume Only'. " + "Backend volume virtual pools will not be updated.",volume.forDisplay());      return;    }    _log.info(String.format("Update the virtual pool on backing volume(s) for virtual volume [%s] (%s).",volume.getLabel(),volume.getId()));    VirtualPool newVpool=dbClient.queryObject(VirtualPool.class,newVpoolURI);    String newVpoolName=newVpool.getLabel();    URI newHaVpoolURI=null;    String newHaVpoolName=null;    if (volume.getAssociatedVolumes().size() > 1) {      VirtualPool haVpool=VirtualPool.getHAVPool(newVpool,dbClient);      haVpool=(haVpool == null) ? newVpool : haVpool;      newHaVpoolURI=haVpool.getId();      newHaVpoolName=haVpool.getLabel();    }    for (    String associatedVolId : volume.getAssociatedVolumes()) {      Volume backingVolume=dbClient.queryObject(Volume.class,URI.create(associatedVolId));      URI vpoolURI=newVpoolURI;      String vpoolName=newVpoolName;      if (!backingVolume.getVirtualArray().equals(volume.getVirtualArray())) {        vpoolURI=newHaVpoolURI;        vpoolName=newHaVpoolName;      }      VirtualPool oldVpool=dbClient.queryObject(VirtualPool.class,backingVolume.getVirtualPool());      backingVolume.setVirtualPool(vpoolURI);      dbClient.updateObject(backingVolume);      _log.info(String.format("Updated backing volume [%s](%s) virtual pool from [%s](%s) to [%s](%s).",backingVolume.getLabel(),backingVolume.getId(),oldVpool.getLabel(),oldVpool.getId(),vpoolName,vpoolURI));    }  }}  }
class C{  private void removeListeners(){  if (fRichDocumentListener != null && fDocument != null) {    fDocument.removeRichDocumentListener(fRichDocumentListener);    fRichDocumentListener=null;  }  if (fDocumentListener != null && fDocument != null) {    fDocument.removeDocumentListener(fDocumentListener);    fDocumentListener=null;  }  fHistory.removeOperationHistoryListener(fHistoryListener);  fHistoryListener=null;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildblacksheepharry(zone);}  }
class C{  public QueryIndex(String field,QueryIndexType type,boolean asc){  fields=new LinkedHashMap<>();  fields.put(field,asc);  this.type=type;}  }
class C{  void createOptimizationPlans(){  OptOptions options=new OptOptions();  int maxOptLevel=getMaxOptLevel();  _options=new OptOptions[maxOptLevel + 1];  _optPlans=new OptimizationPlanElement[maxOptLevel + 1][];  String[] optCompilerOptions=Controller.getOptCompilerOptions();  for (int i=0; i <= maxOptLevel; i++) {    _options[i]=options.dup();    _options[i].setOptLevel(i);    processCommandLineOptions(_options[i],i,maxOptLevel,optCompilerOptions);    _optPlans[i]=OptimizationPlanner.createOptimizationPlan(_options[i]);  }}  }
class C{  static String escapeText(String input){  StringBuilder builder=new StringBuilder(input.length());  CharacterIterator iter=new StringCharacterIterator(input);  for (char c=iter.first(); c != CharacterIterator.DONE; c=iter.next()) {switch (c) {case '\b':      builder.append("\\b");    break;case '\f':  builder.append("\\f");break;case '\n':builder.append("\\n");break;case '\r':builder.append("\\r");break;case '\t':builder.append("\\t");break;case '\\':builder.append("\\\\");break;case '"':builder.append("\\\"");break;default :if (c >= 0x0000 && c <= 0x001F) {appendEscapedUnicode(builder,c);} else if (Character.isHighSurrogate(c)) {appendEscapedUnicode(builder,c);c=iter.next();if (c == CharacterIterator.DONE) throw new IllegalArgumentException("invalid unicode string: unexpected high surrogate pair value without corresponding low value.");appendEscapedUnicode(builder,c);} else {builder.append(c);}break;}}return builder.toString();}  }
class C{  public NioProcessor(Executor executor){  super(executor);  try {    selector=Selector.open();  } catch (  IOException e) {    throw new RuntimeIoException("Failed to open a selector.",e);  }}  }
class C{  public void shape(char[] text,int start,int count,int context){  if (isContextual()) {    contextualShape(text,start,count,getIndexFromRange(context));  } else {    nonContextualShape(text,start,count);  }}  }
class C{  public static int multiplyColorAlpha(int color,int alpha){  if (alpha == 255) {    return color;  }  if (alpha == 0) {    return color & 0x00FFFFFF;  }  alpha=alpha + (alpha >> 7);  int colorAlpha=color >>> 24;  int multipliedAlpha=colorAlpha * alpha >> 8;  return (multipliedAlpha << 24) | (color & 0x00FFFFFF);}  }
class C{  private String saveAttachmentToFile(Part part,String fileName) throws Exception {  BufferedOutputStream os=null;  InputStream is=null;  File f=null;  try {    if (fileName == null)     fileName=part.getFileName();    int pos=-1;    if (fileName != null) {      pos=fileName.lastIndexOf(".");    }    String prefix=pos > 0 ? (fileName.substring(0,pos)) : fileName;    String suffix=pos > 0 ? (fileName.substring(pos)) : ".bin";    while (prefix.length() < 3)     prefix+="_";    if (suffix.length() == 0)     suffix=".bin";    f=File.createTempFile(prefix,suffix,new File(directoryName));    log("saving content of " + f.getName() + "...");    os=new BufferedOutputStream(new FileOutputStream(f));    is=part.getInputStream();    if (!(is instanceof BufferedInputStream)) {      is=new BufferedInputStream(is);    }    int c;    while ((c=is.read()) != -1) {      os.write(c);    }    return f.getName();  } catch (  Exception e) {    log("Error while saving contents of [" + (f != null ? f.getName() : (part != null ? part.getFileName() : "NULL")) + "].",e);    throw e;  } finally {    is.close();    os.close();  }}  }
class C{  ConcurrentSkipListSet(ConcurrentNavigableMap<E,Object> m){  this.m=m;}  }
class C{  public static Text valueOf(Object obj){  return new TextBuilder().append(obj).toText();}  }
class C{  public void init(Model model){  this.model=model;  numLabels=model.taggerMaps.numLabels();  Mi=new DoubleMatrix(numLabels,numLabels);  Vi=new DoubleVector(numLabels);  allocateMemory(100);  computeMi();}  }
class C{  public StringPart(String name,String value){  this(name,value,null);}  }
class C{  protected void sequence_ParameterizedTypeRefNominal_TypeRef_TypeRefWithoutModifiers(ISerializationContext context,ParameterizedTypeRef semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public long run(String[] args) throws Exception {  int slen=Integer.parseInt(args[0]);  int nbatches=Integer.parseInt(args[1]);  int ncycles=Integer.parseInt(args[2]);  String[] strs=genStrings(slen,ncycles);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,strs,1,ncycles);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,strs,nbatches,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  public boolean isInputShutdown(){  return isInputShutdown;}  }
class C{  Log4jLogger(Class<?> category,Locale locale){  this.locale=locale;  systemLogger=Logger.getLogger(SYSTEM_LOG_CATEGORY_SUFFIX + "." + category.getName());  systemLogger.setAdditivity(false);  accessLogger=Logger.getLogger(ACCESS_LOG_CATEGORY_SUFFIX + "." + category.getName());  accessLogger.setAdditivity(false);  auditLogger=Logger.getLogger(AUDIT_LOG_CATEGORY_SUFFIX + "." + category.getName());  auditLogger.setAdditivity(false);  proxyLogger=Logger.getLogger(REVERSEPROXY_LOG_CATEGORY_SUFFIX + "." + category.getName());  proxyLogger.setAdditivity(false);}  }
class C{  static Boolean toBoolean(String text){  if (text == null) {    return null;  }  return new Boolean(text);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileEnv.dump(request);  MobileEnv.dump(request.getSession());  MobileSessionCtx wsc=MobileSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null) {    MobileUtil.createTimeoutPage(request,response,this,null);    return;  }  String columnName=MobileUtil.getParameter(request,"ColumnName");  int AD_Process_ID=MobileUtil.getParameterAsInt(request,"AD_Process_ID");  int page=MobileUtil.getParameterAsInt(request,"page");  int refValueId=0;  boolean startUpdate=false;  String targetBase="'" + columnName;  String header=null;  if (AD_Process_ID > 0) {    if (AD_Process_ID < 1 || columnName == null || columnName.equals("")) {      MobileUtil.createErrorPage(request,response,this,Msg.getMsg(wsc.ctx,"ParameterMissing"));      return;    }    MProcess process=MProcess.get(wsc.ctx,AD_Process_ID);    MProcessPara para=null;    MProcessPara[] parameters=process.getParameters();    for (int i=0; i < parameters.length; i++) {      if (para.getColumnName().equals(columnName))       para=parameters[i];    }    if (para != null)     refValueId=para.getAD_Reference_Value_ID();    header=para.getColumnName();  } else {    if (ws == null) {      MobileUtil.createTimeoutPage(request,response,this,null);      return;    }    GridField mField=ws.curTab.getField(columnName);    log.config("ColumnName=" + columnName + ", MField="+ mField);    if (mField == null || columnName == null || columnName.equals("")) {      MobileUtil.createErrorPage(request,response,this,Msg.getMsg(ws.ctx,"ParameterMissing"));      return;    }    header=mField.getHeader();    boolean hasDependents=ws.curTab.hasDependants(columnName);    boolean hasCallout=mField.getCallout().length() > 0;    startUpdate=hasDependents || hasCallout;    refValueId=mField.getAD_Reference_Value_ID();  }  if (m_searchFields == null || m_searchFields.length == 0) {    getSearchFields(columnName,refValueId);  }  String search=MobileUtil.getParameter(request,"search");  if (Util.isEmpty(MobileUtil.getParameter(request,"search"))) {    MobileDoc doc=MobileDoc.createPopup(header);    form panel=new form();    panel.setMethod("post");    panel.setClass("dialog");    panel.setID("WLookup1");    panel.setAction("WLookup?ColumnName=" + columnName + "&AD_Process_ID="+ AD_Process_ID);    panel.addAttribute("selected","true");    fieldset set=new fieldset();    h1 h=new h1(header);    set.addElement(h);    a a=new a("#","Cancel");    a.addAttribute("type","cancel");    a.setClass("button leftButton");    set.addElement(a);    a=new a("WLookup?ColumnName=" + columnName + "&AD_Process_ID="+ AD_Process_ID,"Search");    a.addAttribute("type","submit");    a.setClass("button");    set.addElement(a);    panel.addElement(set);    for (int i=0; i < m_searchFields.length; i++) {      input f=new input(input.TYPE_TEXT,m_searchFields[i],"");      f.setID(m_searchFields[i]);      f.addAttribute("placeholder",m_searchLabels[i]);      set.addElement(f).addElement(new br());    }    input hidden=new input(input.TYPE_HIDDEN,"search","true");    set.addElement(hidden);    doc.getBody().addElement(panel);    MobileUtil.createResponseFragment(request,response,this,null,doc);  } else {    MobileDoc doc=MobileDoc.createPopup(header);    StringBuffer where=new StringBuffer();    for (    String column : m_searchFields) {      String value=request.getParameter(column);      if (!Util.isEmpty(value)) {        value="%" + value + "%";        where.append(" AND UPPER(").append(column).append(") LIKE UPPER(").append(DB.TO_STRING(value)).append(") ");      }    }    div panel=new div();    panel.setClass("dialog");    panel.addAttribute("selected","true");    panel.setID("WLookup2");    fieldset set=new fieldset();    panel.addElement(set);    set.addElement(fillTable(wsc,columnName,refValueId,request.getRequestURI(),targetBase,startUpdate,page,where.toString()));    String text="Reset";    input resetbtn=new input(input.TYPE_RESET,text,"  " + text);    resetbtn.setID(text);    resetbtn.setClass("resetbtn");    String script=targetBase + "F.value='';" + targetBase+ "D.value='';self.close();";    if (startUpdate)     script+="startUpdate(" + targetBase + "F);";    resetbtn.setOnClick(script);    doc.getBody().addElement(panel);    doc.getBody().addElement(resetbtn);    MobileUtil.createResponseFragment(request,response,this,null,doc);  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public static void beginSection(String tag){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {    android.os.Trace.beginSection(tag);  }}  }
class C{  public AndCondition(final ChatCondition... condition){  this.conditions=Arrays.asList(condition);}  }
class C{  public void addConnectionEventListener(ConnectionEventListener listener){  connectionEventListeners.add(listener);}  }
class C{  public boolean isAirBlock(IBlockAccess world){  return world.isAirBlock(xCoord,yCoord,zCoord);}  }
class C{  public static byte[] copyJpegMetaData(byte[] source,byte[] dest) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ImageOutputStream out=new MemoryCacheImageOutputStream(baos);  copyJpegMetaData(new ByteArrayInputStream(source),new ByteArrayInputStream(dest),out);  return baos.toByteArray();}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  Vector<Integer> indices=new Vector<Integer>();  for (int i=0; i < inputFormat.numAttributes(); i++) {    if ((i == inputFormat.classIndex())) {      if (getInvertSelection()) {        indices.add(i);      }      continue;    }    if (inputFormat.attribute(i).name().matches(m_Expression)) {      indices.add(i);    }  }  int[] attributes=new int[indices.size()];  for (int i=0; i < indices.size(); i++) {    attributes[i]=indices.get(i);  }  m_Remove=new Remove();  m_Remove.setAttributeIndicesArray(attributes);  m_Remove.setInvertSelection(getInvertSelection());  m_Remove.setInputFormat(inputFormat);  return m_Remove.getOutputFormat();}  }
class C{  public FilterField(String id,String description){  mId=id;  mDescription=description;}  }
class C{  public ScheduledThreadPoolExecutor(int corePoolSize,ThreadFactory threadFactory,RejectedExecutionHandler handler){  super(corePoolSize,Integer.MAX_VALUE,0,NANOSECONDS,new DelayedWorkQueue(),threadFactory,handler);}  }
class C{  public synchronized void dontUseGui(){  if (okToUseGui) {    okToUseGui=false;synchronized (children) {      for (Iterator i=children.keySet().iterator(); i.hasNext(); ) {        Visibility v=getChildVisibility(i.next());        if (v != null)         v.dontUseGui();      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:15.100 -0500",hash_original_method="E5B57B76E0D4C32AD6E030FA95B32ACD",hash_generated_method="4E152530A4BFC5427EA9048E249667F3") public void init(Certificate cert){  try {    if (signature != null) {      signature.initVerify(cert);    } else     if (cipher != null) {      cipher.init(Cipher.DECRYPT_MODE,cert);    }  } catch (  InvalidKeyException e) {    throw new AlertException(AlertProtocol.BAD_CERTIFICATE,new SSLException("init - invalid certificate",e));  }}  }
class C{  public static float square(float num){  return num * num;}  }
class C{  public static <T>LazyIterable<T> drop(Iterable<T> iterable,int count){  return new DropIterable<>(iterable,count);}  }
class C{  public PSPProcessingException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public Result(byte[] serverLeg){  assert serverLeg != null && serverLeg.length > 0;  principalId=null;  authInstant=null;  authnMethod=null;  this.serverLeg=serverLeg;}  }
class C{  @Override public ResourceTicketEntity subdivide(String resourceTicketId,double percentOfLimit) throws ExternalException {  ResourceTicketEntity resourceTicketEntity=findById(resourceTicketId);  List<QuotaLineItemEntity> limits=new ArrayList<>();  if (percentOfLimit < 1.0 && percentOfLimit > 100.0) {    throw new ExternalException(ErrorCode.INTERNAL_ERROR);  }  for (  String key : resourceTicketEntity.getLimitKeys()) {    double value=resourceTicketEntity.getLimit(key).getValue() * (percentOfLimit / 100.0);    limits.add(new QuotaLineItemEntity(key,value,resourceTicketEntity.getLimit(key).getUnit()));  }  return subdivide(resourceTicketId,limits);}  }
class C{  public static void i(String tag,String msg){  i(tag,msg,null);}  }
class C{  public static long sortableDoubleBits(long bits){  return bits ^ (bits >> 63) & 0x7fffffffffffffffL;}  }
class C{  public JSONBuffer appendKeyArray(Object key){  if (stack.empty() || stack.peek() != Operand.HASH) {    throw new JSONException("Appending key-value outside of hash context.");  }  addQuotedString(key);  buffer.append(":");  buffer.append("[");  stack.push(Operand.ARRAY);  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:58.260 -0400",hash_original_method="C7E69C7E232B119CCA1DF33F2834B53C",hash_generated_method="DCA3E77BCB2EE59B79BA8CD42C5F63B8") @Override public void close() throws IOException {  if (!closed) {    finish();    inf.end();    out.close();    closed=true;  }}  }
class C{  public AbstractMRMessage createInitPacket(){  return null;}  }
class C{  public Jerry gt(int value){  List<Node> result=new NodeList(nodes.length);  int index=0;  for (  Node node : nodes) {    if (index > value) {      result.add(node);    }    index++;  }  return new Jerry(this,result);}  }
class C{  public boolean hold(){  HOLD.set(true);  boolean res;  if (res=holdLsnr.onHeld(this))   held.incrementAndGet();  return res;}  }
class C{  public Node insertBefore(Node child,Node sibling){  assert sibling == null || this == sibling.getParentNode();  if (sibling == null) {    return appendChild(child);  }  child.detach();  child.setParentNode(this);  if (firstChild == sibling) {    child.setNextSibling(sibling);    firstChild=child;  } else {    Node prev=firstChild;    Node next=firstChild.getNextSibling();    while (next != sibling) {      prev=next;      next=next.getNextSibling();    }    prev.setNextSibling(child);    child.setNextSibling(next);  }  return child;}  }
class C{  public static ArrayOfDoublesUnion wrapUnion(final Memory mem,final long seed){  return new DirectArrayOfDoublesUnion(mem,seed);}  }
class C{  public int size(){  return rules.size();}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.893 -0500",hash_original_method="1C55C0FE8476C30A968193AA8AE54F83",hash_generated_method="045E3A0EB62AA10F2DF081F21E99535F") public SIPResponse createResponse(int statusCode){  String reasonPhrase=SIPResponse.getReasonPhrase(statusCode);  return this.createResponse(statusCode,reasonPhrase);}  }
class C{  public boolean checkPasswordHistory(String password){  String passwordHashString=new String(passwordToHash(password));  String passwordHistory=getString(PASSWORD_HISTORY_KEY);  if (passwordHistory == null) {    return false;  }  int passwordHashLength=passwordHashString.length();  int passwordHistoryLength=getRequestedPasswordHistoryLength();  if (passwordHistoryLength == 0) {    return false;  }  int neededPasswordHistoryLength=passwordHashLength * passwordHistoryLength + passwordHistoryLength - 1;  if (passwordHistory.length() > neededPasswordHistoryLength) {    passwordHistory=passwordHistory.substring(0,neededPasswordHistoryLength);  }  return passwordHistory.contains(passwordHashString);}  }
class C{  public static WindowFocusListener remove(WindowFocusListener l,WindowFocusListener oldl){  return (WindowFocusListener)removeInternal(l,oldl);}  }
class C{  public PartitionSubstitutionModel parsePAUPBlock(BeautiOptions options,List<CharSet> charSets) throws ImportException, IOException {  PartitionSubstitutionModel model=new PartitionSubstitutionModel(options,"nucs");  readTopLevelBlock(options,model,charSets);  return model;}  }
class C{  private String commonSubscribeToProduct() throws Exception {  assertNotNull(subMgmt);  VOService product=getProductToSubscribe(testProducts.get(3).getKey());  VOUser[] users=new VOUser[2];  VOUser[] admins=new VOUser[1];  setUsers(users,admins);  final String id="testModifyPon";  VOPaymentInfo voPaymentInfo=getPaymentInfo(tpAndSupplier.getOrganizationId(),testOrganizations.get(0));  VOBillingContact bc=createBillingContact(testOrganizations.get(0));  subMgmt.subscribeToService(Subscriptions.createVOSubscription(id),product,getUsersToAdd(admins,users),voPaymentInfo,bc,new ArrayList<VOUda>());  return id;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public ShardRouting buildTargetRelocatingShard(){  assert relocating();  return new ShardRouting(index,shardId,relocatingNodeId,currentNodeId,restoreSource,primary,ShardRoutingState.INITIALIZING,version,unassignedInfo,AllocationId.newTargetRelocation(allocationId),true,expectedShardSize);}  }
class C{  public static <A>ListTValue<A> fromAnyM(final AnyMValue<A> anyM){  return of(anyM.map(null));}  }
class C{  public void insertBefore(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=insn;  } else {    prev.next=insn;  }  location.prev=insn;  insn.next=location;  insn.prev=prev;  cache=null;  insn.index=0;}  }
class C{  public FitnessBasedArchive(FitnessEvaluator evaluator,int capacity,Iterable<? extends Solution> iterable){  this(evaluator,capacity,new ParetoDominanceComparator(),iterable);}  }
class C{  public static Collection union(final Collection a,final Collection b){  Collection ret=new ArrayList();  ret.addAll(a);  ret.addAll(b);  return ret;}  }
class C{  public void resetAllTokens(){  currentFreeToken=0;}  }
class C{  public void testSetF24(){  boolean f24=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF24(f24);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F21-F28 since no command station defined");}  }
class C{  private void readObject(){}  }
class C{  public T caseFloatLiteral(FloatLiteral object){  return null;}  }
class C{  public static boolean isPublic(int mod){  return (mod & PUBLIC) != 0;}  }
class C{  public FgsMbRunner(DagWrapper dagWrapper,KnowledgeBoxModel knowledgeBoxModel,Parameters params){  super(dagWrapper.getDag(),params,knowledgeBoxModel);}  }
class C{  @Override protected int sizeOf(MemoryCacheKey key,Bitmap bitmap){  if (bitmap == null)   return 0;  return bitmap.getRowBytes() * bitmap.getHeight();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:24.916 -0500",hash_original_method="F83030BA99FDC4DFE01ED7A9F8C375B2",hash_generated_method="F0EEC024B5375C5D798963D867D8502C") public PointF[] newArray(int size){  return new PointF[size];}  }
class C{  protected void writeChangeRecord() throws IOException {  boolean hasNewStyles=hasStyle && (fillStyles.size() > 0 || lineStyles.size() > 0);  boolean hasMoveTo=(moveXY != null);  boolean hasFillStyle0=fill0Index >= 0;  boolean hasFillStyle1=fill1Index >= 0;  boolean hasLineStyle=lineIndex >= 0;  if ((!hasStyle) && hasFillStyle0) {    hasFillStyle1=false;  }  if (hasNewStyles) {    out.writeUBits(1,0);    out.writeUBits(1,1);    out.writeUBits(1,1);    out.writeUBits(1,1);    out.writeUBits(1,1);    out.writeUBits(1,1);    writeMoveXY(0,0);    out.writeUBits(fillBits,0);    out.writeUBits(fillBits,0);    out.writeUBits(lineBits,0);    if (fill0Index == 0) {      fill0Index=-1;    }    if (fill1Index == 0) {      fill1Index=-1;    }    if (lineIndex == 0) {      lineIndex=-1;    }    fillBits=OutStream.determineUnsignedBitSize(fillStyles.size());    lineBits=OutStream.determineUnsignedBitSize(lineStyles.size());    writeStyles(fillStyles);    writeStyles(lineStyles);    out.writeUBits(4,fillBits);    out.writeUBits(4,lineBits);    writeChangeRecord();    return;  }  if (hasFillStyle0 || hasFillStyle1 || hasLineStyle|| hasMoveTo) {    out.writeUBits(1,0);    out.writeUBits(1,0);    out.writeUBits(1,hasLineStyle ? 1 : 0);    out.writeUBits(1,hasFillStyle1 ? 1 : 0);    out.writeUBits(1,hasFillStyle0 ? 1 : 0);    out.writeUBits(1,hasMoveTo ? 1 : 0);    if (hasMoveTo) {      int moveX=moveXY[0];      int moveY=moveXY[1];      writeMoveXY(moveX,moveY);    }    if (hasFillStyle0) {      out.writeUBits(fillBits,fill0Index);    }    if (hasFillStyle1) {      out.writeUBits(fillBits,fill1Index);    }    if (hasLineStyle) {      out.writeUBits(lineBits,lineIndex);    }    moveXY=null;    fill0Index=-1;    fill1Index=-1;    lineIndex=-1;  }}  }
class C{  public Entry(String symbol,Entry next){  this.symbol=symbol.intern();  characters=new char[symbol.length()];  symbol.getChars(0,characters.length,characters,0);  this.next=next;}  }
class C{  public void handleRequest(Request request,String role){}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public InputStream createInputStream(String name) throws IOException {  name=fixFileName(name);  return Util.getImplementation().createStorageInputStream(name);}  }
class C{  @Inline public ObjectReference retainReferent(ObjectReference object){  return traceObject(object);}  }
class C{  private static short CallNonvirtualShortMethodA(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualShortMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,TypeReference.Short,true);  return Reflection.unwrapShort(returnObj);}  }
class C{  private static int findTotalMaximumRowSize(final JTable table,final int row){  int maximum_height=0;  final Enumeration<?> columns=table.getColumnModel().getColumns();  while (columns.hasMoreElements()) {    final TableColumn tc=(TableColumn)columns.nextElement();    final TableCellRenderer cellRenderer=tc.getCellRenderer();    if (cellRenderer instanceof EditorPaneTableCellRenderer) {      final EditorPaneTableCellRenderer tar=(EditorPaneTableCellRenderer)cellRenderer;      maximum_height=Math.max(maximum_height,tar.findMaximumRowSize(table,row));    }  }  return maximum_height;}  }
class C{  public boolean levelCheck(int iter){  if (levelChecked >= iter)   return this.levelCorrect;  levelChecked=iter;  this.levelCorrect=true;  for (int i=0; i < this.assumes.length; i++) {    if (this.assumes[i] != null && !this.assumes[i].levelCheck(iter)) {      this.levelCorrect=false;    }    ;  }  ;  this.prove.levelCheck(iter);  this.level=this.prove.getLevel();  for (int i=0; i < this.assumes.length; i++) {    this.assumes[i].levelCheck(iter);    if (this.assumes[i].getLevel() > level) {      level=this.assumes[i].getLevel();    }    ;  }  ;  this.levelParams.addAll(this.prove.getLevelParams());  this.allParams.addAll(this.prove.getAllParams());  for (int i=0; i < this.assumes.length; i++) {    this.levelParams.addAll(this.assumes[i].getLevelParams());    this.allParams.addAll(this.assumes[i].getAllParams());  }  ;  this.levelConstraints.putAll(this.prove.getLevelConstraints());  for (int i=0; i < this.assumes.length; i++) {    this.levelConstraints.putAll(this.assumes[i].getLevelConstraints());  }  ;  this.argLevelConstraints.putAll(this.prove.getArgLevelConstraints());  for (int i=0; i < this.assumes.length; i++) {    this.argLevelConstraints.putAll(this.assumes[i].getArgLevelConstraints());  }  ;  this.argLevelParams.addAll(this.prove.getArgLevelParams());  for (int i=0; i < this.assumes.length; i++) {    this.argLevelParams.addAll(this.assumes[i].getArgLevelParams());  }  ;  if (this.levelCorrect) {    addTemporalLevelConstraintToConstants(this.levelParams,this.levelConstraints);  }  ;  return this.levelCorrect;}  }
class C{  public static void loadAll(final JFrame parent,final IDebugger debugger,final IAddress offset,final int size){  checkArguments(parent,debugger,offset);  final CDumpAllWaiter waiter=new CDumpAllWaiter(debugger,offset,size);  CProgressDialog.showEndless(parent,"Loading memory" + " ...",waiter);  if (waiter.getException() != null) {    CUtilityFunctions.logException(waiter.getException());    final String innerMessage="E00078: " + "Could not load memory section";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The memory section starting at address '%s' could not loaded.",offset.toHexString()),new String[]{"There was a problem with the connection to the debug client."},new String[]{"The memory data was not loaded."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,waiter.getException());  }}  }
class C{  public int size(){  return n;}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ElemVariable v=(ElemVariable)handler.getElemTemplateElement();  handler.getStylesheet().appendChild(v);  handler.getStylesheet().setVariable(v);  super.endElement(handler,uri,localName,rawName);}  }
class C{  public static Indication createBindingIndication(){  Indication bindingIndication=new Indication();  bindingIndication.setMessageType(Message.BINDING_INDICATION);  return bindingIndication;}  }
class C{  protected void buildRepresentation(T entity){  setSprite(SpriteStore.get().getSprite(translate(entity.getType())));  calculateOffset(entity,getWidth(),getHeight());}  }
class C{  private QueryExp buildQueryExp(final String pidAttribute,final String[] attributes,final Object[] values){  final QueryExp optionalAttributes=buildOptionalQueryExp(attributes,values);  QueryExp constraint;  if (optionalAttributes != null) {    constraint=Query.and(optionalAttributes,Query.eq(Query.attr(pidAttribute),Query.value(this.pid)));  } else {    constraint=Query.eq(Query.attr(pidAttribute),Query.value(this.pid));  }  return constraint;}  }
class C{  public static void sort(double[] array){  sort(0,array.length,array);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof InterfaceAddress)) {    return false;  }  InterfaceAddress rhs=(InterfaceAddress)obj;  return ((address == null) ? rhs.address == null : address.equals(rhs.address)) && (rhs.prefixLength == prefixLength) && ((broadcastAddress == null) ? rhs.broadcastAddress == null : broadcastAddress.equals(rhs.broadcastAddress));}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  @Override public Array createArrayOf(String typeName,Object[] elements) throws SQLException {  throw unsupported("createArray");}  }
class C{  public Schaffer2(){  super(1,2);}  }
class C{  public static void closeCacheClient(){  if (cacheClient != null && !cacheClient.isClosed()) {    cacheClient.close();    cacheClient.getDistributedSystem().disconnect();  }}  }
class C{  @Override public int next(){  return handleNext();}  }
class C{  protected void downheap(){  int i=1;  MyHeapElement temp;  while (((2 * i) <= m_heap[0].index && m_heap[i].distance < m_heap[2 * i].distance) || ((2 * i + 1) <= m_heap[0].index && m_heap[i].distance < m_heap[2 * i + 1].distance)) {    if ((2 * i + 1) <= m_heap[0].index) {      if (m_heap[2 * i].distance > m_heap[2 * i + 1].distance) {        temp=m_heap[i];        m_heap[i]=m_heap[2 * i];        i=2 * i;        m_heap[i]=temp;      } else {        temp=m_heap[i];        m_heap[i]=m_heap[2 * i + 1];        i=2 * i + 1;        m_heap[i]=temp;      }    } else {      temp=m_heap[i];      m_heap[i]=m_heap[2 * i];      i=2 * i;      m_heap[i]=temp;    }  }}  }
class C{  static int transformForType(ImageTypeSpecifier imageType,boolean input){  int retval=ADOBE_IMPOSSIBLE;  ColorModel cm=imageType.getColorModel();switch (cm.getColorSpace().getType()) {case ColorSpace.TYPE_GRAY:    retval=ADOBE_UNKNOWN;  break;case ColorSpace.TYPE_RGB:retval=input ? ADOBE_YCC : ADOBE_UNKNOWN;break;case ColorSpace.TYPE_YCbCr:retval=ADOBE_YCC;break;case ColorSpace.TYPE_CMYK:retval=input ? ADOBE_YCCK : ADOBE_IMPOSSIBLE;}return retval;}  }
class C{  public synchronized void remove(Parameter parameter){  if (parameter.param.equals(PRINT_PARAMS))   printState=PS_UNKNOWN;  remove(parameter.param);}  }
class C{  public SparkleMotion animate(Animation... animations){  Collections.addAll(mAnimations,animations);  return this;}  }
class C{  private static void ceTest() throws Exception {  Pattern p=Pattern.compile("testa\u030a",Pattern.CANON_EQ);  Matcher m=p.matcher("test\u00e5");  if (!m.matches())   failCount++;  m.reset("testa\u030a");  if (!m.matches())   failCount++;  p=Pattern.compile("test\u00e5",Pattern.CANON_EQ);  m=p.matcher("test\u00e5");  if (!m.matches())   failCount++;  m.reset("testa\u030a");  if (!m.find())   failCount++;  p=Pattern.compile("test[abca\u030a]",Pattern.CANON_EQ);  m=p.matcher("test\u00e5");  if (!m.find())   failCount++;  m.reset("testa\u030a");  if (!m.find())   failCount++;  p=Pattern.compile("test[abc\u00e5def\u00e0]",Pattern.CANON_EQ);  m=p.matcher("test\u00e5");  if (!m.find())   failCount++;  m.reset("testa\u0300");  if (!m.find())   failCount++;  m.reset("testa\u030a");  if (!m.find())   failCount++;  p=Pattern.compile("testa\u0308\u0300",Pattern.CANON_EQ);  check(p,"testa\u0308\u0300",true);  check(p,"testa\u0300\u0308",false);  p=Pattern.compile("testa\u0308\u0323",Pattern.CANON_EQ);  check(p,"testa\u0308\u0323",true);  check(p,"testa\u0323\u0308",true);  p=Pattern.compile("testa\u0308\u0323\u0300",Pattern.CANON_EQ);  check(p,"testa\u0308\u0323\u0300",true);  check(p,"testa\u0323\u0308\u0300",true);  check(p,"testa\u0308\u0300\u0323",true);  check(p,"test\u00e4\u0323\u0300",true);  check(p,"test\u00e4\u0300\u0323",true);  report("Canonical Equivalence");}  }
class C{  public Annotation(String type,boolean isPersistent,String text,int layer,ImageResource image,SVGResource imageSVG){  this.type=type;  this.isPersistent=isPersistent;  this.text=text;  this.layer=layer;  this.image=image;  this.imageSVG=imageSVG;}  }
class C{  public Option descriptionHtml(String descriptionHtml){  this.descriptionHtml=descriptionHtml;  return this;}  }
class C{  @Override public Iterator<E> iterator(){  return new ArrayIterator(data,heapSize);}  }
class C{  public void addNeuron(final Neuron neuron){  neuronList.add(neuron);  neuron.setId(getNeuronIdGenerator().getId());  updatePriorityList();  fireNeuronAdded(neuron);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  public static final HashMap<String,Integer> classCombinationCounts(Instances D){  int L=D.classIndex();  HashMap<String,Integer> map=new HashMap<String,Integer>();  for (int i=0; i < D.numInstances(); i++) {    String y=encodeValue(toIntArray(D.instance(i),L));    Integer c=map.get(y);    map.put(y,c == null ? 1 : c + 1);  }  return map;}  }
class C{  public static Operator indexScan_Default(IndexRowType indexType,boolean reverse){  return indexScan_Default(indexType,reverse,IndexKeyRange.unbounded(indexType));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__CHARACTER:    return getCharacter();case RegularExpressionPackage.CONTROL_LETTER_ESCAPE_SEQUENCE__SEQUENCE:  return getSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public AgentAppFrame constructApplicationFrame(){  if (map == null)   readMap(DataResource.getULMFileResource());  return super.constructApplicationFrame();}  }
class C{  private void ItoOSP(int i,byte[] sp){  sp[0]=(byte)(i >>> 24);  sp[1]=(byte)(i >>> 16);  sp[2]=(byte)(i >>> 8);  sp[3]=(byte)(i >>> 0);}  }
class C{  protected FeaturesData(InputStream stream){  this.stream=stream;}  }
class C{  protected static boolean isVowel(final char c){  final char l=Character.toLowerCase(c);  return ((l == 'a') || (l == 'e') || (l == 'i')|| (l == 'o')|| (l == 'u'));}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to use as MEKA class attributes." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int cols=0;  int rows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 2) {    showFeedback("At least two images must be specified.");    return;  }  try {    double[] data;    updateProgress("Calculating min values:",0);    for (a=0; a < numImages; a++) {      image=new WhiteboxRaster(imageFiles[a],"r");      imageNoData=image.getNoDataValue();      String label="Loop " + String.valueOf(a + 1) + " of "+ String.valueOf(numImages)+ ":";      if (a == 0) {        rows=image.getNumberRows();        cols=image.getNumberColumns();        outputNoData=imageNoData;        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.FLOAT,outputNoData);        output.setPreferredPalette(image.getPreferredPalette());      } else {        if (image.getNumberColumns() != cols || image.getNumberRows() != rows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != imageNoData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (data[col] > z) {                output.setValue(row,col,data[col]);              }            } else {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (rows - 1));        updateProgress(label,progress);      }      image.close();      progress=a / (numImages - 1) * 100;      updateProgress("Calculating image average:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean datosValidos(List listaDatos,Document udocInfo){  Node dato=null;  for (Iterator i=listaDatos.iterator(); i.hasNext(); ) {    dato=(Node)i.next();    int tipoDato=Integer.parseInt(dato.valueOf("@TIPO"));    if (tipoDato == ValorCampoGenericoVO.TIPO_NUMERICO) {      Node nodeParam=dato.selectSingleNode("PARAM");      Node nValorDato=udocInfo.selectSingleNode(nodeParam.getText());      if (nValorDato != null) {        try {          double doubleValue=Double.parseDouble(nValorDato.getText());          if (!(doubleValue > 0))           return false;        } catch (        NumberFormatException nfe) {          return false;        }      }    }  }  return true;}  }
class C{  public void testBuilder_EmptyOnConstruct_NoAppend(){  SQLExceptionChainBuilder<SQLException> builder=new SQLExceptionChainBuilder<SQLException>();  assertFalse("Empty SQLExceptionChainBuilder should have no Exception",builder.hasException());  assertNull("Empty SQLExceptionChainBuilder should have null Exception",builder.getException());}  }
class C{  public static Object create(String className,Object[] constructorArgs,Class<?>[] argClasses,String prefix,Properties properties){  return getInstance()._create(className,constructorArgs,argClasses,prefix,properties);}  }
class C{  public Itinerary(StreetSegment streetSegment,int accessIndex,ZonedDateTime fromTimeDateZD){  transfers=0;  waitingTime=0;  walkTime=duration=streetSegment.duration;  distance=streetSegment.distance;  transitTime=0;  startTime=fromTimeDateZD;  endTime=fromTimeDateZD.plusSeconds(streetSegment.duration);  PointToPointConnection pointToPointConnection=new PointToPointConnection(accessIndex);  connection=pointToPointConnection;}  }
class C{  private void generateAttrDistribution(){  m_Distribution=new int[m_TrainSet.attribute(m_AttrIndex).numValues()];  int i;  Instance train;  for (i=0; i < m_NumInstances; i++) {    train=m_TrainSet.instance(i);    if (!train.isMissing(m_AttrIndex)) {      m_TotalCount++;      m_Distribution[(int)train.value(m_AttrIndex)]++;    }  }}  }
class C{  protected final synchronized boolean isEmpty(){  return numElements == 0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testLeaderSelectionStrategy() throws Throwable {  List<Address> results=(List<Address>)ServerSelectionStrategies.LEADER.selectConnections(new Address("localhost",5000),servers);  assertEquals(results.size(),1);  assertEquals(results.get(0),new Address("localhost",5000));}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public RegistersParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_REGISTERS_SUCCESS);}  }
class C{  public XBeeConfiguration withShutdownHook(boolean shutdownHook){  this.shutdownHook=shutdownHook;  return this;}  }
class C{  public void resetDependencyCheckInterval(){  _checkExpiresTime=0;}  }
class C{  private Query analyzeMultiPhrase(String field,TokenStream stream,int slop) throws IOException {  MultiPhraseQuery.Builder mpqb=newMultiPhraseQueryBuilder();  mpqb.setSlop(slop);  TermToBytesRefAttribute termAtt=stream.getAttribute(TermToBytesRefAttribute.class);  PositionIncrementAttribute posIncrAtt=stream.getAttribute(PositionIncrementAttribute.class);  int position=-1;  List<Term> multiTerms=new ArrayList<>();  stream.reset();  while (stream.incrementToken()) {    int positionIncrement=posIncrAtt.getPositionIncrement();    if (positionIncrement > 0 && multiTerms.size() > 0) {      if (enablePositionIncrements) {        mpqb.add(multiTerms.toArray(new Term[0]),position);      } else {        mpqb.add(multiTerms.toArray(new Term[0]));      }      multiTerms.clear();    }    position+=positionIncrement;    multiTerms.add(new Term(field,termAtt.getBytesRef()));  }  if (enablePositionIncrements) {    mpqb.add(multiTerms.toArray(new Term[0]),position);  } else {    mpqb.add(multiTerms.toArray(new Term[0]));  }  return mpqb.build();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.357 -0500",hash_original_method="EBC0D247F0203C6470AC61D5038CC471",hash_generated_method="9E125B36FCF0C8A89F216F1552E8F350") public static boolean isWhitespace(int codePoint){  if ((codePoint >= 0x1c && codePoint <= 0x20) || (codePoint >= 0x9 && codePoint <= 0xd)) {    return true;  }  if (codePoint == 0x1680) {    return true;  }  if (codePoint < 0x2000 || codePoint == 0x2007) {    return false;  }  if (codePoint <= 0xffff) {    return codePoint <= 0x200b || codePoint == 0x2028 || codePoint == 0x2029 || codePoint == 0x3000;  }  return isWhitespaceImpl(codePoint);}  }
class C{  public void change(String group){  String prestate=this.currentState;  String poststate=group;  if (prestate == null) {    if (poststate == null)     return;  } else   if (prestate.equals(poststate))   return;  if (this.script != null) {    this.currentCallback.exitTrigger(script,prestate,poststate);    this.currentCallback=this.group(poststate);    this.currentState=poststate;    this.currentCallback.entryTrigger(script,prestate,poststate);  }}  }
class C{  public static CGPoint ccpPerp(final CGPoint v){  return ccp(-v.y,v.x);}  }
class C{  public static boolean looksLikeAListStylePosition(String val){  return "inside".equals(val) || "outside".equals(val);}  }
class C{  protected static boolean doesKeyNeedUpdated(final File newCmd) throws IOException {  try {    final String existingKey=Advapi32Util.registryGetStringValue(WinReg.HKEY_CLASSES_ROOT,VSOI_KEY,StringUtils.EMPTY);    final File existingCmd=new File(existingKey.replace("\"%1\"","").trim());    if (!existingCmd.exists()) {      logger.debug("The registry key needs updated because the old key cmd file doesn't exist.");      return true;    }    if (existingCmd.getPath().equalsIgnoreCase(newCmd.getPath()) || FileUtils.contentEquals(existingCmd,newCmd)) {      logger.debug("The registry key does not need updated because {}",existingCmd.getPath().equalsIgnoreCase(newCmd.getPath()) ? "the file paths are the same" : "the contents of the files are the same.");      return false;    }    logger.debug("The existing cmd file is {} old and the the cmd file is {} old",existingCmd.lastModified(),newCmd.lastModified());    return existingCmd.lastModified() < newCmd.lastModified() ? true : false;  } catch (  Win32Exception e) {    logger.debug("There was an issue reading the registry so updating the key to be safe.");    return true;  }}  }
class C{  public void addMapSuperType(String mapeventTypeName,String mapSupertypeName){  ConfigurationEventTypeMap current=mapTypeConfigurations.get(mapeventTypeName);  if (current == null) {    current=new ConfigurationEventTypeMap();    mapTypeConfigurations.put(mapeventTypeName,current);  }  Set<String> superTypes=current.getSuperTypes();  superTypes.add(mapSupertypeName);}  }
class C{  public boolean matches(HttpServletRequest request){  int currentTime=Calendar.getInstance().get(Calendar.HOUR_OF_DAY);  if (startTime > endTime) {    if (currentTime < startTime) {      currentTime+=24;    }    return (currentTime >= startTime && currentTime <= endTime + 24);  } else {    return (currentTime >= startTime && currentTime <= endTime);  }}  }
class C{  private void processActionParameter(HttpServletRequest request){  String action=WebUtil.getParameter(request,"Action");  if (action == null || action.length() == 0)   return;  log.info("Action=" + action);  try {    boolean start=action.startsWith("Start");    m_message=new p();    String msg=(start ? "Started" : "Stopped") + ": ";    m_message.addElement(new strong(msg));    String serverID=action.substring(action.indexOf('_') + 1);    boolean ok=false;    if (serverID.equals("All")) {      if (start)       ok=m_serverMgr.startAll(); else       ok=m_serverMgr.stopAll();      m_message.addElement("All");    } else {      AdempiereServer server=m_serverMgr.getServer(serverID);      if (server == null) {        m_message=new p();        m_message.addElement(new strong("Server not found: "));        m_message.addElement(serverID);        return;      } else {        if (start)         ok=m_serverMgr.start(serverID); else         ok=m_serverMgr.stop(serverID);        m_message.addElement(server.getName());      }    }    m_message.addElement(ok ? " - OK" : " - Error!");  } catch (  Exception e) {    m_message=new p();    m_message.addElement(new strong("Error processing parameter: " + action));    m_message.addElement(new br());    m_message.addElement(e.toString());  }}  }
class C{  public void addPanListener(PanListener listener){  mTouchHandler.addPanListener(listener);}  }
class C{  public List<Field> fields(Class<?> cls){  assert cls != null;  List<Field> fieldsList=fields.get(cls);  if (fieldsList == null) {    fieldsList=new ArrayList<>();    for (Class<?> c=cls; c != null && !c.equals(Object.class); c=c.getSuperclass()) {      List<Field> l=new ArrayList<>();      for (      Field f : c.getDeclaredFields()) {        if (fp == null || fp.apply(f)) {          f.setAccessible(true);          l.add(f);        }      }      if (!l.isEmpty()) {        Collections.sort(l,FIELD_NAME_COMPARATOR);        fieldsList.addAll(l);      }    }    fields.putIfAbsent(cls,fieldsList);  }  return fieldsList;}  }
class C{  public DefaultIoFilterChain(AbstractIoSession session){  if (session == null) {    throw new IllegalArgumentException("session");  }  this.session=session;  head=new EntryImpl(null,null,"head",new HeadFilter());  tail=new EntryImpl(head,null,"tail",new TailFilter());  head.nextEntry=tail;}  }
class C{  private void calculateTouchOffset(RectF rect,float touchX,float touchY){  float touchOffsetX=0;  float touchOffsetY=0;switch (mType) {case TOP_LEFT:    touchOffsetX=rect.left - touchX;  touchOffsetY=rect.top - touchY;break;case TOP_RIGHT:touchOffsetX=rect.right - touchX;touchOffsetY=rect.top - touchY;break;case BOTTOM_LEFT:touchOffsetX=rect.left - touchX;touchOffsetY=rect.bottom - touchY;break;case BOTTOM_RIGHT:touchOffsetX=rect.right - touchX;touchOffsetY=rect.bottom - touchY;break;case LEFT:touchOffsetX=rect.left - touchX;touchOffsetY=0;break;case TOP:touchOffsetX=0;touchOffsetY=rect.top - touchY;break;case RIGHT:touchOffsetX=rect.right - touchX;touchOffsetY=0;break;case BOTTOM:touchOffsetX=0;touchOffsetY=rect.bottom - touchY;break;case CENTER:touchOffsetX=rect.centerX() - touchX;touchOffsetY=rect.centerY() - touchY;break;default :break;}mTouchOffset.x=touchOffsetX;mTouchOffset.y=touchOffsetY;}  }
class C{  public ISchedulingRule buildRule(){  return root;}  }
class C{  @Override public byte[] toByteArray(){  return uuid.mId;}  }
class C{  public void open(File file) throws IOException {  checkAWTPermission();  checkExec();  checkActionSupport(Action.OPEN);  checkFileValidation(file);  peer.open(file);}  }
class C{  public void ddpOrient(Node a,Node b,Node c,Graph graph){  Queue<Node> Q=new ArrayDeque<>();  Set<Node> V=new HashSet<>();  Node e=null;  int distance=0;  Map<Node,Node> previous=new HashMap<>();  List<Node> cParents=graph.getParents(c);  Q.offer(a);  V.add(a);  V.add(b);  previous.put(a,b);  while (!Q.isEmpty()) {    Node t=Q.poll();    if (e == null || e == t) {      e=t;      distance++;      if (distance > 0 && distance > (maxPathLength == -1 ? 1000 : maxPathLength))       return;    }    final List<Node> nodesInTo=graph.getNodesInTo(t,Endpoint.ARROW);    for (    Node d : nodesInTo) {      if (V.contains(d))       continue;      previous.put(d,t);      Node p=previous.get(t);      if (!graph.isDefCollider(d,t,p)) {        continue;      }      previous.put(d,t);      if (!graph.isAdjacentTo(d,c)) {        if (doDdpOrientation(d,a,b,c,previous,graph)) {          return;        }      }      if (cParents.contains(d)) {        Q.offer(d);        V.add(d);      }    }  }}  }
class C{  private boolean stringContainsSpecialCharacters(String line){  return line.indexOf(quotechar) != -1 || line.indexOf(escapechar) != -1 || line.indexOf(separator) != -1 || line.contains(DEFAULT_LINE_END) || line.contains("\r");}  }
class C{  public boolean isInBoundsY(float y){  if ((y < 0) || ((y + getHeight()) > getParentWorld().getHeight())) {    return false;  }  return true;}  }
class C{  public static void serializePMMLModel(PMMLModel model,String filename) throws Exception {  serializePMMLModel(model,new File(filename));}  }
class C{  protected Sorting(){}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  @Override public void trainOnInstance(Instance inst){  if (!this.isInit) {    this.isInit=true;    InstancesHeader instances=new InstancesHeader(dataset);    this.learner.setModelContext(instances);    this.learner.prepareForUse();  }  if (inst.weight() > 0) {    inst.setDataset(dataset);    learner.trainOnInstance(inst);  }}  }
class C{  public void delete(){  Operator parent=null;  for (  Operator selectedOperator : new LinkedList<Operator>(getSelectedOperators())) {    if (parent == null) {      parent=selectedOperator.getParent();    }    if (selectedOperator instanceof ProcessRootOperator) {      return;    }    selectedOperator.remove();  }  mainFrame.selectOperator(parent);}  }
class C{  public void addSigner(PrivateKey key,byte[] subjectKeyID,String digestOID,AttributeTable signedAttr,AttributeTable unsignedAttr) throws IllegalArgumentException {  addSigner(key,subjectKeyID,getEncOID(key,digestOID),digestOID,signedAttr,unsignedAttr);}  }
class C{  public boolean reportsByteLengthInDescriptor(){  return serverVersion.isEqualOrAbove(1,5);}  }
class C{  public Matrix transpose(){  final int offset=addr.isFortran() ? 1 : 0;  final Matrix result=new Matrix(cols(),rows(),this.flags());  final Address.MatrixAddress.MatrixOffset src=this.addr.offset(offset,offset);  final Address.MatrixAddress.MatrixOffset dst=result.addr.offset(offset,offset);  for (int row=offset; row < rows() + offset; row++) {    src.setRow(row);    src.setCol(offset);    dst.setRow(offset);    dst.setCol(row);    for (int col=offset; col < cols() + offset; col++) {      result.$[dst.op()]=this.$[src.op()];      src.nextCol();      dst.nextRow();    }  }  return result;}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  private void selectPossibleValue(int index){  if (isStrict()) {    if (index < 0)     index=comboBox.getModel().getSize() - 1;    if (index > comboBox.getModel().getSize() - 1)     index=0;  } else {    if (index == -2)     index=comboBox.getModel().getSize() - 1;  }  final boolean validIndex=index >= 0 && index < comboBox.getModel().getSize();  if (!validIndex)   index=-1;  doNotPostProcessDocumentChanges=true;  try {    if (isTableCellEditor) {      final ActionListener[] listeners=unregisterAllActionListeners(comboBox);      try {        comboBox.setSelectedIndex(index);      }  finally {        registerAllActionListeners(comboBox,listeners);      }    } else {      comboBox.setSelectedIndex(index);    }    if (!validIndex) {      comboBoxEditorComponent.setText(prefix);      doNotClearFilterOnPopupHide=true;      try {        comboBox.hidePopup();      }  finally {        doNotClearFilterOnPopupHide=false;      }      comboBox.showPopup();    }  }  finally {    doNotPostProcessDocumentChanges=false;  }  final String newSelection=comboBoxEditorComponent.getText();  if (filterMatcher.matches(newSelection))   comboBoxEditorComponent.select(prefix.length(),newSelection.length());}  }
class C{  public static Integer toJavaInt(Integer luaInt){  return luaInt != null ? luaInt - 1 : null;}  }
class C{  MultiFinderPatternFinder(BitMatrix image){  super(image);}  }
class C{  @DSComment("IO movement methodName") @DSSpec(DSCat.IO_ACTION_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:45.932 -0500",hash_original_method="38D81F9B93E07ADE0E2E072FADEAEAB2",hash_generated_method="366EB5E49CE660D34F00F358317E4C64") public static InputStream openContactPhotoInputStream(ContentResolver cr,Uri contactUri){  return openContactPhotoInputStream(cr,contactUri,false);}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  propertyChangeSupport.removePropertyChangeListener(listener);}  }
class C{  private String verifyDatastoreForRemoval(Map<URI,Collection<URI>> vCenterHostExportMap,URI virtualDataCenter,String waitFor,Workflow workflow){  if (vCenterHostExportMap == null) {    return waitFor;  }  String wait=waitFor;  for (  URI hostId : vCenterHostExportMap.keySet()) {    Host esxHost=_dbClient.queryObject(Host.class,hostId);    if (esxHost != null) {      VcenterDataCenter vcenterDataCenter=_dbClient.queryObject(VcenterDataCenter.class,virtualDataCenter);      if (vcenterDataCenter != null) {        URI vCenterId=vcenterDataCenter.getVcenter();        for (        URI export : vCenterHostExportMap.get(hostId)) {          wait=workflow.createStep(VERIFY_DATASTORE_STEP,String.format("Verifying datastores for removal from export %s",export),wait,export,export.toString(),this.getClass(),verifyDatastoreMethod(export,vCenterId,vcenterDataCenter.getId()),rollbackMethodNullMethod(),null);        }      }    }  }  return wait;}  }
class C{  public static void displayError(JFrame frame,Throwable error){  DError dError=new DError(frame,error);  dError.setLocationRelativeTo(frame);  dError.setVisible(true);}  }
class C{  public static AnsibleLoggerThread copyStreamThread(final InputStream in,final Listener out){  return new AnsibleLoggerThread(in,out);}  }
class C{  private View inflateDividerView(@Nullable final ViewGroup parent,@NonNull final Divider divider,final int position){  LayoutInflater layoutInflater=LayoutInflater.from(context);  View view=layoutInflater.inflate(R.layout.divider,parent,false);  DividerViewHolder viewHolder=new DividerViewHolder();  viewHolder.leftDivider=view.findViewById(R.id.left_divider);  viewHolder.rightDivider=view.findViewById(R.id.right_divider);  viewHolder.titleTextView=(TextView)view.findViewById(android.R.id.title);  view.setTag(viewHolder);  if (!TextUtils.isEmpty(divider.getTitle()) || (position % columnCount > 0 && !TextUtils.isEmpty(getRawItems().get(position - (position % columnCount)).getTitle()))) {    view.getLayoutParams().height=context.getResources().getDimensionPixelSize(R.dimen.bottom_sheet_divider_title_height);  }  return view;}  }
class C{  public boolean hasClasses(){  Set subparts=this.getSchedulingSubparts();  if (subparts != null && !subparts.isEmpty()) {    for (Iterator i=subparts.iterator(); i.hasNext(); ) {      SchedulingSubpart ss=(SchedulingSubpart)i.next();      if (ss.getClasses() != null && !ss.getClasses().isEmpty()) {        return true;      }    }  }  return false;}  }
class C{  public static String extractRequestedDomainName(final HttpServletRequest httpRequest){  final String requestURL=httpRequest.getRequestURL().toString();  return extractRequestedDomainName(requestURL);}  }
class C{  public void addAllOfFromTo(ObjectArrayList other,int from,int to){  beforeInsertAllOfFromTo(size,other,from,to);}  }
class C{  @Override public String id(){  return id;}  }
class C{  @SuppressWarnings("deprecation") public static LocalDateTime fromDateFields(Date date){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  return new LocalDateTime(date.getYear() + 1900,date.getMonth() + 1,date.getDate(),date.getHours(),date.getMinutes(),date.getSeconds(),(int)(date.getTime() % 1000));}  }
class C{  public T caseEvent(Event object){  return null;}  }
class C{  public AccessibleAWTTextComponent(){  TextComponent.this.addTextListener(this);}  }
class C{  @Override public boolean relative(int rowCount) throws SQLException {  try {    debugCodeCall("relative",rowCount);    checkClosed();    int row=result.getRowId() + 1 + rowCount;    if (row < 0) {      row=0;    } else     if (row > result.getRowCount()) {      row=result.getRowCount() + 1;    }    return absolute(row);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public ObjectIntHashMap(HashingStrategy hs){  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=(int)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);  table=new Entry[DEFAULT_INITIAL_CAPACITY];  this.hashingStrategy=(hs == null) ? new IntHashMapStrategy() : hs;  init();}  }
class C{  public boolean canBeShortAddress(int address){  return !isLongAddress(address);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public textureReference(){}  }
class C{  public synchronized void clear(){  mCategories.clear();  mValues.clear();}  }
class C{  public static void saveX509Cert(String certStr,File certFile) throws IOException {  BufferedWriter writer=new BufferedWriter(new FileWriter(certFile));  writer.write(BEGIN_CERT);  writer.newLine();  writer.write(certStr);  writer.newLine();  writer.write(END_CERT);  writer.newLine();  writer.close();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case FunctionblockPackage.FAULT__PROPERTIES:    return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isHotBackupEnabled(){  return hotBackupEnabled;}  }
class C{  public void testClone(){  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  Mac res;  for (int i=0; i < macs.length; i++) {    try {      res=(Mac)macs[i].clone();      assertTrue("Object should not be equals",!macs[i].equals(res));      assertEquals("Incorrect class",macs[i].getClass(),res.getClass());    } catch (    CloneNotSupportedException e) {    }  }}  }
class C{  public void toggle(){  mSlidingMenu.toggle();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.863 -0500",hash_original_method="F488471D994E6AC017026A4A172508CF",hash_generated_method="21A9CBF4CE60BC5F74030C540EEF2812") public String concat(String string){  addTaint(string.getTaintInt());  return this;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case TRANSACTION_ID:    return isSetTransactionId();}throw new IllegalStateException();}  }
class C{  private boolean keyValid(String key){  int i=0;  while (i < propertyKeys.length) {    if (propertyKeys[i].equals(key)) {      break;    }    ++i;  }  return i < propertyKeys.length;}  }
class C{  @Override public void evaluate() throws Throwable {  if (hiveContextSingleton == null) {    SparkConf sparkConf=new SparkConf().setAppName("HiveQLUnit").setMaster(serverAddress);    JavaSparkContext sparkContext=new JavaSparkContext(sparkConf);    hiveContextSingleton=new HiveContext(sparkContext.sc());  }  wrappedStatement.evaluate();}  }
class C{  private static OperandTreeNode createNewOperand(final INaviModule module,final ICodeNodeProvider dataset) throws ParserException {  final int expressionId=dataset.getExpressionTreeId();  final int type=dataset.getExpressionTreeType();  final String value=getValue(dataset,type);  final Integer parentId=dataset.getParentId();  final String replacementString=dataset.getReplacement();  final IAddress functionAddress=dataset.getFunctionAddress();  final Integer typeId=dataset.getSubstitutionTypeId();  RawTypeSubstitution substitution=null;  if (typeId != null) {    substitution=new RawTypeSubstitution(dataset.getInstructionAddress(),dataset.getSubstitutionPosition(),expressionId,typeId,dataset.getSubstitutionPath(),dataset.getSubstitutionOffset());  }  final Integer instanceId=dataset.getTypeInstanceId() == null ? null : dataset.getTypeInstanceId();  final int operandPosition=dataset.getOperandPosition();  final IAddress address=dataset.getInstructionAddress();  final List<CReference> references=parseReferences(expressionId,dataset);  final INaviReplacement replacement=lookupReplacement(replacementString,module,functionAddress);  return new OperandTreeNode(expressionId,type,value,getParentId(parentId),replacement,references,substitution,instanceId,operandPosition,address);}  }
class C{  public static Throwable causeAt(Throwable parent,final int requiredIndex){  if (parent != null && requiredIndex > 0) {    return causeAt(parent.getCause(),requiredIndex - 1);  }  if (requiredIndex > 0) {    return null;  }  return parent;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Permissions.PREDEFINED_PERMISSIONS.clone();}  }
class C{  public void loadRules(Reader in,URL ref) throws IOException {  CssParser parser=new CssParser();  parser.parse(ref,in,false,false);}  }
class C{  private static String toStringBits_0_32_bitPosAlreadyChecked(int bitSize,int bits,int firstBitPos,int lastBitPosExcl,boolean bigEndian,boolean padding){  if (ASSERTIONS)   assert ((bitSize >= 0) && (bitSize <= 32));  final int bitSizeM1=bitSize - 1;  final int lastBitPos=lastBitPosExcl - 1;  if (padding) {    final int nbrOfChars=bitSize;    final char[] chars=new char[nbrOfChars];    int bitIndex=bitSizeM1;    if (bigEndian) {      final int firstBitIndex=bitSizeM1 - lastBitPos;      final int lastBitIndex=bitSizeM1 - firstBitPos;      while (bitIndex > lastBitIndex) {        chars[bitSizeM1 - bitIndex]='_';        --bitIndex;      }      while (bitIndex >= firstBitIndex) {        chars[bitSizeM1 - bitIndex]=(char)('0' + ((bits >> bitIndex) & 1));        --bitIndex;      }      while (bitIndex >= 0) {        chars[bitSizeM1 - bitIndex]='_';        --bitIndex;      }    } else {      while (bitIndex > lastBitPos) {        chars[bitIndex]='_';        --bitIndex;      }      while (bitIndex >= firstBitPos) {        chars[bitIndex]=(char)('0' + ((bits >> bitIndex) & 1));        --bitIndex;      }      while (bitIndex >= 0) {        chars[bitIndex]='_';        --bitIndex;      }    }    return new String(chars);  } else {    final int nbrOfChars=(lastBitPosExcl - firstBitPos);    final char[] chars=new char[nbrOfChars];    if (bigEndian) {      final int firstBitIndex=bitSizeM1 - lastBitPos;      final int lastBitIndex=bitSizeM1 - firstBitPos;      int bitIndex=lastBitIndex;      while (bitIndex >= firstBitIndex) {        chars[lastBitIndex - bitIndex]=(char)('0' + ((bits >> bitIndex) & 1));        --bitIndex;      }    } else {      int bitIndex=lastBitPos;      while (bitIndex >= firstBitPos) {        chars[bitIndex - firstBitPos]=(char)('0' + ((bits >> bitIndex) & 1));        --bitIndex;      }    }    return new String(chars);  }}  }
class C{  protected boolean visitNode(ASTNode node){  return true;}  }
class C{  public static void addSessionCookie(String cookieName,String cookieValue,HttpServletResponse response){  Validate.notNull(response);  if (cookieName == null || cookieName.isEmpty() || cookieValue == null || cookieValue.isEmpty()) {    log.warn("Cookie name/value is null or empty. Ignoring.");    return;  }  log.debug("Setting cookie " + cookieName + " value "+ cookieValue);  Cookie sessionCookie=new Cookie(cookieName,cookieValue);  sessionCookie.setPath("/");  sessionCookie.setSecure(true);  sessionCookie.setHttpOnly(true);  response.addCookie(sessionCookie);}  }
class C{  @Override public void startElement(String namespaceURI,String localName,String qName,Attributes atts) throws SAXException {  if (qName.equals(SERIES_TAG)) {    setSeriesKey(atts.getValue("name"));    ItemHandler subhandler=new ItemHandler(this.root,this);    this.root.pushSubHandler(subhandler);  } else   if (qName.equals(ITEM_TAG)) {    ItemHandler subhandler=new ItemHandler(this.root,this);    this.root.pushSubHandler(subhandler);    subhandler.startElement(namespaceURI,localName,qName,atts);  } else {    throw new SAXException("Expecting <Series> or <Item> tag...found " + qName);  }}  }
class C{  public static List<String> readFileToList(String filePath){  File file=new File(filePath);  List<String> fileContent=new ArrayList<String>();  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    String line=null;    while ((line=reader.readLine()) != null) {      fileContent.add(line);    }    reader.close();    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  static void appendTest(File blah) throws Exception {  for (int i=0; i < 10; i++) {    long testSize=generator.nextInt(1000) + 10;    initTestFile(blah,testSize);    try (FileChannel fc=(i < 5) ? new FileOutputStream(blah,true).getChannel() : FileChannel.open(blah.toPath(),APPEND)){      long newSize=generator.nextInt((int)testSize);      fc.truncate(newSize);      if (fc.size() != newSize)       throw new RuntimeException("Truncate failed");      ByteBuffer buf=ByteBuffer.allocate(1);      buf.put((byte)'x');      buf.flip();      fc.write(buf);      if (fc.size() != (newSize + 1))       throw new RuntimeException("Unexpected size");    }   }}  }
class C{  private Comparator<InstalledApp> _get_comparator(){  SharedPreferences pref=PreferenceManager.getDefaultSharedPreferences(_ctx);  String sort_type=pref.getString(SettingsFragment.KEY_PREF_SORT_TYPE,SettingsFragment.ALPHA_SORT);  if (sort_type.equals(SettingsFragment.ALPHA_SORT)) {    return new AlphabeticalComparator();  } else {    return new StatusComparator();  }}  }
class C{  public static AuthCertDeletionRequestType parseAuthCertDeletionRequest(SoapMessageImpl message) throws Exception {  return parse(message,AUTH_CERT_DELETION);}  }
class C{  public static short popParameterShort(){  return parametersShort.pop();}  }
class C{  public HttpResponse execute(final HttpRequest request,final HttpClientConnection conn,final HttpContext context) throws IOException, HttpException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (conn == null) {    throw new IllegalArgumentException("Client connection may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  try {    HttpResponse response=doSendRequest(request,conn,context);    if (response == null) {      response=doReceiveResponse(request,conn,context);    }    return response;  } catch (  IOException ex) {    conn.close();    throw ex;  }catch (  HttpException ex) {    conn.close();    throw ex;  }catch (  RuntimeException ex) {    conn.close();    throw ex;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:48.429 -0400",hash_original_method="195244B0122E9C532D039816F791192C",hash_generated_method="E010DC4AD1AE58BC0D2925422A5D303B") public boolean isModal(){  return mModal;}  }
class C{  private static final boolean isWholeWord(CharSequence searchIn,int offset,int len){  boolean wsBefore, wsAfter;  try {    wsBefore=!Character.isLetterOrDigit(searchIn.charAt(offset - 1));  } catch (  IndexOutOfBoundsException e) {    wsBefore=true;  }  try {    wsAfter=!Character.isLetterOrDigit(searchIn.charAt(offset + len));  } catch (  IndexOutOfBoundsException e) {    wsAfter=true;  }  return wsBefore && wsAfter;}  }
class C{  private void sendHubHeartbeats(){  RackHeartbeat rack=_rack;  UpdateRackHeartbeat updateRack=rack.getUpdate();  UpdatePodSystem updatePod=getUpdatePodSystem();  long now=CurrentTime.currentTime();  if (!isJoinComplete()) {    updatePod=null;  }  for (  ServerHeartbeat rackServer : _rack.getServers()) {    if (rackServer == null || rackServer == _serverSelf) {      continue;    }    ServerTarget target=createTargetServer(rackServer);    target.hubHeartbeat(getServerSelf().getUpdate(),updateRack,updatePod,now);  }}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof StrictChronology == false) {    return false;  }  StrictChronology chrono=(StrictChronology)obj;  return getBase().equals(chrono.getBase());}  }
class C{  @Override public double adaptTicsMin(double min,double ticSize){  return min;}  }
class C{  private boolean cleanUp(Reference<?> reference){  Method finalizeReferentMethod=getFinalizeReferentMethod();  if (finalizeReferentMethod == null) {    return false;  }  do {    reference.clear();    if (reference == frqReference) {      return false;    }    try {      finalizeReferentMethod.invoke(reference);    } catch (    Throwable t) {      logger.log(Level.SEVERE,"Error cleaning up after reference.",t);    }  } while ((reference=queue.poll()) != null);  return true;}  }
class C{  @Override public void mouseClicked(MouseEvent me){  int x, y;  Rectangle r=new Rectangle(0,0,(int)(m_nPaddedNodeWidth * m_fScale),(int)(m_nNodeHeight * m_fScale));  x=me.getX();  y=me.getY();  for (int iNode=0; iNode < m_BayesNet.getNrOfNodes(); iNode++) {    r.x=(int)(m_BayesNet.getPositionX(iNode) * m_fScale);    r.y=(int)(m_BayesNet.getPositionY(iNode) * m_fScale);    if (r.contains(x,y)) {      m_nCurrentNode=iNode;      if (me.getButton() == MouseEvent.BUTTON3) {        handleRightNodeClick(me);      }      if (me.getButton() == MouseEvent.BUTTON1) {        if ((me.getModifiersEx() & MouseEvent.CTRL_DOWN_MASK) != 0) {          m_Selection.toggleSelection(m_nCurrentNode);        } else         if ((me.getModifiersEx() & MouseEvent.SHIFT_DOWN_MASK) != 0) {          m_Selection.addToSelection(m_nCurrentNode);        } else {          m_Selection.clear();          m_Selection.addToSelection(m_nCurrentNode);        }        repaint();      }      return;    }  }  if (me.getButton() == MouseEvent.BUTTON3) {    handleRightClick(me,(int)(x / m_fScale),(int)(y / m_fScale));  }}  }
class C{  public synchronized void removeAllSeries(){  dataset.removeAllSeries();  if (oneRangePerSeries) {    XYPlot plot=(XYPlot)chart.getPlot();    for (; raIndex > 0; raIndex--) {      plot.setDataset(raIndex,null);      plot.setRenderer(raIndex,null);      plot.setRangeAxis(raIndex,null);    }    plot.setDataset(dataset);  }}  }
class C{  public static GeneralPath createArrowHeads(int arrowDirectionType,int location,OMAbstractLine line){  return createArrowHeads(arrowDirectionType,location,line,DEFAULT_WINGTIP,DEFAULT_WINGLENGTH);}  }
class C{  protected void drawRightLabels(KeyedValues keys,Graphics2D g2,Rectangle2D plotArea,Rectangle2D linkArea,float maxLabelWidth,PiePlotState state){  this.labelDistributor.clear();  double lGap=plotArea.getWidth() * this.labelGap;  double verticalLinkRadius=state.getLinkArea().getHeight() / 2.0;  for (int i=0; i < keys.getItemCount(); i++) {    String label=this.labelGenerator.generateSectionLabel(this.dataset,keys.getKey(i));    if (label != null) {      TextBlock block=TextUtilities.createTextBlock(label,this.labelFont,this.labelPaint,maxLabelWidth,new G2TextMeasurer(g2));      TextBox labelBox=new TextBox(block);      labelBox.setBackgroundPaint(this.labelBackgroundPaint);      labelBox.setOutlinePaint(this.labelOutlinePaint);      labelBox.setOutlineStroke(this.labelOutlineStroke);      if (this.shadowGenerator == null) {        labelBox.setShadowPaint(this.labelShadowPaint);      } else {        labelBox.setShadowPaint(null);      }      labelBox.setInteriorGap(this.labelPadding);      double theta=Math.toRadians(keys.getValue(i).doubleValue());      double baseY=state.getPieCenterY() - Math.sin(theta) * verticalLinkRadius;      double hh=labelBox.getHeight(g2);      this.labelDistributor.addPieLabelRecord(new PieLabelRecord(keys.getKey(i),theta,baseY,labelBox,hh,lGap / 2.0 + lGap / 2.0 * Math.cos(theta),1.0 - getLabelLinkDepth() + getExplodePercent(keys.getKey(i))));    }  }  double hh=plotArea.getHeight();  double gap=0.00;  this.labelDistributor.distributeLabels(plotArea.getMinY() + gap,hh - 2 * gap);  for (int i=0; i < this.labelDistributor.getItemCount(); i++) {    drawRightLabel(g2,state,this.labelDistributor.getPieLabelRecord(i));  }}  }
class C{  private void showTabMenu(StripLayoutTab anchorTab){  int tabIndex=TabModelUtils.getTabIndexById(mModel,anchorTab.getId());  TabModelUtils.setIndex(mModel,tabIndex);  View tabView=TabModelUtils.getCurrentTab(mModel).getView();  mTabMenu.setAnchorView(tabView);  int verticalOffset=-(tabView.getHeight() - (int)mContext.getResources().getDimension(R.dimen.tab_strip_height)) - ((MarginLayoutParams)tabView.getLayoutParams()).topMargin;  mTabMenu.setVerticalOffset(verticalOffset);  int horizontalOffset=Math.round((anchorTab.getDrawX() + anchorTab.getWidth()) * mContext.getResources().getDisplayMetrics().density) - mTabMenu.getWidth() - ((MarginLayoutParams)tabView.getLayoutParams()).leftMargin;  mTabMenu.setHorizontalOffset(horizontalOffset);  mTabMenu.show();}  }
class C{  static public int nextPowerOfTwo(int value){  if (value == 0)   return 1;  value--;  value|=value >> 1;  value|=value >> 2;  value|=value >> 4;  value|=value >> 8;  value|=value >> 16;  return value + 1;}  }
class C{  public static int bradsToDegree(byte brad){  return brad * 180 / 128;}  }
class C{  public static Entry fromCursor(Cursor cursor){  Entry entry=new Entry();  entry.id=cursor.getInt(0);  entry.uuid=cursor.getString(1);  Calendar date=Calendar.getInstance();  date.setTimeInMillis(cursor.getLong(2));  entry.creationDate=date;  entry.modifiedDate=cursor.getLong(3);  entry.title=cursor.getString(4);  entry.text=cursor.getString(5);  entry.placeName=cursor.getString(6);  entry.latitude=cursor.getDouble(7);  entry.longitude=cursor.getDouble(8);  entry.hasLocation=entry.latitude != 0 && entry.longitude != 0;  entry.starred=cursor.getInt(9) == 1;  try {    JSONArray json=new JSONArray(cursor.getString(10));    ArrayList<String> tags=new ArrayList<>();    for (int i=0; i < json.length(); i++)     tags.add(json.getString(i));    entry.tags=tags;  } catch (  JSONException e) {    e.printStackTrace();  }  entry.isDeleted=cursor.getInt(11) == 1;  entry.deletionDate=cursor.getLong(12);  entry.googleDriveFileId=cursor.getString(13);  entry.googleDrivePhotoFileId=cursor.getString(14);  return entry;}  }
class C{  private static ZyLabelContent buildContent(final INaviViewNode node,final ZyGraphViewSettings graphSettings,final INodeModifier modifier){  Preconditions.checkNotNull(node,"IE02107: Node argument can not be null");  if (node instanceof INaviFunctionNode) {    return ZyFunctionNodeBuilder.buildContent((INaviFunctionNode)node,graphSettings,modifier);  } else   if (node instanceof INaviCodeNode) {    return ZyCodeNodeBuilder.buildContent((INaviCodeNode)node,graphSettings,modifier);  } else   if (node instanceof CTextNode) {    return ZyTextNodeBuilder.buildContent((CTextNode)node);  } else   if (node instanceof INaviGroupNode) {    return ZyGroupNodeBuilder.buildContent((INaviGroupNode)node);  } else {    throw new IllegalStateException("IE00912: Unknown node type");  }}  }
class C{  public boolean visit(UndoEdit edit){  return visitNode(edit);}  }
class C{  public dwgParser(){  super("DWG (CAD Drawing) parser (very basic)");  this.SUPPORTED_EXTENSIONS.add("dwg");  this.SUPPORTED_MIME_TYPES.add("application/dwg");  this.SUPPORTED_MIME_TYPES.add("applications/vnd.dwg");}  }
class C{  private void removeUpdate(){  if (mUpdateProgress != null) {    removeCallbacks(mUpdateProgress);  }}  }
class C{  protected void ping(InetAddress address) throws Exception {  Socket socket=null;  int ping=1;  for (; ; ) {    if (isDebug()) {      log("Trial #" + ping + "/"+ getMaxPings()+ " - creating socket connected to "+ address+ " on port "+ getPort());    }    try {      socket=new Socket(address,getPort());      break;    } catch (    ConnectException ce) {      log("Trial #" + ping + "/"+ getMaxPings()+ " - exception caught: "+ ce.toString()+ " while creating socket connected to "+ address+ " on port "+ getPort());      ping++;      if (ping <= getMaxPings()) {        log("Waiting " + getPingIntervalMilli() + " milliseconds before retrying ...");        Thread.sleep(getPingIntervalMilli());      } else {        break;      }    }  }  if (socket == null) {    throw new ConnectException("maxPings exceeded: " + getMaxPings() + ". Giving up. The clamd daemon seems not to be running");  }  try {    BufferedReader reader=new BufferedReader(new InputStreamReader(socket.getInputStream(),"ASCII"));    PrintWriter writer=new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())),true);    log("Sending: \"PING\" to " + address + " ...");    writer.println("PING");    writer.flush();    boolean pongReceived=false;    for (; ; ) {      String answer=reader.readLine();      if (answer != null) {        answer=answer.trim();        log("Received: \"" + answer + "\"");        answer=answer.trim();        if (answer.equals("PONG")) {          pongReceived=true;        }      } else {        break;      }    }    reader.close();    writer.close();    if (!pongReceived) {      throw new ConnectException("Bad answer from \"PING\" probe: expecting \"PONG\"");    }  }  finally {    socket.close();  }}  }
class C{  public int[] toArray(){  return codon.clone();}  }
class C{  public LocalDate withWeekyear(int weekyear){  return withLocalMillis(getChronology().weekyear().set(getLocalMillis(),weekyear));}  }
class C{  public final void increaseScheduledWriteBytes(int increment){  throughputCalculationLock.lock();  try {    scheduledWriteBytes+=increment;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("PfdFileResult[");  buffer.append("path = ").append(path);  buffer.append(", logicalfilename = ").append(logicalFileName);  buffer.append(", physicalfilename = ").append(physicalFileName);  buffer.append("]");  return buffer.toString();}  }
class C{  public void swapImage(final boolean selectedImage){  if (selected == -1) {    return;  }  if (selectedImage) {    selected=SELECTEDICON;  } else {    selected=UNSELECTEDICON;  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void testDeletion() throws Exception {  StorageAgent agent=this.configureStorageService("testOrder",10);  assertEquals("Initial backups should be 0",0,agent.list().length);  for (int i=0; i < 5; i++) {    int size=1000 + (i * 10);    BackupSpecification backupSpecStore=createBackup("testDeletion",size);    agent.store(backupSpecStore);  }  for (int i=0; i < 5; i++) {    StorageSpecification[] currentSpecs=agent.list();    assertEquals("URI list must account for deletions",5 - i,currentSpecs.length);    StorageSpecification spec=currentSpecs[0];    assertEquals("Next backup must be correct size in order...",1000 + i * 10,spec.getFileLength(0));    boolean success=agent.delete(URI.create(currentSpecs[0].getUri()));    assertTrue("Backup deleted successfully",success);  }  assertEquals("After deletion no remaining backups expected",0,agent.list().length);  agent.release();}  }
class C{  private ChangeSetExecutor(ChangeSet changeSet,Type type,UndoContext context,BlockBag blockBag,int inventory){  checkNotNull(changeSet);  checkNotNull(type);  checkNotNull(context);  this.type=type;  this.context=context;  if (changeSet instanceof FaweChangeSet) {    iterator=((FaweChangeSet)changeSet).getIterator(blockBag,inventory,type == Type.REDO);  } else   if (type == Type.UNDO) {    iterator=changeSet.backwardIterator();  } else {    iterator=changeSet.forwardIterator();  }}  }
class C{  public boolean containsValue(Object value){  Object[] tab=table;  for (int i=1; i < tab.length; i+=2) {    if (tab[i] == value)     return true;  }  return false;}  }
class C{  private void autoSize(){  getShell().layout();  getShell().setSize(getDefaultSize());}  }
class C{  private void reAllocBuff(int len){  if (bufferSize + len <= cb.length) {    bufferSize=cb.length;    return;  }  if (len < cb.length) {    len=cb.length;  }  bufferSize=cb.length + len;  char[] tmp=new char[bufferSize];  System.arraycopy(cb,0,tmp,0,cb.length);  cb=tmp;  tmp=null;}  }
class C{  ZoneOffsetTransition(long epochSecond,ZoneOffset offsetBefore,ZoneOffset offsetAfter){  this.transition=LocalDateTime.ofEpochSecond(epochSecond,0,offsetBefore);  this.offsetBefore=offsetBefore;  this.offsetAfter=offsetAfter;}  }
class C{  public void purgeRelations() throws RelationServiceNotRegisteredException {  RELATION_LOGGER.entering(RelationService.class.getName(),"purgeRelations");  isActive();  List<MBeanServerNotification> localUnregNtfList;synchronized (myRefedMBeanObjName2RelIdsMap) {    localUnregNtfList=new ArrayList<MBeanServerNotification>(myUnregNtfList);    myUnregNtfList=new ArrayList<MBeanServerNotification>();  }  List<ObjectName> obsRefList=new ArrayList<ObjectName>();  Map<ObjectName,Map<String,List<String>>> localMBean2RelIdMap=new HashMap<ObjectName,Map<String,List<String>>>();synchronized (myRefedMBeanObjName2RelIdsMap) {    for (    MBeanServerNotification currNtf : localUnregNtfList) {      ObjectName unregMBeanName=currNtf.getMBeanName();      obsRefList.add(unregMBeanName);      Map<String,List<String>> relIdMap=myRefedMBeanObjName2RelIdsMap.get(unregMBeanName);      localMBean2RelIdMap.put(unregMBeanName,relIdMap);      myRefedMBeanObjName2RelIdsMap.remove(unregMBeanName);    }  }  updateUnregistrationListener(null,obsRefList);  for (  MBeanServerNotification currNtf : localUnregNtfList) {    ObjectName unregMBeanName=currNtf.getMBeanName();    Map<String,List<String>> localRelIdMap=localMBean2RelIdMap.get(unregMBeanName);    for (    Map.Entry<String,List<String>> currRel : localRelIdMap.entrySet()) {      final String currRelId=currRel.getKey();      List<String> localRoleNameList=currRel.getValue();      try {        handleReferenceUnregistration(currRelId,unregMBeanName,localRoleNameList);      } catch (      RelationNotFoundException exc1) {        throw new RuntimeException(exc1.getMessage());      }catch (      RoleNotFoundException exc2) {        throw new RuntimeException(exc2.getMessage());      }    }  }  RELATION_LOGGER.exiting(RelationService.class.getName(),"purgeRelations");  return;}  }
class C{  public static Change bombingUnitDamage(final IntegerMap<Unit> newDamage){  return new BombingUnitDamageChange(newDamage);}  }
class C{  public void deinitialize(){  ((NodeEventTarget)eventTarget).removeEventListenerNS(eventNamespaceURI,eventType,this,false);}  }
class C{  public InlineTempRefactoring(ICompilationUnit unit,CompilationUnit node,int selectionStart,int selectionLength){  Assert.isTrue(selectionStart >= 0);  Assert.isTrue(selectionLength >= 0);  fSelectionStart=selectionStart;  fSelectionLength=selectionLength;  fCu=unit;  fASTRoot=node;  fVariableDeclaration=null;}  }
class C{  public boolean isAllowPositive(){  Object oo=get_Value(COLUMNNAME_IsAllowPositive);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public String[] validBaudRates(){  return new String[]{"38,400 bps"};}  }
class C{  @Override public void roll(int field,boolean increment){  roll(field,increment ? 1 : -1);}  }
class C{  public InternalError(){  super();}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,R>QuadFunction<T5,T6,T7,T8,R> partial8(final T1 t1,final T2 t2,final T3 t3,final T4 t4,final OctFunction<T1,T2,T3,T4,T5,T6,T7,T8,R> octFunc){  return null;}  }
class C{  public static String join(Collection<? extends Object> elements,String jointure){  return elements.stream().map(null).collect(Collectors.joining(jointure));}  }
class C{  public void onTcpWriteable(PseudoTCPBase tcp){  logger.log(Level.FINER,"stream writeable");synchronized (write_notify) {    write_notify.notifyAll();  }  logger.log(Level.FINER,"write notified - now !");}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  public void bindTree(Container ui,int defer,boolean objectLead){  int componentCount=ui.getComponentCount();  for (int iter=0; iter < componentCount; iter++) {    Component c=ui.getComponentAt(iter);    if (c instanceof Container) {      bindTree((Container)c,defer,objectLead);      continue;    }    String bind=c.getCloudBoundProperty();    if (bind != null && bind.length() > 0) {      String attributeName=c.getCloudDestinationProperty();      if (attributeName != null) {        bindProperty(c,bind,attributeName,defer,objectLead);      }    }  }}  }
class C{  protected void doParse() throws ParseException, IOException {  current=reader.read();  skipSpaces();  parsePreserveAspectRatio();}  }
class C{  public DataBufferFloat(int size,int numBanks){  super(STABLE,TYPE_FLOAT,size,numBanks);  bankdata=new float[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new float[size];  }  data=bankdata[0];}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void iterateVar(double delta,double factor) throws SolverTimeoutException {  log.debug("[Loop] Trying increment " + delta + " of "+ realVar.toString());  incrementVar(delta);  double newDist=DistanceEstimator.getDistance(cnstr);  log.debug("[Loop] Old distance: " + this.checkpointedDistance + ", new distance: "+ newDist);  while (distImpr(newDist)) {    if (isFinished()) {      throw new SolverTimeoutException();    }    checkpointVar(newDist);    if (newDist == 0.0) {      return;    }    delta=factor * delta;    log.debug("[Loop] Trying increment " + delta + " of "+ realVar);    incrementVar(delta);    newDist=DistanceEstimator.getDistance(cnstr);  }  log.debug("No improvement on " + realVar);  restoreVar();  log.debug("Final value of this iteration: " + realVar);}  }
class C{  public FilePath(String fileName,@Nullable FilePath child){  this.fileName=fileName;  this.child=child;}  }
class C{  public PLAnimatedDataBase(Object senderValue){  super();  sender=senderValue;  currentStep=0;}  }
class C{  public ArrowBuf newArrowBuf(int offset,int length){  allocator.assertOpen();  return newArrowBuf(offset,length,null);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.667 -0500",hash_original_method="E3AB2A1C4C118761EA0CC20D593A5A78",hash_generated_method="E3C161AA33E9F97B75915A04C7D01B65") Request(String method,HttpHost host,HttpHost proxyHost,String path,InputStream bodyProvider,int bodyLength,EventHandler eventHandler,Map<String,String> headers){  mEventHandler=eventHandler;  mHost=host;  mProxyHost=proxyHost;  mPath=path;  mBodyProvider=bodyProvider;  mBodyLength=bodyLength;  if (bodyProvider == null && !"POST".equalsIgnoreCase(method)) {    mHttpRequest=new BasicHttpRequest(method,getUri());  } else {    mHttpRequest=new BasicHttpEntityEnclosingRequest(method,getUri());    if (bodyProvider != null) {      setBodyProvider(bodyProvider,bodyLength);    }  }  addHeader(HOST_HEADER,getHostPort());  addHeader(ACCEPT_ENCODING_HEADER,"gzip");  addHeaders(headers);}  }
class C{  public static Result testClassifierM(MultiLabelClassifier h,Instances D_test) throws Exception {  int L=D_test.classIndex();  Result result=new Result(D_test.numInstances(),L);  if (h.getDebug())   System.out.print(":- Evaluate ");  if (h instanceof MultiLabelClassifierThreaded) {    ((MultiLabelClassifierThreaded)h).setThreaded(true);    double y[][]=((MultiLabelClassifierThreaded)h).distributionForInstanceM(D_test);    for (int i=0, c=0; i < D_test.numInstances(); i++) {      result.addResult(y[i],D_test.instance(i));    }    if (h.getDebug())     System.out.println(":-");  }  return result;}  }
class C{  public final void automaticallyReleaseConnectionToPool(){  automaticallyReleaseConnectionToPool=true;  if (connection != null && connectionReleased) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  protected <T extends DiscoveredComputeSystemWithAcls>List<NamedElementQueryResultList.NamedElement> listChildrenWithAcls(URI tenantId,Class<T> clzz,String nameField){  List<T> dataObjects=getDiscoveredComputeObjects(tenantId,clzz);  List<NamedElementQueryResultList.NamedElement> elements=new ArrayList<NamedElementQueryResultList.NamedElement>(dataObjects.size());  for (  T dataObject : dataObjects) {    Object name=DataObjectUtils.getPropertyValue(Vcenter.class,dataObject,nameField);    elements.add(NamedElementQueryResultList.NamedElement.createElement(dataObject.getId(),name == null ? "" : name.toString()));  }  return elements;}  }
class C{  public void paintArrowButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  if (context.getComponent().getComponentOrientation().isLeftToRight()) {    paintBackground(context,g,x,y,w,h,null);  } else {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(-1,1);    transform.translate(-w,0);    paintBackground(context,g,0,0,w,h,transform);  }}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {}  }
class C{  protected void assertStartsWith(String text,String expectedStart){  if (!text.startsWith(expectedStart)) {    fail("[" + text + "] does not start with: ["+ expectedStart+ "]");  }}  }
class C{  private static Service addVersionInformation(Service service){  ClientVersionHandler versionHandler=new ClientVersionHandler();  return versionHandler.addVersionInformationToClient(service);}  }
class C{  public ToolbarViewResourceAdapter(View toolbarContainer,Toolbar toolbar){  super(toolbarContainer);  mToolbarContainer=toolbarContainer;  mToolbar=toolbar;  mToolbarActualHeightPx=toolbarContainer.getResources().getDimensionPixelSize(R.dimen.control_container_height);}  }
class C{  public Object decode(Object pObject) throws DecoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof String) {    return decode((String)pObject);  } else {    throw new DecoderException("Objects of type " + pObject.getClass().getName() + " cannot be decoded using Q codec");  }}  }
class C{  @Override protected boolean sameFile(URL u1,URL u2){  if (!u1.getProtocol().equals("jar") || !u2.getProtocol().equals("jar"))   return false;  String file1=u1.getFile();  String file2=u2.getFile();  int sep1=file1.indexOf(separator);  int sep2=file2.indexOf(separator);  if (sep1 == -1 || sep2 == -1) {    return super.sameFile(u1,u2);  }  String entry1=file1.substring(sep1 + 2);  String entry2=file2.substring(sep2 + 2);  if (!entry1.equals(entry2))   return false;  URL enclosedURL1=null, enclosedURL2=null;  try {    enclosedURL1=new URL(file1.substring(0,sep1));    enclosedURL2=new URL(file2.substring(0,sep2));  } catch (  MalformedURLException unused) {    return super.sameFile(u1,u2);  }  if (!super.sameFile(enclosedURL1,enclosedURL2)) {    return false;  }  return true;}  }
class C{  public static int compare(final String filename1,final String filename2){  EventsComparator comparator=new EventsComparator();  CyclicBarrier doComparison=new CyclicBarrier(2,comparator);  Worker w1=new Worker(filename1,doComparison);  Worker w2=new Worker(filename2,doComparison);  comparator.setWorkers(w1,w2);  w1.start();  w2.start();  try {    w1.join();  } catch (  InterruptedException e) {    e.printStackTrace();  }  try {    w2.join();  } catch (  InterruptedException e) {    e.printStackTrace();  }  int retCode=comparator.retCode;  if (retCode == CODE_FILES_ARE_EQUAL) {    log.info("Event files are semantic equivalent.");  } else {    log.warn("Event files differ.");  }  return retCode;}  }
class C{  @Override public boolean isRequiringUpdateAllBloomFilter(){  return !watchedScripts.isEmpty();}  }
class C{  public GraticuleLayer(){  boxy=true;  setName("Graticule");  setRenderPolicy(new BufferedImageRenderPolicy(this));}  }
class C{  public void rollback(){  currentTransactionName=null;  cleanTempTables(false);  if (autoCommitAtTransactionEnd) {    autoCommit=true;    autoCommitAtTransactionEnd=false;  }  endTransaction();  List<SQLException> rollbackExceptions=New.arrayList();  for (  Map.Entry<String,Connection> entry : connectionHolder.entrySet()) {    try {      entry.getValue().rollback();    } catch (    SQLException ex) {      rollbackExceptions.add(ex);    }  }  if (!rollbackExceptions.isEmpty()) {    throw DbException.convert(rollbackExceptions.get(0));  }}  }
class C{  public Instances kNearestNeighbours(Instance target,int k) throws Exception {  checkMissing(target);  if (m_Stats != null)   m_Stats.searchStart();  MyHeap heap=new MyHeap(k);  findNearestNeighbours(target,m_Root,k,heap,0.0);  if (m_Stats != null)   m_Stats.searchFinish();  Instances neighbours=new Instances(m_Instances,(heap.size() + heap.noOfKthNearest()));  m_DistanceList=new double[heap.size() + heap.noOfKthNearest()];  int[] indices=new int[heap.size() + heap.noOfKthNearest()];  int i=indices.length - 1;  MyHeapElement h;  while (heap.noOfKthNearest() > 0) {    h=heap.getKthNearest();    indices[i]=h.index;    m_DistanceList[i]=h.distance;    i--;  }  while (heap.size() > 0) {    h=heap.get();    indices[i]=h.index;    m_DistanceList[i]=h.distance;    i--;  }  m_DistanceFunction.postProcessDistances(m_DistanceList);  for (int idx=0; idx < indices.length; idx++) {    neighbours.add(m_Instances.instance(indices[idx]));  }  return neighbours;}  }
class C{  private boolean hasSpace(Resource resource){  Resource usedResources=this.getTotalUsedResources();  long newRam=usedResources.getRam() + resource.getRam();  double newCpu=usedResources.getCpu() + resource.getCpu();  long newDisk=usedResources.getDisk() + resource.getDisk();  return PackingUtils.increaseBy(newRam,paddingPercentage) <= this.capacity.getRam() && Math.round(PackingUtils.increaseBy(newCpu,paddingPercentage)) <= this.capacity.getCpu() && PackingUtils.increaseBy(newDisk,paddingPercentage) <= this.capacity.getDisk();}  }
class C{  private void fillToGalleryBottom(){  int itemSpacing=mSpacing;  int galleryBottom=getBottom() - getTop() - getPaddingBottom();  int numChildren=getChildCount();  int numItems=mItemCount;  View prevIterationView=getChildAt(numChildren - 1);  int curPosition;  int curTopEdge;  if (prevIterationView != null) {    curPosition=mFirstPosition + numChildren;    curTopEdge=prevIterationView.getBottom() + itemSpacing;  } else {    mFirstPosition=curPosition=mItemCount - 1;    curTopEdge=getPaddingTop();    mShouldStopFling=true;  }  while (curTopEdge < galleryBottom && curPosition < numItems) {    prevIterationView=makeAndAddVerticalView(curPosition,curPosition - mSelectedPosition,curTopEdge,true);    curTopEdge=prevIterationView.getBottom() + itemSpacing;    curPosition++;  }  if (isScrollCycle()) {    curPosition=curPosition % numItems;    while (curTopEdge <= galleryBottom && getChildCount() < numItems) {      prevIterationView=makeAndAddVerticalView(curPosition,curPosition - mSelectedPosition,curTopEdge,true);      curTopEdge=prevIterationView.getBottom() + itemSpacing;      curPosition++;    }  }}  }
class C{  protected void sequence_VariableBinding(ISerializationContext context,VariableBinding semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public String logoff(){  HttpServletRequest request=invalidateSession();  if (isMarketplaceSet(request)) {    return OUTCOME_MARKETPLACE_LOGOUT;  }  return OUTCOME_LOGIN;}  }
