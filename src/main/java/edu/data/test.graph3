class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200466,skilltarget,skillname);}  }
class C{  public WallPostQuery services(String value){  return unsafeParam("services",value);}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public static int read(FileDescriptor fd,byte[] bytes,int byteOffset,int byteCount) throws IOException {  ArrayUtils.checkOffsetAndCount(bytes.length,byteOffset,byteCount);  if (byteCount == 0) {    return 0;  }  try {    int readCount=Os.read(fd,bytes,byteOffset,byteCount);    if (readCount == 0) {      return -1;    }    return readCount;  } catch (  ErrnoException errnoException) {    if (errnoException.errno == OsConstants.EAGAIN) {      return 0;    }    throw new IOException(errnoException);  }}  }
class C{  private void parseIfStatement(){  PsiBuilder.Marker marker=builder.mark();  parseIfStatementPart(TokenKind.IF,BuildElementTypes.IF_PART,true);  while (currentToken() == TokenKind.ELIF) {    parseIfStatementPart(TokenKind.ELIF,BuildElementTypes.ELSE_IF_PART,true);  }  if (currentToken() == TokenKind.ELSE) {    parseIfStatementPart(TokenKind.ELSE,BuildElementTypes.ELSE_PART,false);  }  marker.done(BuildElementTypes.IF_STATEMENT);}  }
class C{  public boolean equals(Object obj){  return (obj instanceof Table) && dataMap.equals(obj);}  }
class C{  public static Paint newBackgroundPaint(Context context){  final Paint paint=new Paint();  paint.setColor(Color.parseColor(DEFAULT_BACKGROUND_COLOR_ID));  return paint;}  }
class C{  public boolean isPropertySet(Object property){  return false;}  }
class C{  public WallPostQuery fromGroup(Boolean value){  return unsafeParam("from_group",value);}  }
class C{  protected void validateClusterOwnership(String cluster) throws WebApplicationException {  if (cluster.equals(Namespaces.GLOBAL_CLUSTER)) {    return;  }  if (!pulsar().getConfiguration().isAuthorizationEnabled()) {    return;  }  try {    if (!pulsar().getConfigurationCache().clustersListCache().get().contains(cluster)) {      log.warn("[{}] Cluster does not exist: requested={}, registered={}",clientAppId(),cluster,pulsar().getConfigurationCache().clustersListCache().get());      throw new RestException(Status.NOT_FOUND,"Cluster does not exist: cluster=" + cluster);    }    if (!config().getClusterName().equals(cluster)) {      ClusterData clusterData=pulsar().getConfigurationCache().clustersCache().get(path("clusters",cluster));      URL webUrl;      if (config().isTlsEnabled() && !clusterData.getServiceUrlTls().isEmpty()) {        webUrl=new URL(clusterData.getServiceUrlTls());      } else {        webUrl=new URL(clusterData.getServiceUrl());      }      URI redirect=UriBuilder.fromUri(uri.getRequestUri()).host(webUrl.getHost()).port(webUrl.getPort()).build();      log.debug("[{}] Redirecting the rest call to {}: cluster={}",clientAppId(),redirect,cluster);      throw new WebApplicationException(Response.temporaryRedirect(redirect).build());    }  } catch (  WebApplicationException wae) {    throw wae;  }catch (  Exception e) {    throw new RestException(e);  }}  }
class C{  protected boolean left(Vector2 a,Vector2 b,Vector2 p){  return Segment.getLocation(p,a,b) > 0;}  }
class C{  public static int hash(long value){  return ((int)(value ^ (value >>> 32))) * 31;}  }
class C{  public CMAny(int type,String uri,int position){  super(type);  fType=type;  fURI=uri;  fPosition=position;}  }
class C{  private static int scanHexSequence(String address,int index,int end,int[] counter){  char testChar;  int numDigits=0;  int start=index;  for (; index < end; ++index) {    testChar=address.charAt(index);    if (testChar == ':') {      if (numDigits > 0 && ++counter[0] > 8) {        return -1;      }      if (numDigits == 0 || ((index + 1 < end) && address.charAt(index + 1) == ':')) {        return index;      }      numDigits=0;    } else     if (!isHex(testChar)) {      if (testChar == '.' && numDigits < 4 && numDigits > 0 && counter[0] <= 6) {        int back=index - numDigits - 1;        return (back >= start) ? back : (back + 1);      }      return -1;    } else     if (++numDigits > 4) {      return -1;    }  }  return (numDigits > 0 && ++counter[0] <= 8) ? end : -1;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200679,skillcaster,skillname);}  }
class C{  private void createMethodDecl(polyglot.ast.MethodDecl method){  String name=createName(method);  ArrayList parameters=createParameters(method);  ArrayList<SootClass> exceptions=createExceptions(method);  soot.SootMethod sootMethod=createSootMethod(name,method.flags(),method.returnType().type(),parameters,exceptions);  finishProcedure(method,sootMethod);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public boolean kindIsOneOf(List<Kind> kinds){  if (kind != null) {    return kind.isOneOf(kinds);  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Resurrect_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200709,skillcaster,skillname);}  }
class C{  private void updateOkButtonState(){  AlertDialog d=(AlertDialog)getDialog();  if (d != null) {    if (talismanSkillContainers[0].getSkillTree() == null || !talismanSkillContainers[0].skillPointsIsValid()) {      d.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled(false);      return;    } else     if (talismanSkillContainers[1].getSkillTree() != null) {      if (!talismanSkillContainers[1].skillPointsIsValid() || talismanSkillContainers[0].getSkillTree().getId() == talismanSkillContainers[1].getSkillTree().getId()) {        d.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled(false);        return;      }    }    d.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled(true);  }}  }
class C{  private static String extractValueForConversion(final SubstringFormatterDetails details,final String text) throws ConversionException {  final int startTagIndex=text.indexOf(details.getStartTag());  if (startTagIndex != -1) {    final int endTagIndex=text.indexOf(details.getEndTag(),startTagIndex);    if (endTagIndex != -1) {      return text.substring(startTagIndex + details.getStartTag().length(),endTagIndex);    }  }  throw new ConversionException("Cannot find tags");}  }
class C{  static double slowCos(final double x,final double result[]){  final double xs[]=new double[2];  final double ys[]=new double[2];  final double facts[]=new double[2];  final double as[]=new double[2];  split(x,xs);  ys[0]=ys[1]=0.0;  for (int i=FACT.length - 1; i >= 0; i--) {    splitMult(xs,ys,as);    ys[0]=as[0];    ys[1]=as[1];    if ((i & 1) != 0) {      continue;    }    split(FACT[i],as);    splitReciprocal(as,facts);    if ((i & 2) != 0) {      facts[0]=-facts[0];      facts[1]=-facts[1];    }    splitAdd(ys,facts,as);    ys[0]=as[0];    ys[1]=as[1];  }  if (result != null) {    result[0]=ys[0];    result[1]=ys[1];  }  return ys[0] + ys[1];}  }
class C{  public void java_lang_System_initProperties(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable sysProps=helper.staticField("java.lang.System","props");  helper.assign(returnVar,sysProps);  helper.assign(sysProps,params[0]);}  }
class C{  public WaitForAnyListener(int numberOfResults,AsyncFutureListener<T> listener){  this.numberOfResults=numberOfResults;  this.listener=listener;}  }
class C{  public static InputStream needStream(String propertyName) throws NoSuchPropertyException, FileNotFoundException, MaryConfigurationException {  MaryProperties.needProperty(propertyName);  return getStream(propertyName);}  }
class C{  public static String[][] ISO8859_1_ESCAPE(){  return ISO8859_1_ESCAPE.clone();}  }
class C{  public Result decodeWithState(BinaryBitmap image) throws NotFoundException {  if (readers == null) {    setHints(null);  }  return decodeInternal(image);}  }
class C{  public static boolean isPercentageDelta(String string){  String s=string.trim();  if (s.length() < 3)   return false;  return s.substring(s.length() - 1).equals("%") && isNumberDelta(s.substring(0,s.length() - 1));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200828,skillcaster,num0,skillname);}  }
class C{  @Override public String toString(){  return "Entry, xIndex: " + mXIndex + " val (sum): "+ getVal();}  }
class C{  public CommandResult onCommand(Sender sender,String label,List<String> args){  if (args.size() == 0) {    sendCommandUsage(sender,label);    return CommandResult.INVALID_ARGS;  }  Optional<MainCommand> o=mainCommands.stream().filter(null).limit(1).findAny();  if (!o.isPresent()) {    sendCommandUsage(sender,label);    return CommandResult.INVALID_ARGS;  }  final MainCommand main=o.get();  if (!main.isAuthorized(sender)) {    sendCommandUsage(sender,label);    return CommandResult.NO_PERMISSION;  }  if (main.getRequiredArgsLength() == 0) {    try {      return main.execute(plugin,sender,null,label);    } catch (    Exception e) {      e.printStackTrace();      return CommandResult.FAILURE;    }  }  if (args.size() == 1) {    main.sendUsage(sender,label);    return CommandResult.INVALID_ARGS;  }  List<String> arguments=new ArrayList<>(args);  handleRewrites(arguments);  try {    return main.execute(plugin,sender,arguments.subList(1,arguments.size()),label);  } catch (  Exception e) {    e.printStackTrace();    return CommandResult.FAILURE;  }}  }
class C{  public DocsAddQuery add(UserActor actor,int ownerId,int docId){  return new DocsAddQuery(getClient(),actor,ownerId,docId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SERVER_SHUTDOWN(String value0){  return new SM_SYSTEM_MESSAGE(1300642,value0);}  }
class C{  public NewsfeedSaveListQuery(VkApiClient client,UserActor actor,String title){  super(client,"newsfeed.saveList",Integer.class);  accessToken(actor.getAccessToken());  title(title);}  }
class C{  public Vector3f addLocal(Vector3f vec){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  x+=vec.x;  y+=vec.y;  z+=vec.z;  return this;}  }
class C{  synchronized public boolean update(String expected){  if (!cookie.equals(expected))   return false;  String newCookie;  do {    newCookie=Long.toHexString(RANDOM.nextLong());  } while (cookie.equals(newCookie));  cookie=newCookie;  return true;}  }
class C{  public static boolean acceptsStringInitialValue(SootField field){  if (field.getType() instanceof RefType) {    SootClass fieldClass=((RefType)field.getType()).getSootClass();    SootClass stringClass=Scene.v().getSootClassUnsafe("java.lang.String");    if (stringClass != null) {      Hierarchy h=Scene.v().getActiveHierarchy();      return h.isClassSubclassOfIncluding(fieldClass,stringClass);    }  }  return false;}  }
class C{  public static void recover(File file){  try {    ZipInputStream zip=new ZipInputStream(new FileInputStream(file));    zip.getNextEntry();    BufferedReader in=new BufferedReader(new InputStreamReader(zip));    Set<String> c1=getCollections();    log.debug("collections=" + c1);    for (    String table : c1) {      MongoCollection<Document> c2=getCollection(table);      try {        c2.drop();      } catch (      Exception e) {        log.error("table=" + table,e);      }    }    String line=in.readLine();    while (line != null) {      _recover(line);      line=in.readLine();    }    zip.closeEntry();    in.close();  } catch (  Exception e) {    log.error(e.getMessage(),e);  }}  }
class C{  private void endAllActions(){  this.selectBodyAction.end();  this.editBodyAction.end();  this.selectFixtureAction.end();  this.moveBodyAction.end();  this.rotateBodyAction.end();  this.moveFixtureAction.end();  this.rotateFixtureAction.end();}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  GrimpBody body=(GrimpBody)b;  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "] Folding constructors...");  Chain units=body.getUnits();  List<Unit> stmtList=new ArrayList<Unit>();  stmtList.addAll(units);  Iterator<Unit> it=stmtList.iterator();  LocalUses localUses=LocalUses.Factory.newLocalUses(b);  while (it.hasNext()) {    Stmt s=(Stmt)it.next();    if (!(s instanceof AssignStmt))     continue;    Value lhs=((AssignStmt)s).getLeftOp();    if (!(lhs instanceof Local))     continue;    Value rhs=((AssignStmt)s).getRightOp();    if (!(rhs instanceof NewExpr))     continue;    List lu=localUses.getUsesOf(s);    Iterator luIter=lu.iterator();    boolean MadeNewInvokeExpr=false;    while (luIter.hasNext()) {      Unit use=((UnitValueBoxPair)(luIter.next())).unit;      if (!(use instanceof InvokeStmt))       continue;      InvokeStmt is=(InvokeStmt)use;      if (!(is.getInvokeExpr() instanceof SpecialInvokeExpr) || lhs != ((SpecialInvokeExpr)is.getInvokeExpr()).getBase())       continue;      SpecialInvokeExpr oldInvoke=((SpecialInvokeExpr)is.getInvokeExpr());      LinkedList invokeArgs=new LinkedList();      for (int i=0; i < oldInvoke.getArgCount(); i++)       invokeArgs.add(oldInvoke.getArg(i));      AssignStmt constructStmt=Grimp.v().newAssignStmt((AssignStmt)s);      constructStmt.setRightOp(Grimp.v().newNewInvokeExpr(((NewExpr)rhs).getBaseType(),oldInvoke.getMethodRef(),invokeArgs));      MadeNewInvokeExpr=true;      use.redirectJumpsToThisTo(constructStmt);      units.insertBefore(constructStmt,use);      units.remove(use);    }    if (MadeNewInvokeExpr) {      units.remove(s);    }  }}  }
class C{  public String toFeatureString(FeatureVector fv){  if (numByteFeatures != fv.getNumberOfByteFeatures() || numShortFeatures != fv.getNumberOfShortFeatures() || numContinuousFeatures != fv.getNumberOfContinuousFeatures())   throw new IllegalArgumentException("Feature vector '" + fv + "' is inconsistent with feature definition");  StringBuilder buf=new StringBuilder();  for (int i=0; i < numByteFeatures; i++) {    if (buf.length() > 0)     buf.append(" ");    buf.append(getFeatureValueAsString(i,fv.getByteFeature(i)));  }  for (int i=numByteFeatures; i < numByteFeatures + numShortFeatures; i++) {    if (buf.length() > 0)     buf.append(" ");    buf.append(getFeatureValueAsString(i,fv.getShortFeature(i)));  }  for (int i=numByteFeatures + numShortFeatures; i < numByteFeatures + numShortFeatures + numContinuousFeatures; i++) {    if (buf.length() > 0)     buf.append(" ");    buf.append(fv.getContinuousFeature(i));  }  return buf.toString();}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigMarker copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigMarker(fieldConfigBase.getCommonData(),this.fillFieldConfig,this.strokeFieldConfig,this.symbolSelectionField);  }  return copy;}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public void load(IndexState indexState,JSONObject saveState) throws IOException {  ShardState shardState=indexState.getShard(0);  for (  Map.Entry<String,Object> ent : saveState.entrySet()) {    String suggestName=ent.getKey();    JSONObject params=(JSONObject)ent.getValue();    String jsonOrig=params.toString();    Request r=new Request(null,null,params,TYPE);    r.getString("suggestName");    Request source=r.getStruct("source");    if (source.hasParam("localFile")) {      source.getString("localFile");    } else {      Request searcher=source.getStruct("searcher");      if (searcher.hasParam("indexGen")) {        searcher.getLong("indexGen");      } else {        searcher.getString("snapshot");      }      source.getString("suggestField");      if (source.hasParam("weightField")) {        source.getString("weightField");      } else {        source.getString("weightExpression");      }      if (source.hasParam("payloadField")) {        source.getString("payloadField");      }    }    Lookup suggester=getSuggester(indexState,suggestName,r);    assert !Request.anythingLeft(params);    if ((suggester instanceof AnalyzingInfixSuggester) == false) {      try (IndexInput in=shardState.origIndexDir.openInput("suggest." + suggestName,IOContext.DEFAULT)){        suggester.load(in);      }     }    try {      indexState.addSuggest(suggestName,(JSONObject)JSONValue.parseStrict(jsonOrig));    } catch (    ParseException pe) {      throw new RuntimeException(pe);    }  }}  }
class C{  public void configResource(ResourceLoader resourceLoader){}  }
class C{  public static boolean isInjectionMethod(Method method){  return method.getReturnType().equals(Void.TYPE) && method.getParameterTypes().length == 1;}  }
class C{  public static FeatureProcessorManager determineBestFeatureProcessorManager(Voice voice){  FeatureProcessorManager mgr=getFeatureProcessorManager(voice);  if (mgr == null) {    mgr=determineBestFeatureProcessorManager(voice.getLocale());  }  return mgr;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATKDrain_Instant_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200411,num0,skillname);}  }
class C{  public AsyncCatchOptions(PokemonGo api){  this.api=api;  this.useRazzBerry=0;  this.useBestPokeball=false;  this.skipMasterBall=false;  this.pokeBall=POKEBALL;  this.strictBallType=false;  this.smartSelect=false;  this.probability=0;  this.normalizedHitPosition=1.0;  this.normalizedReticleSize=1.95 + Math.random() * 0.05;  this.spinModifier=0.85 + Math.random() * 0.15;}  }
class C{  private void handleStaticInitializerBlocks(soot.SootMethod sootMethod){  ArrayList<Block> staticInitializerBlocks=((soot.javaToJimple.PolyglotMethodSource)sootMethod.getSource()).getStaticInitializerBlocks();  if (staticInitializerBlocks != null) {    Iterator<Block> staticInitBlocksIt=staticInitializerBlocks.iterator();    while (staticInitBlocksIt.hasNext()) {      createBlock(staticInitBlocksIt.next());    }  }}  }
class C{  protected void deleteUserFromLookUp(Experiment.ID experimentID,User.ID userID,Context context){  final String CQL="delete from user_assignment_look_up where user_id = ? and context = ? and experiment_id = ?";  try {    PreparedCqlQuery<ExperimentsKeyspace.UserAssignmentComposite,String> query=driver.getKeyspace().prepareQuery(keyspace.userAssignmentCF()).withCql(CQL).asPreparedStatement().withByteBufferValue(userID,UserIDSerializer.get()).withStringValue(context.getContext()).withByteBufferValue(experimentID,ExperimentIDSerializer.get());    query.execute();  } catch (  ConnectionException e) {    throw new RepositoryException("Could not delete user assignment for Experiment:" + experimentID + " and User "+ userID,e);  }}  }
class C{  public static Charset readCharsetInContentTypeHeader(String contentTypeHeader) throws UnsupportedCharsetException {  if (contentTypeHeader == null || contentTypeHeader.isEmpty()) {    return null;  }  MediaType mediaType;  try {    mediaType=MediaType.parse(contentTypeHeader);  } catch (  IllegalArgumentException e) {    log.info("Unable to parse Content-Type header: {}. Content-Type header will be ignored.",contentTypeHeader,e);    return null;  }  try {    return mediaType.charset().orNull();  } catch (  java.nio.charset.UnsupportedCharsetException e) {    throw new UnsupportedCharsetException(e);  }}  }
class C{  public boolean containsId(int id){  return id2Node.keySet().contains(id);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_CANT_CAST_THIS_SKILL_IN_CURRENT_STANCE(String value0){  return new SM_SYSTEM_MESSAGE(1300071,value0);}  }
class C{  private void drawPart(Canvas canvas,PagePart part){  RectF pageRelativeBounds=part.getPageRelativeBounds();  Bitmap renderedBitmap=part.getRenderedBitmap();  if (renderedBitmap.isRecycled()) {    return;  }  float localTranslationX=0;  float localTranslationY=0;  if (swipeVertical)   localTranslationY=toCurrentScale(part.getUserPage() * optimalPageHeight); else   localTranslationX=toCurrentScale(part.getUserPage() * optimalPageWidth);  canvas.translate(localTranslationX,localTranslationY);  Rect srcRect=new Rect(0,0,renderedBitmap.getWidth(),renderedBitmap.getHeight());  float offsetX=toCurrentScale(pageRelativeBounds.left * optimalPageWidth);  float offsetY=toCurrentScale(pageRelativeBounds.top * optimalPageHeight);  float width=toCurrentScale(pageRelativeBounds.width() * optimalPageWidth);  float height=toCurrentScale(pageRelativeBounds.height() * optimalPageHeight);  RectF dstRect=new RectF((int)offsetX,(int)offsetY,(int)(offsetX + width),(int)(offsetY + height));  float translationX=currentXOffset + localTranslationX;  float translationY=currentYOffset + localTranslationY;  if (translationX + dstRect.left >= getWidth() || translationX + dstRect.right <= 0 || translationY + dstRect.top >= getHeight() || translationY + dstRect.bottom <= 0) {    canvas.translate(-localTranslationX,-localTranslationY);    return;  }  canvas.drawBitmap(renderedBitmap,srcRect,dstRect,paint);  if (Constants.DEBUG_MODE) {    debugPaint.setColor(part.getUserPage() % 2 == 0 ? Color.RED : Color.BLUE);    canvas.drawRect(dstRect,debugPaint);  }  canvas.translate(-localTranslationX,-localTranslationY);}  }
class C{  public static byte[] packByteBufferIntoSingleByteArray(ByteBuffer[] byteBufferArr){  if (null == byteBufferArr || byteBufferArr.length == 0) {    return null;  }  int noOfCol=byteBufferArr.length;  short offsetLen=(short)(noOfCol * 2);  int totalBytes=calculateTotalBytes(byteBufferArr) + offsetLen;  ByteBuffer buffer=ByteBuffer.allocate(totalBytes);  buffer.putShort(offsetLen);  for (int index=0; index < byteBufferArr.length - 1; index++) {    ByteBuffer individualCol=byteBufferArr[index];    int noOfBytes=individualCol.capacity();    buffer.putShort((short)(offsetLen + noOfBytes));    offsetLen+=noOfBytes;    individualCol.rewind();  }  for (int index=0; index < byteBufferArr.length; index++) {    ByteBuffer individualCol=byteBufferArr[index];    buffer.put(individualCol.array());  }  buffer.rewind();  return buffer.array();}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  String qNameLower=qName.toLowerCase();switch (qNameLower) {case XMLConstants.METHOD_TAG:    if (attributes != null) {      methodSignature=attributes.getValue(XMLConstants.SIGNATURE_ATTRIBUTE).trim();      methodCategory=attributes.getValue(XMLConstants.CATEGORY_ATTRIBUTE).trim();    }  break;case XMLConstants.ACCESSPATH_TAG:if (attributes != null) {  String tempStr=attributes.getValue(XMLConstants.IS_SOURCE_ATTRIBUTE);  if (tempStr != null && !tempStr.isEmpty())   isSource=tempStr.equalsIgnoreCase(XMLConstants.TRUE);  tempStr=attributes.getValue(XMLConstants.IS_SINK_ATTRIBUTE);  if (tempStr != null && !tempStr.isEmpty())   isSink=tempStr.equalsIgnoreCase(XMLConstants.TRUE);  tempStr=attributes.getValue(XMLConstants.LENGTH_ATTRIBUTE);  if (tempStr != null && !tempStr.isEmpty()) {    pathElements=new String[Integer.parseInt(tempStr)];    pathElementTypes=new String[Integer.parseInt(tempStr)];  }}break;case XMLConstants.BASE_TAG:accessPathParentElement=qNameLower;break;case XMLConstants.RETURN_TAG:accessPathParentElement=qNameLower;break;case XMLConstants.PARAM_TAG:if (methodSignature != null && attributes != null) {String tempStr=attributes.getValue(XMLConstants.INDEX_ATTRIBUTE);if (tempStr != null && !tempStr.isEmpty()) paramIndex=Integer.parseInt(tempStr);tempStr=attributes.getValue(XMLConstants.TYPE_ATTRIBUTE);if (tempStr != null && !tempStr.isEmpty()) paramTypes.add(tempStr.trim());}accessPathParentElement=qNameLower;break;case XMLConstants.PATHELEMENT_TAG:if (methodSignature != null && attributes != null) {int pathElementIdx=-1;String tempStr=attributes.getValue(XMLConstants.INDEX_ATTRIBUTE);if (tempStr != null && !tempStr.isEmpty()) {pathElementIdx=Integer.parseInt(tempStr.trim());tempStr=attributes.getValue(XMLConstants.FIELD_ATTRIBUTE);if (tempStr != null && !tempStr.isEmpty()) {if (pathElementIdx >= pathElements.length) throw new RuntimeException("Path element index out of range");pathElements[pathElementIdx]=tempStr;}tempStr=attributes.getValue(XMLConstants.TYPE_ATTRIBUTE);if (tempStr != null && !tempStr.isEmpty()) {if (pathElementIdx >= pathElementTypes.length) throw new RuntimeException("Path element type index out of range");pathElementTypes[pathElementIdx]=tempStr;}}}break;}}  }
class C{  public void onFindToolbarShown(){}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new List(),1);}  }
class C{  @Override public boolean isFixedFacet(short facetName){  if ((fFixedFacet & facetName) != 0)   return true;  if (fValidationDV == DV_INTEGER)   return facetName == FACET_FRACTIONDIGITS;  return false;}  }
class C{  public PhotosEditCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length == 0) {    System.out.println("\nUsage: ExperimentDemo\n" + "\t   -classifier <classifier incl. parameters>\n" + "\t   -exptype <classification|regression>\n"+ "\t   -splittype <crossvalidation|randomsplit>\n"+ "\t   -runs <# of runs>\n"+ "\t   -folds <folds for CV>\n"+ "\t   -percentage <percentage for randomsplit>\n"+ "\t   -result <ARFF file for storing the results>\n"+ "\t   -t dataset (can be supplied multiple times)\n");    System.exit(1);  }  System.out.println("Setting up...");  Experiment exp=new Experiment();  exp.setPropertyArray(new Classifier[0]);  exp.setUsePropertyIterator(true);  String option;  option=Utils.getOption("exptype",args);  if (option.length() == 0)   throw new IllegalArgumentException("No experiment type provided!");  SplitEvaluator se=null;  Classifier sec=null;  boolean classification=false;  if (option.equals("classification")) {    classification=true;    se=new ClassifierSplitEvaluator();    sec=((ClassifierSplitEvaluator)se).getClassifier();  } else   if (option.equals("regression")) {    se=new RegressionSplitEvaluator();    sec=((RegressionSplitEvaluator)se).getClassifier();  } else {    throw new IllegalArgumentException("Unknown experiment type '" + option + "'!");  }  option=Utils.getOption("splittype",args);  if (option.length() == 0)   throw new IllegalArgumentException("No split type provided!");  if (option.equals("crossvalidation")) {    CrossValidationResultProducer cvrp=new CrossValidationResultProducer();    option=Utils.getOption("folds",args);    if (option.length() == 0)     throw new IllegalArgumentException("No folds provided!");    cvrp.setNumFolds(Integer.parseInt(option));    cvrp.setSplitEvaluator(se);    PropertyNode[] propertyPath=new PropertyNode[2];    try {      propertyPath[0]=new PropertyNode(se,new PropertyDescriptor("splitEvaluator",CrossValidationResultProducer.class),CrossValidationResultProducer.class);      propertyPath[1]=new PropertyNode(sec,new PropertyDescriptor("classifier",se.getClass()),se.getClass());    } catch (    IntrospectionException e) {      e.printStackTrace();    }    exp.setResultProducer(cvrp);    exp.setPropertyPath(propertyPath);  } else   if (option.equals("randomsplit")) {    RandomSplitResultProducer rsrp=new RandomSplitResultProducer();    rsrp.setRandomizeData(true);    option=Utils.getOption("percentage",args);    if (option.length() == 0)     throw new IllegalArgumentException("No percentage provided!");    rsrp.setTrainPercent(Double.parseDouble(option));    rsrp.setSplitEvaluator(se);    PropertyNode[] propertyPath=new PropertyNode[2];    try {      propertyPath[0]=new PropertyNode(se,new PropertyDescriptor("splitEvaluator",RandomSplitResultProducer.class),RandomSplitResultProducer.class);      propertyPath[1]=new PropertyNode(sec,new PropertyDescriptor("classifier",se.getClass()),se.getClass());    } catch (    IntrospectionException e) {      e.printStackTrace();    }    exp.setResultProducer(rsrp);    exp.setPropertyPath(propertyPath);  } else {    throw new IllegalArgumentException("Unknown split type '" + option + "'!");  }  option=Utils.getOption("runs",args);  if (option.length() == 0)   throw new IllegalArgumentException("No runs provided!");  exp.setRunLower(1);  exp.setRunUpper(Integer.parseInt(option));  option=Utils.getOption("classifier",args);  if (option.length() == 0)   throw new IllegalArgumentException("No classifier provided!");  String[] options=Utils.splitOptions(option);  String classname=options[0];  options[0]="";  Classifier c=(Classifier)Utils.forName(Classifier.class,classname,options);  exp.setPropertyArray(new Classifier[]{c});  boolean data=false;  DefaultListModel model=new DefaultListModel();  do {    option=Utils.getOption("t",args);    if (option.length() > 0) {      File file=new File(option);      if (!file.exists())       throw new IllegalArgumentException("File '" + option + "' does not exist!");      data=true;      model.addElement(file);    }  } while (option.length() > 0);  if (!data)   throw new IllegalArgumentException("No data files provided!");  exp.setDatasets(model);  option=Utils.getOption("result",args);  if (option.length() == 0)   throw new IllegalArgumentException("No result file provided!");  InstancesResultListener irl=new InstancesResultListener();  irl.setOutputFile(new File(option));  exp.setResultListener(irl);  System.out.println("Initializing...");  exp.initialize();  System.out.println("Running...");  exp.runExperiment();  System.out.println("Finishing...");  exp.postProcess();  System.out.println("Evaluating...");  PairedTTester tester=new PairedCorrectedTTester();  Instances result=new Instances(new BufferedReader(new FileReader(irl.getOutputFile())));  tester.setInstances(result);  tester.setSortColumn(-1);  tester.setRunColumn(result.attribute("Key_Run").index());  if (classification)   tester.setFoldColumn(result.attribute("Key_Fold").index());  tester.setResultsetKeyColumns(new Range("" + (result.attribute("Key_Dataset").index() + 1)));  tester.setDatasetKeyColumns(new Range("" + (result.attribute("Key_Scheme").index() + 1) + ","+ (result.attribute("Key_Scheme_options").index() + 1)+ ","+ (result.attribute("Key_Scheme_version_ID").index() + 1)));  tester.setResultMatrix(new ResultMatrixPlainText());  tester.setDisplayedResultsets(null);  tester.setSignificanceLevel(0.05);  tester.setShowStdDevs(true);  if (classification)   tester.multiResultsetFull(0,result.attribute("Percent_correct").index()); else   tester.multiResultsetFull(0,result.attribute("Correlation_coefficient").index());  System.out.println("\nResult:");  ResultMatrix matrix=tester.getResultMatrix();  for (int i=0; i < matrix.getColCount(); i++) {    System.out.println(matrix.getColName(i));    System.out.println("    Perc. correct: " + matrix.getMean(i,0));    System.out.println("    StdDev: " + matrix.getStdDev(i,0));  }}  }
class C{  public String generate(String appName,String clientIp,Integer clientPid){  return MD5.generate(appName + clientIp + clientPid,false);}  }
class C{  private void invalidateFromTouch(int minY,int maxY){  invalidate(0,(int)(minY - (mTouchLabelTextSize + mTouchLabelOffsetPx)),getWidth(),maxY + 10);}  }
class C{  protected NotesEditQuery text(String value){  return unsafeParam("text",value);}  }
class C{  private void refreshPhases(){  for (int i=0; i < phaseList.size(); i++) {    Phase p=phaseList.get(i);    if (TimelineAlgos.isRunningNow(p.getStartTime(),p.getEndTime())) {      p.setRunning(true);      currentPhase=p;      currentPhasePosition=i;    } else {      p.setRunning(false);    }  }}  }
class C{  public void sync() throws CanceledException {  if (!inSync) {    inSync=true;    setChartTitle(cName + " vs " + cName+ " plot for "+ doc.getTitle());    String[] sampleNames=doc.getSampleNamesAsArray();    for (int i=0; i < sampleNames.length; i++) {      String name1=sampleNames[i];      for (int j=i + 1; j < sampleNames.length; j++) {        String name2=sampleNames[j];        String name=name1 + " vs " + name2;        ((Plot2DDrawer)getChartDrawer()).setShowDots(name,true);        ((Plot2DDrawer)getChartDrawer()).setShowLines(name,false);      }    }    Map<String,Collection<Pair<Number,Number>>> name2counts=computeCounts(doc,parentViewer,doc.getProgressListener());    IPlot2DData chartData=(IPlot2DData)getChartData();    chartData.clear();    chartData.setDataSetName(doc.getTitle());    for (    String name : name2counts.keySet())     chartData.setDataForSeries(name,name2counts.get(name));    if (sampleNames.length == 2) {      getChartData().setSeriesLabel(sampleNames[0]);      getChartData().setCountsLabel(sampleNames[1]);      if (name2counts.values().size() > 0) {        Collection<Pair<Number,Number>> pairs=name2counts.values().iterator().next();        double correlationCoefficent=computePearsonsCorrelation(pairs);        System.err.println("Number of points: " + pairs.size() + ", Pearson's correlation: "+ correlationCoefficent);      }    }    if (getChartDrawer() instanceof Plot2DDrawer) {      Plot2DDrawer drawer=(Plot2DDrawer)getChartDrawer();      for (      String name : name2counts.keySet()) {        drawer.setUseJitter(name,true);      }    }    super.sync();    inSync=false;  }}  }
class C{  public void moveReferences() throws SQLException {  if (currentRow == null || currentRow.isLast()) {    nextTable();  } else {    nextRow();  }}  }
class C{  public Outline(){}  }
class C{  private static String createFullTableName(String table,String partition){  if (partition == null) {    return table;  } else {    return table + PARTITION_DELIMITER + partition;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_WITHDRAW_REQUEST(String value0){  return new SM_SYSTEM_MESSAGE(1300135,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MPAttack_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201208,skillcaster,skillname);}  }
class C{  public EmailBuilder withSubject(String subject){  this.subject=subject;  return this;}  }
class C{  public void unregisterProvider(EnvironmentProvider provider){  JmxConnectionSupportImpl.unregisterProviderImpl(provider);}  }
class C{  public void requestNodeNeighborUpdate(int nodeId){  enqueue(new RequestNodeNeighborUpdateMessageClass().doRequest(nodeId));}  }
class C{  public static void main(String[] args){  IJSpace space=null;  try {    space=(IJSpace)SpaceFinder.find(args[0]);  } catch (  FinderException e) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,e.toString(),e);    }  }  new JMSDurableSubService(space);}  }
class C{  public void saveIntoFile(String path,Bitmap bitmap){  try {    FileOutputStream out=new FileOutputStream(path);    bitmap.compress(Bitmap.CompressFormat.PNG,80,out);    out.flush();    out.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void startUp() throws CoreException {  super.startup();  soot_output_doc=new SootDocument();  soot_output_doc.startUp();}  }
class C{  @Override public int hashCode(){  Calendar cal=TEST_POINTS[0].toGregorianCalendar();  this.addTo(cal);  return (int)getCalendarTimeInMillis(cal);}  }
class C{  public static void notEmpty(String argumentName,String argumentObject){  notNull(argumentName,argumentObject);  if (argumentObject.length() == 0) {    throw new IllegalArgumentException(argumentName + " cannot be empty");  }}  }
class C{  public void showContent(List<Integer> skipIds){  switchState(CONTENT,null,null,null,null,null,skipIds);}  }
class C{  public VisualTable(Table parent,Visualization vis,String group){  this(parent,vis,group,null,VisualItem.SCHEMA);}  }
class C{  public void fling(long time,float x,float y,float velocityX,float velocityY){  resetResizeTimeout(false);  velocityX=MathUtils.flipSignIf(velocityX,LocalizationUtils.isLayoutRtl());  if (mInReorderMode)   return;  int scrollDeltaRemaining=0;  if (!mScroller.isFinished()) {    scrollDeltaRemaining=mScroller.getFinalX() - mScrollOffset;    mInteractingTab=null;    mScroller.forceFinished(true);  }  mScroller.fling(mScrollOffset,0,(int)velocityX,0,(int)mMinScrollOffset,0,0,0,0,0,time);  mScroller.setFinalX(mScroller.getFinalX() + scrollDeltaRemaining);  mUpdateHost.requestUpdate();}  }
class C{  public RangeQueryBinding(TupleSet ts,String field){  this(ts,field,false);}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  private Object calculateReturnValue(final Object result) throws RuleEvaluationException {  try {    if (((Boolean)result).equals(Boolean.TRUE)) {      return this.resultValue;    } else {      return null;    }  } catch (  ClassCastException ce) {    throw new RuleEvaluationException(new StringBuffer("Condition does not evaluate to TRUE or FALSE: ").append(this.condition.getExpression()).toString());  }}  }
class C{  public void dumpBinary(String path){  String compiledPath=path + "_compiled.bin";  String addendaPath=path + "_addenda.bin";  dumpBinaryLexicon(compiled,compiledPath);  dumpBinaryLexicon(addenda,addendaPath);}  }
class C{  public static String decode(String str,String charset) throws RuntimeException {  byte[] bytes;  try {    bytes=str.getBytes("ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("ASCII is not supported!",e);  }  byte[] decoded=decode(bytes);  try {    return new String(decoded,charset);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("Unsupported charset: " + charset,e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnAttacked_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200372,num0,skillname);}  }
class C{  public String xmlEncode(String object){  return StringEscapeUtils.escapeXml11(object);}  }
class C{  protected CascadedTable(Table parent,Predicate rowFilter,ColumnProjection colFilter,Class tupleType){  super(0,0,tupleType);  m_parent=parent;  m_pnames=new ArrayList();  m_rows=new CascadedRowManager(this);  m_listener=new Listener();  setColumnProjection(colFilter);  setRowFilter(rowFilter);  m_parent.addTableListener(m_listener);}  }
class C{  public MessagesDeleteDialogQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public int recycleItems(LinearLayout layout,int firstItem,ItemsRange range){  int index=firstItem;  for (int i=0; i < layout.getChildCount(); ) {    if (!range.contains(index)) {      recycleView(layout.getChildAt(i),index);      layout.removeViewAt(i);      if (i == 0) {        firstItem++;      }    } else {      i++;    }    index++;  }  return firstItem;}  }
class C{  public gaj(){}  }
class C{  @Override public void onScrollStateChanged(int state){  super.onScrollStateChanged(state);  if (state == RecyclerView.SCROLL_STATE_IDLE && mOnLoadMoreListener != null && !isLoadingMoreData) {    LayoutManager layoutManager=getLayoutManager();    int lastVisibleItemPosition;    if (layoutManager instanceof XGridLayoutManager) {      lastVisibleItemPosition=((XGridLayoutManager)layoutManager).findLastVisibleItemPosition();    } else     if (layoutManager instanceof XStaggeredGridLayoutManager) {      int[] into=new int[((XStaggeredGridLayoutManager)layoutManager).getSpanCount()];      ((XStaggeredGridLayoutManager)layoutManager).findLastVisibleItemPositions(into);      lastVisibleItemPosition=findMax(into);    } else {      lastVisibleItemPosition=((XLinearLayoutManager)layoutManager).findLastVisibleItemPosition();    }    if (isEnable && layoutManager.getChildCount() > 0 && lastVisibleItemPosition >= layoutManager.getItemCount() - 1 && mHeaderView.getLayoutParams().height <= 0) {      if (mFooterView != null) {        if (!isManualLoadMoreData) {          mFooterView.setVisibility(VISIBLE);          isLoadingMoreData=false;          mOnLoadMoreListener.onLoadMore();        }        isLoadingMoreData=false;      }    }  }}  }
class C{  void releaseToPool(long timeout,TimeUnit unit){  registerAsIdle();  offerToPool(timeout,unit);}  }
class C{  @Override protected void checkProperty(String propertyId) throws XMLConfigurationException {  if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.XERCES_PROPERTY_PREFIX.length();    if (suffixLength == Constants.DTD_SCANNER_PROPERTY.length() && propertyId.endsWith(Constants.DTD_SCANNER_PROPERTY)) {      return;    }  }  super.checkProperty(propertyId);}  }
class C{  protected static Set<Interval> generateIntervals(String apiIntervalQuery,Granularity granularity,DateTimeFormatter dateTimeFormatter) throws BadApiRequestException {  Set<Interval> generated=new LinkedHashSet<>();  if (apiIntervalQuery == null || apiIntervalQuery.equals("")) {    LOG.debug(INTERVAL_MISSING.logFormat());    throw new BadApiRequestException(INTERVAL_MISSING.format());  }  List<String> apiIntervals=Arrays.asList(apiIntervalQuery.split(","));  for (  String apiInterval : apiIntervals) {    String[] split=apiInterval.split("/");    if (split.length != 2) {      String message="Start and End dates are required.";      LOG.debug(INTERVAL_INVALID.logFormat(apiIntervalQuery,message));      throw new BadApiRequestException(INTERVAL_INVALID.format(apiIntervalQuery,message));    }    try {      String start=split[0].toUpperCase(Locale.ENGLISH);      String end=split[1].toUpperCase(Locale.ENGLISH);      if (start.startsWith("P") && end.startsWith("P")) {        LOG.debug(INTERVAL_INVALID.logFormat(start));        throw new BadApiRequestException(INTERVAL_INVALID.format(apiInterval));      }      Interval interval;      DateTime now=new DateTime();      if (start.startsWith("P")) {        interval=new Interval(Period.parse(start),getAsDateTime(now,granularity,split[1],dateTimeFormatter));      } else       if (end.startsWith("P")) {        interval=new Interval(getAsDateTime(now,granularity,split[0],dateTimeFormatter),Period.parse(end));      } else {        interval=new Interval(getAsDateTime(now,granularity,split[0],dateTimeFormatter),getAsDateTime(now,granularity,split[1],dateTimeFormatter));      }      if (interval.toDuration().equals(Duration.ZERO)) {        LOG.debug(INTERVAL_ZERO_LENGTH.logFormat(apiInterval));        throw new BadApiRequestException(INTERVAL_ZERO_LENGTH.format(apiInterval));      }      generated.add(interval);    } catch (    IllegalArgumentException iae) {      LOG.debug(INTERVAL_INVALID.logFormat(apiIntervalQuery,iae.getMessage()),iae);      throw new BadApiRequestException(INTERVAL_INVALID.format(apiIntervalQuery,iae.getMessage()),iae);    }  }  return generated;}  }
class C{  public static <T>HashSet<T> linkedHashSet(){  return new LinkedHashSet<T>();}  }
class C{  public boolean isComponentNotPresent(final String cssClassName){  boolean missing=false;  try {    wait.withTimeout(Timeouts.SMALL).until(null);    missing=true;  } catch (  TimeoutException e) {    LOG.debug(String.format("component located by: %s is not present",cssClassName),e);  }  return missing;}  }
class C{  public DoubleDataSource apply(DoubleDataSource signal){  return new BufferedDoubleDataSource(signal,new Processor(a));}  }
class C{  public void saveAuxData(Map<String,byte[]> label2data) throws IOException {  final FileFooterRMA3 fileFooter=getFileFooter();  close();  io=new InputOutputReaderWriter(new File(getFileName()),READ_WRITE);  io.setLength(fileFooter.getAuxStart());  io.seek(fileFooter.getAuxStart());  fileFooter.setAuxStart(io.getPosition());  getAuxBlocksFooter().writeAuxBlocks(io,label2data);  fileFooter.setAuxFooter(io.getPosition());  getAuxBlocksFooter().write(io);  fileFooter.setFileFooter(io.getPosition());  fileFooter.write(io);  close();}  }
class C{  public void onDestroy(){  if (!players.isEmpty()) {    onLastPlayerReleased();  }  for (  AudioPlayer audio : this.players.values()) {    audio.destroy();  }  this.players.clear();}  }
class C{  public void end(){  while (!subreports.isEmpty()) {    String subreport=subreports.pop();    addLogEntry(new SubreportEndEntry(subreport));  }  this.endDate=new Date();}  }
class C{  public StudioWizardDialogBuilder(@NotNull ModelWizardStep step,@NotNull String title){  this(new ModelWizard.Builder(step).build(),title);}  }
class C{  @Override public Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  this.tag=tag;  this.settings=new Settings();  return settings;}  }
class C{  public final void addAccountToGameServer(Account acc){  accountsOnGameServer.put(acc.getId(),acc);}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200668,skillcaster,skillname);}  }
class C{  public void flushAll(){  bufferPool.flushAll();}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public static void triggerForAllResourcePools(Service sender){  Query rpQuery=Query.Builder.create().addKindFieldClause(ResourcePoolState.class).build();  QueryTask rpQueryTask=QueryTask.Builder.createDirectTask().setQuery(rpQuery).build();  Operation.createPost(sender.getHost(),ServiceUriPaths.CORE_QUERY_TASKS).setBody(rpQueryTask).setCompletion(null).sendWith(sender);}  }
class C{  public static boolean isUpdate(int mod){  return Modifiers.contains(mod,UpdateModifiers.UPDATE_ONLY | UpdateModifiers.PARTIAL_UPDATE | UpdateModifiers.UPDATE_OR_WRITE);}  }
class C{  public TemplateDruidQuery merge(TemplateDruidQuery sibling){  TemplateDruidQuery self=this;  while (self.depth > sibling.depth) {    sibling=sibling.nest();  }  while (sibling.depth > self.depth) {    self=self.nest();  }  Set<Aggregation> mergedAggregations=mergeAggregations(self.getAggregations(),sibling.getAggregations());  LinkedHashSet<PostAggregation> mergedPostAggregations=new LinkedHashSet<>(self.getPostAggregations());  mergedPostAggregations.addAll(sibling.getPostAggregations());  ZonelessTimeGrain mergedGrain=mergeTimeGrains(self.getTimeGrain(),sibling.getTimeGrain());  TemplateDruidQuery mergedNested=self.isNested() ? self.nestedQuery.merge(sibling.getInnerQuery()) : null;  return new TemplateDruidQuery(mergedAggregations,mergedPostAggregations,mergedNested,mergedGrain);}  }
class C{  private LoadBalancingPolicy createDefaultLoadBalacingPolicy(String activeGroupName,List<String> groupMemberNames,List<SpaceURL> groupMemberURL){  LoadBalancingPolicy loadBalPolicy=new LoadBalancingPolicy();  loadBalPolicy.m_GroupName=activeGroupName;  loadBalPolicy.loadBalanceGroupMembersNames=groupMemberNames;  loadBalPolicy.loadBalanceGroupMembersURLs=groupMemberURL;  loadBalPolicy.m_DefaultPolicy=new LoadBalancingPolicy.LoadBalancingPolicyDescription();  loadBalPolicy.m_DefaultPolicy.setBroadcastCondition(BroadcastCondition.ROUTING_INDEX_IS_NULL);  loadBalPolicy.m_DefaultPolicy.m_PolicyType="local-space";  return loadBalPolicy;}  }
class C{  public static void insertAfter(Node newNode,Node refNode) throws DOMException {  Node parent=refNode.getParentNode();  Node next=refNode.getNextSibling();  if (next == null) {    parent.appendChild(newNode);  } else {    parent.insertBefore(newNode,next);  }}  }
class C{  public int hashCode(){  return l.hashCode();}  }
class C{  protected void fireTableEvent(int row0,int row1,int col,int type){  if (col == EventConstants.ALL_COLUMNS && type == EventConstants.DELETE) {    for (int r=row0; r <= row1; ++r)     clearAggregateMappings(r,false);  }  super.fireTableEvent(row0,row1,col,type);}  }
class C{  public FieldMatrix<T> outerProduct(SparseFieldVector<T> v){  final int n=v.getDimension();  SparseFieldMatrix<T> res=new SparseFieldMatrix<T>(field,virtualSize,n);  OpenIntToFieldHashMap<T>.Iterator iter=entries.iterator();  while (iter.hasNext()) {    iter.advance();    OpenIntToFieldHashMap<T>.Iterator iter2=v.entries.iterator();    while (iter2.hasNext()) {      iter2.advance();      res.setEntry(iter.key(),iter2.key(),iter.value().multiply(iter2.value()));    }  }  return res;}  }
class C{  public org.datavec.api.berkeley.PriorityQueue<E> asPriorityQueue(){  org.datavec.api.berkeley.PriorityQueue<E> pq=new org.datavec.api.berkeley.PriorityQueue<E>(entries.size());  for (  Entry<E,Double> entry : entries.entrySet()) {    pq.add(entry.getKey(),entry.getValue());  }  return pq;}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public void copyNode(Node node,Node destinationParent) throws RepositoryException {  LOG.debug("Copying node '{}' into '{}'",node.getPath(),destinationParent.getPath());  Node newNode=destinationParent.addNode(node.getName(),node.getPrimaryNodeType().getName());  PropertyIterator it=node.getProperties();  while (it.hasNext()) {    Property property=it.nextProperty();    if (!property.getDefinition().isProtected()) {      newNode.setProperty(property.getName(),property.getValue().getString(),property.getType());    }  }  NodeIterator nodeIterator=node.getNodes();  while (nodeIterator.hasNext()) {    copyNode(nodeIterator.nextNode(),newNode);  }}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {  if (fAnnotationDepth > -1) {    schemaDOM.processingInstruction(target,data);  }}  }
class C{  protected boolean insertSubtree(BinarySearchTree<E> tree){  if (tree == null)   return false;  if (tree.root == null)   return true;  Iterator<E> iterator=tree.inOrderIterator();  while (iterator.hasNext()) {    BinarySearchTreeNode<E> newNode=new BinarySearchTreeNode<E>(iterator.next());    this.insert(newNode);  }  return true;}  }
class C{  private static void checkIfDefaultVoice(Voice voice){  Locale locale=voice.getLocale();  Voice currentDefault=defaultVoices.get(locale);  if (currentDefault == null || currentDefault.wantToBeDefault < voice.wantToBeDefault) {    Log.i(Mary.LOG,"New default voice for locale " + locale + ": "+ voice.getName()+ " (desire "+ voice.wantToBeDefault+ ")");    defaultVoices.put(locale,voice);  }}  }
class C{  public HttpPost createUploadRequest(){  return new HttpPost(String.format(REQUEST_STRING,authorIp,Commands.UPLOAD.getCommand()));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public IdUse fullCopy(){  IdUse tree=(IdUse)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public int read() throws IOException {  return fInputStream.read();}  }
class C{  public Builder metric(Boolean metric){  this.metric=metric;  return this;}  }
class C{  private ProcessBuilder process(List<String> executeCommand) throws IOException {  List<String> command=Lists.newArrayList();  if (!"root".equals(System.getProperty("user.name"))) {    command.add(SUDO_STRING);    command.add("-n");    command.add("-E");  }  command.addAll(executeCommand);  ProcessBuilder actionStorage=new ProcessBuilder(command);  actionStorage.directory(new File("/"));  actionStorage.redirectErrorStream(true);  return actionStorage;}  }
class C{  public boolean mouseMoved(@AndroidCoordinate int x,@AndroidCoordinate int y){  if (myMouseInteraction != null) {    myMouseInteraction.mouseMoved(pxToDp(x),pxToDp(y));  }  if (mySceneDraw.getCurrentUnderneathAnchor() != null) {    return true;  }  return false;}  }
class C{  private static void floodFill(S2Region region,S2CellId start,ArrayList<S2CellId> output){  HashSet<S2CellId> all=new HashSet<S2CellId>();  ArrayList<S2CellId> frontier=new ArrayList<S2CellId>();  output.clear();  all.add(start);  frontier.add(start);  while (!frontier.isEmpty()) {    S2CellId id=frontier.get(frontier.size() - 1);    frontier.remove(frontier.size() - 1);    if (!region.mayIntersect(new S2Cell(id))) {      continue;    }    output.add(id);    S2CellId[] neighbors=new S2CellId[4];    id.getEdgeNeighbors(neighbors);    for (int edge=0; edge < 4; ++edge) {      S2CellId nbr=neighbors[edge];      boolean hasNbr=all.contains(nbr);      if (!all.contains(nbr)) {        frontier.add(nbr);        all.add(nbr);      }    }  }}  }
class C{  public NewsfeedSearchQueryWithExtended geocode(String value){  return unsafeParam("geocode",value);}  }
class C{  public static byte[] toByteArray(Reader input,String encoding) throws IOException {  return toByteArray(input,Charsets.toCharset(encoding));}  }
class C{  public static AggregationSet createAggregationSet(SelectQuery query,int entriesLimit){  List<SelectColumn> selectColumns=query.getQueryColumns();  ArrayList<SelectColumn> groupByColumns=query.getGroupColumn();  ArrayList<OrderColumn> orderColumns=query.getOrderColumns();  AggregationSet aggregationSet=new AggregationSet();  if (orderColumns == null && groupByColumns == null)   return createFunctionsAggregationSet(selectColumns,aggregationSet);  if (groupByColumns != null) {    String[] groupByColumnNames=new String[groupByColumns.size()];    for (int i=0; i < groupByColumnNames.length; i++) {      groupByColumnNames[i]=groupByColumns.get(i).getName();    }    if (query.isAggFunction()) {      aggregationSet=createFunctionsAggregationSet(selectColumns,aggregationSet);      GroupByAggregator groupByAggregator=new GroupByAggregator().groupBy(groupByColumnNames);      List<SpaceEntriesAggregator> aggregators=AggregationInternalUtils.getAggregators(aggregationSet);      if (!aggregators.isEmpty()) {        groupByAggregator=groupByAggregator.select(aggregators.toArray(new SpaceEntriesAggregator[]{}));      }      return new AggregationSet().groupBy(groupByAggregator);    } else {      int limit=orderColumns != null ? Integer.MAX_VALUE : entriesLimit;      return new AggregationSet().distinct(new DistinctAggregator().distinct(limit,groupByColumnNames));    }  } else   if (orderColumns != null) {    String[] orderByColumnNames=new String[orderColumns.size()];    for (int i=0; i < orderByColumnNames.length; i++) {      orderByColumnNames[i]=orderColumns.get(i).getName();    }    OrderByAggregator orderByAggregator=new OrderByAggregator(entriesLimit);    for (    OrderColumn orderCol : orderColumns) {      orderByAggregator=orderByAggregator.orderBy(orderCol.getName(),orderCol.isDesc() ? OrderBy.DESC : OrderBy.ASC,orderCol.areNullsLast());    }    aggregationSet=new AggregationSet().orderBy(orderByAggregator);  }  return aggregationSet;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CMD_SHOUT_OUTPUT(String value0){  return new SM_SYSTEM_MESSAGE(1400000,value0);}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public void showSvnProperties(ISVNLocalResource resource) throws SVNException {  this.resource=resource;  this.remoteResource=null;  if (resource != null) {    if (resource.isManaged()) {      if (resource.getRevision() != null) {        setContentDescription(Policy.bind("SvnRevPropertiesView.titleWithTwoArguments",resource.getRevision().toString(),resource.getName()));      }    } else {      setContentDescription(Policy.bind("SvnRevPropertiesView.titleWithOneArgument",resource.getName()));    }  } else {    setContentDescription("");  }  updateStatus();}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public ArrayRealVector(double[] d){  data=d.clone();}  }
class C{  public double normInf(){  double f=0;  for (int i=0; i < m; i++) {    double s=0;    for (int j=0; j < n; j++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  public void onSuccess(int statusCode,Header[] headers,byte[] responseBody){  try {    String response=responseBody == null ? null : new String(responseBody,getCharset());    onSuccess(statusCode,headers,response);  } catch (  UnsupportedEncodingException e) {    onFailure(statusCode,headers,e,null);  }}  }
class C{  public int allowed_modifier_changes(){  String s=soot.PhaseOptions.getString(options,"allowed-modifier-changes");  if (s.equalsIgnoreCase("unsafe"))   return allowed_modifier_changes_unsafe;  if (s.equalsIgnoreCase("safe"))   return allowed_modifier_changes_safe;  if (s.equalsIgnoreCase("none"))   return allowed_modifier_changes_none;  throw new RuntimeException("Invalid value " + s + " of phase option allowed-modifier-changes");}  }
class C{  public void addBaselineAspect(Class<? extends ConfigAspectBase> type){  baselineAspectTypes.add(type);}  }
class C{  private void updateIndicatorPositions(int currentPage,float positionOffset,boolean forceUpdate){  if (currentPage != lastKnownCurrentPage && viewPager != null) {    updateIndicators(currentPage,viewPager.getAdapter());  } else   if (!forceUpdate && positionOffset == lastKnownPositionOffset) {    return;  }  isUpdatingPositions=true;  final int dotWidth=2 * dotRadius;  final int top=calculateIndicatorDotTop();  final int bottom=top + dotWidth;  int left=calculateIndicatorDotStart();  int right=left + dotWidth;  for (int i=0, dotCount=indicatorDots.size(), pathCount=dotPaths.size(); i < dotCount; ++i) {    final IndicatorDotView dotView=indicatorDots.get(i);    dotView.layout(left,top,right,bottom);    if (i < pathCount) {      final IndicatorDotPathView dotPath=dotPaths.get(i);      dotPath.layout(left,top,left + dotPath.getMeasuredWidth(),bottom);    }    if (i == currentPage && selectedDotNeedsLayout) {      selectedDot.layout(left,top,right,bottom);      selectedDotNeedsLayout=false;    }    left=right + dotPadding;    right=left + dotWidth;  }  selectedDot.bringToFront();  lastKnownPositionOffset=positionOffset;  isUpdatingPositions=false;}  }
class C{  @Override public void onPatchTypeExtractFail(File patchFile,File extractTo,String filename,int fileType,boolean isUpgradePatch){  TinkerLog.i(TAG,"patchReporter: file extract fail type:%s, path:%s, extractTo:%s, filename:%s, isUpgrade:%b",ShareTinkerInternals.getTypeString(fileType),patchFile.getPath(),extractTo.getPath(),filename,isUpgradePatch);  Tinker.with(context).cleanPatchByVersion(patchFile);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", title=").append(title);  sb.append(", requestUri=").append(requestUri);  sb.append(", parammeters=").append(parammeters);  sb.append(", method=").append(method);  sb.append(", clientHost=").append(clientHost);  sb.append(", userAgent=").append(userAgent);  sb.append(", status=").append(status);  sb.append("]");  return sb.toString();}  }
class C{  @Override protected void handleIOException(IOException e) throws IOException {  throw new TaggedIOException(e,tag);}  }
class C{  public void cancelCleanup(){  if (mCleanupTask != null)   mCleanupTask.cancel(true);}  }
class C{  public void close(){  length=0;}  }
class C{  @Deprecated public void _INVALID_setDamage(int damage){  setDamage(damage);}  }
class C{  public int equivHashCode(){  return name.hashCode() * 101 + type.hashCode() * 17;}  }
class C{  private ReplyPacket consumeAndHandleRequest(RequestPacket requestPacket,IResponseContext respContext,ChannelEntry channelEntry){  Object reqObject=requestPacket.getRequestObject();  if (reqObject != null) {    if (reqObject instanceof ClassProviderRequest)     return new ReplyPacket<IClassProvider>(_classProvider,null);    if (reqObject instanceof HandshakeRequest) {      HandshakeRequest handshakeRequest=(HandshakeRequest)reqObject;      channelEntry.setSourceDetails(handshakeRequest.getSourcePlatformLogicalVersion(),handshakeRequest.getSourcePid());      return new ReplyPacket<Object>(null,null);    }  }  boolean sendResponse=true;  Exception resultEx=null;  Object result=null;  try {    if (requestPacket.isOneWay()) {      channelEntry.returnSocket();      sendResponse=false;    }    if (requestPacket.getObjectId() != LRMIRuntime.DUMMY_OBJECT_ID) {      if (requestPacket.getInvokeMethod() == null) {        _logger.log(Level.WARNING,"canceling invocation of request packet without invokeMethod : " + requestPacket);      } else {        result=LRMIRuntime.getRuntime().invoked(requestPacket.getObjectId(),requestPacket.getInvokeMethod().realMethod,requestPacket.getArgs());      }    }  } catch (  NoSuchObjectException ex) {    if (requestPacket.isOneWay()) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,"Failed to invoke one way method : " + requestPacket.getInvokeMethod() + "\nReason: This remoteObject: "+ requestPacket.getObjectId()+ " has been already unexported.",ex);      }    }    resultEx=ex;  }catch (  Exception ex) {    resultEx=ex;  } finally {    if (requestPacket.isCallBack) {      sendResponse=respContext.shouldSendResponse();    }  }  if (requestPacket.isOneWay()) {    if (resultEx != null && _logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Failed to invoke one-way method: " + requestPacket.getInvokeMethod(),resultEx);    }  }  if (!sendResponse)   return null;  return new ReplyPacket(result,resultEx);}  }
class C{  public static User loadById(long id){  return Helper.load(id,User.class);}  }
class C{  public EdgeCachedLocator(int iCacheMaxSize){  CacheMaxSize=iCacheMaxSize;  Cache=new HashMap();  CacheAccess=new TreeMap();  ElementAccessTime=new HashMap();}  }
class C{  public float calcProb(){  float empty=mGroupArea - (mWidgetArea + mGapArea);  empty/=mCount * mGroupArea;  empty=(1 - empty);  float tableProb=calculateTableConfidence(mRectList);  return (tableProb + empty + (1 - 1 / ((float)mCount))) / 3;}  }
class C{  public AemComponentHandler(Class<?> componentClass){  if (!componentClass.isAnnotationPresent(AemComponent.class)) {    throw new ComponentAnnotationMissingException("Class: " + componentClass.getName() + "is not a AemComponent");  } else {    AemComponent componentAnnotation=componentClass.getAnnotation(AemComponent.class);    this.cssClassName=componentAnnotation.cssClassName();    this.name=componentAnnotation.name();    this.group=componentAnnotation.group();    this.sidekickCssSelector=componentAnnotation.sidekickCssSelector();  }}  }
class C{  public void endString(String string){}  }
class C{  public Application createJmxApplication(String connectionString,String displayName,String username,String password) throws JmxApplicationException {  return createJmxApplication(connectionString,displayName,username,password,false,false);}  }
class C{  private boolean writeToFallback(final List<T> temp){  boolean notLog4j=true;  try {    boolean checked=fallbackManager.isDiskSpaceCheckDone(this.minFreeDiscSpace);    if (checked) {      alarmSender.diskFull(DOWN,fallbackManager.getFallbackFileController().getDataFile().getParentFile().getAbsolutePath());    }    try {      FALLBACK_LOG.info("writeToFallback([Collection]) - Writing " + temp.size() + " dataTags to the fallback file"+ fallbackManager.getFallbackFileController().getDataFile().getAbsolutePath());      fallbackManager.fallback(temp);      alarmSender.fileNotReachable(DOWN,fallbackManager.getFallbackFileController().getDataFile());    } catch (    DataFallbackException ex) {      FALLBACK_LOG.error("writeToFallback([Collection]) - An error ocurred while trying to write the datatags in the logfile " + ex.getMessage());      FALLBACK_LOG.error("writeToFallback([Collection]) - DataTags could not be written to the log file and therefore they won't be stored in the ShorttermLog");      alarmSender.fileNotReachable(ACTIVATED,fallbackManager.getFallbackFileController().getDataFile());      notLog4j=false;    }  } catch (  SystemDiskSpaceException e) {    alarmSender.diskFull(ACTIVATED,fallbackManager.getFallbackFileController().getDataFile().getParentFile().getAbsolutePath());  }catch (  Exception e) {    FALLBACK_LOG.error("RuntimeException : " + e.getMessage(),e);  }  return notLog4j;}  }
class C{  @Override public Node nextNode(){  if (fDetach) {    throw new DOMException(DOMException.INVALID_STATE_ERR,DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_STATE_ERR",null));  }  if (fRoot == null)   return null;  Node nextNode=fCurrentNode;  boolean accepted=false;  accepted_loop:   while (!accepted) {    if (!fForward && nextNode != null) {      nextNode=fCurrentNode;    } else {      if (!fEntityReferenceExpansion && nextNode != null && nextNode.getNodeType() == Node.ENTITY_REFERENCE_NODE) {        nextNode=nextNode(nextNode,false);      } else {        nextNode=nextNode(nextNode,true);      }    }    fForward=true;    if (nextNode == null)     return null;    accepted=acceptNode(nextNode);    if (accepted) {      fCurrentNode=nextNode;      return fCurrentNode;    } else     continue accepted_loop;  }  return null;}  }
class C{  private static void checkSymmetry(final RealLinearOperator l,final RealVector x,final RealVector y,final RealVector z) throws MathIllegalArgumentException {  final double s=y.dotProduct(y);  final double t=x.dotProduct(z);  final double epsa=(s + MACH_PREC) * CBRT_MACH_PREC;  if (FastMath.abs(s - t) > epsa) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SELF_ADJOINT_OPERATOR);  }}  }
class C{  private void validateQuietZone(BitArray row,int startPattern) throws NotFoundException {  int quietCount=this.narrowLineWidth * 10;  quietCount=quietCount < startPattern ? quietCount : startPattern;  for (int i=startPattern - 1; quietCount > 0 && i >= 0; i--) {    if (row.get(i)) {      break;    }    quietCount--;  }  if (quietCount != 0) {    throw NotFoundException.getNotFoundInstance();  }}  }
class C{  public ScheduledFuture<?> createTimerTask(ScheduledExecutorService ses){  return ses.scheduleAtFixedRate(this,INITIAL_RUN_DELAY,getIntervalSeconds(),TimeUnit.SECONDS);}  }
class C{  public boolean isUseCompression(){  return useCompression;}  }
class C{  public void eventCancelledByEventGateway(DelegateExecution execution){  Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity)execution,DeleteReason.EVENT_BASED_GATEWAY_CANCEL,false);}  }
class C{  private void patchThreadImplementation(){  SootClass sc=Scene.v().getSootClassUnsafe("java.lang.Thread");  if (sc == null)   return;  SootMethod smRun=sc.getMethodUnsafe("void run()");  if (smRun == null || smRun.hasActiveBody())   return;  SootMethod smCons=sc.getMethodUnsafe("void <init>(java.lang.Runnable)");  if (smCons == null || smCons.hasActiveBody())   return;  SootClass runnable=Scene.v().getSootClassUnsafe("java.lang.Runnable");  if (runnable == null)   return;  int fieldIdx=0;  SootField fldTarget=null;  while ((fldTarget=sc.getFieldByNameUnsafe("target" + fieldIdx)) != null)   fieldIdx++;  fldTarget=new SootField("target" + fieldIdx,runnable.getType());  sc.addField(fldTarget);  patchThreadConstructor(smCons,runnable,fldTarget);  patchThreadRunMethod(smRun,runnable,fldTarget);}  }
class C{  public static boolean canImportAsGradleProject(@NotNull VirtualFile importSource){  VirtualFile target=findImportTarget(importSource);  return target != null && GradleConstants.EXTENSION.equals(target.getExtension());}  }
class C{  public Response writeByte(byte b){  expand(1);  out[offset++]=b;  return this;}  }
class C{  @SuppressWarnings("deprecation") public static void init(Context context){  if (context == null) {    mMinimumFlingVelocity=ViewConfiguration.getMinimumFlingVelocity();    mMaximumFlingVelocity=ViewConfiguration.getMaximumFlingVelocity();    Log.e("MPChartLib-Utils","Utils.init(...) PROVIDED CONTEXT OBJECT IS NULL");  } else {    ViewConfiguration viewConfiguration=ViewConfiguration.get(context);    mMinimumFlingVelocity=viewConfiguration.getScaledMinimumFlingVelocity();    mMaximumFlingVelocity=viewConfiguration.getScaledMaximumFlingVelocity();    Resources res=context.getResources();    mMetrics=res.getDisplayMetrics();  }}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public static void runOnUiThreadDelay(Runnable runnable,long delayMillis){  HANDLER.postDelayed(runnable,delayMillis);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public static List<DockerPortMapping> fromMap(Map<String,List<Map<String,String>>> map){  return map.entrySet().stream().map(null).filter(null).collect(Collectors.toList());}  }
class C{  public void write(byte[] bytes,int offset,int length) throws IOException {  outs.write(bytes,offset,length);  position+=length;}  }
class C{  @Override public void elementDecl(String name,String contentModel,Augmentations augs) throws XNIException {}  }
class C{  public Predicate(){}  }
class C{  @Override public boolean isEnabled(){  if (filterTable != null) {    return filterTable.isEnabled();  }  return false;}  }
class C{  protected void processSwitchBinaryReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  int value=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug("NODE {}: Switch Binary report, value = {}",this.getNode().getNodeId(),value);  ZWaveCommandClassValueEvent zEvent=new ZWaveCommandClassValueEvent(this.getNode().getNodeId(),endpoint,this.getCommandClass(),value);  this.getController().notifyEventListeners(zEvent);}  }
class C{  private Response requireJSON(IHTTPSession session){  final Map<String,String> headers=session.getHeaders();  if (!APPLICATION_JSON.equals(headers.get(CONTENT_TYPE))) {    return newFixedLengthResponse(Response.Status.NOT_ACCEPTABLE,MIME_PLAINTEXT,"Set content-type to application/json");  } else {    return null;  }}  }
class C{  public static String columnEncode(String string){  if (string != null) {    string=string.replaceAll("<","_lt");    string=string.replaceAll(">","_gt");    string=string.replaceAll(ILLEGAL_FILENAME_CHARS_REGEX,EMPTY);    string=string.length() > 255 ? string.substring(0,255) : string;    string=string.toLowerCase();  }  return string;}  }
class C{  private ListenableFuture<AuthenticateResponse> authenticate(ManagedChannel channel,ByteString name,ByteString password){  ListenableFuture<AuthenticateResponse> authResp=AuthGrpc.newFutureStub(channel).authenticate(AuthenticateRequest.newBuilder().setNameBytes(name).setPasswordBytes(password).build());  return authResp;}  }
class C{  private static float alphaBlendingComponent(int foregroundComponent,float foregroundAlpha,int backgroundComponent,float backgroundAlpha){  float alpha=foregroundAlpha + backgroundAlpha * (1 - foregroundAlpha);  if (Math.abs(alpha) < 0.001) {    return 1;  }  return (foregroundAlpha * foregroundComponent + backgroundAlpha * backgroundComponent * (1 - foregroundAlpha)) / (255.0f * alpha);}  }
class C{  public static void writeTextComponent(PacketBuffer buf,ITextComponent value){  writeString(buf,ITextComponent.a.componentToJson(value));}  }
class C{  @RequestMapping(value={"/rest/v1/proxy"},method=RequestMethod.POST,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) @ResponseStatus(value=HttpStatus.OK) public ModelAndView returnProxyDetailsForBluefin(@RequestBody ProxyEntity proxyEntity) throws DASTProxyException {  if (proxyEntity != null) {    if (openProxyServers.containsKey(proxyEntity.toString())) {      final ProxyEntity proxyEntityForBluefinTestCase=openProxyServers.get(proxyEntity.toString());      proxyEntity=proxyEntityForBluefinTestCase;    } else {      if (!AppScanUtils.isNotNull(proxyEntity.getProxyIdentifier())) {        throw new DASTProxyException("Please provide a valid AppScan Test Identifier");      }      if (!AppScanUtils.isNotNull(proxyEntity.getUser()) || !AppScanUtils.isNotNull(proxyEntity.getUser().getUserId())) {        throw new DASTProxyException("Please provide a valid AppScan User Id");      }      final ProxyServer newProxyServerFoBluefinTestCase=getBrowserMobServiceBean().setUpProxyAndStartRecordForUser(proxyEntity.getProxyIdentifier());      proxyEntity.setProxy(new Proxy(AppScanUtils.getIpAddress(),newProxyServerFoBluefinTestCase.getPort(),true));      proxyEntity.setProxyServer(newProxyServerFoBluefinTestCase);      openProxyServers.put(proxyEntity.toString(),proxyEntity);    }  } else {    LOGGER.error("Error in returnProxyDetails function. The 'ProxyEntity' sent is null. No way to track a proxy server.");    throw new DASTProxyException("Error in the data being sent. It is not in the correct format.");  }  return new ModelAndView(view,AppScanConstants.JSON_RESPONSE_DATA_IDENTIFIER,proxyEntity);}  }
class C{  private void rebuild(boolean forceRepaint){  try {    Configuration configuration=myContext.getConfiguration();    int minApiLevel=configuration.getTarget() != null ? configuration.getTarget().getVersion().getApiLevel() : Integer.MAX_VALUE;    ThemePreviewBuilder builder=new ThemePreviewBuilder().setBackgroundColor(getBackground()).addAllComponents(ThemePreviewBuilder.AVAILABLE_BASE_COMPONENTS).addNavigationBar(configuration.supports(Features.THEME_PREVIEW_NAVIGATION_BAR)).addAllComponents(myCustomComponents).addComponentFilter(new ThemePreviewBuilder.SearchFilter(mySearchTerm)).addComponentFilter(new ThemePreviewBuilder.ApiLevelFilter(minApiLevel)).addComponentFilter(myGroupFilter);    myIsAppCompatTheme=ThemeEditorUtils.isSelectedAppCompatTheme(myContext);    if (myIsAppCompatTheme) {      builder.addComponentFilter(mySupportReplacementsFilter).addAllComponents(mySupportLibraryComponents);    }    myAndroidPreviewPanel.setDocument(builder.build());    if (forceRepaint) {      repaint();    }  } catch (  ParserConfigurationException e) {    LOG.error("Unable to generate dynamic theme preview",e);  }}  }
class C{  Item newConstItem(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Byte) {    int val=((Byte)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Character) {    int val=((Character)cst).charValue();    return newInteger(val);  } else   if (cst instanceof Short) {    int val=((Short)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Boolean) {    int val=((Boolean)cst).booleanValue() ? 1 : 0;    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else   if (cst instanceof Type) {    Type t=(Type)cst;    return newClassItem(t.getSort() == Type.OBJECT ? t.getInternalName() : t.getDescriptor());  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  private boolean atTokenSequence(ProjectViewTokenType... kinds){  for (int i=0; i < kinds.length; i++) {    if (builder.lookAhead(i) != kinds[i]) {      return false;    }  }  return true;}  }
class C{  public int hashCode(){  int h=0;  if (name != null) {    h+=name.hashCode();  }  if (types != null) {    h+=hash(types);  }  if (constraints != null) {    h+=constraints.hashCode();  }  return h;}  }
class C{  public void writeToByteBuffer(ByteBuffer buffer) throws IOException {  buffer.clear();  writeToStream(new ByteBufferOutputStream(buffer));}  }
class C{  public boolean forEachKey(TObjectProcedure<K> procedure){  return forEach(procedure);}  }
class C{  public void init(){  for (  LocalGossipMember member : members.keySet()) {    if (member != me) {      member.startTimeoutTimer();    }  }  passiveGossipThread=new OnlyProcessReceivedPassiveGossipThread(this,gossipCore);  gossipThreadExecutor.execute(passiveGossipThread);  activeGossipThread=new ActiveGossipThread(this,this.gossipCore);  activeGossipThread.init();  dataReaper.init();  GossipService.LOGGER.debug("The GossipService is started.");}  }
class C{  public PhotosPutTagQuery y2(Float value){  return unsafeParam("y2",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ReturnHome_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200610,skillcaster,skillname);}  }
class C{  private static String millisToShortDHMS(long duration){  String res;  long days=TimeUnit.MILLISECONDS.toDays(duration);  long hours=TimeUnit.MILLISECONDS.toHours(duration) - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(duration));  long minutes=TimeUnit.MILLISECONDS.toMinutes(duration) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(duration));  long seconds=TimeUnit.MILLISECONDS.toSeconds(duration) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(duration));  if (days == 0) {    res=String.format("%02d:%02d:%02d",hours,minutes,seconds);  } else {    res=String.format("%dd%02d:%02d:%02d",days,hours,minutes,seconds);  }  return res;}  }
class C{  public static AuthErrors authErrorsFromUrl(String url){  if (!isValidLoginSchema(url)) {    return null;  }  String callbackUrl;  try {    JSONObject auth0=AirMap.getConfig().getJSONObject("auth0");    callbackUrl=auth0.getString("callback_url");  } catch (  JSONException e) {    e.printStackTrace();    throw new RuntimeException("No callbackUrl found in airmap.config.json");  }  url=url.replace(callbackUrl + "#",callbackUrl + "?");  HttpUrl parsed=HttpUrl.parse(url);  String error=parsed.queryParameter("error");  if (error == null || !error.equals("unauthorized")) {    return null;  }  try {    String errorDescription=parsed.queryParameter("error_description");    errorDescription=URLDecoder.decode(errorDescription,"UTF-8");    JSONObject jsonObject=new JSONObject(errorDescription);    return new AuthErrors(jsonObject);  } catch (  JSONException|UnsupportedEncodingException e) {    return null;  }}  }
class C{  public boolean isStayAlive(){  return stayAlive;}  }
class C{  protected void checkTransactionComplete(SerialMessage lastSentMessage,SerialMessage latestIncomingMessage){  incomingMessageTable.put(System.currentTimeMillis(),latestIncomingMessage);  if (lastSentMessage == null || lastSentMessage.isAckPending()) {    logger.debug("Checking transaction complete: Message has Ack Pending: {}",lastSentMessage);    return;  }  logger.debug("Checking transaction complete: Sent {}",lastSentMessage.toString());  final Iterator<Map.Entry<Long,SerialMessage>> iter=incomingMessageTable.entrySet().iterator();  final long expired=System.currentTimeMillis() - 10000;  while (iter.hasNext()) {    final Map.Entry<Long,SerialMessage> entry=iter.next();    if (entry.getKey() < expired) {      iter.remove();      continue;    }    final SerialMessage incomingMessage=entry.getValue();    logger.debug("Checking transaction complete: Recv {}",incomingMessage.toString());    final boolean ignoreTransmissionCompleteMismatch=false;    if (incomingMessage.getMessageClass() == lastSentMessage.getExpectedReply() && !incomingMessage.isTransactionCanceled()) {      logger.debug("Checking transaction complete: class={}, callback id={}, expected={}, cancelled={}        transaction complete!",incomingMessage.getMessageClass(),lastSentMessage.getCallbackId(),lastSentMessage.getExpectedReply(),incomingMessage.isTransactionCanceled());      transactionComplete=true;      return;    } else     if (ignoreTransmissionCompleteMismatch) {      logger.debug("Checking transaction complete: class={}, callback id={}, expected={}, cancelled={}      MISMATCH IGNORED",incomingMessage.getMessageClass(),lastSentMessage.getCallbackId(),lastSentMessage.getExpectedReply(),incomingMessage.isTransactionCanceled());      transactionComplete=true;      return;    } else {      logger.debug("Checking transaction complete: class={}, callback id={}, expected={}, cancelled={}      MISMATCH",incomingMessage.getMessageClass(),lastSentMessage.getCallbackId(),lastSentMessage.getExpectedReply(),incomingMessage.isTransactionCanceled());    }  }}  }
class C{  public boolean contains(S2Cap other){  if (isFull() || other.isEmpty()) {    return true;  }  return angle().radians() >= axis.angle(other.axis) + other.angle().radians();}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof GraphView && ((GraphView)getViewer()).getSelectedNodes().size() > 0;}  }
class C{  public ItemToMaterialCursor(Cursor cursor){  super(cursor);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Override public boolean onPreferenceClick(Preference preference){  if (preference == mLinkPref) {    Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(PasswordUIView.getAccountDashboardURL()));    intent.setPackage(getActivity().getPackageName());    getActivity().startActivity(intent);  } else {    Intent intent=new Intent();    intent.setClassName(getActivity(),getActivity().getClass().getName());    intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT,PasswordEntryEditor.class.getName());    intent.putExtra(Preferences.EXTRA_SHOW_FRAGMENT_ARGUMENTS,preference.getExtras());    startActivityForResult(intent,RESULT_DELETE_PASSWORD);  }  return true;}  }
class C{  private FieldVector3D<T> vector(final double x,final double y,final double z){  final T zero=q0.getField().getZero();  return new FieldVector3D<T>(zero.add(x),zero.add(y),zero.add(z));}  }
class C{  @ExceptionHandler(ObjectNotFoundException.class) @ResponseStatus(value=HttpStatus.NOT_FOUND) public @ResponseBody ErrorResponse resolveDocumentNotFoundException(ObjectNotFoundException e) throws IOException {  if (logger.isLoggable(Level.FINE))   logger.fine("space id query has no results, returning error response: " + e.getMessage());  return new ErrorResponse(new ErrorMessage(e.getMessage()));}  }
class C{  public void java_io_FileSystem_getFileSystem(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getFileSystemObject());}  }
class C{  public static Predicate<ItemStack> matcherOf(Item value){  return matcherOf(new ItemStack(value,1,WILDCARD_METADATA),false);}  }
class C{  private void clickByDescription(String text) throws UiObjectNotFoundException {  UiObject obj=new UiObject(new UiSelector().description(text));  obj.clickAndWaitForNewWindow();}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public Object clone(){  byte[] newData=new byte[length];  System.arraycopy(data,0,newData,0,newData.length);  SysexMessage event=new SysexMessage(newData);  return event;}  }
class C{  public static Map<String,Object> invoiceServiceItems(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String orderId=(String)context.get("orderId");  Locale locale=(Locale)context.get("locale");  OrderReadHelper orh=null;  try {    orh=new OrderReadHelper(delegator,orderId);  } catch (  IllegalArgumentException e) {    Debug.logError(e,"ERROR: Unable to get OrderHeader for orderId : " + orderId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorUnableToGetOrderHeaderForOrderId",UtilMisc.toMap("orderId",orderId),locale));  }  List<GenericValue> orderItems=null;  orderItems=orh.getOrderItemsByCondition(EntityCondition.makeCondition("statusId","ITEM_APPROVED"));  List<GenericValue> serviceItems=FastList.newInstance();  if (UtilValidate.isNotEmpty(orderItems)) {    for (    GenericValue item : orderItems) {      GenericValue product=null;      try {        product=item.getRelatedOne("Product",false);      } catch (      GenericEntityException e) {        Debug.logError(e,"ERROR: Unable to get Product from OrderItem",module);      }      if (product != null) {        if ("SERVICE".equals(product.get("productTypeId"))) {          serviceItems.add(item);        }      }    }  }  if (UtilValidate.isNotEmpty(serviceItems)) {    List<GenericValue> billItems=FastList.newInstance();    for (    GenericValue item : serviceItems) {      BigDecimal orderQuantity=OrderReadHelper.getOrderItemQuantity(item);      BigDecimal invoiceQuantity=OrderReadHelper.getOrderItemInvoicedQuantity(item);      BigDecimal outstandingQuantity=orderQuantity.subtract(invoiceQuantity);      if (outstandingQuantity.compareTo(ZERO) > 0) {        billItems.add(item);      }    }    Map<String,Object> invoiceResult=null;    try {      GenericValue permUserLogin=ServiceUtil.getUserLogin(dctx,context,"system");      Map<String,Object> invoiceContext=UtilMisc.toMap("orderId",orderId,"billItems",billItems,"userLogin",permUserLogin);      invoiceResult=dispatcher.runSync("createInvoiceForOrder",invoiceContext);    } catch (    GenericServiceException e) {      Debug.logError(e,"ERROR: Unable to invoice service items",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderProblemWithInvoiceCreationServiceItems",locale));    }    if (ModelService.RESPOND_ERROR.equals(invoiceResult.get(ModelService.RESPONSE_MESSAGE))) {      return ServiceUtil.returnError((String)invoiceResult.get(ModelService.ERROR_MESSAGE));    }    for (    GenericValue item : serviceItems) {      Map<String,Object> statusCtx=FastMap.newInstance();      statusCtx.put("orderId",item.getString("orderId"));      statusCtx.put("orderItemSeqId",item.getString("orderItemSeqId"));      statusCtx.put("statusId","ITEM_COMPLETED");      statusCtx.put("userLogin",userLogin);      try {        dispatcher.runSyncIgnore("changeOrderItemStatus",statusCtx);      } catch (      GenericServiceException e) {        Debug.logError(e,"ERROR: Problem setting the status to COMPLETED : " + item,module);      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public WheelHorizontalView(Context context){  this(context,null);}  }
class C{  private static void reload(String containerName,InputStream is,Properties customProps) throws SAXException, ParserConfigurationException, IOException {  m_customProperties=customProps;  Properties m_properties;  if (is != null) {    m_properties=convertXML(is,false,customProps);  } else {    m_properties=convertXML(m_sUri,false);  }  _containerPropertiesMap.put(containerName,m_properties);}  }
class C{  private static boolean snapExistingHorizontalMargin(ConstraintWidget widget,Point candidatePoint){  int x=candidatePoint.x;  ConstraintAnchor left=widget.getAnchor(ConstraintAnchor.Type.LEFT);  ConstraintAnchor right=widget.getAnchor(ConstraintAnchor.Type.RIGHT);  boolean snapped=false;  if (left.isConnected() && right.isConnected()) {  } else   if (left.isConnected()) {    int x1=x;    int x2=WidgetInteractionTargets.constraintHandle(left.getTarget()).getDrawX();    int margin=((x1 - x2) / SceneDraw.GRID_SPACING) * SceneDraw.GRID_SPACING;    if (margin < 0) {      margin=0;    }    left.setMargin(margin);    snapped=true;  } else   if (right != null && right.isConnected()) {    int x1=x + widget.getDrawWidth();    int x2=WidgetInteractionTargets.constraintHandle(right.getTarget()).getDrawX();    int margin=((x2 - x1) / SceneDraw.GRID_SPACING) * SceneDraw.GRID_SPACING;    if (margin < 0) {      margin=0;    }    right.setMargin(margin);    snapped=true;  }  return snapped;}  }
class C{  public void closeAll(){  ArrayList<ItemIndex> lvl3Sections=getItemIndices(ItemType.LVL3_SECTION);  for (  ItemIndex itemIndex : lvl3Sections) {    openCloseLvl3Section(itemIndex,false);  }  ArrayList<ItemIndex> lvl2Sections=getItemIndices(ItemType.LVL2_SECTION);  for (  ItemIndex itemIndex : lvl2Sections) {    openCloseLvl2Section(itemIndex,false);  }  ArrayList<ItemIndex> lvl1Sections=getItemIndices(ItemType.LVL1_SECTION);  for (  ItemIndex itemIndex : lvl1Sections) {    openCloseLvl1Section(itemIndex,false);  }}  }
class C{  public Builder riseOffset(Number riseOffset){  this.riseOffset=riseOffset;  return this;}  }
class C{  protected void invalidateSchema(){  m_schema=null;}  }
class C{  public CompositeSQLDataHandler(SQLDataHandler defaultHandler){  m_default=defaultHandler;}  }
class C{  public Stream<String> preOrderRightToLeftTraversal(String nodeName) throws SystemConfigException {  if (!moduleConfigurations.containsKey(nodeName)) {    LOG.error(NO_SUCH_MODULE.logFormat(nodeName));    throw new SystemConfigException(NO_SUCH_MODULE.format(nodeName));  }  return preOrderRightToLeftTraversal(nodeName,new ArrayList<>());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_INTERVAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200680,num0,skillcaster,skillname);}  }
class C{  public void listenAndFire(@NotNull ObservableValue<?> src,@NotNull InvalidationListener listener){  listen(src,listener);  listener.onInvalidated(src);}  }
class C{  public static boolean calculatePhysicalBlockRate(Creature attacker,Creature attacked){  if (attacked.getObserveController().checkAttackStatus(AttackStatus.BLOCK)) {    return true;  }  float accuracy=attacker.getGameStats().getMainHandPAccuracy().getCurrent();  float block=0;  if (attacked instanceof Player) {    block=attacked.getGameStats().getBlock().getBonus() + getMovementModifier(attacked,StatEnum.BLOCK,attacked.getGameStats().getBlock().getBase()) + attacked.getGameStats().getStat(StatEnum.PVP_BLOCK,0).getCurrent();  } else {    block=attacked.getGameStats().getBlock().getBonus() + getMovementModifier(attacked,StatEnum.BLOCK,attacked.getGameStats().getBlock().getBase());  }  float blockRate=block - accuracy;  if (blockRate > 500) {    blockRate=500;  }  return Rnd.nextInt(1000) < blockRate;}  }
class C{  public SelectScan(Scan s,Predicate pred){  this.s=s;  this.pred=pred;}  }
class C{  public void normalize(){  double totalCount=totalCount();  for (  E key : keySet()) {    setCount(key,getCount(key) / totalCount);  }  dirty=true;}  }
class C{  public static QueryColumnData newColumnData(String columnPath,AbstractDMLQuery query) throws SQLException {  if (query.isSelectQuery()) {    for (    SelectColumn sc : query.getQueryColumns()) {      if (sc.hasAlias()) {        if (sc.getAlias().compareToIgnoreCase(columnPath) == 0) {          columnPath=sc.getName();          break;        }      }    }  }  QueryColumnData columnData=null;  for (  QueryTableData tableData : query.getTablesData()) {    String tableName=null;    if (startsWith(columnPath,tableData.getTableName()))     tableName=tableData.getTableName(); else     if (startsWith(columnPath,tableData.getTableAlias()))     tableName=tableData.getTableAlias();    if (tableName != null) {      if (columnData != null) {        throw new SQLException("Ambiguous column path - [" + columnPath + "]");      }      columnData=QueryColumnData.newInstance(tableData,columnPath.substring(tableName.length() + 1));    }  }  if (columnData == null) {    columnData=QueryColumnData.newInstance(columnPath);    boolean assignedTable=false;    for (    QueryTableData tableData : query.getTablesData()) {      if (columnData.checkAndAssignTableData(tableData))       assignedTable=true;    }    if (!assignedTable) {      if (query.getTablesData().size() == 1) {        if (query.getTableData().getTypeDesc().supportsDynamicProperties()) {          columnData.setColumnTableData(query.getTableData());          return columnData;        }      }      throw new SQLException("Unknown column path [" + columnPath + "] .","GSP",-122);    }  }  return columnData;}  }
class C{  public static IOFileFilter suffixFileFilter(String suffix){  return new SuffixFileFilter(suffix);}  }
class C{  public Variance withBiasCorrection(boolean biasCorrection){  return new Variance(this.moment,this.incMoment,biasCorrection);}  }
class C{  public int compareTo(Object o){  if ((o == DONT_CARE) || (this == DONT_CARE)) {    return 0;  } else {    return ordinal - ((Age)o).ordinal;  }}  }
class C{  public boolean isEnabled(){  if (enabled == null) {    return true;  } else {    return enabled;  }}  }
class C{  public static <T>Observable.Transformer<T,T> applyComputationSchedulers(){  return (Observable.Transformer<T,T>)computationTransformer;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public Intent installIntent(){  return mInstallIntent;}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  protected void cleanTableView(){  if (++fLargeCount < 0) {    if (fAttributeTableViewChainState != null) {      for (int i=fTableViewBuckets - 1; i >= 0; --i) {        fAttributeTableViewChainState[i]=0;      }    }    fLargeCount=1;  }}  }
class C{  @Override public ClientHttpResponse intercept(HttpRequest request,byte[] body,ClientHttpRequestExecution execution) throws IOException {  if (doesSessionIdInCookieStoreExistAndMatchLatestSessionId()) {    injectCsrfTokenIntoHeader(request,latestCsrfToken);  } else {    startAuthenticationAndInjectCsrfToken(request);  }  ClientHttpResponse clientHttpResponse=execution.execute(request,body);  clientHttpResponse=handleResponse(request,body,execution,clientHttpResponse);  return clientHttpResponse;}  }
class C{  public final boolean canGetDate(String field){  Column col=getColumn(field);  return (col == null ? false : col.canGetDate());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_FLOODING_BLOCKED_1(String value0m){  return new SM_SYSTEM_MESSAGE(1300936,value0m);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);  setSupportActionBar(toolbar);  permissionCheck();  mapView=(MapView)findViewById(R.id.map);  mapView.onCreate(savedInstanceState);  mapView.getMapAsync(MainActivity.this);  buildGoogleApiClient();}  }
class C{  public void java_lang_Class_setSigners(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable tempFld=helper.tempField("<java.lang.Class signers>");  helper.assign(tempFld,params[0]);}  }
class C{  public AudioQuality(int samplingRate,int bitRate){  this.samplingRate=samplingRate;  this.bitRate=bitRate;}  }
class C{  private void initDictionaryChunkSize(){  dictionary_one_chunk_size=CarbonUtil.getDictionaryChunkSize();}  }
class C{  @Override public void projectOpened(){  checkForSupportedModules();  GradleSyncState syncState=GradleSyncState.getInstance(myProject);  if (syncState.isSyncInProgress()) {    syncState.notifyUser();  }  if (isAndroidStudio() && isLegacyIdeaAndroidProject(myProject) && !isApkProject(myProject)) {    trackLegacyIdeaAndroidProject();    if (shouldShowMigrateToGradleNotification()) {      showMigrateToGradleWarning();    }    return;  }  boolean isGradleProject=isBuildWithGradle(myProject);  if (isGradleProject) {    configureGradleProject();  } else   if (isAndroidStudio() && myProject.getBaseDir() != null && canImportAsGradleProject(myProject.getBaseDir())) {    GradleProjectImporter.getInstance().requestProjectSync(myProject,null);  }}  }
class C{  public DexDataWriter(@Nonnull OutputStream output,int filePosition){  this(output,filePosition,256 * 1024);}  }
class C{  @Override public FieldAccessorPostAggregation withName(String name){  throw new IllegalStateException("Field Access doesn't take name.");}  }
class C{  public ObjectFactory(){}  }
class C{  public RegexValidator(String regex,boolean caseSensitive){  this(new String[]{regex},caseSensitive);}  }
class C{  public static double[] variance(double[][] x,double[] meanVector,boolean isAlongRows){  double[] var=null;  if (x != null && x[0] != null && x[0].length > 0 && meanVector != null) {    if (isAlongRows) {      var=new double[x[0].length];      int j, i;      for (j=0; j < x[0].length; j++) {        for (i=0; i < x.length; i++)         var[j]+=(x[i][j] - meanVector[j]) * (x[i][j] - meanVector[j]);        var[j]/=(x.length - 1);      }    } else {      var=new double[x.length];      for (int i=0; i < x.length; i++) {        var[i]=variance(x[i],meanVector[i]);      }    }  }  return var;}  }
class C{  public void clear(){  prefix=null;  localpart=null;  rawname=null;  uri=null;}  }
class C{  public void rootAdded(ISVNRepositoryLocation root){  Iterator it=listeners.iterator();  while (it.hasNext()) {    IRepositoryListener listener=(IRepositoryListener)it.next();    listener.repositoryAdded(root);  }}  }
class C{  public void onRequestPermissionResult(int requestCode,String[] permissions,int[] grantResults) throws JSONException {  if (permissionResultCallback != null) {    permissionResultCallback.onRequestPermissionResult(requestCode,permissions,grantResults);    permissionResultCallback=null;  }}  }
class C{  public static TaskInfo unpackTaskInfo(TaskInfo taskInfo) throws InvalidProtocolBufferException {  if (!taskInfo.hasExecutor()) {    return taskInfo;  } else {    TaskInfo.Builder taskBuilder=TaskInfo.newBuilder(taskInfo);    ExecutorInfo pkgExecutorInfo=Protos.ExecutorInfo.parseFrom(taskInfo.getData());    if (pkgExecutorInfo.hasCommand()) {      taskBuilder.setCommand(pkgExecutorInfo.getCommand());    }    if (pkgExecutorInfo.hasData()) {      taskBuilder.setData(pkgExecutorInfo.getData());    }    return taskBuilder.build();  }}  }
class C{  public void addWrapper(ITaintPropagationWrapper wrapper){  this.wrappers.add(wrapper);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set show-consensus=" + !isSelected() + ";");}  }
class C{  private void fileSetBuildingTime(){  PrintWriter pw;  try {    pw=new PrintWriter(Settings.sBuildingVersionFileName);    pw.println(EncryptionManager.encrypt64bits(Settings.nBuildingTimes + ""));    pw.println(EncryptionManager.encrypt64bits(Settings.clientVersion));    pw.close();  } catch (  FileNotFoundException e) {    System.out.println("serverinfo.jrc do not exist");  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void createUI(){  panel=new JPanel();  panel.setLayout(null);  createField(FIELD_SERVER,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.server"));  createField(FIELD_PORT,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.port"));  createField(FIELD_DATABASE,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.database"));  createField(FIELD_USER,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.username"));  createField(FIELD_PASSWORD,Localisation.getField(DataSourceConnectorPostgres.class,"DataSourceConnectorPostgres.password"));  panel.setPreferredSize(new Dimension(FIELD_X + FIELD_WIDTH,textFieldMap.size() * ROW_HEIGHT));}  }
class C{  public void commitDragComponent(NlComponent component){  if (USE_GUIDELINES_DURING_DND) {    if (myDragDropWidget != null) {      myWidgetsScene.removeWidget(myDragDropWidget);      WidgetCompanion companion=(WidgetCompanion)myDragDropWidget.getCompanionWidget();      companion.setWidgetModel(component);      companion.setWidgetTag(component);    }  } else {    removeDragComponent();  }}  }
class C{  public PlacesAddQuery address(String value){  return unsafeParam("address",value);}  }
class C{  public MethodsClient methods(){  return new MethodsClientImpl(httpClient);}  }
class C{  public DataQueryParams conform(){  if (!(!getDataElements().isEmpty() && getDataElementOperands().isEmpty() && getIndicators().isEmpty()&& getReportingRates().isEmpty())) {    removeDimension(CATEGORYOPTIONCOMBO_DIM_ID);  }  return this;}  }
class C{  public static boolean isSDCardMounted(){  return android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){  mCallBackManager.onActivityResult(requestCode,resultCode,data);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public static float nextRandomFloat(){  return rand.nextFloat();}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public int size(){  int size=0;  for (  Map<C,V> row : dataMap.values()) {    size+=row.size();  }  return size;}  }
class C{  private void _cancelActivity(Activity a){  boolean fire=false;synchronized (this) {synchronized (a) {      if (a.isScheduled()) {        _removeActivity(a);        fire=true;      }      a.setRunning(false);    }  }  if (fire)   a.fireActivityCancelled();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200281,skillname);}  }
class C{  @RequestMapping(value="/configs/del",method=RequestMethod.POST) public JsonResponse delConfig(@RequestParam("appId") Long appId,@RequestParam("configName") String configName){  Response<Boolean> deleteResp=configService.delete(appId,configName);  if (!deleteResp.isSuccess()) {    Logs.error("failed to delete config(appId={}, name={}), cause: {}",appId,configName,deleteResp.getErr());    return JsonResponse.notOk(deleteResp.getErr());  }  return JsonResponse.ok(deleteResp.getData());}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  @Override public boolean equals(Object o){  return o instanceof AirMapAvailablePermit && getId().equals(((AirMapAvailablePermit)o).getId());}  }
class C{  public ElementType parent(){  return theType.parent();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DAY_CANNOT_SELL_AUCTION(String value0){  return new SM_SYSTEM_MESSAGE(1400945,value0);}  }
class C{  private void initModel(Activity a,Collection c){  this.photosModel=new PhotosObject(a,c,c.curated ? PhotosObject.PHOTOS_TYPE_CURATED : PhotosObject.PHOTOS_TYPE_NORMAL);  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);  this.scrollModel=new ScrollObject();}  }
class C{  private void sendOnTextChanged(CharSequence s,int start,int before,int count){  if (mListeners != null) {    for (int i=0; i < mListeners.size(); i++) {      mListeners.get(i).onTextChanged(s,start,before,count);    }  }}  }
class C{  public int next(){  matchesTextLength=0;  String queryLine=getNextLineStartsWith(NEW_QUERY);  if (queryLine == null)   return -1;  final String queryName=getNextToken(queryLine,NEW_QUERY);  int matchId=0;  matches.clear();  try {    while (hasNextLine()) {      String line=getNextLineStartsWith(NEW_QUERY,NEW_MATCH);      if (line == null)       break;      if (line.startsWith(NEW_QUERY)) {        pushBackLine(line);        break;      }      refHeaderLines.clear();      while (true) {        if (startsWith(line,LENGTH))         break; else         refHeaderLines.add(line.replaceAll("\\s+"," "));        line=nextLine().trim();      }      final int referenceLength=Basic.parseInt(getNextToken(line,LENGTH,EQUALS));      final String refName=Basic.swallowLeadingGreaterSign(Basic.toString(refHeaderLines," "));      do {        line=skipEmptyLines();        if (line.startsWith("Score ="))         break; else         line=nextLine().trim();      } while (hasNext());      final float bitScore=Basic.parseFloat(getNextToken(line,SCORE,EQUALS));      final int rawScore=Basic.parseInt(getNextToken(line,"("));      final float expect=Basic.parseFloat(getNextToken(line,EXPECT,EQUALS));      line=nextLine();      final float percentIdentities=Basic.parseFloat(getNextToken(line,IDENTITIES,"("));      line=nextLine();      final String queryDirection=getNextLetters(line,STRAND,"=");      final String refDirection=getNextToken(line,"/");      String[] queryLineTokens=getNextLineStartsWith(QUERY).split("\\s+");      int queryStart=Basic.parseInt(queryLineTokens[1]);      StringBuilder queryBuf=new StringBuilder();      queryBuf.append(queryLineTokens[2]);      int queryEnd=Basic.parseInt(queryLineTokens[3]);      if (!hasNextLine())       break;      nextLine();      String[] subjectLineTokens=getNextLineStartsWith(SUBJECT).split("\\s+");      int subjStart=Basic.parseInt(subjectLineTokens[1]);      StringBuilder subjBuf=new StringBuilder();      subjBuf.append(subjectLineTokens[2]);      int subjEnd=Basic.parseInt(subjectLineTokens[3]);      while (hasNextLine()) {        line=skipEmptyLines();        if (line == null)         break;        if (line.startsWith(NEW_QUERY)) {          pushBackLine(line);          break;        } else         if (line.startsWith(NEW_MATCH)) {          pushBackLine(line);          break;        } else         if (line.startsWith(SCORE)) {          pushBackLine(getNextLineStartsWith(NEW_QUERY));        } else         if (line.startsWith(QUERY)) {          queryLineTokens=line.split("\\s+");          queryBuf.append(queryLineTokens[2]);          queryEnd=Basic.parseInt(queryLineTokens[3]);          subjectLineTokens=getNextLineStartsWith(SUBJECT).split("\\s+");          subjBuf.append(subjectLineTokens[2]);          subjEnd=Basic.parseInt(subjectLineTokens[3]);        }      }      if (matches.size() < getMaxNumberOfMatchesPerRead() || bitScore > matches.last().bitScore) {        Match match=new Match();        match.bitScore=bitScore;        match.id=matchId++;        match.samLine=makeSAM(queryName,queryDirection,refName,referenceLength,refDirection,bitScore,expect,rawScore,percentIdentities,queryStart,queryEnd,subjStart,subjEnd,queryBuf.toString(),subjBuf.toString());        matches.add(match);        if (matches.size() > getMaxNumberOfMatchesPerRead())         matches.remove(matches.last());      }    }  } catch (  Exception ex) {    System.err.println("Error parsing file near line: " + getLineNumber() + ": "+ ex.getMessage());    if (incrementNumberOfErrors() >= getMaxNumberOfErrors())     throw new RuntimeException("Too many errors");  }  if (matches.size() == 0) {    if (queryName.length() > matchesText.length) {      matchesText=new byte[2 * queryName.length()];    }    for (int i=0; i < queryName.length(); i++)     matchesText[matchesTextLength++]=(byte)queryName.charAt(i);    matchesText[matchesTextLength++]='\n';    return 0;  } else {    for (    Match match : matches) {      byte[] bytes=match.samLine.getBytes();      if (matchesTextLength + bytes.length + 1 >= matchesText.length) {        byte[] tmp=new byte[2 * (matchesTextLength + bytes.length + 1)];        System.arraycopy(matchesText,0,tmp,0,matchesTextLength);        matchesText=tmp;      }      System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);      matchesTextLength+=bytes.length;      matchesText[matchesTextLength++]='\n';    }    return matches.size();  }}  }
class C{  public static final String toString(Vector vector){  if (vector == null)   return "null";  StringBuffer output=new StringBuffer();  toString(output,vector);  return output.toString();}  }
class C{  public int bitWidth(){  return bitWidth;}  }
class C{  public static void dialNumber(Context context,String phoneNumber){  openDialerActivityWithAction(context,phoneNumber,Intent.ACTION_DIAL);}  }
class C{  public static void drawTooltip(Graphics2D g,ColorSet colorSet,String[] lines,int x,int y,boolean above){  if (lines == null) {    return;  }  Font prefont=g.getFont();  Color precolor=g.getColor();  Stroke prestroke=g.getStroke();  g.setFont(sFont);  FontMetrics fm=g.getFontMetrics(sFont);  int offset=4 * sArrowBase;  int margin=2;  int padding=5;  int textWidth=0;  int textHeight=2 * padding;  for (  String line : lines) {    textWidth=Math.max(textWidth,fm.stringWidth(line));    int th=(int)fm.getStringBounds(line,g).getHeight();    textHeight+=th + margin;  }  textHeight-=margin;  textWidth+=2 * padding;  int rectX=x - offset;  int rectY=y - textHeight - 2 * sArrowHeight - offset;  if (!above) {    rectY=y + offset + 2 * sArrowHeight;  }  Polygon triangle=sTooltipTriangleDown;  int triangleY=rectY + textHeight;  if (!above) {    triangle=sTooltipTriangleUp;    triangleY=rectY;  }  g.setColor(colorSet.getBackground());  g.setStroke(sLineShadowStroke);  triangle.translate(x,triangleY);  g.fillPolygon(triangle);  g.draw(triangle);  triangle.translate(-x,-triangleY);  g.fillRoundRect(rectX,rectY,textWidth,textHeight,2,2);  g.drawRoundRect(rectX,rectY,textWidth,textHeight,2,2);  g.setColor(colorSet.getTooltipBackground());  g.setStroke(sBasicStroke);  triangle.translate(x,triangleY);  g.fillPolygon(triangle);  g.draw(triangle);  triangle.translate(-x,-triangleY);  g.fillRoundRect(rectX,rectY,textWidth,textHeight,2,2);  g.drawRoundRect(rectX,rectY,textWidth,textHeight,2,2);  int ty=rectY + padding;  for (int i=0; i < lines.length; i++) {    int tw=fm.stringWidth(lines[i]);    int tx=rectX + textWidth / 2 - tw / 2;    g.setColor(colorSet.getTooltipText());    g.drawString(lines[i],tx,ty + fm.getMaxAscent());    ty+=fm.getStringBounds(lines[i],g).getHeight() + margin;  }  g.setFont(prefont);  g.setColor(precolor);  g.setStroke(prestroke);}  }
class C{  public static Tags matchingKeys(Tags in,Set<String> keys){  return Tags.valueOf(in.asMap().entrySet().stream().filter(null));}  }
class C{  public HarmonicCurveFitter withStartPoint(double[] newStart){  return new HarmonicCurveFitter(newStart.clone(),maxIter);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANT_CHANGE_SAME_ITEM_SKIN(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400371,value0,value1);}  }
class C{  public WallSearchQuery domain(String value){  return unsafeParam("domain",value);}  }
class C{  public long split(int splitSlot,long[] flags){  BlockId newBlk=appendBlock(flags);  BTreePage newPage=new BTreePage(newBlk,flags.length,schema,tx);  transferRecords(splitSlot,newPage,0,getNumRecords() - splitSlot);  newPage.close();  return newBlk.number();}  }
class C{  public static boolean isFileExist(String filePath,FileType fileType) throws IOException {  filePath=filePath.replace("\\","/");switch (fileType) {case HDFS:case VIEWFS:    Path path=new Path(filePath);  FileSystem fs=path.getFileSystem(configuration);return fs.exists(path);case LOCAL:default :File defaultFile=new File(filePath);return defaultFile.exists();}}  }
class C{  private static String toPrometheusString_(List<String> s){  return String.join("_",s.stream().map(null).collect(Collectors.toList()));}  }
class C{  public void invalidate(){  if (conductorSet == null) {    return;  }  remove();}  }
class C{  public StatelessScrollableDataIterator(SQLQuery sqlQuery,SessionFactory sessionFactory,int fetchSize,boolean performOrderById){  super(sqlQuery,sessionFactory,fetchSize,performOrderById);}  }
class C{  private void printTo(Body b,PrintWriter out){  b.validate();  String decl=b.getMethod().getDavaDeclaration();{    out.println("    " + decl);    for (Iterator<Tag> tIt=b.getMethod().getTags().iterator(); tIt.hasNext(); ) {      final Tag t=tIt.next();      if (Options.v().print_tags_in_output()) {        out.println(t);      }    }    out.println("    {");  }  printStatementsInBody(b,out);  out.println("    }");}  }
class C{  public static int gap(Direction direction,Rectangle region,ConstraintWidget[] list){  int rootWidth=list[0].getParent().getWidth();  int rootHeight=list[0].getParent().getHeight();  Rectangle rect=new Rectangle();switch (direction) {case NORTH:{      rect.y=0;      rect.x=region.x + 1;      rect.width=region.width - 2;      rect.height=region.y;    }  break;case SOUTH:{  rect.y=region.y + region.height + 1;  rect.x=region.x + 1;  rect.width=region.width - 2;  rect.height=rootHeight - rect.y;}break;case WEST:{rect.y=region.y + 1;rect.x=0;rect.width=region.x;rect.height=region.height - 2;}break;case EAST:{rect.y=region.y + 1;rect.x=region.x + region.width + 1;rect.width=rootWidth - rect.x;rect.height=region.height - 2;}break;}int min=Integer.MAX_VALUE;for (int i=0; i < list.length; i++) {ConstraintWidget widget=list[i];Rectangle r=getRectangle(widget);if (r.intersects(rect)) {int dist=(int)distance(r,region);if (min > dist) {min=dist;}}}if (min > Math.max(rootHeight,rootWidth)) {switch (direction) {case NORTH:return region.y;case SOUTH:return rootHeight - (region.y + region.height);case WEST:return region.x;case EAST:return rootWidth - (region.x + region.width);}}return min;}  }
class C{  public synchronized String encrypt(String str){  byte[] utf8;  try {    utf8=str.getBytes("UTF-8");    byte[] enc=encrypter.doFinal(utf8);    return encoder.encode(enc);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }catch (  IllegalBlockSizeException e) {    e.printStackTrace();  }catch (  BadPaddingException e) {    e.printStackTrace();  }  return "";}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  fixPhoneme_AH(utterance);  englishPostLex.processUtterance(utterance);}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("Bad class hierarchy");}  }
class C{  public EnvVarDlg(EnvironmentManagerInterface envVarMgr){  super(Controller.getInstance().getFrame(),Localisation.getString(EnvVarDlg.class,"EnvVarDlg.title"),true);  this.envVarMgr=envVarMgr;  createUI();  setSize(600,300);  pack();  Controller.getInstance().centreDialog(this);}  }
class C{  protected MessagesGetChatUsersQueryWithFields fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof GraphView && ((GraphView)getViewer()).getSelectedEdges().size() > 0;}  }
class C{  public boolean isTrustedObject(Object obj,TrustVerifier.Context ctx) throws RemoteException {  if (obj == null || ctx == null) {    throw new NullPointerException("arguments must not be null");  }  final RemoteMethodControl inputProxyServer;  if (obj instanceof ConstrainableLandlordLease) {    final ConstrainableLandlordLease cll=(ConstrainableLandlordLease)obj;    if (!landlordUuid.equals(cll.landlordUuid()))     return false;    inputProxyServer=(RemoteMethodControl)cll.landlord();  } else {    return false;  }  final MethodConstraints mConstraints=inputProxyServer.getConstraints();  final TrustEquivalence constrainedServer=(TrustEquivalence)landlord.setConstraints(mConstraints);  return constrainedServer.checkTrustEquivalence(inputProxyServer);}  }
class C{  public BafBody newBody(SootMethod m){  return new BafBody(m);}  }
class C{  public TIntHashSet(int initialCapacity){  super(initialCapacity);}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Contexts))   return false;  final Contexts other=(Contexts)o;  final Object this$context=this.getContexts();  final Object other$context=other.getContexts();  if (this$context == null ? other$context != null : !this$context.equals(other$context))   return false;  if (this.isOp() != other.isOp())   return false;  if (this.isIncludeGlobal() != other.isIncludeGlobal())   return false;  if (this.isIncludeGlobalWorld() != other.isIncludeGlobalWorld())   return false;  if (this.isApplyGroups() != other.isApplyGroups())   return false;  if (this.isApplyGlobalGroups() != other.isApplyGlobalGroups())   return false;  if (this.isApplyGlobalWorldGroups() != other.isApplyGlobalWorldGroups())   return false;  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PETITION_GM_CHAT_MSG(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300564,value0,value1);}  }
class C{  private void createDefaultInstance(ServiceDocument state,Consumer<Throwable> callback,int retryCount){  String factoryPath=UriUtils.getParentPath(state.documentSelfLink);  logInfo("Creating Default instance for %s",state.documentSelfLink);  sendRequest(Operation.createPost(this,factoryPath).addPragmaDirective(Operation.PRAGMA_DIRECTIVE_FORCE_INDEX_UPDATE).setBody(state).setCompletion(null));}  }
class C{  private void performDrag(MotionEvent event){  mLastGesture=ChartGesture.DRAG;  mTouchMatrix.set(mSavedMatrix);  float dX=event.getX() - mTouchStartPoint.x;  float dY=event.getY() - mTouchStartPoint.y;  mTouchMatrix.postTranslate(dX,dY);  OnChartGestureListener listener=mChart.getOnChartGestureListener();  if (listener != null) {    listener.onChartTranslate(event,dX,dY);  }}  }
class C{  public StopEvent(BinlogEventHeader eventHeader){  super(eventHeader);}  }
class C{  public boolean ignore_types(){  return soot.PhaseOptions.getBoolean(options,"ignore-types");}  }
class C{  public Path relativizeWithSourceDirectory(Path path){  return sourceDirectoryPath.relativize(path.toAbsolutePath());}  }
class C{  public PhotosGetByIdQueryWithExtended(VkApiClient client,String... photos){  super(client,"photos.getById",Utils.buildParametrizedType(List.class,PhotoFull.class));  photos(photos);  extended(true);}  }
class C{  public static Vector<OCFile> sortOcFolder(Vector<OCFile> files){switch (mSortOrder) {case 0:    files=FileStorageUtils.sortOCFilesByName(files);  break;case 1:files=FileStorageUtils.sortOCFilesByDate(files);break;case 2:files=FileStorageUtils.sortOCFilesBySize(files);break;}files=FileStorageUtils.sortOCFilesByFavourite(files);return files;}  }
class C{  @Override protected Object onGetDefaultValue(TypedArray a,int index){  return a.getInt(index,0);}  }
class C{  private void checkDifferState(){  differObserver.operationCount=0;  testAdapter.registerAdapterDataObserver(differObserver);  testAdapter.notifyModelsChanged();  testAdapter.unregisterAdapterDataObserver(differObserver);  Assert.assertEquals("Should not have any operations",0,differObserver.operationCount);}  }
class C{  public Potion(PotionType type,int level){  this(type);  Validate.notNull(type,"Type cannot be null");  Validate.isTrue(level > 0 && level < 3,"Level must be 1 or 2");  this.level=level;}  }
class C{  public Boolean shouldOpenExternalUrl(String url){  return null;}  }
class C{  public AdsGetAdsLayoutQuery adIds(String value){  return unsafeParam("ad_ids",value);}  }
class C{  @Override public int hashCode(){  return (int)(delta ^ (delta >> 32));}  }
class C{  public XPointerParserConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  public void addNewPoint(){  pointList.add(new WKTPoint());  this.fireTableDataChanged();}  }
class C{  public TypeVariable typeVariable(){  int id=typeVariableList.size();  typeVariableList.add(null);  TypeVariable result=new TypeVariable(id,this);  typeVariableList.set(id,result);  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_IS_BANISHED(String value0){  return new SM_SYSTEM_MESSAGE(1300204,value0);}  }
class C{  public boolean classContains(WebElement element,String value){  return hasAttributeWithValue(element,HtmlTags.Attributes.CLASS,value);}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public void handleOMADownload(DownloadInfo downloadInfo,long downloadId){  OMAParserTask task=new OMAParserTask(downloadInfo,downloadId);  task.execute();}  }
class C{  NewProjectDescriptor withActivity(@NotNull String activity){  myActivity=activity;  return this;}  }
class C{  public static void println(short x){  out.println(x);}  }
class C{  public OutputQueue(int size){  this.size=size;}  }
class C{  public static boolean equalInterfaces(Object obj1,Object obj2){  Class[] intf1=obj1.getClass().getInterfaces();  Class[] intf2=obj2.getClass().getInterfaces();  if (intf1.length != intf2.length) {    return false;  } else {    for (int i=0; i < intf1.length; i++) {      if (intf1[i] != intf2[i]) {        return false;      }    }    return true;  }}  }
class C{  public static Zmat aib(Zltmat L,Zmat B) throws JampackException {  int i, j, k;  Z x=new Z();  L.getProperties();  B.getProperties();  if (L.nr != L.nc)   throw new JampackException("Rectangular matrix.");  if (L.nr != B.nr)   throw new JampackException("Inconsistent dimensions.");  Zmat X=new Zmat(B);  for (i=0; i < L.nr; i++)   for (j=0; j < B.nc; j++) {    for (k=0; k < i; k++) {      X.re[i][j]=X.re[i][j] - L.re[i][k] * X.re[k][j] + L.im[i][k] * X.im[k][j];      X.im[i][j]=X.im[i][j] - L.im[i][k] * X.re[k][j] - L.re[i][k] * X.im[k][j];    }    if (L.re[i][i] == 0.0 && L.im[i][i] == 0.0)     throw new JampackException("Zero diagonal in solving triangular system");    X.put0(i,j,x.Div(X.get0(i,j),L.get0(i,i)));  }  return X;}  }
class C{  public LeastSquaresBuilder weight(final RealMatrix newWeight){  this.weight=newWeight;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_HOUSING_OBJECT_DELETE_USE_COUNT_FINAL(int nameId){  return new SM_SYSTEM_MESSAGE(1401470,calculateNameId(nameId));}  }
class C{  public boolean copyConsensus(){  final SelectedBlock selectedBlock=getSelectedBlock();  if (selectedBlock.isSelected()) {    StringSelection ss=new StringSelection(getSelectedConsensus());    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss,null);    return true;  }  return false;}  }
class C{  private Instruction locateInstr(int index,int mini,int maxi){  int mid=(maxi - mini) / 2 + mini;  if (mini > maxi)   return null;  if (instructions[mid].label == index)   return instructions[mid];  if (instructions[mid].label > index)   return locateInstr(index,mini,mid - 1);  return locateInstr(index,mid + 1,maxi);}  }
class C{  public static void main(String[] args){  FileSystemExtension mgr=new FileSystemExtension();  mgr.initialise(null,null);  JPanel panel=mgr.getPanel();  JFrame frame=new JFrame();  frame.getContentPane().add(panel);  frame.setVisible(true);  frame.setSize(400,600);}  }
class C{  public Plane rotate(final Vector3D center,final Rotation rotation){  final Vector3D delta=origin.subtract(center);  final Plane plane=new Plane(center.add(rotation.applyTo(delta)),rotation.applyTo(w),tolerance);  plane.u=rotation.applyTo(u);  plane.v=rotation.applyTo(v);  return plane;}  }
class C{  @Override protected void synchronizeChildren(){  needsSyncChildren(false);  isReadOnly(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)ownerDocument();  ownerDocument.synchronizeChildren(this,fNodeIndex);  setReadOnly(true,true);}  }
class C{  @Slow public City(@NotNull MineCity mineCity,@NotNull String name,@Nullable PlayerID owner,@NotNull BlockPos spawn) throws IllegalArgumentException, DataSourceException {  this.mineCity=mineCity;  this.name=name;  identityName=identity(name);  this.owner=owner == null ? new AdminCity(this) : owner;  this.spawn=spawn;  if (identityName.length() < 3)   throw new IllegalArgumentException("Bad name");  String conflict=mineCity.dataSource.checkNameConflict(identityName);  if (conflict != null)   throw new IllegalArgumentException("The name is already taken by: " + conflict);  ClaimedChunk other=mineCity.getChunk(spawn).orElse(null);  if (other != null && !(other.owner instanceof Nature))   throw new IllegalArgumentException("The chunk " + spawn.getChunk() + " is reserved to "+ other.owner);  CityCreationResult result=mineCity.dataSource.createCity(this);  storage=result.storage;  permissionStorage=result.permissionStorage;  islands=new HashMap<>(1);  islands.put(result.island.getId(),result.island);  groups=new HashMap<>(result.groups.size());  result.groups.forEach(null);  try {    defaultMessages=mineCity.defaultCityFlags.getDefaultMessages();    denyAll(mineCity.defaultCityFlags);  } catch (  UncheckedDataSourceException e) {    System.err.println("[MineCity][SQL] Exception applying the default city flags!");    e.getCause().printStackTrace(System.err);  }  try {    mineCity.reloadChunk(spawn.getChunk());  } catch (  DataSourceException e) {    System.err.println("[MineCity][SQL] Exception reloading a chunk");    e.printStackTrace(System.err);  }}  }
class C{  public static void startFetchingAccountInformation(Context context,Profile profile,String accountName){  if (TextUtils.isEmpty(accountName))   return;  if (sToNamePicture.get(accountName) != null)   return;  final int imageSidePixels=context.getResources().getDimensionPixelOffset(R.dimen.user_picture_size);  ProfileDownloader.startFetchingAccountInfoFor(context,profile,accountName,imageSidePixels,false);}  }
class C{  public static boolean nullEquals(String s1,String s2){  return (s1 == null ? s2 == null : s1.equals(s2));}  }
class C{  static int themeIntAttr(Context context,String attr){  final Resources.Theme theme=context.getTheme();  if (theme == null) {    return -1;  }  final TypedValue value=new TypedValue();  final int id=context.getResources().getIdentifier(attr,"attr",context.getPackageName());  if (id == 0) {    return -1;  }  theme.resolveAttribute(id,value,true);  return value.data;}  }
class C{  Delta newDropTable(){  Delta storageDelta=Deltas.mapBuilder().put(StorageState.DROPPED.getMarkerAttribute().key(),now()).build();  MapDeltaBuilder storageMapDelta=Deltas.mapBuilder();  if (_master != null) {    for (    Storage storage : _master.getPrimaryAndMirrors()) {      storageMapDelta.update(storage.getUuidString(),storageDelta);    }  }  for (  Storage facade : _facades) {    for (    Storage storage : facade.getPrimaryAndMirrors()) {      storageMapDelta.update(storage.getUuidString(),storageDelta);    }  }  return Deltas.mapBuilder().remove(UUID_ATTR.key()).remove(ATTRIBUTES.key()).update(STORAGE.key(),storageMapDelta.build()).removeRest().build();}  }
class C{  public static KeyPair createKeyPair(String key){  AssertUtil.assertNotNull(key,"key");  String decryptedKey=EncryptionUtils.decrypt(key);  try (PEMParser parser=new PEMParser(new StringReader(decryptedKey))){    JcaPEMKeyConverter converter=new JcaPEMKeyConverter();    PEMKeyPair keyPair=(PEMKeyPair)parser.readObject();    if (keyPair == null) {      throw new RuntimeException("A valid key pair was not found");    }    return converter.getKeyPair(keyPair);  } catch (  IOException e) {    throw new RuntimeException("Failed to create key pair",e);  }}  }
class C{  public static double expm1(double x){  return expm1(x,null);}  }
class C{  private void updateCovariance(boolean hsig,final RealMatrix bestArx,final RealMatrix arz,final int[] arindex,final RealMatrix xold){  double negccov=0;  if (ccov1 + ccovmu > 0) {    final RealMatrix arpos=bestArx.subtract(repmat(xold,1,mu)).scalarMultiply(1 / sigma);    final RealMatrix roneu=pc.multiply(pc.transpose()).scalarMultiply(ccov1);    double oldFac=hsig ? 0 : ccov1 * cc * (2 - cc);    oldFac+=1 - ccov1 - ccovmu;    if (isActiveCMA) {      negccov=(1 - ccovmu) * 0.25 * mueff / (FastMath.pow(dimension + 2,1.5) + 2 * mueff);      final double negminresidualvariance=0.66;      final double negalphaold=0.5;      final int[] arReverseIndex=reverse(arindex);      RealMatrix arzneg=selectColumns(arz,Arrays.copyOf(arReverseIndex,mu));      RealMatrix arnorms=sqrt(sumRows(square(arzneg)));      final int[] idxnorms=sortedIndices(arnorms.getRow(0));      final RealMatrix arnormsSorted=selectColumns(arnorms,idxnorms);      final int[] idxReverse=reverse(idxnorms);      final RealMatrix arnormsReverse=selectColumns(arnorms,idxReverse);      arnorms=divide(arnormsReverse,arnormsSorted);      final int[] idxInv=inverse(idxnorms);      final RealMatrix arnormsInv=selectColumns(arnorms,idxInv);      final double negcovMax=(1 - negminresidualvariance) / square(arnormsInv).multiply(weights).getEntry(0,0);      if (negccov > negcovMax) {        negccov=negcovMax;      }      arzneg=times(arzneg,repmat(arnormsInv,dimension,1));      final RealMatrix artmp=BD.multiply(arzneg);      final RealMatrix Cneg=artmp.multiply(diag(weights)).multiply(artmp.transpose());      oldFac+=negalphaold * negccov;      C=C.scalarMultiply(oldFac).add(roneu).add(arpos.scalarMultiply(ccovmu + (1 - negalphaold) * negccov).multiply(times(repmat(weights,1,dimension),arpos.transpose()))).subtract(Cneg.scalarMultiply(negccov));    } else {      C=C.scalarMultiply(oldFac).add(roneu).add(arpos.scalarMultiply(ccovmu).multiply(times(repmat(weights,1,dimension),arpos.transpose())));    }  }  updateBD(negccov);}  }
class C{  public void deleteLastComponent(String componentName){  getLastComponent(componentName).delete();}  }
class C{  public void addTypeParameter(TypeVariable node){  List<TypeVariable> list=(parent == null || state == null) ? getTypeParameterListNoTransform() : getTypeParameterList();  list.addChild(node);}  }
class C{  @Override public void characters(char ch[],int start,int length) throws SAXException {  if (saxParser != null) {    saxParser.characters(ch,start,length);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Polymorph_ME_TO_B(String skilltarget,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200542,skilltarget,value0,skillname);}  }
class C{  VarImpl(){  this.name=UUID.randomUUID().toString();  this.userDefinedName=false;}  }
class C{  @Override public void aroundWriteTo(WriterInterceptorContext writerInterceptorContext) throws IOException {  LengthOfOutputStream stream=(LengthOfOutputStream)writerInterceptorContext.getProperty(PROPERTY_OUTPUT_STREAM);  try {    writerInterceptorContext.proceed();    if (stream != null) {      emitSuccess(stream);    }  } catch (  EOFException e) {    if (stream != null) {      emitError(stream,e);    }    LOG.warn("Connection to client closed prematurely.",e);  }catch (  Error|RuntimeException|IOException e) {    if (stream != null) {      emitError(stream,e);    }    LOG.error("Error encountered while streaming response back to the client.",e);    throw e;  } finally {    try {      RequestLog.stopTiming(this);      RequestLog.stopTiming(TOTAL_TIMER);      RequestLog.log();    } catch (    Exception e) {      LOG.error("Error finalizing the BardLoggingFilter output stream wrapper.",e);    }  }}  }
class C{  public static NamedFileChannel createNewFile(Path dir,String prefix,String suffix) throws IOException {  return createNewFileImpl(dir,prefix,suffix,new OpenOption[]{READ,WRITE,CREATE_NEW});}  }
class C{  public PhotoDetailsImplementor(PhotoDetailsModel model,PhotoDetailsView view){  this.model=model;  this.view=view;}  }
class C{  private boolean isHoneycombOrHigher(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {    return true;  }  return false;}  }
class C{  public Future<Boolean> analyzeTraffic(final RequestPredicate requestPredicate,final int timeout){  Future<Boolean> future=Executors.newSingleThreadExecutor().submit(new AnalyzerCallable(requestPredicate,timeout,proxyEnabled,proxyListeners,controller,registry));  return new DispatchingFuture(future,proxyListeners);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public Builder version(String version){  this.version=version;  return this;}  }
class C{  private void initializeIndexSearcher(){  if (luceneIndexSearcher == null) {    reopenIndexSearcher(true);  }}  }
class C{  public Dfp newInstance(final long x){  return new Dfp(getField(),x);}  }
class C{  public IObjectInfo insertEntryIndexedField(TemplateCacheInfo pTemplate,K fieldValue,TypeData pType,boolean alreadyCloned){  IObjectInfo oi=null;  IStoredList<TemplateCacheInfo> newSL=null;  IStoredList<TemplateCacheInfo> currentSL=null;  boolean first=true;  _size.incrementAndGet();  while (true) {    if (first) {      first=false;      currentSL=_orderedStore.get(fieldValue);    }    if (currentSL == null) {      if (!alreadyCloned && _index.considerValueClone()) {        fieldValue=(K)_index.cloneIndexValue(fieldValue,pTemplate.m_TemplateHolder);        alreadyCloned=true;      }      currentSL=_orderedStore.putIfAbsent(fieldValue,pTemplate);      if (currentSL == null) {        oi=pTemplate;        break;      }    }    if (currentSL.isMultiObjectCollection()) {      oi=currentSL.add(pTemplate);      if (oi == null) {        _orderedStore.remove(fieldValue,currentSL);        currentSL=null;        continue;      } else       break;    }    if (newSL == null)     newSL=StoredListFactory.createConcurrentList(false,true);    IObjectInfo otheroi=newSL.addUnlocked(currentSL.getObjectFromHead());    IObjectInfo myoi=newSL.addUnlocked(pTemplate);    if (!_orderedStore.replace(fieldValue,currentSL,newSL)) {      newSL.removeUnlocked(otheroi);      newSL.removeUnlocked(myoi);      myoi=null;      currentSL=null;    } else {      oi=myoi;      break;    }  }  return oi;}  }
class C{  public void renew(long duration) throws UnknownLeaseException, LeaseDeniedException, RemoteException {  super.renew(duration);synchronized (this) {    if (createdXtn != null) {      ServerTransaction txn=(ServerTransaction)createdXtn;      txn.setLease(duration);    }  }}  }
class C{  private void removeMemberFromReplGroup(String targetMemberName) throws ClusterException {  Element tarMemElem=findMemberInReplGroup(targetMemberName);  if (tarMemElem == null)   throw new ClusterException(targetMemberName + " couldn't found in no replication group.");  Node parentNode=tarMemElem.getParentNode();  parentNode.removeChild(tarMemElem);  Element clusMemElem=(Element)m_rootDoc.getElementsByTagName(CLUSTER_MEMBERS_TAG).item(0);  NodeList memNodeList=clusMemElem.getElementsByTagName(MEMBER_NAME_TAG);  for (int v=0; v < memNodeList.getLength(); v++) {    String memName=memNodeList.item(v).getFirstChild().getNodeValue().trim();    if (memName.equalsIgnoreCase(targetMemberName)) {      Node memElem=memNodeList.item(v).getParentNode();      clusMemElem.removeChild(memElem);      break;    }  }}  }
class C{  public DistributedLogClientBuilder finagleNameStrs(String local,String... remotes){  DistributedLogClientBuilder newBuilder=newBuilder(this);  RoutingService.Builder[] builders=new RoutingService.Builder[remotes.length + 1];  builders[0]=RoutingUtils.buildRoutingService(local);  for (int i=1; i < builders.length; i++) {    builders[i]=RoutingUtils.buildRoutingService(remotes[i - 1]);  }  newBuilder._routingServiceBuilder=RegionsRoutingService.newBuilder().routingServiceBuilders(builders).resolver(_regionResolver);  newBuilder._enableRegionStats=remotes.length > 0;  return newBuilder;}  }
class C{  @RequestMapping(value="/pet-categories/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deletePetCategory(@PathVariable String id){  log.debug("REST request to delete PetCategory : {}",id);  petCategoryService.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("petCategory",id.toString())).build();}  }
class C{  public static void o(Z[] a,int w,int d){  int n=a.length;  int ww=w + d + 10;  int ncp=(Parameters.PageWidth) / ww;  int jl=0;  while (jl < n) {    int ju=Math.min(n,jl + ncp);    System.out.print("\n");    String head="";    for (int j=jl; j < ju; j++) {      head=Integer.toString(j);      while (head.length() < ww)       head=" " + head;      System.out.print(head);    }    System.out.print("\n");    for (int j=jl; j < ju; j++) {      System.out.print(ZtoEstring(a[j],w,d));    }    System.out.print("\n");    jl=jl + ncp;  }}  }
class C{  public void click(MenuOption menuOption){  toolbar.findElement(By.xpath(String.format(".//button[text()=%s]",XpathUtils.quote(menuOption.getLabel())))).click();}  }
class C{  protected static int toDigit(char ch,int index) throws Exception {  int digit=Character.digit(ch,16);  if (digit == -1) {    throw new Exception("Illegal hexadecimal charcter " + ch + " at index "+ index);  }  return digit;}  }
class C{  public RequestHandle head(String url,ResponseHandlerInterface responseHandler){  return head(null,url,null,responseHandler);}  }
class C{  public void executeTraceRoute(){  this.ttl=1;  this.finishedTasks=0;  this.traces=new ArrayList<TraceRouteContainer>();  new ExecutePingAsyncTask(50).execute();}  }
class C{  private static double computeKLD(double[] px,double[] py){  double result=0;  for (int i=0; i < px.length; i++) {    double xi=Math.max(px[i],0.0000000001);    double yi=Math.max(py[i],0.0000000001);    result+=xi * Math.log(xi / yi);  }  return result;}  }
class C{  public boolean isImageOutlineLineVisible(Object parentObj,Object obj){  boolean enabled=false;  if (overallEnableSymbolizersOverride) {    if (obj instanceof RasterSymbolizer) {      RasterSymbolizer raster=(RasterSymbolizer)obj;      enabled=(raster.getImageOutline() == null) && (geometryType == GeometryTypeEnum.RASTER);    }  }  return enabled;}  }
class C{  public int skipBytes(int bytes) throws IOException {  return io.skipBytes(bytes);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DECOMPOSE_ITEM_CANCELED(int nameId){  return new SM_SYSTEM_MESSAGE(1300450,new DescriptionId(nameId));}  }
class C{  public Object remove(){  if (_bottom == _top)   return null;  Object ret=_buf[_top];  _top=(_top == _buf.length - 1) ? 0 : _top + 1;  return ret;}  }
class C{  private void scan(){  for (  Field field : target.getClass().getDeclaredFields()) {    for (    AbstractAnnotationManager manager : managers)     if (manager.canManage(field))     manager.scanned(field);  }}  }
class C{  public DummyFreeTTSVoice(marytts.modules.synthesis.Voice maryVoice,String lexiconClassName){  initialise(maryVoice,lexiconClassName);}  }
class C{  private Pipeline createPipeline(){  Tokenizer tokenizer=new Tokenizer().setInputCol("featureStrings").setOutputCol("tokens");  CountVectorizer countVectorizer=new CountVectorizer().setInputCol("tokens").setOutputCol("features").setMinDF((Double)params.getOrDefault(params.getMinFF())).setVocabSize((Integer)params.getOrDefault(params.getNumFeatures()));  StringIndexer tagIndexer=new StringIndexer().setInputCol("tag").setOutputCol("label");  Pipeline pipeline=new Pipeline().setStages(new PipelineStage[]{tokenizer,countVectorizer,tagIndexer});  return pipeline;}  }
class C{  public boolean canSetString(){  return m_parser != null && !(m_parser instanceof ObjectParser);}  }
class C{  @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){switch (itemList.get(viewType).getType()) {case AboutModel.TYPE_HEADER:    return new HeaderHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_about_header,parent,false));case AboutModel.TYPE_CATEGORY:  return new CategoryHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_abuot_category,parent,false),(CategoryAboutObject)itemList.get(viewType));case AboutModel.TYPE_APP:return new AppHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_about_app,parent,false),(AppAboutObject)itemList.get(viewType));case AboutModel.TYPE_TRANSLATOR:return new TranslatorHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_about_translator,parent,false),(TranslatorObject)itemList.get(viewType));case AboutModel.TYPE_LIBRARY:return new LibraryHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_about_library,parent,false),(LibraryObject)itemList.get(viewType));default :return null;}}  }
class C{  public DistributedLogClientBuilder host(SocketAddress address){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(address);  newBuilder._enableRegionStats=false;  return newBuilder;}  }
class C{  public void startIntent(String title){  Intent chooser=Intent.createChooser(mIntent,title);  mContext.startActivity(chooser);}  }
class C{  public void cleanProgressInterfaces(){  for (  DownloadTask task : allTasks) {    task.progressUpdater=null;  }}  }
class C{  public static boolean isModLoaded(String id){  return ID_MAP.containsKey(id);}  }
class C{  public void eliminatePhiNodes(){  if (phi.doEliminatePhiNodes())   makeUniqueLocalNames();}  }
class C{  private void checkApiTarget(int minSdk,int targetSdk,@NonNull IAndroidTarget target,@NonNull NewProjectWizardState projectValues,@NonNull String projectNameBase,@Nullable TemplateWizardState templateValues,@Nullable Map<String,Object> overrides) throws Exception {  Boolean createActivity=(Boolean)projectValues.get(ATTR_CREATE_ACTIVITY);  if (createActivity == null) {    createActivity=true;  }  TemplateWizardState values=createActivity ? projectValues.getActivityTemplateState() : templateValues;  assertNotNull(values);  projectValues.put(ATTR_MIN_API,Integer.toString(minSdk));  projectValues.put(ATTR_MIN_API_LEVEL,minSdk);  projectValues.put(ATTR_TARGET_API,targetSdk);  projectValues.put(ATTR_TARGET_API_STRING,Integer.toString(targetSdk));  projectValues.put(ATTR_BUILD_API,target.getVersion().getApiLevel());  projectValues.put(ATTR_BUILD_API_STRING,TemplateMetadata.getBuildApiString(target.getVersion()));  assertNotNull(values);  Template templateHandler=values.getTemplate();  assertNotNull(templateHandler);  TemplateMetadata template=templateHandler.getMetadata();  assertNotNull(template);  Collection<Parameter> parameters=template.getParameters();  if (!createActivity) {    values.setParameterDefaults();  }  if (overrides != null) {    for (    Map.Entry<String,Object> entry : overrides.entrySet()) {      values.put(entry.getKey(),entry.getValue());    }  }  String projectName;  for (  Parameter parameter : parameters) {    if (parameter.type == Parameter.Type.SEPARATOR || parameter.type == Parameter.Type.STRING) {      continue;    }    assertNotNull(parameter.id);    Object initial=values.get(parameter.id);    if (parameter.type == Parameter.Type.ENUM) {      List<Element> options=parameter.getOptions();      for (      Element element : options) {        Option option=Option.get(element);        String optionId=option.id;        int optionMinSdk=option.minSdk;        int optionMinBuildApi=option.minBuild;        int projectMinApi=projectValues.getInt(ATTR_MIN_API_LEVEL);        int projectBuildApi=projectValues.getInt(ATTR_BUILD_API);        if (projectMinApi >= optionMinSdk && projectBuildApi >= optionMinBuildApi) {          values.put(parameter.id,optionId);          projectName=projectNameBase + "_" + parameter.id+ "_"+ optionId;          checkProject(projectName,projectValues,templateValues);          if (!TEST_VARIABLE_COMBINATIONS) {            break;          }        }      }    } else {      assert parameter.type == Parameter.Type.BOOLEAN;      if (parameter.id.equals(ATTR_IS_LAUNCHER) && createActivity) {        continue;      }      boolean value=false;      values.put(parameter.id,value);      projectName=projectNameBase + "_" + parameter.id+ "_"+ value;      checkProject(projectName,projectValues,templateValues);      if (!TEST_VARIABLE_COMBINATIONS) {        break;      }      value=true;      values.put(parameter.id,value);      projectName=projectNameBase + "_" + parameter.id+ "_"+ value;      checkProject(projectName,projectValues,templateValues);    }    values.put(parameter.id,initial);  }  projectName=projectNameBase + "_default";  checkProject(projectName,projectValues,templateValues);}  }
class C{  @Override public void showPopup(Context c,View anchor,String value,int position){  PhotoOrderPopupWindow window=new PhotoOrderPopupWindow(c,anchor,value,PhotoOrderPopupWindow.CATEGORY_TYPE);  window.setOnPhotoOrderChangedListener(this);}  }
class C{  public void sendToAll(){  sendTo(null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_protect_PROTECT_SKILL_HEAL_A_to_B(String protector,int num0,String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201180,protector,num0,skilltarget,skillcaster,skillname);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set show-reference=" + !isSelected() + ";");}  }
class C{  public summaryGaussNormEvaluator(String[] args){  OutputSemaphore=new Semaphore(1);  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  if (gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"?","").length() > 0) {    printUsage();    System.exit(0);  }  try {    WordMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordMin","1"));    WordMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordMax","2"));    WordDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"wordDist","3"));    CharMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charMin","3"));    CharMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charMax","5"));    CharDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"charDist","3"));    Threads=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"t","" + Runtime.getRuntime().availableProcessors()));    String sWeightMethod=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"use","o");    if (sWeightMethod.equals("o"))     WeightMethod=USE_OCCURENCES_AS_WEIGHT; else     if (sWeightMethod.equals("d"))     WeightMethod=USE_DISTRO_AVERAGE_AS_WEIGHT; else {      printUsage();      System.exit(1);    }    Do=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"do","all");    if ((Do.length() == 0) || ("char_word_all__".indexOf(Do) % 5 != 0)) {      printUsage();      System.exit(0);    }    OutFile=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"o","");    SummaryDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"summaryDir","summaries" + System.getProperty("file.separator"));    ModelDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    Silent=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    Progress=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"progress","FALSE").equals("TRUE");    LowMem=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"lowmem","FALSE").equals("TRUE");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    printUsage();  }}  }
class C{  public ConstrainableLookupLocatorTrustVerifier(){}  }
class C{  @Override public double[] makeCumulativeTestValues(){  final double[] densities=makeDensityTestValues();  final int n=densities.length;  final double[] ret=new double[n];  ret[0]=densities[0];  for (int i=1; i < n; i++) {    ret[i]=ret[i - 1] + densities[i];  }  return ret;}  }
class C{  public void fail(String message){  screenshot();  this.testResult=new Fail(message);}  }
class C{  public PrefixFileFilter(String prefix,IOCase caseSensitivity){  if (prefix == null) {    throw new IllegalArgumentException("The prefix must not be null");  }  this.prefixes=new String[]{prefix};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public WriteEntriesResult(){}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  protected BoardDeleteCommentQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200707,skillcaster,skillname);}  }
class C{  public VideoSearchQueryWithExtended searchExtended(UserActor actor,String q){  return new VideoSearchQueryWithExtended(getClient(),actor,q);}  }
class C{  public GroupsEditPlaceQuery longitude(Float value){  return unsafeParam("longitude",value);}  }
class C{  public static int hashWord(String sWord){  int iCnt=0, iRes=0, iLen=sWord.length();  for (iCnt=0; iCnt < iLen; iCnt++)   iRes+=(int)sWord.charAt(iCnt);  return (sWord.length() * 8192 + iRes);}  }
class C{  public boolean checkLeaksAndContinueGC(){synchronized (this) {    List<WeakRef<Node>> collect=map.keySet().stream().filter(null).collect(Collectors.toList());    map.keySet().removeAll(collect);  }  return true;}  }
class C{  public RTHtml<RTImage,RTAudio,RTVideo> convert(final Spanned text,RTFormat.Html rtFormat){  mText=text;  mRTFormat=rtFormat;  mOut=new StringBuilder();  mImages=new ArrayList<RTImage>();  mParagraphStyles.clear();  convertParagraphs();  return new RTHtml<RTImage,RTAudio,RTVideo>(rtFormat,mOut.toString(),mImages);}  }
class C{  @Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augs) throws XNIException {  try {    if (fDeclHandler != null) {      String elemAttr=new StringBuffer(elementName).append('<').append(attributeName).toString();      if (fDeclaredAttrs.get(elemAttr) != null) {        return;      }      fDeclaredAttrs.put(elemAttr,Boolean.TRUE);      if (type.equals("NOTATION") || type.equals("ENUMERATION")) {        StringBuffer str=new StringBuffer();        if (type.equals("NOTATION")) {          str.append(type);          str.append(" (");        } else {          str.append('(');        }        for (int i=0; i < enumeration.length; i++) {          str.append(enumeration[i]);          if (i < enumeration.length - 1) {            str.append('|');          }        }        str.append(')');        type=str.toString();      }      String value=(defaultValue == null) ? null : defaultValue.toString();      fDeclHandler.attributeDecl(elementName,attributeName,type,defaultType,value);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public void runOptimizations(){  buildDependenceGraph();  distillConstraints();  buildImpactGraph();  computeWeightsForPts();}  }
class C{  private final String encodeFieldName(final String pFieldName){  StringBuilder str=new StringBuilder();  int fieldNameLength=pFieldName.length();  char currentChar;  for (int i=0; i != fieldNameLength; i++) {    currentChar=pFieldName.charAt(i);    if (Character.isUpperCase(currentChar)) {      str.append('-');      str.append(Character.toLowerCase(currentChar));    } else {      str.append(currentChar);    }  }  return str.toString();}  }
class C{  public NGramGraphComparator(){}  }
class C{  public void rectValuesToPixel(List<RectF> rects){  Matrix m=getValueToPixelMatrix();  for (int i=0; i < rects.size(); i++)   m.mapRect(rects.get(i));}  }
class C{  public void performQuery(JavaRDD<MapWritable> inputRDD) throws PIRException {  logger.info("Performing query: ");  if ((queryInfo.useHDFSExpLookupTable() || useHDFSLookupTable) && query.getExpFileBasedLookup().isEmpty()) {    JavaPairRDD<Integer,Iterable<Tuple2<Integer,BigInteger>>> expCalculations=ComputeExpLookupTable.computeExpTable(sc,fs,bVars,query,queryInput,outputDirExp);  }  JavaPairRDD<Integer,List<BigInteger>> selectorHashToDocRDD=inputRDD.mapToPair(new HashSelectorsAndPartitionData(bVars));  JavaPairRDD<Integer,Iterable<List<BigInteger>>> selectorGroupRDD=selectorHashToDocRDD.groupByKey();  JavaPairRDD<Long,BigInteger> encRowRDD;  if (useModExpJoin) {    JavaPairRDD<Integer,Iterable<Tuple2<Integer,BigInteger>>> expCalculations=ComputeExpLookupTable.computeExpTable(sc,fs,bVars,query,queryInput,outputDirExp,useModExpJoin);    JavaPairRDD<Integer,Tuple2<Iterable<Tuple2<Integer,BigInteger>>,Iterable<List<BigInteger>>>> encMapDataJoin=expCalculations.join(selectorGroupRDD);    encRowRDD=encMapDataJoin.flatMapToPair(new EncRowCalcPrecomputedCache(accum,bVars));  } else {    encRowRDD=selectorGroupRDD.flatMapToPair(new EncRowCalc(accum,bVars));  }  encryptedColumnCalc(encRowRDD);  logger.info("Tearing down...");  teardown();  logger.info("Tear down complete");}  }
class C{  public static String csvToJsonArray(String csv,String fieldSeparator){  String[] lines=csv.split(System.getProperty("line.separator"));  if (lines.length == 0)   return "[]";  String[] header=lines[0].split(fieldSeparator);  List<JsonElement> jsonObjects=new ArrayList<>(lines.length - 1);  Gson gson=new GsonBuilder().create();  Map<String,String> jsonMap=new HashMap<>();  for (int i=1; i < lines.length; ++i) {    String[] fields=lines[i].split(fieldSeparator);    if (fields.length != header.length) {      continue;    }    for (int j=0; j < header.length; j++) {      jsonMap.put(header[j],fields[j]);    }    jsonObjects.add(gson.toJsonTree(jsonMap));  }  return gson.toJson(jsonObjects);}  }
class C{  public BigFractionFormat(){}  }
class C{  protected boolean isList(Class<?> fieldType){  return List.class.isAssignableFrom(fieldType);}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public void revertToDefaultValue(){  List<FieldConfigBase> fieldList=fieldConfigManager.getFields(null);  if (fieldList != null) {    for (    FieldConfigBase field : fieldList) {      if (field != null) {        field.revertToDefaultValue();      }    }  }}  }
class C{  public void writeContigs(Writer w,ProgressListener progress) throws CanceledException, IOException {  progress.setSubtask("Writing contigs");  progress.setMaximum(contigs.size());  progress.setProgress(0);  for (  Pair<String,String> pair : contigs) {    w.write(pair.getFirst().trim());    w.write("\n");    w.write(pair.getSecond().trim());    w.write("\n");    progress.incrementProgress();  }  w.flush();  if (progress instanceof ProgressPercentage)   ((ProgressPercentage)progress).reportTaskCompleted();}  }
class C{  public int addNewShape(){  WKTSegmentList newSegmentList=new WKTSegmentList();  newSegmentList.addPoint(new WKTPoint());  if (geometryType.getNumOfPoints() > 1) {    newSegmentList.addPoint(new WKTPoint());  }  addSegmentList(segmentList.size(),newSegmentList);  return segmentList.size();}  }
class C{  public Vector2f addLocal(float addX,float addY){  x+=addX;  y+=addY;  return this;}  }
class C{  private boolean changeState(State state){  if (_state == State.STOPPED)   return false;  _state=state;  return true;}  }
class C{  public Conversation(Plugin plugin,Conversable forWhom,Prompt firstPrompt,Map<Object,Object> initialSessionData){  this.firstPrompt=firstPrompt;  this.context=new ConversationContext(plugin,forWhom,initialSessionData);  this.modal=true;  this.localEchoEnabled=true;  this.prefix=new NullConversationPrefix();  this.cancellers=new ArrayList<ConversationCanceller>();  this.abandonedListeners=new ArrayList<ConversationAbandonedListener>();}  }
class C{  public GroupByOperator(QueryOperator source,Database.Transaction transaction,String groupByColumn) throws QueryPlanException {  super(OperatorType.GROUPBY,source);  Schema sourceSchema=this.getSource().getOutputSchema();  this.transaction=transaction;  this.groupByColumn=this.checkSchemaForColumn(sourceSchema,groupByColumn);  this.groupByColumnIndex=sourceSchema.getFieldNames().indexOf(this.groupByColumn);}  }
class C{  protected void removeAt(int index){  _values[index]=null;  super.removeAt(index);}  }
class C{  public MessagesGetChatUsersQueryWithFields chatId(Integer value){  return unsafeParam("chat_id",value);}  }
class C{  public DataTagAdd(){}  }
class C{  public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {  writeStringToFile(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public boolean showGuidelines(){  return !(mEdges.width() < 100 || mEdges.height() < 100);}  }
class C{  public static void write(File file,CharSequence data) throws IOException {  write(file,data,Charset.defaultCharset(),false);}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  private void computeAttributes2DataSet2Values(Map<String,Map<String,Number>> attribute2series2valueForTaxa,Map<String,Map<String,Number>> attribute2series2value,List<String> orderedLabels){  orderedLabels.clear();  attribute2series2value.clear();  Set<String> datasets=new HashSet<>();  for (  String label : attribute2series2valueForTaxa.keySet()) {    Map<String,Number> series2value=attribute2series2valueForTaxa.get(label);    datasets.addAll(series2value.keySet());  }  for (  String attribute : attribute2kind2taxaNames.keySet()) {    Map<String,ArrayList<String>> kind2taxaNames=attribute2kind2taxaNames.get(attribute);    for (    String kind : kind2taxaNames.keySet()) {      String attributeKindPair=attribute + ":" + kind;      orderedLabels.add(attributeKindPair);      Map<String,Number> series2value=new TreeMap<>();      for (      String dataset : datasets)       series2value.put(dataset,0);      attribute2series2value.put(attributeKindPair,series2value);      List<String> taxonNames=kind2taxaNames.get(kind);      for (      String taxon : taxonNames) {        Map<String,Number> series2valuesForTaxa=attribute2series2valueForTaxa.get(taxon);        if (series2valuesForTaxa != null) {          for (          String dataset : series2valuesForTaxa.keySet()) {            int sum=series2valuesForTaxa.get(dataset).intValue();            Number value=series2value.get(dataset);            if (value != null)             sum+=value.intValue();            series2value.put(dataset,sum);          }        }      }    }  }}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  public String leaveDTD() throws IOException {  if (_writer == _dtdWriter) {    flushLine(false);    _writer=_docWriter;    return _dtdWriter.toString();  }  return null;}  }
class C{  private void updateBD(double negccov){  if (ccov1 + ccovmu + negccov > 0 && (iterations % 1. / (ccov1 + ccovmu + negccov) / dimension / 10.) < 1) {    C=triu(C,0).add(triu(C,1).transpose());    final EigenDecomposition eig=new EigenDecomposition(C);    B=eig.getV();    D=eig.getD();    diagD=diag(D);    if (min(diagD) <= 0) {      for (int i=0; i < dimension; i++) {        if (diagD.getEntry(i,0) < 0) {          diagD.setEntry(i,0,0);        }      }      final double tfac=max(diagD) / 1e14;      C=C.add(eye(dimension,dimension).scalarMultiply(tfac));      diagD=diagD.add(ones(dimension,1).scalarMultiply(tfac));    }    if (max(diagD) > 1e14 * min(diagD)) {      final double tfac=max(diagD) / 1e14 - min(diagD);      C=C.add(eye(dimension,dimension).scalarMultiply(tfac));      diagD=diagD.add(ones(dimension,1).scalarMultiply(tfac));    }    diagC=diag(C);    diagD=sqrt(diagD);    BD=times(B,repmat(diagD.transpose(),dimension,1));  }}  }
class C{  @Override public void update(String jsonState) throws AWSIotException {  super.update(jsonState);}  }
class C{  PListParser(){  this.m_dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");  this.m_dateFormat.setTimeZone(TimeZone.getTimeZone("Z"));  this.m_simpleTypes=new HashMap<Class<?>,ElementType>();  this.m_simpleTypes.put(Integer.class,ElementType.INTEGER);  this.m_simpleTypes.put(Byte.class,ElementType.INTEGER);  this.m_simpleTypes.put(Short.class,ElementType.INTEGER);  this.m_simpleTypes.put(Short.class,ElementType.INTEGER);  this.m_simpleTypes.put(Long.class,ElementType.INTEGER);  this.m_simpleTypes.put(String.class,ElementType.STRING);  this.m_simpleTypes.put(Float.class,ElementType.REAL);  this.m_simpleTypes.put(Double.class,ElementType.REAL);  this.m_simpleTypes.put(byte[].class,ElementType.DATA);  this.m_simpleTypes.put(Boolean.class,ElementType.TRUE);  this.m_simpleTypes.put(Date.class,ElementType.DATE);}  }
class C{  public String upload_appender_file1(String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_appender_file(local_filename,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  @Override public XSObject item(int index){  if (index < 0 || index >= fLength) {    return null;  }  return fArray[index];}  }
class C{  public static String formatMessage(String domain,String key,Object[] arguments) throws MissingResourceException {  ResourceBundle resourceBundle=getResourceBundle(domain);  if (resourceBundle == null) {    init();    resourceBundle=getResourceBundle(domain);    if (resourceBundle == null)     throw new MissingResourceException("Unknown domain" + domain,null,key);  }  String msg;  try {    msg=key + ": " + resourceBundle.getString(key);    if (arguments != null) {      try {        msg=java.text.MessageFormat.format(msg,arguments);      } catch (      Exception e) {        msg=resourceBundle.getString("FormatFailed");        msg+=" " + resourceBundle.getString(key);      }    }  } catch (  MissingResourceException e) {    msg=resourceBundle.getString("BadMessageKey");    throw new MissingResourceException(key,msg,key);  }  if (msg == null) {    msg=key;    if (arguments.length > 0) {      StringBuffer str=new StringBuffer(msg);      str.append('?');      for (int i=0; i < arguments.length; i++) {        if (i > 0) {          str.append('&');        }        str.append(String.valueOf(arguments[i]));      }    }  }  return msg;}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  long d;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Long_info cu=(CONSTANT_Long_info)cp;  d=convert() - cu.convert();  return ((d > 0) ? 1 : ((d < 0) ? -1 : 0));}  }
class C{  public static void cancelNotification(Context context,int notificationId){  final NotificationManagerCompat managerCompat=NotificationManagerCompat.from(context);  managerCompat.cancel(notificationId);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {    NotificationManager manager=context.getSystemService(NotificationManager.class);    final StatusBarNotification[] notifs=manager.getActiveNotifications();    if (notifs.length == 1 && notifs[0].getId() == NAG_NOTIFICATION_ID && notifs[0].isGroup()) {      managerCompat.cancel(NAG_NOTIFICATION_ID);    }  }}  }
class C{  public PhotoActivityPopupManageImplementor(PopupManageView view){  this.view=view;}  }
class C{  public static void report(final Throwable _throwable){  FirebaseCrash.report(_throwable);}  }
class C{  public AdsGetAdsQuery(VkApiClient client,UserActor actor,int accountId){  super(client,"ads.getAds",Utils.buildParametrizedType(List.class,Ad.class));  accessToken(actor.getAccessToken());  accountId(accountId);}  }
class C{  public double select(final double[] work,final int[] pivotsHeap,final int k){  int begin=0;  int end=work.length;  int node=0;  final boolean usePivotsHeap=pivotsHeap != null;  while (end - begin > MIN_SELECT_SIZE) {    final int pivot;    if (usePivotsHeap && node < pivotsHeap.length && pivotsHeap[node] >= 0) {      pivot=pivotsHeap[node];    } else {      pivot=partition(work,begin,end,pivotingStrategy.pivotIndex(work,begin,end));      if (usePivotsHeap && node < pivotsHeap.length) {        pivotsHeap[node]=pivot;      }    }    if (k == pivot) {      return work[k];    } else     if (k < pivot) {      end=pivot;      node=FastMath.min(2 * node + 1,usePivotsHeap ? pivotsHeap.length : end);    } else {      begin=pivot + 1;      node=FastMath.min(2 * node + 2,usePivotsHeap ? pivotsHeap.length : end);    }  }  Arrays.sort(work,begin,end);  return work[k];}  }
class C{  public boolean isLocalActive(){  return _localActive;}  }
class C{  public ConstraintAnchor findAnchorInSelection(float x,float y,boolean checkGuidelines,boolean mousePress,ViewTransform viewTransform){  ConnectionCandidate candidate=new ConnectionCandidate();  float dist=(ConnectionDraw.CONNECTION_ANCHOR_SIZE + ConnectionDraw.CONNECTION_ANCHOR_SIZE) / viewTransform.getScale();  candidate.distance=viewTransform.getSwingDimensionF(30);  for (  Selection.Element element : mSelection.getElements()) {    ConstraintWidget widget=element.widget;    if (!checkGuidelines && (widget instanceof Guideline)) {      continue;    }    WidgetCompanion companion=(WidgetCompanion)widget.getCompanionWidget();    WidgetInteractionTargets widgetInteraction=companion.getWidgetInteractionTargets();    widgetInteraction.updatePosition(viewTransform);    widgetInteraction.findClosestConnection(viewTransform,x,y,candidate,mousePress);  }  float slope=(dist * dist);  if (candidate.anchorTarget != null && candidate.distance < slope) {    candidate.distance=0;  } else {    candidate.anchorTarget=null;  }  return candidate.anchorTarget;}  }
class C{  private List<String> wrapLines(String text,int maxLen){  text=text.replaceAll("\n","\n ");  Iterable<String> words=Splitter.on(" ").trimResults(CharMatcher.is(' ')).omitEmptyStrings().split(text);  String line="";  List<String> lines=new ArrayList<String>();  for (  String w : words) {    line+=(w + " ");    if (line.trim().length() >= maxLen || w.endsWith("\n")) {      lines.add(line.trim().replaceAll("~"," "));      line="";    }  }  if (!line.isEmpty()) {    lines.add(line.trim().replaceAll("~"," "));  }  return lines;}  }
class C{  private boolean playMode(){switch (this.mode) {case NONE:    this.setMode(MODE.PLAY);  break;case PLAY:break;case RECORD:Log.d(LOG_TAG,"AudioPlayer Error: Can't play in record mode.");sendErrorStatus(MEDIA_ERR_ABORTED);return false;}return true;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static InsertAllRequest buildExpectedInsertAllRequest(TableId table,InsertAllRequest.RowToInsert... rows){  return InsertAllRequest.builder(table,rows).ignoreUnknownValues(false).skipInvalidRows(false).build();}  }
class C{  @Override public boolean optimizeScanForSingleObject(){  return true;}  }
class C{  public void notifyObserversNow(){  Log_OC.d(TAG,"notifyObserversNow");  setChanged();  notifyObservers();}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public MessageManageImplementor(MessageManageView view){  this.view=view;}  }
class C{  @ObjectiveCName("init:oldData:remoteVersion:remoteData:error:") public RecordMergeStrategyException(int localVersion,JsonElement oldData,int remoteVersion,JsonElement remoteData,String error){  this.localVersion=localVersion;  this.oldData=oldData;  this.remoteVersion=remoteVersion;  this.newData=remoteData;  this.error=error;}  }
class C{  @SuppressWarnings("unchecked") public static <R>JoinObservable<R> when(Plan<R> p1,Plan<R> p2,Plan<R> p3){  return from(JoinPatterns.when(p1,p2,p3));}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  public static boolean isMinute(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,0,59);}  }
class C{  public T walkInDefaultOrder(final FieldVectorPreservingVisitor<T> visitor,final int start,final int end) throws MathIllegalArgumentException {  checkIndices(start,end);  visitor.start(getDimension(),start,end);  for (int i=start; i <= end; i++) {    visitor.visit(i,getEntry(i));  }  return visitor.end();}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  @SuppressWarnings("unused") public Hashtable stat(int server_index) throws MyException {  ServerInfo server;  ProtoCommon.PkgHeader header;  int offset;  Hashtable keyValues;  ServerInfo[] servers=this.serverGroup.getServers();  server=servers[server_index];  if (!this.serverGroup.connectServer(server)) {    this.status=2;    return null;  }  try {    header=new ProtoCommon.PkgHeader();    header.key_hash_code=0;    header.body_len=0;    header.cmd=ProtoCommon.FDHT_PROTO_CMD_STAT;    header.keep_alive=(byte)(this.serverGroup.keep_alive ? 1 : 0);    header.timestamp=(int)(System.currentTimeMillis() / 1000);    header.expires=0;    byte[] bsPackage=new byte[ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE];    ProtoCommon.packHeader(header,bsPackage);    OutputStream out=server.sock.getOutputStream();    out.write(bsPackage);    ProtoCommon.PkgInfo pkgInfo=ProtoCommon.recvPackage(server.sock.getInputStream(),ProtoCommon.FDHT_PROTO_CMD_RESP,-1);    this.status=pkgInfo.header.status;    if (this.status != 0) {      return null;    }    String szBody=new String(pkgInfo.body,ClientGlobal.g_charset);    String[] rows=szBody.split("\n");    String[] cols;    keyValues=new Hashtable(rows.length,(float)0.50);    for (int i=0; i < rows.length; i++) {      cols=rows[i].split("=");      keyValues.put(cols[0],cols[1]);    }    return keyValues;  } catch (  IOException ex) {    System.err.println("server " + server.address.getAddress().getHostAddress() + ":"+ server.address.getPort()+ " IOException, error msg: "+ ex.getMessage());    this.serverGroup.forceClose(server);    this.status=5;    return null;  } finally {    this.serverGroup.closeServer(server);  }}  }
class C{  public static String updateProductAssoc(HttpServletRequest request,HttpServletResponse response){  String errMsg="";  List<Object> errMsgList=FastList.newInstance();  Delegator delegator=(Delegator)request.getAttribute("delegator");  Security security=(Security)request.getAttribute("security");  String updateMode=request.getParameter("UPDATE_MODE");  if (updateMode == null || updateMode.length() <= 0) {    errMsg=UtilProperties.getMessage(resource,"productevents.updatemode_not_specified",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[ProductEvents.updateProductAssoc] Update Mode was not specified, but is required",module);    return "error";  }  if (!security.hasEntityPermission("CATALOG","_" + updateMode,request.getSession())) {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    errMsg=UtilProperties.getMessage(resource,"productevents.not_sufficient_permissions",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  String productId=request.getParameter("PRODUCT_ID");  String productIdTo=request.getParameter("PRODUCT_ID_TO");  String productAssocTypeId=request.getParameter("PRODUCT_ASSOC_TYPE_ID");  String fromDateStr=request.getParameter("FROM_DATE");  Timestamp fromDate=null;  try {    if (EntityQuery.use(delegator).from("Product").where("productId",productId).queryOne() == null) {      Map<String,String> messageMap=UtilMisc.toMap("productId",productId);      errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_with_id_not_found",messageMap,UtilHttp.getLocale(request)));    }    if (EntityQuery.use(delegator).from("Product").where("productId",productIdTo).queryOne() == null) {      Map<String,String> messageMap=UtilMisc.toMap("productIdTo",productIdTo);      errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_To_with_id_not_found",messageMap,UtilHttp.getLocale(request)));    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  if (UtilValidate.isNotEmpty(fromDateStr)) {    try {      fromDate=(Timestamp)ObjectType.simpleTypeConvert(fromDateStr,"Timestamp",null,UtilHttp.getTimeZone(request),UtilHttp.getLocale(request),false);    } catch (    Exception e) {      errMsgList.add("From Date not formatted correctly.");    }  }  if (!UtilValidate.isNotEmpty(productId))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_ID_missing",UtilHttp.getLocale(request)));  if (!UtilValidate.isNotEmpty(productIdTo))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.product_ID_To_missing",UtilHttp.getLocale(request)));  if (!UtilValidate.isNotEmpty(productAssocTypeId))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.association_type_ID_missing",UtilHttp.getLocale(request)));  if (!updateMode.equals("CREATE") && !UtilValidate.isNotEmpty(fromDateStr))   errMsgList.add(UtilProperties.getMessage(resource,"productevents.from_date_missing",UtilHttp.getLocale(request)));  if (errMsgList.size() > 0) {    request.setAttribute("_ERROR_MESSAGE_LIST_",errMsgList);    return "error";  }  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productId",productId));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productId",productId,"productAssocTypeId",productAssocTypeId));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productIdTo",productIdTo));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productIdTo",productIdTo,"productAssocTypeId",productAssocTypeId));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productAssocTypeId",productAssocTypeId));  delegator.clearCacheLine("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",productIdTo,"productAssocTypeId",productAssocTypeId,"fromDate",fromDate));  GenericValue tempProductAssoc=delegator.makeValue("ProductAssoc",UtilMisc.toMap("productId",productId,"productIdTo",productIdTo,"productAssocTypeId",productAssocTypeId,"fromDate",fromDate));  if (updateMode.equals("DELETE")) {    GenericValue productAssoc=null;    try {      productAssoc=EntityQuery.use(delegator).from(tempProductAssoc.getEntityName()).where(tempProductAssoc.getPrimaryKey()).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      productAssoc=null;    }    if (productAssoc == null) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_remove_product_association_exist",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    try {      productAssoc.remove();    } catch (    GenericEntityException e) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_remove_product_association_write",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      Debug.logWarning("[ProductEvents.updateProductAssoc] Could not remove product association (write error); message: " + e.getMessage(),module);      return "error";    }    return "success";  }  String thruDateStr=request.getParameter("THRU_DATE");  String reason=request.getParameter("REASON");  String instruction=request.getParameter("INSTRUCTION");  String quantityStr=request.getParameter("QUANTITY");  String sequenceNumStr=request.getParameter("SEQUENCE_NUM");  Timestamp thruDate=null;  BigDecimal quantity=null;  Long sequenceNum=null;  if (UtilValidate.isNotEmpty(thruDateStr)) {    try {      thruDate=(Timestamp)ObjectType.simpleTypeConvert(thruDateStr,"Timestamp",null,UtilHttp.getTimeZone(request),UtilHttp.getLocale(request),false);    } catch (    Exception e) {      errMsgList.add(UtilProperties.getMessage(resource,"productevents.thru_date_not_formatted_correctly",UtilHttp.getLocale(request)));    }  }  if (UtilValidate.isNotEmpty(quantityStr)) {    try {      quantity=new BigDecimal(quantityStr);    } catch (    NumberFormatException e) {      errMsgList.add(UtilProperties.getMessage(resource,"productevents.quantity_not_formatted_correctly",UtilHttp.getLocale(request)));    }  }  if (UtilValidate.isNotEmpty(sequenceNumStr)) {    try {      sequenceNum=Long.valueOf(sequenceNumStr);    } catch (    Exception e) {      errMsgList.add(UtilProperties.getMessage(resource,"productevents.sequenceNum_not_formatted_correctly",UtilHttp.getLocale(request)));    }  }  if (errMsgList.size() > 0) {    request.setAttribute("_ERROR_MESSAGE_LIST_",errMsgList);    return "error";  }  tempProductAssoc.set("thruDate",thruDate);  tempProductAssoc.set("reason",reason);  tempProductAssoc.set("instruction",instruction);  tempProductAssoc.set("quantity",quantity);  tempProductAssoc.set("sequenceNum",sequenceNum);  if (updateMode.equals("CREATE")) {    if (fromDate == null) {      fromDate=new Timestamp(new java.util.Date().getTime());      tempProductAssoc.set("fromDate",fromDate);      request.setAttribute("ProductAssocCreateFromDate",fromDate);    }    GenericValue productAssoc=null;    try {      productAssoc=EntityQuery.use(delegator).from(tempProductAssoc.getEntityName()).where(tempProductAssoc.getPrimaryKey()).queryOne();    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      productAssoc=null;    }    if (productAssoc != null) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_product_association_exists",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    try {      productAssoc=tempProductAssoc.create();    } catch (    GenericEntityException e) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_create_product_association_write",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      Debug.logWarning("[ProductEvents.updateProductAssoc] Could not create product association (write error); message: " + e.getMessage(),module);      return "error";    }  } else   if (updateMode.equals("UPDATE")) {    try {      tempProductAssoc.store();    } catch (    GenericEntityException e) {      errMsg=UtilProperties.getMessage(resource,"productevents.could_not_update_product_association_write",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      Debug.logWarning("[ProductEvents.updateProductAssoc] Could not update product association (write error); message: " + e.getMessage(),module);      return "error";    }  } else {    Map<String,String> messageMap=UtilMisc.toMap("updateMode",updateMode);    errMsg=UtilProperties.getMessage(resource,"productevents.specified_update_mode_not_supported",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  return "success";}  }
class C{  void removeSession(GSSessionImpl childSession){synchronized (this) {    sessions.remove(childSession);    childSession=null;  }}  }
class C{  private boolean canChangeLevel(Player activePlayer){  Legion legion=activePlayer.getLegion();  int levelContributionPrice=legion.getContributionPrice();  if (legion.getLegionLevel() == MAX_LEGION_LEVEL) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_LEVEL_CANT_LEVEL_UP);    return false;  } else   if (LegionConfig.ENABLE_GUILD_TASK_REQ && legion.getLegionLevel() >= 5) {    if (!ChallengeTaskService.getInstance().canRaiseLegionLevel(legion.getLegionId(),legion.getLegionLevel())) {      PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_LEVEL_UP_CHALLENGE_TASK(legion.getLegionLevel()));      return false;    }  } else   if (activePlayer.getInventory().getKinah() < legion.getKinahPrice()) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_LEVEL_NOT_ENOUGH_MONEY);    return false;  } else   if (!legion.hasRequiredMembers()) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_LEVEL_NOT_ENOUGH_MEMBER);    return false;  } else   if (legion.getContributionPoints() < levelContributionPrice) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_CHANGE_LEVEL_NOT_ENOUGH_POINT);    return false;  }  return true;}  }
class C{  public Collection<V> values(){  Collection<V> values=new LinkedList<>();  for (  Map<C,V> row : dataMap.values()) {    values.addAll(row.values());  }  return values;}  }
class C{  public InfoEntry(String message){  super();  this.message=message;}  }
class C{  public int q(){  String s=soot.PhaseOptions.getString(options,"q");  if (s.equalsIgnoreCase("auto"))   return q_auto;  if (s.equalsIgnoreCase("trad"))   return q_trad;  if (s.equalsIgnoreCase("bdd"))   return q_bdd;  if (s.equalsIgnoreCase("debug"))   return q_debug;  if (s.equalsIgnoreCase("trace"))   return q_trace;  if (s.equalsIgnoreCase("numtrace"))   return q_numtrace;  throw new RuntimeException("Invalid value " + s + " of phase option q");}  }
class C{  public static void deleteNodes(DefaultTreeModel model,TransferredData transferredData){  if ((model == null) || (transferredData == null)) {    return;  }  for (int index=0; index < transferredData.getDataListSize(); index++) {    NodeInterface nodeToTransfer=(NodeInterface)transferredData.getTreePath(index).getLastPathComponent();    SelectedFiles selectedFiles=nodeToTransfer.getHandler().getSLDContents(nodeToTransfer);    nodeToTransfer.getHandler().deleteNodes(nodeToTransfer,selectedFiles.getSldData());  }}  }
class C{  public static boolean isSemitonesDelta(String string){  String s=string.trim();  if (s.length() < 4)   return false;  return s.substring(s.length() - 2).equals("st") && isNumberDelta(s.substring(0,s.length() - 2));}  }
class C{  public static PhaseDumper v(){  return G.v().soot_util_PhaseDumper();}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  public <N>DotGraph drawCFG(DirectedGraph<N> graph,Body body){  DotGraph canvas=initDotGraph(body);  DotNamer<N> namer=new DotNamer<N>((int)(graph.size() / 0.7f),0.7f);  NodeComparator<N> comparator=new NodeComparator<N>(namer);  for (Iterator<N> nodesIt=graph.iterator(); nodesIt.hasNext(); ) {    namer.getName(nodesIt.next());  }  for (Iterator<N> nodesIt=graph.iterator(); nodesIt.hasNext(); ) {    N node=nodesIt.next();    canvas.drawNode(namer.getName(node));    for (Iterator<N> succsIt=sortedIterator(graph.getSuccsOf(node),comparator); succsIt.hasNext(); ) {      N succ=succsIt.next();      canvas.drawEdge(namer.getName(node),namer.getName(succ));    }  }  setStyle(graph.getHeads(),canvas,namer,DotGraphConstants.NODE_STYLE_FILLED,headAttr);  setStyle(graph.getTails(),canvas,namer,DotGraphConstants.NODE_STYLE_FILLED,tailAttr);  if (!isBrief) {    formatNodeText(body,canvas,namer);  }  return canvas;}  }
class C{  @Nullable public static VirtualFile pickLayoutFile(@NotNull Module module,@NotNull AndroidFacet facet){  VirtualFile layout=null;  VirtualFile[] openFiles=FileEditorManager.getInstance(module.getProject()).getOpenFiles();  for (  VirtualFile file : openFiles) {    if (file.getName().endsWith(DOT_XML) && file.getParent() != null && file.getParent().getName().startsWith(FD_RES_LAYOUT)) {      layout=file;      break;    }  }  if (layout == null) {    for (    VirtualFile resourceDir : facet.getAllResourceDirectories()) {      for (      VirtualFile folder : resourceDir.getChildren()) {        if (folder.getName().startsWith(FD_RES_LAYOUT) && folder.isDirectory()) {          for (          VirtualFile file : folder.getChildren()) {            if (file.getName().endsWith(DOT_XML) && file.getParent() != null && file.getParent().getName().startsWith(FD_RES_LAYOUT)) {              layout=file;              break;            }          }        }      }    }  }  return layout;}  }
class C{  public boolean isEmpty(){  return values.isEmpty();}  }
class C{  public boolean isManaged(){  PrefServiceBridge prefs=PrefServiceBridge.getInstance();  if (showCameraSites())   return !prefs.isCameraUserModifiable();  if (showCookiesSites())   return prefs.isAcceptCookiesManaged();  if (showFullscreenSites())   return prefs.isFullscreenManaged();  if (showGeolocationSites()) {    return !prefs.isAllowLocationUserModifiable();  }  if (showJavaScriptSites())   return prefs.javaScriptManaged();  if (showMicrophoneSites())   return !prefs.isMicUserModifiable();  if (showPopupSites())   return prefs.isPopupsManaged();  return false;}  }
class C{  public static RemoveFileDialogFragment newInstance(OCFile file){  RemoveFileDialogFragment frag=new RemoveFileDialogFragment();  Bundle args=new Bundle();  int messageStringId=R.string.confirmation_remove_alert;  int localRemoveButton=(!file.isFavorite() && (file.isFolder() || file.isDown())) ? R.string.confirmation_remove_local : -1;  if (file.isFolder()) {    messageStringId=R.string.confirmation_remove_folder_alert;  }  args.putInt(ARG_MESSAGE_RESOURCE_ID,messageStringId);  args.putStringArray(ARG_MESSAGE_ARGUMENTS,new String[]{file.getFileName()});  args.putInt(ARG_POSITIVE_BTN_RES,R.string.common_yes);  args.putInt(ARG_NEUTRAL_BTN_RES,R.string.common_no);  args.putInt(ARG_NEGATIVE_BTN_RES,localRemoveButton);  args.putParcelable(ARG_TARGET_FILE,file);  frag.setArguments(args);  return frag;}  }
class C{  @Override public void writeSortIndex(List<Integer> sortIndexList) throws IOException {  columnSortInfo.setSort_index(sortIndexList);}  }
class C{  public PickRequest withCameraPicsDirectory(@Nullable final File pDirFile){  this.mCustomCameraPicsDirPath=pDirFile == null ? null : pDirFile.getAbsolutePath();  return this;}  }
class C{  @Override public boolean isApplicableTo(Schema sch){  return sch.hasField(fldName);}  }
class C{  protected void _readExternal(ObjectInput in) throws IOException {  if (in.readBoolean()) {    String uid=null;    if (in.readBoolean())     uid=in.readUTF();    int version=in.readInt();    long ttl=in.readLong();    entryInfo=new EntryInfo(uid,version,ttl);  }  isFifo=in.readBoolean();  isTransient=in.readBoolean();  m_NOWriteLeaseMode=in.readBoolean();}  }
class C{  protected void sendPacket(AionServerPacket msg){  getConnection().sendPacket(msg);}  }
class C{  public static void main(String[] args){  Hashtable hmCmd=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  String sBaseDir=gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"fromDir","data");  String sOutputDir=gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"toDir","newdata");  int iMinNGram=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"minN","1")).intValue();  int iMaxNGram=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"maxN","1")).intValue();  int iDist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"dist","1")).intValue();  String sUseMap=gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"useMap","");  String sSaveMapTo=gr.demokritos.iit.jinsect.utils.getSwitch(hmCmd,"saveMapTo","");  Hashtable hmEdges=null;  try {    FileInputStream fsIn=new FileInputStream(sUseMap);    ObjectInputStream ois=new ObjectInputStream(fsIn);    if (sUseMap.length() > 0)     hmEdges=(Hashtable)ois.readObject(); else     hmEdges=new Hashtable();    fsIn.close();    ois.close();  } catch (  FileNotFoundException ex) {    System.err.println(sUseMap + " not found. Continuing using an empty map.");    hmEdges=new Hashtable();  }catch (  IOException ex) {    System.err.println(sUseMap + " cannot be read. Continuing using an empty map.");    hmEdges=new Hashtable();    ex.printStackTrace(System.err);  }catch (  ClassNotFoundException ex) {    ex.printStackTrace(System.err);    return;  }  DocumentSet ds=new DocumentSet(sBaseDir,1.0);  ds.createSets();  DocumentNGramGraph dngCur=new DocumentNGramGraph(iMinNGram,iMaxNGram,iDist);  Iterator iIter=ds.getTrainingSet().iterator();  while (iIter.hasNext()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();    dngCur.setDataString("");    try {      dngCur.loadDataStringFromFile(cfeCur.getFileName());      File fDir=new File(sOutputDir + System.getProperty("file.separator") + cfeCur.getCategory());      fDir.mkdir();      File f=new File(cfeCur.getFileName());      String sTarget=sOutputDir + System.getProperty("file.separator") + cfeCur.getCategory()+ System.getProperty("file.separator")+ f.getName();      FileWriter fOut=new FileWriter(sTarget);      fOut.write(dngCur.toCooccurenceText(hmEdges));      fOut.close();      System.err.print(".");    } catch (    IOException ex) {      System.err.println("Could not convert file " + cfeCur.getFileName());      ex.printStackTrace(System.err);    }  }  System.err.println();  if (sSaveMapTo.length() > 0) {    try {      FileOutputStream fo=new FileOutputStream(sSaveMapTo);      ObjectOutputStream oos=new ObjectOutputStream(fo);      oos.writeObject(hmEdges);      fo.close();      oos.close();    } catch (    FileNotFoundException ex) {      System.err.println("Could not save hashmap.");      ex.printStackTrace(System.err);    }catch (    IOException ex) {      System.err.println("Could not save hashmap.");      ex.printStackTrace(System.err);    }  }}  }
class C{  public boolean match(String text){  return match(text,0,text.length());}  }
class C{  @Override public void requestPhotos(Context c,boolean refresh){  if (!model.isRefreshing() && !model.isLoading()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }    listener=new OnRequestPhotosListener(c,refresh);    Integer category=model.getCategory() == 0 ? null : model.getCategory();    Boolean featured=!model.isFeatured() ? null : true;    String username=TextUtils.isEmpty(model.getUsername()) ? null : model.getUsername();    String query=TextUtils.isEmpty(model.getQuery()) ? null : model.getQuery();    String orientation=TextUtils.isEmpty(model.getOrientation()) ? null : model.getOrientation();    model.getService().requestRandwomPhotos(category,featured,username,query,orientation,listener);  }}  }
class C{  public static void i(String tag,String s,Object... args){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,String.format(s,args));}  }
class C{  public void testJBrowserImage() throws Exception {  FetcherJBrowser fetcherJBrowser=TestUtils.newInstance(FetcherJBrowser.class,"fetcher.jbrowser");  Resource resource=new Resource("http://nutch.apache.org/assets/img/nutch_logo_tm.png","nutch.apache.org",TestUtils.JOB_CONTEXT);  System.out.println(fetcherJBrowser.fetch(resource).getResponseCode());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ACCUSE_INFO_3_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400073,value0);}  }
class C{  public void cancelConfirmationWindow(){  clickButton(NO_BUTTON_TEXT);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_BANISH_HE_IS_NOT_MY_GUILD_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300248,value0);}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  private void populateLabelFontDetails(java.awt.Font font){  labelFontName.setText(font.getFontName());  String style;  if (font.isBold() && font.isItalic()) {    style="Bold, Italic";  } else   if (font.isBold()) {    style="Bold";  } else   if (font.isItalic()) {    style="Italic";  } else {    style="Plain";  }  labelFontStyle.setText(style);  labelFontSize.setText(String.valueOf(font.getSize()));}  }
class C{  private static void fixTies(double[] x,double[] y) throws Exception {  Method method=KolmogorovSmirnovTest.class.getDeclaredMethod("fixTies",double[].class,double[].class);  method.setAccessible(true);  KolmogorovSmirnovTest ksTest=new KolmogorovSmirnovTest();  method.invoke(ksTest,x,y);}  }
class C{  private WatchedObject addWatch(WatchedObject watched){  try {    _watchedObjects.put(new WeakReference<WatchedObject>(watched));  } catch (  InterruptedException e) {    interrupt();  }  return watched;}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  private boolean isTypedTimeFullyLegal(){  if (mIs24HourMode) {    int[] values=getEnteredTime(null);    return (values[0] >= 0 && values[1] >= 0 && values[1] < 60);  } else {    return (mTypedTimes.contains(getAmOrPmKeyCode(HALF_DAY_1)) || mTypedTimes.contains(getAmOrPmKeyCode(HALF_DAY_2)));  }}  }
class C{  public void addValue(T v){  incrementValue(v,1);}  }
class C{  @Override public void reset() throws IOException {}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  protected void resetXML11() throws XNIException {  int count=fXML11Components.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fXML11Components.get(i);    c.reset(this);  }}  }
class C{  private boolean isIntervalStart(final BSPTree<Euclidean1D> node){  if ((Boolean)leafBefore(node).getAttribute()) {    return false;  }  if (!(Boolean)leafAfter(node).getAttribute()) {    return false;  }  return true;}  }
class C{  public static String buildSystemName(@Nullable Project project){  return getBuildSystem(project).getName();}  }
class C{  public int read(byte[] bytes,int offset,int len) throws IOException {  if (ins.read(bytes,offset,len) < len)   throw new IOException("buffer underflow");  return len;}  }
class C{  public LikesGetListQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  private void deadLineExecutor(){  long now=System.currentTimeMillis();  List<Long> expireLeases=new ArrayList<>();  for (  Lease l : this.keepAlives.values()) {    if (now > l.getDeadLine()) {      expireLeases.add(l.getLeaseID());    }  }  for (  Long id : expireLeases) {    Lease lease=this.keepAlives.get(id);    if (lease != null && lease.isContainHandler()) {      lease.getEtcdLeaseHandler().onLeaseExpired(id);    }    removeLease(id);  }}  }
class C{  private void snapBias(ConstraintWidget widget,Point candidatePoint){  WidgetCompanion widgetCompanion=(WidgetCompanion)widget.getCompanionWidget();  int currentStyle=WidgetDecorator.BLUEPRINT_STYLE;  if (mSceneDraw != null) {    currentStyle=mSceneDraw.getCurrentStyle();  }  WidgetDecorator decorator=widgetCompanion.getWidgetDecorator(currentStyle);  ConstraintAnchor leftAnchor=widget.getAnchor(ConstraintAnchor.Type.LEFT);  ConstraintAnchor rightAnchor=widget.getAnchor(ConstraintAnchor.Type.RIGHT);  if (leftAnchor != null && rightAnchor != null && leftAnchor.isConnected() && rightAnchor.isConnected() && leftAnchor.getTarget() != rightAnchor.getTarget()) {    int begin=WidgetInteractionTargets.constraintHandle(leftAnchor.getTarget()).getDrawX();    int end=WidgetInteractionTargets.constraintHandle(rightAnchor.getTarget()).getDrawX();    int width=widget.getDrawWidth();    int delta=candidatePoint.x - begin;    float percent=delta / (float)(end - begin - width);    percent=Math.max(0,Math.min(1,percent));    percent=snapPercent(percent);    widget.setHorizontalBiasPercent(percent);    decorator.updateBias();  }  ConstraintAnchor topAnchor=widget.getAnchor(ConstraintAnchor.Type.TOP);  ConstraintAnchor bottomAnchor=widget.getAnchor(ConstraintAnchor.Type.BOTTOM);  if (topAnchor != null && bottomAnchor != null && topAnchor.isConnected() && bottomAnchor.isConnected() && topAnchor.getTarget() != bottomAnchor.getTarget()) {    int begin=WidgetInteractionTargets.constraintHandle(topAnchor.getTarget()).getDrawY();    int end=WidgetInteractionTargets.constraintHandle(bottomAnchor.getTarget()).getDrawY();    int height=widget.getDrawHeight();    int delta=candidatePoint.y - begin;    float percent=delta / (float)(end - begin - height);    percent=Math.max(0,Math.min(1,percent));    percent=snapPercent(percent);    widget.setVerticalBiasPercent(percent);    decorator.updateBias();  }}  }
class C{  public String name(){  return this.record.name();}  }
class C{  private float calcAngle(float value,float yValueSum){  return value / yValueSum * mMaxAngle;}  }
class C{  public static void inlineSite(SootMethod inlinee,Stmt toInline,SootMethod container){  inlineSite(inlinee,toInline,container,new HashMap());}  }
class C{  public TShortObjectHashMap(TShortHashingStrategy strategy){  super(strategy);}  }
class C{  public boolean isIgnoringCancelled(){  return ignoreCancelled;}  }
class C{  public V put(int key,V value){  int index=insertionIndex(key);  return doPut(key,value,index);}  }
class C{  public static void logFallbackSearchRequestOutcome(boolean isFailure){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchFallbackSearchRequestStatus",isFailure ? REQUEST_FAILED : REQUEST_NOT_FAILED,REQUEST_BOUNDARY);}  }
class C{  @Override public Attr removeAttributeNode(Attr oldAttr) throws DOMException {  if (ownerDocument.errorChecking && isReadOnly()) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NO_MODIFICATION_ALLOWED_ERR",null);    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);  }  if (needsSyncData()) {    synchronizeData();  }  if (attributes == null) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NOT_FOUND_ERR",null);    throw new DOMException(DOMException.NOT_FOUND_ERR,msg);  }  return (Attr)attributes.removeItem(oldAttr,true);}  }
class C{  public static Map<String,Object> updatePaymentApplicationDef(DispatchContext dctx,Map<String,Object> context){  if (!context.containsKey("useHighestAmount")) {    context.put("useHighestAmount","Y");  }  return updatePaymentApplication(dctx,context);}  }
class C{  public void connectionLost(final Throwable cause){  logger.error("Connection lost",cause);  connection.connectionLost(cause);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("show window=groups;set groupNodes=selected;");}  }
class C{  public static Histogram joinFieldsHistogram(Histogram hist,Set<String> group){  if (group.size() < 2)   return new Histogram(hist);  List<String> flds=new ArrayList<String>(group);  Collection<Bucket> jfBkts=hist.buckets(flds.get(0));  for (int i=1; i < flds.size(); i++) {    Collection<Bucket> temp=jfBkts;    jfBkts=new ArrayList<Bucket>(2 * jfBkts.size());    for (    Bucket bkt1 : temp) {      for (      Bucket bkt2 : hist.buckets(flds.get(i))) {        Bucket jfBkt=joinFieldBucket(bkt1,bkt2,hist.recordsOutput());        if (jfBkt != null)         jfBkts.add(jfBkt);      }    }  }  double freqSum=0.0;  for (  Bucket bkt : jfBkts)   freqSum+=bkt.frequency();  if (Double.compare(freqSum,1.0) < 0)   return new Histogram(hist.fields());  double jfReduction=freqSum / hist.recordsOutput();  if (Double.compare(jfReduction,1.0) == 0)   return new Histogram(hist);  Histogram jfHist=new Histogram(hist.fields());  for (  String fld : hist.fields()) {    if (group.contains(fld))     jfHist.setBuckets(fld,jfBkts); else {      for (      Bucket bkt : hist.buckets(fld)) {        double restFreq=bkt.frequency() * jfReduction;        if (Double.compare(restFreq,1.0) < 0)         continue;        double restDistVals=Math.min(bkt.distinctValues(),restFreq);        Bucket restBkt=new Bucket(bkt.valueRange(),restFreq,restDistVals,bkt.valuePercentiles());        jfHist.addBucket(fld,restBkt);      }    }  }  return syncHistogram(jfHist);}  }
class C{  HashMap<String,Object> cloneProperties(){  if (Properties == null) {    return null;  }  HashMap<String,Object> props=new HashMap<String,Object>(Properties.size());  props.putAll(Properties);  return props;}  }
class C{  private static IncludedFieldsParams findIncludedFields(TypedParams<IncludedFieldsParams> includedFields,String elementName){  IncludedFieldsParams includedFieldsParams=null;  if (includedFields != null) {    for (    Map.Entry<String,IncludedFieldsParams> entry : includedFields.getParams().entrySet()) {      if (elementName.equals(entry.getKey())) {        includedFieldsParams=entry.getValue();      }    }  }  return includedFieldsParams;}  }
class C{  public VideoRecordReader(int height,int width){  this(height,width,false);}  }
class C{  public static void generatePublicResourceXml(AaptResourceCollector aaptResourceCollector,String outputIdsXmlFullFilename,String outputPublicXmlFullFilename){  if (aaptResourceCollector == null) {    return;  }  FileUtil.createFile(outputIdsXmlFullFilename);  FileUtil.createFile(outputPublicXmlFullFilename);  PrintWriter idsWriter=null;  PrintWriter publicWriter=null;  try {    FileUtil.createFile(outputIdsXmlFullFilename);    FileUtil.createFile(outputPublicXmlFullFilename);    idsWriter=new PrintWriter(new FileOutputStream(outputIdsXmlFullFilename));    publicWriter=new PrintWriter(new FileOutputStream(outputPublicXmlFullFilename));    idsWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>");    publicWriter.println("<?xml version=\"1.0\" encoding=\"utf-8\"?>");    idsWriter.println("<resources>");    publicWriter.println("<resources>");    Map<RType,Set<RDotTxtEntry>> map=aaptResourceCollector.getRTypeResourceMap();    Iterator<Entry<RType,Set<RDotTxtEntry>>> iterator=map.entrySet().iterator();    while (iterator.hasNext()) {      Entry<RType,Set<RDotTxtEntry>> entry=iterator.next();      RType rType=entry.getKey();      if (!rType.equals(RType.STYLEABLE)) {        Set<RDotTxtEntry> set=entry.getValue();        for (        RDotTxtEntry rDotTxtEntry : set) {          String rawName=aaptResourceCollector.getRawName(rType,rDotTxtEntry.name);          if (StringUtil.isBlank(rawName)) {            rawName=rDotTxtEntry.name;          }          publicWriter.println("<public type=\"" + rType + "\" name=\""+ rawName+ "\" id=\""+ rDotTxtEntry.idValue+ "\" />");        }        Set<String> ignoreIdSet=aaptResourceCollector.getIgnoreIdSet();        for (        RDotTxtEntry rDotTxtEntry : set) {          if (rType.equals(RType.ID) && !ignoreIdSet.contains(rDotTxtEntry.name)) {            idsWriter.println("<item type=\"" + rType + "\" name=\""+ rDotTxtEntry.name+ "\"/>");          } else           if (rType.equals(RType.STYLE)) {            if (rDotTxtEntry.name.indexOf(Constant.Symbol.UNDERLINE) > 0) {            }          }        }      }      idsWriter.flush();      publicWriter.flush();    }    idsWriter.println("</resources>");    publicWriter.println("</resources>");  } catch (  Exception e) {    throw new PatchUtilException(e);  } finally {    if (idsWriter != null) {      idsWriter.flush();      idsWriter.close();    }    if (publicWriter != null) {      publicWriter.flush();      publicWriter.close();    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_LEAVE_FAIL_NOT_A_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300858,value0);}  }
class C{  public XtnEntry createTransactionEntry(ServerTransaction txn){  if (isTransactionWithLease(txn))   addTransactionWithLease(txn);  XtnEntry xtnEntry=new XtnEntry(txn);  addTransaction(xtnEntry);  return xtnEntry;}  }
class C{  public static String[] expandArguments(String[] args) throws Exception {  List<String> options=new ArrayList<String>();  for (int i=0; i < args.length; i++) {    if (args[i].equals(OPTIONS_FILE)) {      if (i == args.length - 1) {        throw new Exception("Missing options file");      }      String fileName=args[++i];      File optionsFile=new File(fileName);      BufferedReader reader=null;      StringBuilder buffer=new StringBuilder();      try {        reader=new BufferedReader(new FileReader(optionsFile));        String nextLine=null;        while ((nextLine=reader.readLine()) != null) {          nextLine=nextLine.trim();          if (nextLine.length() == 0 || nextLine.startsWith("#")) {            continue;          }          buffer.append(nextLine);          if (nextLine.endsWith("\\")) {            if (buffer.charAt(0) == '\'' || buffer.charAt(0) == '"') {              throw new Exception("Multiline quoted strings not supported in file(" + fileName + "): "+ buffer.toString());            }            buffer.deleteCharAt(buffer.length() - 1);          } else {            options.add(removeQuotesEncolosingOption(fileName,buffer.toString()));            buffer.delete(0,buffer.length());          }        }        if (buffer.length() != 0) {          throw new Exception("Malformed option in options file(" + fileName + "): "+ buffer.toString());        }      } catch (      IOException ex) {        throw new Exception("Unable to read options file: " + fileName,ex);      } finally {        if (reader != null) {          try {            reader.close();          } catch (          IOException ex) {            LOG.info("Exception while closing reader",ex);          }        }      }    } else {      options.add(args[i]);    }  }  return options.toArray(new String[options.size()]);}  }
class C{  public static int swapInteger(int value){  return (((value >> 0) & 0xff) << 24) + (((value >> 8) & 0xff) << 16) + (((value >> 16) & 0xff) << 8)+ (((value >> 24) & 0xff) << 0);}  }
class C{  public int createDeferredAttribute(String attrName,String attrURI,String attrValue,boolean specified){  int nodeIndex=createNode(Node.ATTRIBUTE_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  setChunkValue(fNodeName,attrName,chunk,index);  setChunkValue(fNodeURI,attrURI,chunk,index);  setChunkValue(fNodeValue,attrValue,chunk,index);  int extra=specified ? SPECIFIED : 0;  setChunkIndex(fNodeExtra,extra,chunk,index);  return nodeIndex;}  }
class C{  public static void draw3DCoordinateSpace(Canvas canvas){  if (!isDrawAid)   return;  initPaint();  init3DPoint();  canvas.save();  CanvasUtils.drawLine(XHead_3D,XTail_3D,canvas,mPaint);  CanvasUtils.drawLine(XHead_3D,XCap1_3D,canvas,mPaint);  CanvasUtils.drawLine(XHead_3D,XCap2_3D,canvas,mPaint);  CanvasUtils.drawLine(YHead_3D,YTail_3D,canvas,mPaint);  CanvasUtils.drawLine(YHead_3D,YCap1_3D,canvas,mPaint);  CanvasUtils.drawLine(YHead_3D,YCap2_3D,canvas,mPaint);  CanvasUtils.drawLine(ZHead_3D,ZTail_3D,canvas,mPaint);  CanvasUtils.drawLine(ZHead_3D,ZCap1_3D,canvas,mPaint);  CanvasUtils.drawLine(ZHead_3D,ZCap2_3D,canvas,mPaint);  canvas.restore();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_VENDOR_REGISTER_SOLD_OUT(int nameId){  return new SM_SYSTEM_MESSAGE(1301047,new DescriptionId(nameId));}  }
class C{  public TrustManagerImpl(KeyStore keyStore){  this(keyStore,null);}  }
class C{  public static boolean isJCB(String cc){  String first4digs=cc.substring(0,4);  if ((cc.length() == 16) && (first4digs.equals("3088") || first4digs.equals("3096") || first4digs.equals("3112")|| first4digs.equals("3158")|| first4digs.equals("3337")|| first4digs.equals("3528")))   return isCreditCard(cc);  return false;}  }
class C{  public static String toPEMformat(X509Certificate certificate){  StringWriter sw=new StringWriter();  PEMWriter pemWriter=new PEMWriter(sw);  try {    pemWriter.writeObject(certificate);    pemWriter.close();    return sw.toString();  } catch (  IOException x) {    throw new RuntimeException("Failed to serialize certificate",x);  }}  }
class C{  public ReversedLinesFileReader(final File file) throws IOException {  this(file,4096,Charset.defaultCharset().toString());}  }
class C{  public Builder keyboardZoomOffset(Number keyboardZoomOffset){  this.keyboardZoomOffset=keyboardZoomOffset;  return this;}  }
class C{  public void resetBonusPotential(){  final int rank=Randomizer.nextInt(100) < 4 ? (Randomizer.nextInt(100) < 4 ? -UNIQUE : -EPIC) : -RARE;  resetBonusPotentialWithRank(rank,false);}  }
class C{  @Override public boolean isShown(){  return isShown;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public boolean isSimilarTo(final Plane plane){  final double angle=Vector3D.angle(w,plane.w);  return ((angle < 1.0e-10) && (FastMath.abs(originOffset - plane.originOffset) < tolerance)) || ((angle > (FastMath.PI - 1.0e-10)) && (FastMath.abs(originOffset + plane.originOffset) < tolerance));}  }
class C{  private String extractString(JsonObject jsonObj,String field){  String value="";  if (jsonObj != null) {    JsonElement element=jsonObj.get(field);    if (element != null) {      value=element.getAsString();    }  }  return value;}  }
class C{  public ExecuteCodeQuery(VkApiClient client,Actor actor,String code){  super(client,"execute",JsonElement.class);  accessToken(actor.getAccessToken());  code(code);}  }
class C{  public String[] readAllStrings(){  String[] tokens=WHITESPACE_PATTERN.split(readAll());  if (tokens.length == 0 || tokens[0].length() > 0)   return tokens;  String[] decapitokens=new String[tokens.length - 1];  for (int i=0; i < tokens.length - 1; i++)   decapitokens[i]=tokens[i + 1];  return decapitokens;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CarveSignet_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200950,skillcaster,num0,skilltarget,skillname);}  }
class C{  public MarketSearchQuery tags(Integer... value){  return unsafeParam("tags",value);}  }
class C{  public void writeBytes(byte[] value) throws JMSException {  initializeWriting();  try {    this.dataOut.write(value);  } catch (  IOException ioe) {    JMSException jmsEx=new JMSException("Could not write data:" + ioe.toString());    jmsEx.setLinkedException(ioe);    throw jmsEx;  }}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  public MessagesGetChatQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){  super(client,"messages.getChat",ChatFull.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  public CM_TIME_CHECK(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  private String formatDate(Date date){  return DateFormat.getDateInstance(DateFormat.SHORT).format(date);}  }
class C{  public static void htsMLSAVocoderCommand(String[] args) throws Exception {  HMMData htsData=new HMMData();  HTSPStream lf0Pst, mcepPst, strPst=null, magPst=null;  boolean[] voiced=null;  LEDataInputStream lf0Data, mcepData, strData, magData;  String lf0File, mcepFile, strFile="", magFile="", outDir, outFile;  int mcepVsize, lf0Vsize, strVsize=0, magVsize=0;  float f0LoudFemale=0.01313791f;  float strLoudFemale[]={-0.002995137f,-0.042511885f,0.072285673f,0.127030178f,0.006603170f};  float magLoudFemale[]={0.0417336550f,0.0002531457f,-0.0436839922f,-0.0335192265f,-0.0217501786f,-0.0166272925f,-0.0424825309f,-0.0460119758f,-0.0307114900f,-0.0327369397f};  float mcepLoudFemale[]={-0.245401838f,-0.062825965f,-0.360973095f,0.117120506f,0.917223265f,0.138920770f,0.338553265f,-0.004857140f,0.285192007f,-0.358292740f,-0.062907335f,-0.008040502f,0.029470562f,-0.485079992f,-0.006727651f,-1.313869583f,-0.353797651f,0.797097747f,-0.164614609f,-0.311173881f,-0.205134527f,-0.478116992f,-0.311340181f,-1.485855332f,-0.045632626f};  float f0SoftFemale=0.3107256f;  float strSoftFemale[]={0.22054621f,0.11091616f,0.06378487f,0.02110654f,-0.05118725f};  float magSoftFemale[]={0.5747024f,0.3248238f,0.2356782f,0.2441387f,0.2702851f,0.2895966f,0.2437654f,0.2959747f,0.2910529f,0.2508167f};  float mcepSoftFemale[]={-0.103318169f,0.315698439f,0.170000964f,0.223589719f,0.262139649f,-0.062646758f,-4.998160141f,0.008026212f,1.742740835f,1.990719666f,0.548177521f,0.999093856f,0.262868363f,1.755019406f,0.330058590f,-5.241305159f,-0.021005177f,-5.890942393f,0.344385084f,0.242179454f,0.200936671f,-1.630683357f,0.110674201f,-53.525043676f,-0.223682764f};  float f0LoudMale=-0.08453168f;  float strLoudMale[]={0.07092900f,0.41149292f,0.24479925f,0.01326785f,-0.01517731f};  float magLoudMale[]={-0.21923620f,-0.11031120f,-0.02786084f,-0.10640244f,-0.12020442f,-0.08508762f,-0.08171423f,-0.08000552f,-0.07291968f,-0.09478534f};  float mcepLoudMale[]={0.15335238f,0.30880292f,-0.22922052f,-0.01116095f,1.04088351f,-0.31693632f,-19.36510752f,-0.12210441f,0.81743415f,-0.19799409f,0.44572112f,-0.24845725f,-1.39545409f,-0.88788491f,8.83006358f,-1.26623882f,0.52428102f,-1.02615700f,-0.28092043f,-0.82543015f,0.33081815f,0.39498874f,0.20100945f,0.60890790f,-0.37892217f};  float f0SoftMale=0.05088677f;  float strSoftMale[]={0.07595702f,0.02348965f,-0.02038628f,-0.08572970f,-0.06090386f};  float magSoftMale[]={0.08869109f,0.05517088f,0.08902098f,0.09263865f,0.04866824f,0.04554406f,0.04937004f,0.05082076f,0.04988959f,0.03459440f};  float mcepSoftMale[]={0.098129393f,0.124686819f,0.195709008f,-0.007066379f,-1.795620578f,0.089982916f,15.371711686f,-0.051023831f,-0.213521945f,0.009725292f,0.361488718f,0.118609995f,1.794143134f,0.100130942f,0.005999542f,-0.593128934f,-0.165385304f,0.101705681f,0.175534153f,0.049246302f,0.009530379f,-0.272557042f,-0.043030771f,0.158694874f,0.099107970f};  float f0Trans=0f;  float strTrans[]=null;  float magTrans[]=null;  float mcepTrans[]=null;  int ind=0;  htsData.setStage(Integer.parseInt(args[ind++]));  htsData.setAlpha(Float.parseFloat(args[ind++]));  if (args[ind++].contentEquals("1"))   htsData.setUseLogGain(true); else   htsData.setUseLogGain(false);  htsData.setBeta(Float.parseFloat(args[ind++]));  htsData.setRate(Integer.parseInt(args[ind++]));  htsData.setFperiod(Integer.parseInt(args[ind++]));  mcepFile=args[ind++];  mcepVsize=Integer.parseInt(args[ind++]);  lf0File=args[ind++];  lf0Vsize=Integer.parseInt(args[ind++]);  outFile=args[ind++];  if (args.length > (ind + 1)) {    htsData.setUseMixExc(true);    strFile=args[ind++];    strVsize=Integer.parseInt(args[ind++]);    FileInputStream mixedFiltersStream=new FileInputStream(args[ind++]);    htsData.setNumFilters(Integer.parseInt(args[ind++]));    htsData.readMixedExcitationFilters(mixedFiltersStream);    htsData.setPdfStrStream(null);  } else {    htsData.setUseMixExc(false);  }  if (args.length > (ind + 1)) {    htsData.setUseFourierMag(true);    magFile=args[ind++];    magVsize=Integer.parseInt(args[ind++]);    htsData.setPdfMagStream(null);  } else {    htsData.setUseFourierMag(false);  }  boolean play=Boolean.parseBoolean(args[ind++]);  boolean trans=true;  if (args[ind].contentEquals("loud")) {    f0Trans=f0LoudFemale;    strTrans=strLoudFemale;    magTrans=magLoudFemale;    mcepTrans=mcepLoudFemale;    System.out.println("Generating loud voice");  } else   if (args[ind].contentEquals("soft")) {    f0Trans=f0SoftFemale;    strTrans=strSoftFemale;    magTrans=magSoftFemale;    mcepTrans=mcepSoftFemale;    System.out.println("Generating soft voice");  } else {    trans=false;    System.out.println("Generating modal voice");  }  htsData.setF0Std(1.0);  htsData.setF0Mean(0.0);  int totalFrame=0;  int lf0VoicedFrame=0;  float fval;  int i, j;  lf0Data=new LEDataInputStream(new BufferedInputStream(new FileInputStream(lf0File)));  File lf0=new File(lf0File);  long lengthLf0=lf0.length();  lengthLf0=lengthLf0 / ((lf0Vsize / 3) * 4);  File mcep=new File(mcepFile);  long lengthMcep=mcep.length();  lengthMcep=lengthMcep / ((mcepVsize / 3) * 4);  int numSize=2;  long lengthStr;  if (htsData.getUseMixExc()) {    File str=new File(strFile);    lengthStr=str.length();    lengthStr=lengthStr / ((strVsize / 3) * 4);    numSize++;  } else   lengthStr=0;  long lengthMag;  if (htsData.getUseFourierMag()) {    File mag=new File(magFile);    lengthMag=mag.length();    lengthMag=lengthMag / ((magVsize / 3) * 4);    numSize++;  } else   lengthMag=0;  float sizes[]=new float[numSize];  int n=0;  sizes[n++]=lengthMcep;  sizes[n++]=lengthLf0;  if (lengthStr > 0)   sizes[n++]=lengthStr;  if (lengthMag > 0)   sizes[n++]=lengthMag;  totalFrame=(int)MathUtils.getMin(sizes);  System.out.println("Total number of Frames = " + totalFrame);  voiced=new boolean[totalFrame];  lf0Pst=new HTSPStream(lf0Vsize,totalFrame,HMMData.FeatureType.LF0,0);  mcepPst=new HTSPStream(mcepVsize,totalFrame,HMMData.FeatureType.MGC,0);  lf0VoicedFrame=0;  lf0Data=new LEDataInputStream(new BufferedInputStream(new FileInputStream(lf0File)));  for (i=0; i < totalFrame; i++) {    fval=lf0Data.readFloat();    if (fval < 0)     voiced[i]=false; else {      voiced[i]=true;      if (trans) {        fval=(float)Math.exp(fval);        fval=fval + (fval * f0Trans);        fval=(float)Math.log(fval);      }      lf0Pst.setPar(lf0VoicedFrame,0,fval);      lf0VoicedFrame++;    }  }  lf0Data.close();  mcepData=new LEDataInputStream(new BufferedInputStream(new FileInputStream(mcepFile)));  for (i=0; i < totalFrame; i++) {    for (j=0; j < mcepPst.getOrder(); j++) {      fval=mcepData.readFloat();      if (trans & j < 4)       fval=fval + (fval * mcepTrans[j]);      mcepPst.setPar(i,j,fval);    }  }  mcepData.close();  if (htsData.getUseMixExc()) {    strPst=new HTSPStream(strVsize,totalFrame,HMMData.FeatureType.STR,0);    strData=new LEDataInputStream(new BufferedInputStream(new FileInputStream(strFile)));    for (i=0; i < totalFrame; i++) {      for (j=0; j < strPst.getOrder(); j++) {        fval=strData.readFloat();        if (trans)         fval=fval + (fval * strTrans[j]);        strPst.setPar(i,j,fval);      }    }    strData.close();  }  n=0;  if (htsData.getUseFourierMag()) {    magPst=new HTSPStream(magVsize,totalFrame,HMMData.FeatureType.MAG,0);    magData=new LEDataInputStream(new BufferedInputStream(new FileInputStream(magFile)));    for (i=0; i < totalFrame; i++) {      for (j=0; j < magPst.getOrder(); j++) {        n++;        fval=magData.readFloat();        if (trans)         fval=fval + (fval * magTrans[j]);        magPst.setPar(i,j,fval);      }    }    magData.close();  }  AudioFormat af=getHTSAudioFormat(htsData);  double[] audio_double=null;  HTSVocoder par2speech=new HTSVocoder();  audio_double=par2speech.htsMLSAVocoder(lf0Pst,mcepPst,strPst,magPst,voiced,htsData,null);  long lengthInSamples=(audio_double.length * 2) / (af.getSampleSizeInBits() / 8);  Log.d(Mary.LOG,"length in samples=" + lengthInSamples);  double MaxSample=MathUtils.getAbsMax(audio_double);  for (i=0; i < audio_double.length; i++)   audio_double[i]=(audio_double[i] / MaxSample);  DDSAudioInputStream oais=new DDSAudioInputStream(new BufferedDoubleDataSource(audio_double),af);  File fileOut=new File(outFile);  System.out.println("saving to file: " + outFile);  if (AudioSystem.isFileTypeSupported(AudioFileFormat.Type.WAVE,oais)) {    AudioSystem.write(oais,AudioFileFormat.Type.WAVE,fileOut);  }  if (play) {    System.out.println("Calling audioplayer:");    AudioPlayer player=new AudioPlayer(fileOut);    player.start();    player.join();    System.out.println("audioplayer finished...");  }}  }
class C{  public long number(){  return blkNum;}  }
class C{  @Override public double cost(Target target,Unit unit){  return cost(target,unit,featureDefinition,weightFunction);}  }
class C{  @Override public SLDDataInterface createVectorSLDData(File vectorFile){  if (vectorFile == null) {    return null;  }  StyledLayerDescriptor sld=null;  Map<String,String> map=null;  try {    map=DataSourceProperties.encodeFilename(vectorFile.toURI().toURL().toString());  } catch (  MalformedURLException e) {    ConsoleManager.getInstance().exception(this,e);    return null;  }  DataStore dataStore=null;  try {    dataStore=DataStoreFinder.getDataStore(map);  } catch (  IOException e) {    ConsoleManager.getInstance().exception(this,e);    return null;  }  if (dataStore != null) {    String typeName;    GeometryTypeEnum geometryTypeEnum=GeometryTypeEnum.UNKNOWN;    try {      typeName=dataStore.getTypeNames()[0];      SimpleFeatureSource source=dataStore.getFeatureSource(typeName);      SimpleFeatureType schema=source.getSchema();      GeometryType geometryType=schema.getGeometryDescriptor().getType();      Class<?> bindingType=geometryType.getBinding();      geometryTypeEnum=GeometryTypeMapping.getGeometryType(bindingType);    } catch (    IOException e) {      ConsoleManager.getInstance().exception(this,e);      return null;    }switch (geometryTypeEnum) {case POINT:      sld=DefaultSymbols.createNewPoint();    break;case LINE:  sld=DefaultSymbols.createNewLine();break;case POLYGON:sld=DefaultSymbols.createNewPolygon();break;default :break;}}File sldFilename=ExternalFilenames.createSLDFilename(vectorFile);StyleWrapper styleWrapper=new StyleWrapper(sldFilename.getName());String sldContents=sldWriter.encodeSLD(null,sld);SLDData sldData=new SLDData(styleWrapper,sldContents);sldData.setSLDFile(sldFilename);sldData.setReadOnly(false);return sldData;}  }
class C{  public JsonObject add(String name,boolean value){  add(name,Json.value(value));  return this;}  }
class C{  private boolean copyRawFile(int resID,String title,boolean setAsDefault){  if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))   return false;  File path=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_NOTIFICATIONS);  path.mkdirs();  String filename=mContext.getResources().getResourceEntryName(resID) + ".mp3";  File outFile=new File(path,filename);  String mimeType="audio/mpeg";  boolean isError=false;  InputStream inputStream=null;  FileOutputStream outputStream=null;  try {    inputStream=mContext.getResources().openRawResource(resID);    outputStream=new FileOutputStream(outFile);    byte[] buffer=new byte[1024];    int bytesRead;    while ((bytesRead=inputStream.read(buffer)) > 0) {      outputStream.write(buffer,0,bytesRead);    }    String outAbsPath=outFile.getAbsolutePath();    ContentValues contentValues=new ContentValues();    contentValues.put(MediaStore.MediaColumns.DATA,outAbsPath);    contentValues.put(MediaStore.MediaColumns.TITLE,title);    contentValues.put(MediaStore.MediaColumns.MIME_TYPE,mimeType);    contentValues.put(MediaStore.Audio.Media.IS_ALARM,false);    contentValues.put(MediaStore.Audio.Media.IS_NOTIFICATION,true);    contentValues.put(MediaStore.Audio.Media.IS_RINGTONE,false);    contentValues.put(MediaStore.Audio.Media.IS_MUSIC,false);    Uri contentUri=MediaStore.Audio.Media.getContentUriForPath(outAbsPath);    mContext.getContentResolver().delete(contentUri,MediaStore.MediaColumns.DATA + "=\"" + outAbsPath+ "\"",null);    Uri newUri=mContext.getContentResolver().insert(contentUri,contentValues);    MediaScannerConnection.scanFile(mContext,new String[]{newUri.toString()},new String[]{mimeType},null);    if (setAsDefault) {      SharedPreferences sharedPrefs=PreferenceManager.getDefaultSharedPreferences(mContext);      SharedPreferences.Editor editor=sharedPrefs.edit();      editor.putString(PREF_KEY_RINGTONE_DEFAULT,newUri.toString());      if (sharedPrefs.getString(NOTIFICATION_SOUND,"").equals(mContext.getString(R.string.default_ringtone_path))) {        editor.putString(NOTIFICATION_SOUND,newUri.toString());      }      editor.apply();    }    Log.d(tag,"Copied notification sound " + title + " to "+ outAbsPath);    Log.d(tag,"ID is " + newUri.toString());  } catch (  Exception e) {    Log.e(tag,"Error writing " + filename,e);    isError=true;  } finally {    try {      if (inputStream != null)       inputStream.close();      if (outputStream != null)       outputStream.close();    } catch (    IOException e) {    }  }  return !isError;}  }
class C{  public void delete(){  mindmapsGraph.getConceptLog().putConcept(getTarget());  mindmapsGraph.getConceptLog().putConcept(getSource());  edge.remove();  edge=null;}  }
class C{  public void insert(int offset,short value){  if (offset == _pos) {    add(value);    return;  }  ensureCapacity(_pos + 1);  System.arraycopy(_data,offset,_data,offset + 1,_pos - offset);  _data[offset]=value;  _pos++;}  }
class C{  public Well44497b(){  super(K);}  }
class C{  public static void resetSpotlights(@NonNull Context context){  new PreferencesManager(context).resetAll();}  }
class C{  @Override public Filter createFilter(){  return new BeforeExtended();}  }
class C{  @Override public String toString(){  StringBuffer str=new StringBuffer();  String s=super.toString();  int index2=s.lastIndexOf('.');  if (index2 != -1) {    s=s.substring(index2 + 1);  }  str.append(s);  for (int i=0; i < fLocationPaths.length; i++) {    str.append('[');    XPath.Step[] steps=fLocationPaths[i].steps;    for (int j=0; j < steps.length; j++) {      if (j == fCurrentStep[i]) {        str.append('^');      }      str.append(steps[j].toString());      if (j < steps.length - 1) {        str.append('/');      }    }    if (fCurrentStep[i] == steps.length) {      str.append('^');    }    str.append(']');    str.append(',');  }  return str.toString();}  }
class C{  public TestBinderFactory buildBinderFactory(LinkedHashSet<DimensionConfig> dimensionConfiguration,MetricLoader metricLoader,TableLoader tableLoader,ApplicationState state){  return new TestBinderFactory(dimensionConfiguration,metricLoader,tableLoader,state);}  }
class C{  public static String T2S(String text){  char[] chars=text.toCharArray();  for (int i=0; i < chars.length; i++) {    Character replacement=t2s.get(chars[i]);    if (replacement != null) {      chars[i]=replacement;    }  }  return new String(chars);}  }
class C{  public static void copy(Reader input,OutputStream output) throws IOException {  OutputStreamWriter out=new OutputStreamWriter(output);  copy(input,out);  out.flush();}  }
class C{  private TreeSet<DimensionRow> doPagination(TreeSet<DimensionRow> dimensionRows,int page,int perPage){  return dimensionRows.stream().skip((page - 1) * perPage).limit(perPage).collect(Collectors.toCollection(null));}  }
class C{  private static void checkVerticalParentMarginSnap(ConstraintAnchor anchor,ConstraintAnchor.Type type,int margin,SnapCandidate candidate){  ConstraintWidget widget=anchor.getOwner();  if (widget.getParent() == null) {    return;  }  ConstraintAnchor targetParent=widget.getParent().getAnchor(type);  ConstraintHandle targetParentHandle=WidgetInteractionTargets.constraintHandle(targetParent);  ConstraintHandle anchorHandle=WidgetInteractionTargets.constraintHandle(anchor);  ConstraintAnchor target=new ConstraintAnchor(widget.getParent(),type);  int tx=targetParentHandle.getDrawX();  int ty=targetParentHandle.getDrawY() + margin;  int distance=Math.abs(anchorHandle.getDrawY() - ty);  if (distance <= CONNECTION_SLOPE) {    candidate.distance=distance;    candidate.target=target;    candidate.source=anchor;    candidate.x=tx;    candidate.y=ty;  }}  }
class C{  public static int pxToDp(Context context,float pxValue){  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(pxValue / scale + 0.5f);}  }
class C{  public static void shuffle(int[] a){  if (a == null)   throw new NullPointerException("argument array is null");  int n=a.length;  for (int i=0; i < n; i++) {    int r=i + uniform(n - i);    int temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public ScaleSelector(){  slider=new JSlider(1,10,1);  value=new JLabel("x1");  size=new JLabel("   ");  preview=new ImagePanel();  value.setPreferredSize(new Dimension(25,10));  size.setHorizontalAlignment(JLabel.CENTER);  slider.setMajorTickSpacing(1);  slider.setSnapToTicks(true);  slider.addChangeListener(this);  setLayout(new BorderLayout());  Box b1=new Box(BoxLayout.X_AXIS);  b1.add(Box.createHorizontalStrut(5));  b1.add(Box.createHorizontalGlue());  b1.add(preview);  b1.add(Box.createHorizontalGlue());  b1.add(Box.createHorizontalStrut(5));  add(b1,BorderLayout.CENTER);  Box b2=new Box(BoxLayout.X_AXIS);  b2.add(slider);  b2.add(Box.createHorizontalStrut(5));  b2.add(value);  Box b3=new Box(BoxLayout.X_AXIS);  b3.add(Box.createHorizontalStrut(5));  b3.add(Box.createHorizontalGlue());  b3.add(size);  b3.add(Box.createHorizontalGlue());  b3.add(Box.createHorizontalStrut(5));  Box b4=new Box(BoxLayout.Y_AXIS);  b4.add(b2);  b4.add(b3);  add(b4,BorderLayout.SOUTH);}  }
class C{  public static void registerFuel(ItemStack stack,int duration){  registerFuel(stack,false,duration);}  }
class C{  public boolean isStable(){  if (this.lprefc == null)   this.lprefc=ReflectionCoefficients.lpc2lprefc(oneMinusA);  for (int i=0; i < this.lprefc.length; i++) {    if ((this.lprefc[i] > 1.0) || (this.lprefc[i] < -1.0))     return (false);  }  return (true);}  }
class C{  public boolean isSetSequenceId(){  return __isset_bit_vector.get(__SEQUENCEID_ISSET_ID);}  }
class C{  @Override protected boolean isForward(){  return false;}  }
class C{  public static final int binarySearch(int[] a,int key){  int x1=0;  int x2=a.length;  int i=x2 / 2;  while (x1 < x2) {    if (a[i] == key) {      return i;    } else     if (a[i] < key) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public SimpleValueChecker(final double relativeThreshold,final double absoluteThreshold){  super(relativeThreshold,absoluteThreshold);  maxIterationCount=ITERATION_CHECK_DISABLED;}  }
class C{  private static BufferedImage createImage(String word){  BufferedImage bImg=null;  try {    bImg=new BufferedImage(IMAGE_WIDTH,IMAGE_HEIGHT,BufferedImage.TYPE_INT_ARGB_PRE);    Graphics2D g2=bImg.createGraphics();    g2.setColor(Color.BLACK);    g2.fillRect(0,0,IMAGE_WIDTH,IMAGE_HEIGHT);    Font font=new Font(FONT_FAMILY_NAME,Font.BOLD,TEXT_SIZE);    g2.setFont(font);    g2.setColor(Color.WHITE);    g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);    char[] chars=word.toCharArray();    int x=10;    int y=IMAGE_HEIGHT / 2 + TEXT_SIZE / 2;    for (int i=0; i < chars.length; i++) {      char ch=chars[i];      g2.drawString(String.valueOf(ch),x + font.getSize() * i,y + (int)Math.pow(-1,i) * (TEXT_SIZE / 6));    }    g2.dispose();  } catch (  Exception e) {    e.printStackTrace();    bImg=null;  }  return bImg;}  }
class C{  public static void changeToTheme(Activity activity,int theme){  sTheme=theme;  activity.finish();  activity.startActivity(new Intent(activity,activity.getClass()));}  }
class C{  public boolean emptiable(){  return minEffectiveTotalRange() == 0;}  }
class C{  public DocsGetQuery(VkApiClient client,UserActor actor){  super(client,"docs.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  @Override public IntegerDistribution makeDistribution(){  return new PoissonDistribution(DEFAULT_TEST_POISSON_PARAMETER);}  }
class C{  public static <T>T assertArgumentNotNull(T argument,String argumentName){  if (argument == null)   throw new IllegalArgumentException("Argument cannot be null - '" + argumentName + "'");  return argument;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Silence_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200754,skilltarget);}  }
class C{  public void toAllInRadius(int dimension,Vec3i pos,double radius){  toAllInRadius(dimension,new Vec3d(pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5),radius);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set networkData=" + ClassificationType.KEGG + ";");}  }
class C{  public XPathExpressionException(String message){  super(message);}  }
class C{  public Boolean hasNodePropertyValue(String nodePath,String propertyName,String propertyValue) throws RepositoryException {  LOG.debug("Checking if node '{}' has property '{}' with value '{}'",nodePath,propertyName,propertyValue);  return getNodeProperty(nodePath,propertyName).getValue().getString().equals(propertyValue);}  }
class C{  public void executeImmediately(String command){  dir.executeImmediately(command,getCommandManager());}  }
class C{  @VisibleForTesting public static GitRepository initScratchRepo(boolean verbose,Path path,Map<String,String> environment) throws RepoException {  GitRepository repository=new GitRepository(path.resolve(".git"),path,verbose,environment);  repository.git(path,ImmutableList.of("init","."));  return repository;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_USER_BANNED(String value0){  return new SM_SYSTEM_MESSAGE(1300623,value0);}  }
class C{  public EntityQuery filterByDate(Timestamp moment,String... filterByFieldName){  this.filterByDate=true;  this.filterByDateMoment=moment;  if (filterByFieldName.length % 2 != 0) {    throw new IllegalArgumentException("You must pass an even sized array to this method, each pair should represent a from date field name and a thru date field name");  }  this.filterByFieldNames=Arrays.asList(filterByFieldName);  return this;}  }
class C{  public PoissonDistribution(double p,double epsilon) throws MathIllegalArgumentException {  this(p,epsilon,DEFAULT_MAX_ITERATIONS);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_STOP_BROADCAST(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300137,value0,value1);}  }
class C{  public int compare(File file1,File file2){  return caseSensitivity.checkCompareTo(file1.getName(),file2.getName());}  }
class C{  private static void killRunningApplication() throws IOException {  String[] cmd={"/bin/sh","-c","kill -9 $(cat application.pid)"};  Process p=Runtime.getRuntime().exec(cmd);}  }
class C{  public void addIncludePrefix(String prefix){  this.includeList.add(prefix);}  }
class C{  public String name(){  if (this.record != null) {    return this.record.name();  } else {    return null;  }}  }
class C{  protected Path linePath(Path p,int i,float[] positions){  p.moveTo(mViewPortHandler.offsetLeft(),positions[i + 1]);  p.lineTo(mViewPortHandler.contentRight(),positions[i + 1]);  return p;}  }
class C{  private void writeDomains(Document document,Element rootElement){  Element domains=document.createElement("domains");  rootElement.appendChild(domains);  for (  DomainSpec spec : this.document.getDomains())   writeDomainSpec(spec,document,domains);}  }
class C{  private void checkIndex(final int index) throws MathIllegalArgumentException {  if (index < 0 || index > start.length - 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,index,0,start.length - 2);  }}  }
class C{  public String optString(int index,String defaultValue){  Object object=this.opt(index);  return JSONObject.NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public void onEvent(int event,JsonParser parser){switch (event) {case JsonEvent.START_OBJECT:    onStartObject();  break;case JsonEvent.END_OBJECT:onEndObject();break;case JsonEvent.START_ARRAY:onStartArray();break;case JsonEvent.END_ARRAY:onEndArray();break;case JsonEvent.FIELD_NAME:onFieldName(parser.getCurrentString());break;case JsonEvent.VALUE_STRING:onValue(parser.getCurrentString());break;case JsonEvent.VALUE_INT:onValue(parser.getCurrentInt());break;case JsonEvent.VALUE_DOUBLE:onValue(parser.getCurrentDouble());break;case JsonEvent.VALUE_TRUE:onValue(true);break;case JsonEvent.VALUE_FALSE:onValue(false);break;case JsonEvent.VALUE_NULL:onValueNull();break;case JsonEvent.EOF:break;default :throw new IllegalArgumentException("Unknown event: " + event);}}  }
class C{  public int pageCount(){  int r=values / pageSize;  int m=values % pageSize;  return m == 0 ? r : (r + 1);}  }
class C{  public ChangeSet increment(String path,float delta){  return add(new IncrementSpaceEntryMutator(path,delta));}  }
class C{  public BlockVector(float x,float y,float z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  private int peek() throws CompileException, IOException {  if (this.nextChar != -1)   return this.nextChar;  try {    return (this.nextChar=this.internalRead());  } catch (  UnicodeUnescapeException ex) {    throw new CompileException(ex.getMessage(),this.location(),ex);  }}  }
class C{  private void writeAttackerIO(Document document,Element rootElement){  Element attackerIO=document.createElement("attackerio");  rootElement.appendChild(attackerIO);  Element sources=document.createElement("sources");  attackerIO.appendChild(sources);  for (  SourceSinkSpec spec : this.document.getAttackerIO().getSources()) {    Element source=document.createElement("source");    sources.appendChild(source);    writeSourceSinkSpec(spec,document,source);  }  Element sinks=document.createElement("sinks");  attackerIO.appendChild(sinks);  for (  SourceSinkSpec spec : this.document.getAttackerIO().getSinks()) {    Element sink=document.createElement("sink");    sinks.appendChild(sink);    writeSourceSinkSpec(spec,document,sink);  }}  }
class C{  public synchronized static JSpaceAttributes convertXML(InputStream is,boolean isConvertToSystemProperty,Properties customProps) throws SAXException, ParserConfigurationException, IOException {  Document doc=XmlUtils.getDocumentBuilder().parse(is);  Element root=doc.getDocumentElement();  JSpaceAttributes prop=new JSpaceAttributes();  convertXMLtoProperty(root,prop,isConvertToSystemProperty);  convertCustomContainerPropsToJProperties(customProps,prop);  return prop;}  }
class C{  @Override public void onPaint(ViewTransform transform,Graphics2D g){  int x=transform.getSwingX(mAnchor.getDrawX());  int y=transform.getSwingY(mAnchor.getDrawY());  double progress=getProgress();  int alpha=getPulsatingAlpha(progress);  int radius=getRadius(progress);  if (mBackgroundColor != null) {    g.setColor(mBackgroundColor);    Ellipse2D.Float circle=new Ellipse2D.Float(x - radius,y - radius,radius * 2,radius * 2);    g.fill(circle);  }  Color highlight=new Color(mColor.getRed(),mColor.getGreen(),mColor.getBlue(),alpha);  g.setColor(highlight);  Ellipse2D.Float circle=new Ellipse2D.Float(x - radius,y - radius,radius * 2,radius * 2);  g.setStroke(mStroke);  g.fill(circle);  g.draw(circle);}  }
class C{  @deprecated public static final <T>boolean equals(T a,T b){  return b == null ? false : a == null ? false : b == null ? true : a.equals(b);}  }
class C{  public ReportingRule(Injector injector){  this.injector=injector;}  }
class C{  private Map<DimensionColumn,DimensionRow> extractDimensionValues(JsonNode dimensionRowsNode,Set<DimensionColumn> dimensionColumns){  return dimensionColumns.stream().collect(Collectors.toMap(Function.identity(),null));}  }
class C{  public static void main(String[] args){  Thread thread=new Thread(new WebBrowserConnection());  thread.start();}  }
class C{  public static synchronized DataSourceViewsManager sharedInstance(){  if (sharedInstance == null)   sharedInstance=new DataSourceViewsManager();  return sharedInstance;}  }
class C{  public static Drawable tintDrawable(@Nullable Drawable drawable,ColorStateList color){  if (drawable != null) {    drawable=DrawableCompat.unwrap(drawable);    Rect bounds=drawable.getBounds();    drawable=DrawableCompat.wrap(drawable);    if (bounds.right == 0 || bounds.bottom == 0) {      if (drawable.getIntrinsicHeight() != -1 && drawable.getIntrinsicWidth() != -1) {        bounds.right=drawable.getIntrinsicWidth();        bounds.bottom=drawable.getIntrinsicHeight();      } else {        Log.w(TAG,"Cannot tint drawable because its bounds cannot be determined!");        return DrawableCompat.unwrap(drawable);      }    }    DrawableCompat.setTintList(drawable,color);    drawable.setBounds(bounds);  }  return drawable;}  }
class C{  public TSDataOptimizerTask(@NonNull Path destDir,@NonNull Collection<TSData> files){  this(destDir);  files.forEach(null);}  }
class C{  private void handleEntryByIdAndOperateSA(Context context,ITemplateHolder template) throws TransactionException, TemplateDeletedException, SAException {  IEntryHolder eh=getEntryByIdAndOperateSA(context,template,false,false);  performReplIfChunkReached(context);}  }
class C{  public static void fireNotification(Context context,Task[] tasks){  if (tasks.length == 1) {    fireForSingleTask(context,tasks[0]);  } else {    fireForMultipleTasks(context,tasks);  }}  }
class C{  protected MarketEditQuery name(String value){  return unsafeParam("name",value);}  }
class C{  public void profileGeomBasicMetrics(boolean testSpark){  int n_legal_var=0, n_alloc_dot_fields=0;  int[] limits=new int[]{1,5,10,25,50,75,100};  evalRes.pts_size_bar_geom=new Histogram(limits);  if (testSpark) {    evalRes.total_spark_pts=0;    evalRes.max_pts_spark=0;    evalRes.pts_size_bar_spark=new Histogram(limits);  }  for (  SootMethod sm : ptsProvider.getAllReachableMethods()) {    if (!sm.isConcrete())     continue;    if (!sm.hasActiveBody()) {      sm.retrieveActiveBody();    }    evalRes.loc+=sm.getActiveBody().getUnits().size();  }  for (  IVarAbstraction pn : ptsProvider.pointers) {    if (!pn.hasPTResult())     continue;    pn=pn.getRepresentative();    Node var=pn.getWrappedNode();    if (ptsProvider.isExceptionPointer(var))     continue;    if (var instanceof AllocDotField) {      ++n_alloc_dot_fields;    }    ++n_legal_var;    int size;    if (testSpark) {      size=var.getP2Set().size();      evalRes.pts_size_bar_spark.addNumber(size);      evalRes.total_spark_pts+=size;      if (size > evalRes.max_pts_spark)       evalRes.max_pts_spark=size;    }    size=pn.num_of_diff_objs();    evalRes.pts_size_bar_geom.addNumber(size);    evalRes.total_geom_ins_pts+=size;    if (size > evalRes.max_pts_geom)     evalRes.max_pts_geom=size;  }  evalRes.avg_geom_ins_pts=(double)evalRes.total_geom_ins_pts / n_legal_var;  if (testSpark)   evalRes.avg_spark_pts=(double)evalRes.total_spark_pts / n_legal_var;  outputer.println("");  outputer.println("----------Statistical Result of geomPTA <Data Format: geomPTA (SPARK)>----------");  outputer.printf("Lines of code (jimple): %.1fK\n",(double)evalRes.loc / 1000);  outputer.printf("Reachable Methods: %d (%d)\n",ptsProvider.getNumberOfMethods(),ptsProvider.getNumberOfSparkMethods());  outputer.printf("Reachable User Methods: %d (%d)\n",ptsProvider.n_reach_user_methods,ptsProvider.n_reach_spark_user_methods);  outputer.println("#All Pointers: " + ptsProvider.getNumberOfPointers());  outputer.println("#Core Pointers: " + n_legal_var + ", in which #AllocDot Fields: "+ n_alloc_dot_fields);  outputer.printf("Total/Average Projected Points-to Tuples [core pointers]: %d (%d) / %.3f (%.3f) \n",evalRes.total_geom_ins_pts,evalRes.total_spark_pts,evalRes.avg_geom_ins_pts,evalRes.avg_spark_pts);  outputer.println("The largest points-to set size [core pointers]: " + evalRes.max_pts_geom + " ("+ evalRes.max_pts_spark+ ")");  outputer.println();  evalRes.pts_size_bar_geom.printResult(outputer,"Points-to Set Sizes Distribution [core pointers]:",evalRes.pts_size_bar_spark);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzFinalHighSurrogate=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  @Override public double[] nextVector(){  for (int i=0; i < normalized.length; ++i) {    normalized[i]=generator.nextNormalizedDouble();  }  double[] correlated=new double[mean.length];  for (int i=0; i < correlated.length; ++i) {    correlated[i]=mean[i];    for (int j=0; j < root.getColumnDimension(); ++j) {      correlated[i]+=root.getEntry(i,j) * normalized[j];    }  }  return correlated;}  }
class C{  private static void storeDeletionTime(PlayerAccountData accData){  DAOManager.getDAO(PlayerDAO.class).updateDeletionTime(accData.getPlayerCommonData().getPlayerObjId(),accData.getDeletionDate());}  }
class C{  @Nullable @Override public NonCodeUsageSearchInfo findUsages(@NotNull PsiElement element,@NotNull PsiElement[] allElementsToDelete,@NotNull List<UsageInfo> result){  NonCodeUsageSearchInfo superResult=super.findUsages(element,allElementsToDelete,result);  Iterator<UsageInfo> iter=result.iterator();  while (iter.hasNext()) {    if (ignoreUsage(iter.next())) {      iter.remove();    }  }  return superResult;}  }
class C{  public static Crop of(Uri source,Uri destination){  return new Crop(source,destination);}  }
class C{  public Builder pointerEvents(String pointerEvents){  this.pointerEvents=pointerEvents;  return this;}  }
class C{  public final void propagate(){  new TopoSorter(pag,false).sort();  for (  Object object : pag.allocSources()) {    handleAllocNode((AllocNode)object);  }  boolean verbose=pag.getOpts().verbose();  do {    if (verbose) {      G.v().out.println("Worklist has " + varNodeWorkList.size() + " nodes.");    }    int iter=0;    while (!varNodeWorkList.isEmpty()) {      VarNode src=(VarNode)varNodeWorkList.iterator().next();      varNodeWorkList.remove(src);      handleVarNode(src);      if (verbose) {        iter++;        if (iter >= 1000) {          iter=0;          G.v().out.println("Worklist has " + varNodeWorkList.size() + " nodes.");        }      }    }    if (verbose) {      G.v().out.println("Now handling field references");    }    for (    Object object : pag.storeSources()) {      final VarNode src=(VarNode)object;      Node[] storeTargets=pag.storeLookup(src);      for (      Node element0 : storeTargets) {        final FieldRefNode fr=(FieldRefNode)element0;        fr.makeP2Set().addAll(src.getP2Set(),null);      }    }    for (    Object object : pag.loadSources()) {      final FieldRefNode src=(FieldRefNode)object;      if (src != src.getReplacement()) {        throw new RuntimeException("shouldn't happen");      }      Node[] targets=pag.loadLookup(src);      for (      Node element0 : targets) {        VarNode target=(VarNode)element0;        if (target.makeP2Set().addAll(src.getP2Set(),null)) {          varNodeWorkList.add(target);        }      }    }  } while (!varNodeWorkList.isEmpty());}  }
class C{  private void sort(VisualItem[] items,int[] scores,int size){  if (sort == null)   return;  if (items_buf == null || items_buf.length < size) {    items_buf=new VisualItem[items.length];    scores_buf=new int[scores.length];  }  ArrayLib.sort(scores,items,scores_buf,items_buf,0,size);}  }
class C{  public String namespace(){  return theType.namespace();}  }
class C{  @Override protected void complete(){  super.complete();  try {    if (_dirty || (_data.getAccessed() - _data.getLastSaved()) >= (_savePeriodMs)) {      _data.setLastSaved(System.currentTimeMillis());      willPassivate();      gigaSpace.write(_data,lease);      if (Log.getLog().isDebugEnabled())       Log.getLog().debug("Wrote session " + _data.toStringExtended());      didActivate();      if (Log.getLog().isDebugEnabled())       Log.getLog().debug("Dirty=" + _dirty + ", accessed-saved="+ _data.getAccessed()+ "-"+ _data.getLastSaved()+ ", savePeriodMs="+ _savePeriodMs);    }  } catch (  Exception e) {    Log.getLog().warn("Problem persisting changed session data id=" + getId(),e);  } finally {    _dirty=false;  }}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg,String path){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    if (path != null) {      String cdCommand=COMMAND_CD + SPACE + path;      os.write(cdCommand.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(COMMAND_LINE_END);        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        successMsg.append(COMMAND_LINE_END);        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  private boolean isInterestingApiLevel(int api,int manualApi){  if (manualApi > 0) {    return api == manualApi;  }  if (!myApiSensitiveTemplate) {    return api == SdkVersionInfo.HIGHEST_KNOWN_STABLE_API;  }  if (api == SdkVersionInfo.HIGHEST_KNOWN_STABLE_API) {    return true;  }switch (api) {case 1:case 7:case 11:case 14:case 21:    return true;case 9:case 13:case 8:case 3:  return !TEST_FEWER_API_VERSIONS;default :return false;}}  }
class C{  public QueryExpression(String group){  super(group);}  }
class C{  @Override public long blocksAccessed(){  return p.blocksAccessed();}  }
class C{  public MessagesGetChatQueryWithChatIdsFields(VkApiClient client,UserActor actor,List<Integer> chatIds,List<UserField> fields){  super(client,"messages.getChat",Utils.buildParametrizedType(List.class,ChatFull.class));  accessToken(actor.getAccessToken());  chatIds(chatIds);  fields(fields);}  }
class C{  private void initPresenter(){  this.categoryManagePresenter=new CategoryManageImplementor(categoryManageModel);  this.toolbarPresenter=new ToolbarImplementor();  this.popupManagePresenter=new CategoryFragmentPopupManageImplementor(this);}  }
class C{  @Override public void remove(String... identifiers){  whitelist.removeAll(Arrays.asList(identifiers));}  }
class C{  public TransformerConfigurationException(String msg,Throwable e){  super(msg,e);}  }
class C{  public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  public MathException(){  this.pattern=null;  this.arguments=new Object[0];}  }
class C{  public RequestHandle put(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public void saveConfig(){  urlComboBox.getCurrentText(true);  ProgramProperties.put("RemoteServers",urlComboBox.getItemsAsString(20,"%%%"));}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  public Resource find(String type,String id) throws ResourceNotFoundException {  if (index != null) {    final String key=indexName(type,id);    if (index.containsKey(key)) {      return index.get(key);    }  }  throw new ResourceNotFoundException(type,id);}  }
class C{  public boolean hasShapes(){  return sample2shape.size() > 0;}  }
class C{  public void removeCatchable(CatchablePokemon pokemon){  if (cachedCatchable.size() > 0) {    cachedCatchable.remove(pokemon);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Disease_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200432,skilltarget,skillname);}  }
class C{  private void registerTaskInstances(){  for (  TaskFromDBTrigger trigger : tasksList) {    if (trigger.isValid()) {      trigger.initTrigger();    } else {      log.error("Invalid task from db with ID: " + trigger.getTaskId());    }  }}  }
class C{  private Node<K,V> findNode(Comparable<? super K> key){  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c == 0)       return n;      if (c < 0)       return null;      b=n;      n=f;    }  }}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  @AndroidCoordinate public int width(){  return left + right;}  }
class C{  private float calcAngle(float value){  return calcAngle(value,mData.getYValueSum());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public RawInterfaceDecl fullCopy(){  RawInterfaceDecl tree=(RawInterfaceDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 2:case 3:case 4:        tree.children[i]=new List();      continue;  }  ASTNode child=(ASTNode)children[i];  if (child != null) {    child=child.fullCopy();    tree.setChild(child,i);  }}}return tree;}  }
class C{  public boolean method_context_counts(){  return soot.PhaseOptions.getBoolean(options,"method-context-counts");}  }
class C{  private void start(final AliveTimer aliveTimer){  if (!aliveTimer.isActive()) {    if (LOGGER.isDebugEnabled()) {      StringBuffer str=new StringBuffer("start() : starting alive for ");      str.append(AliveTimer.ALIVE_TYPE_PROCESS + " ");      str.append(aliveTimer.getRelatedName());      str.append(".");      LOGGER.debug(str.toString());    }    aliveTimer.setActive(true);    aliveTimer.setLastUpdate(System.currentTimeMillis());  }}  }
class C{  public boolean checkPresenceWithNoTimeout(By locator){  WebDriver webDriver=webDriverProvider.get();  webDriver.manage().timeouts().implicitlyWait(IMPLICITLY_WAIT_TIME,TimeUnit.MILLISECONDS);  try {    return !webDriver.findElements(locator).isEmpty();  }  finally {    webDriver.manage().timeouts().implicitlyWait(defaultTimeout,TimeUnit.SECONDS);  }}  }
class C{  public static void addServices(List<ProviderConfig<?>> providerConfigList) throws RpcException {  if (logger.isInfoEnabled()) {    logger.info("add services:" + providerConfigList);  }  if (providerConfigList != null && !providerConfigList.isEmpty()) {    try {      for (      ProviderConfig<?> providerConfig : providerConfigList) {        if (StringUtils.isBlank(providerConfig.getUrl())) {          providerConfig.setUrl(getServiceUrl(providerConfig));        }        ServicePublisher.addService(providerConfig);        ServerConfig serverConfig=ProviderBootStrap.startup(providerConfig);        providerConfig.setServerConfig(serverConfig);        ServicePublisher.publishService(providerConfig,false);      }    } catch (    RegistryException t) {      throw new RpcException("error while adding services:" + providerConfigList,t);    }catch (    Throwable t) {      throw new RpcException("error while adding services:" + providerConfigList,t);    }  }}  }
class C{  public static void closeQuietly(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    RuntimeException rethrown) {      throw rethrown;    }catch (    Exception ignored) {    }  }}  }
class C{  private void encodeStyle(){  if (styleWrapper.getWorkspace() == null || (defaultWorkspaceName == null) || (styleWrapper.getWorkspace().compareTo(defaultWorkspaceName) == 0)) {    styleString=styleWrapper.getStyle();  } else {    styleString=String.format("%s%s%s",styleWrapper.getWorkspace(),SEPARATOR,styleWrapper.getStyle());  }}  }
class C{  public Zhqrd(Zmat A) throws JampackException {  A.getProperties();  nrow=A.nr;  ncol=A.nc;  ntran=Math.min(A.nr,A.nc);  U=new Z1[ntran];  R=new Zutmat(A);  for (int k=A.bx; k < A.bx + ntran; k++) {    U[k - A.bx]=House.genc(R,k,A.rx,k);    House.ua(U[k - A.bx],R,k,A.rx,k + 1,A.cx);  }  if (nrow > ncol) {    R=new Zutmat(R.get(R.bx,R.cx,R.bx,R.cx));  }}  }
class C{  public Point3D(Point3D point){  this(point.getX(),point.getY(),point.getZ());}  }
class C{  public boolean isNone(String selectedItem){  return (selectedItem.compareTo(NO_FILL_VALUE) == 0);}  }
class C{  public static ShoppingCartItem makeItem(Integer cartLocation,GenericValue product,BigDecimal selectedAmount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,Timestamp shipBeforeDate,Timestamp shipAfterDate,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,Boolean triggerExternalOpsBool,Boolean triggerPriceRulesBool,GenericValue parentProduct,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException {  return makeItem(cartLocation,product,selectedAmount,quantity,unitPrice,reservStart,reservLength,reservPersons,null,null,shipBeforeDate,shipAfterDate,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,itemType,itemGroup,dispatcher,cart,triggerExternalOpsBool,triggerPriceRulesBool,parentProduct,skipInventoryChecks,skipProductChecks);}  }
class C{  public static void clearInitialContext(String jndiServerName){  contexts.remove(jndiServerName);}  }
class C{  int agg4way(NetNode x2,NetNode x,NetNode y,NetNode y2,Stack amalgs,double[][] D,NetNode netNodes,int num_nodes){  NetNode u;  u=agg3way(x2,x,y,amalgs,D,netNodes,num_nodes);  num_nodes+=2;  agg3way(u,u.nbr,y2,amalgs,D,netNodes,num_nodes);  num_nodes+=2;  return num_nodes;}  }
class C{  public final int hashCode(){  return (int)((bits0 >>> 32) ^ bits0 ^ (bits1 >>> 32)^ bits1);}  }
class C{  @Override public String toString(){  StringBuilder imageName=new StringBuilder();  if (host != null) {    imageName.append(host);    imageName.append(SECTION_SEPARATOR);  }  if (namespace != null) {    imageName.append(namespace);    imageName.append(SECTION_SEPARATOR);  }  imageName.append(repository);  if (tag != null) {    imageName.append(TAG_SEPARATOR);    imageName.append(tag);  }  return imageName.toString();}  }
class C{  private Movie startMovieRequest(String id) throws InternetConnectionException {  if (isThereInternetConnection(mContext)) {    try {      return mWebServicesApiCallsImpl.getMovieDetail(id);    } catch (    RetrofitError e) {      throw new InternetConnectionException(e.getMessage());    }  } else {    throw new InternetConnectionException(mContext.getString(R.string.internet_connection_error));  }}  }
class C{  public MalformedByteSequenceException(MessageFormatter formatter,Locale locale,String domain,String key,Object[] arguments){  fFormatter=formatter;  fLocale=locale;  fDomain=domain;  fKey=key;  fArguments=arguments;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  protected Decision suggestCategory(DocumentNGramGraph dDoc){  HashMap hResults=new HashMap();  Iterator iIter=Arrays.asList(getAvailableCategories()).iterator();  int iCnt=0;  String sSelectedCategory=null;  double dMaxSimilarity=-1.0;  Distribution<String> dEvidence=new Distribution<String>();  while (iIter.hasNext()) {    NamedDocumentNGramGraph ic=(NamedDocumentNGramGraph)Repository.loadObject((String)iIter.next(),INSECTDB.CATEGORY_TYPE);    if (ic != null) {      NamedDocumentNGramGraph stdTemp=new NamedDocumentNGramGraph();      stdTemp.setDataString(filterDataString(dDoc.getDataString(),ic));      double dCurSimilarity=finalSimilarityToCategory(stdTemp,ic);      hResults.put(ic.getName(),dCurSimilarity);      if (dCurSimilarity > dMaxSimilarity) {        sSelectedCategory=ic.getName();        dMaxSimilarity=dCurSimilarity;      }      dEvidence.setValue(ic.getName(),dCurSimilarity);    }  }  double dEntropy=statisticalCalculation.entropy(dEvidence.getProbabilityDistribution());  return new Decision(dDoc,sSelectedCategory,dEntropy == 0 ? 1.0 : Math.min(1.0,1.0 / (Math.pow(2,dEntropy))),hResults);}  }
class C{  public JPanel createSymbolSelectionPanel(){  return null;}  }
class C{  static Intent createPostRequestIntent(Context context){  Intent intent=new Intent(context,OmahaClient.class);  intent.setAction(ACTION_POST_REQUEST);  return intent;}  }
class C{  public Vector3f cross(Vector3f v){  return cross(v,null);}  }
class C{  public void dispose(){  myFileStructure.dispose();}  }
class C{  public static void distributeKinah(Player player,long kinah){  PlayerGroup group=player.getPlayerGroup2();  if (group != null) {    group.onEvent(new TeamKinahDistributionEvent<PlayerGroup>(group,player,kinah));  }}  }
class C{  public void rebuild(boolean hasPhiNodes){  isExtendedSSA=options.extended();  sbb.transform();  setSSA(true);}  }
class C{  private static void render(Grid grid,Map<?,?> params,Writer writer,String template){  final VelocityContext context=new VelocityContext();  context.put(KEY_GRID,grid);  context.put(KEY_ENCODER,ENCODER);  context.put(KEY_PARAMS,params);  new VelocityManager().getEngine().getTemplate(template).merge(context,writer);}  }
class C{  private void initPresenter(){  this.photosPresenter=new PhotosImplementor(photosModel,this);  this.loadPresenter=new LoadImplementor(loadModel,this);  this.scrollPresenter=new ScrollImplementor(scrollModel,this);  this.swipeBackPresenter=new SwipeBackImplementor(this);}  }
class C{  @Override public void backgroundColourUpdate(Color backgroundColour){  this.backgroundColour=backgroundColour;}  }
class C{  public void onAddIndex(AddIndexData addIndexData){}  }
class C{  public void rectValueToPixelHorizontal(RectF r){  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public static String MD5(String originStr){  char hexDigits[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};  try {    byte[] btInput=originStr.getBytes();    MessageDigest mdInst=MessageDigest.getInstance("MD5");    mdInst.update(btInput);    byte[] md=mdInst.digest();    int j=md.length;    char str[]=new char[j * 2];    int k=0;    for (int i=0; i < j; i++) {      byte byte0=md[i];      str[k++]=hexDigits[byte0 >>> 4 & 0xf];      str[k++]=hexDigits[byte0 & 0xf];    }    return new String(str).toLowerCase();  } catch (  Exception e) {    return null;  }}  }
class C{  public void teardown(){  logger.info("Tearing down...");  jssc.stop();  logger.info("Tear down complete");}  }
class C{  private List<String> decode(List<Tuple2<String,String>> sequence){  int n=sequence.size();  double[][] score=new double[tags.length][n];  for (int j=0; j < n; j++) {    LabeledContext context=contextExtractor.extract(sequence,j);    Tuple2<double[],String> tuple=probability(context);    double[] prob=tuple._1();    for (int i=0; i < prob.length; i++) {      score[i][j]=prob[i];    }    sequence.set(j,new Tuple2<String,String>(sequence.get(j)._1(),tuple._2()));  }  ViterbiDecoder decoder=new ViterbiDecoder(score);  int[] path=decoder.bestPath();  List<String> partsOfSpeech=new LinkedList<String>();  for (  int k : path) {    partsOfSpeech.add(tags[k]);  }  return partsOfSpeech;}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  @Override public void process(SpaceContext context,ISpaceFilterEntry[] subject,int operationCode) throws RuntimeException {}  }
class C{  final public void response(int state,String message){  JSON jo=JSON.create();  jo.put(X.STATE,HttpServletResponse.SC_OK);  jo.put(X.MESSAGE,message);  this.response(jo);}  }
class C{  public EntropyChunker(){  sgOverallGraph=new SymbolicGraph(1,1);  clLocator=new EdgeCachedLocator(100);  smDelims=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200368,skillname);}  }
class C{  public static int readSwappedUnsignedShort(InputStream input) throws IOException {  int value1=read(input);  int value2=read(input);  return (((value1 & 0xff) << 0) + ((value2 & 0xff) << 8));}  }
class C{  @NonNull public static <W>Optional<W> with(W value){  return (value == null) ? new None<W>() : new Some<>(value);}  }
class C{  public void select() throws RemoteException {  try {    if (_spaceMode == SpaceMode.NONE) {      _electManager.elect();    } else {      _electManager.reelect();    }  } catch (  ActiveElectionException e) {    throw new RemoteException(_spaceMember + " failed to elect Primary space",e);  }catch (  InterruptedException ex) {  }}  }
class C{  @SuppressWarnings("unchecked") public void updateAutoBootstrap(String yamlFile,boolean autobootstrap) throws IOException {  DumperOptions options=new DumperOptions();  options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);  Yaml yaml=new Yaml(options);  @SuppressWarnings("rawtypes") Map map=(Map)yaml.load(new FileInputStream(yamlFile));  map.put("auto_bootstrap",autobootstrap);  logger.info("Updating yaml" + yaml.dump(map));  yaml.dump(map,new FileWriter(yamlFile));}  }
class C{  boolean isMarker(){  return value == this;}  }
class C{  public static ToolbarTapTarget forToolbarMenuItem(android.widget.Toolbar toolbar,@IdRes int menuItemId,CharSequence title){  return forToolbarMenuItem(toolbar,menuItemId,title,null);}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public static Map<String,Object> watchEntity(DispatchContext dctx,Map<String,? extends Object> context){  GenericValue newValue=(GenericValue)context.get("newValue");  String fieldName=(String)context.get("fieldName");  if (newValue == null) {    return ServiceUtil.returnSuccess();  }  GenericValue currentValue=null;  try {    currentValue=dctx.getDelegator().findOne(newValue.getEntityName(),newValue.getPrimaryKey(),false);  } catch (  GenericEntityException e) {    String errMsg="Error finding currentValue for primary key [" + newValue.getPrimaryKey() + "]: "+ e.toString();    Debug.logError(e,errMsg,module);  }  if (currentValue != null) {    if (UtilValidate.isNotEmpty(fieldName)) {      Object currentFieldValue=currentValue.get(fieldName);      Object newFieldValue=newValue.get(fieldName);      boolean changed=false;      if (currentFieldValue != null) {        if (!currentFieldValue.equals(newFieldValue)) {          changed=true;        }      } else {        if (newFieldValue != null) {          changed=true;        }      }      if (changed) {        String errMsg="Watching entity [" + currentValue.getEntityName() + "] field ["+ fieldName+ "] value changed from ["+ currentFieldValue+ "] to ["+ newFieldValue+ "] for pk ["+ newValue.getPrimaryKey()+ "]";        Debug.logInfo(new Exception(errMsg),errMsg,module);      }    } else {      if (!currentValue.equals(newValue)) {        String errMsg="Watching entity [" + currentValue.getEntityName() + "] values changed from ["+ currentValue+ "] to ["+ newValue+ "] for pk ["+ newValue.getPrimaryKey()+ "]";        Debug.logInfo(new Exception(errMsg),errMsg,module);      }    }  } else {    if (UtilValidate.isNotEmpty(fieldName)) {      Object newFieldValue=newValue.get(fieldName);      String errMsg="Watching entity [" + newValue.getEntityName() + "] field ["+ fieldName+ "] value changed from [null] to ["+ newFieldValue+ "] for pk ["+ newValue.getPrimaryKey()+ "]";      Debug.logInfo(new Exception(errMsg),errMsg,module);    } else {      String errMsg="Watching entity [" + newValue.getEntityName() + "] values changed from [null] to ["+ newValue+ "] for pk ["+ newValue.getPrimaryKey()+ "]";      Debug.logInfo(new Exception(errMsg),errMsg,module);    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public static <T extends Bean>T load(Bson query,T t){  String collection=getCollection(t.getClass());  if (collection != null) {    try {      return load(query,null,t);    } catch (    Exception e) {      if (log.isErrorEnabled())       log.error(e.getMessage(),e);    }  }  return null;}  }
class C{  public void removeAllStreamsFromOwner(SocketAddress addr){  logger.info("Remove streams mapping for host {}",addr);  Set<String> streamsForHost=address2Streams.get(addr);  if (null != streamsForHost) {synchronized (streamsForHost) {      for (      String s : streamsForHost) {        if (stream2Addresses.remove(s,addr)) {          logger.info("Removing mapping for stream : {} from host : {}",s,addr);          ownershipStatsLogger.onRemove(s);        }      }      address2Streams.remove(addr,streamsForHost);    }  }}  }
class C{  public void delFriend(int friendOid){  Iterator<Friend> it=iterator();  while (it.hasNext()) {    if (it.next().getOid() == friendOid) {      it.remove();    }  }}  }
class C{  public static void noSpace(String string) throws JSONException {  int i, length=string.length();  if (length == 0) {    throw new JSONException("Empty string.");  }  for (i=0; i < length; i+=1) {    if (Character.isWhitespace(string.charAt(i))) {      throw new JSONException("'" + string + "' contains a space character.");    }  }}  }
class C{  @Override public int compareTo(Distributable other){  int compareResult=0;  double seg1=Double.parseDouble(segmentId);  double seg2=Double.parseDouble(((TableBlockInfo)other).segmentId);  if (seg1 - seg2 < 0) {    return -1;  }  if (seg1 - seg2 > 0) {    return 1;  }  if (CarbonTablePath.isCarbonDataFile(filePath)) {    int firstTaskId=Integer.parseInt(DataFileUtil.getTaskNo(filePath));    int otherTaskId=Integer.parseInt(DataFileUtil.getTaskNo(((TableBlockInfo)other).filePath));    if (firstTaskId != otherTaskId) {      return firstTaskId - otherTaskId;    }    int firstPartNo=Integer.parseInt(DataFileUtil.getPartNo(filePath));    int SecondPartNo=Integer.parseInt(DataFileUtil.getPartNo(((TableBlockInfo)other).filePath));    compareResult=firstPartNo - SecondPartNo;  } else {    compareResult=filePath.compareTo(((TableBlockInfo)other).getFilePath());  }  if (compareResult != 0) {    return compareResult;  }  if (blockOffset + blockLength < ((TableBlockInfo)other).blockOffset + ((TableBlockInfo)other).blockLength) {    return -1;  } else   if (blockOffset + blockLength > ((TableBlockInfo)other).blockOffset + ((TableBlockInfo)other).blockLength) {    return 1;  }  int diffStartBlockLetNumber=blockletInfos.getStartBlockletNumber() - ((TableBlockInfo)other).blockletInfos.getStartBlockletNumber();  if (diffStartBlockLetNumber < 0) {    return -1;  }  if (diffStartBlockLetNumber > 0) {    return 1;  }  return 0;}  }
class C{  public void filter(QuestionsFilter questionFilter){  this.filter=questionFilter;  Comparator<Question> sorter;  if (questionFilter.isFilterDupes()) {    sorter=new PossibleDuplicateComparator();  } else {    if (questionFilter.isScoreOrder()) {      sorter=new CVScoreComparator();    } else {      sorter=new CloseVoteComparator();    }  }  filter(questionFilter,sorter);}  }
class C{  public boolean isValueOnly(){  return valueOnly;}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  @Override protected void reset() throws XNIException {  if (fValidationManager != null)   fValidationManager.reset();  configurePipeline();  super.reset();}  }
class C{  public void post(Runnable runnable){synchronized (mQueue) {    mQueue.add(runnable);    if (mQueue.size() == 1) {      scheduleNextLocked();    }  }}  }
class C{  public SimpleMqttMessageWrapper(final SimpleMqttMessage message){  this.message=message;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_LEAVED_PARTY_OFFLINE_TIMEOUT(String value0){  return new SM_SYSTEM_MESSAGE(1300203,value0);}  }
class C{  protected StorageSetQuery key(String value){  return unsafeParam("key",value);}  }
class C{  public DividerItemDecoration(Context context,int resId){  mDivider=ContextCompat.getDrawable(context,resId);}  }
class C{  public DictionaryCache(int windowSizeArg,int minRepetitions){  this.windowSize=windowSizeArg;  this.minRepetitions=minRepetitions;  init();}  }
class C{  @CallSuper @Override public void onViewDetachedFromWindow(){  if (unbinder != null) {    unbinder.unbind();    unbinder=null;  }}  }
class C{  public static List<LoggedMqttMessage> parseMessageLog(final List<String> messages,final ProgressUpdater progress,final long current,final long max) throws SpyException {  try {    final long startTime=TimeUtils.getMonotonicTime();    final int items=messages.size();    final long chunkSize=items / 10;    final MqttMessageLogParser parser=new MqttMessageLogParser();    final List<LoggedMqttMessage> list=new ArrayList<LoggedMqttMessage>();    long item=0;    long reportAt=1;    for (int i=0; i < items; i++) {      final String message=messages.get(i);      if (progress != null) {        if (progress.isCancelled()) {          logger.info("Task cancelled!");          return null;        }        item++;        if (item % 1000 == 0) {          progress.update(current + item,max);        }      }      if ((i > 0) && (i == (chunkSize * reportAt))) {        final long currentTime=TimeUtils.getMonotonicTime();        final long timeTaken=currentTime - startTime;        final long totalTimeExpected=timeTaken * items / i;        if (timeTaken > 1000) {          logger.info("Processed {}%, estimated time left = {}s",reportAt * 10,(totalTimeExpected - timeTaken) / 1000);        }        reportAt++;      }      try {        list.add(parser.parse(message));      } catch (      XMLException e) {        logger.error("Can't process message " + message,e);      }    }    logger.info("Message audit log - parsed {} XML messages",list.size());    return list;  } catch (  XMLException e) {    throw new SpyException("Can't parse the message audit log file",e);  }}  }
class C{  public static URL[] toURLs(File[] files) throws IOException {  URL[] urls=new URL[files.length];  for (int i=0; i < urls.length; i++) {    urls[i]=files[i].toURI().toURL();  }  return urls;}  }
class C{  public static <V>int distinctList(List<V> sourceList){  if (isEmpty(sourceList)) {    return 0;  }  int sourceCount=sourceList.size();  int sourceListSize=sourceList.size();  for (int i=0; i < sourceListSize; i++) {    for (int j=(i + 1); j < sourceListSize; j++) {      if (sourceList.get(i).equals(sourceList.get(j))) {        sourceList.remove(j);        sourceListSize=sourceList.size();        j--;      }    }  }  return sourceCount - sourceList.size();}  }
class C{  public WallGetQueryWithExtended fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public boolean has(Access a){  List<String> list=getAccesses();  return list == null ? false : list.contains(a.getName());}  }
class C{  public void init$Children(){  children=new ASTNode[2];  setChild(new List(),1);}  }
class C{  public void revert(boolean recurse) throws SVNException {  ISVNClientAdapter svnClient=null;  try {    try {      Util.saveLocalHistory(resource);    } catch (    CoreException e) {      SVNProviderPlugin.log(IStatus.ERROR,e.getMessage(),e);    }    svnClient=getRepository().getSVNClient();    OperationManager.getInstance().beginOperation(svnClient);    svnClient.revert(getFile(),recurse);  } catch (  SVNClientException e) {    throw SVNException.wrapException(e);  } finally {    getRepository().returnSVNClient(svnClient);    Set<IResource> refreshList=new HashSet<IResource>();    refreshList.add(getResource());    OperationManager.getInstance().endOperation(true,refreshList);  }}  }
class C{  @Override public void showMessage(String message){  Snackbar.make(root,message,Snackbar.LENGTH_SHORT).show();}  }
class C{  public DirectSpaceFactoryBean(IJSpace space){  this.space=space;}  }
class C{  public void reloadData(){  loadData();}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  public GroupsAddLinkQuery text(String value){  return unsafeParam("text",value);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("show replaceToolbar=");  boolean show=np.getBoolean();  np.matchIgnoreCase(";");  final SamplesViewer samplesViewer=(SamplesViewer)getViewer();  samplesViewer.setShowReplaceToolBar(show);}  }
class C{  static void initField(){  for (int y=0; y < field_size; y++) {    for (int x=0; x < field_size; x++) {      field[x][y]=dotEmpty;    }  }}  }
class C{  public JSONWriter(Writer w){  this.comma=false;  this.mode='i';  this.stack=new JSONObject[maxdepth];  this.top=0;  this.writer=w;}  }
class C{  public void loadProcessConnection(){  ProcessConnectionResponse processConnectionResponse=processConfigurationLoader.getProcessConnection();  if (processConnectionResponse.getProcessPIK() == null || processConnectionResponse.getProcessPIK() <= ProcessConnectionResponse.PIK_REJECTED) {    throw new RuntimeException("PIK_REJECTED received");  }  ProcessConfiguration processConfiguration=new ProcessConfiguration();  processConfiguration.setProcessName(processConnectionResponse.getProcessName());  processConfiguration.setprocessPIK(processConnectionResponse.getProcessPIK());  ProcessConfigurationHolder.setInstance(processConfiguration);}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  private JsonObject internal_createRenderer(IFeatureRenderer renderer){  EsriRendererInterface rendererConverter=data.getRenderer(renderer.getClass());  JsonObject jsonRenderer=null;  if (rendererConverter != null) {    jsonRenderer=rendererConverter.convert(renderer);  } else {    System.err.println("Unsupported renderer : " + renderer.getClass().getName());  }  return jsonRenderer;}  }
class C{  public void registerSuccess(String url){  mDelayMs=MIN_DELAY;  mLastRequestMs=-1;  int bonus=1;  if (TextUtils.equals(mUrl,url)) {    bonus=2;    mUrl=null;  }  mScore=Math.min(MAX_SCORE,mScore + bonus);  SharedPreferences.Editor editor=mSharedPreferences.edit();  updateBan(editor);  editor.apply();}  }
class C{  public static Throwable zkException(Throwable throwable,String path){  if (throwable instanceof KeeperException) {    return throwable;  } else   if (throwable instanceof ZooKeeperClient.ZooKeeperConnectionException) {    return KeeperException.create(KeeperException.Code.CONNECTIONLOSS,path);  } else   if (throwable instanceof InterruptedException) {    return new DLInterruptedException("Interrupted on operating " + path,throwable);  } else {    return new UnexpectedException("Encountered unexpected exception on operatiing " + path,throwable);  }}  }
class C{  protected LeadsMetricHitQuery data(String value){  return unsafeParam("data",value);}  }
class C{  public VideoReorderVideosQuery beforeVideoId(Integer value){  return unsafeParam("before_video_id",value);}  }
class C{  public static Map<String,String> strToMap(String str,String delim,boolean trim,String pairsSeparator){  if (str == null)   return null;  Map<String,String> decodedMap=new HashMap<String,String>();  List<String> elements=split(str,delim);  pairsSeparator=pairsSeparator == null ? "=" : pairsSeparator;  for (  String s : elements) {    List<String> e=split(s,pairsSeparator);    if (e.size() != 2) {      continue;    }    String name=e.get(0);    String value=e.get(1);    if (trim) {      if (name != null) {        name=name.trim();      }      if (value != null) {        value=value.trim();      }    }    try {      decodedMap.put(URLDecoder.decode(name,"UTF-8"),URLDecoder.decode(value,"UTF-8"));    } catch (    UnsupportedEncodingException e1) {      Debug.logError(e1,module);    }  }  return decodedMap;}  }
class C{  public void addDirector(Director dir){  dirs.add(dir);}  }
class C{  protected String readAnnotation() throws IOException, ClassNotFoundException {  return (locIn == null ? null : (String)locIn.readObject());}  }
class C{  public static String nullSafeToString(Object[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(String.valueOf(array[i]));  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  boolean[] extractBits(BitMatrix matrix){  boolean compact=ddata.isCompact();  int layers=ddata.getNbLayers();  int baseMatrixSize=(compact ? 11 : 14) + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  boolean[] rawbits=new boolean[totalBitsInLayer(layers,compact)];  if (compact) {    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    int matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=(layers - i) * 4 + (compact ? 9 : 12);    int low=i * 2;    int high=baseMatrixSize - 1 - low;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        rawbits[rowOffset + columnOffset + k]=matrix.get(alignmentMap[low + k],alignmentMap[low + j]);        rawbits[rowOffset + 2 * rowSize + columnOffset + k]=matrix.get(alignmentMap[low + j],alignmentMap[high - k]);        rawbits[rowOffset + 4 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - k],alignmentMap[high - j]);        rawbits[rowOffset + 6 * rowSize + columnOffset + k]=matrix.get(alignmentMap[high - j],alignmentMap[low + k]);      }    }    rowOffset+=rowSize * 8;  }  return rawbits;}  }
class C{  public static String delimiterConverter(String delimiter){switch (delimiter) {case "|":case "*":case ".":case ":":case "^":case "\\":case "$":case "+":case "?":case "(":case ")":case "{":case "}":case "[":case "]":    return "\\" + delimiter;default :  return delimiter;}}  }
class C{  protected AbstractFormat(){  this(getDefaultNumberFormat());}  }
class C{  @Override public void close(){}  }
class C{  public Zmat(Z A[][]){  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  nrow=A.length;  ncol=A[0].length;  getProperties();  re=new double[nr][nc];  im=new double[nr][nc];  for (int i=0; i < nr; i++)   for (int j=0; j < nc; j++) {    re[i][j]=A[i][j].re;    im[i][j]=A[i][j].im;  }}  }
class C{  public boolean removeEntry(Entry e,int dataSetIndex){  if (e == null || dataSetIndex >= mDataSets.size())   return false;  IDataSet set=mDataSets.get(dataSetIndex);  if (set != null) {    boolean removed=set.removeEntry(e);    if (removed) {      calcMinMax();    }    return removed;  }  return false;}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  public PhotosMakeCoverQuery(VkApiClient client,UserActor actor,int photoId){  super(client,"photos.makeCover",OkResponse.class);  accessToken(actor.getAccessToken());  photoId(photoId);}  }
class C{  public RegexFileFilter(String pattern,IOCase caseSensitivity){  if (pattern == null) {    throw new IllegalArgumentException("Pattern is missing");  }  int flags=0;  if (caseSensitivity != null && !caseSensitivity.isCaseSensitive()) {    flags=Pattern.CASE_INSENSITIVE;  }  this.pattern=Pattern.compile(pattern,flags);}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  static String winaltNotation(int value){  String result;  result=Integer.toString(value);  if (result.length() < 4) {    result="0000".substring(result.length()) + result;  }  result="Alt+" + result;  return (result);}  }
class C{  public void populate(ColorMap value){  ValueComboBoxData selectedValue=typeComboBox.getSelectedValue();  if (selectedValue != null) {    ColourRampPanelInterface selectedPanel=this.colourRampMapCache.get(selectedValue.getKey());    if (selectedPanel != null) {      selectedPanel.populate(value);    }  }}  }
class C{  @Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {  fValidationState.setNamespaceSupport(namespaceContext);  fState4XsiType.setNamespaceSupport(namespaceContext);  fState4ApplyDefault.setNamespaceSupport(namespaceContext);  fLocator=locator;  handleStartDocument(locator,encoding);  if (fDocumentHandler != null) {    fDocumentHandler.startDocument(locator,encoding,namespaceContext,augs);  }}  }
class C{  public float[] unCompress(byte[] compInput){  try {    return Snappy.uncompressFloatArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  public int removeUpload(OCUpload upload){  int result=getDB().delete(ProviderTableMeta.CONTENT_URI_UPLOADS,ProviderTableMeta._ID + "=?",new String[]{Long.toString(upload.getUploadId())});  Log_OC.d(TAG,"delete returns " + result + " for upload "+ upload);  if (result > 0) {    notifyObserversNow();  }  return result;}  }
class C{  public T[] value(T x) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(x);  if (abscissae.isEmpty()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EMPTY_INTERPOLATION_SAMPLE);  }  final T[] value=MathArrays.buildArray(x.getField(),topDiagonal.get(0).length);  T valueCoeff=x.getField().getOne();  for (int i=0; i < topDiagonal.size(); ++i) {    T[] dividedDifference=topDiagonal.get(i);    for (int k=0; k < value.length; ++k) {      value[k]=value[k].add(dividedDifference[k].multiply(valueCoeff));    }    final T deltaX=x.subtract(abscissae.get(i));    valueCoeff=valueCoeff.multiply(deltaX);  }  return value;}  }
class C{  private void showProgress(boolean isVisible){  this.progressBar.clearAnimation();  this.progressBar.setVisibility(isVisible ? View.VISIBLE : View.GONE);  this.getActivity().setProgressBarIndeterminateVisibility(isVisible);}  }
class C{  public TrustManagerBuilder and(){  if (!mgr.isMatchAll()) {    if (mgr.size() < 2) {      mgr.setMatchAll(true);    } else {      mgr=CompositeTrustManager.matchAll(mgr);    }  }  return (this);}  }
class C{  private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public static boolean doesTableHaveColumn(String tableName,String columnName){switch (tableName) {case CaughtPokemonEntry.TABLE_NAME:    return CaughtPokemonEntry.hasColumn(columnName);case FavoritePokemonEntry.TABLE_NAME:  return FavoritePokemonEntry.hasColumn(columnName);default :return false;}}  }
class C{  public synchronized void readLock(){  while (activeWriter || waitingWriters != 0) {    try {      wait();    } catch (    InterruptedException e) {      throw new ConcurrentLockException("read lock interrupted in thread");    }  }  activeReaders++;}  }
class C{  public JsonSlurper(JsonSortStrategy sortStrategy){  this(sortStrategy,new ToStringComparator<>());}  }
class C{  public static boolean findQuery(byte[] queryName,int queryNameLength,FileIterator it,boolean isFastA){  try {    if (isFastA) {      while (it.hasNext()) {        byte[] line=it.next();        if (line[0] == '>' && matchName(queryName,queryNameLength,line,it.getLineLength()))         return true;      }    } else {      if (it.getLinePosition() == 0) {        byte[] line=it.next();        if (line[0] != '@')         throw new IOException("Expected FastQ header line (starting with '@'), got: " + Basic.toString(line,it.getLineLength()));        if (matchName(queryName,queryNameLength,line,it.getLineLength()))         return true;        it.next();        it.next();        it.next();      }      while (it.hasNext()) {        byte[] line=it.next();        if (line[0] != '@')         throw new IOException("Expected FastQ header line (starting with '@'), got: " + Basic.toString(line,it.getLineLength()));        if (matchName(queryName,queryNameLength,line,it.getLineLength()))         return true;        it.next();        it.next();        it.next();      }    }  } catch (  Exception ex) {    Basic.caught(ex);  }  return false;}  }
class C{  protected void makeInitialSet(){  Collection<Local> locals=((UnitGraph)graph).getBody().getLocals();  List<Local> refLocals=new ArrayList<Local>();  for (Iterator<Local> lIt=locals.iterator(); lIt.hasNext(); ) {    final Local l=(Local)lIt.next();    if (l.getType() instanceof RefType) {      refLocals.add(l);    }  }  List<Type> types=new ArrayList<Type>();  for (Iterator<Unit> sIt=((UnitGraph)graph).getBody().getUnits().iterator(); sIt.hasNext(); ) {    final Stmt s=(Stmt)sIt.next();    if (s instanceof AssignStmt) {      AssignStmt as=(AssignStmt)s;      Value rhs=as.getRightOp();      if (rhs instanceof CastExpr) {        Type t=((CastExpr)rhs).getCastType();        if (t instanceof RefType && !types.contains(t)) {          types.add(t);        }      }    }  }  emptySet=new LocalTypeSet(refLocals,types);}  }
class C{  public static String cancelPayPalOrder(HttpServletRequest request,HttpServletResponse response){  Locale locale=UtilHttp.getLocale(request);  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  String orderId=(String)request.getSession().getAttribute("PAYPAL_ORDER");  boolean beganTransaction=false;  try {    beganTransaction=TransactionUtil.begin();  } catch (  GenericTransactionException gte) {    Debug.logError(gte,"Unable to begin transaction",module);  }  boolean okay=OrderChangeHelper.cancelOrder(dispatcher,userLogin,orderId);  if (okay) {    try {      TransactionUtil.commit(beganTransaction);    } catch (    GenericTransactionException gte) {      Debug.logError(gte,"Unable to commit transaction",module);    }  } else {    try {      TransactionUtil.rollback(beganTransaction,"Failure in processing PayPal cancel callback",null);    } catch (    GenericTransactionException gte) {      Debug.logError(gte,"Unable to rollback transaction",module);    }  }  if (okay)   OrderChangeHelper.releaseInitialOrderHold(dispatcher,orderId);  request.setAttribute("_EVENT_MESSAGE_",UtilProperties.getMessage(resourceErr,"payPalEvents.previousPayPalOrderHasBeenCancelled",locale));  return "success";}  }
class C{  private boolean checkAcquiredQuests(QuestStateList qsl){  if (acquired != null && acquired.size() > 0) {    for (    Integer questId : acquired) {      QuestState qs=qsl.getQuestState(questId);      if (qs == null || qs.getStatus() == QuestStatus.NONE || qs.getStatus() == QuestStatus.LOCKED) {        return false;      }    }  }  return true;}  }
class C{  public static void logFirstStateEntry(PanelState fromState,PanelState toState,StateChangeReason reason){  int code;switch (toState) {case CLOSED:    code=getStateChangeCode(fromState,reason,ENTER_CLOSED_STATE_CHANGE_CODES,ENTER_CLOSED_FROM_OTHER);  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchEnterClosed",code,ENTER_CLOSED_FROM_BOUNDARY);break;case PEEKED:code=getStateChangeCode(fromState,reason,ENTER_PEEKED_STATE_CHANGE_CODES,ENTER_PEEKED_FROM_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchEnterPeeked",code,ENTER_PEEKED_FROM_BOUNDARY);break;case EXPANDED:code=getStateChangeCode(fromState,reason,ENTER_EXPANDED_STATE_CHANGE_CODES,ENTER_EXPANDED_FROM_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchEnterExpanded",code,ENTER_EXPANDED_FROM_BOUNDARY);break;case MAXIMIZED:code=getStateChangeCode(fromState,reason,ENTER_MAXIMIZED_STATE_CHANGE_CODES,ENTER_MAXIMIZED_FROM_OTHER);RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchEnterMaximized",code,ENTER_MAXIMIZED_FROM_BOUNDARY);break;default :break;}}  }
class C{  private static boolean passesMillerRabin(BigInteger w,int iterations,Random rnd){  BigInteger wMinusOne=w.subtract(BigInteger.ONE);  BigInteger m=wMinusOne;  int a=m.getLowestSetBit();  m=m.shiftRight(a);  for (int i=0; i < iterations; i++) {    BigInteger b=new BigInteger(w.bitLength(),rnd);    while (b.compareTo(BigInteger.ONE) <= 0 || b.compareTo(w) >= 0) {      b=new BigInteger(w.bitLength(),rnd);    }    int j=0;    BigInteger z=ModPowAbstraction.modPow(b,m,w);    while (!((j == 0 && z.equals(BigInteger.ONE)) || z.equals(wMinusOne))) {      if (j > 0 && z.equals(BigInteger.ONE) || ++j == a) {        return false;      }      z=ModPowAbstraction.modPow(z,BigInteger.valueOf(2),w);    }  }  return true;}  }
class C{  public Expression endsWith(Value str1,Value str2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200934,skilltarget);}  }
class C{  private void initView(boolean init){  if (init && browsablePresenter.isBrowsable()) {    browsablePresenter.requestBrowsableData();  } else {    User u=Mysplash.getInstance().getUser();    SwipeBackLayout swipeBackLayout=(SwipeBackLayout)findViewById(R.id.activity_user_swipeBackLayout);    swipeBackLayout.setOnSwipeListener(this);    StatusBarView statusBar=(StatusBarView)findViewById(R.id.activity_user_statusBar);    if (DisplayUtils.isNeedSetStatusBarMask()) {      statusBar.setBackgroundResource(R.color.colorPrimary_light);      statusBar.setMask(true);    }    this.container=(CoordinatorLayout)findViewById(R.id.activity_user_container);    this.appBar=(AppBarLayout)findViewById(R.id.activity_user_appBar);    this.toolbar=(Toolbar)findViewById(R.id.activity_user_toolbar);    if (Mysplash.getInstance().isLightTheme()) {      if (browsablePresenter.isBrowsable()) {        toolbar.setNavigationIcon(R.drawable.ic_toolbar_home_light);      } else {        toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_light);      }      toolbar.inflateMenu(R.menu.activity_user_toolbar_light);    } else {      if (browsablePresenter.isBrowsable()) {        toolbar.setNavigationIcon(R.drawable.ic_toolbar_home_dark);      } else {        toolbar.setNavigationIcon(R.drawable.ic_toolbar_back_dark);      }      toolbar.inflateMenu(R.menu.activity_user_toolbar_dark);    }    toolbar.setOnMenuItemClickListener(this);    toolbar.setNavigationOnClickListener(this);    if (TextUtils.isEmpty(u.portfolio_url)) {      toolbar.getMenu().getItem(0).setVisible(false);    } else {      toolbar.getMenu().getItem(0).setVisible(true);    }    CircleImageView avatar=(CircleImageView)findViewById(R.id.activity_user_avatar);    Glide.with(this).load(u.profile_image.large).priority(Priority.HIGH).override(128,128).diskCacheStrategy(DiskCacheStrategy.SOURCE).into(avatar);    TextView title=(TextView)findViewById(R.id.activity_user_title);    title.setText(u.name);    this.userProfileView=(UserProfileView)findViewById(R.id.activity_user_profileView);    initPages();    userProfileView.setUser(u);    userProfileView.requestUserProfile(adapter);    this.utils=new DisplayUtils(this);    AnimUtils.animInitShow((View)pagers[0],400);    pagers[0].refreshPager();  }}  }
class C{  protected CompoundControl(Type type,Control[] memberControls){  super(type);  this.controls=memberControls;}  }
class C{  public GroupsGetCatalogInfoQuery(VkApiClient client,UserActor actor){  super(client,"groups.getCatalogInfo",GetCatalogInfoResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected static float complexToFloat(int complex){  return (complex & (COMPLEX_MANTISSA_MASK << COMPLEX_MANTISSA_SHIFT)) * RADIX_MULTS[(complex >> COMPLEX_RADIX_SHIFT) & COMPLEX_RADIX_MASK];}  }
class C{  private void detectFace(Bitmap bitmap,PointF centerOfAllFaces){  FaceDetector faceDetector=PicassoFaceDetector.getFaceDetector();  if (!faceDetector.isOperational()) {    centerOfAllFaces.set(bitmap.getWidth() / 2,bitmap.getHeight() / 2);    return;  }  Frame frame=new Frame.Builder().setBitmap(bitmap).build();  SparseArray<Face> faces=faceDetector.detect(frame);  final int totalFaces=faces.size();  if (totalFaces > 0) {    float sumX=0f;    float sumY=0f;    for (int i=0; i < totalFaces; i++) {      PointF faceCenter=new PointF();      getFaceCenter(faces.get(faces.keyAt(i)),faceCenter);      sumX=sumX + faceCenter.x;      sumY=sumY + faceCenter.y;    }    centerOfAllFaces.set(sumX / totalFaces,sumY / totalFaces);    return;  }  centerOfAllFaces.set(bitmap.getWidth() / 2,bitmap.getHeight() / 2);}  }
class C{  protected Region createRegion(int id){  Region region=new Region(id,this.m_method,this.m_class,this.m_cfg);  if (id == 0)   this.m_topLevelRegion=region;  return region;}  }
class C{  @Override public void end(){  currentTest.get().end();}  }
class C{  @Override public IntComparator rowComparator(){  return comparator;}  }
class C{  private void requestCopyOperation(Intent data){  OCFile folderToMoveAt=data.getParcelableExtra(FolderPickerActivity.EXTRA_FOLDER);  ArrayList<OCFile> files=data.getParcelableArrayListExtra(FolderPickerActivity.EXTRA_FILES);  getFileOperationsHelper().copyFiles(files,folderToMoveAt);}  }
class C{  public static DLSN deserializeBytes(byte[] data){  ByteBuffer bb=ByteBuffer.wrap(data);  byte version=bb.get();  if (VERSION0 == version) {    if (VERSION0_LEN != data.length) {      throw new IllegalArgumentException("Invalid version zero DLSN " + Hex.encodeHexString(data));    }  } else   if (VERSION1 == version) {    if (VERSION1_LEN != data.length) {      throw new IllegalArgumentException("Invalid version one DLSN " + Hex.encodeHexString(data));    }  } else {    throw new IllegalArgumentException("Invalid DLSN : version = " + version + ", "+ Hex.encodeHexString(data));  }  return new DLSN(bb.getLong(),bb.getLong(),bb.getLong());}  }
class C{  protected final Class<?> compileToClass(Java.CompilationUnit compilationUnit) throws CompileException {  ClassLoader cl=this.compileToClassLoader(compilationUnit);  try {    return cl.loadClass(this.className);  } catch (  ClassNotFoundException ex) {    throw new JaninoRuntimeException(("SNO: Generated compilation unit does not declare class '" + this.className + "'"),ex);  }}  }
class C{  public void addField(FieldIdEnum fieldId,boolean enabled){  logger.debug(String.format("AddField %s %s",fieldId.toString(),enabled));  fieldMap.put(fieldId,enabled);}  }
class C{  private int readAllComplexTypeChildrens(int dimensionOrdinal,int childCount,List<ColumnSchema> listOfColumns,CarbonDimension parentDimension){  for (int i=0; i < childCount; i++) {    ColumnSchema columnSchema=listOfColumns.get(dimensionOrdinal);    if (columnSchema.isDimensionColumn()) {      if (columnSchema.getNumberOfChild() > 0) {        CarbonDimension complexDimension=new CarbonDimension(columnSchema,dimensionOrdinal++,-1,-1,-1);        complexDimension.initializeChildDimensionsList(columnSchema.getNumberOfChild());        parentDimension.getListOfChildDimensions().add(complexDimension);        dimensionOrdinal=readAllComplexTypeChildrens(dimensionOrdinal,columnSchema.getNumberOfChild(),listOfColumns,complexDimension);      } else {        parentDimension.getListOfChildDimensions().add(new CarbonDimension(columnSchema,dimensionOrdinal++,-1,-1,-1));      }    }  }  return dimensionOrdinal;}  }
class C{  public void reset(){  count.reset();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_HCOIN_02(String value0){  return new SM_SYSTEM_MESSAGE(1400939,value0);}  }
class C{  public void drawElement(NlGraphics gc,NlComponent component,int offsetX,int offsetY){  if (component.w > 0 && component.h > 0) {    gc.drawRect(component.x + offsetX,component.y + offsetY,component.w,component.h);  }  for (  NlComponent inner : component.getChildren()) {    drawElement(gc,inner,offsetX,offsetY);  }}  }
class C{  public static String byteArrayToString(byte[] data){  if (data == null || data.length == 0) {    return "";  }  return Base64.encodeBytes(data);}  }
class C{  public SourceDataTag(final Long id,final String name,final boolean controlTag,final short mode,final String dataType,final DataTagAddress address){  this.id=id;  this.name=name;  this.control=controlTag;  this.mode=mode;  this.dataType=dataType;  this.address=address;}  }
class C{  protected void assertPathIsNotAbsolute(String filePath){  assertThat(FileUtil.isAbsolute(filePath)).isFalse();}  }
class C{  @Transactional(value="cacheTransactionManager") @Override public void persistBatch(final List<Long> keyList){  T cacheObject;  for (  Long key : keyList) {    try {      cacheObject=cache.getCopy(key);      if (cacheObject != null && (!(cacheObject instanceof Tag) || !((Tag)cacheObject).isInUnconfigured())) {        persistenceMapper.updateCacheable(cacheObject);      }    } catch (    CacheElementNotFoundException ex) {      LOGGER.warn("Cache element with id " + key + " could not be persisted as not found in cache (may have been "+ "removed in the meantime by a re-configuration). Cache is "+ cache.getClass().getSimpleName(),ex);    }  }}  }
class C{  public InputStreamInputSplit(InputStream is,URI path){  this.is=is;  this.location=new URI[]{path};}  }
class C{  public BigInteger encrypt(BigInteger m,BigInteger r) throws PIRException {  if (m.compareTo(N) >= 0) {    throw new PIRException("m  = " + m.toString(2) + " is greater than or equal to N = "+ N.toString(2));  }  BigInteger term1=(m.multiply(N).add(BigInteger.ONE)).mod(NSquared);  BigInteger term2=ModPowAbstraction.modPow(r,N,NSquared);  return (term1.multiply(term2)).mod(NSquared);}  }
class C{  public float distance(Vector3f v){  return FastMath.sqrt(distanceSquared(v));}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  MirrorServiceConfig copy=(MirrorServiceConfig)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  @Provides @Singleton @PartitionAwareClient DatabusClientSubjectProxy provideDatabusClient(MultiThreadedServiceFactory<DatabusClientSubjectProxy> serviceFactory,@DatabusHostDiscovery HostDiscovery hostDiscovery,DatabusFactory databusFactory,@SelfHostAndPort HostAndPort self,MetricRegistry metricRegistry,HealthCheckRegistry healthCheckRegistry){  DatabusClientSubjectProxy client=ServicePoolBuilder.create(DatabusClientSubjectProxy.class).withHostDiscovery(hostDiscovery).withServiceFactory(new PartitionAwareServiceFactory<>(serviceFactory,new LocalDatabusClientSubjectProxy(databusFactory),self,healthCheckRegistry)).withMetricRegistry(metricRegistry).withCachingPolicy(ServiceCachingPolicyBuilder.getMultiThreadedClientPolicy()).buildProxy(new ExponentialBackoffRetry(5,50,1000,TimeUnit.MILLISECONDS));  _environment.lifecycle().manage(new ManagedServicePoolProxy(client));  return client;}  }
class C{  public double norm2(){  return (new SingularValueDecomposition(this).norm2());}  }
class C{  public TimeDetector(double... eventTs){  this(Action.CONTINUE,eventTs);}  }
class C{  public void checkSymbolIsValid(){  boolean valid=false;  Expression expression=getExpression();  if (expression != null) {    valid=!expression.toString().isEmpty();  }  SelectedSymbol.getInstance().setValidSymbol(VALIDITY_KEY,valid);}  }
class C{  public void build(Instruction insts){  Instruction i;  i=insts;  icount=0;  while (i != null) {    icount++;    i=i.next;  }  if (icount > 0) {    instructions=new Instruction[icount];    int k;    k=0;    i=insts;    while (i != null) {      instructions[k]=i;      k++;      i=i.next;    }    i=insts;    while (i != null) {      i.offsetToPointer(this);      i=i.next;    }  }}  }
class C{  public void reset(){  Iterator iIter=Arrays.asList(getAvailableCategories()).iterator();  while (iIter.hasNext())   Repository.deleteObject((String)iIter.next(),INSECTDB.CATEGORY_TYPE);}  }
class C{  public PagesGetQuery(VkApiClient client,UserActor actor){  super(client,"pages.get",WikipageFull.class);  accessToken(actor.getAccessToken());}  }
class C{  @RequestMapping(value="/apps",method=RequestMethod.GET) public JsonResponse pageApps(@RequestParam(value="appName",defaultValue="") String appName,@RequestParam(value="pageNo",defaultValue="1") Integer pageNo,@RequestParam(value="pageSize",defaultValue="10") Integer pageSize){  Response<Page<App>> pageResp=appService.pagingApp(appName,pageNo,pageSize);  if (!pageResp.isSuccess()) {    Logs.error("failed to page apps(appName={}, pageNo={}, pageSize={}), cause: {}",appName,pageNo,pageSize,pageResp.getErr());    return JsonResponse.notOk(pageResp.getErr());  }  return JsonResponse.ok(pageResp.getData());}  }
class C{  public void mousePressed(float x,float y,boolean isRightClick){  if (isRightClick) {    mMouseMode=MouseMode.INACTIVE;    return;  }  for (  ConstraintWidget w : mWidgetsScene.getWidgets()) {    getDecorator(w).setShowActions(false);  }  mPressTime=System.currentTimeMillis();  Animator.setAnimationEnabled(true);  mMouseDown=true;  mStartPoint.setLocation(x,y);  mLastMousePosition.setLocation(x,y);  mSelection.setConnectionCandidateAnchor(null);  mSelection.setSelectedAnchor(null);  mSelection.setSelectedGuideline(null);  mSelection.setLastConnectedAnchor(null);  mMouseMode=MouseMode.SELECT;  mWidgetsScene.updatePositions(mViewTransform);  mClickListener.populate();  mClickListener.find(mViewTransform.getSwingFX(x),mViewTransform.getSwingFY(y));  ConstraintWidget widget=mClickListener.mHitWidget;  ConstraintAnchor anchor=mClickListener.getConstraintAnchor();  ResizeHandle resizeHandle=mClickListener.mHitResizeHandle;  for (  ConstraintWidget w : mWidgetsScene.getWidgets()) {    ConstraintWidget widgetHit=getDecorator(w).mousePressed(x,y,mViewTransform,mSelection);    if (widgetHit != null && widget == null) {      widget=widgetHit;    }  }  WidgetDecorator.WidgetAction widgetAction=mClickListener.getWidgetAction();  if (widgetAction != null && widgetAction.isVisible()) {    widget=widgetAction.getWidget();    if (widgetAction.click()) {      mSelection.addModifiedWidget(widgetAction.getWidget());    }  }  if (widget != null && (widget.isRoot() || widget.isRootContainer())) {    if (!mSelection.isEmpty() && mInteractionComponent != null && widget != mInteractionComponent) {      ConstraintWidget selection=mSelection.getFirstElement().widget;      if (widget.hasAncestor(selection)) {        widget=selection;      } else {        widget=null;      }    } else {      widget=null;    }  }  if (!isAltDown() ^ mMoveOnlyMode) {    if (anchor != null) {      widget=anchor.getOwner();      if (mSelection.contains(widget)) {        ConstraintHandle handle=WidgetInteractionTargets.constraintHandle(anchor);        setStartPoint(handle.getDrawX(),handle.getDrawY());        mSelection.clear();        mSelection.add(widget);        mSelection.setSelectedAnchor(anchor);        mMouseMode=MouseMode.CONNECT;      }    } else     if (resizeHandle != null) {      widget=resizeHandle.getOwner();      if (mSelection.contains(widget)) {        mSelection.clear();        mSelection.add(widget);        mSelection.setSelectedResizeHandle(resizeHandle);        mMouseMode=MouseMode.RESIZE;      }    }  }  for (  ConstraintWidget w : mWidgetsScene.getWidgets()) {    if (w instanceof Guideline) {      Guideline guideline=(Guideline)w;      Rectangle head=guideline.getHead();      if (head.contains((int)x,(int)y)) {        mSelection.setSelectedGuideline(guideline);        break;      }    }  }  if (mSelection.getSelectedGuideline() != null) {    mSelection.clear();    mSelection.setSelectedResizeHandle(resizeHandle);    mSelection.add(mSelection.getSelectedGuideline());    widget=mSelection.getSelectedGuideline();    if (mMouseMode == MouseMode.SELECT) {      mMouseMode=MouseMode.MOVE;    }  }  if (widget == null) {    mSelection.clear();  }  if (mSelection.getSelectedAnchor() != null) {    mSelection.setSelectedAnchorInitialTarget(mSelection.getSelectedAnchor().getTarget());  }  mSelection.updatePosition();  mSelection.createBounds();  if (mSelection.hasSingleElement()) {    setSnapshot(new Snapshot(mSelection.getFirstElement().widget));  } else {    setSnapshot(null);  }  mSceneDraw.setCurrentUnderneathAnchor(mSelection.getSelectedAnchor());  mSceneDraw.onMousePress(mSelection.getSelectedAnchor());  mBaselineTimer.stop();}  }
class C{  @Override public boolean accept(File file){  return file.isDirectory();}  }
class C{  @Override public boolean isEqualNode(Node arg){  return super.isEqualNode(arg);}  }
class C{  public CategorizedFileEntry(String sFilename,String sCategory){  Filename=sFilename;  Category=sCategory;}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  private static void checkResultFailures(Result[] results){  logger.entering(ServiceStarter.class.getName(),"checkResultFailures",(Object[])results);  if (results.length == 0)   return;  for (int i=0; i < results.length; i++) {    if (results[i].exception != null) {      logger.log(Level.WARNING,"service.creation.unknown",results[i].exception);      logger.log(Level.WARNING,"service.creation.unknown.detail",new Object[]{new Integer(i),results[i].descriptor});    } else     if (results[i].descriptor == null) {      logger.log(Level.WARNING,"service.creation.null",new Integer(i));    }  }  logger.exiting(ServiceStarter.class.getName(),"checkResultFailures");}  }
class C{  @SuppressWarnings("unused") static public AudioInputStream convertToPCM(AudioInputStream in) throws IllegalArgumentException {  AudioFormat targetFormat=null;  AudioInputStream pcm=in;  AudioFormat sourceFormat=in.getFormat();  int sampleSizeInBits;  if (in == null)   throw new IllegalArgumentException("the inputstream must not be null values");  sampleSizeInBits=sourceFormat.getSampleSizeInBits();  if (sampleSizeInBits == -1)   sampleSizeInBits=16;  if (sampleSizeInBits != 8 && sampleSizeInBits != 16 && sampleSizeInBits != 24 && sampleSizeInBits != 32)   sampleSizeInBits=16;  sourceFormat=in.getFormat();  if (sourceFormat.getEncoding() != AudioFormat.Encoding.PCM_SIGNED) {    targetFormat=new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,sourceFormat.getSampleRate(),sampleSizeInBits,sourceFormat.getChannels(),sourceFormat.getChannels() * (sampleSizeInBits / 8),sourceFormat.getSampleRate(),false);    pcm=AudioSystem.getAudioInputStream(targetFormat,pcm);  }  return pcm;}  }
class C{  public void clearBasicAuth(){  this.httpClient.getCredentialsProvider().clear();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UI_COMBAT_NPC_FLEE(String value0){  return new SM_SYSTEM_MESSAGE(1300038,value0);}  }
class C{  public long optLong(String key,long defaultValue){  LazyNode token=getOptionalFieldToken(key);  if (token == null)   return defaultValue;  if (token.type == LazyNode.VALUE_NULL)   return defaultValue;  return token.getLongValue(cbuf);}  }
class C{  private void updateUI(WKTType wktType){  multiListModel.clear();  segmentListModel.clear();  tablePointModel.clear();  showMultiPanel(wktType);  tablePointModel.setWKTType(wktType);  updateSegmentButtons();  updatePointButtons();}  }
class C{  final boolean load(int offset,boolean changeEntity) throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(load, " + offset + ": ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  fCurrentEntity.baseCharOffset+=(fCurrentEntity.position - fCurrentEntity.startPosition);  int length=fCurrentEntity.ch.length - offset;  if (!fCurrentEntity.mayReadChunks && length > XMLEntityManager.DEFAULT_XMLDECL_BUFFER_SIZE) {    length=XMLEntityManager.DEFAULT_XMLDECL_BUFFER_SIZE;  }  if (DEBUG_BUFFER)   System.out.println("  length to try to read: " + length);  int count=fCurrentEntity.reader.read(fCurrentEntity.ch,offset,length);  if (DEBUG_BUFFER)   System.out.println("  length actually read:  " + count);  boolean entityChanged=false;  if (count != -1) {    if (count != 0) {      fCurrentEntity.count=count + offset;      fCurrentEntity.position=offset;      fCurrentEntity.startPosition=offset;    }  } else {    fCurrentEntity.count=offset;    fCurrentEntity.position=offset;    fCurrentEntity.startPosition=offset;    entityChanged=true;    if (changeEntity) {      fEntityManager.endEntity();      if (fCurrentEntity == null) {        throw END_OF_DOCUMENT_ENTITY;      }      if (fCurrentEntity.position == fCurrentEntity.count) {        load(0,true);      }    }  }  if (DEBUG_BUFFER) {    System.out.print(")load, " + offset + ": ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  return entityChanged;}  }
class C{  protected BaseSecantSolver(final double relativeAccuracy,final double absoluteAccuracy,final Method method){  super(relativeAccuracy,absoluteAccuracy);  this.allowed=AllowedSolution.ANY_SIDE;  this.method=method;}  }
class C{  public boolean isBlockPopups(){  return isOptionEnabled(UrlFilterRuleOption.BLOCK_POPUPS);}  }
class C{  public boolean equalTo(Entry e){  return e != null && e.data == data && Math.abs(e.x - this.x) <= 0.000001f && Math.abs(e.getY() - this.getY()) <= 0.000001f;}  }
class C{  public static void addMissingSkills(Player player){  int level=player.getCommonData().getLevel();  PlayerClass playerClass=player.getCommonData().getPlayerClass();  Race playerRace=player.getRace();  for (int i=0; i <= level; i++) {    addSkills(player,i,playerClass,playerRace);  }  if (!playerClass.isStartingClass()) {    PlayerClass startinClass=PlayerClass.getStartingClassFor(playerClass);    for (int i=1; i < 10; i++) {      addSkills(player,i,startinClass,playerRace);    }    if (player.getSkillList().getSkillEntry(30001) != null) {      int skillLevel=player.getSkillList().getSkillLevel(30001);      player.getSkillList().removeSkill(30001);      PacketSendUtility.sendPacket(player,new SM_SKILL_LIST(player,player.getSkillList().getBasicSkills()));      for (      PlayerSkillEntry stigmaSkill : player.getSkillList().getStigmaSkills())       PacketSendUtility.sendPacket(player,new SM_SKILL_LIST(player,stigmaSkill));      player.getSkillList().addSkill(player,30002,skillLevel);    }  }}  }
class C{  void subtractFlakes(int quantity){  for (int i=0; i < quantity; ++i) {    int index=numFlakes - i - 1;    flakes.remove(index);  }  setNumFlakes(numFlakes - quantity);}  }
class C{  public EconomyConcurrentHashMap(int initialCapacity,float loadFactor,int concurrencyLevel,IHashEntryHandler<K,V> handler){  if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)   throw new IllegalArgumentException();  if (concurrencyLevel > MAX_SEGMENTS)   concurrencyLevel=MAX_SEGMENTS;  _handler=handler;  int sshift=0;  int ssize=1;  while (ssize < concurrencyLevel) {    ++sshift;    ssize<<=1;  }  segmentShift=32 - sshift;  segmentMask=ssize - 1;  this.segments=Segment.newArray(ssize);  if (initialCapacity > MAXIMUM_CAPACITY)   initialCapacity=MAXIMUM_CAPACITY;  int c=initialCapacity / ssize;  if (c * ssize < initialCapacity)   ++c;  int cap=1;  while (cap < c)   cap<<=1;  for (int i=0; i < this.segments.length; ++i)   this.segments[i]=new Segment<K,V>(cap,loadFactor,handler);}  }
class C{  public Ray(double direction){  this(new Vector2(direction));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200985,skilltarget,skillcaster,skillname);}  }
class C{  public Vec2d sub(double x,double y){  this.x-=x;  this.y-=y;  return this;}  }
class C{  public static String[] compareString(final String[] stringArray1,final String[] stringArray2){  String[] differentString=null;  if (stringArray1 != null && stringArray2 != null) {    List<String> list=new ArrayList<String>();    for (int i=0; i < stringArray1.length; i++) {      boolean sign=false;      for (int j=0; j < stringArray2.length; j++) {        if (stringArray1[i].equals(stringArray2[j])) {          sign=true;          break;        }      }      if (!sign) {        list.add(stringArray1[i]);      }    }    differentString=new String[list.size()];    differentString=list.toArray(differentString);  }  return differentString;}  }
class C{  protected PhotosCreateCommentQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  protected long scaleTime(int reqSampleRate,long targetTimeInSamples){  if (reqSampleRate == sampleRate)   return (targetTimeInSamples);  return (Math.round((double)(reqSampleRate) * (double)(targetTimeInSamples) / (sampleRate)));}  }
class C{  private FlatServoRail flatten(){  if (isStatic()) {    return this;  }  if (color == FzColor.NO_COLOR && component instanceof GenericPlaceholder) {    return ServoFeature.static_rail;  }  return this;}  }
class C{  public void createGraphs(){  String sUsableString=new StringBuilder().append(DataString).toString();  if (TextPreprocessor != null)   sUsableString=TextPreprocessor.preprocess(sUsableString);  int iLen=DataString.length();  HashMap hTokenAppearence=new HashMap();  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    if (iLen < iNGramSize)     continue;    String sCurNGram=null;    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      sCurNGram=sUsableString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      if (hTokenAppearence.containsKey(sCurNGram))       hTokenAppearence.put(sCurNGram,((Double)hTokenAppearence.get(sCurNGram)).doubleValue() + 1.0); else       hTokenAppearence.put(sCurNGram,1.0);    }  }  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    if (iLen < iNGramSize)     continue;    Vector PrecedingNeighbours=new Vector();    UniqueVertexGraph gGraph=getGraphLevelByNGramSize(iNGramSize);    String sCurNGram="";    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      sCurNGram=sUsableString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      String[] aFinalNeighbours;      if (Normalizer != null)       aFinalNeighbours=(String[])Normalizer.normalize(null,PrecedingNeighbours.toArray()); else {        aFinalNeighbours=new String[PrecedingNeighbours.size()];        PrecedingNeighbours.toArray(aFinalNeighbours);      }      createEdgesConnecting(gGraph,sCurNGram,java.util.Arrays.asList(aFinalNeighbours),hTokenAppearence);      PrecedingNeighbours.add(sCurNGram);      if (PrecedingNeighbours.size() > CorrelationWindow)       PrecedingNeighbours.removeElementAt(0);    }  }}  }
class C{  public ExperimentMissingHypothesisException(ErrorCode errorCode,String detailMessage){  super(errorCode,detailMessage);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof ByteWritable)) {    return false;  }  ByteWritable other=(ByteWritable)o;  return this.value == other.value;}  }
class C{  @Override public List chunkString(String sToChunk){  Integer[] iRes=splitPointsByDelimiterList(sToChunk,getDelimiters());  String[] sRes=splitStringByDelimiterPoints(sToChunk,iRes);  return Arrays.asList(sRes);}  }
class C{  private double match_bitapScore(int e,int x,int loc,String pattern){  float accuracy=(float)e / pattern.length();  int proximity=Math.abs(loc - x);  if (Match_Distance == 0) {    return proximity == 0 ? accuracy : 1.0;  }  return accuracy + (proximity / (float)Match_Distance);}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public static String loadFileWithUnixLineSeparators(File file) throws IOException {  return UNIX_NEW_LINE_JOINER.join(Files.readLines(file,Charsets.UTF_8));}  }
class C{  public int numberOfTotalNGrams(){  if (iTotalNGrams != -1)   return iTotalNGrams;  createHistogram();  return iTotalNGrams;}  }
class C{  public void reload(SampleAttributeTable sampleAttributeTable){  originalBytes=null;  load(sampleAttributeTable);}  }
class C{  public JsonObjectHttpRequest(String url,JSONObject jsonObject,RequestCallback callback) throws MalformedURLException {  super(url,callback);  mJsonObject=jsonObject;}  }
class C{  public static void showLong(Context context,String text){  if (mToast == null) {    mToast=Toast.makeText(context,text,Toast.LENGTH_LONG);  }  mToast.setDuration(Toast.LENGTH_LONG);  mToast.setText(text);  mToast.show();}  }
class C{  public EventLogException(ErrorCode errorCode,String message){  this(errorCode,message,null);}  }
class C{  public ItemStack mergeStack(ItemStack itemStack){  stack+=itemStack.getStack();  if (stack > item.getMaxItemStack()) {    int remainder=stack - item.getMaxItemStack();    stack=item.getMaxItemStack();    itemStack.stack=remainder;  } else {    itemStack.stack=0;  }  return itemStack;}  }
class C{  public summaryGenericEvaluator(String[] args){  OutputSemaphore=new Semaphore(1);  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(args);  if (gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"?","").length() > 0) {    printUsage();    System.exit(0);  }  try {    NMin=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"nMin","3"));    NMax=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"nMax","5"));    Dist=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"dist","3"));    Threads=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"t","" + Runtime.getRuntime().availableProcessors()));    DocumentClass=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"docClass",NGramDocument.class.getName());    ComparatorClass=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"compClass",StandardDocumentComparator.class.getName());    OutFile=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"o","");    SummaryDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"summaryDir","summaries" + System.getProperty("file.separator"));    ModelDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"modelDir","models" + System.getProperty("file.separator"));    Silent=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"s","FALSE").equals("TRUE");    Progress=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"progress","FALSE").equals("TRUE");    if (!Silent)     System.err.println("Using parameters:\n" + hSwitches);  } catch (  ClassCastException cce) {    System.err.println("Malformed switch:" + cce.getMessage() + ". Aborting...");    printUsage();  }}  }
class C{  public boolean hasInit(){  return getInitOpt().getNumChild() != 0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ENSLAVE_GIVE_EXP_TO_PET_GET_EXP(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1370003,value0,num1);}  }
class C{  public XMLDocumentParser(SymbolTable symbolTable,XMLGrammarPool grammarPool){  super((XMLParserConfiguration)ObjectFactory.createObject("mf.org.apache.xerces.xni.parser.XMLParserConfiguration","mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration"));  fConfiguration.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY,symbolTable);  fConfiguration.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.XMLGRAMMAR_POOL_PROPERTY,grammarPool);}  }
class C{  private Document sendRESTRequestToASE(final String relativeURL,final String postData) throws ParserConfigurationException, IOException, SAXException {  LOGGER.debug("Inside sendRESTRequestToASE..relativeURL=" + relativeURL);  LOGGER.debug("Inside sendRESTRequestToASE..AppScanUtils.isNotNull(postData)=" + AppScanUtils.isNotNull(postData));  final DocumentBuilderFactory domFactory=DocumentBuilderFactory.newInstance();  domFactory.setNamespaceAware(true);  final DocumentBuilder builder=domFactory.newDocumentBuilder();  URL url=null;  if (!relativeURL.contains(RootConfiguration.getProperties().getProperty(AppScanConstants.PROPERTIES_APP_SCAN_SERVER_NAME_IDENTIFIER))) {    url=new URL(AppScanConstants.APPSCAN_BASE_URL + relativeURL);  } else {    url=new URL(relativeURL);  }  LOGGER.debug("Inside sendRESTRequestToASE..url=" + url);  HttpURLConnection httpURLConnection=(HttpURLConnection)url.openConnection();  httpURLConnection.setDoInput(true);  httpURLConnection.addRequestProperty(HTTP.CONTENT_TYPE,MediaType.APPLICATION_FORM_URLENCODED_VALUE);  LOGGER.debug("Inside sendRESTRequestToASE..cookieContainer=" + cookieContainer);  if (cookieContainer.length() > 0) {    httpURLConnection.setRequestProperty("Cookie",cookieContainer);  }  if (AppScanUtils.isNotNull(postData)) {    OutputStreamWriter outputStreamWriter=null;    try {      httpURLConnection.setRequestMethod("POST");      httpURLConnection.setDoOutput(true);      final OutputStream outputStream=httpURLConnection.getOutputStream();      outputStreamWriter=new OutputStreamWriter(outputStream);      outputStreamWriter.write(postData);      outputStreamWriter.flush();    }  finally {      if (outputStreamWriter != null) {        outputStreamWriter.close();      }    }  }  LOGGER.debug("Inside sendRESTRequestToASE..1=");  try {    LOGGER.debug("Inside sendRESTRequestToASE..1.1...httpURLConnection.getResponseCode()=" + httpURLConnection.getResponseCode());    return builder.parse(new InputSource(httpURLConnection.getInputStream()));  } catch (  SAXException saxException) {    LOGGER.debug("Inside sendRESTRequestToASE..2=");    LOGGER.error(saxException);  }catch (  IOException ioException) {    LOGGER.debug("Inside sendRESTRequestToASE..3=");    ioException.printStackTrace();    LOGGER.error(ioException);    if (httpURLConnection.getResponseCode() == 401) {      throw ioException;    }    return builder.parse(new InputSource(httpURLConnection.getErrorStream()));  } finally {    LOGGER.debug("Inside sendRESTRequestToASE..4=");    Map<String,List<String>> responseHeaders=httpURLConnection.getHeaderFields();    List<String> cookies=responseHeaders.get("Set-Cookie");    if (cookies != null && cookies.size() > 0) {      for (      String cookie : cookies) {        LOGGER.debug("Inside sendRESTRequestToASE..cookie=" + cookie);        if (cookieContainer.length() > 0)         cookieContainer+=", ";        cookieContainer+=cookie;      }    }    httpURLConnection.disconnect();    LOGGER.debug("Inside sendRESTRequestToASE..cookie=" + cookieContainer);  }  return null;}  }
class C{  public static boolean subsumes(Locale general,Locale specific){  if (general == null || specific == null)   return false;  if (general.equals(specific))   return true; else   if (general.getVariant().equals("")) {    if (general.getCountry().equals("")) {      if (general.getLanguage().equals(specific.getLanguage()))       return true;    } else {      if (general.getLanguage().equals(specific.getLanguage()) && general.getCountry().equals(specific.getCountry()))       return true;    }  }  return false;}  }
class C{  public static S2Point trueCentroid(S2Point a,S2Point b,S2Point c){  double sina=S2Point.crossProd(b,c).norm();  double sinb=S2Point.crossProd(c,a).norm();  double sinc=S2Point.crossProd(a,b).norm();  double ra=(sina == 0) ? 1 : (Math.asin(sina) / sina);  double rb=(sinb == 0) ? 1 : (Math.asin(sinb) / sinb);  double rc=(sinc == 0) ? 1 : (Math.asin(sinc) / sinc);  S2Point x=new S2Point(a.x,b.x,c.x);  S2Point y=new S2Point(a.y,b.y,c.y);  S2Point z=new S2Point(a.z,b.z,c.z);  S2Point r=new S2Point(ra,rb,rc);  return new S2Point(0.5 * S2Point.crossProd(y,z).dotProd(r),0.5 * S2Point.crossProd(z,x).dotProd(r),0.5 * S2Point.crossProd(x,y).dotProd(r));}  }
class C{  private void mapAbsoluteToRelative(float[] destPoints,float[] srcPoints,int numPoints){  for (int i=0; i < numPoints; i++) {    destPoints[i * 2 + 0]=(srcPoints[i * 2 + 0] - mImageBounds.left) / mImageBounds.width();    destPoints[i * 2 + 1]=(srcPoints[i * 2 + 1] - mImageBounds.top) / mImageBounds.height();  }}  }
class C{  public void requestFocus(){  this.m_queryF.requestFocus();}  }
class C{  public AccessToken(AccessToken other){  update(other);}  }
class C{  public AccountSaveProfileInfoQuery cancelRequestId(Integer value){  return unsafeParam("cancel_request_id",value);}  }
class C{  @Override public byte[] readByteArray(String filePath,long offset,int length){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,length,offset);  return byteBffer.array();}  }
class C{  public NotesCreateCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean implies(Permission perm){  if (!(perm instanceof AuthenticationPermission)) {    return false;  }  AuthenticationPermission ap=(AuthenticationPermission)perm;  return (mask & ap.mask) == ap.mask && implies0(ap);}  }
class C{  private void update(double beta,double denom,int knew){  printMethod();  final int n=currentBest.getDimension();  final int npt=numberOfInterpolationPoints;  final int nptm=npt - n - 1;  final ArrayRealVector work=new ArrayRealVector(npt + n);  double ztest=ZERO;  for (int k=0; k < npt; k++) {    for (int j=0; j < nptm; j++) {      ztest=FastMath.max(ztest,FastMath.abs(zMatrix.getEntry(k,j)));    }  }  ztest*=1e-20;  for (int j=1; j < nptm; j++) {    final double d1=zMatrix.getEntry(knew,j);    if (FastMath.abs(d1) > ztest) {      final double d2=zMatrix.getEntry(knew,0);      final double d3=zMatrix.getEntry(knew,j);      final double d4=FastMath.sqrt(d2 * d2 + d3 * d3);      final double d5=zMatrix.getEntry(knew,0) / d4;      final double d6=zMatrix.getEntry(knew,j) / d4;      for (int i=0; i < npt; i++) {        final double d7=d5 * zMatrix.getEntry(i,0) + d6 * zMatrix.getEntry(i,j);        zMatrix.setEntry(i,j,d5 * zMatrix.getEntry(i,j) - d6 * zMatrix.getEntry(i,0));        zMatrix.setEntry(i,0,d7);      }    }    zMatrix.setEntry(knew,j,ZERO);  }  for (int i=0; i < npt; i++) {    work.setEntry(i,zMatrix.getEntry(knew,0) * zMatrix.getEntry(i,0));  }  final double alpha=work.getEntry(knew);  final double tau=lagrangeValuesAtNewPoint.getEntry(knew);  lagrangeValuesAtNewPoint.setEntry(knew,lagrangeValuesAtNewPoint.getEntry(knew) - ONE);  final double sqrtDenom=FastMath.sqrt(denom);  final double d1=tau / sqrtDenom;  final double d2=zMatrix.getEntry(knew,0) / sqrtDenom;  for (int i=0; i < npt; i++) {    zMatrix.setEntry(i,0,d1 * zMatrix.getEntry(i,0) - d2 * lagrangeValuesAtNewPoint.getEntry(i));  }  for (int j=0; j < n; j++) {    final int jp=npt + j;    work.setEntry(jp,bMatrix.getEntry(knew,j));    final double d3=(alpha * lagrangeValuesAtNewPoint.getEntry(jp) - tau * work.getEntry(jp)) / denom;    final double d4=(-beta * work.getEntry(jp) - tau * lagrangeValuesAtNewPoint.getEntry(jp)) / denom;    for (int i=0; i <= jp; i++) {      bMatrix.setEntry(i,j,bMatrix.getEntry(i,j) + d3 * lagrangeValuesAtNewPoint.getEntry(i) + d4 * work.getEntry(i));      if (i >= npt) {        bMatrix.setEntry(jp,(i - npt),bMatrix.getEntry(i,j));      }    }  }}  }
class C{  protected void updateExamples(){  if (fPreview != null)   fPreview.refresh();}  }
class C{  private void append(StringBuilder buffer,double[] data,String prefix,String separator,String suffix){  buffer.append(prefix);  for (int i=0; i < data.length; ++i) {    if (i > 0) {      buffer.append(separator);    }    buffer.append(data[i]);  }  buffer.append(suffix);}  }
class C{  public void applyTo(final double[] in,final T[] out){  final double x=in[0];  final double y=in[1];  final double z=in[2];  final T s=q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z));  out[0]=q0.multiply(q0.multiply(x).subtract(q2.multiply(z).subtract(q3.multiply(y)))).add(s.multiply(q1)).multiply(2).subtract(x);  out[1]=q0.multiply(q0.multiply(y).subtract(q3.multiply(x).subtract(q1.multiply(z)))).add(s.multiply(q2)).multiply(2).subtract(y);  out[2]=q0.multiply(q0.multiply(z).subtract(q1.multiply(y).subtract(q2.multiply(x)))).add(s.multiply(q3)).multiply(2).subtract(z);}  }
class C{  @JsonValue public String toJson(){  return jsonName;}  }
class C{  public void showMetrics(){  timer.show(toString());}  }
class C{  private Cacheable fetchFromDB(final Object id){  return cacheLoaderDAO.getItem(id);}  }
class C{  private static byte positionToByte(int position){  return (byte)(position % 0xff);}  }
class C{  public final int hashCode(){  if (toString() == null) {    return 0;  }  return toString().hashCode();}  }
class C{  @Override public void write(byte b[],int off,int len) throws IOException {  out.write(b,off,len);  md5.Update(b,off,len);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CaseHeal_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200951,skilltarget,skillcaster,skillname);}  }
class C{  public static <T>List<T> toList(T obj1,T obj2){  List<T> list=new LinkedList<T>();  list.add(obj1);  list.add(obj2);  return list;}  }
class C{  public INSECTDictionaryDB(){}  }
class C{  public void init$Children(){}  }
class C{  public static String toString(Context context,long millis,boolean abbreviate){  long[] fields=breakdown(millis);  long numDays=fields[DAYS];  long numHours=fields[HOURS];  long numMins=fields[MINUTES];  long numSecs=fields[SECONDS];  if (numSecs >= 31) {    numMins++;    numSecs=0;    if (numMins == 60) {      numHours++;      numMins=0;      if (numHours == 24) {        numDays++;        numHours=0;      }    }  }  int res;  if (abbreviate) {    res=getAbbreviatedStringRes(numDays,numHours,numMins);  } else {    res=getStringRes(numDays,numHours,numMins);  }  return context.getString(res,numDays,numHours,numMins);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set drawer=" + ViewerBase.DiagramType.RoundedPhylogram + ";");}  }
class C{  public BoardCloseTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId){  super(client,"board.closeTopic",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);}  }
class C{  public boolean isThirdParty(){  if (isOptionEnabled(UrlFilterRuleOption.THIRD_PARTY)) {    return true;  }  if (isOptionDisabled(UrlFilterRuleOption.THIRD_PARTY)) {    return false;  }  return false;}  }
class C{  public void saveFirstTimeUser(boolean isFirstTimeUser){  savePreference("firstTimeUser",isFirstTimeUser);}  }
class C{  public synchronized void shutdown(){  if (_isShutdown)   return;  _isShutdown=true;  for (  ProtocolAdapter<?> protocolAdapter : _protocolRegistry.values())   protocolAdapter.shutdown();  _protocolRegistry.clear();  _objectRegistry.clear();  _stubCache.clear();  _lrmiThreadPool.shutdownNow();  _monitoringPriorityThreadPool.shutdownNow();  _livenessPriorityThreadPool.shutdownNow();  _customThreadPool.shutdown();  DynamicSmartStub.shutdown();  Watchdog.shutdown();}  }
class C{  public Expression emptyExpression(){  return new EmptyExpression();}  }
class C{  synchronized void redo(RTEditText editor){  Stack<Operation> redoStack=getRedoStack(editor);  if (!redoStack.empty()) {    Stack<Operation> undoStack=getUndoStack(editor);    Operation op=redoStack.pop();    push(op,undoStack);    op.redo(editor);    while (!redoStack.empty() && op.canMerge(redoStack.peek())) {      op=redoStack.pop();      push(op,undoStack);      op.redo(editor);    }  }}  }
class C{  @Requires(Resolved.class) @Nullable public Field lookupField(String name){  return fieldByName.get(name);}  }
class C{  public static String normalize(String value){  if (value == null)   return value;  value=value.trim();  if (value.indexOf("  ") == -1)   return value;  boolean space=false;  int len=value.length();  StringBuffer b=new StringBuffer(len);  for (int i=0; i < len; i++) {    char v=value.charAt(i);    if (v == ' ') {      if (!space)       b.append(v);      space=true;    } else {      b.append(v);      space=false;    }  }  return b.toString();}  }
class C{  public static void loadFromContext(Context context){  Constants.ANDROID_VERSION=android.os.Build.VERSION.RELEASE;  Constants.PHONE_MODEL=android.os.Build.MODEL;  Constants.PHONE_MANUFACTURER=android.os.Build.MANUFACTURER;  loadFilesPath(context);  loadPackageData(context);  loadCrashIdentifier(context);}  }
class C{  public final void encrypt(ByteBuffer buf){  crypt.encrypt(buf);}  }
class C{  public DiphoneUnitSelector() throws Exception {  super();}  }
class C{  public void clear(){  for (  VisibleObject object : knownObjects.values()) {    object.getKnownList().del(owner,false);  }  knownObjects.clear();  if (knownPlayers != null) {    knownPlayers.clear();  }  visualObjects.clear();  if (visualPlayers != null) {    visualPlayers.clear();  }}  }
class C{  protected void tearDownTest() throws Exception {}  }
class C{  public void buildGeometryForOrganisationUnit(OrganisationUnit orgUnit){  Geometry primitive=null;  String coords=orgUnit.getCoordinates();  JsonNode root=null;  try {    JsonParser parser=new ObjectMapper().getFactory().createParser(coords);    root=parser.readValueAsTree();  } catch (  IOException ex) {    throw new RuntimeException("Failed to parse JSON",ex);  }  if (orgUnit.getFeatureType() == FeatureType.POINT) {    primitive=GeoToolsPrimitiveFromJsonFactory.createPointFromJson(root);  } else   if (orgUnit.getFeatureType() == FeatureType.POLYGON) {    primitive=GeoToolsPrimitiveFromJsonFactory.createMultiPolygonFromJson(root);  } else   if (orgUnit.getFeatureType() == FeatureType.MULTI_POLYGON) {    primitive=GeoToolsPrimitiveFromJsonFactory.createMultiPolygonFromJson(root);  } else {    throw new RuntimeException("Not sure what to do with the feature type '" + orgUnit.getFeatureType() + "'");  }  this.geometry=primitive;}  }
class C{  public boolean isMultipleCoordinates(){  return multipleCoordinates;}  }
class C{  public SiteAdminActionBar clickOnButton(final SiteAdminButtons button,final Object pageObject){  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);  return this;}  }
class C{  @Override public boolean converged(final int iteration,final PAIR previous,final PAIR current){  if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {    return true;  }  final double[] p=previous.getKey();  final double[] c=current.getKey();  for (int i=0; i < p.length; ++i) {    final double pi=p[i];    final double ci=c[i];    final double difference=FastMath.abs(pi - ci);    final double size=FastMath.max(FastMath.abs(pi),FastMath.abs(ci));    if (difference > size * getRelativeThreshold() && difference > getAbsoluteThreshold()) {      return false;    }  }  return true;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_DODGED_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201102,skilltarget,skillname);}  }
class C{  private boolean areHostsFilesExistant(){  if (!MainActivity.config.hosts.enabled)   return true;  for (  Configuration.Item item : MainActivity.config.hosts.items) {    File file=FileHelper.getItemFile(getContext(),item);    if (item.state != Configuration.Item.STATE_IGNORE && file != null) {      if (!file.exists())       return false;    }  }  return true;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public EscapedReader(Reader fos){  super(fos);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public JSONObject put(String key,Map value) throws JSONException {  put(key,new JSONObject(value));  return this;}  }
class C{  @Override public void filterOutNonProjectionProperties(final IEntryPacket entryPacket){  if (!_uidsByProjection.containsKey(entryPacket.getUID()))   return;  short pos=_uidsByProjection.get(entryPacket.getUID());  _projections[pos].filterOutNonProjectionProperties(entryPacket);}  }
class C{  public static String convertText(final ConversionMethod method,final String text){switch (method) {case PLAIN:{      return text;    }case HEX_ENCODE:{    return ConversionUtils.stringToHex(text);  }case HEX_DECODE:{  return ConversionUtils.hexToStringNoException(text);}case BASE_64_ENCODE:{return ConversionUtils.stringToBase64(text);}case BASE_64_DECODE:{return ConversionUtils.base64ToString(text);}default :return text;}}  }
class C{  public TemporaryView(Table table,Selection rowSelection){  this.name=table.name();  this.rowMap=rowSelection;  this.table=table;}  }
class C{  public StringRequest(String url,Response.Listener<String> listener,Response.ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private void takeSnapshot(boolean auto){  String xml="";synchronized (Simulation.LOCK) {    xml=XmlGenerator.toXml(this.simulation);  }  Date date=new Date();  String key;  if (auto) {    key=MessageFormat.format(Messages.getString("menu.snapshot.auto"),date);  } else {    key=MessageFormat.format(Messages.getString("menu.snapshot.manual"),date);  }  this.snapshots.put(key,xml);  JMenuItem mnuShot=new JMenuItem(key);  mnuShot.setActionCommand("snapshotRestore");  mnuShot.addActionListener(this);  mnuShot.setIcon(Icons.SNAPSHOT);  this.mnuSnapshot.add(mnuShot);}  }
class C{  public void readSizePrefixedBytes(ByteInputBuffer buffer) throws IOException {  buffer.setSize(readInt());  read(buffer.getBytes(),0,buffer.size());  buffer.rewind();}  }
class C{  private static int unrandomize255State(int randomizedBase256Codeword,int base256CodewordPosition){  int pseudoRandomNumber=((149 * base256CodewordPosition) % 255) + 1;  int tempVariable=randomizedBase256Codeword - pseudoRandomNumber;  return tempVariable >= 0 ? tempVariable : tempVariable + 256;}  }
class C{  public AppsGetCatalogQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_PARTNER_TOO_FAR_FOR_START(String value0){  return new SM_SYSTEM_MESSAGE(1300101,value0);}  }
class C{  private void addDaughters(DecisionNode motherCARTNode,MaryNode currentTreeNode,FeatureArrayIndexer ffi){  if (currentTreeNode == null) {    LeafNode l=new LeafNode.FeatureVectorLeafNode(new FeatureVector[0]);    motherCARTNode.addDaughter(l);    return;  }  if (currentTreeNode.isNode()) {    DecisionNode daughterNode=null;    int numDaughters;    int nextFeatIndex=currentTreeNode.getFeatureIndex();    if (featDef.isByteFeature(nextFeatIndex)) {      numDaughters=featDef.getNumberOfValues(nextFeatIndex);      daughterNode=new DecisionNode.ByteDecisionNode(nextFeatIndex,numDaughters,featDef);    } else {      if (featDef.isShortFeature(nextFeatIndex)) {        numDaughters=featDef.getNumberOfValues(nextFeatIndex);        daughterNode=new DecisionNode.ShortDecisionNode(nextFeatIndex,numDaughters,featDef);      } else {        throw new IllegalArgumentException("Found float feature in FeatureFileIndexer!");      }    }    if (motherCARTNode == null) {      rootNode=daughterNode;      daughterNode.setIsRoot(true);    } else {      motherCARTNode.addDaughter(daughterNode);    }    for (int i=0; i < numDaughters; i++) {      MaryNode nextChild=currentTreeNode.getChild(i);      addDaughters(daughterNode,nextChild,ffi);    }  } else {    FeatureVector[] featureVectors=ffi.getFeatureVectors(currentTreeNode.getFrom(),currentTreeNode.getTo());    LeafNode leaf=new LeafNode.FeatureVectorLeafNode(featureVectors);    if (motherCARTNode == null) {      rootNode=leaf;    } else {      motherCARTNode.addDaughter(leaf);    }  }}  }
class C{  @Override public String encodeSLD(URL resourceLocator,StyledLayerDescriptor sld){  StringWriter out=new StringWriter();  if (sld != null) {    try {      Ysld.encode(sld,out);    } catch (    IOException e) {      ConsoleManager.getInstance().exception(this,e);    }  }  return out.toString();}  }
class C{  private int sequentialForwardSelection(String dataFile,String[] features,int indVarColNumber,int X[],int Y[],double J[],int rowIni,int rowEnd){  double sig[]=new double[Y.length];  int sigIndex[]=new int[Y.length];  double corXplusy[]=new double[Y.length];  double corX;  if (X.length > 0) {    Regression reg=new Regression();    reg.multipleLinearRegression(dataFile,indVarColNumber,X,features,interceptTerm,rowIni,rowEnd);    corX=reg.getCorrelation();  } else   corX=0.0;  for (int i=0; i < Y.length; i++) {    corXplusy[i]=correlationOfNewFeature(dataFile,features,indVarColNumber,X,Y[i],rowIni,rowEnd);    sig[i]=corXplusy[i] - corX;    sigIndex[i]=Y[i];  }  int minSig=MathUtils.getMinIndex(sig);  J[0]=corXplusy[minSig];  J[1]=corX;  int maxSig=MathUtils.getMaxIndex(sig);  J[2]=corXplusy[maxSig];  return sigIndex[maxSig];}  }
class C{  public String[] createNewAddress(){  byte[][] pairs=ECDSAgeneratePublicAndPrivateKey();  byte[] afterhashing=RIPEMD160(SHA256hash(pairs[1]));  byte[] checksum=getCheckSum(SHA256hash(SHA256hash(afterhashing)));  byte[] bitcoinaddress=concateByteArray(afterhashing,checksum);  return new String[]{toHex(pairs[0]),convertPrivateKeytoWIF(pairs[0]),base58encode(bitcoinaddress)};}  }
class C{  private List<WeightedObservedPoint> sortObservations(Collection<WeightedObservedPoint> unsorted){  final List<WeightedObservedPoint> observations=new ArrayList<WeightedObservedPoint>(unsorted);  WeightedObservedPoint curr=observations.get(0);  final int len=observations.size();  for (int j=1; j < len; j++) {    WeightedObservedPoint prec=curr;    curr=observations.get(j);    if (curr.getX() < prec.getX()) {      int i=j - 1;      WeightedObservedPoint mI=observations.get(i);      while ((i >= 0) && (curr.getX() < mI.getX())) {        observations.set(i + 1,mI);        if (i-- != 0) {          mI=observations.get(i);        }      }      observations.set(i + 1,curr);      curr=observations.get(j);    }  }  return observations;}  }
class C{  public LeaseException(){  super();}  }
class C{  public static ConstraintWidget[] computeGroups(ScoutWidget[] list){  list=removeGuidelines(list);  Rectangle[] rectangles=widgetsToRectangles(list);  if (DEBUG) {    System.out.println("widgets = " + list.length);  }  int[] north=new int[list.length - 1];  int[] south=new int[list.length - 1];  int[] west=new int[list.length - 1];  int[] east=new int[list.length - 1];  int count=0;  allPositions(list,north,south,west,east);  north=Utils.sortUnique(north);  south=Utils.sortUnique(south);  east=Utils.sortUnique(east);  west=Utils.sortUnique(west);  ArrayList<ScoutCandidateGroup> candidatesList=new ArrayList<>();  Rectangle groupRectangle=new Rectangle();  for (  int n : north) {    n-=1;    groupRectangle.y=n;    for (    int s : south) {      s+=1;      if (n >= s)       continue;      groupRectangle.height=s - n;      for (      int w : west) {        w-=1;        groupRectangle.x=w;        for (        int e : east) {          e+=1;          if (w >= e)           continue;          groupRectangle.width=e - w;          ScoutCandidateGroup candidateGroup=ScoutCandidateGroup.create(groupRectangle,list,rectangles);          if (candidateGroup != null) {            candidatesList.add(candidateGroup);          }        }      }    }  }  if (DEBUG) {    System.out.println("found " + candidatesList.size() + " candidates");  }  ScoutCandidateGroup[] candidates=candidatesList.toArray(new ScoutCandidateGroup[0]);  for (int i=0; i < candidates.length; i++) {    ScoutCandidateGroup candidate=candidates[i];    if (candidate == null) {      continue;    }    for (int j=i + 1; j < candidates.length; j++) {      if (candidates[j] == null) {        continue;      }      if (candidate.mContainSet.equals(candidates[j].mContainSet)) {        if (candidate.mGroupArea > candidates[j].mGroupArea) {          candidatesList.remove(candidate);          candidates[i]=null;        } else {          candidatesList.remove(candidates[j]);          candidates[j]=null;        }        continue;      }      if (candidate.contains(candidates[j])) {        float outerFraction=candidate.fractionFilled();        float innerFraction=candidates[j].fractionFilled();        if (outerFraction > innerFraction) {          candidatesList.remove(candidates[j]);          candidates[j]=null;          continue;        }      }      if (candidates[j].contains(candidate)) {        float outerFraction=candidates[j].fractionFilled();        float innerFraction=candidate.fractionFilled();        if (outerFraction > innerFraction) {          candidatesList.remove(candidate);          candidates[i]=null;        }      }    }  }  if (DEBUG) {    System.out.println("down to " + candidatesList.size() + " candidates");  }  for (  ScoutCandidateGroup candidate : candidatesList) {    candidate.computeGapAreas();  }  for (int i=0; i < candidatesList.size(); ) {    ScoutCandidateGroup candidate=candidatesList.get(i);    if (!candidate.viable()) {      candidatesList.remove(candidate);    } else {      i++;    }  }  if (DEBUG) {    System.out.println("down to " + candidatesList.size() + " candidates");  }  debugDraw=new Rectangle[candidatesList.size()];  count=0;  if (candidatesList.isEmpty()) {    debugDraw=null;    debugGap=null;    debugBestRect=null;    return null;  }  ScoutCandidateGroup bestCandidate=candidatesList.get(0);  float bestRatio=bestCandidate.calcProb();  for (  ScoutCandidateGroup candidate : candidatesList) {    float ratio=candidate.calcProb();    if (bestRatio < ratio) {      bestCandidate=candidate;      bestRatio=ratio;    }  }  if (DEBUG) {    debugGap=bestCandidate.computeGaps();    debugBestRect=bestCandidate.mRect;    for (    ScoutCandidateGroup candidate : candidatesList) {      String s=(bestCandidate == candidate) ? " *" : " ";      Utils.fwPrint(" " + candidate.mWest + ","+ candidate.mNorth+ ",  ",20);      Utils.fwPrint(candidate.mRect.width + " x " + candidate.mRect.height+ "  ",20);      Utils.fwPrint(" Group: " + candidate.mGroupArea,20);      Utils.fwPrint(" Widgets: " + candidate.mWidgetArea + "("+ candidate.mCount+ ")",20);      Utils.fwPrint(" Gap: " + candidate.mGapArea + "("+ candidate.computeGaps().length+ ")",20);      System.out.println(" fill " + (100 * candidate.calcProb()) + s);      debugDraw[count++]=candidate.mRect;    }    System.out.println("found " + candidatesList.size() + " big candidates");  }  if (bestCandidate.mValidTable) {    return bestCandidate.buildList(list).toArray(new ConstraintWidget[0]);  }  return null;}  }
class C{  public static Role loadByName(String name){  return Helper.load(W.create("name",name),Role.class);}  }
class C{  private boolean applyFilter(){  boolean needsFiltering=collapsed || length(filterText) > 0 || hasLogTypeFilters();  if (needsFiltering) {    if (entryLookup != null) {      entryLookup.clear();    }    useFilteredFromEntries(entries);    return true;  }  return removeFilter();}  }
class C{  public static void checkState(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalStateException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public synchronized ZooKeeperClientBuilder name(String name){  this.name=name;  return this;}  }
class C{  @Override protected double cost(Target target,Unit unit,FeatureDefinition weights,WeightFunc[] weightFunctions){  nCostComputations++;  FeatureVector targetFeatures=target.getFeatureVector();  assert targetFeatures != null : "Target " + target + " does not have pre-computed feature vector";  FeatureVector unitFeatures=featureVectors[unit.index];  int nBytes=targetFeatures.byteValuedDiscreteFeatures.length;  int nShorts=targetFeatures.shortValuedDiscreteFeatures.length;  int nFloats=targetFeatures.continuousFeatures.length;  assert nBytes == unitFeatures.byteValuedDiscreteFeatures.length;  assert nShorts == unitFeatures.shortValuedDiscreteFeatures.length;  assert nFloats == unitFeatures.continuousFeatures.length;  float[] weightVector=weights.getFeatureWeights();  double cost=0;  if (nBytes > 0) {    for (int i=0; i < nBytes; i++) {      if (weightsNonZero[i]) {        float weight=weightVector[i];        if (featureDefinition.hasSimilarityMatrix(i)) {          byte targetFeatValueIndex=targetFeatures.byteValuedDiscreteFeatures[i];          byte unitFeatValueIndex=unitFeatures.byteValuedDiscreteFeatures[i];          float similarity=featureDefinition.getSimilarity(i,unitFeatValueIndex,targetFeatValueIndex);          cost+=similarity * weight;          if (debugShowCostGraph)           cumulWeightedCosts[i]+=similarity * weight;        } else         if (targetFeatures.byteValuedDiscreteFeatures[i] != unitFeatures.byteValuedDiscreteFeatures[i]) {          cost+=weight;          if (debugShowCostGraph)           cumulWeightedCosts[i]+=weight;        }      }    }  }  if (nShorts > 0) {    for (int i=nBytes, n=nBytes + nShorts; i < n; i++) {      if (weightsNonZero[i]) {        float weight=weightVector[i];        if (targetFeatures.shortValuedDiscreteFeatures[i - nBytes] != unitFeatures.shortValuedDiscreteFeatures[i - nBytes]) {          cost+=weight;          if (debugShowCostGraph)           cumulWeightedCosts[i]+=weight;        }      }    }  }  if (nFloats > 0) {    int nDiscrete=nBytes + nShorts;    for (int i=nDiscrete, n=nDiscrete + nFloats; i < n; i++) {      if (weightsNonZero[i]) {        float weight=weightVector[i];        float a=targetFeatures.continuousFeatures[i - nDiscrete];        float b=unitFeatures.continuousFeatures[i - nDiscrete];        if (!(a != a)) {          double myCost;          if (!(b != b)) {            myCost=weightFunctions[i - nDiscrete].cost(a,b);          } else {            myCost=this.MEANING_RATING_RANGE;          }          cost+=weight * myCost;          if (debugShowCostGraph) {            cumulWeightedCosts[i]+=weight * myCost;          }        }      }    }  }  return cost;}  }
class C{  @Override public final void writeShort(final short i){  bos.writeByte((byte)(i & 0xFF));  bos.writeByte((byte)((i >>> 8) & 0xFF));}  }
class C{  @Override public DOMASBuilder createDOMASBuilder(){  return new DOMASBuilderImpl();}  }
class C{  public static final void show(Component parent,String contents){  SampleFileDialog dialog=new SampleFileDialog(parent,contents);  dialog.setLocationRelativeTo(parent);  dialog.setVisible(true);}  }
class C{  public int removeUploads(String accountName){  int result=getDB().delete(ProviderTableMeta.CONTENT_URI_UPLOADS,ProviderTableMeta.UPLOADS_ACCOUNT_NAME + "=?",new String[]{accountName});  Log_OC.d(TAG,"delete returns " + result + " for uploads in "+ accountName);  if (result > 0) {    notifyObserversNow();  }  return result;}  }
class C{  @Nullable @Override public PsiElement resolve(){  String keyword=myElement.getName();  if (keyword == null) {    return null;  }  FunctionStatement function=resolveFunction();  if (function == null) {    return null;  }  Parameter.StarStar kwargsParameter=null;  for (  Parameter param : function.getParameters()) {    if (param instanceof Parameter.StarStar) {      kwargsParameter=(Parameter.StarStar)param;      continue;    }    if (keyword.equals(param.getName())) {      return param;    }  }  if (kwargsParameter != null) {    return kwargsParameter;  }  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_CHARGE_SUCCESS(DescriptionId descriptionId,int level){  return new SM_SYSTEM_MESSAGE(1400887,descriptionId,level);}  }
class C{  private S2Point(final double theta,final double phi,final Vector3D vector){  this.theta=theta;  this.phi=phi;  this.vector=vector;}  }
class C{  public boolean compare(DiphoneUnitDatabase other){  if (sampleRate != other.sampleRate) {    return false;  }  if (numChannels != other.numChannels) {    return false;  }  if (lpcMin != other.lpcMin) {    return false;  }  if (lpcRange != other.lpcRange) {    return false;  }  for (Iterator i=diphoneMap.values().iterator(); i.hasNext(); ) {    Diphone diphone=(Diphone)i.next();    Diphone otherDiphone=other.getUnit(diphone.getName());    if (!diphone.compare(otherDiphone)) {      System.out.println("Diphones differ:");      System.out.println("THis:");      diphone.dump();      System.out.println("Other:");      otherDiphone.dump();      return false;    }  }  return true;}  }
class C{  public boolean isApplicable(){  ChartViewer chartViewer=(ChartViewer)getViewer();  return chartViewer.getChartDrawer() != null && chartViewer.getChartDrawer().canShowXAxis();}  }
class C{  public void pausePlayingAudio(String id){  AudioPlayer audio=this.players.get(id);  if (audio != null) {    audio.pausePlaying();  }}  }
class C{  @Override public boolean equals(Object o){  return ReferentUuids.compare(proxyObject,o);}  }
class C{  public Plan makeSelectPlan(){  Plan p=makeIndexSelectPlan();  if (p == null)   p=tp;  return addSelectPredicate(p);}  }
class C{  public boolean releaseRow(int row){  if (row < 0) {    return false;  } else   if (m_openrows != null && m_openrows.containsKey(row)) {    return false;  } else   if (row == m_curid) {    --m_curid;  } else   if (row == m_firstid) {    ++m_firstid;  } else {    if (m_openrows == null)     m_openrows=new IntIntTreeMap(false);    m_openrows.put(row,row);  }  return true;}  }
class C{  public SimpleStringProperty executionInfoProperty(){  return this.executionInfoProperty;}  }
class C{  public Set<String> toFilenameSet(int iSubset){  HashSet s=new HashSet();  if ((iSubset & FROM_TRAINING_SET) > 0)   for (  Object elem : getTrainingSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  if ((iSubset & FROM_TEST_SET) > 0)   for (  Object elem : getTestSet()) {    CategorizedFileEntry cfeCur=(CategorizedFileEntry)elem;    s.add(cfeCur.getFileName());  }  return s;}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  private void dumpTree(CMNode nodeCur,int level){  for (int index=0; index < level; index++)   System.out.print("   ");  int type=nodeCur.type();switch (type) {case XSModelGroupImpl.MODELGROUP_CHOICE:case XSModelGroupImpl.MODELGROUP_SEQUENCE:{      if (type == XSModelGroupImpl.MODELGROUP_CHOICE)       System.out.print("Choice Node "); else       System.out.print("Seq Node ");      if (nodeCur.isNullable())       System.out.print("Nullable ");      System.out.print("firstPos=");      System.out.print(nodeCur.firstPos().toString());      System.out.print(" lastPos=");      System.out.println(nodeCur.lastPos().toString());      dumpTree(((XSCMBinOp)nodeCur).getLeft(),level + 1);      dumpTree(((XSCMBinOp)nodeCur).getRight(),level + 1);      break;    }case XSParticleDecl.PARTICLE_ZERO_OR_MORE:case XSParticleDecl.PARTICLE_ONE_OR_MORE:case XSParticleDecl.PARTICLE_ZERO_OR_ONE:{    System.out.print("Rep Node ");    if (nodeCur.isNullable())     System.out.print("Nullable ");    System.out.print("firstPos=");    System.out.print(nodeCur.firstPos().toString());    System.out.print(" lastPos=");    System.out.println(nodeCur.lastPos().toString());    dumpTree(((XSCMUniOp)nodeCur).getChild(),level + 1);    break;  }case XSParticleDecl.PARTICLE_ELEMENT:{  System.out.print("Leaf: (pos=" + ((XSCMLeaf)nodeCur).getPosition() + "), "+ "(elemIndex="+ ((XSCMLeaf)nodeCur).getLeaf()+ ") ");  if (nodeCur.isNullable())   System.out.print(" Nullable ");  System.out.print("firstPos=");  System.out.print(nodeCur.firstPos().toString());  System.out.print(" lastPos=");  System.out.println(nodeCur.lastPos().toString());  break;}case XSParticleDecl.PARTICLE_WILDCARD:System.out.print("Any Node: ");System.out.print("firstPos=");System.out.print(nodeCur.firstPos().toString());System.out.print(" lastPos=");System.out.println(nodeCur.lastPos().toString());break;default :{throw new RuntimeException("ImplementationMessages.VAL_NIICM");}}}  }
class C{  @Override public boolean followReturnsPastSeeds(){  return true;}  }
class C{  public CopyOnWriteArrayList(Collection c){  Object[] elements=new Object[c.size()];  int size=0;  for (Iterator itr=c.iterator(); itr.hasNext(); ) {    Object e=itr.next();    elements[size++]=e;  }  setArray(elements);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public PagesSaveAccessQuery edit(PagesSaveAccess value){  return unsafeParam("edit",value);}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public final int computeHashCode(T o){  return o == null ? 0 : o.hashCode();}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public static LSSerializer createLSSerializer(DOMImplementationLS impl,boolean includeXmlDeclaration,boolean enablePrettyPrint){  LSSerializer writer=impl.createLSSerializer();  DOMConfiguration domConfig=writer.getDomConfig();  domConfig.setParameter("xml-declaration",includeXmlDeclaration);  domConfig.setParameter("format-pretty-print",enablePrettyPrint);  return writer;}  }
class C{  @Override public Iterator iterator(){  return new Iterator();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_USE_ITEM(DescriptionId value0){  return new SM_SYSTEM_MESSAGE(1300423,value0);}  }
class C{  private void outputJSON(JsonObject jsonMXDObject,File outputFile){  JsonParser parser=new JsonParser();  Gson gson=new GsonBuilder().setPrettyPrinting().create();  JsonElement el=parser.parse(jsonMXDObject.toString());  String jsonString=gson.toJson(el);  if (outputFile == null) {    logger.info(jsonString.toString());  } else {    BufferedWriter writer=null;    try {      writer=new BufferedWriter(new FileWriter(outputFile.getAbsolutePath()));      writer.write(jsonString);    } catch (    IOException e) {    } finally {      try {        if (writer != null) {          writer.close();        }      } catch (      IOException e) {        e.printStackTrace();      }    }  }}  }
class C{  public IReadBlock next(){  try {    currentCount++;    countReads++;    return ReadBlockRMA2.read(rma2Formatter,classDumpReader.readLong(),wantReadText,wantMatchData,wantMatchText,minScore,maxExpected,textStorageReader,dataIndexReader);  } catch (  IOException e) {    Basic.caught(e);    error=true;    return null;  }}  }
class C{  @Deprecated public static Map<String,Object> filterServiceContext(DispatchContext dctx,String serviceName,Map<String,? extends Object> context) throws GenericServiceException {  return dctx.makeValidContext(serviceName,"IN",context);}  }
class C{  public static void oomEx(){}  }
class C{  public ObjectFactory(){}  }
class C{  public boolean isAmbient(){  return ambient;}  }
class C{  public UsersGetSubscriptionsQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public int hashCode(){  return (int)(hash ^ (hash >>> 32));}  }
class C{  private int doUpdateAllAction(String tableName,ContentValues values,String... conditions){  BaseUtility.checkConditionsCorrect(conditions);  if (values.size() > 0) {    return mDatabase.update(tableName,values,getWhereClause(conditions),getWhereArgs(conditions));  }  return 0;}  }
class C{  public boolean dump_intra(){  return soot.PhaseOptions.getBoolean(options,"dump-intra");}  }
class C{  public String handle(Map<String,List<String>> params,Map<String,Handler> handlers){  StringBuilder sb=new StringBuilder();  sb.append("<html>");  sb.append("<head>");  sb.append("<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">");  sb.append("</head>");  sb.append("<body>");  if (params == null || params.size() == 0) {    sb.append("<h1>Lucene Server</h1>");    sb.append("Available methods:\n");    sb.append("<dd>");    List<String> keys=new ArrayList<String>(handlers.keySet());    Collections.sort(keys);    for (    String key : keys) {      Handler handler=handlers.get(key);      if (handler.binaryRequest()) {        continue;      }      sb.append("<dt><a href=\"/doc?method=");      sb.append(key);      sb.append("\">");      sb.append(escapeHTML(key));      sb.append("</a>");      sb.append("</dt>");      sb.append("<dd>");      sb.append(expandLinks(handler.getTopDoc()));      sb.append("</dd>");    }    sb.append("</dd>");  } else {    String method=params.get("method").get(0);    Handler handler=handlers.get(method);    if (handler == null) {      throw new IllegalArgumentException("unknown method \"" + method + "\"");    }    sb.append("<h1>Lucene Server: ");    sb.append(method);    sb.append("</h1>");    sb.append(expandLinks(handler.getTopDoc()));    sb.append("<br>");    sb.append("<br><b>Parameters</b>:<br>");    StructType type=handler.getType();    Set<StructType> seen=Collections.newSetFromMap(new IdentityHashMap<StructType,Boolean>());    renderStructType(seen,sb,type);  }  sb.append("</body>");  sb.append("</html>");  return sb.toString();}  }
class C{  private String convertToCurrent(String configString){  return configString.replaceAll("<headerType>0<","<headerType>gui<").replaceAll("<headerType>1<","<headerType>console<").replaceAll("jarArgs>","cmdLine>").replaceAll("<jarArgs[ ]*/>","<cmdLine/>").replaceAll("args>","opt>").replaceAll("<args[ ]*/>","<opt/>").replaceAll("<dontUsePrivateJres>false</dontUsePrivateJres>","<jdkPreference>" + Jre.JDK_PREFERENCE_PREFER_JRE + "</jdkPreference>").replaceAll("<dontUsePrivateJres>true</dontUsePrivateJres>","<jdkPreference>" + Jre.JDK_PREFERENCE_JRE_ONLY + "</jdkPreference>").replaceAll("<initialHeapSize>0</initialHeapSize>","").replaceAll("<maxHeapSize>0</maxHeapSize>","").replaceAll("<customProcName>.*</customProcName>","");}  }
class C{  private void updateTabEntriesFromMetadata(byte[] metadataBytes,SparseArray<Entry> entryMap,List<Integer> recentlyClosedTabIdList){  if (metadataBytes != null) {    DocumentList list=null;    try {      list=MessageNano.mergeFrom(new DocumentList(),metadataBytes);    } catch (    IOException e) {      Log.e(TAG,"I/O exception",e);    }    if (list == null)     return;    for (int i=0; i < list.entries.length; i++) {      DocumentEntry savedEntry=list.entries[i];      int tabId=savedEntry.tabId;      if (entryMap.indexOfKey(tabId) < 0) {        recentlyClosedTabIdList.add(tabId);        continue;      }      entryMap.get(tabId).canGoBack=savedEntry.canGoBack;    }  }}  }
class C{  public static void paintSelectionFeedback(NlGraphics graphics,NlComponent parentNode,List<NlComponent> childNodes,boolean showDependents,TextDirection textDirection){  DependencyGraph dependencyGraph=DependencyGraph.get(parentNode);  Set<NlComponent> horizontalDeps=dependencyGraph.dependsOn(childNodes,false);  Set<NlComponent> verticalDeps=dependencyGraph.dependsOn(childNodes,true);  Set<NlComponent> deps=new HashSet<NlComponent>(horizontalDeps.size() + verticalDeps.size());  deps.addAll(horizontalDeps);  deps.addAll(verticalDeps);  if (deps.size() > 0) {    for (    NlComponent node : deps) {      if (childNodes.contains(node)) {        continue;      }      Rectangle bounds=getBounds(node);      graphics.useStyle(DEPENDENCY);      graphics.fillRect(bounds.x,bounds.y,bounds.width,bounds.height);    }  }  for (  NlComponent childNode : childNodes) {    DependencyGraph.ViewData view=dependencyGraph.getView(childNode);    if (view == null) {      continue;    }    if (showDependents) {      paintConstraints(graphics,view.dependedOnBy,textDirection);    }    paintConstraints(graphics,view.dependsOn,textDirection);  }}  }
class C{  Node(PAG pag,Type type){  if (TypeManager.isUnresolved(type))   throw new RuntimeException("Unresolved type " + type);  this.type=type;  this.pag=pag;  replacement=this;}  }
class C{  @Override public void indent(){  _nextIndent+=_format.getIndent();}  }
class C{  private NodeList splitIntoChunks(MaryData rawmaryxml){  if (rawmaryxml == null)   throw new NullPointerException("Received null data");  if (rawmaryxml.getType() != MaryDataType.get("RAWMARYXML"))   throw new IllegalArgumentException("Expected data of type RAWMARYXML, got " + rawmaryxml.getType());  Document doc=rawmaryxml.getDocument();  Element root=doc.getDocumentElement();  TreeWalker tw=((DocumentTraversal)doc).createTreeWalker(root,NodeFilter.SHOW_TEXT,null,false);  Node firstNode=null;  Node lastNode=null;  Node currentNode=null;  while ((currentNode=tw.nextNode()) != null) {    if (currentNode.getNodeType() == Node.TEXT_NODE) {      Text currentTextNode=(Text)currentNode;      if (currentTextNode.getData().trim().length() == 0)       continue;    }    if (!DomUtils.hasAncestor(currentNode,MaryXML.PARAGRAPH)) {      if (firstNode == null)       firstNode=currentNode;      lastNode=currentNode;    } else {      if (firstNode != null) {        String first;        if (firstNode.getNodeType() == Node.TEXT_NODE) {          first=((Text)firstNode).getData();        } else {          first=firstNode.getNodeName();        }        String last;        if (lastNode.getNodeType() == Node.TEXT_NODE) {          last=((Text)lastNode).getData();        } else {          last=lastNode.getNodeName();        }        Log.d(Mary.LOG,"Found text node below paragraph; enclosing from '" + first + "' to '"+ last+ "'");        DomUtils.encloseNodesWithNewElement(firstNode,lastNode,MaryXML.PARAGRAPH);        firstNode=null;        lastNode=null;      }    }  }  if (firstNode != null) {    String first;    if (firstNode.getNodeType() == Node.TEXT_NODE) {      first=((Text)firstNode).getData();    } else {      first=firstNode.getNodeName();    }    String last;    if (lastNode.getNodeType() == Node.TEXT_NODE) {      last=((Text)lastNode).getData();    } else {      last=lastNode.getNodeName();    }    Log.d(Mary.LOG,"Found text node below paragraph; enclosing from '" + first + "' to '"+ last+ "'");    DomUtils.encloseNodesWithNewElement(firstNode,lastNode,MaryXML.PARAGRAPH);  }  return doc.getElementsByTagName(MaryXML.PARAGRAPH);}  }
class C{  public void updateClustering(Table<String,String,Double> seriesAndClass2Value){  if (!inUpdate) {    try {      inUpdate=true;      labelOrder.clear();      previousRectangle=null;      final Taxa taxa;      final Distances distances;switch (type) {case SERIES:{          final String[] series=seriesAndClass2Value.rowKeySet().toArray(new String[seriesAndClass2Value.rowKeySet().size()]);          taxa=new Taxa();          for (          String seriesName : series)           taxa.add(seriesName);          distances=new Distances(taxa.size());          for (int i=0; i < series.length; i++) {            for (int j=0; j < series.length; j++) {              distances.set(i + 1,j + 1,computeCorrelationDistanceBetweenSeries(series[i],series[j],seriesAndClass2Value));            }          }          break;        }case CLASSES:{        final String[] classes=seriesAndClass2Value.columnKeySet().toArray(new String[seriesAndClass2Value.columnKeySet().size()]);        taxa=new Taxa();        for (        String className : classes)         taxa.add(className);        distances=new Distances(taxa.size());        for (int i=0; i < classes.length; i++) {          for (int j=0; j < classes.length; j++) {            distances.set(i + 1,j + 1,computeCorrelationDistanceBetweenClasses(classes[i],classes[j],seriesAndClass2Value));          }        }        break;      }default :    throw new RuntimeException("Invalid case: " + type.toString());}treeView.getGraph().clear();UPGMA.apply(taxa,distances,treeView);flipCoordinates(treeView,rootSide);labelOrder.addAll(getLabelOrder(treeView));}  finally {inUpdate=false;}}}  }
class C{  public static byte[] inputStreamToByteArray(InputStream input,int size) throws IOException {  byte[] buffer=new byte[size];  int bytesRead;  ByteArrayOutputStream output=new ByteArrayOutputStream();  while ((bytesRead=input.read(buffer)) != -1) {    output.write(buffer,0,bytesRead);  }  return output.toByteArray();}  }
class C{  public void handleUnderXtnUpdate(Context context,ServerTransaction xtn,IEntryHolder eh,boolean isCommitting,XtnData pXtn){  IEntryCacheInfo pEntry=getPEntryByUid(eh.getUID());  if (pEntry == null) {    throw new RuntimeException("handleUnderXtnUpdate:internal error-Entry is null UID=" + eh.getUID());  }  if (isCommitting)   insertToRecentUpdatesIfNeeded(eh,requiresEvictionReplicationProtection() ? Long.MAX_VALUE : 0,context.getCommittingXtn());  TypeData typeData=_typeDataMap.get(eh.getServerTypeDesc());  consolidateWithShadowEntry(typeData,pEntry,!isCommitting,false);}  }
class C{  public ScrollObject(){  this.toTop=true;}  }
class C{  protected void loadFeatureFile(String fileName) throws IOException, MaryConfigurationException {  featureFileReader=new FeatureFileReader(fileName);  featureDefinition=featureFileReader.getFeatureDefinition();  phoneFeatureIndex=featureDefinition.getFeatureIndex("phone");  halfphoneLRFeatureIndex=featureDefinition.getFeatureIndex("halfphone_lr");}  }
class C{  public static String hex(float f){  return Integer.toHexString(Float.floatToIntBits(f));}  }
class C{  protected static Dfp expInternal(final Dfp a){  Dfp y=a.getOne();  Dfp x=a.getOne();  Dfp fact=a.getOne();  Dfp py=new Dfp(y);  for (int i=1; i < 90; i++) {    x=x.multiply(a);    fact=fact.divide(i);    y=y.add(x.multiply(fact));    if (y.equals(py)) {      break;    }    py=new Dfp(y);  }  return y;}  }
class C{  public Matrix plus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] + B.A[i][j];    }  }  return X;}  }
class C{  public String toStringInsecure(){  StringBuilder theString=new StringBuilder();  theString.append("[GenericEntity:");  theString.append(getEntityName());  theString.append(']');  for (  String curKey : new TreeSet<String>(fields.keySet())) {    Object curValue=fields.get(curKey);    theString.append('[');    theString.append(curKey);    theString.append(',');    theString.append(curValue);    theString.append('(');    theString.append(curValue != null ? curValue.getClass().getName() : "");    theString.append(')');    theString.append(']');  }  return theString.toString();}  }
class C{  @NotNull public ImageOverlayBuilder mergeImage(@NotNull BufferedImage mergeImage){  return mergeImage(mergeImage,MergeImagesFilter.Position.RIGHT);}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  @Override public void onRequestError(int code,String message){  progressDialog.cancel();  if (code == ConnectAPI.TIMELINE_CODE) {    showMessage(message);  }}  }
class C{  public RequestParams(Map<String,String> source){  init();  if (source != null) {    for (    Map.Entry<String,String> entry : source.entrySet()) {      put(entry.getKey(),entry.getValue());    }  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private boolean checkUnfinishedQuests(QuestStateList qsl){  if (unfinished != null && unfinished.size() > 0) {    for (    Integer questId : unfinished) {      QuestState qs=qsl.getQuestState(questId);      if (qs != null && qs.getStatus() == QuestStatus.COMPLETE) {        return false;      }    }  }  return true;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean removeAll(int[] array){  boolean changed=false;  for (int i=array.length; i-- > 0; ) {    if (remove(array[i])) {      changed=true;    }  }  return changed;}  }
class C{  public static boolean canRender(@Nullable PsiFile file){  return file != null && LayoutPullParserFactory.isSupported(file);}  }
class C{  public Iterator<Unit> iterator(){  if (mBody != null) {    Chain<Unit> units=mBody.getUnits();    return units.iterator(mHead,mTail);  } else {    return null;  }}  }
class C{  UpdateConfig context(Context context){  if (this.context == null) {    this.context=context.getApplicationContext();  }  return this;}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,true,true,false);}  }
class C{  public void Notify(Object oSender,Object oParams){  double dProgress=((Double)oParams).doubleValue();  System.err.print("Comparison " + String.format("%4.2f%%",dProgress) + "\r");}  }
class C{  @Override public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {}  }
class C{  public static String readFileToString(File file) throws IOException {  return readFileToString(file,Charset.defaultCharset());}  }
class C{  public void upload(File file,long restartAt,FTPDataTransferListener listener) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  if (!file.exists()) {    throw new FileNotFoundException(file.getAbsolutePath());  }  InputStream inputStream=null;  try {    inputStream=new FileInputStream(file);  } catch (  IOException e) {    throw new FTPDataTransferException(e);  }  try {    upload(file.getName(),inputStream,restartAt,restartAt,listener);  } catch (  IllegalStateException e) {    throw e;  }catch (  IOException e) {    throw e;  }catch (  FTPIllegalReplyException e) {    throw e;  }catch (  FTPException e) {    throw e;  }catch (  FTPDataTransferException e) {    throw e;  }catch (  FTPAbortedException e) {    throw e;  } finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  private static void writeCigar(DAAMatchRecord match,ByteOutputBuffer buffer){  int n=0, op=0;  for (  CombinedOperation cop : match.getTranscript().gather()) {    if (map[cop.getOpCode()] == op)     n+=cop.getCount(); else {      if (n > 0)       buffer.writeString(String.format("%d",n));      buffer.write((byte)letter[op]);      n=cop.getCount();      op=map[cop.getOpCode()];    }  }  if (n > 0) {    buffer.writeString(String.format("%d",n));    buffer.write((byte)letter[op]);  }}  }
class C{  public Builder addColumnDouble(String name){  return addColumn(new DoubleMetaData(name));}  }
class C{  @Override public int increaseFp(TYPE type,int value){  return this.increaseFp(type,value,0,LOG.REGULAR);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysBlock_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200631,skillcaster,skillname);}  }
class C{  @Override public void endGeneralEntity(String name,Augmentations augs) throws XNIException {}  }
class C{  private void checkForConnectedButUnreachableNodes(){  Log.d(TAG,"Looking for connected but unreachable nodes");  List<String> notReachableNodeIds=app.getReachabilityChecker().getNotReachableNodeIds();  for (  String notReachableNodeId : notReachableNodeIds) {    DataRequest dataRequest=sensorDataRequests.get(notReachableNodeId);    AlertDialog reachabilityDialog=reachabilityDialogs.get(notReachableNodeId);    if (dataRequest == null && reachabilityDialog == null) {      showAppNotRunningDialog(notReachableNodeId);      return;    }  }}  }
class C{  public int writeAnnotationSetRefList(AnnotationSetRefList annotationSetRefList){  int off=data.position();  writeInt(annotationSetRefList.annotationSetRefItems.length);  for (  int annotationSetRefItem : annotationSetRefList.annotationSetRefItems) {    writeInt(annotationSetRefItem);  }  return off;}  }
class C{  public static Drawable toDrawable(byte[] bytes){  return toDrawable(toBitmap(bytes));}  }
class C{  public RepositoryChanged cloneGitRepository(String repoName,String repoRemoteLocation,String repoUserName,String repoPassword,String repoLocations,String branch,boolean useCredentials){  boolean successful=false;  Singleton.getLogger().info("Attempting to clone " + repoRemoteLocation);  try {    CloneCommand cloneCommand=Git.cloneRepository();    cloneCommand.setURI(repoRemoteLocation);    cloneCommand.setDirectory(new File(repoLocations + "/" + repoName+ "/"));    cloneCommand.setCloneAllBranches(true);    cloneCommand.setBranch(branch);    if (useCredentials) {      cloneCommand.setCredentialsProvider(new UsernamePasswordCredentialsProvider(repoUserName,repoPassword));    }    cloneCommand.call();    successful=true;  } catch (  GitAPIException|InvalidPathException ex) {    successful=false;    Singleton.getLogger().warning("ERROR - caught a " + ex.getClass() + " in "+ this.getClass()+ " cloneGitRepository for "+ repoName+ "\n with message: "+ ex.getMessage());  }  RepositoryChanged repositoryChanged=new RepositoryChanged(successful);  repositoryChanged.setClone(true);  return repositoryChanged;}  }
class C{  private TableCellListener(JTable table,int row,int column,Object oldValue,Object newValue){  this.table=table;  this.row=row;  this.column=column;  this.oldValue=oldValue;  this.newValue=newValue;}  }
class C{  private void processBuildFileReferences(SearchParameters params,BuildFile file){  WorkspacePath workspacePath=file.getPackageWorkspacePath();  if (workspacePath == null) {    return;  }  List<String> stringsToSearch=Lists.newArrayList();  if (file.getBlazeFileType() == BlazeFileType.BuildPackage) {    stringsToSearch.add("//" + workspacePath);  } else {    stringsToSearch.add("//" + workspacePath + ":"+ file.getName());    stringsToSearch.add("//" + workspacePath + "/"+ file.getName());  }  for (  String string : stringsToSearch) {    searchForString(params,file,string);  }}  }
class C{  @SuppressWarnings("unchecked") public <T extends Spatial>List<T> descendantMatches(Class<T> spatialSubclass,String nameRegex){  List<T> newList=new ArrayList<T>();  if (getQuantity() < 1) {    return newList;  }  for (int i=0; i < children.size(); i++) {    Spatial child=children.get(i);    if (child.matches(spatialSubclass,nameRegex)) {      newList.add((T)child);    }    if (child instanceof Node) {      newList.addAll(((Node)child).descendantMatches(spatialSubclass,nameRegex));    }  }  return newList;}  }
class C{  public void removeGroups(String[] oldGroups){  testArrayForNullElement(oldGroups);  boolean maybeDiscard;synchronized (registrars) {    if (terminated)     throw new IllegalStateException("discovery terminated");    if (groups == null)     throw new UnsupportedOperationException("can't remove from \"any groups\"");    maybeDiscard=removeGroupsInt(oldGroups);  }  if (maybeDiscard)   maybeDiscardRegistrars();}  }
class C{  public static String[] decorate(IDecoratorComponent[][] format,Map bindings){  StringBuffer prefix=new StringBuffer(80);  StringBuffer suffix=new StringBuffer(80);  for (int iPrefix=0; iPrefix < format[0].length; iPrefix++) {    String value=format[0][iPrefix].getValue(bindings);    if (value != null) {      prefix.append(value);    }  }  for (int iSuffix=0; iSuffix < format[1].length; iSuffix++) {    String value=format[1][iSuffix].getValue(bindings);    if (value != null) {      suffix.append(value);    }  }  return new String[]{prefix.toString(),suffix.toString()};}  }
class C{  @Override public void error(SAXParseException exception){  errorCount++;  if (showErrors && (errorCount + warningCount < maxMessages)) {    message("Error",exception);  }}  }
class C{  private void addTargetPoint(Relation target,float pos,float f0){  Item item=target.appendItem();  item.getFeatures().setFloat("pos",pos);  if (f0 > 500.0) {    item.getFeatures().setFloat("f0",500.0f);  } else   if (f0 < 50.0) {    item.getFeatures().setFloat("f0",50.0f);  } else {    item.getFeatures().setFloat("f0",f0);  }}  }
class C{  protected NewsfeedSaveListQuery title(String value){  return unsafeParam("title",value);}  }
class C{  @Override public boolean converged(final int iteration,final UnivariatePointValuePair previous,final UnivariatePointValuePair current){  if (maxIterationCount != ITERATION_CHECK_DISABLED && iteration >= maxIterationCount) {    return true;  }  final double p=previous.getValue();  final double c=current.getValue();  final double difference=FastMath.abs(p - c);  final double size=FastMath.max(FastMath.abs(p),FastMath.abs(c));  return difference <= size * getRelativeThreshold() || difference <= getAbsoluteThreshold();}  }
