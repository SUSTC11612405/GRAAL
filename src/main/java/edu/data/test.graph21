class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  String newValue=(String)undoRedoObject.getNewValue();  fieldConfigVisitor.populateTextField(FieldIdEnum.WKT,(String)newValue);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_LIGHT_DEATH_TO_B(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400141,value0,value1);}  }
class C{  public void outputComplete(){  final int bufferIndex=(int)(outputCnt % bufferSize);  inputs.set(bufferIndex,null);  outputs.set(bufferIndex,null);  outputCnt++;  outputThreadLock.unlock();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", indexId=").append(indexId);  sb.append(", code=").append(code);  sb.append(", codeText=").append(codeText);  sb.append(", sortNo=").append(sortNo);  sb.append(", editable=").append(editable);  sb.append("]");  return sb.toString();}  }
class C{  public static int calculateSecurityServerCount(int externalsessioncount){  Float f=(externalsessioncount / (float)2000.00);  f=(float)Math.ceil(f);  if (f > 0.0) {    f++;  }  final int i=f.intValue();  return i;}  }
class C{  public int size(){  return q.size();}  }
class C{  private static String encode64(byte[] Input){  int iLen=Input.length;  int oDataLen=(iLen * 4 + 2) / 3;  int oLen=((iLen + 2) / 3) * 4;  char[] out=new char[oLen];  int ip=0;  int op=0;  while (ip < iLen) {    int i0=Input[ip++] & 0xff;    int i1=ip < iLen ? Input[ip++] & 0xff : 0;    int i2=ip < iLen ? Input[ip++] & 0xff : 0;    int o0=i0 >>> 2;    int o1=((i0 & 3) << 4) | (i1 >>> 4);    int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    int o3=i2 & 0x3F;    out[op++]=iota64[o0];    out[op++]=iota64[o1];    out[op]=op < oDataLen ? iota64[o2] : '=';    op++;    out[op]=op < oDataLen ? iota64[o3] : '=';    op++;  }  return new String(out);}  }
class C{  public double distance(Location o){  return Math.sqrt(distanceSquared(o));}  }
class C{  public Tree(){  super(new Table(),false);}  }
class C{  static short readShort(final byte[] b,final int index){  return (short)(((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF));}  }
class C{  public static void syncCollapsedFromSummaryToTaxonomyViewer(DataTable table,MainViewer mainViewer){  Document doc=mainViewer.getDir().getDocument();  mainViewer.getCollapsedIds().clear();  if (table.getCollapsed(ClassificationType.Taxonomy.toString()) != null)   mainViewer.getCollapsedIds().addAll(table.getCollapsed(ClassificationType.Taxonomy.toString()));}  }
class C{  public boolean write(byte[] bytes,int offset,int size){  try {    os.write(bytes,offset,size);  } catch (  IOException ioe) {    return false;  }  return true;}  }
class C{  public static MutableContextSet singleton(String key,String value){  MutableContextSet set=new MutableContextSet();  set.add(key,value);  return set;}  }
class C{  public boolean isEdgeUnit(int i){  return units[i].isEdgeUnit();}  }
class C{  private static boolean visitNodesToUseRec(ViewerBase viewer,Node v,NodeSet toUse){  boolean use=viewer.getSelected(v);  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    if (visitNodesToUseRec(viewer,e.getTarget(),toUse))     use=true;  }  if (use)   toUse.add(v);  return use;}  }
class C{  private void requestCollectionPhotos(Context context,Collection collection,int page,boolean refresh){  listener=new OnRequestPhotosListener(context,page,refresh);  model.getService().requestCollectionPhotos(collection,page,Mysplash.DEFAULT_PER_PAGE,listener);}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  public BlockRealMatrix(final int rows,final int columns,final double[][] blockData,final boolean copyArray) throws MathIllegalArgumentException {  super(rows,columns);  this.rows=rows;  this.columns=columns;  blockRows=(rows + BLOCK_SIZE - 1) / BLOCK_SIZE;  blockColumns=(columns + BLOCK_SIZE - 1) / BLOCK_SIZE;  if (copyArray) {    blocks=new double[blockRows * blockColumns][];  } else {    blocks=blockData;  }  int index=0;  for (int iBlock=0; iBlock < blockRows; ++iBlock) {    final int iHeight=blockHeight(iBlock);    for (int jBlock=0; jBlock < blockColumns; ++jBlock, ++index) {      if (blockData[index].length != iHeight * blockWidth(jBlock)) {        throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,blockData[index].length,iHeight * blockWidth(jBlock));      }      if (copyArray) {        blocks[index]=blockData[index].clone();      }    }  }}  }
class C{  public MessagesDeleteChatPhotoQuery(VkApiClient client,UserActor actor,int chatId){  super(client,"messages.deleteChatPhoto",DeleteChatPhotoResponse.class);  accessToken(actor.getAccessToken());  chatId(chatId);}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  @Override protected void initializeDocument(){  DocumentBuilderFactory fact=DocumentBuilderFactory.newInstance();  fact.setNamespaceAware(true);  fact.setValidating(false);  fact.setExpandEntityReferences(!params.protectEntityRef);  DocumentBuilder docBuilder;  try {    docBuilder=fact.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    throw new OkapiIOException(e);  }  docBuilder.setEntityResolver(new DefaultEntityResolver());  input.setEncoding("UTF-8");  BOMNewlineEncodingDetector detector=new BOMNewlineEncodingDetector(input.getStream(),input.getEncoding());  detector.detectAndRemoveBom();  if (detector.isAutodetected()) {    encoding=detector.getEncoding();    if ((encoding.equals("UTF-16LE")) || (encoding.equals("UTF-16BE"))) {      encoding="UTF-16";    }    input.setEncoding(encoding);  }  try {    InputSource is=new InputSource(input.getStream());    is.setEncoding(encoding);    doc=docBuilder.parse(is);  } catch (  SAXException e) {    throw new OkapiIOException("Parsing error.\n" + e.getMessage(),e);  }catch (  IOException e) {    throw new OkapiIOException("IO Error when reading the document.\n" + e.getMessage(),e);  }  encoding=doc.getXmlEncoding();  if (encoding == null) {    encoding=detector.getEncoding();  }  srcLang=input.getSourceLocale();  if (srcLang == null) {    throw new NullPointerException("Source language not set.");  }  hasUTF8BOM=detector.hasUtf8Bom();  lineBreak=detector.getNewlineType().toString();  if (input.getInputURI() != null) {    docName=input.getInputURI().getPath();  }}  }
class C{  private void initEditPermissionListener(View shareView){  mOnEditPermissionInteractionListener=new OnEditPermissionInteractionListener();  ((SwitchCompat)shareView.findViewById(R.id.shareViaLinkEditPermissionSwitch)).setOnCheckedChangeListener(mOnEditPermissionInteractionListener);}  }
class C{  public static Date nowMinusDuration(String duration){  Duration dr=DateUtils.getDuration(duration);  LocalDateTime time=LocalDateTime.now().minus(dr);  return DateUtils.getDate(time);}  }
class C{  @Override public void updateValue(final T tag,final Object value,final String valueDesc){  AbstractTagCacheObject abstractTag=(AbstractTagCacheObject)tag;  abstractTag.setValue(value);  if (valueDesc != null) {    if (valueDesc.length() > MAX_DESC_LENGTH) {      LOGGER.warn("Detected oversized value description for tag " + tag.getId() + " - is being truncated (max size is set at "+ MAX_DESC_LENGTH+ ")");      abstractTag.setValueDescription(valueDesc.substring(0,MAX_DESC_LENGTH));    } else {      abstractTag.setValueDescription(valueDesc);    }  } else {    if (abstractTag.getValueDictionary() != null) {      abstractTag.setValueDescription(abstractTag.getValueDictionary().getDescription(value));    } else {      abstractTag.setValueDescription(null);    }  }}  }
class C{  protected AdsAddOfficeUsersQuery data(String value){  return unsafeParam("data",value);}  }
class C{  protected BoardGetTopicsQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  @Override public int hashCode(){  int result=1;  final Iterator<?> iter=iterator();  while (iter.hasNext())   result=31 * result + Objects.hashCode(iter.next());  return result;}  }
class C{  static public InputStream resolveClusterXSLSchema(String _clusterMembers) throws ClusterConfigurationException {  Document clusterXMLDocumet;  String schemaNameToBeUsed=null;  InputStream membersStream=ResourceLoader.findClusterXML(_clusterMembers);  try {    clusterXMLDocumet=XmlUtils.getDocumentBuilder().parse(membersStream);    schemaNameToBeUsed=ClusterXML.getNodeValueIfExists(clusterXMLDocumet.getDocumentElement(),ClusterXML.CLUSTER_SCHEMA_NAME_TAG);  } catch (  SAXException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }catch (  ParserConfigurationException e) {    e.printStackTrace();  }  InputStream schemaInputStream;  if (JSpaceUtilities.isEmpty(schemaNameToBeUsed)) {    String missingSchemaMsg="Could not find the <cluster-schema-name> tag for cluster members xml file: " + _clusterMembers;    throw new ClusterConfigurationException(missingSchemaMsg);  }  String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + Constants.Schemas.SCHEMAS_FOLDER+ "/"+ schemaNameToBeUsed+ ClusterXML.CLUSTER_SCHEMA_XSL_FILE_SUFFIX;  schemaInputStream=getResourceStream(schemaFilePath);  if (schemaInputStream != null) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine("Loaded the cluster xsl schema < " + getResourceURL(schemaFilePath) + " > for the cluster config setup.");    }    return schemaInputStream;  } else {    String missingSchemaMsg="Could not find the cluster xsl schema file: " + schemaFilePath;    throw new ClusterConfigurationException(missingSchemaMsg);  }}  }
class C{  public DistributedLogNamespaceBuilder featureProvider(FeatureProvider featureProvider){  this._featureProvider=featureProvider;  return this;}  }
class C{  public void removeTableBlocks(List<String> segmentsToBeRemoved,AbsoluteTableIdentifier absoluteTableIdentifier){  Object lockObject=tableLockMap.get(absoluteTableIdentifier);  if (null == lockObject) {    return;  }  Map<BlockInfo,AbstractIndex> map=tableBlocksMap.get(absoluteTableIdentifier);  if (null == map || map.isEmpty()) {    return;  }  Map<String,List<BlockInfo>> segmentIdToBlockInfoMap=segmentIdToBlockListMap.get(absoluteTableIdentifier);  if (null == segmentIdToBlockInfoMap || segmentIdToBlockInfoMap.isEmpty()) {    return;  }synchronized (lockObject) {    for (    String segmentId : segmentsToBeRemoved) {      List<BlockInfo> tableBlockInfoList=segmentIdToBlockInfoMap.remove(segmentId);      if (null == tableBlockInfoList) {        continue;      }      Iterator<BlockInfo> tableBlockInfoIterator=tableBlockInfoList.iterator();      while (tableBlockInfoIterator.hasNext()) {        BlockInfo info=tableBlockInfoIterator.next();        map.remove(info);      }    }  }}  }
class C{  public IObjectInfo<T> storeBeforeCeiling(IObjectInfo<T> theCeiling,T subject){  return storeBeforeCeiling_impl((ObjectInfo<T>)theCeiling,subject);}  }
class C{  private Map mapRegToGroups(ServiceRegistrar reg,String[] curGroups){  HashMap groupsMap=new HashMap(1);  groupsMap.put(reg,curGroups);  return groupsMap;}  }
class C{  public float distanceSquared(Vector3f v){  double dx=x - v.x;  double dy=y - v.y;  double dz=z - v.z;  return (float)(dx * dx + dy * dy + dz * dz);}  }
class C{  public void save(String fileName) throws IOException {  try (BufferedWriter w=new BufferedWriter(new FileWriter(fileName),1000000)){    for (    String key : keySet()) {      Integer value=get(key);      if (value != null)       w.write(key + "\t" + value+ "\n");    }  } }  }
class C{  public Matrix4f(float m00,float m01,float m02,float m03,float m10,float m11,float m12,float m13,float m20,float m21,float m22,float m23,float m30,float m31,float m32,float m33){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m03=m03;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m13=m13;  this.m20=m20;  this.m21=m21;  this.m22=m22;  this.m23=m23;  this.m30=m30;  this.m31=m31;  this.m32=m32;  this.m33=m33;}  }
class C{  protected void finalize(){  release();}  }
class C{  public final TestSubscriber<T> await(){  if (cdl.getCount() == 0) {    return this;  }  try {    cdl.await();  } catch (  InterruptedException ex) {    throw new AssertionError("Wait interrupted",ex);  }  return this;}  }
class C{  @DataProvider(name="repeatDataProvider") public Iterator<Object[]> repeatDataProvider(){  Collection<Object[]> dp=new ArrayList<>(experimentCount);  for (int count=0; count < experimentCount; count++) {    dp.add(new Object[]{count});  }  return dp.iterator();}  }
class C{  public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){  this.fontRendererObj.drawString(this.name,8,6,4210752);  this.fontRendererObj.drawString(this.playerInventory.getDisplayName().getUnformattedText(),8,this.ySize - 96 + 2,4210752);}  }
class C{  private int computeAudioSize(HTSPStream mcepPst,HMMData htsData){  return mcepPst.getT() * htsData.getFperiod();}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  public static void unpublishAllServices() throws RpcException {  try {    ServicePublisher.unpublishAllServices();  } catch (  RegistryException e) {    throw new RpcException("error while unpublishing all services",e);  }}  }
class C{  public DownloadConfiguration(){  maxThreadNum=DEFAULT_MAX_THREAD_NUMBER;  threadNum=DEFAULT_THREAD_NUMBER;}  }
class C{  public Set<String> groupFields(){  return groupFields;}  }
class C{  public AuditLogEntry(Calendar time,UserInfo user,AuditLogAction action,ExperimentBase experiment,Bucket.Label bucketLabel,String changedProperty,String before,String after){  this(time,user,action,experiment == null ? null : experiment.getApplicationName(),experiment == null ? null : experiment.getLabel(),experiment == null ? null : experiment.getID(),bucketLabel,changedProperty,before,after);}  }
class C{  public static void warn(@Nullable Class<?> caller,String message,Object... args){  android.util.Log.w(tag(caller),String.format(Locale.ENGLISH,message,args));}  }
class C{  public void sort(int fromIndex,int toIndex){  Arrays.sort(_data,fromIndex,toIndex);}  }
class C{  public Builder attributionControl(Boolean attributionControl){  this.attributionControl=attributionControl;  return this;}  }
class C{  private void extractJobDefinitionsFromStageDefinitions(List<StageDefinition> stageDefinitions,List<JobDefinition> jobDefinitions){  for (  StageDefinition stageDefinition : stageDefinitions) {    List<JobDefinition> jobDefinitionsList=stageDefinition.getJobDefinitions();    jobDefinitions.addAll(jobDefinitionsList);  }}  }
class C{  public boolean onPaint(ViewTransform transform,Graphics2D g){  ArrayList<Animation> finished=new ArrayList<Animation>();  for (  Animation animation : mAnimations) {    if (!animation.step()) {      finished.add(animation);    }    animation.onPaint(transform,g);  }  boolean needsRepaint=mAnimations.size() > 0;  for (  Animation animation : finished) {    mAnimations.remove(animation);  }  return needsRepaint;}  }
class C{  public static void assertGTest(final double[] expected,long[] observed,double alpha){  if (gTest(expected,observed) < alpha) {    StringBuilder msgBuffer=new StringBuilder();    DecimalFormat df=new DecimalFormat("#.##");    msgBuffer.append("G test failed");    msgBuffer.append(" p-value = ");    msgBuffer.append(gTest(expected,observed));    msgBuffer.append(". \n");    msgBuffer.append("value\texpected\tobserved\n");    for (int i=0; i < expected.length; i++) {      msgBuffer.append(df.format(expected[i]));      msgBuffer.append("\t\t");      msgBuffer.append(observed[i]);      msgBuffer.append("\n");    }    msgBuffer.append("This test can fail randomly due to sampling error with probability ");    msgBuffer.append(alpha);    msgBuffer.append(".");    Assert.fail(msgBuffer.toString());  }}  }
class C{  public synchronized void clear(){  this.value=0;  this.released=false;}  }
class C{  @Override public void addId(String name){  if (fIdIdrefChecking) {    super.addId(name);  }}  }
class C{  @deprecated public RbnfScannerProviderImpl(){  this.cache=new HashMap();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ElementValuePair fullCopy(){  ElementValuePair tree=(ElementValuePair)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static boolean canRun(){  if (ourInitialCheck == null) {    ourInitialCheck=checkHaxmInstallation();  }switch (ourInitialCheck) {case NO_EMULATOR_INSTALLED:case UNKNOWN_ERROR:    return SystemInfo.isMac || SystemInfo.isWindows;case NOT_ENOUGH_MEMORY:case ALREADY_INSTALLED:  return false;default :switch (ourInitialCheck.getSolution()) {case INSTALL_HAXM:case REINSTALL_HAXM:  return true;default :return false;}}}  }
class C{  protected void noteAddition(K key,V newValue){  for (  CacheListener<K,V> listener : listeners) {    listener.noteKeyAddition(this,key,newValue);  }}  }
class C{  public FactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public void endHeader() throws IOException {  write("\r\n");}  }
class C{  public boolean topAllowed(){  return (myFlags & TOP_EDGE) != 0;}  }
class C{  private void sendRegistrationToServer(String token){}  }
class C{  private void sendNotification(String messageBody){  Intent intent=new Intent(this,MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.mipmap.ic_launcher).setContentTitle("FCM Message").setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){  String jobName=clazz.getName();  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();  JobDetail job=new JobDetail(jobName,jobGroup,clazz);  job.setDurability(false);  job.setVolatility(true);  job.setDescription(jobName);  try {    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);    if (scheduler == null) {      if (schedulerProperties == null) {        schedulerProperties=getDefaultSchedulerProperties();      }      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();      scheduler.start();    }    Date date=scheduler.scheduleJob(job,trigger);    Logger.info(this,"Scheduled job " + jobName + ", next trigger is on "+ date);  } catch (  ParseException e) {    Logger.error(this,"Cron expression '" + cronExpression + "' has an exception. Throwing IllegalArgumentException",e);    throw new IllegalArgumentException(e);  }catch (  SchedulerException e) {    Logger.error(this,"Unable to schedule job " + jobName,e);  }}  }
class C{  public void save(){  PreferenceStore prefs=getPreferenceStore();synchronized (DdmsPreferenceStore.class) {    try {      prefs.save();    } catch (    IOException ioe) {    }  }}  }
class C{  public Vector2f add(Vector2f vec,Vector2f result){  if (null == vec) {    logger.warning("Provided vector is null, null returned.");    return null;  }  if (result == null) {    result=new Vector2f();  }  result.x=x + vec.x;  result.y=y + vec.y;  return result;}  }
class C{  public void clearPayment(int index){  paymentInfo.remove(index);}  }
class C{  public NaturalRanking(TiesStrategy tiesStrategy){  super();  this.tiesStrategy=tiesStrategy;  nanStrategy=DEFAULT_NAN_STRATEGY;  randomData=new RandomDataGenerator();}  }
class C{  protected TableViewer createTable(Composite parent,int span){  Table table=new Table(parent,SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER| SWT.SINGLE| SWT.FULL_SELECTION);  GridData data=new GridData(GridData.FILL_BOTH | GridData.GRAB_HORIZONTAL);  data.horizontalSpan=span;  table.setLayoutData(data);  TableLayout layout=new TableLayout();  layout.addColumnData(new ColumnWeightData(100,true));  table.setLayout(layout);  TableColumn col=new TableColumn(table,SWT.NONE);  col.setResizable(true);  return new TableViewer(table);}  }
class C{  public static <T extends Writable>T clone(T orig,Configuration conf){  try {    @SuppressWarnings("unchecked") T newInst=ReflectionUtils.newInstance((Class<T>)orig.getClass(),conf);    ReflectionUtils.copy(conf,orig,newInst);    return newInst;  } catch (  IOException e) {    throw new RuntimeException("Error writing/reading clone buffer",e);  }}  }
class C{  public static String convertURLToFile(URL url){  try {    int length=FILE_PREFIX.length();    if (OSValidator.isWindows()) {      length=WINDOWS_FILE_PREFIX.length();    }    String urlString=url.toString().substring(length);    return java.net.URLDecoder.decode(urlString,UTF_8_ENCODING);  } catch (  UnsupportedEncodingException e) {    ConsoleManager.getInstance().exception(ExternalFilenames.class,e);    return null;  }}  }
class C{  public static <E>boolean isNotEmpty(CharSequence c){  return ((c != null) && (c.length() > 0));}  }
class C{  public static void printThreadInfo(PrintWriter stream,String title){  final int STACK_DEPTH=20;  boolean contention=threadBean.isThreadContentionMonitoringEnabled();  long[] threadIds=threadBean.getAllThreadIds();  stream.println("Process Thread Dump: " + title);  stream.println(threadIds.length + " active threads");  for (  long tid : threadIds) {    ThreadInfo info=threadBean.getThreadInfo(tid,STACK_DEPTH);    if (info == null) {      stream.println("  Inactive");      continue;    }    stream.println("Thread " + getTaskName(info.getThreadId(),info.getThreadName()) + ":");    Thread.State state=info.getThreadState();    stream.println("  State: " + state);    stream.println("  Blocked count: " + info.getBlockedCount());    stream.println("  Waited count: " + info.getWaitedCount());    if (contention) {      stream.println("  Blocked time: " + info.getBlockedTime());      stream.println("  Waited time: " + info.getWaitedTime());    }    if (state == Thread.State.WAITING) {      stream.println("  Waiting on " + info.getLockName());    } else     if (state == Thread.State.BLOCKED) {      stream.println("  Blocked on " + info.getLockName());      stream.println("  Blocked by " + getTaskName(info.getLockOwnerId(),info.getLockOwnerName()));    }    stream.println("  Stack:");    for (    StackTraceElement frame : info.getStackTrace()) {      stream.println("    " + frame.toString());    }  }  stream.flush();}  }
class C{  public ExponentialBackoffScheduler(String packageName,Context context,long baseMilliseconds,long maxMilliseconds){  mPreferencePackage=packageName;  mContext=context;  mBaseMilliseconds=baseMilliseconds;  mMaxMilliseconds=maxMilliseconds;}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public long cookie(){  return cookie;}  }
class C{  @Nonnull public DataBuilder appendBrowserPattern(@Nonnull final BrowserPattern pattern){  Check.notNull(pattern,"pattern");  if (!browserPatterns.containsKey(pattern.getId())) {    browserPatterns.put(pattern.getId(),new TreeSet<BrowserPattern>(BROWSER_PATTERN_COMPARATOR));  }  browserPatterns.get(pattern.getId()).add(pattern);  return this;}  }
class C{  public static Date parseTimestamp(@Nullable String string){  Date date=null;  try {    if (string != null) {      date=ISO8601Utils.parse(string,new ParsePosition(0));    }  } catch (  ParseException e) {    throw Throwables.propagate(e);  }  return date;}  }
class C{  private AudioInputStream synthesizeImposedIntonation(AudioFileFormat aft,Element domElement) throws SynthesisException {  SourceTargetPair imposeF0Data=vSelector.getBestCandidatePairtoImposeF0(domElement);  int targetIndex=imposeF0Data.getTargetUnitIndex();  int sourceIndex=imposeF0Data.getSourceUnitIndex();  Log.d(Mary.LOG,"Synthesizing candidate " + sourceIndex + " with intonation contour "+ targetIndex);  if (targetIndex == sourceIndex) {    return synthesizeSelectedVocalization(sourceIndex,aft,domElement);  }  return imposeF0ContourOnVocalization(sourceIndex,targetIndex,aft,domElement);}  }
class C{  protected NotesRestoreCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  @POST @Path("{experimentID}/events") @Produces(TEXT_PLAIN) @ApiOperation(value="Export all event records for an experiment",notes="Download all event records for a given experiment in a tab-delimited text format.",response=StreamingOutput.class) @Timed public Response exportActions(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,final Parameters parameters,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),READ);  StreamingOutput stream=export.getEventStream(experimentID,parameters);  return httpHeader.headers().header("Content-Disposition","attachment; filename=\"events.csv\"").entity(stream).type(TEXT_PLAIN).build();}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REAL_WEATHER\"";  db.execSQL(sql);}  }
class C{  protected ShoppingCartItem(Delegator delegator,String itemTypeId,String description,String categoryId,BigDecimal basePrice,Map<String,Object> attributes,String prodCatalogId,Locale locale,ShoppingCart.ShoppingCartItemGroup itemGroup){  this.delegator=delegator;  this.itemType=itemTypeId;  this.itemGroup=itemGroup;  this.itemDescription=description;  this.productCategoryId=categoryId;  if (basePrice != null) {    this.setBasePrice(basePrice);    this.setDisplayPrice(basePrice);  }  this.attributes=(attributes == null ? new HashMap<String,Object>() : attributes);  this.prodCatalogId=prodCatalogId;  this.delegatorName=delegator.getDelegatorName();  this.locale=locale;}  }
class C{  public void add(double[] point) throws IllegalArgumentException {  if (point == null || point.length != dimension)   throw new IllegalArgumentException("data point must not be a null value and dimension must agree");  for (int i=0; i < dimension; i++) {    if (point[i] > max[i])     max[i]=point[i];    if (point[i] < min[i])     min[i]=point[i];  }  Matrix x=new Matrix(point,dimension);  sum.plusEquals(x);  squaredSum.plusEquals(x.pow(2.0d));  data[numberElements]=x;  numberElements++;  if (numberElements == data.length)   resize();}  }
class C{  public void onException(JMSException je){  this.setConnected(false);  Debug.logError(je,"JMS connection exception",module);  while (!isConnected()) {    try {      this.refresh();    } catch (    GenericServiceException e) {      try {        Thread.sleep(10000);      } catch (      InterruptedException ie) {      }      continue;    }  }}  }
class C{  public static void freqt(double c1[],int m1,double c2[],int m2,double a){  double b=1 - a * a;  double freqt_buff[]=new double[(m2 + m2 + 2)];  int g=m2 + 1;  for (int i=-m1; i <= 0; i++) {    if (0 <= m2)     freqt_buff[g + 0]=c1[-i] + a * (freqt_buff[0]=freqt_buff[g + 0]);    if (1 <= m2)     freqt_buff[g + 1]=b * freqt_buff[0] + a * (freqt_buff[1]=freqt_buff[g + 1]);    for (int j=2; j <= m2; j++)     freqt_buff[g + j]=freqt_buff[j - 1] + a * ((freqt_buff[j]=freqt_buff[g + j]) - freqt_buff[g + j - 1]);  }  System.arraycopy(freqt_buff,g,c2,0,m2);}  }
class C{  public static boolean isDirectlyInPackage(@NotNull String qualifiedName,@NotNull String packagePrefix){  return qualifiedName.startsWith(packagePrefix) && qualifiedName.indexOf('.',packagePrefix.length() + 1) == -1;}  }
class C{  public Builder translationY(float translationY){  this.translationY=translationY;  return this;}  }
class C{  protected int findKnot(double[] knots,double x){  if (x < knots[0] || x >= knots[knots.length - 1]) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,x,knots[0],knots[knots.length - 1]);  }  for (int i=0; i < knots.length; i++) {    if (knots[i] > x) {      return i - 1;    }  }  throw new MathIllegalStateException(LocalizedCoreFormats.ILLEGAL_STATE);}  }
class C{  Delta newMovePlacementStart(Storage src,String destUuid,String destPlacement,int destShardsLog2){  return Deltas.mapBuilder().update(STORAGE.key(),Deltas.mapBuilder().update(src.getUuidString(),Deltas.mapBuilder().put(Storage.MOVE_TO.key(),destUuid).put(Storage.IS_PLACEMENT_MOVE.key(),true).build()).put(destUuid,storageAttributesBuilder(destPlacement,destShardsLog2,src.isFacade()).put(StorageState.MIRROR_CREATED.getMarkerAttribute().key(),now()).put(Storage.GROUP_ID.key(),src.getGroupId()).put(Storage.IS_PLACEMENT_MOVE.key(),true).build()).build()).build();}  }
class C{  public void clearValues(){  mDataSets.clear();  notifyDataChanged();}  }
class C{  @Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {}  }
class C{  public synchronized void addSuggest(String name,JSONObject o){  suggestSaveState.put(name,o);}  }
class C{  public void connect(Presence presence) throws IOException, InterruptedException {  if (presence == Presence.OFFLINE) {    throw new IllegalArgumentException("Presence can't be set to offline. Use HIDDEN if you want to connect without being visible.");  }  if (connecting || connected) {    return;  }  connected=true;  connecting=true;  logger.fine("Connecting to Skype");  reset();  webConnector.start();  getSelf().setPresence(presence,false);  notifConnector.connect();  connecting=false;  if (exceptionDuringConnection != null) {    throw new IOException(exceptionDuringConnection);  }}  }
class C{  protected PhotosDeleteAlbumQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  @Override public void reset() throws IOException {  fOffset=0;  fSurrogate=-1;}  }
class C{  FilterType(final int number){  this.number=number;}  }
class C{  public static boolean isNotNull(final String element){  boolean isNotNull=false;  if (element != null && !element.isEmpty()) {    isNotNull=true;  }  return isNotNull;}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.release();    camera=null;  }}  }
class C{  @Nullable public static AttributeSnapshot createAttributeSnapshot(@NotNull XmlAttribute psiAttribute){  String localName=psiAttribute.getLocalName();  String namespace=psiAttribute.getNamespace();  String prefix=psiAttribute.getNamespacePrefix();  String value=psiAttribute.getValue();  if (value != null && DataBindingUtil.isBindingExpression(value)) {    value=DataBindingUtil.getBindingExprDefault(psiAttribute);    if (value == null) {      return null;    }  }  return new AttributeSnapshot(namespace,prefix,localName,value);}  }
class C{  public HeadRuleMap(InputStream in){  BufferedReader reader=IOUtils.createBufferedReader(in);  String line, pTag, dir, rule;  String[] tmp;  try {    while ((line=reader.readLine()) != null) {      tmp=P_COLUMN.split(line);      pTag=tmp[0];      dir=tmp[1];      rule=tmp[2];      put(pTag,new HeadRule(dir,rule));    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public JUnindentAction(){  super("JUNINDENT");}  }
class C{  public LexiconImpl(URL compiledURL,URL addendaURL,URL letterToSoundURL,boolean binary){  this();  setLexiconParameters(compiledURL,addendaURL,letterToSoundURL,binary);}  }
class C{  protected boolean readFields(DataInputStream d) throws IOException {  field_info fi;  int i;  fields=new field_info[fields_count];  for (i=0; i < fields_count; i++) {    fi=new field_info();    fi.access_flags=d.readUnsignedShort();    fi.name_index=d.readUnsignedShort();    fi.descriptor_index=d.readUnsignedShort();    fi.attributes_count=d.readUnsignedShort();    if (fi.attributes_count > 0) {      fi.attributes=new attribute_info[fi.attributes_count];      readAttributes(d,fi.attributes_count,fi.attributes);    }    fields[i]=fi;  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCHeal_Instant_HEAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200699,num0,skillcaster,skillname);}  }
class C{  protected AppsGetScoreQuery userId(int value){  return unsafeParam("user_id",value);}  }
class C{  void simplifyLoad(){  Iterator it=(new LinkedList(nodes)).iterator();  while (it.hasNext()) {    PurityNode p=(PurityNode)it.next();    Map<String,PurityNode> fmap=new HashMap<String,PurityNode>();    Iterator itt=(new LinkedList(edges.get(p))).iterator();    while (itt.hasNext()) {      PurityEdge e=(PurityEdge)itt.next();      PurityNode tgt=e.getTarget();      if (!e.isInside() && !tgt.equals(p)) {        String f=e.getField();        if (fmap.containsKey(f) && nodes.contains(fmap.get(f)))         mergeNodes(tgt,fmap.get(f)); else         fmap.put(f,tgt);      }    }  }  if (doCheck)   sanityCheck();}  }
class C{  public AuditDetails(){  InetAddress localHost=SystemInfo.singleton().network().getHost();  host=localHost.getHostName() + "/" + localHost.getHostAddress();}  }
class C{  private boolean quickReject(ServerEntry entry){  for (int i=0; i < _fieldsValues.length; i++) {    Object templateFieldValue=_fieldsValues[i];    if (templateFieldValue == null)     continue;    Object entryFieldValue=entry.getFixedPropertyValue(i);    if (entryFieldValue == null)     return true;    if (templateFieldValue == entryFieldValue)     continue;    if (templateFieldValue.hashCode() != entryFieldValue.hashCode())     return true;  }  return false;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ContinueStmt fullCopy(){  ContinueStmt tree=(ContinueStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected void assertResultsPresentInDataResponse(String url,String... expectedResourceIds) throws JsonProcessingException, IOException {  int numberOfResultsExpected=expectedResourceIds.length;  CloseableHttpResponse response=executeRequest(new HttpGet(SERVER_URL_PREFIX + url),HttpStatus.SC_OK);  JsonNode dataNode=objectMapper.readTree(response.getEntity().getContent()).get("data");  closeResponse(response);  assertEquals(numberOfResultsExpected,dataNode.size());  List<String> toBeFound=new ArrayList<String>(Arrays.asList(expectedResourceIds));  Iterator<JsonNode> it=dataNode.iterator();  while (it.hasNext()) {    String id=it.next().get("id").textValue();    toBeFound.remove(id);  }  assertTrue("Not all expected ids have been found in result, missing: " + StringUtils.join(toBeFound,", "),toBeFound.isEmpty());}  }
class C{  public String toString(){  return new String(getType() + " Control");}  }
class C{  public boolean profiling(){  return soot.PhaseOptions.getBoolean(options,"profiling");}  }
class C{  public static void writeInt(DataOutputStream dis,boolean isBigEndian,int val) throws IOException {  if (!isBigEndian) {    writeLittleEndianInt(dis,val);  } else {    dis.writeInt(val);  }}  }
class C{  public int intLog10(){  if (mant[mant.length - 1] > 1000) {    return exp * 4 - 1;  }  if (mant[mant.length - 1] > 100) {    return exp * 4 - 2;  }  if (mant[mant.length - 1] > 10) {    return exp * 4 - 3;  }  return exp * 4 - 4;}  }
class C{  public JobManagerException(Throwable nested){  super(nested);}  }
class C{  public static final void drawRopeJoint(GL2 gl,RopeJoint joint){  Vector2 v1=joint.getAnchor1();  Vector2 v2=joint.getAnchor2();  gl.glColor4f(0.0f,0.0f,0.0f,0.3f);  Vector2 t=v1.to(v2);  t.normalize();  t.left();  t.multiply(0.05);  gl.glBegin(GL2.GL_QUADS);  gl.glVertex2d(v1.x - t.x,v1.y - t.y);  gl.glVertex2d(v1.x + t.x,v1.y + t.y);  gl.glVertex2d(v2.x + t.x,v2.y + t.y);  gl.glVertex2d(v2.x - t.x,v2.y - t.y);  gl.glEnd();}  }
class C{  public void increase(){  gameTime++;  if (getMinute() == 0) {    checkDayTimeChange();  }}  }
class C{  @Override public synchronized Document parse(final String xml) throws ParserException {  Document doc;  ByteArrayInputStream in;  try {    in=new ByteArrayInputStream(xml.getBytes(ENCODING));    doc=builder.parse(new InputSource(in));    in.close();  } catch (  UnsupportedEncodingException e1) {    throw new ParserException("Unsupported encoding: " + ENCODING,e1);  }catch (  IOException e2) {    throw new ParserException("Error creating InputStream for xml string",e2);  }catch (  SAXException saxe) {    throw new ParserException("Error parsing XML document",saxe);  } finally {    try {      builder.reset();    } catch (    UnsupportedOperationException e) {      try {        builder=DocumentBuilderFactoryImpl.newInstance().newDocumentBuilder();      } catch (      ParserConfigurationException e2) {      }    }  }  if (doc == null) {    throw new ParserException("Null document obtained during document parsing.");  }  return doc;}  }
class C{  private void captureImageWithPermission(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {    int rc=ActivityCompat.checkSelfPermission(this,Manifest.permission.CAMERA);    if (rc == PackageManager.PERMISSION_GRANTED) {      captureImage();    } else {      Log.w(TAG,"Camera permission is not granted. Requesting permission");      requestCameraPermission();    }  } else {    captureImage();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_SYSTEMMSG_ACQUIRE(String value0){  return new SM_SYSTEM_MESSAGE(1300617,value0);}  }
class C{  public static void browse(URI uri) throws IOException {  Desktop.getDesktop().browse(uri);}  }
class C{  public final void addValidationState(ValidationState vs){  fVSs.add(vs);}  }
class C{  public EmailBuilder withAttachment(EmailAttachment attachment){  this.attachments.add(attachment);  return this;}  }
class C{  @deprecated protected Object handleGetObject(String key) throws MissingResourceException {  Object o=null;  for (int i=0; i < this.bundles.length; i++) {    load(i);    try {      o=this.bundles[i].getObject(key);    } catch (    MissingResourceException e) {      if (i == this.bundles.length - 1) {        throw e;      }    }    if (o != null) {      break;    }  }  return o;}  }
class C{  public Split[] asArray(){  Split[] result=new Split[size()];  int count=0;  for (Iterator it=iterator(); it.hasNext(); ) {    result[count++]=(Split)it.next();  }  return result;}  }
class C{  public boolean isSystemLocationSettingEnabled(){  LocationManager locationManager=(LocationManager)mContext.getSystemService(Context.LOCATION_SERVICE);  return (locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER) || locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER));}  }
class C{  public boolean isExtraCmd(){  return isExtraCmd;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_GET_REWARD_ERROR_NO_QUEST_ITEM_SINGLE(String value0,String value0s){  return new SM_SYSTEM_MESSAGE(1300602,value0,value0s);}  }
class C{  public static void moveDirectory(File srcDir,File destDir) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcDir.exists()) {    throw new FileNotFoundException("Source '" + srcDir + "' does not exist");  }  if (!srcDir.isDirectory()) {    throw new IOException("Source '" + srcDir + "' is not a directory");  }  if (destDir.exists()) {    throw new FileExistsException("Destination '" + destDir + "' already exists");  }  boolean rename=srcDir.renameTo(destDir);  if (!rename) {    if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {      throw new IOException("Cannot move directory: " + srcDir + " to a subdirectory of itself: "+ destDir);    }    copyDirectory(srcDir,destDir);    deleteDirectory(srcDir);    if (srcDir.exists()) {      throw new IOException("Failed to delete original directory '" + srcDir + "' after copy to '"+ destDir+ "'");    }  }}  }
class C{  public double frequency(){  return freq;}  }
class C{  public PhotosEditCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  public FileExistsException(File file){  super("File " + file + " exists");}  }
class C{  public static Integer remove(String key){  return null;}  }
class C{  public void clear(){  int n=mSize;  Object[] values=mValues;  for (int i=0; i < n; i++) {    values[i]=null;  }  mSize=0;  mGarbage=false;}  }
class C{  public boolean isAuthorized(String auth){  return userCredentials != null && userCredentials.isAuthorized(auth);}  }
class C{  public boolean isConcrete(){  return !isInterface() && !isAbstract();}  }
class C{  private void notifyShutdown(){  if (eventHandler instanceof LifecycleAware) {    try {      ((LifecycleAware)eventHandler).onShutdown();    } catch (    final Throwable ex) {      exceptionHandler.handleOnShutdownException(ex);    }  }}  }
class C{  public boolean checkFall(ClaimedChunk claim,Block block,Permissible user,Location l,BlockPos blockPos){  Collection<Plot> plots=claim.getPlots();  if (plots.isEmpty())   return false;  BlockPos zero=new BlockPos(blockPos,block.getX(),0,block.getZ());  Cuboid fallArea=new Cuboid(blockPos,zero);  Stream<Plot> stream=plots.stream();  Plot[] risk=stream.filter(null).toArray(null);  City city=claim.getCity().get();  Plot last=null;  down:   while (true) {    block=block.getRelative(BlockFace.DOWN);    l.setY(l.getY() - 1);switch (block.getType()) {case AIR:case FIRE:case WATER:case STATIONARY_WATER:case LAVA:case STATIONARY_LAVA:      break;default :    return false;}Optional<Message> denial=null;for (Plot plot : risk) {  if (plot.getShape().contains(l.getBlockX(),l.getBlockY(),l.getBlockZ())) {    if (plot.equals(last))     continue down;    last=plot;    denial=plot.can(user,PermissionFlag.MODIFY);    if (denial.isPresent())     break;    continue down;  }}if (denial == null) denial=city.can(user,PermissionFlag.MODIFY);if (denial.isPresent()) {  if (user instanceof BukkitPlayer)   user.send(FlagHolder.wrapDeny(denial.get()));  return true;}}}  }
class C{  @Override public final void run(){  try {    if (isValid()) {      runImpl();    }  } catch (  Throwable e) {    String name=getConnection().getAccount().getName();    if (name == null) {      name=getConnection().getIP();    }    log.error("Error handling client (" + name + ") message :"+ this,e);  }}  }
class C{  public boolean isLocked(){  return locked;}  }
class C{  public static boolean isSequence(final double start,final double mid,final double end){  return (start < mid) && (mid < end);}  }
class C{  public void delete(final ConfigKey configKey){  final FindResult res=findNode(configKey.keyName,false);  res.getNode().remove(res.getName());}  }
class C{  @BeforeClass public void retrieveOAuthToken(){  given().when().then();}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  @Override protected void synchronizeData(){  needsSyncData(false);  boolean orig=ownerDocument.getMutationEvents();  ownerDocument.setMutationEvents(false);  setupDefaultAttributes();  ownerDocument.setMutationEvents(orig);}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int len=((size - 1) / 32);  int oldBitsLen=len + 1;  for (int i=0; i < oldBitsLen; i++) {    long x=(long)bits[i];    x=((x >> 1) & 0x55555555L) | ((x & 0x55555555L) << 1);    x=((x >> 2) & 0x33333333L) | ((x & 0x33333333L) << 2);    x=((x >> 4) & 0x0f0f0f0fL) | ((x & 0x0f0f0f0fL) << 4);    x=((x >> 8) & 0x00ff00ffL) | ((x & 0x00ff00ffL) << 8);    x=((x >> 16) & 0x0000ffffL) | ((x & 0x0000ffffL) << 16);    newBits[len - i]=(int)x;  }  if (size != oldBitsLen * 32) {    int leftOffset=oldBitsLen * 32 - size;    int mask=1;    for (int i=0; i < 31 - leftOffset; i++) {      mask=(mask << 1) | 1;    }    int currentInt=(newBits[0] >> leftOffset) & mask;    for (int i=1; i < oldBitsLen; i++) {      int nextInt=newBits[i];      currentInt|=nextInt << (32 - leftOffset);      newBits[i - 1]=currentInt;      currentInt=(nextInt >> leftOffset) & mask;    }    newBits[oldBitsLen - 1]=currentInt;  }  bits=newBits;}  }
class C{  public boolean queryMarkerVisible(int markerUID){  if (!initedNative)   return false;  return NativeInterface.arwQueryMarkerVisibility(markerUID);}  }
class C{  public List<LocalDateTime> bottom(int n){  List<LocalDateTime> bottom=new ArrayList<>();  long[] values=data.toLongArray();  LongArrays.parallelQuickSort(values);  for (int i=0; i < n && i < values.length; i++) {    bottom.add(PackedLocalDateTime.asLocalDateTime(values[i]));  }  return bottom;}  }
class C{  public JComponent createComponent(){  return createSearchPanel();}  }
class C{  public SimplifiedIntervalList(SimplifiedIntervalList intervals){  super(intervals);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof ExpandedRow)) {    return false;  }  ExpandedRow that=(ExpandedRow)o;  return this.pairs.equals(that.getPairs()) && wasReversed == that.wasReversed;}  }
class C{  protected boolean isFallbackElement(QName element){  return element.localpart.equals(XINCLUDE_FALLBACK) && hasXIncludeNamespace(element);}  }
class C{  @Override protected Expression generateExpression(){  return null;}  }
class C{  @SuppressWarnings("unused") public StructGroupStat[] listGroups(TrackerServer trackerServer) throws IOException {  byte[] header;  String ip_addr;  int port;  byte cmd;  int out_len;  boolean bNewConnection;  byte store_path;  Socket trackerSocket;  if (trackerServer == null) {    trackerServer=getConnection();    if (trackerServer == null) {      return null;    }    bNewConnection=true;  } else {    bNewConnection=false;  }  trackerSocket=trackerServer.getSocket();  OutputStream out=trackerSocket.getOutputStream();  try {    header=ProtoCommon.packHeader(ProtoCommon.TRACKER_PROTO_CMD_SERVER_LIST_GROUP,0,(byte)0);    out.write(header);    ProtoCommon.RecvPackageInfo pkgInfo=ProtoCommon.recvPackage(trackerSocket.getInputStream(),ProtoCommon.TRACKER_PROTO_CMD_RESP,-1);    this.errno=pkgInfo.errno;    if (pkgInfo.errno != 0) {      return null;    }    ProtoStructDecoder<StructGroupStat> decoder=new ProtoStructDecoder<StructGroupStat>();    return decoder.decode(pkgInfo.body,StructGroupStat.class,StructGroupStat.getFieldsTotalSize());  } catch (  IOException ex) {    if (!bNewConnection) {      try {        trackerServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      }    }    throw ex;  }catch (  Exception ex) {    ex.printStackTrace();    this.errno=ProtoCommon.ERR_NO_EINVAL;    return null;  } finally {    if (bNewConnection) {      try {        trackerServer.close();      } catch (      IOException ex1) {        ex1.printStackTrace();      }    }  }}  }
class C{  public void notifyListeners(double oldValue,double newValue){  for (  SpinnerNotifyInterface observer : observers) {    observer.notify(oldValue,newValue);  }}  }
class C{  public void calculateExpLoss(){  long expLost=XPLossEnum.getExpLoss(this.level,this.getExpNeed());  int unrecoverable=(int)(expLost * 0.33333333);  int recoverable=(int)expLost - unrecoverable;  long allExpLost=recoverable + this.expRecoverable;  if (this.getExpShown() > unrecoverable) {    this.exp=this.exp - unrecoverable;  } else {    this.exp=this.exp - this.getExpShown();  }  if (this.getExpShown() > recoverable) {    this.expRecoverable=allExpLost;    this.exp=this.exp - recoverable;  } else {    this.expRecoverable=this.expRecoverable + this.getExpShown();    this.exp=this.exp - this.getExpShown();  }  if (this.expRecoverable > getExpNeed() * 0.25) {    this.expRecoverable=Math.round(getExpNeed() * 0.25);  }  if (this.getPlayer() != null) {    PacketSendUtility.sendPacket(getPlayer(),new SM_STATUPDATE_EXP(getExpShown(),getExpRecoverable(),getExpNeed(),this.getCurrentReposteEnergy(),this.getMaxReposteEnergy(),this.getCurrentEventExp()));  }}  }
class C{  public TransformerFactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  protected List<ProcessChange> commonUpdate(Long abstractEquipmentId,Properties elementProperties) throws IllegalAccessException {  LOGGER.debug("Updating (Sub)Equipment " + abstractEquipmentId);  if (elementProperties.containsKey("id")) {    LOGGER.warn("Attempting to change the equipment/subequipment id - this is not currently supported!");    elementProperties.remove("id");  }  boolean aliveConfigure=false;  if (elementProperties.containsKey("aliveInterval") || elementProperties.containsKey("aliveTagId")) {    aliveConfigure=true;  }  boolean commFaultConfigure=false;  if (elementProperties.containsKey("commFaultTagId")) {    commFaultConfigure=true;  }  abstractEquipmentCache.acquireWriteLockOnKey(abstractEquipmentId);  try {    T abstractEquipment=abstractEquipmentCache.get(abstractEquipmentId);    try {      Long oldAliveId=abstractEquipment.getAliveTagId();      Long oldCommFaultId=abstractEquipment.getCommFaultTagId();      List<ProcessChange> processChanges=abstractEquipmentConfigTransacted.doUpdateAbstractEquipment(abstractEquipment,elementProperties);      abstractEquipmentCache.releaseWriteLockOnKey(abstractEquipmentId);      if (aliveConfigure) {        if (oldAliveId != null)         commonEquipmentFacade.removeAliveDirectly(oldAliveId);        if (abstractEquipment.getAliveTagId() != null)         commonEquipmentFacade.loadAndStartAliveTag(abstractEquipment.getId());      }      if (commFaultConfigure && abstractEquipment.getCommFaultTagId() != null) {        if (oldCommFaultId != null)         commFaultTagCache.remove(oldCommFaultId);        if (abstractEquipment.getCommFaultTagId() != null)         commFaultTagCache.loadFromDb(abstractEquipment.getCommFaultTagId());      }      return processChanges;    } catch (    RuntimeException ex) {      LOGGER.error("Exception caught while updating Sub-equipment - rolling back changes to the Sub-equipment",ex);      if (abstractEquipmentCache.isWriteLockedByCurrentThread(abstractEquipmentId))       abstractEquipmentCache.releaseWriteLockOnKey(abstractEquipmentId);      commFaultTagCache.remove(abstractEquipment.getCommFaultTagId());      aliveTimerCache.remove(abstractEquipment.getAliveTagId());      abstractEquipmentCache.remove(abstractEquipmentId);      T oldAbstractEquipment=abstractEquipmentCache.get(abstractEquipmentId);      commFaultTagCache.loadFromDb(oldAbstractEquipment.getCommFaultTagId());      commonEquipmentFacade.loadAndStartAliveTag(abstractEquipmentId);      throw ex;    }  }  finally {    if (abstractEquipmentCache.isWriteLockedByCurrentThread(abstractEquipmentId))     abstractEquipmentCache.releaseWriteLockOnKey(abstractEquipmentId);  }}  }
class C{  public double distSquared(Math_Vector other){  double distX=this.x - other.x;  double distY=this.y - other.y;  return distX * distX + distY * distY;}  }
class C{  public void handleStep(final ODEStateInterpolator interpolator,final boolean isLast) throws MathIllegalStateException {  if (steps.size() == 0) {    initialTime=interpolator.getPreviousState().getTime();    forward=interpolator.isForward();  }  steps.add(interpolator);  if (isLast) {    finalTime=interpolator.getCurrentState().getTime();    index=steps.size() - 1;  }}  }
class C{  private ABTester from(Object fromObj){  if (pointOfReference != null) {    throw new IllegalStateException("Can only supply one point of reference!");  }  pointOfReference=fromObj;  return this;}  }
class C{  @Override public void processingInstruction(String target,String data) throws SAXException {  writeText4Links();  write("<?");  write(target);  write(' ');  write(data);  write("?>");  if (elementLevel < 1) {    write('\n');  }  super.processingInstruction(target,data);}  }
class C{  public int hashCode(XMLGrammarDescription desc){  if (desc instanceof XMLSchemaDescription) {    final XMLSchemaDescription sd=(XMLSchemaDescription)desc;    final String targetNamespace=sd.getTargetNamespace();    final String expandedSystemId=sd.getExpandedSystemId();    int hash=(targetNamespace != null) ? targetNamespace.hashCode() : 0;    hash^=(expandedSystemId != null) ? expandedSystemId.hashCode() : 0;    return hash;  }  return desc.hashCode();}  }
class C{  public synchronized void start(){  if (mAnimatorSet == null || mIsStarted) {    return;  }  mAnimatorSet.start();  if (!mStartFromScratch) {    ArrayList<Animator> animators=mAnimatorSet.getChildAnimations();    for (    Animator animator : animators) {      ObjectAnimator objectAnimator=(ObjectAnimator)animator;      long delay=objectAnimator.getStartDelay();      objectAnimator.setStartDelay(0);      objectAnimator.setCurrentPlayTime(mDuration - delay);    }  }}  }
class C{  protected void enableField(FieldIdEnum fieldId,boolean enable){  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    fieldConfig.setEnabled(enable);  } else {    ConsoleManager.getInstance().error(this,String.format("enableField - %s : %s",Localisation.getString(StandardPanel.class,"StandardPanel.unknownField"),fieldId));  }}  }
class C{  private static int gap(ConstraintWidget widget1,Direction direction1,ConstraintWidget widget2,Direction direction2){switch (direction1) {case NORTH:case WEST:    return getPos(widget1,direction1) - getPos(widget2,direction2);case SOUTH:case EAST:  return getPos(widget2,direction2) - getPos(widget1,direction1);}return 0;}  }
class C{  public Observable<Book> observeChangingBooks(){  return changingBookSubject;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  registrarID.writeBytes(out);}  }
class C{  private static boolean isAppropriateMixer(Mixer mixer,Line.Info lineInfo,boolean isMixingRequired){  if (!mixer.isLineSupported(lineInfo)) {    return false;  }  Class lineClass=lineInfo.getLineClass();  if (isMixingRequired && (SourceDataLine.class.isAssignableFrom(lineClass) || Clip.class.isAssignableFrom(lineClass))) {    int maxLines=mixer.getMaxLines(lineInfo);    return ((maxLines == NOT_SPECIFIED) || (maxLines > 1));  }  return true;}  }
class C{  public Builder cacheOnDisc(boolean cacheOnDisc){  this.cacheOnDisc=cacheOnDisc;  return this;}  }
class C{  public boolean isApplicable(){  return getViewer().getTabbedIndex() == ClusterViewer.PCoA_TAB_INDEX && getViewer().getPcoaTab().isIs3dMode();}  }
class C{  public static void appendAttribute(final StringBuffer logMessage,final String attributeName,final String attributeValue){  logMessage.append(" " + attributeName + "=\""+ attributeValue+ "\"");}  }
class C{  public void destroy(){  mTabStripTreeProvider.destroy();  mTabStripTreeProvider=null;}  }
class C{  public boolean hasNoDragOffset(){  return mViewPortHandler.hasNoDragOffset();}  }
class C{  @Override public void showProgress(){  if (mShotRecycler.getVisibility() == View.VISIBLE && mBrowseAdapter.getItemCount() > 0) {    mSwipeRefreshLayout.setRefreshing(true);  } else {    mRecyclerProgress.setVisibility(View.VISIBLE);  }}  }
class C{  public PhotosCopyQuery(VkApiClient client,UserActor actor,int ownerId,int photoId){  super(client,"photos.copy",Integer.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  photoId(photoId);}  }
class C{  private void browseToRoot(){  browseTo(new File("/"));}  }
class C{  public void writeRepetitiveObject(Object obj) throws IOException {  if (obj == null) {    writeInt(CODE_NULL);    return;  }  if (!_optimize) {    writeInt(CODE_DISABLED);    writeObject(obj);    return;  }  int code=_context.getRepetitiveObjectsCache().get(obj);  if (code != CODE_NULL) {    writeInt(code);    return;  }  code=_context.getAndIncrementRepetitiveObjectCounter();  _context.getRepetitiveObjectsCache().put(obj,code);  writeInt(code);  writeObject(obj);}  }
class C{  public boolean isSuccess(){  return success;}  }
class C{  protected void assertClose(double[] m,double[] n,double tolerance){  if (m.length != n.length) {    Assert.fail("vectors not same length");  }  for (int i=0; i < m.length; i++) {    Assert.assertEquals(m[i],n[i],tolerance);  }}  }
class C{  public Response doDelete(String url){  return doDelete(url,null);}  }
class C{  public void testStaticWrongThread(){  doCheck("package test.pkg;\n" + "\n" + "import android.content.Context;\n"+ "import android.os.AsyncTask;\n"+ "import android.support.annotation.WorkerThread;\n"+ "import android.view.View;\n"+ "\n"+ "public class X extends View {\n"+ "    public X(Context context) {\n"+ "        super(context);\n"+ "    }\n"+ "\n"+ "    class MyAsyncTask extends AsyncTask<Long, Void, Boolean> {\n"+ "        @Override\n"+ "        protected Boolean doInBackground(Long... sizes) {\n"+ "            return workedThreadMethod();\n"+ "        }\n"+ "\n"+ "        @Override\n"+ "        protected void onPostExecute(Boolean isEnoughFree) {\n"+ "        }\n"+ "    }\n"+ "\n"+ "    public static boolean workedThreadMethod() {\n"+ "        return true;\n"+ "    }\n"+ "}");}  }
class C{  private IReadBlock fetchNext(){  while (!canceled.get() && allReadsIterator.hasNext()) {    IReadBlock readBlock=allReadsIterator.next();    if (FindSelection.doesMatch(findSelector,readBlock,pattern))     return readBlock;  }  return null;}  }
class C{  public void addCppDirectory(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myCppDirectories.add(directory);}  }
class C{  public int frequencyOrder(){  return periodType != null ? periodType.getFrequencyOrder() : YearlyPeriodType.FREQUENCY_ORDER;}  }
class C{  public NewsfeedGetQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  @Override public boolean showDialog(){  EnvVarDlg envVarDlg=new EnvVarDlg(this);  return envVarDlg.showDialog();}  }
class C{  private boolean filterDate(ILogEntry logEntry,Date startDate,Date endDate){  Date date=logEntry.getDate();  if (date == null) {    return true;  }  if ((startDate != null) && date.before(startDate)) {    return false;  }  if ((endDate != null) && date.after(endDate)) {    return false;  }  return true;}  }
class C{  public String readLine() throws IOException {  StringBuilder buf=new StringBuilder();  byte b=(byte)read();  while (b != '\n') {    buf.append((char)b);    b=(byte)in.read();    if (getPosition() >= length())     break;  }  return buf.toString();}  }
class C{  public ObjectColumn(Class type,int nrows){  this(type,nrows,nrows,null);}  }
class C{  public CheckpointRecord(){  this.txNums=new ArrayList<Long>();}  }
class C{  private void upgradeMapViewsToColumns(){  String sql="insert into mapview_columns " + "select mapviewid, 'dx', 0 " + "from mapview mv "+ "where not exists ("+ "select mc.mapviewid "+ "from mapview_columns mc "+ "where mv.mapviewid = mc.mapviewid)";  executeSql(sql);}  }
class C{  public MessagesDeleteDialogQuery peerId(Integer value){  return unsafeParam("peer_id",value);}  }
class C{  @Override public void unbindAppearEvent(WXComponent component){  ConcurrentHashMap<String,AppearData> appearMap=mAppearMap.get(getInnerView());  if (appearMap == null) {    return;  }  AppearData appearData=appearMap.get(component.getRef());  if (appearData == null) {    return;  }  appearData.hasAppear=false;  if (!appearData.hasDisappear) {    appearMap.remove(component.getRef());  }}  }
class C{  private void forgetObjects(){  for (  VisibleObject object : knownObjects.values()) {    if (!checkObjectInRange(object) && !object.getKnownList().checkReversedObjectInRange(owner)) {      del(object,true);      object.getKnownList().del(owner,true);    }  }}  }
class C{  public void renderBeginningBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  if (this.widgetCommentsEnabled) {    StringWriter sr=new StringWriter();    sr.append("<@formatBoundaryComment ");    sr.append(" boundaryType=");    sr.append(ftlFmt.makeStringLiteral("Begin"));    sr.append(" widgetType=");    sr.append(ftlFmt.makeStringLiteral(widgetType));    sr.append(" widgetName=");    sr.append(ftlFmt.makeStringLiteral(modelWidget.getBoundaryCommentName()));    sr.append(" />");    executeMacro(writer,sr.toString());  }}  }
class C{  @PostConstruct protected void init(){  cacheReadLock=controller.getReadLock();}  }
class C{  @Override public boolean equals(final Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  SupervisionEventImpl other=(SupervisionEventImpl)obj;  if (entity == null) {    if (other.entity != null)     return false;  } else   if (!entity.equals(other.entity))   return false;  if (entityId == null) {    if (other.entityId != null)     return false;  } else   if (!entityId.equals(other.entityId))   return false;  if (status == null) {    if (other.status != null)     return false;  } else   if (!status.equals(other.status))   return false;  return true;}  }
class C{  @Override public AudioInputStream synthesiseOneSection(String festivalUtt,Voice voice) throws IOException {  writeRelationFiles(festivalUtt);  File audioFile=new File(festivalDir.getPath() + File.separator + "mary.wav");  String festivalVoiceCmd="(voice_" + voice.getName() + ")";  AudioInputStream sound=festivalSynthesise(audioFile,festivalVoiceCmd);  return sound;}  }
class C{  private static List<NewSLDInterface> populateAvailableList(){  List<NewSLDInterface> list=new ArrayList<NewSLDInterface>();  list.add(new NewPointSLD());  list.add(new NewLineSLD());  list.add(new NewPolygonSLD());  list.add(new NewRasterSLD());  return list;}  }
class C{  private Uri whichContentStore(){  if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {    return android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;  } else {    return android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI;  }}  }
class C{  public void removeFromUI(){  for (  Component component : componentList) {    this.parentBox.remove(component);  }  componentList.clear();}  }
class C{  public IsBetweenExtended(Expression lower,Expression expression,Expression upper){  super(lower,expression,upper);}  }
class C{  static void changeImageViewTint(ImageView imageView,int color){  imageView.setColorFilter(color);}  }
class C{  public boolean isTransactionCanceled(){  return transactionCanceled;}  }
class C{  @Override public boolean isPermitted(String domainName){  loadRuleProperties();  if (StringUtils.isEmpty(domainName)) {    if (whiteListRule && CollectionUtils.isEmpty(getPermittedDomains())) {      return true;    }    if (CollectionUtils.isEmpty(getPermittedDomains()) && !isOptionEnabled(UrlFilterRuleOption.THIRD_PARTY) && !isOptionDisabled(UrlFilterRuleOption.THIRD_PARTY)) {      return true;    }  }  return super.isPermitted(domainName);}  }
class C{  private void error(Element element,String message,Object... args){  if (args.length > 0) {    message=String.format(message,args);  }  processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,message,element);}  }
class C{  private Fraction addSub(Fraction fraction,boolean isAdd){  if (fraction == null) {    throw MathRuntimeException.createIllegalArgumentException(NULL_FRACTION);  }  if (numerator == 0) {    return isAdd ? fraction : fraction.negate();  }  if (fraction.numerator == 0) {    return this;  }  int d1=MathUtils.gcd(denominator,fraction.denominator);  if (d1 == 1) {    int uvp=MathUtils.mulAndCheck(numerator,fraction.denominator);    int upv=MathUtils.mulAndCheck(fraction.numerator,denominator);    return new Fraction(isAdd ? MathUtils.addAndCheck(uvp,upv) : MathUtils.subAndCheck(uvp,upv),MathUtils.mulAndCheck(denominator,fraction.denominator));  }  BigInteger uvp=BigInteger.valueOf(numerator).multiply(BigInteger.valueOf(fraction.denominator / d1));  BigInteger upv=BigInteger.valueOf(fraction.numerator).multiply(BigInteger.valueOf(denominator / d1));  BigInteger t=isAdd ? uvp.add(upv) : uvp.subtract(upv);  int tmodd1=t.mod(BigInteger.valueOf(d1)).intValue();  int d2=(tmodd1 == 0) ? d1 : MathUtils.gcd(tmodd1,d1);  BigInteger w=t.divide(BigInteger.valueOf(d2));  if (w.bitLength() > 31) {    throw MathRuntimeException.createArithmeticException("overflow, numerator too large after multiply: {0}",w);  }  return new Fraction(w.intValue(),MathUtils.mulAndCheck(denominator / d1,fraction.denominator / d2));}  }
class C{  public static boolean isNullableObjectInterface(HashSet<String> resolvedTypesSet){  int intCountTypesToInspect=resolvedTypesSet.size();  if (resolvedTypesSet.contains(Types.strClassNotResolved)) {    --intCountTypesToInspect;  }  if (resolvedTypesSet.contains(Types.strNull)) {    --intCountTypesToInspect;  }  if (intCountTypesToInspect == 0) {    return false;  }  for (  String strTypeToInspect : resolvedTypesSet) {    if (strTypeToInspect.charAt(0) != '\\' && !strTypeToInspect.equals(Types.strNull)) {      return false;    }  }  return true;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public ServerServiceDefinition intercept(BindableService bindableService){  return ServerInterceptors.intercept(bindableService,this);}  }
class C{  public byte[] hash(){  return md5.Final();}  }
class C{  public static void saveBookmarkIdToBundle(Bundle bundle,BookmarkId bookmark){  bundle.putString(BOOKMARK_SAVE_NAME,bookmark.toString());}  }
class C{  protected PlacesAddQuery latitude(float value){  return unsafeParam("latitude",value);}  }
class C{  protected GroupsGetRequestsQueryWithFields groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public void keyTyped(KeyEvent ke){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_RESULT_ME(int value0,int num1){  return new SM_SYSTEM_MESSAGE(1390162,value0,num1);}  }
class C{  public void addMissingBinaryPath(@NotNull String dependentName){  myDependentsOnLibrariesWithoutBinaryPath.add(dependentName);}  }
class C{  public void stop(){  Debug.logInfo("Shutting down JobPoller.",module);  if (jobManagerPollerThread != null) {    jobManagerPollerThread.interrupt();  }  List<Runnable> queuedJobs=executor.shutdownNow();  for (  Runnable task : queuedJobs) {    try {      Job queuedJob=(Job)task;      queuedJob.deQueue();    } catch (    Exception e) {      Debug.logWarning(e,module);    }  }  Debug.logInfo("JobPoller shutdown completed.",module);}  }
class C{  public void addDeferredJimplification(DeferableInstruction i){  deferredInstructions.add(i);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_INGAME_BLOCK_ENABLE_NO_CHAT(String value0){  return new SM_SYSTEM_MESSAGE(1300808,value0);}  }
class C{  public void close() throws IOException {synchronized (this) {    writer.close();  }}  }
class C{  public void begin(int size){}  }
class C{  public SourceViewerInformationControl(Shell parent,String symbolicFontName){  this(parent,SWT.NO_TRIM | SWT.TOOL,SWT.NONE,symbolicFontName,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Rebirth_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200706,skillcaster,skillname);}  }
class C{  public void toPlayer(EntityPlayerMP player){  player.connection.sendPacket(new PacketWrapper(channel,new Packet(this)));}  }
class C{  public void configure(ComponentConfiguration config){  openDialog();  configDialog.configureWith(config);}  }
class C{  public MarketReportQuery(VkApiClient client,UserActor actor,int ownerId,int itemId,ReportReason reason){  super(client,"market.report",OkResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  itemId(itemId);  reason(reason);}  }
class C{  @Override public void populateExpression(Object objValue){  if (objValue instanceof String) {    String sValue=(String)objValue;    populateField(sValue);  }}  }
class C{  public boolean dump_types(){  return soot.PhaseOptions.getBoolean(options,"dump-types");}  }
class C{  public FriendsGetListsQuery returnSystem(Boolean value){  return unsafeParam("return_system",value);}  }
class C{  @SuppressWarnings("unchecked") public static <T>List<T> loadList(String table,String col,String where,Object[] args,Class<T> clazz,String db){  TimeStamp t=TimeStamp.create();  StringBuilder sql=new StringBuilder();  sql.append("select ").append(col).append(" from ").append(table);  if (where != null) {    sql.append(" where ").append(where);  }  Connection c=null;  PreparedStatement p=null;  ResultSet r=null;  try {    if (X.isEmpty(db)) {      c=getConnection();    } else {      c=getConnection(db);    }    if (c == null)     return null;    p=c.prepareStatement(sql.toString());    int order=1;    if (args != null) {      for (int i=0; i < args.length; i++) {        Object o=args[i];        setParameter(p,order++,o);      }    }    List<T> list=new ArrayList<T>();    r=p.executeQuery();    while (r.next()) {      T b=(T)(r.getObject(1));      list.add(b);    }    return list;  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql.toString() + toString(args),e);  } finally {    close(r,p,c);    if (t.past() > 2 && sqllog.isDebugEnabled()) {      sqllog.debug("cost:" + t.past() + "ms, sql=["+ sql+ "]");    }  }  return null;}  }
class C{  public Response interceptResponse(Request request,Response response){  Response finalResponse=response;  Log.d("Response",String.format("%s \n%s",request.url(),request.headers().toString()));  try {    ResponseBody responseBody=response.body();    String responseBodyString=responseBody.string();    Log.d("Response data",responseBodyString);    finalResponse=response.newBuilder().body(ResponseBody.create(responseBody.contentType(),responseBodyString)).build();  } catch (  IOException e) {    Log.e("Response","Error while parsing the response.");  }  return finalResponse;}  }
class C{  public WheelZoomControl(){  this(false,false);}  }
class C{  public TakeModifiers(TakeModifiers... modifiers){  super(modifiers);}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  @After public void afterTest(){  removeTestData();}  }
class C{  public VideoGetAlbumsQuery needSystem(Boolean value){  return unsafeParam("need_system",value);}  }
class C{  public static <K>MapStack<K> create(MapStack<K> source){  MapStack<K> newValue=new MapStack<K>();  newValue.stackList.addAll(source.stackList);  return newValue;}  }
class C{  public void WaitUntilAllViewersAreUptoDate(){  while (!isAllViewersUptodate()) {    try {      Thread.sleep(10);    } catch (    Exception e) {    }  }}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  public AuthSignupQuery voice(Boolean value){  return unsafeParam("voice",value);}  }
class C{  void scrapActiveViews(){  final View[] activeViews=this.activeViews;  final int[] activeViewTypes=this.activeViewTypes;  final boolean multipleScraps=viewTypeCount > 1;  SparseArray<View> scrapViews=currentScrapViews;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      int whichScrap=activeViewTypes[i];      activeViews[i]=null;      activeViewTypes[i]=-1;      if (!shouldRecycleViewType(whichScrap)) {        continue;      }      if (multipleScraps) {        scrapViews=this.scrapViews[whichScrap];      }      scrapViews.put(i,victim);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {        victim.setAccessibilityDelegate(null);      }    }  }  pruneScrapViews();}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static String keyString(SecretKeys keys){  return keys.toString();}  }
class C{  public static int findNext(String str,char separator,char escapeChar,int start,StringBuilder split){  int numPreEscapes=0;  for (int i=start; i < str.length(); i++) {    char curChar=str.charAt(i);    if (numPreEscapes == 0 && curChar == separator) {      return i;    } else {      split.append(curChar);      numPreEscapes=(curChar == escapeChar) ? (++numPreEscapes) % 2 : 0;    }  }  return -1;}  }
class C{  public AemDialog clickDialogFooterButton(final String buttonText){  final WebElement footerButton=getFooterButtonWebElement(buttonText);  bobcatWait.withTimeout(Timeouts.BIG).until((ExpectedCondition<Object>)null,2);  bobcatWait.withTimeout(Timeouts.MEDIUM).until(CommonExpectedConditions.noAemAjax());  return this;}  }
class C{  public static void collect(String dir,String suffix,String encoding,String resultFileName,String lang) throws IOException {  JTok jtok=new JTok();  LanguageResource langRes=jtok.getLanguageResource(lang);  Map<String,Set<String>> abbrevLists=langRes.getAbbrevLists();  Set<String> nonCapTerms=langRes.getNonCapTerms();  RegExp abbrevMatcher=langRes.getAllAbbrevMatcher();  Set<String> abbrevs=new HashSet<String>();  List<String> trainingFiles=FileTools.getFilesFromDir(dir,suffix);  for (  String oneFileName : trainingFiles) {    System.out.println("processing " + oneFileName + " ...");    BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(oneFileName),encoding));    String sent;    while ((sent=in.readLine()) != null) {      String[] tokens=sent.split(" |\\.\\.\\.|\\.\\.|'|`|\\(|\\)|[|]");      for (int i=0; i < (tokens.length - 1); i++) {        String oneTok=tokens[i];        if ((oneTok.length() > 1) && oneTok.endsWith(".")) {          int hyphenPos=oneTok.lastIndexOf("-");          if (hyphenPos != -1) {            oneTok=oneTok.substring(hyphenPos + 1);          }          if (abbrevMatcher.matches(oneTok)) {            continue;          }          boolean found=false;          for (          Map.Entry<String,Set<String>> oneEntry : abbrevLists.entrySet()) {            Set<String> oneList=oneEntry.getValue();            if (oneList.contains(oneTok)) {              found=true;              break;            }          }          if (found) {            continue;          }          char firstChar=oneTok.charAt(0);          firstChar=Character.toUpperCase(firstChar);          String tempTok=firstChar + oneTok.substring(1,oneTok.length() - 1);          if (nonCapTerms.contains(tempTok)) {            continue;          }          abbrevs.add(oneTok);        }      }    }    in.close();  }  List<String> sortedAbbrevs=new ArrayList<String>(abbrevs);  Collections.sort(sortedAbbrevs);  PrintWriter out=null;  try {    out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(resultFileName),"utf-8")));    for (    String oneAbbrev : sortedAbbrevs) {      out.println(oneAbbrev);    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    if (null != out) {      out.close();    }  }}  }
class C{  public Properties parseSettings() throws IOException {  if (this.settingsFile == null) {    this.settingsFile=findSettingsFile();  }  if (this.settingsFile == null) {    return null;  }  BufferedReader fin=new BufferedReader(new InputStreamReader(new FileInputStream(this.settingsFile)));  Properties result=new Properties();  try {    String line=fin.readLine();    while (line != null && !"[Proxy Settings]".equals(line.trim())) {      line=fin.readLine();    }    if (line == null) {      return result;    }    line="";    while (line != null && !line.trim().startsWith("[")) {      line=line.trim();      int index=line.indexOf('=');      if (index > 0) {        String key=line.substring(0,index).trim();        String value=line.substring(index + 1).trim();        result.setProperty(key,value);      }      line=fin.readLine();    }  }  finally {    fin.close();  }  return result;}  }
class C{  public static boolean isTaxonDisabled(Integer taxonId){  return taxonId == null || taxonomyClassification.getIdMapper().getDisabledIds().contains(taxonId);}  }
class C{  public boolean apply(){  setVisible(true);  return !isCanceled();}  }
class C{  @Deprecated public boolean isAssignableFrom(Class<?> cls){  return isAssignableFrom((Type)cls);}  }
class C{  public boolean remove(Object o){  if (o == null)   return false;  return map.remove(o) == PRESENT;}  }
class C{  public GroupsGetRequestsQueryWithFields(VkApiClient client,UserActor actor,int groupId,UserField... fields){  super(client,"groups.getRequests",GetRequestsFieldsResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  fields(fields);}  }
class C{  public static char[] unboundedSignature(char[] signature){  if (signature == null || signature.length < 2)   return signature;  final boolean BUG_83600=true;  if (BUG_83600) {    signature=fix83600(signature);  }  StringBuilder res=new StringBuilder("(");  char[][] parameters=Signature.getParameterTypes(signature);  for (int i=0; i < parameters.length; i++) {    char[] param=parameters[i];    res.append(getLowerBound(param));  }  res.append(')');  res.append(getUpperBound(Signature.getReturnType(signature)));  return res.toString().toCharArray();}  }
class C{  private void romanToWords(WordRelation wordRelation,Item tokenItem,String romanString){  String punctuation=(String)tokenItem.findFeature("p.punc");  if (punctuation.equals("")) {    String n=String.valueOf(NumberExpander.expandRoman(romanString));    if (kingLike(tokenItem)) {      wordRelation.addWord(tokenItem,"the");      NumberExpander.expandOrdinal(n,wordRelation,tokenItem);    } else     if (sectionLike(tokenItem)) {      NumberExpander.expandNumber(n,wordRelation,tokenItem);    } else {      NumberExpander.expandLetters(romanString,wordRelation,tokenItem);    }  } else {    NumberExpander.expandLetters(romanString,wordRelation,tokenItem);  }}  }
class C{  public static BufferedImage createFrame(BufferedImage image,DeviceArtDescriptor descriptor,boolean addShadow,boolean addReflection){  double imgAspectRatio=image.getWidth() / (double)image.getHeight();  ScreenOrientation orientation=imgAspectRatio >= (1 - ImageUtils.EPSILON) ? ScreenOrientation.LANDSCAPE : ScreenOrientation.PORTRAIT;  if (!descriptor.canFrameImage(image,orientation)) {    return image;  }  File shadow=descriptor.getDropShadow(orientation);  File background=descriptor.getFrame(orientation);  File reflection=descriptor.getReflectionOverlay(orientation);  Graphics2D g2d=null;  try {    BufferedImage bg=ImageIO.read(background);    Dimension screen=descriptor.getScreenSize(orientation);    Dimension frameSize=descriptor.getFrameSize(orientation);    Point screenPos=descriptor.getScreenPos(orientation);    boolean stretchable=descriptor.isStretchable();    if (stretchable) {      assert screen != null;      assert frameSize != null;      int newWidth=image.getWidth() + frameSize.width - screen.width;      int newHeight=image.getHeight() + frameSize.height - screen.height;      bg=stretchImage(bg,newWidth,newHeight);    } else     if (screen.width < image.getWidth()) {      double scale=(double)screen.width / image.getWidth();      if (Math.abs(scale - 1.0) > ImageUtils.EPSILON) {        image=ImageUtils.scale(image,scale,scale);      }    }    g2d=bg.createGraphics();    if (addShadow && shadow != null) {      BufferedImage shadowImage=ImageIO.read(shadow);      if (stretchable) {        shadowImage=stretchImage(shadowImage,bg.getWidth(),bg.getHeight());      }      g2d.drawImage(shadowImage,0,0,null,null);    }    File maskFile=descriptor.getMask(orientation);    if (maskFile != null) {      BufferedImage mask=ImageIO.read(maskFile);      Graphics2D maskG2d=mask.createGraphics();      maskG2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_IN));      maskG2d.drawImage(image,screenPos.x,screenPos.y,null);      maskG2d.dispose();      g2d.drawImage(mask,0,0,null);    } else {      g2d.drawImage(image,screenPos.x,screenPos.y,null);    }    if (addReflection && reflection != null) {      BufferedImage reflectionImage=ImageIO.read(reflection);      if (stretchable) {        reflectionImage=stretchImage(reflectionImage,bg.getWidth(),bg.getHeight());      }      g2d.drawImage(reflectionImage,0,0,null,null);    }    return bg;  } catch (  IOException e) {    return image;  } finally {    if (g2d != null) {      g2d.dispose();    }  }}  }
class C{  @Override public void addEnvVarUpdatedListener(EnvVarUpdateInterface listener){  if (!listenerList.contains(listener)) {    listenerList.add(listener);  }}  }
class C{  public static void checkRangeInclusive(long value,long lo,long hi){  if (value < lo || value > hi) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.OUT_OF_RANGE_SIMPLE,value,lo,hi);  }}  }
class C{  public static boolean classExists(String className){  try {    return Class.forName(className) != null;  } catch (  ClassNotFoundException e) {    return false;  }}  }
class C{  public SpaceTypeDescriptorBuilder fifoSupport(FifoSupport fifoSupport){  if (fifoSupport == null)   throw new IllegalArgumentException("Argument cannot be null - 'fifoSupport'.");  this._fifoSupport=fifoSupport;  return this;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ASTNode<T> fullCopy(){  ASTNode tree=(ASTNode)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public Map(PokemonGo api){  this.api=api;  cachedMapObjects=new MapObjects(api);  lastMapUpdate=0;}  }
class C{  private CordovaPlugin instantiatePlugin(String className){  CordovaPlugin ret=null;  try {    Class<?> c=null;    if ((className != null) && !("".equals(className))) {      c=Class.forName(className);    }    if (c != null & CordovaPlugin.class.isAssignableFrom(c)) {      ret=(CordovaPlugin)c.newInstance();    }  } catch (  Exception e) {    e.printStackTrace();    System.out.println("Error adding plugin " + className + ".");  }  return ret;}  }
class C{  public AccessPath mayAlias(AccessPath taintedAP,AccessPath referencedAP){  if (taintedAP.equals(referencedAP))   return taintedAP;  if (taintedAP.isInstanceFieldRef() || taintedAP.isLocal()) {    if (taintedAP.getPlainValue() != referencedAP.getPlainValue())     return null;    if (referencedAP.getFieldCount() == 0)     return taintedAP;    if (!referencedAP.isInstanceFieldRef())     return null;  }  if (taintedAP.isStaticFieldRef())   if (!referencedAP.isStaticFieldRef())   return null;  return getReferencedAPBase(taintedAP,referencedAP.getFields());}  }
class C{  public static Block registerBlock(Block block){  return registerBlock(block,new ItemBlock(block));}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof BlockVector)) {    return false;  }  BlockVector other=(BlockVector)obj;  return (int)other.getX() == (int)this.x && (int)other.getY() == (int)this.y && (int)other.getZ() == (int)this.z;}  }
class C{  public Future execute(Collection<T> coll,CompletionCallback<Boolean> callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.task_,coll,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public static int hashCode(Entry entry){  if (entry == null)   return 0;  int hash=0;  Field[] fields=fieldInfo(entry);  try {    for (int i=0; i < fields.length; i++) {      Object tv=fields[i].get(entry);      if (tv != null)       hash^=tv.hashCode();    }    return hash;  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  void incrementRefCounter(){synchronized (mutex) {    refCounter++;  }}  }
class C{  @Override public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  try {    if (fDeclHandler != null) {      String publicId=identifier.getPublicId();      String systemId=fResolveDTDURIs ? identifier.getExpandedSystemId() : identifier.getLiteralSystemId();      fDeclHandler.externalEntityDecl(name,publicId,systemId);    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public static String removeLastOr(String string){  string=StringUtils.stripEnd(string," ");  return StringUtils.removeEndIgnoreCase(string,"or");}  }
class C{  public ThresholdValues(){}  }
class C{  public static <T>T parse(InputStream xml,String xmlPath,String[] xsds,String pkg,Class<T> resultClass) throws XmlParsingException {  try {    JAXBContext jaxbContext=JAXBContext.newInstance(pkg);    Unmarshaller unmarshaller=jaxbContext.createUnmarshaller();    UnmarshallerHandler unmarshallerHandler=unmarshaller.getUnmarshallerHandler();    XmlParsingHandler contentErrorHandler=new XmlParsingHandlerWrapper(unmarshallerHandler,xmlPath);    doParse(xml,xsds,contentErrorHandler);    Object result=JAXBIntrospector.getValue(unmarshallerHandler.getResult());    if (!resultClass.isInstance(result)) {      throw new RuntimeException(String.format("A root element in '%s' must be an instance of %s type.",xmlPath,resultClass.getSimpleName()));    }    return (T)result;  } catch (  JAXBException e) {    throw new RuntimeException(e);  }}  }
class C{  void updatePosition(){  if (mOwner == null) {    mX=0;    mY=0;    return;  }  ConstraintWidget widget=mOwner.getConstraintWidget();  int x=widget.getDrawX();  int y=widget.getDrawY();  int w=widget.getDrawWidth();  int h=widget.getDrawHeight();  if (mAnchor == null) {    return;  }switch (mAnchor.getType()) {case LEFT:{      mX=x;      mY=y + h / 2;    }  break;case TOP:{  mX=x + w / 2;  mY=y;}break;case RIGHT:{mX=x + w;mY=y + h / 2;}break;case BOTTOM:{mX=x + w / 2;mY=y + h;}break;case CENTER:case CENTER_X:case CENTER_Y:{mX=x + w / 2;mY=y + h / 2;}break;case BASELINE:{mX=x + w / 2;mY=y + widget.getBaselineDistance();}break;}}  }
class C{  public void removeSelections(){  this.selectedItems.clear();  this.notifyDataSetChanged();}  }
class C{  public GroupsGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void removeEventListener(ZWaveEventListener eventListener){synchronized (zwaveEventListeners) {    zwaveEventListeners.remove(eventListener);  }}  }
class C{  public int numberOfTotalNGrams(){  if (iTotalNGrams != -1)   return iTotalNGrams;  createHistogram();  return iTotalNGrams;}  }
class C{  public boolean isSingleDataValueSet(){  return dataSets.size() == 1 && periods.size() == 1 && organisationUnits.size() == 1 && dataElementGroups.isEmpty();}  }
class C{  @Override public void splitNode(){  return;}  }
class C{  @Override public double[] analyse(double[] aFrame){  if (aFrame.length != frameLength)   throw new IllegalArgumentException("Expected frame of length " + frameLength + ", got "+ aFrame.length);  double[] real=new double[fftSize];  double[] imag=new double[fftSize];  System.arraycopy(aFrame,0,real,0,aFrame.length);  FFT.transform(real,imag,false);  MathUtils.toPolarCoordinates(real,imag);  real=MathUtils.log(real);  Arrays.fill(imag,0.);  double b=5000;  int bIndex=(int)(b / frequencyResolution);  double[] invReal;  double[] invImag;  if (invFftSize == fftSize) {    invReal=real;    invImag=imag;  } else {    invReal=new double[invFftSize];    System.arraycopy(real,0,invReal,0,bIndex + 1);    invImag=new double[invFftSize];  }  for (int i=bIndex + 1; i < invFftSize / 2; i++) {    invReal[i]=invReal[bIndex];  }  for (int i=0; i < invFftSize / 2; i++) {    invReal[invFftSize - i - 1]=invReal[i];  }  FFT.transform(invReal,invImag,true);  return invReal;}  }
class C{  @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (fileFilters != null) {    for (int i=0; i < fileFilters.size(); i++) {      if (i > 0) {        buffer.append(",");      }      Object filter=fileFilters.get(i);      buffer.append(filter == null ? "null" : filter.toString());    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  @Override public Set<Aggregation> updateQueryAggs(Set<Aggregation> outerAggregations,Map<String,String> oldFieldNameToNewFieldNameMap,Map<String,Aggregation> oldNameToNewAggregationMapping){  Set<Aggregation> aggregationSet=new HashSet<>();  for (  Aggregation agg : outerAggregations) {    if (oldFieldNameToNewFieldNameMap.containsKey(agg.getFieldName())) {      String newFieldName=oldFieldNameToNewFieldNameMap.get(agg.getFieldName());      String newName=agg.getName().concat("-").concat(newFieldName.split("-")[1]);      Aggregation aggregation=agg.withName(newName).withFieldName(newFieldName);      aggregationSet.add(aggregation);      oldNameToNewAggregationMapping.put(agg.getName(),aggregation);    } else {      aggregationSet.add(agg);    }  }  return aggregationSet;}  }
class C{  public static boolean saveDynamicResInfo(HashMap<String,String> dynamicRes){  boolean result=true;  SharedPreferences sp=getDynamicInfoSp();  SharedPreferences.Editor editor=sp.edit();  for (  String packageId : dynamicRes.keySet()) {    String pendingPath=dynamicRes.get(packageId);    editor.putString(getDynamicResPathKey(packageId),pendingPath);  }  editor.commit();  Log.i(TAG,"apply res :" + dynamicRes);  injectResources();  return result;}  }
class C{  public DocsGetTypesQuery(VkApiClient client,UserActor actor,int ownerId){  super(client,"docs.getTypes",GetTypesResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);}  }
class C{  private void drawXAxisTicks(Graphics2D gc){  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  double botX=0;  double topX=transpose ? getChartData().getRangeY().get2().doubleValue() : getChartData().getRangeX().get2().doubleValue();  double xFactor;  if (topX > botX)   xFactor=(x1 - x0) / (topX - botX); else   xFactor=1;  int tickStepX=0;  int minSpace=50;  for (int i=1; tickStepX == 0; i*=10) {    if (i * xFactor >= minSpace)     tickStepX=i; else     if (2.5 * i * xFactor >= minSpace)     tickStepX=(int)(2.5 * i); else     if (5 * i * xFactor >= minSpace)     tickStepX=5 * i;  }  int startX=0;  if (startX > botX) {    while (startX > botX)     startX-=tickStepX;  } else {    while (startX + tickStepX < botX) {      startX+=tickStepX;    }  }  double offsetX=botX - startX;  gc.setColor(Color.BLACK);  for (int value=startX; (value - 1) < topX; value+=tickStepX) {    if (value >= botX) {      if (maxDisplayedXValue != null && value > maxDisplayedXValue)       break;      String label="" + value;      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      double xPos=x0 + value * xFactor - offsetX;      if (false) {        gc.drawString(label,(float)(xPos - labelSize.getWidth() / 2.0),(float)(y0 + labelSize.getHeight() + 2));        gc.drawLine((int)xPos,y0,(int)xPos,y0 - 2);      } else {        Point2D apt=new Point2D.Double(xPos,(y0 + labelSize.getHeight() + 2));        if (classLabelAngle == 0) {          apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());        } else         if (classLabelAngle > Math.PI / 2) {          apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);        }        drawString(gc,label,apt.getX(),apt.getY(),classLabelAngle);        gc.drawLine((int)xPos,y0,(int)xPos,y0 - 2);      }    }  }}  }
class C{  @Override public List<WebElement> findElementsByTagName(String tagName){  return ((FindsByTagName)super.getWrappedDriver()).findElementsByTagName(tagName);}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  public void logMessage(final FormattedMqttMessage receivedMessage){  if (!MessageLogEnum.DISABLED.equals(connectionSettings.getMessageLog().getValue())) {    messageQueue.add(receivedMessage);  }}  }
class C{  public TimeDetector(double... eventTs){  this(Action.CONTINUE,eventTs);}  }
class C{  public void changeCharset(String charsetName) throws IOException {synchronized (this) {    reader=new InputStreamReader(stream,charsetName);  }}  }
class C{  public ThreadList(int iMaxThreads){  super(iMaxThreads);}  }
class C{  public CM_OBJECT_SEARCH(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  private void markAsFinishedWithError(PollableTask pollableTask){  ExceptionHolder exceptionHolder=new ExceptionHolder(pollableTask);  exceptionHolder.setExpected(false);  exceptionHolder.setException(new PollableTaskTimeoutException("Zombie task detected: Maximum execution time exceeded."));  pollableTaskService.finishTask(pollableTask.getId(),null,exceptionHolder,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_CHANNEL_JOIN(String value0){  return new SM_SYSTEM_MESSAGE(1300842,value0);}  }
class C{  private List<String> addCurrentTextToHistoryList(List<String> history){  String text=mSearchText.getText().toString().trim();  if (TextUtils.isEmpty(text))   return history;  history.remove(text);  history.add(0,text);  if (history.size() > SEARCH_HISTORY_MAX_ENTRIES) {    history.remove(history.size() - 1);  }  return history;}  }
class C{  private void createContextMenus(){  this.popWorld=new JPopupMenu();  JMenuItem mnuShiftWorld=new JMenuItem(Messages.getString("menu.context.world.shift"));  mnuShiftWorld.setActionCommand("shiftWorld");  mnuShiftWorld.addActionListener(this);  mnuShiftWorld.setIcon(Icons.SHIFT);  JMenuItem mnuEditWorld=new JMenuItem(Messages.getString("menu.context.world.edit"));  mnuEditWorld.setActionCommand("editWorld");  mnuEditWorld.addActionListener(this);  mnuEditWorld.setIcon(Icons.EDIT_WORLD);  JMenuItem mnuClearWorld=new JMenuItem(Messages.getString("menu.context.world.removeAll"));  mnuClearWorld.setActionCommand("clear-all");  mnuClearWorld.addActionListener(this);  mnuClearWorld.setIcon(Icons.REMOVE);  JMenuItem mnuSettings=new JMenuItem(Messages.getString("menu.context.world.settings"));  mnuSettings.setActionCommand("settings");  mnuSettings.addActionListener(this);  mnuSettings.setIcon(Icons.SETTINGS);  this.popWorld.add(mnuEditWorld);  this.popWorld.add(mnuSettings);  this.popWorld.add(mnuShiftWorld);  this.popWorld.addSeparator();  this.popWorld.add(mnuClearWorld);  this.popBounds=new JPopupMenu();  JMenuItem mnuSetBounds=new JMenuItem(Messages.getString("menu.context.bounds.set"));  mnuSetBounds.setActionCommand("set-bounds");  mnuSetBounds.addActionListener(this);  mnuSetBounds.setIcon(Icons.SET_BOUNDS);  JMenuItem mnuUnsetBounds=new JMenuItem(Messages.getString("menu.context.bounds.unset"));  mnuUnsetBounds.setActionCommand("unset-bounds");  mnuUnsetBounds.addActionListener(this);  mnuUnsetBounds.setIcon(Icons.UNSET_BOUNDS);  this.popBounds.add(mnuSetBounds);  this.popBounds.add(mnuUnsetBounds);  this.popBodyFolder=new JPopupMenu();  JMenuItem mnuAddbody=new JMenuItem(Messages.getString("menu.context.bodyFolder.addBody"));  JMenuItem mnuRemoveAllBodies=new JMenuItem(Messages.getString("menu.context.bodyFolder.removeAll"));  mnuAddbody.setActionCommand("addBody");  mnuRemoveAllBodies.setActionCommand("removeAllBodies");  mnuAddbody.addActionListener(this);  mnuRemoveAllBodies.addActionListener(this);  mnuAddbody.setIcon(Icons.ADD_BODY);  mnuRemoveAllBodies.setIcon(Icons.REMOVE);  this.popBodyFolder.add(mnuAddbody);  this.popBodyFolder.addSeparator();  this.popBodyFolder.add(mnuRemoveAllBodies);  this.popJointFolder=new JPopupMenu();  JMenuItem mnuAddAngleJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addAngleJoint"));  JMenuItem mnuAddDistanceJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addDistanceJoint"));  JMenuItem mnuAddFrictionJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addFrictionJoint"));  JMenuItem mnuAddPrismaticJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addPrismaticJoint"));  JMenuItem mnuAddPulleyJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addPulleyJoint"));  JMenuItem mnuAddRevoluteJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addRevoluteJoint"));  JMenuItem mnuAddRopeJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addRopeJoint"));  JMenuItem mnuAddWeldJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addWeldJoint"));  JMenuItem mnuAddWheelJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addWheelJoint"));  JMenuItem mnuAddMotorJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addMotorJoint"));  JMenuItem mnuAddMouseJoint=new JMenuItem(Messages.getString("menu.context.jointFolder.addMouseJoint"));  JMenuItem mnuRemoveAllJoints=new JMenuItem(Messages.getString("menu.context.jointFolder.removeAll"));  mnuAddAngleJoint.setIcon(Icons.ADD_ANGLE_JOINT);  mnuAddDistanceJoint.setIcon(Icons.ADD_DISTANCE_JOINT);  mnuAddFrictionJoint.setIcon(Icons.ADD_FRICTION_JOINT);  mnuAddMouseJoint.setIcon(Icons.ADD_MOUSE_JOINT);  mnuAddPrismaticJoint.setIcon(Icons.ADD_PRISMATIC_JOINT);  mnuAddPulleyJoint.setIcon(Icons.ADD_PULLEY_JOINT);  mnuAddRevoluteJoint.setIcon(Icons.ADD_REVOLUTE_JOINT);  mnuAddRopeJoint.setIcon(Icons.ADD_ROPE_JOINT);  mnuAddWeldJoint.setIcon(Icons.ADD_WELD_JOINT);  mnuAddWheelJoint.setIcon(Icons.ADD_WHEEL_JOINT);  mnuAddMotorJoint.setIcon(Icons.ADD_MOTOR_JOINT);  mnuRemoveAllJoints.setIcon(Icons.REMOVE);  mnuAddAngleJoint.setActionCommand("addAngleJoint");  mnuAddDistanceJoint.setActionCommand("addDistanceJoint");  mnuAddFrictionJoint.setActionCommand("addFrictionJoint");  mnuAddPrismaticJoint.setActionCommand("addPrismaticJoint");  mnuAddPulleyJoint.setActionCommand("addPulleyJoint");  mnuAddRevoluteJoint.setActionCommand("addRevoluteJoint");  mnuAddRopeJoint.setActionCommand("addRopeJoint");  mnuAddWeldJoint.setActionCommand("addWeldJoint");  mnuAddWheelJoint.setActionCommand("addWheelJoint");  mnuAddMouseJoint.setActionCommand("addMouseJoint");  mnuAddMotorJoint.setActionCommand("addMotorJoint");  mnuRemoveAllJoints.setActionCommand("removeAllJoints");  mnuAddAngleJoint.addActionListener(this);  mnuAddDistanceJoint.addActionListener(this);  mnuAddFrictionJoint.addActionListener(this);  mnuAddPrismaticJoint.addActionListener(this);  mnuAddPulleyJoint.addActionListener(this);  mnuAddRevoluteJoint.addActionListener(this);  mnuAddRopeJoint.addActionListener(this);  mnuAddWeldJoint.addActionListener(this);  mnuAddWheelJoint.addActionListener(this);  mnuAddMouseJoint.addActionListener(this);  mnuAddMotorJoint.addActionListener(this);  mnuRemoveAllJoints.addActionListener(this);  this.popJointFolder.add(mnuAddDistanceJoint);  this.popJointFolder.add(mnuAddMouseJoint);  this.popJointFolder.add(mnuAddPrismaticJoint);  this.popJointFolder.add(mnuAddPulleyJoint);  this.popJointFolder.add(mnuAddRevoluteJoint);  this.popJointFolder.add(mnuAddRopeJoint);  this.popJointFolder.add(mnuAddWeldJoint);  this.popJointFolder.add(mnuAddWheelJoint);  this.popJointFolder.addSeparator();  this.popJointFolder.add(mnuAddAngleJoint);  this.popJointFolder.add(mnuAddFrictionJoint);  this.popJointFolder.add(mnuAddMotorJoint);  this.popJointFolder.addSeparator();  this.popJointFolder.add(mnuRemoveAllJoints);  this.popBody=new JPopupMenu();  JMenuItem mnuEditBody=new JMenuItem(Messages.getString("menu.context.body.edit"));  JMenuItem mnuRemoveBody=new JMenuItem(Messages.getString("menu.context.body.remove"));  JMenuItem mnuAddCircle=new JMenuItem(Messages.getString("menu.context.body.addCircleFixture"));  JMenuItem mnuAddRectangle=new JMenuItem(Messages.getString("menu.context.body.addRectangleFixture"));  JMenuItem mnuAddPolygon=new JMenuItem(Messages.getString("menu.context.body.addConvexPolygonFixture"));  JMenuItem mnuAddSegment=new JMenuItem(Messages.getString("menu.context.body.addSegmentFixture"));  JMenuItem mnuAddHull=new JMenuItem(Messages.getString("menu.context.body.addConvexHullFixture"));  JMenuItem mnuAddDecompose=new JMenuItem(Messages.getString("menu.context.body.addNonConvexPolygonFixtures"));  JMenuItem mnuRemoveAllFixtures=new JMenuItem(Messages.getString("menu.context.body.removeAll"));  JMenuItem mnuApplyForce=new JMenuItem(Messages.getString("menu.context.body.applyForce"));  JMenuItem mnuApplyTorque=new JMenuItem(Messages.getString("menu.context.body.applyTorque"));  JMenuItem mnuApplyForceAtPoint=new JMenuItem(Messages.getString("menu.context.body.applyForceAtPoint"));  JMenuItem mnuClearForce=new JMenuItem(Messages.getString("menu.context.body.clearAccumulatedForce"));  JMenuItem mnuClearTorque=new JMenuItem(Messages.getString("menu.context.body.clearAccumulatedTorque"));  JMenuItem mnuCenterOnOrigin=new JMenuItem(Messages.getString("menu.context.body.centerOnOrigin"));  mnuEditBody.setIcon(Icons.EDIT_BODY);  mnuRemoveBody.setIcon(Icons.REMOVE_BODY);  mnuAddCircle.setIcon(Icons.ADD_CIRCLE);  mnuAddRectangle.setIcon(Icons.ADD_RECTANGLE);  mnuAddPolygon.setIcon(Icons.ADD_POLYGON);  mnuAddSegment.setIcon(Icons.ADD_SEGMENT);  mnuAddHull.setIcon(Icons.ADD_CONVEX_HULL);  mnuAddDecompose.setIcon(Icons.ADD_NON_CONVEX_POLYGON);  mnuRemoveAllFixtures.setIcon(Icons.REMOVE);  mnuApplyForce.setIcon(Icons.FORCE);  mnuApplyTorque.setIcon(Icons.TORQUE);  mnuApplyForceAtPoint.setIcon(Icons.FORCE_AT_POINT);  mnuClearForce.setIcon(Icons.CLEAR_ALL);  mnuClearTorque.setIcon(Icons.CLEAR_ALL);  mnuCenterOnOrigin.setIcon(Icons.CENTER_ON_ORIGIN);  mnuEditBody.setActionCommand("editBody");  mnuRemoveBody.setActionCommand("removeBody");  mnuAddCircle.setActionCommand("addCircleFixture");  mnuAddRectangle.setActionCommand("addRectangleFixture");  mnuAddPolygon.setActionCommand("addPolygonFixture");  mnuAddSegment.setActionCommand("addSegmentFixture");  mnuAddHull.setActionCommand("addHullFixture");  mnuAddDecompose.setActionCommand("addDecompose");  mnuRemoveAllFixtures.setActionCommand("removeAllFixtures");  mnuApplyForce.setActionCommand("applyForce");  mnuApplyTorque.setActionCommand("applyTorque");  mnuApplyForceAtPoint.setActionCommand("applyForceAtPoint");  mnuClearForce.setActionCommand("clearForce");  mnuClearTorque.setActionCommand("clearTorque");  mnuCenterOnOrigin.setActionCommand("centerOnOrigin");  mnuEditBody.addActionListener(this);  mnuRemoveBody.addActionListener(this);  mnuAddCircle.addActionListener(this);  mnuAddRectangle.addActionListener(this);  mnuAddPolygon.addActionListener(this);  mnuAddSegment.addActionListener(this);  mnuAddHull.addActionListener(this);  mnuAddDecompose.addActionListener(this);  mnuRemoveAllFixtures.addActionListener(this);  mnuApplyForce.addActionListener(this);  mnuApplyTorque.addActionListener(this);  mnuApplyForceAtPoint.addActionListener(this);  mnuClearForce.addActionListener(this);  mnuClearTorque.addActionListener(this);  mnuCenterOnOrigin.addActionListener(this);  this.popBody.add(mnuEditBody);  this.popBody.add(mnuRemoveBody);  this.popBody.addSeparator();  this.popBody.add(mnuAddCircle);  this.popBody.add(mnuAddRectangle);  this.popBody.add(mnuAddPolygon);  this.popBody.add(mnuAddSegment);  this.popBody.addSeparator();  this.popBody.add(mnuAddHull);  this.popBody.add(mnuAddDecompose);  this.popBody.addSeparator();  this.popBody.add(mnuRemoveAllFixtures);  this.popBody.addSeparator();  this.popBody.add(mnuApplyForce);  this.popBody.add(mnuApplyTorque);  this.popBody.add(mnuApplyForceAtPoint);  this.popBody.addSeparator();  this.popBody.add(mnuClearForce);  this.popBody.add(mnuClearTorque);  this.popBody.addSeparator();  this.popBody.add(mnuCenterOnOrigin);  this.popFixture=new JPopupMenu();  JMenuItem mnuEditFixture=new JMenuItem(Messages.getString("menu.context.fixture.edit"));  JMenuItem mnuRemoveFixture=new JMenuItem(Messages.getString("menu.context.fixture.remove"));  mnuEditFixture.setIcon(Icons.EDIT_POLYGON);  mnuRemoveFixture.setIcon(Icons.REMOVE_POLYGON);  mnuEditFixture.setActionCommand("editFixture");  mnuRemoveFixture.setActionCommand("removeFixture");  mnuEditFixture.addActionListener(this);  mnuRemoveFixture.addActionListener(this);  this.popFixture.add(mnuEditFixture);  this.popFixture.add(mnuRemoveFixture);  this.popJoint=new JPopupMenu();  JMenuItem mnuEditJoint=new JMenuItem(Messages.getString("menu.context.joint.edit"));  JMenuItem mnuRemoveJoint=new JMenuItem(Messages.getString("menu.context.joint.remove"));  mnuEditJoint.setIcon(Icons.EDIT_ANGLE_JOINT);  mnuRemoveJoint.setIcon(Icons.REMOVE_ANGLE_JOINT);  mnuEditJoint.setActionCommand("editJoint");  mnuRemoveJoint.setActionCommand("removeJoint");  mnuEditJoint.addActionListener(this);  mnuRemoveJoint.addActionListener(this);  this.popJoint.add(mnuEditJoint);  this.popJoint.add(mnuRemoveJoint);  this.popRayFolder=new JPopupMenu();  JMenuItem mnuAddRay=new JMenuItem(Messages.getString("menu.context.ray.add"));  JMenuItem mnuRemoveAllRays=new JMenuItem(Messages.getString("menu.context.ray.removeAll"));  mnuAddRay.setIcon(Icons.ADD_RAY);  mnuRemoveAllRays.setIcon(Icons.REMOVE);  mnuAddRay.setActionCommand("addRay");  mnuRemoveAllRays.setActionCommand("removeAllRays");  mnuAddRay.addActionListener(this);  mnuRemoveAllRays.addActionListener(this);  this.popRayFolder.add(mnuAddRay);  this.popRayFolder.addSeparator();  this.popRayFolder.add(mnuRemoveAllRays);  this.popRay=new JPopupMenu();  JMenuItem mnuEditRay=new JMenuItem(Messages.getString("menu.context.ray.edit"));  JMenuItem mnuRemoveRay=new JMenuItem(Messages.getString("menu.context.ray.remove"));  mnuEditRay.setIcon(Icons.EDIT_RAY);  mnuRemoveRay.setIcon(Icons.REMOVE_RAY);  mnuEditRay.setActionCommand("editRay");  mnuRemoveRay.setActionCommand("removeRay");  mnuEditRay.addActionListener(this);  mnuRemoveRay.addActionListener(this);  this.popRay.add(mnuEditRay);  this.popRay.add(mnuRemoveRay);}  }
class C{  private ReadOnlyFiles processFileArray(IFile[] files){  ReadOnlyFiles result=new ReadOnlyFiles();  for (  IFile file : files) {    if (isReadOnly(file)) {      try {        ISVNLocalResource resource=SVNWorkspaceRoot.getSVNResourceFor(file);        if (resource.isManaged()) {          if (hasNeedsLockProperty(resource))           result.addManaged(file); else           result.addUnManaged(file);        } else         result.addUnManaged(file);      } catch (      SVNException e) {        result.addUnManaged(file);      }    }  }  return result;}  }
class C{  public void removeFromTemplateContext(String name){  if (templateContext != null)   templateContext.remove(name);}  }
class C{  public final void removePropertyChangeListener(PropertyChangeListener listener){  getChangeSupport().removePropertyChangeListener(listener);}  }
class C{  public ResourcesPoet addColor(String name,String value){  Element element=document.createElement("color");  element.setAttribute("name",name);  element.appendChild(document.createTextNode(value));  resourceElement.appendChild(element);  return this;}  }
class C{  public boolean isMenuPathEnabled(@NotNull String... path){  return getMenuFixture().isMenuPathEnabled(path);}  }
class C{  public ObjectColumn(){  this(Object.class);}  }
class C{  public static int compare(byte[] buffer1,byte[] buffer2){  if (buffer1 == buffer2) {    return 0;  }  int i=0;  int j=0;  for (; i < buffer1.length && j < buffer2.length; i++, j++) {    int a=(buffer1[i] & 0xff);    int b=(buffer2[j] & 0xff);    if (a != b) {      return a - b;    }  }  return 0;}  }
class C{  private T max(T a,T b){  return a.getReal() > b.getReal() ? a : b;}  }
class C{  public static double averageArea(int level){  return S2Projections.AVG_AREA.getValue(level);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @POST @Path("{table}") @Consumes({MediaType.APPLICATION_JSON,"application/x.json-deltas"}) @Timed(name="bv.emodb.sor.DataStoreResource1.simpleUpdateTableStream",absolute=true) @ApiOperation(value="Imports an arbitrary size stream of deltas and/or JSON objects.",notes=" Imports an arbitrary size stream of deltas and/or JSON objects.  Two formats are supported: array syntax\n" + " ('[' object ',' object ',' ... ']') and whitespace-separated objects (object whitespace object whitespace ...)\n" + " Each piece of content must have a top-level \"~id\" attribute that determines the object key in the SoR.",response=SuccessResponse.class) public SuccessResponse simpleUpdateTableStream(@PathParam("table") final String table,@QueryParam("changeId") TimeUUIDParam changeIdParam,@QueryParam("audit") AuditParam auditParam,@QueryParam("consistency") @DefaultValue("STRONG") WriteConsistencyParam consistencyParam,@QueryParam("facade") BooleanParam facade,@QueryParam("tag") List<String> tags,@Authenticated Subject subject,Reader in){  return doSimpleUpdateStream(Optional.of(table),changeIdParam,auditParam,consistencyParam,in,facade,subject);}  }
class C{  public void cancelInteraction(){  finishInteraction(myLastMouseX,myLastMouseY,ourLastStateMask,true);}  }
class C{  private Response buildJSONResponse(Object o) throws JsonProcessingException {  return newFixedLengthResponse(MAPPER.writeValueAsString(o));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_DEATH_TO_B(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400140,value0,value1);}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public static TestDimensionConfig buildStandardLuceneDimensionConfig(TestApiDimensionName dimensionName){  return new TestDimensionConfig(dimensionName,dimensionName.asName(),getDefaultKeyValueStore(dimensionName),LuceneSearchProviderManager.getInstance(dimensionName.asName()),getDefaultFields(),getDefaultFields());}  }
class C{  public InputSource resolveEntity(String arg0,String arg1) throws SAXException, IOException {  return new InputSource(new ByteArrayInputStream("".getBytes()));}  }
class C{  public static void searchInScope(PsiElement originalElement,Processor<BuildElement> processor){  boolean topLevelScope=true;  PsiElement element=originalElement;  while (!(element instanceof PsiFileSystemItem)) {    PsiElement parent=element.getParent();    if (parent instanceof BuildFile) {      if (!((BuildFile)parent).searchSymbolsInScope(processor,topLevelScope ? element : null)) {        return;      }    } else     if (parent instanceof FunctionStatement) {      topLevelScope=false;      for (      Parameter param : ((FunctionStatement)parent).getParameters()) {        if (!processor.process(param)) {          return;        }      }    } else     if (parent instanceof ForStatement) {      for (      Expression expr : ((ForStatement)parent).getForLoopVariables()) {        if (expr instanceof TargetExpression && !processor.process(expr)) {          return;        }      }    } else     if (parent instanceof StatementList) {      if (!visitChildAssignmentStatements((BuildElement)parent,(Processor)processor)) {        return;      }    }    element=parent;  }}  }
class C{  void fillDotGraph(String prefix,DotGraph out){  Map<PurityNode,String> nodeId=new HashMap<PurityNode,String>();  int id=0;  Iterator it=nodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    String label="N" + prefix + "_"+ id;    DotGraphNode node=out.drawNode(label);    node.setLabel(n.toString());    if (!n.isInside()) {      node.setStyle("dashed");      node.setAttribute("color","gray50");    }    if (globEscape.contains(n))     node.setAttribute("fontcolor","red");    nodeId.put(n,label);    id++;  }  it=edges.keySet().iterator();  while (it.hasNext()) {    PurityNode src=(PurityNode)it.next();    Iterator itt=edges.get(src).iterator();    while (itt.hasNext()) {      PurityEdge e=(PurityEdge)itt.next();      DotGraphEdge edge=out.drawEdge(nodeId.get(e.getSource()),nodeId.get(e.getTarget()));      edge.setLabel(e.getField());      if (!e.isInside()) {        edge.setStyle("dashed");        edge.setAttribute("color","gray50");        edge.setAttribute("fontcolor","gray40");      }    }  }  it=locals.keySet().iterator();  while (it.hasNext()) {    Local local=(Local)it.next();    if (!locals.get(local).isEmpty()) {      String label="L" + prefix + "_"+ id;      DotGraphNode node=out.drawNode(label);      node.setLabel(local.toString());      node.setShape("plaintext");      Iterator itt=locals.get(local).iterator();      while (itt.hasNext()) {        PurityNode dst=(PurityNode)itt.next();        out.drawEdge(label,nodeId.get(dst));      }      id++;    }  }  if (!ret.isEmpty()) {    DotGraphNode node=out.drawNode("ret_" + prefix);    node.setLabel("ret");    node.setShape("plaintext");    Iterator itt=ret.iterator();    while (itt.hasNext()) {      PurityNode dst=(PurityNode)itt.next();      out.drawEdge("ret_" + prefix,nodeId.get(dst));    }  }  it=mutated.keySet().iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    Iterator itt=mutated.get(n).iterator();    while (itt.hasNext()) {      String f=(String)itt.next();      String label="M" + prefix + "_"+ id;      DotGraphNode node=out.drawNode(label);      node.setLabel("");      node.setShape("plaintext");      DotGraphEdge edge=out.drawEdge(nodeId.get(n),label);      edge.setLabel(f);      id++;    }  }}  }
class C{  @Override public boolean hasAttribute(String name){  return getAttributeNode(name) != null;}  }
class C{  String normalize(String s){  return null;}  }
class C{  public static List<String> readLines(File file,Charset encoding) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.readLines(in,Charsets.toCharset(encoding));  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public static boolean isIntegerType(Class type){  return (type == byte.class || type == short.class || type == int.class || type == long.class);}  }
class C{  public static int copy(InputStream in,OutputStream out,boolean closeAfterDone) throws IOException {  try {    if (in == null || out == null)     return 0;    byte[] bb=new byte[1024 * 4];    int total=0;    int len=in.read(bb);    while (len > 0) {      out.write(bb,0,len);      total+=len;      len=in.read(bb);      out.flush();    }    return total;  }  finally {    if (closeAfterDone) {      if (in != null) {        in.close();      }      if (out != null) {        out.close();      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_HE_ENTERED_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1400009,value0);}  }
class C{  @NotNull public List<Emotion> findEmotionFaces(@NotNull String image){  return emotionBuilder.emotionRecognition(image).withResult();}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public SingleStaticImportDecl fullCopy(){  SingleStaticImportDecl tree=(SingleStaticImportDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected boolean isEnabledForMultipleResources(){  return false;}  }
class C{  public void replaceFeatureTypeStyle(FeatureTypeStyle newFTS){  List<FeatureTypeStyle> ftsList=this.symbolData.getStyle().featureTypeStyles();  int indexFound=-1;  int index=0;  for (  FeatureTypeStyle fts : ftsList) {    if (fts == this.symbolData.getFeatureTypeStyle()) {      indexFound=index;      break;    } else {      index++;    }  }  if (indexFound > -1) {    ftsList.remove(indexFound);    ftsList.add(indexFound,newFTS);    setFeatureTypeStyle(newFTS);  }}  }
class C{  private void notify_1(){  bleManager.notifyDevice(UUID_SERVICE,UUID_NOTIFY_1,notifyCallback_1);}  }
class C{  public ActivityDelegateImpl(Class<?> regularClass,Class<?> incognitoClass){  super(regularClass,incognitoClass);}  }
class C{  public static <K,U>LinkedHashMap<K,U> createLinkedMap(SimpleEntry<K,U>... entries){  return Stream.of(entries).collect(entryToLinkedMap());}  }
class C{  @Override public void createUI(){  FieldPanel fieldPanel=createFieldPanel(0,"");  fieldPanel.setLayout(new BorderLayout());  wktPanel=new WKTDetails(this,FunctionManager.getInstance());  fieldPanel.add(wktPanel,BorderLayout.CENTER);  Dimension panelSize=wktPanel.getPanelSize();  fieldPanel.setPreferredSize(panelSize);}  }
class C{  @SuppressWarnings("rawtypes") public boolean contexsByAnyCallEdge(Edge sootEdge,Local l,PtSensVisitor visitor){  CgEdge ctxt=geomPts.getInternalEdgeFromSootEdge(sootEdge);  if (ctxt == null || ctxt.is_obsoleted == true)   return false;  LocalVarNode vn=geomPts.findLocalVarNode(l);  if (vn == null) {    return false;  }  IVarAbstraction pn=geomPts.findInternalNode(vn);  if (pn == null) {    return false;  }  pn=pn.getRepresentative();  if (!pn.hasPTResult())   return false;  SootMethod sm=vn.getMethod();  int target=geomPts.getIDFromSootMethod(sm);  if (target == -1)   return false;  long L=ctxt.map_offset;  long R=L + max_context_size_block[rep_cg[ctxt.s]];  assert L < R;  visitor.prepare();  prepareIntervalPropagations();  if (propagateIntervals(ctxt.t,L,R,target)) {    ContextsCollector targetContexts=contextsForMethods[target];    for (    SimpleInterval si : targetContexts.bars) {      assert si.L < si.R;      pn.get_all_context_sensitive_objects(si.L,si.R,visitor);    }    targetContexts.clear();  }  visitor.finish();  return visitor.numOfDiffObjects() != 0;}  }
class C{  @Override public int discretize(int value){  double[] x=new double[]{value};  double[] probs=this.mixtureModel.componentProbabilities(x);  if (this.extraZero && value == 0)   return 0;  int maxClass=0;  double maxP=0f;  for (int i=0; i < mixtureModel.totalComponents; i++) {    if (probs[i] > maxP) {      maxClass=i;      maxP=probs[i];    }  }  int maxClassMean=(int)mixtureModel.components[maxClass].meanVector[0];  return maxClassMean;}  }
class C{  public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  public boolean equals(String s){  if (s == null) {    return false;  }  if (length != s.length()) {    return false;  }  for (int i=0; i < length; i++) {    if (ch[offset + i] != s.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public void widgetSelected(SelectionEvent e){  List checkedItems=new ArrayList();  TableItem[] items=tableViewer.getTable().getItems();  for (int i=0; i < items.length; i++) {    if (items[i].getChecked())     checkedItems.add(items[i].getData());  }  int column=tableViewer.getTable().indexOf((TableColumn)e.widget);  setSortColumn(tableViewer,column);  items=tableViewer.getTable().getItems();  for (int i=0; i < items.length; i++) {    if (checkedItems.contains(items[i].getData()))     items[i].setChecked(true);  }}  }
class C{  public void addOption(String key,String title){  keyOrderList.add(key);  optionMap.put(key,title);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyNotEqual(String propertyName,Object value){  return property(propertyName,notEqual(value));}  }
class C{  public void merge(DocumentNGramGraph dgOtherObject,double fWeightPercent){  mergeGraph(dgOtherObject,fWeightPercent);}  }
class C{  @Override public void exceptionEntry(ExceptionEntry exceptionLogEntry){  throw new UnsupportedOperationException();}  }
class C{  public void write(Writer w,boolean ensureQIIMECompatible,boolean includeSecret) throws IOException {  final Set<String> attributes=getAttributeSet();  w.write(SAMPLE_ID);  if (ensureQIIMECompatible) {    if (attributes.contains("BarcodeSequence"))     w.write("\tBarcodeSequence");    w.write("\tLinkerPrimerSequence");    for (    String name : getAttributeOrder()) {      if (!name.equals(SAMPLE_ID) && !name.equals("BarcodeSequence") && !name.equals("LinkerPrimerSequence")&& !name.equals("Description")&& (includeSecret || !isSecretAttribute(name))) {        w.write("\t" + name);      }    }    w.write("\tDescription");  } else {    for (    String name : getAttributeOrder()) {      if (!name.equals(SAMPLE_ID) && !name.equals("BarcodeSequence") && !name.equals("LinkerPrimerSequence")&& (includeSecret || !isSecretAttribute(name))) {        w.write("\t" + name);      }    }  }  w.write("\n");  if (description != null && description.length() > 0)   w.write((description.startsWith("#") ? description : description) + "\n");  for (  String sample : getSampleOrder()) {    w.write(sample);    final Map<String,Object> attributes2value=getAttributesToValues(sample);    if (attributes2value != null) {      if (ensureQIIMECompatible) {        if (attributes.contains("BarcodeSequence")) {          Object barcodeSequence=attributes2value.get("BarcodeSequence");          if (barcodeSequence != null)           w.write("\t" + Basic.quoteIfContainsTab(barcodeSequence)); else           w.write("\tAAA");        }        Object linkerPrimerSequence=attributes2value.get("LinkerPrimerSequence");        if (linkerPrimerSequence != null)         w.write("\t" + Basic.quoteIfContainsTab(linkerPrimerSequence)); else         w.write("\t");        for (        String name : getAttributeOrder()) {          if (!name.equals(SAMPLE_ID) && !name.equals("BarcodeSequence") && !name.equals("LinkerPrimerSequence")&& (includeSecret || !isSecretAttribute(name))) {            Object value=attributes2value.get(name);            if (value != null)             w.write("\t" + Basic.quoteIfContainsTab(value)); else             w.write("\tNA");          }        }        Object description=attributes2value.get("Description");        if (description != null)         w.write("\t" + Basic.quoteIfContainsTab(description)); else         w.write("\tNA");      } else {        for (        String name : getAttributeOrder()) {          if (!name.equals(SAMPLE_ID) && !name.equals("BarcodeSequence") && !name.equals("LinkerPrimerSequence")&& (includeSecret || !isSecretAttribute(name))) {            Object value=attributes2value.get(name);            if (value != null)             w.write("\t" + Basic.quoteIfContainsTab(value)); else             w.write("\tNA");          }        }      }    }    w.write("\n");  }  w.flush();}  }
class C{  @SuppressWarnings("UnusedParameters") void onTerminate(@Nullable Module module,@Nullable VirtualFile workingDir,@NotNull String... args){}  }
class C{  @Override protected boolean scanStartElementAfterName() throws IOException, XNIException {  String rawname=fElementQName.rawname;  if (fBindNamespaces) {    fNamespaceContext.pushContext();    if (fScannerState == SCANNER_STATE_ROOT_ELEMENT) {      if (fPerformValidation) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_GRAMMAR_NOT_FOUND",new Object[]{rawname},XMLErrorReporter.SEVERITY_ERROR);        if (fDoctypeName == null || !fDoctypeName.equals(rawname)) {          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"RootElementTypeMustMatchDoctypedecl",new Object[]{fDoctypeName,rawname},XMLErrorReporter.SEVERITY_ERROR);        }      }    }  }  fCurrentElement=fElementStack.pushElement(fElementQName);  boolean empty=false;  fAttributes.removeAllAttributes();  do {    int c=fEntityScanner.peekChar();    if (c == '>') {      fEntityScanner.scanChar();      break;    } else     if (c == '/') {      fEntityScanner.scanChar();      if (!fEntityScanner.skipChar('>')) {        reportFatalError("ElementUnterminated",new Object[]{rawname});      }      empty=true;      break;    } else     if (!isValidNameStartChar(c) || !fSawSpace) {      if (!isValidNameStartHighSurrogate(c) || !fSawSpace) {        reportFatalError("ElementUnterminated",new Object[]{rawname});      }    }    scanAttribute(fAttributes);    fSawSpace=fEntityScanner.skipSpaces();  } while (true);  if (fBindNamespaces) {    if (fElementQName.prefix == XMLSymbols.PREFIX_XMLNS) {      fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementXMLNSPrefix",new Object[]{fElementQName.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);    }    String prefix=fElementQName.prefix != null ? fElementQName.prefix : XMLSymbols.EMPTY_STRING;    fElementQName.uri=fNamespaceContext.getURI(prefix);    fCurrentElement.uri=fElementQName.uri;    if (fElementQName.prefix == null && fElementQName.uri != null) {      fElementQName.prefix=XMLSymbols.EMPTY_STRING;      fCurrentElement.prefix=XMLSymbols.EMPTY_STRING;    }    if (fElementQName.prefix != null && fElementQName.uri == null) {      fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"ElementPrefixUnbound",new Object[]{fElementQName.prefix,fElementQName.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);    }    int length=fAttributes.getLength();    for (int i=0; i < length; i++) {      fAttributes.getName(i,fAttributeQName);      String aprefix=fAttributeQName.prefix != null ? fAttributeQName.prefix : XMLSymbols.EMPTY_STRING;      String uri=fNamespaceContext.getURI(aprefix);      if (fAttributeQName.uri != null && fAttributeQName.uri == uri) {        continue;      }      if (aprefix != XMLSymbols.EMPTY_STRING) {        fAttributeQName.uri=uri;        if (uri == null) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributePrefixUnbound",new Object[]{fElementQName.rawname,fAttributeQName.rawname,aprefix},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }        fAttributes.setURI(i,uri);      }    }    if (length > 1) {      QName name=fAttributes.checkDuplicatesNS();      if (name != null) {        if (name.uri != null) {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNSNotUnique",new Object[]{fElementQName.rawname,name.localpart,name.uri},XMLErrorReporter.SEVERITY_FATAL_ERROR);        } else {          fErrorReporter.reportError(XMLMessageFormatter.XMLNS_DOMAIN,"AttributeNotUnique",new Object[]{fElementQName.rawname,name.rawname},XMLErrorReporter.SEVERITY_FATAL_ERROR);        }      }    }  }  if (fDocumentHandler != null) {    if (empty) {      fMarkupDepth--;      if (fMarkupDepth < fEntityStack[fEntityDepth - 1]) {        reportFatalError("ElementEntityMismatch",new Object[]{fCurrentElement.rawname});      }      fDocumentHandler.emptyElement(fElementQName,fAttributes,null);      if (fBindNamespaces) {        fNamespaceContext.popContext();      }      fElementStack.popElement(fElementQName);    } else {      fDocumentHandler.startElement(fElementQName,fAttributes,null);    }  }  if (DEBUG_CONTENT_SCANNING)   System.out.println("<<< scanStartElementAfterName(): " + empty);  return empty;}  }
class C{  @RequestMapping(value="/apps/del",method=RequestMethod.POST) public JsonResponse delApp(@RequestParam("appName") String appName){  Response<Boolean> delResp=appService.delete(appName);  if (!delResp.isSuccess()) {    Logs.error("failed to delete app({}), cause: {}",appName,delResp.getErr());  }  return JsonResponse.ok(delResp.getData());}  }
class C{  public boolean connect(){  setConnectionStatus(ConnectionStatus.CONNECTING);  try {    connectAndWait(connectionDetails.getOptions());    logger.info("Successfully connected to {}",connectionDetails.getName());    setConnectionStatus(ConnectionStatus.CONNECTED);    return true;  } catch (  SpyException e) {    logger.error("Connection attempt failed",e);    setConnectionStatus(ConnectionStatus.NOT_CONNECTED);  }  return false;}  }
class C{  private boolean canModifyNext(Node node){  boolean textFirstChild=false;  Node next=node.getNextSibling();  while (next != null) {    short type=next.getNodeType();    if (type == Node.ENTITY_REFERENCE_NODE) {      Node firstChild=next.getFirstChild();      if (firstChild == null) {        return false;      }      while (firstChild != null) {        short lType=firstChild.getNodeType();        if (lType == Node.TEXT_NODE || lType == Node.CDATA_SECTION_NODE) {          textFirstChild=true;        } else         if (lType == Node.ENTITY_REFERENCE_NODE) {          if (!canModifyNext(firstChild)) {            return false;          } else {            textFirstChild=true;          }        } else {          return !textFirstChild;        }        firstChild=firstChild.getNextSibling();      }    } else     if (type == Node.TEXT_NODE || type == Node.CDATA_SECTION_NODE) {    } else {      return true;    }    next=next.getNextSibling();  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_HE_BECOME_OFFLINE(String value0){  return new SM_SYSTEM_MESSAGE(1300175,value0);}  }
class C{  protected void fireTimeoutOccured(Map<WatchedObject,Collection<WatchedObject>> watchedObjects) throws Exception {  for (  Collection<WatchedObject> bucket : watchedObjects.values()) {    _observer.timeoutOccured(bucket);  }}  }
class C{  public void addHeaderView(View view,int viewHeight,int expandHeight){  if (expandHeight != -1) {    mHeaderViewExpandHeight=ScreenUtil.dip2px(mContext,expandHeight);  }  mHeaderViews.clear();  mHeaderView=view;  if (mHeaderView.getLayoutParams() == null) {    mHeaderView.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,ScreenUtil.dip2px(mContext,viewHeight)));  }  markHeaderViewHeight(mHeaderView);  mHeaderView.getLayoutParams().height=0;  mHeaderViews.add(mHeaderView);  if (mAdapter != null) {    if (!(mAdapter instanceof XWrapAdapter)) {      mAdapter=new XWrapAdapter(mHeaderViews,mFootViews,mAdapter);    }  }}  }
class C{  public Boolean isCleanSession(){  return cleanSession;}  }
class C{  public DefaultSQLDataHandler(){  this(true);}  }
class C{  public ThreadList(){  super();}  }
class C{  public AdaptiveStepsizeFieldIntegrator(final Field<T> field,final String name,final double minStep,final double maxStep,final double scalAbsoluteTolerance,final double scalRelativeTolerance){  super(field,name);  setStepSizeControl(minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);  resetInternalState();}  }
class C{  public static Z nz(){  return new Z(R.nextGaussian(),R.nextGaussian());}  }
class C{  @Override public void endDTD(Augmentations augs) throws XNIException {  fIsImmutable=true;  if (fGrammarDescription.getRootName() == null) {    int chunk, index=0;    String currName=null;    final int size=fElementDeclCount;    ArrayList elements=new ArrayList(size);    for (int i=0; i < size; ++i) {      chunk=i >> CHUNK_SHIFT;      index=i & CHUNK_MASK;      currName=fElementDeclName[chunk][index].rawname;      elements.add(currName);    }    fGrammarDescription.setPossibleRoots(elements);  }}  }
class C{  protected void reset() throws XNIException {  int count=fComponents.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fComponents.get(i);    c.reset(this);  }}  }
class C{  public static void copy(long[] src,int srcOffset,long[] dst,int dstOffset,int len){  int srcLimit=srcOffset + len;  while (srcOffset < srcLimit) {    int srcIdx=srcOffset & 63;    int dstIdx=dstOffset & 63;    int srcRemainder=64 - srcIdx;    int dstRemainder=64 - dstIdx;    int chunkLen=Math.min(srcRemainder,dstRemainder);    long mask=maskBelow(chunkLen) << srcIdx;    dst[dstOffset >> 6]|=((src[srcOffset >> 6] & mask) >>> srcIdx) << dstOffset;    srcOffset+=chunkLen;    dstOffset+=chunkLen;  }}  }
class C{  public int scanChar() throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(scanChar: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position++];  boolean external=false;  if (c == '\n' || (c == '\r' && (external=fCurrentEntity.isExternal()))) {    fCurrentEntity.lineNumber++;    fCurrentEntity.columnNumber=1;    if (fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=(char)c;      load(1,false);    }    if (c == '\r' && external) {      if (fCurrentEntity.ch[fCurrentEntity.position++] != '\n') {        fCurrentEntity.position--;      }      c='\n';    }  }  if (DEBUG_BUFFER) {    System.out.print(")scanChar: ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> '" + (char)c + "'");  }  fCurrentEntity.columnNumber++;  return c;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o instanceof TxnMgrProxy) {    TxnMgrProxy other=(TxnMgrProxy)o;    return proxyID.getLeastSignificantBits() == other.proxyID.getLeastSignificantBits() && proxyID.getMostSignificantBits() == other.proxyID.getMostSignificantBits();  } else   return false;}  }
class C{  public DelegatingHostResolver(AdvancedHostResolver resolver){  this.resolver=resolver;}  }
class C{  public static MutableContextSet fromEntries(Iterable<Map.Entry<String,String>> iterable){  MutableContextSet set=new MutableContextSet();  set.addAll(iterable);  return set;}  }
class C{  public DOMParserImpl(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this((XMLParserConfiguration)ObjectFactory.createObject("mf.org.apache.xerces.xni.parser.XMLParserConfiguration","mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration"));  fConfiguration.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.SYMBOL_TABLE_PROPERTY,symbolTable);  fConfiguration.setProperty(Constants.XERCES_PROPERTY_PREFIX + Constants.XMLGRAMMAR_POOL_PROPERTY,grammarPool);}  }
class C{  public UtilsCheckLinkQuery checkLink(String url){  return new UtilsCheckLinkQuery(getClient(),url);}  }
class C{  private PhoneUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  @Override public void start(Map<String,String> props) throws ConnectException {  fLog.trace("Starting");  String configuration="\n";  configuration=configuration + '\t' + HOST_CONFIG+ ':'+ props.get(HOST_CONFIG)+ '\n';  configuration=configuration + '\t' + DATABASE_CONFIG+ ':'+ props.get(DATABASE_CONFIG)+ '\n';  configuration=configuration + '\t' + USER_CONFIG+ ':'+ props.get(USER_CONFIG)+ '\n';  configuration=configuration + '\t' + PASSWORD_CONFIG+ ':'+ props.get(PASSWORD_CONFIG)+ '\n';  configuration=configuration + '\t' + SCHEMA_CONFIG+ ':'+ props.get(SCHEMA_CONFIG)+ '\n';  configuration=configuration + '\t' + TABLE_CONFIG+ ':'+ props.get(TABLE_CONFIG)+ '\n';  configuration=configuration + '\t' + COLUMN_CONFIG+ ':'+ props.get(COLUMN_CONFIG)+ '\n';  configuration=configuration + '\t' + PARSE_CONFIG+ ':'+ props.get(PARSE_CONFIG)+ '\n';  configuration=configuration + '\t' + BUFFER_CONFIG+ ':'+ props.get(BUFFER_CONFIG)+ '\n';  configuration=configuration + '\t' + DELIVERY_CONFIG+ ':'+ props.get(DELIVERY_CONFIG)+ '\n';  fLog.info("Sink connector configuration: " + configuration);  try {    String host=props.get(HOST_CONFIG);    String database=props.get(DATABASE_CONFIG);    String username=props.get(USER_CONFIG);    String password=props.get(PASSWORD_CONFIG);    String schema=props.get(SCHEMA_CONFIG);    String table=props.get(TABLE_CONFIG);    String columnList=props.get(COLUMN_CONFIG);    Integer bufferSize=Integer.parseInt(props.get(BUFFER_CONFIG));    String pathList=props.get(PARSE_CONFIG);    String delivery=props.get(DELIVERY_CONFIG);    if (database == null)     throw new ConnectException("Database not configured");    if (schema == null)     throw new ConnectException("Schema not configured");    if (table == null)     throw new ConnectException("Table not configured");    if (columnList == null)     throw new ConnectException("Columns not configured");    if (pathList == null)     throw new ConnectException("Parse paths not configured");    if (bufferSize < 0)     throw new ConnectException("Buffer size configuration is invalid");    String[] columns=columnList.split("\\,");    String[] paths=pathList.split("\\,");    iPaths=new Path[paths.length];    for (int i=0; i < paths.length; ++i) {      iPaths[i]=new Path(paths[i]);    }    if (iPaths.length != (columns.length))     throw new ConnectException("Number of parse paths must match number of table columns");    iDelivery=SYNCHRONIZED;    if (delivery != null) {      for (int i=0; i < DELIVERY.length; ++i) {        if (delivery.equalsIgnoreCase(DELIVERY[i]))         iDelivery=i;      }    }    iWriter=new TableWriter(host,database,username,password,table,columns,bufferSize);    iConnection=iWriter.getConnection();    Statement statement=iConnection.createStatement();    if (iDelivery == SYNCHRONIZED) {      String start=SYNC_START.replace("<S>",schema).replace("<T>",table);      statement.executeQuery(start);      String state=SYNC_STATE.replace("<S>",schema).replace("<T>",table);      ResultSet resultSet=statement.executeQuery(state);      if (resultSet.isBeforeFirst()) {        HashMap<TopicPartition,Long> offsetMap=new HashMap<>();        while (resultSet.next()) {          String topic=resultSet.getString(1);          Integer partition=resultSet.getInt(2);          Long offset=resultSet.getLong(3);          offsetMap.put(new TopicPartition(topic,partition),offset);        }        resultSet.close();        iTaskContext.offset(offsetMap);      }      String flush=SYNC_FLUSH.replace("<S>",schema).replace("<T>",table);      iFlushStatement=iConnection.prepareStatement(flush);    } else {      String drop=SYNC_DROP.replace("<S>",schema).replace("<T>",table);      statement.executeQuery(drop);    }    iParser=new Parser();  } catch (  NumberFormatException|SQLException|IOException exception) {    throw new ConnectException(exception);  }}  }
class C{  @Override public Histogram histogram(){  return si.histogram();}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY,long time){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX,time);  mScrollerY.fling(startY,velocityY,minY,maxY,overY,time);}  }
class C{  private boolean doesSVNDirectoryExist(){  boolean isSVNFolder=false;  try {    projectStatus=SVNWorkspaceRoot.peekResourceStatusFor(project);    ;    isSVNFolder=(projectStatus != null) && projectStatus.hasRemote();  } catch (  final SVNException e) {    Shell shell=null;    if (getContainer() != null) {      shell=getContainer().getShell();    }    SVNUIPlugin.openError(shell,null,null,e);  }  return isSVNFolder;}  }
class C{  static public InputStream createArtifactInputStreamForClasspath(String classpath,ClassLoader classLoader) throws IOException {  if (classLoader == null) {    classLoader=Thread.currentThread().getContextClassLoader();  }  InputStream baseStream=classLoader.getResourceAsStream(classpath);  if (baseStream == null) {    throw new IOException(String.format("Could not find %s in provided class loader.",classpath));  }  return wrapStream(baseStream,classpath);}  }
class C{  public boolean isItemForce(){  return true;}  }
class C{  public static Element firstChildElement(Element element,Set<String> childElementNames){  if (element == null)   return null;  Node node=element.getFirstChild();  if (node != null) {    do {      if (node.getNodeType() == Node.ELEMENT_NODE && childElementNames.contains(node.getNodeName())) {        Element childElement=(Element)node;        return childElement;      }    } while ((node=node.getNextSibling()) != null);  }  return null;}  }
class C{  public Builder envVars(Map<String,String> map){  this.envVars.putAll(map);  return this;}  }
class C{  protected void init(Table nodes,Table edges,Boolean directed,String nodeKey,String sourceKey,String targetKey){  if ((nodeKey != null && !TypeLib.isIntegerType(nodes.getColumnType(nodeKey))) || !TypeLib.isIntegerType(edges.getColumnType(sourceKey)) || !TypeLib.isIntegerType(edges.getColumnType(targetKey))) {    throw new IllegalArgumentException("Incompatible column types for graph keys");  }  removeAllSets();  super.addSet(EDGES,edges);  super.addSet(NODES,nodes);  m_directed=directed;  m_nkey=nodeKey;  m_skey=sourceKey;  m_tkey=targetKey;  if (nodeKey != null) {    if (nodes.getColumnType(nodeKey) == long.class)     m_longKey=true;    nodes.index(nodeKey);    m_nidx=nodes.getIndex(nodeKey);  }  if (m_nodeTuples == null)   m_nodeTuples=new TupleManager(nodes,this,TableNode.class);  m_edgeTuples=new TupleManager(edges,this,TableEdge.class);  initLinkTable();  if (m_listener == null)   m_listener=new Listener();  nodes.addTableListener(m_listener);  edges.addTableListener(m_listener);  m_listener.setEdgeTable(edges);}  }
class C{  public TracerProbeDescriptor(String name,String description,Icon icon,int preferredPosition,boolean available){  this.name=name;  this.description=description;  this.icon=icon != null ? icon : new ImageIcon(ImageUtilities.loadImage(IMAGE_PATH));  this.preferredPosition=preferredPosition;  this.available=available;}  }
class C{  public void closeDriver(){  if (camera != null) {    FlashlightManager.disableFlashlight();    camera.release();    camera=null;  }}  }
class C{  private void computeShift(final int l,final int idx,final int iteration,final ShiftInfo shift){  shift.x=matrixT[idx][idx];  shift.y=shift.w=0.0;  if (l < idx) {    shift.y=matrixT[idx - 1][idx - 1];    shift.w=matrixT[idx][idx - 1] * matrixT[idx - 1][idx];  }  if (iteration == 10) {    shift.exShift+=shift.x;    for (int i=0; i <= idx; i++) {      matrixT[i][i]-=shift.x;    }    final double s=FastMath.abs(matrixT[idx][idx - 1]) + FastMath.abs(matrixT[idx - 1][idx - 2]);    shift.x=0.75 * s;    shift.y=0.75 * s;    shift.w=-0.4375 * s * s;  }  if (iteration == 30) {    double s=(shift.y - shift.x) / 2.0;    s=s * s + shift.w;    if (s > 0.0) {      s=FastMath.sqrt(s);      if (shift.y < shift.x) {        s=-s;      }      s=shift.x - shift.w / ((shift.y - shift.x) / 2.0 + s);      for (int i=0; i <= idx; i++) {        matrixT[i][i]-=s;      }      shift.exShift+=s;      shift.x=shift.y=shift.w=0.964;    }  }}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200548,skilltarget,skillname);}  }
class C{  public PrefixSearchTupleSet(boolean caseSensitive){  m_trie=new Trie(caseSensitive);}  }
class C{  public void addBottomResourceBundle(String resource){  if (this.initialResourceBundle == null) {    throw new IllegalArgumentException("Cannot add bottom resource bundle, this wrapper was not properly initialized (there is no base/initial ResourceBundle).");  }  this.addBottomResourceBundle(new InternalRbmWrapper(UtilProperties.getResourceBundle(resource,this.initialResourceBundle.getLocale())));}  }
class C{  public URI(String p_scheme,String p_host,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  this(p_scheme,null,p_host,-1,p_path,p_queryString,p_fragment);}  }
class C{  protected final void unregisterDataSource(DataSource removed){  unregisterDataSources(Collections.singleton(removed));}  }
class C{  public void logout(){  if (mSessionManager != null)   mSessionManager.clearSession();}  }
class C{  public LazyMetadataValue(Plugin owningPlugin,Callable<Object> lazyValue){  this(owningPlugin,CacheStrategy.CACHE_AFTER_FIRST_EVAL,lazyValue);}  }
class C{  @Override public ValueExpression resolveVariable(String variable){  Object obj=UelUtil.resolveVariable(variable,this.elContext.variables,null);  if (obj != null) {    return new BasicValueExpression(variable,this.elContext);  }  return null;}  }
class C{  public boolean changeUserRole(User user,Role role){  if (!isSelfAdmin()) {    return false;  }  ListIterator<Pair<User,Role>> it=users.listIterator();  while (it.hasNext()) {    Pair<User,Role> pair=it.next();    if (user.equals(pair.getFirst())) {      if (role.equals(pair.getSecond())) {        return false;      }      it.remove();      it.add(new Pair<>(user,role));      skype.changeUserRole(user,role,this);      return true;    }  }  return false;}  }
class C{  public PartialWeakUniqueIndex(String indexName,Extractor[] extractors,int initialCapacity){  this(indexName,extractors,initialCapacity,DEFAULT_LOAD_FACTOR);}  }
class C{  private static SecretKey generateKey(){  SecretKey secretKey=KeyFactory.loadKey("gs-keystore.key");  if (secretKey == null) {    secretKey=KeyFactory.generateKey(new byte[]{-69,-26,70,-58,49,81,104,-9,-105,93,-114,26,75,-60,96,-39},"AES");  }  return secretKey;}  }
class C{  public boolean geom_trans(){  return soot.PhaseOptions.getBoolean(options,"geom-trans");}  }
class C{  public static boolean isValidApiVersion(String apiVersion){  return SEMANTIC_VERSION_REGEX_PATTERN.matcher(apiVersion).matches();}  }
class C{  public boolean containsAll(Collection c){  Object[] elements=getArray();  int len=elements.length;  for (Iterator itr=c.iterator(); itr.hasNext(); ) {    Object e=itr.next();    if (indexOf(e,elements,0,len) < 0)     return false;  }  return true;}  }
class C{  public void addItem(ForceItem item){  items.add(item);}  }
class C{  public LookbackQuery withLookbackQueryPostAggregations(Collection<PostAggregation> postAggregations){  return new LookbackQuery(dataSource,granularity,filter,aggregations,postAggregations,intervals,context,false,lookbackOffsets,lookbackPrefixes,having,limitSpec);}  }
class C{  public GroupsGetMembersQueryWithFields count(Integer value){  return unsafeParam("count",value);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count + 1) * mRadius + (count - 1) * mIndicatorBetween);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void removeSection(String tag){  this.sections.remove(tag);}  }
class C{  @NotNull public static String toIniString(@NotNull Storage storage,boolean convertToMb){  Storage.Unit unit=convertToMb ? Storage.Unit.MiB : storage.getAppropriateUnits();  String unitString=convertToMb ? "" : unit.toString().substring(0,1);  return String.format("%1$d%2$s",storage.getSizeAsUnit(unit),unitString);}  }
class C{  public void afterTransactionSynchronization(TransactionData transactionData){}  }
class C{  private void createUnitRelation(Utterance utterance){  Item segmentItem0, segmentItem1;  float end0, end1;  int targetEnd;  Item unitItem0, unitItem1;  String diphoneName;  Diphone diphone;  Relation unitRelation=utterance.createRelation(Relation.UNIT);  Relation segmentRelation=utterance.getRelation(Relation.SEGMENT);  for (segmentItem0=segmentRelation.getHead(); segmentItem0 != null && segmentItem0.getNext() != null; segmentItem0=segmentItem1) {    segmentItem1=segmentItem0.getNext();    diphoneName=segmentItem0.getFeatures().getString("name") + "-" + segmentItem1.getFeatures().getString("name");    end0=segmentItem0.getFeatures().getFloat("end");    targetEnd=(int)(end0 * diphoneDatabase.getSampleInfo().getSampleRate());    unitItem0=createUnitItem(unitRelation,diphoneName,targetEnd,1);    segmentItem0.addDaughter(unitItem0);    end1=segmentItem1.getFeatures().getFloat("end");    targetEnd=(int)(((end0 + end1) / 2.0) * diphoneDatabase.getSampleInfo().getSampleRate());    unitItem1=createUnitItem(unitRelation,diphoneName,targetEnd,2);    segmentItem1.addDaughter(unitItem1);  }}  }
class C{  public static void main(String[] args){  SimplePlatformer simulation=new SimplePlatformer();  simulation.run();}  }
class C{  private static void padInt(StringBuilder buffer,int value,int length){  String strValue=Integer.toString(value);  for (int i=length - strValue.length(); i > 0; i--) {    buffer.append('0');  }  buffer.append(strValue);}  }
class C{  public DynamicTemplateParameterContext appendParameter(DynamicContextParameters param,String paramValue,boolean deleteOnExit,ContextInfo contextInfo){  return appendParameter(param.getName(),paramValue,deleteOnExit,false,contextInfo);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public boolean isValidName(String name){  return LegionConfig.LEGION_NAME_PATTERN.matcher(name).matches();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_IMMUNED_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201090,skillcaster,skillname);}  }
class C{  public static S2Point ortho(S2Point a){  return a.ortho();}  }
class C{  public void appendToLog(String s){  append("\n" + s);}  }
class C{  public BrowserLogEntry(String message){  this.message=message;}  }
class C{  public String dependencies(){  StringBuilder sb=new StringBuilder();  int n=sentence.length();  for (int j=0; j < n; j++) {    if (heads[j] >= 0) {      sb.append(labels[j]);      sb.append('(');      sb.append(sentence.getToken(heads[j]));      sb.append('-');      sb.append(heads[j]);      sb.append(',');      sb.append(sentence.getToken(j));      sb.append('-');      sb.append(j);      sb.append(')');      sb.append(' ');    }  }  return sb.toString().trim();}  }
class C{  public FontAnimator(){  super();}  }
class C{  public ReplicationFilterException(String message,Throwable cause){  super(message,cause);}  }
class C{  public FixedLeasePeriodPolicy(long maximum,long defaultLength){  if (maximum <= 0)   throw new IllegalArgumentException("FixedLeasePeriodPolicy:" + "maximum lease time must be larger than 0, " + "passed:"+ maximum);  if (defaultLength <= 0)   throw new IllegalArgumentException("FixedLeasePeriodPolicy:" + "default lease time must be larger than 0, " + "passed:"+ defaultLength);  this.maximum=maximum;  this.defaultLength=defaultLength;}  }
class C{  public static String nullSafeToString(short[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public PokestopLootResult loot() throws LoginFailedException, RemoteServerException {  return AsyncHelper.toBlocking(lootAsync());}  }
class C{  public static String timeToString(String time){  String theTime=null;  if (Pattern.matches("[012][0-9]:[0-5][0-9]",time)) {    int hour=Integer.parseInt(time.substring(0,2));    int min=Integer.parseInt(time.substring(3));    theTime=timeToString(hour,min);  }  return theTime;}  }
class C{  public boolean incrementNumOfUsersIfNotEmpty(){  while (true) {    int num=get();    if (num == 0)     return false;    if (compareAndSet(num,num + 1))     return true;  }}  }
class C{  public Builder globalTag(String val){  globalTag=val;  return this;}  }
class C{  protected VideoDeleteAlbumQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  public FunctionManager(){  initialise();}  }
class C{  public DnDTransferItem(DnDTransferComponent component){  this(true,0,Collections.singletonList(component));}  }
class C{  public CompositeRange add(Range range){  _ranges.add(range);  ((AllSpacePredicate)this.getPredicate()).addOperand(range.getPredicate());  return this;}  }
class C{  @Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {  fNamespaceContext=namespaceContext;  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.startDocument(locator,encoding,namespaceContext,augs);  }}  }
class C{  protected boolean checkFolTokens(Element currentRulePart,int position,NodeList tokens){  NamedNodeMap attNodes=currentRulePart.getAttributes();  for (int z=0; z < attNodes.getLength(); z++) {    Node el=attNodes.item(z);    String currentAtt=el.getNodeName();    String currentVal=el.getNodeValue();    if (currentAtt.equals("num")) {      int num=Integer.parseInt(currentVal.substring(0,1));      int requiredLastTokenPosition=position + num;      if (currentVal.length() == 1) {        if (!(tokens.getLength() - 1 == requiredLastTokenPosition))         return false;      } else       if (currentVal.substring(1,2).equals("+")) {        if (!(tokens.getLength() - 1 >= requiredLastTokenPosition))         return false;      } else       if (currentVal.substring(1,2).equals("-")) {        if (!(tokens.getLength() - 1 <= requiredLastTokenPosition))         return false;      }    }  }  return true;}  }
class C{  private Point<S> singularProjection(final Point<S> point,final Hyperplane<S> hyperplane,final Region<T> part){  @SuppressWarnings("unchecked") final Embedding<S,T> embedding=(Embedding<S,T>)hyperplane;  final BoundaryProjection<T> bp=part.projectToBoundary(embedding.toSubSpace(point));  return (bp.getProjected() == null) ? null : embedding.toSpace(bp.getProjected());}  }
class C{  public int[] calculateAspectRatio(int origWidth,int origHeight){  int newWidth=this.targetWidth;  int newHeight=this.targetHeight;  if (newWidth <= 0 && newHeight <= 0) {    newWidth=origWidth;    newHeight=origHeight;  } else   if (newWidth > 0 && newHeight <= 0) {    newHeight=(newWidth * origHeight) / origWidth;  } else   if (newWidth <= 0 && newHeight > 0) {    newWidth=(newHeight * origWidth) / origHeight;  } else {    double newRatio=newWidth / (double)newHeight;    double origRatio=origWidth / (double)origHeight;    if (origRatio > newRatio) {      newHeight=(newWidth * origHeight) / origWidth;    } else     if (origRatio < newRatio) {      newWidth=(newHeight * origWidth) / origHeight;    }  }  int[] retval=new int[2];  retval[0]=newWidth;  retval[1]=newHeight;  return retval;}  }
class C{  public static RefType v(String className){  RefType rt=Scene.v().getRefTypeUnsafe(className);  if (rt == null) {    rt=new RefType(className);    Scene.v().addRefType(rt);  }  return rt;}  }
class C{  public JSONWriter value(Object o) throws JSONException {  return this.append(JSONObject.valueToString(o));}  }
class C{  public static long deserializeTransactionId(byte[] data){  String seqNoStr=new String(data,UTF_8);  return Long.parseLong(seqNoStr);}  }
class C{  public void pasteClipboardByAttribute(String attribute) throws IOException {  final Clipboard clipboard=Clipboard.getSystemClipboard();  Set<Pair<Integer,Integer>> selectedPairs=getSelectedPairs();  if (selectedPairs.size() > 0) {    BitSet rows=getSelectedSampleIndices();    String contents=clipboard.getString().trim().replaceAll("\r\n","\n").replaceAll("\r","\n");    String[] lines=contents.split("\n");    if (lines.length > 0) {      final int guideCol=dataGrid.findColumn(attribute);      final Map<String,String> attributeValue2Line=new HashMap<>();      int inputLineNumber=0;      String[] toPaste=new String[getNumberOfSelectedSamples()];      int expandedLineNumber=0;      for (int row=rows.nextSetBit(1); row != -1; row=rows.nextSetBit(row + 1)) {        String value=dataGrid.getValue(row,guideCol);        if (!attributeValue2Line.containsKey(value)) {          if (inputLineNumber == lines.length)           break;          toPaste[expandedLineNumber++]=lines[inputLineNumber];          attributeValue2Line.put(value,lines[inputLineNumber++]);        } else {          if (expandedLineNumber == toPaste.length)           break;          toPaste[expandedLineNumber++]=attributeValue2Line.get(value);        }      }      if (attributeValue2Line.size() != lines.length) {        throw new IOException("Mismatch between number of lines pasted (" + lines.length + ") and number of attribute values ("+ attributeValue2Line.size()+ ")");      }      paste(toPaste);    }  }}  }
class C{  public MapMessage createMapMessage() throws JMSException {  return createMapMessage(new HashMap<String,Object>());}  }
class C{  public static void d(String msg){  if (LOG_ENABLE) {    Log.d(TAG,buildMsg(msg));  }}  }
class C{  @NotNull public static String generateCommaSeparatedList(@NotNull Collection<String> items,@NotNull String lastSeparator){  final int n=items.size();  if (n == 0) {    return "";  }  int i=0;  final StringBuilder result=new StringBuilder();  for (  String word : items) {    result.append(word);    if (i < n - 2) {      result.append(", ");    } else     if (i == n - 2) {      result.append(" ").append(lastSeparator).append(" ");    }    i++;  }  return result.toString();}  }
class C{  public ZWaveBinarySensorCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public double latRadians(){  return latRadians;}  }
class C{  @Override public void close() throws IOException {  if (null != dictionaryMetadataFileReader) {    dictionaryMetadataFileReader.close();    dictionaryMetadataFileReader=null;  }}  }
class C{  public static void ignorePermission(String permission){  if (!isIgnoredPermission(permission)) {    ArrayList<String> ignoredPermissions=getIgnoredPermissions();    ignoredPermissions.add(permission);    Set<String> set=new HashSet<String>();    set.addAll(ignoredPermissions);    sharedPreferences.edit().putStringSet(KEY_IGNORED_PERMISSIONS,set).apply();  }}  }
class C{  public SubHyperplane<S> insideTouching(){  return insideTouching;}  }
class C{  public static AnalysisEngine defaultAnalysisEngine(){  try {    if (defaultAnalysisEngine == null)     defaultAnalysisEngine=AnalysisEngineFactory.createEngine(AnalysisEngineFactory.createEngineDescription(SentenceAnnotator.getDescription(),TokenizerAnnotator.getDescription()));    return defaultAnalysisEngine;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void onConfigurationChanged(Configuration newConfig){  super.onConfigurationChanged(newConfig);  if (this.appView == null) {    return;  }  PluginManager pm=this.appView.getPluginManager();  if (pm != null) {    pm.onConfigurationChanged(newConfig);  }}  }
class C{  public static boolean isColumnExists(String columnName,String tableName,SQLiteDatabase db){  if (TextUtils.isEmpty(columnName) || TextUtils.isEmpty(tableName)) {    return false;  }  boolean exist=false;  Cursor cursor=null;  try {    String checkingColumnSQL="pragma table_info(" + tableName + ")";    cursor=db.rawQuery(checkingColumnSQL,null);    if (cursor.moveToFirst()) {      do {        String name=cursor.getString(cursor.getColumnIndexOrThrow("name"));        if (columnName.equalsIgnoreCase(name)) {          exist=true;          break;        }      } while (cursor.moveToNext());    }  } catch (  Exception e) {    e.printStackTrace();    exist=false;  } finally {    if (cursor != null) {      cursor.close();    }  }  return exist;}  }
class C{  public static String convertTime(int time){  time/=1000;  int minute=time / 60;  int second=time % 60;  minute%=60;  return String.format("%02d:%02d",minute,second);}  }
class C{  public static char[] encodeHex(byte[] data,boolean toLowerCase){  return encodeHex(data,toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_REJECT_ME(String value0){  return new SM_SYSTEM_MESSAGE(1400562,value0);}  }
class C{  private void useSkill(int skillId,VisibleObject target){  SkillEngine.getInstance().getSkill(getOwner(),skillId,65,target).useSkill();}  }
class C{  public void addUpdateStmt(Stmt node){  List<Stmt> list=(parent == null || state == null) ? getUpdateStmtListNoTransform() : getUpdateStmtList();  list.addChild(node);}  }
class C{  private void cancelPrecaching(){  Log.v(TAG,"Cancel precaching");  prepareNativeLibraries();  mPrecacheLauncher.cancel();  shutdownPrecaching(true);}  }
class C{  public LockableFileWriter(String fileName,boolean append) throws IOException {  this(fileName,append,null);}  }
class C{  @Override public void parse(XMLInputSource source) throws XNIException, IOException {  if (fParseInProgress) {    throw new XNIException("FWK005 parse may not be called while parsing.");  }  fParseInProgress=true;  try {    setInputSource(source);    parse(true);  } catch (  XNIException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  IOException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  RuntimeException ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw ex;  }catch (  Exception ex) {    if (PRINT_EXCEPTION_STACK_TRACE)     ex.printStackTrace();    throw new XNIException(ex);  } finally {    fParseInProgress=false;    this.cleanup();  }}  }
class C{  protected void updateCoordinates(){  System.err.println("Updating...");  zScores.clear();  seriesClusteringTree.clear();  classesClusteringTree.clear();  if (classesClusteringTree.getChartSelection() == null)   classesClusteringTree.setChartSelection(viewer.getChartSelection());  if (seriesClusteringTree.getChartSelection() == null)   seriesClusteringTree.setChartSelection(viewer.getChartSelection());  final String[] currentClasses;{    final Collection<String> list=getViewer().getClassesList().getEnabledLabels();    currentClasses=list.toArray(new String[list.size()]);  }  final String[] currentSeries;{    final Collection<String> list=getViewer().getSeriesList().getEnabledLabels();    currentSeries=list.toArray(new String[list.size()]);  }  for (  String className : currentClasses) {    final Map<String,Double> series2value=new HashMap<>();    for (    String series : currentSeries) {      final double total=getChartData().getTotalForSeries(series);      series2value.put(series,(total > 0 ? (getChartData().getValueAsDouble(series,className) / total) : 0));    }    final Statistics statistics=new Statistics(series2value.values());    for (    String series : currentSeries) {      final double value=series2value.get(series);      zScores.put(series,className,statistics.getZScore(value));    }  }  if (viewer.getClassesList().isDoClustering()) {    classesClusteringTree.setRootSide(isTranspose() ? ClusteringTree.SIDE.TOP : ClusteringTree.SIDE.RIGHT);    classesClusteringTree.updateClustering(zScores);    final Collection<String> list=classesClusteringTree.getLabelOrder();    classNames=list.toArray(new String[list.size()]);  } else   classNames=currentClasses;  if (viewer.getSeriesList().isDoClustering()) {    seriesClusteringTree.setRootSide(isTranspose() ? ClusteringTree.SIDE.RIGHT : ClusteringTree.SIDE.TOP);    seriesClusteringTree.updateClustering(zScores);    final Collection<String> list=seriesClusteringTree.getLabelOrder();    seriesNames=list.toArray(new String[list.size()]);  } else   seriesNames=currentSeries;}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  public VideoAddAlbumQuery(VkApiClient client,UserActor actor){  super(client,"video.addAlbum",AddAlbumResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static Object catcher(Object input){  try {    NORELEASE.just(input);  } catch (  Throwable t) {    t.printStackTrace();    NORELEASE.breakpoint();  }  return null;}  }
class C{  @Override public void removeDataTag(final SourceDataTag sourceDataTag){  sourceDataTags.remove(sourceDataTag.getId());  sourceDataTag.getAddress().setTimeDeadband(0);  movingAverages.remove(sourceDataTag.getId());}  }
class C{  public static IOFileFilter suffixFileFilter(String suffix,IOCase caseSensitivity){  return new SuffixFileFilter(suffix,caseSensitivity);}  }
class C{  public void addConfig(List<SymbolTypeConfig> configList){  if (configList != null) {    for (    SymbolTypeConfig config : configList) {      if (config != null) {        fieldMap.putAll(config.getFieldMap());        Map<String,String> optionMap=config.getOptionMap();        for (        String key : optionMap.keySet()) {          addValue(key,optionMap.get(key));        }      }    }  }}  }
class C{  public boolean isSelectionFindable(){  return mainViewer.getSelectedNodes().size() > 0;}  }
class C{  public boolean isReadOnly(){  return !isProjectStyle();}  }
class C{  public Side whichSide(Vector3f point){  float dis=pseudoDistance(point);  if (dis < 0) {    return Side.Negative;  } else   if (dis > 0) {    return Side.Positive;  } else {    return Side.None;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonBindingGroupGate_A_TO_ME(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200728,skillcaster,value0,skillname);}  }
class C{  public GameTime(int time){  if (time < 0) {    throw new InvalidParameterException("Time must be >= 0");  }  gameTime=time;  calculateDayTime();}  }
class C{  private Controller(){}  }
class C{  public boolean forEachValue(TShortProcedure procedure){  Object[] keys=_set;  short[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public void actionPerformed(ActionEvent ev){  File lastOpenFile=ProgramProperties.getFile(MeganProperties.MEGANFILE);  MeganAndRMAFileFilter meganAndRMAFileFilter=new MeganAndRMAFileFilter();  meganAndRMAFileFilter.setAllowGZipped(true);  meganAndRMAFileFilter.setAllowZipped(true);  meganAndRMAFileFilter.add(MeganizedDAAFileFilter.getInstance());  getDir().notifyLockInput();  CompareWindow viewer=(CompareWindow)getParent();  Collection<File> files;  try {    files=ChooseFileDialog.chooseFilesToOpen(viewer,lastOpenFile,meganAndRMAFileFilter,meganAndRMAFileFilter,ev,"Add MEGAN file");  }  finally {    getDir().notifyUnlockInput();  }  if (files != null && files.size() > 0) {    StringBuilder buf=new StringBuilder();    for (    File file : files) {      if (file != null && file.exists() && file.canRead()) {        ProgramProperties.put(MeganProperties.MEGANFILE,file.getAbsolutePath());        buf.append("add file='").append(file.getPath()).append("';");      }    }    execute(buf.toString());  }}  }
class C{  public DocumentNGramSymWinDistroGraph(){  InitGraphs();}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigTimePeriod copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigTimePeriod(fieldConfigBase.getCommonData());  }  return copy;}  }
class C{  @Override public String toString(){  if (kind == TokenKind.STRING) {    return "\"" + value + "\"";  }  return value == null ? kind.toString() : value.toString();}  }
class C{  public static Pose toOpenGLPose(TangoPoseData tangoPose){  Matrix4 startServiceTDevice=tangoPoseToMatrix(tangoPose);  Matrix4 openglWorldTDevice=OPENGL_T_TANGO_WORLD.clone().multiply(startServiceTDevice);  return matrixToPose(openglWorldTDevice);}  }
class C{  @Override public void write(int b) throws IOException {  write(new byte[]{(byte)b},0,1);}  }
class C{  public static Load handle(World world){  Load event=new Load(world);  OpenModLoader.getEventBus().post(event);  return event;}  }
class C{  public void push(Collection collection){  if (isClosed()) {    LOGGER.debug("synchrocol isClosed - Exception");    throw new IllegalArgumentException("buffer closed");  }  if ((collection != null) && (collection.size() != 0)) {synchronized (buffer) {      if ((duplicatePolicy != SynchroBuffer.DUPLICATE_DISCARD) && (duplicatePolicy != SynchroBuffer.DUPLICATE_REPLACE)) {        buffer.addAll(collection);        if (capacity != INFINITE_CAPACITY && buffer.size() > capacity) {          LOGGER.warn("The maximum capacity of the SynchroBuffer was reached (current size is " + buffer.size() + ") - FIFO was applied to the buffer.");          while (buffer.size() > capacity) {            buffer.remove(0);          }        }      } else {        Iterator iterator=collection.iterator();        while (iterator.hasNext()) {          push(iterator.next());        }      }    }  }}  }
class C{  public SpectralSpellInteroperator(String sInputFile,String[] sArgs){  InputFile=sInputFile;  Args=sArgs;}  }
class C{  public void start(String tag){  tag(tag,(String[])null,null,0,false);}  }
class C{  public boolean containsKey(String key){  if (key == null) {    throw new NullPointerException("key");  }synchronized (contexts) {    for (    Map.Entry<String,String> e : contexts) {      if (e.getKey().equalsIgnoreCase(key)) {        return true;      }    }  }  return false;}  }
class C{  public PagerImplementor(PagerView view){  this.view=view;}  }
class C{  static public double KL_asymmetric(Distribution p,Distribution q){  double sum=0;  if (p.asTreeMap().size() == q.asTreeMap().size()) {    Iterator iIter=p.asTreeMap().keySet().iterator();    while (iIter.hasNext()) {      Object i=iIter.next();      sum+=p.getValue(i) * Math.log10(p.getValue(i) / q.getValue(i)) / Math.log10(2);    }  } else {    return 0;  }  return sum;}  }
class C{  public IBlockState withRotation(IBlockState state,Rotation rot){switch (rot) {case CLOCKWISE_180:    return state.withProperty(NORTH,state.getValue(SOUTH)).withProperty(EAST,state.getValue(WEST)).withProperty(SOUTH,state.getValue(NORTH)).withProperty(WEST,state.getValue(EAST));case COUNTERCLOCKWISE_90:  return state.withProperty(NORTH,state.getValue(EAST)).withProperty(EAST,state.getValue(SOUTH)).withProperty(SOUTH,state.getValue(WEST)).withProperty(WEST,state.getValue(NORTH));case CLOCKWISE_90:return state.withProperty(NORTH,state.getValue(WEST)).withProperty(EAST,state.getValue(NORTH)).withProperty(SOUTH,state.getValue(EAST)).withProperty(WEST,state.getValue(SOUTH));default :return state;}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_ROOM_DESTROYED(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400199,value0,value1);}  }
class C{  @PUT @Path("/roles") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Update roles for a list of users and applications") @Timed public Response updateUserRoles(@ApiParam(name="userRoleList",value="Please see model example",required=true) final UserRoleList userRoleList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  List<Map> statuses=updateUserRole(userRoleList,authorizationHeader);  return httpHeader.headers().entity(ImmutableMap.<String,Object>builder().put("assignmentStatuses",statuses).build()).build();}  }
class C{  public DataSourceMetadataService(){  this.allSegments=new ConcurrentHashMap<>();}  }
class C{  public JsonElement parse(JsonReader json) throws JsonIOException, JsonSyntaxException {  boolean lenient=json.isLenient();  json.setLenient(true);  try {    return Streams.parse(json);  } catch (  StackOverflowError e) {    throw new JsonParseException("Failed parsing JSON source: " + json + " to Json",e);  }catch (  OutOfMemoryError e) {    throw new JsonParseException("Failed parsing JSON source: " + json + " to Json",e);  } finally {    json.setLenient(lenient);  }}  }
class C{  public CmplExpr newCmplExpr(Value op1,Value op2){  return new GCmplExpr(op1,op2);}  }
class C{  protected void configureXML11Pipeline(){  if (fCurrentDVFactory != fXML11DatatypeFactory) {    fCurrentDVFactory=fXML11DatatypeFactory;    setProperty(DATATYPE_VALIDATOR_FACTORY,fCurrentDVFactory);  }  if (fCurrentDTDScanner != fXML11DTDScanner) {    fCurrentDTDScanner=fXML11DTDScanner;    setProperty(DTD_SCANNER,fCurrentDTDScanner);  }  fXML11DTDScanner.setDTDHandler(fDTDHandler);  fXML11DTDScanner.setDTDContentModelHandler(fDTDContentModelHandler);  if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {    if (fCurrentScanner != fXML11NSDocScanner) {      fCurrentScanner=fXML11NSDocScanner;      setProperty(DOCUMENT_SCANNER,fXML11NSDocScanner);    }    fXML11NSDocScanner.setDTDValidator(null);    fXML11NSDocScanner.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fXML11NSDocScanner);    }    fLastComponent=fXML11NSDocScanner;  } else {    if (fXML11DocScanner == null) {      fXML11DocScanner=new XML11DocumentScannerImpl();      addXML11Component(fXML11DocScanner);    }    if (fCurrentScanner != fXML11DocScanner) {      fCurrentScanner=fXML11DocScanner;      setProperty(DOCUMENT_SCANNER,fXML11DocScanner);    }    fXML11DocScanner.setDocumentHandler(fDocumentHandler);    if (fDocumentHandler != null) {      fDocumentHandler.setDocumentSource(fXML11DocScanner);    }    fLastComponent=fXML11DocScanner;  }}  }
class C{  public Button(float x,float y,float width,float height){  super(x,y);  this.width=width;  this.height=height;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DelayedFPATK_Instant_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200503,skilltarget,num0,skillname);}  }
class C{  private void calcEntryCountIncludingStacks(List<BarEntry> yVals){  mEntryCountStacks=0;  for (int i=0; i < yVals.size(); i++) {    float[] vals=yVals.get(i).getVals();    if (vals == null)     mEntryCountStacks++; else     mEntryCountStacks+=vals.length;  }}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  public void write(int ch) throws IOException {  if (ch >= 32 && ch <= 126 || ch == cr || ch == lf || ch == ' ') {    super.write(ch);    return;  }  mini.setLength(0);  mini.append(Integer.toHexString(ch));  while (mini.length() < 4)   mini.insert(0,"0");  mini.insert(0,"\\u");  for (int i=0; i < mini.length(); i++)   super.write(mini.charAt(i));}  }
class C{  @Override protected float[] backwardPropagationO2H(Instance instance,float[] input){  float[] output=Arrays.copyOf(instance.getScores(),getLabelSize());  float[] gradients=getGradientsRegression(instance);  for (int index=0; index < gradients.length; index++) {    gradients[index]=-1 * gradients[index];  }  float[] errors=new float[input.length];  int index;  MajorVector weights=w_h2o.getDenseWeightVector();  for (int y=0; y < gradients.length; y++) {    for (int xi=0; xi < input.length; xi++) {      if (sampled_thinned_network[sampled_thinned_network.length - 1][1 + xi]) {        index=weights.indexOf(y,xi);        errors[xi]+=gradients[y] * output[y] * weights.get(index);        weights.add(index,-1 * getLearningRate(index,false) * gradients[y]* input[xi]);      }    }  }  return errors;}  }
class C{  private static boolean reasonAndPropagate(FullSensitiveNode qn,AllocNode obj,SegmentNode pts,SegmentNode pe,int code){  int ret_type=GeometricManager.Undefined_Mapping;switch (code >> 8) {case GeometricManager.ONE_TO_ONE:    ret_type=infer_pts_is_one_to_one(pts,pe,code & 255);  break;case GeometricManager.MANY_TO_MANY:ret_type=infer_pts_is_many_to_many((RectangleNode)pts,pe,code & 255);break;}if (ret_type != GeometricManager.Undefined_Mapping) return qn.addPointsTo(ret_type,obj);return false;}  }
class C{  public String toString(){  return "BB: " + id;}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public Builder path(@NonNull File path){  if (path == null)   throw new IllegalArgumentException("path == null");  this.path=path;  return this;}  }
class C{  public ArrayFieldVector<T> projection(ArrayFieldVector<T> v) throws MathIllegalArgumentException, MathRuntimeException {  return (ArrayFieldVector<T>)v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));}  }
class C{  public void replaceInFile(String oldStr,String newStr,int fromIndex,boolean isOneIteration) throws IOException {  int next=0;  int indexCounter=1;  String line=null;  if (fromIndex <= 0)   fromIndex=0;  line=sb.toString();  while ((next=line.indexOf(oldStr,next)) != -1) {    if (indexCounter >= fromIndex) {      line=sb.replace(next,next + oldStr.length(),newStr).toString();      if (isOneIteration)       return;    }    indexCounter++;  }}  }
class C{  public static int levelToLevelIdx(double level){  return (int)((level - 1) * 2);}  }
class C{  public static Uri PathToUri(String path){  return Uri.fromFile(new File(path));}  }
class C{  public void createWeightedEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,double dStartWeight,double dNewWeight,double dDataImportance){  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }  }  Vertex vA=gGraph.locateVertex(sStartNode);  if (vA == null) {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  EdgeCachedLocator ecl;  if (eclLocator == null)   ecl=new EdgeCachedLocator(100); else   ecl=eclLocator;  java.util.Iterator iIter=lOtherNodes.iterator();  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel(new String((String)iIter.next()));    double dOldWeight=0;    double dFinalWeight=0;    WeightedEdge weCorrectEdge=null;    WeightedEdge weEdge=null;    boolean bFound=(weEdge=(WeightedEdge)ecl.locateDirectedEdgeInGraph(gGraph,vA,vB)) != null;    if (bFound) {      dOldWeight=weEdge.getWeight();      weCorrectEdge=weEdge;      dFinalWeight=dOldWeight + (dNewWeight - dOldWeight) * dDataImportance;      weCorrectEdge.setWeight(dFinalWeight);    } else {      dFinalWeight=dStartWeight;      try {        gGraph.addEdge(vA,vB,dFinalWeight);        ecl.resetCache();      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  private static String readFile(File file,Charset encoding) throws IOException {  byte[] encoded=Files.readAllBytes(Paths.get(file.getAbsolutePath()));  return new String(encoded,encoding);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  serviceID=new ServiceID(in);}  }
class C{  public JTextAreaPrintStream(JTextArea taOut){  super(System.out,true);  OutputArea=taOut;}  }
class C{  @Override public void start(){  running=true;}  }
class C{  protected FriendsGetQueryWithFields fields(UserField... value){  return unsafeParam("fields",value);}  }
class C{  public static void requestClose(final Tab tab){  TabPaneBehavior behavior=getBehavior(tab);  if (behavior.canCloseTab(tab)) {    behavior.closeTab(tab);  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TypeImportOnDemandDecl fullCopy(){  TypeImportOnDemandDecl tree=(TypeImportOnDemandDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static String encodeECC200(String codewords,SymbolInfo symbolInfo){  if (codewords.length() != symbolInfo.getDataCapacity()) {    throw new IllegalArgumentException("The number of codewords does not match the selected symbol");  }  StringBuilder sb=new StringBuilder(symbolInfo.getDataCapacity() + symbolInfo.getErrorCodewords());  sb.append(codewords);  int blockCount=symbolInfo.getInterleavedBlockCount();  if (blockCount == 1) {    String ecc=createECCBlock(codewords,symbolInfo.getErrorCodewords());    sb.append(ecc);  } else {    sb.setLength(sb.capacity());    int[] dataSizes=new int[blockCount];    int[] errorSizes=new int[blockCount];    int[] startPos=new int[blockCount];    for (int i=0; i < blockCount; i++) {      dataSizes[i]=symbolInfo.getDataLengthForInterleavedBlock(i + 1);      errorSizes[i]=symbolInfo.getErrorLengthForInterleavedBlock(i + 1);      startPos[i]=0;      if (i > 0) {        startPos[i]=startPos[i - 1] + dataSizes[i];      }    }    for (int block=0; block < blockCount; block++) {      StringBuilder temp=new StringBuilder(dataSizes[block]);      for (int d=block; d < symbolInfo.getDataCapacity(); d+=blockCount) {        temp.append(codewords.charAt(d));      }      String ecc=createECCBlock(temp.toString(),errorSizes[block]);      int pos=0;      for (int e=block; e < errorSizes[block] * blockCount; e+=blockCount) {        sb.setCharAt(symbolInfo.getDataCapacity() + e,ecc.charAt(pos++));      }    }  }  return sb.toString();}  }
class C{  public Call patch(String url,JSONObject params,Callback callback){  MediaType JSON=MediaType.parse("application/json; charset=utf-8");  RequestBody body=RequestBody.create(JSON,params.toString());  Request request=new Builder().url(url).patch(body).build();  Call call=client.newCall(request);  call.enqueue(callback);  return call;}  }
class C{  public void uncollapseAll(){  getCollapsedIds().clear();  updateTree();}  }
class C{  public static MathRuntimeException createInternalError(final Throwable cause){  return new MathRuntimeException(cause,LocalizedCoreFormats.INTERNAL_ERROR,REPORT_URL);}  }
class C{  public static SystemParameterConfigAspect create(Model model){  return new SystemParameterConfigAspect(model);}  }
class C{  public FieldConfigDate(FieldConfigCommonData commonData){  super(commonData);}  }
class C{  public boolean contains(S2Point p){  return contains(new S2LatLng(p));}  }
class C{  public static void dropTables(Connection conn){  try {    Statement stmt=conn.createStatement();    try {      stmt.execute("DROP TABLE Unpaidorder");    } catch (    SQLException ex) {    }    try {      stmt.execute("DROP TABLE Customer");    } catch (    SQLException ex) {    }    try {      stmt.execute("DROP TABLE Coffee");    } catch (    SQLException ex) {    }  } catch (  SQLException ex) {    System.out.println("ERROR: " + ex.getMessage());    ex.printStackTrace();  }}  }
class C{  private int klattRule2(Element segment){  Element syllable=getSyllable(segment);  if (isMinipFinal(syllable)) {    if (isInNucleus(segment)) {      return getPropertyAsInteger("rule2.nucleus");    } else     if (isInCoda(segment) && (isLiquid(segment) || isNasal(segment) || isFricative(segment))) {      return getPropertyAsInteger("rule2.coda");    }  }  return 100;}  }
class C{  public VideoDeleteAlbumQuery deleteAlbum(UserActor actor,int albumId){  return new VideoDeleteAlbumQuery(getClient(),actor,albumId);}  }
class C{  protected void verifyContainerProperty(String propertyPath,Object expectedValue) throws Throwable {  CommandInput commandInput=new CommandInput().withDockerUri(getDockerVersionedUri()).withCredentials(getDockerCredentials()).withProperty(DockerAdapterCommandExecutor.DOCKER_CONTAINER_ID_PROP_NAME,containerId);  host.testStart(1);  getTestCommandExecutor().inspectContainer(commandInput,null);  host.testWait();}  }
class C{  private static void reducePayneHanek(double x,double result[]){  long inbits=Double.doubleToRawLongBits(x);  int exponent=(int)((inbits >> 52) & 0x7ff) - 1023;  inbits&=0x000fffffffffffffL;  inbits|=0x0010000000000000L;  exponent++;  inbits<<=11;  long shpi0;  long shpiA;  long shpiB;  int idx=exponent >> 6;  int shift=exponent - (idx << 6);  if (shift != 0) {    shpi0=(idx == 0) ? 0 : (RECIP_2PI[idx - 1] << shift);    shpi0|=RECIP_2PI[idx] >>> (64 - shift);    shpiA=(RECIP_2PI[idx] << shift) | (RECIP_2PI[idx + 1] >>> (64 - shift));    shpiB=(RECIP_2PI[idx + 1] << shift) | (RECIP_2PI[idx + 2] >>> (64 - shift));  } else {    shpi0=(idx == 0) ? 0 : RECIP_2PI[idx - 1];    shpiA=RECIP_2PI[idx];    shpiB=RECIP_2PI[idx + 1];  }  long a=inbits >>> 32;  long b=inbits & 0xffffffffL;  long c=shpiA >>> 32;  long d=shpiA & 0xffffffffL;  long ac=a * c;  long bd=b * d;  long bc=b * c;  long ad=a * d;  long prodB=bd + (ad << 32);  long prodA=ac + (ad >>> 32);  boolean bita=(bd & 0x8000000000000000L) != 0;  boolean bitb=(ad & 0x80000000L) != 0;  boolean bitsum=(prodB & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prodA++;  }  bita=(prodB & 0x8000000000000000L) != 0;  bitb=(bc & 0x80000000L) != 0;  prodB+=bc << 32;  prodA+=bc >>> 32;  bitsum=(prodB & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prodA++;  }  c=shpiB >>> 32;  d=shpiB & 0xffffffffL;  ac=a * c;  bc=b * c;  ad=a * d;  ac+=(bc + ad) >>> 32;  bita=(prodB & 0x8000000000000000L) != 0;  bitb=(ac & 0x8000000000000000L) != 0;  prodB+=ac;  bitsum=(prodB & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prodA++;  }  c=shpi0 >>> 32;  d=shpi0 & 0xffffffffL;  bd=b * d;  bc=b * c;  ad=a * d;  prodA+=bd + ((bc + ad) << 32);  int intPart=(int)(prodA >>> 62);  prodA<<=2;  prodA|=prodB >>> 62;  prodB<<=2;  a=prodA >>> 32;  b=prodA & 0xffffffffL;  c=PI_O_4_BITS[0] >>> 32;  d=PI_O_4_BITS[0] & 0xffffffffL;  ac=a * c;  bd=b * d;  bc=b * c;  ad=a * d;  long prod2B=bd + (ad << 32);  long prod2A=ac + (ad >>> 32);  bita=(bd & 0x8000000000000000L) != 0;  bitb=(ad & 0x80000000L) != 0;  bitsum=(prod2B & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prod2A++;  }  bita=(prod2B & 0x8000000000000000L) != 0;  bitb=(bc & 0x80000000L) != 0;  prod2B+=bc << 32;  prod2A+=bc >>> 32;  bitsum=(prod2B & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prod2A++;  }  c=PI_O_4_BITS[1] >>> 32;  d=PI_O_4_BITS[1] & 0xffffffffL;  ac=a * c;  bc=b * c;  ad=a * d;  ac+=(bc + ad) >>> 32;  bita=(prod2B & 0x8000000000000000L) != 0;  bitb=(ac & 0x8000000000000000L) != 0;  prod2B+=ac;  bitsum=(prod2B & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prod2A++;  }  a=prodB >>> 32;  b=prodB & 0xffffffffL;  c=PI_O_4_BITS[0] >>> 32;  d=PI_O_4_BITS[0] & 0xffffffffL;  ac=a * c;  bc=b * c;  ad=a * d;  ac+=(bc + ad) >>> 32;  bita=(prod2B & 0x8000000000000000L) != 0;  bitb=(ac & 0x8000000000000000L) != 0;  prod2B+=ac;  bitsum=(prod2B & 0x8000000000000000L) != 0;  if ((bita && bitb) || ((bita || bitb) && !bitsum)) {    prod2A++;  }  double tmpA=(prod2A >>> 12) / TWO_POWER_52;  double tmpB=(((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52;  double sumA=tmpA + tmpB;  double sumB=-(sumA - tmpA - tmpB);  result[0]=intPart;  result[1]=sumA * 2.0;  result[2]=sumB * 2.0;}  }
class C{  public static final Vertex locateVertexInGraph(UniqueVertexGraph gGraph,Vertex vToFind){  return gGraph.locateVertex(vToFind);}  }
class C{  public void testCircularDependencies() throws IOException {  VirtualFile project1=createGradleProjectToImport(dir,module(1),module(3));  VirtualFile project2=createGradleProjectToImport(dir,module(2),module(1));  VirtualFile project3=createGradleProjectToImport(dir,module(3),module(2));  configureTopLevelProject(dir,Arrays.asList(module(1),module(2),module(3)),Collections.<String>emptySet());  Map<String,VirtualFile> projects=moduleListToMap(GradleModuleImporter.getRelatedProjects(project3,getProject()));  assertEquals(3,projects.size());  assertEquals(project1,projects.get(pathToGradleName(module(1))));  assertEquals(project2,projects.get(pathToGradleName(module(2))));  assertEquals(project3,projects.get(pathToGradleName(module(3))));}  }
class C{  public static Tuple median(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    Table table=(Table)tuples;    ColumnMetadata md=table.getMetadata(field);    return table.getTuple(md.getMedianRow());  } else {    return median(tuples.tuples(),field,cmp);  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  public List<Object> splitByStructuralElems(String text){  List<Object> res;  List<Object> prevSplit;  res=splitByTitles(text);  prevSplit=res;  res=new ArrayList<>();  for (  Object part : prevSplit) {    if (part instanceof String) {      List<Object> listSplit=splitByLists((String)part,true);      res.addAll(listSplit);    } else {      res.add(part);    }  }  prevSplit=res;  res=new ArrayList<>();  for (  Object part : prevSplit) {    if (part instanceof String) {      List<Object> listSplit=splitByNotes((String)part);      res.addAll(listSplit);    } else {      res.add(part);    }  }  prevSplit=res;  res=new ArrayList<>();  for (  Object part : prevSplit) {    if (part instanceof String) {      List<Object> listSplit=splitByIndentBlocks((String)part);      res.addAll(listSplit);    } else {      res.add(part);    }  }  res=combineStructuralElems(res);  return res;}  }
class C{  public boolean isSetQueueSize(){  return __isset_bit_vector.get(__QUEUESIZE_ISSET_ID);}  }
class C{  private void createTryCatch(polyglot.ast.Try tryStmt){  polyglot.ast.Block tryBlock=tryStmt.tryBlock();  soot.jimple.Stmt noop1=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(noop1);  if (tryStack == null) {    tryStack=new Stack<Try>();  }  tryStack.push(tryStmt);  createBlock(tryBlock);  tryStack.pop();  soot.jimple.Stmt noop2=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(noop2);  soot.jimple.Stmt endNoop=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.Stmt tryEndGoto=soot.jimple.Jimple.v().newGotoStmt(endNoop);  body.getUnits().add(tryEndGoto);  Iterator it=tryStmt.catchBlocks().iterator();  while (it.hasNext()) {    soot.jimple.Stmt noop3=soot.jimple.Jimple.v().newNopStmt();    body.getUnits().add(noop3);    polyglot.ast.Catch catchBlock=(polyglot.ast.Catch)it.next();    createCatchFormal(catchBlock.formal());    if (catchStack == null) {      catchStack=new Stack<Try>();    }    catchStack.push(tryStmt);    createBlock(catchBlock.body());    catchStack.pop();    soot.jimple.Stmt catchEndGoto=soot.jimple.Jimple.v().newGotoStmt(endNoop);    body.getUnits().add(catchEndGoto);    soot.Type sootType=Util.getSootType(catchBlock.catchType());    addToExceptionList(noop1,noop2,noop3,soot.Scene.v().getSootClass(sootType.toString()));  }  body.getUnits().add(endNoop);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectPositional_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200863,skillcaster,skillname);}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public ProxyReg(ServiceRegistrar proxy,String[] memberGroups,int from){  if (proxy == null) {    throw new IllegalArgumentException("proxy cannot be null");  }  if ((from != FROM_GROUP) && (from != FROM_LOCATOR)) {    throw new IllegalArgumentException("invalid discovery mechanism: must be either " + "FROM_GROUP or FROM_LOCATOR");  }  this.proxy=proxy;  this.memberGroups=memberGroups;  this.from=from;}  }
class C{  private AttributeValue parseAttributeValue(Attribute attribute,String value){  AttributeValue attributeValue=null;  if (attribute.getValueType() == ValueType.TRUE_ONLY) {    value=!StringUtils.isEmpty(value) && "true".equalsIgnoreCase(value) ? "true" : null;    attributeValue=new AttributeValue(value,attribute);  } else   if (!StringUtils.isEmpty(value)) {    attributeValue=new AttributeValue(value,attribute);  }  return attributeValue;}  }
class C{  public CountModifiers(CountModifiers modifiers1,CountModifiers modifiers2){  super(modifiers1,modifiers2);}  }
class C{  public void initialize(){  if (skillTemplate.getEffects() == null) {    return;  }  for (  EffectTemplate template : getEffectTemplates()) {    template.calculate(this);    if (template instanceof DelayedSpellAttackInstantEffect) {      setDelayedDamage(true);    }    if (template instanceof PetOrderUseUltraSkillEffect) {      setPetOrder(true);    }    if (template instanceof SummonEffect) {      setSumonning(true);    }    if (template instanceof DamageEffect) {      setDamageEffect(true);    }    if (template instanceof HideEffect) {      isHideEffect=true;    }    if (template instanceof ParalyzeEffect) {      isParalyzeEffect=true;    }    if (template instanceof SanctuaryEffect) {      isSanctuaryEffect=true;    }  }  for (  EffectTemplate template : getEffectTemplates()) {    template.calculateHate(this);  }  if (this.isLaunchSubEffect()) {    for (    EffectTemplate template : successEffects.values()) {      template.calculateSubEffect(this);    }  }  if (successEffects.isEmpty()) {    skillMoveType=SkillMoveType.RESIST;    if (getSkillType() == SkillType.PHYSICAL) {      if (getEffector() instanceof Player) {        Player pl=(Player)getEffector();        if (pl.getPlayerClass() == PlayerClass.GUNNER || pl.getPlayerClass() == PlayerClass.RIDER) {          if (getAttackStatus() == AttackStatus.CRITICAL) {            setAttackStatus(AttackStatus.CRITICAL_RESIST);          } else {            setAttackStatus(AttackStatus.RESIST);          }        } else {          if (getAttackStatus() == AttackStatus.CRITICAL) {            setAttackStatus(AttackStatus.CRITICAL_DODGE);          } else {            setAttackStatus(AttackStatus.DODGE);          }        }      } else {        if (getAttackStatus() == AttackStatus.CRITICAL) {          setAttackStatus(AttackStatus.CRITICAL_DODGE);        } else {          setAttackStatus(AttackStatus.DODGE);        }      }    } else {      if (getAttackStatus() == AttackStatus.CRITICAL) {        setAttackStatus(AttackStatus.CRITICAL_RESIST);      } else {        setAttackStatus(AttackStatus.RESIST);      }    }  }switch (AttackStatus.getBaseStatus(getAttackStatus())) {case DODGE:    setSpellStatus(SpellStatus.DODGE);  break;case PARRY:if (getSpellStatus() == SpellStatus.NONE) {  setSpellStatus(SpellStatus.PARRY);}break;case BLOCK:if (getSpellStatus() == SpellStatus.NONE) {setSpellStatus(SpellStatus.BLOCK);}break;case RESIST:setSpellStatus(SpellStatus.RESIST);break;default :break;}}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  protected long writeDataToFile(NodeHolder nodeHolder,FileChannel channel) throws CarbonDataWriterException {  byte[][] compressedIndex=nodeHolder.getCompressedIndex();  byte[][] compressedIndexMap=nodeHolder.getCompressedIndexMap();  byte[][] compressedDataIndex=nodeHolder.getCompressedDataIndex();  int indexBlockSize=0;  int index=0;  for (int i=0; i < nodeHolder.getKeyBlockIndexLength().length; i++) {    indexBlockSize+=nodeHolder.getKeyBlockIndexLength()[index++] + CarbonCommonConstants.INT_SIZE_IN_BYTE;  }  for (int i=0; i < nodeHolder.getDataIndexMapLength().length; i++) {    indexBlockSize+=nodeHolder.getDataIndexMapLength()[i];  }  ByteBuffer byteBuffer=ByteBuffer.allocate(nodeHolder.getKeyArray().length + nodeHolder.getDataArray().length + indexBlockSize);  long offset=0;  try {    offset=channel.size();    byteBuffer.put(nodeHolder.getKeyArray());    byteBuffer.put(nodeHolder.getDataArray());    ByteBuffer buffer1=null;    for (int i=0; i < compressedIndex.length; i++) {      buffer1=ByteBuffer.allocate(nodeHolder.getKeyBlockIndexLength()[i]);      buffer1.putInt(compressedIndex[i].length);      buffer1.put(compressedIndex[i]);      if (compressedIndexMap[i].length > 0) {        buffer1.put(compressedIndexMap[i]);      }      buffer1.rewind();      byteBuffer.put(buffer1.array());    }    for (int i=0; i < compressedDataIndex.length; i++) {      byteBuffer.put(compressedDataIndex[i]);    }    byteBuffer.flip();    channel.write(byteBuffer);  } catch (  IOException exception) {    throw new CarbonDataWriterException("Problem in writing carbon file: ",exception);  }  return offset;}  }
class C{  private boolean isRequiredByFollowingUnits(Unit from,Unit to){  Iterator<Unit> it=mUnits.iterator(from,to);  int stackHeight=0;  boolean res=false;  if (from != to) {    it.next();    while (it.hasNext()) {      Unit currentInst=it.next();      if (currentInst == to)       break;      stackHeight-=((Inst)currentInst).getInCount();      if (stackHeight < 0) {        res=true;        break;      }      stackHeight+=((Inst)currentInst).getOutCount();    }  }  return res;}  }
class C{  private void createFilterList(FilterNode node,List<Filter> filterList){  for (int index=0; index < node.getChildCount(); index++) {    FilterNode filterNode=(FilterNode)node.getChildAt(index);    Filter filter=addFilter(filterNode);    filterList.add(filter);  }}  }
class C{  public PointsToSet reachingObjectsOfArrayElement(PointsToSet s){  return FullObjectSet.v();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DeboostHealAmount_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200500,skilltarget,skillname);}  }
class C{  public ArrayList<SerialMessage> initEndpoints(boolean refresh){  ArrayList<SerialMessage> result=new ArrayList<SerialMessage>();  logger.debug("NODE {}: Initialising endpoints - version {}",getNode().getNodeId(),getVersion());switch (getVersion()) {case 1:    for (    ZWaveCommandClass commandClass : getNode().getCommandClasses()) {      logger.debug("NODE {}: ENDPOINTS - checking {}, Instances {}",getNode().getNodeId(),commandClass.getCommandClass().toString(),commandClass.getInstances());      if (singleInstanceClasses.contains(commandClass.getCommandClass())) {        commandClass.setInstances(1);        logger.debug("NODE {}: ENDPOINTS - skipping {}",getNode().getNodeId(),commandClass.getCommandClass().toString());        continue;      }      if (commandClass.getInstances() == 0) {        logger.debug("NODE {}: ENDPOINTS - found    {}",getNode().getNodeId(),commandClass.getCommandClass().toString());        result.add(getMultiInstanceGetMessage(commandClass.getCommandClass()));      }    }  break;case 2:for (ZWaveCommandClass commandClass : getNode().getCommandClasses()) {  commandClass.setInstances(1);}if (refresh == true || endpoints.size() == 0) {result.add(getMultiChannelEndpointGetMessage());} else {for (Map.Entry<Integer,ZWaveEndpoint> entry : endpoints.entrySet()) {  if (refresh == true || entry.getValue().getCommandClasses().size() == 0) {    result.add(getMultiChannelCapabilityGetMessage(entry.getValue()));  }}}break;default :logger.warn(String.format("NODE %d: Unknown version %d for command class %s (0x%02x)",getNode().getNodeId(),getVersion(),getCommandClass().toString(),getCommandClass().getKey()));break;}return result;}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.getCamera().stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public final String toString(){  StringBuffer str=new StringBuffer();  str.append(getTagId());  str.append('\t');  str.append(getTagName());  str.append('\t');  if (getTagValue() != null) {    str.append(getTagValue());  } else {    str.append("null");  }  str.append('\t');  str.append(getTagValueDesc());  str.append('\t');  str.append(getTagDataType());  str.append('\t');  str.append(getSourceTimestamp());  str.append('\t');  str.append(getDaqTimestamp());  str.append('\t');  str.append(getServerTimestamp());  str.append('\t');  str.append(getTagQualityCode());  str.append('\t');  if ((getTagQualityDesc() != null) && (getTagQualityDesc().equals(""))) {    str.append("null");  } else {    str.append(getTagQualityDesc());  }  str.append('\t');  str.append(getTagMode());  str.append('\t');  str.append(getTagDir());  str.append('\t');  str.append(new Timestamp(System.currentTimeMillis()));  return str.toString();}  }
class C{  public boolean equals(Object o){  if (!(o instanceof DoubleWritable)) {    return false;  }  DoubleWritable other=(DoubleWritable)o;  return this.value == other.value;}  }
class C{  public static boolean removeFromCache(String imageUri,DiskCache diskCache){  File image=diskCache.get(imageUri);  return image != null && image.exists() && image.delete();}  }
class C{  public Types type() throws DataTypeException {  throw new DataTypeException("No type");}  }
class C{  public static Paint newSurroundingAreaOverlayPaint(@NonNull Resources resources){  final Paint paint=new Paint();  paint.setStyle(Paint.Style.FILL);  paint.setColor(resources.getColor(R.color.surrounding_area));  return paint;}  }
class C{  public boolean isDataSource(){  return isDataSource;}  }
class C{  private double[] applyPitchSpecifications(NodeList nl,double[] baseF0Contour,String pitchAttribute){  if ("".equals(pitchAttribute)) {    return baseF0Contour;  }  boolean hasLabel=pitchAttribute.equals("x-low") || pitchAttribute.equals("low") || pitchAttribute.equals("medium")|| pitchAttribute.equals("high")|| pitchAttribute.equals("x-high")|| pitchAttribute.equals("default");  if (hasLabel) {    pitchAttribute=pitchLabels2RelativeValues(pitchAttribute);  }  boolean hasFixedValue=pitchAttribute.endsWith("Hz") && !(pitchAttribute.startsWith("+") || pitchAttribute.startsWith("-"));  if (hasFixedValue) {    pitchAttribute=fixedValue2RelativeValue(pitchAttribute,baseF0Contour);  }  if (pitchAttribute.startsWith("+")) {    if (pitchAttribute.endsWith("%")) {      double modificationPitch=(new Float(pitchAttribute.substring(1,pitchAttribute.length() - 1))).doubleValue();      for (int i=0; i < baseF0Contour.length; i++) {        baseF0Contour[i]=baseF0Contour[i] + (baseF0Contour[i] * (modificationPitch / 100.0));      }    } else     if (pitchAttribute.endsWith("Hz")) {      double modificationPitch=(new Float(pitchAttribute.substring(1,pitchAttribute.length() - 2))).doubleValue();      for (int i=0; i < baseF0Contour.length; i++) {        baseF0Contour[i]=baseF0Contour[i] + modificationPitch;      }    } else     if (pitchAttribute.endsWith("st")) {      double modificationPitch=(new Float(pitchAttribute.substring(1,pitchAttribute.length() - 2))).doubleValue();      for (int i=0; i < baseF0Contour.length; i++) {        baseF0Contour[i]=Math.exp(modificationPitch * Math.log(2) / 12) * baseF0Contour[i];      }    }  } else   if (pitchAttribute.startsWith("-")) {    if (pitchAttribute.endsWith("%")) {      double modificationPitch=(new Float(pitchAttribute.substring(1,pitchAttribute.length() - 1))).doubleValue();      for (int i=0; i < baseF0Contour.length; i++) {        baseF0Contour[i]=baseF0Contour[i] - (baseF0Contour[i] * (modificationPitch / 100.0));      }    } else     if (pitchAttribute.endsWith("Hz")) {      double modificationPitch=(new Float(pitchAttribute.substring(1,pitchAttribute.length() - 2))).doubleValue();      for (int i=0; i < baseF0Contour.length; i++) {        baseF0Contour[i]=baseF0Contour[i] - modificationPitch;      }    } else     if (pitchAttribute.endsWith("st")) {      double modificationPitch=(new Float(pitchAttribute.substring(1,pitchAttribute.length() - 2))).doubleValue();      for (int i=0; i < baseF0Contour.length; i++) {        baseF0Contour[i]=Math.exp(-1 * modificationPitch * Math.log(2) / 12) * baseF0Contour[i];      }    }  }  return baseF0Contour;}  }
class C{  public void createDropShipGroups(LocalDispatcher dispatcher) throws CartItemModifyException {  String facilityId=null;  if (UtilValidate.isNotEmpty(this.getProductStoreId())) {    try {      GenericValue productStore=this.getDelegator().findOne("ProductStore",UtilMisc.toMap("productStoreId",this.getProductStoreId()),true);      facilityId=productStore.getString("inventoryFacilityId");    } catch (    Exception e) {      Debug.logError(UtilProperties.getMessage(resource_error,"OrderProblemGettingProductStoreRecords",locale) + e.getMessage(),module);      return;    }  }  List<CartShipInfo> shipGroups=getShipGroups();  if (shipGroups == null)   return;  Map<String,Map<ShoppingCartItem,Map<Integer,BigDecimal>>> dropShipItems=new HashMap<String,Map<ShoppingCartItem,Map<Integer,BigDecimal>>>();  for (int shipGroupIndex=0; shipGroupIndex < shipGroups.size(); shipGroupIndex++) {    CartShipInfo shipInfo=shipGroups.get(shipGroupIndex);    String shipGroupSupplierPartyId=shipInfo.getSupplierPartyId();    if (UtilValidate.isNotEmpty(shipGroupSupplierPartyId)) {      continue;    }    Set<ShoppingCartItem> shipItems=shipInfo.getShipItems();    if (UtilValidate.isEmpty(shipItems))     continue;    for (    ShoppingCartItem cartItem : shipItems) {      BigDecimal itemQuantity=cartItem.getQuantity();      BigDecimal dropShipQuantity=BigDecimal.ZERO;      GenericValue product=cartItem.getProduct();      if (product == null) {        continue;      }      String productId=product.getString("productId");      String requirementMethodEnumId=product.getString("requirementMethodEnumId");      if ("PRODRQM_DS".equals(requirementMethodEnumId)) {        dropShipQuantity=itemQuantity;      } else       if ("PRODRQM_DSATP".equals(requirementMethodEnumId)) {        try {          Map<String,Object> getProductInventoryAvailableResult=dispatcher.runSync("getInventoryAvailableByFacility",UtilMisc.toMap("productId",productId,"facilityId",facilityId));          BigDecimal availableToPromise=(BigDecimal)getProductInventoryAvailableResult.get("availableToPromiseTotal");          if (itemQuantity.compareTo(availableToPromise) <= 0) {            dropShipQuantity=BigDecimal.ZERO;          } else {            dropShipQuantity=itemQuantity.subtract(availableToPromise);          }        } catch (        Exception e) {          Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderRunServiceGetInventoryAvailableByFacilityError",locale) + e.getMessage(),module);        }      } else {        dropShipQuantity=BigDecimal.ZERO;      }      if (dropShipQuantity.compareTo(BigDecimal.ZERO) <= 0)       continue;      String supplierPartyId=null;      try {        Map<String,Object> getSuppliersForProductResult=dispatcher.runSync("getSuppliersForProduct",UtilMisc.<String,Object>toMap("productId",productId,"quantity",dropShipQuantity,"canDropShip","Y","currencyUomId",getCurrency()));        List<GenericValue> supplierProducts=UtilGenerics.checkList(getSuppliersForProductResult.get("supplierProducts"));        supplierProducts=EntityUtil.orderBy(supplierProducts,UtilMisc.toList("supplierPrefOrderId"));        GenericValue supplierProduct=EntityUtil.getFirst(supplierProducts);        if (!UtilValidate.isEmpty(supplierProduct)) {          supplierPartyId=supplierProduct.getString("partyId");        }      } catch (      Exception e) {        Debug.logWarning(UtilProperties.getMessage(resource_error,"OrderRunServiceGetSuppliersForProductError",locale) + e.getMessage(),module);      }      if (UtilValidate.isEmpty(supplierPartyId))       continue;      if (!dropShipItems.containsKey(supplierPartyId))       dropShipItems.put(supplierPartyId,new HashMap<ShoppingCartItem,Map<Integer,BigDecimal>>());      Map<ShoppingCartItem,Map<Integer,BigDecimal>> supplierCartItems=UtilGenerics.checkMap(dropShipItems.get(supplierPartyId));      if (!supplierCartItems.containsKey(cartItem))       supplierCartItems.put(cartItem,new HashMap<Integer,BigDecimal>());      Map<Integer,BigDecimal> cartItemGroupQuantities=UtilGenerics.checkMap(supplierCartItems.get(cartItem));      cartItemGroupQuantities.put(Integer.valueOf(shipGroupIndex),dropShipQuantity);    }  }  for (  String supplierPartyId : dropShipItems.keySet()) {    CartShipInfo shipInfo=null;    int newShipGroupIndex=-1;    TreeMap<Integer,CartShipInfo> supplierShipGroups=this.getShipGroupsBySupplier(supplierPartyId);    if (!UtilValidate.isEmpty(supplierShipGroups)) {      newShipGroupIndex=(supplierShipGroups.firstKey()).intValue();      shipInfo=supplierShipGroups.get(supplierShipGroups.firstKey());    }    if (newShipGroupIndex == -1) {      newShipGroupIndex=addShipInfo();      shipInfo=this.shipInfo.get(newShipGroupIndex);    }    shipInfo.supplierPartyId=supplierPartyId;    Map<ShoppingCartItem,Map<Integer,BigDecimal>> supplierCartItems=UtilGenerics.checkMap(dropShipItems.get(supplierPartyId));    for (    ShoppingCartItem cartItem : supplierCartItems.keySet()) {      Map<Integer,BigDecimal> cartItemGroupQuantities=UtilGenerics.checkMap(supplierCartItems.get(cartItem));      for (      Integer previousShipGroupIndex : cartItemGroupQuantities.keySet()) {        BigDecimal dropShipQuantity=cartItemGroupQuantities.get(previousShipGroupIndex);        positionItemToGroup(cartItem,dropShipQuantity,previousShipGroupIndex.intValue(),newShipGroupIndex,true);      }    }  }}  }
class C{  public void addRepositoryListener(ISVNListener listener){  repositoryListeners.add(listener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_HEAL_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201227,skillname);}  }
class C{  public static int ping(String url) throws Exception {  URL u=new URL(url);  HttpURLConnection c=(HttpURLConnection)u.openConnection();  c.connect();  int code=c.getResponseCode();  log.debug("ping=" + url + ", response.code="+ code);  c.disconnect();  return code;}  }
class C{  private static void addProjects(@NonNull LintClient client,@NonNull Module module,@Nullable List<VirtualFile> files,@NonNull Map<Module,Project> moduleMap,@NonNull Map<AndroidLibrary,Project> libraryMap,@NonNull Map<Project,Module> projectMap,@NonNull List<Project> projects){  if (moduleMap.containsKey(module)) {    return;  }  LintModuleProject project=createModuleProject(client,module);  if (project == null) {    List<AndroidFacet> dependentFacets=AndroidUtils.getAllAndroidDependencies(module,false);    for (    AndroidFacet dependentFacet : dependentFacets) {      addProjects(client,dependentFacet.getModule(),files,moduleMap,libraryMap,projectMap,projects);    }    return;  }  projects.add(project);  moduleMap.put(module,project);  projectMap.put(project,module);  if (processFileFilter(module,files,project)) {    return;  }  List<Project> dependencies=Lists.newArrayList();  List<AndroidFacet> dependentFacets=AndroidUtils.getAllAndroidDependencies(module,true);  for (  AndroidFacet dependentFacet : dependentFacets) {    Project p=moduleMap.get(dependentFacet.getModule());    if (p != null) {      dependencies.add(p);    } else {      addProjects(client,dependentFacet.getModule(),files,moduleMap,libraryMap,projectMap,dependencies);    }  }  AndroidFacet facet=AndroidFacet.getInstance(module);  if (facet != null) {    AndroidGradleModel androidGradleModel=AndroidGradleModel.get(facet);    if (androidGradleModel != null) {      addGradleLibraryProjects(client,files,libraryMap,projects,facet,androidGradleModel,project,projectMap,dependencies);    }  }  project.setDirectLibraries(dependencies);}  }
class C{  public static boolean load(String table,String where,Object[] args,String orderby,Bean b){  TimeStamp t=TimeStamp.create();  StringBuilder sql=new StringBuilder();  sql.append("select * from ").append(table);  if (where != null) {    sql.append(" where ").append(where);  }  if (orderby != null) {    sql.append(" ").append(orderby).append(" ");  }  sql.append(" limit 1");  Connection c=null;  PreparedStatement p=null;  ResultSet r=null;  try {    c=getConnection();    if (c == null)     return false;    p=c.prepareStatement(sql.toString());    int order=1;    if (args != null) {      for (int i=0; i < args.length; i++) {        Object o=args[i];        setParameter(p,order++,o);      }    }    r=p.executeQuery();    if (r.next()) {      b.load(r);      return true;    }  } catch (  Exception e) {    if (log.isErrorEnabled())     log.error(sql + toString(args),e);  } finally {    close(r,p,c);    if (t.past() > 2 && sqllog.isDebugEnabled()) {      sqllog.debug("cost: " + t.past() + "ms, sql=["+ sql+ "], args="+ Helper.toString(args)+ ", result="+ b);    }  }  return false;}  }
class C{  public static byte[] decode(byte[] data,byte[] key) throws Exception {  SecretKey securekey=new SecretKeySpec(key,"DESede");  Cipher cipher=Cipher.getInstance("DESede/CBC/PKCS5Padding");  IvParameterSpec zeroIv=new IvParameterSpec(iv);  cipher.init(Cipher.DECRYPT_MODE,securekey,zeroIv);  return cipher.doFinal(data);}  }
class C{  public PhotosGetCommentsQueryWithExtended needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  @Override public boolean isXYLocked(){  return true;}  }
class C{  public void enableDashedHighlightLine(float lineLength,float spaceLength,float phase){  mHighlightDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public static LinkedHashSet<String> unrollFiles(java.util.Collection<String> inputs){  LinkedHashSet<String> vcfFiles=new LinkedHashSet<>(inputs.size() + 1);  for (  String file : inputs) {    if (file.isEmpty()) {    } else     if (IOUtil.isUrl(file)) {      vcfFiles.add(file);    } else     if (file.endsWith(".list")) {      File f=new File(file);      IOUtil.assertFileIsReadable(f);      for (      final String s : IOUtil.readLines(f)) {        if (s.endsWith("#"))         continue;        if (s.trim().isEmpty())         continue;        vcfFiles.add(s);      }    } else {      vcfFiles.add(file);    }  }  return vcfFiles;}  }
class C{  public void onLongPress(long time,float x,float y){  getActiveStripLayoutHelper().onLongPress(time,x,y);}  }
class C{  public LtExpr newLtExpr(Value op1,Value op2){  return new JLtExpr(op1,op2);}  }
class C{  public <R>R executeTransactionalCommand(final TransactionalCommand<R> command,final int retryCount) throws MithraBusinessException {  return this.executeTransactionalCommand(command,new TransactionStyle(this.transactionTimeout,retryCount));}  }
class C{  public synchronized TemporaryQueue createTemporaryQueue() throws JMSException {  ensureOpen();  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,"Creating temporary Queue");  }  return new GSTemporaryQueueImpl(m_sessionID + ":" + getRandomInt(),m_sessionID);}  }
class C{  public FriendsGetRequestsQueryWithNeedMutual sort(FriendsGetRequestsSort value){  return unsafeParam("sort",value);}  }
class C{  private static void disableExcludedModules(@NotNull DataNode<ProjectData> projectInfo,@NotNull Collection<DataNode<ModuleData>> selectedModules){  Collection<DataNode<ModuleData>> allModules=findAll(projectInfo,ProjectKeys.MODULE);  if (selectedModules.size() != allModules.size()) {    Set<DataNode<ModuleData>> moduleToIgnore=Sets.newHashSet(allModules);    moduleToIgnore.removeAll(selectedModules);    for (    DataNode<ModuleData> moduleNode : moduleToIgnore) {      visit(moduleNode,null);    }  }}  }
class C{  public SootClass createSootClass(){  Walker w=new Walker(SootResolver.v());  mTree.apply(w);  return w.getSootClass();}  }
class C{  public LmdbException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public static byte[] writeLong(long l){  return ByteBuffer.allocate(8).putLong(l).array();}  }
class C{  private static boolean snapExistingVerticalMargin(ConstraintWidget widget,Point candidatePoint){  int y=candidatePoint.y;  boolean snapped=false;  ConstraintAnchor top=widget.getAnchor(ConstraintAnchor.Type.TOP);  ConstraintAnchor bottom=widget.getAnchor(ConstraintAnchor.Type.BOTTOM);  if (top.isConnected() && bottom.isConnected()) {  } else   if (top.isConnected()) {    int y1=y;    int y2=WidgetInteractionTargets.constraintHandle(top.getTarget()).getDrawY();    int margin=((y1 - y2) / SceneDraw.GRID_SPACING) * SceneDraw.GRID_SPACING;    if (margin < 0) {      margin=0;    }    top.setMargin(margin);    snapped=true;  } else   if (bottom.isConnected()) {    int y1=y + widget.getHeight();    int y2=WidgetInteractionTargets.constraintHandle(bottom.getTarget()).getDrawY();    int margin=((y2 - y1) / SceneDraw.GRID_SPACING) * SceneDraw.GRID_SPACING;    if (margin < 0) {      margin=0;    }    bottom.setMargin(margin);    snapped=true;  }  return snapped;}  }
class C{  public void tokenize(String inputFileName,String outputDirectory){  JavaRDD<String> input=readTextFile(inputFileName);  JavaRDD<String> output=tokenize(input);  output.saveAsTextFile(outputDirectory);}  }
class C{  @Override protected AudioInputStream generateAudioStream(List<SelectedUnit> units){  int len=units.size();  Datagram[][] datagrams=new Datagram[len][];  Datagram[] leftContexts=new Datagram[len];  Datagram[] rightContexts=new Datagram[len];  for (int i=0; i < len; i++) {    SelectedUnit unit=units.get(i);    HnmUnitData unitData=(HnmUnitData)unit.getConcatenationData();    assert unitData != null : "Should not have null unitdata here";    Datagram[] frames=unitData.getFrames();    assert frames != null : "Cannot generate audio from null frames";    datagrams[i]=frames;    Unit prevInDB=database.getUnitFileReader().getPreviousUnit(unit.getUnit());    Unit prevSelected;    if (i == 0)     prevSelected=null; else     prevSelected=units.get(i - 1).getUnit();    if (prevInDB != null && !prevInDB.equals(prevSelected)) {      leftContexts[i]=unitData.getLeftContextFrame();    }    Unit nextInDB=database.getUnitFileReader().getNextUnit(unit.getUnit());    Unit nextSelected;    if (i + 1 == len)     nextSelected=null; else     nextSelected=units.get(i + 1).getUnit();    if (nextInDB != null && !nextInDB.equals(nextSelected)) {      rightContexts[i]=unitData.getRightContextFrame();    }  }  BufferedDoubleDataSource audioSource=synthesize(datagrams,leftContexts,rightContexts);  return new DDSAudioInputStream(audioSource,audioformat);}  }
class C{  public PegasusSolver(){  super(DEFAULT_ABSOLUTE_ACCURACY,Method.PEGASUS);}  }
class C{  public boolean removeEdge(Edge e){  edgeCheck(e,true);  return removeEdge(e.getRow());}  }
class C{  public TableIterator iterator(IntIterator rows){  return new TableIterator(this,rows);}  }
class C{  @Override protected void fillUtterance(Utterance utterance,Element sentence){  fillUtterance(utterance,sentence,true,false,false);}  }
class C{  int readCorner4(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public static ToolbarTapTarget forToolbarMenuItem(android.widget.Toolbar toolbar,@IdRes int menuItemId,CharSequence title,@Nullable CharSequence description){  return new ToolbarTapTarget(toolbar,menuItemId,title,description);}  }
class C{  public BoardGetTopicsQuery topicIds(List<Integer> value){  return unsafeParam("topic_ids",value);}  }
class C{  public ConcurrentHashSet(){  delegate=new MapMaker().concurrencyLevel(Runtime.getRuntime().availableProcessors()).makeMap();}  }
class C{  public ComboMenu(String label){  super(label);  iconRenderer=new ArrowIcon(SwingConstants.SOUTH,true);  setBorder(new EtchedBorder());  setIcon(new BlankIcon(null,11));  setHorizontalTextPosition(JButton.LEFT);  setFocusPainted(true);}  }
class C{  private void mapClasses(NodeList elementList){  for (int i=0, iMax=elementList.getLength(); i < iMax; i++) {    Object oneObj=elementList.item(i);    if (!(oneObj instanceof Element)) {      continue;    }    Element oneEle=(Element)oneObj;    this.mapSingleClass(oneEle);    if (oneEle.getChildNodes().getLength() > 0) {      this.mapClasses(oneEle.getChildNodes());    }  }}  }
class C{  public final boolean between(int iNum,int iMin,int iMax){  return (iNum >= iMin) && (iNum <= iMax);}  }
class C{  public void choose(Flavor item){  checkInit();  int index=mFlavors.indexOf(item);  mPreferences.edit().putInt(PREFERENCE_FLAVOR_KEY,index).apply();}  }
class C{  public static String bind(String id,String binding){  return bind(id,new String[]{binding});}  }
class C{  public boolean isHighlighted(int row){  return getBoolean(row,VisualItem.HIGHLIGHT);}  }
class C{  public void ready(){}  }
class C{  public void removeScrollingListener(OnWheelScrollListener listener){  scrollingListeners.remove(listener);}  }
class C{  protected void ensureOpen() throws IllegalStateException {  if (closed) {    throw new IllegalStateException("Forbidden call on a closed connection.");  }}  }
class C{  public synchronized static boolean isOpenAvailable(){  if (!openAvailableInitialized) {    if ("true".equals(allowDesktopOpen) && isDesktopSupported())     openAvailable=Desktop.getDesktop().isSupported(Desktop.Action.OPEN); else     openAvailable=false;    openAvailableInitialized=true;  }  return openAvailable;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public AudioReorderQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public Math_Vector sub(Math_Vector other){  this.x-=other.x;  this.y-=other.y;  return this;}  }
class C{  protected AbstractWell(final int k,final int[] seed){  final int r=calculateBlockCount(k);  this.v=new int[r];  this.index=0;  setSeed(seed);}  }
class C{  void handleFieldAnnotation(Host h,Field f){  Set<? extends Annotation> aSet=f.getAnnotations();  if (aSet != null && !aSet.isEmpty()) {    List<Tag> tags=handleAnnotation(aSet,null);    if (tags != null)     for (    Tag t : tags)     if (t != null) {      h.addTag(t);      Debug.printDbg("add field annotation: ",t);    }  }}  }
class C{  public static <T>T createService(final Class<T> clazz,final String baseUrl){  Retrofit retrofit=new Retrofit.Builder().baseUrl(baseUrl).addConverterFactory(GsonConverterFactory.create()).build();  return retrofit.create(clazz);}  }
class C{  private int calcSignum(boolean isPositive){  if ((years == null || years.signum() == 0) && (months == null || months.signum() == 0) && (days == null || days.signum() == 0)&& (hours == null || hours.signum() == 0)&& (minutes == null || minutes.signum() == 0)&& (seconds == null || seconds.signum() == 0)) {    return 0;  }  if (isPositive) {    return 1;  } else {    return -1;  }}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private static boolean moveToFront(AppTask task){  try {    task.moveToFront();    return true;  } catch (  SecurityException e) {    sMoveToFrontExceptionHistogram.recordHit();  }  return false;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception ignored) {  }  try {    return file.delete();  } catch (  Exception ignored) {    return false;  }}  }
class C{  public String help(int initialIndent,int rightMargin,int hangingIndent){  StringBuffer newLineBuf=new StringBuffer(2 + rightMargin);  newLineBuf.append('\n');  if (hangingIndent < 0) {    hangingIndent=0;  }  for (int i=0; i < hangingIndent; i++) {    newLineBuf.append(' ');  }  String newLine=newLineBuf.toString();  StringBuffer result=new StringBuffer();  int lineLength=0;  for (int i=0; i < initialIndent; i++) {    lineLength++;    result.append(' ');  }  for (int i=0; i < options.length; i++) {    if (i > 0) {      result.append('|');      lineLength++;    }    String name=options[i].name();    int nameLength=name.length();    if ((lineLength + nameLength) > rightMargin) {      result.append(newLine);      lineLength=hangingIndent;    }    result.append(name);    lineLength+=nameLength;  }  return result.toString();}  }
class C{  private boolean hasURL(URL url){  URL[] urls=getURLs();  for (int i=0; i < urls.length; i++) {    if (urls[i].equals(url))     return (true);  }  return (false);}  }
class C{  public static void constantPlusExpressionAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (!MiniLangUtil.isConstantPlusExpressionAttribute(attributeValue)) {      handleError("Constant+expr attribute \"" + name + "\" is missing a constant value (expression-only constants are not allowed).",method,element);    }    if (MiniLangUtil.containsScript(attributeValue)) {      handleError("Constant+expr attribute \"" + name + "\" cannot contain a script (remove script).",method,element);    }  }}  }
class C{  public CFGOption match(String quarry) throws soot.CompilationDeathException {  System.out.println(quarry);  String uncasedQuarry=quarry.toLowerCase();  int match=-1;  for (int i=0; i < options.length; i++) {    String uncasedName=options[i].name().toLowerCase();    System.out.println(uncasedName);    if (uncasedName.startsWith(uncasedQuarry)) {      if (match == -1) {        match=i;      } else {        G.v().out.println(quarry + " is ambiguous; it matches " + options[match].name()+ " and "+ options[i].name());        throw new CompilationDeathException(CompilationDeathException.COMPILATION_ABORTED,"Option parse error");      }    }  }  if (match == -1) {    G.v().out.println("\"" + quarry + "\""+ " does not match any value.");    throw new CompilationDeathException(CompilationDeathException.COMPILATION_ABORTED,"Option parse error");  } else {    return options[match];  }}  }
class C{  public TCPInputPoller(int port){  this.requestedPortNumber=port;  this.commandQueue=new ArrayList<CommandAndIPAddress>();}  }
class C{  public Unload(World world){  super(world);}  }
class C{  @Nullable private static WindowListener removeCloseListener(@NotNull JFrame frame){  WindowListener[] listeners=frame.getListeners(WindowListener.class);  for (  WindowListener listener : listeners) {    if (listener.getClass().getName().startsWith(WelcomeFrame.class.getName())) {      frame.removeWindowListener(listener);      return listener;    }  }  return null;}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  public int download_file1(String file_id,long file_offset,long download_bytes,String local_filename) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.download_file(parts[0],parts[1],file_offset,download_bytes,local_filename);}  }
class C{  public void showBadgeAtIndex(int itemIndex,int badgeText,@ColorInt int badgeColor){  if (itemIndex < 0 || itemIndex > spaceItems.size()) {    throwArrayIndexOutOfBoundsException(itemIndex);  } else {    RelativeLayout badgeView=badgeList.get(itemIndex);    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {      badgeView.setBackground(BadgeHelper.makeShapeDrawable(badgeColor));    } else {      badgeView.setBackgroundDrawable(BadgeHelper.makeShapeDrawable(badgeColor));    }    BadgeItem badgeItem=new BadgeItem(itemIndex,badgeText,badgeColor);    BadgeHelper.showBadge(badgeView,badgeItem,shouldShowBadgeWithNinePlus);    badgeSaveInstanceHashMap.put(itemIndex,badgeItem);  }}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  private void processResolveWorklist(){  for (int i=SootClass.BODIES; i >= SootClass.HIERARCHY; i--) {    while (!worklist[i].isEmpty()) {      SootClass sc=worklist[i].pop();      if (resolveEverything()) {        boolean onlySignatures=sc.isPhantom() || (Options.v().no_bodies_for_excluded() && Scene.v().isExcluded(sc) && !Scene.v().getBasicClasses().contains(sc.getName()));        if (onlySignatures) {          bringToSignatures(sc);          sc.setPhantomClass();          for (          SootMethod m : sc.getMethods()) {            m.setPhantom(true);          }          for (          SootField f : sc.getFields()) {            f.setPhantom(true);          }        } else         bringToBodies(sc);      } else {switch (i) {case SootClass.BODIES:          bringToBodies(sc);        break;case SootClass.SIGNATURES:      bringToSignatures(sc);    break;case SootClass.HIERARCHY:  bringToHierarchy(sc);break;}}}}}  }
class C{  public void addSymbol(EsriSymbolInterface symbolObj){  symbolMap.put(symbolObj.getSymbolClass(),symbolObj);}  }
class C{  public static SamlWebViewDialog newInstance(String url,String targetUrl){  SamlWebViewDialog fragment=new SamlWebViewDialog();  Bundle args=new Bundle();  args.putString(ARG_INITIAL_URL,url);  args.putString(ARG_TARGET_URL,targetUrl);  fragment.setArguments(args);  return fragment;}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  public void addGlobalTypeDecl(XSTypeDefinition decl){  fGlobalTypeDecls.put(decl.getName(),decl);  if (decl instanceof XSComplexTypeDecl) {    ((XSComplexTypeDecl)decl).setNamespaceItem(this);  } else   if (decl instanceof XSSimpleTypeDecl) {    ((XSSimpleTypeDecl)decl).setNamespaceItem(this);  }}  }
class C{  @Override public Map<String,Object> runSync(String localName,ModelService modelService,Map<String,Object> context) throws GenericServiceException {  Map<String,Object> result=serviceInvoker(localName,modelService,context);  if (result == null)   throw new GenericServiceException("Service did not return expected result");  return result;}  }
class C{  public void stop(){}  }
class C{  public static Uri createFileUri(String path){  if (path.startsWith("file://")) {    return Uri.parse(path);  }  return Uri.fromFile(new File(path));}  }
class C{  @Subscribe(sticky=true,threadMode=ThreadMode.MAIN) public void onEventMainThread(MediaEvent event){  RTEditText editor=mEditors.get(mActiveEditor);  RTMedia media=event.getMedia();  if (editor != null && media instanceof RTImage) {    insertImage(editor,(RTImage)media);    EventBus.getDefault().removeStickyEvent(event);  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static final Edge locateEdgeInGraph(UniqueVertexGraph gGraph,Vertex vHead,Vertex vTail){  Edge eRes=locateDirectedEdgeInGraph(gGraph,vHead,vTail);  return eRes == null ? locateDirectedEdgeInGraph(gGraph,vTail,vHead) : eRes;}  }
class C{  public static void assertSame(double expected,double actual){  Assert.assertEquals(expected,actual,0);}  }
class C{  private void loadList(String listPath,String className) throws IOException {  BufferedReader in=new BufferedReader(new InputStreamReader(FileTools.openResourceFileAsStream(listPath.toString()),StandardCharsets.UTF_8));  Set<String> items=new HashSet<String>();  String line;  while ((line=in.readLine()) != null) {    line=line.trim();    if (line.startsWith("#") || (line.length() == 0)) {      continue;    }    int end=line.indexOf('#');    if (-1 != end) {      line=line.substring(0,end).trim();      if (line.length() == 0) {        continue;      }    }    items.add(line);    items.add(line.toUpperCase());    char firstChar=line.charAt(0);    if (Character.isLowerCase(firstChar)) {      firstChar=Character.toUpperCase(firstChar);      items.add(firstChar + line.substring(1));    }  }  in.close();  this.getClassMembersMap().put(className,items);}  }
class C{  protected final void scanEntityValue(XMLString value,XMLString nonNormalizedValue) throws IOException, XNIException {  int quote=fEntityScanner.scanChar();  if (quote != '\'' && quote != '"') {    reportFatalError("OpenQuoteMissingInDecl",null);  }  int entityDepth=fEntityDepth;  XMLString literal=fString;  XMLString literal2=fString;  if (fEntityScanner.scanLiteral(quote,fString) != quote) {    fStringBuffer.clear();    fStringBuffer2.clear();    do {      fStringBuffer.append(fString);      fStringBuffer2.append(fString);      if (fEntityScanner.skipChar('&')) {        if (fEntityScanner.skipChar('#')) {          fStringBuffer2.append("&#");          scanCharReferenceValue(fStringBuffer,fStringBuffer2);        } else {          fStringBuffer.append('&');          fStringBuffer2.append('&');          String eName=fEntityScanner.scanName();          if (eName == null) {            reportFatalError("NameRequiredInReference",null);          } else {            fStringBuffer.append(eName);            fStringBuffer2.append(eName);          }          if (!fEntityScanner.skipChar(';')) {            reportFatalError("SemicolonRequiredInReference",new Object[]{eName});          } else {            fStringBuffer.append(';');            fStringBuffer2.append(';');          }        }      } else       if (fEntityScanner.skipChar('%')) {        while (true) {          fStringBuffer2.append('%');          String peName=fEntityScanner.scanName();          if (peName == null) {            reportFatalError("NameRequiredInPEReference",null);          } else           if (!fEntityScanner.skipChar(';')) {            reportFatalError("SemicolonRequiredInPEReference",new Object[]{peName});          } else {            if (scanningInternalSubset()) {              reportFatalError("PEReferenceWithinMarkup",new Object[]{peName});            }            fStringBuffer2.append(peName);            fStringBuffer2.append(';');          }          startPE(peName,true);          fEntityScanner.skipSpaces();          if (!fEntityScanner.skipChar('%'))           break;        }      } else {        int c=fEntityScanner.peekChar();        if (XMLChar.isHighSurrogate(c)) {          scanSurrogates(fStringBuffer2);        } else         if (isInvalidLiteral(c)) {          reportFatalError("InvalidCharInLiteral",new Object[]{Integer.toHexString(c)});          fEntityScanner.scanChar();        } else         if (c != quote || entityDepth != fEntityDepth) {          fStringBuffer.append((char)c);          fStringBuffer2.append((char)c);          fEntityScanner.scanChar();        }      }    } while (fEntityScanner.scanLiteral(quote,fString) != quote);    fStringBuffer.append(fString);    fStringBuffer2.append(fString);    literal=fStringBuffer;    literal2=fStringBuffer2;  }  value.setValues(literal);  nonNormalizedValue.setValues(literal2);  if (!fEntityScanner.skipChar(quote)) {    reportFatalError("CloseQuoteMissingInDecl",null);  }}  }
class C{  public DataTagRemove(){}  }
class C{  @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  private void checkQuantileError(double[] data,double value,double quantile,double tolerance,double referenceValue){  final double n=(double)data.length;  int nLess=0;  for (  double val : data) {    if (val < value) {      nLess++;    }  }  if (Double.isNaN(referenceValue)) {    assertTrue(Double.isNaN(value));  } else   if (Double.isInfinite(value)) {    assertTrue(value == referenceValue);  } else {    assertTrue("Quantile error exceeded: value returned = " + value + " Reference value = "+ referenceValue+ " quantile = "+ quantile+ " n = "+ n+ " error = "+ (quantile - (double)nLess / n),FastMath.abs(quantile - (double)nLess / n) < tolerance);  }}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public static Fop createFopInstance(OutputStream out,String outputFormat) throws FOPException {  if (UtilValidate.isEmpty(outputFormat)) {    outputFormat=MimeConstants.MIME_PDF;  }  FopFactory fopFactory=getFactoryInstance();  FOUserAgent foUserAgent=fopFactory.newFOUserAgent();  Fop fop;  if (out != null) {    fop=fopFactory.newFop(outputFormat,foUserAgent,out);  } else {    fop=fopFactory.newFop(outputFormat,foUserAgent);  }  return fop;}  }
class C{  public void load(String joinFileName,InputStream joinPdfStream,InputStream joinTreeStream,String trickyPhonesFile) throws IOException, MaryConfigurationException {  jcf=new JoinCostFeatures(joinFileName);  assert featureDef != null : "Expected to have a feature definition, but it is null!";  HTSCARTReader htsReader=new HTSCARTReader();  int numStates=1;  PhoneTranslator phTranslator=new PhoneTranslator(new FileInputStream(trickyPhonesFile));  try {    joinTree=htsReader.load(numStates,joinTreeStream,joinPdfStream,PdfFileFormat.join,featureDef,phTranslator);  } catch (  Exception e) {    IOException ioe=new IOException("Cannot load join model trees");    ioe.initCause(e);    throw ioe;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GET_CASH_SOCIALACTION(String value0){  return new SM_SYSTEM_MESSAGE(1390243,value0);}  }
class C{  private static byte[] toByteArray(String str){  int length=str.length();  byte[] result=new byte[length + 1];  for (int i=0; i < length; i++)   result[i]=(byte)str.charAt(i);  result[length]=0;  return result;}  }
class C{  public static final MediaFormat createAudioFormat(String mime,int sampleRate,int channelCount){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_SAMPLE_RATE,sampleRate);  format.setInteger(KEY_CHANNEL_COUNT,channelCount);  return format;}  }
class C{  private static void decodeAnsiX12Segment(BitSource bits,StringBuilder result) throws FormatException {  int[] cValues=new int[3];  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];      if (cValue == 0) {        result.append('\r');      } else       if (cValue == 1) {        result.append('*');      } else       if (cValue == 2) {        result.append('>');      } else       if (cValue == 3) {        result.append(' ');      } else       if (cValue < 14) {        result.append((char)(cValue + 44));      } else       if (cValue < 40) {        result.append((char)(cValue + 51));      } else {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);}  }
class C{  public ClassScanner(String packageName){  this(packageName,new ArrayList<>());}  }
class C{  public static boolean isAnnotationPresent(Class<?> klass,Class<? extends Annotation> annotationType){  return org.springframework.core.annotation.AnnotationUtils.findAnnotation(klass,annotationType) != null;}  }
class C{  private void analyzeAssociations(Class<?> modelClass){  Collection<AssociationsInfo> associationInfos=getAssociationInfo(modelClass.getName());  for (  AssociationsInfo associationInfo : associationInfos) {    String associatedTableName=DBUtility.getTableNameByClassName(associationInfo.getAssociatedClassName());    if (associationInfo.getAssociationType() == Const.Model.MANY_TO_ONE || associationInfo.getAssociationType() == Const.Model.ONE_TO_ONE) {      String classHoldsForeignKey=associationInfo.getClassHoldsForeignKey();      if (!modelClass.getName().equals(classHoldsForeignKey)) {        getForeignKeyTableToDelete().add(associatedTableName);      }    } else     if (associationInfo.getAssociationType() == Const.Model.MANY_TO_MANY) {      String joinTableName=DBUtility.getIntermediateTableName(getTableName(modelClass),associatedTableName);      joinTableName=BaseUtility.changeCase(joinTableName);      getForeignKeyTableToDelete().add(joinTableName);    }  }}  }
class C{  private boolean isUISource(Stmt sCallSite,InterproceduralCFG<Unit,SootMethod> cfg){  if (this.layoutMatching != LayoutMatchingMode.NoMatch && sCallSite.containsInvokeExpr()) {    InvokeExpr ie=sCallSite.getInvokeExpr();    final String signature=methodToSignature.getUnchecked(ie.getMethod());    if (signature.equals(Activity_FindViewById) || signature.equals(View_FindViewById)) {      SootMethod uiMethod=cfg.getMethodOf(sCallSite);      if (analyzedLayoutMethods.add(uiMethod))       ConstantPropagatorAndFolder.v().transform(uiMethod.getActiveBody());      if (this.layoutMatching == LayoutMatchingMode.MatchAll)       return true;      if (this.layoutControls == null)       return false;      if (ie.getArgCount() != 1) {        System.err.println("Framework method call with unexpected " + "number of arguments");        return false;      }      int id=0;      if (ie.getArg(0) instanceof IntConstant)       id=((IntConstant)ie.getArg(0)).value; else       if (ie.getArg(0) instanceof Local) {        Integer idVal=findLastResIDAssignment(sCallSite,(Local)ie.getArg(0),(BiDiInterproceduralCFG<Unit,SootMethod>)cfg,new HashSet<Stmt>(cfg.getMethodOf(sCallSite).getActiveBody().getUnits().size()));        if (idVal == null) {          System.err.println("Could not find assignment to local " + ((Local)ie.getArg(0)).getName() + " in method "+ cfg.getMethodOf(sCallSite).getSignature());          return false;        } else         id=idVal.intValue();      } else {        System.err.println("Framework method call with unexpected " + "parameter type: " + ie.toString() + ", "+ "first parameter is of type "+ ie.getArg(0).getClass());        return false;      }      LayoutControl control=this.layoutControls.get(id);      if (control == null) {        System.err.println("Layout control with ID " + id + " not found");        return false;      }      if (this.layoutMatching == LayoutMatchingMode.MatchSensitiveOnly && control.isSensitive())       return true;    }  }  return false;}  }
class C{  public void saveFingerprintAsFile(byte[] fingerprint,String filename){  FileOutputStream fileOutputStream;  try {    fileOutputStream=new FileOutputStream(filename);    fileOutputStream.write(fingerprint);    fileOutputStream.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public PercentFormatter(DecimalFormat format){  this.mFormat=format;}  }
class C{  public WildcardFilter(List<String> wildcards){  if (wildcards == null) {    throw new IllegalArgumentException("The wildcard list must not be null");  }  this.wildcards=wildcards.toArray(new String[wildcards.size()]);}  }
class C{  private void startIntermediateMerging(File[] intermediateFiles){  File file=new File(parameters.getTempFileLocation() + File.separator + parameters.getTableName()+ System.nanoTime()+ CarbonCommonConstants.MERGERD_EXTENSION);  IntermediateFileMerger merger=new IntermediateFileMerger(parameters,intermediateFiles,file);  executorService.submit(merger);}  }
class C{  public IObjectInfo<T> addUnlocked(T subject){  return store_impl(subject);}  }
class C{  private void doCreate(FileEntry entry){  for (  FileAlterationListener listener : listeners) {    if (entry.isDirectory()) {      listener.onDirectoryCreate(entry.getFile());    } else {      listener.onFileCreate(entry.getFile());    }  }  FileEntry[] children=entry.getChildren();  for (  FileEntry aChildren : children) {    doCreate(aChildren);  }}  }
class C{  public boolean isIncluded(int value){  for (  Range r : ranges) {    if (r.start <= value && value <= r.end) {      return true;    }  }  return false;}  }
class C{  public ConstrainableLandlordLease(Uuid cookie,Landlord landlord,Uuid landlordUuid,long expiration,MethodConstraints methodConstraints){  super(cookie,constrainServer(landlord,methodConstraints,methodMapArray),landlordUuid,expiration);  this.methodConstraints=methodConstraints;}  }
class C{  public GroupByValue(){}  }
class C{  public void generateAllDotDescForWagon(PrintWriter out,Set<String> featuresToIgnore){  out.println("(");  out.println("(occurid cluster)");  for (int i=0, n=getNumberOfFeatures(); i < n; i++) {    out.print("( ");    String featureName=getFeatureName(i);    out.print(featureName);    if (featuresToIgnore != null && featuresToIgnore.contains(featureName)) {      out.print(" ignore");    }    if (i < numByteFeatures + numShortFeatures) {      for (int v=0, vmax=getNumberOfValues(i); v < vmax; v++) {        out.print("  ");        String val=getFeatureValueAsString(i,v);        if (val.indexOf('"') != -1) {          StringBuilder buf=new StringBuilder();          for (int c=0; c < val.length(); c++) {            char ch=val.charAt(c);            if (ch == '"')             buf.append("\\\""); else             buf.append(ch);          }          val=buf.toString();        }        out.print("\"" + val + "\"");      }      out.println(" )");    } else {      out.println(" float )");    }  }  out.println(")");}  }
class C{  public boolean hasEventStartDate(){  return eventStartDate != null;}  }
class C{  public LeastSquaresBuilder lazyEvaluation(final boolean newValue){  lazyEvaluation=newValue;  return this;}  }
class C{  public MqttConnectionDetailsWithOptions(final String id,final MqttConnectionDetails details) throws ConfigurationException {  this.id=id;  this.setProtocol(details.getProtocol());  this.setName(details.getName());  this.setClientID(details.getClientID());  this.getServerURI().addAll(details.getServerURI());  this.setConnectionTimeout(details.getConnectionTimeout());  this.setKeepAliveInterval(details.getKeepAliveInterval());  this.setCleanSession(details.isCleanSession());  this.setLastWillAndTestament(details.getLastWillAndTestament());  this.setUserCredentials(details.getUserCredentials());  this.setReconnectionSettings(details.getReconnectionSettings());  this.setSSL(details.getSSL());  final boolean sslEnabled=details.getSSL() != null && details.getSSL().getMode() != null && !details.getSSL().getMode().equals(SecureSocketModeEnum.DISABLED);  this.setWebSocket(details.isWebSocket());  MqttConfigurationUtils.completeServerURIs(this,sslEnabled,Boolean.TRUE.equals(this.isWebSocket()));  MqttConfigurationUtils.populateConnectionDefaults(this);  try {    populateMqttConnectOptions();  } catch (  IllegalArgumentException|SpyException e) {    throw new ConfigurationException("Invalid configuration parameters",e);  }}  }
class C{  public int provideBlockThreshold(){  return 1000;}  }
class C{  @Override public void ignoredCharacters(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  public static void o(int ia[],int w){  int n=ia.length;  int ncp=Parameters.PageWidth / w;  int jl=0;  while (jl < n) {    int ju=Math.min(n,jl + ncp);    System.out.print("\n");    for (int j=jl; j < ju; j++) {      String num=Integer.toString(ia[j]);      while (num.length() < w)       num=" " + num;      System.out.print(num);    }    jl=jl + ncp;  }  System.out.print("\n");}  }
class C{  public PollsEditQuery addAnswers(String value){  return unsafeParam("add_answers",value);}  }
class C{  public PollsAddVoteQuery(VkApiClient client,UserActor actor,int pollId,int answerId){  super(client,"polls.addVote",BoolInt.class);  accessToken(actor.getAccessToken());  pollId(pollId);  answerId(answerId);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  @Override public void close() throws CannotCloseContainerException {  for (  FreePortGenerator.PortHandle portHandle : portHandels) {    portHandle.release();  }  portHandels.clear();  if (webAppContext.isRunning()) {    try {      webAppContext.stop();      webAppContext.destroy();    } catch (    Exception e) {      logger.warn("Failed to stop/destroy web context",e);    } finally {      webAppContext.setClassLoader(null);    }    if (contextHandlerCollection != null) {      contextHandlerCollection.removeHandler(webAppContext);    }  }  ConfigurableApplicationContext confAppContext=(ConfigurableApplicationContext)applicationContext;  confAppContext.close();  try {    jettyHolder.stop();  } catch (  Exception e) {    logger.warn("Failed to stop jetty server",e);  }  super.close();}  }
class C{  protected ImageFacade(Context context){  this(new Bucket(context),new Image(context));}  }
class C{  public void selectToken(ClipboardToken token){  selectedToken=token;  updateClipboardDescription();}  }
class C{  public boolean notmainentry(){  return soot.PhaseOptions.getBoolean(options,"notmainentry");}  }
class C{  public synchronized boolean hasRef(long gen){  Integer rc=genRefCounts.get(gen);  if (rc == null) {    return false;  } else {    assert rc.intValue() > 0;    return true;  }}  }
class C{  public DocumentNGramDistroGraph(){  InitGraphs();}  }
class C{  public static byte[] toUtf(String s) throws UTFDataFormatException {  try {    OptimizedByteArrayOutputStream bout=new OptimizedByteArrayOutputStream(s.length());    DataOutput dout=new DataOutputStream(bout);    dout.writeUTF(s);    return bout.toByteArray();  } catch (  UTFDataFormatException e) {    throw e;  }catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  public String toString(){  return Category + "::" + Filename;}  }
class C{  private Tab createConnectionTab(final String name,final Node content,final MqttConnectionController connectionController){  final Tab tab=new Tab();  connectionController.setTab(tab);  tab.setText(name);  tab.setContent(content);  return tab;}  }
class C{  public Matrix plusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] + B.A[i][j];    }  }  return this;}  }
class C{  @Override public void loadData(){  return;}  }
class C{  public static Data load(String table,W q){  return Helper.load(table,q,Data.class);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_ENTER_ME(String value0){  return new SM_SYSTEM_MESSAGE(1400560,value0);}  }
class C{  private static boolean isAndroidManifestXmlFile(@NotNull PsiFile file){  return file.getName().equalsIgnoreCase(SdkConstants.FN_ANDROID_MANIFEST_XML);}  }
class C{  public static FloatBuffer createFloatBuffer(float[] coords){  ByteBuffer bb=ByteBuffer.allocateDirect(coords.length * SIZEOF_FLOAT);  bb.order(ByteOrder.nativeOrder());  FloatBuffer fb=bb.asFloatBuffer();  fb.put(coords);  fb.position(0);  return fb;}  }
class C{  private static int skipAlias(String stmt,int offset){  offset=ParseUtil.move(stmt,offset,0);  if (offset >= stmt.length())   return offset;switch (stmt.charAt(offset)) {case '\'':    return skipString(stmt,offset);case '"':  return skipString2(stmt,offset);case '`':return skipIdentifierEscape(stmt,offset);default :if (CharTypes.isIdentifierChar(stmt.charAt(offset))) {for (; offset < stmt.length() && CharTypes.isIdentifierChar(stmt.charAt(offset)); ++offset) ;return offset;}}return -1;}  }
class C{  protected void removeBogusHeads(){  Chain<Unit> units=body.getUnits();  Unit trueHead=units.getFirst();  while (this.getHeads().size() > 1) {    for (Iterator<Unit> headItr=this.getHeads().iterator(); headItr.hasNext(); ) {      Unit head=headItr.next();      if (trueHead == head)       continue;      this.unitToPreds.remove(head);      List<Unit> succs=this.unitToSuccs.get(head);      for (Iterator<Unit> succsItr=succs.iterator(); succsItr.hasNext(); ) {        List<Unit> tobeRemoved=new ArrayList<Unit>();        Unit succ=succsItr.next();        List<Unit> predOfSuccs=this.unitToPreds.get(succ);        for (Iterator<Unit> predItr=predOfSuccs.iterator(); predItr.hasNext(); ) {          Unit pred=predItr.next();          if (pred == head)           tobeRemoved.add(pred);        }        predOfSuccs.removeAll(tobeRemoved);      }      this.unitToSuccs.remove(head);      if (units.contains(head))       units.remove(head);    }    this.buildHeadsAndTails();  }}  }
class C{  public static GapisConnection connect(){  GapisProcess gapis;synchronized (myInstanceLock) {    if (myInstance == null) {      myInstance=new GapisProcess();    }    gapis=myInstance;  }  return gapis.doConnect();}  }
class C{  private TemplateParser(){  registerDefaultMacros();}  }
class C{  private void execute(){  for (  AbstractAnnotationManager manager : managers)   manager.execute(target,context);}  }
class C{  public synchronized void switchCurrentCounter(){  currentCounter=(currentCounter + 1) % counters.length;  counters[currentCounter]=0;}  }
class C{  public void updateEnableState(){  if (SwingUtilities.isEventDispatchThread())   super.updateEnableState();  for (  MenuItem menuItem : menuItem2CommandFX.keySet()) {    ICommand command=menuItem2CommandFX.get(menuItem);    menuItem.setDisable(!command.isApplicable());    if (command instanceof ICheckBoxCommand) {      ((CheckMenuItem)menuItem).setSelected(((ICheckBoxCommand)command).isSelected());    }  }}  }
class C{  public TupleComparator(int col,Class type,boolean ascend){  this(col,type,ascend,DefaultLiteralComparator.getInstance());}  }
class C{  @Nullable @AndroidCoordinate public static Integer resolveDimensionPixelSize(@NotNull RenderResources resources,@NotNull String value,@NotNull Configuration configuration){  String resValue=resolveStringValue(resources,value);  ResourceHelper.TypedValue out=new ResourceHelper.TypedValue();  if (parseFloatAttribute(resValue,out,true)) {    return ResourceHelper.TypedValue.complexToDimensionPixelSize(out.data,configuration);  }  return null;}  }
class C{  public static LocalResourceStatus peekResourceStatusFor(IResource resource) throws SVNException {  PeekStatusCommand command=new PeekStatusCommand(resource);  command.execute();  return command.getLocalResourceStatus();}  }
class C{  public static AllophoneSet determineAllophoneSet(Element e) throws MaryConfigurationException {  AllophoneSet allophoneSet=null;  Element voice=(Element)MaryDomUtils.getAncestor(e,MaryXML.VOICE);  Voice maryVoice=Voice.getVoice(voice);  if (maryVoice == null) {    Locale locale=MaryUtils.string2locale(e.getOwnerDocument().getDocumentElement().getAttribute("xml:lang"));    maryVoice=Voice.getDefaultVoice(locale);  }  if (maryVoice != null) {    allophoneSet=maryVoice.getAllophoneSet();  } else {    Locale locale=MaryUtils.string2locale(e.getOwnerDocument().getDocumentElement().getAttribute("xml:lang"));    allophoneSet=determineAllophoneSet(locale);  }  return allophoneSet;}  }
class C{  @SuppressLint("NewApi") public synchronized static Codec[] findEncodersForMimeType(String mimeType){  if (sEncoders != null)   return sEncoders;  ArrayList<Codec> encoders=new ArrayList<Codec>();  for (int j=MediaCodecList.getCodecCount() - 1; j >= 0; j--) {    MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(j);    if (!codecInfo.isEncoder())     continue;    String[] types=codecInfo.getSupportedTypes();    for (int i=0; i < types.length; i++) {      if (types[i].equalsIgnoreCase(mimeType)) {        try {          MediaCodecInfo.CodecCapabilities capabilities=codecInfo.getCapabilitiesForType(mimeType);          Set<Integer> formats=new HashSet<Integer>();          for (int k=0; k < capabilities.colorFormats.length; k++) {            int format=capabilities.colorFormats[k];            for (int l=0; l < SUPPORTED_COLOR_FORMATS.length; l++) {              if (format == SUPPORTED_COLOR_FORMATS[l]) {                formats.add(format);              }            }          }          Codec codec=new Codec(codecInfo.getName(),(Integer[])formats.toArray(new Integer[formats.size()]));          encoders.add(codec);        } catch (        Exception e) {          Log.wtf(TAG,e);        }      }    }  }  sEncoders=(Codec[])encoders.toArray(new Codec[encoders.size()]);  return sEncoders;}  }
class C{  private static void handleEOD(EncoderContext context,CharSequence buffer){  try {    int count=buffer.length();    if (count == 0) {      return;    }    if (count == 1) {      context.updateSymbolInfo();      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      int remaining=context.getRemainingCharacters();      if (remaining == 0 && available <= 2) {        return;      }    }    if (count > 4) {      throw new IllegalStateException("Count must not exceed 4");    }    int restChars=count - 1;    String encoded=encodeToCodewords(buffer,0);    boolean endOfSymbolReached=!context.hasMoreCharacters();    boolean restInAscii=endOfSymbolReached && restChars <= 2;    if (restChars <= 2) {      context.updateSymbolInfo(context.getCodewordCount() + restChars);      int available=context.getSymbolInfo().getDataCapacity() - context.getCodewordCount();      if (available >= 3) {        restInAscii=false;        context.updateSymbolInfo(context.getCodewordCount() + encoded.length());      }    }    if (restInAscii) {      context.resetSymbolInfo();      context.pos-=restChars;    } else {      context.writeCodewords(encoded);    }  }  finally {    context.signalEncoderChange(HighLevelEncoder.ASCII_ENCODATION);  }}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  SelectedBlock selectedBlock=viewer.getSelectedBlock();  return viewer.getAlignment().getNumberOfSequences() > 0 && selectedBlock.isSelected() && selectedBlock.getFirstRow() > 0;}  }
class C{  public BalloonTreeLayout(String group){  this(group,2);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public EmptyStmt fullCopy(){  EmptyStmt tree=(EmptyStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public void onPermissionResponse(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  int requestCodeForView=getRequestCodeForView();  if (requestCode == requestCodeForView) {    boolean granted=grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED;    if (granted) {      setAccountOptions();      mAccountsAutocomplete.showDropDown();    } else {      if (mActivity == null && mFragment == null) {        throw new IllegalStateException("No calling Activity or Fragment declared. Call either setParentActivity() or setParentFragment().");      }      boolean shouldShowRationale;      if (mActivity != null) {        shouldShowRationale=ActivityCompat.shouldShowRequestPermissionRationale(mActivity,Manifest.permission.GET_ACCOUNTS);      } else {        shouldShowRationale=mFragment.shouldShowRequestPermissionRationale(Manifest.permission.GET_ACCOUNTS);      }      if (!shouldShowRationale) {        mAccountsAutocomplete.setAdapter(mAdapter=null);      }    }  }}  }
class C{  public boolean isRecordSet(){  return isRecordSet(metadata);}  }
class C{  private static int decodeOctets(int i,ByteBuffer bb,StringBuilder sb){  if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) {    sb.append((char)bb.get(0));    return i + 2;  } else {    CharBuffer cb=UTF_8_CHARSET.decode(bb);    sb.append(cb.toString());    return i + bb.limit() * 3 - 1;  }}  }
class C{  protected PollsDeleteVoteQuery answerId(int value){  return unsafeParam("answer_id",value);}  }
class C{  public static byte[] convertImageToJPEG(BufferedImage img,float quality) throws IOException {  return bufferedImageToJPEG(img,quality);}  }
class C{  public void dump(PrintWriter output,int pad,String title){  dump(output,pad,title,false);}  }
class C{  public static double extractValue(String stringValue){  double value=0.0;  if (stringValue != null) {    String sValue=stringValue.replace(",","").replace(" ","").trim();    try {      if (sValue.startsWith(SCALE_PREFIX)) {        String substring=sValue.substring(SCALE_PREFIX.length());        value=Double.valueOf(substring);      } else {        value=Double.valueOf(sValue);      }    } catch (    NumberFormatException e) {    }  }  return value;}  }
class C{  public WordEvaluatorAdapter(){}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public boolean hasExtendedDuration(){  return extended;}  }
class C{  public Matrix arrayLeftDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=B.A[i][j] / A[i][j];    }  }  return this;}  }
class C{  public boolean store(){  if (exist()) {    if (updateCompletionDate) {      this.estimatedCompletionDate=recalculateEstimatedCompletionDate();    }    productionRun.set("estimatedStartDate",this.estimatedStartDate);    productionRun.set("estimatedCompletionDate",this.estimatedCompletionDate);    productionRun.set("workEffortName",this.productionRunName);    productionRun.set("description",this.description);    try {      if (quantityIsUpdated) {        productionRun.set("quantityToProduce",(BigDecimal)this.quantity);        productionRunProduct.set("estimatedQuantity",this.quantity.doubleValue());        productionRunProduct.store();        quantityIsUpdated=false;      }      productionRun.store();      if (productionRunRoutingTasks != null) {        for (Iterator<GenericValue> iter=productionRunRoutingTasks.iterator(); iter.hasNext(); ) {          GenericValue routingTask=iter.next();          routingTask.store();        }      }      if (productionRunComponents != null) {        for (Iterator<GenericValue> iter=productionRunComponents.iterator(); iter.hasNext(); ) {          GenericValue component=iter.next();          component.store();        }      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      return false;    }    return true;  }  return false;}  }
class C{  public SelectSdkDialog(@Nullable String jdkPath,@Nullable String sdkPath){  super(false);  init();  setTitle("Select SDKs");  if (jdkPath != null) {    String err=validateJdkPath(jdkPath);    if (err != null) {      jdkPath=null;    }  }  if (sdkPath != null) {    String err=validateAndroidSdkPath(sdkPath);    if (err != null) {      sdkPath=null;    }  }  mySelectJdkLabel.setLabelFor(myJdkTextFieldWithButton.getTextField());  mySelectSdkDescriptionLabel.setText("Please provide the path to the Android SDK.");  mySdkHyperlinkLabel.setHyperlinkTarget("http://d.android.com/sdk");  mySdkHyperlinkLabel.setHyperlinkText("If you do not have the Android SDK, you can obtain it from ","d.android.com/sdk",".");  mySelectJdkDescriptionLabel.setText("Please provide the path to a Java Development Kit (JDK) installation.");  myJdkHyperlinkLabel.setHyperlinkTarget("http://www.oracle.com/technetwork/java/javase/downloads/index.html");  myJdkHyperlinkLabel.setHyperlinkText("If you do not have a JDK installed, you can obtain one ","here",".");  if (jdkPath == null && sdkPath == null) {    mySpacer.setVisible(true);  } else   if (jdkPath == null) {    mySpacer.setVisible(false);    mySelectSdkDescriptionLabel.setVisible(false);    mySdkHyperlinkLabel.setVisible(false);    mySelectSdkLabel.setVisible(false);    mySdkTextFieldWithButton.setVisible(false);  } else {    mySpacer.setVisible(false);    mySelectJdkDescriptionLabel.setVisible(false);    myJdkHyperlinkLabel.setVisible(false);    mySelectJdkLabel.setVisible(false);    myJdkTextFieldWithButton.setVisible(false);  }  myJdkTextFieldWithButton.setTextFieldPreferredWidth(50);  mySdkTextFieldWithButton.setTextFieldPreferredWidth(50);  if (jdkPath != null) {    myJdkTextFieldWithButton.setText(jdkPath);  }  if (sdkPath != null) {    mySdkTextFieldWithButton.setText(sdkPath);  }  FileChooserDescriptor descriptor=JavaSdk.getInstance().getHomeChooserDescriptor();  BrowseFolderListener listener=new BrowseFolderListener("Select JDK Home",myJdkTextFieldWithButton,descriptor,jdkPath);  myJdkTextFieldWithButton.addActionListener(listener);  descriptor=AndroidSdkType.getInstance().getHomeChooserDescriptor();  listener=new BrowseFolderListener("Select Android SDK Home",mySdkTextFieldWithButton,descriptor,sdkPath);  mySdkTextFieldWithButton.addActionListener(listener);}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  RecordHandlerListeners(){}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  InspectorWindow inspectorWindow=(InspectorWindow)getViewer();  if (inspectorWindow.getDataTree().getSelectionCount() == 0)   inspectorWindow.clear(); else   inspectorWindow.deleteSelectedNodes();}  }
class C{  public void handleLegionRequest(int exOpcode,Player activePlayer,String text){switch (exOpcode) {case 0x09:    changeAnnouncement(activePlayer,text);  break;case 0x0A:changeSelfIntro(activePlayer,text);break;}}  }
class C{  public Vector3DFormat(){  super(DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_SEPARATOR,CompositeFormat.getDefaultNumberFormat());}  }
class C{  public void initializeCooldownGroups(){  cooldownGroups=new HashMap<Integer,ArrayList<Integer>>();  for (  SkillTemplate skillTemplate : skillTemplates) {    int cooldownId=skillTemplate.getCooldownId();    if (!cooldownGroups.containsKey(cooldownId)) {      cooldownGroups.put(cooldownId,new ArrayList<Integer>());    }    cooldownGroups.get(cooldownId).add(skillTemplate.getSkillId());  }}  }
class C{  public Object optionalWait(ExpectedCondition<WebElement> condition){  try {    return bobcatWait.withTimeout(Timeouts.SMALL).until(condition);  } catch (  TimeoutException ignored) {    return null;  }}  }
class C{  public boolean canGetString(){  return true;}  }
class C{  public void see(VisibleObject object){}  }
class C{  @Override public String toString(){  return text.toString();}  }
class C{  public JRangeSlider createRangeSlider(int orientation,int direction){  return new JRangeSlider(m_model,orientation,direction);}  }
class C{  private int parseTimeExpression(String timeExpression){  int mSeconds=0;  if (timeExpression.contains(":")) {    String[] parts=timeExpression.split(":");    if (parts.length == 3) {      int h, m;      float s;      h=Integer.parseInt(parts[0]);      m=Integer.parseInt(parts[1]);      s=Float.parseFloat(parts[2]);      mSeconds=h * 3600000 + m * 60000 + (int)(s * 1000);    } else     if (parts.length == 4) {      int h, m, s;      float f;      int frameRate=25;      Node n=doc.getDocumentElement().getAttributes().getNamedItem("ttp:frameRate");      if (n == null) {        n=doc.getElementsByTagName("ttp:frameRate").item(0);      }      if (n != null) {        String aux=n.getNodeValue();        try {          frameRate=Integer.parseInt(aux);        } catch (        NumberFormatException e) {        }      }      h=Integer.parseInt(parts[0]);      m=Integer.parseInt(parts[1]);      s=Integer.parseInt(parts[2]);      f=Float.parseFloat(parts[3]);      mSeconds=h * 3600000 + m * 60000 + s * 1000 + (int)(f * 1000 / frameRate);    } else {    }  } else {    String metric=timeExpression.substring(timeExpression.length() - 1);    timeExpression=timeExpression.substring(0,timeExpression.length() - 1).replace(',','.').trim();    double time;    try {      time=Double.parseDouble(timeExpression);      if (metric.equalsIgnoreCase("h")) {        mSeconds=(int)(time * 3600000);      } else       if (metric.equalsIgnoreCase("m")) {        mSeconds=(int)(time * 60000);      } else       if (metric.equalsIgnoreCase("s")) {        mSeconds=(int)(time * 1000);      } else       if (metric.equalsIgnoreCase("ms")) {        mSeconds=(int)time;      } else       if (metric.equalsIgnoreCase("f")) {        int frameRate;        Node n=doc.getElementsByTagName("ttp:frameRate").item(0);        if (n != null) {          String s=n.getNodeValue();          frameRate=Integer.parseInt(s);          mSeconds=(int)(time * 1000 / frameRate);        }      } else       if (metric.equalsIgnoreCase("t")) {        int tickRate;        Node n=doc.getElementsByTagName("ttp:tickRate").item(0);        if (n != null) {          String s=n.getNodeValue();          tickRate=Integer.parseInt(s);          mSeconds=(int)(time * 1000 / tickRate);        }      } else {      }    } catch (    NumberFormatException e) {    }  }  return mSeconds;}  }
class C{  public FTPReply sendCustomCommand(String command) throws IllegalStateException, IOException, FTPIllegalReplyException {synchronized (lock) {    if (!connected) {      throw new IllegalStateException("Client not connected");    }    communication.sendFTPCommand(command);    touchAutoNoopTimer();    return communication.readFTPReply();  }}  }
class C{  public Builder(){}  }
class C{  public void add(E e){  buffer[write]=e;  write=(write + 1) % maxSize;  if (count == maxSize) {    read=(read + 1) % maxSize;  } else {    count+=1;  }}  }
class C{  @Override public boolean isAvailable(){  return true;}  }
class C{  public boolean hasInit(){  return getInitOpt().getNumChild() != 0;}  }
class C{  protected WallPinQuery postId(int value){  return unsafeParam("post_id",value);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void skipValue() throws IOException {  int count=0;  do {    int p=peeked;    if (p == PEEKED_NONE) {      p=doPeek();    }    if (p == PEEKED_BEGIN_ARRAY) {      push(JsonScope.EMPTY_ARRAY);      count++;    } else     if (p == PEEKED_BEGIN_OBJECT) {      push(JsonScope.EMPTY_OBJECT);      count++;    } else     if (p == PEEKED_END_ARRAY) {      stackSize--;      count--;    } else     if (p == PEEKED_END_OBJECT) {      stackSize--;      count--;    } else     if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED) {      skipUnquotedValue();    } else     if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME) {      skipQuotedValue('\'');    } else     if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME) {      skipQuotedValue('"');    } else     if (p == PEEKED_NUMBER) {      pos+=peekedNumberLength;    }    peeked=PEEKED_NONE;  } while (count != 0);  pathIndices[stackSize - 1]++;  pathNames[stackSize - 1]="null";}  }
class C{  public IllinoisSolver(){  super(DEFAULT_ABSOLUTE_ACCURACY,Method.ILLINOIS);}  }
class C{  public static DatabusClientFactory forClusterAndHttpClient(String clusterName,Client client){  return new DatabusClientFactory(clusterName,client);}  }
class C{  public void actionPerformed(ActionEvent ev){  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();  if (samples.size() > 0)   execute("set nodeShape=square sample='" + Basic.toString(samples,"' '") + "';");}  }
class C{  public static boolean isWalking(NpcAI2 npcAI){  return npcAI.isMoveSupported() && (hasWalkRoutes(npcAI) || npcAI.getOwner().isAttackableNpc());}  }
class C{  public void init$Children(){  children=new ASTNode[3];}  }
class C{  @Override public void deleteNodes(NodeInterface nodeToTransfer,List<SLDDataInterface> sldDataList){}  }
class C{  public static String decodeURN(String urn){  String publicId="";  if (urn.startsWith("urn:publicid:")) {    publicId=urn.substring(13);  } else {    return urn;  }  publicId=PublicId.stringReplace(publicId,"%2F","/");  publicId=PublicId.stringReplace(publicId,":","//");  publicId=PublicId.stringReplace(publicId,"%3A",":");  publicId=PublicId.stringReplace(publicId,";","::");  publicId=PublicId.stringReplace(publicId,"+"," ");  publicId=PublicId.stringReplace(publicId,"%2B","+");  publicId=PublicId.stringReplace(publicId,"%23","#");  publicId=PublicId.stringReplace(publicId,"%3F","?");  publicId=PublicId.stringReplace(publicId,"%27","'");  publicId=PublicId.stringReplace(publicId,"%3B",";");  publicId=PublicId.stringReplace(publicId,"%25","%");  return publicId;}  }
class C{  public int checkBookiesUp(int count,int timeout) throws Exception {  ZooKeeper zkc=connectZooKeeper(zkHost,zkPort,zkTimeoutSec);  try {    int mostRecentSize=0;    for (int i=0; i < timeout; i++) {      try {        List<String> children=zkc.getChildren("/ledgers/available",false);        children.remove("readonly");        mostRecentSize=children.size();        if ((mostRecentSize > count) || LOG.isDebugEnabled()) {          LOG.info("Found " + mostRecentSize + " bookies up, "+ "waiting for "+ count);          if ((mostRecentSize > count) || LOG.isTraceEnabled()) {            for (            String child : children) {              LOG.info(" server: " + child);            }          }        }        if (mostRecentSize == count) {          break;        }      } catch (      KeeperException e) {      }      Thread.sleep(1000);    }    return mostRecentSize;  }  finally {    zkc.close();  }}  }
class C{  private static void generateGraph(IDataProcessStatus dataProcessTaskStatus,SchemaInfo info,String tableName,String partitionID,CarbonDataLoadSchema schema,String factStoreLocation,List<LoadMetadataDetails> loadMetadataDetails) throws GraphGeneratorException {  DataLoadModel model=new DataLoadModel();  model.setCsvLoad(null != dataProcessTaskStatus.getCsvFilePath() || null != dataProcessTaskStatus.getFilesToProcess());  model.setSchemaInfo(info);  model.setTableName(dataProcessTaskStatus.getTableName());  model.setTaskNo("1");  model.setBlocksID(dataProcessTaskStatus.getBlocksID());  model.setFactTimeStamp(readCurrentTime());  model.setEscapeCharacter(dataProcessTaskStatus.getEscapeCharacter());  model.setQuoteCharacter(dataProcessTaskStatus.getQuoteCharacter());  model.setCommentCharacter(dataProcessTaskStatus.getCommentCharacter());  if (null != loadMetadataDetails && !loadMetadataDetails.isEmpty()) {    model.setLoadNames(CarbonDataProcessorUtil.getLoadNameFromLoadMetaDataDetails(loadMetadataDetails));    model.setModificationOrDeletionTime(CarbonDataProcessorUtil.getModificationOrDeletionTimesFromLoadMetadataDetails(loadMetadataDetails));  }  boolean hdfsReadMode=dataProcessTaskStatus.getCsvFilePath() != null && dataProcessTaskStatus.getCsvFilePath().startsWith("hdfs:");  int allocate=null != dataProcessTaskStatus.getCsvFilePath() ? 1 : dataProcessTaskStatus.getFilesToProcess().size();  String outputLocation=CarbonProperties.getInstance().getProperty("store_output_location","../carbon-store/system/carbon/etl");  GraphGenerator generator=new GraphGenerator(model,hdfsReadMode,partitionID,factStoreLocation,allocate,schema,"0",outputLocation);  generator.generateGraph();}  }
class C{  private void serverTextCommandEditInit(){  serverTextEdit.setEditable(true);  serverTextEdit.setVisible(true);  serverTextEdit.setPromptText("Input your shell command");}  }
class C{  protected Object rdbLoadLzfStringObject(boolean encode) throws IOException {  int clen=rdbLoadLen().len;  int len=rdbLoadLen().len;  byte[] inBytes=in.readBytes(clen);  byte[] outBytes=Lzf.decode(inBytes,len);  return encode ? new EncodedString(new String(outBytes,Constants.CHARSET),outBytes) : outBytes;}  }
class C{  public float connectedDistanceToRoot(ScoutWidget[] list,Direction direction){  float value=recursiveConnectedDistanceToRoot(list,direction);  cacheRootDistance(direction,value);  return value;}  }
class C{  public void write(File file) throws IOException {  PrintWriter pw=new PrintWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF-8"),true);  if (fromDir != null) {    pw.println("FROM: " + fromDir + "*"+ fromExt);  }  String str=null;  for (int i=0; i < bList.size(); i++) {    str=(String)(bList.elementAt(i));    pw.println(str);  }}  }
class C{  protected NewsfeedUnsubscribeQuery type(NewsfeedItemType value){  return unsafeParam("type",value);}  }
class C{  public String tableName(){  return tblName;}  }
class C{  public void addService(String service,String className){  PluginEntry entry=new PluginEntry(service,className,false);  this.addService(entry);}  }
class C{  public void incrementSelectedSymbolizerIndex(){  this.selectedSymbolizerIndex++;}  }
class C{  private int computeKey(int row,int column){  return row * columns + column;}  }
class C{  public boolean only_stack_locals(){  return soot.PhaseOptions.getBoolean(options,"only-stack-locals");}  }
class C{  public static void write(File file,CharSequence data,String encoding,boolean append) throws IOException {  write(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SUMMON_CANT_ORDER_BY_INVALID_STANCE(String value0){  return new SM_SYSTEM_MESSAGE(1400087,value0);}  }
class C{  private IProject[] asProjects(ProjectSetSerializationContext context,String[] referenceStrings,Map<IProject,LoadInfo> infoMap) throws SVNException {  Collection<IProject> result=new ArrayList<IProject>();  for (  String referenceString : referenceStrings) {    StringTokenizer tokenizer=new StringTokenizer(referenceString,",");    String version=tokenizer.nextToken();    if (!version.equals("0.9.3")) {      continue;    }    LoadInfo info=new LoadInfo(context,tokenizer);    IProject proj=info.getProject();    result.add(proj);    infoMap.put(proj,info);  }  return (IProject[])result.toArray(new IProject[result.size()]);}  }
class C{  static public <T>void shuffle(List<T> list,Random rand,int lastIndex){  int i, j, size=lastIndex - 1;  for (i=0; i < size; i++) {    j=rand.nextInt(size - i) + i + 1;    swap(list,i,j);  }}  }
class C{  public boolean remove(Object o){  if (o == null)   return false;  return map.remove(o) == PRESENT;}  }
class C{  private boolean isSentenceStart(int index){  FeatureVector fv=features.getFeatureVector(index);  return fv.getByteFeature(fiSentenceStart) == 0 && fv.getByteFeature(fiWordStart) == 0 && (!isHalfphone || fv.getByteFeature(fiLR) == fvLR_L);}  }
class C{  public static boolean checkValidInterval(String interval){  return Arrays.asList(TIME_INTERVALS).contains(interval);}  }
class C{  public void clear(){  for (  int[] segment : segments) {    Arrays.fill(segment,0);  }  maxIndex=-1;  numberOfNonZeroEntries=0;}  }
class C{  public static Stream<IntSummaryStatistics> shiftingWindowSummarizingInt(IntStream intStream,int rollingFactor){  Objects.requireNonNull(intStream);  RollingOfIntSpliterator ofIntSpliterator=RollingOfIntSpliterator.of(intStream.spliterator(),rollingFactor);  return StreamSupport.stream(ofIntSpliterator,intStream.isParallel()).onClose(null).map(null);}  }
class C{  public boolean isUrlBlock(){  return isOptionEnabled(UrlFilterRuleOption.URL_BLOCK);}  }
class C{  public XMLConfigurationException(short type,String identifier,String message){  super(message);  fType=type;  fIdentifier=identifier;}  }
class C{  public ImageSize scale(float scale){  return new ImageSize((int)(width * scale),(int)(height * scale));}  }
class C{  public boolean isValid(String text){  for (int i=0; i < text.length(); ++i) {    char ch=text.charAt(i);    if (ch == '\u00A7' || ch == '\n')     continue;    if (chars.get(ch) == null)     return false;  }  return true;}  }
class C{  public static String collapseCharacter(String str,char c){  StringBuilder sb=new StringBuilder();  char last=str.charAt(0);  for (int i=0; i < str.length(); i++) {    char current=str.charAt(i);    if (i == 0 || current != c || last != c) {      sb.append(current);      last=current;    }  }  return sb.toString();}  }
class C{  private static String doGetFullPath(String filename,boolean includeSeparator){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  if (prefix >= filename.length()) {    if (includeSeparator) {      return getPrefix(filename);    } else {      return filename;    }  }  int index=indexOfLastSeparator(filename);  if (index < 0) {    return filename.substring(0,prefix);  }  int end=index + (includeSeparator ? 1 : 0);  if (end == 0) {    end++;  }  return filename.substring(0,end);}  }
class C{  public static void logPromoTapsForNeverOpened(int promoTaps){  RecordHistogram.recordCountHistogram("Search.ContextualSearchPromoTapsForNeverOpened",promoTaps);}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public SimplexSolver(final double epsilon,final int maxUlps){  this(epsilon,maxUlps,DEFAULT_CUT_OFF);}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object getObjectFieldValue(java.lang.Object,long)")) {    java_io_ObjectOutputStream_getObjectFieldValue(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  @Override public int read(byte[] bytes,int offset,int length) throws IOException {  if (eof) {    throw new IOException("Read after end of file");  }  if (position == size) {    return doEndOfFile();  }  position+=length;  int returnLength=length;  if (position > size) {    returnLength=length - (int)(position - size);    position=size;  }  processBytes(bytes,offset,returnLength);  return returnLength;}  }
class C{  public void put(int ii[],int jj[],Zmat A){  dirty=true;  int nrow=ii.length;  int ncol=jj.length;  for (int i=0; i < nrow; i++)   for (int j=0; j < ncol; j++) {    re[ii[i] - basex][jj[j] - basex]=A.re[i][j];    im[ii[i] - basex][jj[j] - basex]=A.im[i][j];  }}  }
class C{  private double computeReferenceAngle(){  double r1=((SandboxBody)this.cmbBody1.getSelectedItem()).getTransform().getRotation();  double r2=((SandboxBody)this.cmbBody2.getSelectedItem()).getTransform().getRotation();  return r1 - r2;}  }
class C{  public static void v(String tag,String msg){  if (LOG_ENABLE) {    Log.v(tag,buildMsg(msg));  }}  }
class C{  public static void logSearchTermResolvedWords(boolean isSingleWord){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchResolvedTermWords",isSingleWord ? RESOLVED_SINGLE_WORD : RESOLVED_MULTI_WORD,RESOLVED_BOUNDARY);}  }
class C{  @Override public void onItemClicked(View view,Flavor item,int position){  Scoop.getInstance().choose(item);  mAdapter.setCurrentFlavor(item);  Intent restart=new Intent(this,ScoopSettingsActivity.class);  setResult(RESULT_OK);  finish();  startActivity(restart);  overridePendingTransition(0,0);}  }
class C{  public int size(){  return 5;}  }
class C{  public static BigInteger pow(final BigInteger k,int e) throws MathIllegalArgumentException {  if (e < 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EXPONENT,e);  }  return k.pow(e);}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  put(index,new Integer(value));  return this;}  }
class C{  private Collection<ExtractedItemsCollection> filterItemsByLevel(Player player,List<ExtractedItemsCollection> itemsCollections){  int playerLevel=player.getLevel();  Collection<ExtractedItemsCollection> result=new ArrayList<ExtractedItemsCollection>();  for (  ExtractedItemsCollection collection : itemsCollections) {    if (collection.getMinLevel() > playerLevel) {      continue;    }    if (collection.getMaxLevel() > 0 && collection.getMaxLevel() < playerLevel) {      continue;    }    result.add(collection);  }  return result;}  }
class C{  public void refreshNode(DefaultMutableTreeNode nodeToRefresh){  if (treeModel != null) {    treeModel.reload(nodeToRefresh);  }}  }
class C{  private void propagateReturnValueIntoCallers(SootMethod sm){  Constant value=null;  for (  Unit retSite : icfg.getEndPointsOf(sm)) {    if (!(retSite instanceof ReturnStmt))     continue;    ReturnStmt retStmt=(ReturnStmt)retSite;    if (!(retStmt.getOp() instanceof Constant))     return;    if (value != null && retStmt.getOp() != value)     return;    value=(Constant)retStmt.getOp();  }  if (value != null)   for (  Unit callSite : icfg.getCallersOf(sm))   if (callSite instanceof AssignStmt) {    AssignStmt assign=(AssignStmt)callSite;    if (taintWrapper != null && taintWrapper.supportsCallee(assign))     continue;    if (sourceSinkManager != null && sourceSinkManager.getSourceInfo(assign,icfg) != null)     continue;    SootMethod caller=icfg.getMethodOf(assign);    if (!caller.getActiveBody().getUnits().contains(assign))     continue;    if (icfg.getCalleesOfCallAt(callSite).size() > 1)     continue;    Unit assignConst=Jimple.v().newAssignStmt(assign.getLeftOp(),value);    if (!hasSideEffectsOrCallsSink(sm)) {      fixExceptions(caller,callSite);      caller.getActiveBody().getUnits().swapWith(assign,assignConst);      if (excludedMethods == null || !excludedMethods.contains(caller))       ConstantPropagatorAndFolder.v().transform(caller.getActiveBody());      if (Scene.v().hasCallGraph())       Scene.v().getCallGraph().removeAllEdgesOutOf(assign);    } else {      caller.getActiveBody().getUnits().insertAfter(assignConst,assign);      if (excludedMethods == null || !excludedMethods.contains(caller))       ConstantPropagatorAndFolder.v().transform(caller.getActiveBody());      caller.getActiveBody().getUnits().remove(assignConst);      Stmt inv=Jimple.v().newInvokeStmt(assign.getInvokeExpr());      caller.getActiveBody().getUnits().swapWith(assign,inv);      if (Scene.v().hasCallGraph())       Scene.v().getCallGraph().swapEdgesOutOf(assign,inv);    }  }}  }
class C{  public static boolean isBitmapWhiteAtTopOrBottom(Bitmap largeBitmap){  if (Build.VERSION.SDK_INT >= 18) {    Trace.beginSection("isBitmapWhiteAtTopOrBottom");  }  try {    final Bitmap smallBitmap=scaleBitmapDown(largeBitmap);    final int[] rgbPixels=new int[smallBitmap.getWidth() * smallBitmap.getHeight()];    smallBitmap.getPixels(rgbPixels,0,smallBitmap.getWidth(),0,0,smallBitmap.getWidth(),smallBitmap.getHeight());    int whiteCount=0;    for (int y=0; y < smallBitmap.getHeight() * HEIGHT_PERCENT_ANALYZED; y++) {      for (int x=(int)(smallBitmap.getWidth() * (1 - THIRD)); x < smallBitmap.getWidth(); x++) {        final int rgb=rgbPixels[y * smallBitmap.getWidth() + x];        if (isWhite(rgb)) {          whiteCount++;        }      }    }    int totalPixels=(int)(smallBitmap.getHeight() * smallBitmap.getWidth() * THIRD* HEIGHT_PERCENT_ANALYZED);    if (whiteCount / (float)totalPixels > PROPORTION_WHITE_CUTOFF) {      return true;    }    whiteCount=0;    for (int y=(int)(smallBitmap.getHeight() * (1 - HEIGHT_PERCENT_ANALYZED)); y < smallBitmap.getHeight(); y++) {      for (int x=0; x < smallBitmap.getWidth(); x++) {        final int rgb=rgbPixels[y * smallBitmap.getWidth() + x];        if (isWhite(rgb)) {          whiteCount++;        }      }    }    totalPixels=(int)(smallBitmap.getHeight() * smallBitmap.getWidth() * HEIGHT_PERCENT_ANALYZED);    return whiteCount / (float)totalPixels > PROPORTION_WHITE_CUTOFF;  }  finally {    if (Build.VERSION.SDK_INT >= 18) {      Trace.endSection();    }  }}  }
class C{  public static boolean writeFile(String filePath,List<String> contentList,boolean append){  if (ListUtil.isEmpty(contentList)) {    return false;  }  FileWriter fileWriter=null;  try {    makeDirs(filePath);    fileWriter=new FileWriter(filePath,append);    int i=0;    for (    String line : contentList) {      if (i++ > 0) {        fileWriter.write("\r\n");      }      fileWriter.write(line);    }    return true;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtil.close(fileWriter);  }}  }
class C{  private void toMagnitude(double[] re){  for (int i=0; i < re.length; i++)   re[i]=Math.sqrt(re[i]);}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("set showBiPlot=" + (!isSelected()) + ";");}  }
class C{  public void rightTrim(double second){  trim(0,second);}  }
class C{  public void fill(int fromIndex,int toIndex,int val){  if (toIndex > _pos) {    ensureCapacity(toIndex);    _pos=toIndex;  }  Arrays.fill(_data,fromIndex,toIndex,val);}  }
class C{  public boolean isTimestampValid(final long timestamp){  this.equipmentLogger.trace("entering isTimestampValid()..");  boolean isValid=true;  long diff=(timestamp - System.currentTimeMillis());  if (diff > MAX_MSECONDS_DIFF) {    isValid=false;  }  this.equipmentLogger.trace("leaving isTimestampValid().. Result: " + isValid);  return isValid;}  }
class C{  public static <T>T checkNotNull(T reference,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (reference == null) {    throw new NullPointerException(format(errorMessageTemplate,errorMessageArgs));  }  return reference;}  }
class C{  public void addModifier(Modifier node){  List<Modifier> list=(parent == null || state == null) ? getModifierListNoTransform() : getModifierList();  list.addChild(node);}  }
class C{  private void checkFixTies(double[] x,double[] y) throws Exception {  final double[] origCombined=MathArrays.concatenate(x,y);  fixTies(x,y);  Assert.assertFalse(hasTies(x,y));  final double[] combined=MathArrays.concatenate(x,y);  for (int i=0; i < combined.length; i++) {    for (int j=0; j < i; j++) {      Assert.assertTrue(combined[i] != combined[j]);      if (combined[i] < combined[j])       Assert.assertTrue(origCombined[i] < origCombined[j] || origCombined[i] == origCombined[j]);    }  }}  }
class C{  public static void drawRoundRectText(Graphics2D g,Font font,Color textColor,String text,int x,int y){  Graphics2D g2=(Graphics2D)g.create();  g2.setFont(font);  FontMetrics fm=g2.getFontMetrics();  int padding=2;  Rectangle2D bounds=fm.getStringBounds(text,g2);  double th=bounds.getHeight() + padding * 2;  double tw=bounds.getWidth() + padding * 2;  int radius=(int)(Math.min(th,tw) / 3);  g2.fillRoundRect((int)(x - tw / 2),(int)(y - th / 2),(int)tw,(int)th,radius,radius);  g2.setColor(textColor);  g2.drawString(text,(int)(x - tw / 2 + padding),(int)(y - th / 2 + fm.getAscent()));  if (DEBUG) {    g2.setColor(Color.RED);    g2.drawLine(x - 50,y,x + 50,y);    g2.drawLine(x,y - 50,x,y + 50);  }  g2.dispose();}  }
class C{  public void incrementCurrentCount() throws GenericEntityException {  incrementCurrentCount(true);}  }
class C{  public int hashCode(){  this.combineOperands();  return operands.hashCode();}  }
class C{  static void updateFilterXMLNodes(String spaceConfigFile,FiltersInfo[] filtersInfo) throws Exception {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=factory.newDocumentBuilder();  Document doc=builder.parse(spaceConfigFile);  NodeList nodeList=doc.getElementsByTagName(Filter.FILTERS_TAG_NAME);  if (nodeList.getLength() <= 0)   return;  Element filterElem=(Element)nodeList.item(0);  Node filterNamesNode=filterElem.getElementsByTagName(Filter.FILTER_NAMES_TAG_NAME).item(0);  String fnames=filterNamesNode.getFirstChild().getNodeValue();  StringTokenizer st=new StringTokenizer(fnames,",");  while (st.hasMoreElements()) {    String filterName=st.nextToken().trim();    NodeList filNL=filterElem.getElementsByTagName(filterName);    for (int c=0; c < filNL.getLength(); c++)     filterElem.removeChild(filNL.item(c));  }  String filterNames="";  for (int i=0; i < filtersInfo.length; i++) {    filterNames+=filtersInfo[i].filterName + ", ";    Element filElem=doc.createElement(filtersInfo[i].filterName);    filElem.appendChild(createXMLTextNode(doc,Filter.FILTER_ENABLED_TAG_NAME,String.valueOf(filtersInfo[i].enabled)));    filElem.appendChild(createXMLTextNode(doc,Filter.FILTER_CLASS_TAG_NAME,filtersInfo[i].filterClassName));    filElem.appendChild(createXMLTextNode(doc,Filter.FILTER_URL_TAG_NAME,filtersInfo[i].paramURL));    filElem.appendChild(createXMLTextNode(doc,Filter.FILTER_PRIORITY_TAG_NAME,String.valueOf(i)));    String operCode="";    if (filtersInfo[i].beforeAuthentication)     operCode+=String.valueOf(FilterOperationCodes.BEFORE_AUTHENTICATION) + ", ";    if (filtersInfo[i].afterRemove)     operCode+=String.valueOf(FilterOperationCodes.AFTER_REMOVE) + ", ";    if (filtersInfo[i].afterWrite)     operCode+=String.valueOf(FilterOperationCodes.AFTER_WRITE) + ", ";    if (filtersInfo[i].beforeClean)     operCode+=String.valueOf(FilterOperationCodes.BEFORE_CLEAN_SPACE) + ", ";    if (filtersInfo[i].beforeNotify)     operCode+=String.valueOf(FilterOperationCodes.BEFORE_NOTIFY) + ", ";    if (filtersInfo[i].beforeRead)     operCode+=String.valueOf(FilterOperationCodes.BEFORE_READ) + ", ";    if (filtersInfo[i].afterRead)     operCode+=String.valueOf(FilterOperationCodes.AFTER_READ) + ", ";    if (filtersInfo[i].beforeTake)     operCode+=String.valueOf(FilterOperationCodes.BEFORE_TAKE) + ", ";    if (filtersInfo[i].afterTake)     operCode+=String.valueOf(FilterOperationCodes.AFTER_TAKE) + ", ";    if (filtersInfo[i].beforeWrite)     operCode+=String.valueOf(FilterOperationCodes.BEFORE_WRITE) + ", ";    if (filtersInfo[i].beforeGetAdmin)     operCode+=String.valueOf(FilterOperationCodes.BEFORE_GETADMIN) + ", ";    if (filtersInfo[i].beforeUpdate)     operCode+=String.valueOf(FilterOperationCodes.BEFORE_UPDATE) + ", ";    if (filtersInfo[i].afterUpdate)     operCode+=String.valueOf(FilterOperationCodes.AFTER_UPDATE) + ", ";    if (!operCode.equals(""))     operCode=operCode.substring(0,operCode.lastIndexOf(','));    filElem.appendChild(createXMLTextNode(doc,Filter.FILTER_OPERATION_CODE_TAG_NAME,operCode));    filterElem.appendChild(filElem);  }  Node filterNameNode=filterElem.getElementsByTagName(Filter.FILTER_NAMES_TAG_NAME).item(0);  filterNameNode.getFirstChild().setNodeValue(filterNames.substring(0,filterNames.lastIndexOf(',')));  JSpaceUtilities.domWriter(doc.getDocumentElement(),new PrintStream(new FileOutputStream(spaceConfigFile))," ");}  }
class C{  public Remote lookup(String key) throws RegistryException {  try {    return registry.lookup(key);  } catch (  Exception e) {    throw new RegistryException("Failed to lookup with key [" + key + "]",e);  }}  }
class C{  public boolean containsKey(Object key){  return doGet(key) != null;}  }
class C{  public boolean drawShadows(){  return drawShadows;}  }
class C{  public Value distinct(Value obj){  throw new RuntimeException("Unsupported operation.");}  }
class C{  protected Button createRadioButton(Composite parent,String label,int span){  Button button=new Button(parent,SWT.RADIO);  button.setText(label);  GridData data=new GridData();  data.horizontalSpan=span;  button.setLayoutData(data);  return button;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void reset(String tag,String label){  mTag=tag;  mLabel=label;  reset();}  }
class C{  public boolean deleteKey(DataType key,RecordID rid){  throw new BPlusTreeException("BPlusTree#DeleteKey Not Implemented!");}  }
class C{  private Config(){  throw new AssertionError("com.sun.jini.config.Config cannot be instantiated");}  }
class C{  public void java_lang_Class_getSigners(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable tempFld=helper.tempField("<java.lang.Class signers>");  helper.assign(returnVar,tempFld);}  }
class C{  public void updated(int flags){  myNotifyDirty|=flags;  myFolderConfigDirty|=flags;  myModificationCount++;  if (myManager.getStateVersion() != myProjectStateVersion) {    myNotifyDirty|=MASK_PROJECT_STATE;    myFolderConfigDirty|=MASK_PROJECT_STATE;    myDevice=null;    myState=null;  }  if (myBulkEditingCount == 0) {    int changed=myNotifyDirty;    if (myListeners != null) {      for (      ConfigurationListener listener : myListeners) {        listener.changed(changed);      }    }    myNotifyDirty=0;  }}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public static GitRepository initScratchRepo(boolean verbose,Map<String,String> environment) throws RepoException {  Path scratchWorkTree;  try {    scratchWorkTree=Files.createTempDirectory("copybara-makeScratchClone");  } catch (  IOException e) {    throw new RepoException("Could not make temporary directory for scratch repo",e);  }  return initScratchRepo(verbose,scratchWorkTree,environment);}  }
class C{  private void saveTestResult(boolean success){  String resolution=mWidth + "x" + mHeight+ "-";  Editor editor=mPreferences.edit();  editor.putBoolean(PREF_PREFIX + resolution + "success",success);  if (success) {    editor.putInt(PREF_PREFIX + resolution + "lastSdk",Build.VERSION.SDK_INT);    editor.putInt(PREF_PREFIX + resolution + "lastVersion",VERSION);    editor.putInt(PREF_PREFIX + resolution + "sliceHeight",mNV21.getSliceHeigth());    editor.putInt(PREF_PREFIX + resolution + "stride",mNV21.getStride());    editor.putInt(PREF_PREFIX + resolution + "padding",mNV21.getYPadding());    editor.putBoolean(PREF_PREFIX + resolution + "planar",mNV21.getPlanar());    editor.putBoolean(PREF_PREFIX + resolution + "reversed",mNV21.getUVPanesReversed());    editor.putString(PREF_PREFIX + resolution + "encoderName",mEncoderName);    editor.putInt(PREF_PREFIX + resolution + "colorFormat",mEncoderColorFormat);    editor.putString(PREF_PREFIX + resolution + "encoderName",mEncoderName);    editor.putString(PREF_PREFIX + resolution + "pps",mB64PPS);    editor.putString(PREF_PREFIX + resolution + "sps",mB64SPS);  }  editor.commit();}  }
class C{  public void update(@SwingCoordinate int x,@SwingCoordinate int y,@InputEventMask int modifiers){}  }
class C{  @SuppressLint("DrawAllocation") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int[] size=getMeasureSize(MeasureSpec.getSize(widthMeasureSpec));  setMeasuredDimension(size[0],size[1]);}  }
class C{  public static void replaceFragment(Activity activity,int containerViewId,Fragment newFragment,Bundle bundle,boolean canBack){  FragmentTransaction mFragmentTransaction=activity.getFragmentManager().beginTransaction();  mFragmentTransaction.replace(containerViewId,newFragment,newFragment.getClass().getName());  if (bundle != null) {    newFragment.setArguments(bundle);  }  if (canBack) {    mFragmentTransaction.addToBackStack(null);  }  mFragmentTransaction.commit();}  }
class C{  public String codeCleanPipeline(String contents){  if (contents == null) {    return Values.EMPTYSTRING;  }  StringBuilder indexContents=new StringBuilder();  char[] firstReplacements={'<','>',')','(','[',']','|','=',','};  for (  char c : firstReplacements) {    contents=contents.replace(c,' ');  }  indexContents.append(" ");  indexContents.append(contents);  char[] secondReplacements={';','{','}','/'};  for (  char c : secondReplacements) {    contents=contents.replace(c,' ');  }  indexContents.append(" ");  indexContents.append(contents);  char[] forthReplacements={'"','\''};  for (  char c : forthReplacements) {    contents=contents.replace(c,' ');  }  indexContents.append(" ");  indexContents.append(contents);  char[] replacements={'\'','"','.',';','=','(',')','[',']','_',';','@','#'};  for (  char c : replacements) {    contents=contents.replace(c,' ');  }  indexContents.append(" ");  indexContents.append(contents);  char[] thirdReplacements={'-'};  for (  char c : thirdReplacements) {    contents=contents.replace(c,' ');  }  indexContents.append(" ");  indexContents.append(contents);  return indexContents.toString();}  }
class C{  public IObjectInfo<T> add(T subject){  return addImpl(subject);}  }
class C{  public AggregateTable(Visualization vis,String group){  this(vis,group,VisualItem.SCHEMA);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((comboBox != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof String) {      String oldValue=(String)undoRedoObject.getOldValue();      comboBox.setSelectValueKey(oldValue);    }  }}  }
class C{  public static int encode(int n){  return (n << 1) ^ (n >> 31);}  }
class C{  void toString(StringBuffer buf,boolean includeConstraints){  buf.append(name == null ? "default" : name);  if (types != null) {    buf.append('(');    for (int i=0; i < types.length; i++) {      if (i > 0) {        buf.append(", ");      }      buf.append(types[i].getName());    }    buf.append(')');  }  if (includeConstraints) {    buf.append(" => ").append(constraints);  }}  }
class C{  private String hashBitmap(Bitmap bmp){  int[] allpixels=new int[bmp.getHeight() * bmp.getWidth()];  bmp.getPixels(allpixels,0,bmp.getWidth(),0,0,bmp.getWidth(),bmp.getHeight());  return Integer.toHexString(Arrays.hashCode(allpixels));}  }
class C{  public ScrollObject(){  this.toTop=true;}  }
class C{  public static void exec(Runnable task){  if (isCurrent()) {    task.run();  } else {    nextTick(task);  }}  }
class C{  private void installHttpSelector(Properties settings,ProtocolDispatchSelector ps) throws NumberFormatException {  String proxyHost=settings.getProperty("/system/http_proxy/host",null);  int proxyPort=Integer.parseInt(settings.getProperty("/system/http_proxy/port","0").trim());  if (proxyHost != null && proxyHost.length() > 0 && proxyPort > 0) {    Logger.log(getClass(),LogLevel.TRACE,"Gnome http proxy is {0}:{1}",proxyHost,proxyPort);    ps.setSelector("http",new FixedProxySelector(proxyHost.trim(),proxyPort));  }}  }
class C{  public static String toHexStream(ByteBuffer data){  StringBuilder result=new StringBuilder();  int counter=0;  int b;  while (data.hasRemaining()) {    b=data.get() & 0xff;    result.append(String.format("%02X ",b));    counter++;    if (counter % 16 == 0) {      result.append("\n");    }  }  return result.toString();}  }
class C{  Node nextNode(Node node,boolean visitChildren){  if (node == null)   return fRoot;  Node result;  if (visitChildren) {    if (node.hasChildNodes()) {      result=node.getFirstChild();      return result;    }  }  if (node == fRoot) {    return null;  }  result=node.getNextSibling();  if (result != null)   return result;  Node parent=node.getParentNode();  while (parent != null && parent != fRoot) {    result=parent.getNextSibling();    if (result != null) {      return result;    } else {      parent=parent.getParentNode();    }  }  return null;}  }
class C{  @Override public void populateExpression(Object objValue){  if (objValue instanceof String) {    String sValue=(String)objValue;    populateField(sValue);  }}  }
class C{  private int purgeAscending(final int lowIndex,final int highIndex,final RollingFileManager manager){  int suffixLength=0;  final List<FileRenameAction> renames=new ArrayList<FileRenameAction>();  final StringBuilder buf=new StringBuilder();  manager.getPatternProcessor().formatFileName(subst,buf,highIndex);  String highFilename=subst.replace(buf);  if (highFilename.endsWith(EXT_GZIP)) {    suffixLength=EXT_GZIP.length();  } else   if (highFilename.endsWith(EXT_ZIP)) {    suffixLength=EXT_ZIP.length();  }  int maxIndex=0;  for (int i=highIndex; i >= lowIndex; i--) {    File toRename=new File(highFilename);    if (i == highIndex && toRename.exists()) {      maxIndex=highIndex;    } else     if (maxIndex == 0 && toRename.exists()) {      maxIndex=i + 1;      break;    }    boolean isBase=false;    if (suffixLength > 0) {      final File toRenameBase=new File(highFilename.substring(0,highFilename.length() - suffixLength));      if (toRename.exists()) {        if (toRenameBase.exists()) {          LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} base of {}.",toRenameBase,toRename);          toRenameBase.delete();        }      } else {        toRename=toRenameBase;        isBase=true;      }    }    if (toRename.exists()) {      if (i == lowIndex) {        LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} at low index {}: all slots full.",toRename,i);        if (!toRename.delete()) {          return -1;        }        break;      }      buf.setLength(0);      manager.getPatternProcessor().formatFileName(subst,buf,i - 1);      final String lowFilename=subst.replace(buf);      String renameTo=lowFilename;      if (isBase) {        renameTo=lowFilename.substring(0,lowFilename.length() - suffixLength);      }      renames.add(new FileRenameAction(toRename,new File(renameTo),true));      highFilename=lowFilename;    } else {      buf.setLength(0);      manager.getPatternProcessor().formatFileName(subst,buf,i - 1);      highFilename=subst.replace(buf);    }  }  if (maxIndex == 0) {    maxIndex=lowIndex;  }  for (int i=renames.size() - 1; i >= 0; i--) {    final Action action=renames.get(i);    try {      LOGGER.debug("DefaultRolloverStrategy.purgeAscending executing {} of {}: {}",i,renames.size(),action);      if (!action.execute()) {        return -1;      }    } catch (    final Exception ex) {      LOGGER.warn("Exception during purge in RollingFileAppender",ex);      return -1;    }  }  return maxIndex;}  }
class C{  public Value min(Value num){  return new AggregationFunction(num,AggregationType.MINIMUM);}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,float moduleSize) throws NotFoundException {  int tltrCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleSize);  int tlblCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleSize);  int dimension=((tltrCentersDimension + tlblCentersDimension) / 2) + 7;switch (dimension & 0x03) {case 0:    dimension++;  break;case 2:dimension--;break;case 3:throw NotFoundException.getNotFoundInstance();}return dimension;}  }
class C{  public static List<Writable> rowToWritables(Schema schema,Row row){  List<Writable> ret=new ArrayList<>();  for (int i=0; i < row.size(); i++) {switch (schema.getType(i)) {case Double:      ret.add(new DoubleWritable(row.getDouble(i)));    break;case Float:  ret.add(new FloatWritable(row.getFloat(i)));break;case Integer:ret.add(new IntWritable(row.getInt(i)));break;case Long:ret.add(new LongWritable(row.getLong(i)));break;case String:ret.add(new Text(row.getString(i)));break;default :throw new IllegalStateException("Illegal type");}}return ret;}  }
class C{  public NotificationAdapter(){}  }
class C{  public boolean anyNotifyWriteTemplates(){  return _anyNotifyWriteTemplates;}  }
class C{  public void writePraatPitchTier(String fileName) throws IOException {  ArrayList<Double> times=new ArrayList<Double>();  ArrayList<Double> values=new ArrayList<Double>();  double time=0;  ListIterator<Phone> phoneIterator=phones.listIterator(1);  while (phoneIterator.hasNext()) {    Phone phone=phoneIterator.next();    double[] frameTimes=phone.getRealizedFrameDurations();    double[] frameF0s=phone.getUnitFrameF0s();    for (int f=0; f < frameF0s.length; f++) {      time+=frameTimes[f];      times.add(time);      values.add(frameF0s[f]);    }  }  File durationTierFile=new File(fileName);  PrintWriter out=new PrintWriter(durationTierFile);  out.println("\"ooTextFile\"");  out.println("\"PitchTier\"");  out.println(String.format("0 %f %d",time,times.size()));  for (int i=0; i < times.size(); i++) {    out.println(String.format("%.16f %f",times.get(i),values.get(i)));  }  out.close();}  }
class C{  public DataStructure(byte[] raw,Format format){  this(ByteBuffer.wrap(raw).order(ByteOrder.LITTLE_ENDIAN),format);}  }
class C{  public void addMutualEdges(Object from,Object to,int weight){  addEdge(from,to,weight);  addEdge(to,from,-weight);}  }
class C{  public void removeEdge(Edge edge) throws Exception {  if (EdgeDistros.containsKey(edge))   EdgeDistros.remove(edge);  super.removeEdge(edge);}  }
class C{  public void doFindNext(JTextComponent target){  if (target == null || pattern == null) {    return;  }  SyntaxDocument sDoc=ActionUtils.getSyntaxDocument(target);  if (sDoc == null) {    return;  }  int start=target.getCaretPosition() + 1;  if (start >= sDoc.getLength()) {    start=0;  }  Matcher matcher=sDoc.getMatcher(pattern,start);  if (matcher != null && matcher.find()) {    target.select(matcher.start() + start,matcher.end() + start);  } else {    if (isWrap()) {      matcher=sDoc.getMatcher(pattern);      if (matcher != null && matcher.find()) {        target.select(matcher.start(),matcher.end());      } else {        msgNotFound();      }    } else {      msgNotFound();    }  }}  }
class C{  public Builder className(String className){  this.className=className;  return this;}  }
class C{  protected void notifyHideContextualSearch(){  for (  ContextualSearchObserver observer : mObservers) {    observer.onHideContextualSearch();  }}  }
class C{  @Override public void externalEntityDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  if (DEBUG_EVENTS) {    System.out.println("==>externalEntityDecl: " + name);    if (DEBUG_BASEURI) {      System.out.println("   expandedSystemId:" + identifier.getExpandedSystemId());      System.out.println("   baseURI:" + identifier.getBaseSystemId());    }  }  String publicId=identifier.getPublicId();  String literalSystemId=identifier.getLiteralSystemId();  if (fInternalSubset != null && !fInDTDExternalSubset) {    fInternalSubset.append("<!ENTITY ");    if (name.startsWith("%")) {      fInternalSubset.append("% ");      fInternalSubset.append(name.substring(1));    } else {      fInternalSubset.append(name);    }    fInternalSubset.append(' ');    if (publicId != null) {      fInternalSubset.append("PUBLIC '");      fInternalSubset.append(publicId);      fInternalSubset.append("' '");    } else {      fInternalSubset.append("SYSTEM '");    }    fInternalSubset.append(literalSystemId);    fInternalSubset.append("'>\n");  }  if (name.startsWith("%"))   return;  if (fDocumentType != null) {    NamedNodeMap entities=fDocumentType.getEntities();    EntityImpl entity=(EntityImpl)entities.getNamedItem(name);    if (entity == null) {      entity=(EntityImpl)fDocumentImpl.createEntity(name);      entity.setPublicId(publicId);      entity.setSystemId(literalSystemId);      entity.setBaseURI(identifier.getBaseSystemId());      entities.setNamedItem(entity);    }  }  if (fDocumentTypeIndex != -1) {    boolean found=false;    int nodeIndex=fDeferredDocumentImpl.getLastChild(fDocumentTypeIndex,false);    while (nodeIndex != -1) {      short nodeType=fDeferredDocumentImpl.getNodeType(nodeIndex,false);      if (nodeType == Node.ENTITY_NODE) {        String nodeName=fDeferredDocumentImpl.getNodeName(nodeIndex,false);        if (nodeName.equals(name)) {          found=true;          break;        }      }      nodeIndex=fDeferredDocumentImpl.getRealPrevSibling(nodeIndex,false);    }    if (!found) {      int entityIndex=fDeferredDocumentImpl.createDeferredEntity(name,publicId,literalSystemId,null,identifier.getBaseSystemId());      fDeferredDocumentImpl.appendChild(fDocumentTypeIndex,entityIndex);    }  }}  }
class C{  public void write(IOutputWriter writer,Map<Integer,ListOfLongs> classId2locations) throws IOException {  writer.writeInt(map.size());  for (  Object key : map.keySet()) {    writer.writeInt((Integer)key);    final Integer sum=map.get(key);    writer.writeInt(sum);    if (classId2locations != null) {      final ListOfLongs list=classId2locations.get(key);      if (list.size() != sum)       throw new IOException("Wrong number of locations: " + list.size() + ", should be: "+ sum);      for (int i=0; i < list.size(); i++)       writer.writeLong(list.get(i));    }  }}  }
class C{  private static String wrapWithMergeConflict(String original,String added){  String sep="\n";  return "<<<<<<< Original" + sep + original+ sep+ "======="+ sep+ added+ ">>>>>>> Added"+ sep;}  }
class C{  public static boolean isSymmetric(RealMatrix matrix,double eps){  return isSymmetricInternal(matrix,eps,false);}  }
class C{  @SuppressLint("NewApi") public static Boolean fragmentsSupported(){  try {    return (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) && classExists("android.app.Fragment");  } catch (  NoClassDefFoundError e) {    return false;  }}  }
class C{  public static boolean isClassPackageNeeded(@NotNull String qualifiedName,@NotNull PsiClass baseClass,int apiLevel){  final PsiClass viewClass=JavaPsiFacade.getInstance(baseClass.getProject()).findClass(CLASS_VIEW,GlobalSearchScope.allScope(baseClass.getProject()));  if (viewClass != null && baseClass.isInheritor(viewClass,true)) {    return isViewPackageNeeded(qualifiedName,apiLevel);  } else   if (CLASS_PREFERENCE.equals(baseClass.getQualifiedName())) {    return !isDirectlyInPackage(qualifiedName,"android.preference.");  } else {    return !qualifiedName.startsWith(ANDROID_PKG_PREFIX);  }}  }
class C{  public PhotosSearchQuery radius(Integer value){  return unsafeParam("radius",value);}  }
class C{  public static <V>boolean addListNotNullValue(List<V> sourceList,V value){  return (sourceList != null && value != null) ? sourceList.add(value) : false;}  }
class C{  void put(int key,MvvmViewModel cacheViewModel){  cache.put(key,cacheViewModel);}  }
class C{  public String createAjaxParamsFromUpdateAreas(List<ModelForm.UpdateArea> updateAreas,String extraParams,Map<String,? extends Object> context){  if (updateAreas == null) {    return "";  }  StringBuilder ajaxUrl=new StringBuilder();  boolean firstLoop=true;  for (  ModelForm.UpdateArea updateArea : updateAreas) {    if (firstLoop) {      firstLoop=false;    } else {      ajaxUrl.append(",");    }    String targetUrl=updateArea.getAreaTarget(context);    String ajaxParams=getAjaxParamsFromTarget(targetUrl);    if (UtilValidate.isNotEmpty(extraParams)) {      if (ajaxParams.length() > 0 && !extraParams.startsWith("&")) {        ajaxParams+="&";      }      ajaxParams+=extraParams;    }    ajaxUrl.append(updateArea.getAreaId()).append(",");    try {      appendOfbizUrl(ajaxUrl,UtilHttp.removeQueryStringFromTarget(targetUrl));    } catch (    IOException e) {      throw UtilMisc.initCause(new InternalError(e.getMessage()),e);    }    ajaxUrl.append(",").append(ajaxParams);  }  return ajaxUrl.toString();}  }
class C{  @Override public void close() throws IOException {  if (writer == null) {    encoding=defaultEncoding;    writer=new OutputStreamWriter(out,encoding);    writer.write(xmlPrologWriter.toString());  }  writer.close();}  }
class C{  @Override public boolean ready() throws IOException {  return false;}  }
class C{  public boolean equals(String productId,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,BigDecimal selectedAmount){  return equals(productId,null,BigDecimal.ZERO,BigDecimal.ZERO,null,null,additionalProductFeatureAndAppls,attributes,prodCatalogId,selectedAmount,configWrapper,itemType,itemGroup,false);}  }
class C{  public boolean isGlobalScope(){  return true;}  }
class C{  public LoadImplementor(LoadModel model,LoadView view){  this.model=model;  this.view=view;}  }
class C{  static void zero(float[][] array){  for (  float[] aFloat : array) {    Arrays.fill(aFloat,-1);  }}  }
class C{  public int compareTo(Object o){  int thisValue=this.value;  int thatValue=((IntWritable)o).value;  return (thisValue < thatValue ? -1 : (thisValue == thatValue ? 0 : 1));}  }
class C{  public static <T>void publishService(String url) throws RpcException {  try {    ServicePublisher.publishService(url);  } catch (  RegistryException t) {    throw new RpcException("error while publishing service:" + url,t);  }}  }
class C{  public static int color(Color c){  return c.getRGB();}  }
class C{  @NotNull public UpdateFaceListAction updateFaceList(@NotNull String faceListId,@NotNull String name,@Nullable String userData){  Validation.validate(faceListId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("faceListId","faceListId is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  Validation.validate(name,"^.{1,128}$",new ParameterValidationException("name","The maximum length is 128"));  Validation.validate(Utils.blankIfNull(userData),16,new ParameterValidationException("userData","The size limit is 16KB"));  return new UpdateFaceListAction(cognitiveContext,faceListId,name,userData);}  }
class C{  public ArrayFieldVector(ArrayFieldVector<T> v) throws NullArgumentException {  MathUtils.checkNotNull(v);  field=v.getField();  data=v.data.clone();}  }
class C{  public int addNodeRow(){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public static boolean unbookmark(String id){  if (isBookmarked(id)) {    Inquiry.get().deleteFrom(Constants.DATABASE_NAME,BookmarksDB.class).where("_id = ?",id).run();    return true;  } else   bookmark(id);  return false;}  }
class C{  @Beta public void reset(){  schedulersHook.set(null);}  }
class C{  private void forceResize(int width,int height){  boolean devEnv=(Boolean)Launch.blackboard.get("fml.deobfuscatedEnvironment");  String resizeMethodName=devEnv ? "resize" : "func_71370_a";  Class[] cArgs=new Class[2];  cArgs[0]=int.class;  cArgs[1]=int.class;  Method resize;  try {    resize=Minecraft.class.getDeclaredMethod(resizeMethodName,cArgs);    resize.setAccessible(true);    resize.invoke(Minecraft.getMinecraft(),width,height);  } catch (  NoSuchMethodException e) {    e.printStackTrace();  }catch (  SecurityException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  private boolean isGCMBaseIntentService(SootClass currentClass){  while (currentClass.hasSuperclass()) {    if (currentClass.getSuperclass().getName().equals(AndroidEntryPointConstants.GCMBASEINTENTSERVICECLASS))     return true;    currentClass=currentClass.getSuperclass();  }  return false;}  }
class C{  public static ConversationListFragment newInstance(String anchorId,boolean isNormalStyle){  ConversationListFragment fragment=new ConversationListFragment();  Bundle bundle=new Bundle();  bundle.putString(ARG_ANCHOOR,anchorId);  bundle.putBoolean(ARG_IS_NORMAL,isNormalStyle);  fragment.setArguments(bundle);  return fragment;}  }
class C{  @Override protected boolean scanForDoctypeHook() throws IOException, XNIException {  if (fEntityScanner.skipString("DOCTYPE")) {    setScannerState(SCANNER_STATE_DOCTYPE);    return true;  }  return false;}  }
class C{  private <T>T send(String method,Class<T> responseType,@Nullable Object entity){  if (responseType == EmoResponse.class) {    return (T)toEmoResponse(entity == null ? builder().method(method,ClientResponse.class) : builder().method(method,ClientResponse.class,entity));  }  try {    ClientResponse response=entity == null ? builder().method(method,ClientResponse.class) : builder().method(method,ClientResponse.class,entity);    if (response.getStatus() >= 300) {      throw new UniformInterfaceException(response);    }    if (!response.getType().equals(MediaType.APPLICATION_JSON_TYPE)) {      return response.getEntity(responseType);    }    return EntityHelper.getEntity(response.getEntity(InputStream.class),responseType);  } catch (  UniformInterfaceException e) {    throw asEmoClientException(e);  }}  }
class C{  public DataTagCacheObject createEmptyDataTag(Long id){  DataTagCacheObject dataTagCacheObject=new DataTagCacheObject();  dataTagCacheObject.setId(id);  dataTagCacheObject.setName("UNKNOWN");  dataTagCacheObject.setMode(DataTagConstants.MODE_TEST);  dataTagCacheObject.setLogged(false);  dataTagCacheObject.setSimulated(false);  return dataTagCacheObject;}  }
class C{  public void writeShort(short value) throws JMSException {  initializeWriting();  try {    this.dataOut.write(_SHORT);    this.dataOut.writeShort(value);  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  public GroupsIsMemberQueryWithUserIdsExtended isMemberExtended(UserActor actor,String groupId,Integer... userIds){  return new GroupsIsMemberQueryWithUserIdsExtended(getClient(),actor,groupId,userIds);}  }
class C{  @Override public void copyContentlet(Contentlet arg0,Folder arg1,User arg2,boolean arg3,boolean arg4,Contentlet arg5){}  }
class C{  protected boolean isEnabledForCopiedResources(){  return isEnabledForAddedResources();}  }
class C{  @deprecated protected void handleComputeFields(int julianDay){  int[] fields=new int[3];  jdToCE(julianDay,getJDEpochOffset(),fields);  int year;  int era;  int year;  if (fields[0] <= 0) {    int era=0;    year=1 - fields[0];  } else {    era=1;    year=fields[0];  }  internalSet(19,fields[0]);  internalSet(0,era);  internalSet(1,year);  internalSet(2,fields[1]);  internalSet(5,fields[2]);  internalSet(6,30 * fields[1] + fields[2]);}  }
class C{  @Override public void characters(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  public UsersGetFollowersQuery nameCase(UsersNameCase value){  return unsafeParam("name_case",value);}  }
class C{  public ParticleSystem addModifier(ParticleModifier modifier){  mModifiers.add(modifier);  return this;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ResourceModifiers fullCopy(){  ResourceModifiers tree=(ResourceModifiers)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected MarketReorderAlbumsQuery albumId(int value){  return unsafeParam("album_id",value);}  }
class C{  @Override public Filter createFilter(){  return new WithinExtended();}  }
class C{  public NotesAddQuery add(UserActor actor,String title,String text){  return new NotesAddQuery(getClient(),actor,title,text);}  }
class C{  @Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {}  }
class C{  public FieldRefNode makeFieldRefNode(VarNode base,SparkField field){  FieldRefNode ret=base.dot(field);  if (ret == null) {    ret=new FieldRefNode(this,base,field);    if (base instanceof LocalVarNode) {      addNodeTag(ret,((LocalVarNode)base).getMethod());    } else {      addNodeTag(ret,null);    }  }  return ret;}  }
class C{  public AsynchronousWorkflows(Observable<PreResponse> queryResultsPayload,Observable<String> jobMetadataPayload,Observable<String> preResponseReadyNotifications,Observable<JobRow> jobMarkedCompleteNotifications){  this.queryResultsPayload=queryResultsPayload;  this.jobMetadataPayload=jobMetadataPayload;  this.preResponseReadyNotifications=preResponseReadyNotifications;  this.jobMarkedCompleteNotifications=jobMarkedCompleteNotifications;}  }
class C{  public static Map<String,Object> prodMakeFeatureTree(DispatchContext dctx,Map<String,? extends Object> context){  String productStoreId=(String)context.get("productStoreId");  Locale locale=(Locale)context.get("locale");  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  List<String> featureOrder=UtilMisc.makeListWritable(UtilGenerics.<String>checkCollection(context.get("featureOrder")));  if (UtilValidate.isEmpty(featureOrder)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductFeatureTreeCannotFindFeaturesList",locale));  }  List<GenericValue> variants=UtilGenerics.checkList(prodFindAllVariants(dctx,context).get("assocProducts"));  List<String> virtualVariant=FastList.newInstance();  if (UtilValidate.isEmpty(variants)) {    return ServiceUtil.returnSuccess();  }  List<String> items=FastList.newInstance();  List<GenericValue> outOfStockItems=FastList.newInstance();  for (  GenericValue variant : variants) {    String productIdTo=variant.getString("productIdTo");    GenericValue productTo=null;    try {      productTo=EntityQuery.use(delegator).from("Product").where("productId",productIdTo).cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,module);      Map<String,String> messageMap=UtilMisc.toMap("productIdTo",productIdTo,"errMessage",e.toString());      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"productservices.error_finding_associated_variant_with_ID_error",messageMap,locale));    }    if (productTo == null) {      Debug.logWarning("Could not find associated variant with ID " + productIdTo + ", not showing in list",module);      continue;    }    java.sql.Timestamp nowTimestamp=UtilDateTime.nowTimestamp();    if (productTo.get("introductionDate") != null && nowTimestamp.before(productTo.getTimestamp("introductionDate"))) {      if (Debug.verboseOn()) {        String excMsg="Tried to view the Product " + productTo.getString("productName") + " (productId: "+ productTo.getString("productId")+ ") as a variant. This product has not yet been made available for sale, so not adding for view.";        Debug.logVerbose(excMsg,module);      }      continue;    }    if (productTo.get("salesDiscontinuationDate") != null && nowTimestamp.after(productTo.getTimestamp("salesDiscontinuationDate"))) {      if (Debug.verboseOn()) {        String excMsg="Tried to view the Product " + productTo.getString("productName") + " (productId: "+ productTo.getString("productId")+ ") as a variant. This product is no longer available for sale, so not adding for view.";        Debug.logVerbose(excMsg,module);      }      continue;    }    Boolean checkInventory=(Boolean)context.get("checkInventory");    try {      if (checkInventory) {        Map<String,Object> invReqResult=dispatcher.runSync("isStoreInventoryAvailableOrNotRequired",UtilMisc.<String,Object>toMap("productStoreId",productStoreId,"productId",productIdTo,"quantity",BigDecimal.ONE));        if (ServiceUtil.isError(invReqResult)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductFeatureTreeCannotCallIsStoreInventoryRequired",locale),null,null,invReqResult);        } else         if ("Y".equals(invReqResult.get("availableOrNotRequired"))) {          items.add(productIdTo);          if (productTo.getString("isVirtual") != null && productTo.getString("isVirtual").equals("Y")) {            virtualVariant.add(productIdTo);          }        } else {          outOfStockItems.add(productTo);        }      } else {        items.add(productIdTo);        if (productTo.getString("isVirtual") != null && productTo.getString("isVirtual").equals("Y")) {          virtualVariant.add(productIdTo);        }      }    } catch (    GenericServiceException e) {      Debug.logError(e,"Error calling the isStoreInventoryRequired when building the variant product tree: " + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductFeatureTreeCannotCallIsStoreInventoryRequired",locale));    }  }  String productId=(String)context.get("productId");  List<GenericValue> selectableFeatures=null;  try {    selectableFeatures=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureApplTypeId","SELECTABLE_FEATURE").orderBy("sequenceNum").cache(true).filterByDate().queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"productservices.empty_list_of_selectable_features_found",locale));  }  Map<String,List<String>> features=FastMap.newInstance();  for (  GenericValue v : selectableFeatures) {    String featureType=v.getString("productFeatureTypeId");    String feature=v.getString("description");    if (!features.containsKey(featureType)) {      List<String> featureList=FastList.newInstance();      featureList.add(feature);      features.put(featureType,featureList);    } else {      List<String> featureList=features.get(featureType);      featureList.add(feature);      features.put(featureType,featureList);    }  }  Map<String,Object> tree=null;  try {    tree=makeGroup(delegator,features,items,featureOrder,0);  } catch (  Exception e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (UtilValidate.isEmpty(tree)) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,UtilProperties.getMessage(resourceError,"productservices.feature_grouping_came_back_empty",locale));  } else {    result.put("variantTree",tree);    result.put("virtualVariant",virtualVariant);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  }  Map<String,GenericValue> sample=null;  try {    sample=makeVariantSample(dctx.getDelegator(),features,items,featureOrder.get(0));  } catch (  Exception e) {    return ServiceUtil.returnError(e.getMessage());  }  if (outOfStockItems.size() > 0) {    result.put("unavailableVariants",outOfStockItems);  }  result.put("variantSample",sample);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private boolean matchValue(Collection<?> collection,int tokenIndex,ServerEntry entry){  if (tokenIndex == _tokens.length)   return matchOnRoot(collection,entry); else   throw new RuntimeException("invalid root path: " + _rootPath + " - should end with a collection");}  }
class C{  @SuppressWarnings("unchecked") @Override public String sendRequestToQueue(final String text,final String jmsListenerQueue,final long timeout){  if (text == null) {    throw new NullPointerException("Attempting to send a null text message.");  }  return jmsTemplate.execute(null,true);}  }
class C{  public static boolean supportsSequenceId(int version){  return version >= LogSegmentMetadataVersion.VERSION_V5_SEQUENCE_ID.value;}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_PROC_NOT_ADD_PROC(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300833,descriptionId);}  }
class C{  @deprecated public StringCharacterIterator(String text,int pos){  this(text,0,text.length(),pos);}  }
class C{  Future<? extends DistributedLock> lockHandler(){  if (null != lockFuture) {    return lockFuture;  }  lockFuture=lock.asyncAcquire();  return lockFuture;}  }
class C{  public Builder addColumnLong(String name,Long minAllowedValue,Long maxAllowedValue){  return addColumn(new LongMetaData(name,minAllowedValue,maxAllowedValue));}  }
class C{  private Cluster<T> expandCluster(final Cluster<T> cluster,final T point,final List<T> neighbors,final Collection<T> points,final Map<Clusterable,PointStatus> visited){  cluster.addPoint(point);  visited.put(point,PointStatus.PART_OF_CLUSTER);  List<T> seeds=new ArrayList<T>(neighbors);  int index=0;  while (index < seeds.size()) {    final T current=seeds.get(index);    PointStatus pStatus=visited.get(current);    if (pStatus == null) {      final List<T> currentNeighbors=getNeighbors(current,points);      if (currentNeighbors.size() >= minPts) {        seeds=merge(seeds,currentNeighbors);      }    }    if (pStatus != PointStatus.PART_OF_CLUSTER) {      visited.put(current,PointStatus.PART_OF_CLUSTER);      cluster.addPoint(current);    }    index++;  }  return cluster;}  }
class C{  public SphericalPolygonsSet(final Vector3D pole,final double tolerance){  super(new BSPTree<Sphere2D>(new Circle(pole,tolerance).wholeHyperplane(),new BSPTree<Sphere2D>(Boolean.FALSE),new BSPTree<Sphere2D>(Boolean.TRUE),null),tolerance);}  }
class C{  static public void apply(final String pattern,@NotNull final StringLiteralExpression target,@NotNull final ProblemsHolder holder){  if (!StringUtil.isEmpty(pattern) && pattern.indexOf('?') >= 0) {    Matcher regexMatcher=regexNonGreedyPattern.matcher(pattern);    if (regexMatcher.find()) {      String strError=strProblemDescription.replace("%p%",regexMatcher.group(0)).replace("%c%",regexMatcher.group(2)).replace("%m%",regexMatcher.group(1));      holder.registerProblem(target,strError,ProblemHighlightType.WEAK_WARNING);    }  }}  }
class C{  public long blocksAccessed(){  return numBlks;}  }
class C{  public static String readAsString(InputStream is) throws IOException {  StringBuffer buf=new StringBuffer();  byte[] b=new byte[8192];  int nread=-1;  while ((nread=is.read(b)) >= 0) {    String s=new String(b,0,nread);    buf.append(s);  }  return buf.toString();}  }
class C{  public double slope(){  return beta;}  }
class C{  public boolean isStaticTimedeadband(){  return staticTimedeadband;}  }
class C{  private List<Double> seqFromToLenOut(){  List<Double> mapping=new ArrayList<Double>();  if (from < 1 || from > to) {    System.err.println("Invalid genome coordinates: from " + from + " to "+ to);    try {      throw new InvalidGenomicCoordsException();    } catch (    InvalidGenomicCoordsException e) {      e.printStackTrace();      System.exit(1);    }  }  int span=to - from + 1;  if (span <= this.windowSize) {    for (int i=from; i <= to; i++) {      mapping.add((double)i);    }    return mapping;  }  double step=((double)span - 1) / (this.windowSize - 1);  mapping.add((double)from);  for (int i=1; i < this.windowSize; i++) {    mapping.add((double)mapping.get(i - 1) + step);  }  double diffTo=Math.abs(mapping.get(mapping.size() - 1) - to);  if (diffTo > ((float)to * 0.001)) {    System.err.println("Error generating sequence:");    System.err.println("Last point: " + mapping.get(mapping.size() - 1));    System.err.println("To diff: " + diffTo);    System.err.println("Step: " + step);  } else {    mapping.set(mapping.size() - 1,(double)to);  }  double diffFrom=Math.abs(mapping.get(0) - from);  if (diffFrom > 0.01 || mapping.size() != this.windowSize) {    System.err.println("Error generating sequence:");    System.err.println("Expected size: " + this.windowSize + "; Effective: "+ mapping.size());    System.err.println("From diff: " + diffFrom);    System.exit(1);  }  return mapping;}  }
class C{  public boolean equalTo(Highlight h){  if (h == null)   return false; else {    return (this.mDataSetIndex == h.mDataSetIndex && this.mXIndex == h.mXIndex && this.mStackIndex == h.mStackIndex);  }}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  private List<DataApprovalLevel> subsetUserDataApprovalLevels(List<DataApprovalLevel> approvalLevels){  UserCredentials userCredentials=currentUserService.getCurrentUser().getUserCredentials();  int lowestNumberOrgUnitLevel=getCurrentUsersLowestNumberOrgUnitLevel();  boolean canSeeAllDimensions=CollectionUtils.isEmpty(categoryService.getCoDimensionConstraints(userCredentials)) && CollectionUtils.isEmpty(categoryService.getCogDimensionConstraints(userCredentials));  List<DataApprovalLevel> userDataApprovalLevels=new ArrayList<>();  boolean addLevel=false;  for (  DataApprovalLevel approvalLevel : approvalLevels) {    if (!addLevel && approvalLevel.getOrgUnitLevel() >= lowestNumberOrgUnitLevel) {      CategoryOptionGroupSet cogs=approvalLevel.getCategoryOptionGroupSet();      addLevel=securityService.canRead(approvalLevel) && cogs == null ? canSeeAllDimensions : (securityService.canRead(cogs) && !CollectionUtils.isEmpty(categoryService.getCategoryOptionGroups(cogs)));    }    if (addLevel) {      userDataApprovalLevels.add(approvalLevel);    }  }  return userDataApprovalLevels;}  }
class C{  public void put(int ii,Z val){  re[ii - bx]=val.re;  im[ii - bx]=val.im;}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public WallPinQuery pin(UserActor actor,int postId){  return new WallPinQuery(getClient(),actor,postId);}  }
class C{  public boolean containsKey(String key){  if (mLinkedHashMap.containsKey(key)) {    return true;  }  final String existingFile=createFilePath(mCacheDir,key);  if (new File(existingFile).exists()) {    put(key,existingFile);    return true;  }  return false;}  }
class C{  protected void initComparator(){  if (Comparator == null)   Comparator=new NGramCachedGraphComparator();}  }
class C{  public JsonElement remove(int index){  return elements.remove(index);}  }
class C{  protected void drawYAxisTransposed(Graphics2D gc,Dimension size){  final int numberOfSeries=(seriesNames == null ? 0 : seriesNames.length);  if (numberOfSeries > 0) {    SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);    gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));    final boolean doDraw=(size == null);    Rectangle bbox=null;    int x0=leftMargin;    int x1=getWidth() - rightMargin;    int y0=getHeight() - bottomMargin;    int y1=topMargin;    if (viewer.getSeriesList().isDoClustering())     y1+=topTreeSpace;    int longest=0;    for (    String seriesName : seriesNames) {      longest=Math.max(longest,Basic.getStringSize(gc,seriesName,gc.getFont()).getSize().width);    }    int right=Math.max(leftMargin,longest + 5);    if (doDraw)     gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));    double yStep=(y0 - y1) / (double)numberOfSeries;    int c=numberOfSeries - 1;    for (    String seriesName : seriesNames) {      Dimension labelSize=Basic.getStringSize(gc,seriesName,gc.getFont()).getSize();      int x=right - labelSize.width - 4;      int y=(int)Math.round(y0 - (c + 0.5) * yStep);      if (doDraw) {        if (getChartData().getChartSelection().isSelected(seriesName,null)) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);        }        gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.DARK_GRAY));        gc.drawString(seriesName,x,y);      } else {        Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);        if (bbox == null)         bbox=rect; else         bbox.add(rect);      }      if (sgc != null) {        sgc.setCurrentItem(new String[]{seriesName,null});        drawRect(gc,x,y,labelSize.width,labelSize.height,0);        sgc.clearCurrentItem();      }      c--;    }    if (size != null && bbox != null) {      size.setSize(bbox.width + 3,bbox.height);    }  }}  }
class C{  public XMLDTDLoader(){  this(new SymbolTable());}  }
class C{  public static void initSPFactory(){  Class<?> spFactoryCls=CoreProperties.getLoader().getPropertyAsClass(VanillaDb.class.getName() + ".SP_FACTORY",SampleStoredProcedureFactory.class,StoredProcedureFactory.class);  if (spFactoryCls != null) {    try {      spFactory=(StoredProcedureFactory)spFactoryCls.newInstance();    } catch (    InstantiationException|IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  public BoardCreateCommentQuery stickerId(Integer value){  return unsafeParam("sticker_id",value);}  }
class C{  protected void writeString(String s) throws IOException {  for (int i=0; i < s.length(); i++) {    out.write((byte)s.charAt(i));  }}  }
class C{  public CategoriesExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static void writeToFile(File outputFile,String content) throws IOException {  Preconditions.checkNotNull(outputFile);  Preconditions.checkNotNull(content);  try (BufferedWriter outWriter=Files.newWriter(outputFile,StandardCharsets.UTF_8)){    outWriter.write(content);  } }  }
class C{  public AudioSaveQuery(VkApiClient client,UserActor actor,int server,String audio){  super(client,"audio.save",Utils.buildParametrizedType(List.class,Audio.class));  accessToken(actor.getAccessToken());  server(server);  audio(audio);}  }
class C{  public static GenericPK create(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){  GenericPK newPK=new GenericPK();  newPK.init(delegator,modelEntity,fields);  return newPK;}  }
class C{  public void endPrefixMapping(String prefix,Augmentations augs) throws XNIException {}  }
class C{  protected NewsfeedIgnoreItemQuery itemId(int value){  return unsafeParam("item_id",value);}  }
class C{  public static boolean MIUISetStatusBarLightMode(Window window,boolean dark){  boolean result=false;  if (window != null) {    Class clazz=window.getClass();    try {      int darkModeFlag=0;      Class layoutParams=Class.forName("android.view.MiuiWindowManager$LayoutParams");      Field field=layoutParams.getField("EXTRA_FLAG_STATUS_BAR_DARK_MODE");      darkModeFlag=field.getInt(layoutParams);      Method extraFlagField=clazz.getMethod("setExtraFlags",int.class,int.class);      if (dark) {        extraFlagField.invoke(window,darkModeFlag,darkModeFlag);      } else {        extraFlagField.invoke(window,0,darkModeFlag);      }      result=true;    } catch (    Exception e) {    }  }  return result;}  }
class C{  @Override public void onFailure(IMqttToken asyncActionToken,Throwable exception){  exception.printStackTrace();  Log.e("TrafficService","Error connecting: " + exception.getMessage());  onDisconnect(false);}  }
class C{  private void addQuestions(ApiResult ar,String questions,int page,long fromDate,long toDate,String tag,NotifyMe notifyMe) throws JSONException, IOException {  String url=CloseVoteFinder.getInstance().getApiUrl(questions,page,fromDate,toDate,tag);  addQuestions(ar,url,tag,notifyMe);}  }
class C{  @Override public Schema schema(){  return p.schema();}  }
class C{  public void open() throws IOException {  FileFactory.FileType fileType=FileFactory.getFileType(fileName);  dataOutputStream=FileFactory.getDataOutputStream(fileName,fileType,bufferSize,append);  binaryOut=new TCompactProtocol(new TIOStreamTransport(dataOutputStream));}  }
class C{  public static Transaction startTransaction(SQLiteDatabase writableDb){  return new Transaction(writableDb);}  }
class C{  private float constrain(float amount,float low,float high){  return amount < low ? low : (amount > high ? high : amount);}  }
class C{  public void init$Children(){  children=new ASTNode[5];  setChild(new List(),2);  setChild(new List(),3);  setChild(new Opt(),4);}  }
class C{  public boolean isTone(){  return "+".equals(features.get("isTone"));}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  XMLTokener x=new XMLTokener(string);  while (x.more() && x.skipPast("<")) {    parse(x,jo,null);  }  return jo;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200956,skilltarget,num0,skillcaster,skillname);}  }
class C{  @Override public String toString(){  return "Sequence" + sequence;}  }
class C{  public SmoothSwitch(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  final Resources res=getResources();  final float density=res.getDisplayMetrics().density;  mTextPaint.density=density;  final int thumbSize=(int)(Default.DEFAULT_SIZE_DP * density + 0.5f);  final int thumbWidth=thumbSize;  mThumbColorOn=Default.DEFAULT_THUMB_ON_COLOR;  mThumbColorOff=Default.DEFAULT_THUMB_OFF_COLOR;  mTrackColorOn=Default.DEFAULT_TRACK_ON_COLOR;  mTrackColorOff=Default.DEFAULT_TRACK_OFF_COLOR;  final float radius=thumbSize * Default.DEFAULT_RADIUS_PERCENT_OF_SIZE;  final int thumbPadding=(int)(thumbSize * Default.DEFAULT_THUMB_PADDING_PERCENT_OF_SIZE + 0.5f);  final int trackPadding=(int)(thumbSize * Default.DEFAULT_TRACK_PADDING_PERCENT_OF_SIZE + 0.5f);  final int curThumbColor=isChecked() ? mThumbColorOn : mThumbColorOff;  final int curTrackColor=isChecked() ? mTrackColorOn : mTrackColorOff;  mThumbDrawable=makeThumbDrawable(curThumbColor,thumbWidth,thumbSize,radius,thumbPadding);  mTrackDrawable=makeTrackDrawable(curTrackColor,thumbWidth,thumbSize,radius,trackPadding);  mShowText=false;  mThumbTextPadding=0;  mSwitchMinWidth=Math.max(mSwitchMinWidth,thumbWidth * 2);  mSwitchPadding=0;  final ViewConfiguration config=ViewConfiguration.get(context);  mTouchSlop=config.getScaledTouchSlop();  mMinFlingVelocity=config.getScaledMinimumFlingVelocity();  refreshDrawableState();  setChecked(isChecked());}  }
class C{  private void startFileBasedMerge() throws CarbonSortKeyAndGroupByException {  try {    dataSorterAndWriterExecutorService.shutdown();    dataSorterAndWriterExecutorService.awaitTermination(2,TimeUnit.DAYS);  } catch (  InterruptedException e) {    throw new CarbonSortKeyAndGroupByException("Problem while shutdown the server ",e);  }}  }
class C{  public boolean isStarted(){  return writer != null || nrtReplicaNode != null || nrtPrimaryNode != null;}  }
class C{  public void addUpdateColumn(UpdateColumn updateColumn){  _updatedColumns.add(updateColumn);}  }
class C{  private void storeActivityList(){  SharedPreferences prefs=mContext.getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=prefs.edit();  editor.clear();  editor.putInt(PREF_NUM_SAVED_ENTRIES,mActivityList.size());  for (int i=0; i < mActivityList.size(); ++i) {    String currentActivityIndexPref=PREF_ACTIVITY_INDEX + i;    String currentWebappIdPref=PREF_WEBAPP_ID + i;    editor.putInt(currentActivityIndexPref,mActivityList.get(i).mActivityIndex);    editor.putString(currentWebappIdPref,mActivityList.get(i).mWebappId);  }  editor.apply();}  }
class C{  public static void copyURLToFile(URL source,File destination,int connectionTimeout,int readTimeout) throws IOException {  URLConnection connection=source.openConnection();  connection.setConnectTimeout(connectionTimeout);  connection.setReadTimeout(readTimeout);  InputStream input=connection.getInputStream();  copyInputStreamToFile(input,destination);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPHeal_HEAL_A_TO_ME(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201229,skillcaster,skilltarget,skillname);}  }
class C{  public QName(String prefix,String localpart,String rawname,String uri){  setValues(prefix,localpart,rawname,uri);}  }
class C{  public KendallsCorrelation(RealMatrix matrix){  correlationMatrix=computeCorrelationMatrix(matrix);}  }
class C{  public static WeightedAddress[] resizeArray(WeightedAddress[] array,int size){  WeightedAddress[] result=new WeightedAddress[size];  System.arraycopy(array,0,result,0,array.length);  for (int i=array.length; i < result.length; i++)   result[i]=new WeightedAddress();  return result;}  }
class C{  private void identifyTus(AnnotatedString input,LanguageResource langRes){  RegExp intPunctMatcher=langRes.getInternalTuMatcher();  boolean eosMode=false;  boolean abbrevMode=false;  char c=input.setIndex(0);  while (c != CharacterIterator.DONE) {    int tokenStart=input.getRunStart(CLASS_ANNO);    int tokenEnd=input.getRunLimit(CLASS_ANNO);    if (null != input.getAnnotation(CLASS_ANNO)) {      if (eosMode) {        if (langRes.isAncestor(PunctDescription.TERM_PUNCT,(String)input.getAnnotation(CLASS_ANNO)) || langRes.isAncestor(PunctDescription.TERM_PUNCT_P,(String)input.getAnnotation(CLASS_ANNO)) || langRes.isAncestor(PunctDescription.CLOSE_PUNCT,(String)input.getAnnotation(CLASS_ANNO))|| langRes.isAncestor(PunctDescription.CLOSE_BRACKET,(String)input.getAnnotation(CLASS_ANNO))) {        } else         if (Character.isLowerCase(c) || intPunctMatcher.matches(input.substring(input.getIndex(),input.getIndex() + 1))) {          eosMode=false;        } else {          input.annotate(BORDER_ANNO,TU_BORDER,tokenStart,tokenStart + 1);          eosMode=false;        }      } else       if (abbrevMode) {        String image=input.substring(tokenStart,tokenEnd);        if (langRes.getNonCapTerms().contains(image) || langRes.isAncestor(PunctDescription.OPEN_PUNCT,(String)input.getAnnotation(CLASS_ANNO))) {          input.annotate(BORDER_ANNO,TU_BORDER,tokenStart,tokenStart + 1);        }        abbrevMode=false;        continue;      } else {        if (langRes.isAncestor(PunctDescription.TERM_PUNCT,(String)input.getAnnotation(CLASS_ANNO)) || langRes.isAncestor(PunctDescription.TERM_PUNCT_P,(String)input.getAnnotation(CLASS_ANNO))) {          input.setIndex(tokenEnd);          if (null == input.getAnnotation(CLASS_ANNO) || langRes.isAncestor(PunctDescription.TERM_PUNCT,(String)input.getAnnotation(CLASS_ANNO)) || langRes.isAncestor(PunctDescription.TERM_PUNCT_P,(String)input.getAnnotation(CLASS_ANNO)) || langRes.isAncestor(PunctDescription.CLOSE_PUNCT,(String)input.getAnnotation(CLASS_ANNO)) || langRes.isAncestor(PunctDescription.CLOSE_BRACKET,(String)input.getAnnotation(CLASS_ANNO))) {            eosMode=true;          }        } else         if (langRes.isAncestor(AbbrevDescription.B_ABBREVIATION,(String)input.getAnnotation(CLASS_ANNO))) {          abbrevMode=true;        }      }      c=input.setIndex(tokenEnd);    } else {      if (this.isParagraphChange(input.substring(tokenStart,tokenEnd))) {        eosMode=false;        abbrevMode=false;        c=input.setIndex(tokenEnd);        if (c != CharacterIterator.DONE) {          input.annotate(BORDER_ANNO,P_BORDER,input.getIndex(),input.getIndex() + 1);        }      } else {        c=input.setIndex(tokenEnd);      }    }  }}  }
class C{  public static void expandOrdinal(String rawNumberString,WordRelation wordRelation,Item tokenItem){  String numberString=Utilities.deleteChar(rawNumberString,',');  expandNumber(numberString,wordRelation,tokenItem);  Item lastItem=wordRelation.getTail();  if (lastItem != null) {    FeatureSet featureSet=lastItem.getFeatures();    String lastNumber=featureSet.getString("name");    String ordinal=findMatchInArray(lastNumber,digit2num,ord2num);    if (ordinal == null) {      ordinal=findMatchInArray(lastNumber,digit2teen,ord2teen);    }    if (ordinal == null) {      ordinal=findMatchInArray(lastNumber,digit2enty,ord2enty);    }    if (lastNumber.equals("hundred")) {      ordinal="hundredth";    } else     if (lastNumber.equals("thousand")) {      ordinal="thousandth";    } else     if (lastNumber.equals("billion")) {      ordinal="billionth";    }    if (ordinal != null) {      wordRelation.setLastWord(ordinal);    }  }}  }
class C{  private void postProcessProperty(Property property,PropertyDescriptor pd,Method readMethod,Method writeMethod,Class<?> type,Type<?> referenceType,Map<String,Property> properties){  if (writeMethod == null && property != null) {    writeMethod=getWriteMethod(pd,type,property.getRawType());    if (writeMethod != null) {      processProperty(property.getName(),property.getRawType(),readMethod,writeMethod,type,referenceType,properties);    }  }}  }
class C{  public MultiFilterImplementor(MultiFilterModel model,MultiFilterView view){  this.model=model;  this.view=view;}  }
class C{  private String expect(Object spec){  if (!has(spec)) {    syntaxError(String.format("expected '%s' looking at: ",spec));    return null;  }  return next();}  }
class C{  @Override public int read(char ch[],int offset,int length) throws IOException {  int byteLength=length << ((fEncoding >= 4) ? 2 : 1);  if (byteLength > fBuffer.length) {    byteLength=fBuffer.length;  }  int count=fInputStream.read(fBuffer,0,byteLength);  if (count == -1)   return -1;  if (fEncoding >= 4) {    int numToRead=(4 - (count & 3) & 3);    for (int i=0; i < numToRead; i++) {      int charRead=fInputStream.read();      if (charRead == -1) {        for (int j=i; j < numToRead; j++) {          fBuffer[count + j]=0;        }        break;      }      fBuffer[count + i]=(byte)charRead;    }    count+=numToRead;  } else {    int numToRead=count & 1;    if (numToRead != 0) {      count++;      int charRead=fInputStream.read();      if (charRead == -1) {        fBuffer[count]=0;      } else {        fBuffer[count]=(byte)charRead;      }    }  }  int numChars=count >> ((fEncoding >= 4) ? 2 : 1);  int curPos=0;  for (int i=0; i < numChars; i++) {    int b0=fBuffer[curPos++] & 0xff;    int b1=fBuffer[curPos++] & 0xff;    if (fEncoding >= 4) {      int b2=fBuffer[curPos++] & 0xff;      int b3=fBuffer[curPos++] & 0xff;      if (fEncoding == UCS4BE) {        ch[offset + i]=(char)((b0 << 24) + (b1 << 16) + (b2 << 8)+ b3);      } else {        ch[offset + i]=(char)((b3 << 24) + (b2 << 16) + (b1 << 8)+ b0);      }    } else {      if (fEncoding == UCS2BE) {        ch[offset + i]=(char)((b0 << 8) + b1);      } else {        ch[offset + i]=(char)((b1 << 8) + b0);      }    }  }  return numChars;}  }
class C{  public static boolean isPubid(int c){  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;}  }
class C{  private void collectChanges(UpdateOpHelper helper){  for (  ModelState newItem : currentStateList) {    if (newItem.pair == null) {      continue;    }    if (newItem.pair.hashCode != newItem.hashCode) {      helper.update(newItem.position);    }  }}  }
class C{  public final Point readPos(){  final int x=readShort();  final int y=readShort();  return new Point(x,y);}  }
class C{  public static String nullSafeToString(double[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public void clear(){  m_openrows=null;  m_firstid=0;  m_curid=-1;}  }
class C{  public StatelessHibernateSpaceDataSourceConfigurer performOrderById(boolean performOrderById){  this.performOrderById=performOrderById;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SOUL_BOUND_ITEM_CANCELED(int value0){  return new SM_SYSTEM_MESSAGE(1300487,new DescriptionId(value0));}  }
class C{  public boolean containsKey(String key){  return parameters.containsKey(key);}  }
class C{  private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < TEXT_BASIC_SET_CHARS.length) {          char textChar=TEXT_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(textChar + 128));            upperShift=false;          } else {            result.append(textChar);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < TEXT_SHIFT2_SET_CHARS.length) {char textChar=TEXT_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(textChar + 128));  upperShift=false;} else {  result.append(textChar);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (cValue < TEXT_SHIFT3_SET_CHARS.length) {char textChar=TEXT_SHIFT3_SET_CHARS[cValue];if (upperShift) {result.append((char)(textChar + 128));upperShift=false;} else {result.append(textChar);}shift=0;} else {throw FormatException.getFormatInstance();}break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANNOT_USE_ITEM_TOO_LOW_LEVEL_MUST_BE_THIS_LEVEL(int value1,int value0){  return new SM_SYSTEM_MESSAGE(1300372,value0,new DescriptionId(value1));}  }
class C{  public static String toString(JSONArray names,JSONArray ja) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    JSONObject jo=ja.optJSONObject(i);    if (jo != null) {      sb.append(rowToString(jo.toJSONArray(names)));    }  }  return sb.toString();}  }
class C{  public String toString(){  return this.getClass().getName() + "[registrar=" + registrarID+ " "+ server+ "]";}  }
class C{  public RandomLayout(String group){  super(group);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){  if (mAuthClient != null)   mAuthClient.onActivityResult(requestCode,resultCode,data);}  }
class C{  private boolean newSeqNum(long currentNum,long oldNum){  if (oldNum == -1) {    return true;  } else   if (currentNum > oldNum) {    return true;  } else {    return false;  }}  }
class C{  public static void skipFastAText(FileIterator it,boolean isFastA){  if (isFastA) {    while (it.hasNext() && it.peekNextByte() != '>') {      it.next();    }  } else {    if (it.hasNext()) {      it.next();    }    if (it.hasNext()) {      it.next();    }    if (it.hasNext()) {      it.next();    }  }}  }
class C{  public static void assertEquals(FieldMatrix<? extends FieldElement<?>> expected,FieldMatrix<? extends FieldElement<?>> observed){  Assert.assertNotNull("Observed should not be null",observed);  if (expected.getColumnDimension() != observed.getColumnDimension() || expected.getRowDimension() != observed.getRowDimension()) {    StringBuilder messageBuffer=new StringBuilder();    messageBuffer.append("Observed has incorrect dimensions.");    messageBuffer.append("\nobserved is " + observed.getRowDimension() + " x "+ observed.getColumnDimension());    messageBuffer.append("\nexpected " + expected.getRowDimension() + " x "+ expected.getColumnDimension());    Assert.fail(messageBuffer.toString());  }  for (int i=0; i < expected.getRowDimension(); ++i) {    for (int j=0; j < expected.getColumnDimension(); ++j) {      FieldElement<?> eij=expected.getEntry(i,j);      FieldElement<?> oij=observed.getEntry(i,j);      Assert.assertEquals(eij,oij);    }  }}  }
class C{  static private boolean connectionNetwork(){  boolean result=false;  HttpURLConnection httpUrl=null;  try {    httpUrl=(HttpURLConnection)new URL("http://www.baidu.com").openConnection();    httpUrl.setConnectTimeout(TIMEOUT);    httpUrl.connect();    result=true;  } catch (  IOException e) {  } finally {    if (null != httpUrl) {      httpUrl.disconnect();    }    httpUrl=null;  }  return result;}  }
class C{  protected void createAccount(){  AccountManager am=AccountManager.get(getApplicationContext());  am.addAccount(MainApp.getAccountType(),null,null,null,this,new AccountCreationCallback(),new Handler());}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  ConstrainableProxyUtil.verifyConsistentConstraints(constraints,server,methodMappings);}  }
class C{  public static int apply(final Document doc) throws CanceledException {  final ProgressListener progress=doc.getProgressListener();  try {    progress.setTasks("Analyzing reads & alignments","Initialization");    System.err.println("Analyzing...");    if (doc.isUseIdentityFilter()) {      System.err.println("Using min percent-identity values for taxonomic assignment of 16S reads");    }    final int numberOfClassifications=doc.getActiveViewers().size();    final String[] cNames=doc.getActiveViewers().toArray(new String[numberOfClassifications]);    final int taxonomyIndex=Basic.getIndex(Classification.Taxonomy,cNames);    for (int i=0; i < cNames.length; i++) {      if (i != taxonomyIndex)       ClassificationManager.ensureTreeIsLoaded(cNames[i]);    }    final UpdateItemList updateList=new UpdateItemList(cNames.length);    final boolean doMatePairs=doc.isPairedReads() && doc.getMeganFile().isRMA6File();    if (doc.isPairedReads() && !doc.getMeganFile().isRMA6File())     System.err.println("WARNING: Not an RMA6 file, will ignore paired read information");    if (doMatePairs)     System.err.println("Using paired reads in taxonomic assignment...");    final IAssignmentAlgorithmCreator[] assignmentAlgorithmCreators=new IAssignmentAlgorithmCreator[numberOfClassifications];    for (int i=0; i < numberOfClassifications; i++) {      if (i == taxonomyIndex) {        if (doc.isWeightedLCA()) {          assignmentAlgorithmCreators[i]=new AssignmentUsingWeightedLCACreator(doc,cNames[taxonomyIndex],doc.getWeightedLCAPercent());        } else         assignmentAlgorithmCreators[i]=new AssignmentUsingLCAForTaxonomyCreator(cNames[i],doc.isUseIdentityFilter());      } else       if (ProgramProperties.get(cNames[i] + "UseLCA",false))       assignmentAlgorithmCreators[i]=new AssignmentUsingLCACreator(cNames[i]); else       assignmentAlgorithmCreators[i]=new AssignmentUsingBestHitCreator(cNames[i],doc.getMeganFile().getFileName());    }    progress.setSubtask("Processing alignments");    long numberOfReadsFound=0;    long numberOfMatches=0;    long numberOfReadsWithLowComplexity=0;    long numberOfReadsWithHits=0;    long numberAssignedViaMatePair=0;    final int[] countUnassigned=new int[numberOfClassifications];    final int[] countAssigned=new int[numberOfClassifications];    final IAssignmentAlgorithm[] assignmentAlgorithm=new IAssignmentAlgorithm[numberOfClassifications];    for (int i=0; i < numberOfClassifications; i++)     assignmentAlgorithm[i]=assignmentAlgorithmCreators[i].createAssignmentAlgorithm();    final Set<Integer>[] knownIds=new HashSet[numberOfClassifications];    for (int i=0; i < cNames.length; i++) {      knownIds[i]=new HashSet<>();      knownIds[i].addAll(ClassificationManager.get(cNames[i],true).getName2IdMap().getIds());    }    final IConnector connector=doc.getConnector();    final InputOutputReaderWriter mateReader=doMatePairs ? new InputOutputReaderWriter(doc.getMeganFile().getFileName(),"r") : null;    try (final IReadBlockIterator it=connector.getAllReadsIterator(0,10,false,true)){      progress.setMaximum(it.getMaximumProgress());      progress.setProgress(0);      final ReadBlockRMA6 mateReadBlock;      if (doMatePairs) {        try (RMA6File RMA6File=new RMA6File(doc.getMeganFile().getFileName(),"r")){          String[] matchClassificationNames=RMA6File.getHeaderSectionRMA6().getMatchClassNames();          mateReadBlock=new ReadBlockRMA6(doc.getBlastMode(),true,matchClassificationNames);        }       } else       mateReadBlock=null;      final Integer[] classIds=new Integer[numberOfClassifications];      final BitSet activeMatches=new BitSet();      final BitSet activeMatchesForMateTaxa=new BitSet();      while (it.hasNext()) {        IReadBlock readBlock=it.next();        if (progress.isUserCancelled())         break;        if (readBlock.getReadWeight() == 0)         readBlock.setReadWeight(1);        numberOfReadsFound+=readBlock.getReadWeight();        numberOfMatches+=readBlock.getNumberOfMatches();        final boolean hasLowComplexity=readBlock.getComplexity() > 0 && readBlock.getComplexity() + 0.01 < doc.getMinComplexity();        if (hasLowComplexity)         numberOfReadsWithLowComplexity+=readBlock.getReadWeight();        ActiveMatches.compute(doc.getMinScore(),doc.getTopPercent(),doc.getMaxExpected(),doc.getMinPercentIdentity(),readBlock,Classification.Taxonomy,activeMatches);        int taxId=0;        if (taxonomyIndex >= 0) {          if (doMatePairs && readBlock.getMateUId() > 0) {            mateReader.seek(readBlock.getMateUId());            mateReadBlock.read(mateReader,false,true,doc.getMinScore(),doc.getMaxExpected());            taxId=assignmentAlgorithm[taxonomyIndex].computeId(activeMatches,readBlock);            ActiveMatches.compute(doc.getMinScore(),doc.getTopPercent(),doc.getMaxExpected(),doc.getMinPercentIdentity(),mateReadBlock,Classification.Taxonomy,activeMatchesForMateTaxa);            int mateTaxId=assignmentAlgorithm[taxonomyIndex].computeId(activeMatchesForMateTaxa,mateReadBlock);            if (mateTaxId > 0) {              if (taxId <= 0) {                taxId=mateTaxId;                numberAssignedViaMatePair++;              } else {                int bothId=assignmentAlgorithm[taxonomyIndex].getLCA(taxId,mateTaxId);                if (bothId == taxId)                 taxId=mateTaxId; else                 if (bothId != mateTaxId)                 taxId=bothId;              }            }          } else {            taxId=assignmentAlgorithm[taxonomyIndex].computeId(activeMatches,readBlock);          }        }        if (activeMatches.cardinality() > 0)         numberOfReadsWithHits+=readBlock.getReadWeight();        for (int i=0; i < numberOfClassifications; i++) {          int id;          if (hasLowComplexity) {            id=IdMapper.LOW_COMPLEXITY_ID;          } else           if (i == taxonomyIndex) {            id=taxId;          } else {            ActiveMatches.compute(doc.getMinScore(),doc.getTopPercent(),doc.getMaxExpected(),doc.getMinPercentIdentity(),readBlock,cNames[i],activeMatches);            id=assignmentAlgorithm[i].computeId(activeMatches,readBlock);          }          if (!knownIds[i].contains(id))           id=IdMapper.UNASSIGNED_ID;          classIds[i]=id;          if (id == IdMapper.UNASSIGNED_ID)           countUnassigned[i]++; else           if (id > 0)           countAssigned[i]++;        }        updateList.addItem(readBlock.getUId(),readBlock.getReadWeight(),classIds);        progress.setProgress(it.getProgress());      }    } catch (    Exception ex) {      Basic.caught(ex);    } finally {      if (mateReader != null)       mateReader.close();    }    if (progress.isUserCancelled())     throw new CanceledException();    if (progress instanceof ProgressPercentage) {      ((ProgressPercentage)progress).reportTaskCompleted();    }    System.err.println(String.format("Total reads:   %,15d",numberOfReadsFound));    if (numberOfReadsWithLowComplexity > 0)     System.err.println(String.format("Low complexity:%,15d",numberOfReadsWithLowComplexity));    System.err.println(String.format("With hits:     %,15d ",numberOfReadsWithHits));    System.err.println(String.format("Alignments:    %,15d",numberOfMatches));    for (int i=0; i < countAssigned.length; i++) {      System.err.println(String.format("%-19s%,11d","Assig. " + cNames[i] + ":",countAssigned[i]));    }    if (numberAssignedViaMatePair > 0) {      System.err.println(String.format("Tax. ass. by mate:%,12d",numberAssignedViaMatePair));    }    progress.setCancelable(false);    doc.setNumberReads(numberOfReadsFound);    if (doc.getMinSupportPercent() > 0) {      doc.setMinSupport((int)Math.max(1,(doc.getMinSupportPercent() / 100.0) * (numberOfReadsWithHits + numberAssignedViaMatePair)));      System.err.println("MinSupport set to: " + doc.getMinSupport());    }    for (int i=0; i < numberOfClassifications; i++) {      final String cName=cNames[i];      if (ProgramProperties.get(cName + "UseLCA",cName.equals(Classification.Taxonomy)) && (doc.getMinSupport() > 0 || ClassificationManager.get(cName,false).getIdMapper().getDisabledIds().size() > 0)) {        progress.setSubtask("Applying min-support & disabled filter to " + cName + "...");        final MinSupportFilter minSupportFilter=new MinSupportFilter(cName,updateList.getClassIdToSizeMap(i),doc.getMinSupport(),progress);        final Map<Integer,Integer> changes=minSupportFilter.apply();        for (        Integer srcId : changes.keySet()) {          updateList.appendClass(i,srcId,changes.get(srcId));        }        System.err.println(String.format("Min-supp. changes:%,12d",changes.size()));      }    }    doc.getProgressListener().setSubtask("Writing classification tables");    connector.updateClassifications(cNames,updateList,progress);    connector.setNumberOfReads((int)doc.getNumberOfReads());    progress.setSubtask("Syncing");    SyncArchiveAndDataTable.syncRecomputedArchive2Summary(doc.getTitle(),"LCA",doc.getBlastMode(),doc.getParameterString(),connector,doc.getDataTable(),(int)doc.getAdditionalReads());    if (progress instanceof ProgressPercentage)     ((ProgressPercentage)progress).reportTaskCompleted();    doc.setDirty(false);    for (    String cName : cNames) {      System.err.println(String.format("Class. %-13s%,10d",cName + ":",connector.getClassificationSize(cName)));    }    return (int)doc.getDataTable().getTotalReads();  } catch (  IOException ex) {    Basic.caught(ex);    NotificationsInSwing.showInternalError("Data Processor failed: " + ex.getMessage());  }  return 0;}  }
class C{  @SuppressWarnings("unused") public SelectionBuilder reset(){  mTable=null;  mSelection.setLength(0);  mSelectionArgs.clear();  return this;}  }
class C{  public static Cleaner create(Object ob,Runnable thunk){  if (thunk == null)   return null;  return add(new Cleaner(ob,thunk));}  }
class C{  public static Color toColour(String hexString){  Color colour=null;  if ((hexString != null) && (hexString.length() == 7) && (hexString.startsWith("#"))) {    String redSubString=hexString.substring(1,3);    int red=Integer.parseInt(redSubString,16);    String greeSubString=hexString.substring(3,5);    int green=Integer.parseInt(greeSubString,16);    String blueSubString=hexString.substring(5,7);    int blue=Integer.parseInt(blueSubString,16);    colour=new Color(red,green,blue);  }  return colour;}  }
class C{  public static void childElements(SimpleMethod method,Element element,String... validChildElementNames) throws ValidationException {  Set<String> validNames=new HashSet<String>();  for (  String name : validChildElementNames) {    validNames.add(name);  }  Node node=element.getFirstChild();  while (node != null) {    if (node.getNodeType() == Node.ELEMENT_NODE) {      Element childElement=(Element)node;      if (!validNames.contains(childElement.getTagName())) {        handleError("Child element <" + childElement.getTagName() + "> is not valid.",method,element);      }    }    node=node.getNextSibling();  }}  }
class C{  private static void moveBoundariesIntoParagraphs(Document rawmaryxml){  if (rawmaryxml == null) {    throw new NullPointerException("Received null rawmaryxml");  }  TreeWalker paraTW=((DocumentTraversal)rawmaryxml).createTreeWalker(rawmaryxml.getDocumentElement(),NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.PARAGRAPH),true);  TreeWalker tw=((DocumentTraversal)rawmaryxml).createTreeWalker(rawmaryxml.getDocumentElement(),NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.PARAGRAPH,MaryXML.BOUNDARY),true);  Element firstParagraph=(Element)paraTW.nextNode();  if (firstParagraph == null) {    throw new NullPointerException("Document does not have a paragraph");  }  tw.setCurrentNode(firstParagraph);  Element boundary=null;  while ((boundary=(Element)tw.previousNode()) != null) {    assert boundary.getTagName().equals(MaryXML.BOUNDARY);    firstParagraph.insertBefore(boundary,firstParagraph.getFirstChild());    tw.setCurrentNode(firstParagraph);  }  tw.setCurrentNode(firstParagraph);  Element paragraph=firstParagraph;  Element current=null;  while ((current=(Element)tw.nextNode()) != null) {    if (current.getTagName().equals(MaryXML.PARAGRAPH)) {      paragraph=current;    } else {      if (!DomUtils.hasAncestor(current,MaryXML.PARAGRAPH)) {        paragraph.appendChild(current);      }    }  }}  }
class C{  public int hashCode(){  int hash=0;  for (int i=permissions.length; --i >= 0; ) {    hash+=permissions[i].hashCode();  }  return hash;}  }
class C{  public void apply(Switch sw){  ((RefSwitch)sw).caseParameterRef(this);}  }
class C{  public static final int binarySearch(Object[] a,Object key,Comparator cp){  int x1=0;  int x2=a.length;  int i=x2 / 2, c;  while (x1 < x2) {    c=cp.compare(a[i],key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public final String join(Object first,Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  public static boolean isCalledFromJRuby(){  StackTraceElement[] stackTraceElements=Thread.currentThread().getStackTrace();  int maxLookBack=Math.min(8,stackTraceElements.length);  for (int i=0; i < maxLookBack; i++) {    if (stackTraceElements[i].getClassName().startsWith("org.jruby.javasupport.JavaMethod")) {      return true;    }  }  return false;}  }
class C{  public LevenbergMarquardtOptimizer withOrthoTolerance(double newOrthoTolerance){  return new LevenbergMarquardtOptimizer(initialStepBoundFactor,costRelativeTolerance,parRelativeTolerance,newOrthoTolerance,qrRankingThreshold);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"REAL_WEATHER\" ("+ "\"AREAID\" TEXT,"+ "\"AREA_NAME\" TEXT,"+ "\"WEATHER_CONDITION\" TEXT,"+ "\"FX\" TEXT,"+ "\"FJ\" TEXT,"+ "\"TEMP\" INTEGER,"+ "\"FEELTEMP\" INTEGER,"+ "\"SHIDU\" INTEGER,"+ "\"SUNRISE\" TEXT,"+ "\"SUNDOWN\" TEXT,"+ "\"LAST_UPDATE\" INTEGER);");}  }
class C{  public ReadBlockRMA2Formatter(String format){  this.format=format;  decode(format);}  }
class C{  @Override public void onConnected(Bundle connectionHint){  Log.i(TAG,"onConnected: Is connected to Google Play Services");}  }
class C{  private void testClass(FilterConfigInterface objUnderTest){  assertNotNull(objUnderTest.getFilterConfiguration());  assertNotNull(objUnderTest.createFilter());  assertNull(objUnderTest.createLogicFilter(null));  BinaryTemporalOperatorImpl filter=(BinaryTemporalOperatorImpl)objUnderTest.createFilter(null);  assertNull(filter.getExpression1());  assertNull(filter.getExpression2());  List<Expression> parameterList=new ArrayList<Expression>();  parameterList.add(ff.literal("expr1"));  filter=(BinaryTemporalOperatorImpl)objUnderTest.createFilter(parameterList);  assertNull(filter.getExpression1());  assertNull(filter.getExpression2());  parameterList.add(ff.literal("expr2"));  filter=(BinaryTemporalOperatorImpl)objUnderTest.createFilter(parameterList);  assertNotNull(filter.getExpression1());  assertNotNull(filter.getExpression2());  System.out.println(filter.toString());}  }
class C{  public void pause(){  if (mHandlerRunnable == null)   return;  mHandler.removeCallbacks(mHandlerRunnable);  mHandlerRunnable=null;}  }
class C{  public GSByteArrayOutputStream(int capacity){  if (capacity < 0)   throw new IllegalArgumentException("Negative initial size: " + capacity);  _buffer=new byte[capacity];}  }
class C{  public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent,List<Integer> skipIds){  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,skipIds);}  }
class C{  private Typeface cacheFont(String fontPath){  Typeface cached=mTypefaceMap.get(fontPath);  if (cached == null) {    cached=Typeface.createFromAsset(mAssetManager,fontPath);    mTypefaceMap.put(fontPath,cached);  }  return cached;}  }
class C{  @Override public void screenshotEntry(ScreenshotEntry screenshotLogEntry){  throw new UnsupportedOperationException();}  }
class C{  public static boolean dispatchCommand(CommandSender sender,String commandLine) throws CommandException {  return server.dispatchCommand(sender,commandLine);}  }
class C{  public DictionaryColumnUniqueIdentifier(CarbonTableIdentifier carbonTableIdentifier,ColumnIdentifier columnIdentifier){  this.carbonTableIdentifier=carbonTableIdentifier;  this.columnIdentifier=columnIdentifier;}  }
class C{  public ResourceTemplateParameterContext addResourceParameter(ResourceKey resourceKey,ResourceUUID uuid,ResourceContextParameters paramName,String paramValue){  initResource(resourceKey,uuid);  doAddParameter(resourceKey,uuid,paramName,paramValue);  return this;}  }
class C{  protected List<String> permissions(){  return new ArrayList<>();}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public Song next(){switch (playMode) {case LOOP:case LIST:case SINGLE:    int newIndex=playingIndex + 1;  if (newIndex >= songs.size()) {    newIndex=0;  }playingIndex=newIndex;break;case SHUFFLE:playingIndex=randomPlayIndex();break;}return songs.get(playingIndex);}  }
class C{  public static void registerStandardConfigAspects(Model model){  model.registerConfigAspect(DocumentationConfigAspect.create(model));  model.registerConfigAspect(ContextConfigAspect.create(model));  model.registerConfigAspect(HttpConfigAspect.create(model));  model.registerConfigAspect(VersionConfigAspect.create(model));  model.registerConfigAspect(NamingConfigAspect.create(model));  model.registerConfigAspect(SystemParameterConfigAspect.create(model));  model.registerConfigAspect(UsageConfigAspect.create(model));  model.registerConfigAspect(ControlConfigAspect.create(model));  model.registerConfigAspect(AuthConfigAspect.create(model));  model.registerConfigAspect(ServiceControlConfigAspect.create(model));  model.registerConfigAspect(MixinConfigAspect.create(model));}  }
class C{  public PhotosImplementor(PhotosModel model,PhotosView view){  this.model=model;  this.view=view;}  }
class C{  public static boolean areInSamePackage(String d1,String d2){  String packageName1=Descriptor.getPackageName(d1);  String packageName2=Descriptor.getPackageName(d2);  return packageName1 == null ? packageName2 == null : packageName1.equals(packageName2);}  }
class C{  public TakeModifiers add(TakeModifiers modifiers){  return createIfNeeded(super.add(modifiers));}  }
class C{  public static String validateString(String string){  if (string == null) {    return "";  } else {    return string;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Aura_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200305,skillname);}  }
class C{  private static void checkPermissions(Permissions perms){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    Enumeration en=perms.elements();    while (en.hasMoreElements()) {      sm.checkPermission((Permission)en.nextElement());    }  }}  }
class C{  @Override public void onUIRefreshComplete(PtrFrameLayout frame){  mDrawable.stop();}  }
class C{  public RemoteOperationResult execute(OwnCloudClient client,FileDataStorageManager storageManager){  if (storageManager == null)   throw new IllegalArgumentException("Trying to execute a sync operation with a " + "NULL storage manager");  mStorageManager=storageManager;  return super.execute(client);}  }
class C{  public void addedEdge(Edge e){  TreeMap hOutVertices=(TreeMap)Cache.get(e.getVertexA().getLabel());  if (hOutVertices == null)   return; else   hOutVertices.put(e.getVertexB().getLabel(),e);}  }
class C{  @AfterClass public void cleanup(){  toCleanUp.addAll(batchMutExExperiments);}  }
class C{  @Override public int read(){  return -1;}  }
