class C{  public FastAdapterBottomSheetDialog<Item> withOnLongClickListener(FastAdapter.OnLongClickListener<Item> onLongClickListener){  this.mFastItemAdapter.withOnLongClickListener(onLongClickListener);  return this;}  }
class C{  public CloudDebugHistoricalSnapshots(@NotNull CloudDebugProcessHandler processHandler){  super(new BorderLayout());  table=new CloudDebuggerTable();  configureToolbar();  process=processHandler.getProcess();  process.getXDebugSession().addSessionListener(this);  process.addListener(this);}  }
class C{  public boolean isUnknown(){  return (id == -1);}  }
class C{  public static Map<String,Object> calculateProductPrice(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Map<String,Object> result=FastMap.newInstance();  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  GenericValue product=(GenericValue)context.get("product");  String productId=product.getString("productId");  String prodCatalogId=(String)context.get("prodCatalogId");  String webSiteId=(String)context.get("webSiteId");  String checkIncludeVat=(String)context.get("checkIncludeVat");  String surveyResponseId=(String)context.get("surveyResponseId");  Map<String,Object> customAttributes=UtilGenerics.checkMap(context.get("customAttributes"));  String findAllQuantityPricesStr=(String)context.get("findAllQuantityPrices");  boolean findAllQuantityPrices="Y".equals(findAllQuantityPricesStr);  boolean optimizeForLargeRuleSet="Y".equals(context.get("optimizeForLargeRuleSet"));  String agreementId=(String)context.get("agreementId");  String productStoreId=(String)context.get("productStoreId");  String productStoreGroupId=(String)context.get("productStoreGroupId");  Locale locale=(Locale)context.get("locale");  GenericValue productStore=null;  try {    productStore=EntityQuery.use(delegator).from("ProductStore").where("productStoreId",productStoreId).cache().queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Error getting product store info from the database while calculating price" + e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveProductStore",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (UtilValidate.isEmpty(productStoreGroupId)) {    if (productStore != null) {      try {        if (UtilValidate.isNotEmpty(productStore.getString("primaryStoreGroupId"))) {          productStoreGroupId=productStore.getString("primaryStoreGroupId");        } else {          List<GenericValue> productStoreGroupMemberList=EntityQuery.use(delegator).from("ProductStoreGroupMember").where("productStoreId",productStoreId).orderBy("sequenceNum","-fromDate").cache(true).queryList();          productStoreGroupMemberList=EntityUtil.filterByDate(productStoreGroupMemberList,true);          if (productStoreGroupMemberList.size() > 0) {            GenericValue productStoreGroupMember=EntityUtil.getFirst(productStoreGroupMemberList);            productStoreGroupId=productStoreGroupMember.getString("productStoreGroupId");          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,"Error getting product store info from the database while calculating price" + e.toString(),module);        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveProductStore",UtilMisc.toMap("errorString",e.toString()),locale));      }    }    if (UtilValidate.isEmpty(productStoreGroupId)) {      productStoreGroupId="_NA_";    }  }  String currencyDefaultUomId=(String)context.get("currencyUomId");  String currencyUomIdTo=(String)context.get("currencyUomIdTo");  if (UtilValidate.isEmpty(currencyDefaultUomId)) {    currencyDefaultUomId=EntityUtilProperties.getPropertyValue("general","currency.uom.id.default","USD",delegator);  }  String productPricePurposeId=(String)context.get("productPricePurposeId");  if (UtilValidate.isEmpty(productPricePurposeId)) {    productPricePurposeId="PURCHASE";  }  String termUomId=(String)context.get("termUomId");  String virtualProductId=null;  if ("Y".equals(product.getString("isVariant"))) {    try {      virtualProductId=ProductWorker.getVariantVirtualId(product);    } catch (    GenericEntityException e) {      Debug.logError(e,"Error getting virtual product id from the database while calculating price" + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveVirtualProductId",UtilMisc.toMap("errorString",e.toString()),locale));    }  }  List<GenericValue> virtualProductPrices=null;  if (virtualProductId != null) {    try {      virtualProductPrices=EntityQuery.use(delegator).from("ProductPrice").where("productId",virtualProductId,"currencyUomId",currencyDefaultUomId,"productStoreGroupId",productStoreGroupId).orderBy("-fromDate").cache(true).queryList();    } catch (    GenericEntityException e) {      Debug.logError(e,"An error occurred while getting the product prices",module);    }    virtualProductPrices=EntityUtil.filterByDate(virtualProductPrices,true);  }  String partyId=(String)context.get("partyId");  if (UtilValidate.isEmpty(partyId) && context.get("userLogin") != null) {    GenericValue userLogin=(GenericValue)context.get("userLogin");    partyId=userLogin.getString("partyId");  }  if (UtilValidate.isEmpty(partyId) && context.get("autoUserLogin") != null) {    GenericValue userLogin=(GenericValue)context.get("autoUserLogin");    partyId=userLogin.getString("partyId");  }  BigDecimal quantity=(BigDecimal)context.get("quantity");  if (quantity == null)   quantity=BigDecimal.ONE;  BigDecimal amount=(BigDecimal)context.get("amount");  List<EntityCondition> productPriceEcList=FastList.newInstance();  productPriceEcList.add(EntityCondition.makeCondition("productId",EntityOperator.EQUALS,productId));  if ("PURCHASE".equals(productPricePurposeId)) {    productPriceEcList.add(EntityCondition.makeCondition(EntityCondition.makeCondition("productPricePurposeId",EntityOperator.EQUALS,productPricePurposeId),EntityOperator.OR,EntityCondition.makeCondition("productPricePurposeId",EntityOperator.EQUALS,null)));  } else {    productPriceEcList.add(EntityCondition.makeCondition("productPricePurposeId",EntityOperator.EQUALS,productPricePurposeId));  }  productPriceEcList.add(EntityCondition.makeCondition("currencyUomId",EntityOperator.EQUALS,currencyDefaultUomId));  productPriceEcList.add(EntityCondition.makeCondition("productStoreGroupId",EntityOperator.EQUALS,productStoreGroupId));  if (UtilValidate.isNotEmpty(termUomId)) {    productPriceEcList.add(EntityCondition.makeCondition("termUomId",EntityOperator.EQUALS,termUomId));  }  EntityCondition productPriceEc=EntityCondition.makeCondition(productPriceEcList,EntityOperator.AND);  List<GenericValue> productPrices=null;  try {    productPrices=EntityQuery.use(delegator).from("ProductPrice").where(productPriceEc).orderBy("-fromDate").cache(true).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,"An error occurred while getting the product prices",module);  }  productPrices=EntityUtil.filterByDate(productPrices,true);  GenericValue listPriceValue=getPriceValueForType("LIST_PRICE",productPrices,virtualProductPrices);  GenericValue defaultPriceValue=getPriceValueForType("DEFAULT_PRICE",productPrices,virtualProductPrices);  if (UtilValidate.isNotEmpty(agreementId)) {    try {      GenericValue agreementPriceValue=EntityQuery.use(delegator).from("AgreementItemAndProductAppl").where("agreementId",agreementId,"productId",productId,"currencyUomId",currencyDefaultUomId).queryFirst();      if (agreementPriceValue != null && agreementPriceValue.get("price") != null) {        defaultPriceValue=agreementPriceValue;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error getting agreement info from the database while calculating price" + e.toString(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrieveAgreementInfo",UtilMisc.toMap("errorString",e.toString()),locale));    }  }  GenericValue competitivePriceValue=getPriceValueForType("COMPETITIVE_PRICE",productPrices,virtualProductPrices);  GenericValue averageCostValue=getPriceValueForType("AVERAGE_COST",productPrices,virtualProductPrices);  GenericValue promoPriceValue=getPriceValueForType("PROMO_PRICE",productPrices,virtualProductPrices);  GenericValue minimumPriceValue=getPriceValueForType("MINIMUM_PRICE",productPrices,virtualProductPrices);  GenericValue maximumPriceValue=getPriceValueForType("MAXIMUM_PRICE",productPrices,virtualProductPrices);  GenericValue wholesalePriceValue=getPriceValueForType("WHOLESALE_PRICE",productPrices,virtualProductPrices);  GenericValue specialPromoPriceValue=getPriceValueForType("SPECIAL_PROMO_PRICE",productPrices,virtualProductPrices);  if ("Y".equals(product.getString("isVirtual"))) {    if (defaultPriceValue == null) {      try {        List<GenericValue> variantAssocList=EntityQuery.use(delegator).from("ProductAssoc").where("productId",product.get("productId"),"productAssocTypeId","PRODUCT_VARIANT").orderBy("-fromDate").cache(true).filterByDate().queryList();        BigDecimal minDefaultPrice=null;        List<GenericValue> variantProductPrices=null;        for (        GenericValue variantAssoc : variantAssocList) {          String curVariantProductId=variantAssoc.getString("productIdTo");          List<GenericValue> curVariantPriceList=EntityQuery.use(delegator).from("ProductPrice").where("productId",curVariantProductId).orderBy("-fromDate").cache(true).filterByDate(nowTimestamp).queryList();          List<GenericValue> tempDefaultPriceList=EntityUtil.filterByAnd(curVariantPriceList,UtilMisc.toMap("productPriceTypeId","DEFAULT_PRICE"));          GenericValue curDefaultPriceValue=EntityUtil.getFirst(tempDefaultPriceList);          if (curDefaultPriceValue != null) {            BigDecimal curDefaultPrice=curDefaultPriceValue.getBigDecimal("price");            if (minDefaultPrice == null || curDefaultPrice.compareTo(minDefaultPrice) < 0) {              GenericValue curVariantProduct=EntityQuery.use(delegator).from("Product").where("productId",curVariantProductId).cache().queryOne();              if (curVariantProduct != null) {                Timestamp salesDiscontinuationDate=curVariantProduct.getTimestamp("salesDiscontinuationDate");                if (salesDiscontinuationDate == null || salesDiscontinuationDate.after(nowTimestamp)) {                  minDefaultPrice=curDefaultPrice;                  variantProductPrices=curVariantPriceList;                }              }            }          }        }        if (variantProductPrices != null) {          if (listPriceValue == null) {            listPriceValue=getPriceValueForType("LIST_PRICE",variantProductPrices,null);          }          if (defaultPriceValue == null) {            defaultPriceValue=getPriceValueForType("DEFAULT_PRICE",variantProductPrices,null);          }          if (competitivePriceValue == null) {            competitivePriceValue=getPriceValueForType("COMPETITIVE_PRICE",variantProductPrices,null);          }          if (averageCostValue == null) {            averageCostValue=getPriceValueForType("AVERAGE_COST",variantProductPrices,null);          }          if (promoPriceValue == null) {            promoPriceValue=getPriceValueForType("PROMO_PRICE",variantProductPrices,null);          }          if (minimumPriceValue == null) {            minimumPriceValue=getPriceValueForType("MINIMUM_PRICE",variantProductPrices,null);          }          if (maximumPriceValue == null) {            maximumPriceValue=getPriceValueForType("MAXIMUM_PRICE",variantProductPrices,null);          }          if (wholesalePriceValue == null) {            wholesalePriceValue=getPriceValueForType("WHOLESALE_PRICE",variantProductPrices,null);          }          if (specialPromoPriceValue == null) {            specialPromoPriceValue=getPriceValueForType("SPECIAL_PROMO_PRICE",variantProductPrices,null);          }        }      } catch (      GenericEntityException e) {        Debug.logError(e,"An error occurred while getting the product prices",module);      }    }  }  BigDecimal promoPrice=BigDecimal.ZERO;  if (promoPriceValue != null && promoPriceValue.get("price") != null) {    promoPrice=promoPriceValue.getBigDecimal("price");  }  BigDecimal wholesalePrice=BigDecimal.ZERO;  if (wholesalePriceValue != null && wholesalePriceValue.get("price") != null) {    wholesalePrice=wholesalePriceValue.getBigDecimal("price");  }  boolean validPriceFound=false;  BigDecimal defaultPrice=BigDecimal.ZERO;  List<GenericValue> orderItemPriceInfos=FastList.newInstance();  if (defaultPriceValue != null) {    if ("ProductPrice".equals(defaultPriceValue.getEntityName()) && UtilValidate.isNotEmpty(defaultPriceValue.getString("customPriceCalcService"))) {      GenericValue customMethod=null;      try {        customMethod=defaultPriceValue.getRelatedOne("CustomMethod",false);      } catch (      GenericEntityException gee) {        Debug.logError(gee,"An error occurred while getting the customPriceCalcService",module);      }      if (UtilValidate.isNotEmpty(customMethod) && UtilValidate.isNotEmpty(customMethod.getString("customMethodName"))) {        Map<String,Object> inMap=UtilMisc.toMap("userLogin",context.get("userLogin"),"product",product);        inMap.put("initialPrice",defaultPriceValue.getBigDecimal("price"));        inMap.put("currencyUomId",currencyDefaultUomId);        inMap.put("quantity",quantity);        inMap.put("amount",amount);        if (UtilValidate.isNotEmpty(surveyResponseId)) {          inMap.put("surveyResponseId",surveyResponseId);        }        if (UtilValidate.isNotEmpty(customAttributes)) {          inMap.put("customAttributes",customAttributes);        }        try {          Map<String,Object> outMap=dispatcher.runSync(customMethod.getString("customMethodName"),inMap);          if (!ServiceUtil.isError(outMap)) {            BigDecimal calculatedDefaultPrice=(BigDecimal)outMap.get("price");            orderItemPriceInfos=UtilGenerics.checkList(outMap.get("orderItemPriceInfos"));            if (UtilValidate.isNotEmpty(calculatedDefaultPrice)) {              defaultPrice=calculatedDefaultPrice;              validPriceFound=true;            }          }        } catch (        GenericServiceException gse) {          Debug.logError(gse,"An error occurred while running the customPriceCalcService [" + customMethod.getString("customMethodName") + "]",module);        }      }    }    if (!validPriceFound && defaultPriceValue.get("price") != null) {      defaultPrice=defaultPriceValue.getBigDecimal("price");      validPriceFound=true;    }  }  BigDecimal listPrice=listPriceValue != null ? listPriceValue.getBigDecimal("price") : null;  if (listPrice == null) {    BigDecimal maxSellPrice=maximumPriceValue != null ? maximumPriceValue.getBigDecimal("price") : null;    if (maxSellPrice != null && defaultPrice.compareTo(maxSellPrice) > 0) {      defaultPrice=maxSellPrice;    }    BigDecimal minSellPrice=minimumPriceValue != null ? minimumPriceValue.getBigDecimal("price") : null;    if (minSellPrice != null && defaultPrice.compareTo(minSellPrice) < 0) {      defaultPrice=minSellPrice;      validPriceFound=true;    }    result.put("basePrice",defaultPrice);    result.put("price",defaultPrice);    result.put("defaultPrice",defaultPrice);    result.put("competitivePrice",competitivePriceValue != null ? competitivePriceValue.getBigDecimal("price") : null);    result.put("averageCost",averageCostValue != null ? averageCostValue.getBigDecimal("price") : null);    result.put("promoPrice",promoPriceValue != null ? promoPriceValue.getBigDecimal("price") : null);    result.put("specialPromoPrice",specialPromoPriceValue != null ? specialPromoPriceValue.getBigDecimal("price") : null);    result.put("validPriceFound",Boolean.valueOf(validPriceFound));    result.put("isSale",Boolean.FALSE);    result.put("orderItemPriceInfos",orderItemPriceInfos);    Map<String,Object> errorResult=addGeneralResults(result,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);    if (errorResult != null)     return errorResult;  } else {    try {      List<GenericValue> allProductPriceRules=makeProducePriceRuleList(delegator,optimizeForLargeRuleSet,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,currencyDefaultUomId);      allProductPriceRules=EntityUtil.filterByDate(allProductPriceRules,true);      List<GenericValue> quantityProductPriceRules=null;      List<GenericValue> nonQuantityProductPriceRules=null;      if (findAllQuantityPrices) {        quantityProductPriceRules=FastList.newInstance();        nonQuantityProductPriceRules=FastList.newInstance();        for (        GenericValue productPriceRule : allProductPriceRules) {          List<GenericValue> productPriceCondList=EntityQuery.use(delegator).from("ProductPriceCond").where("productPriceRuleId",productPriceRule.get("productPriceRuleId")).cache(true).queryList();          boolean foundQuantityInputParam=false;          boolean allExceptQuantTrue=true;          for (          GenericValue productPriceCond : productPriceCondList) {            if ("PRIP_QUANTITY".equals(productPriceCond.getString("inputParamEnumId"))) {              foundQuantityInputParam=true;            } else {              if (!checkPriceCondition(productPriceCond,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,quantity,listPrice,currencyDefaultUomId,delegator,nowTimestamp)) {                allExceptQuantTrue=false;              }            }          }          if (foundQuantityInputParam && allExceptQuantTrue) {            quantityProductPriceRules.add(productPriceRule);          } else {            nonQuantityProductPriceRules.add(productPriceRule);          }        }      }      if (findAllQuantityPrices) {        List<Map<String,Object>> allQuantityPrices=FastList.newInstance();        for (        GenericValue quantityProductPriceRule : quantityProductPriceRules) {          List<GenericValue> ruleListToUse=FastList.newInstance();          ruleListToUse.add(quantityProductPriceRule);          ruleListToUse.addAll(nonQuantityProductPriceRules);          Map<String,Object> quantCalcResults=calcPriceResultFromRules(ruleListToUse,listPrice,defaultPrice,promoPrice,wholesalePrice,maximumPriceValue,minimumPriceValue,validPriceFound,averageCostValue,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,null,currencyDefaultUomId,delegator,nowTimestamp,locale);          Map<String,Object> quantErrorResult=addGeneralResults(quantCalcResults,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);          if (quantErrorResult != null)           return quantErrorResult;          quantCalcResults.put("quantityProductPriceRule",quantityProductPriceRule);          allQuantityPrices.add(quantCalcResults);        }        result.put("allQuantityPrices",allQuantityPrices);        Map<String,Object> calcResults=calcPriceResultFromRules(allProductPriceRules,listPrice,defaultPrice,promoPrice,wholesalePrice,maximumPriceValue,minimumPriceValue,validPriceFound,averageCostValue,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,BigDecimal.ONE,currencyDefaultUomId,delegator,nowTimestamp,locale);        result.putAll(calcResults);        List<GenericValue> orderItemPriceInfosFromRule=UtilGenerics.checkList(calcResults.get("orderItemPriceInfos"));        if (UtilValidate.isNotEmpty(orderItemPriceInfosFromRule)) {          orderItemPriceInfos.addAll(orderItemPriceInfosFromRule);        }        result.put("orderItemPriceInfos",orderItemPriceInfos);        Map<String,Object> errorResult=addGeneralResults(result,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);        if (errorResult != null)         return errorResult;      } else {        Map<String,Object> calcResults=calcPriceResultFromRules(allProductPriceRules,listPrice,defaultPrice,promoPrice,wholesalePrice,maximumPriceValue,minimumPriceValue,validPriceFound,averageCostValue,productId,virtualProductId,prodCatalogId,productStoreGroupId,webSiteId,partyId,quantity,currencyDefaultUomId,delegator,nowTimestamp,locale);        result.putAll(calcResults);        List<GenericValue> orderItemPriceInfosFromRule=UtilGenerics.checkList(calcResults.get("orderItemPriceInfos"));        if (UtilValidate.isNotEmpty(orderItemPriceInfosFromRule)) {          orderItemPriceInfos.addAll(orderItemPriceInfosFromRule);        }        result.put("orderItemPriceInfos",orderItemPriceInfos);        Map<String,Object> errorResult=addGeneralResults(result,competitivePriceValue,specialPromoPriceValue,productStore,checkIncludeVat,currencyDefaultUomId,productId,quantity,partyId,dispatcher,locale);        if (errorResult != null)         return errorResult;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error getting rules from the database while calculating price",module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPriceCannotRetrievePriceRules",UtilMisc.toMap("errorString",e.toString()),locale));    }  }  if ("true".equals(EntityUtilProperties.getPropertyValue("catalog.properties","convertProductPriceCurrency",delegator))) {    if (UtilValidate.isNotEmpty(currencyDefaultUomId) && UtilValidate.isNotEmpty(currencyUomIdTo) && !currencyDefaultUomId.equals(currencyUomIdTo)) {      if (UtilValidate.isNotEmpty(result)) {        Map<String,Object> convertPriceMap=FastMap.newInstance();        for (        Map.Entry<String,Object> entry : result.entrySet()) {          BigDecimal tempPrice=BigDecimal.ZERO;          if (entry.getKey() == "basePrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "price")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "defaultPrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "competitivePrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "averageCost")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "promoPrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "specialPromoPrice")           tempPrice=(BigDecimal)entry.getValue(); else           if (entry.getKey() == "listPrice")           tempPrice=(BigDecimal)entry.getValue();          if (tempPrice != null && tempPrice != BigDecimal.ZERO) {            Map<String,Object> priceResults=FastMap.newInstance();            try {              priceResults=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",currencyDefaultUomId,"uomIdTo",currencyUomIdTo,"originalValue",tempPrice,"defaultDecimalScale",Long.valueOf(2),"defaultRoundingMode","HalfUp"));              if (ServiceUtil.isError(priceResults) || (priceResults.get("convertedValue") == null)) {                Debug.logWarning("Unable to convert " + entry.getKey() + " for product  "+ productId,module);              }            } catch (            GenericServiceException e) {              Debug.logError(e,module);            }            convertPriceMap.put(entry.getKey(),priceResults.get("convertedValue"));          } else {            convertPriceMap.put(entry.getKey(),entry.getValue());          }        }        if (UtilValidate.isNotEmpty(convertPriceMap)) {          convertPriceMap.put("currencyUsed",currencyUomIdTo);          result=convertPriceMap;        }      }    }  }  return result;}  }
class C{  public boolean rejectIt(){  log.info("rejectIt - " + toString());  setIsApproved(false);  return true;}  }
class C{  public LongMap(LongMap<? extends V> map){  this(map.capacity,map.loadFactor);  stashSize=map.stashSize;  System.arraycopy(map.keyTable,0,keyTable,0,map.keyTable.length);  System.arraycopy(map.valueTable,0,valueTable,0,map.valueTable.length);  size=map.size;  zeroValue=map.zeroValue;  hasZeroValue=map.hasZeroValue;}  }
class C{  void mirror(){  for (int x=0; x < bitMatrix.getWidth(); x++) {    for (int y=x + 1; y < bitMatrix.getHeight(); y++) {      if (bitMatrix.get(x,y) != bitMatrix.get(y,x)) {        bitMatrix.flip(y,x);        bitMatrix.flip(x,y);      }    }  }}  }
class C{  public Rectangle listOffsetToView(RSyntaxTextArea textArea,TabExpander e,int pos,int x0,Rectangle rect){  int stableX=x0;  Token token=this;  FontMetrics fm=null;  Segment s=new Segment();  while (token != null && token.isPaintable()) {    fm=textArea.getFontMetricsForTokenType(token.type);    if (fm == null) {      return rect;    }    char[] text=token.text;    int start=token.textOffset;    int end=start + token.textCount;    if (token.containsPosition(pos)) {      s.array=token.text;      s.offset=token.textOffset;      s.count=pos - token.offset;      int w=Utilities.getTabbedTextWidth(s,fm,stableX,e,token.offset);      rect.x=stableX + w;      end=token.documentToToken(pos);      if (text[end] == '\t') {        rect.width=fm.charWidth(' ');      } else {        rect.width=fm.charWidth(text[end]);      }      return rect;    } else {      s.array=token.text;      s.offset=token.textOffset;      s.count=token.textCount;      stableX+=Utilities.getTabbedTextWidth(s,fm,stableX,e,token.offset);    }    token=token.getNextToken();  }  rect.x=stableX;  rect.width=1;  return rect;}  }
class C{  public boolean isTopic(){  return isTopic;}  }
class C{  @Nullable @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  Log_OC.d(TAG,"query received in thread " + Thread.currentThread().getName());  int match=mUriMatcher.match(uri);switch (match) {case SEARCH:    return searchForUsersOrGroups(uri);default :  return null;}}  }
class C{  public List<Feature> apply(Feature feature){  String featureName=Feature.createName(DEFAULT_NAME,feature.getName());  Object featureValue=feature.getValue();  if (featureValue == null)   return Collections.emptyList(); else   if (featureValue instanceof String) {    String value=featureValue.toString();    if (value == null || value.length() == 0)     return Collections.emptyList();    String lowerCaseValue=value.toLowerCase();    String upperCaseValue=value.toUpperCase();    if (lowerCaseValue.equals(upperCaseValue))     return Collections.emptyList();    if (value.equals(value.toLowerCase())) {      return Collections.singletonList(new Feature(featureName,CapitalType.ALL_LOWERCASE.toString()));    } else     if (value.equals(value.toUpperCase())) {      return Collections.singletonList(new Feature(featureName,CapitalType.ALL_UPPERCASE.toString()));    }    if (CaseUtil.isInitialUppercase(value)) {      return Collections.singletonList(new Feature(featureName,CapitalType.INITIAL_UPPERCASE.toString()));    }    return Collections.singletonList(new Feature(featureName,CapitalType.MIXED_CASE.toString()));  } else   return Collections.emptyList();}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public void assertDocsSkipping(int docFreq,PostingsEnum leftDocs,PostingsEnum rightDocs) throws Exception {  if (leftDocs == null) {    assertNull(rightDocs);    return;  }  int docid=-1;  int averageGap=MAXDOC / (1 + docFreq);  int skipInterval=16;  while (true) {    if (random().nextBoolean()) {      docid=leftDocs.nextDoc();      assertEquals(docid,rightDocs.nextDoc());    } else {      int skip=docid + (int)Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));      docid=leftDocs.advance(skip);      assertEquals(docid,rightDocs.advance(skip));    }    if (docid == DocIdSetIterator.NO_MORE_DOCS) {      return;    }  }}  }
class C{  public String globalInfo(){  return "The FromFile reads the structure of a Bayes net from a file " + "in BIFF format.";}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addHost(URI id){  this.addedHosts.add(id);}  }
class C{  public TollAnalyzer(final String eventsFile,final double simulationEndTime,final int noOfTimeBins){  this(eventsFile,simulationEndTime,noOfTimeBins,null,null,null);}  }
class C{  public JCImport createImport(){  JCImport imp=new JCImport();  raw_imports.add(imp);  return imp;}  }
class C{  public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException {  final XPathContext xctxt=transformer.getXPathContext();  final int sourceNode=xctxt.getCurrentNode();  DTMIterator sourceNodes=m_selectExpression.asIterator(xctxt,sourceNode);  VariableStack vars=xctxt.getVarStack();  int nParams=getParamElemCount();  int thisframe=vars.getStackFrame();  boolean pushContextNodeListFlag=false;  try {    xctxt.pushCurrentNode(DTM.NULL);    xctxt.pushCurrentExpressionNode(DTM.NULL);    xctxt.pushSAXLocatorNull();    transformer.pushElemTemplateElement(null);    final Vector keys=(m_sortElems == null) ? null : transformer.processSortKeys(this,sourceNode);    if (null != keys)     sourceNodes=sortNodes(xctxt,keys,sourceNodes);    final SerializationHandler rth=transformer.getSerializationHandler();    final StylesheetRoot sroot=transformer.getStylesheet();    final TemplateList tl=sroot.getTemplateListComposed();    final boolean quiet=transformer.getQuietConflictWarnings();    DTM dtm=xctxt.getDTM(sourceNode);    int argsFrame=-1;    if (nParams > 0) {      argsFrame=vars.link(nParams);      vars.setStackFrame(thisframe);      for (int i=0; i < nParams; i++) {        ElemWithParam ewp=m_paramElems[i];        XObject obj=ewp.getValue(transformer,sourceNode);        vars.setLocalVariable(i,obj,argsFrame);      }      vars.setStackFrame(argsFrame);    }    xctxt.pushContextNodeList(sourceNodes);    pushContextNodeListFlag=true;    IntStack currentNodes=xctxt.getCurrentNodeStack();    IntStack currentExpressionNodes=xctxt.getCurrentExpressionNodeStack();    int child;    while (DTM.NULL != (child=sourceNodes.nextNode())) {      currentNodes.setTop(child);      currentExpressionNodes.setTop(child);      if (xctxt.getDTM(child) != dtm) {        dtm=xctxt.getDTM(child);      }      final int exNodeType=dtm.getExpandedTypeID(child);      final int nodeType=dtm.getNodeType(child);      final QName mode=transformer.getMode();      ElemTemplate template=tl.getTemplateFast(xctxt,child,exNodeType,mode,-1,quiet,dtm);      if (null == template) {switch (nodeType) {case DTM.DOCUMENT_FRAGMENT_NODE:case DTM.ELEMENT_NODE:          template=sroot.getDefaultRule();        break;case DTM.ATTRIBUTE_NODE:case DTM.CDATA_SECTION_NODE:case DTM.TEXT_NODE:      transformer.pushPairCurrentMatched(sroot.getDefaultTextRule(),child);    transformer.setCurrentElement(sroot.getDefaultTextRule());  dtm.dispatchCharactersEvents(child,rth,false);transformer.popCurrentMatched();continue;case DTM.DOCUMENT_NODE:template=sroot.getDefaultRootRule();break;default :continue;}} else {transformer.setCurrentElement(template);}transformer.pushPairCurrentMatched(template,child);int currentFrameBottom;if (template.m_frameSize > 0) {xctxt.pushRTFContext();currentFrameBottom=vars.getStackFrame();vars.link(template.m_frameSize);if (template.m_inArgsSize > 0) {int paramIndex=0;for (ElemTemplateElement elem=template.getFirstChildElem(); null != elem; elem=elem.getNextSiblingElem()) {if (Constants.ELEMNAME_PARAMVARIABLE == elem.getXSLToken()) {ElemParam ep=(ElemParam)elem;int i;for (i=0; i < nParams; i++) {ElemWithParam ewp=m_paramElems[i];if (ewp.m_qnameID == ep.m_qnameID) {XObject obj=vars.getLocalVariable(i,argsFrame);vars.setLocalVariable(paramIndex,obj);break;}}if (i == nParams) vars.setLocalVariable(paramIndex,null);} else break;paramIndex++;}}} else currentFrameBottom=0;for (ElemTemplateElement t=template.m_firstChild; t != null; t=t.m_nextSibling) {xctxt.setSAXLocator(t);try {transformer.pushElemTemplateElement(t);t.execute(transformer);}  finally {transformer.popElemTemplateElement();}}if (template.m_frameSize > 0) {vars.unlink(currentFrameBottom);xctxt.popRTFContext();}transformer.popCurrentMatched();}} catch (SAXException se) {transformer.getErrorListener().fatalError(new TransformerException(se));} finally {if (nParams > 0) vars.unlink(thisframe);xctxt.popSAXLocator();if (pushContextNodeListFlag) xctxt.popContextNodeList();transformer.popElemTemplateElement();xctxt.popCurrentExpressionNode();xctxt.popCurrentNode();sourceNodes.detach();}}  }
class C{  public void addNewEntry(String nameValuePairs) throws IOException, ServiceException {  TableEntry newEntry=setEntryContentsFromString(new TableEntry(),nameValuePairs);  service.insert(tablesFeedUrl,newEntry);  out.println("Added table!");}  }
class C{  public void testAdvanceAllTerms() throws Exception {  List<String> termsList=new ArrayList<>();  termsList.addAll(Arrays.asList(commonTerms));  termsList.addAll(Arrays.asList(mediumTerms));  termsList.addAll(Arrays.asList(rareTerms));  String terms[]=termsList.toArray(new String[0]);  for (int amount=25; amount < 200; amount+=25) {    for (int minNrShouldMatch=1; minNrShouldMatch <= terms.length; minNrShouldMatch++) {      Scorer expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);      Scorer actual=scorer(terms,minNrShouldMatch,Mode.SCORER);      assertAdvance(expected,actual,amount);      expected=scorer(terms,minNrShouldMatch,Mode.DOC_VALUES);      actual=scorer(terms,minNrShouldMatch,Mode.BULK_SCORER);      assertAdvance(expected,actual,amount);    }  }}  }
class C{  protected List refreshTicksHorizontal(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  Range range=getRange();  List ticks=new ArrayList();  Font tickLabelFont=getTickLabelFont();  g2.setFont(tickLabelFont);  TextAnchor textAnchor;  if (edge == RectangleEdge.TOP) {    textAnchor=TextAnchor.BOTTOM_CENTER;  } else {    textAnchor=TextAnchor.TOP_CENTER;  }  if (isAutoTickUnitSelection()) {    selectAutoTickUnit(g2,dataArea,edge);  }  int minorTickCount=this.tickUnit.getMinorTickCount();  double unit=getTickUnit().getSize();  double index=Math.ceil(calculateLog(getRange().getLowerBound()) / unit);  double start=index * unit;  double end=calculateLog(getUpperBound());  double current=start;  boolean hasTicks=(this.tickUnit.getSize() > 0.0) && !Double.isInfinite(start);  while (hasTicks && current <= end) {    double v=calculateValueNoINF(current);    if (range.contains(v)) {      ticks.add(new LogTick(TickType.MAJOR,v,createTickLabel(v),textAnchor));    }    double next=Math.pow(this.base,current + this.tickUnit.getSize());    for (int i=1; i < minorTickCount; i++) {      double minorV=v + i * ((next - v) / minorTickCount);      if (range.contains(minorV)) {        ticks.add(new LogTick(TickType.MINOR,minorV,null,textAnchor));      }    }    current=current + this.tickUnit.getSize();  }  return ticks;}  }
class C{  @Override public void onVisibilityChanged(boolean visible){  mVisible=visible;  if (visible) {    ArrayList<Class> drawerClasses=new ArrayList<Class>();    drawerClasses.add(CombinedWifiCellularDrawer.class);    drawerClasses.add(BatteryDrawer.class);    if (NotificationService.permissionsGranted) {      drawerClasses.add(NotificationsDrawer.class);    }    mDrawerIndex++;    if (mDrawerIndex >= drawerClasses.size()) {      mDrawerIndex=0;    }    Class cls=drawerClasses.get(mDrawerIndex);    if (cls == NotificationsDrawer.class) {      mDrawer=new NotificationsDrawer(mContext);    } else     if (cls == BatteryDrawer.class) {      mDrawer=new BatteryDrawer(mContext);    } else {      mDrawer=new CombinedWifiCellularDrawer(mContext);    }    mDrawer.start();    draw();  } else {    if (mDrawer != null) {      mDrawer.destroy();      mDrawer=null;    }    mHandler.removeCallbacks(mUpdateDisplay);  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private TextUtil(){  instanceNotAllowed(getClass());}  }
class C{  public void writeGraphic(final String filename){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(),1024,768);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  CharSequence buildHistory(){  StringBuilder historyText=new StringBuilder(1000);  SQLiteOpenHelper helper=new DBHelper(activity);  SQLiteDatabase db=null;  Cursor cursor=null;  try {    db=helper.getWritableDatabase();    cursor=db.query(DBHelper.TABLE_NAME,COLUMNS,null,null,null,null,DBHelper.TIMESTAMP_COL + " DESC");    while (cursor.moveToNext()) {      historyText.append('"').append(massageHistoryField(cursor.getString(0))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(1))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(2))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(3))).append("\",");      long timestamp=cursor.getLong(3);      historyText.append('"').append(massageHistoryField(EXPORT_DATE_TIME_FORMAT.format(new Date(timestamp)))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(4))).append("\"\r\n");    }    return historyText;  }  finally {    close(cursor,db);  }}  }
class C{  public static String stripPrefix(String str,String prefix){  return str.startsWith(prefix) ? str.substring(prefix.length()) : null;}  }
class C{  private void countSpecialCategories(final int total){  final SQLiteDatabase db=getOpenHelper().getWritableDatabase();  try {    db.beginTransaction();    final ContentValues cv=new ContentValues(1);    cv.put(COL_UNREAD,total);    db.update(TABLE_CATEGORIES,cv,"_id=" + Data.VCAT_ALL,null);    cv.put(COL_UNREAD,getUnreadCount(Data.VCAT_FRESH,true));    db.update(TABLE_CATEGORIES,cv,"_id=" + Data.VCAT_FRESH,null);    cv.put(COL_UNREAD,getUnreadCount(Data.VCAT_PUB,true));    db.update(TABLE_CATEGORIES,cv,"_id=" + Data.VCAT_PUB,null);    cv.put(COL_UNREAD,getUnreadCount(Data.VCAT_STAR,true));    db.update(TABLE_CATEGORIES,cv,"_id=" + Data.VCAT_STAR,null);    db.setTransactionSuccessful();  }  finally {    db.endTransaction();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.434 -0500",hash_original_method="A42C38B5EC409455B458B8894CBAC685",hash_generated_method="736FFC5D8306996A19F0FFA3C8858096") public void registerSpyStream(OutputStream spystream){  super._registerSpyStream(spystream);}  }
class C{  public static boolean isInvalid(int c){  return !isValid(c);}  }
class C{  protected String buildCreateTableStatement() throws ReplicatorException {  return null;}  }
class C{  public Language(String language){  super(language);}  }
class C{  public void runTest() throws Throwable {  String publicId="http://www.example.com/";  String systemId="myDoc.dtd";  String qualifiedName;  DocumentType docType=null;  DOMImplementation domImpl;  domImpl=getImplementation();{    boolean success=false;    try {      docType=domImpl.createDocumentType("",publicId,systemId);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public boolean isEmpty(){  return children == null || children.isEmpty();}  }
class C{  public void starting(int tenantclass,Operation op){  starting(op,tenantclass);}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("two",null));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ABSTRACT_ANNOTATION_LIST__ANNOTATIONS:    getAnnotations().clear();  return;}super.eUnset(featureID);}  }
class C{  public void save(final CharSequence filename) throws ConfigurationException, IOException {  final Writer w=new OutputStreamWriter(new FileOutputStream(filename.toString()),"UTF-8");  super.save(w);  w.close();}  }
class C{  public synchronized void commitOne(int row){  if (row >= 0 && row < list.size()) {    if (list.get(row).isBeingEdited()) {      list.get(row).commit();      fireTableRowsUpdated(row,row);    }  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public static final String deletePlaylist(Context context,String playlistId) throws JSONException, IllegalArgumentException {  JSONObject jsonParam=new JSONObject();  JSONArray mutationsArray=new JSONArray();  mutationsArray.put(new JSONObject().put("delete",playlistId));  jsonParam.put("mutations",mutationsArray);  mHttpClient.setUserAgent(mMobileClientUserAgent);  String result=mHttpClient.post(context,"https://www.googleapis.com/sj/v1.1/playlistbatch?alt=json&hl=en_US",new ByteArrayEntity(jsonParam.toString().getBytes()),"application/json");  mHttpClient.setUserAgent(mWebClientUserAgent);  return result;}  }
class C{  @Deprecated public void refreshAuthentication(final String authenticationToken,final OnClientCallback<AuthenticationResult> callback){  AsyncReflector.execute(mClient,callback,"refreshAuthentication",authenticationToken);}  }
class C{  public ImageSource region(Rect sRegion){  this.sRegion=sRegion;  setInvariants();  return this;}  }
class C{  public ArraySpliterator(Object[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int progress=0;  int a;  int filterSize=3;  double n;  double sum;  int dX[];  int dY[];  int midPoint;  int numPixelsInFilter;  double[] filterShape;  boolean reflectAtBorders=true;  double centreValue=0;  double neighbourhoodDist=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodDist=Double.parseDouble(args[2]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=reflectAtBorders;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    filterSize=(int)(neighbourhoodDist / ((DEM.getCellSizeX() + DEM.getCellSizeY()) / 2));    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      filterSize++;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    double bSqr=midPoint * midPoint;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[a]=col - midPoint;        dY[a]=row - midPoint;        z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;        if (z > 1) {          filterShape[a]=0;        } else {          filterShape[a]=1;        }        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=DEM.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPoint) && (y != midPoint)) {              z=DEM.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];              }            }          }          z=centreValue - sum / n;          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private CloneUtils(){}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  public void login(){  boolean isHadoopCluster=isHadoopCluster();  Configuration hadoopConfig=isHadoopCluster ? getHadoopConfiguration() : new Configuration(false);  org.apache.commons.configuration.Configuration configuration=getApplicationConfiguration();  if (!isHadoopCluster) {    setupHadoopConfiguration(hadoopConfig,configuration);  }  doServiceLogin(hadoopConfig,configuration);}  }
class C{  public void clamp(){  FloatVectorSpecies _species=(FloatVectorSpecies)species;  for (int i=0; i < genomeLength(); i++) {    float minGene=(float)_species.minGene(i);    if (genome[i] < minGene)     genome[i]=minGene; else {      float maxGene=(float)_species.maxGene(i);      if (genome[i] > maxGene)       genome[i]=maxGene;    }  }}  }
class C{  private void export_corpus_annotation(){  writeToFile("corpus_annotation");}  }
class C{  public double distance(int x,int y,int z){  return Math.sqrt(distanceSquared(x,y,z));}  }
class C{  @Path("branches") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public ListResponse listBranches(final ListRequest request) throws ApiException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return this.subversionApi.listBranches(request);}  }
class C{  public void trimToSize(int maxSize){  while (true) {    K key;    V value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<K,V> toEvict=map.entrySet().iterator().next();      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=safeSizeOf(key,value);      evictionCount++;    }    entryRemoved(true,key,value,null);  }}  }
class C{  static <T>T checkNotNull(T reference,String message){  if (reference == null) {    throw new NullPointerException(message);  }  return reference;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void registerExchange(Exchange exchange,double vbf){  exchangeInfo newExchange=new exchangeInfo(System.currentTimeMillis(),vbf);  exchangeInfoMap.put(exchange,newExchange);}  }
class C{  public void compileSingleFile(File modelFile) throws N4JSCompileException {  compileSingleFile(modelFile,new DismissingIssueAcceptor());}  }
class C{  public static File createTemporaryDirectory(String prefix){  while (true) {    String candidateName=prefix + TEMPORARY_DIRECTORY_PRNG.nextInt();    File result=new File(System.getProperty("java.io.tmpdir"),candidateName);    if (result.mkdir()) {      return result;    }  }}  }
class C{  public void ready(){  ready("Operation completed successfully");}  }
class C{  private void switchId(View targetView,View view){  ViewGroup parent=(ViewGroup)view.getParent();  targetView.getLocationOnScreen(sLocation);  if (!mVertical) {    targetView.setX(mDragOrigin - parent.getLeft());    mDragOrigin=sLocation[0];  } else {    targetView.setY(mDragOrigin - parent.getTop());    mDragOrigin=sLocation[1];  }  int targetIndex=mButtonViews.indexOf(targetView);  int draggedIndex=mButtonViews.indexOf(view);  Collections.swap(mButtonViews,draggedIndex,targetIndex);}  }
class C{  public boolean isAnyAcct(){  Object oo=get_Value(COLUMNNAME_AnyAcct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String toString(byte[] x,int offset,int len){  try {    return new String(x,offset,len,PngHelperInternal.charsetLatin1name);  } catch (  UnsupportedEncodingException e) {    throw new PngBadCharsetException(e);  }}  }
class C{  public <A,B>void abc(java.lang.Object f){}  }
class C{  public String unmangleString(String str){  LOGGER.debug("Converting " + str);  for (  String spec : specialChars.keySet()) {    str=str.replace(specialChars.get(spec),spec);  }  LOGGER.debug("   to " + str);  return str;}  }
class C{  public boolean hasBookmark(){  return bookmark != null;}  }
class C{  public static JavaCompiler instance(Context context){  JavaCompiler instance=context.get(compilerKey);  if (instance == null)   instance=new JavaCompiler(context);  return instance;}  }
class C{  public ServerBuilder defaultRequestTimeout(Duration defaultRequestTimeout){  return defaultRequestTimeoutMillis(requireNonNull(defaultRequestTimeout,"defaultRequestTimeout").toMillis());}  }
class C{  public String toString(boolean expand){  StringBuilder acc=new StringBuilder();  toString(acc,0,expand);  return acc.toString();}  }
class C{  public void putInherited(int i,boolean b){  if (b)   masks[i]|=INHERITED_MASK; else   masks[i]&=~INHERITED_MASK;}  }
class C{  @Description(summary="Create the regular h2.jar file.") public void jar(){  compile();  manifest("H2 Database Engine","org.h2.tools.Console");  FileList files=files("temp").exclude("temp/android/*").exclude("temp/org/h2/android/*").exclude("temp/org/h2/build/*").exclude("temp/org/h2/dev/*").exclude("temp/org/h2/jcr/*").exclude("temp/org/h2/jaqu/*").exclude("temp/org/h2/java/*").exclude("temp/org/h2/jcr/*").exclude("temp/org/h2/mode/*").exclude("temp/org/h2/samples/*").exclude("temp/org/h2/server/ftp/*").exclude("temp/org/h2/test/*").exclude("*.bat").exclude("*.sh").exclude("*.txt").exclude("*.DS_Store");  files=excludeTestMetaInfFiles(files);  jar("bin/h2" + getJarSuffix(),files,"temp");  filter("src/installer/h2.sh","bin/h2.sh","h2.jar","h2" + getJarSuffix());  filter("src/installer/h2.bat","bin/h2.bat","h2.jar","h2" + getJarSuffix());  filter("src/installer/h2w.bat","bin/h2w.bat","h2.jar","h2" + getJarSuffix());}  }
class C{  public void serviceRevoked(BeanContextServiceRevokedEvent bcsre){  throw new UnsupportedOperationException();}  }
class C{  public boolean isFastMap(CacheEntryPredicate[] filters,GridCacheOperation op){  return F.isEmpty(filters) && op != TRANSFORM && ctx.config().getWriteSynchronizationMode() == FULL_SYNC && ctx.config().getAtomicWriteOrderMode() == CLOCK && !(ctx.writeThrough() && ctx.config().getInterceptor() != null);}  }
class C{  public static CodedInputByteBufferNano newInstance(final byte[] buf,final int off,final int len){  return new CodedInputByteBufferNano(buf,off,len);}  }
class C{  private List<VdcConfig> loadRecoverFileToRecoverInfo(String recoverFileName){  List<VdcConfig> newVdcConfigList=new ArrayList<VdcConfig>();  Document doc=null;  try {    DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    File f=new File(recoverFileName);    BufferedInputStream in=new BufferedInputStream(new FileInputStream(f));    DataInputStream dis=new DataInputStream(in);    byte[] loadBytes=new byte[(int)f.length()];    dis.readFully(loadBytes);    String decryptString=geoEncryptionProvider.decrypt(loadBytes);    InputStream decryptStringStream=new ByteArrayInputStream(decryptString.getBytes());    doc=builder.parse(decryptStringStream);  } catch (  Exception e) {    System.err.println("Fail to read recover file, if you are not in VDC1 now, " + "please copy the recover file from VDC1 to this VDC and then issue recover command. e= " + e);    throw new RuntimeException("Recover file not found: " + recoverFileName);  }  Element root=doc.getDocumentElement();  NodeList vdcConfigNodes=root.getElementsByTagName("VdcConfig");  for (int i=0; i < vdcConfigNodes.getLength(); i++) {    Element vdcConfigNode=(Element)vdcConfigNodes.item(i);    VdcConfig newVdcConfig=new VdcConfig();    newVdcConfig.setId(URI.create(vdcConfigNode.getAttribute("id")));    NodeList fields=vdcConfigNode.getElementsByTagName("field");    for (int j=0; j < fields.getLength(); j++) {      Element field=(Element)fields.item(j);      Method method=null;      try {        if (field.getAttribute("value") == null || field.getAttribute("value").equals("")) {          continue;        }        Class type=Class.forName(field.getAttribute("type"));        method=newVdcConfig.getClass().getMethod("set" + field.getAttribute("name"),type);        if (type == Integer.class) {          method.invoke(newVdcConfig,Integer.valueOf(field.getAttribute("value")));        } else         if (type == Long.class) {          method.invoke(newVdcConfig,Long.valueOf(field.getAttribute("value")));        } else         if (type == HashMap.class) {          String loadString=field.getAttribute("value").replaceAll("[{}]","");          if (loadString.equals("")) {            continue;          }          HashMap<String,String> map=new HashMap<String,String>();          String[] kvs=loadString.split(",");          for (          String kv : kvs) {            String[] onekv=kv.split("=");            String key=onekv[0].trim();            String value=onekv[1].trim();            map.put(key,value);          }          method.invoke(newVdcConfig,map);        } else {          method.invoke(newVdcConfig,field.getAttribute("value"));        }      } catch (      Exception e) {        System.err.println("Reflect fail,method= " + method + "e= "+ e);      }    }    newVdcConfigList.add(newVdcConfig);  }  return newVdcConfigList;}  }
class C{  public Set<SootMethod> collectSourceMethods(){  Set<SootMethod> result=new HashSet<SootMethod>();  for (  SourceCallChainInfo cci : entry_points) {    collectSourceMethods(cci,result);  }  return result;}  }
class C{  public NodeLinkTreeLayout(String group){  super(group);  m_orientation=Constants.ORIENT_LEFT_RIGHT;}  }
class C{  public KrbApReq(byte[] message,Krb5AcceptCredential cred,InetAddress initiator) throws KrbException, IOException {  obuf=message;  if (apReqMessg == null)   decode();  authenticate(cred,initiator);}  }
class C{  public int gradientEvaluation(){  return this.gradientEvaluation_;}  }
class C{  protected void checkInterval(long start,long end){  if (end < start) {    throw new IllegalArgumentException("The end instant must be greater or equal to the start");  }}  }
class C{  public boolean isValorPorDefecto(){  return valorPorDefecto;}  }
class C{  public int subStringLength(String str,int maxPix,TextPaint paint){  if (TextUtils.isEmpty(str)) {    return 0;  }  int currentIndex=0;  for (int i=0; i < str.length(); i++) {    String temp=str.substring(0,i + 1);    float valueLength=paint.measureText(temp) + leftPadding + rightPadding;    if (valueLength > maxPix) {      currentIndex=i - 1;      break;    } else     if (valueLength == maxPix) {      currentIndex=i;      break;    }  }  if (currentIndex == 0) {    currentIndex=str.length() - 1;  }  return currentIndex;}  }
class C{  private boolean done(Type type){  return visited.contains(type);}  }
class C{  public FBProcedureParam addParam(int position,String param){  param=param.trim();  boolean isInputParam=true;  if (param.length() > 4) {    String possibleOutIndicator=param.substring(0,3);    if ("OUT".equalsIgnoreCase(possibleOutIndicator) && Character.isSpaceChar(param.charAt(3))) {      isInputParam=false;      param=param.substring(4).trim();    }  }  if (isInputParam && param.length() > 4) {    String possibleInIndicator=param.substring(0,2);    if ("IN".equalsIgnoreCase(possibleInIndicator) && Character.isSpaceChar(param.charAt(2))) {      param=param.substring(3).trim();    }  }  FBProcedureParam callParam=new FBProcedureParam(position,param);  if (isInputParam) {    addInputParam(callParam);  } else {    addOutputParam(callParam);  }  return callParam;}  }
class C{  private Query analyzeTerm(String field,TokenStream stream) throws IOException {  TermToBytesRefAttribute termAtt=stream.getAttribute(TermToBytesRefAttribute.class);  stream.reset();  if (!stream.incrementToken()) {    throw new AssertionError();  }  return newTermQuery(new Term(field,termAtt.getBytesRef()));}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws HibernateException {  sessionContext.checkPermission(Right.DistributionTypes);  List<DistributionType> distTypes=new ArrayList<DistributionType>();  distTypes.addAll(DistributionType.findAll(false,false,null));  distTypes.addAll(DistributionType.findAll(false,true,null));  WebTable webTable=new WebTable(11,"Distribution Types","distributionTypeList.do?ord=%%",new String[]{"Id","Reference","Abbreviation","Name","Type","Visible","Allow Instructor Preference","Sequencing Required","Allow Preferences","Departments","Description"},new String[]{"left","left","left","left","left","center","center","center","center","left","left"},new boolean[]{true,true,true,true,true,true,true,true,true,true,true});  WebTable.setOrder(sessionContext,"DistributionTypeList.ord",request.getParameter("ord"),1);  boolean edit=sessionContext.hasPermission(Right.DistributionTypeEdit);  for (  DistributionType d : distTypes) {    String allowPref=null;    if ("".equals(d.getAllowedPref())) {      allowPref="<i>None</i>";    } else     if ("P43210R".equals(d.getAllowedPref())) {      allowPref="<i>All</i>";    } else {      for (      PreferenceLevel p : PreferenceLevel.getPreferenceLevelList()) {        if (d.getAllowedPref().indexOf(PreferenceLevel.prolog2char(p.getPrefProlog())) < 0)         continue;        if (allowPref == null)         allowPref=""; else         allowPref+="<br>";        if (PreferenceLevel.sNeutral.equals(p.getPrefProlog()))         allowPref+=p.getPrefName(); else         allowPref+="<span style='color:" + p.prefcolor() + ";'>"+ p.getPrefName().replaceAll(" ","&nbsp;")+ "</span>";      }    }    String deptStr="";    String deptCmp="";    for (Iterator i=d.getDepartments(sessionContext.getUser().getCurrentAcademicSessionId()).iterator(); i.hasNext(); ) {      Department x=(Department)i.next();      deptStr+=x.getManagingDeptAbbv().trim();      deptCmp+=x.getDeptCode();      if (i.hasNext()) {        deptStr+=", ";        deptCmp+=",";      }    }    WebTableLine line=webTable.addLine(edit ? "onClick=\"document.location='distributionTypeEdit.do?id=" + d.getUniqueId() + "';\"" : null,new String[]{d.getRequirementId().toString(),d.getReference(),d.getAbbreviation(),d.getLabel(),d.isExamPref().booleanValue() ? "Examination" : "Course",d.isVisible() ? "Yes" : "No",d.isExamPref().booleanValue() ? "N/A" : d.isInstructorPref().booleanValue() ? "Yes" : "No",d.isSequencingRequired() ? "Yes" : "No",allowPref,(deptStr.length() == 0 ? "<i>All</i>" : deptStr),d.getDescr()},new Comparable[]{d.getRequirementId(),d.getReference(),d.getAbbreviation(),d.getLabel(),new Integer(d.isExamPref().booleanValue() ? 1 : 0),d.isVisible(),new Integer(d.isInstructorPref().booleanValue() ? 1 : 0),new Integer(d.isSequencingRequired() ? 1 : 0),null,deptCmp,d.getDescr()},null);    if (!d.isVisible())     line.setStyle("color:gray;");  }  request.setAttribute("table",webTable.printTable(WebTable.getOrder(sessionContext,"DistributionTypeList.ord")));  return mapping.findForward("showDistributionTypeList");}  }
class C{  boolean moveCursorToChildPosition(int groupPosition,int childPosition){  if (!mDataValid || mCursor.isClosed()) {    return false;  }  groupPosition=groupPositionToBin(groupPosition);  int index=childPosition;  for (int i=0; i < groupPosition; i++) {    index+=mItemMap[i];  }  return mCursor.moveToPosition(index);}  }
class C{  public void testStopwordsCasing() throws IOException {  DutchAnalyzer a=new DutchAnalyzer();  assertAnalyzesTo(a,"Zelf",new String[]{});  a.close();}  }
class C{  @VisibleForTesting void reset(){  setRawCounter(0);}  }
class C{  protected void engineUpdate(byte input){  oneByte[0]=input;  SHA1Impl.updateHash(buffer,oneByte,0,0);  messageLength++;}  }
class C{  public void read(byte[] buff,int off,int len){  System.arraycopy(data,pos,buff,off,len);  pos+=len;}  }
class C{  public final boolean isNIL(){  return getTerm() == List.NIL;}  }
class C{  public VmStateHistoryEntry(double time,double allocatedMips,double requestedMips,boolean isInMigration){  setTime(time);  setAllocatedMips(allocatedMips);  setRequestedMips(requestedMips);  setInMigration(isInMigration);}  }
class C{  public static DiscreteVariable serializableInstance(){  return new DiscreteVariable("X");}  }
class C{  public static final String architecture(){  return m_architecture;}  }
class C{  public void onChatClicked(){  if (ENABLED) {    trackOpt("Chat Clicked On Post",null);  }}  }
class C{  public UnknownServiceException(){}  }
class C{  public void removeItem(final BreadcrumbItem item){  this.items.remove(item);}  }
class C{  public CompanyObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  public void skippedEntity(String name) throws SAXException {  flushStartDoc();  m_resultContentHandler.skippedEntity(name);}  }
class C{  public boolean ignoreSystemFiles(){  return ignoreSystemFiles;}  }
class C{  public HttpMessage(HttpRequestHeader reqHeader,HttpRequestBody reqBody){  setRequestHeader(reqHeader);  setRequestBody(reqBody);}  }
class C{  public static boolean belowThan(int a,int b){  return Integer.compareUnsigned(a,b) < 0;}  }
class C{  public static FirewallRule jsonToFirewallRule(String fmJson){  FirewallRule rule=new FirewallRule();  MappingJsonFactory f=new MappingJsonFactory();  JsonParser jp;  try {    try {      jp=f.createParser(fmJson);    } catch (    JsonParseException e) {      throw new IOException(e);    }    jp.nextToken();    if (jp.getCurrentToken() != JsonToken.START_OBJECT) {      throw new IOException("Expected START_OBJECT");    }    while (jp.nextToken() != JsonToken.END_OBJECT) {      if (jp.getCurrentToken() != JsonToken.FIELD_NAME) {        throw new IOException("Expected FIELD_NAME");      }      String n=jp.getCurrentName();      jp.nextToken();      if (jp.getText().equals("")) {        continue;      }      if (n.equalsIgnoreCase("ruleid")) {        try {          rule.ruleid=Integer.parseInt(jp.getText());        } catch (        IllegalArgumentException e) {          log.error("Unable to parse rule ID: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("switchid")) {        rule.any_dpid=false;        try {          rule.dpid=DatapathId.of(jp.getText());        } catch (        NumberFormatException e) {          log.error("Unable to parse switch DPID: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("src-inport")) {        rule.any_in_port=false;        try {          rule.in_port=OFPort.of(Integer.parseInt(jp.getText()));        } catch (        NumberFormatException e) {          log.error("Unable to parse ingress port: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("src-mac")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_dl_src=false;          try {            rule.dl_src=MacAddress.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse source MAC: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("dst-mac")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_dl_dst=false;          try {            rule.dl_dst=MacAddress.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse destination MAC: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("dl-type")) {        if (jp.getText().equalsIgnoreCase("ARP")) {          rule.any_dl_type=false;          rule.dl_type=EthType.ARP;        } else         if (jp.getText().equalsIgnoreCase("IPv4")) {          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        }      } else       if (n.equalsIgnoreCase("src-ip")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_nw_src=false;          if (rule.dl_type.equals(EthType.NONE)) {            rule.any_dl_type=false;            rule.dl_type=EthType.IPv4;          }          try {            rule.nw_src_prefix_and_mask=IPv4AddressWithMask.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse source IP: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("dst-ip")) {        if (!jp.getText().equalsIgnoreCase("ANY")) {          rule.any_nw_dst=false;          if (rule.dl_type.equals(EthType.NONE)) {            rule.any_dl_type=false;            rule.dl_type=EthType.IPv4;          }          try {            rule.nw_dst_prefix_and_mask=IPv4AddressWithMask.of(jp.getText());          } catch (          IllegalArgumentException e) {            log.error("Unable to parse destination IP: {}",jp.getText());          }        }      } else       if (n.equalsIgnoreCase("nw-proto")) {        if (jp.getText().equalsIgnoreCase("TCP")) {          rule.any_nw_proto=false;          rule.nw_proto=IpProtocol.TCP;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        } else         if (jp.getText().equalsIgnoreCase("UDP")) {          rule.any_nw_proto=false;          rule.nw_proto=IpProtocol.UDP;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        } else         if (jp.getText().equalsIgnoreCase("ICMP")) {          rule.any_nw_proto=false;          rule.nw_proto=IpProtocol.ICMP;          rule.any_dl_type=false;          rule.dl_type=EthType.IPv4;        }      } else       if (n.equalsIgnoreCase("tp-src")) {        rule.any_tp_src=false;        try {          rule.tp_src=TransportPort.of(Integer.parseInt(jp.getText()));        } catch (        IllegalArgumentException e) {          log.error("Unable to parse source transport port: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("tp-dst")) {        rule.any_tp_dst=false;        try {          rule.tp_dst=TransportPort.of(Integer.parseInt(jp.getText()));        } catch (        IllegalArgumentException e) {          log.error("Unable to parse destination transport port: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("priority")) {        try {          rule.priority=Integer.parseInt(jp.getText());        } catch (        IllegalArgumentException e) {          log.error("Unable to parse priority: {}",jp.getText());        }      } else       if (n.equalsIgnoreCase("action")) {        if (jp.getText().equalsIgnoreCase("allow") || jp.getText().equalsIgnoreCase("accept")) {          rule.action=FirewallRule.FirewallAction.ALLOW;        } else         if (jp.getText().equalsIgnoreCase("deny") || jp.getText().equalsIgnoreCase("drop")) {          rule.action=FirewallRule.FirewallAction.DROP;        }      }    }  } catch (  IOException e) {    log.error("Unable to parse JSON string: {}",e);  }  return rule;}  }
class C{  public ChainedDocumentBuilder(){  builders=new LinkedList<DocumentBuilder>();}  }
class C{  public final void testIPv4AddressWithContextParameter(){  assertNotNull(Validators.iPv4Address(getContext()));}  }
class C{  public void createFieldEditors(){  addField(new RadioGroupFieldEditor(PreferenceConstants.P_TARGET_PASS,"Target Pass",1,new String[][]{{"Generate &Spec","specdump"},{"Conformance Check","confcheck"}},getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_NOSOURCE_INFO,"Print &source information in spec",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_JIMPLE,"Dump &jimple files for app classes in project's /droidsafe",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_ANALYZEAPI,"Fully analyze &API classes from android.jar",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_INFOFLOW,"Analyze information &flows",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_DEBUGLOG,"Print &debug log to project's /droidsafe/droidsafe.log",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_DUMP_PTA,"Dump PTA Analysis results to file in project's /droidsafe",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_DUMP_CALL_GRAPH,"Create dot file for call graph in project's /droidsafe",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_RUN_STRING_ANALYSIS,"Run String Analysis",getFieldEditorParent()));  addField(new BooleanFieldEditor(PreferenceConstants.P_UNFILTERED_STRING_ANALYSIS,"Run String Analysis for All Soot Application Classes",getFieldEditorParent()));}  }
class C{  public NamingException(String explanation){  super(explanation);  resolvedName=remainingName=null;  resolvedObj=null;}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  public void warn(Object message,Throwable t){}  }
class C{  public String ignoreClassTipText(){  return "The class index will be unset temporarily before the filter is applied.";}  }
class C{  private void assertResourceParser(){  if (scanner == null) {    throw new IllegalStateException("Please make sure to setup a ResourceParser before calling this method.");  }}  }
class C{  public static Bitmap loadBitmap(Context context,Uri uri,BitmapFactory.Options o){  if (uri == null || context == null) {    throw new IllegalArgumentException("bad argument to loadBitmap");  }  InputStream is=null;  try {    is=context.getContentResolver().openInputStream(uri);    return BitmapFactory.decodeStream(is,null,o);  } catch (  FileNotFoundException e) {    Log.e(LOGTAG,"FileNotFoundException for " + uri,e);  } finally {    Utils.closeSilently(is);  }  return null;}  }
class C{  public static TreebankNode newNode(JCas jCas,int begin,int end,String nodeType){  TreebankNode node=new TreebankNode(jCas,begin,end);  node.setNodeType(nodeType);  node.setChildren(new FSArray(jCas,0));  node.setLeaf(true);  node.addToIndexes();  return node;}  }
class C{  @Override public boolean add(E value,double priority){  if (value == null) {    throw new NullPointerException("null values are not supported!");  }  if (indices[this.getIndex(value)] >= 0) {    return false;  } else {    if (heapSize == data.length)     throw new RuntimeException("Heap's underlying storage is overflow!");    this.modCount++;    siftUp(heapSize,value,priority);    heapSize++;    return true;  }}  }
class C{  @Override public BigdataLiteral asValue(LexiconRelation lex) throws UnsupportedOperationException {  throw new UnsupportedOperationException();}  }
class C{  public void appendRow(DATA data,Object... keys){  Preconditions.checkNotNull(data);  Preconditions.checkNotNull(keys);  Preconditions.checkArgument(keys.length == dimensionNameToIndex.size(),"All the dimension keys should be specified.");  List<Object> keysList=Lists.newArrayList();  for (  Object key : keys) {    keysList.add(key);  }  DATA prev=dimensionKeysToData.put(keysList,data);  if (prev != null) {    return;  }  dataColumn.add(data);  for (int index=0; index < keys.length; index++) {    Object key=keys[index];    dimensionColumns.get(index).add(key);  }}  }
class C{  public String routing(){  return this.routing;}  }
class C{  public WekaException(String message){  super(message);}  }
class C{  @Override public boolean supportsSchemasInPrivilegeDefinitions(){  debugCodeCall("supportsSchemasInPrivilegeDefinitions");  return true;}  }
class C{  public static boolean isMnemonicHidden(){  if (UIManager.getBoolean("Button.showMnemonics") == true) {    isMnemonicHidden=false;  }  return isMnemonicHidden;}  }
class C{  private void removeFile(File file){synchronized (lock) {    pendingTasks.remove(file);    JSONObject json;    try {      json=ParseFileUtils.readFileToJSONObject(file);      ParseRESTCommand command=commandFromJSON(json);      command.releaseLocalIds();    } catch (    Exception e) {    }    ParseFileUtils.deleteQuietly(file);  }}  }
class C{  public void endProcessSubTokens(){}  }
class C{  private static int putMediaInfo(final serverObjects prop,final String[] wordArray,int c,final Map<AnchorURL,String> media,final String type,boolean dark){  int i=0;  for (  final Map.Entry<AnchorURL,String> entry : media.entrySet()) {    final String name=entry.getKey().getNameProperty();    final String rel=entry.getKey().getRelProperty();    final String text=entry.getKey().getTextProperty();    prop.put("viewMode_links_" + c + "_nr",c);    prop.put("viewMode_links_" + c + "_dark",((dark) ? 1 : 0));    prop.putHTML("viewMode_links_" + c + "_type",type);    prop.put("viewMode_links_" + c + "_text",text);    prop.put("viewMode_links_" + c + "_link",markup(wordArray,entry.getKey().toNormalform(true)));    prop.put("viewMode_links_" + c + "_url",entry.getKey().toNormalform(true));    prop.put("viewMode_links_" + c + "_rel",rel);    prop.put("viewMode_links_" + c + "_name",name);    dark=!dark;    c++;    i++;  }  return i;}  }
class C{  public void addKeyComponent(int value,int bits){  if (shift < Long.SIZE) {    if (shift + bits > Long.SIZE) {      shift=Long.SIZE;      key2=value;    } else {      key1+=((long)value) << shift;    }  } else {    key2+=((long)value) << (shift - Long.SIZE);  }  shift+=bits;}  }
class C{  public NoDuplicateValueGlobalConstraint(AbstractParameter<?,?>... parameters){  this.parameters=Arrays.asList(parameters);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.134 -0500",hash_original_method="3E0D5311E2AF98CBAC12E04C1647AAA5",hash_generated_method="E6B283644A8BA7769E8D561B4AED32BB") public AlertInfoHeader createAlertInfoHeader(URI alertInfo){  if (alertInfo == null)   throw new NullPointerException("null arg alertInfo");  AlertInfo a=new AlertInfo();  a.setAlertInfo(alertInfo);  return a;}  }
class C{  public static <K,V>void inTx(IgniteInternalCache<K,V> cache,TransactionConcurrency concurrency,TransactionIsolation isolation,IgniteInClosureX<IgniteInternalCache<K,V>> clo) throws IgniteCheckedException {  try (IgniteInternalTx tx=cache.txStartEx(concurrency,isolation)){    clo.applyx(cache);    tx.commit();  } }  }
class C{  public static ServerProcessCtl process(ASyncProcess parent,ProcessInfo pi,Trx trx){  log.fine("ServerProcess - " + pi);  MPInstance instance=null;  try {    instance=new MPInstance(Env.getCtx(),pi.getAD_Process_ID(),pi.getRecord_ID());  } catch (  Exception e) {    pi.setSummary(e.getLocalizedMessage());    pi.setError(true);    log.warning(pi.toString());    return null;  }catch (  Error e) {    pi.setSummary(e.getLocalizedMessage());    pi.setError(true);    log.warning(pi.toString());    return null;  }  if (!instance.save()) {    pi.setSummary(Msg.getMsg(Env.getCtx(),"ProcessNoInstance"));    pi.setError(true);    return null;  }  pi.setAD_PInstance_ID(instance.getAD_PInstance_ID());  ServerProcessCtl worker=new ServerProcessCtl(parent,pi,trx);  if (parent != null) {    worker.start();  } else {    worker.run();  }  return worker;}  }
class C{  public CanvasComponentBuilder listen(CanvasInteractListener listener){  listeners.add(listener);  return this;}  }
class C{  public void readConfiguration(Context context){  if (mConfigurationRead) {    return;  }  Resources res=context.getResources();  mEnabled=res.getBoolean(mEnabledRes);  mDiscoveryEndpoint=isSpecified(mDiscoveryEndpointRes) ? getUriResource(res,mDiscoveryEndpointRes,"discoveryEndpointRes") : null;  mAuthEndpoint=isSpecified(mAuthEndpointRes) ? getUriResource(res,mAuthEndpointRes,"authEndpointRes") : null;  mTokenEndpoint=isSpecified(mTokenEndpointRes) ? getUriResource(res,mTokenEndpointRes,"tokenEndpointRes") : null;  mRegistrationEndpoint=isSpecified(mRegistrationEndpointRes) ? getUriResource(res,mRegistrationEndpointRes,"registrationEndpointRes") : null;  mClientId=isSpecified(mClientIdRes) ? res.getString(mClientIdRes) : null;  mRedirectUri=getUriResource(res,mRedirectUriRes,"mRedirectUriRes");  mScope=res.getString(mScopeRes);  mConfigurationRead=true;}  }
class C{  public String toString(){  if (m_filterConfig == null)   return ("WFilter[]");  StringBuffer sb=new StringBuffer("WFilter[");  sb.append(m_filterConfig);  sb.append("]");  return (sb.toString());}  }
class C{  public JSONArray put(int index,Map value) throws JSONException {  put(index,new JSONObject(value));  return this;}  }
class C{  private static void checkUpdateU(String message,String update,boolean shouldSucceed){  try {    String m=(null == message) ? "" : message + " ";    if (shouldSucceed) {      String response=restTestHarness.validateUpdate(update);      if (response != null)       fail(m + "update was not successful: " + response);    } else {      String response=restTestHarness.validateErrorUpdate(update);      if (response != null)       fail(m + "update succeeded, but should have failed: " + response);    }  } catch (  SAXException e) {    throw new RuntimeException("Invalid XML",e);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_MULTIPLE_IS_A1__EXTENDS_NAME_1:    setExtendsName_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void putNextEntry(TarEntry entry) throws IOException {  closeCurrentEntry();  byte[] header=new byte[TarConstants.HEADER_BLOCK];  entry.writeEntryHeader(header);  write(header);  currentEntry=entry;}  }
class C{  public boolean forCluster(){  if (_exportGroupType != null) {    return _exportGroupType.equals(ExportGroupType.Cluster.name());  }  return false;}  }
class C{  public float update(){  amp=amod.update();  value=amp * (float)Math.sin(phase) + offset;  cyclePhase(frequency + fmod.update());  return value;}  }
class C{  private void validateParameters(VMPropertyHandler currentParameters,VMPropertyHandler newParameters,String customerOrgId,String instanceId) throws APPlatformException {  validateMemory(newParameters);  validateDataDiskMountPoints(newParameters);  if (currentParameters == null) {    return;  }  validateDataDiskSizeReduction(currentParameters,newParameters);  validateSystemDiskSizeReduction(currentParameters,newParameters);  validateWindowsSettings(newParameters);}  }
class C{  public Matrix minusEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] - B.A[i][j];    }  }  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if (inputHeader1 == null || inputHeader2 == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double x, y;    float progress=0;    WhiteboxRaster image1=new WhiteboxRaster(inputHeader1,"r");    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    int image1Min=(int)image1.getMinimumValue();    int image1Max=(int)image1.getMaximumValue();    int image1Range=image1Max - image1Min + 1;    WhiteboxRaster image2=new WhiteboxRaster(inputHeader2,"r");    if (rows != image2.getNumberRows() || cols != image2.getNumberColumns()) {      showFeedback("The input images must have the same dimensions (rows and columns).");      return;    }    double noData2=image2.getNoDataValue();    int image2Min=(int)image2.getMinimumValue();    int image2Max=(int)image2.getMaximumValue();    int image2Range=image2Max - image2Min + 1;    long[][] contingencyTable=new long[image1Range][image2Range];    double[] data1, data2;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        x=data1[col];        y=data2[col];        if (x != noData1 && y != noData2) {          contingencyTable[(int)(x - image1Min)][(int)(y - image2Min)]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    DecimalFormat df=new DecimalFormat("###,###,###,###");    String retstr=null;    retstr="CROSS-TABULATION REPORT\n\n";    retstr+="Input Image 1 (X):\t\t" + image1.getShortHeaderFile() + "\n";    retstr+="Input Image 2 (Y):\t\t" + image2.getShortHeaderFile() + "\n\n";    String contingency="\t\tImage 1\nImage 2";    for (int a=0; a < image1Range; a++) {      contingency+="\t" + (a + image1Min);    }    contingency+="\n";    for (int b=0; b < image2Range; b++) {      contingency+=(b + image2Min);      for (int a=0; a < image1Range; a++) {        contingency+="\t" + df.format(contingencyTable[a][b]);      }      contingency+="\n";    }    retstr+=contingency;    returnData(retstr);    image1.close();    image2.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Cursor(){  super(NAME,TextTemplateMessages.MESSAGES.variableDescriptionCursor());  setEvaluationString("");}  }
class C{  public void info(String msg,Object arg0){  innerLog(Level.INFO,null,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public void drawPolygon(int[] xPoints,int[] yPoints,int nPoints){  Polygon polygon=new Polygon(xPoints,yPoints,nPoints);  draw(polygon);}  }
class C{  public void assertFailed(final String sessionId){  assertNotNull("Queue was not initialized. One should call #init(int) before invoking #assertEquals()",latch);  try {    latch.await(20L,SECONDS);    unregisterSupplier.get();  } catch (  final InterruptedException e) {    throw new AssertionError("Time outed while waiting to receive all expected test events.",e);  }  final String expectedMessage=new SessionFailedEvent(sessionId).toString();  if (events.isEmpty()) {    fail("Expected to have '" + expectedMessage + "' as the session failed event among events but event queue was empty.");  }  final Collection<String> eventsForSession=events.get(sessionId);  if (!eventsForSession.contains(expectedMessage)) {    fail("Expected to have '" + expectedMessage + "' as the session failed event among events. Was:\n"+ toString(eventsForSession));  }}  }
class C{  @Override public void dispose(){  rightWI.dispose();  super.dispose();}  }
class C{  private static void appendPoint(StringBuffer d,float x,float y,SVGGeneratorContext gc){  d.append(gc.doubleString(x));  d.append(SPACE);  d.append(gc.doubleString(y));  d.append(SPACE);}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  timeSeries.sort();  functionValueMap.add(this,timeSeries.getValue(0));}  }
class C{  public boolean isEmpty(){  return events.isEmpty();}  }
class C{  public void transmitAll(JSONObject message){  List<PnPeer> peerList=this.pcClient.getPeers();  for (  PnPeer p : peerList) {    transmit(p.getId(),message);  }}  }
class C{  public XObject(){}  }
class C{  public static void rotateM(double[] m,int mOffset,double a,double x,double y,double z){synchronized (sTemp) {    setRotateM(sTemp,0,a,x,y,z);    multiplyMM(sTemp,16,m,mOffset,sTemp,0);    System.arraycopy(sTemp,16,m,mOffset,16);  }}  }
class C{  public AppContext createCustomer(Customer customer,String userLogin,String userPassword,String userEmail,List<Client> clients){  AppContext ctx=ServiceUtils.getInstance().getRootUserContext(customer.getCustomerId());  if (StringUtils.isEmpty(customer.getName())) {    customer.setName(customer.getCustomerId());  }  customer=store(ctx,customer);  User user=new User(new UserPK(customer.getCustomerId()),userLogin.toLowerCase(),userPassword);  user.setEmail(userEmail);  user=UserServiceBaseImpl.getInstance().store(ctx,user);  Set<AccessRight> access=customer.getAccessRights();  access.add(new AccessRight(Role.OWNER,user.getOid(),null));  factory.getDAO(Customer.class).update(ctx,customer);  access=customer.getAccessRights();  UserGroup superGroup=DAOFactory.getDAOFactory().getDAO(UserGroup.class).create(ctx,new UserGroup(new UserGroupPK(ctx.getCustomerId(),CoreConstants.CUSTOMER_GROUP_SUPER),"Super users"));  AccessRight owner=new AccessRight();  owner.setRole(Role.OWNER);  owner.setGroupId(superGroup.getOid());  access.add(owner);  UserGroup adminGroup=DAOFactory.getDAOFactory().getDAO(UserGroup.class).create(ctx,new UserGroup(new UserGroupPK(ctx.getCustomerId(),CoreConstants.CUSTOMER_GROUP_ADMIN),"Administrators"));  AccessRight admin=new AccessRight();  admin.setRole(Role.WRITE);  admin.setGroupId(adminGroup.getOid());  access.add(admin);  factory.getDAO(Customer.class).update(ctx,customer);  user.getGroups().add(superGroup.getOid());  user.setPassword(null);  user=UserServiceBaseImpl.getInstance().store(ctx,user);  for (  Client client : clients) {    client.setCustomerId(customer.getCustomerId());    Client newClient=DAOFactory.getDAOFactory().getDAO(Client.class).create(ctx,client);    client.setId(newClient.getId());  }  Client client=clients.get(0);  AppContext anonymousCtx=new AppContext.Builder(customer.getCustomerId(),client.getId().getClientId()).build();  AccessToken token;  try {    AuthServiceImpl authService=AuthServiceImpl.getInstance();    token=authService.authAndReturnToken(anonymousCtx,client.getId(),null,userLogin,userPassword);    return new AppContext.Builder(token,user).build();  } catch (  DuplicateUserException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){  super.onScrolled(recyclerView,dx,dy);  LinearLayoutManager layoutManager=(LinearLayoutManager)recyclerView.getLayoutManager();  int totalItemCount=layoutManager.getItemCount();  int lastVisibleItem=layoutManager.findLastVisibleItemPosition();  if (!loading && totalItemCount < (lastVisibleItem + Constant.VISIBLE_THRESHOLD)) {    new ArticleTask(mActivity).execute(mAdapter.getBottomArticleId());    loading=true;  }}  }
class C{  public void addCreatedResource(Location location,Resource resource){  resourceList.add(resource);  locationToResourceMap.put(location,resource);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.977 -0500",hash_original_method="0FB4566239B43452682D3C6768E6D3AE",hash_generated_method="B9CC032117011CACFB53540192F33883") @DSSafe(DSCat.GUI) public void addAll(T... items){synchronized (mLock) {    if (mOriginalValues != null) {      Collections.addAll(mOriginalValues,items);    } else {      Collections.addAll(mObjects,items);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public LogicalResponse delete(final String path) throws VaultException {  int retryCount=0;  while (true) {    try {      final RestResponse restResponse=new Rest().url(config.getAddress() + "/v1/" + path).header("X-Vault-Token",config.getToken()).connectTimeoutSeconds(config.getOpenTimeout()).readTimeoutSeconds(config.getReadTimeout()).sslPemUTF8(config.getSslPemUTF8()).sslVerification(config.isSslVerify() != null ? config.isSslVerify() : null).delete();      if (restResponse.getStatus() != 204) {        throw new VaultException("Vault responded with HTTP status code: " + restResponse.getStatus(),restResponse.getStatus());      }      return new LogicalResponse(restResponse,retryCount);    } catch (    RuntimeException|VaultException|RestException e) {      if (retryCount < config.getMaxRetries()) {        retryCount++;        try {          final int retryIntervalMilliseconds=config.getRetryIntervalMilliseconds();          Thread.sleep(retryIntervalMilliseconds);        } catch (        InterruptedException e1) {          e1.printStackTrace();        }      } else       if (e instanceof VaultException) {        throw (VaultException)e;      } else {        throw new VaultException(e);      }    }  }}  }
class C{  public AddMarketingPermissionException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TGETTER__DECLARED_TYPE_REF:    return declaredTypeRef != null;}return super.eIsSet(featureID);}  }
class C{  public final void testOn() throws IOException {  for (int ii=0; ii < algorithmName.length; ii++) {    try {      MessageDigest md=MessageDigest.getInstance(algorithmName[ii]);      InputStream is=new ByteArrayInputStream(myMessage);      DigestInputStream dis=new DigestInputStream(is,md);      dis.on(false);      for (int i=0; i < MY_MESSAGE_LEN - 1; i++) {        dis.read();      }      dis.on(true);      dis.read();      byte[] digest=dis.getMessageDigest().digest();      assertFalse(Arrays.equals(digest,MDGoldenData.getDigest(algorithmName[ii])) || Arrays.equals(digest,MDGoldenData.getDigest(algorithmName[ii] + "_NU")));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public Paragraph removeParagraph(String user,String paragraphId){  removeAllAngularObjectInParagraph(user,paragraphId);  ResourcePoolUtils.removeResourcesBelongsToParagraph(getId(),paragraphId);synchronized (paragraphs) {    Iterator<Paragraph> i=paragraphs.iterator();    while (i.hasNext()) {      Paragraph p=i.next();      if (p.getId().equals(paragraphId)) {        index.deleteIndexDoc(this,p);        i.remove();        if (noteEventListener != null) {          noteEventListener.onParagraphRemove(p);        }        return p;      }    }  }  return null;}  }
class C{  private void removeNPC(String name){  SpeakerNPC npc=NPCList.get().get(name);  if (npc == null) {    return;  }  npc.getZone().remove(npc);}  }
class C{  public List<Tree<L>> subTreeList(){  return (List<Tree<L>>)subTrees(new ArrayList<Tree<L>>());}  }
class C{  public static List<String> splitLines(String text){  List<String> list=new ArrayList<>();  if (text != null) {    String lines[]=text.split("\r?\n|\r");    list.addAll(Arrays.asList(lines));  }  return list;}  }
class C{  public BlockChain(Context context,BlockStore blockStore) throws BlockStoreException {  this(context,new ArrayList<Wallet>(),blockStore);}  }
class C{  static void start(Context context){  context.startService(getCheckIntent(context));}  }
class C{  public Feature nextFeature(){  Feature f=null;  if (hasNextSFeature()) {    f=nextSFeature();  } else   if (hasNextEFeature()) {    f=nextEFeature();  } else {  }  return f;}  }
class C{  private Map<Key,Array> store(Class clazz){  Method[] methods=clazz.getMethods();  Map<Key,Array> methodsMap=new ConcurrentHashMap<Key,Array>();  for (int i=0; i < methods.length; i++) {    storeMethod(methods[i],methodsMap);  }  map.put(clazz,methodsMap);  return methodsMap;}  }
class C{  public double seriesDistance(double[][] series1,double[][] series2) throws Exception {  if (series1.length == series2.length) {    Double res=0D;    for (int i=0; i < series1.length; i++) {      res=res + distance2(series1[i],series2[i]);    }    return Math.sqrt(res);  } else {    throw new Exception("Exception in Euclidean distance: array lengths are not equal");  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Analyzer addAll(String name,Collection<NondominatedPopulation> results){  for (  NondominatedPopulation result : results) {    add(name,result);  }  return this;}  }
class C{  public static CommMessage createFaultResponse(CommMessage request,FaultException fault){  return new CommMessage(request.id,request.operationName,"/",Value.create(),fault);}  }
class C{  public static VAlarm email(Trigger trigger,String subject,String body,String... recipients){  return email(trigger,subject,body,Arrays.asList(recipients));}  }
class C{  public static Map<String,HealthCheck.Result> runHealthChecks(){  return DEFAULT_REGISTRY.runHealthChecks();}  }
class C{  public static boolean applyCount(Context context,int badgeCount){  try {    applyCountOrThrow(context,badgeCount);    return true;  } catch (  ShortcutBadgeException e) {    Log.e(LOG_TAG,"Unable to execute badge",e);    return false;  }}  }
class C{  public MessageBuilder appendString(String text){  builder.append(text);  return this;}  }
class C{  public static void signedSub(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String firstOperand,final String secondOperand,final String resultOperand,final String trueResult){  final String tmpResult=environment.getNextVariableString();  final String twoComplementfirstOperand=environment.getNextVariableString();  final OperandSize dw=OperandSize.DWORD;  final OperandSize qw=OperandSize.QWORD;  final OperandSize bt=OperandSize.BYTE;  long baseOffset=offset;  instructions.add(ReilHelpers.createXor(baseOffset++,dw,firstOperand,dw,String.valueOf(0xFFFFFFFFL),dw,twoComplementfirstOperand));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,twoComplementfirstOperand,dw,secondOperand,qw,tmpResult));  instructions.add(ReilHelpers.createAdd(baseOffset++,qw,tmpResult,bt,String.valueOf(1L),qw,trueResult));  instructions.add(ReilHelpers.createAnd(baseOffset,qw,trueResult,dw,String.valueOf(0xFFFFFFFFL),dw,resultOperand));}  }
class C{  private static double area2(Coordinate p1,Coordinate p2,Coordinate p3){  return (p2.x - p1.x) * (p3.y - p1.y) - (p3.x - p1.x) * (p2.y - p1.y);}  }
class C{  void nullImage(){  this.iter=iterator();  this.iter.add(HeaderCard.saveNewHeaderCard(SIMPLE.key(),SIMPLE.comment(),false).setValue(true));  this.iter.add(HeaderCard.saveNewHeaderCard(BITPIX.key(),BITPIX.comment(),false).setValue(BasicHDU.BITPIX_BYTE));  this.iter.add(HeaderCard.saveNewHeaderCard(NAXIS.key(),NAXIS.comment(),false).setValue(0));  this.iter.add(HeaderCard.saveNewHeaderCard(EXTEND.key(),EXTEND.comment(),false).setValue(true));}  }
class C{  private static void fixKillQuestsSlots(final Player player){  for (  String questSlot : KILL_QUEST_NAMES.keySet()) {    if (player.getQuest(questSlot) == null) {      continue;    }    if (player.getQuest(questSlot).equals("start")) {      final List<String> creatures=KILL_QUEST_NAMES.get(questSlot).second();      StringBuilder sb=new StringBuilder("");      for (int i=0; i < creatures.size(); i++) {        sb.append(creatures.get(i) + ",0,1,0,0,");      }      final String result=sb.toString();      player.setQuest(questSlot,KILL_QUEST_NAMES.get(questSlot).first(),result.substring(0,result.length() - 1));    }  }}  }
class C{  public static Object min(GeoTimeSerie gts) throws WarpScriptException {  Object[] parms=new Object[8];  int i=0;  parms[i++]=0L;  parms[i++]=null;  parms[i++]=null;  parms[i++]=Arrays.copyOf(gts.ticks,gts.values);  if (null != gts.locations) {    parms[i++]=Arrays.copyOf(gts.locations,gts.values);  } else {    parms[i++]=new long[gts.values];    Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_LOCATION);  }  if (null != gts.elevations) {    parms[i++]=Arrays.copyOf(gts.elevations,gts.values);  } else {    parms[i++]=new long[gts.values];    Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_ELEVATION);  }  parms[i++]=new Object[gts.values];  parms[i++]=null;  for (int j=0; j < gts.values; j++) {    ((Object[])parms[6])[j]=valueAtIndex(gts,j);  }  Object[] result=(Object[])((WarpScriptAggregatorFunction)WarpScriptLib.getFunction(WarpScriptLib.MAPPER_MIN)).apply(parms);  return result[3];}  }
class C{  synchronized boolean start(){  if (DEBUG)   Log.v(TAG,"readyStart:");  mStatredCount++;  if ((mEncoderCount > 0) && (mStatredCount == mEncoderCount)) {    mMediaMuxer.start();    mIsStarted=true;    notifyAll();    if (DEBUG)     Log.v(TAG,"MediaMuxer started:");  }  return mIsStarted;}  }
class C{  public Interval domNumberOfBees(){  return new Interval(1,2000);}  }
class C{  public void paintTableHeaderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void testBug26959() throws Exception {  if (!serverSupportsStoredProcedures()) {    return;  }  createProcedure("testBug26959","(_ACTION varchar(20),\n`/*dumb-identifier-1*/` int,\n`#dumb-identifier-2` int,\n`--dumb-identifier-3` int," + "\n_CLIENT_ID int, -- ABC\n_LOGIN_ID  int, # DEF\n_WHERE varchar(2000),\n_SORT varchar(2000)," + "\n out _SQL varchar(/* inline right here - oh my gosh! */ 8000),\n _SONG_ID int,\n  _NOTES varchar(2000),\n out _RESULT varchar(10)"+ "\n /*\n ,    -- Generic result parameter"+ "\n out _PERIOD_ID int,         -- Returns the period_id. Useful when using @PREDEFLINK to return which is the last period"+ "\n   _SONGS_LIST varchar(8000),\n  _COMPOSERID int,\n  _PUBLISHERID int,"+ "\n   _PREDEFLINK int        -- If the user is accessing through a predefined link: 0=none  1=last period\n */) BEGIN SELECT 1; END");  createProcedure("testBug26959_1","(`/*id*/` /* before type 1 */ varchar(20)," + "/* after type 1 */ OUT result2 DECIMAL(/*size1*/10,/*size2*/2) /* p2 */)BEGIN SELECT action, result; END");  this.conn.prepareCall("{call testBug26959(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}").close();  this.rs=this.conn.getMetaData().getProcedureColumns(this.conn.getCatalog(),null,"testBug26959","%");  String[] parameterNames=new String[]{"_ACTION","/*dumb-identifier-1*/","#dumb-identifier-2","--dumb-identifier-3","_CLIENT_ID","_LOGIN_ID","_WHERE","_SORT","_SQL","_SONG_ID","_NOTES","_RESULT"};  int[] parameterTypes=new int[]{Types.VARCHAR,Types.INTEGER,Types.INTEGER,Types.INTEGER,Types.INTEGER,Types.INTEGER,Types.VARCHAR,Types.VARCHAR,Types.VARCHAR,Types.INTEGER,Types.VARCHAR,Types.VARCHAR};  int[] direction=new int[]{java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnOut,java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnOut};  int[] precision=new int[]{20,10,10,10,10,10,2000,2000,8000,10,2000,10};  int index=0;  while (this.rs.next()) {    assertEquals(parameterNames[index],this.rs.getString("COLUMN_NAME"));    assertEquals(parameterTypes[index],this.rs.getInt("DATA_TYPE"));switch (index) {case 0:case 6:case 7:case 8:case 10:case 11:      assertEquals(precision[index],this.rs.getInt("LENGTH"));    break;default :  assertEquals(precision[index],this.rs.getInt("PRECISION"));}assertEquals(direction[index],this.rs.getInt("COLUMN_TYPE"));index++;}this.rs.close();index=0;parameterNames=new String[]{"/*id*/","result2"};parameterTypes=new int[]{Types.VARCHAR,Types.DECIMAL};precision=new int[]{20,10};direction=new int[]{java.sql.DatabaseMetaData.procedureColumnIn,java.sql.DatabaseMetaData.procedureColumnOut};int[] scale=new int[]{0,2};this.conn.prepareCall("{call testBug26959_1(?, ?)}").close();this.rs=this.conn.getMetaData().getProcedureColumns(this.conn.getCatalog(),null,"testBug26959_1","%");while (this.rs.next()) {assertEquals(parameterNames[index],this.rs.getString("COLUMN_NAME"));assertEquals(parameterTypes[index],this.rs.getInt("DATA_TYPE"));switch (index) {case 0:case 6:case 7:case 8:case 10:case 11:assertEquals(precision[index],this.rs.getInt("LENGTH"));break;default :assertEquals(precision[index],this.rs.getInt("PRECISION"));}assertEquals(scale[index],this.rs.getInt("SCALE"));assertEquals(direction[index],this.rs.getInt("COLUMN_TYPE"));index++;}}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int arrayLength=s.readInt();  elementData=new Object[arrayLength];  for (int i=0; i < size; i++)   elementData[i]=s.readObject();}  }
class C{  public static boolean isPropertyLicensed(final String name){  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.EVENT_RAISING_EXPRESSION;}  }
class C{  public JAccessDescriptions(String title){  this.title=title;  initComponents();}  }
class C{  protected Object newInstance(Class c) throws SQLException {  try {    return c.newInstance();  } catch (  InstantiationException e) {    throw new SQLException("Cannot create " + c.getName() + ": "+ e.getMessage());  }catch (  IllegalAccessException e) {    throw new SQLException("Cannot create " + c.getName() + ": "+ e.getMessage());  }}  }
class C{  private static int complexityOf(Tree tree){  tree.indexLeaves();  tree.percolateHeads(new CollinsHeadFinder());  tree.percolateHeadIndices();  Set<Dependency<Label,Label,Object>> deps=tree.dependencies();  int complexity=0;  for (  Dependency<Label,Label,Object> dep : deps) {    if (!(dep instanceof UnnamedConcreteDependency)) {      throw new RuntimeException("Cannot measure syntactic complexity.");    }    UnnamedConcreteDependency uDep=(UnnamedConcreteDependency)dep;    int headIndex=uDep.getGovernorIndex();    int depIndex=uDep.getDependentIndex();    complexity+=Math.abs(headIndex - depIndex);  }  return complexity;}  }
class C{  public MultisigAggregateModificationTransaction(final TimeInstant timeStamp,final Account sender,final Collection<MultisigCosignatoryModification> cosignatoryModifications){  this(timeStamp,sender,cosignatoryModifications,null);}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  try {    Object obj=in.readObject();    if (obj == null) {      sender=null;    } else     if (obj instanceof String) {      sender=new MailAddress((String)obj);    } else     if (obj instanceof MailAddress) {      sender=(MailAddress)obj;    }  } catch (  ParseException pe) {    throw new IOException("Error parsing sender address: " + pe.getMessage());  }  recipients=(Collection<MailAddress>)in.readObject();  state=(String)in.readObject();  errorMessage=(String)in.readObject();  name=(String)in.readObject();  remoteHost=(String)in.readObject();  remoteAddr=(String)in.readObject();  setLastUpdated((Date)in.readObject());  try {    attributes=(HashMap<String,Object>)in.readObject();  } catch (  OptionalDataException ode) {    if (ode.eof) {      attributes=new HashMap<String,Object>();    } else {      throw ode;    }  }}  }
class C{  public void checkOwnsNoSchemas(){  for (  Schema s : database.getAllSchemas()) {    if (this == s.getOwner()) {      throw DbException.get(ErrorCode.CANNOT_DROP_2,getName(),s.getName());    }  }}  }
class C{  public BeanContextSupport(BeanContext peer,Locale locale,boolean designTime,boolean okToUseGui){  super(peer);  if (locale == null) {    locale=Locale.getDefault();  }  this.locale=locale;  this.designTime=designTime;  this.okToUseGui=okToUseGui;  initialize();}  }
class C{  public static void validateMixedElementIds(final Class<? extends Element> clazz,final Object... ids) throws IllegalArgumentException {  if (ids.length > 1) {    final boolean element=clazz.isAssignableFrom(ids[0].getClass());    for (int i=1; i < ids.length; i++) {      if (clazz.isAssignableFrom(ids[i].getClass()) != element)       throw Graph.Exceptions.idArgsMustBeEitherIdOrElement();    }  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___IS_PROVIDED_BY_RUNTIME:      return TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER___IS_PROVIDED_BY_RUNTIME;case TypesPackage.TYPE___GET_TYPE_ACCESS_MODIFIER:    return TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER___GET_TYPE_ACCESS_MODIFIER;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == AccessibleTypeElement.class) {switch (baseOperationID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_PROVIDED_BY_RUNTIME:return TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER___IS_PROVIDED_BY_RUNTIME;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___GET_TYPE_ACCESS_MODIFIER:return TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER___GET_TYPE_ACCESS_MODIFIER;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT___IS_EXPORTED:return TypesPackage.DECLARED_TYPE_WITH_ACCESS_MODIFIER___IS_EXPORTED;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static double pow(double value,double power){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);  }  if (power == 0.0) {    return 1.0;  } else   if (power == 1.0) {    return value;  }  if (value <= 0.0) {    int powerInfo;    if (Math.abs(power) >= (TWO_POW_52 * 2)) {      powerInfo=1;    } else {      if (Math.abs(power) <= (double)Integer.MAX_VALUE) {        int powerAsInt=(int)power;        if (power == (double)powerAsInt) {          powerInfo=((powerAsInt & 1) == 0) ? 1 : -1;        } else {          powerInfo=0;        }      } else {        long powerAsLong=(long)power;        if (power == (double)powerAsLong) {          powerInfo=((powerAsLong & 1) == 0) ? 1 : -1;        } else {          if (power != power) {            return Double.NaN;          }          powerInfo=0;        }      }    }    if (value == 0.0) {      if (power < 0.0) {        return (powerInfo < 0) ? 1 / value : Double.POSITIVE_INFINITY;      } else {        return (powerInfo < 0) ? value : 0.0;      }    } else {      if (value == Double.NEGATIVE_INFINITY) {        if (powerInfo < 0) {          return (power < 0.0) ? -0.0 : Double.NEGATIVE_INFINITY;        } else {          return (power < 0.0) ? 0.0 : Double.POSITIVE_INFINITY;        }      } else {        return (powerInfo != 0) ? powerInfo * FastMath.exp(power * FastMath.log(-value)) : Double.NaN;      }    }  } else {    return FastMath.exp(power * FastMath.log(value));  }}  }
class C{  public synchronized void stop(){  Log.d(TAG,"stop");  if (mConnectThread != null) {    mConnectThread.cancel();    mConnectThread=null;  }  if (mConnectedThread != null) {    mConnectedThread.cancel();    mConnectedThread=null;  }  if (mAcceptThread != null) {    mAcceptThread.cancel();    mAcceptThread=null;  }  setState(STATE_NONE);}  }
class C{  public Creature calculateNextCreature(final int questLevel){  final List<Creature> possibleCreaturesToSpawn=new ArrayList<Creature>();  int lastLevel=0;  for (  final Creature creature : sortedCreatures) {    if (creature.getLevel() > questLevel) {      break;    }    if (creature.getLevel() > lastLevel) {      possibleCreaturesToSpawn.clear();      lastLevel=creature.getLevel();    }    possibleCreaturesToSpawn.add(creature);  }  Creature creatureToSpawn=null;  if (possibleCreaturesToSpawn.size() == 0) {    creatureToSpawn=sortedCreatures.get(sortedCreatures.size() - 1);  } else {    Collections.shuffle(possibleCreaturesToSpawn);    creatureToSpawn=possibleCreaturesToSpawn.get(0);  }  return creatureToSpawn;}  }
class C{  public static void CF1(double[] x,double[] f,double[] c,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  double N=10.0;  double a=1.0;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.pow(x[0],0.5 * (1.0 + 3.0 * (j - 2.0) / (nx - 2.0)));    if (j % 2 == 1) {      sum1+=yj * yj;      count1++;    } else {      sum2+=yj * yj;      count2++;    }  }  f[0]=x[0] + 2.0 * sum1 / (double)count1;  f[1]=1.0 - x[0] + 2.0 * sum2 / (double)count2;  c[0]=f[1] + f[0] - a * Math.abs(Math.sin(N * PI * (f[0] - f[1] + 1.0))) - 1.0;}  }
class C{  protected static List<DiagTest> convertStringToDiagTestList(String stdOut){  if (stdOut == null || stdOut.isEmpty()) {    return null;  }  List<DiagTest> diagTests=new ArrayList<DiagTest>();  Pattern paramValPattern=Pattern.compile("(.*)\\s+\\[(.*)\\]");  Pattern testPattern=Pattern.compile("^\\*\\s+(\\S.*):\\s+\\[(.*)\\]");  String[] tests=stdOut.split("\n");  List<TestParam> paramStrs=null;  for (  String test : tests) {    Matcher matcher=testPattern.matcher(test.trim());    if (matcher.find()) {      paramStrs=new ArrayList<TestParam>();      diagTests.add(new DiagTest(matcher.group(1),matcher.group(2),paramStrs));    } else {      String[] keyVal=test.split("=");      if (keyVal.length >= 2) {        Matcher paramValMatcher=paramValPattern.matcher(keyVal[1]);        if (paramValMatcher.find()) {          paramStrs.add(new TestParam(keyVal[0].trim(),paramValMatcher.group(1),paramValMatcher.group(2)));        } else {          paramStrs.add(new TestParam(keyVal[0].trim(),keyVal[1]));        }      }    }  }  return diagTests;}  }
class C{  public T caseThisTypeRef(ThisTypeRef object){  return null;}  }
class C{  public int length(){  return nameValuePairs.size();}  }
class C{  public static long adjustTimeout(long tOut){  return Math.round(tOut * Utils.TIMEOUT_FACTOR);}  }
class C{  public FloodRed(Rectangle bounds,Paint paint){  super();  ColorModel cm=GraphicsUtil.sRGB_Unpre;  int defSz=AbstractTiledRed.getDefaultTileSize();  int tw=bounds.width;  if (tw > defSz)   tw=defSz;  int th=bounds.height;  if (th > defSz)   th=defSz;  SampleModel sm=cm.createCompatibleSampleModel(tw,th);  init((CachableRed)null,bounds,cm,sm,0,0,null);  raster=Raster.createWritableRaster(sm,new Point(0,0));  BufferedImage offScreen=new BufferedImage(cm,raster,cm.isAlphaPremultiplied(),null);  Graphics2D g=GraphicsUtil.createGraphics(offScreen);  g.setPaint(paint);  g.fillRect(0,0,bounds.width,bounds.height);  g.dispose();}  }
class C{  public Builder readOnly(){  return set("readOnly",1);}  }
class C{  public Matrix3d transpose(){  return transpose(this);}  }
class C{  public static void writeShort(byte[] memory,int index,short value){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? null : si.getCharacterList();}  }
class C{  public static SimEvent cancel(int src,Predicate p){  SimEvent ev=null;  Iterator<SimEvent> iter=future.iterator();  while (iter.hasNext()) {    ev=iter.next();    if (ev.getSource() == src && p.match(ev)) {      iter.remove();      break;    }  }  return ev;}  }
class C{  public void reset(){  curves=new Vector();  invalidateBounds();}  }
class C{  protected VisorQueryCleanupJob(Collection<String> arg,boolean debug){  super(arg,debug);}  }
class C{  public void sub(int level,int maxLevels,int stepIndex,String stepId){  WorkflowStepCompleter.stepExecuting(stepId);  if (sleepMillis > 0) {    try {      Thread.sleep(sleepMillis);    } catch (    Exception ex) {    }  }  if (hasInjectedFailure(level,stepIndex)) {    log.info("Injecting failure in step: " + genMsg(level,stepIndex,"sub"));    ServiceCoded coded=WorkflowException.errors.unforeseen();    WorkflowStepCompleter.stepFailed(stepId,coded);    return;  }  if (++level >= maxLevels) {    WorkflowStepCompleter.stepSucceded(stepId);  } else {    String workflowMapping="generate3StepWF:" + stepId + ":"+ level;    if (workflowsKickedOff.contains(workflowMapping)) {      printLog("Idempotent check: already created/executed workflow from this step, not creating another one: " + workflowMapping);    } else {      printLog("Generating a new 3 step WF");      generate3StepWF(level,maxLevels,stepId);      workflowsKickedOff.add(workflowMapping);    }  }}  }
class C{  private void createEmbeddedFields(MetaClass metaClass,Entity item){  for (  MetaProperty metaProperty : metaClass.getProperties()) {    if (isEmbedded(metaProperty)) {      MetaClass embeddedMetaClass=metaProperty.getRange().asClass();      Entity embedded=item.getValue(metaProperty.getName());      if (embedded == null) {        embedded=metadata.create(embeddedMetaClass);        item.setValue(metaProperty.getName(),embedded);      }      createEmbeddedFields(embeddedMetaClass,embedded);    }  }}  }
class C{  public void mouseClicked(MouseEvent e){}  }
class C{  public static Object highest(GeoTimeSerie gts) throws WarpScriptException {  Object[] parms=new Object[6];  int i=0;  parms[i++]=0L;  parms[i++]=0L;  parms[i++]=Arrays.copyOf(gts.ticks,gts.values);  if (null != gts.locations) {    parms[i++]=Arrays.copyOf(gts.locations,gts.values);  } else {    parms[i++]=new long[gts.values];    Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_LOCATION);  }  if (null != gts.elevations) {    parms[i++]=Arrays.copyOf(gts.elevations,gts.values);  } else {    parms[i++]=new long[gts.values];    Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_ELEVATION);  }  parms[i++]=new Object[gts.values];  for (int j=0; j < gts.values; j++) {    ((Object[])parms[5])[j]=valueAtIndex(gts,j);  }  Object[] result=(Object[])((WarpScriptAggregatorFunction)WarpScriptLib.getFunction(WarpScriptLib.MAPPER_HIGHEST)).apply(parms);  return result[3];}  }
class C{  public final Object elementAt(int i){  return m_map[i];}  }
class C{  static boolean equals(Object o1,Object o2){  return o1 == o2 || (o1 != null && o2 != null && o1.equals(o2));}  }
class C{  public DocTax(int C_Tax_ID,String name,BigDecimal rate,BigDecimal taxBaseAmt,BigDecimal amount,boolean salesTax){  m_C_Tax_ID=C_Tax_ID;  m_name=name;  m_rate=rate;  m_amount=amount;  m_salesTax=salesTax;}  }
class C{  public void addFailure(InternalDistributedMember member,Throwable cause){  this.members.add(member);  this.causes.add(cause);}  }
class C{  public MRefList(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof CustomXYURLGenerator)) {    return false;  }  CustomXYURLGenerator that=(CustomXYURLGenerator)obj;  int listCount=getListCount();  if (listCount != that.getListCount()) {    return false;  }  for (int series=0; series < listCount; series++) {    int urlCount=getURLCount(series);    if (urlCount != that.getURLCount(series)) {      return false;    }    for (int item=0; item < urlCount; item++) {      String u1=getURL(series,item);      String u2=that.getURL(series,item);      if (u1 != null) {        if (!u1.equals(u2)) {          return false;        }      } else {        if (u2 != null) {          return false;        }      }    }  }  return true;}  }
class C{  public int maxNumSegments(){  return maxNumSegments;}  }
class C{  public Word2VecModelThrift(Word2VecModelThrift other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetVocab()) {    List<String> __this__vocab=new ArrayList<String>(other.vocab);    this.vocab=__this__vocab;  }  this.layerSize=other.layerSize;  if (other.isSetVectors()) {    List<Double> __this__vectors=new ArrayList<Double>(other.vectors);    this.vectors=__this__vectors;  }}  }
class C{  public void markGoal(IGraphEntity gl){  goal=getKey(gl);}  }
class C{  public void componentResized(ComponentEvent e){  setBufferDirty(true);  super.componentResized(e);}  }
class C{  public void createSubUsageScenario10_changeServiceIdAndUnitInBP() throws Exception {  VendorData supplierData=setupNewSupplier("2012-11-01 08:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomer(supplierData);  VOServiceDetails serviceDetails=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,"SCENARIO10_PERUNIT_WEEK_SERVICE");  UserGroup unit1=createUnitAndAssignVisibleService(customerData,"Unit1","Unit1 reference",serviceDetails,supplierData.getMarketplace(0));  UserGroup unit2=createUnitAndAssignVisibleService(customerData,"Unit2","Unit2 reference",serviceDetails,supplierData.getMarketplace(0));  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3));  VOSubscriptionDetails subDetails=subscribeWithAssignToUnit(customerData.getAdminUser(),"SCENARIO10_PERUNIT_WEEK_CHSRVINBP",unit1.getKey(),serviceDetails,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3),"ADMIN");  VOServiceDetails upgradeService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,serviceDetails,"SCENARIO10_PERUNIT_WEEK_UPGRADE_SERVICE");  VOSubscriptionDetails upgradedSubDetails=upgrade(customerData.getAdminUser(),subDetails,upgradeService,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3));  serviceDetails=updateServiceId(supplierData,serviceDetails,"SCENARIO10_PERUNIT_WEEK_NEW_SERVICE","2012-12-20 00:00:00");  upgradedSubDetails=changeSubscriptionUnit(customerData.getAdminKey(),upgradedSubDetails,unit2.getKey(),"2012-12-20 00:00:00");  unsubscribe(customerData.getAdminKey(),upgradedSubDetails.getSubscriptionId(),DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.weeksToMillis(1.5));  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("SCENARIO10_PERUNIT_WEEK_CHSRVINBP",new TestData(supplierData));}  }
class C{  public Builder withRequestTimeout(int requestTimeout){  properties.setProperty(NettyOptions.REQUEST_TIMEOUT,String.valueOf(Assert.argNot(requestTimeout,requestTimeout <= 0,"request timeout must be positive")));  return this;}  }
class C{  public OptionCompleter(){  super();  options=new HashMap<String,String>();}  }
class C{  public final void applyOptions() throws IOException {  boolean restartRequired=false;  for (int i=0, size=OPTIONS_PANE_LIST.size(); i < size; i++) {    OptionsPane op=OPTIONS_PANE_LIST.get(i);    restartRequired|=op.applyOptions();  }  if (restartRequired)   GUIMediator.showMessage(I18n.tr("One or more options will take effect the next time FrostWire is restarted."));  SettingsWarningManager.checkSettingsLoadSaveFailure();}  }
class C{  public DoubleMatrix2D mult(DoubleMatrix2D A,DoubleMatrix2D B){  return A.zMult(B,null);}  }
class C{  public void testSubtractEqualScaleNegNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=-10;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="1.231212478987482241196379486791669716433397522230419E+61";  int cScale=-10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.subtract(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){  db.execSQL("DROP TABLE IF EXISTS " + CharacterContract.CharacterEntry.TABLE_NAME);  onCreate(db);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.224 -0400",hash_original_method="EFCF335DDCF1382916955B39D3B5FAD3",hash_generated_method="6322580611D29DA1285271BC29701D8D") public Object encode(Object pObject) throws EncoderException {  if (pObject == null) {    return null;  } else   if (pObject instanceof byte[]) {    return encode((byte[])pObject);  } else   if (pObject instanceof String) {    return encode((String)pObject);  } else {    throw new EncoderException("Objects of type " + pObject.getClass().getName() + " cannot be quoted-printable encoded");  }}  }
class C{  public boolean hasAdditionalRoleSets(){  return hasRepeatingExtension(AdditionalRoleSet.class);}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  private IntPair complement(IntPair nfa){  if (Options.DEBUG) {    Out.debug("complement for " + nfa);    Out.debug("NFA is :" + Out.NL + this);  }  int dfaStart=nfa.end + 1;  epsilonFill();  Map<StateSet,Integer> dfaStates=new HashMap<StateSet,Integer>(numStates);  List<StateSet> dfaList=new ArrayList<StateSet>(numStates);  int numDFAStates=0;  int currentDFAState=0;  StateSet currentState, newState;  newState=epsilon[nfa.start];  dfaStates.put(newState,numDFAStates);  dfaList.add(newState);  if (Options.DEBUG)   Out.debug("pos DFA start state is :" + Out.NL + dfaStates+ Out.NL+ Out.NL+ "ordered :"+ Out.NL+ dfaList);  currentDFAState=0;  while (currentDFAState <= numDFAStates) {    currentState=dfaList.get(currentDFAState);    for (int input=0; input < numInput; input++) {      newState=DFAEdge(currentState,input);      if (newState.containsElements()) {        Integer nextDFAState=dfaStates.get(newState);        if (nextDFAState != null) {          addTransition(dfaStart + currentDFAState,input,dfaStart + nextDFAState);        } else {          if (Options.dump)           Out.print("+");          numDFAStates++;          dfaStates.put(newState,numDFAStates);          dfaList.add(newState);          addTransition(dfaStart + currentDFAState,input,dfaStart + numDFAStates);        }      }    }    currentDFAState++;  }  if (Options.DEBUG)   Out.debug("dfa finished, nfa is now :" + Out.NL + this);  int start=dfaStart + numDFAStates + 1;  int error=dfaStart + numDFAStates + 2;  int end=dfaStart + numDFAStates + 3;  addEpsilonTransition(start,dfaStart);  for (int i=0; i < numInput; i++)   addTransition(error,i,error);  addEpsilonTransition(error,end);  for (int s=0; s <= numDFAStates; s++) {    currentState=dfaList.get(s);    currentDFAState=dfaStart + s;    if (!currentState.isElement(nfa.end))     addEpsilonTransition(currentDFAState,end);    for (int i=0; i < numInput; i++)     if (table[currentDFAState][i] == null)     addTransition(currentDFAState,i,error);  }  if (live == null || live.length < numStates) {    live=new boolean[2 * numStates];    visited=new boolean[2 * numStates];  }  removeDead(dfaStart,end);  if (Options.DEBUG)   Out.debug("complement finished, nfa (" + start + ","+ end+ ") is now :"+ this);  return new IntPair(start,end);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SurfaceData restoreContents(){  return sdDefault;}  }
class C{  public byte[] serializeKey(Object key) throws IOException {  if (key == null) {    throw new NullPointerException();  }  serializeObject(key,dataInputOutput.reset(),false);  return dataInputOutput.toByteArray();}  }
class C{  private static void initializeGemFireContext() throws NamingException {  Hashtable table=new Hashtable();  table.put(Context.INITIAL_CONTEXT_FACTORY,"org.apache.geode.internal.jndi.InitialContextFactoryImpl");  ctx=new InitialContext(table);}  }
class C{  public void decompress(ByteBuffer input,boolean smooth,long[] aa){  LongArrayPointer a=new LongArrayPointer(aa);  decode64(input,a);  undigitize64(a);  hinv64(a,smooth);}  }
class C{  public void applyConfigurations(Swarm swarm) throws MalformedURLException {  if (get(SERVER_CONFIG) != null) {    swarm.withXmlConfig(get(SERVER_CONFIG));  }  if (get(STAGE_CONFIG) != null) {    swarm.withStageConfig(get(STAGE_CONFIG));  }}  }
class C{  public void paintTextPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static String toOctalString(int i){  return IntegralToString.intToOctalString(i);}  }
class C{  public ConsistencyCheckMD5(int id,Table table,boolean checkColumnNames,boolean checkColumnTypes){  this(id,table,ConsistencyTable.ROW_UNSET,ConsistencyTable.ROW_UNSET,checkColumnNames,checkColumnTypes);}  }
class C{  public static void ensureOffsetLength(final int arrayLength,final int offset,final int length){  if (offset < 0)   throw new ArrayIndexOutOfBoundsException("Offset (" + offset + ") is negative");  if (length < 0)   throw new IllegalArgumentException("Length (" + length + ") is negative");  if (offset + length > arrayLength)   throw new ArrayIndexOutOfBoundsException("Last index (" + (offset + length) + ") is greater than array length ("+ arrayLength+ ")");}  }
class C{  public void info(String msg){  throw new RuntimeException();}  }
class C{  public Polygon(){  this.boundaries=new ArrayList<List<? extends Position>>();  this.boundaries.add(new ArrayList<Position>());}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hainu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void waitForCommitToComplete(Iterable<Long> startTimestamps){  boolean isEmpty=true;  Builder<LockDescriptor,LockMode> builder=ImmutableSortedMap.naturalOrder();  for (  long start : startTimestamps) {    if (start < immutableTimestamp) {      continue;    }    isEmpty=false;    builder.put(AtlasRowLockDescriptor.of(TransactionConstants.TRANSACTION_TABLE.getQualifiedName(),TransactionConstants.getValueForTimestamp(start)),LockMode.READ);  }  if (isEmpty) {    return;  }  try {    lockService.lock(LockClient.ANONYMOUS.getClientId(),LockRequest.builder(builder.build()).lockAndRelease().build());  } catch (  InterruptedException e) {    throw Throwables.throwUncheckedException(e);  }}  }
class C{  void initSavedIndex() throws GondolaException {  lock.lock();  try {    int newLastTerm=lastTerm;    int newSavedIndex=savedIndex;    LogEntry entry=storage.getLastLogEntry(cmember.memberId);    int lastIndex=0;    if (entry != null) {      newLastTerm=entry.term;      lastIndex=entry.index;      entry.release();    }    String pid=storage.getPid(cmember.memberId);    if (pid != null && !gondola.getProcessId().equals(pid)) {      logger.warn("[{}-{}] SaveQueue: another process pid={} may be updating the same tables. Current pid={}",gondola.getHostId(),cmember.memberId,pid,gondola.getProcessId());    }    maxGap=storage.getMaxGap(cmember.memberId);    logger.info("[{}-{}] Initializing save index with latest=({},{}) maxGap={}",gondola.getHostId(),cmember.memberId,newLastTerm,lastIndex,maxGap);    int start=Math.max(1,lastIndex - maxGap - 1);    for (int i=start; i <= lastIndex; i++) {      entry=storage.getLogEntry(cmember.memberId,i);      if (entry == null) {        logger.info("[{}-{}] SaveQueue: index={} is missing (last={}). " + "Setting savedIndex={} and deleting subsequent entries",gondola.getHostId(),cmember.memberId,i,lastIndex,savedIndex);        deleteFrom(i + 1,lastIndex);        assert i > start;        break;      } else {        newLastTerm=entry.term;        newSavedIndex=entry.index;        entry.release();      }    }    int count=storage.count(cmember.memberId);    if (count != newSavedIndex) {      throw new IllegalStateException(String.format("The last index is %d but found %d entries in the log",newSavedIndex,count));    }    lastTerm=newLastTerm;    savedIndex=newSavedIndex;    workQueue.clear();    saved.clear();    saving.clear();    initialized=true;    indexInitialized.signalAll();    storage.setMaxGap(cmember.memberId,0);    maxGap=0;  }  finally {    lock.unlock();  }}  }
class C{  public JsonWriter newJsonWriter(Writer writer) throws IOException {  if (generateNonExecutableJson) {    writer.write(JSON_NON_EXECUTABLE_PREFIX);  }  JsonWriter jsonWriter=new JsonWriter(writer);  if (prettyPrinting) {    jsonWriter.setIndent("  ");  }  jsonWriter.setSerializeNulls(serializeNulls);  return jsonWriter;}  }
class C{  public void increaseTimer(){  if (timer < duration) {    timer++;    timerChange=1;  }}  }
class C{  public boolean hasNext() throws ArticleReaderException {  try {    if (!this.lastTaskCompleted) {      return true;    }    this.keywords.reset();    int b=read();    while (b != -1) {      if (keywords.check((char)b)) {switch (keywords.getValue()) {case KEY_START_PAGE:          return true;      }      keywords.reset();    }    b=read();  }  return false;} catch (Exception e) {  throw new ArticleReaderException(e);}}  }
class C{  public InsertEdit(int offset,String text){  super(offset,0);  fText=text;}  }
class C{  public boolean forEach(TCharProcedure procedure){  byte[] states=_states;  char[] set=_set;  for (int i=set.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(set[i])) {      return false;    }  }  return true;}  }
class C{  private byte[] createSocks5ConnectRequest(){  byte addr[]=this.digest.getBytes();  byte[] data=new byte[7 + addr.length];  data[0]=(byte)0x05;  data[1]=(byte)0x01;  data[2]=(byte)0x00;  data[3]=(byte)0x03;  data[4]=(byte)addr.length;  System.arraycopy(addr,0,data,5,addr.length);  data[data.length - 2]=(byte)0;  data[data.length - 1]=(byte)0;  return data;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.EXECUTION_FLOW__SOURCE_ELEMENT:    return sourceElement != null;case SexecPackage.EXECUTION_FLOW__NAME:  return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case SexecPackage.EXECUTION_FLOW__STATE_VECTOR:return stateVector != null;case SexecPackage.EXECUTION_FLOW__SUB_SCOPES:return subScopes != null && !subScopes.isEmpty();case SexecPackage.EXECUTION_FLOW__SUPER_SCOPE:return superScope != null;case SexecPackage.EXECUTION_FLOW__ENTER_SEQUENCES:return enterSequences != null && !enterSequences.isEmpty();case SexecPackage.EXECUTION_FLOW__EXIT_SEQUENCE:return exitSequence != null;case SexecPackage.EXECUTION_FLOW__INIT_SEQUENCE:return initSequence != null;case SexecPackage.EXECUTION_FLOW__REACTIONS:return reactions != null && !reactions.isEmpty();case SexecPackage.EXECUTION_FLOW__SIMPLE_NAME:return SIMPLE_NAME_EDEFAULT == null ? simpleName != null : !SIMPLE_NAME_EDEFAULT.equals(simpleName);case SexecPackage.EXECUTION_FLOW__REACT_SEQUENCE:return reactSequence != null;case SexecPackage.EXECUTION_FLOW__STATES:return states != null && !states.isEmpty();case SexecPackage.EXECUTION_FLOW__NODES:return nodes != null && !nodes.isEmpty();case SexecPackage.EXECUTION_FLOW__REGIONS:return regions != null && !regions.isEmpty();case SexecPackage.EXECUTION_FLOW__HISTORY_VECTOR:return historyVector != null;case SexecPackage.EXECUTION_FLOW__ENTRY_ACTION:return entryAction != null;case SexecPackage.EXECUTION_FLOW__EXIT_ACTION:return exitAction != null;case SexecPackage.EXECUTION_FLOW__STATIC_INIT_SEQUENCE:return staticInitSequence != null;}return super.eIsSet(featureID);}  }
class C{  @Nullable private Drawable buildBranch(@Nullable Drawable drawable,@Nullable ScaleType scaleType){  drawable=WrappingUtils.maybeApplyLeafRounding(drawable,mRoundingParams,mResources);  drawable=WrappingUtils.maybeWrapWithScaleType(drawable,scaleType);  return drawable;}  }
class C{  private static List<String> splitCsvLine(String line){  return FluentIterable.from(Splitter.on(',').split(line)).transform(UNQUOTER).toList();}  }
class C{  public int trace(){  GF2nPolynomialElement t=new GF2nPolynomialElement(this);  int i;  for (i=1; i < mDegree; i++) {    t.squareThis();    t.addToThis(this);  }  if (t.isOne()) {    return 1;  }  return 0;}  }
class C{  public static String dumpAsString(Object obj){  return dumpAsString(obj,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:35.342 -0500",hash_original_method="3CA75790D64E38AC299F10F0BCF92E1D",hash_generated_method="CD3328F82ABCF92E19F8781AD239B82F") public static void updateMccMncConfiguration(PhoneBase phone,String mccmnc){  if (!TextUtils.isEmpty(mccmnc)) {    int mcc, mnc;    try {      mcc=Integer.parseInt(mccmnc.substring(0,3));      mnc=Integer.parseInt(mccmnc.substring(3));    } catch (    NumberFormatException e) {      Log.e(LOG_TAG,"Error parsing IMSI");      return;    }    Log.d(LOG_TAG,"updateMccMncConfiguration: mcc=" + mcc + ", mnc="+ mnc);    if (mcc != 0) {      setTimezoneFromMccIfNeeded(phone,mcc);      setLocaleFromMccIfNeeded(phone,mcc);      setWifiCountryCodeFromMcc(phone,mcc);    }    try {      Configuration config=ActivityManagerNative.getDefault().getConfiguration();      if (mcc != 0) {        config.mcc=mcc;      }      if (mnc != 0) {        config.mnc=mnc;      }      ActivityManagerNative.getDefault().updateConfiguration(config);    } catch (    RemoteException e) {      Log.e(LOG_TAG,"Can't update configuration",e);    }  }}  }
class C{  public int completedExecutions(){  return completed.intValue();}  }
class C{  private void addProtectionSetAndVolumes(BlockConsistencyGroup rpCg,String prefix,int numberOfSnaps) throws Exception {  ProtectionSet cg2ps=createProtectionSet(prefix + "ProtectionSet",projectURI);  List<Volume> rpCgVolumes=createRpVolumes(prefix + "VolumeA",2,cg2ps,false);  rpCgVolumes.addAll(createRpVolumes(prefix + "VolumeB",2,cg2ps,false));  addVolumesToBlockConsistencyGroup(rpCg.getId(),rpCgVolumes);  addVolumesToProtectionSet(cg2ps.getId(),rpCgVolumes);  addSnapshots(numberOfSnaps,rpCgVolumes.iterator().next(),rpCg,cg2ps,prefix + "SnapVolmeA");}  }
class C{  public void onCreateFileButtonClick(View view){  EditText fileNameEditText=(EditText)findViewById(R.id.file_name);  EditText fileSizeEditText=(EditText)findViewById(R.id.file_size);  String fileName=fileNameEditText.getText().toString();  String fileSizeEditTextValue=fileSizeEditText.getText().toString();  if (TextUtils.isEmpty(fileName) || isFileExists(fileName)) {    Toast toast=Toast.makeText(this,getText(R.string.file_exists),Toast.LENGTH_LONG);    toast.setGravity(Gravity.CENTER_VERTICAL,0,0);    toast.show();    return;  }  if (!isSizeValid(fileSizeEditTextValue)) {    Toast toast=Toast.makeText(this,getText(R.string.file_size_is_invalid),Toast.LENGTH_LONG);    toast.setGravity(Gravity.CENTER_VERTICAL,0,0);    toast.show();    return;  }  long fileSize=Integer.parseInt(fileSizeEditTextValue) * mSizeMultiplier;  if (mFileStorage == FileStorage.EXTERNAL && !Utils.isExternalStorageAvailable()) {    Toast toast=Toast.makeText(this,getText(R.string.external_storage_unavailable),Toast.LENGTH_LONG);    toast.setGravity(Gravity.CENTER_VERTICAL,0,0);    toast.show();    return;  }  createFileWithRandomDataAndFinishActivity(fileName,mFileStorage,String.valueOf(fileSize));}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  private static int calculateTotalBytes(ByteBuffer[] byteBufferArr){  int total=0;  for (int index=0; index < byteBufferArr.length; index++) {    total+=byteBufferArr[index].capacity();  }  return total;}  }
class C{  public static void main(String[] args){}  }
class C{  public static void dilate(Mat img,int amount){  Mat kernel=Imgproc.getStructuringElement(Imgproc.CV_SHAPE_RECT,new Size(2 * amount + 1,2 * amount + 1),new Point(amount,amount));  Imgproc.dilate(img,img,kernel);}  }
class C{  public Text trimEnd(){  int first=0;  int last=length() - 1;  while ((last >= first) && (charAt(last) <= ' ')) {    last--;  }  return subtext(first,last + 1);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String referenceHistoFile=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  referenceHistoFile=args[1];  outputHeader=args[2];  if ((inputHeader == null) || (outputHeader == null) || (referenceHistoFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells=0;    int i=0;    WhiteboxRasterInfo inputFile=new WhiteboxRasterInfo(inputHeader);    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    int numBins=50000;    double minValue=inputFile.getMinimumValue();    double maxValue=inputFile.getMaximumValue();    double binSize=(maxValue - minValue) / numBins;    long[] histogram=new long[numBins];    int binNum;    int numBinsLessOne=numBins - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          numCells++;          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins];    cdf[0]=histogram[0];    for (i=1; i < numBins; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    histogram=null;    for (i=0; i < numBins; i++) {      cdf[i]=cdf[i] / numCells;    }    String line;    String[] str;    String[] delimiters={"\t"," ",",",":",";"};    int delimiterNum=0;    File file=new File(referenceHistoFile);    RandomAccessFile raf=null;    raf=new RandomAccessFile(file,"r");    int numLines=0;    while ((line=raf.readLine()) != null) {      if (!line.trim().equals("")) {        numLines++;      }    }    double[][] referenceCDF=new double[numLines][2];    raf.seek(0);    i=0;    while ((line=raf.readLine()) != null) {      str=line.split(delimiters[delimiterNum]);      while (str.length < 2) {        delimiterNum++;        if (delimiterNum == delimiters.length) {          showFeedback("the histogram file does not appear to be properly formated.\n" + "It must be delimited using a tab, space, comma, colon, or semicolon.");          return;        }        str=line.split(delimiters[delimiterNum]);      }      referenceCDF[i][0]=Double.parseDouble(str[0]);      referenceCDF[i][1]=Double.parseDouble(str[1]);      i++;    }    raf.close();    for (i=1; i < numLines; i++) {      referenceCDF[i][1]+=referenceCDF[i - 1][1];    }    double totalFrequency=referenceCDF[numLines - 1][1];    for (i=0; i < numLines; i++) {      referenceCDF[i][1]=referenceCDF[i][1] / totalFrequency;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numLines; i++) {      pVal=referenceCDF[i][1];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          binNum=(int)((z - minValue) / binSize);          if (binNum > numBinsLessOne) {            binNum=numBinsLessOne;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numLines; i++) {            if (referenceCDF[i][1] > pVal) {              if (i > 0) {                x1=referenceCDF[i - 1][0];                x2=referenceCDF[i][0];                p1=referenceCDF[i - 1][1];                p2=referenceCDF[i][1];                if (p1 != p2) {                  xVal=x1 + ((x2 - x1) * ((pVal - p1) / (p2 - p1)));                } else {                  xVal=x1;                }              } else {                xVal=referenceCDF[i][0];              }              break;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private boolean initializeFromXMLFile(Element root){  NodeList childNodes=root.getChildNodes();  int count=childNodes.getLength();  for (int i=0; i < count; i++) {    Node node=childNodes.item(i);    int type=node.getNodeType();switch (type) {case Node.ELEMENT_NODE:      String nodeName=node.getNodeName();    if (nodeName.equals(MACRO_NAME)) {      NodeList childNodes2=node.getChildNodes();      name=UNTITLED_MACRO_NAME;      if (childNodes2.getLength() > 0) {        node=childNodes2.item(0);        int type2=node.getNodeType();        if (type2 != Node.CDATA_SECTION_NODE && type2 != Node.TEXT_NODE) {          return false;        }        name=node.getNodeValue().trim();      }    } else     if (nodeName.equals(ACTION)) {      NamedNodeMap attributes=node.getAttributes();      if (attributes == null || attributes.getLength() != 1)       return false;      Node node2=attributes.item(0);      MacroRecord macroRecord=new MacroRecord();      if (!node2.getNodeName().equals(ID)) {        return false;      }      macroRecord.id=node2.getNodeValue();      NodeList childNodes2=node.getChildNodes();      int length=childNodes2.getLength();      if (length == 0) {        macroRecord.actionCommand="";        macroRecords.add(macroRecord);        break;      } else {        node=childNodes2.item(0);        int type2=node.getNodeType();        if (type2 != Node.CDATA_SECTION_NODE && type2 != Node.TEXT_NODE) {          return false;        }        macroRecord.actionCommand=node.getNodeValue();        macroRecords.add(macroRecord);      }    }  break;default :break;}}return true;}  }
class C{  public static boolean canRun(final File file){  return manager.getEngineByExtension(FileUtils.getFileExtension(file)) != null;}  }
class C{  public synchronized boolean add(BufferedImage i){  if (!stopped) {    i=preprocess(i);    source.add(i);  }  return (!stopped);}  }
class C{  public MathRuntimeException(final Throwable rootCause){  super(rootCause);  this.pattern=getMessage();  this.arguments=new Object[0];}  }
class C{  public void processKeyEvent(KeyEvent evt){  if (inputHandler == null)   return;switch (evt.getID()) {case KeyEvent.KEY_TYPED:    inputHandler.keyTyped(evt);  break;case KeyEvent.KEY_PRESSED:inputHandler.keyPressed(evt);break;case KeyEvent.KEY_RELEASED:inputHandler.keyReleased(evt);break;}if (inputMap == null) inputMap=getInputMap();Object o=inputMap.get(KeyStroke.getKeyStrokeForEvent(evt));if (o != null) {if (actionMap == null) actionMap=getActionMap();Object a=actionMap.get(o);if (a != null) ((Action)a).actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,o.toString(),evt.getModifiers()));}}  }
class C{  public DViewAsn1Dump(JDialog parent,Spkac spkac) throws Asn1Exception, IOException {  super(res.getString("DViewAsn1Dump.Csr.Title"));  this.spkac=spkac;  initComponents();}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public void writeExternal(ObjectOutput os) throws IOException {  write(os);}  }
class C{  public void click(ReadOnlyVector3 vec){switch (mode) {case Anchor:    setAnchorPoint(vec);  mode=ModeType.Current;break;case Current:setCurrentPoint(vec);mode=ModeType.Anchor;break;}}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__EXECUTE_CLAUSE_1:    return executeClause_1 != null && !executeClause_1.isEmpty();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_WHEN_1:  return traceWhen_1 != null && !traceWhen_1.isEmpty();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_FOR_1:return traceFor_1 != null && !traceFor_1.isEmpty();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_PERIOD_1:return tracePeriod_1 != null && !tracePeriod_1.isEmpty();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_DURING_1:return traceDuring_1 != null && !traceDuring_1.isEmpty();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_CASE_ACTIVATION_1:return traceCaseActivation_1 != null && !traceCaseActivation_1.isEmpty();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_RECORD_1:return traceRecord_1 != null && !traceRecord_1.isEmpty();case UmplePackage.ANONYMOUS_TRACE_DIRECTIVE_1__TRACE_LEVEL_1:return traceLevel_1 != null && !traceLevel_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void testAlgorithmParameterGenerator04() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  for (int i=0; i < algs.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        AlgorithmParameterGenerator.getInstance(algs[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (provider: ".concat(invalidValues[j]));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  @Override public void readFromNBT(NBTTagCompound tag){  super.readFromNBT(tag);  NBTTagCompound data=tag.getCompoundTag("IC2BasicSource");  energyStored=data.getDouble("energy");}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  void restore(){  System.arraycopy(kSave,0,k,0,blockSize);}  }
class C{  public GridCacheConcurrentMapImpl(GridCacheContext ctx,GridCacheMapEntryFactory factory,int initialCapacity,float loadFactor,int concurrencyLevel){  this.ctx=ctx;  this.factory=factory;  map=new ConcurrentHashMap8<>(initialCapacity,loadFactor,concurrencyLevel);}  }
class C{  public XML fillMappedField(Class<?> configuredClass,MappedField configuredField){  Attribute attribute=getGlobalAttribute(configuredField,configuredClass);  if (isNull(attribute))   attribute=getAttribute(configuredField,configuredClass);  if (!isNull(attribute)) {    if (isEmpty(configuredField.getMethod()))     configuredField.getMethod(attribute.getGet());    if (isEmpty(configuredField.setMethod()))     configuredField.setMethod(attribute.getSet());  }  return this;}  }
class C{  public RegressionParamsEditorPanel(RegressionModel regressionModel,Parameters parameters,DataModel model,boolean logistic){  this.setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  if (parameters == null) {    throw new NullPointerException("The given params must not be null");  }  this.params=parameters;  this.logistic=logistic;  List<String> variableNames=regressionModel.getVariableNames();  this.regressionModel=regressionModel;  PREDICTORS_LIST=createList();  VariableListModel predictorsModel=(VariableListModel)getPredictorsList().getModel();  SOURCE_LIST=createList();  if (logistic && model instanceof DataSet) {    buildMap((DataSet)model);    getSourceList().setCellRenderer(new LogisticRegRenderer());  }  VariableListModel variableModel=(VariableListModel)getSourceList().getModel();  RESPONSE_FIELD=createResponse(getSourceList(),100);  List<String> regressors=regressionModel.getRegressorNames();  if (regressors != null) {    predictorsModel.addAll(regressors);    List<String> initVars=new ArrayList<>(variableNames);    initVars.removeAll(regressors);    variableModel.addAll(initVars);  } else {    variableModel.addAll(variableNames);  }  String target=regressionModel.getTargetName();  if (target != null) {    variableModel.remove(target);  }  new DropTarget(getSourceList(),DnDConstants.ACTION_MOVE,new TargetListener(),true);  new DropTarget(getResponseField(),DnDConstants.ACTION_MOVE,new TargetListener(),true);  new DropTarget(getPredictorsList(),DnDConstants.ACTION_MOVE,new TargetListener(),true);  DragSource dragSource=DragSource.getDefaultDragSource();  dragSource.createDefaultDragGestureRecognizer(getResponseField(),DnDConstants.ACTION_MOVE,new SourceListener());  dragSource=DragSource.getDefaultDragSource();  dragSource.createDefaultDragGestureRecognizer(getSourceList(),DnDConstants.ACTION_MOVE,new SourceListener());  dragSource=DragSource.getDefaultDragSource();  dragSource.createDefaultDragGestureRecognizer(getPredictorsList(),DnDConstants.ACTION_MOVE,new SourceListener());  Box box=Box.createHorizontalBox();  box.add(Box.createHorizontalStrut(10));  Box label=createLabel("Variables:");  int height=label.getPreferredSize().height + getResponseField().getPreferredSize().height + 10;  Box vBox1=Box.createVerticalBox();  vBox1.add(label);  JScrollPane pane=createScrollPane(getSourceList(),new Dimension(100,350 + height));  vBox1.add(pane);  vBox1.add(Box.createVerticalStrut(10));  vBox1.add(buildAlphaArea(params.getDouble("alpha",0.001)));  vBox1.add(Box.createVerticalStrut(10));  vBox1.add(buildSortButton());  vBox1.add(Box.createVerticalGlue());  box.add(vBox1);  box.add(Box.createHorizontalStrut(4));  box.add(buildSelectorArea(label.getPreferredSize().height));  box.add(Box.createHorizontalStrut(4));  Box vBox=Box.createVerticalBox();  vBox.add(createLabel("Response:"));  vBox.add(getResponseField());  vBox.add(Box.createVerticalStrut(10));  vBox.add(createLabel("Predictor(s):"));  vBox.add(createScrollPane(getPredictorsList(),new Dimension(100,350)));  vBox.add(Box.createVerticalGlue());  box.add(vBox);  box.add(Box.createHorizontalStrut(10));  box.add(Box.createHorizontalGlue());  this.add(Box.createVerticalStrut(20));  this.add(box);}  }
class C{  public Feeds createFeeds(){  return mAdapter.create(Feeds.class);}  }
class C{  public static Map<String,Object> storeIncomingEmail(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  MimeMessageWrapper wrapper=(MimeMessageWrapper)context.get("messageWrapper");  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String partyIdTo=null;  String partyIdFrom=null;  String contentType=null;  String communicationEventId=null;  String contactMechIdFrom=null;  String contactMechIdTo=null;  Map<String,Object> result=null;  try {    String contentTypeRaw=wrapper.getContentType();    int idx=contentTypeRaw.indexOf(";");    if (idx == -1)     idx=contentTypeRaw.length();    contentType=contentTypeRaw.substring(0,idx);    if (contentType == null || contentType.equals(""))     contentType="text/html";    contentType=contentType.toLowerCase();    Address[] addressesFrom=wrapper.getFrom();    Address[] addressesTo=wrapper.getTo();    Address[] addressesCC=wrapper.getCc();    Address[] addressesBCC=wrapper.getBcc();    String messageId=wrapper.getMessageId().replaceAll("[<>]","");    String aboutThisEmail="message [" + messageId + "] from ["+ ((addressesFrom == null || addressesFrom[0] == null) ? "not found" : addressesFrom[0].toString())+ "] to ["+ ((addressesTo == null || addressesTo[0] == null) ? "not found" : addressesTo[0].toString())+ "]";    if (Debug.verboseOn())     Debug.logVerbose("Processing Incoming Email " + aboutThisEmail,module);    String spamHeaderName=EntityUtilProperties.getPropertyValue("general.properties","mail.spam.name","N",delegator);    String configHeaderValue=EntityUtilProperties.getPropertyValue("general.properties","mail.spam.value",delegator);    if (!spamHeaderName.equals("N") && wrapper.getHeader(spamHeaderName) != null && wrapper.getHeader(spamHeaderName).length > 0) {      String msgHeaderValue=wrapper.getHeader(spamHeaderName)[0];      if (msgHeaderValue != null && msgHeaderValue.startsWith(configHeaderValue)) {        Debug.logInfo("Incoming Email message ignored, was detected by external spam checker",module);        return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"PartyCommEventMessageIgnoredDetectedByExternalSpamChecker",locale));      }    }    if (addressesFrom == null) {      Debug.logInfo("Incoming Email message ignored, had not 'from' email address",module);      return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"PartyCommEventMessageIgnoredNoFromAddressSpecified",locale));    }    List<GenericValue> commEvents;    try {      commEvents=EntityQuery.use(delegator).from("CommunicationEvent").where("messageId",messageId).queryList();    } catch (    GenericEntityException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }    if (!commEvents.isEmpty()) {      Debug.logInfo("Ignoring Duplicate Email: " + aboutThisEmail,module);      return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"PartyCommEventMessageIgnoredDuplicateMessageId",locale));    }    List<Map<String,Object>> toParties=buildListOfPartyInfoFromEmailAddresses(addressesTo,userLogin,dispatcher);    List<Map<String,Object>> ccParties=buildListOfPartyInfoFromEmailAddresses(addressesCC,userLogin,dispatcher);    List<Map<String,Object>> bccParties=buildListOfPartyInfoFromEmailAddresses(addressesBCC,userLogin,dispatcher);    if (!toParties.isEmpty()) {      Map<String,Object> firstAddressTo=toParties.get(0);      partyIdTo=(String)firstAddressTo.get("partyId");      contactMechIdTo=(String)firstAddressTo.get("contactMechId");    }    String deliveredTo=wrapper.getFirstHeader("Delivered-To");    if (deliveredTo != null) {      String dn=deliveredTo.substring(deliveredTo.indexOf("@") + 1,deliveredTo.length());      if (deliveredTo.startsWith(dn)) {        deliveredTo=deliveredTo.substring(dn.length() + 1,deliveredTo.length());      }    }    if ((partyIdTo == null) && (deliveredTo != null)) {      result=dispatcher.runSync("findPartyFromEmailAddress",UtilMisc.<String,Object>toMap("address",deliveredTo,"userLogin",userLogin));      partyIdTo=(String)result.get("partyId");      contactMechIdTo=(String)result.get("contactMechId");    }    if (userLogin.get("partyId") == null && partyIdTo != null) {      int ch=0;      for (ch=partyIdTo.length(); ch > 0 && Character.isDigit(partyIdTo.charAt(ch - 1)); ch--) {      }      userLogin.put("partyId",partyIdTo.substring(0,ch));    }    result=getParyInfoFromEmailAddress(addressesFrom,userLogin,dispatcher);    partyIdFrom=(String)result.get("partyId");    contactMechIdFrom=(String)result.get("contactMechId");    Map<String,Object> commEventMap=new HashMap<String,Object>();    commEventMap.put("communicationEventTypeId","AUTO_EMAIL_COMM");    commEventMap.put("contactMechTypeId","EMAIL_ADDRESS");    commEventMap.put("messageId",messageId);    String subject=wrapper.getSubject();    commEventMap.put("subject",subject);    commEventMap.put("entryDate",nowTimestamp);    commEventMap.put("datetimeStarted",UtilDateTime.toTimestamp(wrapper.getSentDate()));    commEventMap.put("datetimeEnded",UtilDateTime.toTimestamp(wrapper.getReceivedDate()));    commEventMap.put("roleTypeIdFrom","_NA_");    commEventMap.put("roleTypeIdTo","_NA_");    String messageBodyContentType=wrapper.getMessageBodyContentType();    if (messageBodyContentType.indexOf(";") > -1) {      messageBodyContentType=messageBodyContentType.substring(0,messageBodyContentType.indexOf(";"));    }    String messageBody=null;    if (wrapper.getMainPartCount() > 1) {      for (int ind=0; ind < wrapper.getMainPartCount(); ind++) {        BodyPart p=wrapper.getPart(ind + "");        if (p.getContentType().toLowerCase().indexOf("text/plain") > -1) {          messageBody=(String)p.getContent();          break;        }      }    }    if (messageBody == null) {      messageBody=wrapper.getMessageBody();    }    commEventMap.put("content",messageBody);    commEventMap.put("contentMimeTypeId",messageBodyContentType.toLowerCase());    String[] inReplyTo=wrapper.getHeader("In-Reply-To");    if (inReplyTo != null && inReplyTo[0] != null) {      GenericValue parentCommEvent=null;      try {        parentCommEvent=EntityQuery.use(delegator).from("CommunicationEvent").where("messageId",inReplyTo[0].replaceAll("[<>]","")).queryFirst();      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }      if (parentCommEvent != null) {        String parentCommEventId=parentCommEvent.getString("communicationEventId");        String orgCommEventId=parentCommEvent.getString("origCommEventId");        if (orgCommEventId == null)         orgCommEventId=parentCommEventId;        commEventMap.put("parentCommEventId",parentCommEventId);        commEventMap.put("origCommEventId",orgCommEventId);      }    }    populateAddressesFromMessage(wrapper,commEventMap);    String commNote="";    if (partyIdFrom != null) {      commEventMap.put("partyIdFrom",partyIdFrom);      commEventMap.put("contactMechIdFrom",contactMechIdFrom);    } else {      commNote+="Sent from: " + ((InternetAddress)addressesFrom[0]).getAddress() + "; ";      commNote+="Sent Name from: " + ((InternetAddress)addressesFrom[0]).getPersonal() + "; ";    }    if (partyIdTo != null) {      commEventMap.put("partyIdTo",partyIdTo);      commEventMap.put("contactMechIdTo",contactMechIdTo);    } else {      commNote+="Sent to: " + ((InternetAddress)addressesTo[0]).getAddress() + "; ";      if (deliveredTo != null) {        commNote+="Delivered-To: " + deliveredTo + "; ";      }    }    commNote+="Sent to: " + ((InternetAddress)addressesTo[0]).getAddress() + "; ";    commNote+="Delivered-To: " + deliveredTo + "; ";    if (partyIdTo != null && partyIdFrom != null) {      commEventMap.put("statusId","COM_ENTERED");    } else {      commEventMap.put("statusId","COM_UNKNOWN_PARTY");    }    if (commNote.length() > 255)     commNote=commNote.substring(0,255);    if (!("".equals(commNote))) {      commEventMap.put("note",commNote);    }    commEventMap.put("userLogin",userLogin);    StringBuilder headerString=new StringBuilder();    Enumeration<?> headerLines=wrapper.getMessage().getAllHeaderLines();    while (headerLines.hasMoreElements()) {      headerString.append(System.getProperty("line.separator"));      headerString.append(headerLines.nextElement());    }    String header=headerString.toString();    commEventMap.put("headerString",header.replaceAll("[<>]",""));    result=dispatcher.runSync("createCommunicationEvent",commEventMap);    communicationEventId=(String)result.get("communicationEventId");    Debug.logInfo("Persisting New Email: " + aboutThisEmail + " into CommunicationEventId: "+ communicationEventId,module);    createAttachmentContent(dispatcher,wrapper,communicationEventId,userLogin);    createCommEventRoles(userLogin,delegator,dispatcher,communicationEventId,toParties,"ADDRESSEE");    createCommEventRoles(userLogin,delegator,dispatcher,communicationEventId,ccParties,"CC");    createCommEventRoles(userLogin,delegator,dispatcher,communicationEventId,bccParties,"BCC");    List<Map<String,Object>> toWorkEffortInfos=buildListOfWorkEffortInfoFromEmailAddresses(addressesTo,userLogin,dispatcher);    List<Map<String,Object>> ccWorkEffortInfos=buildListOfWorkEffortInfoFromEmailAddresses(addressesCC,userLogin,dispatcher);    List<Map<String,Object>> bccWorkEffortInfos=buildListOfWorkEffortInfoFromEmailAddresses(addressesBCC,userLogin,dispatcher);    createCommunicationEventWorkEffs(userLogin,dispatcher,toWorkEffortInfos,communicationEventId);    createCommunicationEventWorkEffs(userLogin,dispatcher,ccWorkEffortInfos,communicationEventId);    createCommunicationEventWorkEffs(userLogin,dispatcher,bccWorkEffortInfos,communicationEventId);    Map<String,Object> results=ServiceUtil.returnSuccess();    results.put("communicationEventId",communicationEventId);    results.put("statusId",commEventMap.get("statusId"));    return results;  } catch (  MessagingException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericServiceException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  Exception e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }}  }
class C{  public ImageFactory(int maxImageWidth,int maxImageHeight){  setMaxImageDimensions(maxImageWidth,maxImageHeight);}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  buf.append("Events:\n");  if (this.eventStore != null) {    buf.append(this.eventStore.toString());  }  return buf.toString();}  }
class C{  public Reason reason(){  return reason;}  }
class C{  public static ByteSource readResourceBytes(Class<?> contextClass,String filename){  return asByteSource(getResource(contextClass,filename));}  }
class C{  public void onRemoteSetup(NotificationRemote remote){  if (DBG)   Log.v(TAG,"onRemoteSetup");}  }
class C{  public Boolean isVAppConfigRemoved(){  return vAppConfigRemoved;}  }
class C{  @Deprecated public static List<Integer> range(int fromIncl,int toExcl){  A.ensure(fromIncl >= 0,"fromIncl >= 0");  A.ensure(toExcl >= 0,"toExcl >= 0");  A.ensure(toExcl >= fromIncl,"toExcl > fromIncl");  if (toExcl == fromIncl)   return Collections.emptyList();  List<Integer> list=new ArrayList<>(toExcl - fromIncl);  for (int i=fromIncl; i < toExcl; i++)   list.add(i);  return list;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementreplaceattributewithself.class,args);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CODE_INJECTION___BEFORE_CODE_1:    return ((InternalEList<?>)getBeforeCode_1()).basicRemove(otherEnd,msgs);case UmplePackage.CODE_INJECTION___AFTER_CODE_1:  return ((InternalEList<?>)getAfterCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  boolean isInitValueValid(long v){  if ((v < 0) || (v > SnmpUnsignedInt.MAX_VALUE)) {    return false;  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T schedule(Supplier<T> supplier,BooleanSupplier terminated){  AtomicBoolean available=new AtomicBoolean(false);  final Object[] result={null};  Bukkit.getScheduler().scheduleSyncDelayedTask(Computers.getInstance(),null);  try {    while (!available.get()) {      if (terminated.getAsBoolean())       break;      Thread.sleep(40);    }  } catch (  InterruptedException e) {    throw new LuaError(e);  }  return (T)result[0];}  }
class C{  public MLUInt8(String name,byte[][] vals){  this(name,byte2DToByte(vals),vals.length);}  }
class C{  public EntryDestroyedException(String s){  super(s);}  }
class C{  public CorrectPredictionCondition(ExampleSet exampleSet,String parameterString){  if (exampleSet.getAttributes().getLabel() == null) {    throw new IllegalArgumentException("CorrectPredictionCondition needs an example set with label attribute!");  }  if (exampleSet.getAttributes().getPredictedLabel() == null) {    throw new IllegalArgumentException("CorrectPredictionCondition needs an example set with predicted label attribute!");  }}  }
class C{  public CHotkeyRenderer(){  setHorizontalAlignment(CENTER);}  }
class C{  @Override protected MetaRuleset createMetaRuleset(Class type){  Util.notNull("type",type);  FacesContext context=FacesContext.getCurrentInstance();  UIComponent cc=getCompositeComponent(context);  if (null == cc) {    FaceletContext faceletContext=(FaceletContext)context.getAttributes().get(FaceletContext.FACELET_CONTEXT_KEY);    cc=createComponent(faceletContext);    setCompositeComponent(context,cc);  }  MetaRuleset m=new CompositeComponentMetaRuleset(getTag(),type,(BeanInfo)cc.getAttributes().get(UIComponent.BEANINFO_KEY));  m.ignore("binding").ignore("id");  m.addRule(CompositeComponentRule.Instance);  if (ActionSource.class.isAssignableFrom(type)) {    m.addRule(ActionSourceRule.Instance);  }  if (ValueHolder.class.isAssignableFrom(type)) {    m.addRule(ValueHolderRule.Instance);    if (EditableValueHolder.class.isAssignableFrom(type)) {      m.ignore("submittedValue");      m.ignore("valid");      m.addRule(EditableValueHolderRule.Instance);    }  }  if (UISelectOne.class.isAssignableFrom(type) || UISelectMany.class.isAssignableFrom(type)) {    m.addRule(RenderPropertyRule.Instance);  }  return m;}  }
class C{  public Vector2f negate(){  return new Vector2f(-x,-y);}  }
class C{  public static Date parse(String date) throws IOException {  try {    int offset=0;    int year=parseInt(date,offset,offset+=4);    if (checkOffset(date,offset,'-')) {      offset+=1;    }    int month=parseInt(date,offset,offset+=2);    if (checkOffset(date,offset,'-')) {      offset+=1;    }    int day=parseInt(date,offset,offset+=2);    int hour=0;    int minutes=0;    int seconds=0;    int milliseconds=0;    boolean hasT=checkOffset(date,offset,'T');    if (!hasT && (date.length() <= offset)) {      Calendar calendar=new GregorianCalendar(year,month - 1,day);      return calendar.getTime();    }    if (hasT) {      hour=parseInt(date,offset+=1,offset+=2);      if (checkOffset(date,offset,':')) {        offset+=1;      }      minutes=parseInt(date,offset,offset+=2);      if (checkOffset(date,offset,':')) {        offset+=1;      }      if (date.length() > offset) {        char c=date.charAt(offset);        if (c != 'Z' && c != '+' && c != '-') {          seconds=parseInt(date,offset,offset+=2);          if (seconds > 59 && seconds < 63)           seconds=59;          if (checkOffset(date,offset,'.')) {            offset+=1;            int endOffset=indexOfNonDigit(date,offset + 1);            int parseEndOffset=Math.min(endOffset,offset + 3);            int fraction=parseInt(date,offset,parseEndOffset);            milliseconds=(int)(Math.pow(10,3 - (parseEndOffset - offset)) * fraction);            offset=endOffset;          }        }      }    }    if (date.length() <= offset) {      throw new IllegalArgumentException("No time zone indicator");    }    TimeZone timezone;    char timezoneIndicator=date.charAt(offset);    if (timezoneIndicator == 'Z') {      timezone=TIMEZONE_Z;    } else     if (timezoneIndicator == '+' || timezoneIndicator == '-') {      String timezoneOffset=date.substring(offset);      if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {        timezone=TIMEZONE_Z;      } else {        String timezoneId=GMT_ID + timezoneOffset;        timezone=TimeZone.getTimeZone(timezoneId);        String act=timezone.getID();        if (!act.equals(timezoneId)) {          String cleaned=act.replace(":","");          if (!cleaned.equals(timezoneId)) {            throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + timezoneId + " given, resolves to "+ timezone.getID());          }        }      }    } else {      throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");    }    Calendar calendar=new GregorianCalendar(timezone);    calendar.setLenient(false);    calendar.set(Calendar.YEAR,year);    calendar.set(Calendar.MONTH,month - 1);    calendar.set(Calendar.DAY_OF_MONTH,day);    calendar.set(Calendar.HOUR_OF_DAY,hour);    calendar.set(Calendar.MINUTE,minutes);    calendar.set(Calendar.SECOND,seconds);    calendar.set(Calendar.MILLISECOND,milliseconds);    return calendar.getTime();  } catch (  IndexOutOfBoundsException|IllegalArgumentException e) {    throw new IOException("Not an RFC 3339 date: " + date);  }}  }
class C{  public static void writeConfigFile(File configFile,File searchDir) throws SQLException, IOException {  List<Class<?>> classList=new ArrayList<Class<?>>();  findAnnotatedClasses(classList,searchDir,0);  writeConfigFile(configFile,classList.toArray(new Class[classList.size()]));}  }
class C{  public void testTungstenCatalogAccept() throws ReplicatorException, InterruptedException {  ReplicateFilter rf=new ReplicateFilter();  rf.setTungstenSchema("tungsten_foo");  rf.setIgnore("tungsten_foo");  filterHelper.setFilter(rf);  verifyStmtAccept(filterHelper,0,"bar","delete from tungsten_foo.trep_commit_seqno where task_id=9");  verifyRowAccept(filterHelper,1,"tungsten_foo","trep_commit_seqno",new String[]{"task_id"},new Object[]{0});  filterHelper.done();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.CHARACTER_CLASS_RANGE__LEFT:    return left != null;case RegularExpressionPackage.CHARACTER_CLASS_RANGE__RIGHT:  return right != null;}return super.eIsSet(featureID);}  }
class C{  private SubscriberExceptionContext context(Object event){  return new SubscriberExceptionContext(bus,event,target,method);}  }
class C{  private void computeTipVisibleBounds(){  Rectangle r=tipWindow.getBounds();  Point p=r.getLocation();  SwingUtilities.convertPointFromScreen(p,textArea);  r.setLocation(p);  tipVisibleBounds.setBounds(r.x,r.y - 15,r.width,r.height + 15 * 2);}  }
class C{  public static void assertMatrix4fEquals(Matrix4f m1,Matrix4f m2,float delta){  Assert.assertEquals(m1.m00(),m2.m00(),delta);  Assert.assertEquals(m1.m01(),m2.m01(),delta);  Assert.assertEquals(m1.m02(),m2.m02(),delta);  Assert.assertEquals(m1.m03(),m2.m03(),delta);  Assert.assertEquals(m1.m10(),m2.m10(),delta);  Assert.assertEquals(m1.m11(),m2.m11(),delta);  Assert.assertEquals(m1.m12(),m2.m12(),delta);  Assert.assertEquals(m1.m13(),m2.m13(),delta);  Assert.assertEquals(m1.m20(),m2.m20(),delta);  Assert.assertEquals(m1.m21(),m2.m21(),delta);  Assert.assertEquals(m1.m22(),m2.m22(),delta);  Assert.assertEquals(m1.m23(),m2.m23(),delta);  Assert.assertEquals(m1.m30(),m2.m30(),delta);  Assert.assertEquals(m1.m31(),m2.m31(),delta);  Assert.assertEquals(m1.m32(),m2.m32(),delta);  Assert.assertEquals(m1.m33(),m2.m33(),delta);}  }
class C{  static TLCVariableValue innerParse(InputPair input) throws VariableValueParseException {  TLCVariableValue result=null;  TLCVariableValue innerValue;  int initialOffset=input.offset;  char ch=getNextChar(input);  char nextCh;switch (ch) {case LT:    nextCh=getNextChar(input);  if (nextCh != LT) {    throw new VariableValueParseException();  }List<TLCVariableValue> sequenceValues=new Vector<TLCVariableValue>();innerValue=innerParse(input);if (innerValue != null) {sequenceValues.add(innerValue);nextCh=getNextChar(input);while (nextCh == COMMA) {sequenceValues.add(innerParse(input));nextCh=getNextChar(input);}if (nextCh != GT || getNextChar(input) != GT) {throw new VariableValueParseException();}}result=new TLCSequenceVariableValue(sequenceValues);break;case GT:nextCh=getNextChar(input);if (nextCh != GT) {throw new VariableValueParseException();}return null;case OBRACKET:List<TLCVariableValue> recordPairs=new Vector<TLCVariableValue>();TLCVariableValue innerValue2;innerValue=innerParse(input);if (innerValue != null) {if (!(innerValue instanceof TLCSimpleVariableValue)) {throw new VariableValueParseException();}if (getNextChar(input) == PIPE && getNextChar(input) == MINUS && getNextChar(input) == GT) {innerValue2=innerParse(input);if (innerValue2 == null) {throw new VariableValueParseException();}recordPairs.add(new TLCNamedVariableValue((String)innerValue.value,innerValue2));} else {throw new VariableValueParseException();}}nextCh=getNextChar(input);while (nextCh == COMMA) {innerValue=innerParse(input);if (innerValue != null) {if (!(innerValue instanceof TLCSimpleVariableValue)) {throw new VariableValueParseException();}if (getNextChar(input) == PIPE && getNextChar(input) == MINUS && getNextChar(input) == GT) {innerValue2=innerParse(input);if (innerValue2 == null) {throw new VariableValueParseException();}recordPairs.add(new TLCNamedVariableValue((String)innerValue.value,innerValue2));} else {throw new VariableValueParseException();}}nextCh=getNextChar(input);}if (nextCh != CBRACKET) {throw new VariableValueParseException();}result=new TLCRecordVariableValue(recordPairs);break;case CBRACKET:return null;case OPAREN:List<TLCVariableValue> fcnElements=new Vector<TLCVariableValue>();TLCVariableValue domElement;domElement=innerParse(input);if (domElement != null) {if (getNextChar(input) == COLON && getNextChar(input) == GT) {innerValue=innerParse(input);if (innerValue == null) {throw new VariableValueParseException();}fcnElements.add(new TLCFcnElementVariableValue(domElement,innerValue));} else {throw new VariableValueParseException();}}nextCh=getNextChar(input);while (nextCh == ATSIGN) {if (getNextChar(input) != ATSIGN) {throw new VariableValueParseException();}domElement=innerParse(input);if (domElement != null) {if (getNextChar(input) == COLON && getNextChar(input) == GT) {innerValue=innerParse(input);if (innerValue == null) {throw new VariableValueParseException();}fcnElements.add(new TLCFcnElementVariableValue(domElement,innerValue));} else {throw new VariableValueParseException();}}nextCh=getNextChar(input);}if (nextCh != CPAREN) {throw new VariableValueParseException();}result=new TLCFunctionVariableValue(fcnElements);break;case CPAREN:throw new VariableValueParseException();case OCBRACE:List<TLCVariableValue> setValues=new Vector<TLCVariableValue>();innerValue=innerParse(input);if (innerValue != null) {setValues.add(innerValue);nextCh=getNextChar(input);while (nextCh == COMMA) {setValues.add(innerParse(input));nextCh=getNextChar(input);}if (nextCh != CCBRACE) {throw new VariableValueParseException();}}result=new TLCSetVariableValue(setValues);break;case CCBRACE:return null;default :if (ch != QUOTE) {Matcher matcher=ATOMIC_PATERN.matcher(input.input.substring(input.offset - 1));if (matcher.find()) {if (matcher.start() == 0) {result=new TLCSimpleVariableValue(input.input.substring(input.offset - 1,input.offset + matcher.end() - 1));input.offset=input.offset + matcher.end() - 1;return result;}}throw new VariableValueParseException();} else {int startOfString=input.offset - 1;if (input.offset >= input.input.length()) {throw new VariableValueParseException();};while (input.input.charAt(input.offset) != QUOTE) {if (input.input.charAt(input.offset) == ESC) {input.offset++;}input.offset++;if (input.offset >= input.input.length()) {throw new VariableValueParseException();};}input.offset++;return new TLCSimpleVariableValue(input.input.substring(startOfString,input.offset));}}result.source=input.input.substring(initialOffset,input.offset).trim();return result;}  }
class C{  public static String roundSubtotal(PriceConverter formatter,BigDecimal subtotal){  return formatter.getValueToDisplay(subtotal.setScale(PriceConverter.NORMALIZED_PRICE_SCALING,RoundingMode.HALF_UP),true);}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  public DirtyRegionQueue(){  super();}  }
class C{  public static BufferedReader newReader(Path self) throws IOException {  return Files.newBufferedReader(self,Charset.defaultCharset());}  }
class C{  public RecipientListRouterItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.156 -0500",hash_original_method="E94E451F563AEB345A5532C008598177",hash_generated_method="80797AEB78C6B5AE0E145C627917395C") @DSSafe(DSCat.SAFE_OTHERS) public boolean isConnected(){  return _isConnected_;}  }
class C{  public static JSONObject createGroup(String name,String dataType,int evalOrder,String ruleName) throws JSONException {  JSONObject modelGroup=new JSONObject();  modelGroup.put(JSON_FIELD_NAME,name);  modelGroup.put(JSON_FIELD_DATATYPE,dataType);  modelGroup.put(JSON_FIELD_EVAL_ORDER,evalOrder);  modelGroup.put(JSON_FIELD_RULE_NAME,ruleName);  return modelGroup;}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  @Override public void invalidate(){  super.invalidate();  onChunkUnload();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(" ");  for (InlineSequence is=this; is != null; is=is.caller) {    sb.append(is.method.getDeclaringClass().getDescriptor()).append(" ").append(is.method.getName()).append(" ").append(is.method.getDescriptor()).append(" ").append(is.bcIndex).append(" ");  }  return sb.toString();}  }
class C{  public void generateOptimizedBoolean(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  if (this.constant != Constant.NotAConstant) {    super.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);    return;  }  Constant cst=this.right.constant;  if (cst != Constant.NotAConstant && cst.booleanValue() == false) {    this.left.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);    return;  }  cst=this.left.optimizedBooleanConstant();  boolean leftIsConst=cst != Constant.NotAConstant;  boolean leftIsTrue=leftIsConst && cst.booleanValue() == true;  cst=this.right.optimizedBooleanConstant();  boolean rightIsConst=cst != Constant.NotAConstant;  generateOperands: {    if (falseLabel == null) {      if (trueLabel != null) {        this.left.generateOptimizedBoolean(currentScope,trueLabel,null,!leftIsConst);        if (leftIsTrue) {          break generateOperands;        }        this.right.generateOptimizedBoolean(currentScope,trueLabel,null,valueRequired && !rightIsConst);      }    } else {      if (trueLabel == null) {        BranchLabel internalTrueLabel=new BranchLabel();        this.left.generateOptimizedBoolean(currentScope,internalTrueLabel,null,!leftIsConst);        if (leftIsTrue) {          break generateOperands;        }        this.right.generateOptimizedBoolean(currentScope,null,falseLabel,valueRequired && !rightIsConst);      }    }  }}  }
class C{  public final boolean didTouchFocusSelect(){  return getView().didTouchFocusSelect();}  }
class C{  private void createLRULevelCacheInstance(CacheType cacheType){  CarbonLRUCache carbonLRUCache=null;  if (cacheType.equals(CacheType.REVERSE_DICTIONARY) || cacheType.equals(CacheType.FORWARD_DICTIONARY)) {    carbonLRUCache=new CarbonLRUCache(CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE,CarbonCommonConstants.CARBON_MAX_LEVEL_CACHE_SIZE_DEFAULT);    cacheTypeToLRUCacheMap.put(CacheType.REVERSE_DICTIONARY,carbonLRUCache);    cacheTypeToLRUCacheMap.put(CacheType.FORWARD_DICTIONARY,carbonLRUCache);  }}  }
class C{  public static String[] grabArgs(String signature){  Matcher matcher=sigRE.matcher(signature);  boolean b=matcher.matches();  if (!b && matcher.groupCount() != 4)   logger.error("Bad method signature: {}",signature);  String args=matcher.group(4);  if (args.isEmpty())   return new String[0];  return args.split(",");}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.835 -0500",hash_original_method="E7B7C9450E823273368CE03BFFFC56F4",hash_generated_method="7C00E07CBAAEA290928D5CD0E564AA90") @DSVerified @DSSpec(DSCat.IO) public static final long copyReader(Reader source,Writer dest,int bufferSize,long streamSize,CopyStreamListener listener) throws CopyStreamException {  int chars;  long total;  char[] buffer;  buffer=new char[bufferSize];  total=0;  try {    while ((chars=source.read(buffer)) != -1) {      if (chars == 0) {        chars=source.read();        if (chars < 0)         break;        dest.write(chars);        dest.flush();        ++total;        if (listener != null)         listener.bytesTransferred(total,chars,streamSize);        continue;      }      dest.write(buffer,0,chars);      dest.flush();      total+=chars;      if (listener != null)       listener.bytesTransferred(total,chars,streamSize);    }  } catch (  IOException e) {    throw new CopyStreamException("IOException caught while copying.",total,e);  }  return total;}  }
class C{  public static List<String> readFileAsLines(final File selectedFile) throws SpyException {  try {    BufferedReader in=new BufferedReader(new FileReader(selectedFile));    String str;    final List<String> list=new ArrayList<String>();    while ((str=in.readLine()) != null) {      list.add(str);    }    in.close();    return list;  } catch (  IOException e) {    throw new SpyException("Can't open the file at " + selectedFile.getAbsolutePath(),e);  }}  }
class C{  private Proxy nextProxy(){  if (userSpecifiedProxy != null) {    hasNextProxy=false;    return userSpecifiedProxy;  }  if (proxySelectorProxies != null) {    while (proxySelectorProxies.hasNext()) {      Proxy candidate=proxySelectorProxies.next();      if (candidate.type() != Proxy.Type.DIRECT) {        return candidate;      }    }  }  hasNextProxy=false;  return Proxy.NO_PROXY;}  }
class C{  public StatechartRoot createStatechartRoot(){  StatechartRootImpl statechartRoot=new StatechartRootImpl();  return statechartRoot;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:21.646 -0500",hash_original_method="364284D6387231DFE8BEB00860E244AE",hash_generated_method="94FCF7D6584B29E11994CD05B47D594C") public boolean isAlphanumeric(){  return ton == TON_ALPHANUMERIC;}  }
class C{  private boolean isFinishedWithSample(long frameTimeNanos){  return frameTimeNanos - startSampleTimeInNs > fpsConfig.getSampleTimeInNs();}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MInvoicePaySchedule[");  sb.append(get_ID()).append("-Due=" + getDueDate() + "/"+ getDueAmt()).append(";Discount=").append(getDiscountDate() + "/" + getDiscountAmt()).append("]");  return sb.toString();}  }
class C{  public void randomize(int upperBound){  downstairs.randomize(upperBound);  this.fireProjectorDataChanged();}  }
class C{  public boolean isBridge(){  return (vmMethod.getModifiers() & Modifier.BRIDGE) != 0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void createPDF(OutputStream os,boolean finish,int initialPageNo) throws IOException {  List<PageBox> pages=_root.getLayer().getPages();  RenderingContext c=newRenderingContext();  c.setInitialPageNo(initialPageNo);  PageBox firstPage=pages.get(0);  Rectangle2D firstPageSize=new Rectangle2D.Float(0,0,firstPage.getWidth(c) / _dotsPerPoint,firstPage.getHeight(c) / _dotsPerPoint);  if (_pdfVersion != 0f) {    _pdfDoc.setVersion(_pdfVersion);  }  if (_pdfEncryption != null) {    _pdfDoc.setEncryptionDictionary(_pdfEncryption);  }  firePreOpen();  writePDF(pages,c,firstPageSize,_pdfDoc);  if (finish) {    fireOnClose();    _pdfDoc.save(os);    _pdfDoc.close();  }}  }
class C{  public boolean hasHandled(){  for (int i=0; i < getNumEntries(); i++) {    boolean handled=getEntry(i).hasHandled();    if (handled) {      return true;    }  }  return false;}  }
class C{  public void DISABLED_testHorizontalTabColorsBackground(){  withTerminalSized(10,3).enterString("\033[48;5;15m").enterString("\t");  assertCursorAt(0,8);  for (int i=0; i < 10; i++) {    int expectedColor=i < 8 ? 15 : TextStyle.COLOR_INDEX_BACKGROUND;    assertEquals(expectedColor,TextStyle.decodeBackColor(getStyleAt(0,i)));  }}  }
class C{  public TableRendererBasic(Formats[] aFormats){  m_aFormats=aFormats;}  }
class C{  public String preserveOrderTipText(){  return "If enabled, no randomization is occurring and the order in the data is preserved.";}  }
class C{  private static EncodingInfo[] loadEncodingInfo(){  try {    final InputStream is;    SecuritySupport ss=SecuritySupport.getInstance();    is=ss.getResourceAsStream(ObjectFactory.findClassLoader(),ENCODINGS_FILE);    Properties props=new Properties();    if (is != null) {      props.load(is);      is.close();    } else {    }    int totalEntries=props.size();    List encodingInfo_list=new ArrayList();    Enumeration keys=props.keys();    for (int i=0; i < totalEntries; ++i) {      String javaName=(String)keys.nextElement();      String val=props.getProperty(javaName);      int len=lengthOfMimeNames(val);      String mimeName;      char highChar;      if (len == 0) {        mimeName=javaName;        highChar='\u0000';      } else {        try {          final String highVal=val.substring(len).trim();          highChar=(char)Integer.decode(highVal).intValue();        } catch (        NumberFormatException e) {          highChar=0;        }        String mimeNames=val.substring(0,len);        StringTokenizer st=new StringTokenizer(mimeNames,",");        for (boolean first=true; st.hasMoreTokens(); first=false) {          mimeName=st.nextToken();          EncodingInfo ei=new EncodingInfo(mimeName,javaName,highChar);          encodingInfo_list.add(ei);          _encodingTableKeyMime.put(mimeName.toUpperCase(),ei);          if (first)           _encodingTableKeyJava.put(javaName.toUpperCase(),ei);        }      }    }    EncodingInfo[] ret_ei=new EncodingInfo[encodingInfo_list.size()];    encodingInfo_list.toArray(ret_ei);    return ret_ei;  } catch (  java.net.MalformedURLException mue) {    throw new org.apache.xml.serializer.utils.WrappedRuntimeException(mue);  }catch (  java.io.IOException ioe) {    throw new org.apache.xml.serializer.utils.WrappedRuntimeException(ioe);  }}  }
class C{  public void endDocument() throws SAXException {  flushPending();  m_saxHandler.endDocument();  if (m_tracer != null)   super.fireEndDoc();}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public static boolean isNumberAndLetter(String data){  String expr="^[A-Za-z0-9]+$";  return data.matches(expr);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.673 -0500",hash_original_method="7D58B6BCA727F3F67D360A0CFD716CC6",hash_generated_method="4ACB289319BB04D280A4168CCFF88F37") public static String clearProperty(String key){  if (key == null) {    throw new NullPointerException();  }  if (key.isEmpty()) {    throw new IllegalArgumentException();  }  return (String)getProperties().remove(key);}  }
class C{  public void clearFile(File file){  if (file.exists()) {    try {      if (file.isDirectory()) {        for (        File f : file.listFiles()) {          f.delete();        }      } else       if (file.isFile()) {        file.delete();      }    } catch (    Exception ignored) {    }  }}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static String stringFor(int n){switch (n) {case CU_CUBEMAP_FACE_POSITIVE_X:    return "CU_CUBEMAP_FACE_POSITIVE_X";case CU_CUBEMAP_FACE_NEGATIVE_X:  return "CU_CUBEMAP_FACE_NEGATIVE_X";case CU_CUBEMAP_FACE_POSITIVE_Y:return "CU_CUBEMAP_FACE_POSITIVE_Y";case CU_CUBEMAP_FACE_NEGATIVE_Y:return "CU_CUBEMAP_FACE_NEGATIVE_Y";case CU_CUBEMAP_FACE_POSITIVE_Z:return "CU_CUBEMAP_FACE_POSITIVE_Z";case CU_CUBEMAP_FACE_NEGATIVE_Z:return "CU_CUBEMAP_FACE_NEGATIVE_Z";}return "INVALID CUarray_cubemap_face: " + n;}  }
class C{  public static String toString(Query query,IndexSchema schema){  try {    StringBuilder sb=new StringBuilder();    toString(query,schema,sb,0);    return sb.toString();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Override final void addTransitSlightlyUpstreamOfStop(final QVehicle veh){  this.vehQueue.addFirst(veh);}  }
class C{  protected void doInsertWithBodyTest(final String method,final int ntriples,final RDFFormat format) throws Exception {  final byte[] data=genNTRIPLES(ntriples,format);  final AddOp add=new AddOp(data,format);  assertEquals(ntriples,m_repo.add(add));{    final String queryStr="select * where {?s ?p ?o}";    final IPreparedTupleQuery query=m_repo.prepareTupleQuery(queryStr);    assertEquals(ntriples,countResults(query.evaluate()));  }}  }
class C{  protected RMIConnection makeClient(String connectionId,Subject subject) throws IOException {  if (connectionId == null)   throw new NullPointerException("Null connectionId");  RMIConnection client=new RMIConnectionImpl(this,connectionId,getDefaultClassLoader(),subject,env);  IIOPHelper.exportObject(client);  return client;}  }
class C{  public mat4 perspective(float fovDegrees,float aspect,float near,float far){  float t=near * (float)Math.tan((fovDegrees / 2.0f) * Math.PI / 180.0f);  float b=-t;  float r=aspect * t;  float l=-r;  float n=near;  float f=far;  float rl=r - l;  float tb=t - b;  float fn=f - n;  float[] m=this.m;  m[0]=(2.0f * n) / rl;  m[1]=0.0f;  m[2]=0.0f;  m[3]=0.0f;  m[4]=0.0f;  m[5]=(2.0f * n) / tb;  m[6]=0.0f;  m[7]=0.0f;  m[8]=(r + l) / rl;  m[9]=(t + b) / tb;  m[10]=-(f + n) / fn;  m[11]=-1.0f;  m[12]=0.0f;  m[13]=0.0f;  m[14]=-(2.0f * f * n) / fn;  m[15]=0.0f;  return this;}  }
class C{  public void cancel(){  U.interrupt(scannerThread);}  }
class C{  public void testSimpleWarJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public boolean isValid(){  SSLSessionContext context=sessionContext;  if (isValid && context != null && context.getSessionTimeout() != 0 && getCreationTime() + (context.getSessionTimeout() * 1000) < System.currentTimeMillis()) {    isValid=false;  }  return isValid;}  }
class C{  public void overwriteWith(final FormObject form){  if (form == null) {    return;  }  if (form.parentRef != null) {    parentRef=form.parentRef;  }  if (form.flags != null) {    flags=form.flags.clone();  }  if (form.selectionIndices != null) {    selectionIndices=form.selectionIndices.clone();  }  if (form.selectedItem != null) {    selectedItem=form.selectedItem;  }  if (form.ref != null) {    ref=form.ref;  }  if (form.textColor != null) {    textColor=form.textColor.clone();  }  if (form.textFont != null) {    textFont=form.textFont;  }  if (form.textSize != -1) {    textSize=form.textSize;  }  if (form.textString != null) {    textString=form.textString;  }  if (form.appearancesUsed) {    appearancesUsed=form.appearancesUsed;  }  if (form.offsetDownIcon) {    offsetDownIcon=form.offsetDownIcon;  }  if (form.noDownIcon) {    noDownIcon=form.noDownIcon;  }  if (form.invertDownIcon) {    invertDownIcon=form.invertDownIcon;  }  if (form.normalOffImage != null) {    normalOffImage=form.normalOffImage;  }  if (form.normalOnImage != null) {    normalOnImage=form.normalOnImage;  }  if (form.rolloverOffImage != null) {    rolloverOffImage=form.rolloverOffImage;  }  if (form.rolloverOnImage != null) {    rolloverOnImage=form.rolloverOnImage;  }  if (form.downOffImage != null) {    downOffImage=form.downOffImage;  }  if (form.downOnImage != null) {    downOnImage=form.downOnImage;  }  if (form.pageNumber != -1) {    pageNumber=form.pageNumber;  }  if (form.cColor != null) {    cColor=form.cColor;  }  if (form.contents != null) {    contents=form.contents;  }  if (form.show) {    show=form.show;  }  AA=form.AA;  AP=form.AP;  BS=form.BS;  D=form.D;  OC=form.OC;  C=(form.C == null) ? null : form.C.clone();  QuadPoints=(form.QuadPoints == null) ? null : form.QuadPoints.clone();  InkList=(form.InkList == null) ? null : form.InkList.clone();  F=form.F;  Ff=form.Ff;  CO=(form.CO == null) ? null : form.CO.clone();  Opt=(form.Opt == null) ? null : form.Opt.clone();  Q=form.Q;  MaxLen=form.MaxLen;  FT=form.FT;  rawAS=(form.rawAS == null) ? null : form.rawAS.clone();  rawDA=(form.rawDA == null) ? null : form.rawDA.clone();  rawDV=(form.rawDV == null) ? null : form.rawDV.clone();  rawJS=(form.rawJS == null) ? null : form.rawJS.clone();  rawNM=(form.rawNM == null) ? null : form.rawNM.clone();  rawTM=(form.rawTM == null) ? null : form.rawTM.clone();  rawTU=(form.rawTU == null) ? null : form.rawTU.clone();  rawV=(form.rawV == null) ? null : form.rawV.clone();  T=form.T;  rawT=(form.rawT == null) ? null : form.rawT.clone();  Rect=(form.Rect == null) ? null : form.Rect.clone();  TI=form.TI;  MK=(form.MK == null) ? null : form.MK;  this.setSelected(form.isSelected);}  }
class C{  @PatchMethod public static <T>void add(List array,T value){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Name newName(String[] identifiers){  int count=identifiers.length;  if (count == 0) {    throw new IllegalArgumentException();  }  Name result=newSimpleName(identifiers[0]);  for (int i=1; i < count; i++) {    SimpleName name=newSimpleName(identifiers[i]);    result=newQualifiedName(result,name);  }  return result;}  }
class C{  public void testEmptyTerm() throws IOException {  Directory indexStore=getIndexStore("field",new String[]{"nowildcard","nowildcardx"});  IndexReader reader=DirectoryReader.open(indexStore);  IndexSearcher searcher=newSearcher(reader);  MultiTermQuery wq=new WildcardQuery(new Term("field",""));  wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);  assertMatches(searcher,wq,0);  Query q=searcher.rewrite(wq);  assertTrue(q instanceof MatchNoDocsQuery);  reader.close();  indexStore.close();}  }
class C{  private void syncStaticSettings(WebSettings settings){  settings.setDefaultFontSize(16);  settings.setDefaultFixedFontSize(13);  settings.setNeedInitialFocus(false);  settings.setSupportMultipleWindows(true);  settings.setEnableSmoothTransition(true);  settings.setAllowContentAccess(true);  settings.setAppCacheEnabled(true);  settings.setDatabaseEnabled(true);  settings.setDomStorageEnabled(true);  settings.setAppCacheMaxSize(getWebStorageSizeManager().getAppCacheMaxSize());  settings.setAppCachePath(getAppCachePath());  settings.setDatabasePath(mContext.getDir("databases",0).getPath());  settings.setGeolocationDatabasePath(mContext.getDir("geolocation",0).getPath());  settings.setAllowUniversalAccessFromFileURLs(false);  settings.setAllowFileAccessFromFileURLs(false);  settings.setFullscreenSupported(true);}  }
class C{  public JEditorPane(URL initialPage) throws IOException {  this();  setPage(initialPage);}  }
class C{  public DataBaseAdmin(){}  }
class C{  public BallNode(int start,int end,int nodeNumber){  m_Start=start;  m_End=end;  m_NodeNumber=nodeNumber;  m_NumInstances=end - start + 1;}  }
class C{  public static List<ConstraintViolation> check(Resource resource,Property spinPredicate,ProgressMonitor monitor){  return check(resource,spinPredicate,null,monitor);}  }
class C{  protected TClassImpl(){  super();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.152 -0400",hash_original_method="07B0B4B1C33FE11526EFF377A8F71FF7",hash_generated_method="951CF3533930AC7B0133A25611F79034") private static String[] toSuffixes(String[] extensions){  String[] suffixes=new String[extensions.length];  for (int i=0; i < extensions.length; i++) {    suffixes[i]="." + extensions[i];  }  return suffixes;}  }
class C{  public LongBigList signatures(final int signatureWidth,final ProgressLogger pl) throws IOException {  final LongBigList signatures=LongArrayBitVector.getInstance().asLongBigList(signatureWidth);  final long signatureMask=-1L >>> Long.SIZE - signatureWidth;  signatures.size(size());  pl.expectedUpdates=size();  pl.itemsName="signatures";  pl.start("Signing...");  for (  ChunkedHashStore.Chunk chunk : this) {    final Iterator<long[]> chunkIterator=chunk.iterator();    for (int i=chunk.size(); i-- != 0; ) {      final long[] quadruple=chunkIterator.next();      signatures.set(quadruple[3],signatureMask & quadruple[0]);      pl.lightUpdate();    }  }  pl.done();  return signatures;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public ConfigurationSocketAdapter configure(String resource) throws RuntimeException {  if (log.isInfoEnabled()) {    log.info("Configuring from resource: " + resource);  }  InputStream stream=getConfigurationInputStream(resource);  ConfigurationSocketAdapterParser.doConfigure(this,stream,resource);  return this;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(16,8);  childData=child.getData();  assertEquals("characterdataDeleteDataMiddleAssert","1230 North Ave. Texas 98551",childData);}  }
class C{  private Optional(){  this.value=null;}  }
class C{  @JsonProperty("username") public Credentials withUsername(String username){  this.username=username;  return this;}  }
class C{  public Projection create(Properties props) throws ProjectionException {  try {    LatLonPoint llp=convertToLLP((Point2D)props.get(ProjectionFactory.CENTER));    float scale=PropUtils.floatFromProperties(props,ProjectionFactory.SCALE,10000000);    int height=PropUtils.intFromProperties(props,ProjectionFactory.HEIGHT,100);    int width=PropUtils.intFromProperties(props,ProjectionFactory.WIDTH,100);    double central_meridian=PropUtils.doubleFromProperties(props,CentralMeridianProperty,centralMeridian);    double sp_one=PropUtils.doubleFromProperties(props,StandardParallelOneProperty,standardParallel1);    double sp_two=PropUtils.doubleFromProperties(props,StandardParallelTwoProperty,standardParallel2);    double rl=PropUtils.doubleFromProperties(props,ReferenceLatitudeProperty,referenceLatitude);    double fe=PropUtils.doubleFromProperties(props,FalseEastingProperty,falseEasting);    double fn=PropUtils.doubleFromProperties(props,FalseNorthingProperty,falseNorthing);    Ellipsoid ellps=(Ellipsoid)props.get(ProjectionFactory.DATUM);    return new LambertConformal(llp,scale,width,height,central_meridian,sp_one,sp_two,rl,fe,fn,ellps);  } catch (  Exception e) {    if (Debug.debugging("proj")) {      Debug.output("LambertConformalLoader: problem creating LambertConformal projection " + e.getMessage());    }  }  throw new ProjectionException("LambertConformalLoader: problem creating LambertConformal projection");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.BINARY_BITWISE_EXPRESSION__LHS:    setLhs((Expression)null);  return;case N4JSPackage.BINARY_BITWISE_EXPRESSION__OP:setOp(OP_EDEFAULT);return;case N4JSPackage.BINARY_BITWISE_EXPRESSION__RHS:setRhs((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public DijkstraDistance(Graph<V,E> g){  this(g,Functions.constant(1),true);}  }
class C{  public static Object deserializeBlob(byte[] blob,Version version,ByteArrayDataInput in) throws IOException, ClassNotFoundException {  Object result;  final long start=startDeserialization();  if (blob.length > 0 && blob[0] == DSCODE.PDX) {    PdxInputStream is=new PdxInputStream(blob);    result=DataSerializer.readObject(is);  } else {    if (in == null) {      in=new ByteArrayDataInput();    }    in.initialize(blob,version);    result=DataSerializer.readObject(in);  }  endDeserialization(start,blob.length);  return result;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private boolean replacePrincipals(List<PolicyParser.PrincipalEntry> principals,KeyStore keystore){  if (principals == null || principals.isEmpty() || keystore == null)   return true;  for (  PolicyParser.PrincipalEntry pppe : principals) {    if (pppe.isReplaceName()) {      String name;      if ((name=getDN(pppe.principalName,keystore)) == null) {        return false;      }      if (debug != null) {        debug.println("  Replacing \"" + pppe.principalName + "\" with "+ X500PRINCIPAL+ "/\""+ name+ "\"");      }      pppe.principalClass=X500PRINCIPAL;      pppe.principalName=name;    }  }  return true;}  }
class C{  public double weightedRecall(){  return m_delegate.weightedRecall();}  }
class C{  @Override public synchronized void stop(){  if (running) {    LOGGER.info("Stopping server");    for (    Endpoint ep : endpoints) {      ep.stop();    }    running=false;  }}  }
class C{  public FileAlreadyExistsException(final String message,final Throwable thr){  super(message,thr);}  }
class C{  public Builder addCustom(final Class clazz,final Serializer serializer){  addOrOverrideRegistration(clazz,null);  return this;}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  public CTextPane(){  this(new JTextPane());}  }
class C{  public static double[] matrixToArray(double[][] input){  return matrixToArray(input,0,input.length,0,input[0].length);}  }
class C{  boolean isSystemTheme(){  return true;}  }
class C{  public void run(){  try {    operatorCheck();    sendCommand();    while (++tries < maxTries) {      try {        Thread.sleep(interval);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();      }      operatorCheck();      sendCommand();    }    myTurnout.setKnownStateToCommanded();  } catch (  TurnoutOperatorException e) {  }}  }
class C{  public IntVector(int blocksize,int increaseSize){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_map=new int[blocksize];}  }
class C{  protected void enableExtension(Extensions extension){  if (extensionsInitialized)   extension.instance.init(this);  extensions=extensions | extension.id;}  }
class C{  public boolean isEmpty(){  return (this.getNumberOfQuestions() + this.getNumberOfAnswers() + this.getNumberOfAuthorities()+ this.getNumberOfAdditionals()) == 0;}  }
class C{  public static double blackFormula(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@StdDev final double stddev){  return blackFormula(payoff,strike,forward,stddev,1.0,0.0);}  }
class C{  public List<ILineSegment> lowerEndpointSegments(){  return lowerSegments;}  }
class C{  Item newCst(final Object cst){  if (cst instanceof Integer) {    int val=((Integer)cst).intValue();    return newInteger(val);  } else   if (cst instanceof Float) {    float val=((Float)cst).floatValue();    return newFloat(val);  } else   if (cst instanceof Long) {    long val=((Long)cst).longValue();    return newLong(val);  } else   if (cst instanceof Double) {    double val=((Double)cst).doubleValue();    return newDouble(val);  } else   if (cst instanceof String) {    return newString((String)cst);  } else {    throw new IllegalArgumentException("value " + cst);  }}  }
class C{  public Command addCommandToRightBar(String name,Image icon,final ActionListener ev){  Command cmd=Command.create(name,icon,ev);  addCommandToRightBar(cmd);  return cmd;}  }
class C{  public RequestParams(Object... keysAndValues){  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    String key=String.valueOf(keysAndValues[i]);    String val=String.valueOf(keysAndValues[i + 1]);    put(key,val);  }}  }
class C{  void processALoad(Instruction s){  HeapOperand<?>[] A1=ssa.getHeapUses(s);  HeapOperand<?>[] A2=ssa.getHeapDefs(s);  if ((A1.length != 1) || (A2.length != 1)) {    throw new OptimizingCompilerException("IndexPropagation.processALoad: aload instruction defs or uses multiple heap variables?");  }  Operand array=ALoad.getArray(s);  Operand index=ALoad.getIndex(s);  if (IRTools.mayBeVolatileFieldLoad(s) || ir.options.READS_KILL) {    addUpdateArrayDefEquation(A2[0].getHeapVariable(),A1[0].getHeapVariable(),array,index);  } else {    addUpdateArrayUseEquation(A2[0].getHeapVariable(),A1[0].getHeapVariable(),array,index);  }}  }
class C{  public void associateStops(TransitLayer transitLayer){  for (  Stop stop : transitLayer.stopForIndex) {    int stopVertex=createAndLinkVertex(stop.stop_lat,stop.stop_lon);    transitLayer.streetVertexForStop.add(stopVertex);  }}  }
class C{  public static Filter create(String eventTypeName){  return new Filter(eventTypeName);}  }
class C{  protected void resetCachedPaymentInfo(){  allPaymentInfos=null;  allPaymentInfos=null;  paymentInfosForSubscription=null;}  }
class C{  public boolean debugFlagSet() throws CLIArgumentParserException {  boolean debugFlagSet=CLIArgumentParser.debugFlagSet();  if (!debugFlagSet && yamlConfiguration.isPresent()) {    debugFlagSet=yamlConfiguration.get().isDebug();  }  return debugFlagSet;}  }
class C{  protected String dumpData() throws Exception {  if (m_children == null) {    return m_clusterInstances.toString();  }  CNode tempNode=new CNode(m_numAttributes);  tempNode.m_clusterInstances=new Instances(m_clusterInstances,1);  for (int i=0; i < m_children.size(); i++) {    tempNode.addChildNode(m_children.get(i));  }  Instances tempInst=tempNode.m_clusterInstances;  tempNode=null;  Add af=new Add();  af.setAttributeName("Cluster");  String labels="";  for (int i=0; i < m_children.size(); i++) {    CNode temp=m_children.get(i);    labels+=("C" + temp.m_clusterNum);    if (i < m_children.size() - 1) {      labels+=",";    }  }  af.setNominalLabels(labels);  af.setInputFormat(tempInst);  tempInst=Filter.useFilter(tempInst,af);  tempInst.setRelationName("Cluster " + m_clusterNum);  int z=0;  for (int i=0; i < m_children.size(); i++) {    CNode temp=m_children.get(i);    for (int j=0; j < temp.m_clusterInstances.numInstances(); j++) {      tempInst.instance(z).setValue(m_numAttributes,i);      z++;    }  }  return tempInst.toString();}  }
class C{  @Override public void visitEnd(){  if (!subroutineHeads.isEmpty()) {    markSubroutines();    if (LOGGING) {      log(mainSubroutine.toString());      Iterator<BitSet> it=subroutineHeads.values().iterator();      while (it.hasNext()) {        BitSet sub=it.next();        log(sub.toString());      }    }    emitCode();  }  if (mv != null) {    accept(mv);  }}  }
class C{  public String toString(){  return props.toString();}  }
class C{  public void addUniqueElement(RVMMethod item){  for (int i=0; i < cnt; i++) {    RVMMethod currentMethod=array[i];    if (item.getDescriptor() == currentMethod.getDescriptor() && item.getName() == currentMethod.getName()) {      return;    }  }  addElement(item);}  }
class C{  public void initStack(int numberOfStacked){  initStack(numberOfStacked,StackPageTransformer.Orientation.VERTICAL,DEFAULT_CURRENT_PAGE_SCALE,DEFAULT_TOP_STACKED_SCALE,DEFAULT_OVERLAP_FACTOR,StackPageTransformer.Gravity.CENTER);}  }
class C{  public static String javaNameToDbName(String javaName){  if (javaName == null)   return null;  if (javaName.length() <= 0)   return "";  StringBuilder dbName=new StringBuilder();  dbName.append(Character.toUpperCase(javaName.charAt(0)));  int namePos=1;  while (namePos < javaName.length()) {    char curChar=javaName.charAt(namePos);    if (Character.isUpperCase(curChar))     dbName.append('_');    dbName.append(Character.toUpperCase(curChar));    namePos++;  }  return dbName.toString();}  }
class C{  @Override public void prepare() throws ReplicatorException, InterruptedException {  if (!hdfsFileIO.exists(serviceDir)) {    logger.info("Service directory does not exist, creating: " + serviceDir.toString());    hdfsFileIO.mkdirs(serviceDir);  }  if (!hdfsFileIO.readable(serviceDir)) {    throw new ReplicatorException("Service directory does not exist or is not readable: " + serviceDir.toString());  } else   if (!hdfsFileIO.writable(serviceDir)) {    throw new ReplicatorException("Service directory is not writable: " + serviceDir.toString());  }  commitSeqno.prepare();}  }
class C{  public double calcPointToLineDistance(Entry startEntry,Entry endEntry,Entry entryPoint){  float xDiffEndStart=(float)endEntry.getXIndex() - (float)startEntry.getXIndex();  float xDiffEntryStart=(float)entryPoint.getXIndex() - (float)startEntry.getXIndex();  double normalLength=Math.sqrt((xDiffEndStart) * (xDiffEndStart) + (endEntry.getVal() - startEntry.getVal()) * (endEntry.getVal() - startEntry.getVal()));  return Math.abs((xDiffEntryStart) * (endEntry.getVal() - startEntry.getVal()) - (entryPoint.getVal() - startEntry.getVal()) * (xDiffEndStart)) / normalLength;}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(getHandle().getModifiers());}  }
class C{  public boolean importKey(ECKey key){  return importKeys(Lists.newArrayList(key)) == 1;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.REFERENCE_TARGET__MAPPING_MODEL:    if (resolve)     return getMappingModel();  return basicGetMappingModel();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void testBug55340() throws Exception {  Connection testConnCacheRSMD=getConnectionWithProps("cacheResultSetMetadata=true");  ResultSetMetaData rsmd;  createTable("testBug55340","(col1 INT, col2 CHAR(10))");  createProcedure("testBug55340","() BEGIN SELECT * FROM testBug55340; END");  assertEquals(this.stmt.executeUpdate("INSERT INTO testBug55340 (col1, col2) VALUES (1, 'one'), (2, 'two'), (3, 'three')"),3);  for (  Connection testConn : new Connection[]{this.conn,testConnCacheRSMD}) {    String testDesc=testConn == testConnCacheRSMD ? "Conn. with 'cacheResultSetMetadata=true'" : "Default connection";    for (int i=1; i <= 2; i++) {      for (      PreparedStatement testStmt : new PreparedStatement[]{testConn.prepareStatement("SELECT * FROM testBug55340"),testConn.prepareCall("CALL testBug55340()")}) {        assertTrue(testStmt.execute());        this.rs=testStmt.getResultSet();        assertResultSetLength(this.rs,3);        rsmd=this.rs.getMetaData();        assertEquals("(" + i + ") "+ testDesc+ " - "+ testStmt.getClass().getSimpleName()+ ":RSMetaData - wrong column count.",2,rsmd.getColumnCount());        assertEquals("(" + i + ") "+ testDesc+ " - "+ testStmt.getClass().getSimpleName()+ ":RSMetaData - wrong column(1) type.",Integer.class.getName(),rsmd.getColumnClassName(1));        assertEquals("(" + i + ") "+ testDesc+ " - "+ testStmt.getClass().getSimpleName()+ ":RSMetaData - wrong column(2) type.",String.class.getName(),rsmd.getColumnClassName(2));        testStmt.close();      }    }  }  testConnCacheRSMD.close();}  }
class C{  protected void write(final String data){}  }
class C{  private void calcSignatureRect(Rectangle r){  int w=getWidth() - Display.getInstance().convertToPixels(6,true);  int h=(int)(w * 9.0 / 16.0);  if (h > getHeight()) {    h=getHeight() - Display.getInstance().convertToPixels(6,false);    w=(int)(h * 16.0 / 9.0);  }  r.setX(getX() + (getWidth() - w) / 2);  r.setY(getY() + (getHeight() - h) / 2);  r.setWidth(w);  r.setHeight(h);}  }
class C{  public void processTokens(String[] tokens){  if (tokens == null) {    return;  }  for (  String tok : tokens) {    if (validToken(tok)) {      processToken(tok);    }  }}  }
class C{  public boolean isLanguageAvailable(String localeAsStr){  return mTts.isLanguageAvailable(new Locale(localeAsStr)) >= 0;}  }
class C{  private boolean isSame(SystemMemberImpl member,GemFireVM vm,boolean examineConfig){  if (vm.equals(member.getGemFireVM())) {    return true;  }  InternalDistributedMember memberId=member.getInternalId();  InternalDistributedMember vmId=vm.getId();  if (vmId.equals(memberId)) {    return true;  }  if ((member instanceof ManagedSystemMemberImpl) && examineConfig) {    ManagedSystemMemberImpl entity=(ManagedSystemMemberImpl)member;    if (entity instanceof CacheServer) {      if (!(vm instanceof ApplicationVM)) {        return false;      }      ApplicationVM app=(ApplicationVM)vm;      if (!app.isDedicatedCacheServer()) {        return false;      }    }    ManagedEntityConfig conf=entity.getEntityConfig();    InetAddress managedHost=InetAddressUtil.toInetAddress(conf.getHost());    File managedWorkingDir=new File(conf.getWorkingDirectory());    File managedProdDir=new File(conf.getProductDirectory());    InetAddress vmHost=vm.getHost();    File vmWorkingDir=vm.getWorkingDirectory();    File vmProdDir=vm.getGemFireDir();    if (vmHost.equals(managedHost) && isSameFile(vmWorkingDir,managedWorkingDir) && isSameFile(vmProdDir,managedProdDir)) {      return true;    }  }  return false;}  }
class C{  public static void writeInt(int v,OutputStream stream) throws IOException {  writeByte((byte)(v & 0xFF),stream);  writeByte((byte)((v >> 8) & 0xFF),stream);  writeByte((byte)((v >> 16) & 0xFF),stream);  writeByte((byte)((v >> 24) & 0xFF),stream);}  }
class C{  public boolean isNonGreedy(){  return nonGreedy;}  }
class C{  public int removeFree(int card){  if (card == freeEncoding[3]) {    freeEncoding[3]=freeEncoding[2];    freeEncoding[2]=freeEncoding[1];    freeEncoding[1]=freeEncoding[0];    freeEncoding[0]=0;    return card;  }  if (card == freeEncoding[2]) {    freeEncoding[2]=freeEncoding[1];    freeEncoding[1]=freeEncoding[0];    freeEncoding[0]=0;    return card;  }  if (card == freeEncoding[1]) {    freeEncoding[1]=freeEncoding[0];    freeEncoding[0]=0;    return card;  }  freeEncoding[0]=0;  return card;}  }
class C{  private static String xmlFormat(String desc){  return desc.replaceAll("<","&lt;").replaceAll(">","&gt;");}  }
class C{  private long dataKeyOffset(byte[] key){  Tuple t=subspace.unpack(key);  return Long.valueOf(t.getString(t.size() - 1).trim());}  }
class C{  static void parseArgs(String[] args){  for (int i=0; i < args.length; i++) {switch (args[i]) {case "-h":      usage();    System.exit(0);  break;case "-v":verbose=true;break;case "-l":list=true;break;case "-t":if (++i >= args.length) die("Error: no timeout value specified");try {exitOnTimer=true;testDurationSeconds=Integer.parseInt(args[i]) * 3600;} catch (NumberFormatException e) {die("Error: unable to determine timeout value");}break;case "-o":if (++i >= args.length) die("Error: no output file specified");try {repstr=new FileOutputStream(args[i]);} catch (FileNotFoundException e) {die("Error: unable to open \"" + args[i] + "\"");}break;case "-c":if (++i >= args.length) die("Error: no config file specified");String confFileName=TEST_SRC_PATH + args[i];try {confstr=new FileInputStream(confFileName);} catch (FileNotFoundException e) {die("Error: unable to open \"" + confFileName + "\"");}break;case "-html":if (format != TEXT) die("Error: conflicting formats");format=HTML;break;case "-xml":if (format != TEXT) die("Error: conflicting formats");format=XML;break;default :usage();die("Illegal option: \"" + args[i] + "\"");}}}  }
class C{  public static boolean checkChrootPath(String zkHost,boolean create) throws KeeperException, InterruptedException {  if (!containsChroot(zkHost)) {    return true;  }  log.info("zkHost includes chroot");  String chrootPath=zkHost.substring(zkHost.indexOf("/"),zkHost.length());  SolrZkClient tmpClient=new SolrZkClient(zkHost.substring(0,zkHost.indexOf("/")),60 * 1000);  boolean exists=tmpClient.exists(chrootPath,true);  if (!exists && create) {    tmpClient.makePath(chrootPath,false,true);    exists=true;  }  tmpClient.close();  return exists;}  }
class C{  public boolean isProcessed(Object element){  return fProcessedElements.contains(element);}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  @Override public void init() throws Exception {  super.init();  properties=getProperties(propertyFile);  final BufferMode bufferMode=bufferModeOverride == null ? BufferMode.valueOf(properties.getProperty(Journal.Options.BUFFER_MODE,Journal.Options.DEFAULT_BUFFER_MODE)) : bufferModeOverride;  properties.setProperty(Journal.Options.BUFFER_MODE,bufferMode.name());  final boolean isTransient=!bufferMode.isStable();  if (isTransient) {    isTemporary=true;  } else {    final String fileStr=properties.getProperty(Journal.Options.FILE);    if (fileStr == null) {      isTemporary=true;      final File tmpFile=File.createTempFile(BigdataGASRunner.class.getSimpleName(),Journal.Options.JNL);      properties.setProperty(Journal.Options.FILE,tmpFile.getAbsolutePath());    } else {      isTemporary=false;    }  }  namespace=namespaceOverride == null ? properties.getProperty(BigdataSail.Options.NAMESPACE,BigdataSail.Options.DEFAULT_NAMESPACE) : namespaceOverride;  properties.setProperty(BigdataSail.Options.NAMESPACE,namespace);  jnl=new Journal(properties);{    final BigdataSail sail;    if (isTemporary) {      new BigdataSail(namespace,jnl).create(properties);      newKB=true;    } else {      sail=new BigdataSail(namespace,jnl);      if (!sail.exists()) {        sail.create(properties);        newKB=true;      } else {        final BigdataSailConnection con=sail.getReadOnlyConnection();        try {          newKB=con.getTripleStore().getStatementCount() == 0L;        }  finally {          con.close();        }      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public NumberFormatException(java.lang.String s){  super(s);}  }
class C{  private static String formatList(String list){  String[] ips=list.split(",");  StringBuilder sb=new StringBuilder();  String delim=",";  for (  String ip : ips) {    sb.append(delim).append(ip.trim());  }  return sb.substring(delim.length());}  }
class C{  protected boolean isRelativeSize(Size size){  String heightMode=size.getHeightMode();  String widthMode=size.getWidthMode();  return Size.NATIVE_DIMENSION.equals(heightMode) || Size.MAINTAIN_ASPECT_RATIO.equals(heightMode) || Size.NATIVE_DIMENSION.equals(widthMode)|| Size.MAINTAIN_ASPECT_RATIO.equals(widthMode);}  }
class C{  private Solution[] extremePoints(){  Solution[] result=new Solution[numberOfObjectives];  for (int i=0; i < numberOfObjectives; i++) {    result[i]=findExtremePoint(i);  }  return result;}  }
class C{  public void testCase22(){  byte rBytes[]={2};  BigInteger aNumber=BigInteger.ONE;  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @Override public int size(){  return _map.size();}  }
class C{  public static String toString(TimeZone timezone){  return timezone.getID();}  }
class C{  public void log(Level logLevel,String msg,Object[] params){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setParameters(params);  setResourceBundle(record);  log(record);}  }
class C{  public void store(Address val){  SimulatedMemory.setWord(this,val.value);}  }
class C{  @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  return mImpl.query(uri,projection,selection,selectionArgs,sortOrder);}  }
class C{  public static double calculateInches(double meters){  double inches=meters * 39.37;  return inches;}  }
class C{  public void testSimpleRWWriter() throws FileNotFoundException, IOException, InterruptedException {  final HALogWriter writer=new HALogWriter(logdir);  try {    final IRootBlockView rbv=openRBV(StoreTypeEnum.RW);    assertEquals(StoreTypeEnum.RW,rbv.getStoreType());    writer.createLog(rbv);    int sequence=0;    final ByteBuffer data=randomData(2000);    final UUID storeUUID=UUID.randomUUID();    final IHAWriteMessage msg=new HAWriteMessage(storeUUID,rbv.getCommitCounter(),rbv.getFirstCommitTime(),sequence,data.limit(),ChecksumUtility.getCHK().checksum(data),rbv.getStoreType(),rbv.getQuorumToken(),1000,0);    writer.writeOnHALog(msg,data);    writer.closeHALog(closeRBV(rbv));  }  finally {    writer.disableHALog();  }  HALogReader.main(new String[]{logdir.toString()});}  }
class C{  public String toString(Tag tag){  return "<DT><B>" + HEADER + "</B><DD>"+ "<table cellpadding=2 cellspacing=0><tr><td bgcolor=\"yellow\">"+ tag.text()+ "</td></tr></table></DD>\n";}  }
class C{  public void addExtensionPoint(ExtensionPoint extensionPoint){  fExtensionPoints.add(extensionPoint);}  }
class C{  public SetEpisodeDetails(int episodeid,Integer playcount,Double rating){  super();  addParameterToRequest("episodeid",episodeid);  if (playcount != null)   addParameterToRequest("playcount",playcount);  if (rating != null)   addParameterToRequest("rating",rating);}  }
class C{  public static Container south(Component south){  return Container.encloseIn(new BorderLayout(),south,BorderLayout.SOUTH);}  }
class C{  public double maxLatitude(){  return maxLatitude;}  }
class C{  public X509CertificateHolderSelector(byte[] subjectKeyId){  this(null,null,subjectKeyId);}  }
class C{  public static ResultSet simpleResultSet(){  SimpleResultSet rs=new SimpleResultSet();  rs.addColumn("ID",Types.INTEGER,10,0);  rs.addColumn("NAME",Types.VARCHAR,255,0);  rs.addRow(0,"Hello");  return rs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.979 -0500",hash_original_method="7020D64852F49C66B1A4A40108BB938F",hash_generated_method="A382C947D99AE7DAB26D118FE5C1393E") public Finished(HandshakeIODataStream in,int length) throws IOException {  if (length == 12 || length == 36) {    data=in.read(length);    this.length=data.length;  } else {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect Finished");  }}  }
class C{  protected void cancelTradeInternally(String partnerName){  if ((this.partnerName == null) || this.partnerName.equals(partnerName)) {    this.partnerName=null;    this.tradeState=TradeState.NO_ACTIVE_TRADE;    moveItemsBack();    tellClients();  }}  }
class C{  private CopyStateTaskService.State buildValidStartState(TaskState.TaskStage stage){  CopyStateTaskService.State startState=new CopyStateTaskService.State();  startState.taskState=new TaskState();  startState.taskState.stage=stage;  startState.controlFlags=ControlFlags.CONTROL_FLAG_OPERATION_PROCESSING_DISABLED;  startState.sourceServers=new HashSet<>();  startState.sourceServers.add(new Pair<>("127.0.0.1",new Integer(1234)));  startState.destinationPort=4321;  startState.destinationIp="127.0.0.1";  startState.factoryLink=ContainerTemplateFactoryService.SELF_LINK;  startState.sourceFactoryLink=ContainerTemplateFactoryService.SELF_LINK;  return startState;}  }
class C{  public void postProcessSetType(int totalAtomicTypes){  int x=0;  types_packed=new int[types_h.size()];  types_sparse=new boolean[totalAtomicTypes];  Enumeration e=types_h.elements();  while (e.hasMoreElements()) {    GPAtomicType t=(GPAtomicType)(e.nextElement());    types_packed[x++]=t.type;    types_sparse[t.type]=true;  }  java.util.Arrays.sort(types_packed);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  Properties ctx=JSPEnv.getCtx(request);  WebUser wu=(WebUser)session.getAttribute(WebUser.NAME);  if (wu == null) {    log.warning("No web user");    response.sendRedirect("loginServlet?ForwardTo=registration.jsp");    return;  }  int A_Registration_ID=WebUtil.getParameterAsInt(request,P_REGISTRATION_ID);  MRegistration reg=null;  if (A_Registration_ID > 0)   reg=new MRegistration(ctx,A_Registration_ID,null);  if (reg == null) {    reg=new MRegistration(ctx,0,null);    A_Registration_ID=0;  }  String name=WebUtil.getParameter(request,"Name");  if (name == null || name.length() == 0) {    WebUtil.createForwardPage(response,"Name is Mandatory","registrations.jsp",4);    return;  }  reg.setC_BPartner_ID(wu.getBpartnerID());  reg.setName(name);  String description=WebUtil.getParameter(request,"Description");  if (description != null && description.length() > 0)   reg.setDescription(description);  boolean isInProduction=WebUtil.getParameterAsBoolean(request,"IsInProduction");  reg.setIsInProduction(isInProduction);  Timestamp assetServiceDate=WebUtil.getParameterAsDate(request,"AssetServiceDate");  if (assetServiceDate == null)   assetServiceDate=new Timestamp(System.currentTimeMillis());  reg.setAssetServiceDate(assetServiceDate);  boolean isAllowPublish=WebUtil.getParameterAsBoolean(request,"IsAllowPublish");  reg.setIsAllowPublish(isAllowPublish);  if (reg.save()) {    if (A_Registration_ID == 0)     reg.loadAttributeValues(request); else     reg.updateAttributeValues(request);    WebUtil.createForwardPage(response,THANKS,"registrations.jsp",3);  } else {    log.log(Level.SEVERE,"Registration not saved");    WebUtil.createForwardPage(response,PROBLEM,"registrations.jsp",3);  }}  }
class C{  public String join(String p1,int p2){  return p1 + ":" + p2;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(FileDownloader.getFileDownloader(stack.getUIMgrSafe()).isProgressivePlay());}  }
class C{  public void update(URI id,ProjectUpdateParam input){  client.put(String.class,input,getIdUrl(),id);}  }
class C{  private void changeSelectionTo(final int index){  final Transition t=TransitionFactory.getTransitionFor(this.transition);  t.performTransition(this.controls.get(this.selection),this.controls.get(index));  this.selection=index;  this.controls.get(this.selection).setBounds(getClientArea());}  }
class C{  @Override public void onQueryComplete(int taskId,Object cookie,Cursor cursor){  if (taskId == AppConstants.QueryTokens.QUERY_WALL_DETAILS) {    Logger.i(TAG,"%s","Wall Post detail loaded with count =" + cursor.getCount());    if (isAttached() && cursor.getCount() > 0 && cursor.moveToFirst()) {      loadWallDataToViews(cursor);    }    cursor.close();  }}  }
class C{  protected static void prepareXmlDoc(){  String toSignFilePath=getPathFromResource("/xml_example.xml");  toSignDocument=new FileDocument(toSignFilePath);}  }
class C{  public DefaultElementSelector(String uri,String name){  super(uri,name);}  }
class C{  @Override public void run(){  amIActive=true;  String pointerHeader, loadingHeader, efficiencyHeader, absorptionHeader, outputHeader;  int row, col, x, y;  float progress=0;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  double gridRes;  double flowDir=0;  double efficiencyMultiplier=1d;  double eff, absorp;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  pointerHeader=args[0];  loadingHeader=args[1];  efficiencyHeader=args[2];  absorptionHeader=args[3];  outputHeader=args[4];  if (pointerHeader.isEmpty() || outputHeader.isEmpty() || loadingHeader.isEmpty()|| efficiencyHeader.isEmpty()|| absorptionHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(pointerHeader,"r");    int rows=pntr.getNumberRows();    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    gridRes=pntr.getCellSizeX();    WhiteboxRaster loading=new WhiteboxRaster(loadingHeader,"r");    if (loading.getNumberRows() != rows || loading.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataLoading=loading.getNoDataValue();    WhiteboxRaster efficiency=new WhiteboxRaster(efficiencyHeader,"r");    if (efficiency.getNumberRows() != rows || efficiency.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataEfficiency=efficiency.getNoDataValue();    if (efficiency.getMaximumValue() > 1) {      efficiencyMultiplier=0.01;    }    WhiteboxRaster absorption=new WhiteboxRaster(absorptionHeader,"r");    if (absorption.getNumberRows() != rows || absorption.getNumberColumns() != cols) {      showFeedback("Each of the input images must have the same dimensions.");      return;    }    double noDataAbsorption=absorption.getNoDataValue();    double outputNoData=-32768.0;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",pointerHeader,WhiteboxRaster.DataType.FLOAT,outputNoData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData && loading.getValue(row,col) != noDataLoading && efficiency.getValue(row,col) != noDataEfficiency && absorption.getValue(row,col) != noDataAbsorption) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i] && loading.getValue(row + dY[i],col + dX[i]) != noDataLoading && efficiency.getValue(row + dY[i],col + dX[i]) != noDataEfficiency && absorption.getValue(row + dY[i],col + dX[i]) != noDataAbsorption) {              z++;            }          }          tmpGrid.setValue(row,col,z);          output.setValue(row,col,loading.getValue(row,col));        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    loading.close();    updateProgress("Loop 2 of 2:",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          x=col;          y=row;          do {            z=output.getValue(y,x);            eff=efficiency.getValue(y,x) * efficiencyMultiplier;            absorp=absorption.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              x+=dX[i];              y+=dY[i];              z2=output.getValue(y,x);              z=((z - absorp) * eff);              if (z < 0) {                z=0;              }              output.setValue(y,x,z2 + z);              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    efficiency.close();    absorption.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  static boolean shouldProcess(KeyEvent e){switch (e.getID()) {case KeyEvent.KEY_PRESSED:    if (!keyIsPressed(e.getKeyCode())) {      registerKeyPressed(e.getKeyCode());    }  return true;case KeyEvent.KEY_RELEASED:if (keyIsPressed(e.getKeyCode()) || e.getKeyCode() == KeyEvent.VK_PRINTSCREEN) {  registerKeyReleased(e.getKeyCode());  return true;}return false;case KeyEvent.KEY_TYPED:return true;default :return false;}}  }
class C{  public T content(String value){  return attr("content",value);}  }
class C{  void dispose(){}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void expandRight(SegmentTreeNode node){  if ((node.rson=computeRightChild(node)) != null) {    expandLeft(node.rson);    expandRight(node.rson);  }}  }
class C{  public SuggestionsAdapter(Context context,SearchView searchView,SearchableInfo mSearchable,WeakHashMap<String,Drawable.ConstantState> outsideDrawablesCache){  super(context,R.layout.abs__search_dropdown_item_icons_2line,null,true);  mSearchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  mProviderContext=mContext;  mSearchView=searchView;  mOutsideDrawablesCache=outsideDrawablesCache;}  }
class C{  protected Anonymous_traceDirective_1_Impl(){  super();}  }
class C{  public VcpcFastRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public EqualsLayout(int alignment,int gap){  setGap(gap);  setAlignment(alignment);}  }
class C{  public boolean includeInReport(String className){  if (!getReportingEnabled()) {    return false;  }  if (this.getClassIgnoreEnabled() && isOnClassIgnoreList(className)) {    return false;  }  if (getStackIgnoreEnabled() && isOnStackIgnoreList(Thread.currentThread().getStackTrace())) {    return false;  }  return true;}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  public int[][][] sparseIndices(){  int numValues=m_classAttribute.numValues();  int[][][] sparseIndices=new int[numValues][numValues][];  for (int i=0; i < numValues; i++) {    for (int j=i + 1; j < numValues; j++) {      sparseIndices[i][j]=m_classifiers[i][j].m_sparseIndices;    }  }  return sparseIndices;}  }
class C{  default Builder withUser(String username){  return with(USER,username);}  }
class C{  public PDFTextFormat(){  cur=new Matrix();  line=new Matrix();  wordStart=new PointF(-100,-100);  prevEnd=new PointF(-100,-100);  tc=tw=tr=tk=0;  tm=PDFShapeCmd.FILL;  th=1;}  }
class C{  public void makeUnique(String[] columns,String conflictPolicy){  uniques.add(CONSTRAINT_UNIQUE_ + TextUtils.join("_",columns) + _UNIQUE__+ TextUtils.join(",",columns)+ __ON_CONFLICT_+ conflictPolicy+ COMMA);}  }
class C{  public final void print(String string,int offset,int length) throws IOException {  if (string == null)   string="null";  int charsLength=CHARS_LENGTH;  char[] chars=chars();  while (length > 0) {    int sublen=Math.min(length,charsLength);    string.getChars(offset,offset + sublen,chars,0);    print(chars,0,sublen);    length-=sublen;    offset+=sublen;  }}  }
class C{  private void cmd_drill(){  m_drillDown=comboDrill.getSelectedIndex() < 1;  if (m_drillDown)   setCursor(Cursor.getDefaultCursor()); else   setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));}  }
class C{  private static void writeSpaces(Writer out,int amt) throws IOException {  while (amt > 0) {    out.write(' ');    amt--;  }}  }
class C{  public static void branchWithCommit(Collection<GitRepository> repositories,final String name,final String file,final String content){  for (  GitRepository repository : repositories) {    branchWithCommit(repository,name,file,content);  }}  }
class C{  @Override public String basePath(){  return "/wm/acl";}  }
class C{  public boolean isNominated(){  return this.isNominated;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public final AssertSubscriber<T> assertFusionRejected(){  if (establishedFusionMode != Fuseable.NONE) {    throw new AssertionError("Fusion was granted");  }  return this;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String availLangCodes=Sage.get("media_language_options",VideoFrame.DEFAULT_MEDIA_LANGUAGE_OPTIONS);  java.util.StringTokenizer toker=new java.util.StringTokenizer(availLangCodes,"|");  String[] langNames=new String[toker.countTokens()];  for (int i=0; i < langNames.length; i++) {    String currLangCode=toker.nextToken();    int semiIdx1=currLangCode.indexOf(';');    int semiIdx2=currLangCode.lastIndexOf(';');    langNames[i]=currLangCode.substring(semiIdx1 + 1,semiIdx2);  }  return langNames;}  }
class C{  public static boolean mightBeProximate(Compiler compiler,int opPos,int stepType) throws javax.xml.transform.TransformerException {  boolean mightBeProximate=false;  int argLen;switch (stepType) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:    argLen=compiler.getArgLength(opPos);  break;default :argLen=compiler.getArgLengthOfStep(opPos);}int predPos=compiler.getFirstPredicateOpPos(opPos);int count=0;while (OpCodes.OP_PREDICATE == compiler.getOp(predPos)) {count++;int innerExprOpPos=predPos + 2;int predOp=compiler.getOp(innerExprOpPos);switch (predOp) {case OpCodes.OP_VARIABLE:return true;case OpCodes.OP_LOCATIONPATH:break;case OpCodes.OP_NUMBER:case OpCodes.OP_NUMBERLIT:return true;case OpCodes.OP_FUNCTION:boolean isProx=functionProximateOrContainsProximate(compiler,innerExprOpPos);if (isProx) return true;break;case OpCodes.OP_GT:case OpCodes.OP_GTE:case OpCodes.OP_LT:case OpCodes.OP_LTE:case OpCodes.OP_EQUALS:int leftPos=OpMap.getFirstChildPos(innerExprOpPos);int rightPos=compiler.getNextOpPos(leftPos);isProx=isProximateInnerExpr(compiler,leftPos);if (isProx) return true;isProx=isProximateInnerExpr(compiler,rightPos);if (isProx) return true;break;default :return true;}predPos=compiler.getNextOpPos(predPos);}return mightBeProximate;}  }
class C{  private void writeJsonObjectEnd() throws TException {  try {    getCurrentWriter().writeEndObject();    popContext();    if (getCurrentContext().isMapKey()) {      String writerString=getWriterString();      popWriter();      getCurrentWriter().writeFieldName(writerString);    }    if (1 == contextStack.size()) {      getCurrentWriter().flush();    }  } catch (  IOException ex) {    throw new TException(ex);  }}  }
class C{  public static boolean isBusyboxInstalled(){  d("(BusyBox Checker) Checking if BusyBox is installed...");  boolean r=checkBusyboxInstalled();  d("(BusyBox Checker) BusyBox " + (r ? "" : "not ") + "detected.");  return r;}  }
class C{  public boolean isFillPoints(){  return mFillPoints;}  }
class C{  public static IndexComponent createFromRow(NameComponentDescription rowKeyDesc,String rowComponentName){  return new IndexComponent(Preconditions.checkNotNull(rowKeyDesc),Preconditions.checkNotNull(rowComponentName),null,null,null,false);}  }
class C{  public XYLocation down(){  return south();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public static Builder fromString(String s){  HashMap<String,String> config=DataUtils.parseMap(s);  Builder builder=new Builder();  builder.config.putAll(config);  return builder;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void parseSail(Element sailTag,Entity entity){  String value=sailTag.getAttribute(INTEGRITY);  try {    int newIntegrity=Integer.parseInt(value);    ((Jumpship)entity).setSailIntegrity(newIntegrity);  } catch (  Exception e) {    warning.append("Invalid sail integrity value in sail " + "integrity tag.\n");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void openFingerprintEditor(String loadFile){  String command;  String pathArg;  String loadArg;  String javaPath;  String jarPath;  String splashArg;  String s=File.separator;  String editorPath=Environment.DIR_MISC.getPath() + s + "Fingerprint_Editor"+ s;  if (loadFile != null && !loadFile.isEmpty()) {    loadArg=String.format("--loadFile=\"%s\"",loadFile);  } else {    loadArg="";  }  pathArg=String.format("--path=\"%s\"",Environment.DIR_FPRINT_USER.getPath());  javaPath=getJavaExecutable();  jarPath=editorPath + "lib" + s+ "GM_FP.jar";  splashArg="-splash:" + editorPath + "images"+ s+ "splash.png";  command=String.format("%s %s -jar %s %s %s",javaPath,splashArg,jarPath,pathArg,loadArg);  try {    Process proc=Runtime.getRuntime().exec(command);  } catch (  Exception|Error ex) {    String msg="Failed to open editor. Reason: " + ex.getCause().getMessage();    Logger.getAnonymousLogger().log(Level.SEVERE,msg,ex);    LogEmitter.factory.get().emit(command,Core.ALERT.DANGER,msg);  }}  }
class C{  public VideoAdapter(Context context){  super();  mContext=context;}  }
class C{  public final double squaredDistance(final int x,final int y){  final double otherMiddleX=x + 0.5;  final double otherMiddleY=y + 0.5;  final Rectangle2D thisArea=getArea();  final double thisMiddleX=thisArea.getCenterX();  final double thisMiddleY=thisArea.getCenterY();  double xDistance=Math.abs(otherMiddleX - thisMiddleX) - (area.getWidth() + 1) / 2;  double yDistance=Math.abs(otherMiddleY - thisMiddleY) - (area.getHeight() + 1) / 2;  if (xDistance < 0) {    xDistance=0;  }  if (yDistance < 0) {    yDistance=0;  }  return xDistance * xDistance + yDistance * yDistance;}  }
class C{  JarWithFile(PathImpl backing){  super(backing);}  }
class C{  static int[] generateCumulativeFrequencies(int[] freq){  int len=freq.length;  int[] cumulativeFreq=new int[len + 1];  for (int i=0, x=0; i < len; i++) {    x+=freq[i];    cumulativeFreq[i + 1]=x;  }  return cumulativeFreq;}  }
class C{  private int doApply(QualifiedName qualifiedName,String alias,IDocument document,ConfigurableCompletionProposal proposal) throws BadLocationException {  String shortSemanticReplacementString=alias != null ? alias : lastSegmentOrDefaultHost(qualifiedName);  String shortSyntacticReplacementString=valueConverter.toString(shortSemanticReplacementString);  ImportRewriter importRewriter=importRewriterFactory.create(document,context);  ReplaceEdit replaceEdit=new ReplaceEdit(proposal.getReplacementOffset(),proposal.getReplacementLength(),shortSyntacticReplacementString);  MultiTextEdit compound=new MultiTextEdit();  AliasLocation aliasLocation=null;  if (alias != null) {    aliasLocation=importRewriter.addSingleImport(qualifiedName,alias,compound);  } else {    importRewriter.addSingleImport(qualifiedName,compound);  }  compound.addChild(replaceEdit);  Position caret=new Position(proposal.getReplacementOffset(),0);  document.addPosition(caret);  compound.apply(document);  document.removePosition(caret);  int cursorPosition=caret.getOffset();  proposal.setReplacementOffset(cursorPosition - shortSemanticReplacementString.length());  proposal.setCursorPosition(shortSemanticReplacementString.length());  if (aliasLocation != null) {    final int aliasOffset=aliasLocation.getBaseOffset() + aliasLocation.getRelativeOffset();    final int aliasLength=shortSyntacticReplacementString.length();    N4JSCompletionProposal castedProposal=(N4JSCompletionProposal)proposal;    castedProposal.setLinkedModeBuilder(null);  }  return cursorPosition;}  }
class C{  protected boolean includeOrderBy(OrderBy orderBy,List<Axis> totals) throws ScopeException, ComputingException, InterruptedException {  Axis axis=getUniverse().asAxis(orderBy.getExpression());  if (axis != null) {    for (    Axis check : totals) {      if (axis.isParentDimension(check)) {        return true;      }    }    return false;  } else {    return true;  }}  }
class C{  public static void fill(Object[] a,Object val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public boolean isWarning(){  return type == ISCConstants.isc_arg_warning;}  }
class C{  @Override public boolean managed(){  return true;}  }
class C{  public void addRealizingClass(ClassType type){  addRealizingClassNoBidirectionalUpdate(type);  type.addInterfaceNoBidirectionalUpdate(this);}  }
class C{  public Rational subtract(Rational secondRational){  BigInteger n=(r[0].multiply(secondRational.getDenominator())).subtract(r[1].multiply(secondRational.getNumerator()));  BigInteger d=r[1].multiply(secondRational.getDenominator());  return new Rational(n,d);}  }
class C{  public double dot(Geo b){  return (this.x() * b.x() + this.y() * b.y() + this.z() * b.z());}  }
class C{  public boolean isKnown(){  return type == Type.KNOWN;}  }
class C{  private ExtraProviderWrapper buildKeepProvider(){  IntentShare.ExtraProvider provider=new IntentShare.ExtraProvider("com.google.android.keep").overrideSubject(getString(R.string.article_title));  return new ExtraProviderWrapper("Google Keep",provider);}  }
class C{  public boolean isAlwaysNullBefore(Unit s,Immediate i){  AnalysisInfo ai=(AnalysisInfo)getFlowBefore(s);  return ai.get(i) == NULL;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:47.415 -0500",hash_original_method="D4FAF1FE6F5065E5FE32CF44151438D5",hash_generated_method="CB92EE77197D5318142CF3AE6E253A65") private final StateInfo addState(State state,State parent){  if (mDbg) {    Log.d(TAG,"addStateInternal: E state=" + state.getName() + ",parent="+ ((parent == null) ? "" : parent.getName()));  }  StateInfo parentStateInfo=null;  if (parent != null) {    parentStateInfo=mStateInfo.get(parent);    if (parentStateInfo == null) {      parentStateInfo=addState(parent,null);    }  }  StateInfo stateInfo=mStateInfo.get(state);  if (stateInfo == null) {    stateInfo=new StateInfo();    mStateInfo.put(state,stateInfo);  }  if ((stateInfo.parentStateInfo != null) && (stateInfo.parentStateInfo != parentStateInfo)) {    throw new RuntimeException("state already added");  }  stateInfo.state=state;  stateInfo.parentStateInfo=parentStateInfo;  stateInfo.active=false;  if (mDbg)   Log.d(TAG,"addStateInternal: X stateInfo: " + stateInfo);  return stateInfo;}  }
class C{  public void logError(String message){  logMessage(IStatus.ERROR,message,null);}  }
class C{  public boolean isSetMethod(){  return this.method != null;}  }
class C{  public final Vec2D invert(){  x*=-1;  y*=-1;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  int i;  double radToDeg=180 / Math.PI;  double degToRad=Math.PI / 180;  double zFactor=1;  double z;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double fx, fy;  double gridRes, eightGridRes;  double azimuth=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  azimuth=Double.parseDouble(args[2]);  if (azimuth < 0 || azimuth > 360) {    azimuth=0;  }  zFactor=Double.parseDouble(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    gridRes=DEM.getCellSizeX();    eightGridRes=8 * gridRes;    if (DEM.getXYUnits().toLowerCase().contains("deg") || DEM.getProjection().toLowerCase().contains("geog")) {      double midLat=(DEM.getNorth() - DEM.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("degrees");    double[] N=new double[8];    double rad180=180 * degToRad;    double rad90=90 * degToRad;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          z=z * zFactor;          for (i=0; i < 8; i++) {            N[i]=DEM.getValue(row + dY[i],col + dX[i]);            if (N[i] != noData) {              N[i]=N[i] * zFactor;            } else {              N[i]=z;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            z=180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx));            z=Math.abs(z - azimuth);            if (z > 180) {              z=360 - z;            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,-1);          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static float convertPixelsToDp(float px,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float dp=px / (metrics.densityDpi / 160f);  return dp;}  }
class C{  @DebugLog public void start(@NonNull final ActivityType nextActivityType,@NonNull DateTime nextPomodoro){  nextPomodoroStorage.set(nextPomodoro);  activityTypeStorage.set(nextActivityType);  isOngoingStorage.set(true);}  }
class C{  public static double[][] multiply(final double[][] A,double K){  final double[][] C=new double[A.length][A[0].length];  for (int i=0; i < A.length; i++) {    for (int j=0; j < A[i].length; j++) {      C[i][j]=A[i][j] * K;    }  }  return C;}  }
class C{  private List<UnManagedNFSShareACL> queryDBNfsShares(UnManagedFileSystem fs){  _logger.info("Querying All Nfs Share ACLs Using FsId {}",fs.getId());  try {    ContainmentConstraint containmentConstraint=ContainmentConstraint.Factory.getUnManagedNfsShareAclsConstraint(fs.getId());    List<UnManagedNFSShareACL> nfsShareACLList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,UnManagedNFSShareACL.class,containmentConstraint);    return nfsShareACLList;  } catch (  Exception e) {    _logger.error("Error while querying {}",e);  }  return new ArrayList<UnManagedNFSShareACL>();}  }
class C{  public TextEvent(Object source,String text,String textTitle){  super(source);  m_text=text;  m_textTitle=textTitle;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:39.187 -0500",hash_original_method="A0387A443FBD0EC599BEE38B5BCEEEFE",hash_generated_method="5C2161AC971639E52DE7C8DCE4B7E498") public ClipDescription(ClipDescription o){  mLabel=o.mLabel;  mMimeTypes=o.mMimeTypes;}  }
class C{  private void closeStartIfNecessary() throws IOException {  if (closeStart) {    writer.write(">");    closeStart=false;  }}  }
class C{  public void testExistingTypeNoOptions(){  epService=EPServiceProviderManager.getProvider("testExistingTypeNoOptions",makeConfig("TypeA",useBean));  epService.initialize();  EPStatement stmt=epService.getEPAdministrator().createEPL("select symbol, price, volume from TypeA.win:length(100)");  SupportUpdateListener listener=new SupportUpdateListener();  stmt.addListener(listener);  (new CSVInputAdapter(epService,new AdapterInputSource(CSV_FILENAME_ONELINE_TRADE),"TypeA")).start();  assertEquals(1,listener.getNewDataList().size());  String graph="create dataflow ReadCSV " + "FileSource -> mystream<TypeA> { file: '" + CSV_FILENAME_ONELINE_TRADE + "', hasTitleLine: true, classpathFile: true }"+ "DefaultSupportCaptureOp(mystream) {}";  epService.getEPAdministrator().createEPL(graph);  DefaultSupportCaptureOp<Object> outputOp=new DefaultSupportCaptureOp<Object>();  EPDataFlowInstance instance=epService.getEPRuntime().getDataFlowRuntime().instantiate("ReadCSV",new EPDataFlowInstantiationOptions().operatorProvider(new DefaultSupportGraphOpProvider(outputOp)));  instance.run();  List<List<Object>> received=outputOp.getAndReset();  Object[] receivedArr=received.get(0).toArray();  assertEquals(1,receivedArr.length);}  }
class C{  private void fadeVideoEdge(float aOpacity,int aAnimDuration){  if (null != mHeaderPendingCallView) {    mHeaderPendingCallView.animate().alpha(aOpacity).setDuration(aAnimDuration).setInterpolator(new AccelerateInterpolator());  }  if (null != mButtonsContainerView) {    mButtonsContainerView.animate().alpha(aOpacity).setDuration(aAnimDuration).setInterpolator(new AccelerateInterpolator());  }}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs && null != m_avts) {    int nAttrs=m_avts.size();    for (int i=(nAttrs - 1); i >= 0; i--) {      AVT avt=(AVT)m_avts.get(i);      avt.callVisitors(visitor);    }  }  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public void waveformDraw(){  mWidth=mWaveformView.getMeasuredWidth();  if (mOffsetGoal != mOffset && !mKeyDown)   updateDisplay(); else   if (mIsPlaying) {    updateDisplay();  } else   if (mFlingVelocity != 0) {    updateDisplay();  }}  }
class C{  @Deprecated static public LIUSBEthernetAdapter instance(){  if (mInstance == null) {    mInstance=new LIUSBEthernetAdapter();  }  return mInstance;}  }
class C{  public static void partialURLEncodeVal(Appendable dest,String val) throws IOException {  for (int i=0; i < val.length(); i++) {    char ch=val.charAt(i);    if (ch < 32) {      dest.append('%');      if (ch < 0x10)       dest.append('0');      dest.append(Integer.toHexString(ch));    } else {switch (ch) {case ' ':        dest.append('+');      break;case '&':    dest.append("%26");  break;case '%':dest.append("%25");break;case '=':dest.append("%3D");break;case '+':dest.append("%2B");break;default :dest.append(ch);break;}}}}  }
class C{  @PatchMethod(override=true) public static void alert(String msg){}  }
class C{  public void requestThrottleWindowDestruction(ThrottleWindow frame){  if (frame != null) {    destroyThrottleWindow(frame);    try {      throttleWindows.remove(throttleWindows.indexOf(frame));    } catch (    java.lang.ArrayIndexOutOfBoundsException ex) {      log.debug(ex.toString());    }    if (throttleWindows.size() > 0) {      requestFocusForNextFrame();    }  }}  }
class C{  public boolean isAuthenticated(){  return authenticated;}  }
class C{  protected boolean containsValue(double value){  boolean result=false;  for (  FieldMetaInfo.Interval i : m_intervals) {    if (i.containsValue(value)) {      result=true;      break;    }  }  return result;}  }
class C{  private void removeOurUIs(){  for (  String uiName : UI_LIST) {    uiDefaults.remove(uiName + "UI");  }}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    boolean filePresent=file.exists();    if (!file.delete()) {      if (!filePresent) {        throw new FileNotFoundException("File does not exist: " + file);      }      String message="Unable to delete file: " + file;      throw new IOException(message);    }  }}  }
class C{  public void revertToDefault(int row){  set(m_defaultValue,row);}  }
class C{  public void publish(String topic,String payload,int qos,boolean isRetained){  if (publisherPool == null) {    throw new NullPointerException("Publisher pool is not initialize.");  }  publisherPool.publish(topic,payload,qos,isRetained);}  }
class C{  public void release(){  if (acquireCount.get() == 0) {    throw new RuntimeException("The shared object was not acquired before.");  }  if (acquireCount.decrementAndGet() == 0) {    checkRelease();  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.065 -0500",hash_original_method="1B3D6EB0D2C9672C0490DD487A44B10E",hash_generated_method="FCD633531AD55B8EC2ADF8EE06DBC285") public HttpRequestExecutor(){  super();}  }
class C{  protected void createVmsInDatacenterBase(int datacenterId){  int requestedVms=0;  if (createvmflag) {    CreateVMs(datacenterId);    createvmflag=false;  }  for (int i=0; i < 100; i++) {    this.getAppCloudletList().add(new WorkflowApp(AppCloudlet.APP_Workflow,NetworkConstants.currentAppId,0,0,getId()));    NetworkConstants.currentAppId++;  }  int k=0;  for (  AppCloudlet app : this.getAppCloudletList()) {    List<Integer> vmids=new ArrayList<Integer>();    int numVms=linkDC.getVmList().size();    UniformDistr ufrnd=new UniformDistr(0,numVms,5);    for (int i=0; i < app.numbervm; i++) {      int vmid=(int)ufrnd.sample();      vmids.add(vmid);    }    if (vmids != null) {      if (!vmids.isEmpty()) {        app.createCloudletList(vmids);        for (int i=0; i < app.numbervm; i++) {          app.clist.get(i).setUserId(getId());          appCloudletRecieved.put(app.appID,app.numbervm);          this.getCloudletSubmittedList().add(app.clist.get(i));          cloudletsSubmitted++;          sendNow(getVmsToDatacentersMap().get(this.getVmList().get(0).getId()),CloudSimTags.CLOUDLET_SUBMIT,app.clist.get(i));        }        System.out.println("app" + (k++));      }    }  }  setAppCloudletList(new ArrayList<AppCloudlet>());  if (NetworkConstants.iteration < 10) {    NetworkConstants.iteration++;    this.schedule(getId(),NetworkConstants.nexttime,CloudSimTags.NextCycle);  }  setVmsRequested(requestedVms);  setVmsAcks(0);}  }
class C{  public List<Entry> filter(List<Entry> points){  return filter(points,mTolerance);}  }
class C{  public void calcScore(){  if ((getPredicateCount() > 0) || (null != m_relativePathPattern)) {    m_score=SCORE_OTHER;  } else   super.calcScore();  if (null == m_targetString)   calcTargetString();}  }
class C{  public static Vec4 computeArrayNormal(Vec4[] coords){  Vec4[] verts=WWMath.findThreeIndependentVertices(coords);  return verts != null ? WWMath.computeTriangleNormal(verts[0],verts[1],verts[2]) : null;}  }
class C{  public SaveLoadManager(String profileName){  this.profileName=profileName;}  }
class C{  public GroupGraphPattern(){}  }
class C{  public static void wait(Object obj,long timeout){synchronized (obj) {    try {      obj.wait(timeout);    } catch (    InterruptedException inex) {    }  }}  }
class C{  public static void socketWriteEnd(Object context,InetAddress address,int port,long bytesWritten){  IoTraceHandler.socketWriteEnd(context,address,port,bytesWritten);}  }
class C{  public boolean isNewMessage(){  if (message == null) {    throw new IllegalStateException("no message present");  }  return message.startsWith("new(") || message.equals("new");}  }
class C{  private String toParsableString(String statementSep){  assert statementSep != null;  StringBuilder b=new StringBuilder();  for (int i=0; i < size(); i++) {    Statement sk=getStatement(i);    b.append(sk.toParsableString(Variable.classToVariableName(sk.getOutputType()) + i,getInputs(i)));    b.append(statementSep);  }  return b.toString();}  }
class C{  protected void layoutAxes(){}  }
class C{  public void testShortTimeout() throws IOException {  fetch("www.fortify.net",443,true,"/sslcheck.html",1,10,5,60);  fetch("mail.google.com",443,true,"/mail/",1,10,5,60);}  }
class C{  private static RegisterSpecList explicitize(RegisterSpecList orig){  int wordCount=wordCount(orig);  int sz=orig.size();  if (wordCount == sz) {    return orig;  }  RegisterSpecList result=new RegisterSpecList(wordCount);  int wordAt=0;  for (int i=0; i < sz; i++) {    RegisterSpec one=orig.get(i);    result.set(wordAt,one);    if (one.getCategory() == 2) {      result.set(wordAt + 1,RegisterSpec.make(one.getReg() + 1,Type.VOID));      wordAt+=2;    } else {      wordAt++;    }  }  result.setImmutable();  return result;}  }
class C{  public boolean isAfterEndOfLine(){  return myAfterEndOfLine;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.CALL__STEP:    return step != null;}return super.eIsSet(featureID);}  }
class C{  public static boolean hasEncoding(List<Encoding> encodings,Encoding encoding){  return encodings.contains(encoding);}  }
class C{  public void saveExtraData(){}  }
class C{  public void expectServerProxyFailed(MessageInfo messageInfo){  expectedApiCalls.add(new ApiCall(SERVER_PROXY_FAILED,new Object[]{messageInfo.getOrigin(),messageInfo.getClient(),messageInfo.getService()}));}  }
class C{  public void stopMovie(){synchronized (Display2D.this.simulation.state.schedule) {    if (movieMaker == null)     return;    if (!movieMaker.stop()) {      Object[] options={"Drat"};      JOptionPane.showOptionDialog(this,"Your movie did not write to disk\ndue to a spurious JMF movie generation bug.","JMF Movie Generation Bug",JOptionPane.OK_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[0]);    }    movieMaker=null;    if (movieButton != null) {      movieButton.setIcon(MOVIE_OFF_ICON);      movieButton.setPressedIcon(MOVIE_OFF_ICON_P);    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected ObjectReferenceMapping initOneToOneMapping(){  ObjectReferenceMapping mapping=getDescriptor().getClassDescriptor().newOneToOneMapping();  processRelationshipMapping(mapping);  mapping.setIsOptional(isOptional());  mapping.setDerivesId(derivesId());  processIndirection(mapping);  processReturnInsertAndUpdate();  return mapping;}  }
class C{  public DeleteRepositoryRequest(String name){  this.name=name;}  }
class C{  public void updateAsciiStream(String columnName,java.io.InputStream x,int length) throws SQLException {  updateAsciiStream(findColumn(columnName),x,length);}  }
class C{  public boolean isMaxMeasuredValueVisible(){  return null == maxMeasuredValueVisible ? _maxMeasuredValueVisible : maxMeasuredValueVisible.get();}  }
class C{  public ExtensionProperty(String qualName){  setQualname(qualName);}  }
class C{  private double[][] runDerivator(Relation<ParameterizationFunction> relation,int dim,CASHInterval interval,ModifiableDBIDs ids){  Database derivatorDB=buildDerivatorDB(relation,interval);  PCARunner pca=new PCARunner(new StandardCovarianceMatrixBuilder());  EigenPairFilter filter=new FirstNEigenPairFilter(dim - 1);  DependencyDerivator<DoubleVector> derivator=new DependencyDerivator<>(null,FormatUtil.NF4,pca,filter,0,false);  CorrelationAnalysisSolution<DoubleVector> model=derivator.run(derivatorDB);  double[][] weightMatrix=model.getSimilarityMatrix();  DoubleVector centroid=DoubleVector.wrap(model.getCentroid());  DistanceQuery<DoubleVector> df=QueryUtil.getDistanceQuery(derivatorDB,new MatrixWeightedDistanceFunction(weightMatrix));  double eps=.25;  ids.addDBIDs(interval.getIDs());  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    DoubleVector v=DoubleVector.wrap(relation.get(iditer).getColumnVector());    double d=df.distance(v,centroid);    if (d <= eps) {      ids.add(iditer);    }  }  double[][] basis=model.getStrongEigenvectors();  return getMatrix(basis,0,basis.length - 1,0,dim - 2);}  }
class C{  public FilterPred(FilterPred pred){  this.boolOp=pred.getBoolOp();  for (  FilterPredClause clause : pred.getClauses()) {    this.clauses.add(new FilterPredClause(clause));  }}  }
class C{  public Bag(Object[] other){  this();  if (other != null)   addAll(other);}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  protected File createTestFile(String filename,String content) throws IOException {  File file=new File(folder.getRoot(),filename);  file.getParentFile().mkdirs();  Files.write(file.toPath(),content.getBytes(StandardCharsets.UTF_8));  return file;}  }
class C{  public void updateSeries(CandleSeries source,int skip,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleSeries).");  }  if (getLength() == null || getLength() < 1) {    throw new IllegalArgumentException("MA period must be greater than zero.");  }  if (source.getItemCount() > skip) {    CandleItem candleItem=(CandleItem)source.getDataItem(skip);    if (0 != candleItem.getClose()) {      double price=this.getPrice(candleItem);      if (this.yyValues.size() == getLength()) {        if (newBar) {          sum=sum - this.yyValues.getLast() + price;          this.yyValues.removeLast();          this.yyValues.addFirst(price);          this.volValues.removeLast();          this.volValues.addFirst(candleItem.getVolume());        } else {          sum=sum - this.yyValues.getFirst() + price;          this.yyValues.removeFirst();          this.yyValues.addFirst(price);        }      } else {        if (newBar) {          sum=sum + price;          this.yyValues.addFirst(price);          this.volValues.addFirst(candleItem.getVolume());        } else {          sum=sum + price - this.yyValues.getFirst();          this.yyValues.removeFirst();          this.yyValues.addFirst(price);          this.volValues.removeFirst();          this.volValues.addFirst(candleItem.getVolume());        }      }      if (this.yyValues.size() == getLength()) {        double ma=calculateMA(this.getMAType(),this.yyValues,this.volValues,sum);        if (newBar) {          MovingAverageItem dataItem=new MovingAverageItem(candleItem.getPeriod(),new BigDecimal(ma));          this.add(dataItem,false);        } else {          MovingAverageItem dataItem=(MovingAverageItem)this.getDataItem(this.getItemCount() - 1);          dataItem.setMovingAverage(ma);        }      }    }  }}  }
class C{  public ClientResponse delete(URI url){  return _client.resource(url).delete(ClientResponse.class);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.ENTITY_PROPERTY_SOURCE__PROPERTY:    setProperty((Property)null);  return;}super.eUnset(featureID);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:08.756 -0500",hash_original_method="662E48DC77F0E634963E4AF8B4B2319F",hash_generated_method="3031A768012849957C19B4921EB5DA3F") public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory){  return new DelegatedScheduledExecutorService(new ScheduledThreadPoolExecutor(1,threadFactory));}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  String resultString=result.getText();  if (resultString.equals("")) {    Toast.makeText(CaptureActivity.this,"Scan failed!",Toast.LENGTH_SHORT).show();  } else {    Intent resultIntent=new Intent();    Bundle bundle=new Bundle();    bundle.putString("result",resultString);    resultIntent.putExtras(bundle);    this.setResult(RESULT_OK,resultIntent);  }  CaptureActivity.this.finish();}  }
class C{  public double distance(final double x,final double y){  final double dx=(double)this.x - x;  final double dy=(double)this.y - y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  static public LocalMember[] copyArguments(Context ctx,MemberDefinition field){  Vector v=field.getArguments();  LocalMember res[]=new LocalMember[v.size()];  v.copyInto(res);  for (int i=0; i < res.length; i++) {    res[i]=res[i].copyInline(ctx);  }  return res;}  }
class C{  public static void runUnderLock(ReentrantLock lock,Runnable runnable){  lock.lock();  try {    runnable.run();  }  finally {    lock.unlock();  }}  }
class C{  public void preProcess(final HttpRequest request,final HttpProcessor processor,final HttpContext context) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  if (processor == null) {    throw new IllegalArgumentException("HTTP processor may not be null");  }  if (context == null) {    throw new IllegalArgumentException("HTTP context may not be null");  }  processor.process(request,context);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.Vector rv=null;  java.util.Map rm=null;  java.util.Set alreadyAdded=new java.util.HashSet();  java.util.Vector inputArgs=new java.util.Vector();  for (int i=0; i < curNumberOfParameters; i++)   inputArgs.add(stack.pop());  for (int i=inputArgs.size() - 1; i >= 0; i--) {    Object o2=inputArgs.get(i);    if (o2 instanceof java.util.Collection) {      java.util.Iterator walker=((java.util.Collection)o2).iterator();      while (walker.hasNext()) {        Object o=walker.next();        if (alreadyAdded.add(o)) {          if (rv == null)           rv=new java.util.Vector();          rv.add(o);        }      }    } else     if (o2 instanceof Object[]) {      Object[] oa=(Object[])o2;      for (int j=0; j < oa.length; j++) {        if (alreadyAdded.add(oa[j])) {          if (rv == null)           rv=new java.util.Vector();          rv.add(oa[j]);        }      }    } else     if (o2 instanceof java.util.Map) {      if (rm == null)       rm=new java.util.HashMap();      rm.putAll((java.util.Map)o2);    } else     if (o2 != null && alreadyAdded.add(o2)) {      if (rv == null)       rv=new java.util.Vector();      rv.add(o2);    }  }  if (rv == null) {    if (rm == null)     return new java.util.Vector(); else     return rm;  } else   return rv;}  }
class C{  @TransactionAttribute(TransactionAttributeType.MANDATORY) public List<LocalizedBillingResource> update(List<LocalizedBillingResource> localizedBillingResources) throws BillingApplicationException {  List<LocalizedBillingResource> dbResources=new ArrayList<LocalizedBillingResource>();  for (  LocalizedBillingResource localizedBillingResource : localizedBillingResources) {    dbResources.add(update(localizedBillingResource));  }  return dbResources;}  }
class C{  public boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public CursorRequestMessage(CursorRequestMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStoreName()) {    this.storeName=other.storeName;  }  this.cursorId=other.cursorId;  this.close=other.close;}  }
class C{  public static void wait(Object lock){  try {synchronized (lock) {      lock.wait();    }  } catch (  InterruptedException e) {  }}  }
class C{  public final void testSetMinLength(){  int minLength=2;  MinLengthConstraint minLengthConstraint=new MinLengthConstraint(1);  minLengthConstraint.setMinLength(minLength);  assertEquals(minLength,minLengthConstraint.getMinLength());}  }
class C{  public void tickString(int reqId,int field,String value){  try {synchronized (value) {      if (!m_marketDataRequests.containsKey(new Integer(reqId)))       return;switch (field) {case TickType.RT_VOLUME:{          if (value.startsWith(";"))           return;          StringTokenizer st=new StringTokenizer(value,";");          int tokenNumber=0;          BigDecimal price=new BigDecimal(0);          ZonedDateTime time=null;          while (st.hasMoreTokens()) {            tokenNumber++;            String token=st.nextToken();switch (tokenNumber) {case 1:{                price=(new BigDecimal(Double.parseDouble(token))).setScale(SCALE,BigDecimal.ROUND_HALF_EVEN);                break;              }case 2:{              _log.debug("TickString Trade Size: " + Integer.parseInt(token));              break;            }case 3:{            time=TradingCalendar.getZonedDateTimeFromMilli(Long.parseLong(token));            break;          }case 4:{          _log.debug("TickString Total Volume: " + Integer.parseInt(token) * 100);          break;        }case 5:{        _log.debug("TickString Total Vwap: " + token);        break;      }case 6:{      break;    }default :{    break;  }}}if (price.doubleValue() > 0) {Contract contract=m_marketDataRequests.get(reqId);for (Tradestrategy tradestrategy : contract.getTradestrategies()) {Contract seriesContract=tradestrategy.getStrategyData().getBaseCandleSeries().getContract();int index=tradestrategy.getStrategyData().getBaseCandleSeries().indexOf(time);if (index < 0) return;CandleItem candleItem=(CandleItem)tradestrategy.getStrategyData().getBaseCandleSeries().getDataItem(index);if (seriesContract.getLastAskPrice().doubleValue() > 0 && seriesContract.getLastBidPrice().doubleValue() > 0 && (price.doubleValue() <= seriesContract.getLastAskPrice().doubleValue() && price.doubleValue() >= seriesContract.getLastBidPrice().doubleValue())) {  if (marketUpdateOnClose && (price.doubleValue() != candleItem.getClose())) {    candleItem.setClose(price.doubleValue());    candleItem.setLastUpdateDate(time);    tradestrategy.getStrategyData().getBaseCandleSeries().fireSeriesChanged();  } else {    if (price.doubleValue() > candleItem.getHigh() || price.doubleValue() < candleItem.getLow()) {      candleItem.setClose(price.doubleValue());      candleItem.setLastUpdateDate(time);      tradestrategy.getStrategyData().getBaseCandleSeries().fireSeriesChanged();    }  }}}}break;}default :{break;}}}} catch (Exception ex) {error(reqId,3210,ex.getMessage());}}  }
class C{  private static boolean matches(String match_header,String to_match){  String[] matchValues=match_header.split("\\s*,\\s*");  Arrays.sort(matchValues);  return Arrays.binarySearch(matchValues,to_match) > -1 || Arrays.binarySearch(matchValues,"*") > -1;}  }
class C{  @Override public void buildClassifier(Database database,Relation<? extends ClassLabel> labelrep){  TObjectIntMap<ClassLabel> count=new TObjectIntHashMap<>();  for (DBIDIter iter=labelrep.iterDBIDs(); iter.valid(); iter.advance()) {    count.adjustOrPutValue(labelrep.get(iter),1,1);  }  int max=Integer.MIN_VALUE;  double size=labelrep.size();  distribution=new double[count.size()];  labels=new ArrayList<>(count.size());  TObjectIntIterator<ClassLabel> iter=count.iterator();  for (int i=0; iter.hasNext(); ++i) {    iter.advance();    distribution[i]=iter.value() / size;    labels.add(iter.key());    if (iter.value() > max) {      max=iter.value();      prediction=iter.key();    }  }}  }
class C{  public void initialize(Scheduler sched){  this.scheduler=sched;}  }
class C{  public ByteBuffer(InputStream in) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  buffer=new byte[4096];  int count=0;  while ((count=in.read(buffer,0,buffer.length)) > -1) {    baos.write(buffer,0,count);  }  buffer=baos.toByteArray();}  }
class C{  public static void main(String[] argv){  try {    int seed=42;    if (argv.length > 0) {      seed=Integer.parseInt(argv[0]);    }    NNConditionalEstimator newEst=new NNConditionalEstimator();    Random r=new Random(seed);    int numPoints=50;    if (argv.length > 2) {      numPoints=Integer.parseInt(argv[2]);    }    for (int i=0; i < numPoints; i++) {      int x=Math.abs(r.nextInt() % 100);      int y=Math.abs(r.nextInt() % 100);      System.out.println("# " + x + "  "+ y);      newEst.addValue(x,y,1);    }    int cond;    if (argv.length > 1) {      cond=Integer.parseInt(argv[1]);    } else {      cond=Math.abs(r.nextInt() % 100);    }    System.out.println("## Conditional = " + cond);    Estimator result=newEst.getEstimator(cond);    for (int i=0; i <= 100; i+=5) {      System.out.println(" " + i + "  "+ result.getProbability(i));    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  @Deprecated public GridLeanSet(Collection<E> c){  super(new GridLeanMap<>(F.zip(c,VAL)));}  }
class C{  public CloudInformationService(String name) throws Exception {  super(name);  resList=new LinkedList<Integer>();  arList=new LinkedList<Integer>();  gisList=new LinkedList<Integer>();}  }
class C{  @Override public final void insert(DBIDRef id){  insertLeaf(createNewLeafEntry(DBIDUtil.deref(id)));}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider,SecureRandom random) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  try {    return generate(key,provider,random);  } catch (  NoSuchProviderException e) {    throw e;  }catch (  SignatureException e) {    throw e;  }catch (  InvalidKeyException e) {    throw e;  }catch (  GeneralSecurityException e) {    throw new SecurityException("exception: " + e);  }}  }
class C{  public MBeanRegistrationException(java.lang.Exception e,String message){  super(e,message);}  }
class C{  public UploadExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public boolean is_set_dataunit(){  return this.dataunit != null;}  }
class C{  public DatabaseUtils(Properties props) throws Exception {  if (DRIVERS_ERRORS == null) {    DRIVERS_ERRORS=new Vector<String>();  }  initialize(props);}  }
class C{  public boolean isDepreciated(){  Object oo=get_Value(COLUMNNAME_IsDepreciated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isDefaultSelected(){  return OptionElement.as(this.getElement()).isDefaultSelected();}  }
class C{  public boolean shouldReverse(String token){  int posQ=token.indexOf('?');  int posA=token.indexOf('*');  if (posQ == -1 && posA == -1) {    return false;  }  int pos;  int lastPos;  int len=token.length();  lastPos=token.lastIndexOf('?');  pos=token.lastIndexOf('*');  if (pos > lastPos)   lastPos=pos;  if (posQ != -1) {    pos=posQ;    if (posA != -1) {      pos=Math.min(posQ,posA);    }  } else {    pos=posA;  }  if (len - lastPos < minTrailing) {    return false;  }  if (posQ != -1 && posQ < maxPosQuestion) {    return true;  }  if (posA != -1 && posA < maxPosAsterisk) {    return true;  }  if (maxFractionAsterisk > 0.0f && pos < (float)token.length() * maxFractionAsterisk) {    return true;  }  return false;}  }
class C{  public AttackRotaryWing(String sidc){  super(sidc,4);}  }
class C{  public static String formatDateTime(Date date){  DATE_TIME_FORMAT.get().setTimeZone(getPreferredTimeZone());  return DATE_TIME_FORMAT.get().format(date);}  }
class C{  public boolean containsExtensionElementURI(String uri){  if (null == m_ExtensionElementURIs)   return false;  return m_ExtensionElementURIs.contains(uri);}  }
class C{  void resortPriorities(){  Collections.sort(prioritySortedNeuronList,priorityComparator);}  }
class C{  private LikeRule(final String field,final Pattern pattern){  super();  if (!RESOLVER.isField(field)) {    throw new IllegalArgumentException("Invalid LIKE rule - " + field + " is not a supported field");  }  this.field=field;  this.pattern=pattern;}  }
class C{  RocPlot(boolean precisionRecall){  mMainPanel=new JPanel();  mZoomPP=new RocZoomPlotPanel();  mZoomPP.setOriginIsMin(true);  mZoomPP.setColors(PALETTE);  mProgressBar=new JProgressBar(-1,-1);  mProgressBar.setVisible(true);  mProgressBar.setStringPainted(true);  mProgressBar.setIndeterminate(true);  mProgressBarDelegate=new ProgressBarDelegate(mProgressBar);  mStatusLabel=new JLabel();  mPopup=new JPopupMenu();  mRocLinesPanel=new RocLinesPanel(this);  mScrollPane=new JScrollPane(mRocLinesPanel,JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);  mScrollPane.setWheelScrollingEnabled(true);  mLineWidthSlider=new JSlider(JSlider.HORIZONTAL,LINE_WIDTH_MIN,LINE_WIDTH_MAX,1);  mScoreCB=new JCheckBox("Show Scores");  mScoreCB.setSelected(true);  mSelectAllCB=new JCheckBox("Select / Deselect all");  mTitleEntry=new JTextField("ROC");  mTitleEntry.setMaximumSize(new Dimension(Integer.MAX_VALUE,mTitleEntry.getPreferredSize().height));  mOpenButton=new JButton("Open...");  mOpenButton.setToolTipText("Add a new curve from a file");  mCommandButton=new JButton("Cmd");  mCommandButton.setToolTipText("Send the equivalent rocplot command-line to the terminal");  final ImageIcon icon=createImageIcon("com/rtg/graph/resources/realtimegenomics_logo.png","RTG Logo");  mIconLabel=new JLabel(icon);  mIconLabel.setBackground(new Color(16,159,205));  mIconLabel.setForeground(Color.WHITE);  mIconLabel.setOpaque(true);  mIconLabel.setFont(new Font("Arial",Font.BOLD,24));  mIconLabel.setHorizontalAlignment(JLabel.LEFT);  mIconLabel.setIconTextGap(50);  mGraphType=new JComboBox<>(new String[]{ROC_PLOT,PRECISION_SENSITIVITY});  mGraphType.setSelectedItem(precisionRecall ? PRECISION_SENSITIVITY : ROC_PLOT);  configureUI();}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    String alias=kseFrame.getSelectedEntryAlias();    DGetAlias dGetAlias=new DGetAlias(frame,res.getString("RenameTrustedCertificateAction.NewEntryAlias.Title"),alias);    dGetAlias.setLocationRelativeTo(frame);    dGetAlias.setVisible(true);    String newAlias=dGetAlias.getAlias();    if (newAlias == null) {      return;    }    if (newAlias.equalsIgnoreCase(alias)) {      JOptionPane.showMessageDialog(frame,MessageFormat.format(res.getString("RenameTrustedCertificateAction.RenameAliasIdentical.message"),alias),res.getString("RenameTrustedCertificateAction.RenameEntry.Title"),JOptionPane.WARNING_MESSAGE);      return;    }    if (keyStore.containsAlias(newAlias)) {      String message=MessageFormat.format(res.getString("RenameTrustedCertificateAction.OverWriteEntry.message"),newAlias);      int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("RenameTrustedCertificateAction.RenameEntry.Title"),JOptionPane.YES_NO_OPTION);      if (selected != JOptionPane.YES_OPTION) {        return;      }      keyStore.deleteEntry(newAlias);      newState.removeEntryPassword(newAlias);    }    Certificate cert=keyStore.getCertificate(alias);    keyStore.setCertificateEntry(newAlias,cert);    keyStore.deleteEntry(alias);    currentState.append(newState);    kseFrame.updateControls(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void doWindowOpen(){  try {    this.addReferenceTablePanel(ReferenceTable.newInstance().getCode());  } catch (  Exception ex) {    this.setErrorMessage("Error during initiaization.",ex.getMessage(),ex);  }}  }
class C{  public Enumeration<String> enumerateMeasures(){  if (m_CrossValidate) {    Enumeration<String> enm=m_NNSearch.enumerateMeasures();    Vector<String> measures=new Vector<String>();    while (enm.hasMoreElements())     measures.add(enm.nextElement());    measures.add("measureKNN");    return measures.elements();  } else {    return m_NNSearch.enumerateMeasures();  }}  }
class C{  public boolean isRawTag(){  return rawTag;}  }
class C{  public Coordinate(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public void testAppendUpdateNoClose() throws Exception {  if (dual)   return;  if (appendSupported()) {    Map<String,String> props=properties("owner","group","0555");    create(igfs,paths(DIR,SUBDIR),null);    createFile(igfs,FILE,false);    IgfsOutputStream os=null;    try {      os=igfs.append(FILE,false);      if (permissionsSupported())       igfs.update(FILE,props);      os.close();    }  finally {      U.closeQuiet(os);    }  }}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  public void initFromStrings(String[] initData){  Long key;  String value;  String[] data;  hashData.clear();  for (  String anInitData : initData) {    data=anInitData.split(";");    for (    String aData : data) {      String[] words=aData.split("=");      key=(long)(1 << Long.valueOf(words[0]));      value=words[1];      String xlatKey=value;      xlatKey=xlatKey.replaceAll("[ -]","_").toLowerCase();      value=Messages.getString(xlatKey,value);      log.debug(String.format("%s=%s\n",xlatKey,value));      hashData.put(key,value);    }  }}  }
class C{  @Override public String toString(){  return "cudaTextureDesc[" + createString(",") + "]";}  }
class C{  private static long parseTimeExpression(String time,int frameRate,int subframeRate,int tickRate) throws ParserException {  Matcher matcher=CLOCK_TIME.matcher(time);  if (matcher.matches()) {    String hours=matcher.group(1);    double durationSeconds=Long.parseLong(hours) * 3600;    String minutes=matcher.group(2);    durationSeconds+=Long.parseLong(minutes) * 60;    String seconds=matcher.group(3);    durationSeconds+=Long.parseLong(seconds);    String fraction=matcher.group(4);    durationSeconds+=(fraction != null) ? Double.parseDouble(fraction) : 0;    String frames=matcher.group(5);    durationSeconds+=(frames != null) ? ((double)Long.parseLong(frames)) / frameRate : 0;    String subframes=matcher.group(6);    durationSeconds+=(subframes != null) ? ((double)Long.parseLong(subframes)) / subframeRate / frameRate : 0;    return (long)(durationSeconds * C.MICROS_PER_SECOND);  }  matcher=OFFSET_TIME.matcher(time);  if (matcher.matches()) {    String timeValue=matcher.group(1);    double offsetSeconds=Double.parseDouble(timeValue);    String unit=matcher.group(2);    if (unit.equals("h")) {      offsetSeconds*=3600;    } else     if (unit.equals("m")) {      offsetSeconds*=60;    } else     if (unit.equals("s")) {    } else     if (unit.equals("ms")) {      offsetSeconds/=1000;    } else     if (unit.equals("f")) {      offsetSeconds/=frameRate;    } else     if (unit.equals("t")) {      offsetSeconds/=tickRate;    }    return (long)(offsetSeconds * C.MICROS_PER_SECOND);  }  throw new ParserException("Malformed time expression: " + time);}  }
class C{  private int decodeGaincLocCodes(int chNum,int codedSubbands){  Channel chan=ctx.channels[chNum];  Channel refChan=ctx.channels[0];  int codingMode=br.read(2);switch (codingMode) {case 0:    for (int sb=0; sb < codedSubbands; sb++) {      for (int i=0; i < chan.gainData[sb].numPoints; i++) {        gaincLocMode0(chan.gainData[sb],i);      }    }  break;case 1:if (chNum > 0) {  for (int sb=0; sb < codedSubbands; sb++) {    if (chan.gainData[sb].numPoints <= 0) {      continue;    }    AtracGainInfo dst=chan.gainData[sb];    AtracGainInfo ref=refChan.gainData[sb];    int delta=gain_vlc_tabs[10].getVLC2(br);    int pred=ref.numPoints > 0 ? ref.locCode[0] : 0;    dst.locCode[0]=(pred + delta) & 0x1F;    for (int i=1; i < dst.numPoints; i++) {      boolean moreThanRef=i >= ref.numPoints;      if (dst.levCode[i] > dst.levCode[i - 1]) {        if (moreThanRef) {          delta=gain_vlc_tabs[9].getVLC2(br);          dst.locCode[i]=dst.locCode[i - 1] + delta;        } else {          if (br.readBool()) {            gaincLocMode0(dst,i);          } else {            dst.locCode[i]=ref.locCode[i];          }        }      } else {        VLC tab=moreThanRef ? gain_vlc_tabs[7] : gain_vlc_tabs[10];        delta=tab.getVLC2(br);        if (moreThanRef) {          dst.locCode[i]=dst.locCode[i - 1] + delta;        } else {          dst.locCode[i]=(ref.locCode[i] + delta) & 0x1F;        }      }    }  }} else {  for (int sb=0; sb < codedSubbands; sb++) {    gaincLocMode1(chan.gainData[sb]);  }}break;case 2:if (chNum > 0) {for (int sb=0; sb < codedSubbands; sb++) {if (chan.gainData[sb].numPoints <= 0) {  continue;}AtracGainInfo dst=chan.gainData[sb];AtracGainInfo ref=refChan.gainData[sb];if (dst.numPoints > ref.numPoints || br.readBool()) {  gaincLocMode1(dst);} else {  for (int i=0; i < chan.gainData[sb].numPoints; i++) {    dst.locCode[i]=ref.locCode[i];  }}}} else {for (int i=0; i < chan.gainData[0].numPoints; i++) {gaincLocMode0(chan.gainData[0],i);}for (int sb=1; sb < codedSubbands; sb++) {if (chan.gainData[sb].numPoints <= 0) {  continue;}AtracGainInfo dst=chan.gainData[sb];int delta=gain_vlc_tabs[6].getVLC2(br);int pred=chan.gainData[sb - 1].numPoints > 0 ? chan.gainData[sb - 1].locCode[0] : 0;dst.locCode[0]=(pred + delta) & 0x1F;for (int i=1; i < dst.numPoints; i++) {  boolean moreThanRef=i >= chan.gainData[sb - 1].numPoints;  VLC tab=gain_vlc_tabs[(dst.levCode[i] > dst.levCode[i - 1] ? 2 : 0) + (moreThanRef ? 1 : 0) + 6];  delta=tab.getVLC2(br);  if (moreThanRef) {    dst.locCode[i]=dst.locCode[i - 1] + delta;  } else {    dst.locCode[i]=(chan.gainData[sb - 1].locCode[i] + delta) & 0x1F;  }}}}break;case 3:if (chNum > 0) {for (int sb=0; sb < codedSubbands; sb++) {for (int i=0; i < chan.gainData[sb].numPoints; i++) {if (i >= refChan.gainData[sb].numPoints) {gaincLocMode0(chan.gainData[sb],i);} else {chan.gainData[sb].locCode[i]=refChan.gainData[sb].locCode[i];}}}} else {int deltaBits=br.read(2) + 1;int minVal=br.read(5);for (int sb=0; sb < codedSubbands; sb++) {for (int i=0; i < chan.gainData[sb].numPoints; i++) {chan.gainData[sb].locCode[i]=minVal + i + br.read(deltaBits);}}}break;}for (int sb=0; sb < codedSubbands; sb++) {AtracGainInfo dst=chan.gainData[sb];for (int i=0; i < chan.gainData[sb].numPoints; i++) {if (dst.locCode[i] < 0 || dst.locCode[i] > 31 || (i > 0 && dst.locCode[i] <= dst.locCode[i - 1])) {log.error(String.format("Invalid gain location: ch=%d, sb=%d, pos=%d, val=%d",chNum,sb,i,dst.locCode[i]));return AT3P_ERROR;}}}return 0;}  }
class C{  public static boolean equals(String str1,String str2){  return (str1 == null ? str2 == null : str1.equals(str2));}  }
class C{  public final void writeBoolean(boolean v){  write(v ? 1 : 0);}  }
class C{  public void addListener(IProblemChangedListener listener){  if (fListeners.isEmpty()) {    ResourceUtils.getWorkspace().addResourceChangeListener(this);  }  fListeners.add(listener);}  }
class C{  private void replaceConstants(){  for (int reg=0; reg < regCount; reg++) {    if (latticeValues[reg] != CONSTANT) {      continue;    }    if (!(latticeConstants[reg] instanceof TypedConstant)) {      continue;    }    SsaInsn defn=ssaMeth.getDefinitionForRegister(reg);    TypeBearer typeBearer=defn.getResult().getTypeBearer();    if (typeBearer.isConstant()) {      continue;    }    RegisterSpec dest=defn.getResult();    RegisterSpec newDest=dest.withType((TypedConstant)latticeConstants[reg]);    defn.setResult(newDest);    for (    SsaInsn insn : ssaMeth.getUseListForRegister(reg)) {      if (insn.isPhiOrMove()) {        continue;      }      NormalSsaInsn nInsn=(NormalSsaInsn)insn;      RegisterSpecList sources=insn.getSources();      int index=sources.indexOfRegister(reg);      RegisterSpec spec=sources.get(index);      RegisterSpec newSpec=spec.withType((TypedConstant)latticeConstants[reg]);      nInsn.changeOneSource(index,newSpec);    }  }}  }
class C{  public static ArrayList<Track> prepareLocations(Track track,List<Location> locations){  ArrayList<Track> splitTracks=new ArrayList<Track>();  Track segment=createNewSegment(track,locations.size() > 0 ? locations.get(0).getTime() : -1L);  for (  Location location : locations) {    if (location.getLatitude() > 90) {      endSegment(segment,location.getTime(),splitTracks);      segment=createNewSegment(track,location.getTime());    } else {      segment.addLocation(location);    }  }  endSegment(segment,locations.size() > 0 ? locations.get(locations.size() - 1).getTime() : -1L,splitTracks);  return splitTracks;}  }
class C{  public static <I extends ScoreIter>double computeROCAUC(Predicate<? super I> predicate,I iter){  int poscnt=0, negcnt=0, pospre=0, negpre=0;  double acc=0.;  while (iter.valid()) {    do {      if (predicate.test(iter)) {        ++poscnt;      } else {        ++negcnt;      }      iter.advance();    } while (iter.valid() && iter.tiedToPrevious());    if (negcnt > negpre) {      acc+=(poscnt + pospre) * .5 * (negcnt - negpre);      negpre=negcnt;    }    pospre=poscnt;  }  acc/=negcnt * (long)poscnt;  return acc == acc ? acc : 0.5;}  }
class C{  @Override public int size(){  return _size;}  }
class C{  public void testString(){  Instances icopy=new Instances(m_Instances);  try {    ((RemoveFrequentValues)m_Filter).setAttributeIndex(Integer.toString(indexString + 1));    m_Filter.setInputFormat(icopy);    fail("Should have thrown an exception selecting on a STRING attribute!");  } catch (  Exception ex) {  }}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  Stylesheet thisSheet=handler.getStylesheet();  WhitespaceInfoPaths paths=new WhitespaceInfoPaths(thisSheet);  setPropertiesFromAttributes(handler,rawName,attributes,paths);  Vector xpaths=paths.getElements();  for (int i=0; i < xpaths.size(); i++) {    WhiteSpaceInfo wsi=new WhiteSpaceInfo((XPath)xpaths.elementAt(i),false,thisSheet);    wsi.setUid(handler.nextUid());    thisSheet.setPreserveSpaces(wsi);  }  paths.clearElements();}  }
class C{  public static synchronized void unregister(PurchaseObserver observer){  sPurchaseObserver=null;}  }
class C{  @Override public void perform(IR ir){  ir.getGc().resync();  for (Instruction inst=ir.firstInstructionInCodeOrder(); inst != null; inst=next) {    next=inst.nextInstructionInCodeOrder();    int opcode=inst.getOpcode();switch (opcode) {case NEW_opcode:{        TypeOperand Type=New.getClearType(inst);        RVMClass cls=(RVMClass)Type.getVMType();        IntConstantOperand hasFinalizer=IRTools.IC(cls.hasFinalizer() ? 1 : 0);        RVMMethod callSite=inst.position().getMethod();        IntConstantOperand allocator=IRTools.IC(MemoryManager.pickAllocator(cls,callSite));        IntConstantOperand align=IRTools.IC(ObjectModel.getAlignment(cls));        IntConstantOperand offset=IRTools.IC(ObjectModel.getOffsetForAlignment(cls,false));        Operand tib=ConvertToLowLevelIR.getTIB(inst,ir,Type);        if (VM.BuildForIA32 && VM.runningVM) {          RegisterOperand tmp=ir.regpool.makeTemp(TypeReference.TIB);          inst.insertBefore(Move.create(REF_MOVE,tmp,tib));          tib=tmp.copyRO();        }        IntConstantOperand site=IRTools.IC(MemoryManager.getAllocationSite(true));        RVMMethod target=Entrypoints.resolvedNewScalarMethod;        Call.mutate7(inst,CALL,New.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(cls.getInstanceSize()),tib,hasFinalizer,allocator,align,offset,site);        next=inst.prevInstructionInCodeOrder();        if (ir.options.H2L_INLINE_NEW) {          if (inst.getBasicBlock().getInfrequent())           container.counter1++;          container.counter2++;          if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {            inline(inst,ir);          }        }      }    break;case NEW_UNRESOLVED_opcode:{    int typeRefId=New.getType(inst).getTypeRef().getId();    RVMMethod target=Entrypoints.unresolvedNewScalarMethod;    IntConstantOperand site=IRTools.IC(MemoryManager.getAllocationSite(true));    Call.mutate2(inst,CALL,New.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(typeRefId),site);  }break;case NEWARRAY_opcode:{TypeOperand Array=NewArray.getClearType(inst);RVMArray array=(RVMArray)Array.getVMType();Operand numberElements=NewArray.getClearSize(inst);boolean inline=numberElements instanceof IntConstantOperand;Operand width=IRTools.IC(array.getLogElementSize());Operand headerSize=IRTools.IC(ObjectModel.computeArrayHeaderSize(array));RVMMethod callSite=inst.position().getMethod();IntConstantOperand allocator=IRTools.IC(MemoryManager.pickAllocator(array,callSite));IntConstantOperand align=IRTools.IC(ObjectModel.getAlignment(array));IntConstantOperand offset=IRTools.IC(ObjectModel.getOffsetForAlignment(array,false));Operand tib=ConvertToLowLevelIR.getTIB(inst,ir,Array);if (VM.BuildForIA32 && VM.runningVM) {  RegisterOperand tmp=ir.regpool.makeTemp(TypeReference.TIB);  inst.insertBefore(Move.create(REF_MOVE,tmp,tib));  tib=tmp.copyRO();}IntConstantOperand site=IRTools.IC(MemoryManager.getAllocationSite(true));RVMMethod target=Entrypoints.resolvedNewArrayMethod;Call.mutate8(inst,CALL,NewArray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),numberElements,width,headerSize,tib,allocator,align,offset,site);next=inst.prevInstructionInCodeOrder();if (inline && ir.options.H2L_INLINE_NEW) {  if (inst.getBasicBlock().getInfrequent())   container.counter1++;  container.counter2++;  if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {    inline(inst,ir);  }}}break;case NEWARRAY_UNRESOLVED_opcode:{int typeRefId=NewArray.getType(inst).getTypeRef().getId();Operand numberElements=NewArray.getClearSize(inst);RVMMethod target=Entrypoints.unresolvedNewArrayMethod;IntConstantOperand site=IRTools.IC(MemoryManager.getAllocationSite(true));Call.mutate3(inst,CALL,NewArray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),numberElements,IRTools.IC(typeRefId),site);}break;case NEWOBJMULTIARRAY_opcode:{int dimensions=Multianewarray.getNumberOfDimensions(inst);RVMMethod callSite=inst.position().getMethod();int typeRefId=Multianewarray.getType(inst).getTypeRef().getId();if (dimensions == 2) {RVMMethod target=Entrypoints.optNew2DArrayMethod;Call.mutate4(inst,CALL,Multianewarray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(callSite.getId()),Multianewarray.getClearDimension(inst,0),Multianewarray.getClearDimension(inst,1),IRTools.IC(typeRefId));} else {TypeOperand dimArrayType=new TypeOperand(RVMArray.IntArray);RegisterOperand dimArray=ir.regpool.makeTemp(TypeReference.IntArray);dimArray.setPreciseType();next=NewArray.create(NEWARRAY,dimArray,dimArrayType,new IntConstantOperand(dimensions));inst.insertBefore(next);for (int i=0; i < dimensions; i++) {LocationOperand loc=new LocationOperand(TypeReference.Int);inst.insertBefore(AStore.create(INT_ASTORE,Multianewarray.getClearDimension(inst,i),dimArray.copyD2U(),IRTools.IC(i),loc,IRTools.TG()));}RVMMethod target=Entrypoints.optNewArrayArrayMethod;Call.mutate3(inst,CALL,Multianewarray.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),IRTools.IC(callSite.getId()),dimArray.copyD2U(),IRTools.IC(typeRefId));}}break;case ATHROW_opcode:{RVMMethod target=Entrypoints.athrowMethod;MethodOperand methodOp=MethodOperand.STATIC(target);methodOp.setIsNonReturningCall(true);Call.mutate1(inst,CALL,null,IRTools.AC(target.getOffset()),methodOp,Athrow.getClearValue(inst));}break;case MONITORENTER_opcode:{Operand ref=MonitorOp.getClearRef(inst);RVMType refType=ref.getType().peekType();if (refType != null && !refType.getThinLockOffset().isMax()) {RVMMethod target=Entrypoints.inlineLockMethod;Call.mutate2(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref,IRTools.AC(refType.getThinLockOffset()));next=inst.prevInstructionInCodeOrder();if (inst.getBasicBlock().getInfrequent()) container.counter1++;container.counter2++;if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {inline(inst,ir);}} else {RVMMethod target=Entrypoints.lockMethod;Call.mutate1(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref);}}break;case MONITOREXIT_opcode:{Operand ref=MonitorOp.getClearRef(inst);RVMType refType=ref.getType().peekType();if (refType != null && !refType.getThinLockOffset().isMax()) {RVMMethod target=Entrypoints.inlineUnlockMethod;Call.mutate2(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref,IRTools.AC(refType.getThinLockOffset()));next=inst.prevInstructionInCodeOrder();if (inst.getBasicBlock().getInfrequent()) container.counter1++;container.counter2++;if (!ir.options.FREQ_FOCUS_EFFORT || !inst.getBasicBlock().getInfrequent()) {inline(inst,ir);}} else {RVMMethod target=Entrypoints.unlockMethod;Call.mutate1(inst,CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),MonitorOp.getClearGuard(inst),ref);}}break;case REF_ASTORE_opcode:{if (NEEDS_OBJECT_ASTORE_BARRIER) {RVMMethod target=Entrypoints.objectArrayWriteBarrierMethod;Instruction wb=Call.create3(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),AStore.getClearGuard(inst),AStore.getArray(inst).copy(),AStore.getIndex(inst).copy(),AStore.getValue(inst).copy());replaceInstructionWithBarrier(inst,wb);if (ir.options.H2L_INLINE_WRITE_BARRIER) {inline(wb,ir,true);}}}break;case BYTE_ASTORE_opcode:{if (NEEDS_BYTE_ASTORE_BARRIER) {primitiveArrayStoreHelper(Entrypoints.byteArrayWriteBarrierMethod,inst,ir);}}break;case DOUBLE_ASTORE_opcode:{if (NEEDS_DOUBLE_ASTORE_BARRIER) {primitiveArrayStoreHelper(Entrypoints.doubleArrayWriteBarrierMethod,inst,ir);}}break;case FLOAT_ASTORE_opcode:{if (NEEDS_FLOAT_ASTORE_BARRIER) {primitiveArrayStoreHelper(Entrypoints.floatArrayWriteBarrierMethod,inst,ir);}}break;case INT_ASTORE_opcode:{if (NEEDS_INT_ASTORE_BARRIER) {primitiveArrayStoreHelper(Entrypoints.intArrayWriteBarrierMethod,inst,ir);}}break;case LONG_ASTORE_opcode:{if (NEEDS_LONG_ASTORE_BARRIER) {primitiveArrayStoreHelper(Entrypoints.longArrayWriteBarrierMethod,inst,ir);}}break;case SHORT_ASTORE_opcode:{TypeReference type=AStore.getLocation(inst).getElementType();if (NEEDS_SHORT_ASTORE_BARRIER && type.isShortType()) {primitiveArrayStoreHelper(Entrypoints.shortArrayWriteBarrierMethod,inst,ir);} else if (NEEDS_CHAR_ASTORE_BARRIER) {if (VM.VerifyAssertions) VM._assert(type.isCharType());primitiveArrayStoreHelper(Entrypoints.charArrayWriteBarrierMethod,inst,ir);}}break;case REF_ALOAD_opcode:{if (NEEDS_OBJECT_ALOAD_BARRIER) {RVMMethod target=Entrypoints.objectArrayReadBarrierMethod;Instruction rb=Call.create2(CALL,ALoad.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),ALoad.getClearGuard(inst),ALoad.getArray(inst).copy(),ALoad.getIndex(inst).copy());replaceInstructionWithBarrier(inst,rb);inline(rb,ir,true);}}break;case PUTFIELD_opcode:{if (NEEDS_OBJECT_PUTFIELD_BARRIER) {LocationOperand loc=PutField.getLocation(inst);FieldReference fieldRef=loc.getFieldRef();if (!fieldRef.getFieldContentsType().isPrimitiveType()) {RVMField field=fieldRef.peekResolvedField();if (field == null || !field.isUntraced()) {RVMMethod target=Entrypoints.objectFieldWriteBarrierMethod;Instruction wb=Call.create4(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),PutField.getClearGuard(inst),PutField.getRef(inst).copy(),PutField.getValue(inst).copy(),PutField.getOffset(inst).copy(),IRTools.IC(fieldRef.getId()));replaceInstructionWithBarrier(inst,wb);if (ir.options.H2L_INLINE_WRITE_BARRIER) {inline(wb,ir,true);}}} else {if (NEEDS_BOOLEAN_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isBooleanType()) {primitiveObjectFieldStoreHelper(Entrypoints.booleanFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_BYTE_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isByteType()) {primitiveObjectFieldStoreHelper(Entrypoints.byteFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_CHAR_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isCharType()) {primitiveObjectFieldStoreHelper(Entrypoints.charFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_DOUBLE_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isDoubleType()) {primitiveObjectFieldStoreHelper(Entrypoints.doubleFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_FLOAT_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isFloatType()) {primitiveObjectFieldStoreHelper(Entrypoints.floatFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_INT_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isIntType()) {primitiveObjectFieldStoreHelper(Entrypoints.intFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_LONG_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isLongType()) {primitiveObjectFieldStoreHelper(Entrypoints.longFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_SHORT_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isShortType()) {primitiveObjectFieldStoreHelper(Entrypoints.shortFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_WORD_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isWordType()) {primitiveObjectFieldStoreHelper(Entrypoints.wordFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_ADDRESS_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isAddressType()) {primitiveObjectFieldStoreHelper(Entrypoints.addressFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_EXTENT_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isExtentType()) {primitiveObjectFieldStoreHelper(Entrypoints.extentFieldWriteBarrierMethod,inst,ir,fieldRef);} else if (NEEDS_OFFSET_PUTFIELD_BARRIER && fieldRef.getFieldContentsType().isOffsetType()) {primitiveObjectFieldStoreHelper(Entrypoints.offsetFieldWriteBarrierMethod,inst,ir,fieldRef);}}}}break;case GETFIELD_opcode:{if (NEEDS_OBJECT_GETFIELD_BARRIER) {LocationOperand loc=GetField.getLocation(inst);FieldReference fieldRef=loc.getFieldRef();if (GetField.getResult(inst).getType().isReferenceType()) {RVMField field=fieldRef.peekResolvedField();if (field == null || !field.isUntraced()) {RVMMethod target=Entrypoints.objectFieldReadBarrierMethod;Instruction rb=Call.create3(CALL,GetField.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),GetField.getClearGuard(inst),GetField.getRef(inst).copy(),GetField.getOffset(inst).copy(),IRTools.IC(fieldRef.getId()));replaceInstructionWithBarrier(inst,rb);inline(rb,ir,true);}}}}break;case PUTSTATIC_opcode:{if (NEEDS_OBJECT_PUTSTATIC_BARRIER) {LocationOperand loc=PutStatic.getLocation(inst);FieldReference field=loc.getFieldRef();if (!field.getFieldContentsType().isPrimitiveType()) {RVMMethod target=Entrypoints.objectStaticWriteBarrierMethod;Instruction wb=Call.create3(CALL,null,IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),PutStatic.getValue(inst).copy(),PutStatic.getOffset(inst).copy(),IRTools.IC(field.getId()));replaceInstructionWithBarrier(inst,wb);if (ir.options.H2L_INLINE_WRITE_BARRIER) {inline(wb,ir,true);}}}}break;case GETSTATIC_opcode:{if (NEEDS_OBJECT_GETSTATIC_BARRIER) {LocationOperand loc=GetStatic.getLocation(inst);FieldReference field=loc.getFieldRef();if (!field.getFieldContentsType().isPrimitiveType()) {RVMMethod target=Entrypoints.objectStaticReadBarrierMethod;Instruction rb=Call.create2(CALL,GetStatic.getClearResult(inst),IRTools.AC(target.getOffset()),MethodOperand.STATIC(target),GetStatic.getOffset(inst).copy(),IRTools.IC(field.getId()));replaceInstructionWithBarrier(inst,rb);inline(rb,ir,true);}}}break;default :break;}}if (didSomething) {if (branchOpts == null) {branchOpts=new BranchOptimizations(-1,true,true);}branchOpts.perform(ir,true);if (_os == null) {_os=new Simple(1,false,false,false,false);}_os.perform(ir);}ir.getGc().close();}  }
class C{  private boolean isRemoveAllInitiators(ExportMask exportMask,List<Initiator> initiators){  StringSet initiatorsInMask=exportMask.getInitiators();  StringSet initiatorsToRemove=StringSetUtil.objCollectionToStringSet(initiators);  return initiatorsInMask == null || (initiatorsInMask.containsAll(initiatorsToRemove) && (initiatorsInMask.size() == initiatorsToRemove.size()));}  }
class C{  public BasicInventoryPacketState(int stateId,int stateMask){  this.stateId=stateId & stateMask;  this.stateMask=stateMask;}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  public static boolean isSimilarName(String name1,String name2){  return getSimilarity(name1,name2) >= 0;}  }
class C{  protected void sequence_AnnotatedPropertyAssignment_MethodParamsAndBody_StrictFormalParameters_TypeVariables(ISerializationContext context,PropertyMethodDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Left(){  super();}  }
class C{  public void postCreateObject(AbstractSession session,Writer createSchemaWriter,boolean createSQLFiles){  setCreateSQLFiles(createSQLFiles);  createIndexes(session,createSchemaWriter);}  }
class C{  void notifyLeaving(Integer id){  firePropertyChange("Leaving",null,id);}  }
class C{  public void arrayLoad(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IALOAD));}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  @Override public void cancel(SendPacket packet){synchronized (mQueue) {    mQueue.remove(packet);  }}  }
class C{  private static void print(PrintWriter out,String args[]){  Map sp=new TreeMap((Properties)System.getProperties().clone());  int processId=-1;  final String SEPERATOR="---------------------------------------------------------------------------";  try {    processId=OSProcess.getId();  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable t) {    SystemFailure.checkFailure();  }  out.println();  final String productName=GemFireVersion.getProductName();  out.println(SEPERATOR);  out.println("  ");  out.println("  Licensed to the Apache Software Foundation (ASF) under one or more");  out.println("  contributor license agreements.  See the NOTICE file distributed with this");  out.println("  work for additional information regarding copyright ownership.");  out.println("   ");  out.println("  The ASF licenses this file to You under the Apache License, Version 2.0");  out.println("  (the \"License\"); you may not use this file except in compliance with the");  out.println("  License.  You may obtain a copy of the License at");  out.println("  ");  out.println("  http://www.apache.org/licenses/LICENSE-2.0");  out.println("  ");  out.println("  Unless required by applicable law or agreed to in writing, software");  out.println("  distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT");  out.println("  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the");  out.println("  License for the specific language governing permissions and limitations");  out.println("  under the License.");  out.println("  ");  out.println(SEPERATOR);  GemFireVersion.print(out);  out.println("Process ID: " + processId);  out.println("User: " + sp.get("user.name"));  sp.remove("user.name");  sp.remove("os.name");  sp.remove("os.arch");  out.println("Current dir: " + sp.get("user.dir"));  sp.remove("user.dir");  out.println("Home dir: " + sp.get("user.home"));  sp.remove("user.home");  List<String> allArgs=new ArrayList<String>();{    RuntimeMXBean runtimeBean=ManagementFactory.getRuntimeMXBean();    if (runtimeBean != null) {      allArgs.addAll(runtimeBean.getInputArguments());    }  }  if (args != null && args.length != 0) {    for (int i=0; i < args.length; i++) {      allArgs.add(args[i]);    }  }  if (!allArgs.isEmpty()) {    out.println("Command Line Parameters:");    for (    String arg : allArgs) {      out.println("  " + arg);    }  }  out.println("Class Path:");  prettyPrintPath((String)sp.get("java.class.path"),out);  sp.remove("java.class.path");  out.println("Library Path:");  prettyPrintPath((String)sp.get("java.library.path"),out);  sp.remove("java.library.path");  if (Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "disableSystemPropertyLogging")) {    out.println("System property logging disabled.");  } else {    out.println("System Properties:");    Iterator it=sp.entrySet().iterator();    while (it.hasNext()) {      Map.Entry me=(Map.Entry)it.next();      String key=me.getKey().toString();      if (!key.startsWith(DistributionConfig.GEMFIRE_PREFIX + DistributionConfig.SECURITY_PREFIX_NAME) && !key.startsWith(DistributionConfigImpl.SECURITY_SYSTEM_PREFIX + DistributionConfig.SECURITY_PREFIX_NAME) && !key.toLowerCase().contains("password")) {        out.println("    " + key + " = "+ me.getValue());      } else {        out.println("    " + key + " = "+ "********");      }    }    out.println("Log4J 2 Configuration:");    out.println("    " + LogService.getConfigInformation());  }  out.println(SEPERATOR);}  }
class C{  public int hashCode(){  int hash=className.hashCode();  for (Enumeration<RefAddr> e=getAll(); e.hasMoreElements(); )   hash+=e.nextElement().hashCode();  return hash;}  }
class C{  private void refresh(){  if (getView() != null) {    getView().findViewById(android.R.id.progress).setVisibility(View.VISIBLE);    final TextView jsonView=(TextView)getView().findViewById(R.id.json);    jsonView.setVisibility(View.INVISIBLE);    jsonView.setText("");    mCurrentPagesCount.set(0);  }  final String deltaToken=getDeltaInfo().getString(mItemId,null);  final Activity activity=getActivity();  ((BaseApplication)activity.getApplication()).getOneDriveClient().getDrive().getItems(mItemId).getDelta(deltaToken).buildRequest().select("id,name,deleted").get(pageHandler());}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.subLabelPaint=SerialUtilities.readPaint(stream);}  }
class C{  public void testGetInstanceStringString03() throws IllegalArgumentException, NoSuchAlgorithmException, NoSuchProviderException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  KeyAgreement keyA;  for (int i=0; i < validValues.length; i++) {    keyA=KeyAgreement.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",keyA.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",keyA.getProvider().getName(),defaultProviderName);  }}  }
class C{  public static float[] toFloatArray(Float[] array){  float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i];  }  return result;}  }
class C{  public boolean isTermPosition(){  PerlTokenHistory tokenHistory=getTokenHistory();  IElementType lastUnbracedTokenType=tokenHistory.getLastUnbracedTokenType();  IElementType lastSignificantTokenType=tokenHistory.getLastSignificantTokenType();  boolean isTermPrefix=BARE_REGEX_PREFIX_TOKENSET.contains(lastSignificantTokenType);  if (lastSignificantTokenType == OPERATOR_CONCAT) {    PerlTokenHistory.PerlTokenHistoryElement prevElement=tokenHistory.getPreviousToken(tokenHistory.getLastSignificantToken());    if (prevElement != null && prevElement.getTokenType() == SIGIL_SCALAR) {      isTermPrefix=false;    }  }  return !SIGILS_TOKENS.contains(lastUnbracedTokenType) && (lastSignificantTokenType == null || RESERVED_TOKENSET.contains(lastSignificantTokenType) || isTermPrefix || getTokenHistory().getLastUnparenTokenType() == IDENTIFIER && REGEXP_PREFIX_SUBS.contains(getTokenHistory().getLastUnparenTokenTextAsString()));}  }
class C{  public static Map<String,Object> deletePaymentMethod(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String paymentMethodId=(String)context.get("paymentMethodId");  GenericValue paymentMethod=null;  try {    paymentMethod=EntityQuery.use(delegator).from("PaymentMethod").where("paymentMethodId",paymentMethodId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentMethodCannotBeDeleted",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  if (paymentMethod == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentMethodCannotBeDeleted",UtilMisc.toMap("errorString",""),locale));  }  if (paymentMethod.get("partyId") == null || !paymentMethod.getString("partyId").equals(userLogin.getString("partyId"))) {    if (!security.hasEntityPermission("PAY_INFO","_DELETE",userLogin) && !security.hasEntityPermission("ACCOUNTING","_DELETE",userLogin)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentMethodNoPermissionToDelete",locale));    }  }  paymentMethod.set("thruDate",now);  try {    paymentMethod.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"AccountingPaymentMethodCannotBeDeletedWriteFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private AccessorMaker isAccessibleField(CtField f,FieldInfo finfo) throws CompileError {  if (AccessFlag.isPrivate(finfo.getAccessFlags()) && f.getDeclaringClass() != thisClass) {    CtClass declClass=f.getDeclaringClass();    if (isEnclosing(declClass,thisClass)) {      AccessorMaker maker=declClass.getAccessorMaker();      if (maker != null)       return maker; else       throw new CompileError("fatal error.  bug?");    } else     throw new CompileError("Field " + f.getName() + " in "+ declClass.getName()+ " is private.");  }  return null;}  }
class C{  public static final int[] make_sequence(int L){  int ind[]=new int[L];  for (int i=0; i < L; i++) {    ind[i]=i;  }  return ind;}  }
class C{  public GridNodeLocalSelfTest(){  super(true);}  }
class C{  public static boolean allInstancesOf(Class<?> clazz,Object[] objs){  for (  Object obj : objs) {    if (!clazz.isInstance(obj))     return false;  }  return true;}  }
class C{  public void registerAndLogin(final String username,final String email,final String password,final ResultListener listener){  registerAndLogin(username,email,password,null,listener);}  }
class C{  public State(PlotRenderingInfo info){  super(info);}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized Collection<X509Certificate> engineGetCertificates(CertSelector selector) throws CertStoreException {  if (ldap) {    X509CertSelector xsel=(X509CertSelector)selector;    try {      xsel=ldapHelper.wrap(xsel,xsel.getSubject(),ldapPath);    } catch (    IOException ioe) {      throw new CertStoreException(ioe);    }    return (Collection<X509Certificate>)ldapCertStore.getCertificates(xsel);  }  long time=System.currentTimeMillis();  if (time - lastChecked < CHECK_INTERVAL) {    if (debug != null) {      debug.println("Returning certificates from cache");    }    return getMatchingCerts(certs,selector);  }  lastChecked=time;  try {    URLConnection connection=uri.toURL().openConnection();    if (lastModified != 0) {      connection.setIfModifiedSince(lastModified);    }    long oldLastModified=lastModified;    try (InputStream in=connection.getInputStream()){      lastModified=connection.getLastModified();      if (oldLastModified != 0) {        if (oldLastModified == lastModified) {          if (debug != null) {            debug.println("Not modified, using cached copy");          }          return getMatchingCerts(certs,selector);        } else         if (connection instanceof HttpURLConnection) {          HttpURLConnection hconn=(HttpURLConnection)connection;          if (hconn.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {            if (debug != null) {              debug.println("Not modified, using cached copy");            }            return getMatchingCerts(certs,selector);          }        }      }      if (debug != null) {        debug.println("Downloading new certificates...");      }      certs=(Collection<X509Certificate>)factory.generateCertificates(in);    }     return getMatchingCerts(certs,selector);  } catch (  IOException|CertificateException e) {    if (debug != null) {      debug.println("Exception fetching certificates:");      e.printStackTrace();    }  }  lastModified=0;  certs=Collections.emptySet();  return certs;}  }
class C{  @Override public void run(){  boolean ran=false;  while (run.get()) {    try {synchronized (lock) {        while (runnable == null && run.get()) {          lock.wait(500);        }        if (runnable != null) {          ran=true;          runnable.run();        }      }    } catch (    InterruptedException unblock) {      try {        getLog().error("Worker thread was interrupt()'ed.",unblock);      } catch (      Exception e) {      }    }catch (    Throwable exceptionInRunnable) {      try {        getLog().error("Error while executing the Runnable: ",exceptionInRunnable);      } catch (      Exception e) {      }    } finally {synchronized (lock) {        runnable=null;      }      if (getPriority() != tp.getThreadPriority()) {        setPriority(tp.getThreadPriority());      }      if (runOnce) {        run.set(false);        clearFromBusyWorkersList(this);      } else       if (ran) {        ran=false;        makeAvailable(this);      }    }  }  try {    getLog().debug("WorkerThread is shut down.");  } catch (  Exception e) {  }}  }
class C{  public static boolean looksLikeAFontSize(String val){  return FONT_SIZES.get(val) != null || looksLikeALength(val) || "larger".equals(val) || "smaller".equals(val);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_EXPR_1__INDEX_1:    return getIndex_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void testIsCaseSensitive() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testIsCaseSensitive");    this.stmt.executeUpdate("CREATE TABLE testIsCaseSensitive (bin_char CHAR(1) BINARY, bin_varchar VARCHAR(64) BINARY, ci_char CHAR(1), ci_varchar VARCHAR(64))");    this.rs=this.stmt.executeQuery("SELECT bin_char, bin_varchar, ci_char, ci_varchar FROM testIsCaseSensitive");    ResultSetMetaData rsmd=this.rs.getMetaData();    assertTrue(rsmd.isCaseSensitive(1));    assertTrue(rsmd.isCaseSensitive(2));    assertTrue(!rsmd.isCaseSensitive(3));    assertTrue(!rsmd.isCaseSensitive(4));  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testIsCaseSensitive");  }  if (versionMeetsMinimum(4,1)) {    try {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testIsCaseSensitiveCs");      this.stmt.executeUpdate("CREATE TABLE testIsCaseSensitiveCs (bin_char CHAR(1) CHARACTER SET latin1 COLLATE latin1_general_cs," + "bin_varchar VARCHAR(64) CHARACTER SET latin1 COLLATE latin1_general_cs," + "ci_char CHAR(1) CHARACTER SET latin1 COLLATE latin1_general_ci,"+ "ci_varchar VARCHAR(64) CHARACTER SET latin1 COLLATE latin1_general_ci, "+ "bin_tinytext TINYTEXT CHARACTER SET latin1 COLLATE latin1_general_cs,"+ "bin_text TEXT CHARACTER SET latin1 COLLATE latin1_general_cs,"+ "bin_med_text MEDIUMTEXT CHARACTER SET latin1 COLLATE latin1_general_cs,"+ "bin_long_text LONGTEXT CHARACTER SET latin1 COLLATE latin1_general_cs,"+ "ci_tinytext TINYTEXT CHARACTER SET latin1 COLLATE latin1_general_ci,"+ "ci_text TEXT CHARACTER SET latin1 COLLATE latin1_general_ci,"+ "ci_med_text MEDIUMTEXT CHARACTER SET latin1 COLLATE latin1_general_ci,"+ "ci_long_text LONGTEXT CHARACTER SET latin1 COLLATE latin1_general_ci)");      this.rs=this.stmt.executeQuery("SELECT bin_char, bin_varchar, ci_char, ci_varchar, bin_tinytext, bin_text, bin_med_text, bin_long_text, " + "ci_tinytext, ci_text, ci_med_text, ci_long_text FROM testIsCaseSensitiveCs");      ResultSetMetaData rsmd=this.rs.getMetaData();      assertTrue(rsmd.isCaseSensitive(1));      assertTrue(rsmd.isCaseSensitive(2));      assertTrue(!rsmd.isCaseSensitive(3));      assertTrue(!rsmd.isCaseSensitive(4));      assertTrue(rsmd.isCaseSensitive(5));      assertTrue(rsmd.isCaseSensitive(6));      assertTrue(rsmd.isCaseSensitive(7));      assertTrue(rsmd.isCaseSensitive(8));      assertTrue(!rsmd.isCaseSensitive(9));      assertTrue(!rsmd.isCaseSensitive(10));      assertTrue(!rsmd.isCaseSensitive(11));      assertTrue(!rsmd.isCaseSensitive(12));    }  finally {      this.stmt.executeUpdate("DROP TABLE IF EXISTS testIsCaseSensitiveCs");    }  }}  }
class C{  public void embedScale(){  base.mutableMultiply(scale);  scale=1;}  }
class C{  public final CC grow(float... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  growY(widthHeight[1]);case 1:growX(widthHeight[0]);}return this;}  }
class C{  public static void sleep(Object self,long milliseconds){  sleepImpl(milliseconds,null);}  }
class C{  @SuppressWarnings("unchecked") private static <T extends Throwable>void sneakyThrow2(Throwable t) throws T {  throw (T)t;}  }
class C{  public boolean isVisible(){  return false;}  }
class C{  public ParameterFile(File file) throws IOException {  this(new FileReader(file));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public static Class createClass(String classname) throws ParseException {  try {    return Class.forName(classname);  } catch (  ClassNotFoundException e) {    throw new ParseException("Unable to find the class: " + classname);  }}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof NTUserPrincipal))   return false;  NTUserPrincipal that=(NTUserPrincipal)o;  if (name.equals(that.getName()))   return true;  return false;}  }
class C{  public void trimToSize(){  elements=cern.colt.Arrays.trimToCapacity(elements,size());}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public Builder ttl(long ttlSec){  this.ttl=ttlSec;  return this;}  }
class C{  public ColumnSizeChange(Table table,Column column,int newSize,int newScale){  super(table);  _column=column;  _newSize=newSize;  _newScale=newScale;}  }
class C{  public double queryUtil(BNetwork network){  Query query=new Query.UtilQuery(network,network.getChanceNodeIds(),new Assignment());  LikelihoodWeighting isquery=new LikelihoodWeighting(query,nbSamples,maxSamplingTime);  List<Sample> samples=isquery.getSamples();  double total=samples.stream().parallel().mapToDouble(null).sum();  return total / samples.size();}  }
class C{  protected void startup(final int transactionManagerCalls) throws Exception {  mockConfiguration(2);  mockStore();  final HGTransactionManager transactionManager=new HGTransactionManager(storage.getTransactionFactory());  EasyMock.expect(store.getTransactionManager()).andReturn(transactionManager).times(transactionManagerCalls);  replay();  storage.startup(store,configuration);}  }
class C{  private URI processLocalFiles(URI uri){  String uriStr=uri.toString();  if (uriStr.startsWith("file:")) {    uriStr="file:" + System.getProperty("user.dir") + "/"+ uriStr.substring(5);    URL url;    try {      url=new URL(uriStr);      return url.toURI();    } catch (    Exception e) {      e.printStackTrace();    }  }  return uri;}  }
class C{  void locked(Object key){  locked.add(key);}  }
class C{  public AttachmentFaultySoap(){  requestFileName="attachm-faulty-soap.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  private void readExcludedAreaData() throws FileNotFoundException {  System.out.println("Reading excluded area data ...");  GeomGridField excludedGridField=new GeomGridField();  readData(excludedGridField,EXCLUDED_DATA_FILE_NAME);  for (int y=0; y < landscape.getHeight(); y++) {    for (int x=0; x < landscape.getWidth(); x++) {      if (landscape.get(x,y) != null) {        Tile tile=(Tile)landscape.get(x,y);        tile.excluded=((IntGrid2D)excludedGridField.getGrid()).get(x,y) == 0;      }    }  }}  }
class C{  public TaskList detachApplicationFullCopy(URI id,VolumeGroupFullCopyDetachParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_DETACH_FULL_COPY_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  boolean isFirstChild(){  if ((HTMLComponent.PROCESS_HTML_MP1_ONLY) || (isTextElement())) {    return false;  }  HTMLElement parent=(HTMLElement)getParent();  if (parent != null) {    Vector v=parent.getChildren();    for (    Element e : parent) {      HTMLElement elem=(HTMLElement)e;      if (elem == this) {        return true;      }      if (!elem.isTextElement()) {        return false;      }    }  }  return false;}  }
class C{  public static double toDoubleValue(char c){  return c;}  }
class C{  static boolean supportsSymLinks(File dir){  Path link=dir.toPath().resolve("link");  Path target=dir.toPath().resolve("target");  try {    Files.createSymbolicLink(link,target);    Files.delete(link);    return true;  } catch (  UnsupportedOperationException x) {    return false;  }catch (  IOException x) {    return false;  }}  }
class C{  public ClasspathEntry combineWith(ClasspathEntry referringEntry){  if (referringEntry == null)   return this;  if (referringEntry.isExported() || referringEntry.getAccessRuleSet() != null) {    boolean combine=this.entryKind == CPE_SOURCE || referringEntry.combineAccessRules();    return new ClasspathEntry(getContentKind(),getEntryKind(),getPath(),this.inclusionPatterns,this.exclusionPatterns,getSourceAttachmentPath(),getSourceAttachmentRootPath(),getOutputLocation(),referringEntry.isExported() || this.isExported,combine(referringEntry.getAccessRules(),getAccessRules(),combine),this.combineAccessRules,this.extraAttributes);  }  return this;}  }
class C{  public static <T extends GenericEntity>List<T> orderBy(Collection<T> values,List<String> orderBy){  if (values == null)   return null;  if (values.size() == 0)   return new LinkedList<T>();  if (UtilValidate.isEmpty(orderBy)) {    List<T> newList=new LinkedList<T>();    newList.addAll(values);    return newList;  }  List<T> result=new LinkedList<T>();  result.addAll(values);  if (Debug.verboseOn())   Debug.logVerbose("Sorting " + values.size() + " values, orderBy="+ orderBy.toString(),module);  Collections.sort(result,new OrderByList(orderBy));  return result;}  }
class C{  protected synchronized boolean _remove(OMGeometry geometry){  boolean ret=super.remove(geometry);  if (ret != false) {    String id=((LinkProperties)geometry.getAttribute(OMGraphic.APP_OBJECT)).getProperty(LPC_GRAPHICID);    hash.remove(id.intern());    if (Debug.debugging("link")) {      Debug.output("LinkOMGraphicList: Removing graphic " + id);    }  }  return ret;}  }
class C{  public SymbolTableEntryInternal steFor_require(){  return getSymbolTableEntryInternal("require",true);}  }
class C{  public void writeBlockLight(ByteBuf output){  output.writeBytes(blockLight.getHandle());}  }
class C{  public static boolean isDiamond(JCTree tree){switch (tree.getTag()) {case TYPEAPPLY:    return ((JCTypeApply)tree).getTypeArguments().isEmpty();case NEWCLASS:  return isDiamond(((JCNewClass)tree).clazz);case ANNOTATED_TYPE:return isDiamond(((JCAnnotatedType)tree).underlyingType);default :return false;}}  }
class C{  public CDisableAllAction(final BackEndDebuggerProvider debuggerProvider){  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01346: Debugger provider argument can not be null");  putValue(Action.SHORT_DESCRIPTION,"Disable all breakpoints");}  }
class C{  private void layoutItemsUsingGravity(int numRows,int numItems){  int numBaseItemsPerRow=numItems / numRows;  int numLeftoverItems=numItems % numRows;  int rowsThatGetALeftoverItem=numRows - numLeftoverItems;  int[] layout=mLayout;  for (int i=0; i < numRows; i++) {    layout[i]=numBaseItemsPerRow;    if (i >= rowsThatGetALeftoverItem) {      layout[i]++;    }  }  mLayoutNumRows=numRows;}  }
class C{  public boolean hasStarted(){  return length == 0 && startTime > 0;}  }
class C{  public static Encryptor create(final byte[] key){  final byte[] iv=new byte[KEY_LENGTH];  Arrays.fill(iv,(byte)0x00);  return create(key,iv);}  }
class C{  public Categories addCategories(String... categories){  Categories prop=new Categories(categories);  addCategories(prop);  return prop;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(-5,3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  private String addStepsForCreateConsistencyGroup(Workflow workflow,String waitFor,StorageSystem vplexSystem,List<URI> vplexVolumeURIs,boolean willBeRemovedByEarlierStep,URI cgURI) throws ControllerException {  if (vplexVolumeURIs.isEmpty()) {    log.info(String.format("No volumes specified to add to the consistency group %s",cgURI.toString()));    return waitFor;  }  URI vplexURI=vplexSystem.getId();  String nextStep=waitFor;  BlockConsistencyGroup cg=null;  cg=getDataObject(BlockConsistencyGroup.class,cgURI,dbClient);  List<Volume> cgVPLEXVolumes=getActiveVPLEXVolumesForCG(cgURI);  List<URI> volumeList=new ArrayList<URI>();  volumeList.addAll(vplexVolumeURIs);  if ((!cg.created(vplexURI)) || (willBeRemovedByEarlierStep)) {    log.info("Consistency group not created.");    nextStep=workflow.createStep(CREATE_CG_STEP,String.format("VPLEX %s creating consistency group %s",vplexURI,cgURI),nextStep,vplexURI,vplexSystem.getSystemType(),this.getClass(),createCGMethod(vplexURI,cgURI,volumeList),rollbackMethodNullMethod(),null);    log.info("Created step for consistency group creation.");  } else {    if (cgVPLEXVolumes.size() == vplexVolumeURIs.size()) {      nextStep=workflow.createStep(SET_CG_PROPERTIES_STEP,String.format("Setting consistency group %s properties",cgURI),nextStep,vplexURI,vplexSystem.getSystemType(),this.getClass(),createSetCGPropertiesMethod(vplexURI,cgURI,volumeList),rollbackMethodNullMethod(),null);      log.info("Created step for setting consistency group properties.");    }  }  nextStep=workflow.createStep(ADD_VOLUMES_TO_CG_STEP,String.format("VPLEX %s adding volumes to consistency group %s",vplexURI,cgURI),nextStep,vplexURI,vplexSystem.getSystemType(),this.getClass(),createAddVolumesToCGMethod(vplexURI,cgURI,volumeList),createRemoveVolumesFromCGMethod(vplexURI,cgURI,volumeList),null);  log.info(String.format("Created step for adding volumes to the consistency group %s",cgURI.toString()));  return nextStep;}  }
class C{  public void testAddCertificate4() throws Exception {  try {    new IdentityStub("aaa").addCertificate(null);    fail("KeyManagementException should be thrown");  } catch (  KeyManagementException ok) {  }catch (  NullPointerException ok) {  }}  }
class C{  synchronized boolean deliverError(OFErrorMsg error){  if (!requestPending)   return false;  if (pendingXid == error.getXid()) {    if (error.getErrType() == OFErrorType.BAD_REQUEST) {      switchManagerCounters.roleReplyErrorUnsupported.increment();      setSwitchRole(pendingRole,RoleRecvStatus.UNSUPPORTED);    } else {      String msg=String.format("Switch: [%s], State: [%s], " + "Unexpected error %s in respone to our " + "role request for %s.",OFSwitchHandshakeHandler.this.getSwitchInfoString(),OFSwitchHandshakeHandler.this.state.toString(),error.toString(),pendingRole);      throw new SwitchStateException(msg);    }    return true;  }  return false;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  FeedAccountDao.createTable(db,ifNotExists);  FeedSourceDao.createTable(db,ifNotExists);  FeedItemDao.createTable(db,ifNotExists);}  }
class C{  public void initializeNodes(){  String str="";  for (int i=0; i < 128; i++) {    configNodeAddresses[i]=-1;    configNodes[i]=null;  }  SerialNode node=(SerialNode)SerialTrafficController.instance().getNode(0);  int index=1;  while (node != null) {    configNodes[numConfigNodes]=node;    configNodeAddresses[numConfigNodes]=node.getNodeAddress();    str=Integer.toString(configNodeAddresses[numConfigNodes]);    nodeSelBox.addItem(str);    if (index == 1) {      selNode=node;      selNodeNum=configNodeAddresses[numConfigNodes];      selNodeID="y";    }    numConfigNodes++;    node=(SerialNode)SerialTrafficController.instance().getNode(index);    index++;  }}  }
class C{  public static String serialize(String xmlString){  StringWriter sw=new StringWriter();  serialize(asStreamSource(xmlString),sw);  return sw.toString();}  }
class C{  @Override public boolean hasMoreElements(){  return (!empty() || (theNextElement != null && info.get(theNextElement.getIndex()) == null));}  }
class C{  private Object lookup(String key,Class type) throws SAXException {  Object value;  if (_handler != null) {    if (_handler.hasVariable(key)) {      return checkCast(_handler.getVariable(key),type);    }  }  value=_mapping.get(key);  if (value == null) {    throw new SAXException("ID " + key + " has not been defined");  }  return checkCast(value,type);}  }
class C{  private static void logInfo(String message){  if (LOG_INFO) {    System.out.println(message);  }}  }
class C{  public UnrecoverableEntryException(String msg){  super(msg);}  }
class C{  public static void loadProfile(File profileDirectory) throws LangDetectException {  File[] listFiles=profileDirectory.listFiles();  if (listFiles == null)   throw new LangDetectException(ErrorCode.NeedLoadProfileError,"Not found profile: " + profileDirectory);  int langsize=listFiles.length, index=0;  for (  File file : listFiles) {    if (file.getName().startsWith(".") || !file.isFile())     continue;    FileInputStream is=null;    try {      is=new FileInputStream(file);      LangProfile profile=JSON.decode(is,LangProfile.class);      addProfile(profile,index,langsize);      ++index;    } catch (    JSONException e) {      throw new LangDetectException(ErrorCode.FormatError,"profile format error in '" + file.getName() + "'");    }catch (    IOException e) {      throw new LangDetectException(ErrorCode.FileLoadError,"can't open '" + file.getName() + "'");    } finally {      try {        if (is != null)         is.close();      } catch (      IOException e) {      }    }  }}  }
class C{  private int endCheck(){switch (type) {case Token.BREAK:    return endCheckBreak();case Token.EXPR_VOID:  if (this.first != null)   return first.endCheck();return END_DROPS_OFF;case Token.YIELD:return END_YIELDS;case Token.CONTINUE:case Token.THROW:return END_UNREACHED;case Token.RETURN:if (this.first != null) return END_RETURNS_VALUE; else return END_RETURNS;case Token.TARGET:if (next != null) return next.endCheck(); else return END_DROPS_OFF;case Token.LOOP:return endCheckLoop();case Token.LOCAL_BLOCK:case Token.BLOCK:if (first == null) return END_DROPS_OFF;switch (first.type) {case Token.LABEL:return first.endCheckLabel();case Token.IFNE:return first.endCheckIf();case Token.SWITCH:return first.endCheckSwitch();case Token.TRY:return first.endCheckTry();default :return endCheckBlock();}default :return END_DROPS_OFF;}}  }
class C{  public static boolean isEmptyString(String text){  return (text == null || text.trim().length() == 0);}  }
class C{  @SuppressWarnings("unchecked") public static <C extends Comparable>ImmutableRangeSet<C> of(){  return (ImmutableRangeSet<C>)EMPTY;}  }
class C{  public String decode(ByteBuffer buffer){  byte b=buffer.get();  if ((b & 0x80) == 0) {    return readAscii(buffer);  } else {    int charCount=readLength(b,buffer);switch (charCount) {case 0:      return null;case 1:    return "";}charCount--;char[] chars=new char[charCount];readAsciiFirst(charCount,chars,buffer);return new String(chars,0,charCount);}}  }
class C{  private void configMediaPlayerState(){  LogHelper.d(TAG,"configMediaPlayerState. mAudioFocus=",mAudioFocus);  if (mAudioFocus == AUDIO_NO_FOCUS_NO_DUCK) {    if (mState == PlaybackStateCompat.STATE_PLAYING) {      pause();    }  } else {    if (mAudioFocus == AUDIO_NO_FOCUS_CAN_DUCK) {      mMediaPlayer.setVolume(VOLUME_DUCK,VOLUME_DUCK);    } else {      if (mMediaPlayer != null) {        mMediaPlayer.setVolume(VOLUME_NORMAL,VOLUME_NORMAL);      }    }    if (mPlayOnFocusGain) {      if (mMediaPlayer != null && !mMediaPlayer.isPlaying()) {        LogHelper.d(TAG,"configMediaPlayerState startMediaPlayer. seeking to ",mCurrentPosition);        if (mCurrentPosition == mMediaPlayer.getCurrentPosition()) {          mMediaPlayer.start();          mState=PlaybackStateCompat.STATE_PLAYING;        } else {          mMediaPlayer.seekTo(mCurrentPosition);          mState=PlaybackStateCompat.STATE_BUFFERING;        }      }      mPlayOnFocusGain=false;    }  }  if (mCallback != null) {    mCallback.onPlaybackStatusChanged(mState);  }}  }
class C{  @Override public boolean isModified(){  return isModified(isAsync());}  }
class C{  public Drawer build(){  if (mUsed) {    throw new RuntimeException("you must not reuse a DrawerBuilder builder");  }  if (mActivity == null) {    throw new RuntimeException("please pass an activity");  }  mUsed=true;  if (mDrawerLayout == null) {    withDrawerLayout(-1);  }  mMaterialize=new MaterializeBuilder().withActivity(mActivity).withRootView(mRootView).withFullscreen(mFullscreen).withSystemUIHidden(mSystemUIHidden).withTranslucentStatusBar(mTranslucentStatusBar).withTranslucentStatusBarProgrammatically(mTranslucentStatusBarProgrammatically).withTranslucentNavigationBar(mTranslucentNavigationBar).withTranslucentNavigationBarProgrammatically(mTranslucentNavigationBarProgrammatically).withContainer(mDrawerLayout).withStatusBarColor(mStatusBarColor).withStatusBarColorRes(mStatusBarColorRes).build();  handleDrawerNavigation(mActivity,false);  Drawer result=buildView();  mSliderLayout.setId(R.id.material_drawer_slider_layout);  mDrawerLayout.addView(mSliderLayout,1);  return result;}  }
class C{  private static int determineConsecutiveTextCount(CharSequence msg,int startpos){  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch) && idx < len) {      numericCount++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }    if (numericCount >= 13) {      return idx - startpos - numericCount;    }    if (numericCount > 0) {      continue;    }    ch=msg.charAt(idx);    if (!isText(ch)) {      break;    }    idx++;  }  return idx - startpos;}  }
class C{  public static boolean isMac(){  if (System.getProperty(SEA_GLASS_OVERRIDE_OS_NAME) != null) {    return System.getProperty(SEA_GLASS_OVERRIDE_OS_NAME).startsWith("Mac OS");  }  return System.getProperty("os.name").startsWith("Mac OS");}  }
class C{  public void addChannel(Channel channel){  channels.put(channel.getId(),channel);}  }
class C{  public T addHighlightedField(String name,int fragmentSize){  highlightBuilder().field(name,fragmentSize);  return (T)this;}  }
class C{  public boolean containsAnalog(){  return (this.channelIndicator1 & ADC_CHANNEL1) > 0;}  }
class C{  public void createPictScenario09() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-03-01 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  String supplierAdminId="Pict09Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict09SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  VOMarketplace supplMarketplace=orgSetup.createMarketplace("Pict09Supplier_MP",false,supplier);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="PIC09Customer";  VOOrganization customer=orgSetup.registerCustomer("PIC09CustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT09_PERUNIT_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT09_UNIT_HOUR,example2TechService,supplierMarketplace);  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT09_FREE",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplierMarketplace);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,freeTemplate);  freeTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeTemplate,unitServTemplate);  VOServiceDetails serviceDetails=serviceSetup.activateMarketableService(unitServTemplate);  VOServiceDetails serviceFreeDetails=serviceSetup.activateMarketableService(freeTemplate);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_09",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-10 14:00:00"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails.setSubscriptionId("PICT_TEST_09" + "_SubID2");  subDetails=subscrSetup.modifySubscription(subDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:10:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:20:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:30:00"));  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-22 14:40:00"));  role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-22 14:41:00"),"FILE_DOWNLOAD",100);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-03-22 14:42:00"),"FILE_UPLOAD",100);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 11:59:59"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 15:00:00"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,serviceDetails);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-31 15:05:00"),"FILE_DOWNLOAD",100);  subscrSetup.recordEventForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-03-31 15:06:00"),"FILE_UPLOAD",100);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-03-31 16:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  serviceSetup.deleteMarketableService(serviceDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-04-10 10:00:00"));  subscrSetup.unsubscribeToService(upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_09",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_09",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_09",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_09",customer);}  }
class C{  public SubstituteVariableResource(String variableName,String replacementValue,TextResource baseResource){  this.variableName=variableName;  this.replacementValue=replacementValue;  this.baseResource=baseResource;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_11:    getAnonymous_linkingOp_1_1().clear();  getAnonymous_linkingOp_1_1().addAll((Collection<? extends Anonymous_linkingOp_1_>)newValue);return;case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_21:getAnonymous_linkingOp_2_1().clear();getAnonymous_linkingOp_2_1().addAll((Collection<? extends Anonymous_linkingOp_2_>)newValue);return;case UmplePackage.LINKING_OP___ANONYMOUS_LINKING_OP_31:getAnonymous_linkingOp_3_1().clear();getAnonymous_linkingOp_3_1().addAll((Collection<? extends Anonymous_linkingOp_3_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void writeToFileWithoutExtension(Path file,Charset charset,OpenOption... options){  markupDocBuilder.writeToFileWithoutExtension(file,charset,options);}  }
class C{  public T caseParameterizedTypeRefStructural(ParameterizedTypeRefStructural object){  return null;}  }
class C{  public void e(String log,Throwable tr){  if (debug) {    String line=getFunctionName();    Log.e(tag,"{Thread:" + Thread.currentThread().getName() + "}"+ "["+ name+ line+ ":] "+ log+ "\n",tr);  }}  }
class C{  public static boolean isPowerOf2(int v){  return (v > 0) && ((v & (v - 1)) == 0);}  }
class C{  public void startFtpUpload(final String hostname,final int port,final String uri,final int fileSizeOctet,final String user,final String password){  mTask.startFtpUpload(hostname,port,uri,fileSizeOctet,user,password);}  }
class C{  @Override public final TokenStreamComponents createComponents(String fieldName){  Tokenizer tokenizer=new MockTokenizer(MockTokenizer.SIMPLE,true);  return new TokenStreamComponents(tokenizer,new QPTestFilter(tokenizer));}  }
class C{  public void dismiss(MessageKey key){  mMessagesList.remove(key);  adapter.notifyDataSetChanged();}  }
class C{  public RefactoringStatusEntry(int severity,String msg,RefactoringStatusContext context,String pluginId,int code){  this(severity,msg,context,pluginId,code,null);}  }
class C{  private void updateTextured(){  paintTextured=(root.getClientProperty(UNIFIED_TOOLBAR_LOOK) == Boolean.TRUE);  if (paintTextured && PlatformUtils.isMac()) {    if (root.isValid()) {      throw new IllegalArgumentException("This method only works if the given JRootPane has not yet been realized.");    }    root.putClientProperty("apple.awt.brushMetalLook",Boolean.TRUE);    LookAndFeel.installProperty((JComponent)root.getContentPane(),"opaque",Boolean.FALSE);  } else {    root.putClientProperty("apple.awt.brushMetalLook",null);  }}  }
class C{  public String createTempFile(){  try {    String name="TEMP_RESULT_SET_";    return FileUtils.createTempFile(name,Constants.SUFFIX_TEMP_FILE,true,true);  } catch (  IOException e) {    throw DbException.convertIOException(e,e.getMessage());  }}  }
class C{  public String toPrologString(){  Attribute att=m_Dataset.attribute(m_AttIndex);  StringBuffer str=new StringBuffer();  String attName=m_Dataset.attribute(m_AttIndex).name();  if (att.isNumeric()) {    str=str.append(attName + " ");    if (m_Not) {      str=str.append(">= " + Utils.doubleToString(m_Split,3));    } else {      str=str.append("< " + Utils.doubleToString(m_Split,3));    }  } else {    String value=att.value((int)m_Split);    if (value == "false") {      str=str.append("not(" + attName + ")");    } else {      str=str.append(attName);    }  }  return str.toString();}  }
class C{  private static <T>void checkInputParameter(WsInfo info,UserCredentials user,Class<T> type){  if (info == null || user == null || type == null) {    String text="Error: missing input parameter";    logger.error(text);    throw new WebServiceException(text);  }}  }
class C{  public boolean exists(){  return file != null ? file.exists() : true;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof RC2ParameterSpec)) {    return false;  }  RC2ParameterSpec ps=(RC2ParameterSpec)obj;  return (effectiveKeyBits == ps.effectiveKeyBits) && (Arrays.equals(iv,ps.iv));}  }
class C{  private void validateDestinationStorageUnit(StorageUnitEntity storageUnitEntity,String storageName,BusinessObjectDataKey businessObjectDataKey){  if (storageUnitEntity != null) {    if (!StorageUnitStatusEntity.DISABLED.equals(storageUnitEntity.getStatus().getCode())) {      throw new AlreadyExistsException(String.format("Destination storage unit already exists and has \"%s\" status. Storage: {%s}, business object data: {%s}",storageUnitEntity.getStatus().getCode(),storageName,businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));    }    if (!CollectionUtils.isEmpty(storageUnitEntity.getStorageFiles())) {      throw new IllegalStateException(String.format("Destination storage unit already exists and has %d storage file(s), but must have no storage files. " + "Storage: {%s}, business object data: {%s}",storageUnitEntity.getStorageFiles().size(),storageName,businessObjectDataHelper.businessObjectDataKeyToString(businessObjectDataKey)));    }  }}  }
class C{  private void switchToPanel(int panelResId,boolean showRemote){switch (panelResId) {case R.id.info_panel:    mediaPanel.setVisibility(View.GONE);  infoPanel.setVisibility(View.VISIBLE);break;case R.id.media_panel:infoPanel.setVisibility(View.GONE);mediaPanel.setVisibility(View.VISIBLE);break;}if (showRemote) {remotePanel.setVisibility(View.VISIBLE);buttonBarPanel.setVisibility(View.VISIBLE);} else {remotePanel.setVisibility(View.GONE);buttonBarPanel.setVisibility(View.GONE);}}  }
class C{  public static Properties toProperties(JSONObject jo) throws JSONException {  Properties properties=new Properties();  if (jo != null) {    Iterator keys=jo.keys();    while (keys.hasNext()) {      String name=keys.next().toString();      properties.put(name,jo.getString(name));    }  }  return properties;}  }
class C{  public static void createHTML(String outputDir,String templatesDir,ASDocConfiguration config) throws Exception {  templatesDir=templatesDir.replace('\\','/');  String outputDitaDir=outputDir + "tempdita/";  File indexTmp=new File(outputDir + "index.tmp");  String inputFile=indexTmp.toString();  while (inputFile.indexOf('\\') != -1) {    inputFile=inputFile.replace('\\','/');  }  try {    copyFile(templatesDir + "all-classes.xslt",outputDitaDir + "all-classes.xslt");    copyFile(templatesDir + "all-index.xslt",outputDitaDir + "all-index.xslt");    copyFile(templatesDir + "asdoc-util.xslt",outputDitaDir + "asdoc-util.xslt");    copyFile(templatesDir + "ASDoc_terms.xml",outputDitaDir + "ASDoc_terms.xml");    copyFile(templatesDir + "class-files.xslt",outputDitaDir + "class-files.xslt");    copyFile(templatesDir + "class-list.xslt",outputDitaDir + "class-list.xslt");    copyFile(templatesDir + "class-parts.xslt",outputDitaDir + "class-parts.xslt");    copyFile(templatesDir + "class-summary.xslt",outputDitaDir + "class-summary.xslt");    copyFile(templatesDir + "Classes.xslt",outputDitaDir + "Classes.xslt");    copyFile(templatesDir + "ClassHeader.xslt",outputDitaDir + "ClassHeader.xslt");    copyFile(templatesDir + "eventsGeneratedSummary.xslt",outputDitaDir + "eventsGeneratedSummary.xslt");    copyFile(templatesDir + "effectsSummary.xslt",outputDitaDir + "effectsSummary.xslt");    copyFile(templatesDir + "fieldSummary.xslt",outputDitaDir + "fieldSummary.xslt");    copyFile(templatesDir + "merge_dita_xml.xslt",outputDitaDir + "merge_dita_xml.xslt");    copyFile(templatesDir + "methodSummary.xslt",outputDitaDir + "methodSummary.xslt");    copyFile(templatesDir + "processHTML.xslt",outputDitaDir + "processHTML.xslt");    copyFile(templatesDir + "PostProcessing.xslt",outputDitaDir + "PostProcessing.xslt");    copyFile(templatesDir + "package-list.xslt",outputDitaDir + "package-list.xslt");    copyFile(templatesDir + "package-detail.xslt",outputDitaDir + "package-detail.xslt");    copyFile(templatesDir + "package-summary.xslt",outputDitaDir + "package-summary.xslt");    copyFile(templatesDir + "package.xslt",outputDitaDir + "package.xslt");    copyFile(templatesDir + "stylesSummary.xslt",outputDitaDir + "stylesSummary.xslt");    copyFile(templatesDir + "index.html",outputDitaDir + "index.html");    copyFile(templatesDir + "package-frame.html",outputDitaDir + "package-frame.html");    copyFile(templatesDir + "title-bar.html",outputDitaDir + "title-bar.html");    String warnings="silent";    String[] args=new String[]{"-s",outputDitaDir + "index.html","-o",inputFile,"-xsl",outputDitaDir + "processHTML.xslt","index-file=index.html","prog_language_name=ActionScript"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "package-frame.html","-o",outputDir + "package-frame.html","-xsl",outputDitaDir + "processHTML.xslt","package-frame=package-frame.html","prog_language_name=ActionScript"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",templatesDir + "index-list.html","-o",outputDir + "index-list.html","-xsl",outputDitaDir + "processHTML.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "title-bar.html","-o",outputDir + "title-bar.html","-xsl",outputDitaDir + "processHTML.xslt","titleBarFile=title-bar.html","prog_language_name=ActionScript"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-o",outputDitaDir + "packagemap.xml","-xsl",outputDitaDir + "merge_dita_xml.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-o",outputDitaDir + "Classes.xml","-xsl",outputDitaDir + "Classes.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "Classes.xml","-o",outputDitaDir + "ClassHeader.xml","-xsl",outputDitaDir + "ClassHeader.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-o",outputDitaDir + "pp_fieldSummary.xml","-warnings:" + warnings,"-xsl",outputDitaDir + "fieldSummary.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "pp_fieldSummary.xml","-warnings:" + warnings,"-o",outputDitaDir + "fieldSummary.xml","-xsl",outputDitaDir + "PostProcessing.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDitaDir + "pp_methodSummary.xml","-xsl",outputDitaDir + "methodSummary.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "pp_methodSummary.xml","-warnings:" + warnings,"-o",outputDitaDir + "methodSummary.xml","-xsl",outputDitaDir + "PostProcessing.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDitaDir + "eventsGeneratedSummary.xml","-xsl",outputDitaDir + "eventsGeneratedSummary.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDitaDir + "stylesSummary.xml","-xsl",outputDitaDir + "stylesSummary.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDitaDir + "effectsSummary.xml","-xsl",outputDitaDir + "effectsSummary.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDir + "dummy.html","-xsl",outputDitaDir + "class-files.xslt","showIncludeExamples=true","prog_language_name=ActionScript","process_xref_href_attribute=1"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packagemap.xml","-warnings:" + warnings,"-o",outputDir + "all-classes.html","-xsl",outputDitaDir + "all-classes.xslt","prog_language_name=ActionScript"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDir + "package-list.html","-xsl",outputDitaDir + "package-list.xslt"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packagemap.xml","-warnings:" + warnings,"-o",outputDir + "class-summary.html","-xsl",outputDitaDir + "class-summary.xslt","localTitle=allClasses","filter=*"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDir + "dummy.html","-xsl",outputDitaDir + "package-detail.xslt","prog_language_name=ActionScript"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDir + "package-summary.html","-xsl",outputDitaDir + "package-summary.xslt","localTitle=allPackages","filter=*","prog_language_name=ActionScript"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDir + "dummy.html","-xsl",outputDitaDir + "class-list.xslt","prog_language_name=ActionScript"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packagemap.xml","-warnings:" + warnings,"-o",outputDir + "dummy.html","-xsl",outputDitaDir + "all-index.xslt","prog_language_name=ActionScript"};    net.sf.saxon.Transform.main(args);    args=new String[]{"-s",outputDitaDir + "packages.dita","-warnings:" + warnings,"-o",outputDir + "dummy.html","-xsl",outputDitaDir + "package.xslt","prog_language_name=ActionScript"};    net.sf.saxon.Transform.main(args);    (new File(outputDir + "dummy.html")).delete();  } catch (  Exception ex) {    ex.printStackTrace();    throw ex;  }  File indexHtml=new File(outputDir + "index.html");  if (config.getLeftFramesetWidth() == -1) {    FileUtils.renameFile(indexTmp,indexHtml);  } else {    BufferedReader reader=null;    BufferedWriter writer=null;    File indexTmp2=new File(outputDir + "index2.tmp");    try {      reader=new BufferedReader(new FileReader(indexTmp));      writer=new BufferedWriter(new FileWriter(indexTmp2));      boolean foundFrameset=false;      String s;      String search1="frameset cols=";      String search2=",";      while ((s=reader.readLine()) != null) {        if (!foundFrameset) {          int ind=s.indexOf(search1);          if (ind != -1) {            foundFrameset=true;            int ind2=s.indexOf(search2,ind);            if (ind2 != -1) {              s=s.substring(0,ind + search1.length() + 1) + config.getLeftFramesetWidth() + s.substring(ind2);            }          }        }        writer.write(s);        writer.newLine();      }    } catch (    Exception ex) {      ex.printStackTrace();      CompilerMessage c=new CouldNotCreate("index.html",ex.getMessage());      ThreadLocalToolkit.log(c);      throw c;    } finally {      if (writer != null) {        try {          writer.close();        } catch (        IOException ioe) {        }      }      if (reader != null) {        try {          reader.close();        } catch (        IOException ioe) {        }      }      FileUtils.renameFile(indexTmp2,indexHtml);    }  }}  }
class C{  public String privateName(Declaration decl){  return getName(decl,false,true);}  }
class C{  FlexibleNode readBranch(HashMap<String,Taxon> translationList) throws IOException, ImportException {  double length=0.0;  FlexibleNode branch;  clearLastMetaComment();  if (nextCharacter() == '(') {    branch=readInternalNode(translationList);  } else {    branch=readExternalNode(translationList);  }  if (getLastDelimiter() != ':' && getLastDelimiter() != ',' && getLastDelimiter() != ')') {    String label=readToken(",():;");    if (label.length() > 0) {      branch.setAttribute("label",label);    }  }  if (getLastDelimiter() == ':') {    length=readDouble(",():;");    if (getLastMetaComment() != null) {      try {        parseMetaCommentPairs(getLastMetaComment(),branch);      } catch (      BadFormatException bfe) {      }      clearLastMetaComment();    }  }  branch.setLength(length);  return branch;}  }
class C{  public long time(){  return heartbeatTime;}  }
class C{  public MutablePeriod(ReadableDuration duration,ReadableInstant endInstant,PeriodType type){  super(duration,endInstant,type);}  }
class C{  public static Instances read(Loader loader) throws Exception {  DataSource source;  Instances result;  source=new DataSource(loader);  result=source.getDataSet();  return result;}  }
class C{  public XorPredicate(Predicate p1,Predicate p2){  super(p1,p2);}  }
class C{  public void addChangeListener(ChangeListener cl){  if (!listeners.contains(cl))   listeners.add(cl);}  }
class C{  private List<TransitRouteStop> computeNewRouteProfile(TransitScheduleFactoryImpl factory,TransitRoute refTransitRoute,Map<Id<TransitRoute>,TransitRoute> transitRoutes,String[] listOfRoutes,NetworkRoute newRoute,List<TransitRouteStop> stops){  List<TransitRouteStop> newStops=new ArrayList<TransitRouteStop>();  for (int i=0; i < refTransitRoute.getStops().size(); i++) {    double arrivalOffset=0;    int arrCounter=0;    double departureOffset=0;    int depCounter=0;    for (int j=0; j < listOfRoutes.length; j++) {      TransitRouteStop stop=transitRoutes.get(Id.create(listOfRoutes[j],TransitRoute.class)).getStops().get(i);      arrivalOffset+=stop.getArrivalOffset();      arrCounter++;      departureOffset+=stop.getDepartureOffset();      depCounter++;    }    TransitRouteStop newStop=factory.createTransitRouteStop(refTransitRoute.getStops().get(i).getStopFacility(),arrivalOffset / arrCounter,departureOffset / depCounter);    newStop.setAwaitDepartureTime(refTransitRoute.getStops().get(i).isAwaitDepartureTime());    newStops.add(newStop);  }  return newStops;}  }
class C{  protected RTextAreaUI createRTextAreaUI(){  return new RSyntaxTextAreaUI(this);}  }
class C{  public static long char_to_key(char[] passwdChars) throws KrbCryptoException {  long key=0;  long octet, octet1, octet2=0;  byte[] cbytes=null;  try {    if (CHARSET == null) {      cbytes=(new String(passwdChars)).getBytes();    } else {      cbytes=(new String(passwdChars)).getBytes(CHARSET);    }  } catch (  Exception e) {    if (cbytes != null) {      Arrays.fill(cbytes,0,cbytes.length,(byte)0);    }    KrbCryptoException ce=new KrbCryptoException("Unable to convert passwd, " + e);    ce.initCause(e);    throw ce;  }  byte[] passwdBytes=pad(cbytes);  byte[] newkey=new byte[8];  int length=(passwdBytes.length / 8) + (passwdBytes.length % 8 == 0 ? 0 : 1);  for (int i=0; i < length; i++) {    octet=octet2long(passwdBytes,i * 8) & 0x7f7f7f7f7f7f7f7fL;    if (i % 2 == 1) {      octet1=0;      for (int j=0; j < 64; j++) {        octet1|=((octet & (1L << j)) >>> j) << (63 - j);      }      octet=octet1 >>> 1;    }    key^=(octet << 1);  }  key=set_parity(key);  if (bad_key(key)) {    byte[] temp=long2octet(key);    temp[7]^=0xf0;    key=octet2long(temp);  }  newkey=des_cksum(long2octet(key),passwdBytes,long2octet(key));  key=octet2long(set_parity(newkey));  if (bad_key(key)) {    byte[] temp=long2octet(key);    temp[7]^=0xf0;    key=octet2long(temp);  }  if (cbytes != null) {    Arrays.fill(cbytes,0,cbytes.length,(byte)0);  }  if (passwdBytes != null) {    Arrays.fill(passwdBytes,0,passwdBytes.length,(byte)0);  }  return key;}  }
class C{  public boolean removeUINode(Node n){  log.debug("Removing UI node: " + n);  return uiRoot.getChildren().remove(n);}  }
class C{  public SampleVocab(){  super();}  }
class C{  public static void generateTestFile(String test,String diff,int width,int height) throws Exception {  Uu.p("test = " + test);  String out=xhtmlToDiff(test,width,height);  Uu.string_to_file(out,new File(diff));}  }
class C{  public void removeAllFromAggregate(int row){  clearAggregateMappings(row,true);}  }
class C{  public static boolean hasResponseBody(RequestMethod requestMethod,int responseCode){  return requestMethod != RequestMethod.HEAD && hasResponseBody(responseCode);}  }
class C{  private String selectString(Connection connection,String columnName,int id) throws SQLException {  PreparedStatement select=connection.prepareStatement(String.format(SELECT_FORMAT,columnName));  try {    select.setInt(1,id);    ResultSet rs=select.executeQuery();    try {      assertTrue("Expected a row",rs.next());      return rs.getString(1);    }  finally {      rs.close();    }  }  finally {    select.close();  }}  }
class C{  public synchronized Relationship nextMostConsciousRelationship(Vertex type,Vertex ignoring,float min,boolean inverse){  Collection<Relationship> relationships=getRelationships(type);  if (relationships == null) {    return null;  }  Relationship highest=null;  float highestLevel=0;  float highestCorrectness=0;  for (  Relationship relationship : relationships) {    if ((relationship.isInverse() && inverse) || (!relationship.isInverse() && !inverse)) {      if (ignoring != relationship.getTarget()) {        float correctness=Math.abs(relationship.getCorrectness());        float level=computeCorrectness(relationship);        if ((highest == null) || (level > highestLevel)) {          if ((highest == null) || (correctness >= highestCorrectness)) {            highest=relationship;            highestLevel=level;            highestCorrectness=correctness;          }        }      }    }  }  if (highest == null) {    return null;  }  if (Math.abs(highest.getCorrectness()) < min) {    this.network.getBot().log(this,"Relationship not sufficiently correct",Level.FINER,highest,highest.getCorrectness(),min);    return null;  }  return highest;}  }
class C{  private static void initializeFont(){  final Font font=new Font(GuiHelper.getDefaultFont(),Font.PLAIN,GuiHelper.DEFAULT_FONTSIZE);  NaviLogger.info("Determined default font: %s",GuiHelper.getDefaultFont());  NaviLogger.info("Using default font: %s",font.getPSName());  NaviLogger.info("Determined monospaced font: %s",GuiHelper.getMonospaceFont());  NaviLogger.info("Using monospaced font: %s",GuiHelper.MONOSPACED_FONT.getPSName());  UIManager.put("Button.font",font);  UIManager.put("CheckBox.font",font);  UIManager.put("CheckBoxMenuItem.font",font);  UIManager.put("ColorChooser.font",font);  UIManager.put("ComboBox.font",font);  UIManager.put("DesktopIcon.font",font);  UIManager.put("InternalFrame.font",font);  UIManager.put("InternalFrame.titleFont",font);  UIManager.put("Label.font",font);  UIManager.put("List.font",font);  UIManager.put("Menu.font",font);  UIManager.put("MenuBar.font",font);  UIManager.put("MenuItem.font",font);  UIManager.put("OptionPane.font",font);  UIManager.put("Panel.font",font);  UIManager.put("PasswordField.font",font);  UIManager.put("PopupMenu.font",font);  UIManager.put("ProgressBar.font",font);  UIManager.put("RadioButton.font",font);  UIManager.put("RadioButtonMenuItem.font",font);  UIManager.put("ScrollPane.font",font);  UIManager.put("TabbedPane.font",font);  UIManager.put("Table.font",font);  UIManager.put("TableHeader.font",font);  UIManager.put("Text.font",font);  UIManager.put("TextArea.font",font);  UIManager.put("TextField.font",font);  UIManager.put("TitledBorder.font",font);  UIManager.put("ToggleButton.font",font);  UIManager.put("ToolBar.font",font);  UIManager.put("ToolTip.font",font);  UIManager.put("Tree.font",font);  UIManager.put("Viewport.font",font);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getLessOp_();}  }
class C{  public static void unregisterProgressListener(final Context context,final DfuProgressListener listener){  if (mProgressBroadcastReceiver != null) {    final boolean empty=mProgressBroadcastReceiver.removeProgressListener(listener);    if (empty) {      LocalBroadcastManager.getInstance(context).unregisterReceiver(mProgressBroadcastReceiver);      mProgressBroadcastReceiver=null;    }  }}  }
class C{  public static byte[] randomId(){  byte bits[];synchronized (idLock) {    bits=nextId.toByteArray();    nextId=nextId.add(BigInteger.ONE).and(mask128);  }  if (bits.length > ID_LENGTH) {    assert bits.length == ID_LENGTH + 1;    assert bits[0] == 0;    return Arrays.copyOfRange(bits,1,bits.length);  } else {    byte[] result=new byte[ID_LENGTH];    System.arraycopy(bits,0,result,result.length - bits.length,bits.length);    return result;  }}  }
class C{  public static void loadGLViewState(DrawContext dc,Matrix modelview,Matrix projection){  if (dc == null) {    String message=Logging.getMessage("nullValue.DrawContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (dc.getGL() == null) {    String message=Logging.getMessage("nullValue.DrawingContextGLIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (modelview == null) {    Logging.logger().fine("nullValue.ModelViewIsNull");  }  if (projection == null) {    Logging.logger().fine("nullValue.ProjectionIsNull");  }  double[] matrixArray=new double[16];  GL2 gl=dc.getGL().getGL2();  OGLStackHandler ogsh=new OGLStackHandler();  try {    ogsh.pushAttrib(gl,GL2.GL_TRANSFORM_BIT);    gl.glMatrixMode(GL2.GL_MODELVIEW);    if (modelview != null) {      modelview.toArray(matrixArray,0,false);      gl.glLoadMatrixd(matrixArray,0);    } else {      gl.glLoadIdentity();    }    gl.glMatrixMode(GL2.GL_PROJECTION);    if (projection != null) {      projection.toArray(matrixArray,0,false);      gl.glLoadMatrixd(matrixArray,0);    } else {      gl.glLoadIdentity();    }  }  finally {    ogsh.pop(gl);  }}  }
class C{  private static Request addSocketHeaders(final Request req,final Socket socket){  return new RqWithHeaders(req,String.format("X-Takes-LocalAddress: %s",socket.getLocalAddress().getHostAddress()),String.format("X-Takes-LocalPort: %d",socket.getLocalPort()),String.format("X-Takes-RemoteAddress: %s",socket.getInetAddress().getHostAddress()),String.format("X-Takes-RemotePort: %d",socket.getPort()));}  }
class C{  @Override public double utility(double totalWeight,double totalPositiveWeight,Hypothesis hypo){  double g=hypo.getCoveredWeight() / totalWeight;  double p=hypo.getPositiveWeight() / hypo.getCoveredWeight();  if (hypo.getPrediction() == Hypothesis.POSITIVE_CLASS) {    return g * (p - this.priors[Hypothesis.POSITIVE_CLASS]);  } else {    return g * (p - this.priors[Hypothesis.NEGATIVE_CLASS]);  }}  }
class C{  private void clearTorqueAction(){  TreePath path=this.tree.getSelectionPath();  if (path != null) {    DefaultMutableTreeNode node=(DefaultMutableTreeNode)path.getLastPathComponent();    if (node.getUserObject() instanceof SandboxBody) {      SandboxBody body=(SandboxBody)node.getUserObject();      int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),MessageFormat.format(Messages.getString("menu.context.body.clearTorque.warning"),body.getName()),Messages.getString("menu.context.body.clearTorque.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);      if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {          body.clearAccumulatedTorque();        }      }    }  }}  }
class C{  private RequestHandler[] loadHandlers(boolean loadMock){  RequestHandler[] handlers=new RequestHandler[MessageType.values().length];  for (  MessageType type : MessageType.values()) {    if (type == MessageType.TRANSLATION_REQUEST) {      handlers[type.ordinal()]=loadMock ? new TranslationRequestHandlerMock() : new TranslationRequestHandler(decoder);    } else     if (type == MessageType.RULE_QUERY_REQUEST) {      handlers[type.ordinal()]=loadMock ? new RuleQueryRequestHandlerMock() : new RuleQueryRequestHandler(decoder.getTranslationModel(),new SparseScorer(decoder.getModel()),decoder.getPreprocessor(),decoder.getPostprocessor());    } else     if (type == MessageType.UNKNOWN_REQUEST) {      handlers[type.ordinal()]=new UnknownRequestHandler();    }  }  return handlers;}  }
class C{  private int calculateDragSensitivity(){  int range=MAX_DRAG_SENSITIVITY - MIN_DRAG_SENSITIVITY;  return Math.round((1 - getDragSensitivity()) * range + MIN_DRAG_SENSITIVITY);}  }
class C{  @Inline public boolean incrementalTrace(int workLimit){  logMessage(4,"Continuing GC in parallel (incremental)");  logMessage(5,"processing gray objects");  int units=0;  do {    while (!values.isEmpty() && units < workLimit) {      ObjectReference v=values.pop();      scanObject(v);      units++;    }  } while (!values.isEmpty() && units < workLimit);  return values.isEmpty();}  }
class C{  private void buildAssociations(Object source) throws Exception {  Instances data=null;  Capabilities capabilities=getCapabilities();  boolean arffLoader=false;  boolean breakOnNext=false;  if (source instanceof weka.core.converters.ArffLoader) {    data=((weka.core.converters.ArffLoader)source).getStructure();    capabilities.setMinimumNumberInstances(0);    arffLoader=true;  } else {    data=(Instances)source;  }  capabilities.testWithFail(data);  if (m_transactionsMustContain.length() > 0 && (source instanceof Instances)) {    data=parseTransactionsMustContain(data);    getCapabilities().testWithFail(data);  }  ArrayList<Item> rulesMustContain=null;  if (m_rulesMustContain.length() > 0) {    rulesMustContain=parseRulesMustContain(data);  }  ArrayList<BinaryItem> singletons=getSingletons(source);  int upperBoundMinSuppAsInstances=(m_upperBoundMinSupport > 1) ? (int)m_upperBoundMinSupport : (int)Math.ceil(m_upperBoundMinSupport * m_numInstances);  int lowerBoundMinSuppAsInstances=(m_lowerBoundMinSupport > 1) ? (int)m_lowerBoundMinSupport : (int)Math.ceil(m_lowerBoundMinSupport * m_numInstances);  double lowerBoundMinSuppAsFraction=(m_lowerBoundMinSupport > 1) ? m_lowerBoundMinSupport / m_numInstances : m_lowerBoundMinSupport;  double deltaAsFraction=(m_delta > 1) ? m_delta / m_numInstances : m_delta;  double currentSupport=1.0;  if (m_findAllRulesForSupportLevel) {    currentSupport=lowerBoundMinSuppAsFraction;  }  do {    if (arffLoader) {      ((weka.core.converters.ArffLoader)source).reset();    }    int currentSupportAsInstances=(currentSupport > 1) ? (int)currentSupport : (int)Math.ceil(currentSupport * m_numInstances);    if (arffLoader) {      System.err.println("Building FP-tree...");    }    FPTreeRoot tree=buildFPTree(singletons,source,currentSupportAsInstances);    FrequentItemSets largeItemSets=new FrequentItemSets(m_numInstances);    if (arffLoader) {      System.err.println("Mining tree for min supp " + currentSupport);    }    FrequentBinaryItemSet conditionalItems=new FrequentBinaryItemSet(new ArrayList<BinaryItem>(),0);    mineTree(tree,largeItemSets,0,conditionalItems,currentSupportAsInstances);    m_largeItemSets=largeItemSets;    if (arffLoader) {      System.err.println("Number of large item sets: " + m_largeItemSets.size());    }    tree=null;    m_rules=generateRulesBruteForce(m_largeItemSets,m_metric,m_metricThreshold,upperBoundMinSuppAsInstances,lowerBoundMinSuppAsInstances,m_numInstances);    if (arffLoader) {      System.err.println("Number of rules found " + m_rules.size());    }    if (rulesMustContain != null && rulesMustContain.size() > 0) {      m_rules=pruneRules(m_rules,rulesMustContain,m_mustContainOR);    }    if (!m_findAllRulesForSupportLevel) {      if (breakOnNext) {        break;      }      currentSupport-=deltaAsFraction;      if (currentSupport < lowerBoundMinSuppAsFraction) {        if (currentSupport + deltaAsFraction > lowerBoundMinSuppAsFraction) {          currentSupport=lowerBoundMinSuppAsFraction;          breakOnNext=true;        } else {          break;        }      }    } else {      break;    }  } while (m_rules.size() < m_numRulesToFind);  Collections.sort(m_rules);}  }
class C{  @Override public boolean hasEmbeddedFonts(){  return resultsFromDecode.hasEmbeddedFonts();}  }
class C{  public boolean match(String clearTextPassword,String encpassword){  if (StringUtils.startsWith(encpassword,Constants.CRYPT_SHA_512)) {    String hashedValue=Crypt.crypt(clearTextPassword,encpassword);    return encpassword.equals(hashedValue);  } else {    String encryptedValue=encryptionProvider.getEncryptedString(clearTextPassword);    return encpassword.equals(encryptedValue);  }}  }
class C{  public boolean contains(TimePattern other,boolean strongComparison){  if (!possibleMatch(other,strongComparison))   return false;  return getDays().containsAll(other.getDays()) && getTimes().containsAll(other.getTimes());}  }
class C{  public final synchronized void gotoStartOfVariation(){  boolean needUpdate=false;  while (true) {    if (!undoMoveNoUpdate())     break;    needUpdate=true;    if (game.numVariations() > 1)     break;  }  if (needUpdate) {    abortSearch();    updateComputeThreads();    setSelection();    updateGUI();  }}  }
class C{  @Deprecated public void loadNetwork(){  String networkFileName=null;  if ((this.config.network() != null) && (this.config.network().getInputFile() != null)) {    networkFileName=this.config.network().getInputFile();    log.info("loading network from " + networkFileName);    Network network=(Network)this.scenario.getNetwork();    if (this.config.network().isTimeVariantNetwork()) {      log.info("use TimeVariantLinks in NetworkFactory.");      network.getFactory().setLinkFactory(new VariableIntervalTimeVariantLinkFactory());    }    new MatsimNetworkReader(this.scenario.getNetwork()).readFile(networkFileName);    if ((this.config.network().getChangeEventsInputFile() != null) && this.config.network().isTimeVariantNetwork()) {      log.info("loading network change events from " + this.config.network().getChangeEventsInputFileUrl(this.config.getContext()).getFile());      List<NetworkChangeEvent> changeEvents=new ArrayList<>();      NetworkChangeEventsParser parser=new NetworkChangeEventsParser(network,changeEvents);      parser.parse(this.config.network().getChangeEventsInputFileUrl(config.getContext()));      NetworkUtils.setNetworkChangeEvents(network,changeEvents);    }  }}  }
class C{  public void startLengthList() throws ParseException {  us=new LinkedList();  u=new short[11];  vs=new LinkedList();  v=new float[11];  count=0;  index=0;}  }
class C{  private Rectangle2D[] splitHorizontalBar(RectangularShape bar,double a,double b,double c){  Rectangle2D[] result=new Rectangle2D[4];  double y0=bar.getMinY();  double y1=Math.rint(y0 + (bar.getHeight() * a));  double y2=Math.rint(y0 + (bar.getHeight() * b));  double y3=Math.rint(y0 + (bar.getHeight() * c));  result[0]=new Rectangle2D.Double(bar.getMinX(),bar.getMinY(),bar.getWidth(),y1 - y0);  result[1]=new Rectangle2D.Double(bar.getMinX(),y1,bar.getWidth(),y2 - y1);  result[2]=new Rectangle2D.Double(bar.getMinX(),y2,bar.getWidth(),y3 - y2);  result[3]=new Rectangle2D.Double(bar.getMinX(),y3,bar.getWidth(),bar.getMaxY() - y3);  return result;}  }
class C{  public final void writeBoolean(boolean val) throws IOException {  write(val ? 1 : 0);}  }
class C{  public AutoColorCorrelogram(IAutoCorrelogramFeatureExtractor extractionAlgorith){  this(DEFAULT_NUMBER_COLORS,new int[]{1,2,3,4},extractionAlgorith);}  }
class C{  public GCTrace findGCTrace(int index){  ArgumentChecking.withinBounds(index,0,size() - 1,"index");  return get(index);}  }
class C{  public boolean isSet(Option option){  return (values.get(option.text) != null);}  }
class C{  public FileReadStream(){}  }
class C{  public boolean isProtocolStatusDirty(org.apache.nutch.storage.ProtocolStatus value){  throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");}  }
class C{  public static long parseLong(String s){  long value=0;  if (s == null) {    return value;  }  if (s.startsWith("0x")) {    value=Long.parseLong(s.substring(2),16);  } else {    value=Long.parseLong(s);  }  return value;}  }
class C{  public void testAddObservation_showsLoadingDialog(){  mController.init();  mController.onAddObservationPressed();  verify(mMockUi).showFormLoadingDialog(true);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.validation.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  private String checkVariable(RAbstractStringVector xVec){  int len=xVec.getLength();  if (len == 1) {    return xVec.getDataAt(0);  } else   if (len == 0) {    errorProfile.enter();    throw RError.error(errorContext(),RError.Message.INVALID_FIRST_ARGUMENT);  } else {    warningProfile.enter();    RError.warning(errorContext(),RError.Message.ONLY_FIRST_VARIABLE_NAME);    return xVec.getDataAt(0);  }}  }
class C{  public void onScreenChange(int currentScreen,int lastScreen){  ImageView[] points=platformGridView.points;  for (int i=0; i < points.length; i++) {    points[i].setImageBitmap(platformGridView.grayPoint);  }  points[currentScreen].setImageBitmap(platformGridView.bluePoint);}  }
class C{  public static Pointer to(long values[]){  return new Pointer(LongBuffer.wrap(values));}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public static void deregister(){  JobEvents.jobEventPublisherThreadLocal.remove();}  }
class C{  @Override public void onProgressUpdate(long progress,long bufferedProgress,long left){  BroadcastHelper.broadcastProgressUpdate(this,progress,bufferedProgress,left);}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (true);}  }
class C{  public CGotoOperandExpressionAction(final CDebugPerspectiveModel model,final String value,final BigInteger address){  super(String.format("Follow '%s' (%s) in memory",value,address.toString(16).toUpperCase()));  m_model=model;  m_address=address;}  }
class C{  public String createAjaxParamsFromUpdateAreas(List<ModelForm.UpdateArea> updateAreas,String extraParams,Map<String,? extends Object> context){  if (updateAreas == null) {    return "";  }  String ajaxUrl="";  boolean firstLoop=true;  for (  ModelForm.UpdateArea updateArea : updateAreas) {    if (firstLoop) {      firstLoop=false;    } else {      ajaxUrl+=",";    }    Map<String,Object> ctx=UtilGenerics.checkMap(context);    Map<String,String> parameters=updateArea.getParameterMap(ctx);    String targetUrl=updateArea.getAreaTarget(context);    String ajaxParams=getAjaxParamsFromTarget(targetUrl);    if (UtilValidate.isNotEmpty(parameters)) {      if (UtilValidate.isEmpty(ajaxParams)) {        ajaxParams="";      }      for (      Map.Entry<String,String> entry : parameters.entrySet()) {        String key=entry.getKey();        String value=entry.getValue();        if (UtilValidate.isNotEmpty(extraParams) && extraParams.contains(value)) {          continue;        }        if (ajaxParams.length() > 0 && ajaxParams.indexOf(key) < 0) {          ajaxParams+="&";        }        if (ajaxParams.indexOf(key) < 0) {          ajaxParams+=key + "=" + value;        }      }    }    if (UtilValidate.isNotEmpty(extraParams)) {      if (ajaxParams.length() > 0 && !extraParams.startsWith("&")) {        ajaxParams+="&";      }      ajaxParams+=extraParams;    }    ajaxUrl+=updateArea.getAreaId() + ",";    ajaxUrl+=this.rh.makeLink(this.request,this.response,UtilHttp.removeQueryStringFromTarget(targetUrl));    ajaxUrl+="," + ajaxParams;  }  Locale locale=UtilMisc.ensureLocale(context.get("locale"));  return FlexibleStringExpander.expandString(ajaxUrl,context,locale);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  private static long posOfPhi(double phi,long n){  long pos=(long)Math.floor(phi * n);  return (pos == n) ? n - 1 : pos;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ANNOTABLE_N4_MEMBER_DECLARATION;}  }
class C{  private void zDrawIndependentCalendarPanelIfNeeded(){  if (zSkipDrawIndependentCalendarPanelIfNeeded) {    return;  }  if (parentCalendarPanel != null) {    parentCalendarPanel.drawCalendar();  }}  }
class C{  public void updateShuffleState(){switch (MusicUtils.getShuffleMode()) {case MusicPlaybackService.SHUFFLE_NORMAL:    setContentDescription(getResources().getString(R.string.accessibility_shuffle_all));  setImageDrawable(mResources.getDrawable(SHUFFLE_ALL));break;case MusicPlaybackService.SHUFFLE_AUTO:setContentDescription(getResources().getString(R.string.accessibility_shuffle_all));setImageDrawable(mResources.getDrawable(SHUFFLE_ALL));break;case MusicPlaybackService.SHUFFLE_NONE:setContentDescription(getResources().getString(R.string.accessibility_shuffle));setImageDrawable(mResources.getDrawable(SHUFFLE));break;default :break;}}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  protected void update(){  long time=System.nanoTime();  long diff=time - this.last;  this.last=time;  double elapsedTime=diff / NANO_TO_BASE;  this.world.update(elapsedTime);}  }
class C{  public static MAssetGroupAcct forA_Asset_Group_ID(Properties ctx,int A_Asset_Group_ID,String postingType){  final String whereClause=COLUMNNAME_A_Asset_Group_ID + "=? AND " + COLUMNNAME_PostingType+ "=?";  return new Query(ctx,Table_Name,whereClause,null).setParameters(new Object[]{A_Asset_Group_ID,postingType}).firstOnly();}  }
class C{  public MarshalException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  public static float tan(float fValue){  return (float)Math.tan(fValue);}  }
class C{  public ItemRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public void testSameNodeInFromToSetNotCheapest(boolean fastRouter){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=makeMultiNodeDikstra(f.network,tc,tc,fastRouter);  List<InitialNode> fromNodes=new ArrayList<InitialNode>();  List<InitialNode> toNodes=new ArrayList<InitialNode>();  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(2,Node.class)),2.0,2.0));  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(4,Node.class)),10.0,10.0));  toNodes.add(new InitialNode(f.network.getNodes().get(Id.create(4,Node.class)),8.0,8.0));  toNodes.add(new InitialNode(f.network.getNodes().get(Id.create(6,Node.class)),3.0,3.0));  Node fromNode=dijkstra.createImaginaryNode(fromNodes);  Node toNode=dijkstra.createImaginaryNode(toNodes);  Path p=createPath(dijkstra,fromNode,toNode);  Assert.assertNotNull("no path found!",p);  Assert.assertEquals(3,p.links.size());  Assert.assertEquals("2",p.links.get(0).getId().toString());  Assert.assertEquals("7",p.links.get(1).getId().toString());  Assert.assertEquals("6",p.links.get(2).getId().toString());}  }
class C{  @Override public Calendar next(){  if (spot.equals(endFinal)) {    throw new NoSuchElementException();  }  spot.add(Calendar.DATE,1);  return (Calendar)spot.clone();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static long[] parseString(String[] values){  long[] result=new long[values.length];  for (int i=0; i < result.length; i++) {    result[i]=parseString(values[i]);  }  return result;}  }
class C{  public boolean hasId(){  return hasExtension(Id.class);}  }
class C{  @Override public final void write(byte[] source,int offset,int len){  try {    buffer.put(source,offset,len);  } catch (  BufferOverflowException e) {    expand(len - (buffer.capacity() - buffer.position()));    buffer.put(source,offset,len);  }catch (  BufferUnderflowException e) {    expand(len - (buffer.capacity() - buffer.position()));    buffer.put(source,offset,len);  }}  }
class C{  private void handleStartRecording(EncoderConfig config){  Log.d(TAG,"handleStartRecording " + config);  prepareEncoder(config.mEglContext,config.mWidth,config.mHeight,config.mBitRate,config.mOutputFile);}  }
class C{  public Edge addEdge(Node s,Node t){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public Mesh createSunBlockMesh(double width,double length,double height){  float wid=(float)width / 2;  float len=(float)length / 2;  float hgt=(float)height / 2;  FloatBuffer vertexBuffer=BufferUtils.createFloatBuffer(40 * 3);  FloatBuffer normalBuffer=BufferUtils.createFloatBuffer(40 * 3);  FloatBuffer colorBuffer=BufferUtils.createFloatBuffer(40 * 4);  FloatBuffer texCoordBuffer=BufferUtils.createFloatBuffer(40 * 2);  float[] vertex=new float[]{-wid,-len,-hgt,-wid,len,-hgt,wid,len,-hgt,-wid,-len,-hgt,wid,len,-hgt,wid,-len,-hgt};  float[] normal=new float[]{0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1};  float[] tCoord=new float[]{0,0,0,1,1,1,0,0,1,1,1,0};  vertexBuffer.put(vertex);  normalBuffer.put(normal);  texCoordBuffer.put(tCoord);  vertex=new float[]{-wid,-len,-hgt,-wid,len,-hgt,-wid,len,hgt,-wid,-len,-hgt,-wid,len,hgt,-wid,len,hgt};  normal=new float[]{-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0};  vertexBuffer.put(vertex);  normalBuffer.put(normal);  texCoordBuffer.put(tCoord);  vertex=new float[]{-wid,len,-hgt,-wid,len,hgt,wid,len,hgt,-wid,len,-hgt,wid,len,hgt,wid,len,-hgt};  normal=new float[]{0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0};  vertexBuffer.put(vertex);  normalBuffer.put(normal);  texCoordBuffer.put(tCoord);  vertex=new float[]{wid,-len,hgt,wid,len,hgt,wid,len,-hgt,wid,-len,hgt,wid,len,-hgt,wid,-len,-hgt};  normal=new float[]{1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0};  vertexBuffer.put(vertex);  normalBuffer.put(normal);  texCoordBuffer.put(tCoord);  vertex=new float[]{-wid,-len,-hgt,-wid,-len,hgt,wid,-len,hgt,-wid,-len,-hgt,wid,-len,hgt,wid,-len,-hgt};  normal=new float[]{0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0};  vertexBuffer.put(vertex);  normalBuffer.put(normal);  texCoordBuffer.put(tCoord);  for (int i=0; i < 40; ++i) {    colorBuffer.put(missingColor.getRed()).put(missingColor.getGreen()).put(missingColor.getBlue()).put(missingColor.getAlpha());  }  vertexBuffer.flip();  normalBuffer.flip();  colorBuffer.flip();  texCoordBuffer.flip();  Mesh mesh=new Mesh("_sunblock");  MeshData meshData=new MeshData();  meshData.setVertexBuffer(vertexBuffer);  meshData.setNormalBuffer(normalBuffer);  meshData.setTextureBuffer(texCoordBuffer,0);  meshData.setColorBuffer(colorBuffer);  mesh.setMeshData(meshData);  mesh.getSceneHints().setNormalsMode(NormalsMode.NormalizeIfScaled);  CullState cullState=new CullState();  cullState.setCullFace(CullState.Face.Back);  cullState.setEnabled(true);  mesh.setRenderState(cullState);  mesh.setModelBound(new BoundingBox());  mesh.updateModelBound();  return (mesh);}  }
class C{  public Wildcards matchOn(Wildcards.Flag flag,Wildcards.Flag flag2){  int flags=flag.matchOn(flag2.matchOn(this.flags));  if (flags == this.flags)   return this; else   return new Wildcards(flags);}  }
class C{  public void onKernalStart(){  if (srvEndpoint != null)   new IgniteThread(acceptWorker).start();}  }
class C{  private void doAddMapping(String user,String domain,String mapping) throws RecipientRewriteTableException {  Connection conn=null;  PreparedStatement mappingStmt=null;  try {    conn=dataSource.getConnection();    mappingStmt=conn.prepareStatement(sqlQueries.getSqlString("addMapping",true));    ResultSet mappingRS=null;    try {      mappingStmt.setString(1,user);      mappingStmt.setString(2,domain);      mappingStmt.setString(3,mapping);      if (mappingStmt.executeUpdate() < 1) {        throw new RecipientRewriteTableException("Mapping not found");      }    }  finally {      theJDBCUtil.closeJDBCResultSet(mappingRS);    }  } catch (  SQLException sqle) {    getLogger().error("Error accessing database",sqle);  } finally {    theJDBCUtil.closeJDBCStatement(mappingStmt);    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  public void testSetPageAuditExecutionListMax(){  System.out.println("setPageAuditExecutionListMax");  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  int pageAuditExecutionListMax=10;  instance.setPageAuditExecutionListMax(pageAuditExecutionListMax);  assertEquals(pageAuditExecutionListMax,instance.getPageAuditExecutionListMax());}  }
class C{  public static int solveCubic(double eqn[],double res[]){  double d=eqn[3];  if (d == 0) {    return solveQuad(eqn,res);  }  double a=eqn[2] / d;  double b=eqn[1] / d;  double c=eqn[0] / d;  int rc=0;  double Q=(a * a - 3.0 * b) / 9.0;  double R=(2.0 * a * a* a - 9.0 * a * b + 27.0 * c) / 54.0;  double Q3=Q * Q * Q;  double R2=R * R;  double n=-a / 3.0;  if (R2 < Q3) {    double t=MathUtil.acos(R / Math.sqrt(Q3)) / 3.0;    double p=2.0 * Math.PI / 3.0;    double m=-2.0 * Math.sqrt(Q);    res[rc++]=m * Math.cos(t) + n;    res[rc++]=m * Math.cos(t + p) + n;    res[rc++]=m * Math.cos(t - p) + n;  } else {    double A=MathUtil.pow(Math.abs(R) + Math.sqrt(R2 - Q3),1.0 / 3.0);    if (R > 0.0) {      A=-A;    }    if (-ROOT_DELTA < A && A < ROOT_DELTA) {      res[rc++]=n;    } else {      double B=Q / A;      res[rc++]=A + B + n;      double delta=R2 - Q3;      if (-ROOT_DELTA < delta && delta < ROOT_DELTA) {        res[rc++]=-(A + B) / 2.0 + n;      }    }  }  return fixRoots(res,rc);}  }
class C{  public EventSource join() throws InterruptedException {  clientHandler.join();  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.REFERENCED_STATE_MACHINE___NAME_1:    setName_1((String)newValue);  return;case UmplePackage.REFERENCED_STATE_MACHINE___DEFINITION_NAME_1:setDefinitionName_1((String)newValue);return;case UmplePackage.REFERENCED_STATE_MACHINE___EXTENDED_STATE_MACHINE_1:getExtendedStateMachine_1().clear();getExtendedStateMachine_1().addAll((Collection<? extends ExtendedStateMachine_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.STATECHART_ROOT__DEF:    setDef((StatechartSpecification)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void parse(final char[] text,final int offset,final int length){  MutableString tagElemTypeName=new MutableString();  MutableString attrName=new MutableString();  MutableString attrValue=new MutableString();  MutableString entity=new MutableString();  MutableString characters=new MutableString();  char delim;  char currChar;  int state;  int start, k;  boolean flowBroken=false, parseCurrAttr;  Element currentElement;  Attribute currAttr=null;  attrMap=new Reference2ObjectArrayMap<Attribute,MutableString>(16);  callback.startDocument();  tagElemTypeName.length(0);  attrName.length(0);  attrValue.length(0);  entity.length(0);  state=STATE_TEXT;  currentElement=null;  final int end=offset + length;  int pos=offset;  while (pos < end) {switch (state) {case STATE_TEXT:      currChar=text[pos];    if (currChar == '&') {      if ((k=scanEntity(text,pos,end - pos,true,entity)) == -1) {        currChar='&';        pos++;      } else {        currChar=lastEntity;        pos=k;        if (DEBUG)         System.err.println("Entity at: " + pos + " end of entity: "+ k+ " entity: "+ entity+ " char: "+ currChar);      }      if (parseText)       characters.append(currChar);      continue;    }  if (currChar != '<' || pos >= end - 2) {    if (parseText)     characters.append(currChar);    pos++;    continue;  }switch (text[++pos]) {case '!':  pos=handleMarkup(text,pos,end);break;case '%':case '?':pos=handleProcessingInstruction(text,pos,end);break;default :if (Character.isLetter(text[pos])) state=STATE_BEFORE_START_TAG_NAME; else if (text[pos] == '/' && (Character.isLetter(text[pos + 1]) || text[pos + 1] == '>')) {state=STATE_BEFORE_END_TAG_NAME;pos++;} else {if (parseText) characters.append('<');continue;}break;}if (parseText && characters.length() != 0) {callback.characters(characters.array(),0,characters.length(),flowBroken);characters.length(0);}flowBroken=false;break;case STATE_BEFORE_START_TAG_NAME:case STATE_BEFORE_END_TAG_NAME:tagElemTypeName.length(0);for (start=pos; pos < end && (Character.isLetterOrDigit(text[pos]) || text[pos] == ':' || text[pos] == '_' || text[pos] == '-' || text[pos] == '.'); pos++) ;tagElemTypeName.append(text,start,pos - start);tagElemTypeName.toLowerCase();currentElement=factory.getElement(tagElemTypeName);if (DEBUG) System.err.println((state == STATE_BEFORE_START_TAG_NAME ? "Opening" : "Closing") + " tag for " + tagElemTypeName+ " (element: "+ currentElement+ ")");if (currentElement != null && currentElement.breaksFlow) flowBroken=true;while (pos < end && Character.isWhitespace(text[pos])) pos++;state=state == STATE_BEFORE_START_TAG_NAME ? STATE_IN_START_TAG : STATE_IN_END_TAG;break;case STATE_IN_START_TAG:currChar=text[pos];if (currChar != '>' && (currChar != '/' || pos == end - 1 || text[pos + 1] != '>')) {if (Character.isLetter(currChar)) {parseCurrAttr=false;attrName.length(0);for (start=pos; pos < end && (Character.isLetter(text[pos]) || text[pos] == '-'); pos++) ;if (currentElement != null && parseAttributes) {attrName.append(text,start,pos - start);attrName.toLowerCase();if (DEBUG) System.err.println("Got attribute named \"" + attrName + "\"");currAttr=factory.getAttribute(attrName);parseCurrAttr=parsedAttrs.contains(currAttr);}while (pos < end && Character.isWhitespace(text[pos])) pos++;if (pos == end) break;if (text[pos] != '=') {if (parseCurrAttr) attrMap.put(currAttr,new MutableString(currAttr.name));break;}pos++;while (pos < end && Character.isWhitespace(text[pos])) pos++;if (pos == end) break;attrValue.length(0);if (pos < end && ((delim=text[pos]) == '"' || (delim=text[pos]) == '\'')) {for (start=++pos; pos < end && text[pos] != delim; pos++) ;if (parseCurrAttr) attrValue.append(text,start,pos - start).replace(NONSPACE_WHITESPACE,SPACE);if (pos < end) pos++;} else {for (start=pos; pos < end && !Character.isWhitespace(text[pos]) && text[pos] != '>'; pos++) ;if (parseCurrAttr) attrValue.append(text,start,pos - start);}if (parseCurrAttr) {replaceEntities(attrValue,entity,false);attrMap.put(currAttr,attrValue.copy());if (DEBUG) System.err.println("Attribute value: \"" + attrValue + "\"");}while (pos < end && Character.isWhitespace(text[pos])) pos++;} else {do pos++; while (pos < end && text[pos] != '>' && !Character.isWhitespace(text[pos]));while (pos < end && Character.isWhitespace(text[pos])) pos++;continue;}} else {if (parseTags && !callback.startElement(currentElement,attrMap)) break;if (attrMap != null) attrMap.clear();if (currentElement == Element.SCRIPT || currentElement == Element.STYLE) {final TextPattern pattern=currentElement == Element.SCRIPT ? SCRIPT_CLOSE_TAG_PATTERN : STYLE_CLOSE_TAG_PATTERN;start=pos + 1;pos=pattern.search(text,start,end);if (pos == -1) pos=end;if (parseText) callback.cdata(currentElement,text,start,pos - start);if (pos < end) {if (parseTags) callback.endElement(currentElement);pos+=pattern.length();}} else pos+=currChar == '/' ? 2 : 1;state=STATE_TEXT;}break;case STATE_IN_END_TAG:while (pos < end && text[pos] != '>') pos++;if (parseTags && currentElement != null && !callback.endElement(currentElement)) break;state=STATE_TEXT;pos++;break;default :}}if (state == STATE_IN_START_TAG && parseTags && currentElement != null) callback.startElement(currentElement,attrMap);if (state == STATE_IN_END_TAG && parseTags && currentElement != null) callback.endElement(currentElement);if (state == STATE_TEXT && parseText && characters.length() > 0) callback.characters(characters.array(),0,characters.length(),flowBroken);callback.endDocument();}  }
class C{  @Nullable private GridMessageListener listenerPutIfAbsent0(Object topic,GridMessageListener lsnr){  if (topic instanceof GridTopic) {synchronized (sysLsnrsMux) {      int idx=systemListenerIndex(topic);      GridMessageListener old=sysLsnrs[idx];      if (old == null)       changeSystemListener(idx,lsnr);      return old;    }  } else   return lsnrMap.putIfAbsent(topic,lsnr);}  }
class C{  @Override protected void initialize(){  ExtensionFileFilter filter;  super.initialize();  m_Formatter=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  m_FileChooser=GUIHelper.newFileChooser();  filter=new ExtensionFileFilter(".log","Log files");  m_FileChooser.addChoosableFileFilter(filter);  m_FileChooser.setFileFilter(filter);  m_FileChooser.setAcceptAllFileFilterUsed(true);}  }
class C{  public void reloadCircuits(){  HashMap<String,String> correct_seq_map=new HashMap<>();  ArrayList<ArrayList<String>> correct_seqs=Util.fileTokenizer("resources/tested_circuits/circuit_DNA_sequences_v2.csv");  for (  ArrayList<String> row : correct_seqs) {    String name=row.get(0);    String dnaseq=row.get(1);    correct_seq_map.put(name,dnaseq);  }  System.out.println("reloadCircuits :: ");  String baseDirectory="resources/tested_circuits/";  DirectoryScanner scanner=new DirectoryScanner();  scanner.setBasedir(baseDirectory);  scanner.scan();  String[] directory_names=scanner.getIncludedDirectories();  for (  String directory : directory_names) {    if (directory.isEmpty()) {      continue;    }    System.out.println("directory: " + directory);    String verilogFile="";    String circuitFile="";    File folder=new File(baseDirectory + directory);    File[] listOfFiles=folder.listFiles();    for (    File f : listOfFiles) {      if (f.getName().endsWith(".v")) {        verilogFile=f.getAbsolutePath();      }      if (f.getName().endsWith("logic_circuit.txt")) {        circuitFile=f.getAbsolutePath();      }    }    if (circuitFile.isEmpty()) {      continue;    }    String options="-histogram false " + "-figures false " + "-assignment_algorithm reload "+ "-reload " + circuitFile + " "+ "-verilog "+ verilogFile+ " "+ "-jobID "+ "circuit_"+ directory+ " "+ "-output_directory "+ baseDirectory+ directory+ "/ ";    ArrayList<String> optList=Util.lineTokenizer(options);    String[] optArr=new String[optList.size()];    optArr=optList.toArray(optArr);    DNACompiler dnaCompiler=new DNACompiler();    dnaCompiler.run(optArr);    LogicCircuit lc=dnaCompiler.get_logic_circuits().get(0);    String correct_seq=correct_seq_map.get(directory);    String fulldna="";    for (    ArrayList<Part> module : lc.get_circuit_module_parts()) {      for (      Part p : module) {        if (p.get_type().equalsIgnoreCase("scar")) {          String seq=correct_seq.substring(fulldna.length(),fulldna.length() + 4);          p.set_seq(seq);        }        fulldna+=p.get_seq();        if (!correct_seq.toUpperCase().startsWith(fulldna.toUpperCase())) {          System.out.println("############# Problem with \n" + p.get_name() + " \n"+ p.get_seq());          Integer length_last=p.get_seq().length();          String expected=correct_seq.substring(fulldna.length() - length_last,fulldna.length());          if (!directory.equals("0xB9")) {            assert (false);          }        } else {        }      }    }    if (!directory.equals("0xB9")) {      assert (correct_seq.toUpperCase().startsWith(fulldna.toUpperCase()));    }    System.out.println("sequence, " + directory + ", "+ fulldna);  }}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=keys.length;  String oldKeys[]=keys;  NameSpaceSymbEntry oldVals[]=entries;  keys=new String[newCapacity];  entries=new NameSpaceSymbEntry[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldKeys[i] != null) {      String o=oldKeys[i];      int index=index(o);      keys[index]=o;      entries[index]=oldVals[i];    }  }}  }
class C{  public HtmlPolicyBuilder allowUrlProtocols(String... protocols){  invalidateCompiledState();  for (  String protocol : protocols) {    protocol=Strings.toLowerCase(protocol);    allowedProtocols.add(protocol);  }  return this;}  }
class C{  public void listen() throws IOException {  Debug.message("link","LinkListener: Asynchronously listening...");  ClientLink link=linkManager.getLink(this);  Debug.message("link","LinkListener got link...");  while (link != null) {    Debug.message("link","LinkListener: listening...");    link.readAndParse(null,currentGenerator,layer);    Debug.message("link","LinkListener: received content from server");    layer.handleLinkGraphicList(link.getGraphicList());    layer.handleLinkActionRequest(link.getActionRequest());    layer.handleLinkActionList(link.getActionList());    link=linkManager.getLink(this);  }}  }
class C{  public MySQLPacket(int size,byte packetNumber){  if (size < HEADER_LENGTH) {    this.byteBuffer=new byte[HEADER_LENGTH + size];  } else {    this.byteBuffer=new byte[size];  }  this.byteBuffer[3]=packetNumber;  this.position=HEADER_LENGTH;}  }
class C{  protected long link(OutputStream out) throws IOException {  if (data == null || data.units == null) {    return 0;  }  boolean hasChanged=(oemConfiguration == null) ? false : oemConfiguration.hasChanged();  flex2.compiler.common.Configuration config=null;  if (hasChanged) {    oemConfiguration=OEMUtil.getLinkerConfiguration(oemConfiguration.getLinkerOptions(),oemConfiguration.keepLinkReport(),oemConfiguration.keepSizeReport(),OEMUtil.getLogger(logger,messages),mimeMappings,resolver,data.configuration,oemConfiguration.newLinkerOptionsAfterCompile,data.includes,data.excludes);    if (oemConfiguration == null) {      clean(false,false,false,false,false,true);      return 0;    }    config=oemConfiguration.configuration;  } else {    config=data.configuration;  }  if (config.benchmark()) {    benchmark=CompilerAPI.runBenchmark();    benchmark.setTimeFilter(config.getBenchmarkTimeFilter());  } else {    CompilerAPI.disableBenchmark();  }  try {    OEMUtil.init(OEMUtil.getLogger(logger,messages),mimeMappings,meter,resolver,cc);    SimpleMovie temp=data.movie;    data.movie=SwcAPI.link(config,data.units);    SwcArchive archive=null;    Map<String,VirtualFile> archiveFiles=new TreeMap<String,VirtualFile>();    if (data.swcArchiveFiles != null)     archiveFiles.putAll(data.swcArchiveFiles);    if (data.cssArchiveFiles != null)     archiveFiles.putAll(data.cssArchiveFiles);    if (data.l10nArchiveFiles != null)     archiveFiles.putAll(data.l10nArchiveFiles);    archiveFiles.putAll(files);    if (directory != null) {      archive=new SwcDirectoryArchive(FileUtil.getCanonicalPath(directory));      SwcAPI.exportSwc(archive,archiveFiles,this.stylesheets,(LinkerConfiguration)config,(SwcMovie)data.movie,new ArrayList<SwcComponent>(data.nsComponents),data.swcCache,data.rbFiles);    }    long size=0;    ByteArrayOutputStream baos=null;    String path=null;    if (output != null) {      path=FileUtil.getCanonicalPath(output);    }    if (out != null) {      baos=new ByteArrayOutputStream();      archive=new SwcLazyReadArchive(baos,path);    } else     if (output != null) {      archive=new SwcLazyReadArchive(path);    }    SwcAPI.exportSwc(archive,archiveFiles,this.stylesheets,(LinkerConfiguration)config,(SwcMovie)data.movie,new ArrayList<SwcComponent>(data.nsComponents),data.swcCache,data.rbFiles);    if (out != null) {      ByteArrayInputStream in=new ByteArrayInputStream(baos.toByteArray());      FileUtil.streamOutput(in,out);      size=baos.size();    } else     if (output != null) {      size=output.length();    }    if (hasChanged && temp != null) {      data.movie=temp;    }    return size;  } catch (  LinkerException ex) {    assert ThreadLocalToolkit.errorCount() > 0;    return 0;  }catch (  SwcException ex) {    if (Trace.error) {      ex.printStackTrace();    }    assert ThreadLocalToolkit.errorCount() > 0;    return 0;  }catch (  Throwable t) {    if (Trace.error) {      t.printStackTrace();    }    ThreadLocalToolkit.logError(t.getLocalizedMessage());    return 0;  } finally {    OEMUtil.clean();  }}  }
class C{  boolean readFile(final boolean supportLinearized,final InputStream is,final String rawFileName,final String password) throws PdfException {  objectStoreRef.setFileToDeleteOnFlush(ObjectStore.temp_dir + rawFileName);  objectStoreRef.setFileToDeleteOnFlush(rawFileName);  res.flush();  res.flushObjects();  if (password == null) {    currentPdfFile=new PdfObjectReader();  } else {    currentPdfFile=new PdfObjectReader(password);  }  if (is != null) {    try {      final File tempURLFile;      if (rawFileName.startsWith("inputstream")) {        tempURLFile=new File(ObjectStore.temp_dir + rawFileName);        filename=tempURLFile.getAbsolutePath();      } else {        tempURLFile=ObjectStore.createTempFile(rawFileName);      }      objectStoreRef.storeFileName(tempURLFile.getName().substring(0,tempURLFile.getName().lastIndexOf('.')));      if (supportLinearized) {        final byte[] linearBytes=linearParser.readLinearData(currentPdfFile,tempURLFile,is,this);        if (linearBytes != null) {          currentPdfFile.openPdfFile(linearBytes);          openPdfFile();          if (pageCount < 2) {            options.setDisplayView(Display.SINGLE_PAGE);          } else {            options.setDisplayView(options.getPageMode());          }          linearParser.linearizedBackgroundReaderer.start();          return true;        }      } else {        currentPdfFile.openPdfFile(is);        openPdfFile();        if (pageCount < 2) {          options.setDisplayView(Display.SINGLE_PAGE);        } else {          options.setDisplayView(options.getPageMode());        }      }      if (supportLinearized) {        openPdfFile(tempURLFile.getAbsolutePath());        objectStoreRef.storeFileName(tempURLFile.getName().substring(0,tempURLFile.getName().lastIndexOf('.')));      }    } catch (    final IOException e) {      LogWriter.writeLog("[PDF] Exception " + e + " opening URL ");    }  }  return false;}  }
class C{  public T caseConstraint_(Constraint_ object){  return null;}  }
class C{  public double distance(final Double2D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static void awaitTermination(StatelessService service,ExecutorService executor){  try {    if (!executor.awaitTermination(EXECUTOR_SHUTDOWN_INTERVAL_MINUTES,TimeUnit.MINUTES)) {      service.logWarning("Executor service can't be shutdown for Azure. Trying to shutdown now...");      executor.shutdownNow();    }    service.logFine("Executor service shutdown for Azure");  } catch (  InterruptedException e) {    service.logSevere(e);    Thread.currentThread().interrupt();  }catch (  Exception e) {    service.logSevere(e);  }}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static ActionListener remove(ActionListener l,ActionListener oldl){  return (ActionListener)removeInternal(l,oldl);}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now " + "\"stopped\")");}  }
class C{  @PreAuthorize("hasRole('ROLE_DOWNLOAD')") @Transactional(readOnly=false,propagation=Propagation.REQUIRED) public void deleteCartOfUser(Long u_id){  ProductCart cart=getCartOfUser(u_id);  if (cart != null)   productCartDao.delete(cart);}  }
class C{  public XPathException(String message,Object styleNode){  super(message);  m_styleNode=styleNode;}  }
class C{  void paintUnbuffered(Graphics2D g,Rectangle2D clip){  if (g == null)   return;  g.setRenderingHints(unbufferedHints);  if (isClipping())   g.setClip(clip);  if (clip.getWidth() != 0 && clip.getHeight() != 0) {    if (backdrop != null) {      g.setPaint(backdrop);      g.fillRect((int)clip.getX(),(int)clip.getY(),(int)clip.getWidth(),(int)clip.getHeight());    }    Iterator iter=portrayals.iterator();    while (iter.hasNext()) {      FieldPortrayal2DHolder p=(FieldPortrayal2DHolder)(iter.next());      if (p.visible) {        int buf=p.portrayal.getBuffering();        p.portrayal.setBuffering(optionPane.buffering);        g.setClip(g.getClip());        p.portrayal.draw(p.portrayal.getField(),g,getDrawInfo2D(p,clip));        p.portrayal.setBuffering(buf);      }    }  }}  }
class C{  public void patch_splitMax(LinkedList<Patch> patches){  short patch_size=Match_MaxBits;  String precontext, postcontext;  Patch patch;  int start1, start2;  boolean empty;  Operation diff_type;  String diff_text;  ListIterator<Patch> pointer=patches.listIterator();  Patch bigpatch=pointer.hasNext() ? pointer.next() : null;  while (bigpatch != null) {    if (bigpatch.length1 <= Match_MaxBits) {      bigpatch=pointer.hasNext() ? pointer.next() : null;      continue;    }    pointer.remove();    start1=bigpatch.start1;    start2=bigpatch.start2;    precontext="";    while (!bigpatch.diffs.isEmpty()) {      patch=new Patch();      empty=true;      patch.start1=start1 - precontext.length();      patch.start2=start2 - precontext.length();      if (precontext.length() != 0) {        patch.length1=patch.length2=precontext.length();        patch.diffs.add(new Diff(Operation.EQUAL,precontext));      }      while (!bigpatch.diffs.isEmpty() && patch.length1 < patch_size - Patch_Margin) {        diff_type=bigpatch.diffs.getFirst().operation;        diff_text=bigpatch.diffs.getFirst().text;        if (diff_type == Operation.INSERT) {          patch.length2+=diff_text.length();          start2+=diff_text.length();          patch.diffs.addLast(bigpatch.diffs.removeFirst());          empty=false;        } else         if (diff_type == Operation.DELETE && patch.diffs.size() == 1 && patch.diffs.getFirst().operation == Operation.EQUAL && diff_text.length() > 2 * patch_size) {          patch.length1+=diff_text.length();          start1+=diff_text.length();          empty=false;          patch.diffs.add(new Diff(diff_type,diff_text));          bigpatch.diffs.removeFirst();        } else {          diff_text=diff_text.substring(0,Math.min(diff_text.length(),patch_size - patch.length1 - Patch_Margin));          patch.length1+=diff_text.length();          start1+=diff_text.length();          if (diff_type == Operation.EQUAL) {            patch.length2+=diff_text.length();            start2+=diff_text.length();          } else {            empty=false;          }          patch.diffs.add(new Diff(diff_type,diff_text));          if (diff_text.equals(bigpatch.diffs.getFirst().text)) {            bigpatch.diffs.removeFirst();          } else {            bigpatch.diffs.getFirst().text=bigpatch.diffs.getFirst().text.substring(diff_text.length());          }        }      }      precontext=diff_text2(patch.diffs);      precontext=precontext.substring(Math.max(0,precontext.length() - Patch_Margin));      if (diff_text1(bigpatch.diffs).length() > Patch_Margin) {        postcontext=diff_text1(bigpatch.diffs).substring(0,Patch_Margin);      } else {        postcontext=diff_text1(bigpatch.diffs);      }      if (postcontext.length() != 0) {        patch.length1+=postcontext.length();        patch.length2+=postcontext.length();        if (!patch.diffs.isEmpty() && patch.diffs.getLast().operation == Operation.EQUAL) {          patch.diffs.getLast().text+=postcontext;        } else {          patch.diffs.add(new Diff(Operation.EQUAL,postcontext));        }      }      if (!empty) {        pointer.add(patch);      }    }    bigpatch=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  protected BasePeriod(ReadableInstant startInstant,ReadableDuration duration,PeriodType type){  super();  type=checkPeriodType(type);  long startMillis=DateTimeUtils.getInstantMillis(startInstant);  long durationMillis=DateTimeUtils.getDurationMillis(duration);  long endMillis=FieldUtils.safeAdd(startMillis,durationMillis);  Chronology chrono=DateTimeUtils.getInstantChronology(startInstant);  iType=type;  iValues=chrono.get(this,startMillis,endMillis);}  }
class C{  public int findPrevious(){  if (findString.length() == 0 || startIndex < findString.length() - 1) {    return -1;  }  try {    int nextMatch=matchLowerCase.length - 1;    Segment text=new Segment();    text.setPartialReturn(false);    document.getText(0,startIndex + 1,text);    char previous=text.last();    for (text.last(); previous != Segment.DONE; previous=text.previous()) {      char current=text.current();      if (current == matchUpperCase[nextMatch] || current == matchLowerCase[nextMatch]) {        nextMatch--;        if (nextMatch == -1) {          int foundIndex=text.getIndex() - text.getBeginIndex();          if (matchType == MatchType.CONTAINS) {            return foundIndex;          } else           if (matchType == MatchType.STARTS_WITH) {            if (!isWordChar(foundIndex - 1)) {              return foundIndex;            }          } else           if (matchType == MatchType.FULL_WORD) {            if (!isWordChar(foundIndex - 1) && !isWordChar(foundIndex + matchLowerCase.length)) {              return foundIndex;            }          }          nextMatch=matchLowerCase.length - 1;        }      } else {        nextMatch=matchLowerCase.length - 1;      }    }    return -1;  } catch (  BadLocationException e) {    throw new IndexOutOfBoundsException();  }}  }
class C{  @Override public void createControl(Composite parent){  boolean containerIdPresent=false;  GridLayout gridLayout=new GridLayout();  GridData gridData=new GridData();  gridData.grabExcessHorizontalSpace=true;  gridData.horizontalAlignment=SWT.FILL;  Composite container=new Composite(parent,SWT.NONE);  container.setLayout(gridLayout);  container.setLayoutData(gridData);  PlatformUI.getWorkbench().getHelpSystem().setHelp(parent,"com.microsoftopentechnologies.acsfilter.ui." + "acs_config_dialog");  gridLayout=new GridLayout();  gridData=new GridData();  gridData.grabExcessHorizontalSpace=true;  gridData.horizontalAlignment=SWT.FILL;  gridLayout.numColumns=2;  Composite verContainer=new Composite(container,SWT.NONE);  verContainer.setLayout(gridLayout);  verContainer.setLayoutData(gridData);  Label lblVersion=new Label(verContainer,SWT.LEFT);  gridData=new GridData();  lblVersion.setText(Messages.lblVersion);  lblVersion.setLayoutData(gridData);  combo=new Combo(verContainer,SWT.READ_ONLY | SWT.LEFT);  gridData=new GridData();  gridData.grabExcessHorizontalSpace=true;  gridData.horizontalIndent=10;  gridData.horizontalAlignment=SWT.FILL;  combo.setLayoutData(gridData);  combo.addSelectionListener(new ComboSelectionListener());  Bundle[] bundles=Platform.getBundles(Messages.sdkID,null);  if (bundles == null || bundles.length == 0) {    setErrorMessage(Messages.libNotAvail);    finishVal=false;  } else {    try {      populateComboBox(bundles);      Bundle bundle=bundles[combo.getSelectionIndex()];      if (bundle == null) {        finishVal=false;        setErrorMessage(Messages.verNotAvail);      } else {        URL url=FileLocator.find(bundle,new Path(Messages.sdkJar),null);        if (url == null) {          finishVal=false;          setErrorMessage(Messages.verNotAvail);        } else {          url=FileLocator.resolve(url);          File loc=new File(url.getPath());          libLocation=loc.getAbsolutePath();        }      }    } catch (    Exception e) {      setErrorMessage(Messages.verNotAvail);      finishVal=false;    }  }  lblLoc=new Label(verContainer,SWT.LEFT);  gridData=new GridData();  gridData.grabExcessHorizontalSpace=true;  gridData.horizontalAlignment=SWT.FILL;  lblLoc.setLayoutData(gridData);  lblLoc.setText(Messages.lblLocation);  location=new Label(verContainer,SWT.WRAP | SWT.LEFT);  gridData=new GridData();  gridData.grabExcessHorizontalSpace=true;  gridData.horizontalIndent=10;  gridData.widthHint=400;  gridData.horizontalAlignment=SWT.FILL;  location.setLayoutData(gridData);  location.setText(libLocation);  createDepCheckBox(container);  createACSComponent(container);  createRealmComponent(container);  createCertComponent(container);  try {    IProject proj=ACSFilterUtil.getSelectedProject();    if (!(proj.hasNature(Messages.emfNtr) && proj.hasNature(Messages.mdlCrNtr) && proj.hasNature(Messages.fctNtr)&& proj.hasNature(Messages.javaNtr)&& proj.hasNature(Messages.jsNtr))) {      setErrorMessage(Messages.acsInvProjMsg);      disableAll();      setPageComplete(false);    } else {      if (proj.hasNature(Messages.natMaven)) {        xmlPath=Messages.webxmlPathMaven;        depDirLoc=Messages.depDirLocMaven;        certificateLocation=Messages.depDirLocMaven;      } else {        xmlPath=Messages.xmlPath;        depDirLoc=Messages.depDirLoc;        certificateLocation=Messages.depDirLoc;      }    }  } catch (  CoreException e) {    finishVal=false;    setErrorMessage(Messages.acsInvProjMsg);  }  if (isEdit()) {    try {      IJavaProject proj1=JavaCore.create(ACSFilterUtil.getSelectedProject());      for (int i=0; i < proj1.getRawClasspath().length; i++) {        if (proj1.getRawClasspath()[i].toString().contains(Messages.sdkContainer)) {          containerIdPresent=true;          for (int j=0; j < proj1.getRawClasspath()[i].getExtraAttributes().length; j++) {            if (proj1.getRawClasspath()[i].getExtraAttributes()[j].getName().equalsIgnoreCase(Messages.jstDep)) {              depCheck.setSelection(true);              break;            }            depCheck.setSelection(false);          }          if (proj1.getRawClasspath()[i].getExtraAttributes().length == 0) {            depCheck.setSelection(false);          }        }      }      if (!containerIdPresent) {        depCheck.setSelection(Activator.geteploymentAssemblyState());      }      ACSFilterHandler editHandler=new ACSFilterHandler(ACSFilterUtil.getSelectedProject().getFile(xmlPath).getLocation().toOSString());      paramMap=editHandler.getAcsFilterParams();      acsTxt.setText(paramMap.get(Messages.acsAttr));      relTxt.setText(paramMap.get(Messages.relAttr));      if (paramMap.get(Messages.certAttr) != null) {        certTxt.setText(paramMap.get(Messages.certAttr));        certInfoTxt.setText(getCertInfo(certTxt.getText()));      } else {        certInfoTxt.setText(getEmbeddedCertInfo());        embedCertCheck.setSelection(true);      }      requiresHttpsCheck.setSelection(!Boolean.valueOf(paramMap.get(Messages.allowHTTPAttr)));    } catch (    Exception e) {      Activator.getDefault().log(e.getMessage(),e);    }  } else {    depCheck.setSelection(true);  }  setControl(container);}  }
class C{  public DoubleMatrix2D solve(DoubleMatrix2D B){  DoubleMatrix2D X=B.copy();  quick.solve(X);  return X;}  }
class C{  public void paste(){  invokeAction(TransferHandler.getPasteAction());}  }
class C{  public static <T>SerializableComparator<Pair<?,T>> bySecondOfPair(Comparator<? super T> comparator){  return new BySecondOfPairComparator<>(comparator);}  }
class C{  @SuppressWarnings({"PMD.NcssMethodCount","PMD.CollapsibleIfStatements"}) public static HeaderPartitionOP1A checkOperationalPattern1ACompliance(@Nonnull HeaderPartition headerPartition,@Nonnull IMFErrorLogger imfErrorLogger){  int previousNumberOfErrors=imfErrorLogger.getErrors().size();  Preface preface=headerPartition.getPreface();  String trackFileID_Prefix="";  if (preface != null) {    GenericPackage genericPackage=preface.getContentStorage().getEssenceContainerDataList().get(0).getLinkedPackage();    SourcePackage filePackage;    filePackage=(SourcePackage)genericPackage;    UUID packageID=filePackage.getPackageMaterialNumberasUUID();    trackFileID_Prefix=String.format("TrackFile ID : %s - ",packageID.toString());  }  if (preface == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Preface does not exist in the header partition, which is invalid."));  } else {    byte[] bytes=preface.getOperationalPattern().getULAsBytes();    for (int i=0; i < bytes.length; i++) {      if ((MXFOperationalPattern1A.OPERATIONAL_PATTERN1A_KEY_MASK[i] != 0) && (MXFOperationalPattern1A.OPERATIONAL_PATTERN1A_KEY[i] != bytes[i])) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Operational Pattern field in preface = 0x%x at position (zero-indexed) = %d, is different from expected value = 0x%x",bytes[i],i,MXFOperationalPattern1A.OPERATIONAL_PATTERN1A_KEY[i]));      }    }    if (preface.getNumberOfEssenceContainerULs() < 1) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Number of EssenceContainer ULs in preface = %d, at least 1 is expected",preface.getNumberOfEssenceContainerULs()));    }  }{    if (headerPartition.getContentStorageList().size() != 1) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Number of Content Storage sets in header partition = %d, is different from 1",headerPartition.getContentStorageList().size()));    }    if (preface != null) {      ContentStorage contentStorage=preface.getContentStorage();      if (contentStorage == null) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("No Content Storage set was found in header partition"));      } else       if (contentStorage.getNumberOfEssenceContainerDataSets() != 1) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Number of EssenceContainerData sets referred by Content Storage = %d, is different from 1",contentStorage.getNumberOfEssenceContainerDataSets()));      }    }  }{    if (headerPartition.getEssenceContainerDataList().size() != 1) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Number of EssenceContainerData sets = %d, is different from 1",headerPartition.getEssenceContainerDataList().size()));    }  }  if (headerPartition.getMaterialPackages().size() != 1) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Number of Material Packages in header partition = %d, is different from 1",headerPartition.getMaterialPackages().size()));  }{    MaterialPackage materialPackage=(MaterialPackage)headerPartition.getMaterialPackages().get(0);    for (    TimelineTrack timelineTrack : materialPackage.getTimelineTracks()) {      Sequence sequence=timelineTrack.getSequence();      if (sequence == null) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("TimelineTrack with instanceUID = %s has no sequence",timelineTrack.getInstanceUID()));      } else       if (!sequence.getMxfDataDefinition().equals(MXFDataDefinition.OTHER)) {        if (sequence.getSourceClips().size() != 1) {          imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Material Package Sequence with UID = %s has %d source clips, exactly one is allowed",sequence.getInstanceUID(),sequence.getSourceClips().size()));        }      }    }    MXFUID referencedSourcePackageUMID=null;    for (    TimelineTrack timelineTrack : materialPackage.getTimelineTracks()) {      Sequence sequence=timelineTrack.getSequence();      if (sequence != null && !sequence.getMxfDataDefinition().equals(MXFDataDefinition.OTHER)) {        MXFUID thisSourcePackageUMID=sequence.getSourceClips().get(0).getSourcePackageID();        if (referencedSourcePackageUMID == null) {          referencedSourcePackageUMID=thisSourcePackageUMID;        } else         if (!referencedSourcePackageUMID.equals(thisSourcePackageUMID)) {          imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("SourceClipUID = %s refers to source package UID = %s different from other source clips that refer to source package UID = %s",sequence.getInstanceUID(),thisSourcePackageUMID,referencedSourcePackageUMID));        }      }    }    if (referencedSourcePackageUMID == null) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Invalid source package UID, perhaps because one or more timelineTrack has no sequence"));    }    if (preface != null) {      ContentStorage contentStorage=preface.getContentStorage();      if (contentStorage == null) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("No Content Storage set was found in header partition"));      } else {        boolean foundReferenceForReferencedSourcePackageUMIDInContentStorage=false;        for (        SourcePackage sourcePackage : contentStorage.getSourcePackageList()) {          if (sourcePackage.getPackageUID().equals(referencedSourcePackageUMID)) {            foundReferenceForReferencedSourcePackageUMIDInContentStorage=true;            break;          }        }        if (!foundReferenceForReferencedSourcePackageUMIDInContentStorage) {          imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Content Storage does not refer to Source Package with packageUID = %s",referencedSourcePackageUMID));        }        MXFUID linkedPackageUID=contentStorage.getEssenceContainerDataList().get(0).getLinkedPackageUID();        if (referencedSourcePackageUMID != null && !linkedPackageUID.equals(referencedSourcePackageUMID)) {          imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Package UID = %s referred by EssenceContainerData set is different from %s which is referred by Material Package",linkedPackageUID,referencedSourcePackageUMID));        }      }    }  }  double sequenceDuration=0.0;{    MaterialPackage materialPackage=(MaterialPackage)headerPartition.getMaterialPackages().get(0);    for (    TimelineTrack timelineTrack : materialPackage.getTimelineTracks()) {      long thisEditRateNumerator=timelineTrack.getEditRateNumerator();      long thisEditRateDenominator=timelineTrack.getEditRateDenominator();      if (thisEditRateNumerator == 0) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Timeline Track %s has invalid edit rate : numerator = %d, denominator = %d",timelineTrack.getInstanceUID(),thisEditRateNumerator,thisEditRateDenominator));      }      Sequence sequence=timelineTrack.getSequence();      if (sequence != null && !sequence.getMxfDataDefinition().equals(MXFDataDefinition.OTHER)) {        double thisSequenceDuration=((double)sequence.getDuration() * (double)thisEditRateDenominator) / (double)thisEditRateNumerator;        if (Math.abs(sequenceDuration) < MXFOperationalPattern1A.EPSILON) {          sequenceDuration=thisSequenceDuration;        } else         if (Math.abs(sequenceDuration - thisSequenceDuration) > MXFOperationalPattern1A.TOLERANCE) {          imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Material Package SequenceUID = %s is associated with duration = %f, which is different from expected value %f",sequence.getInstanceUID(),thisSequenceDuration,sequenceDuration));        }      }    }    if (preface != null && preface.getContentStorage() != null) {      SourcePackage filePackage=(SourcePackage)preface.getContentStorage().getEssenceContainerDataList().get(0).getLinkedPackage();      for (      TimelineTrack timelineTrack : filePackage.getTimelineTracks()) {        long thisEditRateNumerator=timelineTrack.getEditRateNumerator();        long thisEditRateDenominator=timelineTrack.getEditRateDenominator();        if (thisEditRateNumerator == 0) {          imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("Timeline Track %s has invalid edit rate : numerator = %d, denominator = %d",timelineTrack.getInstanceUID(),thisEditRateNumerator,thisEditRateDenominator));        }        Sequence sequence=timelineTrack.getSequence();        if (sequence != null && !sequence.getMxfDataDefinition().equals(MXFDataDefinition.OTHER)) {          double thisSequenceDuration=((double)sequence.getDuration() * (double)thisEditRateDenominator) / (double)thisEditRateNumerator;          if (Math.abs(sequenceDuration) < MXFOperationalPattern1A.EPSILON) {            sequenceDuration=thisSequenceDuration;          } else           if (Math.abs(sequenceDuration - thisSequenceDuration) > MXFOperationalPattern1A.TOLERANCE) {            imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,MXFOperationalPattern1A.OP1A_EXCEPTION_PREFIX + trackFileID_Prefix + String.format("File Package SequenceUID = %s is associated with duration = %f, which is different from expected value %f",sequence.getInstanceUID(),thisSequenceDuration,sequenceDuration));          }        }      }    }  }  if (imfErrorLogger.hasFatalErrors(previousNumberOfErrors,imfErrorLogger.getNumberOfErrors())) {    throw new MXFException(String.format("Found fatal errors in the IMFTrackFile that violate IMF OP1A compliance"),imfErrorLogger);  }  return new HeaderPartitionOP1A(headerPartition);}  }
class C{  public LocalReactionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void doExecute(JobExecutionContext context){  VeriniceContext.setState(NotificationJob.state);  boolean dummyAuthAdded=false;  SecurityContext ctx=SecurityContextHolder.getContext();  try {    if (ctx.getAuthentication() == null) {      ctx.setAuthentication(authentication);      dummyAuthAdded=true;    }    sendNotification(context);  }  finally {    if (dummyAuthAdded) {      ctx.setAuthentication(null);    }  }}  }
class C{  public static String toBundleLine(final String bundleId,final String bundleLineId){  return '@' + bundleId + '.'+ bundleLineId;}  }
class C{  public boolean textToSpeech(String text){  boolean result=false;  if (Raptor.getInstance().getPreferences().getBoolean(PreferenceKeys.APP_SOUND_ENABLED)) {    if (speech == null && Raptor.getInstance().getPreferences().contains(PreferenceKeys.SPEECH_PROCESS_NAME)) {      initSpeech();    }    if (speech != null) {      speech.speak(text);      result=true;      if (LOG.isDebugEnabled()) {        LOG.debug("Spoke " + text);      }    }  }  return result;}  }
class C{  @Override protected Object normalizeProperty(Object propertyValue){  return String.valueOf(propertyValue);}  }
class C{  private void clientServerMessage() throws Exception {  Ignite ignite=grid(CLIENT_NODE_IDX);  ClusterGroup grp=ignite.cluster().forServers();  assert grp.nodes().size() > 0;  registerListenerAndSendMessages(ignite,grp);}  }
class C{  public int size(){  return points.size();}  }
class C{  Segment(Segment<V> old,int len){  this(old.maxMemory,old.stackMoveDistance,len,old.nonResidentQueueSize);  hits=old.hits;  misses=old.misses;  Entry<V> s=old.stack.stackPrev;  while (s != old.stack) {    Entry<V> e=copy(s);    addToMap(e);    addToStack(e);    s=s.stackPrev;  }  s=old.queue.queuePrev;  while (s != old.queue) {    Entry<V> e=find(s.key,getHash(s.key));    if (e == null) {      e=copy(s);      addToMap(e);    }    addToQueue(queue,e);    s=s.queuePrev;  }  s=old.queue2.queuePrev;  while (s != old.queue2) {    Entry<V> e=find(s.key,getHash(s.key));    if (e == null) {      e=copy(s);      addToMap(e);    }    addToQueue(queue2,e);    s=s.queuePrev;  }}  }
class C{  public void addMoney(Money money){  getMoney().add(money);}  }
class C{  protected void handleSpecialSubstitution(String replace,String replaceWith,int startPos,String description){  if (replace.equals("<ignore>")) {    if (replaceWith.charAt(0) == '(') {      error("Ignore group can't be enclosed in (",startPos,description);    }    ignoreChars=CharSet.parseString(replaceWith);  }}  }
class C{  public ElsaMaker registerClasses(Class... classes){  for (  Class clazz : classes)   this.classes.add(clazz);  return this;}  }
class C{  public Matrix4d translationRotateScale(double tx,double ty,double tz,double qx,double qy,double qz,double qw,double scale){  return translationRotateScale(tx,ty,tz,qx,qy,qz,qw,scale,scale,scale);}  }
class C{  public UF4(){  this(30);}  }
class C{  private boolean isSimilarSignature(Method possiblyMatchingMethod,String desiredMethodName,Class<?>[] desiredParamTypes){  return possiblyMatchingMethod.getName().equals(desiredMethodName) && match(possiblyMatchingMethod.getParameterTypes(),desiredParamTypes);}  }
class C{  public RestRequest(String url,RequestMethod requestMethod){  super(url,requestMethod);}  }
class C{  public void finish() throws IOException {  closeEntry();  cdOffset=new ZipLong(written);  for (int i=0; i < entries.size(); i++) {    writeCentralFileHeader(entries.elementAt(i));  }  cdLength=new ZipLong(written - cdOffset.getValue());  writeCentralDirectoryEnd();  offsets.clear();  entries.removeAllElements();}  }
class C{  public ShoppingCartItem findCartItem(String productId,Map<String,GenericValue> features,Map<String,Object> attributes,String prodCatalogId,BigDecimal selectedAmount){  for (int i=0; i < this.cartLines.size(); i++) {    ShoppingCartItem cartItem=cartLines.get(i);    if (cartItem.equals(productId,features,attributes,prodCatalogId,selectedAmount)) {      return cartItem;    }  }  return null;}  }
class C{  @Override public void process(WatchedEvent event){  if (Event.EventType.None == event.getType() && Event.KeeperState.Expired == event.getState()) {    Set<String> keySet=new HashSet<String>(listeners.keySet());    for (    String logSegmentsPath : keySet) {      scheduleTask(logSegmentsPath,new ReadLogSegmentsTask(logSegmentsPath,this),0L);    }    return;  }  String path=event.getPath();  if (null == path) {    return;  }switch (event.getType()) {case NodeDeleted:    listeners.remove(path);  break;case NodeChildrenChanged:new ReadLogSegmentsTask(path,this).run();break;default :break;}}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    throw new IllegalArgumentException("Please supply one argument, file name of the validated monitoring parameters xml.");  }  new MonitoringParametersSchemaValidator().validateFile(args[0]);}  }
class C{  @Dimension(unit=Dimension.PX) public static float dpToPx(@Dimension(unit=Dimension.DP) float dp){  return dp * getContext().getResources().getDisplayMetrics().density;}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  m_inCData=false;}  }
class C{  public void updateCallgraphSettings(final ZyGraphViewSettings settings){  updateGraphSettings(callGraphSettings,settings);  callGraphSettings.setMultipleEdgesAsOne(settings.getEdgeSettings().getDisplayMultipleEdgesAsOne());}  }
class C{  public void edit(NewArray a) throws CannotCompileException {}  }
class C{  private int parseEncryptionContext(final byte[] b,final int off) throws ParseException {  final int len=b.length - off;  if (len >= encryptionContextLen_) {    encryptionContext_=Arrays.copyOfRange(b,off,off + encryptionContextLen_);    return encryptionContextLen_;  } else {    throw new ParseException("Not enough bytes to parse encryption context");  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.FIELD_ACCESSOR__DECLARED_NAME:    return basicSetDeclaredName(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public ReentrantContextProviderTL(final int refType){  this(refType,REF_WEAK);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public MultisigSignatureTransaction createSignatureWithMultisig(final Account multisig){  return createSignature(Utils.generateRandomAccount(),multisig,this.innerTransactionHash);}  }
class C{  public void testPutAllMultupleEntitiesAndStreamer(){  doStreamerBatchTest(50,1_000,new Class<?>[]{Integer.class,CacheOffheapBatchIndexingBaseTest.Person.class,Integer.class,CacheOffheapBatchIndexingBaseTest.Organization.class},1,true);}  }
class C{  @VisibleForTesting static void appendLocation(Location location,StringBuilder builder){  builder.append(location.getLongitude()).append(",").append(location.getLatitude());  if (location.hasAltitude()) {    builder.append(",");    builder.append(location.getAltitude());  }}  }
class C{  private static int removeWhiteSpace(char[] data){  if (data == null) {    return 0;  }  int newSize=0;  int len=data.length;  for (int i=0; i < len; i++) {    if (!isWhiteSpace(data[i])) {      data[newSize++]=data[i];    }  }  return newSize;}  }
class C{  public void test_readFully$BII() throws IOException {  byte[] buf=new byte[10];  oos.writeBytes("HelloWorld");  oos.close();  ois=new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));  ois.readFully(buf,0,10);  ois.close();  assertEquals("Read incorrect bytes","HelloWorld",new String(buf,0,10,"UTF-8"));}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  XYChart chart=getXYChart(seriesIndex);  chart.drawLegendShape(canvas,renderer,x,y,getChartSeriesIndex(seriesIndex),paint);}  }
class C{  @NoWarning("NP_") static ArrayList<Ideas_2009_05_20> removeDuplicates_FalsePositive(final ArrayList<Ideas_2009_05_20> list){  final ArrayList<Ideas_2009_05_20> results=new ArrayList<Ideas_2009_05_20>();  final ArrayList<String> sections=new ArrayList<String>();  while (list.size() > 0) {    final Ideas_2009_05_20 specification=list.remove(0);    final Iterator<Ideas_2009_05_20> iterator=list.iterator();    while (iterator.hasNext()) {      final Ideas_2009_05_20 other=iterator.next();      if (specification.equals(other)) {        final String[] otherSections=other.getSections();        if (null != sections) {          sections.addAll(Arrays.asList(otherSections));        }        iterator.remove();      }    }    final Ideas_2009_05_20 merged=mergeInSections(specification,sections);    results.add(merged);    sections.clear();  }  return results;}  }
class C{  public Zeta(double ro,double pk,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(ro,pk);}  }
class C{  public void addCylinder(float x,float y,float z,float radius,float length,int segments,float baseScale,float topScale,int baseDirection,int textureCircleDiameterW,int textureCircleDiameterH,int textureH){  boolean dirTop=(baseDirection == MR_TOP || baseDirection == MR_BOTTOM);  boolean dirSide=(baseDirection == MR_RIGHT || baseDirection == MR_LEFT);  boolean dirFront=(baseDirection == MR_FRONT || baseDirection == MR_BACK);  boolean dirMirror=(baseDirection == MR_LEFT || baseDirection == MR_BOTTOM || baseDirection == MR_BACK);  boolean coneBase=(baseScale == 0);  boolean coneTop=(topScale == 0);  if (coneBase && coneTop) {    baseScale=1F;    coneBase=false;  }  PositionTextureVertex[] tempVerts=new PositionTextureVertex[segments * (coneBase || coneTop ? 1 : 2) + 2];  TexturedPolygon[] poly=new TexturedPolygon[segments * (coneBase || coneTop ? 2 : 3)];  float xLength=(dirSide ? length : 0);  float yLength=(dirTop ? length : 0);  float zLength=(dirFront ? length : 0);  float xStart=(dirMirror ? x + xLength : x);  float yStart=(dirMirror ? y + yLength : y);  float zStart=(dirMirror ? z + zLength : z);  float xEnd=(!dirMirror ? x + xLength : x);  float yEnd=(!dirMirror ? y + yLength : y);  float zEnd=(!dirMirror ? z + zLength : z);  tempVerts[0]=new PositionTextureVertex(xStart,yStart,zStart,0,0);  tempVerts[tempVerts.length - 1]=new PositionTextureVertex(xEnd,yEnd,zEnd,0,0);  float xCur=xStart;  float yCur=yStart;  float zCur=zStart;  float sCur=(coneBase ? topScale : baseScale);  for (int repeat=0; repeat < (coneBase || coneTop ? 1 : 2); repeat++) {    for (int index=0; index < segments; index++) {      float xSize=(mirror ^ dirMirror ? -1 : 1) * MathHelper.sin((pi / segments) * index * 2F + pi) * radius* sCur;      float zSize=-MathHelper.cos((pi / segments) * index * 2F + pi) * radius * sCur;      float xPlace=xCur + (!dirSide ? xSize : 0);      float yPlace=yCur + (!dirTop ? zSize : 0);      float zPlace=zCur + (dirSide ? xSize : (dirTop ? zSize : 0));      tempVerts[1 + index + repeat * segments]=new PositionTextureVertex(xPlace,yPlace,zPlace,0,0);    }    xCur=xEnd;    yCur=yEnd;    zCur=zEnd;    sCur=topScale;  }  float uScale=1.0F / textureWidth;  float vScale=1.0F / textureHeight;  float uOffset=uScale / 20.0F;  float vOffset=vScale / 20.0F;  float uCircle=textureCircleDiameterW * uScale;  float vCircle=textureCircleDiameterH * vScale;  float uWidth=(uCircle * 2F - uOffset * 2F) / segments;  float vHeight=textureH * vScale - uOffset * 2f;  float uStart=textureOffsetX * uScale;  float vStart=textureOffsetY * vScale;  PositionTextureVertex[] vert;  for (int index=0; index < segments; index++) {    int index2=(index + 1) % segments;    float uSize=MathHelper.sin((pi / segments) * index * 2F + (!dirTop ? 0 : pi)) * (0.5F * uCircle - 2F * uOffset);    float vSize=MathHelper.cos((pi / segments) * index * 2F + (!dirTop ? 0 : pi)) * (0.5F * vCircle - 2F * vOffset);    float uSize1=MathHelper.sin((pi / segments) * index2 * 2F + (!dirTop ? 0 : pi)) * (0.5F * uCircle - 2F * uOffset);    float vSize1=MathHelper.cos((pi / segments) * index2 * 2F + (!dirTop ? 0 : pi)) * (0.5F * vCircle - 2F * vOffset);    vert=new PositionTextureVertex[3];    vert[0]=tempVerts[0].setTexturePosition(uStart + 0.5F * uCircle,vStart + 0.5F * vCircle);    vert[1]=tempVerts[1 + index2].setTexturePosition(uStart + 0.5F * uCircle + uSize1,vStart + 0.5F * vCircle + vSize1);    vert[2]=tempVerts[1 + index].setTexturePosition(uStart + 0.5F * uCircle + uSize,vStart + 0.5F * vCircle + vSize);    poly[index]=new TexturedPolygon(vert);    if (mirror ^ flip)     poly[index].flipFace();    if (!coneBase && !coneTop) {      vert=new PositionTextureVertex[4];      vert[0]=tempVerts[1 + index].setTexturePosition(uStart + uOffset + uWidth * index,vStart + vOffset + vCircle);      vert[1]=tempVerts[1 + index2].setTexturePosition(uStart + uOffset + uWidth * (index + 1),vStart + vOffset + vCircle);      vert[2]=tempVerts[1 + segments + index2].setTexturePosition(uStart + uOffset + uWidth * (index + 1),vStart + vOffset + vCircle+ vHeight);      vert[3]=tempVerts[1 + segments + index].setTexturePosition(uStart + uOffset + uWidth * index,vStart + vOffset + vCircle+ vHeight);      poly[index + segments]=new TexturedPolygon(vert);      if (mirror ^ flip)       poly[index + segments].flipFace();    }    vert=new PositionTextureVertex[3];    vert[0]=tempVerts[tempVerts.length - 1].setTexturePosition(uStart + 1.5F * uCircle,vStart + 0.5F * vCircle);    vert[1]=tempVerts[tempVerts.length - 2 - index].setTexturePosition(uStart + 1.5F * uCircle + uSize1,vStart + 0.5F * vCircle + vSize1);    vert[2]=tempVerts[tempVerts.length - (1 + segments) + ((segments - index) % segments)].setTexturePosition(uStart + 1.5F * uCircle + uSize,vStart + 0.5F * vCircle + vSize);    poly[poly.length - segments + index]=new TexturedPolygon(vert);    if (mirror ^ flip)     poly[poly.length - segments + index].flipFace();  }  copyTo(tempVerts,poly);}  }
class C{  public ModifierOperation(final String enumName,final int enumId,final ModifierOperationAction action,final UnaryOperator<ModifierValue> onEnd){  super(enumName,enumId);  this.action=action;  this.onEnd=onEnd;}  }
class C{  public static double waitForCompletion(Future<?>[] futures,DoubleDoubleFunction aggr){  int size=futures.length;  Double[] results=new Double[size];  double a=0;  try {    for (int j=0; j < size; j++) {      results[j]=(Double)futures[j].get();    }    a=results[0];    for (int j=1; j < size; j++) {      a=aggr.apply(a,results[j]);    }  } catch (  ExecutionException ex) {    ex.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return a;}  }
class C{  @Override public void mark(int readLimit){  markOffset=offset;}  }
class C{  private void sendRequest(Object request,ContextualFuture future){  if (open && connection.open) {    long requestId=++this.requestId;    futures.put(requestId,future);    connection.handleRequest(requestId,request);  } else {    future.context.executor().execute(null);  }  if (request instanceof ReferenceCounted) {    ((ReferenceCounted<?>)request).release();  }}  }
class C{  public ExtensionAuthorization(){  super();  initialize();}  }
class C{  public synchronized void removeAllElements(){  for (int i=0; i < elementCount; i++) {    elementData[i]=null;  }  modCount++;  elementCount=0;}  }
class C{  private Optional<Collection<MessageReceiver>> checkCancels(Collection<MessageReceiver> collection,Player player){  if (ignoreHandler == null) {    ignoreHandler=permissionRegistry.getService(IgnoreCommand.class);  }  if (ignoreHandler.testSuffix(player,"exempt.chat")) {    return Optional.empty();  }  List<MessageReceiver> list=Lists.newArrayList(collection);  list.removeIf(null);  if (list.size() == collection.size()) {    return Optional.empty();  }  return Optional.of(list);}  }
class C{  public void endElement(String uri,String name,String qName) throws SAXException {  if (!isMessageForMe(_bufferMessage)) {    _bufferMessage=null;    return;  }  if (_bufferMessage != null && name.equalsIgnoreCase("message")) {    if (_bufferMessage.getMessageType().equalsIgnoreCase("update")) {      setUpdateMessage(_bufferMessage);    } else     if (_bufferMessage.getMessageType().equalsIgnoreCase("announcement")) {      addAnnouncement(_bufferMessage);    } else     if (_bufferMessage.getMessageType().equalsIgnoreCase("overlay")) {      addOverlay(_bufferMessage);    }    _bufferMessage=null;  }}  }
class C{  public void putInt32(int i){  ensureCapacity(4);  byte[] b=this.byteBuffer;  b[this.position++]=(byte)(i & 0xff);  b[this.position++]=(byte)(i >>> 8);  b[this.position++]=(byte)(i >>> 16);  b[this.position++]=(byte)(i >>> 24);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:58.841 -0500",hash_original_method="5B0230A7CB9028DEE893C06E012A9969",hash_generated_method="9D4ADA81181CFE7F31BF5887FFE36856") public static boolean deviceHasKey(int keyCode){  int[] codeArray=new int[1];  codeArray[0]=keyCode;  boolean[] ret=deviceHasKeys(codeArray);  return ret[0];}  }
class C{  public static boolean isStrictlyNumeric(CharSequence cs){  if (cs == null || cs.length() == 0) {    return false;  }  for (int i=0; i < cs.length(); i++) {    if (!Character.isDigit(cs.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public void dequantize8x8(double[][] transform){  for (int i=0; i < NJPEG; i++) {    for (int j=0; j < NJPEG; j++) {      transform[i][j]=round(transform[i][j] * this.Quantum[i][j]);    }  }}  }
class C{  public static void w(String tag,String msg){  w(tag,msg,null);}  }
class C{  @Provides @Config("productName") public static String provideProductName(RegistryEnvironment environment){  return "Nomulus";}  }
class C{  public Quarter(int quarter,Year year){  if ((quarter < FIRST_QUARTER) || (quarter > LAST_QUARTER)) {    throw new IllegalArgumentException("Quarter outside valid range.");  }  this.year=(short)year.getYear();  this.quarter=(byte)quarter;  peg(Calendar.getInstance());}  }
class C{  @Override public void send(DatagramPacket p) throws IOException {synchronized (packetsToSend) {    if (closed) {      throw new IOException(RelayedCandidateDatagramSocket.class.getSimpleName() + " has been closed.");    } else {      packetsToSend.add(MultiplexingXXXSocketSupport.clone(p));      if (sendThread == null)       createSendThread(); else       packetsToSend.notifyAll();    }  }}  }
class C{  private Object readResolve(){  return iChronology.monthOfYear();}  }
class C{  @Override public String toString(){  StringBuilder res=new StringBuilder();  for (SpaceEffGraphNode n=firstNode(); n != null; n=n.getNext()) {    HashSet<SpaceEffGraphEdge> visitedNodes=new HashSet<SpaceEffGraphEdge>();    int duplicatedNodes=0;    res.append("\nNode: ").append(n).append("\n");    res.append("In nodes:\n");    for (SpaceEffGraphEdge inEdge=n.firstInEdge(); inEdge != null; inEdge=inEdge.getNextIn()) {      if (visitedNodes.contains(inEdge)) {        duplicatedNodes++;        res.append("(Duplicated edge " + inEdge.toNodeString() + ")");        if (duplicatedNodes > 5) {          break;        }      } else {        visitedNodes.add(inEdge);        res.append(inEdge.getTypeString());        res.append(" ");        res.append(inEdge.fromNode());        res.append("\n");      }    }    res.append("\n");    visitedNodes.clear();    duplicatedNodes=0;    res.append("Out nodes:\n");    for (SpaceEffGraphEdge out=n.firstOutEdge(); out != null; out=out.getNextOut()) {      if (visitedNodes.contains(out)) {        duplicatedNodes++;        res.append("(Duplicated edge " + out.toNodeString() + ")");        if (duplicatedNodes > 5) {          break;        }      } else {        res.append(out.getTypeString());        res.append(" ");        res.append(out.toNode());        res.append("\n");      }    }    if (res.length() > 50000) {      res.append("....(giving up too long)\n");      break;    }  }  return res.toString();}  }
class C{  public void jumpTo(Location location){  if (config == null) {    Log.w(TAG,"Jump to skipped. Map is not initialized properly.");    return;  }  if (!config.getGpsConfig().isMapCalibrated()) {    throw new IllegalStateException("Map is not calibrated.");  }  Point point=new Point();  getGpsConfig().getCalibration().translate(location,point);  point.set((int)(point.x * getScale()),(int)(point.y * getScale()));  jumpTo(point);}  }
class C{  protected void showToast(String message){  Toast.makeText(this,message,Toast.LENGTH_SHORT).show();}  }
class C{  private void buttonPreviousYearActionPerformed(ActionEvent e){  try {    drawCalendar(displayedYearMonth.minusYears(1));  } catch (  Exception ex) {  }}  }
class C{  private void executeUpload(String[] args) throws IOException, ServiceException, InterruptedException {  if (args.length > 1) {    int chunkSize=DEFAULT_CHUNK_SIZE;    List<String> files=Lists.newArrayList();    for (int index=1; index < args.length; index++) {      String arg=args[index];      if (index < args.length - 1) {        files.add(arg);        continue;      }      try {        chunkSize=Integer.parseInt(arg);      } catch (      NumberFormatException nfe) {        files.add(arg);      }    }    uploadFiles(DEFAULT_RESUMABLE_UPLOAD_URL,files,chunkSize);    output.println("Finished upload");  }}  }
class C{  public void expand(int level){  ArrayList<S2CellId> output=new ArrayList<S2CellId>();  long levelLsb=S2CellId.lowestOnBitForLevel(level);  int i=size() - 1;  do {    S2CellId id=cellId(i);    if (id.lowestOnBit() < levelLsb) {      id=id.parent(level);      while (i > 0 && id.contains(cellId(i - 1))) {        --i;      }    }    output.add(id);    id.getAllNeighbors(level,output);  } while (--i >= 0);  initSwap(output);}  }
class C{  private void doDdpOrientation(Graph graph,Node l,Node a,Node b,Node c){  changeFlag=true;  for (  IonIndependenceFacts iif : separations) {    if ((iif.getX().equals(l) && iif.getY().equals(c)) || iif.getY().equals(l) && iif.getX().equals(c)) {      for (      List<Node> condSet : iif.getZ()) {        if (condSet.contains(b)) {          graph.setEndpoint(c,b,Endpoint.TAIL);          discrimGraphs.add(graph);          return;        }      }      break;    }  }  Graph newGraph1=new EdgeListGraph(graph);  newGraph1.setEndpoint(a,b,Endpoint.ARROW);  newGraph1.setEndpoint(c,b,Endpoint.ARROW);  discrimGraphs.add(newGraph1);  Graph newGraph2=new EdgeListGraph(graph);  newGraph2.setEndpoint(c,b,Endpoint.TAIL);  discrimGraphs.add(newGraph2);}  }
class C{  public static boolean isAndroid4(RemoteWebDriver driver){  Preconditions.checkNotNull(driver);  String capabilities=driver.getCapabilities().getCapability("platformVersion").toString();  return capabilities.contains("4");}  }
class C{  public GraphicsNodeKeyEvent(GraphicsNode source,int id,long when,int modifiers,int lockState,int keyCode,char keyChar,int keyLocation){  super(source,id,when,modifiers,lockState);  this.keyCode=keyCode;  this.keyChar=keyChar;  this.keyLocation=keyLocation;}  }
class C{  public void showDialog(){  variable=debuggerPresenter.getSelectedVariable();  view.setValueTitle(constant.changeValueViewExpressionFieldTitle(variable.getName()));  view.setValue(variable.getValue());  view.focusInValueField();  view.selectAllText();  view.setEnableChangeButton(false);  view.showDialog();}  }
class C{  public void tryAndSaveAction(View view){  hideKeyboard();  findViewById(R.id.tryingConfSpinner).setVisibility(View.VISIBLE);  findViewById(R.id.tryConfButton).setVisibility(View.GONE);  final String urlShaarliInput=((EditText)findViewById(R.id.urlShaarliView)).getText().toString();  this.username=((EditText)findViewById(R.id.usernameView)).getText().toString();  this.password=((EditText)findViewById(R.id.passwordView)).getText().toString();  if (((Switch)findViewById(R.id.basicAuthSwitch)).isChecked()) {    this.basicAuthUsername=((EditText)findViewById(R.id.basicUsernameView)).getText().toString();    this.basicAuthPassword=((EditText)findViewById(R.id.basicPasswordView)).getText().toString();  } else {    this.basicAuthUsername="";    this.basicAuthPassword="";  }  this.shortName=((EditText)findViewById(R.id.shortNameView)).getText().toString();  this.isDefaultAccount=((CheckBox)findViewById(R.id.defaultAccountCheck)).isChecked();  this.isValidateCert=!((CheckBox)findViewById(R.id.disableCertValidation)).isChecked();  this.urlShaarli=NetworkManager.toUrl(urlShaarliInput);  ((EditText)findViewById(R.id.urlShaarliView)).setText(this.urlShaarli);  ShaarliAccount accountToTest=new ShaarliAccount();  accountToTest.setUrlShaarli(this.urlShaarli);  accountToTest.setUsername(this.username);  accountToTest.setPassword(this.password);  accountToTest.setValidateCert(this.isValidateCert);  accountToTest.setBasicAuthUsername(this.basicAuthUsername);  accountToTest.setBasicAuthPassword(this.basicAuthPassword);  Intent i=new Intent(this,NetworkService.class);  i.putExtra("action","checkShaarli");  i.putExtra("account",accountToTest);  i.putExtra(NetworkService.EXTRA_MESSENGER,new Messenger(new networkHandler(this)));  startService(i);}  }
class C{  public static String insertParameter(CtClass type,String descriptor){  if (descriptor.charAt(0) != '(')   return descriptor; else   return "(" + of(type) + descriptor.substring(1);}  }
class C{  public static long lowestOneBit(long lng){  return (lng & (-lng));}  }
class C{  private void validateIncomplete(ResultFileReader reader) throws IOException {  Assert.assertTrue(reader.hasNext());  TestUtils.assertEquals(population,reader.next().getPopulation());  Assert.assertFalse(reader.hasNext());  Assert.assertFalse(reader.hasNext());}  }
class C{  private void doSignal(Node first){  do {    if ((firstWaiter=first.nextWaiter) == null)     lastWaiter=null;    first.nextWaiter=null;  } while (!transferForSignal(first) && (first=firstWaiter) != null);}  }
class C{  public static String logRegistryException(TYPE type,BaseAction action){  String msg=action.getText("admin.registration.error.registry");  if (type != null) {    if (type == TYPE.PROXY) {      msg=action.getText("admin.registration.error.proxy");    } else     if (type == TYPE.SITE_DOWN) {      msg=action.getText("admin.registration.error.siteDown");    } else     if (type == TYPE.NO_INTERNET) {      msg=action.getText("admin.registration.error.internetConnection");    } else     if (type == TYPE.BAD_RESPONSE) {      msg=action.getText("admin.registration.error.badResponse");    } else     if (type == TYPE.IO_ERROR) {      msg=action.getText("admin.registration.error.io");    } else     if (type == TYPE.BAD_REQUEST) {      msg="A bad request was issued, please check the syntax of the URL used";    } else     if (type == TYPE.UNKNOWN) {      msg=action.getText("admin.registration.error.unknown");    }  }  return msg;}  }
class C{  private void checkChart(JFreeChart chart){  Plot plot=chart.getPlot();  if (!(plot instanceof PolarPlot)) {    throw new IllegalArgumentException("plot is not a PolarPlot");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Class<?> searchInterface(Class<?> clazz,String interfaceName){  if (clazz == null) {    return null;  }  List<Class<?>> searched=new ArrayList<Class<?>>();  return searchInterface(clazz,interfaceName,searched);}  }
class C{  public List<String> generateModel(String schema,String table,String packageName,boolean annotateSchema,boolean trimStrings){  try {    List<String> models=New.arrayList();    List<TableInspector> tables=getTables(schema,table);    for (    TableInspector t : tables) {      t.read(metaData);      String model=t.generateModel(packageName,annotateSchema,trimStrings);      models.add(model);    }    return models;  } catch (  SQLException s) {    throw new RuntimeException(s);  }}  }
class C{  protected void drawVerticalLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){  double xx=getDomainAxis().valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);  Line2D line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());  g2.setStroke(stroke);  g2.setPaint(paint);  g2.draw(line);}  }
class C{  @Override public DriverTask deleteConsistencyGroup(VolumeConsistencyGroup consistencyGroup){  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_DELETE_CONSISTENCY_GROUP);  return cgHelper.deleteConsistencyGroup(consistencyGroup,task,driverRegistry);}  }
class C{  private Object[] scanBlockScalarIndentation(){  StringBuilder chunks=new StringBuilder();  int maxIndent=0;  Mark endMark=reader.getMark();  while (Constant.LINEBR.has(reader.peek()," \r")) {    if (reader.peek() != ' ') {      chunks.append(scanLineBreak());      endMark=reader.getMark();    } else {      reader.forward();      if (this.reader.getColumn() > maxIndent) {        maxIndent=reader.getColumn();      }    }  }  return new Object[]{chunks.toString(),maxIndent,endMark};}  }
class C{  public static float noise(float x,float y,float z){  float n0, n1, n2, n3;  float s=(x + y + z) * F3;  int i=fastfloor(x + s);  int j=fastfloor(y + s);  int k=fastfloor(z + s);  float t=(i + j + k) * G3;  float X0=i - t;  float Y0=j - t;  float Z0=k - t;  float x0=x - X0;  float y0=y - Y0;  float z0=z - Z0;  int i1, j1, k1;  int i2, j2, k2;  if (x0 >= y0) {    if (y0 >= z0) {      i1=1;      j1=0;      k1=0;      i2=1;      j2=1;      k2=0;    } else     if (x0 >= z0) {      i1=1;      j1=0;      k1=0;      i2=1;      j2=0;      k2=1;    } else {      i1=0;      j1=0;      k1=1;      i2=1;      j2=0;      k2=1;    }  } else {    if (y0 < z0) {      i1=0;      j1=0;      k1=1;      i2=0;      j2=1;      k2=1;    } else     if (x0 < z0) {      i1=0;      j1=1;      k1=0;      i2=0;      j2=1;      k2=1;    } else {      i1=0;      j1=1;      k1=0;      i2=1;      j2=1;      k2=0;    }  }  float x1=x0 - i1 + G3;  float y1=y0 - j1 + G3;  float z1=z0 - k1 + G3;  float x2=x0 - i2 + 2.0f * G3;  float y2=y0 - j2 + 2.0f * G3;  float z2=z0 - k2 + 2.0f * G3;  float x3=x0 - 1.0f + 3.0f * G3;  float y3=y0 - 1.0f + 3.0f * G3;  float z3=z0 - 1.0f + 3.0f * G3;  int ii=i & 255;  int jj=j & 255;  int kk=k & 255;  int gi0=permMod12[ii + perm[jj + perm[kk] & 0xFF] & 0xFF] & 0xFF;  int gi1=permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1] & 0xFF] & 0xFF] & 0xFF;  int gi2=permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2] & 0xFF] & 0xFF] & 0xFF;  int gi3=permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1] & 0xFF] & 0xFF] & 0xFF;  float t0=0.6f - x0 * x0 - y0 * y0 - z0 * z0;  if (t0 < 0.0f)   n0=0.0f; else {    t0*=t0;    n0=t0 * t0 * dot(grad3[gi0],x0,y0,z0);  }  float t1=0.6f - x1 * x1 - y1 * y1 - z1 * z1;  if (t1 < 0.0f)   n1=0.0f; else {    t1*=t1;    n1=t1 * t1 * dot(grad3[gi1],x1,y1,z1);  }  float t2=0.6f - x2 * x2 - y2 * y2 - z2 * z2;  if (t2 < 0.0f)   n2=0.0f; else {    t2*=t2;    n2=t2 * t2 * dot(grad3[gi2],x2,y2,z2);  }  float t3=0.6f - x3 * x3 - y3 * y3 - z3 * z3;  if (t3 < 0.0f)   n3=0.0f; else {    t3*=t3;    n3=t3 * t3 * dot(grad3[gi3],x3,y3,z3);  }  return 32.0f * (n0 + n1 + n2+ n3);}  }
class C{  public String header(){  FacesContext context=FacesContext.getCurrentInstance();  append("header()");  clear();  return (null);}  }
class C{  private void updateAction(){  boolean enabled=false;  if (enableCondition == EnablingCondition.ALLITEMS) {    if (networkPanel.getSelectedModelElements().size() > 0) {      enabled=true;    }  } else   if (enableCondition == EnablingCondition.NEURONS) {    if (networkPanel.getSelectedModelNeurons().size() > 0) {      enabled=true;    }  } else   if (enableCondition == EnablingCondition.SYNAPSES) {    if (networkPanel.getSelectedModelSynapses().size() > 0) {      enabled=true;    }  } else   if (enableCondition == EnablingCondition.SOURCE_NEURONS) {    if (networkPanel.getSourceModelNeurons().size() > 0) {      enabled=true;    }  } else   if (enableCondition == EnablingCondition.SOURCE_AND_TARGET_NEURONS) {    enabled=sourceAndTargetNeuronSelected(networkPanel);  } else   if (enableCondition == EnablingCondition.SOURCE_AND_TARGET_NEURON_GROUPS) {    enabled=sourceAndTargetNeuronGroupsSelected(networkPanel);  }  setEnabled(enabled);}  }
class C{  void jbInit() throws Exception {  lFrom.setText(Msg.getMsg(Env.getCtx(),"From") + ":");  lTo.setText(Msg.getMsg(Env.getCtx(),"To") + ":");  lCc.setText(Msg.getMsg(Env.getCtx(),"Cc") + ":");  lSubject.setText(Msg.getMsg(Env.getCtx(),"Subject") + ":");  lAttachment.setText(Msg.getMsg(Env.getCtx(),"Attachment") + ":");  fFrom.setReadWrite(false);  mainPanel.setLayout(mainLayout);  headerPanel.setLayout(headerLayout);  mainLayout.setHgap(5);  mainLayout.setVgap(5);  fMessage.setPreferredSize(new Dimension(150,150));  getContentPane().add(mainPanel);  mainPanel.add(headerPanel,BorderLayout.NORTH);  headerPanel.add(lFrom,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,10,0,5),0,0));  headerPanel.add(fFrom,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,5,10),0,0));  headerPanel.add(lTo,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,10,0,5),0,0));  headerPanel.add(fUser,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,10),0,0));  headerPanel.add(fTo,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,10),0,0));  headerPanel.add(lCc,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,10,0,5),0,0));  headerPanel.add(fCcUser,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,10),0,0));  headerPanel.add(fCc,new GridBagConstraints(1,4,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,0,10),0,0));  headerPanel.add(lSubject,new GridBagConstraints(0,6,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,10,0,5),0,0));  headerPanel.add(fSubject,new GridBagConstraints(1,6,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,10),1,0));  headerPanel.add(lAttachment,new GridBagConstraints(0,7,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,10,0,5),0,0));  headerPanel.add(fAttachment,new GridBagConstraints(1,7,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,0,0,10),1,0));  mainPanel.add(fMessage,BorderLayout.CENTER);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  this.getContentPane().add(statusBar,BorderLayout.SOUTH);  confirmPanel.addActionListener(this);  statusBar.setStatusDB(null);}  }
class C{  public static void handleCrashesOnThisThread(){  Thread.currentThread().setUncaughtExceptionHandler(null);}  }
class C{  public int interpretation(int elemIndex){  if (((elemIndex * 3) + 2) >= elemInfo.length) {    return -1;  }  return elemInfo[(elemIndex * 3) + 2];}  }
class C{  private boolean isSetterForField(ExecutableElement setter,VariableElement field){  return setter.getParameters() != null && setter.getParameters().size() == 1 && setter.getParameters().get(0).asType().equals(field.asType());}  }
class C{  public EventStoreBuilder operationTimeoutCheckInterval(Duration duration){  settingsBuilder.operationTimeoutCheckInterval(duration);  return this;}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  throw new UnsupportedOperationException();}  }
class C{  public DialSurfaceView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  init();}  }
class C{  public void removeAttributes(){  for (  Constituent cons : constituents)   cons.removeAllAttributes();}  }
class C{  @Deprecated public String toLocaleString(){  DateFormat formatter=DateFormat.getDateTimeInstance();  return formatter.format(this);}  }
class C{  public void evaluateCrossValidation(List<RegressionDataSet> lcds){  List<RegressionDataSet> trainCombinations=new ArrayList<RegressionDataSet>(lcds.size());  for (int i=0; i < lcds.size(); i++)   trainCombinations.add(RegressionDataSet.comineAllBut(lcds,i));  evaluateCrossValidation(lcds,trainCombinations);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:20.829 -0500",hash_original_method="5D3B579AF503CA96D628AD6AA8EE2361",hash_generated_method="B942B2C2008C115A0C3F98637DFBC16D") public Node adoptNode(Node node){  if (!(node instanceof NodeImpl)) {    return null;  }  NodeImpl nodeImpl=(NodeImpl)node;switch (nodeImpl.getNodeType()) {case Node.ATTRIBUTE_NODE:    AttrImpl attr=(AttrImpl)node;  if (attr.ownerElement != null) {    attr.ownerElement.removeAttributeNode(attr);  }break;case Node.DOCUMENT_FRAGMENT_NODE:case Node.ENTITY_REFERENCE_NODE:case Node.PROCESSING_INSTRUCTION_NODE:case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:case Node.COMMENT_NODE:case Node.ELEMENT_NODE:break;case Node.DOCUMENT_NODE:case Node.DOCUMENT_TYPE_NODE:case Node.ENTITY_NODE:case Node.NOTATION_NODE:throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Cannot adopt nodes of type " + nodeImpl.getNodeType());default :throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());}Node parent=nodeImpl.getParentNode();if (parent != null) {parent.removeChild(nodeImpl);}changeDocumentToThis(nodeImpl);notifyUserDataHandlers(UserDataHandler.NODE_ADOPTED,node,null);return nodeImpl;}  }
class C{  private static void echoWithQuitCommand(TcpServer<ByteBuf,ByteBuf> transport){  ReactorTcpServer.create(transport).start(null);}  }
class C{  public SWFWriter(int width,int height){  this.width=width;  this.height=height;}  }
class C{  public String exceptionMessage(){  return thrownException().getMessage();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.INTERFACE_MEMBER_DECLARATION___CONSTANT_DECLARATION_1:    return constantDeclaration_1 != null && !constantDeclaration_1.isEmpty();case UmplePackage.INTERFACE_MEMBER_DECLARATION___ABSTRACT_METHOD_DECLARATION_1:  return abstractMethodDeclaration_1 != null && !abstractMethodDeclaration_1.isEmpty();case UmplePackage.INTERFACE_MEMBER_DECLARATION___POSITION_1:return position_1 != null && !position_1.isEmpty();case UmplePackage.INTERFACE_MEMBER_DECLARATION___DISPLAY_COLOR_1:return displayColor_1 != null && !displayColor_1.isEmpty();case UmplePackage.INTERFACE_MEMBER_DECLARATION___IS_A1:return isA_1 != null && !isA_1.isEmpty();case UmplePackage.INTERFACE_MEMBER_DECLARATION___EXTRA_CODE_1:return extraCode_1 != null && !extraCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @SuppressWarnings("unused") private boolean search(LDAPPerson person){  try {    DirContext ctx=getDirContext();    String base="ou=users,ou=system";    SearchControls sc=new SearchControls();    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);    String filter="(&(objectclass=person)(uid=" + person.getName() + "))";    NamingEnumeration<SearchResult> results=ctx.search(base,filter,sc);    while (results.hasMore()) {      SearchResult sr=(SearchResult)results.next();      Attributes attrs=sr.getAttributes();      Attribute attr=attrs.get("uid");      if (attr != null) {      }    }    ctx.close();    return true;  } catch (  Exception e) {    System.out.println("LDAP error search: ");    e.printStackTrace();    return false;  }}  }
class C{  private void constraints_42_45_46_AbstractMember(MemberMatrix mm,Map<ParameterizedTypeRef,MemberList<TMember>> nonAccessibleAbstractMembersBySuperTypeRef){  N4ClassifierDefinition classifierDefinition=getCurrentClassifierDefinition();  TClassifier classifier=getCurrentClassifier();  TModule contextModule=EcoreUtil2.getContainerOfType(classifier,TModule.class);  for (SourceAwareIterator iter=mm.allMembers(); iter.hasNext(); ) {    TMember m=iter.next();    if (!iter.isOwnedMember() && m.isAbstract()) {      if (!memberVisibilityChecker.isVisibleWhenOverriding(contextModule,classifier,classifier,m)) {        Iterable<ParameterizedTypeRef> superTypeRefs=FindClassifierInHierarchyUtils.findSuperTypesWithMember(classifierDefinition,m);        for (        ParameterizedTypeRef superTypeRef : superTypeRefs) {          MemberList<TMember> nonAccessible=nonAccessibleAbstractMembersBySuperTypeRef.get(superTypeRef);          if (nonAccessible == null) {            nonAccessible=new MemberList<>();            nonAccessibleAbstractMembersBySuperTypeRef.put(superTypeRef,nonAccessible);          }          nonAccessible.add(m);        }      }    }  }}  }
class C{  protected void onDetach(){  doDetach();}  }
class C{  public ChangedAddressAttribute(){  super(CHANGED_ADDRESS);}  }
class C{  private static void typeCheckHelper(IR ir,AvExCache cache,Instruction inst){  AvailableExpression ae=cache.find(inst);  if (ae != null) {    Move.mutate(inst,REF_MOVE,TypeCheck.getClearResult(inst),TypeCheck.getClearRef(inst));  } else {    cache.insert(inst);  }}  }
class C{  private void receivedCertificateVerify(CertificateVerify message) throws HandshakeException {  certificateVerify=message;  message.verifySignature(clientPublicKey,handshakeMessages);  if (peerCertPath != null) {    session.setPeerIdentity(new X509CertPath(peerCertPath));  } else {    session.setPeerIdentity(new RawPublicKeyIdentity(clientPublicKey));  }}  }
class C{  public SqlDataSource(){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public synchronized void addObserver(Observer o){  if (o == null)   throw new NullPointerException();  if (!obs.contains(o)) {    obs.addElement(o);  }}  }
class C{  public static void json(String json){  printer.json(json);}  }
class C{  public synchronized void removeWatcher(){  if (poller != null) {    poller.stopBackgroundListening();    poller=null;  }}  }
class C{  protected void appendQuotedString(byte[] text){  append(QUOTED_STRING_FLAG);  arraycopy(text,0,text.length);  append(END_STRING_FLAG);}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof NTNumericCredential))   return false;  NTNumericCredential that=(NTNumericCredential)o;  if (impersonationToken == that.getToken())   return true;  return false;}  }
class C{  public GCspyTileSize(){  super(Options.set,"GCspy Tile Size","GCspy Tile Size",131072);}  }
class C{  private boolean equalsFragments(ByteString other){  int thisOffset=0;  Iterator<LiteralByteString> thisIter=new PieceIterator(this);  LiteralByteString thisString=thisIter.next();  int thatOffset=0;  Iterator<LiteralByteString> thatIter=new PieceIterator(other);  LiteralByteString thatString=thatIter.next();  int pos=0;  while (true) {    int thisRemaining=thisString.size() - thisOffset;    int thatRemaining=thatString.size() - thatOffset;    int bytesToCompare=Math.min(thisRemaining,thatRemaining);    boolean stillEqual=(thisOffset == 0) ? thisString.equalsRange(thatString,thatOffset,bytesToCompare) : thatString.equalsRange(thisString,thisOffset,bytesToCompare);    if (!stillEqual) {      return false;    }    pos+=bytesToCompare;    if (pos >= totalLength) {      if (pos == totalLength) {        return true;      }      throw new IllegalStateException();    }    if (bytesToCompare == thisRemaining) {      thisOffset=0;      thisString=thisIter.next();    } else {      thisOffset+=bytesToCompare;    }    if (bytesToCompare == thatRemaining) {      thatOffset=0;      thatString=thatIter.next();    } else {      thatOffset+=bytesToCompare;    }  }}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  @Override @CanIgnoreReturnValue public int read() throws IOException {  int b=in.read();  if (b != -1) {    hasher.putByte((byte)b);  }  return b;}  }
class C{  public static byte[] decode(byte[] source,int off,int len,int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and process %d bytes.",source.length,off,len));  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  byte[] DECODABET=getDecodabet(options);  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException(String.format("Bad Base64 input character '%c' in array position %d",source[i],i));    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  protected void installDefaults(){  list.setLayout(null);  LookAndFeel.installBorder(list,"List.border");  LookAndFeel.installColorsAndFont(list,"List.background","List.foreground","List.font");  LookAndFeel.installProperty(list,"opaque",Boolean.TRUE);  if (list.getCellRenderer() == null) {    list.setCellRenderer((ListCellRenderer)(UIManager.get("List.cellRenderer")));  }  Color sbg=list.getSelectionBackground();  if (sbg == null || sbg instanceof UIResource) {    list.setSelectionBackground(UIManager.getColor("List.selectionBackground"));  }  Color sfg=list.getSelectionForeground();  if (sfg == null || sfg instanceof UIResource) {    list.setSelectionForeground(UIManager.getColor("List.selectionForeground"));  }  Long l=(Long)UIManager.get("List.timeFactor");  timeFactor=(l != null) ? l.longValue() : 1000L;  updateIsFileList();}  }
class C{  public NvpBuilder addAllRaw(final Map<String,String> all){  npv.putAll(all);  return this;}  }
class C{  private void closeMediaInfo(){  if (mediaInfo != null) {    mediaInfo.close();    mediaInfo=null;  }  miSnapshot=null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:setStructuralType((TStructuralType)null);return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();return;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();return;}super.eUnset(featureID);}  }
class C{  public BruteForceRangeQuery(IPoint[] points){  this.points=new ArrayList<double[]>();  this.results=new IMultiPoint[points.length];  for (int i=0; i < points.length; i++) {    this.points.add(new double[]{points[i].getX(),points[i].getY()});    this.results[i]=new TwoDPoint(points[i]);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:54.729 -0500",hash_original_method="D5CBB2AA2C175CD3828E11BBF7822BC5",hash_generated_method="50BBC8CC3F5D54E0B12EABAC32803668") public StatusBarIcon(Parcel in){  readFromParcel(in);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static int[] mult256(int[] a,int[] b){  int[] result=new int[16];  int[] a0=new int[4];  System.arraycopy(a,0,a0,0,Math.min(4,a.length));  int[] a1=new int[4];  if (a.length > 4) {    System.arraycopy(a,4,a1,0,Math.min(4,a.length - 4));  }  int[] b0=new int[4];  System.arraycopy(b,0,b0,0,Math.min(4,b.length));  int[] b1=new int[4];  if (b.length > 4) {    System.arraycopy(b,4,b1,0,Math.min(4,b.length - 4));  }  if (a1[3] == 0 && a1[2] == 0 && b1[3] == 0 && b1[2] == 0) {    if (a1[1] == 0 && b1[1] == 0) {      if (a1[0] != 0 || b1[0] != 0) {        int[] c=mult32(a1[0],b1[0]);        result[9]^=c[1];        result[8]^=c[0];        result[5]^=c[1];        result[4]^=c[0];      }    } else {      int[] c=mult64(a1,b1);      result[11]^=c[3];      result[10]^=c[2];      result[9]^=c[1];      result[8]^=c[0];      result[7]^=c[3];      result[6]^=c[2];      result[5]^=c[1];      result[4]^=c[0];    }  } else {    int[] c=mult128(a1,b1);    result[15]^=c[7];    result[14]^=c[6];    result[13]^=c[5];    result[12]^=c[4];    result[11]^=c[3] ^ c[7];    result[10]^=c[2] ^ c[6];    result[9]^=c[1] ^ c[5];    result[8]^=c[0] ^ c[4];    result[7]^=c[3];    result[6]^=c[2];    result[5]^=c[1];    result[4]^=c[0];  }  a1[0]^=a0[0];  a1[1]^=a0[1];  a1[2]^=a0[2];  a1[3]^=a0[3];  b1[0]^=b0[0];  b1[1]^=b0[1];  b1[2]^=b0[2];  b1[3]^=b0[3];  int[] d=mult128(a1,b1);  result[11]^=d[7];  result[10]^=d[6];  result[9]^=d[5];  result[8]^=d[4];  result[7]^=d[3];  result[6]^=d[2];  result[5]^=d[1];  result[4]^=d[0];  int[] e=mult128(a0,b0);  result[11]^=e[7];  result[10]^=e[6];  result[9]^=e[5];  result[8]^=e[4];  result[7]^=e[3] ^ e[7];  result[6]^=e[2] ^ e[6];  result[5]^=e[1] ^ e[5];  result[4]^=e[0] ^ e[4];  result[3]^=e[3];  result[2]^=e[2];  result[1]^=e[1];  result[0]^=e[0];  return result;}  }
class C{  @Override protected EClass eStaticClass(){  return DomPackage.Literals.VARIABLE_REFERENCE;}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);}  }
class C{  protected boolean shouldWriteQueryCookie(String queryText){  return (null == queryText || queryText.length() <= 2048);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  changeSupport.addPropertyChangeListener(listener);}  }
class C{  private ArrayList<Property> parseProperties(String contents){  ArrayList<String> parts=new ArrayList<>();  boolean bInsideString=false, bInsideURL=false;  int j=0;  String substr;  for (int i=0; i < contents.length(); i++) {    if (bInsideString) {      bInsideString=!(contents.charAt(i) == '"');    } else     if (bInsideURL) {      bInsideURL=!(contents.charAt(i) == ')');    } else     if (contents.charAt(i) == '"') {      bInsideString=true;    } else     if (contents.charAt(i) == '(') {      if ((i - 3) > 0 && "url".equals(contents.substring(i - 3,i)))       bInsideURL=true;    } else     if (contents.charAt(i) == ';') {      substr=contents.substring(j,i);      if (!(substr.trim().equals("")))       parts.add(substr);      j=i + 1;    }  }  substr=contents.substring(j,contents.length());  if (!(substr.trim().equals("")))   parts.add(substr);  ArrayList<Property> results=new ArrayList<>();  for (  String part : parts) {    try {      results.add(new Property(part));    } catch (    IncompletePropertyException ipex) {      LOG.warning("Incomplete property in selector \"" + this.selector + "\": \""+ ipex.getMessage()+ "\"");    }  }  return results;}  }
class C{  public void dispatchEvent(Event event){synchronized (mEventsStagingLock) {    mEventStaging.add(event);  }}  }
class C{  public void deviceAliasConfig() throws NetworkDeviceControllerException {  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG_DEVICE_ALIAS};  StringBuilder buf=new StringBuilder();  lastPrompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.config.deviceAlias.cmd"),defaultTimeout,prompts,buf);  if (lastPrompt != SSHPrompt.MDS_CONFIG_DEVICE_ALIAS) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG_DEVICE_ALIAS.toString());  }}  }
class C{  public static void assertNotEqual(int expected,int actual,String errorMessage){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ", "+ errorMessage+ ")");  }  assertBool(expected != actual,errorMessage);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_CLASSIFIER_DEFINITION__OWNED_MEMBERS_RAW:    return ownedMembersRaw != null && !ownedMembersRaw.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void write(IRTMPEvent event){  final IClientStream stream=connection.getStreamByChannelId(id);  if (id > 3 && stream == null) {    log.info("Stream doesn't exist any longer, discarding message {}",event);    return;  }  final int streamId=(stream == null) ? 0 : stream.getStreamId();  write(event,streamId);}  }
class C{  private void markSelection(){  final int selected=getSelectedRow();  if (selected >= 0) {    m_selectedGame=(GUID)getModel().getValueAt(selected,LobbyGameTableModel.Column.GUID.ordinal());  } else {    m_selectedGame=null;  }}  }
class C{  public final int indexOf(Object elem,int index){  for (int i=index; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public static SourceFile[] toSourceFiles(String... javaFilePaths){  SourceFile[] dest=new SourceFile[javaFilePaths.length];  int i=0;  for (  String javaFilePath : javaFilePaths) {    dest[i++]=new SourceFile(new File(javaFilePath));  }  return dest;}  }
class C{  public static float acos(float fValue){  if (-1.0f < fValue) {    if (fValue < 1.0f) {      return (float)Math.acos(fValue);    }    return 0.0f;  }  return PI;}  }
class C{  public TexenClasspathTestCase(){  super("TexenClasspathTestCase");}  }
class C{  public static String encodeArg(String path){  return (encode(path,URI_ARG_ALLOWED));}  }
class C{  protected AbstractWriter(){  this(new NoNameCoder());}  }
class C{  public static short readShortWithPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  DecodeReturn d=checkPreamble(preamble,state,reader);  Code.decode(d);  if (d.type != DecodeReturn.T_SHORT)   state.output.fatal("Line " + d.lineNumber + " has no short after preamble '"+ preamble+ "'\n-->"+ d.data);  return (short)(d.l);}  }
class C{  public Warning(String message){  this(message,null);}  }
class C{  public HttpTimestamper(URI tsaURI){  if (!tsaURI.getScheme().equalsIgnoreCase("http") && !tsaURI.getScheme().equalsIgnoreCase("https")) {    throw new IllegalArgumentException("TSA must be an HTTP or HTTPS URI");  }  this.tsaURI=tsaURI;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double slopeX;  double slopeY;  double val;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  double[] maskX={1,1,1,0,-1,-1,-1,0};  double[] maskY={1,0,-1,-1,-1,0,1,1};  int numPixelsInFilter;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    numPixelsInFilter=8;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          slopeX=0;          slopeY=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            val=inputFile.getValue(y,x);            if (val == noData) {              val=z;            }            slopeX+=val * maskX[a];            slopeY+=val * maskY[a];          }          val=Math.sqrt(slopeX * slopeX + slopeY * slopeY);          outputFile.setValue(row,col,val);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
