class C{  public void testFailoverQueriesBeforeRetryMaster() throws Exception {  Properties props=new Properties();  props.setProperty("retriesAllDown","2");  for (  boolean setQueriesBeforeRetryMaster : new boolean[]{true,false}) {    if (setQueriesBeforeRetryMaster) {      props.setProperty("queriesBeforeRetryMaster","10");    } else {      props.remove("queriesBeforeRetryMaster");    }    Connection testConn=getUnreliableFailoverConnection(new String[]{HOST_1,HOST_2,HOST_3},props);    Statement testStmt=null;    try {      testConn.setAutoCommit(false);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      testStmt=testConn.createStatement();      assertSingleValueQuery(testStmt,"SELECT 1",1L);      UnreliableSocketFactory.downHost(HOST_1);      UnreliableSocketFactory.downHost(HOST_2);      assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());      assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      testStmt=testConn.createStatement();      for (int i=0; i < 10; i++) {        assertSingleValueQuery(testStmt,"SELECT 1",1L);        assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      }      UnreliableSocketFactory.dontDownHost(HOST_1);      UnreliableSocketFactory.dontDownHost(HOST_2);      UnreliableSocketFactory.downHost(HOST_3);      assertEquals(HOST_3_OK,UnreliableSocketFactory.getHostFromLastConnection());      if (setQueriesBeforeRetryMaster) {        assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);        assertEquals(HOST_1_OK,UnreliableSocketFactory.getHostFromLastConnection());        assertConnectionsHistory(HOST_1_OK,HOST_2_FAIL,HOST_3_OK,HOST_1_OK);      } else {        assertSQLException(testStmt,"SELECT 1",COMM_LINK_ERR_PATTERN);        assertEquals(HOST_2_OK,UnreliableSocketFactory.getHostFromLastConnection());        assertConnectionsHistory(HOST_1_OK,HOST_2_FAIL,HOST_3_OK,HOST_2_OK);      }    }  finally {      if (testStmt != null) {        testStmt.close();      }      if (testConn != null) {        testConn.close();      }    }  }}  }
class C{  public DoubleLiteral createDoubleLiteral(){  DoubleLiteralImpl doubleLiteral=new DoubleLiteralImpl();  return doubleLiteral;}  }
class C{  public void enableSerializationOption(SerializationFeature option){  this.serializationFeatures.add(option);}  }
class C{  public String toHTML(){  String html="<form method\"GET\" action=\"" + getFormAction() + "\">\n"+ super.getDescription()+ "<br>\n"+ "<input type=\"text\" name=\""+ getInputName()+ "\">\n</form>";  return html;}  }
class C{  public CharacterLiteral newCharacterLiteral(){  return new CharacterLiteral(this);}  }
class C{  public JSONAPIConverterFactory(ResourceConverter converter){  this.deserializer=converter;  this.serializer=converter;}  }
class C{  public boolean initialise(ServletContext context){  boolean ok=super.initialise(context);  initialised=true;  if (!ok) {    log.debug("failed to load rule");  } else {    log.debug("loaded rule " + getDisplayName() + " ("+ from+ ", "+ to+ " "+ toType+ ")");  }  if (!StringUtils.isBlank(toContextStr)) {    log.debug("looking for context " + toContextStr);    if (context == null) {      addError("unable to look for context as current context null");    } else {      toServletContext=context.getContext("/" + toContextStr);      if (toServletContext == null) {        addError("could not get servlet context " + toContextStr);      } else {        log.debug("got context ok");      }    }  }  if (errors.size() > 0) {    ok=false;  }  valid=ok;  return ok;}  }
class C{  public void componentMoved(final ComponentEvent e){}  }
class C{  private void buildSlots(ObjectStreamField[] fields){  slotsToSerialize=new ObjectSlot[fields.length];  for (int i=0; i < fields.length; i++) {    ObjectSlot s=new ObjectSlot();    slotsToSerialize[i]=s;    s.field=fields[i];  }}  }
class C{  public Binh2(){  super(2,2,2);}  }
class C{  protected StringBuilder header(){  StringBuilder b=new StringBuilder();  b.append("%!PS-Adobe-3.0 EPSF-3.0\n");  b.append(boundingBox).append("\n");  b.append("0.3 setlinewidth\n");  b.append("%% x y w h highlight\n" + "/highlight {\n" + "        4 dict begin\n"+ "        /h exch def\n"+ "        /w exch def\n"+ "        /y exch def\n"+ "        /x exch def\n"+ "        gsave\n"+ "        newpath\n"+ "        x y moveto\n"+ "        0 h rlineto     % up to left corner\n"+ "        w 0 rlineto     % to upper right corner\n"+ "        0 h neg rlineto % to lower right corner\n"+ "        w neg 0 rlineto % back home to lower left corner\n"+ "        closepath\n"+ "        .95 .83 .82 setrgbcolor\n"+ "        fill\n"+ "        grestore\n"+ "        end\n"+ "} def\n");  return b;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean containsDistinct(Value[] values){  if (external != null) {    return external.contains(values);  }  if (distinctRows == null) {    distinctRows=ValueHashMap.newInstance();    for (    Value[] row : rows) {      if (row.length > visibleColumnCount) {        Value[] r2=new Value[visibleColumnCount];        System.arraycopy(row,0,r2,0,visibleColumnCount);        row=r2;      }      ValueArray array=ValueArray.get(row);      distinctRows.put(array,row);    }  }  ValueArray array=ValueArray.get(values);  return distinctRows.get(array) != null;}  }
class C{  public static boolean[] hexDigitToBinary(final char hexDigit){switch (hexDigit) {case '0':    return FFFF.clone();case '1':  return TFFF.clone();case '2':return FTFF.clone();case '3':return TTFF.clone();case '4':return FFTF.clone();case '5':return TFTF.clone();case '6':return FTTF.clone();case '7':return TTTF.clone();case '8':return FFFT.clone();case '9':return TFFT.clone();case 'a':case 'A':return FTFT.clone();case 'b':case 'B':return TTFT.clone();case 'c':case 'C':return FFTT.clone();case 'd':case 'D':return TFTT.clone();case 'e':case 'E':return FTTT.clone();case 'f':case 'F':return TTTT.clone();default :throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");}}  }
class C{  public static byte[] calculateAgreement(byte[] ourPrivate,byte[] theirPublic){  byte[] agreement=new byte[32];  scalarmult.crypto_scalarmult(agreement,ourPrivate,theirPublic);  return agreement;}  }
class C{  public void AddTime(Tuple<String,String> arrivalDepartureTime) throws IOException {  Double first;  Double second;  if (arrivalDepartureTime.getFirst().equals("") || arrivalDepartureTime.getFirst() == null) {    second=parseTime(arrivalDepartureTime.getSecond());    first=second;  } else   if (arrivalDepartureTime.getSecond().equals("") || arrivalDepartureTime.getSecond() == null) {    first=parseTime(arrivalDepartureTime.getFirst());    second=first;  } else {    first=parseTime(arrivalDepartureTime.getFirst());    second=parseTime(arrivalDepartureTime.getSecond());  }  Tuple<Double,Double> parsedTimes=new Tuple<Double,Double>(first,second);  this.times.add(parsedTimes);}  }
class C{  private static void appendJSONPair(StringBuilder json,String key,String value) throws UnsupportedEncodingException {  boolean isValueNumeric=false;  try {    if (value.equals("0") || !value.endsWith("0")) {      Double.parseDouble(value);      isValueNumeric=true;    }  } catch (  NumberFormatException e) {    isValueNumeric=false;  }  if (json.charAt(json.length() - 1) != '{') {    json.append(',');  }  json.append(escapeJSON(key));  json.append(':');  if (isValueNumeric) {    json.append(value);  } else {    json.append(escapeJSON(value));  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  MessageResources rsc=(MessageResources)super.getServlet().getServletContext().getAttribute(Globals.MESSAGES_KEY);  if (op.equals(rsc.getMessage("button.add"))) {    if (this.addTemplateClassId == null || this.addTemplateClassId.longValue() <= 0) {      errors.add("getAddTemplateClassId",new ActionMessage("errors.generic",MSG.errorRequiredClass()));    }  }  if (op.equals(rsc.getMessage("button.moveUp"))) {    if (this.moveUpClassId == null || this.moveUpClassId.longValue() <= 0) {      errors.add("getMoveUpClassId",new ActionMessage("errors.generic",MSG.errorRequiredClass()));    }  }  if (op.equals(rsc.getMessage("button.moveDown"))) {    if (this.moveDownClassId == null || this.moveDownClassId.longValue() <= 0) {      errors.add("getMoveDownClassId",new ActionMessage("errors.generic",MSG.errorRequiredClass()));    }  }  if (op.equals(MSG.actionUpdateMultipleClassSetup())) {    if (this.instrOffrConfigId == null || this.instrOffrConfigId.intValue() <= 0) {      errors.add("instrOffrConfigId",new ActionMessage("errors.generic",MSG.errorRequiredIOConfiguration()));    }    validateChildClassExistence(errors);    validateClassLimits(errors);    validateAllSubpartsHaveAtLeastOneClass(errors);  }  return errors;}  }
class C{  public TextBasedMessageData(String string,Grep grep) throws SyntaxError {  super();  this.string=string;  this.regions=new HashMap<String,Grep.Region>();  parse(grep);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.019 -0500",hash_original_method="9C63A043347A5856E259C40D0B092C8E",hash_generated_method="406FE9C9ADC52D37C46B04541FF580EB") public static void fill(short[] array,int start,int end,short value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public boolean is_set_person(){  return this.person != null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Iterator<String> iterator(){  return this;}  }
class C{  public void append(final char data){  provideCapacity(length + 1);  c[length]=data;  length++;}  }
class C{  @Override public boolean isTableLoaded(){  return _tableManager.getTable(_tableName) != null;}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public AccountingProcessorForSavings determineProcessor(final SavingsDTO savingsDTO){  AccountingProcessorForSavings accountingProcessorForSavings=null;  if (savingsDTO.isCashBasedAccountingEnabled()) {    accountingProcessorForSavings=this.applicationContext.getBean("cashBasedAccountingProcessorForSavings",AccountingProcessorForSavings.class);  }  return accountingProcessorForSavings;}  }
class C{  protected void deinitializeCustomStyle(Style s){  s.removeStyleListener(this);}  }
class C{  public boolean isAutoInstallIsAllowed(){  return allowUpdatesAutoInstall;}  }
class C{  protected boolean hasMethod(Object groovy,String name){  boolean result;  try {    groovy.getClass().getMethod(name,new Class[]{String[].class});    result=true;  } catch (  Exception e) {    result=false;  }  return result;}  }
class C{  public JmsQueueScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  protected void notExists(String configuration,DataSourceFixture dataSourceFixture) throws Exception {  String pathToResource="//Engine/DefaultContext/Resource[@name='" + dataSourceFixture.jndiLocation + "']";  XMLAssert.assertXpathNotExists(pathToResource,configuration);  String pathToResourceParams="//Engine/DefaultContext/ResourceParams[@name='" + dataSourceFixture.jndiLocation + "']";  XMLAssert.assertXpathNotExists(pathToResourceParams,configuration);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:29.024 -0500",hash_original_method="6986A2B37C5264417B79B1F4A45429BD",hash_generated_method="6F8E3293883354154DEC75EA3C73E4E0") @DSSafe(DSCat.SAFE_OTHERS) public static byte[] sha384(String data){  return sha384(getBytesUtf8(data));}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{"Programmer's assertion:  the method FunctionMultiArgs.reportWrongNumberArgs() should never be called."});  throw new RuntimeException(fMsg);}  }
class C{  private void reloadToolbar(){  mToolbar=(Toolbar)findViewById(R.id.toolbar);  if (mToolbar == null) {    throw new RuntimeException("Toolbar not found in BaseActivity layout.");  } else {    mToolbar.setPopupTheme(R.style.PopupTheme);    mTitle=(QKTextView)mToolbar.findViewById(R.id.toolbar_title);    setSupportActionBar(mToolbar);  }  LiveViewManager.registerView(QKPreference.THEME,this,null);  LiveViewManager.registerView(QKPreference.BACKGROUND,this,null);}  }
class C{  public void openNativeNavigationApp(double latitude,double longitude){  execute("google.navigation:ll=" + latitude + ","+ longitude);}  }
class C{  public DatastoreBackupInfo findByName(final String namePrefix){  try {    return Iterables.getOnlyElement(findAllByNamePrefix(namePrefix));  } catch (  IllegalArgumentException e) {    throw new IllegalArgumentException("More than one backup with name prefix " + namePrefix,e);  }catch (  NoSuchElementException e) {    throw new IllegalArgumentException("No backup found with name prefix " + namePrefix,e);  }}  }
class C{  public static void main(String[] args){  List<String> tmpArgs=new ArrayList<String>(Arrays.asList(args));  int numWorker=StormSamoaUtils.numWorkers(tmpArgs);  args=tmpArgs.toArray(new String[0]);  StormTopology stormTopo=StormSamoaUtils.argsToTopology(args);  String topologyName=stormTopo.getTopologyName();  Config conf=new Config();  conf.setDebug(false);  conf.setMaxTaskParallelism(numWorker);  backtype.storm.LocalCluster cluster=new backtype.storm.LocalCluster();  cluster.submitTopology(topologyName,conf,stormTopo.getStormBuilder().createTopology());  Configuration stormConfig=StormSamoaUtils.getPropertyConfig(LocalStormDoTask.SAMOA_STORM_PROPERTY_FILE_LOC);  long executionDuration=stormConfig.getLong(LocalStormDoTask.EXECUTION_DURATION_KEY);  backtype.storm.utils.Utils.sleep(executionDuration * 1000);  cluster.killTopology(topologyName);  cluster.shutdown();}  }
class C{  public OFNetmaskGetVendorDataReply(byte tableIndex,int netMask){  super(BSN_GET_IP_MASK_ENTRY_REPLY,tableIndex,netMask);}  }
class C{  public void play(){  if (DEBUG) {    System.out.println("exiting play()");  }}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  QuickX.sort(a);  assert isSorted(a);  show(a);}  }
class C{  public List<SnapshotShardFailure> shardFailures(){  return shardFailures;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean scanSurrogates(XMLStringBuffer buf) throws IOException, JasperException {  int high=scanChar();  int low=peekChar();  if (!XMLChar.isLowSurrogate(low)) {    err.jspError("jsp.error.xml.invalidCharInContent",Integer.toString(high,16));    return false;  }  scanChar();  int c=XMLChar.supplemental((char)high,(char)low);  if (!XMLChar.isValid(c)) {    err.jspError("jsp.error.xml.invalidCharInContent",Integer.toString(c,16));    return false;  }  buf.append((char)high);  buf.append((char)low);  return true;}  }
class C{  public BubbleActions addAction(CharSequence actionName,int drawableRes,Callback callback){  Resources resources=root.getResources();  Resources.Theme theme=root.getContext().getTheme();  addAction(actionName,ResourcesCompat.getDrawable(resources,drawableRes,theme),callback);  return this;}  }
class C{  public static File file(String s){  File f=new File(s);  return f;}  }
class C{  private void stepInput(){  for (  final Port port : Port.VALUES) {    final Pipe receivingPipe=getCasing().getReceivingPipe(getFace(),port);    if (!receivingPipe.isReading()) {      receivingPipe.beginRead();    }    if (receivingPipe.canTransfer()) {      if (getCasing().getCasingWorld().getTotalWorldTime() > lastStep) {        emitInfraredPacket(receivingPipe.read());        receivingPipe.beginRead();      }    }  }}  }
class C{  public static Map<String,Object> buildRedisProps(String redisHost,int redisPort){  final Map<String,Object> props=new HashMap<>();  props.put("redis.host",redisHost);  props.put("redis.port",redisPort);  props.put("redis.encoding","UTF-8");  return props;}  }
class C{  public final void clearDFS(){  for (SpaceEffGraphNode n=firstNode(); n != null; n=n.getNext()) {    n.clearDfsVisited();  }}  }
class C{  public ToStringBuilder append(String fieldName,short value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  private void deleteUnusedFiles(){  final List<ManifestFile> files=manifestDiff.deletedFiles();  for (  ManifestFile file : files) {    File fileToDelete=new File(newReleaseFS.getWwwFolder(),file.name);    FilesUtility.delete(fileToDelete);  }}  }
class C{  @Deprecated public static String toString(final byte[] bytes,final String charsetName) throws UnsupportedEncodingException {  return charsetName != null ? new String(bytes,charsetName) : new String(bytes,Charset.defaultCharset());}  }
class C{  public RecursiveTreeItem(Callback<RecursiveTreeObject<T>,ObservableList<T>> func){  this(null,(Node)null,func);}  }
class C{  public void write(char cbuf[],int off,int len){  if ((off < 0) || (off > cbuf.length) || (len < 0)|| ((off + len) > cbuf.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  buf.append(cbuf,off,len);}  }
class C{  public void rollbackTo(Savepoint savepoint,boolean trimToSize){  int index=savepoint == null ? 0 : savepoint.logIndex;  if (savepoints != null) {    String[] names=new String[savepoints.size()];    savepoints.keySet().toArray(names);    for (    String name : names) {      Savepoint sp=savepoints.get(name);      int savepointIndex=sp.logIndex;      if (savepointIndex > index) {        savepoints.remove(name);      }    }  }}  }
class C{  public BigdataSail(){  this(getDefaultProperties());}  }
class C{  public SayRequiredItemsFromCollectionAction(final String questname,final String message){  this.questname=checkNotNull(questname);  this.index=0;  this.message=checkNotNull(message);}  }
class C{  private QueryCursor<Cache.Entry<Object,Object>> near(IgniteCache<Object,Object> c){  return new VisorNearCacheCursor<>(c.localEntries(CachePeekMode.NEAR).iterator());}  }
class C{  final public void print(float v){  Writer out=this.out;  if (out == null)   return;  try {    String s=String.valueOf(v);    out.write(s,0,s.length());  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public CapabilitiesRequest(URI uri) throws URISyntaxException {  super(uri,null);  if (uri == null) {    String message=Logging.getMessage("nullValue.URIIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }}  }
class C{  public void draw(Shape s){  try {    shapepipe.draw(this,s);  } catch (  InvalidPipeException e) {    try {      revalidateAll();      shapepipe.draw(this,s);    } catch (    InvalidPipeException e2) {    }  } finally {    surfaceData.markDirty();  }}  }
class C{  public long createSkuPrice(final SkuPriceDTO skuPriceDTO) throws UnmappedInterfaceException, UnableToCreateInstanceException {  final ProductSku sku=((ProductSkuService)getService()).getProductSkuBySkuCode(skuPriceDTO.getSkuCode());  if (federationFacade.isManageable(sku.getProduct().getProductId(),ProductDTO.class)) {    long rez=dtoProductSkuService.createSkuPrice(skuPriceDTO);    reindexService.reindexProductSkuCode(skuPriceDTO.getSkuCode());    return rez;  } else {    throw new AccessDeniedException("Access is denied");  }}  }
class C{  public int next() throws IOException {  tagOffset=offset;  tag=read();  length=read();  if (length != 0x80) {    if ((length & 0x80) != 0) {      int numOctets=length & 0x7F;      if (numOctets > 5) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }      length=read();      for (int i=1; i < numOctets; i++) {        int ch=read();        length=(length << 8) + ch;      }      if (length > 0xFFFFFF) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }    }  } else {    length=INDEFINIT_LENGTH;  }  contentOffset=offset;  return tag;}  }
class C{  public void addMessage(final Record messageToAdd){  this.messages.add(messageToAdd);}  }
class C{  public boolean isInPrimaryPartition(boolean verbose){  int simpleMajority=this.getSimpleMajoritySize();  if (verbose) {    logDecisionStep(verbose,"========================================================================");    if (passiveWitnessesInQuorumSetCount() > 0) {      logDecisionStep(verbose,String.format("CHECKING FOR QUORUM: MUST BE AT LEAST %d DB MEMBERS %s",simpleMajority,simpleMajority > 1 ? String.format("OR %d MEMBERS PLUS ALL %d PASSIVE WITNESSES",simpleMajority - 1,passiveWitnessesInQuorumSetCount()) : ""));    } else     if (activeWitnessesInQuorumSetCount() > 0) {      logDecisionStep(verbose,String.format("CHECKING FOR QUORUM: MUST BE AT LEAST %d DB MEMBERS %s",simpleMajority,simpleMajority > 1 ? String.format("OR %d DB MEMBERS PLUS AT LEAST 1 ACTIVE WITNESS",simpleMajority - 1) : ""));    } else {      logDecisionStep(verbose,String.format("CHECKING FOR QUORUM: MUST BE AT LEAST %d DB MEMBERS",simpleMajority));    }    logDecisionStep(verbose,"QUORUM SET MEMBERS ARE: " + CLUtils.iterableToCommaSeparatedList(getPotentialQuorumMembersSetNames()));    logDecisionStep(verbose,"SIMPLE MAJORITY SIZE: " + this.getSimpleMajoritySize());    logDecisionStep(verbose,"GC VIEW OF CURRENT DB MEMBERS IS: " + CLUtils.iterableToCommaSeparatedList(viewDBMembers));    logDecisionStep(verbose,"VALIDATED DB MEMBERS ARE: " + CLUtils.iterableToCommaSeparatedList(getValidatedDBMemberNames()));    logDecisionStep(verbose,"REACHABLE DB MEMBERS ARE: " + CLUtils.iterableToCommaSeparatedList(getReachableDBMemberNames()));    if (activeWitnessesInQuorumSetCount() > 0) {      logDecisionStep(verbose,"GC VIEW OF CURRENT ACTIVE WITNESS MEMBERS IS: " + CLUtils.iterableToCommaSeparatedList(viewDBMembers));      logDecisionStep(verbose,"VALIDATED ACTIVE WITNESS MEMBERS ARE: " + CLUtils.iterableToCommaSeparatedList(getValidatedActiveWitnessMemberNames()));      logDecisionStep(verbose,"REACHABLE ACTIVE WITNESS MEMBERS ARE: " + CLUtils.iterableToCommaSeparatedList(getReachableActiveWitnessMemberNames()));    }    if (passiveWitnesses.size() > 0) {      logDecisionStep(verbose,"WITNESS HOSTS ARE: " + CLUtils.iterableToCommaSeparatedList(passiveWitnesses));      logDecisionStep(verbose,"REACHABLE WITNESSES ARE: " + CLUtils.iterableToCommaSeparatedList(getReachableWitnessNames()));    }    logDecisionStep(verbose,"========================================================================");  }  if (!this.isValidPotentialQuorumMembersSet(verbose)) {    logDecisionStep(verbose,"CONCLUSION: UNABLE TO ESTABLISH MAJORITY DUE TO INVALID POTENTIAL QUORUM MEMBERS SET");    return false;  }  if (!this.isValidMembership(verbose)) {    logDecisionStep(verbose,"CONCLUSION: MEMBERSHIP IS INVALID");    return false;  }  if (potentialQuorumMembersSet.size() == 1 && validatedDBMembersInQuorumSetCount() == 1) {    logDecisionStep(verbose,"CONCLUSION: I AM IN A PRIMARY PARTITION AS THERE IS A SINGLE VALIDATED MEMBER IN THE QUORUM SET");    return true;  }  if (validatedDBMembersInQuorumSetCount() >= simpleMajority) {    logDecisionStep(verbose,String.format("CONCLUSION: I AM IN A PRIMARY PARTITION OF %d DB MEMBERS OUT OF THE REQUIRED MAJORITY OF %d",validatedDBMembersInQuorumSetCount(),simpleMajority));    return true;  }  if (validatedDBMembersInQuorumSetCount() >= simpleMajority - 1) {    boolean passiveWitnessesOK=passsiveWitnessSet.size() > 0 && (passsiveWitnessSet.size() == reachablePassiveWitnessesInQuorumSetCount());    if (passiveWitnessesOK) {      logDecisionStep(verbose,String.format("CONCLUSION: I AM IN A PRIMARY PARTITION OF %d MEMBERS, WITH %d VALIDATED DB MEMBERS AND ALL (%d) REACHABLE PASSIVE WITNESSES",simpleMajority,validatedDBMembersInQuorumSetCount(),reachablePassiveWitnessesInQuorumSetCount()));      return true;    } else {      int validatedActiveWitneses=validatedActiveWitnessesInQuorumSetCount();      if (validatedDBMembersInQuorumSetCount() + validatedActiveWitneses >= simpleMajority) {        logDecisionStep(verbose,String.format("CONCLUSION: I AM IN A PRIMARY PARTITION WITH %d VALIDATED DB MEMBERS AND %d VALIDATED ACTIVE WITNESSES",validatedDBMembersInQuorumSetCount(),validatedActiveWitneses));        return true;      } else {        logDecisionStep(verbose,String.format("CONCLUSION: I AM IN A NON-PRIMARY PARTITION OF %d MEMBERS OUT OF A REQUIRED MAJORITY SIZE OF %d\n" + "AND THERE ARE %d REACHABLE WITNESSES OUT OF %d",validatedDBMembersInQuorumSetCount(),getSimpleMajoritySize(),reachablePassiveWitnessesInQuorumSetCount(),passsiveWitnessSet.size()));        return false;      }    }  }  if (verbose) {    logDecisionStep(verbose,String.format("CONCLUSION: I AM IN A NON-PRIMARY PARTITION OF %d MEMBERS OUT OF A REQUIRED MAJORITY SIZE OF %d\n",validatedDBMembersInQuorumSetCount(),getSimpleMajoritySize()));  }  return false;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public void disableCleanup(){  getCursorProvider().disableCleanup();}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public DelegatingValidationMessageAcceptor(ValidationMessageAcceptor delegate){  this.delegate=delegate;}  }
class C{  public static List<List<Integer>> subsetsWithDup2(int[] num){  List<List<Integer>> res=new ArrayList<List<Integer>>();  res.add(new ArrayList<Integer>());  if (null == num || num.length == 0)   return res;  Arrays.sort(num);  int j, prevSize=0;  for (int i=0; i < num.length; i++) {    if (i != 0 && num[i] == num[i - 1])     j=prevSize; else     j=0;    prevSize=res.size();    for (; j < prevSize; j++) {      List<Integer> temp=new ArrayList<Integer>(res.get(j));      temp.add(num[i]);      res.add(temp);    }  }  return res;}  }
class C{  public static final double[] toDoubleArray(int z[]){  double y[]=new double[z.length];  for (int j=0; j < z.length; j++) {    y[j]=(double)z[j];  }  return y;}  }
class C{  @NonNull public DividerAdapterBuilder trailingView(@NonNull ViewFactory viewFactory){  mTrailingItem=new Item(viewFactory,false);  return this;}  }
class C{  protected void initialize(){  size=0;  for (Node n=AbstractParentNode.this.getFirstChild(); n != null; n=n.getNextSibling()) {    initialize(n);  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == NamedElement.class) {switch (derivedFeatureID) {case TypesPackage.DECLARATION__NAME:      return BasePackage.NAMED_ELEMENT__NAME;default :    return -1;}}if (baseClass == AnnotatableElement.class) {switch (derivedFeatureID) {case TypesPackage.DECLARATION__ANNOTATIONS:  return TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS;default :return -1;}}if (baseClass == PackageMember.class) {switch (derivedFeatureID) {case TypesPackage.DECLARATION__ID:return TypesPackage.PACKAGE_MEMBER__ID;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public Set<String> changedKeys(){  return m_changes.keySet();}  }
class C{  public InlineQueryResultArticle.InlineQueryResultArticleBuilder url(URL url){  this.url=url;  return this;}  }
class C{  public GitlabMilestone updateMilestone(GitlabMilestone edited,String stateEvent) throws IOException {  return updateMilestone(edited.getProjectId(),edited,stateEvent);}  }
class C{  public void validateBusinessObjectDataAttributeKey(BusinessObjectDataAttributeKey key) throws IllegalArgumentException {  Assert.notNull(key,"A business object data attribute key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",key.getBusinessObjectDefinitionName()));  key.setBusinessObjectFormatUsage(alternateKeyHelper.validateStringParameter("business object format usage",key.getBusinessObjectFormatUsage()));  key.setBusinessObjectFormatFileType(alternateKeyHelper.validateStringParameter("business object format file type",key.getBusinessObjectFormatFileType()));  Assert.notNull(key.getBusinessObjectFormatVersion(),"A business object format version must be specified.");  key.setPartitionValue(alternateKeyHelper.validateStringParameter("partition value",key.getPartitionValue()));  businessObjectDataHelper.validateSubPartitionValues(key.getSubPartitionValues());  Assert.notNull(key.getBusinessObjectDataVersion(),"A business object data version must be specified.");  key.setBusinessObjectDataAttributeName(alternateKeyHelper.validateStringParameter("business object data attribute name",key.getBusinessObjectDataAttributeName()));}  }
class C{  private boolean isKatakanaDakuten(char c){  return inside(c,k2d,'\u30ab') && c == lookupKatakanaDakuten(c);}  }
class C{  public static void testRandomConcurrentReadWriteThreads(LongToInternalIntBiMap longToInternalIntBiMap,int defaultValue,int numReaders,int numKeysToInsert,Random random){  int maxWaitingTimeForThreads=20;  CountDownLatch readersDoneLatch=new CountDownLatch(numReaders);  Long2IntMap keysToValueMap=new Long2IntOpenHashMap(numKeysToInsert);  List<LongToInternalIntBiMapReader> readers=Lists.newArrayListWithCapacity(numReaders);  for (int i=0; i < numKeysToInsert; i++) {    keysToValueMap.put(random.nextLong(),-1);  }  LongIterator longIterator=keysToValueMap.keySet().iterator();  for (int i=0; i < numReaders; i++) {    readers.add(new LongToInternalIntBiMapReader(longToInternalIntBiMap,new CountDownLatch(0),readersDoneLatch,longIterator.nextLong(),random.nextInt(maxWaitingTimeForThreads)));  }  List<Long> keyList=Lists.newArrayList(keysToValueMap.keySet());  Collections.shuffle(keyList,random);  CountDownLatch writerDoneLatch=new CountDownLatch(keyList.size());  MapWriterInfo mapWriterInfo=new MapWriterInfo(keyList,new CountDownLatch(0),writerDoneLatch);  ExecutorService executor=Executors.newFixedThreadPool(numReaders + 1);  List<Callable<Integer>> allThreads=Lists.newArrayListWithCapacity(numReaders + 1);  allThreads.add(Executors.callable(new LongToInternalIntBiMapWriter(longToInternalIntBiMap,mapWriterInfo),1));  for (int i=0; i < numReaders; i++) {    allThreads.add(Executors.callable(readers.get(i),1));  }  Collections.shuffle(allThreads,random);  try {    List<Future<Integer>> results=executor.invokeAll(allThreads,10,TimeUnit.SECONDS);    for (    Future<Integer> result : results) {      assertTrue(result.isDone());      assertEquals(1,result.get().intValue());    }  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for a thread was interrupted: ",e);  }catch (  ExecutionException e) {    throw new RuntimeException("Execution issue in an executor thread: ",e);  }  try {    readersDoneLatch.await();    writerDoneLatch.await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for last reader was interrupted: ",e);  }  for (  LongToInternalIntBiMapReader reader : readers) {    int expectedValue=longToInternalIntBiMap.get(reader.key);    assertTrue((reader.getValue() == defaultValue) || (reader.getValue() == expectedValue));  }}  }
class C{  public @CheckForNull VersionNumber version() throws IOException, InterruptedException {  LaunchResult result=launch(new EnvVars(),true,"-v");  if (result.getStatus() == 0) {    return parseVersionNumber(result.getOut());  } else {    return null;  }}  }
class C{  private static int atMost(Automaton.Builder builder,String x,int n){  int s=builder.createState();  if (x.length() == n) {    builder.setAccept(s,true);  } else {    char c=x.charAt(n);    builder.addTransition(s,atMost(builder,x,(char)n + 1),c);    if (c > '0') {      builder.addTransition(s,anyOfRightLength(builder,x,n + 1),'0',(char)(c - 1));    }  }  return s;}  }
class C{  public java.lang.StringBuilder append(char[] str,int offset,int len){  return null;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  xctxt.pushRTFContext();  transformer.executeChildTemplates(this,true);  xctxt.popRTFContext();}  }
class C{  private boolean validateTemplate(Template template){  String contextTypeId=template.getContextTypeId();  if (!contextExists(contextTypeId))   return false;  if (getRegistry() != null) {    try {      getRegistry().getContextType(contextTypeId).validate(template.getPattern());    } catch (    TemplateException e) {      log.error("Template '" + template.getName() + "' validation failed",e);      return false;    }  }  return true;}  }
class C{  private void addLayer(Drawable layer,int id,int left,int top,int right,int bottom){  final LayerState st=mLayerState;  int N=st.mChildren != null ? st.mChildren.length : 0;  int i=st.mNum;  if (i >= N) {    ChildDrawable[] nu=new ChildDrawable[N + 10];    if (i > 0) {      System.arraycopy(st.mChildren,0,nu,0,i);    }    st.mChildren=nu;  }  mLayerState.mChildrenChangingConfigurations|=layer.getChangingConfigurations();  ChildDrawable childDrawable=new ChildDrawable();  st.mChildren[i]=childDrawable;  childDrawable.mId=id;  childDrawable.mDrawable=layer;  childDrawable.mInsetL=left;  childDrawable.mInsetT=top;  childDrawable.mInsetR=right;  childDrawable.mInsetB=bottom;  st.mNum++;  layer.setCallback(this);}  }
class C{  private SavedState(Parcel in){  super(in);  prevScrollY=in.readInt();  scrollY=in.readInt();}  }
class C{  public void stopAndRemoveContainer(String containerId){  stopContainer(containerId,registeredContainers.get(containerId));}  }
class C{  public boolean isLoggable(Level level){  if (level.intValue() < levelValue || levelValue == offValue) {    return false;  }  return true;}  }
class C{  public ExecutionScope basicGetSuperScope(){  return superScope;}  }
class C{  protected JClass loadClass(String name){  try {    Class cl;    if (_loader != null)     cl=Class.forName(name,false,_loader); else     cl=Class.forName(name);    return new JClassWrapper(cl,this);  } catch (  ClassNotFoundException e) {    log.log(Level.FINE,e.toString(),e);    return null;  }}  }
class C{  public UserSynchronizer(ODataEntry odata_entry) throws ODataException {  Map<String,Object> props=odata_entry.getProperties();  String label=(String)props.get("Label");  String schedule=(String)props.get("Schedule");  String request=(String)props.get("Request");  String service_url=(String)props.get("ServiceUrl");  if (schedule == null || schedule.isEmpty() || service_url == null || service_url.isEmpty()) {    throw new ODataException("Missing required parameter");  }  if (request != null && !request.equals("start") && !request.equals("stop")) {    throw new ODataException("Unknown request " + request);  }  try {    this.syncConf=SYNC_SERVICE.createSynchronizer(label,"ODataUserSynchronizer",schedule);    updateFromEntry(odata_entry);  } catch (  ParseException e) {    throw new ODataException(e);  }}  }
class C{  private Point calculateLocation(int position,Rectangle bounds,Dimension size,int offset){  Point location=new Point();  location.x=bounds.x - horizontalMoveDirection * HORIZONTAL_MARGIN;  location.y=bounds.y;  if (position == 1 || position == 3) {    location.x+=(bounds.width - size.width);  }  if (position == 2 || position == 3) {    location.y+=(bounds.height - size.height);    offset=-offset;  }  location.y+=offset;  return location;}  }
class C{  public static void deleteDirectoryIgnoreException(File directory){  try {    FileUtils.deleteDirectory(directory);  } catch (  Exception e) {    LOGGER.warn(String.format("Failed to delete \"%s\" directory.",directory),e);  }}  }
class C{  public static Object evaluateAssertNoProperties(String viewName,ExprNode expression,int index,ExprEvaluatorContext exprEvaluatorContext) throws ViewParameterException {  ExprNodeSummaryVisitor visitor=new ExprNodeSummaryVisitor();  expression.accept(visitor);  if (!visitor.isPlain()) {    String message="Invalid view parameter expression " + index + getViewDesc(viewName)+ ", "+ visitor.getMessage()+ " are not allowed within the expression";    throw new ViewParameterException(message);  }  return expression.getExprEvaluator().evaluate(null,false,exprEvaluatorContext);}  }
class C{  public void readSecurityHeader(SipResponse response) throws PayloadException {  WWWAuthenticateHeader wwwHeader=(WWWAuthenticateHeader)response.getHeader(WWWAuthenticateHeader.NAME);  AuthenticationInfoHeader infoHeader=(AuthenticationInfoHeader)response.getHeader(AuthenticationInfoHeader.NAME);  if (wwwHeader != null) {    mDigest.setRealm(wwwHeader.getRealm());    mDigest.setOpaque(wwwHeader.getOpaque());    mDigest.setQop(wwwHeader.getQop());    mDigest.setNextnonce(wwwHeader.getNonce());  } else   if (infoHeader != null) {    if (infoHeader.getNextNonce() != null) {      mDigest.setNextnonce(infoHeader.getNextNonce());    }  }}  }
class C{  public boolean savePluginPropsToFile(){  try {    if (!pluginPropsFile.exists()) {      pluginPropsFile.createNewFile();    }    PrintWriter pw=new PrintWriter(pluginPropsFile);    pw.println("#All changes made to this file will take effect when Intellij is restarted.\n");    for (    Plugin.UserPropertiesKey ppk : Plugin.UserPropertiesKey.values()) {      pw.println("#" + ppk.doc.replaceAll("\n"," "));      pw.println(ppk.keyName + "=" + pluginProps.getProperty(ppk.keyName));      pw.println();    }    pw.flush();    pw.close();  } catch (  Exception e) {    e.printStackTrace();    return false;  }  return true;}  }
class C{  public Set<K> keySet(){  return mMap.keySet();}  }
class C{  public boolean handleTouchEvent(MotionEvent event){  final CharSequence text=layout.getText();  final Spanned spannedText=text instanceof Spanned ? (Spanned)text : null;  if (spannedText == null) {    return false;  }  final int action=(event.getAction() & MotionEvent.ACTION_MASK);  final int x=(int)(event.getX() - left);  final int y=(int)(event.getY() - top);  if (x < 0 || x >= layout.getWidth() || y < 0 || y >= layout.getHeight()) {    deselectSpan();    return false;  }  final int line=layout.getLineForVertical(y);  if (x < layout.getLineLeft(line) || x > layout.getLineRight(line)) {    deselectSpan();    return false;  }  if (action == MotionEvent.ACTION_DOWN) {    final int offset=layout.getOffsetForHorizontal(line,x);    final HighlightedClickableSpan[] span=spannedText.getSpans(offset,offset,HighlightedClickableSpan.class);    if (span.length > 0) {      selectSpan(span[0]);      return true;    }  } else   if (action == MotionEvent.ACTION_UP) {    final HighlightedClickableSpan selectedSpan=highlightedClickableSpan;    if (selectedSpan != null) {      selectedSpan.onClick(view);      deselectSpan();      return true;    }  }  return false;}  }
class C{  private void duplicateLetter(StringBuilder text){  int length=text.codePointCount(0,text.length());  if (length < 1) {    return;  }  int index=Rand.rand(length);  int chrIndex=text.offsetByCodePoints(0,index);  int chr=text.codePointAt(chrIndex);  text.insert(chrIndex + Character.charCount(chr),new StringBuilder().appendCodePoint(chr));}  }
class C{  public static void mergeNetworks(Network baseNetwork,Collection<Network> networks){  log.info("Merging networks...");  int numberOfLinksBefore=baseNetwork.getLinks().size();  int numberOfNodesBefore=baseNetwork.getNodes().size();  for (  Network currentNetwork : networks) {    integrateNetwork(baseNetwork,currentNetwork);  }  log.info("... Total number of links added to network: " + (baseNetwork.getLinks().size() - numberOfLinksBefore));  log.info("... Total number of nodes added to network: " + (baseNetwork.getNodes().size() - numberOfNodesBefore));  log.info("Merging networks... done.");}  }
class C{  @After public void tearDown(){  problem=null;}  }
class C{  public String optString(String key){  return optString(key,"");}  }
class C{  public void testLineChartDemo() throws IOException {  String imageFilename=getOutputDirectory() + "linechart.png";  Demo demo=new Demo();  demo.createLineChart(imageFilename);  File imagefile=new File(imageFilename);  assertTrue(imagefile.exists());  BufferedImage image=ImageIO.read(imagefile);  assertEquals(800,image.getWidth(null));  assertEquals(600,image.getHeight(null));}  }
class C{  public CommandAPDU(int cla,int ins,int p1,int p2){  this(cla,ins,p1,p2,null,0,0,0);}  }
class C{  private void checkMapConnectedness(List<MapNode> nodes){  Set<MapNode> visited=new HashSet<MapNode>();  Queue<MapNode> unvisited=new LinkedList<MapNode>();  MapNode firstNode;  MapNode next=null;  if (nodes.size() == 0) {    throw new SimError("No map nodes in the given map");  }  firstNode=nodes.get(0);  visited.add(firstNode);  unvisited.addAll(firstNode.getNeighbors());  while ((next=unvisited.poll()) != null) {    visited.add(next);    for (    MapNode n : next.getNeighbors()) {      if (!visited.contains(n) && !unvisited.contains(n)) {        unvisited.add(n);      }    }  }  if (visited.size() != nodes.size()) {    MapNode disconnected=null;    for (    MapNode n : nodes) {      if (!visited.contains(n)) {        disconnected=n;        break;      }    }    throw new SettingsError("SimMap is not fully connected. Only " + visited.size() + " out of "+ nodes.size()+ " map nodes "+ "can be reached from "+ firstNode+ ". E.g. "+ disconnected+ " can't be reached");  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MMeasureCalc[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  public T caseAnonymous_linkingOp_2_(Anonymous_linkingOp_2_ object){  return null;}  }
class C{  void sendCloseAck(MultiplexConnectionInfo info) throws IOException {synchronized (dataOut) {    if (alive && !info.closed)     try {      dataOut.writeByte(CLOSEACK);      dataOut.writeShort(info.id);      dataOut.flush();      info.closed=true;    } catch (    IOException e) {      multiplexLog.log(Log.BRIEF,"exception: ",e);      shutDown();      throw e;    }  }}  }
class C{  private static String formatTypeName(ClassNode type){  if (type.isArray()) {    ClassNode it=type;    int dim=0;    while (it.isArray()) {      dim++;      it=it.getComponentType();    }    StringBuilder sb=new StringBuilder(it.getName().length() + 2 * dim);    sb.append(it.getName());    for (int i=0; i < dim; i++) {      sb.append("[]");    }    return sb.toString();  }  return type.getName();}  }
class C{  static public void inssort(double[] array){  double tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (array[j] < array[j - 1]); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  @Override public int bulkInsert(Uri uri,ContentValues[] values){  final SQLiteDatabase db=mDatabaseHelper.getWritableDatabase();  String dbName;switch (sUriMatcher.match(uri)) {case WEATHER_VALUES_ITEMS:    dbName=WeatherValuesEntry.WEATHER_VALUES_TABLE_NAME;  break;case WEATHER_CONDITIONS_ITEMS:dbName=WeatherConditionsEntry.WEATHER_CONDITIONS_TABLE_NAME;break;default :throw new IllegalArgumentException("Unknown URI " + uri);}db.beginTransaction();int returnCount=0;try {for (ContentValues value : values) {final long id=db.insert(dbName,null,value);if (id != -1) returnCount++;}db.setTransactionSuccessful();}  finally {db.endTransaction();}getContext().getContentResolver().notifyChange(uri,null);getContext().getContentResolver().notifyChange(WeatherContract.ACCESS_ALL_DATA_FOR_LOCATION_URI,null);return returnCount;}  }
class C{  public BlockEdge(final IBlockEdge edge,final BasicBlock source,final BasicBlock target){  super(source,target);  m_edge=edge;  BasicBlock.link(source,target);}  }
class C{  public static ArrayList<Object> mergeAllItemSets(ArrayList<Object> itemSets,int size,int totalTrans){  ArrayList<Object> newVector=new ArrayList<Object>();  ItemSet result;  int numFound, k;  for (int i=0; i < itemSets.size(); i++) {    ItemSet first=(ItemSet)itemSets.get(i);    out:     for (int j=i + 1; j < itemSets.size(); j++) {      ItemSet second=(ItemSet)itemSets.get(j);      result=new ItemSet(totalTrans);      result.m_items=new int[first.m_items.length];      numFound=0;      k=0;      while (numFound < size) {        if (first.m_items[k] == second.m_items[k]) {          if (first.m_items[k] != -1) {            numFound++;          }          result.m_items[k]=first.m_items[k];        } else {          break out;        }        k++;      }      while (k < first.m_items.length) {        if ((first.m_items[k] != -1) && (second.m_items[k] != -1)) {          break;        } else {          if (first.m_items[k] != -1) {            result.m_items[k]=first.m_items[k];          } else {            result.m_items[k]=second.m_items[k];          }        }        k++;      }      if (k == first.m_items.length) {        result.m_counter=0;        newVector.add(result);      }    }  }  return newVector;}  }
class C{  @Override protected void onResume(){  super.onResume();  startCameraSource();}  }
class C{  public int incrementAndGet(){  return ++this.counter;}  }
class C{  @Get("json") public Map<String,Object> retrieve(){  return retrieveInternal(false);}  }
class C{  public static void main(String[] argv){  try {    if (argv.length == 0) {      System.out.println("Please specify a set of instances.");      return;    }    int currentA=Integer.parseInt(argv[0]);    int maxA=currentA;    int currentB=Integer.parseInt(argv[1]);    int maxB=currentB;    for (int i=2; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      if (currentA > maxA) {        maxA=currentA;      }      if (currentB > maxB) {        maxB=currentB;      }    }    DKConditionalEstimator newEst=new DKConditionalEstimator(maxA + 1,1);    for (int i=0; i < argv.length - 1; i+=2) {      currentA=Integer.parseInt(argv[i]);      currentB=Integer.parseInt(argv[i + 1]);      System.out.println(newEst);      System.out.println("Prediction for " + currentA + '|'+ currentB+ " = "+ newEst.getProbability(currentA,currentB));      newEst.addValue(currentA,currentB,1);    }  } catch (  Exception e) {    System.out.println(e.getMessage());  }}  }
class C{  private EncodingUtils(){}  }
class C{  public Result(String target,List<String> regressorNames,double[] xMeans,double[] xStdDevs,int numRegressors,int ny0,int ny1,double[] coefs,double[] stdErrs,double[] probs,double intercept,double logLikelihood,String[] sigmMarker,double chiSq,double alpha){  if (regressorNames.size() != numRegressors) {    throw new IllegalArgumentException();  }  if (coefs.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (stdErrs.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (probs.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (xMeans.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (xStdDevs.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (target == null) {    throw new NullPointerException();  }  this.intercept=intercept;  this.target=target;  this.xMeans=xMeans;  this.xStdDevs=xStdDevs;  this.regressorNames=regressorNames;  this.numRegressors=numRegressors;  this.ny0=ny0;  this.ny1=ny1;  this.coefs=coefs;  this.stdErrs=stdErrs;  this.probs=probs;  this.logLikelihood=logLikelihood;  this.sigMarker=sigmMarker;  this.chiSq=chiSq;  this.alpha=alpha;}  }
class C{  public Builder crossCommunityPercentage(final double percentage){  if (percentage < 0.0 || percentage > 1.0)   throw new IllegalArgumentException("Percentage must be between 0 and 1");  this.crossCommunityPercentage=percentage;  return this;}  }
class C{  public ContainerBwProvisionerSimple(long containerBw){  super(containerBw);  setContainerBwTable(new HashMap<String,Long>());}  }
class C{  public ToStringBuilder append(String fieldName,long[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  @Override public void updateAsciiStream(String columnLabel,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateAsciiStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(IOUtils.getAsciiReader(x),length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected String handleTimeseal(String text) throws IOException {  String result=text;  if (LOG.isDebugEnabled())   LOG.debug("Entering handleTimeseal " + result);  while (result.contains("[G]\0")) {    sendAck();    result=result.replaceFirst("\\[G\\]\0","");    if (LOG.isDebugEnabled())     LOG.debug("Handled ack new result " + result);  }  if (LOG.isDebugEnabled())   LOG.debug("Leaving handleTimeseal " + result);  return result;}  }
class C{  public String saveDefinitions() throws SaaSApplicationException {  List<VOUdaDefinition> toSave=new ArrayList<VOUdaDefinition>();  List<VOUdaDefinition> toDelete=new ArrayList<VOUdaDefinition>();  for (  UdaDefinitionRow row : customerUdaDefinitions) {    if (row.isSelected() && row.getDefinition().getKey() > 0) {      toDelete.add(row.getDefinition());    } else     if (!row.isSelected()) {      toSave.add(row.getDefinition());    }  }  for (  UdaDefinitionRow row : subscriptionUdaDefinitions) {    if (row.isSelected() && row.getDefinition().getKey() > 0) {      toDelete.add(row.getDefinition());    } else     if (!row.isSelected()) {      toSave.add(row.getDefinition());    }  }  try {    getAccountingService().saveUdaDefinitions(toSave,toDelete);  }  finally {    dirty=false;  }  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_UDADEFINITIONS_SAVED);  resetDefinitionLists();  return OUTCOME_SUCCESS;}  }
class C{  public void onResume(boolean multitasking){}  }
class C{  public CalendarIntervalScheduleBuilder withInterval(int timeInterval,IntervalUnit unit){  if (unit == null)   throw new IllegalArgumentException("TimeUnit must be specified.");  validateInterval(timeInterval);  this.interval=timeInterval;  this.intervalUnit=unit;  return this;}  }
class C{  ClientHandshakeImpl(Object owner){  super(owner);}  }
class C{  @BeforeSuite public void initLogging() throws IOException {  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  JoranConfigurator configurator=new JoranConfigurator();  configurator.setContext(context);  context.reset();  Path logPath=ResourcesPathResolver.getResourceFile(CMR.DEFAULT_LOG_FILE_NAME).toPath().toAbsolutePath();  try (InputStream is=Files.newInputStream(logPath,StandardOpenOption.READ)){    configurator.doConfigure(is);  } catch (  JoranException je) {  }  StatusPrinter.printInCaseOfErrorsOrWarnings(context);}  }
class C{  private static boolean isResource(String filename){  return filename.endsWith(".js") || filename.endsWith(".css") || filename.endsWith(".html")|| filename.endsWith(".ico")|| filename.endsWith(".png");}  }
class C{  public static void writeCharsToWriter(char[] chars,Writer writer) throws IOException {  BufferedWriter bw=new BufferedWriter(writer);  try {    bw.write(chars);  }  finally {    bw.close();  }}  }
class C{  private DatagramSocket createOrGetRelaySocket(SocketAddress originalSocketAddress){  if (!proxySocketsByOriginalAddress.containsKey(originalSocketAddress)) {    try {      DatagramSocket relaySocket=new DatagramSocket(new InetSocketAddress(getLoopbackAddress(),0));      logger.debug("Mapping peer {} to relay socket {}",originalSocketAddress,relaySocket.getLocalSocketAddress());      proxySocketsByOriginalAddress.put(originalSocketAddress,relaySocket);      readSocket(threadPoolExecutor,relaySocket,null);    } catch (    SocketException e) {      throw new RuntimeException(e);    }  }  return proxySocketsByOriginalAddress.get(originalSocketAddress);}  }
class C{  public void deleteNotifications(BigInteger alertId) throws IOException {  String requestUrl=RESOURCE + "/" + alertId.toString()+ "/notifications";  ArgusResponse response=getClient().executeHttpRequest(ArgusHttpClient.RequestType.DELETE,requestUrl,null);  assertValidResponse(response,requestUrl);}  }
class C{  public CancelTargetSelectionCommand(final int packetId){  super(DebugCommandType.CMD_CANCEL_TARGET_SELECTION,packetId);}  }
class C{  private void promoteReplica() throws IOException {  message("top: primary crashed; now pick replica to promote");  long maxSearchingVersion=-1;  NodeProcess replicaToPromote=null;  for (  NodeProcess node : nodes) {    if (node != null) {      message("ask " + node + " for its current searching version");      long searchingVersion;      try {        searchingVersion=node.getSearchingVersion();      } catch (      Throwable t) {        message("top: hit SocketException during getSearchingVersion with R" + node.id + "; skipping");        t.printStackTrace(System.out);        continue;      }      message(node + " has searchingVersion=" + searchingVersion);      if (searchingVersion > maxSearchingVersion) {        maxSearchingVersion=searchingVersion;        replicaToPromote=node;      }    }  }  if (replicaToPromote == null) {    message("top: no replicas running; skipping primary promotion");    return;  }  message("top: promote " + replicaToPromote + " version="+ maxSearchingVersion+ "; now commit");  try {    replicaToPromote.commit();  } catch (  Throwable t) {    message("top: hit exception during commit with R" + replicaToPromote.id + "; skipping");    t.printStackTrace(System.out);    return;  }  message("top: now shutdown " + replicaToPromote);  if (replicaToPromote.shutdown() == false) {    message("top: shutdown failed for R" + replicaToPromote.id + "; skipping primary promotion");    return;  }  int id=replicaToPromote.id;  message("top: now startPrimary " + replicaToPromote);  startPrimary(replicaToPromote.id);}  }
class C{  public PaletteHSBChooser(){}  }
class C{  public static void write(float lt,float ln,int offset_x1,int offset_y1,int rows,int columns,float orientation,float vResolution,float hResolution,int major,int[] data,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.GRID_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_GRID);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(offset_x1);  dos.writeInt(offset_y1);  dos.writeInt(rows);  dos.writeInt(columns);  dos.writeFloat(orientation);  dos.writeFloat(vResolution);  dos.writeFloat(hResolution);  dos.writeByte(major);  dos.writeInt(data.length);  for (int i=0; i < data.length; i++) {    dos.writeInt(data[i]);  }  properties.write(dos);}  }
class C{  public void onScanFinish(List<OneSheeldDevice> foundDevices){}  }
class C{  public void selectSingleSubset(int index){  partition.clearSelection();  partition.selectSubset(index);}  }
class C{  @Override protected String formatDate(Date date){  long time=date.getTime() + (random.nextInt(100000) * 1000);  date=new Date(time);  return super.formatDate(date);}  }
class C{  public Builder hideSecondaryHeaderImage(){  dialog.hideSecondaryHeaderImage();  return this;}  }
class C{  public static void finishSimulation(){  if (!abruptTerminate) {    for (    SimEntity ent : entities) {      if (ent.getState() != SimEntity.FINISHED) {        ent.run();      }    }  }  for (  SimEntity ent : entities) {    ent.shutdownEntity();  }  entities=null;  entitiesByName=null;  future=null;  deferred=null;  clock=0L;  running=false;  waitPredicates=null;  paused=false;  pauseAt=-1;  abruptTerminate=false;}  }
class C{  public void reset(){  noIndex=false;  noFollow=false;  noCache=false;  refresh=false;  refreshTime=0;  baseHref=null;  refreshHref=null;  generalTags.clear();  httpEquivTags.clear();}  }
class C{  public static void main(String... a) throws Exception {  System.setProperty("h2.modifyOnWrite","true");  TestBase.createCaller().init().test();}  }
class C{  public static IPRange BClassLocalIPRange(){  return new IPRange(new IP(172,16,0,0),new IP(172,31,255,255));}  }
class C{  private void initialize() throws JSONException {  schema=new JSONObject(schemaJSON);  if (schemaKeys != null) {    schema.put(Schema.FIELD_SCHEMA_KEYS,SchemaUtils.createJSONObject(schemaKeys));  }  valueToType=Maps.newHashMap();  JSONArray values=schema.getJSONArray(FIELD_VALUES);  Preconditions.checkState(values.length() > 0,"The schema does not specify any values.");  for (int index=0; index < values.length(); index++) {    JSONObject value=values.getJSONObject(index);    String name=value.getString(FIELD_VALUES_NAME);    String typeName=value.getString(FIELD_VALUES_TYPE);    Type type=Type.NAME_TO_TYPE.get(typeName);    valueToType.put(name,type);    Preconditions.checkArgument(type != null,typeName + " is not a valid type.");  }  valueToType=Collections.unmodifiableMap(valueToType);  valuesDescriptor=new FieldsDescriptor(valueToType);  try {    schema.put(FIELD_SCHEMA_TYPE,SCHEMA_TYPE);    schema.put(FIELD_SCHEMA_VERSION,SCHEMA_VERSION);  } catch (  JSONException e) {    throw new RuntimeException(e);  }  schemaJSON=this.schema.toString();}  }
class C{  public static boolean createNewFile(String filePath){  if (!TextUtils.isEmpty(filePath)) {    File file=new File(filePath);    return createNewFile(file);  }  return false;}  }
class C{  protected void performSceneElementOverEvent(PLIView view,PLISceneElement element,CGPoint screenPoint,PLPosition scene3DPoint){  view.getActivity().runOnUiThread(new PLSceneElementEventRunnable(view,element,screenPoint,scene3DPoint,PLSceneElementTouchStatus.PLSceneElementTouchStatusOver));}  }
class C{  static float normalize(float val,float minVal,float maxVal){  if (val < minVal)   return 0;  if (val > maxVal)   return 1;  return (val - minVal) / (maxVal - minVal);}  }
class C{  private Network createMatsimNetwork(String osmFile){  Scenario sc=ScenarioUtils.createScenario(ConfigUtils.createConfig());  NetworkSink networkGenerator=createAndInitNetworkSink(sc,TransformationFactory.getCoordinateTransformation(TransformationFactory.WGS84,TransformationFactory.WGS84));  TagFilter transitRelationsFilter=createTransitRelationsFilter();  TagFilter transitWaysFilter=createTransitWaysFilter();  FastXmlReader reader=new FastXmlReader(new File(osmFile),true,CompressionMethod.None);  reader.setSink(transitRelationsFilter);  transitRelationsFilter.setSink(transitWaysFilter);  transitWaysFilter.setSink(networkGenerator);  networkGenerator.setSink(new NullWriter());  reader.run();  NetworkCalcTopoType networkCalcTopoType=new NetworkCalcTopoType();  networkCalcTopoType.run(sc.getNetwork());  return sc.getNetwork();}  }
class C{  public ImmutableMap<Service,Long> startupTimes(){  return state.startupTimes();}  }
class C{  public static char binaryBeMsb0ToHexDigit(final boolean[] src){  return binaryBeMsb0ToHexDigit(src,0);}  }
class C{  public static void createPeriodControls(Properties ctx,int AD_Client_ID,SvrProcess sp,String trxName){  s_log.info("AD_Client_ID=" + AD_Client_ID);  String sql="DELETE C_PeriodControl pc1 " + "WHERE (C_Period_ID, DocBaseType) IN " + "(SELECT C_Period_ID, DocBaseType "+ "FROM C_PeriodControl pc2 "+ "GROUP BY C_Period_ID, DocBaseType "+ "HAVING COUNT(*) > 1)"+ " AND C_PeriodControl_ID NOT IN "+ "(SELECT MIN(C_PeriodControl_ID) "+ "FROM C_PeriodControl pc3 "+ "GROUP BY C_Period_ID, DocBaseType)";  int no=DB.executeUpdate(sql,false,trxName);  s_log.info("Duplicates deleted #" + no);  sql="SELECT DISTINCT p.AD_Client_ID, p.C_Period_ID, dt.DocBaseType " + "FROM C_Period p" + " FULL JOIN C_DocType dt ON (p.AD_Client_ID=dt.AD_Client_ID) "+ "WHERE p.AD_Client_ID=?"+ " AND NOT EXISTS"+ " (SELECT * FROM C_PeriodControl pc "+ "WHERE pc.C_Period_ID=p.C_Period_ID AND pc.DocBaseType=dt.DocBaseType)";  PreparedStatement pstmt=null;  int counter=0;  try {    pstmt=DB.prepareStatement(sql,trxName);    pstmt.setInt(1,AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      int Client_ID=rs.getInt(1);      int C_Period_ID=rs.getInt(2);      String DocBaseType=rs.getString(3);      s_log.config("AD_Client_ID=" + Client_ID + ", C_Period_ID="+ C_Period_ID+ ", DocBaseType="+ DocBaseType);      MPeriodControl pc=new MPeriodControl(ctx,Client_ID,C_Period_ID,DocBaseType,trxName);      if (pc.save()) {        counter++;        s_log.fine(pc.toString());      } else       s_log.warning("Not saved: " + pc);    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    s_log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  if (sp != null)   sp.addLog(0,null,new BigDecimal(counter),"@C_PeriodControl_ID@ @Created@");  s_log.info("Inserted #" + counter);}  }
class C{  public float[] toArray(float[] floats){  if (floats == null) {    floats=new float[3];  }  floats[0]=x;  floats[1]=y;  floats[2]=z;  return floats;}  }
class C{  @SuppressWarnings("unchecked") public synchronized E lastElement(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new NoSuchElementException();  }}  }
class C{  protected void patch_addContext(Patch patch,String text){  if (text.length() == 0) {    return;  }  String pattern=text.substring(patch.start2,patch.start2 + patch.length1);  int padding=0;  while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length() < Match_MaxBits - Patch_Margin - Patch_Margin) {    padding+=Patch_Margin;    pattern=text.substring(Math.max(0,patch.start2 - padding),Math.min(text.length(),patch.start2 + patch.length1 + padding));  }  padding+=Patch_Margin;  String prefix=text.substring(Math.max(0,patch.start2 - padding),patch.start2);  if (prefix.length() != 0) {    patch.diffs.addFirst(new Diff(Operation.EQUAL,prefix));  }  String suffix=text.substring(patch.start2 + patch.length1,Math.min(text.length(),patch.start2 + patch.length1 + padding));  if (suffix.length() != 0) {    patch.diffs.addLast(new Diff(Operation.EQUAL,suffix));  }  patch.start1-=prefix.length();  patch.start2-=prefix.length();  patch.length1+=prefix.length() + suffix.length();  patch.length2+=prefix.length() + suffix.length();}  }
class C{  private DTOHelper(){}  }
class C{  public static Workflow.Method rollbackCreateFileSharesMethod(URI systemURI,List<URI> fileURIs){  return new Workflow.Method("rollBackCreateFileShares",systemURI,fileURIs);}  }
class C{  public void register(Automation automation){  Integer oldSize=Integer.valueOf(_automationHashTable.size());  _automationHashTable.put(automation.getId(),automation);  int id=Integer.parseInt(automation.getId());  if (id > _id) {    _id=id;  }  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_automationHashTable.size()));}  }
class C{  public void saveState(){  for (  Field field : declaringClass.getDeclaredFields()) {    field.setAccessible(true);    int mods=Modifier.fieldModifiers() & field.getModifiers();    if (Modifier.isStatic(mods) && !Modifier.isFinal(mods)) {      Object value;      try {        value=field.get(null);      } catch (      IllegalAccessException e) {        throw new BugInRandoopException("unable to save value of field " + field.getName());      }      valueMap.put(field,value);    }  }}  }
class C{  public int findUniqueInt(@NotNull @SQL String sql,Object... args){  return findUniqueInt(SqlQuery.query(sql,args));}  }
class C{  protected void removeDatasets(int[] indices){  int i;  if (indices == null) {    m_ModelDatasets.removeAllElements();  } else {    for (i=indices.length - 1; i >= 0; i--)     m_ModelDatasets.remove(indices[i]);  }  setModified(true);}  }
class C{  public static String toOpcodeName(int opcode){switch (opcode) {case CONTINUATION:    return "CONTINUATION";case TEXT:  return "TEXT";case BINARY:return "BINARY";case CLOSE:return "CLOSE";case PING:return "PING";case PONG:return "PONG";default :break;}if (0x1 <= opcode && opcode <= 0x7) {return String.format("DATA(0x%X)",opcode);}if (0x8 <= opcode && opcode <= 0xF) {return String.format("CONTROL(0x%X)",opcode);}return String.format("0x%X",opcode);}  }
class C{  private int comparableLevel(String level){  if (level.equals("FATAL")) {    return 5;  } else   if (level.equals("ERROR")) {    return 4;  } else   if (level.equals("WARN")) {    return 3;  } else   if (level.equals("INFO")) {    return 2;  } else   if (level.equals("DEBUG")) {    return 1;  } else {    return 0;  }}  }
class C{  @Override protected boolean printGlyphVector(GlyphVector gv,float x,float y){  if ((gv.getLayoutFlags() & GlyphVector.FLAG_HAS_TRANSFORMS) != 0) {    return false;  }  if (gv.getNumGlyphs() == 0) {    return true;  }  AffineTransform deviceTransform=getTransform();  AffineTransform fontTransform=new AffineTransform(deviceTransform);  Font font=gv.getFont();  fontTransform.concatenate(font.getTransform());  int transformType=fontTransform.getType();  boolean directToGDI=((transformType != AffineTransform.TYPE_GENERAL_TRANSFORM) && ((transformType & AffineTransform.TYPE_FLIP) == 0));  WPrinterJob wPrinterJob=(WPrinterJob)getPrinterJob();  try {    wPrinterJob.setTextColor((Color)getPaint());  } catch (  ClassCastException e) {    directToGDI=false;  }  if (WPrinterJob.shapeTextProp || !directToGDI) {    return false;  }  Point2D.Float userpos=new Point2D.Float(x,y);  Point2D g0pos=gv.getGlyphPosition(0);  userpos.x+=(float)g0pos.getX();  userpos.y+=(float)g0pos.getY();  Point2D.Float devpos=new Point2D.Float();  if (font.isTransformed()) {    AffineTransform fontTx=font.getTransform();    float translateX=(float)(fontTx.getTranslateX());    float translateY=(float)(fontTx.getTranslateY());    if (Math.abs(translateX) < 0.00001)     translateX=0f;    if (Math.abs(translateY) < 0.00001)     translateY=0f;    userpos.x+=translateX;    userpos.y+=translateY;  }  deviceTransform.transform(userpos,devpos);  if (getClip() != null) {    deviceClip(getClip().getPathIterator(deviceTransform));  }  float fontSize=font.getSize2D();  double devResX=wPrinterJob.getXRes();  double devResY=wPrinterJob.getYRes();  double fontDevScaleY=devResY / DEFAULT_USER_RES;  int orient=getPageFormat().getOrientation();  if (orient == PageFormat.LANDSCAPE || orient == PageFormat.REVERSE_LANDSCAPE) {    double tmp=devResX;    devResX=devResY;    devResY=tmp;  }  double devScaleX=devResX / DEFAULT_USER_RES;  double devScaleY=devResY / DEFAULT_USER_RES;  fontTransform.scale(1.0 / devScaleX,1.0 / devScaleY);  Point2D.Double pty=new Point2D.Double(0.0,1.0);  fontTransform.deltaTransform(pty,pty);  double scaleFactorY=Math.sqrt(pty.x * pty.x + pty.y * pty.y);  float scaledFontSizeY=(float)(fontSize * scaleFactorY * fontDevScaleY);  Point2D.Double ptx=new Point2D.Double(1.0,0.0);  fontTransform.deltaTransform(ptx,ptx);  double scaleFactorX=Math.sqrt(ptx.x * ptx.x + ptx.y * ptx.y);  float awScale=getAwScale(scaleFactorX,scaleFactorY);  int iangle=getAngle(ptx);  ptx=new Point2D.Double(1.0,0.0);  deviceTransform.deltaTransform(ptx,ptx);  double advanceScaleX=Math.sqrt(ptx.x * ptx.x + ptx.y * ptx.y);  pty=new Point2D.Double(0.0,1.0);  deviceTransform.deltaTransform(pty,pty);  double advanceScaleY=Math.sqrt(pty.x * pty.x + pty.y * pty.y);  int numGlyphs=gv.getNumGlyphs();  int[] glyphCodes=gv.getGlyphCodes(0,numGlyphs,null);  float[] glyphPos=gv.getGlyphPositions(0,numGlyphs,null);  int invisibleGlyphCnt=0;  for (int gc=0; gc < numGlyphs; gc++) {    if ((glyphCodes[gc] & 0xffff) >= CharToGlyphMapper.INVISIBLE_GLYPHS) {      invisibleGlyphCnt++;    }  }  if (invisibleGlyphCnt > 0) {    int visibleGlyphCnt=numGlyphs - invisibleGlyphCnt;    int[] visibleGlyphCodes=new int[visibleGlyphCnt];    float[] visiblePositions=new float[visibleGlyphCnt * 2];    int index=0;    for (int i=0; i < numGlyphs; i++) {      if ((glyphCodes[i] & 0xffff) < CharToGlyphMapper.INVISIBLE_GLYPHS) {        visibleGlyphCodes[index]=glyphCodes[i];        visiblePositions[index * 2]=glyphPos[i * 2];        visiblePositions[index * 2 + 1]=glyphPos[i * 2 + 1];        index++;      }    }    numGlyphs=visibleGlyphCnt;    glyphCodes=visibleGlyphCodes;    glyphPos=visiblePositions;  }  AffineTransform advanceTransform=AffineTransform.getScaleInstance(advanceScaleX,advanceScaleY);  float[] glyphAdvPos=new float[glyphPos.length];  advanceTransform.transform(glyphPos,0,glyphAdvPos,0,glyphPos.length / 2);  Font2D font2D=FontUtilities.getFont2D(font);  if (font2D instanceof TrueTypeFont) {    String family=font2D.getFamilyName(null);    int style=font.getStyle() | font2D.getStyle();    if (!wPrinterJob.setFont(family,scaledFontSizeY,style,iangle,awScale)) {      return false;    }    wPrinterJob.glyphsOut(glyphCodes,devpos.x,devpos.y,glyphAdvPos);  } else   if (font2D instanceof CompositeFont) {    CompositeFont compFont=(CompositeFont)font2D;    float userx=x, usery=y;    float devx=devpos.x, devy=devpos.y;    int start=0, end=0, slot=0;    while (end < numGlyphs) {      start=end;      slot=glyphCodes[start] >>> 24;      while (end < numGlyphs && ((glyphCodes[end] >>> 24) == slot)) {        end++;      }      PhysicalFont slotFont=compFont.getSlotFont(slot);      if (!(slotFont instanceof TrueTypeFont)) {        return false;      }      String family=slotFont.getFamilyName(null);      int style=font.getStyle() | slotFont.getStyle();      if (!wPrinterJob.setFont(family,scaledFontSizeY,style,iangle,awScale)) {        return false;      }      int[] glyphs=Arrays.copyOfRange(glyphCodes,start,end);      float[] posns=Arrays.copyOfRange(glyphAdvPos,start * 2,end * 2);      if (start != 0) {        Point2D.Float p=new Point2D.Float(x + glyphPos[start * 2],y + glyphPos[start * 2 + 1]);        deviceTransform.transform(p,p);        devx=p.x;        devy=p.y;      }      wPrinterJob.glyphsOut(glyphs,devx,devy,posns);    }  } else {    return false;  }  return true;}  }
class C{  public static LdapUser createLdapUser(){  return new LdapUserImpl();}  }
class C{  protected boolean canEnsureOrder(){  return true;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(new OverviewDocumentBuilder(context,extensionRegistry,null).build().toString());  sb.append(new PathsDocumentBuilder(context,extensionRegistry,null).build().toString());  sb.append(new DefinitionsDocumentBuilder(context,extensionRegistry,null).build().toString());  sb.append(new SecurityDocumentBuilder(context,extensionRegistry,null).build().toString());  return sb.toString();}  }
class C{  final public int lastIndexOf(final MutableString pattern,final int from){  final int n=pattern.length();  if (from < 0)   return -1;  if (n == 0)   return from > length() ? length() : from;  if (n == 1)   return lastIndexOf(pattern.array[0],from);  return lastIndexOf(pattern.array,n,from,buildFilter(pattern.array,n));}  }
class C{  public final void remove(final int index){  AbstractItem removedItem=items.remove(index);  if (removedItem instanceof Item && ((Item)removedItem).getIcon() != null) {    iconCount--;  } else   if (removedItem instanceof Divider) {    dividerCount--;  }  rawItems=null;  notifyOnDataSetChanged();}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private double[][] normalize(double[][] parameters){  for (int i=0; i < parameters.length; i++) {    for (int j=0; j < parameters[i].length; j++) {      Parameter parameter=parameterFile.get(j);      parameters[i][j]=(parameters[i][j] - parameter.getLowerBound()) / (parameter.getUpperBound() - parameter.getLowerBound());    }  }  return parameters;}  }
class C{  protected JvmThreadInstanceTableMeta createJvmThreadInstanceTableMetaNode(String tableName,String groupName,SnmpMib mib,MBeanServer server){  return new JvmThreadInstanceTableMetaImpl(mib,objectserver);}  }
class C{  protected void println(Object msg){  print(msg + "\n");}  }
class C{  public void onEvent(Event e){  if (e.getTarget() == bOk) {    dispose();  } else   if (e.getTarget() == bCancel) {    m_cancel=true;    dispose();  } else   if (e.getTarget() == bDelete) {    m_data=null;    m_change=true;    displayData();  } else   if (e.getTarget() == bLoad)   loadFile(); else   if (e.getTarget() == bSave) {    save();  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (derivedFeatureID) {case RegularExpressionPackage.HEX_ESCAPE_SEQUENCE__CHARACTER:    return RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public boolean hasFailure(){  return checks != null && checks.hasErrorBehavior();}  }
class C{  public static final Segment scale(Segment segment,double scale){  if (segment == null)   throw new NullPointerException(Messages.getString("geometry.nullShape"));  if (scale <= 0)   throw new IllegalArgumentException(Messages.getString("geometry.invalidScale"));  final double length=segment.getLength() * scale * 0.5;  Vector2 n=segment.vertices[0].to(segment.vertices[1]);  n.normalize();  n.multiply(length);  return new Segment(segment.center.sum(n.x,n.y),segment.center.difference(n.x,n.y));}  }
class C{  @Deprecated public static String first(String list,String delimiter){  return first(list,delimiter,true,1);}  }
class C{  public boolean isInitialAnchorRandom(){  return m_RandomInitialAnchor;}  }
class C{  private Push push(final String event,final JsonNode payload,final long timeout) throws IOException, IllegalStateException {  if (!this.joinedOnce) {    throw new IllegalStateException("Unable to push event before channel has been joined");  }  final Push pushEvent=new Push(this,event,payload,timeout);  if (this.canPush()) {    pushEvent.send();  } else {    this.pushBuffer.add(pushEvent);  }  return pushEvent;}  }
class C{  public LnTrackStatusUpdateThread(LnTrafficController tc){  this.tc=tc;}  }
class C{  public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  buildTree(data,false);}  }
class C{  public String businessObjectFormatKeyToString(BusinessObjectFormatKey businessObjectFormatKey){  return businessObjectFormatKeyToString(businessObjectFormatKey.getNamespace(),businessObjectFormatKey.getBusinessObjectDefinitionName(),businessObjectFormatKey.getBusinessObjectFormatUsage(),businessObjectFormatKey.getBusinessObjectFormatFileType(),businessObjectFormatKey.getBusinessObjectFormatVersion());}  }
class C{  public boolean doFlipBytes(){  return m_flipBytes;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:56.781 -0500",hash_original_method="EBB24F7A09C76B232310B77610C33832",hash_generated_method="85CB07F6721D93BA303964EFCF468105") public static SmsMessage createFromEfRecord(int index,byte[] data){  try {    SmsMessage msg=new SmsMessage();    msg.indexOnIcc=index;    if ((data[0] & 1) == 0) {      Log.w(LOG_TAG,"SMS parsing failed: Trying to parse a free record");      return null;    } else {      msg.statusOnIcc=data[0] & 0x07;    }    int size=data[1];    byte[] pdu=new byte[size];    System.arraycopy(data,2,pdu,0,size);    msg.parsePduFromEfRecord(pdu);    return msg;  } catch (  RuntimeException ex) {    Log.e(LOG_TAG,"SMS PDU parsing failed: ",ex);    return null;  }}  }
class C{  public OrientationHandle(TriangleFigure owner){  super(owner);}  }
class C{  public Boolean isNetworkResourceManagementEnabled(){  return networkResourceManagementEnabled;}  }
class C{  public OpenSSLPBEParametersGenerator(){}  }
class C{  private void transfer(Entry[] src,Entry[] dest){  for (int j=0; j < src.length; ++j) {    Entry e=src[j];    src[j]=null;    while (e != null) {      Entry next=e.next;      Object key=e.get();      if (key == null) {        e.next=null;        e.value=null;        size--;      } else {        int i=indexFor(e.hash,dest.length);        e.next=dest[i];        dest[i]=e;      }      e=next;    }  }}  }
class C{  public boolean isNonIDRSlice(){  if (FUI_TYPE == (byte)0x01) {    return true;  }  if (isFrameNonInterleaved() && FUH_TYPE == (byte)0x01) {    return true;  }  return false;}  }
class C{  public void invoke(RSyntaxTextArea textArea) throws BadLocationException {  Caret c=textArea.getCaret();  int dot=c.getDot();  int mark=c.getMark();  int p0=Math.min(dot,mark);  int p1=Math.max(dot,mark);  RSyntaxDocument doc=(RSyntaxDocument)textArea.getDocument();  Element map=doc.getDefaultRootElement();  int lineNum=map.getElementIndex(dot);  Element line=map.getElement(lineNum);  int start=line.getStartOffset();  int end=line.getEndOffset() - 1;  String s=textArea.getText(start,end - start);  int len=s.length();  int endWS=0;  while (endWS < len && RSyntaxUtilities.isWhitespace(s.charAt(endWS))) {    endWS++;  }  s=s.substring(0,endWS);  p0-=getID().length();  String beforeText=getBeforeTextIndented(s);  String afterText=getAfterTextIndented(s);  doc.replace(p0,p1 - p0,beforeText + afterText,null);  textArea.setCaretPosition(p0 + beforeText.length());}  }
class C{  public QName(String qname,Stack namespaces){  this(qname,namespaces,false);}  }
class C{  public NamedThreadPoolExecutor(String poolName,int fixedPoolSize){  super(fixedPoolSize,fixedPoolSize,0L,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),new NamedThreadFactory(poolName));  setPoolName(poolName);}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  putAllImpl(map);}  }
class C{  public IPMatcher(String ipSpec) throws IPMatcherException {  String ipPart=ipSpec;  String[] parts=ipSpec.split("/");  if (parts[0].indexOf(':') >= 0) {    try {      network=Inet6Address.getByName(parts[0]).getAddress();    } catch (    UnknownHostException e) {      throw new IPMatcherException("Malformed IP range specification " + ipSpec,e);    }    netmask=new byte[16];switch (parts.length) {case 2:      int maskBits;    try {      maskBits=Integer.parseInt(parts[1]);    } catch (    NumberFormatException nfe) {      throw new IPMatcherException("Malformed IP range specification " + ipSpec,nfe);    }  if (maskBits < 0 || maskBits > 128)   throw new IPMatcherException("Mask bits out of range 0-128 " + ipSpec);int maskBytes=maskBits / 8;for (int i=0; i < maskBytes; i++) netmask[i]=(byte)0Xff;netmask[maskBytes]=(byte)((byte)0Xff << 8 - (maskBits % 8));for (int i=maskBytes + 1; i < (128 / 8); i++) netmask[i]=0;break;case 1:for (int i=0; i < netmask.length; i++) netmask[i]=(byte)0Xff;break;default :throw new IPMatcherException("Malformed IP range specification " + ipSpec);}} else {boolean mustHave4=false;network=new byte[4];netmask=new byte[4];switch (parts.length) {case 2:ipPart=parts[0];mustHave4=true;String[] maskParts=parts[1].split("\\.");if (maskParts.length == 1) {int x;try {x=Integer.parseInt(maskParts[0]);} catch (NumberFormatException nfe) {throw new IPMatcherException("Malformed IP range specification " + ipSpec,nfe);}if (x < 0 || x > 32) {throw new IPMatcherException();}int fullMask=-1 << (32 - x);netmask[0]=(byte)((fullMask & 0xFF000000) >>> 24);netmask[1]=(byte)((fullMask & 0x00FF0000) >>> 16);netmask[2]=(byte)((fullMask & 0x0000FF00) >>> 8);netmask[3]=(byte)(fullMask & 0x000000FF);ipToBytes(ipPart,network,mustHave4);} else {ipToBytes(parts[0],network,true);ipToBytes(parts[1],netmask,true);}break;case 1:for (int i=0; i < netmask.length; i++) netmask[i]=-1;int partCount=ipToBytes(ipPart,network,mustHave4);for (int i=3; i >= partCount; i--) {netmask[i]=0;}break;default :throw new IPMatcherException("Malformed IP range specification " + ipSpec);}network=ip4ToIp6(network);netmask=ip4MaskToIp6(netmask);}}  }
class C{  private static final byte[] shortToByteArray(short value){  return new byte[]{(byte)(value >>> 8),(byte)value};}  }
class C{  public static char[] encodeHex(final byte[] data,final boolean toLowerCase){  return encodeHex(data,toLowerCase ? DIGITS_LOWER : DIGITS_UPPER);}  }
class C{  final public static boolean isMultibyteCharset(String javaEncodingName){  return MULTIBYTE_ENCODINGS.contains(javaEncodingName.toUpperCase(Locale.ENGLISH));}  }
class C{  public Boolean isDHCPv6(){  return dhcPv6;}  }
class C{  @Override public QParser createParser(String qstr,SolrParams localParams,SolrParams params,SolrQueryRequest req){  return new SimpleQParser(qstr,localParams,params,req);}  }
class C{  @Singleton @Provides DashboardItemsMenu provideDashboardItemsMenuDomain(BaseApp baseApp){  return new DashboardItemsMenuDomain(baseApp);}  }
class C{  public JSplitPane(int newOrientation,Component newLeftComponent,Component newRightComponent){  this(newOrientation,UIManager.getBoolean("SplitPane.continuousLayout"),newLeftComponent,newRightComponent);}  }
class C{  public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,getStorageSystemURI());    HDSApiClient hdsApiClient=jobContext.getHdsApiFactory().getClient(HDSUtils.getHDSServerManagementServerInfo(storageSystem),storageSystem.getSmisUserName(),storageSystem.getSmisPassword());    List<Volume> volumes=new ArrayList<Volume>();    Set<URI> poolURIs=new HashSet<URI>();    for (    URI id : getTaskCompleter().getIds()) {      Volume volume=(Volume)BlockObject.fetch(dbClient,id);      volumes.add(volume);      poolURIs.add(volume.getPool());    }    if (_status == JobStatus.SUCCESS || _status == JobStatus.FAILED) {      for (      URI poolURI : poolURIs) {        StoragePool storagePool=dbClient.queryObject(StoragePool.class,poolURI);        HDSUtils.updateStoragePoolCapacity(dbClient,hdsApiClient,storagePool);      }    }    StringBuilder logMsgBuilder=new StringBuilder();    if (_status == JobStatus.SUCCESS) {      super.updateStatus(jobContext);      for (      Volume volume : volumes) {        volume.setInactive(true);        dbClient.persistObject(volume);        dbClient.updateTaskOpStatus(Volume.class,volume.getId(),getTaskCompleter().getOpId(),new Operation(Operation.Status.ready.name(),String.format("Deleted volume %s",volume.getNativeId())));        if (logMsgBuilder.length() != 0) {          logMsgBuilder.append("\n");        }        logMsgBuilder.append(String.format("Successfully deleted volume %s",volume.getId()));      }    } else     if (_status == JobStatus.FAILED) {      super.updateStatus(jobContext);      for (      URI id : getTaskCompleter().getIds()) {        if (logMsgBuilder.length() != 0) {          logMsgBuilder.append("\n");        }        logMsgBuilder.append(String.format("Failed to delete volume: %s",id));      }    }    if (logMsgBuilder.length() > 0) {      _log.info(logMsgBuilder.toString());    }  } catch (  Exception e) {    setErrorStatus("Encountered an internal error during delete volume job status processing: " + e.getMessage());    super.updateStatus(jobContext);    _log.error("Caught exception while handling updateStatus for delete volume job.",e);  }}  }
class C{  public Task<FileSnapshotRestRep> deleteShareACL(URI id,String shareName){  return deleteTask(getShareACLsUrl(),id,shareName);}  }
class C{  protected String paramString(){  return super.paramString();}  }
class C{  public boolean definesScaleGrid(){  return definesScaleGrid;}  }
class C{  public void addPatchResources(Collection<Resource> resources){  for (  Resource resource : resources)   addPatchResource(resource);}  }
class C{  public String syntaxHighlight(String line){  return htmlFilter(line);}  }
class C{  @Nullable public static PsiMethod findHashCodeMethod(PsiClass clazz){  PsiMethod[] methods=clazz.findMethodsByName("hashCode",false);  for (  PsiMethod method : methods) {    if (!method.hasModifierProperty(PsiModifier.PUBLIC)) {      continue;    }    if (method.hasModifierProperty(PsiModifier.STATIC)) {      continue;    }    PsiType returnType=method.getReturnType();    if (!PsiType.INT.equals(returnType)) {      continue;    }    PsiParameterList parameters=method.getParameterList();    if (parameters.getParametersCount() != 0) {      continue;    }    return method;  }  return null;}  }
class C{  public static TableWrapLayout createFormTableWrapLayout(boolean makeColumnsEqualWidth,int numColumns){  TableWrapLayout layout=new TableWrapLayout();  layout.topMargin=FORM_BODY_MARGIN_TOP;  layout.bottomMargin=FORM_BODY_MARGIN_BOTTOM;  layout.leftMargin=FORM_BODY_MARGIN_LEFT;  layout.rightMargin=FORM_BODY_MARGIN_RIGHT;  layout.horizontalSpacing=FORM_BODY_HORIZONTAL_SPACING;  layout.verticalSpacing=FORM_BODY_VERTICAL_SPACING;  layout.makeColumnsEqualWidth=makeColumnsEqualWidth;  layout.numColumns=numColumns;  return layout;}  }
class C{  public static boolean checkFolderName(String name){  return FOLDER_NAME.test(name);}  }
class C{  private String makeIdName(String type,int numId){  String[] tokens=type.split("[.]",8);  String shortType=type;  if (tokens.length > 1)   shortType=tokens[tokens.length - 1];  StringBuilder builder=new StringBuilder(shortType);  builder.append("_").append(String.format("%x",numId));  return builder.toString();}  }
class C{  public boolean contains(RosterEntry entry){synchronized (entries) {    return entries.contains(entry);  }}  }
class C{  public static int length(BinaryPositionReadable in,int start){  return in.readIntPositioned(start + GridBinaryMarshaller.TOTAL_LEN_POS);}  }
class C{  public void add(IPoint p){  points.insert(p);}  }
class C{  public int yToLine(int y){  FontMetrics fm=painter.getFontMetrics();  int height=fm.getHeight();  return Math.max(0,Math.min(getLineCount() - 1,y / height + firstLine));}  }
class C{  public long position(Blob pattern,long start) throws SQLException {  throw new FBDriverNotCapableException("Method position(Blob, long) is not supported");}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.guideLinePaint,stream);  SerialUtilities.writeStroke(this.guideLineStroke,stream);}  }
class C{  protected PropertyImpl(){  super();}  }
class C{  public int resolveOrAddValue(final IIndex termsIndex,final boolean readOnly,final IKeyBuilder keyBuilder,final byte[] baseKey,final byte[] val,final byte[] tmp,final AtomicInteger bucketSize){  assert baseKey.length == BlobsIndexHelper.SIZEOF_PREFIX_KEY : "Expecting " + BlobsIndexHelper.SIZEOF_PREFIX_KEY + " bytes, not "+ baseKey.length;  final byte[] fromKey=baseKey;  final byte[] toKey=makeToKey(fromKey,tmp);  final long rangeCount=termsIndex.rangeCount(fromKey,toKey);  if (bucketSize != null)   bucketSize.set((int)rangeCount);  if (rangeCount == 0 && readOnly) {    return NOT_FOUND;  }  if (rangeCount >= MAX_COUNTER) {    throw new CollisionBucketSizeException(rangeCount);  }  if (rangeCount == 0) {    assert !readOnly;    final byte[] key=makeKey(keyBuilder.reset(),baseKey,(int)rangeCount);    if (termsIndex.insert(key,val) != null) {      throw new AssertionError();    }    return (int)rangeCount;  }  final ITupleIterator<?> itr=termsIndex.rangeIterator(fromKey,toKey,0,IRangeQuery.KEYS | IRangeQuery.VALS,null);  while (itr.hasNext()) {    final ITuple<?> tuple=itr.next();    if (tuple.isNull()) {      continue;    }    final ByteArrayBuffer tb=tuple.getValueBuffer();    if (0 == BytesUtil.compareBytesWithLenAndOffset(0,val.length,val,0,tb.limit(),tb.array())) {      final short asFoundCounter=KeyBuilder.decodeShort(tuple.getKeyBuffer().array(),OFFSET_COUNTER);      return asFoundCounter;    }  }  if (readOnly) {    return NOT_FOUND;  }  final byte[] key=makeKey(keyBuilder.reset(),baseKey,(int)rangeCount);  if (termsIndex.insert(key,val) != null) {    throw new AssertionError();  }  if (rangeCount >= LOG_WARN_COUNTER_THRESHOLD) {    log.warn("Collision: hashCode=" + BytesUtil.toString(key) + ", collisionBucketSize="+ rangeCount);  }  return (int)rangeCount;}  }
class C{  public boolean isRange(){  Object oo=get_Value(COLUMNNAME_IsRange);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String dumpWithReset(){  return dumpWithReset(new ConcurrentLinkedQueue<Item>(),null);}  }
class C{  private void runUntrustedCode(){  try {    task.setErrorHandlingOption(IEngineTask.CANCEL_ON_ERROR);    task.run();    if (!task.getErrors().isEmpty()) {      handleExceptionsFromTask();    }  } catch (  EngineException t) {    LOG.error(NLS.bind(Messages.REPORT_RENDER_EXCEPTION_0,task.getReportRunnable().getDesignInstance().getReport().getQualifiedName()),t);    Throwable cause=t.getCause();    if (cause instanceof ReportSecurityException) {      throw (ReportSecurityException)cause;    }  } finally {    task.close();  }}  }
class C{  public void onLaserFinish(){}  }
class C{  public void println(String s){  long now=System.currentTimeMillis();  if (now > lastPrint + 1000) {    lastPrint=now;    long time=now - start;    printlnWithTime(time,getClass().getName() + " " + s);  }}  }
class C{  private void endArguments(){  if (argumentStack % 2 != 0) {    buf.append('>');  }  argumentStack/=2;}  }
class C{  private String createFolderName(final int timestep){  StringBuilder buffer=new StringBuilder(30);  buffer.append("Traffic from ");  buffer.append(this.timestepToString(timestep - 1));  buffer.append(" to ");  buffer.append(this.timestepToString(timestep));  buffer.append(" o'clock");  return buffer.toString();}  }
class C{  public boolean stepTest(final Player player,final String text){  logger.debug(">>> " + text);  speakerNPC.remove("text");  final Sentence sentence=ConversationParser.parse(text);  if (sentence.hasError()) {    logger.warn("problem parsing the sentence '" + text + "': "+ sentence.getErrorString());  }  final boolean res=step(player,sentence);  logger.debug("<<< " + speakerNPC.get("text"));  return res;}  }
class C{  public void testGetRoleToken(){  List<User> users=User.parseUsers("u1:p1:r1,r2|u2:p2:r2,r3");  configuration.getUsers().addAll(users);  String token=((AbstractOrionStandaloneLocalConfiguration)configuration).getRoleToken();  assertTrue(token.contains("<security-role-mapping name=\"r1\">" + "<user name=\"u1\"/></security-role-mapping>"));  assertTrue(token.contains("<security-role-mapping name=\"r2\">" + "<user name=\"u1\"/><user name=\"u2\"/></security-role-mapping>"));  assertTrue(token.contains("<security-role-mapping name=\"r3\">" + "<user name=\"u2\"/></security-role-mapping>"));}  }
class C{  public R removeWithLeft(L leftValue){  R rightValue=tableLeft.remove(leftValue);  if (rightValue != null)   tableRight.remove(rightValue);  return rightValue;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode05.class,args);}  }
class C{  void doConstrainedMaxCScores(List<String> sentence,Grammar grammar,Lexicon lexicon,final boolean scale){  short[] numSubStatesArray=grammar.numSubStates;  double initVal=Double.NEGATIVE_INFINITY;  maxcScore=new double[length][length + 1][numStates];  maxcSplit=new int[length][length + 1][numStates];  maxcChild=new int[length][length + 1][numStates];  maxcLeftChild=new int[length][length + 1][numStates];  maxcRightChild=new int[length][length + 1][numStates];  ArrayUtil.fill(maxcScore,Double.NEGATIVE_INFINITY);  double logNormalizer=iScore[0][length][0][0];  for (int diff=1; diff <= length; diff++) {    for (int start=0; start < (length - diff + 1); start++) {      int end=start + diff;      Arrays.fill(maxcSplit[start][end],-1);      Arrays.fill(maxcChild[start][end],-1);      Arrays.fill(maxcLeftChild[start][end],-1);      Arrays.fill(maxcRightChild[start][end],-1);      if (diff > 1) {        for (int pState=0; pState < numSubStatesArray.length; pState++) {          if (!allowedStates[start][end][pState])           continue;          BinaryRule[] parentRules=grammar.splitRulesWithP(pState);          int nParentStates=numSubStatesArray[pState];          for (int i=0; i < parentRules.length; i++) {            BinaryRule r=parentRules[i];            int lState=r.leftChildState;            int rState=r.rightChildState;            int narrowR=narrowRExtent[start][lState];            boolean iPossibleL=(narrowR < end);            if (!iPossibleL) {              continue;            }            int narrowL=narrowLExtent[end][rState];            boolean iPossibleR=(narrowL >= narrowR);            if (!iPossibleR) {              continue;            }            int min1=narrowR;            int min2=wideLExtent[end][rState];            int min=(min1 > min2 ? min1 : min2);            if (min > narrowL) {              continue;            }            int max1=wideRExtent[start][lState];            int max2=narrowL;            int max=(max1 < max2 ? max1 : max2);            if (min > max) {              continue;            }            double[][][] scores=r.getScores2();            int nLeftChildStates=numSubStatesArray[lState];            int nRightChildStates=numSubStatesArray[rState];            double scoreToBeat=maxcScore[start][end][pState];            for (int split=min; split <= max; split++) {              double ruleScore=0;              if (!allowedStates[start][split][lState])               continue;              if (!allowedStates[split][end][rState])               continue;              double leftChildScore=maxcScore[start][split][lState];              double rightChildScore=maxcScore[split][end][rState];              if (leftChildScore == initVal || rightChildScore == initVal)               continue;              double scalingFactor=0.0;              if (scale)               scalingFactor=Math.log(ScalingTools.calcScaleFactor(oScale[start][end][pState] + iScale[start][split][lState] + iScale[split][end][rState] - iScale[0][length][0]));              double gScore=leftChildScore + scalingFactor + rightChildScore;              if (gScore < scoreToBeat)               continue;              for (int lp=0; lp < nLeftChildStates; lp++) {                double lIS=iScore[start][split][lState][lp];                if (lIS == 0)                 continue;                for (int rp=0; rp < nRightChildStates; rp++) {                  if (scores[lp][rp] == null)                   continue;                  double rIS=iScore[split][end][rState][rp];                  if (rIS == 0)                   continue;                  for (int np=0; np < nParentStates; np++) {                    double pOS=oScore[start][end][pState][np];                    if (pOS == 0)                     continue;                    double ruleS=scores[lp][rp][np];                    if (ruleS == 0)                     continue;                    ruleScore+=(pOS * ruleS * lIS* rIS) / logNormalizer;                  }                }              }              if (ruleScore == 0)               continue;              if (doVariational) {                double norm=0;                for (int np=0; np < nParentStates; np++) {                  norm+=oScore[start][end][pState][np] / logNormalizer * iScore[start][end][pState][np];                }                ruleScore/=norm;              }              gScore+=Math.log(ruleScore);              if (gScore > scoreToBeat) {                scoreToBeat=gScore;                maxcScore[start][end][pState]=gScore;                maxcSplit[start][end][pState]=split;                maxcLeftChild[start][end][pState]=lState;                maxcRightChild[start][end][pState]=rState;              }            }          }        }      } else {        for (int tag=0; tag < numSubStatesArray.length; tag++) {          if (!allowedStates[start][end][tag])           continue;          int nTagStates=numSubStatesArray[tag];          String word=sentence.get(start);          if (grammar.isGrammarTag(tag))           continue;          double[] lexiconScoreArray=lexicon.score(word,(short)tag,start,false,false);          double lexiconScores=0;          for (int tp=0; tp < nTagStates; tp++) {            double pOS=oScore[start][end][tag][tp];            double ruleS=lexiconScoreArray[tp];            lexiconScores+=(pOS * ruleS) / logNormalizer;          }          double scalingFactor=0.0;          if (doVariational)           lexiconScores=1; else           if (scale)           scalingFactor=Math.log(ScalingTools.calcScaleFactor(oScale[start][end][tag] - iScale[0][length][0]));          maxcScore[start][end][tag]=Math.log(lexiconScores) + scalingFactor;        }      }      double[] maxcScoreStartEnd=new double[numStates];      for (int i=0; i < numStates; i++) {        maxcScoreStartEnd[i]=maxcScore[start][end][i];      }      double[][] ruleScores=null;      if (doVariational)       ruleScores=new double[numStates][numStates];      boolean foundOne=false;      for (int pState=0; pState < numSubStatesArray.length; pState++) {        if (!allowedStates[start][end][pState])         continue;        int nParentStates=numSubStatesArray[pState];        UnaryRule[] unaries=grammar.getClosedSumUnaryRulesByParent(pState);        if (doVariational)         unaries=grammar.getUnaryRulesByParent(pState).toArray(new UnaryRule[0]);        for (int r=0; r < unaries.length; r++) {          UnaryRule ur=unaries[r];          int cState=ur.childState;          if ((pState == cState))           continue;          if (iScore[start][end][cState] == null)           continue;          double childScore=maxcScore[start][end][cState];          if (childScore == initVal)           continue;          double scalingFactor=0.0;          if (scale)           scalingFactor=Math.log(ScalingTools.calcScaleFactor(oScale[start][end][pState] + iScale[start][end][cState] - iScale[0][length][0]));          double gScore=scalingFactor + childScore;          if (gScore < maxcScoreStartEnd[pState])           continue;          double[][] scores=ur.getScores2();          int nChildStates=numSubStatesArray[cState];          double ruleScore=0;          for (int cp=0; cp < nChildStates; cp++) {            double cIS=iScore[start][end][cState][cp];            if (cIS == 0)             continue;            if (scores[cp] == null)             continue;            for (int np=0; np < nParentStates; np++) {              double pOS=oScore[start][end][pState][np];              if (pOS < 0)               continue;              double ruleS=scores[cp][np];              if (ruleS == 0)               continue;              ruleScore+=(pOS * ruleS * cIS) / logNormalizer;              foundOne=true;            }          }          if (ruleScore == 0)           continue;          if (doVariational) {            double norm=0;            for (int np=0; np < nParentStates; np++) {              norm+=oScore[start][end][pState][np] / logNormalizer * iScore[start][end][pState][np];            }            ruleScore/=norm;            ruleScores[pState][cState]=Math.max(ruleScore,ruleScores[pState][cState]);          }          gScore+=Math.log(ruleScore);          if (gScore > maxcScoreStartEnd[pState]) {            maxcScoreStartEnd[pState]=gScore;            maxcChild[start][end][pState]=cState;          }        }      }      if (foundOne && doVariational)       maxcScoreStartEnd=closeVariationalRules(ruleScores,start,end);      maxcScore[start][end]=maxcScoreStartEnd;    }  }}  }
class C{  @Inline static void compilePutfieldBarrierWord(Assembler asm,GPR offset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,offset,locationMetadata,Entrypoints.wordFieldWriteBarrierMethod);}  }
class C{  private boolean hasNewFollowers(List<Follower> followers){  return !followers.isEmpty() && followers.get(0).newFollower;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x1A46CFE7,version=271) public int sceUsbCamStillPollInputEnd(){  return 0;}  }
class C{  public static void main(String[] args){  TestJavascript tester=new TestJavascript();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public static byte[] toPrimitive(final Byte[] array,final byte valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_BYTE_ARRAY;  }  final byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    Byte b=array[i];    result[i]=b == null ? valueForNull : b.byteValue();  }  return result;}  }
class C{  private boolean areAllNodeEnded(){  if (protocol != null && protocol.hasProtocol()) {    final Collection<ProtocolNode> protocolNodes=protocolNodeParticipantMap.values();    if (protocolNodes.isEmpty()) {      return false;    }    for (    final ProtocolNode node : protocolNodes) {      if (!(node != null && node.isTerminal())) {        return false;      }    }    return true;  }  final Collection<FIPAMessage> finalMsgs=noProtocolNodeParticipantMap.values();  if (finalMsgs.isEmpty()) {    return false;  }  for (  final FIPAMessage finalMsg : finalMsgs) {    if (finalMsg.getPerformative() != FIPAConstants.Performatives.END_CONVERSATION) {      return false;    }  }  return true;}  }
class C{  @Override public ExampleSet createExampleSet(Map<Attribute,String> specialAttributes){  return new SimpleExampleSet(this,specialAttributes);}  }
class C{  private Multimap<Class<?>,Subscriber> findAllSubscribers(Object listener){  Multimap<Class<?>,Subscriber> methodsInListener=HashMultimap.create();  Class<?> clazz=listener.getClass();  for (  Method method : getAnnotatedMethods(clazz)) {    Class<?>[] parameterTypes=method.getParameterTypes();    Class<?> eventType=parameterTypes[0];    methodsInListener.put(eventType,Subscriber.create(bus,listener,method));  }  return methodsInListener;}  }
class C{  public boolean equals(Object objectToCompare){  if (this == objectToCompare) {    return true;  }  if (objectToCompare == null) {    return false;  }  if (!(objectToCompare instanceof Aspect)) {    return false;  }  if (null == this.getId())   return false;  if (this.getClass().equals(objectToCompare.getClass())) {    if (this.getId().equals(((Aspect)objectToCompare).getId())) {      return true;    }  }  return false;}  }
class C{  public static SpatialGrid readFromFile(String filename){  BufferedReader reader=IOUtils.getBufferedReader(filename);  String line;  SpatialGrid sg=null;  try {    sg=initSpatialGrid(filename);    String[] header=reader.readLine().split(SpatialGridTableWriter.separator);    String[] parts;    double yCoord, xCoord, value;    while ((line=reader.readLine()) != null) {      parts=line.split(SpatialGridTableWriter.separator);      if (parts.length == header.length) {        yCoord=Double.parseDouble(parts[0]);        for (int i=1; i < header.length; i++) {          xCoord=Double.parseDouble(header[i]);          value=Double.parseDouble(parts[i]);          sg.setMirroredValue(sg.getRow(yCoord),sg.getColumn(xCoord),value);        }      }    }  } catch (  IOException ioe) {    ioe.printStackTrace();  }  return sg;}  }
class C{  public Union createSrcResources(){  return sourceResources;}  }
class C{  public Matrix4f swap(Matrix4f other){  MemUtil.INSTANCE.swap(this,other);  byte props=properties;  this.properties=other.properties();  other.properties=props;  return this;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (null != m_template) {    XPathContext xctxt=transformer.getXPathContext();    VariableStack vars=xctxt.getVarStack();    int thisframe=vars.getStackFrame();    int nextFrame=vars.link(m_template.m_frameSize);    if (m_template.m_inArgsSize > 0) {      vars.clearLocalSlots(0,m_template.m_inArgsSize);      if (null != m_paramElems) {        int currentNode=xctxt.getCurrentNode();        vars.setStackFrame(thisframe);        int size=m_paramElems.length;        for (int i=0; i < size; i++) {          ElemWithParam ewp=m_paramElems[i];          if (ewp.m_index >= 0) {            XObject obj=ewp.getValue(transformer,currentNode);            vars.setLocalVariable(ewp.m_index,obj,nextFrame);          }        }        vars.setStackFrame(nextFrame);      }    }    SourceLocator savedLocator=xctxt.getSAXLocator();    try {      xctxt.setSAXLocator(m_template);      transformer.pushElemTemplateElement(m_template);      m_template.execute(transformer);    }  finally {      transformer.popElemTemplateElement();      xctxt.setSAXLocator(savedLocator);      vars.unlink(thisframe);    }  } else {    transformer.getMsgMgr().error(this,XSLTErrorResources.ER_TEMPLATE_NOT_FOUND,new Object[]{m_templateName});  }}  }
class C{  public static IStatus validateIdentifier(String id,String sourceLevel,String complianceLevel){  if (scannedIdentifier(id,sourceLevel,complianceLevel) != null) {    return JavaModelStatus.VERIFIED_OK;  } else {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.bind(Messages.convention_illegalIdentifier,id),null);  }}  }
class C{  public static void encode(InputStream in,Writer out) throws IOException {  int column=0;  while (true) {    int byte1=in.read();    int byte2=in.read();    int byte3=in.read();    if (byte1 < 0) {      return;    }    if (column >= 72) {      column=0;      out.write('\n');    }    out.write(charset[byte1 >> 2]);    int index=(byte1 & 0x3) << 4;    if (byte2 < 0) {      out.write(charset[index]);      out.write(paddingChar);      out.write(paddingChar);      return;    }    index+=byte2 >> 4;    out.write(charset[index]);    index=(byte2 & 0xf) << 2;    if (byte3 < 0) {      out.write(charset[index]);      out.write(paddingChar);      return;    }    index+=byte3 >> 6;    out.write(charset[index]);    out.write(charset[byte3 & 0x3f]);    column+=4;  }}  }
class C{  public ControllerEvent(Controller controller,Type type){  super(controller);  this.type=type;}  }
class C{  public static cuComplex cuConj(cuComplex x){  return cuCmplx(cuCreal(x),-cuCimag(x));}  }
class C{  private String generateEncodedParticipantInfos(Map<ContactId,ParticipantStatus> participants){  StringBuilder builder=new StringBuilder();  int size=participants.size();  for (  Map.Entry<ContactId,ParticipantStatus> participant : participants.entrySet()) {    builder.append(participant.getKey());    builder.append(PARTICIPANT_INFO_STATUS_SEPARATOR);    builder.append(participant.getValue().toInt());    if (--size != 0) {      builder.append(PARTICIPANT_INFO_PARTICIPANT_SEPARATOR);    }  }  return builder.toString();}  }
class C{  public double parseDate(String string) throws ParseException {switch (m_Type) {case DATE:    long time=((DateAttributeInfo)m_AttributeInfo).m_DateFormat.parse(string).getTime();  return time;default :throw new IllegalArgumentException("Can only parse date values for date" + " attributes!");}}  }
class C{  public SolrDao(GeocoderConfiguration geocoder_conf){  specialChars.put(":","<colon>");  specialChars.put("$","<dollar>");  specialChars.put("(","<lpar>");  specialChars.put(")","<rpar>");  geocoder=new CachedGeocoder(new NominatimGeocoder(geocoder_conf));  solrClient=new HttpSolrClient("");}  }
class C{  public TopHitsBuilder addSort(String field,SortOrder order){  sourceBuilder().sort(field,order);  return this;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public InlineQueryResultContact build(){  return new InlineQueryResultContact(id,phone_number,first_name,last_name,reply_markup,input_message_content,thumb_url,thumb_width,thumb_height);}  }
class C{  public static void waitAndClick(WebDriver driver,By locator) throws InterruptedException {  Actions actions=new Actions(driver);  WebDriverWait wait=new WebDriverWait(driver,10);  wait.until(ExpectedConditions.elementToBeClickable(locator));  WebElement webElement=driver.findElement(locator);  ((JavascriptExecutor)driver).executeScript("arguments[0].scrollIntoView(true);",webElement);  Thread.sleep(500);  actions.moveToElement(webElement).click().build().perform();}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  public void removeRole(Role role){  roles.remove(role.getId());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.PROVIDED_RUNTIME_LIBRARIES__PROVIDED_RUNTIME_LIBRARIES:    return getProvidedRuntimeLibraries();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean simplify_offline(){  return soot.PhaseOptions.getBoolean(options,"simplify-offline");}  }
class C{  private JCas runTest(String aLanguage,String aVariant,String aDocument) throws Exception {  AssumeResource.assumeResource(OpenNlpParser.class,"parser",aLanguage,aVariant);  AnalysisEngineDescription parser=createEngineDescription(OpenNlpParser.class,OpenNlpParser.PARAM_VARIANT,aVariant,OpenNlpParser.PARAM_PRINT_TAGSET,true,OpenNlpParser.PARAM_WRITE_POS,true,OpenNlpParser.PARAM_WRITE_PENN_TREE,true);  return TestRunner.runTest(parser,aLanguage,aDocument);}  }
class C{  public boolean isValidAttachmentPoint(DatapathId switchDPID,OFPort switchPort){  if (topology.isAttachmentPointPort(switchDPID,switchPort) == false)   return false;  if (suppressAPs.contains(new SwitchPort(switchDPID,switchPort)))   return false;  return true;}  }
class C{  public static boolean cancelPotentialWork(Object data,ImageView imageView){  final BitmapWorkerTask bitmapWorkerTask=getBitmapWorkerTask(imageView);  if (bitmapWorkerTask != null) {    final Object bitmapData=bitmapWorkerTask.mData;    if (bitmapData == null || !bitmapData.equals(data)) {      bitmapWorkerTask.cancel(true);    } else {      return false;    }  }  return true;}  }
class C{  public static RequiredGraphModel serializableInstance(){  return new RequiredGraphModel(new Parameters(),GraphWrapper.serializableInstance());}  }
class C{  protected void sequence_AnyType(ISerializationContext context,AnyType semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getAnyTypeAccess().getNameAnyKeyword_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  private void updateRange(double value){  mMinValue=Math.min(mMinValue,value);  mMaxValue=Math.max(mMaxValue,value);}  }
class C{  public boolean isInJavadocText(){  return false;}  }
class C{  public void addLoop(S2Loop loop){  int sign=loop.sign();  for (int i=loop.numVertices(); i > 0; --i) {    addEdge(loop.vertex(i),loop.vertex(i + sign));  }}  }
class C{  public boolean onReceivedHttpAuthRequest(CordovaWebView view,ICordovaHttpAuthHandler handler,String host,String realm){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null && plugin.onReceivedHttpAuthRequest(app,handler,host,realm)) {      return true;    }  }  return false;}  }
class C{  public String generate(){  KeyNamePair docTypeKNPair=(KeyNamePair)cmbDocType.getSelectedItem().toKeyNamePair();  String docActionSelected=(String)docAction.getValue();  return generate(form.getStatusBar(),docTypeKNPair,docActionSelected);}  }
class C{  public static void clearClassCache(){  clearCache();  m_ClassCache=new ClassCache();}  }
class C{  public void testOptionArgsRequired() throws Exception {  CommandTestTools.initFileType();  validateNextArgument("command positional_argument --available-option","option argument");}  }
class C{  public boolean hasNames(){  return mHasNames;}  }
class C{  private AngularCLIImageResource(){}  }
class C{  public void testRemove(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.remove());  }  try {    q.remove();    shouldThrow();  } catch (  NoSuchElementException success) {  }}  }
class C{  public static boolean isPerspectiveSupported(){  return Display.impl.isPerspectiveTransformSupported();}  }
class C{  public EventType defineEvent(String name,String description,EventAttribute attribute){  if (state == State.SHUT_DOWN)   return null;  EventType result=new EventType(name,description,attribute);  internalDefineEvent(result);  return result;}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  private void sleepIfPossible(){  if (isUseSleep()) {    if (checks < MAX_CHECKS_ON_SLEEP) {      timeBefore=System.nanoTime();    }    try {      sleep(sleepMillis,sleepNanos);    } catch (    InterruptedException e) {      throw new ActiveMQInterruptedException(e);    }catch (    Exception e) {      setUseSleep(false);      ActiveMQJournalLogger.LOGGER.warn(e.getMessage() + ", disabling sleep on TimedBuffer, using spin now",e);    }    if (checks < MAX_CHECKS_ON_SLEEP) {      long realTimeSleep=System.nanoTime() - timeBefore;      if (realTimeSleep > timeout * 1.5) {        failedChecks++;      }      if (++checks >= MAX_CHECKS_ON_SLEEP) {        if (failedChecks > MAX_CHECKS_ON_SLEEP * 0.5) {          ActiveMQJournalLogger.LOGGER.debug("Thread.sleep with nano seconds is not working as expected, Your kernel possibly doesn't support real time. the Journal TimedBuffer will spin for timeouts");          setUseSleep(false);        }      }    }  }}  }
class C{  public final void close() throws IOException {}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  float scale=convertNumber(filterElement,SVG_SCALE_ATTRIBUTE,0,ctx);  ARGBChannel xChannelSelector=convertChannelSelector(filterElement,SVG_X_CHANNEL_SELECTOR_ATTRIBUTE,ARGBChannel.A,ctx);  ARGBChannel yChannelSelector=convertChannelSelector(filterElement,SVG_Y_CHANNEL_SELECTOR_ATTRIBUTE,ARGBChannel.A,ctx);  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Filter in2=getIn2(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in2 == null) {    return null;  }  Rectangle2D defaultRegion;  defaultRegion=(Rectangle2D)in.getBounds2D().clone();  defaultRegion.add(in2.getBounds2D());  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  PadRable pad=new PadRable8Bit(in,primitiveRegion,PadMode.ZERO_PAD);  List srcs=new ArrayList(2);  srcs.add(pad);  srcs.add(in2);  Filter displacementMap=new DisplacementMapRable8Bit(srcs,scale,xChannelSelector,yChannelSelector);  handleColorInterpolationFilters(displacementMap,filterElement);  PadRable filter=new PadRable8Bit(displacementMap,primitiveRegion,PadMode.ZERO_PAD);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  public static String stripAnchor(String url){  int anchorIndex=url.indexOf('#');  if (anchorIndex != -1) {    return url.substring(0,anchorIndex);  }  return url;}  }
class C{  @Override public UpdateResponse addBean(Object obj) throws IOException, SolrServerException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.addBean(obj);  if (this.solr1 != null)   ur=this.solr1.addBean(obj);  return ur;}  }
class C{  public static void putAt(Date self,int field,int value){  Calendar cal=Calendar.getInstance();  cal.setTime(self);  putAt(cal,field,value);  self.setTime(cal.getTimeInMillis());}  }
class C{  public ObjectFactory(){}  }
class C{  public WalkBlocker(){  super(1,1);  setRPClass("walkblocker");  put("type","walkblocker");  setResistance(100);}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){  firePropertyChange(propertyName,Boolean.valueOf(oldValue),Boolean.valueOf(newValue));}  }
class C{  public Period subAssign(final Period another){  return this.addAssign(another.clone().negative());}  }
class C{  public DocumentListFeed search(Map<String,String> searchParameters) throws IOException, MalformedURLException, ServiceException, DocumentListException {  return search(searchParameters,null);}  }
class C{  public ChangeableServer(String url){  super(url);  this.url=url;  this.name=DEFAULT_NAME;}  }
class C{  protected double measureKernelEvaluations(){  if (m_optimizer != null) {    return m_optimizer.getKernelEvaluations();  } else {    return 0;  }}  }
class C{  public static boolean sendMessage(Email message) throws EmailException {  message.setSentDate(new Date());  message.send();  return true;}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_name_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public void testInvalidLongitude() throws Exception {  testInvalidGpx(INVALID_LONGITUDE_GPX);}  }
class C{  @Override public long position(Blob blobPattern,long start) throws SQLException {  if (isDebugEnabled()) {    debugCode("position(blobPattern, " + start + ");");  }  if (Constants.BLOB_SEARCH) {    try {      checkClosed();      if (blobPattern == null) {        return -1;      }      ByteArrayOutputStream out=new ByteArrayOutputStream();      InputStream in=blobPattern.getBinaryStream();      while (true) {        int x=in.read();        if (x < 0) {          break;        }        out.write(x);      }      return position(out.toByteArray(),start);    } catch (    Exception e) {      throw logAndConvert(e);    }  }  throw unsupported("LOB subset");}  }
class C{  private ArrayList<Signature> mergeClusterCores(final int binCount,ArrayList<Signature> signatures){  MutableProgress mergeProgress=LOG.isVerbose() ? new MutableProgress("Merging signatures",signatures.size(),LOG) : null;  int[] firstdim=new int[signatures.size()];  for (int i=0; i < signatures.size(); i++) {    firstdim[i]=signatures.get(i).getFirstDim();  }  LOG.debug("First dimensions: " + FormatUtil.format(firstdim));  ArrayList<Signature> clusterCores=new ArrayList<>(signatures);  for (int i=0; i < clusterCores.size(); i++) {    final Signature parent=clusterCores.get(i);    final int end=parent.getFirstDim();    for (int j=0; j < signatures.size() && firstdim[j] < end; j++) {      final Signature onesig=signatures.get(j);      final Signature merge=mergeSignatures(parent,onesig,binCount);      if (merge != null) {        clusterCores.add(merge);        parent.prune=true;        onesig.prune=true;      }    }    if (mergeProgress != null) {      mergeProgress.setTotal(clusterCores.size());      mergeProgress.incrementProcessed(LOG);    }  }  if (mergeProgress != null) {    mergeProgress.setProcessed(mergeProgress.getTotal(),LOG);  }  return clusterCores;}  }
class C{  public final <T extends Event>void addEventHandler(EventType<T> eventType,EventHandler<? super T> eventHandler){  eventHandlers.addEventHandler(eventType,eventHandler);}  }
class C{  public boolean isElement(String name){  return elements.containsKey(name);}  }
class C{  public void putAny(byte[] s,int byteCount){  java.lang.System.arraycopy(s,0,bytes,start - byteCount,byteCount);  start-=byteCount;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Attr addrAttr;  String resultAttr;  String resultNamespaceURI;  String resultLocalName;  String resultPrefix;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  ((Element)testAddr).setAttributeNS("http://www.nist.gov","newprefix:zone","newValue");  addrAttr=((Element)testAddr).getAttributeNodeNS("http://www.nist.gov","zone");  resultAttr=((Element)testAddr).getAttributeNS("http://www.nist.gov","zone");  assertEquals("attrValue","newValue",resultAttr);  resultNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("nsuri","http://www.nist.gov",resultNamespaceURI);  resultLocalName=addrAttr.getLocalName();  assertEquals("lname","zone",resultLocalName);  resultPrefix=addrAttr.getPrefix();  assertEquals("prefix","newprefix",resultPrefix);}  }
class C{  public double tdy(final double y1,final double y2){  double height=this.height;  if (Math.abs(y1 - y2) <= height / 2)   return y1 - y2;  double dy=sty(y1,height) - sty(y2,height);  if (dy * 2 > height)   return dy - height;  if (dy * 2 < -height)   return dy + height;  return dy;}  }
class C{  @Override public int read() throws IOException {  int c=in.read();  if (c >= 0) {    incrementValue(1);  }  return c;}  }
class C{  public void assertArrayEqual(byte[] expected,byte[] actual,String errorMessage){  TestUtils.assertArrayEqual(expected,actual,errorMessage);}  }
class C{  public void addAxiom(int i,int j,Rule rule,SourcePath srcPath){  if (null == this.cells.get(i,j)) {    this.cells.set(i,j,new Cell(this,this.goalSymbolID));  }  this.cells.get(i,j).addHyperEdgeInCell(new ComputeNodeResult(this.featureFunctions,rule,null,i,j,srcPath,sentence),rule,i,j,null,srcPath,false);}  }
class C{  public double queryUtil(){  try {    return (new SamplingAlgorithm()).queryUtil(this);  } catch (  Exception e) {    log.warning("cannot perform inference: " + e);    return 0.0;  }}  }
class C{  HTTPExchange(final AbstractBody req){  if (req == null) {    throw (new IllegalArgumentException("Request body cannot be null"));  }  request=req;}  }
class C{  protected static Map<String,String> loadResource(String name){  InputStream input=CharSetMap.class.getResourceAsStream(name);  if (input != null) {    try {      return loadStream(input);    } catch (    IOException x) {      return null;    }  } else {    return null;  }}  }
class C{  public FunctionblockSwitch(){  if (modelPackage == null) {    modelPackage=FunctionblockPackage.eINSTANCE;  }}  }
class C{  private boolean isServiceExisted(Context context,String serviceName){  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.RunningServiceInfo> serviceList=activityManager.getRunningServices(Integer.MAX_VALUE);  for (int i=0; i < serviceList.size(); i++) {    RunningServiceInfo serviceInfo=serviceList.get(i);    ComponentName componentName=serviceInfo.service;    if (componentName.getClassName().equals(serviceName)) {      return true;    }  }  return false;}  }
class C{  public boolean isSocialPresence(){  return mSocialPresence;}  }
class C{  public TraceEvent(final long tid,final BreakpointAddress address,final TraceEventType type,final List<TraceRegister> values){  traceEventBreakpointAddress=Preconditions.checkNotNull(address,"IE00775: Address argument can not be null");  traceEventType=Preconditions.checkNotNull(type,"IE00776: Type argument can not be null");  traceEventSourceThreadId=tid;  traceValues=ImmutableList.copyOf(values);}  }
class C{  static public int floorPositive(float x){  return (int)x;}  }
class C{  public boolean isSetSessionIDs(){  return this.sessionIDs != null;}  }
class C{  public void addPreparedStatement(Object object){  String sql=sqlThreadLocalStack.getLast();  preparedStatements.put(object,new QueryInformation(sql));  if (LOG.isDebugEnabled()) {    LOG.debug("Recorded prepared sql statement: " + sql);  }}  }
class C{  protected File selectFile(String directoryName){  JFileChooser fc=jmri.jmrit.XmlFile.userFileChooser(Bundle.getMessage("ExcelProgramFiles"),"xls","xlsm");  fc.setCurrentDirectory(OperationsManager.getInstance().getFile(directoryName));  fc.setDialogTitle(Bundle.getMessage("FindDesiredExcelFile"));  fc.rescanCurrentDirectory();  int retVal=fc.showOpenDialog(null);  if (retVal == JFileChooser.APPROVE_OPTION) {    File file=fc.getSelectedFile();    return file;  }  return null;}  }
class C{  public void copyFromV3f(Vector3f input,float w){  points[0]=(input.x());  points[1]=(input.y());  points[2]=(input.z());  points[3]=(w);}  }
class C{  boolean isDrawingFinished(){  return currentRadius >= getEndRippleRadius();}  }
class C{  public void add(EncryptedKey encryptedKey) throws XMLEncryptionException {  if (encryptedKeys == null) {    encryptedKeys=new ArrayList<EncryptedKey>();  }  encryptedKeys.add(encryptedKey);  XMLCipher cipher=XMLCipher.getInstance();  this.constructionElement.appendChild(cipher.martial(encryptedKey));}  }
class C{  @Override void open(File dbFile,int mode) throws Exception {  mydb=connector.newSQLiteConnection(dbFile.getAbsolutePath(),mode);}  }
class C{  private void runListPermissions(){  try {    boolean labels=false;    boolean groups=false;    boolean userOnly=false;    boolean summary=false;    boolean dangerousOnly=false;    String opt;    while ((opt=nextOption()) != null) {      if (opt.equals("-f")) {        labels=true;      } else       if (opt.equals("-g")) {        groups=true;      } else       if (opt.equals("-s")) {        groups=true;        labels=true;        summary=true;      } else       if (opt.equals("-u")) {        userOnly=true;      } else       if (opt.equals("-d")) {        dangerousOnly=true;      } else {        System.err.println("Error: Unknown option: " + opt);        return;      }    }    String grp=nextOption();    ArrayList<String> groupList=new ArrayList<String>();    if (groups) {      List<PermissionGroupInfo> infos=mPm.getAllPermissionGroups(0);      for (int i=0; i < infos.size(); i++) {        groupList.add(infos.get(i).name);      }      groupList.add(null);    } else {      groupList.add(grp);    }    if (dangerousOnly) {      System.out.println("Dangerous Permissions:");      System.out.println("");      doListPermissions(groupList,groups,labels,summary,PermissionInfo.PROTECTION_DANGEROUS,PermissionInfo.PROTECTION_DANGEROUS);      if (userOnly) {        System.out.println("Normal Permissions:");        System.out.println("");        doListPermissions(groupList,groups,labels,summary,PermissionInfo.PROTECTION_NORMAL,PermissionInfo.PROTECTION_NORMAL);      }    } else     if (userOnly) {      System.out.println("Dangerous and Normal Permissions:");      System.out.println("");      doListPermissions(groupList,groups,labels,summary,PermissionInfo.PROTECTION_NORMAL,PermissionInfo.PROTECTION_DANGEROUS);    } else {      System.out.println("All Permissions:");      System.out.println("");      doListPermissions(groupList,groups,labels,summary,-10000,10000);    }  } catch (  RemoteException e) {    System.err.println(e.toString());    System.err.println(PM_NOT_RUNNING_ERR);  }}  }
class C{  private String generalize(String detailedMessage){  return (generalizer != null) ? generalizer.generalize(detailedMessage) : detailedMessage;}  }
class C{  private static int capAtMaximumSize(int queueSize,int maximumSize){  return Math.min(queueSize - 1,maximumSize) + 1;}  }
class C{  private int availableRow(TicTacToeBoard board,char mark){  int c, r;  int ct=0;  for (c=0; c < board.numColumns(); c++) {    if (countMark(board,c,0,0,1,board.numRows(),mark) >= 0) {      ct++;    }  }  for (r=0; r < board.numRows(); r++) {    if (countMark(board,0,r,1,0,board.numColumns(),mark) >= 0) {      ct++;    }  }  if (countMark(board,0,0,1,1,board.numColumns(),mark) >= 0) {    ct++;  }  if (countMark(board,0,2,1,-1,board.numColumns(),mark) >= 0) {    ct++;  }  return ct;}  }
class C{  @Override public void addGameScreenText(double x,double y,String text,NotificationType type,boolean isTalking){}  }
class C{  public final MutableDouble2D multiplyIn(final double val){  x=x * val;  y=y * val;  return this;}  }
class C{  public static boolean isBase64(final String base64){  return isBase64(StringUtils.getBytesUtf8(base64));}  }
class C{  @SuppressWarnings("unchecked") private Comparable increment(Object value,Number step){  return (Comparable)plus((Number)value,step);}  }
class C{  public void close(){  close(true);}  }
class C{  public void updateThemeHashtable(Hashtable themeRes){  if (disableRefresh) {    return;  }  String uiid=prefix;  String item=(String)componentName.getSelectedItem();  if (item != null && item.length() > 0) {    uiid=item + "." + prefix;  }  removeKeys(themeRes,uiid);  if (!defineAttribute.isSelected()) {    String val=(String)baseStyle.getSelectedItem();    if (val != null && val.length() > 0) {switch (baseStyleType.getSelectedIndex()) {case 0:        themeRes.put(uiid + "derive",val);      break;case 1:    themeRes.put(uiid + "derive",val + ".sel");  break;case 2:themeRes.put(uiid + "derive",val + ".press");break;case 3:themeRes.put(uiid + "derive",val + ".dis");break;}}}if (!deriveAlignment.isSelected()) {switch (alignmentCombo.getSelectedIndex()) {case 0:themeRes.put(uiid + "align",new Integer(com.codename1.ui.Component.LEFT));break;case 1:themeRes.put(uiid + "align",new Integer(com.codename1.ui.Component.RIGHT));break;default :themeRes.put(uiid + "align",new Integer(com.codename1.ui.Component.CENTER));break;}}if (!deriveBackground.isSelected()) {int index=backgroundType.getSelectedIndex();themeRes.put(uiid + "bgType",new Byte(BACKGROUND_VALUES[index]));if (backgroundType.getSelectedIndex() >= BACKGROUND_VALUES_GRADIENT_ARRAY_OFFSET) {themeRes.put(uiid + "bgGradient",new Object[]{Integer.valueOf(gradientStartColor.getText(),16),Integer.valueOf(gradientEndColor.getText(),16),new Float(((Number)gradientX.getValue()).floatValue()),new Float(((Number)gradientY.getValue()).floatValue()),new Float(((Number)gradientSize.getValue()).floatValue())});} else {if (imagesCombo.getSelectedItem() != null && imagesCombo.getSelectedItem().toString().length() > 0) {themeRes.put(uiid + "bgImage",resources.getImage((String)imagesCombo.getSelectedItem()));} else {brokenImage=true;themeRes.put(uiid + "bgImage",com.codename1.ui.Image.createImage(5,5));}}}if (!deriveBackgroundColor.isSelected()) {themeRes.put(uiid + "bgColor",colorValueBG.getText());}if (!deriveBorder.isSelected()) {if (currentBorder == null) {themeRes.remove(uiid + "border");} else {themeRes.put(uiid + "border",currentBorder);}}if (!deriveFont.isSelected()) {Object v;if (bitmapFont.isSelected()) {String val=(String)bitmapFontValue.getSelectedItem();if (val != null) {v=resources.getFont(val);} else {v=Font.getDefaultFont();}} else {if (trueTypeFont.getSelectedIndex() > 0) {Font sys=Font.createSystemFont(FONT_FACE_VALUES[fontFace.getSelectedIndex()],FONT_STYLE_VALUES[fontStyle.getSelectedIndex()],FONT_SIZE_VALUES[fontSize.getSelectedIndex()]);String selectedItem=(String)trueTypeFont.getSelectedItem();if (selectedItem.startsWith("native:")) {v=new EditorTTFFont(selectedItem,trueTypeFontSizeOption.getSelectedIndex(),((Number)trueTypeFontSizeValue.getValue()).floatValue(),sys);} else {v=new EditorTTFFont(new File(ResourceEditorView.getLoadedFile().getParentFile(),selectedItem),trueTypeFontSizeOption.getSelectedIndex(),((Number)trueTypeFontSizeValue.getValue()).floatValue(),sys);}} else {v=Font.createSystemFont(FONT_FACE_VALUES[fontFace.getSelectedIndex()],FONT_STYLE_VALUES[fontStyle.getSelectedIndex()],FONT_SIZE_VALUES[fontSize.getSelectedIndex()]);}}themeRes.put(uiid + "font",v);}if (!deriveForegroundColor.isSelected()) {themeRes.put(uiid + "fgColor",colorValueFG.getText());}if (!deriveMargin.isSelected()) {themeRes.put(uiid + "margin",marginTop.getValue() + "," + marginBottom.getValue()+ ","+ marginLeft.getValue()+ ","+ marginRight.getValue());byte[] padUnit=new byte[4];padUnit[com.codename1.ui.Component.BOTTOM]=(byte)marginBottomUnit.getSelectedIndex();padUnit[com.codename1.ui.Component.TOP]=(byte)marginTopUnit.getSelectedIndex();padUnit[com.codename1.ui.Component.LEFT]=(byte)marginLeftUnit.getSelectedIndex();padUnit[com.codename1.ui.Component.RIGHT]=(byte)marginRightUnit.getSelectedIndex();updateThemeRes(padUnit,themeRes,uiid + "marUnit");}if (!derivePadding.isSelected()) {themeRes.put(uiid + "padding",paddingTop.getValue() + "," + paddingBottom.getValue()+ ","+ paddingLeft.getValue()+ ","+ paddingRight.getValue());byte[] padUnit=new byte[4];padUnit[com.codename1.ui.Component.BOTTOM]=(byte)paddingBottomUnit.getSelectedIndex();padUnit[com.codename1.ui.Component.TOP]=(byte)paddingTopUnit.getSelectedIndex();padUnit[com.codename1.ui.Component.LEFT]=(byte)paddingLeftUnit.getSelectedIndex();padUnit[com.codename1.ui.Component.RIGHT]=(byte)paddingRightUnit.getSelectedIndex();updateThemeRes(padUnit,themeRes,uiid + "padUnit");}if (!deriveTextDecoration.isSelected()) {Object v;switch (textDecorationCombo.getSelectedIndex()) {case 1:v=new Integer(com.codename1.ui.plaf.Style.TEXT_DECORATION_UNDERLINE);break;case 2:v=new Integer(com.codename1.ui.plaf.Style.TEXT_DECORATION_STRIKETHRU);break;case 3:v=new Integer(com.codename1.ui.plaf.Style.TEXT_DECORATION_3D);break;case 4:v=new Integer(com.codename1.ui.plaf.Style.TEXT_DECORATION_3D_LOWERED);break;case 5:v=new Integer(com.codename1.ui.plaf.Style.TEXT_DECORATION_3D_SHADOW_NORTH);break;default :v=new Integer(0);break;}themeRes.put(uiid + "textDecoration",v);}if (!deriveTransparency.isSelected()) {themeRes.put(uiid + "transparency","" + transparencyValue.getValue());}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public Item deleteBack(){  Item itemToReturn=getBack();  items[size - 1]=null;  size=size - 1;  return itemToReturn;}  }
class C{  final public int loadSigned8(int addr){  try {    return readableMemory[AbstractMemory.getPTE(addr)][AbstractMemory.getOffset(addr)];  } catch (  NullPointerException e) {    System.err.println("Null pointer exception at address: 0x" + Integer.toHexString(addr));    throw e;  }}  }
class C{  public void snippetResin3xStartAndStopUntyped(){  Deployable war=new DefaultDeployableFactory().createDeployable("resin3x","path/to/simple.war",DeployableType.WAR);  ConfigurationFactory configurationFactory=new DefaultConfigurationFactory();  LocalConfiguration configuration=(LocalConfiguration)configurationFactory.createConfiguration("resin3x",ContainerType.INSTALLED,ConfigurationType.STANDALONE);  configuration.addDeployable(war);  InstalledLocalContainer container=(InstalledLocalContainer)new DefaultContainerFactory().createContainer("resin3x",ContainerType.INSTALLED,configuration);  container.setHome("c:/apps/resin-3.0.18");  container.start();  container.stop();}  }
class C{  public boolean isHash(){  return hash;}  }
class C{  protected AVList readCoordinateSystem() throws IOException {  if (this.prjChannel == null)   return null;  String text=WWIO.readChannelToString(this.prjChannel,null);  if (WWUtil.isEmpty(text))   return null;  return WorldFile.decodeOGCCoordinateSystemWKT(text,null);}  }
class C{  private static double transform(double coord,double min,double res){  return (coord - min) / res;}  }
class C{  public RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion){  this.waitForCompletion=waitForCompletion;  return this;}  }
class C{  public void put(int i,T value){  int index=i - low;  if (map == null) {    map=new Object[INITIAL_SIZE];    low=index - 2;    map[INITIAL_SIZE / 2]=value;  } else   if (index < 0) {    growBackward(i,value);  } else   if (index >= map.length) {    growForward(i,value);  } else {    map[index]=value;  }}  }
class C{  private void writePkgInfo() throws BuildException {  File pkgInfo=new File(mContentsDir,"PkgInfo");  PrintWriter writer=null;  try {    writer=new PrintWriter(new BufferedWriter(new FileWriter(pkgInfo)));    writer.print(bundleProperties.getCFBundlePackageType());    writer.println(bundleProperties.getCFBundleSignature());    writer.flush();  } catch (  IOException ex) {    throw new BuildException("Cannot create PkgInfo file: " + ex);  } finally {    mFileUtils.close(writer);  }}  }
class C{  public EDIPartyName(DerValue derValue) throws IOException {  DerInputStream in=new DerInputStream(derValue.toByteArray());  DerValue[] seq=in.getSequence(2);  int len=seq.length;  if (len < 1 || len > 2)   throw new IOException("Invalid encoding of EDIPartyName");  for (int i=0; i < len; i++) {    DerValue opt=seq[i];    if (opt.isContextSpecific(TAG_ASSIGNER) && !opt.isConstructed()) {      if (assigner != null)       throw new IOException("Duplicate nameAssigner found in" + " EDIPartyName");      opt=opt.data.getDerValue();      assigner=opt.getAsString();    }    if (opt.isContextSpecific(TAG_PARTYNAME) && !opt.isConstructed()) {      if (party != null)       throw new IOException("Duplicate partyName found in" + " EDIPartyName");      opt=opt.data.getDerValue();      party=opt.getAsString();    }  }}  }
class C{  public String handle(){  return clientHandle;}  }
class C{  private boolean isZero(double r,int k,double alpha){  if (pdf() == null || pdf().getK() != k) {    this.cutoff=cutoff(k,alpha);  }  return Math.abs(r) <= this.cutoff;}  }
class C{  public void testBug27655() throws Exception {  Properties props=new Properties();  props.setProperty("profileSQL","true");  props.setProperty("logger","StandardLogger");  StandardLogger.startLoggingToBuffer();  Connection loggedConn=null;  try {    loggedConn=getConnectionWithProps(props);    loggedConn.getTransactionIsolation();    if (versionMeetsMinimum(4,0,3)) {      assertEquals(-1,StandardLogger.getBuffer().toString().indexOf("SHOW VARIABLES LIKE 'tx_isolation'"));    }  }  finally {    StandardLogger.dropBuffer();    if (loggedConn != null) {      loggedConn.close();    }  }}  }
class C{  private static int UnregisterNatives(JNIEnvironment env,int classJREF){  if (traceJNI)   VM.sysWrite("JNI called: UnregisterNatives  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Class<?> jcls=(Class<?>)env.getJNIRef(classJREF);    RVMType type=java.lang.JikesRVMSupport.getTypeForClass(jcls);    if (!type.isClassType()) {      env.recordException(new NoClassDefFoundError());      return -1;    }    RVMClass klass=type.asClass();    if (!klass.isInitialized()) {      return 0;    }    klass.unregisterNativeMethods();    return 0;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return -1;  }}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  if (type != null) {    name(builder);    attributes(builder);  }  return builder.toString();}  }
class C{  public static double normalInverse(double y0){  double x, y, z, y2, x0, x1;  int code;  final double s2pi=Math.sqrt(2.0 * Math.PI);  if (y0 <= 0.0) {    throw new IllegalArgumentException();  }  if (y0 >= 1.0) {    throw new IllegalArgumentException();  }  code=1;  y=y0;  if (y > (1.0 - 0.13533528323661269189)) {    y=1.0 - y;    code=0;  }  if (y > 0.13533528323661269189) {    y=y - 0.5;    y2=y * y;    x=y + y * (y2 * polevl(y2,P0,4) / p1evl(y2,Q0,8));    x=x * s2pi;    return (x);  }  x=Math.sqrt(-2.0 * Math.log(y));  x0=x - Math.log(x) / x;  z=1.0 / x;  if (x < 8.0) {    x1=z * polevl(z,P1,8) / p1evl(z,Q1,8);  } else {    x1=z * polevl(z,P2,8) / p1evl(z,Q2,8);  }  x=x0 - x1;  if (code != 0) {    x=-x;  }  return (x);}  }
class C{  private XMLParseException expectedInput(String charSet){  String msg="Expected: " + charSet;  return new XMLParseException(this.getName(),this.parserLineNr,msg);}  }
class C{  public String genotypeToStringForHumans(){  StringBuffer sb=new StringBuffer("");  for (int i=0; i < genome.length; i++) {    sb.append(" ");    sb.append(genome[i]);  }  sb.append(". Expression: " + expression);  return sb.toString();}  }
class C{  public int size(){  return columns * rows;}  }
class C{  @Override public int hashCode(){  int h=hash;  if (h == 0) {    for (    int id : ids) {      h=31 * h + id;    }    hash=h;  }  return hash;}  }
class C{  public void test_Constructor_Throwable_String() throws Exception {  UndeclaredThrowableException e=new UndeclaredThrowableException(throwable,msg);  assertEquals("Wrong cause returned",throwable,e.getCause());  assertEquals("Wrong throwable returned",throwable,e.getUndeclaredThrowable());  assertEquals("Wrong message returned",msg,e.getMessage());}  }
class C{  private System(){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.IMPORT_SPECIFIER__FLAGGED_USED_IN_CODE:    setFlaggedUsedInCode((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @SuppressWarnings("unchecked") public final void testSetValidators(){  CharSequence errorMessage="errorMessage";  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",true);  Validator<Object>[] validators1=new Validator[1];  validators1[0]=validator1;  Validator<Object>[] validators2=new Validator[2];  validators2[0]=validator1;  validators2[1]=validator2;  ConjunctiveValidator<Object> conjunctiveValidator=new ConjunctiveValidator<>(errorMessage,validators1);  conjunctiveValidator.setValidators(validators2);  assertEquals(validators2,conjunctiveValidator.getValidators());}  }
class C{  public LobbyClient login(){  if (!m_serverProperties.isServerAvailable()) {    JOptionPane.showMessageDialog(m_parent,m_serverProperties.serverErrorMessage,"Could not connect to server",JOptionPane.ERROR_MESSAGE);    return null;  }  if (m_serverProperties.port == -1) {    if (ClientFileSystemHelper.areWeOldExtraJar()) {      JOptionPane.showMessageDialog(m_parent,"<html>Could not find lobby server for this version of TripleA, <br>Please make sure you are using the latest version: " + UrlConstants.LATEST_GAME_DOWNLOAD_WEBSITE + "<br /><br />This is because you are using an old engine that is kept for backwards compatibility. "+ "<br /><b>In order to load your Old savegames in the New lobby, you must First join the lobby with the latest engine, Then host a game, Then load the old savegame!</b></html>","Could not connect to server",JOptionPane.ERROR_MESSAGE);    } else {      JOptionPane.showMessageDialog(m_parent,"<html>Could not find lobby server for this version of TripleA, <br>Please make sure you are using the latest version: " + UrlConstants.LATEST_GAME_DOWNLOAD_WEBSITE + "</html>","Could not connect to server",JOptionPane.ERROR_MESSAGE);    }    return null;  }  return loginToServer();}  }
class C{  protected RemoteCandidate findRelatedCandidate(TransportAddress relatedAddress){  return getParentComponent().findRemoteCandidate(relatedAddress);}  }
class C{  public Picture(File file){  try {    image=ImageIO.read(file);  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Could not open file: " + file);  }  if (image == null) {    throw new RuntimeException("Invalid image file: " + file);  }  width=image.getWidth(null);  height=image.getHeight(null);  filename=file.getName();}  }
class C{  private void validateParameters(Subscription sub,String productInstanceId){  if (productInstanceId != null) {    assertEquals(sub.getProductInstanceId(),servicePort.getInstanceId());  }  ParameterSet paramSet=sub.getParameterSet();  List<Parameter> parameters=servicePort.getParameters();  assertNotNull(parameters);  assertEquals(ParamDefOneTime ? 1 : 2,parameters.size());  int paramIndex=0;  if (!ParamDefOneTime) {    Parameter serviceParam1=parameters.get(paramIndex);    assertEquals(paramSet.getParameters().get(paramIndex).getValue(),serviceParam1.getValue());    assertEquals(paramSet.getParameters().get(paramIndex).getParameterDefinition().getParameterId(),serviceParam1.getParameterDefinition().getParameterId());    paramIndex++;  }  Parameter serviceParam2=parameters.get(paramIndex);  assertEquals("NonConfigurable",serviceParam2.getParameterDefinition().getParameterId());  assertEquals("123",serviceParam2.getValue());}  }
class C{  protected HmtxTable(TrueTypeFont ttf){  super(TrueTypeTable.HMTX_TABLE);  MaxpTable maxp=(MaxpTable)ttf.getTable("maxp");  int numGlyphs=maxp.getNumGlyphs();  HheaTable hhea=(HheaTable)ttf.getTable("hhea");  int numOfLongHorMetrics=hhea.getNumOfLongHorMetrics();  advanceWidths=new short[numOfLongHorMetrics];  leftSideBearings=new short[numGlyphs];}  }
class C{  private void rule_AlgebraicSimplification(Hop hop,boolean descendFirst) throws HopsException {  if (hop.getVisited() == Hop.VisitStatus.DONE)   return;  for (int i=0; i < hop.getInput().size(); i++) {    Hop hi=hop.getInput().get(i);    if (descendFirst)     rule_AlgebraicSimplification(hi,descendFirst);    hi=removeUnnecessaryVectorizeOperation(hi);    hi=removeUnnecessaryBinaryOperation(hop,hi,i);    hi=fuseDatagenAndBinaryOperation(hi);    hi=fuseDatagenAndMinusOperation(hi);    hi=simplifyBinaryToUnaryOperation(hop,hi,i);    hi=canonicalizeMatrixMultScalarAdd(hi);    hi=simplifyReverseOperation(hop,hi,i);    hi=simplifyMultiBinaryToBinaryOperation(hi);    hi=simplifyDistributiveBinaryOperation(hop,hi,i);    hi=simplifyBushyBinaryOperation(hop,hi,i);    hi=simplifyUnaryAggReorgOperation(hop,hi,i);    hi=simplifyBinaryMatrixScalarOperation(hop,hi,i);    hi=pushdownUnaryAggTransposeOperation(hop,hi,i);    hi=pushdownSumBinaryMult(hop,hi,i);    hi=simplifyUnaryPPredOperation(hop,hi,i);    hi=simplifyTransposedAppend(hop,hi,i);    hi=fuseBinarySubDAGToUnaryOperation(hop,hi,i);    hi=simplifyTraceMatrixMult(hop,hi,i);    hi=simplifySlicedMatrixMult(hop,hi,i);    hi=simplifyConstantSort(hop,hi,i);    hi=simplifyOrderedSort(hop,hi,i);    hi=removeUnnecessaryReorgOperation(hop,hi,i);    hi=simplifyTransposeAggBinBinaryChains(hop,hi,i);    hi=removeUnnecessaryMinus(hop,hi,i);    hi=simplifyGroupedAggregate(hi);    hi=fuseMinusNzBinaryOperation(hop,hi,i);    hi=fuseLogNzUnaryOperation(hop,hi,i);    hi=fuseLogNzBinaryOperation(hop,hi,i);    hi=simplifyOuterSeqExpand(hop,hi,i);    hi=simplifyTableSeqExpand(hop,hi,i);    if (!descendFirst)     rule_AlgebraicSimplification(hi,descendFirst);  }  hop.setVisited(Hop.VisitStatus.DONE);}  }
class C{  public static double[][] square(double[][] mat){  int m=Matrix.getNumOfRows(mat);  int n=Matrix.getNumOfColumns(mat);  double[][] res=Matrix.newMatrix(m,m);  for (int i=0; i < m; ++i) {    res[i][i]=0.0;    for (int k=0; k < n; ++k) {      res[i][i]+=mat[i][k] * mat[i][k];    }    for (int j=0; j < i; ++j) {      res[i][j]=0.0;      for (int k=0; k < n; ++k) {        res[i][j]+=mat[i][k] * mat[j][k];      }      res[j][i]=res[i][j];    }  }  return (res);}  }
class C{  void initializeHeldLocks(InternalDistributedMember owner,Set tokens) throws InterruptedException {synchronized (this) {    if (isDestroyed())     return;    if (!acquireDestroyReadLock(0)) {      return;    }  }  try {synchronized (this.grantTokens) {      Set members=this.dlock.getDistributionManager().getDistributionManagerIds();      final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);      for (Iterator iter=tokens.iterator(); iter.hasNext(); ) {        DLockRemoteToken token=(DLockRemoteToken)iter.next();        DLockGrantToken grantToken=getOrCreateGrant(token.getName());        try {          if (!members.contains(owner)) {            if (isDebugEnabled_DLS) {              logger.trace(LogMarker.DLS,"Initialization of held locks is skipping {} because owner {} is not in view: ",token,owner,members);            }            continue;          }          RemoteThread rThread=null;          boolean isSuspendLock=false;          int lockId=-1;synchronized (grantToken) {            if (grantToken.isLeaseHeld()) {              logger.error(LogMarker.DLS,LocalizedMessage.create(LocalizedStrings.DLockGrantor_INITIALIZATION_OF_HELD_LOCKS_IS_SKIPPING_0_BECAUSE_LOCK_IS_ALREADY_HELD_1,new Object[]{token,grantToken}));              continue;            }            grantToken.grantLock(owner,token.getLeaseExpireTime(),token.getLeaseId(),token.getLesseeThread());            if (grantToken.getLeaseExpireTime() > -1 && grantToken.getLeaseExpireTime() < Long.MAX_VALUE) {              long now=DLockService.getLockTimeStamp(this.dm);              this.thread.checkTimeToWait(grantToken.getLeaseExpireTime() - now,true);            }            rThread=grantToken.getRemoteThread();            isSuspendLock=grantToken.isSuspendLockingToken();            lockId=grantToken.getLockId();          }synchronized (suspendLock) {            if (isSuspendLock) {              suspendLocking(rThread,lockId);            } else {              Assert.assertTrue(!isLockingSuspended() || isLockingSuspendedBy(rThread),"Locking is suspended by a different thread: " + token);              Integer integer=(Integer)readLockCountMap.get(rThread);              int readLockCount=integer == null ? 0 : integer.intValue();              readLockCount++;              readLockCountMap.put(rThread,Integer.valueOf(readLockCount));              totalReadLockCount++;              checkTotalReadLockCount();            }          }        }  finally {          grantToken.decAccess();        }      }    }    return;  }  finally {    releaseDestroyReadLock();  }}  }
class C{  public void test_8_2_3() throws Exception {  if (!store.isQuads())   return;  new TestHelper("named-graphs-8-2-3","named-graphs-8-2-3.rq","named-graphs-8-2-3.trig","named-graphs-8-2-3.srx").runTest();}  }
class C{  private static void cleanStaleMaskReferences(ExportGroup exportGroup,DbClient dbClient){  StringSet exportMasks=exportGroup.getExportMasks();  if (!CollectionUtils.isEmpty(exportMasks)) {    List<URI> staleMasks=new ArrayList<>();    StringSet exportGroupInitiators=exportGroup.getInitiators();    for (    String mask : exportMasks) {      boolean isStaleMask=false;      URI maskURI=null;      try {        maskURI=URI.create(mask);      } catch (      Exception e) {        _log.error(e.getMessage(),e);        isStaleMask=true;      }      if (maskURI != null) {        ExportMask maskObj=dbClient.queryObject(ExportMask.class,maskURI);        if (maskObj != null && !CollectionUtils.isEmpty(maskObj.getInitiators())) {          isStaleMask=Sets.intersection(exportGroupInitiators,maskObj.getInitiators()).isEmpty();        } else {          isStaleMask=true;        }      }      if (isStaleMask) {        staleMasks.add(maskURI);        _log.info("Stale mask {} will be removed from Export Group {}",maskURI,exportGroup.getId());      }    }    if (!CollectionUtils.isEmpty(staleMasks)) {      exportGroup.removeExportMasks(staleMasks);    }  }}  }
class C{  private void ensureTable(Bigquery bigquery,TableReference table,List<TableFieldSchema> schema) throws IOException {  try {    bigquery.tables().insert(table.getProjectId(),table.getDatasetId(),new Table().setSchema(new TableSchema().setFields(schema)).setTableReference(table)).execute();    logger.infofmt("Created BigQuery table %s:%s.%s",table.getProjectId(),table.getDatasetId(),table.getTableId());  } catch (  IOException e) {    if (!BigqueryJobFailureException.create(e).getReason().equals("duplicate")) {      throw e;    }  }}  }
class C{  public AffineTransform cloneTransform(){  return new AffineTransform(transform);}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public void testWriterPerformance() throws IOException {  StopWatch stopWatch=new StopWatch();  stopWatch.start();  List<TestTimeSeriesAPIEntity> entityList=new ArrayList<TestTimeSeriesAPIEntity>();  int i=0;  while (i++ < 100000) {    entityList.add(newInstance());    if (entityList.size() >= 1000) {      ModifyResult<String> result=storage.create(entityList,entityDefinition);      Assert.assertNotNull(result);      entityList.clear();    }  }  stopWatch.stop();  LOG.info("Wrote 100000 records in " + stopWatch.getTime() + " ms");}  }
class C{  @Override public Object[] toArray(){  return newArray(new Object[size()]);}  }
class C{  private boolean isPointContainedInBoundary(Coordinate pt){  return pt.x == rectEnv.getMinX() || pt.x == rectEnv.getMaxX() || pt.y == rectEnv.getMinY() || pt.y == rectEnv.getMaxY();}  }
class C{  public double manhattanDistance(final Double3D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  final double dz=Math.abs((double)this.z - p.z);  return dx + dy + dz;}  }
class C{  public CTaggingPanel(final JFrame parent,final ZyGraph graph,final ITagManager manager){  super(new BorderLayout());  m_tagsTree=new CTagsTree(parent,graph,manager);  final JScrollPane pane=new JScrollPane(m_tagsTree);  pane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);  pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);  add(pane);  setBorder(new TitledBorder(new LineBorder(Color.LIGHT_GRAY,1,true),"Tagging"));  setDoubleBuffered(true);}  }
class C{  public boolean validateAndInformPlayer(Player player,RPAction action){  String error=validate(player,action,null);  if ((error != null) && !error.trim().equals("")) {    tellIgnorePostman(player,error);  }  return error == null;}  }
class C{  public OrganizationRemovedException(String message){  super(message);}  }
class C{  public synchronized boolean isConnected(){  if (connected && socket != null) {    if (!socket.isConnected() || socket.isClosed() || socket.isInputShutdown()|| socket.isOutputShutdown()) {      try {        socket.close();      } catch (      IOException e) {        logger.error("Socket exception",e);      } finally {        connected=false;      }    } else {      if (m_useUrgentData) {        try {          socket.sendUrgentData(0);          try {            Thread.sleep(5);          } catch (          InterruptedException e) {          }        } catch (        IOException e) {          connected=false;          try {            socket.close();          } catch (          IOException e1) {          }        }      }    }  }  return connected;}  }
class C{  public static String dateString(final Date date){  return SimpleFormatter.format(date);}  }
class C{  public ClientResponse put(URI uri,String body){  return client.resource(uri).header(CinderConstants.AUTH_TOKEN_HEADER,authTokenHeader).put(ClientResponse.class,body);}  }
class C{  public void source(File file){  addArg("source",FileMisc.asUrl(file));}  }
class C{  public PollingScanDiskSpaceMonitor(Set<Path> watchPaths,long pollingIntervalMillis){  this.watchPaths=Collections.unmodifiableSet(new HashSet<>(watchPaths));  this.pollingIntervalMillis=pollingIntervalMillis;}  }
class C{  void trace(String s){  if (trace) {    System.out.println(s);  }}  }
class C{  public ConstLogistic(Type units){  super(units);}  }
class C{  public CommentToken(String str,int col,int sub,boolean pseudo){  type=Token.COMMENT;  column=col;  string=str;  rsubtype=sub;  subtype=0;switch (rsubtype) {case NORMAL:    delimiters=pseudo ? 2 : 4;  break;case LINE:case BEGIN_OVERRUN:case END_OVERRUN:delimiters=pseudo ? 0 : 2;break;case OVERRUN:break;default :Debug.ReportBug("CommentToken constructor called with illegal subtype");};}  }
class C{  public static Object create(Class listenerInterface,String listenerMethodName,Object target,String targetMethodName){  Method listenerMethod=getListenerMethod(listenerInterface,listenerMethodName);  Method targetMethod=getTargetMethod(target,targetMethodName,listenerMethod.getParameterTypes());  if (targetMethod == null) {    targetMethod=getTargetMethod(target,targetMethodName,new Class[0]);  }  if (targetMethod == null) {    throw new RuntimeException("no such method " + targetMethodName + " in "+ target.getClass());  }  return create(listenerMethod,target,targetMethod);}  }
class C{  public boolean matchesIgnoreCase(String sa){  if (_length != sa.length())   return false;  char[] buffer=_buffer;  int offset=_offset;  for (int i=_length - 1; i >= 0; i--) {    char ca=buffer[offset + i];    char cb=sa.charAt(i);    if (ca != cb && Character.toLowerCase(ca) != Character.toLowerCase(cb))     return false;  }  return true;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void copy(RepositoryLocation source,Folder destination,ProgressListener listener) throws RepositoryException {  copy(source,destination,null,listener);}  }
class C{  protected String isPathSet(String path){  String msg=null;  if (_warrant != null) {    if (path.equals(_pathName)) {      msg=_warrant.getDisplayName();    }  }  if (log.isDebugEnabled()) {    log.debug("Path \"" + path + "\" set in block \""+ getDisplayName()+ "\"= "+ (msg != null)+ ". _pathName= "+ _pathName);  }  return msg;}  }
class C{  public static boolean isOlderThan(String otherVersion){  return toLong(getVersion()) < toLong(otherVersion);}  }
class C{  protected String toPath(String className){  return toPath(className,languageSuffix);}  }
class C{  private void verifyBlockConsistencyGroupResults() throws Exception {  log.info("Verifying created BlockConsistencyGroups for RecoverPointConsistencyGroupMigration.");  List<URI> cgURIs=_dbClient.queryByType(BlockConsistencyGroup.class,false);  Iterator<BlockConsistencyGroup> cgs=_dbClient.queryIterativeObjects(BlockConsistencyGroup.class,cgURIs);  List<BlockConsistencyGroup> consistencyGroups=new ArrayList<BlockConsistencyGroup>();  while (cgs.hasNext()) {    consistencyGroups.add(cgs.next());  }  for (  URI protectionSetURI : rpTestProtectionSetURIs) {    ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,protectionSetURI);    Assert.assertNotNull(String.format("RecoverPoint test ProtectionSet %s not found",protectionSetURI),protectionSet);    BlockConsistencyGroup cg=null;    for (    BlockConsistencyGroup consistencyGroup : consistencyGroups) {      cg=consistencyGroup;      if (cg.getLabel().equals(protectionSet.getLabel())) {        break;      }    }    Project project=_dbClient.queryObject(Project.class,protectionSet.getProject());    Assert.assertTrue(String.format("Field deviceName is not properly set for consistency group %s",cg.getId().toString()),cg.getDeviceName().equals(protectionSet.getLabel()));    Assert.assertTrue(String.format("Field type should be set to RP for consistency group %s",cg.getId().toString()),cg.getType().equals(BlockConsistencyGroup.Types.RP.toString()));    Assert.assertTrue(String.format("Field project does not match the corresponding field for protection set %s",protectionSet.getId().toString()),project.getId().equals(protectionSet.getProject()));    Assert.assertTrue(String.format("Field tenant does not match the corresponding field for protection set %s",protectionSet.getId().toString()),cg.getTenant().getURI().equals(project.getTenantOrg().getURI()));    final URIQueryResultList cgVolumesResults=new URIQueryResultList();    _dbClient.queryByConstraint(getVolumesByConsistencyGroup(cg.getId().toString()),cgVolumesResults);    List<Volume> cgVolumes=new ArrayList<Volume>();    Iterator<URI> cgVolumeURIs=cgVolumesResults.iterator();    while (cgVolumeURIs.hasNext()) {      Volume cgVol=_dbClient.queryObject(Volume.class,cgVolumeURIs.next());      cgVolumes.add(cgVol);    }    for (    Volume cgVolume : cgVolumes) {      log.info(String.format("CG (%s) volume (%s) found.",cg.getLabel(),cgVolume.getLabel()));    }    Iterator<String> protectionSetVolumeURIs=protectionSet.getVolumes().iterator();    while (protectionSetVolumeURIs.hasNext()) {      boolean found=false;      String protectionSetVolumeURI=protectionSetVolumeURIs.next();      for (      Volume cgVolume : cgVolumes) {        if (cgVolume.getId().toString().equals(protectionSetVolumeURI)) {          found=true;          break;        }      }      Assert.assertTrue(String.format("All ProtectionSet volumes MUST be part of the BlockConsistencyGroup.  " + "ProtectionSet volume %s was not found in BlockConsistencyGroup %s.",protectionSetVolumeURI,cg.getId().toString()),found);    }  }}  }
class C{  public void deregisterSettingChangeListener(String key,SettingChangeListener listener){  List<SettingChangeListener> list=listeners.get("config. " + key);  if (list != null) {    list.remove(listener);  }}  }
class C{  public CProjectTreeModel(final JTree tree){  super(null);  m_tree=tree;}  }
class C{  public void removeAnnotation(Annotation annotation){  plotArea.removeAnnotation(annotation);}  }
class C{  protected final void notifyCreated(){  this.importItem.notifyTaskCreation();}  }
class C{  public int backend(){  String s=soot.PhaseOptions.getString(options,"backend");  if (s.equalsIgnoreCase("auto"))   return backend_auto;  if (s.equalsIgnoreCase("buddy"))   return backend_buddy;  if (s.equalsIgnoreCase("cudd"))   return backend_cudd;  if (s.equalsIgnoreCase("sable"))   return backend_sable;  if (s.equalsIgnoreCase("javabdd"))   return backend_javabdd;  if (s.equalsIgnoreCase("none"))   return backend_none;  throw new RuntimeException("Invalid value " + s + " of phase option backend");}  }
class C{  private Member runAddMemberTest() throws Exception {  connection.addMemberToGroup("spam@example.com","jim@example.com",Role.MEMBER);  Member expected=new Member();  expected.setEmail("jim@example.com");  expected.setRole("MEMBER");  verify(members).insert("spam@example.com",expected);  verify(membersInsert).execute();  return expected;}  }
class C{  @DELETE @Path("job/{noteId}/{paragraphId}") @ZeppelinApi public Response stopParagraph(@PathParam("noteId") String noteId,@PathParam("paragraphId") String paragraphId) throws IOException, IllegalArgumentException {  LOG.info("stop paragraph job {} ",noteId);  Note note=notebook.getNote(noteId);  if (note == null) {    return new JsonResponse<>(Status.NOT_FOUND,"note not found.").build();  }  Paragraph p=note.getParagraph(paragraphId);  if (p == null) {    return new JsonResponse<>(Status.NOT_FOUND,"paragraph not found.").build();  }  p.abort();  return new JsonResponse<>(Status.OK).build();}  }
class C{  public static boolean isValid(Timestamp validFrom,Timestamp validTo){  return isValid(validFrom,validTo,new Timestamp(System.currentTimeMillis()));}  }
class C{  public boolean removeProperty(VCardProperty property){  return properties.remove(property.getClass(),property);}  }
class C{  public static void endEntityViaReflection(HttpEntity entity){  if (entity instanceof HttpEntityWrapper) {    try {      Field f=null;      Field[] fields=HttpEntityWrapper.class.getDeclaredFields();      for (      Field ff : fields) {        if (ff.getName().equals("wrappedEntity")) {          f=ff;          break;        }      }      if (f != null) {        f.setAccessible(true);        HttpEntity wrapped=(HttpEntity)f.get(entity);        if (wrapped != null) {          wrapped.consumeContent();        }      }    } catch (    Throwable t) {      Log.e(LOG_TAG,"wrappedEntity consume",t);    }  }}  }
class C{  public static int reflectionCompare(final Object lhs,final Object rhs,final boolean compareTransients,final Class<?> reflectUpToClass,final String... excludeFields){  if (lhs == rhs) {    return 0;  }  if (lhs == null || rhs == null) {    throw new NullPointerException();  }  Class<?> lhsClazz=lhs.getClass();  if (!lhsClazz.isInstance(rhs)) {    throw new ClassCastException();  }  final CompareToBuilder compareToBuilder=new CompareToBuilder();  reflectionAppend(lhs,rhs,lhsClazz,compareToBuilder,compareTransients,excludeFields);  while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {    lhsClazz=lhsClazz.getSuperclass();    reflectionAppend(lhs,rhs,lhsClazz,compareToBuilder,compareTransients,excludeFields);  }  return compareToBuilder.toComparison();}  }
class C{  protected int computeIndexInPositionList(List<Position> positions,int offset,boolean orderedByOffset){  if (positions.size() == 0)   return 0;  int left=0;  int right=positions.size() - 1;  int mid=0;  Position p=null;  while (left < right) {    mid=(left + right) / 2;    p=(Position)positions.get(mid);    int pOffset=getOffset(orderedByOffset,p);    if (offset < pOffset) {      if (left == mid)       right=left; else       right=mid - 1;    } else     if (offset > pOffset) {      if (right == mid)       left=right; else       left=mid + 1;    } else     if (offset == pOffset) {      left=right=mid;    }  }  int pos=left;  p=(Position)positions.get(pos);  int pPosition=getOffset(orderedByOffset,p);  if (offset > pPosition) {    pos++;  } else {    do {      --pos;      if (pos < 0)       break;      p=(Position)positions.get(pos);      pPosition=getOffset(orderedByOffset,p);    } while (offset == pPosition);    ++pos;  }  Assert.isTrue(0 <= pos && pos <= positions.size());  return pos;}  }
class C{  @Override public Request<List<RunnerStatus>> processes(ProjectReference projectReference){  List<DummyRunnerStatus> current=currentRunnerStatuses.get(projectReference.name());  List<RunnerStatus> update=new ArrayList<>();  if (current != null) {    for (    DummyRunnerStatus dummyRunnerStatus : current) {      update.add(dummyRunnerStatus);    }  }  return new DummyRequest<>(update);}  }
class C{  private void updateUDPPacketIn(){  this.testUDPPacketSrld=this.testUDPPacket.serialize();  this.testUDPPacketIn=OFFactories.getFactory(OFVersion.OF_13).buildPacketIn().setBufferId(OFBufferId.NO_BUFFER).setMatch(OFFactories.getFactory(OFVersion.OF_13).buildMatch().setExact(MatchField.IN_PORT,OFPort.of(3)).build()).setData(this.testUDPPacketSrld).setReason(OFPacketInReason.NO_MATCH).build();}  }
class C{  private void updateAttendeeStatus(String uname) throws IOException, ServiceException {  OUT.println("Enter the id of event to update: ");  String eventId=IN.readLine();  OUT.println("Enter event response (1:Yes, 2:No, 3:Maybe)");  String selection;switch (readInt()) {case 1:    selection=Who.AttendeeStatus.EVENT_ACCEPTED;  break;case 2:selection=Who.AttendeeStatus.EVENT_DECLINED;break;case 3:selection=Who.AttendeeStatus.EVENT_TENTATIVE;break;default :OUT.println("Invalid selection.");return;}String eventEntryUrl=CALENDAR_FEEDS_PREFIX + uname + "/private/full/"+ eventId;String selectAttendee="@gd:etag,title,gd:who[@email='" + uname + "']";Query partialQuery=new Query(new URL(eventEntryUrl));partialQuery.setFields(selectAttendee);CalendarEventEntry event=service.getEntry(partialQuery.getUrl(),CalendarEventEntry.class);event.getParticipants().get(0).setAttendeeStatus(selection);String toUpdateFields="gd:who/gd:attendeeStatus";event=service.patch(new URL(eventEntryUrl),toUpdateFields,event);OUT.println(event.getTitle().getPlainText() + " updated to: " + event.getParticipants().get(0).getAttendeeStatus());}  }
class C{  public ExecutorCompletionService(Executor executor,BlockingQueue<Future<V>> completionQueue){  if (executor == null || completionQueue == null)   throw new NullPointerException();  this.executor=executor;  this.aes=(executor instanceof AbstractExecutorService) ? (AbstractExecutorService)executor : null;  this.completionQueue=completionQueue;}  }
class C{  public float magSq(){  return (x * x + y * y + z * z);}  }
class C{  public PolygonizeGraph(GeometryFactory factory){  this.factory=factory;}  }
class C{  public void seriesChanged(SeriesChangeEvent event){  this.lastEvent=event;}  }
class C{  public Set<SolutionUser> findSolutionUsers(String tenantName,String searchString,int limit) throws Exception {  return getService().findSolutionUsers(tenantName,searchString,limit,this.getServiceContext());}  }
class C{  public boolean isTrusted(){  return valid;}  }
class C{  public void addFooterView(View view,boolean reverse){  if (null == view) {    throw new IllegalArgumentException("the view to add must not be null!");  } else   if (mWrapAdapter == null) {    mTmpFooterView.add(view);  } else {    mWrapAdapter.addFooterView(view,reverse);  }}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 groundAnchorA,Vector2 groundAnchorB,Vector2 anchorA,Vector2 anchorB,float ratio){  this.bodyA=bodyA;  this.bodyB=bodyB;  this.groundAnchorA.set(groundAnchorA);  this.groundAnchorB.set(groundAnchorB);  this.localAnchorA.set(bodyA.getLocalPoint(anchorA));  this.localAnchorB.set(bodyB.getLocalPoint(anchorB));  lengthA=anchorA.dst(groundAnchorA);  lengthB=anchorB.dst(groundAnchorB);  this.ratio=ratio;  float C=lengthA + ratio * lengthB;}  }
class C{  public static void mult(CGPoint v,float s){  v.x*=s;  v.y*=s;}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer("Discrete Estimator. Counts = ");  if (m_SumOfCounts > 1) {    for (int i=0; i < m_Counts.length; i++) {      result.append(" ").append(Utils.doubleToString(m_Counts[i],2));    }    result.append("  (Total = ").append(Utils.doubleToString(m_SumOfCounts,2));    result.append(")\n");  } else {    for (int i=0; i < m_Counts.length; i++) {      result.append(" ").append(m_Counts[i]);    }    result.append("  (Total = ").append(m_SumOfCounts).append(")\n");  }  return result.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.117 -0500",hash_original_method="457BF63FCB5F5743303EA5CCFBD04779",hash_generated_method="3C6470CF292E197FFE72DA0E47EA6081") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AllowEventsParser.parse");  AllowEventsList list=new AllowEventsList();  try {    headerName(TokenTypes.ALLOW_EVENTS);    AllowEvents allowEvents=new AllowEvents();    allowEvents.setHeaderName(SIPHeaderNames.ALLOW_EVENTS);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    allowEvents.setEventType(token.getTokenValue());    list.add(allowEvents);    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      allowEvents=new AllowEvents();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      allowEvents.setEventType(token.getTokenValue());      list.add(allowEvents);      this.lexer.SPorHT();    }    this.lexer.SPorHT();    this.lexer.match('\n');    return list;  }  finally {    if (debug)     dbg_leave("AllowEventsParser.parse");  }}  }
class C{  public void jumpToCurrentState(){  if (runningAnimation != null) {    final AnimatedView view=getTarget();    if (view != null && view.getAnimator() == runningAnimation) {      runningAnimation.cancel();    }  }}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  String resultString=result.getText();  if (resultString.equals("")) {    Toast.makeText(CaptureActivity.this,"Scan failed!",Toast.LENGTH_SHORT).show();  }  setResult(RESULT_OK,new Intent().putExtra(RESULT_QRCODE_STRING,resultString));  finish();}  }
class C{  private IRTMPEvent decodeClientBW(IoBuffer in){  return new ClientBW(in.getInt(),in.get());}  }
class C{  public void testGenerateMergedFileNoOrigConflict() throws Exception {  File mergedCodebaseLocation=new File("merged_codebase_7");  expect(fileSystem.getTemporaryDirectory("merged_codebase_")).andReturn(mergedCodebaseLocation);  File origFile=new File("orig/foo");  expect(orig.getFile("foo")).andReturn(origFile);  expect(fileSystem.exists(origFile)).andReturn(false);  origFile=new File("/dev/null");  File destFile=new File("dest/foo");  expect(dest.getFile("foo")).andReturn(destFile);  expect(fileSystem.exists(destFile)).andReturn(true);  File modFile=new File("mod/foo");  expect(mod.getFile("foo")).andReturn(modFile);  expect(fileSystem.exists(modFile)).andReturn(true);  File mergedFile=new File("merged_codebase_7/foo");  fileSystem.makeDirsForFile(mergedFile);  fileSystem.copyFile(destFile,mergedFile);  List<String> mergeArgs=ImmutableList.of(mergedFile.getAbsolutePath(),origFile.getAbsolutePath(),modFile.getAbsolutePath());  expect(cmd.runCommand("merge",mergeArgs,mergedCodebaseLocation.getAbsolutePath())).andThrow(new CommandRunner.CommandException("merge",mergeArgs,"","",1));  control.replay();  CodebaseMerger merger=new CodebaseMerger(ui,fileSystem,cmd,null,orig,mod,dest);  merger.generateMergedFile("foo");  control.verify();  assertEquals(0,merger.getMergedFiles().size());  assertTrue(merger.getFailedToMergeFiles().contains(mergedFile.getAbsolutePath()));}  }
class C{  public static int println(final int priority,final String tag,final String message){  if (delegate != null && enabled) {    return delegate.println(priority,tag,message);  }  return -1;}  }
class C{  public HttpPrincipal(String username,String realm){  if (username == null || realm == null) {    throw new NullPointerException();  }  this.username=username;  this.realm=realm;}  }
class C{  private ArrayImmutableBlockBuffer(BlockPalette palette,BackingData data,Vector3i start,Vector3i size){  super(start,size);  this.data=data;  this.palette=palette;}  }
class C{  protected void advect(int b,float[] d,float[] d0,float[] du,float[] dv){  int i0, j0;  float x, y, s0, t0, s1, t1, scaledTime;  float wmax=width + 0.5f;  float hmax=height + 0.5f;  scaledTime=timeStep * width;  for (int i=1, j=1, idx=i + totalWidth; j <= height; ) {    x=i - scaledTime * du[idx];    y=j - scaledTime * dv[idx];    if (x > wmax) {      x=wmax;    }    if (x < 0.5f) {      x=0.5f;    }    i0=(int)x;    if (y > hmax) {      y=hmax;    }    if (y < 0.5f) {      y=0.5f;    }    j0=(int)y;    s1=x - i0;    s0=1 - s1;    t1=y - j0;    t0=1 - t1;    int idx0=i0 + j0 * totalWidth;    d[idx]=s0 * (t0 * d0[idx0] + t1 * d0[idx0 + totalWidth]) + s1 * (t0 * d0[idx0 + 1] + t1 * d0[idx0 + totalWidth + 1]);    if (i < width) {      i++;      idx++;    } else {      i=1;      j++;      idx+=3;    }  }  setBoundary(b,d);}  }
class C{  public Multiply(){  super(Number.class,Number.class,Number.class);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(identifier);  v.add(encryptedKey);  return new DERSequence(v);}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.start_service_bt:    this.service.startDownload(OBJECT_IMAGE_URL);  break;}}  }
class C{  public static Time add(Time t1,Time t2){  Time sum=new Time();  sum.hour=t1.hour + t2.hour;  sum.minute=t1.minute + t2.minute;  sum.second=t1.second + t2.second;  return sum;}  }
class C{  private static void createTitle(final Shell shell,final String title,final NotifierColors colors){  final Label titleLabel=new Label(shell,SWT.NONE);  final GridData gdLabel=new GridData(GridData.BEGINNING,GridData.BEGINNING,true,false,2,1);  gdLabel.horizontalIndent=40;  titleLabel.setLayoutData(gdLabel);  final Color titleColor=colors.titleColor;  titleLabel.setForeground(titleColor);  final Font titleFont=SWTGraphicUtil.buildFontFrom(titleLabel,SWT.BOLD,FONT_SIZE);  titleLabel.setFont(titleFont);  titleLabel.setText(title);  SWTGraphicUtil.addDisposer(shell,titleFont);}  }
class C{  private int adjustColumn(int row,int col){  if (col < 0) {    return 0;  }  if (row == getRowCount() - 1) {    int lastRowCount=model.getByteCount() % 16;    if (lastRowCount == 0) {      lastRowCount=16;    }    if (lastRowCount < 16) {      return Math.min(col,(model.getByteCount() % 16) - 1);    }  }  return Math.min(col,getColumnCount() - 1 - 1);}  }
class C{  public void rotate(){  clearAnimation();  if (rotation == MAX_ROTATION) {    rotationAnimator.setFloatValues(0.0f);    rotationAnimator.start();  } else {    rotationAnimator.setFloatValues(MAX_ROTATION);    rotationAnimator.start();  }}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,500 * RANDOM_MULTIPLIER);  checkRandomData(random(),analyzerNoPunct,500 * RANDOM_MULTIPLIER);  checkRandomData(random(),analyzerNormalNBest,500 * RANDOM_MULTIPLIER);}  }
class C{  public static WebSocketFrame createCloseFrame(){  return new WebSocketFrame().setFin(true).setOpcode(CLOSE);}  }
class C{  public static String nl(){  return nl;}  }
class C{  public static void moveEnd(JScrollPane pane){  JScrollBar bar=pane.getVerticalScrollBar();  bar.setValue(bar.getMaximum());}  }
class C{  protected ActionMap createRTextAreaActionMap(){  ActionMap map=new ActionMapUIResource();  Action[] actions=textArea.getActions();  int n=actions.length;  for (int i=0; i < n; i++) {    Action a=actions[i];    map.put(a.getValue(Action.NAME),a);  }  map.put(TransferHandler.getCutAction().getValue(Action.NAME),TransferHandler.getCutAction());  map.put(TransferHandler.getCopyAction().getValue(Action.NAME),TransferHandler.getCopyAction());  map.put(TransferHandler.getPasteAction().getValue(Action.NAME),TransferHandler.getPasteAction());  return map;}  }
class C{  public boolean isOutOfGame(Entity entity){  return isOutOfGame(entity.getId());}  }
class C{  public static Range findDomainBounds(XYDataset dataset){  return findDomainBounds(dataset,true);}  }
class C{  public OperationStateException(String message,Object[] params){  super(message,params);}  }
class C{  public GrainField(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.907 -0500",hash_original_method="FDACBEC8690232193991EC2D654F498C",hash_generated_method="D078A3B56DA2FD79425B2C4793E3686C") protected boolean down(TextView widget,Spannable buffer){  return false;}  }
class C{  public static boolean isCodenvyExtensionProject(java.io.File workDir) throws IOException {  return isCodenvyExtensionProject(Model.readFrom(workDir));}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  private void handleStatus(Status status){  Log.d(TAG,"Handling Bean status: " + status);  BeanState beanState=status.beanState();  if (beanState == BeanState.READY) {    resetSketchStateTimeout();    if (sketchUploadState == SketchUploadState.SENDING_START_COMMAND) {      sketchUploadState=SketchUploadState.SENDING_BLOCKS;      stopSketchStateTimeout();      sendNextSketchBlock();    }  } else   if (beanState == BeanState.PROGRAMMING) {    resetSketchStateTimeout();  } else   if (beanState == BeanState.COMPLETE) {    if (onSketchUploadComplete != null)     onSketchUploadComplete.run();    resetSketchUploadState();  } else   if (beanState == BeanState.ERROR) {    returnUploadError(BeanError.UNKNOWN);    resetSketchUploadState();  }}  }
class C{  public CTextField(int columns){  super(columns);  init();}  }
class C{  public static void updateNotes(Context context,String host,String hash,List<Note> updatedNotes) throws IOException, JSONException, AuthenticatorException {  for (  Note localNote : updatedNotes) {    if (updateNote(host,hash,localNote)) {      localNote.setSyncStatus(DatabaseContract.NoteEntry.NOTE_STATUS.synced);      NoteDataSource.getInstance(context).updateNote(localNote);    } else {      Log.d(LOG_TAG,"Updating note failed");    }  }}  }
class C{  public void handleValue(String value){  if (propertyName != null && value != null && value.length() > 0) {    CSS.Attribute cssKey=CSS.getAttribute(propertyName);    if (cssKey != null) {      if (cssKey == CSS.Attribute.LIST_STYLE_IMAGE) {        if (value != null && !value.equals("none")) {          URL url=CSS.getURL(base,value);          if (url != null) {            value=url.toString();          }        }      }      addCSSAttribute(declaration,cssKey,value);    }    propertyName=null;  }}  }
class C{  boolean canInstall(){  return !installing;}  }
class C{  private void createComputeProgram() throws IOException {  int program=glCreateProgram();  int cshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/raytracingSsbo.glslcs",GL_COMPUTE_SHADER);  glAttachShader(program,cshader);  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.computeProgram=program;}  }
class C{  public String collectionName(){  final String r=get(CrawlAttribute.COLLECTIONS.key);  return r == null || r.length() == 0 || "user".equals(r) ? name() : r;}  }
class C{  public Fjord(){  super();}  }
class C{  public static synchronized XmlRpcClient login(String serverURL,String login,char[] password) throws MalformedURLException, XmlRpcException {  String server;  if (serverURL.endsWith("/")) {    server=serverURL + BUGZILLA_APPENDIX;  } else {    server=serverURL + "/" + BUGZILLA_APPENDIX;  }  HttpClient httpClient=new HttpClient();  XmlRpcClient rpcClient=new XmlRpcClient();  XmlRpcCommonsTransportFactory factory=new XmlRpcCommonsTransportFactory(rpcClient);  XmlRpcClientConfigImpl config=new XmlRpcClientConfigImpl();  factory.setHttpClient(httpClient);  rpcClient.setTransportFactory(factory);  config.setServerURL(new URL(server));  rpcClient.setConfig(config);  Map<String,String> loginMap=new HashMap<String,String>();  loginMap.put("login",login);  loginMap.put("password",new String(password));  loginMap.put("rememberlogin","true");  Map resultMap=(Map)rpcClient.execute("User.login",new Object[]{loginMap});  LogService.getRoot().log(Level.FINE,"com.rapidminer.tools.XmlRpcHandler.logged_into_bugzilla",new Object[]{serverURL,resultMap.get("id")});  for (int i=0; i < password.length; i++) {    password[i]=0;  }  return rpcClient;}  }
class C{  public void configure(){  MarklinTrafficController control=new MarklinTrafficController();  control.connectPort(this);  control.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().setMarklinTrafficController(control);  this.getSystemConnectionMemo().configureManagers();}  }
class C{  public static void saveChunk(TileEntity tileEntity){  if (tileEntity == null || tileEntity.isInvalid() || tileEntity.getWorldObj() == null) {    return;  }  tileEntity.getWorldObj().markTileEntityChunkModified(tileEntity.xCoord,tileEntity.yCoord,tileEntity.zCoord,tileEntity);}  }
class C{  public static Vec4[] computeExtrema(Vec4 points[]){  if (points == null) {    String message=Logging.getMessage("nullValue.PointsArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (points.length == 0)   return null;  double xmin=points[0].x;  double ymin=points[0].y;  double zmin=points[0].z;  double xmax=xmin;  double ymax=ymin;  double zmax=zmin;  for (int i=1; i < points.length; i++) {    double x=points[i].x;    if (x > xmax) {      xmax=x;    } else     if (x < xmin) {      xmin=x;    }    double y=points[i].y;    if (y > ymax) {      ymax=y;    } else     if (y < ymin) {      ymin=y;    }    double z=points[i].z;    if (z > zmax) {      zmax=z;    } else     if (z < zmin) {      zmin=z;    }  }  return new Vec4[]{new Vec4(xmin,ymin,zmin),new Vec4(xmax,ymax,zmax)};}  }
class C{  protected int estimateParametersLen(final NameValuePair[] nvps){  if ((nvps == null) || (nvps.length < 1))   return 0;  int result=(nvps.length - 1) * 2;  for (int i=0; i < nvps.length; i++) {    result+=estimateNameValuePairLen(nvps[i]);  }  return result;}  }
class C{  public int size(){  final Segment<K,V>[] segments=this.segments;  final int segmentCount=segments.length;  long previousSum=0L;  for (int retries=-1; retries < RETRIES_BEFORE_LOCK; retries++) {    long sum=0L;    long size=0L;    for (int i=0; i < segmentCount; i++) {      Segment<K,V> segment=segmentAt(segments,i);      if (segment != null) {        sum+=segment.modCount;        size+=segment.count;      }    }    if (sum == previousSum)     return ((size >>> 31) == 0) ? (int)size : Integer.MAX_VALUE;    previousSum=sum;  }  long size=0L;  for (int i=0; i < segmentCount; i++) {    Segment<K,V> segment=ensureSegment(i);    segment.lock();    size+=segment.count;  }  for (int i=0; i < segmentCount; i++)   segments[i].unlock();  return ((size >>> 31) == 0) ? (int)size : Integer.MAX_VALUE;}  }
class C{  public boolean isNetworkAvailable(){  ConnectivityManager connectivityManager=(ConnectivityManager)activity.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetworkInfo=connectivityManager.getActiveNetworkInfo();  return activeNetworkInfo != null && activeNetworkInfo.isConnected();}  }
class C{  public Future<ReplDBMSHeader> flush(String eventId) throws InterruptedException, ReplicatorException {  logger.info("Scheduling pipeline flush on event ID: " + eventId);  return watchForProcessedEventId(eventId);}  }
class C{  @Override public void renderFormsOntoG2InHeadless(final Object raw,final int pageIndex,final Map componentsToIgnore,final FormFactory formFactory){  if (formsOrdered == null || formsOrdered[pageIndex] == null) {    return;  }  this.componentsToIgnore=componentsToIgnore;  FormObject formObject;  final boolean isPrinting=formFactory != null;  final Graphics2D g2=(Graphics2D)raw;  final AffineTransform defaultAf=g2.getTransform();  final AffineTransform aff=g2.getTransform();  aff.scale(1,1);  g2.setTransform(aff);  for (  final FormObject nextVal : formsOrdered[pageIndex]) {    if (nextVal != null) {      formObject=nextVal;      final boolean[] flags=formObject.getCharacteristics();      if (((flags[1] || (isPrinting && !flags[2])))) {        continue;      }      renderComponent(g2,formObject,isPrinting);    }  }  g2.setTransform(defaultAf);}  }
class C{  public Matrix4d translationRotate(double tx,double ty,double tz,double qx,double qy,double qz,double qw){  double dqx=qx + qx;  double dqy=qy + qy;  double dqz=qz + qz;  double q00=dqx * qx;  double q11=dqy * qy;  double q22=dqz * qz;  double q01=dqx * qy;  double q02=dqx * qz;  double q03=dqx * qw;  double q12=dqy * qz;  double q13=dqy * qw;  double q23=dqz * qw;  m00=1.0 - (q11 + q22);  m01=q01 + q23;  m02=q02 - q13;  m03=0.0;  m10=q01 - q23;  m11=1.0 - (q22 + q00);  m12=q12 + q03;  m13=0.0;  m20=q02 + q13;  m21=q12 - q03;  m22=1.0 - (q11 + q00);  m23=0.0;  m30=tx;  m31=ty;  m32=tz;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  public synchronized void stopListening(){  if (mListening) {    mContext.unregisterReceiver(mReceiver);    mContext=null;    mNetworkInfo=null;    mOtherNetworkInfo=null;    mIsFailOver=false;    mReason=null;    mListening=false;  }}  }
class C{  public void undo(){  try {    if (undoManager.canUndo()) {      undoManager.undo();      for (      KeyListener kl : getKeyListeners()) {        kl.keyTyped(null);        kl.keyReleased(null);      }    }  } catch (  CannotUndoException e) {  }}  }
class C{  @Override public ModbusResponse createResponse(AbstractModbusListener listener){  WriteMultipleRegistersResponse response;  if (nonWordDataHandler == null) {    Register[] regs;    ProcessImage procimg=listener.getProcessImage(getUnitID());    try {      regs=procimg.getRegisterRange(getReference(),getWordCount());      for (int i=0; i < regs.length; i++) {        regs[i].setValue(this.getRegister(i).getValue());      }    } catch (    IllegalAddressException iaex) {      return createExceptionResponse(Modbus.ILLEGAL_ADDRESS_EXCEPTION);    }    response=(WriteMultipleRegistersResponse)getResponse();    response.setReference(getReference());    response.setWordCount(getWordCount());  } else {    int result=nonWordDataHandler.commitUpdate();    if (result > 0) {      return createExceptionResponse(result);    }    response=(WriteMultipleRegistersResponse)getResponse();    response.setReference(getReference());    response.setWordCount(nonWordDataHandler.getWordCount());  }  return response;}  }
class C{  public void testCertStore06() throws InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException {  if (!initParams()) {    return;  }  String provider=null;  for (int i=0; i < dValid.length; i++) {    try {      CertStore.getInstance(dValid[i],dParams,provider);      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }    try {      CertStore.getInstance(dValid[i],dParams,"");      fail("IllegalArgumentException must be thrown");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:02.931 -0500",hash_original_method="2D0BB20A4C7261DEBC8826658FC12230",hash_generated_method="C58F7F6A51A3BB84E758653BC0F7704F") private void populateStaticHeaders(){  String accept=mHeaders.get("Accept");  if (accept == null || accept.length() == 0) {    mHeaders.put("Accept",HEADER_STR);  }  mHeaders.put("Accept-Charset","utf-8, iso-8859-1, utf-16, *;q=0.7");  String acceptLanguage=mSettings.getAcceptLanguage();  if (acceptLanguage.length() > 0) {    mHeaders.put("Accept-Language",acceptLanguage);  }  mHeaders.put("User-Agent",mSettings.getUserAgentString());  if (mUaprofHeader != null && mUaprofHeader.length() > 0) {    mHeaders.put("x-wap-profile",mUaprofHeader);  }}  }
class C{  @Deprecated protected JTable makeJTable(TableSorter sorter){  return new JTable(sorter);}  }
class C{  public DirichletDensityFunction(double[] alphas){  this.alphas=alphas;  if (alphas.length < 2) {    log.warning("must have at least 2 alphas");  }  for (int i=0; i < alphas.length; i++) {    if (alphas[i] <= 0) {      log.warning("alphas of the Dirichlet distribution are not well formed");    }  }  C=calculateC();}  }
class C{  public WampClientBuilder withStrictUriValidation(boolean useStrictUriValidation){  this.useStrictUriValidation=useStrictUriValidation;  return this;}  }
class C{  public CompiledST defineTemplateAlias(Token aliasT,Token targetT){  String alias=aliasT.getText();  String target=targetT.getText();  CompiledST targetCode=rawGetTemplate("/" + target);  if (targetCode == null) {    errMgr.compileTimeError(ErrorType.ALIAS_TARGET_UNDEFINED,null,aliasT,alias,target);    return null;  }  rawDefineTemplate("/" + alias,targetCode,aliasT);  return targetCode;}  }
class C{  private static void queryPortfolioFeed(FinanceService service,String feedUrl) throws IOException, MalformedURLException, ServiceException {  System.out.println("Requesting Feed at location: " + feedUrl);  PortfolioFeed portfolioFeed=service.getFeed(new URL(feedUrl),PortfolioFeed.class);  System.out.println("\nPortfolio Feed\n==============");  printBasicFeedDetails(portfolioFeed);  for (int i=0; i < portfolioFeed.getEntries().size(); i++) {    PortfolioEntry portfolioEntry=portfolioFeed.getEntries().get(i);    printPortfolioEntry(portfolioEntry);  }}  }
class C{  public PromoteTempToFieldRefactoring(ICompilationUnit unit,int selectionStart,int selectionLength){  Assert.isTrue(selectionStart >= 0);  Assert.isTrue(selectionLength >= 0);  fSelectionStart=selectionStart;  fSelectionLength=selectionLength;  fCu=unit;  fFieldName="";  fVisibility=Modifier.PRIVATE;  fDeclareStatic=false;  fDeclareFinal=false;  fInitializeIn=INITIALIZE_IN_METHOD;  fLinkedProposalModel=null;}  }
class C{  public LTRStandardMessageProcessor(MessageDirection direction,AliasList list){  mDirection=direction;  mAliasList=list;}  }
class C{  public static void transposeM(float[] mTrans,int mTransOffset,float[] m,int mOffset){  for (int i=0; i < 4; i++) {    int mBase=i * 4 + mOffset;    mTrans[i + mTransOffset]=m[mBase];    mTrans[i + 4 + mTransOffset]=m[mBase + 1];    mTrans[i + 8 + mTransOffset]=m[mBase + 2];    mTrans[i + 12 + mTransOffset]=m[mBase + 3];  }}  }
class C{  public BoundedFifoBuffer(Collection<T> coll){  this(coll.size());  addAll(coll);}  }
class C{  void execute(IDocument document) throws BadLocationException {  if (length == 0 && text == null && fCommands.size() == 0)   return;  DefaultPositionUpdater updater=new DefaultPositionUpdater(getCategory());  Position caretPosition=null;  try {    if (updateCaret()) {      document.addPositionCategory(getCategory());      document.addPositionUpdater(updater);      caretPosition=new Position(caretOffset);      document.addPosition(getCategory(),caretPosition);    }    final Command originalCommand=new Command(offset,length,text,owner);    for (final Iterator iterator=new CommandIterator(fCommands,originalCommand,false); iterator.hasNext(); )     ((Command)iterator.next()).execute(document);  } catch (  BadLocationException e) {  }catch (  BadPositionCategoryException e) {  } finally {    if (updateCaret()) {      document.removePositionUpdater(updater);      try {        document.removePositionCategory(getCategory());      } catch (      BadPositionCategoryException e) {        Assert.isTrue(false);      }      caretOffset=caretPosition.getOffset();    }  }}  }
class C{  public static void splitTrainValidTest(List<Tree<String>> sectionTrees,List<Tree<String>> trainTrees,List<Tree<String>> validationTrees,List<Tree<String>> devTestTrees,List<Tree<String>> finalTestTrees){  final int CYCLE_SIZE=10;  for (int i=0; i < sectionTrees.size(); i++) {    if (i % CYCLE_SIZE < 7) {      trainTrees.add(sectionTrees.get(i));    } else     if (i % CYCLE_SIZE == 7) {      validationTrees.add(sectionTrees.get(i));    } else     if (i % CYCLE_SIZE == 8) {      devTestTrees.add(sectionTrees.get(i));    } else     if (i % CYCLE_SIZE == 9) {      finalTestTrees.add(sectionTrees.get(i));    }  }}  }
class C{  public static Document createXMLValidationList(Locale locale,String caseSensitive){  Document doc=createDocument(1,2,2,2,0,0,RBUtil.getInstance(locale).getProperty(I18N_VALIDATIONUSECASE_REGISTERTYPE),"","",null,null,caseSensitive);  Element root=doc.getRootElement();  Element nodeList=root.addElement(XML_NODELIST_TEXT);  addNode(1,RBUtil.getInstance(locale).getProperty("book.fld11.1"),RBUtil.getInstance(locale).getProperty("book.fld11.1"),"",null,"",Integer.MIN_VALUE,"",nodeList,"");  addNode(2,RBUtil.getInstance(locale).getProperty("book.fld11.2"),RBUtil.getInstance(locale).getProperty("book.fld11.2"),"",null,"",Integer.MIN_VALUE,"",nodeList,"");  return doc;}  }
class C{  TreeSet<String> fetchZkChildren(Watcher watcher) throws InterruptedException, KeeperException {  while (true) {    try {      TreeSet<String> orderedChildren=new TreeSet<>();      List<String> childNames=zookeeper.getChildren(dir,watcher,true);      stats.setQueueLength(childNames.size());      for (      String childName : childNames) {        if (!childName.regionMatches(0,PREFIX,0,PREFIX.length())) {          LOG.debug("Found child node with improper name: " + childName);          continue;        }        orderedChildren.add(childName);      }      return orderedChildren;    } catch (    KeeperException.NoNodeException e) {      zookeeper.makePath(dir,false,true);    }  }}  }
class C{  private void replacePlainInsn(NormalSsaInsn insn,RegisterSpecList newSources,int newOpcode,Constant cst){  Insn originalRopInsn=insn.getOriginalRopInsn();  Rop newRop=Rops.ropFor(newOpcode,insn.getResult(),newSources,cst);  Insn newRopInsn;  if (cst == null) {    newRopInsn=new PlainInsn(newRop,originalRopInsn.getPosition(),insn.getResult(),newSources);  } else {    newRopInsn=new PlainCstInsn(newRop,originalRopInsn.getPosition(),insn.getResult(),newSources,cst);  }  NormalSsaInsn newInsn=new NormalSsaInsn(newRopInsn,insn.getBlock());  List<SsaInsn> insns=insn.getBlock().getInsns();  ssaMeth.onInsnRemoved(insn);  insns.set(insns.lastIndexOf(insn),newInsn);  ssaMeth.onInsnAdded(newInsn);}  }
class C{  private void drawSplat(Canvas canvas,float x,float y,float orientation,float distance,float tilt,Paint paint){  float z=distance * 2 + 10;  float nx=(float)(Math.sin(orientation) * Math.sin(tilt));  float ny=(float)(-Math.cos(orientation) * Math.sin(tilt));  float nz=(float)Math.cos(tilt);  if (nz < 0.05) {    return;  }  float cd=z / nz;  float cx=nx * cd;  float cy=ny * cd;  for (int i=0; i < SPLAT_VECTORS; i++) {    double direction=mRandom.nextDouble() * Math.PI * 2;    double dispersion=mRandom.nextGaussian() * 0.2;    double vx=Math.cos(direction) * dispersion;    double vy=Math.sin(direction) * dispersion;    double vz=1;    double temp=vy;    vy=temp * Math.cos(tilt) - vz * Math.sin(tilt);    vz=temp * Math.sin(tilt) + vz * Math.cos(tilt);    temp=vx;    vx=temp * Math.cos(orientation) - vy * Math.sin(orientation);    vy=temp * Math.sin(orientation) + vy * Math.cos(orientation);    if (vz < 0.05) {      continue;    }    float pd=(float)(z / vz);    float px=(float)(vx * pd);    float py=(float)(vy * pd);    mCanvas.drawCircle(x + px - cx,y + py - cy,1.0f,paint);  }}  }
class C{  @SuppressWarnings("null") public void load(Element element,Object o){  Editor p=(Editor)o;  SlipTurnoutIcon l=new SlipTurnoutIcon(p);  int rotation=0;  try {    Attribute a=element.getAttribute("rotate");    rotation=a.getIntValue();  } catch (  org.jdom2.DataConversionException e) {  }catch (  NullPointerException e) {  }  String nameEast=loadTurnout(element,"turnoutEast");  String nameWest=loadTurnout(element,"turnoutWest");  Attribute a=element.getAttribute("turnoutType");  if (a != null) {    if (a.getValue().equals("doubleSlip")) {      l.setTurnoutType(SlipTurnoutIcon.DOUBLESLIP);    } else     if (a.getValue().equals("singleSlip")) {      l.setTurnoutType(SlipTurnoutIcon.SINGLESLIP);      a=element.getAttribute("singleSlipRoute");      if ((a == null) || a.getValue().equals("upperWestToUpperEast")) {        l.setSingleSlipRoute(true);      } else {        l.setSingleSlipRoute(false);      }    } else     if (a.getValue().equals("threeWay")) {      l.setTurnoutType(SlipTurnoutIcon.THREEWAY);      a=element.getAttribute("firstTurnoutExit");      if ((a == null) || a.getValue().equals("lower")) {        l.setSingleSlipRoute(false);      } else {        l.setSingleSlipRoute(true);      }    } else     if (a.getValue().equals("scissor")) {      l.setTurnoutType(SlipTurnoutIcon.SCISSOR);      if (loadTurnout(element,"turnoutLowerWest") == null) {        l.setSingleSlipRoute(true);      } else {        l.setSingleSlipRoute(false);        l.setTurnout(loadTurnout(element,"turnoutLowerEast"),SlipTurnoutIcon.LOWEREAST);        l.setTurnout(loadTurnout(element,"turnoutLowerWest"),SlipTurnoutIcon.LOWERWEST);      }    }  }  loadTurnoutIcon("lowerWestToUpperEast",rotation,l,element,p);  loadTurnoutIcon("upperWestToLowerEast",rotation,l,element,p);switch (l.getTurnoutType()) {case SlipTurnoutIcon.DOUBLESLIP:    loadTurnoutIcon("lowerWestToLowerEast",rotation,l,element,p);  loadTurnoutIcon("upperWestToUpperEast",rotation,l,element,p);break;default :loadTurnoutIcon("lowerWestToLowerEast",rotation,l,element,p);break;}loadTurnoutIcon("unknown",rotation,l,element,p);loadTurnoutIcon("inconsistent",rotation,l,element,p);a=element.getAttribute("tristate");if ((a == null) || a.getValue().equals("true")) {l.setTristate(true);} else {l.setTristate(false);}l.setTurnout(nameEast,SlipTurnoutIcon.EAST);l.setTurnout(nameWest,SlipTurnoutIcon.WEST);p.putItem(l);loadCommonAttributes(l,Editor.TURNOUTS,element);}  }
class C{  @Override public Set<String> supportedExtensions(){  return this.SUPPORTED_EXTENSIONS;}  }
class C{  public void testDoConfigureCreatesWar() throws Exception {  configuration.addDeployable(new WAR("my.war"));  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("my.war","//WebAppComponent/@URI",config);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  protected void init(){  CPanel panel=new CPanel();  panel.setLayout(new MigLayout("fill"));  getContentPane().add(panel);  northPanel=new CPanel(new MigLayout("fill","","[50][50][]"));  panel.add(northPanel,"north");  northPanel.setBorder(new TitledBorder(Msg.getMsg(p_ctx,"Query")));  CLabel lvalue=new CLabel(Msg.translate(p_ctx,"Value"));  northPanel.add(lvalue,"growy");  f_value=new PosTextField("",p_posPanel,p_pos.getOSK_KeyLayout_ID());  lvalue.setLabelFor(f_value);  northPanel.add(f_value,"h 30, w 200");  f_value.addActionListener(this);  CLabel lupc=new CLabel(Msg.translate(p_ctx,"UPC"));  northPanel.add(lupc,"growy");  f_upc=new PosTextField("",p_posPanel,p_pos.getOSK_KeyLayout_ID());  lupc.setLabelFor(f_upc);  northPanel.add(f_upc,"h 30, w 200, wrap");  f_upc.addActionListener(this);  CLabel lname=new CLabel(Msg.translate(p_ctx,"Name"));  northPanel.add(lname,"growy");  f_name=new PosTextField("",p_posPanel,p_pos.getOSK_KeyLayout_ID());  lname.setLabelFor(f_name);  northPanel.add(f_name,"h 30, w 200");  f_name.addActionListener(this);  CLabel lsku=new CLabel(Msg.translate(p_ctx,"SKU"));  northPanel.add(lsku,"growy");  f_sku=new PosTextField("",p_posPanel,p_pos.getOSK_KeyLayout_ID());  lsku.setLabelFor(f_sku);  northPanel.add(f_sku,"h 30, w 200");  f_sku.addActionListener(this);  f_refresh=createButtonAction("Refresh",KeyStroke.getKeyStroke(KeyEvent.VK_F5,0));  northPanel.add(f_refresh,"w 50!, h 50!, wrap, alignx trailing");  f_up=createButtonAction("Previous",KeyStroke.getKeyStroke(KeyEvent.VK_UP,0));  northPanel.add(f_up,"w 50!, h 50!, span, split 4");  f_down=createButtonAction("Next",KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0));  northPanel.add(f_down,"w 50!, h 50!");  f_ok=createButtonAction("Ok",KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0));  northPanel.add(f_ok,"w 50!, h 50!");  f_cancel=createButtonAction("Cancel",KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE,0));  northPanel.add(f_cancel,"w 50!, h 50!");  m_table=new PosTable();  String sql=m_table.prepareTable(s_layout,s_sqlFrom,s_sqlWhere,false,"RV_WarehousePrice") + " ORDER BY Margin, QtyAvailable";  m_table.addMouseListener(this);  m_table.getSelectionModel().addListSelectionListener(this);  m_table.setColumnVisibility(m_table.getColumn(0),false);  m_table.getColumn(1).setPreferredWidth(175);  m_table.getColumn(2).setPreferredWidth(175);  m_table.getColumn(3).setPreferredWidth(100);  m_table.getColumn(4).setPreferredWidth(75);  m_table.getColumn(5).setPreferredWidth(75);  m_table.getColumn(6).setPreferredWidth(75);  m_table.getColumn(7).setPreferredWidth(75);  enableButtons();  m_table.setFillsViewportHeight(true);  m_table.growScrollbars();  centerScroll=new CScrollPane(m_table);  panel.add(centerScroll,"growx, growy,south");  panel.setPreferredSize(new Dimension(800,600));  f_value.requestFocus();}  }
class C{  private Node createUseKeyElement(String sigId) throws ParserException {  org.oasis_open.docs.ws_sx.ws_trust._200512.ObjectFactory wstFactory=new org.oasis_open.docs.ws_sx.ws_trust._200512.ObjectFactory();  UseKeyType useKey=wstFactory.createUseKeyType();  useKey.setSig(sigId);  return marshallJaxbElement(useKey).getFirstChild();}  }
class C{  public static void unregisterPlayer(final Player player,final StendhalRPZone zone){  zone.remove(player);  removePlayer(player);}  }
class C{  public static void assertEquals(String message,IOObject expectedIOO,IOObject actualIOO){  assertEquals(message,expectedIOO,actualIOO,false);}  }
class C{  public static INeedsMaterialization.Requirement gatherVarsToMaterialize(final BOp c,final Set<IVariable<IV>> terms){  return gatherVarsToMaterialize(c,terms,false);}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public void refreshData() throws BasicException {  saveData();  m_bd.refreshData();  m_editorrecord.refresh();  baseMoveTo(0);}  }
class C{  private Relation(){}  }
class C{  private boolean isQueryCancelled(final UUID queryId){  if (log.isDebugEnabled()) {    log.debug(queryId);  }  final RunningQuery q=getQuery(queryId);  if (log.isDebugEnabled() && q != null) {    log.debug(queryId + " isCancelled: " + q.isCancelled());  }  if (q != null) {    return q.isCancelled();  }  return false;}  }
class C{  public JavaWrapManager(){  this(new JavaChildWrapArranger(),new JavaChildBlockWrapFactory());}  }
class C{  static String removeWhiteSpace(String str,String symbol){  return removeWSandReplace(str,symbol,symbol);}  }
class C{  public void onResume(boolean multitasking){}  }
class C{  public boolean isRunningTotal(){  Object oo=get_Value(COLUMNNAME_IsRunningTotal);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void reset(){  Cell[] as=cells;  base=identity;  if (as != null) {    for (    Cell a : as) {      if (a != null) {        a.reset(identity);      }    }  }}  }
class C{  public boolean isRest(){  return rest;}  }
class C{  private void updatePseudoReferences(int epoch){  if (nbestListWriter != null) {    nbestListWriter.close();    EvaluationMetric<IString,String> metric=new BLEUMetric<IString,String>(references);    MultiTranslationMetricMax<IString,String> searchAlgorithm=new HillClimbingMultiTranslationMetricMax<IString,String>(metric);    NBestListContainer<IString,String> nbestLists=null;    try {      nbestLists=new FlatNBestList(nbestFilename,references.size());    } catch (    IOException e) {      e.printStackTrace();      logger.error("Could not load pseudo references from: {}",nbestFilename);      throw new RuntimeException("Could not load pseudo references from:" + nbestFilename);    }    List<ScoredFeaturizedTranslation<IString,String>> maxFeaturizedTranslations=searchAlgorithm.maximize(nbestLists);    assert maxFeaturizedTranslations.size() == tuneSource.size() : "Pseudo reference set does not match tuning set";    int numTranslations=maxFeaturizedTranslations.size();    for (int i=0; i < numTranslations; ++i) {      Sequence<IString> translation=maxFeaturizedTranslations.get(i).translation;      if (pseudoReferences.get(i).size() >= numPseudoReferences)       pseudoReferences.get(i).remove(0);      pseudoReferences.get(i).add(translation);    }    logger.info("Number of pseudo references: {}",pseudoReferences.get(0).size());    File file=new File(nbestFilename);    file.delete();    referenceWeights=new double[numReferences + pseudoReferences.get(0).size()];    Arrays.fill(referenceWeights,1.0);  }  if (epoch >= pseudoReferenceBurnIn) {    nbestFilename=String.format("%s/online-nbest.%d.nbest",tempDirectory,epoch);    logger.info("Writing nbest lists to: {}",nbestFilename);    nbestListWriter=IOTools.getWriterFromFile(nbestFilename);  }}  }
class C{  private double findSubBandMaxCoeff(ImageTree imgTree,int subBand){  double max=0.0;  double coeff=0.0;  for (int i=5; i < imgTree.getImage().getHeight() - 5; i++) {    for (int j=5; j < imgTree.getImage().getWidth() - 5; j++) {      coeff=Math.abs(DWTUtil.getPixel(imgTree.getImage(),i,j));      if (coeff > max) {        max=coeff;      }    }  }  return max;}  }
class C{  public static String readableTimespan(long milliseconds){  if (milliseconds == 0) {    return "0 sec";  }  long seconds=milliseconds / 1000;  long minutes=seconds / 60;  long hours=minutes / 60;  minutes%=60;  seconds%=60;  StringBuilder sb=new StringBuilder();  if (hours > 0) {    sb.append(hours).append(" hr ");  }  if (minutes > 0) {    sb.append(minutes).append(" min ");  }  if (seconds > 0) {    sb.append(seconds).append(" sec ");  }  return sb.toString().trim();}  }
class C{  public int writeTimeoutMillis(){  return writeTimeout;}  }
class C{  protected void removeEntry(HashEntry entry,int hashIndex,HashEntry previous){  if (previous == null) {    data[hashIndex]=entry.next;  } else {    previous.next=entry.next;  }}  }
class C{  @Override public boolean storesMixedCaseIdentifiers(){  debugCodeCall("storesMixedCaseIdentifiers");  return false;}  }
class C{  public int hashCode(){  char buf[]=buffer;  int hash=0;  for (int i=size - 1; i >= 0; i--) {    hash=31 * hash + buf[i];  }  return hash;}  }
class C{  public static boolean checkIfExpressionContainsColumn(Expression expression){  if (expression instanceof ColumnExpression) {    return true;  }  for (  Expression child : expression.getChildren()) {    if (checkIfExpressionContainsColumn(child)) {      return true;    }  }  return false;}  }
class C{  protected ExecutionStateImpl(){  super();}  }
class C{  public static void registerLicense(final License license){  sLicenses.put(license.getName(),license);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void putCharacterCategory(int codePoint,String characterClassName){  characterDefinition.putCharacterCategory(codePoint,characterClassName);}  }
class C{  protected static String quoteBytes(byte[] x){  if (x == null) {    return "null";  }  return "org.h2.util.StringUtils.convertHexToBytes(\"" + StringUtils.convertBytesToHex(x) + "\")";}  }
class C{  public void parseForMethod(GenericDeclaration genericDecl,String signature,Class<?>[] rawExceptionTypes){  setInput(genericDecl,signature);  if (!eof) {    parseMethodTypeSignature(rawExceptionTypes);  } else {    Method m=(Method)genericDecl;    this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;    Class<?>[] parameterTypes=m.getParameterTypes();    if (parameterTypes.length == 0) {      this.parameterTypes=ListOfTypes.EMPTY;    } else {      this.parameterTypes=new ListOfTypes(parameterTypes);    }    Class<?>[] exceptionTypes=m.getExceptionTypes();    if (exceptionTypes.length == 0) {      this.exceptionTypes=ListOfTypes.EMPTY;    } else {      this.exceptionTypes=new ListOfTypes(exceptionTypes);    }    this.returnType=m.getReturnType();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void storeDeviceThrottled(Device d){  long intervalNs=syncStoreWriteIntervalMs * 1000L * 1000L;  if (!isMaster)   return;  if (d == null)   return;  long now=System.nanoTime();  Long last=lastWriteTimes.get(d.getDeviceKey());  if (last == null || (now - last) > intervalNs) {    writeUpdatedDeviceToStorage(d);    lastWriteTimes.put(d.getDeviceKey(),now);  } else {    cntDeviceStoreThrottled.increment();  }}  }
class C{  long selectLong(Connection c,RegisteredSQLString sql,Object... vs) throws PalantirSqlException, PalantirInterruptedException {  return selectLong(c,sql.getKey(),vs);}  }
class C{  private void checkRemoved(){  List<Offer> list=market.getExpiredOffersOlderThan(TIME_TO_REMOVING);  for (  Offer offer : list) {    market.removeExpiredOffer(offer);    StringBuilder builder=new StringBuilder();    builder.append("Your offer of ");    builder.append(Grammar.a_noun(offer.getItemName()));    builder.append(" has been removed permanently from the market.");    sendMessage(offer.getOfferer(),builder);  }}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  protected CipherInputStream(InputStream is){  super(is);  input=is;  cipher=new NullCipher();}  }
class C{  public boolean removex(@Nullable String spaceName,int part,KeyCacheObject key,byte[] keyBytes,IgniteBiPredicate<Long,Integer> p) throws IgniteCheckedException {  GridOffHeapPartitionedMap m=offheap(spaceName);  if (log.isTraceEnabled())   log.trace("offheap removex [key=" + key + ']');  return m != null && m.removex(part,U.hash(key),keyBytes(key,keyBytes),p);}  }
class C{  public void addLog(int P_ID,Timestamp P_Date,BigDecimal P_Number,String P_Msg){  addLog(new ProcessInfoLog(P_ID,P_Date,P_Number,P_Msg));}  }
class C{  protected int readUShort(final int position) throws AuthenticationException {  return ZapNTLMEngineImpl.readUShort(messageContents,position);}  }
class C{  public SVGFeComponentTransferElementBridge(){}  }
class C{  public CorruptedInputException(){  super("Compressed data is corrupt");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributesMap1;  NamedNodeMap attributesMap2;  Element element;  Attr attribute;  Attr newAttr1;  Attr newAttribute;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(1);  attributesMap1=element.getAttributes();  attributesMap2=element.getAttributes();  newAttr1=doc.createAttributeNS("http://www.w3.org/DOM/L1","street");  newAttribute=element.setAttributeNodeNS(newAttr1);  attribute=(Attr)attributesMap1.getNamedItemNS("http://www.w3.org/DOM/L1","street");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemnsMap106","street",attrName);  attribute=(Attr)attributesMap2.getNamedItemNS("http://www.w3.org/DOM/L1","street");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemnsMap206","street",attrName);}  }
class C{  public boolean isTouches(int dimensionOfGeometryA,int dimensionOfGeometryB){  if (dimensionOfGeometryA > dimensionOfGeometryB) {    return isTouches(dimensionOfGeometryB,dimensionOfGeometryA);  }  if ((dimensionOfGeometryA == Dimension.A && dimensionOfGeometryB == Dimension.A) || (dimensionOfGeometryA == Dimension.L && dimensionOfGeometryB == Dimension.L) || (dimensionOfGeometryA == Dimension.L && dimensionOfGeometryB == Dimension.A)|| (dimensionOfGeometryA == Dimension.P && dimensionOfGeometryB == Dimension.A)|| (dimensionOfGeometryA == Dimension.P && dimensionOfGeometryB == Dimension.L)) {    return matrix[Location.INTERIOR][Location.INTERIOR] == Dimension.FALSE && (isTrue(matrix[Location.INTERIOR][Location.BOUNDARY]) || isTrue(matrix[Location.BOUNDARY][Location.INTERIOR]) || isTrue(matrix[Location.BOUNDARY][Location.BOUNDARY]));  }  return false;}  }
class C{  public void addAll(int index,int[] data){  int dataLen=data.length;  if (dataLen == 0) {    return;  }  int newcap=size + (int)(dataLen * 1.1) + 1;  ensureCapacity(newcap);  System.arraycopy(array,index,array,index + dataLen,size - index);  System.arraycopy(data,0,array,index,dataLen);  size+=dataLen;}  }
class C{  public void putAll(Map data){  map.putAll(data);}  }
class C{  protected void isTextWellFormed(Text node){  Character invalidChar=isWFXMLChar(node.getData());  if (invalidChar != null) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_TEXT,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));    }  }}  }
class C{  public void removeProjectionStackTrigger(ProjectionStackTrigger trigger){  trigger.removeActionListener(this);  if (triggers != null) {    triggers.remove(trigger);    if (triggers.size() == 0) {      triggers=null;    }  }}  }
class C{  public MaxHeap(){  super(Harness.options,"Max Heap","Max Heap Size",Integer.valueOf(System.getProperty("mmtk.harness.heap.max","384")));}  }
class C{  public void transform(float[] src,int srcOff,float[] dst,int dstOff,int length){  int step=2;  if (src == dst && srcOff < dstOff && dstOff < srcOff + length * 2) {    srcOff=srcOff + length * 2 - 2;    dstOff=dstOff + length * 2 - 2;    step=-2;  }  while (--length >= 0) {    double x=src[srcOff + 0];    double y=src[srcOff + 1];    dst[dstOff + 0]=(float)(x * m00 + y * m01 + m02);    dst[dstOff + 1]=(float)(x * m10 + y * m11 + m12);    srcOff+=step;    dstOff+=step;  }}  }
class C{  private static void populateLevels(){  levelList=new LinkedList<>();  levelList.add(Level.SEVERE.toString());  levelList.add(Level.WARNING.toString());  levelList.add(Level.INFO.toString());  levelList.add(Level.CONFIG.toString());  levelList.add(Level.FINE.toString());  levelList.add(Level.FINER.toString());  levelList.add(Level.FINEST.toString());}  }
class C{  private boolean generateInlineCode(MethodReference methodToBeCalled){  Atom methodName=methodToBeCalled.getName();  if (methodToBeCalled.isSysCall()) {    TypeReference[] args=methodToBeCalled.getParameterTypes();    int paramWords=methodToBeCalled.getParameterWords();    int gp=FIRST_OS_PARAMETER_GPR.value();    int fp=FIRST_OS_PARAMETER_FPR.value();    int stackIndex=paramWords - 1;    int paramBytes=((VM.BuildFor64Addr ? args.length : paramWords) - 1) * BYTES_IN_STACKSLOT;    int callee_param_index=-BYTES_IN_STACKSLOT - paramBytes;    for (int i=1; i < args.length; i++) {      TypeReference t=args[i];      if (t.isLongType()) {        stackIndex-=2;        callee_param_index+=BYTES_IN_LONG;        if (VM.BuildFor64Addr) {          if (gp <= LAST_OS_PARAMETER_GPR.value()) {            peekLong(GPR.lookup(gp),GPR.lookup(gp),stackIndex);            gp++;          } else {            peekLong(S0,S0,stackIndex);            asm.emitSTD(S0,callee_param_index - BYTES_IN_LONG,FP);          }        } else {          if (VM.BuildForLinux) {            gp+=(gp + 1) & 0x01;          }          if (gp <= LAST_OS_PARAMETER_GPR.value()) {            peekInt(GPR.lookup(gp++),stackIndex);          }          if (gp <= LAST_OS_PARAMETER_GPR.value()) {            peekInt(GPR.lookup(gp++),stackIndex + 1);          } else {            peekLong(S0,S1,stackIndex);            asm.emitSTW(S0,callee_param_index - BYTES_IN_LONG,FP);            asm.emitSTW(S1,callee_param_index - BYTES_IN_INT,FP);          }        }      } else       if (t.isFloatType()) {        stackIndex-=1;        callee_param_index+=BYTES_IN_STACKSLOT;        if (fp <= LAST_OS_PARAMETER_FPR.value()) {          peekFloat(FPR.lookup(fp++),stackIndex);        } else {          peekFloat(FIRST_SCRATCH_FPR,stackIndex);          asm.emitSTFS(FIRST_SCRATCH_FPR,callee_param_index - BYTES_IN_FLOAT,FP);        }      } else       if (t.isDoubleType()) {        stackIndex-=2;        callee_param_index+=BYTES_IN_DOUBLE;        if (fp <= LAST_OS_PARAMETER_FPR.value()) {          peekDouble(FPR.lookup(fp++),stackIndex);        } else {          peekDouble(FIRST_SCRATCH_FPR,stackIndex);          asm.emitSTFD(FIRST_SCRATCH_FPR,callee_param_index - BYTES_IN_DOUBLE,FP);        }      } else       if (t.isIntLikeType()) {        stackIndex-=1;        callee_param_index+=BYTES_IN_STACKSLOT;        if (gp <= LAST_OS_PARAMETER_GPR.value()) {          peekInt(GPR.lookup(gp++),stackIndex);        } else {          peekInt(S0,stackIndex);          asm.emitSTAddr(S0,callee_param_index - BYTES_IN_ADDRESS,FP);        }      } else {        stackIndex-=1;        callee_param_index+=BYTES_IN_STACKSLOT;        if (gp <= LAST_OS_PARAMETER_GPR.value()) {          peekAddr(GPR.lookup(gp++),stackIndex);        } else {          peekAddr(S0,stackIndex);          asm.emitSTAddr(S0,callee_param_index - BYTES_IN_ADDRESS,FP);        }      }    }    if (VM.VerifyAssertions) {      VM._assert(stackIndex == 0);    }    peekAddr(S0,paramWords - 1);    generateSysCall(paramBytes);    discardSlots(paramWords);    TypeReference rtype=methodToBeCalled.getReturnType();    if (rtype.isIntLikeType()) {      pushInt(T0);    } else     if (rtype.isWordLikeType() || rtype.isReferenceType()) {      pushAddr(T0);    } else     if (rtype.isDoubleType()) {      pushDouble(FIRST_OS_PARAMETER_FPR);    } else     if (rtype.isFloatType()) {      pushFloat(FIRST_OS_PARAMETER_FPR);    } else     if (rtype.isLongType()) {      pushLong(T0,VM.BuildFor64Addr ? T0 : T1);    }    return true;  }  if (methodToBeCalled.getType() == TypeReference.Address) {    TypeReference[] types=methodToBeCalled.getParameterTypes();    if (methodName == MagicNames.loadAddress || methodName == MagicNames.loadObjectReference || methodName == MagicNames.loadWord) {      if (types.length == 0) {        popAddr(T0);        asm.emitLAddr(T0,0,T0);        pushAddr(T0);      } else {        popOffset(T1);        popAddr(T0);        asm.emitLAddrX(T0,T1,T0);        pushAddr(T0);      }      return true;    }    if (methodName == MagicNames.loadChar) {      if (types.length == 0) {        popAddr(T0);        asm.emitLHZ(T0,0,T0);        pushInt(T0);      } else {        popOffset(T1);        popAddr(T0);        asm.emitLHZX(T0,T1,T0);        pushInt(T0);      }      return true;    }    if (methodName == MagicNames.loadShort) {      if (types.length == 0) {        popAddr(T0);        asm.emitLHA(T0,0,T0);        pushInt(T0);      } else {        popOffset(T1);        popAddr(T0);        asm.emitLHAX(T0,T1,T0);        pushInt(T0);      }      return true;    }    if (methodName == MagicNames.loadByte) {      if (types.length == 0) {        popAddr(T0);        asm.emitLBZ(T0,0,T0);        asm.emitEXTSB(T0,T0);        pushInt(T0);      } else {        popOffset(T1);        popAddr(T0);        asm.emitLBZX(T0,T1,T0);        asm.emitEXTSB(T0,T0);        pushInt(T0);      }      return true;    }    if (methodName == MagicNames.loadInt || methodName == MagicNames.loadFloat) {      if (types.length == 0) {        popAddr(T0);        asm.emitLInt(T0,0,T0);        pushInt(T0);      } else {        popOffset(T1);        popAddr(T0);        asm.emitLIntX(T0,T1,T0);        pushInt(T0);      }      return true;    }    if (methodName == MagicNames.loadDouble || methodName == MagicNames.loadLong) {      if (types.length == 0) {        popAddr(T1);        asm.emitLFD(F0,0,T1);        pushDouble(F0);      } else {        popOffset(T2);        popAddr(T1);        asm.emitLFDX(F0,T1,T2);        pushDouble(F0);      }      return true;    }    if ((methodName == MagicNames.prepareInt) || (VM.BuildFor32Addr && (methodName == MagicNames.prepareWord)) || (VM.BuildFor32Addr && (methodName == MagicNames.prepareObjectReference))|| (VM.BuildFor32Addr && (methodName == MagicNames.prepareAddress))) {      if (types.length == 0) {        popAddr(T0);        asm.emitLWARX(T0,GPR.R0,T0);        pushInt(T0);      } else {        popOffset(T1);        popAddr(T0);        asm.emitLWARX(T0,T1,T0);        pushInt(T0);      }      return true;    }    if ((methodName == MagicNames.prepareLong) || (VM.BuildFor64Addr && (methodName == MagicNames.prepareWord)) || (VM.BuildFor64Addr && (methodName == MagicNames.prepareObjectReference))|| (VM.BuildFor64Addr && (methodName == MagicNames.prepareAddress))) {      if (types.length == 0) {        popAddr(T0);        asm.emitLDARX(T0,GPR.R0,T0);        pushAddr(T0);      } else {        popOffset(T1);        popAddr(T0);        if (VM.BuildFor64Addr) {          asm.emitLDARX(T0,T1,T0);        } else {        }        pushAddr(T0);      }      return true;    }    if (methodName == MagicNames.attempt && ((types[0] == TypeReference.Int) || (VM.BuildFor32Addr && (types[0] == TypeReference.Address)) || (VM.BuildFor32Addr && (types[0] == TypeReference.Word)))) {      if (types.length == 2) {        popInt(T2);        discardSlot();        popAddr(T0);        asm.emitSTWCXr(T2,GPR.R0,T0);        asm.emitLVAL(T0,0);        ForwardReference fr=asm.emitForwardBC(NE);        asm.emitLVAL(T0,1);        fr.resolve(asm);        pushInt(T0);      } else {        popOffset(T1);        popInt(T2);        discardSlot();        popAddr(T0);        asm.emitSTWCXr(T2,T1,T0);        asm.emitLVAL(T0,0);        ForwardReference fr=asm.emitForwardBC(NE);        asm.emitLVAL(T0,1);        fr.resolve(asm);        pushInt(T0);      }      return true;    }    if (methodName == MagicNames.attempt && ((types[0] == TypeReference.Long) || (VM.BuildFor64Addr && (types[0] == TypeReference.Address)) || (VM.BuildFor64Addr && (types[0] == TypeReference.Word)))) {      if (types.length == 2) {        popAddr(T2);        discardSlot();        popAddr(T0);        asm.emitSTDCXr(T2,GPR.R0,T0);        asm.emitLVAL(T0,0);        ForwardReference fr=asm.emitForwardBC(NE);        asm.emitLVAL(T0,1);        fr.resolve(asm);        pushInt(T0);      } else {        popOffset(T1);        popAddr(T2);        discardSlot();        popAddr(T0);        if (VM.BuildFor64Addr) {          asm.emitSTDCXr(T2,T1,T0);        } else {        }        asm.emitLVAL(T0,0);        ForwardReference fr=asm.emitForwardBC(NE);        asm.emitLVAL(T0,1);        fr.resolve(asm);        pushInt(T0);      }      return true;    }    if (methodName == MagicNames.store) {      if (types[0] == TypeReference.Word || types[0] == TypeReference.ObjectReference || types[0] == TypeReference.Address) {        if (types.length == 1) {          popAddr(T1);          popAddr(T0);          asm.emitSTAddrX(T1,GPR.R0,T0);        } else {          popOffset(T1);          popAddr(T2);          popAddr(T0);          asm.emitSTAddrX(T2,T1,T0);        }        return true;      }      if (types[0] == TypeReference.Byte || types[0] == TypeReference.Boolean) {        if (types.length == 1) {          popInt(T1);          popAddr(T0);          asm.emitSTBX(T1,GPR.R0,T0);        } else {          popOffset(T1);          popInt(T2);          popAddr(T0);          asm.emitSTBX(T2,T1,T0);        }        return true;      }      if (types[0] == TypeReference.Int || types[0] == TypeReference.Float) {        if (types.length == 1) {          popInt(T1);          popAddr(T0);          asm.emitSTWX(T1,GPR.R0,T0);        } else {          popOffset(T1);          popInt(T2);          popAddr(T0);          asm.emitSTWX(T2,T1,T0);        }        return true;      }      if (types[0] == TypeReference.Short || types[0] == TypeReference.Char) {        if (types.length == 1) {          popInt(T1);          popAddr(T0);          asm.emitSTHX(T1,GPR.R0,T0);        } else {          popOffset(T1);          popInt(T2);          popAddr(T0);          asm.emitSTHX(T2,T1,T0);        }        return true;      }      if (types[0] == TypeReference.Double || types[0] == TypeReference.Long) {        if (types.length == 1) {          popLong(T2,T1);          popAddr(T0);          if (VM.BuildFor32Addr) {            asm.emitSTW(T2,0,T0);            asm.emitSTW(T1,BYTES_IN_INT,T0);          } else {            asm.emitSTD(T1,0,T0);          }        } else {          popOffset(T1);          popLong(T3,T2);          popAddr(T0);          if (VM.BuildFor32Addr) {            asm.emitSTWX(T3,T1,T0);            asm.emitADDI(T1,BYTES_IN_INT,T1);            asm.emitSTWX(T2,T1,T0);          } else {            asm.emitSTDX(T2,T1,T0);          }        }        return true;      }    }  }  if (methodName == MagicNames.getFramePointer) {    pushAddr(FP);  } else   if (methodName == MagicNames.getCallerFramePointer) {    popAddr(T0);    asm.emitLAddr(T1,STACKFRAME_FRAME_POINTER_OFFSET.toInt(),T0);    pushAddr(T1);  } else   if (methodName == MagicNames.setCallerFramePointer) {    popAddr(T1);    popAddr(T0);    asm.emitSTAddr(T1,STACKFRAME_FRAME_POINTER_OFFSET.toInt(),T0);  } else   if (methodName == MagicNames.getCompiledMethodID) {    popAddr(T0);    asm.emitLInt(T1,STACKFRAME_METHOD_ID_OFFSET.toInt(),T0);    pushInt(T1);  } else   if (methodName == MagicNames.setCompiledMethodID) {    popInt(T1);    popAddr(T0);    asm.emitSTW(T1,STACKFRAME_METHOD_ID_OFFSET.toInt(),T0);  } else   if (methodName == MagicNames.getNextInstructionAddress) {    popAddr(T0);    asm.emitLAddr(T1,STACKFRAME_RETURN_ADDRESS_OFFSET.toInt(),T0);    pushAddr(T1);  } else   if (methodName == MagicNames.getReturnAddressLocation) {    popAddr(T0);    asm.emitLAddr(T1,STACKFRAME_FRAME_POINTER_OFFSET.toInt(),T0);    asm.emitADDI(T2,STACKFRAME_RETURN_ADDRESS_OFFSET,T1);    pushAddr(T2);  } else   if (methodName == MagicNames.getTocPointer || methodName == MagicNames.getJTOC) {    pushAddr(JTOC);  } else   if (methodName == MagicNames.getThreadRegister) {    pushAddr(THREAD_REGISTER);  } else   if (methodName == MagicNames.setThreadRegister) {    popAddr(THREAD_REGISTER);  } else   if (methodName == MagicNames.getTimeBase) {    if (VM.BuildFor64Addr) {      asm.emitMFTB(T1);    } else {      int label=asm.getMachineCodeIndex();      asm.emitMFTBU(T0);      asm.emitMFTB(T1);      asm.emitMFTBU(T2);      asm.emitCMP(T0,T2);      asm.emitBC(NE,label);    }    pushLong(T0,T1);  } else   if (methodName == MagicNames.invokeClassInitializer) {    popAddr(T0);    asm.emitMTCTR(T0);    asm.emitBCCTRL();  } else   if (methodName == MagicNames.invokeMethodReturningVoid) {    generateMethodInvocation();  } else   if (methodName == MagicNames.invokeMethodReturningInt) {    generateMethodInvocation();    pushInt(T0);  } else   if (methodName == MagicNames.invokeMethodReturningLong) {    generateMethodInvocation();    pushLong(T0,VM.BuildFor64Addr ? T0 : T1);  } else   if (methodName == MagicNames.invokeMethodReturningFloat) {    generateMethodInvocation();    pushFloat(F0);  } else   if (methodName == MagicNames.invokeMethodReturningDouble) {    generateMethodInvocation();    pushDouble(F0);  } else   if (methodName == MagicNames.invokeMethodReturningObject) {    generateMethodInvocation();    pushAddr(T0);  } else   if (methodName == MagicNames.addressArrayCreate) {    RVMArray type=methodToBeCalled.getType().resolve().asArray();    emit_resolved_newarray(type);  } else   if (methodName == MagicNames.addressArrayLength) {    emit_arraylength();  } else   if (methodName == MagicNames.addressArrayGet) {    if (VM.BuildFor32Addr || methodToBeCalled.getType() == TypeReference.CodeArray) {      emit_iaload();    } else {      genBoundsCheck();      asm.emitSLDI(T1,T1,LOG_BYTES_IN_ADDRESS);      asm.emitLAddrX(T2,T0,T1);      pushAddr(T2);    }  } else   if (methodName == MagicNames.addressArraySet) {    if (VM.BuildFor32Addr || methodToBeCalled.getType() == TypeReference.CodeArray) {      emit_iastore();    } else {      popAddr(T2);      genBoundsCheck();      asm.emitSLDI(T1,T1,LOG_BYTES_IN_ADDRESS);      asm.emitSTAddrX(T2,T0,T1);    }  } else   if (methodName == MagicNames.getIntAtOffset) {    popOffset(T1);    popAddr(T0);    asm.emitLIntX(T0,T1,T0);    pushInt(T0);  } else   if (methodName == MagicNames.getFloatAtOffset) {    popOffset(T1);    popAddr(T0);    asm.emitLWZX(T0,T1,T0);    pushInt(T0);  } else   if (methodName == MagicNames.getObjectAtOffset || methodName == MagicNames.getWordAtOffset || methodName == MagicNames.getAddressAtOffset || methodName == MagicNames.getOffsetAtOffset || methodName == MagicNames.getExtentAtOffset || methodName == MagicNames.getTIBAtOffset) {    if (methodToBeCalled.getParameterTypes().length == 3) {      discardSlot();    }    popOffset(T1);    popAddr(T0);    asm.emitLAddrX(T0,T1,T0);    pushAddr(T0);  } else   if (methodName == MagicNames.getUnsignedByteAtOffset) {    popOffset(T1);    popAddr(T0);    asm.emitLBZX(T0,T1,T0);    pushInt(T0);  } else   if (methodName == MagicNames.getByteAtOffset) {    popOffset(T1);    popAddr(T0);    asm.emitLBZX(T0,T1,T0);    asm.emitEXTSB(T0,T0);    pushInt(T0);  } else   if (methodName == MagicNames.getCharAtOffset) {    popOffset(T1);    popAddr(T0);    asm.emitLHZX(T0,T1,T0);    pushInt(T0);  } else   if (methodName == MagicNames.getShortAtOffset) {    popOffset(T1);    popAddr(T0);    asm.emitLHAX(T0,T1,T0);    pushInt(T0);  } else   if (methodName == MagicNames.setIntAtOffset || methodName == MagicNames.setFloatAtOffset) {    if (methodToBeCalled.getParameterTypes().length == 4) {      discardSlot();    }    popInt(T2);    popOffset(T1);    popAddr(T0);    asm.emitSTWX(T2,T1,T0);  } else   if (methodName == MagicNames.setObjectAtOffset || methodName == MagicNames.setWordAtOffset || methodName == MagicNames.setAddressAtOffset || methodName == MagicNames.setOffsetAtOffset || methodName == MagicNames.setExtentAtOffset) {    if (methodToBeCalled.getParameterTypes().length == 4) {      discardSlot();    }    popAddr(T2);    popOffset(T1);    popAddr(T0);    asm.emitSTAddrX(T2,T1,T0);  } else   if (methodName == MagicNames.setByteAtOffset || methodName == MagicNames.setBooleanAtOffset) {    if (methodToBeCalled.getParameterTypes().length == 4) {      discardSlot();    }    popInt(T2);    popOffset(T1);    popAddr(T0);    asm.emitSTBX(T2,T1,T0);  } else   if (methodName == MagicNames.setCharAtOffset || methodName == MagicNames.setShortAtOffset) {    if (methodToBeCalled.getParameterTypes().length == 4) {      discardSlot();    }    popInt(T2);    popOffset(T1);    popAddr(T0);    asm.emitSTHX(T2,T1,T0);  } else   if (methodName == MagicNames.getLongAtOffset || methodName == MagicNames.getDoubleAtOffset) {    popOffset(T2);    popAddr(T1);    asm.emitLFDX(F0,T1,T2);    pushDouble(F0);  } else   if ((methodName == MagicNames.setLongAtOffset) || (methodName == MagicNames.setDoubleAtOffset)) {    if (methodToBeCalled.getParameterTypes().length == 4) {      discardSlot();    }    popLong(T3,T2);    popOffset(T1);    popAddr(T0);    if (VM.BuildFor32Addr) {      asm.emitSTWX(T3,T1,T0);      asm.emitADDI(T1,BYTES_IN_INT,T1);      asm.emitSTWX(T2,T1,T0);    } else {      asm.emitSTDX(T2,T1,T0);    }  } else   if (methodName == MagicNames.getMemoryInt) {    popAddr(T0);    asm.emitLInt(T0,0,T0);    pushInt(T0);  } else   if (methodName == MagicNames.getMemoryWord || methodName == MagicNames.getMemoryAddress) {    popAddr(T0);    asm.emitLAddr(T0,0,T0);    pushAddr(T0);  } else   if (methodName == MagicNames.setMemoryInt) {    popInt(T1);    popAddr(T0);    asm.emitSTW(T1,0,T0);  } else   if (methodName == MagicNames.setMemoryWord) {    if (methodToBeCalled.getParameterTypes().length == 3) {      discardSlot();    }    popAddr(T1);    popAddr(T0);    asm.emitSTAddr(T1,0,T0);  } else   if ((methodName == MagicNames.prepareInt) || (VM.BuildFor32Addr && (methodName == MagicNames.prepareObject)) || (VM.BuildFor32Addr && (methodName == MagicNames.prepareAddress))|| (VM.BuildFor32Addr && (methodName == MagicNames.prepareWord))) {    popOffset(T1);    popAddr(T0);    asm.emitLWARX(T0,T1,T0);    pushInt(T0);  } else   if ((methodName == MagicNames.prepareLong) || (VM.BuildFor64Addr && (methodName == MagicNames.prepareObject)) || (VM.BuildFor64Addr && (methodName == MagicNames.prepareAddress))|| (VM.BuildFor64Addr && (methodName == MagicNames.prepareWord))) {    popOffset(T1);    popAddr(T0);    if (VM.BuildFor64Addr) {      asm.emitLDARX(T0,T1,T0);    } else {    }    pushAddr(T0);  } else   if ((methodName == MagicNames.attemptInt) || (VM.BuildFor32Addr && (methodName == MagicNames.attemptObject)) || (VM.BuildFor32Addr && (methodName == MagicNames.attemptObjectReference))|| (VM.BuildFor32Addr && (methodName == MagicNames.attemptAddress))|| (VM.BuildFor32Addr && (methodName == MagicNames.attemptWord))) {    popInt(T2);    discardSlot();    popOffset(T1);    popAddr(T0);    asm.emitSTWCXr(T2,T1,T0);    asm.emitLVAL(T0,0);    ForwardReference fr=asm.emitForwardBC(NE);    asm.emitLVAL(T0,1);    fr.resolve(asm);    pushInt(T0);  } else   if (methodName == MagicNames.attemptLong) {    popAddr(T2);    discardSlots(2);    popOffset(T1);    popAddr(T0);    if (VM.BuildFor64Addr) {      asm.emitSTDCXr(T2,T1,T0);    } else {    }    asm.emitLVAL(T0,0);    ForwardReference fr=asm.emitForwardBC(NE);    asm.emitLVAL(T0,1);    fr.resolve(asm);    pushInt(T0);  } else   if (VM.BuildFor64Addr && ((methodName == MagicNames.attemptObject) || (methodName == MagicNames.attemptObjectReference) || (methodName == MagicNames.attemptAddress)|| (methodName == MagicNames.attemptWord))) {    popAddr(T2);    discardSlot();    popOffset(T1);    popAddr(T0);    asm.emitSTDCXr(T2,T1,T0);    asm.emitLVAL(T0,0);    ForwardReference fr=asm.emitForwardBC(NE);    asm.emitLVAL(T0,1);    fr.resolve(asm);    pushInt(T0);  } else   if (methodName == MagicNames.saveThreadState) {    peekAddr(T0,0);    asm.emitLAddrToc(S0,ArchEntrypoints.saveThreadStateInstructionsField.getOffset());    asm.emitMTCTR(S0);    asm.emitBCCTRL();    discardSlot();  } else   if (methodName == MagicNames.threadSwitch) {    peekAddr(T1,0);    peekAddr(T0,1);    asm.emitLAddrToc(S0,ArchEntrypoints.threadSwitchInstructionsField.getOffset());    asm.emitMTCTR(S0);    asm.emitBCCTRL();    discardSlots(2);  } else   if (methodName == MagicNames.restoreHardwareExceptionState) {    peekAddr(T0,0);    asm.emitLAddrToc(S0,ArchEntrypoints.restoreHardwareExceptionStateInstructionsField.getOffset());    asm.emitMTLR(S0);    asm.emitBCLR();  } else   if (methodName == MagicNames.returnToNewStack) {    peekAddr(FP,0);    asm.emitLAddr(S0,STACKFRAME_RETURN_ADDRESS_OFFSET.toInt(),FP);    asm.emitMTLR(S0);    asm.emitBCLR();  } else   if (methodName == MagicNames.dynamicBridgeTo) {    if (VM.VerifyAssertions)     VM._assert(klass.hasDynamicBridgeAnnotation());    peekAddr(T0,0);    asm.emitMTCTR(T0);    int offset=frameSize;    for (int i=LAST_NONVOLATILE_FPR.value(); i >= FIRST_VOLATILE_FPR.value(); --i) {      asm.emitLFD(FPR.lookup(i),offset-=BYTES_IN_DOUBLE,FP);    }    for (int i=LAST_NONVOLATILE_GPR.value(); i >= FIRST_NONVOLATILE_GPR.value(); --i) {      asm.emitLAddr(GPR.lookup(i),offset-=BYTES_IN_ADDRESS,FP);    }    offset-=(FIRST_NONVOLATILE_GPR.value() - LAST_VOLATILE_GPR.value() - 1) * BYTES_IN_ADDRESS;    for (int i=LAST_VOLATILE_GPR.value(); i >= FIRST_VOLATILE_GPR.value(); --i) {      asm.emitLAddr(GPR.lookup(i),offset-=BYTES_IN_ADDRESS,FP);    }    asm.emitLAddr(FP,0,FP);    asm.emitLAddr(S0,STACKFRAME_RETURN_ADDRESS_OFFSET.toInt(),FP);    asm.emitMTLR(S0);    asm.emitBCCTR();  } else   if (methodName == MagicNames.objectAsAddress || methodName == MagicNames.addressAsByteArray || methodName == MagicNames.addressAsObject || methodName == MagicNames.addressAsTIB || methodName == MagicNames.objectAsType || methodName == MagicNames.objectAsShortArray || methodName == MagicNames.objectAsIntArray || methodName == MagicNames.objectAsThread || methodName == MagicNames.floatAsIntBits || methodName == MagicNames.intBitsAsFloat || methodName == MagicNames.doubleAsLongBits || methodName == MagicNames.longBitsAsDouble) {  } else   if (methodName == MagicNames.getObjectType) {    popAddr(T0);    asm.baselineEmitLoadTIB(T0,T0);    asm.emitLAddr(T0,TIB_TYPE_INDEX << LOG_BYTES_IN_ADDRESS,T0);    pushAddr(T0);  } else   if (methodName == MagicNames.getArrayLength) {    popAddr(T0);    asm.emitLIntOffset(T0,T0,ObjectModel.getArrayLengthOffset());    pushInt(T0);  } else   if (methodName == MagicNames.sync) {    asm.emitSYNC();  } else   if (methodName == MagicNames.isync) {    asm.emitISYNC();  } else   if (methodName == MagicNames.pause) {  } else   if (methodName == MagicNames.combinedLoadBarrier) {    asm.emitHWSYNC();  } else   if (methodName == MagicNames.storeStoreBarrier) {    asm.emitSYNC();  } else   if (methodName == MagicNames.fence) {    asm.emitHWSYNC();  } else   if (methodName == MagicNames.dcbst) {    popAddr(T0);    asm.emitDCBST(GPR.R0,T0);  } else   if (methodName == MagicNames.dcbt || methodName == MagicNames.prefetch) {    popAddr(T0);    asm.emitDCBT(GPR.R0,T0);  } else   if (methodName == MagicNames.dcbtst) {    popAddr(T0);    asm.emitDCBTST(GPR.R0,T0);  } else   if (methodName == MagicNames.dcbz) {    popAddr(T0);    asm.emitDCBZ(GPR.R0,T0);  } else   if (methodName == MagicNames.dcbzl) {    popAddr(T0);    asm.emitDCBZL(GPR.R0,T0);  } else   if (methodName == MagicNames.icbi) {    popAddr(T0);    asm.emitICBI(GPR.R0,T0);  } else   if (methodName == MagicNames.sqrt) {    TypeReference argType=method.getParameterTypes()[0];    if (argType == TypeReference.Float) {      popFloat(F0);      asm.emitFSQRTS(F0,F0);      pushFloat(F0);    } else {      if (VM.VerifyAssertions)       VM._assert(argType == TypeReference.Double);      popDouble(F0);      asm.emitFSQRT(F0,F0);      pushDouble(F0);    }  } else   if (methodName == MagicNames.getInlineDepth || methodName == MagicNames.isConstantParameter) {    emit_iconst(0);  } else   if (methodName == MagicNames.wordToInt || methodName == MagicNames.wordToAddress || methodName == MagicNames.wordToOffset || methodName == MagicNames.wordToObject || methodName == MagicNames.wordFromObject || methodName == MagicNames.wordToObjectReference || methodName == MagicNames.wordToExtent || methodName == MagicNames.wordToWord || methodName == MagicNames.codeArrayAsObject || methodName == MagicNames.tibAsObject) {  } else   if (methodName == MagicNames.wordToLong) {    asm.emitLVAL(T0,0);    pushAddr(T0);  } else   if (methodName == MagicNames.wordFromInt || methodName == MagicNames.wordFromIntSignExtend) {    if (VM.BuildFor64Addr) {      popInt(T0);      pushAddr(T0);    }  } else   if (methodName == MagicNames.wordFromIntZeroExtend) {    if (VM.BuildFor64Addr) {      asm.emitLWZ(T0,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_INT,FP);      pokeAddr(T0,0);    }  } else   if (methodName == MagicNames.wordFromLong) {    discardSlot();  } else   if (methodName == MagicNames.wordPlus) {    if (VM.BuildFor64Addr && (methodToBeCalled.getParameterTypes()[0] == TypeReference.Int)) {      popInt(T0);    } else {      popAddr(T0);    }    popAddr(T1);    asm.emitADD(T2,T1,T0);    pushAddr(T2);  } else   if (methodName == MagicNames.wordMinus || methodName == MagicNames.wordDiff) {    if (VM.BuildFor64Addr && (methodToBeCalled.getParameterTypes()[0] == TypeReference.Int)) {      popInt(T0);    } else {      popAddr(T0);    }    popAddr(T1);    asm.emitSUBFC(T2,T0,T1);    pushAddr(T2);  } else   if (methodName == MagicNames.wordEQ) {    generateAddrComparison(false,EQ);  } else   if (methodName == MagicNames.wordNE) {    generateAddrComparison(false,NE);  } else   if (methodName == MagicNames.wordLT) {    generateAddrComparison(false,LT);  } else   if (methodName == MagicNames.wordLE) {    generateAddrComparison(false,LE);  } else   if (methodName == MagicNames.wordGT) {    generateAddrComparison(false,GT);  } else   if (methodName == MagicNames.wordGE) {    generateAddrComparison(false,GE);  } else   if (methodName == MagicNames.wordsLT) {    generateAddrComparison(true,LT);  } else   if (methodName == MagicNames.wordsLE) {    generateAddrComparison(true,LE);  } else   if (methodName == MagicNames.wordsGT) {    generateAddrComparison(true,GT);  } else   if (methodName == MagicNames.wordsGE) {    generateAddrComparison(true,GE);  } else   if (methodName == MagicNames.wordIsZero || methodName == MagicNames.wordIsNull) {    popAddr(T0);    asm.emitLVAL(T1,0);    asm.emitLVAL(T2,1);    asm.emitCMPLAddr(T0,T1);    ForwardReference fr=asm.emitForwardBC(EQ);    asm.emitLVAL(T2,0);    fr.resolve(asm);    pushInt(T2);  } else   if (methodName == MagicNames.wordIsMax) {    popAddr(T0);    asm.emitLVAL(T1,-1);    asm.emitLVAL(T2,1);    asm.emitCMPLAddr(T0,T1);    ForwardReference fr=asm.emitForwardBC(EQ);    asm.emitLVAL(T2,0);    fr.resolve(asm);    pushInt(T2);  } else   if (methodName == MagicNames.wordZero || methodName == MagicNames.wordNull) {    asm.emitLVAL(T0,0);    pushAddr(T0);  } else   if (methodName == MagicNames.wordOne) {    asm.emitLVAL(T0,1);    pushAddr(T0);  } else   if (methodName == MagicNames.wordMax) {    asm.emitLVAL(T0,-1);    pushAddr(T0);  } else   if (methodName == MagicNames.wordAnd) {    popAddr(T0);    popAddr(T1);    asm.emitAND(T2,T1,T0);    pushAddr(T2);  } else   if (methodName == MagicNames.wordOr) {    popAddr(T0);    popAddr(T1);    asm.emitOR(T2,T1,T0);    pushAddr(T2);  } else   if (methodName == MagicNames.wordNot) {    popAddr(T0);    asm.emitLVAL(T1,-1);    asm.emitXOR(T2,T1,T0);    pushAddr(T2);  } else   if (methodName == MagicNames.wordXor) {    popAddr(T0);    popAddr(T1);    asm.emitXOR(T2,T1,T0);    pushAddr(T2);  } else   if (methodName == MagicNames.wordLsh) {    popInt(T0);    popAddr(T1);    asm.emitSLAddr(T2,T1,T0);    pushAddr(T2);  } else   if (methodName == MagicNames.wordRshl) {    popInt(T0);    popAddr(T1);    asm.emitSRAddr(T2,T1,T0);    pushAddr(T2);  } else   if (methodName == MagicNames.wordRsha) {    popInt(T0);    popAddr(T1);    asm.emitSRA_Addr(T2,T1,T0);    pushAddr(T2);  } else {    return false;  }  return true;}  }
class C{  public IMouseState createDefaultState(){  return new CDefaultState(this);}  }
class C{  @Override public void process(Map<K,HashMap<K,V>> tuple){  HashMap<K,HashMap<K,V>> dtuple=null;  for (  Map.Entry<K,HashMap<K,V>> e : tuple.entrySet()) {    HashMap<K,V> dtuple2=null;    for (    Map.Entry<K,V> e2 : e.getValue().entrySet()) {      boolean contains=keys.containsKey(e2.getKey());      if ((contains && !inverse) || (!contains && inverse)) {        if (dtuple2 == null) {          dtuple2=new HashMap<K,V>(4);        }        dtuple2.put(cloneKey(e2.getKey()),cloneValue(e2.getValue()));      }    }    if (dtuple == null && dtuple2 != null) {      dtuple=new HashMap<K,HashMap<K,V>>();    }    if (dtuple != null && dtuple2 != null) {      dtuple.put(cloneKey(e.getKey()),dtuple2);    }  }  if (dtuple != null) {    filter.emit(dtuple);  }}  }
class C{  static public int estimateHeight(final int entryCount,final int branchingFactor){  if (entryCount < branchingFactor)   return 0;  final double logm=Math.log(branchingFactor);  final double logn=Math.log(entryCount);  final double h=(logm / logn) - 1;  return (int)Math.ceil(h);}  }
class C{  public boolean changeChannelNewVideosStatus(String channelId,boolean newVideos){  YouTubeChannel channel;  int position=0;  for (Iterator<YouTubeChannel> i=getIterator(); i.hasNext(); position++) {    channel=i.next();    if (channel.getId().equals(channelId)) {      channel.setNewVideosSinceLastVisit(newVideos);      updateView(position);      return true;    }  }  return false;}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) protected void doRecordFeedback(DrawContext dc,WWIcon icon,Vec4 modelPoint,Rectangle screenRect){  icon.setValue(AVKey.FEEDBACK_REFERENCE_POINT,modelPoint);  icon.setValue(AVKey.FEEDBACK_SCREEN_BOUNDS,screenRect);}  }
class C{  public boolean deleteView(final View view) throws CouldntDeleteException {  Preconditions.checkNotNull(view,"Error: View argument can not be null");  try {    return m_project.getContent().deleteView(view.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  @SuppressWarnings("unchecked") public <T>T retryOperation(ZkOperation operation) throws KeeperException, InterruptedException {  KeeperException exception=null;  for (int i=0; i < retryCount; i++) {    try {      return (T)operation.execute();    } catch (    KeeperException.ConnectionLossException e) {      if (exception == null) {        exception=e;      }      if (Thread.currentThread().isInterrupted()) {        Thread.currentThread().interrupt();        throw new InterruptedException();      }      if (Thread.currentThread() instanceof ClosableThread) {        if (((ClosableThread)Thread.currentThread()).isClosed()) {          throw exception;        }      }      if (i != retryCount - 1) {        retryDelay(i);      }    }  }  throw exception;}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public Vertex evaluateSRAIX(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack) throws Exception {  if (!checkMinArguments(expression,arguments,1,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex sentence=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  String apikeyValue=null;  int limitValue=-1;  String botValue=null;  String botidValue=null;  String serverValue=null;  Primitive serviceValue=null;  String hintValue=null;  String defaultValue=null;  if (arguments.size() > 1) {    Vertex argument=arguments.get(1).getTarget();    Vertex apikey=argument.getRelationship(Primitive.APIKEY);    if (apikey != null) {      apikey=evaluateExpression(apikey,variables,network,startTime,maxTime,stack);      apikeyValue=apikey.printString();    }    Vertex limit=argument.getRelationship(Primitive.LIMIT);    if (limit != null) {      limit=evaluateExpression(limit,variables,network,startTime,maxTime,stack);      limitValue=Integer.parseInt(limit.getDataValue());    }    Vertex bot=argument.getRelationship(Primitive.BOT);    if (bot != null) {      bot=evaluateExpression(bot,variables,network,startTime,maxTime,stack);      botValue=bot.printString();    }    Vertex botid=argument.getRelationship(Primitive.BOTID);    if (botid != null) {      botid=evaluateExpression(botid,variables,network,startTime,maxTime,stack);      botidValue=botid.printString();    }    Vertex server=argument.getRelationship(Primitive.SERVER);    if (server != null) {      server=evaluateExpression(server,variables,network,startTime,maxTime,stack);      serverValue=server.printString();    }    Vertex service=argument.getRelationship(Primitive.SERVICE);    if (service != null) {      service=evaluateExpression(service,variables,network,startTime,maxTime,stack);      if (service.isPrimitive()) {        serviceValue=(Primitive)service.getData();      }    }    Vertex hint=argument.getRelationship(Primitive.HINT);    if (hint != null) {      hint=evaluateExpression(hint,variables,network,startTime,maxTime,stack);      hintValue=hint.printString();    }    Vertex defaultResponse=argument.getRelationship(Primitive.DEFAULT);    if (defaultResponse != null) {      defaultResponse=evaluateExpression(defaultResponse,variables,network,startTime,maxTime,stack);      defaultValue=defaultResponse.printString();    }  }  try {    String message=sentence.printString();    String response=network.getBot().awareness().getSense(RemoteService.class).request(message,botValue,botidValue,serverValue,serviceValue,apikeyValue,limitValue,hintValue,network);    if (response == null) {      if (defaultValue != null && !defaultValue.isEmpty()) {        return network.createSentence(defaultValue);      }      return network.createVertex(Primitive.NULL);    }    return network.createSentence(response);  } catch (  Exception exception) {    network.getBot().log(this,exception);    if (defaultValue != null && !defaultValue.isEmpty()) {      return network.createSentence(defaultValue);    }    return network.createVertex(Primitive.NULL);  }}  }
class C{  public static List<GeoTimeSerie> stl(GeoTimeSerie gts,int buckets_per_period,int inner,int outer,int neighbour_s,int degree_s,int jump_s,int neighbour_l,int degree_l,int jump_l,int neighbour_t,int degree_t,int jump_t,int neighbour_p,int degree_p,int jump_p) throws WarpScriptException {  if (TYPE.DOUBLE != gts.type && TYPE.LONG != gts.type) {    throw new WarpScriptException("Can only be applied on numeric Geo Time Series.");  }  if (!isBucketized(gts)) {    throw new WarpScriptException("Can only be applied on bucketized Geo Time Series");  }  sort(gts,false);  int nonnull=gts.values;  int size=gts.bucketcount;  if (size - nonnull > 500000) {    throw new WarpScriptException("More than 500000 missing values");  }  int sizehint=size + 2 * buckets_per_period;  GeoTimeSerie seasonal=gts.cloneEmpty(sizehint);  try {    seasonal.reset(Arrays.copyOf(gts.ticks,sizehint),null,null,new double[sizehint],nonnull);  } catch (  IOException ioe) {    throw new WarpScriptException("IOException in reset method: " + ioe.getMessage());  }  GeoTimeSerie trend=gts.cloneEmpty(sizehint);  try {    trend.reset(Arrays.copyOf(gts.ticks,sizehint),null,null,new double[sizehint],nonnull);  } catch (  IOException ioe) {    throw new WarpScriptException("IOException in reset method: " + ioe.getMessage());  }  GeoTimeSerie lowpassed=trend;  double[] rho=new double[nonnull];  Arrays.fill(rho,1.0D);  double[] residual=rho;  int nei=Math.max(Math.max(neighbour_s,neighbour_l),neighbour_t);  double[] weights=new double[nei];  for (int s=0; s < outer + 1; s++) {    for (int k=0; k < inner; k++) {      int idx_t=0;      for (int idx=0; idx < nonnull; idx++) {        idx_t=Arrays.binarySearch(trend.ticks,idx_t,nonnull,gts.ticks[idx]);        seasonal.doubleValues[idx]=((Number)valueAtIndex(gts,idx)).doubleValue() - trend.doubleValues[idx_t];      }      GeoTimeSerie subCycle=null;      GeoTimeSerie subRho=null;      for (int c=0; c < buckets_per_period; c++) {        subCycle=subCycleSerie(seasonal,seasonal.lastbucket - c * seasonal.bucketspan,buckets_per_period,true,subCycle);        subCycle.lastbucket+=subCycle.bucketspan;        subCycle.bucketcount+=2;        if (s > 0) {          double[] tmp=seasonal.doubleValues;          seasonal.doubleValues=rho;          subRho=subCycleSerie(seasonal,seasonal.lastbucket - c * seasonal.bucketspan,buckets_per_period,true,subRho);          seasonal.doubleValues=tmp;        }        lowess_stl(subCycle,seasonal,neighbour_s,degree_s,jump_s,weights,s > 0 ? subRho.doubleValues : rho);      }      seasonal.lastbucket+=seasonal.bucketspan * buckets_per_period;      seasonal.bucketcount+=2 * buckets_per_period;      sort(seasonal);      double sum=0;      for (int r=0; r < buckets_per_period; r++) {        sum+=seasonal.doubleValues[r];      }      lowpassed.doubleValues[0]=sum / buckets_per_period;      for (int r=1; r < seasonal.bucketcount - buckets_per_period + 1; r++) {        sum+=seasonal.doubleValues[r + buckets_per_period - 1] - seasonal.doubleValues[r - 1];        lowpassed.doubleValues[r]=sum / buckets_per_period;      }      sum=0;      for (int r=0; r < buckets_per_period; r++) {        sum+=lowpassed.doubleValues[r];      }      double tmp=lowpassed.doubleValues[0];      lowpassed.doubleValues[0]=sum / buckets_per_period;      for (int r=1; r <= seasonal.bucketcount - 2 * buckets_per_period + 1; r++) {        sum+=lowpassed.doubleValues[r + buckets_per_period - 1] - tmp;        tmp=lowpassed.doubleValues[r];        lowpassed.doubleValues[r]=sum / buckets_per_period;      }      for (int r=0; r < seasonal.bucketcount - 2 * buckets_per_period; r++) {        lowpassed.doubleValues[r]+=lowpassed.doubleValues[r + 1] + lowpassed.doubleValues[r + 2];        lowpassed.doubleValues[r]/=3;      }      lowpassed.bucketcount=seasonal.bucketcount - 2 * buckets_per_period;      lowpassed.lastbucket=seasonal.lastbucket - buckets_per_period * seasonal.bucketspan;      lowpassed.values=lowpassed.bucketcount;      lowpassed=rlowess(lowpassed,neighbour_l,0,(jump_l + 1) * lowpassed.bucketspan,degree_l,weights,null,true);      seasonal.lastbucket-=seasonal.bucketspan * buckets_per_period;      seasonal.bucketcount-=2 * buckets_per_period;      if (seasonal.bucketcount != lowpassed.values) {        throw new WarpScriptException("stl impl error #1: " + seasonal.values + " vs "+ lowpassed.values);      }      for (int r=0; r < seasonal.bucketcount; r++) {        seasonal.doubleValues[r]=seasonal.doubleValues[r + buckets_per_period] - lowpassed.doubleValues[r];        seasonal.ticks[r]=seasonal.ticks[r + buckets_per_period];      }      seasonal.values=seasonal.bucketcount;      int idx_s=0;      for (int idx=0; idx < nonnull; idx++) {        idx_s=Arrays.binarySearch(seasonal.ticks,idx_s,nonnull,gts.ticks[idx]);        trend.doubleValues[idx]=((Number)valueAtIndex(gts,idx)).doubleValue() - seasonal.doubleValues[idx_s];      }      trend.values=nonnull;      trend.lastbucket=gts.lastbucket;      trend.bucketspan=gts.bucketspan;      trend.bucketcount=size;      trend=rlowess(trend,neighbour_t,0,(jump_t + 1) * trend.bucketspan,degree_t,weights,rho,true);    }    if (s < outer) {      int idx_s=0;      int idx_t=0;      for (int idx=0; idx < nonnull; idx++) {        idx_s=Arrays.binarySearch(seasonal.ticks,idx_s,nonnull,gts.ticks[idx]);        idx_t=idx_s;        residual[idx]=Math.abs(((Number)valueAtIndex(gts,idx)).doubleValue() - seasonal.doubleValues[idx_s] - trend.doubleValues[idx_t]);      }      double median;      double[] sorted=Arrays.copyOf(residual,gts.values);      Arrays.sort(sorted);      if (gts.values % 2 == 0) {        median=(sorted[gts.values / 2] + sorted[gts.values / 2 - 1]) / 2;      } else {        median=sorted[gts.values / 2];      }      double h=6 * median;      for (int k=0; k < gts.values; k++) {        if (0 == h) {          rho[k]=1.0D;        } else {          double u=residual[k] / h;          if (u >= 1.0) {            rho[k]=0.0D;          } else {            rho[k]=1.0D - u * u;            rho[k]=rho[k] * rho[k];          }        }      }    }  }  if (neighbour_p > 0) {    seasonal=rlowess(seasonal,neighbour_p,0,(jump_p + 1) * seasonal.bucketspan,degree_p);  }  int v=0;  if (null != gts.locations) {    for (int u=0; u < size; u++) {      v=Arrays.binarySearch(gts.ticks,v,nonnull,seasonal.ticks[u]);      seasonal.locations[u]=v < 0 ? GeoTimeSerie.NO_LOCATION : gts.locations[v];      trend.locations[u]=seasonal.locations[u];    }  } else {    seasonal.locations=null;    trend.locations=null;  }  v=0;  if (null != gts.elevations) {    for (int u=0; u < size; u++) {      v=Arrays.binarySearch(gts.ticks,v,nonnull,seasonal.ticks[u]);      seasonal.elevations[u]=v < 0 ? GeoTimeSerie.NO_ELEVATION : gts.elevations[v];      trend.elevations[u]=seasonal.elevations[u];    }  } else {    seasonal.elevations=null;    trend.elevations=null;  }  String prefix=(null == gts.getName()) || (0 == gts.getName().length()) ? "" : gts.getName() + "_";  seasonal.setName(prefix + "seasonal");  trend.setName(prefix + "trend");  List<GeoTimeSerie> output=new ArrayList<GeoTimeSerie>();  output.add(seasonal);  output.add(trend);  return output;}  }
class C{  public void organizeTypeAnnotationsBodies(JCClassDecl tree){  new TypeAnnotationPositions(false).scan(tree);}  }
class C{  public void invalidateLayout(Container target){}  }
class C{  public void visitMaxs(int maxStack,int maxLocals){  if (mv != null) {    mv.visitMaxs(maxStack,maxLocals);  }}  }
class C{  void enableButtons(){  boolean enable=true;  confirmPanel.getOKButton().setEnabled(true);  if (hasHistory())   confirmPanel.getHistoryButton().setEnabled(enable);  if (hasZoom())   confirmPanel.getZoomButton().setEnabled(enable);}  }
class C{  public Anonymous_beforeCode_2_ createAnonymous_beforeCode_2_(){  Anonymous_beforeCode_2_Impl anonymous_beforeCode_2_=new Anonymous_beforeCode_2_Impl();  return anonymous_beforeCode_2_;}  }
class C{  public Seq<CharSeq> partition(String regex){  Matcher m=Pattern.compile(regex).matcher(str);  if (m.find()) {    return Seqs.newSeq(CharSeq.of(str.substring(0,m.start())),CharSeq.of(m.group()),CharSeq.of(str.substring(m.end())));  } else {    return Seqs.newSeq(CharSeq.of(""),CharSeq.of(""),CharSeq.of(str));  }}  }
class C{  int order(){  return 1;}  }
class C{  public String attributeNameTipText(){  return "Set the new attribute's name.";}  }
class C{  public boolean removeBond(GBDevice device) throws GBException {  BluetoothAdapter defaultAdapter=BluetoothAdapter.getDefaultAdapter();  if (defaultAdapter != null) {    BluetoothDevice remoteDevice=defaultAdapter.getRemoteDevice(device.getAddress());    if (remoteDevice != null) {      try {        Method method=BluetoothDevice.class.getMethod("removeBond",(Class[])null);        Object result=method.invoke(remoteDevice,(Object[])null);        return Boolean.TRUE.equals(result);      } catch (      Exception e) {        throw new GBException("Error removing bond to device: " + device,e);      }    }  }  return false;}  }
class C{  private void processPatch(Operation patch,final State currentState,final State patchState){  if (currentState.executionState != ExecutionState.RUNNING || patchState.triggersSuccess != null || patchState.triggersError != null) {    return;  }  generateQueryCopyStateTaskQuery(currentState).setCompletion(null).sendWith(this);}  }
class C{  public DeployerServlet() throws Exception {  WebAppClassLoader cl=(WebAppClassLoader)this.getClass().getClassLoader();  try {    Method getContextMethod=cl.getClass().getMethod("getContext");    this.context=WebAppContext.class.cast(getContextMethod.invoke(cl));  } catch (  Exception e) {    throw new IllegalStateException("Cannot get the Jetty Web application context",e);  }  String configHome=System.getProperty("config.home");  if (configHome == null) {    configHome=System.getProperty("jetty.base");  }  if (configHome == null) {    configHome=System.getProperty("jetty.home");  }  if (configHome == null) {    throw new IllegalStateException("Cannot find the Jetty configuration home");  }  this.webAppDirectory=new File(configHome,"webapps");  Server server=this.context.getServer();  Handler[] handles=server.getChildHandlers();  for (  Handler handle : handles) {    if (handle instanceof ContextHandlerCollection) {      chc=(ContextHandlerCollection)handle;      break;    }  }  Log.getLogger(this.getClass()).debug("Started the CARGO Jetty deployer servlet with context " + this.context);}  }
class C{  public URLConnection openConnection(Proxy proxy) throws IOException {  if (proxy == null) {    throw new IllegalArgumentException("proxy == null");  }  return streamHandler.openConnection(this,proxy);}  }
class C{  public void log(java.util.logging.Level level,CharSequence message){  LogRecord rec=new ELKILogRecord(level,message);  logger.log(rec);}  }
class C{  public InputEvent(GPOMutable keys,GPOMutable aggregates,int bucketID,int schemaID,int dimensionDescriptorID,int aggregatorIndex){  this.eventKey=new EventKey(bucketID,schemaID,dimensionDescriptorID,aggregatorIndex,keys);  setAggregates(aggregates);}  }
class C{  public Builder withFitnessGoodEnoughFunction(Func1<Double,Boolean> f){  this.isFitnessGoodEnoughFunction=f;  return this;}  }
class C{  public InputStream allocateStream(String key){  RawByteAllocator alloc=findRawByteAllocator(key);  InputStream input=new RawByteInputStream(alloc);  return input;}  }
class C{  public void stopNow(){  this.stop=true;}  }
class C{  public void removeAt(int index){  if (mValues[index] != DELETED) {    mValues[index]=DELETED;    mGarbage=true;  }}  }
class C{  public Cat(final Player owner){  super();  setOwner(owner);  setUp();  setRPClass("cat");  put("type","cat");  if (owner != null) {    owner.getZone().add(this);    owner.setPet(this);  }  update();}  }
class C{  public final Flux<T> sample(Duration timespan){  return sampleMillis(timespan.toMillis());}  }
class C{  protected void writeExternalForeignKeyDropStmt(Table table,ForeignKey foreignKey,StringBuilder ddl){  writeTableAlterStmt(table,ddl);  ddl.append("DROP CONSTRAINT ");  printIdentifier(getForeignKeyName(table,foreignKey),ddl);  printEndOfStatement(ddl);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  @Override public void buildShallowOriginalFromRow(AbstractRecord databaseRow,Object original,JoinedAttributeManager joinManager,ObjectBuildingQuery sourceQuery,AbstractSession executionSession){  Object aggregate=buildAggregateFromRow(databaseRow,original,null,joinManager,sourceQuery,true,executionSession,true);  setAttributeValueInObject(original,aggregate);}  }
class C{  @Override public void actionPerformed(ActionEvent event){  if (abort()) {    return;  }  if (checkPrivateKeysPanel == null) {    return;  }  CharSequence walletPassword=null;  if (checkPrivateKeysPanel.getWalletPasswordField() != null) {    walletPassword=CharBuffer.wrap(checkPrivateKeysPanel.getWalletPasswordField().getPassword());    if (bitcoinController.getModel().getActiveWallet().isEncrypted()) {      if (walletPassword.length() == 0) {        checkPrivateKeysPanel.setMessageText1(controller.getLocaliser().getString("showExportPrivateKeysAction.youMustEnterTheWalletPassword"));        checkPrivateKeysPanel.setMessageText2(" ");        return;      }      if (!bitcoinController.getModel().getActiveWallet().checkPassword(walletPassword)) {        checkPrivateKeysPanel.setMessageText1(controller.getLocaliser().getString("createNewReceivingAddressSubmitAction.passwordIsIncorrect"));        checkPrivateKeysPanel.setMessageText2(" ");        return;      }    }  }  try {    checkPrivateKeysMatchAddresses(bitcoinController.getModel().getActivePerWalletModelData(),walletPassword);  } catch (  PrivateKeysException pke) {    pke.printStackTrace();  }}  }
class C{  public void componentShown(ComponentEvent e){  if (AWTEventMonitor.componentListener_private != null) {    AWTEventMonitor.componentListener_private.componentShown(e);  }}  }
class C{  public void pOlnI(String s) throws IOException {  pO(s);  pln();  pI();}  }
class C{  private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  public void close(){  if (log.isLoggable(Level.FINEST)) {    log.finest("Close Elasticsearch node=" + node + " client="+ client);  }  if (client != null) {    client.close();    client=null;  }  if (node != null) {    node.stop();    node=null;  }}  }
class C{  private static void jsonErrorHandling(JSONObject response,Exception e,JSONParserInterface parser){  if (parser == null || response == null)   return;  String message="";  if (response.has(DomoticzValues.Json.Field.MESSAGE)) {    try {      message=response.getString(DomoticzValues.Json.Field.MESSAGE);    } catch (    JSONException e1) {      e1.printStackTrace();    }  }  Exception exNew;  if (e != null && !UsefulBits.isEmpty(e.getMessage())) {    exNew=new Exception("Failed: " + message + " - "+ e.getMessage());  } else {    exNew=new Exception("Failed: " + message);  }  Log.e(TAG,exNew.getMessage());  if (parser != null)   parser.onError(exNew);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static Intent createDummyIntent(SendLogDetails.AttachmentType attachmentType){  Intent actionSendIntent=new Intent(android.content.Intent.ACTION_SEND);  actionSendIntent.setType(attachmentType.getMimeType());  return actionSendIntent;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.STRICT_MODE_RELEVANT__STRICT_MODE:    setStrictMode((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  static RVMClass readClass(TypeReference typeRef,DataInputStream input) throws ClassFormatError, IOException {  if (RVMClass.isClassLoadingDisabled()) {    throw new RuntimeException("ClassLoading Disabled : " + typeRef);  }  if (VM.TraceClassLoading && VM.runningVM) {    VM.sysWrite("RVMClass: (begin) load file " + typeRef.getName() + "\n");  }  int[] constantPool=readConstantPool(typeRef,input);  short modifiers=input.readShort();  short originalModifiers=modifiers;  int myTypeIndex=readTypeRef(typeRef,input,constantPool);  RVMClass superClass=readSuperClass(input,constantPool,modifiers);  RVMClass[] declaredInterfaces=readDeclaredInterfaces(input,constantPool);  RVMField[] declaredFields=readDeclaredFields(typeRef,input,constantPool);  RVMMethod[] declaredMethods=readDeclaredMethods(typeRef,input,constantPool);  RVMMethod classInitializerMethod=getClassInitializerMethod(declaredMethods);  TypeReference[] declaredClasses=null;  Atom sourceName=null;  TypeReference declaringClass=null;  Atom signature=null;  RVMAnnotation[] annotations=null;  TypeReference enclosingClass=null;  MethodReference enclosingMethod=null;  for (int i=0, n=input.readUnsignedShort(); i < n; ++i) {    Atom attName=getUtf(constantPool,input.readUnsignedShort());    int attLength=input.readInt();    if (attName == RVMClassLoader.sourceFileAttributeName && attLength == 2) {      sourceName=getUtf(constantPool,input.readUnsignedShort());    } else     if (attName == RVMClassLoader.innerClassesAttributeName) {      int numberOfClasses=input.readUnsignedShort();      declaredClasses=new TypeReference[numberOfClasses];      for (int j=0; j < numberOfClasses; ++j) {        int innerClassInfoIndex=input.readUnsignedShort();        int outerClassInfoIndex=input.readUnsignedShort();        int innerNameIndex=input.readUnsignedShort();        int innerClassAccessFlags=input.readUnsignedShort();        if (innerClassInfoIndex != 0 && outerClassInfoIndex == myTypeIndex && innerNameIndex != 0) {          declaredClasses[j]=getTypeRef(constantPool,innerClassInfoIndex);        }        if (innerClassInfoIndex == myTypeIndex) {          if (outerClassInfoIndex != 0) {            declaringClass=getTypeRef(constantPool,outerClassInfoIndex);            if (enclosingClass == null) {              enclosingClass=declaringClass;            }          }          if ((innerClassAccessFlags & (ACC_PRIVATE | ACC_PROTECTED)) != 0) {            modifiers&=~(ACC_PUBLIC | ACC_PRIVATE | ACC_PROTECTED);          }          modifiers|=innerClassAccessFlags;          originalModifiers=(short)innerClassAccessFlags;        }      }    } else     if (attName == RVMClassLoader.syntheticAttributeName) {      modifiers|=ACC_SYNTHETIC;    } else     if (attName == RVMClassLoader.enclosingMethodAttributeName) {      int enclosingClassIndex=input.readUnsignedShort();      enclosingClass=getTypeRef(constantPool,enclosingClassIndex);      int enclosingMethodIndex=input.readUnsignedShort();      if (enclosingMethodIndex != 0) {        int memberNameIndex=constantPool[enclosingMethodIndex] >>> BITS_IN_SHORT;        int memberDescriptorIndex=constantPool[enclosingMethodIndex] & ((1 << BITS_IN_SHORT) - 1);        Atom memberName=getUtf(constantPool,memberNameIndex);        Atom memberDescriptor=getUtf(constantPool,memberDescriptorIndex);        enclosingMethod=MemberReference.findOrCreate(enclosingClass,memberName,memberDescriptor).asMethodReference();      }    } else     if (attName == RVMClassLoader.signatureAttributeName) {      signature=getUtf(constantPool,input.readUnsignedShort());    } else     if (attName == RVMClassLoader.runtimeVisibleAnnotationsAttributeName) {      annotations=AnnotatedElement.readAnnotations(constantPool,input,typeRef.getClassLoader());    } else {      int skippedAmount=input.skipBytes(attLength);      if (skippedAmount != attLength) {        throw new IOException("Unexpected short skip");      }    }  }  return new RVMClass(typeRef,constantPool,modifiers,originalModifiers,superClass,declaredInterfaces,declaredFields,declaredMethods,declaredClasses,declaringClass,enclosingClass,enclosingMethod,sourceName,classInitializerMethod,signature,annotations);}  }
class C{  public boolean isFileTransferMsrpSupported(){  return mFileTransferMsrp;}  }
class C{  public SplittedExampleSet(ExampleSet exampleSet,double splitRatio,int samplingType,boolean useLocalRandomSeed,int seed) throws UserError {  this(exampleSet,new double[]{splitRatio,1 - splitRatio},samplingType,useLocalRandomSeed,seed);}  }
class C{  private void initializeLogFile() throws IOException {  log.setLength(0);  majorFormatVersion=PreferredMajorVersion;  writeInt(log,PreferredMajorVersion);  minorFormatVersion=PreferredMinorVersion;  writeInt(log,PreferredMinorVersion);  logBytes=intBytes * 2;  logEntries=0;}  }
class C{  public InputStreamReader(InputStream in){  super(in);  try {    sd=StreamDecoder.forInputStreamReader(in,this,(String)null);  } catch (  UnsupportedEncodingException e) {    throw new Error(e);  }}  }
class C{  protected void checkClassifier() throws Exception {  double sum=0;  for (int i=0; i < m_alpha.length; i++) {    if (m_alpha[i] > 0) {      sum+=m_class[i] * m_alpha[i];    }  }  System.err.println("Sum of y(i) * alpha(i): " + sum);  for (int i=0; i < m_alpha.length; i++) {    double output=SVMOutput(i,m_data.instance(i));    if (Utils.eq(m_alpha[i],0)) {      if (Utils.sm(m_class[i] * output,1)) {        System.err.println("KKT condition 1 violated: " + m_class[i] * output);      }    }    if (Utils.gr(m_alpha[i],0) && Utils.sm(m_alpha[i],m_C * m_data.instance(i).weight())) {      if (!Utils.eq(m_class[i] * output,1)) {        System.err.println("KKT condition 2 violated: " + m_class[i] * output);      }    }    if (Utils.eq(m_alpha[i],m_C * m_data.instance(i).weight())) {      if (Utils.gr(m_class[i] * output,1)) {        System.err.println("KKT condition 3 violated: " + m_class[i] * output);      }    }  }}  }
class C{  public SubCategoryAxis(String label){  super(label);  this.subCategories=new java.util.ArrayList();}  }
class C{  public static String unescapeHTML(String str){  StringBuilder rtn=new StringBuilder();  int posStart=-1;  int posFinish=-1;  while ((posStart=str.indexOf('&',posStart)) != -1) {    int last=posFinish + 1;    posFinish=str.indexOf(';',posStart);    if (posFinish == -1)     break;    rtn.append(str.substring(last,posStart));    if (posStart + 1 < posFinish) {      rtn.append(unescapeHTMLEntity(str.substring(posStart + 1,posFinish)));    } else {      rtn.append("&;");    }    posStart=posFinish + 1;  }  rtn.append(str.substring(posFinish + 1));  return rtn.toString();}  }
class C{  private ValueRange rangeWeekOfWeekBasedYear(TemporalAccessor temporal){  if (!temporal.isSupported(DAY_OF_YEAR)) {    return WEEK_OF_YEAR_RANGE;  }  int dow=localizedDayOfWeek(temporal);  int doy=temporal.get(DAY_OF_YEAR);  int offset=startOfWeekOffset(doy,dow);  int week=computeWeek(offset,doy);  if (week == 0) {    ChronoLocalDate date=Chronology.from(temporal).date(temporal);    date=date.minus(doy + 7,DAYS);    return rangeWeekOfWeekBasedYear(date);  }  ValueRange dayRange=temporal.range(DAY_OF_YEAR);  int yearLen=(int)dayRange.getMaximum();  int newYearWeek=computeWeek(offset,yearLen + weekDef.getMinimalDaysInFirstWeek());  if (week >= newYearWeek) {    ChronoLocalDate date=Chronology.from(temporal).date(temporal);    date=date.plus(yearLen - doy + 1 + 7,ChronoUnit.DAYS);    return rangeWeekOfWeekBasedYear(date);  }  return ValueRange.of(1,newYearWeek - 1);}  }
class C{  private void initializeBottomSheets(){  initializeBottomSheet();  initializeCustomBottomSheet();  initializeIntentBottomSheet();}  }
class C{  public <D>D oneToMany(Class<D> destinationClass,final T source,final MappingType mtSource){  try {    return this.<D,T>getJMapper(relationalOneToManyMapper,destinationClass).getDestination(source,mtSource);  } catch (  Exception e) {    return (D)this.destinationClassControl(e,destinationClass);  }}  }
class C{  public static LocalTime fromMillisOfDay(long millisOfDay,Chronology chrono){  chrono=DateTimeUtils.getChronology(chrono).withUTC();  return new LocalTime(millisOfDay,chrono);}  }
class C{  public void refreshDomain(){  if (domain.isEmpty()) {    return;  }  String srcFile=domain.getSourceFile().getAbsolutePath();  try {    domain=XMLDomainReader.extractDomain(srcFile);    changeSettings(domain.getSettings());    displayComment("Dialogue domain successfully updated");  } catch (  RuntimeException e) {    log.severe("Cannot refresh domain: " + e.getMessage());    displayComment("Syntax error: " + e.getMessage());    domain=new Domain();    domain.setSourceFile(new File(srcFile));  }  if (getModule(GUIFrame.class) != null) {    getModule(GUIFrame.class).refresh();  }}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public GridFieldVO clone(Properties Ctx,int windowNo,int tabNo,int ad_Window_ID,int ad_Tab_ID,boolean TabReadOnly){  GridFieldVO clone=new GridFieldVO(Ctx,windowNo,tabNo,ad_Window_ID,ad_Tab_ID,TabReadOnly);  clone.isProcess=false;  clone.ColumnName=ColumnName;  clone.ColumnSQL=ColumnSQL;  clone.Header=Header;  clone.displayType=displayType;  clone.AD_Table_ID=AD_Table_ID;  clone.AD_Column_ID=AD_Column_ID;  clone.DisplayLength=DisplayLength;  clone.IsSameLine=IsSameLine;  clone.IsDisplayed=IsDisplayed;  clone.IsDisplayedGrid=IsDisplayedGrid;  clone.SeqNoGrid=SeqNoGrid;  clone.PreferredWidth=PreferredWidth;  clone.DisplayLogic=DisplayLogic;  clone.DefaultValue=DefaultValue;  clone.IsMandatory=IsMandatory;  clone.IsReadOnly=IsReadOnly;  clone.IsUpdateable=IsUpdateable;  clone.IsAlwaysUpdateable=IsAlwaysUpdateable;  clone.IsHeading=IsHeading;  clone.IsFieldOnly=IsFieldOnly;  clone.IsEncryptedField=IsEncryptedField;  clone.IsEncryptedColumn=IsEncryptedColumn;  clone.IsSelectionColumn=IsSelectionColumn;  clone.IsAutocomplete=IsAutocomplete;  clone.SortNo=SortNo;  clone.FieldLength=FieldLength;  clone.VFormat=VFormat;  clone.ValueMin=ValueMin;  clone.ValueMax=ValueMax;  clone.FieldGroup=FieldGroup;  clone.FieldGroupType=FieldGroupType;  clone.IsKey=IsKey;  clone.IsParent=IsParent;  clone.Callout=Callout;  clone.AD_Process_ID=AD_Process_ID;  clone.AD_Chart_ID=AD_Chart_ID;  clone.Description=Description;  clone.Help=Help;  clone.ReadOnlyLogic=ReadOnlyLogic;  clone.MandatoryLogic=MandatoryLogic;  clone.ObscureType=ObscureType;  clone.ValidationCode=ValidationCode;  clone.AD_Reference_Value_ID=AD_Reference_Value_ID;  clone.lookupInfo=lookupInfo;  clone.isRange=isRange;  clone.isEmbedded=isEmbedded;  clone.DefaultValue2=DefaultValue2;  return clone;}  }
class C{  public String sendTextSms(String text,String dest,String sender) throws SmsException, IOException {  SmsTextMessage textMessage=new SmsTextMessage(text,SmsAlphabet.ASCII,SmsMsgClass.CLASS_UNKNOWN);  return sendSms(textMessage,dest,sender);}  }
class C{  public void closeDocViewer(DocViewerPanel docPanel){  if (openDocs.size() == 1) {    return;  }  if (docPanel.hasBeenModfiedSinceSave()) {    Object[] options={"Close Anyway","Cancel"};    int n=JOptionPane.showOptionDialog(null,"Changes have been made to this document since you last saved.\n" + "Would you like to continue closing this tab?","Important Data May Be Lost",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[1]);    if (n == 1) {      return;    }  }  openDocs.remove(docPanel);  docPanel.destroyAllUndoStates();  destroyDoc(docPanel.getDoc());  justClosedTab=true;  docTabs.remove(docPanel);  justClosedTab=false;}  }
class C{  @Override public void test() throws ParameterException {  for (  Parameter<?> p : parameters) {    if (p.isDefined()) {      return;    }  }  throw new WrongParameterValueException("Global Parameter Constraint Error.\n" + "At least one of the parameters " + OptionUtil.optionsNamesToString(parameters) + " has to be set.");}  }
class C{  boolean destroyVolume(boolean force){  NaElement elem=new NaElement("volume-destroy");  elem.addNewChild("force",Boolean.toString(force));  elem.addNewChild("name",name);  try {    server.invokeElem(elem);    return true;  } catch (  Exception e) {    String msg="Failed to destroy volume: " + name;    log.error(msg,e);    throw new NetAppException(msg,e);  }}  }
class C{  public SolutionUserSample() throws KeyManagementException, NoSuchAlgorithmException, KeyStoreException, ClientProtocolException, ClientException, IOException {  super();  resource=new SolutionUserResource(client);}  }
class C{  public void blue(short b){  self.blue=b;}  }
class C{  public static void drawString(final String string,final int maxChars){  if (API.fontRendererAPI != null)   API.fontRendererAPI.drawString(string,maxChars);}  }
class C{  public void onAnimationEnd(Animator animation){  if (mRule == Dependency.AFTER) {    startIfReady(animation);  }}  }
class C{  public static <Type>Constraint<Type> negate(@NonNull final Constraint<Type> constraint){  return NegateConstraint.create(constraint);}  }
class C{  public void check(SnmpValue x,long var,Object data) throws SnmpStatusException {switch ((int)var) {case 3:    throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 2:  throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);case 1:throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);default :throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);}}  }
class C{  public void clear(){  size=0;  items.clear();}  }
class C{  private String streamResult(HttpServletRequest request,HttpServletResponse response,int AD_PInstance_ID,File file){  if (AD_PInstance_ID == 0)   return "Your process not found";  WebSessionCtx wsc=WebSessionCtx.get(request);  Object value=wsc.ctx.get("AD_PInstance_ID=" + AD_PInstance_ID);  if (value == null || !value.equals("ok"))   return "Process Instance not found";  if (file == null || file.length() == 0)   return "No Process Result";  if (!file.exists())   return "Process Result not found: " + file;  return WebUtil.streamFile(response,file);}  }
class C{  public Precondition(){}  }
class C{  private Node rotateRight(Node x){  Node y=x.left;  x.left=y.right;  y.right=x;  y.size=x.size;  x.size=1 + size(x.left) + size(x.right);  x.height=1 + Math.max(height(x.left),height(x.right));  y.height=1 + Math.max(height(y.left),height(y.right));  return y;}  }
class C{  private static final String export(Filter f,String tabs){  StringBuilder sb=new StringBuilder();  if (f == Filter.DEFAULT_FILTER) {  } else   if (f instanceof CategoryFilter) {    CategoryFilter cf=(CategoryFilter)f;    sb.append(tabs).append("bf.setFilter(new CategoryFilter(").append(cf.getCategory()).append(", ").append(cf.getMask()).append("));").append(NEW_LINE);  } else {    throw new UnsupportedOperationException(MessageFormat.format(Messages.getString("exception.persist.unknownClass"),f.getClass().getName()));  }  return sb.toString();}  }
class C{  public void removeListener(final ThreadListener listener){  listeners.removeListener(listener);}  }
class C{  public static void uiImpl(){  PopupFactory.setSharedInstance(popupFactoryDIY);}  }
class C{  private void configureAnnotationModel(final DocumentHandle documentHandle){  final AnnotationModel annotationModel=configuration.getAnnotationModel();  if (annotationModel == null) {    return;  }  if (textEditor instanceof HasGutter && ((HasGutter)this.textEditor).getGutter() != null) {    final GutterAnnotationRenderer annotationRenderer=new GutterAnnotationRenderer();    annotationRenderer.setDocument(documentHandle.getDocument());    annotationRenderer.setHasGutter(((HasGutter)this.textEditor).getGutter());    documentHandle.getDocEventBus().addHandler(AnnotationModelEvent.TYPE,annotationRenderer);    documentHandle.getDocEventBus().addHandler(ClearAnnotationModelEvent.TYPE,annotationRenderer);  }  final InlineAnnotationRenderer inlineAnnotationRenderer=new InlineAnnotationRenderer();  inlineAnnotationRenderer.setDocument(documentHandle.getDocument());  inlineAnnotationRenderer.setHasTextMarkers(this.textEditor.getHasTextMarkers());  documentHandle.getDocEventBus().addHandler(AnnotationModelEvent.TYPE,inlineAnnotationRenderer);  documentHandle.getDocEventBus().addHandler(ClearAnnotationModelEvent.TYPE,inlineAnnotationRenderer);  if (this.textEditor instanceof HasMinimap && ((HasMinimap)this.textEditor).getMinimap() != null) {    final MinimapAnnotationRenderer minimapAnnotationRenderer=new MinimapAnnotationRenderer();    minimapAnnotationRenderer.setDocument(documentHandle.getDocument());    minimapAnnotationRenderer.setMinimap(((HasMinimap)this.textEditor).getMinimap());    documentHandle.getDocEventBus().addHandler(AnnotationModelEvent.TYPE,minimapAnnotationRenderer);    documentHandle.getDocEventBus().addHandler(ClearAnnotationModelEvent.TYPE,minimapAnnotationRenderer);  }  annotationModel.setDocumentHandle(documentHandle);  documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE,annotationModel);  documentHandle.getDocEventBus().addHandler(QueryAnnotationsEvent.TYPE,annotationModel);}  }
class C{  private void Routine_L21(){  while (true) {    --gi;    if (gi < iss)     return;    idir=1;    if (funcArray[gj - 1][gi - 1] <= cont) {      if (iae != 0) {        int ij=gi * 1000 + gj + 1000;        int ntmp3=iae;        for (int iia=1; iia <= ntmp3; ++iia) {          if (pathbufia[iia - 1] == ij) {            pathbufia[iia - 1]=0;            break;          }        }      }      doInterpolation();      return;    }    fij=funcArray[gj - 1][gi - 1];    if (Routine_L31())     return;  }}  }
class C{  public boolean contains(ReadonlyTColor color){  for (  ReadonlyTColor c : colors) {    if (c.equals(color)) {      return true;    }  }  return false;}  }
class C{  public boolean isDateAcct(){  Object oo=get_Value(COLUMNNAME_DateAcct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  public boolean isColumnTypeCalculation(){  return COLUMNTYPE_Calculation.equals(getColumnType());}  }
class C{  public static void silence(boolean isSilenced){  TrainingExerciseBase.isSilenced=isSilenced;}  }
class C{  static void appendLengthInfo(int numLetters,Version version,Mode mode,BitArray bits) throws WriterException {  int numBits=mode.getCharacterCountBits(version);  if (numLetters >= (1 << numBits)) {    throw new WriterException(numLetters + " is bigger than " + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean isFull(){  return membersAndLastSeen.size() >= MAX_MEMBERS;}  }
class C{  @NotNull public <T extends PsiElement>PsiTypedQuery<T> filter(@NotNull final Class<T> clazz){  final Set<PsiElement> result=new HashSet<PsiElement>(Arrays.asList(myPsiElements));  for (  final PsiElement element : myPsiElements) {    if (!(clazz.isInstance(element))) {      result.remove(element);    }  }  @SuppressWarnings("unchecked") final List<T> toAdd=(List<T>)new ArrayList<PsiElement>(result);  return new PsiTypedQuery<T>(clazz,toAdd);}  }
class C{  public static Paint newHandlerPaint(@NonNull Resources resources){  final Paint paint=new Paint();  paint.setAntiAlias(true);  paint.setColor(resources.getColor(R.color.corner));  paint.setStyle(Paint.Style.FILL);  return paint;}  }
class C{  public void addLoadConstant(String k){  add(ByteCode.LDC,itsConstantPool.addConstant(k));}  }
class C{  protected void notifyListeners(String url,String user,String pw,String query){  Iterator<ResultChangedListener> iter;  ResultChangedListener l;  iter=m_Listeners.iterator();  while (iter.hasNext()) {    l=iter.next();    l.resultChanged(new ResultChangedEvent(this,url,user,pw,query));  }}  }
class C{  private void checkValid(Position pos,Move move){  assertTrue(move != null);  ArrayList<Move> moveList=new MoveGen().legalMoves(pos);  assertTrue(moveList.contains(move));}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  public synchronized Vertex findByData(Object data){  if (data == null) {    return null;  }  Vertex vertex=this.verticiesByData.get(data);  if (vertex != null) {    return vertex;  }  Query query=getEntityManager().createNamedQuery("findVertexByData");  query.setHint(QueryHints.READ_ONLY,true);  query.setParameter("data",BasicVertex.convertDataValue(data));  query.setParameter("type",BasicVertex.convertDataType(data));  try {    vertex=(Vertex)query.getSingleResult();    if (this.verticiesByData.size() < MAX_SIZE) {      this.verticiesByData.put(vertex.getData(),vertex);    }    return vertex;  } catch (  NoResultException notFound) {    return null;  }}  }
class C{  public void stay(){}  }
class C{  private static void SetStaticBooleanField(JNIEnvironment env,int classJREF,int fieldID,boolean fieldValue){  if (traceJNI)   VM.sysWrite("JNI called: SetStaticBooleanField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    field.setBooleanValueUnchecked(null,fieldValue);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  protected JPanel createURISelectionPanel(){  JPanel p=new JPanel(new GridBagLayout());  p.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));  ExtendedGridBagConstraints constraints;  constraints=new ExtendedGridBagConstraints();  constraints.insets=new Insets(5,5,5,5);  constraints.weightx=0;  constraints.weighty=0;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.setGridBounds(0,0,2,1);  p.add(new JLabel(resources.getString("Dialog.label")),constraints);  textField=new JTextField(30);  textField.getDocument().addDocumentListener(new DocumentAdapter());  constraints.weightx=1.0;  constraints.weighty=0;  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.setGridBounds(0,1,1,1);  p.add(textField,constraints);  constraints.weightx=0;  constraints.weighty=0;  constraints.fill=GridBagConstraints.NONE;  constraints.setGridBounds(1,1,1,1);  p.add(buttonFactory.createJButton("BrowseButton"),constraints);  return p;}  }
class C{  public Language language(){  return language;}  }
class C{  public static String xmlText(String text){  return xmlText(text,false);}  }
class C{  public static long hash64(final String text){  final byte[] bytes=text.getBytes();  return hash64(bytes,bytes.length);}  }
class C{  public void firePropertyChange(String propertyName,boolean oldValue,boolean newValue){}  }
class C{  public FlyweightProcessingInstruction(String target,String text){  this.target=target;  this.text=text;  this.values=parseValues(text);}  }
class C{  public Property dayOfWeek(){  return new Property(this,getChronology().dayOfWeek());}  }
class C{  public SSLEngineResult(Status status,HandshakeStatus handshakeStatus,int bytesConsumed,int bytesProduced){  if ((status == null) || (handshakeStatus == null) || (bytesConsumed < 0)|| (bytesProduced < 0)) {    throw new IllegalArgumentException("Invalid Parameter(s)");  }  this.status=status;  this.handshakeStatus=handshakeStatus;  this.bytesConsumed=bytesConsumed;  this.bytesProduced=bytesProduced;}  }
class C{  protected String modelToString(DefaultListModel m){  String result;  String tmpStr;  int i;  int n;  boolean quote;  result="";  for (i=0; i < m.size(); i++) {    if (i > 0) {      result+=",";    }    tmpStr=m.get(i).toString();    quote=(tmpStr.indexOf(",") > -1) || (tmpStr.indexOf(" ") > -1);    if (quote) {      result+="\"";    }    for (n=0; n < tmpStr.length(); n++) {      if (tmpStr.charAt(n) == '"') {        result+="" + "\"\"";      } else {        result+="" + tmpStr.charAt(n);      }    }    if (quote) {      result+="\"";    }  }  return result;}  }
class C{  public static MavenArtifact parseMavenArtifact(String line){  if (line != null) {    final String[] segments=removeLoggerPrefix(line).split(":");    if (segments.length >= 5) {      final String groupId=segments[0];      final String artifactId=segments[1];      final String type=segments[2];      final String classifier;      final String version;      final String scope;      if (segments.length == 5) {        version=segments[3];        classifier=null;        scope=segments[4];      } else {        version=segments[4];        classifier=segments[3];        scope=segments[5];      }      return new MavenArtifact(groupId,artifactId,type,classifier,version,scope);    }  }  return null;}  }
class C{  public static Drawable makeInvertedScrimDrawable(Context context){  return ScrimUtils.makeCubicGradientScrimDrawable(context.getResources().getColor(R.color.black_overlay),3,Gravity.BOTTOM);}  }
class C{  public static int findURISplitIndex(String uri){  int uriLength=uri.length();  int idx=uriLength - 1;  for (; idx >= 0; idx--) {    if (!TurtleUtil.isNameChar(uri.charAt(idx))) {      break;    }  }  idx++;  for (; idx < uriLength; idx++) {    if (TurtleUtil.isNameStartChar(uri.charAt(idx))) {      break;    }  }  if (!TurtleUtil.isNameEndChar(uri.charAt(uriLength - 1))) {    return -1;  }  if (idx > 0 && idx < uriLength) {    return idx;  }  return -1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public TLongDoubleHashMapDecorator(TLongDoubleHashMap map){  super();  this._map=map;}  }
class C{  public boolean startDiscovery(){  return mBluetoothAdapter.startDiscovery();}  }
class C{  final protected boolean rangeCheckChildIndex(final int index){  if (index < 0 || index > getKeys().size() + 1)   throw new IndexOutOfBoundsException();  return true;}  }
class C{  public static MethodSymbol findMethodDeclarationInType(Types types,TypeSymbol typeSymbol,JCMethodInvocation invocation){  String meth=invocation.meth.toString();  String methName=meth.substring(meth.lastIndexOf('.') + 1);  return findMethodDeclarationInType(types,typeSymbol,methName,(MethodType)invocation.meth.type);}  }
class C{  public void characters(String characters) throws SAXException {  final int len=characters.length();  if (len > m_charsBuff.length) {    m_charsBuff=new char[len * 2 + 1];  }  characters.getChars(0,len,m_charsBuff,0);  characters(m_charsBuff,0,len);}  }
class C{  public Boolean isHttpSupportInformation(){  return httpSupportInformation;}  }
class C{  @Override public String checkForSnapshotsToCopyToTarget(Workflow workflow,StorageSystem storageSystem,String previousStep,Map<URI,Integer> volumeMap,Collection<Map<URI,Integer>> volumesToAdd){  String step=previousStep;  ListMultimap<String,URI> snaps=getBlockSnapshotsRequiringCopyToTarget(volumeMap,volumesToAdd);  if (snaps != null && !snaps.isEmpty()) {    for (    Map.Entry<String,Collection<URI>> entries : snaps.asMap().entrySet()) {      List<URI> snapshots=new ArrayList<URI>();      snapshots.addAll(entries.getValue());      _log.info(String.format("Need to run copy-to-target snapshots in snap set %s:%n%s",entries.getKey(),Joiner.on(',').join(snapshots)));      step=SnapshotWorkflowEntryPoints.generateCopySnapshotsToTargetWorkflow(workflow,step,storageSystem,snapshots);    }  } else {    _log.info("There are no block snapshots that require copy-to-target.");  }  return step;}  }
class C{  public void reset() throws IOException {  in.reset();}  }
class C{  public Builder maxItemsPerRequest(Integer maxItemsPerRequest){  this.maxItemsPerRequest=maxItemsPerRequest;  return this;}  }
class C{  public PureLogWriter(int level,PrintStream logWriter){  this(level,new PrintWriter(logWriter,true),null);}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public boolean isUseAverage(){  return useAvg;}  }
class C{  public int next(){  if (_currentNode != DTM.NULL) {    for (int node=(NOTPROCESSED == _currentNode) ? _firstch(makeNodeIdentity(_startNode)) : _nextsib(_currentNode); node != END; node=_nextsib(node)) {      if (m_expandedNameTable.getNamespaceID(_exptype(node)) == _nsType) {        _currentNode=node;        return returnNode(node);      }    }  }  return END;}  }
class C{  public static int[] resize(int buffer[],int newSize){  int temp[]=new int[newSize];  System.arraycopy(buffer,0,temp,0,buffer.length >= newSize ? newSize : buffer.length);  return temp;}  }
class C{  public int indexOfFromTo(boolean element,int from,int to){  if (size == 0)   return -1;  checkRangeFromTo(from,to,size);  boolean[] theElements=elements;  for (int i=from; i <= to; i++) {    if (element == theElements[i]) {      return i;    }  }  return -1;}  }
class C{  protected SVGZoomAndPanSupport(){}  }
class C{  public JButton add(Action a){  JButton b=createActionComponent(a);  b.setAction(a);  add(b);  return b;}  }
class C{  public void addIterator(DTMIterator expr){  if (null == m_iterators) {    m_iterators=new DTMIterator[1];    m_iterators[0]=expr;  } else {    DTMIterator[] exprs=m_iterators;    int len=m_iterators.length;    m_iterators=new DTMIterator[len + 1];    System.arraycopy(exprs,0,m_iterators,0,len);    m_iterators[len]=expr;  }  expr.nextNode();  if (expr instanceof Expression)   ((Expression)expr).exprSetParent(this);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__BODY:    return basicSetBody(null,msgs);case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__FLAGS:  return basicSetFlags(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:41.137 -0500",hash_original_method="48A793410EC20AE25AD82C2AF4EE25D7",hash_generated_method="A2CE7F5AE2378581AB4DB2D62947FD5F") private static float[][] computeCoVariance(float[] points){  float[][] array=new float[2][2];  array[0][0]=0;  array[0][1]=0;  array[1][0]=0;  array[1][1]=0;  int count=points.length;  for (int i=0; i < count; i++) {    float x=points[i];    i++;    float y=points[i];    array[0][0]+=x * x;    array[0][1]+=x * y;    array[1][0]=array[0][1];    array[1][1]+=y * y;  }  array[0][0]/=(count / 2);  array[0][1]/=(count / 2);  array[1][0]/=(count / 2);  array[1][1]/=(count / 2);  return array;}  }
class C{  @Override public Statement createStatement() throws SQLException {  try {    int id=getNextId(TraceObject.STATEMENT);    if (isDebugEnabled()) {      debugCodeAssign("Statement",TraceObject.STATEMENT,id,"createStatement()");    }    checkClosed();    return new JdbcStatement(this,id,ResultSet.TYPE_FORWARD_ONLY,Constants.DEFAULT_RESULT_SET_CONCURRENCY,false);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void testGetColumnsUnsigned() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testGetUnsignedCols");    this.stmt.executeUpdate("CREATE TABLE testGetUnsignedCols (field1 BIGINT, field2 BIGINT UNSIGNED)");    DatabaseMetaData dbmd=this.conn.getMetaData();    this.rs=dbmd.getColumns(this.conn.getCatalog(),null,"testGetUnsignedCols","%");    assertTrue(this.rs.next());    assertTrue(this.rs.next());    assertTrue(this.rs.getString(6).toLowerCase().indexOf("unsigned") != -1);  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testGetUnsignedCols");  }}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){  MimeMappings mappings=new MimeMappings(MimeMappings.DEFAULT);  mappings.add("html","text/html;charset=utf-8");  mappings.add("json","text/html;charset=utf-8");  container.setMimeMappings(mappings);}  }
class C{  public boolean isMultiLineHeader(){  Object oo=get_Value(COLUMNNAME_IsMultiLineHeader);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void calculateStatesStatesPruning(int[] states1,double[] matrices1,int[] states2,double[] matrices2,double[] partials3){  int v=0;  for (int l=0; l < matrixCount; l++) {    for (int k=0; k < patternCount; k++) {      int state1=states1[k];      int state2=states2[k];      int w=l * matrixSize;      if (state1 < stateCount && state2 < stateCount) {        for (int i=0; i < stateCount; i++) {          partials3[v]=matrices1[w + state1] * matrices2[w + state2];          v++;          w+=stateCount;        }      } else       if (state1 < stateCount) {        for (int i=0; i < stateCount; i++) {          partials3[v]=matrices1[w + state1];          v++;          w+=stateCount;        }      } else       if (state2 < stateCount) {        for (int i=0; i < stateCount; i++) {          partials3[v]=matrices2[w + state2];          v++;          w+=stateCount;        }      } else {        for (int j=0; j < stateCount; j++) {          partials3[v]=1.0;          v++;        }      }    }  }}  }
class C{  public SnmpStringFixed(int l,byte[] v) throws IllegalArgumentException {  if ((l <= 0) || (v == null)) {    throw new IllegalArgumentException();  }  int length=Math.min(l,v.length);  value=new byte[l];  for (int i=0; i < length; i++) {    value[i]=v[i];  }  for (int i=length; i < l; i++) {    value[i]=0;  }}  }
class C{  public EPStatementObjectModel havingClause(Expression havingClause){  this.havingClause=havingClause;  return this;}  }
class C{  public Resource(String name){  this(name,false,0,false);}  }
class C{  public static void testSchnorrSign() throws AssertFailException {  byte[] data=BaseEncoding.base16().lowerCase().decode("CF80CD8AED482D5D1527D7DC72FCEFF84E6326592848447D2DC0B0E87DFC9A90".toLowerCase());  byte[] sec=BaseEncoding.base16().lowerCase().decode("67E56582298859DDAE725F972992A07C6C4FB9F62A8FFF58CE3CA926A1063530".toLowerCase());  byte[] resultArr=NativeSecp256k1.schnorrSign(data,sec);  String sigString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(sigString,"C5E929AA058B982048760422D3B563749B7D0E50C5EBD8CD2FFC23214BD6A2F1B072C13880997EBA847CF20F2F90FCE07C1CA33A890A4127095A351127F8D95F","testSchnorrSign");}  }
class C{  public long node(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return node;}  }
class C{  public boolean isNonKey(){  return (keyType == VPF_COLUMN_NON_KEY);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String pv=getString(stack);  String pn=getString(stack);  Widget w=getWidget(stack);  if (SageConstants.LITE)   return null;  if (w != null)   WidgetFidget.setProperty(w,WidgetMeta.getPropForName(pn),pv);  return null;}  }
class C{  public static Vector<String> scanForDirLogs(final String currentPath){  if (Cfg.DEBUG) {    Check.requires(currentPath != null,"null argument");  }  File fc;  final Vector<String> vector=new Vector<String>();  try {    fc=new File(currentPath);    if (fc.isDirectory()) {      final String[] fileLogs=fc.list();      for (      final String dir : fileLogs) {        final File fdir=new File(currentPath + dir);        if (fdir.isDirectory()) {          vector.addElement(dir + "/");          if (Cfg.DEBUG) {            Check.log(TAG + " scanForDirLogs adding: " + dir);          }        }      }    }  } catch (  final Exception e) {    if (Cfg.EXCEPTION) {      Check.log(e);    }    if (Cfg.DEBUG) {      Check.log(TAG + " Error: scanForDirLogs: " + e);    }  }  if (Cfg.DEBUG) {    Check.log(TAG + " scanForDirLogs #: " + vector.size());  }  return vector;}  }
class C{  private void initializePath(String p_uriSpec) throws MalformedURIException {  if (p_uriSpec == null) {    throw new MalformedURIException("Cannot initialize path from null string!");  }  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == '?' || testChar == '#') {      break;    }    if (testChar == '%') {      if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {        throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE,null));      }    } else     if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {      if ('\\' != testChar)       throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PATH_INVALID_CHAR,new Object[]{String.valueOf(testChar)}));    }    index++;  }  m_path=p_uriSpec.substring(start,index);  if (testChar == '?') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '#') {        break;      }      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Query string contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Query string contains invalid character:" + testChar);      }      index++;    }    m_queryString=p_uriSpec.substring(start,index);  }  if (testChar == '#') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Fragment contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Fragment contains invalid character:" + testChar);      }      index++;    }    m_fragment=p_uriSpec.substring(start,index);  }}  }
class C{  protected void paintThumb(SynthContext context,Graphics g,Rectangle thumbBounds){  SynthLookAndFeel.updateSubregion(context,g,thumbBounds);  int orientation=scrollbar.getOrientation();  context.getPainter().paintScrollBarThumbBackground(context,g,thumbBounds.x,thumbBounds.y,thumbBounds.width,thumbBounds.height,orientation);  context.getPainter().paintScrollBarThumbBorder(context,g,thumbBounds.x,thumbBounds.y,thumbBounds.width,thumbBounds.height,orientation);}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  private void findAndReadDescriptor(MyBufferedInputStream baseStream,LocalFileHeader header) throws IOException {  final Decompressor decompressor=Decompressor.init(baseStream,header);  int uncompressedSize=0;  while (true) {    int blockSize=decompressor.read(null,0,2048);    if (blockSize <= 0) {      break;    }    uncompressedSize+=blockSize;  }  header.UncompressedSize=uncompressedSize;  Decompressor.storeDecompressor(decompressor);}  }
class C{  public boolean hasMeteredHint(){  if (vendorInfo != null) {    return vendorInfo.contains("ANDROID_METERED");  } else {    return false;  }}  }
class C{  private void makeCacheDownloadsInvisible(SQLiteDatabase db){  ContentValues values=new ContentValues();  values.put(DownloadContract.Downloads.COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI,false);  String cacheSelection=DownloadContract.Downloads.COLUMN_DESTINATION + " != " + DownloadsDestination.DESTINATION_EXTERNAL;  db.update(DownloadContract.Downloads.DOWNLOADS_TABLE_NAME,values,cacheSelection,null);}  }
class C{  protected void fireEndDoc() throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDDOCUMENT);  }}  }
class C{  @Override public void removeAllChildren(){  removeAll(getChildren());}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (getOutputFormat().numAttributes() == 0) {    return false;  }  double[] vals=new double[getOutputFormat().numAttributes()];  for (int i=0; i < m_SelectedAttributes.length; i++) {    int current=m_SelectedAttributes[i];    vals[i]=instance.value(current);  }  Instance inst=null;  if (instance instanceof SparseInstance) {    inst=new SparseInstance(instance.weight(),vals);  } else {    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(getOutputFormat());  copyValues(inst,false,instance.dataset(),getOutputFormat());  inst.setDataset(getOutputFormat());  push(inst);  return true;}  }
class C{  public void finishSegment(int segment){synchronized (finished) {    if (segment > finished.size()) {      throw new IllegalArgumentException("Invalid segment passed to finishSegment");    }    finished.set(segment);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_CODE_LANGS_1__CODE_LANG_1:    return getCodeLang_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static boolean isValidDate(String value){  String regex="-?\\d\\d\\d\\d-\\d\\d-\\d\\d(Z|(\\+|-)\\d\\d:\\d\\d)?";  if (value.matches(regex)) {    return isValidCalendarValue(value);  } else {    return false;  }}  }
class C{  public void testNoDataSourceSupport(){  AbstractLocalConfiguration configuration=new LocalConfigurationThatSupportsProperty(Arrays.asList(new String[]{}));  configuration.getDataSources().add(ConfigurationFixtureFactory.createDataSource().buildDataSource());  try {    configuration.collectUnsupportedDataSourcesAndThrowException();    fail("should have gotten an Exception");  } catch (  CargoException e) {    assertEquals("This configuration does not support DataSource configuration! " + "JndiName: jdbc/CargoDS",e.getMessage());  }}  }
class C{  public static void doMain(String[] args){  String job="java:creatingCellRDD";  String keyspaceName="test";  String tableName="tweets";  ContextProperties p=new ContextProperties(args);  SparkConf sparkConf=new SparkConf().setMaster(p.getCluster()).setAppName(job).setJars(p.getJars()).setSparkHome(p.getSparkHome());  SparkContext sc=new SparkContext(p.getCluster(),job,sparkConf);  LOG.info("spark.serializer: " + System.getProperty("spark.serializer"));  LOG.info("spark.kryo.registrator: " + System.getProperty("spark.kryo.registrator"));  DeepSparkContext deepContext=new DeepSparkContext(sc);  CassandraDeepJobConfig<Cells> config=CassandraConfigFactory.create().host(p.getCassandraHost()).cqlPort(p.getCassandraCqlPort()).rpcPort(p.getCassandraThriftPort()).keyspace("onestore").table("bitemporal_index").initialize();  JavaRDD rdd=deepContext.createJavaRDD(config);  counts=rdd.count();  LOG.info("Num of rows: " + counts);  deepContext.stop();}  }
class C{  private static boolean needIncrement(MutableBigInteger mdivisor,int roundingMode,int qsign,MutableBigInteger mq,MutableBigInteger mr){  assert !mr.isZero();  int cmpFracHalf=mr.compareHalf(mdivisor);  return commonNeedIncrement(roundingMode,qsign,cmpFracHalf,mq.isOdd());}  }
class C{  public static FromEndOfWindow pastEndOfWindow(){  return new FromEndOfWindow();}  }
class C{  @After @Override public void tearDown() throws Exception {  final BiMap<URI,String> locations=ExternalLibrariesActivator.EXTERNAL_LIBRARIES_SUPPLIER.get();  for (  final URI location : locations.keySet()) {    externalLibraryPreferenceStore.remove(location);  }  final IStatus result=externalLibraryPreferenceStore.save(new NullProgressMonitor());  assertTrue("Error while saving external library preference changes.",result.isOK());  waitForAutoBuild();  super.tearDown();}  }
class C{  public EditSession undo(@Nullable BlockBag newBlockBag,Player player){  checkNotNull(player);  loadSessionHistoryFromDisk(player.getUniqueId(),player.getWorld());  if (getHistoryNegativeIndex() < history.size()) {    FaweChangeSet changeSet=(FaweChangeSet)history.get(getHistoryIndex());    final FawePlayer fp=FawePlayer.wrap(player);    EditSession newEditSession=new EditSessionBuilder(changeSet.getWorld()).allowedRegionsEverywhere().checkMemory(false).changeSet(changeSet).fastmode(false).limitUnprocessed(fp).player(fp).blockBag(getBlockBag(player)).build();    newEditSession.undo(newEditSession);    setDirty();    historyNegativeIndex++;    return newEditSession;  } else {    int size=history.size();    if (getHistoryNegativeIndex() != size) {      historyNegativeIndex=history.size();      setDirty();    }    return null;  }}  }
class C{  public void gotoOffset(final long offset){  setCurrentPosition(offset);}  }
class C{  public void destroy(){  getExecutorService().shutdownNow();}  }
class C{  public void mouseEntered(MouseEvent e){  mouseSupport.fireMapMouseEntered(e);}  }
class C{  @Override public final Cursor query(final Uri uri,final String[] projection,final String selection,final String[] selectionArgs,final String sortOrder){  final SQLiteQueryBuilder queryBuilder=new SQLiteQueryBuilder();  final SQLiteDatabase dbConnection=db.getReadableDatabase();switch (URI_MATCHER.match(uri)) {case SITE_ID:    queryBuilder.appendWhere(SiteTable.ID + "=" + uri.getPathSegments().get(1));case SITE_DIR:  queryBuilder.setTables(SiteTable.TABLE_NAME);break;case USERINFO_ID:queryBuilder.appendWhere(UserInfoTable.ID + "=" + uri.getPathSegments().get(1));case USERINFO_DIR:queryBuilder.setTables(UserInfoTable.TABLE_NAME);break;case FEATURED_USERS_ID:queryBuilder.appendWhere(Featured_usersTable.ID + "=" + uri.getPathSegments().get(1));case FEATURED_USERS_DIR:queryBuilder.setTables(Featured_usersTable.TABLE_NAME);break;case CATEGORY_PROPERTIES_ID:queryBuilder.appendWhere(Category_propertiesTable.ID + "=" + uri.getPathSegments().get(1));case CATEGORY_PROPERTIES_DIR:queryBuilder.setTables(Category_propertiesTable.TABLE_NAME);break;case CATEGORIES_ID:queryBuilder.appendWhere(CategoriesTable.ID + "=" + uri.getPathSegments().get(1));case CATEGORIES_DIR:queryBuilder.setTables(CategoriesTable.TABLE_NAME);break;case TOPICS_ID:queryBuilder.appendWhere(TopicsTable.ID + "=" + uri.getPathSegments().get(1));case TOPICS_DIR:queryBuilder.setTables(TopicsTable.TABLE_NAME);break;case TOPICSDETAILS_ID:queryBuilder.appendWhere(TopicsDetailsTable.ID + "=" + uri.getPathSegments().get(1));case TOPICSDETAILS_DIR:queryBuilder.setTables(TopicsDetailsTable.TABLE_NAME);break;case TOPICSPARTICIPANTS_ID:queryBuilder.appendWhere(TopicsParticipantsTable.ID + "=" + uri.getPathSegments().get(1));case TOPICSPARTICIPANTS_DIR:queryBuilder.setTables(TopicsParticipantsTable.TABLE_NAME);break;case SUGGESTED_TOPICS_ID:queryBuilder.appendWhere(Suggested_topicsTable.ID + "=" + uri.getPathSegments().get(1));case SUGGESTED_TOPICS_DIR:queryBuilder.setTables(Suggested_topicsTable.TABLE_NAME);break;case CATEGORY_GROUP_PERMISSIONS_ID:queryBuilder.appendWhere(Category_group_permissionsTable.ID + "=" + uri.getPathSegments().get(1));case CATEGORY_GROUP_PERMISSIONS_DIR:queryBuilder.setTables(Category_group_permissionsTable.TABLE_NAME);break;case TOPICS_USERS_ID:queryBuilder.appendWhere(Topics_usersTable.ID + "=" + uri.getPathSegments().get(1));case TOPICS_USERS_DIR:queryBuilder.setTables(Topics_usersTable.TABLE_NAME);break;case TOPICS_PROPERTIES_ID:queryBuilder.appendWhere(Topics_propertiesTable.ID + "=" + uri.getPathSegments().get(1));case TOPICS_PROPERTIES_DIR:queryBuilder.setTables(Topics_propertiesTable.TABLE_NAME);break;case TOPIC_POSTERS_ID:queryBuilder.appendWhere(Topic_postersTable.ID + "=" + uri.getPathSegments().get(1));case TOPIC_POSTERS_DIR:queryBuilder.setTables(Topic_postersTable.TABLE_NAME);break;default :throw new IllegalArgumentException("Unsupported URI:" + uri);}Cursor cursor=queryBuilder.query(dbConnection,projection,selection,selectionArgs,null,null,sortOrder);cursor.setNotificationUri(getContext().getContentResolver(),uri);return cursor;}  }
class C{  public LocalRasterServerLayer(Document dom,AVList params){  super(dom,params);  this.createRasterServer(params != null ? params : (AVList)this.getValue(AVKey.CONSTRUCTION_PARAMETERS));}  }
class C{  public static JScrollPane createScrollPane(int vsbPolicy,int hsbPolicy){  return createScrollPane(null,vsbPolicy,hsbPolicy);}  }
class C{  public boolean isBloomFilteringSupported(){  return clientVersion >= params.getProtocolVersionNum(NetworkParameters.ProtocolVersion.BLOOM_FILTER);}  }
class C{  void traceError(Throwable e){  if (trace) {    e.printStackTrace();  }}  }
class C{  public static void moveInstruction(Instruction from,Instruction to){  from.remove();  to.insertBefore(from);}  }
class C{  public static Test suite(){  return new TestSuite(TestDiscreteProbs.class);}  }
class C{  public static void append(File self,InputStream stream) throws IOException {  OutputStream out=new FileOutputStream(self,true);  try {    IOGroovyMethods.leftShift(out,stream);  }  finally {    closeWithWarning(out);  }}  }
class C{  public boolean isSelected(final Sensor sensor){  return selection.contains(sensor);}  }
class C{  private void processEMail(){}  }
class C{  public NotSpecification(final Specification<T> spec1){  this.spec1=spec1;}  }
class C{  public static int nameCacheHitSize(){  return NAME_CACHE_HIT.size();}  }
class C{  public boolean isMappedKeyMapAccessor(){  return MappedKeyMapAccessor.class.isAssignableFrom(getClass()) && isMapAccessor() && !hasMapKey();}  }
class C{  public boolean isFeedbackMessage(){  return false;}  }
class C{  @Override protected Double privateExecuteIn(final IScope scope) throws GamaRuntimeException {  final Double result=(Double)expression.value(scope);  return result;}  }
class C{  public JsonToken next(){  return currentToken;}  }
class C{  public Builder(Email email){  super(email);  type=email.type;}  }
class C{  private SupertypeQueryResults computeSupertypes(ClassDescriptor classDescriptor){  if (DEBUG_QUERIES) {    System.out.println("Computing supertypes for " + classDescriptor.toDottedClassName());  }  ClassVertex typeVertex=optionallyResolveClassVertex(classDescriptor);  SupertypeQueryResults supertypeSet=new SupertypeQueryResults();  LinkedList<ClassVertex> workList=new LinkedList<ClassVertex>();  workList.addLast(typeVertex);  while (!workList.isEmpty()) {    ClassVertex vertex=workList.removeFirst();    supertypeSet.addSupertype(vertex.getClassDescriptor());    if (vertex.isResolved()) {      if (DEBUG_QUERIES) {        System.out.println("  Adding supertype " + vertex.getClassDescriptor().toDottedClassName());      }    } else {      if (DEBUG_QUERIES) {        System.out.println("  Encountered unresolved class " + vertex.getClassDescriptor().toDottedClassName() + " in supertype query");      }      supertypeSet.setEncounteredMissingClasses(true);    }    Iterator<InheritanceEdge> i=graph.outgoingEdgeIterator(vertex);    while (i.hasNext()) {      InheritanceEdge edge=i.next();      workList.addLast(edge.getTarget());    }  }  return supertypeSet;}  }
class C{  public void addXPathPropertyFragment(String name,String xpath,QName type,String eventTypeName){  if ((type != XPathConstants.NODE) && (type != XPathConstants.NODESET)) {    throw new IllegalArgumentException("XPath property for fragments requires an Node or Nodeset (XPathConstants.NODE/NODESET) return value for property '" + name + "'");  }  XPathPropertyDesc desc=new XPathPropertyDesc(name,xpath,type,eventTypeName);  xPathProperties.put(name,desc);}  }
class C{  public MapTileMaker(String prefix,Properties props,Map<String,Layer> instantiatedLayers){  super(prefix,props,instantiatedLayers);}  }
class C{  public static String toTypeDescriptive(EPType epType){  if (epType instanceof EventEPType) {    EventEPType type=(EventEPType)epType;    return "event type '" + type.getType().getName() + "'";  } else   if (epType instanceof EventMultiValuedEPType) {    EventMultiValuedEPType type=(EventMultiValuedEPType)epType;    if (type.getContainer() == EventType[].class) {      return "array of events of type '" + type.getComponent().getName() + "'";    } else {      return "collection of events of type '" + type.getComponent().getName() + "'";    }  } else   if (epType instanceof ClassMultiValuedEPType) {    ClassMultiValuedEPType type=(ClassMultiValuedEPType)epType;    if (type.getContainer().isArray()) {      return "array of " + type.getComponent().getSimpleName();    } else {      return "collection of " + type.getComponent().getSimpleName();    }  } else   if (epType instanceof ClassEPType) {    ClassEPType type=(ClassEPType)epType;    return "class " + JavaClassHelper.getClassNameFullyQualPretty(type.getType());  } else   if (epType instanceof NullEPType) {    return "null type";  } else {    throw new IllegalArgumentException("Unrecognized type " + epType);  }}  }
class C{  public void removeLayoutComponent(Component component){  for (int counter=0; counter < 3; counter++) {    if (components[counter] == component) {      components[counter]=null;      sizes[counter]=0;      doReset=true;    }  }}  }
class C{  public static int calcSoftWrapUnawareOffset(@NotNull Editor editor,@NotNull CharSequence text,int start,int end,int columnNumber,int tabSize,int x,@NotNull int[] currentColumn,@Nullable StringBuilder debugBuffer){  if (debugBuffer != null) {    debugBuffer.append(String.format("Starting calcSoftWrapUnawareOffset(). Target range: [%d; %d), target column number to map: %d, tab size: %d, " + "x: %d, current column: %d%n",start,end,columnNumber,tabSize,x,currentColumn[0]));  }  boolean useOptimization=true;  boolean hasTabs;  if (editor instanceof EditorImpl && !((EditorImpl)editor).hasTabs()) {    hasTabs=false;    useOptimization=true;  } else {    hasTabs=false;    int scanEndOffset=Math.min(end,start + columnNumber - currentColumn[0] + 1);    boolean hasNonTabs=false;    for (int i=start; i < scanEndOffset; i++) {      char c=text.charAt(i);      if (debugBuffer != null) {        debugBuffer.append(String.format("Found symbol '%c' at the offset %d%n",c,i));      }      if (c == '\t') {        hasTabs=true;        if (hasNonTabs) {          useOptimization=false;          break;        }      } else {        hasNonTabs=true;      }    }  }  if (debugBuffer != null) {    debugBuffer.append(String.format("Has tabs: %b, use optimisation: %b%n",hasTabs,useOptimization));  }  if (useOptimization) {    if (!hasTabs) {      int result=start + columnNumber - currentColumn[0];      if (result < end) {        return result;      } else {        currentColumn[0]+=end - start;        if (debugBuffer != null) {          debugBuffer.append(String.format("Incrementing 'current column' by %d (new value is %d)%n",end - start,currentColumn[0]));        }        return -1;      }    }    int shift=0;    int offset=start;    int prevX=x;    if (debugBuffer != null) {      debugBuffer.append("Processing a string that contains only tabs\n");    }    for (; offset < end && offset + shift + currentColumn[0] < start + columnNumber; offset++) {      final char c=text.charAt(offset);      if (c == '\t') {        int nextX=nextTabStop(prevX,editor,tabSize);        final int columnsShift=columnsNumber(nextX - prevX,getSpaceWidth(Font.PLAIN,editor)) - 1;        if (debugBuffer != null) {          debugBuffer.append(String.format("Processing tabulation symbol at the offset %d. Current X: %d, new X: %d, current columns shift: %d, new column shift: %d%n",offset,prevX,nextX,shift,shift + columnsShift));        }        shift+=columnsShift;        prevX=nextX;      }    }    int diff=start + columnNumber - offset - shift - currentColumn[0];    if (debugBuffer != null)     debugBuffer.append(String.format("Resulting diff: %d%n",diff));    if (diff < 0) {      return offset - 1;    } else     if (diff == 0) {      return offset;    } else {      final int inc=offset - start + shift;      if (debugBuffer != null) {        debugBuffer.append(String.format("Incrementing 'current column' by %d (new value is %d)%n",inc,currentColumn[0] + inc));      }      currentColumn[0]+=inc;      return -1;    }  }  EditorEx editorImpl=(EditorEx)editor;  int offset=start;  IterationState state=new IterationState(editorImpl,start,end,false);  int fontType=state.getMergedAttributes().getFontType();  int column=currentColumn[0];  int plainSpaceSize=getSpaceWidth(Font.PLAIN,editorImpl);  for (; column < columnNumber && offset < end; offset++) {    if (offset >= state.getEndOffset()) {      state.advance();      fontType=state.getMergedAttributes().getFontType();    }    char c=text.charAt(offset);    if (c == '\t') {      final int newX=nextTabStop(x,editorImpl);      final int columns=columnsNumber(newX - x,plainSpaceSize);      if (debugBuffer != null) {        debugBuffer.append(String.format("Processing tabulation at the offset %d. Current X: %d, new X: %d, current column: %d, new column: %d%n",offset,x,newX,column,column + columns));      }      x=newX;      column+=columns;    } else {      final int width=charWidth(c,fontType,editorImpl);      if (debugBuffer != null) {        debugBuffer.append(String.format("Processing symbol '%c' at the offset %d. Current X: %d, new X: %d%n",c,offset,x,x + width));      }      x+=width;      column++;    }  }  if (column == columnNumber) {    return offset;  }  if (column > columnNumber && offset > 0 && text.charAt(offset - 1) == '\t') {    return offset - 1;  }  currentColumn[0]=column;  return -1;}  }
class C{  public void addArgument(String key,byte[] value){  key=key.intern();  if (post) {    addArg(Util.encodeBody(key),Util.encodeBody(value));  } else {    addArg(Util.encodeUrl(key),Util.encodeUrl(value));  }}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>(0);  newVector.addElement("Show results");  return newVector.elements();}  }
class C{  public DateMidnight toDateMidnight(DateTimeZone zone){  Chronology chrono=getChronology().withZone(zone);  return new DateMidnight(getYear(),getMonthOfYear(),getDayOfMonth(),chrono);}  }
class C{  public int correctOracleCharSize(String sourceType,int sizeReported,int sizeDevisor){  int i=sizeReported;  String columnType=sourceType.toUpperCase();  if (sizeDevisor > 1 && columnType.contains("CHAR")) {    if (columnType.startsWith("NCHAR")) {      i=sizeReported / sizeDevisor;      if (sizeReported >= 2000)       i=sizeReported / 2;    } else     if (columnType.startsWith("NVARCHAR")) {      i=sizeReported / sizeDevisor;      if (sizeReported >= 4000)       i=sizeReported / 2;    }  }  return i;}  }
class C{  public DefaultHttpRoutePlanner(SchemeRegistry schreg){  if (schreg == null) {    throw new IllegalArgumentException("SchemeRegistry must not be null.");  }  schemeRegistry=schreg;}  }
class C{  private Screen parseScreen(String id,String device,Document screenView,long lastModified) throws IOException, ScreenConfigException {  Screen screen=null;  String screenModule=getScreenModule(screenView);  if (screenModule != null) {    View rootView=viewFactory.getView(id,device,screenView,lastModified,true);    screen=new Screen(id,screenModule,rootView);  } else {    throw new ScreenConfigException("No module declared on screen [" + id + "].crux.xml.");  }  return screen;}  }
class C{  public void removeAll(@NonNull Jedis jedis,@NonNull String serverId) throws ProcessingException {  try {    jedis.zrem(RedisKeys.SERVER_REPO.toString(),serverId);    jedis.publish(RedisKeys.IDENTIFY.toString(),"SERVER\000" + serverId + "\000REMOVED");  } catch (  Exception ex) {    throw new ProcessingException("There was an error removing server \"" + serverId + "\"!",ex);  }}  }
class C{  private CIconInitializer(){}  }
class C{  public File newFolder(String... folderNames) throws IOException {  File file=getRoot();  for (int i=0; i < folderNames.length; i++) {    String folderName=folderNames[i];    validateFolderName(folderName);    file=new File(file,folderName);    if (!file.mkdir() && isLastElementInArray(i,folderNames)) {      throw new IOException("a folder with the name \'" + folderName + "\' already exists");    }  }  return file;}  }
class C{  public static void isAccessinfo(String member,String value,boolean flag) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_ACCESSINFO,flag);}  }
class C{  public ElementRule(Class type){  this(type,null,null,1,1);}  }
class C{  @Override protected void processException(ReplyException ex){  logger.debug("FetchPartitionDetailsResponse ignoring exception {}",ex.getMessage(),ex);}  }
class C{  public Response priorResponse(){  return priorResponse;}  }
class C{  public static Interval toInterval(ReadableInstant start,ReadableInstant stop){  return new Interval(start == null ? MIN_DATETIME : start,stop == null ? MAX_DATETIME : stop);}  }
class C{  public MeterInterval(String label,Range range){  this(label,range,Color.yellow,new BasicStroke(2.0f),null);}  }
class C{  public boolean isTickMarkRingVisible(){  return null == tickMarkRingVisible ? _tickMarkRingVisible : tickMarkRingVisible.get();}  }
class C{  public ExceptionDetailsDialog(final Shell parentShell,final String title,final Image image,final String message,final Object details){  this(new SameShellProvider(parentShell),title,image,message,details);}  }
class C{  public boolean intersects(Polygon2D polygon){  for (  Point2D p : polygon.points)   if (contains(p))   return true;  for (  Point2D p : points)   if (polygon.contains(p))   return true;  return false;}  }
class C{  protected void doPrintHeader(){  append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");  append("\n");  append(DTD + "\n\n");  append("<" + TAG_PREDICTIONS + " "+ ATT_VERSION+ "=\""+ Version.VERSION+ "\""+ " "+ ATT_NAME+ "=\""+ sanitize(m_Header.relationName())+ "\">\n");}  }
class C{  public static NamedList readFromResourceLoader(SolrResourceLoader loader,String name){  InputStreamReader reader;  try {    reader=new InputStreamReader(loader.openResource(name),StandardCharsets.UTF_8);  } catch (  SolrResourceNotFoundException ex) {    log.debug("Did not find ConfigSet properties, assuming default properties: " + ex.getMessage());    return null;  }catch (  Exception ex) {    throw new SolrException(ErrorCode.SERVER_ERROR,"Unable to load reader for ConfigSet properties: " + name,ex);  }  try {    return readFromInputStream(reader);  }  finally {    IOUtils.closeQuietly(reader);  }}  }
class C{  public void moveStationToBody(ISpaceObject station,int dimId,boolean update){  if (spaceStationOrbitMap.get(station.getOrbitingPlanetId()) != null) {    spaceStationOrbitMap.get(station.getOrbitingPlanetId()).remove(station);  }  if (spaceStationOrbitMap.get(dimId) == null)   spaceStationOrbitMap.put(dimId,new LinkedList<ISpaceObject>());  if (!spaceStationOrbitMap.get(dimId).contains(station))   spaceStationOrbitMap.get(dimId).add(station);  station.setOrbitingBody(dimId);  if (update) {    PacketHandler.sendToAll(new PacketStationUpdate(station,PacketStationUpdate.Type.ORBIT_UPDATE));    AdvancedRocketry.proxy.fireFogBurst(station);  }}  }
class C{  public static int compileShader(final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compileStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compileStatus,0);    if (compileStatus[0] == 0) {      Log.e(TAG,"Error compiling shader: " + GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  public void testDynIntSort() throws Exception {  checkSortMissingDefault("dyn_intdv","-1","4");}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.acos(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Long decode(ByteBuffer buffer){  byte b=buffer.get();  long result=b & 0x7F;  if ((b & 0x80) != 0) {    b=buffer.get();    result|=(b & 0x7F) << 7;    if ((b & 0x80) != 0) {      b=buffer.get();      result|=(b & 0x7F) << 14;      if ((b & 0x80) != 0) {        b=buffer.get();        result|=(b & 0x7F) << 21;        if ((b & 0x80) != 0) {          b=buffer.get();          result|=(long)(b & 0x7F) << 28;          if ((b & 0x80) != 0) {            b=buffer.get();            result|=(long)(b & 0x7F) << 35;            if ((b & 0x80) != 0) {              b=buffer.get();              result|=(long)(b & 0x7F) << 42;              if ((b & 0x80) != 0) {                b=buffer.get();                result|=(long)(b & 0x7F) << 49;                if ((b & 0x80) != 0) {                  b=buffer.get();                  result|=(long)b << 56;                }              }            }          }        }      }    }  }  return Long.valueOf(result);}  }
class C{  @SuppressWarnings({"unused"}) public void compileProjects(List<File> projectLocations,List<File> projectLocationsToCompile,List<File> singleSourcesToCompile,IssueAcceptor issueAcceptor) throws N4JSCompileException {  if (createDebugOutput) {    println("### compileProjects(List,List,List) ");    println("  # projectRoots = " + Joiner.on(", ").join(projectLocations));    println("  # projects     = " + Joiner.on(", ").join(projectLocationsToCompile));    println("  # sources      = " + Joiner.on(", ").join(singleSourcesToCompile));  }  List<File> absProjectRoots=HeadlessHelper.toAbsoluteFileList(projectLocations);  List<File> absProjectLocationsToCompile=HeadlessHelper.toAbsoluteFileList(projectLocationsToCompile);  List<File> absSingleSourcesToCompile=HeadlessHelper.toAbsoluteFileList(singleSourcesToCompile);  absProjectLocationsToCompile=combine(absProjectLocationsToCompile,findProjectsForSingleFiles(absSingleSourcesToCompile));  Set<URI> compileFilter=Sets.newLinkedHashSet(absSingleSourcesToCompile.stream().map(null).collect(Collectors.toList()));  ArrayList<File> pDirCollected=HeadlessHelper.collectAllProjectPaths(absProjectRoots);  LinkedHashSet<File> pDir=new LinkedHashSet<>();  pDir.addAll(absProjectLocationsToCompile);  pDir.addAll(pDirCollected);  ArrayList<URI> projectURIs=new ArrayList<>(pDir.size());  ArrayList<URI> projectsToCompileURIs=new ArrayList<>(absProjectLocationsToCompile.size());  for (  File pdir : pDir) {    URI puri=URI.createFileURI(pdir.toString());    projectURIs.add(puri);    if (absProjectLocationsToCompile.contains(pdir))     projectsToCompileURIs.add(puri);    try {      fbWorkspace.registerProject(puri);    } catch (    N4JSBrokenProjectException e) {      throw new N4JSCompileException("Unable to register project '" + puri + "'",e);    }  }  ArrayList<N4JSProject> projects=new ArrayList<>(projectURIs.size());  ArrayList<N4JSProject> projectsToCompile=new ArrayList<>(projectsToCompileURIs.size());  for (  URI projectUri : projectURIs) {    N4JSProject p=n4jsModel.getN4JSProject(projectUri);    projects.add(p);    if (projectsToCompileURIs.contains(projectUri)) {      projectsToCompile.add(p);    }  }  List<String> containers=new ArrayList<>();  BiMap<String,N4JSProject> container2project=HashBiMap.create();  Multimap<String,URI> container2Uris=HashMultimap.create();  for (  N4JSProject p : projects) {    String container=FileBasedWorkspace.N4FBPRJ + p.getLocation();    container2project.put(container,p);    containers.add(container);    for (    IN4JSSourceContainer s : p.getSourceContainers()) {      Iterables.addAll(container2Uris.get(container),s);    }  }  rsbAcs.configure(containers,container2Uris);  XtextResourceSet resourceSet=xtextResourceSetProvider.get();  resourceSet.setClasspathURIContext(classLoader);  resourceSet.eAdapters().add(new DelegatingIAllContainerAdapter(rsbAcs));  List<MarkedProject> sortedProjects=topoSort2(new ArrayList<>(projects),new ArrayList<>(projectsToCompile));  dumpBuildorder(sortedProjects);  N4JSCompoundCompileException collectedErrors=null;  N4ProgressStateRecorder rec=new N4ProgressStateRecorder();  LinkedList<MarkedProject> loadedProjects=new LinkedList<>();  for (  MarkedProject mp : sortedProjects) {    if (mp.hasMarkers()) {      rec.markProcessing(mp.project);      configureFSA(mp.project);      try {        doLoad(mp,resourceSet,rec,issueAcceptor);        loadedProjects.add(mp);        if (mp.hasMarker(mp.project) && !mp.project.isExternal()) {          doCompile(mp,resourceSet,compileFilter,rec);        }        ListIterator<MarkedProject> loadedIter=loadedProjects.listIterator();        while (loadedIter.hasNext()) {          MarkedProject loaded=loadedIter.next();          loaded.remove(mp.project);          if (true) {            if (!loaded.hasMarkers()) {              doUnload(loaded,rec);              loadedIter.remove();            }          } else {            doUnload(loaded,rec);            loadedIter.remove();          }        }      } catch (      N4JSCompileErrorException e) {        rec.compileException(e);        if (keepOnCompiling) {          if (collectedErrors == null)           collectedErrors=new N4JSCompoundCompileException("Errors during compiling.",e); else {            collectedErrors.add(e);          }        } else {          throw e;        }      } finally {        resetFSA();      }      rec.markEndProcessing(mp.project);    }  }  rec.dumpToLogfile(logFile);  if (collectedErrors != null) {    throw collectedErrors;  }}  }
class C{  public void calculateGrpPenalty(Property modProperty,Date propCompletionDate){  currentInstall=propertyTaxCommonUtils.getCurrentInstallment();  Module module=moduleDao.getModuleByName(PropertyTaxConstants.PTMODULENAME);  EgDemand currentDemand=null;  for (  EgDemand egDemand : modProperty.getPtDemandSet()) {    if (egDemand.getEgInstallmentMaster().equals(currentInstall)) {      currentDemand=egDemand;      break;    }  }  Map<Installment,BigDecimal> installmentWiseDemand=getInstallmentWiseDemand(currentDemand);  Map<Installment,EgDemandDetails> installmentWisePenaltyDemandDetail=penaltyCalculationService.getInstallmentWisePenaltyDemandDetails(null,currentDemand);  List<EgDemandDetails> penaltyList=new ArrayList<>();  DateTime nagarPanchayatPenDate=DateTime.now().withDate(2016,1,1);  final Installment nagarPanchayatPenEndInstallment=installmentDao.getInsatllmentByModuleForGivenDate(module,nagarPanchayatPenDate.toDate());  BigDecimal tax=BigDecimal.ZERO;  Installment installment=null;  BigDecimal excessPenalty=BigDecimal.ZERO;  for (  final Map.Entry<Installment,BigDecimal> mapEntry : installmentWiseDemand.entrySet()) {    installment=mapEntry.getKey();    if (installment.getToDate().compareTo(propCompletionDate) >= 0) {      tax=mapEntry.getValue();      EgDemandDetails existingPenaltyDemandDetail=installmentWisePenaltyDemandDetail.get(installment);      Date penaltyEffectiveDate=null;      if (propertyTaxUtil.checkIsNagarPanchayat() && installment.compareTo(nagarPanchayatPenEndInstallment) <= 0) {        penaltyEffectiveDate=nagarPanchayatPenDate.toDate();      } else {        penaltyEffectiveDate=getPenaltyEffectiveDate(installment);      }      if (penaltyEffectiveDate.before(new Date())) {        BigDecimal penaltyAmount=calculatePenalty(null,penaltyEffectiveDate,tax);        if (existingPenaltyDemandDetail == null) {          EgDemandDetails penaltyDemandDetails=ptBillServiceImpl.insertDemandDetails(DEMANDRSN_CODE_PENALTY_FINES,penaltyAmount,installment);          penaltyList.add(penaltyDemandDetails);        } else {          if (existingPenaltyDemandDetail.getAmtCollected().compareTo(penaltyAmount) > 0) {            excessPenalty=existingPenaltyDemandDetail.getAmtCollected().subtract(penaltyAmount);            existingPenaltyDemandDetail.setAmtCollected(penaltyAmount);          }          existingPenaltyDemandDetail.setAmount(penaltyAmount);        }      }    }  }  currentDemand.getEgDemandDetails().addAll(penaltyList);  List<Installment> installments=new ArrayList<Installment>(installmentWiseDemand.keySet());  Collections.sort(installments);  if (excessPenalty.compareTo(BigDecimal.ZERO) > 0) {    adjustExcessPenalty(currentDemand,installments,excessPenalty);  }}  }
class C{  private void processWaitEvents(boolean finalize){  Iterator<Map.Entry<JoinEvent<K,T>,Future<List>>> waitIterator=waitingEvents.entrySet().iterator();  while (waitIterator.hasNext()) {    Map.Entry<JoinEvent<K,T>,Future<List>> waitingEvent=waitIterator.next();    Future<List> future=waitingEvent.getValue();    if (future.isDone() || finalize) {      try {        JoinEvent<K,T> event=waitingEvent.getKey();        joinStream(event.value,event.isStream1Data,future.get());      } catch (      InterruptedException|ExecutionException e) {        throw new RuntimeException("end window",e);      }      waitIterator.remove();      if (!finalize) {        break;      }    }  }}  }
class C{  private void fillParameter(MPInstance pInstance,Trx trx){  getPO(trx);  MWFNodePara[] nParams=m_node.getParameters();  MPInstancePara[] iParams=pInstance.getParameters();  for (int pi=0; pi < iParams.length; pi++) {    MPInstancePara iPara=iParams[pi];    for (int np=0; np < nParams.length; np++) {      MWFNodePara nPara=nParams[np];      if (iPara.getParameterName().equals(nPara.getAttributeName())) {        String variableName=nPara.getAttributeValue();        log.fine(nPara.getAttributeName() + " = " + variableName);        Object value=variableName;        if (variableName == null || (variableName != null && variableName.length() == 0))         value=null; else         if (variableName.indexOf('@') != -1 && m_po != null) {          int index=variableName.indexOf('@');          String columnName=variableName.substring(index + 1);          index=columnName.indexOf('@');          if (index == -1) {            log.warning(nPara.getAttributeName() + " - cannot evaluate=" + variableName);            break;          }          columnName=columnName.substring(0,index);          index=m_po.get_ColumnIndex(columnName);          if (index != -1) {            value=m_po.get_Value(index);          } else {            String env=Env.getContext(getCtx(),columnName);            if (env.length() == 0) {              log.warning(nPara.getAttributeName() + " - not column nor environment =" + columnName+ "("+ variableName+ ")");              break;            } else             value=env;          }        }        if (value == null) {          if (nPara.isMandatory())           log.warning(nPara.getAttributeName() + " - empty - mandatory!"); else           log.fine(nPara.getAttributeName() + " - empty");          break;        }        try {          if (DisplayType.isNumeric(nPara.getDisplayType()) || DisplayType.isID(nPara.getDisplayType())) {            BigDecimal bd=null;            if (value instanceof BigDecimal)             bd=(BigDecimal)value; else             if (value instanceof Integer)             bd=new BigDecimal(((Integer)value).intValue()); else             bd=new BigDecimal(value.toString());            iPara.setP_Number(bd);            log.fine(nPara.getAttributeName() + " = " + variableName+ " (="+ bd+ "=)");          } else           if (DisplayType.isDate(nPara.getDisplayType())) {            Timestamp ts=null;            if (value instanceof Timestamp)             ts=(Timestamp)value; else             ts=Timestamp.valueOf(value.toString());            iPara.setP_Date(ts);            log.fine(nPara.getAttributeName() + " = " + variableName+ " (="+ ts+ "=)");          } else {            iPara.setP_String(value.toString());            log.fine(nPara.getAttributeName() + " = " + variableName+ " (="+ value+ "=) "+ value.getClass().getName());          }          if (!iPara.save())           log.warning("Not Saved - " + nPara.getAttributeName());        } catch (        Exception e) {          log.warning(nPara.getAttributeName() + " = " + variableName+ " ("+ value+ ") "+ value.getClass().getName()+ " - "+ e.getLocalizedMessage());        }        break;      }    }  }}  }
class C{  public boolean removePhase(Class<? extends BasePhase<? super C>> phaseClass){  ListIterator<BasePhase<? super C>> it=phases.listIterator();  while (it.hasNext()) {    BasePhase<? super C> phase=it.next();    if (phaseClass.isInstance(phase)) {      it.remove();      return true;    } else     if (phase instanceof PhaseSuite) {      @SuppressWarnings("unchecked") PhaseSuite<C> innerSuite=(PhaseSuite<C>)phase;      if (innerSuite.removePhase(phaseClass)) {        if (innerSuite.phases.isEmpty()) {          it.remove();        }        return true;      }    }  }  return false;}  }
class C{  public boolean isAllSolutions(){  return allSolutions;}  }
class C{  public static String outTypeName(int type){  String s="OutUnknown(" + type + ")";switch (type) {case OutZoomIn:    s="OutZoomIn";  break;case OutZoomOut:s="OutZoomOut";break;case OutZoom100:s="OutZoom100";break;case OutHome:s="OutHome";break;case OutSetQuality:s="OutSetQuality";break;case OutPlay:s="OutPlay";break;case OutLoop:s="OutLoop";break;case OutRewind:s="OutRewind";break;case OutForward:s="OutForward";break;case OutBack:s="OutBack";break;case OutPrint:s="OutPrint";break;case OutSetVariable:s="OutSetVariable";break;case OutSetProperty:s="OutSetProperty";break;case OutExit:s="OutExit";break;case OutSetFocus:s="OutSetFocus";break;case OutContinue:s="OutContinue";break;case OutStopDebug:s="OutStopDebug";break;case OutSetBreakpoints:s="OutSetBreakpoints";break;case OutRemoveBreakpoints:s="OutRemoveBreakpoints";break;case OutRemoveAllBreakpoints:s="OutRemoveAllBreakpoints";break;case OutStepOver:s="OutStepOver";break;case OutStepInto:s="OutStepInto";break;case OutStepOut:s="OutStepOut";break;case OutProcessedTag:s="OutProcessedTag";break;case OutSetSquelch:s="OutSetSquelch";break;case OutGetVariable:s="OutGetVariable";break;case OutGetFrame:s="OutGetFrame";break;case OutGetOption:s="OutGetOption";break;case OutSetOption:s="OutSetOption";break;case OutAddWatch:s="OutAddWatch";break;case OutRemoveWatch:s="OutRemoveWatch";break;case OutStepContinue:s="OutStepContinue";break;case OutGetSwf:s="OutGetSwf";break;case OutGetSwd:s="OutGetSwd";break;case OutGetVariableWhichInvokesGetter:s="OutGetVariableWhichInvokesGetter";break;case OutGetBreakReason:s="OutGetBreakReason";break;case OutGetActions:s="OutGetActions";break;case OutSetActions:s="OutSetActions";break;case OutSwfInfo:s="OutSwfInfo";break;case OutConstantPool:s="OutConstantPool";break;case OutGetFncNames:s="OutGetFncNames";break;case OutCallFunction:s="OutCallFunction";break;case OutAddWatch2:s="OutAddWatch2";break;case OutRemoveWatch2:s="OutRemoveWatch2";break;case OutPassAllExceptionsToDebugger:s="OutPassAllExceptionsToDebugger";break;case OutBinaryOp:s="OutBinaryOp";break;case OutIsolateEnumerate:s="OutIsolateEnumerate";break;case OutSetActiveIsolate:s="OutSetActiveIsolate";break;case OutSetExceptionBreakpoint:s="OutSetExceptionBreakpoint";break;case OutRemoveExceptionBreakpoint:s="OutRemoveExceptionBreakpoint";break;}return s;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.PROPERTY_METHOD_DECLARATION__BODY:    setBody((Block)newValue);  return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__LOK:set_lok((LocalArgumentsVariable)newValue);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_TYPE:setDefinedType((Type)newValue);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__FPARS:getFpars().clear();getFpars().addAll((Collection<? extends FormalParameter>)newValue);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__RETURN_TYPE_REF:setReturnTypeRef((TypeRef)newValue);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__GENERATOR:setGenerator((Boolean)newValue);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_ASYNC:setDeclaredAsync((Boolean)newValue);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__TYPE_VARS:getTypeVars().clear();getTypeVars().addAll((Collection<? extends TypeVariable>)newValue);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DECLARED_TYPE_REF:setDeclaredTypeRef((TypeRef)newValue);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)newValue);return;case N4JSPackage.PROPERTY_METHOD_DECLARATION__DEFINED_METHOD:setDefinedMethod((TStructMethod)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private Throwable readError(ByteBuf buffer){  return context.serializer().readObject(INPUT.get().setByteBuf(buffer));}  }
class C{  public String name(){  String name=null;  try {    Cache local=(Cache)getCache();    if (local != null) {      name=local.name;    }    if (name == null) {      name=JDWP.ThreadReference.Name.process(vm,this).threadName;      if (local != null) {        local.name=name;      }    }  } catch (  JDWPException exc) {    throw exc.toJDIException();  }  return name;}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private void convert(){  scheduleFactory=schedule.getFactory();  log.info("Converting to MATSim transit schedule");  int counterLines=0;  int counterRoutes=0;  for (  Entry<String,GTFSStop> stopEntry : gtfsStops.entrySet()) {    Coord result=transformation.transform(stopEntry.getValue().getPoint());    TransitStopFacility stopFacility=scheduleFactory.createTransitStopFacility(Id.create(stopEntry.getKey(),TransitStopFacility.class),result,stopEntry.getValue().isBlocks());    stopFacility.setName(stopEntry.getValue().getName());    schedule.addStopFacility(stopFacility);  }  if (usesFrequencies) {    log.info("    Using frequencies.txt to generate departures");  } else {    log.info("    Using stop_times.txt to generate departures");  }  DepartureIds departureIds=new DepartureIds();  for (  GTFSRoute gtfsRoute : gtfsRoutes.values()) {    TransitLine transitLine=scheduleFactory.createTransitLine(Id.create(gtfsRoute.getShortName() + "_" + gtfsRoute.getRouteId(),TransitLine.class));    schedule.addTransitLine(transitLine);    counterLines++;    for (    Trip trip : gtfsRoute.getTrips().values()) {      boolean isService=false;      for (      String serviceId : serviceIds) {        if (trip.getService().equals(services.get(serviceId))) {          isService=true;        }      }      if (isService) {        List<TransitRouteStop> transitRouteStops=new ArrayList<>();        Date startTime=trip.getStopTimes().get(trip.getStopTimes().firstKey()).getArrivalTime();        for (        StopTime stopTime : trip.getStopTimes().values()) {          double arrival=Time.UNDEFINED_TIME, departure=Time.UNDEFINED_TIME;          if (!stopTime.getSeuencePosition().equals(trip.getStopTimes().firstKey())) {            long difference=stopTime.getArrivalTime().getTime() - startTime.getTime();            try {              arrival=Time.parseTime(timeFormat.format(new Date(timeFormat.parse("00:00:00").getTime() + difference)));            } catch (            ParseException e) {              e.printStackTrace();            }          }          if (!stopTime.getSeuencePosition().equals(trip.getStopTimes().lastKey())) {            long difference=stopTime.getDepartureTime().getTime() - startTime.getTime();            try {              departure=Time.parseTime(timeFormat.format(new Date(timeFormat.parse("00:00:00").getTime() + difference)));            } catch (            ParseException e) {              e.printStackTrace();            }          }          TransitRouteStop newTRS=scheduleFactory.createTransitRouteStop(schedule.getFacilities().get(Id.create(stopTime.getStopId(),TransitStopFacility.class)),arrival,departure);          newTRS.setAwaitDepartureTime(defaultAwaitDepartureTime);          transitRouteStops.add(newTRS);        }        if (usesFrequencies) {          TransitRoute newTransitRoute=scheduleFactory.createTransitRoute(Id.create(trip.getId(),TransitRoute.class),null,transitRouteStops,gtfsRoute.getRouteType().name);          for (          Frequency frequency : trip.getFrequencies()) {            for (Date actualTime=(Date)frequency.getStartTime().clone(); actualTime.before(frequency.getEndTime()); actualTime.setTime(actualTime.getTime() + frequency.getSecondsPerDeparture() * 1000)) {              newTransitRoute.addDeparture(scheduleFactory.createDeparture(Id.create(departureIds.getNext(newTransitRoute.getId()),Departure.class),Time.parseTime(timeFormat.format(actualTime))));            }          }          transitLine.addRoute(newTransitRoute);          counterRoutes++;        } else {          boolean routeExistsInTransitLine=false;          for (          TransitRoute transitRoute : transitLine.getRoutes().values()) {            if (transitRoute.getStops().equals(transitRouteStops)) {              transitRoute.addDeparture(scheduleFactory.createDeparture(Id.create(departureIds.getNext(transitRoute.getId()),Departure.class),Time.parseTime(timeFormat.format(startTime))));              routeExistsInTransitLine=true;              break;            }          }          if (!routeExistsInTransitLine) {            TransitRoute newTransitRoute=scheduleFactory.createTransitRoute(Id.create(trip.getId(),TransitRoute.class),null,transitRouteStops,gtfsRoute.getRouteType().name);            newTransitRoute.addDeparture(scheduleFactory.createDeparture(Id.create(departureIds.getNext(newTransitRoute.getId()),Departure.class),Time.parseTime(timeFormat.format(startTime))));            transitLine.addRoute(newTransitRoute);            counterRoutes++;          }        }      }    }  }  vehicles=ScheduleTools.createVehicles(schedule);  log.info("    Created " + counterRoutes + " routes on "+ counterLines+ " lines.");  log.info("    Day " + dateUsed);  log.info("... GTFS converted to an unmapped MATSIM Transit Schedule");  log.info("#############################################################");}  }
class C{  public int[] sequenceLengths(int start,int end){  final int fileStart=mFileNoLookup.lookup(start);  final int startIndex=start - mFileNoLookup.startSeq(fileStart);  final int[] ret=new int[end - start];  int fileNo=fileStart;  int pointerIndex=startIndex;  for (int retIndex=0; retIndex < end - start; retIndex++) {    ret[retIndex]=-mPointers[fileNo][pointerIndex];    pointerIndex++;    while (fileNo < mPointers.length && pointerIndex == mPointers[fileNo].length - 1) {      ret[retIndex]+=mPointers[fileNo][pointerIndex];      fileNo++;      pointerIndex=0;    }    if (fileNo < mPointers.length && pointerIndex < mPointers[fileNo].length) {      ret[retIndex]+=mPointers[fileNo][pointerIndex];    }  }  return ret;}  }
class C{  void makeRunnable(ThreadQueue threads,boolean clear){  Trace.trace(Item.SCHEDULER,"making %d threads runnable from queue %s",threads.size(),threads.getName());  runQueue.addAll(threads);  assert runQueue.size() <= mutators.size() + collectors.size();  if (clear) {    threads.clear();  }}  }
class C{  public void addFirst(E e){  if (e == null)   throw new NullPointerException("e == null");  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  @Override protected ArrayList<String> genAttachFiles(){  _log.info("Start SendHeartbeatEvent::genAttachFiles");  ArrayList<String> fileList=new ArrayList<String>();  try {    fileList.add(generateConfigFile());  } catch (  Exception e) {    _log.error("Error occurred while creating config file. {}",e);  }  _log.info("End SendHeartbeatEvent::genAttachFiles");  return fileList;}  }
class C{  public Try<PutObjectResult,Throwable> put(String key,String value){  return Try.withCatch(null);}  }
class C{  void fireInitHandlers(RegisteredProject project) throws ForbiddenException, ConflictException, NotFoundException, ServerException {  fireInit(project,project.getType());  for (  String mixin : project.getMixins()) {    fireInit(project,mixin);  }}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void show(FragmentManager manager,String tag){  mDismissed=false;  mShownByMe=true;  FragmentTransaction ft=manager.beginTransaction();  ft.add(this,tag);  ft.commit();}  }
class C{  public DoubleMTreeDistanceSearchCandidate(final double mindist,final int nodeID,final DBID routingObjectID,double routingDistance){  super(mindist,nodeID);  this.routingObjectID=routingObjectID;  this.routingDistance=routingDistance;}  }
class C{  public T caseLocalReaction(LocalReaction object){  return null;}  }
class C{  @Override public long transferFrom(ReadableByteChannel src,long count) throws IOException {  throw new NonWritableChannelException();}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static final int compare(final ArrowBuf left,int lStart,int lEnd,final ArrowBuf right,int rStart,int rEnd){  if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {    left.checkBytes(lStart,lEnd);    right.checkBytes(rStart,rEnd);  }  return memcmp(left.memoryAddress(),lStart,lEnd,right.memoryAddress(),rStart,rEnd);}  }
class C{  public BalloonTreeLayout(String group,int minRadius){  super(group);  m_minRadius=minRadius;}  }
class C{  public Farm(){  super();}  }
class C{  public boolean isDelayed(){  return (originalDate != null);}  }
class C{  @Transactional public RevisionPetition updateRevisionPetition(RevisionPetition objection){  if (objection.getId() == null)   objection=persist(objection); else   objection=update(objection);  return objection;}  }
class C{  protected void onPostExecute(Uri imagePath){  UiUtils.setActivityResult(DownloadImageActivity.this,imagePath,"download failed");  DownloadImageActivity.this.finish();}  }
class C{  public static PGPPublicKeyRing signPublicKey(PGPPublicKeyRing publicKeyRing,String id,PGPSecretKey secretKey,String secretKeyPassword) throws PGPException {  try {    PGPPublicKey oldKey=publicKeyRing.getPublicKey();    PGPPrivateKey pgpPrivKey=secretKey.extractPrivateKey(new JcePBESecretKeyDecryptorBuilder().setProvider(provider).build(secretKeyPassword.toCharArray()));    PGPSignatureGenerator signatureGenerator=new PGPSignatureGenerator(new JcaPGPContentSignerBuilder(secretKey.getPublicKey().getAlgorithm(),PGPUtil.SHA1));    signatureGenerator.init(PGPSignature.DEFAULT_CERTIFICATION,pgpPrivKey);    PGPSignature signature=signatureGenerator.generateCertification(id,oldKey);    PGPPublicKey newKey=PGPPublicKey.addCertification(oldKey,signature);    PGPPublicKeyRing newPublicKeyRing=PGPPublicKeyRing.removePublicKey(publicKeyRing,oldKey);    return PGPPublicKeyRing.insertPublicKey(newPublicKeyRing,newKey);  } catch (  Exception e) {    throw new PGPException("Error signing public key",e);  }}  }
class C{  public static RtcCandidate fromSdpAttribute(String candidateAttribute){  Matcher matcher=sSdpCandidateAttributePattern.matcher(candidateAttribute);  if (!matcher.matches()) {    return null;  }  String foundation=matcher.group(PATTERN_GROUP_ATTRIBUTE_FOUNDATION);  int componentId=Integer.parseInt(matcher.group(PATTERN_GROUP_ATTRIBUTE_COMPONENT),10);  RtcCandidate.ComponentType componentType;  String transport=matcher.group(PATTERN_GROUP_ATTRIBUTE_TRANSPORT);  int priority=Integer.parseInt(matcher.group(PATTERN_GROUP_ATTRIBUTE_PRIORITY),10);  String address=matcher.group(PATTERN_GROUP_ATTRIBUTE_ADDRESS);  int port=Integer.parseInt(matcher.group(PATTERN_GROUP_ATTRIBUTE_PORT),10);  String type=matcher.group(PATTERN_GROUP_ATTRIBUTE_TYPE);  RtcCandidate.CandidateType candidateType;  String relatedAddress=matcher.group(PATTERN_GROUP_ATTRIBUTE_RELATED_ADDRESS);  int relatedPort=-1;  if (relatedAddress != null) {    relatedPort=Integer.parseInt(matcher.group(PATTERN_GROUP_ATTRIBUTE_RELATED_PORT),10);  }  String tcpType=matcher.group(PATTERN_GROUP_ATTRIBUTE_TCP_TYPE);  RtcCandidate.TransportType transportType;  if (componentId == 1) {    componentType=RtcCandidate.ComponentType.RTP;  } else {    componentType=RtcCandidate.ComponentType.RTCP;  }switch (type.toLowerCase(Locale.ENGLISH)) {case "host":    candidateType=RtcCandidate.CandidateType.HOST;  break;case "srflx":candidateType=RtcCandidate.CandidateType.SERVER_REFLEXIVE;break;case "prflx":candidateType=RtcCandidate.CandidateType.PEER_REFLEXIVE;break;case "relay":candidateType=RtcCandidate.CandidateType.RELAY;break;default :return null;}if ("udp".equals(transport.toLowerCase(Locale.ENGLISH))) {transportType=RtcCandidate.TransportType.UDP;} else {if (tcpType != null) {switch (tcpType.toLowerCase(Locale.ENGLISH)) {case "active":transportType=RtcCandidate.TransportType.TCP_ACTIVE;break;case "passive":transportType=RtcCandidate.TransportType.TCP_PASSIVE;break;case "so":transportType=RtcCandidate.TransportType.TCP_SO;break;default :return null;}} else if (port == 0 || port == 9) {transportType=RtcCandidate.TransportType.TCP_ACTIVE;port=9;} else {return null;}}if (relatedAddress == null) {if (candidateType == RtcCandidate.CandidateType.HOST) {return new RtcCandidateImpl(foundation,componentType,transportType,priority,address,port,candidateType,null,-1);} else {return null;}} else {return new RtcCandidateImpl(foundation,componentType,transportType,priority,address,port,candidateType,relatedAddress,relatedPort);}}  }
class C{  public String sparseDataTipText(){  return "Encode data as sparse instances.";}  }
class C{  public static void init(final AsyncContext context){  final SecurityContext security=(SecurityContext)context.getAttribute(AsyncContext.SECURITY_CTX);  final boolean forceSetSecurity=forceSetSecurityContext(context);  if (forceSetSecurity) {    SecurityContextHolder.setContext(security);  }  ctx.set(context);}  }
class C{  private boolean isIPv6Address(String uriHeader){  int hostEnd=uriHeader.indexOf(Lexer.QUESTION);  int semiColonIndex=uriHeader.indexOf(Lexer.SEMICOLON);  if (hostEnd == -1 || (semiColonIndex != -1 && hostEnd > semiColonIndex))   hostEnd=semiColonIndex;  if (hostEnd == -1)   hostEnd=uriHeader.length();  String host=uriHeader.substring(0,hostEnd);  int firstColonIndex=host.indexOf(Lexer.COLON);  if (firstColonIndex == -1)   return false;  int secondColonIndex=host.indexOf(Lexer.COLON,firstColonIndex + 1);  if (secondColonIndex == -1)   return false;  return true;}  }
class C{  private void mergeAt(int i){  assert stackSize >= 2;  assert i >= 0;  assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  assert len1 > 0 && len2 > 0;  assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight(a[base2],a,base1,len1,0,c);  assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft(a[base1 + len1 - 1],a,base2,len2,len2 - 1,c);  assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public GaussianDensityLayerPlot(Plot p,int ax,double[] sigma){  super("Gauss quantile of " + p.name,p);  if (sigma != null)   Array.checkLength(sigma,p.getData().length);  this.sigma=sigma;  axis=ax;  if (sigma != null) {    gausspdf_sigma=new float[sigma.length][4];    for (int i=0; i < gausspdf_sigma.length; i++) {      for (int j=0; j < 4; j++)       gausspdf_sigma[i][j]=(float)(Math.exp(-(j * j) / (2.0 * sigma[i] * sigma[i])));    }  }}  }
class C{  public void addBackground(){  if (inputFileChooser == null) {    inputFileChooser=new JFileChooser(System.getProperty("user.dir") + java.io.File.separator + "resources"+ java.io.File.separator+ "icons");    jmri.util.FileChooserFilter filt=new jmri.util.FileChooserFilter("Graphics Files");    filt.addExtension("gif");    filt.addExtension("jpg");    inputFileChooser.setFileFilter(filt);  }  inputFileChooser.rescanCurrentDirectory();  int retVal=inputFileChooser.showOpenDialog(this);  if (retVal != JFileChooser.APPROVE_OPTION) {    return;  }  String name=inputFileChooser.getSelectedFile().getPath();  name=jmri.util.FileUtil.getPortableFilename(name);  backgroundImage.add(super.setUpBackground(name));}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("jrun4x",J2EEContainerCapability.class);}  }
class C{  private EncryptionMaterialsProvider createCustomProvider(ZeppelinConfiguration conf) throws IOException {  String empClassname=conf.getS3EncryptionMaterialsProviderClass();  EncryptionMaterialsProvider emp;  try {    Object empInstance=Class.forName(empClassname).newInstance();    if (empInstance instanceof EncryptionMaterialsProvider) {      emp=(EncryptionMaterialsProvider)empInstance;    } else {      throw new IOException("Class " + empClassname + " does not implement "+ EncryptionMaterialsProvider.class.getName());    }  } catch (  Exception e) {    throw new IOException("Unable to instantiate encryption materials provider class " + empClassname + ": "+ e,e);  }  return emp;}  }
class C{  private void sendNotification(JSONObject message){  Intent notificationIntent=new Intent(this,GPPActivity.class);  notificationIntent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);  notificationIntent.putExtra("extras",message.optString("extra").toString());  PendingIntent contentIntent=PendingIntent.getActivity(this,0,notificationIntent,PendingIntent.FLAG_UPDATE_CURRENT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(getApplicationInfo().icon).setContentTitle(message.optString("title")).setContentText(message.optString("text")).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(contentIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  public final boolean awaitTerminalEvent(){  try {    if (done.getCount() == 0)     return true;    int waitIterations=0;    while (done.getCount() > 0) {      if (waitIterations * 100 >= maxAwait) {        fail("awaiting terminal event timed out");        return false;      }      done.await(100,TimeUnit.MILLISECONDS);      waitIterations++;    }    return true;  } catch (  InterruptedException ex) {    Thread.currentThread().interrupt();    return false;  }}  }
class C{  private List<MethodConfig> collectMethodConfigs() throws IOException {  List<MethodConfig> methodConfigs=new ArrayList<>();  if (this.method != null) {    for (    String line : Files.readAllLines(this.method,StandardCharsets.UTF_8)) {      if (line.length() == 0 || line.startsWith("#")) {        continue;      }      methodConfigs.add(this.build(line));    }  }  if (methodOwner != null && methodName != null) {    if (this.parametersDescriptor != null) {      methodConfigs.add(this.build("L" + methodOwner.replace('.','/') + ";->"+ methodName+ "("+ this.parametersDescriptor+ ")Ljava/lang/String;"));    } else     if (this.parameterJTypes != null) {      String[] type_list=parameterJTypes.split(",|;|:");      StringBuilder sb=new StringBuilder();      for (int i=0; i < type_list.length; i++) {switch (type_list[i]) {case "boolean":          sb.append("Z");        break;case "byte":      sb.append("B");    break;case "short":  sb.append("S");break;case "char":sb.append("C");break;case "int":sb.append("I");break;case "long":sb.append("J");break;case "float":sb.append("F");break;case "double":sb.append("D");break;case "string":sb.append("Ljava/lang/String;");break;default :throw new RuntimeException("not support type " + type_list[i] + " on -t/--arg-types");}}methodConfigs.add(this.build("L" + methodOwner.replace('.','/') + ";->"+ methodName+ "("+ sb+ ")Ljava/lang/String;"));} else {methodConfigs.add(this.build("L" + methodOwner.replace('.','/') + ";->"+ methodName+ "(Ljava/lang/String;)Ljava/lang/String;"));}}return methodConfigs;}  }
class C{  @Override public boolean isRowAvailable(){  if (result == null) {    return (false);  } else   if ((index >= 0) && (index < rows.length)) {    return (true);  } else {    return (false);  }}  }
class C{  public final boolean contains(final AABB aabb){  return lowerBound.x <= aabb.lowerBound.x && lowerBound.y <= aabb.lowerBound.y && aabb.upperBound.x <= upperBound.x && aabb.upperBound.y <= upperBound.y;}  }
class C{  public void testSetF5(){  boolean f5=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF5(f5);  jmri.util.JUnitAppender.assertErrorMessage("sendFunctionGroup2 needs to be implemented if invoked");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_ITEM___TRACE_ENTITY_1:    return getTraceEntity_1();case UmplePackage.TRACE_ITEM___PRE_OR_POST_CONDITION_1:  return getPreOrPostCondition_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public RichText withBlink(){  this.formats.add(Format.BLINK);  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Builder clientId(String clientId){  this.clientId=clientId;  return this;}  }
class C{  public static GdsTypeRule supports(String... supportedTypes){  final Set<String> supportedTypesSet=new HashSet<>(Arrays.asList(supportedTypes));  return new GdsTypeRule(isIn(supportedTypesSet));}  }
class C{  private IStateVector<GraphNode,LatticeElement> convert(final com.google.security.zynamics.reil.algorithms.mono.IStateVector<GraphNode,LatticeElement> vector){  final DefaultStateVector<GraphNode,LatticeElement> convertedVector=new DefaultStateVector<GraphNode,LatticeElement>();  for (  final GraphNode node : graph.getNodes()) {    convertedVector.setState(node,vector.getState(node));  }  return convertedVector;}  }
class C{  protected int next() throws IOException, ExifInvalidFormatException {  if (!mContainExifData) {    return EVENT_END;  }  int offset=mTiffStream.getReadByteCount();  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  if (offset < endOfTags) {    mTag=readTag();    if (mTag == null) {      return next();    }    if (mNeedToParseOffsetsInCurrentIfd) {      checkOffsetOrImageTag(mTag);    }    return EVENT_NEW_TAG;  } else   if (offset == endOfTags) {    if (mIfdType == IfdId.TYPE_IFD_0) {      long ifdOffset=readUnsignedLong();      if (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested()) {        if (ifdOffset != 0) {          registerIfd(IfdId.TYPE_IFD_1,ifdOffset);        }      }    } else {      int offsetSize=4;      if (mCorrespondingEvent.size() > 0) {        offsetSize=mCorrespondingEvent.firstEntry().getKey() - mTiffStream.getReadByteCount();      }      if (offsetSize < 4) {        Log.w(TAG,"Invalid size of link to next IFD: " + offsetSize);      } else {        long ifdOffset=readUnsignedLong();        if (ifdOffset != 0) {          Log.w(TAG,"Invalid link to next IFD: " + ifdOffset);        }      }    }  }  while (mCorrespondingEvent.size() != 0) {    Entry<Integer,Object> entry=mCorrespondingEvent.pollFirstEntry();    Object event=entry.getValue();    try {      skipTo(entry.getKey());    } catch (    IOException e) {      Log.w(TAG,"Failed to skip to data at: " + entry.getKey() + " for "+ event.getClass().getName()+ ", the file may be broken.");      continue;    }    if (event instanceof IfdEvent) {      mIfdType=((IfdEvent)event).ifd;      mNumOfTagInIfd=mTiffStream.readUnsignedShort();      mIfdStartOffset=entry.getKey();      if (mNumOfTagInIfd * TAG_SIZE + mIfdStartOffset + OFFSET_SIZE > mApp1End) {        Log.w(TAG,"Invalid size of IFD " + mIfdType);        return EVENT_END;      }      mNeedToParseOffsetsInCurrentIfd=needToParseOffsetsInCurrentIfd();      if (((IfdEvent)event).isRequested) {        return EVENT_START_OF_IFD;      } else {        skipRemainingTagsInCurrentIfd();      }    } else     if (event instanceof ImageEvent) {      mImageEvent=(ImageEvent)event;      return mImageEvent.type;    } else {      ExifTagEvent tagEvent=(ExifTagEvent)event;      mTag=tagEvent.tag;      if (mTag.getDataType() != ExifTag.TYPE_UNDEFINED) {        readFullTagValue(mTag);        checkOffsetOrImageTag(mTag);      }      if (tagEvent.isRequested) {        return EVENT_VALUE_OF_REGISTERED_TAG;      }    }  }  return EVENT_END;}  }
class C{  public void inputSentence(String text,String userName,String targetUserName,Status status,Network network){  Vertex input=createInput(text.trim(),network);  Vertex sentence=input.getRelationship(Primitive.INPUT);  Vertex id=network.createVertex(status.getId());  if (sentence.hasRelationship(Primitive.TWEET,id)) {    log("Status already processed",Bot.FINE,status.getId(),status.getCreatedAt().getTime());    return;  }  sentence.addRelationship(Primitive.TWEET,id);  input.addRelationship(Primitive.INSTANTIATION,Primitive.TWEET);  input.addRelationship(Primitive.CREATEDAT,network.createVertex(status.getCreatedAt().getTime()));  input.addRelationship(Primitive.ID,id);  Vertex conversation=network.createInstance(Primitive.CONVERSATION);  conversation.addRelationship(Primitive.TYPE,Primitive.TWEET);  Language.addToConversation(input,conversation);  Vertex user=network.createSpeaker(userName);  conversation.addRelationship(Primitive.SPEAKER,user);  input.addRelationship(Primitive.SPEAKER,user);  if (targetUserName != null) {    Vertex targetUser=null;    if (targetUserName.equals(getUserName())) {      targetUser=network.createVertex(Primitive.SELF);    } else {      targetUser=network.createSpeaker(targetUserName);    }    input.addRelationship(Primitive.TARGET,targetUser);    conversation.addRelationship(Primitive.SPEAKER,targetUser);  }  user.addRelationship(Primitive.TWEET,input);  network.save();  getBot().memory().addActiveMemory(input);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.ENTITY_PROPERTY_SOURCE__PROPERTY:    if (resolve)     return getProperty();  return basicGetProperty();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void debugPrint(String msg){  System.out.println("Debug print " + msg);  System.out.println("Start comment offset: " + pcalStartCommentOffset + ";  Start: ("+ pcalStartOffset+ ", "+ pcalStartLength+ ");  End comment: ("+ pcalEndCommentOffset+ ", "+ pcalEndCommentLength+ ")");  Position[] positions=null;  try {    positions=fDocument.getPositions(fPositionCategory);  } catch (  BadPositionCategoryException e1) {    System.out.println("Can't get positions");    e1.printStackTrace();    return;  }  for (int i=0; i < positions.length; i++) {    try {      TypedPosition position=(TypedPosition)positions[i];      System.out.println("Position " + i + ": ("+ position.getOffset()+ ", "+ position.getLength()+ ")  type: "+ position.getType()+ (position.isDeleted ? " DELETED" : ""));      System.out.println("  `" + fDocument.get(position.getOffset(),position.getLength()) + "'");    } catch (    Exception e) {      System.out.println("Item " + i + " Exception: "+ e.getMessage());    }  }  IRegion result=createRegion();  if (result == null) {    System.out.println("Returned null");  } else {    System.out.println("Returned (" + result.getOffset() + ", "+ result.getLength()+ ")");  }}  }
class C{  public SASJavaExec(String execCommand,String script){  this(execCommand,script,null);}  }
class C{  private boolean containsSamtTopicsOnly(ControlGroup group){  for (  CnATreeElement child : group.getChildren()) {    if (!(child instanceof SamtTopic)) {      return false;    }  }  return true;}  }
class C{  public static void inform(final Shell shell,final String title,final String text){  final Dialog dialog=new Dialog(shell);  dialog.setTitle(ResourceManager.getLabel(ResourceManager.INFORMATION));  dialog.getMessageArea().setTitle(title).setText(text).setIcon(Display.getCurrent().getSystemImage(SWT.ICON_INFORMATION));  dialog.setButtonType(OpalDialogType.CLOSE);  dialog.show();}  }
class C{  public static boolean sameDate(Calendar cal,Calendar selectedDate){  return cal.get(Calendar.MONTH) == selectedDate.get(Calendar.MONTH) && cal.get(Calendar.YEAR) == selectedDate.get(Calendar.YEAR) && cal.get(Calendar.DAY_OF_MONTH) == selectedDate.get(Calendar.DAY_OF_MONTH);}  }
class C{  private void unregisterListener(TrackDataType trackDataType){switch (trackDataType) {case TRACKS_TABLE:    dataSource.unregisterContentObserver(tracksTableObserver);  break;case WAYPOINTS_TABLE:dataSource.unregisterContentObserver(waypointsTableObserver);break;case SAMPLED_IN_TRACK_POINTS_TABLE:dataSource.unregisterContentObserver(trackPointsTableObserver);break;case SAMPLED_OUT_TRACK_POINTS_TABLE:break;case PREFERENCE:dataSource.unregisterOnSharedPreferenceChangeListener(preferenceListener);break;default :break;}}  }
class C{  public boolean isConnectedToWifi(){  NetworkInfo networkInfo=mCM.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  return networkInfo.isConnected();}  }
class C{  public CreateServiceResponse createKeystoneService(ServiceV2 service){  log.debug("START - createKeystoneService");  if (service == null) {    log.error("service is null");    throw APIException.internalServerErrors.targetIsNullOrEmpty("Service object");  }  CreateServiceResponse serviceResponse=new CreateServiceResponse();  serviceResponse.setService(service);  String body="";  try {    body=getJsonForEntity(serviceResponse);  } catch (  Exception e) {    throw KeystoneApiException.exceptions.requestJsonPayloadParseFailure(serviceResponse.toString());  }  String uri=KeystoneConstants.URI_SERVICES;  URI requestURI=_base.resolve(URI.create(uri));  ClientResponse response=post(requestURI,body);  if (response.getClientResponseStatus() != ClientResponse.Status.OK && response.getClientResponseStatus() != ClientResponse.Status.CREATED) {    throw KeystoneApiException.exceptions.apiExecutionFailed(response.toString());  }  CreateServiceResponse createServiceResponse;  log.debug("Parsing service request results to Java object");  try {    createServiceResponse=getResponseObject(CreateServiceResponse.class,response);  } catch (  Exception e) {    log.error("Failed to parse the endpoint validation response");    throw KeystoneApiException.exceptions.responseJsonParseFailure(response.toString());  }  log.debug("END - createKeystoneService");  return createServiceResponse;}  }
class C{  public void testInvalidWindowsPackageNames() throws Exception {  assertEquals("_con",packageName("con"));  assertEquals("_lpt1",packageName("lpt1"));  assertEquals("conx",packageName("conx"));  assertEquals("xcon",packageName("xcon"));  assertEquals("_CoM2",packageName("CoM2"));  assertEquals("fred._con",packageName("fred.con"));  assertEquals("fred._lpt1",packageName("fred.lpt1"));  assertEquals("_con.fred",packageName("con.fred"));  assertEquals("_lpt1.soup",packageName("lpt1.soup"));  assertEquals("fred._lpt1.soup",packageName("fred.lpt1.soup"));  assertEquals("a._clock$.b",packageName("a.clock$.b"));}  }
class C{  public void resetCount(){  mProgress=0.0f;  mTargetProgress=0.0f;  invalidate();}  }
class C{  public static GroupMatcher<JobKey> anyJobGroup(){  return GroupMatcher.anyGroup();}  }
class C{  public static void sendKeyDownAndUp(SWTBot bot,int keyCode,char character){  Event ev=new Event();  ev.keyCode=keyCode;  ev.character=character;  ev.type=SWT.KeyDown;  bot.getDisplay().post(ev);  bot.sleep(EVENT_DOWN_UP_DELAY_MS);  ev.type=SWT.KeyUp;  bot.getDisplay().post(ev);}  }
class C{  public Task<NetworkSystemRestRep> update(URI id,NetworkSystemUpdate input){  return putTask(input,getIdUrl(),id);}  }
class C{  protected ThresholdVisualizePanel createPanel(Instances data,String title) throws Exception {  ThresholdVisualizePanel result=super.createPanel(data,title);  result.setROCString("AUC: " + Utils.doubleToString(ThresholdCurve.getROCArea(data),3));  result.setUpComboBoxes(result.getInstances());  return result;}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public void deleteRecord(int recordNumber) throws DBFException {  if (recordNumber < 0 || recordNumber >= recordData.size()) {    throw new DBFException("Record number outside of table range.");  }  recordData.remove(recordNumber);  isDirty=true;}  }
class C{  private void rebuildBrowserChat(){  final boolean showRecipient=showMessageRecipientCheckBox.isSelected();  final boolean formParagraphs=formatIntoPsCheckBox.isSelected();  final long breakMs=Env.APP_SETTINGS.get(Settings.PARAGRAPH_BREAK_TIME_LIMIT) * 1000;  final boolean showPings=showPingsCheckBox.isSelected();  final StringBuilder sb=new StringBuilder();  sb.append("<html><head><style>.c{").append(ChatEvent.RICON.getCSS()).append("} .p{").append(PingEvent.RICON.getCSS()).append("}</style></head><body style='background:#f0f0f0;padding:3px'>");  long lastTime=0;  int messageCounter=0;  for (  final Event e : repProc.replay.messageEvents.events) {    if (!(e.id == IMessageEvents.ID_CHAT || showPings && e.id == IMessageEvents.ID_PING))     continue;    if (formParagraphs) {      final long time=repProc.loopToTime(e.loop);      if (messageCounter > 0 && time - lastTime > breakMs)       sb.append("<br>");      lastTime=time;    }    final User u=repProc.getUser(e.userId);    sb.append("<div class='").append(e instanceof ChatEvent ? 'c' : 'p').append("' style='color:").append(u.getPlayerColor().darkerCssColor).append("'>");    sb.append("<tt style='background:").append(u.getPlayerColor().cssColor).append("'>&nbsp;&nbsp;</tt> ");    sb.append(repProc.formatLoopTime(e.loop)).append(" - ");    sb.append("<b>").append(Utils.safeForHtml(u.uid.fullName)).append("</b>");    if (e.id == IMessageEvents.ID_CHAT) {      final ChatEvent ce=(ChatEvent)e;      if (showRecipient)       sb.append(" to ").append(ce.getRecipient());      sb.append(": ");      sb.append(Utils.safeForHtml(ce.getText()));    } else     if (e.id == IMessageEvents.ID_PING) {      final PingEvent pe=(PingEvent)e;      sb.append(" pinged");      if (showRecipient)       sb.append(" to ").append(pe.getRecipient());      sb.append(": X=").append(Env.LANG.formatNumber(pe.getXFloat(),3));      sb.append(", Y=").append(Env.LANG.formatNumber(pe.getYFloat(),3));    }    sb.append("</div>");    messageCounter++;  }  sb.append("</body></html>");  chatBrowser.setText(sb.toString());  chatBrowser.setCaretPosition(0);}  }
class C{  public void addStrategy(final WeightingStrategy strategy){  assert strategy != null;  strategies_.add(strategy);}  }
class C{  public void testUnivariateTEforCoupledVariablesFromFileDynCorrExcl() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/2coupledRandomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  double[] col0=MatrixUtils.selectColumn(data,0);  double[] col1=MatrixUtils.selectColumn(data,1);  col0=MatrixUtils.normaliseIntoNewArray(col0);  col1=MatrixUtils.normaliseIntoNewArray(col1);  int kNNs=4;  int exclWindow=10;  double expectedFromTRENTOOL0to1=0.2930714;  double expectedFromTRENTOOL1to0=-0.0387031;  System.out.println("Kraskov TE comparison 1b to TRENTOOL - univariate coupled data with dynamic correlation exclusion");  TransferEntropyCalculatorKraskov teCalc=new TransferEntropyCalculatorKraskov();  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_K,Integer.toString(kNNs));  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_NORMALISE,"false");  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_DYN_CORR_EXCL_TIME,Integer.toString(exclWindow));  teCalc.initialise(1);  teCalc.setObservations(col0,col1);  double result=teCalc.computeAverageLocalOfObservations();  System.out.printf("From 2coupledRandomCols 0->1, Theiler window 10, expecting %.6f, got %.6f\n",expectedFromTRENTOOL0to1,result);  assertEquals(expectedFromTRENTOOL0to1,result,0.000001);  teCalc.initialise(1);  teCalc.setObservations(col1,col0);  result=teCalc.computeAverageLocalOfObservations();  assertEquals(expectedFromTRENTOOL1to0,result,0.000001);  System.out.printf("From 2coupledRandomCols 1->0, Theiler window 10, expecting %.6f, got %.6f\n",expectedFromTRENTOOL1to0,result);  assertEquals(99,teCalc.getNumObservations());  exclWindow=20;  expectedFromTRENTOOL0to1=0.2995997;  expectedFromTRENTOOL1to0=-0.0381608;  teCalc.setProperty(ConditionalMutualInfoCalculatorMultiVariateKraskov.PROP_DYN_CORR_EXCL_TIME,Integer.toString(exclWindow));  teCalc.initialise(1);  teCalc.setObservations(col0,col1);  result=teCalc.computeAverageLocalOfObservations();  System.out.printf("From 2coupledRandomCols 0->1, Theiler window 20, expecting %.6f, got %.6f\n",expectedFromTRENTOOL0to1,result);  assertEquals(expectedFromTRENTOOL0to1,result,0.000001);  teCalc.initialise(1);  teCalc.setObservations(col1,col0);  result=teCalc.computeAverageLocalOfObservations();  assertEquals(expectedFromTRENTOOL1to0,result,0.000001);  System.out.printf("From 2coupledRandomCols 1->0, Theiler window 20, expecting %.6f, got %.6f\n",expectedFromTRENTOOL1to0,result);  assertEquals(99,teCalc.getNumObservations());}  }
class C{  public void put(ByteBuffer buffer){  buffer.put(bytes,offset,length + 1);}  }
class C{  public static int encodeZigZag32(final int n){  return (n << 1) ^ (n >> 31);}  }
class C{  private void changeRelationships(final PoliticalActionAttachment paa){  getMyselfOutOfAlliance(paa,m_player,m_bridge);  getNeutralOutOfWarWithAllies(paa,m_player,m_bridge);  final CompositeChange change=new CompositeChange();  for (  final String relationshipChange : paa.getRelationshipChange()) {    final String[] s=relationshipChange.split(":");    final PlayerID player1=getData().getPlayerList().getPlayerID(s[0]);    final PlayerID player2=getData().getPlayerList().getPlayerID(s[1]);    final RelationshipType oldRelation=getData().getRelationshipTracker().getRelationshipType(player1,player2);    final RelationshipType newRelation=getData().getRelationshipTypeList().getRelationshipType(s[2]);    if (oldRelation.equals(newRelation)) {      continue;    }    change.add(ChangeFactory.relationshipChange(player1,player2,oldRelation,newRelation));    m_bridge.getHistoryWriter().addChildToEvent(m_bridge.getPlayerID().getName() + " succeeds on action: " + MyFormatter.attachmentNameToText(paa.getName())+ ": Changing Relationship for "+ player1.getName()+ " and "+ player2.getName()+ " from "+ oldRelation.getName()+ " to "+ newRelation.getName());    MoveDelegate.getBattleTracker(getData()).addRelationshipChangesThisTurn(player1,player2,oldRelation,newRelation);  }  if (!change.isEmpty()) {    m_bridge.addChange(change);  }  chainAlliancesTogether(m_bridge);}  }
class C{  public CCachedColorCriterium(final Color color){  m_color=color;}  }
class C{  protected void doReadObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  this.keyType=in.readInt();  this.valueType=in.readInt();  this.purgeValues=in.readBoolean();  this.loadFactor=in.readFloat();  int capacity=in.readInt();  init();  data=new HashEntry[capacity];  while (true) {    K key=(K)in.readObject();    if (key == null) {      break;    }    V value=(V)in.readObject();    put(key,value);  }  threshold=calculateThreshold(data.length,loadFactor);}  }
class C{  public static <E extends Identifiable>List<E> findByPrimaryKeys(EntityManager em,List<BigInteger> ids,Class<E> type){  requireArgument(em != null,"The entity manager cannot be null.");  requireArgument(ids != null && !ids.isEmpty(),"IDs cannot be null or empty.");  requireArgument(type != null,"The entity type cannot be null.");  TypedQuery<E> query=em.createNamedQuery("JPAEntity.findByPrimaryKeys",type);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("ids",ids);    query.setParameter("deleted",false);    return query.getResultList();  } catch (  NoResultException ex) {    return new ArrayList<>(0);  }}  }
class C{  public boolean isEveryOwnedOutputSpent(Wallet wallet){  maybeParse();  for (  TransactionOutput output : outputs) {    if (output.isAvailableForSpending() && output.isMineOrWatched(wallet))     return false;  }  return true;}  }
class C{  public boolean isSecureProcessing(){  return m_isSecureProcessing;}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public boolean drawAreaFeatures(){  return drawAreaFeatures;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case ImageFormat.NV21:case ImageFormat.NV16:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public static void register(){  CommandCenter.register(CID,new CStatusAction());  CommandCenter.register(CSTATUS,new CStatusAction());}  }
class C{  @Override public void emitDirect(int taskId,String streamId,List<Object> tuple){  List<Object> t=_callback.apply(tuple,_context.cloneContext().with(EmitContext.Type.STREAM_ID,streamId).with(EmitContext.Type.TASK_ID,new Integer(taskId)));  _delegate.emitDirect(taskId,streamId,t);}  }
class C{  public void release(PluginContext context) throws ReplicatorException, InterruptedException {  try {    if (lineReader != null) {      lineReader.close();    }  } catch (  IOException e) {    throw new ReplicatorException("Unable to close the CSV reader");  }}  }
class C{  public void runAsserts(Step step,int stepId,Boolean needAssignee){  assertEquals(stepId,(int)step.getId());  if (needAssignee) {    assertTrue(ModuleHelper.isSampleUser(step.getAssignee()));  }}  }
class C{  protected void paintData(Graphics2D g2,Variate.N xData,Variate.N yData){  g2.setPaint(linePaint);  g2.setStroke(lineStroke);  if (getSelectedPoints() != null && getSelectedPoints().size() > 0) {    for (    int i : getSelectedPoints()) {      double x=((Number)xTipData.get(i)).doubleValue();      double y=((Number)yTipData.get(i)).doubleValue();      double x1=transformX(x);      double y1=transformY(y);      double x2=transformX(((Number)xData.get(0)).doubleValue());      double y2=transformY(((Number)yData.get(0)).doubleValue());      GeneralPath path=new GeneralPath();      path.moveTo((float)x1,(float)y1);      path.lineTo((float)x2,(float)y2);      g2.draw(path);    }  } else {    for (int i=0; i < xData.getCount(); i++) {      double x1=transformX(((Number)xTipData.get(i)).doubleValue());      double y1=transformY(((Number)yTipData.get(i)).doubleValue());      double x2=transformX(((Number)xData.get(i)).doubleValue());      double y2=transformY(((Number)yData.get(i)).doubleValue());      GeneralPath path=new GeneralPath();      path.moveTo((float)x1,(float)y1);      path.lineTo((float)x2,(float)y2);      g2.draw(path);    }  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)newValue);  return;case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__OPERATOR:setOperator((MultiplicativeOperator)newValue);return;case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public BoolQueryBuilder must(QueryBuilder queryBuilder){  mustClauses.add(queryBuilder);  return this;}  }
class C{  public static boolean compileClasses(String nameRoot){  return false;}  }
class C{  public void flip(int fromIndex,int toIndex){  checkRange(fromIndex,toIndex);  if (fromIndex == toIndex)   return;  int startWordIndex=wordIndex(fromIndex);  int endWordIndex=wordIndex(toIndex - 1);  expandTo(endWordIndex);  long firstWordMask=WORD_MASK << fromIndex;  long lastWordMask=WORD_MASK >>> -toIndex;  if (startWordIndex == endWordIndex) {    words[startWordIndex]^=(firstWordMask & lastWordMask);  } else {    words[startWordIndex]^=firstWordMask;    for (int i=startWordIndex + 1; i < endWordIndex; i++)     words[i]^=WORD_MASK;    words[endWordIndex]^=lastWordMask;  }  recalculateWordsInUse();  checkInvariants();}  }
class C{  public PChargingVectorHeader createChargingVectorHeader(String icid) throws ParseException {  if (icid == null)   throw new NullPointerException("null icid arg!");  PChargingVector chargingVector=new PChargingVector();  chargingVector.setICID(icid);  return chargingVector;}  }
class C{  private boolean handleMotionEvent(WXGestureType WXGestureType,MotionEvent motionEvent){  if (component.containsGesture(WXGestureType)) {    List<Map<String,Object>> list=createFireEventParam(motionEvent);    for (    Map<String,Object> map : list) {      component.getInstance().fireEvent(component.getDomObject().getRef(),WXGestureType.toString(),map);    }    return true;  } else {    return false;  }}  }
class C{  public int dpToPx(int dp){  DisplayMetrics displayMetrics=getResources().getDisplayMetrics();  return (int)(dp * (displayMetrics.densityDpi / 160f));}  }
class C{  public void qsortSingle(int left,int right){  if (right <= left) {    return;  }  int pivotIndex=pi.selectPivotIndex(ar,left,right);  pivotIndex=partition(left,right,pivotIndex);  qsortSingle(left,pivotIndex - 1);  qsortSingle(pivotIndex + 1,right);}  }
class C{  protected final void multiply(){  final int step=blockStripeSize, blockSize=blockStripeSize * blockStripeSize;  for (int m=fromM; m < toM; m+=step) {    final int aRows=matrixA.layout.getRowsInBlock(m);    for (int k=fromK; k < toK; k+=step) {      final int bCols=matrixB.layout.getColumnsInBlock(k);      final double[] cBlock=new double[aRows * bCols];      for (int n=fromN; n < toN; n+=step) {        final double[] aBlock=matrixA.layout.toRowMajorBlock(matrixA,m,n);        final double[] bBlock=matrixB.layout.toColMajorBlock(matrixB,n,k);        if (aBlock != null && bBlock != null) {          if (aBlock.length == blockSize && bBlock.length == blockSize) {            multiplyAxB(aBlock,bBlock,cBlock,step);          } else {            int aCols=aBlock.length / aRows;            int bRows=bBlock.length / bCols;            verifyTrue(aCols == bRows,"aCols!=bRows");            multiplyRowMajorTimesColumnMajorBlocks(aBlock,bBlock,cBlock,aRows,aCols,bCols);          }        }      }      matrixC.addBlockData(m,k,cBlock);    }  }}  }
class C{  static boolean hasBadSizeMemoryOperand(Instruction s){  for (Enumeration<Operand> e=s.getMemoryOperands(); e.hasMoreElements(); ) {    MemoryOperand M=(MemoryOperand)e.nextElement();    if (M.size != 4)     return true;  }  return false;}  }
class C{  public GPUImageFilterGroup(final List<GPUImageFilter> filters){  mFilters=filters;  mGLCubeBuffer=ByteBuffer.allocateDirect(CUBE.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLCubeBuffer.put(CUBE).position(0);  mGLTextureBuffer=ByteBuffer.allocateDirect(TEXTURE_NO_ROTATION.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureBuffer.put(TEXTURE_NO_ROTATION).position(0);  float[] flipTexture=TextureRotationUtil.getRotation(Rotation.NORMAL,false,true);  mGLTextureFlipBuffer=ByteBuffer.allocateDirect(flipTexture.length * 4).order(ByteOrder.nativeOrder()).asFloatBuffer();  mGLTextureFlipBuffer.put(flipTexture).position(0);}  }
class C{  public ArrowFunction createArrowFunction(){  ArrowFunctionImpl arrowFunction=new ArrowFunctionImpl();  return arrowFunction;}  }
class C{  public void beforeMerge(Entity entity){  if (!isAuthorizationRequired()) {    return;  }  MetaClass metaClass=metadata.getClassNN(entity.getClass());  FetchGroup fetchGroup=((FetchGroupTracker)entity)._persistence_getFetchGroup();  if (fetchGroup != null) {    List<String> attributesToRemove=new ArrayList<>();    for (    String attrName : fetchGroup.getAttributeNames()) {      String[] parts=attrName.split("\\.");      MetaClass tmpMetaClass=metaClass;      for (      String part : parts) {        if (!security.isEntityAttrUpdatePermitted(tmpMetaClass,part)) {          attributesToRemove.add(attrName);          break;        }        MetaProperty metaProperty=tmpMetaClass.getPropertyNN(part);        if (metaProperty.getRange().isClass()) {          tmpMetaClass=metaProperty.getRange().asClass();        }      }    }    if (!attributesToRemove.isEmpty()) {      List<String> attributeNames=new ArrayList<>(fetchGroup.getAttributeNames());      attributeNames.removeAll(attributesToRemove);      ((FetchGroupTracker)entity)._persistence_setFetchGroup(new CubaEntityFetchGroup(attributeNames));    }  } else {    List<String> attributeNames=new ArrayList<>();    for (    MetaProperty metaProperty : metaClass.getProperties()) {      if (metadataTools.isSystem(metaProperty) || security.isEntityAttrUpdatePermitted(metaClass,metaProperty.getName())) {        attributeNames.add(metaProperty.getName());      }    }    ((FetchGroupTracker)entity)._persistence_setFetchGroup(new CubaEntityFetchGroup(attributeNames));  }}  }
class C{  protected Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public static void logError(String msg,Throwable ex){  getDefault().getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.OK,msg,ex));}  }
class C{  void detect(DynamicAABBTreeLeaf<E,T> node,DynamicAABBTreeNode root,BroadphaseFilter<E,T> filter,List<BroadphasePair<E,T>> pairs){  if (node.aabb.overlaps(root.aabb)) {    if (root.left == null) {      @SuppressWarnings("unchecked") DynamicAABBTreeLeaf<E,T> leaf=(DynamicAABBTreeLeaf<E,T>)root;      if (!leaf.tested && leaf.collidable != node.collidable) {        if (filter.isAllowed(node.collidable,node.fixture,leaf.collidable,leaf.fixture)) {          BroadphasePair<E,T> pair=new BroadphasePair<E,T>(node.collidable,node.fixture,leaf.collidable,leaf.fixture);          pairs.add(pair);        }      }      return;    }    if (root.left != null)     detect(node,root.left,filter,pairs);    if (root.right != null)     detect(node,root.right,filter,pairs);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  lodMain=new LODTestMain();  setMain(lodMain,"gvr.xml");}  }
class C{  public Builder widthPx(int drawerWidthPx){  return this;}  }
class C{  public static synchronized void createPresenceManager(Context context,Collection<MXSession> sessions){  for (  MXSession session : sessions) {    if (!instances.containsKey(session)) {      createInstance(context,session);    }  }}  }
class C{  private void validate(Method method){  if (validate == null) {    validate=getFunction(method);  }}  }
class C{  static public boolean isConsistent(final IConstraint[] constraints,final IBindingSet bindingSet){  for (int i=0; i < constraints.length; i++) {    final IConstraint constraint=constraints[i];    if (!constraint.accept(bindingSet)) {      if (log.isDebugEnabled()) {        log.debug("Rejected by " + constraint.getClass().getSimpleName() + " : "+ bindingSet);      }      return false;    }    if (log.isTraceEnabled()) {      log.debug("Accepted by " + constraint.getClass().getSimpleName() + " : "+ bindingSet);    }  }  return true;}  }
class C{  protected void initPingIntervalMilli(){  String pingIntervalMilliParam=getInitParameter("pingIntervalMilli");  setPingIntervalMilli((pingIntervalMilliParam == null) ? DEFAULT_PING_INTERVAL_MILLI : Integer.parseInt(pingIntervalMilliParam));  if (isDebug()) {    log("pingIntervalMilli: " + getPingIntervalMilli());  }}  }
class C{  public JSONException(final Throwable cause){  super(cause.getMessage(),cause);}  }
class C{  @Override public Map extractIdentityFieldsForQuery(Object object,AbstractSession session){  Map keyFields=new HashMap();  ClassDescriptor descriptor=getReferenceDescriptor();  boolean usePrimaryKeyFields=(descriptor.getPrimaryKeyFields() != null && !descriptor.getPrimaryKeyFields().isEmpty()) ? true : false;  Iterator<DatabaseMapping> i=descriptor.getMappings().iterator();  while (i.hasNext()) {    DatabaseMapping mapping=i.next();    if (!mapping.isReadOnly() && (!usePrimaryKeyFields || (usePrimaryKeyFields && mapping.isPrimaryKeyMapping()))) {      Iterator<DatabaseField> fields=mapping.getFields().iterator();      while (fields.hasNext()) {        DatabaseField field=fields.next();        if (field.isUpdatable()) {          Object value=descriptor.getObjectBuilder().extractValueFromObjectForField(object,field,session);          keyFields.put(field,value);        }      }    }  }  return keyFields;}  }
class C{  static public Timestamp nextBusinessDay(Timestamp day) throws SQLException {  if (day == null)   day=new Timestamp(System.currentTimeMillis());  GregorianCalendar cal=new GregorianCalendar();  cal.setTime(day);  cal.set(Calendar.HOUR_OF_DAY,0);  cal.set(Calendar.MINUTE,0);  cal.set(Calendar.SECOND,0);  cal.set(Calendar.MILLISECOND,0);  boolean isHoliday=true;  do {    int dow=cal.get(Calendar.DAY_OF_WEEK);    if (dow == Calendar.SATURDAY)     cal.add(Calendar.DAY_OF_YEAR,2); else     if (dow == Calendar.SUNDAY)     cal.add(Calendar.DAY_OF_YEAR,1);    java.util.Date temp=cal.getTime();    String sql="SELECT Date1 FROM C_NonBusinessDay WHERE IsActive ='Y' AND Date1=?";    PreparedStatement pstmt=Adempiere.prepareStatement(sql);    pstmt.setTimestamp(1,new Timestamp(temp.getTime()));    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      cal=new GregorianCalendar();      cal.setTime(temp);      cal.add(Calendar.DAY_OF_YEAR,1);    } else     isHoliday=false;    rs.close();    pstmt.close();  } while (isHoliday);  return new Timestamp(cal.getTimeInMillis());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:34:30.620 -0500",hash_original_method="74CDAF19D7204E21B78486A9CDDF7726",hash_generated_method="B407B1FB660427FED29AFAF67686F012") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static byte[] fromAscii(char[] ascii){  if (ascii == null || ascii.length == 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] l_raw=new byte[ascii.length >> 3];  for (int ii=0, jj=ascii.length - 1; ii < l_raw.length; ii++, jj-=8) {    for (int bits=0; bits < BITS.length; ++bits) {      if (ascii[jj - bits] == '1') {        l_raw[ii]|=BITS[bits];      }    }  }  return l_raw;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void calculateForGraphPath(NavMeshGraphPath trianglePath){  clear();  nodes=trianglePath.nodes;  this.start=new Vector3(trianglePath.start);  this.end=new Vector3(trianglePath.end);  this.startTri=trianglePath.startTri;  Ray ray=new Ray(tmp1.set(V3_UP).scl(1000).add(start),tmp2.set(V3_DOWN));  if (!Intersector.intersectRayTriangle(ray,startTri.a,startTri.b,startTri.c,null)) {    float minDst=Float.POSITIVE_INFINITY;    Vector3 projection=new Vector3();    Vector3 newStart=new Vector3();    float dst;    if ((dst=GeometryUtils.nearestSegmentPointSquareDistance(projection,startTri.a,startTri.b,start)) < minDst) {      minDst=dst;      newStart.set(projection);    }    if ((dst=GeometryUtils.nearestSegmentPointSquareDistance(projection,startTri.b,startTri.c,start)) < minDst) {      minDst=dst;      newStart.set(projection);    }    if ((dst=GeometryUtils.nearestSegmentPointSquareDistance(projection,startTri.c,startTri.a,start)) < minDst) {      minDst=dst;      newStart.set(projection);    }    start.set(newStart);  }  if (nodes.size == 0) {    addPoint(start,startTri);    addPoint(end,startTri);  } else {    lastEdge=new Edge(nodes.get(nodes.size - 1).getToNode(),nodes.get(nodes.size - 1).getToNode(),end,end);    calculateEdgePoints();  }}  }
class C{  public HyperLogLog(int log2m){  this(log2m,new RegisterSet(1 << log2m));}  }
class C{  final void runWorker(Worker w){  Runnable task=w.firstTask;  w.firstTask=null;  boolean completedAbruptly=true;  try {    while (task != null || (task=getTask()) != null) {      w.lock();      clearInterruptsForTaskRun();      try {        beforeExecute(w.thread,task);        Throwable thrown=null;        try {          task.run();        } catch (        RuntimeException x) {          thrown=x;          throw x;        }catch (        Error x) {          thrown=x;          throw x;        }catch (        Throwable x) {          thrown=x;          throw new Error(x);        } finally {          afterExecute(task,thrown);        }      }  finally {        task=null;        w.completedTasks++;        w.unlock();      }    }    completedAbruptly=false;  }  finally {    processWorkerExit(w,completedAbruptly);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMMUL");  translateAll(environment,instruction,"SMMUL",instructions);}  }
class C{  public boolean findWifiConfigurationBySsid(String ssid){  List<WifiConfiguration> configuredNetworks=wifiManager.getConfiguredNetworks();  boolean isAvailable=false;  for (  WifiConfiguration configuration : configuredNetworks) {    if (configuration.SSID.equals(ssid)) {      isAvailable=true;      break;    }  }  return isAvailable;}  }
class C{  protected String searchFor(final String target,String start){  return searchFor(target,null,start);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public static void addURL(URL u) throws IOException {  URLClassLoader sysloader=(URLClassLoader)ClassLoader.getSystemClassLoader();  Class<?> sysclass=URLClassLoader.class;  try {    boolean loadIt=true;    URL[] currentPaths=sysloader.getURLs();    for (    URL cPath : currentPaths) {      if (cPath.getFile().equals(u.getFile())) {        loadIt=false;      }    }    if (loadIt) {      Method method=sysclass.getDeclaredMethod("addURL",parameters);      method.setAccessible(true);      method.invoke(sysloader,new Object[]{u});      logger.fine("loaded jar file");    } else {      logger.fine("jar file already loaded, skipping");    }  } catch (  Throwable t) {    t.printStackTrace();    throw new IOException("Error, could not add URL to system classloader");  }}  }
class C{  public DB_Oracle(){  try {    System.setProperty("oracle.jdbc.V8Compatible","true");  } catch (  Exception e) {    log.log(Level.SEVERE,e.getMessage());  }}  }
class C{  public <BeanType extends ConfiguredBean>String saveBeanToJSON(final BeanType bean) throws ConfigException {  try {    final String str=jsonMapper.writeValueAsString(bean);    return str;  } catch (  final Exception e) {    throw new ConfigException("Failed to serialize bean: " + bean,e);  }}  }
class C{  public File call(File filename) throws Exception {  if (filename.exists() && !forceRegeneration) {    logger.info("Loading visual terms for " + imageFile.getName());    return filename;  }  try {    logger.info("Generating keypoints for " + imageFile.getName());    final LocalFeatureList<?> keys=mode.extract(loadImageData(imageFile));    IOUtils.writeBinary(filename,keys);  } catch (  final Exception e) {    System.err.println("Error processing image " + imageFile);    return null;  }  return filename;}  }
class C{  private void paintArrowButton(Graphics2D g,double x,double y){  Shape s=shapeGenerator.createArrowLeft(x,y,4,6);  g.setPaint(getScrollBarButtonArrowPaint());  g.fill(s);}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  private Object readResolve(){  return this;}  }
class C{  public boolean checkIfBehindNat(String ipv4Str,String ipv6Str,String clientIp) throws Exception {  log.info(String.format("Performing NAT check, client address connecting to VIP: %s. Client reports its IPv4 = %s, IPv6 = %s",clientIp,ipv4Str,ipv6Str));  InetAddress ipv4Addr=parseInetAddress(ipv4Str);  InetAddress ipv6Addr=parseInetAddress(ipv6Str);  InetAddress directAddr=parseInetAddress(clientIp);  if (directAddr == null || ipv4Addr == null && ipv6Addr == null) {    String ipAddrsStr=StringUtils.join(new String[]{ipv4Str,ipv6Str},'|');    log.error("checkParam is {}, X-Forwarded-For is {}",ipAddrsStr,clientIp);    throw new Exception(ipAddrsStr);  }  return !directAddr.equals(ipv4Addr) && !directAddr.equals(ipv6Addr);}  }
class C{  private String helper(int n){  if (n == 0) {    return "";  } else   if (n < 20) {    return LESS_THAN_TWENTY[20] + " ";  } else   if (n < 100) {    return TENS[n / 10] + " " + helper(n % 10);  } else {    return LESS_THAN_TWENTY[n / 100] + " Hundred " + helper(n % 100);  }}  }
class C{  public void checkLoadExternalResource(){}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public GradleDistribution deserializeFromString(String distributionString){  Preconditions.checkNotNull(distributionString);  String localInstallationPrefix="GRADLE_DISTRIBUTION(LOCAL_INSTALLATION(";  if (distributionString.startsWith(localInstallationPrefix) && distributionString.endsWith("))")) {    String localInstallationDir=distributionString.substring(localInstallationPrefix.length(),distributionString.length() - 2);    return GradleDistribution.forLocalInstallation(new File(localInstallationDir));  }  String remoteDistributionPrefix="GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION(";  if (distributionString.startsWith(remoteDistributionPrefix) && distributionString.endsWith("))")) {    String remoteDistributionUri=distributionString.substring(remoteDistributionPrefix.length(),distributionString.length() - 2);    return GradleDistribution.forRemoteDistribution(createURI(remoteDistributionUri));  }  String versionPrefix="GRADLE_DISTRIBUTION(VERSION(";  if (distributionString.startsWith(versionPrefix) && distributionString.endsWith("))")) {    String version=distributionString.substring(versionPrefix.length(),distributionString.length() - 2);    return GradleDistribution.forVersion(version);  }  String wrapperString="GRADLE_DISTRIBUTION(WRAPPER)";  if (distributionString.equals(wrapperString)) {    return GradleDistribution.fromBuild();  }  String message=String.format("Cannot deserialize Gradle distribution string '%s.'",distributionString);  throw new RuntimeException(message);}  }
class C{  public SendableLocationMessage.SendableLocationMessageBuilder disableNotification(boolean disableNotification){  this.disableNotification=disableNotification;  return this;}  }
class C{  protected ParametersImpl(){  super();}  }
class C{  public void parseRulePatterns(List<Pattern> patterns,String rulePatterStr){  Pattern pattern=null;  String prefix=rulePatterStr.substring(0,2);  int strLength=rulePatterStr.length();switch (prefix) {case "%'":    pattern=getModPattern(rulePatterStr,strLength);  break;case "~%":String rulePatterStrTemp=rulePatterStr.substring(1);int length=rulePatterStrTemp.length();pattern=new NotPattern(getModPattern(rulePatterStrTemp,length));break;case "n'":String rangeStr0=rulePatterStr.substring(2,strLength - 1);pattern=getRangePattern(rangeStr0);break;case "~n":String rangeStr1=rulePatterStr.substring(3,strLength - 1);pattern=new NotPattern(getRangePattern(rangeStr1));break;case "r'":String methodName=rulePatterStr.substring(2,strLength - 1);pattern=new RegexpPattern(methodName);break;case "s'":String callerFrom=rulePatterStr.substring(2,strLength - 1);pattern=new StringPattern(callerFrom);break;case "~s":String notS=rulePatterStr.substring(3,strLength - 1);pattern=new NotPattern(new StringPattern(notS));break;case "ip":String ip=rulePatterStr.substring(3,strLength - 1);pattern=extractIp(ip);break;case "~i":String notIp=rulePatterStr.substring(4,strLength - 1);pattern=new NotPattern(extractIp(notIp));break;default :}patterns.add(pattern);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void copyItem(final OdorWorldEntity entity){}  }
class C{  protected SVGOMAnimateElement(){}  }
class C{  public void shutDown(){synchronized (connectionTable) {    if (!alive)     return;    alive=false;    Enumeration<MultiplexConnectionInfo> enum_=connectionTable.elements();    while (enum_.hasMoreElements()) {      MultiplexConnectionInfo info=enum_.nextElement();      info.in.disconnect();      info.out.disconnect();    }    connectionTable.clear();    numConnections=0;  }  try {    in.close();  } catch (  IOException e) {  }  try {    out.close();  } catch (  IOException e) {  }}  }
class C{  public void updateAvailableTagValues(){  String currentText=valueBox.getText();  List<String> tagValues=influxService.getTagValues(measurementBox.getText(),keyBox.getText());  if (null != tagValues) {    valueBox.setItems(tagValues.toArray(new String[tagValues.size()]));  }  valueBox.setText(currentText);}  }
class C{  public void close() throws IOException {  try {    Debug.message("binaryfile","StreamInputReader.close()");    if (Debug.debugging("connection_problems")) {      Thread.sleep(1000);    }    if (inputStream != null)     inputStream.close();  } catch (  Exception e) {    e.printStackTrace();  }  inputStream=null;}  }
class C{  public void onSelectDone(List<LocalMedia> medias){  ArrayList<String> images=new ArrayList<>();  for (  LocalMedia media : medias) {    images.add(media.getPath());  }  onResult(images);}  }
class C{  static void testPermissions(Path file,String mode) throws IOException {  System.out.format("change mode: %s\n",mode);  Set<PosixFilePermission> perms=PosixFilePermissions.fromString(mode);  Files.setPosixFilePermissions(file,perms);  Set<PosixFilePermission> current=Files.getPosixFilePermissions(file);  if (!current.equals(perms)) {    throw new RuntimeException("Actual permissions: " + PosixFilePermissions.toString(current) + ", expected: "+ PosixFilePermissions.toString(perms));  }  Files.setAttribute(file,"posix:permissions",perms);  current=(Set<PosixFilePermission>)Files.getAttribute(file,"posix:permissions");  if (!current.equals(perms)) {    throw new RuntimeException("Actual permissions: " + PosixFilePermissions.toString(current) + ", expected: "+ PosixFilePermissions.toString(perms));  }}  }
class C{  private void deleteExternalStorageFiles(TrackFileFormat trackFileFormat){  File dir=new File(FileUtils.getPath(trackFileFormat.getExtension()));  File[] files=dir.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    file.delete();  }}  }
class C{  @SuppressWarnings("unchecked") private static <P_IN>Spliterator<P_IN> sliceSpliterator(StreamShape shape,Spliterator<P_IN> s,long skip,long limit){  long sliceFence=calcSliceFence(skip,limit);switch (shape) {case REFERENCE:    return new StreamSpliterators.SliceSpliterator.OfRef<>(s,skip,sliceFence);case INT_VALUE:  return (Spliterator<P_IN>)new StreamSpliterators.SliceSpliterator.OfInt((Spliterator.OfInt)s,skip,sliceFence);case LONG_VALUE:return (Spliterator<P_IN>)new StreamSpliterators.SliceSpliterator.OfLong((Spliterator.OfLong)s,skip,sliceFence);case DOUBLE_VALUE:return (Spliterator<P_IN>)new StreamSpliterators.SliceSpliterator.OfDouble((Spliterator.OfDouble)s,skip,sliceFence);default :throw new IllegalStateException("Unknown shape " + shape);}}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,Object value){  buffer.append(value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.621 -0500",hash_original_method="516F308BCBD27D7CFD7DAEDE95CCF081",hash_generated_method="B88CCE3E38D7C85BA2E6327BB09A86FE") public static void gluOrtho2D(GL10 gl,float left,float right,float bottom,float top){  gl.glOrthof(left,right,bottom,top,-1.0f,1.0f);}  }
class C{  private boolean matchesMobile(NetworkIdentity ident){  if (ident.mType == TYPE_WIMAX) {    return true;  } else {    return ((sForceAllNetworkTypes || contains(DATA_USAGE_NETWORK_TYPES,ident.mType)) && Objects.equal(mSubscriberId,ident.mSubscriberId));  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ASSOCIATION_DEFINITION___ASSOCIATION_1:    return ((InternalEList<?>)getAssociation_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public FastLongBuffer append(FastLongBuffer buff){  if (buff.size == 0) {    return this;  }  for (int i=0; i < buff.currentBufferIndex; i++) {    append(buff.buffers[i]);  }  append(buff.currentBuffer,0,buff.offset);  return this;}  }
class C{  @Override public boolean hasOverlappingRendering(){  return false;}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  public DefaultShadowGenerator(){  this(5,Color.black,0.5f,5,-Math.PI / 4);}  }
class C{  public static int putShort(byte[] bytes,int offset,short val){  if (bytes.length - offset < SIZEOF_SHORT) {    throw new IllegalArgumentException("Not enough room to put a short at" + " offset " + offset + " in a "+ bytes.length+ " byte array");  }  bytes[offset + 1]=(byte)val;  val>>=8;  bytes[offset]=(byte)val;  return offset + SIZEOF_SHORT;}  }
class C{  public static String displayString(String inputString){  return displayString(inputString,0);}  }
class C{  public int memberOf(){  return theType.memberOf();}  }
class C{  public static boolean doCheckPoint(){  if (forceChkpt) {    forceChkpt=false;    return true;  }  if (chkptDuration == 0) {    return false;  }  long now=System.currentTimeMillis();  if (now - lastChkpt >= TLCGlobals.chkptDuration) {    lastChkpt=now;    return true;  }  return false;}  }
class C{  public void writeLink(String anchor,String body) throws IOException {  startTag(A);  writeAttr(HREF,anchor);  write(body);  endTag(A);}  }
class C{  public static ShoppingCart makeShoppingListCart(ShoppingCart listCart,LocalDispatcher dispatcher,GenericValue shoppingList,Locale locale){  Delegator delegator=dispatcher.getDelegator();  if (shoppingList != null && shoppingList.get("productStoreId") != null) {    String productStoreId=shoppingList.getString("productStoreId");    String currencyUom=shoppingList.getString("currencyUom");    if (currencyUom == null) {      GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);      if (productStore == null) {        return null;      }      currencyUom=productStore.getString("defaultCurrencyUomId");    }    if (locale == null) {      locale=Locale.getDefault();    }    List<GenericValue> items=null;    try {      items=shoppingList.getRelated("ShoppingListItem",null,UtilMisc.toList("shoppingListItemSeqId"),false);    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }    if (UtilValidate.isNotEmpty(items)) {      if (listCart == null) {        listCart=new ShoppingCart(delegator,productStoreId,locale,currencyUom);        listCart.setOrderPartyId(shoppingList.getString("partyId"));        listCart.setAutoOrderShoppingListId(shoppingList.getString("shoppingListId"));      } else {        if (!listCart.getPartyId().equals(shoppingList.getString("partyId"))) {          Debug.logError("CANNOT add shoppingList: " + shoppingList.getString("shoppingListId") + " of partyId: "+ shoppingList.getString("partyId")+ " to a shoppingcart with a different orderPartyId: "+ listCart.getPartyId(),module);          return listCart;        }      }      ProductConfigWrapper configWrapper=null;      for (      GenericValue shoppingListItem : items) {        String productId=shoppingListItem.getString("productId");        BigDecimal quantity=shoppingListItem.getBigDecimal("quantity");        Timestamp reservStart=shoppingListItem.getTimestamp("reservStart");        BigDecimal reservLength=null;        String configId=shoppingListItem.getString("configId");        if (shoppingListItem.get("reservLength") != null) {          reservLength=shoppingListItem.getBigDecimal("reservLength");        }        BigDecimal reservPersons=null;        if (shoppingListItem.get("reservPersons") != null) {          reservPersons=shoppingListItem.getBigDecimal("reservPersons");        }        if (UtilValidate.isNotEmpty(productId) && quantity != null) {          if (UtilValidate.isNotEmpty(configId)) {            configWrapper=ProductConfigWorker.loadProductConfigWrapper(delegator,dispatcher,configId,productId,listCart.getProductStoreId(),null,listCart.getWebSiteId(),listCart.getCurrency(),listCart.getLocale(),listCart.getAutoUserLogin());          }          String listId=shoppingListItem.getString("shoppingListId");          String itemId=shoppingListItem.getString("shoppingListItemSeqId");          Map<String,Object> attributes=UtilMisc.<String,Object>toMap("shoppingListId",listId,"shoppingListItemSeqId",itemId);          try {            listCart.addOrIncreaseItem(productId,null,quantity,reservStart,reservLength,reservPersons,null,null,null,null,null,attributes,null,configWrapper,null,null,null,dispatcher);          } catch (          CartItemModifyException e) {            Debug.logError(e,"Unable to add product to List Cart - " + productId,module);          }catch (          ItemNotFoundException e) {            Debug.logError(e,"Product not found - " + productId,module);          }        }      }      if (listCart.size() > 0) {        if (UtilValidate.isNotEmpty(shoppingList.get("paymentMethodId"))) {          listCart.addPayment(shoppingList.getString("paymentMethodId"));        }        if (UtilValidate.isNotEmpty(shoppingList.get("contactMechId"))) {          listCart.setAllShippingContactMechId(shoppingList.getString("contactMechId"));        }        if (UtilValidate.isNotEmpty(shoppingList.get("shipmentMethodTypeId"))) {          listCart.setAllShipmentMethodTypeId(shoppingList.getString("shipmentMethodTypeId"));        }        if (UtilValidate.isNotEmpty(shoppingList.get("carrierPartyId"))) {          listCart.setAllCarrierPartyId(shoppingList.getString("carrierPartyId"));        }        if (UtilValidate.isNotEmpty(shoppingList.getString("productPromoCodeId"))) {          listCart.addProductPromoCode(shoppingList.getString("productPromoCodeId"),dispatcher);        }      }    }  }  return listCart;}  }
class C{  Segment(Segment<K,V> old,int len){  this(old.cache,old.maxMemory,old.stackMoveDistance,len);  Entry<K,V> s=old.stack.stackPrev;  while (s != old.stack) {    Entry<K,V> e=copy(s);    addToMap(e);    addToStack(e);    s=s.stackPrev;  }  s=old.queue.queuePrev;  while (s != old.queue) {    Entry<K,V> e=find(s.key,getHash(s.key));    if (e == null) {      e=copy(s);      addToMap(e);    }    addToQueue(queue,e);    s=s.queuePrev;  }  s=old.queue2.queuePrev;  while (s != old.queue2) {    Entry<K,V> e=find(s.key,getHash(s.key));    if (e == null) {      e=copy(s);      addToMap(e);    }    addToQueue(queue2,e);    s=s.queuePrev;  }}  }
class C{  public void testSerializationCompatibility() throws Exception {  TestUtils.initCertPathSSCertChain();  SerializationTest.verifyGolden(this,TestUtils.rootCertificateSS);}  }
class C{  public static ClassHierarchy classHierarchy(Scene scene){  if (scene == null) {    throw new InternalTypingException();  }  ClassHierarchy classHierarchy=G.v().ClassHierarchy_classHierarchyMap.get(scene);  if (classHierarchy == null) {    classHierarchy=new ClassHierarchy(scene);  }  return classHierarchy;}  }
class C{  public NamingEnumeration<javax.naming.Binding> listBindings(String name) throws NamingException {  return listBindings(new CompositeName(name));}  }
class C{  public void fillFieldValues(){  if (!isCreationDialog) {    tfSynapseGroupLabel.setText(synapseGroup.getLabel());  } else {    tfSynapseGroupLabel.setText("Synapse group");  }}  }
class C{  private void addParam(List<NameValue> params,String name,Object value){  params.add(new NameValue(name,value == null ? null : String.valueOf(value)));}  }
class C{  public Role build(){  return role;}  }
class C{  public void clear(){  QUEUE.get().clear();}  }
class C{  public static void main(String[] args){  runDataGenerator(new LED24(),args);}  }
class C{  public void requestLifetime(int lifetime) throws GSSException {  if (state == STATE_NEW && isInitiator())   this.lifetime=lifetime;}  }
class C{  public void testSingleFile() throws Exception {  JFlexMojo mojo=newMojo("single-file-test");  mojo.execute();  File produced=getExpectedOutputFile(mojo);  assertTrue("produced file is a file: " + produced,produced.isFile());  long size=produced.length();  boolean correctSize=(size > 26624) && (size < 36696);  assertTrue("size of produced file between 26k and 36k. Actual is " + size,correctSize);}  }
class C{  public static String format(String format,Object[] objs){  return org.apache.persistence.admin.Logger.format(format,objs);}  }
class C{  public TransactionWrapper(Transaction t,int channelId){  this.hash=t.getHashAsString();  this.channelId=channelId;  this.data=t.bitcoinSerialize();}  }
class C{  public SignatureVisitor visitInterface(){  return this;}  }
class C{  protected void clearDataLists(int obdService){switch (obdService) {case OBD_SVC_DATA:case OBD_SVC_FREEZEFRAME:    pidSupported.clear();  PidPvs.clear();break;case OBD_SVC_READ_CODES:case OBD_SVC_PENDINGCODES:case OBD_SVC_PERMACODES:tCodes.clear();break;case OBD_SVC_VEH_INFO:pidSupported.clear();VidPvs.clear();break;}}  }
class C{  public MenuIndicatorView(Context context){  super(context);  LayoutInflater.from(getContext()).inflate(R.layout.conv_list_item_behind,this,true);  firstDotView=ViewUtils.getView(this,R.id.v__row_conversation__menu_indicator__first_dot);  secondDotView=ViewUtils.getView(this,R.id.v__row_conversation__menu_indicator__second_dot);  int totalWidth=getResources().getDimensionPixelSize(R.dimen.conversation_list__left_icon_width);  int distanceDotsToContainerEdge=(totalWidth - 3 * getResources().getDimensionPixelSize(R.dimen.list__menu_indicator__dot__radius) - 2 * getResources().getDimensionPixelSize(R.dimen.list__menu_indicator__dot__horizontal_margin)) / 2;  defaultTranslateX=totalWidth - distanceDotsToContainerEdge;  firstDotAnimationOffsetX=getResources().getDimensionPixelSize(R.dimen.list__menu_indicator__dot__first_animation_offset_x);  secondDotAnimationOffsetX=getResources().getDimensionPixelSize(R.dimen.list__menu_indicator__dot__second_animation_offset_x);  firstDotView.setTranslationX(-firstDotAnimationOffsetX);  secondDotView.setTranslationX(-secondDotAnimationOffsetX);}  }
class C{  public Boolean isEmulatedDIXDIFEnabled(){  return emulatedDIXDIFEnabled;}  }
class C{  public static int dehexchar(char c){  if (c >= '0' && c <= '9') {    return c - '0';  }  if (c >= 'A' && c <= 'F') {    return c - ('A' - 10);  }  if (c >= 'a' && c <= 'f') {    return c - ('a' - 10);  }  return -1;}  }
class C{  public void clearGroupHistory(){  EMConversation conversation=EMClient.getInstance().chatManager().getConversation(room.getId(),EMConversationType.ChatRoom);  if (conversation != null) {    conversation.clearAllMessages();  }  Toast.makeText(this,R.string.messages_are_empty,0).show();}  }
class C{  public void addIntersection(LineIntersector li,int segmentIndex,int geomIndex,int intIndex){  Coordinate intPt=new Coordinate(li.getIntersection(intIndex));  int normalizedSegmentIndex=segmentIndex;  double dist=li.getEdgeDistance(geomIndex,intIndex);  int nextSegIndex=normalizedSegmentIndex + 1;  if (nextSegIndex < pts.length) {    Coordinate nextPt=pts[nextSegIndex];    if (intPt.equals2D(nextPt)) {      normalizedSegmentIndex=nextSegIndex;      dist=0.0;    }  }  EdgeIntersection ei=eiList.add(intPt,normalizedSegmentIndex,dist);}  }
class C{  public Permissions(){  permsMap=new HashMap<Class<?>,PermissionCollection>(11);  allPermission=null;}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  public MenuDragMouseEvent(Component source,int id,long when,int modifiers,int x,int y,int clickCount,boolean popupTrigger,MenuElement p[],MenuSelectionManager m){  super(source,id,when,modifiers,x,y,clickCount,popupTrigger);  path=p;  manager=m;}  }
class C{  public float distanceTo(AnimatableValue other){  AnimatableNumberValue o=(AnimatableNumberValue)other;  return Math.abs(value - o.value);}  }
class C{  protected final void fetchHeader() throws IOException {  final ByteBuffer cb=getCommBuffer();  cb.clear();  this.msgType=MessageType.INVALID;  int hdr=0;  final int headerLength=getHeaderLength();  if (this.sockCh != null) {    cb.limit(headerLength);    do {      int bytesRead=this.sockCh.read(cb);      if (bytesRead == -1) {        throw new EOFException(LocalizedStrings.Message_THE_CONNECTION_HAS_BEEN_RESET_WHILE_READING_THE_HEADER.toLocalizedString());      }      if (this.msgStats != null) {        this.msgStats.incReceivedBytes(bytesRead);      }    } while (cb.remaining() > 0);    cb.flip();  } else {    do {      int bytesRead=-1;      bytesRead=this.is.read(cb.array(),hdr,headerLength - hdr);      if (bytesRead == -1) {        throw new EOFException(LocalizedStrings.Message_THE_CONNECTION_HAS_BEEN_RESET_WHILE_READING_THE_HEADER.toLocalizedString());      }      hdr+=bytesRead;      if (this.msgStats != null) {        this.msgStats.incReceivedBytes(bytesRead);      }    } while (hdr < headerLength);    cb.rewind();  }}  }
class C{  public void testSyncFailedDialogAppearsWhenSyncFails(){  setWifiEnabled(false);  try (WifiDisabler wd=new WifiDisabler()){    waitForSyncFailure();    expectVisibleSoon(viewWithText(R.string.sync_failed_dialog_message));    expectVisible(viewWithText(R.string.sync_failed_settings));    expectVisible(viewWithText(R.string.sync_failed_retry));    click(viewWithText("Back"));  } }  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext context=transformer.getXPathContext();  if (transformer.currentFuncResultSeen()) {    throw new TransformerException("An EXSLT function cannot set more than one result!");  }  int sourceNode=context.getCurrentNode();  XObject var=getValue(transformer,sourceNode);  transformer.popCurrentFuncResult();  transformer.pushCurrentFuncResult(var);}  }
class C{  private void exchangeLocalLocators(int port,DistributionConfigImpl config,LocatorMembershipListener locatorListener,final String hostnameForClients){  String localLocator=config.getStartLocator();  DistributionLocatorId locatorId=null;  if (localLocator.equals(DistributionConfig.DEFAULT_START_LOCATOR)) {    locatorId=new DistributionLocatorId(port,config.getBindAddress(),hostnameForClients);  } else {    locatorId=new DistributionLocatorId(localLocator);  }  LocatorHelper.addLocator(config.getDistributedSystemId(),locatorId,locatorListener,null);  RemoteLocatorJoinRequest request=buildRemoteDSJoinRequest(port,config,hostnameForClients);  StringTokenizer locatorsOnThisVM=new StringTokenizer(config.getLocators(),",");  while (locatorsOnThisVM.hasMoreTokens()) {    DistributionLocatorId localLocatorId=new DistributionLocatorId(locatorsOnThisVM.nextToken());    if (!locatorId.equals(localLocatorId)) {      LocatorDiscovery localDiscovery=new LocatorDiscovery(this,localLocatorId,request,locatorListener);      LocatorDiscovery.LocalLocatorDiscovery localLocatorDiscovery=localDiscovery.new LocalLocatorDiscovery();      this._executor.execute(localLocatorDiscovery);    }  }}  }
class C{  public DrawerBuilder withStickyFooterDivider(boolean stickyFooterDivider){  this.mStickyFooterDivider=stickyFooterDivider;  return this;}  }
class C{  public void parse(InputSource input) throws org.xml.sax.SAXException, IOException {  if (null == getParent()) {    XMLReader reader=null;    try {      javax.xml.parsers.SAXParserFactory factory=javax.xml.parsers.SAXParserFactory.newInstance();      factory.setNamespaceAware(true);      if (m_transformer.getStylesheet().isSecureProcessing()) {        try {          factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);        } catch (        org.xml.sax.SAXException se) {        }      }      javax.xml.parsers.SAXParser jaxpParser=factory.newSAXParser();      reader=jaxpParser.getXMLReader();    } catch (    javax.xml.parsers.ParserConfigurationException ex) {      throw new org.xml.sax.SAXException(ex);    }catch (    javax.xml.parsers.FactoryConfigurationError ex1) {      throw new org.xml.sax.SAXException(ex1.toString());    }catch (    NoSuchMethodError ex2) {    }catch (    AbstractMethodError ame) {    }    XMLReader parent;    if (reader == null)     parent=XMLReaderFactory.createXMLReader(); else     parent=reader;    try {      parent.setFeature("http://xml.org/sax/features/namespace-prefixes",true);    } catch (    org.xml.sax.SAXException se) {    }    setParent(parent);  } else {    setupParse();  }  if (null == m_transformer.getContentHandler()) {    throw new org.xml.sax.SAXException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_CALL_PARSE,null));  }  getParent().parse(input);  Exception e=m_transformer.getExceptionThrown();  if (null != e) {    if (e instanceof org.xml.sax.SAXException)     throw (org.xml.sax.SAXException)e; else     throw new org.xml.sax.SAXException(e);  }}  }
class C{  public String toStringRanking(){  String result;  int[] ranking;  int i;  int curr;  if (m_RankingWins == null)   return "-ranking data not set-";  result="<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n";  result+="   <tr>" + "<td align=\"center\"><b>&gt;-&lt;</b></td>" + "<td align=\"center\"><b>&gt;</b></td>"+ "<td align=\"center\"><b>&lt;</b></td>"+ "<td><b>Resultset</b></td>"+ "</tr>\n";  ranking=Utils.sort(m_RankingDiff);  for (i=getColCount() - 1; i >= 0; i--) {    curr=ranking[i];    if (getColHidden(curr))     continue;    result+="   <tr>" + "<td align=\"right\">" + m_RankingDiff[curr] + "</td>"+ "<td align=\"right\">"+ m_RankingWins[curr]+ "</td>"+ "<td align=\"right\">"+ m_RankingLosses[curr]+ "</td>"+ "<td>"+ removeFilterName(m_ColNames[curr])+ "</td>"+ "<tr>\n";  }  result+="</table>\n";  return result;}  }
class C{  private void featureScaleCheck(Vec[] featureVals,int m) throws FailedToFitException {  if (reScale)   for (int j=0; j < featureVals.length; j++) {    if (obvMin[j] == 0 && minScaled == 0) {      featureVals[j].mutableMultiply(maxScaled / obvMax[j]);    } else {      featureVals[j].mutableSubtract(obvMin[j]);      featureVals[j].mutableMultiply((maxScaled - minScaled) / (obvMax[j] - obvMin[j]));      featureVals[j].mutableAdd(minScaled);    }    if (featureVals[j].isSparse() && featureVals[j].nnz() > m * 0.75)     featureVals[j]=new DenseVector(featureVals[j]);  } else   for (int j=0; j < obvMin.length; j++)   if (obvMax[j] > 1 || obvMin[j] < -1)   throw new FailedToFitException("All feature values must be in the range [-1,1]");}  }
class C{  public void render(Graphics g){}  }
class C{  public Object[] fetchConverted() throws KeyGenException {  if (null != currentConveretedRawRow) {    return currentConveretedRawRow;  }  if (hasNext()) {    Object[] rawRow=batch.getRawRow(counter);    currentConveretedRawRow=convertRow(rawRow);    ;    return currentConveretedRawRow;  } else {    return null;  }}  }
class C{  @Nullable private void hackPopToAnim(Fragment targetFragment,SupportFragment fromFragment){  if (targetFragment != null) {    View view=targetFragment.getView();    handlePopAnim(fromFragment,view,null);  }}  }
class C{  public void addCard(Card card,boolean show){  addCard(card);  if (show) {    showCard(card.getTag());  }}  }
class C{  public String write(){  StringWriter sw=new StringWriter();  try {    write(sw);  } catch (  IOException e) {    throw new RuntimeException(e);  }  return sw.toString();}  }
class C{  private void subscribeRequest(SubscribeToChannel sub){  store.subscribe(handle,Encoding.channelID(sub.getChannelID()),sub.getStartOffset());}  }
class C{  public Object reconstitute(){  Image img=Toolkit.getDefaultToolkit().createImage(new URLImageSource(url));  return img;}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  public boolean shouldExecute(){  if (pathableMob.getEntity().getAttackTarget() != null) {    return false;  } else   if (pathableMob.getCurrentTarget() != null) {    if (!pathableMob.getEntity().getNavigator().noPath()) {      return true;    }    if (pathableMob.isNearTarget(pathableMob.getCurrentTarget())) {      pathableMob.onTargetReached(pathableMob.getCurrentTarget());    } else {      if (!pathableMob.getEntity().getNavigator().tryMoveToXYZ(pathableMob.getCurrentTarget().xCoord,pathableMob.getCurrentTarget().yCoord,pathableMob.getCurrentTarget().zCoord,this.movementSpeed)) {        Vec3d vec3=RandomPositionGenerator.findRandomTargetBlockTowards(pathableMob.getEntity(),8,2,pathableMob.getCurrentTarget());        if (vec3 == null) {          return false;        } else {          this.movePosX=vec3.xCoord;          this.movePosY=vec3.yCoord;          this.movePosZ=vec3.zCoord;          pathableMob.getEntity().getNavigator().tryMoveToXYZ(this.movePosX,this.movePosY,this.movePosZ,this.movementSpeed);          return true;        }      } else {        return true;      }    }  }  return false;}  }
class C{  private static Class<?> readClass(DataInput di) throws IOException {  int len=di.readInt();  byte[] bytes=new byte[len];  di.readFully(bytes);  String className=new String(bytes);  Class<?> result=null;  try {    result=InternalDataSerializer.getCachedClass(className);  } catch (  ClassNotFoundException ignore) {  }  return result;}  }
class C{  protected void initContextBootstrap(@NotNull DBRProgressMonitor monitor,boolean autoCommit) throws DBCException {  QMUtils.getDefaultHandler().handleContextOpen(this,!autoCommit);  DBPConnectionBootstrap bootstrap=dataSource.getContainer().getConnectionConfiguration().getBootstrap();  List<String> initQueries=bootstrap.getInitQueries();  if (!CommonUtils.isEmpty(initQueries)) {    try (DBCSession session=openSession(monitor,DBCExecutionPurpose.UTIL,"Run bootstrap queries")){      for (      String query : initQueries) {        try {          try (DBCStatement dbStat=session.prepareStatement(DBCStatementType.QUERY,query,false,false,false)){            dbStat.executeStatement();          }         } catch (        Exception e) {          String message="Error executing bootstrap query: " + query;          if (bootstrap.isIgnoreErrors()) {            log.warn(message);          } else {            throw new DBCException(message,e,dataSource);          }        }      }    }   }}  }
class C{  private void handleUserAgent(ParseState state,RobotToken token){  if (state.isMatchedRealName()) {    if (state.isFinishedAgentFields()) {      state.setSkipAgents(true);    }    return;  }  if (state.isFinishedAgentFields()) {    state.setFinishedAgentFields(false);    state.setAddingRules(false);  }  String[] targetNames=state.getTargetName().toLowerCase(Locale.getDefault()).split(",");  for (int count=0; count < targetNames.length; count++) {    String[] targetNameSplits=targetNames[count].trim().split(" ");    String[] agentNames=token.getData().split("[ \t,]");    for (    String agentName : agentNames) {      agentName=agentName.trim().toLowerCase(Locale.getDefault());      if (agentName.isEmpty()) {      } else       if (agentName.equals("*") && !state.isMatchedWildcard()) {        state.setMatchedWildcard(true);        state.setAddingRules(true);      } else {        for (        String targetName : targetNameSplits) {          if (targetName.startsWith(agentName)) {            state.setMatchedRealName(true);            state.setAddingRules(true);            state.clearRules();            break;          }        }      }    }  }}  }
class C{  public SVGCircleElementBridge(){}  }
class C{  public void test_DELETE_accessPath_delete_all() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,null,null);  assertEquals(7,mutationResult);}  }
class C{  public void testPreferredUnits_metric(){  testPreferredUnits(R.string.unit_kilometer);}  }
class C{  public final void removeCallbacksAndMessages(Object token){  mExec.removeCallbacksAndMessages(token);}  }
class C{  @Override public boolean truncate(String fileName,long validDataEndOffset){  FileChannel source=null;  FileChannel destination=null;  boolean fileTruncatedSuccessfully=false;  String tempWriteFilePath=fileName + CarbonCommonConstants.TEMPWRITEFILEEXTENSION;  FileFactory.FileType fileType=FileFactory.getFileType(fileName);  try {    CarbonFile tempFile=null;    if (FileFactory.isFileExist(tempWriteFilePath,fileType)) {      tempFile=FileFactory.getCarbonFile(tempWriteFilePath,fileType);      tempFile.delete();    }    FileFactory.createNewFile(tempWriteFilePath,fileType);    tempFile=FileFactory.getCarbonFile(tempWriteFilePath,fileType);    source=new FileInputStream(fileName).getChannel();    destination=new FileOutputStream(tempWriteFilePath).getChannel();    long read=destination.transferFrom(source,0,validDataEndOffset);    long totalBytesRead=read;    long remaining=validDataEndOffset - totalBytesRead;    while (remaining > 0) {      read=destination.transferFrom(source,totalBytesRead,remaining);      totalBytesRead=totalBytesRead + read;      remaining=remaining - totalBytesRead;    }    CarbonUtil.closeStreams(source,destination);    tempFile.renameForce(fileName);    fileTruncatedSuccessfully=true;  } catch (  IOException e) {    LOGGER.error("Exception occured while truncating the file " + e.getMessage());  } finally {    CarbonUtil.closeStreams(source,destination);  }  return fileTruncatedSuccessfully;}  }
class C{  public void testDeleteFromIndexWriter() throws Exception {  boolean doFullMerge=true;  Directory dir1=getAssertNoDeletesDirectory(newDirectory());  IndexWriter writer=new IndexWriter(dir1,newIndexWriterConfig(new MockAnalyzer(random())));  createIndexNoClose(!doFullMerge,"index1",writer);  writer.flush(false,true);  IndexReader r1=writer.getReader();  String id10=r1.document(10).getField("id").stringValue();  writer.deleteDocuments(new Term("id",id10));  IndexReader r2=writer.getReader();  assertEquals(1,count(new Term("id",id10),r1));  assertEquals(0,count(new Term("id",id10),r2));  String id50=r1.document(50).getField("id").stringValue();  assertEquals(1,count(new Term("id",id50),r1));  writer.deleteDocuments(new Term("id",id50));  IndexReader r3=writer.getReader();  assertEquals(0,count(new Term("id",id10),r3));  assertEquals(0,count(new Term("id",id50),r3));  String id75=r1.document(75).getField("id").stringValue();  writer.deleteDocuments(new TermQuery(new Term("id",id75)));  IndexReader r4=writer.getReader();  assertEquals(1,count(new Term("id",id75),r3));  assertEquals(0,count(new Term("id",id75),r4));  r1.close();  r2.close();  r3.close();  r4.close();  writer.close();  writer=new IndexWriter(dir1,newIndexWriterConfig(new MockAnalyzer(random())));  IndexReader w2r1=writer.getReader();  assertEquals(0,count(new Term("id",id10),w2r1));  w2r1.close();  writer.close();  dir1.close();}  }
class C{  public static double[] toDoubleArray(boolean[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? 1 : 0;  }  return result;}  }
class C{  public static RefactoringStatus createStatus(int severity,String msg,RefactoringStatusContext context,String pluginId,int code,Object data){  RefactoringStatus result=new RefactoringStatus();  result.fEntries.add(new RefactoringStatusEntry(severity,msg,context,pluginId,code,data));  result.fSeverity=severity;  return result;}  }
class C{  public void validate(){  for (  Object o : map.values()) {    if (o instanceof Expression) {      Expression expr=(Expression)o;      try {        expr.getValueSource(this);      } catch (      StackOverflowError e) {        throw new IllegalArgumentException("Recursion Error: Cycle detected originating in (" + expr.sourceText + ")");      }    }  }}  }
class C{  public LinkedStructSet(){}  }
class C{  public void add(E e){  throw new UnsupportedOperationException();}  }
class C{  public void onTrafficToggled(View view){  updateTraffic();}  }
class C{  @Override public void notifyError(final String message){  final String displayMessage=LocalizeHTML.localizeImgLinksInHTML(message);  if (messageAndDialogThreadPool == null) {    return;  }  messageAndDialogThreadPool.runTask(null);}  }
class C{  public void rightTrim(double second){  trim(0,second);}  }
class C{  public Label(){  this("");  endsWith3Points=UIManager.getInstance().getLookAndFeel().isDefaultEndsWith3Points();}  }
class C{  public RunnerInitiator(boolean enableOutput,boolean outputToFile,String inputFolder,String outputFolder,String vmAllocationPolicy,String containerAllocationPolicy,String vmSelectionPolicy,String containerSelectionPolicy,String hostSelectionPolicy,double overBookingFactor,String runTime,String logAddress){  super(enableOutput,outputToFile,inputFolder,outputFolder,vmAllocationPolicy,containerAllocationPolicy,vmSelectionPolicy,containerSelectionPolicy,hostSelectionPolicy,overBookingFactor,runTime,logAddress);}  }
class C{  private Node extent(){  if (next() != null && line().startsWith(NodeType.SVOL.getMatch())) {    return svol();  }  return null;}  }
class C{  public IsNotCharacterNameValidator(final String username){  this.username=username;}  }
class C{  public void clearCache(){  classToAccessMap.clear();}  }
class C{  DLockStopper(DM dm,DLockService dls){  Assert.assertTrue(dls != null);  this.dls=dls;  Assert.assertTrue(dls.getDistributionManager() != null);}  }
class C{  @Override public void flush() throws IOException {  _flushWorker.wake();}  }
class C{  @SuppressWarnings("unchecked") public void writeBinaryStream(java.io.InputStream x) throws SQLException {  BufferedReader bufReader=new BufferedReader(new InputStreamReader(x));  try {    int i;    while ((i=bufReader.read()) != -1) {      char ch=(char)i;      StringBuffer strBuf=new StringBuffer();      strBuf.append(ch);      String str=new String(strBuf);      String strLine=bufReader.readLine();      writeString(str.concat(strLine));    }  } catch (  IOException ioe) {    throw new SQLException(ioe.getMessage());  }}  }
class C{  private RuleFactory(){  super();}  }
class C{  public void testInsert4() throws SQLException {  DatabaseCreator.fillSimpleTable1(conn);  statement.execute("INSERT INTO " + DatabaseCreator.SIMPLE_TABLE2 + " SELECT id, speed*10 AS speed, size-1 AS size FROM "+ DatabaseCreator.SIMPLE_TABLE1);  ResultSet r=statement.executeQuery("SELECT COUNT(*) FROM " + DatabaseCreator.SIMPLE_TABLE2 + " AS a JOIN "+ DatabaseCreator.SIMPLE_TABLE1+ " AS b ON a.speed = 10*b.speed AND a.size = b.size-1");  r.next();  assertEquals("Should be 2 rows",2,r.getInt(1));  r.close();}  }
class C{  private void compareSurrogateKeyData(List<String> data,Dictionary reverseDictionary){  int surrogateKey=0;  for (int i=0; i < data.size(); i++) {    surrogateKey++;    assertTrue(surrogateKey == reverseDictionary.getSurrogateKey(data.get(i)));  }}  }
class C{  protected static URL appendUrlPath(URL url,String append) throws MalformedURLException {  return new URL(url.getProtocol() + "://" + url.getAuthority()+ url.getPath()+ append+ (url.getQuery() != null ? "?" + url.getQuery() : ""));}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.FUNCTION_DECLARATION__DECLARED_MODIFIERS:      return N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS;default :    return -1;}}if (baseClass == Statement.class) {switch (derivedFeatureID) {default :  return -1;}}if (baseClass == VariableEnvironmentElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == ThisArgProvider.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == FunctionOrFieldAccessor.class) {switch (derivedFeatureID) {case N4JSPackage.FUNCTION_DECLARATION__BODY:return N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__BODY;case N4JSPackage.FUNCTION_DECLARATION__LOK:return N4JSPackage.FUNCTION_OR_FIELD_ACCESSOR__LOK;default :return -1;}}if (baseClass == TypeDefiningElement.class) {switch (derivedFeatureID) {case N4JSPackage.FUNCTION_DECLARATION__DEFINED_TYPE:return N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE;default :return -1;}}if (baseClass == FunctionDefinition.class) {switch (derivedFeatureID) {case N4JSPackage.FUNCTION_DECLARATION__FPARS:return N4JSPackage.FUNCTION_DEFINITION__FPARS;case N4JSPackage.FUNCTION_DECLARATION__RETURN_TYPE_REF:return N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF;case N4JSPackage.FUNCTION_DECLARATION__GENERATOR:return N4JSPackage.FUNCTION_DEFINITION__GENERATOR;case N4JSPackage.FUNCTION_DECLARATION__DECLARED_ASYNC:return N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC;default :return -1;}}if (baseClass == GenericDeclaration.class) {switch (derivedFeatureID) {case N4JSPackage.FUNCTION_DECLARATION__TYPE_VARS:return N4JSPackage.GENERIC_DECLARATION__TYPE_VARS;default :return -1;}}if (baseClass == ExportableElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public CurrencyException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:28.241 -0400",hash_original_method="8DBC82D807C057002CD279E8BB9BECD7",hash_generated_method="9CD524E88F90C06716B6B893E2EE6975") public JCAProvider(Map<String,Class<? extends SaslClientFactory>> providerMap){  super("AMQSASLProvider",1.0,"A JCA provider that registers all " + "AMQ SASL providers that want to be registered");  register(providerMap);}  }
class C{  private Ref divMultiOp() throws PageException {  Ref ref=expoOp();  while (!cfml.isLast()) {    if (cfml.forwardIfCurrent('*')) {      ref=_multi(ref);    } else     if (cfml.isCurrent('/') && (!cfml.isCurrent("/>"))) {      cfml.next();      ref=_div(ref);    } else     if (cfml.isCurrent('\\')) {      cfml.next();      ref=_intdiv(ref);    } else {      break;    }  }  return ref;}  }
class C{  public final CC minHeight(String size){  ver.setSize(LayoutUtil.derive(ver.getSize(),ConstraintParser.parseUnitValue(size,false),null,null));  return this;}  }
class C{  public void registerContainerForCleanup(String containerId,String imageName){  registeredContainers.put(containerId,imageName);}  }
class C{  private void processCharacter(StringBuilder sb,char nextChar){  if (escapechar != NO_ESCAPE_CHARACTER && (nextChar == quotechar || nextChar == escapechar)) {    sb.append(escapechar).append(nextChar);  } else {    sb.append(nextChar);  }}  }
class C{  public static boolean isStatusCompleted(int status){  return (status >= 200 && status < 300) || (status >= 400 && status < 600);}  }
class C{  private static MavenInformation parseMavenCoordinates(final Map<MetaKey,String> metaData,final ArtifactInformation refArtifact){  try {    final MavenInformation info=new MavenInformation();    MetaKeys.bind(info,metaData);    if (info.getGroupId() == null || info.getArtifactId() == null || info.getVersion() == null) {      return null;    }    if (refArtifact != null) {      final String ext=FilenameUtils.getExtension(refArtifact.getName());      info.setExtension(ext);    }    return info;  } catch (  final Exception e) {    logger.debug("Failed to parse maven coordinates",e);    return null;  }}  }
class C{  public List<NamedRelatedResourceRep> listByVCenter(URI vCenterId){  return getList(PathConstants.CLUSTER_BY_VCENTER_URL,vCenterId);}  }
class C{  public SprogSlot slot(int i){  return slots.get(i);}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (null != m_resultDTDHandler)   m_resultDTDHandler.notationDecl(name,publicId,systemId);}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar){  this(reader,separator,quotechar,DEFAULT_SKIP_LINES);}  }
class C{  public static boolean handleAsPrimType(Type type){  if (type instanceof RefType) {    return SootUtils.isStringOrSimilarType(type) || type.equals(RefType.v("java.lang.Class"));  } else   if (type instanceof PrimType) {    return true;  } else   return false;}  }
class C{  public XhtmlFrameSetDocument appendTitle(Element value){  title.addElement(value);  return (this);}  }
class C{  public static void e(String msg,Throwable thr){  if (DEBUG)   Log.e(TAG,buildMessage(msg),thr);}  }
