class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  if (m_InfoGains == null) {    text.append("Information Gain attribute evaluator has not been built");  } else {    text.append("\tInformation Gain Ranking Filter");    if (!m_missing_merge) {      text.append("\n\tMissing values treated as seperate");    }    if (m_Binarize) {      text.append("\n\tNumeric attributes are just binarized");    }  }  text.append("\n");  return text.toString();}  }
class C{  public Reference addReference(final Address address,final ReferenceType type) throws CouldntSaveDataException {  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  Preconditions.checkNotNull(type,"Error: Type argument can not be null");  try {    final CReference reference=new CReference(new CAddress(address.toLong()),type.getNative());    m_node.addReference(reference);    return ObjectFinders.getObject(reference,m_references);  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  private synchronized void startUpdateThread(){  if (screenUpdater == null) {    screenUpdater=AccessController.doPrivileged((PrivilegedAction<Thread>)null);    screenUpdater.start();  } else {    wakeUpUpdateThread();  }}  }
class C{  private void calculateArcMetrics(Rect bounds){  float size=Math.min(bounds.height(),bounds.width());  float yOffset=(bounds.height() - size) / 2f;  float xOffset=(bounds.width() - size) / 2f;  float strokeWidth;  float padding;  if (mArcStrokeWidth == -1f && mArcPadding == -1f) {    strokeWidth=4f / 48f * size;    padding=5f / 48f * size;  } else   if (mArcStrokeWidth == -1f) {    strokeWidth=4f / 48f * size;    padding=mArcPadding + strokeWidth / 2;  } else   if (mArcPadding == -1f) {    strokeWidth=mArcStrokeWidth;    padding=3f / 48f * size + strokeWidth / 2;  } else {    strokeWidth=mArcStrokeWidth;    padding=mArcPadding + strokeWidth / 2;  }  mArcPaint.setStrokeWidth(strokeWidth);  mArcRect.set(bounds.left + padding + xOffset,bounds.top + padding + yOffset,bounds.right - padding - xOffset,bounds.bottom - padding - yOffset);}  }
class C{  public HashShortId(final Deserializer deserializer){  this(deserializer.readLong("hashShortId"));}  }
class C{  public StoppableNonReentrantLock(CancelCriterion stopper){  super(stopper);}  }
class C{  public void reset(){  m_next=0;}  }
class C{  public String expressionTipText(){  return "The expression to used for filtering the dataset.";}  }
class C{  public Stacking(int folds,Classifier aggregatingClassifier,Classifier... baseClassifiers){  this(folds,aggregatingClassifier,Arrays.asList(baseClassifiers));}  }
class C{  public SearchSourceBuilder internalBuilder(){  return sourceBuilder();}  }
class C{  private IResourceRuleFactory factoryFor(IResource destination){  IResourceRuleFactory fac=projectsToRules.get(destination.getFullPath().segment(0));  if (fac == null) {    if (!destination.getProject().isAccessible())     return defaultFactory;    fac=teamHook.getRuleFactory(destination.getProject());    projectsToRules.put(destination.getFullPath().segment(0),fac);  }  return fac;}  }
class C{  private void createBalanceLine(){  StringBuffer sb=new StringBuffer("INSERT INTO T_ReportStatement " + "(AD_PInstance_ID, Fact_Acct_ID, LevelNo," + "DateAcct, Name, Description,"+ "AmtAcctDr, AmtAcctCr, Balance, Qty) ");  sb.append("SELECT ").append(getAD_PInstance_ID()).append(",0,0,").append(DB.TO_DATE(p_DateAcct_From,true)).append(",").append(DB.TO_STRING(Msg.getMsg(Env.getCtx(),"BeginningBalance"))).append(",NULL," + "COALESCE(SUM(AmtAcctDr),0), COALESCE(SUM(AmtAcctCr),0), COALESCE(SUM(AmtAcctDr-AmtAcctCr),0), COALESCE(SUM(Qty),0) " + "FROM Fact_Acct "+ "WHERE ").append(m_parameterWhere).append(" AND TRUNC(DateAcct, 'DD') < ").append(DB.TO_DATE(p_DateAcct_From));  if (p_Account_ID > 0) {    m_acct=new MElementValue(getCtx(),p_Account_ID,get_TrxName());    if (!m_acct.isBalanceSheet()) {      MPeriod first=MPeriod.getFirstInYear(getCtx(),p_DateAcct_From,p_AD_Org_ID);      if (first != null)       sb.append(" AND TRUNC(DateAcct, 'DD') >= ").append(DB.TO_DATE(first.getStartDate())); else       log.log(Level.SEVERE,"First period not found");    }  }  int no=DB.executeUpdate(sb.toString(),get_TrxName());  log.fine("#" + no + " (Account_ID="+ p_Account_ID+ ")");  log.finest(sb.toString());}  }
class C{  public JoinMerger(DataMatrix left,DataMatrix right,int[] mergeOrder,Axis join) throws ScopeException {  super(left,right,mergeOrder);  this.join=join;  if (join != null) {    int i=0;    for (    AxisValues av : left.getAxes()) {      if (av.getAxis().equals(join)) {        hasJoinColumn=true;        joinIndex=i;        joinRight=new AxisValues(right.getAxes().get(joinIndex));        joinRight.setVisible(false);        break;      }      i++;    }  }}  }
class C{  protected final Button createActionButton(String name,Runnable action){  Button btn=FXGL.getUIFactory().newButton(name);  btn.setOnAction(null);  return btn;}  }
class C{  public void moveConnectionTo(Connection conn,WorkspacePoint newLocation,WorkspacePoint offset){  moveConnectionTo(conn,newLocation.x + offset.x,newLocation.y + offset.y);}  }
class C{  public void endReporting(){}  }
class C{  private static Type[] extractTypeArgumentsFrom(final Map<TypeVariable<?>,Type> mappings,final TypeVariable<?>[] variables){  final Type[] result=new Type[variables.length];  int index=0;  for (  final TypeVariable<?> var : variables) {    Validate.isTrue(mappings.containsKey(var),"missing argument mapping for %s",toString(var));    result[index++]=mappings.get(var);  }  return result;}  }
class C{  public long computeDurationHint(){  long duration=0;  final int count=mAnimations.size();  final ArrayList<Animation> animations=mAnimations;  for (int i=count - 1; i >= 0; --i) {    final long d=animations.get(i).computeDurationHint();    if (d > duration)     duration=d;  }  return duration;}  }
class C{  private void fetchStoragePoolTiers(StorageSystem system,String systemObjectID,AccessProfile accessProfile,HDSApiClient hdsApiClient) throws Exception {  List<Pool> journalPoolList=hdsApiClient.getStoragePoolsTierInfo(systemObjectID);  if (null != journalPoolList && !journalPoolList.isEmpty()) {    for (    Pool pool : journalPoolList) {      if (null != pool && pool.getTierControl() == 1) {        if (null != pool.getTiers() && !pool.getTiers().isEmpty()) {          processStoragePoolTiersInfo(system,pool);        } else {          _logger.debug("No storage tiers found on journal pool : {}",pool.getObjectID());        }      }    }  } else {    _logger.info("No Journal pools found on storage system {}",systemObjectID);  }}  }
class C{  public static Value local(Value val){  if (val != null && isLocal(val))   return val; else   return null;}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public static Vector2D create(Vector2D v){  return new Vector2D(v);}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  synchronized public void send(String data){  data=StringUtil.removeLinebreakCharacters(data);  irc.sent(data);  out.print(data + "\r\n");  out.flush();  activity();}  }
class C{  public void configureFrom(CacheServer other){  setPort(other.getPort());  setBindAddress(other.getBindAddress());  setHostnameForClients(other.getHostnameForClients());  setMaxConnections(other.getMaxConnections());  setMaxThreads(other.getMaxThreads());  setNotifyBySubscription(other.getNotifyBySubscription());  setSocketBufferSize(other.getSocketBufferSize());  setTcpNoDelay(other.getTcpNoDelay());  setMaximumTimeBetweenPings(other.getMaximumTimeBetweenPings());  setMaximumMessageCount(other.getMaximumMessageCount());  setMessageTimeToLive(other.getMessageTimeToLive());  setGroups(other.getGroups());  setLoadProbe(other.getLoadProbe());  setLoadPollInterval(other.getLoadPollInterval());  ClientSubscriptionConfig cscOther=other.getClientSubscriptionConfig();  ClientSubscriptionConfig cscThis=this.getClientSubscriptionConfig();  cscThis.setEvictionPolicy(cscOther.getEvictionPolicy());  cscThis.setCapacity(cscOther.getCapacity());  String diskStoreName=cscOther.getDiskStoreName();  if (diskStoreName != null) {    cscThis.setDiskStoreName(diskStoreName);  } else {    cscThis.setOverflowDirectory(cscOther.getOverflowDirectory());  }}  }
class C{  public void copyContent(){  if (!isPanelSelected()) {    return;  }  getCurrentPanel().copyContent();}  }
class C{  public int size(String group){  TupleSet tset=getGroup(group);  return (tset == null ? 0 : tset.getTupleCount());}  }
class C{  public void addFeature(int[] fIdxArray,float[] fValueArray){  idxList.addAll(Ints.asList(fIdxArray));  valList.addAll(Floats.asList(fValueArray));}  }
class C{  public void initWithText(String text,String fontname,float fontSize){  initWithText(text,calculateTextSize(text,fontname,fontSize),CCLabel.TextAlignment.CENTER,fontname,fontSize);}  }
class C{  public void addEndCap(int capstyle){  PDFChangeStrokeCmd sc=new PDFChangeStrokeCmd();  Cap cap=Paint.Cap.BUTT;switch (capstyle) {case 0:    cap=Paint.Cap.BUTT;  break;case 1:cap=Paint.Cap.ROUND;break;case 2:cap=Paint.Cap.SQUARE;break;}sc.setEndCap(cap);addCommand(sc);}  }
class C{  public BinaryNode<E> put(E value){  return put(root,value);}  }
class C{  protected void addAgent() throws Exception {  if (agent == null) {    int pSel=frame.getSelection().getIndex(EightPuzzleFrame.SEARCH_SEL);    Problem problem=new BidirectionalEightPuzzleProblem(env.getBoard());    Search search=SEARCH_ALGOS.get(pSel);    agent=new SearchAgent(problem,search);    env.addAgent(agent);  }}  }
class C{  public FBManagedConnectionFactory(GDSType gdsType){  this(gdsType,new FBConnectionProperties());}  }
class C{  public Paper(){  mHeight=LETTER_HEIGHT;  mWidth=LETTER_WIDTH;  mImageableArea=new Rectangle2D.Double(INCH,INCH,mWidth - 2 * INCH,mHeight - 2 * INCH);}  }
class C{  protected Node newNode(){  return new XBLOMXBLElement();}  }
class C{  public ImportCandidateHolder(@NotNull PsiElement importable,@NotNull PsiFileSystemItem file,@Nullable PyImportElement importElement,@Nullable QualifiedName path,@Nullable String asName){  myFile=file;  myImportable=importable;  myImportElement=importElement;  myPath=path;  myAsName=asName;  assert importElement != null || path != null;}  }
class C{  public SoftCache(int initialCapacity,float loadFactor){  hash=new HashMap(initialCapacity,loadFactor);}  }
class C{  public DateMidnight withDurationAdded(ReadableDuration durationToAdd,int scalar){  if (durationToAdd == null || scalar == 0) {    return this;  }  return withDurationAdded(durationToAdd.getMillis(),scalar);}  }
class C{  private void checkQualifier(XMethod xmethod,CFG cfg,TypeQualifierValue<?> typeQualifierValue,ForwardTypeQualifierDataflowFactory forwardDataflowFactory,BackwardTypeQualifierDataflowFactory backwardDataflowFactory,ValueNumberDataflow vnaDataflow) throws CheckedAnalysisException {  if (DEBUG) {    System.out.println("----------------------------------------------------------------------");    System.out.println("Checking type qualifier " + typeQualifierValue.toString() + " on method "+ xmethod.toString());    if (typeQualifierValue.isStrictQualifier()) {      System.out.println("  Strict type qualifier");    }    System.out.println("----------------------------------------------------------------------");  }  if (DEBUG_DATAFLOW) {    System.out.println("********* Valuenumber analysis *********");    DataflowCFGPrinter<ValueNumberFrame,ValueNumberAnalysis> p=new DataflowCFGPrinter<ValueNumberFrame,ValueNumberAnalysis>(vnaDataflow);    p.print(System.out);  }  ForwardTypeQualifierDataflow forwardDataflow=forwardDataflowFactory.getDataflow(typeQualifierValue);  if (DEBUG_DATAFLOW && (DEBUG_DATAFLOW_MODE.startsWith("forward") || "both".equals(DEBUG_DATAFLOW_MODE))) {    System.out.println("********* Forwards analysis *********");    DataflowCFGPrinter<TypeQualifierValueSet,ForwardTypeQualifierDataflowAnalysis> p=new DataflowCFGPrinter<TypeQualifierValueSet,ForwardTypeQualifierDataflowAnalysis>(forwardDataflow);    p.print(System.out);  }  BackwardTypeQualifierDataflow backwardDataflow=backwardDataflowFactory.getDataflow(typeQualifierValue);  if (DEBUG_DATAFLOW && (DEBUG_DATAFLOW_MODE.startsWith("backward") || "both".equals(DEBUG_DATAFLOW_MODE))) {    System.out.println("********* Backwards analysis *********");    DataflowCFGPrinter<TypeQualifierValueSet,BackwardTypeQualifierDataflowAnalysis> p=new DataflowCFGPrinter<TypeQualifierValueSet,BackwardTypeQualifierDataflowAnalysis>(backwardDataflow);    p.print(System.out);  }  checkDataflow(xmethod,cfg,typeQualifierValue,vnaDataflow,forwardDataflow,backwardDataflow);  checkValueSources(xmethod,cfg,typeQualifierValue,vnaDataflow,forwardDataflow,backwardDataflow);}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void EndRead(){  this.numReaders--;  if (this.numReaders == 0) {    this.notifyAll();  }}  }
class C{  private static Identity parse(final JsonObject json){  final String fname="firstName";  final String lname="lastName";  final String unknown="?";  final Map<String,String> props=new HashMap<>(json.size());  props.put(fname,json.getString(fname,unknown));  props.put(lname,json.getString(lname,unknown));  return new Identity.Simple(String.format("urn:linkedin:%s",json.getString("id")),props);}  }
class C{  public AuthenticationException(String message){  super(message);}  }
class C{  public void removeLineHighlight(Object tag){  if (tag instanceof LineHighlightInfo) {    lineHighlights.remove(tag);    repaintLine((LineHighlightInfo)tag);  }}  }
class C{  @Override public synchronized Object appendEL(Object o){  if (offset + size + 1 > arr.length)   enlargeCapacity(size + 1);  arr[offset + size]=o;  size++;  return o;}  }
class C{  public void write(ExceptionlessOutputStream out){  out.writeInt(size);  for (int i=0; i < size; ++i)   out.writeInt(vector[i]);}  }
class C{  public Statement createStatement() throws SQLException {  return createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY,resultSetHoldability);}  }
class C{  public static boolean platformSupportsModPoll(){  return System.getProperty("os.name").matches("(?i)(Windows|Linux).*");}  }
class C{  @Override public String latitude(Angle angle){  if (angle == null) {    String msg=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.isShowDMS()) {    double[] dms=angle.toDMS();    return String.format("%02.0f%02.0f%04.1f%s",Math.abs(dms[0]),dms[1],dms[2],dms[0] < 0 ? "S" : "N");  } else {    return super.latitude(angle);  }}  }
class C{  public static String formatColon(long time){  if (time == Constants.CRAPPY_INFINITY_AS_INT || time >= Constants.CRAPPY_INFINITE_AS_LONG)   return Constants.INFINITY_STRING;  if (time < 0)   return "";  int secs=(int)time % 60;  int mins=(int)(time / 60) % 60;  int hours=(int)(time / 3600) % 24;  int days=(int)(time / 86400) % 365;  int years=(int)(time / 31536000);  String result="";  if (years > 0)   result+=years + "y ";  if (years > 0 || days > 0)   result+=days + "d ";  result+=twoDigits(hours) + ":" + twoDigits(mins)+ ":"+ twoDigits(secs);  return result;}  }
class C{  public static TXCommitMessage combine(Set<TXCommitMessage> msgSet){  assert msgSet != null;  TXCommitMessage firstPart=null;  Iterator<TXCommitMessage> it=msgSet.iterator();  while (it.hasNext()) {    if (firstPart == null) {      firstPart=it.next();      continue;    }    firstPart.combine(it.next());  }  return firstPart;}  }
class C{  private void onCheckoutCreated(Checkout checkout){  startActivity(new Intent(ProductListActivity.this,DiscountActivity.class));}  }
class C{  public String index(){  return index;}  }
class C{  public Writer asWriter(){  return new StrBuilderWriter();}  }
class C{  public void actionPerformed(ActionEvent ae){  if (!animator.isRunning()) {    this.setText("Stop Animation");    animator.start();  } else {    animator.stop();    this.setText("Start Animation");    alpha=1.0f;  }}  }
class C{  public boolean match(MemberValuePair node,Object other){  if (!(other instanceof MemberValuePair)) {    return false;  }  MemberValuePair o=(MemberValuePair)other;  return (safeSubtreeMatch(node.getName(),o.getName()) && safeSubtreeMatch(node.getValue(),o.getValue()));}  }
class C{  void connect(int sourcePort,Target<P> target,Edge edge){  if (edge == null)   throw new NullPointerException();  Consumer<P> input=target.vertex.invocation.getInputs().get(target.port);  invocation.setTarget(sourcePort,input);  edges.set(sourcePort,edge);  invocation.setContext(sourcePort,new MyOutputContext(connectors.get(sourcePort)));}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  protected StringSetMap convertRolesToMap(List<RoleAssignmentEntry> entries){  StringSetMap assignments=new StringSetMap();  if (entries != null && !entries.isEmpty()) {    for (    RoleAssignmentEntry roleAssignment : entries) {      PermissionsKey key;      if (roleAssignment.getGroup() != null) {        key=new PermissionsKey(PermissionsKey.Type.GROUP,roleAssignment.getGroup());      } else       if (roleAssignment.getSubjectId() != null) {        key=new PermissionsKey(PermissionsKey.Type.SID,roleAssignment.getSubjectId());      } else {        continue;      }      for (      String role : roleAssignment.getRoles()) {        assignments.put(key.toString(),role);      }    }  }  return assignments;}  }
class C{  public Queue<Env<AttrContext>> attribute(Queue<Env<AttrContext>> envs){  ListBuffer<Env<AttrContext>> results=new ListBuffer<>();  while (!envs.isEmpty())   results.append(attribute(envs.remove()));  return stopIfError(CompileState.ATTR,results);}  }
class C{  public ChannelFuture connect(String host,int port) throws InterruptedException {  return connect(new InetSocketAddress(host,port));}  }
class C{  public void onEvent(Event e){  log.info("Cmd=" + e.getTarget().getId());  if (cmbDocType.equals(e.getTarget())) {    form.postQueryEvent();    return;  }  validate();}  }
class C{  public VariableDeclarationFragment newVariableDeclarationFragment(){  VariableDeclarationFragment result=new VariableDeclarationFragment(this);  return result;}  }
class C{  private Map<String,List<Request>> requests(final Request req) throws IOException {  final String header=new RqHeaders.Smart(req).single("Content-Type");  if (!new EnglishLowerCase(header).string().startsWith("multipart/form-data")) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("RqMtBase can only parse multipart/form-data, while Content-Type specifies a different type: \"%s\"",header));  }  final Matcher matcher=RqMtBase.BOUNDARY.matcher(header);  if (!matcher.matches()) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("boundary is not specified in Content-Type header: \"%s\"",header));  }  final ReadableByteChannel body=Channels.newChannel(this.stream);  if (body.read(this.buffer) < 0) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,"failed to read the request body");  }  final byte[] boundary=String.format("%s--%s",RqMtBase.CRLF,matcher.group(1)).getBytes(RqMtBase.ENCODING);  this.buffer.flip();  this.buffer.position(boundary.length - 2);  final Collection<Request> requests=new LinkedList<>();  while (this.buffer.hasRemaining()) {    final byte data=this.buffer.get();    if (data == '-') {      break;    }    this.buffer.position(this.buffer.position() + 1);    requests.add(this.make(boundary,body));  }  return RqMtBase.asMap(requests);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:57.371 -0500",hash_original_method="2D34A90DB159467DA6803B576AE47B5C",hash_generated_method="D2E47960A2EF00A2F4D85C7CB407FA92") public LayoutAnimationController(Animation animation,float delay){  mDelay=delay;  setAnimation(animation);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.ROOT__ROOTS:    return roots != null && !roots.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void e(String log,Throwable tr){  if (debug) {    String line=getFunctionName();    Log.e(tag,"{Thread:" + Thread.currentThread().getName() + "}"+ "["+ name+ line+ ":] "+ log+ "\n",tr);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SafeVarargs public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11,E e12,E... others){  Object[] array=new Object[12 + others.length];  array[0]=e1;  array[1]=e2;  array[2]=e3;  array[3]=e4;  array[4]=e5;  array[5]=e6;  array[6]=e7;  array[7]=e8;  array[8]=e9;  array[9]=e10;  array[10]=e11;  array[11]=e12;  System.arraycopy(others,0,array,12,others.length);  return construct(array);}  }
class C{  public GemFireException(){  super();}  }
class C{  public DefaultOffsets(){  this.populate();}  }
class C{  public boolean canDockWest(){  List constraints=dockPanel.getConstraints(getChildren());  return DockConstraint.canDockWest(constraints);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:11.202 -0500",hash_original_method="18267EA0A2027BF86F0A85466039921C",hash_generated_method="C96CA958F20C3743481DCCEA10551E2D") public static SslError verifyServerCertificates(byte[][] certChain,String domain,String authType) throws IOException {  if (certChain == null || certChain.length == 0) {    throw new IllegalArgumentException("bad certificate chain");  }  X509Certificate[] serverCertificates=new X509Certificate[certChain.length];  for (int i=0; i < certChain.length; ++i) {    serverCertificates[i]=new X509CertImpl(certChain[i]);  }  return verifyServerDomainAndCertificates(serverCertificates,domain,authType);}  }
class C{  @Override public void removeAcceptedOffer(Offer offer){  this.acceptedOffers.remove(offer);  dataAdapter.removeCardOffer(offer);}  }
class C{  protected void isCDATASectionWellFormed(CDATASection node){  Character invalidChar=isWFXMLChar(node.getData());  if (invalidChar != null) {    String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_CDATA,new Object[]{Integer.toHexString(Character.getNumericValue(invalidChar.charValue()))});    if (fErrorHandler != null) {      fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));    }  }}  }
class C{  public final static <T>Stream<T> optionalToStream(final Optional<T> optional){  if (optional.isPresent())   return Stream.of(optional.get());  return Stream.of();}  }
class C{  public <T extends OffsettedItem>T intern(T item){  throwIfPrepared();  OffsettedItem result=interns.get(item);  if (result != null) {    return (T)result;  }  add(item);  interns.put(item,item);  return item;}  }
class C{  public boolean loadLines(){  boolean result=false;  try {    m_parser.parse(new InputSource(m_reader),this);    result=true;    m_success=true;  } catch (  SAXException e) {    m_errorMessage="ErrorParsingData";    m_errorDescription=e.getMessage();  }catch (  IOException e) {    m_errorMessage="ErrorReadingData";    m_errorDescription=e.getMessage();  }  return result;}  }
class C{  public static FileSystemInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  FileSystemInfo object=new FileSystemInfo();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"FileSystemInfo".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (FileSystemInfo)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","fileServerName").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setFileServerName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","fileSystemPath").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setFileSystemPath(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","ipAddress").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setIpAddress(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public ForeignCallStub(HotSpotJVMCIRuntimeProvider runtime,HotSpotProviders providers,long address,ForeignCallDescriptor descriptor,boolean prependThread,Transition transition,boolean reexecutable,LocationIdentity... killedLocations){  super(providers,HotSpotForeignCallLinkageImpl.create(providers.getMetaAccess(),providers.getCodeCache(),providers.getWordTypes(),providers.getForeignCalls(),descriptor,0L,PRESERVES_REGISTERS,JavaCall,JavaCallee,transition,reexecutable,killedLocations));  this.jvmciRuntime=runtime;  this.prependThread=prependThread;  Class<?>[] targetParameterTypes=createTargetParameters(descriptor);  ForeignCallDescriptor targetSig=new ForeignCallDescriptor(descriptor.getName() + ":C",descriptor.getResultType(),targetParameterTypes);  target=HotSpotForeignCallLinkageImpl.create(providers.getMetaAccess(),providers.getCodeCache(),providers.getWordTypes(),providers.getForeignCalls(),targetSig,address,DESTROYS_REGISTERS,NativeCall,NativeCall,transition,reexecutable,killedLocations);}  }
class C{  private int javaSunTools(String[] args){  try {    Class<?> sun;    try {      sun=forName("com.sun.tools.javac.Main");    } catch (    ClassNotFoundException e) {      return -1;    }    Method method=sun.getMethod("compile",args.getClass());    logger.debug("invoke com.sun.tools.javac.Main#compile");    Object result=method.invoke(null,new Object[]{args});    return ((Number)result).intValue();  } catch (  InvocationTargetException e) {    logger.warn(e.toString());    return -1;  }catch (  IllegalArgumentException e) {    return -1;  }catch (  IllegalAccessException e) {    return -1;  }catch (  SecurityException e) {    return -1;  }catch (  NoSuchMethodException e) {    return -1;  }}  }
class C{  protected void clearEvents(){}  }
class C{  public void showPopupDialog(Rectangle rect){  if (getUIID().equals("Dialog")) {    setUIID("PopupDialog");    if (getTitleComponent().getUIID().equals("DialogTitle")) {      getTitleComponent().setUIID("PopupDialogTitle");    }    getContentPane().setUIID("PopupContentPane");  }  Component contentPane=getContentPane();  Label title=getTitleComponent();  UIManager manager=getUIManager();  String dialogTitle=title.getText();  if ((dialogTitle != null || dialogTitle.length() == 0) && manager.isThemeConstant("hideEmptyTitleBool",false)) {    boolean b=getTitle().length() > 0;    titleArea.setVisible(b);    getTitleComponent().setVisible(b);    if (!b && manager.isThemeConstant("shrinkPopupTitleBool",true)) {      getTitleComponent().setPreferredSize(new Dimension(0,0));      getTitleComponent().getStyle().setBorder(null);      titleArea.setPreferredSize(new Dimension(0,0));      if (getContentPane().getClientProperty("$ENLARGED_POP") == null) {        getContentPane().putClientProperty("$ENLARGED_POP",Boolean.TRUE);        int cpPaddingTop=getContentPane().getStyle().getPadding(TOP);        int titlePT=getTitleComponent().getStyle().getPadding(TOP);        byte[] pu=getContentPane().getStyle().getPaddingUnit();        if (pu == null) {          pu=new byte[4];        }        pu[0]=Style.UNIT_TYPE_PIXELS;        getContentPane().getStyle().setPaddingUnit(pu);        int pop=Display.getInstance().convertToPixels(manager.getThemeConstant("popupNoTitleAddPaddingInt",1),false);        getContentPane().getStyle().setPadding(TOP,pop + cpPaddingTop + titlePT);      }    }  }  revalidate();  Style contentPaneStyle=getStyle();  boolean restoreArrow=false;  if (manager.isThemeConstant(getUIID() + "ArrowBool",false)) {    Image t=manager.getThemeImageConstant(getUIID() + "ArrowTopImage");    Image b=manager.getThemeImageConstant(getUIID() + "ArrowBottomImage");    Image l=manager.getThemeImageConstant(getUIID() + "ArrowLeftImage");    Image r=manager.getThemeImageConstant(getUIID() + "ArrowRightImage");    Border border=contentPaneStyle.getBorder();    if (border != null) {      border.setImageBorderSpecialTile(t,b,l,r,rect);      restoreArrow=true;    }  }  calcPreferredSize();  int prefHeight=getPreferredH();  int prefWidth=getPreferredW();  if (contentPaneStyle.getBorder() != null) {    prefWidth=Math.max(contentPaneStyle.getBorder().getMinimumWidth(),prefWidth);    prefHeight=Math.max(contentPaneStyle.getBorder().getMinimumHeight(),prefHeight);  }  Form f=Display.getInstance().getCurrent();  int availableHeight=getLayeredPane(f).getParent().getHeight();  int availableWidth=getLayeredPane(f).getParent().getWidth();  int width=Math.min(availableWidth,prefWidth);  int x=0;  int y=0;  boolean showPortrait=Display.getInstance().isPortrait();  if (showPortrait) {    if (availableHeight < (availableWidth - rect.getWidth()) / 2) {      showPortrait=false;    }  } else {    if (availableHeight / 2 > availableWidth - rect.getWidth()) {      showPortrait=true;    }  }  if (showPortrait) {    if (width < availableWidth) {      int idealX=rect.getX() - width / 2 + rect.getSize().getWidth() / 2;      if (idealX > 0) {        if (idealX + width > availableWidth) {          x=availableWidth - width;        } else {          x=idealX;        }      }    }    if (rect.getY() < availableHeight / 2) {      y=rect.getY();      int height=Math.min(prefHeight,availableHeight - y);      show(y,Math.max(0,availableHeight - height - y),x,Math.max(0,availableWidth - width - x));    } else {      int height=Math.min(prefHeight,rect.getY() - getLayeredPane(f).getAbsoluteY());      y=rect.getY() - height - getLayeredPane(f).getAbsoluteY();      show(y,Math.max(0,getLayeredPane(f).getComponentForm().getHeight() - rect.getY()),x,Math.max(0,availableWidth - width - x));    }  } else {    int height=Math.min(prefHeight,availableHeight);    if (height < availableHeight) {      int idealY=rect.getY() - height / 2 + rect.getSize().getHeight() / 2;      if (idealY > 0) {        if (idealY + height > availableHeight) {          y=availableHeight - height;        } else {          y=idealY;        }      }    }    if (prefWidth > rect.getX()) {      x=rect.getX() + rect.getSize().getWidth();      if (x + prefWidth > availableWidth) {        x=availableWidth - prefWidth;      }      width=Math.min(prefWidth,availableWidth - x);      show(y,availableHeight - height - y,Math.max(0,x),Math.max(0,availableWidth - width - x));    } else {      width=Math.min(prefWidth,availableWidth - (availableWidth - rect.getX()));      x=rect.getX() - width;      show(y,availableHeight - height - y,Math.max(0,x),Math.max(0,availableWidth - width - x));    }  }}  }
class C{  public boolean intersects(int left,int top,int right,int bottom){  return this.left < right && left < this.right && this.top < bottom && top < this.bottom;}  }
class C{  @Override public void windowGainedFocus(WindowEvent e){  timer.stop();  if (windows.get(e.getWindow()) != null) {    app.setActiveView((View)windows.get(e.getWindow()));    showPalettes();  }}  }
class C{  public static OFGroup createMPLSL3VPNLabel(U32 index){  return OFGroup.of(0 | (index.getRaw() & 0x00ffFFff) | (MPLSSubType.MPLS_L3_VPN_LABEL << 24)| (OFDPAGroupType.MPLS_LABEL << 28));}  }
class C{  public InlineQueryResultArticle.InlineQueryResultArticleBuilder description(String description){  this.description=description;  return this;}  }
class C{  static public void assertNotNull(String message,Object object){  assertTrue(message,object != null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.216 -0500",hash_original_method="D12B7095CE782CB3A44759C6A99FDE49",hash_generated_method="95F67EF1AE8E8F4CFD78A7E29DCD7543") public static char highSurrogate(int codePoint){  return (char)((codePoint >> 10) + 0xd7c0);}  }
class C{  protected void fireProgressUpdate(int type,String task,int frameNumber,int totalFrames){  progressSupport.fireUpdate(type,task,totalFrames,frameNumber);}  }
class C{  @Ignore @Test public void testEmptyLocators(){  Properties props=new Properties();  props.put(MCAST_PORT,String.valueOf(0));  props.put(LOCATORS,"");  try {    createSystem(props);    fail("Should have thrown an IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }}  }
class C{  private static void convert(PcapDecoder decoder,FileOutputStream fos) throws IOException {  boolean headerWritten=false;  TimeUnit timeunit=null;  for (  IPcapngType section : decoder.getSectionList()) {    if (section instanceof IDescriptionBlock && !headerWritten) {      timeunit=convertDescriptionBlock(fos,(IDescriptionBlock)section);      headerWritten=true;    } else     if (section instanceof IEnhancedPacketBLock) {      convertPacket(fos,timeunit,(IEnhancedPacketBLock)section);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.110 -0500",hash_original_method="418DF30233826B8D5F2BA83471599105",hash_generated_method="D53850AD9234427781A798821AD9FA19") public static boolean equals(boolean[] array1,boolean[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.ARGUMENT__SPREAD:    setSpread((Boolean)newValue);  return;case N4JSPackage.ARGUMENT__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public ScalaSensor(Settings settings,FileSystem fileSystem,ResourcePerspectives resourcePerspectives){  this.settings=settings;  this.fileSystem=fileSystem;  this.resourcePerspectives=resourcePerspectives;}  }
class C{  public FilteredExperienceDelayHandler(final Scenario scenario,final int noOfTimeBins,final String userGroup,final PersonFilter personFilter,final AreaFilter areaFilter){  delegate=new ExperiencedDelayHandler(scenario,noOfTimeBins);  this.pf=personFilter;  this.userGroup=userGroup;  this.af=areaFilter;  this.network=scenario.getNetwork();  LOGGER.info("Area and user group filtering is used, links fall inside the given shape and belongs to the given user group will be considered.");}  }
class C{  private ModelNode[] nodesArray(){  return nodes.values().toArray(new ModelNode[nodes.size()]);}  }
class C{  ASCIIBits clear(String chars){  for (int i=0, n=chars.length(); i < n; ++i) {    char ch=chars.charAt(i);    if (ch < 64) {      _lowerMask&=~(1L << ch);    } else {      _upperMask&=~(1L << ch);    }  }  return this;}  }
class C{  public Promise<List<T>> zip(){  return zipPromise(null);}  }
class C{  public Tree<L> shallowCloneJustRoot(){  return new Tree<L>(label);}  }
class C{  public static <T>T max(T[] self,@ClosureParams(value=FromString.class,options={"T","T,T"}) Closure closure){  return max((Iterable<T>)toList(self),closure);}  }
class C{  public static void main(String[] args) throws Exception {  parseArguments(args);  String[] configs=new File(directory).list();  for (  String benchmarkdir : configs) {    String dir=directory + "/" + benchmarkdir;    File configsDir=new File(dir + "/config/");    String trainDirName=dir + "/train/";    File trainDir=new File(trainDirName);    String devDirName=dir + "/dev/";    File devDir=new File(devDirName);    String testDirName=dir + "/test/";    if (!new File(testDirName).exists())     testDirName=dir + "/train/";    if (configsDir.exists() && configsDir.isDirectory()) {      String[] configfiles=configsDir.list();      for (      String confFile : configfiles) {        confFile=dir + "/config/" + confFile;        if (!skiptraining) {          Parameters.readConfigAndLoadExternalData(confFile,!skiptraining);          if (!trainDir.exists()) {            System.out.print("Expected a training directory named " + trainDirName + ", but it is not there.");            System.exit(0);          }          System.out.println("----- Training up the model ------");          LearningCurveMultiDataset.getLearningCurve(-1,trainDirName,devDirName);          System.out.println("completed training against configuration : " + confFile);          System.out.println("\n\n\n\n----- Final Results, testing against test set ------");          NETesterMultiDataset.test(testDirName,true,ParametersForLbjCode.currentParameters.labelsToIgnoreInEvaluation,ParametersForLbjCode.currentParameters.labelsToAnonymizeInEvaluation);          System.out.println("\n\n----- Final Results, F1 only ------");          NETesterMultiDataset.test(testDirName,false,ParametersForLbjCode.currentParameters.labelsToIgnoreInEvaluation,ParametersForLbjCode.currentParameters.labelsToAnonymizeInEvaluation);        } else {          Parameters.readConfigAndLoadExternalData(confFile,!skiptraining);          System.out.println("Benchmark against configuration : " + confFile);          if (reportLabels)           NEDisplayPredictions.test(testDirName,"-c",verbose); else           if (reportFeatures)           NETesterMultiDataset.dumpFeaturesLabeledData(testDirName,output); else           NETesterMultiDataset.test(testDirName,verbose,ParametersForLbjCode.currentParameters.labelsToIgnoreInEvaluation,ParametersForLbjCode.currentParameters.labelsToAnonymizeInEvaluation);        }      }    }  }}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  @Override public int previous(){  CharacterIterator text=getText();  if (current() == text.getBeginIndex()) {    return BreakIterator.DONE;  }  int start=current();  int lastResult=cachedLastKnownBreak;  if (lastResult >= start || lastResult <= BreakIterator.DONE) {    getPrevious();    lastResult=handlePrevious();  } else {    text.setIndex(lastResult);  }  int result=lastResult;  while (result != BreakIterator.DONE && result < start) {    lastResult=result;    result=handleNext();  }  text.setIndex(lastResult);  cachedLastKnownBreak=lastResult;  return lastResult;}  }
class C{  public void testZeroPos(){  byte aBytes[]={0};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=0;  int bSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public SQLClientInfoException(String reason,String SQLState,Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(reason,SQLState);  initCause(cause);  this.failedProperties=failedProperties;}  }
class C{  @Override public final boolean enabled(){  return bookFile.canRead();}  }
class C{  public static String quoteIdentifier(String s){  int length=s.length();  StringBuilder buff=new StringBuilder(length + 2);  buff.append('\"');  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == '"') {      buff.append(c);    }    buff.append(c);  }  return buff.append('\"').toString();}  }
class C{  private Expression compileExpression(ClassLoader parent) throws ParseException {  final Map<String,Integer> externalsMap=new LinkedHashMap<>();  final ClassWriter classWriter=new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);  generateClass(getAntlrParseTree(),classWriter,externalsMap);  try {    final Class<? extends Expression> evaluatorClass=new Loader(parent).define(COMPILED_EXPRESSION_CLASS,classWriter.toByteArray());    final Constructor<? extends Expression> constructor=evaluatorClass.getConstructor(String.class,String[].class);    return constructor.newInstance(sourceText,externalsMap.keySet().toArray(new String[externalsMap.size()]));  } catch (  ReflectiveOperationException exception) {    throw new IllegalStateException("An internal error occurred attempting to compile the expression (" + sourceText + ").",exception);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JavaScriptException(Object value,String sourceName,int lineNumber){  recordErrorOrigin(sourceName,lineNumber,null,0);  this.value=value;  if (value instanceof NativeError && Context.getContext().hasFeature(Context.FEATURE_LOCATION_INFORMATION_IN_ERROR)) {    NativeError error=(NativeError)value;    if (!error.has("fileName",error)) {      error.put("fileName",error,sourceName);    }    if (!error.has("lineNumber",error)) {      error.put("lineNumber",error,Integer.valueOf(lineNumber));    }    error.setStackProvider(this);  }}  }
class C{  private void updateBusinessObjectDefinitionEntityDescriptiveInformation(BusinessObjectDefinitionEntity businessObjectDefinitionEntity,BusinessObjectDefinitionDescriptiveInformationUpdateRequest request){  businessObjectDefinitionEntity.setDescription(request.getDescription());  businessObjectDefinitionEntity.setDisplayName(request.getDisplayName());  businessObjectDefinitionDao.saveAndRefresh(businessObjectDefinitionEntity);}  }
class C{  public static String toVariableName(Object o) throws PageException {  String str=toString(o);  if (!Decision.isVariableName(str))   throw new ExpressionException("can't cast [" + str + "] to variable name value");  return str;}  }
class C{  private void checkValid(String authority) throws Exception {  FileSystem fs=fileSystem(authority,tcp);  assert fs.exists(new Path(PATH.toString()));}  }
class C{  protected void startAdditionalServices(final Cache cache,final Map<String,Object> options) throws Exception {}  }
class C{  public static String toHexString(byte[] array){  if (array == null) {    return null;  }  if (array.length == 0) {    return "[]";  }  StringBuilder sb=new StringBuilder();  sb.append('[');  sb.append(String.format("%02x",array[0] & 0xff));  for (int i=1; i < array.length; i++) {    sb.append(", ");    sb.append(String.format("%02x",array[i] & 0xff));  }  sb.append(']');  return sb.toString();}  }
class C{  public static MethodAnnotation fromForeignMethod(@SlashedClassName String className,String methodName,String methodSig,int accessFlags){  className=ClassName.toDottedClassName(className);  MethodAnnotation methodAnnotation=new MethodAnnotation(className,methodName,methodSig,(accessFlags & Constants.ACC_STATIC) != 0);  SourceLineAnnotation sourceLines=SourceLineAnnotation.getSourceAnnotationForMethod(className,methodName,methodSig);  methodAnnotation.setSourceLines(sourceLines);  return methodAnnotation;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void registerPeripheralProvider(IPeripheralProvider handler){  findCC();  if (computerCraft_registerPeripheralProvider != null) {    try {      computerCraft_registerPeripheralProvider.invoke(null,handler);    } catch (    Exception e) {    }  }}  }
class C{  public boolean isUseBias(){  return useBias;}  }
class C{  public void historicalDataComplete(Tradestrategy tradestrategy){}  }
class C{  private static double min(double d1,double d2){  if (Double.isNaN(d1)) {    return d2;  }  if (Double.isNaN(d2)) {    return d1;  }  return Math.min(d1,d2);}  }
class C{  public GlobeAnnotation(String text,Position position,Font font,Color textColor){  this.init(text,position,font,textColor);}  }
class C{  @RequestMapping(value="/{cubeName}/segs/{segmentName}",method={RequestMethod.DELETE}) @ResponseBody public CubeInstance deleteSegment(@PathVariable String cubeName,@PathVariable String segmentName){  CubeInstance cube=cubeService.getCubeManager().getCube(cubeName);  if (cube == null) {    throw new InternalErrorException("Cannot find cube " + cubeName);  }  CubeSegment segment=cube.getSegment(segmentName,null);  if (segment == null) {    throw new InternalErrorException("Cannot find segment '" + segmentName + "'");  }  try {    return cubeService.deleteSegment(cube,segmentName);  } catch (  Exception e) {    logger.error(e.getLocalizedMessage(),e);    throw new InternalErrorException(e.getLocalizedMessage());  }}  }
class C{  private void expandAffixes(){  StringBuffer buffer=new StringBuffer();  if (posPrefixPattern != null) {    positivePrefix=expandAffix(posPrefixPattern,buffer);    positivePrefixFieldPositions=null;  }  if (posSuffixPattern != null) {    positiveSuffix=expandAffix(posSuffixPattern,buffer);    positiveSuffixFieldPositions=null;  }  if (negPrefixPattern != null) {    negativePrefix=expandAffix(negPrefixPattern,buffer);    negativePrefixFieldPositions=null;  }  if (negSuffixPattern != null) {    negativeSuffix=expandAffix(negSuffixPattern,buffer);    negativeSuffixFieldPositions=null;  }}  }
class C{  private final void rehash(){  long min=this.count, max=0;  int[][] oldTable=this.table;  int oldCapacity=oldTable.length;  int[][] newTable=new int[oldCapacity * 2][];  final int onebitmask=oldCapacity;  for (int i=0; i < oldCapacity; i++) {    int[] list=oldTable[i];    if (list != null) {      int cnt0=0;      int cnt1=0;      int listlen=list.length;      if (listlen < min)       min=listlen;      if (listlen > max)       max=listlen;      for (int j=0; j < listlen; j+=3) {        if ((list[j + 1] & onebitmask) == 0)         cnt0+=3; else         cnt1+=3;      }      if (cnt0 == 0) {        newTable[i + oldCapacity]=list;      } else       if (cnt1 == 0) {        newTable[i]=list;      } else {        int[] list0=new int[cnt0];        int[] list1=new int[cnt1];        for (int j=0; j < listlen; j+=3) {          if ((list[j + 1] & onebitmask) == 0) {            list0[cnt0 - 3]=list[j];            list0[cnt0 - 2]=list[j + 1];            list0[cnt0 - 1]=list[j + 2];            cnt0-=3;          } else {            list1[cnt1 - 3]=list[j];            list1[cnt1 - 2]=list[j + 1];            list1[cnt1 - 1]=list[j + 2];            cnt1-=3;          }        }        newTable[i]=list0;        newTable[i + oldCapacity]=list1;      }    }  }  this.threshold*=2;  this.table=newTable;  this.mask=newTable.length - 1;}  }
class C{  @Override public void takeMultipleColumnFamilySnapshot(String tag,String... columnFamilyList) throws IOException {  Map<Keyspace,List<String>> keyspaceColumnfamily=new HashMap<Keyspace,List<String>>();  for (  String columnFamily : columnFamilyList) {    String splittedString[]=columnFamily.split("\\.");    if (splittedString.length == 2) {      String keyspaceName=splittedString[0];      String columnFamilyName=splittedString[1];      if (keyspaceName == null)       throw new IOException("You must supply a keyspace name");      if (operationMode.equals(Mode.JOINING))       throw new IOException("Cannot snapshot until bootstrap completes");      if (columnFamilyName == null)       throw new IOException("You must supply a column family name");      if (tag == null || tag.equals(""))       throw new IOException("You must supply a snapshot name.");      Keyspace keyspace=getValidKeyspace(keyspaceName);      ColumnFamilyStore columnFamilyStore=keyspace.getColumnFamilyStore(columnFamilyName);      if (columnFamilyStore.snapshotExists(tag))       throw new IOException("Snapshot " + tag + " already exists.");      if (!keyspaceColumnfamily.containsKey(keyspace)) {        keyspaceColumnfamily.put(keyspace,new ArrayList<String>());      }      keyspaceColumnfamily.get(keyspace).add(columnFamilyName);    } else {      throw new IllegalArgumentException("Cannot take a snapshot on secondary index or invalid column family name. You must supply a column family name in the form of keyspace.columnfamily");    }  }  for (  Entry<Keyspace,List<String>> entry : keyspaceColumnfamily.entrySet()) {    for (    String columnFamily : entry.getValue())     entry.getKey().snapshot(tag,columnFamily);  }}  }
class C{  protected void onProgressUpdate(String... progress){  pDialog.setProgress(Integer.parseInt(progress[0]));}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  public void addItem(final String title,final String image){  checkWidget();  this.items.add(new LauncherItem(title,image));  this.needRedraw=true;}  }
class C{  public SimpleBooleanProperty showProperty(){  return this.show;}  }
class C{  public void onAnimationRepeat(Animator animation){}  }
class C{  @Override public void start(Map<String,String> props){  if (cacheName != null)   return;  cacheName=props.get(IgniteSinkConstants.CACHE_NAME);  igniteConfigFile=props.get(IgniteSinkConstants.CACHE_CFG_PATH);  if (props.containsKey(IgniteSinkConstants.CACHE_ALLOW_OVERWRITE))   StreamerContext.getStreamer().allowOverwrite(Boolean.parseBoolean(props.get(IgniteSinkConstants.CACHE_ALLOW_OVERWRITE)));  if (props.containsKey(IgniteSinkConstants.CACHE_PER_NODE_DATA_SIZE))   StreamerContext.getStreamer().perNodeBufferSize(Integer.parseInt(props.get(IgniteSinkConstants.CACHE_PER_NODE_DATA_SIZE)));  if (props.containsKey(IgniteSinkConstants.CACHE_PER_NODE_PAR_OPS))   StreamerContext.getStreamer().perNodeParallelOperations(Integer.parseInt(props.get(IgniteSinkConstants.CACHE_PER_NODE_PAR_OPS)));  stopped=false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int hashCode(){  return getNameForComparisons().hashCode();}  }
class C{  private void logEventToCSV(String[] row){  try {    Log.i(TAG,row.toString());    String BENCHMARK_FILENAME="benchmarks.csv";    FileWriter file=new FileWriter(new File(getBenchmarkDataDir(),BENCHMARK_FILENAME));    CSVWriter writer=new CSVWriter(file,',','\'');    writer.writeNext(row);    file.close();    writer.close();  } catch (  IOException e) {    Log.e(TAG,"Failed to write to CSV: " + e);  }}  }
class C{  public ViewExpiredException(String viewId){  this.viewId=viewId;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  instence=this;  setContentView(R.layout.main);  initViews();}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  public AddSharedLibraryToDeployableScriptCommand(Configuration configuration,String resourcePath,Deployable deployable,String sharedLibraryPath){  super(configuration,resourcePath);  this.deployable=deployable;  this.sharedLibraryPath=sharedLibraryPath;}  }
class C{  public NSSet(){  set=new LinkedHashSet<NSObject>();}  }
class C{  public ContainerUndoState(IContainer container){  super(container);  this.name=container.getName();  if (container.isLinked()) {    this.location=container.getLocationURI();  }  try {    if (container.isAccessible()) {      defaultCharSet=container.getDefaultCharset(false);      IResource[] resourceMembers=container.members();      members=new AbstractResourceUndoState[resourceMembers.length];      for (int i=0; i < resourceMembers.length; i++) {        members[i]=(AbstractResourceUndoState)ResourceUndoState.fromResource(resourceMembers[i]);      }    }  } catch (  CoreException e) {  }}  }
class C{  protected Link determineOrderPageLink(final CustomerOrder order,final String linkId){  final PageParameters viewOrder=new PageParameters();  viewOrder.set("order",order.getCartGuid());  return new BookmarkablePageLink(linkId,OrderPage.class,viewOrder);}  }
class C{  void findConnections(WBEMClient client,String namespace){  CloseableIterator<CIMInstance> instances=null;  try {    connections.clear();    instances=client.associatorInstances(cimPath,null,"CISCO_ProtocolEndpoint",null,null,false,null);    while (instances.hasNext()) {      CIMInstance instance=instances.next();      if (!instance.getProperty("ProtocolIFType").getValue().toString().equals("56")) {        continue;      }      FCProtocolEndpoint ep=new FCProtocolEndpoint(instance);      this.connections.put(ep.wwpn,ep);    }  } catch (  WBEMException ex) {    _log.error("Can't find FCProtocolEndpoint connections: ",ex);  } finally {    if (instances != null) {      instances.close();    }  }}  }
class C{  public IgniteConsistencyException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public String formatDateTimeMedium(Date d){  return d.toString();}  }
class C{  public void subscribeToAsyncResellerService() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateAsyncService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForReseller");  VendorData resellerData=setupNewReseller("2013-01-03 08:10:00");  setCutOffDay(resellerData.getAdminKey(),1);  CustomerData resellerCustomerData=registerCustomer(resellerData,"resellerCustomer");  setDateFactory("2013-07-10 20:00:00");  VOServiceDetails resellerService=grantResalePermission(supplierData,supplService,resellerData);  resellerService=publishActivateService(resellerData,resellerService);  VOSubscriptionDetails subDetails=subscribe(resellerCustomerData.getAdminUser(),"resellerSubscr",resellerService,"2013-08-01 12:00:00","ADMIN");  completeAsyncSubscription(basicSetup.getSupplierAdminKey(),resellerCustomerData.getAdminUser(),subDetails,"2013-08-18 00:00:00");  resetCutOffDay(supplierData.getAdminKey());  resetCutOffDay(resellerData.getAdminKey());}  }
class C{  private boolean columnFamilyExists(final String columnFamily) throws IOException {  return this.table.getTableDescriptor().hasFamily(Bytes.toBytes(columnFamily));}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration1());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public boolean isRecordAccess(int AD_Table_ID,int Record_ID,boolean ro){  loadRecordAccess(false);  boolean negativeList=true;  for (int i=0; i < m_recordAccess.length; i++) {    MRecordAccess ra=m_recordAccess[i];    if (ra.getAD_Table_ID() != AD_Table_ID)     continue;    if (ra.isExclude()) {      if (ra.getRecord_ID() == Record_ID) {        if (ro)         return ra.isReadOnly(); else         return false;      }    } else {      negativeList=false;      if (ra.getRecord_ID() == Record_ID) {        if (!ro)         return !ra.isReadOnly(); else         return true;      }    }  }  return negativeList;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public TreeParameterModel(TreeModel tree,Parameter parameter,boolean includeRoot){  this(tree,parameter,includeRoot,Intent.NODE);}  }
class C{  @Override public long write(ByteBuffer[] srcs,int offset,int length) throws IOException {  throw new NonWritableChannelException();}  }
class C{  public void enableShadow(boolean enabled){  getShadowMap().setEnabled(enabled);  shadowEffects.shadowEnabled=enabled;}  }
class C{  public SparseArrayCompat(){  this(10);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.078 -0500",hash_original_method="9F68B71E39A8D368C1910EB63F18B506",hash_generated_method="EC23550E2D5DC2CBAD5A8C6F680A40F1") public SIPHeader parse() throws ParseException {  UnsupportedList unsupportedList=new UnsupportedList();  if (debug)   dbg_enter("UnsupportedParser.parse");  try {    headerName(TokenTypes.UNSUPPORTED);    while (lexer.lookAhead(0) != '\n') {      this.lexer.SPorHT();      Unsupported unsupported=new Unsupported();      unsupported.setHeaderName(SIPHeaderNames.UNSUPPORTED);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      unsupported.setOptionTag(token.getTokenValue());      this.lexer.SPorHT();      unsupportedList.add(unsupported);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        unsupported=new Unsupported();        this.lexer.match(TokenTypes.ID);        token=lexer.getNextToken();        unsupported.setOptionTag(token.getTokenValue());        this.lexer.SPorHT();        unsupportedList.add(unsupported);      }    }  }  finally {    if (debug)     dbg_leave("UnsupportedParser.parse");  }  return unsupportedList;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.115 -0500",hash_original_method="E2914311E18C41738022F5D7A73FEC8A",hash_generated_method="6F752AA4232CE3D0BF9CC57A1B3B6A57") private void readElementDeclaration() throws IOException, XmlPullParserException {  read(START_ELEMENT);  skip();  readName();  readContentSpec();  skip();  read('>');}  }
class C{  public NotificationChain basicSetBogusTypeRef(TypeRef newBogusTypeRef,NotificationChain msgs){  TypeRef oldBogusTypeRef=bogusTypeRef;  bogusTypeRef=newBogusTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.VARIABLE_DECLARATION__BOGUS_TYPE_REF,oldBogusTypeRef,newBogusTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static Permutation newPermutation(int length){  return new Permutation(length);}  }
class C{  public static Map<String,Object> updateCreditCard(DispatchContext ctx,Map<String,Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PAY_INFO","_UPDATE","ACCOUNTING","_UPDATE");  if (result.size() > 0)   return result;  List<GenericValue> toBeStored=FastList.newInstance();  boolean isModified=false;  GenericValue paymentMethod=null;  GenericValue newPm=null;  GenericValue creditCard=null;  GenericValue newCc=null;  String paymentMethodId=(String)context.get("paymentMethodId");  try {    creditCard=EntityQuery.use(delegator).from("CreditCard").where("paymentMethodId",paymentMethodId).queryOne();    paymentMethod=EntityQuery.use(delegator).from("PaymentMethod").where("paymentMethodId",paymentMethodId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateReadFailure",locale) + e.getMessage());  }  if (creditCard == null || paymentMethod == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateWithPaymentMethodId",locale) + paymentMethodId);  }  if (!paymentMethod.getString("partyId").equals(partyId) && !security.hasEntityPermission("PAY_INFO","_UPDATE",userLogin) && !security.hasEntityPermission("ACCOUNTING","_UPDATE",userLogin)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateWithoutPermission",UtilMisc.toMap("partyId",partyId,"paymentMethodId",paymentMethodId),locale));  }  List<String> messages=FastList.newInstance();  String updatedCardNumber=StringUtil.removeSpaces((String)context.get("cardNumber"));  if (updatedCardNumber.startsWith("*")) {    String origCardNumber=creditCard.getString("cardNumber");    String origMaskedNumber="";    int cardLength=origCardNumber.length() - 4;    for (int i=0; i < cardLength; i++) {      origMaskedNumber=origMaskedNumber + "*";    }    origMaskedNumber=origMaskedNumber + origCardNumber.substring(cardLength);    if (updatedCardNumber.equals(origMaskedNumber)) {      updatedCardNumber=origCardNumber;    }  }  context.put("cardNumber",updatedCardNumber);  if (!UtilValidate.isCardMatch((String)context.get("cardType"),(String)context.get("cardNumber"))) {    messages.add(UtilProperties.getMessage(resource,"AccountingCreditCardNumberInvalid",UtilMisc.toMap("cardType",(String)context.get("cardType"),"validCardType",UtilValidate.getCardType((String)context.get("cardNumber"))),locale));  }  if (!UtilValidate.isDateAfterToday((String)context.get("expireDate"))) {    messages.add(UtilProperties.getMessage(resource,"AccountingCreditCardExpireDateBeforeToday",UtilMisc.toMap("expireDate",(String)context.get("expireDate")),locale));  }  if (messages.size() > 0) {    return ServiceUtil.returnError(messages);  }  newPm=GenericValue.create(paymentMethod);  toBeStored.add(newPm);  newCc=GenericValue.create(creditCard);  toBeStored.add(newCc);  String newPmId=null;  try {    newPmId=delegator.getNextSeqId("PaymentMethod");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateIdGenerationFailure",locale));  }  newPm.set("partyId",partyId);  newPm.set("fromDate",context.get("fromDate"),false);  newPm.set("description",context.get("description"));  if (newPm.get("thruDate") == null) {    newPm.set("thruDate",context.get("thruDate"));  }  newCc.set("companyNameOnCard",context.get("companyNameOnCard"));  newCc.set("titleOnCard",context.get("titleOnCard"));  newCc.set("firstNameOnCard",context.get("firstNameOnCard"));  newCc.set("middleNameOnCard",context.get("middleNameOnCard"));  newCc.set("lastNameOnCard",context.get("lastNameOnCard"));  newCc.set("suffixOnCard",context.get("suffixOnCard"));  newCc.set("cardType",context.get("cardType"));  newCc.set("cardNumber",context.get("cardNumber"));  newCc.set("expireDate",context.get("expireDate"));  GenericValue newPartyContactMechPurpose=null;  String contactMechId=(String)context.get("contactMechId");  if (UtilValidate.isNotEmpty(contactMechId) && !contactMechId.equals("_NEW_")) {    newCc.set("contactMechId",contactMechId);  }  if (!newCc.equals(creditCard) || !newPm.equals(paymentMethod)) {    newPm.set("paymentMethodId",newPmId);    newCc.set("paymentMethodId",newPmId);    newPm.set("fromDate",(context.get("fromDate") != null ? context.get("fromDate") : now));    isModified=true;  }  if (UtilValidate.isNotEmpty(contactMechId) && !contactMechId.equals("_NEW_")) {    String contactMechPurposeTypeId="BILLING_LOCATION";    GenericValue tempVal=null;    try {      List<GenericValue> allPCWPs=EntityQuery.use(delegator).from("PartyContactWithPurpose").where("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId).queryList();      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"contactFromDate","contactThruDate",true);      allPCWPs=EntityUtil.filterByDate(allPCWPs,now,"purposeFromDate","purposeThruDate",true);      tempVal=EntityUtil.getFirst(allPCWPs);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      tempVal=null;    }    if (tempVal == null) {      newPartyContactMechPurpose=delegator.makeValue("PartyContactMechPurpose",UtilMisc.toMap("partyId",partyId,"contactMechId",contactMechId,"contactMechPurposeTypeId",contactMechPurposeTypeId,"fromDate",now));    }  }  if (isModified) {    if (newPartyContactMechPurpose != null)     toBeStored.add(newPartyContactMechPurpose);    paymentMethod.set("thruDate",now);    toBeStored.add(paymentMethod);    try {      delegator.storeAll(toBeStored);    } catch (    GenericEntityException e) {      Debug.logWarning(e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingCreditCardUpdateWriteFailure",locale) + e.getMessage());    }  } else {    result.put("paymentMethodId",paymentMethodId);    result.put("oldPaymentMethodId",paymentMethodId);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    if (contactMechId == null || !contactMechId.equals("_NEW_")) {      result.put(ModelService.SUCCESS_MESSAGE,UtilProperties.getMessage(resource,"AccountingNoChangesMadeNotUpdatingCreditCard",locale));    }    return result;  }  result.put("oldPaymentMethodId",paymentMethodId);  result.put("paymentMethodId",newCc.getString("paymentMethodId"));  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public Property createProperty(){  PropertyImpl property=new PropertyImpl();  return property;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public JSONObject merge(JSONObject object){  if (object == null) {    throw new NullPointerException("object is null");  }  for (  Member member : object) {    this.set(member.name,member.value);  }  return this;}  }
class C{  public static void write(float lt,float ln,int radius,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.POINT_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_POINT);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeFloat(lt);  dos.writeFloat(ln);  dos.writeInt(radius);  properties.write(dos);}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitParameter(name,access);}  }
class C{  public static BigDecimal safeAdd(BigDecimal left,BigDecimal right){  return right != null ? left.add(right) : left;}  }
class C{  public void insert(int index,double v){  _insert(index,numberNode(v));}  }
class C{  private void updateRange(double value){  mMinValue=Math.min(mMinValue,value);  mMaxValue=Math.max(mMaxValue,value);}  }
class C{  public void removeLayer(int index){  List<Layer> currentLayers=getLayerList();  try {    currentLayers.remove(index);    setLayerList(currentLayers);  } catch (  IndexOutOfBoundsException ioobe) {  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  int progress=0;  int oldProgress;  double slope;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double[] inflowingVals=new double[]{16,32,64,128,1,2,4,8};  double numInNeighbours;  boolean flag=false;  boolean logTransform=false;  String outputType=null;  double gridRes;  double flowDir=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  outputType=args[2].toLowerCase();  logTransform=Boolean.parseBoolean(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster pntr=new WhiteboxRaster(inputHeader,"r");    int rows=pntr.getNumberRows();    int rowsLessOne=rows - 1;    int cols=pntr.getNumberColumns();    double noData=pntr.getNoDataValue();    gridRes=pntr.getCellSizeX();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,1);    output.setPreferredPalette("blueyellow.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    output.setZUnits("dimensionless");    WhiteboxRaster tmpGrid=new WhiteboxRaster(outputHeader.replace(".dep","_temp.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    tmpGrid.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (pntr.getValue(row,col) != noData) {          z=0;          for (i=0; i < 8; i++) {            if (pntr.getValue(row + dY[i],col + dX[i]) == inflowingVals[i]) {              z++;            }          }          tmpGrid.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    updateProgress("Loop 2 of 3:",0);    oldProgress=-1;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        if (tmpGrid.getValue(row,col) == 0) {          tmpGrid.setValue(row,col,-1);          flag=false;          x=col;          y=row;          do {            z=output.getValue(y,x);            flowDir=pntr.getValue(y,x);            if (flowDir > 0) {              i=(int)(Math.log(flowDir) / LnOf2);              x+=dX[i];              y+=dY[i];              z2=output.getValue(y,x);              output.setValue(y,x,z2 + z);              numInNeighbours=tmpGrid.getValue(y,x) - 1;              tmpGrid.setValue(y,x,numInNeighbours);              if (numInNeighbours == 0) {                tmpGrid.setValue(y,x,-1);                flag=true;              } else {                flag=false;              }            } else {              flag=false;            }          } while (flag);        }      }      progress=(int)(100f * row / rowsLessOne);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;        if (cancelOp) {          cancelOperation();          return;        }      }    }    updateProgress("Loop 3 of 3:",0);    oldProgress=-1;    if (outputType.contains("specific") || outputType.contains("sca")) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=pntr.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,output.getValue(row,col) * gridRes);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else     if (outputType.contains("total")) {      double gridCellArea=gridRes * gridRes;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=output.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,output.getValue(row,col) * gridCellArea);          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    }    if (logTransform) {      oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          flowDir=output.getValue(row,col);          if (flowDir != noData) {            output.setValue(row,col,Math.log(output.getValue(row,col)));          }        }        progress=(int)(100f * row / rowsLessOne);        if (progress > oldProgress) {          updateProgress(progress);          oldProgress=progress;          if (cancelOp) {            cancelOperation();            return;          }        }      }    } else {      output.setNonlinearity(0.2);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    pntr.close();    tmpGrid.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void clear(){  orders.clear();}  }
class C{  public static Coords scatterDirectArty(Coords coords,int moF){  return Compute.scatter(coords,moF);}  }
class C{  public void output(PrintWriter out){  if (doctype != null) {    doctype.output(out);    try {      out.write('\n');    } catch (    Exception e) {    }  }  html.output(out);}  }
class C{  private void initMergeTarget(){  final File mergeInfoHolder=myMerger.getMergeInfoHolder();  if (mergeInfoHolder != null) {    final Status svnStatus=SvnUtil.getStatus(myVcs,mergeInfoHolder);    if (svnStatus != null && svnStatus.isProperty(StatusType.STATUS_MODIFIED)) {      myMergeTarget=VcsUtil.getFilePath(mergeInfoHolder);    }  }}  }
class C{  public static VOPricedRole toVOPricedProductRole(PricedProductRole role,LocalizerFacade facade){  VOPricedRole voRole=new VOPricedRole();  updateValueObject(voRole,role);  voRole.setPricePerUser(role.getPricePerUser());  voRole.setRole(RoleAssembler.toVORoleDefinition(role.getRoleDefinition(),facade));  return voRole;}  }
class C{  public static org.oscm.internal.vo.VOServiceListResult convertToUp(org.oscm.vo.VOServiceListResult oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServiceListResult newVO=new org.oscm.internal.vo.VOServiceListResult();  newVO.setResultSize(oldVO.getResultSize());  for (  org.oscm.vo.VOService s : oldVO.getServices()) {    newVO.getServices().add(convertToUp(s));  }  return newVO;}  }
class C{  @Override public String toString(){  return "MLC localhost Socket Factory";}  }
class C{  public String pullRequestHtmlUrl(String account,String collection,String projectName,String repositoryName,String pullRequestId){  Objects.requireNonNull(projectName,"Project name required");  Objects.requireNonNull(repositoryName,"Repository name required");  Objects.requireNonNull(pullRequestId,"Pull request id required");  String pullRequestUrl;  if (projectName.equals(repositoryName)) {    pullRequestUrl=getTeamBaseUrl(account,collection) + format(PROJECT_HTML_PULL_REQUEST,projectName,pullRequestId);  } else {    pullRequestUrl=getTeamBaseUrl(account,collection) + format(PROJECT_REPO_HTML_PULL_REQUEST,projectName,repositoryName,pullRequestId);  }  return pullRequestUrl;}  }
class C{  public LayerControlButtonPanel createControlButtons(){  return new LayerControlButtonPanel(this);}  }
class C{  private Request callWithClassLoader(Callable<Request> callable) throws MatlabConnectionException {  Thread currentThread=Thread.currentThread();  ClassLoader originalClassLoader=null;  try {    originalClassLoader=currentThread.getContextClassLoader();    currentThread.setContextClassLoader(RemoteMatlabProxyFactory.class.getClassLoader());    return callable.call();  } catch (  MatlabConnectionException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  } finally {    if (originalClassLoader != null) {      currentThread.setContextClassLoader(originalClassLoader);    }  }}  }
class C{  public double distanceToSquared(Vec2 vector){  if (vector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Vec2","distanceToSquared","missingVector"));  }  double dx=this.x - vector.x;  double dy=this.y - vector.y;  return dx * dx + dy * dy;}  }
class C{  @PUT @Consumes({Servlets.JSON_MEDIA_TYPE,MediaType.APPLICATION_JSON}) @Produces(Servlets.JSON_MEDIA_TYPE) public Response updateEntities(@Context HttpServletRequest request){  String entityJson=null;  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"EntityResource.updateEntities()");    }    final String entities=Servlets.getRequestPayload(request);    entityJson=AtlasClient.toString(new JSONArray(entities));    LOG.info("updating entities {} ",entityJson);    AtlasClient.EntityResult entityResult=metadataService.updateEntities(entities);    LOG.info("Updated entities: {}",entityResult);    JSONObject response=getResponse(entityResult);    return Response.ok(response).build();  } catch (  EntityExistsException e) {    LOG.error("Unique constraint violation for entityDef={}",entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.CONFLICT));  }catch (  ValueConversionException ve) {    LOG.error("Unable to persist entity instance due to a deserialization error entityDef={}",entityJson,ve);    throw new WebApplicationException(Servlets.getErrorResponse(ve.getCause(),Response.Status.BAD_REQUEST));  }catch (  AtlasException|IllegalArgumentException e) {    LOG.error("Unable to persist entity instance entityDef={}",entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to persist entity instance entityDef={}",entityJson,e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public static DbException convertInvocation(InvocationTargetException te,String message){  Throwable t=te.getTargetException();  if (t instanceof SQLException || t instanceof DbException || t instanceof InvocationTargetException) {    return convert(t);  }  message=message == null ? t.getMessage() : message + ": " + t.getMessage();  return get(ErrorCode.EXCEPTION_IN_FUNCTION_1,t,message);}  }
class C{  protected N4MemberDeclarationImpl(){  super();}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Pin(int datasetIndex){  super(datasetIndex);  this.paint=Color.red;  this.stroke=new BasicStroke(3.0f,BasicStroke.CAP_ROUND,BasicStroke.JOIN_BEVEL);}  }
class C{  public void addCloseClientListener(CloseClientListener l){  closeClientListeners.addElement(l);}  }
class C{  @Override public void handleResponse(final HttpProxyResponse response) throws ProxyAuthException {  if (!isHandshakeComplete() && ("close".equalsIgnoreCase(StringUtilities.getSingleValuedHeader(response.getHeaders(),"Proxy-Connection")) || "close".equalsIgnoreCase(StringUtilities.getSingleValuedHeader(response.getHeaders(),"Connection")))) {    getProxyIoSession().setReconnectionNeeded(true);  }  if (response.getStatusCode() == 407) {    if (authHandler == null) {      autoSelectAuthHandler(response);    }    authHandler.handleResponse(response);  } else {    throw new ProxyAuthException("Error: unexpected response code " + response.getStatusLine() + " received from proxy.");  }}  }
class C{  public static <W>void writeLmBinary(final NgramLanguageModel<W> lm,final String file){  IOUtils.writeObjFileHard(file,lm);}  }
class C{  public int[][] toIntArray2(){  int[][] array=new int[rows][columns];  for (int r=0; r < rows; r++) {    for (int c=0; c < columns; c++) {      array[r][c]=(int)Math.rint(get(r,c));    }  }  return array;}  }
class C{  public static final byte composeStoreAndForwardMode(byte esmClass){  return composeMessagingMode(esmClass,SMPPConstant.ESMCLS_STORE_FORWARD);}  }
class C{  public boolean hasNotifications(){  return CENTER.hasEntries();}  }
class C{  public static boolean isXML11NameFirstCharacter(char c){  return (NAME11_FIRST_CHARACTER[c / 32] & (1 << (c % 32))) != 0;}  }
class C{  private static void addEncodedParameter(StringBuilder sb,String name,String value) throws IOException {  if (sb.length() > 0) {    sb.append("&");  }  sb.append(URLEncoder.encode(name,"UTF-8"));  sb.append("=");  if (value == null)   throw new IOException("ERROR: " + name + " is null"); else   sb.append(URLEncoder.encode(value,"UTF-8"));}  }
class C{  public static SymbolToken[] newSymbolTokens(SymbolTable symtab,String... text){  if (text != null) {    int count=text.length;    if (count != 0) {      SymbolToken[] result=new SymbolToken[count];      for (int i=0; i < count; i++) {        String s=text[i];        result[i]=newSymbolToken(symtab,s);      }      return result;    }  }  return SymbolToken.EMPTY_ARRAY;}  }
class C{  @Override public final int computeHashCode(long val){  return HashFunctions.hash(val);}  }
class C{  public FrameworkException(String message,Throwable cause){  super(message,cause);}  }
class C{  public T[] values(){  return mValues.clone();}  }
class C{  public GenericElement(){}  }
class C{  public static String[] toPaths(SourceFile[] sourceFiles){  String[] dest=new String[sourceFiles.length];  for (int i=0; i < sourceFiles.length; i++) {    dest[i]=sourceFiles[i].javaFile.getPath();  }  return dest;}  }
class C{  public GrammarRuleNode parseRules(EvolutionState state,BufferedReader reader,GPFunctionSet gpfs){  rules=new HashMap();  try {    String line;    while ((line=reader.readLine()) != null) {      GrammarRuleNode rule=parseRule(state,new Lexer(line.trim(),DEFAULT_REGEXES),gpfs);      if (rule != null && root == null)       root=rule;    }  } catch (  IOException e) {  }  state.output.exitIfErrors();  return root;}  }
class C{  public static byte[] intArrayToByteArray(int[] intArray){  byte[] byteArray=new byte[intArray.length];  for (int i=0; i < intArray.length; i++) {    byteArray[i]=intToByte(intArray[i]);  }  return byteArray;}  }
class C{  public FeatureParameter basicGetParameter(){  return parameter;}  }
class C{  public void endDocument() throws SAXException {  super.endDocument();  m_exptype.addElement(NULL);  m_parent.addElement(NULL);  m_nextsib.addElement(NULL);  m_firstch.addElement(NULL);  m_extendedTypes=m_expandedNameTable.getExtendedTypes();  m_exptype_map=m_exptype.getMap();  m_nextsib_map=m_nextsib.getMap();  m_firstch_map=m_firstch.getMap();  m_parent_map=m_parent.getMap();}  }
class C{  public boolean isArrayMode(){  return arrayMode;}  }
class C{  public boolean ttEntails(KnowledgeBase kb,Sentence alpha){  List<PropositionSymbol> symbols=new ArrayList<PropositionSymbol>(SymbolCollector.getSymbolsFrom(kb.asSentence(),alpha));  return ttCheckAll(kb,alpha,symbols,new Model());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:15.312 -0500",hash_original_method="50CD500D47F4FCEE0A0F59D7183F0AD5",hash_generated_method="6BA4FAFF5E710B22D2B7E38FD8D68A75") @DSSpec(DSCat.DATA_GENERAL) public void confirm(String result){  mStringResult=result;  confirm();}  }
class C{  public static void alert(Context context,Task b){  Log.d("IssueAlert","generating alert for " + b.getDescription());  Preferences prefs=new Preferences(context);  if (!prefs.generateAlerts()) {    return;  }  LocationManager locationManager=(LocationManager)context.getApplicationContext().getSystemService(Context.LOCATION_SERVICE);  Location location=null;  try {    location=locationManager.getLastKnownLocation("gps");  } catch (  SecurityException sex) {  }  double eLon=b.getLon() / 1E7D;  double eLat=b.getLat() / 1E7D;  String title=b instanceof Note ? context.getString(R.string.alert_note) : context.getString(R.string.alert_bug);  String ticker=title;  String message="";  if (location != null) {    long distance=Math.round(GeoMath.haversineDistance(location.getLongitude(),location.getLatitude(),eLon,eLat));    if (distance > Math.sqrt(8 * prefs.getBugDownloadRadius() * prefs.getBugDownloadRadius())) {      return;    }    long bearing=GeoMath.bearing(location.getLongitude(),location.getLatitude(),eLon,eLat);    String[] bearings={"NE","E","SE","S","SW","W","NW","N"};    int index=(int)(bearing - 22.5);    if (index < 0)     index+=360;    index=index / 45;    message=context.getString(R.string.alert_distance_direction,distance,bearings[index]) + "\n";    ticker=ticker + " " + message;  }  message=message + b.getDescription();  NotificationCompat.Builder mBuilder;  try {    mBuilder=new NotificationCompat.Builder(context).setSmallIcon(R.drawable.osm_logo).setContentTitle(title).setContentText(message).setPriority(NotificationCompat.PRIORITY_HIGH).setTicker(ticker).setAutoCancel(true).setGroup(b instanceof Note ? GROUP_NOTES : GROUP_OSMOSE);  } catch (  RuntimeException re) {    ACRA.getErrorReporter().putCustomData("STATUS","NOCRASH");    ACRA.getErrorReporter().handleException(re);    return;  }  Intent resultIntent=new Intent(Intent.ACTION_VIEW);  Uri geo=Uri.fromParts("geo",eLat + "," + eLon,null);  resultIntent.setData(geo);  TaskStackBuilder stackBuilder=TaskStackBuilder.create(context);  stackBuilder.addParentStack(Main.class);  stackBuilder.addNextIntent(resultIntent);  PendingIntent resultPendingIntent=stackBuilder.getPendingIntent(0,PendingIntent.FLAG_UPDATE_CURRENT);  mBuilder.setContentIntent(resultPendingIntent);  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  int id=id(b);  mNotificationManager.notify(id(b),mBuilder.build());  Application.getTaskNotifications(context).save(mNotificationManager,id(b));  bugCount++;}  }
class C{  public Where(String rel,String label,String valueString){  this.rel=rel;  this.label=label;  this.valueString=valueString;}  }
class C{  public Interpolation(SpatialGrid sg,final int method){  this(sg,method,1);}  }
class C{  private PrintContainer(){}  }
class C{  public static void polygon(double[] x,double[] y){  int N=x.length;  GeneralPath path=new GeneralPath();  path.moveTo((float)scaleX(x[0]),(float)scaleY(y[0]));  for (int i=0; i < N; i++)   path.lineTo((float)scaleX(x[i]),(float)scaleY(y[i]));  path.closePath();  offscreen.draw(path);  draw();}  }
class C{  public void initialize(JobContext job,RuntimeServices services){  InvocationContext<I,O> context=new InvocationContext<I,O>(id,job,services,inputs.size(),outputs);  try {    oplet.initialize(context);  } catch (  Exception e) {    e.printStackTrace();  }  List<? extends Consumer<I>> streamers=oplet.getInputs();  for (int i=0; i < inputs.size(); i++)   inputs.get(i).setDestination(streamers.get(i));}  }
class C{  public static int codePointCount(char[] seq,int offset,int count){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length;  int endIndex=offset + count;  if (offset < 0 || count < 0 || endIndex > len) {    throw new IndexOutOfBoundsException();  }  int result=0;  for (int i=offset; i < endIndex; i++) {    char c=seq[i];    if (isHighSurrogate(c)) {      if (++i < endIndex) {        c=seq[i];        if (!isLowSurrogate(c)) {          result++;        }      }    }    result++;  }  return result;}  }
class C{  public void onNewLineSoftWrapAware(){  if (myEditor.getSoftWrapModel().getSoftWrap(offset) == null) {    onNewLine();    return;  }  softWrapLinesCurrent++;  softWrapColumnDiff=-logicalColumn - foldingColumnDiff;  visualLine++;  visualColumn=0;  x=0;}  }
class C{  private void trainOnInstanceImpl(Instance inst){  if (this.treeRoot == null) {    this.treeRoot=newLearningNode(this.parallelismHint);    this.activeLeafNodeCount=1;  }  FoundNode foundNode=this.treeRoot.filterInstanceToLeaf(inst,null,-1);  trainOnInstanceImpl(foundNode,inst);}  }
class C{  public LetterboxingViewport(final float targetPpi){  this(targetPpi,targetPpi,4f / 3f);}  }
class C{  public String dumpAsMap(Object data){  return dumpAs(data,Tag.MAP,FlowStyle.BLOCK);}  }
class C{  public static boolean linkSelected(final ISelection selection){  final String path=getFirstSelectedPath(selection);  if (path == null) {    return false;  } else {    return FileSystemUtils.getInstance().getAttributes(path).isSymbolicLink();  }}  }
class C{  public void mouseOver(){  TestLogging.log("MouseOver " + this.toString());  findElement();  Locatable hoverItem=(Locatable)element;  Mouse mouse=((HasInputDevices)driver).getMouse();  mouse.mouseMove(hoverItem.getCoordinates());}  }
class C{  public void test_DELETE_accessPath_delete_all() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(null,null,null);  assertEquals(7,mutationResult);}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque()) {    g.setColor(c.getParent().getBackground());    g.fillRect(0,0,c.getWidth(),c.getHeight());    g.setColor(c.getBackground());    g.fillRect(0,ROUND_HEIGHT,c.getWidth(),c.getHeight() - ROUND_HEIGHT);  }  paint(g,c);}  }
class C{  public SortOrder(Database database,int[] queryColumnIndexes,int[] sortType,ArrayList<SelectOrderBy> orderList){  this.database=database;  this.queryColumnIndexes=queryColumnIndexes;  this.sortTypes=sortType;  this.orderList=orderList;}  }
class C{  private void method(MethodDetail detail){  Annotation[] list=detail.getAnnotations();  Method method=detail.getMethod();  for (  Annotation label : list) {    if (label instanceof Commit) {      commit(method);    }    if (label instanceof Validate) {      validate(method);    }    if (label instanceof Persist) {      persist(method);    }    if (label instanceof Complete) {      complete(method);    }    if (label instanceof Replace) {      replace(method);    }    if (label instanceof Resolve) {      resolve(method);    }  }}  }
class C{  public JsonObjectParser build(){  return new JsonObjectParser(this);}  }
class C{  public static BytesRef randomBinaryTerm(Random r){  int length=r.nextInt(15);  BytesRef b=new BytesRef(length);  r.nextBytes(b.bytes);  b.length=length;  return b;}  }
class C{  public static IMultiPoint[] randomSearchPoints(int n,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    double d1=rGen.nextDouble() * scale;    double d2=rGen.nextDouble() * scale;    points[i]=new TwoDPoint(d1,d2);  }  return points;}  }
class C{  public void resetTracker(){  tracker.reset();}  }
class C{  public static <T>T withWriter(Writer writer,@ClosureParams(FirstParam.class) Closure<T> closure) throws IOException {  try {    T result=closure.call(writer);    try {      writer.flush();    } catch (    IOException e) {    }    Writer temp=writer;    writer=null;    temp.close();    return result;  }  finally {    closeWithWarning(writer);  }}  }
class C{  protected Change createUndoChange(UndoEdit edit,ContentStamp stampToRestore){  return new UndoTextFileChange(getName(),fFile,edit,stampToRestore,fSaveMode);}  }
class C{  public static <T extends Serializable>void write(File file,T object) throws IOException {  try (ObjectOutputStream output=new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file)))){    output.writeObject(object);  } }  }
class C{  private List<Node> uncoveredPotentiallyDirectedPathStarts(Node x,Node y,Graph g,LinkedList<Node> path){  List<Node> pathThrough=new ArrayList<>();  if (x == y)   return path;  if (path.contains(x))   return path;  path.add(x);  for (  Node n : g.getAdjacentNodes(x)) {    Edge e=g.getEdge(x,n);    if (e.getProximalEndpoint(x) == Endpoint.ARROW)     continue;    if (!uncoveredPotentiallyDirectedPathStarts(n,y,g,path).isEmpty()) {      pathThrough.add(n);    }  }  path.remove(x);  return pathThrough;}  }
class C{  public void addMemberNodes(Collection<GraphNode> result){  result.addAll(getChildrenNodes());  for (  CollapseData data : getChildrenCollapse()) {    data.addMemberNodes(result);  }}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBucketEmpty(PlayerBucketEmptyEvent event){  Match match=Cardinal.getMatch(event.getPlayer());  if (match == null || !match.hasPlayer(event.getPlayer())) {    return;  }  for (  AppliedRegion reg : get(match,ApplyType.BLOCK,ApplyType.BLOCK_PLACE,ApplyType.BLOCK_PLACE_AGAINST)) {    Block evaluating=reg.isType(ApplyType.BLOCK_PLACE_AGAINST) ? event.getBlockClicked() : event.getBlockClicked().getRelative(event.getBlockFace());    if (apply(reg,evaluating.getLocation(),event.getPlayer(),event,event,getBucketResult(event.getBucket()),event.getPlayer())) {      break;    }  }}  }
class C{  public MilStd2525UnitsFormat(){  this(UnitsFormat.KILOMETERS,UnitsFormat.SQUARE_KILOMETERS,true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:03.905 -0500",hash_original_method="002BA51785B71C2E50AE0C2AD1D7634D",hash_generated_method="1924CC4E06D7BD970F950DF1C2A728FF") public void bindConstants(Allocation a,int slot){  if (slot < 0 || slot >= mConstants.length) {    throw new IllegalArgumentException("Slot ID out of range.");  }  if (a != null && a.getType().getID() != mConstants[slot].getID()) {    throw new IllegalArgumentException("Allocation type does not match slot type.");  }  int id=a != null ? a.getID() : 0;  mRS.nProgramBindConstants(getID(),slot,id);}  }
class C{  public static float updateValue(float current,float target){  return ClientUtils.updateValue(current,target,0.5F);}  }
class C{  protected synchronized void merge(DoubleMinMax minmax){  this.minmax.put(minmax.getMin());  this.minmax.put(minmax.getMax());}  }
class C{  public SequenceDiagram generateDiagram(){  if (diagramRetrieved) {    return dia;  } else {    boolean createdLaterWarning=false;    for (    Lifeline ll : dia.getLifelines()) {      if (!ll.isCreatedOnStart() && ll.getCreated() == null) {        createdLaterWarning=true;        ll.setCreatedOnStart(true);      }    }    if (createdLaterWarning) {      warnings.add("At least one lifeline was specified as created later, but didn't receive a message");    }    boolean openExecSpecs;    boolean foundOpenExecSpecs=false;    do {      openExecSpecs=false;      for (      Map.Entry<Lifeline,LifelineState> e : currentLifelineState.entrySet()) {        if (e.getValue().execSpecStartTickStack.size() > 0) {          if (e.getValue().lastEndOfExecSpec < currentTick) {            e.getValue().lastEndOfExecSpec=currentTick;            e.getKey().addExecutionSpecification(new ExecutionSpecification(e.getValue().execSpecStartTickStack.pop(),currentTick));            openExecSpecs=openExecSpecs || e.getValue().execSpecStartTickStack.size() > 0;            foundOpenExecSpecs=true;          }        }      }      if (openExecSpecs) {        currentTick++;      }    } while (openExecSpecs);    if (foundOpenExecSpecs) {      warnings.add("At least one executionspecification was not closed, any open executionspecification was closed at the end of the diagram.");    }    dia.setLastTick(Math.max(currentTick,lastMessageReceiveTick));    diagramRetrieved=true;    return dia;  }}  }
class C{  private static String encode_base64(byte d[],int len) throws IllegalArgumentException {  int off=0;  StringBuffer rs=new StringBuffer();  int c1, c2;  if (len <= 0 || len > d.length) {    throw new IllegalArgumentException("Invalid len");  }  while (off < len) {    c1=d[off++] & 0xff;    rs.append(base64_code[(c1 >> 2) & 0x3f]);    c1=(c1 & 0x03) << 4;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 4) & 0x0f;    rs.append(base64_code[c1 & 0x3f]);    c1=(c2 & 0x0f) << 2;    if (off >= len) {      rs.append(base64_code[c1 & 0x3f]);      break;    }    c2=d[off++] & 0xff;    c1|=(c2 >> 6) & 0x03;    rs.append(base64_code[c1 & 0x3f]);    rs.append(base64_code[c2 & 0x3f]);  }  return rs.toString();}  }
class C{  @CanIgnoreReturnValue public MapMaker concurrencyLevel(int concurrencyLevel){  checkState(this.concurrencyLevel == UNSET_INT,"concurrency level was already set to %s",this.concurrencyLevel);  checkArgument(concurrencyLevel > 0);  this.concurrencyLevel=concurrencyLevel;  return this;}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public void init() throws ServletException {}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void select(JSpinner spinner){  JComponent editor=spinner.getEditor();  if (editor instanceof JSpinner.DateEditor) {    JSpinner.DateEditor dateEditor=(JSpinner.DateEditor)editor;    JFormattedTextField ftf=dateEditor.getTextField();    Format format=dateEditor.getFormat();    Object value;    if (format != null && (value=spinner.getValue()) != null) {      SpinnerDateModel model=dateEditor.getModel();      DateFormat.Field field=DateFormat.Field.ofCalendarField(model.getCalendarField());      if (field != null) {        try {          AttributedCharacterIterator iterator=format.formatToCharacterIterator(value);          if (!select(ftf,iterator,field) && field == DateFormat.Field.HOUR0) {            select(ftf,iterator,DateFormat.Field.HOUR1);          }        } catch (        IllegalArgumentException iae) {        }      }    }  }}  }
class C{  @Override public void close() throws ResourceException {  super.close();  try {    if (this.xaConnection != null)     this.xaConnection.close();  } catch (  SQLException err) {  }}  }
class C{  public JRootPane(){  setGlassPane(createGlassPane());  setLayeredPane(createLayeredPane());  setContentPane(createContentPane());  setLayout(createRootLayout());  setDoubleBuffered(true);  updateUI();}  }
class C{  public PreferenceScreen addPreferencesForType(final String accountType,PreferenceScreen parent){  PreferenceScreen prefs=null;  if (mAuthenticatorHelper.containsAccountType(accountType)) {    AuthenticatorDescription desc=null;    try {      desc=mAuthenticatorHelper.getAccountTypeDescription(accountType);      if (desc != null && desc.accountPreferencesId != 0) {        Context authContext=getActivity().createPackageContext(desc.packageName,0);        prefs=getPreferenceManager().inflateFromResource(authContext,desc.accountPreferencesId,parent);      }    } catch (    PackageManager.NameNotFoundException e) {      Log.w(TAG,"Couldn't load preferences.xml file from " + desc.packageName);    }catch (    Resources.NotFoundException e) {      Log.w(TAG,"Couldn't load preferences.xml file from " + desc.packageName);    }  }  return prefs;}  }
class C{  protected Object engineGetParameter(String param) throws InvalidParameterException {  if (param == null) {    throw new NullPointerException("param == null");  }  return null;}  }
class C{  public RTLExpression applyInverse(RTLExpression rhs){  int firstBit=((RTLNumber)getFirstBitIndex()).intValue();  int lastBit=((RTLNumber)getLastBitIndex()).intValue();  long bitMask=RTLBitRange.bitMask(0,firstBit - 1) | RTLBitRange.bitMask(lastBit + 1,operand.getBitWidth());  RTLExpression castToOpSize=ExpressionFactory.createZeroFill(ExpressionFactory.createNumber(rhs.getBitWidth(),8),ExpressionFactory.createNumber(getOperand().getBitWidth() - 1,8),rhs);  RTLExpression maskedRhs;  if (firstBit == 0) {    maskedRhs=castToOpSize;  } else {    maskedRhs=ExpressionFactory.createShiftLeft(castToOpSize,getFirstBitIndex());  }  RTLExpression ret=ExpressionFactory.createOr(ExpressionFactory.createAnd(getOperand(),ExpressionFactory.createNumber(bitMask,getOperand().getBitWidth())),maskedRhs);  return ret;}  }
class C{  public void addChild(Adm child){  if (child == null) {    throw new IllegalArgumentException("Could not add a null child to " + this);  }  if (child.getLevel() != getLevel() + 1) {    throw new IllegalArgumentException("a child of level " + child.getLevel() + " ("+ child+ ") should not be added to an Adm with level "+ getLevel()+ " : "+ child+ " but will be added");  }  List<Adm> currentChilds=getChildren();  if (currentChilds == null) {    currentChilds=new ArrayList<Adm>();  }  currentChilds.add(child);  this.setChildren(currentChilds);  child.setParent(this);}  }
class C{  public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);  List<Mesh> list=new ArrayList<>();  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {    Mesh mesh=generateMesh(md5Model,md5Mesh);    handleTexture(mesh,md5Mesh,defaultColour);    list.add(mesh);  }  Mesh[] meshes=new Mesh[list.size()];  meshes=list.toArray(meshes);  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);  return result;}  }
class C{  public static BigDecimal calculateFiFo(MProduct product,int M_AttributeSetInstance_ID,MAcctSchema as,int AD_Org_ID){  String sql="SELECT t.MovementQty, mi.Qty, il.QtyInvoiced, il.PriceActual," + " i.C_Currency_ID, i.DateAcct, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID, t.M_Transaction_ID " + "FROM M_Transaction t"+ " INNER JOIN M_MatchInv mi ON (t.M_InOutLine_ID=mi.M_InOutLine_ID)"+ " INNER JOIN C_InvoiceLine il ON (mi.C_InvoiceLine_ID=il.C_InvoiceLine_ID)"+ " INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) "+ "WHERE t.M_Product_ID=?";  if (AD_Org_ID != 0)   sql+=" AND t.AD_Org_ID=?"; else   if (M_AttributeSetInstance_ID != 0)   sql+=" AND t.M_AttributeSetInstance_ID=?";  sql+=" ORDER BY t.M_Transaction_ID";  PreparedStatement pstmt=null;  ResultSet rs=null;  int oldTransaction_ID=0;  ArrayList<QtyCost> fifo=new ArrayList<QtyCost>();  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,product.getM_Product_ID());    if (AD_Org_ID != 0)     pstmt.setInt(2,AD_Org_ID); else     if (M_AttributeSetInstance_ID != 0)     pstmt.setInt(2,M_AttributeSetInstance_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      BigDecimal movementQty=rs.getBigDecimal(1);      int M_Transaction_ID=rs.getInt(10);      if (M_Transaction_ID == oldTransaction_ID)       continue;      M_Transaction_ID=oldTransaction_ID;      BigDecimal matchQty=rs.getBigDecimal(2);      if (matchQty == null) {        if (fifo.size() > 0) {          QtyCost pp=(QtyCost)fifo.get(0);          pp.Qty=pp.Qty.add(movementQty);          BigDecimal remainder=pp.Qty;          if (remainder.signum() == 0)           fifo.remove(0); else {            while (remainder.signum() != 0) {              if (fifo.size() == 1) {                pp.Cost=Env.ZERO;                remainder=Env.ZERO;              } else {                fifo.remove(0);                pp=(QtyCost)fifo.get(0);                pp.Qty=pp.Qty.add(movementQty);                remainder=pp.Qty;              }            }          }        } else {          QtyCost pp=new QtyCost(movementQty,Env.ZERO);          fifo.add(pp);        }        s_log.finer("Movement=" + movementQty + ", Size="+ fifo.size());        continue;      }      BigDecimal price=rs.getBigDecimal(4);      int C_Currency_ID=rs.getInt(5);      Timestamp DateAcct=rs.getTimestamp(6);      int C_ConversionType_ID=rs.getInt(7);      int Client_ID=rs.getInt(8);      int Org_ID=rs.getInt(9);      BigDecimal cost=MConversionRate.convert(product.getCtx(),price,C_Currency_ID,as.getC_Currency_ID(),DateAcct,C_ConversionType_ID,Client_ID,Org_ID);      boolean used=false;      if (fifo.size() == 1) {        QtyCost pp=(QtyCost)fifo.get(0);        if (pp.Qty.signum() < 0) {          pp.Qty=pp.Qty.add(movementQty);          if (pp.Qty.signum() == 0)           fifo.remove(0); else           pp.Cost=cost;          used=true;        }      }      if (!used) {        QtyCost pp=new QtyCost(movementQty,cost);        fifo.add(pp);      }      s_log.finer("Movement=" + movementQty + ", Size="+ fifo.size());    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (fifo.size() == 0) {    return null;  }  QtyCost pp=(QtyCost)fifo.get(0);  s_log.finer(product.getName() + " = " + pp.Cost);  return pp.Cost;}  }
class C{  private boolean isSameVdcAsLocalNode(String node){  PropertyInfoExt vdcProps=LocalRepository.getInstance().getVdcPropertyInfo();  String myVdcId=vdcProps.getProperty("vdc_myid");  String vdcShortId=getVdcShortIdByIp(node);  if (vdcShortId != null && vdcShortId.equals(myVdcId)) {    log.info(node + " is in the same vdc as localhost");    return true;  }  log.info(node + " is NOT in the same vdc as localhost");  return false;}  }
class C{  private Object readText(InputNode node) throws Exception {  Label text=group.getText();  Converter converter=text.getConverter(context);  return converter.read(node);}  }
class C{  public LoopedSoundSource(String sound,int radius,int volume,SoundLayer layer){  setRPClass(RPCLASS_NAME);  put("type",RPCLASS_NAME);  put("sound",sound);  put("radius",radius);  put("volume",volume);  put("layer",layer.ordinal());}  }
class C{  public static void sort(int[] array){  DualPivotQuicksort.sort(array);}  }
class C{  @Override public void load(Entity unit,boolean checkFalse,int bayNumber){  load(unit,checkFalse);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("unchecked") public Response onCommand(POP3Session session,Request request){  if (session.getHandlerState() == POP3Session.TRANSACTION) {    List<MessageMetaData> uidList=(List<MessageMetaData>)session.getAttachment(POP3Session.UID_LIST,State.Transaction);    List<String> deletedUidList=(List<String>)session.getAttachment(POP3Session.DELETED_UID_LIST,State.Transaction);    long size=0;    int count=0;    if (uidList.isEmpty() == false) {      List<MessageMetaData> validResults=new ArrayList<MessageMetaData>();      for (      MessageMetaData data : uidList) {        if (deletedUidList.contains(data.getUid()) == false) {          size+=data.getSize();          count++;          validResults.add(data);        }      }    }    StringBuilder responseBuffer=new StringBuilder(32).append(count).append(" ").append(size);    return new POP3Response(POP3Response.OK_RESPONSE,responseBuffer.toString());  } else {    return POP3Response.ERR;  }}  }
class C{  public final void identity(){  int i, j;  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=0.0;    }  }  int l;  if (nRow < nCol) {    l=nRow;  } else {    l=nCol;  }  for (i=0; i < l; i++) {    values[i][i]=1.0;  }}  }
class C{  public boolean isFilled(){  return filled;}  }
class C{  public void removeOwnerFromGroup(String email,String groupId) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  delete(new URL(baseDomainUrl + groupId + "/owner/"+ email));}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public static List<T> list(final HGSearchResult<T> result){  final List<T> outputList=new ArrayList<T>();  while (result.hasNext()) {    final T currentValue=result.next();    outputList.add(currentValue);  }  return outputList;}  }
class C{  void sendUpdate(){  String msg="SET " + bus + " GL ";  msg+=(address.getNumber());  msg+=(isForward ? " 1" : " 0");  msg+=" " + ((int)(speedSetting * maxsteps));  msg+=" ";  msg+=maxsteps;  msg+=f0 ? " 1" : " 0";  msg+=f1 ? " 1" : " 0";  msg+=f2 ? " 1" : " 0";  msg+=f3 ? " 1" : " 0";  msg+=f4 ? " 1" : " 0";  msg+=f5 ? " 1" : " 0";  msg+=f6 ? " 1" : " 0";  msg+=f7 ? " 1" : " 0";  msg+=f8 ? " 1" : " 0";  msg+=f9 ? " 1" : " 0";  msg+=f10 ? " 1" : " 0";  msg+=f11 ? " 1" : " 0";  msg+=f12 ? " 1" : " 0";  msg+=f13 ? " 1" : " 0";  msg+=f14 ? " 1" : " 0";  msg+=f15 ? " 1" : " 0";  msg+=f16 ? " 1" : " 0";  msg+=f17 ? " 1" : " 0";  msg+=f18 ? " 1" : " 0";  msg+=f19 ? " 1" : " 0";  msg+=f20 ? " 1" : " 0";  msg+=f21 ? " 1" : " 0";  msg+=f22 ? " 1" : " 0";  msg+=f23 ? " 1" : " 0";  msg+=f24 ? " 1" : " 0";  msg+=f25 ? " 1" : " 0";  msg+=f26 ? " 1" : " 0";  msg+=f27 ? " 1" : " 0";  msg+=f28 ? " 1" : " 0";  SRCPMessage m=new SRCPMessage(msg + "\n");  ((SRCPBusConnectionMemo)adapterMemo).getTrafficController().sendSRCPMessage(m,null);}  }
class C{  ExtensionFileFilter(final String extension,final String description){  this.extension=extension;  this.description=description;}  }
class C{  public static <S,T>Function<Pair<S,T>,Pair<T,S>> swappedPair(){  return (Function<Pair<S,T>,Pair<T,S>>)(Function<?,?>)SWAPPED_PAIR_FUNCTION;}  }
class C{  public void close() throws IOException {  RAStream localRaf=ras;  if (localRaf != null) {synchronized (localRaf) {      ras=null;      localRaf.close();    }    if (fileToDeleteOnClose != null) {      fileToDeleteOnClose.delete();      fileToDeleteOnClose=null;    }  }}  }
class C{  public final boolean[] signature(final double[] vector){  boolean[] sig=new boolean[this.hyperplanes.length];  for (int i=0; i < this.hyperplanes.length; i++) {    sig[i]=(dotProduct(this.hyperplanes[i],vector) >= 0);  }  return sig;}  }
class C{  public Iterator<Flags.Flag> systemFlagIterator(){  return Arrays.asList(modifiedFlags.getSystemFlags()).iterator();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String fileName=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  String returnHeaderFile="";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  String outDir=(new File(imageFiles[0])).getParentFile().toString();  if (args.length > 1) {    outDir=args[1];  }  if (!outDir.endsWith(File.separator)) {    outDir=outDir + File.separator;  }  try {    for (i=0; i < numImages; i++) {      int progress=(int)(100f * i / (numImages - 1));      if (numImages > 1) {        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      fileName=imageFiles[i];      if (!((new File(fileName)).exists())) {        showFeedback("Image file does not exist.");        break;      }      File file=new File(fileName);      String fileExtension=whitebox.utilities.FileUtilities.getFileExtension(fileName).toLowerCase();      String shortFileName=file.getName().replace("." + fileExtension,"");      long fileLength=file.length();      file=null;      String srtmFormat="SRTM1";      if (fileLength == 3601 * 3601 * 2) {        rows=3601;        cols=3601;      } else       if (fileLength == 1201 * 1201 * 2) {        rows=1201;        cols=1201;        srtmFormat="SRTM3";      } else {        showFeedback("The input SRTM file does not appear to be supported by the import tool.");        return;      }      double cellSize=1.0 / cols;      char[] charArray=shortFileName.toCharArray();      char[] tmp=new char[2];      tmp[0]=charArray[1];      tmp[1]=charArray[2];      double south=Double.parseDouble(new String(tmp));      if (charArray[0] == 'S' || charArray[0] == 's') {        south=-south;      }      south=south - (0.5 * cellSize);      tmp=new char[3];      tmp[0]=charArray[4];      tmp[1]=charArray[5];      tmp[2]=charArray[6];      double west=Double.parseDouble(new String(tmp));      if (charArray[3] == 'W' || charArray[3] == 'w') {        west=-west;      }      west=west - (0.5 * cellSize);      double north=south + 1.0 + cellSize;      double east=west + 1.0 + cellSize;      String whiteboxHeaderFile=outDir + shortFileName + ".dep";      if (i == 0) {        returnHeaderFile=whiteboxHeaderFile;      }      WhiteboxRaster output=new WhiteboxRaster(whiteboxHeaderFile,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.INTEGER,noData,noData);      RandomAccessFile rIn=null;      FileChannel inChannel=null;      ByteBuffer buf=ByteBuffer.allocate((int)fileLength);      rIn=new RandomAccessFile(fileName,"r");      inChannel=rIn.getChannel();      inChannel.position(0);      inChannel.read(buf);      java.nio.ByteOrder byteorder=java.nio.ByteOrder.BIG_ENDIAN;      buf.order(byteorder);      buf.rewind();      byte[] ba=new byte[(int)fileLength];      buf.get(ba);      double z;      row=0;      col=0;      int pos=0;      int oldProgress=-1;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=(double)buf.getShort(pos);          output.setValue(row,col,z);          pos+=2;        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          updateProgress("Importing SRTM file...",progress);          oldProgress=progress;        }      }      inChannel.close();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.setXYUnits("degrees");      output.setProjection("geographic coordinates");      output.setZUnits("metres");      output.writeHeaderFile();      output.close();    }    returnData(returnHeaderFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  public void mv(File src,File dst){  run(null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void load(int id){  if (!isSoundLoaded(id)) {    _soundMap.put(id,_soundPool.load(sContext,id,1));  }}  }
class C{  public void applyImpulses(int curAnswerRow,sim.util.matrix.Vector answers){  Double2D R=new Double2D(answers.vals[curAnswerRow],answers.vals[curAnswerRow + 1]);  if (obj1 instanceof MobileObject2D) {    MobileObject2D mobj1=(MobileObject2D)obj1;    mobj1.setVelocity(mobj1.getVelocity().add(R.multiply(mobj1.getMassInverse())));    mobj1.setAngularVelocity(mobj1.getAngularVelocity() + r1.perpDot(R.multiply(mobj1.getMassMomentOfInertiaInverse())));  }  if (obj2 instanceof MobileObject2D) {    MobileObject2D mobj2=(MobileObject2D)obj2;    mobj2.setVelocity(mobj2.getVelocity().subtract(R.multiply(mobj2.getMassInverse())));    mobj2.setAngularVelocity(mobj2.getAngularVelocity() - r2.perpDot(R.multiply(mobj2.getMassMomentOfInertiaInverse())));  }}  }
class C{  public static String pennPOSToWordnetPOS(String s){  if (s.matches("NN|NNP|NNS|NNPS")) {    return "noun";  }  if (s.matches("VB|VBD|VBG|VBN|VBZ|VBP|MD")) {    return "verb";  }  if (s.matches("JJ|JJR|JJS|CD")) {    return "adjective";  }  if (s.matches("RB|RBR|RBS|RP|WRB")) {    return "adverb";  }  return null;}  }
class C{  public boolean tryLogInWithCookie(final HttpServletRequest request,final HttpServletResponse response){  final Cookie[] cookies=request.getCookies();  if (null == cookies || 0 == cookies.length) {    return false;  }  try {    for (    final Cookie cookie : cookies) {      if (!"b3log-latke".equals(cookie.getName())) {        continue;      }      final JSONObject cookieJSONObject=new JSONObject(cookie.getValue());      final String userId=cookieJSONObject.optString(Keys.OBJECT_ID);      if (Strings.isEmptyOrNull(userId)) {        break;      }      final JSONObject user=userRepository.get(userId);      if (null == user) {        break;      }      final String ip=Requests.getRemoteAddr(request);      if (UserExt.USER_STATUS_C_INVALID == user.optInt(UserExt.USER_STATUS) || UserExt.USER_STATUS_C_INVALID_LOGIN == user.optInt(UserExt.USER_STATUS)) {        Sessions.logout(request,response);        updateOnlineStatus(userId,ip,false);        return false;      }      final String userPassword=user.optString(User.USER_PASSWORD);      final String password=cookieJSONObject.optString(Common.TOKEN);      if (userPassword.equals(password)) {        Sessions.login(request,response,user);        updateOnlineStatus(userId,ip,true);        LOGGER.log(Level.DEBUG,"Logged in with cookie[email={0}]",userId);        return true;      }    }  } catch (  final Exception e) {    LOGGER.log(Level.WARN,"Parses cookie failed, clears the cookie[name=b3log-latke]",e);    final Cookie cookie=new Cookie("b3log-latke",null);    cookie.setMaxAge(0);    cookie.setPath("/");    response.addCookie(cookie);  }  return false;}  }
class C{  public static boolean isNull(JCTree tree){  if (!tree.hasTag(LITERAL))   return false;  JCLiteral lit=(JCLiteral)tree;  return (lit.typetag == BOT);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public SimpleTimeLimiter(ExecutorService executor){  this.executor=checkNotNull(executor);}  }
class C{  Account(String name,int id,double balance){  this(id,balance);  this.name=name;}  }
class C{  @SuppressWarnings("rawtypes") synchronized public ICounter addCounter(final String path,final IInstrument instrument){  if (path == null) {    throw new IllegalArgumentException();  }  final int indexOf=path.lastIndexOf(pathSeparator);  if (indexOf == -1) {    return addCounter2(path,instrument);  }  final String name=path.substring(indexOf + 1,path.length());  final String ppath=path.substring(0,indexOf);  final CounterSet parent=(CounterSet)makePath(ppath);  return parent.addCounter2(name,instrument);}  }
class C{  public Matrix mul(final double scalar){  final Matrix result=new Matrix(rows(),cols());  if (addr.isContiguous()) {    for (int addr=0; addr < size(); addr++) {      result.$[addr]=this.$[addr] * scalar;    }  } else {    int addr=0;    final Address.MatrixAddress.MatrixOffset src=this.addr.offset();    for (int row=0; row < rows(); row++) {      src.setRow(row);      for (int col=0; col < cols(); col++) {        result.$[addr]=this.$[src.op()] * scalar;        addr++;        src.nextCol();      }    }  }  return result;}  }
class C{  @Override public double useKarma(final double negLimit,final double posLimit){  return useKarma(negLimit,posLimit,0.01);}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  public static BigInteger decodeMPI(byte[] mpi,boolean hasLength){  byte[] buf;  if (hasLength) {    int length=(int)readUint32BE(mpi,0);    buf=new byte[length];    System.arraycopy(mpi,4,buf,0,length);  } else   buf=mpi;  if (buf.length == 0)   return BigInteger.ZERO;  boolean isNegative=(buf[0] & 0x80) == 0x80;  if (isNegative)   buf[0]&=0x7f;  BigInteger result=new BigInteger(buf);  return isNegative ? result.negate() : result;}  }
class C{  public void generate(File projectDirectory,String projectName){  File workDir=projectDirectory.getParentFile();  PhpExecutable phpExecutable=new PhpExecutable(composerPath).workDir(workDir).additionalParameters(Arrays.asList(CREATE_PROJECT_COMMAND,NO_INTERACTION_PARAM,PREFER_DIST_PARAM,CAKEPHP_APP,projectName));  Future<Integer> result=phpExecutable.run();  if (result != null) {    try {      result.get();    } catch (    InterruptedException ex) {      Thread.currentThread().interrupt();    }catch (    ExecutionException ex) {      UiUtils.processExecutionException(ex);    }  }}  }
class C{  public void combineContextAndItems(Example examples){  transformContext(examples.context);  transformItems(examples.example);  addContextToItemsAndTransform(examples);}  }
class C{  public int compareTo(Message m){  return toString().compareTo(m.toString());}  }
class C{  @MainThread public void change(T obj){  if (!isLockEnabled) {    throw new RuntimeException("changing of values only cen be performed in locked state");  }  modifiedValue=obj;  notifyInMainThread(modifiedValue);}  }
class C{  public FastAdapterDialog<Item> withTitle(String title){  setTitle(title);  return this;}  }
class C{  public void testBasics() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  document.add(new LongRangeField(FIELD_NAME,new long[]{-10,-10},new long[]{9,10}));  writer.addDocument(document);  document=new Document();  document.add(new LongRangeField(FIELD_NAME,new long[]{10,-10},new long[]{20,10}));  writer.addDocument(document);  document=new Document();  document.add(new LongRangeField(FIELD_NAME,new long[]{-20,-20},new long[]{30,30}));  writer.addDocument(document);  document=new Document();  document.add(new LongRangeField(FIELD_NAME,new long[]{-11,-11},new long[]{1,11}));  writer.addDocument(document);  document=new Document();  document.add(new LongRangeField(FIELD_NAME,new long[]{12,1},new long[]{15,29}));  writer.addDocument(document);  document=new Document();  document.add(new LongRangeField(FIELD_NAME,new long[]{-122,1},new long[]{-115,29}));  writer.addDocument(document);  document=new Document();  document.add(new LongRangeField(FIELD_NAME,new long[]{Long.MIN_VALUE,1},new long[]{-11,29}));  writer.addDocument(document);  document=new Document();  document.add(new LongRangeField(FIELD_NAME,new long[]{-11,-15},new long[]{15,20}));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(7,searcher.count(LongRangeField.newIntersectsQuery(FIELD_NAME,new long[]{-11,-15},new long[]{15,20})));  assertEquals(3,searcher.count(LongRangeField.newWithinQuery(FIELD_NAME,new long[]{-11,-15},new long[]{15,20})));  assertEquals(2,searcher.count(LongRangeField.newContainsQuery(FIELD_NAME,new long[]{-11,-15},new long[]{15,20})));  reader.close();  writer.close();  dir.close();}  }
class C{  public int executeRaw(DatabaseConnection connection,String statement,String[] arguments) throws SQLException {  logger.debug("running raw execute statement: {}",statement);  if (arguments.length > 0) {    logger.trace("execute arguments: {}",(Object)arguments);  }  CompiledStatement compiledStatement=connection.compileStatement(statement,StatementType.EXECUTE,noFieldTypes,DatabaseConnection.DEFAULT_RESULT_FLAGS);  try {    assignStatementArguments(compiledStatement,arguments);    return compiledStatement.runExecute();  }  finally {    compiledStatement.close();  }}  }
class C{  public void startBuilding(String systemID,int lineNr){  this.stack=new Stack();  this.root=null;}  }
class C{  private void writeOutTypeCollection(BytecodeContext bc) throws TransformerException {  GeneratorAdapter adapter=bc.getAdapter();  int index=-1;  Attribute attrIndex=getAttribute("index");  if (attrIndex != null) {    index=adapter.newLocal(Types.VARIABLE_REFERENCE);    adapter.loadArg(0);    attrIndex.getValue().writeOut(bc,Expression.MODE_REF);    adapter.invokeStatic(Types.VARIABLE_INTERPRETER,GET_VARIABLE_REFERENCE);    adapter.storeLocal(index);  }  int item=-1;  Attribute attrItem=getAttribute("item");  if (attrItem != null) {    item=adapter.newLocal(Types.VARIABLE_REFERENCE);    adapter.loadArg(0);    attrItem.getValue().writeOut(bc,Expression.MODE_REF);    adapter.invokeStatic(Types.VARIABLE_INTERPRETER,GET_VARIABLE_REFERENCE);    adapter.storeLocal(item);  }  boolean hasIndexAndItem=index != -1 && item != -1;  boolean hasItem=item != -1;  WhileVisitor whileVisitor=new WhileVisitor();  loopVisitor=whileVisitor;  int it=adapter.newLocal(Types.ITERATOR);  Attribute coll=getAttribute("struct");  if (coll == null)   coll=getAttribute("collection");  coll.getValue().writeOut(bc,Expression.MODE_REF);  int entry=-1;  if (hasIndexAndItem) {    entry=adapter.newLocal(Types.MAP_ENTRY);    adapter.invokeStatic(Types.CASTER,Methods_Caster.TO_COLLECTION);    adapter.invokeInterface(Types.COLLECTION,ENTRY_ITERATOR);  } else {    adapter.invokeStatic(ForEach.FOR_EACH_UTIL,ForEach.LOOP_COLLECTION);  }  adapter.storeLocal(it);  whileVisitor.visitBeforeExpression(bc);  adapter.loadLocal(it);  adapter.invokeInterface(Types.ITERATOR,HAS_NEXT);  whileVisitor.visitAfterExpressionBeforeBody(bc);  if (hasIndexAndItem) {    adapter.loadLocal(it);    adapter.invokeInterface(Types.ITERATOR,NEXT);    adapter.storeLocal(entry);    adapter.loadLocal(index);    adapter.loadArg(0);    adapter.loadLocal(entry);    adapter.invokeInterface(Types.MAP_ENTRY,GET_KEY);    adapter.invokeStatic(Types.CASTER,Methods.METHOD_TO_STRING);    adapter.invokeVirtual(Types.VARIABLE_REFERENCE,SET);    adapter.pop();    adapter.loadLocal(item);    adapter.loadArg(0);    adapter.loadLocal(entry);    adapter.invokeInterface(Types.MAP_ENTRY,GET_VALUE);    adapter.invokeVirtual(Types.VARIABLE_REFERENCE,SET);    adapter.pop();  } else {    if (index == -1)     adapter.loadLocal(item); else     adapter.loadLocal(index);    adapter.loadArg(0);    adapter.loadLocal(it);    adapter.invokeInterface(Types.ITERATOR,NEXT);    adapter.invokeVirtual(Types.VARIABLE_REFERENCE,SET);    adapter.pop();  }  getBody().writeOut(bc);  whileVisitor.visitAfterBody(bc,getEnd());  adapter.loadLocal(it);  adapter.invokeStatic(ForEach.FOR_EACH_UTIL,ForEach.RESET);}  }
class C{  private GridUriDeploymentSpringParser(){}  }
class C{  protected final Object[] copyChildren(){synchronized (children) {    return children.keySet().toArray();  }}  }
class C{  public String scaleTipText(){  return "The factor for scaling the output range (default: 1).";}  }
class C{  private void internalOnVolumeChanged(int streamType,int volume,int prevVolume){  if (isSelfAdjusted(streamType,volume)) {    return;  }  if (mCurrentStream < 0) {    mCurrentStream=streamType;    AudioManagerCompatUtils.forceVolumeControlStream(mAudioManager,mCurrentStream);    mHandler.onControlAcquired(streamType);    return;  }  if (volume == prevVolume) {    return;  }  mHandler.releaseControlDelayed();}  }
class C{  public static Long createLong(String val){  return Long.valueOf(val);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Ministry.getInstance().getJobClipStartTime(getInt(stack)));}  }
class C{  public Vector3d reflect(Vector3dc normal){  double dot=this.dot(normal);  x=x - (dot + dot) * normal.x();  y=y - (dot + dot) * normal.y();  z=z - (dot + dot) * normal.z();  return this;}  }
class C{  public static byte[] buildRowkey(InternalLog log){  final String[] partitions=log.getPartitions();  final Map<String,String> tags=log.getTags();  final SortedMap<Integer,Integer> tagHashMap=generateSortedTagMap(partitions,tags);  long ts=Long.MAX_VALUE - log.getTimestamp();  List<Integer> partitionHashValues=new ArrayList<Integer>();  if (partitions != null) {    for (    String partition : partitions) {      final String tagValue=tags.get(partition);      if (tagValue != null) {        partitionHashValues.add(tagValue.hashCode());      } else {        partitionHashValues.add(EMPTY_PARTITION_DEFAULT_HASH_CODE);      }    }  }  return buildRowkey(log.getPrefix().hashCode(),partitionHashValues,ts,tagHashMap);}  }
class C{  public Entry(char[] ch,int offset,int length,int hash,Entry next){  characters=new char[length];  System.arraycopy(ch,offset,characters,0,length);  symbol=new String(characters).intern();  this.next=next;  this.hashCode=hash;  this.bytes=null;}  }
class C{  public void sendRequest(SsoRequestSettings requestSettings,HttpServletResponse response) throws IOException, ConfigurationException, MarshallingException, InvalidKeyException, NoSuchAlgorithmException, WebssoClientException {  Validate.notNull(requestSettings,"requestSettings");  Validate.notNull(response,"response");  Validate.notNull(getMessageStore(),"messageStore");  Validate.notNull(getMetadataSettings(),"metadataSettings");  String redirectUrl=getRequestUrl(requestSettings);  if (redirectUrl != null) {    response.sendRedirect(redirectUrl);  } else {    logger.error("Fail to generate the SSO request!");  }}  }
class C{  public MutablePeriod(int years,int months,int weeks,int days,int hours,int minutes,int seconds,int millis){  super(years,months,weeks,days,hours,minutes,seconds,millis,PeriodType.standard());}  }
class C{  private void doImportKeyStore() throws Exception {  if (alias != null) {    doImportKeyStoreSingle(loadSourceKeyStore(),alias);  } else {    if (dest != null || srckeyPass != null) {      throw new Exception(rb.getString("if.alias.not.specified.destalias.and.srckeypass.must.not.be.specified"));    }    doImportKeyStoreAll(loadSourceKeyStore());  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double minValue;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String whatToInterpolate="";  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  whatToInterpolate=args[2].toLowerCase();  returnNumberToInterpolate=args[3].toLowerCase();  resolution=Double.parseDouble(args[4]);  double circleCircumscrbingGridCell=Math.sqrt(2) * resolution / 2.0;  excludeNeverClassified=Boolean.parseBoolean(args[5]);  excludeUnclassified=Boolean.parseBoolean(args[6]);  excludeBareGround=Boolean.parseBoolean(args[7]);  excludeLowVegetation=Boolean.parseBoolean(args[8]);  excludeMediumVegetation=Boolean.parseBoolean(args[9]);  excludeHighVegetation=Boolean.parseBoolean(args[10]);  excludeBuilding=Boolean.parseBoolean(args[11]);  excludeLowPoint=Boolean.parseBoolean(args[12]);  excludeModelKeyPoint=Boolean.parseBoolean(args[13]);  excludeWater=Boolean.parseBoolean(args[14]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    PointRecColours pointColours;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      if (!whatToInterpolate.equals("rgb data")) {        str1="Data Scale:\tcontinuous";      } else {        str1="Data Scale:\trgb";      }      out.println(str1);      if (whatToInterpolate.equals("rgb data")) {        str1="Preferred Palette:\t" + "rgb.pal";      } else       if (whatToInterpolate.equals("intensity")) {        str1="Preferred Palette:\t" + "grey.pal";      } else {        str1="Preferred Palette:\t" + "spectrum.pal";      }      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      double halfResolution=resolution / 2;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          results=pointsTree.neighborsWithinRange(entry,circleCircumscrbingGridCell);          if (!results.isEmpty()) {            minValue=Float.POSITIVE_INFINITY;            for (i=0; i < results.size(); i++) {              z=results.get(i).value;              if (z < minValue) {                minValue=z;              }              ;            }            image.setValue(row,col,minValue);          } else {            image.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Interpolating point data:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5){  return construct(e1,e2,e3,e4,e5);}  }
class C{  void generateContent(File fd,long filesize,int minrec,int maxrec) throws IOException {  long start=System.currentTimeMillis();  long totRecs=filesize / ((maxrec + minrec) / 2);  long mod=1;  if (totRecs > 20000) {    mod=totRecs / 20000;  }  m_data=new byte[maxrec];  r.nextBytes(m_data);  m_raf=new RandomAccessFile(fd,"rw");  m_raf.setLength(filesize);  m_raf.seek(0);  long pos=0;  int span=maxrec - minrec;  int recnum=0;  while (pos < (filesize - maxrec)) {    int sze=minrec + r.nextInt(span);    m_raf.write(m_data,0,sze);    if ((++recnum % mod) == 0) {      m_records.add(new Record(pos,sze));    }    pos+=sze;  }  System.out.println("File content generated in " + (System.currentTimeMillis() - start) + "ms");}  }
class C{  protected void endDrawing(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  gl.glPopAttrib();}  }
class C{  public TransactionInput duplicateDetached(){  return new TransactionInput(params,null,bitcoinSerialize(),0);}  }
class C{  @SuppressWarnings("rawtypes") public Iterator<IV> prefixScan(final Literal lit){  if (lit == null)   throw new IllegalArgumentException();  return prefixScan(new Literal[]{lit});}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static File[] findFiles(String fileName){  return findFiles(fileName,null);}  }
class C{  public RemoveEvent(Optional<Entity> entity){  this.entity=entity;}  }
class C{  private static void addSwatchToRow(TableRow row,View swatch,int rowNumber){  if (rowNumber % 2 == 0) {    row.addView(swatch);  } else {    row.addView(swatch,0);  }}  }
class C{  public static long dateValueFromDate(long ms){  Calendar cal=CACHED_CALENDAR.get();  cal.clear();  cal.setTimeInMillis(ms);  return dateValueFromCalendar(cal);}  }
class C{  public MultisigMinCosignatoriesModification(final Deserializer deserializer){  this.relativeChange=deserializer.readInt("relativeChange");}  }
class C{  public PSPIdentifierForSellerException(){}  }
class C{  public int updateBlobTrigger(Connection conn,OperableTrigger trigger) throws SQLException, IOException {  PreparedStatement ps=null;  ByteArrayOutputStream os=null;  try {    os=new ByteArrayOutputStream();    ObjectOutputStream oos=new ObjectOutputStream(os);    oos.writeObject(trigger);    oos.close();    byte[] buf=os.toByteArray();    ByteArrayInputStream is=new ByteArrayInputStream(buf);    ps=conn.prepareStatement(rtp(UPDATE_BLOB_TRIGGER));    ps.setBinaryStream(1,is,buf.length);    ps.setString(2,trigger.getKey().getName());    ps.setString(3,trigger.getKey().getGroup());    return ps.executeUpdate();  }  finally {    closeStatement(ps);    if (os != null) {      os.close();    }  }}  }
class C{  public static BodyQName createWithPrefix(final String uri,final String local,final String prefix){  if (uri == null || uri.length() == 0) {    throw (new IllegalArgumentException("URI is required and may not be null/empty"));  }  if (local == null || local.length() == 0) {    throw (new IllegalArgumentException("Local arg is required and may not be null/empty"));  }  if (prefix == null || prefix.length() == 0) {    return new BodyQName(new QName(uri,local));  } else {    return new BodyQName(new QName(uri,local,prefix));  }}  }
class C{  protected SpatialSampledEdgeDecorator(E delegate){  super(delegate);}  }
class C{  protected Collection snapshotGrantTokens(){  Collection snapshot=null;synchronized (this.grantTokens) {    snapshot=new ArrayList(this.grantTokens.values());  }  return snapshot;}  }
class C{  public FtpURLConnection(URL url){  this(url,null);}  }
class C{  public Builder text(String text){  if (text == null) {    throw new IllegalArgumentException("text must not be null.");  }  if (this.text != null) {    throw new IllegalStateException("text already set.");  }  this.text=text;  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public void prepareTestS3Files(String s3KeyPrefix,Path localTempPath,List<String> localFilePaths,List<String> directoryPaths) throws Exception {  prepareTestS3Files(null,s3KeyPrefix,localTempPath,localFilePaths,directoryPaths);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.TEXT__TEXT:    return getText();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void shutdown() throws InterruptedException {  started.compareAndSet(true,false);  server.shutdown();}  }
class C{  public synchronized void start(){  if (expirationTime == -1) {    expired=false;    expirationTime=LIFETIME + System.currentTimeMillis();  } else {    throw new IllegalStateException("StunServerTransaction " + getTransactionID() + " has already been started!");  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public static void printReplDBMSEvent(StringBuilder stringBuilder,ReplDBMSEvent event,boolean pureSQL,String charset,boolean hex,boolean specs){  if (event == null) {    println(stringBuilder,"- TYPE = null");    return;  }  if (!pureSQL) {    List<ReplOption> metadata=event.getDBMSEvent().getMetadata();    StringBuilder sb=new StringBuilder();    sb.append("[");    for (    ReplOption option : metadata) {      if (sb.length() > 1)       sb.append(";");      String value=option.getOptionValue();      sb.append(option.getOptionName()).append((value != null && value.length() > 0 ? "=" + value : ""));    }    sb.append("]");    println(stringBuilder,"- METADATA = " + sb.toString());    println(stringBuilder,"- TYPE = " + event.getClass().getName());  }  if (event.getDBMSEvent() instanceof DBMSEmptyEvent) {    println(stringBuilder,"## Empty event ##");    return;  }  if (event instanceof ReplDBMSFilteredEvent) {    println(stringBuilder,"## Filtered events ##");    println(stringBuilder,"From Seqno# " + event.getSeqno() + " / Fragno# "+ event.getFragno());    println(stringBuilder,"To Seqno# " + ((ReplDBMSFilteredEvent)event).getSeqnoEnd() + " / Fragno# "+ ((ReplDBMSFilteredEvent)event).getFragnoEnd());    return;  }  ArrayList<DBMSData> data=event.getData();  String lastSchema=null;  for (int i=0; i < data.size(); i++) {    DBMSData dataElem=data.get(i);    if (dataElem instanceof RowChangeData) {      RowChangeData rowChange=(RowChangeData)dataElem;      lastSchema=printRowChangeData(stringBuilder,rowChange,lastSchema,pureSQL,i,charset,hex,specs,event.getSeqno());    } else     if (dataElem instanceof StatementData) {      StatementData statement=(StatementData)dataElem;      lastSchema=printStatementData(stringBuilder,statement,lastSchema,pureSQL,i);    } else     if (dataElem instanceof RowIdData) {      RowIdData rowid=(RowIdData)dataElem;      lastSchema=printRowIdData(stringBuilder,rowid,lastSchema,pureSQL,i);    } else     if (dataElem instanceof LoadDataFileFragment) {      LoadDataFileFragment loadDataFileFragment=(LoadDataFileFragment)dataElem;      String schema=loadDataFileFragment.getDefaultSchema();      printSchema(stringBuilder,schema,lastSchema,pureSQL);      lastSchema=schema;      println("- DATA FILE #" + loadDataFileFragment.getFileID() + " / size : "+ loadDataFileFragment.getData().length);    } else     println(stringBuilder,"# " + dataElem.getClass().getName() + ": not supported.");  }}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  put(index,new Integer(value));  return this;}  }
class C{  public void removeCaretListener(CaretListener listener){  listenerList.remove(CaretListener.class,listener);}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (success)   updateAchievementGoals();  return success;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public JnaTransaction(JnaDatabase database,IntByReference transactionHandle,TransactionState initialState){  super(initialState,database);  handle=transactionHandle;  clientLibrary=database.getClientLibrary();}  }
class C{  private void connectConnectingPortSourceWithHoveringPort(final InputPort input,final OutputPort output,final Port hoveringPort){  try {    Operator destOp=input.getPorts().getOwner().getOperator();    boolean hasConnections=controller.hasConnections(destOp);    controller.connect(output,input);    if (!hasConnections) {      Operator sourceOp=output.getPorts().getOwner().getOperator();      if (destOp != model.getDisplayedChain() && sourceOp != model.getDisplayedChain()) {        destOp.getExecutionUnit().moveToIndex(destOp,destOp.getExecutionUnit().getOperators().indexOf(sourceOp) + 1);      }    }  } catch (  PortException e1) {    if (e1.hasRepairOptions()) {      Point popupPosition=ProcessDrawUtils.createPortLocation(hoveringPort,model);      double zoomFactor=model.getZoomFactor();      popupPosition=new Point((int)(popupPosition.getX() * zoomFactor),(int)(popupPosition.getY() * zoomFactor));      if (hoveringPort.getPorts() != null) {        ExecutionUnit process;        if (hoveringPort.getPorts().getOwner().getOperator() == model.getDisplayedChain()) {          process=hoveringPort.getPorts().getOwner().getConnectionContext();        } else {          process=hoveringPort.getPorts().getOwner().getOperator().getExecutionUnit();        }        int counter=0;        for (        ExecutionUnit unit : model.getProcesses()) {          if (unit == process) {            break;          } else {            counter++;            popupPosition=new Point((int)(popupPosition.x + model.getProcessWidth(unit)),popupPosition.y);          }        }        if (counter > 0) {          popupPosition=new Point(popupPosition.x + ProcessDrawer.WALL_WIDTH,popupPosition.y);        }      }      if (hoveringPort instanceof InputPort) {        popupPosition.setLocation(popupPosition.getX() + 28,popupPosition.getY() - 2);      } else {        popupPosition.setLocation(popupPosition.getX() - 18,popupPosition.getY() - 2);      }      e1.showRepairPopup(view,popupPosition);    } else {      JOptionPane.showMessageDialog(null,e1.getMessage(),"Cannot connect",JOptionPane.ERROR_MESSAGE);    }    view.repaint();  } finally {    cancelConnectionDragging();    connectionDraggingCanceled=true;  }}  }
class C{  public NonRisingVisitor(final Mask mask,final RegionFunction function){  super(mask,function);  final Collection<Vector> directions=this.getDirections();  directions.clear();  directions.add(new Vector(1,0,0));  directions.add(new Vector(-1,0,0));  directions.add(new Vector(0,0,1));  directions.add(new Vector(0,0,-1));  directions.add(new Vector(0,-1,0));}  }
class C{  protected void paintBackground(Graphics g){  super.paintBackground(g);  paintMatchedBracket(g);}  }
class C{  public MergedScope(IScope parent,IScope delegate){  super(parent,false);  this.delegate=delegate;}  }
class C{  public ThaiAnalyzer(){  this(DefaultSetHolder.DEFAULT_STOP_SET);}  }
class C{  public boolean seekXWapApplicationId(int startIndex,int endIndex){  int index=startIndex;  try {    for (index=startIndex; index <= endIndex; ) {      if (decodeIntegerValue(index)) {        int fieldValue=(int)getValue32();        if (fieldValue == PARAMETER_ID_X_WAP_APPLICATION_ID) {          mUnsigned32bit=index + 1;          return true;        }      } else {        if (!decodeTextString(index))         return false;      }      index+=getDecodedDataLength();      if (index > endIndex)       return false;      byte val=mWspData[index];      if (0 <= val && val <= WAP_PDU_SHORT_LENGTH_MAX) {        index+=mWspData[index] + 1;      } else       if (val == WAP_PDU_LENGTH_QUOTE) {        if (index + 1 >= endIndex)         return false;        index++;        if (!decodeUintvarInteger(index))         return false;        index+=getDecodedDataLength();      } else       if (WAP_PDU_LENGTH_QUOTE < val && val <= 127) {        if (!decodeTextString(index))         return false;        index+=getDecodedDataLength();      } else {        index++;      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    return false;  }  return false;}  }
class C{  public VNXeCommandJob restoreFileSystemSnap(String snapId){  _logger.info("restoring file system snap:" + snapId);  String softwareVersion=getBasicSystemInfo().getSoftwareVersion();  FileSystemSnapRequests req=new FileSystemSnapRequests(_khClient,softwareVersion);  return req.restoreFileSystemSnap(snapId,null,softwareVersion);}  }
class C{  public static String serializeToString(Node content) throws ParserException {  TransformerFactory tf=TransformerFactory.newInstance();  StringWriter writer=new StringWriter();  try {    Transformer trans=tf.newTransformer();    trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");    trans.transform(new DOMSource(content),new StreamResult(writer));  } catch (  TransformerException e) {    throw new ParserException("Error while serializing Node to String",e);  }  return writer.toString();}  }
class C{  public void testDeployWhenExpandedWarWithCustomContext() throws Exception {  WAR war=new WAR("ram:///some/expanded/warfile");  war.setContext("context");  war.setFileHandler(this.fileHandler);  this.fsManager.resolveFile(war.getFile()).createFolder();  AbstractCopyingInstalledLocalDeployer deployer=new TestableCopyingDeployer(createContainer(createContainerCapability(DeployableType.WAR),null));  assertFalse(this.fsManager.resolveFile("ram:///webapps/context").exists());  deployer.deploy(war);  assertTrue(this.fsManager.resolveFile("ram:///webapps/context").exists());}  }
class C{  public void purge(int index){  cache.clear();  remove(index);}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  public static void statObject_test() throws Exception {  println("Test: statObject(String bucketName, String objectName)");  String fileName=createFile(3 * MB);  client.putObject(bucketName,fileName,fileName);  Files.delete(Paths.get(fileName));  client.statObject(bucketName,fileName);  client.removeObject(bucketName,fileName);}  }
class C{  @Override public void retry(VolleyError error) throws VolleyError {  mCurrentRetryCount++;  mCurrentTimeoutMs+=(mCurrentTimeoutMs * mBackoffMultiplier);  if (!hasAttemptRemaining()) {    throw error;  }}  }
class C{  public boolean offer(E o){  if (null == o) {    throw new NullPointerException();  }  growToSize(size + 1);  elements[size]=o;  siftUp(size++);  return true;}  }
class C{  public RawProperty addExperimentalProperty(String name,ICalDataType dataType,String value){  RawProperty raw=new RawProperty(name,dataType,value);  addProperty(raw);  return raw;}  }
class C{  public String createFirebaseToken(Game game,String userId){  final AppIdentityService appIdentity=AppIdentityServiceFactory.getAppIdentityService();  final BaseEncoding base64=BaseEncoding.base64();  String header=base64.encode("{\"typ\":\"JWT\",\"alg\":\"RS256\"}".getBytes());  String channelKey=game.getChannelKey(userId);  String clientEmail=appIdentity.getServiceAccountName();  long epochTime=System.currentTimeMillis() / 1000;  long expire=epochTime + 60 * 60;  Map<String,Object> claims=new HashMap<String,Object>();  claims.put("iss",clientEmail);  claims.put("sub",clientEmail);  claims.put("aud",IDENTITY_ENDPOINT);  claims.put("uid",channelKey);  claims.put("iat",epochTime);  claims.put("exp",expire);  String payload=base64.encode(new Gson().toJson(claims).getBytes());  String toSign=String.format("%s.%s",header,payload);  AppIdentityService.SigningResult result=appIdentity.signForApp(toSign.getBytes());  return String.format("%s.%s",toSign,base64.encode(result.getSignature()));}  }
class C{  public ActivationGroupImpl(ActivationGroupID id,MarshalledObject<?> data) throws RemoteException {  super(id);  groupID=id;  unexportObject(this,true);  RMIServerSocketFactory ssf=new ServerSocketFactoryImpl();  UnicastRemoteObject.exportObject(this,0,null,ssf);  if (System.getSecurityManager() == null) {    try {      System.setSecurityManager(new SecurityManager());    } catch (    Exception e) {      throw new RemoteException("unable to set security manager",e);    }  }}  }
class C{  public void addParamHeader(String name,String value){  addParam(name,value,NameValuePair.TYPE_HEADER);}  }
class C{  synchronized boolean cacheConnection(HttpHost host,Connection connection){  boolean ret=false;  if (HttpLog.LOGV) {    HttpLog.v("IdleCache size " + mCount + " host "+ host);  }  if (mCount < IDLE_CACHE_MAX) {    long time=SystemClock.uptimeMillis();    for (int i=0; i < IDLE_CACHE_MAX; i++) {      Entry entry=mEntries[i];      if (entry.mHost == null) {        entry.mHost=host;        entry.mConnection=connection;        entry.mTimeout=time + TIMEOUT;        mCount++;        if (HttpLog.LOGV)         mCached++;        ret=true;        if (mThread == null) {          mThread=new IdleReaper();          mThread.start();        }        break;      }    }  }  return ret;}  }
class C{  public boolean isDone(){  return WebUtils.getCookie(request.getNativeRequest(HttpServletRequest.class),BUYER_COOKIE) != null;}  }
class C{  public Notification clear(){  getSysNotificationManager().cancel(id);  Log.i("ReactSystemNotification","Notification Cleared: " + id);  return this;}  }
class C{  private List<JBBPAbstractField> parseStruct(final JBBPBitInputStream inStream,final JBBPIntCounter positionAtCompiledBlock,final JBBPVarFieldProcessor varFieldProcessor,final JBBPNamedNumericFieldMap namedNumericFieldMap,final JBBPIntCounter positionAtNamedFieldList,final JBBPIntCounter positionAtVarLengthProcessors,final boolean skipStructureFields) throws IOException {  final List<JBBPAbstractField> structureFields=skipStructureFields ? null : new ArrayList<JBBPAbstractField>();  final byte[] compiled=this.compiledBlock.getCompiledData();  boolean endStructureNotMet=true;  while (endStructureNotMet && positionAtCompiledBlock.get() < compiled.length) {    if (!inStream.hasAvailableData() && (flags & FLAG_SKIP_REMAINING_FIELDS_IF_EOF) != 0) {      break;    }    final int c=compiled[positionAtCompiledBlock.getAndIncrement()] & 0xFF;    final boolean wideCode=(c & JBBPCompiler.FLAG_WIDE) != 0;    final int ec=wideCode ? compiled[positionAtCompiledBlock.getAndIncrement()] & 0xFF : 0;    final boolean extraFieldNumAsExpr=(ec & JBBPCompiler.EXT_FLAG_EXTRA_AS_EXPRESSION) != 0;    final int code=(ec << 8) | c;    final JBBPNamedFieldInfo name=(code & JBBPCompiler.FLAG_NAMED) == 0 ? null : compiledBlock.getNamedFields()[positionAtNamedFieldList.getAndIncrement()];    final JBBPByteOrder byteOrder=(code & JBBPCompiler.FLAG_LITTLE_ENDIAN) == 0 ? JBBPByteOrder.BIG_ENDIAN : JBBPByteOrder.LITTLE_ENDIAN;    final boolean resultNotIgnored=!skipStructureFields;    final int extraFieldNumExprResult;    if (extraFieldNumAsExpr) {      final JBBPIntegerValueEvaluator evaluator=this.compiledBlock.getArraySizeEvaluators()[positionAtVarLengthProcessors.getAndIncrement()];      extraFieldNumExprResult=resultNotIgnored ? evaluator.eval(inStream,positionAtCompiledBlock.get(),this.compiledBlock,namedNumericFieldMap) : 0;    } else {      extraFieldNumExprResult=0;    }    final boolean wholeStreamArray;    final int arrayLength;    final int packedArraySizeOffset;switch (code & (JBBPCompiler.FLAG_ARRAY | (JBBPCompiler.EXT_FLAG_EXPRESSION_OR_WHOLESTREAM << 8))) {case JBBPCompiler.FLAG_ARRAY:{        final int pos=positionAtCompiledBlock.get();        arrayLength=JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);        packedArraySizeOffset=positionAtCompiledBlock.get() - pos;        wholeStreamArray=false;      }    break;case (JBBPCompiler.EXT_FLAG_EXPRESSION_OR_WHOLESTREAM << 8):{    wholeStreamArray=resultNotIgnored;    packedArraySizeOffset=0;    arrayLength=0;  }break;case JBBPCompiler.FLAG_ARRAY | (JBBPCompiler.EXT_FLAG_EXPRESSION_OR_WHOLESTREAM << 8):{final JBBPIntegerValueEvaluator evaluator=this.compiledBlock.getArraySizeEvaluators()[positionAtVarLengthProcessors.getAndIncrement()];arrayLength=resultNotIgnored ? evaluator.eval(inStream,positionAtCompiledBlock.get(),this.compiledBlock,namedNumericFieldMap) : 0;packedArraySizeOffset=0;assertArrayLength(arrayLength,name);wholeStreamArray=false;}break;default :{packedArraySizeOffset=0;wholeStreamArray=false;arrayLength=-1;}break;}JBBPAbstractField singleAtomicField=null;try {switch (code & 0xF) {case JBBPCompiler.CODE_RESET_COUNTER:{if (resultNotIgnored) {inStream.resetCounter();}}break;case JBBPCompiler.CODE_ALIGN:{final int alignValue=extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);if (resultNotIgnored) {inStream.align(alignValue);}}break;case JBBPCompiler.CODE_SKIP:{final int skipByteNumber=extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);if (resultNotIgnored && skipByteNumber > 0) {final long skippedBytes=inStream.skip(skipByteNumber);if (skippedBytes != skipByteNumber) {throw new EOFException("Can't skip " + skipByteNumber + " byte(s), skipped only "+ skippedBytes+ " byte(s)");}}}break;case JBBPCompiler.CODE_BIT:{final int numberOfBits=extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);if (resultNotIgnored) {final JBBPBitNumber bitNumber=JBBPBitNumber.decode(numberOfBits);if (arrayLength < 0) {final int read=inStream.readBits(bitNumber);if (read < 0) {throw new EOFException("Can't read bits from stream [" + bitNumber + ']');}singleAtomicField=new JBBPFieldBit(name,read,bitNumber);} else {structureFields.add(new JBBPFieldArrayBit(name,inStream.readBitsArray(wholeStreamArray ? -1 : arrayLength,bitNumber),bitNumber));}}}break;case JBBPCompiler.CODE_VAR:{final int extraField=extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);if (resultNotIgnored) {if (arrayLength < 0) {singleAtomicField=varFieldProcessor.readVarField(inStream,name,extraField,byteOrder,namedNumericFieldMap);JBBPUtils.assertNotNull(singleAtomicField,"A Var processor must not return null as a result of a field reading");if (singleAtomicField instanceof JBBPAbstractArrayField) {throw new JBBPParsingException("A Var field processor has returned an array value instead of a field value [" + name + ':'+ extraField+ ']');}if (singleAtomicField.getNameInfo() != name) {throw new JBBPParsingException("Detected wrong name for a read field , must be " + name + " but detected "+ singleAtomicField.getNameInfo()+ ']');}} else {final JBBPAbstractArrayField<? extends JBBPAbstractField> array=varFieldProcessor.readVarArray(inStream,wholeStreamArray ? -1 : arrayLength,name,extraField,byteOrder,namedNumericFieldMap);JBBPUtils.assertNotNull(array,"A Var processor must not return null as a result of an array field reading [" + name + ':'+ extraField+ ']');if (array.getNameInfo() != name) {throw new JBBPParsingException("Detected wrong name for a read field array, must be " + name + " but detected "+ array.getNameInfo()+ ']');}structureFields.add(array);}}}break;case JBBPCompiler.CODE_CUSTOMTYPE:{final int extraData=extraFieldNumAsExpr ? extraFieldNumExprResult : JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);if (resultNotIgnored) {final JBBPFieldTypeParameterContainer fieldTypeInfo=this.compiledBlock.getCustomTypeFields()[JBBPUtils.unpackInt(compiled,positionAtCompiledBlock)];final JBBPAbstractField field=this.customFieldTypeProcessor.readCustomFieldType(inStream,this.bitOrder,this.flags,fieldTypeInfo,name,extraData,wholeStreamArray,arrayLength);JBBPUtils.assertNotNull(field,"Must not return null as read result");structureFields.add(field);}}break;case JBBPCompiler.CODE_BOOL:{if (resultNotIgnored) {if (arrayLength < 0) {singleAtomicField=new JBBPFieldBoolean(name,inStream.readBoolean());} else {structureFields.add(new JBBPFieldArrayBoolean(name,inStream.readBoolArray(wholeStreamArray ? -1 : arrayLength)));}}}break;case JBBPCompiler.CODE_BYTE:{if (resultNotIgnored) {if (arrayLength < 0) {singleAtomicField=new JBBPFieldByte(name,(byte)inStream.readByte());} else {final byte[] array=inStream.readByteArray(wholeStreamArray ? -1 : arrayLength);structureFields.add(new JBBPFieldArrayByte(name,byteOrder == JBBPByteOrder.LITTLE_ENDIAN ? JBBPUtils.reverseArray(array) : array));}}}break;case JBBPCompiler.CODE_UBYTE:{if (resultNotIgnored) {if (arrayLength < 0) {singleAtomicField=new JBBPFieldUByte(name,(byte)inStream.readByte());} else {final byte[] array=inStream.readByteArray(wholeStreamArray ? -1 : arrayLength);structureFields.add(new JBBPFieldArrayUByte(name,byteOrder == JBBPByteOrder.LITTLE_ENDIAN ? JBBPUtils.reverseArray(array) : array));}}}break;case JBBPCompiler.CODE_INT:{if (resultNotIgnored) {if (arrayLength < 0) {final int value=inStream.readInt(byteOrder);singleAtomicField=new JBBPFieldInt(name,value);} else {structureFields.add(new JBBPFieldArrayInt(name,inStream.readIntArray(wholeStreamArray ? -1 : arrayLength,byteOrder)));}}}break;case JBBPCompiler.CODE_LONG:{if (resultNotIgnored) {if (arrayLength < 0) {final long value=inStream.readLong(byteOrder);singleAtomicField=new JBBPFieldLong(name,value);} else {structureFields.add(new JBBPFieldArrayLong(name,inStream.readLongArray(wholeStreamArray ? -1 : arrayLength,byteOrder)));}}}break;case JBBPCompiler.CODE_SHORT:{if (resultNotIgnored) {if (arrayLength < 0) {final int value=inStream.readUnsignedShort(byteOrder);singleAtomicField=new JBBPFieldShort(name,(short)value);} else {structureFields.add(new JBBPFieldArrayShort(name,inStream.readShortArray(wholeStreamArray ? -1 : arrayLength,byteOrder)));}}}break;case JBBPCompiler.CODE_USHORT:{if (resultNotIgnored) {if (arrayLength < 0) {final int value=inStream.readUnsignedShort(byteOrder);singleAtomicField=new JBBPFieldUShort(name,(short)value);} else {structureFields.add(new JBBPFieldArrayUShort(name,inStream.readShortArray(wholeStreamArray ? -1 : arrayLength,byteOrder)));}}}break;case JBBPCompiler.CODE_STRUCT_START:{if (arrayLength < 0) {final List<JBBPAbstractField> structFields=parseStruct(inStream,positionAtCompiledBlock,varFieldProcessor,namedNumericFieldMap,positionAtNamedFieldList,positionAtVarLengthProcessors,skipStructureFields);JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);if (resultNotIgnored) {structureFields.add(new JBBPFieldStruct(name,structFields.toArray(new JBBPAbstractField[structFields.size()])));}} else {final int nameFieldCurrent=positionAtNamedFieldList.get();final int varLenProcCurrent=positionAtVarLengthProcessors.get();final JBBPFieldStruct[] result;if (resultNotIgnored) {if (wholeStreamArray) {final List<JBBPFieldStruct> list=new ArrayList<JBBPFieldStruct>();while (inStream.hasAvailableData()) {positionAtNamedFieldList.set(nameFieldCurrent);positionAtVarLengthProcessors.set(varLenProcCurrent);final List<JBBPAbstractField> fieldsForStruct=parseStruct(inStream,positionAtCompiledBlock,varFieldProcessor,namedNumericFieldMap,positionAtNamedFieldList,positionAtVarLengthProcessors,skipStructureFields);list.add(new JBBPFieldStruct(name,fieldsForStruct));final int structStart=JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);if (inStream.hasAvailableData()) {positionAtCompiledBlock.set(structStart + (wideCode ? 2 : 1));}}result=list.isEmpty() ? EMPTY_STRUCT_ARRAY : list.toArray(new JBBPFieldStruct[list.size()]);} else {if (arrayLength == 0) {result=EMPTY_STRUCT_ARRAY;parseStruct(inStream,positionAtCompiledBlock,varFieldProcessor,namedNumericFieldMap,positionAtNamedFieldList,positionAtVarLengthProcessors,true);JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);} else {result=new JBBPFieldStruct[arrayLength];for (int i=0; i < arrayLength; i++) {final List<JBBPAbstractField> fieldsForStruct=parseStruct(inStream,positionAtCompiledBlock,varFieldProcessor,namedNumericFieldMap,positionAtNamedFieldList,positionAtVarLengthProcessors,skipStructureFields);final int structBodyStart=JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);result[i]=new JBBPFieldStruct(name,fieldsForStruct);if (i < arrayLength - 1) {positionAtNamedFieldList.set(nameFieldCurrent);positionAtVarLengthProcessors.set(varLenProcCurrent);positionAtCompiledBlock.set(structBodyStart + packedArraySizeOffset + (wideCode ? 2 : 1));}}}}if (result != null) {structureFields.add(new JBBPFieldArrayStruct(name,result));}} else {parseStruct(inStream,positionAtCompiledBlock,varFieldProcessor,namedNumericFieldMap,positionAtNamedFieldList,positionAtVarLengthProcessors,skipStructureFields);JBBPUtils.unpackInt(compiled,positionAtCompiledBlock);}}}break;case JBBPCompiler.CODE_STRUCT_END:{endStructureNotMet=false;}break;default :throw new Error("Detected unexpected field type! Contact developer! [" + code + ']');}} catch (IOException ex) {if (name == null) {throw ex;} else {throw new JBBPParsingException("Can't parse field '" + name.getFieldPath() + "' for IOException",ex);}}if (singleAtomicField != null) {structureFields.add(singleAtomicField);if (namedNumericFieldMap != null && singleAtomicField instanceof JBBPNumericField && name != null) {namedNumericFieldMap.putField((JBBPNumericField)singleAtomicField);}}}return structureFields;}  }
class C{  public ProfileVisit sharedContacts(List<XingUser> sharedContacts){  this.sharedContacts=sharedContacts;  return this;}  }
class C{  protected void lookAndFeelSelectionChanged(ListSelectionEvent e){  if (m_setting)   return;  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  ValueNamePair laf=(ValueNamePair)lookList.getSelectedValue();  LookAndFeel currentLaf=UIManager.getLookAndFeel();  MetalTheme currentTheme=MetalLookAndFeel.getCurrentTheme();  AdempierePLAF.setPLAF(laf,null,false);  previewPanel.refresh(currentLaf,currentTheme);  SwingUtilities.updateComponentTreeUI(previewPanel);  updatePreviewComponents();  setLFSelection();  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));  this.repaint();}  }
class C{  public synchronized long moveToNextSample(){  queueSize--;  int lastReadIndex=relativeReadIndex++;  absoluteReadIndex++;  if (relativeReadIndex == capacity) {    relativeReadIndex=0;  }  return queueSize > 0 ? offsets[relativeReadIndex] : (sizes[lastReadIndex] + offsets[lastReadIndex]);}  }
class C{  @Override protected void onPostCreate(@Nullable Bundle savedInstanceState){  mPermissionRequest=PermissionRequest.with(this).permissions(Manifest.permission.READ_EXTERNAL_STORAGE,Manifest.permission.WRITE_EXTERNAL_STORAGE).rationale(R.string.permission_read_write_rationale).granted(R.string.permission_read_write_granted).denied(R.string.permission_read_write_denied).snackbar((ViewGroup)findViewById(android.R.id.content)).submit();  super.onPostCreate(savedInstanceState);}  }
class C{  public String debug(){  StringBuilder builder=new StringBuilder();  for (  Entry<JournalFile,AtomicInteger> entry : negCounts.entrySet()) {    builder.append(" file = " + entry.getKey() + " negcount value = "+ entry.getValue()+ "\n");  }  return builder.toString();}  }
class C{  public void print(PrintStream ps){  DecimalFormat DF=new DecimalFormat("0.000000");  ps.println("Allpass order:  " + order);  for (int i=0; i < order; i++) {    if (i < order) {      if (k[i] < 0.0)       ps.println("  " + DF.format(k[i]) + "  "+ state[i]); else       ps.println("   " + DF.format(k[i]) + "  "+ state[i]);    } else     ps.println("             " + state[i]);  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext xctxt=transformer.getXPathContext();  xctxt.pushRTFContext();  transformer.executeChildTemplates(this,true);  xctxt.popRTFContext();}  }
class C{  public RippleDrawable(ColorStateList color){  setColor(color);}  }
class C{  public RegisterPanel(RegisterSet reg,JasDocument doc){  initComponents();  register=reg;  data=doc.data;  this.doc=doc;  jPanel25.setVisible(false);  jLabel17.setText(reg.E + ": ");  if (reg.E.length() > 0) {    jLabel1.setText(reg.E);  } else {    jLabel1.setText(" ");  }  if (reg.X.length() > 0) {    jLabel9.setText(reg.X);  } else {    jLabel9.setText("  ");    jPanel14.setBackground(jPanel3.getBackground());    jPanel20.setBackground(jPanel3.getBackground());  }  if (reg.L.length() > 0) {    jLabel10.setText(reg.H);  } else {    jLabel10.setText("  ");    jPanel15.setBackground(jPanel3.getBackground());  }  if (reg.H.length() > 0) {    jLabel14.setText(reg.L);  } else {    jLabel14.setText("  ");    jPanel21.setBackground(jPanel3.getBackground());  }  setHighlight(doc.isHighlightingEnabled());}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public Notifications graphic(Node graphic){  this.graphic=graphic;  return this;}  }
class C{  public boolean isDone(){  return AnimationUtils.currentAnimationTimeMillis() > mAnimation.getStartTime() + mMaxDelay + mDuration;}  }
class C{  protected int bytesPerAtom(){  return (3);}  }
class C{  public LocationConfiguration askForGooglePlayServices(boolean askForGPServices){  this.askForGPServices=askForGPServices;  return this;}  }
class C{  private void removeEdge(){  boolean go=true;  int lastNode;  int proxNode;  int atualNode;  if ((parentMatrix[randomChild][0] != 1) && (childMatrix[randomParent][0] != 1)) {    lastNode=parentMatrix[randomChild][parentMatrix[randomChild][0] - 1];    for (int i=(parentMatrix[randomChild][0] - 1); (i > 0 && go); i--) {      atualNode=parentMatrix[randomChild][i];      if (atualNode != randomParent) {        proxNode=atualNode;        parentMatrix[randomChild][i]=lastNode;        lastNode=proxNode;      } else {        parentMatrix[randomChild][i]=lastNode;        go=false;      }    }    if ((childMatrix[randomParent][0] != 1) && (childMatrix[randomParent][0] != 1)) {      lastNode=childMatrix[randomParent][childMatrix[randomParent][0] - 1];      go=true;      for (int i=(childMatrix[randomParent][0] - 1); (i > 0 && go); i--) {        atualNode=childMatrix[randomParent][i];        if (atualNode != randomChild) {          proxNode=atualNode;          childMatrix[randomParent][i]=lastNode;          lastNode=proxNode;        } else {          childMatrix[randomParent][i]=lastNode;          go=false;        }      }    }    childMatrix[randomParent][(childMatrix[randomParent][0] - 1)]=-4;    childMatrix[randomParent][0]--;    parentMatrix[randomChild][(parentMatrix[randomChild][0] - 1)]=-4;    parentMatrix[randomChild][0]--;  }}  }
class C{  public TransactionInput(NetworkParameters params,Transaction parentTransaction,byte[] msg,int offset,boolean parseLazy,boolean parseRetain) throws ProtocolException {  super(params,msg,offset,parentTransaction,parseLazy,parseRetain,UNKNOWN_LENGTH);  this.parentTransaction=parentTransaction;}  }
class C{  public LatvianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  public static void assertVocabulary(Analyzer a,Path zipFile,String vocOut) throws IOException {  Path tmp=LuceneTestCase.createTempDir();  try (InputStream in=Files.newInputStream(zipFile)){    TestUtil.unzip(in,tmp);  }   try (InputStream in=Files.newInputStream(tmp.resolve(vocOut))){    assertVocabulary(a,in);  } }  }
class C{  public FilteredTollHandler(final double simulationEndTime,final int numberOfTimeBins,final String shapeFile,final Network network,final String userGroup){  this.delegate=new TollInfoHandler(simulationEndTime,numberOfTimeBins);  if (shapeFile != null) {    Collection<SimpleFeature> features=new ShapeFileReader().readFileAndInitialize(shapeFile);    this.zonalGeoms=GeometryUtils.getSimplifiedGeometries(features);  } else   this.zonalGeoms=new ArrayList<>();  this.network=network;  this.ug=userGroup;  LOGGER.info("Area and user group filtering is used, links fall inside the given shape and belongs to the given user group will be considered.");  LOGGER.warn("User group will be identified for Munich scenario only, i.e. Urban, (Rev)Commuter and Freight.");}  }
class C{  public FractionAtom(Atom num,Atom den,int unit,float t){  this(num,den,true,unit,t);}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  Random random=new Random(m_Seed);  m_zeroR=null;  if (data.numAttributes() == 1) {    m_zeroR=new ZeroR();    m_zeroR.buildClassifier(data);    return;  }  data.randomize(random);  if (data.classAttribute().isNominal()) {    data.stratify(m_NumFolds);  }  Instances train=null;  Instances prune=null;  if (!m_NoPruning) {    train=data.trainCV(m_NumFolds,0,random);    prune=data.testCV(m_NumFolds,0);  } else {    train=data;  }  int[][][] sortedIndices=new int[1][train.numAttributes()][0];  double[][][] weights=new double[1][train.numAttributes()][0];  double[] vals=new double[train.numInstances()];  for (int j=0; j < train.numAttributes(); j++) {    if (j != train.classIndex()) {      weights[0][j]=new double[train.numInstances()];      if (train.attribute(j).isNominal()) {        sortedIndices[0][j]=new int[train.numInstances()];        int count=0;        for (int i=0; i < train.numInstances(); i++) {          Instance inst=train.instance(i);          if (!inst.isMissing(j)) {            sortedIndices[0][j][count]=i;            weights[0][j][count]=inst.weight();            count++;          }        }        for (int i=0; i < train.numInstances(); i++) {          Instance inst=train.instance(i);          if (inst.isMissing(j)) {            sortedIndices[0][j][count]=i;            weights[0][j][count]=inst.weight();            count++;          }        }      } else {        for (int i=0; i < train.numInstances(); i++) {          Instance inst=train.instance(i);          vals[i]=inst.value(j);        }        sortedIndices[0][j]=Utils.sort(vals);        for (int i=0; i < train.numInstances(); i++) {          weights[0][j][i]=train.instance(sortedIndices[0][j][i]).weight();        }      }    }  }  double[] classProbs=new double[train.numClasses()];  double totalWeight=0, totalSumSquared=0;  for (int i=0; i < train.numInstances(); i++) {    Instance inst=train.instance(i);    if (data.classAttribute().isNominal()) {      classProbs[(int)inst.classValue()]+=inst.weight();      totalWeight+=inst.weight();    } else {      classProbs[0]+=inst.classValue() * inst.weight();      totalSumSquared+=inst.classValue() * inst.classValue() * inst.weight();      totalWeight+=inst.weight();    }  }  m_Tree=new Tree();  double trainVariance=0;  if (data.classAttribute().isNumeric()) {    trainVariance=m_Tree.singleVariance(classProbs[0],totalSumSquared,totalWeight) / totalWeight;    classProbs[0]/=totalWeight;  }  m_Tree.buildTree(sortedIndices,weights,train,totalWeight,classProbs,new Instances(train,0),m_MinNum,m_MinVarianceProp * trainVariance,0,m_MaxDepth);  if (!m_NoPruning) {    m_Tree.insertHoldOutSet(prune);    m_Tree.reducedErrorPrune();    m_Tree.backfitHoldOutSet();  }}  }
class C{  public NullInfoRegistry(UnconditionalFlowInfo upstream){  this.maxFieldCount=upstream.maxFieldCount;  if ((upstream.tagBits & NULL_FLAG_MASK) != 0) {    long u1, u2, u3, u4, nu2, nu3, nu4;    this.nullBit2=(u1=upstream.nullBit1) & (u2=upstream.nullBit2) & (nu3=~(u3=upstream.nullBit3))& (nu4=~(u4=upstream.nullBit4));    this.nullBit3=u1 & (nu2=~u2) & u3& nu4;    this.nullBit4=u1 & nu2 & nu3& u4;    if ((this.nullBit2 | this.nullBit3 | this.nullBit4) != 0) {      this.tagBits|=NULL_FLAG_MASK;    }    if (upstream.extra != null) {      this.extra=new long[extraLength][];      int length=upstream.extra[2].length;      for (int i=2; i < extraLength; i++) {        this.extra[i]=new long[length];      }      for (int i=0; i < length; i++) {        this.extra[2 + 1][i]=(u1=upstream.extra[1 + 1][i]) & (u2=upstream.extra[2 + 1][i]) & (nu3=~(u3=upstream.extra[3 + 1][i]))& (nu4=~(u4=upstream.extra[4 + 1][i]));        this.extra[3 + 1][i]=u1 & (nu2=~u2) & u3& nu4;        this.extra[4 + 1][i]=u1 & nu2 & nu3& u4;        if ((this.extra[2 + 1][i] | this.extra[3 + 1][i] | this.extra[4 + 1][i]) != 0) {          this.tagBits|=NULL_FLAG_MASK;        }      }    }  }}  }
class C{  public Role findRole(String roleName){  return roles.get(roleName);}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  CorrelationMatrix corrMatrix;  if (dataModel instanceof DataSet) {    try {      DataSet dataSet=(DataSet)dataModel;      ICovarianceMatrix covMatrix=new CovarianceMatrix(dataSet);      corrMatrix=new CorrelationMatrix(covMatrix);    } catch (    Exception e1) {      String message=e1.getMessage();      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),message);      e1.printStackTrace();      throw new RuntimeException(e1);    }  } else   if (dataModel instanceof ICovarianceMatrix) {    corrMatrix=new CorrelationMatrix((ICovarianceMatrix)dataModel);  } else {    String message="Operation not supported for this kind of data set.";    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),message);    throw new RuntimeException(message);  }  CollinearityChooser collinearityChooser=new CollinearityChooser(dataEditor);  int selection=JOptionPane.showOptionDialog(JOptionUtils.centeringComp(),collinearityChooser,"Degree of collinearity",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,new String[]{"Done","Cancel"},"Done");  if (selection == 0 && confirmSplit(corrMatrix,dataModel,(double)collinearityChooser.getCorrelationSize() / 100.)) {    DataModelList splitData=new DataModelList();    DataModelList splitData1=getSplitData(corrMatrix,dataModel,(double)collinearityChooser.getCorrelationSize() / 100.,splitData);    getDataEditor().reset(splitData1);  }}  }
class C{  public Corpse2DView(){  height=IGameScreen.SIZE_UNIT_PIXELS;  width=IGameScreen.SIZE_UNIT_PIXELS;}  }
class C{  @Bean @ConditionalOnMissingBean(RestTemplate.class) public RestTemplate restTemplate(){  log.info("Configuring RestTemplate ...");  return new RestTemplate();}  }
class C{  public Iterator<Object> iterator(){synchronized (children) {    return new BCSIterator(children.keySet().iterator());  }}  }
class C{  public void beginSignleAction(WebRequest theRequest){  theRequest.addParameter("button1","button1");}  }
class C{  public void endExtension() throws IOException {  ResponseWriter writer=getWrapped();  writer.endElement("extension");}  }
class C{  protected void fireEvent(IoFilterEvent event){  executor.execute(event);}  }
class C{  public ObjectInputStream createObjectInputStream(final InputStream in) throws IOException {  return createObjectInputStream(hierarchicalStreamDriver.createReader(in));}  }
class C{  public void run(){  try {    while (!interrupted) {      Buffer inBuffer=inputStream.read();      if (inBuffer == null) {        interrupted=true;        break;      }      int result=codecChain.process(inBuffer);      if ((result != Codec.BUFFER_PROCESSED_OK) && (result != Codec.OUTPUT_BUFFER_NOT_FILLED)) {        interrupted=true;        break;      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void testThreeNodeSubmitQueryWithBoundedLinearizableConsistency() throws Throwable {  testSubmitQuery(3,Query.ConsistencyLevel.LINEARIZABLE_LEASE);}  }
class C{  public final int indexOf(Object elem){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public static Set<String> handleBugCategories(String categories){  Set<String> categorySet=new HashSet<String>();  StringTokenizer tok=new StringTokenizer(categories,",");  while (tok.hasMoreTokens()) {    categorySet.add(tok.nextToken());  }  return categorySet;}  }
class C{  public synchronized String format(LogRecord record){  final StringBuffer sb=new StringBuffer();  sb.append(formatMessage(record));  sb.append(lineSeparator);  return sb.toString();}  }
class C{  public SlowPathException(){  CompilerDirectives.transferToInterpreterAndInvalidate();}  }
class C{  public Object name(){  return name;}  }
class C{  public void putTrip(String key,Trip trip){  trips.put(key,trip);}  }
class C{  public boolean isEnabled(){  boolean enabled=false;  if (getValue(UI_WIDGET_ENABLED).equalsIgnoreCase("true")) {    enabled=true;  }  return enabled;}  }
class C{  public MatlabTest(String name){  super(name);}  }
class C{  public void assertSame(Object expected,Object actual){  TestUtils.assertSame(expected,actual);}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public static void logAndShow(Activity activity,String tag,Throwable t){  Log.e(tag,"Error",t);  String message=t.getMessage();  if (t instanceof GoogleJsonResponseException) {    GoogleJsonError details=((GoogleJsonResponseException)t).getDetails();    if (details != null) {      message=details.getMessage();    }  } else   if (t.getCause() instanceof GoogleAuthException) {    message=((GoogleAuthException)t.getCause()).getMessage();  }  showError(activity,message);}  }
class C{  private static PublicKey generatePublicKey(final String filename){  try {    File f=new File(filename);    FileInputStream fis=new FileInputStream(f);    DataInputStream dis=new DataInputStream(fis);    byte[] keyBytes=new byte[(int)f.length()];    dis.readFully(keyBytes);    dis.close();    X509EncodedKeySpec spec=new X509EncodedKeySpec(keyBytes);    KeyFactory kf=KeyFactory.getInstance(ALGORITHM_RSA);    return kf.generatePublic(spec);  } catch (  Exception e) {    e.printStackTrace();    return null;  }}  }
class C{  public void endRegisterInstantiators(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(registerInstantiatorsInProgressId,-1);  int endRegisterInstantiatorsId;  if (timedOut) {    endRegisterInstantiatorsId=registerInstantiatorsTimedOutId;  } else   if (failed) {    endRegisterInstantiatorsId=registerInstantiatorsFailedId;  } else {    endRegisterInstantiatorsId=registerInstantiatorsId;  }  this.stats.incInt(endRegisterInstantiatorsId,1);  this.stats.incLong(registerInstantiatorsDurationId,duration);}  }
class C{  public void stopWork(){  if (DEBUG) {    Log.d(Log_TAG,String.format("work_status: stopWork %s",this));  }  mExitTasksEarly=true;  setPause(false);  if (null != mImageProvider) {    mImageProvider.flushFileCache();  }}  }
class C{  public synchronized long verifyBeginUpdateMemoryUsed(boolean expected_willSendEvent){  if (!beginUpdateMemoryUsed) {    fail("beginUpdateMemoryUsed was not called");  }  assertEquals(expected_willSendEvent,beginUpdateMemoryUsed_willSendEvent);  return beginUpdateMemoryUsed_bytesUsed;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void processWorkerExit(Worker w,boolean completedAbruptly){  if (completedAbruptly)   decrementWorkerCount();  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    completedTaskCount+=w.completedTasks;    workers.remove(w);  }  finally {    mainLock.unlock();  }  tryTerminate();  int c=ctl.get();  if (runStateLessThan(c,STOP)) {    if (!completedAbruptly) {      int min=allowCoreThreadTimeOut ? 0 : corePoolSize;      if (min == 0 && !workQueue.isEmpty())       min=1;      if (workerCountOf(c) >= min)       return;    }    addWorker(null,false);  }}  }
class C{  static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {  byte[] bytes=new byte[expectedSize];  int remaining=expectedSize;  while (remaining > 0) {    int off=expectedSize - remaining;    int read=in.read(bytes,off,remaining);    if (read == -1) {      return Arrays.copyOf(bytes,off);    }    remaining-=read;  }  int b=in.read();  if (b == -1) {    return bytes;  }  FastByteArrayOutputStream out=new FastByteArrayOutputStream();  out.write(b);  copy(in,out);  byte[] result=new byte[bytes.length + out.size()];  System.arraycopy(bytes,0,result,0,bytes.length);  out.writeTo(result,bytes.length);  return result;}  }
class C{  private static List<SessionNodeModelConfig> buildModelConfigs(Element models){  Elements modelElements=models.getChildElements();  List<SessionNodeModelConfig> configs=new LinkedList<>();  ClassLoader loader=getClassLoader();  for (int i=0; i < modelElements.size(); i++) {    Element model=modelElements.get(i);    String name=model.getAttributeValue("name");    String acronym=model.getAttributeValue("acronym");    String help=model.getAttributeValue("help");    String category=model.getAttributeValue("category");    Class modelClass=null;    Class editorClass=null;    Class paramsClass=null;    Class paramsEditorClass=null;    TetradLoggerConfig loggerConfig=null;    Elements elements=model.getChildElements();    for (int k=0; k < elements.size(); k++) {      Element element=elements.get(k);      if ("model-class".equals(element.getQualifiedName())) {        modelClass=loadClass(loader,element.getValue());      } else       if ("editor-class".equals(element.getQualifiedName())) {        editorClass=loadClass(loader,element.getValue());      } else       if ("params-editor-class".equals(element.getQualifiedName())) {        paramsEditorClass=loadClass(loader,element.getValue());      } else       if ("logger".equals(element.getQualifiedName())) {        loggerConfig=configureLogger(element);      } else {        throw new IllegalStateException("Unknown element: " + element.getQualifiedName());      }    }    if (loggerConfig != null) {      TetradLogger.getInstance().addTetradLoggerConfig(modelClass,loggerConfig);    }    SessionNodeModelConfig config=new DefaultModelConfig(modelClass,paramsClass,paramsEditorClass,editorClass,name,acronym,help,category);    configs.add(config);  }  return configs;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  String version="";  String version1="1.0";  String version2="2.0";  String featureCore;  String featureXML;  boolean success;  java.util.List featuresXML=new java.util.ArrayList();  featuresXML.add("XML");  featuresXML.add("xmL");  java.util.List featuresCore=new java.util.ArrayList();  featuresCore.add("Core");  featuresCore.add("CORE");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN10063=0; indexN10063 < featuresXML.size(); indexN10063++) {    featureXML=(String)featuresXML.get(indexN10063);    success=domImpl.hasFeature(featureXML,version);    assertTrue("domimplementationhasfeature01_XML_1",success);    success=domImpl.hasFeature(featureXML,version1);    assertTrue("domimplementationhasfeature01_XML_2",success);  }  for (int indexN1007C=0; indexN1007C < featuresCore.size(); indexN1007C++) {    featureCore=(String)featuresCore.get(indexN1007C);    success=domImpl.hasFeature(featureCore,version);    assertTrue("domimplementationhasfeature01_Core_1",success);    success=domImpl.hasFeature(featureCore,version1);    success=domImpl.hasFeature(featureCore,version2);    assertTrue("domimplementationhasfeature01_Core_3",success);  }}  }
class C{  private static Element buildTableFieldUIControlNode(Element node,Element bodyNode){  Element controlNode=bodyNode.createElement(NAMESPACE_XFORMS,null);  String name=node.getName();  if (name.equalsIgnoreCase(NODE_ENCOUNTER_LOCATION_ID) || name.equalsIgnoreCase(NODE_ENCOUNTER_PROVIDER_ID)) {    if (useAutoCompleteForNode(name))     controlNode.setName(CONTROL_INPUT); else     controlNode.setName(CONTROL_SELECT1);  } else {    controlNode.setName(CONTROL_INPUT);  }  controlNode.setAttribute(null,ATTRIBUTE_BIND,name);  Element labelNode=bodyNode.createElement(NAMESPACE_XFORMS,null);  labelNode.setName(NODE_LABEL);  labelNode.addChild(Element.TEXT,getDisplayText(name) + "     ");  controlNode.addChild(Element.ELEMENT,labelNode);  addControl(bodyNode,controlNode);  return controlNode;}  }
class C{  private static <DescriptorType>Map<DescriptorType,Object> findOrCreateDescriptorMap(final Map<Class<?>,Map<DescriptorType,Object>> analysisClassToDescriptorMapMap,final Map<Class<?>,? extends IAnalysisEngine<DescriptorType,?>> engineMap,final Class<?> analysisClass){  Map<DescriptorType,Object> descriptorMap=analysisClassToDescriptorMapMap.get(analysisClass);  if (descriptorMap == null) {    descriptorMap=createMap(engineMap,analysisClass);    analysisClassToDescriptorMapMap.put(analysisClass,descriptorMap);  }  return descriptorMap;}  }
class C{  @Override protected Instance process(Instance instance) throws Exception {  Instance result;  int i;  double val;  double factor;  result=(Instance)instance.copy();  if (m_Decimals > -1) {    factor=StrictMath.pow(10,m_Decimals);  } else {    factor=1;  }  for (i=0; i < result.numAttributes(); i++) {    if (!result.attribute(i).isNumeric()) {      continue;    }    if (!m_Cols.isInRange(i)) {      continue;    }    if ((result.classIndex() == i) && (!m_IncludeClass)) {      continue;    }    if (result.value(i) < m_MinThreshold) {      if (getDebug()) {        System.out.println("Too small: " + result.value(i) + " -> "+ m_MinDefault);      }      result.setValue(i,m_MinDefault);    } else     if (result.value(i) > m_MaxThreshold) {      if (getDebug()) {        System.out.println("Too big: " + result.value(i) + " -> "+ m_MaxDefault);      }      result.setValue(i,m_MaxDefault);    } else     if ((result.value(i) - m_CloseTo < m_CloseToTolerance) && (m_CloseTo - result.value(i) < m_CloseToTolerance) && (result.value(i) != m_CloseTo)) {      if (getDebug()) {        System.out.println("Too close: " + result.value(i) + " -> "+ m_CloseToDefault);      }      result.setValue(i,m_CloseToDefault);    }    if (m_Decimals > -1 && !result.isMissing(i)) {      val=result.value(i);      val=StrictMath.round(val * factor) / factor;      result.setValue(i,val);    }  }  return result;}  }
class C{  public boolean succeeded(){  return succeeded;}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.EXECUTION_FLOW__STATE_VECTOR:    return basicSetStateVector(null,msgs);case SexecPackage.EXECUTION_FLOW__SUB_SCOPES:  return ((InternalEList<?>)getSubScopes()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_FLOW__SUPER_SCOPE:return basicSetSuperScope(null,msgs);case SexecPackage.EXECUTION_FLOW__ENTER_SEQUENCES:return ((InternalEList<?>)getEnterSequences()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_FLOW__EXIT_SEQUENCE:return basicSetExitSequence(null,msgs);case SexecPackage.EXECUTION_FLOW__INIT_SEQUENCE:return basicSetInitSequence(null,msgs);case SexecPackage.EXECUTION_FLOW__REACTIONS:return ((InternalEList<?>)getReactions()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_FLOW__REACT_SEQUENCE:return basicSetReactSequence(null,msgs);case SexecPackage.EXECUTION_FLOW__STATES:return ((InternalEList<?>)getStates()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_FLOW__NODES:return ((InternalEList<?>)getNodes()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_FLOW__REGIONS:return ((InternalEList<?>)getRegions()).basicRemove(otherEnd,msgs);case SexecPackage.EXECUTION_FLOW__HISTORY_VECTOR:return basicSetHistoryVector(null,msgs);case SexecPackage.EXECUTION_FLOW__ENTRY_ACTION:return basicSetEntryAction(null,msgs);case SexecPackage.EXECUTION_FLOW__EXIT_ACTION:return basicSetExitAction(null,msgs);case SexecPackage.EXECUTION_FLOW__STATIC_INIT_SEQUENCE:return basicSetStaticInitSequence(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static Map<String,Object> createPerson(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  Locale locale=(Locale)context.get("locale");  GenericValue userLogin=(GenericValue)context.get("userLogin");  String partyId=(String)context.get("partyId");  String description=(String)context.get("description");  if (UtilValidate.isNotEmpty(partyId) && partyId.matches("\\d+")) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"party.id_is_digit",locale));  }  if (UtilValidate.isEmpty(partyId)) {    try {      partyId=delegator.getNextSeqId("Party");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"party.id_generation_failure",locale));    }  }  GenericValue party=null;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);  }  if (party != null) {    if (!"PERSON".equals(party.getString("partyTypeId"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.create.party_exists_not_person_type",locale));    }  } else {    String statusId=(String)context.get("statusId");    if (statusId == null) {      statusId="PARTY_ENABLED";    }    Map<String,Object> newPartyMap=UtilMisc.toMap("partyId",partyId,"partyTypeId","PERSON","description",description,"createdDate",now,"lastModifiedDate",now,"statusId",statusId);    String preferredCurrencyUomId=(String)context.get("preferredCurrencyUomId");    if (!UtilValidate.isEmpty(preferredCurrencyUomId)) {      newPartyMap.put("preferredCurrencyUomId",preferredCurrencyUomId);    }    String externalId=(String)context.get("externalId");    if (!UtilValidate.isEmpty(externalId)) {      newPartyMap.put("externalId",externalId);    }    if (userLogin != null) {      newPartyMap.put("createdByUserLogin",userLogin.get("userLoginId"));      newPartyMap.put("lastModifiedByUserLogin",userLogin.get("userLoginId"));    }    party=delegator.makeValue("Party",newPartyMap);    toBeStored.add(party);    GenericValue statusRec=delegator.makeValue("PartyStatus",UtilMisc.toMap("partyId",partyId,"statusId",statusId,"statusDate",now));    toBeStored.add(statusRec);  }  GenericValue person=null;  try {    person=EntityQuery.use(delegator).from("Person").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);  }  if (person != null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.create.person_exists",locale));  }  person=delegator.makeValue("Person",UtilMisc.toMap("partyId",partyId));  person.setNonPKFields(context);  toBeStored.add(person);  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"person.create.db_error",new Object[]{e.getMessage()},locale));  }  result.put("partyId",partyId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static void close(Iterable<? extends Closeable> objects) throws IOException {  Throwable th=null;  for (  Closeable object : objects) {    try {      if (object != null) {        object.close();      }    } catch (    Throwable t) {      addSuppressed(th,t);      if (th == null) {        th=t;      }    }  }  reThrow(th);}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  public int selectNumberOfControlBits(){  int iNum=0;  iNum=javax.swing.JOptionPane.showOptionDialog(null,"How many C/MRI output bits should be used to control this turnout?","C/MRI Turnout Question",javax.swing.JOptionPane.DEFAULT_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE,null,new String[]{"Use 1 bit","Use 2 bits"},"Use 1 bit");  return iNum;}  }
class C{  public boolean checkLimits(DiagnosticPosition pos,Log log){  if (cp > ClassFile.MAX_CODE) {    log.error(pos,"limit.code");    return true;  }  if (max_locals > ClassFile.MAX_LOCALS) {    log.error(pos,"limit.locals");    return true;  }  if (max_stack > ClassFile.MAX_STACK) {    log.error(pos,"limit.stack");    return true;  }  return false;}  }
class C{  public void restartCoordinator(String type) throws LocalRepositoryException {  final String prefix=String.format("resetCoordinator (%s): ",type);  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_RESTART_COORDINATOR,type};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  public AuthPermission(String name){  super(init(name));}  }
class C{  private void findTypesIn(Object model,Map<String,Type> types){  requireNonNull(model);  requireNonNull(types);  if (HasSupertype.class.isAssignableFrom(model.getClass())) {    ((HasSupertype<?>)model).getSupertype().ifPresent(null);  }  if (HasAnnotationUsage.class.isAssignableFrom(model.getClass())) {    ((HasAnnotationUsage<?>)model).getAnnotations().forEach(null);  }  if (HasClasses.class.isAssignableFrom(model.getClass())) {    ((HasClasses<?>)model).getClasses().forEach(null);  }  if (HasConstructors.class.isAssignableFrom(model.getClass())) {    ((HasConstructors<?>)model).getConstructors().forEach(null);  }  if (HasFields.class.isAssignableFrom(model.getClass())) {    ((HasFields<?>)model).getFields().forEach(null);  }  if (HasGenerics.class.isAssignableFrom(model.getClass())) {    ((HasGenerics<?>)model).getGenerics().forEach(null);  }  if (HasImplements.class.isAssignableFrom(model.getClass())) {    ((HasImplements<?>)model).getInterfaces().forEach(null);  }  if (HasMethods.class.isAssignableFrom(model.getClass())) {    ((HasMethods<?>)model).getMethods().forEach(null);  }  if (HasThrows.class.isAssignableFrom(model.getClass())) {    ((HasThrows<?>)model).getExceptions().forEach(null);  }  if (HasType.class.isAssignableFrom(model.getClass())) {    addType(((HasType<?>)model).getType(),types);  }}  }
class C{  public static boolean isButtonPressed(InputEvent e,int button){  return (e.getModifiers() & button) == button;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=MadMmt.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="mad";  String vmSelectionPolicy="mmt";  String parameter="2.5";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  private synchronized void execute(){  callback.run();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BEComboBoxUI();}  }
class C{  public static double atan2(double y,double x){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.atan2(y,x) : Math.atan2(y,x);  }  if (x > 0.0) {    if (y == 0.0) {      return (1 / y == Double.NEGATIVE_INFINITY) ? -0.0 : 0.0;    }    if (x == Double.POSITIVE_INFINITY) {      if (y == Double.POSITIVE_INFINITY) {        return Math.PI / 4;      } else       if (y == Double.NEGATIVE_INFINITY) {        return -Math.PI / 4;      } else       if (y > 0.0) {        return 0.0;      } else       if (y < 0.0) {        return -0.0;      } else {        return Double.NaN;      }    } else {      return FastMath.atan(y / x);    }  } else   if (x < 0.0) {    if (y == 0.0) {      return (1 / y == Double.NEGATIVE_INFINITY) ? -Math.PI : Math.PI;    }    if (x == Double.NEGATIVE_INFINITY) {      if (y == Double.POSITIVE_INFINITY) {        return 3 * Math.PI / 4;      } else       if (y == Double.NEGATIVE_INFINITY) {        return -3 * Math.PI / 4;      } else       if (y > 0.0) {        return Math.PI;      } else       if (y < 0.0) {        return -Math.PI;      } else {        return Double.NaN;      }    } else     if (y > 0.0) {      return Math.PI / 2 + FastMath.atan(-x / y);    } else     if (y < 0.0) {      return -Math.PI / 2 - FastMath.atan(x / y);    } else {      return Double.NaN;    }  } else   if (x == 0.0) {    if (y == 0.0) {      if (1 / x == Double.NEGATIVE_INFINITY) {        return (1 / y == Double.NEGATIVE_INFINITY) ? -Math.PI : Math.PI;      } else {        return (1 / y == Double.NEGATIVE_INFINITY) ? -0.0 : 0.0;      }    }    if (y > 0.0) {      return Math.PI / 2;    } else     if (y < 0.0) {      return -Math.PI / 2;    } else {      return Double.NaN;    }  } else {    return Double.NaN;  }}  }
class C{  private String createPasswordForUser(String clearTextPassword){  String encryptedPassword=clearTextPassword;  if (this.authenticationInfo.isUseEncryptedPasswords()) {    Encryptor encryptor=null;    ;    try {      encryptor=new Encryptor(this.authenticationInfo);    } catch (    ConfigurationException e) {      throw new ServerRuntimeException(e.getMessage());    }    if (encryptor != null)     encryptedPassword=encryptor.encrypt(clearTextPassword);  }  return encryptedPassword;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void init(int WindowNo,FormFrame frame){  m_WindowNo=WindowNo;  m_frame=frame;  log.info("VMerge.init - WinNo=" + m_WindowNo);  try {    preInit();    jbInit();    frame.getContentPane().add(panel,BorderLayout.CENTER);  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  @Deprecated public static void dragViewToBottom(ActivityInstrumentationTestCase test,View v,int stepCount){  dragViewToBottom(test,test.getActivity(),v,stepCount);}  }
class C{  public ToStringHelper addValue(boolean value){  return addHolder(String.valueOf(value));}  }
class C{  public K auth(Activity act,String type,String account){  if (android.os.Build.VERSION.SDK_INT >= 5 && type.startsWith("g.")) {    ah=new GoogleHandle(act,type,account);  }  return self();}  }
class C{  public static double stddev(int[] a){  return Math.sqrt(var(a));}  }
class C{  public static int reflectionCompare(final Object lhs,final Object rhs,final Collection<String> excludeFields){  return reflectionCompare(lhs,rhs,ReflectionToStringBuilder.toNoNullStringArray(excludeFields));}  }
class C{  protected void sequence_MemberExpression(ISerializationContext context,NewTarget semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.ARRAY_TYPE_SPECIFIER__SIZE:    return getSize();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void init(SolrResourceLoader loader,NamedList<String> initArgs,StorageIO storageIO) throws SolrException {  log.info("Initializing RestManager with initArgs: " + initArgs);  if (storageIO == null)   throw new IllegalArgumentException("Must provide a valid StorageIO implementation to the RestManager!");  this.storageIO=storageIO;  this.loader=loader;  registry=loader.getManagedResourceRegistry();  endpoint=new RestManagerManagedResource(this);  endpoint.loadManagedDataAndNotify(null);  managed.put(CONFIG_BASE_PATH + MANAGED_ENDPOINT,endpoint);  managed.put(SCHEMA_BASE_PATH + MANAGED_ENDPOINT,endpoint);  log.info("Initializing {} registered ManagedResources",registry.registered.size());  for (  ManagedResourceRegistration reg : registry.registered.values()) {    managed.put(reg.resourceId,createManagedResource(reg));  }}  }
class C{  public static void loadConfigResource(String resourceName) throws IOException {  config.clear();  config.putAll(loadPropertiesFromResource(resourceName));}  }
class C{  public TypeValue(String value){  super(SootUtils.toSootType(value));}  }
class C{  public boolean isPowerOfThree(int n){  if (n <= 0)   return false;  while (n > 1 && n % 3 == 0) {    n/=3;  }  return n == 1;}  }
class C{  public InputStreamReader(java.io.InputStream is,java.lang.String enc) throws java.io.UnsupportedEncodingException {}  }
class C{  public ul addElement(li[] list){  for (int x=0; x < list.length; x++) {    addElement(list[x]);  }  return (this);}  }
class C{  @Override public int hashCode(){  return (value == null ? 0 : value.hashCode());}  }
class C{  public boolean contains(String field){  return delegate.contains(field);}  }
class C{  public void test_tx_begin_UPDATE_commit() throws RepositoryException, MalformedQueryException, UpdateExecutionException {  if (true)   return;  assertFalse(cxn.isActive());  cxn.begin();  assertTrue(cxn.isActive());  final URI a=cxn.getValueFactory().createURI(DEFAULT_PREFIX + "a");  final URI b=cxn.getValueFactory().createURI(DEFAULT_PREFIX + "b");  final URI c=cxn.getValueFactory().createURI(DEFAULT_PREFIX + "c");  assertFalse(cxn.hasStatement(a,b,c,true));  cxn.prepareUpdate(QueryLanguage.SPARQL,getNamespaceDeclarations() + "INSERT DATA { :a :b :c }").execute();  assertTrue(cxn.hasStatement(a,b,c,true));{    final BigdataSailRemoteRepositoryConnection cxn2=repo.getConnection();    try {      assertTrue(cxn2 != cxn);      assertFalse(cxn2.hasStatement(a,b,c,true));    }  finally {      cxn2.close();    }  }  cxn.commit();  assertFalse(cxn.isActive());}  }
class C{  public void error(String trace){  printTrace(trace,ERROR_LEVEL);}  }
class C{  public void process(JCas jcas) throws AnalysisEngineProcessException {  Integer offset=0;  String docText=jcas.getDocumentText();  TokenizerFactory<Word> fac=PTBTokenizerFactory.newTokenizerFactory();  fac.setOptions("ptb3Escaping=false,untokenizable=noneKeep");  List<List<HasWord>> tokenArray=MaxentTagger.tokenizeText(new StringReader(docText),fac);  for (  List<HasWord> sentenceToken : tokenArray) {    List<TaggedWord> taggedSentence=mt.tagSentence(sentenceToken);    ListIterator<TaggedWord> twit=taggedSentence.listIterator();    Sentence sentence=new Sentence(jcas);    sentence.setBegin(offset);    Integer wordCount=0;    for (    HasWord wordToken : sentenceToken) {      Token t=new Token(jcas);      TaggedWord tw=twit.next();      if (annotate_partofspeech) {        t.setPos(tw.tag());      }      String thisWord=wordToken.word();      if (docText.indexOf(thisWord,offset) < 0) {        Logger.printDetail(component,"A previously tagged token wasn't found in the document text: \"" + thisWord + "\". "+ "This may be due to unpredictable punctuation tokenization; hence this token isn't tagged.");        continue;      } else {        offset=docText.indexOf(thisWord,offset);        t.setBegin(offset);        ++wordCount;      }      offset+=thisWord.length();      t.setEnd(offset);      if (annotate_tokens) {        t.addToIndexes();      }    }    if (annotate_sentences) {      if (wordCount == 0)       sentence.setEnd(offset); else       sentence.setEnd(offset - 1);      sentence.addToIndexes();    }  }  FSIterator fsi=jcas.getAnnotationIndex(Sentence.type).iterator();  while (fsi.hasNext()) {    Sentence s=(Sentence)fsi.next();    if (s.getBegin() < 0 || s.getEnd() < 0) {      System.err.println("Sentence: " + s.getBegin() + ":"+ s.getEnd()+ " = "+ s.getCoveredText());      System.err.println("wrong index in text: " + jcas.getDocumentText());      System.exit(-1);    }  }  FSIterator fsi2=jcas.getAnnotationIndex(Token.type).iterator();  while (fsi2.hasNext()) {    Token t=(Token)fsi2.next();    if (t.getBegin() < 0 || t.getEnd() < 0) {      System.err.println("In text: " + jcas.getDocumentText());      System.err.println("Token: " + t.getBegin() + ":"+ t.getEnd());      System.exit(-1);    }  }}  }
class C{  void renderEdge(){  glDisable(GL_DEPTH_TEST);  glUseProgram(this.edgeProgram);  glClear(GL_COLOR_BUFFER_BIT);  glUniformMatrix4fv(inverseMatrixUniform,false,invMatrix.get(matrixBuffer));  glUniform1f(invWidthUniform,1.0f / width);  glUniform1f(invHeightUniform,1.0f / height);  glUniform1i(normalTexUniform,0);  glUniform1i(showEdgeUniform,showEdge ? 1 : 0);  glActiveTexture(GL_TEXTURE0);  glBindTexture(GL_TEXTURE_2D,normalTexture);  glUniform1i(depthTexUniform,1);  glActiveTexture(GL_TEXTURE1);  glBindTexture(GL_TEXTURE_2D,depthTexture);  glBindBuffer(GL_ARRAY_BUFFER,this.quadVbo);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glDrawArrays(GL_TRIANGLES,0,6);  glBindTexture(GL_TEXTURE_2D,0);  glActiveTexture(GL_TEXTURE0);  glBindTexture(GL_TEXTURE_2D,0);  glDisableVertexAttribArray(0);  glBindBuffer(GL_ARRAY_BUFFER,0);  glUseProgram(0);}  }
class C{  static Varargs rep(Varargs args){  LuaString s=args.checkstring(1);  int n=args.checkint(2);  final byte[] bytes=new byte[s.length() * n];  int len=s.length();  for (int offset=0; offset < bytes.length; offset+=len) {    s.copyInto(0,bytes,offset,len);  }  return LuaString.valueOf(bytes);}  }
class C{  @Override void drawAffine(final double[] afValues){  pageObjects.addElement(null);  objectType.addElement(DynamicVectorRenderer.AF);  areas.addElement(null);  af1.addElement(afValues[0]);  af2.addElement(afValues[1]);  af3.addElement(afValues[2]);  af4.addElement(afValues[3]);  x_coord=RenderUtils.checkSize(x_coord,currentItem);  y_coord=RenderUtils.checkSize(y_coord,currentItem);  x_coord[currentItem]=(float)afValues[4];  y_coord[currentItem]=(float)afValues[5];  currentItem++;}  }
class C{  public static void deleteFileWithRetry(Path path) throws IOException {  try {    deleteFileWithRetry0(path);  } catch (  InterruptedException x) {    throw new IOException("Interrupted while deleting.",x);  }}  }
class C{  @DSSource({DSSourceKind.BLUETOOTH}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.447 -0500",hash_original_method="2059D974D6DFEDC9A8B8553096188222",hash_generated_method="6E79AC07ED988EFBA15A6F1994AEF577") public int read() throws IOException {  byte b[]=new byte[1];  int ret=mSocket.read(b,0,1);  return (ret + b[0]);}  }
class C{  public static InlineQueryResultCachedVoiceBuilder builder(){  return new InlineQueryResultCachedVoiceBuilder();}  }
class C{  public boolean isNew(){  return m_fdr.isNew();}  }
class C{  public void closeAsMarkedForReschedule(final JsonCommand command,final LoanLifecycleStateMachine loanLifecycleStateMachine,final Map<String,Object> changes){  final LocalDate rescheduledOn=command.localDateValueOfParameterNamed("transactionDate");  final LoanStatus statusEnum=loanLifecycleStateMachine.transition(LoanEvent.LOAN_RESCHEDULE,LoanStatus.fromInt(this.loanStatus));  if (!statusEnum.hasStateOf(LoanStatus.fromInt(this.loanStatus))) {    this.loanStatus=statusEnum.getValue();    changes.put("status",LoanEnumerations.status(this.loanStatus));  }  this.closedOnDate=rescheduledOn.toDate();  this.rescheduledOnDate=rescheduledOn.toDate();  changes.put("closedOnDate",command.stringValueOfParameterNamed("transactionDate"));  changes.put("rescheduledOnDate",command.stringValueOfParameterNamed("transactionDate"));  final LocalDate rescheduledOnLocalDate=new LocalDate(this.rescheduledOnDate);  if (rescheduledOnLocalDate.isBefore(getDisbursementDate())) {    final String errorMessage="The date on which a loan is rescheduled cannot be before the loan disbursement date: " + getDisbursementDate().toString();    throw new InvalidLoanStateTransitionException("close.reschedule","cannot.be.before.submittal.date",errorMessage,rescheduledOnLocalDate,getDisbursementDate());  }  if (rescheduledOnLocalDate.isAfter(new LocalDate())) {    final String errorMessage="The date on which a loan is rescheduled cannot be in the future.";    throw new InvalidLoanStateTransitionException("close.reschedule","cannot.be.a.future.date",errorMessage,rescheduledOnLocalDate);  }}  }
class C{  private void makeRoom(int numValues){  if (values == null) {    values=new float[2 * numValues];    types=new int[2];    numVals=0;    numSeg=0;    return;  }  int newSize=numVals + numValues;  if (newSize > values.length) {    int nlen=values.length * 2;    if (nlen < newSize)     nlen=newSize;    float[] nvals=new float[nlen];    System.arraycopy(values,0,nvals,0,numVals);    values=nvals;  }  if (numSeg == types.length) {    int[] ntypes=new int[types.length * 2];    System.arraycopy(types,0,ntypes,0,types.length);    types=ntypes;  }}  }
class C{  @Override @Inline public ObjectReference traceObject(ObjectReference object,boolean root){  if (root && RCBase.isRCObject(object)) {    rootBuffer.push(object);  }  return object;}  }
class C{  private boolean recursiveDelete(PreferenceGroup group,Preference preference){  if (group == null) {    Log.d(TAG,"attempting to delete from null preference group");    return false;  }  if (preference == null) {    Log.d(TAG,"attempting to delete null preference");    return false;  }  if (group.removePreference(preference)) {    return true;  }  for (int i=0; i < group.getPreferenceCount(); ++i) {    Preference pref=group.getPreference(i);    if (pref instanceof PreferenceGroup) {      if (recursiveDelete((PreferenceGroup)pref,preference)) {        return true;      }    }  }  return false;}  }
class C{  protected void doParse() throws ParseException, IOException {  bufferSize=0;  current=reader.read();  fragmentIdentifierHandler.startFragmentIdentifier();  ident: {    String id=null;switch (current) {case 'x':      bufferize();    current=reader.read();  if (current != 'p') {    parseIdentifier();    break;  }bufferize();current=reader.read();if (current != 'o') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 'i') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 'n') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 't') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 'e') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 'r') {parseIdentifier();break;}bufferize();current=reader.read();if (current != '(') {parseIdentifier();break;}bufferSize=0;current=reader.read();if (current != 'i') {reportCharacterExpectedError('i',current);break ident;}current=reader.read();if (current != 'd') {reportCharacterExpectedError('d',current);break ident;}current=reader.read();if (current != '(') {reportCharacterExpectedError('(',current);break ident;}current=reader.read();if (current != '"' && current != '\'') {reportCharacterExpectedError('\'',current);break ident;}char q=(char)current;current=reader.read();parseIdentifier();id=getBufferContent();bufferSize=0;fragmentIdentifierHandler.idReference(id);if (current != q) {reportCharacterExpectedError(q,current);break ident;}current=reader.read();if (current != ')') {reportCharacterExpectedError(')',current);break ident;}current=reader.read();if (current != ')') {reportCharacterExpectedError(')',current);}break ident;case 's':bufferize();current=reader.read();if (current != 'v') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 'g') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 'V') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 'i') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 'e') {parseIdentifier();break;}bufferize();current=reader.read();if (current != 'w') {parseIdentifier();break;}bufferize();current=reader.read();if (current != '(') {parseIdentifier();break;}bufferSize=0;current=reader.read();parseViewAttributes();if (current != ')') {reportCharacterExpectedError(')',current);}break ident;default :if (current == -1 || !XMLUtilities.isXMLNameFirstCharacter((char)current)) {break ident;}bufferize();current=reader.read();parseIdentifier();}id=getBufferContent();fragmentIdentifierHandler.idReference(id);}fragmentIdentifierHandler.endFragmentIdentifier();}  }
class C{  public void paintTreeBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static RecordBuilder snap(View measuredView){  return ScreenshotImpl.getInstance().snap(measuredView);}  }
class C{  public boolean containsKey(Object key){  return m_lookup.containsKey(key);}  }
class C{  public ProjectionStackSupport(){}  }
class C{  public final boolean isRaw(){  return this.raw;}  }
class C{  public BaseDocumentListEntry(){  super();}  }
class C{  public UniformCostSearch(){  this(new GraphSearch());}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public void addTab(String title,Icon icon,Component component){  insertTab(title,icon,component,null,pages.size());}  }
class C{  public void registerElement(String name) throws Exception {  if (!order.contains(name)) {    order.add(name);  }  elements.put(name,null);}  }
class C{  public static boolean hasCapturedParametersInInvocationSequence(InvocationSequenceData data){  return (null != data.getParameterContentData()) && !data.getParameterContentData().isEmpty();}  }
class C{  @Override protected SystemMember createSystemMember(ApplicationVM app) throws org.apache.geode.admin.AdminException {  return new SystemMemberJmxImpl(this,app);}  }
class C{  public String randomAlphaUpper(int length){  return randomString(JexlStringFunctions.alphaUpper,length);}  }
class C{  public BlockTarget(){  setRPClass("blocktarget");  put("type","blocktarget");  hide();}  }
class C{  private CommandMessage continueSet(Channel channel,SessionStatus state,ChannelBuffer remainder,ChannelHandlerContext channelHandlerContext){  state.cmd.element.setData(remainder);  return state.cmd;}  }
class C{  @Override public void draw(final Graphics g,final int x,final int y){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static long CallStaticLongMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticLongMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,TypeReference.Long,true);  return Reflection.unwrapLong(returnObj);}  }
class C{  public Object read(InputNode node) throws Exception {  Object value=factory.getInstance();  Collection list=(Collection)value;  if (list != null) {    return read(node,list);  }  return null;}  }
class C{  public static String renderBooleanPassthruAttributes(FacesContext context,UIComponent component){  int i=0, len=booleanPassthruAttributes.length;  String value;  boolean thisIsTheFirstAppend=true;  StringBuffer renderedText=new StringBuffer();  for (i=0; i < len; i++) {    if (null != (value=(String)component.getAttributes().get(booleanPassthruAttributes[i]))) {      if (thisIsTheFirstAppend) {        renderedText.append(' ');        thisIsTheFirstAppend=false;      }      if (Boolean.valueOf(value).booleanValue()) {        renderedText.append(booleanPassthruAttributes[i] + ' ');      }    }  }  return renderedText.toString();}  }
class C{  public static DateTimeFormatter dateHourMinuteSecond(){  return Constants.dhms;}  }
class C{  public void testZonesAndTentsDisplayed_afterPatientListView(){  inUserLoginGoToLocationSelection();  inLocationSelectionClickLocation("ALL PRESENT PATIENTS");  pressBack();  inLocationSelectionCheckZonesAndTentsDisplayed();}  }
class C{  public static Graph addCycles(Graph dag,int maxNumCycles,int minCycleLength){  if (maxNumCycles <= 0) {    throw new IllegalArgumentException("maxNumCycles most be > 0: " + maxNumCycles);  }  if (minCycleLength <= 0) {    throw new IllegalArgumentException("minCycleLength most be > 0: " + minCycleLength);  }  Set<Edge> edges=dag.getEdges();  EdgeListGraph graph=new EdgeListGraph(dag.getNodes());  for (  Edge e : edges) {    graph.addEdge(e);  }  int cycles=maxNumCycles;  List<Node> nodes=graph.getNodes();  List<NodePair> cycleEdges=new ArrayList<>();  for (  Node i : nodes) {    List<Node> c=findPotentialCycle(i,graph,-minCycleLength + 1);    for (    Node j : c) {      NodePair p=new NodePair(i,j);      if (!cycleEdges.contains(p)) {        cycleEdges.add(p);      }    }  }  if (cycles > cycleEdges.size()) {    cycles=cycleEdges.size();  }  for (int i=cycles; i > 0; i--) {    int r=RandomUtil.getInstance().nextInt(i);    NodePair p=cycleEdges.get(r);    graph.addDirectedEdge(graph.getNode(p.getFirst().getName()),graph.getNode(p.getSecond().getName()));    cycleEdges.remove(r);  }  return graph;}  }
class C{  public static Object[] nullToEmpty(final Object[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_OBJECT_ARRAY;  }  return array;}  }
class C{  public static <T>List<T> defaultList(List<T> value){  if (value == null) {    return new ArrayList<T>();  } else {    return value;  }}  }
class C{  public static int compileShader(@ShaderType final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compilationStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compilationStatus,0);    if (compilationStatus[0] == 0) {      Timber.e("Error compiling shader %s",GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  protected final void mergeSecurityRoles(WebXml theWebXml){  List<String> securityRoleNames=WebXmlUtils.getSecurityRoleNames(theWebXml);  int count=0;  for (  String securityRoleName : securityRoleNames) {    if (!WebXmlUtils.hasSecurityRole(this.webXml,securityRoleName)) {      WebXmlUtils.addSecurityRole(this.webXml,securityRoleName);    }  }  if (count > 0) {    getLogger().debug("Merged " + count + " security roles into the descriptor",this.getClass().getName());  }}  }
class C{  protected boolean allKeyFieldsPresent(Entity e,EnumSet<DeviceField> keyFields){  for (  DeviceField f : keyFields) {switch (f) {case MAC:      break;case IPV4:    if (e.ipv4Address == null)     return false;  break;case SWITCH:if (e.switchDPID == null) return false;break;case PORT:if (e.switchPort == null) return false;break;case VLAN:break;default :throw new IllegalStateException();}}return true;}  }
class C{  @Override public void close() throws IOException {  _stream.close();}  }
class C{  public LogPanel(){  this(null,false,false,true);}  }
class C{  public boolean equals2D(Coordinate c,double tolerance){  if (!NumberUtil.equalsWithTolerance(this.x,c.x,tolerance)) {    return false;  }  if (!NumberUtil.equalsWithTolerance(this.y,c.y,tolerance)) {    return false;  }  return true;}  }
class C{  public void start(int conditions) throws IOException {  print("conditions",new String[]{Integer.toBinaryString(conditions)});  printer.flush();}  }
class C{  @NamespacePermission(fields="#request?.namespace",permissions=NamespacePermissionEnum.EXECUTE) @Override @Transactional(propagation=Propagation.REQUIRES_NEW) public EmrCluster createCluster(EmrClusterCreateRequest request) throws Exception {  return createClusterImpl(request);}  }
class C{  public PrintStream remove(int index){  if ((index >= 0) && (index < size())) {    m_Timestamps.remove(index);    m_Prefixes.remove(index);    return (PrintStream)m_Streams.remove(index);  } else {    return null;  }}  }
class C{  public void readCVOpsMode(int CV,jmri.ProgListener p,int addr,boolean longAddr) throws jmri.ProgrammerException {  lopsa=addr & 0x7f;  hopsa=(addr / 128) & 0x7f;  mServiceMode=false;  doRead(CV,p,0x2F);}  }
class C{  public static void assertTrue(boolean condition){  assertTrue(null,condition);}  }
class C{  protected CoreContainer createCoreContainer(){  SolrResourceLoader loader=new SolrResourceLoader(SolrResourceLoader.locateSolrHome());  ConfigSolr config=loadConfigSolr(loader);  CoreContainer cores=new CoreContainer(loader,config);  cores.load();  return cores;}  }
class C{  public Builder delay(long delayMs){  currentDelayMs+=delayMs;  return this;}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  private UnManagedVolume findUnmanagedVolumeKnownToVipr(VPlexVirtualVolumeInfo info){  s_logger.info("Determining if Unmanaged Volume {} is known to ViPR",info.getName());  String volumeNativeGuid=info.getPath();  s_logger.info("...checking ViPR's UnManagedVolume table for volume native guid {}",volumeNativeGuid);  URIQueryResultList result=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getVolumeInfoNativeIdConstraint(volumeNativeGuid),result);  if (result.iterator().hasNext()) {    UnManagedVolume unManagedVolume=_dbClient.queryObject(UnManagedVolume.class,result.iterator().next());    if (null != unManagedVolume && !unManagedVolume.getInactive()) {      return unManagedVolume;    }  }  return null;}  }
class C{  public void inline(TestChromosome test){  inline(test.test);}  }
class C{  public static PSQLException extractPSQLException(Throwable exception){  while (exception != null) {    if (exception instanceof PSQLException) {      return (PSQLException)exception;    }    exception=exception.getCause();  }  return null;}  }
class C{  public void deleteNode(final ViewNode node){  Preconditions.checkNotNull(node,"Error: Node argument can't be null");  naviView.getContent().deleteNode(node.getNative());}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public String qty(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  if (value == null)   return "";  int M_Product_ID=Env.getContextAsInt(ctx,WindowNo,"M_Product_ID");  if (steps)   log.warning("qty - init - M_Product_ID=" + M_Product_ID + " - ");  BigDecimal QtyOrdered=Env.ZERO;  BigDecimal QtyEntered=Env.ZERO;  if (M_Product_ID == 0) {    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    mTab.setValue("QtyOrdered",QtyEntered);  } else   if (mField.getColumnName().equals("C_UOM_ID")) {    int C_UOM_To_ID=((Integer)value).intValue();    QtyEntered=(BigDecimal)mTab.getValue("QtyEntered");    QtyOrdered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyOrdered == null)     QtyOrdered=QtyEntered;    boolean conversion=QtyEntered.compareTo(QtyOrdered) != 0;    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyOrdered",QtyOrdered);  } else   if (mField.getColumnName().equals("QtyEntered")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    QtyEntered=(BigDecimal)value;    QtyOrdered=MUOMConversion.convertProductFrom(ctx,M_Product_ID,C_UOM_To_ID,QtyEntered);    if (QtyOrdered == null)     QtyOrdered=QtyEntered;    boolean conversion=QtyEntered.compareTo(QtyOrdered) != 0;    log.fine("qty - UOM=" + C_UOM_To_ID + ", QtyEntered="+ QtyEntered+ " -> "+ conversion+ " QtyOrdered="+ QtyOrdered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyOrdered",QtyOrdered);  } else   if (mField.getColumnName().equals("QtyOrdered")) {    int C_UOM_To_ID=Env.getContextAsInt(ctx,WindowNo,"C_UOM_ID");    QtyOrdered=(BigDecimal)value;    QtyEntered=MUOMConversion.convertProductTo(ctx,M_Product_ID,C_UOM_To_ID,QtyOrdered);    if (QtyEntered == null)     QtyEntered=QtyOrdered;    boolean conversion=QtyOrdered.compareTo(QtyEntered) != 0;    log.fine("qty - UOM=" + C_UOM_To_ID + ", QtyOrdered="+ QtyOrdered+ " -> "+ conversion+ " QtyEntered="+ QtyEntered);    Env.setContext(ctx,WindowNo,"UOMConversion",conversion ? "Y" : "N");    mTab.setValue("QtyEntered",QtyEntered);  }  return qtyBatch(ctx,WindowNo,mTab,mField,value);}  }
class C{  public static Polygon createRegularPolygon(double centerLat,double centerLon,double radiusMeters,int gons){  double[][] result=new double[2][];  result[0]=new double[gons + 1];  result[1]=new double[gons + 1];  for (int i=0; i < gons; i++) {    double angle=360.0 - i * (360.0 / gons);    double x=Math.cos(SloppyMath.toRadians(angle));    double y=Math.sin(SloppyMath.toRadians(angle));    double factor=2.0;    double step=1.0;    int last=0;    while (true) {      double lat=centerLat + y * factor;      GeoUtils.checkLatitude(lat);      double lon=centerLon + x * factor;      GeoUtils.checkLongitude(lon);      double distanceMeters=SloppyMath.haversinMeters(centerLat,centerLon,lat,lon);      if (Math.abs(distanceMeters - radiusMeters) < 0.1) {        result[0][i]=lat;        result[1][i]=lon;        break;      }      if (distanceMeters > radiusMeters) {        factor-=step;        if (last == 1) {          step/=2.0;        }        last=-1;      } else       if (distanceMeters < radiusMeters) {        factor+=step;        if (last == -1) {          step/=2.0;        }        last=1;      }    }  }  result[0][gons]=result[0][0];  result[1][gons]=result[1][0];  return new Polygon(result[0],result[1]);}  }
class C{  public ExecutionNode basicGetNode(){  return node;}  }
class C{  public IgniteInternalFuture<GridCacheReturn> fut(){  final Object obj=this.o;  if (obj instanceof GridCacheReturn)   return new GridFinishedFuture<>((GridCacheReturn)obj); else   if (obj instanceof IgniteInternalFuture)   return (IgniteInternalFuture)obj; else   if (obj == null) {    boolean res=COMPLETABLE_WRAPPER_UPD.compareAndSet(this,null,new GridFutureAdapter<>());    if (res)     return (IgniteInternalFuture)this.o; else     return fut();  } else   throw new IllegalStateException();}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public boolean isAlwaysFalse(){  return alwaysFalse;}  }
class C{  final boolean isMatched(){  Object x=item;  return (x == this) || ((x == null) == isData);}  }
class C{  @Override public View createView(final String name,final String description){  if (!isLoaded()) {    throw new IllegalStateException("Error: The project has not yet been loaded");  }  final INaviView newView=m_project.getContent().createView(name,description);  return ObjectFinders.getObject(newView,m_views);}  }
class C{  public static String base64Encode(byte[] data,boolean isUrlSafe){  Base64 encoder=new Base64(isUrlSafe);  return new String(encoder.encode(data)).replace("\r\n","");}  }
class C{  public static Method findMethod(Class c,String methodName){  return findDeclaredMethod(c,methodName,true);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  ContourPlot clone=(ContourPlot)super.clone();  if (this.domainAxis != null) {    clone.domainAxis=(ValueAxis)this.domainAxis.clone();    clone.domainAxis.setPlot(clone);    clone.domainAxis.addChangeListener(clone);  }  if (this.rangeAxis != null) {    clone.rangeAxis=(ValueAxis)this.rangeAxis.clone();    clone.rangeAxis.setPlot(clone);    clone.rangeAxis.addChangeListener(clone);  }  if (clone.dataset != null) {    clone.dataset.addChangeListener(clone);  }  if (this.colorBar != null) {    clone.colorBar=(ColorBar)this.colorBar.clone();  }  clone.domainMarkers=(List)ObjectUtilities.deepClone(this.domainMarkers);  clone.rangeMarkers=(List)ObjectUtilities.deepClone(this.rangeMarkers);  clone.annotations=(List)ObjectUtilities.deepClone(this.annotations);  if (this.clipPath != null) {    clone.clipPath=(ClipPath)this.clipPath.clone();  }  return clone;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  private static OFActionSetVlanVid decode_set_vlan_id(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((?:0x)?\\d+)").matcher(actionToDecode);  if (n.matches()) {    if (n.group(1) != null) {      try {        VlanVid vlanid=VlanVid.ofVlan(get_short(n.group(1)));        OFActionSetVlanVid.Builder ab=OFFactories.getFactory(version).actions().buildSetVlanVid();        ab.setVlanVid(vlanid);        log.debug("action {}",ab.build());        return ab.build();      } catch (      NumberFormatException e) {        log.debug("Invalid VLAN in: {} (error ignored)",actionToDecode);        return null;      }    }  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }  return null;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int size(){  return this.entries.size();}  }
class C{  public static void assertNotNull(Object object){  Assert.assertNotNull(object);}  }
class C{  public void onProgress(int bytesWritten,int totalSize){}  }
class C{  @Override protected void sendImpl(CommMessage message) throws IOException {  try {    protocol().send(ostream,message,istream);    ostream.flush();  } catch (  IllegalBlockingModeException e) {    throw new IOException(e);  }}  }
class C{  public SVGFeMorphologyElementBridge(){}  }
class C{  public void printCurrentUnits(){  units.printCurrent();}  }
class C{  @Inline public static boolean isForwardedOrBeingForwarded(ObjectReference object){  return (VM.objectModel.readAvailableByte(object) & FORWARDING_MASK) != 0;}  }
class C{  public HistogramSeriesAttributes(ChartGenerator generator,String name,int index,double[] values,int bins,SeriesChangeListener stoppable){  super(generator,name,index,stoppable);  setValues(values);  super.setSeriesName(name);  numBins=bins;  numBinsField.setValue(bins);  numBinsField.setInitialValue(bins);}  }
class C{  public Bindings add(String property,JTextArea textArea,String defaultValue){  registerPropertyChangeListener(textArea);  return add(new JTextComponentBinding(property,textArea,defaultValue));}  }
class C{  public ActionSenderUseChatBucket(String attribute){  this.attribute=attribute;}  }
class C{  public static HandshakeMessage fromByteArray(byte[] byteArray,InetSocketAddress peerAddress) throws HandshakeException {  DatagramReader reader=new DatagramReader(byteArray);  int major=reader.read(VERSION_BITS);  int minor=reader.read(VERSION_BITS);  ProtocolVersion version=new ProtocolVersion(major,minor);  Random random=new Random(reader.readBytes(RANDOM_BYTES));  int sessionIdLength=reader.read(SESSION_ID_LENGTH_BITS);  SessionId sessionId=new SessionId(reader.readBytes(sessionIdLength));  int code=reader.read(CIPHER_SUITE_BITS);  CipherSuite cipherSuite=CipherSuite.getTypeByCode(code);  if (cipherSuite == null) {    throw new HandshakeException(String.format("Server selected unknown cipher suite [%s]",Integer.toHexString(code)),new AlertMessage(AlertLevel.FATAL,AlertDescription.HANDSHAKE_FAILURE,peerAddress));  } else   if (cipherSuite == CipherSuite.TLS_NULL_WITH_NULL_NULL) {    throw new HandshakeException("Server tries to negotiate NULL cipher suite",new AlertMessage(AlertLevel.FATAL,AlertDescription.HANDSHAKE_FAILURE,peerAddress));  }  CompressionMethod compressionMethod=CompressionMethod.getMethodByCode(reader.read(COMPRESSION_METHOD_BITS));  byte[] bytesLeft=reader.readBytesLeft();  HelloExtensions extensions=null;  if (bytesLeft.length > 0) {    extensions=HelloExtensions.fromByteArray(bytesLeft,peerAddress);  }  return new ServerHello(version,random,sessionId,cipherSuite,compressionMethod,extensions,peerAddress);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.DECLARED_VERSION__MAJOR:    setMajor((Integer)newValue);  return;case N4mfPackage.DECLARED_VERSION__MINOR:setMinor((Integer)newValue);return;case N4mfPackage.DECLARED_VERSION__MICRO:setMicro((Integer)newValue);return;case N4mfPackage.DECLARED_VERSION__QUALIFIER:setQualifier((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private static int hashCode(double[] array){  int prime=31;  if (array == null) {    return 0;  }  int result=1;  for (  double element : array) {    long temp=Double.doubleToLongBits(element);    result=(prime * result) + (int)(temp ^ (temp >>> 32));  }  return result;}  }
class C{  public static void addControl(Element bodyNode,Element controlNode){  bodyNode.addChild(Element.ELEMENT,controlNode);}  }
class C{  QsiMessage createPacket(String s){  byte b[]=jmri.util.StringUtil.bytesFromHexString(s);  if (b.length == 0) {    return null;  }  QsiMessage m=new QsiMessage(b.length);  for (int i=0; i < b.length; i++) {    m.setElement(i,b[i]);  }  return m;}  }
class C{  public PowerFunction2D(double a,double b){  this.a=a;  this.b=b;}  }
class C{  public Population(){  super();  data=new ArrayList<Solution>();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Input(String name,@InputType int type,@Alignment int align,Connection connection){  mName=name;  mType=type;  mAlign=align;  mConnection=connection;  if (mConnection != null) {    mConnection.setInput(this);  }}  }
class C{  public void testEqualsBigIntegerTrue(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  Object bNumber=new BigInteger(bSign,bBytes);  assertTrue(aNumber.equals(bNumber));}  }
class C{  public static byte[] downloadBitmapToMemory(Context context,String urlString,int maxBytes){  HttpURLConnection urlConnection=null;  ByteArrayOutputStream out=null;  InputStream in=null;  try {    final URL url=new URL(urlString);    urlConnection=(HttpURLConnection)url.openConnection();    if (urlConnection.getResponseCode() != HttpURLConnection.HTTP_OK) {      return null;    }    in=new BufferedInputStream(urlConnection.getInputStream(),IO_BUFFER_SIZE_BYTES);    out=new ByteArrayOutputStream(IO_BUFFER_SIZE_BYTES);    final byte[] buffer=new byte[128];    int total=0;    int bytesRead;    while ((bytesRead=in.read(buffer)) != -1) {      total+=bytesRead;      if (total > maxBytes) {        return null;      }      out.write(buffer,0,bytesRead);    }    return out.toByteArray();  } catch (  final IOException e) {    Log.e(TAG,"Error in downloadBitmapToMemory - " + e);  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    try {      if (out != null) {        out.close();      }      if (in != null) {        in.close();      }    } catch (    final IOException e) {      Log.e(TAG,"Error in downloadBitmapToMemory - " + e);    }  }  return null;}  }
class C{  protected MouseDragGestureRecognizer(DragSource ds){  this(ds,null);}  }
class C{  @SuppressLint("InlinedApi") public static Bitmap blur(Context context,Bitmap sentBitmap,int radius){  if (radius < 0) {    radius=0;    if (DEBUG) {      Log.w(TAG,"radius must be 0 < r < 25 , forcing radius=0");    }  } else   if (radius > 25) {    radius=25;    if (DEBUG) {      Log.w(TAG,"radius must be 0 < r < 25 , forcing radius=25");    }  }  if (Build.VERSION.SDK_INT > 16) {    Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);    final RenderScript rs=RenderScript.create(context);    final Allocation input=Allocation.createFromBitmap(rs,sentBitmap,Allocation.MipmapControl.MIPMAP_NONE,Allocation.USAGE_SCRIPT);    final Allocation output=Allocation.createTyped(rs,input.getType());    final ScriptIntrinsicBlur script=ScriptIntrinsicBlur.create(rs,Element.U8_4(rs));    script.setRadius(radius);    script.setInput(input);    script.forEach(output);    output.copyTo(bitmap);    return bitmap;  }  Bitmap bitmap=sentBitmap.copy(sentBitmap.getConfig(),true);  if (radius < 1) {    return (null);  }  int w=bitmap.getWidth();  int h=bitmap.getHeight();  int[] pix=new int[w * h];  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.getPixels(pix,0,w,0,0,w,h);  int wm=w - 1;  int hm=h - 1;  int wh=w * h;  int div=radius + radius + 1;  int r[]=new int[wh];  int g[]=new int[wh];  int b[]=new int[wh];  int rsum, gsum, bsum, x, y, i, p, yp, yi, yw;  int vmin[]=new int[Math.max(w,h)];  int divsum=(div + 1) >> 1;  divsum*=divsum;  int dv[]=new int[256 * divsum];  for (i=0; i < 256 * divsum; i++) {    dv[i]=(i / divsum);  }  yw=yi=0;  int[][] stack=new int[div][3];  int stackpointer;  int stackstart;  int[] sir;  int rbs;  int r1=radius + 1;  int routsum, goutsum, boutsum;  int rinsum, ginsum, binsum;  for (y=0; y < h; y++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    for (i=-radius; i <= radius; i++) {      p=pix[yi + Math.min(wm,Math.max(i,0))];      sir=stack[i + radius];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rbs=r1 - Math.abs(i);      rsum+=sir[0] * rbs;      gsum+=sir[1] * rbs;      bsum+=sir[2] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }    }    stackpointer=radius;    for (x=0; x < w; x++) {      r[yi]=dv[rsum];      g[yi]=dv[gsum];      b[yi]=dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (y == 0) {        vmin[x]=Math.min(x + radius + 1,wm);      }      p=pix[yw + vmin[x]];      sir[0]=(p & 0xff0000) >> 16;      sir[1]=(p & 0x00ff00) >> 8;      sir[2]=(p & 0x0000ff);      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[(stackpointer) % div];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi++;    }    yw+=w;  }  for (x=0; x < w; x++) {    rinsum=ginsum=binsum=routsum=goutsum=boutsum=rsum=gsum=bsum=0;    yp=-radius * w;    for (i=-radius; i <= radius; i++) {      yi=Math.max(0,yp) + x;      sir=stack[i + radius];      sir[0]=r[yi];      sir[1]=g[yi];      sir[2]=b[yi];      rbs=r1 - Math.abs(i);      rsum+=r[yi] * rbs;      gsum+=g[yi] * rbs;      bsum+=b[yi] * rbs;      if (i > 0) {        rinsum+=sir[0];        ginsum+=sir[1];        binsum+=sir[2];      } else {        routsum+=sir[0];        goutsum+=sir[1];        boutsum+=sir[2];      }      if (i < hm) {        yp+=w;      }    }    yi=x;    stackpointer=radius;    for (y=0; y < h; y++) {      pix[yi]=(0xff000000 & pix[yi]) | (dv[rsum] << 16) | (dv[gsum] << 8)| dv[bsum];      rsum-=routsum;      gsum-=goutsum;      bsum-=boutsum;      stackstart=stackpointer - radius + div;      sir=stack[stackstart % div];      routsum-=sir[0];      goutsum-=sir[1];      boutsum-=sir[2];      if (x == 0) {        vmin[y]=Math.min(y + r1,hm) * w;      }      p=x + vmin[y];      sir[0]=r[p];      sir[1]=g[p];      sir[2]=b[p];      rinsum+=sir[0];      ginsum+=sir[1];      binsum+=sir[2];      rsum+=rinsum;      gsum+=ginsum;      bsum+=binsum;      stackpointer=(stackpointer + 1) % div;      sir=stack[stackpointer];      routsum+=sir[0];      goutsum+=sir[1];      boutsum+=sir[2];      rinsum-=sir[0];      ginsum-=sir[1];      binsum-=sir[2];      yi+=w;    }  }  Log.e("pix",w + " " + h+ " "+ pix.length);  bitmap.setPixels(pix,0,w,0,0,w,h);  return (bitmap);}  }
class C{  public static void mergeSort(long[] a,int fromIndex,int toIndex,LongComparator c){  rangeCheck(a.length,fromIndex,toIndex);  long aux[]=(long[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex,c);}  }
class C{  public static void reverseInPlace(final byte[] a){  for (int start=0, end=a.length - 1; start < end; start++, end--) {    final byte tmp=a[start];    a[start]=a[end];    a[end]=tmp;  }}  }
class C{  void _m02(float m02){  this.m02=m02;}  }
class C{  private void wakeThreads(int count){  while (true) {    int taskCount=Math.max(0,_taskCount.get());    int spinIdleCount=_spinIdleCount.get();    long threadWakeHead=_threadWakeHead.get();    long threadWakeTail=_threadWakeTail.get();    long threadCount=spinIdleCount + threadWakeHead - threadWakeTail;    if (taskCount <= threadCount) {      return;    }    if (count <= threadCount) {      return;    }    ThreadAmp thread=_idleThreadRing.poll();    if (thread == null) {      return;    }    if (_threadWakeHead.compareAndSet(threadWakeHead,threadWakeHead + 1)) {      thread.setWakeThread();      LockSupport.unpark(thread);    } else {      _idleThreadRing.offer(thread);    }  }}  }
class C{  private void checkCodecRestrictions(Codec codec){  assumeFalse("Class not allowed to use codec: " + codec.getName() + ".",shouldAvoidCodec(codec.getName()));  if (codec instanceof RandomCodec && !avoidCodecs.isEmpty()) {    for (    String name : ((RandomCodec)codec).formatNames) {      assumeFalse("Class not allowed to use postings format: " + name + ".",shouldAvoidCodec(name));    }  }  PostingsFormat pf=codec.postingsFormat();  assumeFalse("Class not allowed to use postings format: " + pf.getName() + ".",shouldAvoidCodec(pf.getName()));  assumeFalse("Class not allowed to use postings format: " + LuceneTestCase.TEST_POSTINGSFORMAT + ".",shouldAvoidCodec(LuceneTestCase.TEST_POSTINGSFORMAT));}  }
class C{  public ASTCombination(Token t){  super(t);}  }
class C{  public Track copyTrack(String newName,Location newLocation){  Track newTrack=newLocation.addTrack(newName,getTrackType());  newTrack.clearTypeNames();  newTrack.setAddCustomLoadsAnySpurEnabled(isAddCustomLoadsAnySpurEnabled());  newTrack.setAddCustomLoadsAnyStagingTrackEnabled(isAddCustomLoadsAnyStagingTrackEnabled());  newTrack.setAddCustomLoadsEnabled(isAddCustomLoadsEnabled());  newTrack.setAlternateTrack(getAlternateTrack());  newTrack.setBlockCarsEnabled(isBlockCarsEnabled());  newTrack.setComment(getComment());  newTrack.setCommentBoth(getCommentBoth());  newTrack.setCommentPickup(getCommentPickup());  newTrack.setCommentSetout(getCommentSetout());  newTrack.setDestinationOption(getDestinationOption());  newTrack.setDestinationIds(getDestinationIds());  newTrack.setDropOption(getDropOption());  newTrack.setDropIds(getDropIds());  newTrack.setIgnoreUsedLengthPercentage(getIgnoreUsedLengthPercentage());  newTrack.setLength(getLength());  newTrack.setLoadEmptyEnabled(isLoadEmptyEnabled());  newTrack.setLoadNames(getLoadNames());  newTrack.setLoadOption(getLoadOption());  newTrack.setLoadSwapEnabled(isLoadSwapEnabled());  newTrack.setPickupOption(getPickupOption());  newTrack.setPickupIds(getPickupIds());  if (getPool() != null) {    newTrack.setPool(newLocation.addPool(getPool().getName()));    newTrack.setMinimumLength(getMinimumLength());  }  newTrack.setRemoveCustomLoadsEnabled(isRemoveCustomLoadsEnabled());  newTrack.setReservationFactor(getReservationFactor());  newTrack.setRoadNames(getRoadNames());  newTrack.setRoadOption(getRoadOption());  newTrack.setScheduleId(getScheduleId());  newTrack.setScheduleMode(getScheduleMode());  newTrack.setServiceOrder(getServiceOrder());  newTrack.setShipLoadNames(getShipLoadNames());  newTrack.setShipLoadOption(getShipLoadOption());  newTrack.setTrainDirections(getTrainDirections());  newTrack.setTypeNames(getTypeNames());  return newTrack;}  }
class C{  @Override public String basePath(){  return "/wm/linkdiscovery";}  }
class C{  @Override public void step(MessageLogger logger){  try {    addAgent();    env.step();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public Matcher matcher(MatchResult res,String groupName){  Integer id=res.pattern().groupId(groupName);  if (id == null)   throw new IllegalArgumentException("group not found:" + groupName);  int group=id;  return matcher(res,group);}  }
class C{  private boolean verifyYInput(JComponent input){  JTextField textField=(JTextField)input;  String inputString=textField.getText();  try {    Double.parseDouble(inputString);  } catch (  NumberFormatException e) {    textField.setForeground(Color.RED);    return false;  }  textField.setForeground(Color.BLACK);  return true;}  }
class C{  @SuppressWarnings("unchecked") private GridCacheSharedContext createSharedContext(GridKernalContext kernalCtx,Collection<CacheStoreSessionListener> storeSesLsnrs) throws IgniteCheckedException {  IgniteTxManager tm=new IgniteTxManager();  GridCacheMvccManager mvccMgr=new GridCacheMvccManager();  GridCacheVersionManager verMgr=new GridCacheVersionManager();  GridCacheDeploymentManager depMgr=new GridCacheDeploymentManager();  GridCachePartitionExchangeManager exchMgr=new GridCachePartitionExchangeManager();  GridCacheIoManager ioMgr=new GridCacheIoManager();  CacheAffinitySharedManager topMgr=new CacheAffinitySharedManager();  GridCacheSharedTtlCleanupManager ttl=new GridCacheSharedTtlCleanupManager();  CacheJtaManagerAdapter jta=JTA.createOptional();  return new GridCacheSharedContext(kernalCtx,tm,verMgr,mvccMgr,depMgr,exchMgr,topMgr,ioMgr,ttl,jta,storeSesLsnrs);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:09.187 -0500",hash_original_method="468AD85F0115764703DC30A2A08F954C",hash_generated_method="8D78EAE151F9C4FB3184ACDDBA16806B") public int stat() throws IOException {  return sendCommand(NNTPCommand.STAT);}  }
class C{  public R addParams(String key,File file,String contentType,String customFileName){  if (key != null) {    mFileParams.put(key,new FileWrapper(file,contentType,customFileName));  }  return (R)this;}  }
class C{  public void enableScrollingToTopOnChange(boolean enable){  isScrollingToTopOnChange=enable;}  }
class C{  public void recordBlockSnapshotOperation(DbClient dbClient,OperationTypeEnum opType,Operation.Status status,String evDesc,Object... extParam){  try {    boolean opStatus=(Operation.Status.ready == status) ? true : false;    String evType;    evType=opType.getEvType(opStatus);    String opStage=AuditLogManager.AUDITOP_END;    _logger.info("opType: {} detail: {}",opType.toString(),evType + ':' + evDesc);    BlockSnapshot snapshot=(BlockSnapshot)extParam[0];    recordBourneBlockSnapshotEvent(dbClient,snapshot.getId(),evType,status,evDesc);    Volume volume;switch (opType) {case CREATE_VOLUME_SNAPSHOT:      volume=(Volume)extParam[1];    if (opStatus) {      AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,snapshot.getId().toString(),snapshot.getLabel(),volume.getId().toString());    } else {      AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,snapshot.getLabel(),volume.getId().toString());    }  break;case RESTORE_VOLUME_SNAPSHOT:case RESYNCHRONIZE_VOLUME_SNAPSHOT:volume=(Volume)extParam[1];AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,snapshot.getId().toString(),volume.getId().toString());break;case ACTIVATE_VOLUME_SNAPSHOT:volume=(Volume)extParam[1];AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,snapshot.getId().toString(),snapshot.getLabel(),volume.getId().toString());break;case DEACTIVATE_VOLUME_SNAPSHOT:case DELETE_VOLUME_SNAPSHOT:AuditBlockUtil.auditBlock(dbClient,opType,opStatus,opStage,snapshot.getId().toString(),snapshot.getLabel(),snapshot.getParent().getName());break;default :_logger.error("unrecognized block snapshot operation type");}} catch (Exception e) {_logger.error("Failed to record block snapshot operation {}, err: ",opType.toString(),e);}}  }
class C{  private void processVersion(String versionString){  try {    StringTokenizer tokens=new StringTokenizer(versionString,".");    majorVersion=Integer.parseInt(tokens.nextToken());    minorVersion=Integer.parseInt(tokens.nextToken());    this.versionString=versionString;  } catch (  Exception e) {  }}  }
class C{  public boolean hasValue(){  return super.hasAttribute(VALUE);}  }
class C{  public CStartTraceListener(final TraceLogger logger,final TraceList trace,final Set<BreakpointAddress> addresses,final int maximumHits){  m_logger=Preconditions.checkNotNull(logger,"IE01562: Logger argument can not be null");  m_addresses=Preconditions.checkNotNull(addresses,"IE01563: Addresses argument can not be null");  m_trace=Preconditions.checkNotNull(trace,"IE01107: trace argument can not be null");  m_maximumHits=maximumHits;}  }
class C{  void renderShadowMap(){  glUseProgram(shadowProgram);  glUniformMatrix4fv(shadowProgramVPUniform,false,light.get(matrixBuffer));  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glViewport(0,0,shadowMapSize,shadowMapSize);  glClear(GL_DEPTH_BUFFER_BIT);  glBindVertexArray(vao);  glDrawArrays(GL_TRIANGLES,0,6 * 6 * boxes.length);  glBindVertexArray(0);  glBindFramebuffer(GL_FRAMEBUFFER,0);  glUseProgram(0);}  }
class C{  @Override public void processElement(Wrapper<Element> elementWrapper){  builder.append(baseIndent).append("elementContent=").append(elementWrapper).append("\n");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean isSizeConsistent(Node x){  if (x == null)   return true;  if (x.size != size(x.left) + size(x.right) + 1)   return false;  return isSizeConsistent(x.left) && isSizeConsistent(x.right);}  }
class C{  private void checkNotEqual(Message m1,Message m2){  String equalsError=String.format("%s should not be equal to %s",m1,m2);  assertFalse(equalsError,m1.equals(m2));  assertFalse(equalsError,m2.equals(m1));  assertFalse(String.format("%s should have a different hash code from %s",m1,m2),m1.hashCode() == m2.hashCode());}  }
class C{  public Vector4f(float x,float y,float z,float w){  this.points[0]=x;  this.points[1]=y;  this.points[2]=z;  this.points[3]=w;}  }
class C{  public boolean chainIsNotPinned(String hostname,List<X509Certificate> chain) throws PinManagerException {  PinListEntry entry=lookup(hostname);  if (entry != null) {    return entry.chainIsNotPinned(chain);  }  return false;}  }
class C{  protected JMenuItem add(JMenu m,Action a){  JMenuItem item=m.add(a);  if (suppressIcons) {    item.setIcon(null);  }  return item;}  }
class C{  public StunTestSuite(String s){  super(s);}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    bufOff=0;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  protected SetMapAdapter(Map<E,Object> mapImplementation){  this.map=mapImplementation;}  }
class C{  private void uninstallLayout(JRootPane root){  if (savedOldLayout != null) {    root.setLayout(savedOldLayout);    savedOldLayout=null;  }}  }
class C{  private void drawText(final Graphics2D g2d){  g2d.translate(-getScreenViewX(),-getScreenViewY());synchronized (texts) {    Iterator<RemovableSprite> it=texts.iterator();    while (it.hasNext()) {      RemovableSprite text=it.next();      if (!text.shouldBeRemoved()) {        text.draw(g2d);      } else {        it.remove();      }    }  }  g2d.translate(getScreenViewX(),getScreenViewY());synchronized (staticSprites) {    Iterator<RemovableSprite> it=staticSprites.iterator();    while (it.hasNext()) {      RemovableSprite text=it.next();      if (!text.shouldBeRemoved()) {        text.draw(g2d);      } else {        it.remove();      }    }  }}  }
class C{  public SimpleClassifierAdapter(org.apache.samoa.moa.classifiers.Classifier learner,Instances dataset){  this.learner=learner.copy();  this.isInit=false;  this.dataset=dataset;}  }
class C{  public void run(){  ScriptContext context=null;  if (getChatConsoleControllerSource() != null) {    context=getChatConsoleControllerSource().getConnector().getScriptContext();  } else   if (context == null && getChessBoardControllerSource() != null && getChessBoardControllerSource().getConnector() != null) {    context=getChessBoardControllerSource().getConnector().getScriptContext();  } else   if (context == null && getConnectorSource() != null) {    context=getConnectorSource().getScriptContext();  }  if (context == null) {    Raptor.getInstance().onError("Could not executed " + getName() + " because a ScriptContext could not be created from a null connector.");  } else {    try {      Interpreter interpeter=new Interpreter();      interpeter.set("context",context);      interpeter.eval(script);    } catch (    Throwable t) {      Raptor.getInstance().onError("Error executing script " + getName(),t);    }  }}  }
class C{  private boolean testJDBC(String url,String uid,String pwd){  try {    @SuppressWarnings("unused") Connection conn=p_db.getDriverConnection(url,uid,pwd);  } catch (  Exception e) {    log.severe(e.toString());    return false;  }  return true;}  }
class C{  public static String md5(String str){  if (str == null) {    return null;  }  try {    MessageDigest messageDigest=MessageDigest.getInstance(ALGORITHM);    messageDigest.update(str.getBytes());    return getFormattedText(messageDigest.digest());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private int readVarint32() throws TException {  int result=0;  int shift=0;  if (trans_.getBytesRemainingInBuffer() >= 5) {    byte[] buf=trans_.getBuffer();    int pos=trans_.getBufferPosition();    int off=0;    while (true) {      byte b=buf[pos + off];      result|=(int)(b & 0x7f) << shift;      if ((b & 0x80) != 0x80)       break;      shift+=7;      off++;    }    trans_.consumeBuffer(off + 1);  } else {    while (true) {      byte b=readByte();      result|=(int)(b & 0x7f) << shift;      if ((b & 0x80) != 0x80)       break;      shift+=7;    }  }  return result;}  }
class C{  public FighterSquadron(String name){  super();  setChassis(name.trim() + " Squadron");  setModel("");}  }
class C{  private Object writeReplace(){  return new SynchronizedList<>(list);}  }
class C{  protected boolean isIncludeClientInfo(){  return this.includeClientInfo;}  }
class C{  public Observable<Long> publish(final String topic,Object... args){  return publish(topic,ArgArrayBuilder.buildArgumentsArray(clientConfig.objectMapper(),args),null);}  }
class C{  public static void run(AdSense adsense,String accountId,int maxPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Listing all ad clients for account %s\n",accountId);  System.out.println("=================================================================");  String pageToken=null;  AdClients adClients=null;  do {    adClients=adsense.accounts().adclients().list(accountId).setMaxResults(maxPageSize).setPageToken(pageToken).execute();    if (adClients.getItems() != null && !adClients.getItems().isEmpty()) {      for (      AdClient adClient : adClients.getItems()) {        System.out.printf("Ad client for product \"%s\" with ID \"%s\" was found.\n",adClient.getProductCode(),adClient.getId());        System.out.printf("\tSupports reporting: %s\n",adClient.getSupportsReporting() ? "Yes" : "No");      }    } else {      System.out.println("No ad clients found.");    }    pageToken=adClients.getNextPageToken();  } while (pageToken != null);  System.out.println();}  }
class C{  public boolean next() throws SQLException {  checkState();  boolean b=rs.next();  notifyCursorMoved();  return b;}  }
class C{  public static void i(String message,Throwable cause){  if (BuildConfig.DEBUG) {    Log.i(LOG_TAG,"[" + message + "]",cause);  }}  }
class C{  public boolean isMult(){  return mult;}  }
class C{  public Quaterniond div(Quaterniondc b){  return div(b,this);}  }
class C{  protected void startChunkSend(ByteBuffer... chunks){synchronized (chunkIncubator) {    for (    ByteBuffer chunk : chunks)     chunkIncubator.incubate(chunk);  }}  }
class C{  public static void addFile(File file){  files.offer(Pair.of(file,0));}  }
class C{  @Deprecated public SslCertificate(String issuedTo,String issuedBy,String validNotBefore,String validNotAfter){  this(issuedTo,issuedBy,parseDate(validNotBefore),parseDate(validNotAfter),null);}  }
class C{  public long sum(){  Cell[] as=cells;  Cell a;  long sum=base;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       sum+=a.value;    }  }  return sum;}  }
class C{  public void insertBack(Item x){  if (size == items.length) {    resize(size * RFACTOR);  }  items[size]=x;  size=size + 1;}  }
class C{  public boolean wasNull() throws SQLException {  return lastValueWasNull;}  }
class C{  @Override public void layout(){  if (getLayouter() != null) {    Rectangle2D.Double bounds=getBounds();    Point2D.Double p=new Point2D.Double(bounds.x,bounds.y);    getLayouter().layout(this,p,p);    invalidate();  }}  }
class C{  private Node ceiling(Node x,Key key){  if (x == null)   return null;  int cmp=key.compareTo(x.key);  if (cmp == 0)   return x;  if (cmp > 0)   return ceiling(x.right,key);  Node y=ceiling(x.left,key);  if (y != null)   return y; else   return x;}  }
class C{  private List<URI> preparePromotedVolumes(List<VplexMirror> copiesToStop,TaskList taskList,String opId){  List<URI> promotedVolumes=new ArrayList<URI>();  for (  VplexMirror copy : copiesToStop) {    Volume v=new Volume();    v.setId(URIUtil.createId(Volume.class));    Volume sourceVplexVolume=_dbClient.queryObject(Volume.class,copy.getSource());    String promotedLabel=String.format("%s-%s",sourceVplexVolume.getLabel(),copy.getLabel());    v.setProject(new NamedURI(copy.getProject().getURI(),promotedLabel));    StringSet protocols=new StringSet();    protocols.add(StorageProtocol.Block.FC.name());    v.setProtocol(protocols);    v.setTenant(new NamedURI(copy.getTenant().getURI(),promotedLabel));    _dbClient.createObject(v);    Operation op=_dbClient.createTaskOpStatus(Volume.class,v.getId(),opId,ResourceOperationTypeEnum.PROMOTE_COPY_TO_VPLEX,copy.getId().toString());    taskList.getTaskList().add(toTask(v,Arrays.asList(copy),opId,op));    promotedVolumes.add(v.getId());  }  return promotedVolumes;}  }
class C{  public void traceOperation(String operation,int id){  if (trace.isDebugEnabled()) {    trace.debug("{0} {1}",operation,id);  }}  }
class C{  private List<List> mergeWebs(Body body,List<List> webs,Map<ValueBox,Unit> boxToUnit,LocalUses localUses){  List<List> result=new ArrayList<>();  LinkedList<List> websCopy=new LinkedList<>(webs);  while (!websCopy.isEmpty()) {    List<ValueBox> web1=websCopy.removeFirst();    Local local1=(Local)web1.get(0).getValue();    if (local1.getIndex() == -1) {      result.add(web1);      continue;    }    List<ValueBox> mergedWeb=new ArrayList<>(web1);    Set<LocalVariable> lvs1=findLocalVariables(web1,local1,null,boxToUnit,body);    String expectedType=lvs1.isEmpty() ? null : lvs1.iterator().next().getDescriptor();    for (Iterator<List> it2=websCopy.iterator(); it2.hasNext(); ) {      List<ValueBox> web2=it2.next();      Local local2=(Local)web2.get(0).getValue();      if (!local1.equals(local2)) {        continue;      }      Set<LocalVariable> lvs2=findLocalVariables(web2,local2,expectedType,boxToUnit,body);      if (!lvs1.isEmpty() && lvs1.equals(lvs2)) {        mergedWeb.addAll(web2);        it2.remove();      }    }    result.add(mergedWeb);  }  return result;}  }
class C{  protected StoragePort checkEthernetStoragePortExistsInDB(String scsiAddress,DbClient _dbClient,StorageSystem device){  StoragePort port=null;  try {    URIQueryResultList result=new URIQueryResultList();    _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(NativeGUIDGenerator.generateNativeGuid(device,scsiAddress,NativeGUIDGenerator.PORT)),result);    if (result.iterator().hasNext()) {      port=_dbClient.queryObject(StoragePort.class,result.iterator().next());    }  } catch (  Exception e) {    _logger.warn("StoragePort not available {}",scsiAddress);  }  return port;}  }
class C{  public void removeAt(final int index){  checkWidget();  checkNullElement();  checkRange(index);  final Object removedElement=this.elements.remove(index);  this.selection.remove(removedElement);  refresh();}  }
class C{  private static void removeTable(Connection conn,String name) throws SQLException {  name=name.replace('.','_');  Statement stat=conn.createStatement();  stat.execute("DROP TABLE " + name);  DBUtil.commitEL(conn);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void write() throws IOException {  handleEmptyPages();  preparePagesForWriting();  writeDataPages();  if (_dataPages.size() > MAX_CACHE_SIZE) {    purgeOldPages();  }}  }
class C{  SnmpEngineId(byte[] bin){  engineId=bin;  hexString=SnmpTools.binary2ascii(bin).toLowerCase();}  }
class C{  public static int length(Object obj){  if (obj == null) {    return 0;  }  if (obj instanceof CharSequence) {    return ((CharSequence)obj).length();  }  if (obj instanceof Collection) {    return ((Collection)obj).size();  }  if (obj instanceof Map) {    return ((Map)obj).size();  }  int count;  if (obj instanceof Iterator) {    Iterator iter=(Iterator)obj;    count=0;    while (iter.hasNext()) {      count++;      iter.next();    }    return count;  }  if (obj instanceof Enumeration) {    Enumeration enumeration=(Enumeration)obj;    count=0;    while (enumeration.hasMoreElements()) {      count++;      enumeration.nextElement();    }    return count;  }  if (obj.getClass().isArray() == true) {    return Array.getLength(obj);  }  return -1;}  }
class C{  public DestroyFailedException(){  super();}  }
class C{  public void close(){  if (buf.length <= 1024 * 8) {    bufLocal.set(new SoftReference<char[]>(buf));  }  this.buf=null;}  }
class C{  public AveragedRegressor(List<Regressor> voters){  if (voters == null || voters.isEmpty())   throw new RuntimeException("No voters given for construction");  this.voters=voters.toArray(new Regressor[0]);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"movsb");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a movsb instruction (invalid number of operands)");  }  new MovsGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.BYTE,instructions);}  }
class C{  public boolean isUseReasonCodes(){  if (useReasonCodes == null) {    return true;  } else {    return useReasonCodes;  }}  }
class C{  public Kim(byte[] bytes,int from,int thru){  int sum=1;  int value;  this.hashcode=0;  this.length=thru - from;  if (this.length > 0) {    this.bytes=new byte[this.length];    for (int at=0; at < this.length; at+=1) {      value=(int)bytes[at + from] & 0xFF;      sum+=value;      this.hashcode+=sum;      this.bytes[at]=(byte)value;    }    this.hashcode+=sum << 16;  }}  }
class C{  public static String capitalizeNameTitleAbbrvs(String line){  String result=line;  for (  String title : new String[]{"dr","miss","mr","mrs","ms","prof"}) {    result=result.replaceAll("\\b" + title + "\\b",Character.toUpperCase(title.charAt(0)) + title.substring(1));  }  result=result.replaceAll("\\b" + "phd" + "\\b","PhD");  result=result.replaceAll("\\b" + "mphil" + "\\b","MPhil");  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:26.695 -0500",hash_original_method="7515F8CCC6CE3690666F2F3E64F5CA86",hash_generated_method="78C00479EB39A17F314FBD5CDA52E669") private static ProcessStartResult zygoteSendArgsAndGetResult(ArrayList<String> args) throws ZygoteStartFailedEx {  openZygoteSocketIfNeeded();  try {    sZygoteWriter.write(Integer.toString(args.size()));    sZygoteWriter.newLine();    int sz=args.size();    for (int i=0; i < sz; i++) {      String arg=args.get(i);      if (arg.indexOf('\n') >= 0) {        throw new ZygoteStartFailedEx("embedded newlines not allowed");      }      sZygoteWriter.write(arg);      sZygoteWriter.newLine();    }    sZygoteWriter.flush();    ProcessStartResult result=new ProcessStartResult();    result.pid=sZygoteInputStream.readInt();    if (result.pid < 0) {      throw new ZygoteStartFailedEx("fork() failed");    }    result.usingWrapper=sZygoteInputStream.readBoolean();    return result;  } catch (  IOException ex) {    try {      if (sZygoteSocket != null) {        sZygoteSocket.close();      }    } catch (    IOException ex2) {      Log.e(LOG_TAG,"I/O exception on routine close",ex2);    }    sZygoteSocket=null;    throw new ZygoteStartFailedEx(ex);  }}  }
class C{  public SVGOMFlowRegionElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public boolean closeIfStale() throws IOException {  if (isOpen && isStale()) {    LOG.debug("Connection is stale, closing...");    close();    return true;  }  return false;}  }
class C{  public Pair addElseIf(ExprBoolean condition,Statement body,Position start,Position end){  Pair pair;  ifs.add(pair=new Pair(condition,body,start,end));  body.setParent(this);  return pair;}  }
class C{  public void put(K key,V val){  if (_list != null) {    Entry lookup=_list.get(key);    if (lookup == null)     _list=new Entry(key,val,_list); else     lookup._val=val;  } else {    _list=new Entry(key,val,_list);    size=size + 1;  }}  }
class C{  public DescendantIterator(){  super(null);  m_axis=Axis.DESCENDANTSORSELFFROMROOT;  int whatToShow=DTMFilter.SHOW_ALL;  initNodeTest(whatToShow);}  }
class C{  void updateThumbnailPaintFilter(){  if (mInvisible) {    return;  }  int mul=(int)((1.0f - mDimAlpha) * mThumbnailAlpha * 255);  int add=(int)((1.0f - mDimAlpha) * (1 - mThumbnailAlpha) * 255);  if (mBitmapShader != null) {    mLightingColorFilter=new LightingColorFilter(Color.argb(255,mul,mul,mul),Color.argb(0,add,add,add));    mDrawPaint.setColorFilter(mLightingColorFilter);    mDrawPaint.setColor(0xffffffff);  } else {    int grey=mul + add;    mDrawPaint.setColorFilter(null);    mDrawPaint.setColor(Color.argb(255,grey,grey,grey));  }  invalidate();}  }
class C{  private void updateSleepTimer(){  if (mSleepMenuItem == null || mSleepTimerMenuItem == null) {    return;  }  long now=Calendar.getInstance().getTimeInMillis();  long timeToAlarm=AppPrefHelper.getInstance(this).getSleepTimer();  mSleepTimerMenuItem.setTitle(DatetimeHelper.convertSecondsToDuration(timeToAlarm - now));}  }
class C{  public LoopingForUnsafeCopier(Unsafe unsafe,long offset,long length){  super(unsafe);  Preconditions.checkArgument(offset >= 0,"Offset must be >= 0");  Preconditions.checkArgument(length >= 0,"Length must be >= 0");  Preconditions.checkArgument(length % COPY_STRIDE == 0,"Lengths must be a multiple of 8 bytes");  this.offset=offset;  this.count=length / COPY_STRIDE;}  }
class C{  public BinaryProperty(byte[] data,T type){  setData(data,type);}  }
class C{  @KnownFailure("Fixed on DonutBurger, Wrong Exception thrown") public void test_wrap_ByteBuffer_ByteBuffer_03(){  String host="new host";  int port=8080;  ByteBuffer bbsN=null;  ByteBuffer bbdN=null;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(100);  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbsN,bbd);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.wrap(bbs,bbdN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  try {    sse.wrap(bbsN,bbdN);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException iae) {  }catch (  NullPointerException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public boolean isDone(){  if (findAllTypes) {    return hasProperIntersection && hasNonProperIntersection;  }  if (findProper) {    return hasProperIntersection;  }  return hasIntersection;}  }
class C{  public PointNeuronRulePanel(){  super();  this.add(tabbedPane);  mainTab.addItem("Excitatory Reversal",tfER);  mainTab.addItem("Inhibitory Reversal",tfIR);  mainTab.addItem("Leak Reversal",tfLR);  mainTab.addItem("Leak Conductance",tfLC);  outputFunctionTab.addItem("Output Function",cbOutputFunction);  outputFunctionTab.addItem("Threshold",tfThreshold);  outputFunctionTab.addItem("Gain",tfGain);  inputsTab.addItem("Net Time Constant",tfTimeAveraging);  inputsTab.addItem("Bias",tfBias);  tabbedPane.add(mainTab,"Main");  tabbedPane.add(inputsTab,"Inputs");  tabbedPane.add(outputFunctionTab,"Output Function");}  }
class C{  public void becomeDefaultLogger(){  LoggingConfiguration.replaceDefaultHandler(new LogPanelHandler());}  }
class C{  private boolean isOverridden(OutputNode node,Object value) throws Exception {  return factory.setOverride(type,value,node);}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof GSSModel)) {    return false;  }  GSSModel otherModel=(GSSModel)o;  if (otherModel.hypothesis.equals(this.hypothesis)) {    return true;  } else {    return false;  }}  }
class C{  protected double entropy(double[][] dataZs,double[][] dataWs){  double entropy=0.0;  int numInstances=dataZs.length;  for (int j=0; j < m_numClasses; j++) {    double m=0.0;    double sum=0.0;    for (int i=0; i < numInstances; i++) {      m+=dataZs[i][j] * dataWs[i][j];      sum+=dataWs[i][j];    }    m/=sum;    for (int i=0; i < numInstances; i++) {      entropy+=dataWs[i][j] * Math.pow(dataZs[i][j] - m,2);    }  }  return entropy;}  }
class C{  private static void assertOverridePendingTransition(ShadowActivity shadowActivity,@AnimRes int enterAnim,@AnimRes int exitAnim){  assertEquals(enterAnim,shadowActivity.getPendingTransitionEnterAnimationResourceId());  assertEquals(exitAnim,shadowActivity.getPendingTransitionExitAnimationResourceId());}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public static ChiSquare serializableInstance(){  return new ChiSquare();}  }
class C{  public static boolean hasGetMethod(JField field,JClassType clazz){  String getterMethodName="get" + Character.toUpperCase(field.getName().charAt(0)) + field.getName().substring(1);  try {    return (clazz.getMethod(getterMethodName,new JType[]{}) != null);  } catch (  Exception e) {    try {      getterMethodName="is" + Character.toUpperCase(field.getName().charAt(0)) + field.getName().substring(1);      return (clazz.getMethod(getterMethodName,new JType[]{}) != null);    } catch (    Exception e1) {      if (clazz.getSuperclass() == null) {        return false;      } else {        return hasGetMethod(field,clazz.getSuperclass());      }    }  }}  }
class C{  public ParallelTask(RequestProtocol requestProtocol,int concurrency,HttpMeta httpMeta,TargetHostMeta targetHostMeta,SshMeta sshMeta,TcpMeta tcpMeta,UdpMeta udpMeta,PingMeta pingMeta,ParallecResponseHandler handler,Map<String,Object> responseContext,Map<String,StrStrMap> replacementVarMapNodeSpecific,Map<String,String> replacementVarMap,RequestReplacementType requestReplacementType,ParallelTaskConfig config){  this.requestProtocol=requestProtocol;  this.concurrency=concurrency;  this.targetHostMeta=targetHostMeta;  this.taskId=this.generateTaskId();  this.requestNum=targetHostMeta.getHosts().size();  this.requestNumActual=requestNum;  this.httpMeta=httpMeta;  this.tcpMeta=tcpMeta;  this.udpMeta=udpMeta;  this.sshMeta=sshMeta;  this.pingMeta=pingMeta;  this.handler=handler;  this.responsedNum=0;  this.state=ParallelTaskState.WAITING;  if (responseContext != null)   this.responseContext=responseContext;  this.replacementVarMapNodeSpecific.putAll(replacementVarMapNodeSpecific);  this.replacementVarMap.putAll(replacementVarMap);  this.requestReplacementType=requestReplacementType;  this.config=config;}  }
class C{  public void runTest(DriverThread driver,WorkerThread[] workers){  driver.run(workers);  try {    driver.join();  } catch (  InterruptedException ie) {    unexpectedException(Thread.currentThread(),ie);  }  if (failCnt.get() == 0) {    System.out.println(TEST_NAME + ": Test PASSed.");  } else {    System.out.println(TEST_NAME + ": failCnt=" + failCnt.get());    System.out.println(TEST_NAME + ": Test FAILed.");    throw new RuntimeException("Test Failed");  }}  }
class C{  public CustomizedOsmNetworkReader(final Network network,final CoordinateTransformation transformation,final boolean useHighwayDefaults){  log.warn("This is experimental customized version of the org.matsim.core.utils.io.OsmNetworkReader and should only be used by persons how now what they do. " + "The additional tags and the interpretation of the tags may change without notice, so don't rely on the status quo!" + "If you not exactly know what are you doing here, leave it! [gl nov' 2012]");  this.network=network;  this.transform=transformation;  if (useHighwayDefaults) {    log.info("Falling back to default values.");    this.setHighwayDefaults(1,"motorway",2,120.0 / 3.6,1.0,2000,true);    this.setHighwayDefaults(1,"motorway_link",1,80.0 / 3.6,1.0,1500,true);    this.setHighwayDefaults(2,"trunk",1,80.0 / 3.6,1.0,2000);    this.setHighwayDefaults(2,"trunk_link",1,50.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary",1,80.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary_link",1,60.0 / 3.6,1.0,1500);    this.setHighwayDefaults(4,"secondary",1,60.0 / 3.6,1.0,1000);    this.setHighwayDefaults(5,"tertiary",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"minor",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"unclassified",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"residential",1,30.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"living_street",1,15.0 / 3.6,1.0,300);  }}  }
class C{  public Date to(){  return to;}  }
class C{  protected void cancelAnimationFrame(){  ScriptHelper.evalNoResult("if(typeof this._frameId==='number'){window.cancelAnimationFrame(this._frameId);}",this);}  }
class C{  public AllocationSite(int line,int column){synchronized (sites) {    this.id=sites.size();    sites.add(this);  }  this.line=line;  this.column=column;}  }
class C{  private EdgeRing findShell(List minEdgeRings){  int shellCount=0;  EdgeRing shell=null;  for (Iterator it=minEdgeRings.iterator(); it.hasNext(); ) {    EdgeRing er=(MinimalEdgeRing)it.next();    if (!er.isHole()) {      shell=er;      shellCount++;    }  }  Assert.isTrue(shellCount <= 1,"found two shells in MinimalEdgeRing list");  return shell;}  }
class C{  @LargeTest public void testThumbnailForH264VGA() throws Exception {  final String videoItemFilename=INPUT_FILE_PATH + "H264_BP_640x480_30fps_192kbps_1_5.mp4";  final int outWidth=32;  final int outHeight=32;  final int atTime=0;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename,renderingMode);  final Bitmap thumbNailBmp=mediaVideoItem.getThumbnail(outWidth,outHeight,atTime);  validateThumbnail(thumbNailBmp,outWidth,outHeight);}  }
class C{  void parseAttributeDefaultValue(AttributeList atts) throws IOException {  if (ch == '#') {    ch=in.read();    if (!parseIdentifier(true)) {      error("invalid","attribute value");      return;    }    skipParameterSpace();    atts.modifier=AttributeList.name2type(getString(0));    if (atts.modifier != FIXED) {      return;    }  }  atts.value=parseAttributeValueSpecification();  skipParameterSpace();}  }
class C{  @SuppressWarnings({"unused","null"}) private static void unusedTestCompile() throws IOException {  FunctionValues f=null;  double ret=f.doubleVal(2);}  }
class C{  public TransactionBuilder performInitialized(String taskName) throws IOException {  if (!isConnected()) {    if (!connect()) {      throw new IOException("1: Unable to connect to device: " + getDevice());    }  }  if (!isInitialized()) {    TransactionBuilder builder=createTransactionBuilder("Initialize device");    builder.add(new CheckInitializedAction(gbDevice));    initializeDevice(builder).queue(getQueue());  }  return createTransactionBuilder(taskName);}  }
class C{  public final void allowSpaces(final boolean allowSpaces){  this.allowSpaces=allowSpaces;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapreturnattrnode.class,args);}  }
class C{  public double outsideDistance(final PlanetModel planetModel,final DistanceStyle distanceStyle,final double x,final double y,final double z){  final double upperDistance=distanceStyle.computeDistance(planetModel,upperConnectingPlane,x,y,z,lowerConnectingPlane,startCutoffPlane,endCutoffPlane);  final double lowerDistance=distanceStyle.computeDistance(planetModel,lowerConnectingPlane,x,y,z,upperConnectingPlane,startCutoffPlane,endCutoffPlane);  final double startDistance=distanceStyle.computeDistance(planetModel,startCutoffPlane,x,y,z,endCutoffPlane,lowerConnectingPlane,upperConnectingPlane);  final double endDistance=distanceStyle.computeDistance(planetModel,endCutoffPlane,x,y,z,startCutoffPlane,lowerConnectingPlane,upperConnectingPlane);  final double ULHCDistance=distanceStyle.computeDistance(ULHC,x,y,z);  final double URHCDistance=distanceStyle.computeDistance(URHC,x,y,z);  final double LLHCDistance=distanceStyle.computeDistance(LLHC,x,y,z);  final double LRHCDistance=distanceStyle.computeDistance(LRHC,x,y,z);  return Math.min(Math.min(Math.min(upperDistance,lowerDistance),Math.min(startDistance,endDistance)),Math.min(Math.min(ULHCDistance,URHCDistance),Math.min(LLHCDistance,LRHCDistance)));}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.CHANNEL__TO_ENDPOINT:    return toEndpoint != null;case EipPackage.CHANNEL__FROM_ENDPOINT:  return fromEndpoint != null;case EipPackage.CHANNEL__NAME:return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case EipPackage.CHANNEL__GUARANTEED:return guaranteed != GUARANTEED_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static boolean checkValueIsType(Object value,Object name,Class type){  if (value != null) {    if (type.isAssignableFrom(value.getClass())) {      return true;    } else {      throw new RuntimeException("The value argument of '" + name + "' must be of type "+ type.getName()+ ". Found: "+ value.getClass());    }  } else {    return false;  }}  }
class C{  @Override public void add(int index,T linkable){  if (index < 0 || index > size()) {    throw new IndexOutOfBoundsException("index:" + index);  }  insert(index,linkable);}  }
class C{  static final public String binary(int what,int digits){  String stuff=Integer.toBinaryString(what);  if (digits > 32) {    digits=32;  }  int length=stuff.length();  if (length > digits) {    return stuff.substring(length - digits);  } else   if (length < digits) {    int offset=32 - (digits - length);    return "00000000000000000000000000000000".substring(offset) + stuff;  }  return stuff;}  }
class C{  public int canDisplayUpTo(char[] text,int start,int limit){  StringCharacterIterator sci=new StringCharacterIterator(new String(text));  return canDisplayUpTo(sci,start,limit);}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData advancedSearchData=new SearchData();  advancedSearchData.setCurrentPage(1);  advancedSearchData.setNumberResultsPerPage(DEFAULT_NUMBER_OF_RESULTS_PER_PAGE);  advancedSearchData.setSearchMode("natural");  advancedSearchData.setCurrentPage(1);  advancedSearchData.setQueryText(null);  model.put("advancedSearchData",advancedSearchData);  model.put("randomPodcasts",startPageService.getRandomPodcasts(NUMBER_OF_PODCASTS_IN_CHART));  model.addAttribute("mediaTypes",MediaType.values());  model.addAttribute("languageCodes",LanguageCode.values());  model.addAttribute("orderByOptions",OrderByOption.values());  List<Category> categoriesByNoOfPodcasts=categoryService.getCategoriesOrderedByNoOfPodcasts();  model.put("topCategories",categoriesByNoOfPodcasts.subList(0,NUMBER_OF_CATEGORIES_IN_CHART));  model.put("allCategories",categoriesByNoOfPodcasts);  List<Podcast> recommendedPodcasts=startPageService.getRecommendedPodcasts();  model.put("recommendedPodcasts",recommendedPodcasts);  Locale locale=LocaleContextHolder.getLocale();  String language=locale.getLanguage();  List<String> preferredLanguagesList=Arrays.asList(preferredLanguages);  model.put("newEntries",startPageService.getNewEntries());  if (preferredLanguagesList.contains(language)) {    model.put("lastUpdatedPodcasts",startPageService.getLastUpdatedPodcasts(LanguageCode.get(language)));  } else {    model.put("lastUpdatedPodcasts",startPageService.getLastUpdatedPodcasts());  }}  }
class C{  void write(ImageOutputStream ios) throws IOException {}  }
class C{  public static BookTypeConf bookTypeConf(int bookType,String entidad){  BookTypeConf result=null;  try {    result=ConfiguratorBookType.getInstance(entidad).getBookTypeConf(bookType);  } catch (  Exception e) {    log.error("Impossible to load invesicres configuration",e);  }  return result;}  }
class C{  public CRemoveTagFromSelectedNodesAction(final JFrame parent,final ZyGraph graph,final ITreeNode<CTag> tag){  super("Remove Tag from selected Nodes");  m_parent=Preconditions.checkNotNull(parent,"IE01217: Parent argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01218: Graph argument can not be null");  m_tag=Preconditions.checkNotNull(tag,"IE01782: Tag can't be null.");}  }
class C{  public Builder removePhoneNumber(PhoneNumber phoneNumber){  this.phoneNumbers.remove(phoneNumber);  return this;}  }
class C{  protected void ensureCapacity(int newCapacity){  int oldCapacity=data.length;  if (newCapacity <= oldCapacity) {    return;  }  if (size == 0) {    threshold=calculateThreshold(newCapacity,loadFactor);    data=new HashEntry[newCapacity];  } else {    HashEntry oldEntries[]=data;    HashEntry newEntries[]=new HashEntry[newCapacity];    modCount++;    for (int i=oldCapacity - 1; i >= 0; i--) {      HashEntry entry=oldEntries[i];      if (entry != null) {        oldEntries[i]=null;        do {          HashEntry next=entry.next;          int index=hashIndex(entry.hashCode,newCapacity);          entry.next=newEntries[index];          newEntries[index]=entry;          entry=next;        } while (entry != null);      }    }    threshold=calculateThreshold(newCapacity,loadFactor);    data=newEntries;  }}  }
class C{  public ReadRequest(ContentFormat format,int objectId,int objectInstanceId){  this(format,new LwM2mPath(objectId,objectInstanceId));}  }
class C{  OPDSFeedHandler(NetworkLibrary library,String baseURL,OPDSCatalogItem.State result){  if (!(result.Link instanceof OPDSNetworkLink)) {    throw new IllegalArgumentException(result.Link + " is not an instance of OPDSNetworkLink class");  }  myLibrary=library;  myCatalog=result.Loader.Tree.Item;  myBaseURL=baseURL;  myData=result;  mySkipUntilId=myData.LastLoadedId;  myFoundNewIds=mySkipUntilId != null;}  }
class C{  public boolean hasTarget(){  return getTarget() != null;}  }
class C{  public T caseChannel(Channel object){  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.STATUS__PROPERTIES:    return properties != null && !properties.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static TermsQueryBuilder termsQuery(String name,Collection<?> values){  return new TermsQueryBuilder(name,values);}  }
class C{  private boolean isPrimitive(Class type){  if (Number.class.isAssignableFrom(type)) {    return true;  }  if (type == Boolean.class) {    return true;  }  if (type == Character.class) {    return true;  }  return type.isPrimitive();}  }
class C{  @Override public void onDestroyFloatView(View floatView){  ((ImageView)floatView).setImageDrawable(null);  mFloatBitmap.recycle();  mFloatBitmap=null;}  }
class C{  public <T>List<T> createListDtoFromJson(String json,Class<T> dtoInterface){  final DtoProvider<T> dtoProvider=getDtoProvider(dtoInterface);  final JSONArray jsonArray=JSONParser.parseStrict(json).isArray();  final List<T> result=new ArrayList<>();  for (int i=0; i < jsonArray.size(); i++) {    String payload=jsonArray.get(i).isObject().toString();    result.add(dtoProvider.fromJson(payload));  }  return result;}  }
class C{  public void showCourseAnnouncement(Activity activity,EnrolledCoursesResponse model){  final Bundle courseBundle=new Bundle();  courseBundle.putSerializable(EXTRA_COURSE_DATA,model);  courseBundle.putBoolean(EXTRA_ANNOUNCEMENTS,true);  final Intent courseDetail=new Intent(activity,CourseAnnouncementsActivity.class);  courseDetail.putExtra(EXTRA_BUNDLE,courseBundle);  courseDetail.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);  activity.startActivity(courseDetail);}  }
class C{  public boolean similar(Object other){  try {    if (!(other instanceof JSONObject)) {      return false;    }    Set<String> set=this.keySet();    if (!set.equals(((JSONObject)other).keySet())) {      return false;    }    Iterator<String> iterator=set.iterator();    while (iterator.hasNext()) {      String name=iterator.next();      Object valueThis=this.get(name);      Object valueOther=((JSONObject)other).get(name);      if (valueThis instanceof JSONObject) {        if (!((JSONObject)valueThis).similar(valueOther)) {          return false;        }      } else       if (valueThis instanceof org.json.JSONArray) {        if (!((org.json.JSONArray)valueThis).similar(valueOther)) {          return false;        }      } else       if (!valueThis.equals(valueOther)) {        return false;      }    }    return true;  } catch (  Throwable exception) {    return false;  }}  }
class C{  public ModelException(String msg,Throwable baseEx){  super(msg,baseEx);}  }
class C{  public SQLInvalidAuthorizationSpecException(Throwable cause){  super(cause);}  }
class C{  public String buildQuery(String[] projectionIn,String selection,String groupBy,String having,String sortOrder,String limit){  String[] projection=computeProjection(projectionIn);  StringBuilder where=new StringBuilder();  boolean hasBaseWhereClause=mWhereClause != null && mWhereClause.length() > 0;  if (hasBaseWhereClause) {    where.append(mWhereClause.toString());    where.append(')');  }  if (selection != null && selection.length() > 0) {    if (hasBaseWhereClause) {      where.append(" AND ");    }    where.append('(');    where.append(selection);    where.append(')');  }  return buildQueryString(mDistinct,mTables,projection,where.toString(),groupBy,having,sortOrder,limit);}  }
class C{  public OneWayANOVA(int numberOfGroups){  super(numberOfGroups);  if (numberOfGroups <= 1) {    throw new IllegalArgumentException("requires two or more groups");  }}  }
class C{  @Override public boolean isResetted(){  return (min == 0.0f && max == 0.0f);}  }
class C{  public MonitorException(String message){  super(message);}  }
class C{  private void flattenStyles(IXMLElement elem) throws IOException {  if (elem.getName() != null && elem.getName().equals("style") && readAttribute(elem,"type","").equals("text/css") && elem.getContent() != null) {    CSSParser cssParser=new CSSParser();    cssParser.parse(elem.getContent(),styleManager);  } else {    if (elem.getNamespace() == null || elem.getNamespace().equals(SVG_NAMESPACE)) {      String style=readAttribute(elem,"style",null);      if (style != null) {        for (        String styleProperty : style.split(";")) {          String[] stylePropertyElements=styleProperty.split(":");          if (stylePropertyElements.length == 2 && !elem.hasAttribute(stylePropertyElements[0].trim(),SVG_NAMESPACE)) {            elem.setAttribute(stylePropertyElements[0].trim(),SVG_NAMESPACE,stylePropertyElements[1].trim());          }        }      }      styleManager.applyStylesTo(elem);      for (      IXMLElement child : elem.getChildren()) {        flattenStyles(child);      }    }  }}  }
class C{  public T caseMarker(Marker object){  return null;}  }
class C{  private static ConfigSettings readConfiguration(final String path) throws IOException, SAXException, ParserConfigurationException {  ConfigurationReader reader=new ConfigurationReader(path);  return reader.read();}  }
class C{  public void writeTreeLikelihood(PartitionPattern partition,XMLWriter writer){  PartitionSubstitutionModel substModel=partition.getPartitionSubstitutionModel();  PartitionClockModel clockModel=partition.getPartitionClockModel();  writer.writeComment("Microsatellite Sampler Tree Likelihood");  writer.writeOpenTag(MicrosatelliteSamplerTreeLikelihoodParser.TREE_LIKELIHOOD,new Attribute[]{new Attribute.Default<String>(XMLParser.ID,partition.getPrefix() + MicrosatelliteSamplerTreeLikelihoodParser.TREE_LIKELIHOOD)});  writeMicrosatSubstModelRef(substModel,writer);  writer.writeIDref(MicrosatelliteSamplerTreeModelParser.TREE_MICROSATELLITE_SAMPLER_MODEL,partition.getName() + "." + MicrosatelliteSamplerTreeModelParser.TREE_MICROSATELLITE_SAMPLER_MODEL);switch (clockModel.getClockType()) {case STRICT_CLOCK:    writer.writeIDref(StrictClockBranchRatesParser.STRICT_CLOCK_BRANCH_RATES,clockModel.getPrefix() + BranchRateModel.BRANCH_RATES);  break;case UNCORRELATED:case RANDOM_LOCAL_CLOCK:case AUTOCORRELATED:throw new UnsupportedOperationException("Microsatellite only supports strict clock model");default :throw new IllegalArgumentException("Unknown clock model");}writer.writeCloseTag(MicrosatelliteSamplerTreeLikelihoodParser.TREE_LIKELIHOOD);}  }
class C{  protected final V unwrapValue(V value){  return value;}  }
class C{  public static synchronized void logEnvironment(){  userLog("serial = " + License.getSerialNumber());  userLog("email = " + License.getPersonEmail());  logVersion();  final SortedMap<String,String> env=new TreeMap<>(Environment.getEnvironmentMap());  for (  final Map.Entry<String,String> e : env.entrySet()) {    userLog(e.getKey() + " = " + e.getValue());  }  userLog("gzipfix.enabled = " + GzipUtils.getOverrideGzip());}  }
class C{  public void publish(LogRecord record){  if (!isLoggable(record))   return;  int level=getLevel().intValue();  for (int i=0; i < _handlers.length; i++) {    Handler handler=_handlers[i];    if (level <= handler.getLevel().intValue())     handler.publish(record);  }}  }
class C{  public SVGOMFEPointLightElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void write(byte[] b,int off,int len,long pos) throws IOException {  if (b == null) {    throw new NullPointerException("b == null!");  }  if ((off < 0) || (len < 0) || (pos < 0)|| (off + len > b.length)|| (off + len < 0)) {    throw new IndexOutOfBoundsException();  }  long lastPos=pos + len - 1;  if (lastPos >= length) {    pad(lastPos);    length=lastPos + 1;  }  int offset=(int)(pos % BUFFER_LENGTH);  while (len > 0) {    byte[] buf=getCacheBlock(pos / BUFFER_LENGTH);    int nbytes=Math.min(len,BUFFER_LENGTH - offset);    System.arraycopy(b,off,buf,offset,nbytes);    pos+=nbytes;    off+=nbytes;    len-=nbytes;    offset=0;  }}  }
class C{  public static long parseDateValue(String s,int start,int end){  if (s.charAt(start) == '+') {    start++;  }  int s1=s.indexOf('-',start + 1);  int s2=s.indexOf('-',s1 + 1);  if (s1 <= 0 || s2 <= s1) {    throw new IllegalArgumentException(s);  }  int year=Integer.parseInt(s.substring(start,s1));  int month=Integer.parseInt(s.substring(s1 + 1,s2));  int day=Integer.parseInt(s.substring(s2 + 1,end));  if (!isValidDate(year,month,day)) {    throw new IllegalArgumentException(year + "-" + month+ "-"+ day);  }  return dateValue(year,month,day);}  }
class C{  @Override public void close(){  manager.checkAccess();  target.close();  setLevel(Level.OFF);}  }
class C{  public boolean removeFromGoogleMap(){  if (googlePolyline != null) {    googlePolyline.remove();    return true;  }  return false;}  }
class C{  public synchronized void updateLayerLabels(){  for (  LayerPane pane : getPanes()) {    pane.updateLayerLabel();  }}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  @DSComment("System settings, info collection") @DSSpec(DSCat.SYSTEM) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:51.969 -0500",hash_original_method="0140B0C084561EBE6D9CB9F916362E53",hash_generated_method="2E5FD5211A5DBC3FA7DD1C6845765FB6") public static boolean putString(ContentResolver resolver,String name,String value){  return putString(resolver,CONTENT_URI,name,value);}  }
class C{  public void subscribeToResellerServiceNoDiscount() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-01-02 20:00:00");  VOServiceDetails supplService=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"supplSrvForReseller");  updateOperatorRevenueShare(5.0D,supplService.getKey());  updatePartnerRevenueShares(12.0D,15.0D,supplService);  VendorData resellerData=setupNewReseller("2013-01-03 08:10:00");  setCutOffDay(resellerData.getAdminKey(),2);  CustomerData resellerCustomerData=registerCustomer(resellerData,"resellerCustomer");  updateMarketplaceRevenueShare(10.0D,resellerData.getMarketplaceId(0));  VOServiceDetails resellerService=grantResalePermission(supplierData,supplService,resellerData);  resellerService=publishActivateService(resellerData,resellerService);  subscribe(resellerCustomerData.getAdminUser(),"resellerSubscr1",resellerService,"2013-01-05 00:00:00","ADMIN");  resetCutOffDay(resellerData.getAdminKey());  cacheTestData("subscribeToResellerServiceNoDiscount",new TestData(supplierData,resellerData));}  }
class C{  public NotificationChain basicSetIfFalse(Expression newIfFalse,NotificationChain msgs){  Expression oldIfFalse=ifFalse;  ifFalse=newIfFalse;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.IF__IF_FALSE,oldIfFalse,newIfFalse);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void ERROR(Throwable e) throws JMapperException {  logger.error("{}: {}",e.getClass().getSimpleName(),e.getMessage());  throw new JMapperException(e);}  }
class C{  private Object readResolve(){  return ToStringStyle.DEFAULT_STYLE;}  }
class C{  public static long toLongValue(Object o,long defaultValue){  if (o instanceof Character)   return (((Character)o).charValue()); else   if (o instanceof Boolean)   return ((((Boolean)o).booleanValue()) ? 1L : 0L); else   if (o instanceof Number)   return (((Number)o).longValue()); else   if (o instanceof String)   return (long)toDoubleValue(o.toString(),defaultValue); else   if (o instanceof Castable) {    return (long)((Castable)o).castToDoubleValue(defaultValue);  } else   if (o instanceof ObjectWrap)   return toLongValue(((ObjectWrap)o).getEmbededObject(toLong(defaultValue)),defaultValue);  return defaultValue;}  }
class C{  static int crossBound(double bound[],int bc,double py1,double py2){  if (bc == 0) {    return 0;  }  int up=0;  int down=0;  for (int i=2; i < bc; i+=4) {    if (bound[i] < py1) {      up++;      continue;    }    if (bound[i] > py2) {      down++;      continue;    }    return CROSSING;  }  if (down == 0) {    return 0;  }  if (up != 0) {    sortBound(bound,bc);    boolean sign=bound[2] > py2;    for (int i=6; i < bc; i+=4) {      boolean sign2=bound[i] > py2;      if (sign != sign2 && bound[i + 1] != bound[i - 3]) {        return CROSSING;      }      sign=sign2;    }  }  return UNKNOWN;}  }
class C{  public void testGetWebModuleContextRootUndefined() throws Exception {  String xml="<application>" + "  <module>" + "    <java>javaclient.jar</java>"+ "  </module>"+ "</application>";  ApplicationXml applicationXml=ApplicationXmlIo.parseApplicationXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),null);  try {    applicationXml.getWebModuleContextRoot("webmodule.jar");    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  @Override public void configure(Binder binder){  binder.bind(IResourceSetInitializer.class).to(BuiltInSchemeResourceSetInitializer.class);  binder.bind(BuiltInSchemeRegistrar.class);  binder.bind(ClassLoader.class).toInstance(ContributingModule.class.getClassLoader());}  }
class C{  public static double[] trimZeroTail(final double[] data){  return Arrays.copyOfRange(data,0,countNonZeroBeginning(data));}  }
class C{  public void testOverwriteFlag() throws Exception {  File file=new File(XMLSchedulingDataProcessor.QUARTZ_XML_DEFAULT_FILE_NAME);  copyResourceToFile("/org/quartz/xml/simple-job-trigger.xml",file);  Scheduler scheduler=null;  try {    StdSchedulerFactory factory=new StdSchedulerFactory("org/quartz/xml/quartz-test.properties");    scheduler=factory.getScheduler();    JobDetail job=newJob(MyJob.class).withIdentity("job1").usingJobData("foo","dont_chg_me").build();    Trigger trigger=newTrigger().withIdentity("job1").withSchedule(repeatHourlyForever()).build();    scheduler.scheduleJob(job,trigger);    ClassLoadHelper clhelper=new CascadingClassLoadHelper();    clhelper.initialize();    XMLSchedulingDataProcessor processor=new XMLSchedulingDataProcessor(clhelper);    try {      processor.processFileAndScheduleJobs(scheduler,false);      fail("OverWriteExisting flag didn't work. We should get Exception when overwrite is set to false.");    } catch (    ObjectAlreadyExistsException e) {    }    assertEquals(1,scheduler.getJobKeys(GroupMatcher.jobGroupEquals("DEFAULT")).size());    assertEquals(1,scheduler.getTriggerKeys(GroupMatcher.triggerGroupEquals("DEFAULT")).size());    job=scheduler.getJobDetail(JobKey.jobKey("job1"));    String fooValue=job.getJobDataMap().getString("foo");    assertEquals("dont_chg_me",fooValue);  }  finally {    if (file.exists() && !file.delete())     throw new RuntimeException("Failed to remove test file " + file);    if (scheduler != null)     scheduler.shutdown();  }}  }
class C{  public MethodBinding[] availableMethods(){  return methods();}  }
class C{  public ComplexTypeComplexContent(AttributeUse attributeUses,Particle particle,boolean mixed){  super(attributeUses);  this.particle=particle;  this.mixed=mixed;}  }
class C{  public WeightVector(WeightVector wv){  float in[]=wv.getInternalArray();  u=new float[in.length];  System.arraycopy(in,0,u,0,in.length);  size=in.length;}  }
class C{  private boolean isVowel(char ch){  return VOWELS.indexOf(ch) != -1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static Context fromUserKtab(String user,String ktab,boolean storeKey) throws Exception {  return fromUserKtab(new Subject(),user,ktab,storeKey);}  }
class C{  public SelectShiftClicked(Collection<DefaultNode> paintedNodes,GraphPanel component,Color color){  this.paintedNodes=paintedNodes;  this.component=component;  this.color=color;}  }
class C{  public ItemHit currencyCode(String value){  setString(CURRENCY_CODE,value);  return this;}  }
class C{  public void removeBreakpoints(final BreakpointType type,final Set<BreakpointAddress> breakpoints){  Preconditions.checkNotNull(type,"IE00178: Type argument can not be null");  Preconditions.checkNotNull(breakpoints,"IE00179: breakpoints argument can not be null");  if (breakpoints.size() == 0) {    return;  }switch (type) {case REGULAR:    removeBreakpoints(breakpoints,indexedBreakpointStorage);  break;case ECHO:removeBreakpoints(breakpoints,echoBreakpointStorage);break;case STEP:removeBreakpoints(breakpoints,stepBreakpointStorage);break;default :throw new IllegalStateException(String.format("Invalid breakpoint type '%s'",type));}}  }
class C{  private void output(){  for (  String channel : countPerChannel.keySet()) {    int count=countPerChannel.get(channel);    if (count > 0) {      g.ignoredMessagesCount(channel,"Ignored " + count + " message"+ (count == 1 ? "" : "s")+ " in the last "+ DELAY+ "s");    }  }  countPerChannel.clear();}  }
class C{  public Boolean isMLDPWallet(){  return mldpWallet;}  }
class C{  @Override public void addVehicle(final Vehicle v){  if (this.getVehicles().containsKey(v.getId())) {    throw new IllegalArgumentException("Vehicle with id = " + v.getId() + " already exists.");  }  if (!this.vehicleTypes.containsKey(v.getType().getId())) {    throw new IllegalArgumentException("Cannot add Vehicle with type = " + v.getType().getId().toString() + " if the VehicleType has not been added to the Vehicles container.");  }  this.vehicles.put(v.getId(),v);  this.counter.incCounter();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public int hashCode(){  int result=193;  result=37 * result + ObjectUtilities.hashCode(this.fillPaint);  return result;}  }
class C{  public Define(String functionName,Class<?> returnType,String name1,Class<?> type1,String name2,Class<?> type2){  this(functionName,returnType,new String[]{name1,name2},new Class<?>[]{type1,type2});}  }
class C{  public void updateCommandState(){  for (  CommandHandlerBase c : mCommandHandlersSet) {    c.updateAndReturnStatus();  }}  }
class C{  public ComputeTaskCancelledException(String msg){  super(msg);}  }
class C{  @Override public Drawable mutate(){  if (!mMutated && super.mutate() == this) {    mState=new ColorState(mState);    mMutated=true;  }  return this;}  }
class C{  private boolean journalRebuildRequired(){  final int REDUNDANT_OP_COMPACT_THRESHOLD=2000;  return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.size();}  }
class C{  public FilteredImageSource(ImageProducer orig,ImageFilter imgf){  src=orig;  filter=imgf;}  }
class C{  protected void redraw(){  while (!updateQueue.isEmpty()) {    Visualization vis=updateQueue.pop();    vis.incrementalRedraw();  }}  }
class C{  static synchronized JmriConfigurationProvider findProvider(Profile project){  if (providers.get(project) == null) {    providers.put(project,new JmriConfigurationProvider(project));  }  return providers.get(project);}  }
class C{  @DSSink({DSSinkKind.IO}) @DSComment("IO movement methodName") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.556 -0500",hash_original_method="7E641CDBDB4194A4ABD6D1C9C473BCDE",hash_generated_method="926C6B4F4B203D16211A7DFF9C2165F3") public void print(int inum){  print(String.valueOf(inum));}  }
class C{  public Vector(int initialCapacity,int capacityIncrement){  super();  if (initialCapacity < 0)   throw new IllegalArgumentException("Illegal Capacity: " + initialCapacity);  this.elementData=new Object[initialCapacity];  this.capacityIncrement=capacityIncrement;}  }
class C{  public EditFilterDialog(Frame owner,String frameTitle,JList filterList,boolean isAdd){  super(owner,frameTitle,true);  try {    setIconImage(TDA.createImageIcon("Filters.png").getImage());  } catch (  NoSuchMethodError nsme) {  }  this.isAdd=isAdd;  this.filterList=filterList;  frame=owner;  getContentPane().setLayout(new BorderLayout());  initPanel();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  DoubleNode<IMove> node=moves.first();  boolean endsWithComma=false;  while (node != null) {    sb.append(node.value() + ",");    node=node.next();    endsWithComma=true;  }  if (endsWithComma) {    sb.deleteCharAt(sb.length() - 1);  }  return sb.toString();}  }
class C{  public LayoutResult layoutMenuItem(){  LayoutResult lr=createLayoutResult();  prepareForLayout(lr);  if (isColumnLayout()) {    if (isLeftToRight()) {      doLTRColumnLayout(lr,getLTRColumnAlignment());    } else {      doRTLColumnLayout(lr,getRTLColumnAlignment());    }  } else {    if (isLeftToRight()) {      doLTRComplexLayout(lr,getLTRColumnAlignment());    } else {      doRTLComplexLayout(lr,getRTLColumnAlignment());    }  }  alignAccCheckAndArrowVertically(lr);  return lr;}  }
class C{  @Override protected int computeVerticalScrollRange(){  int count=getChildCount();  return count == 0 ? getHeight() : (getChildAt(0)).getBottom();}  }
class C{  private PropertyInfoExt loadVdcConfig() throws Exception {  PropertyInfoExt targetVdcPropInfo=new PropertyInfoExt(vdcConfigUtil.genVdcProperties());  targetVdcPropInfo.addProperty(Constants.IPSEC_STATUS,ipsecConfig.getIpsecStatus());  targetVdcPropInfo.addProperty(Constants.IPSEC_KEY,ipsecConfig.getPreSharedKey());  return targetVdcPropInfo;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.100 -0500",hash_original_method="44AA99B3E06F91C4A28CA95A02F486A4",hash_generated_method="1FF68244F39CE237A2FA2C3738169987") public ActivityMonitor(IntentFilter which,ActivityResult result,boolean block){  mWhich=which;  mClass=null;  mResult=result;  mBlock=block;}  }
class C{  public static LostAlarmE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  LostAlarmE object=new LostAlarmE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement()) {        reader.next();      }      return null;    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"LostAlarm".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (LostAlarmE)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","LostAlarm").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setLostAlarm(null);        reader.next();        reader.next();      } else {        object.setLostAlarm(LostAlarm.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public Extent loadExtent(){  return new Extent(loadArchitecturalWord());}  }
class C{  public static final String nestStackTrace(String stackTrace,Throwable t){  String newStackTrace=null;  if (t instanceof NestingException) {    NestingException ex=(NestingException)t;    newStackTrace=stackTrace + ex.getStackTrace();  } else {    newStackTrace=stackTrace + captureStackTrace(t);  }  return newStackTrace;}  }
class C{  public CharSequence format(String fileName,CharSequence code){  File file=new File(fileName);  FileHandle fileHandle=new FileHandleImpl(new Outlet(),file);  fileHandle.setBuffer(code);  csharpBeautifier.beforeWriteAndClose(fileHandle);  return fileHandle.getBuffer();}  }
class C{  public JToggleButton createJToolbarToggleButton(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JToggleButton result;  try {    result=new JToolbarToggleButton(getString(name + TEXT_SUFFIX));  } catch (  MissingResourceException e) {    result=new JToolbarToggleButton();  }  initializeButton(result,name);  return result;}  }
class C{  protected boolean isLink(Element e){  return (e.getAttributes().getAttribute(HTML.Tag.A) != null);}  }
class C{  public PathHierarchyTokenizerFactory(Map<String,String> args){  super(args);  delimiter=getChar(args,"delimiter",PathHierarchyTokenizer.DEFAULT_DELIMITER);  replacement=getChar(args,"replace",delimiter);  reverse=getBoolean(args,"reverse",false);  skip=getInt(args,"skip",PathHierarchyTokenizer.DEFAULT_SKIP);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private long acquireWrite(boolean interruptible,long deadline){  WNode node=null, p;  for (int spins=-1; ; ) {    long m, s, ns;    if ((m=(s=state) & ABITS) == 0L) {      if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT))       return ns;    } else     if (spins < 0)     spins=(m == WBIT && wtail == whead) ? SPINS : 0; else     if (spins > 0) {      if (ThreadLocalRandom.current().nextInt() >= 0)       --spins;    } else     if ((p=wtail) == null) {      WNode hd=new WNode(WMODE,null);      if (U.compareAndSwapObject(this,WHEAD,null,hd))       wtail=hd;    } else     if (node == null)     node=new WNode(WMODE,p); else     if (node.prev != p)     node.prev=p; else     if (U.compareAndSwapObject(this,WTAIL,p,node)) {      p.next=node;      break;    }  }  for (int spins=-1; ; ) {    WNode h, np, pp;    int ps;    if ((h=whead) == p) {      if (spins < 0)       spins=HEAD_SPINS; else       if (spins < MAX_HEAD_SPINS)       spins<<=1;      for (int k=spins; ; ) {        long s, ns;        if (((s=state) & ABITS) == 0L) {          if (U.compareAndSwapLong(this,STATE,s,ns=s + WBIT)) {            whead=node;            node.prev=null;            return ns;          }        } else         if (ThreadLocalRandom.current().nextInt() >= 0 && --k <= 0)         break;      }    } else     if (h != null) {      WNode c;      Thread w;      while ((c=h.cowait) != null) {        if (U.compareAndSwapObject(h,WCOWAIT,c,c.cowait) && (w=c.thread) != null)         U.unpark(w);      }    }    if (whead == h) {      if ((np=node.prev) != p) {        if (np != null)         (p=np).next=node;      } else       if ((ps=p.status) == 0)       U.compareAndSwapInt(p,WSTATUS,0,WAITING); else       if (ps == CANCELLED) {        if ((pp=p.prev) != null) {          node.prev=pp;          pp.next=node;        }      } else {        long time;        if (deadline == 0L)         time=0L; else         if ((time=deadline - System.nanoTime()) <= 0L)         return cancelWaiter(node,node,false);        Thread wt=Thread.currentThread();        U.putObject(wt,PARKBLOCKER,this);        node.thread=wt;        if (p.status < 0 && (p != h || (state & ABITS) != 0L) && whead == h && node.prev == p)         U.park(false,time);        node.thread=null;        U.putObject(wt,PARKBLOCKER,null);        if (interruptible && Thread.interrupted())         return cancelWaiter(node,node,true);      }    }  }}  }
class C{  private void createPolygon(Graphics2D x_graphics,Rectangle2D x_dataArea,XYPlot x_plot,ValueAxis x_domainAxis,ValueAxis x_rangeAxis,boolean x_positive,LinkedList x_xValues,LinkedList x_yValues){  PlotOrientation l_orientation=x_plot.getOrientation();  RectangleEdge l_domainAxisLocation=x_plot.getDomainAxisEdge();  RectangleEdge l_rangeAxisLocation=x_plot.getRangeAxisEdge();  Object[] l_xValues=x_xValues.toArray();  Object[] l_yValues=x_yValues.toArray();  GeneralPath l_path=new GeneralPath();  if (PlotOrientation.VERTICAL == l_orientation) {    double l_x=x_domainAxis.valueToJava2D(((Double)l_xValues[0]).doubleValue(),x_dataArea,l_domainAxisLocation);    if (this.roundXCoordinates) {      l_x=Math.rint(l_x);    }    double l_y=x_rangeAxis.valueToJava2D(((Double)l_yValues[0]).doubleValue(),x_dataArea,l_rangeAxisLocation);    l_path.moveTo((float)l_x,(float)l_y);    for (int i=1; i < l_xValues.length; i++) {      l_x=x_domainAxis.valueToJava2D(((Double)l_xValues[i]).doubleValue(),x_dataArea,l_domainAxisLocation);      if (this.roundXCoordinates) {        l_x=Math.rint(l_x);      }      l_y=x_rangeAxis.valueToJava2D(((Double)l_yValues[i]).doubleValue(),x_dataArea,l_rangeAxisLocation);      l_path.lineTo((float)l_x,(float)l_y);    }    l_path.closePath();  } else {    double l_x=x_domainAxis.valueToJava2D(((Double)l_xValues[0]).doubleValue(),x_dataArea,l_domainAxisLocation);    if (this.roundXCoordinates) {      l_x=Math.rint(l_x);    }    double l_y=x_rangeAxis.valueToJava2D(((Double)l_yValues[0]).doubleValue(),x_dataArea,l_rangeAxisLocation);    l_path.moveTo((float)l_y,(float)l_x);    for (int i=1; i < l_xValues.length; i++) {      l_x=x_domainAxis.valueToJava2D(((Double)l_xValues[i]).doubleValue(),x_dataArea,l_domainAxisLocation);      if (this.roundXCoordinates) {        l_x=Math.rint(l_x);      }      l_y=x_rangeAxis.valueToJava2D(((Double)l_yValues[i]).doubleValue(),x_dataArea,l_rangeAxisLocation);      l_path.lineTo((float)l_y,(float)l_x);    }    l_path.closePath();  }  if (l_path.intersects(x_dataArea)) {    x_graphics.setPaint(x_positive ? getPositivePaint() : getNegativePaint());    x_graphics.fill(l_path);  }}  }
class C{  private String dumpRawRecord(final long addr){  if (journal.getBufferStrategy() instanceof IRWStrategy) {    final IStore store=((IRWStrategy)journal.getBufferStrategy()).getStore();    try {      final InputStream is=store.getInputStream(addr);      try {      }  finally {        try {          is.close();        } catch (        IOException e) {        }      }      return "Address is stream: addr=" + addr;    } catch (    RuntimeException ex) {    }  }  final ByteBuffer buf;  try {    buf=journal.read(addr);  } catch (  Throwable t) {    final String msg="Could not read: addr=" + addr + ", ex="+ t;    log.error(msg,t);    return msg;  }  if (buf == null)   throw new IllegalArgumentException("Nothing at that address");  final Object obj=decodeData(buf);  if (obj == null) {    return "Could not decode: addr=" + addr;  } else {    return obj.toString();  }}  }
class C{  public int documentID(int position){  return results.get(position).getIndexNumber();}  }
class C{  public boolean isDisabled(){  return (java.lang.Boolean)getStateHelper().eval(PropertyKeys.disabled,false);}  }
class C{  public boolean atEnd(){  return (currentLocation.compareTo(endLocation) >= 0);}  }
class C{  @Override public void mouseClicked(MouseEvent e){}  }
class C{  public String globalInfo(){  return "Loads local files from disk.";}  }
class C{  public static Vector3f interpolateLinear(float scale,Vector3f startValue,Vector3f endValue){  return interpolateLinear(scale,startValue,endValue,null);}  }
class C{  public static Collection<ClusterNode> affinityNodes(final GridCacheContext ctx){  return ctx.discovery().cacheAffinityNodes(ctx.namex(),AffinityTopologyVersion.NONE);}  }
class C{  public void currentLog(Long endingOffset) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  String path="/v1/system/logs".replaceAll("\\{format\\}","json");  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","endingOffset",endingOffset));  final String[] accepts={"text/plain"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{};  apiClient.invokeAPI(path,"GET",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,null);}  }
class C{  public JsonArrayRequest(int method,String url,JSONObject jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public static boolean parseBoolean(CharSequence csq){  Cursor cursor=new Cursor();  boolean result=parseBoolean(csq,cursor);  if (!cursor.atEnd(csq))   throw new IllegalArgumentException("Extraneous characters \"" + cursor.tail(csq) + "\"");  return result;}  }
class C{  protected void writeNamespaces() throws IOException {  if (namespacesMap != null) {    for (    Map.Entry<String,String> entry : namespacesMap.entrySet()) {      String prefix=entry.getKey();      String uri=entry.getValue();      writeNamespace(prefix,uri);    }    namespacesMap=null;  }}  }
class C{  public static byte[] decode(char[] in,int iOff,int iLen){  if (iLen % 4 != 0)   throw new IllegalArgumentException("Length of Base64 encoded input string is not a multiple of 4.");  while (iLen > 0 && in[iOff + iLen - 1] == '=')   iLen--;  int oLen=(iLen * 3) / 4;  byte[] out=new byte[oLen];  int ip=iOff;  int iEnd=iOff + iLen;  int op=0;  while (ip < iEnd) {    int i0=in[ip++];    int i1=in[ip++];    int i2=ip < iEnd ? in[ip++] : 'A';    int i3=ip < iEnd ? in[ip++] : 'A';    if (i0 > 127 || i1 > 127 || i2 > 127 || i3 > 127)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int b0=map2[i0];    int b1=map2[i1];    int b2=map2[i2];    int b3=map2[i3];    if (b0 < 0 || b1 < 0 || b2 < 0 || b3 < 0)     throw new IllegalArgumentException("Illegal character in Base64 encoded data.");    int o0=(b0 << 2) | (b1 >>> 4);    int o1=((b1 & 0xf) << 4) | (b2 >>> 2);    int o2=((b2 & 3) << 6) | b3;    out[op++]=(byte)o0;    if (op < oLen)     out[op++]=(byte)o1;    if (op < oLen)     out[op++]=(byte)o2;  }  return out;}  }
class C{  public RoundedToolbar(final Composite parent,final int style){  super(parent,style | SWT.DOUBLE_BUFFERED);  items=new ArrayList<RoundedToolItem>();  cornerRadius=2;  addListeners();}  }
class C{  public Whirlpool0(){  super(T0,T1,T2,T3,T4,T5,T6,T7,RC);}  }
class C{  private Object checkValueEL(Object value){  if (dimension > 1) {    if (value instanceof Array) {      if (((Array)value).getDimension() != dimension - 1)       return null;    } else     return null;  }  return value;}  }
class C{  @NotNull public List<HgRevisionNumber> parents(@NotNull VirtualFile repo){  return getRevisions(repo,"parents",null,null,true);}  }
class C{  public Numbers(int i){  id=i;  id1=-1 * id;  id2=1000 - id;  avg1=(id + id1 + id2) / 3;  max1=id;  range=(id - id1);  l=id * 100000000;}  }
class C{  public static void registerAllEditors(){  Properties props;  Enumeration enm;  String name;  String value;  registerEditors();  if (m_MekaEditorsRegistered)   return;  System.err.println("---Registering MEKA Editors---");  m_MekaEditorsRegistered=true;  try {    props=PropsUtils.read(MEKA_GUIEDITORS_PROPERTY_FILE);    if (DEBUG)     System.out.println("start<GenericObjectEditor.registerAllEditors()>\n" + PropsUtils.toString(props,null) + "end<GenericObjectEditor.registerAllEditors()>\n");  } catch (  Exception e) {    props=new Properties();    e.printStackTrace();  }  enm=props.propertyNames();  while (enm.hasMoreElements()) {    name=enm.nextElement().toString();    value=props.getProperty(name,"");    registerEditor(name,value);  }}  }
class C{  public ConfigExceptionLocation(String msg){  super(msg);}  }
class C{  public static Map<String,Object> packBulk(DispatchContext dctx,Map<String,? extends Object> context){  PackingSession session=(PackingSession)context.get("packingSession");  String orderId=(String)context.get("orderId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  Boolean updateQuantity=(Boolean)context.get("updateQuantity");  Locale locale=(Locale)context.get("locale");  if (updateQuantity == null) {    updateQuantity=Boolean.FALSE;  }  String instructions=(String)context.get("handlingInstructions");  session.setHandlingInstructions(instructions);  String pickerPartyId=(String)context.get("pickerPartyId");  session.setPickerPartyId(pickerPartyId);  Map<String,?> selInfo=UtilGenerics.checkMap(context.get("selInfo"));  Map<String,String> iteInfo=UtilGenerics.checkMap(context.get("iteInfo"));  Map<String,String> prdInfo=UtilGenerics.checkMap(context.get("prdInfo"));  Map<String,String> qtyInfo=UtilGenerics.checkMap(context.get("qtyInfo"));  Map<String,String> pkgInfo=UtilGenerics.checkMap(context.get("pkgInfo"));  Map<String,String> wgtInfo=UtilGenerics.checkMap(context.get("wgtInfo"));  Map<String,String> numPackagesInfo=UtilGenerics.checkMap(context.get("numPackagesInfo"));  if (selInfo != null) {    for (    String rowKey : selInfo.keySet()) {      String orderItemSeqId=iteInfo.get(rowKey);      String prdStr=prdInfo.get(rowKey);      if (UtilValidate.isEmpty(prdStr)) {        prdStr=null;      }      String pkgStr=pkgInfo.get(rowKey);      String qtyStr=qtyInfo.get(rowKey);      String wgtStr=wgtInfo.get(rowKey);      Debug.logInfo("Item: " + orderItemSeqId + " / Product: "+ prdStr+ " / Quantity: "+ qtyStr+ " /  Package: "+ pkgStr+ " / Weight: "+ wgtStr,module);      String[] quantities;      String[] packages;      String[] weights;      if (pkgStr.indexOf(",") != -1) {        packages=pkgStr.split(",");      } else {        packages=new String[]{pkgStr};      }      if (packages == null || packages.length == 0) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPackBulkNoPackagesDefined",locale));      }      if (qtyStr == null) {        quantities=new String[packages.length];        for (int p=0; p < packages.length; p++) {          quantities[p]=qtyInfo.get(rowKey + ":" + packages[p]);        }        if (quantities.length != packages.length) {          return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductPackBulkPackagesAndQuantitiesDoNotMatch",locale));        }      } else {        quantities=new String[]{qtyStr};      }      if (UtilValidate.isEmpty(wgtStr))       wgtStr="0";      weights=new String[]{wgtStr};      for (int p=0; p < packages.length; p++) {        BigDecimal quantity;        int packageSeq;        BigDecimal weightSeq;        try {          quantity=new BigDecimal(quantities[p]);          packageSeq=Integer.parseInt(packages[p]);          weightSeq=new BigDecimal(weights[p]);        } catch (        Exception e) {          return ServiceUtil.returnError(e.getMessage());        }        try {          String numPackagesStr=numPackagesInfo.get(rowKey);          int numPackages=1;          if (numPackagesStr != null) {            try {              numPackages=Integer.parseInt(numPackagesStr);              if (numPackages < 1) {                numPackages=1;              }            } catch (            NumberFormatException nex) {            }          }          for (int numPackage=0; numPackage < numPackages; numPackage++) {            session.addOrIncreaseLine(orderId,orderItemSeqId,shipGroupSeqId,prdStr,quantity,packageSeq + numPackage,weightSeq,updateQuantity.booleanValue());          }        } catch (        GeneralException e) {          Debug.logError(e,module);          return ServiceUtil.returnError(e.getMessage());        }      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public Vector4i add(Vector4i v,Vector4i dest){  dest.x=x + v.x;  dest.y=y + v.y;  dest.z=z + v.z;  dest.w=w + v.w;  return dest;}  }
class C{  private void parseFollowingResponse(String json){  try {    JSONObject root=(JSONObject)parser.parse(json);    int updatedClients=((Number)root.get("updated_clients")).intValue();    listener.wsUserInfo("Updated following buttons for " + updatedClients + " users.");  } catch (  Exception ex) {    LOGGER.warning(String.format("[FFZ-WS] Error parsing 'update_follow_buttons' response: %s [%s]",ex,json));  }}  }
class C{  public static String fullVersion(){  return version("full");}  }
class C{  public void addTransitPath(Map<LegMode,StreetRouter> accessRouter,Map<LegMode,StreetRouter> egressRouter,TIntObjectMap<LegMode> stopModeAccessMap,TIntObjectMap<LegMode> stopModeEgressMap,PathWithTimes currentTransitPath,TransportNetwork transportNetwork,ZonedDateTime fromTimeDateZD){  HashPath hashPath=new HashPath(currentTransitPath);  ProfileOption profileOption=transitToOption.getOrDefault(hashPath,new ProfileOption());  if (profileOption.isEmpty()) {    LOG.debug("Creating new profile option");    options.add(profileOption);  }  int startStopIndex=currentTransitPath.boardStops[0];  int endStopIndex=currentTransitPath.alightStops[currentTransitPath.length - 1];  int startVertexStopIndex=transportNetwork.transitLayer.streetVertexForStop.get(startStopIndex);  int endVertexStopIndex=transportNetwork.transitLayer.streetVertexForStop.get(endStopIndex);  LegMode accessMode=stopModeAccessMap.get(startStopIndex);  if (accessMode != null) {    int accessPathIndex=profileOption.getAccessIndex(accessMode,startVertexStopIndex);    if (accessPathIndex < 0) {      StreetRouter streetRouter=accessRouter.get(accessMode);      StreetRouter.State state=streetRouter.getStateAtVertex(startVertexStopIndex);      if (state != null) {        StreetPath streetPath;        if ((accessMode == LegMode.CAR_PARK || accessMode == LegMode.BICYCLE_RENT) && streetRouter.previousRouter != null) {          streetPath=new StreetPath(state,streetRouter,accessMode,transportNetwork);        } else {          streetPath=new StreetPath(state,transportNetwork);        }        StreetSegment streetSegment=new StreetSegment(streetPath,accessMode,transportNetwork.streetLayer);        profileOption.addAccess(streetSegment,accessMode,startVertexStopIndex);      } else {        LOG.warn("Access: Last state not found for mode:{} stop:{}({})",accessMode,startVertexStopIndex,startStopIndex);      }    }  } else {    LOG.warn("Mode is not in stopModeAccessMap for start stop:{}({})",startVertexStopIndex,startStopIndex);  }  LegMode egressMode=stopModeEgressMap.get(endStopIndex);  if (egressMode != null) {    int egressPathIndex=profileOption.getEgressIndex(egressMode,endVertexStopIndex);    if (egressPathIndex < 0) {      StreetRouter streetRouter=egressRouter.get(egressMode);      StreetRouter.State state=streetRouter.getStateAtVertex(endVertexStopIndex);      if (state != null) {        StreetPath streetPath=new StreetPath(state,transportNetwork);        StreetSegment streetSegment=new StreetSegment(streetPath,egressMode,transportNetwork.streetLayer);        profileOption.addEgress(streetSegment,egressMode,endVertexStopIndex);      } else {        LOG.warn("EGRESS: Last state not found for mode:{} stop:{}({})",accessMode,endVertexStopIndex,endStopIndex);      }    }  } else {    LOG.warn("Mode is not in stopModeEgressMap for END stop:{}({})",endVertexStopIndex,endStopIndex);  }  List<TransitJourneyID> transitJourneyIDs=new ArrayList<>(currentTransitPath.patterns.length);  for (int i=0; i < currentTransitPath.patterns.length; i++) {    profileOption.addTransit(transportNetwork.transitLayer,currentTransitPath,i,fromTimeDateZD,transitJourneyIDs);    if (i > 0) {      if (currentTransitPath.boardStops[i] != currentTransitPath.alightStops[i - 1]) {        transferToOption.put(new Transfer(currentTransitPath.alightStops[i - 1],currentTransitPath.boardStops[i],i - 1),profileOption);      }    }    patterns.putIfAbsent(currentTransitPath.patterns[i],new TripPattern(transportNetwork.transitLayer,currentTransitPath.patterns[i]));  }  profileOption.addItineraries(transitJourneyIDs,transportNetwork.getTimeZone());  profileOption.summary=profileOption.generateSummary();  profileOption.fares.addAll(DCFareCalculator.calculateFares(currentTransitPath,transportNetwork));  transitToOption.putIfAbsent(hashPath,profileOption);}  }
class C{  public void addThreadPool(String tag,int size){  if (size <= 0) {    throw new RuntimeException("pool size at least one");  }  RequestQueue requestQueue=VolleyManager.newRequestQueue(mContext,size);  VinciImageLoader imageLoader=new VinciImageLoader(mContext,requestQueue);  queues.put(tag,requestQueue);  loaders.put(tag,imageLoader);}  }
class C{  public void addEventListeners(MBeanServer server,Map<String,Map<String,Object>> descriptor){  for (  Map.Entry<String,Map<String,Object>> item : descriptor.entrySet()) {    Map<String,Object> listener=item.getValue();    ObjectName broadcaster=(ObjectName)listener.get("from");    try {      String eventType=(String)listener.get("event");      if (eventType != null) {        NotificationFilterSupport filter=new NotificationFilterSupport();        filter.enableType(eventType);        server.addNotificationListener(broadcaster,JmxEventListener.getListener(),filter,listener);      } else {        server.addNotificationListener(broadcaster,JmxEventListener.getListener(),null,listener);      }    } catch (    InstanceNotFoundException e) {      throw new JmxBuilderException(e);    }  }}  }
class C{  protected Object extractAndConvertValue(ConsumerRecord<?,?> record,Type type){  return record.value() == null ? KafkaNull.INSTANCE : record.value();}  }
class C{  public static void toggleBreakpoint(final BackEndDebuggerProvider debuggerProvider,final INaviFunctionNode functionNode){  Preconditions.checkNotNull(debuggerProvider,"IE01721: Debugger provider argument can not be null");  Preconditions.checkNotNull(functionNode,"IE01722: Function node argument can not be null");  if (functionNode.getFunction().getType() == FunctionType.IMPORT) {    return;  }  final IDebugger debugger=getDebugger(debuggerProvider,functionNode);  if (debugger == null) {    return;  }  final INaviModule module=functionNode.getFunction().getModule();  CGraphDebugger.toggleBreakpoint(debugger.getBreakpointManager(),module,new UnrelocatedAddress(functionNode.getFunction().getAddress()));}  }
class C{  public MultipartStream(InputStream input,byte[] boundary,int bufSize){  if (boundary == null) {    throw new IllegalArgumentException("boundary may not be null");  }  this.boundaryLength=boundary.length + BOUNDARY_PREFIX.length;  if (bufSize < this.boundaryLength + 1) {    throw new IllegalArgumentException("The buffer size specified for the MultipartStream is too small");  }  this.input=input;  this.bufSize=Math.max(bufSize,boundaryLength * 2);  this.buffer=new byte[this.bufSize];  this.boundary=new byte[this.boundaryLength];  this.keepRegion=this.boundary.length;  System.arraycopy(BOUNDARY_PREFIX,0,this.boundary,0,BOUNDARY_PREFIX.length);  System.arraycopy(boundary,0,this.boundary,BOUNDARY_PREFIX.length,boundary.length);  head=0;  tail=0;}  }
class C{  public void forceCleanupBuffer(){  Arrays.fill(buffer.array(),(byte)0x00);}  }
class C{  private static void exit(@Nullable String errMsg,boolean showUsage,int exitCode){  if (errMsg != null)   X.error(errMsg);  String runner=System.getProperty(IGNITE_PROG_NAME,"ignite.{sh|bat}");  int space=runner.indexOf(' ');  runner=runner.substring(0,space == -1 ? runner.length() : space);  if (showUsage) {    boolean ignite=runner.contains("ignite.");    X.error("Usage:","    " + runner + (ignite ? " [?]|[path {-v}{-np}]|[-i]" : " [?]|[-v]"),"    Where:","    ?, /help, -help, - show this message.","    -v               - verbose mode (quiet by default).","    -np              - no pause on exit (pause by default)","    -nojmx           - disable JMX monitoring (enabled by default)");    if (ignite) {      X.error("    -i              - interactive mode (choose configuration file from list).","    path            - path to Spring XML configuration file.","                      Path can be absolute or relative to IGNITE_HOME."," ","Spring file should contain one bean definition of Java type","'org.apache.ignite.configuration.IgniteConfiguration'. Note that bean will be","fetched by the type and its ID is not used.");    }  }  System.exit(exitCode);}  }
class C{  public static Options defaultOptions(){  return new Options(HELP,VERSION,PROPERTY,PROPERTIES_URL,SERVER_CONFIG,STAGE_CONFIG,ACTIVE_STAGE,BIND);}  }
class C{  public String errorString(String err,Object arg0,Object arg1,Object arg2){  if (err.startsWith("rmic.") || err.startsWith("warn.rmic.")) {    String result=Main.getText(err,(arg0 != null ? arg0.toString() : null),(arg1 != null ? arg1.toString() : null),(arg2 != null ? arg2.toString() : null));    if (err.startsWith("warn.")) {      result="warning: " + result;    }    return result;  } else {    return super.errorString(err,arg0,arg1,arg2);  }}  }
class C{  public static int overloadError(double one,double two){  return (int)(one + two);}  }
class C{  public static boolean isNullOrEmpty(String text){  return (text == null) || (text.trim().isEmpty());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:12.387 -0500",hash_original_method="D16C073A10FD3671AE05EBC49E38DA17",hash_generated_method="80887C79768229A316C39532A8C6419F") public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  public void rectValueToPixel(RectF r,float phaseY){  if (r.top > 0)   r.top*=phaseY; else   r.bottom*=phaseY;  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  private Referenceable registerInstance(Referenceable referenceable) throws Exception {  String typeName=referenceable.getTypeName();  LOG.debug("creating instance of type " + typeName);  String entityJSON=InstanceSerialization.toJson(referenceable,true);  LOG.debug("Submitting new entity {} = {}",referenceable.getTypeName(),entityJSON);  List<String> guids=getAtlasClient().createEntity(entityJSON);  LOG.debug("created instance for type " + typeName + ", guid: "+ guids);  return new Referenceable(guids.get(guids.size() - 1),referenceable.getTypeName(),null);}  }
class C{  public void add(double time,double cpuTime){  createContainerIfNecessary();  container.add(time,cpuTime);}  }
class C{  protected void printChildren() throws TranscoderException, XMLException, IOException {  int op=0;  loop:   for (; ; ) {switch (type) {default :      throw new RuntimeException("Invalid XML");case LexicalUnits.NAME:    writer.write(getCurrentValue());  type=scanner.next();break;case LexicalUnits.LEFT_BRACE:writer.write('(');type=scanner.next();if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}printChildren();if (type != LexicalUnits.RIGHT_BRACE) {throw fatalError("right.brace",null);}writer.write(')');type=scanner.next();}if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}switch (type) {case LexicalUnits.RIGHT_BRACE:break loop;case LexicalUnits.STAR:writer.write('*');type=scanner.next();break;case LexicalUnits.QUESTION:writer.write('?');type=scanner.next();break;case LexicalUnits.PLUS:writer.write('+');type=scanner.next();break;}if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}switch (type) {case LexicalUnits.PIPE:if (op != 0 && op != type) {throw new RuntimeException("Invalid XML");}writer.write('|');op=type;type=scanner.next();break;case LexicalUnits.COMMA:if (op != 0 && op != type) {throw new RuntimeException("Invalid XML");}writer.write(',');op=type;type=scanner.next();}if (type == LexicalUnits.S) {writer.write(getCurrentValue());type=scanner.next();}}}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;}  }
class C{  public static boolean checkFineLocationPermission(Context context){  return PackageManager.PERMISSION_GRANTED == ContextCompat.checkSelfPermission(context,Manifest.permission.ACCESS_FINE_LOCATION);}  }
class C{  @SuppressFBWarnings(value="SF_SWITCH_FALLTHROUGH") public OrderedCollection<PortChangeEvent> handlePortStatusMessage(OFPortStatus ps){  if (ps == null) {    throw new NullPointerException("OFPortStatus message must " + "not be null");  }  lock.writeLock().lock();  try {    OFPortDesc port=ps.getDesc();    OFPortReason reason=ps.getReason();    if (reason == null) {      throw new IllegalArgumentException("Unknown PortStatus " + "reason code " + ps.getReason());    }    if (log.isDebugEnabled()) {      log.debug("Handling OFPortStatus: {} for {}",reason,String.format("%s (%d)",port.getName(),port.getPortNo().getPortNumber()));    }    if (reason == OFPortReason.DELETE)     return handlePortStatusDelete(port);    Map<OFPort,OFPortDesc> newPortByNumber=new HashMap<OFPort,OFPortDesc>(portsByNumber);    OrderedCollection<PortChangeEvent> events=getSinglePortChanges(port);    for (    PortChangeEvent e : events) {switch (e.type) {case DELETE:        newPortByNumber.remove(e.port.getPortNo());      break;case ADD:    if (reason != OFPortReason.ADD) {    }case DOWN:case OTHER_UPDATE:case UP:  newPortByNumber.put(e.port.getPortNo(),e.port);break;}}updatePortsWithNewPortsByNumber(newPortByNumber);return events;}  finally {lock.writeLock().unlock();}}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.891 -0500",hash_original_method="EFEABC4C711DA14ECED12A57E29FC504",hash_generated_method="C1E7128B8ABE2E8FF3DAA6D0223CE426") public CircularRedirectException(String message){  super(message);}  }
class C{  @Override public void configure(){  RfidTrafficController control;  RfidProtocol protocol;  String opt1=getOptionState(option1Name);switch (opt1) {case "Generic Stand-alone":    log.debug("Create Generic Standalone SpecificTrafficController");  control=new StandaloneTrafficController(this.getSystemConnectionMemo());this.getSystemConnectionMemo().configureManagers(new StandaloneSensorManager(control,this.getSystemPrefix()),new StandaloneReporterManager(control,this.getSystemPrefix()));break;case "MERG Concentrator":log.debug("Create MERG Concentrator SpecificTrafficController");control=new ConcentratorTrafficController(this.getSystemConnectionMemo(),getOptionState(option2Name));this.getSystemConnectionMemo().configureManagers(new ConcentratorSensorManager(control,this.getSystemPrefix()),new ConcentratorReporterManager(control,this.getSystemPrefix()));break;default :log.warn("adapter option " + opt1 + " defaults to Generic Stand-alone");control=new StandaloneTrafficController(this.getSystemConnectionMemo());this.getSystemConnectionMemo().configureManagers(new StandaloneSensorManager(control,this.getSystemPrefix()),new StandaloneReporterManager(control,this.getSystemPrefix()));break;}String opt3=getOptionState(option3Name);if (opt1.equals("MERG Concentrator")) {log.info("set protocol to CORE-ID");String opt2=getOptionState(option2Name);switch (opt2) {case "A-H":log.info("set concentrator range to 'A-H' at position 1");protocol=new CoreIdRfidProtocol('A','H',1);break;case "I-P":log.info("set concentrator range to 'I-P' at position 1");protocol=new CoreIdRfidProtocol('I','P',1);break;default :log.warn("concentrator range '{}' not supported - default to no concentrator",opt2);protocol=new CoreIdRfidProtocol();break;}} else {switch (opt3) {case "CORE-ID":log.info("set protocol to CORE-ID");protocol=new CoreIdRfidProtocol();break;case "Olimex":log.info("set protocol to Olimex");protocol=new OlimexRfidProtocol();break;case "Parallax":log.info("set protocol to Parallax");protocol=new ParallaxRfidProtocol();break;case "SeeedStudio":log.info("set protocol to SeeedStudio");protocol=new SeeedStudioRfidProtocol();break;case "EM-18":log.info("set protocol to EM-18");protocol=new Em18RfidProtocol();break;default :log.warn("protocol option " + opt3 + " defaults to CORE-ID");protocol=new CoreIdRfidProtocol();break;}}this.getSystemConnectionMemo().setProtocol(protocol);this.getSystemConnectionMemo().setRfidTrafficController(control);control.setAdapterMemo(this.getSystemConnectionMemo());control.connectPort(this);control.sendInitString();}  }
class C{  public DefaultClientRequestContext(EventLoop eventLoop,SessionProtocol sessionProtocol,Endpoint endpoint,String method,String path,String fragment,ClientOptions options,Object request){  super(sessionProtocol,method,path,request);  this.eventLoop=requireNonNull(eventLoop,"eventLoop");  this.options=requireNonNull(options,"options");  this.endpoint=requireNonNull(endpoint,"endpoint");  this.fragment=requireNonNull(fragment,"fragment");  requestLog=new DefaultRequestLog();  responseLog=new DefaultResponseLog(requestLog,requestLog);  writeTimeoutMillis=options.defaultWriteTimeoutMillis();  responseTimeoutMillis=options.defaultResponseTimeoutMillis();  maxResponseLength=options.defaultMaxResponseLength();  if (SessionProtocol.ofHttp().contains(sessionProtocol)) {    final HttpHeaders headers=options.getOrElse(ClientOption.HTTP_HEADERS,HttpHeaders.EMPTY_HEADERS);    if (!headers.isEmpty()) {      final HttpHeaders headersCopy=new DefaultHttpHeaders(true,headers.size());      headersCopy.set(headers);      attr(HTTP_HEADERS).set(headersCopy);    }  }}  }
class C{  public static TypeReference copyType(TypeReference ref,ASTNode source){  if (ref instanceof ParameterizedQualifiedTypeReference) {    ParameterizedQualifiedTypeReference iRef=(ParameterizedQualifiedTypeReference)ref;    TypeReference[][] args=null;    if (iRef.typeArguments != null) {      args=new TypeReference[iRef.typeArguments.length][];      int idx=0;      for (      TypeReference[] inRefArray : iRef.typeArguments) {        if (inRefArray == null)         args[idx++]=null; else {          TypeReference[] outRefArray=new TypeReference[inRefArray.length];          int idx2=0;          for (          TypeReference inRef : inRefArray) {            outRefArray[idx2++]=copyType(inRef,source);          }          args[idx++]=outRefArray;        }      }    }    TypeReference typeRef=new ParameterizedQualifiedTypeReference(iRef.tokens,args,iRef.dimensions(),copy(iRef.sourcePositions));    if (source != null)     setGeneratedBy(typeRef,source);    return typeRef;  }  if (ref instanceof ArrayQualifiedTypeReference) {    ArrayQualifiedTypeReference iRef=(ArrayQualifiedTypeReference)ref;    TypeReference typeRef=new ArrayQualifiedTypeReference(iRef.tokens,iRef.dimensions(),copy(iRef.sourcePositions));    if (source != null)     setGeneratedBy(typeRef,source);    return typeRef;  }  if (ref instanceof QualifiedTypeReference) {    QualifiedTypeReference iRef=(QualifiedTypeReference)ref;    TypeReference typeRef=new QualifiedTypeReference(iRef.tokens,copy(iRef.sourcePositions));    if (source != null)     setGeneratedBy(typeRef,source);    return typeRef;  }  if (ref instanceof ParameterizedSingleTypeReference) {    ParameterizedSingleTypeReference iRef=(ParameterizedSingleTypeReference)ref;    TypeReference[] args=null;    if (iRef.typeArguments != null) {      args=new TypeReference[iRef.typeArguments.length];      int idx=0;      for (      TypeReference inRef : iRef.typeArguments) {        if (inRef == null)         args[idx++]=null; else         args[idx++]=copyType(inRef,source);      }    }    TypeReference typeRef=new ParameterizedSingleTypeReference(iRef.token,args,iRef.dimensions(),(long)iRef.sourceStart << 32 | iRef.sourceEnd);    if (source != null)     setGeneratedBy(typeRef,source);    return typeRef;  }  if (ref instanceof ArrayTypeReference) {    ArrayTypeReference iRef=(ArrayTypeReference)ref;    TypeReference typeRef=new ArrayTypeReference(iRef.token,iRef.dimensions(),(long)iRef.sourceStart << 32 | iRef.sourceEnd);    if (source != null)     setGeneratedBy(typeRef,source);    return typeRef;  }  if (ref instanceof Wildcard) {    Wildcard original=(Wildcard)ref;    Wildcard wildcard=new Wildcard(original.kind);    wildcard.sourceStart=original.sourceStart;    wildcard.sourceEnd=original.sourceEnd;    if (original.bound != null)     wildcard.bound=copyType(original.bound,source);    if (source != null)     setGeneratedBy(wildcard,source);    return wildcard;  }  if (ref instanceof SingleTypeReference) {    SingleTypeReference iRef=(SingleTypeReference)ref;    TypeReference typeRef=new SingleTypeReference(iRef.token,(long)iRef.sourceStart << 32 | iRef.sourceEnd);    if (source != null)     setGeneratedBy(typeRef,source);    return typeRef;  }  return ref;}  }
class C{  public void assertArrayEqual(float[] expected,float[] actual,double maxRelativeError,String errorMessage){  TestUtils.assertArrayEqual(expected,actual,maxRelativeError,errorMessage);}  }
class C{  public void help(IHelpable helpable){  Toast.log().info(helpable.getCommandName() + " -- " + helpable.getHelp());}  }
class C{  public void testDrainToN(){  LinkedBlockingQueue q=new LinkedBlockingQueue();  for (int i=0; i < SIZE + 2; ++i) {    for (int j=0; j < SIZE; j++)     assertTrue(q.offer(new Integer(j)));    ArrayList l=new ArrayList();    q.drainTo(l,i);    int k=(i < SIZE) ? i : SIZE;    assertEquals(l.size(),k);    assertEquals(q.size(),SIZE - k);    for (int j=0; j < k; ++j)     assertEquals(l.get(j),new Integer(j));    while (q.poll() != null)     ;  }}  }
class C{  public void testSetTimes() throws Exception {  createFile(igfs,FILE,true,chunk);  checkExist(igfs,igfsSecondary,DIR);  checkExist(igfs,igfsSecondary,SUBDIR);  checkExist(igfs,igfsSecondary,FILE);  checkSetTimes(SUBDIR);  checkSetTimes(FILE);  try {    igfs.setTimes(FILE2,Long.MAX_VALUE,Long.MAX_VALUE);    fail("Exception is not thrown for missing file.");  } catch (  Exception ignore) {  }}  }
class C{  @Override public boolean isApplicable(@NotNull Project project){  XmlFile webXml=AppEngineAssetProvider.getInstance().loadAppEngineStandardWebXml(project,Arrays.asList(ModuleManager.getInstance(project).getModules()));  return webXml != null;}  }
class C{  public Enumeration keys(){  return Collections.enumeration(this.myHashMap.keySet());}  }
class C{  private void sendStageProgressPatch(State state){  if (state.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    return;  }  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(state);  this.sendRequest(patch);}  }
class C{  public RegisterValue(final String name,final BigInteger value,final byte[] memory,final boolean isPc,final boolean isSp){  this.name=Preconditions.checkNotNull(name,"IE01047: Name argument can not be null");  this.value=Preconditions.checkNotNull(value,"IE01033: Value argument can not be null");  Preconditions.checkArgument(!(isPc && isSp),"IE01034: A register can not be both program counter register and stack register");  memoryPointedTo=memory.clone();  isProgramCounter=isPc;  isStackPointer=isSp;}  }
class C{  public final void invert(Matrix3d m1){  invertGeneral(m1);}  }
class C{  public static void main(String[] args){  TestHelpOption tester=new TestHelpOption();  int actualExitCode=run(tester,ARGS,TEST,NEGATED_TEST);  tester.checkExitCode(EXPECTED_EXIT_CODE,actualExitCode);  run(tester,ARGS2,TEST2,NEGATED_TEST2);  tester.printSummary();}  }
class C{  public static LaggedFactor serializableInstance(){  return new LaggedFactor("X",1);}  }
class C{  protected DBIDs computeSubspace(ArrayList<IntIntPair> subspace,ArrayList<ArrayList<DBIDs>> ranges){  HashSetModifiableDBIDs ids=DBIDUtil.newHashSet(ranges.get(subspace.get(0).first).get(subspace.get(0).second));  for (int i=1; i < subspace.size(); i++) {    DBIDs current=ranges.get(subspace.get(i).first).get(subspace.get(i).second - GENE_OFFSET);    ids.retainAll(current);    if (ids.size() == 0) {      break;    }  }  return ids;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.824 -0500",hash_original_method="9819CA3EECC28CF10D8C0CAB99E6CDCB",hash_generated_method="D55A4A5BF8356B88C6FCC1D691E3DDF7") public URI toURILenient() throws URISyntaxException {  if (streamHandler == null) {    throw new IllegalStateException(protocol);  }  return new URI(streamHandler.toExternalForm(this,true));}  }
class C{  void cancel(){  cancelled=true;}  }
class C{  public boolean isThrowException(){  return m_throwException;}  }
class C{  public void handleElement(Element elt,Object data){}  }
class C{  public static void copyPartial(File ori,File dest,int nlines,int step,int offset,boolean filterPreserve){  PngReaderByte png2=new PngReaderByte(ori);  int nlinesmax=(png2.imgInfo.rows - offset) / step;  if (nlines < 1 || nlines > nlinesmax)   nlines=nlinesmax;  PngWriter pngw=new PngWriter(dest,png2.imgInfo.withSize(-1,nlines));  if (filterPreserve)   pngw.setFilterPreserve(true); else   pngw.setFilterType(FilterType.FILTER_CYCLIC);  pngw.writeRows(png2.readRows(nlines,offset,step));  png2.end();  pngw.end();}  }
class C{  protected void reset(){  getProxyBuilder().getContexts().clear();}  }
class C{  public boolean isUsesServiceConsoleNic(){  return usesServiceConsoleNic;}  }
class C{  @Override public boolean isServerTypeValid(PropertyHandler paramHandler) throws Exception {  try {    RORClient rorClient=getVdcClient(paramHandler);    List<String> serverTypes=rorClient.listServerTypes();    if (serverTypes != null && serverTypes.contains(paramHandler.getVserverType())) {      return true;    }  } catch (  Exception e) {    logger.error("Error while checking VServer Type status",e);    SuspendException exception=getSuspendException(e,"error_invalid_servertype");    throw exception;  }  return false;}  }
class C{  private void checkGETBodyWithAwait(final String requestUrl,final String body){  await().atMost(Duration.FIVE_SECONDS).until(null,equalTo(body));}  }
class C{  public ModbusUDPListener(InetAddress ifc){  address=ifc;  listening=true;}  }
class C{  private void present(){  glDisable(GL_DEPTH_TEST);  if (caps.GL_NV_draw_texture) {    NVDrawTexture.glDrawTextureNV(raytraceTexture,sampler,0.0f,0.0f,width,height,0.0f,0.0f,0.0f,1.0f,1.0f);  } else {    glUseProgram(quadProgram);    glBindVertexArray(vao);    glBindTexture(GL_TEXTURE_2D,raytraceTexture);    glBindSampler(0,this.sampler);    glDrawArrays(GL_TRIANGLES,0,6);    glBindSampler(0,0);    glBindTexture(GL_TEXTURE_2D,0);    glBindVertexArray(0);    glUseProgram(0);  }}  }
class C{  public void loadFunctions(Element e3){  this.loadFunctions(e3,"family");}  }
class C{  public List<Range> partitionRange(int partitions,int min,int max){  assert max >= min;  if (partitions == 0)   return Collections.EMPTY_LIST;  long range=(long)max - (long)min;  long srange=Math.max(1,range / partitions);  List<Range> ranges=new ArrayList<>(partitions);  long start=min;  long end=start;  while (end < max) {    end=start + srange;    if (ranges.size() == partitions - 1) {      end=max;    }    ranges.add(new Range((int)start,(int)end));    start=end + 1L;  }  return ranges;}  }
class C{  public final void testGetMGFAlgorithm(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertEquals("MGF1",pssps.getMGFAlgorithm());}  }
class C{  @RequestMapping(value="/systemJobs",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_SYSTEM_JOBS_POST) public SystemJobRunResponse runSystemJob(@RequestBody SystemJobRunRequest request) throws Exception {  return systemJobService.runSystemJob(request);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:29.431 -0500",hash_original_method="A44A96B9BD8D4010644191EEAB137884",hash_generated_method="3A43018D3145FE8B120819AE494DA742") @Override public byte byteValue(){  return value;}  }
class C{  protected void writeLinkToStorage(Link lt,LinkInfo linkInfo){  LinkType type=getLinkType(lt,linkInfo);  Map<String,Object> rowValues=new HashMap<String,Object>();  String id=getLinkId(lt);  rowValues.put(LINK_ID,id);  rowValues.put(LINK_VALID_TIME,linkInfo.getUnicastValidTime());  String srcDpid=lt.getSrc().toString();  rowValues.put(LINK_SRC_SWITCH,srcDpid);  rowValues.put(LINK_SRC_PORT,lt.getSrcPort());  if (type == LinkType.DIRECT_LINK)   rowValues.put(LINK_TYPE,"internal"); else   if (type == LinkType.MULTIHOP_LINK)   rowValues.put(LINK_TYPE,"external"); else   if (type == LinkType.TUNNEL)   rowValues.put(LINK_TYPE,"tunnel"); else   rowValues.put(LINK_TYPE,"invalid");  String dstDpid=lt.getDst().toString();  rowValues.put(LINK_DST_SWITCH,dstDpid);  rowValues.put(LINK_DST_PORT,lt.getDstPort());  storageSourceService.updateRowAsync(LINK_TABLE_NAME,rowValues);}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    if (ALLOW_BROKEN_PRNG) {      Log.w(PrngFixes.class.getSimpleName(),"Failed to seed OpenSSL PRNG",e);    } else {      throw new SecurityException("Failed to seed OpenSSL PRNG",e);    }  }}  }
class C{  public boolean disableCarbons(){  return setCarbonsEnabled(false);}  }
class C{  public void testGetTag(){  Em18RfidProtocol instance=new Em18RfidProtocol();  assertEquals("7800656EB6",instance.getTag(msgStandalone));}  }
class C{  @SuppressWarnings("unused") public static void unlockOrientation(@NonNull Activity activity){  activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);}  }
class C{  public void load(InputStream is,boolean doSubstitutions) throws IOException {  Properties props=new Properties();  props.load(is);  if (doSubstitutions)   substituteSystemValues(props);  load(props);  props=null;}  }
class C{  public void removeAllFromRequester(@NonNull Jedis jedis,@NonNull UUID world) throws ProcessingException {  try {    jedis.hgetAll(RedisKeys.TRANSPORT.toString()).entrySet().stream().filter(null).forEach(null);  } catch (  Exception ex) {    throw new ProcessingException("There was an error removing server \"" + world + "\"!",ex);  }}  }
class C{  IntersectionTypeBound(List<ParameterBound> boundList){  if (boundList == null) {    throw new IllegalArgumentException("bounds list may not be null");  }  this.boundList=boundList;}  }
class C{  private IEditorInput createResourceFileEditorInput(String resourcePath) throws CoreException {  IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(resourcePath));  return MindMapUI.getEditorInputFactory().createEditorInput(file.getLocationURI());}  }
class C{  public BadPositionCategoryException(){  super();}  }
class C{  @Override public <A extends Annotation>ExpressionResult checkUserPermissions(Class<?> resourceClass,Class<A> annotationClass){  if (requestScope.getSecurityMode() == SecurityMode.SECURITY_INACTIVE) {    return ExpressionResult.PASS;  }  ExpressionResult expressionResult=userPermissionCheckCache.get(Triple.of(annotationClass,resourceClass,null));  if (expressionResult != null) {    return expressionResult;  }  Expressions expressions=expressionBuilder.buildUserCheckAnyExpression(resourceClass,annotationClass,requestScope);  expressionResult=executeExpressions(expressions,annotationClass);  userPermissionCheckCache.put(Triple.of(annotationClass,resourceClass,null),expressionResult);  if (expressionResult == PASS) {    expressionResultShortCircuit.add(Triple.of(annotationClass,resourceClass,null));  }  return expressionResult;}  }
class C{  public static Date createTimeSinceOrigin(double age,Type units,java.util.Date origin){  return new Date(age,units,false,origin);}  }
class C{  private static Vector gatherMethodsRecursive(Class baseClass,String methodName,int numArgs,boolean publicOnly,Vector candidates){  if (candidates == null)   candidates=new Vector();  if (publicOnly) {    if (isPublic(baseClass))     addCandidates(baseClass.getMethods(),methodName,numArgs,publicOnly,candidates);  } else   addCandidates(baseClass.getDeclaredMethods(),methodName,numArgs,publicOnly,candidates);  Class[] intfs=baseClass.getInterfaces();  for (int i=0; i < intfs.length; i++)   gatherMethodsRecursive(intfs[i],methodName,numArgs,publicOnly,candidates);  Class superclass=baseClass.getSuperclass();  if (superclass != null)   gatherMethodsRecursive(superclass,methodName,numArgs,publicOnly,candidates);  return candidates;}  }
class C{  public TemporaryFolder(File parentFolder){  this.parentFolder=parentFolder;  this.assureDeletion=false;}  }
class C{  public void initAndroidDevices(boolean shouldKeepAdbAlive) throws AndroidDeviceException {  DdmPreferences.setInitialThreadUpdate(true);  DdmPreferences.setInitialHeapUpdate(true);  this.initializeAdbConnection();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:33.056 -0500",hash_original_method="99EDC8CF58ACEFC383E40E1B1F253896",hash_generated_method="B192DF6DAE9C0FAF199088F4F2FAAE45") @Override public void mark(int readlimit){}  }
class C{  public void moveChild(int index,long duration,@Nullable TimeInterpolator interpolator){  if (isAnimating)   return;  final int destination=getChildPosition(index) + (isVertical() ? getPaddingBottom() : getPaddingRight());  if (duration <= 0) {    isExpanded=destination > closePosition;    setLayoutSize(destination);    requestLayout();    notifyListeners();    return;  }  createExpandAnimator(getCurrentPosition(),destination,duration,interpolator == null ? this.interpolator : interpolator).start();}  }
class C{  public void shutdown(GL10 gl){  if (gl != null) {    if (mState > STATE_NEW) {      int[] textures=new int[1];      textures[0]=mTextureID;      gl.glDeleteTextures(1,textures,0);      mState=STATE_NEW;    }  }}  }
class C{  public synchronized int totalProcessedMessages(){  return F.sumInt(processedMessages().values());}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public static void shuffle(List<?> list){  shuffle(list,new Random());}  }
class C{  public int generateBytes(byte[] out,int outOff,int len) throws DataLengthException, IllegalArgumentException {  if ((out.length - len) < outOff) {    throw new DataLengthException("output buffer too small");  }  long oBytes=len;  int outLen=digest.getDigestSize();  if (oBytes > ((2L << 32) - 1)) {    throw new IllegalArgumentException("Output length too large");  }  int cThreshold=(int)((oBytes + outLen - 1) / outLen);  byte[] dig=new byte[digest.getDigestSize()];  byte[] C=new byte[4];  Pack.intToBigEndian(counterStart,C,0);  int counterBase=counterStart & ~0xFF;  for (int i=0; i < cThreshold; i++) {    digest.update(shared,0,shared.length);    digest.update(C,0,C.length);    if (iv != null) {      digest.update(iv,0,iv.length);    }    digest.doFinal(dig,0);    if (len > outLen) {      System.arraycopy(dig,0,out,outOff,outLen);      outOff+=outLen;      len-=outLen;    } else {      System.arraycopy(dig,0,out,outOff,len);    }    if (++C[3] == 0) {      counterBase+=0x100;      Pack.intToBigEndian(counterBase,C,0);    }  }  digest.reset();  return (int)oBytes;}  }
class C{  MathEnumerationAdapter(Collection<T> col){  iter=col.iterator();}  }
class C{  private static void drawArrowEndpoint(Point from,Point to,Graphics g){  double a=to.x - from.x;  double b=from.y - to.y;  double theta=Math.atan2(b,a);  int itheta=(int)((theta * 360.0) / (2.0 * Math.PI) + 180);  g.fillArc(to.x - 18,to.y - 18,36,36,itheta - 15,30);}  }
class C{  public boolean isPostcodeLookup(){  Object oo=get_Value(COLUMNNAME_IsPostcodeLookup);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public EntryNotFoundException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public void testMergeInBothWithNodeMergeStrategyWithDollarSignInValue() throws Exception {  WebXml srcWebXml=getWebXml("param","value1");  WebXml mergeWebXml=getWebXml("param","${value2}");  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  Element format=getContextParamElement("$left:param-name","$left:param-value $right:param-value");  NodeMergeStrategy strategy=new NodeMergeStrategy(null,format);  merger.setMergeStrategy(WebXmlType.CONTEXT_PARAM,strategy);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasContextParam(srcWebXml,"param"));  assertEquals("value1 ${value2}",getContextParamValue(WebXmlUtils.getContextParam(srcWebXml,"param")));}  }
class C{  public static boolean isOID(String alias){  return ObjectIdentifier.isOID(normalize(alias));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:58.694 -0400",hash_original_method="24E62A441A211059E57D1F5CD5478155",hash_generated_method="71EBA1F015C37EEFE900D43ACF38BD5F") @Override synchronized public void run(){  if (mLogVerbose)   Log.v(TAG,"Running graph.");  setException(null);  if (isRunning()) {    throw new RuntimeException("Graph is already running!");  }  if (mRunner == null) {    throw new RuntimeException("Cannot run before a graph is set!");  }  mRunTask=this.new AsyncRunnerTask();  setRunning(true);  mRunTask.execute(mRunner);}  }
class C{  public static String searchAddFeature(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  Locale locale=UtilHttp.getLocale(request);  String productFeatureId=request.getParameter("productFeatureId");  String fromDateStr=request.getParameter("fromDate");  String thruDateStr=request.getParameter("thruDate");  String amountStr=request.getParameter("amount");  String sequenceNumStr=request.getParameter("sequenceNum");  String productFeatureApplTypeId=request.getParameter("productFeatureApplTypeId");  Timestamp thruDate=null;  Timestamp fromDate=null;  BigDecimal amount=null;  Long sequenceNum=null;  try {    if (UtilValidate.isNotEmpty(fromDateStr)) {      fromDate=Timestamp.valueOf(fromDateStr);    }    if (UtilValidate.isNotEmpty(thruDateStr)) {      thruDate=Timestamp.valueOf(thruDateStr);    }    if (UtilValidate.isNotEmpty(amountStr)) {      amount=new BigDecimal(amountStr);    }    if (UtilValidate.isNotEmpty(sequenceNumStr)) {      sequenceNum=Long.valueOf(sequenceNumStr);    }  } catch (  RuntimeException e) {    String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_casting_types",locale) + " : " + e.toString();    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    Debug.logError(e,errorMsg,module);    return "error";  }  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        String errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      int numAdded=0;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        GenericValue pfa=delegator.makeValue("ProductFeatureAppl");        pfa.set("productId",productId);        pfa.set("productFeatureId",productFeatureId);        pfa.set("fromDate",fromDate);        pfa.set("thruDate",thruDate);        pfa.set("productFeatureApplTypeId",productFeatureApplTypeId);        pfa.set("amount",amount);        pfa.set("sequenceNum",sequenceNum);        pfa.create();        numAdded++;      }      Map<String,Object> messageMap=UtilMisc.toMap("numAdded",Integer.valueOf(numAdded),"productFeatureId",productFeatureId);      String eventMsg=UtilProperties.getMessage(resource,"productSearchEvents.added_param_features",messageMap,locale) + ".";      request.setAttribute("_EVENT_MESSAGE_",eventMsg);      eli.close();    } catch (    GenericEntityException e) {      String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_getting_results",locale) + " : " + e.toString();      request.setAttribute("_ERROR_MESSAGE_",errorMsg);      Debug.logError(e,errorMsg,module);      TransactionUtil.rollback(beganTransaction,errorMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_getting_results",locale) + " : " + e.toString();    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    Debug.logError(e,errorMsg,module);    return "error";  }  return "success";}  }
class C{  public void stopTracking(){  isOnTracking=false;  intAnalytics();  AppSettings.getAppSettings().updateAnalytics(0,0);}  }
class C{  public static long fromHex(String hexStr){  String str=hexStr.startsWith("0x") ? hexStr.substring(2).toLowerCase() : hexStr.toLowerCase();  if (hexStr.length() == 0) {    throw new NumberFormatException();  }  long ret=0;  for (int i=0; i < str.length(); i++) {    int c=str.charAt(i);    if (c >= '0' && c <= '9') {      ret=(ret * 16) + (c - '0');    } else     if (c >= 'a' && c <= 'f') {      ret=(ret * 16) + (c - 'a' + 10);    } else {      throw new NumberFormatException();    }  }  return ret;}  }
class C{  public Object clone() throws CloneNotSupportedException {  AverageTrueRangeSeries clone=(AverageTrueRangeSeries)super.clone();  return clone;}  }
class C{  public ClassConverter(){  super();}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == DelegatingMember.class) {switch (derivedFeatureID) {case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_BASE_TYPE:      return ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:    return ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET:  return ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET;case ImPackage.DELEGATING_METHOD_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:return ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  void parseDirectives() throws SaslException {  char prevChar;  char currChar;  int rc=0;  boolean haveQuotedPair=false;  String currentName="<no name>";  if (m_state == STATE_NO_UTF8_SUPPORT)   throw new SaslException("No UTF-8 support on platform");  prevChar=0;  while (m_curPos < m_directives.length()) {    currChar=m_directives.charAt(m_curPos);switch (m_state) {case STATE_LOOKING_FOR_FIRST_DIRECTIVE:case STATE_LOOKING_FOR_DIRECTIVE:      if (isWhiteSpace(currChar)) {        break;      } else       if (isValidTokenChar(currChar)) {        m_scanStart=m_curPos;        m_state=STATE_SCANNING_NAME;      } else {        m_errorPos=m_curPos;        throw new SaslException("Parse error: Invalid name character");      }    break;case STATE_SCANNING_NAME:  if (isValidTokenChar(currChar)) {    break;  } else   if (isWhiteSpace(currChar)) {    currentName=m_directives.substring(m_scanStart,m_curPos);    m_state=STATE_LOOKING_FOR_EQUALS;  } else   if ('=' == currChar) {    currentName=m_directives.substring(m_scanStart,m_curPos);    m_state=STATE_LOOKING_FOR_VALUE;  } else {    m_errorPos=m_curPos;    throw new SaslException("Parse error: Invalid name character");  }break;case STATE_LOOKING_FOR_EQUALS:if (isWhiteSpace(currChar)) {break;} else if ('=' == currChar) {m_state=STATE_LOOKING_FOR_VALUE;} else {m_errorPos=m_curPos;throw new SaslException("Parse error: Expected equals sign '='.");}break;case STATE_LOOKING_FOR_VALUE:if (isWhiteSpace(currChar)) {break;} else if ('"' == currChar) {m_scanStart=m_curPos + 1;m_state=STATE_SCANNING_QUOTED_STRING_VALUE;} else if (isValidTokenChar(currChar)) {m_scanStart=m_curPos;m_state=STATE_SCANNING_TOKEN_VALUE;} else {m_errorPos=m_curPos;throw new SaslException("Parse error: Unexpected character");}break;case STATE_SCANNING_TOKEN_VALUE:if (isValidTokenChar(currChar)) {break;} else if (isWhiteSpace(currChar)) {addDirective(currentName,false);m_state=STATE_LOOKING_FOR_COMMA;} else if (',' == currChar) {addDirective(currentName,false);m_state=STATE_LOOKING_FOR_DIRECTIVE;} else {m_errorPos=m_curPos;throw new SaslException("Parse error: Invalid value character");}break;case STATE_SCANNING_QUOTED_STRING_VALUE:if ('\\' == currChar) haveQuotedPair=true;if (('"' == currChar) && ('\\' != prevChar)) {addDirective(currentName,haveQuotedPair);haveQuotedPair=false;m_state=STATE_LOOKING_FOR_COMMA;}break;case STATE_LOOKING_FOR_COMMA:if (isWhiteSpace(currChar)) break; else if (currChar == ',') m_state=STATE_LOOKING_FOR_DIRECTIVE; else {m_errorPos=m_curPos;throw new SaslException("Parse error: Expected a comma.");}break;}if (0 != rc) break;prevChar=currChar;m_curPos++;}if (rc == 0) {switch (m_state) {case STATE_SCANNING_TOKEN_VALUE:addDirective(currentName,false);break;case STATE_LOOKING_FOR_FIRST_DIRECTIVE:case STATE_LOOKING_FOR_COMMA:break;case STATE_LOOKING_FOR_DIRECTIVE:throw new SaslException("Parse error: Trailing comma.");case STATE_SCANNING_NAME:case STATE_LOOKING_FOR_EQUALS:case STATE_LOOKING_FOR_VALUE:throw new SaslException("Parse error: Missing value.");case STATE_SCANNING_QUOTED_STRING_VALUE:throw new SaslException("Parse error: Missing closing quote.");}}}  }
class C{  public static String escape(String subject,SubstitutionFilterChain nextFilter,SubstitutionContext ctx){  String encoding="UTF-8";  if (FIND_ENCODING_PATTERN.matcher(subject).find()) {    encoding=subject.substring(0,subject.indexOf(':'));    subject=subject.substring(subject.indexOf(':') + 1);    if (!Charset.isSupported(encoding))     encoding="UTF-8";  }  subject=nextFilter.substitute(subject,ctx);  try {    return URLEncoder.encode(subject,encoding);  } catch (  UnsupportedEncodingException e) {    log.error(e,e);  }  return "";}  }
class C{  public DefaultRequest socialNetwork(String value){  setString(SOCIAL_NETWORK,value);  return this;}  }
class C{  @Override public void onStart(){  super.onStart();  ButtonClickerObserver buttonClickerObserver=new ButtonClickerObserver(this);  PurchasingManager.registerObserver(buttonClickerObserver);}  }
class C{  private void clearShortcut(JButton button){  getRootPane().getActionMap().remove(button);}  }
class C{  public static String saveImageResultsToHtml(String prefix,TopDocs hits,IndexReader reader,String queryImage) throws IOException {  long l=System.currentTimeMillis() / 1000;  String fileName="results-" + prefix + "-"+ l+ ".html";  BufferedWriter bw=new BufferedWriter(new FileWriter(fileName));  bw.write("<html>\n" + "<head><title>Search Results</title></head>\n" + "<body bgcolor=\"#FFFFFF\">\n");  bw.write("<h3>query</h3>\n");  bw.write("<a href=\"file://" + queryImage + "\"><img src=\"file://"+ queryImage+ "\"></a><p>\n");  bw.write("<h3>results</h3>\n");  for (int i=0; i < hits.scoreDocs.length; i++) {    bw.write(hits.scoreDocs[i].score + " - <a href=\"file://" + reader.document(hits.scoreDocs[i].doc).get("descriptorImageIdentifier")+ "\"><img src=\"file://"+ reader.document(hits.scoreDocs[i].doc).get("descriptorImageIdentifier")+ "\"></a><p>\n");  }  bw.write("</body>\n" + "</html>");  bw.close();  return fileName;}  }
class C{  public Executor distributeOn(int numberOfThreads){  if (numberOfThreads <= 0) {    throw new IllegalArgumentException("invalid number of threads");  }  this.numberOfThreads=numberOfThreads;  return this;}  }
class C{  public RRset(Record record){  this();  safeAddRR(record);}  }
class C{  private void startAction(ActionType type,boolean isSingle){  endAction();  currentAction=new ArrayList<>();  currentActionType=type;  mergingSingles=isSingle;}  }
class C{  private DoubleObjPair<Polygon> buildHullsRecursively(Cluster<Model> clu,Hierarchy<Cluster<Model>> hier,Map<Object,DoubleObjPair<Polygon>> hulls){  final Model model=clu.getModel();  final DBIDs ids=clu.getIDs();  boolean coremodel=false;  DBIDs cids=null;  if (model instanceof CoreObjectsModel) {    cids=((CoreObjectsModel)model).getCoreObjects();    coremodel=cids.size() > 0;  }  GrahamScanConvexHull2D hull=new GrahamScanConvexHull2D();  GrahamScanConvexHull2D hull2=coremodel ? new GrahamScanConvexHull2D() : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    final double[] projv=proj.fastProjectDataToRenderSpace(rel.get(iter));    if (projv[0] != projv[0] || projv[1] != projv[1]) {      continue;    }    hull.add(projv);    if (coremodel && cids.contains(iter)) {      hull2.add(projv);    }  }  double weight=ids.size(), cweight=coremodel ? cids.size() : 0.0;  if (hier != null && hulls != null) {    final int numc=hier.numChildren(clu);    if (numc > 0) {      for (Iter<Cluster<Model>> iter=hier.iterChildren(clu); iter.valid(); iter.advance()) {        final Cluster<Model> iclu=iter.get();        DoubleObjPair<Polygon> poly=hulls.get(iclu);        if (poly == null) {          poly=buildHullsRecursively(iclu,hier,hulls);        }        for (ArrayListIter<double[]> vi=poly.second.iter(); vi.valid(); vi.advance()) {          hull.add(vi.get());        }        if (coremodel) {          DoubleObjPair<Polygon> ipoly=hulls.get(iclu.getModel());          if (ipoly != null) {            for (ArrayListIter<double[]> vi=ipoly.second.iter(); vi.valid(); vi.advance()) {              hull2.add(vi.get());            }            cweight+=ipoly.first / numc;          }        }        weight+=poly.first / numc;      }    }  }  DoubleObjPair<Polygon> pair=new DoubleObjPair<>(weight,hull.getHull());  hulls.put(clu,pair);  if (coremodel) {    hulls.put(model,new DoubleObjPair<>(cweight,hull2.getHull()));  }  return pair;}  }
class C{  protected static void delete(MProduct product){  s_log.config(product.getName());  List<MCostElement> ces=MCostElement.getCostElement(product.getCtx(),product.get_TrxName());  MAcctSchema[] mass=MAcctSchema.getClientAcctSchema(product.getCtx(),product.getAD_Client_ID(),product.get_TrxName());  MOrg[] orgs=null;  int M_ASI_ID=0;  for (  MAcctSchema as : mass) {    String cl=product.getCostingLevel(as);    if (MAcctSchema.COSTINGLEVEL_Client.equals(cl)) {      for (      MCostType ct : MCostType.get(product.getCtx(),product.get_TrxName())) {        for (        MCostElement ce : ces) {          MCost cost=MCost.getOrCreate(product,M_ASI_ID,as,0,0,ct.getM_CostType_ID(),ce.getM_CostElement_ID());          if (cost != null)           cost.deleteEx(true);        }      }    } else     if (MAcctSchema.COSTINGLEVEL_Organization.equals(cl)) {      if (orgs == null)       orgs=MOrg.getOfClient(product);      for (      MOrg o : orgs) {        for (        MCostType ct : MCostType.get(product.getCtx(),product.get_TrxName())) {          for (          MCostElement ce : ces) {            MCost cost=MCost.getOrCreate(product,M_ASI_ID,as,o.getAD_Org_ID(),0,ct.getM_CostType_ID(),ce.getM_CostElement_ID());            if (cost != null)             cost.deleteEx(true);          }        }      }    } else {      s_log.warning("Not created: Std.Cost for " + product.getName() + " - Costing Level on Batch/Lot");    }  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public DialogAddUser(Dialog owner,ExtensionUserManagement extension){  super(owner,DIALOG_TITLE);}  }
class C{  public static byte[] generate(byte[] P,byte[] S,int N,int r,int p,int dkLen){  if (P == null) {    throw new IllegalArgumentException("Passphrase P must be provided.");  }  if (S == null) {    throw new IllegalArgumentException("Salt S must be provided.");  }  if (N <= 1) {    throw new IllegalArgumentException("Cost parameter N must be > 1.");  }  if (r == 1 && N > 65536) {    throw new IllegalArgumentException("Cost parameter N must be > 1 and < 65536.");  }  if (r < 1) {    throw new IllegalArgumentException("Block size r must be >= 1.");  }  int maxParallel=Integer.MAX_VALUE / (128 * r * 8);  if (p < 1 || p > maxParallel) {    throw new IllegalArgumentException("Parallelisation parameter p must be >= 1 and <= " + maxParallel + " (based on block size r of "+ r+ ")");  }  if (dkLen < 1) {    throw new IllegalArgumentException("Generated key length dkLen must be >= 1.");  }  return MFcrypt(P,S,N,r,p,dkLen);}  }
class C{  public boolean isLowerTriangular(){  for (int i=0; i < rows; i++)   for (int j=i + 1; j < columns; j++) {    if (get(i,j) != 0.0)     return false;  }  return true;}  }
class C{  public boolean isGoalState(Object state){  return goalTest.isGoalState(state);}  }
class C{  public MessageServiceException(String message){  super(message);}  }
class C{  public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {  for (int i=0; i < callbacks.length; i++) {    if (callbacks[i] instanceof TextOutputCallback) {      TextOutputCallback toc=(TextOutputCallback)callbacks[i];switch (toc.getMessageType()) {case TextOutputCallback.INFORMATION:        System.out.println(toc.getMessage());      break;case TextOutputCallback.ERROR:    System.out.println("ERROR: " + toc.getMessage());  break;case TextOutputCallback.WARNING:System.out.println("WARNING: " + toc.getMessage());break;default :throw new IOException("Unsupported message type: " + toc.getMessageType());}} else if (callbacks[i] instanceof NameCallback) {NameCallback nc=(NameCallback)callbacks[i];System.err.print(nc.getPrompt());System.err.flush();nc.setName((new BufferedReader(new InputStreamReader(System.in))).readLine());} else if (callbacks[i] instanceof PasswordCallback) {PasswordCallback pc=(PasswordCallback)callbacks[i];System.err.print(pc.getPrompt());System.err.flush();pc.setPassword(readPassword(System.in));} else {throw new UnsupportedCallbackException(callbacks[i],"Unrecognized Callback");}}}  }
class C{  @Override public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  PlotOrientation orientation=plot.getOrientation();  int itemCount=dataset.getItemCount(series);  Paint paint=getItemPaint(series,item);  Stroke seriesStroke=getItemStroke(series,item);  g2.setPaint(paint);  g2.setStroke(seriesStroke);  double x1=dataset.getXValue(series,item);  double y1=dataset.getYValue(series,item);  double x=x1;  double y=Double.isNaN(y1) ? getRangeBase() : y1;  double transX1=domainAxis.valueToJava2D(x,dataArea,plot.getDomainAxisEdge());  double transY1=rangeAxis.valueToJava2D(y,dataArea,plot.getRangeAxisEdge());  transY1=restrictValueToDataArea(transY1,plot,dataArea);  if (this.pArea == null && !Double.isNaN(y1)) {    this.pArea=new Polygon();    double transY2=rangeAxis.valueToJava2D(getRangeBase(),dataArea,plot.getRangeAxisEdge());    transY2=restrictValueToDataArea(transY2,plot,dataArea);    if (orientation == PlotOrientation.VERTICAL) {      this.pArea.addPoint((int)transX1,(int)transY2);    } else     if (orientation == PlotOrientation.HORIZONTAL) {      this.pArea.addPoint((int)transY2,(int)transX1);    }  }  double transX0;  double transY0;  double x0;  double y0;  if (item > 0) {    x0=dataset.getXValue(series,item - 1);    y0=Double.isNaN(y1) ? y1 : dataset.getYValue(series,item - 1);    x=x0;    y=Double.isNaN(y0) ? getRangeBase() : y0;    transX0=domainAxis.valueToJava2D(x,dataArea,plot.getDomainAxisEdge());    transY0=rangeAxis.valueToJava2D(y,dataArea,plot.getRangeAxisEdge());    transY0=restrictValueToDataArea(transY0,plot,dataArea);    if (Double.isNaN(y1)) {      transX1=transX0;      transY0=transY1;    }    if (transY0 != transY1) {      double transXs=transX0 + (getStepPoint() * (transX1 - transX0));      if (orientation == PlotOrientation.VERTICAL) {        this.pArea.addPoint((int)transXs,(int)transY0);        this.pArea.addPoint((int)transXs,(int)transY1);      } else       if (orientation == PlotOrientation.HORIZONTAL) {        this.pArea.addPoint((int)transY0,(int)transXs);        this.pArea.addPoint((int)transY1,(int)transXs);      }    }  }  Shape shape=null;  if (!Double.isNaN(y1)) {    if (orientation == PlotOrientation.VERTICAL) {      this.pArea.addPoint((int)transX1,(int)transY1);    } else     if (orientation == PlotOrientation.HORIZONTAL) {      this.pArea.addPoint((int)transY1,(int)transX1);    }    if (getShapesVisible()) {      shape=getItemShape(series,item);      if (orientation == PlotOrientation.VERTICAL) {        shape=ShapeUtilities.createTranslatedShape(shape,transX1,transY1);      } else       if (orientation == PlotOrientation.HORIZONTAL) {        shape=ShapeUtilities.createTranslatedShape(shape,transY1,transX1);      }      if (isShapesFilled()) {        g2.fill(shape);      } else {        g2.draw(shape);      }    } else {      if (orientation == PlotOrientation.VERTICAL) {        shape=new Rectangle2D.Double(transX1 - 2,transY1 - 2,4.0,4.0);      } else       if (orientation == PlotOrientation.HORIZONTAL) {        shape=new Rectangle2D.Double(transY1 - 2,transX1 - 2,4.0,4.0);      }    }  }  if (getPlotArea() && item > 0 && this.pArea != null && (item == (itemCount - 1) || Double.isNaN(y1))) {    double transY2=rangeAxis.valueToJava2D(getRangeBase(),dataArea,plot.getRangeAxisEdge());    transY2=restrictValueToDataArea(transY2,plot,dataArea);    if (orientation == PlotOrientation.VERTICAL) {      this.pArea.addPoint((int)transX1,(int)transY2);    } else     if (orientation == PlotOrientation.HORIZONTAL) {      this.pArea.addPoint((int)transY2,(int)transX1);    }    g2.fill(this.pArea);    if (isOutline()) {      g2.setStroke(plot.getOutlineStroke());      g2.setPaint(plot.getOutlinePaint());      g2.draw(this.pArea);    }    this.pArea=null;  }  if (!Double.isNaN(y1)) {    int domainAxisIndex=plot.getDomainAxisIndex(domainAxis);    int rangeAxisIndex=plot.getRangeAxisIndex(rangeAxis);    updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);  }  EntityCollection entities=state.getEntityCollection();  if (entities != null) {    addEntity(entities,shape,dataset,series,item,transX1,transY1);  }}  }
class C{  private void initPadding(){  int left=getPaddingLeft();  int right=getPaddingRight();  int top=getPaddingTop();  int bottom=getPaddingBottom();  if (left == 0)   data.tagLeftPadding=LEFT_PADDING_DEFAULT; else   data.tagLeftPadding=left;  if (right == 0)   data.tagRightPadding=RIGHT_PADDING_DEFAULT; else   data.tagRightPadding=right;  if (top == 0)   data.tagTopPadding=TOP_PADDING_DEFAULT; else   data.tagTopPadding=top;  if (bottom == 0)   data.tagBottomPadding=BOTTOM_PADDING_DEFAULT; else   data.tagBottomPadding=bottom;}  }
class C{  public synchronized void addInvalidComponent(JComponent invalidComponent){  RepaintManager delegate=getDelegate(invalidComponent);  if (delegate != null) {    delegate.addInvalidComponent(invalidComponent);    return;  }  Component validateRoot=SwingUtilities.getValidateRoot(invalidComponent,true);  if (validateRoot == null) {    return;  }  if (invalidComponents == null) {    invalidComponents=new ArrayList<Component>();  } else {    int n=invalidComponents.size();    for (int i=0; i < n; i++) {      if (validateRoot == invalidComponents.get(i)) {        return;      }    }  }  invalidComponents.add(validateRoot);  scheduleProcessingRunnable(SunToolkit.targetToAppContext(invalidComponent));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void receiveGeolocSharingInvitation(GeolocTransferSession session){  if (sLogger.isActivated()) {    sLogger.info(new StringBuilder("Receive geoloc sharing invitation from ").append(session.getRemoteContact()).append("; displayName=").append(session.getRemoteDisplayName()).append(".").toString());  }  ContactId contact=session.getRemoteContact();  String sharingId=session.getSessionID();  GeolocSharingPersistedStorageAccessor persistedStorage=new GeolocSharingPersistedStorageAccessor(sharingId,contact,session.getGeoloc(),Direction.INCOMING,mRichcallLog,session.getTimestamp());  GeolocSharingImpl geolocSharing=new GeolocSharingImpl(sharingId,mBroadcaster,mRichcallService,this,persistedStorage);  addGeolocSharing(geolocSharing,sharingId);  session.addListener(geolocSharing);}  }
class C{  private Identity fetch(final String token) throws IOException {  final String uri=new Href(this.gapi).path("plus").path("v1").path("people").path("me").with(PsGoogle.ACCESS_TOKEN,token).toString();  final JsonObject json=new JdkRequest(uri).fetch().as(JsonResponse.class).json().readObject();  if (json.containsKey(PsGoogle.ERROR)) {    throw new HttpException(HttpURLConnection.HTTP_BAD_REQUEST,String.format("could not retrieve id from Google, possible cause: %s.",json.getJsonObject(PsGoogle.ERROR).get("message")));  }  return PsGoogle.parse(json);}  }
class C{  public BuildingBlock(){  rawData=new Vector<String>();}  }
class C{  public void swap(int i,int j){  Collections.swap(index,i,j);}  }
class C{  public void wakeup(){  lock.lock();  try {    t=0;    wakeup.signal();  }  finally {    lock.unlock();  }}  }
class C{  @Override public ResultSet executeQuery() throws SQLException {  checkValidity();synchronized (getSynchronizationObject()) {    notifyStatementStarted();    if (!internalExecute(isExecuteProcedureStatement))     throw new FBSQLException("No resultset for sql",SQLStateConstants.SQL_STATE_NO_RESULT_SET);    return getResultSet();  }}  }
class C{  @Override public Map<String,Map<String,String>> loadTranslationsLists(final File xliffFile){  File locallng=getScratchFile(xliffFile);  if (xliffFile.getName().toLowerCase().endsWith(".xlf") || xliffFile.getName().toLowerCase().endsWith(".xliff")) {    if (locallng.exists()) {      Map<String,Map<String,String>> mergedList=loadTranslationsListsFromXliff(xliffFile);      Map<String,Map<String,String>> tmplist=loadTranslationsListsFromXliff(locallng);      return mergeTranslationLists(mergedList,tmplist);    } else {      return loadTranslationsListsFromXliff(xliffFile);    }  } else   if (locallng.exists()) {    Map<String,Map<String,String>> mergedList=super.loadTranslationsLists(xliffFile);    Map<String,Map<String,String>> tmplist=super.loadTranslationsLists(locallng);    return mergeTranslationLists(mergedList,tmplist);  } else {    return super.loadTranslationsLists(xliffFile);  }}  }
class C{  public void stopAnimations(){  Collection<Animator> animators=this.values();  for (  Animator a : animators) {    a.stop();  }}  }
class C{  static byte[] read(final IMemoryManager mmgr,final long addr){  final int nbytes=getAllocationSize(addr);  final byte[] a=new byte[nbytes];  final ByteBuffer mybb=ByteBuffer.wrap(a);  final ByteBuffer[] bufs=mmgr.get(addr);  for (  ByteBuffer b : bufs) {    mybb.put(b);  }  return a;}  }
class C{  public void handleSensorMessage(AbstractMRReply r){  int index=r.getElement(1) - 0x30;  int indicator=r.getElement(2);  if (r.getElement(0) == 0x61 && r.getElement(1) >= 0x30 && r.getElement(1) <= 0x6f && ((indicator >= 0x41 && indicator <= 0x5e) || (indicator >= 0x61 && indicator <= 0x7e))) {    lastMessageReceived=System.currentTimeMillis();    if (aiuArray[index] == null) {      log.debug("unsolicited message \"" + r.toString() + "\" for unused sensor array");    } else {      int sensorNo;      int newState;      if (indicator >= 0x60) {        sensorNo=indicator - 0x61;        newState=Sensor.ACTIVE;      } else {        sensorNo=indicator - 0x41;        newState=Sensor.INACTIVE;      }      Sensor s=aiuArray[index].getSensor(sensorNo);      if (s.getInverted()) {        if (newState == Sensor.ACTIVE) {          newState=Sensor.INACTIVE;        } else         if (newState == Sensor.INACTIVE) {          newState=Sensor.ACTIVE;        }      }      if (log.isDebugEnabled()) {        String msg="Handling sensor message \"" + r.toString() + "\" for ";        msg+=s.getSystemName();        if (newState == Sensor.ACTIVE) {          msg+=": ACTIVE";        } else {          msg+=": INACTIVE";        }        log.debug(msg);      }      aiuArray[index].sensorChange(sensorNo,newState);    }  } else {    log.warn("incorrect sensor message: " + r.toString());  }}  }
class C{  public boolean isRunning(){  return running;}  }
class C{  public boolean hasHierarchy(){  return mDraweeHolder.hasHierarchy();}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedMap(Map<K,V> map,boolean reversed){  return new ByValueSortingTreeMap<>(ByValueComparator.create(map,reversed));}  }
class C{  public double pdf(int k){  return Arithmetic.binomial(my_s,k) * Arithmetic.binomial(my_N - my_s,my_n - k) / Arithmetic.binomial(my_N,my_n);}  }
class C{  @Override public void onPostExecute(Integer count){  Utils.showToast(mOps.getActivityContext(),count + " contact(s) inserted");}  }
class C{  public void visitClassType(String name){}  }
class C{  void parseAttributeDeclaredValue(AttributeList atts) throws IOException {  if (ch == '(') {    atts.values=parseIdentifierList(true);    atts.type=NMTOKEN;    return;  }  if (!parseIdentifier(false)) {    error("invalid","attribute value");    return;  }  atts.type=AttributeList.name2type(getString(0));  skipParameterSpace();  if (atts.type == NOTATION) {    atts.values=parseIdentifierList(true);  }}  }
class C{  public PropertyItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public void onShiftValuesUpdated(ShiftValue shiftValue){  refreshButtonVisibility();}  }
class C{  public static float toFloat(String num,float defaultValue){  if (num != null) {    try {      return Float.parseFloat(num);    } catch (    NumberFormatException e) {      logger.trace("",e);    }  }  return defaultValue;}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  boolean isAllReasons(){  return _reasons == allReasons._reasons ? true : false;}  }
class C{  @Override public Iterator<ValueGraphVertex> iterator(){  return vertices.iterator();}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public static boolean isMarkedToReformat(final ASTNode node){  if (node.getCopyableUserData(REFORMAT_KEY) == null || !isSuspendedNodesReformattingAllowed()) {    return false;  }  final NotNullFunction<ASTNode,Boolean> strategy=NODE_REFORMAT_STRATEGY.get();  return strategy == null || strategy.fun(node);}  }
class C{  public AnnotationValues(Class<A> type,Map<String,AnnotationValue> values,LombokNode<?,?,?> ast){  this.type=type;  this.values=values;  this.ast=ast;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:44.747 -0500",hash_original_method="8431B5C8F0968484F229748CA95CA0A8",hash_generated_method="4692BDE8D809837F0CF470CA97A7DFBA") private void unregisterObserverProxyLocked(){  if (mObserver != null) {    mCursor.unregisterContentObserver(mObserver);    mObserver.unlinkToDeath(this);    mObserver=null;  }}  }
class C{  public void initializeStatusResistancesList(final StatusResistancesList list){  this.resistances=list;  if (logger.isDebugEnabled() || Testing.DEBUG) {    logger.info("StatusResistantItem: Initializing status resistances");    if (this.resistances == null) {      logger.error("Could not initialize status resistances list");    }  }}  }
class C{  public BuilderForGossipSeedDiscoverer maxDiscoverAttempts(int maxDiscoverAttempts){  super.maxDiscoverAttempts=maxDiscoverAttempts;  return this;}  }
class C{  protected void prepareConnection(URLConnection conn){  if (metadataEnabled)   conn.setRequestProperty("Icy-MetaData","1");}  }
class C{  public void addText(String txt){  log("addText('" + txt + "')",Project.MSG_VERBOSE);  this.command+=txt;}  }
class C{  void addCell(Component cell,boolean isHeader,CellConstraint constraint){  if (isHeader) {    headers.addElement(cell);  }  currentRow.addElement(cell);  if (currentRow.size() > maxColumn) {    maxColumn=currentRow.size();  }  if (constraint != null) {    constraints.put(cell,constraint);  }}  }
class C{  public static boolean readBoolean(ByteBuffer buff){  return buff.get() == 1;}  }
class C{  boolean insert(final byte[] key,final byte[] val){  if (key == null)   throw new IllegalArgumentException();  if (parent == null)   throw new IllegalArgumentException();  final int slotsOnPage=slotsOnPage();  final BucketPage copy=(BucketPage)copyOnWrite();  if (copy != this) {    return copy.insert(key,val);  }  final byte[] ival=checkRawRecord(val);  final MutableKeyBuffer keys=(MutableKeyBuffer)getKeys();  if (keys.nkeys < keys.capacity()) {    int insIndex;    if (this.getParentDirectory().isOverflowDirectory()) {      insIndex=keys.nkeys;    } else {      insIndex=keys.search(key);    }    if (insIndex < 0) {      insIndex=-insIndex - 1;    } else     if (TRACE) {      log.trace("Insert duplicate key");    }    ((MutableBucketData)data).insert(insIndex,key,ival,ival != val);    ((HTree)htree).nentries++;    return true;  }  boolean identicalKeys=true;  for (int i=0; i < slotsOnPage; i++) {    if (!BytesUtil.bytesEqual(key,keys.get(i))) {      identicalKeys=false;      break;    }  }  if (!identicalKeys) {    return false;  }  final BucketPage newPage=new BucketPage((HTree)htree,globalDepth);  ((HTree)htree).nleaves++;  final DirectoryPage pd=getParentDirectory();  if (pd.isOverflowDirectory()) {    assert globalDepth == htree.addressBits;    pd._addChild(newPage);  } else {    if (pd.getLevel() * htree.addressBits > key.length * 8)     throw new AssertionError();    pd._ensureUniqueBucketPage(key,this.self);    globalDepth=htree.addressBits;    newPage.globalDepth=htree.addressBits;    final DirectoryPage blob=new DirectoryPage((HTree)htree,key,pd.getOverflowPageDepth());    pd.replaceChildRef(this.self,blob);    blob._addChild(this);    blob._addChild(newPage);  }  newPage.insert(key,val);  assert dirtyHierarchy();  return true;}  }
class C{  public static RefactoringStatus checkMethodName(String name,IJavaElement context){  RefactoringStatus status=checkName(name,JavaConventionsUtil.validateMethodName(name,context));  if (status.isOK() && !startsWithLowerCase(name))   return RefactoringStatus.createWarningStatus(RefactoringCoreMessages.Checks_method_names_lowercase); else   return status;}  }
class C{  private void removeInstancesFromContainers(ArrayList<Container> containers,Map<Integer,List<InstanceId>> allocation,Map<String,Integer> componentsToScaleDown){  ArrayList<RamRequirement> ramRequirements=getRAMInstances(componentsToScaleDown);  for (  RamRequirement ramRequirement : ramRequirements) {    String component=ramRequirement.getComponentName();    int numInstancesToRemove=-componentsToScaleDown.get(component);    for (int j=0; j < numInstancesToRemove; j++) {      Pair<Integer,InstanceId> idPair=removeRRInstance(containers,component);      List<InstanceId> instances=allocation.get(idPair.first);      instances.remove(idPair.second);      allocation.put(idPair.first,instances);    }  }}  }
class C{  public boolean isComplete(){  String s=getParameter("stale");  if ("true".equalsIgnoreCase(s)) {    return false;  } else {    return this.complete;  }}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void unbox(final Type type){  Type t=NUMBER_TYPE;  Method sig=null;switch (type.getSort()) {case Type.VOID:    return;case Type.CHAR:  t=CHARACTER_TYPE;sig=CHAR_VALUE;break;case Type.BOOLEAN:t=BOOLEAN_TYPE;sig=BOOLEAN_VALUE;break;case Type.DOUBLE:sig=DOUBLE_VALUE;break;case Type.FLOAT:sig=FLOAT_VALUE;break;case Type.LONG:sig=LONG_VALUE;break;case Type.INT:case Type.SHORT:case Type.BYTE:sig=INT_VALUE;}if (sig == null) {checkCast(type);} else {checkCast(t);invokeVirtual(t,sig);}}  }
class C{  void importFilter(){  filterOpenFileChooser.setDialogTitle(L10N.getLocalString("dlg.importFilter_ttl","Import and merge filter..."));  boolean retry=true;  File f;  while (retry) {    retry=false;    int value=filterOpenFileChooser.showOpenDialog(mainFrame);    if (value != JFileChooser.APPROVE_OPTION) {      return;    }    f=filterOpenFileChooser.getSelectedFile();    if (!f.exists()) {      JOptionPane.showMessageDialog(filterOpenFileChooser,"No such file","Invalid File",JOptionPane.WARNING_MESSAGE);      retry=true;      continue;    }    Filter filter;    try {      filter=Filter.parseFilter(f.getPath());    } catch (    IOException e) {      JOptionPane.showMessageDialog(filterOpenFileChooser,"Could not load filter.");      retry=true;      continue;    }    mainFrame.setProjectChanged(true);    Filter suppressionFilter=mainFrame.getProject().getSuppressionFilter();    for (    Matcher m : filter.getChildren()) {      suppressionFilter.addChild(m);    }    PreferencesFrame.getInstance().updateFilterPanel();  }}  }
class C{  protected boolean readConstantPool(DataInputStream d) throws IOException {  byte tag;  cp_info cp;  int i;  boolean skipone;  constant_pool=new cp_info[constant_pool_count];  skipone=false;  for (i=1; i < constant_pool_count; i++) {    if (skipone) {      skipone=false;      continue;    }    tag=(byte)d.readUnsignedByte();switch (tag) {case cp_info.CONSTANT_Class:      cp=new CONSTANT_Class_info();    ((CONSTANT_Class_info)cp).name_index=d.readUnsignedShort();  if (debug)   G.v().out.println("Constant pool[" + i + "]: Class");break;case cp_info.CONSTANT_Fieldref:cp=new CONSTANT_Fieldref_info();((CONSTANT_Fieldref_info)cp).class_index=d.readUnsignedShort();((CONSTANT_Fieldref_info)cp).name_and_type_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: Fieldref");break;case cp_info.CONSTANT_Methodref:cp=new CONSTANT_Methodref_info();((CONSTANT_Methodref_info)cp).class_index=d.readUnsignedShort();((CONSTANT_Methodref_info)cp).name_and_type_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: Methodref");break;case cp_info.CONSTANT_InterfaceMethodref:cp=new CONSTANT_InterfaceMethodref_info();((CONSTANT_InterfaceMethodref_info)cp).class_index=d.readUnsignedShort();((CONSTANT_InterfaceMethodref_info)cp).name_and_type_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: MethodHandle");break;case cp_info.CONSTANT_String:cp=new CONSTANT_String_info();((CONSTANT_String_info)cp).string_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: String");break;case cp_info.CONSTANT_Integer:cp=new CONSTANT_Integer_info();((CONSTANT_Integer_info)cp).bytes=d.readInt();if (debug) G.v().out.println("Constant pool[" + i + "]: Integer = "+ ((CONSTANT_Integer_info)cp).bytes);break;case cp_info.CONSTANT_Float:cp=new CONSTANT_Float_info();((CONSTANT_Float_info)cp).bytes=d.readInt();if (debug) G.v().out.println("Constant pool[" + i + "]: Float = "+ ((CONSTANT_Float_info)cp).convert());break;case cp_info.CONSTANT_Long:cp=new CONSTANT_Long_info();((CONSTANT_Long_info)cp).high=d.readInt() & 0xFFFFFFFFL;((CONSTANT_Long_info)cp).low=d.readInt() & 0xFFFFFFFFL;if (debug) {String temp=cp.toString(constant_pool);G.v().out.println("Constant pool[" + i + "]: Long = "+ temp);}skipone=true;break;case cp_info.CONSTANT_Double:cp=new CONSTANT_Double_info();((CONSTANT_Double_info)cp).high=d.readInt() & 0xFFFFFFFFL;((CONSTANT_Double_info)cp).low=d.readInt() & 0xFFFFFFFFL;if (debug) G.v().out.println("Constant pool[" + i + "]: Double = "+ ((CONSTANT_Double_info)cp).convert());skipone=true;break;case cp_info.CONSTANT_NameAndType:cp=new CONSTANT_NameAndType_info();((CONSTANT_NameAndType_info)cp).name_index=d.readUnsignedShort();((CONSTANT_NameAndType_info)cp).descriptor_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: Name and Type");break;case cp_info.CONSTANT_Utf8:CONSTANT_Utf8_info cputf8=new CONSTANT_Utf8_info(d);cp=(cp_info)CONSTANT_Utf8_collector.v().add(cputf8);if (debug) G.v().out.println("Constant pool[" + i + "]: Utf8 = \""+ cputf8.convert()+ "\"");break;case cp_info.CONSTANT_MethodHandle:cp=new CONSTANT_MethodHandle_info();((CONSTANT_MethodHandle_info)cp).kind=d.readByte();((CONSTANT_MethodHandle_info)cp).target_index=d.readUnsignedShort();break;case cp_info.CONSTANT_MethodType:cp=new CONSTANT_MethodType_info();((CONSTANT_MethodType_info)cp).descriptor_index=d.readUnsignedShort();break;case cp_info.CONSTANT_InvokeDynamic:cp=new CONSTANT_InvokeDynamic_info();((CONSTANT_InvokeDynamic_info)cp).bootstrap_method_index=d.readUnsignedShort();((CONSTANT_InvokeDynamic_info)cp).name_and_type_index=d.readUnsignedShort();break;default :G.v().out.println("Unknown tag in constant pool: " + tag + " at entry "+ i);return false;}cp.tag=tag;constant_pool[i]=cp;}return true;}  }
class C{  public LinearLocation project(Coordinate pt){  return LocationIndexOfPoint.indexOf(linearGeom,pt);}  }
class C{  public Option addArgument(Option option,boolean required){  optionsIgnoreRequired.addOption((Option)option.clone());  option.setRequired(required);  options.addOption(option);  return option;}  }
class C{  public ElementRule(Class type,String description,String example){  this(type,description,example,1,1);}  }
class C{  public final Iterator<KnowledgeEdge> forbiddenEdgesIterator(){  Set<KnowledgeEdge> edges=new HashSet<>();  for (  OrderedPair<Set<MyNode>> o : forbiddenRulesSpecs) {    final Set<MyNode> first=o.getFirst();    for (    MyNode s1 : first) {      final Set<MyNode> second=o.getSecond();      for (      MyNode s2 : second) {        if (!s1.equals(s2)) {          edges.add(new KnowledgeEdge(s1.getName(),s2.getName()));        }      }    }  }  return edges.iterator();}  }
class C{  protected void useBackGround(UserRunnerStatus userRunnerStatus){  Ansi buffer=Ansi.ansi();  buffer.a("Run task for project ").a(INTENSITY_BOLD).a(userRunnerStatus.getProject().name()).a(INTENSITY_BOLD_OFF).a("' has been submitted with runner ID ").a(INTENSITY_BOLD).a(userRunnerStatus.shortId()).a(INTENSITY_BOLD_OFF).a(System.lineSeparator());  System.out.println(buffer.toString());  System.out.println(userRunnerStatus);}  }
class C{  public static void paintBg(Graphics g,int x,int y,int w,int h,boolean enabled,NinePatch bg){  if (enabled)   bg.draw((Graphics2D)g,x,y,w,h); else   __Icon9Factory__.getInstance().getTextFieldBgDisabled().draw((Graphics2D)g,x,y,w,h);}  }
class C{  protected int _rowRank(int rank){  return rowZero + rank * rowStride;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  double sum;  int[] dX;  int[] dY;  double[] weights;  int numPixelsInFilter;  boolean reflectAtBorders=true;  double centreValue;  String direction="n";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      direction=args[i].toLowerCase();    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("grey.pal");    if (direction.equals("n")) {      weights=new double[]{0,-1,0,0,0,0,0,1,0};    } else     if (direction.equals("s")) {      weights=new double[]{0,1,0,0,0,0,0,-1,0};    } else     if (direction.equals("e")) {      weights=new double[]{0,0,0,1,0,-1,0,0,0};    } else     if (direction.equals("w")) {      weights=new double[]{0,0,0,-1,0,1,0,0,0};    } else     if (direction.equals("ne")) {      weights=new double[]{0,0,-1,0,0,0,1,0,0};    } else     if (direction.equals("nw")) {      weights=new double[]{-1,0,0,0,0,0,0,0,1};    } else     if (direction.equals("se")) {      weights=new double[]{1,0,0,0,0,0,0,0,-1};    } else {      weights=new double[]{0,0,1,0,0,0,-1,0,0};    }    dX=new int[]{-1,0,1,-1,0,1,-1,0,1};    dY=new int[]{-1,-1,-1,0,0,0,1,1,1};    numPixelsInFilter=dX.length;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z == noData) {              z=centreValue;            }            sum+=z * weights[a];          }          outputFile.setValue(row,col,sum);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addGroupChatInvitationRejected(String chatId,ContactId contact,String subject,Map<ContactId,ParticipantStatus> participants,GroupChat.ReasonCode reasonCode,long timestamp){  mMessagingLog.addGroupChat(chatId,contact,subject,participants,GroupChat.State.REJECTED,reasonCode,Direction.INCOMING,timestamp);  mGroupChatEventBroadcaster.broadcastInvitation(chatId);}  }
class C{  private void subtractDepth(int depthToSubtract,Collection<Transaction> transactions){  for (  Transaction tx : transactions) {    if (tx.getConfidence().getConfidenceType() == ConfidenceType.BUILDING) {      tx.getConfidence().setDepthInBlocks(tx.getConfidence().getDepthInBlocks() - depthToSubtract);      confidenceChanged.put(tx,TransactionConfidence.Listener.ChangeReason.DEPTH);    }  }}  }
class C{  public void removeComponentListener(final ComponentUpdateListener listener){  componentListeners.remove(listener);}  }
class C{  Trace(String[] args){  PrintWriter writer=new PrintWriter(System.out);  int inx;  for (inx=0; inx < args.length; ++inx) {    String arg=args[inx];    if (arg.charAt(0) != '-') {      break;    }    if (arg.equals("-output")) {      try {        writer=new PrintWriter(new FileWriter(args[++inx]));      } catch (      IOException exc) {        System.err.println("Cannot open output file: " + args[inx] + " - "+ exc);        System.exit(1);      }    } else     if (arg.equals("-all")) {      excludes=new String[0];    } else     if (arg.equals("-fields")) {      watchFields=true;    } else     if (arg.equals("-dbgtrace")) {      debugTraceMode=Integer.parseInt(args[++inx]);    } else     if (arg.equals("-help")) {      usage();      System.exit(0);    } else {      System.err.println("No option: " + arg);      usage();      System.exit(1);    }  }  if (inx >= args.length) {    System.err.println("<class> missing");    usage();    System.exit(1);  }  StringBuffer sb=new StringBuffer();  sb.append(args[inx]);  for (++inx; inx < args.length; ++inx) {    sb.append(' ');    sb.append(args[inx]);  }  vm=launchTarget(sb.toString());  generateTrace(writer);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.deleteData(4,50);  childData=child.getData();  assertEquals("characterdataDeleteDataExceedsLengthAssert","1230",childData);}  }
class C{  public void header(String key,String... header){  headers.put(key,Arrays.asList(header));}  }
class C{  public static void init(){  if (isInit) {    return;  }  isInit=true;  Bootstrap.register();  CubicChunks.LOGGER=LogManager.getLogger();}  }
class C{  public WoodFilter(){}  }
class C{  @SuppressWarnings("try") private void eliminateMoves(LIR lir){  try (Indent indent=Debug.logAndIndent("eliminate moves")){    AbstractBlockBase<?>[] blocks=lir.linearScanOrder();    for (    AbstractBlockBase<?> block : blocks) {      try (Indent indent2=Debug.logAndIndent("eliminate moves in block %d",block.getId())){        List<LIRInstruction> instructions=lir.getLIRforBlock(block);        BlockData data=blockData.get(block);        boolean hasDead=false;        int[] iterState=data.entryState;        int valueNum=data.entryValueNum + data.entryState.length;        int numInsts=instructions.size();        for (int idx=0; idx < numInsts; idx++) {          LIRInstruction op=instructions.get(idx);          if (isEligibleMove(op)) {            ValueMoveOp moveOp=(ValueMoveOp)op;            int sourceIdx=getStateIdx(moveOp.getInput());            int destIdx=getStateIdx(moveOp.getResult());            if (sourceIdx >= 0 && destIdx >= 0 && iterState[sourceIdx] == iterState[destIdx]) {              assert iterState[sourceIdx] != INIT_VALUE;              Debug.log("delete move %s",op);              instructions.set(idx,null);              hasDead=true;              if (deletedMoves.isEnabled()) {                deletedMoves.increment();              }            }          }          valueNum=updateState(iterState,op,valueNum);        }        if (hasDead) {          instructions.removeAll(Collections.singleton(null));        }      }     }  } }  }
class C{  public ClientConfig withSocketFactory(SSLSocketFactory factory){  setSocketFactory(factory);  return this;}  }
class C{  @SuppressWarnings("unchecked") public synchronized T dequeueTask() throws InterruptedException {  while (_data.isEmpty()) {    if (!_closedInput)     wait(); else     return (T)NO_MORE_TASKS;  }  T t=_data.removeFirst();  notify();  return t;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/schema";  String qualifiedName="namespaceURI:x";  Document doc;  DocumentType docType;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  docType=doc.getDoctype();  domImpl=doc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  public void add(String string){  elements.add(string == null ? JsonNull.INSTANCE : new JsonPrimitive(string));}  }
class C{  private void resize(int rows,int cols){  DataBox _data=dataBox.like();  for (int i=0; i < _data.numRows(); i++) {    for (int j=0; j < _data.numCols(); j++) {      if (i < dataBox.numRows() && j < dataBox.numCols()) {        _data.set(i,j,dataBox.get(i,j));      } else {        _data.set(i,j,null);      }    }  }  dataBox=_data;}  }
class C{  public static byte[] hash(String input){  if (!TextUtils.isEmpty(input)) {    try {      byte[] inputBytes=input.getBytes("UTF-8");      return hash(inputBytes);    } catch (    UnsupportedEncodingException e) {      Log.e(TAG,"problem hashing \"" + input + "\" "+ e.getMessage(),e);    }  }  return null;}  }
class C{  public static void threadSwitch(RVMThread currentThread,AbstractRegisters restoreRegs){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public void addFragment(RootFragment from,RootFragment to,Bundle bundle){  addFragment(from,to,bundle,KEEP_CURRENT);}  }
class C{  public boolean isWifiEnabled(){  return getWifiState() == WIFI_STATE_ENABLED;}  }
class C{  public UCrop useSourceImageAspectRatio(){  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_SET,true);  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_X,0);  mCropIntent.putExtra(EXTRA_ASPECT_RATIO_Y,0);  return this;}  }
class C{  public int hashCode(){  if (hashcode == 0) {    int result=17;    result=37 * result + issuer.hashCode();    result=37 * result + serial.hashCode();    hashcode=result;  }  return hashcode;}  }
class C{  private void updateCrlInDb(String key,byte[] encoded) throws SQLException {  Connection c=null;  PreparedStatement s=null;  ResultSet rs=null;  try {    c=getDataSource().getConnection();    s=c.prepareStatement(sqlFindUpdate);    s.setBytes(1,encoded);    s.setString(2,key);    s.executeUpdate();  }  finally {    closeQuietly(c,s,rs);  }}  }
class C{  public void close() throws IOException {  if (closed) {    return;  }  closed=true;  input.close();  if (!done) {    try {      cipher.doFinal();    } catch (    BadPaddingException|IllegalBlockSizeException ex) {    }  }  ostart=0;  ofinish=0;}  }
class C{  public boolean canStoreType(Type child,Type parent){  if (child.equals(parent))   return true;  if (parent instanceof NullType) {    return false;  }  if (child instanceof NullType) {    return parent instanceof RefLikeType;  }  if (child instanceof RefType) {    if (parent instanceof RefType) {      return canStoreClass(((RefType)child).getSootClass(),((RefType)parent).getSootClass());    } else {      return false;    }  } else   if (child instanceof AnySubType) {    if (!(parent instanceof RefLikeType)) {      throw new RuntimeException("Unhandled type " + parent);    } else     if (parent instanceof ArrayType) {      Type base=((AnySubType)child).getBase();      return base.equals(RefType.v("java.lang.Object")) || base.equals(RefType.v("java.io.Serializable")) || base.equals(RefType.v("java.lang.Cloneable"));    } else {      SootClass base=((AnySubType)child).getBase().getSootClass();      SootClass parentClass=((RefType)parent).getSootClass();      LinkedList worklist=new LinkedList();      if (base.isInterface())       worklist.addAll(getAllImplementersOfInterface(base)); else       worklist.add(base);      Set<SootClass> workset=new HashSet<SootClass>();      while (!worklist.isEmpty()) {        SootClass cl=(SootClass)worklist.removeFirst();        if (!workset.add(cl))         continue;        if (cl.isConcrete() && canStoreClass(cl,parentClass))         return true;        worklist.addAll(getSubclassesOf(cl));      }      return false;    }  } else {    ArrayType achild=(ArrayType)child;    if (parent instanceof RefType) {      return parent.equals(RefType.v("java.lang.Object")) || parent.equals(RefType.v("java.io.Serializable")) || parent.equals(RefType.v("java.lang.Cloneable"));    }    ArrayType aparent=(ArrayType)parent;    if (achild.numDimensions == aparent.numDimensions) {      if (achild.baseType.equals(aparent.baseType))       return true;      if (!(achild.baseType instanceof RefType))       return false;      if (!(aparent.baseType instanceof RefType))       return false;      return canStoreType(achild.baseType,aparent.baseType);    } else     if (achild.numDimensions > aparent.numDimensions) {      if (aparent.baseType.equals(RefType.v("java.lang.Object")))       return true;      if (aparent.baseType.equals(RefType.v("java.io.Serializable")))       return true;      if (aparent.baseType.equals(RefType.v("java.lang.Cloneable")))       return true;      return false;    } else     return false;  }}  }
class C{  static void accept(final AnnotationVisitor av,final String name,final Object value){  if (av != null) {    if (value instanceof String[]) {      String[] typeconst=(String[])value;      av.visitEnum(name,typeconst[0],typeconst[1]);    } else     if (value instanceof AnnotationNode) {      AnnotationNode an=(AnnotationNode)value;      an.accept(av.visitAnnotation(name,an.desc));    } else     if (value instanceof List) {      AnnotationVisitor v=av.visitArray(name);      if (v != null) {        List<?> array=(List<?>)value;        for (int j=0; j < array.size(); ++j) {          accept(v,null,array.get(j));        }        v.visitEnd();      }    } else {      av.visit(name,value);    }  }}  }
class C{  public SolrQuery addOrUpdateSort(String field,ORDER order){  return addOrUpdateSort(new SortClause(field,order));}  }
class C{  public static Typeface androidNationItalic(Context context){  sAndroidNationItalic=getFontFromRes(R.raw.androidnation_i,context);  return sAndroidNationItalic;}  }
class C{  public boolean equals(Object otherObject){  if (otherObject == null) {    return false;  }  if (!otherObject.getClass().equals(this.getClass())) {    return false;  }  DuplicateNameValueList other=(DuplicateNameValueList)otherObject;  if (nameValueMap.size() != other.nameValueMap.size()) {    return false;  }  Iterator<String> li=this.nameValueMap.keySet().iterator();  while (li.hasNext()) {    String key=(String)li.next();    Collection nv1=this.getNameValue(key);    Collection nv2=(Collection)other.nameValueMap.get(key);    if (nv2 == null)     return false; else     if (!nv2.equals(nv1))     return false;  }  return true;}  }
class C{  public void stop(){  Debug.logInfo("Shutting down JobPoller.",module);  if (jobManagerPollerThread != null) {    jobManagerPollerThread.interrupt();  }  List<Runnable> queuedJobs=executor.shutdownNow();  for (  Runnable task : queuedJobs) {    try {      Job queuedJob=(Job)task;      queuedJob.deQueue();    } catch (    Exception e) {      Debug.logWarning(e,module);    }  }  Debug.logInfo("JobPoller shutdown completed.",module);}  }
class C{  public GroupTree findOrCreateGroup(String fullyQualifiedGroupName,OperatorDocBundle bundle){  String[] groupKeys=fullyQualifiedGroupName.split("\\.");  GroupTree group=this;  for (int i=0; i < groupKeys.length && group != null; i++) {    group=group.getOrCreateSubGroup(groupKeys[i],bundle);  }  return group;}  }
class C{  @SuppressWarnings("unchecked") private void updateRepresentation(List<InvocationSequenceData> invocations){  sourceInvocations=invocations;  resetDisplayed=false;  MutableDouble duration=new MutableDouble(0d);  List<SqlStatementData> sqlList=new ArrayList<>();  InvocationSequenceDataHelper.collectSqlsInInvocations(invocations,sqlList,duration);  double totalInvocationsDuration=0d;  for (  InvocationSequenceData inv : invocations) {    totalInvocationsDuration+=inv.getDuration();  }  double percentage=(duration.toDouble() / totalInvocationsDuration) * 100;  slowest80List.clear();  int slowest80=getSlowestSqlCount(duration.toDouble(),sqlList,0.8d,slowest80List);  int slowest20=sqlList.size() - slowest80;  slowest20List=CollectionUtils.subtract(sqlList,slowest80List);  totalSql.setText("<form><p><b>" + TOTAL_SQLS + "</b> "+ sqlList.size()+ "</p></form>",true,false);  totalDuration.setText("<form><p><b>" + TOTAL_DURATION + "</b> "+ NumberFormatter.formatDouble(duration.doubleValue())+ " ms</p></form>",true,false);  String formatedPercentage=NumberFormatter.formatDouble(percentage,1);  if (CollectionUtils.isNotEmpty(sqlList)) {    Color durationInInvocationColor=ColorFormatter.getPerformanceColor(GREEN_RGB,YELLOW_RGB,RED_RGB,percentage,20d,80d,resourceManager);    percentageOfDuration.setColor("durationInInvocationColor",durationInInvocationColor);    percentageOfDuration.setText("<form><p><b>" + SQLS_DURATION_IN_INVOCATION + "</b> <span color=\"durationInInvocationColor\">"+ formatedPercentage+ "%</span></p></form>",true,false);  } else {    percentageOfDuration.setText("<form><p><b>" + SQLS_DURATION_IN_INVOCATION + "</b> "+ formatedPercentage+ "%</p></form>",true,false);  }  String slowest80String=getCountAndPercentage(slowest80,sqlList.size());  String slowest20String=getCountAndPercentage(slowest20,sqlList.size());  if (CollectionUtils.isNotEmpty(sqlList)) {    double slowest80Percentage=((double)slowest80 / sqlList.size()) * 100;    if (Double.isNaN(slowest80Percentage)) {      slowest80Percentage=0;    }    Color color8020=ColorFormatter.getPerformanceColor(GREEN_RGB,YELLOW_RGB,RED_RGB,slowest80Percentage,70d,10d,resourceManager);    slowestCount.setColor(SLOWEST8020_COLOR,color8020);    slowestHyperlinkSettings.setForeground(color8020);    StringBuilder text=new StringBuilder("<b>" + SLOWEST_80_20 + "</b> ");    if (slowest80 > 0) {      text.append("<a href=\"" + SLOWEST80_LINK + "\">"+ slowest80String+ "</a>");    } else {      text.append("<span color=\"" + SLOWEST8020_COLOR + "\">"+ slowest80String+ "</span>");    }    text.append(" / ");    if (slowest20 > 0) {      text.append("<a href=\"" + SLOWEST20_LINK + "\">"+ slowest20String+ "</a>");    } else {      text.append("<span color=\"" + SLOWEST8020_COLOR + "\">"+ slowest20String+ "</span>");    }    slowestContent=text.toString();  } else {    slowestContent="<b>" + SLOWEST_80_20 + "</b> "+ slowest80String+ " / "+ slowest20String;  }  slowestCount.setText("<form><p>" + slowestContent + "</p></form>",true,false);  main.layout();}  }
class C{  public void shiftRightUnsigned() throws IOException {  print("shiftRightUnsigned",null);}  }
class C{  @Override public void terminateSession(String sessionid) throws org.apache.thrift.TException {  if (!msgQueues.containsKey(sessionid)) {    return;  }  SessionQueue pQueue=msgQueues.get(sessionid);  log.debug("terminateSession: SessionId: " + sessionid + "\n");  String data="FilterTimeout";  ByteBuffer bb=ByteBuffer.wrap(data.getBytes());  BlockingQueue<ByteBuffer> queue=pQueue.getQueue();  if (queue != null) {    if (!queue.offer(bb)) {      log.error("Failed to queue message for session: " + sessionid);    }    msgQueues.remove(sessionid);  } else {    log.error("queue for session {} is null",sessionid);  }}  }
class C{  public boolean hasData(){  String[] hostList={"www.google.com","www.yahoo.com","www.bing.com","www.facebook.com","www.ask.com"};  try {    for (int i=0; i < hostList.length; ++i) {      String host=hostList[i];      Process p=Runtime.getRuntime().exec("ping -c 10 -w 100 " + host);      int status=p.waitFor();      if (status == 0) {        return true;      }    }  } catch (  UnknownHostException e) {    Log.e(LOG_TAG,"Ping test Failed: Unknown Host");  }catch (  IOException e) {    Log.e(LOG_TAG,"Ping test Failed: IOException");  }catch (  InterruptedException e) {    Log.e(LOG_TAG,"Ping test Failed: InterruptedException");  }  return false;}  }
class C{  public final double tx(double x){  final double width=this.width;  if (x >= 0 && x < width)   return x;  x=x % width;  if (x < 0)   x=x + width;  return x;}  }
class C{  public UrlWithScore(){  url=new Text();  score=new FloatWritable();}  }
class C{  public int size(){  return listeners.length;}  }
class C{  public DateMidnight(int year,int monthOfYear,int dayOfMonth,Chronology chronology){  super(year,monthOfYear,dayOfMonth,0,0,0,0,chronology);}  }
class C{  private void handleValidation(final HttpServerRequest req){  final Logger log=RequestLoggerFactory.getLogger(ValidationHandler.class,req);  final HttpClientRequest cReq=httpClient.request(req.method(),req.uri(),null);  cReq.setTimeout(TIMEOUT);  cReq.headers().setAll(req.headers());  cReq.headers().set(VALID_HEADER,"0");  req.bodyHandler(null);  cReq.exceptionHandler(ExpansionDeltaUtil.createRequestExceptionHandler(req,req.uri(),ValidationHandler.class));}  }
class C{  public void insert(Interval itemInterval,Object item){  int index=getSubnodeIndex(itemInterval,origin);  if (index == -1) {    add(item);    return;  }  Node node=subnode[index];  if (node == null || !node.getInterval().contains(itemInterval)) {    Node largerNode=Node.createExpanded(node,itemInterval);    subnode[index]=largerNode;  }  insertContained(subnode[index],itemInterval,item);}  }
class C{  public RpfCoverageManager(RpfFrameProvider rfp){  frameProvider=rfp;}  }
class C{  public InitialAuthConfig(){}  }
class C{  public void onDestroy(){}  }
class C{  public void doOrthogonalLayout(){  m_graph.getSettings().getLayoutSettings().setDefaultGraphLayout(LayoutStyle.ORTHOGONAL);  m_graph.doLayout();}  }
class C{  public static String handleFailedJavadocFetch(CoreException e){  IStatus status=e.getStatus();  if (JavaCore.PLUGIN_ID.equals(status.getPlugin())) {    Throwable cause=e.getCause();    int code=status.getCode();    if (code == IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC_TIMEOUT || (code == IJavaModelStatusConstants.CANNOT_RETRIEVE_ATTACHED_JAVADOC && (cause instanceof FileNotFoundException || cause instanceof SocketException || cause instanceof UnknownHostException|| cause instanceof ProtocolException)))     return CorextMessages.JavaDocLocations_error_gettingAttachedJavadoc;  }  LOG.error(e.getMessage(),e);  return CorextMessages.JavaDocLocations_error_gettingJavadoc;}  }
class C{  public boolean provides(Class<?> type){  if (getDisabled()) {    return false;  }  return false;}  }
class C{  public final boolean deletePhoto(final long photoId) throws AbelanaClientException, AbelanaClientException {  if (isConnectedToServerOrTryToConnect()) {    DeletePhotoRequest deletePhotoRequest=new DeletePhotoRequest();    deletePhotoRequest.photoId=photoId;    try {      StatusResponse statusResponse=mBlockingStub.deletePhoto(deletePhotoRequest);      if (statusResponse.error != null && statusResponse.error.code.equals("403")) {        throw new AbelanaClientException(mContext.getString(R.string.abelana_auth_error_message));      }      return statusResponse.error == null;    } catch (    RuntimeException e) {      Log.e("AbelanaClient",e.getMessage());      throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));    }  } else {    throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));  }}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  public final int depth(FileSystemEntry entry){  int d=0;  FileSystemEntry root=this;  while (entry != root) {    entry=entry.parent;    d++;  }  return d;}  }
class C{  public StreamTimestamp minus(int i,ChronoUnit unit){  return new StreamTimestamp(streamId,timestamp.minus(i,unit));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SMMLA");  translateAll(environment,instruction,"SMMLA",instructions);}  }
class C{  @Override public void displayTalkCycle(Cycle cycle){  talkCycle=cycle;  if (alreadyInitializedRecyclerList) {    populateRecyclerList();  }}  }
class C{  private Context nextContext(){  Context next=new Context(context);  Options options=Options.instance(context);  Assert.checkNonNull(options);  next.put(Options.optionsKey,options);  Locale locale=context.get(Locale.class);  if (locale != null)   next.put(Locale.class,locale);  Assert.checkNonNull(messages);  next.put(JavacMessages.messagesKey,messages);  final boolean shareNames=true;  if (shareNames) {    Names names=Names.instance(context);    Assert.checkNonNull(names);    next.put(Names.namesKey,names);  }  DiagnosticListener<?> dl=context.get(DiagnosticListener.class);  if (dl != null)   next.put(DiagnosticListener.class,dl);  MultiTaskListener mtl=context.get(MultiTaskListener.taskListenerKey);  if (mtl != null)   next.put(MultiTaskListener.taskListenerKey,mtl);  FSInfo fsInfo=context.get(FSInfo.class);  if (fsInfo != null)   next.put(FSInfo.class,fsInfo);  JavaFileManager jfm=context.get(JavaFileManager.class);  Assert.checkNonNull(jfm);  next.put(JavaFileManager.class,jfm);  if (jfm instanceof JavacFileManager) {    ((JavacFileManager)jfm).setContext(next);  }  Names names=Names.instance(context);  Assert.checkNonNull(names);  next.put(Names.namesKey,names);  Tokens tokens=Tokens.instance(context);  Assert.checkNonNull(tokens);  next.put(Tokens.tokensKey,tokens);  Log nextLog=Log.instance(next);  nextLog.initRound(log);  JavaCompiler oldCompiler=JavaCompiler.instance(context);  JavaCompiler nextCompiler=oldCompiler instanceof LanguageCompiler ? LanguageCompiler.instance(next) : JavaCompiler.instance(next);  nextCompiler.initRound(oldCompiler);  filer.newRound(next);  messager.newRound(next);  elementUtils.setContext(next);  typeUtils.setContext(next);  JavacTask task=context.get(JavacTask.class);  if (task != null) {    next.put(JavacTask.class,task);    if (task instanceof BasicJavacTask)     ((BasicJavacTask)task).updateContext(next);  }  JavacTrees trees=context.get(JavacTrees.class);  if (trees != null) {    next.put(JavacTrees.class,trees);    trees.updateContext(next);  }  context.clear();  return next;}  }
class C{  private boolean locateMismatchingDistributions(MsgData data) throws AdeException {  final double maxScore=-calcLogProb(data.m_maxNumAppearance,data.m_lambda);  return (maxScore >= m_badMessageCountScoreThreshold);}  }
class C{  @Deprecated public boolean hasServer(@NonNull Jedis jedis,@NonNull String serverId) throws ProcessingException {  return getServer(jedis,serverId) >= 0;}  }
class C{  public static boolean map(Address start,int size){  Clock.stop();  Object[] args={start.toString(),size};  Trace.trace(Item.MEMORY,"map(%s,%d)",args);  Address last=start.plus(size);  assert size % BYTES_IN_PAGE == 0;  assert start.toWord().and(Word.fromIntSignExtend(~PAGE_MASK)).EQ(Word.zero());  for (Address p=start; p.LT(last); p=p.plus(BYTES_IN_PAGE)) {    Trace.trace(Item.MEMORY,"Mapping %s:%d",p,BYTES_IN_PAGE);    pageTable.mapPage(p);  }  Clock.start();  return true;}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  private boolean waitForMessageWindow(MessageType type,short nodeId,long maxWait) throws InterruptedException {  if (!windowedTypes.contains(type))   return true;  long start=System.nanoTime();  MessageWindow mw=getMW(nodeId);  if (!mw.disconnected && mw.pending.get() >= MAX_PENDING_MESSAGES) {    mw.lock.lock();    try {      while (!mw.disconnected && mw.pending.get() >= MAX_PENDING_MESSAGES) {        long now=System.nanoTime();        if (maxWait > 0 && (now - start) > maxWait * 1000)         return false;        mw.full.awaitNanos(now - start);      }    }  finally {      mw.lock.unlock();    }  }  mw=getMW(nodeId);  if (mw != null)   mw.pending.getAndIncrement();  return true;}  }
class C{  public boolean search(int[] A,int target){  if (A.length == 0) {    return false;  }  int start=0;  int end=A.length - 1;  int mid;  while (start + 1 < end) {    mid=start + (end - start) / 2;    if (A[mid] == target) {      return true;    }    if (A[start] < A[mid]) {      if (A[start] <= target && target <= A[mid]) {        end=mid;      } else {        start=mid;      }    } else {      if (A[mid] <= target && target <= A[end]) {        start=mid;      } else {        end=mid;      }    }  }  return (A[start] == target) || (A[end] == target);}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  public void writeEndOfClass(){  out.println("}");}  }
class C{  public static boolean deleteFile(String path){  if (StringUtils.isBlank(path)) {    return true;  }  File file=new File(path);  if (!file.exists()) {    return true;  }  if (file.isFile()) {    return file.delete();  }  if (!file.isDirectory()) {    return false;  }  for (  File f : file.listFiles()) {    if (f.isFile()) {      f.delete();    } else     if (f.isDirectory()) {      deleteFile(f.getAbsolutePath());    }  }  return file.delete();}  }
class C{  public CountRequest routing(String routing){  this.routing=routing;  return this;}  }
class C{  boolean canRunInCurrentRunState(boolean periodic){  return isRunningOrShutdown(periodic ? continueExistingPeriodicTasksAfterShutdown : executeExistingDelayedTasksAfterShutdown);}  }
class C{  public boolean isDaylightSavings(){  return daylightSavings;}  }
