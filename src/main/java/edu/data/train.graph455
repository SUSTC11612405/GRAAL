class C{  public static CtMethod make(CtClass returnType,String mname,CtClass[] parameters,CtClass[] exceptions,String body,CtClass declaring) throws CannotCompileException {  return make(Modifier.PUBLIC,returnType,mname,parameters,exceptions,body,declaring);}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void parseComment() throws IOException {  while (true) {    int c=ch;switch (c) {case '-':      if (!strict && (strpos != 0) && (str[strpos - 1] == '-')) {        if ((ch=readCh()) == '>') {          return;        }        if (ch == '!') {          if ((ch=readCh()) == '>') {            return;          } else {            addString('-');            addString('!');            continue;          }        }        break;      }    if ((ch=readCh()) == '-') {      ch=readCh();      if (strict || ch == '>') {        return;      }      if (ch == '!') {        if ((ch=readCh()) == '>') {          return;        } else {          addString('-');          addString('!');          continue;        }      }      addString('-');    }  break;case -1:handleEOFInComment();return;case '\n':ln++;ch=readCh();lfCount++;break;case '>':ch=readCh();break;case '\r':ln++;if ((ch=readCh()) == '\n') {ch=readCh();crlfCount++;} else {crCount++;}c='\n';break;default :ch=readCh();break;}addString(c);}}  }
class C{  final boolean isOpAnyEvent(LocalRegion r){  return isOpPutEvent() || isOpCreateEvent() || isOpInvalidateEvent()|| isOpDestroyEvent(r);}  }
class C{  void removeBytes(int offs,int len){  model.removeBytes(offs,len);}  }
class C{  @SuppressWarnings({"unchecked","unused","deprecation"}) public static int writePartitionFile(JobConf conf,Path partFile) throws IOException, InstantiationException, IllegalAccessException {  SamplingSortMRInputFormat inFormat=new SamplingSortMRInputFormat();  Sampler sampler=new Sampler();  Class<? extends WritableComparable> targetKeyClass;  targetKeyClass=(Class<? extends WritableComparable>)conf.getClass(TARGET_KEY_CLASS,WritableComparable.class);  int brlen=MRJobConfiguration.getNumRowsPerBlock(conf,(byte)0);  int bclen=MRJobConfiguration.getNumColumnsPerBlock(conf,(byte)0);  int partitions=conf.getNumReduceTasks();  long sampleSize=conf.getLong(SAMPLE_SIZE,1000);  InputSplit[] splits=inFormat.getSplits(conf,conf.getNumMapTasks());  int samples=Math.min(10,splits.length);  long recordsPerSample=sampleSize / samples;  int sampleStep=splits.length / samples;  int totalcount=0;  for (int i=0; i < samples; i++) {    SequenceFileRecordReader reader=(SequenceFileRecordReader)inFormat.getRecordReader(splits[sampleStep * i],conf,null);    int count=0;    WritableComparable key=(WritableComparable)reader.createKey();    Writable value=(Writable)reader.createValue();    while (reader.next(key,value) && count < recordsPerSample) {      Converter inputConverter=MRJobConfiguration.getInputConverter(conf,(byte)0);      inputConverter.setBlockSize(brlen,bclen);      inputConverter.convert(key,value);      while (inputConverter.hasNext()) {        Pair pair=inputConverter.next();        if (pair.getKey() instanceof DoubleWritable) {          sampler.addValue(new DoubleWritable(((DoubleWritable)pair.getKey()).get()));        } else         if (pair.getValue() instanceof MatrixCell) {          sampler.addValue(new DoubleWritable(((MatrixCell)pair.getValue()).getValue()));        } else         throw new IOException("SamplingSortMRInputFormat unsupported key/value class: " + pair.getKey().getClass() + ":"+ pair.getValue().getClass());        count++;      }      key=(WritableComparable)reader.createKey();      value=(Writable)reader.createValue();    }    totalcount+=count;  }  if (totalcount == 0)   sampler.addValue(new DoubleWritable(0));  FileSystem outFs=partFile.getFileSystem(conf);  if (outFs.exists(partFile)) {    outFs.delete(partFile,false);  }  SequenceFile.Writer writer=SequenceFile.createWriter(outFs,conf,partFile,DoubleWritable.class,NullWritable.class);  NullWritable nullValue=NullWritable.get();  int index0=-1, i=0;  boolean lessthan0=true;  for (  WritableComparable splitValue : sampler.createPartitions(partitions)) {    writer.append(splitValue,nullValue);    if (lessthan0 && ((DoubleWritable)splitValue).get() >= 0) {      index0=i;      lessthan0=false;    }    i++;  }  if (lessthan0)   index0=partitions - 1;  writer.close();  return index0;}  }
class C{  @CanIgnoreReturnValue public Stopwatch reset(){  elapsedNanos=0;  isRunning=false;  return this;}  }
class C{  public void buildBeans(){  TableSource.put(project,tableSource);  GenerateTablesImpl genTables=new GenerateTablesImpl();  FileObject rootFolder=getLocation().getRootFolder();  String pkgName=getPackageName();  for (  Table table : selectedTables.getTables()) {    String pkg=pkgName;    genTables.addTable(table.getCatalog(),table.getSchema(),table.getName(),rootFolder,pkg,selectedTables.getClassName(table),table.getUniqueConstraints());  }  generator=new DbSchemaEjbGenerator(genTables,schemaElement,collectionType,useColumnNamesInRelationships,useDefaults,generateUnresolvedRelationships);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public SessionId(byte[] sessionId){  if (sessionId == null) {    throw new NullPointerException("Session ID must not be null");  }  this.id=Arrays.copyOf(sessionId,sessionId.length);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.116 -0500",hash_original_method="162176ED227569BA5BCA4BCD896EB6BD",hash_generated_method="8A0663796DEAA523B3A44491704958DC") public StringBuffer insert(int index,boolean b){  addTaint(index);  addTaint(b);  return this;}  }
class C{  public SymbolTableEntryInternal steFor_$n4promisifyFunction(){  return getSymbolTableEntryInternal("$n4promisifyFunction",true);}  }
class C{  public void decryptPassword(KeyTool.DesEncrypter keyTool){  if (encrypted == null)   return;  String credString=keyTool.decrypt(encrypted);  credString=credString.substring(0,credString.lastIndexOf("::"));  credString=credString.substring(credString.lastIndexOf("::") + 2);  this.password=credString;}  }
class C{  @Override protected void beforeTest() throws Exception {  for (int i=0; i < RMT_NODES_CNT; i++)   startGrid("node-" + i,ComputeFailoverNodeStartup.configuration());}  }
class C{  public synchronized void clear(){  rrs.clear();  position=0;  nsigs=0;}  }
class C{  protected static TrustAnchor findTrustAnchor(X509Certificate cert,Set trustAnchors) throws AnnotatedException {  return findTrustAnchor(cert,trustAnchors,null);}  }
class C{  private void addButton(JToggleButton button,String name){  button.setIcon(new ImageIcon(ImageUtils.getImage(this,name + "3.gif")));  button.setMaximumSize(new Dimension(80,40));  button.setPreferredSize(new Dimension(80,40));  buttonsPanel.add(button);  buttonsPanel.add(Box.createVerticalStrut(5));  group.add(button);}  }
class C{  @Override @SuppressWarnings("unchecked") public synchronized <T>T[] toArray(T[] contents){  if (elementCount > contents.length) {    Class<?> ct=contents.getClass().getComponentType();    contents=(T[])Array.newInstance(ct,elementCount);  }  System.arraycopy(elementData,0,contents,0,elementCount);  if (elementCount < contents.length) {    contents[elementCount]=null;  }  return contents;}  }
class C{  public String IRClassValueTipText(){  return "The class label, or 1-based index of the class label, to use " + "when evaluating subsets with an IR metric (such as f-measure " + "or AUC. Leaving this unset will result in the class frequency "+ "weighted average of the metric being used.";}  }
class C{  public IrishLowerCaseFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public CRemoteFileBrowser(final Window parent,final IDebugger debugger,final RemoteFileSystem fileSystem){  super(new CRemoteFileSystemView(fileSystem));  this.parent=Preconditions.checkNotNull(parent,"IE01494: Parent argument can not be null");  this.debugger=Preconditions.checkNotNull(debugger,"IE01495: Debugger argument can not be null");  setFileView(new CRemoteFileView());  final String lastDir=ConfigManager.instance().getGeneralSettings().getLastDirectory();  if (!lastDir.isEmpty()) {    setCurrentDirectory(new CRemoteFile(lastDir,true));  }}  }
class C{  public T caseVariableEnvironmentElement(VariableEnvironmentElement object){  return null;}  }
class C{  public String authorizeAccount(String callbackURL) throws FacebookException {  this.connection=new FacebookFactory().getInstance();  String key=getOauthKey();  String secret=getOauthSecret();  if (this.appOauthKey != null && !this.appOauthKey.isEmpty()) {    key=this.appOauthKey;  }  if (this.appOauthSecret != null && !this.appOauthSecret.isEmpty()) {    secret=this.appOauthSecret;  }  this.connection.setOAuthAppId(key,secret);  if (this.appOauthKey != null && !this.appOauthKey.isEmpty()) {    this.connection.setOAuthPermissions("user_posts, manage_pages, publish_pages, publish_actions, read_page_mailboxes");  } else {    this.connection.setOAuthPermissions("user_posts, manage_pages, publish_pages, publish_actions, read_page_mailboxes");  }  return this.connection.getOAuthAuthorizationURL(callbackURL);}  }
class C{  @Override public CommonTermsQueryBuilder boost(float boost){  this.boost=boost;  return this;}  }
class C{  @SuppressWarnings("unchecked") public static Map<String,Object> checkParam(Map<String,Object> method,int pos,String name,String type,boolean defaulted,boolean sequenced){  List<?> plists=(List<?>)method.get(MetamodelGenerator.KEY_PARAMS);  List<Map<String,Object>> params;  if (plists.get(0) instanceof List) {    params=((List<List<Map<String,Object>>>)plists).get(0);  } else {    params=(List<Map<String,Object>>)plists;  }  Assert.assertNotNull(params);  Assert.assertTrue(params.get(0).size() > pos);  Map<String,Object> parm=params.get(pos);  checkMap(parm,MetamodelGenerator.KEY_METATYPE,MetamodelGenerator.METATYPE_PARAMETER,MetamodelGenerator.KEY_NAME,name);  if (defaulted) {    Assert.assertNotNull(String.format("Param %s of method %s should be defaulted",name,method.get(MetamodelGenerator.KEY_NAME)),parm.get(MetamodelGenerator.KEY_DEFAULT));  } else {    Assert.assertNull(String.format("Default value of param %s of method %s",name,method.get(MetamodelGenerator.KEY_NAME)),parm.get(MetamodelGenerator.KEY_DEFAULT));  }  Map<String,Object> tmap;  if (parm.get(MetamodelGenerator.KEY_TYPE) instanceof Map) {    tmap=(Map<String,Object>)parm.get(MetamodelGenerator.KEY_TYPE);    Assert.assertNotNull(tmap);  } else {    tmap=new HashMap<String,Object>();    tmap.put(MetamodelGenerator.KEY_NAME,parm.get(MetamodelGenerator.KEY_TYPE));  }  if (sequenced) {    Assert.assertEquals(String.format("Param %s of method %s is not sequenced",name,method.get(MetamodelGenerator.KEY_NAME)),1,parm.get("seq"));    Assert.assertEquals("Sequenced parameter should be last",params.size() - 1,pos);    Assert.assertEquals("ceylon.language::Sequential",String.format("%s::%s",packageName(tmap),tmap.get(MetamodelGenerator.KEY_NAME)));    List<Map<String,Object>> pts=(List<Map<String,Object>>)tmap.get(MetamodelGenerator.KEY_TYPE_PARAMS);    checkTypeParameters(0,pts,type);  } else {    Assert.assertNull("Param " + name + " of method "+ method.get(MetamodelGenerator.KEY_NAME)+ " should not be sequenced",parm.get("seq"));    checkType(parm,type);  }  return tmap;}  }
class C{  public String generalize(String detail){  return new SQLDeArger(detail).getParsedSQL();}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") @Override public void run(){  while (true) {    try {      if (!cleanUp(queue.remove())) {        break;      }    } catch (    InterruptedException e) {    }  }}  }
class C{  private void nl(HtmlCode html,boolean hr){  if (m_oneLine)   html.addElement("&nbsp;- "); else   if (hr)   html.addElement(new hr("90%","left")); else   html.addElement(new br());}  }
class C{  public ZipFileExporter(File archiveFile) throws IOException {  outputStream=new ZipOutputStream(new FileOutputStream(archiveFile));}  }
class C{  protected void sequence_ArrowFunctionTypeExpression_FunctionTypeExpressionOLD_TAnonymousFormalParameterList(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean supportsCoreSQLGrammar() throws SQLException {  return true;}  }
class C{  public boolean isNewRecordQuery(){  return m_newRecord;}  }
class C{  public TimeAllocationMutator(Provider<TripRouter> tripRouterProvider,PlansConfigGroup plansConfigGroup,TimeAllocationMutatorConfigGroup timeAllocationMutatorConfigGroup,GlobalConfigGroup globalConfigGroup){  super(globalConfigGroup);  this.tripRouterProvider=tripRouterProvider;  this.mutationRange=timeAllocationMutatorConfigGroup.getMutationRange();  this.affectingDuration=timeAllocationMutatorConfigGroup.isAffectingDuration();  this.activityDurationInterpretation=(plansConfigGroup.getActivityDurationInterpretation());}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData,final boolean isChunked,final boolean urlSafe,final int maxResultSize){  if (binaryData == null || binaryData.length == 0) {    return binaryData;  }  final Base64 b64=isChunked ? new Base64(urlSafe) : new Base64(0,CHUNK_SEPARATOR,urlSafe);  final long len=b64.getEncodedLength(binaryData);  if (len > maxResultSize) {    throw new IllegalArgumentException("Input array too big, the output array would be bigger (" + len + ") than the specified maximum size of "+ maxResultSize);  }  return b64.encode(binaryData);}  }
class C{  public void computeReachability(){  for (  SsaBasicBlock block : blocks) {    block.setReachable(0);  }  ArrayList<SsaBasicBlock> blockList=new ArrayList<SsaBasicBlock>();  blockList.add(this.getEntryBlock());  while (!blockList.isEmpty()) {    SsaBasicBlock block=blockList.remove(0);    if (block.isReachable())     continue;    block.setReachable(1);    BitSet succs=block.getSuccessors();    for (int i=succs.nextSetBit(0); i >= 0; i=succs.nextSetBit(i + 1)) {      blockList.add(blocks.get(i));    }  }}  }
class C{  public boolean isValidSudoku2(char[][] board){  int[] row=new int[9];  int[] col=new int[9];  int[] sqr=new int[9];  for (int i=0; i < 9; i++) {    for (int j=0; j < 9; j++) {      if (board[i][j] != '.') {        int num=board[i][j] - '0';        if ((row[i] & 1 << num) > 0)         return false; else         row[i]|=1 << num;        if ((col[j] & 1 << num) > 0)         return false; else         col[j]|=1 << num;        int sqrIdx=(i - i % 3) + j / 3;        if ((sqr[sqrIdx] & 1 << num) > 0)         return false; else         sqr[sqrIdx]|=1 << num;      }    }  }  return true;}  }
class C{  @Override public void clear(){  super.clear();  Object[] keys=_set;  int[] values=_values;  for (int i=keys.length; i-- > 0; ) {    keys[i]=null;    values[i]=0;  }}  }
class C{  @Override public void initialize(){  setPaletteName("Grey");  this.r=new int[256];  this.g=new int[256];  this.b=new int[256];  this.r[0]=255;  this.g[0]=255;  this.b[0]=255;  this.r[1]=0;  this.g[1]=0;  this.b[1]=0;  for (int i=2; i < 256; i++) {    this.r[i]=i;    this.g[i]=i;    this.b[i]=i;  }}  }
class C{  public static int bytesToInt(byte[] bytes){  if (bytes.length != 2) {    throw new IllegalArgumentException("byte array size must be 2");  }  return bytesToInt(bytes[0],bytes[1]);}  }
class C{  public TIntDoubleHashMap(TIntHashingStrategy strategy){  super(strategy);}  }
class C{  public AddressLookup(String serverUrl,String serialNo,String password){  this.serverUrl=serverUrl.trim();  this.clientID=serialNo.trim();  this.accessCode=password.trim();}  }
class C{  @Override public boolean isLeapYear(long prolepticYear){  return IsoChronology.INSTANCE.isLeapYear(prolepticYear + YEARS_DIFFERENCE);}  }
class C{  static <T>T checkNotNull(T instance,String name){  if (instance == null) {    throw new NullPointerException(name + " must not be null");  }  return instance;}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  initEClass(namedElementEClass,NamedElement.class,"NamedElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getNamedElement_Name(),ecorePackage.getEString(),"name",null,0,1,NamedElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(documentedElementEClass,DocumentedElement.class,"DocumentedElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getDocumentedElement_Documentation(),ecorePackage.getEString(),"documentation",null,0,1,DocumentedElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(domainElementEClass,DomainElement.class,"DomainElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getDomainElement_DomainID(),ecorePackage.getEString(),"domainID","org.yakindu.domain.default",0,1,DomainElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  createResource(eNS_URI);}  }
class C{  public final synchronized boolean isFull(){  return m_buffer.length == m_used;}  }
class C{  public XmlSource<T> withRecordClass(Class<T> recordClass){  return new XmlSource<>(getFileOrPatternSpec(),getMinBundleSize(),rootElement,recordElement,recordClass);}  }
class C{  public RecordedEvent originalEvent(){  return (link != null) ? link : event;}  }
class C{  public ExecutableScript executable(Script script,ScriptContext scriptContext,HasContextAndHeaders headersContext){  return executable(compile(script,scriptContext,headersContext),script.getParams());}  }
class C{  public CheckingAccount(){  super();  overdraftLimit=-20;}  }
class C{  static public void inssort(byte[] array){  byte tmp;  for (int i=1; i < array.length; i++)   for (int j=i; (j > 0) && (array[j] < array[j - 1]); j--) {    tmp=array[j];    array[j]=array[j - 1];    array[j - 1]=tmp;  }}  }
class C{  private MarkupContainer createNeutralResultFragment(){  return new Fragment(RESULT_CONTAINER,POSITIVE_RESULT_FRAGMENT,this);}  }
class C{  public String strRep(){  return "#" + rankTeamPollScore + " "+ abbr+ " ("+ wins+ "-"+ losses+ ")";}  }
class C{  public IOUtils(){  super();}  }
class C{  protected void notifyListeners(Hashtable<TxState,Hashtable<TxState,Set<EventListener>>> listeners,TxState from,TxState to,boolean pre){  FSMTransitionEvent event=new FSMTransitionEvent(eventsource_,from,to);  Hashtable<TxState,Set<EventListener>> lstnrs=null;  Set<EventListener> tolstnrs=null;synchronized (this) {    lstnrs=listeners.get(from);    if (lstnrs == null)     return;    tolstnrs=lstnrs.get(to);    if (tolstnrs == null)     return;    lstnrs=new Hashtable<TxState,Set<EventListener>>(lstnrs);    tolstnrs=new HashSet<EventListener>(tolstnrs);  }  for (  EventListener listener : tolstnrs) {    if (pre && (listener instanceof FSMPreTransitionListener)) {      ((FSMPreTransitionListener)listener).beforeTransition(event);    } else     if (!pre && (listener instanceof FSMTransitionListener)) {      ((FSMTransitionListener)listener).transitionPerformed(event);    }  }}  }
class C{  @NotNull public static List<PyAssignmentStatement> copyFieldDeclarationToStatement(@NotNull final Collection<PyAssignmentStatement> assignmentStatements,@NotNull final PyStatementList superClassStatement,@Nullable final PyClass dequalifyIfDeclaredInClass){  final List<PyAssignmentStatement> declarations=new ArrayList<PyAssignmentStatement>(assignmentStatements.size());  Collections.sort(declarations,PyDependenciesComparator.INSTANCE);  for (  final PyAssignmentStatement pyAssignmentStatement : assignmentStatements) {    final PyElement value=pyAssignmentStatement.getAssignedValue();    final PyAssignmentStatement newDeclaration=(PyAssignmentStatement)pyAssignmentStatement.copy();    if (value instanceof PyReferenceExpression && dequalifyIfDeclaredInClass != null) {      final String newValue=getNewValueToAssign((PyReferenceExpression)value,dequalifyIfDeclaredInClass);      setNewAssigneeValue(newDeclaration,newValue);    }    declarations.add(PyUtil.addElementToStatementList(newDeclaration,superClassStatement));    PyPsiUtils.removeRedundantPass(superClassStatement);  }  return declarations;}  }
class C{  private void outputFile(Path dstFile,String version,SortedMap<String,ZoneRules> builtZones,Map<String,String> links){  try (DataOutputStream out=new DataOutputStream(Files.newOutputStream(dstFile))){    out.writeByte(1);    out.writeUTF("TZDB");    out.writeShort(1);    out.writeUTF(version);    String[] regionArray=builtZones.keySet().toArray(new String[builtZones.size()]);    out.writeShort(regionArray.length);    for (    String regionId : regionArray) {      out.writeUTF(regionId);    }    List<ZoneRules> rulesList=new ArrayList<>(new HashSet<>(builtZones.values()));    out.writeShort(rulesList.size());    ByteArrayOutputStream baos=new ByteArrayOutputStream(1024);    for (    ZoneRules rules : rulesList) {      baos.reset();      DataOutputStream dataos=new DataOutputStream(baos);      rules.writeExternal(dataos);      dataos.close();      byte[] bytes=baos.toByteArray();      out.writeShort(bytes.length);      out.write(bytes);    }    out.writeShort(builtZones.size());    for (    Map.Entry<String,ZoneRules> entry : builtZones.entrySet()) {      int regionIndex=Arrays.binarySearch(regionArray,entry.getKey());      int rulesIndex=rulesList.indexOf(entry.getValue());      out.writeShort(regionIndex);      out.writeShort(rulesIndex);    }    out.writeShort(links.size());    for (    Map.Entry<String,String> entry : links.entrySet()) {      int aliasIndex=Arrays.binarySearch(regionArray,entry.getKey());      int regionIndex=Arrays.binarySearch(regionArray,entry.getValue());      out.writeShort(aliasIndex);      out.writeShort(regionIndex);    }    out.flush();  } catch (  Exception ex) {    System.out.println("Failed: " + ex.toString());    ex.printStackTrace();    System.exit(1);  }}  }
class C{  public int nextInt(int n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  if ((n & -n) == n)   return (int)((n * (long)next(31)) >> 31);  int bits, val;  do {    bits=next(31);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @HLEFunction(nid=0x912354A7,version=150) public int sceKernelRotateThreadReadyQueue(@CheckArgument("checkThreadPriority") int priority){synchronized (readyThreads) {    for (    SceKernelThreadInfo thread : readyThreads) {      if (thread.currentPriority == priority) {        if (priority == currentThread.currentPriority) {          thread=currentThread;          hleChangeThreadState(thread,PSP_THREAD_READY);        }        removeFromReadyThreads(thread);        addToReadyThreads(thread,false);        hleRescheduleCurrentThread();        break;      }    }  }  return 0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public TripsToLegsModule(final StageActivityTypes additionalBlackList,Provider<TripRouter> tripRouterProvider,GlobalConfigGroup globalConfigGroup){  super(globalConfigGroup);  this.tripRouterProvider=tripRouterProvider;  this.additionalBlackList=additionalBlackList;}  }
class C{  public void addFormField(String fieldName,int width){  int start=getCaretPosition();  int end=getCaretPosition() + width;  addFormRange(fieldName,start,end);}  }
class C{  public BootstrapMethodsAttribute(ConstPool cp,BootstrapMethod[] methods){  super(cp,tag);  int size=2;  for (int i=0; i < methods.length; i++)   size+=4 + methods[i].arguments.length * 2;  byte[] data=new byte[size];  ByteArray.write16bit(methods.length,data,0);  int pos=2;  for (int i=0; i < methods.length; i++) {    ByteArray.write16bit(methods[i].methodRef,data,pos);    ByteArray.write16bit(methods[i].arguments.length,data,pos + 2);    int[] args=methods[i].arguments;    pos+=4;    for (int k=0; k < args.length; k++) {      ByteArray.write16bit(args[k],data,pos);      pos+=2;    }  }  set(data);}  }
class C{  public SQFPrivateAssignment(@NotNull SQFVariable privateVariable,@NotNull SQFPrivateAssignmentPrivatizer declarationElement){  super(privateVariable,declarationElement);}  }
class C{  @Nullable public static String declinedPermission(@NonNull Fragment context,@NonNull String[] permissions){  for (  String permission : permissions) {    if (isPermissionDeclined(context,permission)) {      return permission;    }  }  return null;}  }
class C{  public Map<String,Object> invoke(ServiceDispatcher dispatcher,String localName,Map<String,Object> context) throws GenericServiceException {  DispatchContext dctx=dispatcher.getLocalContext(localName);  ModelService model=dctx.getModelService(getName());  if (model == null)   throw new GenericServiceException("Group defined service (" + getName() + ") is not a defined service.");  Map<String,Object> thisContext=model.makeValid(context,ModelService.IN_PARAM);  Debug.logInfo("Running grouped service [" + serviceName + "]",module);  if (getMode().equals("async")) {    List<String> requiredOut=model.getParameterNames(ModelService.OUT_PARAM,false);    if (requiredOut.size() > 0) {      Debug.logWarning("Grouped service (" + getName() + ") requested 'async' invocation; running sync because of required OUT parameters.",module);      return dispatcher.runSync(localName,model,thisContext);    } else {      dispatcher.runAsync(localName,model,thisContext,false);      return new HashMap<String,Object>();    }  } else {    return dispatcher.runSync(localName,model,thisContext);  }}  }
class C{  public Renaming clone(){  Renaming result=new Renaming();  result.identifiers=(Vector<FormalParamNode>)this.identifiers.clone();  result.newNames=(Vector<String>)this.newNames;  return result;}  }
class C{  private void updateHighScore(int lastScore){  SharedPreferences prefs=getSharedPreferences(BreakoutActivity.PREFS_NAME,MODE_PRIVATE);  int highScore=prefs.getInt(BreakoutActivity.HIGH_SCORE_KEY,0);  Log.d(TAG,"final score was " + lastScore);  if (lastScore > highScore) {    Log.d(TAG,"new high score!  (" + highScore + " vs. "+ lastScore+ ")");    SharedPreferences.Editor editor=prefs.edit();    editor.putInt(BreakoutActivity.HIGH_SCORE_KEY,lastScore);    editor.commit();  }}  }
class C{  public void unbindTextures(){  int num=mTextureList.size();  if (mPlugins != null)   for (  IMaterialPlugin plugin : mPlugins)   plugin.unbindTextures();  for (int i=0; i < num; i++) {    ATexture texture=mTextureList.get(i);    GLES20.glBindTexture(texture.getGLTextureType(),0);  }  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);}  }
class C{  public GuacamoleClientBadTypeException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @HLEFunction(nid=0x6F92741B,version=150) public int sceNetAdhocPdpCreate(pspNetMacAddress macAddress,int port,int bufSize,int unk1){  checkInitialized();  if (port == 0) {    port=getFreePort();    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetAdhocPdpCreate: using free port %d",port));    }  }  PdpObject pdpObject=getNetworkAdapter().createPdpObject();  int result=pdpObject.create(macAddress,port,bufSize);  if (result == pdpObject.getId()) {    pdpObjects.put(pdpObject.getId(),pdpObject);    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetAdhocPdpCreate: returning id=0x%X",result));    }  } else {    if (log.isDebugEnabled()) {      log.debug(String.format("sceNetAdhocPdpCreate: returning error=0x%08X",result));    }  }  return result;}  }
class C{  public HungarianLightStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public SkinCursor(Cursor cursor){  super(cursor);}  }
class C{  public void addAndActivateHDChain(DeterministicKeyChain chain){  keyChainGroupLock.lock();  try {    keyChainGroup.addAndActivateHDChain(chain);  }  finally {    keyChainGroupLock.unlock();  }}  }
class C{  @Override protected void finalize() throws Throwable {  mPanorama=null;  super.finalize();}  }
class C{  public String generateUniqueName(String prefix){  return prefix + "_" + (++guidCounter)+ "___";}  }
class C{  private void loadPreset(String presetName){  if (!presets.containsKey(presetName)) {    return;  }  Map<String,String> loadedPreset=presets.get(presetName);  for (  String setting : loadedPreset.keySet()) {    String color=loadedPreset.get(setting);    d.setStringSetting(setting,color);  }}  }
class C{  public void deployContext(String path,URL config,URL war) throws TomcatManagerException, IOException {  deployContext(path,config,war,false);}  }
class C{  public int nextInt(double theMean){  MersenneTwisterFast gen=this.randomGenerator;  double my=theMean;  double t, g, my_k;  double gx, gy, px, py, e, x, xx, delta, v;  int sign;  double u;  int k, i;  if (my < SWITCH_MEAN) {    if (my != my_old) {      my_old=my;      llll=0;      p=Math.exp(-my);      q=p;      p0=p;    }    m=(my > 1.0) ? (int)my : 1;    for (; ; ) {      u=gen.nextDouble();      k=0;      if (u <= p0)       return (k);      if (llll != 0) {        i=(u > 0.458) ? Math.min(llll,m) : 1;        for (k=i; k <= llll; k++)         if (u <= pp[k])         return (k);        if (llll == 35)         continue;      }      for (k=llll + 1; k <= 35; k++) {        p*=my / (double)k;        q+=p;        pp[k]=q;        if (u <= q) {          llll=k;          return (k);        }      }      llll=35;    }  } else   if (my < MEAN_MAX) {    int Dk, X, Y;    double Ds, U, V, W;    m=(int)my;    if (my != my_last) {      my_last=my;      Ds=Math.sqrt(my + 0.25);      k2=(int)Math.ceil(my - 0.5 - Ds);      k4=(int)(my - 0.5 + Ds);      k1=k2 + k2 - m + 1;      k5=k4 + k4 - m;      dl=(double)(k2 - k1);      dr=(double)(k5 - k4);      r1=my / (double)k1;      r2=my / (double)k2;      r4=my / (double)(k4 + 1);      r5=my / (double)(k5 + 1);      ll=Math.log(r1);      lr=-Math.log(r5);      l_my=Math.log(my);      c_pm=m * l_my - Arithmetic.logFactorial(m);      f2=f(k2,l_my,c_pm);      f4=f(k4,l_my,c_pm);      f1=f(k1,l_my,c_pm);      f5=f(k5,l_my,c_pm);      p1=f2 * (dl + 1.0);      p2=f2 * dl + p1;      p3=f4 * (dr + 1.0) + p2;      p4=f4 * dr + p3;      p5=f1 / ll + p4;      p6=f5 / lr + p5;    }    for (; ; ) {      if ((U=gen.nextDouble() * p6) < p2) {        if ((V=U - p1) < 0.0)         return (k2 + (int)(U / f2));        if ((W=V / dl) < f1)         return (k1 + (int)(V / f1));        Dk=(int)(dl * gen.nextDouble()) + 1;        if (W <= f2 - Dk * (f2 - f2 / r2)) {          return (k2 - Dk);        }        if ((V=f2 + f2 - W) < 1.0) {          Y=k2 + Dk;          if (V <= f2 + Dk * (1.0 - f2) / (dl + 1.0)) {            return (Y);          }          if (V <= f(Y,l_my,c_pm))           return (Y);        }        X=k2 - Dk;      } else       if (U < p4) {        if ((V=U - p3) < 0.0)         return (k4 - (int)((U - p2) / f4));        if ((W=V / dr) < f5)         return (k5 - (int)(V / f5));        Dk=(int)(dr * gen.nextDouble()) + 1;        if (W <= f4 - Dk * (f4 - f4 * r4)) {          return (k4 + Dk);        }        if ((V=f4 + f4 - W) < 1.0) {          Y=k4 - Dk;          if (V <= f4 + Dk * (1.0 - f4) / dr) {            return (Y);          }          if (V <= f(Y,l_my,c_pm))           return (Y);        }        X=k4 + Dk;      } else {        W=gen.nextDouble();        if (U < p5) {          Dk=(int)(1.0 - Math.log(W) / ll);          if ((X=k1 - Dk) < 0)           continue;          W*=(U - p4) * ll;          if (W <= f1 - Dk * (f1 - f1 / r1))           return (X);        } else {          Dk=(int)(1.0 - Math.log(W) / lr);          X=k5 + Dk;          W*=(U - p5) * lr;          if (W <= f5 - Dk * (f5 - f5 * r5))           return (X);        }      }      if (Math.log(W) <= X * l_my - Arithmetic.logFactorial(X) - c_pm)       return (X);    }  } else {    return (int)my;  }}  }
class C{  public static ArrayList<PathParser.PathDataNode> transform(PathParser.PathDataNode[] elements,int extraCopy,boolean transformZ){  if (elements == null)   return null;  ArrayList<PathParser.PathDataNode> transformed=new ArrayList<>();  for (  PathParser.PathDataNode node : elements) {    int cmdArgs=commandArguments(node.mType);    int argsProvided=node.mParams.length;    if (node.mType == 'z')     node.mType='Z';    if (cmdArgs == -1) {      System.err.println("Command not supported! " + node.mType);    } else     if (argsProvided < cmdArgs) {      System.err.println("Command " + node.mType + " requires "+ cmdArgs+ " params! Passing only "+ argsProvided);    } else     if (cmdArgs == node.mParams.length) {      transformed.add(node);      if (extraCopy > 0 && (transformZ || node.mType != 'Z') && node.mType != PathNodeUtils.CMD_DUMB) {        PathParser.PathDataNode extraNodes=new PathParser.PathDataNode(node);        if (Character.isLowerCase(node.mType)) {          Arrays.fill(extraNodes.mParams,0.0f);        }        for (int j=0; j < extraCopy; j++)         transformed.add(extraNodes);      }    } else {      int mod=(argsProvided % cmdArgs);      if (mod != 0) {        System.err.println("Providing multiple groups of params for command " + node.mType + ", but in wrong number (missing "+ mod+ " args)");      } else {        int iter=argsProvided / cmdArgs;        for (int i=0; i < iter; i++) {          PathParser.PathDataNode newNode=new PathParser.PathDataNode(node.mType,PathParser.copyOfRange(node.mParams,i * cmdArgs,(i + 1) * cmdArgs));          transformed.add(newNode);          if (extraCopy > 0) {            PathParser.PathDataNode extraNodes=new PathParser.PathDataNode(newNode);            ;            if (Character.isLowerCase(newNode.mType)) {              Arrays.fill(extraNodes.mParams,0.0f);            }            for (int j=0; j < extraCopy; j++)             transformed.add(extraNodes);          }        }      }    }  }  if (transformZ) {    float[][] penPos=PathNodeUtils.calculatePenPosition(transformed);    int i=0;    for (    PathParser.PathDataNode node : transformed) {      if (node.mType == 'Z') {        node.mType='L';        node.mParams=penPos[i];      }      i++;    }  }  return transformed;}  }
class C{  protected void checkData(boolean allowRowChanges,boolean allowColumnChanges,Object[][] values) throws TableDataException {  if (!allowRowChanges && values.length != getRowCount()) {    throw new TableDataException("Trying to import data with " + values.length + " rows into a table with "+ getRowCount()+ " rows.");  } else   if (!allowColumnChanges && values[0].length != getLogicalColumnCount()) {    throw new TableDataException("Trying to import data with " + values[0].length + " columns into a table with "+ getLogicalColumnCount()+ " columns.");  }}  }
class C{  public void startClock(){  if (!timer.isRunning()) {    firePropertyChange(TIMER_STATUS,TimerStatus.STOPPED,(getClockDirection() > 0 ? TimerStatus.FORWARD : TimerStatus.BACKWARD));    fireClockUpdate(getClockDirection() > 0 ? TimerStatus.FORWARD : TimerStatus.BACKWARD);  }  if (Debug.debugging("clock")) {    Debug.output("Clock: Starting clock");  }  timer.restart();}  }
class C{  public void start(){  tcpThread.start();  udpThread.start();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.400 -0500",hash_original_method="BEEEBC5D4806AB4D59848CAB89CBF72F",hash_generated_method="198A31971150A22083A9CA76595D1221") @Override public void put(String name,byte value){  emulatedFields.put(name,value);}  }
class C{  public boolean isXHTML(){  return doXHTML;}  }
class C{  public boolean isLessThen(Quantity quantity){  assertDefined();  Integer thisValue=notNull(this);  Integer parameter=notNull(quantity);  return (thisValue.compareTo(parameter) < 0);}  }
class C{  public boolean containsKey(BinaryRule key){  return entries.containsKey(key);}  }
class C{  public org.apache.nutch.storage.ProtocolStatus.Builder clearLastModified(){  fieldSetFlags()[2]=false;  return this;}  }
class C{  boolean isLegalInsertText(String text){  if (getAllowsInvalid()) {    return true;  }  for (int counter=text.length() - 1; counter >= 0; counter--) {    char aChar=text.charAt(counter);    if (!Character.isDigit(aChar) && specialChars.indexOf(aChar) == -1) {      return false;    }  }  return true;}  }
class C{  public FloatMatrix put(FloatMatrix indices,int c,FloatMatrix v){  return put(indices.findIndices(),c,v);}  }
class C{  public NondominatedPopulation run(){  isCanceled.set(false);  return runSingleSeed(1,1,createTerminationCondition());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.131 -0500",hash_original_method="EAEAA0DB8B83D24D321D98459F4FA29E",hash_generated_method="6807D6D1E53693E5868F1A8094B9D433") public void onBackPressed(){  if (mCancelable) {    cancel();  }}  }
class C{  public void doRender(PlasmaBolt plasmaBolt,double x,double y,double z,float p_76986_8_,float p_76986_9_){  this.bindEntityTexture(plasmaBolt);  RenderUtils.disableLightmap();  GlStateManager.enableBlend();  GlStateManager.blendFunc(GL11.GL_ONE,GL11.GL_ONE);  RenderUtils.applyColorWithMultipy(plasmaBolt.getColor(),MOEasing.Quad.easeOut(plasmaBolt.getLife(),0,1,0.7f));  GlStateManager.disableLighting();  GlStateManager.pushMatrix();  GlStateManager.translate(x,y,z);  GlStateManager.rotate(plasmaBolt.prevRotationYaw + (plasmaBolt.rotationYaw - plasmaBolt.prevRotationYaw) * p_76986_9_ - 90.0F,0.0F,1.0F,0.0F);  GlStateManager.rotate(plasmaBolt.prevRotationPitch + (plasmaBolt.rotationPitch - plasmaBolt.prevRotationPitch) * p_76986_9_,0.0F,0.0F,1.0F);  byte b0=0;  float f2=0.0F;  float f3=0.5F;  float f4=(float)(b0 * 10) / 32.0F;  float f5=(float)(5 + b0 * 10) / 32.0F;  float f6=0.0F;  float f7=0.15625F;  float f8=(float)(5 + b0 * 10) / 32.0F;  float f9=(float)(10 + b0 * 10) / 32.0F;  float f10=0.05625F;  float renderSize=plasmaBolt.getRenderSize();  double length=6 * new Vec3d(plasmaBolt.motionX,plasmaBolt.motionY,plasmaBolt.motionZ).lengthVector() + 10;  GlStateManager.enableRescaleNormal();  GlStateManager.disableCull();  GlStateManager.rotate(45.0F,1.0F,0.0F,0.0F);  GlStateManager.scale(f10,f10,f10);  GlStateManager.translate(-4.0F,0.0F,0.0F);  GL11.glNormal3f(f10,0.0F,0.0F);  VertexBuffer wr=Tessellator.getInstance().getBuffer();  wr.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX);  wr.pos(1,-renderSize,-renderSize).tex((double)f6,(double)f8).endVertex();  wr.pos(1,-renderSize,renderSize).tex((double)f7,(double)f8).endVertex();  wr.pos(1,renderSize,renderSize).tex((double)f7,(double)f9).endVertex();  wr.pos(1,renderSize,-renderSize).tex((double)f6,(double)f9).endVertex();  Tessellator.getInstance().draw();  wr.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX);  wr.pos(length - 1,-renderSize,renderSize).tex((double)f7,(double)f8).endVertex();  wr.pos(length - 1,renderSize,renderSize).tex((double)f7,(double)f9).endVertex();  wr.pos(length - 1,renderSize,-renderSize).tex((double)f6,(double)f9).endVertex();  wr.pos(length - 1,-renderSize,-renderSize).tex((double)f6,(double)f8).endVertex();  Tessellator.getInstance().draw();  for (int i=0; i < 2; ++i) {    GlStateManager.rotate(90.0F,1.0F,0.0F,0.0F);    GL11.glNormal3f(0.0F,0.0F,f10);    wr.begin(GL11.GL_QUADS,DefaultVertexFormats.POSITION_TEX);    wr.pos(0,-renderSize,0.0D).tex((double)f2,(double)f4).endVertex();    wr.pos(length,-renderSize,0.0D).tex((double)f3,(double)f4).endVertex();    wr.pos(length,renderSize,0.0D).tex((double)f3,(double)f5).endVertex();    wr.pos(0,renderSize,0.0D).tex((double)f2,(double)f5).endVertex();    Tessellator.getInstance().draw();  }  GlStateManager.enableLighting();  GlStateManager.disableRescaleNormal();  GlStateManager.popMatrix();  RenderUtils.enableLightmap();}  }
class C{  public void login(String username,String password) throws AuthenticationException {  service.setUserCredentials(username,password);}  }
class C{  @Override public Value concatenate(Value v){  if (v instanceof BooleanVal) {    return new BooleanVal(b & ((BooleanVal)v).getBoolean());  } else   if (v instanceof NoneVal) {    return this;  } else {    log.warning("cannot concatenate " + this + " and "+ v);    return ValueFactory.noneValue;  }}  }
class C{  private static synchronized void maybeInitialize(){  if (currentAddon != null) {    UIManager.getLookAndFeelDefaults();    if (!UIManager.getBoolean(APPCONTEXT_INITIALIZED)) {      setAddon(currentAddon);    }  }}  }
class C{  public void preferConnection(String identifier){  preferredConnections.add(identifier);}  }
class C{  public boolean isOverwriteSalesRegion(){  Object oo=get_Value(COLUMNNAME_OverwriteSalesRegion);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void paintDisplay(Graphics2D g2D,Dimension d){synchronized (m_vis) {synchronized (this) {      if (m_clip.isEmpty()) {        return;      }      m_screen.setClip(0,0,d.width + 1,d.height + 1);      m_screen.transform(m_itransform);      double pixel=1.0 + 1.0 / getScale();      if (m_damageRedraw) {        if (m_clip.isInvalid()) {          m_clip.setClip(m_screen);        } else {          m_clip.intersection(m_screen);        }        m_clip.expand(pixel);        prepareGraphics(g2D);        m_rclip.setFrameFromDiagonal(m_clip.getMinX(),m_clip.getMinY(),m_clip.getMaxX(),m_clip.getMaxY());        g2D.setClip(m_rclip);        m_rclip.setFrameFromDiagonal(m_clip.getMinX() - pixel,m_clip.getMinY() - pixel,m_clip.getMaxX() + pixel,m_clip.getMaxY() + pixel);      } else {        m_rclip.setFrame(m_screen.getMinX(),m_screen.getMinY(),m_screen.getWidth(),m_screen.getHeight());        m_clip.setClip(m_screen);        prepareGraphics(g2D);      }      clearRegion(g2D,m_rclip);      getItemBounds(m_rclip);      m_bounds.reset();      m_queue.clear();      Iterator items=m_vis.items(m_predicate);      for (m_visibleCount=0; items.hasNext(); ++m_visibleCount) {        VisualItem item=(VisualItem)items.next();        Rectangle2D bounds=item.getBounds();        m_bounds.union(bounds);        if (m_clip.intersects(bounds,pixel)) {          m_queue.addToRenderQueue(item);        }        if (item.isInteractive()) {          m_queue.addToPickingQueue(item);        }      }      m_queue.sortRenderQueue();      for (int i=0; i < m_queue.rsize; ++i) {        m_queue.ritems[i].render(g2D);      }      if (m_damageRedraw) {        m_clip.reset();      }      checkItemBoundsChanged(m_rclip);    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__BODY:    setBody((RegularExpressionBody)null);  return;case RegularExpressionPackage.REGULAR_EXPRESSION_LITERAL__FLAGS:setFlags((RegularExpressionFlags)null);return;}super.eUnset(featureID);}  }
class C{  public int hashCode(){  return addr.hashCode();}  }
class C{  private void allocateAndTestVector(RawByteCache cache,String key,int size,int expectedMemoryBytes,int expectedStorageBytes,int chunkSize) throws IOException {  logger.info("Testing vector: key=" + key + " size="+ size);  byte[] vector=makeVector(size);  cache.allocate(key);  int offset=0;  while (offset < size) {    cache.append(key,getChunk(vector,offset,chunkSize));    offset+=chunkSize;  }  logger.info("Cache: " + cache.toString());  Assert.assertEquals("Vector memory bytes, size=" + size,expectedMemoryBytes,cache.getCurrentMemoryBytes());  Assert.assertEquals("Vector storage bytes, size=" + size,expectedStorageBytes,cache.getCurrentStorageBytes());  InputStream byteInput=cache.allocateStream(key);  readAndVerifyVector(vector,byteInput);  cache.deallocate(key);}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  Heap.sort(a);  show(a);  assert isSorted(a);}  }
class C{  public static Bitmap decodeUri(final ContentResolver resolver,final Uri uri) throws IOException {  BitmapFactory.Options opt=new BitmapFactory.Options();  opt.inJustDecodeBounds=false;  opt.inMutable=true;  return BitmapFactory.decodeStream(resolver.openInputStream(uri),null,opt);}  }
class C{  public byte[] toByteArray(){  int dataSize=getWriteSize();  byte[] data=new byte[dataSize];  int offset=0;  short sourceFileAttributeNameIndex=0;  if (itsSourceFileNameIndex != 0) {    sourceFileAttributeNameIndex=itsConstantPool.addUtf8("SourceFile");  }  offset=putInt32(FileHeaderConstant,data,offset);  offset=putInt16(MinorVersion,data,offset);  offset=putInt16(MajorVersion,data,offset);  offset=itsConstantPool.write(data,offset);  offset=putInt16(itsFlags,data,offset);  offset=putInt16(itsThisClassIndex,data,offset);  offset=putInt16(itsSuperClassIndex,data,offset);  offset=putInt16(itsInterfaces.size(),data,offset);  for (int i=0; i < itsInterfaces.size(); i++) {    int interfaceIndex=((Short)(itsInterfaces.get(i))).shortValue();    offset=putInt16(interfaceIndex,data,offset);  }  offset=putInt16(itsFields.size(),data,offset);  for (int i=0; i < itsFields.size(); i++) {    ClassFileField field=(ClassFileField)itsFields.get(i);    offset=field.write(data,offset);  }  offset=putInt16(itsMethods.size(),data,offset);  for (int i=0; i < itsMethods.size(); i++) {    ClassFileMethod method=(ClassFileMethod)itsMethods.get(i);    offset=method.write(data,offset);  }  if (itsSourceFileNameIndex != 0) {    offset=putInt16(1,data,offset);    offset=putInt16(sourceFileAttributeNameIndex,data,offset);    offset=putInt32(2,data,offset);    offset=putInt16(itsSourceFileNameIndex,data,offset);  } else {    offset=putInt16(0,data,offset);  }  if (offset != dataSize) {    throw new RuntimeException();  }  return data;}  }
class C{  @Override protected void doAction(){  try {    DOpenPkcs11KeyStore dOpenPkcs11KeyStore=new DOpenPkcs11KeyStore(frame);    dOpenPkcs11KeyStore.setLocationRelativeTo(frame);    dOpenPkcs11KeyStore.setVisible(true);    Provider selectedProvider=dOpenPkcs11KeyStore.getSelectedProvider();    if (selectedProvider == null) {      return;    }    KeyStore keyStore=KeyStore.getInstance(PKCS11.jce(),selectedProvider);    AuthProvider authProvider=(AuthProvider)selectedProvider;    authProvider.setCallbackHandler(new PasswordCallbackHandler(frame));    keyStore.load(null,null);    kseFrame.addKeyStore(keyStore,selectedProvider.getName(),null,selectedProvider);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void close() throws IOException {  br.close();}  }
class C{  private static boolean isRtlLocale(Locale locale){  return (TextUtilsCompat.getLayoutDirectionFromLocale(locale) == ViewCompat.LAYOUT_DIRECTION_RTL);}  }
class C{  public Workspace(Context context,BlocklyController controller,BlockFactory factory){  if (controller == null) {    throw new IllegalArgumentException("BlocklyController may not be null.");  }  mContext=context;  mController=controller;  mBlockFactory=factory;  mId=UUID.randomUUID().toString();}  }
class C{  public static Map<String,Double>[] translate(double[][] phi,Vocabulary vocabulary,int limit){  limit=Math.min(limit,phi[0].length);  Map<String,Double>[] result=new Map[phi.length];  for (int k=0; k < phi.length; k++) {    Map<Double,String> rankMap=new TreeMap<Double,String>(Collections.reverseOrder());    for (int i=0; i < phi[k].length; i++) {      rankMap.put(phi[k][i],vocabulary.getWord(i));    }    Iterator<Map.Entry<Double,String>> iterator=rankMap.entrySet().iterator();    result[k]=new LinkedHashMap<String,Double>();    for (int i=0; i < limit; ++i) {      Map.Entry<Double,String> entry=iterator.next();      result[k].put(entry.getValue(),entry.getKey());    }  }  return result;}  }
class C{  private void loadParameter(CompilerParameterReader parameterReader,HLEModuleFunction func,Class<?> parameterType,Annotation[] parameterAnnotations,Label afterSyscallLabel,Label catchSceKernelErrorException){  if (parameterType == Processor.class) {    loadProcessor();    parameterReader.incrementCurrentStackSize();  } else   if (parameterType == CpuState.class) {    loadCpu();    parameterReader.incrementCurrentStackSize();  } else   if (parameterType == int.class) {    parameterReader.loadNextInt();    parameterReader.incrementCurrentStackSize();  } else   if (parameterType == float.class) {    parameterReader.loadNextFloat();    parameterReader.incrementCurrentStackSize();  } else   if (parameterType == long.class) {    parameterReader.loadNextLong();    parameterReader.incrementCurrentStackSize(2);  } else   if (parameterType == boolean.class) {    parameterReader.loadNextInt();    parameterReader.incrementCurrentStackSize();  } else   if (parameterType == String.class) {    parameterReader.loadNextInt();    int maxLength=16 * 1024;    for (    Annotation parameterAnnotation : parameterAnnotations) {      if (parameterAnnotation instanceof StringInfo) {        StringInfo stringInfo=((StringInfo)parameterAnnotation);        maxLength=stringInfo.maxLength();        break;      }    }    loadImm(maxLength);    mv.visitMethodInsn(Opcodes.INVOKESTATIC,runtimeContextInternalName,"readStringNZ","(II)" + Type.getDescriptor(String.class));    parameterReader.incrementCurrentStackSize();  } else   if (parameterType == PspString.class) {    parameterReader.loadNextInt();    int maxLength=16 * 1024;    boolean canBeNull=false;    for (    Annotation parameterAnnotation : parameterAnnotations) {      if (parameterAnnotation instanceof StringInfo) {        StringInfo stringInfo=((StringInfo)parameterAnnotation);        maxLength=stringInfo.maxLength();      }      if (parameterAnnotation instanceof CanBeNull) {        canBeNull=true;      }    }    loadImm(maxLength);    loadImm(canBeNull);    mv.visitMethodInsn(Opcodes.INVOKESTATIC,runtimeContextInternalName,"readPspStringNZ","(IIZ)" + Type.getDescriptor(PspString.class));    parameterReader.incrementCurrentStackSize();  } else   if (parameterType == TPointer.class || parameterType == TPointer8.class || parameterType == TPointer16.class || parameterType == TPointer32.class || parameterType == TPointer64.class || parameterType == TErrorPointer32.class) {    mv.visitTypeInsn(Opcodes.NEW,Type.getInternalName(parameterType));    mv.visitInsn(Opcodes.DUP);    loadMemory();    parameterReader.loadNextInt();    boolean canBeNull=false;    for (    Annotation parameterAnnotation : parameterAnnotations) {      if (parameterAnnotation instanceof CanBeNull) {        canBeNull=true;        break;      }    }    if (checkMemoryAccess() && afterSyscallLabel != null) {      Label addressGood=new Label();      if (canBeNull) {        mv.visitInsn(Opcodes.DUP);        mv.visitJumpInsn(Opcodes.IFEQ,addressGood);      }      mv.visitInsn(Opcodes.DUP);      mv.visitMethodInsn(Opcodes.INVOKESTATIC,runtimeContextInternalName,"checkMemoryPointer","(I)Z");      mv.visitJumpInsn(Opcodes.IFNE,addressGood);      storeRegister(_v0,SceKernelErrors.ERROR_INVALID_POINTER);      parameterReader.popAllStack(4);      mv.visitJumpInsn(Opcodes.GOTO,afterSyscallLabel);      mv.visitLabel(addressGood);    }    if (parameterType == TPointer8.class || parameterType == TPointer16.class || parameterType == TPointer32.class || parameterType == TPointer64.class) {      loadImm(canBeNull);      mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(parameterType),"<init>","(" + memoryDescriptor + "IZ)V");    } else {      mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(parameterType),"<init>","(" + memoryDescriptor + "I)V");    }    if (parameterType == TErrorPointer32.class) {      parameterReader.setHasErrorPointer(true);      mv.visitInsn(Opcodes.DUP);      mv.visitVarInsn(Opcodes.ASTORE,LOCAL_ERROR_POINTER);    }    parameterReader.incrementCurrentStackSize();  } else   if (pspAbstractMemoryMappedStructure.class.isAssignableFrom(parameterType)) {    parameterReader.loadNextInt();    boolean canBeNull=false;    for (    Annotation parameterAnnotation : parameterAnnotations) {      if (parameterAnnotation instanceof CanBeNull) {        canBeNull=true;        break;      }    }    if (checkMemoryAccess() && afterSyscallLabel != null) {      Label addressGood=new Label();      if (canBeNull) {        mv.visitInsn(Opcodes.DUP);        mv.visitJumpInsn(Opcodes.IFEQ,addressGood);      }      mv.visitInsn(Opcodes.DUP);      mv.visitMethodInsn(Opcodes.INVOKESTATIC,runtimeContextInternalName,"checkMemoryPointer","(I)Z");      mv.visitJumpInsn(Opcodes.IFNE,addressGood);      storeRegister(_v0,SceKernelErrors.ERROR_INVALID_POINTER);      parameterReader.popAllStack(1);      mv.visitJumpInsn(Opcodes.GOTO,afterSyscallLabel);      mv.visitLabel(addressGood);    }    mv.visitTypeInsn(Opcodes.NEW,Type.getInternalName(parameterType));    mv.visitInsn(Opcodes.DUP);    mv.visitMethodInsn(Opcodes.INVOKESPECIAL,Type.getInternalName(parameterType),"<init>","()V");    mv.visitInsn(Opcodes.DUP_X1);    mv.visitInsn(Opcodes.SWAP);    loadMemory();    mv.visitInsn(Opcodes.SWAP);    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(parameterType),"read","(" + memoryDescriptor + "I)V");    parameterReader.incrementCurrentStackSize();  } else {    HLEUidClass hleUidClass=parameterType.getAnnotation(HLEUidClass.class);    if (hleUidClass != null) {      int errorValueOnNotFound=hleUidClass.errorValueOnNotFound();      mv.visitLdcInsn(parameterType.getName());      parameterReader.loadNextInt();      mv.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(HLEUidObjectMapping.class),"getObject","(" + Type.getDescriptor(String.class) + "I)"+ Type.getDescriptor(Object.class));      if (afterSyscallLabel != null) {        Label foundUid=new Label();        mv.visitInsn(Opcodes.DUP);        mv.visitJumpInsn(Opcodes.IFNONNULL,foundUid);        storeRegister(_v0,errorValueOnNotFound);        parameterReader.popAllStack(1);        mv.visitJumpInsn(Opcodes.GOTO,afterSyscallLabel);        mv.visitLabel(foundUid);      }      mv.visitTypeInsn(Opcodes.CHECKCAST,Type.getInternalName(parameterType));      parameterReader.incrementCurrentStackSize();    } else {      log.error(String.format("Unsupported sycall parameter type '%s'",parameterType.getName()));      Emulator.PauseEmuWithStatus(Emulator.EMU_STATUS_UNIMPLEMENTED);    }  }  Method methodToCheck=null;  if (afterSyscallLabel != null) {    for (    Annotation parameterAnnotation : parameterAnnotations) {      if (parameterAnnotation instanceof CheckArgument) {        CheckArgument checkArgument=(CheckArgument)parameterAnnotation;        try {          methodToCheck=func.getHLEModule().getClass().getMethod(checkArgument.value(),parameterType);        } catch (        Exception e) {          log.error(String.format("CheckArgument method '%s' not found in %s",checkArgument.value(),func.getModuleName()),e);        }        break;      }    }  }  if (methodToCheck != null) {    loadModule(func.getModuleName());    mv.visitInsn(Opcodes.SWAP);    Label tryStart=new Label();    Label tryEnd=new Label();    mv.visitTryCatchBlock(tryStart,tryEnd,catchSceKernelErrorException,Type.getInternalName(SceKernelErrorException.class));    mv.visitLabel(tryStart);    mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,Type.getInternalName(methodToCheck.getDeclaringClass()),methodToCheck.getName(),"(" + Type.getDescriptor(parameterType) + ")"+ Type.getDescriptor(parameterType));    mv.visitLabel(tryEnd);  }  parameterReader.incrementCurrentParameterIndex();}  }
class C{  @Override public Set<Statement> sum(final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> state,final Set<Statement> left,final Set<Statement> right){  final Set<Statement> tmp=new LinkedHashSet<Statement>(left);  tmp.addAll(right);  return tmp;}  }
class C{  @Nullable public static Pair<String,String> splitJarUrl(@NotNull String url){  int pivot=url.indexOf(JAR_SEPARATOR);  if (pivot < 0)   return null;  String resourcePath=url.substring(pivot + 2);  String jarPath=url.substring(0,pivot);  if (StringUtil.startsWithConcatenation(jarPath,JAR_PROTOCOL,":")) {    jarPath=jarPath.substring(JAR_PROTOCOL.length() + 1);  }  if (jarPath.startsWith(FILE_PROTOCOL)) {    jarPath=jarPath.substring(FILE_PROTOCOL.length());    if (jarPath.startsWith(SCHEME_SEPARATOR)) {      jarPath=jarPath.substring(SCHEME_SEPARATOR.length());    } else     if (StringUtil.startsWithChar(jarPath,':')) {      jarPath=jarPath.substring(1);    }  }  return Pair.create(jarPath,resourcePath);}  }
class C{  public Character previous(){  return previousChar();}  }
class C{  public static final CButton createDeleteButton(boolean withText){  if (withText)   return createDeleteButton(Msg.getMsg(Env.getCtx(),A_DELETE));  return createDeleteButton(null);}  }
class C{  public HyperLogLog(double rsd){  this(log2m(rsd));}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getPP_Product_BOM_ID() == 0 && getM_ChangeNotice_ID() == 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@NotFound@: @M_BOM_ID@ / @M_ChangeNotice_ID@"));    return false;  }  if (newRecord && getPP_Product_BOM_ID() != 0 && getM_ChangeNotice_ID() == 0) {    MPPProductBOM bom=MPPProductBOM.get(getCtx(),getPP_Product_BOM_ID());    if (bom.getM_ChangeNotice_ID() != 0) {      setM_ChangeNotice_ID(bom.getM_ChangeNotice_ID());    }  }  return true;}  }
class C{  public final boolean isInfoEnabled(){  return false;}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  @Override public void close(){  if (closed.getAndSet(true))   return;  for (  Map.Entry<ConnMethod,StatementHolder> entry : statementCache.entrySet()) {    StatementHolder value=entry.getValue();    statementCache.remove(entry.getKey(),value);    quietClose(value.value());  }}  }
class C{  public static <T>LazyPOrderedSetX<T> fromPublisher(Publisher<? extends T> publisher){  return fromStreamS(ReactiveSeq.fromPublisher((Publisher<T>)publisher));}  }
class C{  public static <T>T proxying(Consumer<Event> eventConsumer,Class<? extends T> iface){  checkNotNull(eventConsumer,"eventConsumer must not be null");  return iface.cast(Proxy.newProxyInstance(iface.getClassLoader(),new Class<?>[]{iface},new EventEmittingProxy<>(eventConsumer,EmitterInterfaceInfo.forInterface(iface).getEventMethodMapper())));}  }
class C{  public void addEntry(EntryEventImpl ev,boolean newCallbackInvoked){  this.putAllData[this.putAllDataSize]=new PutAllEntryData(ev);  this.putAllData[this.putAllDataSize].setCallbacksInvoked(newCallbackInvoked);  this.putAllDataSize+=1;}  }
class C{  ConcurrentSkipListMap.Node<K,V> hiNode(Comparator<? super K> cmp){  if (hi == null)   return m.findLast(); else   if (hiInclusive)   return m.findNear(hi,LT | EQ,cmp); else   return m.findNear(hi,LT,cmp);}  }
class C{  private static NetworkRoute computeNetworkRoute(Network network,TransitRoute transitRoute){  List<Id<Link>> routeLinkIds=new ArrayList<Id<Link>>();  double startOffset=Double.MAX_VALUE;  double endOffset=Double.MIN_VALUE;  TransitRouteStop start=null;  TransitRouteStop end=null;  for (  TransitRouteStop stop : transitRoute.getStops()) {    if (stop.getArrivalOffset() < startOffset) {      startOffset=stop.getArrivalOffset();      start=stop;    }    if (stop.getArrivalOffset() > endOffset) {      endOffset=stop.getArrivalOffset();      end=stop;    }  }  Id startLinkId=start.getStopFacility().getLinkId();  Id endLinkId=end.getStopFacility().getLinkId();  routeLinkIds.add(transitRoute.getRoute().getStartLinkId());  for (  Id linkId : transitRoute.getRoute().getLinkIds())   routeLinkIds.add(linkId);  routeLinkIds.add(transitRoute.getRoute().getEndLinkId());  int startIndex=routeLinkIds.indexOf(startLinkId);  int endIndex=routeLinkIds.indexOf(endLinkId);  for (int i=0; i < routeLinkIds.size(); i++) {    if (routeLinkIds.indexOf(routeLinkIds.get(i)) < startIndex)     routeLinkIds.remove(routeLinkIds.get(i));    if (routeLinkIds.indexOf(routeLinkIds.get(i)) > endIndex)     routeLinkIds.remove(routeLinkIds.get(i));  }  return RouteUtils.createNetworkRoute(routeLinkIds,network);}  }
class C{  private boolean checkPoints(double x1,double y1){  if (x1 < 0 || x1 > this.getSize().width || y1 < 0 || y1 > this.getSize().height) {    return false;  }  return true;}  }
class C{  Values(Values fromParent){  this.table=fromParent.table.clone();  this.mask=fromParent.mask;  this.size=fromParent.size;  this.tombstones=fromParent.tombstones;  this.maximumLoad=fromParent.maximumLoad;  this.clean=fromParent.clean;  inheritValues(fromParent);}  }
class C{  private static void expandFClear(Instruction s,IR ir){  int nSave=MIR_UnaryNoRes.getVal(s).asIntConstant().value;  int fpStackHeight=ir.MIRInfo.fpStackHeight;  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asIA32();  for (int i=nSave; i < fpStackHeight; i++) {    Register f=phys.getFPR(i);    s.insertBefore(MIR_Nullary.create(IA32_FFREE,D(f)));  }  s.remove();}  }
class C{  public void processLineRecord(ActionLocation where,LineRecord r){  int line=r.lineno;  String func=(where.function == null) ? null : where.function.name;  DebugModule dm=r.module;  int id=-1;  DModule module;  if (dm == null || where.at == -1)   ; else   if ((id=local2Global(dm.id)) < 0)   ; else   if ((module=m_manager.getSource(id,Isolate.DEFAULT_ID)) == null)   ; else   module.addLineFunctionInfo(where.actions.getOffset(where.at),line,func);}  }
class C{  public Cache(){  try {    init(101,0.75f);  } catch (  IllegalArgumentException ex) {    throw new Error("panic");  }}  }
class C{  public void launchCrawlJob(){  if (crawlJob.isLaunchable()) {    LOGGER.debug("crawljob is launchable");    launchHeritrixCrawlJob();synchronized (this) {      try {        this.wait();      } catch (      InterruptedException e) {      }      crawlJob.getJobContext().getApplicationListeners().remove(this);    }  }  cleanUpWriterResources(crawlJob.getJobContext());  crawlJob.terminate();  if (crawlJob.teardown()) {    closeCrawlerLogFiles();    if (!removeConfigFile(currentJobOutputDir)) {      LOGGER.warn("Configuration Heritrix files cannot be deleted");    }  } else {    LOGGER.warn("The crawljob is not teardowned");  }}  }
class C{  public static boolean hasKitkat(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;}  }
class C{  public MessageEvent(Object source){  super(source);}  }
class C{  public Builder withQuery(Query query){  request.query=Assert.notNull(query,"query");  return this;}  }
class C{  public void shutdown() throws Exception {  (new Thread(this,"CheckAnnotations")).start();}  }
class C{  public byte readByte(){  return buf[position++];}  }
class C{  public HotspotIntegerGenerator(int lowerBound,int upperBound,double hotsetFraction,double hotOpnFraction){  if (hotsetFraction < 0.0 || hotsetFraction > 1.0) {    System.err.println("Hotset fraction out of range. Setting to 0.0");    hotsetFraction=0.0;  }  if (hotOpnFraction < 0.0 || hotOpnFraction > 1.0) {    System.err.println("Hot operation fraction out of range. Setting to 0.0");    hotOpnFraction=0.0;  }  if (lowerBound > upperBound) {    System.err.println("Upper bound of Hotspot generator smaller than the lower bound. " + "Swapping the values.");    int temp=lowerBound;    lowerBound=upperBound;    upperBound=temp;  }  this.lowerBound=lowerBound;  this.upperBound=upperBound;  this.hotsetFraction=hotsetFraction;  int interval=upperBound - lowerBound + 1;  this.hotInterval=(int)(interval * hotsetFraction);  this.coldInterval=interval - hotInterval;  this.hotOpnFraction=hotOpnFraction;}  }
class C{  private double computeCosineDistance(BloomFilter<E> filter){  assert bitSetSize == filter.size() : "Different size bitsets in computeCosineDistance: " + bitSetSize + " and "+ filter.size();  double distance=0;  int maxLength=this.bitset.length();  BitSet otherBitSet=filter.getBitSet();  if (otherBitSet.length() > maxLength) {    maxLength=otherBitSet.length();  }  int countAND=this.bitset.andcardinality(filter.bitset);  int count1=this.bitset.cardinality();  int count2=filter.bitset.cardinality();  if (count1 > 0 || count2 > 0) {    distance=1.0 - countAND / (Math.sqrt(count1) * Math.sqrt(count2));  }  return distance;}  }
class C{  public Object object(){  if (m_DTMXRTreeFrag.getXPathContext() != null)   return new org.apache.xml.dtm.ref.DTMNodeIterator((DTMIterator)(new org.apache.xpath.NodeSetDTM(m_dtmRoot,m_DTMXRTreeFrag.getXPathContext().getDTMManager()))); else   return super.object();}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success)   insert_Accounting("M_Product_Category_Acct","C_AcctSchema_Default",null);  return success;}  }
class C{  public Property yearOfEra(){  return new Property(this,getChronology().yearOfEra());}  }
class C{  public void encode(GeoTimeSerie gts) throws IOException {  for (int i=0; i < gts.values; i++) {    addValue(gts.ticks[i],null != gts.locations ? gts.locations[i] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[i] : GeoTimeSerie.NO_ELEVATION,GTSHelper.valueAtIndex(gts,i));  }}  }
class C{  public static double[] matrixProduct(double[][] A,double[] v) throws Exception {  if (v.length != A[0].length) {    throw new Exception("Number of entries of v " + v.length + " does not match the number of columns of A "+ A[0].length);  }  double[] result=new double[A.length];  for (int r=0; r < result.length; r++) {    result[r]=0;    for (int c=0; c < v.length; c++) {      result[r]+=A[r][c] * v[c];    }  }  return result;}  }
class C{  private void handleCommit(TransactionServiceState existing){  if (existing.options.allowErrorsCauseAbort && !existing.failedLinks.isEmpty()) {    logWarning("Failed to commit: some transactional operations have failed. Aborting.");    selfPatch(ResolutionKind.ABORT);    return;  }  checkPotentialConflicts(existing);}  }
class C{  private void copyFormattingFiles(File resultsDir){  for (  String resultFileName : CTS_RESULT_RESOURCES) {    InputStream configStream=getClass().getResourceAsStream(String.format("/report/%s",resultFileName));    if (configStream != null) {      File resultFile=new File(resultsDir,resultFileName);      try {        FileUtil.writeToFile(configStream,resultFile);      } catch (      IOException e) {        Log.w(LOG_TAG,String.format("Failed to write %s to file",resultFileName));      }    } else {      Log.w(LOG_TAG,String.format("Failed to load %s from jar",resultFileName));    }  }}  }
class C{  public Builder timeToLive(int value){  timeToLive=value;  return this;}  }
class C{  public static EnvironmentClassLoader create(ClassLoader parent){  String id=null;  return create(parent,id);}  }
class C{  public void normalize(){  float magnitude=magnitude();  if (magnitude != 0) {    multiply((float)(1.0f / magnitude()));  }}  }
class C{  public void testConstructorSignBytesPositive7(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15,23,-101};  int aSign=1;  byte rBytes[]={0,-12,56,100,-2,-76,89,45,91,3,-15,23,-101};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public static byte[] hashToBytes(long datum,long seed){  long[] data={datum};  return toByteArray(hash(data,seed));}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getFile(stack).getParentFile();}  }
class C{  private String findParentFqcn(TypeElement typeElement,Set<TypeMirror> parents){  TypeMirror type;  while (true) {    type=typeElement.getSuperclass();    if (type.getKind() == TypeKind.NONE) {      return null;    }    typeElement=(TypeElement)((DeclaredType)type).asElement();    if (containsTypeMirror(parents,type)) {      String packageName=getPackageName(typeElement);      return packageName + "." + getClassName(typeElement,packageName);    }  }}  }
class C{  public static String Build(MusicTrack musicTrack,String patter){  String path="";  int pos=0;  while (patter.indexOf('{',pos) >= 0) {    int posStart=patter.indexOf('{',pos);    int posEnd=patter.indexOf('}',posStart);    int posEqual=patter.indexOf('=',posStart);    path+=patter.substring(pos,posStart);    if (posEnd >= 0) {      String name;      String value="";      if (posEqual >= 0 && posEqual < posEnd) {        name=patter.substring(posStart + 1,posEqual);      } else {        name=patter.substring(posStart + 1,posEnd);      }      name=name.trim().toLowerCase();switch (name) {case "album-artist":        if (!TextUtils.isEmpty(musicTrack.getAlbumArtist()))         value=musicTrack.getAlbumArtist();      break;case "album":    if (!TextUtils.isEmpty(musicTrack.getAlbum()))     value=musicTrack.getAlbum();  break;case "group":if (!TextUtils.isEmpty(musicTrack.getContainerName())) value=musicTrack.getContainerName();break;case "artist":if (!TextUtils.isEmpty(musicTrack.getArtist())) value=musicTrack.getArtist();break;case "title":if (!TextUtils.isEmpty(musicTrack.getTitle())) value=musicTrack.getTitle();break;case "disc":if (musicTrack.getDiscNumber() > 0) value=String.valueOf(musicTrack.getDiscNumber());break;case "no":if (musicTrack.getTrackNumber() > 0) value=String.valueOf(musicTrack.getTrackNumber());break;case "group-no":if (musicTrack.getContainerPosition() > 0) value=String.valueOf(musicTrack.getContainerPosition());break;case "year":if (!TextUtils.isEmpty(musicTrack.getYear())) value=musicTrack.getYear();break;case "genre":if (!TextUtils.isEmpty(musicTrack.getGenre())) value=musicTrack.getGenre();break;default :Logger.getInstance().logWarning("MusicPathBuilder","Unknown tag '" + name + "'");break;}if (posEqual >= 0 && posEqual < posEnd && !TextUtils.isEmpty(value)) {String format=patter.substring(posEqual + 1,posEnd);int posInsertStart=format.indexOf('$');if (posInsertStart >= 0) {int posInsertEnd=posInsertStart + 1;while (posInsertEnd < format.length() && format.charAt(posInsertEnd) == '$') {posInsertEnd++;}while (value.length() < posInsertEnd - posInsertStart) {value="0" + value;}value=format.substring(0,posInsertStart) + value + format.substring(posInsertEnd);} else {Logger.getInstance().logWarning("MusicPathBuilder","Cloud not find replace symbol ('$') of format attribute in tag '" + name + "'");}}path+=cleanFilename(value);pos=posEnd + 1;} else {path+="{";pos=posStart + 1;Logger.getInstance().logWarning("MusicPathBuilder","Cloud not find end symbol ('}') of the tag in patter '" + patter + "'");}}path+=patter.substring(pos,patter.length());while (path.contains("//")) path=path.replace("//","/");return path;}  }
class C{  protected void releasePlugin(ReplicatorPlugin plugin,PluginContext context){  ReplicatorRuntime.releasePlugin(plugin,context);}  }
class C{  public void monitorEnter(){  mv.visitInsn(Opcodes.MONITORENTER);}  }
class C{  public static void testConcurrentReadWrites(LongToInternalIntBiMap map,InternalIdMapTestHelper.KeyTestInfo keyTestInfo){  int numReaders=keyTestInfo.keys.length;  ExecutorService executor=Executors.newFixedThreadPool(numReaders + 1);  List<CountDownLatch> readerStartLatches=Lists.newArrayListWithCapacity(numReaders);  List<CountDownLatch> readerDoneLatches=Lists.newArrayListWithCapacity(numReaders);  List<LongToInternalIntBiMapReader> readers=Lists.newArrayListWithCapacity(numReaders);  for (  long key : keyTestInfo.keys) {    CountDownLatch startLatch=new CountDownLatch(1);    CountDownLatch doneLatch=new CountDownLatch(1);    LongToInternalIntBiMapReader mapReader=new LongToInternalIntBiMapReader(map,startLatch,doneLatch,key,0);    readers.add(mapReader);    executor.submit(mapReader);    readerStartLatches.add(startLatch);    readerDoneLatches.add(doneLatch);  }  for (int i=0; i < numReaders; i++) {    CountDownLatch startLatch=(i > 0) ? readerDoneLatches.get(i - 1) : new CountDownLatch(0);    CountDownLatch doneLatch=readerStartLatches.get(i);    List<Long> keyList=Lists.newArrayList();    keyList.add(keyTestInfo.keys[i]);    executor.submit(new LongToInternalIntBiMapWriter(map,new MapWriterInfo(keyList,startLatch,doneLatch)));  }  try {    readerDoneLatches.get(numReaders - 1).await();  } catch (  InterruptedException e) {    throw new RuntimeException("Execution for last reader was interrupted: ",e);  }  for (  LongToInternalIntBiMapReader reader : readers) {    int expectedValue=map.get(reader.key);    assertTrue(reader.getValue() == expectedValue);  }}  }
class C{  private Group findGroup(String tenantName,PrincipalId groupId) throws Exception {  Group candidate=null;  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ValidateUtil.validateNotNull(groupId,"Group name");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    IIdentityProvider provider=tenantInfo.findProviderADAsFallBack(groupId.getDomain());    ServerUtils.validateNotNullIdp(provider,tenantName,groupId.getDomain());    candidate=provider.findGroup(groupId);    if (candidate == null) {      logger.info(String.format("Failed to find group [%s@%s] in tenant [%s]",groupId.getName(),groupId.getDomain(),tenantName));      throw new InvalidPrincipalException(String.format("Group [%s] could not be found for tenant [%s]",groupId.getName(),tenantName),ServerUtils.getUpn(groupId));    }    return candidate;  } catch (  Exception ex) {    logger.error(String.format("Failed to find group [%s@%s] in tenant [%s]",groupId != null ? groupId.getName() : "null",groupId != null ? groupId.getDomain() : "null",tenantName));    throw ex;  }}  }
class C{  synchronized public void terminate(){  done=true;  try {    server.close();  } catch (  IOException unused) {  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementgetelementsbytagnamenomatch.class,args);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MESSAGE_TYPE:    return isSetMessageType();case SW_PORT_TUPLE:  return isSetSwPortTuple();case DATA:return isSetData();}throw new IllegalStateException();}  }
class C{  public List<ILineSegment> upperEndpointSegments(){  return upperSegments;}  }
class C{  private void startSpanTag(String style) throws IOException {  boolean callIndent=false;  if (inFontTag()) {    endSpanTag();    callIndent=true;  }  writeStartTag("<span style=\"" + style + "\">");  if (callIndent) {    indent();  }}  }
class C{  @Override protected Token<HtmlTokenType> produce() throws ParseException {  Token<HtmlTokenType> token=readToken();  if (token == null) {    return null;  }switch (token.type) {case TAGBEGIN:    state=State.IN_TAG;  break;case TAGEND:if (state == State.SAW_EQ && HtmlTokenType.TAGEND == token.type && !getTreatedAsXml()) {  pushbackToken(token);  state=State.IN_TAG;  return Token.instance("",HtmlTokenType.ATTRVALUE,FilePosition.startOf(token.pos));}state=State.OUTSIDE_TAG;break;case IGNORABLE:return produce();default :switch (state) {case OUTSIDE_TAG:if (HtmlTokenType.TEXT == token.type || HtmlTokenType.UNESCAPED == token.type) {token=collapseSubsequent(token);}break;case IN_TAG:if (HtmlTokenType.TEXT == token.type && !"=".equals(token.text)) {token=HtmlInputSplitter.reclassify(token,HtmlTokenType.ATTRNAME);state=State.SAW_NAME;}break;case SAW_NAME:if (HtmlTokenType.TEXT == token.type) {if ("=".equals(token.text)) {state=State.SAW_EQ;return produce();} else {token=HtmlInputSplitter.reclassify(token,HtmlTokenType.ATTRNAME);}} else {state=State.IN_TAG;}break;case SAW_EQ:if (HtmlTokenType.TEXT == token.type || HtmlTokenType.QSTRING == token.type) {if (HtmlTokenType.TEXT == token.type) {token=collapseAttributeName(token);}token=HtmlInputSplitter.reclassify(token,HtmlTokenType.ATTRVALUE);state=State.IN_TAG;}break;}break;}return token;}  }
class C{  public void show(){  animationController.show(getElement());}  }
class C{  private void checkReadOnly(){  if (readOnly) {    throw new UnsupportedOperationException("The configuration values can't be set once the store reader/writer have been initialized");  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.735 -0500",hash_original_method="AF711F2A0E7E526F8B6CE8D71F56AFBE",hash_generated_method="A19B60437C7CFB3800A4E1159AA166E4") private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  private void moveToAbout(){  Intent intent=new Intent(this,LocalWebActivity.class);  intent.putExtra(LocalWebActivity.EXTRA_HTML_URI,"html/about.html");  startActivity(intent);}  }
class C{  public void storeLocal(final int local){  storeInsn(getLocalType(local),local);}  }
class C{  public boolean hasFunction(FunctionInterface activeFunction){  return functions.contains(activeFunction);}  }
class C{  public FunctionDesc findFunctionOnCube(FunctionDesc manualFunc){  for (  MeasureDesc m : measures) {    if (m.getFunction().equals(manualFunc))     return m.getFunction();  }  return null;}  }
class C{  public void testConstructorBytesPositive1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public synchronized void notifyAll(AbstractCodeEvent event){  for (  ICodeListener l : listeners.getListeners(ICodeListener.class)) {    l.setCode(event);  }}  }
class C{  public static <T>SonarMethod<T> findMethodWithType(Class<?> clazz,Class<T> returnType,Class<?>... parameters){  ImmutableList<SonarMethod<T>> methods=findMethodsWithType(clazz,returnType,parameters);  StringBuilder builder;switch (methods.size()) {case 1:    return methods.get(0);case 0:  builder=new StringBuilder("Method in ");builder.append(clazz.getTypeName());builder.append(" not found with type: ");appendSignature(builder,returnType,parameters);default :builder=new StringBuilder("Multiple fields found in ");builder.append(clazz);builder.append(" with type ");appendSignature(builder,returnType,parameters);builder.append(": [");for (int i=0; i < methods.size(); i++) {SonarMethod<T> field=methods.get(i);builder.append(field);if (i + 1 < methods.size()) {builder.append(", ");}}builder.append("] ");}throw new IllegalArgumentException(builder.toString());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_FIELD_ACCESSOR__BODY:    return body != null;case N4JSPackage.N4_FIELD_ACCESSOR__LOK:  return _lok != null;case N4JSPackage.N4_FIELD_ACCESSOR__DECLARED_NAME:return declaredName != null;}return super.eIsSet(featureID);}  }
class C{  public int leftOpening(int begin){  for (int i=begin - firstZero; i > 0; --i) {    if (bits.get(i)) {      assert compatible(i + firstZero + 1,begin);      assert !compatible(i + firstZero,begin);      return i + firstZero + 1;    }  }  assert compatible(firstZero,begin);  return firstZero;}  }
class C{  private void sieveSingle(int limit,int start,int step){  while (start < limit) {    set(start);    start+=step;  }}  }
class C{  public boolean isPanXEnabled(){  return mPanXEnabled;}  }
class C{  public static Settings init(String tag){  printer=new LoggerPrinter();  return printer.init(tag);}  }
class C{  public CResumeThreadAction(final TargetProcessThread thread){  super("Resume");  m_thread=thread;}  }
class C{  public Intent execute(Context context){  String[] titles=new String[]{"Series 1","Series 2","Series 3","Series 4","Series 5"};  List<double[]> x=new ArrayList<double[]>();  List<double[]> values=new ArrayList<double[]>();  int count=20;  int length=titles.length;  Random r=new Random();  for (int i=0; i < length; i++) {    double[] xValues=new double[count];    double[] yValues=new double[count];    for (int k=0; k < count; k++) {      xValues[k]=k + r.nextInt() % 10;      yValues[k]=k * 2 + r.nextInt() % 10;    }    x.add(xValues);    values.add(yValues);  }  int[] colors=new int[]{Color.BLUE,Color.CYAN,Color.MAGENTA,Color.LTGRAY,Color.GREEN};  PointStyle[] styles=new PointStyle[]{PointStyle.X,PointStyle.DIAMOND,PointStyle.TRIANGLE,PointStyle.SQUARE,PointStyle.CIRCLE};  XYMultipleSeriesRenderer renderer=buildRenderer(colors,styles);  setChartSettings(renderer,"Scatter chart","X","Y",-10,30,-10,51,Color.GRAY,Color.LTGRAY);  renderer.setXLabels(10);  renderer.setYLabels(10);  length=renderer.getSeriesRendererCount();  for (int i=0; i < length; i++) {    ((XYSeriesRenderer)renderer.getSeriesRendererAt(i)).setFillPoints(true);  }  return ChartFactory.getScatterChartIntent(context,buildDataset(titles,x,values),renderer);}  }
class C{  public void writeMessage(final int fieldNumber,final MessageNano value) throws IOException {  writeTag(fieldNumber,WireFormatNano.WIRETYPE_LENGTH_DELIMITED);  writeMessageNoTag(value);}  }
class C{  public static <V>Matcher<BindingSet> binds(String name,V value){  return new BindsMatcher<V>(name,equalTo(value));}  }
class C{  protected void connectionWarn(){}  }
class C{  void relaxNodeLogic(final Link l,final RouterPriorityQueue<Node> pendingNodes,final double currTime,final double currCost){  addToPendingNodes(l,l.getToNode(),pendingNodes,currTime,currCost);}  }
class C{  public BaseDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,DateTimeZone zone){  this(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,ISOChronology.getInstance(zone));}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private static boolean isElementNode(Node node){  return node.getNodeType() == Node.ELEMENT_NODE;}  }
class C{  public void loadPreferredExtensions(){  String errors="";  try {    String filePath=prefs.getString(SettingsActivity.extKeys[0],null);    if (filePath != null) {      log.info("Load ext. conversions: " + filePath);      Uri uri=Uri.parse(filePath);      InputStream inStr=getContentResolver().openInputStream(uri);      EcuDataItems.cnv.loadFromStream(inStr);    }  } catch (  Exception e) {    log.error("Load ext. conversions: ",e);    e.printStackTrace();    errors+=e.getLocalizedMessage() + "\n";  }  try {    String filePath=prefs.getString(SettingsActivity.extKeys[1],null);    if (filePath != null) {      log.info("Load ext. conversions: " + filePath);      Uri uri=Uri.parse(filePath);      InputStream inStr=getContentResolver().openInputStream(uri);      ObdProt.dataItems.loadFromStream(inStr);    }  } catch (  Exception e) {    log.error("Load ext. PIDs: ",e);    e.printStackTrace();    errors+=e.getLocalizedMessage() + "\n";  }  if (errors.length() != 0) {    dlgBuilder.setIcon(android.R.drawable.ic_dialog_alert).setTitle(R.string.extension_loading).setMessage(getString(R.string.check_cust_settings) + errors).show();  }}  }
class C{  public static void shuffle(int[] array){synchronized (random) {    random.shuffle(array);  }}  }
class C{  public void cycleBuffers(){  FrameBuffer first=fbos[0];  for (int i=0; i < fbos.length - 1; i++) {    fbos[i]=fbos[i + 1];  }  fbos[fbos.length - 1]=first;}  }
class C{  public InternalAggregations(List<InternalAggregation> aggregations){  this.aggregations=aggregations;}  }
class C{  public void testGetCodebasePathWithKnownFile() throws CodebaseCreationError, IOException, CommandException {  String filePath="/foo/bar.tar";  File fileFolder=new File(filePath);  expect(mockfs.exists(EasyMock.eq(fileFolder))).andReturn(true);  expect(mockfs.isDirectory(EasyMock.eq(fileFolder))).andReturn(false);  expect(mockfs.isFile(EasyMock.eq(fileFolder))).andReturn(true);  expect(mockfs.getTemporaryDirectory(EasyMock.<String>anyObject())).andReturn(new File("sth"));  mockfs.makeDirs(EasyMock.<File>anyObject());  EasyMock.expectLastCall().atLeastOnce();  expect(mockcmd.runCommand(EasyMock.<String>anyObject(),EasyMock.<List<String>>anyObject(),EasyMock.<String>anyObject())).andReturn(null);  EasyMock.replay(mockcmd);  control.replay();  File codebasePath=creator.getCodebasePath(fileFolder);  control.verify();  assertNotNull(codebasePath);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.DOCLET__LINE_TAGS:    return lineTags != null && !lineTags.isEmpty();}return super.eIsSet(featureID);}  }
class C{  protected void write(DataOutput dataOutput,byte[] row) throws IOException {  boolean b=row != null;  dataOutput.writeBoolean(b);  if (b) {    dataOutput.writeInt(row.length);    dataOutput.write(row);  }}  }
class C{  public XUnresolvedVariable(ElemVariable obj,int sourceNode,TransformerImpl transformer,int varStackPos,int varStackContext,boolean isGlobal){  super(obj);  m_context=sourceNode;  m_transformer=transformer;  m_varStackPos=varStackPos;  m_varStackContext=varStackContext;  m_isGlobal=isGlobal;}  }
class C{  public LomaxDistribution(Random seed,double shape,double location,double shift){  super(seed,shape,location);  if (shift > location) {    throw new IllegalArgumentException("Shift must be smaller or equal than location");  }  this.shift=shift;}  }
class C{  public boolean containsDashDash(){  return buffer.indexOf("--") != -1;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:58.772 -0500",hash_original_method="89F67FF5AFAE8FAD9F556239F3E27159",hash_generated_method="805FDE0EC1A77B26DA5992514EDF2DAB") private Message obtainCompleteMessage(){  return obtainCompleteMessage(EVENT_OPERATION_COMPLETE);}  }
class C{  @ObjectiveCName("changeNotificationVibrationEnabledWithValue:") public void changeNotificationVibrationEnabled(boolean val){  modules.getSettingsModule().changeNotificationVibrationEnabled(val);}  }
class C{  private boolean greater(int i,int j){  return keys[pq[i]].compareTo(keys[pq[j]]) > 0;}  }
class C{  public Collection<? extends ImmutableClassType> removeInstrumentationPoints(final Collection<? extends ImmutableType> types){  return removeInstrumentationPoints(types,Collections.<IInstrumentationApplier>singleton(RemoveAllInstrumentationApplier.getInstance()));}  }
class C{  public FaceletsAttachedObjectHandler(TagConfig config){  super(config);}  }
class C{  protected JPopupMenu buildPopupMenu(){  JPopupMenu ret=super.buildPopupMenu();  ret.addSeparator();  String producerDescription=component.getProducingColumnType().getDescription("Column " + getSelectedColumn());  PotentialProducer producer=component.getAttributeManager().createPotentialProducer(component.getObjectFromKey("producerList:" + getSelectedColumn()),component.getProducingColumnType());  producer.setCustomDescription(producerDescription);  JMenu producerMenu=new CouplingMenuProducer("Send coupling to",component.getWorkspace(),producer);  ret.add(producerMenu);  String consumerDescription=component.getConsumingColumnType().getDescription("Column " + getSelectedColumn());  PotentialConsumer consumer=component.getAttributeManager().createPotentialConsumer(component.getObjectFromKey("consumerList:" + getSelectedColumn()),component.getConsumingColumnType());  consumer.setCustomDescription(consumerDescription);  JMenu consumerMenu=new CouplingMenuConsumer("Receive coupling from",component.getWorkspace(),consumer);  ret.add(consumerMenu);  return ret;}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public BooleanColumn(){  this(0,10,false);}  }
class C{  public Component findFirstFocusable(){  int size=getComponentCount();  for (int iter=0; iter < size; iter++) {    Component current=getComponentAt(iter);    if (current.isVisible()) {      if (current.isFocusable()) {        return current;      }      if (current instanceof Container && !((Container)current).isBlockFocus() && ((Container)current).getLeadComponent() == null) {        Component cmp=((Container)current).findFirstFocusable();        if (cmp != null) {          return cmp;        }      }    }  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ZoomToFitControl(int button){  this.m_button=button;}  }
class C{  private BigdataRDFFactory(){  super(new ValueFactoryImpl(),GRAPH_NAMESPACE,VERTEX_NAMESPACE,EDGE_NAMESPACE,RDF.TYPE,VERTEX,EDGE,RDFS.LABEL);}  }
class C{  public StrokeIcon(Stroke stroke){  this.stroke=stroke;}  }
class C{  @Override public Instance generateExample() throws Exception {  Instance result;  Random rand;  double x;  double y;  double[] atts;  result=null;  rand=getRandom();  if (m_DatasetFormat == null) {    throw new Exception("Dataset format not defined.");  }  atts=new double[m_DatasetFormat.numAttributes()];  x=rand.nextDouble();  x=x * (getMaxRange() - getMinRange()) + getMinRange();  if (Utils.eq(x,0)) {    y=getAmplitude();  } else {    y=getAmplitude() * StrictMath.sin(StrictMath.abs(x)) / StrictMath.abs(x);  }  y=y + getAmplitude() * m_NoiseRandom.nextGaussian() * getNoiseRate()* getNoiseVariance();  atts[0]=x;  atts[1]=y;  result=new DenseInstance(1.0,atts);  result.setDataset(m_DatasetFormat);  return result;}  }
class C{  public String[] retrieveTagsFromAwesomplete(){  final String requestUrl=this.mShaarliUrl + "?post=";  String[] tags={};  try {    String tagsString=this.createShaarliConnection(requestUrl,false).execute().parse().body().select("input[name=lf_tags]").first().attr("data-list");    tags=tagsString.split(", ");  } catch (  Exception e) {    this.mLastError=e;  }  return tags;}  }
class C{  public boolean isUseReferenceDirectly(){  return useRef;}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  initCore("solr/crazy-path-to-config.xml","solr/crazy-path-to-schema.xml");}  }
class C{  JsonNode orderJob(CrowdJob job,Vector<String> channels,int units,int payPerAssigment){  Log LOG=LogFactory.getLog(getClass());  RestTemplate restTemplate=new RestTemplate();  restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());  restTemplate.getMessageConverters().add(new FormHttpMessageConverter());  MultiValueMap<String,String> argumentMap=new LinkedMultiValueMap<String,String>();  argumentMap.add(debitKey,String.valueOf(units));  for (  String channel : channels) {    argumentMap.add(channelKey + "[]",channel);  }  updateVariable(job,jobPaymentKey,String.valueOf(payPerAssigment));  LOG.info("Order Job: #" + job.getId() + " with "+ units+ " judgments for "+ payPerAssigment+ " cents (dollar) per assigment.");  JsonNode result=restTemplate.postForObject(orderJobURL,argumentMap,JsonNode.class,job.getId(),apiKey);  return result;}  }
class C{  public RESTResponse(HttpURLConnection connection) throws IOException {  responseCode=connection.getResponseCode();  token=connection.getHeaderField("X-Subject-Token");  BufferedReader in=new BufferedReader(new InputStreamReader(connection.getInputStream()));  StringBuilder sb=new StringBuilder();  try {    String line;    while ((line=in.readLine()) != null) {      if (line.trim().length() > 1) {        sb.append(line);      }    }  }  finally {    in.close();  }  responseBody=sb.toString();}  }
class C{  public void addSelectionChangedListener(SelectionChangedListener l){  table.addSelectionChangedListener(l);}  }
class C{  private static void flushRefs(){  java.util.Vector chain=new java.util.Vector();  try {    while (true) {      int[] hungry=new int[65536];      chain.addElement(hungry);    }  } catch (  OutOfMemoryError e) {  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (interface_1: ");  result.append(interface_1);  result.append(", name_1: ");  result.append(name_1);  result.append(')');  return result.toString();}  }
class C{  private static String normalizeIntegerValue(String integer,String minValue,String maxValue){  integer=collapseWhiteSpace(integer);  int intLength=integer.length();  if (intLength == 0) {    throwIAE("Not a legal integer: " + integer);  }  int idx=0;  boolean isNegative=false;  if (integer.charAt(idx) == '-') {    isNegative=true;    idx++;  } else   if (integer.charAt(idx) == '+') {    idx++;  }  if (idx == intLength) {    throwIAE("Not a legal integer: " + integer);  }  if (integer.charAt(idx) == '0' && idx < intLength - 1) {    idx++;    while (idx < intLength - 1 && integer.charAt(idx) == '0') {      idx++;    }  }  String norm=integer.substring(idx);  for (int i=0; i < norm.length(); i++) {    if (!isDigit(norm.charAt(i))) {      throwIAE("Not a legal integer: " + integer);    }  }  if (isNegative && norm.charAt(0) != '0') {    norm="-" + norm;  }  if (minValue != null) {    if (compareCanonicalIntegers(norm,minValue) < 0) {      throwIAE("Value smaller than minimum value");    }  }  if (maxValue != null) {    if (compareCanonicalIntegers(norm,maxValue) > 0) {      throwIAE("Value larger than maximum value");    }  }  return norm;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesUpdater == null) {    throw new NullPointerException();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double centreVal;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int k=0;  int kMinusOne=0;  int p=0;  double aLargeValue=Float.MAX_VALUE;  double currentNearestVal;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      k=Integer.parseInt(args[i]);    } else     if (i == 6) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (k < 3 || k > filterSizeX * filterSizeY) {    showFeedback("The k-value of the k-nearest mean filter is set inappropriately.");  }  kMinusOne--;  double[] nearestVals=new double[k];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    double[][] absDiffVals=new double[2][numPixelsInFilter];    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreVal=inputFile.getValue(row,col);        if (centreVal != noData) {          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              absDiffVals[0][a]=(z - centreVal) * (z - centreVal);              absDiffVals[1][a]=z;            } else {              absDiffVals[0][a]=noData;            }          }          n=0;          sum=0;          for (int m=0; m < k; m++) {            p=-1;            currentNearestVal=aLargeValue;            for (a=0; a < numPixelsInFilter; a++) {              if (absDiffVals[0][a] != noData && absDiffVals[0][a] < currentNearestVal) {                p=a;                currentNearestVal=absDiffVals[0][a];              }            }            if (p >= 0) {              n++;              sum+=absDiffVals[1][p];              absDiffVals[0][p]=noData;            }          }          if (n == k) {            outputFile.setValue(row,col,sum / n);          } else {            outputFile.setValue(row,col,centreVal);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private VmaxVolumeToExportMaskApplicatorContext createVmaxNativeApplicatorContext(Workflow workflow,ExportGroup exportGroup,StorageSystem storage,Map<URI,ExportMaskPolicy> policyCache,boolean zoningStepNeeded,String token,InitiatorHelper initiatorHelper,Map<String,Set<URI>> initiatorToExportMaskPlacementMap,List<URI> initiatorURIsCopy,Set<URI> partialMasks,Map<URI,Integer> volumeMap,Set<URI> initiatorsForNewExport,Map<URI,Map<URI,Integer>> masksToUpdateWithVolumes,Map<URI,Set<Initiator>> masksToUpdateWithInitiators,String previousStep){  VmaxVolumeToExportMaskApplicatorContext context=new VmaxVolumeToExportMaskApplicatorContext();  context.exportGroup=exportGroup;  context.storage=storage;  context.workflow=workflow;  context.zoningStepNeeded=zoningStepNeeded;  context.initiatorURIsCopy=initiatorURIsCopy;  context.initiatorsForNewExport=initiatorsForNewExport;  context.partialMasks=partialMasks;  context.token=token;  context.exportMaskURIToPolicy=policyCache;  context.masksToUpdateWithVolumes=masksToUpdateWithVolumes;  context.masksToUpdateWithInitiators=masksToUpdateWithInitiators;  context.initiatorHelper=initiatorHelper;  context.volumeMap=volumeMap;  context.initiatorToExportMaskPlacementMap=initiatorToExportMaskPlacementMap;  context.previousStep=previousStep;  return context;}  }
class C{  public int registerHandler(GitRebaseEditorHandler handler){  addInternalHandler();  Integer rc=null;synchronized (myHandlersLock) {    for (int i=Integer.MAX_VALUE; i > 0; i--) {      int code=Math.abs(oursRandom.nextInt());      if (code > 0 && !myHandlers.containsKey(code)) {        rc=code;        break;      }    }    if (rc == null) {      throw new IllegalStateException("There is a problem with random number allocation");    }    myHandlers.put(rc,handler);  }  return rc;}  }
class C{  public RopMethod withRegisterOffset(int delta){  RopMethod result=new RopMethod(blocks.withRegisterOffset(delta),firstLabel);  if (exitPredecessors != null) {    result.exitPredecessors=exitPredecessors;    result.predecessors=predecessors;  }  return result;}  }
class C{  public Vector2f subtract(Vector2f vec,Vector2f store){  if (store == null)   store=new Vector2f();  store.x=x - vec.x;  store.y=y - vec.y;  return store;}  }
class C{  public Matrix4 trn(float x,float y,float z){  val[M03]+=x;  val[M13]+=y;  val[M23]+=z;  return this;}  }
class C{  public World(File file,int maxMoves) throws FileNotFoundException, IOException {  this(new FileReader(file),maxMoves);}  }
class C{  public static List<IFlowgraphView> loadFlowgraphs(final SQLProvider provider,final INaviProject project,final CTagManager viewTagManager,final CTagManager nodeTagManager) throws CouldntLoadDataException {  checkArguments(provider,project,viewTagManager);  final CConnection connection=provider.getConnection();  final String query=" SELECT * FROM load_project_flow_graphs(?, ?) ";  try {    final PreparedStatement statement=connection.getConnection().prepareStatement(query);    statement.setInt(1,project.getConfiguration().getId());    statement.setObject(2,"non-native",Types.OTHER);    final ResultSet resultSet=statement.executeQuery();    final Map<Integer,Set<CTag>> tags=loadTags(connection,project,viewTagManager);    return new ArrayList<IFlowgraphView>(processQueryResults(resultSet,project,tags,nodeTagManager,provider,new ArrayList<CView>(),ViewType.NonNative,GraphType.FLOWGRAPH));  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  ClusterNode pickWeightedNode(){  int weight=RAND.nextInt(totalWeight) + 1;  SortedMap<Integer,ClusterNode> pick=circle.tailMap(weight);  assert !pick.isEmpty();  return pick.get(pick.firstKey());}  }
class C{  public void write(int b) throws IOException {  oneByte[0]=(byte)b;  if (bufferedBlockCipher != null) {    int len=bufferedBlockCipher.processBytes(oneByte,0,1,buf,0);    if (len != 0) {      out.write(buf,0,len);    }  } else {    out.write(streamCipher.returnByte((byte)b));  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(this.key.getSolrFieldName());  sb.append(AbstractSolrConnector.CATCHALL_DTERM);  return sb.toString();}  }
class C{  protected byte readByteProtected(DataInputStream istream) throws java.io.IOException {  while (true) {    int nchars;    nchars=istream.read(rcvBuffer,0,1);    if (nchars > 0) {      return rcvBuffer[0];    }  }}  }
class C{  public static void main(String[] args){  weka.core.logging.Logger.log(weka.core.logging.Logger.Level.INFO,"Logging started");  try {    if (args.length < 2) {      createNewVisualizerWindow(null,null);    } else {      String[] argsR=null;      if (args.length > 2) {        argsR=new String[args.length - 2];        for (int j=2; j < args.length; j++) {          argsR[j - 2]=args[j];        }      }      Classifier c=AbstractClassifier.forName(args[1],argsR);      System.err.println("Loading instances from : " + args[0]);      java.io.Reader r=new java.io.BufferedReader(new java.io.FileReader(args[0]));      Instances i=new Instances(r);      createNewVisualizerWindow(c,i);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 2)   reportWrongNumberArgs();}  }
class C{  private void parseArguments(final String[] args){  if (args.length == 0) {    System.out.println("Too few arguments.");    printUsage();    System.exit(1);  }  Iterator<String> argIter=new ArgumentParser(args).iterator();  String arg=argIter.next();  if (arg.equals("-h") || arg.equals("--help")) {    printUsage();    System.exit(0);  } else {    this.configfile=arg;    this.plansfile=argIter.next();    if (argIter.hasNext()) {      System.out.println("Too many arguments.");      printUsage();      System.exit(1);    }  }}  }
class C{  public Plip(){  this(1);}  }
class C{  protected void readAffixFile(BufferedReader aReader){  try {    String line;    while ((line=aReader.readLine()) != null) {      if (line.startsWith(PREFIX_KEY) || line.startsWith(SUFFIX_KEY)) {        parseAffix(line,aReader);      }    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public Matrix4x3f rotateZ(float ang){  return rotateZ(ang,this);}  }
class C{  public IptcReader(InputStream jpegInputStream) throws JpegProcessingException {  this(new JpegSegmentReader(jpegInputStream).readSegment(JpegSegmentReader.SEGMENT_APPD));}  }
class C{  private void rebuildTable(){  table.saveSelection(folderColIdx);  final Vector<Vector<Object>> data=new Vector<>();  final InstExtModConfsBean instExtModConfsBean=LEnv.LAUNCHER_SETTINGS.get(LSettings.INST_EXT_MOD_CONFS);  for (  final ExtModManifestBean mf : InstExtModsUtil.detectInstalledExtMods()) {    final InstExtModConfBean conf=instExtModConfsBean.getModuleConfForFolder(mf.getFolder());    final StringBuilder authorsBuilder=new StringBuilder();    for (    final PersonBean author : mf.getAuthorList()) {      if (authorsBuilder.length() > 0)       authorsBuilder.append(", ");      authorsBuilder.append(LEnv.LANG.formatPersonName(author.getPersonName()));    }    data.add(LUtils.vector(mf.getFolder(),mf,mf.getIcon(),mf.getName(),conf == null ? Boolean.FALSE : conf.getEnabled(),mf.getVersion(),LEnv.LANG.formatDate(mf.getBuildInfo().getDate()),authorsBuilder.toString(),LUtils.tryMakingUrl(mf.getHomePage()),mf.getShortDesc()));  }  table.getXTableModel().setDataVector(data,LUtils.vector("Folder","ExtModManifestBean","I","Name","Enabled?","Version","Release date","Author","Home page","Short description"));  folderColIdx=0;  manifestBeanColIdx=1;  final int enabledColIdx=4;  final int versionColIdx=5;  final int dateColIdx=6;  table.getXTableRowSorter().setColumnDefaultDescs(true,enabledColIdx,versionColIdx,dateColIdx);  table.getColumnModel().removeColumn(table.getColumnModel().getColumn(manifestBeanColIdx));  table.getColumnModel().removeColumn(table.getColumnModel().getColumn(folderColIdx));  table.packColumnsExceptLast();  table.restoreSelection(folderColIdx);}  }
class C{  public AccentedAtom(Atom base,String accentName) throws InvalidSymbolTypeException, SymbolNotFoundException {  accent=SymbolAtom.get(accentName);  if (accent.type == TeXConstants.TYPE_ACCENT) {    this.base=base;    if (base instanceof AccentedAtom)     underbase=((AccentedAtom)base).underbase; else     underbase=base;  } else   throw new InvalidSymbolTypeException("The symbol with the name '" + accentName + "' is not defined as an accent ("+ TeXSymbolParser.TYPE_ATTR+ "='acc') in '"+ TeXSymbolParser.RESOURCE_NAME+ "'!");}  }
class C{  @Override public RegularTimePeriod previous(){  Day result;  int serial=this.serialDate.toSerial();  if (serial > SerialDate.SERIAL_LOWER_BOUND) {    SerialDate yesterday=SerialDate.createInstance(serial - 1);    return new Day(yesterday);  } else {    result=null;  }  return result;}  }
class C{  public boolean valid(){  return XTraceSettings.discoveryMode() || XTraceBaggageInterface.hasTaskID();}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public boolean backHistory(){  if (super.canGoBack()) {    super.goBack();    return true;  }  return false;}  }
class C{  public static final String rgbToHex(float r,float g,float b){  String hex=Integer.toHexString((int)(MathUtils.clip(r,0,1) * 0xff)) + Integer.toHexString((int)(MathUtils.clip(g,0,1) * 0xff)) + Integer.toHexString((int)(MathUtils.clip(b,0,1) * 0xff));  return hex;}  }
class C{  private void restartExecutor(int startFrom){  Intent intent=new Intent();  intent.setClass(this,LayoutTestsExecutor.class);  intent.setAction(Intent.ACTION_RUN);  if (startFrom < mTotalTestCount) {    File testListFile=new File(getExternalFilesDir(null),"test_list.txt");    FsUtils.saveTestListToStorage(testListFile,startFrom,mTestsList);    intent.putExtra(LayoutTestsExecutor.EXTRA_TESTS_FILE,testListFile.getAbsolutePath());    intent.putExtra(LayoutTestsExecutor.EXTRA_TEST_INDEX,startFrom);  } else {    intent.putExtra(LayoutTestsExecutor.EXTRA_TESTS_FILE,"");  }  startActivity(intent);}  }
class C{  protected boolean doClose(){  return true;}  }
class C{  @DSComment("Accessing App Resource") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:56.598 -0500",hash_original_method="D0D8D8B431D77A14F0DBD9F876D36006",hash_generated_method="FB44EDEB4A97D53F1E4B44FF2793ABA6") public Drawable loadIcon(PackageManager pm){  Drawable dr;  if (resolvePackageName != null && icon != 0) {    dr=pm.getDrawable(resolvePackageName,icon,null);    if (dr != null) {      return dr;    }  }  ComponentInfo ci=activityInfo != null ? activityInfo : serviceInfo;  ApplicationInfo ai=ci.applicationInfo;  if (icon != 0) {    dr=pm.getDrawable(ci.packageName,icon,ai);    if (dr != null) {      return dr;    }  }  return ci.loadIcon(pm);}  }
class C{  public VirtualMachine attach(Map<String,? extends Connector.Argument> args) throws IOException, IllegalConnectorArgumentsException {  String address=argument(ARG_ADDRESS,args).value();  return attach(address,args);}  }
class C{  private static void iterableToString(final StringBuilder sb,final Iterable<?> iterable,final String prefix){  final Iterator<?> it=iterable.iterator();  sb.append(LS).append(prefix).append("{");  while (it.hasNext()) {    sb.append(LS).append(prefix).append(" ");    final Object obj=it.next();    if (obj == null) {      sb.append("null");      continue;    }    final Class<?> clazz=obj.getClass();    if (toStringDeclared(clazz)) {      sb.append(prefix);      sb.append(obj.toString());      continue;    }    toString(obj,sb,prefix + "  ");  }  sb.append(LS).append(prefix).append("}");}  }
class C{  public void testGetF18(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF18();  assertEquals(expResult,result);}  }
class C{  public Env(JCTree tree,A info){  this.next=null;  this.outer=null;  this.tree=tree;  this.toplevel=null;  this.enclClass=null;  this.enclMethod=null;  this.info=info;}  }
class C{  public boolean isInstalled(PTQuery query){  return installedQueries.containsKey(query);}  }
class C{  public static Map addOrderItemShipGroupAssoc(DispatchContext dctx,Map<String,Object> context) throws GenericEntityException {  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String orderId=(String)context.get("orderId");  String orderItemSeqId=(String)context.get("orderItemSeqId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  BigDecimal quantity=(BigDecimal)context.get("quantity");  String mainErrorMessage=UtilProperties.getMessage(resource_error,"OrderUnableToAddItemToOISG",locale);  GenericValue orderItem=EntityQuery.use(delegator).from("OrderItem").where("orderId",orderId,"orderItemSeqId",orderItemSeqId).queryOne();  if (orderItem == null) {    String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderErrorOrderItemNotFound",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItemSeqId),locale);    return ServiceUtil.returnError(errMsg);  }  String statusId=orderItem.getString("statusId");  if ("ITEM_CREATED".equals(statusId) || "ITEM_APPROVED".equals(statusId)) {    if ("new".equals(shipGroupSeqId)) {      try {        Map<String,Object> addOrderItemShipGroupMap=dctx.makeValidContext("addOrderItemShipGroup","IN",context);        addOrderItemShipGroupMap.remove("shipGroupSeqId");        List<GenericValue> oisgas=orderItem.getRelated("OrderItemShipGroupAssoc",null,null,false);        if (UtilValidate.isNotEmpty(oisgas)) {          GenericValue oisga=EntityUtil.getFirst(oisgas);          GenericValue oisg=oisga.getRelatedOne("OrderItemShipGroup",false);          if (UtilValidate.isNotEmpty(oisg)) {            addOrderItemShipGroupMap.put("shipmentMethodTypeId",oisg.get("shipmentMethodTypeId"));            addOrderItemShipGroupMap.put("carrierPartyId",oisg.get("carrierPartyId"));            addOrderItemShipGroupMap.put("carrierRoleTypeId",oisg.get("carrierRoleTypeId"));            addOrderItemShipGroupMap.put("contactMechId",oisg.get("contactMechId"));          }        }        Map<String,Object> result=null;        result=dispatcher.runSync("addOrderItemShipGroup",addOrderItemShipGroupMap);        if (result.containsKey("shipGroupSeqId")) {          shipGroupSeqId=(String)result.get("shipGroupSeqId");        }      } catch (      GenericServiceException e) {        String errMsg=UtilProperties.getMessage(resource,mainErrorMessage,locale);        return ServiceUtil.returnError(errMsg);      }    }    GenericValue orderItemShipGroup=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId,"shipGroupSeqId",shipGroupSeqId).queryOne();    if (UtilValidate.isEmpty(orderItemShipGroup)) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderCartShipGroupNotFound",UtilMisc.toMap("groupIndex",shipGroupSeqId),locale);      return ServiceUtil.returnError(errMsg);    }    if (quantity == null || quantity.compareTo(BigDecimal.ZERO) == -1) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderQuantityAssociatedCannotBeNullOrNegative",locale);      return ServiceUtil.returnError(errMsg);    }    GenericValue oisgAssoc=EntityQuery.use(delegator).from("OrderItemShipGroupAssoc").where("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId).queryOne();    if (UtilValidate.isNotEmpty(oisgAssoc)) {      String errMsg=mainErrorMessage + UtilProperties.getMessage(resource_error,"OrderErrorOrderItemAlreadyRelatedToShipGroup",locale);      return ServiceUtil.returnError(errMsg);    }    oisgAssoc=delegator.makeValue("OrderItemShipGroupAssoc",UtilMisc.toMap("orderId",orderId,"orderItemSeqId",orderItem.get("orderItemSeqId"),"shipGroupSeqId",shipGroupSeqId));    oisgAssoc.set("quantity",quantity);    oisgAssoc.create();    return ServiceUtil.returnSuccess();  } else {    String errMsg=UtilProperties.getMessage(resource,mainErrorMessage + orderItem,locale);    return ServiceUtil.returnError(errMsg);  }}  }
class C{  public OptionSet removeSize2(){  this.size2=null;  return this;}  }
class C{  public boolean isContextSpecific(byte cntxtTag){  if (!isContextSpecific()) {    return false;  }  return ((tag & 0x01f) == cntxtTag);}  }
class C{  private void initPanel(){  winMain=new MultiTabPart();  winMain.createPart(this);  winMain.getComponent().setStyle("height: 100%; width: 100%; position: relative;");  winAdvanced=new Window();  winLookupRecord=new Window();  Tabpanel tabPanel=new Tabpanel();  tabPanel.setStyle("height: 100%; width: 100%");  tabPanel.appendChild(winLookupRecord);  winMain.addTab(tabPanel,Msg.getMsg(Env.getCtx(),"Find").replaceAll("&",""),false,true);  tabPanel=new Tabpanel();  tabPanel.setStyle("height: 100%; width: 100%");  tabPanel.appendChild(winAdvanced);  winMain.addTab(tabPanel,Msg.getMsg(Env.getCtx(),"Advanced").replaceAll("&",""),false,false);  m_sTipText="<".concat(Msg.getMsg(Env.getCtx(),"SelectOrEnterQueryName")).concat(">");  m_sToolTipText=Msg.getMsg(Env.getCtx(),"SelectOrEnterQueryNameToolTip");  initSimple();  initAdvanced();}  }
class C{  public boolean mouseClicked(MouseEvent e){  return false;}  }
class C{  public static boolean isInteger(CharSequence self){  try {    Integer.valueOf(self.toString().trim());    return true;  } catch (  NumberFormatException nfe) {    return false;  }}  }
class C{  public void removeListIndent(){  Line line=this.lines;  while (line != null) {    if (!line.isEmpty) {switch (line.getLineType()) {case ULIST:        line.value=line.value.substring(line.leading + 2);      break;case OLIST:    line.value=line.value.substring(line.value.indexOf('.') + 2);  break;default :line.value=line.value.substring(Math.min(line.leading,4));break;}line.initLeading();}line=line.next;}}  }
class C{  public Hashtable(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  public void add(Complex sample){  mBuffer[mBufferPointer++]=sample;  if (mBufferPointer >= mBuffer.length) {    mBufferPointer=0;  }}  }
class C{  protected void visitSameAssertion(SameAssertion assertion){  VariableReference source=assertion.getSource();  VariableReference dest=assertion.getDest();  Object value=assertion.getValue();  if (((Boolean)value).booleanValue())   testCode+="assertSame(" + getVariableName(source) + ", "+ getVariableName(dest)+ ");"; else   testCode+="assertNotSame(" + getVariableName(source) + ", "+ getVariableName(dest)+ ");";}  }
class C{  public final void print(boolean b) throws IOException {  print(b ? "true" : "false");}  }
class C{  public void connectKNNInput(SharedObject<? extends KNNList> input){  this.input=input;}  }
class C{  public LocalDateTime withDayOfMonth(int dayOfMonth){  return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(),dayOfMonth));}  }
class C{  public Settings(){  this(null);}  }
class C{  public static KeyStore copy(KeyStore keyStore) throws CryptoException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  try {    char[] emptyPassword={};    keyStore.store(baos,emptyPassword);    KeyStore theCopy=KeyStoreUtil.create(KeyStoreType.resolveJce(keyStore.getType()));    theCopy.load(new ByteArrayInputStream(baos.toByteArray()),emptyPassword);    return theCopy;  } catch (  CryptoException ex) {    throw new CryptoException(res.getString("NoCopyKeyStore.exception.message"),ex);  }catch (  GeneralSecurityException ex) {    throw new CryptoException(res.getString("NoCopyKeyStore.exception.message"),ex);  }catch (  IllegalStateException ex) {    throw new CryptoException(res.getString("NoCopyKeyStore.exception.message"),ex);  }catch (  IOException ex) {    throw new CryptoException(res.getString("NoCopyKeyStore.exception.message"),ex);  }}  }
class C{  public static ServerDolphin create(){  return new DefaultServerDolphin();}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  if (m_Template instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_Template).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      newVector.add(mname);    }  }  return newVector.elements();}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  ConfigDao.createTable(db,ifNotExists);  UserActionDao.createTable(db,ifNotExists);  ParentDao.createTable(db,ifNotExists);}  }
class C{  protected void registerCommonAttributes(){  addAttributeProcessor(new ActionLmlAttribute(),"action","onShow");  addAttributeProcessor(new ColorAlphaLmlAttribute(),"alpha","a");  addAttributeProcessor(new ColorBlueLmlAttribute(),"blue","b");  addAttributeProcessor(new ColorGreenLmlAttribute(),"green","g");  addAttributeProcessor(new ColorLmlAttribute(),"color");  addAttributeProcessor(new ColorRedLmlAttribute(),"red","r");  addAttributeProcessor(new DebugLmlAttribute(),"debug");  addAttributeProcessor(new IdLmlAttribute(),"id");  addAttributeProcessor(new MultilineLmlAttribute(),"multiline");  addAttributeProcessor(new OnChangeLmlAttribute(),"onChange","change");  addAttributeProcessor(new OnClickLmlAttribute(),"onClick","click");  addAttributeProcessor(new OnCloseLmlAttribute(),"onClose","close","onTagClose","tagClose");  addAttributeProcessor(new OnCreateLmlAttribute(),"onCreate","create","onInit","init");  addAttributeProcessor(new RotationLmlAttribute(),"rotation","angle");  addAttributeProcessor(new ScaleLmlAttribute(),"scale");  addAttributeProcessor(new ScaleXLmlAttribute(),"scaleX");  addAttributeProcessor(new ScaleYLmlAttribute(),"scaleY");  addAttributeProcessor(new TooltipLmlAttribute(),"tooltip");  addAttributeProcessor(new TouchableLmlAttribute(),"touchable");  addAttributeProcessor(new TreeNodeLmlAttribute(),"node");  addAttributeProcessor(new VisibleLmlAttribute(),"visible");  addAttributeProcessor(new XLmlAttribute(),"x");  addAttributeProcessor(new YLmlAttribute(),"y");  addAttributeProcessor(new TransformLmlAttribute(),"transform");  addAttributeProcessor(new DebugRecursivelyLmlAttribute(),"debugRecursively");  addAttributeProcessor(new FillParentLmlAttribute(),"fillParent");  addAttributeProcessor(new LayoutEnabledLmlAttribute(),"layout","layoutEnabled");  addAttributeProcessor(new PackLmlAttribute(),"pack");  addAttributeProcessor(new DisabledLmlAttribute(),"disabled","disable");}  }
class C{  public boolean isGenericURI(){  return (m_host != null);}  }
class C{  private boolean createMatchInv(int AD_Client_ID,int AD_Org_ID,int M_InOutLine_ID,int C_InvoiceLine_ID,int M_Product_ID,Timestamp DateTrx,BigDecimal Qty){  log.fine("InvLine=" + C_InvoiceLine_ID + ",Rec="+ M_InOutLine_ID+ ", Qty="+ Qty+ ", "+ DateTrx);  int M_MatchInv_ID=DB.getNextID(AD_Client_ID,"M_MatchInv",m_trxName);  StringBuffer sql=new StringBuffer("INSERT INTO M_MatchInv (" + "M_MatchInv_ID, " + "AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy, "+ "M_InOutLine_ID,C_InvoiceLine_ID, "+ "M_Product_ID,DateTrx,Qty, "+ "Processing,Processed,Posted) VALUES (").append(M_MatchInv_ID).append(", ").append(AD_Client_ID).append(",").append(AD_Org_ID).append(",'Y',SysDate,0,SysDate,0, ").append(M_InOutLine_ID).append(",").append(C_InvoiceLine_ID).append(", ").append(M_Product_ID).append(",").append(DB.TO_DATE(DateTrx,true)).append(",").append(Qty).append(", 'N','Y','N')");  int no=DB.executeUpdate(sql.toString(),m_trxName);  return no == 1;}  }
class C{  static void w(String msg){  if (debug) {    android.util.Log.w(TAG,msg);  }}  }
class C{  public static boolean isInMyTracks(File driveFile,String folderId){  if (driveFile == null) {    return false;  }  String mimeType=driveFile.getMimeType();  if (!SyncUtils.KML_MIME_TYPE.equals(mimeType) && !SyncUtils.KMZ_MIME_TYPE.equals(mimeType)) {    return false;  }  if (driveFile.getSharedWithMeDate() != null) {    return false;  }  for (  ParentReference parentReference : driveFile.getParents()) {    String id=parentReference.getId();    if (id != null && id.equals(folderId)) {      return true;    }  }  return false;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HomeChannelDB\"";  db.execSQL(sql);}  }
class C{  public static String userFlagFromBytes(byte[] bytes){  if (Bytes.startsWith(bytes,PREFIX_UFLAGS_B)) {    return Bytes.toString(bytes,PREFIX_UFLAGS_B.length,bytes.length - PREFIX_UFLAGS_B.length);  }  throw new RuntimeException("This is not a user flag representation: " + Bytes.toString(bytes));}  }
class C{  private static void ensureValidOrientations(Alignment horizontalAlignment,Alignment verticalAlignment){  if (!horizontalAlignment.isHorizontal()) {    throw new IllegalArgumentException("The horizontal alignment must be one of: left, center, right, fill, default.");  }  if (!verticalAlignment.isVertical()) {    throw new IllegalArgumentException("The vertical alignment must be one of: top, center, bottom, fill, default.");  }}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  private Response updatePropertiesCommon(PropertyInfoRestRep updateProps,List<String> deleteKeys) throws Exception {  if (!_coordinator.isClusterUpgradable()) {    throw APIException.serviceUnavailable.clusterStateNotStable();  }  StringBuilder propChanges=new StringBuilder();  PropertyInfoRestRep oldProps=new PropertyInfoRestRep();  oldProps.addProperties(getTargetPropsCommon().getAllProperties());  boolean doSetTarget=false;  PropertyInfoRestRep currentProps=_coordinator.getTargetProperties();  if (deleteKeys != null && !deleteKeys.isEmpty()) {    doSetTarget=true;    for (    String key : deleteKeys) {      currentProps.removeProperty(key);      propChanges.append(key);      propChanges.append(" deleted");    }    currentProps.removeProperties(deleteKeys);  }  if (updateProps != null && !updateProps.isEmpty()) {    doSetTarget=true;    currentProps.addProperties(updateProps.getAllProperties());    String configVersion=System.currentTimeMillis() + "";    currentProps.addProperty(PropertyInfoRestRep.CONFIG_VERSION,configVersion);    if (propChanges.length() > 0) {      propChanges.append(",");    }    propChanges.append(PropertyInfoRestRep.CONFIG_VERSION);    propChanges.append("=");    propChanges.append(configVersion);  }  if (doSetTarget) {    _propertyHandlers.before(oldProps,currentProps);    _coordinator.setTargetProperties(currentProps.getAllProperties());    for (    Map.Entry<String,String> entry : updateProps.getAllProperties().entrySet()) {      if (propChanges.length() > 0) {        propChanges.append(",");      }      propChanges.append(entry.getKey());      propChanges.append("=");      if (PropertyInfoExt.isEncryptedProperty(entry.getKey())) {        propChanges.append(HIDDEN_TEXT_MASK);      } else {        propChanges.append(entry.getValue());      }    }    auditConfig(OperationTypeEnum.UPDATE_SYSTEM_PROPERTY,AuditLogManager.AUDITLOG_SUCCESS,null,propChanges.toString());    _propertyHandlers.after(oldProps,currentProps);  }  ClusterInfo clusterInfo=_coordinator.getClusterInfo();  if (clusterInfo == null) {    throw APIException.internalServerErrors.targetIsNullOrEmpty("Cluster information");  }  return toClusterResponse(clusterInfo);}  }
class C{  public void clearTextEdits(){  fEdits.clear();}  }
class C{  private static void printPositionEntry(PositionEntry positionEntry){  System.out.println("\nPosition Entry\n--------------");  printBasicEntryDetails(positionEntry);  System.out.println("\tFeed Link: " + positionEntry.getFeedLink().getHref());  if (positionEntry.getFeedLink().getFeed() == null) {    System.out.println("\tNo inlined feed.");  } else {    System.out.println("********** Beginning of inline feed ***************");    printBasicFeedDetails(positionEntry.getFeedLink().getFeed());    TransactionFeed inlinedFeed=positionEntry.getFeedLink().getFeed();    printBasicFeedDetails(inlinedFeed);    for (int i=0; i < inlinedFeed.getEntries().size(); i++) {      TransactionEntry transactionEntry=inlinedFeed.getEntries().get(i);      printTransactionEntry(transactionEntry);    }    System.out.println("************* End of inlined feed *****************");  }  System.out.println("\tTicker:");  System.out.println("\t\tExchange: " + positionEntry.getSymbol().getExchange());  System.out.println("\t\tSymbol: " + positionEntry.getSymbol().getSymbol());  System.out.println("\t\tFull Name: " + positionEntry.getSymbol().getFullName());  PositionData positionData=positionEntry.getPositionData();  System.out.println("\tPosition Data:");  System.out.printf("\t\tShare count: %.2f\n",positionData.getShares());  System.out.printf("\t\tPercent Gain is %.2f%%\n",positionData.getGainPercentage() * 100.0);  System.out.println("\t\tReturns:");  System.out.printf("\t\t\tOne week: %.2f%%\n",positionData.getReturn1w() * 100.0);  System.out.printf("\t\t\tFour weeks: %.2f%%\n",positionData.getReturn4w() * 100.0);  System.out.printf("\t\t\tThree months: %.2f%%\n",positionData.getReturn3m() * 100.0);  System.out.printf("\t\t\tYear-to-date: %.2f%%\n",positionData.getReturnYTD() * 100.0);  System.out.printf("\t\t\tOne year: %.2f%%\n",positionData.getReturn1y() * 100.0);  System.out.printf("\t\t\tThree years: %.2f%%\n",positionData.getReturn3y() * 100.0);  System.out.printf("\t\t\tFive years: %.2f%%\n",positionData.getReturn5y() * 100.0);  System.out.printf("\t\t\tOverall: %.2f%%\n",positionData.getReturnOverall() * 100.0);  if (positionData.getCostBasis() == null) {    System.out.println("\t\tCost Basis not specified");  } else {    for (int i=0; i < positionData.getCostBasis().getMoney().size(); i++) {      Money m=positionData.getCostBasis().getMoney().get(i);      System.out.printf("\t\tThis position cost %.2f %s.\n",m.getAmount(),m.getCurrencyCode());    }  }  if (positionData.getDaysGain() == null) {    System.out.println("\t\tDay's Gain not specified");  } else {    for (int i=0; i < positionData.getDaysGain().getMoney().size(); i++) {      Money m=positionData.getDaysGain().getMoney().get(i);      System.out.printf("\t\tThis position made %.2f %s today.\n",m.getAmount(),m.getCurrencyCode());    }  }  if (positionData.getGain() == null) {    System.out.println("\t\tTotal Gain not specified");  } else {    for (int i=0; i < positionData.getGain().getMoney().size(); i++) {      Money m=positionData.getGain().getMoney().get(i);      System.out.printf("\t\tThis position has a total gain of %.2f %s.\n",m.getAmount(),m.getCurrencyCode());    }  }  if (positionData.getMarketValue() == null) {    System.out.println("\t\tMarket Value not specified");  } else {    for (int i=0; i < positionData.getMarketValue().getMoney().size(); i++) {      Money m=positionData.getMarketValue().getMoney().get(i);      System.out.printf("\t\tThis position is worth %.2f %s.\n",m.getAmount(),m.getCurrencyCode());    }  }}  }
class C{  private void refresh(String val){  if (comboItems == null || val == null) {    super.getChildren().clear();    return;  }  String compare=val.toLowerCase().trim();  Iterator<?> it=getItems().iterator();  for (int i=0; i < comboItems.length; i++) {    boolean match=false;    if (compare.length() < 3) {      match=comboItems[i].toLowerCase().startsWith(compare);    } else {      match=comboItems[i].toLowerCase().contains(compare);    }    if (match) {      Comboitem comboitem=null;      if (it != null && it.hasNext()) {        comboitem=((Comboitem)it.next());      } else {        it=null;        comboitem=new Comboitem();        super.appendChild(comboitem);      }      comboitem.setLabel(comboItems[i]);      comboitem.setDescription(strDescription[i]);    }  }  while (it != null && it.hasNext()) {    it.next();    it.remove();  }}  }
class C{  public LUDecomposition(jMatrix A){  LU=A.getArrayCopy();  m=A.getRowDimension();  n=A.getColumnDimension();  piv=new int[m];  for (int i=0; i < m; i++) {    piv[i]=i;  }  pivsign=1;  double[] LUrowi;  double[] LUcolj=new double[m];  for (int j=0; j < n; j++) {    for (int i=0; i < m; i++) {      LUcolj[i]=LU[i][j];    }    for (int i=0; i < m; i++) {      LUrowi=LU[i];      int kmax=Math.min(i,j);      double s=0.0;      for (int k=0; k < kmax; k++) {        s+=LUrowi[k] * LUcolj[k];      }      LUrowi[j]=LUcolj[i]-=s;    }    int p=j;    for (int i=j + 1; i < m; i++) {      if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {        p=i;      }    }    if (p != j) {      for (int k=0; k < n; k++) {        double t=LU[p][k];        LU[p][k]=LU[j][k];        LU[j][k]=t;      }      int k=piv[p];      piv[p]=piv[j];      piv[j]=k;      pivsign=-pivsign;    }    if (j < m & LU[j][j] != 0.0) {      for (int i=j + 1; i < m; i++) {        LU[i][j]/=LU[j][j];      }    }  }}  }
class C{  public LogCollectingClient(Client<? super I,? extends O> delegate,MessageLogConsumer consumer){  super(delegate);  this.consumer=requireNonNull(consumer,"consumer");}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public final boolean isErrorEnabled(){  return m_priority.isLowerOrEqual(Priority.ERROR);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String findValue(String k){  if (k == null) {    for (int i=nkeys; --i >= 0; )     if (keys[i] == null)     return values[i];  } else   for (int i=nkeys; --i >= 0; ) {    if (k.equalsIgnoreCase(keys[i]))     return values[i];  }  return null;}  }
class C{  static <T>T firstNonNull(T... values){  for (  T value : values) {    if (value != null) {      return value;    }  }  throw new IllegalArgumentException("Values must contain at least a single non-null value.");}  }
class C{  public void updateMatrices(){  GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX,MODELVIEW);  GL11.glGetFloat(GL11.GL_PROJECTION_MATRIX,PROJECTION);  Matrix4f modelviewMatrix=(Matrix4f)new Matrix4f().load(MODELVIEW.asReadOnlyBuffer());  this.modelviewMatrix=modelviewMatrix;  Matrix4f projectionMatrix=(Matrix4f)new Matrix4f().load(PROJECTION.asReadOnlyBuffer());  this.projectionMatrix=projectionMatrix;  Matrix4f MVP=new Matrix4f();  Matrix4f.mul(projectionMatrix,modelviewMatrix,MVP);  this.modelviewProjectionMatrix=MVP;  this.invertedModelviewProjectionMatrix=Matrix4f.invert(MVP,new Matrix4f());}  }
class C{  public CreatureNameValidator(final String parameterValue){  this.parameterValue=parameterValue;}  }
class C{  public static void serverProxyFailed(MessageInfo messageInfo){  if (monitorAgentImpl != null) {    monitorAgentImpl.serverProxyFailed(messageInfo);  }}  }
class C{  public void update(byte b){  contentDigest.update(b);}  }
class C{  public void printInfo(PrintStream s){  NumberFormat numberFormat=new DecimalFormat("0.0000000000E0");  printInfo(s,numberFormat);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public static Type inferGenericType(Type clazz){  if (clazz != null && clazz instanceof ParameterizedType) {    ParameterizedType pType=(ParameterizedType)clazz;    return pType.getActualTypeArguments()[0];  }  return null;}  }
class C{  public static final void addMenuItem(String s,ActionListener l,JPopupMenu m,boolean enable){  addMenuItem(s,l,m,enable,-1);}  }
class C{  protected boolean saveChanges(){  return saveChanges(true);}  }
class C{  public boolean put(T tuple){  long bucketKey=getBucketKeyFor(tuple);  if (bucketKey < 0) {    return false;  }  newEvent(bucketKey,tuple);  return true;}  }
class C{  int size(){  return noxItems.size();}  }
class C{  public static List<ShapeRecord> implicitClosepath(double startX,double startY,double endX,double endY){  List<ShapeRecord> shapeRecords=new ArrayList<ShapeRecord>();  StyleChangeRecord scr=move(startX,startY);  scr.setLinestyle(0);  shapeRecords.add(scr);  shapeRecords.addAll(straightEdge(startX,startY,endX,endY));  return shapeRecords;}  }
class C{  public boolean equals(Object t){  return this == t;}  }
class C{  @Nullable public static SeasonalityType parse(String text,ParseFieldMatcher parseFieldMatcher){  if (text == null) {    return null;  }  SeasonalityType result=null;  for (  SeasonalityType policy : values()) {    if (parseFieldMatcher.match(text,policy.parseField)) {      result=policy;      break;    }  }  if (result == null) {    final List<String> validNames=new ArrayList<>();    for (    SeasonalityType policy : values()) {      validNames.add(policy.getName());    }    throw new ElasticsearchParseException("failed to parse seasonality type [{}]. accepted values are [{}]",text,validNames);  }  return result;}  }
class C{  public void removeFromCodeOrder(BasicBlock bb){  if (bb == _firstNode) {    _firstNode=bb.getNext();  }  if (bb == _lastNode) {    _lastNode=bb.getPrev();  }  bb.remove();}  }
class C{  private void checkNameReservation(String organizationName) throws ConflictException {  if (reservedNames.contains(organizationName.toLowerCase())) {    throw new ConflictException(String.format("Organization name '%s' is reserved",organizationName));  }}  }
class C{  void handshake(NextFilter nextFilter) throws SSLException {  for (; ; ) {switch (handshakeStatus) {case FINISHED:case NOT_HANDSHAKING:      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("{} processing the FINISHED state",sslFilter.getSessionInfo(session));      }    session.setAttribute(SslFilter.SSL_SESSION,sslEngine.getSession());  handshakeComplete=true;if (firstSSLNegociation && session.containsAttribute(SslFilter.USE_NOTIFICATION)) {  firstSSLNegociation=false;  scheduleMessageReceived(nextFilter,SslFilter.SESSION_SECURED);}if (LOGGER.isDebugEnabled()) {if (!isOutboundDone()) {  LOGGER.debug("{} is now secured",sslFilter.getSessionInfo(session));} else {  LOGGER.debug("{} is not secured yet",sslFilter.getSessionInfo(session));}}return;case NEED_TASK:if (LOGGER.isDebugEnabled()) {LOGGER.debug("{} processing the NEED_TASK state",sslFilter.getSessionInfo(session));}handshakeStatus=doTasks();break;case NEED_UNWRAP:if (LOGGER.isDebugEnabled()) {LOGGER.debug("{} processing the NEED_UNWRAP state",sslFilter.getSessionInfo(session));}Status status=unwrapHandshake(nextFilter);if (status == Status.BUFFER_UNDERFLOW && handshakeStatus != HandshakeStatus.FINISHED || isInboundDone()) {return;}break;case NEED_WRAP:if (LOGGER.isDebugEnabled()) {LOGGER.debug("{} processing the NEED_WRAP state",sslFilter.getSessionInfo(session));}if (outNetBuffer != null && outNetBuffer.hasRemaining()) {return;}SSLEngineResult result;createOutNetBuffer(0);for (; ; ) {result=sslEngine.wrap(emptyBuffer.buf(),outNetBuffer.buf());if (result.getStatus() == Status.BUFFER_OVERFLOW) {outNetBuffer.capacity(outNetBuffer.capacity() << 1);outNetBuffer.limit(outNetBuffer.capacity());} else {break;}}outNetBuffer.flip();handshakeStatus=result.getHandshakeStatus();writeNetBuffer(nextFilter);break;default :String msg="Invalid Handshaking State" + handshakeStatus + " while processing the Handshake for session "+ session.getId();LOGGER.error(msg);throw new IllegalStateException(msg);}}}  }
class C{  public void shutdownNow(){  jobService.shutdownNow();}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  public int countUsers() throws UsersRepositoryException {  EntityManager entityManager=entityManagerFactory.createEntityManager();  try {    return ((Long)entityManager.createNamedQuery("countUsers").getSingleResult()).intValue();  } catch (  PersistenceException e) {    getLogger().debug("Failed to find user",e);    throw new UsersRepositoryException("Failed to count users",e);  } finally {    entityManager.close();  }}  }
class C{  public void write(final byte[] data) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.write(byte[])");  try {    this.write(data,0,data.length);  } catch (  final Throwable t) {    LOG.debug("",t);    if (t instanceof SocketException) {      throw (SocketException)t;    }    if (t instanceof IllegalStateException) {      throw (IllegalStateException)t;    }    throw new Error(t);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.AUTO_TRANSITION___AUTO_TRANSITION_BLOCK_1:    return getAutoTransitionBlock_1();case UmplePackage.AUTO_TRANSITION___ACTIVITY_1:  return getActivity_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void update(byte[] in,int off,int len){  digest.update(in,off,len);}  }
class C{  public static double nextDouble(){  Random random=getRandom();  double value=random.nextDouble();  if (!_isTest)   _freeRandomList.free(random);  return value;}  }
class C{  private static int NextDelimiterCol(String str,int col){  String[] splitStr=str.substring(col).split(" |,|\\)");  if (splitStr.length == 0) {    return col;  }  return col + splitStr[0].length();}  }
class C{  public ParameterizedBuiltinOp(String l,DataType dt,ValueType vt,ParamBuiltinOp op,HashMap<String,Hop> inputParameters){  super(l,dt,vt);  _op=op;  int index=0;  for (  Entry<String,Hop> e : inputParameters.entrySet()) {    String s=e.getKey();    Hop input=e.getValue();    getInput().add(input);    input.getParent().add(this);    _paramIndexMap.put(s,index);    index++;  }  refreshSizeInformation();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.885 -0500",hash_original_method="D56D87B601F5E5F24F9D8C0DB423B19E",hash_generated_method="D8364B9C65435399E437E4C6B080D315") private void handleChildProc(Arguments parsedArgs,FileDescriptor[] descriptors,FileDescriptor pipeFd,PrintStream newStderr) throws ZygoteInit.MethodAndArgsCaller {  if (parsedArgs.peerWait) {    try {      ZygoteInit.setCloseOnExec(mSocket.getFileDescriptor(),true);      sPeerWaitSocket=mSocket;    } catch (    IOException ex) {      Log.e(TAG,"Zygote Child: error setting peer wait " + "socket to be close-on-exec",ex);    }  } else {    closeSocket();    ZygoteInit.closeServerSocket();  }  if (descriptors != null) {    try {      ZygoteInit.reopenStdio(descriptors[0],descriptors[1],descriptors[2]);      for (      FileDescriptor fd : descriptors) {        IoUtils.closeQuietly(fd);      }      newStderr=System.err;    } catch (    IOException ex) {      Log.e(TAG,"Error reopening stdio",ex);    }  }  if (parsedArgs.niceName != null) {    Process.setArgV0(parsedArgs.niceName);  }  if (parsedArgs.runtimeInit) {    if (parsedArgs.invokeWith != null) {      WrapperInit.execApplication(parsedArgs.invokeWith,parsedArgs.niceName,parsedArgs.targetSdkVersion,pipeFd,parsedArgs.remainingArgs);    } else {      RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion,parsedArgs.remainingArgs);    }  } else {    String className;    try {      className=parsedArgs.remainingArgs[0];    } catch (    ArrayIndexOutOfBoundsException ex) {      logAndPrintError(newStderr,"Missing required class name argument",null);      return;    }    String[] mainArgs=new String[parsedArgs.remainingArgs.length - 1];    System.arraycopy(parsedArgs.remainingArgs,1,mainArgs,0,mainArgs.length);    if (parsedArgs.invokeWith != null) {      WrapperInit.execStandalone(parsedArgs.invokeWith,parsedArgs.classpath,className,mainArgs);    } else {      ClassLoader cloader;      if (parsedArgs.classpath != null) {        cloader=new PathClassLoader(parsedArgs.classpath,ClassLoader.getSystemClassLoader());      } else {        cloader=ClassLoader.getSystemClassLoader();      }      try {        ZygoteInit.invokeStaticMain(cloader,className,mainArgs);      } catch (      RuntimeException ex) {        logAndPrintError(newStderr,"Error starting.",ex);      }    }  }}  }
class C{  public synchronized void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  FitsHeap(int size){  this.heapSize=size;  if (size < 0) {    throw new IllegalArgumentException("Illegal size for FITS heap:" + size);  }}  }
class C{  protected void doParse() throws ParseException, IOException {  current=reader.read();  float clockValue=parseOffset ? parseOffset() : parseClockValue();  if (current != -1) {    reportError("end.of.stream.expected",new Object[]{new Integer(current)});  }  if (clockHandler != null) {    clockHandler.clockValue(clockValue);  }}  }
class C{  public void addOrInsertMethod(InsertableMethod insertableMethod) throws CannotCompileException, AfterBurnerImpossibleException {  log.info("InsertableMethod : " + insertableMethod);  CtClass classToTransform=insertableMethod.getClassToInsertInto();  String targetMethodName=insertableMethod.getTargetMethodName();  CtClass[] targetMethodParams=insertableMethod.getTargetMethodParams();  CtMethod targetMethod=extractExistingMethod(classToTransform,targetMethodName,targetMethodParams);  log.info("Method : " + targetMethod);  if (targetMethod != null) {    InsertableMethodInjectorEditor injectorEditor=new InsertableMethodInjectorEditor(classToTransform,insertableMethod);    injectorEditor.edit(targetMethod);  } else {    CtMethod method=CtNewMethod.make(insertableMethod.getFullMethod(),classToTransform);    classToTransform.addMethod(method);  }}  }
class C{  public synchronized Object clone(){  try {    Hashtable t=(Hashtable)super.clone();    t.table=new Entry[table.length];    for (int i=table.length; i-- > 0; ) {      t.table[i]=(table[i] != null) ? (Entry)table[i].clone() : null;    }    t.keySet=null;    t.entrySet=null;    t.values=null;    t.modCount=0;    return t;  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }}  }
class C{  public boolean isFlavorJavaFileListType(){  if (mimeType == null || representationClass == null)   return false;  return java.util.List.class.isAssignableFrom(representationClass) && mimeType.match(javaFileListFlavor.mimeType);}  }
class C{  @Override public boolean contains(java.awt.Point p){  return this.contains(p.x,p.y);}  }
class C{  public void addEntry(String key,String val) throws IOException {  if (val != null) {    addEntry(key);    addEntry(val);  }}  }
class C{  public static int INDEXK(int r){  return ((int)(r) & ~BITRK);}  }
class C{  public void testSpecialCase2(){  byte aBytes[]={-51};  byte bBytes[]={-52,-51,-50,-49,-48};  int aSign=-1;  int bSign=1;  byte rBytes[]={0,-52,-51,-50,-49,16};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  @VisibleForTesting static int chooseTableSize(int setSize){  if (setSize == 1) {    return 2;  }  int tableSize=Integer.highestOneBit(setSize - 1) << 1;  while (tableSize * DESIRED_LOAD_FACTOR < setSize) {    tableSize<<=1;  }  return tableSize;}  }
class C{  public void write(byte b[],int off,int len) throws IOException {  raf.write(b,off,len);}  }
class C{  Node(Node<K,V> next){  this.key=null;  this.value=this;  this.next=next;}  }
class C{  public boolean isUsed(String name){  return used.get(name);}  }
class C{  public String toString(){  try {    return new String(buffer.toByteArray(),charset);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public static int[] toIntArray(Byte[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].intValue();  }  return result;}  }
class C{  private TransactionalTridentKafkaSpout createKafkaSpout(){  ZkHosts hosts=new ZkHosts(zkUrl);  TridentKafkaConfig config=new TridentKafkaConfig(hosts,"test");  config.scheme=new SchemeAsMultiScheme(new StringScheme());  config.startOffsetTime=kafka.api.OffsetRequest.LatestTime();  return new TransactionalTridentKafkaSpout(config);}  }
class C{  public boolean isUnderline(){  sync();  return underline;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public TcpUdpRequestCreateException(String error,Exception t){  super(error,t);}  }
class C{  public DataFilterCriteria(){  mFilterClauses=new LinkedHashMap<DataFilterClause,DataFilterConjunction>();}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void unfreeze(HGHandle handle){  HGLiveHandle lHandle=(handle instanceof HGPersistentHandle) ? cache.get((HGPersistentHandle)handle) : (HGLiveHandle)handle;  if (lHandle != null && cache.isFrozen(lHandle))   cache.unfreeze(lHandle);}  }
class C{  public static Number power(Long self,Integer exponent){  if (exponent >= 0) {    BigInteger answer=BigInteger.valueOf(self).pow(exponent);    if (answer.compareTo(BI_LONG_MIN) >= 0 && answer.compareTo(BI_LONG_MAX) <= 0) {      return answer.longValue();    } else {      return answer;    }  } else {    return power(self,(double)exponent);  }}  }
class C{  public String globalInfo(){  return "Stores the setup of the experiment as a commandline.";}  }
class C{  public Key max(){  if (isEmpty())   throw new NoSuchElementException("called max() with empty symbol table");  return st.lastKey();}  }
class C{  public static void dumpAllStacks(){  for (int h=0; h < Host.getHostCount(); h++) {    dumpStack(Host.getHost(h));  }}  }
class C{  private void calculateSunlightRatio(Time time){  float value=time.hour + (map(time.minute,0,60,0,100) / 100);  sunlightRatio=(float)Gaussian.getPhi(value,12.0f,3.65f);  if (sunlightRatio < 0.5)   sunlightRatio=1 - sunlightRatio;}  }
class C{  public static void clear(Color color){  offscreen.setColor(color);  offscreen.fillRect(0,0,width,height);  offscreen.setColor(penColor);  draw();}  }
class C{  public Iterator<IPoint> range(IRectangle space){  if (root == null) {    return new ArrayList<IPoint>().iterator();  }  TwoDSearchResults results=new TwoDSearchResults();  root.range(space,results);  return results;}  }
class C{  private void dropSystemClients(){  resetDBObjects(DBObject_Table.class);  m_objectType=s_logger.localizeMessage("system client");  m_objectTypes=s_logger.localizeMessage("system clients");  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"dropSystemClients",new Object[]{m_objectTypes,m_direction});  m_counterDrp=new Integer(0);  m_totalDrp=new Integer(0);  Vector<Integer> v=new Vector<Integer>(m_target.getSystemClients().keySet());  java.util.Collections.sort(v);  for (Iterator<Integer> it=v.iterator(); it.hasNext(); ) {    int key=it.next();    if (key != s_parameters.SYSTEMCLIENTID) {      if (dropClient(key))       m_counterDrp=new Integer(m_counterDrp.intValue() + 1);      m_totalDrp=new Integer(m_totalDrp.intValue() + 1);    }  }  logResults();}  }
class C{  public static void deleteIfExists(PsiDirectory parent,String dirName){  final PsiDirectory existingDir=parent.findSubdirectory(dirName);  if (existingDir != null) {    existingDir.delete();  }}  }
class C{  public void initRestAssured(){  super.initRestAssured();  RestAssured.requestSpecification.basePath(SERVER_ROOT);}  }
class C{  public void send() throws IOException {  send(true);}  }
class C{  @Override public boolean batchFinished() throws Exception {  super.batchFinished();  for (int i=0; i > getFilters().length; i++) {    getFilter(i).batchFinished();  }  return (numPendingOutput() != 0);}  }
class C{  Register localReg(int i,TypeReference type){  Register[] pool=getPool(type);  if (pool[i] == null) {    pool[i]=temps.getReg(type);    pool[i].setLocal();  }  return pool[i];}  }
class C{  public void tryConnect(){  try {    if (TextUtils.isEmpty(AppInfo.btAddress)) {      return;    }    if (null == mAdapter) {      mAdapter=BluetoothAdapter.getDefaultAdapter();    }    if (null == mAdapter) {      return;    }    if (null == mBtService) {      mBtService=new BtService(mContext);    }    if (mBtService.getState() != BtService.STATE_CONNECTED) {      if (!TextUtils.isEmpty(AppInfo.btAddress)) {        BluetoothDevice device=mAdapter.getRemoteDevice(AppInfo.btAddress);        mBtService.connect(device);        return;      }    } else {    }  } catch (  Exception e) {    e.printStackTrace();  }catch (  Error e) {    e.printStackTrace();  }}  }
class C{  protected DoubleMatrix2D viewSelectionLike(int[] rowOffsets,int[] columnOffsets){  return new SelectedSparseDoubleMatrix2D(this.elements,rowOffsets,columnOffsets,this.offset);}  }
class C{  @Override public void layoutCompleted(LayoutCompleteEvent le){  setAppropriateSize();  m_gp.invalidate();  m_js.revalidate();  m_gp.repaint();  jBtLayout.setEnabled(true);}  }
class C{  public boolean isInjectedPointerDown(int pointerId){  final int pointerFlag=(1 << pointerId);  return (mInjectedPointersDown & pointerFlag) != 0;}  }
class C{  void clearLinkProperties(int netId){  WifiConfiguration config=mConfiguredNetworks.get(netId);  if (config != null && config.linkProperties != null) {    ProxyProperties proxy=config.linkProperties.getHttpProxy();    config.linkProperties.clear();    config.linkProperties.setHttpProxy(proxy);  }}  }
class C{  public boolean intersectsSector(Sector sector){  if (sector == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Tile","intersectsSector","missingSector"));  }  return this.sector.intersects(sector);}  }
class C{  static String format(String key){  return (textResources.getString(key));}  }
class C{  public SerializableLocation(Location location){  this.latitude=location.getLatitude();  this.longitude=location.getLongitude();  this.accuracy=location.getAccuracy();  this.altitude=location.getAltitude();  this.bearing=location.getBearing();  this.provider=location.getProvider();  this.speed=location.getSpeed();  this.time=location.getTime();  this.hasAccuracy=location.hasAccuracy();  this.hasAltitude=location.hasAltitude();  this.hasBearing=location.hasBearing();  this.hasSpeed=location.hasSpeed();}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public VcenterList listVcenters(@QueryParam("tenant") final URI tid) throws DatabaseException {  VcenterList list=new VcenterList();  List<Vcenter> vcenters=null;  if (isSecurityAdmin() || isSystemAdmin()) {    _log.debug("Fetching vCenters for {}",tid);    if (NullColumnValueGetter.isNullURI(tid) || Vcenter.NO_TENANT_SELECTOR.equalsIgnoreCase(tid.toString())) {      vcenters=getDataObjects(Vcenter.class);      list.setVcenters(map(ResourceTypeEnum.VCENTER,getNamedElementsList(Vcenter.class,DATAOBJECT_NAME_FIELD,vcenters)));    } else     if (Vcenter.TENANT_SELECTOR_FOR_UNASSIGNED.equalsIgnoreCase(tid.toString())) {      vcenters=getDataObjects(Vcenter.class);      list.setVcenters(map(ResourceTypeEnum.VCENTER,getNamedElementsWithNoAcls(Vcenter.class,DATAOBJECT_NAME_FIELD,vcenters)));    } else {      ArgValidator.checkEntity(_dbClient.queryObject(tid),tid,isIdEmbeddedInURL(tid));      list.setVcenters(map(ResourceTypeEnum.VCENTER,listChildrenWithAcls(tid,Vcenter.class,DATAOBJECT_NAME_FIELD)));    }    return list;  }  vcenters=getDataObjects(Vcenter.class);  if (!CollectionUtils.isEmpty(vcenters)) {    List<Vcenter> tenantVcenterList=null;    if (shouldTenantAdminUseTenantParam(tid)) {      tenantVcenterList=filterVcentersByTenant(vcenters,tid);    } else {      tenantVcenterList=filterVcentersByTenant(vcenters,NullColumnValueGetter.getNullURI());    }    list.setVcenters(map(ResourceTypeEnum.VCENTER,getNamedElementsList(Vcenter.class,DATAOBJECT_NAME_FIELD,tenantVcenterList)));  }  return list;}  }
class C{  public static Arc2D computeArc(double x0,double y0,double rx,double ry,double angle,boolean largeArcFlag,boolean sweepFlag,double x,double y){  double dx2=(x0 - x) / 2.0;  double dy2=(y0 - y) / 2.0;  angle=Math.toRadians(angle % 360.0);  double cosAngle=Math.cos(angle);  double sinAngle=Math.sin(angle);  double x1=(cosAngle * dx2 + sinAngle * dy2);  double y1=(-sinAngle * dx2 + cosAngle * dy2);  rx=Math.abs(rx);  ry=Math.abs(ry);  double Prx=rx * rx;  double Pry=ry * ry;  double Px1=x1 * x1;  double Py1=y1 * y1;  double radiiCheck=Px1 / Prx + Py1 / Pry;  if (radiiCheck > 1) {    rx=Math.sqrt(radiiCheck) * rx;    ry=Math.sqrt(radiiCheck) * ry;    Prx=rx * rx;    Pry=ry * ry;  }  double sign=(largeArcFlag == sweepFlag) ? -1 : 1;  double sq=((Prx * Pry) - (Prx * Py1) - (Pry * Px1)) / ((Prx * Py1) + (Pry * Px1));  sq=(sq < 0) ? 0 : sq;  double coef=(sign * Math.sqrt(sq));  double cx1=coef * ((rx * y1) / ry);  double cy1=coef * -((ry * x1) / rx);  double sx2=(x0 + x) / 2.0;  double sy2=(y0 + y) / 2.0;  double cx=sx2 + (cosAngle * cx1 - sinAngle * cy1);  double cy=sy2 + (sinAngle * cx1 + cosAngle * cy1);  double ux=(x1 - cx1) / rx;  double uy=(y1 - cy1) / ry;  double vx=(-x1 - cx1) / rx;  double vy=(-y1 - cy1) / ry;  double p, n;  n=Math.sqrt((ux * ux) + (uy * uy));  p=ux;  sign=(uy < 0) ? -1.0 : 1.0;  double angleStart=Math.toDegrees(sign * Math.acos(p / n));  n=Math.sqrt((ux * ux + uy * uy) * (vx * vx + vy * vy));  p=ux * vx + uy * vy;  sign=(ux * vy - uy * vx < 0) ? -1.0 : 1.0;  double angleExtent=Math.toDegrees(sign * Math.acos(p / n));  if (!sweepFlag && angleExtent > 0) {    angleExtent-=360f;  } else   if (sweepFlag && angleExtent < 0) {    angleExtent+=360f;  }  angleExtent%=360f;  angleStart%=360f;  Arc2D.Double arc=new Arc2D.Double();  arc.x=cx - rx;  arc.y=cy - ry;  arc.width=rx * 2.0;  arc.height=ry * 2.0;  arc.start=-angleStart;  arc.extent=-angleExtent;  return arc;}  }
class C{  public T caseBoundThisTypeRef(BoundThisTypeRef object){  return null;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.settings);  initActionController();  initViewComponents();  MainActivity mainActivity=new MainActivity();}  }
class C{  public EnvironmentFeatureSet(ProcessingEnvironment env){  featuresByType=CacheBuilder.newBuilder().concurrencyLevel(1).build(new FeatureFromEnvironmentLoader(env));}  }
class C{  protected void fill() throws IOException {  checkClosed();  if (nativeEndBufSize > 0) {    ZipFile.RAFStream is=(ZipFile.RAFStream)in;    len=is.fill(inf,nativeEndBufSize);  } else {    if ((len=in.read(buf)) > 0) {      inf.setInput(buf,0,len);    }  }}  }
class C{  private void cmd_errorReset(){  CLogErrorBuffer.get(true).resetBuffer(bErrorsOnly.isSelected());  cmd_displayErrors();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return this;}  }
class C{  public ConfigurableCaret(int style){  seg=new Segment();  setStyle(style);  selectionPainter=new ChangeableHighlightPainter();}  }
class C{  public long calculateEndTime(){  if (endTime == 0) {    return System.currentTimeMillis();  } else   if (endTime < 0) {    return System.currentTimeMillis() - endTime;  }  return endTime;}  }
class C{  public XMLFilter newXMLFilter(Templates templates) throws TransformerConfigurationException {  try {    return new TrAXFilter(templates);  } catch (  TransformerConfigurationException ex) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(ex);        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    }    throw ex;  }}  }
class C{  public boolean contains(int x,int y){  return contains((double)x,(double)y);}  }
class C{  private Utils(){  throw new AssertionError();}  }
class C{  public String noisePercentTipText(){  return "The noise percent: 0 <= perc <= 100.";}  }
class C{  public static int indexOfChars(String str,String chars){  return indexOfChars(str,chars,0);}  }
class C{  @NonNull public static Animator[] concatAnimators(@NonNull final Animator[] childAnimators,@NonNull final Animator[] animators,@NonNull final Animator alphaAnimator){  Animator[] allAnimators=new Animator[childAnimators.length + animators.length + 1];  int i;  for (i=0; i < childAnimators.length; ++i) {    allAnimators[i]=childAnimators[i];  }  for (  Animator animator : animators) {    allAnimators[i]=animator;    ++i;  }  allAnimators[allAnimators.length - 1]=alphaAnimator;  return allAnimators;}  }
class C{  protected void logi(String s){  Log.i(mName,s);}  }
class C{  public static void openProcess(final ProcessEntry processEntry){  RepositoryProcessLocation processLocation=new RepositoryProcessLocation(processEntry.getLocation());  if (RapidMinerGUI.getMainFrame().close()) {    OpenAction.open(processLocation,true);  }}  }
class C{  public VertexItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  @Override public void onLogin(String uid){}  }
class C{  public ArrayList<String> parseColumnNames(){  ArrayList<String> columns=new ArrayList<String>();  Token token=scanToken();  if (token == Token.LPAREN) {    do {      columns.add(parseIdentifier());      token=scanToken();    } while (token == Token.COMMA);    if (token != Token.RPAREN) {      throw error("expected ')' at '{0}'",token);    }  } else   if (token == Token.IDENTIFIER) {    columns.add(_lexeme);    _token=token;  } else {    throw error("expected '(' at '{0}'",token);  }  return columns;}  }
class C{  protected AbstractSet(){  super();}  }
class C{  private Map<String,String> fetchPropertiesFromUpdateServer(@Nullable Version version) throws IOException {  String requestUrl=combinePaths(updateServerEndpoint,"repository/properties",getName() + (version != null ? "/" + version.toString() : ""));  try {    Map m=asMap(transport.doGet(requestUrl));    return Collections.checkedMap(m,String.class,String.class);  } catch (  JsonParseException e) {    throw new IOException(e);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void closeDialogOk(){  dispose();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:28.088 -0500",hash_original_method="2A2F8FB5411E4566B3A86B15AD79DAB4",hash_generated_method="7C058DE2980D8DBEF6B60FDEC890F224") public static boolean isFilenameSafe(File file){  return SAFE_FILENAME_PATTERN.matcher(file.getPath()).matches();}  }
class C{  public static String[] sha256md5Hashes(String string) throws NoSuchAlgorithmException {  return sha256md5Hashes(string.getBytes(StandardCharsets.UTF_8));}  }
class C{  public void addEvicted(IgniteTxKey key){  evicted.add(key);}  }
class C{  public void clearWrite(){  if (_source != null) {    _source.clearWrite();  }}  }
class C{  @Override public void release(){  super.release();  init();}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  int rgb=-1;  if (paint != null) {    Color c=(paint instanceof Color) ? ((Color)paint) : SystemColor.textHighlight;    rgb=c.getRGB();  }  s.writeInt(rgb);}  }
class C{  public Excerpt javadocNoArgMethodLink(final String memberName){  return Excerpts.add("{@link %s#%s()}",getQualifiedName(),memberName);}  }
class C{  @Override protected void init(){  softwareModuleTable=new SoftwareModuleDetailsTable();  softwareModuleTable.init(getI18n(),true,getPermissionChecker(),distributionSetManagement,getEventBus(),manageDistUIState);  dsMetadataTable=new DistributionSetMetadatadetailslayout();  dsMetadataTable.init(getI18n(),getPermissionChecker(),distributionSetManagement,dsMetadataPopupLayout,entityFactory);  tfqDetailsTable=new TargetFilterQueryDetailsTable();  tfqDetailsTable.init(getI18n());  super.init();}  }
class C{  static <T>long hash(T element,Coder<T> coder) throws CoderException, IOException {  try (HashingOutputStream stream=new HashingOutputStream(Hashing.murmur3_128(),ByteStreams.nullOutputStream())){    coder.encode(element,stream,Context.OUTER);    return stream.hash().asLong();  } }  }
class C{  public static EPType singleEvent(EventType eventTypeOfSingleEvent){  if (eventTypeOfSingleEvent == null) {    throw new IllegalArgumentException("Invalid null event type");  }  return new EventEPType(eventTypeOfSingleEvent);}  }
class C{  public void makeAdditionalChecks(ExampleSetMetaData emd){}  }
class C{  public void createMonthScenario01CustomerPriceModel() throws Exception {  VendorData supplierData=setupNewSupplier("2012-11-01 12:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomerWithDiscount(supplierData,new BigDecimal("25.00"),DateTimeHandling.calculateMillis("2012-12-01 00:00:00"),DateTimeHandling.calculateMillis("2013-01-01 01:00:00"));  VOServiceDetails serviceDetails=createPublishService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,"SCENARIO01_PU_MONTH_CUST_PM_SERVICE");  VOServiceDetails customerServiceDetails=serviceSetup.savePriceModelForCustomer(serviceDetails,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_2,customerData.getOrganization());  customerServiceDetails=serviceSetup.activateMarketableService(customerServiceDetails);  VOSubscriptionDetails subDetails=subscribe(customerData.getAdminUser(),"SCENARIO01_PU_MONTH_CUST_PM",customerServiceDetails,"2012-11-15 12:00:00","ADMIN");  unsubscribe(customerData.getAdminKey(),subDetails.getSubscriptionId(),"2013-01-16 12:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("SCENARIO01_PU_MONTH_CUST_PM",new TestData(supplierData));}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.057 -0500",hash_original_method="33A03FA36AA2C869C23BC2B48A2B01BF",hash_generated_method="756025D690F3417AC1E320794E486242") private VMRuntime(){}  }
class C{  public String trimStringToWidth(String string,int newLength,boolean reverse){  StringBuilder stringbuilder=new StringBuilder();  int width=0;  int k=reverse ? string.length() - 1 : 0;  int l=reverse ? -1 : 1;  boolean flag1=false;  boolean flag2=false;  for (int i1=k; i1 >= 0 && i1 < string.length() && width < newLength; i1+=l) {    char thisChar=string.charAt(i1);    int thisWidth=getCharWidth(thisChar);    if (flag1) {      flag1=false;      if (thisChar != 108 && thisChar != 76) {        if (thisChar == 114 || thisChar == 82) {          flag2=false;        }      } else {        flag2=true;      }    } else     if (thisWidth < 0) {      flag1=true;    } else {      width+=thisWidth;      if (flag2) {        ++width;      }    }    if (width > newLength) {      break;    }    if (reverse) {      stringbuilder.insert(0,thisChar);    } else {      stringbuilder.append(thisChar);    }  }  return stringbuilder.toString();}  }
class C{  public RecyclerDivider(String dividerText,int dividerBGcolor){  this.dividerText=dividerText;  this.dividerBGcolor=dividerBGcolor;}  }
class C{  public int put(double key,int value){  int previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  byte previousState=_states[index];  _set[index]=key;  _states[index]=FULL;  _values[index]=value;  if (isNewMapping) {    postInsertHook(previousState == FREE);  }  return previous;}  }
class C{  public void computeApproxDominators(IR ir){  DominatorSystem system=new DominatorSystem(ir);  if (DEBUG) {    System.out.print("Solving...");  }  if (DEBUG) {    System.out.println(system);  }  system.solve();  if (DEBUG) {    System.out.println("done");  }  DF_Solution solution=system.getSolution();  if (DEBUG) {    System.out.println("Dominator Solution :" + solution);  }  if (DEBUG) {    System.out.print("Updating blocks ...");  }  updateBlocks(solution);  if (DEBUG) {    System.out.println("done.");  }  if (ir.options.PRINT_DOMINATORS) {    printDominators(ir);  }}  }
class C{  public AllToAll(){  super();}  }
class C{  public static LocalizedResource create(DataService dm,long objKey,LocalizedObjectTypes objectType) throws NonUniqueBusinessKeyException {  return create(dm,objKey,objectType,"Some text for " + objectType,"en");}  }
class C{  public PowerContainerVmAllocationPolicyMigrationAbstractHostSelection(List<? extends ContainerHost> hostList,PowerContainerVmSelectionPolicy vmSelectionPolicy,HostSelectionPolicy hostSelectionPolicy,double OlThreshold,double UlThreshold){  super(hostList,vmSelectionPolicy);  setHostSelectionPolicy(hostSelectionPolicy);  setUtilizationThreshold(OlThreshold);  setUnderUtilizationThreshold(UlThreshold);}  }
class C{  public GraphPattern(GraphPattern parent){  contextVar=parent.contextVar;  spScope=parent.spScope;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.918 -0400",hash_original_method="5F0F76B2AEC559A82852132C77730119",hash_generated_method="761CCC5FECDDA74F16E4367258F3BE74") private void detectEncoding(char[] cbuf,int off,int len) throws IOException {  int size=len;  StringBuffer xmlProlog=xmlPrologWriter.getBuffer();  if (xmlProlog.length() + len > BUFFER_SIZE) {    size=BUFFER_SIZE - xmlProlog.length();  }  xmlPrologWriter.write(cbuf,off,size);  if (xmlProlog.length() >= 5) {    if (xmlProlog.substring(0,5).equals("<?xml")) {      int xmlPrologEnd=xmlProlog.indexOf("?>");      if (xmlPrologEnd > 0) {        Matcher m=ENCODING_PATTERN.matcher(xmlProlog.substring(0,xmlPrologEnd));        if (m.find()) {          encoding=m.group(1).toUpperCase();          encoding=encoding.substring(1,encoding.length() - 1);        } else {          encoding=defaultEncoding;        }      } else {        if (xmlProlog.length() >= BUFFER_SIZE) {          encoding=defaultEncoding;        }      }    } else {      encoding=defaultEncoding;    }    if (encoding != null) {      xmlPrologWriter=null;      writer=new OutputStreamWriter(out,encoding);      writer.write(xmlProlog.toString());      if (len > size) {        writer.write(cbuf,off + size,len - size);      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void availableStoragePoolsJson(String id){  List<StoragePoolInfo> items=Lists.newArrayList();  CachedResources<StorageSystemRestRep> storageSystems=StorageSystemUtils.createCache();  for (  StoragePoolRestRep storagePool : StoragePoolUtils.getStoragePoolsAssignableToVirtualArray(id)) {    items.add(new StoragePoolInfo(storagePool,storageSystems));  }  renderJSON(DataTablesSupport.createJSON(items,params));}  }
class C{  int[] findNearestArea(int pixelX,int pixelY,int minSpanX,int minSpanY,int spanX,int spanY,View ignoreView,boolean ignoreOccupied,int[] result,int[] resultSpan,boolean[][] occupied){  lazyInitTempRectStack();  markCellsAsUnoccupiedForView(ignoreView,occupied);  pixelX-=(mCellWidth + mWidthGap) * (spanX - 1) / 2f;  pixelY-=(mCellHeight + mHeightGap) * (spanY - 1) / 2f;  final int[] bestXY=result != null ? result : new int[2];  double bestDistance=Double.MAX_VALUE;  final Rect bestRect=new Rect(-1,-1,-1,-1);  final Stack<Rect> validRegions=new Stack<Rect>();  final int countX=mCountX;  final int countY=mCountY;  if (minSpanX <= 0 || minSpanY <= 0 || spanX <= 0 || spanY <= 0 || spanX < minSpanX || spanY < minSpanY) {    return bestXY;  }  for (int y=0; y < countY - (minSpanY - 1); y++) {    inner:     for (int x=0; x < countX - (minSpanX - 1); x++) {      int ySize=-1;      int xSize=-1;      if (ignoreOccupied) {        for (int i=0; i < minSpanX; i++) {          for (int j=0; j < minSpanY; j++) {            if (occupied[x + i][y + j]) {              continue inner;            }          }        }        xSize=minSpanX;        ySize=minSpanY;        boolean incX=true;        boolean hitMaxX=xSize >= spanX;        boolean hitMaxY=ySize >= spanY;        while (!(hitMaxX && hitMaxY)) {          if (incX && !hitMaxX) {            for (int j=0; j < ySize; j++) {              if (x + xSize > countX - 1 || occupied[x + xSize][y + j]) {                hitMaxX=true;              }            }            if (!hitMaxX) {              xSize++;            }          } else           if (!hitMaxY) {            for (int i=0; i < xSize; i++) {              if (y + ySize > countY - 1 || occupied[x + i][y + ySize]) {                hitMaxY=true;              }            }            if (!hitMaxY) {              ySize++;            }          }          hitMaxX|=xSize >= spanX;          hitMaxY|=ySize >= spanY;          incX=!incX;        }        incX=true;        hitMaxX=xSize >= spanX;        hitMaxY=ySize >= spanY;      }      final int[] cellXY=mTmpXY;      cellToCenterPoint(x,y,cellXY);      Rect currentRect=mTempRectStack.pop();      currentRect.set(x,y,x + xSize,y + ySize);      boolean contained=false;      for (      Rect r : validRegions) {        if (r.contains(currentRect)) {          contained=true;          break;        }      }      validRegions.push(currentRect);      double distance=Math.sqrt(Math.pow(cellXY[0] - pixelX,2) + Math.pow(cellXY[1] - pixelY,2));      if ((distance <= bestDistance && !contained) || currentRect.contains(bestRect)) {        bestDistance=distance;        bestXY[0]=x;        bestXY[1]=y;        if (resultSpan != null) {          resultSpan[0]=xSize;          resultSpan[1]=ySize;        }        bestRect.set(currentRect);      }    }  }  markCellsAsOccupiedForView(ignoreView,occupied);  if (bestDistance == Double.MAX_VALUE) {    bestXY[0]=-1;    bestXY[1]=-1;  }  recycleTempRects(validRegions);  return bestXY;}  }
class C{  public DockMapPanel(PropertyHandler propertyHandler){  this(propertyHandler,false);}  }
class C{  public static String hex(byte b){  return String.format("%02x",b);}  }
class C{  public CFunction(final INaviModule module,final INaviView view,final IAddress address,final String name,final String originalName,final String description,final int indegree,final int outdegree,final int blockCount,final int edgeCount,final FunctionType type,final String forwardedFunctionModuleName,final int forwardedFunctionModuleId,final IAddress forwardedFunctionAddress,final BaseType stackFrame,final BaseType prototype,final SQLProvider provider){  this.module=Preconditions.checkNotNull(module,"IE00069: Module can not be null");  this.view=Preconditions.checkNotNull(view,"IE00268: View argument can not be null");  this.address=Preconditions.checkNotNull(address,"IE00070: Function address can not be null");  this.name=name;  this.originalName=Preconditions.checkNotNull(originalName,"IE00642: OriginalName argument can not be null");  this.description=description;  Preconditions.checkArgument(indegree >= 0,"IE00643: Indegree argument can not be smaller 0");  this.indegree=indegree;  Preconditions.checkArgument(outdegree >= 0,"IE01102: Outdegree argument can not be smaller 0");  this.outdegree=outdegree;  Preconditions.checkArgument(edgeCount >= 0,"IE01103: Edge count argument can not be smaller 0");  this.edgeCount=edgeCount;  Preconditions.checkArgument(blockCount >= 0,"IE02175: Block count argument can not be smaller 0");  this.blockCount=blockCount;  this.type=Preconditions.checkNotNull(type,"IE00073: Function type can not be null");  this.provider=Preconditions.checkNotNull(provider,"IE00074: SQL provider can not be null");  this.forwardedFunctionModuleId=forwardedFunctionModuleId;  this.forwardedFunctionAddress=forwardedFunctionAddress;  this.forwardedFunctionModuleName=forwardedFunctionModuleName;  this.stackFrame=stackFrame;  this.prototype=prototype;  CommentManager.get(provider).addListener(commentListener);  FunctionManager.get(provider).putFunction(this);}  }
class C{  public JsonObject merge(JsonObject object){  if (object == null) {    throw new NullPointerException("object is null");  }  for (  Member member : object) {    this.set(member.name,member.value);  }  return this;}  }
class C{  public ExternalDefinition_ createExternalDefinition_(){  ExternalDefinition_Impl externalDefinition_=new ExternalDefinition_Impl();  return externalDefinition_;}  }
class C{  private void writeDelay(){  try {    Thread.sleep(10);  } catch (  InterruptedException e) {    fail("Interrupted sleep.");  }}  }
class C{  private void writeLog(String cmd){  try {    if (m_writer == null) {      File file=File.createTempFile("create",".log");      m_writer=new PrintWriter(new FileWriter(file));      log.info(file.toString());    }    m_writer.println(cmd);    m_writer.flush();  } catch (  Exception e) {    log.severe(e.toString());  }}  }
class C{  protected void sequence_TStructField(ISerializationContext context,TStructField semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static void write(byte[] from,File to) throws IOException {  asByteSink(to).write(from);}  }
class C{  public static void logApplicationProperties(){  LOG.info("Application properties: ");  Preferences preferences=Activator.getDefault().getPluginPreferences();  logPreferences(preferences);}  }
class C{  public void flush() throws IOException {  if (exception != null)   throw exception;  if (finished)   throw new XZIOException("Stream finished or closed");  try {    if (blockEncoder != null) {      if (filtersSupportFlushing) {        blockEncoder.flush();      } else {        endBlock();        out.flush();      }    } else {      out.flush();    }  } catch (  IOException e) {    exception=e;    throw e;  }}  }
class C{  GridUriDeploymentSpringDocument(XmlBeanFactory factory){  assert factory != null;  this.factory=factory;}  }
class C{  public void beforeCalculatingStartingBucketId(){}  }
class C{  public void fireStyleChangeEvent(String property,Style source){  if (listeners == null || listeners.size() == 0) {    return;  }  boolean isEdt=Display.getInstance().isEdt();  if (isEdt && listeners.size() == 1) {    StyleListener a=(StyleListener)listeners.get(0);    a.styleChanged(property,source);    return;  }  StyleListener[] array;synchronized (this) {    array=new StyleListener[listeners.size()];    for (int iter=0; iter < array.length; iter++) {      array[iter]=(StyleListener)listeners.get(iter);    }  }  if (isEdt) {    fireStyleChangeSync(array,property,source);  } else   if (fireStyleEventsOnNonEDT) {    styleListenerArray=true;    Runnable cl=new CallbackClass(array,new Object[]{property,source});    Display.getInstance().callSerially(cl);  }}  }
class C{  public static final String nullifyIfEmpty(String s){  return ModelUtil.hasLength(s) ? s : null;}  }
class C{  public boolean is_subset_of(symbol_set other) throws internal_error {  not_null(other);  for (Enumeration e=all(); e.hasMoreElements(); )   if (!other.contains((symbol)e.nextElement()))   return false;  return true;}  }
class C{  public SmartJList(Vector<SmartJListItem> listData){  super(listData);  this.init();}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  private void processPostConstructViewMap(SystemEvent se){  if (LOGGER.isLoggable(Level.FINEST)) {    LOGGER.log(Level.FINEST,"Handling PostConstructViewMapEvent");  }  UIViewRoot viewRoot=(UIViewRoot)se.getSource();  Map<String,Object> viewMap=viewRoot.getViewMap(false);  if (viewMap != null) {    FacesContext facesContext=FacesContext.getCurrentInstance();    if (viewRoot.isTransient() && facesContext.isProjectStage(ProjectStage.Development)) {      FacesMessage message=new FacesMessage(FacesMessage.SEVERITY_WARN,"@ViewScoped beans are not supported on stateless views","@ViewScoped beans are not supported on stateless views");      facesContext.addMessage(viewRoot.getClientId(facesContext),message);      if (LOGGER.isLoggable(Level.WARNING)) {        LOGGER.log(Level.WARNING,"@ViewScoped beans are not supported on stateless views");      }    }    Object session=facesContext.getExternalContext().getSession(true);    if (session != null) {      Map<String,Object> sessionMap=facesContext.getExternalContext().getSessionMap();      Integer size=(Integer)sessionMap.get(ACTIVE_VIEW_MAPS_SIZE);      if (size == null) {        size=25;      }      if (sessionMap.get(ACTIVE_VIEW_MAPS) == null) {        sessionMap.put(ACTIVE_VIEW_MAPS,(Map<String,Object>)Collections.synchronizedMap(new LRUMap<String,Object>(size)));      }      Map<String,Object> viewMaps=(Map<String,Object>)sessionMap.get(ACTIVE_VIEW_MAPS);synchronized (viewMaps) {        String viewMapId=UUID.randomUUID().toString();        while (viewMaps.containsKey(viewMapId)) {          viewMapId=UUID.randomUUID().toString();        }        if (viewMaps.size() == size) {          String eldestViewMapId=viewMaps.keySet().iterator().next();          Map<String,Object> eldestViewMap=(Map<String,Object>)viewMaps.remove(eldestViewMapId);          removeEldestViewMap(facesContext,eldestViewMap);        }        viewMaps.put(viewMapId,viewMap);        viewRoot.getTransientStateHelper().putTransient(VIEW_MAP_ID,viewMapId);        viewRoot.getTransientStateHelper().putTransient(VIEW_MAP,viewMap);        if (distributable) {          sessionMap.put(ACTIVE_VIEW_MAPS,viewMaps);        }      }      if (null != contextManager) {        contextManager.fireInitializedEvent(facesContext,viewRoot);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.218 -0500",hash_original_method="2F5DB311D13CB6144CC7B49271775C33",hash_generated_method="41AF39E66C83ED832AC9F229D6F9164F") public OrganizationHeader createOrganizationHeader(String organization) throws ParseException {  if (organization == null)   throw new NullPointerException("bad organization arg");  Organization o=new Organization();  o.setOrganization(organization);  return o;}  }
class C{  public GF2Vector(int length,int t,SecureRandom sr){  if (t > length) {    throw new ArithmeticException("The hamming weight is greater than the length of vector.");  }  this.length=length;  int size=(length + 31) >> 5;  v=new int[size];  int[] help=new int[length];  for (int i=0; i < length; i++) {    help[i]=i;  }  int m=length;  for (int i=0; i < t; i++) {    int j=RandUtils.nextInt(sr,m);    setBit(help[j]);    m--;    help[j]=help[m];  }}  }
class C{  public XMLDecoder(InputStream inputStream,Object owner){  this(inputStream,owner,null,null);}  }
class C{  public static void remove(ByteString namespace,ByteString key){  BaggageImpl impl=Baggage.current.get();  if (impl != null) {    impl.remove(namespace,key);  }}  }
class C{  private DLockGrantor(DLockService dlock,long vId){  this.dm=dlock.getDistributionManager();  CancelCriterion stopper=this.dm.getCancelCriterion();  this.whileInitializing=new StoppableCountDownLatch(stopper,1);  this.untilDestroyed=new StoppableCountDownLatch(stopper,1);  this.dlock=dlock;  this.destroyLock=new StoppableReentrantReadWriteLock(stopper);  this.versionId.set(vId);  this.dm.addMembershipListener(this.membershipListener);  this.thread=new DLockGrantorThread(this,stopper);  this.dlock.getStats().incGrantors(1);}  }
class C{  private SystemUnderDevelopment instantiateSystemUnderDevelopment(){  LOG.debug("Creating SUD " + systemUnderDevelopmentClass);  SystemUnderDevelopment systemUnderDevelopment=ClassUtils.createInstanceFromClassNameWithArguments(classLoader,systemUnderDevelopmentClass,SystemUnderDevelopment.class);  systemUnderDevelopment.setClassLoader(classLoader);  return systemUnderDevelopment;}  }
class C{  public RolloutGroupConditionBuilder successCondition(final RolloutGroupSuccessCondition condition,final String expression){  conditions.setSuccessCondition(condition);  conditions.setSuccessConditionExp(expression);  return this;}  }
class C{  void addUndoAction(UndoAction action){  int iAction=m_undoStack.size() - 1;  while (iAction > m_nCurrentEditAction) {    m_undoStack.remove(iAction--);  }  if (m_nSavedPointer > m_nCurrentEditAction) {    m_nSavedPointer=-2;  }  m_undoStack.add(action);  m_nCurrentEditAction++;}  }
class C{  private boolean checkMemory(){  ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();  ActivityManager activityManager=(ActivityManager)getSystemService(ACTIVITY_SERVICE);  activityManager.getMemoryInfo(mi);  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    long availableMegs=mi.totalMem / 1048576L;    return availableMegs >= 1000;  } else {    long availableMegs=mi.availMem / 1048576L;    return availableMegs >= 1000;  }}  }
class C{  @Override public void refreshMetaData() throws CacheException {  if (_data == null || _metaData == null)   throw new CacheException("Cannot refresh meta data because there is no data or meta data. ");  MatrixCharacteristics mc=((MatrixDimensionsMetaData)_metaData).getMatrixCharacteristics();  mc.setDimension(_data.getNumRows(),_data.getNumColumns());  mc.setNonZeros(_data.getNonZeros());}  }
class C{  private void importRecords(){  for (  X_I_Forecast ifl : getRecords(false,m_IsImportOnlyNoErrors)) {    isImported=false;    MForecastLine fl=importForecast(ifl);    if (fl != null)     isImported=true;    if (isImported) {      ifl.setM_ForecastLine_ID(fl.getM_ForecastLine_ID());      ifl.setI_IsImported(true);      ifl.setProcessed(true);      ifl.setI_ErrorMsg("");      ifl.saveEx();      imported++;      ifl.saveEx();    } else {      ifl.setI_IsImported(false);      ifl.setProcessed(true);      ifl.saveEx();      notimported++;    }  }}  }
class C{  public MSAAccountInfo(final MSAAuthenticator authenticator,final LiveConnectSession liveConnectSession,final ILogger logger){  mAuthenticator=authenticator;  mSession=liveConnectSession;  mLogger=logger;}  }
class C{  public RectangleConstraint(double w,double h){  this(w,null,LengthConstraintType.FIXED,h,null,LengthConstraintType.FIXED);}  }
class C{  public void consolidate(RemoveAttributeTransform preceding){  for (int i=0; i < catIndexMap.length; i++)   catIndexMap[i]=preceding.catIndexMap[catIndexMap[i]];  for (int i=0; i < numIndexMap.length; i++)   numIndexMap[i]=preceding.numIndexMap[numIndexMap[i]];}  }
class C{  @Override public void updateNString(int columnIndex,String x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNString(" + columnIndex + ", "+ quote(x)+ ");");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueString.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public MultiUnion createMultiUnion(Graph[] graphs){  return new MultiUnion(graphs);}  }
class C{  public static Element createVector(RenderScript rs,DataType dt,int size){  if (size < 2 || size > 4) {    throw new RSIllegalArgumentException("Vector size out of range 2-4.");  }switch (dt) {case FLOAT_32:case FLOAT_64:case SIGNED_8:case SIGNED_16:case SIGNED_32:case SIGNED_64:case UNSIGNED_8:case UNSIGNED_16:case UNSIGNED_32:case UNSIGNED_64:case BOOLEAN:{      DataKind dk=DataKind.USER;      boolean norm=false;      int id=rs.nElementCreate(dt.mID,dk.mID,norm,size);      return new Element(id,rs,dt,dk,norm,size);    }default :{    throw new RSIllegalArgumentException("Cannot create vector of " + "non-primitive type.");  }}}  }
class C{  public WhereBuilder and(WhereBuilder where){  String condition=whereItems.size() == 0 ? " " : "AND ";  return expr(condition + "(" + where.toString()+ ")");}  }
class C{  private void resetNetworkVisited(){  for (  Node node : this.network.getNodes().values()) {    DijkstraNodeData data=getData(node);    data.resetVisited();  }}  }
class C{  public boolean addToSocialProof(long node,byte edgeType,double nodeWeight){  if (socialProofs[edgeType] == null) {    socialProofs[edgeType]=new SmallArrayBasedLongToDoubleMap();  }  socialProofs[edgeType].put(node,nodeWeight);  return true;}  }
class C{  @TruffleBoundary private static int[] incArray(int[] a,int[] dim){  int[] newA=a.clone();  for (int i=0; i < newA.length; i++) {    newA[i]++;    if (newA[i] < dim[i]) {      break;    }    newA[i]=0;  }  return newA;}  }
class C{  public void testSuccessWithSuccessAndFailureThresholds(){  CircuitBreaker breaker=new CircuitBreaker().withSuccessThreshold(3).withFailureThreshold(2);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  state.recordSuccess();  state.recordSuccess();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  public void scrollToTop(){  mAppsRecyclerView.scrollToTop();}  }
class C{  public String localName(){  return theLocalName;}  }
class C{  public Schaffer2(){  super(1,2);}  }
class C{  public String weightTrimBetaTipText(){  return "Set the beta value used for weight trimming in LogitBoost. " + "Only instances carrying (1 - beta)% of the weight from previous iteration " + "are used in the next iteration. Set to 0 for no weight trimming. "+ "The default value is 0.";}  }
class C{  public static Result oldJobHistory(){  return getJobHistory(Version.OLD);}  }
class C{  public boolean containedByTreatZeroAsMissing(Instance instance){  if (instance instanceof weka.core.SparseInstance) {    int numInstVals=instance.numValues();    int numItemSetVals=m_items.length;    for (int p1=0, p2=0; p1 < numInstVals || p2 < numItemSetVals; ) {      int instIndex=Integer.MAX_VALUE;      if (p1 < numInstVals) {        instIndex=instance.index(p1);      }      int itemIndex=p2;      if (m_items[itemIndex] > -1) {        if (itemIndex != instIndex) {          return false;        } else {          if (instance.isMissingSparse(p1)) {            return false;          }          if (m_items[itemIndex] != (int)instance.valueSparse(p1)) {            return false;          }        }        p1++;        p2++;      } else {        if (itemIndex < instIndex) {          p2++;        } else         if (itemIndex == instIndex) {          p2++;          p1++;        }      }    }  } else {    for (int i=0; i < instance.numAttributes(); i++) {      if (m_items[i] > -1) {        if (instance.isMissing(i) || (int)instance.value(i) == 0) {          return false;        }        if (m_items[i] != (int)instance.value(i)) {          return false;        }      }    }  }  return true;}  }
class C{  protected void send(final ICallback<InputStream> callback){  mBaseRequest.setHttpMethod(HttpMethod.GET);  mBaseRequest.getClient().getHttpProvider().send(this,callback,InputStream.class,null);}  }
class C{  public LabelEx(String s,Image i){  setText(s);  setIcon(i);}  }
class C{  protected int executeCriteriaReturnCountList(Locale locale,StringBuffer query) throws HibernateException {  int result=0;  Session session=null;  try {    session=getSession();    List listado=session.find("SELECT COUNT(*) FROM " + getScrCaLanguage(locale.getLanguage()).getName() + " WHERE "+ query.toString());    if (!listado.isEmpty()) {      result=((Integer)(listado.get(0))).intValue();    }  }  finally {    this.closeSession(session);  }  return result;}  }
class C{  protected SWFActions factorySWFActions(){  return new ActionWriter(this,version);}  }
class C{  public StrBuilder appendFixedWidthPadRight(Object obj,int width,char padChar){  if (width > 0) {    ensureCapacity(size + width);    String str=(obj == null ? getNullText() : obj.toString());    if (str == null) {      str="";    }    int strLen=str.length();    if (strLen >= width) {      str.getChars(0,width,buffer,size);    } else {      int padLen=width - strLen;      str.getChars(0,strLen,buffer,size);      for (int i=0; i < padLen; i++) {        buffer[size + strLen + i]=padChar;      }    }    size+=width;  }  return this;}  }
class C{  public synchronized static void shutdownInstance(){  refCount--;  if (_instance == null)   return;  if (refCount > 0)   return;  _instance.shutdown();  boolean interrupted=false;  try {    if (_instance._clientMonitor != null) {      _instance._clientMonitor.join();    }  } catch (  InterruptedException e) {    interrupted=true;    if (logger.isDebugEnabled()) {      logger.debug(":Interrupted joining with the ClientHealthMonitor Thread",e);    }  } finally {    if (interrupted) {      Thread.currentThread().interrupt();    }  }  _instance=null;  refCount=0;}  }
class C{  protected static ExifParser parse(InputStream inputStream,int options,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,options,iRef);}  }
class C{  private void sendToSubscriptionAddedMail(Subscription subscription,List<UsageLicense> usageLicenses){  if (subscription.getStatus() != SubscriptionStatus.ACTIVE) {    return;  }  EmailType emailType=useAccessInfo(subscription) ? EmailType.SUBSCRIPTION_USER_ADDED_ACCESSTYPE_DIRECT : EmailType.SUBSCRIPTION_USER_ADDED;  Long marketplaceKey=null;  if (subscription.getMarketplace() != null) {    marketplaceKey=Long.valueOf(subscription.getMarketplace().getKey());  }  SendMailPayload payload=new SendMailPayload();  for (  UsageLicense usageLicense : usageLicenses) {    String accessInfo=getAccessInfo(subscription,usageLicense.getUser());    if (isUsableAWSAccessInfo(accessInfo)) {      payload.addMailObjectForUser(usageLicense.getUser().getKey(),EmailType.SUBSCRIPTION_USER_ADDED_ACCESSINFO,new Object[]{subscription.getSubscriptionId(),getPublicDNS(accessInfo),getIPAddress(accessInfo),getKeyPairName(accessInfo)},marketplaceKey);    } else {      payload.addMailObjectForUser(usageLicense.getUser().getKey(),emailType,new Object[]{subscription.getSubscriptionId(),accessInfo},marketplaceKey);    }  }  TaskMessage message=new TaskMessage(SendMailHandler.class,payload);  serviceFacade.getTaskQueueService().sendAllMessages(Arrays.asList(message));}  }
class C{  private double minDistLevel(DBID id,int level){  final NumberVector obj=relation.get(id);  final double r=1.0 / (1 << (level - 1));  double dist=Double.POSITIVE_INFINITY;  for (int dim=0; dim < d; dim++) {    final double p_m_r=getDimForObject(obj,dim) % r;    dist=Math.min(dist,Math.min(p_m_r,r - p_m_r));  }  return dist * diameter;}  }
class C{  public static NeuronDialog createNeuronDialog(final List<Neuron> neurons){  NeuronDialog nd=new NeuronDialog(neurons);  nd.neuronPropertiesPanel=NeuronPropertiesPanel.createNeuronPropertiesPanel(nd.neuronList,nd);  nd.init();  nd.addListeners();  nd.updateHelp();  return nd;}  }
class C{  public SVGStyleSheetProcessingInstruction(String data,AbstractDocument owner,StyleSheetFactory f){  super(data,owner,f);}  }
class C{  public static void enableBarColoring(Window window){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);    disableTranslucentBars(window);  }}  }
class C{  @Override public String generateStart(){  StringBuffer docu=new StringBuffer();  int sumInst=0;  for (int cNum=0; cNum < getClusters().length; cNum++) {    SubspaceClusterDefinition cl=(SubspaceClusterDefinition)getClusters()[cNum];    docu.append("%\n");    docu.append("% Cluster: c" + cNum + "   ");switch (cl.getClusterType().getSelectedTag().getID()) {case UNIFORM_RANDOM:      docu.append("Uniform Random");    break;case TOTAL_UNIFORM:  docu.append("Total Random");break;case GAUSSIAN:docu.append("Gaussian");break;}if (cl.isInteger()) {docu.append(" / INTEGER");}docu.append("\n% ----------------------------------------------\n");docu.append("%" + cl.attributesToString());docu.append("\n% Number of Instances:            " + cl.getInstNums() + "\n");docu.append("% Generated Number of Instances:  " + cl.getNumInstances() + "\n");sumInst+=cl.getNumInstances();}docu.append("%\n% ----------------------------------------------\n");docu.append("% Total Number of Instances: " + sumInst + "\n");docu.append("%                            in " + getClusters().length + " Cluster(s)\n%");return docu.toString();}  }
class C{  private void cmd_saveChange(){  MCashBook cashBook=new MCashBook(p_ctx,p_pos.getC_CashBook_ID(),null);  Timestamp today=TimeUtil.getDay(System.currentTimeMillis());  MCash cash=MCash.get(p_ctx,p_pos.getC_CashBook_ID(),today,null);  BigDecimal initialChange=(BigDecimal)v_change.getValue();  if (cash != null && cash.get_ID() != 0 && initialChange.compareTo(cash.getEndingBalance()) != 0) {    MCashLine cl=new MCashLine(cash);    cl.setCashType(MCashLine.CASHTYPE_Difference);    cl.setAmount(initialChange.subtract(cash.getEndingBalance()));    cl.setDescription("Initial Change Before: " + cash.getEndingBalance() + " Now: "+ initialChange);    cl.saveEx();  }  v_PreviousChange.setValue(initialChange);}  }
class C{  public LocatorLayouter(){}  }
class C{  @Override protected void visit(final Resource resource){  if (StringUtils.equals(this.nodeType,resource.getValueMap().get("jcr:primaryType",String.class))) {    this.count++;  }}  }
class C{  public void removeNode(Node n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  this.removeElement(n);}  }
class C{  IdleManager(Connector<?> connector,ScheduledExecutorService schedExecitor){  this.connector=connector;  this.schedExecutor=schedExecitor;}  }
class C{  private void createComputeDescriptions(AWSComputeEnumerationCreationSubStage next){  AWSComputeDescriptionCreationState cd=new AWSComputeDescriptionCreationState();  cd.instancesToBeCreated=this.aws.instancesToBeCreated;  cd.parentTaskLink=this.aws.computeEnumerationRequest.taskReference;  cd.authCredentiaslLink=this.aws.parentAuth.documentSelfLink;  cd.tenantLinks=this.aws.parentCompute.tenantLinks;  cd.regionId=this.aws.parentCompute.description.regionId;  this.service.sendRequest(Operation.createPatch(this.service,AWSComputeDescriptionCreationAdapterService.SELF_LINK).setBody(cd).setCompletion(null));}  }
class C{  public boolean hasResolvedBindings(){  return (this.bits & RESOLVED_BINDINGS) != 0;}  }
class C{  public EaseOut(){}  }
class C{  public void checkSimpleBuilderArray(boolean registered) throws Exception {  startUp(registered);  BinaryObject binaryOne=node1.binary().buildEnum(EnumType.class.getName(),EnumType.ONE.ordinal());  BinaryObject binaryTwo=node1.binary().buildEnum(EnumType.class.getName(),EnumType.TWO.ordinal());  cacheBinary1.put(1,new BinaryObject[]{binaryOne,binaryTwo});  validateSimpleArray(registered);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFlowRegionElement(prefix,(AbstractDocument)doc);}  }
class C{  public boolean isAssignableFrom(Type rhsType){  return isAssignable(type,rhsType);}  }
class C{  public void provideErrorFeedback(Component component){  super.provideErrorFeedback(component);}  }
class C{  public void drawRangeMarker(Graphics2D g2,ContourPlot plot,ValueAxis rangeAxis,Marker marker,Rectangle2D dataArea){  if (marker instanceof ValueMarker) {    ValueMarker vm=(ValueMarker)marker;    double value=vm.getValue();    Range range=rangeAxis.getRange();    if (!range.contains(value)) {      return;    }    double y=rangeAxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);    Line2D line=new Line2D.Double(dataArea.getMinX(),y,dataArea.getMaxX(),y);    Paint paint=marker.getOutlinePaint();    Stroke stroke=marker.getOutlineStroke();    g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);    g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);    g2.draw(line);  }}  }
class C{  @Interruptible public void recordStkMap(int byteindex,byte[] byteMap,int BBLastPtr,boolean replacemap){  int mapNum=0;  if (VM.TraceStkMaps) {    VM.sysWrite(" ReferenceMaps-recordStkMap bytecode offset = ");    VM.sysWrite(byteindex);    VM.sysWrite("\n");    VM.sysWrite(" input byte map = ");    for (int j=0; j <= BBLastPtr; j++) {      VM.sysWrite(byteMap[j]);    }    VM.sysWrite("\n");    if (replacemap) {      VM.sysWrite(" ReferenceMaps-recordStkMap- replacing map at byteindex = ");      VM.sysWrite(byteindex);      VM.sysWrite("\n");    }  }  if (replacemap) {    for (mapNum=0; mapNum < mapCount; mapNum++) {      if (MCSites[mapNum] == byteindex) {        int start=mapNum * bytesPerMap();        for (int i=start; i < start + bytesPerMap(); i++) {          referenceMaps[i]=0;        }        if (VM.TraceStkMaps) {          VM.sysWrite(" ReferenceMaps-recordStkMap replacing map number = ",mapNum);          VM.sysWriteln("  for machinecode index = ",MCSites[mapNum]);        }        break;      }    }  } else {    mapNum=mapCount++;    MCSites[mapNum]=byteindex;    if (BBLastPtr == -1)     return;  }  if (VM.TraceStkMaps) {    VM.sysWrite(" ReferenceMaps-recordStkMap map id  = ");    VM.sysWrite(mapNum);    VM.sysWrite("\n");  }  int mapslot=mapNum * bytesPerMap();  int len=(BBLastPtr + 1);  int offset=0;  int convertLength;  int word=mapslot;  if (len < (BITS_PER_MAP_ELEMENT - 1)) {    convertLength=len;  } else {    convertLength=BITS_PER_MAP_ELEMENT - 1;  }  byte firstByte=convertMapElement(byteMap,offset,convertLength,BuildReferenceMaps.REFERENCE);  referenceMaps[word]=(byte)((0x000000ff & firstByte) >>> 1);  if (VM.TraceStkMaps) {    VM.sysWrite(" ReferenceMaps-recordStkMap convert first map bytes- byte number = ");    VM.sysWrite(word);    VM.sysWrite(" byte value in map = ");    VM.sysWrite(referenceMaps[word]);    VM.sysWrite(" - before shift = ");    VM.sysWrite(firstByte);    VM.sysWrite("\n");  }  word++;  len-=(BITS_PER_MAP_ELEMENT - 1);  offset+=(BITS_PER_MAP_ELEMENT - 1);  while (len > 0) {    if (len <= (BITS_PER_MAP_ELEMENT - 1)) {      convertLength=len;    } else {      convertLength=BITS_PER_MAP_ELEMENT;    }    referenceMaps[word]=convertMapElement(byteMap,offset,convertLength,BuildReferenceMaps.REFERENCE);    if (VM.TraceStkMaps) {      VM.sysWriteln(" ReferenceMaps-recordStkMap convert another map byte- byte number = ",word," byte value = ",referenceMaps[word]);    }    len-=BITS_PER_MAP_ELEMENT;    offset+=BITS_PER_MAP_ELEMENT;    word++;  }  if (VM.ReferenceMapsStatistics) {    if (!replacemap) {    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tNumber of clusters.\n" + "\t(default 2).","N",1,"-N <num>"));  result.addElement(new Option("\tInitialization method to use.\n\t0 = random, 1 = k-means++, " + "2 = canopy, 3 = farthest first.\n\t(default = 0)","init",1,"-init"));  result.addElement(new Option("\tUse canopies to reduce the number of distance calculations.","C",0,"-C"));  result.addElement(new Option("\tMaximum number of candidate canopies to retain in memory\n\t" + "at any one time when using canopy clustering.\n\t" + "T2 distance plus, data characteristics,\n\t"+ "will determine how many candidate canopies are formed before\n\t"+ "periodic and final pruning are performed, which might result\n\t"+ "in exceess memory consumption. This setting avoids large numbers\n\t"+ "of candidate canopies consuming memory. (default = 100)","-max-candidates",1,"-max-candidates <num>"));  result.addElement(new Option("\tHow often to prune low density canopies when using canopy clustering. \n\t" + "(default = every 10,000 training instances)","periodic-pruning",1,"-periodic-pruning <num>"));  result.addElement(new Option("\tMinimum canopy density, when using canopy clustering, below which\n\t" + " a canopy will be pruned during periodic pruning. (default = 2 instances)","min-density",1,"-min-density"));  result.addElement(new Option("\tThe T2 distance to use when using canopy clustering. Values < 0 indicate that\n\t" + "a heuristic based on attribute std. deviation should be used to set this.\n\t" + "(default = -1.0)","t2",1,"-t2"));  result.addElement(new Option("\tThe T1 distance to use when using canopy clustering. A value < 0 is taken as a\n\t" + "positive multiplier for T2. (default = -1.5)","t1",1,"-t1"));  result.addElement(new Option("\tDisplay std. deviations for centroids.\n","V",0,"-V"));  result.addElement(new Option("\tDon't replace missing values with mean/mode.\n","M",0,"-M"));  result.add(new Option("\tDistance function to use.\n" + "\t(default: weka.core.EuclideanDistance)","A",1,"-A <classname and options>"));  result.add(new Option("\tMaximum number of iterations.\n","I",1,"-I <num>"));  result.addElement(new Option("\tPreserve order of instances.\n","O",0,"-O"));  result.addElement(new Option("\tEnables faster distance calculations, using cut-off values.\n" + "\tDisables the calculation/output of squared errors/distances.\n","fast",0,"-fast"));  result.addElement(new Option("\tNumber of execution slots.\n" + "\t(default 1 - i.e. no parallelism)","num-slots",1,"-num-slots <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  @Override public double calculateDistance(double[] x1,double[] x2){  double norm2=norm2(x1,x2);  double exp1=sigma1 == 0.0d ? 0.0d : Math.exp((-1) * norm2 / sigma1);  double exp2=sigma2 == 0.0d ? 0.0d : Math.exp((-1) * norm2 / sigma2);  double exp3=sigma3 == 0.0d ? 0.0d : Math.exp((-1) * norm2 / sigma3);  return exp1 + exp2 - exp3;}  }
class C{  protected static void cleanDirectory(File dir){  for (  File file : dir.listFiles()) {    if (file.isDirectory()) {      cleanDirectory(file);    } else {      file.delete();    }  }  dir.delete();}  }
class C{  private SerializerReadBytes(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ElementCreatorImpl whitelistElements(ElementKey<?,?>... elementKeys){  return whitelistElements(Lists.newArrayList(elementKeys));}  }
class C{  public void redriveTask(Long taskId){  State state=statesDAO.findById(taskId);  if (isTaskRedrivable(state.getStatus()) && state.getAttemptedNoOfRetries() < state.getRetryCount()) {    logger.info("Redriving a task with Id: {} for state machine: {}",state.getId(),state.getStateMachineId());    executeStates(state.getStateMachineId(),Collections.singleton(state));  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/full-copies/{fcid}/activate") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList activateConsistencyGroupFullCopy(@PathParam("id") URI cgURI,@PathParam("fcid") URI fullCopyURI){  List<Volume> cgVolumes=verifyCGForFullCopyRequest(cgURI);  if (isIdEmbeddedInURL(cgURI)) {    validateVolumeNotPartOfApplication(cgVolumes,FULL_COPY);  }  URI fcSourceURI=verifyFullCopyForCopyRequest(fullCopyURI,cgVolumes);  return getFullCopyManager().activateFullCopy(fcSourceURI,fullCopyURI);}  }
class C{  public int convertGlyphToCharacterCode(final String glyph){  final Integer newID=translateToID.get(glyph);  if (newID == null) {    return 0;  } else {    return newID;  }}  }
class C{  private void initPopupMenus(){  m_PopupHeader=new JPopupMenu();  m_PopupHeader.addMouseListener(this);  m_PopupHeader.add(menuItemMean);  if (!isReadOnly()) {    m_PopupHeader.addSeparator();    m_PopupHeader.add(menuItemSetAllValues);    m_PopupHeader.add(menuItemSetMissingValues);    m_PopupHeader.add(menuItemReplaceValues);    m_PopupHeader.addSeparator();    m_PopupHeader.add(menuItemRenameAttribute);    m_PopupHeader.add(menuItemAttributeAsClass);    m_PopupHeader.add(menuItemDeleteAttribute);    m_PopupHeader.add(menuItemDeleteAttributes);    m_PopupHeader.add(menuItemSortInstances);  }  m_PopupHeader.addSeparator();  m_PopupHeader.add(menuItemOptimalColWidth);  m_PopupHeader.add(menuItemOptimalColWidths);  m_PopupRows=new JPopupMenu();  m_PopupRows.addMouseListener(this);  if (!isReadOnly()) {    m_PopupRows.add(menuItemUndo);    m_PopupRows.addSeparator();  }  m_PopupRows.add(menuItemCopy);  m_PopupRows.addSeparator();  m_PopupRows.add(menuItemSearch);  m_PopupRows.add(menuItemClearSearch);  if (!isReadOnly()) {    m_PopupRows.addSeparator();    m_PopupRows.add(menuItemDeleteSelectedInstance);    m_PopupRows.add(menuItemDeleteAllSelectedInstances);    m_PopupRows.add(menuItemInsertInstance);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.633 -0500",hash_original_method="D76A1821B2762F1F39CCFC0B2614F6FE",hash_generated_method="85DCEA3C9ED01CD1E637E6BEF09DDAC7") private boolean traverseGivenAxis(int direction,int axis,boolean sendEvent,String contentDescription){  WebViewCore webViewCore=mWebView.getWebViewCore();  if (webViewCore == null) {    return false;  }  AccessibilityEvent event=null;  if (sendEvent) {    event=getPartialyPopulatedAccessibilityEvent();    event.setContentDescription(contentDescription);  }  mScheduledEventStack.push(event);  if (axis == NAVIGATION_AXIS_DEFAULT_WEB_VIEW_BEHAVIOR) {    return false;  }  webViewCore.sendMessage(EventHub.MODIFY_SELECTION,direction,axis);  return true;}  }
class C{  @Override public boolean isThisAffectedByConstraintRules(FeatureStructure aContext,String aFeature,ParsedConstraints parsedConstraints) throws UIMAException {  return parsedConstraints.areThereRules(aContext.getType().getName(),aFeature);}  }
class C{  public CertAndKeyGen(String keyType,String sigAlg) throws NoSuchAlgorithmException {  keyGen=KeyPairGenerator.getInstance(keyType);  this.sigAlg=sigAlg;}  }
class C{  private void dumpStackFrame(int verbosity){  Address start, end;  if (VM.BuildForIA32) {    if (prevFp.isZero()) {      start=fp.minus(20 * BYTES_IN_ADDRESS);      Log.writeln("--- 20 words of stack frame with fp = ",fp);    } else {      start=prevFp;    }    end=fp;  } else {    start=fp;    end=fp.loadAddress();  }  for (Address loc=start; loc.LT(end); loc=loc.plus(BYTES_IN_ADDRESS)) {    Log.write(loc);    Log.write(" (");    Log.write(loc.diff(start));    Log.write("):   ");    ObjectReference value=Selected.Plan.get().loadObjectReference(loc);    Log.write(value);    Log.write(" ");    Log.flush();    if (verbosity >= 4 && MemoryManager.objectInVM(value) && loc.NE(start) && loc.NE(end))     MemoryManager.dumpRef(value); else     Log.writeln();  }  Log.writeln();}  }
class C{  public static @CheckForNull @SlashedClassName String fromFieldSignature(String signature){  if (signature.charAt(0) != 'L') {    return null;  }  return signature.substring(1,signature.length() - 1);}  }
class C{  @Override public void stop(){  for (int i=0; i < m_subFlow.size(); i++) {    Object temp=m_subFlow.elementAt(i);    if (temp instanceof BeanCommon) {      ((BeanCommon)temp).stop();    }  }}  }
class C{  public void paint(Graphics2D g){  g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  g.setColor(new Color(180,180,180));  g.setFont(new Font("Arial",Font.ITALIC | Font.BOLD,9));  g.drawString("Toast Simulation GUI      -by OpenRIO-",500,490);}  }
class C{  private static void copyFile(File src,File dst,Integer port,boolean internalCompression) throws IOException {  BufferedReader in=new BufferedReader(new InputStreamReader(new FileInputStream(src),StandardCharsets.UTF_8));  Writer out=new OutputStreamWriter(new FileOutputStream(dst),StandardCharsets.UTF_8);  for (String line=in.readLine(); null != line; line=in.readLine()) {    if (null != port)     line=line.replace("TEST_PORT",port.toString());    line=line.replace("COMPRESSION",internalCompression ? "internal" : "false");    out.write(line);  }  in.close();  out.close();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(this.getClass().getSimpleName()).append(": ");  if (prefix != null) {    sb.append(prefix);    sb.append(":");  }  sb.append(name).append("->").append(token).append(System.getProperty("line.separator"));  return sb.toString();}  }
class C{  public void removeCompressedThumbnail(){  mData.setCompressedThumbnail(null);}  }
class C{  public E removeLast(){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  @Override public int mapString(String str){  if (str == null) {    return -1;  }  int index=getIndex(str);  if (index < 0) {    if (firstValue == null) {      firstValue=new String(str);      return FIRST_VALUE_INDEX;    } else     if (secondValue == null) {      secondValue=new String(str);      return SECOND_VALUE_INDEX;    } else {      throw new AttributeTypeException("Cannot map another string for binary attribute: already mapped two strings (" + firstValue + ", "+ secondValue+ "). The third string that was tried to add: '"+ str+ "'");    }  } else {    return index;  }}  }
class C{  public static void resetCounters(){  errors=0;  warnings=0;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void iterateOnMapKey(DescriptorIterator iterator,Object element){  super.iterateOnAttributeValue(iterator,element);}  }
class C{  public PunctuationTrie<T> lookup(char ch){  int i=Arrays.binarySearch(childMap,ch);  return i >= 0 ? children[i] : null;}  }
class C{  public ReplDBMSEvent createEvent(long seqno,short fragNo,boolean lastFrag,String shardId,Timestamp timestamp){  return createEvent(seqno,fragNo,lastFrag,shardId,timestamp,0);}  }
class C{  static byte[] hexStringToByteArray(String hexString){  String s=hexString;  int len=s.length();  if (len % 2 == 1) {    s="0" + s;    len++;  }  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(s.charAt(i),16) << 4) + Character.digit(s.charAt(i + 1),16));  }  return data;}  }
class C{  public void showEnvironments(boolean update){  if (!isShowEnvironments()) {    environmentSelection.setSelection(true);    profileSelection.setSelection(false);  }  performUpdate(update);}  }
class C{  public boolean contains(long prefix_hash){  if (prefix_hash == 0) {    return false;  }  int idx=-1 * Arrays.binarySearch(hashes_idx,prefix_hash) - 1;  if (idx == cache_size) {    return false;  } else {    return (hashes_idx[idx] & PREFIX_HASH_MASK) == prefix_hash;  }}  }
class C{  public void changeAccountInfo(String username,String email,String password) throws UnsupportedEncodingException, ParseException {  String s="{\"username\":\"" + (username.isEmpty() ? this.ourUser.getName() : username) + "\",\"email\":\""+ (email.isEmpty() ? this.email : email)+ "\",\"password\":\""+ this.password+ "\",\"avatar\":\""+ this.ourUser.getAvatar()+ "\",\"new_password\":"+ (password.isEmpty() ? "null" : "\"" + password + "\"")+ "}";  Discord4J.logger.debug("Token: {}",token);  Discord4J.logger.debug(s);  try {    String response=Requests.PATCH.makeRequest(DiscordEndpoints.USERS + "@me",new StringEntity(s),new BasicNameValuePair("Authorization",token),new BasicNameValuePair("content-type","application/json; charset=UTF-8"));    JSONObject object1=(JSONObject)JSON_PARSER.parse(response);    this.token=(String)object1.get("token");  } catch (  HTTP403Exception e) {    Discord4J.logger.error("Received 403 error attempting to change account details; is your login correct?");  }}  }
class C{  public static boolean isTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;}  }
class C{  public boolean shouldExecute(){  if (this.npc.getDialogPlayer() != null) {    this.closestEntity=this.npc.getDialogPlayer();    return true;  } else {    return false;  }}  }
class C{  private void install() throws Exception {  if (!updateCenterMetadataFetched) {    jenkins.pluginManager.doCheckUpdatesServer();    updateCenterMetadataFetched=true;  }  jenkins.getUpdateCenter().getPlugin(name).deploy(true).get();}  }
class C{  public StandardXYToolTipGenerator(String formatString,DateFormat xFormat,NumberFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  private void put(final Item i){  if (index + typeCount > threshold) {    int ll=items.length;    int nl=ll * 2 + 1;    Item[] newItems=new Item[nl];    for (int l=ll - 1; l >= 0; --l) {      Item j=items[l];      while (j != null) {        int index=j.hashCode % newItems.length;        Item k=j.next;        j.next=newItems[index];        newItems[index]=j;        j=k;      }    }    items=newItems;    threshold=(int)(nl * 0.75);  }  int index=i.hashCode % items.length;  i.next=items[index];  items[index]=i;}  }
class C{  public void testPropertyApplication() throws Exception {  TungstenProperties tp=new TungstenProperties();  tp.setString("string","s1");  tp.setInt("my_int",-2);  tp.setInt("MyLong",25);  tp.setString("My_float","1.0");  tp.setString("myDouble","-1.0");  tp.setBoolean("My_Boolean",true);  tp.setString("myChar","a");  Date now=new Date();  tp.setDate("my_Date",now);  BigDecimal bd=new BigDecimal("1e+500");  tp.setObject("myBigDecimal",bd);  SampleObject.SampleEnum e=SampleObject.SampleEnum.THREE;  tp.setObject("myEnum",e);  List<String> strl=Arrays.asList("strle1","strle2","strle3");  tp.setStringList("myStringList",strl);  SampleObject so=new SampleObject();  tp.applyProperties(so);  Assert.assertEquals("String value","s1",so.getString());  Assert.assertEquals("Int value",-2,so.getMyInt());  Assert.assertEquals("Long value",25,so.getMyLong());  Assert.assertTrue("Float value",(1.0 == so.getMyFloat()));  Assert.assertTrue("Double value",(-1.0 == so.getMyDouble()));  Assert.assertEquals("Boolean value",true,so.isMyBoolean());  Assert.assertEquals("Char value",'a',so.getMyChar());  Assert.assertEquals("Date value",now,so.getMyDate());  Assert.assertEquals("BigDecimal value",bd,so.getMyBigDecimal());  Assert.assertEquals("Enum value",e,so.getMyEnum());  Assert.assertEquals("String list value",strl,so.getMyStringList());}  }
class C{  private void cancelTasks(final Iterator<LockFutureTask<? extends Object>> itr,final boolean mayInterruptIfRunning){  while (itr.hasNext()) {    final LockFutureTask<? extends Object> t=itr.next();    t.cancel(mayInterruptIfRunning);    itr.remove();  }}  }
class C{  private final int bishopEval(Position pos,int oldScore){  int score=0;  final long occupied=pos.whiteBB | pos.blackBB;  long wBishops=pos.pieceTypeBB[Piece.WBISHOP];  long bBishops=pos.pieceTypeBB[Piece.BBISHOP];  if ((wBishops | bBishops) == 0)   return 0;  long m=wBishops;  while (m != 0) {    int sq=BitBoard.numberOfTrailingZeros(m);    long atk=BitBoard.bishopAttacks(sq,occupied);    wAttacksBB|=atk;    score+=bishMobScore[Long.bitCount(atk & ~(pos.whiteBB | bPawnAttacks))];    if ((atk & bKingZone) != 0)     bKingAttacks+=Long.bitCount(atk & bKingZone);    m&=m - 1;  }  m=bBishops;  while (m != 0) {    int sq=BitBoard.numberOfTrailingZeros(m);    long atk=BitBoard.bishopAttacks(sq,occupied);    bAttacksBB|=atk;    score-=bishMobScore[Long.bitCount(atk & ~(pos.blackBB | wPawnAttacks))];    if ((atk & wKingZone) != 0)     wKingAttacks+=Long.bitCount(atk & wKingZone);    m&=m - 1;  }  boolean whiteDark=(pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskDarkSq) != 0;  boolean whiteLight=(pos.pieceTypeBB[Piece.WBISHOP] & BitBoard.maskLightSq) != 0;  boolean blackDark=(pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskDarkSq) != 0;  boolean blackLight=(pos.pieceTypeBB[Piece.BBISHOP] & BitBoard.maskLightSq) != 0;  int numWhite=(whiteDark ? 1 : 0) + (whiteLight ? 1 : 0);  int numBlack=(blackDark ? 1 : 0) + (blackLight ? 1 : 0);  if (numWhite == 2) {    final int numPawns=pos.wMtrlPawns / pV;    score+=28 + (8 - numPawns) * 3;  }  if (numBlack == 2) {    final int numPawns=pos.bMtrlPawns / pV;    score-=28 + (8 - numPawns) * 3;  }  if ((numWhite == 1) && (numBlack == 1) && (whiteDark != blackDark)&& (pos.wMtrl - pos.wMtrlPawns == pos.bMtrl - pos.bMtrlPawns)) {    final int penalty=(oldScore + score) / 2;    final int loMtrl=2 * bV;    final int hiMtrl=2 * (qV + rV + bV);    int mtrl=pos.wMtrl + pos.bMtrl - pos.wMtrlPawns - pos.bMtrlPawns;    score-=interpolate(mtrl,loMtrl,penalty,hiMtrl,0);  }  if (((wBishops | bBishops) & 0x0081000000008100L) != 0) {    if ((pos.squares[48] == Piece.WBISHOP) && (pos.squares[41] == Piece.BPAWN) && (pos.squares[50] == Piece.BPAWN))     score-=pV * 3 / 2;    if ((pos.squares[55] == Piece.WBISHOP) && (pos.squares[46] == Piece.BPAWN) && (pos.squares[53] == Piece.BPAWN))     score-=(pos.pieceTypeBB[Piece.WQUEEN] != 0) ? pV : pV * 3 / 2;    if ((pos.squares[8] == Piece.BBISHOP) && (pos.squares[17] == Piece.WPAWN) && (pos.squares[10] == Piece.WPAWN))     score+=pV * 3 / 2;    if ((pos.squares[15] == Piece.BBISHOP) && (pos.squares[22] == Piece.WPAWN) && (pos.squares[13] == Piece.WPAWN))     score+=(pos.pieceTypeBB[Piece.BQUEEN] != 0) ? pV : pV * 3 / 2;  }  return score;}  }
class C{  @Provides @Config("supportPhoneNumber") public static String provideSupportPhoneNumber(RegistryEnvironment environment){  return "+1 (888) 555 0123";}  }
class C{  public static void copyBindings(Bindings target){  requireLoad();  Bindings source=engine.getBindings(ScriptContext.ENGINE_SCOPE);  target.putAll(source);}  }
class C{  public void handleMessageEvent(StunMessageEvent e){  delegate.processRequest(e);}  }
class C{  private static URL[] makeURLs(){  ArrayList<URL> urls=new ArrayList<URL>();  String[] classpath=System.getProperty("java.class.path").split(System.getProperty("path.separator"));  for (  String cp : classpath) {    try {      urls.add(new File(cp).toURI().toURL());    } catch (    MalformedURLException e) {      e.printStackTrace();    }  }  return urls.toArray(new URL[0]);}  }
class C{  public static Bitmap Bytes2Bitmap(byte[] b){  if (b.length != 0) {    return BitmapFactory.decodeByteArray(b,0,b.length);  } else {    return null;  }}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  DerValue[] tickets=new DerValue[ticketInfo.length];  for (int i=0; i < ticketInfo.length; i++) {    tickets[i]=new DerValue(ticketInfo[i].asn1Encode());  }  temp.putSequence(tickets);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  if (nonce != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(nonce.intValue()));    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  }  if (timeStamp != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),timeStamp.asn1Encode());  }  if (usec != null) {    temp=new DerOutputStream();    temp.putInteger(BigInteger.valueOf(usec.intValue()));    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),temp);  }  if (sAddress != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x04),sAddress.asn1Encode());  }  if (rAddress != null) {    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x05),rAddress.asn1Encode());  }  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  bytes=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x1D),temp);  return bytes.toByteArray();}  }
class C{  public static void clear(){  glyphsMap.clear();}  }
class C{  private void addEndToken(int tokenType){  addToken(zzMarkedPos,zzMarkedPos,tokenType);}  }
class C{  public int sizeHot(){  int x=0;  for (  Segment<K,V> s : segments) {    x+=s.mapSize - s.queueSize - s.queue2Size;  }  return x;}  }
class C{  public static Collection unmodifiableCollection(Collection c){  return new UnmodifiableCollection(c);}  }
class C{  public static String formatSGSLOName(String sloName,String emcWorkload){  if (null != sloName && sloName.length() > 0) {    StringBuffer fastSetting=new StringBuffer(sloName).append(SPACE_STR).append(SLO);    if (null != emcWorkload && emcWorkload.length() > 0) {      fastSetting.append(SPACE_STR).append(emcWorkload).append(SPACE_STR).append(WORKLOAD);    }    return fastSetting.toString();  }  return null;}  }
class C{  public void loadInstanceField(FieldExpression fldExp){  MethodVisitor mv=controller.getMethodVisitor();  FieldNode field=fldExp.getField();  boolean holder=field.isHolder() && !controller.isInClosureConstructor();  ClassNode type=field.getType();  String ownerName=(field.getOwner().equals(controller.getClassNode())) ? controller.getInternalClassName() : BytecodeHelper.getClassInternalName(field.getOwner());  mv.visitVarInsn(ALOAD,0);  mv.visitFieldInsn(GETFIELD,ownerName,fldExp.getFieldName(),BytecodeHelper.getTypeDescription(type));  if (holder) {    mv.visitMethodInsn(INVOKEVIRTUAL,"groovy/lang/Reference","get","()Ljava/lang/Object;",false);    controller.getOperandStack().push(ClassHelper.OBJECT_TYPE);  } else {    controller.getOperandStack().push(field.getType());  }}  }
class C{  public double interceptStdErr(){  return Math.sqrt(svar0);}  }
class C{  @Override public boolean isLeapYear(int gregorianYear){  return CalendarUtils.isGregorianLeapYear(gregorianYear);}  }
class C{  private Node<K,V> findPredecessorOfLast(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> d, r;      if ((r=q.right) != null) {        if (r.indexesDeletedNode()) {          q.unlink(r);          break;        }        if (r.node.next != null) {          q=r;          continue;        }      }      if ((d=q.down) != null)       q=d; else       return q.node;    }  }}  }
class C{  public void onProfileClick(){  if (mCrossFader != null) {    if (mCrossFader.isCrossfaded()) {      mCrossFader.crossfade();    }  }  if (mAccountHeader != null) {    IProfile profile=mAccountHeader.getActiveProfile();    if (profile instanceof IDrawerItem) {      mDrawerAdapter.setDrawerItem(0,generateMiniDrawerItem((IDrawerItem)profile));    }  }}  }
class C{  @Override public Rabbit makeNewRabbit(String id,String basePackage,Boolean collectOnlyException,RabbitGroup group,Boolean hideOnConsole,LoggerType loggerType) throws AlreadyExistRabbitIDException, InvalidRabbitNameException, InvalidBasePackageException {  if (id == null) {    throw new InvalidRabbitNameException("'Null' is invalid");  }  if (id.length() < 2) {    throw new InvalidRabbitNameException("Rabbit id's length must be greater than 2 characters.");  }  if (id.contains(" ")) {    throw new InvalidRabbitNameException("Rabbit id's should not include blank");  }  if (id.contains(",")) {    throw new InvalidRabbitNameException("Rabbit id's should comma");  }  if (rabbitRepository.findById(id) != null) {    throw new AlreadyExistRabbitIDException(id);  }  if (basePackage == null || basePackage.length() < 2) {    throw new InvalidBasePackageException(String.format("Please insert base package"));  }  Rabbit rabbit=new Rabbit();  rabbit.setId(id);  rabbit.setBasePackage(basePackage);  rabbit.setRegDate(new Date());  rabbit.setCollectionOnlyException(collectOnlyException);  rabbit.setGroup(group);  rabbit.setHideOnConsole(hideOnConsole);  rabbit.setLoggerType(loggerType);  rabbitRepository.save(rabbit);  coreService.syncRabbitNameCache();  return rabbit;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected ActionErrors validate(HttpServletRequest request,UDocEnDivisionFSForm form,ActionErrors errores){  if (errores == null)   errores=new ActionErrors();  if (GenericValidator.isBlankOrNull(form.getAsunto()))   errores.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_ASUNTO,request.getLocale())));  Date fechaInicio=null;  try {    fechaInicio=form.getFechaInicioAsDate();    if (fechaInicio == null) {      errores.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_FECHA_INICIO,request.getLocale())));    } else {      if (!DateUtils.isDate(form.getFechaInicio())) {        errores.add(Constants.ERROR_DATE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA_INICIO,request.getLocale())));      }    }  } catch (  Exception e) {    errores.add(Constants.ERROR_DATE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA_INICIO,request.getLocale())));  }  Date fechaFin=null;  try {    fechaFin=form.getFechaFinAsDate();    if (fechaFin == null) {      errores.add(Constants.ERROR_REQUIRED,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_FECHA_FIN,request.getLocale())));    } else {      if (!DateUtils.isDate(form.getFechaFin())) {        errores.add(Constants.ERROR_DATE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA_FIN,request.getLocale())));      }    }  } catch (  Exception e) {    errores.add(Constants.ERROR_DATE,new ActionError(Constants.ERROR_DATE,Messages.getString(Constants.ETIQUETA_FECHA_FIN,request.getLocale())));  }  if (fechaFin != null) {    if (fechaFin.compareTo(new Date()) > 0)     errores.add(Constants.ERROR_DATE_AFTER_TODAY,new ActionError(Constants.ERROR_DATE_AFTER_TODAY,Messages.getString(Constants.ETIQUETA_FECHA_FIN,request.getLocale())));    if (fechaInicio != null && fechaInicio.compareTo(fechaFin) > 0)     errores.add(Constants.ERROR_INITDATE_AFTER_ENDDATE,new ActionError(Constants.ERROR_INITDATE_AFTER_ENDDATE));  }  return errores;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document ownerDoc;  DOMImplementation domImpl;  DocumentType docType;  String nullID=null;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("mydoc",nullID,nullID);  ownerDoc=docType.getOwnerDocument();  assertNull("nodegetownerdocument01",ownerDoc);}  }
class C{  @Override public void onCompletion(MediaPlayer mp){  setIsDone(true);  getMission().getService().onCompletion(mp);}  }
class C{  @Override public int locations(){  if (m_bHasNoMainGun) {    return NUM_PMECH_LOCATIONS - 1;  }  return NUM_PMECH_LOCATIONS;}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(StringCodingUtils.getBytes(line.toString(),cs));    }    output.write(StringCodingUtils.getBytes(lineEnding,cs));  }}  }
class C{  public boolean moveBucketForRegion(InternalDistributedMember source,InternalDistributedMember target,int bucketId){  boolean movedBucket=false;  if (getLeaderRegion().getDistributionManager().getId().equals(target)) {    movedBucket=getLeaderRegion().getDataStore().moveBucket(bucketId,source,false);  } else {    MoveBucketResponse response=MoveBucketMessage.send(target,getLeaderRegion(),bucketId,source);    if (response != null) {      movedBucket=response.waitForResponse();    }  }  return movedBucket;}  }
class C{  protected Workflow.Method createCGMethod(URI vplexURI,URI cgURI,List<URI> vplexVolumeURIs){  return new Workflow.Method(CREATE_CG_METHOD_NAME,vplexURI,cgURI,vplexVolumeURIs);}  }
class C{  public <T>T read(Class<? extends T> type,File source) throws Exception {  return read(type,source,true);}  }
class C{  private void runKillScript() throws IOException, InterruptedException {  CommandLine cmdLine=CommandLine.parse(shell.getFileFromClassLoader(pidkillerScriptFileName).map(null).orElseThrow(null));  cmdLine.addArgument(testFolder.getRoot().getAbsolutePath());  DefaultExecuteResultHandler resultHandler=shell.execute(cmdLine,scriptTimeout,environment,testFolder.getRoot());  resultHandler.waitFor(scriptTimeout);}  }
class C{  public RabinKarp(char[] pattern,int R){  throw new UnsupportedOperationException("Operation not supported yet");}  }
class C{  public double responseRateTotal(Set<? extends SampledVertex> vertices,int iteration){  if (iteration == 0)   return 1.0; else   return numVerticesSampledTotal(vertices)[iteration] / (double)numVerticesDetectedTotal(vertices)[iteration - 1];}  }
class C{  @Override public void close(){  panel.dispose();}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  synchronized public void addGCTrace(GCTrace gcTrace){  ArgumentChecking.notNull(gcTrace,"gcTrace");  String gcTraceName=createUniqueGCTraceName(gcTrace);  gcTrace.setName(gcTraceName);  gcTrace.setAddedDate(new Date(System.currentTimeMillis()));  gcTrace.addListener(this);  add(gcTrace);  recreateAllGCActivityNames();  listeners.callGCTraceAdded(gcTrace);  gcTrace.afterAddingToGCTraceSet();}  }
class C{  public void showSecondaryMenu(){  mSlidingMenu.showSecondaryMenu();}  }
class C{  public InternalSiteServiceClient(Site site){  this.site=site;  setServer(site.getVipEndPoint());}  }
class C{  private void generateSetterMethod(final IVariableBinding field,ASTRewrite astRewrite,final ListRewrite rewrite) throws CoreException, OperationCanceledException {  final ITypeBinding type=field.getDeclaringClass();  final String name=GetterSetterUtil.getSetterName(field,null);  final MethodDeclaration existing=GetterSetterUtil.findMethod(name,new String[]{field.getType().getQualifiedName()},false,typeDeclaration);  if (existing == null || !querySkipExistingMethods(existing)) {    BodyDeclaration sibling=null;    int ins=0;    if (existing != null) {      sibling=findNextSibling(existing);      removeExistingAccessor(existing,rewrite);      ins=sibling.getStartPosition();    } else     ins=insertPos;    ASTNode insertion=StubUtility2.getNodeToInsertBefore(rewrite,ins);    addNewAccessor(type,field,GetterSetterUtil.getSetterStub(field,name,fSettings.createComments,fVisibility | (field.getModifiers() & Flags.AccStatic)),rewrite,insertion);    if (Flags.isFinal(field.getModifiers())) {      ASTNode fieldDecl=getField(field);      if (fieldDecl != null) {        ModifierRewrite.create(astRewrite,fieldDecl).setModifiers(0,Modifier.FINAL,null);      }    }  }}  }
class C{  synchronized public static void stop(){  if (task != null) {    task.cancel();  }}  }
class C{  public void testConstructorNegativeInput(){  try {    mFReal=new FormatReal(-100,0);    fail("should throw illegal argument exception");  } catch (  final IllegalArgumentException e) {  }}  }
class C{  static public void createReceipt(MPPOrder order,Timestamp movementDate,BigDecimal qtyDelivered,BigDecimal qtyToDeliver,BigDecimal qtyScrap,BigDecimal qtyReject,int M_Locator_ID,int M_AttributeSetInstance_ID){  if (qtyToDeliver.signum() != 0 || qtyScrap.signum() != 0 || qtyReject.signum() != 0) {    MPPCostCollector.createCollector(order,order.getM_Product_ID(),M_Locator_ID,M_AttributeSetInstance_ID,order.getS_Resource_ID(),0,0,MDocType.getDocType(MDocType.DOCBASETYPE_ManufacturingCostCollector),MPPCostCollector.COSTCOLLECTORTYPE_MaterialReceipt,movementDate,qtyToDeliver,qtyScrap,qtyReject,0,Env.ZERO);  }  order.setDateDelivered(movementDate);  if (order.getDateStart() == null) {    order.setDateStart(movementDate);  }  BigDecimal DQ=qtyDelivered;  BigDecimal SQ=qtyScrap;  BigDecimal OQ=qtyToDeliver;  if (DQ.add(SQ).compareTo(OQ) >= 0) {    order.setDateFinish(movementDate);  }  order.saveEx();}  }
class C{  public void scaleLayout(double scaleX,double scaleY){  Point2dUtils.Translater translater=Point2dUtils.newScaleTranslater(scaleX,scaleY);  Map<GraphNode,Point2D> changes=Point2dUtils.translateNodes(getExposedGraph().getNodes(),getNodeLocations(),translater);  editNodeLocations(changes);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:33.141 -0500",hash_original_method="663240D4ECB8ED0B06161F54AFBC5E98",hash_generated_method="15CE50ABB94FDE3D22996CF27581D9F6") public void disableUsbMassStorage(){  try {    mMountService.setUsbMassStorageEnabled(false);  } catch (  Exception ex) {    Log.e(TAG,"Failed to disable UMS",ex);  }}  }
class C{  public int writeAll(ByteBuffer source,int nanoSecondDelay) throws IOException, InterruptedException {  int totalBytesWritten=0;  while (source.hasRemaining()) {    int bytesWritten=this.socketChannel.write(source);    totalBytesWritten+=bytesWritten;    if (bytesWritten == 0) {      Thread.sleep(0,nanoSecondDelay);    }  }  return totalBytesWritten;}  }
class C{  public Partition run(IDoubleMatrix similarity){  DoubleMatrixOps.assertDiagonallyDominant(similarity);  DoubleMatrixOps.assertSymmetric(similarity,1e-16);  if (similarity.getRowNum() <= 2) {    throw new AdeCoreIllegalArgumentException("Minimal matrix size 3x3");  }  mSimilarity=similarity;  if (mRunsSummary != null) {    mRunsSummary.clear();  }  myPrintln(1,"Starting " + mRunNum + " runs");  Partition bestPartition=null;  mConverged=false;  for (int i=0; i < mRunNum; ++i) {    Partition partition;    long startTime=System.currentTimeMillis();    partition=execute();    long stopTime=System.currentTimeMillis();    long duration=stopTime - startTime;    if (mRunsSummary != null) {      mRunsSummary.add(new IClustRunSummary(partition.mTotalScore,mTrials,duration,partition.mSeed,mIdleTrials));    }    if (bestPartition == null || partition.mTotalScore > bestPartition.mTotalScore) {      mConverged=(mTrials < mMaxTrialNum);      bestPartition=partition;    }    if (partition.getScore() >= 1) {      break;    }  }  myPrintln(1,"Finished all runs with score=" + (bestPartition != null ? bestPartition.mTotalScore : 0));  return bestPartition;}  }
class C{  private String constructFaultMessage(){  return this.fault.getFaultCode() + ": " + this.fault.getFaultString();}  }
class C{  public void emitDirect(int taskId,List<Object> tuple){  emitDirect(taskId,Utils.DEFAULT_STREAM_ID,tuple);}  }
class C{  public void onScanMultipleGroups(View view){  Intent intent=new Intent(this,RandomScanActivity.class);  intent.putExtra(RandomScanActivity.EXTRAS_LICENSE_KEY,LICENSE_KEY);  RandomScanElement iban=new RandomScanElement(R.string.iban_title,IBAN_PARSER_NAME,new IbanParserSettings());  iban.setParserGroup(PARSER_GROUP_PAYMENT);  RandomScanElement amount=new RandomScanElement(R.string.amount_title,AMOUNT_PARSER_NAME,new AmountParserSettings());  amount.setParserGroup(PARSER_GROUP_PAYMENT);  RandomScanElement date=new RandomScanElement(R.string.date_title,DATE_PARSER_NAME,new DateParserSettings());  date.setOptional(true);  date.setParserGroup(PARSER_GROUP_PAYMENT);  RandomScanElement email=new RandomScanElement(R.string.email_title,EMAIL_PARSER_NAME,new EMailParserSettings());  email.setParserGroup(PARSER_GROUP_EMAIL);  email.setOptional(true);  RandomScanElement[] elemsArray=new RandomScanElement[]{iban,amount,date,email};  intent.putExtra(RandomScanActivity.EXTRAS_SCAN_CONFIGURATION,elemsArray);  intent.putExtra(RandomScanActivity.EXTRAS_BEEP_RESOURCE,R.raw.beep);  startActivityForResult(intent,MULTIPLE_GROUPS_REQ_CODE);}  }
class C{  public void init(int maxCharCode,LexScan scanner){  if (maxCharCode < 0) {    throw new IllegalArgumentException("maxCharCode " + maxCharCode + " is negative.");  } else   if (maxCharCode > maxChar) {    throw new IllegalArgumentException("maxCharCode " + Integer.toHexString(maxCharCode) + " is larger than maxChar "+ Integer.toHexString(maxChar));  }  maxCharUsed=maxCharCode;  this.scanner=scanner;  classes=new ArrayList<IntCharSet>();  classes.add(new IntCharSet(new Interval(0,maxCharCode)));}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getHitShape().contains(p);}  }
class C{  public static void addCustomCommands(String commands,ContextMenu m){  Matcher matcher=CUSTOM_COMMANDS_PATTERN.matcher(commands);  boolean sep=false;  while (matcher.find()) {    String match=matcher.group();    if (match.equals("|")) {      sep=true;    } else {      String command=matcher.group(2);      String submenu=null;      if (match.startsWith("//")) {        submenu=CUSTOM_COMMANDS_SUBMENU;      }      if (sep) {        m.addSeparator(submenu);      }      m.addSubItem("command" + command,Helper.replaceUnderscoreWithSpace(command),submenu);      sep=false;    }  }}  }
class C{  public GeoPickHistory add(Long id,double latitude,double longitude){  List<GeoPointDto> data=this.load();  if (data == null)   data=new ArrayList<GeoPointDto>();  String idAsString=remove(id,latitude,longitude);  if (id != null)   idAsString=id.toString();  data.add(new GeoPointDto().setId(idAsString).setLatitude(latitude).setLongitude(longitude));  while (data.size() > mMaxSize)   data.remove(0);  return this;}  }
class C{  void onDragExit(){  if (mDragging) {    mDragging=false;  }  mDragCell[0]=mDragCell[1]=-1;  mDragOutlineAnims[mDragOutlineCurrent].animateOut();  mDragOutlineCurrent=(mDragOutlineCurrent + 1) % mDragOutlineAnims.length;  revertTempState();  setIsDragOverlapping(false);}  }
class C{  public SampleVcpcRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  private String smallToString(int radix){  if (signum == 0) {    return "0";  }  int maxNumDigitGroups=(4 * mag.length + 6) / 7;  String digitGroup[]=new String[maxNumDigitGroups];  BigInteger tmp=this.abs();  int numGroups=0;  while (tmp.signum != 0) {    BigInteger d=longRadix[radix];    MutableBigInteger q=new MutableBigInteger(), a=new MutableBigInteger(tmp.mag), b=new MutableBigInteger(d.mag);    MutableBigInteger r=a.divide(b,q);    BigInteger q2=q.toBigInteger(tmp.signum * d.signum);    BigInteger r2=r.toBigInteger(tmp.signum * d.signum);    digitGroup[numGroups++]=Long.toString(r2.longValue(),radix);    tmp=q2;  }  StringBuilder buf=new StringBuilder(numGroups * digitsPerLong[radix] + 1);  if (signum < 0) {    buf.append('-');  }  buf.append(digitGroup[numGroups - 1]);  for (int i=numGroups - 2; i >= 0; i--) {    int numLeadingZeros=digitsPerLong[radix] - digitGroup[i].length();    if (numLeadingZeros != 0) {      buf.append(zeros[numLeadingZeros]);    }    buf.append(digitGroup[i]);  }  return buf.toString();}  }
class C{  private boolean readyToConnect(){  long now=System.currentTimeMillis();  long lastExchangeMillis=mStore.getLong(LAST_EXCHANGE_TIME_KEY,-1);  boolean timeSinceLastOK;  if (lastExchangeMillis == -1) {    timeSinceLastOK=true;  } else   if (now - lastExchangeMillis < TIME_BETWEEN_EXCHANGES_MILLIS) {    timeSinceLastOK=false;  } else {    timeSinceLastOK=true;  }  if (!USE_MINIMAL_LOGGING) {    log.info("Ready to connect? " + (timeSinceLastOK && (getConnecting() == null)));    log.info("Connecting: " + getConnecting());    log.info("timeSinceLastOK: " + timeSinceLastOK);  }  return timeSinceLastOK && (getConnecting() == null);}  }
class C{  public void saveFrame(File file) throws IOException {  if (!mEglCore.isCurrent(mEGLSurface)) {    throw new RuntimeException("Expected EGL context/surface is not current");  }  String filename=file.toString();  int width=getWidth();  int height=getHeight();  IntBuffer ib=IntBuffer.allocate(width * height);  GLES20.glReadPixels(0,0,width,height,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,ib);  OpenGlUtils.checkGlError("glReadPixels");  BufferedOutputStream bos=null;  try {    bos=new BufferedOutputStream(new FileOutputStream(filename));    Bitmap bmp=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);    bmp.copyPixelsFromBuffer(IntBuffer.wrap(ib.array()));    bmp.compress(Bitmap.CompressFormat.PNG,90,bos);    bmp.recycle();  }  finally {    if (bos != null)     bos.close();  }  Log.d(TAG,"Saved " + width + "x"+ height+ " frame as '"+ filename+ "'");}  }
class C{  public ConsoleAppender(Layout layout,String target){  setLayout(layout);  setTarget(target);  activateOptions();}  }
class C{  public static DateTimeFormatter generateDefaultFormatterBCE(Locale pickerLocale){  String displayFormatterBCPattern=DateTimeFormatterBuilder.getLocalizedDateTimePattern(FormatStyle.LONG,null,IsoChronology.INSTANCE,pickerLocale);  displayFormatterBCPattern=displayFormatterBCPattern.replace("y","u");  DateTimeFormatter displayFormatterBC=new DateTimeFormatterBuilder().parseLenient().parseCaseInsensitive().appendPattern(displayFormatterBCPattern).toFormatter(pickerLocale);  String language=pickerLocale.getLanguage();  if ("tr".equals(language)) {    displayFormatterBC=PickerUtilities.createFormatterFromPatternString("dd MMMM uuuu",pickerLocale);  }  return displayFormatterBC;}  }
class C{  protected void pruneEnd(){  double errorsLeaf, errorsTree;  errorsTree=getEstimatedErrorsForTree();  errorsLeaf=getEstimatedErrorsForLeaf();  if (Utils.smOrEq(errorsLeaf,errorsTree + 0.1)) {    m_isLeaf=true;    m_sons=null;    m_localModel=new NoSplit(localModel().distribution());  }}  }
class C{  public FixedPath(final List<Node> nodes,final boolean loop){  this.nodes=nodes;  this.loop=loop;  pos=0;  if (nodes.isEmpty()) {    currentGoal=null;  } else {    currentGoal=nodes.get(0);  }}  }
class C{  protected void drawText(String text1,String text2,int x,int y,Canvas c){  if (textPaint == null) {    Paint p=new Paint();    p.setTypeface(RobotoLightTypeface.getInstance(context));    p.setColor(textColor);    p.setTextSize(14 * pixelDensity);    this.textPaint=p;  }  float w=textPaint.measureText(text1,0,text1.length());  int offset=(int)w / 2;  c.drawText(text1,x - offset,y + (18f * pixelDensity),textPaint);  w=textPaint.measureText(text2,0,text2.length());  offset=(int)w / 2;  c.drawText(text2,x - offset,y + (36f * pixelDensity),textPaint);}  }
class C{  public static void clear(){  EndpointManager it=getEndpointManager();  if (it.default_endpoint != null)   it.default_endpoint.clear();  if (it.default_secure_endpoint != null)   it.default_secure_endpoint.clear();  if (it.default_tcp_endpoint != null)   it.default_tcp_endpoint.clear();}  }
class C{  @SuppressWarnings("unchecked") @Override public Object apply(String source,int lineNo,int columnNo,Object funcBody,Vector namesVec,Vector argsVec) throws BSFException {  throw new BSFException("The apply method is not yet supported for simple-methods");}  }
class C{  @Override public void onInit(List<? extends IndexCommit> commits) throws IOException {  if (commits.isEmpty()) {    return;  }  log.debug("SolrDeletionPolicy.onInit: commits: {}",new CommitsLoggingDebug(commits));  updateCommits(commits);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TN4_CLASSIFIER__DECLARED_TYPE_ACCESS_MODIFIER:    setDeclaredTypeAccessModifier(DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT);  return;case TypesPackage.TN4_CLASSIFIER__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime(DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT);return;case TypesPackage.TN4_CLASSIFIER__DYNAMIZABLE:setDynamizable(DYNAMIZABLE_EDEFAULT);return;case TypesPackage.TN4_CLASSIFIER__TYPING_STRATEGY:setTypingStrategy(TYPING_STRATEGY_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void processStarts() throws OperatorException {  applyCount.set(0);  applyCountAtLastExecution=0;}  }
class C{  public void emitInvokedynamic(int desc,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokedynamic);  if (!alive)   return;  emit2(desc);  emit2(0);  state.pop(argsize);  state.push(mtype.getReturnType());}  }
class C{  public void removeHeader(String header){  clientHeaderMap.remove(header);}  }
class C{  protected Component(){  initLaf(getUIManager());}  }
class C{  public String threadDump(){  StringBuilder dump=new StringBuilder();  int retries=0;  while (retries < CONNECT_RETRIES) {    try {      if (canDumpLocks) {        if (tmbean.isObjectMonitorUsageSupported() && tmbean.isSynchronizerUsageSupported()) {          dumpThreadInfoWithLocks(dump);        }      } else {        dumpThreadInfo(dump);      }      retries=CONNECT_RETRIES;    } catch (    NullPointerException npe) {      if (retries >= CONNECT_RETRIES) {        JOptionPane.showMessageDialog(null,"Error requesting dump using the JMX Connection. Remote VM returned nothing.\n" + "You can try to reconnect or just simply try to request a dump again.","Error during requesting Dump",JOptionPane.ERROR_MESSAGE);        return ("");      }      try {        Thread.sleep(1000);      } catch (      InterruptedException ex) {        ex.printStackTrace();      }      retries++;    }  }  dump.append("\n<EndOfDump>\n\n");  return (dump.toString());}  }
class C{  public byte[] generateSignature() throws OpenStegoException {  Random rand=null;  Signature sig=null;  rand=new Random(StringUtil.passwordHash(this.config.getPassword()));  sig=new Signature(rand);  return sig.getSigData();}  }
class C{  private static byte[] generateSeed(){  try {    ByteArrayOutputStream seedBuffer=new ByteArrayOutputStream();    DataOutputStream seedBufferOut=new DataOutputStream(seedBuffer);    seedBufferOut.writeLong(System.currentTimeMillis());    seedBufferOut.writeLong(System.nanoTime());    seedBufferOut.writeInt(Process.myPid());    seedBufferOut.writeInt(Process.myUid());    seedBufferOut.write(BUILD_FINGERPRINT_AND_DEVICE_SERIAL);    seedBufferOut.close();    return seedBuffer.toByteArray();  } catch (  IOException e) {    throw new SecurityException("Failed to generate seed",e);  }}  }
class C{  @Override public Iterator<Map.Entry<String,FieldAnalysis>> iterator(){  return fieldAnalysisByFieldName.entrySet().iterator();}  }
class C{  private void decryptLastByte(byte lastIvByte){  int largestPadding;  if (firstPaddingBytes.size() == 1) {    largestPadding=firstPaddingBytes.get(0);  } else {    largestPadding=secondPaddingBytes.get(0);  }  LOG.debug("first padding bytes: " + firstPaddingBytes.toString());  LOG.debug("second padding bytes: " + secondPaddingBytes.toString());  if (!processingLastBlock) {    iv[blockSize - 1]=(byte)(0x11 ^ largestPadding);  }  byte decryptedLastByte=(byte)(lastIvByte ^ (0x10 ^ largestPadding));  properties.setByte(blockSize - 1,decryptedLastByte);}  }
class C{  public boolean isAttrFlagSet(String name,int flags){  return (null != m_attrs) ? ((m_attrs.getIgnoreCase(name) & flags) != 0) : false;}  }
class C{  private AdaBoostModel trainBoostingModel(ExampleSet trainingSet) throws OperatorException {  log("Total weight of example set at the beginning: " + this.performance);  Vector<Model> ensembleModels=new Vector<Model>();  Vector<Double> ensembleWeights=new Vector<Double>();  final int iterations=this.getParameterAsInt(PARAMETER_ITERATIONS);  for (int i=0; (i < iterations && this.performance > 0); i++) {    this.currentIteration=i;    ExampleSet iterationSet=(ExampleSet)trainingSet.clone();    Model model=applyInnerLearner(iterationSet);    iterationSet=model.apply(iterationSet);    AdaBoostPerformanceMeasures wp=new AdaBoostPerformanceMeasures(iterationSet);    this.performance=wp.reweightExamples(iterationSet);    PredictionModel.removePredictedLabel(iterationSet);    log("Total weight of example set after iteration " + (this.currentIteration + 1) + " is "+ this.performance);    if (this.isModelUseful(wp) == false) {      log("Discard model because of low advantage on training data.");      return new AdaBoostModel(trainingSet,ensembleModels,ensembleWeights);    }    ensembleModels.add(model);    double errorRate=wp.getErrorRate();    double weight;    if (errorRate == 0) {      weight=Double.POSITIVE_INFINITY;    } else {      weight=Math.log((1.0d - errorRate) / errorRate);    }    ensembleWeights.add(weight);  }  AdaBoostModel resultModel=new AdaBoostModel(trainingSet,ensembleModels,ensembleWeights);  return resultModel;}  }
class C{  public String[][][] attributeNames(){  int numValues=m_classAttribute.numValues();  String[][][] attributeNames=new String[numValues][numValues][];  for (int i=0; i < numValues; i++) {    for (int j=i + 1; j < numValues; j++) {      int numAttributes=m_classifiers[i][j].m_sparseIndices.length;      String[] attrNames=new String[numAttributes];      for (int k=0; k < numAttributes; k++) {        attrNames[k]=m_classifiers[i][j].m_data.attribute(m_classifiers[i][j].m_sparseIndices[k]).name();      }      attributeNames[i][j]=attrNames;    }  }  return attributeNames;}  }
class C{  public StandardChartTheme(String name){  this(name,false);}  }
class C{  public void visitClass(ClassNode classNode){  Map<Class<? extends ASTTransformation>,Set<ASTNode>> baseTransforms=classNode.getTransforms(phase);  if (!baseTransforms.isEmpty()) {    final Map<Class<? extends ASTTransformation>,ASTTransformation> transformInstances=new HashMap<Class<? extends ASTTransformation>,ASTTransformation>();    for (    Class<? extends ASTTransformation> transformClass : baseTransforms.keySet()) {      try {        transformInstances.put(transformClass,transformClass.newInstance());      } catch (      InstantiationException e) {        source.getErrorCollector().addError(new SimpleMessage("Could not instantiate Transformation Processor " + transformClass,source));      }catch (      IllegalAccessException e) {        source.getErrorCollector().addError(new SimpleMessage("Could not instantiate Transformation Processor " + transformClass,source));      }    }    transforms=new HashMap<ASTNode,List<ASTTransformation>>();    for (    Map.Entry<Class<? extends ASTTransformation>,Set<ASTNode>> entry : baseTransforms.entrySet()) {      for (      ASTNode node : entry.getValue()) {        List<ASTTransformation> list=transforms.get(node);        if (list == null) {          list=new ArrayList<ASTTransformation>();          transforms.put(node,list);        }        list.add(transformInstances.get(entry.getKey()));      }    }    targetNodes=new LinkedList<ASTNode[]>();    super.visitClass(classNode);    for (    ASTNode[] node : targetNodes) {      for (      ASTTransformation snt : transforms.get(node[0])) {        if (snt instanceof CompilationUnitAware) {          ((CompilationUnitAware)snt).setCompilationUnit(context.getCompilationUnit());        }        snt.visit(node,source);      }    }  }}  }
class C{  public void revert(){  this.loca=null;  this.setModelChanged(false);}  }
class C{  public InternalGemFireException(String message){  super(message);}  }
class C{  public static void mapColumns(IndexColumn[] indexColumns,Table table){  for (  IndexColumn col : indexColumns) {    col.column=table.getColumn(col.columnName);  }}  }
class C{  public String useVariant1TipText(){  return "set true to use variant 1 of the paper, otherwise use variant 2.";}  }
class C{  public static final int[] threshold(double rpred[],String ts){  int L=rpred.length;  double t[]=thresholdStringToArray(ts,L);  int ypred[]=new int[L];  for (int j=0; j < L; j++) {    ypred[j]=(rpred[j] >= t[j]) ? 1 : 0;  }  return ypred;}  }
class C{  public static boolean isValidIfd(int ifdId){  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;}  }
class C{  @Override public PilotingRollData addEntityBonuses(PilotingRollData roll){  int[] locsToCheck=new int[2];  locsToCheck[0]=Mech.LOC_RLEG;  locsToCheck[1]=Mech.LOC_LLEG;  if (hasFunctionalLegAES()) {    roll.addModifier(-2,"AES bonus");  }  for (int i=0; i < locsToCheck.length; i++) {    int loc=locsToCheck[i];    if (isLocationBad(loc)) {      roll.addModifier(5,getLocationName(loc) + " destroyed");    } else {      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_HIP,loc) > 0) {        roll.addModifier(2,getLocationName(loc) + " Hip Actuator destroyed");        if (!game.getOptions().booleanOption("tacops_leg_damage")) {          continue;        }      }      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_UPPER_LEG,loc) > 0) {        roll.addModifier(1,getLocationName(loc) + " Upper Leg Actuator destroyed");      }      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_LOWER_LEG,loc) > 0) {        roll.addModifier(1,getLocationName(loc) + " Lower Leg Actuator destroyed");      }      if (getBadCriticals(CriticalSlot.TYPE_SYSTEM,Mech.ACTUATOR_FOOT,loc) > 0) {        roll.addModifier(1,getLocationName(loc) + " Foot Actuator destroyed");      }    }  }  return super.addEntityBonuses(roll);}  }
class C{  public static void write(float latPoint,float lonPoint,int offset_x1,int offset_y1,String stuff,String font,int just,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.TEXT_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_TEXT);  dos.writeByte(RENDERTYPE_OFFSET);  dos.writeFloat(latPoint);  dos.writeFloat(lonPoint);  dos.writeInt(offset_x1);  dos.writeInt(offset_y1);  dos.writeByte(just);  properties.setProperty(LPC_LINKTEXTSTRING,stuff);  properties.setProperty(LPC_LINKTEXTFONT,font);  properties.write(dos);}  }
class C{  protected MiniFluo startMiniFluo() throws AlreadyInitializedException, TableExistsException {  final List<ObserverSpecification> observers=new ArrayList<>();  observers.add(new ObserverSpecification(TripleObserver.class.getName()));  observers.add(new ObserverSpecification(StatementPatternObserver.class.getName()));  observers.add(new ObserverSpecification(JoinObserver.class.getName()));  observers.add(new ObserverSpecification(FilterObserver.class.getName()));  final HashMap<String,String> exportParams=new HashMap<>();  final RyaExportParameters ryaParams=new RyaExportParameters(exportParams);  ryaParams.setExportToRya(true);  ryaParams.setRyaInstanceName(RYA_INSTANCE_NAME);  ryaParams.setAccumuloInstanceName(instanceName);  ryaParams.setZookeeperServers(zookeepers);  ryaParams.setExporterUsername(ITBase.ACCUMULO_USER);  ryaParams.setExporterPassword(ITBase.ACCUMULO_PASSWORD);  final ObserverSpecification exportObserverConfig=new ObserverSpecification(QueryResultObserver.class.getName(),exportParams);  observers.add(exportObserverConfig);  final FluoConfiguration config=new FluoConfiguration();  config.setMiniStartAccumulo(false);  config.setAccumuloInstance(instanceName);  config.setAccumuloUser(ACCUMULO_USER);  config.setAccumuloPassword(ACCUMULO_PASSWORD);  config.setInstanceZookeepers(zookeepers + "/fluo");  config.setAccumuloZookeepers(zookeepers);  config.setApplicationName(FLUO_APP_NAME);  config.setAccumuloTable("fluo" + FLUO_APP_NAME);  config.addObservers(observers);  FluoFactory.newAdmin(config).initialize(new FluoAdmin.InitializationOptions().setClearTable(true).setClearZookeeper(true));  return FluoFactory.newMiniFluo(config);}  }
class C{  public Knowledge2(){  this.forbiddenRulesSpecs=new ArrayList<>();  this.requiredRulesSpecs=new ArrayList<>();  this.knowledgeGroupRules=new HashMap<>();  this.tierSpecs=new ArrayList<>();  this.namesToVars=new HashMap<>();}  }
class C{  public void count(T element){  count(element,1);}  }
class C{  private void checkForActivityStartTimeAndSimulationTime(){  BufferedWriter writer=IOUtils.getBufferedWriter(this.outputDir + "analysis/checkForActStartTime.txt");  try {    writer.write("personId \t activityType \t activityEndTime\n");    double simEndTime=LoadMyScenarios.getSimulationEndTime(configFile);    for (    Person p : sc.getPopulation().getPersons().values()) {      for (      PlanElement pe : p.getSelectedPlan().getPlanElements()) {        if (pe instanceof Activity) {          double actEndTime=((Activity)pe).getEndTime();          if (actEndTime > simEndTime) {            LOG.error("Activity end time is " + actEndTime + " whereas simulation end time is "+ simEndTime);            writer.write(p.getId() + "\t" + ((Activity)pe).getType()+ "\t"+ actEndTime+ "\n");          }        }      }    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written in file. Reason: " + e);  }}  }
class C{  public int size(){  return _queue.size();}  }
class C{  public void writeLong(long x){  writeInt((int)(x >>> 32));  writeInt((int)x);}  }
class C{  public static String makeMetaDir(String specDir,String fromChkpt){  if (fromChkpt != null) {    return fromChkpt;  }  String metadir=TLCGlobals.metaDir;  if (metadir == null) {    metadir=specDir + TLCGlobals.metaRoot + FileUtil.separator;  }  SimpleDateFormat sdf;  if (Boolean.getBoolean(FileUtil.class.getName() + ".milliseconds")) {    sdf=new SimpleDateFormat("yy-MM-dd-HH-mm-ss.SSS");  } else {    sdf=new SimpleDateFormat("yy-MM-dd-HH-mm-ss");  }  metadir+=sdf.format(new Date());  File filedir=new File(metadir);  Assert.check(!filedir.exists(),EC.SYSTEM_METADIR_EXISTS,metadir);  Assert.check(filedir.mkdirs(),EC.SYSTEM_METADIR_CREATION_ERROR,metadir);  return metadir;}  }
class C{  boolean isDtoInterface(Class<?> potentialDto){  for (  DtoImpl dto : getDtoInterfaces()) {    if (dto.getDtoInterface().equals(potentialDto)) {      return true;    }  }  return false;}  }
class C{  public SemEstimator(DataSet dataSet,SemPm semPm){  this(dataSet,semPm,null);}  }
class C{  public static ByteOrder nativeOrder(){  return NATIVE_ORDER;}  }
class C{  public int hashCode(){  return items().hashCode();}  }
class C{  private Stream<WordToken> removeAdditionalWords(List<WordToken> words,final PatternExtract pe,final Set<WordToken> entityWords){  return words.stream().filter(null).filter(null).filter(null);}  }
class C{  public void actionPerformed(ActionEvent e){}  }
class C{  public static boolean isWifiConnected(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  if (connectivityManager == null)   return false;  return connectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI).isConnected();}  }
class C{  public void remove(){  _editor.removeFromContents(this);  cleanup();  active=false;}  }
class C{  @Deprecated public static PutResourceParams create(@NotNull String container,@NotNull String targetPath){  return new PutResourceParams().withContainer(container).withTargetPath(targetPath);}  }
class C{  public String toString(){  return Byte.toString(getValue());}  }
class C{  public CloudObject[] fetch(String[] cloudIds) throws CloudException {  CloudObject[] objs=new CloudObject[cloudIds.length];  for (int iter=0; iter < objs.length; iter++) {    objs[iter]=new CloudObject();    objs[iter].setCloudId(cloudIds[iter]);  }  int err=refresh(objs);  if (err == RETURN_CODE_SUCCESS) {    return objs;  }  throw new CloudException(err);}  }
class C{  private static void excludeRemoveInstruction(String varName,ArrayList<Instruction> deleteInst){  for (int i=0; i < deleteInst.size(); i++) {    Instruction inst=deleteInst.get(i);    if ((inst.getType() == INSTRUCTION_TYPE.CONTROL_PROGRAM || inst.getType() == INSTRUCTION_TYPE.SPARK) && ((CPInstruction)inst).getCPInstructionType() == CPINSTRUCTION_TYPE.Variable && ((VariableCPInstruction)inst).isRemoveVariable(varName)) {      deleteInst.remove(i);    }  }}  }
class C{  private DateBuilder(TimeZone tz,Locale lc){  Calendar cal=Calendar.getInstance(tz,lc);  this.tz=tz;  this.lc=lc;  month=cal.get(Calendar.MONTH) + 1;  day=cal.get(Calendar.DAY_OF_MONTH);  year=cal.get(Calendar.YEAR);  hour=cal.get(Calendar.HOUR_OF_DAY);  minute=cal.get(Calendar.MINUTE);  second=cal.get(Calendar.SECOND);}  }
class C{  StatementPatternNode stmtPatternWithVar(final String varName,final boolean optional){  final StatementPatternNode spn=(StatementPatternNode)new Helper(){{      tmp=statementPatternNode(varNode(varName),constantNode(a),constantNode(b));    }  }.getTmp();  spn.setOptional(optional);  return spn;}  }
class C{  void init(int opmode,Key key,AlgorithmParameterSpec params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  if (((opmode == Cipher.DECRYPT_MODE) || (opmode == Cipher.UNWRAP_MODE)) && (params == null)) {    throw new InvalidAlgorithmParameterException("Parameters " + "missing");  }  if ((key == null) || (key.getEncoded() == null) || !(key.getAlgorithm().regionMatches(true,0,"PBE",0,3))) {    throw new InvalidKeyException("Missing password");  }  if (params == null) {    salt=new byte[8];    random.nextBytes(salt);  } else {    if (!(params instanceof PBEParameterSpec)) {      throw new InvalidAlgorithmParameterException("Wrong parameter type: PBE expected");    }    salt=((PBEParameterSpec)params).getSalt();    if (salt.length != 8) {      throw new InvalidAlgorithmParameterException("Salt must be 8 bytes long");    }    iCount=((PBEParameterSpec)params).getIterationCount();    if (iCount <= 0) {      throw new InvalidAlgorithmParameterException("IterationCount must be a positive number");    }  }  byte[] derivedKey=deriveCipherKey(key);  SecretKeySpec cipherKey=new SecretKeySpec(derivedKey,0,derivedKey.length - 8,algo);  IvParameterSpec ivSpec=new IvParameterSpec(derivedKey,derivedKey.length - 8,8);  cipher.init(opmode,cipherKey,ivSpec,random);}  }
class C{  public Task performSuspendOperation(String vmId) throws IOException {  String path=String.format("%s/%s/suspend",getBasePath(),vmId);  HttpResponse httpResponse=this.restClient.perform(RestClient.Method.POST,path,null);  this.restClient.checkResponse(httpResponse,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(httpResponse);}  }
class C{  public boolean isTruncatingTrailingData(){  return this.truncatingTrailingData;}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  public static Description createSuiteDescription(String name,Annotation... annotations){  return new Description(null,name,annotations);}  }
class C{  void generateTrunk(){  BlockPos blockpos=this.basePos;  BlockPos blockpos1=this.basePos.up(this.height);  IBlockState block=this.logBlock;  this.func_175937_a(blockpos,blockpos1,block);  if (this.trunkSize == 2) {    this.func_175937_a(blockpos.east(),blockpos1.east(),block);    this.func_175937_a(blockpos.east().south(),blockpos1.east().south(),block);    this.func_175937_a(blockpos.south(),blockpos1.south(),block);  }}  }
class C{  public boolean simple_edges_bidirectional(){  return soot.PhaseOptions.getBoolean(options,"simple-edges-bidirectional");}  }
class C{  public void windowClosing(java.awt.event.WindowEvent e){  doneButtonActionPerformed();  super.windowClosing(e);}  }
class C{  public void generateSinusFunctions(ExampleSet exampleSet,List<AttributePeak> attributes,Random random) throws GenerationException {  if (attributes.size() > 0) {    Collections.sort(attributes);    double totalMaxEvidence=attributes.get(0).getEvidence();    Iterator<AttributePeak> a=attributes.iterator();    while (a.hasNext()) {      AttributePeak ae=a.next();      if (ae.getEvidence() > MIN_EVIDENCE * totalMaxEvidence) {        for (int i=0; i < attributesPerPeak; i++) {          double frequency=ae.getFrequency();switch (adaptionType) {case UNIFORMLY:            if (attributesPerPeak != 1) {              frequency=(double)i / (double)(attributesPerPeak - 1) * 2.0d * epsilon * frequency + (frequency - epsilon * frequency);            }          break;case UNIFORMLY_WITHOUT_NU:        if (attributesPerPeak != 1) {          frequency=(double)i / (double)(attributesPerPeak - 1) * 2.0d * epsilon + (frequency - epsilon);        }      break;case GAUSSIAN:    frequency=random.nextGaussian() * epsilon + frequency;  break;}List frequencyResult=generateAttribute(exampleSet,new ConstantGenerator(frequency));FeatureGenerator scale=new BasicArithmeticOperationGenerator(BasicArithmeticOperationGenerator.PRODUCT);scale.setArguments(new Attribute[]{(Attribute)frequencyResult.get(0),ae.getAttribute()});List scaleResult=generateAttribute(exampleSet,scale);FeatureGenerator sin=new TrigonometricFunctionGenerator(TrigonometricFunctionGenerator.SINUS);sin.setArguments(new Attribute[]{(Attribute)scaleResult.get(0)});List<Attribute> sinResult=generateAttribute(exampleSet,sin);for (Attribute attribute : sinResult) {exampleSet.getAttributes().addRegular(attribute);}}}}}}  }
class C{  default Builder withPassword(String password){  return with(PASSWORD,password);}  }
class C{  public static void fixTooltipDuration(){  noCatch(null);}  }
class C{  public void stop(){  invoke(embeddedStop);}  }
class C{  protected void addUsageDetails(UsageDetails details){  usageDetails.addUsagePeriods(details.getUsagePeriods());  usageDetails.setFactor(usageDetails.getFactor() + details.getFactor());}  }
class C{  public static List<Number> measurements(List<EvaluationStatistics> stats,String classifier,String dataset,String measurement){  List<Number> result;  result=new ArrayList<>();  for (  EvaluationStatistics stat : stats) {    if (stat.getCommandLine().equals(classifier) && stat.getRelation().equals(dataset)) {      if (stat.containsKey(measurement))       result.add(stat.get(measurement));    }  }  return result;}  }
class C{  public static String toString(float[] self){  return InvokerHelper.toString(self);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return MESSAGE_TYPE;case 2:  return SW_PORT_TUPLE;case 3:return DATA;default :return null;}}  }
class C{  public void stop() throws IOException {  WebSocketFrame frame=new WebSocketFrame((byte)0x08,true,"1000".getBytes());  byte[] rawFrame=frame.encodeFrame();  getSocketOutputStream().write(rawFrame);  getSocketOutputStream().flush();  if (webSocketReceiver != null) {    webSocketReceiver.stop();  }  super.stop();}  }
class C{  protected void startupModules(Collection<IFloodlightModule> moduleSet) throws FloodlightModuleException {  for (  IFloodlightModule m : moduleSet) {    if (startedSet.contains(m.getClass().getCanonicalName()))     continue;    startedSet.add(m.getClass().getCanonicalName());    if (logger.isDebugEnabled()) {      logger.debug("Starting " + m.getClass().getCanonicalName());    }    m.startUp(floodlightModuleContext);  }}  }
class C{  protected String mapToJson(Object obj) throws JsonProcessingException {  ObjectMapper mapper=new ObjectMapper();  return mapper.writeValueAsString(obj);}  }
class C{  public SerialMessage(String m,int l){  super(m);  setResponseLength(l);  setBinary(true);}  }
class C{  public int equivHashCode(){  return 1729;}  }
class C{  public void logException(Exception ex){  if (traceLevel >= TRACE_EXCEPTION) {    checkLogFile();    ex.printStackTrace();    if (printWriter != null)     ex.printStackTrace(printWriter);  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static double twoPow(final int power){  if (power <= -MAX_DOUBLE_EXPONENT) {    if (power >= MIN_DOUBLE_EXPONENT) {      return Double.longBitsToDouble(0x0008000000000000L >> -(power + MAX_DOUBLE_EXPONENT));    } else {      return 0.0;    }  } else   if (power > MAX_DOUBLE_EXPONENT) {    return Double.POSITIVE_INFINITY;  } else {    return Double.longBitsToDouble((long)(power + MAX_DOUBLE_EXPONENT) << 52);  }}  }
class C{  public PTQLink2(final Link link2,QNetwork network,final QNode toNode){  this(link2,network,toNode,new FIFOVehicleQ());}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'DEVICE_DB' ("+ "'_id' INTEGER PRIMARY KEY NOT NULL ,"+ "'KEY' TEXT NOT NULL ,"+ "'BSSID' TEXT NOT NULL ,"+ "'TYPE' INTEGER NOT NULL ,"+ "'STATE' INTEGER NOT NULL ,"+ "'IS_OWNER' INTEGER NOT NULL ,"+ "'NAME' TEXT NOT NULL ,"+ "'ROM_VERSION' TEXT,"+ "'LATEST_ROM_VERSION' TEXT,"+ "'TIMESTAMP' INTEGER NOT NULL ,"+ "'ACTIVATED_TIME' INTEGER NOT NULL ,"+ "'USER_ID' INTEGER NOT NULL );");}  }
class C{  public EglCore(){  this(null,0);}  }
class C{  public Dimension minimumSize(){  return getMinimumSize();}  }
class C{  public static int computeMessageSizeNoTag(final MessageLite value){  final int size=value.getSerializedSize();  return computeRawVarint32Size(size) + size;}  }
class C{  public final void automaticallyReleaseConnectionToPool(){  automaticallyReleaseConnectionToPool=true;  if (connection != null && connectionReleased) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  Cursor query(H2Database db,String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String orderBy){  return null;}  }
class C{  private void grow(int minCapacity){  int oldCapacity=queue.length;  int newCapacity=oldCapacity + ((oldCapacity < 64) ? (oldCapacity + 2) : (oldCapacity >> 1));  if (newCapacity - MAX_ARRAY_SIZE > 0)   newCapacity=hugeCapacity(minCapacity);  queue=Arrays.copyOf(queue,newCapacity);}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public void writeFile(ArrayList<DccLocoAddress> consistList,String fileName) throws IOException {  Element root=new Element("consist-roster-config");  Document doc=newDocument(root,dtdLocation + "consist-roster-config.dtd");  Map<String,String> m=new HashMap<String,String>();  m.put("type","text/xsl");  m.put("href",xsltLocation + "consistRoster.xsl");  ProcessingInstruction p=new ProcessingInstruction("xml-stylesheet",m);  doc.addContent(0,p);  Element roster=new Element("roster");  for (int i=0; i < consistList.size(); i++) {    Consist newConsist=consistMan.getConsist(consistList.get(i));    roster.addContent(consistToXml(newConsist));  }  root.addContent(roster);  try {    if (!checkFile(fileName)) {      File file=new File(fileName);      File parentDir=file.getParentFile();      if (!parentDir.exists()) {        if (!parentDir.mkdir()) {          throw (new IOException());        }      }      if (!file.createNewFile()) {        throw (new IOException());      }    }    writeXML(findFile(fileName),doc);  } catch (  IOException ioe) {    log.error("IO Exception " + ioe);    throw (ioe);  }}  }
class C{  private boolean isIrreducible(int[] a){  if (a[0] == 0) {    return false;  }  int d=computeDegree(a) >> 1;  int[] u={0,1};  final int[] Y={0,1};  int fieldDegree=field.getDegree();  for (int i=0; i < d; i++) {    for (int j=fieldDegree - 1; j >= 0; j--) {      u=modMultiply(u,u,a);    }    u=normalForm(u);    int[] g=gcd(add(u,Y),a);    if (computeDegree(g) != 0) {      return false;    }  }  return true;}  }
class C{  public void rewind() throws IOException {  seekTo(beginLocation);}  }
class C{  @Override protected String doRender(Object obj,JPanel panel){  DataTable table;  Instances data;  data=(Instances)obj;  if (data.numInstances() == 0)   return new PlainTextRenderer().render(obj,panel);  table=new DataTable(new DataSortedTableModel(data));  panel.add(new BaseScrollPane(table),BorderLayout.CENTER);  return null;}  }
class C{  protected void showMsgLong(String msg){  showMsg(msg,Snackbar.LENGTH_SHORT);}  }
class C{  public void validate() throws MessageException {  List requiredFields=getRequiredFields();  Iterator paramIter=_params.getParameters().iterator();  while (paramIter.hasNext()) {    Parameter param=(Parameter)paramIter.next();    if (!param.isValid())     throw new MessageException("Invalid parameter: " + param);  }  if (requiredFields == null)   return;  Iterator reqIter=requiredFields.iterator();  while (reqIter.hasNext()) {    String required=(String)reqIter.next();    if (!hasParameter(required))     throw new MessageException("Required parameter missing: " + required);  }}  }
class C{  protected void reportReturn(String methodCall){  reportAllReturns(methodCall,"");}  }
class C{  @Override protected final boolean operateOnRegion(DistributionManager dm,LocalRegion r,long startTime) throws EntryExistsException, RemoteOperationException {  this.setInternalDs(r.getSystem());  boolean sendReply=true;  InternalDistributedMember eventSender=originalSender;  if (eventSender == null) {    eventSender=getSender();  }  @Released EntryEventImpl eei=EntryEventImpl.create(r,getOperation(),getKey(),null,getCallbackArg(),useOriginRemote,eventSender,true,false);  this.event=eei;  try {    if (this.versionTag != null) {      this.versionTag.replaceNullIDs(getSender());      event.setVersionTag(this.versionTag);    }    this.event.setCausedByMessage(this);    event.setPossibleDuplicate(this.possibleDuplicate);    if (this.bridgeContext != null) {      event.setContext(this.bridgeContext);    }    Assert.assertTrue(eventId != null);    event.setEventId(eventId);    if (this.hasOldValue) {      if (this.oldValueIsSerialized) {        event.setSerializedOldValue(getOldValueBytes());      } else {        event.setOldValue(getOldValueBytes());      }    }    if (this.applyDeltaBytes) {      event.setNewValue(this.valObj);      event.setDeltaBytes(this.deltaBytes);    } else {switch (this.deserializationPolicy) {case DistributedCacheOperation.DESERIALIZATION_POLICY_LAZY:        event.setSerializedNewValue(getValBytes());      break;case DistributedCacheOperation.DESERIALIZATION_POLICY_NONE:    event.setNewValue(getValBytes());  break;default :throw new AssertionError("unknown deserialization policy: " + deserializationPolicy);}}try {result=r.getDataView().putEntry(event,this.ifNew,this.ifOld,this.expectedOldValue,this.requireOldValue,this.lastModified,true);if (!this.result) {r.checkReadiness();if (!this.ifNew && !this.ifOld) {RemoteOperationException fre=new RemoteOperationException(LocalizedStrings.RemotePutMessage_UNABLE_TO_PERFORM_PUT_BUT_OPERATION_SHOULD_NOT_FAIL_0.toLocalizedString());fre.setHash(key.hashCode());sendReply(getSender(),getProcessorId(),dm,new ReplyException(fre),r,startTime);}}} catch (CacheWriterException cwe) {sendReply(getSender(),getProcessorId(),dm,new ReplyException(cwe),r,startTime);return false;}catch (PrimaryBucketException pbe) {sendReply(getSender(),getProcessorId(),dm,new ReplyException(pbe),r,startTime);return false;}setOperation(event.getOperation());if (sendReply) {sendReply(getSender(),getProcessorId(),dm,null,r,startTime,event);}return false;}  finally {this.event.release();}}  }
class C{  public static void addJarFile(String filename){  try {    if (knownFiles.contains(filename)) {      return;    }    File file=new File(filename);    if (!file.canRead()) {      return;    }    knownFiles.add(filename);    ZipFile zipFile=new ZipFile(file);    Enumeration<? extends ZipEntry> entries=zipFile.entries();    while (entries.hasMoreElements()) {      ZipEntry entry=entries.nextElement();      if (!entry.isDirectory()) {        String name=stripLeadingSlash(entry.getName());        contentFilenameMapping.put(name,file);        contentZipFilesMapping.put(name,zipFile);      }    }  } catch (  IOException e) {    logger.error(e,e);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MapPanel && someObj instanceof Container) {    logger.fine("OpenMapFrame: MapBean is being removed from frame");    getContentPane().remove((Container)someObj);    if (getJMenuBar() == ((MapPanel)someObj).getMapMenuBar()) {      logger.fine("OpenMapFrame: Menu Bar is being removed");      setJMenuBar(null);    }  }  if (someObj instanceof JMenuBar) {    if (getJMenuBar() == (JMenuBar)someObj) {      logger.fine("OpenMapFrame: Menu Bar is being removed");      setJMenuBar(null);    }  }  if (this.equals(someObj)) {    dispose();  }}  }
class C{  public void addToAttachments(Attachment elem){  if (this.attachments == null) {    this.attachments=new ArrayList<Attachment>();  }  this.attachments.add(elem);}  }
class C{  public BBOBFunction(int numberOfVariables){  super(numberOfVariables,1);}  }
class C{  public static void logUserAction(String action,String... pairs){  Server server=App.getInstance().getServer();  if (server != null) {    List<String> allPairs=Lists.newArrayList("action",action);    allPairs.addAll(Arrays.asList(pairs));    server.logToServer(allPairs);  }}  }
class C{  public static String extractMusicIDFromMediaID(String mediaID){  int pos=mediaID.indexOf(LEAF_SEPARATOR);  if (pos >= 0) {    return mediaID.substring(pos + 1);  }  return null;}  }
class C{  private Path convert(IgfsPath path){  URI uri=fileSystemForUser().getUri();  return new Path(uri.getScheme(),uri.getAuthority(),path.toString());}  }
class C{  public IgniteConsistencyException(String msg){  super(msg);}  }
class C{  @Override protected void overrideIdentifierData(EmaApiIdentifierType identifier) throws EmaException {}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.ABSTRACT_CATCH_BLOCK__BLOCK:    setBlock((Block)null);  return;}super.eUnset(featureID);}  }
class C{  public JSONObject makeNumberVerifiedProps(VerificationMethod verificationMethod){  JSONObject props;  try {    props=new JSONObject();    props.put("Verification Method",verificationMethod.code);  } catch (  JSONException e) {    Logger.e(TAG,"Error building Mixpanel Props",e);    props=null;  }  return props;}  }
class C{  public StrBuilder appendNull(){  if (nullText == null) {    return this;  }  return append(nullText);}  }
class C{  public static String hexlify(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  for (int j=0; j < bytes.length; j++) {    int v=bytes[j] & 0xFF;    hexChars[j * 2]=hexArray[v >>> 4];    hexChars[j * 2 + 1]=hexArray[v & 0x0F];  }  String ret=new String(hexChars);  return ret;}  }
class C{  public boolean remove(Object attrval){  int i=find(attrval);  if (i >= 0) {    values.removeElementAt(i);    return true;  }  return false;}  }
class C{  private static long processDuration(long remainingDuration,long millisPerDuration,String durationName,StringBuilder result,boolean displayZeroDuration){  long duration=remainingDuration / millisPerDuration;  long newRemainingDuration=remainingDuration - (duration * millisPerDuration);  if (duration > 0 || displayZeroDuration) {    if (result.length() > 0) {      result.append(", ");    }    result.append(String.valueOf(duration)).append(' ').append(durationName);    if (duration != 1) {      result.append('s');    }  }  return newRemainingDuration;}  }
class C{  void update(Context context){  Resources res=context.getResources();  DisplayMetrics dm=res.getDisplayMetrics();  displayRect.set(0,0,dm.widthPixels,dm.heightPixels);  taskStackScrollDuration=res.getInteger(R.integer.recents_animate_task_stack_scroll_duration);  TypedValue widthPaddingPctValue=new TypedValue();  res.getValue(R.dimen.recents_stack_width_padding_percentage,widthPaddingPctValue,true);  taskStackWidthPaddingPct=widthPaddingPctValue.getFloat();  TypedValue stackOverscrollPctValue=new TypedValue();  res.getValue(R.dimen.recents_stack_overscroll_percentage,stackOverscrollPctValue,true);  taskStackOverscrollPct=stackOverscrollPctValue.getFloat();  taskStackMaxDim=res.getInteger(R.integer.recents_max_task_stack_view_dim);  taskStackTopPaddingPx=res.getDimensionPixelSize(R.dimen.recents_stack_top_padding);  taskViewEnterFromHomeDelay=res.getInteger(R.integer.recents_animate_task_enter_from_home_delay);  taskViewEnterFromHomeDuration=res.getInteger(R.integer.recents_animate_task_enter_from_home_duration);  taskViewEnterFromHomeStaggerDelay=res.getInteger(R.integer.recents_animate_task_enter_from_home_stagger_delay);  taskViewRemoveAnimDuration=res.getInteger(R.integer.recents_animate_task_view_remove_duration);  taskViewRemoveAnimTranslationXPx=res.getDimensionPixelSize(R.dimen.recents_task_view_remove_anim_translation_x);  taskViewTranslationZMinPx=res.getDimensionPixelSize(R.dimen.recents_task_view_z_min);  taskViewTranslationZMaxPx=res.getDimensionPixelSize(R.dimen.recents_task_view_z_max);}  }
class C{  public Builder precision(double precision,DistanceUnit unit){  return precision(unit.toMeters(precision));}  }
class C{  protected void clearError(){synchronized (lock) {    ioError=false;  }}  }
class C{  private void meekR3(Node a,Graph graph,IKnowledge knowledge){  List<Node> adjacentNodes=graph.getAdjacentNodes(a);  if (adjacentNodes.size() < 3) {    return;  }  for (  Node d : adjacentNodes) {    if (Edges.isUndirectedEdge(graph.getEdge(a,d))) {      List<Node> otherAdjacents=new ArrayList<>(adjacentNodes);      otherAdjacents.remove(d);      ChoiceGenerator cg=new ChoiceGenerator(otherAdjacents.size(),2);      int[] choice;      while ((choice=cg.next()) != null) {        List<Node> nodes=GraphUtils.asList(choice,otherAdjacents);        Node b=nodes.get(0);        Node c=nodes.get(1);        boolean isKite=isKite(a,d,b,c,graph);        if (isKite) {          if (isArrowpointAllowed(d,a,knowledge)) {            if (!isUnshieldedNoncollider(c,d,b,graph)) {              continue;            }            direct(d,a,graph);            log(SearchLogUtils.edgeOrientedMsg("Meek R3",graph.getEdge(d,a)));          }        }      }    }  }}  }
class C{  public GroupBuilder<T,E> closeUnion(){  return mParent;}  }
class C{  private void paintDecreaseButtonTogether(Graphics2D g,int width,int height){  paintArrowButton(g,width / 2.0,height / 2.0 - 3);}  }
class C{  public static String clientMessagesRegion(GemFireCacheImpl cache,String ePolicy,int capacity,int port,String overFlowDir,boolean isDiskStore){  AttributesFactory factory=getAttribFactoryForClientMessagesRegion(cache,ePolicy,capacity,overFlowDir,isDiskStore);  RegionAttributes attr=factory.create();  return createClientMessagesRegion(attr,cache,capacity,port);}  }
class C{  public static Map<URI,String> mapNames(Collection<? extends NamedRelatedResourceRep> references){  Map<URI,String> map=new LinkedHashMap<URI,String>();  for (  NamedRelatedResourceRep ref : references) {    map.put(ref.getId(),ref.getName());  }  return map;}  }
class C{  protected int calculateTouchCommandGridColumns(Container grid){  int count=grid.getComponentCount();  int maxWidth=10;  for (int iter=0; iter < count; iter++) {    Component c=grid.getComponentAt(iter);    Style s=c.getUnselectedStyle();    maxWidth=Math.max(maxWidth,c.getPreferredW() + s.getMargin(false,LEFT) + s.getMargin(false,RIGHT));  }  return Math.max(2,Display.getInstance().getDisplayWidth() / maxWidth);}  }
class C{  public char nextClean() throws JSONException {  for (; ; ) {    char c=this.next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  public void onDestroy(){  destroyed=true;  inactivityTimer.cancel();}  }
class C{  @Override public void accept(T model){  requireNonNull(model);  if (!hasMethod(model,EQUALS,1)) {    acceptEquals(model);  }  if (!hasMethod(model,HASHCODE,0)) {    acceptHashcode(model);  }}  }
class C{  @Override public String toString(){  final SentenceBuilder builder=new SentenceBuilder();  for (  final Expression w : expressions) {    if (w.getType() != null) {      if (!isIgnorable(w)) {        builder.append(w.getNormalizedWithTypeString());      }    } else {      builder.append(w.getOriginal());    }    if (w.getBreakFlag()) {      builder.append(',');    }  }  appendPunctation(builder);  String ret=builder.toString();  ExpressionMatcher matcher=getMatcher();  if (matcher != null) {    ret=matcher.toString() + ExpressionMatcher.PM_SEPARATOR + ret;  }  return ret;}  }
class C{  public boolean disconnectClient() throws MqttException {synchronized (connLock) {    connLockNotified=true;    connLock.notify();  }  try {    wmqttClient.disconnect();  } catch (  MqttPersistenceException mqpe) {  }  connected=false;  return true;}  }
class C{  private Object invokeOperationOnTargetMBean(final ObjectName namePattern,final String pidAttribute,final String methodName,final String[] attributes,final Object[] values) throws ConnectionFailedException, IOException, MBeanInvocationFailedException {  ObjectName objectName=namePattern;  connect();  try {    final QueryExp constraint=buildQueryExp(pidAttribute,attributes,values);    final Set<ObjectName> mbeanNames=this.server.queryNames(namePattern,constraint);    if (mbeanNames.isEmpty()) {      throw new MBeanInvocationFailedException("Failed to find mbean matching '" + namePattern + "' with attribute '"+ pidAttribute+ "' of value '"+ this.pid+ "'");    }    if (mbeanNames.size() > 1) {      throw new MBeanInvocationFailedException("Found more than one mbean matching '" + namePattern + "' with attribute '"+ pidAttribute+ "' of value '"+ this.pid+ "'");    }    objectName=mbeanNames.iterator().next();    return invoke(objectName,methodName);  } catch (  InstanceNotFoundException e) {    throw new MBeanInvocationFailedException("Failed to invoke " + methodName + " on "+ objectName,e);  }catch (  MBeanException e) {    throw new MBeanInvocationFailedException("Failed to invoke " + methodName + " on "+ objectName,e);  }catch (  ReflectionException e) {    throw new MBeanInvocationFailedException("Failed to invoke " + methodName + " on "+ objectName,e);  } finally {    disconnect();  }}  }
class C{  public static boolean isLowercaseAlpha(char c){  return (c >= 'a') && (c <= 'z');}  }
class C{  private int countMark(TicTacToeBoard board,int c,int r,int dc,int dr,int sz,char m){  int ct=0;  for (int i=0; i < sz; i++, c+=dc, r+=dr) {    if (board.isClear(c,r)) {      continue;    }    if (board.get(c,r) != m) {      return -1;    }    ct++;  }  return ct;}  }
class C{  @Override public String toString(){  return "[" + xmin + ", "+ xmax+ "] x ["+ ymin+ ", "+ ymax+ "]";}  }
class C{  private void parserParameters(List<MySqlParameter> parameters){  for (; ; ) {    MySqlParameter parameter=new MySqlParameter();    if (lexer.token() == Token.CURSOR) {      lexer.nextToken();      parameter.setName(this.exprParser.name());      accept(Token.IS);      SQLSelect select=this.createSQLSelectParser().select();      SQLDataTypeImpl dataType=new SQLDataTypeImpl();      dataType.setName("CURSOR");      parameter.setDataType(dataType);      parameter.setDefaultValue(new SQLQueryExpr(select));    } else     if (lexer.token() == Token.IN || lexer.token() == Token.OUT || lexer.token() == Token.INOUT) {      if (lexer.token() == Token.IN) {        parameter.setParamType(ParameterType.IN);      } else       if (lexer.token() == Token.OUT) {        parameter.setParamType(ParameterType.OUT);      } else       if (lexer.token() == Token.INOUT) {        parameter.setParamType(ParameterType.INOUT);      }      lexer.nextToken();      parameter.setName(this.exprParser.name());      parameter.setDataType(this.exprParser.parseDataType());    } else {      parameter.setParamType(ParameterType.DEFAULT);      parameter.setName(this.exprParser.name());      parameter.setDataType(this.exprParser.parseDataType());      if (lexer.token() == Token.COLONEQ) {        lexer.nextToken();        parameter.setDefaultValue(this.exprParser.expr());      }    }    parameters.add(parameter);    if (lexer.token() == Token.COMMA || lexer.token() == Token.SEMI) {      lexer.nextToken();    }    if (lexer.token() != Token.BEGIN && lexer.token() != Token.RPAREN) {      continue;    }    break;  }}  }
class C{  public static final double parseTime(final String time,final char separator){  if (time == null || time.length() == 0 || time.equals("undefined")) {    return Time.UNDEFINED_TIME;  }  boolean isNegative=(time.charAt(0) == '-');  String[] strings=(isNegative ? StringUtils.explode(time.substring(1),separator) : StringUtils.explode(time,separator));  double seconds=0;  if (strings.length == 1) {    seconds=Math.abs(Double.parseDouble(strings[0]));  } else   if (strings.length == 2) {    int h=Integer.parseInt(strings[0]);    int m=Integer.parseInt(strings[1]);    if ((m < 0) || (m > 59)) {      throw new IllegalArgumentException("minutes are out of range in " + time);    }    seconds=Math.abs(h) * 3600 + m * 60;  } else   if (strings.length == 3) {    int h=Integer.parseInt(strings[0]);    int m=Integer.parseInt(strings[1]);    double s=Double.parseDouble(strings[2]);    if ((m < 0) || (m > 59)) {      throw new IllegalArgumentException("minutes are out of range in " + time);    }    if ((s < 0) || (s >= 60)) {      throw new IllegalArgumentException("seconds are out of range in " + time);    }    seconds=Math.abs(h) * 3600 + m * 60 + s;  } else {    throw new IllegalArgumentException("time format is not valid in " + time);  }  if (isNegative) {    seconds=-seconds;  }  return seconds;}  }
class C{  public void disposeTimer(){  started=false;  if (timer == null)   return;  if (actionListeners != null) {    actionListeners.clear();  }  if (stopListeners != null) {    stopListeners.clear();  }  timer.stop();  timer=null;}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(1);  newVector.addElement("measureOutOfBagError");  return newVector.elements();}  }
class C{  public static double calculateTestStatistic(MeanVariance mv1,MeanVariance mv2){  final double delta=mv1.getMean() - mv2.getMean();  final double relvar1=mv1.getSampleVariance() / mv1.getCount();  final double relvar2=mv2.getSampleVariance() / mv2.getCount();  return delta / Math.sqrt(relvar1 + relvar2);}  }
class C{  public void replaceAndWait(final Component current,final Component next,final Transition t,boolean dropEvents){  replaceComponents(current,next,t,true,dropEvents,null,0,0,true);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public PanHandlerFX(String id){  this(id,false,false,false,false);}  }
class C{  @Override public String toString(){  MoreObjects.ToStringHelper s=MoreObjects.toStringHelper(this);  if (initialCapacity != UNSET_INT) {    s.add("initialCapacity",initialCapacity);  }  if (concurrencyLevel != UNSET_INT) {    s.add("concurrencyLevel",concurrencyLevel);  }  if (maximumSize != UNSET_INT) {    s.add("maximumSize",maximumSize);  }  if (maximumWeight != UNSET_INT) {    s.add("maximumWeight",maximumWeight);  }  if (expireAfterWriteNanos != UNSET_INT) {    s.add("expireAfterWrite",expireAfterWriteNanos + "ns");  }  if (expireAfterAccessNanos != UNSET_INT) {    s.add("expireAfterAccess",expireAfterAccessNanos + "ns");  }  if (keyStrength != null) {    s.add("keyStrength",Ascii.toLowerCase(keyStrength.toString()));  }  if (valueStrength != null) {    s.add("valueStrength",Ascii.toLowerCase(valueStrength.toString()));  }  if (keyEquivalence != null) {    s.addValue("keyEquivalence");  }  if (valueEquivalence != null) {    s.addValue("valueEquivalence");  }  if (removalListener != null) {    s.addValue("removalListener");  }  return s.toString();}  }
class C{  @Override public Namespace createNamespace(Namespace namespace){  requireNotDisposed();  requireArgument(namespace != null,"null namespace cannot be created.");  if (!_validateQualifier(namespace.getQualifier())) {    throw new SystemException(new IllegalArgumentException("Illegal characters found while generating namespace. Cannot generate a namespace with this qualifier."));  }  if (Namespace.findByQualifier(emf.get(),namespace.getQualifier()) != null) {    throw new SystemException(new IllegalArgumentException("Namespace already exists. Please try a different namespace."));  }  namespace=updateNamespace(namespace);  _logger.debug("Generated namespace {}.",namespace);  return namespace;}  }
class C{  @SuppressWarnings({"unchecked"}) private void inheritValues(Values fromParent){  Object[] table=this.table;  for (int i=table.length - 2; i >= 0; i-=2) {    Object k=table[i];    if (k == null || k == TOMBSTONE) {      continue;    }    Reference<InheritableThreadLocal<?>> reference=(Reference<InheritableThreadLocal<?>>)k;    InheritableThreadLocal key=reference.get();    if (key != null) {      table[i + 1]=key.childValue(fromParent.table[i + 1]);    } else {      table[i]=TOMBSTONE;      table[i + 1]=null;      fromParent.table[i]=TOMBSTONE;      fromParent.table[i + 1]=null;      tombstones++;      fromParent.tombstones++;      size--;      fromParent.size--;    }  }}  }
class C{  public void writeAll(Iterable<String[]> allLines,boolean applyQuotesToAll){  StringBuilder sb=new StringBuilder(INITIAL_STRING_SIZE);  try {    for (    String[] line : allLines) {      writeNext(line,applyQuotesToAll,sb);      sb.setLength(0);    }  } catch (  IOException e) {    exception=e;  }}  }
class C{  public boolean isMatch(SearchQuery.Criterion criterion,MailboxMessage message,final Collection<MessageUid> recentMessageUids) throws MailboxException {  final boolean result;  if (criterion instanceof SearchQuery.InternalDateCriterion) {    result=matches((SearchQuery.InternalDateCriterion)criterion,message);  } else   if (criterion instanceof SearchQuery.SizeCriterion) {    result=matches((SearchQuery.SizeCriterion)criterion,message);  } else   if (criterion instanceof SearchQuery.HeaderCriterion) {    try {      result=matches((SearchQuery.HeaderCriterion)criterion,message);    } catch (    IOException e) {      throw new MailboxException("Unable to search header",e);    }  } else   if (criterion instanceof SearchQuery.UidCriterion) {    result=matches((SearchQuery.UidCriterion)criterion,message);  } else   if (criterion instanceof SearchQuery.FlagCriterion) {    result=matches((SearchQuery.FlagCriterion)criterion,message,recentMessageUids);  } else   if (criterion instanceof SearchQuery.CustomFlagCriterion) {    result=matches((SearchQuery.CustomFlagCriterion)criterion,message,recentMessageUids);  } else   if (criterion instanceof SearchQuery.TextCriterion) {    result=matches((SearchQuery.TextCriterion)criterion,message);  } else   if (criterion instanceof SearchQuery.AllCriterion) {    result=true;  } else   if (criterion instanceof SearchQuery.ConjunctionCriterion) {    result=matches((SearchQuery.ConjunctionCriterion)criterion,message,recentMessageUids);  } else   if (criterion instanceof SearchQuery.ModSeqCriterion) {    result=matches((SearchQuery.ModSeqCriterion)criterion,message);  } else {    throw new UnsupportedSearchException();  }  return result;}  }
class C{  public ConcurrentIndexMap(Object[] array){  this.array=array;}  }
class C{  public int size(){  return size;}  }
class C{  public boolean contains(long key){  if (key == FREE_KEY) {    return true;  }  int ptr=(int)((Tools.phiMix(key) & m_mask));  long e=m_data[ptr];  if (e == FREE_KEY) {    return false;  }  if (e == key) {    return true;  }  while (true) {    ptr=(int)((ptr + 1) & m_mask);    e=m_data[ptr];    if (e == FREE_KEY) {      return false;    }    if (e == key) {      return true;    }  }}  }
class C{  private void buildTableHelper(String fileName) throws Exception {  PennTreebankPOSReader reader=new PennTreebankPOSReader(this.corpusName);  reader.readFile(fileName);  List<TextAnnotation> tas=reader.getTextAnnotations();  for (  TextAnnotation ta : tas) {    for (int tokenId=0; tokenId < ta.size(); tokenId++) {      String form=ta.getToken(tokenId);      String tag=((SpanLabelView)ta.getView(ViewNames.POS)).getLabel(tokenId);      if (form.length() >= 5) {        boolean allLetters=true;        for (int i=form.length() - 3; i < form.length() && allLetters; ++i)         allLetters=Character.isLetter(form.charAt(i));        if (allLetters) {          HashMap<String,TreeMap<String,Integer>> t=null;          if (WordHelpers.isCapitalized(ta,tokenId)) {            int headOfSentence=ta.getSentence(ta.getSentenceId(tokenId)).getStartSpan();            if (tokenId == headOfSentence)             t=firstCapitalized; else             t=notFirstCapitalized;          } else {            if (form.contains("-"))             return;            t=table;          }          form=form.toLowerCase();          count(t,form.substring(form.length() - 3),tag);          if (form.length() >= 6 && Character.isLetter(form.charAt(form.length() - 4)))           count(t,form.substring(form.length() - 4),tag);        }      }    }  }}  }
class C{  public static void apply(int gravity,int w,int h,Rect container,int xAdj,int yAdj,Rect outRect){switch (gravity & ((AXIS_PULL_BEFORE | AXIS_PULL_AFTER) << AXIS_X_SHIFT)) {case 0:    outRect.left=container.left + ((container.right - container.left - w) / 2) + xAdj;  outRect.right=outRect.left + w;if ((gravity & (AXIS_CLIP << AXIS_X_SHIFT)) == (AXIS_CLIP << AXIS_X_SHIFT)) {  if (outRect.left < container.left) {    outRect.left=container.left;  }  if (outRect.right > container.right) {    outRect.right=container.right;  }}break;case AXIS_PULL_BEFORE << AXIS_X_SHIFT:outRect.left=container.left + xAdj;outRect.right=outRect.left + w;if ((gravity & (AXIS_CLIP << AXIS_X_SHIFT)) == (AXIS_CLIP << AXIS_X_SHIFT)) {if (outRect.right > container.right) {outRect.right=container.right;}}break;case AXIS_PULL_AFTER << AXIS_X_SHIFT:outRect.right=container.right - xAdj;outRect.left=outRect.right - w;if ((gravity & (AXIS_CLIP << AXIS_X_SHIFT)) == (AXIS_CLIP << AXIS_X_SHIFT)) {if (outRect.left < container.left) {outRect.left=container.left;}}break;default :outRect.left=container.left + xAdj;outRect.right=container.right + xAdj;break;}switch (gravity & ((AXIS_PULL_BEFORE | AXIS_PULL_AFTER) << AXIS_Y_SHIFT)) {case 0:outRect.top=container.top + ((container.bottom - container.top - h) / 2) + yAdj;outRect.bottom=outRect.top + h;if ((gravity & (AXIS_CLIP << AXIS_Y_SHIFT)) == (AXIS_CLIP << AXIS_Y_SHIFT)) {if (outRect.top < container.top) {outRect.top=container.top;}if (outRect.bottom > container.bottom) {outRect.bottom=container.bottom;}}break;case AXIS_PULL_BEFORE << AXIS_Y_SHIFT:outRect.top=container.top + yAdj;outRect.bottom=outRect.top + h;if ((gravity & (AXIS_CLIP << AXIS_Y_SHIFT)) == (AXIS_CLIP << AXIS_Y_SHIFT)) {if (outRect.bottom > container.bottom) {outRect.bottom=container.bottom;}}break;case AXIS_PULL_AFTER << AXIS_Y_SHIFT:outRect.bottom=container.bottom - yAdj;outRect.top=outRect.bottom - h;if ((gravity & (AXIS_CLIP << AXIS_Y_SHIFT)) == (AXIS_CLIP << AXIS_Y_SHIFT)) {if (outRect.top < container.top) {outRect.top=container.top;}}break;default :outRect.top=container.top + yAdj;outRect.bottom=container.bottom + yAdj;break;}}  }
class C{  public byte[] loadContent(final Request request,final CacheStrategy cacheStrategy,BlacklistType blacklistType,final ClientIdentification.Agent agent) throws IOException {  final Response entry=load(request,cacheStrategy,blacklistType,agent);  if (entry == null)   return null;  return entry.getContent();}  }
class C{  public CreateSnapshotRequest repository(String repository){  this.repository=repository;  return this;}  }
class C{  public QueryBuilder where(String sqlCondition,String... args){  if (sqlCondition != null && !sqlCondition.isEmpty()) {    mCondition+=" and (" + sqlCondition + ")";    mArgs=args == null ? mArgs : ObjectArrays.concat(mArgs,args,String.class);  }  return this;}  }
class C{  public IXMLElement createElement(String fullName,String namespace){  return new XMLElement(fullName,namespace);}  }
class C{  public Transform match(Class type) throws Exception {  return null;}  }
class C{  protected StringLiteralImpl(){  super();}  }
class C{  public Builder addMatch3Method(Match3MethodSpec match3MethodSpec){  match3Methods.addAll(new Match3MethodPermutationBuilder(matchType,match3MethodSpec,MAX_ARITY).build());  return this;}  }
class C{  public static void main(String[] args) throws Exception {  if (5 != args.length) {    System.err.println(ThrottlingConfigGenerator.class.getCanonicalName() + " PARSE_URL WARP_ENDPOINT TOKEN CELL DDP_SPIKE");  }  genConfiguration(args[0],args[1],args[2],args[3],args[4]);}  }
class C{  private void initCardPanel(){  if (dictionaryType.getSelectedItem().equals("Vector")) {    cardPanel.removeAll();    cardPanel.add(vectorPanel);  } else {    cardPanel.removeAll();    cardPanel.add(scalarPanel);  }  cardPanel.revalidate();  cardPanel.repaint();  pack();}  }
class C{  boolean hasHistory(){  return false;}  }
class C{  public static void w(String tag,String s,Object... args){  if (LDJSLOG.WARN >= LOGLEVEL)   Log.w(tag,String.format(s,args));}  }
class C{  public static void render(GetDocumentResponse aResponse,BratAnnotatorModel aBModel,JCas aJCas,AnnotationService aAnnotationService){  aResponse.setRtlMode(ScriptDirection.RTL.equals(aBModel.getScriptDirection()));  SpanAdapter.renderTokenAndSentence(aJCas,aResponse,aBModel);  Map<String[],Queue<String>> colorQueues=new HashMap<>();  for (  AnnotationLayer layer : aBModel.getAnnotationLayers()) {    if (layer.getName().equals(Token.class.getName()) || layer.getName().equals(Sentence.class.getName()) || (layer.getType().equals(CHAIN_TYPE) && (aBModel.getMode().equals(Mode.AUTOMATION) || aBModel.getMode().equals(Mode.CORRECTION) || aBModel.getMode().equals(Mode.CURATION)))|| !layer.isEnabled()) {      continue;    }    ColoringStrategy coloringStrategy=ColoringStrategy.getBestStrategy(aAnnotationService,layer,aBModel.getPreferences(),colorQueues);    List<AnnotationFeature> features=aAnnotationService.listAnnotationFeature(layer);    List<AnnotationFeature> invisibleFeatures=new ArrayList<AnnotationFeature>();    for (    AnnotationFeature feature : features) {      if (!feature.isVisible()) {        invisibleFeatures.add(feature);      }    }    features.removeAll(invisibleFeatures);    TypeAdapter adapter=getAdapter(aAnnotationService,layer);    adapter.render(aJCas,features,aResponse,aBModel,coloringStrategy);  }}  }
class C{  public void incrementRow(Assignment head,double prob){  addRow(head,table.getOrDefault(head,0.0) + prob);}  }
class C{  public double measureTreeSize(){  return m_NumNodes;}  }
class C{  public Map<Integer,Integer> buildCharStringTable(){  final Map<Integer,Integer> glyfValues=new HashMap<Integer,Integer>();  if (hasFormat4) {    final ArrayList<Integer> list4=new ArrayList<Integer>();    for (int z=0; z < segCount; z++) {      final int total=endCode[z] - startCode[z] + 1;      for (int q=0; q < total; q++) {        list4.add(startCode[z] + q);      }    }    for (    final Integer i : list4) {      glyfValues.put(i,getFormat4Value(i,0));    }  } else   if (hasFormat6) {    for (int z=0; z < entryCount; z++) {      glyfValues.put(firstCode + z,f6glyphIdArray[firstCode + z]);    }  } else {    for (int z=0; z < glyphToIndex.length; z++) {      if (glyphToIndex[z] > 0) {        glyfValues.put(glyphToIndex[z],z);      }    }  }  return glyfValues;}  }
class C{  void trackMotionScroll(float deltaAngle){  if (getChildCount() == 0) {    return;  }  for (int i=0; i < getAdapter().getCount(); i++) {    CarouselItemImage child=(CarouselItemImage)getAdapter().getView(i,null,null);    float angle=child.getCurrentAngle();    angle+=deltaAngle;    while (angle > 360.0f)     angle-=360.0f;    while (angle < 0.0f)     angle+=360.0f;    child.setCurrentAngle(angle);    Calculate3DPosition(child,getWidth(),angle);  }  mRecycler.clear();  invalidate();}  }
class C{  public static void out(final String _debug_msg,final Throwable _exception){  if ((_exception instanceof ConnectException) && _exception.getMessage().startsWith("No route to host")) {    diagLoggerLog(_exception.toString());    return;  }  if ((_exception instanceof UnknownHostException)) {    diagLoggerLog(_exception.toString());    return;  }  String header="DEBUG::";  header=header + new Date(SystemTime.getCurrentTime()).toString() + "::";  String className;  String methodName;  int lineNumber;  String trace_trace_tail=null;  try {    throw new Exception();  } catch (  Exception e) {    StackTraceElement[] st=e.getStackTrace();    StackTraceElement first_line=st[2];    className=first_line.getClassName() + "::";    methodName=first_line.getMethodName() + "::";    lineNumber=first_line.getLineNumber();    trace_trace_tail=getCompressedStackTrace(e,3,200,false);  }  diagLoggerLogAndOut(header + className + (methodName)+ lineNumber+ ":",true);  if (_debug_msg.length() > 0) {    diagLoggerLogAndOut("  " + _debug_msg,true);  }  if (trace_trace_tail != null) {    diagLoggerLogAndOut("    " + trace_trace_tail,true);  }  if (_exception != null) {    diagLoggerLogAndOut(_exception);  }}  }
class C{  public boolean addAllUnique(Collection<Playlist> ps){  boolean didChange=false;  for (  Playlist p : ps) {    if (p != null && !mPlaylists.contains(p)) {      mPlaylists.add(p);      didChange=true;    }  }  if (didChange) {    notifyDataSetChanged();  }  return didChange;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.KEY___KEY_ID_1:    setKeyId_1(KEY_ID_1_EDEFAULT);  return;case UmplePackage.KEY___ANONYMOUS_KEY_11:getAnonymous_key_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  public Matrix4d scaleAround(double factor,double ox,double oy,double oz){  return scaleAround(factor,factor,factor,ox,oy,oz,this);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_METHOD__DEFINED_MEMBER:    setDefinedMember((TStructMember)null);  return;}super.eUnset(featureID);}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  GroupAudioDao.dropTable(db,ifExists);}  }
class C{  public void startButtonChange(ActionEvent e){  firePropertyChangeEvent(new PropertyChangeEvent(this,"start",engine_started,start_button.isSelected()));  engine_started=start_button.isSelected();}  }
class C{  public Shape apply(E e){  Shape edgeShape=getLoopOrNull(e);  if (edgeShape != null) {    return edgeShape;  }  int index=getIndex(e,edgeIndexFunction);  float controlY=control_offset_increment + control_offset_increment * index;  BENT_LINE.reset();  BENT_LINE.moveTo(0.0f,0.0f);  BENT_LINE.lineTo(0.5f,controlY);  BENT_LINE.lineTo(1.0f,1.0f);  return BENT_LINE;}  }
class C{  public void testSetF16(){  boolean f16=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF16(f16);  jmri.util.JUnitAppender.assertErrorMessage("Can't send F13-F20 since no command station defined");}  }
class C{  public void translateRegionInWindowToScreen(Region transparentRegion){  transparentRegion.scale(applicationScale);}  }
class C{  public String distanceWeightingTipText(){  return "Gets the distance weighting method used.";}  }
class C{  public synchronized void clearSession(Context context,MXSession session,Boolean clearCredentials){  if (clearCredentials) {    mLoginStorage.removeCredentials(session.getHomeserverConfig());  }  session.getDataHandler().removeListener(mLiveEventListener);  session.mCallsManager.removeListener(mCallsManagerListener);  session.clear(context);synchronized (LOG_TAG) {    mMXSessions.remove(session);  }}  }
class C{  public void testDuplexStaticRemoteBrokerHasNoConsumer() throws Exception {  boolean dynamicOnly=true;  int networkTTL=2;  boolean conduit=true;  bridgeBrokers("BrokerA","BrokerB",dynamicOnly,networkTTL,conduit);  bridgeBrokers("BrokerB","BrokerA",dynamicOnly,networkTTL,conduit);  startAllBrokers();  Destination dest=createDestination("TEST.FOO",false);  MessageConsumer clientA=createConsumer("BrokerA",dest);  Thread.sleep(2 * 1000);  int messageCount=2000;  sendMessages("BrokerA",dest,messageCount);  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);  msgsA.waitForMessagesToArrive(messageCount);  assertEquals(messageCount,msgsA.getMessageCount());}  }
class C{  public int count(){  return m_docs.count();}  }
class C{  private boolean shouldScanFile(){  return (mediaScanned == 0) && (getDestination() == DownloadsDestination.DESTINATION_EXTERNAL || getDestination() == DownloadsDestination.DESTINATION_FILE_URI || getDestination() == DownloadsDestination.DESTINATION_NON_DOWNLOADMANAGER_DOWNLOAD) && DownloadStatus.isSuccess(getStatus())&& scannable;}  }
class C{  public long tryConvertToWriteLock(long stamp){  long a=stamp & ABITS, m, s, next;  while (((s=state) & SBITS) == (stamp & SBITS)) {    if ((m=s & ABITS) == 0L) {      if (a != 0L)       break;      if (U.compareAndSwapLong(this,STATE,s,next=s + WBIT))       return next;    } else     if (m == WBIT) {      if (a != m)       break;      return stamp;    } else     if (m == RUNIT && a != 0L) {      if (U.compareAndSwapLong(this,STATE,s,next=s - RUNIT + WBIT))       return next;    } else     break;  }  return 0L;}  }
class C{  public UniformFilterEditor(){  super();  initComponents();  layoutComponents();}  }
class C{  public FXMessageDialog(final Stage parent,final Parent group){  this(parent);  content.setCenter(group);}  }
class C{  public CallableParameterMetaData(MariaDbConnection con,String database,String name,boolean isFunction){  this.params=null;  this.con=con;  if (database != null) {    this.database=database.replace("`","");  } else {    this.database=null;  }  this.name=name.replace("`","");  this.isFunction=isFunction;}  }
class C{  @Override public OutputStream openOutputStream() throws IOException {  return bos;}  }
class C{  public boolean showOverflowMenu(){  if (mReserveOverflow && !isOverflowMenuShowing() && mMenu != null && mMenuView != null && mPostedOpenRunnable == null && !mMenu.getNonActionItems().isEmpty()) {    OverflowPopup popup=new OverflowPopup(mContext,mMenu,mOverflowButton,true);    mPostedOpenRunnable=new OpenOverflowRunnable(popup);    ((View)mMenuView).post(mPostedOpenRunnable);    super.onSubMenuSelected(null);    return true;  }  return false;}  }
class C{  public EntityView(Node graphics){  addNode(graphics);}  }
class C{  public static void restoreHardwareExceptionState(AbstractRegisters registers){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public static double pointToAngle(Rectangle2D.Double r,Point2D.Double p){  double px=p.x - (r.x + r.width / 2);  double py=p.y - (r.y + r.height / 2);  return atan2(py * r.width,px * r.height);}  }
class C{  public Builder withErrorCode(String errorCode){  this.errorCode=errorCode;  return this;}  }
class C{  public boolean matches(Sign sign){  return sign.getLine(0).equals("Door [" + id + "]");}  }
class C{  private static final boolean nowAllSet(int before,int after,int mask){  return ((before & mask) != mask) && ((after & mask) == mask);}  }
class C{  @SuppressLint("NewApi") private void loadGifUsingTempFile(Subscriber<? super GifDrawableLoader.DownloadStatus> subscriber,Response response) throws IOException {  File temporary=new File(fileCache,"tmp" + identityHashCode(subscriber) + ".gif");  logger.info("storing data into temporary file");  try (RandomAccessFile storage=new RandomAccessFile(temporary,"rw")){    temporary.delete();    long lastStatusTime=System.currentTimeMillis();    float contentLength=(float)response.body().contentLength();    try (InputStream stream=response.body().byteStream()){      int length, count=0;      byte[] buffer=new byte[16 * 1024];      while ((length=stream.read(buffer)) >= 0) {        storage.write(buffer,0,length);        count+=length;        if (subscriber.isUnsubscribed()) {          logger.info("Stopped because the subscriber unsubscribed");          return;        }        long now=System.currentTimeMillis();        if (now - lastStatusTime > 250) {          subscriber.onNext(new DownloadStatus(count / contentLength));          lastStatusTime=now;        }      }    }     if (subscriber.isUnsubscribed())     return;    try {      GifDrawable drawable=new GifDrawable(storage.getFD());      subscriber.onNext(new DownloadStatus(drawable));      subscriber.onCompleted();    } catch (    Throwable error) {      subscriber.onError(error);    }  } }  }
class C{  @Deprecated public AbstractXmlDriver(final XmlFriendlyReplacer replacer){  this((NameCoder)replacer);}  }
class C{  private static void compute(StoredIntervalsNode<?> node,int q,Set<IInterval> F){  int left, right;  if (node == null || q < (left=node.getLeft()) || q > (right=node.getRight())) {    return;  }  F.addAll(node.intervals());  int mid=(left + right) / 2;  if (q < mid) {    compute((StoredIntervalsNode<?>)node.getLeftSon(),q,F);  } else   if (q >= mid) {    compute((StoredIntervalsNode<?>)node.getRightSon(),q,F);  }}  }
class C{  private void markClosed(boolean connBroken){  if (!closed) {    closed=true;    this.connBroken=connBroken;    delegate.hadoop().removeEventListener(delegate);  }}  }
class C{  public static final boolean anyNull(IonValue value){  return (value == null || value.isNullValue());}  }
class C{  public static String date(){  return year() + "";}  }
class C{  @Override public boolean shouldNotBeLogged(){  return true;}  }
class C{  public final void loadStream(final InputStream ins,String strStreamName) throws IOException {  try {    Load1.load(ins,strStreamName,this);  } catch (  ClassNotFoundException ex) {    throw new JIPTypeException(JIPTypeException.LIBRARY,Atom.createAtom(strStreamName));  }}  }
class C{  public void print(String text){  String[] lines=text.split("\n");  for (  String line : lines) {    view.print(line.isEmpty() ? " " : line);  }  performPostOutputActions();}  }
class C{  public void delete() throws IOException {  close();  Util.deleteContents(directory);}  }
class C{  private void removeListeners(AccessibleContext ac){  if (ac != null) {    AccessibleStateSet states=ac.getAccessibleStateSet();    if (!states.contains(AccessibleState.TRANSIENT)) {      ac.removePropertyChangeListener(this);      if (states.contains(_AccessibleState.MANAGES_DESCENDANTS)) {        return;      }      AccessibleRole role=ac.getAccessibleRole();      if (role == AccessibleRole.LIST || role == AccessibleRole.TABLE || role == AccessibleRole.TREE) {        return;      }      int count=ac.getAccessibleChildrenCount();      for (int i=0; i < count; i++) {        Accessible child=ac.getAccessibleChild(i);        if (child != null) {          removeListeners(child);        }      }    }  }}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public void endVisit(MethodRef node){}  }
class C{  public void reconnectFailedConnection(SearchFilter searchFilter) throws QueryException {  if (!searchFilter.isInitialConnection() && (isExplicitClosed() || (searchFilter.isFineIfFoundOnlyMaster() && !isMasterHostFail()) || searchFilter.isFineIfFoundOnlySlave() && !isSecondaryHostFail())) {    return;  }  if (!searchFilter.isFailoverLoop()) {    try {      checkWaitingConnection();      if ((searchFilter.isFineIfFoundOnlyMaster() && !isMasterHostFail()) || searchFilter.isFineIfFoundOnlySlave() && !isSecondaryHostFail()) {        return;      }    } catch (    ReconnectDuringTransactionException e) {      return;    }  }  currentConnectionAttempts.incrementAndGet();  resetOldsBlackListHosts();  List<HostAddress> loopAddress=new LinkedList<>(urlParser.getHostAddresses());  loopAddress.removeAll(getBlacklistKeys());  Collections.shuffle(loopAddress);  List<HostAddress> blacklistShuffle=new LinkedList<>(getBlacklistKeys());  Collections.shuffle(blacklistShuffle);  loopAddress.addAll(blacklistShuffle);  if (masterProtocol != null && !isMasterHostFail()) {    loopAddress.remove(masterProtocol.getHostAddress());    loopAddress.add(masterProtocol.getHostAddress());  }  if (secondaryProtocol != null && !isSecondaryHostFail()) {    loopAddress.remove(secondaryProtocol.getHostAddress());    loopAddress.add(secondaryProtocol.getHostAddress());  }  if ((isMasterHostFail() || isSecondaryHostFail()) || searchFilter.isInitialConnection()) {    do {      MastersSlavesProtocol.loop(this,loopAddress,searchFilter);      if (!searchFilter.isFailoverLoop()) {        try {          checkWaitingConnection();        } catch (        ReconnectDuringTransactionException e) {        }      }    } while (searchFilter.isInitialConnection() && masterProtocol == null);  }}  }
class C{  public IconRenderer(String tooltip){  this.tooltip=tooltip;}  }
class C{  private void internalResolve(Scope scope){  if (this.completionNode != null) {    if (this.completionNode instanceof CompletionOnJavadocTag) {      ((CompletionOnJavadocTag)this.completionNode).filterPossibleTags(scope);    } else {      boolean resolve=true;      if (this.completionNode instanceof CompletionOnJavadocParamNameReference) {        resolve=((CompletionOnJavadocParamNameReference)this.completionNode).token != null;      } else       if (this.completionNode instanceof CompletionOnJavadocTypeParamReference) {        resolve=((CompletionOnJavadocTypeParamReference)this.completionNode).token != null;      }      if (resolve) {switch (scope.kind) {case Scope.CLASS_SCOPE:          this.completionNode.resolveType((ClassScope)scope);        break;case Scope.METHOD_SCOPE:      this.completionNode.resolveType((MethodScope)scope);    break;}}if (this.completionNode instanceof CompletionOnJavadocParamNameReference) {CompletionOnJavadocParamNameReference paramNameReference=(CompletionOnJavadocParamNameReference)this.completionNode;if (scope.kind == Scope.METHOD_SCOPE) {  paramNameReference.missingParams=missingParamTags(paramNameReference.binding,(MethodScope)scope);}if (paramNameReference.token == null || paramNameReference.token.length == 0) {  paramNameReference.missingTypeParams=missingTypeParameterTags(paramNameReference.binding,scope);}} else if (this.completionNode instanceof CompletionOnJavadocTypeParamReference) {CompletionOnJavadocTypeParamReference typeParamReference=(CompletionOnJavadocTypeParamReference)this.completionNode;typeParamReference.missingParams=missingTypeParameterTags(typeParamReference.resolvedType,scope);}}Binding qualifiedBinding=null;if (this.completionNode instanceof CompletionOnJavadocQualifiedTypeReference) {CompletionOnJavadocQualifiedTypeReference typeRef=(CompletionOnJavadocQualifiedTypeReference)this.completionNode;if (typeRef.packageBinding == null) {qualifiedBinding=typeRef.resolvedType;} else {qualifiedBinding=typeRef.packageBinding;}} else if (this.completionNode instanceof CompletionOnJavadocMessageSend) {CompletionOnJavadocMessageSend msg=(CompletionOnJavadocMessageSend)this.completionNode;if (!msg.receiver.isThis()) qualifiedBinding=msg.receiver.resolvedType;} else if (this.completionNode instanceof CompletionOnJavadocAllocationExpression) {CompletionOnJavadocAllocationExpression alloc=(CompletionOnJavadocAllocationExpression)this.completionNode;qualifiedBinding=alloc.type.resolvedType;}throw new CompletionNodeFound(this.completionNode,qualifiedBinding,scope);}}  }
class C{  public void openDirectory(boolean addDir){  showWaitFrame();  File dir=getDirectory("openDirMenu",false);  if (dir != null) {    if (addDir) {      doPreviewDialog(dir,new AActionListener(dir),new MActionListener(dir,true),null,new CActionListener(),0);    } else {      doPreviewDialog(dir,null,new MActionListener(dir,true),null,new CActionListener(),0);    }  } else {    JOptionPane.showMessageDialog(null,Bundle.getMessage("NoImagesInDir"),Bundle.getMessage("searchFSMenu"),JOptionPane.INFORMATION_MESSAGE);  }  closeWaitFrame();}  }
class C{  private static boolean hasProtocol(String systemId){  return systemId != null && HAS_PROTOCOL.matcher(systemId).find();}  }
class C{  protected void updateLeadIndex(){  if (leadPath != null) {    if (selection == null) {      leadPath=null;      leadIndex=leadRow=-1;    } else {      leadRow=leadIndex=-1;      for (int counter=selection.length - 1; counter >= 0; counter--) {        if (selection[counter] == leadPath) {          leadIndex=counter;          break;        }      }    }  } else {    leadIndex=-1;  }}  }
class C{  public GenwizardVisualPanel1(){  initComponents();}  }
class C{  private static void runTest(String main,boolean clearGcOpts,String... testOpts) throws Throwable {  List<String> opts=new ArrayList<>();  opts.add(JDKToolFinder.getJDKTool("java"));  opts.addAll(Arrays.asList(Utils.getTestJavaOpts()));  opts.add("-cp");  opts.add(System.getProperty("test.class.path","test.class.path"));  opts.add("-XX:+PrintGCDetails");  if (clearGcOpts) {    opts=Utils.removeGcOpts(opts);  }  opts.addAll(Arrays.asList(testOpts));  opts.add(main);  OutputAnalyzer output=ProcessTools.executeProcess(opts.toArray(new String[0]));  output.shouldHaveExitValue(0);  if (output.getStdout().indexOf(successMessage) < 0) {    throw new Exception("output missing '" + successMessage + "'");  }}  }
class C{  public static SVGPoint elementCoordinatesFromEvent(Document doc,Element tag,Event evt){  try {    DOMMouseEvent gnme=(DOMMouseEvent)evt;    SVGMatrix mat=((SVGLocatable)tag).getScreenCTM();    SVGMatrix imat=mat.inverse();    SVGPoint cPt=((SVGDocument)doc).getRootElement().createSVGPoint();    cPt.setX(gnme.getClientX());    cPt.setY(gnme.getClientY());    return cPt.matrixTransform(imat);  } catch (  Exception e) {    LoggingUtil.warning("Error getting coordinates from SVG event.",e);    return null;  }}  }
class C{  private void reflectParametersInView(){  removeAllViews();  dots.clear();  for (int i=0; i < numberOfDots; i++) {    final Dot dot=new Dot(getContext());    dot.setInactiveDiameterPx(unselectedDotDiameterPx).setActiveDiameterPx(selectedDotDiameterPx).setActiveColor(selectedDotColor).setInactiveColor(unselectedDotColor).setTransitionDuration(dotTransitionDuration);    if (i == selectedDotIndex) {      dot.setActive(false);    } else {      dot.setInactive(false);    }    final int maxDiameterDim=Math.max(selectedDotDiameterPx,unselectedDotDiameterPx);    final int startMargin=i * (spacingBetweenDotsPx + unselectedDotDiameterPx);    LayoutParams params=new LayoutParams(maxDiameterDim,maxDiameterDim);    params.setMargins(startMargin,0,0,0);    if (Build.VERSION.SDK_INT >= 17) {      params.setMarginStart(startMargin);    }    dot.setLayoutParams(params);    addView(dot);    dots.add(i,dot);  }}  }
class C{  public static byte[] decode(byte[] data){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  try {    encoder.decode(data,0,data.length,bOut);  } catch (  IOException e) {    throw new RuntimeException("exception decoding base64 string: " + e);  }  return bOut.toByteArray();}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  @Override public boolean allowPaypalDonations(){  return false;}  }
class C{  public static Map<Id<Screenline>,Screenline> openShapefile(String shapefile,Network network){  Map<Id<Screenline>,Screenline> result=Screenline.openShapefile(shapefile);  for (  Screenline s : result.values()) {    s.loadLinksFromNetwork(network);  }  return result;}  }
class C{  public JSONArray put(int index,Object value) throws JSONException {  JSONObject.testValidity(value);  if (index < 0) {    throw new JSONException("JSONArray[" + index + "] not found.");  }  if (index < this.length()) {    this.myArrayList.set(index,value);  } else {    while (index != this.length()) {      this.put(JSONObject.NULL);    }    this.put(value);  }  return this;}  }
class C{  public boolean isClosed(){synchronized (closeLock) {    return closed;  }}  }
class C{  public boolean isComplete(){  if (this.size() > 1 && this.get(0).getType().equalsIgnoreCase("major") && this.get(this.size() - 1).getType().equalsIgnoreCase("major")) {    return true;  } else {    return false;  }}  }
class C{  private static void testJcmdPidHelp() throws Exception {  OutputAnalyzer output=JcmdBase.jcmd(VM_ARGS,new String[]{"help"});  output.shouldHaveExitValue(0);  output.shouldNotContain("Exception");  output.shouldContain(Integer.toString(ProcessTools.getProcessId()) + ":");  matchJcmdCommands(output);  output.shouldContain("For more information about a specific command use 'help <command>'.");}  }
class C{  public static void verifyTargetIdCount(List<String> targetIds,int maxChecks) throws TooManyResourceChecksException {  if (targetIds.size() > maxChecks) {    throw new TooManyResourceChecksException(maxChecks);  }}  }
class C{  private SAXParseException makeException(String message){  if (locator != null) {    return new SAXParseException(message,locator);  } else {    return new SAXParseException(message,null,null,-1,-1);  }}  }
class C{  public void testConstructorBytesNegative4(){  byte aBytes[]={-128,-12,56,100,-13,56,93,-78};  byte rBytes[]={-128,-12,56,100,-13,56,93,-78};  BigInteger aNumber=new BigInteger(aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public boolean isEnum(){  return rawClass.isEnum();}  }
class C{  public static String encodeString(String source){  if (source == null) {    return source;  }  int i=firstIllegalCharacter(source);  if (i == -1) {    return source;  }  StringBuffer encoded=new StringBuffer();  encoded.append(source.substring(0,i));  byte bytes[]=toBytes(source);  for (; i < bytes.length; i++) {    int ch=bytes[i];    if (isLegal(ch)) {      encoded.append((char)ch);    } else {      encoded.append(QUOTE_MARKER + Integer.toHexString((byte)ch & 0xff).toUpperCase());    }  }  return encoded.toString();}  }
class C{  private static boolean isNameCompatibleLastType(final Expression lastExpr,final String typeString){  final ExpressionType lastType=lastExpr.getType();  if (lastType.getTypeString().startsWith(typeString)) {    return true;  }  if (typeString.startsWith(lastType.getTypeString())) {    return true;  }  if (lastType.isNumeral()) {    return true;  }  if (lastType.isDynamic()) {    return true;  }  if (lastType.isObject() && typeString.startsWith(ExpressionType.SUBJECT)) {    return true;  }  if (lastType.isSubject() && typeString.startsWith(ExpressionType.OBJECT)) {    return true;  }  if (Grammar.isAmbiguousNounVerb(lastExpr.getNormalized())) {    if (lastType.isVerb() && typeString.equals(ExpressionType.OBJECT)) {      return true;    }    if (lastType.isObject() && typeString.equals(ExpressionType.VERB)) {      return true;    }  }  return false;}  }
class C{  public OffHeapBufferStorageEngine(PointerSize width,PageSource source,int pageSize,Portability<? super K> keyPortability,Portability<? super V> valuePortability){  this(width,source,pageSize,pageSize,keyPortability,valuePortability);}  }
class C{  protected void drawStackHorizontal(List values,Comparable category,Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset){  int column=dataset.getColumnIndex(category);  double barX0=domainAxis.getCategoryMiddle(column,dataset.getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;  double barW=state.getBarWidth();  List itemLabelList=new ArrayList();  boolean inverted=rangeAxis.isInverted();  int blockCount=values.size() - 1;  for (int k=0; k < blockCount; k++) {    int index=(inverted ? blockCount - k - 1 : k);    Object[] prev=(Object[])values.get(index);    Object[] curr=(Object[])values.get(index + 1);    int series;    if (curr[0] == null) {      series=-((Integer)prev[0]).intValue() - 1;    } else {      series=((Integer)curr[0]).intValue();      if (series < 0) {        series=-((Integer)prev[0]).intValue() - 1;      }    }    double v0=((Double)prev[1]).doubleValue();    double vv0=rangeAxis.valueToJava2D(v0,dataArea,plot.getRangeAxisEdge());    double v1=((Double)curr[1]).doubleValue();    double vv1=rangeAxis.valueToJava2D(v1,dataArea,plot.getRangeAxisEdge());    Shape[] faces=createHorizontalBlock(barX0,barW,vv0,vv1,inverted);    Paint fillPaint=getItemPaint(series,column);    Paint fillPaintDark=PaintAlpha.darker(fillPaint);    boolean drawOutlines=isDrawBarOutline();    Paint outlinePaint=fillPaint;    if (drawOutlines) {      outlinePaint=getItemOutlinePaint(series,column);      g2.setStroke(getItemOutlineStroke(series,column));    }    for (int f=0; f < 6; f++) {      if (f == 5) {        g2.setPaint(fillPaint);      } else {        g2.setPaint(fillPaintDark);      }      g2.fill(faces[f]);      if (drawOutlines) {        g2.setPaint(outlinePaint);        g2.draw(faces[f]);      }    }    itemLabelList.add(new Object[]{new Integer(series),faces[5].getBounds2D(),BooleanUtilities.valueOf(v0 < getBase())});    EntityCollection entities=state.getEntityCollection();    if (entities != null) {      addItemEntity(entities,dataset,series,column,faces[5]);    }  }  for (int i=0; i < itemLabelList.size(); i++) {    Object[] record=(Object[])itemLabelList.get(i);    int series=((Integer)record[0]).intValue();    Rectangle2D bar=(Rectangle2D)record[1];    boolean neg=((Boolean)record[2]).booleanValue();    CategoryItemLabelGenerator generator=getItemLabelGenerator(series,column);    if (generator != null && isItemLabelVisible(series,column)) {      drawItemLabel(g2,dataset,series,column,plot,generator,bar,neg);    }  }}  }
class C{  public TwoStepsGOV3Function<T> build() throws IOException {  if (built)   throw new IllegalStateException("This builder has been already used");  built=true;  if (transform == null) {    if (chunkedHashStore != null)     transform=chunkedHashStore.transform(); else     throw new IllegalArgumentException("You must specify a TransformationStrategy, either explicitly or via a given ChunkedHashStore");  }  return new TwoStepsGOV3Function<T>(keys,transform,values,tempDir,chunkedHashStore);}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  XObject left=m_left.execute(xctxt,true);  XObject right=m_right.execute(xctxt,true);  boolean result=left.equals(right) ? true : false;  left.detach();  right.detach();  return result;}  }
class C{  public static JSON from(InputStream inStream) throws IOException {  Assert.notNull("inStream",inStream);  String jsonString=IOUtils.toString(inStream,"UTF-8");  return from(jsonString);}  }
class C{  public static PedanticThrowAnalysis v(){  return G.v().soot_toolkits_exceptions_PedanticThrowAnalysis();}  }
class C{  public static long distance(double latitude1,double longitude1,double latitude2,double longitude2){  double latitudeSin=Math.sin(Math.toRadians(latitude2 - latitude1) / 2);  double longitudeSin=Math.sin(Math.toRadians(longitude2 - longitude1) / 2);  double a=latitudeSin * latitudeSin + Math.cos(Math.toRadians(latitude1)) * Math.cos(Math.toRadians(latitude2)) * longitudeSin* longitudeSin;  double c=2 * MathUtil.atan2(Math.sqrt(a),Math.sqrt(1 - a));  return (long)(6378137 * c);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getTraceOptions_();}  }
class C{  private static boolean checkNextEventIsPartOfSameLDI(ReplicatorRuntime runtime,BinlogReader position,FormatDescriptionLogEvent descriptionEvent,boolean parseStatements,boolean useBytesForString,int fileID,int binlogReadTimeout) throws ReplicatorException, InterruptedException, IOException, ExtractorException {  byte[] fullEvent;  int eventLength;  BinlogReader tempPosition=position.clone();  tempPosition.setEventID(position.getEventID() + 1);  tempPosition.open();  if (logger.isDebugEnabled())   logger.debug("Reading from " + tempPosition);  boolean found=false;  byte[] tmpHeader=new byte[descriptionEvent.commonHeaderLength];  try {    String tempPos;    while (!found) {      tempPos=tempPosition.toString();      eventLength=extractEventHeader(runtime,tempPosition,tmpHeader);      if (tmpHeader[MysqlBinlog.EVENT_TYPE_OFFSET] == MysqlBinlog.EXECUTE_LOAD_QUERY_EVENT || tmpHeader[MysqlBinlog.EVENT_TYPE_OFFSET] == MysqlBinlog.DELETE_FILE_EVENT || tmpHeader[MysqlBinlog.EVENT_TYPE_OFFSET] == MysqlBinlog.APPEND_BLOCK_EVENT) {        found=true;        fullEvent=extractFullEvent(runtime,eventLength,tempPosition,tmpHeader,binlogReadTimeout);        LogEvent tempEvent=readLogEvent(parseStatements,tempPos,fullEvent,fullEvent.length,descriptionEvent,useBytesForString);        if (tempEvent instanceof LoadDataInfileEvent) {          LoadDataInfileEvent nextEvent=(LoadDataInfileEvent)tempEvent;          if (nextEvent.getFileID() == fileID) {            return true;          }        }      } else       if (tmpHeader[MysqlBinlog.EVENT_TYPE_OFFSET] == MysqlBinlog.ROTATE_EVENT) {        fullEvent=extractFullEvent(runtime,eventLength,tempPosition,tmpHeader,binlogReadTimeout);        LogEvent tempEvent=readLogEvent(parseStatements,tempPos,fullEvent,fullEvent.length,descriptionEvent,useBytesForString);        if (tempEvent instanceof RotateLogEvent) {          tempPosition.close();          tempPosition.setFileName(((RotateLogEvent)tempEvent).getNewBinlogFilename());          tempPosition.open();        } else         throw new ExtractorException("Failed to extract RotateLogEvent" + tempPosition);      } else       if (tmpHeader[MysqlBinlog.EVENT_TYPE_OFFSET] == MysqlBinlog.FORMAT_DESCRIPTION_EVENT) {        long skip=0;        while (skip != eventLength) {          skip+=tempPosition.skip(eventLength - skip);        }      } else       return false;    }  }  finally {    tempPosition.close();  }  return false;}  }
class C{  public void elementDecl(String name,String model) throws SAXException {}  }
class C{  public static void main(String[] args){  PieChartDemo1 demo=new PieChartDemo1("JFreeChart: Pie Chart Demo 1");  demo.pack();  RefineryUtilities.centerFrameOnScreen(demo);  demo.setVisible(true);}  }
class C{  @PUT @ZeppelinApi public Response updateRepoSetting(String payload){  if (StringUtils.isBlank(payload)) {    return new JsonResponse<>(Status.NOT_FOUND,"",Collections.emptyMap()).build();  }  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  NotebookRepoSettingsRequest newSettings=NotebookRepoSettingsRequest.EMPTY;  try {    newSettings=gson.fromJson(payload,NotebookRepoSettingsRequest.class);  } catch (  JsonSyntaxException e) {    LOG.error("Cannot update notebook repo settings",e);    return new JsonResponse<>(Status.NOT_ACCEPTABLE,"",ImmutableMap.of("error","Invalid payload structure")).build();  }  if (NotebookRepoSettingsRequest.isEmpty(newSettings)) {    LOG.error("Invalid property");    return new JsonResponse<>(Status.NOT_ACCEPTABLE,"",ImmutableMap.of("error","Invalid payload")).build();  }  LOG.info("User {} is going to change repo setting",subject.getUser());  NotebookRepoWithSettings updatedSettings=noteRepos.updateNotebookRepo(newSettings.name,newSettings.settings,subject);  if (!updatedSettings.isEmpty()) {    LOG.info("Broadcasting note list to user {}",subject.getUser());    notebookWsServer.broadcastReloadedNoteList(subject,null);  }  return new JsonResponse<>(Status.OK,"",updatedSettings).build();}  }
class C{  private boolean isRuntimeChecked(int paramNo,ProjectModel pm,Callback cb){  List<MemberHandle> calls=pm.getCalls(declaration);  if (isCovariantMethod(calls)) {    return true;  }  boolean found=false;  boolean checkTried=false;  for (  MemberHandle memberHandle : calls) {    if (memberHandle instanceof StackArgumentsHandle) {      StackArgumentsHandle icmh=(StackArgumentsHandle)memberHandle;      if (icmh.getName().equals("immutable")) {        checkTried=true;        if (!icmh.isFirstCall()) {          cb.registerError(new IncorrectPure4JImmutableCallException(this));          return false;        } else         if (icmh.getLocalVariables().contains(paramNo)) {          found=true;        }      } else       if (icmh.getName().equals("unsupported")) {        checkTried=true;        found=true;      } else       if (icmh.getName().equals("<init>")) {        if (icmh.getLocalVariables().contains(paramNo)) {          found=true;        }      }    }  }  if (checkTried) {    if (!found) {      cb.registerError(new MissingImmutableParameterCheckException(this,paramNo));      return false;    }  }  return checkTried;}  }
class C{  protected void generateGrabPoints(Projection proj){  DrawingAttributes grabPointDA=null;  Object obj=poly.getAttribute(EditableOMGraphic.GRAB_POINT_DRAWING_ATTRIBUTES_ATTRIBUTE);  if (obj instanceof DrawingAttributes) {    grabPointDA=(DrawingAttributes)obj;  }  int index=0;  for (  GrabPoint gb : polyGrabPoints) {    if (gb != null) {      if (selectNodeIndex == index) {        Object daobj=poly.getAttribute(EditableOMGraphic.SELECTED_GRAB_POINT_DRAWING_ATTRIBUTES_ATTRIBUTE);        if (daobj instanceof DrawingAttributes) {          ((DrawingAttributes)daobj).setTo(gb);        }      } else       if (grabPointDA != null) {        grabPointDA.setTo(gb);      } else {        gb.setDefaultDrawingAttributes(GrabPoint.DEFAULT_RADIUS);      }      gb.generate(proj);    }    index++;  }  if (gpo != null) {    if (grabPointDA != null) {      grabPointDA.setTo(gpo);    } else {      gpo.setDefaultDrawingAttributes(GrabPoint.DEFAULT_RADIUS);    }    gpo.generate(proj);    gpo.updateOffsets();  }}  }
class C{  @Override public FileLock lock(long position,long size,boolean shared) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  protected final void openSessionForRead(String applicationId,List<String> permissions){  openSessionForRead(applicationId,permissions,SessionLoginBehavior.SSO_WITH_FALLBACK,Session.DEFAULT_AUTHORIZE_ACTIVITY_CODE);}  }
class C{  public synchronized void initPublisherPool(int poolSize,String brokerUrl,boolean isSync,boolean force){  if (force && publisherPool != null) {    clearPublisherPool();    publisherPool=null;  }  if (publisherPool == null) {    publisherPool=new PublisherPool(poolSize,brokerUrl,isSync);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:08.801 -0500",hash_original_method="6287831B75A2E8C792411156F0D937ED",hash_generated_method="09A9D4CBD58FEF5C678ED96F2E5A121D") public static int tertiaryOrder(int order){  return order & TERTIARY_ORDER_MASK_;}  }
class C{  @Override public void mouseRelease(int x,int y,int mouseButton){  mouseX=x;  mouseY=y;  this.mouseButton=mouseButton;  if (mouseButton == 1) {    if ((tape == null) && (path == null)) {      if (hasMouse()) {        ((Spatial)movable).getSceneHints().setAllPickingHints(true);        movable.setInMotion(false,null);        Dert.getMainWindow().getUndoHandler().addEdit(new MoveEdit(movable,lastPosition));        movable=null;        canvasPanel.getCanvas().setCursor(null);      }    }  }  controller.mouseRelease(x,y,mouseButton);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final void addField2(FieldInfo finfo){  fields.add(finfo);}  }
class C{  protected String wrapLinuxCommand(String command) throws IOException, InterruptedException {  String setGroup="export GROUP_NAME=`(getent group " + getGid() + " || (groupadd -g "+ getGid()+ " user && echo user:x:"+ getGid()+ ")) | cut -d: -f1`";  String setUser="export USER_NAME=`(getent passwd " + getUid() + " || (useradd -u "+ getUid()+ " -g ${GROUP_NAME} user && echo user:x:"+ getGid()+ ")) | cut -d: -f1`";  String chownCommand="chown --silent -R ${USER_NAME}.${GROUP_NAME} /usr/src/app || true";  return setGroup + " && " + setUser+ " && "+ chownCommand+ " && "+ command+ " && "+ chownCommand;}  }
class C{  public static boolean isPrintableCharacter(final char c){  final Character.UnicodeBlock block=Character.UnicodeBlock.of(c);  return !Character.isISOControl(c) && (c != KeyEvent.CHAR_UNDEFINED) && (block != null)&& (block != Character.UnicodeBlock.SPECIALS);}  }
class C{  private void terminateAndEraseFile(){  Log.d(Constants.TAG,"RecordService terminateAndEraseFile");  stopAndReleaseRecorder();  recording=false;  deleteFile();}  }
class C{  @SuppressWarnings("unchecked") public Iterator<Statement> createIteratorOfStatementFromString(EDataType eDataType,String initialValue){  return (Iterator<Statement>)super.createFromString(initialValue);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public void disable(){}  }
class C{  protected void initTransportLayer() throws IOException {  input=super.getInputStream();  output=super.getOutputStream();}  }
class C{  public MyCertificate(String type,byte[] encoding){  super(type);  this.encoding=encoding;}  }
class C{  public PiePlotLegend(PiePlot plot){  this.plot=plot;}  }
class C{  @Override public void update(Graphics g){  int xh, yh, xm, ym, xs, ys;  int s=0, m=10, h=10;  String today;  currentDate=new Date();  formatter.applyPattern("s");  try {    s=Integer.parseInt(formatter.format(currentDate));  } catch (  NumberFormatException n) {    s=0;  }  formatter.applyPattern("m");  try {    m=Integer.parseInt(formatter.format(currentDate));  } catch (  NumberFormatException n) {    m=10;  }  formatter.applyPattern("h");  try {    h=Integer.parseInt(formatter.format(currentDate));  } catch (  NumberFormatException n) {    h=10;  }  xs=(int)(Math.cos(s * Math.PI / 30 - Math.PI / 2) * 45 + xcenter);  ys=(int)(Math.sin(s * Math.PI / 30 - Math.PI / 2) * 45 + ycenter);  xm=(int)(Math.cos(m * Math.PI / 30 - Math.PI / 2) * 40 + xcenter);  ym=(int)(Math.sin(m * Math.PI / 30 - Math.PI / 2) * 40 + ycenter);  xh=(int)(Math.cos((h * 30 + m / 2) * Math.PI / 180 - Math.PI / 2) * 30 + xcenter);  yh=(int)(Math.sin((h * 30 + m / 2) * Math.PI / 180 - Math.PI / 2) * 30 + ycenter);  formatter.applyPattern("EEE MMM dd HH:mm:ss yyyy");  today=formatter.format(currentDate);  g.setFont(clockFaceFont);  g.setColor(getBackground());  if (xs != lastxs || ys != lastys) {    g.drawLine(xcenter,ycenter,lastxs,lastys);    g.drawString(lastdate,5,125);  }  if (xm != lastxm || ym != lastym) {    g.drawLine(xcenter,ycenter - 1,lastxm,lastym);    g.drawLine(xcenter - 1,ycenter,lastxm,lastym);  }  if (xh != lastxh || yh != lastyh) {    g.drawLine(xcenter,ycenter - 1,lastxh,lastyh);    g.drawLine(xcenter - 1,ycenter,lastxh,lastyh);  }  g.setColor(numberColor);  g.drawString(today,5,125);  g.drawLine(xcenter,ycenter,xs,ys);  g.setColor(handColor);  g.drawLine(xcenter,ycenter - 1,xm,ym);  g.drawLine(xcenter - 1,ycenter,xm,ym);  g.drawLine(xcenter,ycenter - 1,xh,yh);  g.drawLine(xcenter - 1,ycenter,xh,yh);  lastxs=xs;  lastys=ys;  lastxm=xm;  lastym=ym;  lastxh=xh;  lastyh=yh;  lastdate=today;  currentDate=null;}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,int value){  if (extras == null) {    extras=new Bundle();  }  extras.putInt(name,value);  return this;}  }
class C{  public static Sequence<IString> toIStringSequence(int[] indices){  return toIStringSequence(indices,null);}  }
class C{  protected void processValues(Trace trace,Node node,Direction direction,Map<String,?> headers,Object[] values){  if (node.interactionNode()) {    Message m=null;    if (direction == Direction.In) {      m=((InteractionNode)node).getIn();      if (m == null) {        m=new Message();        ((InteractionNode)node).setIn(m);      }    } else {      m=((InteractionNode)node).getOut();      if (m == null) {        m=new Message();        ((InteractionNode)node).setOut(m);      }    }    if (headers != null && m.getHeaders().isEmpty()) {      for (      Map.Entry<String,?> stringEntry : headers.entrySet()) {        String value=getHeaderValueText(stringEntry.getValue());        if (value != null) {          m.getHeaders().put(stringEntry.getKey(),value);        }      }    }  }  if (processorManager != null) {    processorManager.process(trace,node,direction,headers,values);  }}  }
class C{  static GenomeRelationships loadFile(File vcfFile) throws IOException {  try (VcfReader vr=VcfReader.openVcfReader(vcfFile)){    return load(vr.getHeader());  } }  }
class C{  public void remove(String key){  mValues.remove(key);}  }
class C{  public static void generate(Cache cache,PrintWriter pw,boolean useSchema){  (new CacheXmlGenerator(cache,true,VERSION_LATEST,true)).generate(pw);}  }
class C{  protected void configureEnhancerEvent(){}  }
class C{  private void addRepositoryInfoListener(){  try {    coordinator.getCoordinatorClient().addNodeListener(new RepositoryInfoListener());  } catch (  Exception e) {    log.error("Fail to add node listener for repository info target znode",e);    throw APIException.internalServerErrors.addListenerFailed();  }  log.info("Successfully added node listener for repository info target znode");}  }
class C{  public void testAddAll2(){  try {    LinkedBlockingQueue q=new LinkedBlockingQueue(SIZE);    Integer[] ints=new Integer[SIZE];    q.addAll(Arrays.asList(ints));    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public List<Entity> extractURLsWithIndices(final String text){  if (text == null || text.length() == 0 || (extractURLWithoutProtocol ? text.indexOf('.') : text.indexOf(':')) == -1)   return Collections.emptyList();  final ArrayList<Entity> urls=new ArrayList<Entity>();  final Matcher matcher=Regex.VALID_URL.matcher(text);  while (matcher.find()) {    if (matcher.group(Regex.VALID_URL_GROUP_PROTOCOL) == null) {      if (!extractURLWithoutProtocol || Regex.INVALID_URL_WITHOUT_PROTOCOL_MATCH_BEGIN.matcher(matcher.group(Regex.VALID_URL_GROUP_BEFORE)).matches()) {        continue;      }    }    String url=matcher.group(Regex.VALID_URL_GROUP_URL);    final int start=matcher.start(Regex.VALID_URL_GROUP_URL);    int end=matcher.end(Regex.VALID_URL_GROUP_URL);    final Matcher tco_matcher=Regex.VALID_TCO_URL.matcher(url);    if (tco_matcher.find()) {      url=tco_matcher.group();      end=start + url.length();    }    urls.add(new Entity(start,end,url,Entity.Type.URL));  }  return urls;}  }
class C{  private boolean match(Class<?>[] declaredTypes,Class<?>[] actualTypes){  if (declaredTypes.length == actualTypes.length) {    for (int i=0; i < actualTypes.length; i++) {      if (actualTypes[i] == NULL.class)       continue;      if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))       continue;      return false;    }    return true;  } else {    return false;  }}  }
class C{  public boolean isPatchVisible(PatchSet ps,ReviewDb db) throws OrmException {  if (ps != null && ps.isDraft() && !isDraftVisible(db,null)) {    return false;  }  return isVisible(db);}  }
class C{  public Serializer(Properties properties){  this(new SerializerOptions(properties));}  }
class C{  @MainThread @ObjectiveCName("subscribeWithListener:withNotify:") public synchronized void subscribe(@NotNull ModelChangedListener<GroupVM> listener,boolean notify){  if (listeners.contains(listener)) {    return;  }  listeners.add(listener);  if (notify) {    listener.onChanged(this);  }}  }
class C{  public boolean canPace(){  return false;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:55.597 -0500",hash_original_method="2CBB8BA051416BBE1CBD482FDF45ADE6",hash_generated_method="FE6D14DB988140C70DE8975E0CE436AC") CdmaConnection(Context context,String dialString,CdmaCallTracker ct,CdmaCall parent){  createWakeLock(context);  acquireWakeLock();  owner=ct;  h=new MyHandler(owner.getLooper());  this.dialString=dialString;  Log.d(LOG_TAG,"[CDMAConn] CdmaConnection: dialString=" + dialString);  dialString=formatDialString(dialString);  Log.d(LOG_TAG,"[CDMAConn] CdmaConnection:formated dialString=" + dialString);  this.address=PhoneNumberUtils.extractNetworkPortionAlt(dialString);  this.postDialString=PhoneNumberUtils.extractPostDialPortion(dialString);  index=-1;  isIncoming=false;  cnapName=null;  cnapNamePresentation=Connection.PRESENTATION_ALLOWED;  numberPresentation=Connection.PRESENTATION_ALLOWED;  createTime=System.currentTimeMillis();  if (parent != null) {    this.parent=parent;    if (parent.state == CdmaCall.State.ACTIVE) {      parent.attachFake(this,CdmaCall.State.ACTIVE);    } else {      parent.attachFake(this,CdmaCall.State.DIALING);    }  }}  }
class C{  final public MutableString deleteCharAt(final int index){  final int length=length();  if (index >= length)   throw new StringIndexOutOfBoundsException();  System.arraycopy(array,index + 1,array,index,length - index - 1);  if (hashLength < 0) {    setCapacity(length - 1);    hashLength=-1;  } else   hashLength--;  return this;}  }
class C{  public SerializeWriter(SerializerFeature... features){  SoftReference<char[]> ref=bufLocal.get();  if (ref != null) {    buf=ref.get();    bufLocal.set(null);  }  if (buf == null) {    buf=new char[1024];  }  int featuresValue=0;  for (  SerializerFeature feature : features) {    featuresValue|=feature.getMask();  }  this.features=featuresValue;}  }
class C{  private static boolean isWritable(@NonNull final File file){  boolean isExisting=file.exists();  try {    FileOutputStream output=new FileOutputStream(file,true);    try {      output.close();    } catch (    IOException e) {    }  } catch (  java.io.FileNotFoundException e) {    return false;  }  boolean result=file.canWrite();  if (!isExisting) {    file.delete();  }  return result;}  }
class C{  public void purgeQueue(){  fDirtyRegions.clear();}  }
class C{  public boolean addJournalVolumesToCG(CGRequestParams request,int copyType){  ConsistencyGroupUID cgUID=null;  List<ConsistencyGroupUID> allCgs;  String copyName="not determined";  Map<ConsistencyGroupCopyUID,DeviceUID> addedJournalVolumes=new HashMap<ConsistencyGroupCopyUID,DeviceUID>();  try {    allCgs=functionalAPI.getAllConsistencyGroups();    for (    ConsistencyGroupUID cg : allCgs) {      ConsistencyGroupSettings settings=functionalAPI.getGroupSettings(cg);      if (settings.getName().toString().equalsIgnoreCase(request.getCgName())) {        cgUID=settings.getGroupUID();        break;      }    }    if (cgUID == null) {      throw RecoverPointException.exceptions.failedToAddReplicationSetCgDoesNotExist(request.getCgName());    }    List<CreateCopyParams> copyParams=request.getCopies();    Set<RPSite> allSites=scan(copyParams,null);    for (    CreateCopyParams copyParam : copyParams) {      for (      CreateVolumeParams journalVolume : copyParam.getJournals()) {        copyName=journalVolume.getRpCopyName();        ClusterUID clusterId=RecoverPointUtils.getRPSiteID(functionalAPI,journalVolume.getInternalSiteName());        ConsistencyGroupCopyUID copyUID=getCGCopyUid(clusterId,getCopyType(copyType),cgUID);        DeviceUID journalDevice=RecoverPointUtils.getDeviceID(allSites,journalVolume.getInternalSiteName(),journalVolume.getWwn());        addedJournalVolumes.put(copyUID,journalDevice);        functionalAPI.addJournalVolume(copyUID,journalDevice);      }    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    if (!addedJournalVolumes.isEmpty()) {      try {        for (        Map.Entry<ConsistencyGroupCopyUID,DeviceUID> journalVolume : addedJournalVolumes.entrySet()) {          functionalAPI.removeJournalVolume(journalVolume.getKey(),journalVolume.getValue());        }      } catch (      Exception e1) {        logger.error("Error removing journal volume from consistency group");        logger.error(e1.getMessage(),e1);      }    }    logger.error("Error in attempting to add a journal volume to the recoverpoint consistency group");    logger.error(e.getMessage(),e);    throw RecoverPointException.exceptions.failedToAddJournalVolumeToConsistencyGroup(copyName,getCause(e));  }catch (  FunctionalAPIInternalError_Exception e) {    if (!addedJournalVolumes.isEmpty()) {      try {        for (        Map.Entry<ConsistencyGroupCopyUID,DeviceUID> journalVolume : addedJournalVolumes.entrySet()) {          functionalAPI.removeJournalVolume(journalVolume.getKey(),journalVolume.getValue());        }      } catch (      Exception e1) {        logger.error("Error removing journal volume from consistency group");        logger.error(e1.getMessage(),e1);      }    }    logger.error("Error in attempting to add a journal volume to the recoverpoint consistency group");    logger.error(e.getMessage(),e);    throw RecoverPointException.exceptions.failedToCreateConsistencyGroup(copyName,getCause(e));  }  return true;}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  private static boolean isAfterI(String src,int index){  int ch;  int cc;  for (int i=index; i > 0; i-=Character.charCount(ch)) {    ch=src.codePointBefore(i);    if (ch == 'I') {      return true;    } else {      cc=Normalizer.getCombiningClass(ch);      if ((cc == 0) || (cc == COMBINING_CLASS_ABOVE)) {        return false;      }    }  }  return false;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthTokenGroup[");  buffer.append("m_id = ").append(m_id);  buffer.append("]");  return buffer.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String smartUrlFilter(String url,boolean canBeSearch){  String inUrl=url.trim();  boolean hasSpace=inUrl.indexOf(' ') != -1;  Matcher matcher=ACCEPTED_URI_SCHEMA.matcher(inUrl);  if (matcher.matches()) {    String scheme=matcher.group(1);    String lcScheme=scheme.toLowerCase();    if (!lcScheme.equals(scheme)) {      inUrl=lcScheme + matcher.group(2);    }    if (hasSpace && Patterns.WEB_URL.matcher(inUrl).matches()) {      inUrl=inUrl.replace(" ","%20");    }    return inUrl;  }  if (!hasSpace) {    if (inUrl.startsWith("rtsp:"))     return inUrl;    if (Patterns.WEB_URL.matcher(inUrl).matches()) {      return URLUtil.guessUrl(inUrl);    }  }  if (canBeSearch) {    return URLUtil.composeSearchUrl(inUrl,QUICKSEARCH_G,QUERY_PLACE_HOLDER);  }  return null;}  }
class C{  public <T>Tuple3<A,B,T> extend(BiFunction<A,B,T> mapping){  return Tuple3.of(_1,_2,mapping.apply(_1,_2));}  }
class C{  public static void main(String... args){  new Build().run(args);}  }
class C{  public static void generateGlueCodeForJNIMethod(Assembler asm,RVMMethod mth){  int offset;  int varargAmount=0;  String mthName=mth.getName().toString();  final boolean usesVarargs=(mthName.startsWith("Call") && mthName.endsWith("Method")) || mthName.equals("NewObject");  int glueFrameSize=JNI_GLUE_FRAME_SIZE + varargAmount;  asm.emitSTAddrU(FP,-glueFrameSize,FP);  if (usesVarargs) {    if (VM.BuildForPower64ELF_ABI) {      offset=STACKFRAME_HEADER_SIZE + 3 * BYTES_IN_STACKSLOT;      for (int i=6; i <= 10; i++) {        asm.emitSTAddr(GPR.lookup(i),offset,FP);        offset+=BYTES_IN_ADDRESS;      }      for (int i=1; i <= 3; i++) {        asm.emitSTFD(FPR.lookup(i),offset,FP);        offset+=BYTES_IN_DOUBLE;      }    } else     if (VM.BuildForSVR4ABI) {      offset=STACKFRAME_HEADER_SIZE + 0;      for (int i=FIRST_OS_PARAMETER_GPR.value(); i <= LAST_OS_PARAMETER_GPR.value(); i++) {        asm.emitSTAddr(GPR.lookup(i),offset,FP);        offset+=BYTES_IN_ADDRESS;      }      for (int i=FIRST_OS_PARAMETER_FPR.value(); i <= LAST_OS_PARAMETER_FPR.value(); i++) {        asm.emitSTFD(FPR.lookup(i),offset,FP);        offset+=BYTES_IN_DOUBLE;      }    }  } else {    if (VM.BuildForSVR4ABI) {      convertParametersFromSVR4ToJava(asm,mth);    }  }  offset=STACKFRAME_HEADER_SIZE + JNI_GLUE_SAVED_VOL_SIZE;  for (int i=FIRST_RVM_RESERVED_NV_GPR.value(); i <= LAST_RVM_RESERVED_NV_GPR.value(); i++) {    asm.emitSTAddr(GPR.lookup(i),offset,FP);    offset+=BYTES_IN_ADDRESS;  }  asm.emitLVAL(S0,INVISIBLE_METHOD_ID);  asm.emitMFLR(REGISTER_ZERO);  asm.emitSTW(S0,STACKFRAME_METHOD_ID_OFFSET.toInt(),FP);  asm.emitSTAddr(REGISTER_ZERO,glueFrameSize + STACKFRAME_RETURN_ADDRESS_OFFSET.toInt(),FP);  asm.emitADDI(T0,Offset.zero().minus(Entrypoints.JNIExternalFunctionsField.getOffset()),T0);  int retryLoop=asm.getMachineCodeIndex();  asm.emitLAddrOffset(THREAD_REGISTER,T0,Entrypoints.JNIEnvSavedTRField.getOffset());  if (VM.BuildForSVR4ABI) {    asm.emitLAddrOffset(JTOC,T0,Entrypoints.JNIEnvSavedJTOCField.getOffset());  }  asm.emitLVALAddr(S1,Entrypoints.execStatusField.getOffset());  asm.emitLWARX(S0,S1,THREAD_REGISTER);  asm.emitCMPI(S0,RVMThread.IN_JNI + (RVMThread.ALWAYS_LOCK_ON_STATE_TRANSITION ? 100 : 0));  ForwardReference frBlocked=asm.emitForwardBC(NE);  asm.emitLVAL(S0,RVMThread.IN_JAVA);  asm.emitSTWCXr(S0,S1,THREAD_REGISTER);  asm.emitBC(NE,retryLoop);  ForwardReference frInJava=asm.emitForwardB();  frBlocked.resolve(asm);  offset=STACKFRAME_HEADER_SIZE;  for (int i=FIRST_OS_PARAMETER_GPR.value(); i <= LAST_OS_PARAMETER_GPR.value(); i++) {    asm.emitSTAddr(GPR.lookup(i),offset,FP);    offset+=BYTES_IN_ADDRESS;  }  for (int i=FIRST_OS_PARAMETER_FPR.value(); i <= LAST_OS_VARARG_PARAMETER_FPR.value(); i++) {    asm.emitSTFD(FPR.lookup(i),offset,FP);    offset+=BYTES_IN_DOUBLE;  }  asm.emitLAddrOffset(KLUDGE_TI_REG,JTOC,Entrypoints.leaveJNIBlockedFromJNIFunctionCallMethod.getOffset());  asm.emitMTLR(KLUDGE_TI_REG);  asm.emitBCLRL();  offset=STACKFRAME_HEADER_SIZE;  for (int i=FIRST_OS_PARAMETER_GPR.value(); i <= LAST_OS_PARAMETER_GPR.value(); i++) {    asm.emitLAddr(GPR.lookup(i),offset,FP);    offset+=BYTES_IN_ADDRESS;  }  for (int i=FIRST_OS_PARAMETER_FPR.value(); i <= LAST_OS_VARARG_PARAMETER_FPR.value(); i++) {    asm.emitLFD(FPR.lookup(i),offset,FP);    offset+=BYTES_IN_DOUBLE;  }  frInJava.resolve(asm);  asm.emitLAddrOffset(S0,T0,Entrypoints.JNITopJavaFPField.getOffset());  asm.emitSUBFC(S0,FP,S0);  asm.emitSTW(S0,glueFrameSize + JNI_GLUE_OFFSET_TO_PREV_JFRAME,FP);  ForwardReference frNormalPrologue=asm.emitForwardBL();  asm.emitLAddrOffset(T2,THREAD_REGISTER,Entrypoints.jniEnvField.getOffset());  asm.emitLInt(T3,glueFrameSize + JNI_GLUE_OFFSET_TO_PREV_JFRAME,FP);  asm.emitADD(T3,FP,T3);  asm.emitSTAddrOffset(T3,T2,Entrypoints.JNITopJavaFPField.getOffset());  asm.emitCMPAddrI(T3,STACKFRAME_SENTINEL_FP.toInt());  ForwardReference fr4=asm.emitForwardBC(EQ);  asm.emitLAddr(S0,0,T3);  fr4.resolve(asm);  asm.emitSTAddrOffset(THREAD_REGISTER,T2,Entrypoints.JNIEnvSavedTRField.getOffset());  asm.emitLVALAddr(S1,Entrypoints.execStatusField.getOffset());  asm.emitLWARX(S0,S1,THREAD_REGISTER);  asm.emitCMPI(S0,RVMThread.IN_JAVA + (RVMThread.ALWAYS_LOCK_ON_STATE_TRANSITION ? 100 : 0));  ForwardReference notInJava=asm.emitForwardBC(NE);  asm.emitLVAL(S0,RVMThread.IN_JNI);  asm.emitSTWCXr(S0,S1,THREAD_REGISTER);  ForwardReference enteredJNIRef=asm.emitForwardBC(EQ);  notInJava.resolve(asm);  asm.emitLAddrOffset(S0,THREAD_REGISTER,Entrypoints.threadContextRegistersField.getOffset());  asm.emitLAddrOffset(S1,JTOC,ArchEntrypoints.saveVolatilesInstructionsField.getOffset());  asm.emitMTLR(S1);  asm.emitBCLRL();  asm.emitLAddrOffset(S0,JTOC,Entrypoints.enterJNIBlockedFromJNIFunctionCallMethod.getOffset());  asm.emitMTLR(S0);  asm.emitBCLRL();  asm.emitLAddrOffset(S0,THREAD_REGISTER,Entrypoints.threadContextRegistersField.getOffset());  asm.emitLAddrOffset(S1,JTOC,ArchEntrypoints.restoreVolatilesInstructionsField.getOffset());  asm.emitMTLR(S1);  asm.emitBCLRL();  enteredJNIRef.resolve(asm);  offset=STACKFRAME_HEADER_SIZE + JNI_GLUE_SAVED_VOL_SIZE;  for (int i=FIRST_RVM_RESERVED_NV_GPR.value(); i <= LAST_RVM_RESERVED_NV_GPR.value(); i++) {    asm.emitLAddr(GPR.lookup(i),offset,FP);    offset+=BYTES_IN_ADDRESS;  }  asm.emitADDI(FP,glueFrameSize,FP);  asm.emitLAddr(T2,STACKFRAME_RETURN_ADDRESS_OFFSET.toInt(),FP);  asm.emitMTLR(T2);  asm.emitBCLR();  frNormalPrologue.resolve(asm);}  }
class C{  public static void writeNodes(final AbstractSQLProvider provider,final int newViewId,final List<INaviViewNode> nodes) throws SQLException {  Preconditions.checkNotNull(provider,"IE01992: Provider argument can not be null");  Preconditions.checkArgument(newViewId > 0,"IE01993: New View ID argument must be greater then zero");  Preconditions.checkNotNull(nodes,"IE01994: Nodes argument can not be null");  if (nodes.isEmpty()) {    return;  }  final ArrayList<Integer> functionNodeIndices=new ArrayList<Integer>();  final ArrayList<Integer> codeNodeIndices=new ArrayList<Integer>();  final ArrayList<Integer> textNodeIndices=new ArrayList<Integer>();  final ArrayList<Integer> groupNodeIndices=new ArrayList<Integer>();  final BiMap<Integer,INaviGroupNode> groupNodeMap=HashBiMap.create();  final int firstNode=saveNodes(provider,newViewId,nodes,functionNodeIndices,codeNodeIndices,textNodeIndices,groupNodeIndices,groupNodeMap);  PostgreSQLNodeSaver.updateNodeIds(nodes,firstNode);  PostgreSQLNodeSaver.saveGroupNodes(provider,nodes,firstNode,PostgreSQLNodeSaver.sortGroupNodes(groupNodeIndices,groupNodeMap));  PostgreSQLNodeSaver.saveFunctionNodes(provider,nodes,firstNode,functionNodeIndices);  PostgreSQLNodeSaver.saveCodeNodes(provider,nodes,firstNode,codeNodeIndices);  PostgreSQLNodeSaver.saveTextNodes(provider,nodes,firstNode,textNodeIndices);  final CConnection connection=provider.getConnection();  PostgreSQLNodeSaver.saveParentGroups(connection,nodes,firstNode,groupNodeMap);  PostgreSQLNodeSaver.saveTags(connection,nodes,firstNode);}  }
class C{  public static void skip(ByteBuffer buffer,int count){  buffer.position(buffer.position() + count);}  }
class C{  protected void engineInit(int opmode,Key key,AlgorithmParameters params,SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException {  IvParameterSpec ivSpec=null;  if (params != null) {    try {      DESedeParameters paramsEng=new DESedeParameters();      paramsEng.engineInit(params.getEncoded());      ivSpec=paramsEng.engineGetParameterSpec(IvParameterSpec.class);    } catch (    Exception ex) {      InvalidAlgorithmParameterException iape=new InvalidAlgorithmParameterException("Wrong parameter type: IV expected");      iape.initCause(ex);      throw iape;    }  }  engineInit(opmode,key,ivSpec,random);}  }
class C{  private String addListModel(HashMap<String,SwaggerModel> models,Class<?> model,String modelName){  SwaggerModel swaggerModel=new SwaggerModel();  swaggerModel.setId(modelName);  swaggerModel.setName(modelName);  SwaggerModelProperty modelProperty=new SwaggerModelProperty();  modelProperty.setType("List");  modelProperty.setRequired(true);  HashMap<String,String> items=new HashMap<>();  items.put(REFERENCE_TYPE,model.getSimpleName());  modelProperty.setItems(items);  HashMap<String,SwaggerModelProperty> modelProperties=new HashMap();  modelProperties.put("items",modelProperty);  swaggerModel.setProperties(modelProperties);  String listModelName=String.format("%s<%s>",modelName,model.getSimpleName());  models.put(listModelName,swaggerModel);  return listModelName;}  }
class C{  private boolean isCheckpointExists(Connection conn,String key) throws SQLException {  PreparedStatement st=null;  ResultSet rs=null;  try {    st=conn.prepareStatement(chkExistsSql);    st.setString(1,key);    rs=st.executeQuery();    return rs.next();  }  finally {    U.close(rs,log);    U.close(st,log);  }}  }
class C{  public final void add(int element){  int index=(length++) & 0x3FF;  if (index == 0) {    pages.add(page=new int[0x400]);  }  page[index]=element;}  }
class C{  public ElasticsearchHistory(SharedElasticsearchResource elasticsearch){  this.elasticsearch=elasticsearch;}  }
class C{  public static OperationParameter createOperationParameter(String id,boolean mandatory,OperationParameterType type){  OperationParameter op=new OperationParameter();  op.setId(id);  op.setMandatory(mandatory);  op.setType(type);  return op;}  }
class C{  public final void changeVariation(int delta){  if (tree.currentNode == tree.rootNode)   return;  tree.goBack();  int defChild=tree.currentNode.defaultChild;  int nChildren=tree.variations().size();  int newChild=defChild + delta;  newChild=Math.max(newChild,0);  newChild=Math.min(newChild,nChildren - 1);  tree.goForward(newChild);  pendingDrawOffer=false;  updateTimeControl(true);}  }
class C{  public static MutableList<String> chunk(String string,int size){  if (size <= 0) {    throw new IllegalArgumentException("Size for groups must be positive but was: " + size);  }  int length=string.length();  if (length == 0) {    return FastList.newList();  }  MutableList<String> result=FastList.newList((length + size - 1) / size);  int startOffset=0;  while (startOffset < length) {    result.add(string.substring(startOffset,Math.min(startOffset + size,length)));    startOffset+=size;  }  return result;}  }
class C{  protected void copyProperties(Object dest,Object source){  try {    BeanUtils.copyProperties(dest,source);  } catch (  IllegalAccessException|InvocationTargetException e) {    throw new WebApplicationException(e.toString(),Status.BAD_REQUEST);  }}  }
class C{  public final void removeMessages(int what){  mExec.removeMessages(what);}  }
class C{  public double[] distributionForInstance(Instance inst) throws Exception {  if (!m_checksTurnedOff) {    m_Missing.input(inst);    m_Missing.batchFinished();    inst=m_Missing.output();  }  if (m_NominalToBinary != null) {    m_NominalToBinary.input(inst);    m_NominalToBinary.batchFinished();    inst=m_NominalToBinary.output();  }  if (m_Filter != null) {    m_Filter.input(inst);    m_Filter.batchFinished();    inst=m_Filter.output();  }  if (!m_fitLogisticModels) {    double[] result=new double[inst.numClasses()];    for (int i=0; i < inst.numClasses(); i++) {      for (int j=i + 1; j < inst.numClasses(); j++) {        if ((m_classifiers[i][j].m_alpha != null) || (m_classifiers[i][j].m_sparseWeights != null)) {          double output=m_classifiers[i][j].SVMOutput(-1,inst);          if (output > 0) {            result[j]+=1;          } else {            result[i]+=1;          }        }      }    }    Utils.normalize(result);    return result;  } else {    if (inst.numClasses() == 2) {      double[] newInst=new double[2];      newInst[0]=m_classifiers[0][1].SVMOutput(-1,inst);      newInst[1]=Utils.missingValue();      return m_classifiers[0][1].m_logistic.distributionForInstance(new DenseInstance(1,newInst));    }    double[][] r=new double[inst.numClasses()][inst.numClasses()];    double[][] n=new double[inst.numClasses()][inst.numClasses()];    for (int i=0; i < inst.numClasses(); i++) {      for (int j=i + 1; j < inst.numClasses(); j++) {        if ((m_classifiers[i][j].m_alpha != null) || (m_classifiers[i][j].m_sparseWeights != null)) {          double[] newInst=new double[2];          newInst[0]=m_classifiers[i][j].SVMOutput(-1,inst);          newInst[1]=Utils.missingValue();          r[i][j]=m_classifiers[i][j].m_logistic.distributionForInstance(new DenseInstance(1,newInst))[0];          n[i][j]=m_classifiers[i][j].m_sumOfWeights;        }      }    }    return weka.classifiers.meta.MultiClassClassifier.pairwiseCoupling(n,r);  }}  }
class C{  protected Precondition_Impl(){  super();}  }
class C{  public static SimpleDataSet loadArffFile(File file){  try {    return loadArffFile(new FileReader(file));  } catch (  FileNotFoundException ex) {    Logger.getLogger(ARFFLoader.class.getName()).log(Level.SEVERE,null,ex);    return null;  }}  }
class C{  public void toggleMMUDDisplays(){  if (mechW.isVisible()) {    setDisplayVisible(false);    setMapVisible(false);  } else {    setDisplayVisible(true);    setMapVisible(true);  }}  }
class C{  public boolean isNamespaceAware(){  return getFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES);}  }
class C{  public static void clearSnapshotSessionsFlags(BlockObject blockObject,Set<DataObject> updatedObjects,DbClient dbClient){  URIQueryResultList queryResults=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getParentSnapshotSessionConstraint(blockObject.getId()),queryResults);  Iterator<URI> resultsIter=queryResults.iterator();  while (resultsIter.hasNext()) {    BlockSnapshotSession snapSession=dbClient.queryObject(BlockSnapshotSession.class,resultsIter.next());    _logger.info("Clearing internal volume flag of snapshot session {} of RP volume {}",snapSession.getLabel(),blockObject.getLabel());    snapSession.clearInternalFlags(BlockIngestOrchestrator.INTERNAL_VOLUME_FLAGS);    updatedObjects.add(snapSession);  }}  }
class C{  public boolean isAlwaysUseAbsoluteElevation(){  return alwaysUseAbsoluteElevation;}  }
class C{  private void copyTestFilesToExternalData() throws IOException, InterruptedException {  ProcessBuilder processBuilder=new ProcessBuilder();  Context appUnderTestContext=PerfTestingUtils.getAppContext();  File externalAppStorageDir=appUnderTestContext.getExternalFilesDir(null);  File externalTestFilesStorageDir=new File(externalAppStorageDir,TEST_DATA_SUBDIR_NAME);  if (!externalTestFilesStorageDir.exists()) {    if (!externalTestFilesStorageDir.mkdirs()) {      throw new RuntimeException("Not able to create exportable directory for test data");    }  }  String srcAbsolutePath=PerfTestingUtils.getTestRunDir().getAbsolutePath();  String destAbsolutePath=externalTestFilesStorageDir.getAbsolutePath();  Log.w(LOG_TAG,"Moving test data from " + srcAbsolutePath + " to "+ destAbsolutePath);  processBuilder.command("cp","-r",srcAbsolutePath,destAbsolutePath);  processBuilder.redirectErrorStream();  Process process=processBuilder.start();  process.waitFor();  if (process.exitValue() != 0) {    StringBuilder errOutput=new StringBuilder();    char[] charBuffer=new char[1024];    int readSize;    InputStream errorStream=null;    Reader reader=null;    try {      errorStream=process.getInputStream();      reader=new InputStreamReader(errorStream);      while ((readSize=reader.read()) > 0) {        errOutput.append(charBuffer,0,readSize);      }    }  finally {      if (errorStream != null)       try {        errorStream.close();      } catch (      Exception ignored) {      }      if (reader != null)       try {        reader.close();      } catch (      Exception ignored) {      }    }    String errorString=errOutput.toString();    Log.e(LOG_TAG,errorString);    throw new IOException("Not able to move test data to external storage directory:" + " src=" + srcAbsolutePath + ", dest="+ destAbsolutePath+ ", out="+ errorString);  }}  }
class C{  public boolean isFailover(){  return mIsFailOver;}  }
class C{  protected boolean hasZoom(){  return true;}  }
class C{  public static boolean hasBeenInitialized(){  return sIsInitialized;}  }
class C{  public void clearDictionaryFromQueryModel(){  if (null != queryModel) {    Map<String,Dictionary> columnToDictionaryMapping=queryModel.getColumnToDictionaryMapping();    if (null != columnToDictionaryMapping) {      for (      Map.Entry<String,Dictionary> entry : columnToDictionaryMapping.entrySet()) {        CarbonUtil.clearDictionaryCache(entry.getValue());      }    }  }}  }
class C{  @Override public Object[] toArray(){  return newArray(new Object[size()]);}  }
class C{  protected Motion createMotion(int startOffset,int dest,int speed){  if (motionSetManually) {    if (lazyMotion != null) {      return lazyMotion.get(new Integer(startOffset),new Integer(dest),new Integer(speed));    }    return motion;  }  if (linearMotion) {    return Motion.createLinearMotion(startOffset,dest,speed);  }  return Motion.createEaseInOutMotion(startOffset,dest,speed);}  }
class C{  protected void consider(String candidate){  AtomicInteger score=nWords.get(candidate);  if (score != null) {    if (score.get() > bestScore) {      bestScore=score.get();      bestCandidate=candidate;    }  }}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public boolean removePassiveScanner(PassiveScanner passiveScanner){  if (passiveScanner == null) {    throw new IllegalArgumentException("Parameter passiveScanner must not be null.");  }  return removePassiveScanner(passiveScanner.getClass().getName());}  }
class C{  public ClassNotFoundException(String s){  super(s,null);}  }
class C{  @SuppressWarnings("serial") public void testStatementPatternNode(){  final StatementPatternNode spn1=store.isQuads() ? (StatementPatternNode)new Helper(){{      tmp=statementPatternNode(varNode(x),varNode(y),varNode(z),varNode(w));    }  }.getTmp() : (StatementPatternNode)new Helper(){{      tmp=statementPatternNode(varNode(x),varNode(y),varNode(z));    }  }.getTmp();  final StatementPatternNode spn2=(StatementPatternNode)new Helper(){{      tmp=statementPatternNode(constantNode(a),constantNode(b),constantNode(c));    }  }.getTmp();  final StatementPatternNode spn3=(StatementPatternNode)new Helper(){{      tmp=statementPatternNode(varNode(x),constantNode(b),varNode(z));    }  }.getTmp();  final Set<IVariable<?>> requiredBoundSpn123=new HashSet<IVariable<?>>();  final Set<IVariable<?>> desiredBoundSpn1=store.isQuads() ? new HashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("y"));      add(Var.var("z"));      add(Var.var("w"));    }  } : new HashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("y"));      add(Var.var("z"));    }  };  final Set<IVariable<?>> desiredBoundSpn2=new HashSet<IVariable<?>>();  final Set<IVariable<?>> desiredBoundSpn3=new HashSet<IVariable<?>>(){{      add(Var.var("x"));      add(Var.var("z"));    }  };  final StaticAnalysis sa=new StaticAnalysis(new QueryRoot(QueryType.SELECT),null);  assertEquals(requiredBoundSpn123,spn1.getRequiredBound(sa));  assertEquals(desiredBoundSpn1,spn1.getDesiredBound(sa));  assertEquals(requiredBoundSpn123,spn2.getRequiredBound(sa));  assertEquals(desiredBoundSpn2,spn2.getDesiredBound(sa));  assertEquals(requiredBoundSpn123,spn3.getRequiredBound(sa));  assertEquals(desiredBoundSpn3,spn3.getDesiredBound(sa));}  }
class C{  private long convertUTMToMGRS(long Zone,double Latitude,double Easting,double Northing,long Precision){  double grid_easting;  double grid_northing;  long[] letters=new long[MGRS_LETTERS];  double divisor;  long error_code;  divisor=Math.pow(10.0,(5 - Precision));  Easting=roundMGRS(Easting / divisor) * divisor;  Northing=roundMGRS(Northing / divisor) * divisor;  getGridValues(Zone);  error_code=getLatitudeLetter(Latitude);  letters[0]=getLastLetter();  if (error_code == MGRS_NO_ERROR) {    grid_northing=Northing;    if (grid_northing == 1.e7)     grid_northing=grid_northing - 1.0;    while (grid_northing >= TWOMIL) {      grid_northing=grid_northing - TWOMIL;    }    grid_northing=grid_northing + false_northing;    if (grid_northing >= TWOMIL)     grid_northing=grid_northing - TWOMIL;    letters[2]=(long)(grid_northing / ONEHT);    if (letters[2] > LETTER_H)     letters[2]=letters[2] + 1;    if (letters[2] > LETTER_N)     letters[2]=letters[2] + 1;    grid_easting=Easting;    if (((letters[0] == LETTER_V) && (Zone == 31)) && (grid_easting == 500000.0))     grid_easting=grid_easting - 1.0;    letters[1]=ltr2_low_value + ((long)(grid_easting / ONEHT) - 1);    if ((ltr2_low_value == LETTER_J) && (letters[1] > LETTER_N))     letters[1]=letters[1] + 1;    makeMGRSString(Zone,letters,Easting,Northing,Precision);  }  return error_code;}  }
class C{  @Override public void addAttribute(String name,String value){  if (name.equals("class")) {    this.type=getOwner().findClass(value);  } else {    super.addAttribute(name,value);  }}  }
class C{  private boolean hasNextInetSocketAddress(){  return socketAddresses != null;}  }
class C{  private void basicSuccessTest(String connectionEncoding,String columnName,String testInput,String expectedOutput) throws Exception {  Connection connection=getConnection(connectionEncoding);  try {    insertString(connection,columnName,testInput,DEFAULT_ID);    assertEquals(expectedOutput,selectString(connection,columnName,DEFAULT_ID));  }  finally {    connection.close();  }}  }
class C{  public SpinnerNumberModel(int value,int minimum,int maximum,int stepSize){  this(Integer.valueOf(value),Integer.valueOf(minimum),Integer.valueOf(maximum),Integer.valueOf(stepSize));}  }
class C{  public boolean specifiesRPProtection(){  return (recoverPoint != null && ((recoverPoint.getAdd() != null && !recoverPoint.getAdd().isEmpty()) || (recoverPoint.getRemove() != null && !recoverPoint.getRemove().isEmpty())));}  }
class C{  public InterfaceMethodRefConstant addInterfaceRef(String className,String name,String type){  InterfaceMethodRefConstant entry=getInterfaceRef(className,name,type);  if (entry != null)   return entry;  ClassConstant classEntry=addClass(className);  NameAndTypeConstant typeEntry=addNameAndType(name,type);  entry=new InterfaceMethodRefConstant(this,_entries.size(),classEntry.getIndex(),typeEntry.getIndex());  addConstant(entry);  return entry;}  }
class C{  public HeaderCard findCard(String key){  HeaderCard card=this.cards.get(key);  if (card != null) {    this.iter.setKey(key);  }  return card;}  }
class C{  public void start() throws IOException, StunException {  sock=new IceUdpSocketWrapper(new SafeCloseDatagramSocket(localAddress));  stunStack.addSocket(sock);  requestSender=new BlockingRequestSender(stunStack,localAddress);  started=true;}  }
class C{  boolean isAlive(){  return alive;}  }
class C{  boolean isCounterpart(int attribute,HTMLFont font){switch (attribute) {case BOLD:    return isBoldCounterpart(font);case ITALIC:  return isItalicCounterpart(font);case BIG:return isBigCounterpart(font);case SMALL:return isSmallCounterpart(font);default :return false;}}  }
class C{  public void warn(ServerCommit commit){  LOGGER.warn("Server commit " + commit + " was garbage collected!\nCommit log is dirty!");}  }
class C{  protected void reduceParseTree(CompilationUnitDeclaration unit){  TypeDeclaration[] types=unit.types;  for (int i=0, l=types.length; i < l; i++)   purgeMethodStatements(types[i],true);}  }
class C{  public static void closeStatement(Statement statement){  if (null != statement) {    try {      statement.close();    } catch (    SQLException ignore) {    }  }}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < in.length - 1) {    if (random == null) {      in[inOff]=0;    } else {      in[inOff]=(byte)random.nextInt();    }    inOff++;  }  in[inOff]=code;  return code;}  }
class C{  private void onReady(MediaInfo mediaInfo,boolean shouldStartPlayback,int startPoint,JSONObject customData){  mSelectedMedia=mediaInfo;  updateClosedCaptionState();  try {    mCastController.setStreamType(mSelectedMedia.getStreamType());    if (shouldStartPlayback) {      mPlaybackState=MediaStatus.PLAYER_STATE_BUFFERING;      mCastController.setPlaybackStatus(mPlaybackState);      mCastManager.loadMedia(mSelectedMedia,true,startPoint,customData);    } else {      if (mCastManager.isRemoteMediaPlaying()) {        mPlaybackState=MediaStatus.PLAYER_STATE_PLAYING;      } else {        mPlaybackState=MediaStatus.PLAYER_STATE_PAUSED;      }      mCastController.setPlaybackStatus(mPlaybackState);    }  } catch (  Exception e) {    LOGE(TAG,"Failed to get playback and media information",e);    mCastController.closeActivity();  }  MediaQueue mediaQueue=mCastManager.getMediaQueue();  int size=0;  int position=0;  if (mediaQueue != null) {    size=mediaQueue.getCount();    position=mediaQueue.getCurrentItemPosition();  }  mCastController.onQueueItemsUpdated(size,position);  updateMetadata();  restartTrickplayTimer();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.898 -0500",hash_original_method="B6C33F6C9AFBFD4465A32F9300C74AFB",hash_generated_method="5E9890F60800B6FE556CD91BC5206B40") public void writeToXml(XmlSerializer serializer) throws IOException {  int N=countActions();  for (int i=0; i < N; i++) {    serializer.startTag(null,ACTION_STR);    serializer.attribute(null,NAME_STR,mActions);    serializer.endTag(null,ACTION_STR);  }  N=countCategories();  for (int i=0; i < N; i++) {    serializer.startTag(null,CAT_STR);    serializer.attribute(null,NAME_STR,mCategories.get(i));    serializer.endTag(null,CAT_STR);  }  N=countDataTypes();  for (int i=0; i < N; i++) {    serializer.startTag(null,TYPE_STR);    String type=mDataTypes.get(i);    if (type.indexOf('/') < 0)     type=type + "/*";    serializer.attribute(null,NAME_STR,type);    serializer.endTag(null,TYPE_STR);  }  N=countDataSchemes();  for (int i=0; i < N; i++) {    serializer.startTag(null,SCHEME_STR);    serializer.attribute(null,NAME_STR,mDataSchemes.get(i));    serializer.endTag(null,SCHEME_STR);  }  N=countDataAuthorities();  for (int i=0; i < N; i++) {    serializer.startTag(null,AUTH_STR);    AuthorityEntry ae=mDataAuthorities.get(i);    serializer.attribute(null,HOST_STR,ae.getHost());    if (ae.getPort() >= 0) {      serializer.attribute(null,PORT_STR,Integer.toString(ae.getPort()));    }    serializer.endTag(null,AUTH_STR);  }  N=countDataPaths();  for (int i=0; i < N; i++) {    serializer.startTag(null,PATH_STR);    PatternMatcher pe=mDataPaths.get(i);switch (pe.getType()) {case PatternMatcher.PATTERN_LITERAL:      serializer.attribute(null,LITERAL_STR,pe.getPath());    break;case PatternMatcher.PATTERN_PREFIX:  serializer.attribute(null,PREFIX_STR,pe.getPath());break;case PatternMatcher.PATTERN_SIMPLE_GLOB:serializer.attribute(null,SGLOB_STR,pe.getPath());break;}serializer.endTag(null,PATH_STR);}}  }
class C{  private JCheckBox addCheckbox(String text,Container container){  JCheckBox checkbox=new JCheckBox(text);  checkbox.setAlignmentX(Component.LEFT_ALIGNMENT);  checkbox.setBorder(BorderFactory.createEmptyBorder(0,0,10,5));  container.add(checkbox);  return checkbox;}  }
class C{  private void run() throws Exception {  DevelopmentProvider tp=new DevelopmentProvider();  Topology t=tp.newTopology("kafkaSamplePublisher");  Map<String,Object> kafkaConfig=createKafkaConfig();  KafkaProducer kafka=new KafkaProducer(t,null);  AtomicInteger cnt=new AtomicInteger();  TStream<String> msgs=t.poll(null,1L,TimeUnit.SECONDS);  kafka.publish(msgs,topic);  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(t);}  }
class C{  public boolean isAutoWidth(){  return this.intervalDelegate.isAutoWidth();}  }
class C{  private CellSignalStrengthGsm(Parcel in){  mSignalStrength=in.readInt();  mBitErrorRate=in.readInt();  if (DBG)   log("CellSignalStrengthGsm(Parcel): " + toString());}  }
class C{  private void buildAccentChar(float x,float y,char b,char a,Path gp){  Path pathA=getOutline(a,getWidth(a,null));  Matrix xformA=new Matrix();  xformA.setTranslate(x,y);  Matrix tmp=new Matrix(at);  if (at.invert(tmp)) {    xformA.preConcat(tmp);  } else {  }  pathA.transform(xformA);  Path pathB=getOutline(b,getWidth(b,null));  Matrix xformB=new Matrix();  if (at.invert(xformB)) {    pathB.transform(xformB);  } else {  }  gp.addPath(pathB);  gp.addPath(pathA);}  }
class C{  public InputVenueMessageContent.InputVenueMessageContentBuilder latitude(double latitude){  this.latitude=latitude;  return this;}  }
class C{  public DatabaseInfo(String databaseName,Map<String,TableInfo> tableInfoMap){  this.databaseName=databaseName;  this.tableInfoMap=tableInfoMap;}  }
class C{  private void explotion(){  final MPPProductBOM PP_Product_BOM=MPPProductBOM.get(getCtx(),getPP_Product_BOM_ID());  if (getM_Product_ID() != PP_Product_BOM.getM_Product_ID()) {    throw new AdempiereException("@NotMatch@ @PP_Product_BOM_ID@ , @M_Product_ID@");  }  final MProduct product=MProduct.get(getCtx(),PP_Product_BOM.getM_Product_ID());  if (!product.isVerified()) {    throw new AdempiereException("Product BOM Configuration not verified. Please verify the product first - " + product.getValue());  }  if (PP_Product_BOM.isValidFromTo(getDateStartSchedule())) {    MPPOrderBOM PP_Order_BOM=new MPPOrderBOM(PP_Product_BOM,getPP_Order_ID(),get_TrxName());    PP_Order_BOM.setAD_Org_ID(getAD_Org_ID());    PP_Order_BOM.saveEx();    for (    MPPProductBOMLine PP_Product_BOMline : PP_Product_BOM.getLines(true)) {      if (PP_Product_BOMline.isValidFromTo(getDateStartSchedule())) {        MPPOrderBOMLine PP_Order_BOMLine=new MPPOrderBOMLine(PP_Product_BOMline,getPP_Order_ID(),PP_Order_BOM.get_ID(),getM_Warehouse_ID(),get_TrxName());        PP_Order_BOMLine.setAD_Org_ID(getAD_Org_ID());        PP_Order_BOMLine.setM_Warehouse_ID(getM_Warehouse_ID());        PP_Order_BOMLine.setM_Locator_ID(getM_Locator_ID());        PP_Order_BOMLine.setQtyOrdered(getQtyOrdered());        PP_Order_BOMLine.saveEx();      } else {        log.fine("BOM Line skiped - " + PP_Product_BOMline);      }    }  } else {    throw new BOMExpiredException(PP_Product_BOM,getDateStartSchedule());  }  final MWorkflow AD_Workflow=MWorkflow.get(getCtx(),getAD_Workflow_ID());  if (!AD_Workflow.isValid()) {    throw new AdempiereException("Routing is not valid. Please validate it first - " + AD_Workflow.getValue());  }  if (AD_Workflow.isValidFromTo(getDateStartSchedule())) {    MPPOrderWorkflow PP_Order_Workflow=new MPPOrderWorkflow(AD_Workflow,get_ID(),get_TrxName());    PP_Order_Workflow.setAD_Org_ID(getAD_Org_ID());    PP_Order_Workflow.saveEx();    for (    MWFNode AD_WF_Node : AD_Workflow.getNodes(false,getAD_Client_ID())) {      if (AD_WF_Node.isValidFromTo(getDateStartSchedule())) {        MPPOrderNode PP_Order_Node=new MPPOrderNode(AD_WF_Node,PP_Order_Workflow,getQtyOrdered(),get_TrxName());        PP_Order_Node.setAD_Org_ID(getAD_Org_ID());        PP_Order_Node.saveEx();        for (        MWFNodeNext AD_WF_NodeNext : AD_WF_Node.getTransitions(getAD_Client_ID())) {          MPPOrderNodeNext nodenext=new MPPOrderNodeNext(AD_WF_NodeNext,PP_Order_Node);          nodenext.setAD_Org_ID(getAD_Org_ID());          nodenext.saveEx();        }        for (        MPPWFNodeProduct wfnp : MPPWFNodeProduct.forAD_WF_Node_ID(getCtx(),AD_WF_Node.get_ID())) {          MPPOrderNodeProduct nodeOrderProduct=new MPPOrderNodeProduct(wfnp,PP_Order_Node);          nodeOrderProduct.setAD_Org_ID(getAD_Org_ID());          nodeOrderProduct.saveEx();        }        for (        MPPWFNodeAsset wfna : MPPWFNodeAsset.forAD_WF_Node_ID(getCtx(),AD_WF_Node.get_ID())) {          MPPOrderNodeAsset nodeorderasset=new MPPOrderNodeAsset(wfna,PP_Order_Node);          nodeorderasset.setAD_Org_ID(getAD_Org_ID());          nodeorderasset.saveEx();        }      }    }    PP_Order_Workflow.getNodes(true);    for (    MPPOrderNode orderNode : PP_Order_Workflow.getNodes(false,getAD_Client_ID())) {      if (PP_Order_Workflow.getAD_WF_Node_ID() == orderNode.getAD_WF_Node_ID()) {        PP_Order_Workflow.setPP_Order_Node_ID(orderNode.getPP_Order_Node_ID());      }      for (      MPPOrderNodeNext next : orderNode.getTransitions(getAD_Client_ID())) {        next.setPP_Order_Next_ID();        next.saveEx();      }    }    PP_Order_Workflow.saveEx();  } else {    throw new RoutingExpiredException(AD_Workflow,getDateStartSchedule());  }}  }
class C{  public void iterateThruFolder(String path){  File root=new File(path);  File[] list=root.listFiles();  if (list == null) {    return;  }  for (  File f : list) {    if (f.isDirectory()) {      iterateThruFolder(f.getAbsolutePath());      if (!subdirectoriesList.contains(f.getPath())) {        subdirectoriesList.add(f.getPath());      }    }  }}  }
class C{  @Override protected MeasureOutput measure(int width,int height){  int screenH=WXViewUtils.getScreenHeight(WXEnvironment.sApplication);  int weexH=WXViewUtils.getWeexHeight(getInstanceId());  int outHeight=height > (weexH >= screenH ? screenH : weexH) ? weexH - mAbsoluteY : height;  return super.measure(width,outHeight);}  }
class C{  public String randomlyGenerateDestination(){  return Util.selectRandomlyFromList(getLocations());}  }
class C{  public static String createBaseRGBString(Color c){  return "-fx-base: " + createRGBString(c);}  }
class C{  public static String prettyFormat(String soap){  try {    Source xmlInput=new StreamSource(new StringReader(soap));    StringWriter stringWriter=new StringWriter();    StreamResult xmlOutput=new StreamResult(stringWriter);    TransformerFactory transformerFactory=TransformerFactory.newInstance();    Transformer transformer=transformerFactory.newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");    transformer.transform(xmlInput,xmlOutput);    return xmlOutput.getWriter().toString();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Override protected final Button createActionButton(String name,Runnable action){  Button btn=FXGL.getUIFactory().newButton(name);  btn.setOnAction(null);  return btn;}  }
class C{  public VerletPhysics3D addParticle(VerletParticle3D p){  particles.add(p);  return this;}  }
class C{  public Observation(){}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public OMScalingRaster(double ullat,double ullon,double lrlat,double lrlon,int w,int h,int[] pix){  super(ullat,ullon,w,h,pix);  lat2=lrlat;  lon2=lrlon;}  }
class C{  public <T>Flag registerOptional(final String name,final Class<T> type,final String usage,final String description,final T defaultValue){  return registerOptional(null,name,type,usage,description,defaultValue);}  }
class C{  public static int prevPow2(int x){  if (x < 1)   throw new IllegalArgumentException("x must be greater or equal 1");  return (int)Math.pow(2,Math.floor(Math.log(x) / Math.log(2)));}  }
class C{  public void addCollected(BigDecimal amount){  addCollectedWithTolerance(amount,BigDecimal.ZERO);}  }
class C{  public MultiStateCompilationUnitChange(final String name,final ICompilationUnit unit){  super(name,(IFile)unit.getResource());  fUnit=unit;  setTextType("java");}  }
class C{  private JSONWriter end(char m,char c) throws JSONException {  if (this.mode != m) {    throw new JSONException(m == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(m);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  public void enforceContext(Resource... contexts){  OpenRDFUtil.verifyContextNotNull(contexts);  this.contexts=contexts;}  }
class C{  public void enableGrid(boolean enable){  gridEnabled=enable;  layerEffects.gridCell=gridCellSize;  layerEffects.gridColor=gridColor.toArray(null);  layerEffects.gridEnabled=enable;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.877 -0400",hash_original_method="450793B14B2760672928AE5911F3EF0A",hash_generated_method="D61AB6A8D39F54AA6F6EE26C3F3F9493") public static void disable(){}  }
class C{  public void addMapObserver(Observer<IOObjectMapEvent> observer){  mapObservable.addObserver(observer,false);}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  public String value(){  return value;}  }
class C{  @Override public Long hsetnx(final byte[] key,final byte[] field,final byte[] value){  checkIsInMultiOrPipeline();  client.hsetnx(key,field,value);  return client.getIntegerReply();}  }
class C{  public NumericDocValuesField(String name,long value){  super(name,TYPE);  fieldsData=Long.valueOf(value);}  }
class C{  public void start() throws IOException, StunException {  localSocket=new IceUdpSocketWrapper(new SafeCloseDatagramSocket(serverAddress));  stunStack.addSocket(localSocket);  stunStack.addRequestListener(serverAddress,this);}  }
class C{  public Class<? extends OutputStreamProvider> bindOutputStreamProvider(){  return ConsoleOutputStreamProvider.class;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_noderemovechildnode.class,args);}  }
class C{  public boolean isParameter(){  if (o1 instanceof SootMethod && o2 instanceof Integer)   return true;  return false;}  }
class C{  private void ib7(int a,int b,int c,int d){  int t3=c | (a & b);  int t4=d & (a | b);  X3=t3 ^ t4;  int t6=~d;  int t7=b ^ t4;  int t9=t7 | (X3 ^ t6);  X1=a ^ t9;  X0=(c ^ t7) ^ (d | X1);  X2=(t3 ^ X1) ^ (X0 ^ (a & X3));}  }
class C{  private void enlargeCapacity(int key){  int diff=offCount - offset;  int newSize=arr.length;  if (newSize < 1)   newSize=1;  while (newSize < key + offset + diff) {    newSize*=2;  }  if (newSize > arr.length) {    Object[] na=new Object[newSize];    for (int i=offset; i < offset + size; i++) {      na[i + diff]=arr[i];    }    arr=na;    offset+=diff;  }}  }
class C{  static String xmltoRFC(String string){  try {    String s=changeLess32toRFC(string);    return changeWStoRFC(s);  } catch (  Exception e) {    return string;  }}  }
class C{  boolean update(InputStream in,OutputStream out,InputStream newManifest,JarIndex jarIndex) throws IOException {  ZipInputStream zis=new ZipInputStream(in);  ZipOutputStream zos=new JarOutputStream(out);  ZipEntry e=null;  boolean foundManifest=false;  boolean updateOk=true;  if (jarIndex != null) {    addIndex(jarIndex,zos);  }  while ((e=zis.getNextEntry()) != null) {    String name=e.getName();    boolean isManifestEntry=equalsIgnoreCase(name,MANIFEST_NAME);    if ((jarIndex != null && equalsIgnoreCase(name,INDEX_NAME)) || (Mflag && isManifestEntry)) {      continue;    } else     if (isManifestEntry && ((newManifest != null) || (ename != null))) {      foundManifest=true;      if (newManifest != null) {        FileInputStream fis=new FileInputStream(mname);        boolean ambiguous=isAmbiguousMainClass(new Manifest(fis));        fis.close();        if (ambiguous) {          return false;        }      }      Manifest old=new Manifest(zis);      if (newManifest != null) {        old.read(newManifest);      }      if (!updateManifest(old,zos)) {        return false;      }    } else {      if (!entryMap.containsKey(name)) {        ZipEntry e2=new ZipEntry(name);        e2.setMethod(e.getMethod());        e2.setTime(e.getTime());        e2.setComment(e.getComment());        e2.setExtra(e.getExtra());        if (e.getMethod() == ZipEntry.STORED) {          e2.setSize(e.getSize());          e2.setCrc(e.getCrc());        }        zos.putNextEntry(e2);        copy(zis,zos);      } else {        File f=entryMap.get(name);        addFile(zos,f);        entryMap.remove(name);        entries.remove(f);      }    }  }  for (  File f : entries) {    addFile(zos,f);  }  if (!foundManifest) {    if (newManifest != null) {      Manifest m=new Manifest(newManifest);      updateOk=!isAmbiguousMainClass(m);      if (updateOk) {        if (!updateManifest(m,zos)) {          updateOk=false;        }      }    } else     if (ename != null) {      if (!updateManifest(new Manifest(),zos)) {        updateOk=false;      }    }  }  zis.close();  zos.close();  return updateOk;}  }
class C{  public boolean greaterThan(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.lessThan(this);  return this.num() > obj2.num();}  }
class C{  public static int safeParseInt(String s){  return safeParseInt(s,-1);}  }
class C{  public static final double nextDouble(double value){  if (value == Double.POSITIVE_INFINITY) {    return value;  }  long bits;  if (value == 0) {    bits=0;  } else {    bits=Double.doubleToLongBits(value);  }  return Double.longBitsToDouble(value < 0 ? bits - 1 : bits + 1);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,Math.min(z1,z2));          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,Math.min(z1,constant2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,Math.min(constant1,z2));          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  public boolean containsExplicitExceptions(){  for (ThrownExceptionIterator i=iterator(); i.hasNext(); ) {    i.next();    if (i.isExplicit()) {      return true;    }  }  return false;}  }
class C{  public IntelligentSorter(boolean ascending){  super(ascending);  mycomp=sage.Seeker.getInstance().getMediaFileComparator(true);}  }
class C{  public static <T>T castOrFail(Object object,Class<T> clazz){  requireNonNull(clazz);  if (object == null) {    throw new NoSuchElementException("null is not an instance of " + clazz.getName());  }  return Optional.of(object).filter(null).map(null).get();}  }
class C{  public void add(long x){  Cell[] as;  long b, v;  int[] hc;  Cell a;  int n;  if ((as=cells) != null || !casBase(b=base,b + x)) {    boolean uncontended=true;    if ((hc=threadHashCode.get()) == null || as == null || (n=as.length) < 1 || (a=as[(n - 1) & hc[0]]) == null || !(uncontended=a.cas(v=a.value,v + x)))     retryUpdate(x,hc,uncontended);  }}  }
class C{  public boolean isUpperLimitEnabled(){  return this.upperLimitEnabled;}  }
class C{  @Transactional @Override public List<ReceiptHeader> createBankRemittance(final String[] serviceNameArr,final String[] totalCashAmount,final String[] totalAmount,final String[] totalCardAmount,final String[] receiptDateArray,final String[] fundCodeArray,final String[] departmentCodeArray,final Integer accountNumberId,final Integer positionUser,final String[] receiptNumberArray,final Date remittanceDate){  final List<ReceiptHeader> bankRemittanceList=new ArrayList<ReceiptHeader>(0);  final List<ReceiptHeader> bankRemitList=new ArrayList<ReceiptHeader>();  final SimpleDateFormat dateFomatter=new SimpleDateFormat("yyyy-MM-dd",Locale.getDefault());  financialsUtil.prepareForUpdateInstrumentDepositSQL();  final String instrumentGlCodeQueryString="SELECT COA.GLCODE FROM CHARTOFACCOUNTS COA,EGF_INSTRUMENTACCOUNTCODES IAC,EGF_INSTRUMENTTYPE IT " + "WHERE IT.ID=IAC.TYPEID AND IAC.GLCODEID=COA.ID AND IT.TYPE=";  final String receiptInstrumentQueryString="select DISTINCT (instruments) from org.egov.collection.entity.ReceiptHeader receipt " + "join receipt.receiptInstrument as instruments join receipt.receiptMisc as receiptMisc where ";  final String serviceNameCondition="receipt.service.name=? ";  final String receiptDateCondition="and date(receipt.receiptdate)=? ";  final String instrumentStatusCondition="and instruments.statusId.id=? ";  final String instrumentTypeCondition="and instruments.instrumentType.type = ? ";  final String receiptFundCondition="and receiptMisc.fund.code = ? ";  final String receiptDepartmentCondition="and receiptMisc.department.code = ? ";  final String receiptSourceCondition="and receipt.source = ? ";  final String cashInHandQueryString=instrumentGlCodeQueryString + "'" + CollectionConstants.INSTRUMENTTYPE_CASH+ "'";  final String chequeInHandQueryString=instrumentGlCodeQueryString + "'" + CollectionConstants.INSTRUMENTTYPE_CHEQUE+ "'";  final String cardPaymentQueryString=instrumentGlCodeQueryString + "'" + CollectionConstants.INSTRUMENTTYPE_CARD+ "'";  final Query cashInHand=persistenceService.getSession().createSQLQuery(cashInHandQueryString);  final Query chequeInHand=persistenceService.getSession().createSQLQuery(chequeInHandQueryString);  final Query cardPaymentAccount=persistenceService.getSession().createSQLQuery(cardPaymentQueryString);  String cashInHandGLCode=null, chequeInHandGlcode=null;  final String createVoucher=collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_CREATEVOUCHER_FOR_REMITTANCE);  final String functionCode=collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTION_BANKREMITTANCE_FUNCTIONCODE);  final EgwStatus instrmentStatusNew=collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_INSTRUMENTHEADER,CollectionConstants.INSTRUMENT_NEW_STATUS);  final EgwStatus receiptStatusRemitted=collectionsUtil.getReceiptStatusForCode(CollectionConstants.RECEIPT_STATUS_CODE_REMITTED);  if (!cashInHand.list().isEmpty())   cashInHandGLCode=cashInHand.list().get(0).toString();  if (!chequeInHand.list().isEmpty())   chequeInHandGlcode=chequeInHand.list().get(0).toString();  if (!cardPaymentAccount.list().isEmpty())   cardPaymentAccount.list().get(0).toString();  collectionsUtil.getVoucherType();  Boolean showRemitDate=false;  BigDecimal totalCashAmt=BigDecimal.ZERO;  BigDecimal totalChequeAmount=BigDecimal.ZERO;  BigDecimal totalCashVoucherAmt=BigDecimal.ZERO;  BigDecimal totalChequeVoucherAmt=BigDecimal.ZERO;  String fundCode="";  Date voucherDate=null;  List<InstrumentHeader> instrumentHeaderListCash=new ArrayList<InstrumentHeader>();  List<InstrumentHeader> instrumentHeaderListCheque=new ArrayList<InstrumentHeader>();  if (collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTION_BANKREMITTANCE_SHOWREMITDATE).equals(CollectionConstants.YES))   showRemitDate=true;  final EgwStatus instrumentStatusDeposited=collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_INSTRUMENTHEADER,CollectionConstants.INSTRUMENT_DEPOSITED_STATUS);  final Bankaccount depositedBankAccount=(Bankaccount)persistenceService.find("from Bankaccount where id=?",Long.valueOf(accountNumberId.longValue()));  final String serviceGlCode=depositedBankAccount.getChartofaccounts().getGlcode();  for (int i=0; i < serviceNameArr.length; i++) {    final String serviceName=serviceNameArr[i].trim();    if (showRemitDate && remittanceDate != null)     voucherDate=remittanceDate; else     try {      collectionsUtil.getRemittanceVoucherDate(dateFomatter.parse(receiptDateArray[i]));    } catch (    final ParseException e) {      LOGGER.error("Error Parsing Date",e);    }    if (serviceName != null && serviceName.length() > 0) {      persistenceService.findByNamedQuery(CollectionConstants.QUERY_SERVICE_BY_NAME,serviceName);      final ServiceDetails serviceDetails=(ServiceDetails)persistenceService.findByNamedQuery(CollectionConstants.QUERY_SERVICE_BY_NAME,serviceName);      if (totalCashAmount[i].trim() != null && totalCashAmount[i].trim().length() > 0 && cashInHandGLCode != null) {        final StringBuilder cashQueryBuilder=new StringBuilder(receiptInstrumentQueryString);        cashQueryBuilder.append(serviceNameCondition);        cashQueryBuilder.append(receiptDateCondition);        cashQueryBuilder.append(instrumentStatusCondition);        cashQueryBuilder.append(instrumentTypeCondition);        cashQueryBuilder.append(receiptFundCondition);        cashQueryBuilder.append(receiptDepartmentCondition);        cashQueryBuilder.append("and receipt.status.id=(select id from org.egov.commons.EgwStatus where moduletype=? and code=?) ");        cashQueryBuilder.append(receiptSourceCondition);        final Object arguments[]=new Object[9];        arguments[0]=serviceName;        try {          arguments[1]=dateFomatter.parse(receiptDateArray[i]);        } catch (        final ParseException exp) {          LOGGER.debug("Exception in parsing date  " + receiptDateArray[i] + " - "+ exp.getMessage());          throw new ApplicationRuntimeException("Exception while parsing date",exp);        }        arguments[2]=instrmentStatusNew.getId();        arguments[3]=CollectionConstants.INSTRUMENTTYPE_CASH;        arguments[4]=fundCodeArray[i];        arguments[5]=departmentCodeArray[i];        arguments[6]=CollectionConstants.MODULE_NAME_RECEIPTHEADER;        arguments[7]=CollectionConstants.RECEIPT_STATUS_CODE_APPROVED;        arguments[8]=Source.SYSTEM.toString();        fundCode=fundCodeArray[i];        instrumentHeaderListCash=persistenceService.findAllBy(cashQueryBuilder.toString(),arguments);        totalCashAmt=totalCashAmt.add(new BigDecimal(totalCashAmount[i]));        if (CollectionConstants.YES.equalsIgnoreCase(createVoucher) && serviceDetails.getVoucherCreation())         totalCashVoucherAmt=totalCashVoucherAmt.add(new BigDecimal(totalCashAmount[i])); else         financialsUtil.updateInstrumentHeader(instrumentHeaderListCash,instrumentStatusDeposited,depositedBankAccount);        bankRemittanceList.addAll(getRemittanceList(serviceDetails,instrumentHeaderListCash));      }      if (totalAmount[i].trim() != null && totalAmount[i].trim().length() > 0 && chequeInHandGlcode != null) {        final StringBuilder chequeQueryBuilder=new StringBuilder(receiptInstrumentQueryString);        chequeQueryBuilder.append(serviceNameCondition);        chequeQueryBuilder.append(receiptDateCondition);        chequeQueryBuilder.append(instrumentStatusCondition);        chequeQueryBuilder.append("and instruments.instrumentType.type in ( ?, ?)");        chequeQueryBuilder.append("and receipt.status.id=(select id from org.egov.commons.EgwStatus where moduletype=? and code=?) ");        chequeQueryBuilder.append(receiptFundCondition);        chequeQueryBuilder.append(receiptDepartmentCondition);        chequeQueryBuilder.append(receiptSourceCondition);        final Object arguments[]=new Object[10];        arguments[0]=serviceName;        try {          arguments[1]=dateFomatter.parse(receiptDateArray[i]);        } catch (        final ParseException exp) {          LOGGER.debug("Exception in parsing date  " + receiptDateArray[i] + " - "+ exp.getMessage());          throw new ApplicationRuntimeException("Exception while parsing date",exp);        }        arguments[2]=instrmentStatusNew.getId();        arguments[3]=CollectionConstants.INSTRUMENTTYPE_CHEQUE;        arguments[4]=CollectionConstants.INSTRUMENTTYPE_DD;        arguments[5]=CollectionConstants.MODULE_NAME_RECEIPTHEADER;        arguments[6]=CollectionConstants.RECEIPT_STATUS_CODE_APPROVED;        arguments[7]=fundCodeArray[i];        arguments[8]=departmentCodeArray[i];        arguments[9]=Source.SYSTEM.toString();        fundCode=fundCodeArray[i];        instrumentHeaderListCheque=persistenceService.findAllBy(chequeQueryBuilder.toString(),arguments);        totalChequeAmount=totalChequeAmount.add(new BigDecimal(totalAmount[i]));        if (CollectionConstants.YES.equalsIgnoreCase(createVoucher) && serviceDetails.getVoucherCreation())         totalChequeVoucherAmt=totalChequeVoucherAmt.add(new BigDecimal(totalAmount[i])); else         financialsUtil.updateInstrumentHeader(instrumentHeaderListCheque,instrumentStatusDeposited,depositedBankAccount);        bankRemittanceList.addAll(getRemittanceList(serviceDetails,instrumentHeaderListCheque));      }    }    for (    final ReceiptHeader receiptHeader : bankRemittanceList)     if (!bankRemitList.contains(receiptHeader))     bankRemitList.add(receiptHeader);  }  final Remittance remittance=populateAndPersistRemittance(totalCashAmt,totalChequeAmount,fundCode,cashInHandGLCode,chequeInHandGlcode,serviceGlCode,functionCode,bankRemitList,createVoucher,voucherDate,depositedBankAccount,totalCashVoucherAmt,totalChequeVoucherAmt);  for (  final ReceiptHeader receiptHeader : bankRemitList) {    receiptHeader.setStatus(receiptStatusRemitted);    receiptHeader.setRemittanceReferenceNumber(remittance.getReferenceNumber());    receiptHeaderService.update(receiptHeader);  }  return bankRemitList;}  }
class C{  public PluginException(String msg,Throwable throwable){  super(msg,throwable);}  }
class C{  @Override public void endWindow(){  if (verport.isConnected()) {    for (    Map.Entry<Integer,Set<Integer>> e : valhistory.entrySet()) {      verport.emit(new KeyHashValPair<Integer,Integer>(e.getKey(),e.getValue().size()));    }  }  if (clearHistory) {    valhistory.clear();  }}  }
class C{  public DViewPrivateKey(JDialog parent,String title,PrivateKey privateKey,Provider provider) throws CryptoException {  super(parent,title,ModalityType.DOCUMENT_MODAL);  this.privateKey=privateKey;  this.provider=provider;  initComponents();}  }
class C{  public void add(Individual individual){  individuals.add(individual);}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public Graph search(){  long start=System.currentTimeMillis();  this.numIndependenceTests=0;  this.allTriples=new HashSet<>();  this.ambiguousTriples=new HashSet<>();  this.colliderTriples=new HashSet<>();  this.noncolliderTriples=new HashSet<>();  this.maxRemainingAtDepth=new int[20];  this.maxVariableAtDepth=new Node[20];  Arrays.fill(maxRemainingAtDepth,-1);  Arrays.fill(maxVariableAtDepth,null);  Graph graph=new EdgeListGraph();  this.a=new HashSet<>();  this.variables=test.getVariables();  Node target=variables.get(0);  graph.addNode(target);  for (  Node node : variables) {    if (!graph.containsNode(node)) {      graph.addNode(node);    }    constructFan(node,graph);  }  for (  Node node : variables) {    if (!graph.containsNode(node)) {      graph.addNode(node);    }  }  orientUnshieldedTriples(knowledge,graph,getTest(),getDepth(),graph.getNodes());  MeekRules meekRules=new MeekRules();  meekRules.setAggressivelyPreventCycles(this.aggressivelyPreventCycles);  meekRules.setKnowledge(knowledge);  meekRules.orientImplied(graph);  this.logger.log("graph","\nReturning this graph: " + graph);  return graph;}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  private void processKeywords(){  if (isKind(PRIMITIVETYPES)) {    for (int i=0; i < PRIM_TYPES.length; i++) {      if (NameMatcher.isSimilarName(fName,PRIM_TYPES[i])) {        addResult(new SimilarElement(PRIMITIVETYPES,PRIM_TYPES[i],50));      }    }  }  if (isKind(VOIDTYPE)) {    String voidType="void";    if (NameMatcher.isSimilarName(fName,voidType)) {      addResult(new SimilarElement(PRIMITIVETYPES,voidType,50));    }  }}  }
class C{  public boolean isIndependent(Node x,Node y,List<Node> z){  if (z == null) {    throw new NullPointerException();  }  for (  Node node : z) {    if (node == null) {      throw new NullPointerException();    }  }  if (!observedVars.contains(x)) {    throw new IllegalArgumentException("Not an observed variable: " + x);  }  if (!observedVars.contains(y)) {    throw new IllegalArgumentException("Not an observed variable: " + y);  }  for (  Node _z : z) {    if (!observedVars.contains(_z)) {      throw new IllegalArgumentException("Not an observed variable: " + _z);    }  }  boolean dSeparated=!isDConnectedTo4(x,y,z,graph,getAlpha());  System.out.println("Dseparated = " + dSeparated);  if (verbose) {    if (dSeparated) {      double pValue=1.0;      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(x,y,z,pValue));      System.out.println(SearchLogUtils.independenceFactMsg(x,y,z,pValue));    } else {      double pValue=0.0;      TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(x,y,z,pValue));      System.out.println(SearchLogUtils.dependenceFactMsg(x,y,z,pValue));    }  }  if (dSeparated) {    if (this.facts != null) {      this.facts.add(new IndependenceFact(x,y,z));    }    pvalue=1.0;  } else {    pvalue=0.0;  }  return dSeparated;}  }
class C{  public DoublesUnion build(){  return new HeapDoublesUnion(k_);}  }
class C{  public boolean isPerStreamStatEnabled(){  return getBoolean(SERVER_ENABLE_PERSTREAM_STAT,SERVER_ENABLE_PERSTREAM_STAT_DEFAULT);}  }
class C{  @SuppressWarnings("unchecked") public <SubT extends T>ChildNodes<? extends SubT> as(Class<SubT> subClass){  elementClass.asSubclass(subClass);  return (ChildNodes<SubT>)this;}  }
class C{  NetworkPacket(boolean compressed,int marshallingType,byte[] data){  this.compressed=compressed;  this.marshallingType=marshallingType;  this.data=data;}  }
class C{  public LoadUnit(String tu,String physicalPosition){  this.transportUnit=tu;  this.physicalPosition=physicalPosition;}  }
class C{  public boolean isAudited(){  Object oo=get_Value(COLUMNNAME_IsAudited);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void createInfoWindow(){  infoWindow=new JWindow(SwingUtilities.getWindowAncestor(textField));  infoLabel=new JLabel();  infoWindow.add(infoLabel);  JPanel contentPane=(JPanel)infoWindow.getContentPane();  Border border=BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.GRAY),BorderFactory.createEmptyBorder(2,4,2,4));  contentPane.setBorder(border);  contentPane.setBackground(HtmlColors.decode("#EEEEEE"));  infoLabel.setFont(textField.getFont());  containingWindow=SwingUtilities.getWindowAncestor(textField);  if (containingWindow != null) {    containingWindow.addComponentListener(componentListener);  }  textField.addComponentListener(componentListener);}  }
class C{  public Cci(RealMatrix data,List<String> variables,double alpha){  if (data == null)   throw new NullPointerException();  if (variables == null)   throw new NullPointerException();  if (data.getColumnDimension() != variables.size()) {    throw new IllegalArgumentException("Columns in data do not match # variables.");  }  this.alpha=alpha;  this.cutoff=StatUtils.getZForAlpha(alpha);  this.data=data;  indices=new HashMap<>();  for (int i=0; i < variables.size(); i++) {    indices.put(variables.get(i),i);  }  h=new double[data.getColumnDimension()];  for (int i=0; i < data.getColumnDimension(); i++) {    h[i]=h(variables.get(i));  }}  }
class C{  public boolean readBit(){  return readBits(1) == 1;}  }
class C{  public Set<String> keySet(){  return propMap.keySet();}  }
class C{  public AppletObjectInputStream(InputStream in,AppletClassLoader loader) throws IOException, StreamCorruptedException {  super(in);  if (loader == null) {    throw new AppletIllegalArgumentException("appletillegalargumentexception.objectinputstream");  }  this.loader=loader;}  }
class C{  private List<TaskRecord> createRecordList(ResultSet rs,int offset,int limit) throws SQLException {  List<TaskRecord> lst=new ArrayList<TaskRecord>();  int i=0;  while (rs.next()) {    if (i >= offset && i < offset + limit)     lst.add(readTaskRecord(rs));    i++;  }  return lst;}  }
class C{  @Override public final void perform(IR ir){  if (!ir.method.isInterruptible() || !Instrumentation.instrumentationEnabled() || ir.method.getDeclaringClass().hasSaveVolatileAnnotation()) {    return;  }  BasicBlock firstBB=ir.cfg.entry();  MethodInvocationCounterData data=AOSDatabase.methodInvocationCounterData;  int cmid=ir.compiledMethod.getId();  Instruction c=data.createEventCounterInstruction(cmid);  firstBB.prependInstructionRespectingPrologue(c);}  }
