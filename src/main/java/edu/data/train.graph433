class C{  public int[] validBaudNumber(){  log.error("default validBaudNumber implementation should not be used");  new Exception().printStackTrace();  return null;}  }
class C{  public SearchSourceBuilder terminateAfter(int terminateAfter){  if (terminateAfter <= 0) {    throw new IllegalArgumentException("terminateAfter must be > 0");  }  this.terminateAfter=terminateAfter;  return this;}  }
class C{  public boolean isVolumeTaskCompletersEmpty(){  return (null == _volumeTaskCompleterMap || _volumeTaskCompleterMap.isEmpty());}  }
class C{  public Enumeration<Field> fields(){  return m_Values.keys();}  }
class C{  @Override public BuilderClient builder(){  return new DefaultBuilderClient(url,authenticationManager);}  }
class C{  public int resolveLevel(ASTNode possibleMatchingNode){  return IMPOSSIBLE_MATCH;}  }
class C{  @Override void initAnimation(){  if (!mInitialized) {    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  public void addAllOf(IntArrayList x,IntArrayList y){  int listSize=x.size();  if (this.size + listSize >= this.capacity)   flush();  this.target.addAllOf(x,y);}  }
class C{  private void logMessage(String msg,Object[] obj){  if (_monitoringPropertiesLoader.isToLogIndications()) {    _logger.debug("-> " + msg,obj);  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  protected void openDocumentation(){  if (Desktop.isDesktopSupported()) {    try {      Desktop.getDesktop().browse(new URI(OPENDIAL_DOC));    } catch (    Exception e1) {      e1.printStackTrace();    }  }}  }
class C{  public void linkResultDirectedEdges(){  for (Iterator nodeit=nodes.iterator(); nodeit.hasNext(); ) {    Node node=(Node)nodeit.next();    ((DirectedEdgeStar)node.getEdges()).linkResultDirectedEdges();  }}  }
class C{  public synchronized void performSplit(final Node node){  if (node != null) {    createCheckpoint(R.string.undo_action_split_ways);    getDelegator().splitAtNode(node);    map.invalidate();  }}  }
class C{  public boolean isAlive(){  return !socket.isClosed() && !socket.isInputShutdown() && !socket.isOutputShutdown();}  }
class C{  public static ParsedQuery parseQuery(QueryLanguage ql,String query,String baseURI) throws MalformedQueryException, UnsupportedQueryLanguageException {  QueryParser parser=createParser(ql);  return parser.parseQuery(query,baseURI);}  }
class C{  public void testSynonyms() throws Exception {  assertQ("test synonyms",req("q","fooaaa","qf","text_sw","mm","100%","defType","edismax"),"*[count(//doc)=1]");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.N4_CLASS_DECLARATION__ANNOTATION_LIST:    return getAnnotationList();case N4JSPackage.N4_CLASS_DECLARATION__DECLARED_MODIFIERS:  return getDeclaredModifiers();case N4JSPackage.N4_CLASS_DECLARATION__NAME:return getName();case N4JSPackage.N4_CLASS_DECLARATION__TYPE_VARS:return getTypeVars();case N4JSPackage.N4_CLASS_DECLARATION__TYPING_STRATEGY:return getTypingStrategy();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void layoutComponents(){  JPanel contentPane=(JPanel)getContentPane();  contentPane.setLayout(new BorderLayout());  contentPane.setBorder(new EmptyBorder(10,10,10,10));  contentPane.add("Center",createMainPanel());  contentPane.add("South",createButtonPanel());}  }
class C{  public void enableAutomaticVideoBitrate() throws IOException {  setConfigOption("video:bitrate_control_mode","1");}  }
class C{  @Override public void clearBatch() throws SQLException {  try {    debugCodeCall("clearBatch");    checkClosed();    batchParameters=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void uploadBuild(){  Main.getInstance().binary.initPath(apkAbsolutePath);  progressBar.setValue(0);  progressBar.setVisible(true);  uploadBtn.setEnabled(false);  tips.setVisible(true);  uploadBtn.setText("uploading...");  tips.setText("uploading....");  cancelUploadButton.setVisible(true);  uploadService.sendBuild(null,apkAbsolutePath,KeysManager.instance().getApiKey(),binary,changeLogTa.getText(),Main.this);}  }
class C{  public static byte[] tryGetBytes(final String hexString){  try {    return getBytesInternal(hexString);  } catch (  final DecoderException e) {    return null;  }}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public void testConsumeNPE(){  SubmissionPublisher<Integer> p=basicPublisher();  try {    @SuppressWarnings("unused") CompletableFuture<Void> f=p.consume(null);    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public void propertyChange(PropertyChangeEvent e){  repaint();}  }
class C{  @DSSpec(DSCat.THREADING) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.016 -0500",hash_original_method="A673F57B6994AD18C8F1F59AB6BC8846",hash_generated_method="E25D2BC752A0A896AEF831675748C4CA") public void run(){  boolean periodic=isPeriodic();  if (!canRunInCurrentRunState(periodic))   cancel(false); else   if (!periodic)   ScheduledFutureTask.super.run(); else   if (ScheduledFutureTask.super.runAndReset()) {    setNextRunTime();    reExecutePeriodic(outerTask);  }}  }
class C{  @Override public List<ProcessDependencyInfo> execute(String[] params){  List<ProcessDependencyInfo> udList;  try {    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String pid=commandLine.getOptionValue("process-id");    LOGGER.debug("process-id  is " + pid);    udList=processDependencyDAO.listUD(Integer.parseInt(pid));    LOGGER.debug("Details of process is\n" + udList);    return udList;  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.871 -0500",hash_original_method="C924C06E3DD994AE91BBC5A8A54B9FE3",hash_generated_method="DD675B4DB80B01CA747A2586227C4AFA") public SIPHeader parse() throws ParseException {  ReasonList reasonList=new ReasonList();  if (debug)   dbg_enter("ReasonParser.parse");  try {    headerName(TokenTypes.REASON);    this.lexer.SPorHT();    while (lexer.lookAhead(0) != '\n') {      Reason reason=new Reason();      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      String value=token.getTokenValue();      reason.setProtocol(value);      super.parse(reason);      reasonList.add(reason);      if (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("ReasonParser.parse");  }  return reasonList;}  }
class C{  protected boolean isKeyInTable(String tableName,ResultProducer rp,Object[] key) throws Exception {  String query="SELECT Key_Run" + " FROM " + tableName;  String[] keyNames=rp.getKeyNames();  if (keyNames.length != key.length) {    throw new Exception("Key names and key values of different lengths");  }  boolean first=true;  for (int i=0; i < key.length; i++) {    if (key[i] != null) {      if (first) {        query+=" WHERE ";        first=false;      } else {        query+=" AND ";      }      query+="Key_" + keyNames[i] + '=';      if (key[i] instanceof String) {        query+="'" + processKeyString(key[i].toString()) + "'";      } else {        query+=key[i].toString();      }    }  }  boolean retval=false;  ResultSet rs=select(query);  if (rs.next()) {    retval=true;    if (rs.next()) {      throw new Exception("More than one result entry " + "for result key: " + query);    }  }  close(rs);  return retval;}  }
class C{  public boolean execute(final String sql,final String[] columnNames) throws SQLException {  return executeInternal(sql,fetchSize);}  }
class C{  public void linkBlockSnapshotSessionTarget(URI systemURI,URI snapSessionURI,URI snapshotURI,String copyMode,Boolean targetExists,String stepId){  TaskCompleter completer=null;  try {    StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);    completer=new BlockSnapshotSessionLinkTargetCompleter(snapSessionURI,Lists.newArrayList(snapshotURI),stepId);    getDevice(system.getSystemType()).doLinkBlockSnapshotSessionTarget(system,snapSessionURI,snapshotURI,copyMode,targetExists,completer);  } catch (  Exception e) {    if (completer != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);      completer.error(_dbClient,serviceError);    } else {      throw DeviceControllerException.exceptions.linkBlockSnapshotSessionTargetsFailed(e);    }  }}  }
class C{  public void enforceAMF3(){  amf3_mode++;}  }
class C{  private void sincronizarBase(){  listaInstituicoes=ControleDAO.getBanco().getInstituicaoDAO().combo();}  }
class C{  public SAXNotSupportedException(String message){  super(message);}  }
class C{  public FancyLruCache(Context context){  this(context,DEFAULT_CACHE_PERCENTAGE);}  }
class C{  public void startPreferencePanel(String fragmentClass,Bundle args,int titleRes,CharSequence titleText,Fragment resultTo,int resultRequestCode){  if (mSinglePane) {    if (titleRes == 0 && titleText != null) {      startWithFragment(fragmentClass,args,resultTo,resultRequestCode,titleText,null);    } else {      startWithFragment(fragmentClass,args,resultTo,resultRequestCode,titleRes,0);    }  } else {    Fragment f=Fragment.instantiate(this,fragmentClass,args);    if (resultTo != null) {      f.setTargetFragment(resultTo,resultRequestCode);    }    FragmentTransaction transaction=getFragmentManager().beginTransaction();    transaction.replace(com.android.internal.R.id.prefs,f);    if (titleRes != 0) {      transaction.setBreadCrumbTitle(titleRes);    } else     if (titleText != null) {      transaction.setBreadCrumbTitle(titleText);    }    transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);    transaction.addToBackStack(BACK_STACK_PREFS);    transaction.commitAllowingStateLoss();  }}  }
class C{  public void addPropertyChangeListener(final String propertyName,final PropertyChangeListener listener){  m_PropertyChangeSupport.addPropertyChangeListener(propertyName,listener);}  }
class C{  public void addExcludedDate(Date excludedDate){  Date date=getStartOfDayJavaCalendar(excludedDate.getTime()).getTime();  this.dates.add(date);}  }
class C{  public void paintToolBarContentBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public static void put(CassandraSessionImpl cassandraSes,Session driverSes){  if (cassandraSes == null || driverSes == null)   return;  SessionWrapper old;synchronized (sessions) {    old=sessions.put(cassandraSes,new SessionWrapper(driverSes));    if (monitorSingleton == null || State.TERMINATED.equals(monitorSingleton.getState())) {      monitorSingleton=new SessionMonitor();      monitorSingleton.setDaemon(true);      monitorSingleton.setName("Cassandra-sessions-pool");      monitorSingleton.start();    }  }  if (old != null)   old.release();}  }
class C{  @Override public void identify(String id,Traits traits,Options options){  try {    if (analytics != null) {      analytics.identify(id,traits,options);    }  } catch (  Exception e) {    logger.error(e);  }}  }
class C{  public void contentsChanged(ListDataEvent e){  firePropertyChange(AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY,Boolean.valueOf(false),Boolean.valueOf(true));}  }
class C{  public boolean shouldIgnoreHotKeys(){  return ignoreHotKeys || (gameOptionsDialog != null && gameOptionsDialog.isVisible()) || (about != null && about.isVisible())|| (help != null && help.isVisible())|| (setdlg != null && setdlg.isVisible());}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  changeSupport.removePropertyChangeListener(listener);}  }
class C{  public boolean test(final GPNode thisNode){  return true;}  }
class C{  public RangeIndex(String indexName,Region region,String fromClause,String indexedExpression,String projectionAttributes,String origFromClause,String origIndexExpr,String[] definitions,IndexStatistics stats){  super(indexName,region,fromClause,indexedExpression,projectionAttributes,origFromClause,origIndexExpr,definitions,stats);  RegionAttributes ra=region.getAttributes();  this.entryToValuesMap=new RegionEntryToValuesMap(new java.util.concurrent.ConcurrentHashMap(ra.getInitialCapacity(),ra.getLoadFactor(),ra.getConcurrencyLevel()),false);  nullMappedEntries=new RegionEntryToValuesMap(true);  undefinedMappedEntries=new RegionEntryToValuesMap(true);}  }
class C{  public void deleteMovies(List<Movie> movies){  if (movies == null || movies.size() == 0) {    return;  }  Set<MovieSet> modifiedMovieSets=new HashSet<>();  int oldValue=movieList.size();  for (int i=movies.size() - 1; i >= 0; i--) {    Movie movie=movies.get(i);    movie.deleteFilesSafely();    movieList.remove(movie);    if (movie.getMovieSet() != null) {      MovieSet movieSet=movie.getMovieSet();      movieSet.removeMovie(movie);      modifiedMovieSets.add(movieSet);      movie.setMovieSet(null);    }    try {      MovieModuleManager.getInstance().removeMovieFromDb(movie);    } catch (    Exception e) {      LOGGER.error("Error removing movie from DB: " + e.getMessage());    }  }  for (  MovieSet movieSet : modifiedMovieSets) {    removeMovieSet(movieSet);  }  firePropertyChange("movies",null,movieList);  firePropertyChange("movieCount",oldValue,movieList.size());}  }
class C{  private void readText(InputNode node,Object source,Section section) throws Exception {  Label label=section.getText();  if (label != null) {    readInstance(node,source,label);  }}  }
class C{  protected String createShell() throws WinRMException {  String shellId=newCreateShell().execute();  return shellId;}  }
class C{  public boolean equals(Object obj){  if (obj instanceof NamespaceSpecification) {    NamespaceSpecification other=(NamespaceSpecification)obj;    return ns.equals(other.ns) && wildcard.equals(other.wildcard);  }  return false;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public static String gensalt(){  return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);}  }
class C{  private static Shape generateStar(double x,double y,double innerRadius,double outerRadius,int pointsCount){  GeneralPath path=new GeneralPath();  double outerAngleIncrement=2 * Math.PI / pointsCount;  double outerAngle=0.0;  double innerAngle=outerAngleIncrement / 2.0;  x+=outerRadius;  y+=outerRadius;  float x1=(float)(Math.cos(outerAngle) * outerRadius + x);  float y1=(float)(Math.sin(outerAngle) * outerRadius + y);  float x2=(float)(Math.cos(innerAngle) * innerRadius + x);  float y2=(float)(Math.sin(innerAngle) * innerRadius + y);  path.moveTo(x1,y1);  path.lineTo(x2,y2);  outerAngle+=outerAngleIncrement;  innerAngle+=outerAngleIncrement;  for (int i=1; i < pointsCount; i++) {    x1=(float)(Math.cos(outerAngle) * outerRadius + x);    y1=(float)(Math.sin(outerAngle) * outerRadius + y);    path.lineTo(x1,y1);    x2=(float)(Math.cos(innerAngle) * innerRadius + x);    y2=(float)(Math.sin(innerAngle) * innerRadius + y);    path.lineTo(x2,y2);    outerAngle+=outerAngleIncrement;    innerAngle+=outerAngleIncrement;  }  path.closePath();  return path;}  }
class C{  private TransitSchedule cleanUpSchedule(TransitSchedule newTransitSchedule){  newTransitSchedule=TransitScheduleCleaner.removeRoutesWithoutDepartures(newTransitSchedule);  newTransitSchedule=TransitScheduleCleaner.removeEmptyLines(newTransitSchedule);  newTransitSchedule=TransitScheduleCleaner.removeStopsNotUsed(newTransitSchedule);  return newTransitSchedule;}  }
class C{  public static void quickSelect(ArrayModifiableDBIDs data,Comparator<? super DBIDRef> comparator,int rank){  quickSelect(data,comparator,0,data.size(),rank);}  }
class C{  private static int gallopLeft(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (key.compareTo(a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  protected void dispatchSVGScrollEvent(){  if (bridgeContext.isSVG12()) {    dispatchSVGDocEvent("scroll");  } else {    dispatchSVGDocEvent("SVGScroll");  }}  }
class C{  private int effectiveKeyLength(){  if (keyTypeSupportsLength(keyColumnType) && keyColumnLength == 0)   return VAR_KEY_TYPE_DEFAULT_LENGTH;  if (keyTypeSupportsLength(keyColumnType) && keyColumnLength > MAX_KEY_LENGTH)   return VAR_KEY_TYPE_DEFAULT_LENGTH;  return keyColumnLength;}  }
class C{  public void append(byte[] key,int koff,int klen,byte[] value,int voff,int vlen) throws IOException {  if ((koff | klen | (koff + klen)| (key.length - (koff + klen))) < 0) {    throw new IndexOutOfBoundsException("Bad key buffer offset-length combination.");  }  if ((voff | vlen | (voff + vlen)| (value.length - (voff + vlen))) < 0) {    throw new IndexOutOfBoundsException("Bad value buffer offset-length combination.");  }  try {    DataOutputStream dosKey=prepareAppendKey(klen);    try {      ++errorCount;      dosKey.write(key,koff,klen);      --errorCount;    }  finally {      dosKey.close();    }    DataOutputStream dosValue=prepareAppendValue(vlen);    try {      ++errorCount;      dosValue.write(value,voff,vlen);      --errorCount;    }  finally {      dosValue.close();    }  }  finally {    state=State.READY;  }}  }
class C{  public static synchronized boolean isBodyStenciled(){  return bodyStenciled;}  }
class C{  @Inject public DefaultTSDBService(SystemConfiguration config,MonitorService monitorService){  super(config);  requireArgument(config != null,"System configuration cannot be null.");  requireArgument(monitorService != null,"Monitor service cannot be null.");  _configuration=config;  _monitorService=monitorService;  _mapper=getMapper();  int connCount=Integer.parseInt(_configuration.getValue(Property.TSD_CONNECTION_COUNT.getName(),Property.TSD_CONNECTION_COUNT.getDefaultValue()));  int connTimeout=Integer.parseInt(_configuration.getValue(Property.TSD_ENDPOINT_CONNECTION_TIMEOUT.getName(),Property.TSD_ENDPOINT_CONNECTION_TIMEOUT.getDefaultValue()));  int socketTimeout=Integer.parseInt(_configuration.getValue(Property.TSD_ENDPOINT_SOCKET_TIMEOUT.getName(),Property.TSD_ENDPOINT_SOCKET_TIMEOUT.getDefaultValue()));  _readEndpoint=_configuration.getValue(Property.TSD_ENDPOINT_READ.getName(),Property.TSD_ENDPOINT_READ.getDefaultValue());  _writeEndpoint=_configuration.getValue(Property.TSD_ENDPOINT_WRITE.getName(),Property.TSD_ENDPOINT_WRITE.getDefaultValue());  requireArgument((_readEndpoint != null) && (!_readEndpoint.isEmpty()),"Illegal read endpoint URL.");  requireArgument((_writeEndpoint != null) && (!_writeEndpoint.isEmpty()),"Illegal write endpoint URL.");  requireArgument(connCount >= 2,"At least two connections are required.");  requireArgument(connTimeout >= 1,"Timeout must be greater than 0.");  try {    _readPort=getClient(_readEndpoint,connCount / 2,connTimeout,socketTimeout);    _writePort=getClient(_writeEndpoint,connCount / 2,connTimeout,socketTimeout);    _executorService=Executors.newFixedThreadPool(connCount);  } catch (  MalformedURLException ex) {    throw new SystemException("Error initializing the TSDB HTTP Client.",ex);  }}  }
class C{  public static Bitmap decodeSampledBitmapFromDescriptor(FileDescriptor fileDescriptor,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  return BitmapFactory.decodeFileDescriptor(fileDescriptor,null,options);}  }
class C{  public void updateNotification(int notificationId){  try {    notificationDAO.open();    notificationDAO.updateNotification(notificationId,Notification.Status.DISMISSED);  }  finally {    notificationDAO.close();  }}  }
class C{  protected void drawAnnotations(Graphics2D g2,Rectangle2D dataArea){  if (getAnnotations() != null) {    Iterator iterator=getAnnotations().iterator();    while (iterator.hasNext()) {      CategoryAnnotation annotation=(CategoryAnnotation)iterator.next();      annotation.draw(g2,this,dataArea,getDomainAxis(),getRangeAxis());    }  }}  }
class C{  public byte[] encode(){  byte[] bytes;switch (sizeOf(value)) {case 1:    return new byte[]{(byte)value};case 3:  return new byte[]{(byte)253,(byte)(value),(byte)(value >> 8)};case 5:bytes=new byte[5];bytes[0]=(byte)254;Utils.uint32ToByteArrayLE(value,bytes,1);return bytes;default :bytes=new byte[9];bytes[0]=(byte)255;Utils.uint64ToByteArrayLE(value,bytes,1);return bytes;}}  }
class C{  public static VOParameterDefinition toVOParameterDefinition(ParameterDefinition paramDef,LocalizerFacade facade){  if (paramDef == null) {    return null;  }  ParameterType paramType=paramDef.getParameterType();  String paramId=paramDef.getParameterId();  String description=facade.getText(paramDef.getKey(),LocalizedObjectTypes.PARAMETER_DEF_DESC);  ParameterValueType valueType=paramDef.getValueType();  ParameterModificationType modificationType=paramDef.getModificationType();  String defaultValue=paramDef.getDefaultValue();  Long minValue=paramDef.getMinimumValue();  Long maxValue=paramDef.getMaximumValue();  boolean mandatory=paramDef.isMandatory();  boolean configurable=paramDef.isConfigurable();  List<ParameterOption> options=paramDef.getOptionList();  List<VOParameterOption> voOptions=ParameterOptionAssembler.toVOParameterOptions(options,facade,paramDef.getParameterId());  VOParameterDefinition voParam=new VOParameterDefinition(paramType,paramId,description,valueType,defaultValue,minValue,maxValue,mandatory,configurable,modificationType,voOptions);  updateValueObject(voParam,paramDef);  return voParam;}  }
class C{  private void checkInbox(boolean cleanInbox,boolean assertCount,int count){  try {    Properties properties=new Properties();    properties.put("mail.pop3.host",testMailServer);    Session emailSession=Session.getDefaultInstance(properties);    POP3Store emailStore=(POP3Store)emailSession.getStore("pop3");    emailStore.connect(testMailAddress,testMailPasswd);    Folder emailFolder=emailStore.getFolder("INBOX");    emailFolder.open(Folder.READ_WRITE);    Message[] messages=emailFolder.getMessages();    if (cleanInbox) {      for (int i=0; i < messages.length; i++) {        messages[i].setFlag(Flags.Flag.DELETED,true);      }    }    emailFolder.close(true);    emailStore.close();    if (assertCount) {      Assert.assertEquals(count,messages.length);    }  } catch (  NoSuchProviderException e) {    e.printStackTrace();  }catch (  MessagingException e) {    e.printStackTrace();  }}  }
class C{  public CPredicateExpression(final String predicate){  m_predicate=predicate;}  }
class C{  public static String buildXform(Form form) throws Exception {  bindings=new Hashtable<String,Element>();  formFields=new Hashtable<FormField,Element>();  fieldTokens=new Hashtable<FormField,String>();  useConceptIdAsHint="true".equalsIgnoreCase(Context.getAdministrationService().getGlobalProperty("xforms.useConceptIdAsHint"));  boolean includeRelationshipNodes=!"false".equals(Context.getAdministrationService().getGlobalProperty(XformConstants.GLOBAL_PROP_KEY_INCLUDE_PATIENT_RELATIONSHIPS));  String templateXml=FormEntryWrapper.getFormTemplate(form);  if (includeRelationshipNodes) {    templateXml=templateXml.replace("</patient>","  <patient_relative>\n      <patient_relative.person/>\n      <patient_relative.relationship/>\n    </patient_relative>\n  </patient>");  }  Element formNode=(Element)XformBuilder.getDocument(new StringReader(templateXml)).getRootElement();  formNode.setAttribute(null,XformBuilder.ATTRIBUTE_UUID,form.getUuid());  Document doc=new Document();  doc.setEncoding(XformConstants.DEFAULT_CHARACTER_ENCODING);  Element xformsNode=doc.createElement(XformBuilder.NAMESPACE_XFORMS,null);  xformsNode.setName(XformBuilder.NODE_XFORMS);  xformsNode.setPrefix(XformBuilder.PREFIX_XFORMS,XformBuilder.NAMESPACE_XFORMS);  xformsNode.setPrefix(XformBuilder.PREFIX_XML_SCHEMA,XformBuilder.NAMESPACE_XML_SCHEMA);  xformsNode.setPrefix(XformBuilder.PREFIX_XML_SCHEMA2,XformBuilder.NAMESPACE_XML_SCHEMA);  xformsNode.setPrefix(XformBuilder.PREFIX_XML_INSTANCES,XformBuilder.NAMESPACE_XML_INSTANCE);  xformsNode.setPrefix("jr","http://openrosa.org/javarosa");  doc.addChild(org.kxml2.kdom.Element.ELEMENT,xformsNode);  Element modelNode=doc.createElement(XformBuilder.NAMESPACE_XFORMS,null);  modelNode.setName(XformBuilder.NODE_MODEL);  modelNode.setAttribute(null,XformBuilder.ATTRIBUTE_ID,XformBuilder.MODEL_ID);  xformsNode.addChild(Element.ELEMENT,modelNode);  Element groupNode=doc.createElement(XformBuilder.NAMESPACE_XFORMS,null);  groupNode.setName(XformBuilder.NODE_GROUP);  Element labelNode=doc.createElement(XformBuilder.NAMESPACE_XFORMS,null);  labelNode.setName(XformBuilder.NODE_LABEL);  labelNode.addChild(Element.TEXT,"Page1");  groupNode.addChild(Element.ELEMENT,labelNode);  xformsNode.addChild(Element.ELEMENT,groupNode);  bodyNode=groupNode;  Element instanceNode=doc.createElement(XformBuilder.NAMESPACE_XFORMS,null);  instanceNode.setName(XformBuilder.NODE_INSTANCE);  instanceNode.setAttribute(null,XformBuilder.ATTRIBUTE_ID,XformBuilder.INSTANCE_ID);  modelNode.addChild(Element.ELEMENT,instanceNode);  instanceNode.addChild(Element.ELEMENT,formNode);  Document xformSchemaDoc=new Document();  xformSchemaDoc.setEncoding(XformConstants.DEFAULT_CHARACTER_ENCODING);  Element xformSchemaNode=doc.createElement(XformBuilder.NAMESPACE_XML_SCHEMA,null);  xformSchemaNode.setName(XformBuilder.NODE_SCHEMA);  xformSchemaDoc.addChild(org.kxml2.kdom.Element.ELEMENT,xformSchemaNode);  Hashtable<String,String> problemList=new Hashtable<String,String>();  Hashtable<String,String> problemListItems=new Hashtable<String,String>();  XformBuilder.parseTemplate(modelNode,formNode,formNode,bindings,groupNode,problemList,problemListItems,0);  buildUInodes(form);  String prefSourceName=Context.getAdministrationService().getGlobalProperty(XformConstants.GLOBAL_PROP_KEY_PREFERRED_CONCEPT_SOURCE);  if (StringUtils.isNotBlank(prefSourceName)) {    for (int i=0; i < formNode.getChildCount(); i++) {      Element childElement=formNode.getElement(i);      if (childElement != null) {        for (int j=0; j < childElement.getChildCount(); j++) {          if (childElement.getElement(j) != null) {            Element grandChildElement=childElement.getElement(j);            String value=grandChildElement.getAttributeValue(null,XformBuilder.ATTRIBUTE_OPENMRS_CONCEPT);            if (StringUtils.isNotBlank(value))             XformBuilder.addConceptMapAttributes(grandChildElement,value);          }        }      }    }  }  if (includeRelationshipNodes) {    RelativeBuilder.build(modelNode,groupNode,formNode);  }  bindings.clear();  formFields.clear();  fieldTokens.clear();  return XformBuilder.fromDoc2String(doc);}  }
class C{  protected void noteAddition(K key,V newValue){  for (  CacheListener<K,V> listener : listeners) {    listener.noteKeyAddition(this,key,newValue);  }}  }
class C{  public boolean hasUri(){  return super.hasAttribute(URI);}  }
class C{  public SourceRecordStats reset(){  this.statsByOperation.clear();  this.tombstones.set(0);  return this;}  }
class C{  public static String convertClassNameToResourcePath(String className){  Assert.notNull(className,"Class name must not be null");  return className.replace('.','/');}  }
class C{  public void init(int WindowNo,FormFrame frame){  log.info("");  m_WindowNo=WindowNo;  m_frame=frame;  try {    jbInit();    dynInit();    frame.getContentPane().add(northPanel,BorderLayout.NORTH);    frame.getContentPane().add(centerPanel,BorderLayout.CENTER);    frame.getContentPane().add(confirmPanel,BorderLayout.SOUTH);  } catch (  Exception e) {    log.log(Level.SEVERE,"init",e);  }}  }
class C{  public void reset(){  tbsGen=new V3TBSCertificateGenerator();  extGenerator.reset();}  }
class C{  public static String walk(EsperEPL2GrammarParser.StartEventPropertyRuleContext ast,String propertyName,String rootElementName,String defaultNamespacePrefix,boolean isResolvePropertiesAbsolute){  StringBuilder xPathBuf=new StringBuilder();  xPathBuf.append('/');  if (isResolvePropertiesAbsolute) {    if (defaultNamespacePrefix != null) {      xPathBuf.append(defaultNamespacePrefix);      xPathBuf.append(':');    }    xPathBuf.append(rootElementName);  }  List<EsperEPL2GrammarParser.EventPropertyAtomicContext> ctxs=ast.eventProperty().eventPropertyAtomic();  if (ctxs.size() == 1) {    xPathBuf.append(makeProperty(ctxs.get(0),defaultNamespacePrefix));  } else {    for (    EsperEPL2GrammarParser.EventPropertyAtomicContext ctx : ctxs) {      xPathBuf.append(makeProperty(ctx,defaultNamespacePrefix));    }  }  String xPath=xPathBuf.toString();  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".parse For property '" + propertyName + "' the xpath is '"+ xPath+ '\'');  }  return xPath;}  }
class C{  private void buildInfo(){  Object lock=lock();  try {    Document doc=getDocument();    Element root=doc.getDefaultRootElement();    rootElementInfo=new ElementInfo(root);    rootElementInfo.validate();  }  finally {    unlock(lock);  }}  }
class C{  public ToastBuilder(Context context){  this.context=context;  loadThemeAttributes();}  }
class C{  public static SquareTerrain createSquareTerrainFromBitmap(SquareTerrain.Parameters prs,boolean createVBOs){  int divisions=prs.divisions;  if (!((prs.divisions != 0) && ((prs.divisions & (prs.divisions - 1)) == 0))) {    throw new RuntimeException("Divisions must be x^2");  }  double[][] terrain=new double[divisions + 1][divisions + 1];  double[][] temperature=new double[divisions + 1][divisions + 1];  Vector3[][] normals=new Vector3[divisions + 1][divisions + 1];  boolean useColorBitmap=prs.colorMapBitmap != null;  int colorpixels[]=null;  Bitmap bnew=Bitmap.createBitmap(divisions + 1,divisions + 1,Bitmap.Config.ARGB_8888);  Canvas cnv=new Canvas(bnew);  cnv.drawBitmap(prs.heightMapBitmap,new Rect(0,0,prs.heightMapBitmap.getWidth(),prs.heightMapBitmap.getHeight()),new Rect(0,0,divisions + 1,divisions + 1),null);  int pixels[]=new int[(divisions + 1) * (divisions + 1)];  bnew.getPixels(pixels,0,divisions + 1,0,0,divisions + 1,divisions + 1);  if (useColorBitmap) {    colorpixels=new int[(divisions + 1) * (divisions + 1)];    Paint clearPaint=new Paint();    clearPaint.setXfermode(new PorterDuffXfermode(android.graphics.PorterDuff.Mode.CLEAR));    cnv.drawRect(0,0,prs.colorMapBitmap.getWidth(),prs.colorMapBitmap.getHeight(),clearPaint);    cnv.drawBitmap(prs.colorMapBitmap,new Rect(0,0,prs.colorMapBitmap.getWidth(),prs.colorMapBitmap.getHeight()),new Rect(0,0,divisions + 1,divisions + 1),null);    bnew.getPixels(colorpixels,0,divisions + 1,0,0,divisions + 1,divisions + 1);  }  bnew.recycle();  int color;  int cols=divisions + 1;  double min, max;  terrain[0][0]=Color.green(0) / 255f * prs.scale.y;  min=max=terrain[0][0];  double alt;  double temp;  float oneover255=1f / 255f;  for (int i=0; i <= divisions; ++i) {    for (int j=0; j <= divisions; ++j) {      color=pixels[i + j * cols];      alt=Color.green(color) * oneover255 * prs.scale.y;      temp=Color.red(color) * oneover255 * (prs.maxTemp - prs.minTemp) + prs.minTemp;      if (i > 0 && j > 0) {        temp=((temperature[i - 1][j] + temperature[i][j - 1]) * 0.5f + temp) * 0.5f;        alt=((terrain[i - 1][j] + terrain[i][j - 1]) * 0.5f + alt) * 0.5f;      } else       if (j > 0) {        temp=(temperature[i][j - 1] + temp) * 0.5f;        alt=(terrain[i][j - 1] + alt) * 0.5f;      } else       if (i > 0) {        temp=(temperature[i - 1][j] + temp) * 0.5f;        alt=(terrain[i - 1][j] + alt) * 0.5f;      }      temperature[i][j]=temp;      terrain[i][j]=alt;      if (alt < min)       min=alt; else       if (alt > max)       max=alt;      normals[i][j]=new Vector3(0f,1f,0f);    }  }  Vector3 scale=prs.scale;  Vector3 v0=new Vector3();  Vector3 v1=new Vector3();  Vector3 v2=new Vector3();  Vector3 na=new Vector3();  Vector3 nb=new Vector3();  Vector3 nc=new Vector3();  Vector3 nd=new Vector3();  for (int x=1; x < divisions; x++) {    for (int z=1; z < divisions; z++) {      v0.x=(x - 1) * scale.x;      v0.z=z * scale.z;      v0.y=terrain[x - 1][z];      v1.x=x * scale.x;      v1.z=(z - 1) * scale.z;      v1.y=terrain[x][z - 1];      v2.x=x * scale.x;      v2.z=z * scale.z;      v2.y=terrain[x][z];      na=v1.subtract(v0).cross(v2.subtract(v0));      v0.x=x * scale.x;      v0.z=z * scale.z;      v0.y=terrain[x][z];      v1.x=x * scale.x;      v1.z=(z - 1) * scale.z;      v1.y=terrain[x][z - 1];      v2.x=(x + 1) * scale.x;      v2.z=z * scale.z;      v2.y=terrain[x + 1][z];      nb=v1.subtract(v0).cross(v2.subtract(v0));      v0.x=x * scale.x;      v0.z=z * scale.z;      v0.y=terrain[x][z];      v1.x=(x + 1) * scale.x;      v1.z=z * scale.z;      v1.y=terrain[x + 1][z];      v2.x=x * scale.x;      v2.z=(z + 1) * scale.z;      v2.y=terrain[x][z + 1];      nc=v1.subtract(v0).cross(v2.subtract(v0));      v0.x=x * scale.x;      v0.z=z * scale.z;      v0.y=terrain[x][z];      v1.x=x * scale.x;      v1.z=(z + 1) * scale.z;      v1.y=terrain[x][z + 1];      v2.x=(x - 1) * scale.x;      v2.z=z * scale.z;      v2.y=terrain[x - 1][z];      nd=v1.subtract(v0).cross(v2.subtract(v0));      normals[x][z].y=0f;      normals[x][z].add(na);      normals[x][z].add(nb);      normals[x][z].add(nc);      normals[x][z].add(nd);    }  }  SquareTerrain sq=new SquareTerrain(divisions,terrain,normals,temperature,scale.x,scale.z);  float[] vertices=new float[(divisions + 1) * (divisions + 1) * 3];  float[] nors=new float[(divisions + 1) * (divisions + 1) * 3];  float[] colors=new float[(divisions + 1) * (divisions + 1) * 4];  float[] textureCoords=new float[(divisions + 1) * (divisions + 1) * 2];  int[] indices=new int[(divisions) * (divisions) * 6];  int ii=0;  int nn=0;  int tt=0;  int xx=0;  int cc=0;  double maxtt=1f / (divisions + 1);  double xmid=(divisions * scale.x) / 2f;  double zmid=(divisions * scale.z) / 2f;  double percalt=0;  float r, g, b, a;  a=1f;  float a_basecolor=(float)((float)Color.alpha(prs.basecolor) * oneover255);  float a_middlecolor=(float)Color.alpha(prs.middlecolor) * oneover255;  float a_upcolor=(float)Color.alpha(prs.upcolor) * oneover255;  float g_basecolor=(float)Color.green(prs.basecolor) * oneover255;  float g_middlecolor=(float)Color.green(prs.middlecolor) * oneover255;  float g_upcolor=(float)Color.green(prs.upcolor) * oneover255;  float b_basecolor=(float)Color.blue(prs.basecolor) * oneover255;  float b_middlecolor=(float)Color.blue(prs.middlecolor) * oneover255;  float b_upcolor=(float)Color.blue(prs.upcolor) * oneover255;  float r_basecolor=(float)Color.red(prs.basecolor) * oneover255;  float r_middlecolor=(float)Color.red(prs.middlecolor) * oneover255;  float r_upcolor=(float)Color.red(prs.upcolor) * oneover255;  int bmpcolor;  float a_bmp;  float r_bmp;  float g_bmp;  float b_bmp;  for (int i=0; i <= divisions; ++i) {    for (int j=0; j <= divisions; ++j) {      vertices[ii++]=(float)(i * scale.x - xmid);      vertices[ii++]=(float)terrain[i][j];      vertices[ii++]=(float)(j * scale.z - zmid);      percalt=sq.getPercAltitude(i,j);      if (percalt < 0.5) {        temp=(percalt - 0.0) * 2;        r=(float)(r_basecolor + (r_middlecolor - r_basecolor) * temp);        g=(float)(g_basecolor + (g_middlecolor - g_basecolor) * temp);        b=(float)(b_basecolor + (b_middlecolor - b_basecolor) * temp);        a=(float)(a_basecolor + (a_middlecolor - a_basecolor) * temp);      } else {        temp=(percalt - 0.5) * 2;        r=(float)(r_middlecolor + (r_upcolor - r_middlecolor) * temp);        g=(float)(g_middlecolor + (g_upcolor - g_middlecolor) * temp);        b=(float)(b_middlecolor + (b_upcolor - b_middlecolor) * temp);        a=(float)(a_middlecolor + (a_upcolor - a_middlecolor) * temp);      }      if (useColorBitmap) {        bmpcolor=colorpixels[i + j * cols];        a_bmp=(float)Color.alpha(bmpcolor) * oneover255;        r_bmp=(float)Color.red(bmpcolor) * oneover255;        g_bmp=(float)Color.green(bmpcolor) * oneover255;        b_bmp=(float)Color.blue(bmpcolor) * oneover255;        r=r * (1f - a_bmp) + a_bmp * r_bmp;        g=g * (1f - a_bmp) + a_bmp * g_bmp;        b=b * (1f - a_bmp) + a_bmp * b_bmp;      }      r=r < 0f ? 0f : r;      r=r > 1f ? 1f : r;      g=g < 0f ? 0f : g;      g=g > 1f ? 1f : g;      b=b < 0f ? 0f : b;      b=b > 1f ? 1f : b;      a=a < 0f ? 0f : a;      a=a > 1f ? 1f : a;      colors[cc++]=r;      colors[cc++]=g;      colors[cc++]=b;      colors[cc++]=a;      normals[i][j].normalize();      nors[nn++]=(float)normals[i][j].x;      nors[nn++]=(float)normals[i][j].y;      nors[nn++]=(float)normals[i][j].z;      textureCoords[tt++]=(float)(i * maxtt * prs.textureMult);      textureCoords[tt++]=(float)(j * maxtt * prs.textureMult);    }  }  for (int i=0; i < divisions; i+=2) {    for (int j=0; j < divisions; j+=2) {      indices[xx++]=(i) + (j) * cols;      indices[xx++]=(i + 1) + (j) * cols;      indices[xx++]=(i) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j) * cols;      indices[xx++]=(i + 1) + (j + 1) * cols;      indices[xx++]=(i) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j) * cols;      indices[xx++]=(i + 2) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j) * cols;      indices[xx++]=(i + 2) + (j) * cols;      indices[xx++]=(i + 2) + (j + 1) * cols;      indices[xx++]=(i) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 2) * cols;      indices[xx++]=(i) + (j + 2) * cols;      indices[xx++]=(i) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 2) * cols;      indices[xx++]=(i + 1) + (j + 1) * cols;      indices[xx++]=(i + 2) + (j + 1) * cols;      indices[xx++]=(i + 1) + (j + 2) * cols;      indices[xx++]=(i + 2) + (j + 1) * cols;      indices[xx++]=(i + 2) + (j + 2) * cols;      indices[xx++]=(i + 1) + (j + 2) * cols;    }  }  sq.setData(vertices,nors,textureCoords,colors,indices,createVBOs);  nors=null;  colors=null;  indices=null;  textureCoords=null;  vertices=null;  return sq;}  }
class C{  public void move(float x,float y){  mStartingX=x;  mStartingY=y;  clampStartingPosition();}  }
class C{  public void removeRow(int rowIndex){  this.rowKeys.remove(rowIndex);  this.rows.remove(rowIndex);}  }
class C{  public DefaultRuntimeTypeAdapterFactory(Context context,Class<E> baseClass){  this(context,baseClass,null);}  }
class C{  public boolean wasClean(){  return wasClean;}  }
class C{  @Override public void run(){  handler=new BodyContentHandler(writer);  super.run();}  }
class C{  protected ListSelectionListener createListSelectionListener(){  return null;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public void accept(final ClassVisitor cv){  FieldVisitor fv=cv.visitField(access,name,desc,signature,value);  if (fv == null) {    return;  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    fv.visitAttribute(attrs.get(i));  }  fv.visitEnd();}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public boolean next(Text key,BytesWritable value) throws IOException {  try {    long startRead=in.getPos();    byte[] magicBuffer=null;    while (true) {      if (startRead >= splitEnd) {        return false;      }      boolean foundStart=false;      while (!foundStart) {        startRead=in.getPos();        magicBuffer=new byte[1024];        int read=in.read(magicBuffer);        if (read < 0) {          break;        }        for (int i=0; i < read - 1; i++) {          byte[] testMagic=new byte[2];          System.arraycopy(magicBuffer,i,testMagic,0,2);          if (isMagic(testMagic)) {            startRead+=i;            foundStart=true;            break;          }        }      }      in.seek(startRead);      ByteArrayOutputStream baos=null;      int totalRead=0;      try {        byte[] buffer=new byte[4096];        GZIPInputStream zin=new GZIPInputStream(in);        int gzipRead=-1;        baos=new ByteArrayOutputStream();        while ((gzipRead=zin.read(buffer,0,buffer.length)) != -1) {          baos.write(buffer,0,gzipRead);          totalRead+=gzipRead;        }      } catch (      Exception e) {        System.out.println("Ignoring position: " + (startRead));        if (startRead + 1 < fileLen) {          in.seek(startRead + 1);        }        continue;      }      byte[] content=baos.toByteArray();      int eol=0;      for (int i=0; i < content.length; i++) {        if (i > 0 && content[i] == '\n') {          eol=i;          break;        }      }      String header=new String(content,0,eol).trim();      byte[] raw=new byte[(content.length - eol) - 1];      System.arraycopy(content,eol + 1,raw,0,raw.length);      Text keyText=key;      keyText.set(header);      BytesWritable valueBytes=value;      valueBytes.set(raw,0,raw.length);      if (startRead + 1 < fileLen) {        in.seek(startRead + 1);      }      return true;    }  } catch (  Exception e) {    LOG.equals(StringUtils.stringifyException(e));  }  return false;}  }
class C{  public Word not(){  return null;}  }
class C{  static int allParametersAndArgumentsMatchWithDefaultParams(Parameter[] params,ClassNode[] args){  int dist=0;  ClassNode ptype=null;  for (int i=0, j=0; i < params.length; i++) {    Parameter param=params[i];    ClassNode paramType=param.getType();    ClassNode arg=j >= args.length ? null : args[j];    if (arg == null || !isAssignableTo(arg,paramType)) {      if (!param.hasInitialExpression() && (ptype == null || !ptype.equals(paramType))) {        return -1;      }      ptype=null;    } else {      j++;      if (!paramType.equals(arg))       dist+=getDistance(arg,paramType);      if (param.hasInitialExpression()) {        ptype=arg;      } else {        ptype=null;      }    }  }  return dist;}  }
class C{  public RegisterFailedException(String msg){  super(msg);}  }
class C{  public boolean isEmpty(){  CodeAttribute ca=getMethodInfo2().getCodeAttribute();  if (ca == null)   return (getModifiers() & Modifier.ABSTRACT) != 0;  CodeIterator it=ca.iterator();  try {    return it.hasNext() && it.byteAt(it.next()) == Opcode.RETURN && !it.hasNext();  } catch (  BadBytecode e) {  }  return false;}  }
class C{  public BasicPermission(String name,String actions){  super(name);  init(name);}  }
class C{  public void postInit(){  postInitialisation=true;}  }
class C{  public RepositoryManager buildManager(){  return buildManagerBuilder().buildRepository();}  }
class C{  public void autoCompleteInput(){  String input=getText();  if (input != null && input.length() > 0) {    Iterator<String> it=dict.iterator(input);    if (it.hasNext())     showPopup(it); else     hidePopup();  } else {    hidePopup();  }}  }
class C{  private boolean isComplete(){  return m_isComplete2;}  }
class C{  public boolean isDisposed(){  final Control control=getControl();  return (control != null) ? control.isDisposed() : true;}  }
class C{  public CCreateBookmarkAction(final BookmarkManager manager,final IAddress offset){  super(String.format("Create bookmark at offset %s",offset.toHexString()));  m_manager=Preconditions.checkNotNull(manager,"IE01410: Manager argument can not be null");  m_offset=Preconditions.checkNotNull(offset,"IE02289: Offset arguemnt can not be null");}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"TEST_DATA\" ("+ "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "\"TEST_STRING\" TEXT,"+ "\"TEST_LONG\" INTEGER,"+ "\"TEST_DATE\" INTEGER,"+ "\"TEST_INT\" INTEGER,"+ "\"TEST_BOOLEAN\" INTEGER);");}  }
class C{  @Override public synchronized void print(Object x){  String line;  Throwable t;  StackTraceElement[] trace;  int i;  if (x instanceof Throwable) {    t=(Throwable)x;    trace=t.getStackTrace();    line=t.getMessage() + "\n";    for (i=0; i < trace.length; i++) {      line+="\t" + trace[i].toString() + "\n";    }    x=line;  }  if (x == null) {    print("null");  } else {    print(x.toString());  }}  }
class C{  public StandardXYToolTipGenerator(String formatString,DateFormat xFormat,DateFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  public Open(PlaylistType.Item playlistItem){  super();  addParameterToRequest("item",playlistItem.toJsonNode());}  }
class C{  public static void signInToSelectedAccount(final Activity activity,final Account account,final int signInType,final int signInSync,final boolean showSignInNotification,final SignInFlowObserver observer){  SigninManager.get(activity).signInToSelectedAccount(activity,account,SigninManager.SIGNIN_TYPE_INTERACTIVE,SigninManager.SIGNIN_SYNC_IMMEDIATELY,false,null);}  }
class C{  public AccountHeaderBuilder withOnlyMainProfileImageVisible(boolean onlyMainProfileImageVisible){  this.mOnlyMainProfileImageVisible=onlyMainProfileImageVisible;  return this;}  }
class C{  private void writeObject(ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  oos.writeLong(latticeSourceId);  oos.writeDouble(score);  oos.writeUTF(source.toString());  oos.writeUTF(translation.toString());  oos.writeUTF(f2eAlignment == null ? alignmentString() : f2eAlignment);  oos.writeObject(this.features);}  }
class C{  private Color guessColor(NodeRenderingProperty p){  if (p.overriddenColor != null) {    return p.overriddenColor;  } else {    @SuppressWarnings("unchecked") NodeColorData vals=(NodeColorData)p.pluginStore.get(this);    float voltagePercent=(float)(vals.importance / maxImportance);    float degreePercent=((float)vals.degree) / maxDegree;    return nodeColors.getColor(p.node,cm,voltagePercent,degreePercent);  }}  }
class C{  public ArrayList<V> values(){  ArrayList<V> list=New.arrayList(size);  int len=keys.length;  for (int i=0; i < len; i++) {    Value k=keys[i];    if (k != null && k != ValueNull.DELETED) {      list.add(values[i]);    }  }  return list;}  }
class C{  public SQLiteTableBuilder addColumn(String columnName,int type){  return addColumn(columnName,type,false);}  }
class C{  @Override public synchronized void reset(){  pos=0;}  }
class C{  public EventStoreBuilder persistentSubscriptionAutoAckEnabled(){  settingsBuilder.persistentSubscriptionAutoAckEnabled(true);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void showTextOnFeed(String message){  if (config.inDebugMode())   System.out.println(message);  if (config.getSessionRecorder().isPresent()) {    config.getSessionRecorder().get().recordExerciseFeedMessage(message);  }  Platform.runLater(null);}  }
class C{  public static MethodCoverageTestFitness createMethodTestFitness(String className,String method){  return new MethodCoverageTestFitness(className,method.substring(method.lastIndexOf(".") + 1));}  }
class C{  public boolean isInfoTab(){  Object oo=get_Value(COLUMNNAME_IsInfoTab);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void projectionChanged(ProjectionEvent pe){  Logger logger=getLogger();  if (layer != null) {    Projection proj=layer.setProjection(pe);    if (proj != null) {      if (shouldSpawnThreadForPrepare()) {        if (logger.isLoggable(Level.FINE)) {          logger.fine(getLayer().getName() + ": StandardPCPolicy projectionChanged with NEW projection, spawning thread to handle it.");        }        if (layer.isProjectionOK(proj)) {          layer.doPrepare();        }        return;      } else {        if (logger.isLoggable(Level.FINE)) {          logger.fine(getLayer().getName() + ": StandardPCPolicy projectionChanged with NEW projection, handling it within current thread.");        }        layer.fireStatusUpdate(LayerStatusEvent.START_WORKING);        if (layer.isProjectionOK(proj)) {          layer.setList(layer.prepare());        }        layer.repaint();      }    } else {      layer.repaint();    }    layer.fireStatusUpdate(LayerStatusEvent.FINISH_WORKING);  } else {    Debug.error("StandardPCPolicy.projectionChanged(): NULL layer, can't do anything.");  }}  }
class C{  public T caseTraceCaseActivation_(TraceCaseActivation_ object){  return null;}  }
class C{  public boolean isExpert(){  return expert;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_GEN_EXPR_2__INDEX_1:    setIndex_1(INDEX_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  private Map<URI,ExportMask> checkForRenamedExportMasks(Map<URI,ExportMask> maskSet){  Map<URI,ExportMask> result=new HashMap<URI,ExportMask>();  for (  ExportMask mask : maskSet.values()) {    StringSet existingVolumes=StringSetUtil.getStringSetFromStringMapKeySet(mask.getExistingVolumes());    ExportMask match=null;    outer:     for (    String portId : mask.getStoragePorts()) {      URIQueryResultList queryResult=new URIQueryResultList();      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getExportMasksByPort(portId),queryResult);      for (      URI uri : queryResult) {        if (uri.equals(mask.getId())) {          continue;        }        ExportMask dbMask=_dbClient.queryObject(ExportMask.class,uri);        if (dbMask == null || dbMask.getInactive()) {          continue;        }        StringSet extVols=StringSetUtil.getStringSetFromStringMapKeySet(dbMask.getExistingVolumes());        StringSet userVols=StringSetUtil.getStringSetFromStringMapKeySet(dbMask.getUserAddedVolumes());        if (StringSetUtil.hasIntersection(existingVolumes,extVols) || StringSetUtil.hasIntersection(existingVolumes,userVols)) {          _log.info(String.format("ExportMask %s (%s) has been renamed to %s (%s)",dbMask.getMaskName(),dbMask.getId().toString(),mask.getMaskName(),mask.getId().toString()));          dbMask.setMaskName(mask.getMaskName());          _dbClient.updateAndReindexObject(dbMask);          ;          _dbClient.markForDeletion(mask);          ;          result.put(dbMask.getId(),dbMask);          match=dbMask;          break outer;        }      }    }    if (match == null) {      result.put(mask.getId(),mask);    }  }  return result;}  }
class C{  LongChunks(final long length,final int chunkBits){  super(length);  assert chunkBits >= 0 && chunkBits <= 31;  mChunkBits=chunkBits;  mChunkSize=1 << mChunkBits;  mChunkMask=mChunkSize - 1;  final long ch=(length + mChunkSize - 1) / mChunkSize;  if (ch > Integer.MAX_VALUE) {    throw new RuntimeException("length requested too long length=" + length + " mChunkSize="+ mChunkSize);  }  final int chunks=(int)ch;  mArray=new long[chunks][];  long left=mLength;  for (int i=0; i < chunks; i++) {    final int assignedLength=left <= mChunkSize ? (int)left : mChunkSize;    assert assignedLength != 0;    mArray[i]=new long[assignedLength];    left-=assignedLength;  }  mTotalLength=mLength;  assert left == 0;  assert integrity();}  }
class C{  public void createSubUsageScenario01() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO01_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO01_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser1(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO01_PERUNIT_MONTH",subDetails);}  }
class C{  public ShardRoutingState state(){  return this.state;}  }
class C{  public Lookup addValues(String name,Set<String> values){  Lookup lookup=null;  try {    Connection conn=getDataSource().getConnection();    try {      lookup=findOrCreateLookupByName(name,conn);      Set<String> inserts=Sets.newHashSet();      Set<String> lookupValues=lookup.getValues();      if (lookupValues == null || lookupValues.isEmpty()) {        inserts=values;        lookup.setValues(values);      } else {        inserts=Sets.difference(values,lookupValues);      }      if (!inserts.isEmpty()) {        insertLookupValues(lookup.getId(),inserts,conn);      }      conn.commit();    } catch (    SQLException e) {      conn.rollback();      throw e;    } finally {      conn.close();    }  } catch (  SQLException e) {    String message=String.format("Failed to set the lookup values for name %s",name);    log.error(message,e);    throw new UserMetadataServiceException(message,e);  }  return lookup;}  }
class C{  @Subscribe public void updateSettings(ProjectSettingsChangedEvent event){  final ProjectSettings projectSettings=event.getProjectSettings();synchronized (NetworkTable.class) {    NetworkTable.shutdown();    NetworkTable.setIPAddress(projectSettings.getPublishAddress());  }}  }
class C{  private void optimize(StringBuilder buffer){  if (buffer.length() > 5 && buffer.substring(buffer.length() - 5,buffer.length()).equals("erin*")) {    buffer.deleteCharAt(buffer.length() - 1);    strip(buffer);  }  if (buffer.length() > 0 && buffer.charAt(buffer.length() - 1) == ('z')) {    buffer.setCharAt(buffer.length() - 1,'x');  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }}  }
class C{  public static int hash(float value){  return Float.floatToIntBits(value * 663608941.737f);}  }
class C{  public static DurableClientInfoRequest create(String id,int operation){  DurableClientInfoRequest m=new DurableClientInfoRequest();  m.durableId=id;  m.action=operation;  setFriendlyName(m);  return m;}  }
class C{  public KMLSurfaceImageImpl(KMLTraversalContext tc,KMLGroundOverlay overlay){  this.parent=overlay;  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (overlay == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  KMLLatLonBox box=overlay.getLatLonBox();  if (box != null) {    Sector sector=KMLUtil.createSectorFromLatLonBox(box);    this.initializeGeometry(sector);    Double rotation=box.getRotation();    if (rotation != null) {      this.mustApplyRotation=true;    }  } else {    GXLatLongQuad latLonQuad=overlay.getLatLonQuad();    if (latLonQuad != null && latLonQuad.getCoordinates() != null) {      this.initializeGeometry(latLonQuad.getCoordinates().list);    }  }  String colorStr=overlay.getColor();  if (!WWUtil.isEmpty(colorStr)) {    Color color=WWUtil.decodeColorABGR(colorStr);    int alpha=color.getAlpha();    this.setOpacity((double)alpha / 255);  }  this.setPickEnabled(false);}  }
class C{  public EdgeListGraph(){  this.edgeLists=new HashMap<>();  this.nodes=new ArrayList<>();  this.edgesSet=new HashSet<>();  this.namesHash=new HashMap<>();  for (  Node node : nodes) {    namesHash.put(node.getName(),node);  }}  }
class C{  public AsyncSend(ZulipActivity zulipActivity,Message msg){  super((ZulipApp)zulipActivity.getApplication());  this.setProperty("type",msg.getType().toString());  if (msg.getType() == MessageType.STREAM_MESSAGE) {    this.setProperty("to",msg.getStream().getName());  } else {    JSONArray arr=new JSONArray();    for (    Person recipient : msg.getPersonalReplyTo((ZulipApp)zulipActivity.getApplication())) {      arr.put(recipient.getEmail());    }    this.setProperty("to",arr.toString());  }  this.setProperty("stream",msg.getSubject());  this.setProperty("subject",msg.getSubject());  this.setProperty("content",msg.getContent());}  }
class C{  public static UrlTemplate compile(String template){  String[] urlPieces=new String[5];  int[] identifiers=new int[4];  String[] identifierFormatTags=new String[4];  int identifierCount=parseTemplate(template,urlPieces,identifiers,identifierFormatTags);  return new UrlTemplate(urlPieces,identifiers,identifierFormatTags,identifierCount);}  }
class C{  public void replace() throws IOException {  replace(false);}  }
class C{  @Override public void pool(){  disconnect();}  }
class C{  public static List<Process> startLocalNode(@Nullable IgniteLogger log,String cfgPath,int nodesToStart,boolean quite,Map<String,String> envVars) throws IOException {  String quitePar=quite ? "" : "-v";  String cmdFile=new File("bin",U.isWindows() ? "ignite.bat" : "ignite.sh").getPath();  File cmdFilePath=U.resolveIgnitePath(cmdFile);  if (cmdFilePath == null || !cmdFilePath.exists())   throw new FileNotFoundException(String.format("File not found: %s",cmdFile));  String ignite=cmdFilePath.getCanonicalPath();  File nodesCfgPath=U.resolveIgnitePath(cfgPath);  if (nodesCfgPath == null || !nodesCfgPath.exists())   throw new FileNotFoundException(String.format("File not found: %s",cfgPath));  String nodeCfg=nodesCfgPath.getCanonicalPath();  log(log,String.format("Starting %s local %s with '%s' config",nodesToStart,nodesToStart > 1 ? "nodes" : "node",nodeCfg));  List<Process> run=new ArrayList<>();  try {    for (int i=0; i < nodesToStart; i++) {      if (U.isMacOs()) {        StringBuilder envs=new StringBuilder();        Map<String,String> macEnv=new HashMap<>(System.getenv());        if (envVars != null) {          for (          Map.Entry<String,String> ent : envVars.entrySet())           if (macEnv.containsKey(ent.getKey())) {            String old=macEnv.get(ent.getKey());            if (old == null || old.isEmpty())             macEnv.put(ent.getKey(),ent.getValue()); else             macEnv.put(ent.getKey(),old + ':' + ent.getValue());          } else           macEnv.put(ent.getKey(),ent.getValue());        }        for (        Map.Entry<String,String> entry : macEnv.entrySet()) {          String val=entry.getValue();          if (val.indexOf(';') < 0 && val.indexOf('\'') < 0)           envs.append(String.format("export %s='%s'; ",entry.getKey(),val.replace('\n',' ').replace("'","\'")));        }        run.add(openInConsole(envs.toString(),ignite,quitePar,nodeCfg));      } else       run.add(openInConsole(null,envVars,ignite,quitePar,nodeCfg));    }    return run;  } catch (  Exception e) {    for (    Process proc : run)     proc.destroy();    throw e;  }}  }
class C{  public void deletePreference(){  if (m_AD_User_ID > 0) {    props=new Properties();    Query query=new Query(Env.getCtx(),I_AD_Preference.Table_Name,"AD_User_ID = ? AND Attribute = ? AND AD_Window_ID Is NULL",null);    for (int i=0; i < PROPERTIES.length; i++) {      String attribute=PROPERTIES[i];      MPreference preference=query.setParameters(new Object[]{m_AD_User_ID,attribute}).firstOnly();      if (preference != null) {        preference.deleteEx(true);      }    }  }}  }
class C{  public JSONObject(Map map){  this.map=new HashMap();  if (map != null) {    Iterator i=map.entrySet().iterator();    while (i.hasNext()) {      Map.Entry e=(Map.Entry)i.next();      this.map.put(e.getKey(),wrap(e.getValue()));    }  }}  }
class C{  public static Typeface walkwayObliqueBlack(Context context){  return FontSourceProcessor.process(R.raw.walkway_oblique_black,context);}  }
class C{  @Ignore("NaN behavior TBD") @Test public void testLinearLocation_WithNaN() throws Exception {  Location begin1=Location.fromRadians(0.592539,-2.066470);  Location begin2=new Location(Double.NaN,Double.NaN);  final double distance=0.6296498957149533;  final double course=79.32398087460811;  Location end1=new Location();  Location end2=new Location();  Location end3=new Location();  begin1.linearLocation(Double.NaN,distance,end1);  begin1.linearLocation(course,Double.NaN,end2);  begin2.linearLocation(course,distance,end3);  assertTrue("expecting NaN latitude from NaN course",Double.isNaN(end1.latitude));  assertTrue("expecting NaN longitude from NaN course",Double.isNaN(end1.longitude));  assertTrue("expecting NaN latitude from NaN distance",Double.isNaN(end2.latitude));  assertTrue("expecting NaN longitude from NaN distance",Double.isNaN(end2.longitude));  assertTrue("expecting NaN latitude from NaN origin latitude",Double.isNaN(end3.latitude));  assertTrue("expecting NaN longitude from NaN origin latitude",Double.isNaN(end3.longitude));}  }
class C{  @Override public boolean hasQueuedReaderThreads(){  return readerLock.hasQueuedThreads();}  }
class C{  public void contextSwitch(int frameIndex){  this.frameIndex=frameIndex;}  }
class C{  public void add(final AnnotatedTypeMirror type1,final AnnotatedTypeMirror type2){  this.visited.add(new Visit(type1,type2));}  }
class C{  public Frame copyStack(){  Frame frame=new Frame(locals.length,stack.length);  System.arraycopy(stack,0,frame.stack,0,stack.length);  frame.top=top;  return frame;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS04.class,args);}  }
class C{  public static long calculateMessageSize(MimeMessage message) throws MessagingException {  long size;  size=message.getSize();  if (size != -1) {    Enumeration<?> e=message.getAllHeaderLines();    if (e.hasMoreElements()) {      size+=2;    }    while (e.hasMoreElements()) {      size+=((String)e.nextElement()).length() + 2;    }  }  if (size == -1) {    SizeCalculatorOutputStream out=new SizeCalculatorOutputStream();    try {      message.writeTo(out);    } catch (    IOException e) {      throw new MessagingException("IOException wrapped by getMessageSize",e);    }    size=out.getSize();  }  return size;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:45.959 -0500",hash_original_method="C6612F6F1694E17ABFCC353841B58B91",hash_generated_method="D60DF57A701B9F02CF3A00D9399911F1") public boolean configure(String configStr){  if ((configStr.startsWith("\"") && configStr.endsWith("\""))) {    configStr=configStr.substring(1,configStr.length() - 1);  }  if (DBG)   log("configure: '" + configStr + "'");  if (!TextUtils.isEmpty(configStr)) {    int defaultRandomization=0;    if (DBG)     log("configure: not empty");    mMaxRetryCount=0;    resetRetryCount();    mRetryArray.clear();    String strArray[]=configStr.split(",");    for (int i=0; i < strArray.length; i++) {      if (DBG)       log("configure: strArray[" + i + "]='"+ strArray[i]+ "'");      Pair<Boolean,Integer> value;      String splitStr[]=strArray[i].split("=",2);      splitStr[0]=splitStr[0].trim();      if (DBG)       log("configure: splitStr[0]='" + splitStr[0] + "'");      if (splitStr.length > 1) {        splitStr[1]=splitStr[1].trim();        if (DBG)         log("configure: splitStr[1]='" + splitStr[1] + "'");        if (TextUtils.equals(splitStr[0],"default_randomization")) {          value=parseNonNegativeInt(splitStr[0],splitStr[1]);          if (!value.first)           return false;          defaultRandomization=value.second;        } else         if (TextUtils.equals(splitStr[0],"max_retries")) {          if (TextUtils.equals("infinite",splitStr[1])) {            mRetryForever=true;          } else {            value=parseNonNegativeInt(splitStr[0],splitStr[1]);            if (!value.first)             return false;            mMaxRetryCount=value.second;          }        } else {          Log.e(LOG_TAG,"Unrecognized configuration name value pair: " + strArray[i]);          return false;        }      } else {        splitStr=strArray[i].split(":",2);        splitStr[0]=splitStr[0].trim();        RetryRec rr=new RetryRec(0,0);        value=parseNonNegativeInt("delayTime",splitStr[0]);        if (!value.first)         return false;        rr.mDelayTime=value.second;        if (splitStr.length > 1) {          splitStr[1]=splitStr[1].trim();          if (DBG)           log("configure: splitStr[1]='" + splitStr[1] + "'");          value=parseNonNegativeInt("randomizationTime",splitStr[1]);          if (!value.first)           return false;          rr.mRandomizationTime=value.second;        } else {          rr.mRandomizationTime=defaultRandomization;        }        mRetryArray.add(rr);      }    }    if (mRetryArray.size() > mMaxRetryCount) {      mMaxRetryCount=mRetryArray.size();      if (DBG)       log("configure: setting mMaxRetryCount=" + mMaxRetryCount);    }    if (DBG)     log("configure: true");    return true;  } else {    if (DBG)     log("configure: false it's empty");    return false;  }}  }
class C{  public static void main(String[] argv){  runClassifier(new GaussianProcesses(),argv);}  }
class C{  private static void generateInstructionsForInputVariables(ArrayList<Lop> nodes_v,ArrayList<Instruction> inst) throws LopsException, IOException {  for (  Lop n : nodes_v) {    if (n.getExecLocation() == ExecLocation.Data && !((Data)n).isTransient() && ((Data)n).getOperationType() == OperationTypes.READ && (n.getDataType() == DataType.MATRIX || n.getDataType() == DataType.FRAME)) {      if (!((Data)n).isLiteral()) {        try {          String inst_string=n.getInstructions();          CPInstruction currInstr=CPInstructionParser.parseSingleInstruction(inst_string);          currInstr.setLocation(n);          inst.add(currInstr);        } catch (        DMLRuntimeException e) {          throw new LopsException(n.printErrorLocation() + "error generating instructions from input variables in Dag -- \n",e);        }      }    }  }}  }
class C{  public boolean isInner(int outerStream,int innerStream){  checkArgs(outerStream,innerStream);  Set<Integer> innerSet=streamToInnerMap.get(outerStream);  if (innerSet == null) {    return false;  }  return innerSet.contains(innerStream);}  }
class C{  protected String form(AbstractMatrix1D matrix,int index,Former formatter){  return this.form((ObjectMatrix1D)matrix,index,formatter);}  }
class C{  public void fireSelectedDataChanged(String from){  System.out.println("fireSelectedDataChanged from " + from);  Object[][] sel=getSelectedFullData();  System.out.println("selected full data :");  System.out.println(PArray.cat(_parametersNames));  if (sel.length > 0)   System.out.println(PArray.cat(getSelectedFullData()));  sel=getSelectedProjectedData();  System.out.println("selected projected data :");switch (_dimension) {case 1:    System.out.println(PArray.cat(new String[]{getSelectedXAxis()}));  break;case 2:System.out.println(PArray.cat(new String[]{getSelectedXAxis(),getSelectedYAxis()}));break;case 3:System.out.println(PArray.cat(new String[]{getSelectedXAxis(),getSelectedYAxis(),getSelectedZAxis()}));break;}if (sel.length > 0) System.out.println(PArray.cat(getSelectedProjectedData()));}  }
class C{  private void centerBasedOnHighlightView(HighlightView hv){  Rect drawRect=hv.mDrawRect;  float width=drawRect.width();  float height=drawRect.height();  float thisWidth=getWidth();  float thisHeight=getHeight();  float z1=thisWidth / width * .6F;  float z2=thisHeight / height * .6F;  float zoom=Math.min(z1,z2);  zoom=zoom * this.getScale();  zoom=Math.max(1F,zoom);  if ((Math.abs(zoom - getScale()) / zoom) > 0.1) {    float[] coordinates=new float[]{hv.mCropRect.centerX(),hv.mCropRect.centerY()};    getImageMatrix().mapPoints(coordinates);    zoomTo(zoom,coordinates[0],coordinates[1],300F);  }  ensureVisible(hv);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public final void write(OutputStream outputStream){  try {    this.openOutputStream(outputStream);    this.handler.writeHeaderAndStartElement(this.writer);    this.handler.startPlans(this.population,this.writer);    this.handler.writeSeparator(this.writer);    this.writePersons();    this.handler.endPlans(this.writer);  } catch (  IOException e) {    throw new UncheckedIOException(e);  } finally {    this.close();    counter.printCounter();    counter.reset();  }}  }
class C{  public void flushWithoutMargin(){  if (valueWithMargin != value) {    valueWithMargin=value;    flush(null);  }}  }
class C{  public TInterface createTInterface(){  TInterfaceImpl tInterface=new TInterfaceImpl();  return tInterface;}  }
class C{  public void visitJumpInsn(int opcode,Label label){  if (mv != null) {    mv.visitJumpInsn(opcode,label);  }}  }
class C{  @VisibleForTesting protected List<String> detectDuplicateUsesOfUUID(UUID candidate,String shortname){  ListMultimap<UUID,String> duplicateUses=ArrayListMultimap.create();  for (  Resource other : resources.values()) {    if (!other.getShortname().equalsIgnoreCase(shortname)) {      if (other.getStatus().equals(PublicationStatus.PUBLIC)) {        Set<UUID> otherCandidateUUIDs=collectCandidateResourceUUIDsFromAlternateIds(other);        if (!otherCandidateUUIDs.isEmpty()) {          for (          UUID otherCandidate : otherCandidateUUIDs) {            if (otherCandidate.equals(candidate)) {              duplicateUses.put(candidate,other.getTitleAndShortname());            }          }        }      } else       if (other.getStatus().equals(PublicationStatus.REGISTERED)) {        if (other.getKey().equals(candidate)) {          duplicateUses.put(candidate,other.getTitleAndShortname());        }      }    }  }  return duplicateUses.get(candidate);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return pluggy == null ? "" : pluggy.getId();}  }
class C{  public static void runWithOptimizationLevel(final ContextFactory contextFactory,final ContextAction action,final int optimizationLevel){  final Context cx=contextFactory.enterContext();  try {    cx.setOptimizationLevel(optimizationLevel);    action.run(cx);  }  finally {    Context.exit();  }}  }
class C{  public void updateDeltas(int deltaX,int deltaY){  if (mLeftBorderActive) {    mDeltaX=Math.max(-mBaselineX,deltaX);    mDeltaX=Math.min(mBaselineWidth - 2 * mTouchTargetWidth,mDeltaX);  } else   if (mRightBorderActive) {    mDeltaX=Math.min(mDragLayer.getWidth() - (mBaselineX + mBaselineWidth),deltaX);    mDeltaX=Math.max(-mBaselineWidth + 2 * mTouchTargetWidth,mDeltaX);  }  if (mTopBorderActive) {    mDeltaY=Math.max(-mBaselineY,deltaY);    mDeltaY=Math.min(mBaselineHeight - 2 * mTouchTargetWidth,mDeltaY);  } else   if (mBottomBorderActive) {    mDeltaY=Math.min(mDragLayer.getHeight() - (mBaselineY + mBaselineHeight),deltaY);    mDeltaY=Math.max(-mBaselineHeight + 2 * mTouchTargetWidth,mDeltaY);  }}  }
class C{  public int read(InputStream stream){  setInput(stream);  process();  return status;}  }
class C{  public static long[] unknown_N_compute_B_and_K(double epsilon,double delta,int quantiles){  if (epsilon <= 0.0 || delta <= 0.0) {    long[] result=new long[3];    result[0]=1;    result[1]=Long.MAX_VALUE;    result[2]=Long.MAX_VALUE;    return result;  }  int max_b=50;  int max_h=50;  int max_H=50;  int max_Iterations=2;  long best_b=Long.MAX_VALUE;  long best_k=Long.MAX_VALUE;  long best_h=Long.MAX_VALUE;  long best_memory=Long.MAX_VALUE;  double pow=Math.pow(2.0,max_H);  double logDelta=Math.log(2.0 / (delta / quantiles)) / (2.0 * epsilon * epsilon);  while (best_b == Long.MAX_VALUE && max_Iterations-- > 0) {    for (int b=2; b <= max_b; b++) {      for (int h=2; h <= max_h; h++) {        double Ld=binomial(b + h - 2,h - 1);        double Ls=binomial(b + h - 3,h - 1);        double c=logDelta / Math.min(Ld,8.0 * Ls / 3.0);        double beta=Ld / Ls;        double cc=(beta - 2.0) * (max_H - 2.0) / (beta + pow - 2.0);        double d=(h + 3 + cc) / (2.0 * epsilon);        double f=c * c + 4.0 * c * d;        if (f < 0.0)         continue;        double root=Math.sqrt(f);        double alpha_one=(c + 2.0 * d + root) / (2.0 * d);        double alpha_two=(c + 2.0 * d - root) / (2.0 * d);        boolean alpha_one_OK=false;        boolean alpha_two_OK=false;        if (0.0 < alpha_one && alpha_one < 1.0)         alpha_one_OK=true;        if (0.0 < alpha_two && alpha_two < 1.0)         alpha_two_OK=true;        if (alpha_one_OK || alpha_two_OK) {          double alpha=alpha_one;          if (alpha_one_OK && alpha_two_OK) {            alpha=Math.max(alpha_one,alpha_two);          } else           if (alpha_two_OK) {            alpha=alpha_two;          }          long k=ceiling(Math.max(d / alpha,(h + 1) / (2.0 * epsilon)));          if (k > 0) {            long memory=b * k;            if (memory < best_memory) {              best_k=k;              best_b=b;              best_h=h;              best_memory=memory;            }          }        }      }    }    if (best_b == Long.MAX_VALUE) {      System.out.println("Warning: Computing b and k looks like a lot of work!");      max_b*=2;      max_h*=2;      max_H*=2;    }  }  long[] result=new long[3];  if (best_b == Long.MAX_VALUE) {    result[0]=1;    result[1]=Long.MAX_VALUE;    result[2]=Long.MAX_VALUE;  } else {    result[0]=best_b;    result[1]=best_k;    result[2]=best_h;  }  return result;}  }
class C{  public InfoDialog(JFrame owner){  super(owner,"About TDA",true);  BorderLayout layout=new BorderLayout();  layout.setHgap(30);  getContentPane().setLayout(layout);  initPanel();}  }
class C{  @Override public BallNode buildTree() throws Exception {  m_NumNodes=m_MaxDepth=m_NumLeaves=0;  if (rootRadius == -1) {    rootRadius=BallNode.calcRadius(m_InstList,m_Instances,BallNode.calcCentroidPivot(m_InstList,m_Instances),m_DistanceFunction);  }  BallNode root=buildTreeMiddleOut(0,m_Instances.numInstances() - 1);  return root;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int portNum=getInt(stack);  SFIRTuner tuney=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  return tuney != null ? tuney.getRemoteNames() : null;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MBankAccount[").append(get_ID()).append("-").append(getAccountNo()).append("]");  return sb.toString();}  }
class C{  @Override @SuppressWarnings("unchecked") public IChunkedOrderedIterator<E> iterator(final long offset,final long limit,final int capacity){  return new ChunkedWrappedIterator<E>(Collections.EMPTY_LIST.iterator());}  }
class C{  public static double interpolateZ(Coordinate p,Coordinate v0,Coordinate v1,Coordinate v2){  double x0=v0.x;  double y0=v0.y;  double a=v1.x - x0;  double b=v2.x - x0;  double c=v1.y - y0;  double d=v2.y - y0;  double det=a * d - b * c;  double dx=p.x - x0;  double dy=p.y - y0;  double t=(d * dx - b * dy) / det;  double u=(-c * dx + a * dy) / det;  double z=v0.z + t * (v1.z - v0.z) + u * (v2.z - v0.z);  return z;}  }
class C{  private void unindent(StringBuilder indent){  CharSequence oneIndent=createIndent();  int i=indent.lastIndexOf(oneIndent.toString());  if (i != -1) {    indent.delete(i,i + oneIndent.length());  }}  }
class C{  private void notifyStateChangeListeners(){  for (  final Runnable listener : myStateChangeListeners) {    listener.run();  }}  }
class C{  public static String stringFor(int n){switch (n) {case CU_PREFER_PTX:    return "CU_PREFER_PTX";case CU_PREFER_BINARY:  return "CU_PREFER_BINARY";}return "INVALID CUjit_fallback: " + n;}  }
class C{  public void test_readIsolation(){  final Journal journal=getStore();  try {    final String name="abc";    final byte[] k1=new byte[]{1};    final byte[] k2=new byte[]{2};    final byte[] v1=new byte[]{1};    final byte[] v2=new byte[]{2};{      IndexMetadata md=new IndexMetadata(name,UUID.randomUUID());      md.setIsolatable(true);      journal.registerIndex(md);      IIndex index=journal.getIndex(name);      assertNull(index.insert(k1,v1));      assertNotSame(0L,journal.commit());    }    final long tx1=journal.newTx(ITx.UNISOLATED);    if (log.isDebugEnabled())     log.debug("State A, tx1: " + tx1 + "\n"+ showCRI(journal));{      IIndex index=journal.getIndex(name,tx1);      assertTrue(index.contains(k1));      assertEquals(v1,(byte[])index.lookup(k1));    }{      IIndex index=journal.getIndex(name);      assertNull(index.insert(k2,v2));      assertTrue(index.contains(k2));      final long c2=journal.commit();      if (log.isDebugEnabled())       log.debug("State B, c2: " + c2 + "\n"+ showCRI(journal));      assertNotSame(0L,c2);    }{      IIndex index=journal.getIndex(name,tx1);      assertTrue(index.contains(k1));      assertFalse(index.contains(k2));    }{      final IIndex index=journal.getIndex(name);      assertTrue(index.contains(k1));      assertTrue(index.contains(k2));    }    final long tx2=journal.newTx(ITx.UNISOLATED);    if (log.isDebugEnabled())     log.debug("tx1: " + tx1 + ", tx2: "+ tx2+ "\n"+ showCRI(journal));{      IIndex index=journal.getIndex(name,tx2);      assertTrue(index.contains(k1));      assertTrue(index.contains(k2));    }    journal.abort(tx1);    journal.abort(tx2);  }  finally {    journal.destroy();  }}  }
class C{  public static void encodeHeaderByte(IoBuffer out,byte headerSize,int channelId){  if (channelId <= 63) {    out.put((byte)((headerSize << 6) + channelId));  } else   if (channelId <= 320) {    out.put((byte)(headerSize << 6));    out.put((byte)(channelId - 64));  } else {    out.put((byte)((headerSize << 6) | 1));    channelId-=64;    out.put((byte)(channelId & 0xff));    out.put((byte)(channelId >> 8));  }}  }
class C{  private Transform create(Class type,Class factory) throws Exception {  Object value=factory.newInstance();  Transform transform=(Transform)value;  if (transform != null) {    transforms.cache(type,transform);  }  return transform;}  }
class C{  public double computeAverageLocalOfObservations(){  double mi=0.0;  double miCont=0.0;  max=0;  min=0;  for (int nextVal=0; nextVal < base_power_k; nextVal++) {    double p_next=(double)nextCount[nextVal] / (double)observations;    for (int prevVal=0; prevVal < base_power_k; prevVal++) {      double p_prev=(double)prevCount[prevVal] / (double)observations;      double p_joint=(double)jointCount[nextVal][prevVal] / (double)observations;      if (p_joint > 0.0) {        double logTerm=p_joint / (p_next * p_prev);        double localValue=Math.log(logTerm) / log_base;        miCont=p_joint * localValue;        if (localValue > max) {          max=localValue;        } else         if (localValue < min) {          min=localValue;        }      } else {        miCont=0.0;      }      mi+=miCont;    }  }  average=mi;  return mi;}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  public String acuityTipText(){  return "set the minimum standard deviation for numeric attributes";}  }
class C{  public static void main(String[] argv){  runClassifier(new MultiScheme(),argv);}  }
class C{  private void makeUnique(MLocation address){  m_uniqueName="";  if (m_unique >= 0 || m_uniqueName.length() == 0) {    String xx=address.getCity();    if (xx != null && xx.length() > 0)     m_uniqueName=xx;  }  if (m_unique >= 1 || m_uniqueName.length() == 0) {    String xx=address.getAddress1();    if (xx != null && xx.length() > 0) {      if (m_uniqueName.length() > 0)       m_uniqueName+=" ";      m_uniqueName+=xx;    }  }  if (m_unique >= 2 || m_uniqueName.length() == 0) {    String xx=address.getAddress2();    if (xx != null && xx.length() > 0) {      if (m_uniqueName.length() > 0)       m_uniqueName+=" ";      m_uniqueName+=xx;    }  }  if (m_unique >= 3 || m_uniqueName.length() == 0) {    String xx=address.getRegionName(true);    if (xx != null && xx.length() > 0) {      if (m_uniqueName.length() > 0)       m_uniqueName+=" ";      m_uniqueName+=xx;    }  }  if (m_unique >= 4 || m_uniqueName.length() == 0) {    int id=get_ID();    if (id == 0)     id=address.get_ID();    m_uniqueName+="#" + id;  }}  }
class C{  public void start(EventDispatcher dispatcher) throws ReplicatorException {  for (  SingleThreadStageTask task : tasks) {    if (threadMap.get(task.getName()) != null) {      logger.warn("Task has already been started: " + task.getName());      return;    }    if (stage.getInitialEventId() != null)     task.getExtractor().setLastEventId(stage.getInitialEventId());    try {      task.setEventDispatcher(dispatcher);      task.setSchedule(new SimpleSchedule(stage,task));      Thread stageThread=new Thread(task);      stageThread.setName(task.getName());      threadMap.put(task.getName(),stageThread);      stageThread.start();    } catch (    Throwable t) {      String message="Failed to start stage task";      logger.error(message,t);      throw new ReplicatorException(message,t);    }  }}  }
class C{  FormItem(String pName,String pFieldName,String pContentType,boolean pFormField,long pContentLength,MultipartStream multi){  name=pName;  fieldName=pFieldName;  contentType=pContentType;  formField=pFormField;  stream=multi.newInputStream();}  }
class C{  private Set<Emoticon> parseEmoticons(String json){  Set<Emoticon> result=new HashSet<>();  if (json == null) {    return null;  }  JSONParser parser=new JSONParser();  int errors=0;  try {    JSONObject root=(JSONObject)parser.parse(json);    JSONArray emoticons=(JSONArray)root.get("emoticons");    for (    Object obj : emoticons) {      if (obj instanceof JSONObject) {        JSONObject emote_json=(JSONObject)obj;        Emoticon emote=parseEmoticon(emote_json);        if (emote == null) {          if (errors < 10) {            LOGGER.warning("Error loading emote: " + emote_json);          }          errors++;        } else {          result.add(emote);        }      }    }    if (errors > 0) {      LOGGER.warning(errors + " emotes couldn't be loaded");    }    if (errors > 100) {      return null;    }    return result;  } catch (  ParseException|NullPointerException|ClassCastException ex) {    LOGGER.warning("Error parsing emoticons: " + ex);    return null;  }}  }
class C{  public void paint(Graphics g){  Graphics2D g2D=(Graphics2D)g;  g2D.setFont(m_font);  Dimension size=getPreferredSize();  int w=size.width;  int h=size.height;  g2D.setPaint(Color.white);  g2D.fill3DRect(1,1,w - 2,h - 2,true);  Rectangle where=new Rectangle(0,0,w,getHeaderHeight());  CompiereUtils.paint3Deffect(g2D,where,false,true);  TextLayout layout=null;  g2D.setStroke(getStroke(true));  for (int i=0; i < m_lines.length; i++) {    int yy=getSlotYStart(i);    if (m_lines[i] != null && m_lines[i].length() > 0) {      layout=new TextLayout(m_lines[i],m_font,g2D.getFontRenderContext());      g2D.setPaint(Color.blue);      layout.draw(g2D,w - layout.getAdvance() - 3,yy + layout.getAscent() + layout.getLeading());    }    g2D.setPaint(Color.gray);    g2D.drawLine(2,yy,w - 2,yy);  }  g2D.setPaint(Color.black);  g2D.setStroke(getStroke(false));  g2D.drawLine(1,1,1,h - 1);  g2D.drawLine(w - 1,1,w - 1,h - 1);  g2D.drawLine(1,1,w - 1,1);  g2D.drawLine(1,getHeaderHeight(),w - 1,getHeaderHeight());  g2D.drawLine(1,h - 1,w - 1,h - 1);}  }
class C{  public synchronized void removeIndexPath(IPath path){  if (VERBOSE || DEBUG)   Util.verbose("removing index path " + path);  Object[] keyTable=this.indexes.keyTable;  Object[] valueTable=this.indexes.valueTable;  IndexLocation[] locations=null;  int max=this.indexes.elementSize;  int count=0;  for (int i=0, l=keyTable.length; i < l; i++) {    IndexLocation indexLocation=(IndexLocation)keyTable[i];    if (indexLocation == null)     continue;    if (indexLocation.startsWith(path)) {      Index index=(Index)valueTable[i];      index.monitor=null;      if (locations == null)       locations=new IndexLocation[max];      locations[count++]=indexLocation;      if (this.indexStates.get(indexLocation) == REUSE_STATE) {        indexLocation.close();      } else {        if (DEBUG)         Util.verbose("removing index file " + indexLocation);        indexLocation.delete();      }    } else {      max--;    }  }  if (locations != null) {    for (int i=0; i < count; i++)     this.indexes.removeKey(locations[i]);    removeIndexesState(locations);    if (this.participantsContainers != null) {      boolean update=false;      for (int i=0; i < count; i++) {        if (this.participantsContainers.get(locations[i]) != null) {          update=true;          this.participantsContainers.removeKey(locations[i]);        }      }      if (update)       writeParticipantsIndexNamesFile();    }  }}  }
class C{  public void filter(String str){  filterImpl(str);  dataChanged(DataChangedListener.CHANGED,-1);}  }
class C{  public Dialog showInifiniteBlocking(){  Form f=Display.getInstance().getCurrent();  if (f == null) {    f=new Form();    f.show();  }  if (f.getClientProperty("isInfiniteProgress") == null) {    f.setTintColor(tintColor);  }  Dialog d=new Dialog();  d.putClientProperty("isInfiniteProgress",true);  d.setTintColor(0x0);  d.setDialogUIID("Container");  d.setLayout(new BorderLayout());  d.addComponent(BorderLayout.CENTER,this);  d.setTransitionInAnimator(CommonTransitions.createEmpty());  d.setTransitionOutAnimator(CommonTransitions.createEmpty());  d.showPacked(BorderLayout.CENTER,false);  return d;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private final void moveQueueToBuffer(){  double now=context.getSimTimer().getTimeOfDay();  QVehicle veh;  while ((veh=peekFromVehQueue()) != null) {    if (veh.getEarliestLinkExitTime() > now) {      return;    }    MobsimDriverAgent driver=veh.getDriver();    if (driver instanceof TransitDriverAgent) {      HandleTransitStopResult handleTransitStop=qLink.getTransitQLink().handleTransitStop(now,veh,(TransitDriverAgent)driver,this.qLink.getLink().getId());      if (handleTransitStop == HandleTransitStopResult.accepted) {        removeVehicleFromQueue(veh);        continue;      } else       if (handleTransitStop == HandleTransitStopResult.rehandle) {        continue;      } else       if (handleTransitStop == HandleTransitStopResult.continue_driving) {      }    }    if ((driver.isWantingToArriveOnCurrentLink())) {      letVehicleArrive(veh);      continue;    }    if (!hasFlowCapacityLeftAndBufferSpace()) {      return;    }    addToBuffer(veh);    removeVehicleFromQueue(veh);    if (context.qsimConfig.isRestrictingSeepage() && context.qsimConfig.getLinkDynamics() == LinkDynamics.SeepageQ && context.qsimConfig.getSeepModes().contains(veh.getDriver().getMode())) {      noOfSeepModeBringFwd++;    }  }}  }
class C{  public float screenX(float x,float y){  showMissingWarning("screenX");  return 0;}  }
class C{  public Reflection(){  classPool=null;  converter=new CodeConverter();}  }
class C{  private void handleInitialize(){  scheduleRepeatingAlarm();  if (hasRequest()) {    Intent postIntent=createPostRequestIntent(mApplicationContext,false);    startService(postIntent);  }}  }
class C{  protected synchronized void request(String stream){  if (stream == null || stream.isEmpty()) {    return;  }  stream=stream.toLowerCase(Locale.ENGLISH);  FollowerInfo cachedInfo=cached.get(stream);  if (cachedInfo == null || checkTimePassed(cachedInfo)) {    if (type == Follower.Type.FOLLOWER) {      api.requestFollowers(stream);    } else     if (type == Follower.Type.SUBSCRIBER) {      api.requestSubscribers(stream);    }  } else {    if (type == Follower.Type.FOLLOWER) {      listener.receivedFollowers(cachedInfo);    } else     if (type == Follower.Type.SUBSCRIBER) {      listener.receivedSubscribers(cachedInfo);    }  }}  }
class C{  public boolean isSuccessful(){  return succeeded;}  }
class C{  @Override public void aggregate(ArrayListOfDoubleArrayListWritable other){  k=getConf().getInt(CLUSTER_CENTERS_COUNT,0);  pointsCount=getConf().getInt(POINTS_COUNT,0);  for (int i=0; i < other.size(); i++) {    if (getAggregatedValue().size() < k) {      value.add(other.get(i));    } else {      Random ran=new Random();      int index=ran.nextInt(k);      if (Math.random() > ((double)k / (double)pointsCount)) {        value.set(index,other.get(i));      }    }  }}  }
class C{  protected void javac(StringList args,FileList files){  println("Compiling " + files.size() + " classes");  StringList params=new StringList();  params.addAll(args);  params.addAll(getPaths(files.keep(".java")));  String[] array=params.array();  int result;  PrintStream old=System.err;  try {    Class<?> clazz=Class.forName("com.sun.tools.javac.Main");    if (quiet) {      System.setErr(filter(System.err,new String[]{"Note:"}));    }    Method compile=clazz.getMethod("compile",new Class<?>[]{String[].class});    Object instance=clazz.newInstance();    result=(Integer)invoke(compile,instance,new Object[]{array});  } catch (  Exception e) {    e.printStackTrace();    result=exec("javac",new StringList(array));  } finally {    System.setErr(old);  }  if (result != 0) {    throw new RuntimeException("An error occurred");  }}  }
class C{  private void generatePatternBitmap(){  if (getBounds().width() <= 0 || getBounds().height() <= 0) {    return;  }  mBitmap=Bitmap.createBitmap(getBounds().width(),getBounds().height(),Config.ARGB_8888);  Canvas canvas=new Canvas(mBitmap);  Rect r=new Rect();  boolean verticalStartWhite=true;  for (int i=0; i <= numRectanglesVertical; i++) {    boolean isWhite=verticalStartWhite;    for (int j=0; j <= numRectanglesHorizontal; j++) {      r.top=i * mRectangleSize;      r.left=j * mRectangleSize;      r.bottom=r.top + mRectangleSize;      r.right=r.left + mRectangleSize;      canvas.drawRect(r,isWhite ? mPaintWhite : mPaintGray);      isWhite=!isWhite;    }    verticalStartWhite=!verticalStartWhite;  }}  }
class C{  public static int read32bit(byte[] code,int index){  return (code[index] << 24) | ((code[index + 1] & 0xff) << 16) | ((code[index + 2] & 0xff) << 8)| (code[index + 3] & 0xff);}  }
class C{  public MetaBuilder start(final ItemMeta meta){  return new MetaBuilder(meta);}  }
class C{  private static int applyMaskPenaltyRule1Internal(ByteMatrix matrix,boolean isHorizontal){  int penalty=0;  int iLimit=isHorizontal ? matrix.getHeight() : matrix.getWidth();  int jLimit=isHorizontal ? matrix.getWidth() : matrix.getHeight();  byte[][] array=matrix.getArray();  for (int i=0; i < iLimit; i++) {    int numSameBitCells=0;    int prevBit=-1;    for (int j=0; j < jLimit; j++) {      int bit=isHorizontal ? array[i][j] : array[j][i];      if (bit == prevBit) {        numSameBitCells++;      } else {        if (numSameBitCells >= 5) {          penalty+=N1 + (numSameBitCells - 5);        }        numSameBitCells=1;        prevBit=bit;      }    }    if (numSameBitCells > 5) {      penalty+=N1 + (numSameBitCells - 5);    }  }  return penalty;}  }
class C{  public void mark(int readAheadLimit){  mark=position;}  }
class C{  public void writeListBegin(TList list) throws TException {  writeCollectionBegin(list.elemType,list.size);}  }
class C{  public ColorSwatch(String g,BezierAnimationPanel b){  bez=b;  gradient=g;}  }
class C{  private static boolean isCopiedTokenEqualToNextThreeCopiedTokens(TagNode copiedStartToken,ListIterator<BaseToken> nodeIterator){  int steps=0;  int matches=0;  while (nodeIterator.hasNext() && steps < 3) {    BaseToken nextToken=nodeIterator.next();    steps++;    if (nextToken instanceof TagNode && ((TagNode)nextToken).isCopy() && areCopiedTokensEqual((TagNode)nextToken,copiedStartToken)) {      matches++;    } else {      break;    }  }  for (int i=0; i < steps; i++) {    nodeIterator.previous();  }  return matches == 3;}  }
class C{  public Metadata(MetadataType metadataType,String value){  this(metadataType,value,null,false);}  }
class C{  public static boolean instanceOf(Object obj,Class<?> typeClass){  if (obj == null)   return true;  Class<?> objectClass=obj.getClass();  return instanceOf(objectClass,typeClass);}  }
class C{  public static double readColumn(ResultSet resultSet,Attribute attribute) throws SQLException {  ResultSetMetaData metaData=resultSet.getMetaData();  String name=attribute.getName();  int valueType=attribute.getValueType();  double value;  if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.DATE_TIME)) {    Timestamp timestamp=resultSet.getTimestamp(name);    if (resultSet.wasNull()) {      value=Double.NaN;    } else {      value=timestamp.getTime();    }  } else   if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.NUMERICAL)) {    value=resultSet.getDouble(name);    if (resultSet.wasNull()) {      value=Double.NaN;    }  } else {    if (Ontology.ATTRIBUTE_VALUE_TYPE.isA(valueType,Ontology.NOMINAL)) {      String valueString=null;      int tableIndex=attribute.getTableIndex() + 1;      if (metaData.getColumnType(tableIndex) == Types.CLOB) {        Clob clob=resultSet.getClob(name);        if (clob != null) {          BufferedReader in=null;          try {            in=new BufferedReader(clob.getCharacterStream());            String line=null;            try {              StringBuffer buffer=new StringBuffer();              while ((line=in.readLine()) != null) {                buffer.append(line + "\n");              }              valueString=buffer.toString();            } catch (            IOException e) {              value=Double.NaN;            }          }  finally {            if (in != null) {              try {                in.close();              } catch (              IOException e) {              }            }          }        } else {          valueString=null;        }      } else {        valueString=resultSet.getString(name);      }      if (resultSet.wasNull() || valueString == null) {        value=Double.NaN;      } else {        value=attribute.getMapping().mapString(valueString);      }    } else {      value=Double.NaN;    }  }  return value;}  }
class C{  private String parseDate(String info){  if (m_dformat == null) {    try {      m_dformat=new SimpleDateFormat(m_dataFormat);    } catch (    Exception e) {      log.log(Level.SEVERE,"ImpFormatRow.parseDate Format=" + m_dataFormat,e);    }    if (m_dformat == null)     m_dformat=(SimpleDateFormat)DateFormat.getDateInstance();    m_dformat.setLenient(true);  }  Timestamp ts=null;  try {    ts=new Timestamp(m_dformat.parse(info).getTime());  } catch (  ParseException pe) {    log.log(Level.SEVERE,"ImpFormatRow.parseDate - " + info,pe);  }  if (ts == null)   ts=new Timestamp(System.currentTimeMillis());  String dateString=ts.toString();  return dateString.substring(0,dateString.indexOf('.'));}  }
class C{  public static KMeans randomClusters(int numCenters){  KMeans algorithm=new KMeans();  algorithm.numCenters=numCenters;  algorithm.initializationType=RANDOM_CLUSTERS;  return algorithm;}  }
class C{  void onDropChild(View child){  if (child != null) {    LayoutParams lp=(LayoutParams)child.getLayoutParams();    lp.dropped=true;    child.requestLayout();    markCellsAsOccupiedForView(child);  }}  }
class C{  private PrecisionModel parsePrecisionModel(Element runElement) throws TestParseException {  PrecisionModel precisionModel=new PrecisionModel();  Element precisionModelElement=runElement.getChild("precisionModel");  if (precisionModelElement == null) {    return precisionModel;  }  Attribute typeAttribute=precisionModelElement.getAttribute("type");  Attribute scaleAttribute=precisionModelElement.getAttribute("scale");  if (typeAttribute == null && scaleAttribute == null) {    throw new TestParseException("Missing type attribute in <precisionModel>");  }  if (scaleAttribute != null || (typeAttribute != null && typeAttribute.getValue().trim().equalsIgnoreCase("FIXED"))) {    if (typeAttribute != null && typeAttribute.getValue().trim().equalsIgnoreCase("FLOATING")) {      throw new TestParseException("scale attribute not allowed in floating <precisionModel>");    }    precisionModel=createPrecisionModel(precisionModelElement);  }  return precisionModel;}  }
class C{  static int readEscapeValue(final int start,final int count,final int base,final byte[] characterStream){  int val;switch (base) {case 8:    val=getOctal(start,count,characterStream);  break;case 16:val=getHex(start,count,characterStream);break;default :val=getGeneral(start,count,base,characterStream);break;}return val;}  }
class C{  public GeoRssBox(Point lowerLeft,Point upperRight){  super(Namespaces.GEO_RSS_NAMESPACE,NAME,null);  if (lowerLeft == null && upperRight == null) {    setRequired(false);  }  setGeoLocation(lowerLeft,upperRight);}  }
class C{  public Period(Period period){  this.startDate=(period.startDate == null) ? null : new ICalDate(period.startDate);  this.endDate=(period.endDate == null) ? null : new ICalDate(period.endDate);  this.duration=period.duration;}  }
class C{  public static void main(String[] options){  ListOptions list=new ListOptions();  try {    try {      if (Utils.getFlag('h',options)) {        throw new Exception("Help requested");      }      list.setOptions(options);      Utils.checkForRemainingOptions(options);    } catch (    Exception ex) {      String result="\n" + ex.getMessage() + "\n\n"+ list.generateHelp();      throw new Exception(result);    }    System.out.println("\n" + list.generate());  } catch (  Exception ex) {    System.err.println(ex.getMessage());  }}  }
class C{  public static boolean loadTexture(int glId,int file){  InputStream is=Resource.getResInputStream(file);  Bitmap bitmap=null;  try {    BitmapFactory.Options opts=new BitmapFactory.Options();    opts.inScaled=false;    bitmap=BitmapFactory.decodeStream(is,null,opts);  } catch (  Exception e) {    Log.e(TAG,"Could not read texture file " + file,e);    return false;  } finally {    try {      is.close();    } catch (    Exception e) {      Log.e(TAG,"Error closing stream",e);    }  }  return loadTexture(glId,bitmap);}  }
class C{  private void initialize(Directory directory){  this.directory=directory;}  }
class C{  public void sendNotification(String notificationName,Object body,String type){  facade.sendNotification(notificationName,body,type);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  static byte[] RC4(final byte[] value,final byte[] key) throws AuthenticationException {  try {    final Cipher rc4=Cipher.getInstance("RC4");    rc4.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(key,"RC4"));    return rc4.doFinal(value);  } catch (  Exception e) {    throw new AuthenticationException(e.getMessage(),e);  }}  }
class C{  public static String showAsConstant(final int parameterConstant){  final Field[] ts=PdfDictionary.class.getFields();  int count=ts.length;  String type=null;  for (int ii=0; ii < count; ii++) {    try {      final int t=ts[ii].getInt(new PdfDictionary());      if (t == parameterConstant) {        type="PdfDictionary." + ts[ii].getName();        count=ii;      }    } catch (    final Exception e) {      LogWriter.writeLog("Exception: " + e.getMessage());    }  }  return type;}  }
class C{  public static int writeDouble(byte[] array,int offset,double v){  return writeLong(array,offset,Double.doubleToLongBits(v));}  }
class C{  public AppsAction(String action,KeyStroke accelerator,String toolTipText,boolean toggle){  super();  m_action=action;  m_accelerator=accelerator;  m_toggle=toggle;  if (toolTipText == null)   toolTipText=Msg.getMsg(Env.getCtx(),action);  int pos=toolTipText.indexOf('&');  if (pos != -1 && toolTipText.length() > pos) {    Character ch=new Character(toolTipText.toUpperCase().charAt(pos + 1));    if (ch != ' ') {      toolTipText=toolTipText.substring(0,pos) + toolTipText.substring(pos + 1);      putValue(Action.MNEMONIC_KEY,new Integer(ch.hashCode()));    }  }  Icon small=getIcon(action,true);  Icon large=getIcon(action,false);  Icon largePressed=null;  if (m_toggle) {    m_smallPressed=getIcon(action + "X",true);    if (m_smallPressed == null)     m_smallPressed=small;    largePressed=getIcon(action + "X",false);    if (largePressed == null)     largePressed=large;  }  putValue(Action.NAME,toolTipText);  putValue(Action.SMALL_ICON,small);  putValue(Action.SHORT_DESCRIPTION,toolTipText);  putValue(Action.ACTION_COMMAND_KEY,m_action);  putValue(Action.ACCELERATOR_KEY,accelerator);  if (toggle) {    m_button=new CToggleButton(this);    m_button.setSelectedIcon(largePressed);  } else   m_button=new CButton(this);  m_button.setName(action);  if (large != null) {    m_button.setIcon(large);    m_button.setText(null);  }  m_button.setActionCommand(m_action);  m_button.setMargin(BUTTON_INSETS);  m_button.setSize(BUTTON_SIZE);  if (accelerator != null) {    m_button.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(accelerator,action);    m_button.getActionMap().put(action,this);  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;default :  return false;}}  }
class C{  public static int f(int a){  return a * 2;}  }
class C{  protected void initVelocity(ServletConfig config) throws ServletException {  try {    Properties props=loadConfiguration(config);    Velocity.init(props);  } catch (  Exception e) {    throw new ServletException("Error initializing Velocity: " + e,e);  }}  }
class C{  @CheckReturnValue @CheckForNull static String parenUnQuote(@CheckForNull String in){  if (in == null || in.equals("")) {    return in;  }  StringBuilder result=new StringBuilder();  for (int i=0; i < in.length(); i++) {    char c=in.charAt(i);    if (c == '\\') {      i++;      c=in.charAt(i);      if (c != '\\' && c != ')') {        c+='\\';      }    }    result.append(c);  }  return new String(result);}  }
class C{  private void handleAddToCGError(List<URI> blockObjects,TaskCompleter taskCompleter,String cgName,String replicationGroupName,String msg){  for (  URI blockObjectURI : blockObjects) {    BlockObject blockObject=BlockObject.fetch(dbClient,blockObjectURI);    if (blockObject != null) {      blockObject.setConsistencyGroup(NullColumnValueGetter.getNullURI());    }    dbClient.updateObject(blockObject);  }  taskCompleter.error(dbClient,DeviceControllerException.exceptions.failedToAddMembersToConsistencyGroup(cgName,replicationGroupName,msg));}  }
class C{  public boolean match(AssertStatement node,Object other){  if (!(other instanceof AssertStatement)) {    return false;  }  AssertStatement o=(AssertStatement)other;  return (safeSubtreeMatch(node.getExpression(),o.getExpression()) && safeSubtreeMatch(node.getMessage(),o.getMessage()));}  }
class C{  public void addVariable(String varName){  variables.add(varName);}  }
class C{  public Task<MigrationRestRep> cancel(URI id){  return postTask(getIdUrl() + "/cancel",id);}  }
class C{  public static final boolean inCheck(Position pos){  int kingSq=pos.getKingSq(pos.whiteMove);  return sqAttacked(pos,kingSq);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TSTRUCT_METHOD___GET_DEFAULT_MEMBER_ACCESS_MODIFIER:    return getDefaultMemberAccessModifier();case TypesPackage.TSTRUCT_METHOD___IS_STATIC:  return isStatic();case TypesPackage.TSTRUCT_METHOD___GET_MEMBER_ACCESS_MODIFIER:return getMemberAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  public static void handleCLIResult(final CommandLineResult result) throws Exception {  if (result.getExitCode() != 0) {    throw new SubversionException(Joiner.on("\n").join(result.getStderr().size() != 0 ? result.getStderr().toArray(new String[result.getStderr().size()]) : result.getStdout().toArray(new String[result.getStdout().size()])));  }}  }
class C{  @GwtIncompatible <K,V>MapMakerInternalMap<K,V> makeCustomMap(){  return new MapMakerInternalMap<K,V>(this);}  }
class C{  protected void onDispose(){  if (col_diff_error_fg != null)   col_diff_error_fg.dispose();  if (col_diff_conformant_fg != null)   col_diff_conformant_fg.dispose();  if (col_classifier_bg != null)   col_classifier_bg.dispose();}  }
class C{  public HTMLElement parseHTML(InputStreamReader isr){  return (HTMLElement)super.parse(isr);}  }
class C{  public boolean hasUsefulness(){  return hasExtension(Usefulness.class);}  }
class C{  public T cellspacing(String value){  return attr("cellspacing",value);}  }
class C{  public static String extractIndentString(String line,int tabWidth,int indentWidth){  if (tabWidth < 0 || indentWidth < 0 || line == null) {    throw new IllegalArgumentException();  }  int size=line.length();  int end=0;  int spaceEquivs=0;  int characters=0;  for (int i=0; i < size; i++) {    char c=line.charAt(i);    if (c == '\t') {      spaceEquivs=calculateSpaceEquivalents(tabWidth,spaceEquivs);      characters++;    } else     if (isIndentChar(c)) {      spaceEquivs++;      characters++;    } else {      break;    }    if (spaceEquivs >= indentWidth) {      end+=characters;      characters=0;      if (indentWidth == 0) {        spaceEquivs=0;      } else {        spaceEquivs=spaceEquivs % indentWidth;      }    }  }  if (end == 0) {    return Util.EMPTY_STRING;  } else   if (end == size) {    return line;  } else {    return line.substring(0,end);  }}  }
class C{  public SVGRadialGradientElementBridge(){}  }
class C{  private String generateInformation(){  StringBuffer sb=new StringBuffer();  int copiasSimples=0;  int copiasCertificadas=0;  String xml=null;  DetalleConsultaVO consulta=(DetalleConsultaVO)((HttpServletRequest)pageContext.getRequest()).getSession().getAttribute(ConsultasConstants.DETALLE_CONSULTA_KEY);  if (consulta != null)   xml=consulta.getInformacion();  if (xml != null && xml.trim().length() > 0) {    XmlFacade xmlFacade=new XmlFacade(xml);    try {      copiasSimples=Integer.parseInt(xmlFacade.get(DetalleConsultaVO.PATH_A_COPIASIMPLE));    } catch (    NumberFormatException nfe) {      logger.warn("Error obteniendo las copias simples del xml " + xml,nfe);    }    try {      copiasCertificadas=Integer.parseInt(xmlFacade.get(DetalleConsultaVO.PATH_A_COPIACERTIFICADA));    } catch (    NumberFormatException nfe) {      logger.warn("Error obteniendo las copias certificadas del xml " + xml,nfe);    }  }  sb.append("<table><tr><td class=\"tdDatos\">");  sb.append(copiasSimples);  sb.append(" copias simples</td></tr><tr><td class=\"tdDatos\">");  sb.append(copiasCertificadas);  sb.append(" copias certificadas</td></tr></table>");  return sb.toString();}  }
class C{  public final int skipBytes(int count) throws java.io.IOException {  int skipped=0;  long skip;  while (skipped < count && (skip=in.skip(count - skipped)) != 0) {    skipped+=skip;  }  return skipped;}  }
class C{  private void tryCompleteInLimboTransaction(Xid xid,boolean commit) throws XAException {  try {    FBManagedConnection tempMc=null;    FirebirdLocalTransaction tempLocalTx=null;    try {      tempMc=new FBManagedConnection(null,null,this);      tempLocalTx=(FirebirdLocalTransaction)tempMc.getLocalTransaction();      tempLocalTx.begin();      long fbTransactionId=0;      boolean found=false;      if (tempMc.getGDSHelper().compareToVersion(2,0) < 0) {        FBXid[] inLimboIds=(FBXid[])tempMc.recover(XAResource.TMSTARTRSCAN);        for (        FBXid inLimboId : inLimboIds) {          if (inLimboId.equals(xid)) {            found=true;            fbTransactionId=inLimboId.getFirebirdTransactionId();          }        }      } else {        FBXid foundXid=(FBXid)tempMc.findSingleXid(xid);        if (foundXid != null && foundXid.equals(xid)) {          found=true;          fbTransactionId=foundXid.getFirebirdTransactionId();        }      }      if (!found) {        throw new FBXAException((commit ? "Commit" : "Rollback") + " called with unknown transaction.",XAException.XAER_NOTA);      }      FbDatabase dbHandle=tempMc.getGDSHelper().getCurrentDatabase();      FbTransaction trHandle=dbHandle.reconnectTransaction(fbTransactionId);      if (commit) {        trHandle.commit();      } else {        trHandle.rollback();      }      if (tempMc.getGDSHelper().compareToVersion(3,0) < 0) {        try {          String query="delete from rdb$transactions where rdb$transaction_id = " + fbTransactionId;          GDSHelper gdsHelper=new GDSHelper(dbHandle);          FbTransaction trHandle2=dbHandle.startTransaction(getDefaultTpb().getTransactionParameterBuffer());          gdsHelper.setCurrentTransaction(trHandle2);          FbStatement stmtHandle2=dbHandle.createStatement(trHandle2);          stmtHandle2.prepare(query);          stmtHandle2.execute(RowValue.EMPTY_ROW_VALUE);          stmtHandle2.close();          trHandle2.commit();        } catch (        SQLException sqle) {          throw new FBXAException("unable to remove in limbo transaction from rdb$transactions where rdb$transaction_id = " + fbTransactionId,XAException.XAER_RMERR);        }      }    } catch (    SQLException ex) {      int errorCode=XAException.XAER_RMERR;      int sqlError=ex.getErrorCode();      if (sqlError == ISCConstants.isc_no_recon) {        if (ex.getMessage().contains("committed")) {          errorCode=XAException.XA_HEURCOM;        } else         if (ex.getMessage().contains("rolled back")) {          errorCode=XAException.XA_HEURCOM;        }      }      throw new FBXAException("unable to complete in limbo transaction",errorCode,ex);    } finally {      try {        if (tempLocalTx != null && tempLocalTx.inTransaction())         tempLocalTx.commit();      }  finally {        if (tempMc != null)         tempMc.destroy();      }    }  } catch (  ResourceException ex) {    throw new FBXAException(XAException.XAER_RMERR,ex);  }}  }
class C{  public void test() throws Exception {  assertEquals(LMJelinekMercerSimilarity.class,getSimilarity("text").getClass());}  }
class C{  public final static void writeXML(Writer out,String tag,String val,Object... attrs) throws IOException {  out.write('<');  out.write(tag);  for (int i=0; i < attrs.length; i++) {    out.write(' ');    out.write(attrs[i++].toString());    out.write('=');    out.write('"');    escapeAttributeValue(attrs[i].toString(),out);    out.write('"');  }  if (val == null) {    out.write('/');    out.write('>');  } else {    out.write('>');    escapeCharData(val,out);    out.write('<');    out.write('/');    out.write(tag);    out.write('>');  }}  }
class C{  public void cancelForVersion(int major,int minor,int patch) throws SQLException {  String dbVersion=sharedConnection.getMetaData().getDatabaseProductVersion();  Assume.assumeFalse(dbVersion.startsWith(major + "." + minor+ "."+ patch));}  }
class C{  public void addSelectionColumn(GridField mField){  log.config(mField.getHeader());  int displayLength=mField.getDisplayLength();  if (displayLength <= 0 || displayLength > FIELDLENGTH)   mField.setDisplayLength(FIELDLENGTH); else   displayLength=0;  WEditor editor=null;  Label label=null;  Row panel=new Row();  contentSimpleRows.appendChild(panel);  if (mField.isRange()) {    Hbox box=new Hbox();    editor=WebEditorFactory.getEditor(mField,false);    label=editor.getLabel();    editor.setMandatory(false);    editor.setReadWrite(true);    editor.dynamicDisplay();    Component fieldLabel=editor.getComponent();    box.appendChild(editor.getComponent());    rangeFirstEditor.add(mField.getColumnName());    WEditor toRangeEditor=WebEditorFactory.getEditor(mField,false);    toRangeEditor.setMandatory(false);    toRangeEditor.setReadWrite(true);    toRangeEditor.dynamicDisplay();    m_sEditors2.add(toRangeEditor);    Label separator=new Label(" - ");    box.appendChild(separator);    Component fieldLabel1=toRangeEditor.getComponent();    box.appendChild(toRangeEditor.getComponent());    if (displayLength > 0)     mField.setDisplayLength(displayLength);    if (isTwoColumns) {      if (!isPair)       panel=new Row();    } else     panel=new Row();    panel.appendChild(LayoutUtils.makeRightAlign(label));    panel.appendChild(box);    fieldLabel.addEventListener(Events.ON_OK,this);    fieldLabel1.addEventListener(Events.ON_OK,this);  } else {    editor=WebEditorFactory.getEditor(mField,false);    label=editor.getLabel();    editor.setMandatory(false);    editor.setReadWrite(true);    editor.dynamicDisplay();    Component fieldLabel=editor.getComponent();    if (displayLength > 0)     mField.setDisplayLength(displayLength);    panel.appendChild(LayoutUtils.makeRightAlign(label));    panel.appendChild(fieldLabel);    fieldLabel.addEventListener(Events.ON_OK,this);    m_sEditors2.add(null);  }  m_sEditors.add(editor);}  }
class C{  private void fill() throws IOException {  byte[] buffer=getBufIfOpen();  if (markpos < 0)   pos=0; else   if (pos >= buffer.length)   if (markpos > 0) {    int sz=pos - markpos;    System.arraycopy(buffer,markpos,buffer,0,sz);    pos=sz;    markpos=0;  } else   if (buffer.length >= marklimit) {    markpos=-1;    pos=0;  } else {    int nsz=pos * 2;    if (nsz > marklimit)     nsz=marklimit;    byte nbuf[]=new byte[nsz];    System.arraycopy(buffer,0,nbuf,0,pos);    if (!BUF_UPDATER.compareAndSet(this,buffer,nbuf)) {      throw new IOException("Stream closed");    }    buffer=nbuf;  }  count=pos;  int n=getInIfOpen().read(buffer,pos,buffer.length - pos);  if (n > 0)   count=n + pos;}  }
class C{  public PopupImage(final String image,final String title,final String caption){  put(Actions.ACTION,Actions.LOOK_CLOSELY);  this.image=image;  if (!image.startsWith("http://") && !image.startsWith("https://")) {    this.image="examine/" + image;  }  this.title=title;  this.caption=caption;}  }
class C{  public int readZeta(final int k) throws IOException {  if (k < 1)   throw new IllegalArgumentException("The shrinking factor " + k + " is not positive");  if (k == 3) {    int preComp;    if ((fill >= 16 || refill() >= 16) && (preComp=ZETA_3[current >> (fill - 16) & 0xFFFF]) != 0) {      readBits+=preComp >> 16;      fill-=preComp >> 16;      return preComp & 0xFFFF;    }  }  final int h=readUnary();  final int left=1 << h * k;  final int m=readInt(h * k + k - 1);  if (m < left)   return m + left - 1;  return (m << 1) + readBit() - 1;}  }
class C{  public boolean isBackbuttonOverridden(){  return webView.isButtonPlumbedToJs(KeyEvent.KEYCODE_BACK);}  }
class C{  public CppInstallerAction(){  super("Install");}  }
class C{  public static void write(ScanManagerConfig bean,OutputStream os,boolean fragment) throws JAXBException {  writeXml((Object)bean,os,fragment);}  }
class C{  public BlockAddresses(RopMethod method){  BasicBlockList blocks=method.getBlocks();  int maxLabel=blocks.getMaxLabel();  this.starts=new CodeAddress[maxLabel];  this.lasts=new CodeAddress[maxLabel];  this.ends=new CodeAddress[maxLabel];  setupArrays(method);}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  @Override public void performAdditionalDomainUpdateLogic(DomainResource domainResource,String clientId,DateTime asOfDate,EppInput eppInput,HistoryEntry historyEntry) throws EppException {  FlagsUpdateCommandExtension flags=eppInput.getSingleExtension(FlagsUpdateCommandExtension.class);  if (flags == null) {    return;  }  messageToThrow="add:" + Joiner.on(',').join(flags.getAddFlags().getFlags()) + ";remove:"+ Joiner.on(',').join(flags.getRemoveFlags().getFlags());}  }
class C{  public WeightComparator(int direction,int comparatorWeightType){  this.comparatorWeightType=comparatorWeightType;  this.direction=direction;}  }
class C{  public void clearTransactions(int fromHeight){  lock.lock();  try {    if (fromHeight == 0) {      clearTransactions();      saveLater();    } else {      throw new UnsupportedOperationException();    }  }  finally {    lock.unlock();  }}  }
class C{  public boolean isTerminated(){synchronized (privateInstanceLock) {    return isTerminated;  }}  }
class C{  @Override public boolean supportsCatalogsInIndexDefinitions(){  debugCodeCall("supportsCatalogsInIndexDefinitions");  return true;}  }
class C{  private void resolutionFinished(final ConflictResolution[] resolutions,final ConflictResolutionStatus[] statuses){  for (int i=0; i < statuses.length; i++) {    if (statuses[i] == ConflictResolutionStatus.SUCCESS || statuses[i] == ConflictResolutionStatus.SUCCEEDED_WITH_CONFLICTS) {      resolveCount++;    }  }  ConflictHelpers.showConflictErrors(getShell(),resolutions,statuses);  refresh();}  }
class C{  static void removeOrphanedStates(Context context,int[] widgetIds){  File prefsDirectory=getSharedPrefsFile(context,"null").getParentFile();  File[] widgetStates=prefsDirectory.listFiles(new StateFilter(widgetIds));  if (widgetStates != null) {    for (    File f : widgetStates) {      Log.w(TAG,"Found orphaned state: " + f.getName());      if (!f.delete()) {        f.deleteOnExit();      }    }  }}  }
class C{  public ErrorDialog(final SafeHtml message){  this();  body.add(message.toBlockWidget());}  }
class C{  public SpriteCache(){  sprites=new MemoryCache<Object,Sprite>();}  }
class C{  private static List<SupportedLanguage> findAllActive(DataService ds){  Query query=ds.createNamedQuery("SupportedLanguage.findAllActive");  List<SupportedLanguage> result=ParameterizedTypes.list(query.getResultList(),SupportedLanguage.class);  return result;}  }
class C{  public static int readReverseInt(IoBuffer in){  final byte a=in.get();  final byte b=in.get();  final byte c=in.get();  final byte d=in.get();  int val=0;  val+=(d & 0xff) << 24;  val+=(c & 0xff) << 16;  val+=(b & 0xff) << 8;  val+=(a & 0xff);  return val;}  }
class C{  public static boolean testRayTriangle(double originX,double originY,double originZ,double dirX,double dirY,double dirZ,double v0X,double v0Y,double v0Z,double v1X,double v1Y,double v1Z,double v2X,double v2Y,double v2Z,double epsilon){  double edge1X=v1X - v0X;  double edge1Y=v1Y - v0Y;  double edge1Z=v1Z - v0Z;  double edge2X=v2X - v0X;  double edge2Y=v2Y - v0Y;  double edge2Z=v2Z - v0Z;  double pvecX=dirY * edge2Z - dirZ * edge2Y;  double pvecY=dirZ * edge2X - dirX * edge2Z;  double pvecZ=dirX * edge2Y - dirY * edge2X;  double det=edge1X * pvecX + edge1Y * pvecY + edge1Z * pvecZ;  if (det > -epsilon && det < epsilon)   return false;  double tvecX=originX - v0X;  double tvecY=originY - v0Y;  double tvecZ=originZ - v0Z;  double invDet=1.0 / det;  double u=(tvecX * pvecX + tvecY * pvecY + tvecZ * pvecZ) * invDet;  if (u < 0.0 || u > 1.0)   return false;  double qvecX=tvecY * edge1Z - tvecZ * edge1Y;  double qvecY=tvecZ * edge1X - tvecX * edge1Z;  double qvecZ=tvecX * edge1Y - tvecY * edge1X;  double v=(dirX * qvecX + dirY * qvecY + dirZ * qvecZ) * invDet;  if (v < 0.0 || u + v > 1.0)   return false;  double t=(edge2X * qvecX + edge2Y * qvecY + edge2Z * qvecZ) * invDet;  return t >= epsilon;}  }
class C{  public <T extends C>ObjectParameter(OptionID optionID,Class<?> restrictionClass,T defaultValue){  super(optionID,restrictionClass);  this.instance=defaultValue;}  }
class C{  @Override public boolean implies(Permission permission){  return perms.implies(permission);}  }
class C{  private Set<CCFGNode> handleMethodCallNode(CCFGNode node,Stack<MethodCall> callStack,Set<CCFGNode> handled){  CCFGMethodCallNode callNode=(CCFGMethodCallNode)node;  updateCallStackForCallNode(callStack,callNode);  return filterHandledMapForMethodCallNode(callNode,handled);}  }
class C{  public void SwitchToRemotePanel(){  viewPager.setCurrentItem(1);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.DOCLET_ELEMENT__BEGIN:    return getBegin();case DomPackage.DOCLET_ELEMENT__END:  return getEnd();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:56.710 -0500",hash_original_method="0E820F09DB891E9F2C0C31F49AA44F05",hash_generated_method="C0876CAC578C9B7DED5DAE98E528571A") public final SecretKey generateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException {  return spiImpl.engineGenerateSecret(algorithm);}  }
class C{  public static boolean unlockIfRequired(Activity activity){  ActionLockingHelper helper=new ActionLockingHelper(activity);  if (helper.isUnlockRequired()) {    Intent intent=new Intent(activity,UnlockActivity.class).putExtra(UnlockActivity.INTENT_ALLOW_UNLOCKED_EXIT,true);    activity.startActivityForResult(intent,REQUEST_CODE_UNLOCK);    return true;  } else   return false;}  }
class C{  public POSBracketToVector(String file){  super(file);}  }
class C{  public void put(CoapHandler handler,String payload,int format){  asynchronous(format(newPut().setURI(uri).setPayload(payload),format),handler);}  }
class C{  protected void addOutputSuffix(DalvInsn insn){  output.addSuffix(insn);}  }
class C{  public boolean shippingApplies(){  boolean shippingApplies=false;  for (  ShoppingCartItem item : this) {    if (item.shippingApplies()) {      shippingApplies=true;      break;    }  }  return shippingApplies;}  }
class C{  public void reset(){  RecycleSegmentMemory.recycleLeftRegularBipartiteGraphSegment(this);}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  elementData=EMPTY_ELEMENTDATA;  s.defaultReadObject();  s.readInt();  if (size > 0) {    ensureCapacityInternal(size);    Object[] a=elementData;    for (int i=0; i < size; i++) {      a[i]=s.readObject();    }  }}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,byte[] value){  if (extensions.containsKey(oid)) {    throw new IllegalArgumentException("extension " + oid + " already added");  }  extOrdering.addElement(oid);  extensions.put(oid,new X509Extension(critical,new DEROctetString(value)));}  }
class C{  public void addChoice(GrammarNode choice){  children.add(choice);}  }
class C{  public void addGVTListener(Document doc){  BridgeEventSupport.addGVTListener(this,doc);}  }
class C{  public static double vectorDistance(double[] vec1,double[] vec2,double power,double oneOverPower){  double result=0;  if (power == 0) {    for (int i=0; i < vec1.length; i++) {      result+=vec1[i] - vec2[i] == 0 ? 0 : 1;    }  } else   if (power == 1.0) {    for (int i=0; i < vec1.length; i++) {      result+=Math.abs(vec1[i] - vec2[i]);    }  } else   if (power == 2.0) {    result=Math.sqrt(distSquaredCartesian(vec1,vec2));  } else   if (power == Integer.MAX_VALUE || Double.isInfinite(power)) {    for (int i=0; i < vec1.length; i++) {      result=Math.max(result,Math.max(vec1[i],vec2[i]));    }  } else {    for (int i=0; i < vec1.length; i++) {      result+=Math.pow(vec1[i] - vec2[i],power);    }    result=Math.pow(result,oneOverPower);  }  return result;}  }
class C{  public void moveForward(){  if (getRemainingMoves() <= 0) {    return;  }switch (direction) {case NORTH:    y=(y - 1 + height) % height;  break;case SOUTH:y=(y + 1) % height;break;case EAST:x=(x + 1) % width;break;case WEST:x=(x - 1 + width) % width;break;default :throw new IllegalStateException();}if (map[x][y].equals(State.FOOD)) {map[x][y]=State.EATEN;foodEaten++;numberOfMoves=maxMoves - remainingMoves;}remainingMoves--;}  }
class C{  public Vec4 intersect(Vec4 pa,Vec4 pb){  if (pa == null || pb == null) {    throw new IllegalArgumentException("Point Is Null");  }  try {    if (pa.equals(pb)) {      double d=this.distanceTo(pa);      if (d == 0)       return pa; else       return null;    }    Line l=Line.fromSegment(pa,pb);    double t=this.intersectDistance(l);    if (Double.isInfinite(t))     return Vec4.INFINITY;    if (Double.isNaN(t) || t < 0 || t > 1)     return null;    return l.getPointAt(t);  } catch (  IllegalArgumentException e) {    return null;  }}  }
class C{  public NClob readNClob() throws SQLException {  return (NClob)getNextAttribute();}  }
class C{  public void save(File outputArchiveFile) throws IOException {  JarInputStream zin=null;  JarOutputStream zout=null;  try {    byte[] buf=new byte[1024];    zin=new JarInputStream(new FileInputStream(jarFile));    zout=new JarOutputStream(new FileOutputStream(outputArchiveFile));    JarEntry entry=zin.getNextJarEntry();    while (entry != null) {      if (jarEntries.containsKey(entry.getName()) && !jarEntriesToAdd.containsKey(entry.getName())) {        zout.putNextEntry(jarEntries.get(entry.getName()));        int len;        while ((len=zin.read(buf)) > 0) {          zout.write(buf,0,len);        }        zout.closeEntry();      }      entry=zin.getNextJarEntry();    }    for (    Entry<String,byte[]> jarEntryToAdd : jarEntriesToAdd.entrySet()) {      String entryName=jarEntryToAdd.getKey();      byte[] bytes=jarEntryToAdd.getValue();      InputStream fin=null;      try {        fin=new ByteArrayInputStream(bytes);        zout.putNextEntry(jarEntries.get(entryName));        int len;        while ((len=fin.read(buf)) > 0) {          zout.write(buf,0,len);        }        zout.closeEntry();      }  finally {        if (fin != null) {          fin.close();        }      }    }  }  finally {    if (zin != null) {      zin.close();    }    if (zout != null) {      zout.close();    }  }}  }
class C{  public NotificationRoomManager(UserNotificationService notificationService,KurentoClientProvider kcProvider){  super();  this.notificationRoomHandler=new DefaultNotificationRoomHandler(notificationService);  this.internalManager=new RoomManager(notificationRoomHandler,kcProvider);}  }
class C{  @TransactionAttribute(TransactionAttributeType.REQUIRED) public void executeOperation(ServiceInstance serviceInstance,ServiceUser user,InstanceOperation operation) throws ServiceInstanceException {  String locale=user.getLocale();  if (serviceInstance == null) {    throw new ServiceInstanceException(Messages.get(locale,"error_instance_not_exist"),"[serviceInstance is null]");  }  serviceInstance=em.getReference(ServiceInstance.class,Long.valueOf(serviceInstance.getTkey()));switch (operation) {case RESUME:    resumeInstance(serviceInstance,locale);  break;case SUSPEND:suspendInstance(serviceInstance,locale);break;case UNLOCK:unlockInstance(serviceInstance,locale);break;case DELETE:deleteServiceInstance(serviceInstance,locale);break;case DEPROVISION:deprovision(serviceInstance,user);break;case ABORT_PENDING:abortPendingInstance(serviceInstance,locale);break;case COMPLETE_PENDING:completePendingInstance(serviceInstance,locale);break;default :break;}}  }
class C{  public void testLoadContent2(){  System.out.println("LoadContent with several file");  mockInitialisationCalls(false,AuditStatus.CONTENT_LOADING);  fileMap.put("file:///My_File_Name1","MyFileContent1");  fileMap.put("file:///My_File_Name2","MyFileContent2");  EasyMock.expect(mockAudit.getStatus()).andReturn(AuditStatus.CONTENT_LOADING).once();  Site mockSite=EasyMock.createMock(Site.class);  Page mockPage1=EasyMock.createMock(Page.class);  Page mockPage2=EasyMock.createMock(Page.class);  EasyMock.expect(mockWebResourceDataService.createSite("file:///My_File_Name1")).andReturn(mockSite).once();  EasyMock.expect(mockWebResourceDataService.createPage("file:///My_File_Name1")).andReturn(mockPage1).once();  EasyMock.expect(mockWebResourceDataService.createPage("file:///My_File_Name2")).andReturn(mockPage2).once();  mockSite.addChild(mockPage1);  EasyMock.expectLastCall().once();  mockSite.addChild(mockPage2);  EasyMock.expectLastCall().once();  mockSite.setAudit(mockAudit);  EasyMock.expectLastCall().once();  EasyMock.expect(mockWebResourceDataService.saveOrUpdate(mockSite)).andReturn(mockSite).times(2);  EasyMock.expect(mockWebResourceDataService.saveOrUpdate(mockPage1)).andReturn(mockSite).once();  EasyMock.expect(mockWebResourceDataService.saveOrUpdate(mockPage2)).andReturn(mockSite).once();  mockAudit.setSubject(mockSite);  EasyMock.expectLastCall().once();  EasyMock.expect(mockAudit.getSubject()).andReturn(mockSite).once();  EasyMock.expect(mockContentLoaderService.loadContent(mockSite,fileMap)).andReturn(new ArrayList<Content>()).once();  mockAudit.setStatus(AuditStatus.CONTENT_ADAPTING);  EasyMock.expectLastCall().once();  EasyMock.expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  EasyMock.replay(mockSite);  EasyMock.replay(mockPage1);  EasyMock.replay(mockPage2);  setReplayMode();  UploadAuditCommandImpl instance=getInstance();  instance.loadContent();  EasyMock.verify(mockSite);  EasyMock.verify(mockPage1);  EasyMock.verify(mockPage2);  setVerifyMode();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void multRow(Matrix A,int i,int start,int to,Vec c){  for (int j=start; j < to; j++)   A.set(i,j,A.get(i,j) * c.get(j));}  }
class C{  public static void transformScheduleFile(String scheduleFile,String fromCoordinateSystem,String toCoordinateSystem){  log.info("... Transformig schedule from " + fromCoordinateSystem + " to "+ toCoordinateSystem);  final CoordinateTransformation coordinateTransformation=TransformationFactory.getCoordinateTransformation(fromCoordinateSystem,toCoordinateSystem);  final Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new TransitScheduleReader(coordinateTransformation,scenario).readFile(scheduleFile);  TransitSchedule schedule=scenario.getTransitSchedule();  new TransitScheduleWriter(schedule).writeFile(scheduleFile);}  }
class C{  public Packet<?>[] popQueuedPackets(@Nullable EntityPlayerMP player){  List<Packet<?>[]> queue=this.playerPacketMap.get(player == null ? null : player.getUniqueID());  return queue == null || queue.isEmpty() ? null : queue.remove(0);}  }
class C{  public static byte[] readStream(InputStream fin) throws IOException {  byte[][] bufs=new byte[8][];  int bufsize=4096;  for (int i=0; i < 8; ++i) {    bufs[i]=new byte[bufsize];    int size=0;    int len=0;    do {      len=fin.read(bufs[i],size,bufsize - size);      if (len >= 0)       size+=len; else {        byte[] result=new byte[bufsize - 4096 + size];        int s=0;        for (int j=0; j < i; ++j) {          System.arraycopy(bufs[j],0,result,s,s + 4096);          s=s + s + 4096;        }        System.arraycopy(bufs[i],0,result,s,size);        return result;      }    } while (size < bufsize);    bufsize*=2;  }  throw new IOException("too much data");}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public static AsymmetricKeyParameter createKey(byte[] privateKeyInfoData) throws IOException {  return createKey(PrivateKeyInfo.getInstance(ASN1Primitive.fromByteArray(privateKeyInfoData)));}  }
class C{  public Date addToDate(Date base,TimeZone zone){  Calendar calendar=Calendar.getInstance(zone);  calendar.setTime(base);  calendar.add(this.unitType.getCalendarField(),this.count);  return calendar.getTime();}  }
class C{  public PriceModelContent(String contentType,byte[] content){  this.contentType=contentType;  this.content=content;  this.tag=null;}  }
class C{  public void put(int key,Double value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      Double[] nvalues=new Double[n];      Arrays.fill(nkeys,-1);      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public boolean rowDeleted() throws SQLException {  checkUpdatable();  return rowUpdater.rowUpdated();}  }
class C{  public static KBucketEntry UnpackBucketEntry(byte[] buffer,int off,DHTtype type){  if (off + type.NODES_ENTRY_LENGTH > buffer.length) {    throw new IllegalArgumentException("Not enough room in buffer");  }  ByteBuffer bb=ByteBuffer.wrap(buffer,off,type.NODES_ENTRY_LENGTH);  byte[] key=new byte[20];  bb.get(key);  byte[] inetaddr=new byte[type.NODES_ENTRY_LENGTH - 20 - 2];  bb.get(inetaddr);  InetSocketAddress addr=null;  try {    addr=new InetSocketAddress(InetAddress.getByAddress(inetaddr),Short.toUnsignedInt(bb.getShort()));  } catch (  UnknownHostException e) {    e.printStackTrace();    throw new RuntimeException(e);  }  return new KBucketEntry(addr,new Key(key),0);}  }
class C{  private Workflow loadWorkflow(String zkWorkflowPath) throws WorkflowException {  try {    Workflow workflow=(Workflow)_dataManager.getData(zkWorkflowPath,false);    workflow._stepMap=new HashMap<String,Step>();    workflow._stepStatusMap=new HashMap<String,StepStatus>();    workflow._service=this;    List<String> children=_dataManager.getChildren(zkWorkflowPath);    for (    String child : children) {      String childPath=zkWorkflowPath + "/" + child;      Object stepObj=_dataManager.getData(childPath,false);      if (stepObj == null || false == (stepObj instanceof Step)) {        continue;      }      Step step=(Step)stepObj;      restoreStepDataFromDB(step);      workflow.getStepMap().put(step.stepId,step);      if (step.stepGroup != null) {        if (workflow.getStepGroupMap().get(step.stepGroup) == null) {          workflow.getStepGroupMap().put(step.stepGroup,new HashSet<String>());        }        workflow.getStepGroupMap().get(step.stepGroup).add(step.stepId);      }      StepStatus status=step.status;      workflow._stepStatusMap.put(step.stepId,status);      _log.debug(String.format("Loaded step %s state %s for workflow %s",step.stepId,step.status.state,workflow._orchTaskId));    }    return workflow;  } catch (  Exception ex) {    _log.error("Unable to load workflow: " + zkWorkflowPath,ex);    throw WorkflowException.exceptions.workflowNotFound(zkWorkflowPath);  }}  }
class C{  protected void clearOutEvents(){}  }
class C{  @Override public synchronized boolean add(E object){  if (elementCount == elementData.length) {    growByOne();  }  elementData[elementCount++]=object;  modCount++;  return true;}  }
class C{  public static String quote(String s){  return "\"" + s + "\"";}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  @Override public void clearBatch() throws SQLException {  try {    debugCodeCall("clearBatch");    checkClosed();    batchCommands=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private boolean checkCurrentAnimationPart(AnimationPart part){switch (part) {case FIRST:{      return mLoadingAnimationTime < getAnimationTimePart(AnimationPart.FOURTH);    }case SECOND:case THIRD:{    return mLoadingAnimationTime < getAnimationTimePart(part);  }case FOURTH:{  return mLoadingAnimationTime > getAnimationTimePart(AnimationPart.THIRD);}default :return false;}}  }
class C{  public int addLinePlot(String name,Color color,double[][] XY){  return ((Plot3DCanvas)plotCanvas).addLinePlot(name,color,XY);}  }
class C{  public Matrix(double[][] data){  values=data;  rows=data.length;  columns=data[0].length;}  }
class C{  private void parse(byte[] program) throws ScriptException {  chunks=new ArrayList<ScriptChunk>(5);  ByteArrayInputStream bis=new ByteArrayInputStream(program);  int initialSize=bis.available();  while (bis.available() > 0) {    int startLocationInProgram=initialSize - bis.available();    int opcode=bis.read();    long dataToRead=-1;    if (opcode >= 0 && opcode < OP_PUSHDATA1) {      dataToRead=opcode;    } else     if (opcode == OP_PUSHDATA1) {      if (bis.available() < 1)       throw new ScriptException("Unexpected end of script");      dataToRead=bis.read();    } else     if (opcode == OP_PUSHDATA2) {      if (bis.available() < 2)       throw new ScriptException("Unexpected end of script");      dataToRead=bis.read() | (bis.read() << 8);    } else     if (opcode == OP_PUSHDATA4) {      if (bis.available() < 4)       throw new ScriptException("Unexpected end of script");      dataToRead=((long)bis.read()) | (((long)bis.read()) << 8) | (((long)bis.read()) << 16)| (((long)bis.read()) << 24);    }    ScriptChunk chunk;    if (dataToRead == -1) {      chunk=new ScriptChunk(opcode,null,startLocationInProgram);    } else {      if (dataToRead > bis.available())       throw new ScriptException("Push of data element that is larger than remaining data");      byte[] data=new byte[(int)dataToRead];      checkState(dataToRead == 0 || bis.read(data,0,(int)dataToRead) == dataToRead);      chunk=new ScriptChunk(opcode,data,startLocationInProgram);    }    for (    ScriptChunk c : STANDARD_TRANSACTION_SCRIPT_CHUNKS) {      if (c.equals(chunk))       chunk=c;    }    chunks.add(chunk);  }}  }
class C{  public boolean isEmpty(){  return header.next == header;}  }
class C{  @Override public void resume(){  inUserStatus=false;  color=null;  mainTaskName=null;}  }
class C{  public void fwdDct8x8(int[][] input,double[][] output){  double[][] temp=new double[NJPEG][NJPEG];  double temp1=0.0;  int i=0;  int j=0;  int k=0;  for (i=0; i < NJPEG; i++) {    for (j=0; j < NJPEG; j++) {      temp[i][j]=0.0;      for (k=0; k < NJPEG; k++) {        temp[i][j]+=(input[i][k] - 128) * this.Ct[k][j];      }    }  }  for (i=0; i < NJPEG; i++) {    for (j=0; j < NJPEG; j++) {      temp1=0.0;      for (k=0; k < NJPEG; k++) {        temp1+=this.C[i][k] * temp[k][j];      }      output[i][j]=temp1;    }  }}  }
class C{  public static int indexInParent(Layer layer){  GroupLayer parent=layer.parent();  if (parent == null)   return -1;  for (int ii=parent.children() - 1; ii >= 0; ii--) {    if (parent.childAt(ii) == layer)     return ii;  }  throw new AssertionError();}  }
class C{  public void finLink() throws IOException {  if (link.isCloseLink()) {    Debug.message("link","LinkManager.finLink: closing Link");    link.close();    link=null;  } else {    Debug.message("link","LinkManager.finLink: releasing lock on Link");    link.setLocked(false);  }}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ExecutionScope.class) {switch (derivedFeatureID) {case SexecPackage.EXECUTION_STATE__STATE_VECTOR:      return SexecPackage.EXECUTION_SCOPE__STATE_VECTOR;case SexecPackage.EXECUTION_STATE__SUB_SCOPES:    return SexecPackage.EXECUTION_SCOPE__SUB_SCOPES;case SexecPackage.EXECUTION_STATE__SUPER_SCOPE:  return SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE;case SexecPackage.EXECUTION_STATE__ENTER_SEQUENCES:return SexecPackage.EXECUTION_SCOPE__ENTER_SEQUENCES;case SexecPackage.EXECUTION_STATE__EXIT_SEQUENCE:return SexecPackage.EXECUTION_SCOPE__EXIT_SEQUENCE;case SexecPackage.EXECUTION_STATE__INIT_SEQUENCE:return SexecPackage.EXECUTION_SCOPE__INIT_SEQUENCE;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static double mouseX(){synchronized (mouseLock) {    return mouseX;  }}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @SuppressFBWarnings("JLM_JSR166_UTILCONCURRENT_MONITORENTER") private Response make() throws IOException {synchronized (this.transformed) {    if (this.transformed.isEmpty()) {      this.transformed.add(new RsWithBody(this.origin,RsPrettyXml.transform(this.origin.body())));    }  }  return this.transformed.get(0);}  }
class C{  public static void isTrue(boolean assertion,String message){  if (!assertion) {    if (message == null) {      throw new AssertionFailedException();    } else {      throw new AssertionFailedException(message);    }  }}  }
class C{  public JSONTokener(InputStream inputStream) throws JSONException {  this(new InputStreamReader(inputStream));}  }
class C{  public void debug(String s){  if (isEnabled(TraceSystem.DEBUG)) {    traceWriter.write(TraceSystem.DEBUG,module,s,null);  }}  }
class C{  public GuacamoleConfiguration(){}  }
class C{  public String selectHeaderAccept(String[] accepts){  if (accepts.length == 0)   return null;  if (StringUtil.containsIgnoreCase(accepts,"application/json"))   return "application/json";  return StringUtil.join(accepts,",");}  }
class C{  public String parseString(String text) throws DataParseException {  return text;}  }
class C{  public JCExpression Type(Type t){  if (t == null)   return null;  JCExpression tp;switch (t.getTag()) {case BYTE:case CHAR:case SHORT:case INT:case LONG:case FLOAT:case DOUBLE:case BOOLEAN:case VOID:    tp=TypeIdent(t.getTag());  break;case TYPEVAR:tp=Ident(t.tsym);break;case WILDCARD:{WildcardType a=((WildcardType)t);tp=Wildcard(TypeBoundKind(a.kind),Type(a.type));break;}case CLASS:Type outer=t.getEnclosingType();JCExpression clazz=outer.hasTag(CLASS) && t.tsym.owner.kind == TYP ? Select(Type(outer),t.tsym) : QualIdent(t.tsym);tp=t.getTypeArguments().isEmpty() ? clazz : TypeApply(clazz,Types(t.getTypeArguments()));break;case ARRAY:tp=TypeArray(Type(types.elemtype(t)));break;case ERROR:tp=TypeIdent(ERROR);break;default :throw new AssertionError("unexpected type: " + t);}return tp.setType(t);}  }
class C{  private boolean removeMapping(Object rowKey,Object columnKey,Object value){  if (!containsMapping(rowKey,columnKey,value))   return false;  remove(rowKey,columnKey);  return true;}  }
class C{  protected void showRecordedVideo(){  String absPath=mCurrentVideoFile.getAbsolutePath();  Intent intent=new Intent(this,PlayerActivity.class);  intent.putExtra(PlayerActivity.EXTRA_VIDEO_PATH,absPath);  startActivity(intent);  mCurrentVideoFile=null;}  }
class C{  public GridNioCodecFilter(GridNioParser parser,IgniteLogger log,boolean directMode){  super("GridNioCodecFilter");  this.parser=parser;  this.log=log;  this.directMode=directMode;}  }
class C{  private void removeReferences(){  mgr.createQuery("UPDATE PricedParameter pp SET parameter = NULL").executeUpdate();}  }
class C{  protected synchronized void attach(final long timestampOrTxId) throws DatasetNotFoundException {  BigdataSail.this.assertOpenSail();  final AbstractTripleStore tripleStore=(AbstractTripleStore)getIndexManager().getResourceLocator().locate(namespace,timestampOrTxId);  if (tripleStore == null) {    throw new DatasetNotFoundException("namespace=" + namespace);  }  this.database=tripleStore;  openConn=true;  assertBuffer=null;  retractBuffer=null;  m_listeners=null;  if (database.isReadOnly()) {    if (log.isInfoEnabled())     log.info("Read-only view");    tm=null;    bnodes=null;    bnodes2=null;  } else {    if (log.isInfoEnabled())     log.info("Read-write view");    bnodes=new ConcurrentHashMap<String,BigdataBNode>();    bnodes2=new ConcurrentHashMap<IV,BigdataBNode>();    if (truthMaintenance) {      tm=new TruthMaintenance(database.getInferenceEngine());    } else {      tm=null;    }  }}  }
class C{  private void generateResult(String dn,int resultProtocol,int resultCode,String errMsg){  try {    m_encoder.beginSeq(48);    m_encoder.encodeInt(ldapMsg.getMsgId());    m_encoder.beginSeq(resultProtocol);    m_encoder.encodeInt(resultCode,10);    m_encoder.encodeString(dn,true);    m_encoder.encodeString((errMsg == null) ? "" : errMsg,true);    m_encoder.endSeq();    m_encoder.endSeq();  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }}  }
class C{  public static <T>Class<T> unwrap(Class<T> type){  if (type == null) {    throw new IllegalArgumentException();  }  Class<T> unwrapped=(Class<T>)WRAP_TO_PRIMITIVE.get(type);  return (unwrapped == null) ? type : unwrapped;}  }
class C{  public CompletableFuture<Void> leave(){  if (!started)   return CompletableFuture.completedFuture(null);  if (closeFuture == null) {synchronized (this) {      if (closeFuture == null) {        if (openFuture == null) {          closeFuture=cluster().leave().thenCompose(null).thenRun(null);        } else {          closeFuture=openFuture.thenCompose(null);        }      }    }  }  return closeFuture;}  }
class C{  public static boolean isFolderPatternUnique(String pattern){  if (((pattern.contains("$T") || pattern.contains("$E") || pattern.contains("$O")) && pattern.contains("$Y")) || pattern.contains("$I")) {    return true;  }  return false;}  }
class C{  public void testHyphenAtEnd() throws Exception {  String input="ecologi-\r\ncal devel-\r\n\r\nop compre-\u0009hensive-hands-on and ecology-";  TokenStream ts=new MockTokenizer(MockTokenizer.WHITESPACE,false);  ((Tokenizer)ts).setReader(new StringReader(input));  ts=new HyphenatedWordsFilter(ts);  assertTokenStreamContents(ts,new String[]{"ecological","develop","comprehensive-hands-on","and","ecology-"});}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  protected MethodDeclarator_Impl(){  super();}  }
class C{  @Override public Vertex decompileState(Vertex state,Network network){  if (state.getData() instanceof BinaryData) {    try {      return parseStateByteCode(state,(BinaryData)state.getData(),network);    } catch (    Exception exception) {      throw new SelfExecutionException(state,exception);    }  }  return state;}  }
class C{  public static boolean popParameterBoolean(){  return parametersBoolean.pop();}  }
class C{  @Override public void mouseReleased(MouseEvent e){}  }
class C{  public String toMultiLineString(){  return LineUtil.toMultiLineString(buffer);}  }
class C{  public Matrix4x3f shadow(float lightX,float lightY,float lightZ,float lightW,Matrix4x3f planeTransform){  return shadow(lightX,lightY,lightZ,lightW,planeTransform,this);}  }
class C{  private void resetNotes(){  if (errorInStatus1) {    if (editMode) {      statusText1.setText(editStatus1);    } else {      statusText1.setText(stdStatus1);    }    errorInStatus1=false;  }  resetNotes2();}  }
class C{  @Override public boolean hasNext() throws ArticleReaderException {  if (super.hasNext()) {    if (lastTaskCompleted) {      this.taskStartPosition=this.getBytePosition();      this.processingTimeRead=0;      this.readRevisionCounter=0;      this.lastTaskCompleted=false;    }    return true;  }  return false;}  }
class C{  public MqttException(int reasonCode){  super();  this.reasonCode=reasonCode;}  }
class C{  public boolean removeWatchedAddress(final Address address){  return removeWatchedAddresses(ImmutableList.of(address));}  }
class C{  public boolean invalidateVirtualVolumeCache(String virtualVolumeName) throws VPlexApiException {  s_logger.info("Request to invalidate virtual volume cache on VPLEX at {}",_baseURI);  return _virtualVolumeMgr.invalidateVirtualVolumeCache(virtualVolumeName);}  }
class C{  public static boolean isLessThanUnsigned(long n1,long n2){  return UnsignedLongs.compare(n1,n2) < 0;}  }
class C{  public static void printStringCodePoint(Appendable out,int codePoint) throws IOException {  printCodePoint(out,codePoint,EscapeMode.ION_STRING);}  }
class C{  public synchronized void start(){  if (log.isInfoEnabled()) {    log.info("Starting EsperIO DB Adapter for engine URI '" + engineURI + "'");  }  EPServiceProviderSPI engineSPI=(EPServiceProviderSPI)EPServiceProviderManager.getProvider(engineURI);  databaseConfigSvc=new DatabaseConfigServiceImpl(config.getJdbcConnections(),null,null);  executorFactory=new ExecutorServices(engineSPI,config.getExecutors());  for (  UpsertQuery upsert : config.getUpsertQueries()) {    RunnableUpsertFactory upsertFactory=getUpsertFactory(engineSPI,upsert,databaseConfigSvc);    try {      EsperIODBBaseSubscription subs=new EsperIODBBaseSubscription(upsertFactory,executorFactory.getConfiguredExecutor(upsert.getExecutorName()));      subs.seteventTypeName(upsert.getStream());      subs.setSubscriptionName(upsertFactory.getContext().getName());      subs.registerAdapter(engineSPI);    } catch (    Throwable t) {      log.error("Error starting Upsert query '" + upsertFactory.getContext().getName() + "'"+ t.getMessage(),t);    }  }  for (  DMLQuery dml : config.getDmlQueries()) {    RunnableDMLFactory dmlFactory=getDMLFactory(engineSPI,dml,databaseConfigSvc);    try {      EsperIODBBaseSubscription subs=new EsperIODBBaseSubscription(dmlFactory,executorFactory.getConfiguredExecutor(dml.getExecutorName()));      subs.seteventTypeName(dml.getStream());      subs.setSubscriptionName(dmlFactory.getContext().getName());      subs.registerAdapter(engineSPI);    } catch (    Throwable t) {      log.error("Error starting DML query '" + dmlFactory.getContext().getName() + "'"+ t.getMessage(),t);    }  }  if (log.isInfoEnabled()) {    log.info("Completed starting EsperIO DB Adapter for engine URI '" + engineURI + "'.");  }}  }
class C{  public void testConstrCharIntIntMathContext(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=12;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  BigDecimal result=new BigDecimal(value,offset,len,mc);  String res="3.805E-40";  int resScale=43;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());  try {    new BigDecimal(new char[]{},0,0,MathContext.DECIMAL32);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }  char[] biCA="bla: 12345678901234567890123456789012345.0E+10, and more bla".toCharArray();  char[] nbiCA="bla: -12345678901234567890123456789012345.E+10, and more bla".toCharArray();  BigDecimal bd;  mc=new MathContext(31,RoundingMode.UP);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678902E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678902E+44",bd.toString());  mc=new MathContext(28,RoundingMode.DOWN);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678E+44",bd.toString());  mc=new MathContext(33,RoundingMode.CEILING);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.23456789012345678901234567890124E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.23456789012345678901234567890123E+44",bd.toString());  mc=new MathContext(34,RoundingMode.FLOOR);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_EVEN);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal("-123456789012345678901234567890123350000000000".toCharArray(),0,46,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_UP);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678901235E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901235E+44",bd.toString());  mc=new MathContext(34,RoundingMode.HALF_DOWN);  bd=new BigDecimal(biCA,5,41,mc);  assertEquals("incorrect value","1.234567890123456789012345678901234E+44",bd.toString());  bd=new BigDecimal(nbiCA,5,41,mc);  assertEquals("incorrect value","-1.234567890123456789012345678901234E+44",bd.toString());  mc=new MathContext(34,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(biCA,5,41,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(nbiCA,5,41,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  protected Highlighter createHighlighter(){  return new RSyntaxTextAreaHighlighter();}  }
class C{  public static boolean isClassAvailable(final String className){  try {    forName(className,new IllegalArgumentException(String.format("Class (%1$s) is not available!",className)));    return true;  } catch (  IllegalArgumentException ignore) {    return false;  }}  }
class C{  public boolean foundClusteredVolume(){  return foundClusteredVolume;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public boolean isCommandStationConsistPossible(){  return true;}  }
class C{  public void readGenotype(final EvolutionState state,final DataInput dataInput) throws IOException {  int treelength=dataInput.readInt();  if (trees == null || treelength != trees.length)   state.output.fatal("Number of trees differ in GPIndividual when reading from readGenotype(EvolutionState, DataInput).");  for (int x=0; x < trees.length; x++)   trees[x].readTree(state,dataInput);}  }
class C{  public void log(){  if (mState == State.RUNNING) {    stop();  }  Diagnostic.developerLog(toString());}  }
class C{  public SQLTransientException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  public static void serializeString(String val,byte[] buffer,MutableInt offset){  byte[] stringBytes=val.getBytes();  int length=stringBytes.length;  serializeInt(length,buffer,offset);  for (int index=0; index < length; index++) {    buffer[offset.intValue() + index]=stringBytes[index];  }  offset.add(length);}  }
class C{  public final void deleteAll() throws AdeException {  logger.trace("-->entry");  deleteTables(getAllTablesInReverseDependencyOrder());  logger.trace("<--exit");}  }
class C{  BluetoothGattCharacteristic(BluetoothGattService service,UUID uuid,int instanceId,int properties,int permissions){  initCharacteristic(service,uuid,instanceId,properties,permissions);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.FIELD_ACCESSOR__DECLARED_NAME:    return getDeclaredName();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean hasThumbnail(){  return mData.hasCompressedThumbnail();}  }
class C{  @Override public InputStream openResource(String resource) throws IOException {  InputStream is;  String file=configSetZkPath + "/" + resource;  int maxTries=10;  Exception exception=null;  while (maxTries-- > 0) {    try {      if (zkController.pathExists(file)) {        Stat stat=new Stat();        byte[] bytes=zkController.getZkClient().getData(file,null,stat,true);        return new ZkByteArrayInputStream(bytes,stat);      } else {        break;      }    } catch (    KeeperException.SessionExpiredException e) {      exception=e;      if (!zkController.getCoreContainer().isShutDown()) {        try {          Thread.sleep(1000);          log.debug("Sleeping for 1s before retrying fetching resource=" + resource);        } catch (        InterruptedException ie) {          Thread.currentThread().interrupt();          throw new IOException("Could not load resource=" + resource,ie);        }      }    }catch (    InterruptedException e) {      Thread.currentThread().interrupt();      throw new IOException("Error opening " + file,e);    }catch (    KeeperException e) {      throw new IOException("Error opening " + file,e);    }  }  if (exception != null) {    throw new IOException("We re-tried 10 times but was still unable to fetch resource=" + resource + " from ZK",exception);  }  try {    is=classLoader.getResourceAsStream(resource.replace(File.separatorChar,'/'));  } catch (  Exception e) {    throw new IOException("Error opening " + resource,e);  }  if (is == null) {    throw new SolrResourceNotFoundException("Can't find resource '" + resource + "' in classpath or '"+ configSetZkPath+ "', cwd="+ System.getProperty("user.dir"));  }  return is;}  }
class C{  public java.lang.StringBuffer insert(int offset,java.lang.String str){  internal.insert(offset,str);  return this;}  }
class C{  public void removeAllUpdateListeners(){  if (updateListeners == null) {    return;  }  updateListeners.clear();  updateListeners=null;}  }
class C{  protected void _sendAdditionalNotification(NotificationContext context,NotificationStatus status){  requireArgument(context != null,"Notification context cannot be null.");  super.sendAdditionalNotification(context);  Notification notification=null;  Trigger trigger=null;  for (  Notification tempNotification : context.getAlert().getNotifications()) {    if (tempNotification.getName().equalsIgnoreCase(context.getNotification().getName())) {      notification=tempNotification;      break;    }  }  requireArgument(notification != null,"Notification in notification context cannot be null.");  for (  Trigger tempTrigger : context.getAlert().getTriggers()) {    if (tempTrigger.getName().equalsIgnoreCase(context.getTrigger().getName())) {      trigger=tempTrigger;      break;    }  }  requireArgument(trigger != null,"Trigger in notification context cannot be null.");  String body=getGOCMessageBody(notification,trigger,context);  Severity sev=status == NotificationStatus.CLEARED ? Severity.OK : Severity.ERROR;  sendMessage(sev,context.getNotification().getName(),context.getAlert().getName(),context.getTrigger().getName(),body,context.getTriggerFiredTime());}  }
class C{  public DIDLContent parse(String xml) throws Exception {  if (xml == null || xml.length() == 0) {    throw new RuntimeException("Null or empty XML");  }  DIDLContent content=new DIDLContent();  createRootHandler(content,this);  log.fine("Parsing DIDL XML content");  parse(new InputSource(new StringReader(xml)));  return content;}  }
class C{  public PowerLawDistribution(final double gamma){  this(gamma,0.0);}  }
class C{  public static void observeTest(){  FRCNetworkCommunicationsLibrary.FRCNetworkCommunicationObserveUserProgramTest();}  }
class C{  @Override public Object put(String key,Object value){  return super.put((String)key,value);}  }
class C{  public void clear(){  if (mOriginalValues != null) {synchronized (mLock) {      mOriginalValues.clear();    }  } else {    mObjects.clear();  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public static boolean lenientOn(){  return "lenient".equals(UtilProperties.getPropertyValue("minilang.properties","validation.level"));}  }
class C{  @Override public void valueChanged(TreeSelectionEvent e){  if (preventEvent) {    return;  }  if (mainFrame != null) {    List<Operator> selectedOperators=getSelectedOperators();    if (selectedOperators != null && !selectedOperators.isEmpty()) {      mainFrame.selectOperators(selectedOperators);    }  }}  }
class C{  public POServiceReview(String title,int rating,String comment,String userId,long productKey){  super();  this.title=title;  this.rating=rating;  this.comment=comment;  this.userId=userId;  this.productKey=productKey;}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  protected byte[] readSecurityBuffer(final int position) throws AuthenticationException {  return ZapNTLMEngineImpl.readSecurityBuffer(messageContents,position);}  }
class C{  public void enter(){  ((Depth)get()).inc();}  }
class C{  @Override public boolean performClick(){  if (!super.performClick() && mIME != null) {    mIME.onExtractedTextClicked();    return true;  }  return false;}  }
class C{  public static <T extends Operator>Collection<Partition<T>> repartitionInputOperator(Collection<Partition<T>> partitions){  List<Partition<T>> newPartitions=new ArrayList<Partition<T>>();  List<Partition<T>> lowLoadPartitions=new ArrayList<Partition<T>>();  for (  Partition<T> p : partitions) {    int load=p.getLoad();    if (load < 0) {      if (!lowLoadPartitions.isEmpty()) {        newPartitions.add(lowLoadPartitions.remove(0));      } else {        lowLoadPartitions.add(p);      }    } else     if (load > 0) {      newPartitions.add(new DefaultPartition<T>(p.getPartitionedInstance()));      newPartitions.add(new DefaultPartition<T>(p.getPartitionedInstance()));    } else {      newPartitions.add(p);    }  }  newPartitions.addAll(lowLoadPartitions);  return newPartitions;}  }
class C{  public static boolean isBoolean(String value){  return value != null && ("false".equals(value.toLowerCase()) || "true".equals(value.toLowerCase()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:24.646 -0500",hash_original_method="34395E14B37CB09607BC1384911068DF",hash_generated_method="75DD381234BE8FCEDB5CCD1EFCAA7952") public RDN(ASN1ObjectIdentifier oid,ASN1Encodable value){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(oid);  v.add(value);  this.values=new DERSet(new DERSequence(v));}  }
class C{  private String scanTagDirectiveHandle(Mark startMark){  String value=scanTagHandle("directive",startMark);  char ch=reader.peek();  if (ch != ' ') {    throw new ScannerException("while scanning a directive",startMark,"expected ' ', but found " + reader.peek() + "("+ ch+ ")",reader.getMark());  }  return value;}  }
class C{  public void installUI(JComponent c){  list=(JList)c;  layoutOrientation=list.getLayoutOrientation();  rendererPane=new CellRendererPane();  list.add(rendererPane);  columnCount=1;  updateLayoutStateNeeded=modelChanged;  isLeftToRight=list.getComponentOrientation().isLeftToRight();  installDefaults();  installListeners();  installKeyboardActions();}  }
class C{  public void removeExtraField(ZipShort type){  boolean done=false;  for (int i=0; !done && i < extraFields.size(); i++) {    if (extraFields.elementAt(i).getHeaderId().equals(type)) {      extraFields.removeElementAt(i);      done=true;    }  }  if (!done) {    throw new java.util.NoSuchElementException();  }  setExtra();}  }
class C{  public boolean isComplete(){  Object oo=get_Value(COLUMNNAME_IsComplete);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private List<Constraint<?>> reduce(List<Constraint<?>> constraints){  Constraint<?> target=constraints.get(constraints.size() - 1);  Set<Variable<?>> dependencies=getVariables(target);  LinkedList<Constraint<?>> coi=new LinkedList<Constraint<?>>();  if (dependencies.size() <= 0)   return coi;  coi.add(target);  for (int i=constraints.size() - 2; i >= 0; i--) {    Constraint<?> constraint=constraints.get(i);    Set<Variable<?>> variables=getVariables(constraint);    for (    Variable<?> var : dependencies) {      if (variables.contains(var)) {        dependencies.addAll(variables);        coi.addFirst(constraint);        break;      }    }  }  return coi;}  }
class C{  public static void playSoundWithUserSettings(Context context,int rawSoundId,int vibrateMillies){  AudioManager am=(AudioManager)context.getSystemService(Context.AUDIO_SERVICE);switch (am.getRingerMode()) {case AudioManager.RINGER_MODE_SILENT:    break;case AudioManager.RINGER_MODE_VIBRATE:  vibrate(context,vibrateMillies);break;case AudioManager.RINGER_MODE_NORMAL:playRawSound(rawSoundId,context);vibrate(context,vibrateMillies);break;}}  }
class C{  public static void inhibitForcedDisconnectLogging(boolean b){  GMSMembershipManager.inhibitForcedDisconnectLogging(b);}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  static String encodeHighLevel(String msg,Compaction compaction) throws WriterException {  byte[] bytes=null;  StringBuilder sb=new StringBuilder(msg.length());  int len=msg.length();  int p=0;  int textSubMode=SUBMODE_ALPHA;  if (compaction == Compaction.TEXT) {    encodeText(msg,p,len,sb,textSubMode);  } else   if (compaction == Compaction.BYTE) {    bytes=getBytesForMessage(msg);    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);  } else   if (compaction == Compaction.NUMERIC) {    sb.append((char)LATCH_TO_NUMERIC);    encodeNumeric(msg,p,len,sb);  } else {    int encodingMode=TEXT_COMPACTION;    while (p < len) {      int n=determineConsecutiveDigitCount(msg,p);      if (n >= 13) {        sb.append((char)LATCH_TO_NUMERIC);        encodingMode=NUMERIC_COMPACTION;        textSubMode=SUBMODE_ALPHA;        encodeNumeric(msg,p,n,sb);        p+=n;      } else {        int t=determineConsecutiveTextCount(msg,p);        if (t >= 5 || n == len) {          if (encodingMode != TEXT_COMPACTION) {            sb.append((char)LATCH_TO_TEXT);            encodingMode=TEXT_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          textSubMode=encodeText(msg,p,t,sb,textSubMode);          p+=t;        } else {          if (bytes == null) {            bytes=getBytesForMessage(msg);          }          int b=determineConsecutiveBinaryCount(msg,bytes,p);          if (b == 0) {            b=1;          }          if (b == 1 && encodingMode == TEXT_COMPACTION) {            encodeBinary(bytes,p,1,TEXT_COMPACTION,sb);          } else {            encodeBinary(bytes,p,b,encodingMode,sb);            encodingMode=BYTE_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          p+=b;        }      }    }  }  return sb.toString();}  }
class C{  @Override public void stop(){  m_receivedStopNotification=true;  if (m_listenee instanceof BeanCommon) {    ((BeanCommon)m_listenee).stop();  }}  }
class C{  public void valueChange(ValueChangeEvent evt){  WSearchEditor source=(WSearchEditor)evt.getSource();  Object value=evt.getNewValue();  log.info("Value=" + value);  if (value == null) {    return;  }  if (source.equals(fUser)) {    if (value == null)     fTo.setText("");    if (value instanceof Integer) {      int AD_User_ID=((Integer)value).intValue();      m_user=MUser.get(Env.getCtx(),AD_User_ID);      fTo.setValue(m_user.getEMail());    }  } else {    if (value == null)     fCc.setText("");    if (value instanceof Integer) {      int AD_User_ID=((Integer)value).intValue();      m_ccuser=MUser.get(Env.getCtx(),AD_User_ID);      fCc.setValue(m_ccuser.getEMail());    }  }  return;}  }
class C{  public boolean isGreaterThanOrEqualTo(Decimal decimal){  assertDefined();  BigDecimal thisValue=notNull(this);  BigDecimal parameter=notNull(decimal);  return (thisValue.compareTo(parameter) >= 0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.143 -0400",hash_original_method="9FB5BB21D34461FAB25EC78F8089DE3A",hash_generated_method="FCFF3DCBB5A560D1D977DF31C3E3BDD7") public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  return encode(pString,getDefaultCharset());}  }
class C{  public LongArraySpliterator(long[] array,int origin,int fence,int additionalCharacteristics){  this.array=array;  this.index=origin;  this.fence=fence;  this.characteristics=additionalCharacteristics | Spliterator.SIZED | Spliterator.SUBSIZED;}  }
class C{  public boolean canInsertData(){  return iseditable && m_bd.canInsertData();}  }
class C{  @Benchmark public void put() throws Exception {  int key=ThreadLocalRandom.current().nextInt(CNT);  cache.put(key,new IntValue(key));}  }
class C{  public void reply(CanReply f){  if (addrActive.match(f)) {    setOwnState(Sensor.ACTIVE);    if (addrInactive == null) {      setTimeout();    }  } else   if (addrInactive != null && addrInactive.match(f)) {    setOwnState(Sensor.INACTIVE);  }}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static CeylonConfig createFromLocalDir(File localDir){  return CeylonConfigFinder.loadDefaultConfig(localDir);}  }
class C{  public static final void shuffle(long[] a,int start,int len,Random r){  for (int i=start + len; i > 1; --i) {    long t=a[i];    int j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  private void checkIfUserExists(String userId,Tenant tenant) throws NonUniqueBusinessKeyException {  PlatformUser dbUser=loadUser(userId,tenant);  if (dbUser != null) {    throw new NonUniqueBusinessKeyException(ClassEnum.USER,userId);  }}  }
class C{  public EditCustomCategoryDialog(Frame owner,String frameTitle,JList catList,boolean isAdd){  super(owner,frameTitle,true);  try {    setIconImage(TDA.createImageIcon("Filters.png").getImage());  } catch (  NoSuchMethodError nsme) {  }  this.isAdd=isAdd;  this.catList=catList;  frame=owner;  getContentPane().setLayout(new BorderLayout());  initPanel();}  }
class C{  public void registerWithZookeeper(final CuratorFramework zkClient,String serviceName,String registrationIpAddress,int port,long retryIntervalMilliSeconds){  InetSocketAddress registrationSocketAddress=new InetSocketAddress(registrationIpAddress,port);  final ServiceNode serviceNode=getSimpleServiceNode(zkClient,serviceName,registrationSocketAddress);  ServiceNodeUtils.joinService(serviceNode,retryIntervalMilliSeconds);}  }
class C{  private void handleDelegateExecution(final HttpServerRequest request){  String delegateName=getDelegateName(request.uri());  Delegate delegate=delegateMap.get(delegateName);  delegate.handle(request);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:31.618 -0500",hash_original_method="4C16D1761C9EE9C5267A2DEA3E7C4510",hash_generated_method="85B82615DADE129198492E31080E9E81") @Override public int read() throws IOException {  int x=in.read();  if (x != -1) {    check.update(x);  }  return x;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public Property year(){  return new Property(this,getChronology().year());}  }
class C{  public AbstractInsnNode[] toArray(){  int i=0;  AbstractInsnNode elem=first;  AbstractInsnNode[] insns=new AbstractInsnNode[size];  while (elem != null) {    insns[i]=elem;    elem.index=i++;    elem=elem.next;  }  return insns;}  }
class C{  @Override public void onBackPressed(){  if (mCurrent != null) {    Fragment fragment=mManager.findFragmentByTag(ListContent.ID_SETTINGS);    Cursor c=DatabaseController.retrieveDeviceList();    if ((fragment != null) || (c.getCount() > 1)) {      closePrintView();      if (mManager.popBackStackImmediate()) {        mDrawerToggle.setDrawerIndicatorEnabled(true);        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);        if (mCurrent == mDevicesFragment)         refreshDevicesCount();      } else       super.onBackPressed();    } else     super.onBackPressed();  } else {    super.onBackPressed();  }}  }
class C{  public Optional<Duration> size(){  return size;}  }
class C{  static IntersectionImpl initNewHeapInstance(long seed){  IntersectionImpl impl=new IntersectionImpl(computeSeedHash(seed));  impl.empty_=false;  impl.curCount_=-1;  impl.thetaLong_=Long.MAX_VALUE;  impl.lgArrLongs_=0;  impl.hashTable_=null;  impl.mem_=null;  return impl;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("SearchResponse ( ").append("ids = ").append(Arrays.toString(this.ids)).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public boolean visit(ImportDeclaration node){  return true;}  }
class C{  private void skipCurrentTag(XmlPullParser parser) throws XmlPullParserException, IOException {  int outerDepth=parser.getDepth();  int type;  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {  }}  }
class C{  public static <T>byte[] serialize(TypeSerializer<T> serializer) throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ObjectOutput out=null;  try {    out=new ObjectOutputStream(bos);    out.writeObject(serializer);    return bos.toByteArray();  }  finally {    try {      if (out != null) {        out.close();      }    } catch (    IOException ex) {    }    try {      bos.close();    } catch (    IOException ex) {    }  }}  }
class C{  public void startElement(Attributes atts) throws Exception {  super.startElement(atts);}  }
class C{  public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,Chronology chronology){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0,chronology);}  }
class C{  @Override public double min(){  QL.require(samples() > 0,EMPTY_SAMPLE_SET);  return min_;}  }
class C{  public static boolean checkIdenticalPaths(File f1,File f2) throws IOException {  return f1.getCanonicalPath().equals(f2.getCanonicalPath());}  }
class C{  public File loggingDir(){  return dataFile(LOGGING_DIR);}  }
class C{  public boolean sharedBulkCapacity(){  return urlParser.getOptions().useBatchMultiSend;}  }
class C{  private void saveProfileStateCB(){  savePasswordBox.setEnabled(saveLoginBox.isSelected());}  }
class C{  public static int[] toIntArray(Long[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].intValue();  }  return result;}  }
class C{  protected HttpURLConnection post(String url,String contentType,String body) throws IOException {  if (url == null || contentType == null || body == null) {    throw new IllegalArgumentException("arguments cannot be null");  }  if (!url.startsWith("https://")) {    logger.warning("URL does not use https: " + url);  }  logger.fine("Sending POST to " + url);  logger.finest("POST body: " + body);  byte[] bytes=body.getBytes(UTF8);  HttpURLConnection conn=getConnection(url);  conn.setDoOutput(true);  conn.setUseCaches(false);  conn.setFixedLengthStreamingMode(bytes.length);  conn.setRequestMethod("POST");  conn.setRequestProperty("Content-Type",contentType);  conn.setRequestProperty("Authorization","key=" + key);  OutputStream out=conn.getOutputStream();  try {    out.write(bytes);  }  finally {    close(out);  }  return conn;}  }
class C{  public int read(int offset){  return super.read(offset);}  }
class C{  private void writeOutput(int iteration){  String filename=String.format("output/concaveHull/Threshold_%.0f_triangles.csv",this.threshold);  BufferedWriter bw=IOUtils.getAppendingBufferedWriter(filename);  try {    for (    Edge e : this.edges.values()) {      bw.write(String.format("%d,",iteration));      bw.write(String.format("%.2f,",e.getOriginNode().getCoordinate().x));      bw.write(String.format("%.2f,",e.getOriginNode().getCoordinate().y));      bw.write(String.format("%.2f,",e.getDestinationNode().getCoordinate().x));      bw.write(String.format("%.2f\n",e.getDestinationNode().getCoordinate().y));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + filename);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + filename);    }  }  filename=String.format("output/concaveHull/Threshold_%.0f_border.csv",this.threshold);  bw=IOUtils.getAppendingBufferedWriter(filename);  try {    for (    Edge e : this.consideredEdges.values()) {      bw.write(String.format("%d,",iteration));      bw.write(String.format("%.2f,",e.getOriginNode().getCoordinate().x));      bw.write(String.format("%.2f,",e.getOriginNode().getCoordinate().y));      bw.write(String.format("%.2f,",e.getDestinationNode().getCoordinate().x));      bw.write(String.format("%.2f\n",e.getDestinationNode().getCoordinate().y));    }    for (    Edge e : this.ignoredEdges.values()) {      bw.write(String.format("%d,",iteration));      bw.write(String.format("%.2f,",e.getOriginNode().getCoordinate().x));      bw.write(String.format("%.2f,",e.getOriginNode().getCoordinate().y));      bw.write(String.format("%.2f,",e.getDestinationNode().getCoordinate().x));      bw.write(String.format("%.2f\n",e.getDestinationNode().getCoordinate().y));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + filename);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + filename);    }  }}  }
class C{  LayerDrawable(@NonNull Drawable[] layers,@Nullable LayerState state){  this(state,null);  if (layers == null) {    throw new IllegalArgumentException("layers must be non-null");  }  final int length=layers.length;  final ChildDrawable[] r=new ChildDrawable[length];  for (int i=0; i < length; i++) {    r[i]=new ChildDrawable();    r[i].mDrawable=layers[i];    layers[i].setCallback(this);    mLayerState.mChildrenChangingConfigurations|=layers[i].getChangingConfigurations();  }  mLayerState.mNum=length;  mLayerState.mChildren=r;  ensurePadding();  refreshPadding();}  }
class C{  public V put(int key,V value){  if (value == null)   throw new NullPointerException();  int hash=hash(key);  return segmentFor(hash).put(key,hash,value,false);}  }
class C{  public LinePlot(DiagnosticTool frame,String metric){  super(frame,metric);  setLayout(new BorderLayout());}  }
class C{  static Class lookUpFactoryClass(String factoryId) throws ConfigurationError {  return lookUpFactoryClass(factoryId,null,null);}  }
class C{  public void testFillDataPoint_speedImperial(){  chartFragment.setMetricUnits(false);  MyTracksLocation myTracksLocation1=TrackStubUtils.createMyTracksLocation();  myTracksLocation1.setSpeed(100.0f);  double[] point=fillDataPointTestHelper(myTracksLocation1);  assertEquals(0.0,point[ChartView.SPEED_SERIES + 1]);  MyTracksLocation myTracksLocation2=TrackStubUtils.createMyTracksLocation();  myTracksLocation2.setTime(myTracksLocation2.getTime() + 222);  myTracksLocation2.setSpeed(102);  point=fillDataPointTestHelper(myTracksLocation2);  assertEquals(102.0 * UnitConversions.MS_TO_KMH * UnitConversions.KM_TO_MI,point[ChartView.SPEED_SERIES + 1]);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processRequest(request,response);}  }
class C{  private ApplicationComponent initializeDependencyInjector(){  if (applicationComponent == null) {    applicationComponent=DaggerApplicationComponent.builder().applicationModule(new ApplicationModule(this)).build();  }  return applicationComponent;}  }
class C{  public void renewServiceCollector(DNSRecord record){  ServiceInfo info=record.getServiceInfo();  if (_serviceCollectors.containsKey(info.getType().toLowerCase())) {    this.startServiceResolver(info.getType());  }}  }
class C{  public FeatureListTable featureList(){  if (featureListTable.get() == null) {    featureListTable.compareAndSet(null,gsub.createFeatureList());  }  return featureListTable.get();}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public static void showConfirmSheet(Component parentComponent,Object message,int optionType,int messageType,@Nullable Icon icon,SheetListener listener){  showOptionSheet(parentComponent,message,optionType,messageType,icon,null,null,listener);}  }
class C{  protected CCMenuItemSprite(CCNode normalSprite,CCNode selectedSprite,CCNode disabledSprite,CCNode target,String selector){  super(target,selector);  setNormalImage(normalSprite);  setSelectedImage(selectedSprite);  setDisabledImage(disabledSprite);  CGSize size=normalImage_.getContentSize();  setContentSize(size);}  }
class C{  public boolean interiorIntersects(R1Interval y){  return y.lo() < hi() && lo() < y.hi() && lo() < hi() && y.lo() <= y.hi();}  }
class C{  public boolean isSpecified(String uri,String localName){  int index=getIndex(uri,localName);  if (index < 0)   throw new IllegalArgumentException("No such attribute: local=" + localName + ", namespace="+ uri);  return specified[index];}  }
class C{  public final AppWidgetHostView createView(Context context,int appWidgetId,AppWidgetProviderInfo appWidget){  final int userId=mContext.getUserId();  AppWidgetHostView view=onCreateView(mContext,appWidgetId,appWidget);  view.setUserId(userId);  view.setOnClickHandler(mOnClickHandler);  view.setAppWidget(appWidgetId,appWidget);synchronized (mViews) {    mViews.put(appWidgetId,view);  }  RemoteViews views;  try {    views=sService.getAppWidgetViews(appWidgetId,userId);    if (views != null) {      views.setUser(new UserHandle(mContext.getUserId()));    }  } catch (  RemoteException e) {    throw new RuntimeException("system server dead?",e);  }  view.updateAppWidget(views);  return view;}  }
class C{  public boolean authenticateUser(String username,String password,String uri) throws DataAccessException {  if (null == username || null == password) {    return false;  }  UserInfo user=getUserInfo(username);  if (user == null) {    return false;  }  String hashedSaltedPassword=Utilities.getSaltedPassword(username,uri,password);  return hashedSaltedPassword.equals(user.getHashedPassword());}  }
class C{  private void computeFacetDistance(){  GeometryLocation[] locGeom=new GeometryLocation[2];  List lines0=LinearComponentExtracter.getLines(geom[0]);  List lines1=LinearComponentExtracter.getLines(geom[1]);  List pts0=PointExtracter.getPoints(geom[0]);  List pts1=PointExtracter.getPoints(geom[1]);  computeMinDistanceLines(lines0,lines1,locGeom);  updateMinDistance(locGeom,false);  if (minDistance <= terminateDistance)   return;  locGeom[0]=null;  locGeom[1]=null;  computeMinDistanceLinesPoints(lines0,pts1,locGeom);  updateMinDistance(locGeom,false);  if (minDistance <= terminateDistance)   return;  locGeom[0]=null;  locGeom[1]=null;  computeMinDistanceLinesPoints(lines1,pts0,locGeom);  updateMinDistance(locGeom,true);  if (minDistance <= terminateDistance)   return;  locGeom[0]=null;  locGeom[1]=null;  computeMinDistancePoints(pts0,pts1,locGeom);  updateMinDistance(locGeom,false);}  }
class C{  protected final boolean isEOF(){  return ndx >= total;}  }
class C{  private void validateCanonicalizationMethod(XMLSignature xmlSignature) throws XMLSignatureException {  assert xmlSignature != null;  if (!CanonicalizationMethod.EXCLUSIVE.equals(xmlSignature.getSignedInfo().getCanonicalizationMethod().getAlgorithm())) {    throw new XMLSignatureException(String.format("Canonicalization algorithm '%s' is not supported.",xmlSignature.getSignedInfo().getCanonicalizationMethod().getAlgorithm()));  }}  }
class C{  @Override public OSProcessHandler createProcessHandler(String workingDirectory,Map<String,String> envVariables) throws ExecutionException {  startupProcessHandler.destroyProcess();  ProcessBuilder dummyProcess=new ProcessBuilder("true");  try {    return new OSProcessHandler(dummyProcess.start(),GctBundle.getString("appengine.run.shutdownscript"));  } catch (  IOException ioe) {    throw new ExecutionException(ioe);  }}  }
class C{  boolean isInvalidationRequired(){  return invalidationRequired;}  }
class C{  public ObjectFactory(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:02.327 -0500",hash_original_method="A41D9C3F2D62A3EB42A9C94631C7A3C6",hash_generated_method="133E4BC88C6EBF706004D4C070670023") public boolean isCostAllowed(){  return mCostAllowed;}  }
class C{  protected void insert(int index,T linkable){  T newLink=linkable;  if (_size == 0) {    _head=_tail=newLink;  } else   if (index == 0) {    newLink.setNext(_head);    _head.setPrevious(newLink);    _head=newLink;  } else   if (index == _size) {    _tail.setNext(newLink);    newLink.setPrevious(_tail);    _tail=newLink;  } else {    TLinkable prior;    if (index > (_size >> 1)) {      int pos=_size - 1;      for (prior=_tail; pos > index; pos--) {        prior=prior.getPrevious();      }    } else {      int pos=0;      for (prior=_head; pos < index; pos++) {        prior=prior.getNext();      }    }    TLinkable post=prior.getNext();    newLink.setNext(post);    newLink.setPrevious(prior);    post.setPrevious(newLink);    prior.setNext(newLink);  }  _size++;}  }
class C{  public static <T>T create(Properties ctx,int id,Class<T> cl,String trxName){  if (id < 0)   return null;  String tableName=getTableName(cl);  return create(ctx,tableName,id,cl,trxName);}  }
class C{  public static void presignedPutObject_test1() throws Exception {  println("Test: presignedPutObject(String bucketName, String objectName)");  String fileName=createFile(3 * MB);  String urlString=client.presignedPutObject(bucketName,fileName);  Request.Builder requestBuilder=new Request.Builder();  Request request=requestBuilder.url(HttpUrl.parse(urlString)).method("PUT",RequestBody.create(null,Files.readAllBytes(Paths.get(fileName)))).build();  OkHttpClient transport=new OkHttpClient();  Response response=transport.newCall(request).execute();  if (response != null) {    if (!response.isSuccessful()) {      String errorXml="";      Scanner scanner=new java.util.Scanner(response.body().charStream()).useDelimiter("\\A");      if (scanner.hasNext()) {        errorXml=scanner.next();      }      println("FAILED",response,errorXml);    }  } else {    println("NO RESPONSE");  }  Files.delete(Paths.get(fileName));  client.removeObject(bucketName,fileName);}  }
class C{  public void clean(){  Iterator<Group> itr=groups.iterator();  while (itr.hasNext()) {    Group group=itr.next();    group.clean();    if (group.isEmpty()) {      itr.remove();    }  }}  }
class C{  public final static String extractTargetNameFromType2Message(byte[] msg,Integer msgFlags) throws UnsupportedEncodingException {  byte[] targetName=readSecurityBufferTarget(msg,12);  int flags=msgFlags == null ? extractFlagsFromType2Message(msg) : msgFlags;  if (ByteUtilities.isFlagSet(flags,FLAG_NEGOTIATE_UNICODE)) {    return new String(targetName,"UTF-16LE");  }  return new String(targetName,"ASCII");}  }
class C{  public static void addRefreshListener(RefreshListener listener){  if (!REFRESH_LIST.contains(listener))   REFRESH_LIST.add(listener);}  }
class C{  public void deleteFingerprint(){  if (this.fingerprintFileIdx != null) {    FileUtils.deletedelete(this.fingerprintFileIdx);    this.fingerprintFileIdx=null;  }  if (this.fingerprintFileGap != null) {    FileUtils.deletedelete(this.fingerprintFileGap);    this.fingerprintFileGap=null;  }}  }
class C{  public static boolean isCase(Number caseValue,Number switchValue){  return NumberMath.compareTo(caseValue,switchValue) == 0;}  }
class C{  private void qtreeBitins64(byte[] a,int lnx,int lny,LongArrayPointer b,int n,int bit){  int i, j, s00;  long planeVal=1L << bit;  ByteBuffer k=ByteBuffer.wrap(a);  for (i=0; i < lnx - 1; i+=2) {    s00=n * i;    for (j=0; j < lny - 1; j+=2) {      byte value=k.get();      if ((value & BIT_ONE) != ZERO) {        b.bitOr(s00 + n + 1,planeVal);      }      if ((value & BIT_TWO) != ZERO) {        b.bitOr(s00 + n,planeVal);      }      if ((value & BIT_THREE) != ZERO) {        b.bitOr(s00 + 1,planeVal);      }      if ((value & BIT_FOUR) != ZERO) {        b.bitOr(s00,planeVal);      }      s00+=2;    }    if (j < lny) {      byte value=k.get();      if ((value & BIT_TWO) != ZERO) {        b.bitOr(s00 + n,planeVal);      }      if ((value & BIT_FOUR) != ZERO) {        b.bitOr(s00,planeVal);      }    }  }  if (i < lnx) {    s00=n * i;    for (j=0; j < lny - 1; j+=2) {      byte value=k.get();      if ((value & BIT_THREE) != ZERO) {        b.bitOr(s00 + 1,planeVal);      }      if ((value & BIT_FOUR) != ZERO) {        b.bitOr(s00,planeVal);      }      s00+=2;    }    if (j < lny) {      if ((k.get() & BIT_FOUR) != ZERO) {        b.bitOr(s00,planeVal);      }    }  }}  }
class C{  public static String encode(final short s){  return "s" + Short.toString(s) + "|";}  }
class C{  public static boolean isSubscript(AttributeSet a){  Boolean subscript=(Boolean)a.getAttribute(Subscript);  if (subscript != null) {    return subscript.booleanValue();  }  return false;}  }
class C{  public RawPublicKeyIdentity(PublicKey key){  if (key == null) {    throw new NullPointerException("Public key must not be null");  } else {    this.publicKey=key;    createNamedInformationUri(publicKey.getEncoded());  }}  }
class C{  protected void createBodyContent(IManagedForm managedForm){  final int sectionFlags=Section.TITLE_BAR | Section.DESCRIPTION | Section.TREE_NODE| Section.EXPANDED| SWT.WRAP;  final int textFieldFlags=SWT.MULTI | SWT.V_SCROLL | SWT.READ_ONLY| SWT.FULL_SELECTION;  final int expressionFieldFlags=textFieldFlags | SWT.WRAP;  FormToolkit toolkit=managedForm.getToolkit();  Composite body=managedForm.getForm().getBody();  TableWrapLayout layout=new TableWrapLayout();  layout.numColumns=1;  body.setLayout(layout);  TableWrapData twd;  Section section;  GridData gd;  section=FormHelper.createSectionComposite(body,"General","",toolkit,sectionFlags & ~Section.DESCRIPTION,getExpansionListener());  twd=new TableWrapData(TableWrapData.FILL);  twd.colspan=1;  section.setLayoutData(twd);  Composite generalArea=(Composite)section.getClient();  generalArea.setLayout(new GridLayout());  Composite statusComposite=toolkit.createComposite(generalArea);  statusComposite.setLayout(new GridLayout(2,false));  this.startTimestampText=FormHelper.createTextLeft("Start time:",statusComposite,toolkit);  this.startTimestampText.setEditable(false);  this.finishTimestampText=FormHelper.createTextLeft("End time:",statusComposite,toolkit);  this.finishTimestampText.setEditable(false);  this.lastCheckpointTimeText=FormHelper.createTextLeft("Last checkpoint time:",statusComposite,toolkit);  this.lastCheckpointTimeText.setEditable(false);  this.currentStatusText=FormHelper.createTextLeft("Current status:",statusComposite,toolkit);  this.currentStatusText.setEditable(false);  this.currentStatusText.setText(TLCModelLaunchDataProvider.NOT_RUNNING);  this.errorStatusHyperLink=FormHelper.createHyperlinkLeft("Errors detected:",statusComposite,toolkit);  this.fingerprintCollisionProbabilityText=FormHelper.createTextLeft("Fingerprint collision probability:",statusComposite,toolkit);  this.fingerprintCollisionProbabilityText.setEditable(false);  this.fingerprintCollisionProbabilityText.setText("");  section=FormHelper.createSectionComposite(body,"Statistics","",toolkit,(sectionFlags | Section.COMPACT) & ~Section.DESCRIPTION,getExpansionListener());  twd=new TableWrapData(TableWrapData.FILL);  twd.colspan=1;  section.setLayoutData(twd);  Composite statArea=(Composite)section.getClient();  RowLayout rowLayout=new RowLayout(SWT.HORIZONTAL);  statArea.setLayout(rowLayout);  createAndSetupStateSpace("State space progress (click column header for graph)",statArea,toolkit);  createAndSetupCoverage("Coverage at",statArea,toolkit);  section=FormHelper.createSectionComposite(body,"Evaluate Constant Expression","",toolkit,sectionFlags & ~Section.DESCRIPTION,getExpansionListener());  Composite resultArea=(Composite)section.getClient();  GridLayout gLayout=new GridLayout(2,false);  gLayout.marginHeight=0;  resultArea.setLayout(gLayout);  Composite expressionComposite=toolkit.createComposite(resultArea);  expressionComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,false,false));  gLayout=new GridLayout(1,false);  gLayout.marginHeight=0;  gLayout.marginBottom=5;  expressionComposite.setLayout(gLayout);  toolkit.createLabel(expressionComposite,"Expression: ");  expressionEvalInput=FormHelper.createFormsSourceViewer(toolkit,expressionComposite,expressionFieldFlags);  Composite valueComposite=toolkit.createComposite(resultArea);  valueComposite.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  valueComposite.setLayout(gLayout);  toolkit.createLabel(valueComposite,"Value: ");  expressionEvalResult=FormHelper.createFormsOutputViewer(toolkit,valueComposite,expressionFieldFlags);  gd=new GridData(SWT.FILL,SWT.FILL,true,false);  gd.minimumWidth=500;  gd.heightHint=80;  expressionEvalResult.getTextWidget().setLayoutData(gd);  gd=new GridData(SWT.FILL,SWT.FILL,false,false);  gd.widthHint=500;  gd.heightHint=80;  expressionEvalInput.getTextWidget().setLayoutData(gd);  expressionEvalResult.getTextWidget().setFont(JFaceResources.getTextFont());  expressionEvalInput.getTextWidget().setFont(JFaceResources.getTextFont());  toolkit.paintBordersFor(expressionComposite);  toolkit.paintBordersFor(valueComposite);  ValidateableSectionPart calculatorSectionPart=new ValidateableSectionPart(section,this,SEC_EXPRESSION);  managedForm.addPart(calculatorSectionPart);  expressionEvalInput.getTextWidget().addModifyListener(new DirtyMarkingListener(calculatorSectionPart,false));  getDataBindingManager().bindAttribute(Model.MODEL_EXPRESSION_EVAL,expressionEvalInput,calculatorSectionPart);  getDataBindingManager().bindSection(calculatorSectionPart,SEC_EXPRESSION,getId());  section=FormHelper.createSectionComposite(body,"User Output","TLC output generated by evaluating Print and PrintT expressions.",toolkit,sectionFlags,getExpansionListener());  Composite outputArea=(Composite)section.getClient();  outputArea.setLayout(new GridLayout());  userOutput=FormHelper.createFormsOutputViewer(toolkit,outputArea,textFieldFlags);  gd=new GridData(SWT.FILL,SWT.LEFT,true,false);  gd.heightHint=300;  gd.minimumWidth=300;  userOutput.getControl().setLayoutData(gd);  userOutput.getControl().setFont(JFaceResources.getFont(ITLCPreferenceConstants.I_TLC_OUTPUT_FONT));  section=FormHelper.createSectionComposite(body,"Progress Output","",toolkit,sectionFlags & ~Section.DESCRIPTION,getExpansionListener());  section.setExpanded(false);  Composite progressArea=(Composite)section.getClient();  progressArea=(Composite)section.getClient();  progressArea.setLayout(new GridLayout());  progressOutput=FormHelper.createFormsOutputViewer(toolkit,progressArea,textFieldFlags);  gd=new GridData(SWT.FILL,SWT.LEFT,true,false);  gd.heightHint=300;  gd.minimumWidth=300;  progressOutput.getControl().setLayoutData(gd);  progressOutput.getControl().setFont(JFaceResources.getFont(ITLCPreferenceConstants.I_TLC_OUTPUT_FONT));  Vector<Control> controls=new Vector<Control>();  controls.add(userOutput.getControl());  controls.add(progressOutput.getControl());  fontChangeListener=new FontPreferenceChangeListener(controls,ITLCPreferenceConstants.I_TLC_OUTPUT_FONT);  JFaceResources.getFontRegistry().addListener(fontChangeListener);  headClientTBM.add(new DynamicContributionItem(new LoadOutputAction()));}  }
class C{  public void deliver(WriteStream os,OutHttp2 writerHttp) throws IOException {  System.out.println("UNKNOWN-MESSAGE: " + this);}  }
class C{  public static void checkFieldNotEmpty(final Collection<?> value,final String fieldName){  checkField(value != null && !value.isEmpty(),fieldName);}  }
class C{  public ResponseTimeoutException(Throwable cause){  super(cause);}  }
class C{  public MesosCluster(ClusterConfig clusterConfig,List<ClusterProcess> processes){  this.memberPocesses=processes;  this.clusterConfig=clusterConfig;  clusterId=Integer.toUnsignedString(new SecureRandom().nextInt());  for (  ClusterProcess process : processes) {    process.setCluster(this);  }}  }
class C{  @Override public synchronized void startHandshake() throws IOException {synchronized (handshakeLock) {    checkOpen();    if (!handshakeStarted) {      handshakeStarted=true;    } else {      return;    }  }  final int seedLengthInBytes=NativeCrypto.RAND_SEED_LENGTH_IN_BYTES;  final SecureRandom secureRandom=sslParameters.getSecureRandomMember();  if (secureRandom == null) {    NativeCrypto.RAND_load_file("/dev/urandom",seedLengthInBytes);  } else {    NativeCrypto.RAND_seed(secureRandom.generateSeed(seedLengthInBytes));  }  final boolean client=sslParameters.getUseClientMode();  final long sslCtxNativePointer=(client) ? sslParameters.getClientSessionContext().sslCtxNativePointer : sslParameters.getServerSessionContext().sslCtxNativePointer;  this.sslNativePointer=0;  boolean exception=true;  try {    sslNativePointer=NativeCrypto.SSL_new(sslCtxNativePointer);    guard.open("close");    if (npnProtocols != null) {      NativeCrypto.SSL_CTX_enable_npn(sslCtxNativePointer);    }    if (client && alpnProtocols != null) {      NativeCrypto.SSL_CTX_set_alpn_protos(sslCtxNativePointer,alpnProtocols);    }    if (!client) {      Set<String> keyTypes=new HashSet<String>();      for (      String enabledCipherSuite : enabledCipherSuites) {        if (enabledCipherSuite.equals(NativeCrypto.TLS_EMPTY_RENEGOTIATION_INFO_SCSV)) {          continue;        }        String keyType=CipherSuite.getByName(enabledCipherSuite).getServerKeyType();        if (keyType != null) {          keyTypes.add(keyType);        }      }      for (      String keyType : keyTypes) {        try {          setCertificate(sslParameters.getKeyManager().chooseServerAlias(keyType,null,this));        } catch (        CertificateEncodingException e) {          throw new IOException(e);        }      }    }    NativeCrypto.setEnabledProtocols(sslNativePointer,enabledProtocols);    NativeCrypto.setEnabledCipherSuites(sslNativePointer,enabledCipherSuites);    if (useSessionTickets) {      NativeCrypto.SSL_clear_options(sslNativePointer,NativeCrypto.SSL_OP_NO_TICKET);    }    if (hostname != null) {      NativeCrypto.SSL_set_tlsext_host_name(sslNativePointer,hostname);    }    boolean enableSessionCreation=sslParameters.getEnableSessionCreation();    if (!enableSessionCreation) {      NativeCrypto.SSL_set_session_creation_enabled(sslNativePointer,enableSessionCreation);    }    AbstractSessionContext sessionContext;    OpenSSLSessionImpl sessionToReuse;    if (client) {      ClientSessionContext clientSessionContext=sslParameters.getClientSessionContext();      sessionContext=clientSessionContext;      sessionToReuse=getCachedClientSession(clientSessionContext);      if (sessionToReuse != null) {        NativeCrypto.SSL_set_session(sslNativePointer,sessionToReuse.sslSessionNativePointer);      }    } else {      sessionContext=sslParameters.getServerSessionContext();      sessionToReuse=null;    }    if (client) {    } else {      boolean certRequested;      if (sslParameters.getNeedClientAuth()) {        NativeCrypto.SSL_set_verify(sslNativePointer,NativeCrypto.SSL_VERIFY_PEER | NativeCrypto.SSL_VERIFY_FAIL_IF_NO_PEER_CERT);        certRequested=true;      } else       if (sslParameters.getWantClientAuth()) {        NativeCrypto.SSL_set_verify(sslNativePointer,NativeCrypto.SSL_VERIFY_PEER);        certRequested=true;      } else {        certRequested=false;      }      if (certRequested) {        X509TrustManager trustManager=sslParameters.getTrustManager();        X509Certificate[] issuers=trustManager.getAcceptedIssuers();        if (issuers != null && issuers.length != 0) {          byte[][] issuersBytes;          try {            issuersBytes=encodeIssuerX509Principals(issuers);          } catch (          CertificateEncodingException e) {            throw new IOException("Problem encoding principals",e);          }          NativeCrypto.SSL_set_client_CA_list(sslNativePointer,issuersBytes);        }      }    }    int savedReadTimeoutMilliseconds=getSoTimeout();    int savedWriteTimeoutMilliseconds=getSoWriteTimeout();    if (handshakeTimeoutMilliseconds >= 0) {      setSoTimeout(handshakeTimeoutMilliseconds);      setSoWriteTimeout(handshakeTimeoutMilliseconds);    }    if (channelIdEnabled) {      if (client) {        if (channelIdPrivateKey == null) {          throw new SSLHandshakeException("Invalid TLS channel ID key specified");        }        NativeCrypto.SSL_set1_tls_channel_id(sslNativePointer,channelIdPrivateKey.getPkeyContext());      } else {        NativeCrypto.SSL_enable_tls_channel_id(sslNativePointer);      }    }    long sslSessionNativePointer;    try {      sslSessionNativePointer=NativeCrypto.SSL_do_handshake(sslNativePointer,socket.getFileDescriptor$(),this,getSoTimeout(),client,npnProtocols,client ? null : alpnProtocols);    } catch (    CertificateException e) {      SSLHandshakeException wrapper=new SSLHandshakeException(e.getMessage());      wrapper.initCause(e);      throw wrapper;    }    byte[] sessionId=NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);    if (sessionToReuse != null && Arrays.equals(sessionToReuse.getId(),sessionId)) {      this.sslSession=sessionToReuse;      sslSession.lastAccessedTime=System.currentTimeMillis();      NativeCrypto.SSL_SESSION_free(sslSessionNativePointer);    } else {      if (!enableSessionCreation) {        throw new IllegalStateException("SSL Session may not be created");      }      X509Certificate[] localCertificates=createCertChain(NativeCrypto.SSL_get_certificate(sslNativePointer));      X509Certificate[] peerCertificates=createCertChain(NativeCrypto.SSL_get_peer_cert_chain(sslNativePointer));      this.sslSession=new OpenSSLSessionImpl(sslSessionNativePointer,localCertificates,peerCertificates,getPeerHostName(),getPeerPort(),sessionContext);      if (handshakeCompleted) {        sessionContext.putSession(sslSession);      }    }    if (handshakeTimeoutMilliseconds >= 0) {      setSoTimeout(savedReadTimeoutMilliseconds);      setSoWriteTimeout(savedWriteTimeoutMilliseconds);    }    if (handshakeCompleted) {      notifyHandshakeCompletedListeners();    }    exception=false;  } catch (  SSLProtocolException e) {    throw new SSLHandshakeException(e);  } finally {    if (exception) {      close();    }  }}  }
class C{  public String prompt(String message,String defVal){  return null;}  }
class C{  public Pos3D translateExcludingSide(ForgeDirection direction,double amount){  if (direction.offsetX == 0)   xPos+=amount;  if (direction.offsetY == 0)   yPos+=amount;  if (direction.offsetZ == 0)   zPos+=amount;  return this;}  }
class C{  public DrawerBuilder withShowDrawerOnFirstLaunch(boolean showDrawerOnFirstLaunch){  this.mShowDrawerOnFirstLaunch=showDrawerOnFirstLaunch;  return this;}  }
class C{  @Override protected boolean hasRequestContent(){  LOG.trace("enter EntityEnclosingMethod.hasRequestContent()");  return (requestEntity != null) || (requestStream != null) || (requestString != null);}  }
class C{  public int compare(T o1,T o2){  for (  Comparator<T> comparator : comparators) {    int result=comparator.compare(o1,o2);    if (result != 0) {      return result;    }  }  return 0;}  }
class C{  public TagObject(){  super();}  }
class C{  public LogInputStream(InputStream in,int length) throws IOException {  this.in=in;  this.length=length;}  }
class C{  public static short reverseBytes(short s){  return (short)((s << 8) | ((s >>> 8) & 0xFF));}  }
class C{  public void reset(){  cnt=0;}  }
class C{  public static void outputDOMc14nWithComments(Node contextNode,OutputStream os){  try {    os.write(Canonicalizer.getInstance(Canonicalizer.ALGO_ID_C14N_WITH_COMMENTS).canonicalizeSubtree(contextNode));  } catch (  IOException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,ex.getMessage(),ex);    }  }catch (  InvalidCanonicalizerException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,ex.getMessage(),ex);    }  }catch (  CanonicalizationException ex) {    if (log.isLoggable(java.util.logging.Level.FINE)) {      log.log(java.util.logging.Level.FINE,ex.getMessage(),ex);    }  }}  }
class C{  public int nextInt(int itemcount){  return (int)nextLong(itemcount);}  }
class C{  protected void noRecordSelected(){  m_M_Product_ID=0;  p_centerLayout.getSouth().setOpen(false);  return;}  }
class C{  public static byte[] decode2(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public void runTest() throws Throwable {  Document doc;  String value="#$%&'()@";  Element element;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");{    boolean success=false;    try {      element.setPrefix(value);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public boolean isSetVersions(){  return this.versions != null;}  }
class C{  private final void syncLayout(){  if (!pathApplied) {    doPathLayout();  }}  }
class C{  SpeechRecognizerDbmHandler(@NonNull Context context){  this(context,MIN_RMS_DB_VALUE,MAX_RMS_DB_VALUE);}  }
class C{  int nextChar(){  assert (!isRead()) : "Attempting to read past the end of a segment.";  return buf[pos++];}  }
class C{  void addAgents(){  for (int i=0; i < numAgents; i++) {    Agent a=new Agent(this);    agents.addGeometry(a.getGeometry());    schedule.scheduleRepeating(a);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public EnumParameter(OptionID optionID,Class<E> enumClass){  super(optionID);  this.enumClass=enumClass;}  }
class C{  public void testStemOverrides() throws IOException {  DutchAnalyzer a=new DutchAnalyzer(CharArraySet.EMPTY_SET);  checkOneTerm(a,"fiets","fiets");  a.close();}  }
class C{  public <T>void put(Option<T> key,T value){  this.values.put(key,value);}  }
class C{  public synchronized void addDatabaseObject(DbObject obj){  HashMap<String,DbObject> map=getMap(obj.getType());  String name=obj.getName();  if (SysProperties.CHECK && map.get(name) != null) {    DbException.throwInternalError("object already exists");  }  map.put(name,obj);}  }
class C{  public void requestUpdateAd(){  adFetcher.updateFetchedAds();}  }
class C{  private byte[] loadJarData(String path,String fileName){  ZipFile zipFile;  ZipEntry entry;  int size;  try {    zipFile=new ZipFile(new File(path));    entry=zipFile.getEntry(fileName);    if (entry == null)     return null;    size=(int)entry.getSize();  } catch (  IOException io) {    return null;  }  InputStream stream=null;  try {    stream=zipFile.getInputStream(entry);    if (stream == null)     return null;    byte[] data=new byte[size];    int pos=0;    while (pos < size) {      int n=stream.read(data,pos,data.length - pos);      pos+=n;    }    zipFile.close();    return data;  } catch (  IOException e) {  } finally {    try {      if (stream != null)       stream.close();    } catch (    IOException e) {    }  }  return null;}  }
class C{  private IOTAddress __getIOTAddress(String bssid){  IOTAddress iotAddress=null;  for (int retry=0; retry < 10; retry++) {    iotAddress=EspBaseApiUtil.discoverDevice(bssid);    if (iotAddress != null) {      return iotAddress;    }  }  return null;}  }
class C{  public TemplateVariable(String type,String defaultValue,int[] offsets){  this(type,new String[]{defaultValue},offsets);}  }
class C{  public static void start(String name){  getExecutionTimes().put(name,System.currentTimeMillis());}  }
class C{  public static BugReporter configureBaselineFilter(BugReporter bugReporter,String baselineFileName) throws IOException, DocumentException {  return new ExcludingHashesBugReporter(bugReporter,baselineFileName);}  }
class C{  public BaseSprite(Engine engine,int w,int h,FrameType type){switch (type) {case SIMPLE:    frameType=FrameType.SIMPLE;  break;case COMMON:frameType=FrameType.COMMON;break;}this.s_engine=engine;this.s_width=w;this.s_height=h;init();}  }
class C{  public boolean isSetCursorId(){  return EncodingUtils.testBit(__isset_bitfield,__CURSORID_ISSET_ID);}  }
class C{  public static boolean truncatedEquals(final Date date1,final Date date2,final int field){  return truncatedCompareTo(date1,date2,field) == 0;}  }
class C{  void addGroup(){  if (mGroups.isEmpty() || !getLastGroup().mList.isEmpty()) {    mGroups.add(new Group());    mPrevPageInfo=null;  }}  }
class C{  public String[] parseLine(String nextLine) throws IOException {  return parseLine(nextLine,false);}  }
class C{  public final BooleanProperty floatableProperty(){  return floatableProperty;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Node textNode;  String textName;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  textNode=testAddr.getFirstChild();  textName=textNode.getNodeName();  assertEquals("textNodeName","#text",textName);}  }
class C{  public static boolean isSorted(final double[] array){  if (array == null || array.length < 2) {    return true;  }  double previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final double current=array[i];    if (Double.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public static AccessibilityNodeInfoCompat searchFocus(TraversalStrategy traversal,AccessibilityNodeInfoCompat currentFocus,int direction,NodeFilter filter){  if (traversal == null || currentFocus == null) {    return null;  }  if (filter == null) {    filter=DEFAULT_FILTER;  }  AccessibilityNodeInfoCompat targetNode=AccessibilityNodeInfoCompat.obtain(currentFocus);  Set<AccessibilityNodeInfoCompat> seenNodes=new HashSet<>();  try {    do {      seenNodes.add(targetNode);      targetNode=traversal.findFocus(targetNode,direction);      if (seenNodes.contains(targetNode)) {        LogUtils.log(AccessibilityNodeInfoUtils.class,Log.ERROR,"Found duplicate during traversal: %s",targetNode.getInfo());        return null;      }    } while (targetNode != null && !filter.accept(targetNode));  }  finally {    AccessibilityNodeInfoUtils.recycleNodes(seenNodes);  }  return targetNode;}  }
class C{  private Dimension calculateLayoutSize(Container parent,char how){  checkComponents(parent);  int rows=getRowCount();  int cols=getColCount();  Dimension[][] dim=new Dimension[rows][cols];  Object[] keys=m_data.keySet().toArray();  Arrays.sort(keys);  for (int i=0; i < keys.length; i++) {    ALayoutConstraint constraint=(ALayoutConstraint)keys[i];    Component component=(Component)m_data.get(keys[i]);    Dimension d=null;    if (how == 'P')     d=component.getPreferredSize(); else     if (how == 'M')     d=component.getMaximumSize(); else     d=component.getMinimumSize();    if (component.isVisible())     dim[constraint.getRow()][constraint.getCol()]=d; else     dim[constraint.getRow()][constraint.getCol()]=null;  }  Insets insets=parent.getInsets();  Dimension retValue=new Dimension(insets.left + insets.right,insets.top + insets.bottom);  retValue.height+=m_spaceH;  retValue.width+=m_spaceV;  int maxWidth=0;  for (int r=0; r < rows; r++) {    int height=0;    int width=0;    for (int c=0; c < cols; c++) {      Dimension d=dim[r][c];      if (d != null) {        width+=d.width;        height=Math.max(height,d.height);      }      width+=m_spaceV;    }    retValue.height+=height + m_spaceH;    maxWidth+=Math.max(maxWidth,width);  }  retValue.width+=maxWidth;  return retValue;}  }
class C{  public void ensureTable(String tableName,String... columnFamilies) throws IOException {  byte[][] cfs=new byte[columnFamilies.length][];  for (int i=0; i < columnFamilies.length; i++) {    cfs[i]=Bytes.toBytes(columnFamilies[i]);  }  ensureTable(Bytes.toBytes(tableName),cfs);}  }
class C{  public void proposeTree() throws OperatorFailedException {  NodeRef i;  double oldMinAge, newMinAge, newRange, oldRange, newAge, q;  final int nodeCount=tree.getNodeCount();  do {    i=tree.getNode(MathUtils.nextInt(nodeCount));  } while (tree.getRoot() == i);  final NodeRef iP=tree.getParent(i);  NodeRef j=tree.getNode(MathUtils.nextInt(nodeCount));  NodeRef k=tree.getParent(j);  while ((k != null && tree.getNodeHeight(k) <= tree.getNodeHeight(i)) || (i == j)) {    j=tree.getNode(MathUtils.nextInt(nodeCount));    k=tree.getParent(j);  }  if (j == tree.getRoot() || iP == tree.getRoot()) {    throw new OperatorFailedException("Root changes not allowed!");  }  if (k == iP || j == iP || k == i)   throw new OperatorFailedException("move failed");  final NodeRef CiP=getOtherChild(tree,iP,i);  NodeRef PiP=tree.getParent(iP);  newMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(j));  newRange=tree.getNodeHeight(k) - newMinAge;  newAge=newMinAge + (MathUtils.nextDouble() * newRange);  oldMinAge=Math.max(tree.getNodeHeight(i),tree.getNodeHeight(CiP));  oldRange=tree.getNodeHeight(PiP) - oldMinAge;  q=newRange / Math.abs(oldRange);  tree.beginTreeEdit();  if (j == tree.getRoot()) {    tree.removeChild(iP,CiP);    tree.removeChild(PiP,iP);    tree.addChild(iP,j);    tree.addChild(PiP,CiP);    tree.setRoot(iP);  } else   if (iP == tree.getRoot()) {    tree.removeChild(k,j);    tree.removeChild(iP,CiP);    tree.addChild(iP,j);    tree.addChild(k,iP);    tree.setRoot(CiP);  } else {    tree.removeChild(k,j);    tree.removeChild(iP,CiP);    tree.removeChild(PiP,iP);    tree.addChild(iP,j);    tree.addChild(k,iP);    tree.addChild(PiP,CiP);  }  tree.setNodeHeight(iP,newAge);  tree.endTreeEdit();  logq=Math.log(q);}  }
class C{  private void readObject(){}  }
class C{  @ObjectiveCName("changeNotificationsEnabledWithValue:") public void changeNotificationsEnabled(boolean val){  modules.getSettingsModule().changeNotificationsEnabled(val);}  }
class C{  public ParticleControl(ParticleEmitter emitter){  this.emitter=emitter;}  }
class C{  private double[][] determineBasis(double[] alpha){  final int dim=alpha.length;  double[] nn=new double[dim + 1];  for (int i=0; i < nn.length; i++) {    double alpha_i=i == alpha.length ? 0 : alpha[i];    nn[i]=sinusProduct(0,i,alpha) * StrictMath.cos(alpha_i);  }  timesEquals(nn,1. / euclideanLength(nn));  double[][] basis=new double[dim][];  int found=0;  for (int i=0; i < nn.length && found < dim; i++) {    final double[] e_i=new double[nn.length];    e_i[i]=1.0;    minusTimesEquals(e_i,nn,scalarProduct(e_i,nn));    double len=euclideanLength(e_i);    for (int j=0; j < found; j++) {      if (len < 1e-9) {        break;      }      minusTimesEquals(e_i,basis[j],scalarProduct(e_i,basis[j]));      len=euclideanLength(e_i);    }    if (len < 1e-9) {      continue;    }    timesEquals(e_i,1. / len);    basis[found++]=e_i;  }  if (found < dim) {    for (int i=found; i < dim; i++) {      basis[i]=new double[nn.length];    }  }  return transpose(basis);}  }
class C{  static <E>E checkType(E obj,Class<? extends E> type){  if (obj != null && !type.isInstance(obj)) {    throw new IndexOutOfBoundsException("" + obj.getClass().getName() + " type: "+ type);  }  return obj;}  }
class C{  public double findInterval(double time){  if (time < 0)   throw new IllegalArgumentException("Negative values for time are not allowed");  for (int i=0; i < size - 1; i++) {    if (time >= cis[i] && time < cis[i + 1])     return i;  }  return size - 1;}  }
class C{  private void configureActionBar(){  setSupportActionBar(actionBarToolbar);  menuItemSelectionHandlers=map(android.R.id.home,new UpSelectionHandler(),R.id.action_environment,new SwitchEnvironmentSelectionHandler());  actionBarOwner.takeView(this);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return TRIGGER_ID;case 2:  return TRIGGER_NAME;case 3:return CREATE_TIME;case 4:return OPERATOR_ID;case 5:return TRIGGER_TYPE;case 6:return BEGIN_TIME;case 7:return END_TIME;case 8:return TIMES;case 9:return EXECUTE_INTERVAL;case 10:return INTERVAL_UNIT;default :return null;}}  }
class C{  void impliesAction(NodeRepresentation nodeRep){  Decomposition decomp=nodeRep.decomposition;  state.hasChanged=true;  if (decomp.definedOp != null) {    state.assumpDefinitions.add(decomp.definedOp);  }  NodeTextRep newNodeText=null;  if ((decomp.definedOp != null) && (subexpressionButton.getSelection())) {    newNodeText=decomp.definedOpRep;  } else   if (nodeRep.isSubexpressionName) {    newNodeText=new NodeTextRep(nodeRep.nodeText,nodeRep.mapping);  }  NodeRepresentation nrep=decompositionChildToNodeRep(nodeRep,0,this.state.assumeReps,nodeRep.parentNode);  nrep.isCreated=true;  nrep.isPrimed=nrep.isPrimed || decomp.primed;  int newIdx=newAssumeRepsIndex(-1,nodeRep.initialPosition);  this.state.assumeReps.add(newIdx,nrep);  nrep=decompositionChildToNodeRep(nodeRep,1,nodeRep.getParentVector(),nodeRep.parentNode);  nrep.isCreated=true;  this.state.goalRep=nrep;  raiseWindow();}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public void map(Text key,Writable value,OutputCollector<Text,NutchWritable> output,Reporter reporter) throws IOException {  String url=normalizeUrl(key.toString());  if (url == null) {    return;  }  if (filterUrl(url) == null) {    return;  }  key.set(url);  if (value instanceof CrawlDatum) {    CrawlDatum datum=(CrawlDatum)value;    if (datum.getStatus() == CrawlDatum.STATUS_FETCH_REDIR_TEMP || datum.getStatus() == CrawlDatum.STATUS_FETCH_REDIR_PERM || datum.getStatus() == CrawlDatum.STATUS_FETCH_GONE) {      output.collect(key,new NutchWritable(new BooleanWritable(true)));    }  } else   if (value instanceof ParseData) {    ParseData data=(ParseData)value;    long fetchTime=getFetchTime(data);    Outlink[] outlinkAr=data.getOutlinks();    Map<String,String> outlinkMap=new LinkedHashMap<String,String>();    if (outlinkAr != null && outlinkAr.length > 0) {      for (int i=0; i < outlinkAr.length; i++) {        Outlink outlink=outlinkAr[i];        String toUrl=normalizeUrl(outlink.getToUrl());        if (filterUrl(toUrl) == null) {          continue;        }        boolean existingUrl=outlinkMap.containsKey(toUrl);        if (toUrl != null && (!existingUrl || (existingUrl && outlinkMap.get(toUrl) == null))) {          outlinkMap.put(toUrl,outlink.getAnchor());        }      }    }    for (    String outlinkUrl : outlinkMap.keySet()) {      String anchor=outlinkMap.get(outlinkUrl);      LinkDatum datum=new LinkDatum(outlinkUrl,anchor,fetchTime);      output.collect(key,new NutchWritable(datum));    }  } else   if (value instanceof LinkDatum) {    LinkDatum datum=(LinkDatum)value;    String linkDatumUrl=normalizeUrl(datum.getUrl());    if (filterUrl(linkDatumUrl) != null) {      datum.setUrl(linkDatumUrl);      output.collect(key,new NutchWritable(datum));    }  }}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (mIsEnabled) {    return mGestureDetector.onTouchEvent(event);  }  return false;}  }
class C{  public synchronized void delete(){  Resource parent=getParent();  if (parent != null) {    parent.delete(this);  }  if (isObservable()) {    clearAndNotifyObserveRelations(ResponseCode.NOT_FOUND);  }}  }
class C{  public boolean compareTestFile(String test,String diff,int width,int height) throws Exception {  String tin=xhtmlToDiff(test,width,height);  String din=null;  try {    din=Uu.file_to_string(diff);  } catch (  FileNotFoundException ex) {    XRLog.log("unittests",Level.WARNING,"diff file missing");    return false;  }  if (tin.equals(din)) {    return true;  }  XRLog.log("unittests",Level.WARNING,"warning not equals");  File dfile=new File("correct.diff");  File tfile=new File("test.diff");  XRLog.log("unittests",Level.WARNING,"writing to " + dfile + " and "+ tfile);  Uu.string_to_file(tin,tfile);  Uu.string_to_file(din,dfile);  return false;}  }
class C{  public static void d(String msg,Throwable throwable){  if (!allowD)   return;  StackTraceElement caller=getCallerStackTraceElement();  String tag=generateTag(caller);  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  XSLTAttributeDef(String namespace,String name,boolean required,boolean supportsAVT,boolean prefixedQNameValAllowed,int errorType,String k1,int v1,String k2,int v2){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=prefixedQNameValAllowed ? this.T_ENUM_OR_PQNAME : this.T_ENUM;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;  m_enums=new StringToIntTable(2);  m_enums.put(k1,v1);  m_enums.put(k2,v2);}  }
class C{  public static void assertJPost(String request,String content,double delta,String... tests) throws Exception {  int queryStartPos=request.indexOf('?');  String query;  String path;  if (-1 == queryStartPos) {    query="";    path=request;  } else {    query=request.substring(queryStartPos + 1);    path=request.substring(0,queryStartPos);  }  query=setParam(query,"wt","json");  request=path + '?' + setParam(query,"indent","on");  String response;  boolean failed=true;  try {    response=restTestHarness.post(request,content);    failed=false;  }  finally {    if (failed) {      log.error("REQUEST FAILED: " + request);    }  }  for (  String test : tests) {    if (null == test || 0 == test.length())     continue;    String testJSON=json(test);    try {      failed=true;      String err=JSONTestUtil.match(response,testJSON,delta);      failed=false;      if (err != null) {        log.error("query failed JSON validation. error=" + err + "\n expected ="+ testJSON+ "\n response = "+ response+ "\n request = "+ request+ "\n");        throw new RuntimeException(err);      }    }  finally {      if (failed) {        log.error("JSON query validation threw an exception." + "\n expected =" + testJSON + "\n response = "+ response+ "\n request = "+ request+ "\n");      }    }  }}  }
class C{  public long recovered(){  return recovered;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(6);  newVector.addElement(new Option("\tGenerate network (instead of instances)\n","B",0,"-B"));  newVector.addElement(new Option("\tNr of nodes\n","N",1,"-N <integer>"));  newVector.addElement(new Option("\tNr of arcs\n","A",1,"-A <integer>"));  newVector.addElement(new Option("\tNr of instances\n","M",1,"-M <integer>"));  newVector.addElement(new Option("\tCardinality of the variables\n","C",1,"-C <integer>"));  newVector.addElement(new Option("\tSeed for random number generator\n","S",1,"-S <integer>"));  newVector.addElement(new Option("\tThe BIF file to obtain the structure from.\n","F",1,"-F <file>"));  return newVector.elements();}  }
class C{  public void add(RetrievalMethod retrievalmethod){  this.constructionElement.appendChild(retrievalmethod.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  private IsRoundedEqual(final Double lhs,final int numPlaces){  this.lhs=lhs;  this.numPlaces=numPlaces;}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public li[] addElement(String[] element){  li[] li=new li[element.length];  for (int x=0; x < element.length; x++) {    li[x]=new li(element[x]);  }  return (li);}  }
class C{  void decodeAttributeBody(byte[] attributeValue,char offset,char length) throws StunException {  if (length != 4) {    throw new StunException("length invalid");  }  value=((attributeValue[0] << 24) & 0xff000000) + ((attributeValue[1] << 16) & 0x00ff0000) + ((attributeValue[2] << 8) & 0x0000ff00)+ (attributeValue[3] & 0x000000ff);}  }
class C{  public void canonicalizePhis(SimplifierTool tool){  int phiCount=phis().count();  if (phiCount > 1) {    int phiInputCount=phiPredecessorCount();    int phiIndex=0;    int[][] selfIncrement=new int[phiCount][];    PhiNode[] phis=this.phis().snapshot().toArray(new PhiNode[phiCount]);    for (phiIndex=0; phiIndex < phiCount; phiIndex++) {      PhiNode phi=phis[phiIndex];      if (phi != null) {        nextPhi:         for (int otherPhiIndex=phiIndex + 1; otherPhiIndex < phiCount; otherPhiIndex++) {          PhiNode otherPhi=phis[otherPhiIndex];          if (otherPhi == null || phi.getNodeClass() != otherPhi.getNodeClass() || !phi.valueEquals(otherPhi)) {            continue nextPhi;          }          if (selfIncrement[phiIndex] == null) {            selfIncrement[phiIndex]=getSelfIncrements(phi);          }          if (selfIncrement[otherPhiIndex] == null) {            selfIncrement[otherPhiIndex]=getSelfIncrements(otherPhi);          }          int[] phiIncrement=selfIncrement[phiIndex];          int[] otherPhiIncrement=selfIncrement[otherPhiIndex];          for (int inputIndex=0; inputIndex < phiInputCount; inputIndex++) {            if (phiIncrement[inputIndex] == NO_INCREMENT) {              if (phi.valueAt(inputIndex) != otherPhi.valueAt(inputIndex)) {                continue nextPhi;              }            }            if (phiIncrement[inputIndex] != otherPhiIncrement[inputIndex]) {              continue nextPhi;            }          }          if (tool != null) {            tool.addToWorkList(otherPhi.usages());          }          otherPhi.replaceAtUsages(phi);          GraphUtil.killWithUnusedFloatingInputs(otherPhi);          phis[otherPhiIndex]=null;        }      }    }  }}  }
class C{  private boolean loadLOBDataFromFileSystem(){  if ("".equals(m_attachmentPathRoot)) {    log.severe("no attachmentPath defined");    return false;  }  m_items=new ArrayList<MAttachmentEntry>();  byte[] data=getBinaryData();  if (data == null)   return true;  log.fine("TextFileSize=" + data.length);  if (data.length == 0)   return true;  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  try {    final DocumentBuilder builder=factory.newDocumentBuilder();    final Document document=builder.parse(new ByteArrayInputStream(data));    final NodeList entries=document.getElementsByTagName("entry");    for (int i=0; i < entries.getLength(); i++) {      final Node entryNode=entries.item(i);      final NamedNodeMap attributes=entryNode.getAttributes();      final Node fileNode=attributes.getNamedItem("file");      final Node nameNode=attributes.getNamedItem("name");      if (fileNode == null || nameNode == null) {        log.severe("no filename for entry " + i);        m_items=null;        return false;      }      log.fine("name: " + nameNode.getNodeValue());      String filePath=fileNode.getNodeValue();      log.fine("filePath: " + filePath);      if (filePath != null) {        filePath=filePath.replaceFirst(ATTACHMENT_FOLDER_PLACEHOLDER,m_attachmentPathRoot.replaceAll("\\\\","\\\\\\\\"));        String replaceSeparator=File.separator;        if (!replaceSeparator.equals("/")) {          replaceSeparator="\\\\";        }        filePath=filePath.replaceAll("/",replaceSeparator);        filePath=filePath.replaceAll("\\\\",replaceSeparator);      }      log.fine("filePath: " + filePath);      final File file=new File(filePath);      if (file.exists()) {        final byte[] dataEntry=new byte[(int)file.length()];        try {          final FileInputStream fileInputStream=new FileInputStream(file);          fileInputStream.read(dataEntry);          fileInputStream.close();        } catch (        FileNotFoundException e) {          log.severe("File Not Found.");          e.printStackTrace();        }catch (        IOException e1) {          log.severe("Error Reading The File.");          e1.printStackTrace();        }        final MAttachmentEntry entry=new MAttachmentEntry(filePath,dataEntry,m_items.size() + 1);        m_items.add(entry);      } else {        log.severe("file not found: " + file.getAbsolutePath());      }    }  } catch (  SAXException sxe) {    Exception x=sxe;    if (sxe.getException() != null)     x=sxe.getException();    x.printStackTrace();    log.severe(x.getMessage());  }catch (  ParserConfigurationException pce) {    pce.printStackTrace();    log.severe(pce.getMessage());  }catch (  IOException ioe) {    ioe.printStackTrace();    log.severe(ioe.getMessage());  }  return true;}  }
class C{  private void addPointsQuarter(int points){  if (gamePoss) {    if (gameTime > 2700) {      homeQScore[0]+=points;    } else     if (gameTime > 1800) {      homeQScore[1]+=points;    } else     if (gameTime > 900) {      homeQScore[2]+=points;    } else     if (numOT == 0) {      homeQScore[3]+=points;    } else {      if (3 + numOT < 10)       homeQScore[3 + numOT]+=points; else       homeQScore[9]+=points;    }  } else {    if (gameTime > 2700) {      awayQScore[0]+=points;    } else     if (gameTime > 1800) {      awayQScore[1]+=points;    } else     if (gameTime > 900) {      awayQScore[2]+=points;    } else     if (numOT == 0) {      awayQScore[3]+=points;    } else {      if (3 + numOT < 10)       awayQScore[3 + numOT]+=points; else       awayQScore[9]+=points;    }  }}  }
class C{  BucketPage(final HTree htree,final int globalDepth){  super(htree,true,globalDepth);  data=new MutableBucketData(htree.bucketSlots,htree.versionTimestamps,htree.deleteMarkers,htree.rawRecords);}  }
class C{  public static double[] solve(double[][] a,double[] b){  int n=b.length;  if (a.length != n || a[0].length != n)   throw new IllegalArgumentException("Matrix A is incorrectly sized");  for (int i=0; i < n; i++) {    int maxElementRow=i;    for (int j=i + 1; j < n; j++)     if (Math.abs(a[j][i]) > Math.abs(a[maxElementRow][i]))     maxElementRow=j;    if (a[maxElementRow][i] == 0.0)     return null;    swapRows(a,i,maxElementRow);    swapRows(b,i,maxElementRow);    for (int j=i + 1; j < n; j++) {      double rowFactor=a[j][i] / a[i][i];      for (int k=n - 1; k >= i; k--)       a[j][k]-=a[i][k] * rowFactor;      b[j]-=b[i] * rowFactor;    }  }  double[] solution=new double[n];  for (int j=n - 1; j >= 0; j--) {    double t=0.0;    for (int k=j + 1; k < n; k++)     t+=a[j][k] * solution[k];    solution[j]=(b[j] - t) / a[j][j];  }  return solution;}  }
class C{  public void addRealizingClassNoBidirectionalUpdate(ClassType type){  if (null == realizingClasses) {    initRealizingClasses();  }  realizingClasses.addOrUpdate(type);}  }
class C{  public static RemoteFileSystem parse(final byte[] data) throws ParserConfigurationException, SAXException, IOException {  Preconditions.checkNotNull(data,"IE00771: Data argument can not be null");  RemoteDirectory directory=null;  final List<RemoteDrive> drives=new ArrayList<>();  final List<RemoteDirectory> directories=new ArrayList<>();  final List<RemoteFile> files=new ArrayList<>();  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  final DocumentBuilder builder=factory.newDocumentBuilder();  final Document document=builder.parse(new ByteArrayInputStream(data,0,data.length));  final NodeList nodes=document.getFirstChild().getChildNodes();  for (int i=0; i < nodes.getLength(); ++i) {    final Node node=nodes.item(i);    final String nodeName=node.getNodeName();    if ("Drives".equals(nodeName)) {      parseDrivesInformation(node,drives);    } else     if ("Directories".equals(nodeName)) {      parseDirectoriesInformation(node,directories);    } else     if ("Files".equals(nodeName)) {      parseFilesInformation(node,files);    } else     if ("Directory".equals(nodeName)) {      directory=new RemoteDirectory(node.getAttributes().getNamedItem("name").getNodeValue());    } else {      NaviLogger.severe("Error: Unknown node name " + nodeName);    }  }  return new RemoteFileSystem(directory,drives,directories,files);}  }
class C{  public OriginalEvent(){  super(KEY);}  }
class C{  public String dateAttributesTipText(){  return "The range of attributes to force to type DATE, example " + "ranges: 'first-last', '1,4,7-14, 50-last'.";}  }
class C{  public static void copyPartial(InputStream inputStream,long length,OutputStream outputStream) throws IOException {  copyPartial(inputStream,0,length,outputStream);}  }
class C{  protected void appendSummarySize(StringBuffer buffer,String fieldName,int size){  buffer.append(sizeStartText);  buffer.append(size);  buffer.append(sizeEndText);}  }
class C{  protected void findParamsByCrossValidation(int depth,Instances trainData,Random random) throws Exception {  if (depth < m_CVParams.size()) {    CVParameter cvParam=(CVParameter)m_CVParams.elementAt(depth);    double upper;switch ((int)(cvParam.m_Lower - cvParam.m_Upper + 0.5)) {case 1:      upper=m_NumAttributes;    break;case 2:  upper=m_TrainFoldSize;break;default :upper=cvParam.m_Upper;break;}double increment=(upper - cvParam.m_Lower) / (cvParam.m_Steps - 1);for (cvParam.m_ParamValue=cvParam.m_Lower; cvParam.m_ParamValue <= upper; cvParam.m_ParamValue+=increment) {findParamsByCrossValidation(depth + 1,trainData,random);}} else {Evaluation evaluation=new Evaluation(trainData);String[] options=createOptions();if (m_Debug) {System.err.print("Setting options for " + m_Classifier.getClass().getName() + ":");for (int i=0; i < options.length; i++) {System.err.print(" " + options[i]);}System.err.println("");}((OptionHandler)m_Classifier).setOptions(options);for (int j=0; j < m_NumFolds; j++) {Instances train=trainData.trainCV(m_NumFolds,j,new Random(1));Instances test=trainData.testCV(m_NumFolds,j);m_Classifier.buildClassifier(train);evaluation.setPriors(train);evaluation.evaluateModel(m_Classifier,test);}double error=evaluation.errorRate();if (m_Debug) {System.err.println("Cross-validated error rate: " + Utils.doubleToString(error,6,4));}if ((m_BestPerformance == -99) || (error < m_BestPerformance)) {m_BestPerformance=error;m_BestClassifierOptions=createOptions();}}}  }
class C{  public TextWrap(float width,float indent){  this.width=width;  this.indent=indent;}  }
class C{  private double[] pointOrdinates(Geometry geom){  Point point=(Point)geom;  Coordinate coord=point.getCoordinate();  return new double[]{coord.x,coord.y,coord.z};}  }
class C{  public LocalCreation(Chain locals){  this(locals,DEFAULT_PREFIX);}  }
class C{  boolean inHorizontalScrollbar(int x,int y){  if (hsbSpace <= 0) {    return false;  }  int w=width - MARGIN - vsbSpace;  return (x >= MARGIN) && (x < w) && (y >= height - (SCROLLBAR - SPACE))&& (y < height);}  }
class C{  public Set<Integer> makeOpsNeededSet(boolean read,boolean changes,Set<Integer> set){  for (int i=0; i < varList.size(); i++) {    int varNum=varList.get(i).intValue();    VariableValue var=_varModel.getVariable(varNum);    if (!changes || var.isChanged()) {      CvValue[] cvs=var.usesCVs();      for (int j=0; j < cvs.length; j++) {        CvValue cv=cvs[j];        if (!changes || VariableValue.considerChanged(cv)) {          set.add(Integer.valueOf(cv.number()));        }      }    }  }  return set;}  }
class C{  public RandomIndexPack(ByteProvider byteProvider,long byteOffset,long fullPackLength) throws IOException {  this.header=new KLVPacket.Header(byteProvider,byteOffset);  if (!Arrays.equals(this.header.getKey(),RandomIndexPack.KEY)) {    throw new MXFException(String.format("Expected random index pack key = %s, found %s",Arrays.asList(RandomIndexPack.KEY),Arrays.asList(this.header.getKey())));  }  if ((fullPackLength - KLVPacket.KEY_FIELD_SIZE - this.header.getLSize()) != this.header.getVSize()) {    throw new MXFException(String.format("fullPackLength = %d is not consistent with length of length field = %d and length of value field = %d",fullPackLength,this.header.getLSize(),this.header.getVSize()));  }  Integer bodySIDByteOffsetPairSize=0;  Field[] fields=BodySIDByteOffsetPair.class.getDeclaredFields();  for (  Field field : fields) {    if (field.isAnnotationPresent(MXFProperty.class)) {      bodySIDByteOffsetPairSize+=field.getAnnotation(MXFProperty.class).size();    }  }  if (((fullPackLength - KLVPacket.KEY_FIELD_SIZE - this.header.getLSize()- RANDOM_INDEX_PACK_LENGTH_FIELD_SIZE) % bodySIDByteOffsetPairSize) != 0) {    throw new MXFException(String.format("Length of BodySIDByteOffsetPairs portion of RandomIndexPack = %d is not a multiple of %d",fullPackLength - KLVPacket.KEY_FIELD_SIZE - this.header.getLSize()- RANDOM_INDEX_PACK_LENGTH_FIELD_SIZE,bodySIDByteOffsetPairSize));  }  long numBodySIDByteOffsetPairs=(fullPackLength - KLVPacket.KEY_FIELD_SIZE - this.header.getLSize()- RANDOM_INDEX_PACK_LENGTH_FIELD_SIZE) / bodySIDByteOffsetPairSize;  for (long i=0; i < numBodySIDByteOffsetPairs; i++) {    BodySIDByteOffsetPair bodySIDByteOffsetPair=new BodySIDByteOffsetPair(byteProvider);    List<Long> partitions=partitionMap.get(bodySIDByteOffsetPair.getBodySID());    if (partitions == null) {      partitions=new ArrayList<Long>();      partitionMap.put(bodySIDByteOffsetPair.getBodySID(),partitions);    }    partitions.add(bodySIDByteOffsetPair.getByteOffset());    allPartitionByteOffsets.add(bodySIDByteOffsetPair.getByteOffset());  }  MXFPropertyPopulator.populateField(byteProvider,this,"length");  if (this.length != fullPackLength) {    throw new MXFException(String.format("Observed length = %d is different from expected length = %d of RandomIndexPack",this.length,fullPackLength));  }}  }
class C{  @Override public void mark(int readlimit){}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private static final PipelineOp addAssignment(PipelineOp left,final AssignmentNode assignmentNode,final Set<IVariable<?>> doneSet,final Properties queryHints,final AST2BOpContext ctx,final boolean projection){  final IValueExpression ve=assignmentNode.getValueExpression();  final Set<IVariable<IV>> vars=new LinkedHashSet<IVariable<IV>>();  final ComputedMaterializationRequirement req=assignmentNode.getMaterializationRequirement();  vars.addAll(req.getVarsToMaterialize());  vars.removeAll(doneSet);  final int bopId=ctx.nextId();  final ConditionalBind b=new ConditionalBind(assignmentNode.getVar(),assignmentNode.getValueExpression(),projection);  IConstraint c=new ProjectedConstraint(b);  if (vars.size() > 0) {    left=addMaterializationSteps1(left,bopId,ve,vars,queryHints,ctx);    if (req.getRequirement() == Requirement.ALWAYS) {      doneSet.addAll(vars);    }    c=new TryBeforeMaterializationConstraint(c);  }  left=applyQueryHints(new ConditionalRoutingOp(leftOrEmpty(left),new NV(BOp.Annotations.BOP_ID,bopId),new NV(ConditionalRoutingOp.Annotations.CONDITION,c)),queryHints,ctx);  return left;}  }
class C{  public void enterNextPlugin(){  if (this.pluginIterator.hasNext()) {    this.plugin=pluginIterator.next().createPlugin();    this.plugin.init(this,sw,timer);    this.plugin.enterPlugin();  } else {    setState(new WaitInitialRoleState());  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  previsionesSeleccionadas=new String[0];}  }
class C{  public UnionMemberScope(UnionTypeExpression unionTypeExpression,EObject context,List<IScope> subScopes,N4JSTypeSystem ts){  super(IScope.NULLSCOPE,false);  this.unionTypeExpression=unionTypeExpression;  this.subScopes=subScopes.toArray(new IScope[subScopes.size()]);  this.ts=ts;  this.context=context;  this.writeAccess=ExpressionExtensions.isLeftHandSide(context);}  }
class C{  public IconUIResource(Icon delegate){  if (delegate == null) {    throw new IllegalArgumentException("null delegate icon argument");  }  this.delegate=delegate;}  }
class C{  protected String asCode(String[] lines){  StringBuilder buffer=new StringBuilder();  for (int i=0; i < lines.length; i++) {    buffer.append(lines[i]);    buffer.append("\n");  }  return buffer.toString();}  }
class C{  public void sortMoviesInMovieSet(MovieSet movieSet){synchronized (root) {    MovieSetTreeNode node=(MovieSetTreeNode)nodeMap.get(movieSet);    node.sort();    TreeModelEvent event=new TreeModelEvent(this,node.getPath());    for (    TreeModelListener listener : listeners) {      listener.treeStructureChanged(event);    }  }}  }
class C{  public RepositoryEntryInputDialog(Window owner,String key,String text,Object... arguments){  super(owner,"input." + key,ModalityType.APPLICATION_MODAL,arguments);  this.okButton=makeOkButton();  this.cancelButton=makeCancelButton();  if (text != null) {    textField.setText(text);  }  textField.addObserver(this,true);  layoutDefault(textField,okButton,cancelButton);  textField.requestFocusInWindow();  textField.triggerCheck();}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public ColorRange addHue(Hue hue){  hueConstraint.add(new FloatRange(hue.getHue(),hue.getHue()));  return this;}  }
class C{  protected static MInvoice createARInvoice(Properties ctx,int salesOrderId,String trxName) throws OperationException {  MOrder salesOrder=new MOrder(ctx,salesOrderId,trxName);  MInvoice invoice=null;  boolean isSOTrx=salesOrder.isSOTrx();  if (!isSOTrx) {    throw new OperationException("AR Invoice should be created from sales Order");  }  if (!DocumentEngine.STATUS_Completed.equals(salesOrder.getDocStatus())) {    throw new OperationException("Order not in completed status, Status: " + salesOrder.getDocStatus());  }  invoice=new MInvoice(salesOrder,0,salesOrder.getDateOrdered());  PoManager.save(invoice);  return invoice;}  }
class C{  public void await() throws InterruptedException {  awaitSemaphore.acquire();  awaitSemaphore.release();}  }
class C{  public static long textScaleToLong(String textScale){  long resolution=1l;  long realValue;  int expLetter;  int expLetterSmall;  int commaIndex=textScale.indexOf(',');  while (commaIndex != -1) {    StringBuffer buf=new StringBuffer(textScale.substring(0,commaIndex));    buf.append(textScale.substring(commaIndex + 1));    textScale=buf.toString();    commaIndex=textScale.indexOf(',');  }  int colon=textScale.indexOf(":");  try {    if (colon == -1) {      expLetter=textScale.indexOf("m");      if (expLetter == -1) {        expLetter=textScale.indexOf("M");      }      if (expLetter != -1) {        resolution=Long.parseLong(textScale.substring(0,expLetter));        return (long)(resolution / .000150);      }    }    String expValue="";    expLetter=textScale.lastIndexOf('K');    expLetterSmall=textScale.lastIndexOf('k');    if (expLetter == -1 && expLetterSmall == -1) {      expLetter=textScale.lastIndexOf('M');      expLetterSmall=textScale.lastIndexOf('m');      if (expLetter != -1 || expLetterSmall != -1) {        expValue="000000";      }    } else {      expValue="000";    }    StringBuffer buf;    if (expValue.length() > 0) {      if (expLetter == -1) {        expLetter=expLetterSmall;      }      buf=new StringBuffer(textScale.substring(colon + 1,expLetter));      buf.append(expValue);    } else {      buf=new StringBuffer(textScale.substring(colon + 1));    }    String longString=buf.toString().trim();    realValue=Long.parseLong(longString);  } catch (  NumberFormatException nfe) {    if (Debug.debugging("rpftoc")) {      Debug.output("textScaleToLong: Number Format Exception!!!!" + textScale);    }    return (long)RpfConstants.Various;  }catch (  StringIndexOutOfBoundsException sioobe) {    if (Debug.debugging("rpftoc")) {      Debug.output("textScaleToLong: String index out of bounds:\n" + sioobe.getMessage());    }    return (long)RpfConstants.Various;  }  if (colon != -1) {    resolution=Long.parseLong(textScale.substring(0,colon));  }  long ret=(realValue / resolution);  if (Debug.debugging("rpftoc")) {    Debug.output("RpfTocHandler: textScaleToLong converted " + textScale + " to "+ ret);  }  return ret;}  }
class C{  @SuppressWarnings({"unchecked"}) private TypeToken(Type type){  this.rawType=(Class<? super T>)getRawType(nonNull(type,"type"));  this.type=type;}  }
class C{  public static void copy(File sourceLocation,File targetLocation) throws IOException {  copyOrMove(sourceLocation,targetLocation,false);}  }
class C{  private void emitClass(DocComment comment){  String tagName=(comment.getType() == DocComment.CLASS) ? "classRec" : "interfaceRec";  xml.append("\n<");  xml.append(tagName);  xml.append(" name='");  xml.append(comment.getName());  xml.append("' fullname='");  xml.append(comment.getFullname());  String sourcefile=comment.getSourceFile();  if (sourcefile != null) {    xml.append("' sourcefile='");    xml.append(sourcefile);  }  xml.append("' namespace='");  xml.append(comment.getNamespace());  xml.append("' access='");  xml.append(comment.getAccess());  xml.append("' ");  if (comment.getType() == DocComment.INTERFACE) {    String[] baseClasses=comment.getBaseclasses();    if (baseClasses != null) {      xml.append("baseClasses='");      for (int i=0; i < baseClasses.length; i++) {        String baseclass=baseClasses[i];        if (baseclass != null) {          if (i != 0)           xml.append(";");          xml.append(baseclass);        }      }      xml.append("' ");    }  } else {    xml.append("baseclass='");    xml.append(comment.getBaseClass());    xml.append("' ");    String[] interfaces=comment.getInterfaces();    if (interfaces != null) {      xml.append("interfaces='");      for (int i=0; i < interfaces.length; i++) {        String inter=interfaces[i];        if (inter != null) {          if (i != 0)           xml.append(";");          xml.append(inter);        }      }      xml.append("' ");    }  }  xml.append("isFinal='");  xml.append(comment.isFinal());  xml.append("' ");  xml.append("isDynamic='");  xml.append(comment.isDynamic());  xml.append("' ");  xml.append(">");  String desc=comment.getDescription();  if (desc != null)   appendTag("description",comment.getDescription());  emitTags(comment.getAllTags());  if (comment.getMetadata() != null)   emitMetadata(comment.getMetadata());  xml.append("\n</");  xml.append(tagName);  xml.append(">");}  }
class C{  @Override protected void buildActions(final List<String> list){  if (!entity.isGhostMode()) {    super.buildActions(list);    boolean hasBuddy=User.hasBuddy(entity.getName());    if (!hasBuddy) {      list.add(ActionType.ADD_BUDDY.getRepresentation());    }    if (User.isIgnoring(entity.getName())) {      list.add(ActionType.UNIGNORE.getRepresentation());    } else     if (!hasBuddy) {      list.add(ActionType.IGNORE.getRepresentation());    }    String serverVersion=User.getServerRelease();    if ((serverVersion == null) || (Version.compare(serverVersion,"0.87") > 0)) {      list.add(ActionType.TRADE.getRepresentation());    }    if ((serverVersion == null) || (Version.compare(serverVersion,"0.92") > 0)) {      list.add(ActionType.INVITE.getRepresentation());    }  }}  }
class C{  private void scheduleCleanerJobIfNecessary(IPreferencePageContainer preferencePageContainer){  Map<String,ValueDifference<String>> changes=getPreferenceChanges();  for (  String key : changes.keySet()) {    if (key.matches("^" + CompilerProperties.OUTPUT_PREFERENCE_TAG + "\\.\\w+\\."+ CompilerProperties.OUTPUT_PREFERENCE_TAG+ "$")) {      ValueDifference<String> difference=changes.get(key);      scheduleCleanerJob(preferencePageContainer,difference.rightValue());    }  }}  }
class C{  public boolean send(String text){  byte[] sBytes=text.getBytes();  return send(sBytes);}  }
class C{  public PolynomialKernel(double degree,double alpha,double c){  this.degree=degree;  this.alpha=alpha;  this.c=c;}  }
class C{  public ValidityCheckingVisitor(ExceptionPredicate isInvalid,boolean throwExceptionOnFlakyTest){  this.isInvalid=isInvalid;  this.throwExceptionOnFlakyTest=throwExceptionOnFlakyTest;}  }
class C{  public IssueMatcher equals(String expectedValue){  return addPropertyMatcher(StringPropertyMatcher.Mode.Equals,false,expectedValue);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean must=evalBool(stack.pop());  long end=getLong(stack);  long start=getLong(stack);  java.util.ArrayList rv=new java.util.ArrayList(500);  Channel[] currChans=Wizard.getInstance().getChannels();  for (int j=0; j < currChans.length; j++)   if (currChans[j].isViewable())   rv.addAll(java.util.Arrays.asList(Wizard.getInstance().getAirings(currChans[j].getStationID(),start,end,must)));  return rv.toArray(Pooler.EMPTY_AIRING_ARRAY);}  }
class C{  private void updateStyle(JPanel c){  SeaGlassContext context=getContext(c,ENABLED);  style=SeaGlassLookAndFeel.updateStyle(context,this);  context.dispose();  LookAndFeel.installProperty(c,"opaque",!(c.getBackground() instanceof UIResource));}  }
class C{  public IOError(Throwable cause){  super(cause);}  }
class C{  public DelphiSourceSanitizer(String fileName,String encoding) throws IOException {  super(fileName,encoding);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public Source<Double> fromZeroToPositiveInfinity(){  return Compositions.weightWithValues(Doubles.fromZeroToPositiveInfinity(),Double.POSITIVE_INFINITY,0d);}  }
class C{  public DroidModel(Class<?> definedClass){  setModelName(sanitizeCanonicalName(definedClass.getName()));  setPrimaryKey();  DatabaseRequest createRequest=new DatabaseRequest();  createRequest.setActionType(DatabaseRequest.Action.CREATE_TABLE);  createRequest.setTableName(this.getModelName());  createRequest.setModel(this);  ArrayList<HashMap<String,String>> response=DatabaseHandler.getInstance().processRequest(createRequest.getRW(),createRequest.getRawQuery());}  }
class C{  public boolean isGood(){  return (value & SEVERITY_MASK) == SEVERITY_GOOD;}  }
class C{  public synchronized void release(int key,Throwable ex){  LockerData data=getData(key,1);  if (data.getLock().getCount() == 1) {    data.setAlreadyReleased(true);  }  if (ex != null) {    data.setException(ex);  }  notify(data.getLock());}  }
class C{  public static boolean isThisHostIP(final Set<String> hostNames){  if ((hostNames == null) || (hostNames.isEmpty()))   return false;  for (  String hostName : hostNames) {    if (hostName.indexOf(':') > 0)     return false;    if (isThisHostIP(Domains.dnsResolve(hostName)))     return true;  }  return false;}  }
class C{  public void writeFeatures(Map<FeatureCollection,Style> featureCollectionStyleMap,double scaleDenominator,OutputStream outputStream) throws IOException {  this.addFeaturesToEncoder(featureCollectionStyleMap,scaleDenominator);  this.vectorTileEncoder.encode(outputStream);}  }
class C{  public boolean sendKnock(String from){  if (mParticipant instanceof Contact) {    OtrChatManager cm=OtrChatManager.getInstance();    SessionID sId=cm.getSessionId(from,mParticipant.getAddress().getAddress());    SessionStatus otrStatus=cm.getSessionStatus(sId);    if (OtrChatManager.getInstance().canDoKnockPushMessage(sId)) {      OtrChatManager.getInstance().sendKnockPushMessage(sId);      return true;    }  }  return false;}  }
class C{  public SSLSocketFactory(javax.net.ssl.SSLSocketFactory socketfactory){  super();  this.sslcontext=null;  this.socketfactory=socketfactory;  this.nameResolver=null;}  }
class C{  public void shutDown(){  for (  ITmmModule module : modules) {    if (module.isEnabled()) {      try {        module.shutDown();      } catch (      Exception e) {        LOGGER.error("problem shutting down " + module.getModuleTitle() + ": "+ e.getMessage());      }    }  }}  }
class C{  public void testCreateAttributeNS2() throws Throwable {  Document doc;  Attr attribute1;  Attr attribute2;  String name;  String nodeName;  String nodeValue;  String prefix;  String namespaceURI;  doc=(Document)load("staffNS",builder);  attribute1=doc.createAttributeNS("http://www.w3.org/XML/1998/namespace","xml:xml");  name=attribute1.getName();  nodeName=attribute1.getNodeName();  nodeValue=attribute1.getNodeValue();  prefix=attribute1.getPrefix();  namespaceURI=attribute1.getNamespaceURI();  assertEquals("documentcreateattributeNS02_att1_name","xml:xml",name);  assertEquals("documentcreateattributeNS02_att1_nodeName","xml:xml",nodeName);  assertEquals("documentcreateattributeNS02_att1_nodeValue","",nodeValue);  assertEquals("documentcreateattributeNS02_att1_prefix","xml",prefix);  assertEquals("documentcreateattributeNS02_att1_namespaceURI","http://www.w3.org/XML/1998/namespace",namespaceURI);  attribute2=doc.createAttributeNS("http://www.w3.org/2000/xmlns/","xmlns");  name=attribute2.getName();  nodeName=attribute2.getNodeName();  nodeValue=attribute2.getNodeValue();  prefix=attribute2.getPrefix();  namespaceURI=attribute2.getNamespaceURI();  assertEquals("documentcreateattributeNS02_att2_name","xmlns",name);  assertEquals("documentcreateattributeNS02_att2_nodeName","xmlns",nodeName);  assertEquals("documentcreateattributeNS02_att2_nodeValue","",nodeValue);  assertEquals("documentcreateattributeNS02_att2_namespaceURI","http://www.w3.org/2000/xmlns/",namespaceURI);}  }
class C{  public T caseTGetter(TGetter object){  return null;}  }
class C{  public String relationName(){  return m_RelationName;}  }
class C{  private void dialogChanged(){  errorMsg=validateInputs();  updateStatus(errorMsg);}  }
class C{  private static double estimateCuboidStorageSize(CubeSegment cubeSegment,long cuboidId,long rowCount,long baseCuboidId,List<Integer> rowKeyColumnLength){  int bytesLength=cubeSegment.getRowKeyPreambleSize();  KylinConfig kylinConf=cubeSegment.getConfig();  long mask=Long.highestOneBit(baseCuboidId);  long parentCuboidIdActualLength=Long.SIZE - Long.numberOfLeadingZeros(baseCuboidId);  for (int i=0; i < parentCuboidIdActualLength; i++) {    if ((mask & cuboidId) > 0) {      bytesLength+=rowKeyColumnLength.get(i);    }    mask=mask >> 1;  }  int space=0;  boolean isMemoryHungry=false;  for (  MeasureDesc measureDesc : cubeSegment.getCubeDesc().getMeasures()) {    if (measureDesc.getFunction().getMeasureType().isMemoryHungry()) {      isMemoryHungry=true;    }    DataType returnType=measureDesc.getFunction().getReturnDataType();    space+=returnType.getStorageBytesEstimate();  }  bytesLength+=space;  double ret=1.0 * bytesLength * rowCount / (1024L * 1024L);  if (isMemoryHungry) {    double cuboidSizeMemHungryRatio=kylinConf.getJobCuboidSizeMemHungryRatio();    logger.info("Cube is memory hungry, storage size estimation multiply " + cuboidSizeMemHungryRatio);    ret*=cuboidSizeMemHungryRatio;  } else {    double cuboidSizeRatio=kylinConf.getJobCuboidSizeRatio();    logger.info("Cube is not memory hungry, storage size estimation multiply " + cuboidSizeRatio);    ret*=cuboidSizeRatio;  }  logger.info("Cuboid " + cuboidId + " has "+ rowCount+ " rows, each row size is "+ bytesLength+ " bytes."+ " Total size is "+ ret+ "M.");  return ret;}  }
class C{  public static int EINTR(){  return Errno.EINTR.intValue();}  }
class C{  private List<String> prepareApplicableTaxes(final Property property){  LOGGER.debug("Entered into prepareApplTaxes");  LOGGER.debug("prepareApplTaxes: property: " + property);  final List<String> applicableTaxes=new ArrayList<String>();  if (!property.getPropertyDetail().getPropertyTypeMaster().getCode().equals(OWNERSHIP_TYPE_VAC_LAND)) {    applicableTaxes.add(DEMANDRSN_CODE_GENERAL_TAX);    applicableTaxes.add(DEMANDRSN_CODE_UNAUTHORIZED_PENALTY);    applicableTaxes.add(DEMANDRSN_CODE_EDUCATIONAL_CESS);  } else {    applicableTaxes.add(DEMANDRSN_CODE_VACANT_TAX);  }  applicableTaxes.add(DEMANDRSN_CODE_LIBRARY_CESS);  if (isCorporation)   applicableTaxes.add(DEMANDRSN_CODE_SEWERAGE_TAX);  if (isPrimaryServiceChrApplicable)   applicableTaxes.add(DEMANDRSN_CODE_PRIMARY_SERVICE_CHARGES);  LOGGER.debug("prepareApplTaxes: applicableTaxes: " + applicableTaxes);  LOGGER.debug("Exiting from prepareApplTaxes");  return applicableTaxes;}  }
class C{  public static byte[] copyToByteArray(File in) throws IOException {  Assert.notNull(in,"No input File specified");  return copyToByteArray(new BufferedInputStream(new FileInputStream(in)));}  }
class C{  private boolean checkClassExtendsCompliance(){  if (mExtendedClass != null) {    Class<?> superClass=mClass.getSuperclass();    return superClass != null && (superClass.getCanonicalName().equals(mExtendedClass) || mAbsoluteClassName.equals("android.hardware.SensorManager"));  }  return true;}  }
class C{  @Override public void handlePeriodicMaintenance(Operation maintenance){  if (HostService.inUnitTests) {    return;  }  try {    getHost().schedule(null,ThreadLocalRandom.current().nextInt(1,DEFAULT_MAX_PING_WAIT_TIME_MILLIS),TimeUnit.MILLISECONDS);  } catch (  Exception exception) {    ServiceUtils.logWarning(this,"Handle maintenance failed " + exception.getMessage());    maintenance.complete();  }}  }
class C{  public Builder defaultTitleTypefacePath(String typefacePath){  this.defaultTitleTypefacePath=typefacePath;  return this;}  }
class C{  private final void updateOplogEntryId(long v){  long curVal;  do {    curVal=this.oplogEntryId.get();    if (curVal >= v) {      return;    }  } while (!this.oplogEntryId.compareAndSet(curVal,v));}  }
class C{  private void addToLine(Line line,Point item,int index){  line.itemCount++;  line.totalWidth+=item.x;  line.maxHeight=item.y > line.maxHeight ? item.y : line.maxHeight;  if (item.y == line.maxHeight) {    line.maxHeightIndex=index;  }}  }
class C{  protected void initialize(){  Object imageSource=this.layer.getValue(AVKey.IMAGE);  if (imageSource == null)   imageSource=DEFAULT_IMAGE;  this.setImageSource(imageSource);}  }
class C{  public boolean isVersionStrict(){  return serializer.isVersionStrict();}  }
class C{  private Screen packScreen(Cursor c){  Screen screen=new Screen();  screen.id=c.getLong(ID_INDEX);  screen.rank=c.getInt(SCREEN_RANK_INDEX);  return screen;}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1){  return new ImmutableCollections.Map1<K,V>(k1,v1);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public void addMethodRef(Class clazz,ConfigurationMethodRef methodInvocationConfig){  this.methodInvocationReferences.put(clazz.getName(),methodInvocationConfig);}  }
class C{  private void gotoLockViewActivity(){  Intent intent=new Intent();  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.setClass(this,LockViewActivity.class);  intent.setAction(LockViewActivity.ACTION_LOCK_DECODE);  startActivity(intent);  finish();}  }
class C{  public static String decrypt(String input,String key,String algorithm,byte[] ivOrSalt,int iterations,String encoding,String charset) throws PageException {  try {    if (charset == null)     charset=DEFAULT_CHARSET;    if (encoding == null)     encoding=DEFAULT_ENCODING;    byte[] baInput=Coder.decode(encoding,input);    byte[] decrypted=decrypt(baInput,key,algorithm,ivOrSalt,iterations);    return new String(decrypted,charset);  } catch (  Throwable t) {    throw Caster.toPageException(t);  }}  }
class C{  public void reload(String why){  mFullPhotoPaths=mRootDir.list(MediaScanner.JPG_FILENAME_FILTER);  if ((mFullPhotoPaths != null) && (mFullPhotoPaths.length == 0)) {    mFullPhotoPaths=null;    Log.i(Global.LOG_CONTEXT,mDebugPrefix + why + "AdapterArrayHelper.refreshLocal("+ mRootDir+ ") "+ 0);  } else   if (mFullPhotoPaths != null) {    if (Global.debugEnabled) {      Log.i(Global.LOG_CONTEXT,mDebugPrefix + why + "AdapterArrayHelper.refreshLocal("+ mRootDir+ ") "+ mFullPhotoPaths.length);    }    String parentDirString=mRootDir.getAbsolutePath();    for (int i=0; i < mFullPhotoPaths.length; i++) {      mFullPhotoPaths[i]=parentDirString + "/" + mFullPhotoPaths[i];    }  }}  }
class C{  protected UserRunnerStatus stopStatus(UserRunnerStatus status){  RunnerStatus updatedStatus=status.getProject().getCodenvy().runner().stop(status.getProject().getInnerReference(),status.getInnerStatus().processId()).execute();  return new DefaultUserRunnerStatus(updatedStatus,status.getProject());}  }
class C{  public KeyStoreHistory(KeyStore keyStore,File file,Password password){  this.file=file;  this.name=file.getName();  initialState=new KeyStoreState(this,keyStore,password);  currentState=initialState;  savedState=initialState;}  }
class C{  public Analyzer includeR2(){  includeR2=true;  return this;}  }
class C{  public static String toString(char[] self){  return InvokerHelper.toString(self);}  }
class C{  public Segments(List<Clustering<?>> clusterings){  super("cluster pair segments","pair-segments");  this.clusterings=clusterings;  this.clusteringsCount=clusterings.size();  segments=new TreeMap<>();  numclusters=new int[clusteringsCount];  clusters=new ArrayList<>(clusteringsCount);  int clusteringIndex=0;  for (  Clustering<?> clr : clusterings) {    List<? extends Cluster<?>> curClusters=clr.getAllClusters();    clusters.add(curClusters);    numclusters[clusteringIndex]=curClusters.size();    clusteringIndex++;  }  recursivelyFill(clusters);  for (  Segment seg : segments.keySet()) {    actualPairs+=seg.getPairCount();  }}  }
class C{  public static void createExplosion(IEntityBomb bomb,World world,double x,double y,double z,float radius,float damage,boolean canGrief){  NCExplosion explosion=new NCExplosion(world,(Entity)bomb,x,y,z,radius).setDamage(damage);  BombType type=bomb.getType();  explosion.setMotionFactor(bomb.getMotionFactor());  explosion.scalesWithDistance=(damage == 0.0F);  explosion.isSmoking=canGrief;  explosion.ignoreLiquids=(type == BombType.BOMB_STANDARD || type == BombType.BOMB_FIRE || type == BombType.BOMB_WATER);  explosion.ignoreLiquidType=(type == BombType.BOMB_FIRE ? 2 : (type == BombType.BOMB_WATER ? 1 : 0));  float f=bomb.getDestructionFactor();  if (world.provider.isHellWorld && type != BombType.BOMB_FIRE) {    f*=0.5F;  }  explosion.restrictExplosionBy(f);  explosion.doExplosionA();  explosion.doExplosionB(true);}  }
class C{  public static Object[] evaluate(EvolutionState state,int threadNum,Object[] inputs,VectorIndividualCGP ind){  nodeMap.get(threadNum).clear();  expressionMap.get(threadNum).clear();  VectorSpeciesCGP s=(VectorSpeciesCGP)ind.species;  Object[] outputs=new Object[s.numOutputs];  int[] gi=null;  float[] gf=null;  boolean isFloat=false;  if (ind instanceof IntegerVectorIndividual)   gi=((IntegerVectorIndividual)ind).genome; else {    gf=((FloatVectorIndividual)ind).genome;    isFloat=true;  }  boolean expression=false;  StringBuffer sb=null;  if (ind.expression == null) {    expression=true;    sb=new StringBuffer();  }  for (int i=0; i < outputs.length; i++) {    add(expression,sb,"o" + i + " = ");    outputs[i]=evalNode(threadNum,expression,inputs,sb,ind.getGenome(),isFloat ? s.interpretFloat(gf.length - 1 - i,gf) : gi[gi.length - 1 - i],s);  }  if (expression)   ind.expression=sb;  return outputs;}  }
class C{  protected CCOrbitCamera(float t,float r,float dr,float z,float dz,float x,float dx){  super(t);  radius=r;  deltaRadius=dr;  angleZ=z;  deltaAngleZ=dz;  angleX=x;  deltaAngleX=dx;  radDeltaZ=ccMacros.CC_DEGREES_TO_RADIANS(dz);  radDeltaX=ccMacros.CC_DEGREES_TO_RADIANS(dx);}  }
class C{  public DisambiguationRequest(final Activity activity,final ICallback<DisambiguationResponse> callback,final ILogger logger){  mActivity=activity;  mCallback=callback;  mLogger=logger;}  }
class C{  public boolean isFocusTraversable(JComboBox c){  return !comboBox.isEditable();}  }
class C{  public static Related im(String protocol,String handle){  return new Related(protocol + ":" + handle);}  }
class C{  public Map<ArgType,List<ArgType>> consumeGenericMap(){  if (!lookAhead('<')) {    return Collections.emptyMap();  }  Map<ArgType,List<ArgType>> map=new LinkedHashMap<ArgType,List<ArgType>>(2);  consume('<');  while (true) {    if (lookAhead('>') || next() == STOP_CHAR) {      break;    }    String id=consumeUntil(':');    if (id == null) {      LOG.error("Can't parse generic map: {}",sign);      return Collections.emptyMap();    }    tryConsume(':');    List<ArgType> types=consumeExtendsTypesList();    map.put(ArgType.genericType(id),types);  }  consume('>');  return map;}  }
class C{  public void addListener(final IDebuggerTemplateListener listener){  listeners.addListener(listener);}  }
class C{  public boolean isColumnVisible(TableColumn aColumn){  return (tableColumns.indexOf(aColumn) >= 0);}  }
class C{  public DecodingException(HumanReadableText key,String s){  super(s);  this.key=key;}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public void removeBurpCertificate(BurpCertificate burpCertificate){  burpCertificateStore.removeCertificate(burpCertificate);  setStatus("Certificate removed.");  setCertificateTree();}  }
class C{  public static boolean isTelephonyEnabled(Context context){  TelephonyManager tm=(TelephonyManager)context.getSystemService(context.TELEPHONY_SERVICE);  return tm != null && tm.getSimState() == TelephonyManager.SIM_STATE_READY;}  }
class C{  public static ByteBuffer resizeByteBuffer(ByteBuffer buf,long size){  ByteBuffer ret=ByteBuffer.allocateDirect((int)size);  if (ret != null) {    if (null != buf) {      ret.put(buf);      ret.flip();    }  }  return ret;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public RowValueFilter(WritableComparable<List<KeyValue>> comparator){  this.comparator=comparator;}  }
class C{  public final void add(Matrix3d m1,Matrix3d m2){  this.m00=m1.m00 + m2.m00;  this.m01=m1.m01 + m2.m01;  this.m02=m1.m02 + m2.m02;  this.m10=m1.m10 + m2.m10;  this.m11=m1.m11 + m2.m11;  this.m12=m1.m12 + m2.m12;  this.m20=m1.m20 + m2.m20;  this.m21=m1.m21 + m2.m21;  this.m22=m1.m22 + m2.m22;}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof LayerHandler) {    LayerHandler lh=(LayerHandler)someObj;    if (lh != getLayerHandler()) {      Debug.message("bc","LayersMenu asked to remove LayerHandler that is not the same as what is currently held - ignoring request.");      return;    }    Debug.message("bc","LayersMenu.childrenRemoved: removing LayerHandler");    setLayerHandler(null);    setEdit(null);  }  if (someObj instanceof LayersPanel) {    LayersPanel lp=(LayersPanel)someObj;    if (lp != getLayersPanel()) {      Debug.message("bc","LayersMenu asked to remove LayersPanel that is not the same as what is currently held - ignoring request.");      return;    }    Debug.message("bc","LayersMenu.childrenRemoved: removing LayersPanel");    setLayersPanel(null);    setEdit(null);  }}  }
class C{  public void connectInput(SharedObject<T> input){  this.input=input;}  }
class C{  public static Map<Volume,Volume> makeVplexToSrdfVolumeMap(DbClient dbClient,List<URI> vplexVolumeURIs){  Map<Volume,Volume> vplexToSrdfVolumeMap=new HashMap<Volume,Volume>();  for (  URI vplexVolumeURI : vplexVolumeURIs) {    Volume vplexVolume=dbClient.queryObject(Volume.class,vplexVolumeURI);    if (vplexVolume != null) {      Volume srdfVolume=getSrdfVolumeFromVplexVolume(dbClient,vplexVolume);      if (srdfVolume != null) {        vplexToSrdfVolumeMap.put(vplexVolume,srdfVolume);      }    }  }  return vplexToSrdfVolumeMap;}  }
class C{  @Override protected void profileCreated(Profile profile){  this.regionAdvisor.incrementBucketCount(profile);  super.profileCreated(profile);  if (updateRedundancy() > 0) {    this.notifyAll();  }  this.regionAdvisor.updateBucketStatus(this.getBucket().getId(),profile.peerMemberId,false);  if (logger.isDebugEnabled()) {    logger.debug("Profile added {} Profile : {}",getBucket().getFullPath(),profile);  }synchronized (this) {    updateServerBucketProfile();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:02.348 -0500",hash_original_method="6EDABC37CCD87E86BEFC5F3C9AF87B04",hash_generated_method="2C5637A65B8FF550DAE40DB6E4B3C633") public static final Uri buildFolderUri(long folderId){  return ContentUris.withAppendedId(CONTENT_URI_DEFAULT_FOLDER,folderId);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.STATECHART_ROOT;}  }
class C{  static protected HashSet<String> scanContentForHosts(CharSequence content){  HashSet<String> set=new HashSet<String>();  Matcher mat=uriPattern.matcher(content);  while (mat.find()) {    String found=mat.group();    Matcher cleanMat=uriCleanup.matcher(found);    if (cleanMat.find()) {      found=cleanMat.group(1);    }    cleanMat=uriCleanup2.matcher(found);    if (cleanMat.find()) {      found=cleanMat.replaceAll("");    }    cleanMat=uriCleanup3.matcher(found);    if (cleanMat.find()) {      found="mailto://" + cleanMat.group(1) + cleanMat.group(2);    }    cleanMat=schemePattern.matcher(found);    if (!cleanMat.find()) {      if (found.matches("^(?i)www\\d*\\..*")) {        found="http://" + found;      } else       if (found.matches("^(?i)ftp\\..*")) {        found="ftp://" + found;      }    }    String host=hostFromUriStr(found);    if (null != host) {      host=host.toLowerCase();      if (!set.contains(host)) {        set.add(host);      }    }  }  mat=emailAddrPattern.matcher(content);  while (mat.find()) {    String found=mat.group();    debugOut("******** mailfound=\"" + found + "\"");    found="mailto://" + found;    debugOut("*******6 mailfoundfound=\"" + found + "\" after cleanup 6");    String host=hostFromUriStr(found);    if (null != host) {      host=host.toLowerCase();      if (!set.contains(host)) {        set.add(host);      }    }  }  return set;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=enumToVector(super.listOptions());  result.addElement(new Option("\tThe number of clusters (default " + defaultNumClusters() + ")","k",1,"-k <num>"));  result.addElement(new Option("\tSet pattern to grid (default is random).\n" + "\tThis flag cannot be used at the same time as flag I.\n" + "\tThe pattern is random, if neither flag G nor flag I is set.","G",0,"-G"));  result.addElement(new Option("\tSet pattern to sine (default is random).\n" + "\tThis flag cannot be used at the same time as flag I.\n" + "\tThe pattern is random, if neither flag G nor flag I is set.","I",0,"-I"));  result.addElement(new Option("\tThe range of number of instances per cluster (default " + defaultMinInstNum() + ".."+ defaultMaxInstNum()+ ").\n"+ "\tLower number must be between 0 and 2500,\n"+ "\tupper number must be between 50 and 2500.","N",1,"-N <num>..<num>"));  result.addElement(new Option("\tThe range of radius per cluster (default " + defaultMinRadius() + ".."+ defaultMaxRadius()+ ").\n"+ "\tLower number must be between 0 and SQRT(2), \n"+ "\tupper number must be between SQRT(2) and SQRT(32).","R",1,"-R <num>..<num>"));  result.addElement(new Option("\tThe distance multiplier (default " + defaultDistMult() + ").","M",1,"-M <num>"));  result.addElement(new Option("\tThe number of cycles (default " + defaultNumCycles() + ").","C",1,"-C <num>"));  result.addElement(new Option("\tFlag for input order is ORDERED. If flag is not set then \n" + "\tinput order is RANDOMIZED. RANDOMIZED is currently not \n" + "\timplemented, therefore is the input order always ORDERED.","O",0,"-O"));  result.addElement(new Option("\tThe noise rate in percent (default " + defaultNoiseRate() + ").\n"+ "\tCan be between 0% and 30%. (Remark: The original \n"+ "\talgorithm only allows noise up to 10%.)","P",1,"-P <num>"));  return result.elements();}  }
class C{  public boolean contains(final StringBuilder s){  for (  Dictionary dict : this.dictionaries.values()) {    if (dict.contains(s)) {      return true;    }  }  return false;}  }
class C{  public boolean isOrderingAsAdded(){  return mOrderingAsAdded;}  }
class C{  public boolean knowsInstruction(BytecodeInstruction instruction){  if (instruction == null)   throw new IllegalArgumentException("null given");  if (instruction.hasBasicBlockSet())   return containsVertex(instruction.getBasicBlock());  for (  BasicBlock block : vertexSet())   if (block.containsInstruction(instruction))   return true;  return false;}  }
class C{  public EaseOutIn(){}  }
class C{  public static SSLContext initSslContext(SSLContext sslContext,KeyStore trustStore,TrustManagerFactory trustManagerFactory) throws GeneralSecurityException {  trustManagerFactory.init(trustStore);  sslContext.init(null,trustManagerFactory.getTrustManagers(),null);  return sslContext;}  }
class C{  public JythonThread(Script owner,String[] args){  super(owner,args);}  }
class C{  public static void v(String tag,String s){  if (LDJSLOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s);}  }
class C{  public ExceptionsAttribute(ConstPool cp){  super(cp,tag);  byte[] data=new byte[2];  data[0]=data[1]=0;  this.info=data;}  }
class C{  public static double roundDownZ(final double startValue){  return startValue - zStep;}  }
class C{  @Deprecated public static Source fromURL(URL url,String description) throws IOException {  CompilerAsserts.neverPartOfCompilation("do not call Source.fromURL from compiled code");  Content content=URLSourceImpl.get(url,description);  return new SourceImpl(content);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public boolean isSaveable(){  return saveable;}  }
class C{  public synchronized void close(){  if (!this.mIsClosed) {    this.mSocket.close();    this.mIsClosed=true;  }}  }
class C{  @Nullable public String askPassword(final String username,boolean resetPassword,final String lastError){  String error=processLastError(resetPassword,lastError);  return PasswordSafePromptDialog.askPassword(myProject,GitBundle.getString("ssh.password.title"),GitBundle.message("ssh.password.message",username),GitSSHGUIHandler.class,"PASSWORD:" + username,resetPassword,error);}  }
class C{  public void clearWalletBusyListeners(){  walletBusyListeners.clear();}  }
class C{  public MatsimMatricesReader(final Matrices matrices,final Scenario scenario){  this.matrices=matrices;  this.scenario=scenario;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isDisabledWrites(final String name){  return disabledShards.contains(name);}  }
class C{  public ContainerDescription(){}  }
class C{  public boolean validateReadType(Class targetType){  try {    getReadMember(targetType);    return true;  } catch (  NameNotFoundException e) {    return false;  }}  }
class C{  public BarChartGui(final GenericFrame frame,final BarChartComponent component){  super(frame,component);  setPreferredSize(PREFERRED_SIZE);  actionManager=new PlotActionManager(this);  setLayout(new BorderLayout());  JButton deleteButton=new JButton("Delete");  deleteButton.setActionCommand("Delete");  deleteButton.addActionListener(this);  JButton addButton=new JButton("Add");  addButton.setActionCommand("Add");  addButton.addActionListener(this);  JPanel buttonPanel=new JPanel();  buttonPanel.add(deleteButton);  buttonPanel.add(addButton);  createAttachMenuBar();  add("Center",chartPanel);  add("South",buttonPanel);}  }
class C{  public static Rectangle transformRect(AffineTransform af,Rectangle src){  Rectangle dest=new Rectangle(0,0,0,0);  src=absRect(src);  Point p1=new Point(src.x,src.y);  p1=transformPoint(af,p1);  dest.x=p1.x;  dest.y=p1.y;  dest.width=(int)(src.width * af.getScaleX());  dest.height=(int)(src.height * af.getScaleY());  return dest;}  }
class C{  protected LookAheadImpl(){  super();}  }
class C{  private String toMatrixString(int[][] counts,int[] clusterTotals,Instances inst) throws Exception {  StringBuffer ms=new StringBuffer();  int maxval=0;  for (int i=0; i < m_numClusters; i++) {    for (int j=0; j < counts[i].length; j++) {      if (counts[i][j] > maxval) {        maxval=counts[i][j];      }    }  }  int Cwidth=1 + Math.max((int)(Math.log(maxval) / Math.log(10)),(int)(Math.log(m_numClusters) / Math.log(10)));  ms.append("\n");  for (int i=0; i < m_numClusters; i++) {    if (clusterTotals[i] > 0) {      ms.append(" ").append(Utils.doubleToString(i,Cwidth,0));    }  }  ms.append("  <-- assigned to cluster\n");  for (int i=0; i < counts[0].length; i++) {    for (int j=0; j < m_numClusters; j++) {      if (clusterTotals[j] > 0) {        ms.append(" ").append(Utils.doubleToString(counts[j][i],Cwidth,0));      }    }    ms.append(" | ").append(inst.classAttribute().value(i)).append("\n");  }  return ms.toString();}  }
class C{  @Override public synchronized void close(){  this.countCache.clear();  try {    removeDelayed();  } catch (  final IOException e) {  }  if (!this.ram.isEmpty())   this.ram.dump(this.array.newContainerBLOBFile(),(int)Math.min(MemoryControl.available() / 3,this.writeBufferSize),true);  this.flushShallRun=false;  if (this.flushThread != null)   try {    this.flushThread.join();  } catch (  final InterruptedException e) {  }  this.ram.close();  this.array.close();}  }
class C{  public Name(byte[] encoding) throws IOException {  DerInputStream in=new DerInputStream(encoding);  if (in.getEndOffset() != encoding.length) {    throw new IOException("Wrong content length");  }  ASN1.decode(in);  this.rdn=(List<List<AttributeTypeAndValue>>)in.content;}  }
class C{  public Comparator<? super K> keyComparator(){  return keyComparator;}  }
class C{  private String internalErrorMsg(){  return "Internal server error. Please see log file for details.";}  }
class C{  public boolean contains(String subtype){  return subtype != null && this.containsKey(subtype.toLowerCase());}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE:  return isSetStore();case KEYS:return isSetKeys();}throw new IllegalStateException();}  }
class C{  public TransformerHandler newTransformerHandler(Templates templates) throws TransformerConfigurationException {  try {    TransformerImpl transformer=(TransformerImpl)templates.newTransformer();    transformer.setURIResolver(m_uriResolver);    TransformerHandler th=(TransformerHandler)transformer.getInputContentHandler(true);    return th;  } catch (  TransformerConfigurationException ex) {    if (m_errorListener != null) {      try {        m_errorListener.fatalError(ex);        return null;      } catch (      TransformerConfigurationException ex1) {        throw ex1;      }catch (      TransformerException ex1) {        throw new TransformerConfigurationException(ex1);      }    }    throw ex;  }}  }
class C{  public static String capitalise(String str){  if (str == null) {    return null;  } else   if (str.length() == 0) {    return "";  } else {    return new StringBuilder(str.length()).append(Character.toTitleCase(str.charAt(0))).append(str.substring(1)).toString();  }}  }
class C{  protected List<Action> computeActions(){  return new ArrayList<Action>();}  }
class C{  public void loadTranslate(float x,float y){  loadIdentity();  mMat[6]=x;  mMat[7]=y;}  }
class C{  private boolean isTypedTimeFullyLegal(){  if (mIs24HourView) {    int[] values=getEnteredTime(null);    return (values[0] >= 0 && values[1] >= 0 && values[1] < 60);  } else {    return (mTypedTimes.contains(getAmOrPmKeyCode(AM)) || mTypedTimes.contains(getAmOrPmKeyCode(PM)));  }}  }
class C{  public KeyedObjects2D(){  this.rowKeys=new java.util.ArrayList();  this.columnKeys=new java.util.ArrayList();  this.rows=new java.util.ArrayList();}  }
class C{  public TimeSeriesChartDemo1(String title){  super(title);  ChartPanel chartPanel=(ChartPanel)createDemoPanel();  chartPanel.setPreferredSize(new java.awt.Dimension(500,270));  setContentPane(chartPanel);}  }
class C{  public HypervolumeContributionFitnessEvaluator(Problem problem,double offset){  super();  this.problem=problem;  this.offset=offset;}  }
class C{  protected DoubleDataStore computeIDOS(DBIDs ids,KNNQuery<O> knnQ,DoubleDataStore intDims,DoubleMinMax idosminmax){  WritableDoubleDataStore ldms=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_STATIC);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("ID Outlier Scores for objects",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    final KNNList neighbors=knnQ.getKNNForDBID(iter,k_r);    double sum=0.;    int cnt=0;    for (DoubleDBIDListIter neighbor=neighbors.iter(); neighbor.valid(); neighbor.advance()) {      if (DBIDUtil.equal(iter,neighbor)) {        continue;      }      final double id=intDims.doubleValue(neighbor);      sum+=id > 0 ? 1.0 / id : 0.;      if (++cnt == k_r) {        break;      }    }    final double id_q=intDims.doubleValue(iter);    final double idos=id_q > 0 ? id_q * sum / cnt : 0.;    ldms.putDouble(iter,idos);    idosminmax.put(idos);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  return ldms;}  }
class C{  public int compareTo(EightPuzzleNode n){  return toString().compareTo(n.toString());}  }
class C{  public void eliminarUdoc(IUnidadDocumentalEliminacionVO udoc){  Locale locale=getServiceClient().getLocale();  LoggingEvent logEvent=getLogginEvent(ArchivoActions.FONDOS_MODULE_BAJA_UDOC);  DataLoggingEvent logData=logEvent.getDataLoggingEvent(ArchivoObjects.OBJECT_UDOC,udoc.getIdudoc());  logData.addDetalle(locale,ArchivoDetails.SELECCION_COD_UDOC,udoc.getCodigo());  logData.addDetalle(locale,ArchivoDetails.SELECCION_COD_UDOC,udoc.getExpedienteudoc());  checkPermission(FondosSecurityManager.BAJAUDOC_ACTION);  eliminarUdocBasico(udoc.getIdudoc());}  }
class C{  public void addLine(float lat_1,float lon_1,int x1,int y1,int x2,int y2,LinkProperties properties) throws IOException {  LinkLine.write(lat_1,lon_1,x1,y1,x2,y2,properties,link.dos);}  }
class C{  String generateRandomMessage(){  StringBuilder res=new StringBuilder();  for (  String[] element : TEMPLATES) {    res.append(element[Rand.rand(element.length)]);    res.append(" ");  }  return res.toString().trim();}  }
class C{  @Inline private static void putfieldStoreBarrierHelper(Assembler asm,BaselineCompilerImpl compiler,GPR offset,int locationMetadata,NormalMethod barrier){  asm.emitPUSH_Reg(offset);  asm.emitPUSH_Imm(locationMetadata);  MethodReference method=barrier.getMemberRef().asMethodReference();  compiler.genParameterRegisterLoad(method,false);  genNullCheck(asm,T0);  asm.generateJTOCcall(barrier.getOffset());}  }
class C{  public SerializableConverter(final Mapper mapper,final ReflectionProvider reflectionProvider,final ClassLoaderReference classLoaderReference){  super(mapper,new UnserializableParentsReflectionProvider(reflectionProvider));  this.classLoaderReference=classLoaderReference;}  }
class C{  public static byte[] convertJWSConcatenatedToDEREncodedSignature(final byte[] concatenatedSignatureValue) throws IOException {  final byte[] r=new byte[33];  final byte[] s=new byte[33];  System.arraycopy(concatenatedSignatureValue,0,r,1,32);  System.arraycopy(concatenatedSignatureValue,32,s,1,32);  final BigInteger rBigInteger=new BigInteger(r);  final BigInteger sBigInteger=new BigInteger(s);  final ByteArrayOutputStream bos=new ByteArrayOutputStream();  final DERSequenceGenerator seqGen=new DERSequenceGenerator(bos);  seqGen.addObject(new ASN1Integer(rBigInteger.toByteArray()));  seqGen.addObject(new ASN1Integer(sBigInteger.toByteArray()));  seqGen.close();  bos.close();  final byte[] derEncodedSignatureValue=bos.toByteArray();  return derEncodedSignatureValue;}  }
class C{  public static Method findMethod(Object self,String name,String desc){  Method m=findMethod2(self.getClass(),name,desc);  if (m == null)   error(self.getClass(),name,desc);  return m;}  }
class C{  @Override public void run(){  try {    audioLine.open();    audioLine.start();    audioLine.flush();    AudioFormat format=audioLine.getFormat();    byte[] buffer=new byte[4000];    while (audioLine.isOpen()) {      boolean systemTurnBeforeRead=outputSpeech != null;      int numBytesRead=audioLine.read(buffer,0,buffer.length);      if (systemTurnBeforeRead && outputSpeech == null) {        audioLine.drain();        continue;      } else       if (outputSpeech != null || numBytesRead == 0 || (!voiceActivityDetection && inputSpeech == null)) {        if (speechPanel != null) {          speechPanel.clearVolume();        }        continue;      }      double rms=AudioUtils.getRMS(buffer,format);      currentVolume=(currentVolume + rms) / 2;      if (rms < backgroundVolume) {        backgroundVolume=rms;      } else {        backgroundVolume+=(rms - backgroundVolume) * 0.003;      }      if (speechPanel != null) {        speechPanel.updateVolume((int)currentVolume);      }      double difference=currentVolume - backgroundVolume;      if (voiceActivityDetection && inputSpeech == null && difference > VOLUME_THRESHOLD) {        startRecording();      }      if (inputSpeech != null && !inputSpeech.isFinal()) {        inputSpeech.write(buffer);        if (voiceActivityDetection && difference < VOLUME_THRESHOLD / 10) {          stopRecording();        }      }    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isRegionDestroy(){  return this.opType == OP_TYPE_DESTROY && isRegion();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String inputFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  String str;  int numImages=0;  int progress=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double cdedNoData=-32767;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  FileInputStream fis=null;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      inputFile=imageFiles[i];      if (!((new File(inputFile)).exists())) {        showFeedback("DEM file does not exist.");        return;      }      if (inputFile.lastIndexOf(".") >= 0) {        String extension=inputFile.substring(inputFile.lastIndexOf("."));        whiteboxHeaderFile=inputFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=inputFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      WhiteboxRaster wbr=null;      fis=new FileInputStream(inputFile);      rows=0;      cols=0;      row=0;      col=0;      long validValueNum=0;      int oldProgress=-1;      byte[] bytes=new byte[1024];      int remaining=bytes.length;      int blockNumber=1;      while (true) {        int read=fis.read(bytes,bytes.length - remaining,remaining);        if (read >= 0) {          remaining-=read;          str=new String(bytes,Charset.forName("US-ASCII"));          if (remaining == 0) {            if (blockNumber == 1) {              String producer=str.substring(40,100).trim();              String southwest=str.substring(109,135);              String processCode=str.substring(135,136).trim();              String originCode=str.substring(140,144).trim();              int demLevelCode=Integer.parseInt(str.substring(144,150).trim());              int elevationPattern=Integer.parseInt(str.substring(150,156).trim());              String str2=str.substring(156,162).trim();              String refSystem="";switch (str2) {case "0":                refSystem="geographic";              break;case "1":            refSystem="UTM";          break;case "2":        refSystem="state plane";      break;default :    refSystem="geographic";}String xyUnits="";str2=str.substring(533,539).trim();switch (str2) {case "0":  xyUnits="radians";break;case "1":xyUnits="feet";break;case "2":xyUnits="meters";break;case "3":xyUnits="arc seconds";break;default :xyUnits="arc seconds";}if (xyUnits.equals("arc seconds")) {xyUnits="degrees";}String zUnits="";str2=str.substring(539,545).trim();switch (str2) {case "1":zUnits="feet";break;case "2":zUnits="meters";break;default :zUnits="meters";}west=Double.parseDouble(str.substring(546,570).trim()) / 3600;south=Double.parseDouble(str.substring(570,594).trim()) / 3600;north=Double.parseDouble(str.substring(618,642).trim()) / 3600;east=Double.parseDouble(str.substring(652,676).trim()) / 3600;cols=Integer.parseInt(str.substring(858,864).trim());;rows=1201;fw=new FileWriter(whiteboxHeaderFile,false);bw=new BufferedWriter(fw);out=new PrintWriter(bw,true);str1="Min:\t" + Double.toString(Integer.MAX_VALUE);out.println(str1);str1="Max:\t" + Double.toString(Integer.MIN_VALUE);out.println(str1);str1="North:\t" + Double.toString(north);out.println(str1);str1="South:\t" + Double.toString(south);out.println(str1);str1="East:\t" + Double.toString(east);out.println(str1);str1="West:\t" + Double.toString(west);out.println(str1);str1="Cols:\t" + Integer.toString(cols);out.println(str1);str1="Rows:\t" + Integer.toString(rows);out.println(str1);str1="Data Type:\t" + "float";out.println(str1);str1="Z Units:\t" + zUnits;out.println(str1);str1="XY Units:\t" + xyUnits;out.println(str1);str1="Projection:\t" + refSystem;out.println(str1);str1="Data Scale:\tcontinuous";out.println(str1);str1="Preferred Palette:\t" + "spectrum.pal";out.println(str1);str1="NoData:\t" + whiteboxNoData;out.println(str1);if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {str1="Byte Order:\t" + "LITTLE_ENDIAN";} else {str1="Byte Order:\t" + "BIG_ENDIAN";}out.println(str1);wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");row=rows - 1;col=0;} else {String[] splitStr=str.split(" ");if (wbr == null) {showFeedback("Error reading file.");return;}for (String splitStr1 : splitStr) {if (!splitStr1.trim().isEmpty()) {validValueNum++;if (validValueNum >= 10) {z=Double.parseDouble(splitStr1);if (z != cdedNoData) {wbr.setValue(row,col,z);} else {wbr.setValue(row,col,whiteboxNoData);}row--;if (row == -1) {validValueNum=0;row=rows - 1;col++;progress=(int)(100f * col / (cols - 1));if (progress > oldProgress) {updateProgress(progress);oldProgress=progress;}}}}}}blockNumber++;remaining=bytes.length;}} else {if (remaining < bytes.length) {}break;}}if (wbr == null) {showFeedback("Error reading file.");return;}wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");wbr.addMetadataEntry("Created on " + new Date());wbr.flush();wbr.findMinAndMaxVals();wbr.close();returnData(whiteboxHeaderFile);}} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {if (out != null || bw != null) {out.flush();out.close();}if (fis != null) {try {fis.close();} catch (IOException e) {}}updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void clearTransitionListeners(){  listeners.clear();}  }
class C{  public void remove(QueueEvent event) throws KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_remove_event");  try {    String path=event.getId();    String responsePath=dir + "/" + response_prefix+ path.substring(path.lastIndexOf("-") + 1);    if (zookeeper.exists(responsePath,true)) {      zookeeper.setData(responsePath,event.getBytes(),true);    } else {      LOG.info("Response ZK path: " + responsePath + " doesn't exist."+ "  Requestor may have disconnected from ZooKeeper");    }    try {      zookeeper.delete(path,-1,true);    } catch (    KeeperException.NoNodeException ignored) {    }  }  finally {    time.stop();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.472 -0400",hash_original_method="D43146211DD30099A852EB07F596E6C2",hash_generated_method="4DB923C1EA43FB43A94C35364896E453") private static boolean contains(String value,int start,int length,String criteria){  return contains(value,start,length,new String[]{criteria});}  }
class C{  public void quickPop(int n){  m_firstFree-=n;}  }
class C{  public void clear(){  TableEntry table[]=m_Table;  for (int index=table.length; --index >= 0; ) {    table[index]=null;  }  m_Count=0;}  }
class C{  public static String generatePassword(){  return RandomStringUtils.randomAlphanumeric(DEF_COUNT);}  }
class C{  public static String[] convertIntoLines(String input){  try {    ILineTracker tracker=new DefaultLineTracker();    tracker.set(input);    int size=tracker.getNumberOfLines();    String result[]=new String[size];    for (int i=0; i < size; i++) {      IRegion region=tracker.getLineInformation(i);      int offset=region.getOffset();      result[i]=input.substring(offset,offset + region.getLength());    }    return result;  } catch (  BadLocationException e) {    return null;  }}  }
class C{  @Override public void run(int connID,String[] args){  if (args.length == 1) {    server.sendServerChat(connID,"Server Side nova command");    server.sendServerChat(connID,"/nova print : will print all of your current nova networks and unlinked units.");    server.sendServerChat(connID,"/nova print id : will print the network status for the Unit with ID id.");    server.sendServerChat(connID,"/nova link id1 id2 : will link the units with ID id1 and id2.");    server.sendServerChat(connID,"+++Will Disconnect them from all prior nets.");    server.sendServerChat(connID,"/nova link id1 id2 id3 : will link the three units with ID id1 id2 and id3.");    server.sendServerChat(connID,"+++Will Disconnect them from all prior nets.");    server.sendServerChat(connID,"/nova unlink : will unlink all your novaCEWS units.");    server.sendServerChat(connID,"/nova unlink id : will unlink unit with ID id from all nova networks.");  }  try {    if (args.length > 1) {      String cmd=args[1];      if (cmd.equalsIgnoreCase("print")) {        if (args.length > 2) {          int id=Integer.parseInt(args[2]);          server.sendServerChat(connID,strListNetwork(connID,id,true));        } else {          server.sendServerChat(connID,strListNetworks(connID,true));        }      } else       if (cmd.equalsIgnoreCase("printcurrent")) {        if (args.length > 2) {          int id=Integer.parseInt(args[2]);          server.sendServerChat(connID,strListNetwork(connID,id,false));        } else {          server.sendServerChat(connID,strListNetworks(connID,false));        }      } else       if (cmd.equalsIgnoreCase("debug")) {        debug(connID,server);      } else       if (cmd.equalsIgnoreCase("link")) {        if (args.length > 4) {          int id1=Integer.parseInt(args[2]);          int id2=Integer.parseInt(args[3]);          int id3=Integer.parseInt(args[4]);          server.sendServerChat(connID,strLink3(connID,id1,id2,id3));        } else         if (args.length > 3) {          int id1=Integer.parseInt(args[2]);          int id2=Integer.parseInt(args[3]);          server.sendServerChat(connID,strLink2(connID,id1,id2));        }      } else       if (cmd.equalsIgnoreCase("unlink")) {        if (args.length > 2) {          int id=Integer.parseInt(args[2]);          server.sendServerChat(connID,strUnlinkID(connID,id));        } else {          server.sendServerChat(connID,strUnlinkAll(connID));        }      } else {        String failstr=args[0];        for (int i=1; i < args.length; i++) {          failstr+=" " + args[i];        }        server.sendServerChat(connID,"I do not understand " + failstr + ". /nova for help.\n");      }    }  } catch (  NumberFormatException nfe) {    server.sendServerChat(connID,"Error parsing the command. NFE");  }catch (  NullPointerException npe) {    server.sendServerChat(connID,"Error parsing the command. NPE");  }catch (  IndexOutOfBoundsException ioobe) {    server.sendServerChat(connID,"Error parsing the command. IOOBE");  }}  }
class C{  public boolean existDirtyModules(){  final List<IEditorReference> dirtyEditors=new LinkedList<IEditorReference>();  IEditorReference[] references=UIHelper.getActivePage().getEditorReferences();  if (references != null) {    for (int i=0; i < references.length; i++) {      try {        if (references[i].isDirty() && references[i].getEditorInput().getName().endsWith(".tla")) {          dirtyEditors.add(references[i]);        }      } catch (      PartInitException e) {        Activator.getDefault().logError("Error getting unsaved resources.",e);      }    }  }  return (dirtyEditors.size() > 0);}  }
class C{  public int offset(){  return offset;}  }
class C{  Type coerce(Type etype,Type ttype){  if (etype.tsym.type == ttype.tsym.type)   return etype;  if (etype.isNumeric()) {    Object n=etype.constValue();switch (ttype.getTag()) {case BYTE:      return syms.byteType.constType(0 + (byte)intValue(n));case CHAR:    return syms.charType.constType(0 + (char)intValue(n));case SHORT:  return syms.shortType.constType(0 + (short)intValue(n));case INT:return syms.intType.constType(intValue(n));case LONG:return syms.longType.constType(longValue(n));case FLOAT:return syms.floatType.constType(floatValue(n));case DOUBLE:return syms.doubleType.constType(doubleValue(n));}}return ttype;}  }
class C{  private boolean isLastInRun(int tabIndex){  int run=getRunForTab(tabPane.getTabCount(),tabIndex);  int lastIndex=lastTabInRun(tabPane.getTabCount(),run);  return tabIndex == lastIndex;}  }
class C{  public static FilePath createFilePath(@NotNull String fileName,@Nullable String... childFileNames){  FilePath root=new FilePath(fileName,null);  FilePath cursor=root;  if (childFileNames != null) {    for (    String file : childFileNames) {      cursor.child=new FilePath(file,null);      cursor=cursor.child;    }  }  return root;}  }
class C{  @DSComment("File Information") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.457 -0500",hash_original_method="7B792954ECFC131D8AE4D0E193C4885E",hash_generated_method="0EB677AB132959DC534CAC8C90D1B544") public boolean canRead(){  return false;}  }
class C{  public UnableToControlProcessException(final String message,final Throwable thr){  super(message,thr);}  }
class C{  @Override public boolean remove(Object object){  return removeElement(object);}  }
class C{  public static String cleanVirtualHost(String host){  host=substringBefore(host,'\0');  if (host.endsWith(".")) {    host=host.substring(0,host.length() - 1);  }  return host;}  }
class C{  public static ANRequest.PostRequestBuilder post(String url){  return new ANRequest.PostRequestBuilder(url);}  }
class C{  private CGraphPanelSettingsSynchronizer(){}  }
class C{  protected void addTableColumnChoices(ActionListener listener,DataLineModel<?,?> model,LimeJTable table){  for (int i=0; i < model.getColumnCount(); i++) {    JMenuItem item=createColumnMenuItem(listener,model,table,i);    _menu.add(item);  }}  }
class C{  public RAck(){  super(NAME);}  }
class C{  public void clearUndo(){  undo=new UndoStorage(currentStorage,apiStorage);  Main.triggerMenuInvalidationStatic();}  }
class C{  public boolean isAvailable(){  return available;}  }
class C{  public void pushMatrix(Matrix m){  if (m == null) {    String msg=Logging.getMessage("nullValue.MatrixIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.matrixStack.push(m);}  }
class C{  public void read(NBTTagCompound nbtTags){  if (nbtTags.hasKey("stored")) {    stored=GasStack.readFromNBT(nbtTags.getCompoundTag("stored"));  }  if (nbtTags.hasKey("maxGas") && nbtTags.getInteger("maxGas") != 0) {    maxGas=nbtTags.getInteger("maxGas");  }}  }
class C{  private void present(){  glUseProgram(quadProgram);  glBindVertexArray(vao);  glBindTexture(GL_TEXTURE_2D,tex);  glBindSampler(0,this.sampler);  glDrawArrays(GL_TRIANGLES,0,6);  glBindSampler(0,0);  glBindTexture(GL_TEXTURE_2D,0);  glBindVertexArray(0);  glUseProgram(0);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public boolean isIsSoftwareFcoe(){  return isSoftwareFcoe;}  }
class C{  public static Pair<ZooKeeperServerShim,Integer> runZookeeperOnAnyPort(File zkDir) throws Exception {  return runZookeeperOnAnyPort((int)(Math.random() * 10000 + 7000),zkDir);}  }
class C{  public void accept(final MethodVisitor mv){  AbstractInsnNode insn=first;  while (insn != null) {    insn.accept(mv);    insn=insn.next;  }}  }
class C{  void yrot(double theta){  theta*=(pi / 180);  double ct=Math.cos(theta);  double st=Math.sin(theta);  float Nxx=(float)(xx * ct + zx * st);  float Nxy=(float)(xy * ct + zy * st);  float Nxz=(float)(xz * ct + zz * st);  float Nxo=(float)(xo * ct + zo * st);  float Nzx=(float)(zx * ct - xx * st);  float Nzy=(float)(zy * ct - xy * st);  float Nzz=(float)(zz * ct - xz * st);  float Nzo=(float)(zo * ct - xo * st);  xo=Nxo;  xx=Nxx;  xy=Nxy;  xz=Nxz;  zo=Nzo;  zx=Nzx;  zy=Nzy;  zz=Nzz;}  }
class C{  public Long loginUser(String SID,String username,String userpass) throws AxisFault {  return getUserServiceProxy().loginUser(SID,username,userpass);}  }
class C{  protected static boolean isTickTuple(Tuple tuple){  return Constants.SYSTEM_COMPONENT_ID.equals(tuple.getSourceComponent()) && Constants.SYSTEM_TICK_STREAM_ID.equals(tuple.getSourceStreamId());}  }
class C{  public double[][][] computeLocal(int states[][][],int h,int j){  initialise();  addObservations(states,h,j);  return computeLocalFromPreviousObservations(states,h,j);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MCostType[");  sb.append(get_ID()).append("-").append(getName()).append("]");  return sb.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getGenerate_();}  }
class C{  public boolean validateReceipt(List<String> sendTopics,List<Integer> expectedQosList,int expectedBatchNumber,int nPublishers,List<byte[]> sentBytes,boolean expectOrdered) throws MqttException, InterruptedException {  final String methodName="validateReceipt";  int expectedMessageNumbers[]=new int[nPublishers];  for (int i=0; i < nPublishers; i++) {    expectedMessageNumbers[i]=0;  }  long waitMilliseconds=10000;  long totWait=0;  int messageNo=0;  while (true) {    long startWait=System.currentTimeMillis();    ReceivedMessage receivedMessage=receiveNext(waitMilliseconds);    if (receivedMessage == null) {      break;    }    messageNo++;    totWait+=(System.currentTimeMillis() - startWait);    waitMilliseconds=Math.max(totWait / messageNo,500);    byte[] payload=receivedMessage.message.getPayload();    String payloadString=new String(payload);    if (!payloadString.startsWith("Batch Message payload :")) {      report("Received invalid payload\n" + "Received:" + payloadString);      report("Payload did not start with {" + "Batch Message payload :" + "}");      return false;    }    String[] payloadParts=payloadString.split(":");    if (payloadParts.length != 5) {      report("Received invalid payload\n" + "Received:" + payloadString);      report("Payload was not of expected format");      return false;    }    try {      int batchNumber=Integer.parseInt(payloadParts[1]);      if (batchNumber != expectedBatchNumber) {        report("Received invalid payload\n" + "Received:" + payloadString);        report("batchnumber" + batchNumber + " was not the expected value "+ expectedBatchNumber);        return false;      }    } catch (    NumberFormatException e) {      report("Received invalid payload\n" + "Received:" + payloadString);      report("batchnumber was not a numeric value");      return false;    }    int publisher=-1;    try {      publisher=Integer.parseInt(payloadParts[2]);      if ((publisher < 0) || (publisher >= nPublishers)) {        report("Received invalid payload\n" + "Received:" + payloadString);        report("publisher " + publisher + " was not in the range 0 - "+ (nPublishers - 1));        return false;      }    } catch (    NumberFormatException e) {      report("Received invalid payload\n" + "Received:" + payloadString);      report("publisher was not a numeric value");      return false;    }    if (expectOrdered) {      try {        int messageNumber=Integer.parseInt(payloadParts[3]);        if (messageNumber == expectedMessageNumbers[publisher]) {          expectedMessageNumbers[publisher]+=1;        } else {          report("Received invalid payload\n" + "Received:" + payloadString);          report("messageNumber " + messageNumber + " was received out of sequence - expected value was "+ expectedMessageNumbers[publisher]);          return false;        }      } catch (      NumberFormatException e) {        report("Received invalid payload\n" + "Received:" + payloadString);        report("messageNumber was not a numeric value");        return false;      }    }    int location;    for (location=0; location < sentBytes.size(); location++) {      if (Arrays.equals(payload,sentBytes.get(location))) {        break;      }    }    String sendTopic=null;    int expectedQos=-1;    if (location < sentBytes.size()) {      sentBytes.remove(location);      sendTopic=sendTopics.remove(location);      expectedQos=expectedQosList.remove(location);    } else {      report("Received invalid payload\n" + "Received:" + payloadString);      for (      byte[] expectedPayload : sentBytes) {        report("\texpected message :" + new String(expectedPayload));      }      return false;    }    if (!sendTopic.equals(receivedMessage.topic)) {      report(" Received invalid topic sent=" + sendTopic + " received topic="+ receivedMessage.topic);      return false;    }    if (expectedQos != receivedMessage.message.getQos()) {      report("expectedQos=" + expectedQos + " != Received Qos="+ receivedMessage.message.getQos());      return false;    }  }  if (!sentBytes.isEmpty()) {    for (    byte[] missedPayload : sentBytes) {      report("Did not receive message \n" + new String(missedPayload));    }    return false;  }  return true;}  }
class C{  public float norm(){  return (float)((inphase() * inphase()) + (quadrature() * quadrature()));}  }
class C{  public static boolean needsGuard(RVMMethod callee){  return !(callee.isFinal() || callee.getDeclaringClass().isFinal() || callee.isPrivate()|| callee.isObjectInitializer()|| callee.isStatic());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ScaleAndIndexes indexes(int... indexes){  return new ScaleAndIndexes(scale,indexes.clone());}  }
class C{  public static String fromByteArray(byte[] bytes){  return new String(asCharArray(bytes));}  }
class C{  public void accumulateBug(BugInstance bug,BytecodeScanningDetector visitor){  SourceLineAnnotation source=SourceLineAnnotation.fromVisitedInstruction(visitor);  accumulateBug(bug,source);}  }
class C{  public ListResponse recommendations(String packageName,RECOMMENDATION_TYPE type,Integer offset,Integer numberOfResult) throws IOException {  ResponseWrapper responseWrapper=executeGETRequest(RECOMMENDATIONS_URL,new String[][]{{"c","3"},{"doc",packageName},{"rt",(type == null) ? null : String.valueOf(type.value)},{"o",(offset == null) ? null : String.valueOf(offset)},{"n",(numberOfResult == null) ? null : String.valueOf(numberOfResult)}});  return responseWrapper.getPayload().getListResponse();}  }
class C{  public final void removeHelperText(@NonNull final CharSequence helperText){  ensureNotNull(helperText,"The helper text may not be null");  ensureNotEmpty(helperText,"The helper text may not be empty");  helperTexts.remove(helperText);  verifyPasswordStrength();}  }
class C{  public double[] readDoubleArray(){  try {    DataInput dis;    if (bigEndian) {      dis=new DataInputStream(stream);    } else {      dis=new LEDataInputStream(stream);    }    Vector<Double> doubleV=new Vector<Double>();    try {      while (true) {        double f=dis.readDouble();        doubleV.add(new Double(f));      }    } catch (    EOFException eof) {      stream.close();    }    double[] array=new double[doubleV.size()];    for (int i=0; i < array.length; i++) {      array[i]=((Double)doubleV.get(i)).doubleValue();    }    return array;  } catch (  IOException e) {    throw new IllegalArgumentException("InputStream is unreadable : " + e.toString());  }}  }
class C{  public E peekBackwards(){  int prevPos=(pos + size - 1) % size;  if (prevPos >= data.size() || pos == start) {    return null;  }  return data.get(prevPos);}  }
class C{  public void createSubUsageScenario04() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO04_PERUNIT_DAY",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO04_PERUNIT_DAY",serviceDetails,basicSetup.getCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.daysToMillis(7.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO04_PERUNIT_DAY",subDetails);}  }
class C{  private void verifyContainingType(FieldDescriptor field){  if (field.getContainingType() != type) {    throw new IllegalArgumentException("FieldDescriptor does not match message type.");  }}  }
class C{  @Override public void close() throws IOException {  buffer.close();}  }
class C{  public String stringValue(){  return ((String)value);}  }
class C{  public TIntIntHash(int initialCapacity){  super(initialCapacity);  no_entry_key=(int)0;  no_entry_value=(int)0;}  }
class C{  protected final void eat(Scanner.TokenType type,String errorMessage) throws ParserException, IOException {  assertToken(type,errorMessage);  getToken();}  }
class C{  private static Uri createDirectoryAndSaveFile(Context context,InputStream inputStream,String fileName){  Bitmap imageToSave=BitmapFactory.decodeStream(inputStream);  if (imageToSave == null)   return null;  File directory=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) + "/ImageDir");  if (!directory.exists()) {    File newDirectory=new File(directory.getAbsolutePath());    newDirectory.mkdirs();  }  File file=new File(directory,getTemporaryFilename(fileName));  if (file.exists())   file.delete();  try (FileOutputStream outputStream=new FileOutputStream(file)){    imageToSave.compress(Bitmap.CompressFormat.JPEG,100,outputStream);    outputStream.flush();  } catch (  Exception e) {    return null;  }  String absolutePathToImage=file.getAbsolutePath();  ContentValues values=new ContentValues();  values.put(Images.Media.TITLE,fileName);  values.put(Images.Media.DESCRIPTION,fileName);  values.put(Images.Media.DATE_TAKEN,System.currentTimeMillis());  values.put(Images.ImageColumns.BUCKET_DISPLAY_NAME,file.getName().toLowerCase(Locale.US));  values.put("_data",absolutePathToImage);  ContentResolver cr=context.getContentResolver();  cr.insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,values);  Log.d(TAG,"absolute path to image file is " + absolutePathToImage);  return Uri.parse(absolutePathToImage);}  }
class C{  public void deselectAll(){  MusicTrackListFragment musicTrackDetailFragment=(MusicTrackListFragment)getSupportFragmentManager().findFragmentById(R.id.track_detail_container);  if (musicTrackDetailFragment != null)   musicTrackDetailFragment.deselectAll();}  }
class C{  public NicknameEntry(){  super();  getCategories().add(NICKNAME_CATEGORY);}  }
class C{  public void testInit01() throws Exception {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  createKeys();  KeyAgreement[] kAgs=createKAs();  SecureRandom random=null;  AlgorithmParameterSpec aps=null;  DHParameterSpec dhPs=new DHParameterSpec(new BigInteger("56"),new BigInteger("56"));  for (int i=0; i < kAgs.length; i++) {    try {      kAgs[i].init(publKey);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,new SecureRandom());      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,random);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,dhPs);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,aps);      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }    try {      kAgs[i].init(publKey,dhPs,new SecureRandom());      fail("InvalidKeyException must be throw");    } catch (    InvalidKeyException e) {    }  }}  }
class C{  @Override public boolean contains(Object obj){  if (!(obj instanceof Struct)) {    return false;  }  Struct s=(Struct)obj;  if (!this.structType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return contains(s);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int elemNum=getInt(stack);  Object obj=stack.pop();  Object rv=null;  try {    if (obj instanceof java.util.List)     rv=((java.util.List)obj).remove(elemNum);  } catch (  Exception e) {  }  return rv;}  }
class C{  public void addColumn(Column column){  if (column != null) {    columns.add(column);  }}  }
class C{  private static void deleteDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    return;  }  directory.deleteOnExit();  if (!isSymlink(directory)) {    cleanDirectoryOnExit(directory);  }}  }
class C{  public TextLayout(AttributedCharacterIterator text,FontRenderContext frc){  if (text == null) {    throw new IllegalArgumentException("Null iterator passed to TextLayout constructor.");  }  int start=text.getBeginIndex();  int limit=text.getEndIndex();  if (start == limit) {    throw new IllegalArgumentException("Zero length iterator passed to TextLayout constructor.");  }  int len=limit - start;  text.first();  char[] chars=new char[len];  int n=0;  for (char c=text.first(); c != CharacterIterator.DONE; c=text.next()) {    chars[n++]=c;  }  text.first();  if (text.getRunLimit() == limit) {    Map<? extends Attribute,?> attributes=text.getAttributes();    Font font=singleFont(chars,0,len,attributes);    if (font != null) {      fastInit(chars,font,attributes,frc);      return;    }  }  standardInit(text,chars,frc);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  private String parseColumn(String value){  return value.trim();}  }
class C{  public T customMetric(int index,String value){  customMetrics.put("cm" + index,value);  return (T)this;}  }
class C{  public Client updateClient(Client client){  InetAddress address=this.address != null ? this.address : client.getAddress();  int port=this.port != null ? this.port : client.getPort();  LinkObject[] linkObject=this.objectLinks != null ? this.objectLinks : client.getObjectLinks();  long lifeTimeInSec=this.lifeTimeInSec != null ? this.lifeTimeInSec : client.getLifeTimeInSec();  BindingMode bindingMode=this.bindingMode != null ? this.bindingMode : client.getBindingMode();  String smsNumber=this.smsNumber != null ? this.smsNumber : client.getSmsNumber();  Date lastUpdate=new Date();  Client.Builder builder=new Client.Builder(client.getRegistrationId(),client.getEndpoint(),address,port,client.getRegistrationEndpointAddress());  builder.lwM2mVersion(client.getLwM2mVersion()).lifeTimeInSec(lifeTimeInSec).smsNumber(smsNumber).bindingMode(bindingMode).objectLinks(linkObject).registrationDate(client.getRegistrationDate()).lastUpdate(lastUpdate).additionalRegistrationAttributes(client.getAdditionalRegistrationAttributes());  return builder.build();}  }
class C{  public synchronized void insertElementAt(Object obj,int index){  modCount++;  if (index > elementCount) {    throw new ArrayIndexOutOfBoundsException(index + " > " + elementCount);  }  ensureCapacityHelper(elementCount + 1);  System.arraycopy(elementData,index,elementData,index + 1,elementCount - index);  elementData[index]=obj;  elementCount++;}  }
class C{  public static void main(String... args) throws Exception {  String[] pages={"quickstart.html","installation.html","tutorial.html","features.html","performance.html","advanced.html","grammar.html","functions.html","datatypes.html","build.html","history.html","faq.html"};  StringBuilder buff=new StringBuilder();  for (  String fileName : pages) {    String text=getContent(fileName);    for (    String page : pages) {      text=StringUtils.replaceAll(text,page + "#","#");    }    text=disableRailroads(text);    text=removeHeaderFooter(fileName,text);    buff.append(text);  }  String finalText=buff.toString();  File output=new File(BASE_DIR,"onePage.html");  PrintWriter writer=new PrintWriter(new FileWriter(output));  writer.println("<html><head><meta http-equiv=\"Content-Type\" " + "content=\"text/html;charset=utf-8\" /><title>");  writer.println("H2 Documentation");  writer.println("</title><link rel=\"stylesheet\" type=\"text/css\" " + "href=\"stylesheetPdf.css\" /></head><body>");  writer.println("<h1>H2 Database Engine</h1>");  writer.println("<p>Version " + Constants.getFullVersion() + "</p>");  writer.println(finalText);  writer.println("</body></html>");  writer.close();}  }
class C{  static byte[] discardWhitespace(byte[] data){  byte groomedData[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {switch (data[i]) {case (byte)' ':case (byte)'\n':case (byte)'\r':case (byte)'\t':      break;default :    groomedData[bytesCopied++]=data[i];}}byte packedData[]=new byte[bytesCopied];System.arraycopy(groomedData,0,packedData,0,bytesCopied);return packedData;}  }
class C{  public CrewQuartersCargoBay(double space,int doors){  totalSpace=(int)space / 7;  weight=space;  currentSpace=(int)space / 7;  this.doors=doors;}  }
class C{  public T customDimension(int index,String value){  customDimensions.put("cd" + index,value);  return (T)this;}  }
class C{  public CColorCriteriumPanel(final CColorCriterium colorCriterium,final ZyGraph graph){  super(new BorderLayout());  m_colorCriterium=colorCriterium;  m_selectedColorPanel.addListener(m_colorPanelListener);  m_selectedColorPanel.addMouseListener(m_colorPanelListener);  initPanel(graph);}  }
class C{  protected void sequence_DoStatement(ISerializationContext context,DoStatement semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ITERATION_STATEMENT__STATEMENT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ITERATION_STATEMENT__STATEMENT));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.ITERATION_STATEMENT__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.ITERATION_STATEMENT__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0(),semanticObject.getStatement());  feeder.accept(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public ExpireCleanControl(Duration expire){  this.expire=expire;}  }
class C{  @Override public void displayCycle(Cycle cycle){  this.cycle=cycle;  if (alreadyInitializedRecyclerList) {    populateRecyclerList();  } else {    initRecyclerView();    alreadyInitializedRecyclerList=true;    populateRecyclerList();  }}  }
class C{  public Builder withType(Member.Type type){  this.type=Assert.notNull(type,"type");  return this;}  }
class C{  public void addCmrRepositoryChangeListener(CmrRepositoryChangeListener repositoryChangeListener){  cmrRepositoryChangeListeners.add(repositoryChangeListener);  for (  CmrRepositoryDefinition cmrRepositoryDefinition : cmrRepositoryDefinitions) {    cmrRepositoryDefinition.addCmrRepositoryChangeListener(repositoryChangeListener);  }}  }
class C{  public static double[][] extractSelectedTimePoints(double[][] data,int[][] timePoints,int columnInTimePoints,int timeOffset){  int columns=data[0].length;  double[][] extracted=new double[timePoints.length][columns];  for (int t=0; t < timePoints.length; t++) {    System.arraycopy(data[timePoints[t][columnInTimePoints] + timeOffset],0,extracted[t],0,columns);  }  return extracted;}  }
class C{  public void testArabicSort(){  assertQ("Collated Sort: ",req("fl","id","q","sort_ar:[\u0698 TO \u0633\u0633]","sort","sort_ar asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=12]","//result/doc[2]/int[@name='id'][.=1]");}  }
class C{  public static String shortFormat(Date dt){  ensureInited();  return dateFormatter.shortFormat(dt);}  }
class C{  public static String createXMLDeptsGroupsUser(List results){  Object object=null;  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_USERS_TEXT);  Iuserdepthdr dept=null;  Iusergrouphdr group=null;  Iuseruserhdr user=null;  Iuserldapuserhdr userLdap=null;  Iuserldapgrphdr groupLdap=null;  Element deptsGroupsUsersElement=null;  for (Iterator it=results.iterator(); it.hasNext(); ) {    object=it.next();    deptsGroupsUsersElement=root.addElement(XML_USER_TEXT);    if (object instanceof Iuserdepthdr) {      dept=(Iuserdepthdr)object;      deptsGroupsUsersElement.addElement(XML_ID_TEXT).setText(dept.getId().toString());      deptsGroupsUsersElement.addElement(XML_NAME_TEXT).add(DocumentHelper.createCDATA(dept.getName()));    } else     if (object instanceof Iusergrouphdr) {      group=(Iusergrouphdr)object;      deptsGroupsUsersElement.addElement(XML_ID_TEXT).setText(group.getId().toString());      deptsGroupsUsersElement.addElement(XML_NAME_TEXT).add(DocumentHelper.createCDATA(group.getName()));    } else     if (object instanceof Iuseruserhdr) {      user=(Iuseruserhdr)object;      deptsGroupsUsersElement.addElement(XML_ID_TEXT).setText(user.getId().toString());      deptsGroupsUsersElement.addElement(XML_NAME_TEXT).add(DocumentHelper.createCDATA(user.getName()));    } else     if (object instanceof Iuserldapuserhdr) {      userLdap=(Iuserldapuserhdr)object;      deptsGroupsUsersElement.addElement(XML_ID_TEXT).setText(Integer.toString(userLdap.getId()));      deptsGroupsUsersElement.addElement(XML_NAME_TEXT).add(DocumentHelper.createCDATA(userLdap.getLdapfullname()));    } else     if (object instanceof Iuserldapgrphdr) {      groupLdap=(Iuserldapgrphdr)object;      deptsGroupsUsersElement.addElement(XML_ID_TEXT).setText(Integer.toString(groupLdap.getId()));      deptsGroupsUsersElement.addElement(XML_NAME_TEXT).add(DocumentHelper.createCDATA(groupLdap.getLdapfullname()));    }  }  return document.asXML();}  }
class C{  public ServiceConfig(VirtualHost virtualHost,PathMapping pathMapping,Service<?,?> service,@Nullable String loggerName){  this(pathMapping,service,loggerName);  this.virtualHost=requireNonNull(virtualHost,"virtualHost");}  }
class C{  public void restoreProgress(final ProgressDialog progressDialog){  progressDialog.setTitle(mTitle);  progressDialog.setMessage(mMessage);  progressDialog.setProgress(mProgress);}  }
class C{  public static ValueCompressonHolder.UnCompressValue unCompressMaxMin(DataType compDataType,DataType actualDataType){switch (compDataType) {case DATA_BYTE:    return new UnCompressMaxMinByte();case DATA_SHORT:  return new UnCompressMaxMinShort();case DATA_INT:return new UnCompressMaxMinInt();case DATA_LONG:return new UnCompressMaxMinLong();case DATA_FLOAT:return new UnCompressMaxMinFloat();default :return new UnCompressMaxMinDefault();}}  }
class C{  Map<String,byte[]> collectAttachments(final Map<String,Object> model){  final Map<String,byte[]> attachments=new HashMap<String,byte[]>();  for (  final String key : model.keySet()) {    if (key.startsWith(ATTACHMENT_PREFIX)) {      final Object attachment=model.get(key);      if (attachment instanceof byte[]) {        attachments.put(key,(byte[])attachment);      } else {        ShopCodeContext.getLog(this).error("Invalid attachment in model. Attachments must be of type 'byte[]'");      }    }  }  return attachments;}  }
class C{  public MutableDouble(){  super();}  }
class C{  public static String stripStart(String str,String strip){  if (str == null) {    return null;  }  int start=0;  int sz=str.length();  if (strip == null) {    while ((start != sz) && Character.isWhitespace(str.charAt(start))) {      start++;    }  } else {    while ((start != sz) && (strip.indexOf(str.charAt(start)) != -1)) {      start++;    }  }  return str.substring(start);}  }
class C{  public static void verifyAggregate(final QueryBase queryBase) throws VisitorException {  final ProjectionNode projection=queryBase.getProjection() == null ? null : queryBase.getProjection().isEmpty() ? null : queryBase.getProjection();  final GroupByNode groupBy=queryBase.getGroupBy() == null ? null : queryBase.getGroupBy().isEmpty() ? null : queryBase.getGroupBy();  final HavingNode having=queryBase.getHaving() == null ? null : queryBase.getHaving().isEmpty() ? null : queryBase.getHaving();  final boolean isAggregate=StaticAnalysis.isAggregate(projection,groupBy,having);  if (isAggregate) {    if (projection.isWildcard())     throw new VisitorException("Wildcard not allowed with aggregate.");    final IValueExpression<?>[] projectExprs=projection.getValueExpressions();    final IValueExpression<?>[] groupByExprs=groupBy == null ? null : groupBy.getValueExpressions();    final IConstraint[] havingExprs=having == null ? null : having.getConstraints();    try {      new GroupByState(projectExprs,groupByExprs,havingExprs);    } catch (    IllegalArgumentException ex) {      throw new VisitorException("Bad aggregate",ex);    }  }}  }
class C{  private boolean isContinueWork(){  long maxSpoutPending=TypeUtils.getLong(config.get(Config.TOPOLOGY_MAX_SPOUT_PENDING));  return topologyState.equals(TopologyAPI.TopologyState.RUNNING) && ((!ackEnabled && collector.isOutQueuesAvailable()) || (ackEnabled && collector.isOutQueuesAvailable() && collector.numInFlight() < maxSpoutPending) || (ackEnabled && !streamInQueue.isEmpty()));}  }
class C{  public static Description createSuiteDescription(String name,Serializable uniqueId,Annotation... annotations){  return new Description(null,name,uniqueId,annotations);}  }
class C{  public synchronized boolean deleteSubmission(AccessStructure struct){  if (struct.getState() < 300)   return deleteEntry(struct.getUsername(),struct.getSubmissionID()); else   return deleteResult(struct.getUsername(),struct.getSubmissionID());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.229 -0500",hash_original_method="2D7E47036B50BB575C62CBE22B38A3ED",hash_generated_method="13D305BFC1071355C8CD298FADE3E731") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public void removeCopyStreamListener(CopyStreamListener listener){  internalListeners.removeListener(listener);}  }
class C{  public static String normalizeSkCzNumber(String numberAsString){  if (numberAsString == null) {    return null;  }  Matcher matcher=CZ_SK_PATTERN.matcher(numberAsString);  if (matcher.find()) {    return matcher.group(1);  }  return null;}  }
class C{  public ExperimentCrossValidation(String aExperimentName,Class<? extends TCMachineLearningAdapter> mlAdapter,int aNumFolds) throws TextClassificationException {  this(aExperimentName,mlAdapter,aNumFolds,null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().getEnablePC());}  }
class C{  public Region replace(String text,boolean regExReplace) throws BadLocationException {  return null;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!MobileEnv.initWeb(config))   throw new ServletException("WStatus.init");}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof KeyedObject)) {    return false;  }  KeyedObject that=(KeyedObject)obj;  if (!ObjectUtilities.equal(this.key,that.key)) {    return false;  }  if (!ObjectUtilities.equal(this.object,that.object)) {    return false;  }  return true;}  }
class C{  @SuppressWarnings("unchecked") public boolean transformMethod(MethodNode mn){  boolean changed=false;  ListIterator<AbstractInsnNode> iterator=mn.instructions.iterator();  while (iterator.hasNext()) {    AbstractInsnNode node=iterator.next();    if (node instanceof MethodInsnNode) {      MethodInsnNode methodNode=(MethodInsnNode)node;      if (methodNode.owner.equals("java/util/Collection") || methodNode.owner.equals("java/util/List") || methodNode.owner.equals("java/util/ArrayList")|| methodNode.owner.equals("java/util/Set")|| methodNode.owner.equals("java/util/Queue")|| methodNode.owner.equals("java/util/SortedSet")) {        if (methodNode.name.equals("isEmpty")) {          logger.debug("Test Transformation of " + methodNode.owner + "."+ methodNode.name+ " -> "+ Type.getInternalName(ContainerHelper.class)+ "."+ "collectionIsEmpty");          MethodInsnNode n=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(ContainerHelper.class),"collectionIsEmpty",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(Collection.class)}),false);          InsnList il=createNewIfThenElse(n);          mn.instructions.insertBefore(node,il);          mn.instructions.remove(node);          TransformationStatistics.transformedContainerComparison();          changed=true;        } else         if (methodNode.name.equals("contains")) {          logger.debug("Test Transformation of " + methodNode.owner + "."+ methodNode.name+ " -> "+ Type.getInternalName(ContainerHelper.class)+ "."+ "collectionContains");          MethodInsnNode n=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(ContainerHelper.class),"collectionContains",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(Collection.class),Type.getType(Object.class)}),false);          InsnList il=createNewIfThenElse(n);          mn.instructions.insertBefore(node,il);          mn.instructions.remove(node);          TransformationStatistics.transformedContainerComparison();          changed=true;        } else         if (methodNode.name.equals("containsAll")) {          logger.debug("Test Transformation of " + methodNode.owner + "."+ methodNode.name+ " -> "+ Type.getInternalName(ContainerHelper.class)+ "."+ "collectionContainsAll");          MethodInsnNode n=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(ContainerHelper.class),"collectionContainsAll",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(Collection.class),Type.getType(Collection.class)}),false);          InsnList il=createNewIfThenElse(n);          mn.instructions.insertBefore(node,il);          mn.instructions.remove(node);          TransformationStatistics.transformedContainerComparison();          changed=true;        }      } else       if (methodNode.owner.equals("java/util/Map")) {        if (methodNode.name.equals("isEmpty")) {          logger.debug("Test Transformation of " + methodNode.owner + "."+ methodNode.name+ " -> "+ Type.getInternalName(ContainerHelper.class)+ "."+ "mapIsEmpty");          MethodInsnNode n=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(ContainerHelper.class),"mapIsEmpty",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(Map.class)}),false);          InsnList il=createNewIfThenElse(n);          mn.instructions.insertBefore(node,il);          mn.instructions.remove(node);          TransformationStatistics.transformedContainerComparison();          changed=true;        } else         if (methodNode.name.equals("containsKey")) {          logger.debug("Test Transformation of " + methodNode.owner + "."+ methodNode.name+ " -> "+ Type.getInternalName(ContainerHelper.class)+ "."+ "mapContainsKey");          MethodInsnNode n=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(ContainerHelper.class),"mapContainsKey",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(Map.class),Type.getType(Object.class)}),false);          InsnList il=createNewIfThenElse(n);          mn.instructions.insertBefore(node,il);          mn.instructions.remove(node);          TransformationStatistics.transformedContainerComparison();          changed=true;        } else         if (methodNode.name.equals("containsValue")) {          logger.debug("Test Transformation of " + methodNode.owner + "."+ methodNode.name+ " -> "+ Type.getInternalName(ContainerHelper.class)+ "."+ "mapContainsValue");          MethodInsnNode n=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(ContainerHelper.class),"mapContainsValue",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.getType(Map.class),Type.getType(Object.class)}),false);          InsnList il=createNewIfThenElse(n);          mn.instructions.insertBefore(node,il);          mn.instructions.remove(node);          TransformationStatistics.transformedContainerComparison();          changed=true;        }      }    }  }  return changed;}  }
class C{  public void addConfigured(final ResourceCollection resources){  compareTo.add(resources);}  }
class C{  private String postRPChangeVpoolSteps(Workflow workflow,String waitFor,List<VolumeDescriptor> volumeDescriptors,String taskId){  List<VolumeDescriptor> rpVolumeDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_EXISTING_SOURCE},null);  if (rpVolumeDescriptors.isEmpty()) {    return waitFor;  }  List<VolumeDescriptor> migratedBlockDataDescriptors=new ArrayList<VolumeDescriptor>();  List<URI> volumesWithMigration=new ArrayList<URI>();  if (volumeDescriptors != null) {    List<VolumeDescriptor> migrateDescriptors=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.VPLEX_MIGRATE_VOLUME},null);    if (migrateDescriptors != null && !migrateDescriptors.isEmpty()) {      s_logger.info("Data Migration detected, this is due to a change virtual pool operation on RP+VPLEX or MetroPoint.");      Iterator<VolumeDescriptor> migrationIter=migrateDescriptors.iterator();      while (migrationIter.hasNext()) {        VolumeDescriptor migrationDesc=migrationIter.next();        Migration migration=s_dbClient.queryObject(Migration.class,migrationDesc.getMigrationId());        volumesWithMigration.add(migration.getSource());        Volume migratedVolume=s_dbClient.queryObject(Volume.class,migration.getVolume());        VolumeDescriptor migratedBlockDataDesc=new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,migratedVolume.getStorageController(),migratedVolume.getId(),null,migratedVolume.getConsistencyGroup(),migrationDesc.getCapabilitiesValues());        migratedBlockDataDescriptors.add(migratedBlockDataDesc);      }    }  }  List<VolumeDescriptor> blockDataDescriptors=new ArrayList<VolumeDescriptor>();  for (  VolumeDescriptor descr : rpVolumeDescriptors) {    Volume rpExistingSource=s_dbClient.queryObject(Volume.class,descr.getVolumeURI());    if (RPHelper.isVPlexVolume(rpExistingSource,s_dbClient)) {      s_logger.info(String.format("Adding post RP Change Vpool steps for existing VPLEX source volume [%s].",rpExistingSource.getLabel()));      if (null != rpExistingSource.getAssociatedVolumes()) {        for (        String assocVolumeId : rpExistingSource.getAssociatedVolumes()) {          Volume assocVolume=s_dbClient.queryObject(Volume.class,URI.create(assocVolumeId));          if (volumesWithMigration.contains(assocVolume.getId())) {            s_logger.info(String.format("Migration exists for [%s] so no need to add this volume to a backing array CG.",assocVolume.getLabel()));            continue;          }          if (NullColumnValueGetter.isNotNullValue(assocVolume.getReplicationGroupInstance())) {            VolumeDescriptor blockDataDesc=new VolumeDescriptor(VolumeDescriptor.Type.BLOCK_DATA,assocVolume.getStorageController(),assocVolume.getId(),null,rpExistingSource.getConsistencyGroup(),descr.getCapabilitiesValues());            blockDataDescriptors.add(blockDataDesc);            assocVolume.setConsistencyGroup(rpExistingSource.getConsistencyGroup());            s_dbClient.updateObject(assocVolume);            s_logger.info(String.format("Backing volume [%s] needs to be added to CG [%s] on storage system [%s].",assocVolume.getLabel(),rpExistingSource.getConsistencyGroup(),assocVolume.getStorageController()));          }        }      }    }  }  if (!blockDataDescriptors.isEmpty()) {    waitFor=_blockDeviceController.addStepsForCreateConsistencyGroup(workflow,waitFor,blockDataDescriptors,"postRPChangeVpoolCreateCG");    waitFor=_blockDeviceController.addStepsForUpdateConsistencyGroup(workflow,waitFor,blockDataDescriptors,null);  }  blockDataDescriptors.addAll(migratedBlockDataDescriptors);  s_logger.info("Checking for Replica steps");  waitFor=_replicaDeviceController.addStepsForCreateVolumes(workflow,waitFor,blockDataDescriptors,taskId);  return waitFor;}  }
class C{  public void processSource(String[] filenames){  for (int i=0; i != filenames.length; ++i) {    String filename=filenames[i];    if (!filename.endsWith(".js")) {      addError("msg.extension.not.js",filename);      return;    }    File f=new File(filename);    String source=readSource(f);    if (source == null)     return;    String mainClassName=targetName;    if (mainClassName == null) {      String name=f.getName();      String nojs=name.substring(0,name.length() - 3);      mainClassName=getClassName(nojs);    }    if (targetPackage.length() != 0) {      mainClassName=targetPackage + "." + mainClassName;    }    Object[] compiled=compiler.compileToClassFiles(source,filename,1,mainClassName);    if (compiled == null || compiled.length == 0) {      return;    }    File targetTopDir=null;    if (destinationDir != null) {      targetTopDir=new File(destinationDir);    } else {      String parent=f.getParent();      if (parent != null) {        targetTopDir=new File(parent);      }    }    for (int j=0; j != compiled.length; j+=2) {      String className=(String)compiled[j];      byte[] bytes=(byte[])compiled[j + 1];      File outfile=getOutputFile(targetTopDir,className);      try {        FileOutputStream os=new FileOutputStream(outfile);        try {          os.write(bytes);        }  finally {          os.close();        }      } catch (      IOException ioe) {        addFormatedError(ioe.toString());      }    }  }}  }
class C{  public void write(MqttWireMessage message) throws IOException, MqttException {  final String methodName="write";  byte[] bytes=message.getHeader();  byte[] pl=message.getPayload();  out.write(bytes,0,bytes.length);  clientState.notifySentBytes(bytes.length);  int offset=0;  int chunckSize=1024;  while (offset < pl.length) {    int length=Math.min(chunckSize,pl.length - offset);    out.write(pl,offset,length);    offset+=chunckSize;    clientState.notifySentBytes(length);  }  log.fine(CLASS_NAME,methodName,"500",new Object[]{message});}  }
class C{  public HttpResponseStatus status(){  return status;}  }
class C{  public void or() throws IOException {  print("or",null);}  }
class C{  public IA32ConditionOperand flipCode(){switch (value) {case O:    value=NO;  break;case NO:value=O;break;case LLT:value=LGE;break;case LGE:value=LLT;break;case EQ:value=NE;break;case NE:value=EQ;break;case LLE:value=LGT;break;case LGT:value=LLE;break;case S:value=NS;break;case NS:value=S;break;case PE:value=PO;break;case PO:value=PE;break;case LT:value=GE;break;case GE:value=LT;break;case LE:value=GT;break;case GT:value=LE;break;default :OptimizingCompilerException.UNREACHABLE();}return this;}  }
class C{  public ExistenceIndexPair add(String s){  Long it=this.lookup.get(s);  if (it != null) {    return new ExistenceIndexPair(false,it);  }  if (!this.lookup.containsKey(s)) {    this.lookup.put(s,Long.valueOf(this.keys.size()));  }  this.keys.add(s);  return new ExistenceIndexPair(true,Long.valueOf(this.keys.size() - 1));}  }
class C{  public void append(char c){  ensureCapacity(count + 1);  buf[count++]=c;}  }
class C{  protected boolean writeMethods(DataOutputStream dd) throws IOException {  method_info mi;  int i;  for (i=0; i < methods_count; i++) {    mi=methods[i];    dd.writeShort(mi.access_flags);    dd.writeShort(mi.name_index);    dd.writeShort(mi.descriptor_index);    dd.writeShort(mi.attributes_count);    if (mi.attributes_count > 0) {      writeAttributes(dd,mi.attributes_count,mi.attributes);    }  }  return true;}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public void release(boolean fullHeap){}  }
class C{  public FileWriter(File file,boolean append) throws IOException {  super(new FileOutputStream(file,append));}  }
class C{  public final DoubleGrid2D truncate(){  double[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++)     fieldx[y]=(int)fieldx[y];  }  return this;}  }
class C{  public void verify() throws Exception {  String message=asic.getMessage();  SignatureData signatureData=asic.getSignature();  signature=new Signature(signatureData.getSignatureXml());  signerName=getSigner(message);  SignatureVerifier signatureVerifier=new SignatureVerifier(signature,signatureData.getHashChainResult(),signatureData.getHashChain());  verifyRequiredReferencesExist();  Date atDate=verifyTimestamp();  configureResourceResolvers(signatureVerifier);  signatureVerifier.setVerifySchema(false);  signatureVerifier.addPart(new MessagePart(MESSAGE,null,null));  signatureVerifier.verify(signerName,atDate);  signerCert=signatureVerifier.getSigningCertificate();  OCSPResp ocsp=signatureVerifier.getSigningOcspResponse(signerName.getXRoadInstance());  ocspDate=((BasicOCSPResp)ocsp.getResponseObject()).getProducedAt();  ocspCert=OcspVerifier.getOcspCert((BasicOCSPResp)ocsp.getResponseObject());}  }
class C{  @Nullable public static String encodeFromFile(String filename){  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[(int)(file.length() * 1.4)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    System.err.println("Error encoding from file " + filename);  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public static Settings init(String tag){  return printer.init(tag);}  }
class C{  @DataProvider(name="IllegaldataStoreCount") public Object[][] testIllegaldataStoreCount() throws Throwable {  return new Object[][]{{-1},{-5}};}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean testPassword() throws PdfSecurityException {  int count=32;  final byte[] rawValue=new byte[32];  byte[] keyValue;  for (int i=0; i < 32; i++) {    rawValue[i]=(byte)Integer.parseInt(pad[i],16);  }  byte[] encrypted=ObjectCloneFactory.cloneArray(rawValue);  if (rev == 2) {    encryptionKey=calculateKey(O,P,ID);    encrypted=decrypt(encrypted,"",true,null,false,false);  } else   if (rev >= 3) {    int keyLength=this.keyLength;    count=16;    encryptionKey=calculateKey(O,P,ID);    final byte[] originalKey=ObjectCloneFactory.cloneArray(encryptionKey);    MessageDigest md=null;    try {      md=MessageDigest.getInstance("MD5");    } catch (    final Exception e) {      LogWriter.writeLog("Exception " + e + " with digest");    }    md.update(encrypted);    keyValue=md.digest(ID);    keyValue=decrypt(keyValue,"",true,null,true,false);    final byte[] nextKey=new byte[keyLength];    for (int i=1; i <= 19; i++) {      for (int j=0; j < keyLength; j++) {        nextKey[j]=(byte)(originalKey[j] ^ i);      }      encryptionKey=nextKey;      keyValue=decrypt(keyValue,"",true,null,true,false);    }    encryptionKey=originalKey;    encrypted=new byte[32];    System.arraycopy(keyValue,0,encrypted,0,16);    System.arraycopy(rawValue,0,encrypted,16,16);  }  return compareKeys(U,encrypted,count);}  }
class C{  public static boolean areEqual(List<Bundle> bundles1,List<Bundle> bundles2){  if (bundles1 == null) {    return bundles2 == null;  } else   if (bundles2 == null) {    return false;  } else   if (bundles1 == bundles2) {    return true;  }  if (bundles1.size() != bundles2.size()) {    return false;  }  for (int i=0; i < bundles1.size(); i++) {    if (!areEqual(bundles1.get(i),bundles2.get(i))) {      return false;    }  }  return true;}  }
class C{  public static boolean regionMatches(boolean ignoreCase,Segment text,int offset,char[] match){  int length=offset + match.length;  char[] textArray=text.array;  if (length > text.offset + text.count)   return false;  for (int i=offset, j=0; i < length; i++, j++) {    char c1=textArray[i];    char c2=match[j];    if (ignoreCase) {      c1=Character.toUpperCase(c1);      c2=Character.toUpperCase(c2);    }    if (c1 != c2)     return false;  }  return true;}  }
class C{  void doSomeSweeping(boolean tryHarder){  int probes=tryHarder ? LONG_SWEEP_PROBES : SHORT_SWEEP_PROBES;  Node o, p;  final Node sweeper=this.sweeper;  boolean passedGo;  if (sweeper == null) {    o=null;    p=head;    passedGo=true;  } else {    o=sweeper;    p=o.next;    passedGo=false;  }  for (; probes > 0; probes--) {    if (p == null) {      if (passedGo)       break;      o=null;      p=head;      passedGo=true;    }    final Itr it=p.get();    final Node next=p.next;    if (it == null || it.isDetached()) {      probes=LONG_SWEEP_PROBES;      p.clear();      p.next=null;      if (o == null) {        head=next;        if (next == null) {          itrs=null;          return;        }      } else       o.next=next;    } else {      o=p;    }    p=next;  }  this.sweeper=(p == null) ? null : o;}  }
class C{  public void testGetIntrospectedProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  assertEquals(OLD_VALUE,Beans.getIntrospectedProperty(introspectedTarget,STRING_PROPERTY));  assertNull(Beans.getIntrospectedProperty(introspectedTarget,NOT_A_PROPERTY));  assertNull(Beans.getIntrospectedProperty(hashedTarget,STRING_PROPERTY));  assertNull(Beans.getIntrospectedProperty(hashedTarget,NOT_A_PROPERTY));}  }
class C{  public void resumeMigrations(List<String> migrationNames) throws VPlexApiException {  s_logger.info("Request to resume migrations on VPlex at {}",_baseURI);  _migrationMgr.resumeMigrations(migrationNames);}  }
class C{  public boolean hasProjectLabels(){  return hasRepeatingExtension(ProjectLabel.class);}  }
class C{  public final Builder addItem(final int id,@StringRes final int titleId){  bottomSheet.addItem(id,titleId);  return this;}  }
class C{  public final void removeAllHelperTextIds(@NonNull final int... resourceIds){  ensureNotNull(resourceIds,"The array may not be null");  for (  int resourceId : resourceIds) {    removeHelperTextId(resourceId);  }}  }
class C{  public String performUpdateStep(Artifact artifact,Version version,Path pathToBinaries,InstallOptions options,boolean isBinaryFromRepo) throws IOException {  return performStep(artifact,version,pathToBinaries,options,true,isBinaryFromRepo);}  }
class C{  public java.sql.Time readTime() throws SQLException {  return (java.sql.Time)getNextAttribute();}  }
class C{  @VisibleForTesting public static void overrideAccountAdderForTests(AccountAdder adder){  sInstance=adder;}  }
class C{  public void addImplicitMap(final Class<?> ownerType,final String fieldName,final Class<?> itemType,final String keyFieldName){  addImplicitMap(ownerType,fieldName,null,itemType,keyFieldName);}  }
class C{  public IndexedTriangleMesh flipVertexOrder(){  for (  AttributedFace f : faces) {    int t=f.b;    f.b=f.c;    f.c=t;    if (f.attribs != null) {      for (      int[] att : f.attribs.values()) {        t=att[1];        att[1]=att[2];        att[2]=t;      }    }  }  for (  Vec3D n : fnormals.getItems()) {    fnormals.reindex(n,n.getInverted());  }  ItemIndex<Object> vnormals=attributes.get(ATTR_VNORMALS);  if (vnormals != null) {    for (    Object n : vnormals.getItems()) {      vnormals.reindex(n,((Vec3D)n).getInverted());    }  }  return this;}  }
class C{  public static PendingIntent makeCheckAlarmPendingIntent(Context context){  return PendingIntent.getBroadcast(context,DELETE_CACHE_REQUEST_CODE,new Intent(context,DeleteCacheReceiver.class),PendingIntent.FLAG_NO_CREATE);}  }
class C{  public static File storeCatalogFile(String catalogFileName){  File folder=null;  String folderName;  int pos=catalogFileName.indexOf(Constants.FOLDER_SEPARATOR);  if (pos != -1) {    folderName=catalogFileName.substring(0,pos);    folder=new File(getGenerateFolder(),folderName);  } else {    folderName="";    folder=new File(getGenerateFolder(),folderName);  }  if (!folder.exists()) {    folder.mkdirs();  }  mapOfCatalogFolderNames.put(catalogFileName,folderName);  File result=new File(getGenerateFolder(),catalogFileName);  return result;}  }
class C{  public static Instances loadDataset(String options[],char T) throws Exception {  Instances D=null;  String filename=Utils.getOption(T,options);  if (filename == null || filename.isEmpty())   throw new Exception("[Error] You did not specify a dataset!");  File file=new File(filename);  if (!file.exists())   throw new Exception("[Error] File does not exist: " + filename);  if (file.isDirectory())   throw new Exception("[Error] " + filename + " points to a directory!");  try {    DataSource source=new DataSource(filename);    D=source.getDataSet();  } catch (  Exception e) {    e.printStackTrace();    throw new Exception("[Error] Failed to load Instances from file '" + filename + "'.");  }  return D;}  }
class C{  public NotificationChain basicSetVarDecl(VariableDeclaration newVarDecl,NotificationChain msgs){  VariableDeclaration oldVarDecl=varDecl;  varDecl=newVarDecl;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.BINDING_PROPERTY__VAR_DECL,oldVarDecl,newVarDecl);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static long readFixInt64(final InputStream input) throws IOException {  final long h=readFixInt32(input);  final long l=readFixInt32(input) & 0xFFFFFFFFL;  return (h << 32) | l;}  }
class C{  public NotificationChain basicSetExitAction(Step newExitAction,NotificationChain msgs){  Step oldExitAction=exitAction;  exitAction=newExitAction;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_STATE__EXIT_ACTION,oldExitAction,newExitAction);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public SimpleString(final byte[] data){  this.data=data;}  }
class C{  protected void parseA() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float rx=parseFloat();skipCommaSpaces();float ry=parseFloat();skipCommaSpaces();float ax=parseFloat();skipCommaSpaces();boolean laf;switch (current) {default :reportUnexpected(current);return;case '0':laf=false;break;case '1':laf=true;break;}current=reader.read();skipCommaSpaces();boolean sf;switch (current) {default :reportUnexpected(current);return;case '0':sf=false;break;case '1':sf=true;break;}current=reader.read();skipCommaSpaces();float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.arcAbs(rx,ry,ax,laf,sf,x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  public static final void sendString(Context c,String stringToSend,String chooserDialogTitle){  Intent send=new Intent(Intent.ACTION_SEND);  send.setType("text/plain");  send.putExtra(Intent.EXTRA_TEXT,stringToSend);  try {    Intent i=Intent.createChooser(send,chooserDialogTitle);    i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    c.startActivity(i);  } catch (  android.content.ActivityNotFoundException ex) {  }}  }
class C{  public ToStringBuilder append(String fieldName,byte[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public EaseOutIn(){}  }
class C{  private void commitBytesRead(int bytesRead){  if (bytesRead != C.RESULT_END_OF_INPUT) {    position+=bytesRead;  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  public HttpServerPipelineConfigurator(ServerConfig config,ServerPort port,DomainNameMapping<SslContext> sslContexts,Optional<? extends ChannelHandler> gracefulShutdownHandler){  this.config=requireNonNull(config,"config");  this.port=requireNonNull(port,"port");  this.sslContexts=sslContexts;  this.gracefulShutdownHandler=requireNonNull(gracefulShutdownHandler);}  }
class C{  @Override public void encode(WbXmlEncoder encoder,WbXmlElement element,WbXmlContent content) throws IOException {  if (!content.isString()) {    throw new IOException("The content is not a String value!");  }  long v=Long.decode(content.getString());  byte[] bytes=new byte[4];  int i;  for (i=3; i >= 0 && v > 0; i--) {    bytes[i]=(byte)(v & 0xFF);    v>>=8;  }  int start=i + 1;  encoder.writeOpaque(Arrays.copyOfRange(bytes,start,bytes.length));}  }
class C{  public void testBug63456() throws Exception {  createTable("testBug63456_latin1","(TEST VARCHAR(10)) DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci");  createTable("testBug63456_utf8","(TEST VARCHAR(10)) DEFAULT CHARACTER SET utf8");  createTable("testBug63456_utf8_bin","(TEST VARCHAR(10)) DEFAULT CHARACTER SET utf8 COLLATE utf8_bin");  this.rs=this.stmt.executeQuery("select * from testBug63456_latin1");  int precision_latin1=this.rs.getMetaData().getPrecision(1);  this.rs=this.stmt.executeQuery("select * from testBug63456_utf8");  int precision_utf8=this.rs.getMetaData().getPrecision(1);  this.rs=this.stmt.executeQuery("select * from testBug63456_utf8_bin");  int precision_utf8bin=this.rs.getMetaData().getPrecision(1);  assertEquals(precision_latin1,precision_utf8);  assertEquals(precision_utf8,precision_utf8bin);}  }
class C{  private void hasSetter(Field field,Object voInstance,StringBuffer errors){  Method[] methods=voInstance.getClass().getMethods();  for (  Method method : methods) {    if (method.getName().equalsIgnoreCase("set" + field.getName())) {      if (method.getParameterTypes().length == 1) {        return;      }    }  }  errors.append("No setter method found for field '" + field.getName() + "' of type '"+ voInstance.getClass().getName()+ "'\n");}  }
class C{  public void memberJoined(ClientMembershipEvent event){}  }
class C{  public void testSetScaleRoundHalfUp(){  String a="1231212478987482988429808779810457634781384756794987";  String b="123121247898748298842980877981045763478138";  int aScale=28;  int newScale=18;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.setScale(newScale,BigDecimal.ROUND_HALF_UP);  assertTrue("incorrect scale",bNumber.scale() == newScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(b));}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.NAMESPACE_IMPORT_SPECIFIER;}  }
class C{  public void testLongValueNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  long result=-1246043477766677607L;  assertTrue("incorrect value",aNumber.longValue() == result);}  }
class C{  @Override public Object put(Object key,Object value){  Entry tab[]=table;  int hash=0;  int index=0;  if (key != null) {    hash=System.identityHashCode(key);    index=(hash & 0x7FFFFFFF) % tab.length;    for (Entry e=tab[index]; e != null; e=e.next) {      if ((e.hash == hash) && key == e.key) {        Object old=e.value;        e.value=value;        return old;      }    }  } else {    for (Entry e=tab[0]; e != null; e=e.next) {      if (e.key == null) {        Object old=e.value;        e.value=value;        return old;      }    }  }  modCount++;  if (count >= threshold) {    rehash();    tab=table;    index=(hash & 0x7FFFFFFF) % tab.length;  }  Entry e=new Entry(hash,key,value,tab[index]);  tab[index]=e;  count++;  return null;}  }
class C{  public void rebuildStackMapIf6(ClassPool pool,ClassFile cf) throws BadBytecode {  if (cf.getMajorVersion() >= ClassFile.JAVA_6)   rebuildStackMap(pool);  if (doPreverify)   rebuildStackMapForME(pool);}  }
class C{  public boolean isSetNewset(){  return this.newset != null;}  }
class C{  public SubscriptionStateException(Reason reason,String member,Object[] params){  super(getMessage(reason,member,params),params);  bean.setReason(reason);  bean.setMember(member);  setMessageKey(initMessageKey());}  }
class C{  public void removeListener(T listener){  if (listeners != null) {    List<T> newlisteners=new ArrayList<T>();    newlisteners.addAll(listeners);    newlisteners.remove(listener);    listeners=newlisteners;  }}  }
class C{  public synchronized int exportObject(String name,Object obj) throws CannotCompileException {  Class clazz=obj.getClass();  ExportedObject eo=new ExportedObject();  eo.object=obj;  eo.methods=clazz.getMethods();  exportedObjects.addElement(eo);  eo.identifier=exportedObjects.size() - 1;  if (name != null)   exportedNames.put(name,eo);  try {    stubGen.makeProxyClass(clazz);  } catch (  NotFoundException e) {    throw new CannotCompileException(e);  }  return eo.identifier;}  }
class C{  public InformationModelAdapterFactory(){  if (modelPackage == null) {    modelPackage=InformationModelPackage.eINSTANCE;  }}  }
class C{  public void addFocusListener(FocusListener l){  if (focusListeners == null) {    focusListeners=new EventDispatcher();  }  focusListeners.addListener(l);}  }
class C{  public void addPart(int index,PduPart part){  if (null == part) {    throw new NullPointerException();  }  putPartToMaps(part);  mParts.add(index,part);}  }
class C{  public PaymentModulesManagerImpl(final ServiceLocator serviceLocator,final SystemService systemService,final ShopService shopService){  this.serviceLocator=serviceLocator;  this.systemService=systemService;  this.shopService=shopService;}  }
class C{  public void init(IStructuredDocument doc){  this.file=null;  if (doc instanceof IDocument) {    IFile file=DOMUtils.getFile((IDocument)doc);    IProject project=file.getProject();    if (Angular2Project.isAngular2Project(project)) {      this.file=file;    }  }}  }
class C{  public Iterator<Attribute> iterator(){  return null;}  }
class C{  public static long skip(final InputStream inputStream,final long bytesCount) throws IOException {  Preconditions.checkNotNull(inputStream);  Preconditions.checkArgument(bytesCount >= 0);  long toSkip=bytesCount;  while (toSkip > 0) {    final long skipped=inputStream.skip(toSkip);    if (skipped > 0) {      toSkip-=skipped;      continue;    }    if (inputStream.read() != -1) {      toSkip--;      continue;    }    return bytesCount - toSkip;  }  return bytesCount;}  }
class C{  public void testAwaitAdvanceTieredPhaser() throws Exception {  final Phaser parent=new Phaser();  final List<Phaser> zeroPartyChildren=new ArrayList<Phaser>(3);  final List<Phaser> onePartyChildren=new ArrayList<Phaser>(3);  for (int i=0; i < 3; i++) {    zeroPartyChildren.add(new Phaser(parent,0));    onePartyChildren.add(new Phaser(parent,1));  }  final List<Phaser> phasers=new ArrayList<Phaser>();  phasers.addAll(zeroPartyChildren);  phasers.addAll(onePartyChildren);  phasers.add(parent);  for (  Phaser phaser : phasers) {    assertEquals(-42,phaser.awaitAdvance(-42));    assertEquals(-42,phaser.awaitAdvanceInterruptibly(-42));    assertEquals(-42,phaser.awaitAdvanceInterruptibly(-42,MEDIUM_DELAY_MS,MILLISECONDS));  }  for (  Phaser child : onePartyChildren)   assertEquals(0,child.arrive());  for (  Phaser phaser : phasers) {    assertEquals(-42,phaser.awaitAdvance(-42));    assertEquals(-42,phaser.awaitAdvanceInterruptibly(-42));    assertEquals(-42,phaser.awaitAdvanceInterruptibly(-42,MEDIUM_DELAY_MS,MILLISECONDS));    assertEquals(1,phaser.awaitAdvance(0));    assertEquals(1,phaser.awaitAdvanceInterruptibly(0));    assertEquals(1,phaser.awaitAdvanceInterruptibly(0,MEDIUM_DELAY_MS,MILLISECONDS));  }  for (  Phaser child : onePartyChildren)   assertEquals(1,child.arrive());  for (  Phaser phaser : phasers) {    assertEquals(-42,phaser.awaitAdvance(-42));    assertEquals(-42,phaser.awaitAdvanceInterruptibly(-42));    assertEquals(-42,phaser.awaitAdvanceInterruptibly(-42,MEDIUM_DELAY_MS,MILLISECONDS));    assertEquals(2,phaser.awaitAdvance(0));    assertEquals(2,phaser.awaitAdvanceInterruptibly(0));    assertEquals(2,phaser.awaitAdvanceInterruptibly(0,MEDIUM_DELAY_MS,MILLISECONDS));    assertEquals(2,phaser.awaitAdvance(1));    assertEquals(2,phaser.awaitAdvanceInterruptibly(1));    assertEquals(2,phaser.awaitAdvanceInterruptibly(1,MEDIUM_DELAY_MS,MILLISECONDS));  }}  }
class C{  public void clone(Vector3f source){  System.arraycopy(source.points,0,points,0,3);}  }
class C{  @Override public void close(){  for (Iterator<Closeable> iterator=groupResources.iterator(); iterator.hasNext(); ) {    Closeable closeable=iterator.next();    CloseableRequestResources.closeQuietly(closeable);    iterator.remove();  }  requestResources.remove(this);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void realoadDatabase() throws NoSuperUserException, CouldNotOpenDatabaseException {  loadDatabase();}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  int count=in[in.length - 1] & 0xff;  if (count > in.length || count == 0) {    throw new InvalidCipherTextException("pad block corrupted");  }  for (int i=1; i <= count; i++) {    if (in[in.length - i] != count) {      throw new InvalidCipherTextException("pad block corrupted");    }  }  return count;}  }
class C{  public boolean containsCustomComponents(JOptionPane a){  boolean returnValue=((OptionPaneUI)(uis.elementAt(0))).containsCustomComponents(a);  for (int i=1; i < uis.size(); i++) {    ((OptionPaneUI)(uis.elementAt(i))).containsCustomComponents(a);  }  return returnValue;}  }
class C{  public void configure(final BulletParser parser){  parser.parseTags(true);  parser.parseAttributes(true);  parser.parseAttribute(Attribute.SRC);  parser.parseAttribute(Attribute.HREF);  parser.parseAttribute(Attribute.HTTP_EQUIV);  parser.parseAttribute(Attribute.CONTENT);}  }
class C{  public void update(CSTState state){  newCheckpoint(state.getSerializedState(),state.getStateHash(),state.getCheckpointCID());  setLastCheckpointCID(state.getCheckpointCID());}  }
class C{  void put(@Nonnull Cube cube){  if (this.contains(cube.getY())) {    throw new IllegalArgumentException("Cube at " + cube.getY() + " already exists!");  }  cubes.add(cube);  cubes.sort(ORDER);}  }
class C{  public Boolean isDisabled(){  return disabled;}  }
class C{  protected void assertStatistic(StatisticImpl counter,String name,String unit,String description){  assertEquals(name,counter.getName());  assertEquals(unit,counter.getUnit());  assertEquals(description,counter.getDescription());}  }
class C{  @Override public void addAttribute(String attName,String attValue){  if (attName != null) {    String trim=attName.trim();    if (!isForeignMarkup && foreignMarkupFlagSet)     trim=trim.toLowerCase();    String value=attValue == null ? "" : attValue;    if (isTrimAttributeValues)     value=value.trim().replaceAll("\\p{Cntrl}"," ");    if (trim.length() != 0) {      attributes.put(trim,value);    }  }}  }
class C{  protected static void handleException(String msg,Throwable t){  System.err.println(msg);  t.printStackTrace();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:04.385 -0500",hash_original_method="B48C7485F97A9F9AC68CAB76CC49654C",hash_generated_method="991C5E2D6EAFE2CBC1AEF7EF2C9E2905") public static InputChannel[] openInputChannelPair(String name){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  if (DEBUG) {    Slog.d(TAG,"Opening input channel pair '" + name + "'");  }  return nativeOpenInputChannelPair(name);}  }
class C{  public static BigDecimal toBTC(String currency,BigDecimal value) throws APIException, IOException {  return toBTC(currency,value,null);}  }
class C{  private void renderInputFields(Boolean renderIinLogo){  fieldRenderer.renderPaymentInputFields(inputDataPersister.getPaymentItem(),paymentRequest.getAccountOnFile(),inputDataPersister,paymentContext);  renderAndGetCobrands();  attachIINLookup(inputDataPersister.getPaymentItem(),renderIinLogo);  if (paymentRequest.getPaymentProduct() != null) {    if (Boolean.FALSE.equals(paymentRequest.getPaymentProduct().autoTokenized()) && Boolean.TRUE.equals(paymentRequest.getPaymentProduct().allowsTokenization()) && paymentRequest.getAccountOnFile() == null) {      ViewGroup rememberLayout=(ViewGroup)findViewById(R.id.rememberLayout);      View v=rememberLayout.findViewWithTag("rememberMe");      rememberLayout.removeView(v);      rememberLayout.setVisibility(View.VISIBLE);      RenderTooltip renderTooltip=new RenderTooltip();      renderTooltip.renderTooltip("rememberMe",paymentRequest.getPaymentProduct(),(ViewGroup)findViewById(R.id.rememberLayout));    }  }  validationRenderHelper.renderValidationMessages(inputDataPersister.getPaymentItem());}  }
class C{  static public void selectIntialPoints(DataSet d,int[] indices,DistanceMetric dm,Random rand,SeedSelection selectionMethod,ExecutorService threadpool){  selectIntialPoints(d,indices,dm,null,rand,selectionMethod,threadpool);}  }
class C{  @Override public void executeStoragePolicyTransition(StoragePolicyTransitionParamsDto storagePolicyTransitionParamsDto){  executeStoragePolicyTransitionImpl(storagePolicyTransitionParamsDto);}  }
class C{  public TransferEntropyCalculatorMultiVariateKernel(){  super();  teKernelEstimator=new KernelEstimatorTransferEntropyMultiVariate();  teKernelEstimator.setNormalise(normalise);  nextStateKernelEstimator=new KernelEstimatorMultiVariate();  nextStateKernelEstimator.setNormalise(normalise);}  }
class C{  public static float atan2(float fY,float fX){  return (float)Math.atan2(fY,fX);}  }
class C{  private static void siftCompsDesending(final FormObject[] array,final int left,final int right){  int currentLeft;  final FormObject primaryTMP;  int childL;  currentLeft=left;  primaryTMP=array[currentLeft];  childL=2 * left + 1;  if ((childL < right) && shouldSwapControlDesending(array[childL],array[childL + 1])) {    childL+=1;  }  while ((childL <= right) && shouldSwapControlDesending(primaryTMP,array[childL])) {    array[currentLeft]=array[childL];    currentLeft=childL;    childL=2 * childL + 1;    if ((childL < right) && shouldSwapControlDesending(array[childL],array[childL + 1])) {      childL+=1;    }  }  array[currentLeft]=primaryTMP;}  }
class C{  protected void emit_AnnotatedN4MemberDeclaration_SemicolonKeyword_1_0_2_q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void unsetParams(){  this.params=null;}  }
class C{  public File createNewFolder(File containingDir) throws IOException {  File result=new File(containingDir,"New folder");  if (result.exists()) {    throw new IOException("Directory 'New folder' exists");  }  if (!result.mkdir()) {    throw new IOException("Cannot create directory");  }  return result;}  }
class C{  public void testCheckFoundWithResultAsNMI(){  LOGGER.debug("check found with result as nmi");  initCheckerAndLaunch("src/test/resources/css/test3.css",null,TestSolution.NEED_MORE_INFO,".selector");}  }
class C{  public NfcFileOutputStream putFileAutoClose(String dsPath,long fileSize) throws IOException {  return this.putFile(dsPath,fileSize,true);}  }
class C{  public Wagging(ContinuousDistribution dist,Regressor weakR,int iterations){  setDistribution(dist);  setIterations(iterations);  setWeakLearner(weakR);}  }
class C{  public boolean determines(List<Node> z,Node x) throws UnsupportedOperationException {  int[] parents=new int[z.size()];  for (int j=0; j < parents.length; j++) {    parents[j]=covMatrix.getVariables().indexOf(z.get(j));  }  int i=covMatrix.getVariables().indexOf(x);  TetradMatrix matrix2D=covMatrix.getMatrix();  double variance=matrix2D.get(i,i);  if (parents.length > 0) {    TetradMatrix Czz=matrix2D.getSelection(parents,parents);    TetradMatrix inverse;    try {      inverse=Czz.inverse();    } catch (    Exception e) {      return true;    }    TetradVector Cyz=matrix2D.getColumn(i);    Cyz=Cyz.viewSelection(parents);    TetradVector b=inverse.times(Cyz);    variance-=Cyz.dotProduct(b);  }  return variance < 1e-20;}  }
class C{  public static void addClassLoaderListener(EnvLoaderListener listener){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  addClassLoaderListener(listener,loader);}  }
class C{  @SuppressWarnings("unchecked") private static int countRunAndMakeAscending(Object[] a,int lo,int hi){  if (DEBUG)   assert lo < hi;  int runHi=lo + 1;  if (runHi == hi)   return 1;  if (((Comparable)a[runHi++]).compareTo(a[lo]) < 0) {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) < 0)     runHi++;    reverseRange(a,lo,runHi);  } else {    while (runHi < hi && ((Comparable)a[runHi]).compareTo(a[runHi - 1]) >= 0)     runHi++;  }  return runHi - lo;}  }
class C{  public void validateRestoredS3Files(List<StorageFile> expectedStorageFiles,List<S3ObjectSummary> actualS3Files,String storageName,BusinessObjectDataKey businessObjectDataKey){  validateS3Files(expectedStorageFiles,actualS3Files,storageName,businessObjectDataKey,"restored");}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.STRING_LITERAL__VALUE:    return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);}return super.eIsSet(featureID);}  }
class C{  public boolean isSelfBalancing(){  return this.selfBalancing;}  }
class C{  public void takeKeyEvents(boolean get){  mWindow.takeKeyEvents(get);}  }
class C{  @Override public void onChangedAdded(final RPObject object,final RPObject changes){  super.onChangedAdded(object,changes);  if (changes.has("open")) {    open=true;    fireChange(PROP_OPEN);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.448 -0500",hash_original_method="82BA8A08B2E8140159AB0D3D207AD49D",hash_generated_method="82BA8A08B2E8140159AB0D3D207AD49D") boolean isTerminatedOnBye(){  return this.terminateOnBye;}  }
class C{  protected AbstractKeyValue(final K key,final V value){  super();  this.key=key;  this.value=value;}  }
class C{  private CAddressSpaceFunctions(){}  }
class C{  @Override public void onTransferProgress(long progressRate,long totalTransferredSoFar,long totalToTransfer,String filePath){  int percent=(int)(100.0 * ((double)totalTransferredSoFar) / ((double)totalToTransfer));  if (percent != mLastPercent) {    mNotificationBuilder.setProgress(100,percent,totalToTransfer < 0);    String fileName=filePath.substring(filePath.lastIndexOf(FileUtils.PATH_SEPARATOR) + 1);    String text=String.format(getString(R.string.downloader_download_in_progress_content),percent,fileName);    mNotificationBuilder.setContentText(text);    mNotificationManager.notify(R.string.downloader_download_in_progress_ticker,mNotificationBuilder.build());  }  mLastPercent=percent;}  }
class C{  public void removeCenterListener(CenterListener listener){  centerDelegate.remove(listener);}  }
class C{  private Map<Long,Pair<String,Long>> recoverPendingLargeMessages() throws Exception {  Map<Long,Pair<String,Long>> largeMessages=new HashMap<>();  List<String> filenames=largeMessagesFactory.listFiles("msg");  List<Long> idList=new ArrayList<>();  for (  String filename : filenames) {    Long id=getLargeMessageIdFromFilename(filename);    if (!largeMessagesToDelete.contains(id)) {      idList.add(id);      SequentialFile seqFile=largeMessagesFactory.createSequentialFile(filename);      long size=seqFile.size();      largeMessages.put(id,new Pair<>(filename,size));    }  }  return largeMessages;}  }
class C{  public static DataWrapper serializableInstance(){  return new DataWrapper(new Parameters());}  }
class C{  public boolean isHighGuestMemSupported(){  return highGuestMemSupported;}  }
class C{  public RainbowBeansScroll(final String name,final String clazz,final String subclass,final Map<String,String> attributes){  super(name,clazz,subclass,attributes);}  }
class C{  @Override public int search(final byte[] key){  return search(key,keys,0,capacity());}  }
class C{  public static byte[] constructRateMap(int rateCount,int stateCount,Codons codonDataType,GeneticCode geneticCode){  int u, v, i1, j1, k1, i2, j2, k2;  byte rateClass;  int[] codon;  int cs1, cs2, aa1, aa2;  int i=0;  byte[] rateMap=new byte[rateCount];  for (u=0; u < stateCount; u++) {    codon=codonDataType.getTripletStates(u);    i1=codon[0];    j1=codon[1];    k1=codon[2];    cs1=codonDataType.getState(i1,j1,k1);    aa1=geneticCode.getAminoAcidState(codonDataType.getCanonicalState(cs1));    for (v=u + 1; v < stateCount; v++) {      codon=codonDataType.getTripletStates(v);      i2=codon[0];      j2=codon[1];      k2=codon[2];      cs2=codonDataType.getState(i2,j2,k2);      aa2=geneticCode.getAminoAcidState(codonDataType.getCanonicalState(cs2));      rateClass=-1;      if (i1 != i2) {        if ((i1 == 0 && i2 == 2) || (i1 == 2 && i2 == 0) || (i1 == 1 && i2 == 3)|| (i1 == 3 && i2 == 1)) {          rateClass=1;        } else {          rateClass=2;        }      }      if (j1 != j2) {        if (rateClass == -1) {          if ((j1 == 0 && j2 == 2) || (j1 == 2 && j2 == 0) || (j1 == 1 && j2 == 3)|| (j1 == 3 && j2 == 1)) {            rateClass=1;          } else {            rateClass=2;          }        } else         rateClass=0;      }      if (k1 != k2) {        if (rateClass == -1) {          if ((k1 == 0 && k2 == 2) || (k1 == 2 && k2 == 0) || (k1 == 1 && k2 == 3)|| (k1 == 3 && k2 == 1)) {            rateClass=1;          } else {            rateClass=2;          }        } else         rateClass=0;      }      if (rateClass != 0) {        if (aa1 != aa2) {          rateClass+=2;        }      }      rateMap[i]=rateClass;      i++;    }  }  return rateMap;}  }
class C{  public boolean pushNamespace(String prefix,String uri,int elemDepth){  if (prefix.startsWith(XML_PREFIX)) {    return false;  }  Stack stack;  if ((stack=(Stack)m_namespaces.get(prefix)) == null) {    m_namespaces.put(prefix,stack=new Stack());  }  if (!stack.empty()) {    MappingRecord mr=(MappingRecord)stack.peek();    if (uri.equals(mr.m_uri) || elemDepth == mr.m_declarationDepth) {      return false;    }  }  MappingRecord map=new MappingRecord(prefix,uri,elemDepth);  stack.push(map);  m_nodeStack.push(map);  return true;}  }
class C{  public boolean isFirst(int PP_Order_Node_ID,int AD_Client_ID){  return PP_Order_Node_ID == getPP_Order_Node_ID();}  }
class C{  public void assertEvicted(){  if (!evicted) {    TestCopyOnWrite.fail("Expected " + expectedRef + " to have been evicted.");  }}  }
class C{  static PlanAlgorithm createRoutingAlgorithmDefault(Scenario sc,TravelTime travelTime){  throw new UnsupportedOperationException("should use TripRouter");}  }
class C{  public double checkMark(byte[] stegoData,String stegoFileName,byte[] origSigData) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.WATERMARKING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_WM);  }  return this.plugin.checkMark(stegoData,stegoFileName,origSigData);}  }
class C{  public Image(File path) throws IOException {  this.path=path;  loadFeatures();}  }
class C{  protected void computeAuthorities(){  authorities=roles.stream().map(null).collect(Collectors.toCollection(null));  if (goodUser) {    authorities.add(new SimpleGrantedAuthority("ROLE_" + LemonSecurityConfig.GOOD_USER));    if (goodAdmin)     authorities.add(new SimpleGrantedAuthority("ROLE_" + LemonSecurityConfig.GOOD_ADMIN));  }  log.debug("Authorities of " + this + ": "+ authorities);}  }
class C{  public void readContent() throws IOException {  if (offset + length > buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    offset+=length;  } else {    int bytesRead=in.read(buffer,offset,length);    if (bytesRead != length) {      int c=bytesRead;      do {        if (c < 1 || bytesRead > length) {          throw new ASN1Exception("Failed to read encoded content");        }        c=in.read(buffer,offset + bytesRead,length - bytesRead);        bytesRead+=c;      } while (bytesRead != length);    }    offset+=length;  }}  }
class C{  private void copyNodeInfoNoChildren(AccessibilityNodeInfoCompat dest,AccessibilityNodeInfoCompat src){  final Rect rect=mTmpRect;  src.getBoundsInParent(rect);  dest.setBoundsInParent(rect);  src.getBoundsInScreen(rect);  dest.setBoundsInScreen(rect);  dest.setVisibleToUser(src.isVisibleToUser());  dest.setPackageName(src.getPackageName());  dest.setClassName(src.getClassName());  dest.setContentDescription(src.getContentDescription());  dest.setEnabled(src.isEnabled());  dest.setClickable(src.isClickable());  dest.setFocusable(src.isFocusable());  dest.setFocused(src.isFocused());  dest.setAccessibilityFocused(src.isAccessibilityFocused());  dest.setSelected(src.isSelected());  dest.setLongClickable(src.isLongClickable());  dest.addAction(src.getActions());}  }
class C{  private void playGif(GifView gif,TextView msgView,ImageView img,String msg,int position){  msgView.setVisibility(View.GONE);  try {    Field field=R.drawable.class.getDeclaredField(msg.substring(2,msg.indexOf("]")));    int resId=Integer.parseInt(field.get(null).toString());    if (getCount() - 1 - position < 3) {      gif.setVisibility(View.VISIBLE);      gif.setGifImageType(GifImageType.COVER);      gif.setGifImage(resId);    } else {      img.setVisibility(View.VISIBLE);      img.setBackgroundResource(resId);    }  } catch (  NoSuchFieldException e) {    msgView.setVisibility(View.VISIBLE);    msgView.setText(ExpressionUtil.getText(cxt,StringUtil.Unicode2GBK(msg)));    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static void addDeclaredSymbolsInScope(HashSet<String> result,ModuleNode module,Location loc){  HashSet<ModuleNode> extendees=module.getExtendedModuleSet();  extendees.add(module);  Iterator<ModuleNode> iter=extendees.iterator();  while (iter.hasNext()) {    ModuleNode modNode=iter.next();    OpDeclNode[] decls=modNode.getConstantDecls();    for (int i=0; i < decls.length; i++) {      if ((modNode != module) || earlierLine(decls[i].stn.getLocation(),loc)) {        result.add(decls[i].getName().toString());      }    }    decls=modNode.getVariableDecls();    for (int i=0; i < decls.length; i++) {      if ((modNode != module) || earlierLine(decls[i].stn.getLocation(),loc)) {        result.add(decls[i].getName().toString());      }    }  }  HashSet<ModuleNode> allModulesSet=new HashSet<ModuleNode>();  addImportedModules(allModulesSet,result,loc,module);  iter=allModulesSet.iterator();  while (iter.hasNext()) {    ModuleNode modNode=iter.next();    OpDefNode[] decls=modNode.getOpDefs();    for (int i=0; i < decls.length; i++) {      if ((modNode != module) || earlierLine(decls[i].stn.getLocation(),loc)) {        result.add(decls[i].getName().toString());      }    }    ThmOrAssumpDefNode[] tdecls=module.getThmOrAssDefs();    for (int i=0; i < tdecls.length; i++) {      if ((modNode != module) || earlierLine(tdecls[i].stn.getLocation(),loc)) {        result.add(tdecls[i].getName().toString());      }    }  }  ;}  }
class C{  static byte[] generateCertRequest(PrivateKey privateKey,PublicKey publicKey,String principal) throws NoSuchAlgorithmException, OperatorCreationException, IOException {  X500Principal subject=new X500Principal(principal);  ContentSigner signGen=new JcaContentSignerBuilder("SHA256withRSA").build(privateKey);  PKCS10CertificationRequestBuilder builder=new JcaPKCS10CertificationRequestBuilder(subject,publicKey);  PKCS10CertificationRequest csr=builder.build(signGen);  try (ByteArrayOutputStream output=new ByteArrayOutputStream()){    try (Writer destination=new OutputStreamWriter(output)){      try (JcaPEMWriter pemWriter=new JcaPEMWriter(destination)){        pemWriter.writeObject(csr);      }       return output.toByteArray();    }   } }  }
class C{  void generateStaticInitializer(ClassWriter cw){  CodeVisitor cv=cw.visitMethod(ACC_STATIC,"<clinit>","()V",null);  cv.visitLdcInsn(fqClassName);  cv.visitMethodInsn(INVOKESTATIC,"java/lang/Class","forName","(Ljava/lang/String;)Ljava/lang/Class;");  cv.visitMethodInsn(INVOKESTATIC,"bsh/ClassGeneratorUtil","initStatic","(Ljava/lang/Class;)V");  cv.visitInsn(RETURN);  cv.visitMaxs(0,0);}  }
class C{  public boolean isLeftToRight(){  return bidiBase.isLeftToRight();}  }
class C{  public Map<String,String> mapAvailableStrings(String uri) throws IOException {  _resourcesNotLoaded.clear();  Map<String,String> strings=new HashMap<>();  Map<String,URL> resourcesMap=getResourcesMap(uri);  for (Iterator<Entry<String,URL>> iterator=resourcesMap.entrySet().iterator(); iterator.hasNext(); ) {    Entry<String,URL> entry=iterator.next();    String name=entry.getKey();    URL url=entry.getValue();    try {      String value=readContents(url);      strings.put(name,value);    } catch (    IOException notAvailable) {      _resourcesNotLoaded.add(url.toExternalForm());    }  }  return strings;}  }
class C{  void acquire(){  references++;}  }
class C{  public VcfInfoPerAltIntegerAnnotator(AbstractDerivedAnnotation annotation){  assert annotation != null && annotation.getType().getClassType() == Integer.class;  mAnnotation=annotation;}  }
class C{  public static Drawable changeDrawableColor(Drawable mDrawable,int color){  Drawable wrappedDrawable=DrawableCompat.wrap(mDrawable);  DrawableCompat.setTint(wrappedDrawable,color);  return wrappedDrawable;}  }
class C{  public MicrosatelliteSamplerTreeModel(String id,TreeModel tree,Parameter internalValues,Patterns microsatPat,int[] externalValues,Map<String,Integer> taxaMap,boolean internalStateProvided){  super(id);  this.tree=tree;  this.parameter=internalValues;  this.microsatPat=microsatPat;  this.externalValues=externalValues;  this.taxaMap=taxaMap;  this.logBranchLikelihoods=new double[tree.getNodeCount()];  this.storedLogBranchLikelihoods=new double[tree.getNodeCount()];  rootNodeNumber=tree.getRoot().getNumber();  storedRootNodeNumber=rootNodeNumber;  if (!internalStateProvided) {    initialiseInternalStates();  }  int dim=parameter.getDimension();  int treeSize=tree.getInternalNodeCount();  if (dim != treeSize) {    System.err.println("WARNING: setting dimension of parameter to match tree branch count");    parameter.setDimension(treeSize);    Bounds<Double> bounds=parameter.getBounds();    int upper=(int)(double)bounds.getUpperLimit(0);    int lower=(int)(double)bounds.getLowerLimit(0);    parameter.addBounds(new Parameter.DefaultBounds(upper,lower,treeSize));  }  addModel(tree);  addVariable(parameter);}  }
class C{  private void processPanel(final IGraphPanel panel){  if (panel.getModel().getGraph().getRawView() == m_view) {    m_model=panel.getModel();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public AttributeSet copyAttributes(){  return this;}  }
class C{  public static IScope createPolyfillAwareScope(IScope parent,IContainer container,Predicate<IEObjectDescription> filter,EClass type,boolean ignoreCase){  if (container == null || container.isEmpty())   return parent;  return new PolyfillAwareSelectableBasedScope(parent,container,filter,type,ignoreCase);}  }
class C{  public void testNoGuard(){  Object obj=null;  GuardedObject go=new GuardedObject(obj,null);  assertNull(go.getObject());  obj="ewte rtw3456";  go=new GuardedObject(obj,null);  assertEquals(obj,go.getObject());}  }
class C{  protected boolean[] testWRTZeroR(Classifier classifier,Evaluation evaluation,Instances train,Instances test) throws Exception {  boolean[] result=new boolean[2];  evaluation.evaluateModel(classifier,test);  try {    Classifier zeroR=new weka.classifiers.rules.ZeroR();    zeroR.buildClassifier(train);    Evaluation zeroREval=new Evaluation(train);    zeroREval.evaluateModel(zeroR,test);    result[0]=Utils.grOrEq(zeroREval.errorRate(),evaluation.errorRate());  } catch (  Exception ex) {    throw new Error("Problem determining ZeroR performance: " + ex.getMessage());  }  return result;}  }
class C{  public void writeDirect(byte[] b,int off,int len,int flags) throws IOException {  if (len <= 0) {    return;  }  if (tmp == null) {    throw new IOException("Bad file descriptor");  }  ensureOpen();  if (file.log.level >= 4)   file.log.println("write: fid=" + file.fid + ",off="+ off+ ",len="+ len);  int w;  do {    w=len > writeSize ? writeSize : len;    if (useNTSmbs) {      reqx.setParam(file.fid,fp,len - w,b,off,w);      if ((flags & 1) != 0) {        reqx.setParam(file.fid,fp,len,b,off,w);        reqx.writeMode=0x8;      } else {        reqx.writeMode=0;      }      file.send(reqx,rspx);      fp+=rspx.count;      len-=rspx.count;      off+=rspx.count;    } else {      req.setParam(file.fid,fp,len - w,b,off,w);      fp+=rsp.count;      len-=rsp.count;      off+=rsp.count;      file.send(req,rsp);    }  } while (len > 0);}  }
class C{  public TvShowUpdateDatasourceTask(String datasource){  super(BUNDLE.getString("update.datasource") + " (" + datasource+ ")");  tvShowList=TvShowList.getInstance();  dataSources=new ArrayList<>(1);  dataSources.add(datasource);}  }
class C{  public LabelSet(int indices[],boolean sort){  this.indices=indices;  if (sort == true)   Arrays.sort(this.indices);}  }
class C{  public void createSubUsageScenario06() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.hoursToMillis(15);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO06_PERUNIT_HOUR",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_HOUR_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO06_PERUNIT_HOUR",serviceDetails,basicSetup.getSecondCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.hoursToMillis(200);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO06_PERUNIT_HOUR",subDetails);}  }
class C{  public void resetRenameDefinitions(){  renameDefinitions=null;}  }
class C{  protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {  String cname=classDesc.getName();  if (cname.startsWith("[")) {    Class component;    int dcount;    for (dcount=1; cname.charAt(dcount) == '['; dcount++)     ;    if (cname.charAt(dcount) == 'L') {      component=loader.loadClass(cname.substring(dcount + 1,cname.length() - 1));    } else {      if (cname.length() != dcount + 1) {        throw new ClassNotFoundException(cname);      }      component=primitiveType(cname.charAt(dcount));    }    int dim[]=new int[dcount];    for (int i=0; i < dcount; i++) {      dim[i]=0;    }    return Array.newInstance(component,dim).getClass();  } else {    return loader.loadClass(cname);  }}  }
class C{  public void selectAt(final int index){  checkWidget();  checkNullElement();  checkRange(index);  this.selection.add(this.elements.get(index));  updateSelection();}  }
class C{  public boolean isData(){  return data;}  }
class C{  public AbTextView(Context context,AttributeSet attrs){  super(context,attrs);  mTextPaint=this.getPaint();  mTextPaint.setColor(textColor);  mTextPaint.setTextSize(textSize);}  }
class C{  public static boolean isFileTypeSupported(final int fileType){  return standardMidiFileWriter.isFileTypeSupported(fileType);}  }
class C{  public static void enqueueDataCollectionJob(DataCollectionJob job) throws Exception {  String jobType=job.getType();  if (jobType.equals(CS_DISCOVERY)) {    _computeDiscoverJobQueue.put(job);  } else   if (jobType.equals(ARRAYAFFINITY_DISCOVERY)) {    _arrayAffinityDiscoverJobQueue.put(job);  } else   if (isDiscoveryJobTypeSupported(jobType)) {    _discoverJobQueue.put(job);  } else   if (jobType.equals(SCANNER)) {    _scanJobQueue.put(job);  } else   if (jobType.equals(MONITORING)) {    _monitoringJobQueue.put(job);  } else   if (jobType.equals(METERING)) {    _meteringJobQueue.put(job);  }  _log.info("Queued " + jobType + " job for "+ job.systemString());}  }
class C{  private int reallocate(int offset,int remove,final int oldGapSize,int newGapSize,final int newGapStart){  final int newLength=fContent.length - newGapSize;  int newArraySize=(int)(newLength * fSizeMultiplier);  newGapSize=newArraySize - newLength;  if (newGapSize < fMinGapSize) {    newGapSize=fMinGapSize;    newArraySize=newLength + newGapSize;  } else   if (newGapSize > fMaxGapSize) {    newGapSize=fMaxGapSize;    newArraySize=newLength + newGapSize;  }  fThreshold=newGapSize * 2;  final char[] newContent=allocate(newArraySize);  final int newGapEnd=newGapStart + newGapSize;  if (offset < fGapStart) {    arrayCopy(0,newContent,0,offset);    int afterRemove=offset + remove;    if (afterRemove < fGapStart) {      final int betweenSize=fGapStart - afterRemove;      arrayCopy(afterRemove,newContent,newGapEnd,betweenSize);      final int restSize=fContent.length - fGapEnd;      arrayCopy(fGapEnd,newContent,newGapEnd + betweenSize,restSize);    } else {      afterRemove+=oldGapSize;      final int restSize=fContent.length - afterRemove;      arrayCopy(afterRemove,newContent,newGapEnd,restSize);    }  } else {    arrayCopy(0,newContent,0,fGapStart);    final int offsetShifted=offset + oldGapSize;    final int betweenSize=offsetShifted - fGapEnd;    arrayCopy(fGapEnd,newContent,fGapStart,betweenSize);    final int afterRemove=offsetShifted + remove;    final int restSize=fContent.length - afterRemove;    arrayCopy(afterRemove,newContent,newGapEnd,restSize);  }  fContent=newContent;  return newGapEnd;}  }
class C{  public TrayNotification(String title,String body,NotificationType notificationType){  initTrayNotification(title,body,notificationType);}  }
class C{  private String c(String str){  return str + count;}  }
class C{  static public void assertSameSolutionsAnyOrder(final String msg,final IBindingSet[] expected,final IRunningQuery runningQuery){  final ICloseableIterator<IBindingSet[]> itr=runningQuery.iterator();  assertSameSolutionsAnyOrder(msg,expected,itr,runningQuery);}  }
class C{  @Override public void process(V tuple){  if (!flag) {    high=tuple;    flag=true;  } else   if (high.doubleValue() < tuple.doubleValue()) {    high=tuple;  }}  }
class C{  public StrBuilder deleteFirst(final char ch){  for (int i=0; i < size; i++) {    if (buffer[i] == ch) {      deleteImpl(i,i + 1,1);      break;    }  }  return this;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public mat4 loadRotate(float x,float y,float z){  mat4_util_load_rotate(this.m,x,y,z);  return this;}  }
class C{  public void write(byte[] b,int off,int len){  if (len <= 0) {    return;  }  if (writing) {    DbException.throwInternalError("writing while still writing");  }  try {    reserve(len);    writing=true;    while (len > 0) {      int l=data.write(b,off,len);      if (l < len) {        storePage();        initNextData();      }      reserved-=l;      off+=l;      len-=l;    }    needFlush=true;  }  finally {    writing=false;  }}  }
class C{  public static void populatePcj(final Connector accumuloConn,final String pcjTableName,final RepositoryConnection ryaConn) throws PcjException {  checkNotNull(accumuloConn);  checkNotNull(pcjTableName);  checkNotNull(ryaConn);  try {    final PcjMetadata pcjMetadata=new PcjTables().getPcjMetadata(accumuloConn,pcjTableName);    final String sparql=pcjMetadata.getSparql();    final TupleQuery query=ryaConn.prepareTupleQuery(QueryLanguage.SPARQL,sparql);    final TupleQueryResult results=query.evaluate();    final Set<BindingSet> batch=new HashSet<>(1000);    while (results.hasNext()) {      batch.add(results.next());      if (batch.size() == 1000) {        addResults(accumuloConn,pcjTableName,batch);        batch.clear();      }    }    if (!batch.isEmpty()) {      addResults(accumuloConn,pcjTableName,batch);    }  } catch (  RepositoryException|MalformedQueryException|QueryEvaluationException e) {    throw new PcjException("Could not populate a PCJ table with Rya results for the table named: " + pcjTableName,e);  }}  }
class C{  public static void write(JsonElement element,JsonWriter writer) throws IOException {  TypeAdapters.JSON_ELEMENT.write(writer,element);}  }
class C{  public static void main(String[] args){  calcNetForceExertedByXY();}  }
class C{  public Rectangle(){}  }
class C{  public boolean isAnonymous(){  if (this.innerInfo == null)   return false;  char[] innerSourceName=this.innerInfo.getSourceName();  return (innerSourceName == null || innerSourceName.length == 0);}  }
class C{  public ResultEntry(NondominatedPopulation population,TypedProperties properties){  this(population,properties == null ? null : properties.getProperties());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean wrapIndex=getBool(stack);  int position=getInt(stack);  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    ZDataTable tabParent=uiComp.getTableParent();    if (tabParent == null)     return null;    int colsPerPage=Math.max(1,tabParent.getNumColsPerPage());    int vscrollIndex=tabParent.getVScrollIndex();    int rowsPerPage=Math.max(1,tabParent.getNumRowsPerPage());    int hscrollIndex=tabParent.getHScrollIndex();    int visPos=position + colsPerPage * vscrollIndex + rowsPerPage * hscrollIndex;    return tabParent.getTableDataFromOffset(visPos,wrapIndex);  }  return null;}  }
class C{  public final boolean checkTag(int identifier){  return true;}  }
class C{  protected void engineInit(Key key,AlgorithmParameterSpec params) throws InvalidKeyException, InvalidAlgorithmParameterException {  if (params != null) {    throw new InvalidAlgorithmParameterException("HMAC does not use parameters");  }  if (!(key instanceof SecretKey)) {    throw new InvalidKeyException("Secret key expected");  }  byte[] secret=key.getEncoded();  if (secret == null) {    throw new InvalidKeyException("Missing key data");  }  if (secret.length > blockLen) {    byte[] tmp=md.digest(secret);    Arrays.fill(secret,(byte)0);    secret=tmp;  }  for (int i=0; i < blockLen; i++) {    int si=(i < secret.length) ? secret[i] : 0;    k_ipad[i]=(byte)(si ^ 0x36);    k_opad[i]=(byte)(si ^ 0x5c);  }  Arrays.fill(secret,(byte)0);  secret=null;  engineReset();}  }
class C{  @RequestMapping(value={ApiUrl.COMPLAINT_SEARCH},method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) public ResponseEntity<String> complaintSearch(@RequestBody final ComplaintSearchRequest searchRequest){  try {    final SearchResult searchResult=searchService.search(asList(Index.PGR.toString()),asList(IndexType.COMPLAINT.toString()),searchRequest.searchQuery(),searchRequest.searchFilters(),Sort.by().field("common.createdDate",SortOrder.DESC),org.egov.search.domain.Page.NULL);    return getResponseHandler().success(searchResult.getDocuments());  } catch (  final Exception e) {    LOGGER.error("EGOV-API ERROR ",e);    return getResponseHandler().error(getMessage("server.error"));  }}  }
class C{  static void handleMessages(IMAPFolder folder,Message[] messages){  handleMessages(folder,Arrays.asList(messages));}  }
class C{  @Override public String marshal(Date date) throws Exception {  return date.getTime() + "";}  }
class C{  public int addBook(Book book,byte[] bookBuffer){  Uri uri=mBookshelfManager.add(book);  int id=(int)ContentUris.parseId(uri);  mBookFileManager.saveBookBinary(book.getTitle(),bookBuffer);  return id;}  }
class C{  @NonNull public static Bitmap toBitmap(@NonNull Drawable source,@NonNull DisplayMetrics metrics){  Rect boudns=source.getBounds();  int width=source.getIntrinsicWidth();  int height=source.getIntrinsicHeight();  width=width > 0 ? width : boudns.width();  height=height > 0 ? height : boudns.height();  return toBitmapWithExactSize(source,metrics,width,height);}  }
class C{  protected Map<BindingSet,List<BindingSet>> makeMap(){  return new HashMap<BindingSet,List<BindingSet>>();}  }
class C{  @Override public void release(){  released=true;  onStopAttack();  if (attackTarget != null) {    attackTarget.onStopAttacked(this);    attackTarget=null;  }  super.release();}  }
class C{  GroestlBigCore(){}  }
class C{  public G generate(G graph,double p,long randomSeed){  if (randomDraw)   return randomDraw(graph,p,randomSeed); else   return enumerate(graph,p,randomSeed);}  }
class C{  public Forest(){  super();}  }
class C{  public String displayInputs(){  return MLContextUtil.displayInputs("Inputs",inputs,symbolTable);}  }
class C{  public CPassword(){  super();  init();}  }
class C{  public static String[] splitCommaList(String value){  log.debug("Header-Value: " + value);  String[] values=value.split("\\s*,\\s*");  log.debug("Found " + values.length + " elements in list.");  return values;}  }
class C{  public <T>T withTransaction(@NotNull Isolation isolation,@NotNull TransactionCallback<T> callback){  return withTransaction(Propagation.REQUIRED,isolation,callback);}  }
class C{  private boolean useParentAsHeading(SettingsItem parent){  if (!parent.getType().equals(Type.SUB_GROUP)) {    return false;  } else   if (parent.isUsedInDialog()) {    return false;  } else {    return true;  }}  }
class C{  public NameNotFoundException(String explanation){  super(explanation);}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public Matrix times(double s){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=s * A[i][j];    }  }  return X;}  }
class C{  public static boolean isSunday(int column,int firstDayOfWeek){  return (firstDayOfWeek == Time.SUNDAY && column == 0) || (firstDayOfWeek == Time.MONDAY && column == 6) || (firstDayOfWeek == Time.SATURDAY && column == 1);}  }
class C{  public static int compareFPNumbers(String fp1,String fp2){  fp1=normalizeFPNumber(fp1);  fp2=normalizeFPNumber(fp2);  return compareCanonicalFPNumbers(fp1,fp2);}  }
class C{  public static ProcessBuilder rtlSdrSnif(String dir,String frequency,String gain,String samplerate){  ProcessBuilder pb=new ProcessBuilder("rtl_sdr","-f",frequency,"-g",gain,frequency + "_AIRPROBE_OUTPUT_BIN","-s",samplerate);  pb.directory(new File(dir));  return pb;}  }
class C{  public IdentityHashMap(){  init(DEFAULT_CAPACITY);}  }
class C{  public String commonForm(){  loggedUserIsMeesevaUser=propertyService.isMeesevaUser(securityUtils.getCurrentUser());  if (loggedUserIsMeesevaUser) {    final HttpServletRequest request=ServletActionContext.getRequest();    if (request.getParameter("applicationNo") == null || request.getParameter("meesevaServicecode") == null) {      addActionMessage(getText("MEESEVA.005"));      return RESULT_ERROR;    } else {      setMeesevaApplicationNumber(request.getParameter("applicationNo"));      setMeesevaServiceCode(request.getParameter("meesevaServicecode"));    }  }  return COMMON_FORM;}  }
class C{  public static <V>void groupI18nKeys(Map<String,V> map){  LinkedHashMap<String,V> temp=new LinkedHashMap<String,V>();  ArrayList<String> keys=new ArrayList<String>(map.keySet());  while (keys.size() > 0) {    String key=keys.get(0);    keys.remove(0);    if (Tags.I18N_NAME_KEYS.contains(key)) {      temp.put(key,map.get(key));      int i=0;      while (keys.size() > 0 && i < keys.size()) {        String i18nKey=keys.get(i);        if (i18nKey.startsWith(key + ":")) {          temp.put(i18nKey,map.get(i18nKey));          keys.remove(i);        } else {          i++;        }      }    } else {      temp.put(key,map.get(key));    }  }  map.clear();  map.putAll(temp);}  }
