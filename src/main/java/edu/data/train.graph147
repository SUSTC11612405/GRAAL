class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier,GeneralNames name,BigInteger serialNumber){  this.keyidentifier=new DEROctetString(keyIdentifier);  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  public List<V> replace(K key,Collection<V> values){  List<V> replaced=removeAll(key);  putAll(key,values);  return replaced;}  }
class C{  private static void assertPositive(final long t){  if (t <= 0L) {    throw new IllegalStateException("Timestamp is non-positive: " + t);  }}  }
class C{  private void validateAclEntries(List<ACLEntry> aclEntries){  if (CollectionUtils.isEmpty(aclEntries)) {    return;  }  Iterator<ACLEntry> aclEntryIterator=aclEntries.iterator();  while (aclEntryIterator.hasNext()) {    ACLEntry aclEntry=aclEntryIterator.next();    if (aclEntry.getAces().size() != 1) {      throw APIException.badRequests.unsupportedNumberOfPrivileges(URI.create(aclEntry.getTenant()),aclEntry.getAces());    }    if (!aclEntry.getAces().get(0).equalsIgnoreCase(ACL.USE.name())) {      throw APIException.badRequests.unsupportedPrivilege(URI.create(aclEntry.getTenant()),aclEntry.getAces().get(0));    }    URI tenantId=URI.create(aclEntry.getTenant());    TenantOrg tenant=queryObject(TenantOrg.class,tenantId,true);    ArgValidator.checkEntity(tenant,tenantId,isIdEmbeddedInURL(tenantId));  }}  }
class C{  private Object invokeLocalMethod(Interpreter interpreter,Object[] args,CallStack callstack,SimpleNode callerInfo) throws EvalError {  if (Interpreter.DEBUG)   Interpreter.debug("invokeLocalMethod: " + value);  if (interpreter == null)   throw new InterpreterError("invokeLocalMethod: interpreter = null");  String commandName=value;  Class[] argTypes=Types.getTypes(args);  BshMethod meth=null;  try {    meth=namespace.getMethod(commandName,argTypes);  } catch (  UtilEvalError e) {    throw e.toEvalError("Local method invocation",callerInfo,callstack);  }  if (meth != null)   return meth.invoke(args,interpreter,callstack,callerInfo);  BshClassManager bcm=interpreter.getClassManager();  Object commandObject;  try {    commandObject=namespace.getCommand(commandName,argTypes,interpreter);  } catch (  UtilEvalError e) {    throw e.toEvalError("Error loading command: ",callerInfo,callstack);  }  if (commandObject == null) {    BshMethod invokeMethod=null;    try {      invokeMethod=namespace.getMethod("invoke",new Class[]{null,null});    } catch (    UtilEvalError e) {      throw e.toEvalError("Local method invocation",callerInfo,callstack);    }    if (invokeMethod != null)     return invokeMethod.invoke(new Object[]{commandName,args},interpreter,callstack,callerInfo);    throw new EvalError("Command not found: " + StringUtil.methodString(commandName,argTypes),callerInfo,callstack);  }  if (commandObject instanceof BshMethod)   return ((BshMethod)commandObject).invoke(args,interpreter,callstack,callerInfo);  if (commandObject instanceof Class)   try {    return Reflect.invokeCompiledCommand(((Class)commandObject),args,interpreter,callstack);  } catch (  UtilEvalError e) {    throw e.toEvalError("Error invoking compiled command: ",callerInfo,callstack);  }  throw new InterpreterError("invalid command type");}  }
class C{  private void accept(final IBindingSet bset){  if (groupBy == null || groupBy.length == 0)   throw new IllegalArgumentException();  if (bset == null)   throw new IllegalArgumentException();  final SolutionGroup s=SolutionGroup.newInstance(groupBy,bset,stats);  assert s != null;  SolutionMultiSet m=map.get(s);  if (m == null) {    map.put(s,m=new SolutionMultiSet());  }  if (log.isTraceEnabled())   log.trace("Accepting solution: " + bset);  m.add(bset);}  }
class C{  protected ClientHttpRequest createHttpRequest(final CommandRequest command){  ClientHttpRequest request=createHttpRequest(findLink(command));  Map<String,String> commandParameters=command.getParameters();  for (  Map.Entry<String,String> entry : commandParameters.entrySet()) {    if (NullValueFilter.INSTANCE.accept(entry)) {      request.addParameterValues(entry.getKey(),entry.getValue());    }  }  Map<String,String> environmentVariables=command.getEnvironment();  for (  Map.Entry<String,String> entry : environmentVariables.entrySet()) {    if (EnvironmentVariableFilter.INSTANCE.accept(entry)) {      request.addParameterValues(ENVIRONMENT_VARIABLE_REQUEST_PARAMETER_PREFIX + entry.getKey(),entry.getValue());    }  }  if (command.getFileData() != null) {    request.addParameterValues(RESOURCES_REQUEST_PARAMETER,(Object[])ConvertUtils.convert(command.getFileData()));  }  return request;}  }
class C{  public boolean hasActiveAnimation(){  Collection<Animator> animators=this.values();  for (  Animator a : animators) {    if (a.hasNext()) {      return true;    }  }  return false;}  }
class C{  private static boolean isUnknown(ProtectionDomain domain){  if (domain == null || domain.getCodeSource() == null) {    return true;  }  return false;}  }
class C{  public final String stringValue(int attIndex){  if (m_Dataset == null) {    throw new UnassignedDatasetException("Instance doesn't have access to a dataset!");  }  if (!m_Dataset.attribute(attIndex).isNominal() && !m_Dataset.attribute(attIndex).isString()) {    throw new IllegalArgumentException("Attribute neither nominal nor string!");  }  return m_Dataset.attribute(attIndex).value((int)value(attIndex));}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.009 -0400",hash_original_method="D6613163721C4C325796538CB0D11D1A",hash_generated_method="00242F15393602D1E5604DA5E9B350FF") public E take() throws InterruptedException {  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null)       available.await(); else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        first=null;        if (leader != null)         available.await(); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            available.awaitNanos(delay);          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer("MInOutBoundLineMA[").append(get_ID()).append("-").append("").append("]");  return sb.toString();}  }
class C{  public boolean hasChildNodes(int nodeHandle){  return (getFirstChild(nodeHandle) != NULL);}  }
class C{  public SubscriptionStillActiveException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public void testBlockCommitOnServiceChange() throws Exception {  LinkedList<ReplDBMSEvent> events=new LinkedList<ReplDBMSEvent>();  for (int seqno=0; seqno < 10; seqno++) {    ReplDBMSEvent event=helper.createEvent(seqno,"db01");    event.getDBMSEvent().setMetaDataOption(ReplOptionParams.SERVICE,"service_" + seqno);    events.add(event);  }  checkBlockCommitSemantics(events,BlockCommitPolicy.lax,true,null);  checkBlockCommitSemantics(events,BlockCommitPolicy.strict,false,null);}  }
class C{  private String hexAV() throws IOException {  if (pos + 4 >= chars.length) {    throw new IOException("Invalid distinguished name string");  }  beg=pos;  pos++;  while (true) {    if (pos == chars.length || chars[pos] == '+' || chars[pos] == ',' || chars[pos] == ';') {      end=pos;      break;    }    if (chars[pos] == ' ') {      end=pos;      pos++;      for (; pos < chars.length && chars[pos] == ' '; pos++) {      }      break;    } else     if (chars[pos] >= 'A' && chars[pos] <= 'F') {      chars[pos]+=32;    }    pos++;  }  int hexLen=end - beg;  if (hexLen < 5 || (hexLen & 1) == 0) {    throw new IOException("Invalid distinguished name string");  }  encoded=new byte[hexLen / 2];  for (int i=0, p=beg + 1; i < encoded.length; p+=2, i++) {    encoded[i]=(byte)getByte(p);  }  return new String(chars,beg,hexLen);}  }
class C{  public Boolean isMeesevaUser(final User user){  for (  final Role role : user.getRoles())   if (role != null && role.getName().equalsIgnoreCase(MEESEVA_OPERATOR_ROLE))   return true;  return false;}  }
class C{  public BaseRecentCollectionPage(final BaseRecentCollectionResponse response,final IRecentRequestBuilder builder){  super(response.value,builder);}  }
class C{  @Deprecated public static String nullToEmpty(String string){  return (string == null) ? "" : string;}  }
class C{  public boolean isValid(){  return mCRC[2] == CRC.PASSED || mCRC[2] == CRC.CORRECTED;}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(VerificationSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from " + "https://code.google.com/apis/console/?api=siteVerification into " + "siteVerification-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,Collections.singleton(SiteVerificationScopes.SITEVERIFICATION)).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isDirect(){  return true;}  }
class C{  public List<Movie> findClassics(List<Movie> movies){  return movies.stream().filter(null).collect(toList());}  }
class C{  public void addStaticMethodCall(String owner,String methodName,String targetClass,String targetMethod){  StaticMethodCallEntry call=new StaticMethodCallEntry(owner,methodName,targetClass,targetMethod);  logger.info("Adding new static method call: " + call.toString());  staticMethodCalls.add(call);}  }
class C{  public static <U,I>ParallelTopicModel estimate(FastPreferenceData<U,I> preferences,int k,double alpha,double beta,int numIterations,int burninPeriod) throws IOException {  ParallelTopicModel topicModel=new ParallelTopicModel(k,alpha * k,beta);  topicModel.addInstances(new LDAInstanceList<>(preferences));  topicModel.setTopicDisplay(numIterations + 1,0);  topicModel.setNumIterations(numIterations);  topicModel.setBurninPeriod(burninPeriod);  topicModel.setNumThreads(Runtime.getRuntime().availableProcessors());  topicModel.estimate();  return topicModel;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public Empirical(double[] pdf,int interpolationType,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(pdf,interpolationType);}  }
class C{  public ReplicationJob createJobForDropPartition(long auditLogId,long auditLogEntryCreateTime,NamedPartition namedPartition) throws StateUpdateException {  Map<String,String> extras=new HashMap<>();  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));  ReplicationOperation replicationOperation=ReplicationOperation.DROP_PARTITION;  HiveObjectSpec partitionSpec=new HiveObjectSpec(namedPartition);  List<String> partitionNames=new ArrayList<>();  partitionNames.add(namedPartition.getName());  Optional<String> partitionTldt=ReplicationUtils.getTldt(namedPartition.getPartition());  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,ReplicationUtils.getLocation(namedPartition.getPartition()),srcCluster.getName(),partitionSpec.getTableSpec(),partitionNames,partitionTldt,Optional.empty(),Optional.empty(),extras);  return new ReplicationJob(conf,new DropPartitionTask(srcCluster,destCluster,partitionSpec,partitionTldt),onStateChangeHandler,persistedJobInfo);}  }
class C{  public static String updateMode(String existing,String update) throws IOException {  return toStringMode(updateMode(toOctalMode(existing),toOctalMode(update)));}  }
class C{  public void sortColorsC(int nums[],int n){  int blueStart=n - 1, redEnd=0;  for (int i=0; i <= blueStart; i++) {    while (nums[i] == BLUE && i < blueStart) {      swap(nums,i,blueStart--);    }    while (nums[i] == RED && i > redEnd) {      swap(nums,i,redEnd++);    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildMagicianHouseArea(zone);}  }
class C{  private void animateProperty(int constantName,float toValue){  float fromValue=getValue(constantName);  float deltaValue=toValue - fromValue;  animatePropertyBy(constantName,fromValue,deltaValue);}  }
class C{  public void removeFieldValues(int fldId) throws Exception {  m_flds.removeFieldValues(fldId);}  }
class C{  private boolean isParentClosable(){  return true;}  }
class C{  void cleanupAllocatedDangledIndices(MetaData metaData){  for (  String danglingIndex : danglingIndices.keySet()) {    if (metaData.hasIndex(danglingIndex)) {      logger.debug("[{}] no longer dangling (created), removing from dangling list",danglingIndex);      danglingIndices.remove(danglingIndex);    }  }}  }
class C{  private Object[] createDataRow(RPObject item,int maxPreferredWidth){  Object[] rval=new Object[3];  rval[0]=getItemSprite(item);  rval[1]=getFormattedPrice(item);  StringBuilder html=new StringBuilder("<html><div width=");  html.append(maxPreferredWidth - 170);  html.append('>');  String text=item.get("description_info");  HTMLBuilder build=new HTMLBuilder();  formatter.format(text,defaultAttrs,build);  html.append(build.toHTML());  html.append("</div></html>");  rval[2]=html.toString();  return rval;}  }
class C{  private void parseArgs(String args[]) throws IllegalArgumentException {  int curArg=0;  for (; curArg < args.length; curArg++) {    String arg=args[curArg];    if (arg.equals("--")) {      curArg++;      break;    } else     if (arg.startsWith("--setuid=")) {      if (uidSpecified) {        throw new IllegalArgumentException("Duplicate arg specified");      }      uidSpecified=true;      uid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));    } else     if (arg.startsWith("--setgid=")) {      if (gidSpecified) {        throw new IllegalArgumentException("Duplicate arg specified");      }      gidSpecified=true;      gid=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));    } else     if (arg.startsWith("--target-sdk-version=")) {      if (targetSdkVersionSpecified) {        throw new IllegalArgumentException("Duplicate target-sdk-version specified");      }      targetSdkVersionSpecified=true;      targetSdkVersion=Integer.parseInt(arg.substring(arg.indexOf('=') + 1));    } else     if (arg.equals("--enable-debugger")) {      debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;    } else     if (arg.equals("--enable-safemode")) {      debugFlags|=Zygote.DEBUG_ENABLE_SAFEMODE;    } else     if (arg.equals("--enable-checkjni")) {      debugFlags|=Zygote.DEBUG_ENABLE_CHECKJNI;    } else     if (arg.equals("--enable-jni-logging")) {      debugFlags|=Zygote.DEBUG_ENABLE_JNI_LOGGING;    } else     if (arg.equals("--enable-assert")) {      debugFlags|=Zygote.DEBUG_ENABLE_ASSERT;    } else     if (arg.equals("--runtime-init")) {      runtimeInit=true;    } else     if (arg.startsWith("--seinfo=")) {      if (seInfoSpecified) {        throw new IllegalArgumentException("Duplicate arg specified");      }      seInfoSpecified=true;      seInfo=arg.substring(arg.indexOf('=') + 1);    } else     if (arg.startsWith("--capabilities=")) {      if (capabilitiesSpecified) {        throw new IllegalArgumentException("Duplicate arg specified");      }      capabilitiesSpecified=true;      String capString=arg.substring(arg.indexOf('=') + 1);      String[] capStrings=capString.split(",",2);      if (capStrings.length == 1) {        effectiveCapabilities=Long.decode(capStrings[0]);        permittedCapabilities=effectiveCapabilities;      } else {        permittedCapabilities=Long.decode(capStrings[0]);        effectiveCapabilities=Long.decode(capStrings[1]);      }    } else     if (arg.startsWith("--rlimit=")) {      String[] limitStrings=arg.substring(arg.indexOf('=') + 1).split(",");      if (limitStrings.length != 3) {        throw new IllegalArgumentException("--rlimit= should have 3 comma-delimited ints");      }      int[] rlimitTuple=new int[limitStrings.length];      for (int i=0; i < limitStrings.length; i++) {        rlimitTuple[i]=Integer.parseInt(limitStrings[i]);      }      if (rlimits == null) {        rlimits=new ArrayList();      }      rlimits.add(rlimitTuple);    } else     if (arg.equals("-classpath")) {      if (classpath != null) {        throw new IllegalArgumentException("Duplicate arg specified");      }      try {        classpath=args[++curArg];      } catch (      IndexOutOfBoundsException ex) {        throw new IllegalArgumentException("-classpath requires argument");      }    } else     if (arg.startsWith("--setgroups=")) {      if (gids != null) {        throw new IllegalArgumentException("Duplicate arg specified");      }      String[] params=arg.substring(arg.indexOf('=') + 1).split(",");      gids=new int[params.length];      for (int i=params.length - 1; i >= 0; i--) {        gids[i]=Integer.parseInt(params[i]);      }    } else     if (arg.equals("--invoke-with")) {      if (invokeWith != null) {        throw new IllegalArgumentException("Duplicate arg specified");      }      try {        invokeWith=args[++curArg];      } catch (      IndexOutOfBoundsException ex) {        throw new IllegalArgumentException("--invoke-with requires argument");      }    } else     if (arg.startsWith("--nice-name=")) {      if (niceName != null) {        throw new IllegalArgumentException("Duplicate arg specified");      }      niceName=arg.substring(arg.indexOf('=') + 1);    } else     if (arg.equals("--mount-external-multiuser")) {      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER;    } else     if (arg.equals("--mount-external-multiuser-all")) {      mountExternal=Zygote.MOUNT_EXTERNAL_MULTIUSER_ALL;    } else {      break;    }  }  if (runtimeInit && classpath != null) {    throw new IllegalArgumentException("--runtime-init and -classpath are incompatible");  }  remainingArgs=new String[args.length - curArg];  System.arraycopy(args,curArg,remainingArgs,0,remainingArgs.length);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entityList;  Node entity;  int entityType;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entityList=docType.getEntities();  assertNotNull("entitiesNotNull",entityList);  for (int indexN10049=0; indexN10049 < entityList.getLength(); indexN10049++) {    entity=(Node)entityList.item(indexN10049);    entityType=(int)entity.getNodeType();    assertEquals("documenttypeGetEntitiesTypeAssert",6,entityType);  }}  }
class C{  public void log(final String id){  if (id.contains(" ")) {    throw new IllegalArgumentException(id);  }  final StringBuilder sb=new StringBuilder();  localToString(sb,id);  Diagnostic.developerLog(sb.toString());}  }
class C{  public void addKeyword(Keyword keyword){  getKeywords().add(keyword);}  }
class C{  private void addInnerActionElements(Map<String,String> properties,int configurationPosition,Directives directives,Map<String,List<String>> interpolated,Map<String,List<String>> positional){  List<Map.Entry<String,List<String>>> entries=new ArrayList<>();  if (interpolated != null) {    entries.addAll(interpolated.entrySet());  }  if (positional != null) {    entries.addAll(positional.entrySet());  }  for (int i=0; i < entries.size(); i++) {    if (configurationPosition == i) {      createConfigurationElement(properties,directives);    }    addKeyMultiValueElements(entries.get(i),directives);  }  if (entries.size() < configurationPosition) {    createConfigurationElement(properties,directives);  }}  }
class C{  @SuppressWarnings("RedundantIfStatement") public boolean equalsIgnoreNodeFilter(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  ServiceConfiguration that=(ServiceConfiguration)o;  if (maxPerNodeCnt != that.maxPerNodeCnt)   return false;  if (totalCnt != that.totalCnt)   return false;  if (affKey != null ? !affKey.equals(that.affKey) : that.affKey != null)   return false;  if (cacheName != null ? !cacheName.equals(that.cacheName) : that.cacheName != null)   return false;  if (name != null ? !name.equals(that.name) : that.name != null)   return false;  if (svc != null ? !svc.getClass().equals(that.svc.getClass()) : that.svc != null)   return false;  return true;}  }
class C{  public void redrawPanel(){  repaint();}  }
class C{  public GeoShapeQueryBuilder(String name,ShapeBuilder shape){  this(name,shape,null,null,null);}  }
class C{  public Namespace(final Deserializer deserializer){  this.id=new NamespaceId(deserializer.readString("fqn"));  this.owner=Account.readFrom(deserializer,"owner");  this.height=BlockHeight.readFrom(deserializer,"height");}  }
class C{  public GlowAgeable(Location location,EntityType type,double maxHealth){  super(location,type,maxHealth);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:37.873 -0500",hash_original_method="A6367075CC534F28F93FAF1E0E79C3E5",hash_generated_method="FA6F6FAFF263F064F6AE83CAFD47C7EB") public Object clone(){  SIPRequest retval=(SIPRequest)super.clone();  retval.transactionPointer=null;  if (this.requestLine != null)   retval.requestLine=(RequestLine)this.requestLine.clone();  return retval;}  }
class C{  public boolean isSetVersion(){  return this.version != null;}  }
class C{  public void exportFingerprintFiles(Set<File> fingerprintFiles){  fingerprintFiles.stream().map(null).map(null).forEach(null);}  }
class C{  public boolean deleteFilesSafely(){  boolean result=true;  List<MediaFile> mediaFiles=getMediaFiles();  for (  MediaFile mf : mediaFiles) {    if (!mf.deleteSafely(tvShow.getDataSource())) {      result=false;    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:30.006 -0500",hash_original_method="F296275000E1AA53C7B464F5FDA7A4B5",hash_generated_method="F1FE59F254185FB0421C417ADE74E86C") public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public void registerModifiedMetaClass(ExpandoMetaClass emc){  final Class klazz=emc.getJavaClass();  GroovySystem.getMetaClassRegistry().setMetaClass(klazz,emc);}  }
class C{  public void updateEvaluation(){  currentBest=searchBest();  currentBestPerformance=(currentBest == null) ? null : currentBest.getPerformance();  if ((bestEver == null) || ((currentBest != null) && (currentBestPerformance.compareTo(bestPerformanceEver) > 0))) {    bestEver=new ExampleSetBasedIndividual((AttributeWeightedExampleSet)currentBest.getExampleSet().clone());    bestEver.setPerformance(currentBest.getPerformance());    bestPerformanceEver=bestEver.getPerformance();    generationOfLastImproval=generation;  }}  }
class C{  public void displaySceneGraph(boolean display){  mDisplaySceneGraph=display;}  }
class C{  private void ensureVisible(HighlightView hv){  Rect r=hv.mDrawRect;  int panDeltaX1=Math.max(0,getLeft() - r.left);  int panDeltaX2=Math.min(0,getRight() - r.right);  int panDeltaY1=Math.max(0,getTop() - r.top);  int panDeltaY2=Math.min(0,getBottom() - r.bottom);  int panDeltaX=panDeltaX1 != 0 ? panDeltaX1 : panDeltaX2;  int panDeltaY=panDeltaY1 != 0 ? panDeltaY1 : panDeltaY2;  if (panDeltaX != 0 || panDeltaY != 0) {    panBy(panDeltaX,panDeltaY);  }}  }
class C{  public static String TSIGstring(int i){  return tsigrcodes.getText(i);}  }
class C{  public void drawGlyphVector(GlyphVector g,float x,float y){  Rectangle2D bbox=g.getLogicalBounds();  addDrawingRect(bbox,x,y);  mPrintMetrics.drawText(this);}  }
class C{  public static void escapeJsonString(CharSequence s,boolean asciiOnly,Appendable out) throws IOException {  new Escaper(s,JSON_ESCAPES,asciiOnly ? NO_NON_ASCII : ALLOW_NON_ASCII,JS_ENCODER,out).escape();}  }
class C{  public static ParameterType makeFileParameterType(ParameterHandler parameterHandler,String parameterName,String fileExtension,PortProvider portProvider){  return makeFileParameterType(parameterHandler,parameterName,"Name of the file to read the data from.",fileExtension,portProvider);}  }
class C{  @Override public void onConnectionFailed(ConnectionResult connectionResult){  Log.e(TAG,"onConnectionFailed: ConnectionResult.getErrorCode() = " + connectionResult.getErrorCode());  Toast.makeText(this,"Could not connect to Google API Client: Error " + connectionResult.getErrorCode(),Toast.LENGTH_SHORT).show();  MainActivity.this.finish();}  }
class C{  public synchronized void lockForCommit() throws InterruptedException {  commitRequests++;  while (updateCount > 0 || commitCount > 0) {    wait();  }  commitRequests--;  commitCount++;}  }
class C{  public void message(Z21Message msg){}  }
class C{  public TankDrive(Motor left,Motor right,Relay shifter){  this(left,right,shifter,null);}  }
class C{  public ByteArrayOutputStream(){}  }
class C{  private static Mode decodeAsciiSegment(BitSource bits,StringBuilder result,StringBuilder resultTrailer) throws FormatException {  boolean upperShift=false;  do {    int oneByte=bits.readBits(8);    if (oneByte == 0) {      throw FormatException.getFormatInstance();    } else     if (oneByte <= 128) {      if (upperShift) {        oneByte+=128;      }      result.append((char)(oneByte - 1));      return Mode.ASCII_ENCODE;    } else     if (oneByte == 129) {      return Mode.PAD_ENCODE;    } else     if (oneByte <= 229) {      int value=oneByte - 130;      if (value < 10) {        result.append('0');      }      result.append(value);    } else     if (oneByte == 230) {      return Mode.C40_ENCODE;    } else     if (oneByte == 231) {      return Mode.BASE256_ENCODE;    } else     if (oneByte == 232) {      result.append((char)29);    } else     if (oneByte == 233 || oneByte == 234) {    } else     if (oneByte == 235) {      upperShift=true;    } else     if (oneByte == 236) {      result.append("[)>\u001E05\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 237) {      result.append("[)>\u001E06\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 238) {      return Mode.ANSIX12_ENCODE;    } else     if (oneByte == 239) {      return Mode.TEXT_ENCODE;    } else     if (oneByte == 240) {      return Mode.EDIFACT_ENCODE;    } else     if (oneByte == 241) {    } else     if (oneByte >= 242) {      if (oneByte != 254 || bits.available() != 0) {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);  return Mode.ASCII_ENCODE;}  }
class C{  public Builder tcpAddresses(Collection<String> tcpAddrs){  impl.tcpAddrs=U.sealList(tcpAddrs);  return this;}  }
class C{  protected void afterHide(){}  }
class C{  public void onLocationMarkerClick(LocationMarkerView locationMarkerView){  MapMode mapMode=mapFragment.getMapMode();  if (mapMode != MapMode.POI_POSITION_EDITION && mapMode != MapMode.POI_CREATION) {    mapFragment.unselectMarker();    mapFragment.setMarkerSelected(locationMarkerView);switch (locationMarkerView.getType()) {case POI:      onPoiMarkerClick(locationMarkerView);    break;case NOTE:  onNoteMarkerClick(locationMarkerView);break;default :break;}}}  }
class C{  public static void loadModules(final JTree projectTree,final INaviModule[] modules){  for (  final INaviModule module : modules) {    if (module.isInitialized()) {      CModuleLoader.loadModule(projectTree,module);    } else {      CModuleInitializationFunctions.initializeAndLoadModule(projectTree,module);    }  }}  }
class C{  public static EnumSet<DocumentRelationship> compare(ServiceDocument stateA,ServiceDocument stateB,ServiceDocumentDescription desc,long timeEpsilon){  boolean preferred=false;  EnumSet<DocumentRelationship> results=EnumSet.noneOf(DocumentRelationship.class);  long timeDifference;  if (stateB == null) {    results.add(DocumentRelationship.PREFERRED);    return results;  }  if (stateA.documentVersion > stateB.documentVersion) {    results.add(DocumentRelationship.NEWER_VERSION);    preferred=true;  } else   if (stateA.documentVersion == stateB.documentVersion) {    results.add(DocumentRelationship.EQUAL_VERSION);  }  timeDifference=stateA.documentUpdateTimeMicros - stateB.documentUpdateTimeMicros;  if (timeDifference == 0) {    results.add(DocumentRelationship.EQUAL_TIME);  } else   if (timeDifference > 0) {    results.add(DocumentRelationship.NEWER_UPDATE_TIME);  }  if (results.contains(DocumentRelationship.EQUAL_VERSION)) {    if (Math.abs(timeDifference) < timeEpsilon) {      if (!ServiceDocument.equals(desc,stateA,stateB)) {        results.add(DocumentRelationship.IN_CONFLICT);      }    } else     if (results.contains(DocumentRelationship.NEWER_UPDATE_TIME)) {      preferred=true;    }  }  if (preferred) {    results.add(DocumentRelationship.PREFERRED);  }  return results;}  }
class C{  static double sin_roquen_9(double v){  double i=java.lang.Math.rint(v * PI_INV);  double x=v - i * Math.PI;  double qs=1 - 2 * ((int)i & 1);  double x2=x * x;  double r;  x=qs * x;  r=s5;  r=r * x2 + s4;  r=r * x2 + s3;  r=r * x2 + s2;  r=r * x2 + s1;  return x * r;}  }
class C{  public static String toSepList(Iterator stringIter,String sep){  StringBuilder sb=new StringBuilder();  if (stringIter.hasNext()) {    sb.append((String)stringIter.next());  }  while (stringIter.hasNext()) {    sb.append(sep);    sb.append((String)stringIter.next());  }  return sb.toString();}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public void endPicking(final GL2 gl){}  }
class C{  boolean isUnqualifiable(Symbol sym){  if (sym.name == names.empty || sym.owner == null || sym.owner.kind == MTH || sym.owner.kind == VAR) {    return true;  } else   if (sym.kind == TYP && toplevel != null) {    Scope.Entry e;    e=toplevel.namedImportScope.lookup(sym.name);    if (e.scope != null) {      return e.sym == sym && e.next().scope == null;    }    e=toplevel.packge.members().lookup(sym.name);    if (e.scope != null) {      return e.sym == sym && e.next().scope == null;    }    e=toplevel.starImportScope.lookup(sym.name);    if (e.scope != null) {      return e.sym == sym && e.next().scope == null;    }  }  return false;}  }
class C{  public void print(char[] charArray){  print(new String(charArray,0,charArray.length));}  }
class C{  public boolean isDoubleTapToZoomEnabled(){  return mDoubleTapToZoomEnabled;}  }
class C{  private void loadDirective(String directiveClass,String caption){  try {    Object o=Class.forName(directiveClass).newInstance();    if (o instanceof Directive) {      Directive directive=(Directive)o;      runtimeDirectives.put(directive.getName(),directive);      info("Loaded " + caption + " Directive: "+ directiveClass);    } else {      error(caption + " Directive " + directiveClass+ " is not org.apache.flex.forks.velocity.runtime.directive.Directive."+ " Ignoring. ");    }  } catch (  Exception e) {    error("Exception Loading " + caption + " Directive: "+ directiveClass+ " : "+ e);  }}  }
class C{  public static void main(String... args) throws Exception {  new CheckTextFiles().run();}  }
class C{  public void sendKeys(final CharSequence arg0){  findElement();  element.sendKeys(arg0);}  }
class C{  @Override public long ramBytesUsed(){  long mem=RamUsageEstimator.shallowSizeOf(this);  if (root != null) {    mem+=root.sizeInBytes();  }  return mem;}  }
class C{  public Direction calculateDirection(Entity entity){  if (provider instanceof Block) {    Optional<RayTracer.RayTraceBlockResult> hit=new RayTracer(entity).setDistance(7).rayTraceBlocks(entity.world()).filter(null).findFirst();    if (hit.isPresent()) {      return (isFlip) ? hit.get().side.opposite() : hit.get().side;    }  }  return Direction.UNKNOWN;}  }
class C{  static void svd_dcopy(int n,double[] dx,int incx,double[] dy,int incy){  svd_dcopy(n,dx,0,incx,dy,0,incy);}  }
class C{  void zApplyMinimumToggleTimeMenuButtonWidthInPixels(){  if (parent == null) {    return;  }  Dimension menuButtonPreferredSize=parent.getComponentToggleTimeMenuButton().getPreferredSize();  int width=menuButtonPreferredSize.width;  int height=menuButtonPreferredSize.height;  int minimumWidth=minimumToggleTimeMenuButtonWidthInPixels;  width=(width < minimumWidth) ? minimumWidth : width;  Dimension newSize=new Dimension(width,height);  parent.getComponentToggleTimeMenuButton().setPreferredSize(newSize);}  }
class C{  public Reader asReader(){  return new StrBuilderReader();}  }
class C{  public static void main(String argv[]){  try {    generate(argv);  } catch (  GeneratorException e) {    Out.statistics();    System.exit(1);  }catch (  SilentExit e) {    System.exit(e.exitCode());  }}  }
class C{  public String errorMessage(String message){  return message;}  }
class C{  public ParameterPair(Parameter a,Parameter b){  setPair(a,b);}  }
class C{  static private long fac1(int j){  long i=j;  if (j < 0)   i=Math.abs(j);  if (i > longFactorials.length)   throw new IllegalArgumentException("Overflow");  long d=1;  while (i > 1)   d*=i--;  if (j < 0)   return -d; else   return d;}  }
class C{  public int readULongAsInt() throws IOException {  long ulong=this.readULong();  if ((ulong & 0x80000000) == 0x80000000) {    throw new ArithmeticException("Long value too large to fit into an integer.");  }  return ((int)ulong) & ~0x80000000;}  }
class C{  public boolean isXmtBusy(){  return false;}  }
class C{  private void doLoad(HttpServletRequest request,SubjectAreaEditForm frm) throws Exception {  Long id=null;  try {    id=Long.parseLong(request.getParameter("id"));  } catch (  Exception e) {    throw new Exception("Invalid Subject Area IDencountered");  }  sessionContext.checkPermission(id,"SubjectArea",Right.SubjectAreaEdit);  SubjectArea sa=new SubjectAreaDAO().get(id);  frm.setUniqueId(id);  frm.setAbbv(sa.getSubjectAreaAbbreviation() != null ? sa.getSubjectAreaAbbreviation() : "");  frm.setDepartment(sa.getDepartment() != null ? sa.getDepartment().getUniqueId() : null);  frm.setExternalId(sa.getExternalUniqueId() != null ? sa.getExternalUniqueId() : "");  frm.setTitle(sa.getTitle() != null ? sa.getTitle() : "");}  }
class C{  public void addListener(PrivacyListListener listener){synchronized (listeners) {    listeners.add(listener);  }}  }
class C{  public void clearAttributes(){  attributes.clear();}  }
class C{  public List<Operator> selectOperators(){  ArrayList<Operator> ops=new ArrayList<Operator>();  for (  PartitionSubstitutionModel model : getPartitionSubstitutionModels()) {    model.selectOperators(ops);  }  for (  PartitionClockModel model : getPartitionClockModels()) {    model.selectOperators(ops);  }  clockModelOptions.selectOperators(ops);  for (  PartitionClockModelSubstModelLink clockSubst : getTraitClockSubstLinks()) {    clockSubst.selectOperators(ops);  }  for (  PartitionTreeModel tree : getPartitionTreeModels()) {    tree.selectOperators(ops);  }  treeModelOptions.selectOperators(ops);  for (  PartitionTreePrior prior : getPartitionTreePriors()) {    prior.selectOperators(ops);  }  for (  PartitionClockModelTreeModelLink clockTree : getPartitionClockTreeLinks()) {    clockTree.selectOperators(ops);  }  if (useStarBEAST) {    starBEASTOptions.selectOperators(ops);  }  if (contains(Microsatellite.INSTANCE)) {    microsatelliteOptions.selectOperators(ops);  }  selectComponentOperators(this,ops);  List<Operator> toRemove=new ArrayList<Operator>();  for (  Operator operator : ops) {    if ((operator.getParameter1() != null && operator.getParameter1().isLinked) || (operator.getParameter2() != null && operator.getParameter2().isLinked)) {      toRemove.add(operator);    }  }  ops.removeAll(toRemove);  return ops;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected boolean emptyByteBufferTest(Mac theMac){  ByteBuffer buf=generateRandomByteBuffer(0);  theMac.update(buf);  theMac.doFinal();  return true;}  }
class C{  public void removeMarker(String property,String marker){  getPropertyHandler().removeMarker(property,marker);}  }
class C{  @Override public void validate(final IDescription desc){  final Iterable<IDescription> matches=desc.getChildrenWithKeyword(MATCH);  final IExpression switchValue=desc.getFacetExpr(VALUE);  if (switchValue == null) {    return;  }  final IType switchType=switchValue.getType();  if (switchType.equals(Types.NO_TYPE)) {    return;  }  for (  final IDescription match : matches) {    final IExpression value=match.getFacetExpr(VALUE);    if (value == null) {      continue;    }    final IType<?> matchType=value.getType();    if (Types.intFloatCase(matchType,switchType)) {      match.warning("The value " + value.serialize(false) + " of type "+ matchType+ " is compared to a value of type "+ switchType+ ", which will never match ",IGamlIssue.SHOULD_CAST,IKeyword.VALUE,switchType.toString());      continue;    }    if (matchType.isTranslatableInto(switchType)) {      continue;    }    match.warning("The value " + value.serialize(false) + " of type "+ matchType+ " is compared to a value of type "+ switchType+ ", which will never match ",IGamlIssue.SHOULD_CAST,IKeyword.VALUE,switchType.toString());  }}  }
class C{  public void onGetMessageFromWXReq(WXMediaMessage msg){  Intent iLaunchMyself=getPackageManager().getLaunchIntentForPackage(getPackageName());  startActivity(iLaunchMyself);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  protected void drawCylinder(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean isShadow){  int h4=h / 4;  int r=w - 1;  if (fillColor != null || fillPaint != null) {    Area area=new Area(new Rectangle(x,y + h4 / 2,r,h - h4));    area.add(new Area(new Rectangle(x,y + h4 / 2,r,h - h4)));    area.add(new Area(new Ellipse2D.Double(x,y,r,h4)));    area.add(new Area(new Ellipse2D.Double(x,y + h - h4,r,h4)));    if (isShadow) {      g.setColor(mxConstants.SHADOW_COLOR);      g.translate(mxConstants.SHADOW_OFFSETX,mxConstants.SHADOW_OFFSETY);      g.fill(area);      g.translate(-mxConstants.SHADOW_OFFSETX,-mxConstants.SHADOW_OFFSETY);    }    if (fillPaint != null) {      g.setPaint(fillPaint);    } else {      g.setColor(fillColor);    }    g.fill(area);  }  if (penColor != null) {    g.setColor(penColor);    int h2=h4 / 2;    g.drawOval(x,y,r,h4);    g.drawLine(x,y + h2,x,y + h - h2);    g.drawLine(x + w - 1,y + h2,x + w - 1,y + h - h2);    g.drawArc(x,y + h - h4,r,h4,0,-180);  }}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Description("Creates a new namepsace.") public NamespaceDto createNamespace(@Context HttpServletRequest req,NamespaceDto namespaceDto){  if (namespaceDto == null) {    throw new WebApplicationException("Null namespace object cannot be created.",Status.BAD_REQUEST);  }  PrincipalUser remoteUser=validateAndGetOwner(req,null);  Set<PrincipalUser> users=_getPrincipalUserByUserName(namespaceDto.getUsernames());  Namespace namespace=new Namespace(remoteUser,namespaceDto.getQualifier(),remoteUser,users);  return NamespaceDto.transformToDto(_namespaceService.createNamespace(namespace));}  }
class C{  public void flush() throws java.io.IOException {  flushBuffer();  m_os.flush();}  }
class C{  @Override public IterationObject copy(){  return new IterationObject(this);}  }
class C{  public synchronized boolean contains(Object value){  if (value == null) {    throw new NullPointerException();  }  Entry[] tab=table;  for (int i=tab.length; i-- > 0; ) {    for (Entry e=tab[i]; e != null; e=e.next) {      if (e.value.equals(value)) {        return true;      }    }  }  return false;}  }
class C{  public static void showView(final IViewPart viewPart){  Check.notNull(viewPart,"viewPart");  try {    final IViewSite viewSite=viewPart.getViewSite();    viewSite.getPage().showView(viewSite.getId());  } catch (  final PartInitException e) {    final String messageFormat="Could not create view part {0}";    final String message=MessageFormat.format(messageFormat,viewPart.getViewSite().getId());    log.warn(message,e);  }}  }
class C{  public DBException(Exception e,String sql){  this(e,sql,(Object[])null);}  }
class C{  public Unpack(ByteBuffer buf){  this(buf.array(),buf.position(),buf.limit() - buf.position());}  }
class C{  public ShareCollectionRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public double negativeRatio(){  return (double)negatives / (double)occupiedBits;}  }
class C{  public Stream<RayTraceBlockResult> rayTraceBlocks(Set<Block> blocks){  return rayTraceBlocks(blocks.stream());}  }
class C{  public void verifyInc(SegmentedTimeline timeline){  for (long testCycle=TEST_CYCLE_START; testCycle < TEST_CYCLE_END; testCycle+=TEST_CYCLE_INC) {    long m=timeline.getSegmentSize();    SegmentedTimeline.Segment segment=timeline.getSegment(testCycle);    SegmentedTimeline.Segment seg1=segment.copy();    for (int i=0; i < 1000; i++) {      SegmentedTimeline.Segment seg2=seg1.copy();      seg2.inc();      if ((seg1.getSegmentEnd() + 1) != seg2.getSegmentStart()) {        assertTrue(!timeline.containsDomainRange(seg1.getSegmentEnd() + 1,seg2.getSegmentStart() - 1));        assertEquals(0,(seg2.getSegmentStart() - seg1.getSegmentStart()) % m);        assertEquals(0,(seg2.getSegmentEnd() - seg1.getSegmentEnd()) % m);        assertEquals(0,(seg2.getMillisecond() - seg1.getMillisecond()) % m);      } else {        assertEquals(seg1.getSegmentStart() + m,seg2.getSegmentStart());        assertEquals(seg1.getSegmentEnd() + m,seg2.getSegmentEnd());        assertEquals(seg1.getMillisecond() + m,seg2.getMillisecond());      }      SegmentedTimeline.Segment seg3=seg1.copy();      SegmentedTimeline.Segment seg4=seg1.copy();      for (int j=0; j < i; j++) {        seg3.inc();      }      seg4.inc(i);      assertEquals(seg3.getSegmentStart(),seg4.getSegmentStart());      assertEquals(seg3.getSegmentEnd(),seg4.getSegmentEnd());      assertEquals(seg3.getMillisecond(),seg4.getMillisecond());      seg1.inc();    }  }}  }
class C{  public static Method findMethod(Class<?> entityClass,String name,Class<?>... paramClass) throws NoSuchMethodException {  Method m=entityClass.getMethod(name,paramClass);  int modifiers=m.getModifiers();  if (Modifier.isAbstract(modifiers) || m.isAnnotationPresent(Transient.class) && !m.isAnnotationPresent(ComputedAttribute.class) && !m.isAnnotationPresent(ComputedRelationship.class)) {    throw new NoSuchMethodException(name);  }  return m;}  }
class C{  public LimitTokenCountFilter(TokenStream in,int maxTokenCount){  this(in,maxTokenCount,false);}  }
class C{  static void generateCharacterClass(String theTemplateFileName,String theOutputFileName) throws FileNotFoundException, IOException {  BufferedReader in=new BufferedReader(new FileReader(theTemplateFileName));  PrintWriter out=new PrintWriter(new BufferedWriter(new FileWriter(theOutputFileName)));  out.println(commentStart + " This file was generated AUTOMATICALLY from a template file " + new java.util.Date()+ commentEnd);  int marklen=commandMarker.length();  LOOP:   while (true) {    try {      String line=in.readLine();      if (line == null)       break LOOP;      int pos=0;      int depth=0;      while ((pos=line.indexOf(commandMarker,pos)) >= 0) {        int newpos=pos + marklen;        char ch='x';        SCAN:         while (newpos < line.length() && (Character.isJavaIdentifierStart(ch=line.charAt(newpos)) || ch == '(' || (ch == ')' && depth > 0))) {          ++newpos;          if (ch == '(') {            ++depth;          } else           if (ch == ')') {            --depth;            if (depth == 0)             break SCAN;          }        }        String replacement=replaceCommand(line.substring(pos + marklen,newpos));        line=line.substring(0,pos) + replacement + line.substring(newpos);        pos+=replacement.length();      }      out.println(line);    } catch (    IOException e) {      break LOOP;    }  }  in.close();  out.close();}  }
class C{  public final int calcMobilityTools(){  double[] utils=new double[6];  utils[0]=this.calcCARneverPTnoUtil();  utils[1]=this.calcCARsometimesPTnoUtil();  utils[2]=this.calcCARalwaysPTnoUtil();  utils[3]=this.calcCARneverPTyesUtil();  utils[4]=this.calcCARsometimesPTyesUtil();  utils[5]=this.calcCARalwaysPTyesUtil();  double[] probs=this.calcLogitProbability(utils);  double r=MatsimRandom.getRandom().nextDouble();  double prob_sum=0.0;  for (int i=0; i < probs.length; i++) {    prob_sum+=probs[i];    if (r < prob_sum) {      return i;    }  }  throw new RuntimeException("It should never reach this line!");}  }
class C{  private void timeOfDay(){  int hour, minute=0;  scanner.saveState();  if (token.value.length() > 2) {    return;  }  hour=Integer.parseInt(token.value);  token=scanner.nextToken();  if (token.id == TimeToken.SLASH) {    token=scanner.restoreState();    return;  }  if (token.id == TimeToken.COLON || token.id == TimeToken.DOT) {    expectToken(TimeToken.NUMBER,"Parsing HH:MM or HH.MM syntax, expecting MM as number, got none");    minute=Integer.parseInt(token.value);    if (minute > 59) {      throw new IllegalArgumentException("Parsing HH:MM or HH.MM syntax, got MM = " + minute + " (>59!)");    }    token=scanner.nextToken();    if (token.id == TimeToken.DOT) {      token=scanner.restoreState();      return;    }  }  if (token.id == TimeToken.AM || token.id == TimeToken.PM) {    if (hour > 12) {      throw new IllegalArgumentException("There cannot be more than 12 AM or PM hours");    }    if (token.id == TimeToken.PM) {      if (hour != 12) {        hour+=12;      }    } else {      if (hour == 12) {        hour=0;      }    }    token=scanner.nextToken();  } else   if (hour > 23) {    token=scanner.restoreState();    return;  }  spec.hour=hour;  spec.min=minute;  spec.sec=0;  if (spec.hour == 24) {    spec.hour=0;    spec.day++;  }}  }
class C{  @Override public boolean equals(Object obj){  return (obj == this);}  }
class C{  public NumericLiteral(float x){  m_number=new Float(x);  m_type=float.class;}  }
class C{  public void testNames(){  String[] names=null;  SpellCheckedMetadata meta=new SpellCheckedMetadata();  names=meta.names();  assertEquals(0,names.length);  meta.add("name-one","value");  names=meta.names();  assertEquals(1,names.length);  assertEquals("name-one",names[0]);  meta.add("name-two","value");  names=meta.names();  assertEquals(2,names.length);}  }
class C{  @RequestMapping(value="podcast_by_id",method=RequestMethod.POST) public String updateFeedAttributesPodcastById(@ModelAttribute("updatePodcastByIdForm") PodcastByIdForm updatePodcastByIdForm,BindingResult bindingResult,ModelMap model) throws IllegalArgumentException, FeedException, IOException {  if (bindingResult.hasErrors()) {    return "redirect:/admin";  }  LOG.debug("------ updatePodcastById : update and its episodes from DB by podcast's id -----");  updateFeedAttributesService.updateFeedAttributesForPodcastId(updatePodcastByIdForm.getPodcastId(),updatePodcastByIdForm.getIsFeedLoadedFromLocalFile());  return "redirect:/admin/update/feed";}  }
class C{  private CacheEntry cacheLocked(ComponentName componentName,LauncherActivityInfoCompat info,UserHandleCompat user,boolean usePackageIcon,boolean useLowResIcon){  ComponentKey cacheKey=new ComponentKey(componentName,user);  CacheEntry entry=mCache.get(cacheKey);  if (entry == null || (entry.isLowResIcon && !useLowResIcon)) {    entry=new CacheEntry();    mCache.put(cacheKey,entry);    if (!getEntryFromDB(cacheKey,entry,useLowResIcon)) {      if (info != null) {        Drawable icon=info.getIcon(mIconDpi,mIconPackHelper);        entry.icon=Utilities.createBadgedIconBitmap(icon,info.getUser(),mContext,info.isThemed() ? null : mIconPackHelper);      } else {        if (usePackageIcon) {          CacheEntry packageEntry=getEntryForPackageLocked(componentName.getPackageName(),user,false);          if (packageEntry != null) {            if (DEBUG)             Log.d(TAG,"using package default icon for " + componentName.toShortString());            entry.icon=packageEntry.icon;            entry.title=packageEntry.title;            entry.contentDescription=packageEntry.contentDescription;          }        }        if (entry.icon == null) {          if (DEBUG)           Log.d(TAG,"using default icon for " + componentName.toShortString());          entry.icon=getDefaultIcon(user);        }      }    }    if (TextUtils.isEmpty(entry.title) && info != null) {      entry.title=info.getLabel();      entry.contentDescription=mUserManager.getBadgedLabelForUser(entry.title,user);    }  }  return entry;}  }
class C{  public boolean loadConfiguration(final File file){  try {    configuration=(MqttSpyDaemonConfiguration)parser.loadFromFile(file);    populateDefaults();    return true;  } catch (  XMLException e) {    logger.error("Cannot process the configuration file at " + file.getAbsolutePath(),e);  }catch (  FileNotFoundException e) {    logger.error("Cannot read the configuration file from " + file.getAbsolutePath(),e);  }  return false;}  }
class C{  public boolean isOpen(){  return open && (openedToRight || openedToLeft);}  }
class C{  protected void showBalloon(Balloon balloon,Position position){  Vec4 screenVec4=this.wwd.getView().project(this.wwd.getModel().getGlobe().computePointFromPosition(position));  Point screenPoint=new Point((int)screenVec4.x,(int)(this.wwd.getView().getViewport().height - screenVec4.y));  if (balloon instanceof ScreenBalloon) {    ((ScreenBalloon)balloon).setScreenLocation(screenPoint);  } else {    ((GlobeBalloon)balloon).setPosition(position);  }  if (this.mustAdjustPosition(balloon))   this.adjustPosition(balloon,screenPoint);  this.balloon=balloon;  this.balloon.setVisible(true);}  }
class C{  public void reloadPreferences(Context context){  for (  KeyboardAction keyboardAction : mKeyboardActions) {    keyboardAction.refreshPreferences(context);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int Merit=getInt(stack);  CaptureDevice capDev=getCapDev(stack);  if (capDev != null)   capDev.setMerit(Merit);  return null;}  }
class C{  public FlatBufferBuilder(int initial_size){  if (initial_size <= 0)   initial_size=1;  space=initial_size;  bb=newByteBuffer(initial_size);}  }
class C{  @Override public void deletePage(int pageID){  try {    super.deletePage(pageID);    countWrite();    byte[] array=pageToByteArray(null);    file.getRecordBuffer(pageID).put(array);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public synchronized final void incrementProgressBy(int diff){  setProgress(mProgress + diff);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:01.508 -0400",hash_original_method="A9DEAEFACA924C792443989EB127F9DE",hash_generated_method="AA3EB45FD65D0E088548003CE64926D1") public AtParser(){  mBasicHandlers=new HashMap<Character,AtCommandHandler>();  mExtHandlers=new HashMap<String,AtCommandHandler>();  mLastInput="";}  }
class C{  protected void refresh(){  PreparedStatement pstmt=null;  ResultSet rs=null;  int leadRowKey=0;  if (p_table != null || p_table.getRowCount() > 0)   leadRowKey=p_table.getLeadRowKey();  if (m_C_BPartner_ID != leadRowKey) {    m_C_BPartner_ID=leadRowKey;  }  if (detailTabBox.getSelectedIndex() == 0) {    log.finest(m_sqlContact);    try {      pstmt=DB.prepareStatement(m_sqlContact,null);      pstmt.setInt(1,m_C_BPartner_ID);      rs=pstmt.executeQuery();      contactTbl.loadTable(rs);      rs.close();    } catch (    Exception e) {      log.log(Level.WARNING,m_sqlContact,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  } else {    log.finest(m_sqlAddress);    try {      pstmt=DB.prepareStatement(m_sqlAddress,null);      pstmt.setInt(1,m_C_BPartner_ID);      rs=pstmt.executeQuery();      addressTbl.loadTable(rs);      rs.close();    } catch (    Exception e) {      log.log(Level.WARNING,m_sqlContact,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }    String trxName=Trx.createTrxName();    for (int row=0; row < addressTbl.getRowCount(); row++) {      int loc_id=0;      Object loc_data=addressTbl.getValueAt(row,addressTbl.getKeyColumnIndex());      if (loc_data != null && loc_data instanceof IDColumn) {        IDColumn dataColumn=(IDColumn)loc_data;        loc_id=dataColumn.getRecord_ID();      }      MLocation loc=MLocation.getBPLocation(Env.getCtx(),loc_id,trxName);      addressTbl.setValueAt(loc.toString(),row,ADDRESS_INDEX);    }    Trx.get(trxName,false).close();    addressTbl.autoSize();  }}  }
class C{  public GeometricObject(String color,boolean filled){  dateCreated=new java.util.Date();  this.color=color;  this.filled=filled;}  }
class C{  public Object put(int key,Object value){  Entry[] tab=table;  final int hash=key;  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if (e.hash == hash) {      final Object old=e.value;      e.value=value;      return old;    }  }  if (count >= threshold) {    rehash();    tab=table;    index=(hash & 0x7FFFFFFF) % tab.length;  }  final Entry e=new Entry(hash,key,value,tab[index]);  tab[index]=e;  count++;  return null;}  }
class C{  public static void generateOptimizingCompilerSubsystemReport(boolean explain){  if (!VM.MeasureCompilationPhases) {    return;  }  VM.sysWrite("\t\tOptimizing Compiler SubSystem\n");  VM.sysWrite("\tPhase\t\t\t\t\tTime\n");  VM.sysWrite("\t\t\t\t\t   (ms)    (%ofTotal)\n");  double total=0.0;  for (  OptimizationPlanElement element : masterPlan) {    total+=element.elapsedTime();  }  for (  OptimizationPlanElement element : masterPlan) {    element.reportStats(8,40,total);  }  VM.sysWrite("\n\tTOTAL COMPILATION TIME\t\t");  int t=(int)total, places=t;  if (places == 0) {    places=1;  }  while (places < 1000000) {    VM.sysWrite(" ");    places*=10;  }  VM.sysWrite(t);  VM.sysWrite("\n");}  }
class C{  @Override public boolean equals(Object o){  if (o != null && o instanceof PLRect) {    if (this == o)     return true;    PLRect rect=(PLRect)o;    return (leftTop.equals(rect.leftTop) && rightBottom.equals(rect.rightBottom));  }  return false;}  }
class C{  public ConnectExceptions(){  super(LocalizedStrings.ConnectException_COULD_NOT_CONNECT.toLocalizedString());  this.causes=new ArrayList();  this.members=new ArrayList();}  }
class C{  private static InputStream changeGwtSdkVersionInPom(InputStream pomxmlStream,String withGwtSdkVersion) throws IOException {  BufferedReader reader=new BufferedReader(new InputStreamReader(pomxmlStream));  StringBuffer modifiedPom=new StringBuffer();  String line;  while ((line=reader.readLine()) != null) {    String replaceWith="<gwt.version>" + withGwtSdkVersion + "</gwt.version>";    line=line.replaceFirst("<gwt.version>.*?</gwt.version>",replaceWith);    replaceWith="<gwt.plugin.version>" + withGwtSdkVersion + "</gwt.plugin.version>";    line=line.replaceFirst("<gwt.plugin.version>.*?</gwt.plugin.version>",replaceWith);    modifiedPom.append(line + "\n");  }  return new ByteArrayInputStream(modifiedPom.toString().getBytes());}  }
class C{  public void test_getAttributesLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() throws SQLException {}  }
class C{  static ImmutableList<Tok> buildToks(String text,ImmutableSet<Integer> stopIds) throws InvalidInputException, FormatterException {  stopIds=ImmutableSet.<Integer>builder().addAll(stopIds).add(ITerminalSymbols.TokenNameEOF).build();  int kN=0;  IScanner scanner=ToolFactory.createScanner(true,true,true,"1.8");  scanner.setSource(text.toCharArray());  int textLength=text.length();  List<Tok> toks=new ArrayList<>();  int charI=0;  int columnI=0;  while (scanner.getCurrentTokenEndPosition() < textLength - 1) {    int tokenId=scanner.getNextToken();    if (stopIds.contains(tokenId)) {      break;    }    int charI0=scanner.getCurrentTokenStartPosition();    String originalTokText=text.substring(charI0,scanner.getCurrentTokenEndPosition() + 1);    String tokText=new String(scanner.getCurrentTokenSource());    char tokText0=tokText.charAt(0);    final boolean isToken;    final boolean isNumbered;    String extraNewline=null;    List<String> strings=new ArrayList<>();    if (Character.isWhitespace(tokText0)) {      isToken=false;      isNumbered=false;      Iterator<String> it=Newlines.lineIterator(originalTokText);      while (it.hasNext()) {        String line=it.next();        String newline=Newlines.getLineEnding(line);        if (newline != null) {          String spaces=line.substring(0,line.length() - newline.length());          if (!spaces.isEmpty()) {            strings.add(spaces);          }          strings.add(newline);        } else         if (!line.isEmpty()) {          strings.add(line);        }      }    } else     if (tokText.startsWith("'") || tokText.startsWith("\"")) {      isToken=true;      isNumbered=true;      strings.add(originalTokText);    } else     if (tokText.startsWith("//") || tokText.startsWith("/*")) {      if (tokText.startsWith("//") && (originalTokText.endsWith("\n") || originalTokText.endsWith("\r"))) {        extraNewline=Newlines.getLineEnding(originalTokText);        tokText=tokText.substring(0,tokText.length() - extraNewline.length());        originalTokText=originalTokText.substring(0,originalTokText.length() - extraNewline.length());      }      isToken=false;      isNumbered=true;      strings.add(originalTokText);    } else     if (Character.isJavaIdentifierStart(tokText0) || Character.isDigit(tokText0) || (tokText0 == '.' && tokText.length() > 1 && Character.isDigit(tokText.charAt(1)))) {      isToken=true;      isNumbered=true;      strings.add(tokText);    } else {      isToken=true;      isNumbered=true;      for (      char c : tokText.toCharArray()) {        strings.add(String.valueOf(c));      }    }    if (strings.size() == 1) {      toks.add(new Tok(isNumbered ? kN++ : -1,originalTokText,tokText,charI,columnI,isToken,tokenId));      charI+=originalTokText.length();      columnI=updateColumn(columnI,originalTokText);    } else {      if (strings.size() != 1 && !tokText.equals(originalTokText)) {        throw new FormatterException("Unicode escapes not allowed in whitespace or multi-character operators");      }      for (      String str : strings) {        toks.add(new Tok(isNumbered ? kN++ : -1,str,str,charI,columnI,isToken,tokenId));        charI+=str.length();        columnI=updateColumn(columnI,originalTokText);      }    }    if (extraNewline != null) {      toks.add(new Tok(-1,extraNewline,extraNewline,charI,columnI,false,tokenId));      columnI=0;      charI+=extraNewline.length();    }  }  toks.add(new Tok(kN,"","",charI,columnI,true,ITerminalSymbols.TokenNameEOF));  return ImmutableList.copyOf(toks);}  }
class C{  public static void i(String tag,String msg,Object... args){  if (sLevel > LEVEL_INFO) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.i(tag,msg);}  }
class C{  @Override public void move(int index,int direction){}  }
class C{  public Z21Message(byte[] a,int l){  super(String.valueOf(a));  setBinary(true);}  }
class C{  private void grantRoleForUser(VOUser user){  identityServiceClient.grantUserRoles(user.getUserId(),UserRoleType.PLATFORM_OPERATOR);  VOUser voUser=identityServiceClient.getVOUser(user.getUserId());  System.out.print("After grant user role, user contains role: ");  for (  UserRoleType role : voUser.getUserRoles()) {    System.out.print("\"" + role + "\" ");  }  System.out.println("");}  }
class C{  public final int peek(){  try {    return m_map[m_firstFree - 1];  } catch (  ArrayIndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public void release(){  mIsReleased=true;  mSoundPool.release();}  }
class C{  private void updateTasks(List<Task> tasks,Predicate<Task> filter,Task.Status status,ControlRequest request){  Collection<Task> filteredTasks=Collections2.filter(tasks,filter);  for (  Task task : filteredTasks) {    log.info("Found task {} with status {}",task.getId(),task.getStatus());    task.setStatus(status.toString());    if (NullColumnValueGetter.isNotNullValue(request.getLockGroup())) {      Calendar cal=Calendar.getInstance();      cal.setTimeInMillis(request.getTimestamp());      task.setQueuedStartTime(cal);      task.setQueueName(request.getLockGroup());    } else {      task.setQueueName(NullColumnValueGetter.getNullStr());      task.setQueuedStartTime(null);    }  }  dbClient.persistObject(tasks);}  }
class C{  public static <F>Stream<F> read(InputStream in,Parser<F> fp) throws IOException {  return Utils.readElemens(in,fp);}  }
class C{  public AbFocusView(Context context){  this(context,null);}  }
class C{  public boolean doit(){  msecs=0;  for (int i=0; i < times; i++) {    long m=reencode();    if (m < 0)     return false;    msecs+=m;  }  if (times > 1)   msecs/=(times);  return true;}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public void clearMarkers(){  markers.clear();  fireUpdateEvent(REDRAW_EVENT);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(7);  newVector.addElement(new Option("\tPopulation size","L",1,"-L <integer>"));  newVector.addElement(new Option("\tDescendant population size","A",1,"-A <integer>"));  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));  newVector.addElement(new Option("\tUse mutation.\n\t(default true)","M",0,"-M"));  newVector.addElement(new Option("\tUse cross-over.\n\t(default true)","C",0,"-C"));  newVector.addElement(new Option("\tUse tournament selection (true) or maximum subpopulatin (false).\n\t(default false)","O",0,"-O"));  newVector.addElement(new Option("\tRandom number seed","R",1,"-R <seed>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public Result<Object[]> evaluate(Class<?>... concepts) throws QueryEvaluationException {  TupleQueryResult tuple=query.evaluate();  List<String> bindings=tuple.getBindingNames();  bindings=bindings.subList(0,concepts.length);  return new ResultImpl(new ObjectArrayCursor(manager,tuple,bindings));}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  if (max >= 0 && pos >= max) {    return -1;  }  long maxRead=max >= 0 ? Math.min(len,max - pos) : len;  int bytesRead=in.read(b,off,(int)maxRead);  if (bytesRead == -1) {    return -1;  }  pos+=bytesRead;  return bytesRead;}  }
class C{  private void dialogChanged(){  String fileName=getFilename();  String set=getSetname();  if ((null == fileName) || (fileName.length() < 1)) {    updateStatus("File name must be specified");    return;  }  if ((null == set) || (set.length() < 1)) {    updateStatus("Set name must be specified");    return;  }  updateStatus(null);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double maxDist=Double.POSITIVE_INFINITY;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  returnNumberToInterpolate=args[2].toLowerCase();  resolution=Double.parseDouble(args[3]);  excludeNeverClassified=Boolean.parseBoolean(args[4]);  excludeUnclassified=Boolean.parseBoolean(args[5]);  excludeBareGround=Boolean.parseBoolean(args[6]);  excludeLowVegetation=Boolean.parseBoolean(args[7]);  excludeMediumVegetation=Boolean.parseBoolean(args[8]);  excludeHighVegetation=Boolean.parseBoolean(args[9]);  excludeBuilding=Boolean.parseBoolean(args[10]);  excludeLowPoint=Boolean.parseBoolean(args[11]);  excludeModelKeyPoint=Boolean.parseBoolean(args[12]);  excludeWater=Boolean.parseBoolean(args[13]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    maxDist=(resolution * 2) * (resolution * 2);    PointRecord point;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < las.getNumPointRecords(); a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            z=point.getZ();            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      str1="Data Scale:\tcontinuous";      out.println(str1);      str1="Preferred Palette:\t" + "spectrum.pal";      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      int numPointsToUse=10;      int numPointsInArea=0;      boolean flag=false;      int maxIteration=20;      int k=0;      double halfResolution=resolution / 2;      double area=Math.PI * maxDist;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          numPointsToUse=10;          flag=false;          k=0;          do {            k++;            results=pointsTree.nearestNeighbor(entry,numPointsToUse,true);            for (i=0; i < results.size(); i++) {              if (results.get(i).distance > maxDist) {                flag=true;              }            }            if (!flag) {              numPointsToUse=numPointsToUse * 2;            }          } while (!flag && k < maxIteration);          numPointsInArea=0;          for (i=0; i < results.size(); i++) {            if (results.get(i).distance <= maxDist) {              numPointsInArea++;            }          }          image.setValue(row,col,numPointsInArea / area);        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Calculating point density:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static java.lang.Thread currentThread(){  return null;}  }
class C{  public static IdString fromUrl(String id){  return new IdString(id);}  }
class C{  public NamedThreadPoolExecutor(String poolName,int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> queue,RejectedExecutionHandler handler){  super(corePoolSize,corePoolSize,keepAliveTime,unit,queue,new NamedThreadFactory(poolName),handler);  setPoolName(poolName);}  }
class C{  public boolean canPublish(final ReviewDb db) throws OrmException {  return (isOwner() || getRefControl().canPublishDrafts()) && isVisible(db);}  }
class C{  @Nullable public static ClusterNode oldestAliveCacheServerNode(GridCacheSharedContext ctx,AffinityTopologyVersion topVer){  Collection<ClusterNode> nodes=ctx.discovery().aliveServerNodesWithCaches(topVer);  if (nodes.isEmpty())   return null;  return oldest(nodes);}  }
class C{  public boolean visit(InstanceofExpression node){  return true;}  }
class C{  private boolean readEnd(ReadEndState state){  if (state == ReadEndState.ValidUrl && _buffer.length() > 0) {    int len=_buffer.length();    if (_quoteStart && _buffer.charAt(len - 1) == '\"') {      _buffer.delete(len - 1,len);    }    if (_buffer.length() > 0) {      _currentUrlMarker.setOriginalUrl(_buffer.toString());      _urlList.add(_currentUrlMarker.createUrl());    }  }  _buffer.delete(0,_buffer.length());  _quoteStart=false;  _hasScheme=false;  _dontMatchIpv6=false;  _currentUrlMarker=new UrlMarker();  return state == ReadEndState.ValidUrl;}  }
class C{  public boolean isIsScorable(){  if (isScorable == null) {    return true;  } else {    return isScorable;  }}  }
class C{  @Override public String stopwordsTipText(){  return "The file containing the stopwords.";}  }
class C{  @SuppressWarnings({"unchecked"}) public <T extends Enum<T>>T convert(Enum<?> value,Class<T> enum1){  if (value == null) {    return null;  }  T result;  try {    result=Enum.valueOf(enum1,value.name());  } catch (  IllegalArgumentException e) {    result=null;    if (MAPPING.containsKey(value)) {      result=(T)MAPPING.get(value);    }  }  return result;}  }
class C{  public static void skipToNextPage(ExtractorInput input) throws IOException, InterruptedException {  byte[] buffer=new byte[2048];  int peekLength=buffer.length;  while (true) {    if (input.getLength() != C.LENGTH_UNBOUNDED && input.getPosition() + peekLength > input.getLength()) {      peekLength=(int)(input.getLength() - input.getPosition());      if (peekLength < 4) {        throw new EOFException();      }    }    input.peekFully(buffer,0,peekLength,false);    for (int i=0; i < peekLength - 3; i++) {      if (buffer[i] == 'O' && buffer[i + 1] == 'g' && buffer[i + 2] == 'g' && buffer[i + 3] == 'S') {        input.skipFully(i);        return;      }    }    input.skipFully(peekLength - 3);  }}  }
class C{  private Set<String> parse(Reader stream) throws java.io.IOException {  Set<String> tokens=new HashSet<String>();  new TokenCollector(tokens).collect(stream);  return tokens;}  }
class C{  public IncompatibleVersionException(Object clientVersion,Object serverVersion){  this("Client version " + clientVersion + " is incompatible with server version "+ serverVersion);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start(ComputeFailoverNodeStartup.configuration())){    if (!ExamplesUtils.checkMinTopologySize(ignite.cluster(),2))     return;    System.out.println();    System.out.println("Compute failover example started.");    int charCnt=ignite.compute().apply(new CheckPointJob(),"Stage1 Stage2");    System.out.println();    System.out.println(">>> Finished executing fail-over example with checkpoints.");    System.out.println(">>> Total number of characters in the phrase is '" + charCnt + "'.");    System.out.println(">>> You should see exception stack trace from failed job on some node.");    System.out.println(">>> Failed job will be failed over to another node.");  } }  }
class C{  @SuppressWarnings("unchecked") public <U>QueryJoin innerJoin(U alias){  TableDefinition<T> def=(TableDefinition<T>)db.define(alias.getClass());  SelectTable<T> join=new SelectTable(db,this,alias,false);  def.initSelectObject(join,alias,aliasMap);  joins.add(join);  return new QueryJoin(this,join);}  }
class C{  protected boolean hasDividerBeforeChildAt(int childIndex){  if (childIndex == 0) {    return (mShowDividers & SHOW_DIVIDER_BEGINNING) != 0;  } else   if (childIndex == getChildCount()) {    return (mShowDividers & SHOW_DIVIDER_END) != 0;  } else   if ((mShowDividers & SHOW_DIVIDER_MIDDLE) != 0) {    boolean hasVisibleViewBefore=false;    for (int i=childIndex - 1; i >= 0; i--) {      if (getChildAt(i).getVisibility() != GONE) {        hasVisibleViewBefore=true;        break;      }    }    return hasVisibleViewBefore;  }  return false;}  }
class C{  public void addEntry(int severity,String msg,RefactoringStatusContext context,String pluginId,int code,Object data){  fEntries.add(new RefactoringStatusEntry(severity,msg,context,pluginId,code,data));  fSeverity=Math.max(fSeverity,severity);}  }
class C{  public static Host.AsyncClient.get_deleted_images_call buildGetDeletedImagesMethodCall(GetDeletedImagesResponse response){  Host.AsyncClient.get_deleted_images_call call=mock(Host.AsyncClient.get_deleted_images_call.class);  try {    when(call.getResult()).thenReturn(response);  } catch (  Exception e) {    throw new RuntimeException("Failed to mock call.getResult");  }  return call;}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  @Override public boolean isReadOnly(){  return (mSetter == null && mField == null);}  }
class C{  private BinaryReaderExImpl reader(@Nullable BinaryReaderHandles rCtx,boolean forUnmarshal){  return reader(rCtx,null,forUnmarshal);}  }
class C{  @Override protected SpatialSparseVertex addVertex(Attributes attrs){  return builder.addVertex(getGraph(),SpatialGraphML.newPoint(attrs));}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  @Override protected boolean checkEntryNotValid(RegionEntry mapEntry){  return (super.checkEntryNotValid(mapEntry) || mapEntry.getKey() instanceof ThreadIdentifier);}  }
class C{  @Override protected void tearDown() throws Exception {  setFixture(null);}  }
class C{  private static void checkArguments(final SQLProvider provider,final INaviModule module){  Preconditions.checkNotNull(provider,"IE00466: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE00467: Module can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00468: Module is not part of this database");}  }
class C{  public AnimatedDrawableOptions build(){  return new AnimatedDrawableOptions(this);}  }
class C{  public String addImport(String type){  if (isReadOnly())   return type;  CompilationUnit cu=getCompilationUnit();  if (cu == null)   return type;  boolean qualified=type.indexOf('.') != -1;  if (!qualified) {  }  if (fImportRewrite == null) {    fImportRewrite=StubUtility.createImportRewrite(fDocument,cu,true);  }  ImportRewriteContext context;  context=new ContextSensitiveImportRewriteContext(cu,getCompletionOffset(),fImportRewrite);  return fImportRewrite.addImport(type,context);}  }
class C{  public boolean hasMediator(String mediatorName){  return mediatorMap.containsKey(mediatorName);}  }
class C{  private int inferCaller(LogRecord record){  StackTraceElement stack[]=(new Throwable()).getStackTrace();  int lineNumber=-1;  int ix=0;  while (ix < stack.length) {    StackTraceElement frame=stack[ix];    String cname=frame.getClassName();    if (cname.equals("net.java.sip.communicator.util.Logger")) {      break;    }    ix++;  }  while (ix < stack.length) {    StackTraceElement frame=stack[ix];    lineNumber=stack[ix].getLineNumber();    String cname=frame.getClassName();    if (!cname.equals("net.java.sip.communicator.util.Logger")) {      record.setSourceClassName(cname);      record.setSourceMethodName(frame.getMethodName());      break;    }    ix++;  }  return lineNumber;}  }
class C{  public SSLHandshakeException(Throwable cause){  super(cause);}  }
class C{  public static BufferedReader newReader(File file,String charset) throws FileNotFoundException, UnsupportedEncodingException {  return new BufferedReader(new InputStreamReader(new FileInputStream(file),charset));}  }
class C{  private static String sniffCharacterEncoding(byte[] content){  int length=content.length < CHUNK_SIZE ? content.length : CHUNK_SIZE;  String str="";  try {    str=new String(content,0,length,Charset.forName("ASCII").toString());  } catch (  UnsupportedEncodingException e) {    return null;  }  Matcher metaMatcher=metaPattern.matcher(str);  String encoding=null;  if (metaMatcher.find()) {    Matcher charsetMatcher=charsetPattern.matcher(metaMatcher.group(1));    if (charsetMatcher.find())     encoding=new String(charsetMatcher.group(1));  }  return encoding;}  }
class C{  private void convertTo7Bit(MimePart part) throws MessagingException, IOException {  if (part.isMimeType("multipart/*")) {    MimeMultipart parts=(MimeMultipart)part.getContent();    int count=parts.getCount();    for (int i=0; i < count; i++) {      convertTo7Bit((MimePart)parts.getBodyPart(i));    }  } else   if ("8bit".equals(part.getEncoding())) {    String contentTransferEncoding=part.isMimeType("text/*") ? "quoted-printable" : "base64";    part.setContent(part.getContent(),part.getContentType());    part.setHeader("Content-Transfer-Encoding",contentTransferEncoding);    part.addHeader("X-MIME-Autoconverted","from 8bit to " + contentTransferEncoding + " by "+ getMailetContext().getServerInfo());  }}  }
class C{  private void validateMarketplaceID(String marketplaceId) throws ObjectNotFoundException {  Marketplace marketplace=new Marketplace();  marketplace.setMarketplaceId(marketplaceId);  try {    marketplace=(Marketplace)dm.getReferenceByBusinessKey(marketplace);  } catch (  ObjectNotFoundException e) {    logger.logDebug("Marketplace not found: " + e.getMessage());    throw e;  }}  }
class C{  public static void main(String[] args){  runFileLoader(new XRFFLoader(),args);}  }
class C{  @Override void initAnimation(){  if (!mInitialized) {    if ((mProperty == null) && AnimatorProxy.NEEDS_PROXY && (mTarget instanceof View)&& PROXY_PROPERTIES.containsKey(mPropertyName)) {      setProperty(PROXY_PROPERTIES.get(mPropertyName));    }    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  public void testMaxGreater(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.max(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 1);}  }
class C{  public RatingSorter(boolean ascending){  super(ascending);}  }
class C{  public static int handleTestsThatAreUnstable(List<TestCase> tests){  int numUnstable=0;  logger.info("Going to execute: handleTestsThatAreUnstable");  if (tests == null || tests.isEmpty()) {    return numUnstable;  }  File dir=createNewTmpDir();  if (dir == null) {    logger.error("Failed to create tmp dir");    return numUnstable;  }  logger.debug("Created tmp folder: " + dir.getAbsolutePath());  try {    List<File> generated=compileTests(tests,dir);    if (generated == null) {      logger.warn("Failed to compile the test cases ");      return numUnstable;    }    if (!TimeController.getInstance().hasTimeToExecuteATestCase()) {      logger.error("Ran out of time while checking tests");      return numUnstable;    }    Class<?>[] testClasses=loadTests(generated);    if (testClasses == null) {      logger.error("Found no classes for compiled tests");      return numUnstable;    }    JUnitResult result=runTests(testClasses,dir);    if (result.wasSuccessful()) {      return numUnstable;    }    logger.error("" + result.getFailureCount() + " test cases failed");    failure_loop:     for (    JUnitFailure failure : result.getFailures()) {      String testName=failure.getDescriptionMethodName();      for (int i=0; i < tests.size(); i++) {        if (TestSuiteWriterUtils.getNameOfTest(tests,i).equals(testName)) {          if (tests.get(i).isFailing()) {            logger.info("Failure is expected, continuing...");            continue failure_loop;          }        }      }      if (testName == null) {        StringBuilder sb=new StringBuilder();        sb.append("Issue in scaffolding of the test suite: " + failure.getMessage() + "\n");        sb.append("Stack trace:\n");        for (        String elem : failure.getExceptionStackTrace()) {          sb.append(elem + "\n");        }        logger.error(sb.toString());        numUnstable=tests.size();        tests.clear();        return numUnstable;      }      logger.warn("Found unstable test named " + testName + " -> "+ failure.getExceptionClassName()+ ": "+ failure.getMessage());      for (      String elem : failure.getExceptionStackTrace()) {        logger.info(elem);      }      boolean toRemove=!(failure.isAssertionError());      for (int i=0; i < tests.size(); i++) {        if (TestSuiteWriterUtils.getNameOfTest(tests,i).equals(testName)) {          logger.warn("Failing test:\n " + tests.get(i).toCode());          numUnstable++;          if (!toRemove) {            logger.debug("Going to mark test as unstable: " + testName);            tests.get(i).setUnstable(true);          } else {            logger.debug("Going to remove unstable test: " + testName);            tests.remove(i);          }          break;        }      }    }  } catch (  Exception e) {    logger.error("" + e,e);    return numUnstable;  } finally {    if (dir != null) {      try {        FileUtils.deleteDirectory(dir);      } catch (      Exception e) {        logger.warn("Cannot delete tmp dir: " + dir.getName(),e);      }    }  }  return numUnstable;}  }
class C{  boolean markPrepared(){  return PREPARED_UPD.compareAndSet(this,0,1);}  }
class C{  private void create(String portNetworkId,String transportType){  logger.info("Start create storage port for portNetworkId={}" + " and transportType={}",portNetworkId,transportType);  StorageHADomain adapter=CinderUtils.getStorageAdapter(storageSystem,dbClient);  StoragePort port=new StoragePort();  port.setId(URIUtil.createId(StoragePort.class));  port.setStorageDevice(storageSystem.getId());  String portName=generatePortName();  logger.debug("New storage port name is = {}",portName);  String nativeGuid=NativeGUIDGenerator.generateNativeGuid(storageSystem,portName,NativeGUIDGenerator.PORT);  port.setNativeGuid(nativeGuid);  port.setPortNetworkId(portNetworkId);  port.setStorageHADomain(adapter.getId());  port.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.toString());  port.setPortType(PortType.frontend.name());  port.setOperationalStatus(OperationalStatus.OK.toString());  port.setTransportType(transportType);  port.setLabel(portName);  port.setPortName(portName);  port.setPortGroup("Cinder-PortGroup");  port.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.name());  port.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());  dbClient.createObject(port);  newStoragePortsList.add(port);  allStoragePortsList.add(port);  logger.info("End create storage port for portNetworkId={}" + " and transportType={}",portNetworkId,transportType);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public static String ascii2String(String ASCII){  return Character.toString(__ascii2Char(Integer.parseInt(ASCII)));}  }
class C{  private OnDemandPriceEntity createOnDemandPriceEntity(String region,String instanceType){  OnDemandPriceEntity onDemandPriceEntity=new OnDemandPriceEntity();  onDemandPriceEntity.setOnDemandPriceId(LONG_VALUE);  onDemandPriceEntity.setRegion(region);  onDemandPriceEntity.setInstanceType(instanceType);  onDemandPriceEntity.setValue(new BigDecimal(INTEGER_VALUE));  return herdDao.saveAndRefresh(onDemandPriceEntity);}  }
class C{  protected static void indexExistingRows(Connection conn,String schema,String table) throws SQLException {  FullTextLucene.FullTextTrigger existing=new FullTextLucene.FullTextTrigger();  existing.init(conn,schema,null,table,false,Trigger.INSERT);  String sql="SELECT * FROM " + StringUtils.quoteIdentifier(schema) + "."+ StringUtils.quoteIdentifier(table);  ResultSet rs=conn.createStatement().executeQuery(sql);  int columnCount=rs.getMetaData().getColumnCount();  while (rs.next()) {    Object[] row=new Object[columnCount];    for (int i=0; i < columnCount; i++) {      row[i]=rs.getObject(i + 1);    }    existing.insert(row,false);  }  existing.commitIndex();}  }
class C{  public boolean isDuplicateFileNo(long templateFileId,long groupId,String fileNo){  boolean isExistTemplate=false;  try {    TemplateFile templateFile=templateFilePersistence.fetchByG_F_NO(groupId,fileNo);    if (Validator.isNotNull(templateFile) && templateFileId <= 0) {      isExistTemplate=true;    } else     if (Validator.isNotNull(templateFile) && templateFileId > 0 && templateFile.getTemplatefileId() != templateFileId) {      isExistTemplate=true;    }  } catch (  Exception e) {    isExistTemplate=false;  }  return isExistTemplate;}  }
class C{  private JMenuBar menuBar(){  JMenu edit=new JMenu("Edit");  JMenuItem copy=new JMenuItem(new CopySubgraphAction(this));  copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK));  edit.add(copy);  JMenuBar menuBar=new JMenuBar();  menuBar.add(edit);  return menuBar;}  }
class C{  public int postprocessing(final Segment segment,final ReferenceReportCache rrCache,final String harvestkey,final boolean byPartialUpdate){  if (!this.contains(CollectionSchema.process_sxt))   return 0;  if (!segment.connectedCitation() && !segment.fulltext().useWebgraph())   return 0;  final SolrConnector collectionConnector=segment.fulltext().getDefaultConnector();  collectionConnector.commit(false);  if (segment.fulltext().useWebgraph())   segment.fulltext().getWebgraphConnector().commit(false);  final CollectionConfiguration collection=segment.fulltext().getDefaultConfiguration();  final WebgraphConfiguration webgraph=segment.fulltext().getWebgraphConfiguration();  String collection1query=collection1query(segment,harvestkey);  String webgraphquery=webgraphquery(segment,harvestkey);  postprocessingRunning=true;  postprocessingStartTime=System.currentTimeMillis();  postprocessingActivity="collecting counts";  ConcurrentLog.info("CollectionConfiguration",postprocessingActivity);  try {    postprocessingCollection1Count=(int)collectionConnector.getCountByQuery("{!cache=false}" + collection1query);    postprocessingWebgraphCount=segment.fulltext().useWebgraph() ? (int)segment.fulltext().getWebgraphConnector().getCountByQuery("{!cache=false}" + webgraphquery) : 0;  } catch (  IOException e) {    postprocessingCollection1Count=-1;    postprocessingWebgraphCount=-1;  }  postprocessingActivity="create ranking map";  ConcurrentLog.info("CollectionConfiguration",postprocessingActivity);  boolean shallComputeCR=(segment.fulltext().useWebgraph() && ((webgraph.contains(WebgraphSchema.source_id_s) && webgraph.contains(WebgraphSchema.source_cr_host_norm_i)) || (webgraph.contains(WebgraphSchema.target_id_s) && webgraph.contains(WebgraphSchema.target_cr_host_norm_i))) || (collection.contains(CollectionSchema.cr_host_count_i) && collection.contains(CollectionSchema.cr_host_chance_d) && collection.contains(CollectionSchema.cr_host_norm_i)));  final Map<String,CRV> rankings;  if (shallComputeCR) {    postprocessingActivity="collecting host facets for collection";    ConcurrentLog.info("CollectionConfiguration",postprocessingActivity);    ReversibleScoreMap<String> collection1hosts;    try {      Map<String,ReversibleScoreMap<String>> hostfacet=collectionConnector.getFacets("{!cache=false}" + collection1query,10000000,CollectionSchema.host_s.getSolrFieldName());      collection1hosts=hostfacet.get(CollectionSchema.host_s.getSolrFieldName());    } catch (    final IOException e2) {      ConcurrentLog.logException(e2);      collection1hosts=new ClusteredScoreMap<String>(true);    }    rankings=createRankingMap(segment,rrCache,collectionConnector,collection1hosts);  } else {    rankings=new ConcurrentHashMap<String,CRV>();  }  final AtomicInteger allcount=new AtomicInteger(0);  if (segment.fulltext().useWebgraph() && shallComputeCR) {    postprocessWebgraph(segment,webgraph,webgraphquery,rankings,allcount);  }  postprocessDocuments(segment,rrCache,harvestkey,byPartialUpdate,collectionConnector,collection,collection1query,rankings,allcount);  postprocessingCollection1Count=0;  postprocessingWebgraphCount=0;  postprocessingActivity="postprocessing terminated";  ConcurrentLog.info("CollectionConfiguration",postprocessingActivity);  postprocessingRunning=false;  return allcount.get();}  }
class C{  @Override public ObjInfo objInfo(String obj) throws UiObjectNotFoundException {  return ObjInfo.getObjInfo(getUiObject(obj));}  }
class C{  public OperationNotPermittedException(){  super();}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public boolean shouldUpdateStyleOnAncestorChanged(){  return true;}  }
class C{  public PointerTypePanel(final Component parent,final TypeManager typeManager,final BaseType existingType){  super(parent,typeManager,existingType);  createControls();  populateControls();}  }
class C{  public static <T>LazySetX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  public boolean hasBatchStatus(){  return hasExtension(BatchStatus.class);}  }
class C{  public void queueEvent(Runnable r){synchronized (this) {    mEventQueue.add(r);synchronized (sGLThreadManager) {      mEventsWaiting=true;      sGLThreadManager.notifyAll();    }  }}  }
class C{  public void testModeSecondaryNoUri() throws Exception {  mode=PROXY;  String errMsg=null;  try {    startUp();  } catch (  IgniteException e) {    errMsg=e.getCause().getCause().getMessage();  }  assertTrue(errMsg.startsWith("Grid configuration parameter invalid: secondaryFileSystem cannot be null when mode is not PRIMARY"));}  }
class C{  public CachingTemplateResolver(final Map<String,URL> cache){  this.cache=cache;}  }
class C{  @Override public void resultChanged(ResultChangedEvent evt){  m_URL=evt.getURL();  m_User=evt.getUser();  m_Password=evt.getPassword();  m_Query=evt.getQuery();}  }
class C{  public static Element findElement(Element parent,String name,String namespace) throws IllegalArgumentException {  Element result=null;  NodeList l=parent.getChildNodes();  int nodeCount=l.getLength();  for (int i=0; i < nodeCount; i++) {    if (l.item(i).getNodeType() == Node.ELEMENT_NODE) {      Node node=l.item(i);      String localName=node.getLocalName();      localName=localName == null ? node.getNodeName() : localName;      if (name.equals(localName) && (namespace == null || namespace.equals(node.getNamespaceURI()))) {        if (result == null) {          result=(Element)node;        } else {          throw new IllegalArgumentException("more than one element with same name found");        }      }    }  }  return result;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_domimplementationfeaturenull.class,args);}  }
class C{  public boolean increment(float key){  return adjustValue(key,1);}  }
class C{  public static void main(String[] args){  CheckOptionHandler check=new CheckOptionHandler();  runCheck(check,args);  if (check.getSuccess()) {    System.exit(0);  } else {    System.exit(1);  }}  }
class C{  private static int checkTypeVariableSignature(final String signature,int pos){  pos=checkChar('T',signature,pos);  pos=checkIdentifier(signature,pos);  return checkChar(';',signature,pos);}  }
class C{  @Override public void clear(){  super.clear();  Object[] set=_set;  for (int i=set.length; i-- > 0; ) {    set[i]=null;  }}  }
class C{  public static void createF2L(Scenario scenario,String path2File){  createF2L(scenario.getActivityFacilities(),scenario.getNetwork(),path2File);}  }
class C{  public boolean isOptionSelected(int index){  if (index >= selectionPanel.getComponents().length) {    return false;  }  JRadioButton radioButton=(JRadioButton)selectionPanel.getComponent(index);  if (radioButton.isSelected()) {    return true;  } else {    return false;  }}  }
class C{  public boolean isEmpty(){  if (size() == 0)   return true;  return false;}  }
class C{  public synchronized boolean feed(short[] samples,int n){  while (this.samples != null && !stopped) {    try {      wait();    } catch (    InterruptedException e) {    }  }  this.samples=samples;  this.samplesCount=n;  notify();  return !stopped;}  }
class C{  public boolean isSubcontracting(){  Object oo=get_Value(COLUMNNAME_IsSubcontracting);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @NonNull public Builder fromResponseJsonString(@NonNull String jsonStr) throws JSONException, MissingArgumentException {  checkNotEmpty(jsonStr,"json cannot be null or empty");  return fromResponseJson(new JSONObject(jsonStr));}  }
class C{  public Tokenizer(Reader reader,int cacheBufferSize){  symbols=new UniqueList<>();  token=new TokenizerToken();  upcomingToken=new TokenizerToken();  cacheBuffer=new char[cacheBufferSize];  setReader(reader);}  }
class C{  private boolean updateVector(int[] vector,int position){  if (position == 0) {    int val=vector[0];    if (val + 1 < params[0].length) {      vector[0]=val + 1;      return true;    } else {      vector[0]=0;      return false;    }  }  if (updateVector(vector,position - 1))   return true;  int val=vector[position];  if (val + 1 < params[position].length) {    vector[position]=val + 1;    return true;  } else {    vector[position]=0;    return false;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void emitTuple(HashMap<K,HashMap<V,Integer>> tuple){  least.emit(tuple);}  }
class C{  private void initialize() throws IOException {  if (_secondaryJoiners != null) {    return;  }  _primaryJoinersChkUp=new ArrayList<Joiner>(1);  _primaryJoinersChkDel=new ArrayList<Joiner>(1);  _primaryJoinersDoUp=new ArrayList<Joiner>(1);  _primaryJoinersDoDel=new ArrayList<Joiner>(1);  _primaryJoinersDoNull=new ArrayList<Joiner>(1);  _secondaryJoiners=new ArrayList<Joiner>(1);  for (  IndexImpl idx : _table.getIndexes()) {    IndexImpl.ForeignKeyReference ref=idx.getReference();    if (ref != null) {      Joiner joiner=Joiner.create(idx);      if (ref.isPrimaryTable()) {        if (ref.isCascadeUpdates()) {          _primaryJoinersDoUp.add(joiner);        } else {          _primaryJoinersChkUp.add(joiner);        }        if (ref.isCascadeDeletes()) {          _primaryJoinersDoDel.add(joiner);        } else         if (ref.isCascadeNullOnDelete()) {          _primaryJoinersDoNull.add(joiner);        } else {          _primaryJoinersChkDel.add(joiner);        }      } else {        _secondaryJoiners.add(joiner);      }    }  }}  }
class C{  public static FetchHostRequest create(){  FetchHostRequest m=new FetchHostRequest();  return m;}  }
class C{  public void testDeleteParentRootPathMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR),paths(FILE));  create(igfs,null,null);  igfs.delete(DIR,true);  checkNotExist(igfs,igfsSecondary,DIR,SUBDIR,SUBSUBDIR,FILE);}  }
class C{  public boolean hasDeleted(){  return hasExtension(Deleted.class);}  }
class C{  public TransitionReaction createTransitionReaction(){  TransitionReactionImpl transitionReaction=new TransitionReactionImpl();  return transitionReaction;}  }
class C{  private Map<Node,InitialNode> locateWrappedNearestTransitNode(Person person,Coord coord,double departureTime){  TransitRouterNetwork.TransitRouterNetworkNode nearestNode=network.getNearestNode(coord);  Map<Node,InitialNode> wrappedNearestNodes=new LinkedHashMap<>();  Coord toCoord=nearestNode.stop.getStopFacility().getCoord();  double initialTime=travelDisutility.getTravelTime(person,coord,toCoord);  double initialCost=travelDisutility.getTravelDisutility(person,coord,toCoord);  wrappedNearestNodes.put(nearestNode,new InitialNode(initialCost,initialTime + departureTime));  return wrappedNearestNodes;}  }
class C{  public ConnectionRunnable(Peer peer,PeerConnectionCallback callback){  this.mPeer=peer;  this.mCallback=callback;}  }
class C{  public Boolean isZoomPositionSupported(){  return zoomPositionSupported;}  }
class C{  public Atanh(){  super(Number.class,Number.class);}  }
class C{  private double calculateEntropy(double... masses){  double res=0;  for (  double d : masses) {    res-=(d == 0) ? 0 : d * Math.log(d);  }  return res / LOG2;}  }
class C{  public List findUserByName(String username){  List users=new ArrayList();  UasDaoUserRecO idocUser=null;  try {    List idocUsers=UasBnoUser.findUsersByName(dbConnectionConfig,username);    for (int i=0; i < idocUsers.size(); i++) {      idocUser=(UasDaoUserRecO)idocUsers.get(i);      if (logger.isDebugEnabled())       logger.debug("Usuario encontrado en Invesdoc: " + idocUser);      users.add(new UserInfoImpl(new Integer(idocUser.getId()).toString(),new Integer(idocUser.getId()).toString(),null,null,idocUser.getName(),null,idocUser.getRemarks()));    }  } catch (  Exception e) {    logger.error("Error al buscar el usuario: " + username,e);    throw new AuthenticationConnectorException(e,this.getClass().getName(),"Error al buscar el usuario: " + username);  }  return users;}  }
class C{  public String stemmerTipText(){  return "The stemming algorithm to use on the words.";}  }
class C{  @Override public String resolveURI(String baseUri,String uri){  if (uri == null || uri.isEmpty())   return null;  try {    URI possiblyRelative=new URI(uri);    if (possiblyRelative.isAbsolute()) {      return possiblyRelative.toString();    }    URI base=new URI(baseUri);    URI absolute=base.resolve(uri);    return absolute.toString();  } catch (  URISyntaxException e) {    XRLog.exception("When trying to load uri(" + uri + ") with base URI("+ baseUri+ "), one or both were invalid URIs.",e);    return null;  }}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  public static Resource toResourceExisting(PageContext pc,String path) throws ExpressionException {  return toResourceExisting(pc,path,pc.getConfig().allowRealPath());}  }
class C{  public static BucketProcess parseGetBucketImageProcessConf(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    String compliedHost=root.getChildText("CompliedHost");    boolean sourceFileProtect=false;    if (root.getChildText("SourceFileProtect").equals("Enabled")) {      sourceFileProtect=true;    }    String sourceFileProtectSuffix=root.getChildText("SourceFileProtectSuffix");    String styleDelimiters=root.getChildText("StyleDelimiters");    ImageProcess imageProcess=new ImageProcess(compliedHost,sourceFileProtect,sourceFileProtectSuffix,styleDelimiters);    if (root.getChildText("Version") != null) {      imageProcess.setVersion(Integer.parseInt(root.getChildText("Version")));    }    return new BucketProcess(imageProcess);  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public boolean isLoaded(){  return m_database.isLoaded();}  }
class C{  private void checkForVersionChange(){  String currentVersion=settings.getString("currentVersion");  if (!currentVersion.equals(Chatty.VERSION)) {    settings.setString("currentVersion",Chatty.VERSION);    settings.setString("updateAvailable","");    g.openReleaseInfo();  }}  }
class C{  public BusinessObjectData createBusinessObjectData(BusinessObjectDataCreateRequest request){  return createBusinessObjectData(request,true);}  }
class C{  public KeyManagementException(String msg){  super(msg);}  }
class C{  private boolean isSelectedComponent(final WorkspaceComponent component){  if (component == componentList.getSelectedItem()) {    return true;  } else {    return false;  }}  }
class C{  protected JMenuBar createMenubar(){  JMenuBar mb=new JMenuBar();  for (  String menuKey : getMenuBarKeys()) {    JMenu m=createMenu(menuKey);    if (m != null) {      mb.add(m);    }  }  return mb;}  }
class C{  @Override public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  super.initialize(subject,callbackHandler,sharedState,options);  usersByDn=load(USER_FILE_PROP_NAME,"",options).invertedPropertiesMap();  rolesByUser=load(ROLE_FILE_PROP_NAME,"",options).invertedPropertiesValuesMap();}  }
class C{  public static double cdf(double x,double location,double shape){  return Math.atan2(x - location,shape) / Math.PI + .5;}  }
class C{  public static boolean equal(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public Vector divide(float n){  return new Vector(x / n,y / n,z / n);}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSortedMap<K,V> of(){  return (ImmutableSortedMap<K,V>)NATURAL_EMPTY_MAP;}  }
class C{  public static <E>Set<E> singleton(E object){  return new SingletonSet<E>(object);}  }
class C{  public void resetToDefaultPose(){  this.boxList.stream().filter(null).forEach(null);}  }
class C{  private Paint createCheckMarkGradient(Shape s,TwoColors colors){  Rectangle2D bounds=s.getBounds2D();  float x=(float)bounds.getX();  float y=(float)bounds.getY();  float w=(float)bounds.getWidth();  float h=(float)bounds.getHeight();  return createGradient(x + w,y,(0.3f * w) + x,h + y,new float[]{0f,1f},new Color[]{colors.top,colors.bottom});}  }
class C{  public GenericProxyFactory connector(JClient client){  this.client=client;  return this;}  }
class C{  private static boolean relates(PsiType sType,PsiType tType){  final PsiType erasedType=TypeConversionUtil.erasure(tType);  LOG.assertTrue(erasedType != null);  if (sType instanceof PsiIntersectionType) {    boolean superRelation=true;    boolean subRelation=false;    for (    PsiType sConjunct : ((PsiIntersectionType)sType).getConjuncts()) {      final PsiType sConjunctErasure=TypeConversionUtil.erasure(sConjunct);      if (sConjunctErasure != null) {        superRelation&=TypeConversionUtil.isAssignable(sConjunctErasure,erasedType);        subRelation|=TypeConversionUtil.isAssignable(erasedType,sConjunctErasure);      }    }    return superRelation || subRelation;  }  if (sType instanceof PsiClassType) {    final PsiType sTypeErasure=TypeConversionUtil.erasure(sType);    if (sTypeErasure != null) {      return TypeConversionUtil.isAssignable(sTypeErasure,erasedType) || TypeConversionUtil.isAssignable(erasedType,sTypeErasure);    }  }  return false;}  }
class C{  @Override public boolean isAfterLast() throws SQLException {  try {    debugCodeCall("isAfterLast");    checkClosed();    int row=result.getRowId();    int count=result.getRowCount();    return count > 0 && row >= count;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public List<Metric> transform(List<Metric> metrics,List<String> constants){  SystemAssert.requireArgument(metrics != null,"Metric List cannot be null");  SystemAssert.requireArgument(constants != null && !constants.isEmpty(),"This Transform cannot be used without a constant");  if (metrics.isEmpty()) {    return metrics;  }  List<Metric> result=new ArrayList<Metric>();  if (constants.size() == 1) {    result=Arrays.asList(reduce(metrics,constants));  } else   if (constants.size() > 1) {    result=mapping(metrics,constants);  }  return result;}  }
class C{  public static void disposeOf(final ObjectMap<?,? extends Disposable> disposables){  if (disposables != null) {    for (    final Disposable disposable : disposables.values()) {      disposeOf(disposable);    }  }}  }
class C{  @Override public void acceptClusterer(BatchClustererEvent e){  if (m_dataSourceListeners.size() > 0 || m_trainingSetListeners.size() > 0 || m_testSetListeners.size() > 0) {    if (e.getTestSet().isStructureOnly()) {      return;    }    Instances testSet=e.getTestSet().getDataSet();    weka.clusterers.Clusterer clusterer=e.getClusterer();    String test;    if (e.getTestOrTrain() == 0) {      test="test";    } else {      test="training";    }    String relationNameModifier="_" + test + "_"+ e.getSetNumber()+ "_of_"+ e.getMaxSetNumber();    if (!m_appendProbabilities || !(clusterer instanceof DensityBasedClusterer)) {      if (m_appendProbabilities && !(clusterer instanceof DensityBasedClusterer)) {        System.err.println("Only density based clusterers can append probabilities. Instead cluster will be assigned for each instance.");        if (m_logger != null) {          m_logger.logMessage("[PredictionAppender] " + statusMessagePrefix() + " Only density based clusterers can "+ "append probabilities. Instead cluster will be assigned for each "+ "instance.");          m_logger.statusMessage(statusMessagePrefix() + "WARNING: Only density based clusterers can append probabilities. " + "Instead cluster will be assigned for each instance.");        }      }      try {        Instances newInstances=makeClusterDataSetClass(testSet,clusterer,relationNameModifier);        if (m_dataSourceListeners.size() > 0) {          notifyDataSetAvailable(new DataSetEvent(this,new Instances(newInstances,0)));        }        if (m_trainingSetListeners.size() > 0 && e.getTestOrTrain() > 0) {          TrainingSetEvent tse=new TrainingSetEvent(this,new Instances(newInstances,0));          tse.m_setNumber=e.getSetNumber();          tse.m_maxSetNumber=e.getMaxSetNumber();          notifyTrainingSetAvailable(tse);        }        if (m_testSetListeners.size() > 0 && e.getTestOrTrain() == 0) {          TestSetEvent tse=new TestSetEvent(this,new Instances(newInstances,0));          tse.m_setNumber=e.getSetNumber();          tse.m_maxSetNumber=e.getMaxSetNumber();          notifyTestSetAvailable(tse);        }        for (int i=0; i < testSet.numInstances(); i++) {          double predCluster=clusterer.clusterInstance(testSet.instance(i));          newInstances.instance(i).setValue(newInstances.numAttributes() - 1,predCluster);        }        if (m_dataSourceListeners.size() > 0) {          notifyDataSetAvailable(new DataSetEvent(this,newInstances));        }        if (m_trainingSetListeners.size() > 0 && e.getTestOrTrain() > 0) {          TrainingSetEvent tse=new TrainingSetEvent(this,newInstances);          tse.m_setNumber=e.getSetNumber();          tse.m_maxSetNumber=e.getMaxSetNumber();          notifyTrainingSetAvailable(tse);        }        if (m_testSetListeners.size() > 0 && e.getTestOrTrain() == 0) {          TestSetEvent tse=new TestSetEvent(this,newInstances);          tse.m_setNumber=e.getSetNumber();          tse.m_maxSetNumber=e.getMaxSetNumber();          notifyTestSetAvailable(tse);        }        return;      } catch (      Exception ex) {        ex.printStackTrace();      }    } else {      try {        Instances newInstances=makeClusterDataSetProbabilities(testSet,clusterer,relationNameModifier);        notifyDataSetAvailable(new DataSetEvent(this,new Instances(newInstances,0)));        for (int i=0; i < testSet.numInstances(); i++) {          double[] probs=clusterer.distributionForInstance(testSet.instance(i));          for (int j=0; j < clusterer.numberOfClusters(); j++) {            newInstances.instance(i).setValue(testSet.numAttributes() + j,probs[j]);          }        }        notifyDataSetAvailable(new DataSetEvent(this,newInstances));      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }}  }
class C{  public static Sextad serializableInstance(){  Node i=new GraphNode("i");  Node j=new GraphNode("j");  Node k=new GraphNode("k");  Node l=new GraphNode("l");  Node m=new GraphNode("m");  Node n=new GraphNode("n");  return new Sextad(i,j,k,l,m,n);}  }
class C{  public HelloMessage(HelloMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.nodeId=other.nodeId;  if (other.isSetAuthScheme()) {    this.authScheme=other.authScheme;  }  if (other.isSetAuthChallengeResponse()) {    this.authChallengeResponse=new AuthChallengeResponse(other.authChallengeResponse);  }}  }
class C{  public DensityPanel(final JFrame frame){  this.frame=frame;  setOpaque(false);  setMinimumSize(new Dimension(300,150));  setLayout(new BorderLayout());  JToolBar toolBar=setupToolBar(frame);  add(messageLabel,BorderLayout.NORTH);  add(toolBar,BorderLayout.SOUTH);  add(chartPanel,BorderLayout.CENTER);}  }
class C{  public BillingAdapterConnectionException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public double cdf(double x){  return Probability.studentT(freedom,x);}  }
class C{  private static int precisionConsistencyTest(){  int failures=0;  MathContext mc=new MathContext(1,RoundingMode.DOWN);  BigDecimal a=BigDecimal.valueOf(1999,-1);  BigDecimal sum1=a.add(BigDecimal.ONE,mc);  a.precision();  BigDecimal sum2=a.add(BigDecimal.ONE,mc);  if (!sum1.equals(sum2)) {    failures++;    System.out.println("Unequal sums after calling precision!");    System.out.print("Before:\t");    printAddition(a,BigDecimal.ONE,sum1.toString());    System.out.print("After:\t");    printAddition(a,BigDecimal.ONE,sum2.toString());  }  return failures;}  }
class C{  public JSONSerialiser(final JsonSerializer... customTypeSerialisers){  this();  final SimpleModule module=new SimpleModule("custom",new Version(1,0,0,null,null,null));  for (  JsonSerializer customTypeSerialiser : customTypeSerialisers) {    module.addSerializer(customTypeSerialiser);  }  mapper.registerModule(module);}  }
class C{  public boolean isRegularExpression(){  return (m_RegExpEnabled && m_CheckboxRegExp.isSelected());}  }
class C{  public static String quote(String s){  if (s == null)   return null;  if (s.length() == 0)   return "\"\"";  StringBuffer b=new StringBuffer(s.length() + 8);  quote(b,s);  return b.toString();}  }
class C{  private static long mix64(long z){  z=(z ^ (z >>> 30)) * 0xbf58476d1ce4e5b9L;  z=(z ^ (z >>> 27)) * 0x94d049bb133111ebL;  return z ^ (z >>> 31);}  }
class C{  public static byte convertUint8toByte(char uint8){  if (uint8 > Byte.MAX_VALUE - Byte.MIN_VALUE) {    throw new RuntimeException("Out of Boundary");  }  return (byte)uint8;}  }
class C{  public void validateExpression(DMLProgram dmlp,HashMap<String,DataIdentifier> ids,HashMap<String,ConstIdentifier> constVars,boolean conditional) throws LanguageException, IOException {  if (dmlp.getNamespaces().get(_namespace) == null) {    raiseValidateError("namespace " + _namespace + " is not defined ",conditional);  }  FunctionStatementBlock fblock=dmlp.getFunctionStatementBlock(_namespace,_name);  if (fblock == null) {    raiseValidateError("function " + _name + " is undefined in namespace "+ _namespace,conditional);  }  if (fblock.getStatement(0) instanceof ExternalFunctionStatement)   _opcode=Expression.FunctCallOp.EXTERNAL; else   _opcode=Expression.FunctCallOp.INTERNAL;  boolean hasNamed=false, hasUnnamed=false;  for (  ParameterExpression paramExpr : _paramExprs) {    if (paramExpr.getName() == null)     hasUnnamed=true; else     hasNamed=true;  }  if (hasNamed && hasUnnamed) {    raiseValidateError(" In DML, functions can only have named parameters " + "(e.g., name1=value1, name2=value2) or unnamed parameters (e.g, value1, value2). " + _name + " has both parameter types.",conditional);  }  for (  ParameterExpression paramExpr : _paramExprs) {    if (paramExpr.getExpr() instanceof FunctionCallIdentifier) {      raiseValidateError("UDF function call not supported as parameter to function call",false);    }    paramExpr.getExpr().validateExpression(ids,constVars,conditional);  }  for (  ParameterExpression paramExpr : _paramExprs) {    Expression expri=paramExpr.getExpr();    if (expri instanceof DataIdentifier && !(expri instanceof IndexedIdentifier) && constVars.containsKey(((DataIdentifier)expri).getName())) {      paramExpr.setExpr(constVars.get(((DataIdentifier)expri).getName()));    }  }  FunctionStatement fstmt=(FunctionStatement)fblock.getStatement(0);  if (fstmt.getInputParams().size() < _paramExprs.size()) {    raiseValidateError("function " + _name + " has incorrect number of parameters. Function requires "+ fstmt.getInputParams().size()+ " but was called with "+ _paramExprs.size(),conditional);  }  _outputs=new Identifier[fstmt.getOutputParams().size()];  for (int i=0; i < fstmt.getOutputParams().size(); i++) {    _outputs[i]=new DataIdentifier(fstmt.getOutputParams().get(i));  }  return;}  }
class C{  public void startTicker(long delay,boolean rightToLeft){  if (!tickerEnabled) {    return;  }  if (!isCellRenderer()) {    Form parent=getComponentForm();    if (parent != null) {      parent.registerAnimatedInternal(this);    }  }  tickerStartTime=System.currentTimeMillis();  tickerDelay=delay;  tickerRunning=true;  this.rightToLeft=rightToLeft;  if (isRTL()) {    this.rightToLeft=!this.rightToLeft;  }}  }
class C{  public boolean userCanCreateDir(int connectedUserId,int dirId,String entidad) throws Exception {  boolean can=false;  int parentDirMgrId=Defs.NULL_ID;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    if (dirId == Defs.NULL_ID || dirId == Defs.ROOT_DIR_ID)     parentDirMgrId=0; else     parentDirMgrId=this.getDirMgrId(dirId,entidad);    can=hasUserAuth(connectedUserId,USER_ACTION_ID_CREATE,Defs.NULL_ID,parentDirMgrId,Defs.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return can;}  }
class C{  public static boolean isMobileConnected(){  return isNetworkAvailable(NetType.Mobile);}  }
class C{  public int writeLong(long x,final int len) throws IOException {  if (len < 0 || len > 64)   throw new IllegalArgumentException("You cannot write " + len + " bits to a long.");  if (len <= free)   return writeInCurrent((int)x,len);  int i=len - free;  final int queue=i & 7;  if (free != 0)   writeInCurrent((int)(x >>> i),free);  if (queue != 0) {    i-=queue;    writeInCurrent((int)x,queue);    x>>>=queue;  }  if (i == 64)   write((int)(x >>> 56));  if (i > 55)   write((int)(x >>> 48));  if (i > 47)   write((int)(x >>> 40));  if (i > 39)   write((int)(x >>> 32));  if (i > 31)   write((int)x >>> 24);  if (i > 23)   write((int)x >>> 16);  if (i > 15)   write((int)x >>> 8);  if (i > 7)   write((int)x);  writtenBits+=i;  return len;}  }
class C{  public com.linkedin.camus.example.records.DummyLog2.Builder clearId(){  fieldSetFlags()[0]=false;  return this;}  }
class C{  private static void weakHashLength32WithSeeds(byte[] bytes,int offset,long seedA,long seedB,long[] output){  long part1=load64(bytes,offset);  long part2=load64(bytes,offset + 8);  long part3=load64(bytes,offset + 16);  long part4=load64(bytes,offset + 24);  seedA+=part1;  seedB=rotateRight(seedB + seedA + part4,21);  long c=seedA;  seedA+=part2;  seedA+=part3;  seedB+=rotateRight(seedA,44);  output[0]=seedA + part4;  output[1]=seedB + c;}  }
class C{  public void onWirelessChargingStarted(){  if (DEBUG) {    Slog.d(TAG,"onWirelessChargingStarted");  }  mSuspendBlocker.acquire();  Message msg=mHandler.obtainMessage(MSG_WIRELESS_CHARGING_STARTED);  msg.setAsynchronous(true);  mHandler.sendMessage(msg);}  }
class C{  public CombinedActiveEntRateLocalSTResults computeLocalFromPreviousObservations(int states[][]){  int rows=states.length;  int columns=states[0].length;  double[][] localActive=new double[rows][columns];  double[][] localEntRate=new double[rows][columns];  double[][] localEntropy=new double[rows][columns];  resetOverallStats();  int prevVal, nextVal;  double logTerm;  for (int r=k; r < rows; r++) {    for (int c=0; c < columns; c++) {      nextVal=states[r][c];      prevVal=0;      int multiplier=1;      for (int p=1; p <= k; p++) {        prevVal+=states[r - p][c] * multiplier;        multiplier*=base;      }      double p_next=(double)nextCount[nextVal] / (double)observations;      localEntropy[r][c]=-Math.log(p_next) / Math.log(base);      averageEntropy+=localEntropy[r][c];      if (localEntropy[r][c] > maxEntropy) {        maxEntropy=localEntropy[r][c];      } else       if (localEntropy[r][c] < minEntropy) {        minEntropy=localEntropy[r][c];      }      logTerm=((double)jointCount[nextVal][prevVal]) / ((double)nextCount[nextVal] * (double)prevCount[prevVal]);      logTerm*=(double)observations;      localActive[r][c]=Math.log(logTerm) / Math.log(base);      averageActive+=localActive[r][c];      if (localActive[r][c] > maxActive) {        maxActive=localActive[r][c];      } else       if (localActive[r][c] < minActive) {        minActive=localActive[r][c];      }      localEntRate[r][c]=localEntropy[r][c] - localActive[r][c];      if (localEntRate[r][c] > maxEntRate) {        maxEntRate=localEntRate[r][c];      } else       if (localEntRate[r][c] < minEntRate) {        minEntRate=localEntRate[r][c];      }    }  }  averageActive=averageActive / (double)(columns * (rows - k));  averageEntropy=averageEntropy / (double)(columns * (rows - k));  averageEntRate=averageEntropy - averageActive;  CombinedActiveEntRateLocalSTResults results=new CombinedActiveEntRateLocalSTResults();  results.localActiveInfo=localActive;  results.localEntropyRate=localEntRate;  results.localEntropy=localEntropy;  return results;}  }
class C{  public static void amendEditText(EditText editText,String text){  int selStart=editText.getSelectionStart();  int selEnd=editText.getSelectionEnd();  int length=text.length();  if (selStart > length) {    selStart=selEnd=length;  }  if (selEnd > length) {    selEnd=selStart;  }  editText.setText(text);  editText.setSelection(selStart,selEnd);}  }
class C{  public boolean containsBlockPos(BlockPos blockPos){  return this.coords.getX() == Coords.blockToCube(blockPos.getX()) && this.coords.getY() == Coords.blockToCube(blockPos.getY()) && this.coords.getZ() == Coords.blockToCube(blockPos.getZ());}  }
class C{  private final void turbulenceStitch(final int[] rgb,double pointX,double pointY,final double[] fSum,final double[] noise,StitchInfo stitchInfo){  double ratio=1;  pointX*=baseFrequencyX;  pointY*=baseFrequencyY;  fSum[0]=fSum[1]=fSum[2]=fSum[3]=0;switch (channels.length) {case 4:    for (int nOctave=0; nOctave < numOctaves; nOctave++) {      noise2Stitch(noise,pointX,pointY,stitchInfo);      if (noise[3] < 0)       fSum[3]-=(noise[3] * ratio); else       fSum[3]+=(noise[3] * ratio);      if (noise[2] < 0)       fSum[2]-=(noise[2] * ratio); else       fSum[2]+=(noise[2] * ratio);      if (noise[1] < 0)       fSum[1]-=(noise[1] * ratio); else       fSum[1]+=(noise[1] * ratio);      if (noise[0] < 0)       fSum[0]-=(noise[0] * ratio); else       fSum[0]+=(noise[0] * ratio);      ratio*=.5;      pointX*=2;      pointY*=2;      stitchInfo.doubleFrequency();    }  rgb[3]=(int)(fSum[3] * 255);if ((rgb[3] & 0xFFFFFF00) != 0) rgb[3]=((rgb[3] & 0x80000000) != 0) ? 0 : 255;rgb[2]=(int)(fSum[2] * 255);if ((rgb[2] & 0xFFFFFF00) != 0) rgb[2]=((rgb[2] & 0x80000000) != 0) ? 0 : 255;rgb[1]=(int)(fSum[1] * 255);if ((rgb[1] & 0xFFFFFF00) != 0) rgb[1]=((rgb[1] & 0x80000000) != 0) ? 0 : 255;rgb[0]=(int)(fSum[0] * 255);if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;break;case 3:for (int nOctave=0; nOctave < numOctaves; nOctave++) {noise2Stitch(noise,pointX,pointY,stitchInfo);if (noise[2] < 0) fSum[2]-=(noise[2] * ratio); else fSum[2]+=(noise[2] * ratio);if (noise[1] < 0) fSum[1]-=(noise[1] * ratio); else fSum[1]+=(noise[1] * ratio);if (noise[0] < 0) fSum[0]-=(noise[0] * ratio); else fSum[0]+=(noise[0] * ratio);ratio*=.5;pointX*=2;pointY*=2;stitchInfo.doubleFrequency();}rgb[2]=(int)(fSum[2] * 255);if ((rgb[2] & 0xFFFFFF00) != 0) rgb[2]=((rgb[2] & 0x80000000) != 0) ? 0 : 255;rgb[1]=(int)(fSum[1] * 255);if ((rgb[1] & 0xFFFFFF00) != 0) rgb[1]=((rgb[1] & 0x80000000) != 0) ? 0 : 255;rgb[0]=(int)(fSum[0] * 255);if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;break;case 2:for (int nOctave=0; nOctave < numOctaves; nOctave++) {noise2Stitch(noise,pointX,pointY,stitchInfo);if (noise[1] < 0) fSum[1]-=(noise[1] * ratio); else fSum[1]+=(noise[1] * ratio);if (noise[0] < 0) fSum[0]-=(noise[0] * ratio); else fSum[0]+=(noise[0] * ratio);ratio*=.5;pointX*=2;pointY*=2;stitchInfo.doubleFrequency();}rgb[1]=(int)(fSum[1] * 255);if ((rgb[1] & 0xFFFFFF00) != 0) rgb[1]=((rgb[1] & 0x80000000) != 0) ? 0 : 255;rgb[0]=(int)(fSum[0] * 255);if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;break;case 1:for (int nOctave=0; nOctave < numOctaves; nOctave++) {noise2Stitch(noise,pointX,pointY,stitchInfo);if (noise[0] < 0) fSum[0]-=(noise[0] * ratio); else fSum[0]+=(noise[0] * ratio);ratio*=.5;pointX*=2;pointY*=2;stitchInfo.doubleFrequency();}rgb[0]=(int)(fSum[0] * 255);if ((rgb[0] & 0xFFFFFF00) != 0) rgb[0]=((rgb[0] & 0x80000000) != 0) ? 0 : 255;break;}}  }
class C{  public void writeTrackPoints(String trackName,FileWriter fw,DBtrackingPoints db) throws IOException {  db.open();  Cursor c=db.getCursor();  DBhelper dBhelper=db.getDbHelper();  fw.write("\t" + "<trk>" + "\n");  fw.write("\t\t" + "<name>" + "PocketMaps GPS track log"+ "</name>"+ "\n");  fw.write("\t\t" + "<trkseg>" + "\n");  while (!c.isAfterLast()) {    StringBuffer out=new StringBuffer();    out.append("\t\t\t" + "<trkpt lat=\"" + c.getDouble(c.getColumnIndex(dBhelper.COLUMN_LATITUDE)) + "\" "+ "lon=\""+ c.getDouble(c.getColumnIndex(dBhelper.COLUMN_LONGITUDE))+ "\">");    out.append("<ele>" + c.getDouble(c.getColumnIndex(dBhelper.COLUMN_ALTITUDE)) + "</ele>");    out.append("<time>" + DF.format(new Date(c.getLong(c.getColumnIndex(dBhelper.COLUMN_DATETIME)))) + "</time>");    out.append("</trkpt>" + "\n");    fw.write(out.toString());    c.moveToNext();  }  db.close();  fw.write("\t\t" + "</trkseg>" + "\n");  fw.write("\t" + "</trk>" + "\n");}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMMissingGlyphElement(prefix,(AbstractDocument)doc);}  }
class C{  public FromHeader createFromHeader(Address address,String tag) throws ParseException {  if (address == null)   throw new NullPointerException("null address arg");  From from=new From();  from.setAddress(address);  if (tag != null)   from.setTag(tag);  return from;}  }
class C{  public boolean isConnected(){  return m_debugger.isConnected();}  }
class C{  protected ScriptRecord(RandomAccessFile raf) throws IOException {  tag=raf.readInt();  offset=raf.readUnsignedShort();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:22.483 -0500",hash_original_method="E4620A6545EAD8C2EF58B04DD910C84A",hash_generated_method="ECD42CB2BC0D3CF90D60C6906B14E163") public static final String concatGroups(Matcher matcher){  StringBuilder b=new StringBuilder();  final int numGroups=matcher.groupCount();  for (int i=1; i <= numGroups; i++) {    String s=matcher.group(i);    System.err.println("Group(" + i + ") : "+ s);    if (s != null) {      b.append(s);    }  }  return b.toString();}  }
class C{  public static void reset(){  v=null;  v=new RCFG();}  }
class C{  public static <T>List<T> synchronizedList(List<T> list){  if (list == null) {    throw new NullPointerException("list == null");  }  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<T>(list);  }  return new SynchronizedList<T>(list);}  }
class C{  public void combine(double[] coords,Object[] data,float[] weight,Object[] outData){  int n=((double[])data[0]).length;  double[] vertex=new double[n];  vertex[0]=coords[0];  vertex[1]=coords[1];  vertex[2]=coords[2];  for (int i=3; i < n; i++) {    vertex[i]=0;    for (int j=0; j < 4; j++) {      double[] vertData=(double[])data[j];      if (vertData != null) {        vertex[i]+=weight[j] * vertData[i];      }    }  }  normalize(vertex,7);  if (25 < n) {    int pos=25;    for (int i=0; i < attribs.size(); i++) {      VertexAttribute attrib=attribs.get(i);      if (attrib.isNormal()) {        normalize(vertex,pos);        pos+=3;      } else {        pos+=attrib.size;      }    }  }  outData[0]=vertex;}  }
class C{  private void cleanState(){  if (succeeded) {    if (storePass && !sharedState.containsKey(NAME) && !sharedState.containsKey(PWD)) {      sharedState.put(NAME,username);      sharedState.put(PWD,password);    }  } else {    encKeys=null;    ktab=null;    principal=null;  }  username=null;  password=null;  if (krb5PrincName != null && krb5PrincName.length() != 0)   krb5PrincName.delete(0,krb5PrincName.length());  krb5PrincName=null;  if (clearPass) {    sharedState.remove(NAME);    sharedState.remove(PWD);  }}  }
class C{  @Override public int compareTo(Object o){  return code - ((Tag)o).getCode();}  }
class C{  public boolean compareDatasets(){  if (downstairs.getDimensions() < 1) {    System.out.println("WARNING: The dimension of the low dimensional data set");    System.out.println("cannot be less than 1");    return false;  }  if (downstairs.getDimensions() > upstairs.getDimensions()) {    System.out.println("WARNING: The dimension of the low dimensional data set");    System.out.println("cannot be greater than the dimension of the hi");    System.out.println("dimensional data set.\n");    System.out.println("hiDimension = " + upstairs.getDimensions() + "\n");    System.out.println("lowD = " + downstairs.getDimensions());    return false;  }  if (downstairs.getNumPoints() != upstairs.getNumPoints()) {    System.out.println("WARNING: The number of points in the hi-d set (" + upstairs.getNumPoints() + ""+ ") does not match that in the low-d set ("+ downstairs.getNumPoints()+ ")\n");    return false;  }  return true;}  }
class C{  protected UnManagedCifsShareACL checkUnManagedFsCifsACLExistsInDB(DbClient dbClient,String cifsACLNativeGuid){  UnManagedCifsShareACL unManagedCifsAcl=null;  URIQueryResultList result=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFileCifsACLNativeGUIdConstraint(cifsACLNativeGuid),result);  Iterator<URI> iter=result.iterator();  while (iter.hasNext()) {    URI cifsAclURI=iter.next();    unManagedCifsAcl=dbClient.queryObject(UnManagedCifsShareACL.class,cifsAclURI);    return unManagedCifsAcl;  }  return unManagedCifsAcl;}  }
class C{  public void similarNodeFound(final Node controlNode,final Node testNode,final String msg){  add(msg);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int makeWord(int hibyte,int lowbyte){  int hi=0xFF & hibyte;  int low=0xFF & lowbyte;  return ((hi << 8) | low);}  }
class C{  public boolean containsLateralShift(){  return this.contains(MoveStepType.LATERAL_LEFT) || this.contains(MoveStepType.LATERAL_RIGHT) || this.contains(MoveStepType.LATERAL_LEFT_BACKWARDS)|| this.contains(MoveStepType.LATERAL_RIGHT_BACKWARDS);}  }
class C{  @Override public String[] startSymbols(){  return pennStartSymbols;}  }
class C{  private String buildEncodedUrlQuery(List<HtmlParameter> formDataSet){  StringBuilder request=new StringBuilder();  for (  HtmlParameter p : formDataSet) {    String v;    try {      v=URLEncoder.encode(p.getName(),ENCODING_TYPE);      request.append(v);      request.append("=");      v=URLEncoder.encode(p.getValue(),ENCODING_TYPE);      request.append(v);    } catch (    UnsupportedEncodingException e) {      log.warn("Error while encoding query for form.",e);    }    request.append("&");  }  if (request.length() > 0) {    request.deleteCharAt(request.length() - 1);  }  return request.toString();}  }
class C{  @Override public AgentAppFrame createFrame(){  return new EightPuzzleFrame();}  }
class C{  @Override public boolean remove(Object obj){  return removeFirstOccurrenceImpl(obj);}  }
class C{  @Override public void resume(){  Gdx.app.log(TAG,"Resumed");}  }
class C{  public static <A,B>Pair<A,B> create(A a,B b){  return new Pair<A,B>(a,b);}  }
class C{  private static boolean writeUnmarshalArguments(IndentingWriter p,String streamName,Type[] types,String[] names) throws IOException {  assert types.length == names.length;  boolean readObject=false;  for (int i=0; i < types.length; i++) {    if (writeUnmarshalArgument(p,streamName,types[i],names[i])) {      readObject=true;    }    p.pln(";");  }  return readObject;}  }
class C{  public static Class indexTypeFor(Class pathType) throws TypeMismatchException {  if (Character.class.isAssignableFrom(pathType) || Character.TYPE == pathType)   return pathType;  if (Byte.class.isAssignableFrom(pathType) || Short.class.isAssignableFrom(pathType) || Byte.TYPE == pathType || Short.TYPE == pathType)   return Integer.class;  Iterator i=_numericWrapperClasses.iterator();  while (i.hasNext()) {    Class cls=(Class)i.next();    if (cls.isAssignableFrom(pathType))     return pathType;  }  i=_numericPrimitiveClasses.iterator();  while (i.hasNext()) {    Class cls=(Class)i.next();    if (cls == pathType)     return pathType;  }  if (java.util.Date.class.isAssignableFrom(pathType) || pathType == String.class)   return pathType;  throw new TypeMismatchException(LocalizedStrings.TypeUtils_INDEXES_ARE_NOT_SUPPORTED_ON_PATHS_OF_TYPE_0.toLocalizedString(pathType.getName()));}  }
class C{  public State basicGetValue(){  return value;}  }
class C{  @Override public List<Integer> orderActions(ConnectFourState state,List<Integer> actions,String player,int depth){  List<Integer> result=actions;  if (depth == 0) {    List<ActionValuePair<Integer>> actionEstimates=new ArrayList<ActionValuePair<Integer>>(actions.size());    for (    Integer action : actions)     actionEstimates.add(ActionValuePair.createFor(action,state.analyzePotentialWinPositions(action)));    Collections.sort(actionEstimates);    result=new ArrayList<Integer>();    for (    ActionValuePair<Integer> pair : actionEstimates)     result.add(pair.getAction());  }  return result;}  }
class C{  public ImageTransferSession createImageSharingSession(ContactId contact,MmContent content,MmContent thumbnail,long timestamp) throws CoreException {  if (sLogger.isActivated()) {    sLogger.info("Initiate image sharing session with contact " + contact + ", file "+ content.toString());  }  if (!isCallConnectedWith(contact)) {    if (sLogger.isActivated()) {      sLogger.debug("Rich call not established: cancel the initiation");    }    throw new CoreException("Call not established");  }  assertMaximumImageTransferSize(content.getSize(),"File exceeds max size.");  boolean rejectInvitation=false;  if (isCurrentlyImageSharingBiDirectional()) {    if (sLogger.isActivated()) {      sLogger.debug("Max sessions reached");    }    rejectInvitation=true;  } else   if (isCurrentlyImageSharingUniDirectional()) {    ImageTransferSession currentSession=getUnidirectionalImageSharingSession();    if (isSessionOriginating(currentSession)) {      if (sLogger.isActivated()) {        sLogger.debug("Max originating sessions reached");      }      rejectInvitation=true;    } else     if (contact == null || !contact.equals(currentSession.getRemoteContact())) {      if (sLogger.isActivated()) {        sLogger.debug("Only bidirectional session with same contact authorized");      }      rejectInvitation=true;    }  }  if (rejectInvitation) {    if (sLogger.isActivated()) {      sLogger.debug("The max number of sharing sessions is achieved: cancel the initiation");    }    throw new CoreException("Max content sharing sessions achieved");  }  return new OriginatingImageTransferSession(this,content,contact,thumbnail,mRcsSettings,timestamp,mContactManager,mCapabilityService);}  }
class C{  private void createPageSequence(){  mPages=new ArrayList<Callable<FirstRunPage>>();  if (mShowWelcomePage)   mPages.add(pageOf(ToSAndUMAFirstRunFragment.class));  if (mFreProperties.getBoolean(SHOW_SIGNIN_PAGE)) {    mPages.add(pageOf(AccountFirstRunFragment.class));  }}  }
class C{  public synchronized void onContactsLoaded(){  if (!isContactsLoaded) {    isContactsLoaded=true;    context.getPreferences().putBool("app.contacts.loaded",true);    updateLoaded();  }}  }
class C{  public final String stringValue(Attribute att){  return stringValue(att.index());}  }
class C{  public Vector3(Vector3 vector){  this.set(vector);}  }
class C{  @SuppressWarnings("unchecked") public static Annotation findAnnotation(BodyDeclaration decl,String annotationTypeName){  if (annotationTypeName == null) {    throw new IllegalArgumentException("annotationTypeName cannot be null");  }  List<ASTNode> modifiers=(List<ASTNode>)decl.getStructuralProperty(decl.getModifiersProperty());  for (  ASTNode modifier : modifiers) {    if (modifier instanceof Annotation) {      Annotation annotation=(Annotation)modifier;      String typeName=getAnnotationTypeName(annotation);      if (annotationTypeName.equals(typeName)) {        return annotation;      }    }  }  return null;}  }
class C{  @Override public MBHeader calculateMBDetails(final MBHeader mbHeader,final boolean isPersistedObject){  final List<MBDetails> mbDetailList=mbHeader.getMbDetails();  double lPrevCumlvQuant=0;  for (  final MBDetails detail : mbDetailList) {    if (detail.getWorkOrderActivity().getActivity().getParent() == null) {      lPrevCumlvQuant=prevCumulativeQuantityIncludingCQ(detail.getWorkOrderActivity().getId(),mbHeader.getId(),detail.getWorkOrderActivity().getActivity().getId(),detail.getWorkOrderActivity().getWorkOrderEstimate().getWorkOrder());      detail.setTotalEstQuantity(totalEstimatedQuantity(detail.getWorkOrderActivity().getId(),mbHeader.getId(),detail.getWorkOrderActivity().getActivity().getId(),detail.getWorkOrderActivity().getWorkOrderEstimate().getWorkOrder()));    } else {      detail.getWorkOrderActivity().setParent((WorkOrderActivity)genericService.find("from WorkOrderActivity where activity.id=? and (workOrderEstimate.id=? or workOrderEstimate.estimate.parent.id=?)",detail.getWorkOrderActivity().getActivity().getParent().getId(),mbHeader.getWorkOrderEstimate().getId(),mbHeader.getWorkOrderEstimate().getEstimate().getId()));      lPrevCumlvQuant=prevCumulativeQuantityIncludingCQ(detail.getWorkOrderActivity().getId(),mbHeader.getId(),detail.getWorkOrderActivity().getActivity().getParent().getId(),detail.getWorkOrderActivity().getWorkOrderEstimate().getWorkOrder());      detail.setTotalEstQuantity(totalEstimatedQuantity(detail.getWorkOrderActivity().getId(),mbHeader.getId(),detail.getWorkOrderActivity().getActivity().getParent().getId(),detail.getWorkOrderActivity().getWorkOrderEstimate().getWorkOrder()));    }    detail.setPrevCumlvQuantity(lPrevCumlvQuant);    detail.setCurrCumlvQuantity(lPrevCumlvQuant + detail.getQuantity());    detail.setAmtForCurrQuantity(detail.getQuantity() * detail.getWorkOrderActivity().getApprovedRate());    detail.setCumlvAmtForCurrCumlvQuantity((lPrevCumlvQuant + detail.getQuantity()) * detail.getWorkOrderActivity().getApprovedRate());  }  return mbHeader;}  }
class C{  protected void importContent(String tag){  final JFileChooser fc=new JFileChooser(System.getProperty("user.dir"));  fc.setFileFilter(new FileNameExtensionFilter("XML file","xml"));  int returnVal=fc.showOpenDialog(frame);  if (returnVal == JFileChooser.APPROVE_OPTION) {    String stateFile=fc.getSelectedFile().getAbsolutePath();    addComment("Importing " + tag + " from "+ stateFile);    try {      XMLUtils.importContent(system,stateFile,tag);    } catch (    Exception f) {      log.warning("could not extract interaction: " + f);      addComment(f.toString());    }  }}  }
class C{  private Predicate<ChangeData> rewriteImpl(Predicate<ChangeData> in,ChangeIndex index,QueryOptions opts,MutableInteger leafTerms) throws QueryParseException {  if (isIndexPredicate(in,index)) {    if (++leafTerms.value > config.maxTerms()) {      throw new QueryParseException("too many terms in query");    }    return in;  } else   if (in instanceof LimitPredicate) {    return new LimitPredicate<>(ChangeQueryBuilder.FIELD_LIMIT,opts.limit());  } else   if (!isRewritePossible(in)) {    return null;  }  int n=in.getChildCount();  BitSet isIndexed=new BitSet(n);  BitSet notIndexed=new BitSet(n);  BitSet rewritten=new BitSet(n);  List<Predicate<ChangeData>> newChildren=Lists.newArrayListWithCapacity(n);  for (int i=0; i < n; i++) {    Predicate<ChangeData> c=in.getChild(i);    Predicate<ChangeData> nc=rewriteImpl(c,index,opts,leafTerms);    if (nc == c) {      isIndexed.set(i);      newChildren.add(c);    } else     if (nc == null) {      notIndexed.set(i);      newChildren.add(c);    } else {      rewritten.set(i);      newChildren.add(nc);    }  }  if (isIndexed.cardinality() == n) {    return in;  } else   if (notIndexed.cardinality() == n) {    return null;  } else   if (rewritten.cardinality() == n) {    return in.copy(newChildren);  }  return partitionChildren(in,newChildren,isIndexed,index,opts);}  }
class C{  public ByteBuffer putInt(int value){  int newPosition=position + 4;  putInt(position,value);  position=newPosition;  return this;}  }
class C{  public synchronized int indexOf(Object object,int location){  if (object != null) {    for (int i=location; i < elementCount; i++) {      if (object.equals(elementData[i])) {        return i;      }    }  } else {    for (int i=location; i < elementCount; i++) {      if (elementData[i] == null) {        return i;      }    }  }  return -1;}  }
class C{  private static void intro(){  if (!introDone) {    logger.info("");    logger.info(Localization.Main.getText("intro.goal"));    logger.info(Localization.Main.getText("intro.wiki.title") + Localization.Main.getText("intro.wiki.url"));    logger.info("");    logger.info(Localization.Main.getText("intro.team.title"));    logger.info("  * " + Localization.Main.getText("intro.team.list1"));    logger.info("");    logger.info(Localization.Main.getText("intro.team.title2"));    logger.info("  * " + Localization.Main.getText("intro.team.list2"));    logger.info("  * " + Localization.Main.getText("intro.team.list3"));    logger.info("  * " + Localization.Main.getText("intro.team.list4"));    logger.info("  * " + Localization.Main.getText("intro.team.list5"));    logger.info("");    logger.info(Localization.Main.getText("intro.thanks.1"));    logger.info(Localization.Main.getText("intro.thanks.2"));    logger.info("");    logger.info(Localization.Main.getText("usage.intro",ConfigurationManager.getCurrentProfile().getPropertiesFile().getPath()));    logger.info("");    introDone=true;  }}  }
class C{  public void visitCode(){  if (mv != null) {    mv.visitCode();  }}  }
class C{  public static JavaCompilerUtil create(){  return create(Thread.currentThread().getContextClassLoader());}  }
class C{  public String toString(){  String className=getClass().getName();  className=className.substring(className.lastIndexOf('.') + 1);  return className + "[" + paramString()+ "]";}  }
class C{  public static boolean equalDeclarations(IBinding b1,IBinding b2){  if (b1.getKind() != b2.getKind())   return false;  return getDeclaration(b1).isEqualTo(getDeclaration(b2));}  }
class C{  public PasteLayoutAction(LayoutEditable layoutEditable){  super("Paste Layout");  if (layoutEditable == null) {    throw new NullPointerException();  }  this.layoutEditable=layoutEditable;}  }
class C{  public void test_scatterSplit() throws IOException, InterruptedException, ExecutionException {  final int dataServiceCount=2;  final int expectedIndexPartitionCount=4;  final String name="testIndex";  final UUID indexUUID=UUID.randomUUID();{    final IndexMetadata indexMetadata=new IndexMetadata(name,indexUUID);    indexMetadata.setDeleteMarkers(true);    indexMetadata.setScatterSplitConfiguration(new ScatterSplitConfiguration(true,.25,dataServiceCount,expectedIndexPartitionCount));    fed.registerIndex(indexMetadata,dataService0.getServiceUUID());  }  final PartitionLocator pmd0;{    final ClientIndexView ndx=(ClientIndexView)fed.getIndex(name,ITx.UNISOLATED);    final IMetadataIndex mdi=ndx.getMetadataIndex();    assertEquals("#index partitions",1,mdi.rangeCount());    pmd0=mdi.get(new byte[]{});    assertEquals("partitionId",0L,pmd0.getPartitionId());    assertEquals("dataServiceUUID",dataService0.getServiceUUID(),pmd0.getDataServiceUUID());  }  assertEquals("partitionCount",1,getPartitionCount(name));  final BTree groundTruth;{    final IndexMetadata indexMetadata=new IndexMetadata(indexUUID);    groundTruth=BTree.create(new TemporaryRawStore(),indexMetadata);  }  final int batchSize=5000;  long overflowCounter=dataService0.getAsynchronousOverflowCounter();  int npartitions=-1;{    if (log.isInfoEnabled())     log.info("Writing on indices to provoke overflow");    int nrounds=0;    long nwritten=0L;    while (npartitions <= 1) {      final byte[][] keys=new byte[batchSize][];      final byte[][] vals=new byte[batchSize][];      for (int i=0; i < batchSize; i++) {        keys[i]=TestKeyBuilder.asSortKey(nwritten + i);        vals[i]=SerializerUtil.serialize(nwritten + i);      }      groundTruth.submit(0,batchSize,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);      dataService0.forceOverflow(false,false);      fed.getIndex(name,ITx.UNISOLATED).submit(0,batchSize,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);      overflowCounter=awaitAsynchronousOverflow(dataService0,overflowCounter);      assertEquals("rangeCount",groundTruth.getEntryCount(),fed.getIndex(name,ITx.UNISOLATED).rangeCount());      nrounds++;      nwritten+=batchSize;      npartitions=getPartitionCount(name);      System.err.println("Populating the index: overflowCounter=" + overflowCounter + ", nrounds="+ nrounds+ ", nwritten="+ nwritten+ ", nentries="+ groundTruth.getEntryCount()+ " ("+ fed.getIndex(name,ITx.UNISOLATED).rangeCount()+ "), npartitions="+ npartitions);      if (log.isInfoEnabled())       log.info("Verifying scale-out index against ground truth");      assertSameEntryIterator(groundTruth,fed.getIndex(name,ITx.UNISOLATED));    }  }{    int ndataService0=0;    int ndataService1=0;    final ITupleIterator itr=new RawDataServiceTupleIterator(fed.getMetadataService(),MetadataService.getMetadataIndexName(name),ITx.READ_COMMITTED,true,null,null,0,IRangeQuery.DEFAULT,null);    int n=0;    while (itr.hasNext()) {      final PartitionLocator locator=(PartitionLocator)SerializerUtil.deserialize(itr.next().getValue());      System.err.println("locators[" + n + "]="+ locator);      if (locator.getDataServiceUUID().equals(dataService0.getServiceUUID())) {        ndataService0++;      } else       if (locator.getDataServiceUUID().equals(dataService1.getServiceUUID())) {        ndataService1++;      } else {        fail("Not expecting partition move to this service: " + locator);      }      n++;    }    npartitions=getPartitionCount(name);    System.err.println("npartitions=" + npartitions);    System.err.println("npartitions(ds0)=" + ndataService0);    System.err.println("npartitions(ds1)=" + ndataService1);    assertEquals("partitionCount=" + npartitions,expectedIndexPartitionCount,npartitions);    assertEquals("#dataService0=" + ndataService0,expectedIndexPartitionCount / 2,ndataService0);    assertEquals("#dataService1=" + ndataService0,expectedIndexPartitionCount / 2,ndataService1);  }}  }
class C{  public static Script createP2SHMultiSigInputScript(@Nullable List<TransactionSignature> signatures,Script multisigProgram){  List<byte[]> sigs=new ArrayList<byte[]>();  if (signatures == null) {    int numSigs=multisigProgram.getNumberOfSignaturesRequiredToSpend();    for (int i=0; i < numSigs; i++)     sigs.add(new byte[]{});  } else {    for (    TransactionSignature signature : signatures) {      sigs.add(signature.encodeToBitcoin());    }  }  return createMultiSigInputScriptBytes(sigs,multisigProgram.getProgram());}  }
class C{  public Builder mediaType(String mediaType){  this.mediaType=mediaType;  return this;}  }
class C{  private void moveBox(int dx,int dy){  setX1(checkBoundaryX(x1 + dx));  setY1(checkBoundaryY(y1 + dy));  setX2(checkBoundaryX(x2 + dx));  setY2(checkBoundaryY(y2 + dy));}  }
class C{  public ProfileVisit type(Type type){  this.type=type;  return this;}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public static String generateNativeGuid(DbClient dbClient,QuotaDirectory quotaDir,String fsName) throws IOException {  FileShare fs=dbClient.queryObject(FileShare.class,quotaDir.getParent());  StorageSystem device=dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  return String.format("%s+%s+%s+" + QUOTADIRECTORY + "+%s",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),fsName,quotaDir.getName());}  }
class C{  public void createFieldEditors(){  Composite fieldEditorParent=getFieldEditorParent();  new Label(fieldEditorParent,SWT.NONE);  addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_ESCAPE_UNICODE_CHARACTERS,"Escape unicode characters",fieldEditorParent));  addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_OMIT_PREFIX_THIS,"Omit the prefix 'This' if possible",fieldEditorParent));  addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_REALIGN_LINE_NUMBERS,"Realign line numbers",fieldEditorParent));  addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_SHOW_LINE_NUMBERS,"Show original line numbers",fieldEditorParent));  addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_SHOW_DEFAULT_CONSTRUCTOR,"Show default constructor",fieldEditorParent));  addField(new BooleanFieldEditor(JavaDecompilerPlugin.PREF_SHOW_METADATA,"Show metadata",fieldEditorParent));}  }
class C{  public void reset(){  super.reset();  if (null != m_firstWalker) {    m_lastUsedWalker=m_firstWalker;    m_firstWalker.setRoot(m_context);  }}  }
class C{  static String classNameOf(TypeElement type){  String name=type.getQualifiedName().toString();  String pkgName=packageNameOf(type);  return pkgName.isEmpty() ? name : name.substring(pkgName.length() + 1);}  }
class C{  public void removeFilter(String bssid){  mFilter.remove(bssid);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  mHandler=new Handler();  mDungeonsPurchaseObserver=new DungeonsPurchaseObserver(mHandler);  mBillingService=new BillingService();  mBillingService.setContext(this);  mPurchaseDatabase=new PurchaseDatabase(this);  setupWidgets();  ResponseHandler.register(mDungeonsPurchaseObserver);  if (!mBillingService.checkBillingSupported()) {    showDialog(DIALOG_CANNOT_CONNECT_ID);  }  if (!mBillingService.checkBillingSupported(Consts.ITEM_TYPE_SUBSCRIPTION)) {    showDialog(DIALOG_SUBSCRIPTIONS_NOT_SUPPORTED_ID);  }}  }
class C{  private void goBack(){  if (this.inAppWebView.canGoBack()) {    this.inAppWebView.goBack();  }}  }
class C{  public void put(int key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=Math.max(mSize + 1,mKeys.length * 2);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public static void fill(double[] array,int start,int end,double value){  checkBounds(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  char c;  if (++bufpos == available)   AdjustBuffSize();  if ((buffer[bufpos]=c=ReadByte()) == '\\') {    UpdateLineColumn(c);    int backSlashCnt=1;    for (; ; ) {      if (++bufpos == available)       AdjustBuffSize();      try {        if ((buffer[bufpos]=c=ReadByte()) != '\\') {          UpdateLineColumn(c);          if ((c == 'u') && ((backSlashCnt & 1) == 1)) {            if (--bufpos < 0)             bufpos=bufsize - 1;            break;          }          backup(backSlashCnt);          return '\\';        }      } catch (      java.io.IOException e) {        if (backSlashCnt > 1)         backup(backSlashCnt - 1);        return '\\';      }      UpdateLineColumn(c);      backSlashCnt++;    }    try {      while ((c=ReadByte()) == 'u')       ++column;      buffer[bufpos]=c=(char)(hexval(c) << 12 | hexval(ReadByte()) << 8 | hexval(ReadByte()) << 4 | hexval(ReadByte()));      column+=4;    } catch (    java.io.IOException e) {      throw new RuntimeException("Invalid escape character at line " + line + " column "+ column+ ".");    }    if (backSlashCnt == 1)     return c; else {      backup(backSlashCnt - 1);      return '\\';    }  } else {    UpdateLineColumn(c);    return c;  }}  }
class C{  public void verify(ClientId signer,Date atDate) throws Exception {  if (verifySchema) {    verifySchema();  }  if (hashChainResult != null && signature.references(SIG_HASH_CHAIN_RESULT)) {    verifyHashChain();  }  X509Certificate signingCert=getSigningCertificate();  verifySignerName(signer,signingCert);  verifySignatureValue(signingCert);  verifyTimestampManifests();  verifyCertificateChain(atDate,signer,signingCert);}  }
class C{  public static Stream<String> wordsOf(String text){  requireNonNull(text);  return WORDS.splitAsStream(text);}  }
class C{  void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException {  if (null != nodeName && nodeName.length() > 0) {    SerializationHandler rhandler=transformer.getSerializationHandler();    String val=transformer.transformToString(this);    try {      String localName=QName.getLocalPart(nodeName);      if (prefix != null && prefix.length() > 0) {        rhandler.addAttribute(nodeNamespace,localName,nodeName,"CDATA",val,true);      } else {        rhandler.addAttribute("",localName,nodeName,"CDATA",val,true);      }    } catch (    SAXException e) {    }  }}  }
class C{  void rollback(){  checkValid();  conn.prepareCommand("ROLLBACK TO SAVEPOINT " + getName(name,savepointId),Integer.MAX_VALUE).executeUpdate();}  }
class C{  public boolean isPendingCommit(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.633 -0500",hash_original_method="7CE59BC66C958C608E20B1EEC430162A",hash_generated_method="CA85AE20212AFCDAED1E94900A261A2A") public RefQueueWorker(ReferenceQueue<?> queue,RefQueueHandler handler){  if (queue == null) {    throw new IllegalArgumentException("Queue must not be null.");  }  if (handler == null) {    throw new IllegalArgumentException("Handler must not be null.");  }  refQueue=queue;  refHandler=handler;}  }
class C{  public void loadAvatarImages(Network network){  Vertex avatar=network.createVertex(Primitive.AVATAR);  for (  EmotionalState state : EmotionalState.values()) {    URL resource=ImageAvatar.class.getResource(state.name().toLowerCase() + ".jpg");    if (resource != null) {      try {        BinaryData data=new BinaryData();        InputStream stream=resource.openStream();        data.setImage(stream,1000000);        Vertex image=network.createVertex(data);        avatar.addRelationship(new Primitive(state.name().toLowerCase()),image);      } catch (      Exception exception) {        network.getBot().log(network,exception);      }    }  }}  }
class C{  protected void sequence_TypeFakeDefinition(ISerializationContext context,TypeFakeDefinition semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.GAML_DEFINITION__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTypeFakeDefinitionAccess().getNameIDTerminalRuleCall_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  public static void loadEvents(Context context,ArrayList<Event> events,int startDay,int days,int requestId,AtomicInteger sequenceNumber){  if (PROFILE) {    Debug.startMethodTracing("loadEvents");  }  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(context,Manifest.permission.READ_CALENDAR) != PackageManager.PERMISSION_GRANTED) {    return;  }  Cursor cEvents=null;  Cursor cAllday=null;  events.clear();  try {    int endDay=startDay + days - 1;    SharedPreferences prefs=GeneralPreferences.getSharedPreferences(context);    boolean hideDeclined=prefs.getBoolean(GeneralPreferences.KEY_HIDE_DECLINED,false);    String where=EVENTS_WHERE;    String whereAllday=ALLDAY_WHERE;    if (hideDeclined) {      String hideString=" AND " + Instances.SELF_ATTENDEE_STATUS + "!="+ Attendees.ATTENDEE_STATUS_DECLINED;      where+=hideString;      whereAllday+=hideString;    }    cEvents=instancesQuery(context.getContentResolver(),EVENT_PROJECTION,startDay,endDay,where,null,SORT_EVENTS_BY);    cAllday=instancesQuery(context.getContentResolver(),EVENT_PROJECTION,startDay,endDay,whereAllday,null,SORT_ALLDAY_BY);    if (requestId != sequenceNumber.get()) {      return;    }    buildEventsFromCursor(events,cEvents,context,startDay,endDay);    buildEventsFromCursor(events,cAllday,context,startDay,endDay);  }  finally {    if (cEvents != null) {      cEvents.close();    }    if (cAllday != null) {      cAllday.close();    }    if (PROFILE) {      Debug.stopMethodTracing();    }  }}  }
class C{  private byte[] embiggen(byte[] b,int len){  if (b == null || b.length < len) {    return new byte[len];  } else {    return b;  }}  }
class C{  public static int findPreviousNonMarkNorOtherCharacter(String text,int column){  if (column - 1 < 0) {    return -1;  }  MatchResult match=RegExpUtils.findMatchBeforeIndex(UnicodeUtils.regexpNotMarkOrOtherExcludingTabAndNewline,text,column);  if (match == null) {    return -1;  } else {    return match.getIndex();  }}  }
class C{  public void loadDefinition(ClassDeclaration c){  if (tracing)   dtEnter("loadDefinition: ENTER " + c.getName() + ", status "+ c.getStatus());switch (c.getStatus()) {case CS_UNDEFINED:{      if (tracing)       dtEvent("loadDefinition: STATUS IS UNDEFINED");      Identifier nm=c.getName();      Package pkg;      try {        pkg=getPackage(nm.getQualifier());      } catch (      IOException e) {        c.setDefinition(null,CS_NOTFOUND);        error(0,"io.exception",c);        if (tracing)         dtExit("loadDefinition: IO EXCEPTION (package)");        return;      }      ClassFile binfile=pkg.getBinaryFile(nm.getName());      if (binfile == null) {        c.setDefinition(null,CS_SOURCE);        if (tracing)         dtExit("loadDefinition: MUST BE SOURCE (no binary) " + c.getName());        return;      }      ClassFile srcfile=pkg.getSourceFile(nm.getName());      if (srcfile == null) {        if (tracing)         dtEvent("loadDefinition: NO SOURCE " + c.getName());        BinaryClass bc=null;        try {          bc=loadFile(binfile);        } catch (        IOException e) {          c.setDefinition(null,CS_NOTFOUND);          error(0,"io.exception",binfile);          if (tracing)           dtExit("loadDefinition: IO EXCEPTION (binary)");          return;        }        if ((bc != null) && !bc.getName().equals(nm)) {          error(0,"wrong.class",binfile.getPath(),c,bc);          bc=null;          if (tracing)           dtEvent("loadDefinition: WRONG CLASS (binary)");        }        if (bc == null) {          c.setDefinition(null,CS_NOTFOUND);          if (tracing)           dtExit("loadDefinition: NOT FOUND (source or binary)");          return;        }        if (bc.getSource() != null) {          srcfile=new ClassFile(new File((String)bc.getSource()));          srcfile=pkg.getSourceFile(srcfile.getName());          if ((srcfile != null) && srcfile.exists()) {            if (tracing)             dtEvent("loadDefinition: FILENAME IN BINARY " + srcfile);            if (srcfile.lastModified() > binfile.lastModified()) {              c.setDefinition(bc,CS_SOURCE);              if (tracing)               dtEvent("loadDefinition: SOURCE IS NEWER " + srcfile);              bc.loadNested(this);              if (tracing)               dtExit("loadDefinition: MUST BE SOURCE " + c.getName());              return;            }            if (dependencies()) {              c.setDefinition(bc,CS_UNDECIDED);              if (tracing)               dtEvent("loadDefinition: UNDECIDED " + c.getName());            } else {              c.setDefinition(bc,CS_BINARY);              if (tracing)               dtEvent("loadDefinition: MUST BE BINARY " + c.getName());            }            bc.loadNested(this);            if (tracing)             dtExit("loadDefinition: EXIT " + c.getName() + ", status "+ c.getStatus());            return;          }        }        c.setDefinition(bc,CS_BINARY);        if (tracing)         dtEvent("loadDefinition: MUST BE BINARY (no source) " + c.getName());        bc.loadNested(this);        if (tracing)         dtExit("loadDefinition: EXIT " + c.getName() + ", status "+ c.getStatus());        return;      }      BinaryClass bc=null;      try {        if (srcfile.lastModified() > binfile.lastModified()) {          c.setDefinition(null,CS_SOURCE);          if (tracing)           dtEvent("loadDefinition: MUST BE SOURCE (younger than binary) " + c.getName());          return;        }        bc=loadFile(binfile);      } catch (      IOException e) {        error(0,"io.exception",binfile);        if (tracing)         dtEvent("loadDefinition: IO EXCEPTION (binary)");      }      if ((bc != null) && !bc.getName().equals(nm)) {        error(0,"wrong.class",binfile.getPath(),c,bc);        bc=null;        if (tracing)         dtEvent("loadDefinition: WRONG CLASS (binary)");      }      if (bc != null) {        Identifier name=bc.getName();        if (name.equals(c.getName())) {          if (dependencies()) {            c.setDefinition(bc,CS_UNDECIDED);            if (tracing)             dtEvent("loadDefinition: UNDECIDED " + name);          } else {            c.setDefinition(bc,CS_BINARY);            if (tracing)             dtEvent("loadDefinition: MUST BE BINARY " + name);          }        } else {          c.setDefinition(null,CS_NOTFOUND);          if (tracing)           dtEvent("loadDefinition: NOT FOUND (source or binary)");          if (dependencies()) {            getClassDeclaration(name).setDefinition(bc,CS_UNDECIDED);            if (tracing)             dtEvent("loadDefinition: UNDECIDED " + name);          } else {            getClassDeclaration(name).setDefinition(bc,CS_BINARY);            if (tracing)             dtEvent("loadDefinition: MUST BE BINARY " + name);          }        }      } else {        c.setDefinition(null,CS_NOTFOUND);        if (tracing)         dtEvent("loadDefinition: NOT FOUND (source or binary)");      }      if (bc != null && bc == c.getClassDefinition())       bc.loadNested(this);      if (tracing)       dtExit("loadDefinition: EXIT " + c.getName() + ", status "+ c.getStatus());      return;    }case CS_UNDECIDED:{    if (tracing)     dtEvent("loadDefinition: STATUS IS UNDECIDED");    Hashtable tab=new Hashtable();    if (!needsCompilation(tab,c)) {      for (Enumeration e=tab.keys(); e.hasMoreElements(); ) {        ClassDeclaration dep=(ClassDeclaration)e.nextElement();        if (dep.getStatus() == CS_UNDECIDED) {          dep.setDefinition(dep.getClassDefinition(),CS_BINARY);          if (tracing)           dtEvent("loadDefinition: MUST BE BINARY " + dep);        }      }    }    if (tracing)     dtExit("loadDefinition: EXIT " + c.getName() + ", status "+ c.getStatus());    return;  }case CS_SOURCE:{  if (tracing)   dtEvent("loadDefinition: STATUS IS SOURCE");  ClassFile srcfile=null;  Package pkg=null;  if (c.getClassDefinition() != null) {    try {      pkg=getPackage(c.getName().getQualifier());      srcfile=pkg.getSourceFile((String)c.getClassDefinition().getSource());    } catch (    IOException e) {      error(0,"io.exception",c);      if (tracing)       dtEvent("loadDefinition: IO EXCEPTION (package)");    }    if (srcfile == null) {      String fn=(String)c.getClassDefinition().getSource();      srcfile=new ClassFile(new File(fn));    }  } else {    Identifier nm=c.getName();    try {      pkg=getPackage(nm.getQualifier());      srcfile=pkg.getSourceFile(nm.getName());    } catch (    IOException e) {      error(0,"io.exception",c);      if (tracing)       dtEvent("loadDefinition: IO EXCEPTION (package)");    }    if (srcfile == null) {      c.setDefinition(null,CS_NOTFOUND);      if (tracing)       dtExit("loadDefinition: SOURCE NOT FOUND " + c.getName() + ", status "+ c.getStatus());      return;    }  }  try {    parseFile(srcfile);  } catch (  FileNotFoundException e) {    error(0,"io.exception",srcfile);    if (tracing)     dtEvent("loadDefinition: IO EXCEPTION (source)");  }  if ((c.getClassDefinition() == null) || (c.getStatus() == CS_SOURCE)) {    error(0,"wrong.source",srcfile.getPath(),c,pkg);    c.setDefinition(null,CS_NOTFOUND);    if (tracing)     dtEvent("loadDefinition: WRONG CLASS (source) " + c.getName());  }  if (tracing)   dtExit("loadDefinition: EXIT " + c.getName() + ", status "+ c.getStatus());  return;}}if (tracing) dtExit("loadDefinition: EXIT " + c.getName() + ", status "+ c.getStatus());}  }
class C{  @Override public final void preTearDown() throws Exception {  client.invoke(null);  server.invoke(null);}  }
class C{  void drawIcon(Graphics g,int ax,int ay,int aw,int ah,float align,Component c){  int gap=isLeftToRight ? -(img.getIconWidth() + bulletgap) : (aw + bulletgap);  int x=ax + gap;  int y=Math.max(ay,ay + (int)(align * ah) - img.getIconHeight());  img.paintIcon(c,g,x,y);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CompiereColor(Color upperColor,Color lowerColor){  this(upperColor,lowerColor,SwingConstants.NORTH_WEST,100);}  }
class C{  protected static void statistics(int from,int to){  for (int i=0; i < primeCapacities.length - 1; i++) {    if (primeCapacities[i] >= primeCapacities[i + 1])     throw new RuntimeException("primes are unsorted or contain duplicates; detected at " + i + "@"+ primeCapacities[i]);  }  double accDeviation=0.0;  double maxDeviation=-1.0;  for (int i=from; i <= to; i++) {    int primeCapacity=nextPrime(i);    double deviation=(primeCapacity - i) / (double)i;    if (deviation > maxDeviation) {      maxDeviation=deviation;      System.out.println("new maxdev @" + i + "@dev="+ maxDeviation);    }    accDeviation+=deviation;  }  long width=1 + (long)to - (long)from;  double meanDeviation=accDeviation / width;  System.out.println("Statistics for [" + from + ","+ to+ "] are as follows");  System.out.println("meanDeviation = " + (float)meanDeviation * 100 + " %");  System.out.println("maxDeviation = " + (float)maxDeviation * 100 + " %");}  }
class C{  public static <T>String joinAnd(final String delimiter,final String lastDelimiter,final Collection<T> objs){  if (objs == null || objs.isEmpty())   return "";  final Iterator<T> iter=objs.iterator();  final StringBuilder buffer=new StringBuilder(Strings.toString(iter.next()));  int i=1;  while (iter.hasNext()) {    final T obj=iter.next();    if (notEmpty(obj))     buffer.append(++i == objs.size() ? lastDelimiter : delimiter).append(Strings.toString(obj));  }  return buffer.toString();}  }
class C{  public boolean isDeleted(){  return fIsDeleted;}  }
class C{  public static String convertForStoring(ClassAndMethods cam){  StringBuilder sb=new StringBuilder(150);  sb.append(cam.dclass.fullyQualifiedName());  List<CompiledMethod> methods=new ArrayList<CompiledMethod>(cam.methods.values());  Collections.sort(methods);  sb.append(',').append(methods.size()).append("\n");  for (  CompiledMethod method : methods) {    CompiledCode c=method.getCode();    if (c != null) {      sb.append(method.name()).append(',').append(c.code.length).append(',');      for (int i=0; i < c.code.length; i++) {        sb.append(hexChars[(c.code[i] & 0xff)]);      }      sb.append("\n");    }  }  return sb.toString();}  }
class C{  public void add(final String name,final String value){  String[] values=metadata.get(name);  if (values == null) {    set(name,value);  } else {    String[] newValues=new String[values.length + 1];    System.arraycopy(values,0,newValues,0,values.length);    newValues[newValues.length - 1]=value;    metadata.put(name,newValues);  }}  }
class C{  public double quantile(double y){  throw new RuntimeException("Not yet implemented");}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){}  }
class C{  @Override public void reset(){  if (!Double.isNaN(m_unitValue) || !Double.isNaN(m_unitError)) {    m_unitValue=Double.NaN;    m_unitError=Double.NaN;    m_weightsUpdated=false;    for (int noa=0; noa < m_numInputs; noa++) {      m_inputList[noa].reset();    }  }}  }
class C{  public static String bytesToLatin1(final byte[] ba){  return bytesToEncoding(ba,"ISO-8859-1");}  }
class C{  public static void log(final String msg){  if (DEBUG) {    System.out.println("MOVMap:" + msg);  }}  }
class C{  public Scanner build(Class<?> type){  Scanner scanner=get(type);  if (scanner == null) {    scanner=new Entry(type);    put(type,scanner);  }  return scanner;}  }
class C{  protected ModbusResponse readResponseIn() throws ModbusIOException {  boolean done;  ModbusResponse response;  int dlength;  try {    do {synchronized (byteInputStream) {        int uid=readByte();        if (uid != -1) {          int fc=readByte();          byteInputOutputStream.reset();          byteInputOutputStream.writeByte(uid);          byteInputOutputStream.writeByte(fc);          response=ModbusResponse.createModbusResponse(fc);          response.setHeadless();          getResponse(fc,byteInputOutputStream);          dlength=byteInputOutputStream.size() - 2;          logger.debug("Response: {}",ModbusUtil.toHex(byteInputOutputStream.getBuffer(),0,dlength + 2));          byteInputStream.reset(inBuffer,dlength);          int[] crc=ModbusUtil.calculateCRC(inBuffer,0,dlength);          if (ModbusUtil.unsignedByteToInt(inBuffer[dlength]) != crc[0] && ModbusUtil.unsignedByteToInt(inBuffer[dlength + 1]) != crc[1]) {            logger.debug("CRC should be {}, {}",crc[0],crc[1]);            throw new IOException("CRC Error in received frame: " + dlength + " bytes: "+ ModbusUtil.toHex(byteInputStream.getBuffer(),0,dlength));          }        } else {          throw new IOException("Error reading response");        }        byteInputStream.reset(inBuffer,dlength);        response.readFrom(byteInputStream);        done=true;      }    } while (!done);    return response;  } catch (  IOException ex) {    throw new ModbusIOException("I/O exception - failed to read response for request [%s] - %s",ModbusUtil.toHex(lastRequest),ex.getMessage());  }}  }
class C{  public Boolean isPresent(Predicate<ClusterProcess> filter){  return getOne(filter).isPresent();}  }
class C{  public void assertType(String typeName,int typeId){  if (!checkType(typeName,typeId)) {    throw new LogicException(typeId + " is not a " + typeName);  }}  }
class C{  public static String[] values(){  return ALL_VALUES;}  }
class C{  public boolean isCostImmediate(){  Object oo=get_Value(COLUMNNAME_IsCostImmediate);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void addFinalSample(){  addSample();  sPreviousBytes=-1;}  }
class C{  public double noise(double x,double y,double z,double frequency,double amplitude,boolean normalized){  double result=0;  double amp=1;  double freq=1;  double max=0;  x*=this.xScale;  y*=this.yScale;  z*=this.zScale;  for (  NoiseGenerator octave : this.octaves) {    result+=octave.noise(x * freq,y * freq,z * freq) * amp;    max+=amp;    freq*=frequency;    amp*=amplitude;  }  if (normalized) {    result/=max;  }  return result;}  }
class C{  public static String[] toStringArray(String[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=String.valueOf(array[i]);  }  return result;}  }
class C{  public void markDead(){  alive=false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public T valign(String value){  return attr("valign",value);}  }
class C{  public boolean isRule(final String symbol){  return ((symbol != null) && (RULES.contains(symbol.toLowerCase(Locale.ENGLISH))));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.320 -0500",hash_original_method="92F46C968D6DA82FFBC09248C72F0C8C",hash_generated_method="39739D2446632EC7009AA1DE60DF6229") public void drawTextRun(CharSequence text,int start,int end,int contextStart,int contextEnd,float x,float y,int dir,Paint paint){  if (text == null) {    throw new NullPointerException("text is null");  }  if (paint == null) {    throw new NullPointerException("paint is null");  }  if ((start | end | end - start | text.length() - end) < 0) {    throw new IndexOutOfBoundsException();  }  int flags=dir == 0 ? 0 : 1;  if (text instanceof String || text instanceof SpannedString || text instanceof SpannableString) {    native_drawTextRun(mNativeCanvas,text.toString(),start,end,contextStart,contextEnd,x,y,flags,paint.mNativePaint);  } else   if (text instanceof GraphicsOperations) {    ((GraphicsOperations)text).drawTextRun(this,start,end,contextStart,contextEnd,x,y,flags,paint);  } else {    int contextLen=contextEnd - contextStart;    int len=end - start;    char[] buf=TemporaryBuffer.obtain(contextLen);    TextUtils.getChars(text,contextStart,contextEnd,buf,0);    native_drawTextRun(mNativeCanvas,buf,start - contextStart,len,0,contextLen,x,y,flags,paint.mNativePaint);    TemporaryBuffer.recycle(buf);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected String loadDocumentDetails(){  MPPOrder order=(MPPOrder)getPO();  setDateDoc(order.getDateOrdered());  return STATUS_Posted;}  }
class C{  public static TextHitInfo trailing(int charIndex){  return new TextHitInfo(charIndex,false);}  }
class C{  @Override public Object function(final Object[] arguments){  editor.onSelectionChanged();  return null;}  }
class C{  private int endCheckIf(){  Node th, el;  int rv=END_UNREACHED;  th=next;  el=((Jump)this).target;  rv=th.endCheck();  if (el != null)   rv|=el.endCheck(); else   rv|=END_DROPS_OFF;  return rv;}  }
class C{  private void loadMoreData(){  Region<Integer,String> fooRegion=getCache().getRegion("fooRegion");  for (int i=this.dataStart; i < this.dataEnd; ++i) {    fooRegion.put(i,Integer.toString(i));  }  Region<Integer,String> barRegion=getCache().getRegion("barRegion");  for (int i=this.dataStart; i < this.dataEnd; ++i) {    barRegion.put(i,Integer.toString(i));  }  this.dataStart+=DATA_INCREMENT;  this.dataEnd+=DATA_INCREMENT;}  }
class C{  @Override public boolean isTrusted(){  return sources.contains(CertificateSourceType.TRUSTED_LIST) || sources.contains(CertificateSourceType.TRUSTED_STORE);}  }
class C{  void compileBatch(String[] files,boolean isMake) throws ClassNotFoundException {  try {    JavaCompilerUtil compiler=JavaCompilerUtil.create(getClassLoader());    compiler.setClassDir(_classDir);    compiler.setSourceDir(_sourceDir);    if (_encoding != null)     compiler.setEncoding(_encoding);    compiler.setArgs(_args);    compiler.setCompileParent(!isMake);    compiler.setSourceExtension(_sourceExt);    if (_compiler != null)     compiler.setCompiler(_compiler);    compiler.compileBatch(files);  } catch (  Exception e) {    getClassLoader().addDependency(AlwaysModified.create());    throw new CompileClassNotFound(e);  }}  }
class C{  public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory){  this(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory,defaultHandler);}  }
class C{  private static boolean hasMoreFlags(String[] args,int start,Option[] templates){  for (int i=start; i < args.length; i++) {    Option template=findTemplate(args[i],templates);    if (((template == null) || (!Type.LIST.equals(template.getType())))) {      return true;    } else {      if (i == (args.length - 1)) {        break;      }    }  }  return false;}  }
class C{  public DataUri(String contentType,String text){  this(contentType,null,text);}  }
class C{  public void testConstructorSignBytesNegative2(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15};  int aSign=-1;  byte rBytes[]={-1,11,-57,-101,1,75,-90,-46,-92,-4,15};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public Date inc(){  serialNumber++;  checkSerialNumber();  return this;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.PARAMETERIZED_TYPE__PARAMETER:    return ((InternalEList<?>)getParameter()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public AppConfiguration(){  super();}  }
class C{  private void createDO() throws Exception {  int noMoves=0;  String info="";  MClient client=null;  MDDOrder order=null;  int M_Warehouse_ID=0;  int M_WarehouseSource_ID=0;  MWarehouse whSource=null;  MWarehouse wh=null;  X_T_Replenish[] replenishs=getReplenish("M_WarehouseSource_ID IS NOT NULL");  for (  X_T_Replenish replenish : replenishs) {    if (whSource == null || whSource.getM_WarehouseSource_ID() != replenish.getM_WarehouseSource_ID())     whSource=MWarehouse.get(getCtx(),replenish.getM_WarehouseSource_ID());    if (wh == null || wh.getM_Warehouse_ID() != replenish.getM_Warehouse_ID())     wh=MWarehouse.get(getCtx(),replenish.getM_Warehouse_ID());    if (client == null || client.getAD_Client_ID() != whSource.getAD_Client_ID())     client=MClient.get(getCtx(),whSource.getAD_Client_ID());    if (order == null || M_WarehouseSource_ID != replenish.getM_WarehouseSource_ID() || M_Warehouse_ID != replenish.getM_Warehouse_ID()) {      M_WarehouseSource_ID=replenish.getM_WarehouseSource_ID();      M_Warehouse_ID=replenish.getM_Warehouse_ID();      order=new MDDOrder(getCtx(),0,get_TrxName());      order.setC_DocType_ID(p_C_DocType_ID);      order.setDescription(Msg.getMsg(getCtx(),"Replenishment") + ": " + whSource.getName()+ "->"+ wh.getName());      order.setAD_Org_ID(whSource.getAD_Org_ID());      MOrg orgTrx=MOrg.get(getCtx(),wh.getAD_Org_ID());      order.setAD_OrgTrx_ID(orgTrx.getAD_Org_ID());      int C_BPartner_ID=orgTrx.getLinkedC_BPartner_ID(get_TrxName());      if (C_BPartner_ID == 0)       throw new AdempiereUserError(Msg.translate(getCtx(),"C_BPartner_ID") + " @FillMandatory@ ");      MBPartner bp=new MBPartner(getCtx(),C_BPartner_ID,get_TrxName());      order.setBPartner(bp);      order.setDateOrdered(new Timestamp(System.currentTimeMillis()));      order.setDeliveryRule(MDDOrder.DELIVERYRULE_Availability);      order.setDeliveryViaRule(MDDOrder.DELIVERYVIARULE_Delivery);      order.setPriorityRule(MDDOrder.PRIORITYRULE_Medium);      order.setIsInDispute(false);      order.setIsApproved(false);      order.setIsDropShip(false);      order.setIsDelivered(false);      order.setIsInTransit(false);      order.setIsPrinted(false);      order.setIsSelected(false);      order.setIsSOTrx(false);      MWarehouse[] whsInTransit=MWarehouse.getForOrg(getCtx(),whSource.getAD_Org_ID());      for (      MWarehouse whInTransit : whsInTransit) {        if (whInTransit.isInTransit())         order.setM_Warehouse_ID(whInTransit.getM_Warehouse_ID());      }      if (order.getM_Warehouse_ID() == 0)       throw new AdempiereUserError("Warehouse inTransit is @FillMandatory@ ");      if (!order.save())       return;      log.fine(order.toString());      noMoves++;      info+=" - " + order.getDocumentNo();    }    int M_LocatorTo_ID=wh.getDefaultLocator().getM_Locator_ID();    int M_Locator_ID=whSource.getDefaultLocator().getM_Locator_ID();    if (M_LocatorTo_ID == 0 || M_Locator_ID == 0)     throw new AdempiereUserError(Msg.translate(getCtx(),"M_Locator_ID") + " @FillMandatory@ ");    MDDOrderLine line=new MDDOrderLine(order);    line.setM_Product_ID(replenish.getM_Product_ID());    line.setQty(replenish.getQtyToOrder());    if (replenish.getQtyToOrder().compareTo(replenish.getQtyToOrder()) != 0)     line.setDescription("Total: " + replenish.getQtyToOrder());    line.setM_Locator_ID(M_Locator_ID);    line.setM_AttributeSetInstance_ID(0);    line.setM_LocatorTo_ID(M_LocatorTo_ID);    line.setM_AttributeSetInstanceTo_ID(0);    line.setIsInvoiced(false);    line.save();  }  if (replenishs.length == 0) {    m_info="No Source Warehouse";    log.warning(m_info);  } else {    m_info="#" + noMoves + info;    log.info(m_info);  }}  }
class C{  protected Map<URI,ExecutionWindow> waitForActiveWindows() throws InterruptedException {  Map<URI,ExecutionWindow> windows=Maps.newHashMap();  while (windows.isEmpty()) {    lock.lock();    try {      if (activeWindows.isEmpty() && enableInfiniteExecutionWindow == false) {        hasActiveWindows.await();      }      windows.putAll(activeWindows);      if (enableInfiniteExecutionWindow == true) {        return windows;      }    }  finally {      lock.unlock();    }  }  return windows;}  }
class C{  public boolean isSet(final OPTION option){  return options == null ? false : options.contains(option);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public MenuDefinition(String skey){  m_sKey=skey;  m_aMenuElements=new ArrayList();}  }
class C{  public static double erf(double x){  return (igamma(0.5,Math.pow(x,2.0)));}  }
class C{  public Integer onLoadData16(byte[] ioPage,int addr,int value,DebuggableMemory.AccessSource accessSource){  if (addr >= REGISTER_SCR_IBRC0 && addr < REGISTER_SCR_IBRC0 + NUM_SERIAL_IF * SERIAL_IF_OFFSET) {    int serialInterfaceNr=(addr - REGISTER_SCR_IBRC0) >> SERIAL_IF_OFFSET_BITS;    FrSerialInterface serialInterface=(FrSerialInterface)platform.getSerialInterfaces()[serialInterfaceNr];switch (addr - (serialInterfaceNr << SERIAL_IF_OFFSET_BITS)) {case REGISTER_SCR_IBRC0:      return (serialInterface.getScrIbcr() << 8) | serialInterface.getSmr();case REGISTER_SSR0:    return (serialInterface.getSsr() << 8) | serialInterface.getEscrIbsr();case REGISTER_RDR_TDR0:  return serialInterface.getRdr();case REGISTER_BGR10:return (serialInterface.getBgr1() << 8) | serialInterface.getBgr0();case REGISTER_ISMK0:return (serialInterface.getIsmk() << 8) | serialInterface.getIsba();case REGISTER_FCR10:return (serialInterface.getFcr1() << 8) | serialInterface.getFcr0();case REGISTER_FBYTE20:return (serialInterface.getFbyte2() << 8) | serialInterface.getFbyte1();}} else if (addr >= REGISTER_TMRLRA0_32 && addr < (REGISTER_TMRLRA0_32 + NUM_TIMER32 * TIMER32_OFFSET)) {int channel;channel=(addr - REGISTER_TMRLRA0_32) / TIMER32_OFFSET;addr-=(channel * TIMER32_OFFSET);channel+=NUM_TIMER;switch (addr) {case REGISTER_TMRLRA0_32:return (((FrReloadTimer32)platform.getProgrammableTimers()[channel]).getTmrlra() >> 16);case REGISTER_TMRLRA0_32 + 2:return (((FrReloadTimer32)platform.getProgrammableTimers()[channel]).getTmrlra() & 0xFFFF);case REGISTER_TMR0_32:return (((FrReloadTimer32)platform.getProgrammableTimers()[channel]).getTmr() >> 16);case REGISTER_TMR0_32 + 2:return (((FrReloadTimer32)platform.getProgrammableTimers()[channel]).getTmr() & 0xFFFF);case REGISTER_TMCSR0_32:return ((FrReloadTimer32)platform.getProgrammableTimers()[channel]).getTmcsr();default :stop("Warning: ignoring attempt to read 16-bit register in 32-bit Timer");}} else if ((addr >= REGISTER_EIRR0 && addr < (REGISTER_ELVR0 + 2)) || (addr >= REGISTER_EIRR1 && addr < (REGISTER_ELVR1 + 2))) {FrInterruptController interruptController=(FrInterruptController)platform.getInterruptController();int unit=0;if (addr >= REGISTER_EIRR1) {unit=1;addr-=(REGISTER_EIRR1 - REGISTER_EIRR0);}switch (addr) {case REGISTER_EIRR0:return ((interruptController.getEirr(unit) << 8) | interruptController.getEnir(unit));case REGISTER_ELVR0:return interruptController.getElvr(unit);}} else {switch (addr) {case REGISTER_TMRLRA0:return ((FrReloadTimer)platform.getProgrammableTimers()[0]).getTmrlra();case REGISTER_TMR0:return ((FrReloadTimer)platform.getProgrammableTimers()[0]).getTmr();case REGISTER_TMCSR0:return ((FrReloadTimer)platform.getProgrammableTimers()[0]).getTmcsr();case REGISTER_TMRLRA1:return ((FrReloadTimer)platform.getProgrammableTimers()[1]).getTmrlra();case REGISTER_TMR1:return ((FrReloadTimer)platform.getProgrammableTimers()[1]).getTmr();case REGISTER_TMCSR1:return ((FrReloadTimer)platform.getProgrammableTimers()[1]).getTmcsr();case REGISTER_TMRLRA2:return ((FrReloadTimer)platform.getProgrammableTimers()[2]).getTmrlra();case REGISTER_TMR2:return ((FrReloadTimer)platform.getProgrammableTimers()[2]).getTmr();case REGISTER_TMCSR2:return ((FrReloadTimer)platform.getProgrammableTimers()[2]).getTmcsr();case REGISTER_DIVR0:case REGISTER_DIVR1:case REGISTER_DIVR2:stop("Warning: reading DIVR registers by 16bit is not supported");}}if (logRegisterMessages) warn("Register 0x" + Format.asHex(addr,8) + ": Load16 is not supported yet");return null;}  }
class C{  public boolean isOnlyPassengerCars(){  for (  Car car : CarManager.instance().getByTrainDestinationList(this)) {    if (!car.isPassenger()) {      return false;    }  }  return true;}  }
class C{  public boolean importData(JComponent c,Transferable t){  HexEditor e=(HexEditor)c;  boolean imported=false;  DataFlavor flavor=getImportFlavor(t.getTransferDataFlavors(),e);  if (flavor != null) {    try {      Object data=t.getTransferData(flavor);      if (flavor.equals(DataFlavor.stringFlavor)) {        String text=(String)data;        byte[] bytes=text.getBytes();        e.replaceSelection(bytes);      }    } catch (    UnsupportedFlavorException ufe) {      ufe.printStackTrace();    }catch (    IOException ioe) {      ioe.printStackTrace();    }  }  return imported;}  }
class C{  public long dataSize(){  return dataSize;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  int s=info.length;  byte[] srcInfo=info;  byte[] newInfo=new byte[s];  for (int i=0; i < s; ++i)   newInfo[i]=srcInfo[i];  return new AttributeInfo(newCp,getName(),newInfo);}  }
class C{  public int put(Object value){  value=makePoolValue(value);  Integer index=indices.get(value);  if (index == null) {    index=pp;    indices.put(value,index);    pool=ArrayUtils.ensureCapacity(pool,pp);    pool[pp++]=value;    if (value instanceof Long || value instanceof Double) {      pool=ArrayUtils.ensureCapacity(pool,pp);      pool[pp++]=null;    }  }  return index.intValue();}  }
class C{  public static int startDownloadServiceIfRequired(Context context,PendingIntent notificationClient,Class<?> serviceClass) throws NameNotFoundException {  return DownloaderService.startDownloadServiceIfRequired(context,notificationClient,serviceClass);}  }
class C{  public Query orderBy(Order... orders){  if (immutable) {    return fork().orderBy(orders);  }  if (this.orders == null) {    this.orders=new ArrayList<>();  }  SquidUtilities.addAll(this.orders,orders);  invalidateCompileCache();  return this;}  }
class C{  public Vector(int capacity,int capacityIncrement){  if (capacity < 0) {    throw new IllegalArgumentException();  }  elementData=newElementArray(capacity);  elementCount=0;  this.capacityIncrement=capacityIncrement;}  }
class C{  public static void dumpWhenSysOutContains(String trigger){  System.setOut(wrapAndDumpWhenContains(System.out,trigger));}  }
class C{  public void writeStructEnd() throws TException {  lastFieldId_=lastField_.pop();}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public boolean isWin2003(){  return System.getProperty("os.name").indexOf("2003") >= 0;}  }
class C{  public static int findNextWordEndNTE(String s,int startIndex){  int i=startIndex;  for (; i < s.length(); i++) {    char currChar=s.charAt(i);    if (!(Character.isLetterOrDigit(currChar) || (getNteChars(currChar) != null))) {      return i;    }  }  return i;}  }
class C{  private void selectEntity(int en){  if (en != cen) {    clearAttacks();    refreshAll();  }  Client client=clientgui.getClient();  if ((ce() != null) && ce().isWeapOrderChanged()) {    client.sendEntityWeaponOrderUpdate(ce());  }  if (client.getGame().getEntity(en) != null) {    cen=en;    clientgui.setSelectedEntityNum(en);    if (null == ce().getPosition()) {      for (int nextId=client.getNextEntityNum(en); nextId != en; nextId=client.getNextEntityNum(nextId)) {        if (null != clientgui.getClient().getGame().getEntity(nextId).getPosition()) {          cen=nextId;          break;        }      }      if (null == ce().getPosition()) {        System.err.println("FiringDisplay: could not find " + "an on-board entity: " + en);        return;      }    }    target(null);    clientgui.getBoardView().highlight(ce().getPosition());    clientgui.getBoardView().select(null);    clientgui.getBoardView().cursor(null);    refreshAll();    cacheVisibleTargets();    if (!clientgui.bv.isMovingUnits() && !ce().isOffBoard()) {      clientgui.bv.centerOnHex(ce().getPosition());    }    clientgui.getMenuBar().setEntity(ce());    setTwistEnabled(ce().canChangeSecondaryFacing() && ce().getCrew().isActive());    setFlipArmsEnabled(ce().canFlipArms());    updateSearchlight();    setFireModeEnabled(true);    if (GUIPreferences.getInstance().getBoolean("FiringSolutions") && !ce().isOffBoard()) {      setFiringSolutions();    } else {      clientgui.getBoardView().clearFiringSolutionData();    }  } else {    System.err.println("TargetingPhaseDisplay: " + "tried to select non-existant entity: " + en);  }}  }
class C{  @Override public String toString(){  InternalDistributedSystem internalDS=InternalDistributedSystem.getAnyInstance();  String stringInfo="";  if (internalDS != null && internalDS.isConnected()) {    stringInfo="Add/update the alert definitions" + " to " + internalDS.getDistributedMember() + " from "+ this.getSender();  } else {    stringInfo="InternalDistributedSystem instance not found, " + "no connection with DistributedSystem.";  }  return stringInfo;}  }
class C{  public void close(){synchronized (mDiskCacheLock) {    if (mDiskLruCache != null) {      try {        if (!mDiskLruCache.isClosed()) {          mDiskLruCache.close();        }      } catch (      Throwable e) {        LogUtils.e(e.getMessage(),e);      }      mDiskLruCache=null;    }  }}  }
class C{  public long manhattanDistance(final int x,final int y,final int z){  return Math.abs((long)this.x - x) + Math.abs((long)this.y - y) + Math.abs((long)this.z - z);}  }
class C{  public boolean isEmpty(){  return this.compositeOutputStream.isEmpty();}  }
class C{  public DenseMatrix(int rows,int cols){  matrix=new double[rows][cols];}  }
class C{  public static int numOnes(int x){}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  mLastResponse=response;}  }
class C{  public int nextSetBit(final int i){  int x=i / 64;  if (x >= this.data.length)   return -1;  long w=this.data[x];  w>>>=(i % 64);  if (w != 0) {    return i + Long.numberOfTrailingZeros(w);  }  ++x;  for (; x < this.data.length; ++x) {    if (this.data[x] != 0) {      return x * 64 + Long.numberOfTrailingZeros(this.data[x]);    }  }  return -1;}  }
class C{  @GET @Path("/validate") @ApiOperation(value="Validate connection definition and return a list of available schemas as a suggestion") public ExpressionSuggestion validate(@ApiParam(value="the JDBC url") @QueryParam("url") String url,@ApiParam(value="the username") @QueryParam("username") String username,@ApiParam(value="the password") @QueryParam("password") String password,@ApiParam(value="the project if already defined") @QueryParam("projectId") String projectId){  Customer customer=DAOFactory.getDAOFactory().getDAO(Customer.class).readNotNull(userContext,userContext.getCustomerPk());  AccessRightsUtils.getInstance().checkRole(userContext,customer,Role.WRITE);  SimpleDatabaseManager manager=null;  try {    boolean useExistingDatabase=false;    Project rootProject=checkProject(projectId);    if (rootProject != null) {      if (url == null && username == null && password == null) {        useExistingDatabase=true;      } else       if (url != null && url.equals(rootProject.getDbUrl()) && username != null && username.equals(rootProject.getDbUser())) {        if (password == null || password.length() == 0) {          useExistingDatabase=true;        } else         if (password.equals(rootProject.getDbPassword())) {          useExistingDatabase=true;        }      } else       if (url == null || username == null || password == null) {        throw new APIException("invalid request, must specify {url,username,password}",false);      }    }    List<Schema> schemas=null;    if (useExistingDatabase) {      schemas=DatabaseServiceImpl.INSTANCE.getSchemas(rootProject);    } else {      manager=new SimpleDatabaseManager(url,username,password);      LazyDatabaseFactory factory=new LazyDatabaseFactory(manager);      Database database=factory.createDatabase();      schemas=database.getSchemas();    }    ExpressionSuggestion result=new ExpressionSuggestion();    List<String> schemaNames=new ArrayList<String>();    for (    Schema schema : schemas) {      if (!schema.isSystem()) {        schemaNames.add(schema.getName());      }    }    result.setDefinitions(schemaNames);    return result;  } catch (  ExecutionException|ScopeException e) {    throw new APIException(e.getMessage(),e,false);  } finally {    if (manager != null) {      manager.close();    }  }}  }
class C{  @Deprecated public ECKey(EncryptedData encryptedPrivateKey,byte[] pubKey,KeyCrypter keyCrypter){  this((byte[])null,pubKey);  this.keyCrypter=checkNotNull(keyCrypter);  this.encryptedPrivateKey=encryptedPrivateKey;}  }
class C{  public Matrix[] compute(Matrix loghyper,Matrix X,Matrix Xstar){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  final double it2=Math.exp(-2 * loghyper.get(0,0));  Matrix A=sumRows(Xstar.arrayTimes(Xstar));  A=addValue(A,1).times(it2);  Matrix B=X.times(Xstar.transpose());  B=addValue(B,1).times(it2);  return new Matrix[]{A,B};}  }
class C{  @Override public void apply(FaceletContext ctx,UIComponent parent) throws IOException {  for (int i=0; i < len; i++) {    this.children[i].apply(ctx,parent);  }}  }
class C{  public static void putKeyValuePair(final Environment environment,final Database database,final Integer key,final Integer value){  final Transaction transactionForAddingTestData=environment.beginTransaction(null,null);  database.put(transactionForAddingTestData,new DatabaseEntry(new ByteArrayConverterForInteger().toByteArray(key)),new DatabaseEntry(new ByteArrayConverterForInteger().toByteArray(value)));  transactionForAddingTestData.commit();}  }
class C{  public boolean isEmpty(){  boolean empty=false;  if ((null == m_value) || (null != m_invalidValue)) {    empty=true;  }  return empty;}  }
class C{  public int hashCode(){  return content.hashCode();}  }
class C{  public List<Versioned<V>> remove(K key){  while (true) {    List<Versioned<V>> items=map.get(key);synchronized (items) {      if (map.remove(key,items))       return items;    }  }}  }
class C{  public synchronized void disableObjectName(ObjectName objectName) throws IllegalArgumentException {  if (objectName == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(MBeanServerNotificationFilter.class.getName(),"disableObjectName",objectName);  if (selectedNames != null) {    if (selectedNames.size() != 0) {      selectedNames.remove(objectName);    }  }  if (deselectedNames != null) {    if (!(deselectedNames.contains(objectName))) {      deselectedNames.add(objectName);    }  }  RELATION_LOGGER.exiting(MBeanServerNotificationFilter.class.getName(),"disableObjectName");  return;}  }
class C{  public float lon(int x){  return x / (dotsPerDeg * lonCorr) + originLon;}  }
class C{  public void reset(){synchronized (simulation.state.schedule) {    if (stopper != null)     stopper.stop();    stopper=simulation.scheduleRepeatingImmediatelyAfter(this);  }  for (int x=0; x < selectedWrappers.size(); x++) {    LocationWrapper wrapper=((LocationWrapper)(selectedWrappers.get(x)));    wrapper.getFieldPortrayal().setSelected(wrapper,false);  }  selectedWrappers.clear();}  }
class C{  public WildcardTypeBuilder withLowerBounds(final Type... bounds){  this.lowerBounds=bounds;  return this;}  }
class C{  public int locking_scheme(){  String s=soot.PhaseOptions.getString(options,"locking-scheme");  if (s.equalsIgnoreCase("medium-grained"))   return locking_scheme_medium_grained;  if (s.equalsIgnoreCase("coarse-grained"))   return locking_scheme_coarse_grained;  if (s.equalsIgnoreCase("single-static"))   return locking_scheme_single_static;  if (s.equalsIgnoreCase("leave-original"))   return locking_scheme_leave_original;  throw new RuntimeException("Invalid value " + s + " of phase option locking-scheme");}  }
class C{  public PolyKernel(Instances data,int cacheSize,double exponent,boolean lowerOrder) throws Exception {  super();  setCacheSize(cacheSize);  setExponent(exponent);  setUseLowerOrder(lowerOrder);  buildKernel(data);}  }
class C{  public void checkBackBranch(Environment env,Statement loop,Vset vsEntry,Vset vsBack){  for (LocalMember f=locals; f != null; f=f.prev) {    if (f.isBlankFinal() && vsEntry.testVarUnassigned(f.number) && !vsBack.testVarUnassigned(f.number)) {      env.error(loop.where,"assign.to.blank.final.in.loop",f.getName());    }  }}  }
class C{  public synchronized void cancel(){  stage.getProgressTracker().cancel(task.getTaskId());}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  @Nonnull public BugInstance addMethod(XMethod xmethod){  addMethod(MethodAnnotation.fromXMethod(xmethod));  return this;}  }
class C{  public RectangularWindow(LatLng center,double deltaLat,double deltaLng){  this.setWindow(center,deltaLat,deltaLng);}  }
class C{  public static void sort(int[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public Builder includeRaw(boolean includeRaw){  this.includeRaw=includeRaw;  return this;}  }
class C{  void unregisterInitiators(List<PortInfo> initiatorPortInfo) throws VPlexApiException {  List<VPlexInitiatorInfo> initiatorInfoList=new ArrayList<VPlexInitiatorInfo>();  findInitiators(initiatorPortInfo,initiatorInfoList);  if (initiatorInfoList.size() != initiatorPortInfo.size()) {    throw VPlexApiException.exceptions.couldNotFindAllInitiatorsToUnregister();  }  StringBuilder argBuilder=new StringBuilder();  for (  VPlexInitiatorInfo initiatorInfo : initiatorInfoList) {    if (!initiatorInfo.getName().equals(initiatorInfo.getRegistrationName())) {      continue;    }    s_logger.info("Unregister initiator {}",initiatorInfo.getName());    if (argBuilder.length() != 0) {      argBuilder.append(",");    }    argBuilder.append(initiatorInfo.getPath());  }  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_UNREGISTER_INITIATORS);    s_logger.info("Unregister initiators URI is {}",requestURI.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_I,argBuilder.toString());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Uregister initiators POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Unregister initiators response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Unregister initiators completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.unregisterInitiatorsFailureStatus(String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Initiators succesfully unregistered");  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedUnregisterInitiators(e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  @Override protected byte[] alloc(int bucketedSize){  return new byte[bucketedSize];}  }
class C{  public String modelChange(PO po,int type) throws Exception {  if (po.get_TableName().equals("C_Order") && type == TYPE_CHANGE) {    MOrder order=(MOrder)po;    log.info(po.toString());  }  return null;}  }
class C{  public boolean igfsNode(ClusterNode node){  return IgfsUtils.isIgfsNode(node,cfg.getName());}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiTextUI();  return MultiLookAndFeel.createUIs(mui,((MultiTextUI)mui).uis,a);}  }
class C{  public BaseTopicProperty(final String topic){  this.topic=new SimpleStringProperty(topic);}  }
class C{  public static Complex multiply(double a,Complex c){  return new Complex(a * c.real,a * c.imag);}  }
class C{  public void moveRandomly(SchellingSpace world){  Coordinate coord=(Coordinate)location.geometry.getCoordinate().clone();  Random rand=new Random();  double xinc=moveDist * (rand.nextDouble() - .5), yinc=moveDist * (rand.nextDouble() - .5);  coord.x+=xinc;  coord.y+=yinc;  while (!world.world.isInsideUnion(coord)) {    coord.x-=xinc;    coord.y-=yinc;    xinc=moveDist * (rand.nextDouble() - .5);    yinc=moveDist * (rand.nextDouble() - .5);    coord.x+=xinc;    coord.y+=yinc;  }  location.geometry.apply(AffineTransformation.translationInstance(xinc,yinc));  if (!region.geometry.contains(location.geometry)) {    region.residents.remove(this);    determineCurrentRegion(region);    region.residents.add(this);  }  numMoves++;}  }
class C{  public void hlt(AArch64ExceptionCode exceptionCode){  super.hlt(exceptionCode.encoding);}  }
class C{  public void writePrincipal(CCacheOutputStream cos) throws IOException {  cos.write32(nameType);  cos.write32(nameStrings.length);  byte[] realmBytes=null;  realmBytes=nameRealm.toString().getBytes();  cos.write32(realmBytes.length);  cos.write(realmBytes,0,realmBytes.length);  byte[] bytes=null;  for (int i=0; i < nameStrings.length; i++) {    bytes=nameStrings[i].getBytes();    cos.write32(bytes.length);    cos.write(bytes,0,bytes.length);  }}  }
class C{  public static Properties filterProperties(Properties properties,String prefix){  Properties ret=new Properties();  if (properties != null && prefix != null) {    prefix=prefix.endsWith(".") ? prefix : prefix + ".";    for (    String name : properties.stringPropertyNames()) {      String newName=removeLeadingDots(name);      if (newName.startsWith(prefix)) {        newName=newName.length() > prefix.length() ? newName.substring(prefix.length()) : "";        newName=removeLeadingDots(newName);        if (newName.length() > 0) {          ret.setProperty(newName,properties.getProperty(name));        }      }    }  }  return ret;}  }
class C{  public int indexOf(String subString,int start){  if (start < 0) {    start=0;  }  int subCount=subString.count;  if (subCount > 0) {    if (subCount + start > count) {      return -1;    }    char[] target=subString.value;    int subOffset=subString.offset;    char firstChar=target[subOffset];    int end=subOffset + subCount;    while (true) {      int i=indexOf(firstChar,start);      if (i == -1 || subCount + i > count) {        return -1;      }      int o1=offset + i, o2=subOffset;      while (++o2 < end && value[++o1] == target[o2]) {      }      if (o2 == end) {        return i;      }      start=i + 1;    }  }  return start < count ? start : count;}  }
class C{  private Vset checkCommon(Environment env,Context ctx,Vset vset,Hashtable exp){  ClassDeclaration superClass=ctx.field.getClassDefinition().getSuperClass();  if (superClass == null) {    env.error(where,"undef.var",idSuper);    type=Type.tError;    return vset;  }  vset=super.checkValue(env,ctx,vset,exp);  type=superClass.getType();  return vset;}  }
class C{  public IssueMatcher severity(Severity expectedSeverity){  return addEqualsMatcher("severity",expectedSeverity,null);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof SimpleHistogramBin)) {    return false;  }  SimpleHistogramBin that=(SimpleHistogramBin)obj;  if (this.lowerBound != that.lowerBound) {    return false;  }  if (this.upperBound != that.upperBound) {    return false;  }  if (this.includeLowerBound != that.includeLowerBound) {    return false;  }  if (this.includeUpperBound != that.includeUpperBound) {    return false;  }  if (this.itemCount != that.itemCount) {    return false;  }  return true;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY,int overX,int overY,long time){  if (mFlywheel && !isFinished()) {    float oldVelocityX=mScrollerX.mCurrVelocity;    float oldVelocityY=mScrollerY.mCurrVelocity;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mScrollerX.fling(startX,velocityX,minX,maxX,overX,time);  mScrollerY.fling(startY,velocityY,minY,maxY,overY,time);}  }
class C{  @LargeTest public void testPreviewWithEndAudioTrack() throws Exception {  final String imageItemFilename1=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final String videoItemFileName=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final String imageItemFilename2=INPUT_FILE_PATH + "IMG_640x480.jpg";  final String audioFilename=INPUT_FILE_PATH + "AMRNB_8KHz_12.2Kbps_m_1_17.3gp";  boolean flagForException=false;  previewStart=false;  previewStop=false;  final MediaImageItem mediaImageItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",imageItemFilename1,7000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem1);  final MediaVideoItem mediaVideoItem=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",videoItemFileName,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem.setExtractBoundaries(1000,8000);  mVideoEditor.addMediaItem(mediaVideoItem);  final MediaImageItem mediaImageItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m3",imageItemFilename2,7000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem2);  final AudioTrack audioTrack=mVideoEditorHelper.createAudio(mVideoEditor,"a1",audioFilename);  mVideoEditor.addAudioTrack(audioTrack);  List<AudioTrack> audioList=mVideoEditor.getAllAudioTracks();  assertEquals("Audio Track List size",1,audioList.size());  assertEquals("Audio Track",audioTrack,audioList.get(0));  mVideoEditor.setAspectRatio(MediaProperties.ASPECT_RATIO_4_3);  validatePreviewProgress(10000,-1,false,mVideoEditor.getDuration());}  }
class C{  private void addGetterCall(@NonNull MethodSpec getter,@NonNull String format){  addArg(format + ".",RaveWriter.VALIDATE_METHOD_ARG_NAME,true);  addArg(NAMES + "()",getter,false);}  }
class C{  public static Document createDocument(){  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=factory.newDocumentBuilder();    return builder.newDocument();  } catch (  ParserConfigurationException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isInside(int x,int y){  boolean leftEdge=(edgeFlags & EDGE_LEFT) > 0;  boolean rightEdge=(edgeFlags & EDGE_RIGHT) > 0;  boolean topEdge=(edgeFlags & EDGE_TOP) > 0;  boolean bottomEdge=(edgeFlags & EDGE_BOTTOM) > 0;  if ((x >= this.x || (leftEdge && x <= this.x + this.width)) && (x < this.x + this.width || (rightEdge && x >= this.x)) && (y >= this.y || (topEdge && y <= this.y + this.height))&& (y < this.y + this.height || (bottomEdge && y >= this.y))) {    return true;  } else {    return false;  }}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  s.defaultReadObject();  this.s=new Segment();}  }
class C{  public static byte[] decode(byte[] input){  return Base64.decode(input,BASE64_FLAG);}  }
class C{  public int indexOf(CstBaseMethodRef ref){  if (ref == null) {    throw new NullPointerException("ref == null");  }  throwIfNotPrepared();  MethodIdItem item=methodIds.get(ref);  if (item == null) {    throw new IllegalArgumentException("not found");  }  return item.getIndex();}  }
class C{  public boolean shouldOverlayBottomBar(){  if (mPositionConfiguration == null) {    updatePositionConfiguration();  }  if (mPositionConfiguration == null) {    return false;  }  return mPositionConfiguration.mBottomBarOverlay;}  }
class C{  public NotificationChain basicSetSuperScope(ExecutionScope newSuperScope,NotificationChain msgs){  ExecutionScope oldSuperScope=superScope;  superScope=newSuperScope;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_SCOPE__SUPER_SCOPE,oldSuperScope,newSuperScope);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private static Coordinate[] densifyPoints(Coordinate[] pts,double distanceTolerance,PrecisionModel precModel){  LineSegment seg=new LineSegment();  CoordinateList coordList=new CoordinateList();  for (int i=0; i < pts.length - 1; i++) {    seg.p0=pts[i];    seg.p1=pts[i + 1];    coordList.add(seg.p0,false);    double len=seg.getLength();    int densifiedSegCount=(int)(len / distanceTolerance) + 1;    if (densifiedSegCount > 1) {      double densifiedSegLen=len / densifiedSegCount;      for (int j=1; j < densifiedSegCount; j++) {        double segFract=(j * densifiedSegLen) / len;        Coordinate p=seg.pointAlong(segFract);        precModel.makePrecise(p);        coordList.add(p,false);      }    }  }  coordList.add(pts[pts.length - 1],false);  return coordList.toCoordinateArray();}  }
class C{  public double eval(double params[]){  return (params[0] * params[0] * params[0]);}  }
class C{  public static <E>Iterator<E> toIterator(Enumeration<E> enumeration){  return new EnumerationIterator<E>(enumeration);}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (!(other instanceof HandShake))   return false;  final HandShake that=(HandShake)other;  if (this.id.isSameDSMember(that.id) && this.code == that.code) {    return true;  } else {    return false;  }}  }
class C{  public static boolean openMagnetOrTorrent(final String userText,ActionInvocationSource invokedFrom){  if (userText.startsWith("magnet:?xt=urn:btih")) {    GUIMediator.instance().openTorrentURI(userText,true);    UXStats.instance().log(invokedFrom == ActionInvocationSource.FROM_FILE_MENU ? UXAction.DOWNLOAD_MAGNET_URL_FROM_FILE_ACTION : UXAction.DOWNLOAD_MAGNET_URL_FROM_SEARCH_FIELD);    return true;  } else   if (userText.matches(".*youtube.com.*") || userText.matches(".*youtu.be.*") || userText.matches(".*y2u.be.*")) {    UXStats.instance().log(invokedFrom == ActionInvocationSource.FROM_FILE_MENU ? UXAction.DOWNLOAD_CLOUD_URL_FROM_FILE_ACTION : UXAction.DOWNLOAD_CLOUD_URL_FROM_SEARCH_FIELD);    return false;  } else   if (userText.matches(".*soundcloud.com.*")) {    String soundCloudURL=userText.replace("soundcloud.com/#","soundcloud.com/");    GUIMediator.instance().openSoundcloudTrackUrl(soundCloudURL,null);    UXStats.instance().log(invokedFrom == ActionInvocationSource.FROM_FILE_MENU ? UXAction.DOWNLOAD_CLOUD_URL_FROM_FILE_ACTION : UXAction.DOWNLOAD_CLOUD_URL_FROM_SEARCH_FIELD);    return true;  } else   if (userText.startsWith("http://") || (userText.startsWith("https://"))) {    GUIMediator.instance().openTorrentURI(userText,true);    UXStats.instance().log(invokedFrom == ActionInvocationSource.FROM_FILE_MENU ? UXAction.DOWNLOAD_TORRENT_URL_FROM_FILE_ACTION : UXAction.DOWNLOAD_TORRENT_URL_FROM_SEARCH_FIELD);    return true;  } else {    File file=new File(userText);    if (isFileSystemPath(file)) {      if (file.exists()) {        GUIMediator.instance().openTorrentFile(file,true);        return true;      } else {      }    }  }  return false;}  }
class C{  public WbXmlAttributeValueDef locateAttributeValue(byte pageCode,byte token){  return attrValuesByToken.get(new WbXmlToken(pageCode,token));}  }
class C{  private void fireAdded(final RPObject object,final String slotName,final RPObject sobject){  fireAdded(sobject);  listener.onSlotAdded(object,slotName,sobject);  userListener.onSlotAdded(object,slotName,sobject);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected float[] parseKeyTimes(){  String keyTimesString=element.getAttributeNS(null,SVG_KEY_TIMES_ATTRIBUTE);  int len=keyTimesString.length();  if (len == 0) {    return null;  }  ArrayList keyTimes=new ArrayList(7);  int i=0, start=0, end;  char c;  outer:   while (i < len) {    while (keyTimesString.charAt(i) == ' ') {      i++;      if (i == len) {        break outer;      }    }    start=i++;    if (i != len) {      c=keyTimesString.charAt(i);      while (c != ' ' && c != ';') {        i++;        if (i == len) {          break;        }        c=keyTimesString.charAt(i);      }    }    end=i++;    try {      float keyTime=Float.parseFloat(keyTimesString.substring(start,end));      keyTimes.add(new Float(keyTime));    } catch (    NumberFormatException nfEx) {      throw new BridgeException(ctx,element,nfEx,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_KEY_TIMES_ATTRIBUTE,keyTimesString});    }  }  len=keyTimes.size();  float[] ret=new float[len];  for (int j=0; j < len; j++) {    ret[j]=((Float)keyTimes.get(j)).floatValue();  }  return ret;}  }
class C{  public void destroy(){  this.isInitialized=false;  this.isFinished=false;  this.firstNode=null;  this.tailLength=0;  this.firstNodeHeight=-1;}  }
class C{  private void checkMaterialPolicy(MInventoryLine line,BigDecimal qtyDiff){  int no=MInventoryLineMA.deleteInventoryLineMA(line.getM_InventoryLine_ID(),get_TrxName());  if (no > 0)   log.config("Delete old #" + no);  boolean needSave=false;  if (line.getM_AttributeSetInstance_ID() == 0) {    MProduct product=MProduct.get(getCtx(),line.getM_Product_ID());    if (qtyDiff.signum() > 0) {      MAttributeSetInstance asi=null;      MStorage[] storages=MStorage.getWarehouse(getCtx(),getM_Warehouse_ID(),line.getM_Product_ID(),0,null,MClient.MMPOLICY_FiFo.equals(product.getMMPolicy()),false,line.getM_Locator_ID(),get_TrxName());      for (      MStorage storage : storages) {        if (storage.getQtyOnHand().signum() < 0) {          asi=new MAttributeSetInstance(getCtx(),storage.getM_AttributeSetInstance_ID(),get_TrxName());          break;        }      }      if (asi == null) {        asi=MAttributeSetInstance.create(getCtx(),product,get_TrxName());      }      line.setM_AttributeSetInstance_ID(asi.getM_AttributeSetInstance_ID());      needSave=true;    } else {      String MMPolicy=product.getMMPolicy();      MStorage[] storages=MStorage.getWarehouse(getCtx(),getM_Warehouse_ID(),line.getM_Product_ID(),0,null,MClient.MMPOLICY_FiFo.equals(MMPolicy),true,line.getM_Locator_ID(),get_TrxName());      BigDecimal qtyToDeliver=qtyDiff.negate();      for (      MStorage storage : storages) {        if (storage.getQtyOnHand().compareTo(qtyToDeliver) >= 0) {          MInventoryLineMA ma=new MInventoryLineMA(line,storage.getM_AttributeSetInstance_ID(),qtyToDeliver);          ma.saveEx();          qtyToDeliver=Env.ZERO;          log.fine(ma + ", QtyToDeliver=" + qtyToDeliver);        } else {          MInventoryLineMA ma=new MInventoryLineMA(line,storage.getM_AttributeSetInstance_ID(),storage.getQtyOnHand());          ma.saveEx();          qtyToDeliver=qtyToDeliver.subtract(storage.getQtyOnHand());          log.fine(ma + ", QtyToDeliver=" + qtyToDeliver);        }        if (qtyToDeliver.signum() == 0)         break;      }      if (qtyToDeliver.signum() != 0) {        MAttributeSetInstance asi=MAttributeSetInstance.create(getCtx(),product,get_TrxName());        int M_AttributeSetInstance_ID=asi.getM_AttributeSetInstance_ID();        MInventoryLineMA ma=new MInventoryLineMA(line,M_AttributeSetInstance_ID,qtyToDeliver);        ma.saveEx();        log.fine("##: " + ma);      }    }    if (needSave) {      line.saveEx();    }  }}  }
class C{  public RegistrationPage(final PageParameters params){  super(params);  add(new FeedbackPanel(FEEDBACK)).add(new RegisterPanel(CART_VIEW,false)).addOrReplace(new StandardFooter(FOOTER)).addOrReplace(new StandardHeader(HEADER)).addOrReplace(new ServerSideJs("serverSideJs")).addOrReplace(new HeaderMetaInclude("headerInclude"));}  }
class C{  public static Date parse(String str){  Matcher m=DATE_PATTERN.matcher(str);  if (!m.matches()) {    throw new IllegalArgumentException("Illegal date: " + str);  }  int year=Integer.parseInt(m.group(1));  int month=Integer.parseInt(m.group(2));  int dom=Integer.parseInt(m.group(3));  int hour=Integer.parseInt(m.group(4));  int minute=Integer.parseInt(m.group(5));  int second=Integer.parseInt(m.group(6));  String msStr=m.group(7);  if (msStr == null) {    msStr="000";  } else {    while (msStr.length() < 3) {      msStr+='0';    }  }  int ms=Integer.parseInt(msStr);  String tz=m.group(8);  if ("Z".equalsIgnoreCase(tz)) {    tz="GMT";  } else {    tz=TZ_PATTERN.matcher(tz).replaceAll("GMT$1$2:$3");  }  Calendar cal=GregorianCalendar.getInstance(TimeZone.getTimeZone(tz));  cal.clear();  cal.set(year,month - 1,dom,hour,minute,second);  cal.set(Calendar.MILLISECOND,ms);  return cal.getTime();}  }
class C{  public boolean canGetFloat(){  return canGet(float.class);}  }
class C{  public void copyNodeMetaData(ASTNode other){  if (other.metaDataMap == null) {    return;  }  if (metaDataMap == null) {    metaDataMap=new ListHashMap();  }  metaDataMap.putAll(other.metaDataMap);}  }
class C{  private void run(){  config.network().setInputFile(NET_FILE);  config.plans().setInputFile(JOINT_PLANS_10PCT);  config.plans().setSubpopulationAttributeName(PatnaUtils.SUBPOP_ATTRIBUTE);  config.plans().setInputPersonAttributeFile(JOINT_PERSONS_ATTRIBUTE_10PCT);  config.qsim().setVehiclesSource(VehiclesSource.modeVehicleTypesFromVehiclesData);  config.vehicles().setVehiclesFile(JOINT_VEHICLES_10PCT);  config.controler().setFirstIteration(0);  config.controler().setLastIteration(200);  config.controler().setWriteEventsInterval(100);  config.controler().setWritePlansInterval(100);  config.counts().setInputFile(JOINT_COUNTS_10PCT);  config.counts().setWriteCountsInterval(100);  config.counts().setCountsScaleFactor(1 / OuterCordonUtils.SAMPLE_SIZE);  config.counts().setOutputFormat("all");  config.qsim().setFlowCapFactor(OuterCordonUtils.SAMPLE_SIZE);  config.qsim().setStorageCapFactor(3 * OuterCordonUtils.SAMPLE_SIZE);  config.qsim().setEndTime(30 * 3600);  config.qsim().setLinkDynamics(LinkDynamics.PassingQ.toString());  config.qsim().setMainModes(PatnaUtils.ALL_MAIN_MODES);  config.qsim().setSnapshotStyle(SnapshotStyle.queue);{    StrategySettings expChangeBeta=new StrategySettings();    expChangeBeta.setStrategyName(DefaultPlanStrategiesModule.DefaultSelector.ChangeExpBeta.name());    expChangeBeta.setSubpopulation(PatnaUserGroup.urban.name());    expChangeBeta.setWeight(0.7);    config.strategy().addStrategySettings(expChangeBeta);    StrategySettings reRoute=new StrategySettings();    reRoute.setStrategyName(DefaultStrategy.ReRoute.name());    reRoute.setSubpopulation(PatnaUserGroup.urban.name());    reRoute.setWeight(0.15);    config.strategy().addStrategySettings(reRoute);    StrategySettings timeAllocationMutator=new StrategySettings();    timeAllocationMutator.setStrategyName(DefaultStrategy.TimeAllocationMutator.name());    timeAllocationMutator.setSubpopulation(PatnaUserGroup.urban.name());    timeAllocationMutator.setWeight(0.05);    config.strategy().addStrategySettings(timeAllocationMutator);    config.timeAllocationMutator().setAffectingDuration(false);    config.timeAllocationMutator().setMutationRange(7200.);    StrategySettings modeChoice=new StrategySettings();    modeChoice.setStrategyName(DefaultStrategy.ChangeTripMode.name());    modeChoice.setSubpopulation(PatnaUserGroup.urban.name());    modeChoice.setWeight(0.1);    config.strategy().addStrategySettings(modeChoice);    config.changeMode().setModes(PatnaUtils.URBAN_ALL_MODES.toArray(new String[PatnaUtils.URBAN_ALL_MODES.size()]));  }{    StrategySettings expChangeBeta=new StrategySettings();    expChangeBeta.setStrategyName(DefaultPlanStrategiesModule.DefaultSelector.ChangeExpBeta.name());    expChangeBeta.setSubpopulation(PatnaUserGroup.commuter.name());    expChangeBeta.setWeight(0.85);    config.strategy().addStrategySettings(expChangeBeta);    StrategySettings reRoute=new StrategySettings();    reRoute.setStrategyName(DefaultStrategy.ReRoute.name());    reRoute.setSubpopulation(PatnaUserGroup.commuter.name());    reRoute.setWeight(0.15);    config.strategy().addStrategySettings(reRoute);  }{    StrategySettings expChangeBeta=new StrategySettings();    expChangeBeta.setStrategyName(DefaultPlanStrategiesModule.DefaultSelector.ChangeExpBeta.name());    expChangeBeta.setSubpopulation(PatnaUserGroup.through.name());    expChangeBeta.setWeight(0.85);    config.strategy().addStrategySettings(expChangeBeta);    StrategySettings reRoute=new StrategySettings();    reRoute.setStrategyName(DefaultStrategy.ReRoute.name());    reRoute.setSubpopulation(PatnaUserGroup.through.name());    reRoute.setWeight(0.15);    config.strategy().addStrategySettings(reRoute);  }  config.strategy().setFractionOfIterationsToDisableInnovation(0.8);  config.plans().setRemovingUnneccessaryPlanAttributes(true);  config.vspExperimental().addParam("vspDefaultsCheckingLevel","abort");  config.vspExperimental().setWritingOutputEvents(true);{    ActivityParams workAct=new ActivityParams("work");    workAct.setTypicalDuration(8 * 3600);    config.planCalcScore().addActivityParams(workAct);    ActivityParams homeAct=new ActivityParams("home");    homeAct.setTypicalDuration(12 * 3600);    config.planCalcScore().addActivityParams(homeAct);    ActivityParams edu=new ActivityParams("educational");    edu.setTypicalDuration(7 * 3600);    config.planCalcScore().addActivityParams(edu);    ActivityParams soc=new ActivityParams("social");    soc.setTypicalDuration(5 * 3600);    config.planCalcScore().addActivityParams(soc);    ActivityParams oth=new ActivityParams("other");    oth.setTypicalDuration(5 * 3600);    config.planCalcScore().addActivityParams(oth);    ActivityParams unk=new ActivityParams("unknown");    unk.setTypicalDuration(7 * 3600);    config.planCalcScore().addActivityParams(unk);  }{    ActivityParams ac1=new ActivityParams("E2E_Start");    ac1.setTypicalDuration(10 * 60 * 60);    config.planCalcScore().addActivityParams(ac1);    ActivityParams act2=new ActivityParams("E2E_End");    act2.setTypicalDuration(10 * 60 * 60);    config.planCalcScore().addActivityParams(act2);    ActivityParams act3=new ActivityParams("E2I_Start");    act3.setTypicalDuration(12 * 60 * 60);    config.planCalcScore().addActivityParams(act3);    for (    String area : OuterCordonUtils.getAreaType2ZoneIds().keySet()) {      ActivityParams act4=new ActivityParams("E2I_mid_" + area.substring(0,3));      act4.setTypicalDuration(8 * 60 * 60);      config.planCalcScore().addActivityParams(act4);    }  }  config.planCalcScore().setMarginalUtlOfWaiting_utils_hr(0);  config.planCalcScore().setPerforming_utils_hr(0.30);  for (  String mode : PatnaUtils.ALL_MODES) {    ModeParams modeParam=new ModeParams(mode);    modeParam.setConstant(0.);switch (mode) {case "car":      modeParam.setMarginalUtilityOfTraveling(-0.64);    modeParam.setMonetaryDistanceRate(-3.7 * Math.pow(10,-5));  break;case "motorbike":modeParam.setMarginalUtilityOfTraveling(-0.18);modeParam.setMonetaryDistanceRate(-1.6 * Math.pow(10,-5));break;case "pt":modeParam.setMarginalUtilityOfTraveling(-0.29);break;case "walk":modeParam.setMarginalUtilityOfTraveling(-0.0);modeParam.setMonetaryDistanceRate(0.0);modeParam.setMarginalUtilityOfDistance(-0.0002);break;case "bike":modeParam.setMarginalUtilityOfTraveling(-0.0);modeParam.setMonetaryDistanceRate(0.0);modeParam.setMarginalUtilityOfDistance(-0.0002);break;default :modeParam.setMarginalUtilityOfTraveling(0.0);modeParam.setMonetaryDistanceRate(0.0);break;}config.planCalcScore().addModeParams(modeParam);}config.plansCalcRoute().setNetworkModes(PatnaUtils.ALL_MAIN_MODES);{ModeRoutingParams mrp=new ModeRoutingParams("walk");mrp.setTeleportedModeSpeed(5. / 3.6);mrp.setBeelineDistanceFactor(1.5);config.plansCalcRoute().addModeRoutingParams(mrp);}{ModeRoutingParams mrp=new ModeRoutingParams("pt");mrp.setTeleportedModeSpeed(20. / 3.6);mrp.setBeelineDistanceFactor(1.5);config.plansCalcRoute().addModeRoutingParams(mrp);}}  }
class C{  public void replyToMessage(Message srcMsg,int what,Object obj){  Message msg=Message.obtain();  msg.what=what;  msg.obj=obj;  replyToMessage(srcMsg,msg);}  }
class C{  public int byteValue(){  return (byte)0;}  }
class C{  public void pointerPress(float x,float y,int[] path){  TestUtils.pointerPress(x,y,path);}  }
class C{  public void put(String key,File file,String contentType,String customFileName) throws FileNotFoundException {  if (file == null || !file.exists()) {    throw new FileNotFoundException();  }  if (key != null) {    fileParams.put(key,new FileWrapper(file,contentType,customFileName));  }}  }
class C{  public void updateClob(String columnLabel,Reader reader) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  @Override void readJournal(PageServiceImpl pageActor,ReadStream is,byte[] buffer,int offset,RowCursor cursor) throws IOException {  int len=BitsUtil.readInt16(is);  if (len == 0) {    BitsUtil.writeInt(buffer,offset + offset(),0);    return;  }  if ((len & LARGE_BLOB_MASK) != 0) {    len=len & ~LARGE_BLOB_MASK;    if (len != 4) {      throw new IllegalStateException();    }    int id=BitsUtil.readInt(is);    PageBlob pageBlob=pageActor.getBlobPage(id);    if (pageBlob != null) {      BlobOutputStream blob=new BlobOutputStream(cursor,this,id);      cursor.setBlob(index(),blob);    }    return;  }  TempBuffer tBuf=TempBuffer.create();  byte[] tempBuffer=tBuf.buffer();  is.readAll(tempBuffer,0,len);  BlobOutputStream blob=new BlobOutputStream(cursor,this,tBuf,len);  cursor.setBlob(index(),blob);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:20.026 -0500",hash_original_method="001DBBEE7493D5C83D8EF835ED579635",hash_generated_method="001DBBEE7493D5C83D8EF835ED579635") void clearDisconnected(){  for (int i=connections.size() - 1; i >= 0; i--) {    GsmConnection cn=(GsmConnection)connections.get(i);    if (cn.getState() == State.DISCONNECTED) {      connections.remove(i);    }  }  if (connections.size() == 0) {    state=State.IDLE;  }}  }
class C{  @Override public int proceduralInterval(){  return 4;}  }
class C{  @Override public void removeAllOccurrencesOfValue(final IScope scope,final Object value){  for (int i=0; i < _size; i++) {    if (Objects.equal(_values[i],value)) {      removeAt(i);    }  }}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public boolean removeParameter(String name){  throw new UnsupportedOperationException("Removing parameters in a stack is not supported.");}  }
class C{  public boolean bool(){  return false;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public boolean isIntegerOnly(){  return (this.integerOnly != null ? this.integerOnly : false);}  }
class C{  public boolean isTabInitialized(int index){  GridTab mTab=m_tabs.get(index);  return initTabs.contains(mTab);}  }
class C{  public boolean isSetPort(){  return EncodingUtils.testBit(__isset_bitfield,__PORT_ISSET_ID);}  }
class C{  public static double[] fromWGS84(double lat,double lon){  double[] cartesian=fromLatLon(new double[]{lat,lon,0},Constants.ELLIPSOID_GRS80_MAJORAXIS,Constants.ELLIPSOID_GRS80_MINORAXIS);  double[] transformed=helmertTransformation(cartesian,tX,tY,tZ,s,rX,rY,rZ);  double[] ret=toLatLon(transformed,Constants.ELLIPSOID_AIRY1830_MAJORAXIS,Constants.ELLIPSOID_AIRY1830_MINORAXIS,0.00000001);  return new double[]{ret[0],ret[1]};}  }
class C{  @SuppressWarnings("unchecked") public PutIndexTemplateRequest aliases(Map source){  try {    XContentBuilder builder=XContentFactory.jsonBuilder();    builder.map(source);    return aliases(builder.bytes());  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }}  }
class C{  public void testReset() throws Throwable {  Collection<Address> servers=Arrays.asList(new Address("localhost",5000),new Address("localhost",5001),new Address("localhost",5002));  AddressSelector selector=new AddressSelector(ServerSelectionStrategies.ANY);  selector.reset(null,servers);  selector.next();  selector.next();  selector.next();  assertFalse(selector.hasNext());  selector.reset();  assertTrue(selector.hasNext());  assertEquals(selector.state(),AddressSelector.State.RESET);  selector.next();  assertEquals(selector.state(),AddressSelector.State.ITERATE);}  }
class C{  protected boolean calculateGestureTransform(Matrix outTransform,@LimitFlag int limitTypes){  TransformGestureDetector detector=mGestureDetector;  boolean transformCorrected=false;  outTransform.set(mPreviousTransform);  if (mIsRotationEnabled) {    float angle=detector.getRotation() * (float)(180 / Math.PI);    outTransform.postRotate(angle,detector.getPivotX(),detector.getPivotY());  }  if (mIsScaleEnabled) {    float scale=detector.getScale();    outTransform.postScale(scale,scale,detector.getPivotX(),detector.getPivotY());  }  transformCorrected|=limitScale(outTransform,detector.getPivotX(),detector.getPivotY(),limitTypes);  if (mIsTranslationEnabled) {    outTransform.postTranslate(detector.getTranslationX(),detector.getTranslationY());  }  transformCorrected|=limitTranslation(outTransform,limitTypes);  return transformCorrected;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:44.067 -0500",hash_original_method="7D34AF538E9A67DEA76272AB02F2CDC6",hash_generated_method="BDC0CC98902031F367B4EBF54D94EDAF") public boolean isProfiling(){  return mThread.isProfiling();}  }
class C{  public static boolean hasEmbeddedIPv4ClientAddress(Inet6Address ip){  return isCompatIPv4Address(ip) || is6to4Address(ip) || isTeredoAddress(ip);}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  protected void saveBuffer(String name){  StringBuffer sb=m_History.getNamedBuffer(name);  if (sb != null) {    if (m_SaveOut.save(sb)) {      m_Log.logMessage("Save successful.");    }  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void modelChanged(int status,int index){}  }
class C{  @Override @After public void tearDown() throws Exception {  try {    publisherConnection.close();    subscriberConnection.close();    admin.deleteTopicConnectionFactory(PubSubTestCase.TCF_NAME);    admin.deleteTopic(PubSubTestCase.TOPIC_NAME);  } catch (  Exception ignored) {  } finally {    publisherTopic=null;    publisher=null;    publisherTCF=null;    publisherSession=null;    publisherConnection=null;    subscriberTopic=null;    subscriber=null;    subscriberTCF=null;    subscriberSession=null;    subscriberConnection=null;  }  super.tearDown();}  }
class C{  private static int component(final Edge edge,final int id,final ArrayList<Edge> edges){  Edge any=edge;  while (any.coordinate.x == +DATELINE || any.coordinate.x == -DATELINE) {    if ((any=any.next) == edge) {      break;    }  }  double shiftOffset=any.coordinate.x > DATELINE ? DATELINE : (any.coordinate.x < -DATELINE ? -DATELINE : 0);  if (debugEnabled()) {    LOGGER.debug("shift: {[]}",shiftOffset);  }  int length=0, connectedComponents=0;  int splitIndex=1;  Edge current=edge;  Edge prev=edge;  HashMap<Coordinate,Tuple<Edge,Edge>> visitedEdge=new HashMap<>();  do {    current.coordinate=shift(current.coordinate,shiftOffset);    current.component=id;    if (edges != null) {      if (visitedEdge.containsKey(current.coordinate)) {        if (connectedComponents > 0 && current.next != edge) {          throw new InvalidShapeException("Shape contains more than one shared point");        }        final int visitID=-id;        Edge firstAppearance=visitedEdge.get(current.coordinate).v2();        Edge temp=firstAppearance.next;        firstAppearance.next=current.next;        current.next=temp;        current.component=visitID;        do {          prev.component=visitID;          prev=visitedEdge.get(prev.coordinate).v1();          ++splitIndex;        } while (!current.coordinate.equals(prev.coordinate));        ++connectedComponents;      } else {        visitedEdge.put(current.coordinate,new Tuple<Edge,Edge>(prev,current));      }      edges.add(current);      prev=current;    }    length++;  } while (connectedComponents == 0 && (current=current.next) != edge);  return (splitIndex != 1) ? length - splitIndex : length;}  }
class C{  private Caption parseDialogueForASS(String[] line,String[] dialogueFormat,float timer,TimedTextObject tto){  Caption newCaption=new Caption();  String captionText=line[9];  newCaption.content=captionText.replaceAll("\\{.*?\\}","").replace("\n","<br />").replace("\\N","<br />");  for (int i=0; i < dialogueFormat.length; i++) {    if (dialogueFormat[i].trim().equalsIgnoreCase("Style")) {      Style s=tto.styling.get(line[i].trim());      if (s != null)       newCaption.style=s; else       tto.warnings+="undefined style: " + line[i].trim() + "\n\n";    } else     if (dialogueFormat[i].trim().equalsIgnoreCase("Start")) {      newCaption.start=new Time("h:mm:ss.cs",line[i].trim());    } else     if (dialogueFormat[i].trim().equalsIgnoreCase("End")) {      newCaption.end=new Time("h:mm:ss.cs",line[i].trim());    }  }  if (timer != 100) {    newCaption.start.mseconds/=(timer / 100);    newCaption.end.mseconds/=(timer / 100);  }  return newCaption;}  }
class C{  private void updateN516by9ResolutionIfNeeded(SettingsManager settingsManager){  if (!ApiHelper.IS_NEXUS_5) {    return;  }  String pictureSize=settingsManager.getString(SettingsManager.SCOPE_GLOBAL,Keys.KEY_PICTURE_SIZE_BACK);  if ("1836x3264".equals(pictureSize)) {    Log.i(TAG,"Swapped dimensions on N5 16:9 resolution.");    settingsManager.set(SettingsManager.SCOPE_GLOBAL,Keys.KEY_PICTURE_SIZE_BACK,"3264x1836");  }}  }
class C{  private boolean isForceEvenIfEdited(){  return forceEvenIfEdited;}  }
class C{  protected void authenticationSuccess(Session session,User user){  session.setAttribute(USER_KEY,user);}  }
class C{  void memberChanged(Member member){  int index=memberList.indexOf(member);  if (index != -1) {    this.fireContentsChanged(this,index,index);  }}  }
class C{  public final boolean isTraceEnabled(){  return false;}  }
class C{  public boolean isTruncated(){  return (_flags & DNSConstants.FLAGS_TC) != 0;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.N4_MEMBER_DECLARATION__DECLARED_MODIFIERS:    return declaredModifiers != null && !declaredModifiers.isEmpty();case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:  return basicGetOwner() != null;}return super.eIsSet(featureID);}  }
class C{  protected void onCompactLockingTheJournal() throws Exception {}  }
class C{  public boolean isQtree(String volume,String qtreeName){  if (log.isDebugEnabled()) {    log.debug("Checking if " + qtreeName + " is a qtree on filesystem "+ volume);  }  ClusterQtreeCommands qtreeCommands=new ClusterQtreeCommands(this.server.getNaServer());  return qtreeCommands.isQtree(volume,qtreeName);}  }
class C{  public static boolean hasIceCreamSandwich(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;}  }
class C{  public final void sub(Matrix3d m1,Matrix3d m2){  this.m00=m1.m00 - m2.m00;  this.m01=m1.m01 - m2.m01;  this.m02=m1.m02 - m2.m02;  this.m10=m1.m10 - m2.m10;  this.m11=m1.m11 - m2.m11;  this.m12=m1.m12 - m2.m12;  this.m20=m1.m20 - m2.m20;  this.m21=m1.m21 - m2.m21;  this.m22=m1.m22 - m2.m22;}  }
class C{  public static double distanceFromLine(int xa,int ya,int xb,int yb,int xc,int yc){  int xdiff=xb - xa;  int ydiff=yb - ya;  long l2=xdiff * xdiff + ydiff * ydiff;  if (l2 == 0) {    return Geom.length(xa,ya,xc,yc);  }  double rnum=(ya - yc) * (ya - yb) - (xa - xc) * (xb - xa);  double r=rnum / l2;  if (r < 0.0 || r > 1.0) {    return Double.MAX_VALUE;  }  double xi=xa + r * xdiff;  double yi=ya + r * ydiff;  double xd=xc - xi;  double yd=yc - yi;  return sqrt(xd * xd + yd * yd);}  }
class C{  @Override public void onReset(){  closeDialog();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.367 -0500",hash_original_method="1138F251ECE80366C448CEE3E6C39D34",hash_generated_method="879FB01B5B511D9EAD2D3BA54F086F68") public static long longForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return longForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  @Override @SuppressWarnings("unchecked") public <T>T[] toArray(T[] vec){  int i=0;  List<A> l=this;  Object[] dest=vec;  while (l.nonEmpty() && i < vec.length) {    dest[i]=l.head;    l=l.tail;    i++;  }  if (l.isEmpty()) {    if (i < vec.length)     vec[i]=null;    return vec;  }  vec=(T[])Array.newInstance(vec.getClass().getComponentType(),size());  return toArray(vec);}  }
class C{  public static String generateCustomEnvironmentName(@NotNull List<Environment> environments,@NotNull String projectName){  int counter=1;  String name=CUSTOM_ENV_PREFIX + counter + '-'+ projectName;  for (int i=0; i < environments.size(); i++) {    if (environments.get(i).getName().equals(name)) {      counter++;      name=CUSTOM_ENV_PREFIX + String.valueOf(counter) + '-'+ projectName;      i=0;    }  }  return name;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private int utf8Position(int charPosition){  int pos=0;  for (int i=0; i < charPosition; i++) {    int content=blobContent[pos] & 0xff;    if (content < 0x80) {      pos+=1;    } else     if (content < 0xC2) {      throw new AssertionError("invalid UTF8");    } else     if (content < 0xE0) {      pos+=2;    } else     if (content < 0xF0) {      pos+=3;    } else     if (content < 0xF8) {      pos+=4;    } else {      throw new AssertionError("invalid UTF8");    }  }  return pos;}  }
class C{  protected void sendMessageToUI(String valuetosend,boolean clear){  Log.i("medtronic.CommandSender",valuetosend);  if (mClients != null && mClients.size() > 0) {    for (int i=mClients.size() - 1; i >= 0; i--) {      try {        Message mSend=null;        if (clear) {          mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_CLEAR_DISPLAY);          mClients.get(i).send(mSend);          continue;        }        mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_MESSAGE_RECEIVED);        Bundle b=new Bundle();        b.putString("data",valuetosend);        mSend.setData(b);        mClients.get(i).send(mSend);      } catch (      RemoteException e) {        mClients.remove(i);      }    }  }}  }
class C{  public boolean isInheritedMapped(Class<?> classToCheck){  for (  Class<?> clazz : getAllsuperClasses(classToCheck))   if (isMapped(clazz))   return true;  return false;}  }
class C{  public void notifyRtcpListeners(RtcpEvent event){  for (int i=0; i < mListeners.size(); i++) {    RtcpEventListener listener=mListeners.elementAt(i);    listener.receiveRtcpEvent(event);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MCostDetail[");  sb.append(get_ID());  sb.append(",SeqNo=").append(getSeqNo());  sb.append(",AD_Org_ID=").append(getAD_Org_ID());  sb.append(",C_AcctSchema_ID=").append(getC_AcctSchema_ID());  sb.append(",M_CostType_ID=").append(getM_CostType_ID());  sb.append(",M_CostElement_ID=").append(getM_CostElement_ID());  sb.append(",M_Transaction_ID=").append(getM_Transaction_ID());  sb.append(",DateAcct=").append(getDateAcct());  if (getC_OrderLine_ID() != 0)   sb.append(",C_OrderLine_ID=").append(getC_OrderLine_ID());  if (getM_InOutLine_ID() != 0)   sb.append(",M_InOutLine_ID=").append(getM_InOutLine_ID());  if (getC_InvoiceLine_ID() != 0)   sb.append(",C_InvoiceLine_ID=").append(getC_InvoiceLine_ID());  if (getC_ProjectIssue_ID() != 0)   sb.append(",C_ProjectIssue_ID=").append(getC_ProjectIssue_ID());  if (getM_MovementLine_ID() != 0)   sb.append(",M_MovementLine_ID=").append(getM_MovementLine_ID());  if (getM_InventoryLine_ID() != 0)   sb.append(",M_InventoryLine_ID=").append(getM_InventoryLine_ID());  if (getM_ProductionLine_ID() != 0)   sb.append(",M_ProductionLine_ID=").append(getM_ProductionLine_ID());  if (getC_LandedCostAllocation_ID() != 0)   sb.append(",C_LandedCostAllocation_ID=").append(getC_LandedCostAllocation_ID());  sb.append(",Cost =").append(getAmt());  sb.append(",Cost Amt=").append(getCostAmt());  sb.append(",Qty=").append(getQty());  sb.append(",CumulatedQty =").append(getCumulatedQty());  sb.append(",Qty Onhand =").append(getQty().add(getCumulatedQty()));  sb.append(",Current Qty =").append(getCurrentQty());  sb.append(",Cumulated Amt =").append(getCumulatedAmt());  sb.append(",Cumulated Amt LL =").append(getCumulatedAmtLL());  sb.append(",Current Price =").append(getCurrentCostPrice());  sb.append(",Current Proce TL =").append(getCurrentCostPriceLL());  if (isDelta())   sb.append(",DeltaAmt=").append(getDeltaAmt()).append(",DeltaQty=").append(getDeltaQty());  sb.append("]");  return sb.toString();}  }
class C{  public int dataOffset(){  if (mDataPosition == mDataLength) {    return 0;  }  return mDataPosition;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.440 -0500",hash_original_method="EE053BB78DA7F62675E98D1AF5A5B915",hash_generated_method="D295859F2F9CEB8051268D51BE35BAFA") private void sendAck(Request request,boolean throwIOExceptionAsSipException) throws SipException {  SIPRequest ackRequest=(SIPRequest)request;  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("sendAck" + this);  if (!ackRequest.getMethod().equals(Request.ACK))   throw new SipException("Bad request method -- should be ACK");  if (this.getState() == null || this.getState().getValue() == EARLY_STATE) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("Bad Dialog State for " + this + " dialogID = "+ this.getDialogId());    }    throw new SipException("Bad dialog state " + this.getState());  }  if (!this.getCallId().getCallId().equals(((SIPRequest)request).getCallId().getCallId())) {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logError("CallID " + this.getCallId());      sipStack.getStackLogger().logError("RequestCallID = " + ackRequest.getCallId().getCallId());      sipStack.getStackLogger().logError("dialog =  " + this);    }    throw new SipException("Bad call ID in request");  }  try {    if (sipStack.isLoggingEnabled()) {      sipStack.getStackLogger().logDebug("setting from tag For outgoing ACK= " + this.getLocalTag());      sipStack.getStackLogger().logDebug("setting To tag for outgoing ACK = " + this.getRemoteTag());      sipStack.getStackLogger().logDebug("ack = " + ackRequest);    }    if (this.getLocalTag() != null)     ackRequest.getFrom().setTag(this.getLocalTag());    if (this.getRemoteTag() != null)     ackRequest.getTo().setTag(this.getRemoteTag());  } catch (  ParseException ex) {    throw new SipException(ex.getMessage());  }  Hop hop=sipStack.getNextHop(ackRequest);  if (hop == null)   throw new SipException("No route!");  try {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("hop = " + hop);    ListeningPointImpl lp=(ListeningPointImpl)this.sipProvider.getListeningPoint(hop.getTransport());    if (lp == null)     throw new SipException("No listening point for this provider registered at " + hop);    InetAddress inetAddress=InetAddress.getByName(hop.getHost());    MessageChannel messageChannel=lp.getMessageProcessor().createMessageChannel(inetAddress,hop.getPort());    boolean releaseAckSem=false;    long cseqNo=((SIPRequest)request).getCSeq().getSeqNumber();    if (!this.isAckSent(cseqNo)) {      releaseAckSem=true;    }    this.setLastAckSent(ackRequest);    messageChannel.sendMessage(ackRequest);    this.isAcknowledged=true;    this.highestSequenceNumberAcknowledged=Math.max(this.highestSequenceNumberAcknowledged,((SIPRequest)ackRequest).getCSeq().getSeqNumber());    if (releaseAckSem && this.isBackToBackUserAgent) {      this.releaseAckSem();    } else {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("Not releasing ack sem for " + this + " isAckSent "+ releaseAckSem);      }    }  } catch (  IOException ex) {    if (throwIOExceptionAsSipException)     throw new SipException("Could not send ack",ex);    this.raiseIOException(hop.getHost(),hop.getPort(),hop.getTransport());  }catch (  SipException ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logException(ex);    throw ex;  }catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logException(ex);    throw new SipException("Could not create message channel",ex);  }  if (this.dialogDeleteTask != null) {    this.dialogDeleteTask.cancel();    this.dialogDeleteTask=null;  }  this.ackSeen=true;}  }
class C{  public void onAdvertisedMaster(List<ApiICEServer> iceServers){  send(new RTCMasterAdvertised(new ArrayList<>(iceServers)));}  }
class C{  private Collection<UUID> primaryOrBackups(IgfsBlockKey key){  IgniteEx grid=grid(0);  Collection<UUID> ids=new HashSet<>();  for (  ClusterNode node : grid.cluster().nodes()) {    if (grid.affinity(DATA_CACHE_NAME).isPrimaryOrBackup(node,key))     ids.add(node.id());  }  return ids;}  }
class C{  private void migrationEndInfo(){  s_logger.log(Level.INFO,"");  s_logger.log(Level.INFO,"migrateDoneMigration");}  }
class C{  private final static boolean isLaoPreVowel(int ch){  return (ch >= 0x0ec0) && (ch <= 0x0ec4);}  }
class C{  public void putListPropertyType(String property,Class<? extends Object> type){  listProperties.put(property,type);}  }
class C{  private void interpolate(double alpha){  mCurrentState.position=mCurrentState.position * alpha + mPreviousState.position * (1 - alpha);  mCurrentState.velocity=mCurrentState.velocity * alpha + mPreviousState.velocity * (1 - alpha);}  }
class C{  @Override public int size(){  return mCount;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @SuppressLint("NewApi") public static void tryAccessibilityAnnounce(View view,CharSequence text){  if (isJellybeanOrLater() && view != null && text != null) {    view.announceForAccessibility(text);  }}  }
class C{  private void addQuadCurveArea(QuadCurve2D curve){  if (curve.getFlatness() < CURVE_SENSITIVITY) {    appendShapeOutline(new Line2D.Double(curve.getP1(),curve.getP2()));  } else {    QuadCurve2D leftSubcurve=new QuadCurve2D.Double();    QuadCurve2D rightSubcurve=new QuadCurve2D.Double();    curve.subdivide(leftSubcurve,rightSubcurve);    addQuadCurveArea(leftSubcurve);    addQuadCurveArea(rightSubcurve);  }}  }
class C{  public static String deleteFromCart(HttpServletRequest request,HttpServletResponse response){  ShoppingCart cart=getCartObject(request);  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  ShoppingCartHelper cartHelper=new ShoppingCartHelper(null,dispatcher,cart);  String controlDirective;  Map<String,Object> result;  Map<String,Object> paramMap=UtilHttp.getParameterMap(request);  result=cartHelper.deleteFromCart(paramMap);  controlDirective=processResult(result,request);  if (controlDirective.equals(ERROR)) {    return "error";  } else {    return "success";  }}  }
class C{  Sequence intArray2Sequence(int[] seq,NodeRef node){  String sSeq="" + seq[0];  return new Sequence(m_tree.getNodeTaxon(node),sSeq);}  }
class C{  public Long smove(final String srckey,final String dstkey,final String member){  checkIsInMulti();  client.smove(srckey,dstkey,member);  return client.getIntegerReply();}  }
class C{  public X509CRLImpl(DerValue val) throws CRLException {  try {    parse(val);  } catch (  IOException e) {    signedCRL=null;    throw new CRLException("Parsing error: " + e.getMessage());  }}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public Execution(Sequence owner){  this.theList=new ArrayList<>(owner.size());  for (int i=0; i < owner.size(); i++) {    theList.add(NotExecuted.create());  }  this.coveredClasses=new LinkedHashSet<>();}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  protected float unwrapValue(Object value){  return ((Float)value).floatValue();}  }
class C{  public static final String replace(String replaceIn,String toReplace,String replaceWith){  StringBuffer buf=new StringBuffer(replaceIn);  int replaceLength=toReplace.length();  int replaceWithLength=replaceWith.length();  int netLength=replaceWithLength - replaceLength;  int index=-1;  int count=0;  while ((index=replaceIn.indexOf(toReplace,index + 1)) != -1) {    int bufIndex=index + (count * netLength);    buf.replace(bufIndex,bufIndex + replaceLength,replaceWith);    count++;  }  return buf.toString();}  }
class C{  private void writeAttributes(Attributes atts) throws SAXException {  int len=atts.getLength();  for (int i=0; i < len; i++) {    write(' ');    writeName(atts.getURI(i),atts.getLocalName(i),atts.getQName(i),false);    if (htmlMode && booleanAttribute(atts.getLocalName(i),atts.getQName(i),atts.getValue(i)))     break;    write("=\"");    String s=atts.getValue(i);    writeEscUTF16(s,0,s.length(),true);    write('"');  }}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public static short toShort(byte[] bytes,int offset){  return toShort(bytes,offset,SIZEOF_SHORT);}  }
class C{  public void windowDeiconified(WindowEvent e){  ((WindowListener)a).windowDeiconified(e);  ((WindowListener)b).windowDeiconified(e);}  }
class C{  public int readInt() throws IOException {  return in.readInt();}  }
class C{  public long size(){  long size=0;  for (int i=0; i < chromosomes.length; i++)   size+=chromosomes[i].size();  return size;}  }
class C{  public NotificationChain basicSetEvent(Expression newEvent,NotificationChain msgs){  Expression oldEvent=event;  event=newEvent;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.REGULAR_EVENT_SPEC__EVENT,oldEvent,newEvent);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public GenericPdu load(Uri uri) throws MmsException {  GenericPdu pdu=null;  PduCacheEntry cacheEntry=null;  int msgBox=0;  long threadId=DUMMY_THREAD_ID;  try {synchronized (PDU_CACHE_INSTANCE) {      if (PDU_CACHE_INSTANCE.isUpdating(uri)) {        if (LOCAL_LOGV)         Log.v(TAG,"load: " + uri + " blocked by isUpdating()");        try {          PDU_CACHE_INSTANCE.wait();        } catch (        InterruptedException e) {          Log.e(TAG,"load: ",e);        }        cacheEntry=PDU_CACHE_INSTANCE.get(uri);        if (cacheEntry != null) {          return cacheEntry.getPdu();        }      }      PDU_CACHE_INSTANCE.setUpdating(uri,true);    }    Cursor c=SqliteWrapper.query(mContext,mContentResolver,uri,PDU_PROJECTION,null,null,null);    PduHeaders headers=new PduHeaders();    Set<Entry<Integer,Integer>> set;    long msgId=ContentUris.parseId(uri);    try {      if ((c == null) || (c.getCount() != 1) || !c.moveToFirst()) {        throw new MmsException("Bad uri: " + uri);      }      msgBox=c.getInt(PDU_COLUMN_MESSAGE_BOX);      threadId=c.getLong(PDU_COLUMN_THREAD_ID);      set=ENCODED_STRING_COLUMN_INDEX_MAP.entrySet();      for (      Entry<Integer,Integer> e : set) {        setEncodedStringValueToHeaders(c,e.getValue(),headers,e.getKey());      }      set=TEXT_STRING_COLUMN_INDEX_MAP.entrySet();      for (      Entry<Integer,Integer> e : set) {        setTextStringToHeaders(c,e.getValue(),headers,e.getKey());      }      set=OCTET_COLUMN_INDEX_MAP.entrySet();      for (      Entry<Integer,Integer> e : set) {        setOctetToHeaders(c,e.getValue(),headers,e.getKey());      }      set=LONG_COLUMN_INDEX_MAP.entrySet();      for (      Entry<Integer,Integer> e : set) {        setLongToHeaders(c,e.getValue(),headers,e.getKey());      }    }  finally {      if (c != null) {        c.close();      }    }    if (msgId == -1L) {      throw new MmsException("Error! ID of the message: -1.");    }    loadAddress(msgId,headers);    int msgType=headers.getOctet(PduHeaders.MESSAGE_TYPE);    PduBody body=new PduBody();    if ((msgType == PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF) || (msgType == PduHeaders.MESSAGE_TYPE_SEND_REQ)) {      PduPart[] parts=loadParts(msgId);      if (parts != null) {        int partsNum=parts.length;        for (int i=0; i < partsNum; i++) {          body.addPart(parts[i]);        }      }    }switch (msgType) {case PduHeaders.MESSAGE_TYPE_NOTIFICATION_IND:      pdu=new NotificationInd(headers);    break;case PduHeaders.MESSAGE_TYPE_DELIVERY_IND:  pdu=new DeliveryInd(headers);break;case PduHeaders.MESSAGE_TYPE_READ_ORIG_IND:pdu=new ReadOrigInd(headers);break;case PduHeaders.MESSAGE_TYPE_RETRIEVE_CONF:pdu=new RetrieveConf(headers,body);break;case PduHeaders.MESSAGE_TYPE_SEND_REQ:pdu=new SendReq(headers,body);break;case PduHeaders.MESSAGE_TYPE_ACKNOWLEDGE_IND:pdu=new AcknowledgeInd(headers);break;case PduHeaders.MESSAGE_TYPE_NOTIFYRESP_IND:pdu=new NotifyRespInd(headers);break;case PduHeaders.MESSAGE_TYPE_READ_REC_IND:pdu=new ReadRecInd(headers);break;case PduHeaders.MESSAGE_TYPE_SEND_CONF:case PduHeaders.MESSAGE_TYPE_FORWARD_REQ:case PduHeaders.MESSAGE_TYPE_FORWARD_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_STORE_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_STORE_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_VIEW_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_UPLOAD_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_REQ:case PduHeaders.MESSAGE_TYPE_MBOX_DELETE_CONF:case PduHeaders.MESSAGE_TYPE_MBOX_DESCR:case PduHeaders.MESSAGE_TYPE_DELETE_REQ:case PduHeaders.MESSAGE_TYPE_DELETE_CONF:case PduHeaders.MESSAGE_TYPE_CANCEL_REQ:case PduHeaders.MESSAGE_TYPE_CANCEL_CONF:throw new MmsException("Unsupported PDU type: " + Integer.toHexString(msgType));default :throw new MmsException("Unrecognized PDU type: " + Integer.toHexString(msgType));}}  finally {synchronized (PDU_CACHE_INSTANCE) {if (pdu != null) {assert (PDU_CACHE_INSTANCE.get(uri) == null);cacheEntry=new PduCacheEntry(pdu,msgBox,threadId);PDU_CACHE_INSTANCE.put(uri,cacheEntry);}PDU_CACHE_INSTANCE.setUpdating(uri,false);PDU_CACHE_INSTANCE.notifyAll();}}return pdu;}  }
class C{  MonthDay(MonthDay partial,Chronology chrono){  super(partial,chrono);}  }
class C{  public SeaGlassContext(){  super(fakeComponent,fakeRegion,fakeStyle,0);}  }
class C{  public float[] apply(float[] samples){  for (int x=0; x < samples.length; x++) {    samples[x]=apply(samples[x]);  }  return samples;}  }
class C{  @Override public void processAuthorize(WebSocketChannel channel,String authorizeToken){  LOG.entering(CLASS_NAME,"processAuthorize");  WebSocketNativeChannel nativeChannel=(WebSocketNativeChannel)channel;  Proxy proxy=nativeChannel.getProxy();  proxy.processEvent(XoaEventKind.AUTHORIZE,new String[]{authorizeToken});}  }
class C{  @RequestMapping(method=RequestMethod.GET,value="/index",produces=MediaType.APPLICATION_XML_VALUE) @ResponseBody public LinkIndex index(@RequestParam(value="scheme",required=false,defaultValue="http") final String scheme){  return new LinkIndex().add(new Link(CliStrings.STATUS_SHARED_CONFIG,toUri("/services/cluster-config",scheme))).add(new Link(CliStrings.LIST_MEMBER,toUri("/members",scheme))).add(new Link(CliStrings.DESCRIBE_MEMBER,toUri("/members/{name}",scheme))).add(new Link(CliStrings.LIST_REGION,toUri("/regions",scheme))).add(new Link(CliStrings.DESCRIBE_REGION,toUri("/regions/{name}",scheme))).add(new Link(CliStrings.ALTER_REGION,toUri("/regions/{name}",scheme),HttpMethod.PUT)).add(new Link(CliStrings.CREATE_REGION,toUri("/regions",scheme),HttpMethod.POST)).add(new Link(CliStrings.DESTROY_REGION,toUri("/regions/{name}",scheme),HttpMethod.DELETE)).add(new Link(CliStrings.LIST_INDEX,toUri("/indexes",scheme))).add(new Link(CliStrings.CLEAR_DEFINED_INDEXES,toUri("/indexes?op=clear-defined",scheme),HttpMethod.DELETE)).add(new Link(CliStrings.CREATE_INDEX,toUri("/indexes",scheme),HttpMethod.POST)).add(new Link(CliStrings.CREATE_DEFINED_INDEXES,toUri("/indexes?op=create-defined",scheme),HttpMethod.POST)).add(new Link(CliStrings.DEFINE_INDEX,toUri("/indexes?op=define",scheme),HttpMethod.POST)).add(new Link(CliStrings.DESTROY_INDEX,toUri("/indexes",scheme),HttpMethod.DELETE)).add(new Link(CliStrings.DESTROY_INDEX,toUri("/indexes/{name}",scheme),HttpMethod.DELETE)).add(new Link(CliStrings.GET,toUri("/regions/{region}/data",scheme),HttpMethod.GET)).add(new Link(CliStrings.PUT,toUri("/regions/{region}/data",scheme),HttpMethod.PUT)).add(new Link(CliStrings.REMOVE,toUri("/regions/{region}/data",scheme),HttpMethod.DELETE)).add(new Link(CliStrings.EXPORT_DATA,toUri("/members/{member}/regions/{region}/data",scheme),HttpMethod.GET)).add(new Link(CliStrings.IMPORT_DATA,toUri("/members/{member}/regions/{region}/data",scheme),HttpMethod.POST)).add(new Link(CliStrings.LOCATE_ENTRY,toUri("/regions/{region}/data/location",scheme),HttpMethod.GET)).add(new Link(CliStrings.QUERY,toUri("/regions/data/query",scheme),HttpMethod.GET)).add(new Link(CliStrings.REBALANCE,toUri("/regions/data?op=rebalance",scheme),HttpMethod.POST)).add(new Link(CliStrings.LIST_FUNCTION,toUri("/functions",scheme))).add(new Link(CliStrings.DESTROY_FUNCTION,toUri("/functions/{id}",scheme),HttpMethod.DELETE)).add(new Link(CliStrings.EXECUTE_FUNCTION,toUri("/functions/{id}",scheme),HttpMethod.POST)).add(new Link(CliStrings.LIST_CLIENTS,toUri("/clients",scheme))).add(new Link(CliStrings.DESCRIBE_CLIENT,toUri("/clients/{clientID}",scheme))).add(new Link(CliStrings.ALTER_RUNTIME_CONFIG,toUri("/config",scheme),HttpMethod.POST)).add(new Link(CliStrings.DESCRIBE_CONFIG,toUri("/members/{member}/config",scheme))).add(new Link(CliStrings.EXPORT_CONFIG,toUri("/config",scheme))).add(new Link(CliStrings.EXPORT_SHARED_CONFIG,toUri("/config/cluster",scheme))).add(new Link(CliStrings.IMPORT_SHARED_CONFIG,toUri("/config/cluster",scheme),HttpMethod.POST)).add(new Link(CliStrings.LIST_DEPLOYED,toUri("/deployed",scheme))).add(new Link(CliStrings.DEPLOY,toUri("/deployed",scheme),HttpMethod.POST)).add(new Link(CliStrings.UNDEPLOY,toUri("/deployed",scheme),HttpMethod.DELETE)).add(new Link(CliStrings.LIST_DISK_STORE,toUri("/diskstores",scheme))).add(new Link(CliStrings.BACKUP_DISK_STORE,toUri("/diskstores?op=backup",scheme),HttpMethod.POST)).add(new Link(CliStrings.COMPACT_DISK_STORE,toUri("/diskstores/{name}?op=compact",scheme),HttpMethod.POST)).add(new Link(CliStrings.CREATE_DISK_STORE,toUri("/diskstores",scheme),HttpMethod.POST)).add(new Link(CliStrings.DESCRIBE_DISK_STORE,toUri("/diskstores/{name}",scheme))).add(new Link(CliStrings.DESTROY_DISK_STORE,toUri("/diskstores/{name}",scheme),HttpMethod.DELETE)).add(new Link(CliStrings.REVOKE_MISSING_DISK_STORE,toUri("/diskstores/{id}?op=revoke",scheme),HttpMethod.POST)).add(new Link(CliStrings.SHOW_MISSING_DISK_STORE,toUri("/diskstores/missing",scheme))).add(new Link(CliStrings.LIST_DURABLE_CQS,toUri("/durable-clients/{durable-client-id}/cqs",scheme))).add(new Link(CliStrings.COUNT_DURABLE_CQ_EVENTS,toUri("/durable-clients/{durable-client-id}/cqs/events",scheme))).add(new Link(CliStrings.COUNT_DURABLE_CQ_EVENTS,toUri("/durable-clients/{durable-client-id}/cqs/{durable-cq-name}/events",scheme))).add(new Link(CliStrings.CLOSE_DURABLE_CLIENTS,toUri("/durable-clients/{durable-client-id}?op=close",scheme),HttpMethod.POST)).add(new Link(CliStrings.CLOSE_DURABLE_CQS,toUri("/durable-clients/{durable-client-id}/cqs/{durable-cq-name}?op=close",scheme),HttpMethod.POST)).add(new Link(CliStrings.STATUS_LOCATOR,toUri("/members/{name}/locator",scheme))).add(new Link(CliStrings.STATUS_SERVER,toUri("/members/{name}/server",scheme))).add(new Link(CliStrings.CHANGE_LOGLEVEL,toUri("/groups/{groups}/loglevel",scheme),HttpMethod.POST)).add(new Link(CliStrings.CHANGE_LOGLEVEL,toUri("/members/{members}/loglevel",scheme),HttpMethod.POST)).add(new Link(CliStrings.CHANGE_LOGLEVEL,toUri("/members/{members}/groups/{groups}/loglevel",scheme),HttpMethod.POST)).add(new Link(CliStrings.EXPORT_LOGS,toUri("/logs",scheme))).add(new Link(CliStrings.EXPORT_STACKTRACE,toUri("/stacktraces",scheme))).add(new Link(CliStrings.GC,toUri("/gc",scheme),HttpMethod.POST)).add(new Link(CliStrings.GC,toUri("/members/{member}/gc",scheme),HttpMethod.POST)).add(new Link(CliStrings.NETSTAT,toUri("/netstat",scheme))).add(new Link(CliStrings.SHOW_DEADLOCK,toUri("/deadlocks",scheme))).add(new Link(CliStrings.SHOW_LOG,toUri("/members/{member}/log",scheme))).add(new Link(CliStrings.SHOW_METRICS,toUri("/metrics",scheme))).add(new Link(CliStrings.SHUTDOWN,toUri("/shutdown",scheme),HttpMethod.POST)).add(new Link(CliStrings.CREATE_ASYNC_EVENT_QUEUE,toUri("/async-event-queues",scheme),HttpMethod.POST)).add(new Link(CliStrings.LIST_ASYNC_EVENT_QUEUES,toUri("/async-event-queues",scheme))).add(new Link(CliStrings.CONFIGURE_PDX,toUri("/pdx",scheme),HttpMethod.POST)).add(new Link(CliStrings.PDX_RENAME,toUri("/pdx/type",scheme),HttpMethod.POST)).add(new Link(MBEAN_ATTRIBUTE_LINK_RELATION,toUri("/mbean/attribute",scheme))).add(new Link(MBEAN_OPERATION_LINK_RELATION,toUri("/mbean/operation",scheme),HttpMethod.POST)).add(new Link(MBEAN_QUERY_LINK_RELATION,toUri("/mbean/query",scheme),HttpMethod.POST)).add(new Link(PING_LINK_RELATION,toUri("/ping",scheme),HttpMethod.GET)).add(new Link(CliStrings.VERSION,toUri("/version",scheme))).add(new Link(CliStrings.LIST_GATEWAY,toUri("/gateways",scheme))).add(new Link(CliStrings.CREATE_GATEWAYRECEIVER,toUri("/gateways/receivers",scheme),HttpMethod.POST)).add(new Link(CliStrings.CREATE_GATEWAYSENDER,toUri("/gateways/senders",scheme),HttpMethod.POST)).add(new Link(CliStrings.LOAD_BALANCE_GATEWAYSENDER,toUri("/gateways/senders/{id}?op=load-balance",scheme),HttpMethod.POST)).add(new Link(CliStrings.PAUSE_GATEWAYSENDER,toUri("/gateways/senders/{id}?op=pause",scheme),HttpMethod.POST)).add(new Link(CliStrings.RESUME_GATEWAYSENDER,toUri("/gateways/senders/{id}?op=resume",scheme),HttpMethod.POST)).add(new Link(CliStrings.START_GATEWAYRECEIVER,toUri("/gateways/receivers?op=start",scheme),HttpMethod.POST)).add(new Link(CliStrings.START_GATEWAYSENDER,toUri("/gateways/senders?op=start",scheme),HttpMethod.POST)).add(new Link(CliStrings.STATUS_GATEWAYRECEIVER,toUri("/gateways/receivers",scheme))).add(new Link(CliStrings.STATUS_GATEWAYSENDER,toUri("/gateways/senders/{id}",scheme))).add(new Link(CliStrings.STOP_GATEWAYRECEIVER,toUri("/gateways/receivers?op=stop",scheme),HttpMethod.POST)).add(new Link(CliStrings.STOP_GATEWAYSENDER,toUri("/gateways/senders/{id}?op=stop",scheme),HttpMethod.POST));}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=new OpenCameraManager().build().open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  public EventProducerTask(EventProducer generator,THL thl){  this.producer=generator;  this.thl=thl;}  }
class C{  public AssertionException(String s){  super(s);}  }
class C{  public double logNodeProbability(Tree tree,NodeRef node){  if (tree.isExternal(node))   return 0.0;  int leftChildren=Tree.Utils.getLeafCount(tree,tree.getChild(node,0));  int rightChildren=Tree.Utils.getLeafCount(tree,tree.getChild(node,1));  return logProbs[leftChildren + rightChildren][leftChildren] + logProbs[leftChildren + rightChildren][rightChildren];}  }
class C{  @Override public void merge(final Index<ReferenceType> otherIndex) throws IOException, SpaceExceededException {  byte[] term;  for (  final ReferenceContainer<ReferenceType> otherContainer : otherIndex) {    term=otherContainer.getTermHash();synchronized (this) {      final ReferenceContainer<ReferenceType> container=get(term,null);      if (container == null) {        this.add(otherContainer);      } else {        container.merge(otherContainer);        delete(term);        this.add(container);      }    }  }}  }
class C{  private void checkArchiveExists(DbConnection dbConn) throws Exception {  int count;  ArchivesTable table=new ArchivesTable();  DirsTable tableNode=new DirsTable();  if (_logger.isDebugEnabled())   _logger.debug("checkArchiveExists");  try {    count=DbSelectFns.selectCount(dbConn,table.getArchHdrTableName(),table.getCountArchIdQual(_id,_name));    if (count > 0) {      count=DbSelectFns.selectCount(dbConn,tableNode.getNodeTableName(),tableNode.getCountDirNodeQual(_parentId));      if (count > 0)       ISicresAdminBasicException.throwException(ISicresAdminArchiveKeys.EC_ARCH_EXITS);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  public static Object read(String filename) throws Exception {  return read(new File(filename));}  }
class C{  protected void checkMatrix(int dimensions){  if (matrix == null) {    if (dimensions == 2) {      matrix=new PMatrix2D();    } else {      matrix=new PMatrix3D();    }  } else   if (dimensions == 3 && (matrix instanceof PMatrix2D)) {    matrix=new PMatrix3D(matrix);  }}  }
class C{  private void enablePreferences(boolean enabled){  findPreference("min_battery_level").setEnabled(enabled);  findPreference("userprofile_settings").setEnabled(enabled);  findPreference("messaging_settings").setEnabled(enabled);}  }
class C{  public static CreateUsersResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  CreateUsersResponse object=new CreateUsersResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"createUsersResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (CreateUsersResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.UserResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public AbstractTextChildSVGContext(BridgeContext ctx,SVGTextElementBridge parent,Element e){  this.ctx=ctx;  this.textBridge=parent;  this.e=e;}  }
class C{  public T result(){  return res;}  }
class C{  protected boolean useFullScreen(Preferences prefs){  fullScreen=false;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    String fullscreenPref=prefs.getFullscreenMode();    if (fullscreenPref.equals(getString(R.string.full_screen_auto))) {      fullScreen=!KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK) && !KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_HOME);      Log.d(DEBUG_TAG,"full screen auto " + fullScreen + " KEYCODE_BACK "+ KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK)+ " KEYCODE_HOME "+ KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_HOME));    } else     if (fullscreenPref.equals(getString(R.string.full_screen_never))) {      fullScreen=false;      Log.d(DEBUG_TAG,"full screen never");    } else     if (fullscreenPref.equals(getString(R.string.full_screen_force))) {      fullScreen=true;      Log.d(DEBUG_TAG,"full screen force");    } else     if (fullscreenPref.equals(getString(R.string.full_screen_no_statusbar))) {      fullScreen=true;      Log.d(DEBUG_TAG,"full screen no statusbar");      return false;    }  }  return fullScreen;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.static_broadcast_receiver_bt:    Intent intent=new Intent(StaticReceiver.INTENT_ACTION);  intent.putExtra(StaticReceiver.STATIC_MESSAGE,UUID.randomUUID().toString());this.sendBroadcast(intent);break;}}  }
class C{  public void updateComment(final String commentId,final JSONObject comment) throws ServiceException {  final Transaction transaction=commentRepository.beginTransaction();  try {    String content=comment.optString(Comment.COMMENT_CONTENT);    content=Emotions.toAliases(content);    comment.put(Comment.COMMENT_CONTENT,content);    commentRepository.update(commentId,comment);    transaction.commit();  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates a comment[id=" + commentId + "] failed",e);    throw new ServiceException(e);  }}  }
class C{  public boolean isTerminated(){  return isTerminated;}  }
class C{  public void run(){  this.startedServer=this.server.start(null);  waitStart.countDown();  startedServer.awaitShutdown();}  }
class C{  private void computeFiltersFromDefault(IndicatorViewState oldState){  filters=new ArrayList<Filter>();  Set<String> defaultFilterNames=new HashSet<String>();  for (  Filter defaultFilter : defaultFilters) {    filters.add(defaultFilter);    if (defaultFilter.name != null)     defaultFilterNames.add(defaultFilter.name);  }  if (oldState != null) {    for (    Filter oldFilter : oldState.filters) {      if (oldFilter.name == null || !defaultFilterNames.contains(oldFilter.name))       filters.add(oldFilter);    }  }}  }
class C{  public <T>GridClientFutureAdapter<T> chain(GridClientFutureCallback<R,T> cb){  GridClientFutureAdapter<T> fut=new GridClientFutureAdapter<>();  cbs.add(new DoneCallback<>(cb,null,fut));  if (isDone())   fireDone();  return fut;}  }
class C{  MessageInstanceImpl(String sourceId,Date date,String messageId,String messageText,String compId,Severity severity){  super();  m_sourceId=sourceId;  m_date=date;  m_msgId=messageId;  m_text=messageText;  m_componentId=compId;  m_severity=severity;}  }
class C{  public double approximationDistancePAA(double[] ts,int winSize,int paaSize,double normThreshold) throws Exception {  double resDistance=0d;  int windowCounter=0;  double pointsPerWindow=(double)winSize / (double)paaSize;  for (int i=0; i < ts.length - winSize + 1; i++) {    double[] subseries=Arrays.copyOfRange(ts,i,i + winSize);    if (tsProcessor.stDev(subseries) > normThreshold) {      subseries=tsProcessor.znorm(subseries,normThreshold);    }    double[] paa=tsProcessor.paa(subseries,paaSize);    windowCounter++;    double subsequenceDistance=0.;    for (int j=0; j < subseries.length; j++) {      int paaIdx=(int)Math.floor(((double)j + 0.5) / (double)pointsPerWindow);      if (paaIdx < 0) {        paaIdx=0;      }      if (paaIdx > paa.length) {        paaIdx=paa.length - 1;      }      subsequenceDistance=subsequenceDistance + ed.distance(paa[paaIdx],subseries[j]);    }    resDistance=resDistance + subsequenceDistance / subseries.length;  }  return resDistance / (double)windowCounter;}  }
class C{  @Override public Pane createRootPane(){  BorderPane root=new BorderPane();  ToolBar toolBar=new ToolBar();  clearBtn=new Button("Clear");  clearBtn.setOnAction(null);  strategyCombo=new ComboBox<String>();  strategyCombo.getItems().addAll("Minimax","Alpha-Beta","Iterative Deepening Alpha-Beta","Iterative Deepening Alpha-Beta (log)");  strategyCombo.getSelectionModel().select(0);  proposeBtn=new Button("Propose Move");  proposeBtn.setOnAction(null);  toolBar.getItems().addAll(clearBtn,new Separator(),strategyCombo,proposeBtn);  root.setTop(toolBar);  StackPane stateViewPane=new StackPane();  GridPane gridPane=new GridPane();  gridPane.maxWidthProperty().bind(Bindings.min(stateViewPane.widthProperty(),stateViewPane.heightProperty()).subtract(20));  gridPane.maxHeightProperty().bind(Bindings.min(stateViewPane.widthProperty(),stateViewPane.heightProperty()).subtract(20));  RowConstraints c1=new RowConstraints();  c1.setPercentHeight(100.0 / 3);  ColumnConstraints c2=new ColumnConstraints();  c2.setPercentWidth(100.0 / 3);  gridPane.setHgap(10);  gridPane.setVgap(10);  for (int i=0; i < 3; i++) {    gridPane.getRowConstraints().add(c1);    gridPane.getColumnConstraints().add(c2);  }  Font font=Font.font(40);  for (int i=0; i < 9; i++) {    Button btn=new Button();    btn.setOnAction(null);    btn.setFont(font);    btn.setMaxSize(Double.MAX_VALUE,Double.MAX_VALUE);    squareBtns[i]=btn;    gridPane.add(btn,i % 3,i / 3);  }  stateViewPane.getChildren().add(gridPane);  root.setCenter(stateViewPane);  statusLabel=new Label();  statusLabel.setMaxWidth(Double.MAX_VALUE);  statusLabel.setMaxWidth(Double.MAX_VALUE);  statusLabel.setAlignment(Pos.CENTER);  statusLabel.setFont(Font.font(16));  root.setBottom(statusLabel);  return root;}  }
class C{  public void add(double x,double y){  xStats.add(x);  if (isFinite(x) && isFinite(y)) {    if (xStats.count() > 1) {      sumOfProductsOfDeltas+=(x - xStats.mean()) * (y - yStats.mean());    }  } else {    sumOfProductsOfDeltas=NaN;  }  yStats.add(y);}  }
class C{  public static Entry updatePostTitle(BloggerService myService,Entry entryToUpdate,String newTitle) throws ServiceException, IOException {  entryToUpdate.setTitle(new PlainTextConstruct(newTitle));  URL editUrl=new URL(entryToUpdate.getEditLink().getHref());  return myService.update(editUrl,entryToUpdate);}  }
class C{  @Override public void performRequest(String request){  if (request.compareTo("Show chart") == 0) {    showChart();  } else {    throw new IllegalArgumentException(request + " not supported (StripChart)");  }}  }
class C{  public String process(String uri){  return uri.substring(directory.length() - 1);}  }
class C{  public void refresh(){  mediaPlayer.refresh();}  }
class C{  public void add(ExprSubselectNode subselectNode,SubSelectStrategyFactoryDesc prototypeHolder){  if (subqueries == null) {    subqueries=new HashMap<ExprSubselectNode,SubSelectStrategyFactoryDesc>();  }  subqueries.put(subselectNode,prototypeHolder);}  }
class C{  private void genCondBranch(int cc,int bTarget){  if (options.PROFILE_EDGE_COUNTERS) {    int entry=edgeCounterIdx;    edgeCounterIdx+=2;    loadCounterArray(T0);    ForwardReference fr=asm.emitForwardBC(Assembler.flipCode(cc));    incEdgeCounter(T0,T1,T2,entry + EdgeCounts.TAKEN);    asm.emitB(bytecodeMap[bTarget],bTarget);    fr.resolve(asm);    incEdgeCounter(T0,T1,T2,entry + EdgeCounts.NOT_TAKEN);  } else {    if (bTarget - SHORT_FORWARD_LIMIT < biStart) {      asm.emitShortBC(cc,bytecodeMap[bTarget],bTarget);    } else {      asm.emitBC(cc,bytecodeMap[bTarget],bTarget);    }  }}  }
class C{  @Override public void buildTrapEntries(Hashtable<InetAddress,Vector<String>> dest){}  }
class C{  private static Map<String,String> loadMapFromStringArrays(Context context,int keysResource,int valuesResource){  final Resources res=context.getResources();  final String[] keys=res.getStringArray(keysResource);  final String[] values=res.getStringArray(valuesResource);  if (keys.length != values.length) {    throw new IllegalArgumentException("Array size mismatch");  }  final Map<String,String> map=new HashMap<>();  for (int i=0; i < keys.length; i++) {    map.put(keys[i],values[i]);  }  return map;}  }
class C{  @Inline public static int initRC(ObjectReference object){  Word oldValue, newValue;  int rtn;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(RCBase.isRCObject(object));  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    newValue=oldValue.and(WRITE_MASK).or(INCREMENT);    if (RCBase.BUILD_FOR_GENRC) {      rtn=INC_OLD;    } else {      if (isHeaderNew(oldValue)) {        newValue=newValue.or(NEW_BIT_MASK);        rtn=INC_NEW;      } else {        rtn=INC_OLD;      }    }  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,newValue));  return rtn;}  }
class C{  public int equivHashCode(){  return getBootstrapMethod().equivHashCode() * getMethod().equivHashCode() * 17;}  }
class C{  public static CommonTransitions createFastSlide(int type,boolean forward,int duration,boolean drawDialogMenu){  CommonTransitions t=new CommonTransitions(TYPE_FAST_SLIDE);  t.slideType=type;  t.forward=forward;  t.speed=duration;  t.position=0;  t.drawDialogMenu=drawDialogMenu;  return t;}  }
class C{  public List<IMessage> deleteAfter(int index) throws RateLimitException, DiscordException, MissingPermissionsException {  return deleteAfter(index,size() - index);}  }
class C{  public static long andNotCount(FixedBitSet a,FixedBitSet b){  long tot=BitUtil.pop_andnot(a.bits,b.bits,0,Math.min(a.numWords,b.numWords));  if (a.numWords > b.numWords) {    tot+=BitUtil.pop_array(a.bits,b.numWords,a.numWords - b.numWords);  }  return tot;}  }
class C{  private String buildUnitOccupation(String propType,UnitTaxCalculationInfo unit){  LOGGER.debug("Entered into buildUnitOccupation, propType=" + propType);  StringBuilder occupierName=new StringBuilder();  if (OWNERSHIP_TYPE_VAC_LAND.equals(propType)) {    if (OCC_OWNER.equals(unit.getUnitOccupation()) || OCC_COMMERCIAL.equals(unit.getUnitOccupation())) {      occupierName.append(propType);    } else     if (OCC_TENANT.equals(unit.getUnitOccupation())) {      occupierName.append(OPEN_PLOT_SHORTFORM + "-" + unit.getUnitOccupier());    }  } else   if (PROPTYPE_RESD.equals(propType)) {    occupierName.append(RESD_SHORTFORM);  } else   if (PROPTYPE_NON_RESD.equals(propType)) {    occupierName.append(NONRESD_SHORTFORM);  } else   if (OWNERSHIP_TYPE_STATE_GOVT.equals(propType)) {    occupierName.append(STATE_GOVT_SHORTFORM + "-" + OCC_OWNER);  } else   if (OWNERSHIP_TYPE_CENTRAL_GOVT_50.equals(propType)) {    occupierName.append(CENTRAL_GOVT_SHORTFORM + "-" + OCC_OWNER);  } else   if (PROPTYPE_MIXED.equals(propType)) {    occupierName.append(MIXED_SHORTFORM);  }  if (!OWNERSHIP_TYPE_VAC_LAND.equals(propType) && !OWNERSHIP_TYPE_STATE_GOVT.equals(propType) && !OWNERSHIP_TYPE_CENTRAL_GOVT_50.equals(propType)) {    if (OCC_TENANT.equals(unit.getUnitOccupation())) {      occupierName.append("-" + unit.getUnitOccupier());    } else     if (OCC_OWNER.equals(unit.getUnitOccupation()) || OCC_COMMERCIAL.equals(unit.getUnitOccupation())) {      occupierName.append("-" + unit.getUnitOccupation());    }  }  LOGGER.debug("occupierName=" + occupierName.toString() + "\nExiting from buildUnitOccupation");  return occupierName.toString();}  }
class C{  @Override public void add(int field,int amount){  if (amount == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  complete();  if (field == YEAR) {    int year=internalGet(YEAR);    if (internalGetEra() == CE) {      year+=amount;      if (year > 0) {        set(YEAR,year);      } else {        set(YEAR,1 - year);        set(ERA,BCE);      }    } else {      year-=amount;      if (year > 0) {        set(YEAR,year);      } else {        set(YEAR,1 - year);        set(ERA,CE);      }    }    pinDayOfMonth();  } else   if (field == MONTH) {    int month=internalGet(MONTH) + amount;    int year=internalGet(YEAR);    int y_amount;    if (month >= 0) {      y_amount=month / 12;    } else {      y_amount=(month + 1) / 12 - 1;    }    if (y_amount != 0) {      if (internalGetEra() == CE) {        year+=y_amount;        if (year > 0) {          set(YEAR,year);        } else {          set(YEAR,1 - year);          set(ERA,BCE);        }      } else {        year-=y_amount;        if (year > 0) {          set(YEAR,year);        } else {          set(YEAR,1 - year);          set(ERA,CE);        }      }    }    if (month >= 0) {      set(MONTH,month % 12);    } else {      month%=12;      if (month < 0) {        month+=12;      }      set(MONTH,JANUARY + month);    }    pinDayOfMonth();  } else   if (field == ERA) {    int era=internalGet(ERA) + amount;    if (era < 0) {      era=0;    }    if (era > 1) {      era=1;    }    set(ERA,era);  } else {    long delta=amount;    long timeOfDay=0;switch (field) {case HOUR:case HOUR_OF_DAY:      delta*=60 * 60 * 1000;    break;case MINUTE:  delta*=60 * 1000;break;case SECOND:delta*=1000;break;case MILLISECOND:break;case WEEK_OF_YEAR:case WEEK_OF_MONTH:case DAY_OF_WEEK_IN_MONTH:delta*=7;break;case DAY_OF_MONTH:case DAY_OF_YEAR:case DAY_OF_WEEK:break;case AM_PM:delta=amount / 2;timeOfDay=12 * (amount % 2);break;}if (field >= HOUR) {setTimeInMillis(time + delta);return;}long fd=getCurrentFixedDate();timeOfDay+=internalGet(HOUR_OF_DAY);timeOfDay*=60;timeOfDay+=internalGet(MINUTE);timeOfDay*=60;timeOfDay+=internalGet(SECOND);timeOfDay*=1000;timeOfDay+=internalGet(MILLISECOND);if (timeOfDay >= ONE_DAY) {fd++;timeOfDay-=ONE_DAY;} else if (timeOfDay < 0) {fd--;timeOfDay+=ONE_DAY;}fd+=delta;int zoneOffset=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);setTimeInMillis((fd - EPOCH_OFFSET) * ONE_DAY + timeOfDay - zoneOffset);zoneOffset-=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);if (zoneOffset != 0) {setTimeInMillis(time + zoneOffset);long fd2=getCurrentFixedDate();if (fd2 != fd) {setTimeInMillis(time - zoneOffset);}}}}  }
class C{  public String printLeafModels(){  StringBuffer text=new StringBuffer();  if (m_isLeaf) {    text.append("\nLeaf number: " + m_id + " ");    text.append(m_localModel.toString());    text.append("\n");  } else {    for (    ClassifierTree m_son : m_sons) {      text.append(((NBTreeClassifierTree)m_son).printLeafModels());    }  }  return text.toString();}  }
class C{  public StateRootItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void addTunerConfigurations(List<TunerConfiguration> configs){  for (  TunerConfiguration config : configs) {    addTunerConfiguration(config);  }}  }
class C{  private void resetFilters(){  mSelection=null;  mSelectionArgs=null;}  }
class C{  public FluentFunction<T2,R> partiallyApply(final T1 param){  return new FluentFunction<>(PartialApplicator.partial2(param,fn));}  }
class C{  public Dependencies remove(Dependency dependency){  if (dependencies().remove(requireNonNull(dependency,"Required not null dependency")) && !isNew()) {    removeDependencyFromXML(dependency);  }  return this;}  }
class C{  @Override public int compareTo(final MutableBoolean other){  return BooleanUtils.compare(this.value,other.value);}  }
class C{  @PostPersist public void postPersist(final Object entity){  notifyAll(null);}  }
class C{  void pushElemTemplateElement(ElemTemplateElement elem){  if (elem.getUid() == -1)   elem.setUid(nextUid());  m_elems.push(elem);}  }
class C{  ConfProxyUtilViewConf(){  super("confproxy-view-conf");  getOptions().addOption(PROXY_INSTANCE).addOption("a","all",false,"show configurations for all instances");}  }
class C{  public PowerVmAllocationPolicyMigrationLocalRegression(List<? extends Host> hostList,PowerVmSelectionPolicy vmSelectionPolicy,double safetyParameter,double schedulingInterval,PowerVmAllocationPolicyMigrationAbstract fallbackVmAllocationPolicy,double utilizationThreshold){  super(hostList,vmSelectionPolicy);  setSafetyParameter(safetyParameter);  setSchedulingInterval(schedulingInterval);  setFallbackVmAllocationPolicy(fallbackVmAllocationPolicy);}  }
class C{  public FormField(String variable){  this.variable=variable;}  }
class C{  public void startIngestion(){  startCounter++;}  }
class C{  protected void end(String filename,String key,String message){  getLogger(filename).end(key,message);}  }
class C{  @PreAuthorize("hasRole('ROLE_SYSTEM_MANAGER')") public int synchronizeLocalArchive() throws DataStoreLocalArchiveNotExistingException {  try {    return productService.processArchiveSync();  } catch (  InterruptedException e) {    logger.warn("Synchronization stopped by the user.");  }  return -1;}  }
class C{  @Override public void formatOperandsAndComment(StatementContext context,boolean updateRegisters,Set<OutputOption> outputOptions){  int tmp;  int pos;  boolean writeDirection=false;  decodedImm=imm;  decodedRiRsFs=ri_rs_fs;  decodedRjRtFt=rj_rt_ft;  StringBuilder operandBuffer=new StringBuilder();  StringBuilder commentBuffer=new StringBuilder();  StringBuilder currentBuffer=operandBuffer;  for (  char formatChar : getInstruction().getOperandFormat().toCharArray()) {switch (formatChar) {case '#':      currentBuffer.append(fmt_imm);    break;case ';':  currentBuffer=commentBuffer;break;case 'T':currentBuffer.append("INT");break;case 'a':pos=immBitWidth;while (pos >= 8) {pos-=8;currentBuffer.append(Format.asAscii(decodedImm >> pos));}break;case 'f':pos=immBitWidth >> 1;tmp=(int)(((1L << pos) - 1) & (decodedImm >> pos));int tmq=(int)(((1L << pos) - 1) & decodedImm);if (tmq != 0) currentBuffer.append(((double)tmp) / tmq); else currentBuffer.append("NaN");break;case 'u':currentBuffer.append(Format.asHexInBitsLength((outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x"),decodedImm,immBitWidth));break;case 'v':currentBuffer.append((outputOptions.contains(OutputOption.DOLLAR) ? "$" : "0x") + Format.asHex(0xFF - (0xFF & ((context.cpuState.pc - memRangeStart) / 4)),1));break;default :currentBuffer.append(formatChar);break;}}setOperandString(operandBuffer.toString());setCommentString(commentBuffer.toString());int r=ArmCPUState.NOREG;for (char s : instruction.getAction().toCharArray()) {switch (s) {default :System.err.println("bad action '" + s + "' in "+ instruction+ " at "+ Format.asHex(context.cpuState.pc,8));break;}}setDelaySlotType(Instruction.DelaySlotType.NONE);}  }
class C{  public void gcspyGatherData(int event,TreadmillDriver losDriver,boolean tospace){  ((LargeObjectSpace)space).getTreadmill().gcspyGatherData(event,losDriver,tospace);}  }
class C{  public long size(){  return size;}  }
class C{  public void initiateDownload() throws Exception {  String filename=DOWNLOAD_5MB_FILENAME;  mContext.deleteFile(DOWNLOAD_STARTED_FLAG);  FileOutputStream fileOutput=mContext.openFileOutput(DOWNLOAD_STARTED_FLAG,0);  DataOutputStream outputFile=null;  doCommonDownloadSetup();  try {    long dlRequest=-1;    removeAllCurrentDownloads();    Uri remoteUri=getExternalFileUri(filename);    Request request=new Request(remoteUri);    dlRequest=mDownloadManager.enqueue(request);    waitForDownloadToStart(dlRequest);    assertTrue(dlRequest != -1);    outputFile=new DataOutputStream(fileOutput);    outputFile.writeLong(dlRequest);  }  finally {    if (outputFile != null) {      outputFile.flush();      outputFile.close();    }  }}  }
class C{  public BigInteger calculateAgreement(CipherParameters pubKey){  DHPublicKeyParameters pub=(DHPublicKeyParameters)pubKey;  if (!pub.getParameters().equals(dhParams)) {    throw new IllegalArgumentException("Diffie-Hellman public key has wrong parameters.");  }  return pub.getY().modPow(key.getX(),dhParams.getP());}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public CRemoveModuleAction(final JFrame parent,final INaviAddressSpace addressSpace,final INaviModule[] modules){  super("Remove Module");  m_parent=Preconditions.checkNotNull(parent,"IE01911: Parent argument can't be null");  m_addressSpace=Preconditions.checkNotNull(addressSpace,"IE01912: Address space argument can't be null");  m_modules=Preconditions.checkNotNull(modules,"IE01913: Modules argument can't be null");  for (  final INaviModule module : modules) {    Preconditions.checkNotNull(module,"IE01914: Modules list contains a null-element");  }  putValue(ACCELERATOR_KEY,HotKeys.DELETE_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_REMOVE_MODULE".charAt(0));}  }
class C{  public PairedStats snapshot(){  return new PairedStats(xStats.snapshot(),yStats.snapshot(),sumOfProductsOfDeltas);}  }
class C{  @Override protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  String name=req.getParameter("name");  String url=req.getParameter("url");  String durationStr=req.getParameter("duration");  long duration=-1;  try {    duration=Long.parseLong(durationStr);  } catch (  NumberFormatException e) {  }  if (name == null || url == null || durationStr == null || name.trim().length() < 1 || url.trim().length() < 10 || durationStr.trim().length() < 1 || duration <= 0) {    resp.setContentType("text/html");    resp.sendError(400,"Missing ['name','duration','url'].");  } else {    Video v=new Video(name,url,duration);    videos.add(v);    resp.getWriter().write("<html><body>" + VIDEO_ADDED);    processRequest(req,resp);  }}  }
class C{  public static ExecutorService executor(){  return executorService;}  }
class C{  private final boolean checkDouble(double in,Condition condition){  String value=condition.getValue();  double v;  try {    v=Double.parseDouble(value);  } catch (  NumberFormatException e) {    return false;  }switch (condition.getConditionType()) {case EQUALS:{      return (in == v);    }case NOT_EQUALS:{    return (in != v);  }case GREATER:{  return (in > v);}case GREATER_EQ:{return (in >= v);}case LESS:{return (in < v);}case LESS_EQ:{return (in <= v);}default :{return false;}}}  }
class C{  protected void layoutWest(DockWrapper base,int x,int y,int maxwidth,int maxheight){  for (Iterator iter=base.getDockedWrappers().iterator(); iter.hasNext(); ) {    DockWrapper dw=(DockWrapper)iter.next();    Dimension d=dw.getPreferredSize();    int w=min(d.width,maxwidth);    int h=min(d.height,maxheight);    dw.setBounds(x,y,w,h);    if (!dw.canOcclude()) {      updateLeft(backgroundBounds,x + w);    }    updateLeft(occludingBounds,x + w);    layoutWest(dw,x + w,y,maxwidth - w,maxheight);    y+=h;    maxheight-=h;  }}  }
class C{  @Override protected boolean hasRequestContent(){  return true;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.027 -0500",hash_original_method="EDF3772DB206CC7034C0B4AE87D72F1A",hash_generated_method="2A24C773588AAE50B0BEBB88EBB18FAE") @Deprecated public BitmapDrawable(Bitmap bitmap){  this(new BitmapState(bitmap),null);}  }
class C{  public DisableFeatureAction(final String feature){  this.feature=checkNotNull(feature);}  }
class C{  public static int hex2Dec(String hexString,int index,int n,int result){  int dec=0;  if (hexString.charAt(index) >= 'A' && hexString.charAt(index) <= 'F') {    dec=(hexString.charAt(index) - 'A') + 10;  } else {    dec=Integer.parseInt(String.valueOf(hexString.charAt(index)));  }  dec*=(int)Math.pow(16,n);  if (n == 0)   return result + dec; else   return hex2Dec(hexString,index + 1,n - 1,dec + result);}  }
class C{  public TDoubleHashSet(){}  }
class C{  public static boolean performLocal(IR ir){  Instruction outer=ir.cfg.entry().firstRealInstruction();  if (VERBOSE) {    System.out.println("Start of expression folding for: " + ir.method.toString());  }  boolean didSomething=false;  while (outer != null) {    Register outerDef=isCandidateExpression(outer,false);    if (outerDef != null) {      if (VERBOSE) {        System.out.println("Found outer candidate of: " + outer.toString());      }      Instruction inner=outer.nextInstructionInCodeOrder();      loop_over_inner_instructions:       while ((inner != null) && (inner.operator() != BBEND) && !inner.isGCPoint()) {        if (!FOLD_OVER_UNINTERRUPTIBLE && ((inner.operator() == UNINT_BEGIN) || (inner.operator() == UNINT_END))) {          break loop_over_inner_instructions;        }        Register innerDef=isCandidateExpression(inner,false);        if (innerDef != null) {          if (VERBOSE) {            System.out.println("Found inner candidate of: " + inner.toString());          }          RegisterOperand use=getUseFromCandidate(inner);          if ((use != null) && (use.getRegister() == outerDef)) {            Instruction newInner;            try {              if (VERBOSE) {                System.out.println("Trying to fold:" + outer.toString());                System.out.println("          with:" + inner.toString());              }              newInner=transform(inner,outer);            } catch (            OptimizingCompilerException e) {              OptimizingCompilerException newE=new OptimizingCompilerException("Error transforming " + outer + " ; "+ inner);              newE.initCause(e);              throw newE;            }            if (newInner != null) {              if (VERBOSE) {                System.out.println("Replacing:" + inner.toString());                System.out.println("     with:" + newInner.toString());              }              DefUse.replaceInstructionAndUpdateDU(inner,CPOS(inner,newInner));              inner=newInner;              didSomething=true;            }          }        }        if (innerDef == outerDef) {          if (VERBOSE) {            System.out.println("Stopping search as innerDef == outerDef " + innerDef.toString());          }          break loop_over_inner_instructions;        }        if (innerDef == null) {          Enumeration<Operand> defs=inner.getDefs();          while (defs.hasMoreElements()) {            Operand def=defs.nextElement();            if (def.isRegister()) {              Register defReg=def.asRegister().getRegister();              if (defReg == outerDef) {                if (VERBOSE) {                  System.out.println("Stopping search as innerDef == outerDef " + defReg.toString());                }                break loop_over_inner_instructions;              }            }          }        }        if (innerDef != null) {          Enumeration<Operand> uses=outer.getUses();          while (uses.hasMoreElements()) {            Operand use=uses.nextElement();            if (use.isRegister() && (use.asRegister().getRegister() == innerDef)) {              if (VERBOSE) {                System.out.println("Stopping search as anti-dependence " + use.toString());              }              break loop_over_inner_instructions;            }          }        } else {          Enumeration<Operand> defs=inner.getDefs();          while (defs.hasMoreElements()) {            Operand def=defs.nextElement();            if (def.isRegister()) {              Enumeration<Operand> uses=outer.getUses();              while (uses.hasMoreElements()) {                Operand use=uses.nextElement();                if (use.similar(def)) {                  if (VERBOSE) {                    System.out.println("Stopping search as anti-dependence " + use.toString());                  }                  break loop_over_inner_instructions;                }              }            }          }        }        inner=inner.nextInstructionInCodeOrder();      }    }    outer=outer.nextInstructionInCodeOrder();  }  return didSomething;}  }
class C{  @Override protected void integrityCheckParameters(MkMaxEntry parentEntry,MkMaxTreeNode<O> parent,int index,AbstractMTree<O,MkMaxTreeNode<O>,MkMaxEntry,?> mTree){  super.integrityCheckParameters(parentEntry,parent,index,mTree);  MkMaxEntry entry=parent.getEntry(index);  double knnDistance=kNNDistance();  if (Math.abs(entry.getKnnDistance() - knnDistance) > 0) {    throw new RuntimeException("Wrong knnDistance in node " + parent.getPageID() + " at index "+ index+ " (child "+ entry+ ")"+ "\nsoll: "+ knnDistance+ ",\n ist: "+ entry.getKnnDistance());  }}  }
class C{  public boolean isDestroyMessage(){  if (message == null) {    throw new IllegalStateException("no message present");  }  return !callee.equals("") && (message.equals("destroy") || message.startsWith("destroy("));}  }
class C{  public void createWeekScenarioParAndRoleChange2() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance("2013-02-01 00:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PARCHARGE_PU_WEEK_ROLES2",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PARCHARGE_PU_WEEK_ROLES2",serviceDetails,basicSetup.getCustomerUser1(),role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-04 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-04 00:00:00"),"MAX_FOLDER_NUMBER","2");  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-11 00:00:00"),"MAX_FOLDER_NUMBER","7");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-14 12:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"GUEST"),subDetails.getSubscriptionId());  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-02-19 18:00:00"),"MAX_FOLDER_NUMBER","13");  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-25 00:00:00"));  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PARCHARGE_PU_WEEK_ROLES2",subDetails);}  }
class C{  public VerticalIntDataBox(int[][] data){  int length=data[0].length;  for (  int[] datum : data) {    if (datum.length != length) {      throw new IllegalArgumentException("All columns must have same length.");    }  }  this.data=data;}  }
class C{  protected void deleteDescriptor(String id,String nombre,String nombreLista){  Locale locale=getServiceClient().getLocale();  iniciarTransaccion();  AuditoriaDescripcion.auditaEliminacionDescriptor(locale,this,id,nombre,nombreLista);  deleteFicha(id,TipoFicha.FICHA_DESCRIPTOR);  GestionDocumentosElectronicosBI documentosBI=getGestionDocumentosElectronicosBI();  documentosBI.deleteDocumentos(id,TipoObjeto.DESCRIPTOR);  documentosBI.eliminarTareas(id,ElementoCuadroClasificacion.TIPO_DESCRIPTOR);  descriptorDBEntity.deleteDescriptor(id);  commit();}  }
class C{  public Builder port(int port){  this.port=Integer.toString(port);  return this;}  }
class C{  public void calculatePartials(int nodeIndex1,int nodeIndex2,int nodeIndex3){  if (states[nodeIndex1] != null) {    if (states[nodeIndex2] != null) {      calculateStatesStatesPruning(states[nodeIndex1],matrices[currentMatricesIndices[nodeIndex1]][nodeIndex1],states[nodeIndex2],matrices[currentMatricesIndices[nodeIndex2]][nodeIndex2],partials[currentPartialsIndices[nodeIndex3]][nodeIndex3]);    } else {      calculateStatesPartialsPruning(states[nodeIndex1],matrices[currentMatricesIndices[nodeIndex1]][nodeIndex1],partials[currentPartialsIndices[nodeIndex2]][nodeIndex2],matrices[currentMatricesIndices[nodeIndex2]][nodeIndex2],partials[currentPartialsIndices[nodeIndex3]][nodeIndex3]);    }  } else {    if (states[nodeIndex2] != null) {      calculateStatesPartialsPruning(states[nodeIndex2],matrices[currentMatricesIndices[nodeIndex2]][nodeIndex2],partials[currentPartialsIndices[nodeIndex1]][nodeIndex1],matrices[currentMatricesIndices[nodeIndex1]][nodeIndex1],partials[currentPartialsIndices[nodeIndex3]][nodeIndex3]);    } else {      calculatePartialsPartialsPruning(partials[currentPartialsIndices[nodeIndex1]][nodeIndex1],matrices[currentMatricesIndices[nodeIndex1]][nodeIndex1],partials[currentPartialsIndices[nodeIndex2]][nodeIndex2],matrices[currentMatricesIndices[nodeIndex2]][nodeIndex2],partials[currentPartialsIndices[nodeIndex3]][nodeIndex3]);    }  }}  }
class C{  public PersonalityInsights(final String versionDate){  super(SERVICE_NAME);  if ((getEndPoint() == null) || getEndPoint().isEmpty()) {    setEndPoint(URL);  }  Validator.isTrue((versionDate != null) && !versionDate.isEmpty(),"'version cannot be null. Use " + VERSION_DATE_2016_10_19);  this.versionDate=versionDate;}  }
class C{  public void clear(){  removeAll(false);}  }
class C{  int readUtah(int row,int column,int numRows,int numColumns){  int currentByte=0;  if (readModule(row - 2,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 2,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row - 1,column,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(row,column,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"onCreate(): activity re-created");  } else {    Log.d(TAG,"onCreate(): activity created anew");  }}  }
class C{  @Override public CacheHeader put(String key,CacheHeader entry){  waitForKey(key);  if (super.containsKey(key)) {    mTotalSize.getAndAdd(entry.size - super.get(key).size);  } else {    mTotalSize.getAndAdd(entry.size);  }  return super.put(key,entry);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthEditorPaneUI();}  }
class C{  public Point toViewCoordinates(Point p){  return new Point(p);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentinvalidcharacterexceptioncreateentref1.class,args);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Location defaultLocation(){  return LocationImpl.defaultInstance();}  }
class C{  public Label buildCaptionLabel(){  final Label label=createLabel();  label.setValue(name);  label.addStyleName("header-caption");  return label;}  }
class C{  @Description(summary="Create h2android.jar with only the embedded DB and H2 Android API.") public void jarAndroid(){  compile(false,false,true);  FileList files=files("temp").exclude("temp/org/h2/bnf/*").exclude("temp/org/h2/build/*").exclude("temp/org/h2/dev/*").exclude("temp/org/h2/fulltext/*").exclude("temp/org/h2/jaqu/*").exclude("temp/org/h2/java/*").exclude("temp/org/h2/jdbcx/*").exclude("temp/org/h2/jcr/*").exclude("temp/org/h2/jmx/*").exclude("temp/org/h2/mode/*").exclude("temp/org/h2/samples/*").exclude("temp/org/h2/server/*").exclude("temp/org/h2/test/*").exclude("temp/org/h2/tools/*").exclude("*.bat").exclude("*.sh").exclude("*.txt").exclude("*.DS_Store");  files=excludeTestMetaInfFiles(files);  files.add(new File("temp/org/h2/tools/DeleteDbFiles.class"));  files.add(new File("temp/org/h2/tools/CompressTool.class"));  jar("bin/h2android" + getJarSuffix(),files,"temp");}  }
class C{  public void complete(){  complete(null,null,false);}  }
class C{  public Dimension(int width,int height){  this.width=width;  this.height=height;}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  @Override public int hashCode(){  int result=127;  result=HashUtilities.hashCode(result,this.formatPattern);  return result;}  }
class C{  public DellSCSnapshots(){  this.connectionManager=DellSCConnectionManager.getInstance();  this.util=DellSCUtil.getInstance();}  }
class C{  private void grow(){  final int newsize=store.length + (store.length >>> 1);  final int[] prev=store;  store=new int[newsize];  System.arraycopy(prev,0,store,0,size);}  }
class C{  public Block cloneAsHeader(){  maybeParseHeader();  Block block=new Block(params);  block.nonce=nonce;  block.prevBlockHash=prevBlockHash.duplicate();  block.merkleRoot=getMerkleRoot().duplicate();  block.version=version;  block.time=time;  block.difficultyTarget=difficultyTarget;  block.transactions=null;  block.hash=getHash().duplicate();  return block;}  }
class C{  public HalfEdge prev(){  return sym.next().sym;}  }
class C{  public CProjectWrapper(final INaviProject project){  m_project=project;}  }
class C{  XPDefaultRenderer(){  setHorizontalAlignment(LEADING);  setVerticalAlignment(CENTER);}  }
class C{  public void updateInventory(UpdateInventory update) throws Exception {  Thread.sleep(100);  LOG.info("Inventory " + update.getPartId() + " updated");}  }
class C{  protected void bindTabActionListener(Component tab,ActionListener l){  ((Button)tab).addActionListener(l);}  }
class C{  public void sendData(byte[][] data,String targetHostName,int targetPort,long interval){  sendData(data,0,data.length,targetHostName,targetPort,interval);}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(byte1);  buffer.setAtIndexAndInc(byte2);  super.loadByteArray(buffer);}  }
class C{  @Override protected MiniFluo startMiniFluo() throws AlreadyInitializedException, TableExistsException {  final List<ObserverSpecification> observers=new ArrayList<>();  final FluoConfiguration config=new FluoConfiguration();  config.setMiniStartAccumulo(false);  config.setAccumuloInstance(instanceName);  config.setAccumuloUser(ACCUMULO_USER);  config.setAccumuloPassword(ACCUMULO_PASSWORD);  config.setInstanceZookeepers(zookeepers + "/fluo");  config.setAccumuloZookeepers(zookeepers);  config.setApplicationName(FLUO_APP_NAME);  config.setAccumuloTable("fluo" + FLUO_APP_NAME);  config.addObservers(observers);  FluoFactory.newAdmin(config).initialize(new FluoAdmin.InitializationOptions().setClearTable(true).setClearZookeeper(true));  final MiniFluo miniFluo=FluoFactory.newMiniFluo(config);  return miniFluo;}  }
class C{  private void computeCurrentPi(){  for (int i=0; i < this.values[this.currentVar1].length; i++) {    for (int j=0; j < this.values[this.currentVar2].length; j++) {      this.currentPi[i][j]=this.currentFiBuffer[i + 1][j + 1] - this.currentFiBuffer[i][j + 1] - this.currentFiBuffer[i + 1][j] + this.currentFiBuffer[i][j];    }  }}  }
class C{  public static long longForQuery(SQLiteDatabase db,String query,String[] selectionArgs){  SQLiteStatement prog=db.compileStatement(query);  try {    return longForQuery(prog,selectionArgs);  }  finally {    prog.close();  }}  }
class C{  public int compareTo(Object o){  InstanceTime it=(InstanceTime)o;  if (time == it.time)   return 0;  if (time > it.time)   return 1;  return -1;}  }
class C{  public String readUntil(char... end){  final StringBuilder sb=new StringBuilder();  int pos=this.pos;  while (pos < this.value.length()) {    final char ch=this.value.charAt(pos);    if (ch == '\\' && pos + 1 < this.value.length()) {      final char c;switch (c=this.value.charAt(pos + 1)) {case '\\':case '[':case ']':case '(':case ')':case '{':case '}':case '#':case '"':case '\'':case '.':case '>':case '*':case '+':case '-':case '_':case '!':case '`':        sb.append(c);      pos++;    break;default :  sb.append(ch);break;}} else {boolean endReached=false;for (final char anEnd : end) {if (ch == anEnd) {endReached=true;break;}}if (endReached) {break;}sb.append(ch);}pos++;}final char ch=pos < this.value.length() ? this.value.charAt(pos) : '\n';for (final char anEnd : end) {if (ch == anEnd) {this.pos=pos;return sb.toString();}}return null;}  }
class C{  private void jbInit() throws Exception {  CompiereColor.setBackground(panel);  southPanel.setLayout(southLayout);  southLayout.setAlignment(FlowLayout.RIGHT);  centerPanel.setLayout(centerLayout);  bPrint.addActionListener(this);  bExport.addActionListener(this);  bCancel.addActionListener(this);  bProcess.setText(Msg.getMsg(Env.getCtx(),"EFT"));  bProcess.setEnabled(false);  bProcess.addActionListener(this);  lPaySelect.setText(Msg.translate(Env.getCtx(),"C_PaySelection_ID"));  lBank.setText(Msg.translate(Env.getCtx(),"C_BankAccount_ID"));  lPaymentRule.setText(Msg.translate(Env.getCtx(),"PaymentRule"));  fPaymentRule.addActionListener(this);  lDocumentNo.setText(Msg.translate(Env.getCtx(),"DocumentNo"));  fDocumentNo.setDisplayType(DisplayType.Integer);  lNoPayments.setText(Msg.getMsg(Env.getCtx(),"NoOfPayments"));  fNoPayments.setText("0");  lBalance.setText(Msg.translate(Env.getCtx(),"CurrentBalance"));  fBalance.setReadWrite(false);  fBalance.setDisplayType(DisplayType.Amount);  lCurrency.setText(Msg.translate(Env.getCtx(),"C_Currency_ID"));  southPanel.add(bCancel,null);  southPanel.add(bExport,null);  southPanel.add(bPrint,null);  southPanel.add(bProcess,null);  centerPanel.add(lPaySelect,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(12,12,5,5),0,0));  centerPanel.add(paySelectSearch,new GridBagConstraints(1,0,3,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(12,0,5,12),0,0));  centerPanel.add(lBank,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fBank,new GridBagConstraints(1,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lPaymentRule,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fPaymentRule,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lDocumentNo,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fDocumentNo,new GridBagConstraints(1,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lNoPayments,new GridBagConstraints(2,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fNoPayments,new GridBagConstraints(3,3,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lBalance,new GridBagConstraints(2,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,5,5),0,0));  centerPanel.add(fBalance,new GridBagConstraints(3,1,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,5,12),0,0));  centerPanel.add(lCurrency,new GridBagConstraints(2,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,12,12,5),0,0));  centerPanel.add(fCurrency,new GridBagConstraints(3,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(0,0,12,12),0,0));}  }
class C{  public ShopSign(final String name,final String title,final String caption,final boolean seller){  super();  this.shopName=name;  this.title=title;  this.caption=caption;  this.seller=seller;  put(Actions.ACTION,Actions.LOOK_CLOSELY);  setResistance(100);}  }
class C{  @Deprecated public String asV1Beta1Path(){  if (type == Type.NORMAL) {    return "/subscriptions/" + project + "/"+ subscription;  } else {    return subscription;  }}  }
class C{  @Override public String validateInputFilePatternSupported(String filepattern){  GcsPath gcsPath=getGcsPath(filepattern);  checkArgument(gcpOptions.getGcsUtil().isGcsPatternSupported(gcsPath.getObject()));  String returnValue=verifyPath(filepattern);  verifyPathIsAccessible(filepattern,"Could not find file %s");  return returnValue;}  }
class C{  public RVMField findDeclaredField(Atom fieldName){  for (  RVMField field : declaredFields) {    if (field.getName() == fieldName) {      return field;    }  }  return null;}  }
class C{  public static double parsimonyFitness(GEPIndividual ind,double fitness,double parsimonyFactor){  GEPSpecies gepspecies=(GEPSpecies)ind.species;  int smin=gepspecies.numberOfGenes;  int sizeOfGene=gepspecies.geneSize;  int smax=smin * sizeOfGene;  int sind=(int)ind.size();  return fitness * (1.0 + (((double)(smax - sind)) / (((double)(smax - smin)) * parsimonyFactor)));}  }
class C{  public void readExif(byte[] jpeg) throws IOException {  readExif(new ByteArrayInputStream(jpeg));}  }
class C{  public boolean isEmpty(){  return classDefs.items().isEmpty();}  }
class C{  public boolean hasRedoSteps(){  return undoIndex < undoManager.getNumberOfUndos() - 1;}  }
class C{  public BitcoinURI(@Nullable NetworkParameters params,String input) throws BitcoinURIParseException {  checkNotNull(input);  String scheme=null == params ? AbstractBitcoinNetParams.BITCOIN_SCHEME : params.getUriScheme();  URI uri;  try {    uri=new URI(input);  } catch (  URISyntaxException e) {    throw new BitcoinURIParseException("Bad URI syntax",e);  }  String blockchainInfoScheme=scheme + "://";  String correctScheme=scheme + ":";  String schemeSpecificPart;  if (input.startsWith(blockchainInfoScheme)) {    schemeSpecificPart=input.substring(blockchainInfoScheme.length());  } else   if (input.startsWith(correctScheme)) {    schemeSpecificPart=input.substring(correctScheme.length());  } else {    throw new BitcoinURIParseException("Unsupported URI scheme: " + uri.getScheme());  }  String[] addressSplitTokens=schemeSpecificPart.split("\\?",2);  if (addressSplitTokens.length == 0)   throw new BitcoinURIParseException("No data found after the bitcoin: prefix");  String addressToken=addressSplitTokens[0];  String[] nameValuePairTokens;  if (addressSplitTokens.length == 1) {    nameValuePairTokens=new String[]{};  } else {    nameValuePairTokens=addressSplitTokens[1].split("&");  }  parseParameters(params,addressToken,nameValuePairTokens);  if (!addressToken.isEmpty()) {    try {      Address address=Address.fromBase58(params,addressToken);      putWithValidation(FIELD_ADDRESS,address);    } catch (    final AddressFormatException e) {      throw new BitcoinURIParseException("Bad address",e);    }  }  if (addressToken.isEmpty() && getPaymentRequestUrl() == null) {    throw new BitcoinURIParseException("No address and no r= parameter found");  }}  }
class C{  public FileEntry createFile(String name,byte[] content) throws ForbiddenException, ConflictException, ServerException {  if (isRoot(getVirtualFile())) {    throw new ForbiddenException("Can't create file in root folder.");  }  return createFile(name,content == null ? null : new ByteArrayInputStream(content));}  }
class C{  @Override public void clear(){  super.clear();  flags=0;  payload=null;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterMoreInfoManufacturer);}  }
class C{  public static long toLong(byte[] bytes,int index){  return ((((long)bytes[index + 7]) << 56) | (((long)bytes[index + 6] & 0xff) << 48) | (((long)bytes[index + 5] & 0xff) << 40)| (((long)bytes[index + 4] & 0xff) << 32)| (((long)bytes[index + 3] & 0xff) << 24)| (((long)bytes[index + 2] & 0xff) << 16)| (((long)bytes[index + 1] & 0xff) << 8)| (((long)bytes[index] & 0xff)));}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }}  }
class C{  public static int compute1(int x){  int lo=16807 * (x & 0xFFFF);  int hi=16807 * (x >>> 16);  lo+=(hi & 0x7FFF) << 16;  if ((lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  lo+=hi >>> 15;  if (lo == 0 || (lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  return lo;}  }
class C{  boolean notifyBeforeCompletion(){  Iterator iterator=syncList.iterator();  boolean result=true;  while (iterator.hasNext()) {    sync=((Synchronization)iterator.next());    sync.beforeCompletion();  }  return result;}  }
class C{  public boolean waitToStart(long timeout) throws InterruptedException {  if (Thread.interrupted())   throw new InterruptedException();  long start=System.currentTimeMillis();  while (System.currentTimeMillis() - start < timeout) {    if (this.isRunning()) {      return true;    } else {      Thread.sleep(100);    }  }  logger.info(LocalizedMessage.create(LocalizedStrings.DistributionLocatorImpl_DONE_WAITING_FOR_LOCATOR));  return this.isRunning();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_DERIVED_ATTRIBUTE_3__MORE_CODE_1:    return moreCode_1 != null && !moreCode_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private void writeComponent(ICalComponent component,ICalComponent parent) throws IOException {  boolean inICalendar=component instanceof ICalendar;  boolean inVCalRoot=inICalendar && getTargetVersion() == ICalVersion.V1_0;  boolean inICalRoot=inICalendar && getTargetVersion() != ICalVersion.V1_0;  ICalComponentScribe componentScribe=index.getComponentScribe(component);  try {    componentScribe.checkForDataModelConversions(component,parent,getTargetVersion());  } catch (  DataModelConversionException e) {    for (    ICalComponent c : e.getComponents()) {      writeComponent(c,parent);    }    for (    ICalProperty p : e.getProperties()) {      writeProperty(p);    }    return;  }  writer.writeBeginComponent(componentScribe.getComponentName());  List propertyObjs=componentScribe.getProperties(component);  if (inICalendar && component.getProperty(Version.class) == null) {    propertyObjs.add(0,new Version(getTargetVersion()));  }  for (  Object propertyObj : propertyObjs) {    context.setParent(component);    ICalProperty property=(ICalProperty)propertyObj;    writeProperty(property);  }  List subComponents=componentScribe.getComponents(component);  if (inICalRoot) {    Collection<VTimezone> timezones=getTimezoneComponents();    for (    VTimezone timezone : timezones) {      if (!subComponents.contains(timezone)) {        subComponents.add(0,timezone);      }    }  }  for (  Object subComponentObj : subComponents) {    ICalComponent subComponent=(ICalComponent)subComponentObj;    writeComponent(subComponent,component);  }  if (inVCalRoot) {    Collection<VTimezone> timezones=getTimezoneComponents();    if (!timezones.isEmpty()) {      VTimezone timezone=timezones.iterator().next();      VCalTimezoneProperties props=convert(timezone,context.getDates());      Timezone tz=props.getTz();      if (tz != null) {        writeProperty(tz);      }      for (      Daylight daylight : props.getDaylights()) {        writeProperty(daylight);      }    }  }  writer.writeEndComponent(componentScribe.getComponentName());}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  Log.i(TAG,"Ready");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isZero(BigDecimal value){  return isEqual(value,BigDecimal.ZERO);}  }
class C{  @Deprecated static public MarklinTrafficController instance(){  return self;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__AST_ELEMENT:    return astElement != null;case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__MODULE:  return module != null;case TypesPackage.MODULE_NAMESPACE_VIRTUAL_TYPE__DECLARED_DYNAMIC:return declaredDynamic != DECLARED_DYNAMIC_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public PrettyEditorPane(){  background=new BackgroundPainter(BACKGROUND_IMAGE);  setOpaque(false);  setContentType("text/html");  setEditable(false);}  }
class C{  public Optional<T> first(){  Iterator<T> iterator=iterator();  return iterator.hasNext() ? Optional.of(iterator.next()) : Optional.<T>empty();}  }
class C{  public XML addXMLAttribute(String attribute,String attribute_value){  addAttribute(attribute,attribute_value);  return (this);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SerialConfigPanel(){  initComponents();  initPortNames();}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  boolean resetCache(){  String[] newones=getBootClasspath();  boolean fire=false;  assert bcp != null;synchronized (bcp.LOCK) {    if (!Arrays.equals(newones,current)) {      resourcesCache=null;      fire=true;    }  }  if (fire) {    support.firePropertyChange(PROP_RESOURCES,null,null);  }  return fire;}  }
class C{  public Edge addEdge(Node s,Node t){  nodeCheck(s,true);  nodeCheck(t,true);  int e=addEdge(s.getRow(),t.getRow());  return getEdge(e);}  }
class C{  public IntegerPolynomial mult(IntegerPolynomial poly2,int modulus){  IntegerPolynomial c=mult(poly2);  c.mod(modulus);  return c;}  }
class C{  private void updateRecordingData(RecordingData recordingData){  boolean countdownJobActive=false;  boolean dataLoaded=false;  recordingIcon.setImage(null);  if (null != recordingData) {    RecordingState recordingState=cmrRepositoryDefinition.getStorageService().getRecordingState();    if (recordingState == RecordingState.ON) {      recordingIcon.setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_RECORD));      recordingLabel.setText("Active");    } else     if (recordingState == RecordingState.SCHEDULED) {      recordingIcon.setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_RECORD_SCHEDULED));      recordingLabel.setText("Scheduled @ " + DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT).format(recordingData.getRecordStartDate()));    }    StorageData storage=recordingData.getRecordingStorage();    if (null != storage) {      recordingStorage.setText(storage.getName());    } else {      recordingStorage.setText("");    }    if (null != recordingData.getRecordEndDate()) {      countdownJobActive=true;    } else {      recTimeBar.setVisible(false);      recTime.setVisible(false);    }    recordingStatusIcon.setImage(ImageFormatter.getWritingStatusImage(recordingData.getRecordingWritingStatus()));    recordingStatusIcon.setToolTipText(TextFormatter.getWritingStatusText(recordingData.getRecordingWritingStatus()));    dataLoaded=true;  } else {    recordingIcon.setImage(InspectIT.getDefault().getImage(InspectITImages.IMG_RECORD_GRAY));  }  if (!dataLoaded) {    recordingStorage.setText("");    recTimeBar.setVisible(false);    recTime.setVisible(false);    recordingStatusIcon.setImage(null);    recordingStatusIcon.setToolTipText("");    recordingLabel.setText("Not Active");  }  if (countdownJobActive) {    recordCountdownJob.schedule();  } else {    recordCountdownJob.cancel();  }}  }
class C{  protected void forwardCommandChangeToLayout(int s){  if ((s & Turnout.CLOSED) != 0) {    if ((s & Turnout.THROWN) != 0) {      log.error("Cannot command both CLOSED and THROWN " + s);      return;    } else {      sendMessage(true ^ getInverted());    }  } else {    sendMessage(false ^ getInverted());  }}  }
class C{  private void remove(OutputStream stream){  if (stream == null) {    return;  }  Handler handler=streams.get(stream);  if (handler == null) {    return;  }  handler.flush();  if (stream != System.out) {    handler.close();  }  getLogger().removeHandler(handler);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-26 10:48:13.862 -0500",hash_original_method="1960342845735426056C55A1AE9F8174",hash_generated_method="3443ABC0B00DA016C5AC5CFF25F0AB56") @DSVerified @DSBan(DSCat.PRIVATE_METHOD) private Page(Canvas canvas,PageInfo pageInfo){  mCanvas=canvas;  mPageInfo=pageInfo;}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public void mousePressed(MouseEvent e){}  }
class C{  public Schematic(Region region){  checkNotNull(region);  checkNotNull(region.getWorld());  EditSession session=new EditSessionBuilder(region.getWorld()).allowedRegionsEverywhere().autoQueue(false).build();  this.clipboard=new BlockArrayClipboard(region,ReadOnlyClipboard.of(session,region));}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public boolean isPreclosed(){  return preclosed;}  }
class C{  @SuppressWarnings("unchecked") public static <T extends IEntry>T readEntry(ParseSource source,Class<T> requestedClass,ExtensionProfile extProfile,Schema schema) throws IOException, ParseException, ServiceException {  if (source == null) {    throw new NullPointerException("Null source");  }  Class<? extends IEntry> entryClass=requestedClass;  Class<? extends IEntry> responseClass=requestedClass;  if (entryClass == null) {    entryClass=Entry.class;    responseClass=BaseEntry.class;  }  boolean isAdapting=isAdapting(entryClass);  IEntry entry;  try {    entry=entryClass.newInstance();  } catch (  IllegalAccessException iae) {    throw new ServiceException(CoreErrorDomain.ERR.cantCreateEntry,iae);  }catch (  InstantiationException ie) {    throw new ServiceException(CoreErrorDomain.ERR.cantCreateEntry,ie);  }  if (entry instanceof Element) {    entry=entryClass.cast(parseElement(source,(Element)entry,schema));  } else {    BaseEntry<?> baseEntry=(BaseEntry<?>)entry;    if (extProfile == null) {      extProfile=getExtProfile(baseEntry,isAdapting);    }    parseEntry(source,baseEntry,extProfile);    if (isAdapting) {      BaseEntry<?> adaptedEntry=baseEntry.getAdaptedEntry();      if (responseClass.isInstance(adaptedEntry)) {        entry=adaptedEntry;      }    }  }  return (T)responseClass.cast(entry);}  }
class C{  public boolean removeDataSet(int index){  if (index >= mDataSets.size() || index < 0)   return false;  T set=mDataSets.get(index);  return removeDataSet(set);}  }
class C{  public static org.oscm.internal.vo.VOCompatibleService convertToUp(org.oscm.vo.VOCompatibleService oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOCompatibleService newVO=new org.oscm.internal.vo.VOCompatibleService();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameters(convertToUpVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToUp(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.internal.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.internal.types.enumtypes.OfferingType.class));  newVO.setCompatible(oldVO.isCompatible());  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  public boolean isEnqueued(){synchronized (this) {    return (this.next != null && this.queue == ReferenceQueue.ENQUEUED);  }}  }
class C{  protected final void handleVariableChangedEvent(Variable variable,int index,Parameter.ChangeType type){  if (variable == totalLength) {    currentFactorKnown=false;  }}  }
class C{  public DialogService(){  super(SERVICE_NAME);  setEndPoint(URL);}  }
class C{  public Item(Drawable symbol,String labelText,Font font){  double fontSize=font.getSize2D();  setLayout(new EdgeLayout(fontSize,0.0));  this.symbol=symbol;  add(symbol,Location.WEST);  label=new Label(labelText);  label.setFont(font);  label.setAlignmentX(0.0);  label.setAlignmentY(0.5);  add(label,Location.CENTER);}  }
class C{  public TIBConstantOperand(RVMType v){  if (VM.VerifyAssertions)   VM._assert(v != null);  value=v;}  }
class C{  public final void lazySet(double newValue){  set(newValue);}  }
class C{  public void dup2X2(){  mv.visitInsn(Opcodes.DUP2_X2);}  }
class C{  @Override public void init(){  if (!_initialized) {    super.init();    _bottom1Panel.remove(_editIconsButton);    _detectPanel=new DetectionPanel(this);    add(_detectPanel,1);    add(_iconFamilyPanel,2);    _buttonPosition=2;  }}  }
class C{  public WebResourceStatistics computeMark(WebResourceStatistics wrStatistics){  float passed=wrStatistics.getNbOfPassed();  if (passed == -1) {    wrStatistics.setRawMark(Float.valueOf(-1));    return wrStatistics;  }  float failed=wrStatistics.getNbOfFailed();  float needMoreInfo=wrStatistics.getNbOfNmi();  if (failed == 0 && passed == 0) {    wrStatistics.setMark(Float.valueOf(0));    return wrStatistics;  }  float ratioNMI=needMoreInfo / (passed + failed + needMoreInfo);  float result=((1 - ratioNMI) * passed / (passed + failed) + ratioNMI * needMoreInfo / (passed + failed + needMoreInfo)) * 100f;  wrStatistics.setMark(result);  return wrStatistics;}  }
class C{  public static Address readFrom(final Deserializer deserializer,final String label){  return readFrom(deserializer,label,AddressEncoding.COMPRESSED);}  }
class C{  public static boolean isConformantSchemeName(String p_scheme){  if (p_scheme == null || p_scheme.trim().length() == 0) {    return false;  }  if (!isAlpha(p_scheme.charAt(0))) {    return false;  }  char testChar;  for (int i=1; i < p_scheme.length(); i++) {    testChar=p_scheme.charAt(i);    if (!isAlphanum(testChar) && SCHEME_CHARACTERS.indexOf(testChar) == -1) {      return false;    }  }  return true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  streetAttr.setValue("Y&ent1;");  value=streetAttr.getValue();  assertEquals("value","Y&ent1;",value);  value=streetAttr.getNodeValue();  assertEquals("nodeValue","Y&ent1;",value);}  }
class C{  public TracePanel(JFrame parent){  Icon traceIcon=new ImageIcon(IconUtils.getImage(TracePanel.class,"images/trace-small-icon.gif"));  Icon frequencyIcon=new ImageIcon(IconUtils.getImage(TracePanel.class,"images/frequency-small-icon.gif"));  Icon densityIcon=new ImageIcon(IconUtils.getImage(TracePanel.class,"images/density-small-icon.gif"));  Icon summaryIcon=new ImageIcon(IconUtils.getImage(TracePanel.class,"images/summary-small-icon.png"));  Icon correlationIcon=new ImageIcon(IconUtils.getImage(TracePanel.class,"images/correlation-small-icon.gif"));  summaryPanel=new SummaryStatisticsPanel(parent);  densityPanel=new DensityPanel(parent);  jointDensityPanel=new JointDensityPanel(parent);  tracePanel=new RawTracePanel(parent);  tabbedPane.addTab("Estimates",summaryIcon,summaryPanel);  tabbedPane.addTab("Marginal Prob Distribution",densityIcon,densityPanel);  tabbedPane.addTab("Joint-Marginal",correlationIcon,jointDensityPanel);  tabbedPane.addTab("Trace",traceIcon,tracePanel);  setLayout(new BorderLayout());  add(tabbedPane,BorderLayout.CENTER);}  }
class C{  private static int arraysize(int matrixsize){  return (matrixsize * (matrixsize + 1)) >> 1;}  }
class C{  private void ensureFill() throws JedisConnectionException {  if (count >= limit) {    try {      limit=in.read(buf);      count=0;      if (limit == -1) {        throw new JedisConnectionException("Unexpected end of stream.");      }    } catch (    IOException e) {      throw new JedisConnectionException(e);    }  }}  }
class C{  public static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  private void addToTT(String ttSName,boolean startBR,Object... ttO){  if (startBR == BR)   tooltipString.append("<BR>");  if (ttO != null) {    tooltipString.append(Messages.getString("BoardView1.Tooltip." + ttSName,ttO));  } else {    tooltipString.append(Messages.getString("BoardView1.Tooltip." + ttSName));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.070 -0500",hash_original_method="951D1D5C70B11C07C923672F61940F77",hash_generated_method="BE0BAB7464A6094DAA845AD88E774BE9") public void pullGlow(int x,int y,int oldX,int oldY,int maxX,int maxY){  if (oldX == mHostView.getScrollX() && oldY == mHostView.getScrollY()) {    if (maxX > 0) {      final int pulledToX=oldX + mOverScrollDeltaX;      if (pulledToX < 0) {        mEdgeGlowLeft.onPull((float)mOverScrollDeltaX / mHostView.getWidth());        if (!mEdgeGlowRight.isFinished()) {          mEdgeGlowRight.onRelease();        }      } else       if (pulledToX > maxX) {        mEdgeGlowRight.onPull((float)mOverScrollDeltaX / mHostView.getWidth());        if (!mEdgeGlowLeft.isFinished()) {          mEdgeGlowLeft.onRelease();        }      }      mOverScrollDeltaX=0;    }    if (maxY > 0 || mHostView.getOverScrollMode() == View.OVER_SCROLL_ALWAYS) {      final int pulledToY=oldY + mOverScrollDeltaY;      if (pulledToY < 0) {        mEdgeGlowTop.onPull((float)mOverScrollDeltaY / mHostView.getHeight());        if (!mEdgeGlowBottom.isFinished()) {          mEdgeGlowBottom.onRelease();        }      } else       if (pulledToY > maxY) {        mEdgeGlowBottom.onPull((float)mOverScrollDeltaY / mHostView.getHeight());        if (!mEdgeGlowTop.isFinished()) {          mEdgeGlowTop.onRelease();        }      }      mOverScrollDeltaY=0;    }  }}  }
class C{  private ODGAttributeKeys(){}  }
class C{  public static boolean curlAndExtractPackage(String workingDirectory,String packageURI,String packageDestination,boolean isDeletePackage,boolean isVerbose){  LOG.log(Level.FINE,"Fetching package {0}",packageURI);  LOG.fine("Fetched package can overwrite old one.");  if (!ShellUtils.curlPackage(packageURI,packageDestination,isVerbose,false)) {    LOG.severe("Failed to fetch package.");    return false;  }  LOG.log(Level.FINE,"Extracting the package {0}",packageURI);  if (!ShellUtils.extractPackage(packageDestination,workingDirectory,isVerbose,false)) {    LOG.severe("Failed to extract package.");    return false;  }  if (isDeletePackage && !FileUtils.deleteFile(packageDestination)) {    LOG.warning("Failed to delete the package: " + packageDestination);  }  return true;}  }
class C{  public TwitterFactory(final Configuration conf){  if (conf == null)   throw new NullPointerException("configuration cannot be null");  this.conf=conf;}  }
class C{  private boolean isNotCanceled(){  return !Thread.currentThread().isInterrupted();}  }
class C{  public java.util.function.Predicate<ArtifactInformation> build(){  return buildFrom(this.predicate);}  }
class C{  public NodeList nodelist() throws javax.xml.transform.TransformerException {  return (m_origObj instanceof NodeList) ? (NodeList)m_origObj : super.nodelist();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public UmpleAdapterFactory(){  if (modelPackage == null) {    modelPackage=UmplePackage.eINSTANCE;  }}  }
class C{  public void expand(double b){  clip[0]-=b;  clip[1]-=b;  clip[6]+=b;  clip[7]+=b;}  }
class C{  public static BasicBeanDescription forSerialization(POJOPropertiesCollector coll){  BasicBeanDescription desc=new BasicBeanDescription(coll.getConfig(),coll.getType(),coll.getClassDef(),coll.getProperties());  desc._jsonValueMethod=coll.getJsonValueMethod();  desc._anyGetterMethod=coll.getAnyGetterMethod();  return desc;}  }
class C{  public static boolean isEmail(Object value){  return MailUtil.isValidEmail(value);}  }
class C{  public void addToWorld(){  welcomeNewPlayer();  tellAboutQuest();  listMissingItemsDuringQuestOffer();  acceptQuest();  rejectQuest();  welcomeKnownPlayer();  listMissingItems();  playerDoesNotWantToGiveItems();  playerWantsToGiveItems();  offerItem();  offerNotNeededItem();  sayByeWhileInQuestion1();  welcomePlayerAfterQuest();}  }
class C{  public void clear(){  CACHE.clear();}  }
class C{  public String reset(){  append("RESET CHANGES button pressed");  clear();  return (null);}  }
class C{  public static Border createVerticalImageBorder(Image top,Image bottom,Image center){  Border b=new Border();  b.type=TYPE_IMAGE_VERTICAL;  b.images=new Image[]{top,bottom,center};  return b;}  }
class C{  public MinkowskiDistance(Instances data){  super(data);}  }
class C{  public void test_setCharLjava_lang_ObjectIC(){  char[] x={0};  boolean thrown=false;  try {    Array.setChar(x,0,(char)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getChar(x,0));  try {    Array.setChar(new Object(),0,(char)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setChar(x,4,(char)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setChar(null,0,(char)0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public static double pdf(double x,double k,double theta,double shift){  if (x <= shift || x == Double.POSITIVE_INFINITY) {    return 0.;  }  x=(x - shift) * theta;  final double ex=Math.exp(x);  return ex < Double.POSITIVE_INFINITY ? Math.exp(k * x - ex - GammaDistribution.logGamma(k)) * theta : 0.;}  }
class C{  public static org.oscm.vo.VOSubscription convertToApi(org.oscm.internal.vo.VOSubscription oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOSubscription newVO=new org.oscm.vo.VOSubscription();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setServiceId(oldVO.getServiceId());  newVO.setServiceKey(oldVO.getServiceKey());  newVO.setActivationDate(oldVO.getActivationDate());  newVO.setCreationDate(oldVO.getCreationDate());  newVO.setDeactivationDate(oldVO.getDeactivationDate());  newVO.setServiceAccessInfo(oldVO.getServiceAccessInfo());  newVO.setServiceAccessType(EnumConverter.convert(oldVO.getServiceAccessType(),org.oscm.types.enumtypes.ServiceAccessType.class));  newVO.setServiceBaseURL(oldVO.getServiceBaseURL());  newVO.setServiceLoginPath(oldVO.getServiceLoginPath());  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.types.enumtypes.SubscriptionStatus.class));  newVO.setServiceInstanceId(oldVO.getServiceInstanceId());  newVO.setTimeoutMailSent(oldVO.isTimeoutMailSent());  newVO.setPurchaseOrderNumber(oldVO.getPurchaseOrderNumber());  newVO.setSubscriptionId(oldVO.getSubscriptionId());  newVO.setProvisioningProgress(oldVO.getProvisioningProgress());  newVO.setNumberOfAssignedUsers(oldVO.getNumberOfAssignedUsers());  newVO.setSellerName(oldVO.getSellerName());  newVO.setTechnicalServiceOperations(convertToApiVOTechnicalServiceOperation(oldVO.getTechnicalServiceOperations()));  newVO.setOwnerId(oldVO.getOwnerId());  newVO.setUnitKey(oldVO.getUnitKey());  newVO.setUnitName(oldVO.getUnitName());  return newVO;}  }
class C{  public TextEditorPane(int textMode,boolean wordWrapEnabled,FileLocation loc) throws IOException {  this(textMode,wordWrapEnabled,loc,null);}  }
class C{  public boolean isEmpty(){  return activeQueues.size() == 0 && inactiveQueues.size() == 0;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.975 -0500",hash_original_method="7B58421AA7682D1CD65CE1288FB2F0E9",hash_generated_method="F568C8989067E18EBDA66C388D30FDAD") protected Object clone(){  PipelinedMsgParser p=new PipelinedMsgParser();  p.rawInputStream=this.rawInputStream;  p.sipMessageListener=this.sipMessageListener;  Thread mythread=new Thread(p);  mythread.setName("PipelineThread");  return p;}  }
class C{  @SuppressWarnings({"SameParameterValue","WeakerAccess"}) @Deprecated public UnixTerminal(InputStream terminalInput,OutputStream terminalOutput,Charset terminalCharset,UnixTerminalSizeQuerier customSizeQuerier) throws IOException {  this(terminalInput,terminalOutput,terminalCharset,customSizeQuerier,CtrlCBehaviour.CTRL_C_KILLS_APPLICATION);}  }
class C{  private void updateFacebookButton(){  Context context=getContext();  boolean buttonActive=userHandler.isSocialNetworkConnected(getString(R.string.provider_key_facebook)) && facebookHandler.isShareOnFacebook(context) && facebookHandler.hasFacebookPublishPermission();  facebookButton.setImageResource(buttonActive ? R.drawable.facebook_blue_24dp : R.drawable.facebook_gray_24dp);  facebookHandler.setShareOnFacebook(context,buttonActive);}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  protected RexNode convertExtendedExpression(SqlNode node,Blackboard bb){  return null;}  }
class C{  public static void main(String args[]){  try {    System.out.println("byte: " + String.valueOf(Configuration.valueAsByte("xr.test-config-byte",(byte)15)));    System.out.println("short: " + String.valueOf(Configuration.valueAsShort("xr.test-config-short",(short)20)));    System.out.println("int: " + String.valueOf(Configuration.valueAsInt("xr.test-config-int",25)));    System.out.println("long: " + String.valueOf(Configuration.valueAsLong("xr.test-config-long",30L)));    System.out.println("float: " + String.valueOf(Configuration.valueAsFloat("xr.test-config-float",45.5F)));    System.out.println("double: " + String.valueOf(Configuration.valueAsDouble("xr.test-config-double",50.75D)));    System.out.println("boolean: " + String.valueOf(Configuration.isTrue("xr.test-config-boolean",false)));  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  protected void addNativeControllerCall(String method,String controllerCall){  nativeControllers.add(new NativeControllerCall(method,controllerCall));}  }
class C{  public boolean applyOptions() throws IOException {  int connectionMethod=ConnectionSettings.C_NO_PROXY;  if (SOCKS4_PROXY_BUTTON.isSelected()) {    connectionMethod=ConnectionSettings.C_SOCKS4_PROXY;  } else   if (SOCKS5_PROXY_BUTTON.isSelected()) {    connectionMethod=ConnectionSettings.C_SOCKS5_PROXY;  } else   if (HTTP_PROXY_BUTTON.isSelected()) {    connectionMethod=ConnectionSettings.C_HTTP_PROXY;  }  final int proxyPort=PROXY_PORT_FIELD.getValue();  final String proxyHost=PROXY_HOST_FIELD.getText();  ConnectionSettings.PROXY_PORT.setValue(proxyPort);  ConnectionSettings.CONNECTION_METHOD.setValue(connectionMethod);  ConnectionSettings.PROXY_HOST.setValue(proxyHost);  SettingsPack settings=new SettingsPack();  if (connectionMethod == ConnectionSettings.C_NO_PROXY) {    settings.setInteger(settings_pack.int_types.proxy_type.swigValue(),settings_pack.proxy_type_t.none.swigValue());  } else   if (connectionMethod == ConnectionSettings.C_HTTP_PROXY) {    settings.setInteger(settings_pack.int_types.proxy_type.swigValue(),settings_pack.proxy_type_t.http.swigValue());  } else   if (connectionMethod == ConnectionSettings.C_SOCKS4_PROXY) {    settings.setInteger(settings_pack.int_types.proxy_type.swigValue(),settings_pack.proxy_type_t.socks4.swigValue());  } else   if (connectionMethod == ConnectionSettings.C_SOCKS5_PROXY) {    settings.setInteger(settings_pack.int_types.proxy_type.swigValue(),settings_pack.proxy_type_t.socks5.swigValue());  }  settings.setString(settings_pack.string_types.proxy_hostname.swigValue(),proxyHost);  settings.setInteger(settings_pack.int_types.proxy_port.swigValue(),proxyPort);  BTEngine.getInstance().applySettings(settings);  return false;}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(DateTickMarkPosition.START)) {    return DateTickMarkPosition.START;  } else   if (this.equals(DateTickMarkPosition.MIDDLE)) {    return DateTickMarkPosition.MIDDLE;  } else   if (this.equals(DateTickMarkPosition.END)) {    return DateTickMarkPosition.END;  }  return null;}  }
class C{  private void mark(){  input.textMark();}  }
class C{  public void translate(float x,float y){  Matrix3f tmp=new Matrix3f();  tmp.loadTranslate(x,y);  multiply(tmp);}  }
class C{  @Bean(destroyMethod="destroy") public ProcessEngineFactoryBean activitiProcessEngine(SpringProcessEngineConfiguration activitiProcessEngineConfiguration){  ProcessEngineFactoryBean bean=new ProcessEngineFactoryBean();  bean.setProcessEngineConfiguration(activitiProcessEngineConfiguration);  return bean;}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName){  this(reverse,lookUp,dirName,new X509DefaultEntryConverter());}  }
class C{  PolicyEntry(CodeSource cs){  this.codesource=cs;  this.permissions=new Vector<Permission>();}  }
class C{  public void addChild(TreeNode node){  if (children == null)   children=new ArrayList<TreeNode>();  children.add(node);}  }
class C{  public ProxyRenderer(TableCellRenderer renderer){  this.m_renderer=renderer;}  }
class C{  protected void launchQuerySearch(int actionKey,String actionMsg){  String query=mSearchAutoComplete.getText().toString();  String action=Intent.ACTION_SEARCH;  Intent intent=createIntent(action,null,null,query,actionKey,actionMsg);  launchIntent(intent);}  }
class C{  public boolean delete(String name){  String lcName=name.toLowerCase();  if (this.hmap.containsKey(lcName)) {    this.hmap.remove(lcName);    return true;  } else {    return false;  }}  }
class C{  private void newSetPixel(int col,int row,byte[] data,int value){  int index=(row * line) + (col / 8);  int b=data[index];  if (value == 0)   b=b & ~(1 << 7 - (col % 8)); else   b=b | (1 << 7 - (col % 8));  data[index]=(byte)b;}  }
class C{  public BooleanValueModel(String name,Boolean defaultValue){  super(name,defaultValue);}  }
class C{  public void rotateZ(float angle){  g.rotateZ(angle);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.TEMPLATE_LITERAL__SEGMENTS:    getSegments().clear();  return;}super.eUnset(featureID);}  }
class C{  public void push(int val){  this.push(new BaseTypeWrapper(val));}  }
class C{  public void createCostDetail(MAcctSchema accountSchema,MCostType costType,MCostElement costElement,MTransaction transaction,IDocumentLine model,boolean force){  if (!force)   return;  BigDecimal costThisLevel=Env.ZERO;  BigDecimal costLowLevel=Env.ZERO;  String costingLevel=MProduct.get(transaction.getCtx(),transaction.getM_Product_ID()).getCostingLevel(accountSchema,transaction.getAD_Org_ID());  if (model instanceof MMatchInv && MCostType.COSTINGMETHOD_AveragePO.equals(costType.getCostingMethod()))   return;  if (model instanceof MMatchPO && MCostType.COSTINGMETHOD_AverageInvoice.equals(costType.getCostingMethod()))   return;  if (model instanceof MLandedCostAllocation) {    MLandedCostAllocation allocation=(MLandedCostAllocation)model;    costThisLevel=allocation.getPriceActual();  }  MCost cost=MCost.validateCostForCostType(accountSchema,costType,costElement,transaction.getM_Product_ID(),transaction.getAD_Org_ID(),transaction.getM_Warehouse_ID(),transaction.getM_AttributeSetInstance_ID(),transaction.get_TrxName());  if ((MCostElement.COSTELEMENTTYPE_Material.equals(costElement.getCostElementType()) || MCostElement.COSTELEMENTTYPE_LandedCost.equals(costElement.getCostElementType())) && transaction.getMovementType().contains("+") && !MCostType.COSTINGMETHOD_StandardCosting.equals(costType.getCostingMethod())) {    if (model instanceof MMovementLine || model instanceof MInventoryLine || (model instanceof MInOutLine && MTransaction.MOVEMENTTYPE_CustomerReturns.equals(transaction.getMovementType()))) {      costThisLevel=getCostThisLevel(accountSchema,costType,costElement,transaction,model,costingLevel);      if (model instanceof MInventoryLine && costThisLevel.signum() == 0 && MCostElement.COSTELEMENTTYPE_Material.equals(costElement.getCostElementType())) {        MInventoryLine inventoryLine=(MInventoryLine)model;        if (inventoryLine.getQtyInternalUse().signum() == 0)         costThisLevel=inventoryLine.getCurrentCostPrice();        if (costThisLevel.signum() == 0)         costThisLevel=getCostThisLevel(accountSchema,costType,costElement,transaction,model,costingLevel);      }      if (model instanceof MMovementLine) {        MTransaction transactionFrom=MTransaction.getByDocumentLine(model,MTransaction.MOVEMENTTYPE_MovementFrom);        BigDecimal costMovementFrom=getCostThisLevel(accountSchema,costType,costElement,transactionFrom == null ? transaction : transactionFrom,model,costingLevel);        if (costMovementFrom.signum() > 0)         costThisLevel=costMovementFrom;      }    } else     if (MCostElement.COSTELEMENTTYPE_Material.equals(costElement.getCostElementType())) {      if (model.getPriceActual().signum() != 0)       costThisLevel=model.getPriceActual();    }  }  if (!MCostType.COSTINGMETHOD_StandardCosting.equals(costType.getCostingMethod())) {    if (model instanceof MPPCostCollector) {      MPPCostCollector costCollector=(MPPCostCollector)model;      if (MPPCostCollector.COSTCOLLECTORTYPE_MaterialReceipt.equals(costCollector.getCostCollectorType())) {        costLowLevel=CostEngine.getParentActualCostByCostType(accountSchema,costType.getM_CostType_ID(),costElement.getM_CostElement_ID(),costCollector.getPP_Order());      }    }    if (model instanceof MProductionLine) {      MProductionLine productionLine=(MProductionLine)model;      if (productionLine.isParent())       costThisLevel=CostEngine.getParentActualCostByCostType(accountSchema,costType,costElement,productionLine.getM_Production());      if (costThisLevel.signum() == 0)       costThisLevel=cost.getCurrentCostPrice();      if (costThisLevel.signum() == 0 && MCostElement.COSTELEMENTTYPE_Material.equals(costElement.getCostElementType()))       costThisLevel=getSeedCost(transaction.getCtx(),transaction.getM_Product_ID(),transaction.get_TrxName());      if (productionLine.isParent()) {        if (!productionLine.getM_Product().isPurchased()) {          costLowLevel=costThisLevel;          costThisLevel=Env.ZERO;        }      } else       if (productionLine.getMovementQty().signum() < 0)       costLowLevel=Env.ZERO;    }  } else   if (MCostType.COSTINGMETHOD_StandardCosting.equals(costType.getCostingMethod())) {    costThisLevel=cost.getCurrentCostPrice();    costLowLevel=cost.getCurrentCostPriceLL();    if (costThisLevel.signum() == 0 && MCostElement.COSTELEMENTTYPE_Material.equals(costElement.getCostElementType())) {      costThisLevel=getSeedCost(transaction.getCtx(),transaction.getM_Product_ID(),transaction.get_TrxName());      if (costThisLevel.signum() == 0)       if (model instanceof MInOutLine && !model.isSOTrx()) {        MInOutLine inOutLine=(MInOutLine)model;        costThisLevel=inOutLine.getC_OrderLine().getPriceActual();      }      if (costThisLevel.signum() != 0) {        cost.setCurrentCostPrice(costThisLevel);        cost.saveEx();      }    }  }  final ICostingMethod method=CostingMethodFactory.get().getCostingMethod(costType.getCostingMethod());  method.setCostingMethod(accountSchema,transaction,model,cost,costThisLevel,costLowLevel,model.isSOTrx());  method.process();}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public String toString(){  return intToType(type);}  }
class C{  public void close(){  if (DBG)   Log.d(TAG,"close()");  unregisterCallback();}  }
class C{  static boolean isAccessible(final Member m){  return m != null && Modifier.isPublic(m.getModifiers()) && !MemberUtils.isSynthetic(m);}  }
class C{  private void sendUnsubscribeMessage(String channel) throws WebSocketException {  MessageBuilder builder=new MessageBuilder(RequestBuilder.POST,null);  builder.header(MESSAGE_TYPE_HEADER_NAME,"unsubscribe-channel").data("{\"channel\":\"" + channel + "\"}");  Message message=builder.build();  send(message,null);}  }
class C{  public boolean hasUpdateTargetPermission(){  return hasTargetReadPermission() && permissionService.hasPermission(SpPermission.UPDATE_TARGET);}  }
class C{  public void save(TemplatePersistenceData[] templates,OutputStream stream) throws IOException {  save(templates,new StreamResult(stream));}  }
class C{  StackFrame frameFor(String methodName) throws Exception {  Iterator it=mainThread.frames().iterator();  while (it.hasNext()) {    StackFrame frame=(StackFrame)it.next();    if (frame.location().method().name().equals(methodName)) {      return frame;    }  }  failure("FAIL: " + methodName + " not on stack");  return null;}  }
class C{  public void hidePalette(){  Debug.message("drawingtool","OMDrawingTool.hidePalette()");  setVisible(visibleWhenInactive);  WindowSupport ws=getWindowSupport();  if (ws != null) {    ws.killWindow();  }}  }
class C{  public static void registerDataSerializables(){  DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_CHUNK_KEY,ChunkKey.class);  DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_FILE,File.class);  DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_FUNCTION_CONTEXT,LuceneFunctionContext.class);  DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_STRING_QUERY_PROVIDER,StringQueryProvider.class);  DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_TOP_ENTRIES_COLLECTOR_MANAGER,TopEntriesCollectorManager.class);  DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_ENTRY_SCORE,EntryScore.class);  DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_TOP_ENTRIES,TopEntries.class);  DSFIDFactory.registerDSFID(DataSerializableFixedID.LUCENE_TOP_ENTRIES_COLLECTOR,TopEntriesCollector.class);}  }
class C{  @Override protected boolean processErrorOrFailure(Response response,Request request,TransactionID transactionID){  Object applicationData=transactionID.getApplicationData();  if ((applicationData instanceof RelayedCandidateDatagramSocket) && ((RelayedCandidateDatagramSocket)applicationData).processErrorOrFailure(response,request))   return true;  return super.processErrorOrFailure(response,request,transactionID);}  }
class C{  public static char[] toChar(byte[] b){  if (b == null)   return null;  char[] c=new char[b.length / 2];  int i=0;  int j=0;  while (i < b.length) {    c[j++]=(char)((b[i++] & 0xFF) + ((b[i++] & 0xFF) << 8));  }  return c;}  }
class C{  public ClientSideStateHelper(){  init();}  }
class C{  public boolean useSSL(){  return useSSL;}  }
class C{  protected void sendMessage(SIPMessage message,InetAddress peerAddress,int peerPort,String peerProtocol,boolean retry) throws IOException {  if (peerPort == -1) {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug(getClass().getName() + ":sendMessage: Dropping reply!");    }    throw new IOException("Receiver port not set ");  } else {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug(":sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n");    }  }  if (peerProtocol.compareToIgnoreCase("UDP") == 0) {    byte[] msg=message.encodeAsBytes("udp");    DatagramPacket reply=new DatagramPacket(msg,msg.length,peerAddress,peerPort);    try {      DatagramSocket sock;      if (sipStack.udpFlag) {        sock=((UDPMessageProcessor)messageProcessor).sock;      } else {        sock=sipStack.getNetworkLayer().createDatagramSocket();      }      if (sipStack.isLoggingEnabled()) {        this.sipStack.getStackLogger().logDebug("sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ new String(msg));      }      sock.send(reply);      if (!sipStack.udpFlag)       sock.close();    } catch (    IOException ex) {      throw ex;    }catch (    Exception ex) {      InternalErrorHandler.handleException(ex);    }  } else {    sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),peerAddress,peerPort,"tcp",message,retry,this);  }}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader=null;  String upslopeAreaCreekHeader=null;  String outputHeader=null;  int numRows;  int numCols;  double elevation, elevationNeighbour;  int x, y;  double slope, maxSlope;  int flowDir;  int i;  List<StreamFlow> streamFlowList=new ArrayList<>();  List<StreamFlow> copyStreamFlowList;  StreamFlow streamFlow2;  List<Double> upstreamValues=new ArrayList<>();  float progress=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      demHeader=args[i];    } else     if (i == 1) {      upslopeAreaCreekHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    }  }  if ((demHeader == null) || (upslopeAreaCreekHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    dem=new WhiteboxRaster(demHeader,"r");    upslopeAreaCreek=new WhiteboxRaster(upslopeAreaCreekHeader,"r");    numRows=dem.getNumberRows();    numCols=dem.getNumberColumns();    gridRes=dem.getCellSizeX();    medianUpstreamArea=new WhiteboxRaster(outputHeader,"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    medianUpstreamArea.setPreferredPalette("blueyellow.pal");    medianUpstreamArea.setDataScale(WhiteboxRasterBase.DataScale.CONTINUOUS);    medianUpstreamArea.setZUnits("dimensionless");    tmpDirectUpstreamCreekCellCount=new WhiteboxRaster(outputHeader.replace(".dep","_tmp1.dep"),"rw",demHeader,WhiteboxRaster.DataType.FLOAT,0);    tmpDirectUpstreamCreekCellCount.isTemporaryFile=true;    updateProgress("Loop 1 of 3:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        if (upslopeAreaCreek.getValue(row,col) == upslopeAreaCreek.getNoDataValue()) {          medianUpstreamArea.setValue(row,col,upslopeAreaCreek.getNoDataValue());        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 3:",(int)progress);    }    updateProgress("Loop 2 of 3:",0);    for (int row=0; row < numRows; row++) {      for (int col=0; col < numCols; col++) {        maxSlope=Double.MIN_VALUE;        flowDir=-1;        if (upslopeAreaCreek.getValue(row,col) > 0) {          elevation=dem.getValue(row,col);          for (int c=0; c < 8; c++) {            x=col + xd[c];            y=row + yd[c];            elevationNeighbour=dem.getValue(y,x);            if (upslopeAreaCreek.getValue(y,x) > 0 && elevationNeighbour < elevation) {              slope=(elevation - elevationNeighbour) / dd[c];              if (slope > maxSlope) {                maxSlope=slope;                flowDir=c;              }            }          }          for (int c=0; c < 8; c++) {            if (c == flowDir) {              x=col + xd[c];              y=row + yd[c];              tmpDirectUpstreamCreekCellCount.incrementValue(y,x,1);              streamFlowList.add(new StreamFlow(col,row,x,y,elevation));            }          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 3:",(int)progress);    }    streamFlowList=OrderStreamFlowList(streamFlowList);    copyStreamFlowList=new ArrayList<>(streamFlowList.subList(0,streamFlowList.size()));    updateProgress("Loop 3 of 3:",0);    for (    StreamFlow streamFlow : streamFlowList) {      i=streamFlowList.indexOf(streamFlow);      if (medianUpstreamArea.getValue(streamFlow.GetToY(),streamFlow.GetToX()) == 0) {        upstreamValues=new ArrayList<>();        FilterStreamFlowList(copyStreamFlowList,streamFlow);        MakeUpstreamList(copyStreamFlowList,streamFlow.GetToX(),streamFlow.GetToY(),upstreamValues);        Collections.sort(upstreamValues);        medianUpstreamArea.setValue(streamFlow.GetToY(),streamFlow.GetToX(),GetMedian(upstreamValues));        streamFlow2=streamFlow;        while ((tmpDirectUpstreamCreekCellCount.getValue(streamFlow2.GetToY(),streamFlow2.GetToX()) == 1) & (upstreamValues.size() > 2)) {          upstreamValues.remove(upslopeAreaCreek.getValue(streamFlow2.GetToY(),streamFlow2.GetToX()));          medianUpstreamArea.setValue(streamFlow2.GetFromY(),streamFlow2.GetFromX(),GetMedian(upstreamValues));          x=streamFlow2.GetFromX();          y=streamFlow2.GetFromY();          for (          StreamFlow tempStreamFlow : copyStreamFlowList) {            if (tempStreamFlow.GetToX() == x && tempStreamFlow.GetToY() == y) {              streamFlow2=tempStreamFlow;              break;            }          }        }        if (tmpDirectUpstreamCreekCellCount.getValue(streamFlow2.GetFromY(),streamFlow2.GetFromX()) == 0) {          x=streamFlow2.GetFromX();          y=streamFlow2.GetFromY();          medianUpstreamArea.setValue(y,x,upslopeAreaCreek.getValue(y,x));        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * (i + 1) / streamFlowList.size());      updateProgress("Loop 3 of 3:",(int)progress);    }    medianUpstreamArea.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    medianUpstreamArea.addMetadataEntry("Created on " + new Date());    dem.close();    upslopeAreaCreek.close();    medianUpstreamArea.close();    tmpDirectUpstreamCreekCellCount.close();    returnData(outputHeader);  } catch (  Exception e) {    showFeedback(e.getMessage());  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public boolean validate() throws Exception {  log.info("Initiating initiators validation of XtremIO ExportMask: " + id);  try {    XtremIOClient client=XtremIOProvUtils.getXtremIOClient(getDbClient(),storage,getClientFactory());    String xioClusterName=client.getClusterDetails(storage.getSerialNumber()).getName();    if (knownInitiatorToIGMap == null) {      knownInitiatorToIGMap=ArrayListMultimap.create();    }    if (ExportMaskUtils.isBackendExportMask(getDbClient(),exportMask)) {      log.info("validation against backing mask for VPLEX or RP is disabled.");      return true;    }    List<Initiator> knownInitiatorsInIGs=new ArrayList<Initiator>();    List<String> allInitiatorsInIGs=new ArrayList<String>();    List<XtremIOInitiator> initiators=client.getXtremIOInitiatorsInfo(xioClusterName);    for (    XtremIOInitiator initiator : initiators) {      String igNameInInitiator=initiator.getInitiatorGroup().get(1);      if (initiatorToIGMap.keySet().contains(igNameInInitiator)) {        allInitiatorsInIGs.add(Initiator.normalizePort(initiator.getPortAddress()));        Initiator knownInitiator=NetworkUtil.getInitiator(initiator.getPortAddress(),getDbClient());        if (knownInitiator != null) {          knownInitiatorsInIGs.add(knownInitiator);          knownInitiatorToIGMap.put(igNameInInitiator,knownInitiator);        }      }    }    log.info("Initiators present in IG: {}",allInitiatorsInIGs);    if (knownInitiatorsInIGs.size() < allInitiatorsInIGs.size()) {      Collection<String> knownInitiatorNames=Collections2.transform(knownInitiatorsInIGs,CommonTransformerFunctions.fctnInitiatorToPortName());      Set<String> differences=Sets.difference(Sets.newHashSet(allInitiatorsInIGs),Sets.newHashSet(knownInitiatorNames));      for (      String diff : differences) {        getLogger().logDiff(exportMask.getId().toString(),"initiators",ValidatorLogger.NO_MATCHING_ENTRY,diff);      }      checkForErrors();    }    for (    String igName : initiatorToIGMap.keySet()) {      List<Initiator> requestedInitiatorsInIG=initiatorToIGMap.get(igName);      List<Initiator> initiatorsInIG=knownInitiatorToIGMap.get(igName);      String hostName=null;      String clusterName=null;      for (      Initiator initiator : requestedInitiatorsInIG) {        if (null != initiator.getHostName()) {          hostName=initiator.getHostName();          clusterName=initiator.getClusterName();          break;        }      }      Collection<String> knownInitiators=Collections2.transform(Lists.newArrayList(initiatorsInIG),CommonTransformerFunctions.fctnInitiatorToPortName());      Collection<String> requestedInitiators=Collections2.transform(requestedInitiatorsInIG,CommonTransformerFunctions.fctnInitiatorToPortName());      knownInitiators.removeAll(requestedInitiators);      if (!knownInitiators.isEmpty()) {        List<String> listToIgnore=new ArrayList<String>();        log.info("There are other initiators present in the IG - {}. Checking if they all belong to same host or different host but same cluster.",knownInitiators);        log.info("Host name: {}, Cluster name: {}",hostName,clusterName);        for (        Initiator ini : initiatorsInIG) {          if (NullColumnValueGetter.isNotNullValue(clusterName) && ini.getHostName() != null && !ini.getHostName().equalsIgnoreCase(hostName)) {            if (ini.getClusterName() != null && clusterName != null && !clusterName.isEmpty() && ini.getClusterName().equalsIgnoreCase(clusterName)) {              listToIgnore.add(Initiator.normalizePort(ini.getInitiatorPort()));            }          } else           if (ini.getHostName() != null && ini.getHostName().equalsIgnoreCase(hostName)) {            listToIgnore.add(Initiator.normalizePort(ini.getInitiatorPort()));          }        }        knownInitiators.removeAll(listToIgnore);        for (        String knownInitiator : knownInitiators) {          getLogger().logDiff(exportMask.getId().toString(),"initiators",ValidatorLogger.NO_MATCHING_ENTRY,knownInitiator);        }      }    }  } catch (  Exception ex) {    log.error("Unexpected exception validating ExportMask initiators: " + ex.getMessage(),ex);    if (getConfig().isValidationEnabled()) {      throw DeviceControllerException.exceptions.unexpectedCondition("Unexpected exception validating ExportMask initiators: " + ex.getMessage());    }  }  checkForErrors();  log.info("Completed initiator validation of XtremIO ExportMask: " + id);  return true;}  }
class C{  public static void dumpIR(IR ir,String tag,boolean forceCFG){  System.out.println("********* START OF IR DUMP  " + tag + "   FOR "+ ir.method);  ir.printInstructions();  if (forceCFG || ir.options.PRINT_CFG) {    ir.cfg.printDepthFirst();  }  System.out.println("*********   END OF IR DUMP  " + tag + "   FOR "+ ir.method);}  }
class C{  public static Class<?> wrapper(Class<?> type){  if (type == null) {    return null;  } else   if (type.isPrimitive()) {    if (boolean.class == type) {      return Boolean.class;    } else     if (int.class == type) {      return Integer.class;    } else     if (long.class == type) {      return Long.class;    } else     if (short.class == type) {      return Short.class;    } else     if (byte.class == type) {      return Byte.class;    } else     if (double.class == type) {      return Double.class;    } else     if (float.class == type) {      return Float.class;    } else     if (char.class == type) {      return Character.class;    } else     if (void.class == type) {      return Void.class;    }  }  return type;}  }
class C{  public boolean isSpdy(){  return spdyConnection != null;}  }
class C{  public ActionList(long duration){  super(duration,Activity.DEFAULT_STEP_TIME);}  }
class C{  protected void addDirectionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Event_direction_feature"),getString("_UI_PropertyDescriptor_description","_UI_Event_direction_feature","_UI_Event_type"),TypesPackage.Literals.EVENT__DIRECTION,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public List<OperableTrigger> selectTriggersForJob(Connection conn,JobKey jobKey) throws SQLException, ClassNotFoundException, IOException, JobPersistenceException {  LinkedList<OperableTrigger> trigList=new LinkedList<OperableTrigger>();  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_TRIGGERS_FOR_JOB));    ps.setString(1,jobKey.getName());    ps.setString(2,jobKey.getGroup());    rs=ps.executeQuery();    while (rs.next()) {      OperableTrigger t=selectTrigger(conn,triggerKey(rs.getString(COL_TRIGGER_NAME),rs.getString(COL_TRIGGER_GROUP)));      if (t != null) {        trigList.add(t);      }    }  }  finally {    closeResultSet(rs);    closeStatement(ps);  }  return trigList;}  }
class C{  public DefaultStreamingMessageQueueConsumer(final String queueId,final ExcerptTailer queueReader,final StreamingMessageQueueWaitStrategy waitStrategy){  this.queueId=queueId;  this.queueReader=queueReader;  this.waitStrategy=waitStrategy;}  }
class C{  static boolean isISOControl(int ch){  return ((ch >= '\u0000' && ch <= '\u001f') || (ch >= '\u007f' && ch <= '\u009f'));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.531 -0500",hash_original_method="AB065CB5BA1D923138DE6DFF9B806E2B",hash_generated_method="D50F57134197BEE6FB2911B164F0AB96") public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.257 -0500",hash_original_method="F58B9D9CAFA6022E13B23B504AFBA49E",hash_generated_method="EF9BF655595B6F8D8A6427E5F24F9CCD") public BERSequence(DEREncodable obj){  super(obj);}  }
class C{  boolean close(long version){synchronized (mutex) {    SnapshotDeletionPolicy.SnapshotHolder holder=snapshots.get(version);    if (holder == null) {      return false;    }    if (holder.counter <= 0) {      snapshots.remove(version);      return false;    }    if (--holder.counter == 0) {      snapshots.remove(version);    }    return true;  }}  }
class C{  public static void logError(ILog log,Throwable exception,String message,Object... args){  message=MessageFormat.format(message,args);  log(log,IStatus.ERROR,IStatus.OK,message,exception);}  }
class C{  public XmlElement addXml(String xml){  Preconditions.checkNotNull(xml);  children.add(new Pair<Object,ChildType>(xml,ChildType.XML));  return this;}  }
class C{  @Deprecated public Split findSplit(double lat,double lon,double radiusMeters){  return findSplit(lat,lon,radiusMeters,null);}  }
class C{  private void checkArgument(boolean expression,String errorMessage) throws BadRequestException {  if (!expression) {    throw new BadRequestException(errorMessage);  }}  }
class C{  @Override public String logString(){  StringBuilder buf=new StringBuilder(100);  buf.append("any ").append(operandNumber).append(':').append(operand).append(' ');  if (!isRegister(operand)) {    if (location != null) {      buf.append("location{").append(location).append("} ");    }  }  buf.append("hints{").append(splitParent.operandNumber);  IntervalHint hint=locationHint(false);  if (hint != null) {    buf.append(", ").append(hint.location());  }  buf.append("} ranges{");  buf.append("[" + from() + ", "+ to()+ "]");  buf.append("} uses{");  int prev=-1;  for (int i=numUsePos() - 1; i >= 0; --i) {    assert prev < getUsePos(i) : "use positions not sorted";    if (i != numUsePos() - 1) {      buf.append(", ");    }    buf.append(getUsePos(i)).append(':').append(getUsePosRegisterPriority(i).shortName());    prev=getUsePos(i);  }  buf.append("} spill-state{").append(spillState()).append("}");  if (canMaterialize()) {    buf.append(" (remat:").append(getMaterializedValue().toString()).append(")");  }  return buf.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.298 -0400",hash_original_method="39DAA14D954D9E54B8393718BBB5F22E",hash_generated_method="39DAA14D954D9E54B8393718BBB5F22E") Iter(){  for (; ; ) {    next=findFirst();    if (next == null)     break;    Object x=next.value;    if (x != null && x != next) {      nextValue=(V)x;      break;    }  }}  }
class C{  public FloatingActionButton createInto(ViewGroup rootView){  final FloatingActionButton button=new FloatingActionButton(rootView.getContext().getApplicationContext());  Bitmap scaledBitmap=Bitmap.createScaledBitmap(((BitmapDrawable)drawable).getBitmap(),params.width / 2,params.height / 2,true);  button.setFloatingActionButtonColor(this.color);  button.setFloatingActionPressedButtonColor(this.pressedColor == 0 ? getDarkerFrom(this.color) : this.pressedColor);  button.setFloatingActionButtonDrawable(scaledBitmap);  button.setId(this.id);  params.gravity=this.gravity;  rootView.addView(button,params);  return button;}  }
class C{  public ShadowFactory(final int size,final float opacity,final Color color){  hints=new HashMap<Object,Object>();  hints.put(KEY_BLUR_QUALITY,VALUE_BLUR_QUALITY_FAST);  changeSupport=new PropertyChangeSupport(this);  setSize(size);  setOpacity(opacity);  setColor(color);}  }
class C{  private void trace(){  glUseProgram(computeProgram);  glDisable(GL_DEPTH_TEST);  long thisTime=System.nanoTime();  float elapsedSeconds=(thisTime - firstTime) / 1E9f;  glUniform1f(timeUniform,elapsedSeconds);  float blendFactor=frameNumber / (frameNumber + 1.0f);  glUniform1f(blendFactorUniform,blendFactor);  glUniform1i(bounceCountUniform,bounceCount);  glBindImageTexture(framebufferImageBinding,raytraceTexture,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,positionTexture,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,normalTexture,0,false,0,GL_READ_ONLY,GL_RGBA16F);  int worksizeX=mathRoundPoT(width);  int worksizeY=mathRoundPoT(height);  glDispatchCompute(worksizeX / workGroupSizeX,worksizeY / workGroupSizeY,1);  glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);  glBindImageTexture(framebufferImageBinding,0,0,false,0,GL_READ_WRITE,GL_RGBA32F);  glBindImageTexture(worldPositionImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA32F);  glBindImageTexture(worldNormalImageBinding,0,0,false,0,GL_READ_ONLY,GL_RGBA16F);  glUseProgram(0);  frameNumber++;}  }
class C{  public void cancelRelocation(ShardRouting shard){  ensureMutable();  relocatingShards--;  shard.cancelRelocation();}  }
class C{  private void initVerify(){  messDigestTrees.reset();  GMSSPublicKeyParameters gmssPublicKey=(GMSSPublicKeyParameters)key;  pubKeyBytes=gmssPublicKey.getPublicKey();  gmssPS=gmssPublicKey.getParameters();  this.numLayer=gmssPS.getNumOfLayers();}  }
class C{  private static void deleteFixtureDirectory() throws IOException {  FileDeleter.delete(new File(FIXTURE_ROOT));}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public <T extends B>T putInstance(TypeToken<T> type,T value){  throw new UnsupportedOperationException();}  }
class C{  public final CC sizeGroupY(String s){  ver.setSizeGroup(s);  return this;}  }
class C{  public static int supplemental(char h,char l){  return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;}  }
class C{  public PostgreSQLAuthenticationProvider() throws GuacamoleException {  super(new PostgreSQLInjectorProvider(),JDBCAuthenticationProviderService.class);}  }
class C{  public static JSONArray toJSONArray(JSONTokener x) throws JSONException {  return toJSONArray(rowToJSONArray(x),x);}  }
class C{  public void report(QualityQuery qq,TopDocs td,String docNameField,IndexSearcher searcher) throws IOException {  if (logger == null) {    return;  }  ScoreDoc sd[]=td.scoreDocs;  String sep=" \t ";  DocNameExtractor xt=new DocNameExtractor(docNameField);  for (int i=0; i < sd.length; i++) {    String docName=xt.docName(searcher,sd[i].doc);    logger.println(qq.getQueryID() + sep + "Q0"+ sep+ format(docName,20)+ sep+ format("" + i,7)+ sep+ nf.format(sd[i].score)+ sep+ name);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x17F7B2FB,version=271) public int sceUsbCamSetupVideo(pspUsbCamSetupVideoParam usbCamSetupVideoParam,TPointer workArea,int workAreaSize){  this.workArea=workArea.getAddress();  this.workAreaSize=workAreaSize;  resolution=usbCamSetupVideoParam.resolution;  frameRate=usbCamSetupVideoParam.framerate;  whiteBalance=usbCamSetupVideoParam.wb;  saturation=usbCamSetupVideoParam.saturation;  brightness=usbCamSetupVideoParam.brightness;  contrast=usbCamSetupVideoParam.contrast;  sharpness=usbCamSetupVideoParam.sharpness;  imageEffectMode=usbCamSetupVideoParam.effectmode;  frameSize=usbCamSetupVideoParam.framesize;  evLevel=usbCamSetupVideoParam.evlevel;  if (!setupVideo()) {    log.warn(String.format("Cannot find webcam"));    return SceKernelErrors.ERROR_USBCAM_NOT_READY;  }  return 0;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public boolean acquireLock(String name){  LockState state=getLock(name);  return acquireLock(name,state);}  }
class C{  private static PendingInstallShortcutInfo convertToLauncherActivityIfPossible(PendingInstallShortcutInfo original){  if (original.isLauncherActivity()) {    return original;  }  if (!Utilities.isLauncherAppTarget(original.launchIntent) || !original.user.equals(UserHandleCompat.myUserHandle())) {    return original;  }  PackageManager pm=original.mContext.getPackageManager();  ResolveInfo info=pm.resolveActivity(original.launchIntent,0);  if (info == null) {    return original;  }  LauncherActivityInfoCompat launcherInfo=LauncherActivityInfoCompat.fromResolveInfo(info,original.mContext);  return new PendingInstallShortcutInfo(launcherInfo,original.mContext);}  }
class C{  @Override public V remove(Object key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public int strId2Idx(Map fmap){  Integer idxInt=(Integer)fmap.get(strId);  if (idxInt != null) {    this.idx=idxInt.intValue();  }  return this.idx;}  }
class C{  public static double nextUp(final double a){  return nextAfter(a,Double.POSITIVE_INFINITY);}  }
class C{  public boolean isJoinComplete(){  return _joinState.isJoinComplete();}  }
class C{  public String typeName(){  return typeName;}  }
class C{  private void normalize(double[] in){  double max=0d;  for (  double d : in) {    max=Math.max(max,d);  }  for (int i=0; i < in.length; i++) {    in[i]=in[i] / max;  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  static void checkMap(Map<String,Class<?>> map){  if (map != null && map.size() > 0) {    throw DbException.getUnsupportedException("map.size > 0");  }}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  final String resultNS;  NamespaceAlias na=new NamespaceAlias(handler.nextUid());  setPropertiesFromAttributes(handler,rawName,attributes,na);  String prefix=na.getStylesheetPrefix();  if (prefix.equals("#default")) {    prefix="";    na.setStylesheetPrefix(prefix);  }  String stylesheetNS=handler.getNamespaceForPrefix(prefix);  na.setStylesheetNamespace(stylesheetNS);  prefix=na.getResultPrefix();  if (prefix.equals("#default")) {    prefix="";    na.setResultPrefix(prefix);    resultNS=handler.getNamespaceForPrefix(prefix);    if (null == resultNS)     handler.error(XSLTErrorResources.ER_INVALID_NAMESPACE_URI_VALUE_FOR_RESULT_PREFIX_FOR_DEFAULT,null,null);  } else {    resultNS=handler.getNamespaceForPrefix(prefix);    if (null == resultNS)     handler.error(XSLTErrorResources.ER_INVALID_NAMESPACE_URI_VALUE_FOR_RESULT_PREFIX,new Object[]{prefix},null);  }  na.setResultNamespace(resultNS);  handler.getStylesheet().setNamespaceAlias(na);  handler.getStylesheet().appendChild(na);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:39.786 -0500",hash_original_method="6EA1C69DAD85A65D52720F29F3DAA89B",hash_generated_method="76A9BFB939A8C52D6ECCB08F02CF8469") public void remove(SyncOperation operation){  SyncOperation operationToRemove=mOperationsMap.remove(operation.key);  if (operationToRemove == null) {    return;  }  if (!mSyncStorageEngine.deleteFromPending(operationToRemove.pendingOperation)) {    final String errorMessage="unable to find pending row for " + operationToRemove;    Log.e(TAG,errorMessage,new IllegalStateException(errorMessage));  }}  }
class C{  public T queueTime(Integer value){  setInteger(QUEUE_TIME,value);  return (T)this;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_create_widget_day_week);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isDefaultBehavior(){  return defaultBehavior;}  }
class C{  private void appendStartTagInformation(String nodeNameStart,StringBuilder xmlRecord){  xmlRecord.append(OPENING_START_TAG_DELIMITER).append(nodeNameStart);  int count=reader.getAttributeCount();  for (int i=0; i < count; i++) {    xmlRecord.append(" ").append(reader.getAttributeLocalName(i)).append("=\"").append(reader.getAttributeValue(i)).append("\"");  }  xmlRecord.append(CLOSING_START_TAG_DELIMITER);}  }
class C{  public StandardXYItemLabelGenerator(String formatString,DateFormat xFormat,NumberFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  public void createMaps() throws IOException {  final Image map=loadImage();  if (map == null) {    System.out.println("You need to select a map image for this to work");    System.out.println("Shutting down");    System.exit(0);    return;  }  textOptionPane.show();  for (int x=0; (x) * TileManager.TILE_SIZE < map.getWidth(null); x++) {    for (int y=0; (y) * TileManager.TILE_SIZE < map.getHeight(null); y++) {      final Rectangle bounds=new Rectangle(x * TileManager.TILE_SIZE,y * TileManager.TILE_SIZE,TileManager.TILE_SIZE,TileManager.TILE_SIZE);      final GraphicsConfiguration m_localGraphicSystem=GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration();      final BufferedImage relief=m_localGraphicSystem.createCompatibleImage(TileManager.TILE_SIZE,TileManager.TILE_SIZE,m_baseMap ? Transparency.BITMASK : Transparency.TRANSLUCENT);      relief.getGraphics().drawImage(map,0,0,TileManager.TILE_SIZE,TileManager.TILE_SIZE,bounds.x,bounds.y,bounds.x + TileManager.TILE_SIZE,bounds.y + TileManager.TILE_SIZE,observer);      final String outFileName=location + File.separator + x+ "_"+ y+ ".png";      ImageIO.write(relief,"png",new File(outFileName));      textOptionPane.appendNewLine("wrote " + outFileName);    }  }  textOptionPane.appendNewLine("\r\nAll Finished!");  textOptionPane.countDown();  textOptionPane.dispose();  JOptionPane.showMessageDialog(null,new JLabel("All Finished"));  System.exit(0);}  }
class C{  private void startMission(){  setAndInitNextState(State.MISSION_LOADED);}  }
class C{  public ReplyKeyboardMarkupBuilder addRow(List<KeyboardButton> buttons){  keyboard.add(new LinkedList<>(buttons));  return this;}  }
class C{  private SpeechletResponse newAskResponse(String stringOutput,boolean isOutputSsml,String repromptText,boolean isRepromptSsml){  OutputSpeech outputSpeech, repromptOutputSpeech;  if (isOutputSsml) {    outputSpeech=new SsmlOutputSpeech();    ((SsmlOutputSpeech)outputSpeech).setSsml(stringOutput);  } else {    outputSpeech=new PlainTextOutputSpeech();    ((PlainTextOutputSpeech)outputSpeech).setText(stringOutput);  }  if (isRepromptSsml) {    repromptOutputSpeech=new SsmlOutputSpeech();    ((SsmlOutputSpeech)repromptOutputSpeech).setSsml(repromptText);  } else {    repromptOutputSpeech=new PlainTextOutputSpeech();    ((PlainTextOutputSpeech)repromptOutputSpeech).setText(repromptText);  }  Reprompt reprompt=new Reprompt();  reprompt.setOutputSpeech(repromptOutputSpeech);  return SpeechletResponse.newAskResponse(outputSpeech,reprompt);}  }
class C{  public static float[] concatAllFloat(float[]... arrays){  int totalLength=0;  final int subArrayCount=arrays.length;  for (int i=0; i < subArrayCount; ++i) {    totalLength+=arrays[i].length;  }  float[] result=Arrays.copyOf(arrays[0],totalLength);  int offset=arrays[0].length;  for (int i=1; i < subArrayCount; ++i) {    System.arraycopy(arrays[i],0,result,offset,arrays[i].length);    offset+=arrays[i].length;  }  return result;}  }
class C{  public boolean checkValidDest(LayoutBlock currentBlock,LayoutBlock nextBlock,LayoutBlock destBlock,LayoutBlock destBlockn1,int pathMethod) throws jmri.JmriException {  List<LayoutBlock> destList=new ArrayList<LayoutBlock>();  if (destBlockn1 != null) {    destList.add(destBlockn1);  }  try {    return checkValidDest(currentBlock,nextBlock,destBlock,destList,pathMethod);  } catch (  jmri.JmriException e) {    throw e;  }}  }
class C{  private static boolean rulesEqual(IAccessRule[] a,IAccessRule[] b){  if (a == b) {    return true;  }  if (a.length != b.length) {    return false;  }  for (int j=0; j < a.length; j++) {    if (!a[j].equals(b[j])) {      return false;    }  }  return true;}  }
class C{  private void enableActions(){  restoreAction.setEnabled(frame.isMaximum() || frame.isIcon());  maximizeAction.setEnabled((frame.isMaximizable() && !frame.isMaximum() && !frame.isIcon()) || (frame.isMaximizable() && frame.isIcon()));  iconifyAction.setEnabled(frame.isIconifiable() && !frame.isIcon());  closeAction.setEnabled(frame.isClosable());  sizeAction.setEnabled(false);  moveAction.setEnabled(false);}  }
class C{  @SideOnly(Side.CLIENT) public static void drawQuad(){  drawQuad(0,0,1,1);}  }
class C{  private static void fillIdentifyingFields(VOSubscription voSubscription,Subscription subscription){  voSubscription.setSubscriptionId(subscription.getSubscriptionId());}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  public String useWordFrequenciesTipText(){  return "Use word frequencies rather than binary " + "bag of words representation";}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.768 -0400",hash_original_method="93C8E32B6EE68EAE0C3BFC84A4183EBE",hash_generated_method="5502648BD3DA58FEBB997504A380D974") @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (prefixes != null) {    for (int i=0; i < prefixes.length; i++) {      if (i > 0) {        buffer.append(",");      }      buffer.append(prefixes[i]);    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public static String rowToString(JSONArray ja){  StringBuilder sb=new StringBuilder();  for (int i=0; i < ja.length(); i+=1) {    if (i > 0) {      sb.append(',');    }    Object object=ja.opt(i);    if (object != null) {      String string=object.toString();      if (string.length() > 0 && (string.indexOf(',') >= 0 || string.indexOf('\n') >= 0 || string.indexOf('\r') >= 0 || string.indexOf(0) >= 0 || string.charAt(0) == '"')) {        sb.append('"');        int length=string.length();        for (int j=0; j < length; j+=1) {          char c=string.charAt(j);          if (c >= ' ' && c != '"') {            sb.append(c);          }        }        sb.append('"');      } else {        sb.append(string);      }    }  }  sb.append('\n');  return sb.toString();}  }
class C{  @Override public void run(){  InternalDistributedSystem ids=cache.getDistributedSystem();  DM dm=ids.getDistributionManager();  try {    for (; ; ) {      try {        if (checkCancelled()) {          break;        }        boolean interrupted=Thread.interrupted();        try {synchronized (this) {            this.wait(messageSyncInterval * 1000);          }        } catch (        InterruptedException e) {          interrupted=true;          if (checkCancelled()) {            break;          }          logger.warn(LocalizedMessage.create(LocalizedStrings.HARegionQueue_INTERRUPTEDEXCEPTION_OCCURED_IN_QUEUEREMOVALTHREAD_WHILE_WAITING),e);          break;        } finally {          if (interrupted)           Thread.currentThread().interrupt();        }        if (logger.isTraceEnabled()) {          logger.trace("QueueRemovalThread about to query the message list");        }        List queueRemovalMessageList=this.createMessageList();        if (queueRemovalMessageList != null && !queueRemovalMessageList.isEmpty()) {          QueueRemovalMessage qrm=new QueueRemovalMessage();          qrm.resetRecipients();          List<CacheServer> servers=this.cache.getCacheServers();          List<DistributedMember> recipients=new LinkedList();          for (          CacheServer server : servers) {            recipients.addAll(CacheServerImpl.class.cast(server).getCacheServerAdvisor().adviseBridgeServers());          }          qrm.setRecipients(recipients);          qrm.setMessagesList(queueRemovalMessageList);          dm.putOutgoing(qrm);        }      } catch (      CancelException e) {        if (logger.isDebugEnabled()) {          logger.debug("QueueRemovalThread is exiting due to cancellation");        }        break;      }catch (      VirtualMachineError err) {        SystemFailure.initiateFailure(err);        throw err;      }catch (      Throwable t) {        SystemFailure.checkFailure();        if (checkCancelled()) {          break;        }        if (logger.isDebugEnabled()) {          logger.debug("QueueRemovalThread: ignoring exception",t);        }      }    }  } catch (  CancelException e) {    if (logger.isDebugEnabled()) {      logger.debug("QueueRemovalThread exiting due to cancellation: ",e);    }  } finally {    logger.info(LocalizedMessage.create(LocalizedStrings.HARegionQueue_THE_QUEUEREMOVALTHREAD_IS_DONE));  }}  }
class C{  public boolean isEditable(){  return m_PaneView.isEditable();}  }
class C{  void appletRestart(){  panel.sendEvent(AppletPanel.APPLET_STOP);  panel.sendEvent(AppletPanel.APPLET_DESTROY);  panel.sendEvent(AppletPanel.APPLET_INIT);  panel.sendEvent(AppletPanel.APPLET_START);}  }
class C{  static void testBadAccess(){  Mutant mutant=new Mutant();  try {    int x=mutant.inaccessibleField;    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (ifield)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    int y=Mutant.inaccessibleStaticField;    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (sfield)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    mutant.inaccessibleMethod();    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (method)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    Mutant.inaccessibleStaticMethod();    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (smethod)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    InaccessibleClass.test();    System.err.println("ERROR: bad meth-class access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (meth-class)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    int blah=InaccessibleClass.blah;    System.err.println("ERROR: bad field-class access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (field-class)");    if (VERBOSE)     System.out.println("--- " + iae);  }  try {    InaccessibleMethod.test();    System.err.println("ERROR: bad access succeeded\n");  } catch (  IllegalAccessError iae) {    System.out.println("Got expected IllegalAccessError (meth-meth)");    if (VERBOSE)     System.out.println("--- " + iae);  }}  }
class C{  public boolean hasKey(){  return getKey() != null;}  }
class C{  public int stepToNextScreenEvent() throws JavaRosaException {  try {    if (getEvent() != FormEntryController.EVENT_END_OF_FORM) {      int event;      group_skip:       do {        event=stepToNextEvent(FormController.STEP_OVER_GROUP);switch (event) {case FormEntryController.EVENT_QUESTION:          break group_skip;case FormEntryController.EVENT_END_OF_FORM:        break;case FormEntryController.EVENT_PROMPT_NEW_REPEAT:      break group_skip;case FormEntryController.EVENT_GROUP:case FormEntryController.EVENT_REPEAT:    if (indexIsInFieldList() && getQuestionPrompts().length != 0) {      break group_skip;    }  break;case FormEntryController.EVENT_REPEAT_JUNCTURE:Log.i(t,"repeat juncture: " + getFormIndex().getReference());break;default :Log.w(t,"JavaRosa added a new EVENT type and didn't tell us... shame on them.");break;}} while (event != FormEntryController.EVENT_END_OF_FORM);}return getEvent();} catch (RuntimeException e) {throw new JavaRosaException(e);}}  }
class C{  protected void fireConnectionClosed(){  ConnectionEvent evt=new ConnectionEvent(this);  for (  ConnectionEventListener listener : connectionEventListeners) {    listener.connectionClosed(evt);  }}  }
class C{  SegmentString createSplitEdge(SegmentNode ei0,SegmentNode ei1){  int npts=ei1.segmentIndex - ei0.segmentIndex + 2;  Coordinate lastSegStartPt=edge.getCoordinate(ei1.segmentIndex);  boolean useIntPt1=ei1.isInterior() || !ei1.coord.equals2D(lastSegStartPt);  if (!useIntPt1) {    npts--;  }  Coordinate[] pts=new Coordinate[npts];  int ipt=0;  pts[ipt++]=new Coordinate(ei0.coord);  for (int i=ei0.segmentIndex + 1; i <= ei1.segmentIndex; i++) {    pts[ipt++]=edge.getCoordinate(i);  }  if (useIntPt1)   pts[ipt]=new Coordinate(ei1.coord);  return new NodedSegmentString(pts,edge.getData());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private Boolean shouldConnect(final IProject project){  Check.notNull(project,"project");  if (!project.isOpen()) {    log.debug(MessageFormat.format("Ignoring closed project {0}",project.getName()));    return null;  }  String providerName;  try {    providerName=project.getPersistentProperty(TeamUtils.PROVIDER_PROP_KEY);  } catch (  final CoreException e) {    log.warn(MessageFormat.format("Could not query repository manager for project {0} (when determining connection viability)",project.getName()),e);    return null;  }  if (providerName == null || !providerName.equals(TFSRepositoryProvider.PROVIDER_ID)) {    return null;  }  String repositoryStatus=null;  try {    repositoryStatus=project.getPersistentProperty(REPOSITORY_STATUS_KEY);  } catch (  final CoreException e) {    log.warn(MessageFormat.format("Repository status could not be determined for project {0} (when determining connection viability)",project.getName()),e);  }  if (REPOSITORY_STATUS_OFFLINE_VALUE.equals(repositoryStatus)) {    return Boolean.FALSE;  }  return Boolean.TRUE;}  }
class C{  public MethodState loadNextMethodState(){  MethodState ret=nextLoadPointer;  nextLoadPointer=nextLoadPointer.getNext();  if (nextLoadPointer == null) {    nextUnloadPointer=ret;  }  return ret;}  }
class C{  public Yaml(BaseConstructor constructor,Representer representer,DumperOptions dumperOptions){  this(constructor,representer,dumperOptions,new Resolver());}  }
class C{  private ValueGraphVertex findOrCreateVertex(TypeOperand op){  Object name=op.getTypeRef();  ValueGraphVertex v=getVertex(name);  if (v == null) {    v=new ValueGraphVertex(op);    v.setLabel(op,0);    graph.addGraphNode(v);    nameMap.put(name,v);  }  return v;}  }
class C{  protected void assertStep(Throwing.Function<String,String> step,String unformattedPath,String expectedPath) throws Throwable {  String unformatted=LineEnding.toUnix(getTestResource(unformattedPath));  String formatted=step.apply(unformatted);  Assert.assertEquals(-1,formatted.indexOf('\r'));  String expected=LineEnding.toUnix(getTestResource(expectedPath));  Assert.assertEquals(expected,formatted);}  }
class C{  public Property dayOfYear(){  return new Property(this,getChronology().dayOfYear());}  }
class C{  protected String defaultClassifierString(){  return "weka.classifiers.rules.ZeroR";}  }
class C{  private void doTerrainUpdates(float dt){  if (terrainEditToolActivated) {    lastModifyTime+=dt;    if (lastModifyTime >= toolModifyRate) {      lastModifyTime=0;      if (terrainEditToolActivated) {        toolController.doTerrainEditToolActivated();        toolController.doTerrainEditToolAlternateActivated();      }      lastModifyTime=app.getContext().getTimer().getTime();    }  }}  }
class C{  @Override public void visit(NodeVisitor v){  v.visit(this);}  }
class C{  private void normalize(){  for (int i=0; i < vocab.size(); ++i) {    double len=0;    for (int j=i * layerSize; j < (i + 1) * layerSize; ++j)     len+=vectors.get(j) * vectors.get(j);    len=Math.sqrt(len);    for (int j=i * layerSize; j < (i + 1) * layerSize; ++j)     vectors.put(j,vectors.get(j) / len);  }}  }
class C{  public void removeDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){  if (account == null || file == null || listener == null)   return;  String targetKey=buildRemoteName(account,file);  if (mBoundListeners.get(targetKey) == listener) {    mBoundListeners.remove(targetKey);  }}  }
class C{  @DSComment("IO movement methodName") @DSSpec(DSCat.IO_ACTION_METHOD) @DSSink({DSSinkKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.817 -0500",hash_original_method="DDCF57687ACF51357E563F1083DC4261",hash_generated_method="28C15B77EC7816C10902E4F13397C53B") public URLConnection openConnection() throws IOException {  return streamHandler.openConnection(this);}  }
class C{  public ShoppingCartPage(final PageParameters params){  super(params);}  }
class C{  public boolean isDrawHoleEnabled(){  return mDrawHole;}  }
class C{  private boolean isReachableSlot(final Player player,final RPSlot baseSlot){  if (!(baseSlot instanceof EntitySlot)) {    return false;  }  EntitySlot slot=(EntitySlot)baseSlot;  slot.clearErrorMessage();  boolean res=slot.isReachableForTakingThingsOutOfBy(player);  if (!res) {    logger.debug("Unreachable slot");    player.sendPrivateText(slot.getErrorMessage());  }  return res;}  }
class C{  public void actionPerformed(ActionEvent ae){  if (ae.getActionCommand().equals("Go")) {    if (timer != null) {      timer.stop();      timer.start();    } else {      timer.start();    }  } else   if (ae.getActionCommand().equals("Stop")) {    if (timer != null) {      timer.stop();    }  }}  }
class C{  private Segment compactGroup(List<Segment> segments,List<OffsetPredicate> predicates){  Segment firstSegment=segments.iterator().next();  Segment compactSegment=manager.createSegment(SegmentDescriptor.builder().withId(firstSegment.descriptor().id()).withVersion(firstSegment.descriptor().version() + 1).withIndex(firstSegment.descriptor().index()).withMaxSegmentSize(segments.stream().mapToLong(null).max().getAsLong()).withMaxEntries(segments.stream().mapToInt(null).max().getAsInt()).build());  compactGroup(segments,predicates,compactSegment);  manager.replaceSegments(segments,compactSegment);  return compactSegment;}  }
class C{  public boolean canSave(){  return true;}  }
class C{  public FooterArea addCheckBox(final String label,final boolean selection){  this.checkBoxLabel=label;  this.checkBoxValue=selection;  this.setInitialised(true);  return this;}  }
class C{  public Object childrenAccept(ParserVisitor visitor,Object data){  if (children != null) {    for (int i=0; i < children.length; ++i) {      children[i].jjtAccept(visitor,data);    }  }  return data;}  }
class C{  protected WritableDataStore<Meta> initializeMeta(Relation<V> relation,double[][] means){  NumberVectorDistanceFunction<? super V> df=getDistanceFunction();  final WritableDataStore<Meta> metas=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP,Meta.class);  for (DBIDIter id=relation.iterDBIDs(); id.valid(); id.advance()) {    Meta c=new Meta(k);    V fv=relation.get(id);    for (int i=0; i < k; i++) {      final double d=c.dists[i]=df.distance(fv,DoubleVector.wrap(means[i]));      if (i > 0) {        if (d < c.dists[c.primary]) {          c.primary=i;        } else         if (d > c.dists[c.secondary]) {          c.secondary=i;        }      }    }    metas.put(id,c);  }  return metas;}  }
class C{  public SeedAlignmentData retrieveSeedAlignmentData(Set<String> proteinIds){  SeedAlignmentData seedAlignmentData=null;  return seedAlignmentData;}  }
class C{  @Override public void clear(){  map.clear();}  }
class C{  public Text(String string){  set(string);}  }
class C{  public boolean canEncode(char ch){  int index;  int theBytes;  index=index1[((ch & mask1) >> shift)] + (ch & mask2);  if (index < 15000)   theBytes=(int)(index2.charAt(index)); else   theBytes=(int)(index2a.charAt(index - 15000));  if (theBytes != 0)   return (true);  return (ch == '\u0000');}  }
class C{  public void injectFields(Object target){  if (!injectFields.containsKey(target.getClass())) {    injectFields.put(target.getClass(),injectFields(target.getClass()));  }  for (  Object[] f : injectFields.get(target.getClass())) {    Field field=(Field)f[0];    Key key=(Key)f[2];    try {      field.set(target,(boolean)f[1] ? provider(key) : instance(key));    } catch (    Exception e) {      throw new FeatherException(String.format("Can't inject field %s in %s",field.getName(),target.getClass().getName()));    }  }}  }
class C{  public String encodeBody(){  return this.getHeaderValue();}  }
class C{  public static SynchronizerStatus makePendingStatus(CronExpression ce){  Date now=new Date();  return new SynchronizerStatus(Status.PENDING,now,"Next activation: " + ce.getNextValidTimeAfter(now).toString());}  }
class C{  public TrueTypeFont(int type){  this.type=type;  tables=Collections.synchronizedSortedMap(new TreeMap<String,Object>());}  }
class C{  public TimeSeriesTableModel(TimeSeries series){  this(series,false);}  }
class C{  @Override public int hashCode(){  int result=127;  result=HashUtilities.hashCode(result,this.formatPattern);  result=HashUtilities.hashCode(result,this.additionalFormatPattern);  result=HashUtilities.hashCode(result,this.seriesLabelLists);  return result;}  }
class C{  protected static String genSpaces(int n){  StringBuilder builder=new StringBuilder();  for (int i=0; i < n; i++) {    builder.append("|   ");  }  return builder.toString();}  }
class C{  @Override public void decreaseAmount(){  if (recharge.getCurrentAmount() > recharge.getInitialAmount()) {    model.changeAmount(recharge.getCurrentAmount() - recharge.getAmountStep());    model.changeCost(recharge.getCurrentCost() - recharge.getCostStep());  }}  }
class C{  private boolean doAcquireSharedNanos(int arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  private void writeHex(int i) throws IOException {  int cursor=8;  do {    hex[--cursor]=HEX_DIGITS[i & 0xf];  } while ((i>>>=4) != 0);  socketOut.write(hex,cursor,hex.length - cursor);}  }
class C{  public static void solveQuiz(Quiz quiz){switch (quiz.getType()) {case ALPHA_PICKER:    setAlphaPickerProgress((AlphaPickerQuiz)quiz);  break;case PICKER:setPickerProgress((PickerQuiz)quiz);break;case FILL_BLANK:FillBlankQuiz fillBlankQuiz=(FillBlankQuiz)quiz;String siblingText=fillBlankQuiz.getStart();if (TextUtils.isEmpty(siblingText)) {siblingText=fillBlankQuiz.getEnd();}int viewId=R.id.quiz_edit_text;if (TextUtils.isEmpty(siblingText)) {siblingText=quiz.getQuestion();viewId=R.id.quiz_content;}typeAndCloseOnView(fillBlankQuiz.getAnswer(),siblingText,viewId);break;case FILL_TWO_BLANKS:FillTwoBlanksQuiz fillTwoBlanksQuiz=(FillTwoBlanksQuiz)quiz;typeAndCloseOnView(fillTwoBlanksQuiz.getAnswer()[0],R.id.quiz_edit_text);typeAndCloseOnView(fillTwoBlanksQuiz.getAnswer()[1],R.id.quiz_edit_text_two);break;case FOUR_QUARTER:testOptionsQuizWithType(quiz,GridView.class);break;case SINGLE_SELECT:case SINGLE_SELECT_ITEM:case MULTI_SELECT:testOptionsQuizWithType(quiz,ListView.class);break;case TOGGLE_TRANSLATE:ToggleTranslateQuiz toggleTranslateQuiz=(ToggleTranslateQuiz)quiz;for (int i : toggleTranslateQuiz.getAnswer()) {onData(equalTo(toggleTranslateQuiz.getReadableOptions()[i])).inAdapterView(allOf(instanceOf(AdapterView.class),withId(R.id.quiz_content),hasSiblingWith(quiz.getQuestion()))).perform(click());}break;case TRUE_FALSE:TrueFalseQuiz trueFalseQuiz=(TrueFalseQuiz)quiz;onView(allOf(isDescendantOfA(hasSibling(withText(quiz.getQuestion()))),withText(trueFalseQuiz.getAnswer() ? R.string.btn_true : R.string.btn_false))).perform(click());break;}}  }
class C{  public void testPrecedence() throws Exception {  StandardQueryParser qp=new StandardQueryParser();  qp.setAnalyzer(new MockAnalyzer(random(),MockTokenizer.WHITESPACE,false));  Query query1=qp.parse("A AND B OR C AND D","field");  Query query2=qp.parse("+A +B +C +D","field");  assertEquals(query1,query2);}  }
class C{  static String capitalizeFirstLetterOfString(String text,Locale locale){  if (text == null || text.length() < 1) {    return text;  }  String textCapitalized=text.substring(0,1).toUpperCase(locale) + text.substring(1);  return textCapitalized;}  }
class C{  public void testResourceSharedMode() throws Exception {  processTestGridifyResource(DeploymentMode.SHARED);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","yrcti");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ConfigBuilder withMaxIdleSessions(int size){  this.maxIdleConnectionPoolSize=size;  return this;}  }
class C{  public static AttribKey forAttribute(Namespaces inScope,ElKey el,String qname){  Namespaces ns;  String localName;  int colon=qname.indexOf(':');  if (colon < 0) {    ns=el.ns;    localName=qname;  } else {    ns=inScope.forAttrName(el.ns,qname);    if (ns == null) {      return null;    }    ns=inScope.forUri(ns.uri);    localName=qname.substring(colon + 1);  }  return new AttribKey(el,ns,localName);}  }
class C{  public static void assertInRange(long start,long end,long actual){  assertTrue("Expected: " + actual + " >= "+ start,actual >= start);  assertTrue("Expected: " + actual + " <= "+ end,actual <= end);}  }
class C{  public V put(K key,V value){  final Object k=maskNull(key);  retryAfterResize:   for (; ; ) {    final Object[] tab=table;    final int len=tab.length;    int i=hash(k,len);    for (Object item; (item=tab[i]) != null; i=nextKeyIndex(i,len)) {      if (item == k) {        @SuppressWarnings("unchecked") V oldValue=(V)tab[i + 1];        tab[i + 1]=value;        return oldValue;      }    }    final int s=size + 1;    if (s + (s << 1) > len && resize(len))     continue retryAfterResize;    modCount++;    tab[i]=k;    tab[i + 1]=value;    size=s;    return null;  }}  }
class C{  public void removeListener(final IProcessListener listener){  listeners.removeListener(listener);}  }
class C{  public void insert(NodeDescriptor parent,int index,Node child){  int initialCount=parent.getChildren().size();  parent.addChild(index,wrap(child));  if (parent.getChildren().size() != initialCount) {    int addedIndex=-1;    if (isSorted()) {      List<NodeDescriptor> childrenModels=parent.getChildren();      for (int i=0; i < childrenModels.size(); i++) {        if (childrenModels.get(i).getNode().equals(child)) {          addedIndex=i;          break;        }      }    } else {      addedIndex=index;    }    fireEvent(new StoreAddEvent(addedIndex,child));  }}  }
class C{  private LangUtils(){}  }
class C{  public boolean isEntity(){  return isString() && string.startsWith("&#") && string.endsWith(";");}  }
class C{  public BusinessObjectDataEntity createBusinessObjectDataEntity(BusinessObjectDataKey businessObjectDataKey,Boolean businessObjectDataLatestVersion,String businessObjectDataStatusCode){  return createBusinessObjectDataEntity(businessObjectDataKey.getNamespace(),businessObjectDataKey.getBusinessObjectDefinitionName(),businessObjectDataKey.getBusinessObjectFormatUsage(),businessObjectDataKey.getBusinessObjectFormatFileType(),businessObjectDataKey.getBusinessObjectFormatVersion(),businessObjectDataKey.getPartitionValue(),businessObjectDataKey.getSubPartitionValues(),businessObjectDataKey.getBusinessObjectDataVersion(),businessObjectDataLatestVersion,businessObjectDataStatusCode);}  }
class C{  public static String createSelectStatement(String driverName){  String statement="SELECT * FROM %1$s WHERE G_DEVICE = ? ORDER BY G_CREATED DESC";  if (driverName == null) {    return statement;  }  if (driverName.contains("derby")) {    return "SELECT * FROM %1$s WHERE G_DEVICE = ? ORDER BY G_CREATED DESC FETCH NEXT %2$s ROWS ONLY";  } else   if (driverName.contains("sap db")) {    return "SELECT * FROM %1$s WHERE G_DEVICE = ? ORDER BY G_CREATED DESC LIMIT 0, %2$s";  } else   if (driverName.contains("hdb")) {    return "SELECT * FROM %1$s WHERE G_DEVICE = ? ORDER BY G_CREATED DESC LIMIT %2$s OFFSET 0";  } else   if (driverName.contains("adaptive server enterprise")) {    return "SELECT TOP %2$s * FROM %1$s WHERE G_DEVICE = ? ORDER BY G_CREATED DESC";  }  return statement;}  }
class C{  public static Vec4 computeAveragePoint(Iterable<? extends Vec4> points){  if (points == null) {    String msg=Logging.getMessage("nullValue.PointListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  int count=0;  double x=0d;  double y=0d;  double z=0d;  double w=0d;  for (  Vec4 vec : points) {    if (vec == null)     continue;    count++;    x+=vec.x;    y+=vec.y;    z+=vec.z;    w+=vec.w;  }  if (count == 0)   return null;  return new Vec4(x / (double)count,y / (double)count,z / (double)count,w / (double)count);}  }
class C{  public boolean isIgnored(Class<?> c,String displayName){  HashSet<String> list;  if (m_Ignored.containsKey(c)) {    list=m_Ignored.get(c);  } else {    list=new HashSet<String>();  }  return list.contains(displayName);}  }
class C{  protected String removePrivateQueryParameters(String queryString){  if (WWUtil.isEmpty(queryString))   return queryString;  String s=queryString.replaceAll("(?i)\\Qconnectid\\E\\=[^&]*\\&?","");  if (s.endsWith("&"))   s=s.substring(0,s.length() - 1);  return s;}  }
class C{  @PatchMethod(override=true) public static void loginWithOAuth(JsOAuthWindow window,String authUrl,String errUrl,int popupHeight,int popupWidth,int clientHeight,int clientWidth){}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public Expression implicitReturnExpr(){  Expression _xifexpression=null;  boolean _isSingleExprImplicitReturn=this.isSingleExprImplicitReturn();  if (_isSingleExprImplicitReturn) {    Block _body=this.getBody();    EList<Statement> _statements=_body.getStatements();    Statement _get=_statements.get(0);    _xifexpression=((ExpressionStatement)_get).getExpression();  } else {    _xifexpression=null;  }  return _xifexpression;}  }
class C{  private String removeBadNamespaceDefinition(String dirtyHTML){  return dirtyHTML.replaceAll(EMPTY_NS_DEFINITION_PATTERN,"").replaceAll(NS_TAG_OPEN_PREFIX_DEFINITION_PATTERN,"<").replaceAll(NS_TAG_CLOSURE_PREFIX_DEFINITION_PATTERN,"</");}  }
class C{  public void debugException(Throwable t){  if (ToastBootstrap.exception_info_logging || ToastBootstrap.debug_logging) {    DEBUG.getPrintSteam().flush();    log("DEBUG EXCEPTION: " + t,ERROR);    exception(t);    ERROR.getPrintSteam().flush();  }}  }
class C{  public Log(Writer _writer,LogRestarter _restarter,boolean _postAnnouncements,boolean _repostAnnouncementsOnRestart){  filename=null;  postAnnouncements=_postAnnouncements;  repostAnnouncementsOnRestart=_repostAnnouncementsOnRestart;  appendOnRestart=true;  isLoggingToSystemOut=false;  writer=new PrintWriter(new BufferedWriter(_writer));  restarter=_restarter;}  }
class C{  @Override public void onReceivedSslError(WebView view,SslErrorHandler handler,SslError error){  Log.w(TAG,"SSL error: " + error);  handler.proceed();}  }
class C{  public void testBooleanColumnType(){  MockModel mockModel=new MockModel();  mockModel.booleanField=false;  Long id=mockModel.save();  boolean databaseBooleanValue=MockModel.load(MockModel.class,id).booleanField;  assertEquals(false,databaseBooleanValue);  assertEquals(mockModel,new Select().from(MockModel.class).where("booleanField = ?",0).executeSingle());  assertEquals(mockModel,new Select().from(MockModel.class).where("booleanField = ?",false).executeSingle());  assertNull(new Select().from(MockModel.class).where("booleanField = ?",1).executeSingle());  assertNull(new Select().from(MockModel.class).where("booleanField = ?",true).executeSingle());}  }
class C{  public CharSequenceReader(){}  }
class C{  public void sendHeaders(HeaderSet headers) throws IOException {  ensureOpen();  if (headers == null) {    throw new IOException("Headers may not be null");  }  int[] headerList=headers.getHeaderList();  if (headerList != null) {    for (int i=0; i < headerList.length; i++) {      replyHeader.setHeader(headerList[i],headers.getHeader(headerList[i]));    }  }}  }
class C{  @Override public boolean isCellEditable(int row,int col){  if (col == 1) {    return true;  }  return false;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  result.append("[");  for (int i=0; i < size; ++i) {    result.append(vector[i]);    if (i + 1 < size)     result.append(", ");  }  result.append("]");  return result.toString();}  }
class C{  public void writeGenotype(final EvolutionState state,final DataOutput dataOutput) throws IOException {  dataOutput.writeInt(rulesets.length);  for (int x=0; x < rulesets.length; x++)   rulesets[x].writeRuleSet(state,dataOutput);}  }
class C{  @Override public boolean add(KnownShield object){  throw new UnsupportedOperationException();}  }
class C{  public void checkSimple(boolean registered) throws Exception {  startUp(registered);  cache1.put(1,EnumType.ONE);  validateSimple(1,EnumType.ONE,registered);}  }
class C{  public Confirmation(String inResponseTo,String recipient){  this.type=ConfirmationType.BEARER;  this.inResponseTo=inResponseTo;  this.recipient=recipient;  this.certificate=null;}  }
class C{  public double eval(double params[]){  return (params[0] - params[1] - params[2]- params[3]);}  }
class C{  public final CC growY(Float w){  ver.setGrow(w);  return this;}  }
class C{  public boolean hasNext(){  return hasNextInetSocketAddress() || hasNextProxy() || hasNextPostponed();}  }
class C{  public boolean hasShutdownHook(Runnable shutdownHook){  return hooks.contains(shutdownHook);}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_DATA3\"";  db.execSQL(sql);}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  m_Discretizer.input(instance);  m_Discretizer.batchFinished();  Instance newInstance=m_Discretizer.output();  if (m_OldIndexToNewIndex != null) {    newInstance.setClassValue(m_OldIndexToNewIndex[(int)newInstance.classValue()]);  }  newInstance.setDataset(m_DiscretizedHeader);  double[] probs=m_Classifier.distributionForInstance(newInstance);  if (!m_MinimizeAbsoluteError) {    double prediction=0, probSum=0;    for (int j=0; j < probs.length; j++) {      prediction+=probs[j] * m_ClassMeans[j];      probSum+=probs[j];    }    return prediction / probSum;  } else {    UnivariateQuantileEstimator e=(UnivariateQuantileEstimator)getDensityEstimator(instance,true);    return e.predictQuantile(0.5);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    double fx, fy;    float aspect;    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double eightGridRes=8 * gridRes;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("circular_bw.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          fy=(N[6] - N[4] + 2 * (N[7] - N[3]) + N[0] - N[2]) / eightGridRes;          fx=(N[2] - N[4] + 2 * (N[1] - N[5]) + N[0] - N[6]) / eightGridRes;          if (fx != 0) {            aspect=(float)(180 - Math.atan(fy / fx) * radToDeg + 90 * (fx / Math.abs(fx)));            outputFile.setValue(row,col,aspect);          } else {            outputFile.setValue(row,col,-1);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void invokeInterface(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKEINTERFACE,owner,method,true);}  }
class C{  public boolean hasEntryLink(){  return super.hasElement(EntryLink.KEY);}  }
class C{  public Tweet(){}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static IJavaProject createProject(String projectName) throws CoreException {  IClasspathEntry[] classpath=new IClasspathEntry[]{JavaCore.newSourceEntry(Path.fromOSString("/" + projectName + "/"+ SOURCE_FOLDER)),JavaCore.newContainerEntry(Path.fromOSString("org.eclipse.jdt.launching.JRE_CONTAINER"))};  return ProjectTestUtil.createProject(projectName,classpath);}  }
class C{  @Override final public boolean equals(Object o){  return super.equals(o);}  }
class C{  public boolean hasField(){  return field() != null;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xFB0A6C5D,version=271) public int sceUsbCamStillInput(TPointer buffer,int size){  return 0;}  }
class C{  @NoInline public static Object invokeWithDotDotVarArg(Object obj,int methodID,TypeReference expectReturnType,boolean skip4Args) throws Exception {  MethodReference mr=MemberReference.getMethodRef(methodID);  if (VM.BuildForPower64ELF_ABI) {    Address varargAddress=pushVarArgToSpillArea(methodID,skip4Args);    Object[] argObjectArray=packageParameterFromVarArg(mr,varargAddress);    return callMethod(obj,mr,argObjectArray,expectReturnType,skip4Args);  } else {    if (VM.VerifyAssertions)     VM._assert(VM.BuildForSVR4ABI);    Address glueFP=Magic.getCallerFramePointer(Magic.getCallerFramePointer(Magic.getCallerFramePointer(Magic.getFramePointer())));    Object[] argObjectArray=packageParameterFromDotArgSVR4(mr,glueFP,skip4Args);    return callMethod(obj,mr,argObjectArray,expectReturnType,skip4Args);  }}  }
class C{  public static void fill(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public static String normalize(String p){  if (p == null)   return "";  if (p.endsWith("/") && p.length() > 1)   return p.substring(0,p.length() - 1);  return p;}  }
class C{  public static void load(){  if (m_actionsLogFile.exists()) {    try {      load(m_actionsLogFile);    } catch (    final IOException e) {      CUtilityFunctions.logException(e);    }  }}  }
class C{  public static void test5(){  final DataFlavor flavor=new DataFlavor("text/plain-TEST5; charset=Unicode",null);  fm.getNativesForFlavor(flavor);  fm.setNativesForFlavor(flavor,new String[0]);  List<String> natives=fm.getNativesForFlavor(flavor);  if (!natives.isEmpty()) {    System.err.println("natives=" + natives);    throw new RuntimeException("Test failed");  }}  }
class C{  @JsonCreator public static JobStatus fromString(String name){  for (  JobStatus t : JobStatus.values()) {    if (t.toString().equalsIgnoreCase(name)) {      return t;    }  }  throw new IllegalArgumentException("Job statust type does not exist.");}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getStateMachine_();}  }
class C{  public <K>T delete(String url,Class<K> type,AjaxCallback<K> callback){  callback.url(url).type(type).method(AQuery.METHOD_DELETE);  return ajax(callback);}  }
class C{  public ListBuffer<A> append(A x){  x.getClass();  if (shared)   copy();  List<A> newLast=List.<A>of(x);  if (last != null) {    last.tail=newLast;    last=newLast;  } else {    elems=last=newLast;  }  count++;  return this;}  }
class C{  public void nextField(){  nextField(currentField);}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  protected final void assertNotAborted() throws InterruptedIOException {  if (aborted) {    throw new InterruptedIOException("Connection has been shut down.");  }}  }
class C{  private boolean testWheelValue(int id,int value){  return getWheel(id).getCurrentItem() == value;}  }
class C{  private boolean isSecondLineOfStringContinuation(int offset){  try {    int offsetLine=fDocument.getLineOfOffset(offset);    fPosition=offset;    while (true) {      nextToken();switch (fToken) {case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:        skipScope();      break;case Symbols.TokenPLUS:    if ((offsetLine - fLine) > 1) {      return false;    }  break;case Symbols.TokenCOMMA:case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenEQUAL:int stringStartingOffset=fScanner.findNonWhitespaceForwardInAnyPartition(fPosition + 1,JavaHeuristicScanner.UNBOUND);int stringStartingLine=fDocument.getLineOfOffset(stringStartingOffset);if ((offsetLine - stringStartingLine) == 1) {fPosition=stringStartingOffset;return true;} else {return false;}case Symbols.TokenLBRACKET:case Symbols.TokenEOF:if ((offsetLine - fLine) == 1) return true; else return false;}}} catch (BadLocationException e) {JavaPlugin.log(e);return false;}}  }
class C{  private <PermissionType extends Permission>void updatePermissionSet(APIPatch.Operation operation,PermissionSetPatch<PermissionType> permissionSetPatch,PermissionType permission) throws GuacamoleException {switch (operation) {case add:    permissionSetPatch.addPermission(permission);  break;case remove:permissionSetPatch.removePermission(permission);break;default :throw new GuacamoleClientException("Unsupported patch operation: \"" + operation + "\"");}}  }
class C{  public void testGetFarmDir(){  this.container.getConfiguration().setProperty(JBossPropertySet.CLUSTERED,"true");  String expected=this.fileHandler.append(CONFIGURATION_HOME,"farm");  assertEquals(expected,this.container.getDeployDir(this.container.getConfiguration().getPropertyValue(JBossPropertySet.CONFIGURATION)));}  }
