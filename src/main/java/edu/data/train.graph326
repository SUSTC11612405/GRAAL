class C{  protected void processHierarchyEvent(HierarchyEvent evt){  super.processHierarchyEvent(evt);  if ((evt.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) == HierarchyEvent.SHOWING_CHANGED) {    boolean showing=isShowing();    if (!showing && popup != null)     hidePopup(); else     if (showing && popup == null && showPending)     autoCompleteInput();  }}  }
class C{  ZoneOffsetTransition toTransition(ZoneOffset standardOffset,int savingsBeforeSecs){  LocalDate date=toLocalDate();  LocalDateTime ldt=LocalDateTime.of(date,time);  ZoneOffset wallOffset=ZoneOffset.ofTotalSeconds(standardOffset.getTotalSeconds() + savingsBeforeSecs);  LocalDateTime dt=timeDefinition.createDateTime(ldt,standardOffset,wallOffset);  ZoneOffset offsetAfter=ZoneOffset.ofTotalSeconds(standardOffset.getTotalSeconds() + savingAmountSecs);  return new ZoneOffsetTransition(dt,wallOffset,offsetAfter);}  }
class C{  void removeNodeMapping(int motifNode,Node graphNode){  int[] neighbours=motif.getConnectionsOfMotifNode(motifNode);  for (  int i : neighbours) {    mapping[i].removeRestrictionList(graphNode);    PQmap.remove(motifNode,i);  }}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_IntLiteral_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_IntLiteral_value_feature","_UI_IntLiteral_type"),ExpressionsPackage.Literals.INT_LITERAL__VALUE,true,false,false,ItemPropertyDescriptor.INTEGRAL_VALUE_IMAGE,null,null));}  }
class C{  public void endObject() throws IOException {  expect(JsonToken.END_OBJECT);}  }
class C{  @Override public void activate(){  resource=getResource();  request=getRequest();  scriptHelper=getSlingScriptHelper();  blogService=scriptHelper.getService(BlogService.class);  postsPerPage=resource.adaptTo(ValueMap.class).get(PAGE_SIZE_PROPERTY,DEFAULT_POSTS_PER_PAGE);}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof InformationDelegator) {    if (getInfoDelegator() == (InformationDelegator)someObj) {      setInfoDelegator(null);    }  }  if (someObj instanceof CoordInfoFormatterHandler && someObj == getCoordFormatterHandler()) {    setCoordFormatterHandler(null);  }}  }
class C{  public T caseExpression(Expression object){  return null;}  }
class C{  public static void add(final File f) throws IOException {  final Model pattern=new Model(f);  models.add(pattern);}  }
class C{  public Map<Integer,TestLogyyyymm> selectToMap(String whereStatement,Object... args){  List<TestLogyyyymm> list=super.select(whereStatement,args);  Map<Integer,TestLogyyyymm> m=new LinkedHashMap<Integer,TestLogyyyymm>();  for (  TestLogyyyymm x : list) {    m.put(x.getId(),x);  }  return m;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void onPostProcessRequest(AsyncHttpRequest request){}  }
class C{  public float toPixels(double meters){  return (float)(meters * PIXELS_PER_METER);}  }
class C{  public Builder extension(String extension){  if (extension != null) {    CharacterBitSet validChars=new CharacterBitSet("0-9.()-");    if (!validChars.containsOnly(extension)) {      throw Messages.INSTANCE.getIllegalArgumentException(29);    }  }  this.extension=extension;  return this;}  }
class C{  private void throwAwayAllLCRsInPlog(int plogId) throws ReplicatorException {  Collection<PlogTransaction> allTrans=openTransactions.values();  PlogLCR rollLCR=new PlogLCR();  rollLCR.type=PlogLCR.ETYPE_TRANSACTIONS;  rollLCR.subtype=PlogLCR.ESTYPE_TRAN_ROLLBACK_TO_SAVEPOINT;  rollLCR.LCRSavepointId=plogId * 1000000000L;  for (  PlogTransaction tran : allTrans) {    if (!tran.isEmpty()) {      tran.putLCR(rollLCR);    }  }}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public PeerInfo(String pid){  this(null,-1,pid);}  }
class C{  protected void dispatchTextEvent(GraphicsNodeKeyEvent evt){  FocusManager fmgr=context.getFocusManager();  if (fmgr == null) {    return;  }  Element targetElement=(Element)fmgr.getCurrentEventTarget();  if (targetElement == null) {    targetElement=context.getDocument().getDocumentElement();  }  DocumentEvent d=(DocumentEvent)targetElement.getOwnerDocument();  DOMTextEvent textEvt=(DOMTextEvent)d.createEvent("TextEvent");  textEvt.initTextEventNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"textInput",true,true,null,String.valueOf(evt.getKeyChar()));  try {    ((EventTarget)targetElement).dispatchEvent(textEvt);  } catch (  RuntimeException e) {    ua.displayError(e);  }}  }
class C{  public Pr1WinExportAction(String actionName,CvTableModel pModel,JFrame pParent){  super(actionName);  mModel=pModel;  mParent=pParent;}  }
class C{  public GlobalRosterEntryComboBox(Roster roster,String roadName,String roadNumber,String dccAddress,String mfg,String decoderMfgID,String decoderVersionID,String id){  super(roster,Roster.ALLENTRIES,roadName,roadNumber,dccAddress,mfg,decoderMfgID,decoderVersionID,id);}  }
class C{  public void testMac08() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac mac;  for (int i=0; i < validValues.length; i++) {    mac=Mac.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect algorithm",mac.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",mac.getProvider(),defaultProvider);  }}  }
class C{  public void parseMetaData(){  final ImageFormat imageFormat=ImageFormatChecker.getImageFormat_WrapIOException(getInputStream());  mImageFormat=imageFormat;  if (!ImageFormat.isWebpFormat(imageFormat)) {    Pair<Integer,Integer> dimensions=BitmapUtil.decodeDimensions(getInputStream());    if (dimensions != null) {      mWidth=dimensions.first;      mHeight=dimensions.second;      if (imageFormat == ImageFormat.JPEG) {        if (mRotationAngle == UNKNOWN_ROTATION_ANGLE) {          mRotationAngle=JfifUtil.getAutoRotateAngleFromOrientation(JfifUtil.getOrientation(getInputStream()));        }      } else {        mRotationAngle=0;      }    }  }}  }
class C{  public void onPurpleButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(PURPLE_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_purple));      storeRequestId(requestId,PURPLE_BUTTON);      Log.v("Amazon-IAP",String.format("Sending Request for Sku: %s Request ID: %s" + requestId,getResources().getString(R.string.entitlement_sku_purple),requestId));    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.purplebutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  public static Test suite(){  return (new TestSuite(ReplaceViewHandlerTestCase.class));}  }
class C{  public Set<Entry<T,double[]>> entrySet(){  return Collections.unmodifiableSet(map.entrySet());}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.MAPPING_MODEL;}  }
class C{  public boolean isBefore(JulianDate d){  return (julian < d.julian);}  }
class C{  public String valueOf(float f){  return Float.toString(f);}  }
class C{  public void send(String remoteAddr,int remotePort,byte[] data) throws NetworkException {  try {    InetAddress address=InetAddress.getByName(remoteAddr);    DatagramPacket packet=new DatagramPacket(data,data.length,address,remotePort);    connection.send(packet);  } catch (  IOException e) {    throw new NetworkException(new StringBuilder("Failed to send data to remoteAddr : ").append(remoteAddr).toString(),e);  }}  }
class C{  public SignatureVisitor visitExceptionType(){  return this;}  }
class C{  public static long length(int x1,int y1,int x2,int y2){  return (long)sqrt(length2(x1,y1,x2,y2));}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  if (xctxt.getIteratorRoot() == xctxt.getCurrentNode())   return getStaticScore(); else   return this.SCORE_NONE;}  }
class C{  public ShortcutInfo(AppInfo info){  super(info);  title=Utilities.trim(info.title);  intent=new Intent(info.intent);  customIcon=false;  flags=info.flags;  isDisabled=info.isDisabled;}  }
class C{  protected boolean scheduleImpl(Runnable task,ClassLoader loader,long expireTime,boolean isPriority,boolean isQueueIfFull,boolean isWakeScheduler){  Objects.requireNonNull(task);  RunnableItem taskItem=new RunnableItem(task,loader);  return schedule(taskItem);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String typeArgsParamName(Function m){  return "$" + Long.toString(Math.abs(m.getQualifiedNameString().hashCode()),36) + "$";}  }
class C{  public double newValue(double newValue){  return newValue;}  }
class C{  @Override public void validate(PipelineOptions options){  checkNotNull(classToBind,"Missing a class to bind to a JAXB context.");  checkNotNull(rootElementName,"Missing a root element name.");  checkNotNull(baseOutputFilename,"Missing a filename to write to.");  try {    JAXBContext.newInstance(classToBind);  } catch (  JAXBException e) {    throw new RuntimeException("Error binding classes to a JAXB Context.",e);  }}  }
class C{  private CUserManager loadUserManager() throws CouldntLoadDataException {  final CUserManager userManager=CUserManager.get(provider);  final String userName=getConfiguration().getIdentity();  if (userManager.containsUserName(userName)) {    userManager.setCurrentActiveUser(userManager.getUserByUserName(userName));  } else {    try {      userManager.setCurrentActiveUser(userManager.addUser(userName));    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      throw new CouldntLoadDataException(e);    }  }  return userManager;}  }
class C{  public KnowledgeGroup(int type,Set<String> from,Set<String> to){  if (type != REQUIRED && type != FORBIDDEN) {    throw new NullPointerException("The given type needs to be either REQUIRED or FORBIDDEN");  }  if (from == null) {    throw new NullPointerException("The from set must not be null");  }  if (to == null) {    throw new NullPointerException("The to set must not be null");  }  if (intersect(from,to)) {    throw new IllegalArgumentException("The from and to sets must not intersect");  }  this.fromGroup=new HashSet<>(from);  this.toGroup=new HashSet<>(to);  this.type=type;}  }
class C{  public void onComponentCreated(FaceletContext ctx,UIComponent c,UIComponent parent){}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static String encode(String algorithm,String str){  if (str == null) {    return null;  }  try {    MessageDigest messageDigest=MessageDigest.getInstance(algorithm);    messageDigest.update(str.getBytes());    return getFormattedText(messageDigest.digest());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CODE_LANGS_1__CODE_LANG_1:    getCodeLang_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public static boolean isPrintableStringChar(char ch){  if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9')) {    return true;  } else {switch (ch) {case ' ':case '\'':case '(':case ')':case '+':case ',':case '-':case '.':case '/':case ':':case '=':case '?':      return true;default :    return false;}}}  }
class C{  protected static boolean invert(double[] src,double[] dst){  double[][] A=new double[4][4];  A[0][0]=src[0];  A[0][1]=src[1];  A[0][2]=src[2];  A[0][3]=src[3];  A[1][0]=src[4];  A[1][1]=src[5];  A[1][2]=src[6];  A[1][3]=src[7];  A[2][0]=src[8];  A[2][1]=src[9];  A[2][2]=src[10];  A[2][3]=src[11];  A[3][0]=src[12];  A[3][1]=src[13];  A[3][2]=src[14];  A[3][3]=src[15];  int[] index=new int[4];  double d=ludcmp(A,index);  for (int i=0; i < 4; i+=1) {    d*=A[i][i];  }  final double NEAR_ZERO_THRESHOLD=1.0e-8;  if (Math.abs(d) < NEAR_ZERO_THRESHOLD) {    return false;  }  double[][] Y=new double[4][4];  double[] col=new double[4];  for (int j=0; j < 4; j+=1) {    for (int i=0; i < 4; i+=1) {      col[i]=0.0;    }    col[j]=1.0;    lubksb(A,index,col);    for (int i=0; i < 4; i+=1) {      Y[i][j]=col[i];    }  }  dst[0]=Y[0][0];  dst[1]=Y[0][1];  dst[2]=Y[0][2];  dst[3]=Y[0][3];  dst[4]=Y[1][0];  dst[5]=Y[1][1];  dst[6]=Y[1][2];  dst[7]=Y[1][3];  dst[8]=Y[2][0];  dst[9]=Y[2][1];  dst[10]=Y[2][2];  dst[11]=Y[2][3];  dst[12]=Y[3][0];  dst[13]=Y[3][1];  dst[14]=Y[3][2];  dst[15]=Y[3][3];  return true;}  }
class C{  protected void expandFor(int i1,int i2,double d){  if (i1 >= sizes.size()) {    int oldSize=sizes.size(), capacity=vector.length;    sizes.set(i1,0);    if (capacity < sizes.size()) {      while (capacity < sizes.size())       capacity*=2;      double[][] t=new double[capacity][];      System.arraycopy(vector,0,t,0,oldSize);      vector=t;    }    for (int i=oldSize; i < sizes.size(); ++i)     vector[i]=new double[defaultCapacity2];  }  if (i2 < sizes.get(i1))   return;  int oldSize=sizes.get(i1), capacity=vector[i1].length;  sizes.set(i1,i2 + 1);  if (capacity >= sizes.get(i1))   return;  while (capacity < sizes.get(i1))   capacity*=2;  double[] t=new double[capacity];  System.arraycopy(vector[i1],0,t,0,oldSize);  if (d != 0)   Arrays.fill(t,oldSize,sizes.get(i1),d);  vector[i1]=t;}  }
class C{  @Override public double calculateDistance(double[] x1,double[] x2){  return innerProduct(x1,x2);}  }
class C{  public JSONArray put(Collection<?> value){  this.put(new JSONArray(value));  return this;}  }
class C{  private void replaceInXmlFile(String file,Map<XmlReplacementDetails,String> replacements) throws CargoException {  XmlUtils domUtils=new XmlUtils(this);  Document doc=domUtils.loadXmlFromFile(file);  try {    XPathFactory xPathFactory=XPathFactory.newInstance();    XPath xPath=xPathFactory.newXPath();    for (    Map.Entry<XmlReplacementDetails,String> replacement : replacements.entrySet()) {      String expression=replacement.getKey().getXpathExpression();      String attributeName=replacement.getKey().getAttributeName();      XPathExpression xPathExpr=xPath.compile(expression);      Node node=(Node)xPathExpr.evaluate(doc,XPathConstants.NODE);      if (node == null) {        String message="Node " + expression + " not found in file "+ file;        if (replacement.getKey().isIgnoreIfNonExisting() == Boolean.TRUE) {          getLogger().debug(message,this.getClass().getName());          continue;        } else {          throw new CargoException(message);        }      }      if (attributeName != null) {        Node attribute=node.getAttributes().getNamedItem(attributeName);        if (attribute == null) {          ((Element)node).setAttribute(attributeName,replacement.getValue());        } else {          attribute.setNodeValue(replacement.getValue());        }      } else {        node.setTextContent(replacement.getValue());      }    }  } catch (  Exception e) {    throw new CargoException("Cannot modify XML document " + file,e);  }  domUtils.saveXml(doc,file);}  }
class C{  public void propertyChange(PropertyChangeEvent e){  super.propertyChange(e);  String propertyName=e.getPropertyName();  if (propertyName == null) {    return;  }  if (propertyName.equals("windowDecorationStyle")) {    JRootPane root=(JRootPane)e.getSource();    int style=root.getWindowDecorationStyle();    uninstallClientDecorations(root);    if (style != JRootPane.NONE) {      installClientDecorations(root);    }  } else   if (propertyName.equals("ancestor")) {    uninstallWindowListeners(root);    if (((JRootPane)e.getSource()).getWindowDecorationStyle() != JRootPane.NONE) {      installWindowListeners(root,root.getParent());    }  }  return;}  }
class C{  public ImagePortrayal2D(Class c,String resourceName){  this(c,resourceName,1.0);}  }
class C{  public final float readFloat() throws java.io.IOException {  return Float.intBitsToFloat(readInt());}  }
class C{  public T caseTEnum(TEnum object){  return null;}  }
class C{  public int lengthSPKIData(){  return this.length(Constants.SignatureSpecNS,Constants._TAG_SPKIDATA);}  }
class C{  public static void dropQueuedColumnLoad(ICubicWorld world,int x,int z,Consumer<Column> runnable){  QueuedColumn key=new QueuedColumn(x,z,world);  AsyncColumnIOProvider task=columnTasks.get(key);  if (task == null) {    CubicChunks.LOGGER.warn("Attempting to drop column that wasn't queued in {} @ ({}, {})",world,x,z);    return;  }  task.removeCallback(runnable);  if (!task.hasCallbacks()) {    columnTasks.remove(key);    pool.remove(task);  }}  }
class C{  public int readChar() throws IOException {  if (position == count) {    fillBuffer();  }  if (count == -1) {    return -1;  }  return buffer[position++] & 0xff;}  }
class C{  private static void buildJar() throws Throwable {  final String sep=File.separator;  String testClasses=System.getProperty("test.classes","?") + sep;  String testSrc=System.getProperty("test.src","?") + sep;  String serviceDir="META-INF" + sep + "services"+ sep;  RunnerUtil.createJar("-cf",testClasses + "SimpleProvider.jar","-C",testClasses,"SimpleProvider.class","-C",testClasses,"SimpleVirtualMachine.class","-C",testSrc,serviceDir + "com.sun.tools.attach.spi.AttachProvider");}  }
class C{  protected void installListeners(){  if ((itemListener=createItemListener()) != null) {    comboBox.addItemListener(itemListener);  }  if ((propertyChangeListener=createPropertyChangeListener()) != null) {    comboBox.addPropertyChangeListener(propertyChangeListener);  }  if ((keyListener=createKeyListener()) != null) {    comboBox.addKeyListener(keyListener);  }  if ((focusListener=createFocusListener()) != null) {    comboBox.addFocusListener(focusListener);  }  if ((popupMouseListener=popup.getMouseListener()) != null) {    comboBox.addMouseListener(popupMouseListener);  }  if ((popupMouseMotionListener=popup.getMouseMotionListener()) != null) {    comboBox.addMouseMotionListener(popupMouseMotionListener);  }  if ((popupKeyListener=popup.getKeyListener()) != null) {    comboBox.addKeyListener(popupKeyListener);  }  if (comboBox.getModel() != null) {    if ((listDataListener=createListDataListener()) != null) {      comboBox.getModel().addListDataListener(listDataListener);    }  }}  }
class C{  private static File createTmpDir(String prefix) throws IOException {  Path path=Files.createTempDirectory(prefix);  return path.toFile();}  }
class C{  public static void instrument(Instrumentation inst) throws ClassNotFoundException, UnmodifiableClassException, IOException {  inst.redefineClasses(new ClassDefinition[]{getRedefinedClass(Object.class)});}  }
class C{  public void countRecursive(String name,int maxNumLines,Indexer<String> charIndexer,TextReader textReader){  System.out.println("CorpusCounter:  Count recursive starting from " + name);  for (  File file : FileUtil.recursiveFiles(name)) {    System.out.println("    counting file: " + file);    count(file.getPath(),maxNumLines,charIndexer,textReader);  }}  }
class C{  @Slow public void testLastPublishedStateIsActive() throws Exception {  handle.put("maxScore",SKIPVAL);  handle.put("timestamp",SKIPVAL);  String testCollectionName="forceleader_last_published";  createCollection(testCollectionName,1,3,1);  cloudClient.setDefaultCollection(testCollectionName);  log.info("Collection created: " + testCollectionName);  try {    List<Replica> notLeaders=ensureAllReplicasAreActive(testCollectionName,SHARD1,1,3,maxWaitSecsToSeeAllActive);    assertEquals("Expected 2 replicas for collection " + testCollectionName + " but found "+ notLeaders.size()+ "; clusterState: "+ printClusterStateInfo(testCollectionName),2,notLeaders.size());    Replica leader=cloudClient.getZkStateReader().getLeaderRetry(testCollectionName,SHARD1);    JettySolrRunner notLeader0=getJettyOnPort(getReplicaPort(notLeaders.get(0)));    ZkController zkController=notLeader0.getCoreContainer().getZkController();    setReplicaState(testCollectionName,SHARD1,leader,State.DOWN);    for (    Replica rep : notLeaders) {      setReplicaState(testCollectionName,SHARD1,rep,State.DOWN);    }    zkController.getZkStateReader().forceUpdateCollection(testCollectionName);    assertEquals(0,getActiveOrRecoveringReplicas(testCollectionName,SHARD1).size());    doForceLeader(cloudClient,testCollectionName,SHARD1);    for (    Replica rep : notLeaders) {      assertEquals(Replica.State.ACTIVE,getLastPublishedState(testCollectionName,SHARD1,rep));    }  }  finally {    log.info("Cleaning up after the test.");    try {      CollectionAdminRequest.Delete req=new CollectionAdminRequest.Delete();      req.setCollectionName(testCollectionName);      req.process(cloudClient);    } catch (    Exception e) {      log.warn("Could not delete collection {} after test completed",testCollectionName);    }  }}  }
class C{  public void testIncompleteResponse() throws IOException {  String reqdata="Request Data";  Request request=Request.newBuilder().setStrData(reqdata).build();  Response response=Response.newBuilder().setIntData(5).buildPartial();  socket.withResponseProto(response);  callRpc(request,ErrorReason.BAD_RESPONSE_PROTO);  verifyRequestToSocket(request);  assertNull(callBlockingRpc(request,ErrorReason.BAD_RESPONSE_PROTO));  verifyRequestToSocket(request);  callAsyncRpc(request,ErrorReason.BAD_RESPONSE_PROTO);  verifyRequestToSocket(request);}  }
class C{  private void validateMinPaths(ExportPathParams pathParams,Map<URI,List<Initiator>> hostInitiatorsMap,Map<Initiator,List<StoragePort>> assignments){  if (pathParams.returnExportGroupType() == null || pathParams.returnExportGroupType().equals(ExportGroup.ExportGroupType.Initiator)) {    return;  }  for (  URI hostURI : hostInitiatorsMap.keySet()) {    String hostName="<unknown>";    int unassignedInitiators=0;    int totalPorts=0;    for (    Initiator initiator : hostInitiatorsMap.get(hostURI)) {      if (initiator.getHostName() != null) {        hostName=initiator.getHostName();      }      List<StoragePort> ports=assignments.get(initiator);      if (ports == null || ports.isEmpty()) {        unassignedInitiators++;      }      if (ports != null) {        totalPorts+=ports.size();      }    }    if (totalPorts < pathParams.getMinPaths()) {      _log.info(String.format("Host %s (%s) has fewer ports assigned %d than min_paths %d",hostName,hostURI,totalPorts,pathParams.getMinPaths()));      throw PlacementException.exceptions.hostHasFewerThanMinPaths(hostName,hostURI.toString(),totalPorts,pathParams.getMinPaths());    }    if (pathParams.returnExportGroupType() == ExportGroupType.Initiator && unassignedInitiators > 0) {      _log.info(String.format("Host %s (%s) has %d initiators that were not assigned ports even though type Initiator",hostName,hostURI,unassignedInitiators));      throw PlacementException.exceptions.hostHasUnusedInitiators(hostName,hostURI.toString());    }  }}  }
class C{  public static void tryAddComponentToContainer(LifeCycleComponent component,Object matrixContainer){  tryAddComponentToContainer(component,matrixContainer,true);}  }
class C{  public static String throwableToString(Throwable t,int maxLines){  StringWriter writer;  StringBuilder result;  String[] lines;  int i;  writer=new StringWriter();  t.printStackTrace(new PrintWriter(writer));  if (maxLines > 0) {    result=new StringBuilder();    lines=writer.toString().split("\n");    for (i=0; i < maxLines; i++) {      if (i > 0)       result.append("\n");      result.append(lines[i]);    }  } else {    result=new StringBuilder(writer.toString());  }  return result.toString();}  }
class C{  public void testZonesAndTentsDisplayed_afterSettingsView(){  inUserLoginGoToLocationSelection();  click(viewWithText("GU"));  click(viewWithId(R.id.button_settings));  pressBack();  inLocationSelectionCheckZonesAndTentsDisplayed();}  }
class C{  public boolean isTemplate(){  return template;}  }
class C{  public static void load(Class<?> restrictionClass){  if (MASTER_CACHE == null) {    initialize();  }  if (MASTER_CACHE.isEmpty()) {    return;  }  Iterator<Class<?>> iter=MASTER_CACHE.iterator();  while (iter.hasNext()) {    Class<?> clazz=iter.next();    if (!restrictionClass.isAssignableFrom(clazz)) {      continue;    }    if (Modifier.isInterface(clazz.getModifiers()) || Modifier.isAbstract(clazz.getModifiers()) || Modifier.isPrivate(clazz.getModifiers())) {      continue;    }    boolean instantiable=false;    try {      instantiable=clazz.getConstructor() != null;    } catch (    Exception|Error e) {    }    try {      instantiable=instantiable || ClassGenericsUtil.getParameterizer(clazz) != null;    } catch (    Exception|Error e) {    }    if (!instantiable) {      continue;    }    ELKIServiceRegistry.register(restrictionClass,clazz);  }}  }
class C{  public static Predicate<String> endsWith(final String pattern){  Objects.requireNonNull(pattern,"The pattern must not be null");  return null;}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes attributes) throws SAXException {  if (!m_foundFirstElement && null != m_serializer) {    m_foundFirstElement=true;    Serializer newSerializer;    try {      newSerializer=SerializerSwitcher.switchSerializerIfHTML(uri,localName,m_outputFormat.getProperties(),m_serializer);    } catch (    TransformerException te) {      throw new SAXException(te);    }    if (newSerializer != m_serializer) {      try {        m_resultContentHandler=newSerializer.asContentHandler();      } catch (      IOException ioe) {        throw new SAXException(ioe);      }      if (m_resultContentHandler instanceof DTDHandler)       m_resultDTDHandler=(DTDHandler)m_resultContentHandler;      if (m_resultContentHandler instanceof LexicalHandler)       m_resultLexicalHandler=(LexicalHandler)m_resultContentHandler;      m_serializer=newSerializer;    }  }  flushStartDoc();  m_resultContentHandler.startElement(uri,localName,qName,attributes);}  }
class C{  public static <U,I>Function<U,Predicate<I>> all(){  return null;}  }
class C{  public int indexOf(Object elem){  return indexOf(elem,0);}  }
class C{  public MatrixStack transform(RealMatrix matrix){  current=current.preMultiply(MatrixUtil.augmentWithIdentity(matrix,4));  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void onReset(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onReset();    }  }}  }
class C{  public boolean isAutoScale(){  return null == autoScale ? _autoScale : autoScale.get();}  }
class C{  public void markStatBegin(){  if (alive && lineDebugInfo) {    int line=lineMap.getLineNumber(pendingStatPos);    char cp1=(char)cp;    char line1=(char)line;    if (cp1 == cp && line1 == line)     addLineNumber(cp1,line1);  }  pendingStatPos=Position.NOPOS;}  }
class C{  public void addFrame(byte[] data,long timestamp){  if (mFifo != null) {    MediaSample sample=new MediaSample(data,timestamp);    mFifo.addObject(sample);  }}  }
class C{  @Deprecated protected void addAction(Action a){}  }
class C{  protected String processPostRequest(HttpServletRequest request){  if (request == null) {    return Helper.ERROR_UNKNOWN_JSON;  }  try {    JsonObject jsonObject=Helper.getJsonObjectFromRequestBody(request);    Integer id=JsonUtils.getIntegerFieldFromJsonObject(jsonObject,"id");    String name=JsonUtils.getStringFieldFromJsonObject(jsonObject,"name");    Boolean isEnabled=JsonUtils.getBooleanFieldFromJsonObject(jsonObject,"enabled");    if (id != null) {      AlertsDao alertsDao=new AlertsDao();      Alert alert=alertsDao.getAlert(id);      name=alert.getName();    }    AlertsDao alertsDao=new AlertsDao();    Alert alert=alertsDao.getAlertByName(name);    if (alert == null)     return Helper.ERROR_NOTFOUND_JSON;    com.pearson.statsagg.webui.Alerts alerts=new com.pearson.statsagg.webui.Alerts();    String result=alerts.changeAlertEnabled(name,isEnabled);    return Helper.createSimpleJsonResponse(result);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return Helper.ERROR_UNKNOWN_JSON;  }}  }
class C{  public FacebookAuthorizationException(){  super();}  }
class C{  public static boolean validateSnapshotExpireParam(ScheduleSnapshotExpireParam expireParam){  long seconds=0;  long minPeriod=7200;  long maxPeriod=10 * 365 * 24* 3600;  int expireValue=expireParam.getExpireValue();  SnapshotExpireType expireType=SnapshotExpireType.valueOf(expireParam.getExpireType().toUpperCase());switch (expireType) {case HOURS:    seconds=TimeUnit.HOURS.toSeconds(expireValue);  break;case DAYS:seconds=TimeUnit.DAYS.toSeconds(expireValue);break;case WEEKS:seconds=TimeUnit.DAYS.toSeconds(expireValue * 7);break;case MONTHS:seconds=TimeUnit.DAYS.toSeconds(expireValue * 30);break;case NEVER:return true;default :return false;}if (seconds >= minPeriod && seconds <= maxPeriod) {return true;}return false;}  }
class C{  public JBZipFile(String name) throws IOException {  this(new File(name),"UTF-8");}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static double calculateDeltaE(double L1,double a1,double b1,double L2,double a2,double b2){  double Lmean=(L1 + L2) / 2.0;  double C1=Math.sqrt(a1 * a1 + b1 * b1);  double C2=Math.sqrt(a2 * a2 + b2 * b2);  double Cmean=(C1 + C2) / 2.0;  double G=(1 - Math.sqrt(Math.pow(Cmean,7) / (Math.pow(Cmean,7) + Math.pow(25,7)))) / 2;  double a1prime=a1 * (1 + G);  double a2prime=a2 * (1 + G);  double C1prime=Math.sqrt(a1prime * a1prime + b1 * b1);  double C2prime=Math.sqrt(a2prime * a2prime + b2 * b2);  double Cmeanprime=(C1prime + C2prime) / 2;  double h1prime=Math.atan2(b1,a1prime) + 2 * Math.PI * (Math.atan2(b1,a1prime) < 0 ? 1 : 0);  double h2prime=Math.atan2(b2,a2prime) + 2 * Math.PI * (Math.atan2(b2,a2prime) < 0 ? 1 : 0);  double Hmeanprime=((Math.abs(h1prime - h2prime) > Math.PI) ? (h1prime + h2prime + 2 * Math.PI) / 2 : (h1prime + h2prime) / 2);  double T=1.0 - 0.17 * Math.cos(Hmeanprime - Math.PI / 6.0) + 0.24 * Math.cos(2 * Hmeanprime) + 0.32 * Math.cos(3 * Hmeanprime + Math.PI / 30) - 0.2 * Math.cos(4 * Hmeanprime - 21 * Math.PI / 60);  double deltahprime=((Math.abs(h1prime - h2prime) <= Math.PI) ? h2prime - h1prime : (h2prime <= h1prime) ? h2prime - h1prime + 2 * Math.PI : h2prime - h1prime - 2 * Math.PI);  double deltaLprime=L2 - L1;  double deltaCprime=C2prime - C1prime;  double deltaHprime=2.0 * Math.sqrt(C1prime * C2prime) * Math.sin(deltahprime / 2.0);  double SL=1.0 + ((0.015 * (Lmean - 50) * (Lmean - 50)) / (Math.sqrt(20 + (Lmean - 50) * (Lmean - 50))));  double SC=1.0 + 0.045 * Cmeanprime;  double SH=1.0 + 0.015 * Cmeanprime * T;  double deltaTheta=(30 * Math.PI / 180) * Math.exp(-((180 / Math.PI * Hmeanprime - 275) / 25) * ((180 / Math.PI * Hmeanprime - 275) / 25));  double RC=(2 * Math.sqrt(Math.pow(Cmeanprime,7) / (Math.pow(Cmeanprime,7) + Math.pow(25,7))));  double RT=(-RC * Math.sin(2 * deltaTheta));  double KL=1;  double KC=1;  double KH=1;  double deltaE=Math.sqrt(((deltaLprime / (KL * SL)) * (deltaLprime / (KL * SL))) + ((deltaCprime / (KC * SC)) * (deltaCprime / (KC * SC))) + ((deltaHprime / (KH * SH)) * (deltaHprime / (KH * SH)))+ (RT * (deltaCprime / (KC * SC)) * (deltaHprime / (KH * SH))));  return deltaE;}  }
class C{  public boolean isEmpty(){  return (intervals.length == 0);}  }
class C{  public void appendEnd(StringBuffer buffer,Object object){  if (this.fieldSeparatorAtEnd == false) {    removeLastFieldSeparator(buffer);  }  appendContentEnd(buffer);  unregister(object);}  }
class C{  public boolean containsRoute(String name){  return routeCombo.getItems().contains(name);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_recordEntity_2_();}  }
class C{  public static void announceForAccessibilityCompat(Context context,CharSequence text){  if (Build.VERSION.SDK_INT >= 4) {    AccessibilityManager accessibilityManager=null;    if (null != context) {      accessibilityManager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);    }    if (null == accessibilityManager || !accessibilityManager.isEnabled()) {      return;    }    final int eventType;    if (Build.VERSION.SDK_INT < 16) {      eventType=AccessibilityEvent.TYPE_VIEW_FOCUSED;    } else {      eventType=AccessibilityEvent.TYPE_ANNOUNCEMENT;    }    final AccessibilityEvent event=AccessibilityEvent.obtain(eventType);    event.getText().add(text);    event.setClassName(Manager.class.getName());    event.setPackageName(context.getPackageName());    accessibilityManager.sendAccessibilityEvent(event);  }}  }
class C{  public Utf16TransformationStrategy(){}  }
class C{  public static void sendErrorResponse(HttpServletResponse response,CodedException ex) throws IOException {  sendErrorResponse(response,ex.getFaultCodeAsQName(),ex.getFaultString(),ex.getFaultActor(),ex.getFaultDetail());}  }
class C{  public static boolean isBubbling(Throwable t){  return t instanceof BubblingException;}  }
class C{  public static String IDtoString(final int id){switch (id) {case ICC:    return "ICC";case CalGray:  return "CalGray";case DeviceGray:return "DeviceGray";case DeviceN:return "DeviceN";case Separation:return "Separation";case Pattern:return "Pattern";case Lab:return "Lab";case Indexed:return "Indexed";case DeviceRGB:return "DeviceRGB";case CalRGB:return "CalRGB";case DeviceCMYK:return "DeviceCMYK";}return "unknown";}  }
class C{  public void writeBinary(final PacketOutputStream writeBuffer){  calendar=Calendar.getInstance();  calendar.setTime(time);  calendar.set(Calendar.DAY_OF_MONTH,1);  writeBuffer.writeTimeLength(calendar,fractionalSeconds);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:12.120 -0400",hash_original_method="E6B8CB0AF30DF8317A7CBD674404DE03",hash_generated_method="73F8AE215148AA8DC109100CA1D451EB") private void updateRangesFields(){  fRanges=(mask & ~(1 << 31));  fContextual=((mask & (1 << 31)) != 0);  if (fContextual) {    fRanges=(mask & ~(1 << 31));    fDefaultContextIndex=key;  } else {    fRanges=mask;    fSingleRangeIndex=key;  }}  }
class C{  public void store(Address value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public static List<User> from(Cursor c){  List<User> users=null;  int count=c.getCount();  if (count > 0) {    users=new ArrayList<>(count);    while (c.moveToNext()) {      User user=new User();      Syncing.from(c,user);      int col=c.getColumnIndex(EMAIL_HASH);      if (col >= 0) {        user.emailHash=c.getString(col);      }      col=c.getColumnIndex(FOLLOWING);      if (col >= 0) {        user.isFollowing=c.getInt(col) == 1;      }      users.add(user);    }  }  c.close();  return users;}  }
class C{  public int run(String[] argv) throws Exception {  Args args=new Args();  CmdLineParser parser=new CmdLineParser(args,ParserProperties.defaults().withUsageWidth(100));  try {    parser.parseArgument(argv);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    parser.printUsage(System.err);    return -1;  }  LOG.info("Tool: " + WordCount.class.getSimpleName());  LOG.info(" - input path: " + args.input);  LOG.info(" - output path: " + args.output);  LOG.info(" - number of reducers: " + args.numReducers);  LOG.info(" - use in-mapper combining: " + args.imc);  Configuration conf=getConf();  Job job=Job.getInstance(conf);  job.setJobName(WordCount.class.getSimpleName());  job.setJarByClass(WordCount.class);  job.setNumReduceTasks(args.numReducers);  FileInputFormat.setInputPaths(job,new Path(args.input));  FileOutputFormat.setOutputPath(job,new Path(args.output));  job.setMapOutputKeyClass(Text.class);  job.setMapOutputValueClass(IntWritable.class);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(IntWritable.class);  job.setOutputFormatClass(TextOutputFormat.class);  job.setMapperClass(args.imc ? MyMapperIMC.class : MyMapper.class);  job.setCombinerClass(MyReducer.class);  job.setReducerClass(MyReducer.class);  Path outputDir=new Path(args.output);  FileSystem.get(conf).delete(outputDir,true);  long startTime=System.currentTimeMillis();  job.waitForCompletion(true);  LOG.info("Job Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + " seconds");  return 0;}  }
class C{  private void updateStateOfMarketingProducts(TechnicalProduct technicalProduct,Organization supplier,ServiceStatus status){  List<Product> products=loadNonDeletedProducts(supplier);  for (  Product product : products) {    if (isProductToBeUpdated(technicalProduct,product)) {      product.setStatus(status);    }  }}  }
class C{  @SuppressWarnings({"cast","unchecked"}) @ApiMethod(httpMethod="GET") public final List<Recommendation> listRecommendations(@Named("placeId") final Long placeId,final User user){  return ofy().load().type(Recommendation.class).filter("expiration >",new Date()).list();}  }
class C{  public void discardSession(){  getSession().discard();}  }
class C{  public BigInteger[] generateSignature(byte[] message){  byte[] mRev=new byte[message.length];  for (int i=0; i != mRev.length; i++) {    mRev[i]=message[mRev.length - 1 - i];  }  BigInteger m=new BigInteger(1,mRev);  GOST3410Parameters params=key.getParameters();  BigInteger k;  do {    k=new BigInteger(params.getQ().bitLength(),random);  } while (k.compareTo(params.getQ()) >= 0);  BigInteger r=params.getA().modPow(k,params.getP()).mod(params.getQ());  BigInteger s=k.multiply(m).add(((GOST3410PrivateKeyParameters)key).getX().multiply(r)).mod(params.getQ());  BigInteger[] res=new BigInteger[2];  res[0]=r;  res[1]=s;  return res;}  }
class C{  public void calcMajorTick(){  fraction=UNIT;  double u=majorTick;  double r=maxTick - minTick;  majorTickCount=(int)(r / u);  while (majorTickCount < prefMajorTickCount) {    u=majorTick / 2;    if (!isDiscrete || u == Math.floor(u)) {      majorTickCount=(int)(r / u);      fraction=HALFS;      if (majorTickCount >= prefMajorTickCount)       break;    }    u=majorTick / 4;    if (!isDiscrete || u == Math.floor(u)) {      majorTickCount=(int)(r / u);      fraction=QUARTERS;      if (majorTickCount >= prefMajorTickCount)       break;    }    u=majorTick / 5;    if (!isDiscrete || u == Math.floor(u)) {      majorTickCount=(int)(r / u);      fraction=FIFTHS;      if (majorTickCount >= prefMajorTickCount)       break;    }    if (isDiscrete && (majorTick / 10) != Math.floor(majorTick / 10)) {      u=majorTick;      majorTickCount=(int)(r / u);      break;    }    majorTick/=10;    u=majorTick;    majorTickCount=(int)(r / u);    fraction=UNIT;  }  majorTick=u;  if (isDiscrete && majorTick < 1.0) {    majorTick=1.0;    majorTickCount=(int)(r / majorTick);    fraction=UNIT;  }  majorTickCount++;  while ((minTick + majorTick - epsilon) < minData) {    minTick+=majorTick;    majorTickCount--;  }  while ((maxTick - majorTick + epsilon) > maxData) {    maxTick-=majorTick;    majorTickCount--;  }}  }
class C{  private void processFilesystemList(List<Object> filesystemList,Map<String,Object> keyMap) throws VNXFilePluginException {  Iterator<Object> iterator=filesystemList.iterator();  Map<String,String> volFilesystemMap=new HashMap<String,String>();  Set<String> moverIds=new HashSet<String>();  if (iterator.hasNext()) {    Status status=(Status)iterator.next();    if (status.getMaxSeverity() == Severity.OK) {      while (iterator.hasNext()) {        FileSystem fileSystem=(FileSystem)iterator.next();        volFilesystemMap.put(fileSystem.getVolume(),fileSystem.getFileSystem());        List<MoverOrVdmRef> roFileSysHosts=fileSystem.getRoFileSystemHosts();        Iterator<MoverOrVdmRef> roFileSysHostItr=roFileSysHosts.iterator();        while (roFileSysHostItr.hasNext()) {          MoverOrVdmRef mover=roFileSysHostItr.next();          moverIds.add(mover.getMover());        }      }    } else {      throw new VNXFilePluginException("Fault response received from XMLAPI Server.",VNXFilePluginException.ERRORCODE_INVALID_RESPONSE);    }  }  keyMap.put(VNXFileConstants.MOVERLIST,moverIds);  keyMap.put(VNXFileConstants.VOLFILESHAREMAP,volFilesystemMap);}  }
class C{  public static int deleteLineupFromAccount(String lineupName) throws IOException, SDException {  SDSession session=ensureSession();  for (  SDAccountLineup lineup : session.getAccountLineups().getLineups()) {    if ((screenFormatAccountLineup(lineup)).equals(lineupName)) {      int returnValue=session.deleteLineup(lineup.getUri());      if (Sage.DBG)       System.out.println("SDEPG Deleted lineup '" + lineupName + "' with "+ returnValue+ " changes remaining.");      return returnValue;    }  }  if (Sage.DBG)   System.out.println("SDEPG Error: Unable find the lineup details to delete '" + lineupName + "'");  throw new SDException(SDErrors.INVALID_LINEUP_DELETE);}  }
class C{  public void insertAttributeAt(Attribute att,int position){  if ((position < 0) || (position > m_Attributes.size())) {    throw new IllegalArgumentException("Index out of range");  }  if (attribute(att.name()) != null) {    throw new IllegalArgumentException("Attribute name '" + att.name() + "' already in use at position #"+ attribute(att.name()).index());  }  att=(Attribute)att.copy();  att.setIndex(position);  ArrayList<Attribute> newList=new ArrayList<Attribute>(m_Attributes.size() + 1);  newList.addAll(m_Attributes.subList(0,position));  newList.add(att);  for (int i=position; i < m_Attributes.size(); i++) {    Attribute newAtt=(Attribute)m_Attributes.get(i).copy();    newAtt.setIndex(i + 1);    newList.add(newAtt);  }  m_Attributes=newList;  for (int i=0; i < numInstances(); i++) {    instance(i).setDataset(null);    instance(i).insertAttributeAt(position);    instance(i).setDataset(this);  }  if (m_ClassIndex >= position) {    m_ClassIndex++;  }}  }
class C{  public final Plane normalize(){  double length=this.n.getLength3();  if (length == 0)   return this;  return new Plane(new Vec4(this.n.x / length,this.n.y / length,this.n.z / length,this.n.w / length));}  }
class C{  private Builder(CassandraConfig config){  this.version=config.version;  this.cpus=config.cpus;  this.memoryMb=config.memoryMb;  this.diskMb=config.diskMb;  this.diskType=config.diskType;  this.replaceIp=config.replaceIp;  this.heap=config.heap;  this.location=config.location;  this.jmxPort=config.jmxPort;  this.publishDiscoveryInfo=config.publishDiscoveryInfo;  this.application=config.application;}  }
class C{  public boolean isPreventingWebkitUpdates(){  return isZoomAnimating();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TSTRUCT_SETTER__DEFINED_MEMBER:    if (resolve)     return getDefinedMember();  return basicGetDefinedMember();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private View makeAndAddVerticalView(int position,int offset,int y,boolean fromTop){  View child;  if (!mDataChanged) {    child=mRecycler.get(position);    if (child != null) {      int childTop=child.getTop();      mBottomMost=Math.max(mBottomMost,childTop + child.getMeasuredHeight());      mTopMost=Math.min(mTopMost,childTop);      setUpVerticalChild(child,offset,y,fromTop);      return child;    }  }  child=mAdapter.getView(position,null,this);  setUpVerticalChild(child,offset,y,fromTop);  return child;}  }
class C{  public PowerShellResponse executeCommand(String command){  Callable<String> commandProcessor=new PowerShellCommandProcessor("standard",p.getInputStream(),this.maxWait,this.waitPause,this.scriptMode);  Callable<String> commandProcessorError=new PowerShellCommandProcessor("error",p.getErrorStream(),this.maxWait,this.waitPause,false);  String commandOutput="";  boolean isError=false;  boolean timeout=false;  Future<String> result=threadpool.submit(commandProcessor);  Future<String> resultError=threadpool.submit(commandProcessorError);  if (this.remoteMode) {    command=completeRemoteCommand(command);  }  commandWriter.println(command);  try {    while (!result.isDone() && !resultError.isDone()) {      Thread.sleep(this.waitPause);    }    if (result.isDone()) {      if (((PowerShellCommandProcessor)commandProcessor).isTimeout()) {        timeout=true;      } else {        commandOutput=result.get();      }    } else {      isError=true;      commandOutput=resultError.get();    }  } catch (  InterruptedException ex) {    Logger.getLogger(PowerShell.class.getName()).log(Level.SEVERE,"Unexpected error when processing PowerShell command",ex);  }catch (  ExecutionException ex) {    Logger.getLogger(PowerShell.class.getName()).log(Level.SEVERE,"Unexpected error when processing PowerShell command",ex);  } finally {    ((PowerShellCommandProcessor)commandProcessor).close();    ((PowerShellCommandProcessor)commandProcessorError).close();  }  return new PowerShellResponse(isError,commandOutput,timeout);}  }
class C{  public void registerCommand(Plugin plugin,Command command){  commandMap.put(command.getName().toLowerCase(),command);  for (  String alias : command.getAliases()) {    commandMap.put(alias.toLowerCase(),command);  }  commandsByPlugin.put(plugin,command);}  }
class C{  public synchronized void clearSeriesValues(){  mXY.clear();  initRange();}  }
class C{  void updateDefaultButtonBindings(JRootPane root){  InputMap km=SwingUtilities.getUIInputMap(root,JComponent.WHEN_IN_FOCUSED_WINDOW);  while (km != null && !(km instanceof RootPaneInputMap)) {    km=km.getParent();  }  if (km != null) {    km.clear();    if (root.getDefaultButton() != null) {      Object[] bindings=(Object[])DefaultLookup.get(root,this,"RootPane.defaultButtonWindowKeyBindings");      if (bindings != null) {        LookAndFeel.loadKeyBindings(km,bindings);      }    }  }}  }
class C{  public boolean InsertProcess(AST.Process p){  int i=FindProcess(p.name);  if (i < processes.size())   return false;  ProcessEntry pe=new ProcessEntry(p);  processes.addElement(pe);  return true;}  }
class C{  public Vertex parseAIML(String code,boolean parseAsStateMachine,boolean createStates,boolean pin,boolean indexStatic,Vertex stateMachine,Network network){  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder parser=factory.newDocumentBuilder();    StringReader reader=new StringReader(code);    InputSource source=new InputSource(reader);    Document document=parser.parse(source);    Element root=document.getDocumentElement();    Map<String,Vertex> cache=new HashMap<String,Vertex>();    Vertex sentenceState=null;    if (parseAsStateMachine) {      if (createStates) {        sentenceState=createSentenceState(stateMachine,network);      } else {        sentenceState=stateMachine;      }    }    List<Element> topics=getLocalElementsByTagName("topic",root);    int count=0;    for (    Element topic : topics) {      String text=getNodeValue(topic,"name","",false,false,false,new boolean[1],network);      Vertex topicFilter=null;      if (!isPattern(text)) {        topicFilter=network.createSentence(text);      } else {        topicFilter=network.createPattern(text,getSelfCompiler());      }      network.getBot().log(this,"Topic",Level.INFO,topicFilter);      checkSupportedChildren(topic,topicChildren,network);      List<Element> categories=getLocalElementsByTagName("category",topic);      for (      Element category : categories) {        parseCategory(category,topicFilter,parseAsStateMachine,createStates,pin,indexStatic,sentenceState,cache,network);        count++;        if (count >= PAGE) {          network.save();          network.clear();          count=0;          if (parseAsStateMachine) {            stateMachine=network.createVertex(stateMachine);            sentenceState=network.createVertex(sentenceState);          }        }      }    }    List<Element> categories=getLocalElementsByTagName("category",root);    for (    Element category : categories) {      parseCategory(category,null,parseAsStateMachine,createStates,pin,indexStatic,sentenceState,cache,network);      count++;      if (count >= PAGE) {        network.save();        network.clear();        count=0;        if (parseAsStateMachine) {          stateMachine=network.createVertex(stateMachine);          sentenceState=network.createVertex(sentenceState);        }      }    }    network.save();    network.getBot().log(this,"Compiled new AIML script",Level.INFO);    return stateMachine;  } catch (  Exception exception) {    network.getBot().log(this,exception);    throw new BotException("Parsing error occurred - " + exception.toString(),exception);  }}  }
class C{  protected void encodeAtom(OutputStream outStream,byte data[],int offset,int len) throws IOException {  byte a, b, c;  if (len == 1) {    a=data[offset];    b=0;    c=0;    outStream.write(pem_array[(a >>> 2) & 0x3F]);    outStream.write(pem_array[((a << 4) & 0x30) + ((b >>> 4) & 0xf)]);    outStream.write('=');    outStream.write('=');  } else   if (len == 2) {    a=data[offset];    b=data[offset + 1];    c=0;    outStream.write(pem_array[(a >>> 2) & 0x3F]);    outStream.write(pem_array[((a << 4) & 0x30) + ((b >>> 4) & 0xf)]);    outStream.write(pem_array[((b << 2) & 0x3c) + ((c >>> 6) & 0x3)]);    outStream.write('=');  } else {    a=data[offset];    b=data[offset + 1];    c=data[offset + 2];    outStream.write(pem_array[(a >>> 2) & 0x3F]);    outStream.write(pem_array[((a << 4) & 0x30) + ((b >>> 4) & 0xf)]);    outStream.write(pem_array[((b << 2) & 0x3c) + ((c >>> 6) & 0x3)]);    outStream.write(pem_array[c & 0x3F]);  }}  }
class C{  public void mouseReleased(MouseEvent e){  if (e.getComponent() == this && (e.getModifiers() & MouseEvent.BUTTON1_MASK) != 0) {    int y=e.getY();    Font font=fileWindow.textArea.getFont();    FontMetrics metrics=getFontMetrics(font);    int h=metrics.getHeight();    int line=y / h;    if (line == pressLine) {      fileWindow.toggleBreakPoint(line + 1);    } else {      pressLine=-1;    }  }}  }
class C{  public T adapter(ExpandableListAdapter adapter){  if (view instanceof ExpandableListView) {    ExpandableListView av=(ExpandableListView)view;    av.setAdapter(adapter);  }  return self();}  }
class C{  private void nextToken() throws ParserException, IOException {  int t=st.nextToken();  previous=lookahead;  lookahead=new Token(st.ttype,st.sval,st.nval);  log(ldebug,"lookahead = " + lookahead);}  }
class C{  public StatisticNotFoundException(String message,Throwable cause){  super(message);  this.initCause(cause);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (raised: ");  result.append(raised);  result.append(", scheduled: ");  result.append(scheduled);  result.append(", direction: ");  result.append(direction);  result.append(')');  return result.toString();}  }
class C{  public String generateInvertedString(){  return String.format("#%06X",0xFFFFFF & generateInverted());}  }
class C{  @VisibleForTesting protected void stopForegroundService(){  stopForeground(true);}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  public static int modMultiply(int a,int b,int r){  int result=0;  int p=remainder(a,r);  int q=remainder(b,r);  if (q != 0) {    int d=1 << degree(r);    while (p != 0) {      byte pMod2=(byte)(p & 0x01);      if (pMod2 == 1) {        result^=q;      }      p>>>=1;      q<<=1;      if (q >= d) {        q^=r;      }    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.310 -0500",hash_original_method="9B52F273E26CB5D7F7BAD01E854C0200",hash_generated_method="DECDE14E4906689CFF1BE774E7750073") public LoggingSessionOutputBuffer(final SessionOutputBuffer out,final Wire wire){  super();  this.out=out;  this.wire=wire;}  }
class C{  static Folder fromXml(Context context){  return (Folder)LayoutInflater.from(context).inflate(R.layout.user_folder,null);}  }
class C{  public Builder withDisque(String host,int port){  DisqueHostAndPort hap=new DisqueHostAndPort(host,port);  this.disqueURI.connectionPoints.add(hap);  return this;}  }
class C{  @SuppressWarnings("fallthrough") private void calculateType(){  int ret=TYPE_IDENTITY;  boolean sgn0, sgn1;  double M0, M1, M2, M3;  updateState();switch (state) {default :    stateError();case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):  ret=TYPE_TRANSLATION;case (APPLY_SHEAR | APPLY_SCALE):if ((M0=m00) * (M2=m01) + (M3=m10) * (M1=m11) != 0) {  this.type=TYPE_GENERAL_TRANSFORM;  return;}sgn0=(M0 >= 0.0);sgn1=(M1 >= 0.0);if (sgn0 == sgn1) {if (M0 != M1 || M2 != -M3) {ret|=(TYPE_GENERAL_ROTATION | TYPE_GENERAL_SCALE);} else if (M0 * M1 - M2 * M3 != 1.0) {ret|=(TYPE_GENERAL_ROTATION | TYPE_UNIFORM_SCALE);} else {ret|=TYPE_GENERAL_ROTATION;}} else {if (M0 != -M1 || M2 != M3) {ret|=(TYPE_GENERAL_ROTATION | TYPE_FLIP | TYPE_GENERAL_SCALE);} else if (M0 * M1 - M2 * M3 != 1.0) {ret|=(TYPE_GENERAL_ROTATION | TYPE_FLIP | TYPE_UNIFORM_SCALE);} else {ret|=(TYPE_GENERAL_ROTATION | TYPE_FLIP);}}break;case (APPLY_SHEAR | APPLY_TRANSLATE):ret=TYPE_TRANSLATION;case (APPLY_SHEAR):sgn0=((M0=m01) >= 0.0);sgn1=((M1=m10) >= 0.0);if (sgn0 != sgn1) {if (M0 != -M1) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_GENERAL_SCALE);} else if (M0 != 1.0 && M0 != -1.0) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_UNIFORM_SCALE);} else {ret|=TYPE_QUADRANT_ROTATION;}} else {if (M0 == M1) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_FLIP | TYPE_UNIFORM_SCALE);} else {ret|=(TYPE_QUADRANT_ROTATION | TYPE_FLIP | TYPE_GENERAL_SCALE);}}break;case (APPLY_SCALE | APPLY_TRANSLATE):ret=TYPE_TRANSLATION;case (APPLY_SCALE):sgn0=((M0=m00) >= 0.0);sgn1=((M1=m11) >= 0.0);if (sgn0 == sgn1) {if (sgn0) {if (M0 == M1) {ret|=TYPE_UNIFORM_SCALE;} else {ret|=TYPE_GENERAL_SCALE;}} else {if (M0 != M1) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_GENERAL_SCALE);} else if (M0 != -1.0) {ret|=(TYPE_QUADRANT_ROTATION | TYPE_UNIFORM_SCALE);} else {ret|=TYPE_QUADRANT_ROTATION;}}} else {if (M0 == -M1) {if (M0 == 1.0 || M0 == -1.0) {ret|=TYPE_FLIP;} else {ret|=(TYPE_FLIP | TYPE_UNIFORM_SCALE);}} else {ret|=(TYPE_FLIP | TYPE_GENERAL_SCALE);}}break;case (APPLY_TRANSLATE):ret=TYPE_TRANSLATION;break;case (APPLY_IDENTITY):break;}this.type=ret;}  }
class C{  @Override public BytesImpl write(byte[] buffer,int offset,int length){  while (length > 0) {    int sublen=Math.min(_data.length - _head,length);    System.arraycopy(buffer,offset,_data,_head,sublen);    if (sublen <= 0) {      throw new UnsupportedOperationException();    }    length-=sublen;    offset+=sublen;    _head+=sublen;  }  return this;}  }
class C{  @Deprecated public RegressionEvoOptimization(ExampleSet exampleSet,Kernel kernel,double c,double epsilon,int initType,int maxIterations,int generationsWithoutImprovement,int popSize,int selectionType,double tournamentFraction,boolean keepBest,int mutationType,double crossoverProb,boolean showConvergencePlot,boolean showPopulationPlot,RandomGenerator random,LoggingHandler logging){  this(exampleSet,kernel,c,epsilon,initType,maxIterations,generationsWithoutImprovement,popSize,selectionType,tournamentFraction,keepBest,mutationType,crossoverProb,showConvergencePlot,showPopulationPlot,random,logging,null);}  }
class C{  public com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForLunsResponse queryUniqueIdentifiersForLuns(com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForLuns queryUniqueIdentifiersForLuns21) throws java.rmi.RemoteException, com.emc.storageos.vasa.NotImplemented, com.emc.storageos.vasa.InvalidArgument, com.emc.storageos.vasa.NotFound, com.emc.storageos.vasa.InvalidSession, com.emc.storageos.vasa.StorageFault {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[10].getName());    _operationClient.getOptions().setAction("urn:queryUniqueIdentifiersForLuns");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),queryUniqueIdentifiersForLuns21,optimizeContent(new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/","queryUniqueIdentifiersForLuns")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForLunsResponse.class,getEnvelopeNamespaces(_returnEnv));    return (com.emc.storageos.vasa.VasaServiceStub.QueryUniqueIdentifiersForLunsResponse)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof com.emc.storageos.vasa.NotImplemented) {            throw (com.emc.storageos.vasa.NotImplemented)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidArgument) {            throw (com.emc.storageos.vasa.InvalidArgument)ex;          }          if (ex instanceof com.emc.storageos.vasa.NotFound) {            throw (com.emc.storageos.vasa.NotFound)ex;          }          if (ex instanceof com.emc.storageos.vasa.InvalidSession) {            throw (com.emc.storageos.vasa.InvalidSession)ex;          }          if (ex instanceof com.emc.storageos.vasa.StorageFault) {            throw (com.emc.storageos.vasa.StorageFault)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public static <T1,T2>Map<T1,T2> map(){  return new HashMap<T1,T2>();}  }
class C{  @Override public int hashCode(){  return (classHash() + subQuery.hashCode() + Arrays.hashCode(scoringQueries));}  }
class C{  public void register(ScheduleItem si){  Integer old=Integer.valueOf(_scheduleHashTable.size());  _scheduleHashTable.put(si.getId(),si);  String[] getId=si.getId().split("c");  int id=Integer.parseInt(getId[1]);  if (id > _IdNumber) {    _IdNumber=id;  }  if (si.getSequenceId() > _sequenceNum) {    _sequenceNum=si.getSequenceId();  }  setDirtyAndFirePropertyChange(LISTCHANGE_CHANGED_PROPERTY,old,Integer.valueOf(_scheduleHashTable.size()));  si.addPropertyChangeListener(this);}  }
class C{  public PojoKeyField(Element el,Class pojoCls){  super(el,pojoCls);  if (el.hasAttribute(SORT_ATTR)) {    try {      sortOrder=SortOrder.valueOf(el.getAttribute(SORT_ATTR).trim().toUpperCase());    } catch (    IllegalArgumentException e) {      throw new IllegalArgumentException("Incorrect sort order '" + el.getAttribute(SORT_ATTR) + "' specified");    }  }}  }
class C{  public static void main(String[] args){  Header.printHeader(ChainToTripConverter.class.toString(),args);  String population=args[0];  String output=args[1];  convertSelectedPlansToTrips(population,output);  Header.printFooter();}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)newValue);  return;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private String parseQuotedToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  boolean quoted=false;  boolean charEscaped=false;  while (hasChar()) {    ch=chars[pos];    if (!quoted && isOneOf(ch,terminators)) {      break;    }    if (!charEscaped && ch == '"') {      quoted=!quoted;    }    charEscaped=(!charEscaped && ch == '\\');    i2++;    pos++;  }  return getToken(true);}  }
class C{  public AtomicReference(){}  }
class C{  public static void main(String[] args){  Debug.init(System.getProperties());  boolean schemaonly=false;  boolean printall=false;  boolean parseall=false;  System.out.println("This class just decodes and print VPF files.");  System.out.println("use the DcwSpecialist class to run the specialist");  Debug.put("vpfserver");  if (Debug.debugging("vpf")) {    Debug.output("This file doesn't have debugging info.");  }  for (int i=0; i < args.length; i++) {    System.out.println(args[i]);    if (args[i].equals("-schemaOnly")) {      schemaonly=!schemaonly;    } else     if (args[i].equals("-printAll")) {      printall=!printall;    } else     if (args[i].equals("-parseAll")) {      parseall=!parseall;    } else     if (args[i].equals("-help")) {      System.out.println(" -schemaOnly -printAll -parseAll -help [files]");    }    if (args[i].startsWith("-")) {      continue;    }    try {      String f=args[i];      if (args[i].endsWith("x") || args[i].endsWith("x.")) {        System.out.println("Skipping VLI format");      } else       if (args[i].endsWith("ti")) {        System.out.println("Trying Thematic Index format");        DcwThematicIndex ff=new DcwThematicIndex(f,false);        ff.close();      } else       if (args[i].endsWith("si") || args[i].endsWith("si.")) {        System.out.println("Trying Spatial Index format");        DcwSpatialIndex ff=new DcwSpatialIndex(f,false);        ff.close();      } else       if (args[i].endsWith(".doc")) {        DcwRecordFile foo=new DcwRecordFile(f);        String colname[]={"text"};        char tschema[]={'T'};        int lschema[]={-1};        int cols[];        try {          cols=foo.lookupSchema(colname,true,tschema,lschema,false);        } catch (        com.bbn.openmap.io.FormatException e) {          foo.printSchema();          throw e;        }        for (List<Object> l=new ArrayList<Object>(); foo.parseRow(l); ) {          System.out.println(l.get(cols[0]));        }        System.out.println();        foo.close();      } else {        DcwRecordFile foo=new DcwRecordFile(f);        foo.printSchema();        if (!schemaonly) {          if (printall) {            for (List<Object> l=new ArrayList<Object>(); foo.parseRow(l); ) {              System.out.println(VPFUtil.listToString(l));            }          } else           if (parseall) {            foo.parseAllRowsAndPrintSome();          } else {            foo.parseSomeRowsAndPrint();          }        }        foo.close();      }    } catch (    com.bbn.openmap.io.FormatException f) {      System.err.println("****************************************");      System.err.println("*--------------------------------------*");      System.err.println("Format error in dealing with " + args[i]);      System.err.println(f.getMessage());      System.err.println("*--------------------------------------*");      System.err.println("****************************************");    }  }}  }
class C{  public static int writeByteBufferToStream(OutputStream out,ByteBuffer outBuf,ByteBuffer inBuf) throws IOException {  int bytesToWrite=inBuf.remaining();  if (bytesToWrite > 0) {    if (inBuf.hasArray()) {      flushStream(out,outBuf);      out.write(inBuf.array(),inBuf.arrayOffset() + inBuf.position(),bytesToWrite);      inBuf.position(inBuf.limit());    } else {      int bytesToWriteThisTime=bytesToWrite;      int OUT_MAX=outBuf.remaining();      while (bytesToWriteThisTime > OUT_MAX) {        int oldLimit=inBuf.limit();        inBuf.limit(inBuf.position() + OUT_MAX);        outBuf.put(inBuf);        inBuf.limit(oldLimit);        flushStream(out,outBuf);        bytesToWriteThisTime-=OUT_MAX;        OUT_MAX=outBuf.remaining();      }      outBuf.put(inBuf);    }  }  return bytesToWrite;}  }
class C{  public String csvString(){  String[] csvArr=csvStringArray();  StringBuilder output=new StringBuilder();  for (  String row : csvArr) {    output.append(row).append('\n');  }  return output.toString();}  }
class C{  public void generateDigestValue() throws XMLSignatureException, ReferenceNotInitializedException {  this.setDigestValueElement(this.calculateDigest(false));}  }
class C{  protected boolean pushNamespace(String prefix,String uri){  try {    if (m_prefixMap.pushNamespace(prefix,uri,m_elemContext.m_currentElemDepth)) {      startPrefixMapping(prefix,uri);      return true;    }  } catch (  SAXException e) {  }  return false;}  }
class C{  public final TextBuilder append(double d,int digits,boolean scientific,boolean showZero){  if (digits > 19)   throw new IllegalArgumentException("digits: " + digits);  if (d != d)   return append("NaN");  if (d == Double.POSITIVE_INFINITY)   return append("Infinity");  if (d == Double.NEGATIVE_INFINITY)   return append("-Infinity");  if (d == 0.0) {    if (digits < 0)     return append("0.0");    append('0');    if (showZero) {      append('.');      for (int j=1; j < digits; j++) {        append('0');      }    }    return this;  }  if (d < 0) {    d=-d;    append('-');  }  int e=MathLib.floorLog10(d);  long m;  if (digits < 0) {    long m17=MathLib.toLongPow10(d,(17 - 1) - e);    long m16=m17 / 10;    double dd=MathLib.toDoublePow10(m16,e - 16 + 1);    if (dd == d) {      digits=16;      m=m16;    } else {      digits=17;      m=m17;    }  } else   m=MathLib.toLongPow10(d,(digits - 1) - e);  if (scientific || (e >= digits)) {    long pow10=POW10_LONG[digits - 1];    int k=(int)(m / pow10);    append((char)('0' + k));    m=m - pow10 * k;    appendFraction(m,digits - 1,showZero);    append('E');    append(e);  } else {    int exp=digits - e - 1;    if (exp < POW10_LONG.length) {      long pow10=POW10_LONG[exp];      long l=m / pow10;      append(l);      m=m - pow10 * l;    } else     append('0');    appendFraction(m,exp,showZero);  }  return this;}  }
class C{  public void testDoConfigureCreatesFiles() throws Exception {  configuration.configure(container);  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/config"));  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/config/jdbc"));  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/config/config.xml"));  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/security"));  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/security/DefaultAuthenticatorInit.ldift"));  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/security/SerializedSystemIni.dat"));  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/autodeploy/cargocpc.war"));}  }
class C{  public short shortValue(){  return 0;}  }
class C{  @Override public void validate(){  validateSurrogateSettings();}  }
class C{  private void addScrollGapPath(int x,int y,int w,int h,boolean isAtLeft){  final double hHalf=h / 2.0;  final double wFull=isAtLeft ? w : 0;  final double wHalfOff=isAtLeft ? w - hHalf : hHalf;  path.quadTo(x + wHalfOff,y + h,x + wHalfOff,y + hHalf);  path.quadTo(x + wHalfOff,y,x + wFull,y);}  }
class C{  public FlowContentBridge(BridgeContext ctx,SVGTextElementBridge parent,Element e){  super(ctx,parent,e);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public SslRMIServerSocketFactory(){  this(null,null,false);}  }
class C{  protected DoubleMatrix1D make1D(int size){  return make(0,0).like1D(size);}  }
class C{  public VehicleSeatsModeHistogramImproved(final int binSize,Vehicles vehicles){  this.histogram=new CategoryHistogram(binSize);  this.vehicles=vehicles;  reset(0);  this.seatsTotal=0;}  }
class C{  public boolean merge_stringbuffer(){  return soot.PhaseOptions.getBoolean(options,"merge-stringbuffer");}  }
class C{  public void testReadLittleEndian() throws Exception {  assertReadLittleEndian32(bytes(0x78,0x56,0x34,0x12),0x12345678);  assertReadLittleEndian32(bytes(0xf0,0xde,0xbc,0x9a),0x9abcdef0);  assertReadLittleEndian64(bytes(0xf0,0xde,0xbc,0x9a,0x78,0x56,0x34,0x12),0x123456789abcdef0L);  assertReadLittleEndian64(bytes(0x78,0x56,0x34,0x12,0xf0,0xde,0xbc,0x9a),0x9abcdef012345678L);}  }
class C{  public void stopAutoDelete(Reference<?> ref,String fileName){  IOUtils.trace("TempFileDeleter.stopAutoDelete",fileName,ref);  if (ref != null) {    String f2=refMap.remove(ref);    if (SysProperties.CHECK) {      if (f2 == null || !f2.equals(fileName)) {        DbException.throwInternalError("f2:" + f2 + " "+ (f2 == null ? "" : f2)+ " f:"+ fileName);      }    }  }  deleteUnused();}  }
class C{  public static int sizeForValue(long maxValue){  int size=0;  while (maxValue > 0) {    size++;    maxValue>>>=8;  }  return size;}  }
class C{  private static MediaCodecInfo selectCodec(String mimeType){  int numCodecs=MediaCodecList.getCodecCount();  for (int i=0; i < numCodecs; i++) {    MediaCodecInfo codecInfo=MediaCodecList.getCodecInfoAt(i);    if (!codecInfo.isEncoder()) {      continue;    }    String[] types=codecInfo.getSupportedTypes();    for (int j=0; j < types.length; j++) {      if (types[j].equalsIgnoreCase(mimeType)) {        return codecInfo;      }    }  }  return null;}  }
class C{  public void putOid(long[] s,int tag){  putOidValue(s);  putTag(tag);}  }
class C{  public void mapDatasetToScale(int index,int scaleIndex){  this.datasetToScaleMap.set(index,new Integer(scaleIndex));  fireChangeEvent();}  }
class C{  public org.codehaus.cargo.container.configuration.entry.Resource createResource(String containerId,CargoProject project){  org.codehaus.cargo.container.configuration.entry.Resource resource=new org.codehaus.cargo.container.configuration.entry.Resource(getName(),getType());  resource.setParameters(getParameters());  return resource;}  }
class C{  private String tokenString(){switch (tokenizer.ttype) {case StreamTokenizer.TT_NUMBER:    return "<NUMBER>";case StreamTokenizer.TT_EOL:  return "End-of-Line";case StreamTokenizer.TT_EOF:return "End-of-Stream";case StreamTokenizer.TT_WORD:return "'" + tokenizer.sval + "'";}return "'" + (char)tokenizer.ttype + "'";}  }
class C{  protected void defaultSettings(){  smooth();  colorMode(RGB,255);  fill(255);  stroke(0);  strokeWeight(DEFAULT_STROKE_WEIGHT);  strokeJoin(DEFAULT_STROKE_JOIN);  strokeCap(DEFAULT_STROKE_CAP);  shape=0;  rectMode(CORNER);  ellipseMode(DIAMETER);  autoNormal=true;  textFont=null;  textSize=12;  textLeading=14;  textAlign=LEFT;  textMode=MODEL;  if (primaryGraphics) {    background(backgroundColor);  }  blendMode(BLEND);  settingsInited=true;}  }
class C{  public boolean isTcpNoDelay(){  return tcpNoDelay;}  }
class C{  public final static char[] toSimpleCharArray(byte[] barr){  char[] carr=new char[barr.length];  for (int i=0; i < barr.length; i++) {    carr[i]=(char)(barr[i] & 0xFF);  }  return carr;}  }
class C{  public void clone(float[] source){  System.arraycopy(source,0,points,0,3);}  }
class C{  public static ValueLobDb create(int type,int tableId,long id,long precision){  return new ValueLobDb(type,tableId,id,precision);}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/assign-matched-pools") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ObjectVirtualPoolRestRep updateObjectVirtualPoolWithAssignedPools(@PathParam("id") URI id,VirtualPoolPoolUpdateParam param){  return toObjectVirtualPool(updateVirtualPoolWithAssignedStoragePools(id,param));}  }
class C{  public void clearNameMappings(){  this.model.getNameMap().clear();  this.idToNameMap.clear();  this.nameToIdMap.clear();}  }
class C{  public void runScript(Reader reader) throws IOException, SQLException {  try {    boolean originalAutoCommit=connection.getAutoCommit();    try {      if (originalAutoCommit != this.autoCommit) {        connection.setAutoCommit(this.autoCommit);      }      runScript(connection,reader);    }  finally {      connection.setAutoCommit(originalAutoCommit);    }  } catch (  IOException e) {    throw e;  }catch (  SQLException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException("Error running script.  Cause: " + e,e);  }}  }
class C{  public void cancelPrevious(Class<? extends Action> type){  String previousId;synchronized (this) {    previousId=mLastRequestIdByType.remove(type);  }  if (previousId != null) {    PennStation.cancelAction(previousId);  }}  }
class C{  public static int calcDesiredSize(Context context,int parentWidth,int parentHeight){  int orientation=context.getResources().getConfiguration().orientation;  int desiredSize=(orientation == Configuration.ORIENTATION_LANDSCAPE) ? parentWidth : parentHeight;  return Math.min(desiredSize,parentWidth);}  }
class C{  public PShader(PApplet parent,String vertFilename,String fragFilename){  this.parent=parent;  primaryPG=(PGraphicsOpenGL)parent.g;  pgl=primaryPG.pgl;  this.vertexURL=null;  this.fragmentURL=null;  this.vertexFilename=vertFilename;  this.fragmentFilename=fragFilename;  fragmentShaderSource=pgl.loadFragmentShader(fragFilename);  vertexShaderSource=pgl.loadVertexShader(vertFilename);  glProgram=0;  glVertex=0;  glFragment=0;  intBuffer=PGL.allocateIntBuffer(1);  floatBuffer=PGL.allocateFloatBuffer(1);  int vertType=getShaderType(vertexShaderSource,-1);  int fragType=getShaderType(fragmentShaderSource,-1);  if (vertType == -1 && fragType == -1) {    type=PShader.POLY;  } else   if (vertType == -1) {    type=fragType;  } else   if (fragType == -1) {    type=vertType;  } else   if (fragType == vertType) {    type=vertType;  } else {    PGraphics.showWarning(PGraphicsOpenGL.INCONSISTENT_SHADER_TYPES);  }}  }
class C{  public WriteResponse Write(RequestHeader RequestHeader,WriteValue... NodesToWrite) throws ServiceFaultException, ServiceResultException {  WriteRequest req=new WriteRequest(RequestHeader,NodesToWrite);  return (WriteResponse)channel.serviceRequest(req);}  }
class C{  public Object push(Object item){  add(item);  return item;}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  protected final void freeContent(){  if (disposeOnExit) {    dialog.getScene().setRoot(dummyPane);  }}  }
class C{  public TreeSet(SortedSet s){  this(s.comparator());  addAll(s);}  }
class C{  public static boolean hasAtLeastOnePreferenceSet(Context context){  SharedPreferences sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);  for (  String key : PreferenceKeys.KEYS_VIEW_EMERGENCY_INFO) {    if (!TextUtils.isEmpty(sharedPreferences.getString(key,""))) {      return true;    }  }  return false;}  }
class C{  protected boolean isBroadcastChanged(){  return true;}  }
class C{  private void drawTicker(final Rectangle clientArea,final GC gc){  final int centerX=clientArea.width / 2;  final int centerY=clientArea.height / 2;  final int maxRay=(int)(Math.min(clientArea.width,clientArea.height) * 0.6f) / 2;  final int minRay=(int)(maxRay * 0.5f);  double angle=Math.PI / 2;  gc.setLineCap(SWT.CAP_ROUND);  gc.setLineWidth(lineWidth);  gc.setAntialias(SWT.ON);  final double angleStep=2 * Math.PI / barsCount;  for (int i=0; i < barsCount; i++) {    if (i == currentPosition) {      gc.setForeground(selectionColor);    } else {      gc.setForeground(defaultColor);    }    gc.drawLine((int)(centerX + minRay * Math.cos(angle)),(int)(centerY - minRay * Math.sin(angle)),(int)(centerX + maxRay * Math.cos(angle)),(int)(centerY - maxRay * Math.sin(angle)));    angle-=angleStep;  }}  }
class C{  String replace(String text,String replacement){  int pos=getInt(0,text.length() - replacement.length());  StringBuilder buffer=new StringBuilder(text);  buffer.replace(pos,pos + 7,replacement);  return buffer.toString();}  }
class C{  public static void disableJavascript(){  disableJavascript=true;}  }
class C{  public int findLastVisibleItemPosition(){  final View child=findOneVisibleChild(layoutManager.getChildCount() - 1,-1,false,true);  return child == null ? RecyclerView.NO_POSITION : recyclerView.getChildAdapterPosition(child);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:49.927 -0500",hash_original_method="6675CF6A116AB121851289F1BA88A8F3",hash_generated_method="38400F3F6112D3DE73B892A67C6ECDE2") public synchronized String toString(){  String toString="Thread Auditor - List of monitored threads:\n";  Iterator<ThreadHandle> it=threadHandles.values().iterator();  while (it.hasNext()) {    ThreadHandle threadHandle=(ThreadHandle)it.next();    toString+="   " + threadHandle.toString() + "\n";  }  return toString;}  }
class C{  public static String abbreviateName(String str,FontMetrics fm,int width){  if (fm.stringWidth(str) > width)   str=abbreviateName(str,false);  if (fm.stringWidth(str) > width)   str=abbreviateName(str,true);  return str;}  }
class C{  public StrategyChangeEvent(Object source,StrategyRule strategyRule){  super(source);  this.strategyRule=strategyRule;}  }
class C{  private static Context createActivityContext(Context context,ComponentName activity){  Context theirContext=null;  try {    theirContext=context.createPackageContext(activity.getPackageName(),0);  } catch (  PackageManager.NameNotFoundException e) {    Log.e(LOG_TAG,"Package not found " + activity.getPackageName());  }catch (  java.lang.SecurityException e) {    Log.e(LOG_TAG,"Can't make context for " + activity.getPackageName(),e);  }  return theirContext;}  }
class C{  public static int run(Model queryModel,Property rulePredicate,Model newTriples,SPINExplanations explanations,List<SPINStatistics> statistics,boolean singlePass,ProgressMonitor monitor){  Map<Resource,List<CommandWrapper>> cls2Query=SPINQueryFinder.getClass2QueryMap(queryModel,queryModel,rulePredicate,true,false);  Map<Resource,List<CommandWrapper>> cls2Constructor=SPINQueryFinder.getClass2QueryMap(queryModel,queryModel,SPIN.constructor,true,false);  SPINRuleComparator comparator=new DefaultSPINRuleComparator(queryModel);  return run(queryModel,newTriples,cls2Query,cls2Constructor,explanations,statistics,singlePass,rulePredicate,comparator,monitor);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.140 -0400",hash_original_method="FABE38E7FF870272BD571F7FA7AA9964",hash_generated_method="F5FB2BAE343044A31DBE45EFCCEF0172") public double nextDouble(double least,double bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextDouble() * (bound - least) + least;}  }
class C{  public GemFireException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void mapAttachmentState(DiskState diskState,Volume volume){  if (volume.getAttachments().size() > 0) {    diskState.status=DiskStatus.ATTACHED;  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  boolean alphaChannelOutput=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      alphaChannelOutput=Boolean.getBoolean(args[i]);    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redVal, greenVal, blueVal, alphaVal;    double redRange, greenRange, blueRange;    double redMin, greenMin, blueMin;    double r, g, b, a;    double z;    double[] data;    float progress=0;    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    String outputHeader=inputHeader.replace(".dep","_Red.dep");    WhiteboxRaster outputFileRed=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileRed.setPreferredPalette("grey.pal");    outputFileRed.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    outputHeader=inputHeader.replace(".dep","_Green.dep");    WhiteboxRaster outputFileGreen=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileGreen.setPreferredPalette("grey.pal");    outputFileGreen.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    outputHeader=inputHeader.replace(".dep","_Blue.dep");    WhiteboxRaster outputFileBlue=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFileBlue.setPreferredPalette("grey.pal");    outputFileBlue.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    if (!alphaChannelOutput) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            r=(double)((int)z & 0xFF);            g=(double)(((int)z >> 8) & 0xFF);            b=(double)(((int)z >> 16) & 0xFF);            outputFileRed.setValue(row,col,r);            outputFileGreen.setValue(row,col,g);            outputFileBlue.setValue(row,col,b);          } else {            outputFileRed.setValue(row,col,noData);            outputFileGreen.setValue(row,col,noData);            outputFileBlue.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      outputFileRed.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileRed.addMetadataEntry("Created on " + new Date());      outputFileRed.close();      outputFileGreen.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileGreen.addMetadataEntry("Created on " + new Date());      outputFileGreen.close();      outputFileBlue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileBlue.addMetadataEntry("Created on " + new Date());      outputFileBlue.close();      image.close();    } else {      outputHeader=inputHeader.replace(".dep","_A.dep");      WhiteboxRaster outputFileA=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);      outputFileA.setPreferredPalette("grey.pal");      outputFileA.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          z=data[col];          if (z != noData) {            r=(double)((int)z & 0xFF);            g=(double)(((int)z >> 8) & 0xFF);            b=(double)(((int)z >> 16) & 0xFF);            a=(double)(((int)z >> 24) & 0xFF);            outputFileRed.setValue(row,col,r);            outputFileGreen.setValue(row,col,g);            outputFileBlue.setValue(row,col,b);            outputFileA.setValue(row,col,a);          } else {            outputFileRed.setValue(row,col,noData);            outputFileGreen.setValue(row,col,noData);            outputFileBlue.setValue(row,col,noData);            outputFileA.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      outputFileRed.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileRed.addMetadataEntry("Created on " + new Date());      outputFileRed.close();      outputFileGreen.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileGreen.addMetadataEntry("Created on " + new Date());      outputFileGreen.close();      outputFileBlue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileBlue.addMetadataEntry("Created on " + new Date());      outputFileBlue.close();      outputFileA.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFileA.addMetadataEntry("Created on " + new Date());      outputFileA.close();      image.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void clear(){  if (isEmpty())   return;  super.clear();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  String outputHeader=null;  int row, col;  int nrows, ncols;  double x, y;  double z=0;  int a, i;  int progress=0;  int numPoints=0;  double minValue;  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  double north, south, east, west;  double resolution=1;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  List<KdTree.Entry<Double>> results;  double noData=-32768;  double northing, easting;  String whatToInterpolate="";  String returnNumberToInterpolate="all points";  String suffix="";  boolean excludeNeverClassified=false;  boolean excludeUnclassified=false;  boolean excludeBareGround=false;  boolean excludeLowVegetation=false;  boolean excludeMediumVegetation=false;  boolean excludeHighVegetation=false;  boolean excludeBuilding=false;  boolean excludeLowPoint=false;  boolean excludeModelKeyPoint=false;  boolean excludeWater=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  suffix=args[1].trim();  whatToInterpolate=args[2].toLowerCase();  returnNumberToInterpolate=args[3].toLowerCase();  resolution=Double.parseDouble(args[4]);  double circleCircumscrbingGridCell=Math.sqrt(2) * resolution / 2.0;  excludeNeverClassified=Boolean.parseBoolean(args[5]);  excludeUnclassified=Boolean.parseBoolean(args[6]);  excludeBareGround=Boolean.parseBoolean(args[7]);  excludeLowVegetation=Boolean.parseBoolean(args[8]);  excludeMediumVegetation=Boolean.parseBoolean(args[9]);  excludeHighVegetation=Boolean.parseBoolean(args[10]);  excludeBuilding=Boolean.parseBoolean(args[11]);  excludeLowPoint=Boolean.parseBoolean(args[12]);  excludeModelKeyPoint=Boolean.parseBoolean(args[13]);  excludeWater=Boolean.parseBoolean(args[14]);  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    boolean[] classValuesToExclude=new boolean[32];    if (excludeNeverClassified) {      classValuesToExclude[0]=true;    }    if (excludeUnclassified) {      classValuesToExclude[1]=true;    }    if (excludeBareGround) {      classValuesToExclude[2]=true;    }    if (excludeLowVegetation) {      classValuesToExclude[3]=true;    }    if (excludeMediumVegetation) {      classValuesToExclude[4]=true;    }    if (excludeHighVegetation) {      classValuesToExclude[5]=true;    }    if (excludeBuilding) {      classValuesToExclude[6]=true;    }    if (excludeLowPoint) {      classValuesToExclude[7]=true;    }    if (excludeModelKeyPoint) {      classValuesToExclude[8]=true;    }    if (excludeWater) {      classValuesToExclude[9]=true;    }    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    PointRecColours pointColours;    double[] entry;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ " Reading point data:",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (returnNumberToInterpolate.equals("all points")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            numPoints++;          }        } else         if (returnNumberToInterpolate.equals("first return")) {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            numPoints++;          }        } else {          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            numPoints++;          }        }      }      minX=Double.POSITIVE_INFINITY;      maxX=Double.NEGATIVE_INFINITY;      minY=Double.POSITIVE_INFINITY;      maxY=Double.NEGATIVE_INFINITY;      KdTree<Double> pointsTree=new KdTree.SqrEuclid<Double>(2,new Integer(numPoints));      if (returnNumberToInterpolate.equals("all points")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()])) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else       if (returnNumberToInterpolate.equals("first return")) {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == 1) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      } else {        for (a=0; a < numPointsInFile; a++) {          point=las.getPointRecord(a);          if (!point.isPointWithheld() && !(classValuesToExclude[point.getClassification()]) && point.getReturnNumber() == point.getNumberOfReturns()) {            x=point.getX();            y=point.getY();            if (whatToInterpolate.equals("z (elevation)")) {              z=point.getZ();            } else             if (whatToInterpolate.equals("intensity")) {              z=point.getIntensity();            } else             if (whatToInterpolate.equals("classification")) {              z=point.getClassification();            } else             if (whatToInterpolate.equals("scan angle")) {              z=point.getScanAngle();            } else             if (whatToInterpolate.equals("rgb data")) {              pointColours=las.getPointRecordColours(a);              z=(double)((255 << 24) | (pointColours.getBlue() << 16) | (pointColours.getGreen() << 8)| pointColours.getRed());            }            entry=new double[]{y,x};            pointsTree.addPoint(entry,z);            if (x < minX) {              minX=x;            }            if (x > maxX) {              maxX=x;            }            if (y < minY) {              minY=y;            }            if (y > maxY) {              maxY=y;            }          }          progress=(int)(100d * (a + 1) / numPointsInFile);          if ((progress % 2) == 0) {            updateProgress("Reading point data:",progress);          }        }      }      outputHeader=pointFiles[j].replace(".las",suffix + ".dep");      if ((new File(outputHeader)).exists()) {        (new File(outputHeader)).delete();        (new File(outputHeader.replace(".dep",".tas"))).delete();      }      west=minX - 0.5 * resolution;      north=maxY + 0.5 * resolution;      nrows=(int)(Math.ceil((north - minY) / resolution));      ncols=(int)(Math.ceil((maxX - west) / resolution));      south=north - nrows * resolution;      east=west + ncols * resolution;      fw=new FileWriter(outputHeader,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="Min:\t" + Double.toString(Integer.MAX_VALUE);      out.println(str1);      str1="Max:\t" + Double.toString(Integer.MIN_VALUE);      out.println(str1);      str1="North:\t" + Double.toString(north);      out.println(str1);      str1="South:\t" + Double.toString(south);      out.println(str1);      str1="East:\t" + Double.toString(east);      out.println(str1);      str1="West:\t" + Double.toString(west);      out.println(str1);      str1="Cols:\t" + Integer.toString(ncols);      out.println(str1);      str1="Rows:\t" + Integer.toString(nrows);      out.println(str1);      str1="Data Type:\t" + "float";      out.println(str1);      str1="Z Units:\t" + "not specified";      out.println(str1);      str1="XY Units:\t" + "not specified";      out.println(str1);      str1="Projection:\t" + "not specified";      out.println(str1);      if (!whatToInterpolate.equals("rgb data")) {        str1="Data Scale:\tcontinuous";      } else {        str1="Data Scale:\trgb";      }      out.println(str1);      if (whatToInterpolate.equals("rgb data")) {        str1="Preferred Palette:\t" + "rgb.pal";      } else       if (whatToInterpolate.equals("intensity")) {        str1="Preferred Palette:\t" + "grey.pal";      } else {        str1="Preferred Palette:\t" + "spectrum.pal";      }      out.println(str1);      str1="NoData:\t" + noData;      out.println(str1);      if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {        str1="Byte Order:\t" + "LITTLE_ENDIAN";      } else {        str1="Byte Order:\t" + "BIG_ENDIAN";      }      out.println(str1);      out.close();      WhiteboxRaster image=new WhiteboxRaster(outputHeader,"rw");      double halfResolution=resolution / 2;      for (row=0; row < nrows; row++) {        for (col=0; col < ncols; col++) {          easting=(col * resolution) + (west + halfResolution);          northing=(north - halfResolution) - (row * resolution);          entry=new double[]{northing,easting};          results=pointsTree.neighborsWithinRange(entry,circleCircumscrbingGridCell);          if (!results.isEmpty()) {            minValue=Float.POSITIVE_INFINITY;            for (i=0; i < results.size(); i++) {              z=results.get(i).value;              if (z < minValue) {                minValue=z;              }              ;            }            image.setValue(row,col,minValue);          } else {            image.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nrows - 1));        updateProgress("Interpolating point data:",progress);      }      image.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      image.addMetadataEntry("Created on " + new Date());      image.close();    }    returnData(pointFiles[0].replace(".las",suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private TaskEntity deleteTask(BaseDiskEntity disk,boolean validate) throws ExternalException {  if (validate) {    DiskStateChecks.checkOperationState(disk,Operation.DELETE_DISK);  }  List<StepEntity> stepEntities=new ArrayList<>();  List<BaseEntity> entityList=new ArrayList<>();  entityList.add(disk);  StepEntity step=new StepEntity();  stepEntities.add(step);  step.addResources(entityList);  step.setOperation(Operation.DELETE_DISK);  TaskEntity task=taskBackend.createTaskWithSteps(disk,Operation.DELETE_DISK,false,stepEntities);  task.getToBeLockedEntities().add(disk);  return task;}  }
class C{  public String toString(){switch (reason) {case UNALIGNED_ADDRESS:    return String.format("Unaligned memory map address: 0x%x",offsetOrAddress);case UNALIGNED_FILE_OFFSET:  return String.format("Unaligned file offset: 0x%x",offsetOrAddress);default :throw new RuntimeException("Unexpected MemoryMapException Reason: " + reason);}}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int read(String name){  setInput(name);  process();  return status;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns05.class,args);}  }
class C{  public RoleException(String msg){  super(msg);}  }
class C{  public double kFoldCV(BayesNet bayesNet,int nNrOfFolds) throws Exception {  m_BayesNet=bayesNet;  double fAccuracy=0.0;  double fWeight=0.0;  Instances instances=bayesNet.m_Instances;  bayesNet.estimateCPTs();  int nFoldStart=0;  int nFoldEnd=instances.numInstances() / nNrOfFolds;  int iFold=1;  while (nFoldStart < instances.numInstances()) {    for (int iInstance=nFoldStart; iInstance < nFoldEnd; iInstance++) {      Instance instance=instances.instance(iInstance);      instance.setWeight(-instance.weight());      bayesNet.updateClassifier(instance);    }    for (int iInstance=nFoldStart; iInstance < nFoldEnd; iInstance++) {      Instance instance=instances.instance(iInstance);      instance.setWeight(-instance.weight());      fAccuracy+=accuracyIncrease(instance);      fWeight+=instance.weight();      instance.setWeight(-instance.weight());    }    for (int iInstance=nFoldStart; iInstance < nFoldEnd; iInstance++) {      Instance instance=instances.instance(iInstance);      instance.setWeight(-instance.weight());      bayesNet.updateClassifier(instance);    }    nFoldStart=nFoldEnd;    iFold++;    nFoldEnd=iFold * instances.numInstances() / nNrOfFolds;  }  return fAccuracy / fWeight;}  }
class C{  public List breadthFirst(boolean preorder){  List answer=new NodeList();  if (preorder)   answer.add(this);  answer.addAll(breadthFirstRest(preorder));  if (!preorder)   answer.add(this);  return answer;}  }
class C{  public boolean isActiveNetworkMetered(){  try {    return mService.isActiveNetworkMetered();  } catch (  RemoteException e) {    return false;  }}  }
class C{  @Override public void sync(){}  }
class C{  public static void processData(ArrayList<Double> a,ArrayList<Double> b,ArrayList<Double> c,String rank,double salary){  if (rank.equals("assistant")) {    a.add(salary);  } else   if (rank.equals("associate"))   b.add(salary); else   if (rank.equals("full"))   c.add(salary);}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public static void expandSelection(final ZyGraph graph){  checkArguments(graph);  final SelectableGraph<NaviNode> selectableGraph=SelectableGraph.wrap(graph);  GraphHelpers.expandSelectionUp(selectableGraph);  GraphHelpers.expandSelectionDown(selectableGraph);}  }
class C{  public byte[] receiveSpecLenBytes(int len){  Log.d(TAG,"receiveSpecLenBytes() entrance: len = " + len);  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    byte[] recDatas=Arrays.copyOf(mReceivePacket.getData(),mReceivePacket.getLength());    Log.d(TAG,"received len : " + recDatas.length);    for (int i=0; i < recDatas.length; i++) {      Log.e(TAG,"recDatas[" + i + "]:"+ recDatas[i]);    }    Log.e(TAG,"receiveSpecLenBytes: " + new String(recDatas));    if (recDatas.length != len) {      Log.w(TAG,"received len is different from specific len, return null");      return null;    }    return recDatas;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public boolean isTiltEnabled(){  return mTiltEnabled;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  protected void initParams(){  params=new Hashtable<Integer,Object>();}  }
class C{  public void deleteTaskContainerMappings(Iterable<String> taskNames){  for (  String taskName : taskNames) {    writeTaskContainerMapping(taskName,null);  }}  }
class C{  @SuppressWarnings("unchecked") public static <A,X extends Throwable>TryTValue<A,X> fromAnyM(final AnyMValue<A> anyM){  return (TryTValue<A,X>)of(anyM.map(null));}  }
class C{  public static <E>boolean contains(final E[] array,final E v){  if (v == null) {    for (    final E e : array)     if (e == null)     return true;  } else {    for (    final E e : array)     if (e == v || v.equals(e))     return true;  }  return false;}  }
class C{  public SIPDialog createDialog(SipProviderImpl sipProvider,SIPResponse sipResponse){  return new SIPDialog(sipProvider,sipResponse);}  }
class C{  public TraceItem_ createTraceItem_(){  TraceItem_Impl traceItem_=new TraceItem_Impl();  return traceItem_;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public boolean enableGifLogoImage(Boolean aIsGifImage){  mGifLogoImageView.setVisibility(aIsGifImage ? View.VISIBLE : View.GONE);  return aIsGifImage;}  }
class C{  public static void copy(File source,File destination) throws IOException {  Validate.notNull(source,"source is null");  Validate.notNull(destination,"destination is null");  if (source.equals(destination)) {    return;  }  InputStream input=null;  OutputStream output=null;  try {    input=new FileInputStream(source);    try {      output=new FileOutputStream(destination);      copy(input,output);    }  finally {      if (output != null) {        output.close();      }    }  }  finally {    if (input != null) {      input.close();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:30.001 -0500",hash_original_method="FB5DF316F460707F8207D2FB11462865",hash_generated_method="1E12FE92F1A6015CF45623C67A4786B3") public BigInteger[] generateSignature(byte[] message){  BigInteger n=key.getParameters().getN();  BigInteger e=calculateE(n,message);  BigInteger r=null;  BigInteger s=null;  do {    BigInteger k=null;    int nBitLength=n.bitLength();    do {      do {        k=new BigInteger(nBitLength,random);      } while (k.equals(ZERO) || k.compareTo(n) >= 0);      ECPoint p=key.getParameters().getG().multiply(k);      BigInteger x=p.getX().toBigInteger();      r=x.mod(n);    } while (r.equals(ZERO));    BigInteger d=((ECPrivateKeyParameters)key).getD();    s=k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n);  } while (s.equals(ZERO));  BigInteger[] res=new BigInteger[2];  res[0]=r;  res[1]=s;  return res;}  }
class C{  public void out(PageContext pageContext,boolean escapeXml,Object obj) throws IOException {  JspWriter w=pageContext.getOut();  String content=null;  StringBuffer sb=new StringBuffer(64);  if (obj instanceof Reader) {    Reader reader=(Reader)obj;    char[] buf=new char[4096];    int count;    while ((count=reader.read(buf,0,4096)) != -1) {      sb.append(buf,0,count);    }    sb.toString();  } else {    sb=new StringBuffer(obj.toString());  }  if (escapeXml) {    content=TagSupportUtil.escapeXml(sb.toString());  } else   if (escapeScriptCode) {    content=sb.toString();    content=StringUtil.replaceStringIgnoreCase(content,"<script","< script");    content=StringUtil.replaceStringIgnoreCase(content,"</script","</ script");  } else {    content=sb.toString();  }  if (escapeForScriptOutput) {    content=StringUtil.js_string(sb.toString());  }  if (escapeForXslt) {    content=StringUtil.getXSLTFreeText(content);  }  if (native2ascii) {    content=StringUtil.native2ascii(content);  }  if (content != null) {    w.write(content);  }}  }
class C{  public static String toString(UserNotice userNotice){  StringBuffer sbUserNotice=new StringBuffer();  NoticeReference noticeReference=userNotice.getNoticeRef();  if (noticeReference != null) {    DisplayText organization=noticeReference.getOrganization();    if (organization != null) {      sbUserNotice.append(MessageFormat.format(res.getString("PolicyInformationUtil.Organization"),organization.getString()));      if ((noticeReference.getNoticeNumbers() != null) || (userNotice.getExplicitText() != null)) {        sbUserNotice.append(", ");      }    }    ASN1Integer[] noticeNumbers=noticeReference.getNoticeNumbers();    StringBuffer sbNoticeNumbers=new StringBuffer();    if (noticeNumbers != null) {      for (int i=0; i < noticeNumbers.length; i++) {        ASN1Integer noticeNumber=noticeNumbers[i];        sbNoticeNumbers.append(noticeNumber.getValue().intValue());        if ((i + 1) < noticeNumbers.length) {          sbNoticeNumbers.append(" ");        }      }      sbUserNotice.append(MessageFormat.format(res.getString("PolicyInformationUtil.NoticeNumbers"),sbNoticeNumbers.toString()));      if (userNotice.getExplicitText() != null) {        sbUserNotice.append(", ");      }    }  }  DisplayText explicitText=userNotice.getExplicitText();  if (explicitText != null) {    sbUserNotice.append(MessageFormat.format(res.getString("PolicyInformationUtil.ExplicitText"),explicitText.getString()));  }  return sbUserNotice.toString();}  }
class C{  public boolean isUpdateFile(){  return m_isUpdateFile;}  }
class C{  public static void warning(String message){  warnings++;  err(NL + "Warning : " + message);}  }
class C{  public static byte[] convertIntArray(int[] in){  byte[] out=new byte[in.length];  for (int i=0; i < in.length; i++) {    out[i]=(byte)in[i];  }  return out;}  }
class C{  public static boolean isOverlappingRoots(IPath rootPath1,IPath rootPath2){  if (rootPath1 == null || rootPath2 == null) {    return false;  }  return rootPath1.isPrefixOf(rootPath2) || rootPath2.isPrefixOf(rootPath1);}  }
class C{  public Builder intents(List<Intent> intents){  this.intents=intents;  return this;}  }
class C{  public boolean saveToBP_BankAccount(MBPBankAccount ba){  if (ba == null)   return false;  ba.setA_Name(getA_Name());  ba.setA_Street(getA_Street());  ba.setA_City(getA_City());  ba.setA_State(getA_State());  ba.setA_Zip(getA_Zip());  ba.setA_Country(getA_Country());  ba.setA_EMail(getA_EMail());  ba.setA_Ident_DL(getA_Ident_DL());  ba.setA_Ident_SSN(getA_Ident_SSN());  ba.setCreditCardType(getCreditCardType());  ba.setCreditCardNumber(getCreditCardNumber());  ba.setCreditCardExpMM(getCreditCardExpMM());  ba.setCreditCardExpYY(getCreditCardExpYY());  ba.setCreditCardVV(getCreditCardVV());  if (getAccountNo() != null)   ba.setAccountNo(getAccountNo());  if (getRoutingNo() != null)   ba.setRoutingNo(getRoutingNo());  ba.setR_AvsAddr(getR_AvsAddr());  ba.setR_AvsZip(getR_AvsZip());  boolean ok=ba.save(get_TrxName());  log.fine("saveToBP_BankAccount - " + ba);  return ok;}  }
class C{  public void write(int b){  int newcount=count + 1;  if (newcount > buf.length) {    buf=Utils.copyOf(buf,Math.max(buf.length << 1,newcount));  }  buf[count]=(byte)b;  count=newcount;}  }
class C{  @XmlElement(required=false,name="migration_suspend_before_delete_source") public boolean isMigrationSuspendBeforeDeleteSource(){  return migrationSuspendBeforeDeleteSource;}  }
class C{  public void skipEndObject(){  buf.skip(3);}  }
class C{  protected static void swallow_comment() throws java.io.IOException {  if (next_char2 == '*') {    advance();    advance();    for (; ; ) {      if (next_char == EOF_CHAR) {        emit_error("Specification file ends inside a comment");        return;      }      if (next_char == '*' && next_char2 == '/') {        advance();        advance();        return;      }      advance();    }  }  if (next_char2 == '/') {    advance();    advance();    while (next_char != '\n' && next_char != '\f' && next_char != EOF_CHAR)     advance();    return;  }  emit_error("Malformed comment in specification -- ignored");  advance();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String dev=getString(stack);  getCapDevInput(stack).setDevice(dev);  return null;}  }
class C{  protected float parseClockValue() throws ParseException, IOException {  int d1=parseDigits();  float offset;  if (current == ':') {    current=reader.read();    int d2=parseDigits();    if (current == ':') {      current=reader.read();      int d3=parseDigits();      offset=d1 * 3600 + d2 * 60 + d3;    } else {      offset=d1 * 60 + d2;    }    if (current == '.') {      current=reader.read();      offset+=parseFraction();    }  } else   if (current == '.') {    current=reader.read();    offset=(parseFraction() + d1) * parseUnit();  } else {    offset=d1 * parseUnit();  }  return offset;}  }
class C{  public void defineFillStyle(int bitmapId,Matrix matrix,boolean clipped) throws IOException {  fillStyles.add(new FillStyle(bitmapId,matrix,clipped));  outstandingChanges=true;}  }
class C{  public MultisigCosignatoryModification(final Deserializer deserializer){  this.modificationType=MultisigModificationType.fromValueOrDefault(deserializer.readInt("modificationType"));  this.cosignatoryAccount=Account.readFrom(deserializer,"cosignatoryAccount",AddressEncoding.PUBLIC_KEY);  this.validate();}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return CHALLENGE;case 2:  return RESPONSE;default :return null;}}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ASSOCIATION_DEFINITION___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.ASSOCIATION_DEFINITION___ASSOCIATION_1:getAssociation_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void removeColumn(){  if (dataset.getColumnCount() > 0) {    removeColumn(dataset.getColumnCount() - 1);  }}  }
class C{  @Override public boolean isShowingSerie(Serie serie){  return seriesAdapter.isShowingSerie(serie);}  }
class C{  public static String escapeHTML(String html){  return html.replace("&","&amp;").replace("<","&lt;").replace(">","&gt;").replace("\"","&quot;").replace("\"'","&#039;");}  }
class C{  public void itemStateChanged(ItemEvent e){  if (e.getSource().equals(cbxEnableCockpitSearch)) {    cboCockpitType.setEnabled(!cboCockpitType.isEnabled());    lblCockpitType.setEnabled(!lblCockpitType.isEnabled());  } else   if (e.getSource().equals(cbxEnableInternalsSearch)) {    cboInternalsType.setEnabled(!cboInternalsType.isEnabled());    lblInternalsType.setEnabled(!lblInternalsType.isEnabled());  } else   if (e.getSource().equals(cbxEnableArmorSearch)) {    cboArmorType.setEnabled(!cboArmorType.isEnabled());    lblArmorType.setEnabled(!lblArmorType.isEnabled());  }}  }
class C{  private boolean is16by9AspectRatio(Size size){  if (size == null || size.getWidth() == 0 || size.getHeight() == 0) {    return false;  }  final float aspectRatio=(size.getHeight() > size.getWidth()) ? (size.getHeight() / (float)size.getWidth()) : (size.getWidth() / (float)size.getHeight());  return Math.abs(aspectRatio - (16.f / 9.f)) < 0.001f;}  }
class C{  public boolean hasPrimary(){  return super.hasAttribute(PRIMARY);}  }
class C{  public void testFullRequestHandlerFlow() throws Exception {  assertU("Simple assertion that adding a document works",adoc("id","4055","subject","Hoss"));  assertU(commit());  assertQ("couldn't find hoss using script added field",req("q","script_added_i:[40 TO 45]","fq","id:4055"),"//result[@numFound=1]","//str[@name='id'][.='4055']");  processDeleteById("run-no-scripts","4055");  processCommit("run-no-scripts");}  }
class C{  private void interruptIdleWorkers(boolean onlyOne){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    Iterator<Worker> it=workers.iterator();    while (it.hasNext()) {      Worker w=it.next();      Thread t=w.thread;      if (!t.isInterrupted() && w.tryLock()) {        try {          t.interrupt();        } catch (        SecurityException ignore) {        } finally {          w.unlock();        }      }      if (onlyOne)       break;    }  }  finally {    mainLock.unlock();  }}  }
class C{  @POST @Path("/{id}/deactivate") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep deleteStorageSystem(@PathParam("id") URI id) throws DatabaseException {  StorageSystem system=_dbClient.queryObject(StorageSystem.class,id);  ArgValidator.checkEntityNotNull(system,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.UNREGISTERED.toString().equals(system.getRegistrationStatus())) {    throw APIException.badRequests.cannotDeactivateStorageSystem();  }  if (rpHelper.containsActiveRpVolumes(id)) {    throw APIException.badRequests.cannotDeactivateStorageSystemActiveRpVolumes();  }  if (DiscoveredDataObject.DataCollectionJobStatus.IN_PROGRESS.toString().equals(system.getDiscoveryStatus()) || DiscoveredDataObject.DataCollectionJobStatus.SCHEDULED.toString().equals(system.getDiscoveryStatus())) {    throw APIException.serviceUnavailable.cannotDeactivateStorageSystemWhileInDiscover(system.getId());  }  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(StorageSystem.class,system.getId(),taskId,ResourceOperationTypeEnum.DELETE_STORAGE_SYSTEM);  if (StringUtils.isNotBlank(system.getNativeGuid()) && system.isStorageSystemManagedByProvider()) {    DecommissionedResource oldStorage=null;    List<URI> oldResources=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getDecommissionedResourceIDConstraint(id.toString()));    if (oldResources != null) {      List<DecommissionedResource> objects=_dbClient.queryObject(DecommissionedResource.class,oldResources);      for (      DecommissionedResource decomObj : objects) {        if (!decomObj.getInactive()) {          oldStorage=decomObj;          break;        }      }    }    if (oldStorage == null) {      oldStorage=new DecommissionedResource();      oldStorage.setNativeGuid(system.getNativeGuid());      oldStorage.setType(TypeMap.getCFName(StorageSystem.class));      oldStorage.setUser(getUserFromContext().getName());      oldStorage.setDecommissionedId(system.getId());      oldStorage.setLabel(system.getLabel());      oldStorage.setId(URIUtil.createId(DecommissionedResource.class));      _dbClient.createObject(oldStorage);    }    if (system.getActiveProviderURI() != null) {      StorageProvider provider=_dbClient.queryObject(StorageProvider.class,system.getActiveProviderURI());      if (provider != null) {        StringSet providerDecomSys=new StringSet();        providerDecomSys.add(oldStorage.getId().toString());        provider.setDecommissionedSystems(providerDecomSys);        _dbClient.persistObject(provider);      }    }  }  PurgeRunnable.executePurging(_dbClient,_dbPurger,_asynchJobService.getExecutorService(),system,_retry_attempts,taskId,60);  return toTask(system,taskId,op);}  }
class C{  public void removeConfigurationListener(NodeConfigListener listener){  PacketListener conListener=configEventToListenerMap.remove(listener);  if (conListener != null)   con.removePacketListener(conListener);}  }
class C{  private void createPO(MProject project,MProjectLine projectLine){  if (projectLine.getM_Product_ID() == 0) {    addLog(projectLine.getLine(),null,null,"Line has no Product");    return;  }  if (projectLine.getC_OrderPO_ID() != 0) {    addLog(projectLine.getLine(),null,null,"Line was ordered previously");    return;  }  MProductPO[] pos=MProductPO.getOfProduct(getCtx(),projectLine.getM_Product_ID(),get_TrxName());  if (pos == null || pos.length == 0) {    addLog(projectLine.getLine(),null,null,"Product has no PO record");    return;  }  MOrder order=null;  for (int i=0; i < m_pos.size(); i++) {    MOrder test=(MOrder)m_pos.get(i);    if (test.getC_BPartner_ID() == pos[0].getC_BPartner_ID()) {      order=test;      break;    }  }  if (order == null) {    MBPartner bp=new MBPartner(getCtx(),pos[0].getC_BPartner_ID(),get_TrxName());    order=new MOrder(project,false,null);    int AD_Org_ID=projectLine.getAD_Org_ID();    if (AD_Org_ID == 0) {      log.warning("createPOfromProjectLine - AD_Org_ID=0");      AD_Org_ID=Env.getAD_Org_ID(getCtx());      if (AD_Org_ID != 0)       projectLine.setAD_Org_ID(AD_Org_ID);    }    order.setClientOrg(projectLine.getAD_Client_ID(),AD_Org_ID);    order.setBPartner(bp);    order.save();    if (m_ConsolidateDocument)     m_pos.add(order);  }  MOrderLine orderLine=new MOrderLine(order);  orderLine.setM_Product_ID(projectLine.getM_Product_ID(),true);  orderLine.setQty(projectLine.getPlannedQty());  orderLine.setDescription(projectLine.getDescription());  orderLine.setPrice();  if (orderLine.getPriceActual().signum() == 0) {    BigDecimal poPrice=pos[0].getPricePO();    int C_Currency_ID=pos[0].getC_Currency_ID();    if (poPrice == null || poPrice.signum() == 0)     poPrice=pos[0].getPriceLastPO();    if (poPrice == null || poPrice.signum() == 0)     poPrice=pos[0].getPriceList();    if (poPrice != null && poPrice.signum() != 0) {      if (order.getC_Currency_ID() != C_Currency_ID)       poPrice=MConversionRate.convert(getCtx(),poPrice,C_Currency_ID,order.getC_Currency_ID(),order.getDateAcct(),order.getC_ConversionType_ID(),order.getAD_Client_ID(),order.getAD_Org_ID());      orderLine.setPrice(poPrice);    }  }  orderLine.setTax();  orderLine.saveEx();  projectLine.setC_OrderPO_ID(order.getC_Order_ID());  projectLine.saveEx();  addLog(projectLine.getLine(),null,projectLine.getPlannedQty(),order.getDocumentNo());}  }
class C{  public void testBug28851() throws Exception {  this.pstmt=((com.mysql.jdbc.Connection)this.conn).clientPrepareStatement("SELECT 1/?");  this.pstmt.setInt(1,1);  this.rs=this.pstmt.executeQuery();  assertTrue(this.rs.next());  assertEquals(1,this.rs.getInt(1));}  }
class C{  @Override protected void commitNameChange(PropertyChangeEvent evt){  NoteFigure noteFigure=(NoteFigure)getFigure();  noteFigure.setText(getNote().getObject());  noteFigure.setVisible(true);  refreshVisuals();}  }
class C{  public void storePrefs(final KeymapValuesHolder valuesHolder){  final EditorPreferences preferences=this.preferenceReader.getPreferences();  final JsMapFromStringToString keymaps=preferences.getKeymaps();  for (  final Entry<EditorType,Keymap> entry : valuesHolder) {    if (entry.getKey() != null && entry.getValue() != null) {      keymaps.put(entry.getKey().getEditorTypeKey(),entry.getValue().getKey());    }  }  this.preferenceReader.setPreferences(preferences);}  }
class C{  public int numProcessors(){  return m_processors;}  }
class C{  public void createConfigFileInTmpDir() throws IOException {  String configJson=toJson();  Path configFile=obtainArtifactTempDirectory().resolve(BACKUP_CONFIG_FILE);  FileUtils.writeStringToFile(configFile.toFile(),configJson);}  }
class C{  public Quorum succeed(){  succeeded++;  checkComplete();  return this;}  }
class C{  public JButton createJToolbarButton(String name) throws MissingResourceException, ResourceFormatException, MissingListenerException {  JButton result;  try {    result=new JToolbarButton(getString(name + TEXT_SUFFIX));  } catch (  MissingResourceException e) {    result=new JToolbarButton();  }  initializeButton(result,name);  return result;}  }
class C{  public Datacenter(String name,DatacenterCharacteristics characteristics,VmAllocationPolicy vmAllocationPolicy,List<Storage> storageList,double schedulingInterval) throws Exception {  super(name);  setCharacteristics(characteristics);  setVmAllocationPolicy(vmAllocationPolicy);  setLastProcessTime(0.0);  setStorageList(storageList);  setVmList(new ArrayList<Vm>());  setSchedulingInterval(schedulingInterval);  for (  Host host : getCharacteristics().getHostList()) {    host.setDatacenter(this);  }  if (getCharacteristics().getNumberOfPes() == 0) {    throw new Exception(super.getName() + " : Error - this entity has no PEs. Therefore, can't process any Cloudlets.");  }  getCharacteristics().setId(super.getId());}  }
class C{  static public boolean isZero(float value,float tolerance){  return Math.abs(value) <= tolerance;}  }
class C{  public DynaFormPanel(final String id){  super(id);}  }
class C{  @Override public IndexInput openInput(String name,IOContext context) throws IOException {  ensureOpen();  ensureCanRead(name);  Path path=directory.resolve(name);  SeekableByteChannel channel=Files.newByteChannel(path,StandardOpenOption.READ);  return new SimpleFSIndexInput("SimpleFSIndexInput(path=\"" + path + "\")",channel,context);}  }
class C{  public int read(int width) throws IOException {  if (width == 0) {    return 0;  }  if (width < 0 || width > 32) {    throw new IOException("Bad read width.");  }  int result=0;  while (width > 0) {    if (this.available == 0) {      this.unread=this.in.read();      if (this.unread < 0) {        throw new IOException("Attempt to read past end.");      }      this.available=8;    }    int take=width;    if (take > this.available) {      take=this.available;    }    result|=((this.unread >>> (this.available - take)) & mask[take]) << (width - take);    this.nrBits+=take;    this.available-=take;    width-=take;  }  return result;}  }
class C{  protected boolean remove(Object targetChild,boolean callChildSetBC){  if (targetChild == null)   throw new IllegalArgumentException();synchronized (BeanContext.globalHierarchyLock) {    if (!containsKey(targetChild))     return false;    if (!validatePendingRemove(targetChild)) {      throw new IllegalStateException();    }    BCSChild bcsc=(BCSChild)children.get(targetChild);    BCSChild pbcsc=null;    Object peer=null;synchronized (targetChild) {      if (callChildSetBC) {        BeanContextChild cbcc=getChildBeanContextChild(targetChild);        if (cbcc != null) synchronized (cbcc) {          cbcc.removePropertyChangeListener("beanContext",childPCL);          cbcc.removeVetoableChangeListener("beanContext",childVCL);          try {            cbcc.setBeanContext(null);          } catch (          PropertyVetoException pve1) {            cbcc.addPropertyChangeListener("beanContext",childPCL);            cbcc.addVetoableChangeListener("beanContext",childVCL);            throw new IllegalStateException();          }        }      }synchronized (children) {        children.remove(targetChild);        if (bcsc.isProxyPeer()) {          pbcsc=(BCSChild)children.get(peer=bcsc.getProxyPeer());          children.remove(peer);        }      }      if (getChildSerializable(targetChild) != null)       serializable--;      childJustRemovedHook(targetChild,bcsc);      if (peer != null) {        if (getChildSerializable(peer) != null)         serializable--;        childJustRemovedHook(peer,pbcsc);      }    }    fireChildrenRemoved(new BeanContextMembershipEvent(getBeanContextPeer(),peer == null ? new Object[]{targetChild} : new Object[]{targetChild,peer}));  }  return true;}  }
class C{  public double value(){  return _map._values[_index];}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getGuard_();}  }
class C{  public void apply(int zoom_axis){  if (mChart instanceof XYChart) {    int scales=mRenderer.getScalesCount();    for (int i=0; i < scales; i++) {      double[] range=getRange(i);      checkRange(range,i);      double[] limits=mRenderer.getZoomLimits();      double centerX=(range[0] + range[1]) / 2;      double centerY=(range[2] + range[3]) / 2;      double newWidth=range[1] - range[0];      double newHeight=range[3] - range[2];      double newXMin=centerX - newWidth / 2;      double newXMax=centerX + newWidth / 2;      double newYMin=centerY - newHeight / 2;      double newYMax=centerY + newHeight / 2;      if (i == 0) {        limitsReachedX=limits != null && (newXMin <= limits[0] || newXMax >= limits[1]);        limitsReachedY=limits != null && (newYMin <= limits[2] || newYMax >= limits[3]);      }      if (mZoomIn) {        if (mRenderer.isZoomXEnabled() && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {          if (limitsReachedX && mZoomRate < 1) {          } else {            newWidth/=mZoomRate;          }        }        if (mRenderer.isZoomYEnabled() && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {          if (limitsReachedY && mZoomRate < 1) {          } else {            newHeight/=mZoomRate;          }        }      } else {        if (mRenderer.isZoomXEnabled() && !limitsReachedX && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {          newWidth*=mZoomRate;        }        if (mRenderer.isZoomYEnabled() && !limitsReachedY && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {          newHeight*=mZoomRate;        }      }      if (mRenderer.isZoomXEnabled() && (zoom_axis == ZOOM_AXIS_X || zoom_axis == ZOOM_AXIS_XY)) {        newXMin=centerX - newWidth / 2;        newXMax=centerX + newWidth / 2;        setXRange(newXMin,newXMax,i);      }      if (mRenderer.isZoomYEnabled() && (zoom_axis == ZOOM_AXIS_Y || zoom_axis == ZOOM_AXIS_XY)) {        newYMin=centerY - newHeight / 2;        newYMax=centerY + newHeight / 2;        setYRange(newYMin,newYMax,i);      }    }  } else {    DefaultRenderer renderer=((RoundChart)mChart).getRenderer();    if (mZoomIn) {      renderer.setScale(renderer.getScale() * mZoomRate);    } else {      renderer.setScale(renderer.getScale() / mZoomRate);    }  }  notifyZoomListeners(new ZoomEvent(mZoomIn,mZoomRate));}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document ownerDocument;  doc=(Document)load("hc_staff",false);  ownerDocument=doc.getOwnerDocument();  assertNull("nodeGetOwnerDocumentNullAssert1",ownerDocument);}  }
class C{  protected void stopAnimationTimer(){  if (animator != null) {    animator.stop();  }}  }
class C{  public HttpRecoverableException(final String message){  super(message);}  }
class C{  OfRef(AbstractPipeline<?,T,?> upstream,Comparator<? super T> comparator){  super(upstream,StreamShape.REFERENCE,StreamOpFlag.IS_ORDERED | StreamOpFlag.NOT_SORTED);  this.isNaturalSort=false;  this.comparator=Objects.requireNonNull(comparator);}  }
class C{  public SimpleThresholdSetter(double factor,int delta){  this(factor);  m_delta=delta;}  }
class C{  private static <T extends LifecycleObserver>boolean checkAndCall(Class<T> lifecycleClazz,LifecycleObserver lifecycleObserver,Object[] parameters){  if (lifecycleClazz.isInstance(lifecycleObserver)) {    boolean shouldCallSuper=true;    Method method=getLifecycleMethod(lifecycleClazz);    try {      Object result=method.invoke(lifecycleObserver,parameters);      if (result != null && result instanceof Boolean) {        shouldCallSuper=(boolean)result;      }    } catch (    Exception e) {      if (BuildConfig.DEBUG) {        throw new RuntimeException(e);      }    }    return shouldCallSuper;  }  return true;}  }
class C{  public static DoubleVector random(int n){  DoubleVector v=new DoubleVector(n);  for (int i=0; i < n; i++) {    v.V[i]=Math.random();  }  return v;}  }
class C{  private static String property(String string){  int length=string.length();  if (length == 0) {    return "";  } else   if (length == 1) {    return string.toLowerCase();  } else {    return string.substring(0,1).toLowerCase() + string.substring(1);  }}  }
class C{  protected CMSSignedDataGenerator createCMSSignedDataGenerator(final CAdESSignatureParameters parameters,final ContentSigner contentSigner,final SignerInfoGeneratorBuilder signerInfoGeneratorBuilder,final CMSSignedData originalSignedData) throws DSSException {  try {    final CertificateToken signingCertificate=parameters.getSigningCertificate();    final CMSSignedDataGenerator generator=new CMSSignedDataGenerator();    final X509CertificateHolder certHolder=DSSASN1Utils.getX509CertificateHolder(signingCertificate);    final SignerInfoGenerator signerInfoGenerator=signerInfoGeneratorBuilder.build(contentSigner,certHolder);    generator.addSignerInfoGenerator(signerInfoGenerator);    final Set<CertificateToken> certificateChain=new HashSet<CertificateToken>();    if (originalSignedData != null) {      generator.addSigners(originalSignedData.getSignerInfos());      generator.addAttributeCertificates(originalSignedData.getAttributeCertificates());      generator.addCRLs(originalSignedData.getCRLs());      generator.addOtherRevocationInfo(id_pkix_ocsp_basic,originalSignedData.getOtherRevocationInfo(id_pkix_ocsp_basic));      generator.addOtherRevocationInfo(id_ri_ocsp_response,originalSignedData.getOtherRevocationInfo(id_ri_ocsp_response));      final Store certificates=originalSignedData.getCertificates();      final Collection<X509CertificateHolder> certificatesMatches=certificates.getMatches(null);      for (      final X509CertificateHolder certificatesMatch : certificatesMatches) {        final CertificateToken x509Certificate=DSSASN1Utils.getCertificate(certificatesMatch);        certificateChain.add(x509Certificate);      }    }    certificateChain.add(parameters.getSigningCertificate());    certificateChain.addAll(parameters.getCertificateChain());    final boolean trustAnchorBPPolicy=parameters.bLevel().isTrustAnchorBPPolicy();    final Store jcaCertStore=getJcaCertStore(certificateChain,trustAnchorBPPolicy);    generator.addCertificates(jcaCertStore);    return generator;  } catch (  CMSException e) {    throw new DSSException(e);  }catch (  OperatorCreationException e) {    throw new DSSException(e);  }}  }
class C{  public StateServiceImpl(final GenericDAO<State,Long> genericDao){  super(genericDao);}  }
class C{  public static ResultSet linkSchema(Connection conn,String targetSchema,String driver,String url,String user,String password,String sourceSchema){  Connection c2=null;  Statement stat=null;  ResultSet rs=null;  SimpleResultSet result=new SimpleResultSet();  result.setAutoClose(false);  result.addColumn("TABLE_NAME",Types.VARCHAR,Integer.MAX_VALUE,0);  try {    c2=JdbcUtils.getConnection(driver,url,user,password);    stat=conn.createStatement();    stat.execute("CREATE SCHEMA IF NOT EXISTS " + StringUtils.quoteIdentifier(targetSchema));    rs=c2.getMetaData().getTables(null,sourceSchema,null,null);    while (rs.next()) {      String table=rs.getString("TABLE_NAME");      StringBuilder buff=new StringBuilder();      buff.append("DROP TABLE IF EXISTS ").append(StringUtils.quoteIdentifier(targetSchema)).append('.').append(StringUtils.quoteIdentifier(table));      stat.execute(buff.toString());      buff=new StringBuilder();      buff.append("CREATE LINKED TABLE ").append(StringUtils.quoteIdentifier(targetSchema)).append('.').append(StringUtils.quoteIdentifier(table)).append('(').append(StringUtils.quoteStringSQL(driver)).append(", ").append(StringUtils.quoteStringSQL(url)).append(", ").append(StringUtils.quoteStringSQL(user)).append(", ").append(StringUtils.quoteStringSQL(password)).append(", ").append(StringUtils.quoteStringSQL(table)).append(')');      stat.execute(buff.toString());      result.addRow(table);    }  } catch (  SQLException e) {    throw DbException.convert(e);  } finally {    JdbcUtils.closeSilently(rs);    JdbcUtils.closeSilently(c2);    JdbcUtils.closeSilently(stat);  }  return result;}  }
class C{  public void mouseDown(){  TestLogging.log("MouseDown " + this.toString());  findElement();  Mouse mouse=((HasInputDevices)driver).getMouse();  mouse.mouseDown(null);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == DelegatingMember.class) {switch (baseFeatureID) {case ImPackage.DELEGATING_MEMBER__DELEGATION_BASE_TYPE:      return ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_BASE_TYPE;case ImPackage.DELEGATING_MEMBER__DELEGATION_SUPER_CLASS_STEPS:    return ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET:  return ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET;case ImPackage.DELEGATING_MEMBER__DELEGATION_TARGET_IS_ABSTRACT:return ImPackage.DELEGATING_SETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static CronScheduleBuilder dailyAtHourAndMinute(int hour,int minute){  DateBuilder.validateHour(hour);  DateBuilder.validateMinute(minute);  String cronExpression=String.format("0 %d %d ? * *",minute,hour);  return cronScheduleNoParseException(cronExpression);}  }
class C{  public void assertNoIssuesExcept(EObject model,String... exceptionIssueCodes){  Resource resource=model.eResource();  final List<Issue> issues=validate(resource);  if (removeIssuesWithCode(issues,exceptionIssueCodes).size() > 0) {    fail("Expected no issues, but got :" + getIssuesAsString(resource,issues,new StringBuilder()));  }}  }
class C{  private OracleCollection createCollection(String collectionName) throws OracleException {  return (createCollection(collectionName,(CollectionDescriptor)null));}  }
class C{  public <T>T reverse(T t){  return t;}  }
class C{  public MultiBotManager(ExecutorService botPool){  checkNotNull(botPool,"Bot pool cannot be null");  this.botPool=MoreExecutors.listeningDecorator(botPool);  this.managerNumber=MANAGER_COUNT.getAndIncrement();}  }
class C{  @Task(version=1,timeout=1000l,retries=2) public void checkVerificationStatus(UserVerificationStatus userVerificationStatus){  if (userVerificationStatus.isVerifiedUser()) {    notificationService.sendWelcomeEmail(userVerificationStatus.getUserId());  } else {    notificationService.notifyCustomerSupport(userVerificationStatus.getUserId());  }}  }
class C{  public InputStream fetchStoragePortGroupInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating VNX Port group Query...");  InputStream iStream=null;  try {    Query query=new Query();    MoverQueryParams dataMovers=new MoverQueryParams();    com.emc.nas.vnxfile.xmlapi.MoverQueryParams.AspectSelection selection=new com.emc.nas.vnxfile.xmlapi.MoverQueryParams.AspectSelection();    selection.setMovers(true);    dataMovers.setAspectSelection(selection);    query.getQueryRequestChoice().add(dataMovers);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(dataMovers,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for celerra port group info",jaxbException.getCause());  }  return iStream;}  }
class C{  public void dismissWaitingCopyDialog(){  Fragment frag=getSupportFragmentManager().findFragmentByTag(DIALOG_WAIT_COPY_FILE);  if (frag != null) {    LoadingDialog loading=(LoadingDialog)frag;    loading.dismiss();  }}  }
class C{  public SandboxRay(String name,Vector2 start,Vector2 direction){  super(start,direction);  this.name=name;}  }
class C{  public void addGefaehrdungsBaumChild(IGefaehrdungsBaumElement newChild){  if (newChild instanceof CnATreeElement) {    addChild((CnATreeElement)newChild);  }}  }
class C{  public static void writeToFileReal_1D(String format,double[] x,String filename){  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int j=0; j < x.length; j++) {      out.write(String.format(format,x[j]));      out.newLine();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  private void redrawSamples(){  try {    Intervals<Sample> intervals=new Intervals<Sample>(samples,null);    Stack<Sample> newSamples=new Stack<Sample>();    int sampleSize=samples.size();    for (int j=0; j < sampleSize; j++) {      newSamples.add(intervals.sample());    }    samples=newSamples;  } catch (  RuntimeException e) {    log.warning("could not redraw samples: " + e);    e.printStackTrace();  }}  }
class C{  public MJournalBatch(Properties ctx,int GL_JournalBatch_ID,String trxName){  super(ctx,GL_JournalBatch_ID,trxName);  if (GL_JournalBatch_ID == 0) {    setPostingType(POSTINGTYPE_Actual);    setDocAction(DOCACTION_Complete);    setDocStatus(DOCSTATUS_Drafted);    setTotalCr(Env.ZERO);    setTotalDr(Env.ZERO);    setProcessed(false);    setProcessing(false);    setIsApproved(false);  }}  }
class C{  public static <T>Mono<Boolean> sequenceEqual(Publisher<? extends T> source1,Publisher<? extends T> source2,BiPredicate<? super T,? super T> isEqual){  return sequenceEqual(source1,source2,isEqual,QueueSupplier.SMALL_BUFFER_SIZE);}  }
class C{  public static double digammaByDefinition(int d) throws Exception {  if (d < 1) {    return Double.NaN;  }  double result=0;  for (int n=d; n > 1; n--) {    result+=1.0 / (double)(n - 1);  }  result+=-EULER_MASCHERONI_CONSTANT;  return result;}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(this.getModifiers());}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private synchronized void storeMethod(Method method,Map<Key,Array> methodsMap){  Key methodName=KeyImpl.init(method.getName());  Array methodArgs=methodsMap.get(methodName);  if (methodArgs == null) {    methodArgs=new ArrayImpl();    methodsMap.put(methodName,methodArgs);  }  storeArgs(method,methodArgs);}  }
class C{  public void assertPartialResults(ModifiableSolrParams p) throws Exception {  QueryResponse rsp=cluster.getSolrClient().query(COLLECTION,p);  assertEquals(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY + " were expected",true,rsp.getHeader().get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY));}  }
class C{  @Override public void openElement(int index){  int count=0;  NodeList list=current.getChildNodes();  int len=list.getLength();  for (int i=0; i < len; i++) {    Node node=list.item(i);    if ((node instanceof Element)) {      if (count++ == index) {        current=node;        return;      }    }  }}  }
class C{  public void addType(int type){  this.type|=typeToBitMask(type);}  }
class C{  @Override public String toString(){  return this.getLuceneQueryString();}  }
class C{  private void createFoldersStructure(){  File file=new File(ressourcesDirectoryPath,res);  if (!file.exists()) {    file.mkdirs();  }  valuesfolder=new File(file,values);  if (!valuesfolder.exists()) {    valuesfolder.mkdirs();  }  drawableFolder=new File(file,drawable);  if (!drawableFolder.exists()) {    drawableFolder.mkdirs();  }  animatorFolder=new File(file,animator);  if (!animatorFolder.exists()) {    animatorFolder.mkdirs();  }  javaFolder=new File(ressourcesDirectoryPath,java);  javaFolder=new File(javaFolder,com);  javaFolder=new File(javaFolder,android2ee);  javaFolder=new File(javaFolder,tool);  javaFolder=new File(javaFolder,animatedvector);  javaFolder=new File(javaFolder,morphing);  if (!javaFolder.exists()) {    javaFolder.mkdirs();  }}  }
class C{  protected static void printOptions(OptionHandler o){  Enumeration<Option> enm=o.listOptions();  System.out.println("Options for " + o.getClass().getName() + ":\n");  while (enm.hasMoreElements()) {    Option option=enm.nextElement();    System.out.println(option.synopsis());    System.out.println(option.description());  }}  }
class C{  static public int packLong(DataOutput os,long value) throws IOException {  if (value < 0) {    throw new IllegalArgumentException("negative value: v=" + value);  }  int i=1;  while ((value & ~0x7FL) != 0) {    os.write((((int)value & 0x7F) | 0x80));    value>>>=7;    i++;  }  os.write((byte)value);  return i;}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  private View nextViewFromScrapList(){  final int size=mScrapList.size();  for (int i=0; i < size; i++) {    final RecyclerView.ViewHolder viewHolder=mScrapList.get(i);    if (viewHolder.isRemoved()) {      continue;    }    if (mCurrentPosition == viewHolder.getLayoutPosition()) {      assignPositionFromScrapList(viewHolder);      return viewHolder.itemView;    }  }  return null;}  }
class C{  public static void close(Reader reader){  try {    if (reader != null) {      reader.close();    }  } catch (  IOException ioE) {  }}  }
class C{  final public RangedList<TypeParameter> TypeParameters() throws ParseException {  RangedList<TypeParameter> ret=new RangedList<TypeParameter>(new LinkedList<TypeParameter>());  TypeParameter tp;  List<AnnotationExpr> annotations=null;  jj_consume_token(LT);  ret.beginAt(tokenBegin());  annotations=Annotations();  tp=TypeParameter();  ret.add(tp);  tp.setAnnotations(annotations);  annotations=null;  label_9:   while (true) {switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {case COMMA:{        ;        break;      }default :    jj_la1[23]=jj_gen;  break label_9;}jj_consume_token(COMMA);annotations=Annotations();tp=TypeParameter();ret.add(tp);tp.setAnnotations(annotations);annotations=null;}jj_consume_token(GT);ret.endAt(tokenEnd());return ret;}  }
class C{  public void showDialog(@NotNull AsyncCallback<Void> callback){  this.callback=callback;  view.setMessage("");  view.setHost("");  view.setEnabledUploadButton(false);  view.showDialog();}  }
class C{  public LabeledOMPoly(double[] llPoints,int units,int lType,int nsegs){  super(llPoints,units,lType,nsegs);}  }
class C{  public Annotations(){  annotations=new TreeMap<CstType,Annotation>();}  }
class C{  int updateBillingResultByTkey(Long tkey,String currencyCode,BigDecimal valueGrossAmount) throws Exception {  long currencyKey=getCurrencyKey(currencyCode);  String sql=String.format("UPDATE %s SET currency_tkey=?, grossamount=? WHERE tkey=?;",TABLE_BILLINGRESULT);  PreparedStatement pStatement=null;  try {    pStatement=getPreparedStatement(sql);    pStatement.setLong(1,currencyKey);    pStatement.setBigDecimal(2,valueGrossAmount);    pStatement.setLong(3,tkey.longValue());    int result=pStatement.executeUpdate();    return result;  }  finally {    closeStatement(pStatement,null);  }}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public MXSession createSession(HomeserverConnectionConfig hsConfig){  return createSession(mAppContext,hsConfig);}  }
class C{  private void repaint(int firstItem,int lastItem,int options,Rectangle source,Point distance){  final Graphics g=getGraphics();  if (g != null) {    try {      painter.paint(g,firstItem,lastItem,options,source,distance);      postPaintEvent(target,0,0,getWidth(),getHeight());    }  finally {      g.dispose();    }  }}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  private void swap(int i,int j){  T iElt=heap.elementAt(i);  T jElt=heap.elementAt(j);  heap.setElementAt(jElt,i);  object_indices.put(jElt,new Integer(i));  heap.setElementAt(iElt,j);  object_indices.put(iElt,new Integer(j));}  }
class C{  public WorksheetEntry(int rowCount,int colCount){  getCategories().add(CATEGORY);  addExtension(new RowCount(rowCount));  addExtension(new ColCount(colCount));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:24.906 -0500",hash_original_method="465129C188D91F5542AA39E43CB0E49D",hash_generated_method="1D2193BD88EC285E5911F89209C0F412") public static float length(float x,float y){  return FloatMath.sqrt(x * x + y * y);}  }
class C{  public static int[] readAllInts(){  String[] fields=readAllStrings();  int[] vals=new int[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Integer.parseInt(fields[i]);  return vals;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private static int checkTypeSignature(final String signature,int pos){switch (getChar(signature,pos)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':    return pos + 1;default :  return checkFieldTypeSignature(signature,pos);}}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int[] kc=Catbert.getKeystrokeFromString(getString(stack));  stack.getUIMgrSafe().getRouter().setKBPrefs(kc[0],kc[1],0,false);  return null;}  }
class C{  private void onRender(){  adjustEmptyHeaderHeight();}  }
class C{  public void subscribe(PTQuery query,QueryResultsCallback resultsCallback){  QueryAdvice advice=installedQueries.get(query);  if (advice != null) {    subscriber().subscribe(advice.getQueryId(),resultsCallback);  }}  }
class C{  final boolean lookahead(char c,int n){  int pos=(m_queueMark + n);  boolean b;  if ((pos <= m_ops.getTokenQueueSize()) && (pos > 0) && (m_ops.getTokenQueueSize() != 0)) {    String tok=((String)m_ops.m_tokenQueue.elementAt(pos - 1));    b=(tok.length() == 1) ? (tok.charAt(0) == c) : false;  } else {    b=false;  }  return b;}  }
class C{  public NeighbourNodeData findNearestNeighbour(int sampleIndex){  int indexInSortedArray=indicesInSortedArray[sampleIndex];  if (indexInSortedArray == 0) {    double theNorm=norm(originalDataSet[sampleIndex],originalDataSet[sortedArrayIndices[1]],normTypeToUse);    return new NeighbourNodeData(sortedArrayIndices[1],new double[]{theNorm},theNorm);  } else   if (indexInSortedArray == numObservations - 1) {    double theNorm=norm(originalDataSet[sampleIndex],originalDataSet[sortedArrayIndices[numObservations - 2]],normTypeToUse);    return new NeighbourNodeData(sortedArrayIndices[numObservations - 2],new double[]{theNorm},theNorm);  } else {    double normAbove=norm(originalDataSet[sampleIndex],originalDataSet[sortedArrayIndices[indexInSortedArray + 1]],normTypeToUse);    double normBelow=norm(originalDataSet[sampleIndex],originalDataSet[sortedArrayIndices[indexInSortedArray - 1]],normTypeToUse);    if (normAbove < normBelow) {      return new NeighbourNodeData(sortedArrayIndices[indexInSortedArray + 1],new double[]{normAbove},normAbove);    } else {      return new NeighbourNodeData(sortedArrayIndices[indexInSortedArray - 1],new double[]{normAbove},normAbove);    }  }}  }
class C{  public static int indexOfSubList(List source,List target){  int sourceSize=source.size();  int targetSize=target.size();  int maxCandidate=sourceSize - targetSize;  if (sourceSize < INDEXOFSUBLIST_THRESHOLD || (source instanceof RandomAccess && target instanceof RandomAccess)) {    nextCand:     for (int candidate=0; candidate <= maxCandidate; candidate++) {      for (int i=0, j=candidate; i < targetSize; i++, j++)       if (!eq(target.get(i),source.get(j)))       continue nextCand;      return candidate;    }  } else {    ListIterator si=source.listIterator();    nextCand:     for (int candidate=0; candidate <= maxCandidate; candidate++) {      ListIterator ti=target.listIterator();      for (int i=0; i < targetSize; i++) {        if (!eq(ti.next(),si.next())) {          for (int j=0; j < i; j++)           si.previous();          continue nextCand;        }      }      return candidate;    }  }  return -1;}  }
class C{  private void initialize(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  mOpsInstance=opsType.newInstance();  mRetainedFragmentManager.put(opsType.getSimpleName(),mOpsInstance);  mOpsInstance.onConfiguration(instance,true);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SECURITY_ADMIN}) public AuthnProviderRestRep createProvider(AuthnCreateParam param){  validateAuthnCreateParam(param);  if (param.getDisable() == null || !param.getDisable()) {    _log.debug("Validating manager dn credentials before provider creation...");    AuthnProviderParamsToValidate validateP=AuthMapper.mapToValidateCreate(param,null);    validateP.setUrls(new ArrayList<String>(param.getServerUrls()));    StringBuilder errorString=new StringBuilder();    if (!Validator.isUsableAuthenticationProvider(validateP,errorString)) {      throw BadRequestException.badRequests.authnProviderCouldNotBeValidated(errorString.toString());    }  }  AuthnProvider provider=map(param);  provider.setId(URIUtil.createId(AuthnProvider.class));  String mode=provider.getMode();  if (null != mode && AuthnProvider.ProvidersType.keystone.toString().equalsIgnoreCase(mode)) {    provider.setKeys(_keystoneUtils.populateKeystoneToken(provider.getServerUrls(),provider.getManagerDN(),getPassword(provider,null)));    if (provider.getAutoRegCoprHDNImportOSProjects()) {      _keystoneUtils.registerCoprhdInKeystone(provider.getManagerDN(),provider.getServerUrls(),provider.getManagerPassword());      String interval=_openStackSynchronizationTask.getIntervalFromTenantSyncSet(provider.getTenantsSynchronizationOptions());      if (Integer.parseInt(interval) < OpenStackSynchronizationTask.MIN_INTERVAL_DELAY) {        _log.debug("Setting default interval time as chosen interval is lower than minimal value.");        provider.getTenantsSynchronizationOptions().remove(interval);        provider.getTenantsSynchronizationOptions().add(Integer.toString(OpenStackSynchronizationTask.DEFAULT_INTERVAL_DELAY));      }    }  } else {    validateLDAPGroupProperties(provider);  }  _log.debug("Saving the provider: {}: {}",provider.getId(),provider.toString());  persistProfileAndNotifyChange(provider,true);  auditOp(OperationTypeEnum.CREATE_AUTHPROVIDER,true,null,provider.toString(),provider.getId().toString());  return map(provider);}  }
class C{  public void testConnectionAttributes() throws Exception {  if (!versionMeetsMinimum(5,6)) {    return;  }  Properties props=new Properties();  props.setProperty("connectionAttributes","first:one,again:two");  props.setProperty("user",getPropertiesFromTestsuiteUrl().getProperty(NonRegisteringDriver.USER_PROPERTY_KEY));  Connection attConn=super.getConnectionWithProps(props);  ResultSet rslt=attConn.createStatement().executeQuery("SELECT * FROM performance_schema.session_connect_attrs WHERE processlist_id = CONNECTION_ID()");  Map<String,Integer> matchedCounts=new HashMap<String,Integer>();  matchedCounts.put("_runtime_version",0);  matchedCounts.put("_runtime_vendor",0);  matchedCounts.put("_client_version",0);  matchedCounts.put("_client_license",0);  matchedCounts.put("_client_name",0);  matchedCounts.put("first",0);  matchedCounts.put("again",0);  while (rslt.next()) {    String key=rslt.getString(2);    String val=rslt.getString(3);    if (!matchedCounts.containsKey(key)) {      fail("Unexpected connection attribute key:  " + key);    }    matchedCounts.put(key,matchedCounts.get(key) + 1);    if (key.equals("_runtime_version")) {      assertEquals(System.getProperty("java.version"),val);    } else     if (key.equals("_os")) {      assertEquals(NonRegisteringDriver.OS,val);    } else     if (key.equals("_platform")) {      assertEquals(NonRegisteringDriver.PLATFORM,val);    } else     if (key.equals("_runtime_vendor")) {      assertEquals(System.getProperty("java.vendor"),val);    } else     if (key.equals("_client_version")) {      assertEquals(NonRegisteringDriver.VERSION,val);    } else     if (key.equals("_client_license")) {      assertEquals(NonRegisteringDriver.LICENSE,val);    } else     if (key.equals("_client_name")) {      assertEquals(NonRegisteringDriver.NAME,val);    } else     if (key.equals("first")) {      assertEquals("one",val);    } else     if (key.equals("again")) {      assertEquals("two",val);    }  }  rslt.close();  attConn.close();  for (  String key : matchedCounts.keySet()) {    if (matchedCounts.get(key) != 1) {      fail("Incorrect number of entries for key \"" + key + "\": "+ matchedCounts.get(key));    }  }  props.setProperty("connectionAttributes","none");  attConn=super.getConnectionWithProps(props);  rslt=attConn.createStatement().executeQuery("SELECT * FROM performance_schema.session_connect_attrs WHERE processlist_id = CONNECTION_ID()");  if (rslt.next()) {    fail("Expected no connection attributes.");  }}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public Quaterniond nlerp(Quaterniondc q,double factor){  return nlerp(q,factor,this);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case DomPackage.DOCLET_ELEMENT___SET_RANGE__INT_INT:    setRange((Integer)arguments.get(0),(Integer)arguments.get(1));  return null;case DomPackage.DOCLET_ELEMENT___COVERS__INT:return covers((Integer)arguments.get(0));}return super.eInvoke(operationID,arguments);}  }
class C{  protected double[] createParameterizedIndex(final Point[] points){  final double[] index=new double[points.length];  if (index.length > 0) {    index[0]=0;  }  for (int i=1; i < points.length; i++) {    index[i]=index[i - 1] + Math.sqrt(points[i - 1].distance(points[i]));  }  return index;}  }
class C{  public String selectHeaderAccept(String[] accepts){  if (accepts.length == 0)   return null;  if (StringUtil.containsIgnoreCase(accepts,"application/json"))   return "application/json";  return StringUtil.join(accepts,",");}  }
class C{  public void testAddAndGetAttribute() throws StunException {  Response message=new Response();  message.setMessageType(Message.BINDING_SUCCESS_RESPONSE);  message.putAttribute(mappedAddress);  Attribute getResult=null;  getResult=message.getAttribute(mappedAddress.getAttributeType());  assertEquals("Originally added attribute did not match the one retrned " + "by getAttribute()",mappedAddress,getResult);  message.putAttribute(sourceAddress);  getResult=message.getAttribute(sourceAddress.getAttributeType());  assertEquals("The second attribute could not be extracted.",sourceAddress,getResult);}  }
class C{  public DocumentFragment createDocumentFragment(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  final long fn(long v,long x){  return v + x;}  }
class C{  @Override public void shutdown(){  ((JournalTransactionService)getTransactionService()).shutdown();  super.shutdown();}  }
class C{  public void writeInt(int x){  byte[] buff=data;  buff[pos]=(byte)(x >> 24);  buff[pos + 1]=(byte)(x >> 16);  buff[pos + 2]=(byte)(x >> 8);  buff[pos + 3]=(byte)x;  pos+=4;}  }
class C{  public IMouseState createBackgroundDraggedLeftState(final MouseEvent event){  final CBackgroundDraggedLeftState state=new CBackgroundDraggedLeftState(this,m_graph);  m_factory.createBackgroundDraggedLeftAction().execute(state,event);  return state;}  }
class C{  @Override public String toString(){  StringBuffer text=new StringBuffer();  text.append("Bayes Network Classifier");  text.append("\n" + (m_bUseADTree ? "Using " : "not using ") + "ADTree");  if (m_Instances == null) {    text.append(": No model built yet.");  } else {    text.append("\n#attributes=");    text.append(m_Instances.numAttributes());    text.append(" #classindex=");    text.append(m_Instances.classIndex());    text.append("\nNetwork structure (nodes followed by parents)\n");    for (int iAttribute=0; iAttribute < m_Instances.numAttributes(); iAttribute++) {      text.append(m_Instances.attribute(iAttribute).name() + "(" + m_Instances.attribute(iAttribute).numValues()+ "): ");      for (int iParent=0; iParent < m_ParentSets[iAttribute].getNrOfParents(); iParent++) {        text.append(m_Instances.attribute(m_ParentSets[iAttribute].getParent(iParent)).name() + " ");      }      text.append("\n");    }    text.append("LogScore Bayes: " + measureBayesScore() + "\n");    text.append("LogScore BDeu: " + measureBDeuScore() + "\n");    text.append("LogScore MDL: " + measureMDLScore() + "\n");    text.append("LogScore ENTROPY: " + measureEntropyScore() + "\n");    text.append("LogScore AIC: " + measureAICScore() + "\n");    if (m_otherBayesNet != null) {      text.append("Missing: " + m_otherBayesNet.missingArcs(this) + " Extra: "+ m_otherBayesNet.extraArcs(this)+ " Reversed: "+ m_otherBayesNet.reversedArcs(this)+ "\n");      text.append("Divergence: " + m_otherBayesNet.divergence(this) + "\n");    }  }  return text.toString();}  }
class C{  public static void showFunction(final CGraphWindow parent,final IViewContainer container,final INaviFunction function){  final INaviModule module=function.getModule();  final INaviView view=module.getContent().getViewContainer().getView(function);  CViewOpener.showView(parent,container,view,parent);}  }
class C{  public PNGWriter(JComponent c){  super(c);}  }
class C{  public void relinkBlockSnapshotSessionTarget(URI systemURI,URI tgtSnapSessionURI,URI snapshotURI,String stepId){  TaskCompleter completer=null;  try {    StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);    completer=new BlockSnapshotSessionRelinkTargetCompleter(tgtSnapSessionURI,snapshotURI,stepId);    getDevice(system.getSystemType()).doRelinkBlockSnapshotSessionTarget(system,tgtSnapSessionURI,snapshotURI,completer);  } catch (  Exception e) {    if (completer != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);      completer.error(_dbClient,serviceError);    } else {      throw DeviceControllerException.exceptions.relinkBlockSnapshotSessionTargetsFailed(e);    }  }}  }
class C{  public void testToBigIntegerNeg3(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+45";  BigInteger bNumber=new BigInteger("-123809648392384754573567356745735635678902957849027687876782870000000000000000");  BigDecimal aNumber=new BigDecimal(a);  BigInteger result=aNumber.toBigInteger();  assertTrue("incorrect value",result.equals(bNumber));}  }
class C{  public RegexCompletionQuery(Term term,int flags,int maxDeterminizedStates,BitsProducer filter){  super(term,filter);  this.flags=flags;  this.maxDeterminizedStates=maxDeterminizedStates;}  }
class C{  private final void moveValueGapTo(int column,int where){  final int[] valuegap=mValueGap;  final int[] values=mValues;  final int columns=mColumns;  if (where == valuegap[column]) {    return;  } else   if (where > valuegap[column]) {    for (int i=valuegap[column]; i < where; i++) {      values[i * columns + column]+=valuegap[column + columns];    }  } else {    for (int i=where; i < valuegap[column]; i++) {      values[i * columns + column]-=valuegap[column + columns];    }  }  valuegap[column]=where;}  }
class C{  protected RollBackTimmyTable(String filename,int recordSize,TimmyDatabase d) throws SyncFailedException, IOException {  this.filename=filename;  this.database=d;  reopenRaf(recordSize);  tempRecordData=new byte[recordSize];}  }
class C{  static void playSound(JComponent c,Object actionKey){  LookAndFeel laf=UIManager.getLookAndFeel();  if (laf instanceof BasicLookAndFeel) {    ActionMap map=c.getActionMap();    if (map != null) {      Action audioAction=map.get(actionKey);      if (audioAction != null) {        ((BasicLookAndFeel)laf).playSound(audioAction);      }    }  }}  }
class C{  public boolean equalsIgnoreCase(String string){  if (string == this) {    return true;  }  if (string == null || count != string.count) {    return false;  }  int o1=offset, o2=string.offset;  int end=offset + count;  char c1, c2;  char[] target=string.value;  while (o1 < end) {    if ((c1=value[o1++]) != (c2=target[o2++]) && Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {      return false;    }  }  return true;}  }
class C{  private void initializeMBean(SystemMemberCacheImpl cache) throws AdminException {  GemFireVM vm=cache.getVM();  this.mbeanName=new StringBuffer("GemFire.Cache:").append("name=").append(MBeanUtil.makeCompliantMBeanNameProperty(cache.getName())).append(",id=").append(this.getBridgeId()).append(",owner=").append(MBeanUtil.makeCompliantMBeanNameProperty(vm.getId().toString())).append(",type=CacheServer").toString();  this.objectName=MBeanUtil.createMBean(this);}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new RuntimeException(e.getMessage());  }}  }
class C{  public VmIdentifier(URI uri) throws URISyntaxException {  this.uri=uri;  validate();}  }
class C{  @Override public Instant maxTimestamp(){  return end.minus(1);}  }
class C{  private static String logToXml(final String manufacturer,final String model,final String revision,final String swid,final String swVersion,final String exportVersion){  return String.format(LOG_XML,manufacturer,model,revision,swid,swVersion,exportVersion);}  }
class C{  void checkEndMethod(){  if (endMethod) {    throw new IllegalStateException("Cannot visit elements after visitEnd has been called.");  }}  }
class C{  public void dropConstraints(DatabaseSession session){  dropConstraints(session,new JPAMSchemaManager(session));}  }
class C{  public void undo(){  try {    if (undoManager != null)     undoManager.undoOrRedo();  } catch (  CannotUndoException ignored) {  }catch (  CannotRedoException ignored) {  }}  }
class C{  public long manhattanDistance(final java.awt.Point p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y);}  }
class C{  public static String assumeSystemPropertyNotNull(String key){  String property=System.getProperty(key);  assumeNotNull(property);  return property;}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return AddHealthListenerResponse.create(dm,this.getSender(),this.cfg);}  }
class C{  public void addBlocksDownloadedEventListener(Executor executor,BlocksDownloadedEventListener listener){  blocksDownloadedEventListeners.add(new ListenerRegistration(listener,executor));}  }
class C{  public static long unionCount(FixedBitSet a,FixedBitSet b){  long tot=BitUtil.pop_union(a.bits,b.bits,0,Math.min(a.numWords,b.numWords));  if (a.numWords < b.numWords) {    tot+=BitUtil.pop_array(b.bits,a.numWords,b.numWords - a.numWords);  } else   if (a.numWords > b.numWords) {    tot+=BitUtil.pop_array(a.bits,b.numWords,a.numWords - b.numWords);  }  return tot;}  }
class C{  public String filterAfterFirstBatchTipText(){  return "Whether to apply the filtering process to instances that " + "are input after the first (training) batch. The default " + "is false so that, when used in a FilteredClassifier, test"+ " instances do not potentially get 'consumed' by the filter "+ "an a prediction is always made.";}  }
class C{  @Override public String toString(){  return "Source " + getPath();}  }
class C{  public void paintInternalFrameBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void endFunction(){  lib.setFunction(function);  insideFunction=false;}  }
class C{  public static String cutpointsToString(double[] cutPoints,boolean[] cutAndLeft){  StringBuffer text=new StringBuffer("");  if (cutPoints == null) {    text.append("\n# no cutpoints found - attribute \n");  } else {    text.append("\n#* " + cutPoints.length + " cutpoint(s) -\n");    for (int i=0; i < cutPoints.length; i++) {      text.append("# " + cutPoints[i] + " ");      text.append("" + cutAndLeft[i] + "\n");    }    text.append("# end\n");  }  return text.toString();}  }
class C{  public static Automaton union(Automaton a1,Automaton a2){  return union(Arrays.asList(a1,a2));}  }
class C{  public void clear(){  if (documents != null) {    documents.clear();  }  if (deleteById != null) {    deleteById.clear();  }  if (deleteQuery != null) {    deleteQuery.clear();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public HGAssert subgraph(HGHandle... atoms){  HashSet<HGHandle> S=new HashSet<HGHandle>();  for (  HGHandle h : atoms)   S.add(h);  for (  HGHandle h : atoms) {    for (    HGHandle inc : graph.getIncidenceSet(h))     if (!S.contains(inc))     throw new AssertionError("Atom " + inc + " links to "+ h+ ", but is not part of the subgraph atom list.");    Object x=graph.get(h);    if (x instanceof HGLink) {      HGLink l=(HGLink)x;      for (int i=0; i < l.getArity(); i++)       if (!S.contains(l.getTargetAt(i)))       throw new AssertionError("Atom " + h + " links to "+ l.getTargetAt(i)+ "which is not part of the subgraph atom list.");    }  }  return this;}  }
class C{  @Override public void addVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.addVetoableChangeListener(name,vcl);}  }
class C{  @Override protected void initData(){  FirstRecyclerViewAdapter adapter=new FirstRecyclerViewAdapter();  List<Integer> resIds=new LinkedList<>();  resIds.add(R.drawable.img_mm_1);  resIds.add(R.drawable.img_mm_2);  resIds.add(R.drawable.img_mm_3);  resIds.add(R.drawable.img_mm_4);  resIds.add(R.drawable.img_mm_5);  resIds.add(R.drawable.img_mm_6);  this.firstRV.setAdapter(adapter);  adapter.setList(resIds);}  }
class C{  private void declareExtensions(){  new SidewikiEntryFeed().declareExtensions(extProfile);  new SidewikiUserFeed().declareExtensions(extProfile);}  }
class C{  static public Process open(String argv[]){  return exec(argv);}  }
class C{  private static void initializeAddressFilters(){synchronized (HostCandidateHarvester.class) {    if (addressFiltersInitialized)     return;    String[] allowedAddressesStr=StackProperties.getStringArray(StackProperties.ALLOWED_ADDRESSES,";");    if (allowedAddressesStr != null) {      for (      String addressStr : allowedAddressesStr) {        InetAddress address;        try {          address=InetAddress.getByName(addressStr);        } catch (        Exception e) {          logger.warning("Failed to add an allowed address: " + addressStr);          continue;        }        if (allowedAddresses == null)         allowedAddresses=new ArrayList<>();        allowedAddresses.add(address);      }    }    String[] blockedAddressesStr=StackProperties.getStringArray(StackProperties.BLOCKED_ADDRESSES,";");    if (blockedAddressesStr != null) {      for (      String addressStr : blockedAddressesStr) {        InetAddress address;        try {          address=InetAddress.getByName(addressStr);        } catch (        Exception e) {          logger.warning("Failed to add a blocked address: " + addressStr);          continue;        }        if (blockedAddresses == null)         blockedAddresses=new ArrayList<>();        blockedAddresses.add(address);      }    }    addressFiltersInitialized=true;  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.EXPORT_SPECIFIER__ELEMENT:    return getElement();case N4JSPackage.EXPORT_SPECIFIER__ALIAS:  return getAlias();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void testAuthenticateSpringActiveDirectoryCorrect(){  LdapManager mgr=getLdapAD();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("nacho");  authenticationInfo.setUserCredentials("archivo_2007");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {  }  assertEquals("5f648285b040cd4dac2051885dfa5ffe",ret);}  }
class C{  public int elementAt(int index){  int plane=(index & PLANEMASK) >> PLANESHIFT;  if (!planeTouched[plane]) {    return defaultValue;  }  index&=CODEPOINTMASK;  return values[plane][(indices[plane][index >> BLOCKSHIFT] & 0xFFFF) + (index & BLOCKMASK)];}  }
class C{  public static void info(LinkedList<IPoint[]> rings){  System.out.println("Ring information:");  System.out.println(rings.size() + " rings");  StringBuilder sb=new StringBuilder();  double avgLength=0;  for (  IPoint[] ip : rings) {    avgLength+=ip.length;    sb.append(ip.length + ",");  }  avgLength=avgLength / rings.size();  sb.deleteCharAt(sb.length() - 1);  System.out.println("Sequence:");  System.out.println(sb.toString());  System.out.println("Average Length:" + avgLength);}  }
class C{  public TimeSeries createCopy(int start,int end) throws CloneNotSupportedException {  if (start < 0) {    throw new IllegalArgumentException("Requires start >= 0.");  }  if (end < start) {    throw new IllegalArgumentException("Requires start <= end.");  }  TimeSeries copy=(TimeSeries)super.clone();  copy.minY=Double.NaN;  copy.maxY=Double.NaN;  copy.data=new java.util.ArrayList();  if (this.data.size() > 0) {    for (int index=start; index <= end; index++) {      TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);      TimeSeriesDataItem clone=(TimeSeriesDataItem)item.clone();      try {        copy.add(clone);      } catch (      SeriesException e) {        throw new RuntimeException(e);      }    }  }  return copy;}  }
class C{  protected PatternImpl(){  super();}  }
class C{  @Override public void receive(float[] results){  float dftBinSizeScalor=1.0f / (float)results.length;  float[] processed=new float[results.length / 4];  int index=0;  for (int x=0; x < processed.length; x++) {    index=x * 2;    processed[x]=20.0f * (float)Math.log10(((results[index] * results[index]) + (results[index + 1] * results[index + 1])) * dftBinSizeScalor);  }  dispatch(processed);}  }
class C{  public Country detectCountry(){  return mService.detectCountry();}  }
class C{  public StringBuffer append(long l){  IntegralToString.appendLong(this,l);  return this;}  }
class C{  protected IFloodlightModuleContext loadModulesFromList(Collection<String> configMods,Properties prop,Collection<IFloodlightService> ignoreList) throws FloodlightModuleException {  logger.debug("Starting module loader");  if (logger.isDebugEnabled() && ignoreList != null)   logger.debug("Not loading module services " + ignoreList.toString());  findAllModules(configMods);  Collection<IFloodlightModule> moduleSet=new ArrayList<IFloodlightModule>();  Map<Class<? extends IFloodlightService>,IFloodlightModule> moduleMap=new HashMap<Class<? extends IFloodlightService>,IFloodlightModule>();  Queue<String> moduleQ=new LinkedList<String>();  moduleQ.addAll(configMods);  Set<String> modsVisited=new HashSet<String>();  while (!moduleQ.isEmpty()) {    String moduleName=moduleQ.remove();    if (modsVisited.contains(moduleName))     continue;    modsVisited.add(moduleName);    IFloodlightModule module=moduleNameMap.get(moduleName);    if (module == null) {      throw new FloodlightModuleException("Module " + moduleName + " not found");    }    if ((ignoreList != null) && (module.getModuleServices() != null)) {      for (      IFloodlightService ifs : ignoreList) {        for (        Class<?> intsIgnore : ifs.getClass().getInterfaces()) {          if (intsIgnore.isAssignableFrom(module.getClass())) {            logger.debug("Not loading module " + module.getClass().getCanonicalName() + " because interface "+ intsIgnore.getCanonicalName()+ " is in the ignore list.");            continue;          }        }      }    }    addModule(moduleMap,moduleSet,module);    Collection<Class<? extends IFloodlightService>> deps=module.getModuleDependencies();    if (deps != null) {      for (      Class<? extends IFloodlightService> c : deps) {        IFloodlightModule m=moduleMap.get(c);        if (m == null) {          Collection<IFloodlightModule> mods=serviceMap.get(c);          if ((mods == null) || (mods.size() == 0)) {            throw new FloodlightModuleException("ERROR! Could not " + "find an IFloodlightModule that provides service " + c.toString());          } else           if (mods.size() == 1) {            IFloodlightModule mod=mods.iterator().next();            if (!modsVisited.contains(mod.getClass().getCanonicalName()))             moduleQ.add(mod.getClass().getCanonicalName());          } else {            boolean found=false;            for (            IFloodlightModule moduleDep : mods) {              if (configMods.contains(moduleDep.getClass().getCanonicalName())) {                found=true;                break;              }            }            if (!found) {              String duplicateMods="";              for (              IFloodlightModule mod : mods) {                duplicateMods+=mod.getClass().getCanonicalName() + ", ";              }              throw new FloodlightModuleException("ERROR! Found more " + "than one (" + mods.size() + ") IFloodlightModules that provides "+ "service "+ c.toString()+ ". This service is required for "+ moduleName+ ". Please specify one of the following modules in the config: "+ duplicateMods);            }          }        }      }    }  }  floodlightModuleContext.addModules(moduleSet);  parseConfigParameters(prop);  initModules(moduleSet);  startupModules(moduleSet);  return floodlightModuleContext;}  }
class C{  public NewDeviceInteractionWorldAction(Workspace workspace){  super("Device Interaction World",workspace);  putValue(SHORT_DESCRIPTION,"New Keyboard World");  putValue(SMALL_ICON,ResourceManager.getImageIcon("Text.png"));}  }
class C{  public static String makeMarginTransform(double owidth,double oheight,double iwidth,double iheight,double lmargin,double tmargin,double rmargin,double bmargin){  double swidth=iwidth + lmargin + rmargin;  double sheight=iheight + tmargin + bmargin;  double scale=Math.max(swidth / owidth,sheight / oheight);  double offx=(scale * owidth - swidth) * .5 + lmargin;  double offy=(scale * oheight - sheight) * .5 + tmargin;  return "scale(" + fmt(1 / scale) + ") translate("+ fmt(offx)+ " "+ fmt(offy)+ ")";}  }
class C{  boolean hasConstantDescent(int row){  return ((baselineType[row] & (1 << Component.BaselineResizeBehavior.CONSTANT_DESCENT.ordinal())) != 0);}  }
class C{  public static BaggageImpl deserialize(ByteString byteRepr){  return create(ProtobufUtils.parse(byteRepr));}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public static Map<String,String[]> asMultiMap(SolrParams params,boolean newCopy){  if (params instanceof MultiMapSolrParams) {    Map<String,String[]> map=((MultiMapSolrParams)params).getMap();    if (newCopy) {      return new HashMap<>(map);    }    return map;  } else   if (params instanceof ModifiableSolrParams) {    Map<String,String[]> map=((ModifiableSolrParams)params).getMap();    if (newCopy) {      return new HashMap<>(map);    }    return map;  } else {    Map<String,String[]> map=new HashMap<>();    Iterator<String> iterator=params.getParameterNamesIterator();    while (iterator.hasNext()) {      String name=iterator.next();      map.put(name,params.getParams(name));    }    return map;  }}  }
class C{  private static String[] toStringArray(final Collection<?> collection){  if (collection == null) {    return null;  }  return collection.toArray(new String[collection.size()]);}  }
class C{  private void insertLocation(Location location){  if (trackData.tripStatisticsUpdater == null) {    trackData.tripStatisticsUpdater=new TripStatisticsUpdater(location.getTime() != -1L ? location.getTime() : trackData.importTime);  }  ActivityType activityType=CalorieUtils.getActivityType(context,category);  trackData.tripStatisticsUpdater.addLocation(location,recordingDistanceInterval,true,activityType,weight);  trackData.bufferedLocations[trackData.numBufferedLocations]=location;  trackData.numBufferedLocations++;  trackData.numberOfLocations++;  if (trackData.numBufferedLocations >= MAX_BUFFERED_LOCATIONS) {    flushLocations(trackData);  }}  }
class C{  public void doSetValue(PreparedStatement ps,int parameterPosition,Object argValue) throws SQLException {  StatementCreatorUtils.setParameterValue(ps,parameterPosition,SqlTypeValue.TYPE_UNKNOWN,argValue);}  }
class C{  @Override public boolean remove(Object object){  final int index=indexOf(object);  if (index >= 0) {    removeAt(index);    return true;  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.009 -0500",hash_original_method="FD3DD036A6C7DDF93DF974FBA106518E",hash_generated_method="490FBC8002396BC9A6D71F9C763F0C17") public static ZTauElement round(SimpleBigDecimal lambda0,SimpleBigDecimal lambda1,byte mu){  int scale=lambda0.getScale();  if (lambda1.getScale() != scale) {    throw new IllegalArgumentException("lambda0 and lambda1 do not " + "have same scale");  }  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger f0=lambda0.round();  BigInteger f1=lambda1.round();  SimpleBigDecimal eta0=lambda0.subtract(f0);  SimpleBigDecimal eta1=lambda1.subtract(f1);  SimpleBigDecimal eta=eta0.add(eta0);  if (mu == 1) {    eta=eta.add(eta1);  } else {    eta=eta.subtract(eta1);  }  SimpleBigDecimal threeEta1=eta1.add(eta1).add(eta1);  SimpleBigDecimal fourEta1=threeEta1.add(eta1);  SimpleBigDecimal check1;  SimpleBigDecimal check2;  if (mu == 1) {    check1=eta0.subtract(threeEta1);    check2=eta0.add(fourEta1);  } else {    check1=eta0.add(threeEta1);    check2=eta0.subtract(fourEta1);  }  byte h0=0;  byte h1=0;  if (eta.compareTo(ECConstants.ONE) >= 0) {    if (check1.compareTo(MINUS_ONE) < 0) {      h1=mu;    } else {      h0=1;    }  } else {    if (check2.compareTo(ECConstants.TWO) >= 0) {      h1=mu;    }  }  if (eta.compareTo(MINUS_ONE) < 0) {    if (check1.compareTo(ECConstants.ONE) >= 0) {      h1=(byte)-mu;    } else {      h0=-1;    }  } else {    if (check2.compareTo(MINUS_TWO) < 0) {      h1=(byte)-mu;    }  }  BigInteger q0=f0.add(BigInteger.valueOf(h0));  BigInteger q1=f1.add(BigInteger.valueOf(h1));  return new ZTauElement(q0,q1);}  }
class C{  public void testExclude() throws IOException {  CharArraySet exclusionSet=new CharArraySet(asSet("studenta"),false);  ;  Analyzer a=new PolishAnalyzer(PolishAnalyzer.getDefaultStopSet(),exclusionSet);  checkOneTerm(a,"studenta","studenta");  checkOneTerm(a,"studenci","student");  a.close();}  }
class C{  private static String cronSubexpression(long period,long phase){  if (period == 0) {    return Long.toString(phase);  } else   if (period == 1 && phase == 0) {    return "*";  } else {    return phase + "/" + period;  }}  }
class C{  private void doNonFailFastAlreadyExistsTest(GracePeriodStatus gracePeriodStatus) throws Exception {  persistContactsAndHosts();  persistResource(newDomainResource(getUniqueIdFromCommand()).asBuilder().addGracePeriod(GracePeriod.create(gracePeriodStatus,END_OF_TIME,"",null)).build());  thrown.expect(ResourceAlreadyExistsException.class,String.format("Object with given ID (%s) already exists",getUniqueIdFromCommand()));  try {    runFlow();  } catch (  ResourceAlreadyExistsException e) {    assertThat(e.isFailfast()).isFalse();    throw e;  }}  }
class C{  public void readConfiguration() throws IOException, SecurityException {  checkPermission();  String cname=System.getProperty("java.util.logging.config.class");  if (cname != null) {    try {      try {        Class<?> clz=ClassLoader.getSystemClassLoader().loadClass(cname);        clz.newInstance();        return;      } catch (      ClassNotFoundException ex) {        Class<?> clz=Thread.currentThread().getContextClassLoader().loadClass(cname);        clz.newInstance();        return;      }    } catch (    Exception ex) {      System.err.println("Logging configuration class \"" + cname + "\" failed");      System.err.println("" + ex);    }  }  String fname=System.getProperty("java.util.logging.config.file");  if (fname == null) {    fname=System.getProperty("java.home");    if (fname == null) {      throw new Error("Can't find java.home ??");    }    File f=new File(fname,"lib");    f=new File(f,"logging.properties");    fname=f.getCanonicalPath();  }  try (final InputStream in=new FileInputStream(fname)){    final BufferedInputStream bin=new BufferedInputStream(in);    readConfiguration(bin);  } }  }
class C{  @Override public void process(ServletContext servletContext,DocumentInfo[] documentInfos) throws Exception {  HashMap<String,List<String>> map=new HashMap<>();  for (int i=0; i < documentInfos.length; i++) {    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.log(Level.FINE,MessageFormat.format("Processing factory elements for document: ''{0}''",documentInfos[i].getSourceURI()));    }    Document document=documentInfos[i].getDocument();    String namespace=document.getDocumentElement().getNamespaceURI();    NodeList resourceLibraryContracts=document.getDocumentElement().getElementsByTagNameNS(namespace,RESOURCE_LIBRARY_CONTRACTS);    if (resourceLibraryContracts != null && resourceLibraryContracts.getLength() > 0) {      processResourceLibraryContracts(resourceLibraryContracts,map);    }  }  if (!map.isEmpty()) {    ApplicationAssociate associate=ApplicationAssociate.getCurrentInstance();    associate.setResourceLibraryContracts(map);  }  invokeNext(servletContext,documentInfos);}  }
class C{  private void checkScrollableParameters(Rectangle visibleRect,int orientation){  if (visibleRect == null) {    throw new IllegalArgumentException("visibleRect must be non-null");  }switch (orientation) {case SwingConstants.VERTICAL:case SwingConstants.HORIZONTAL:    break;default :  throw new IllegalArgumentException("orientation must be one of: VERTICAL, HORIZONTAL");}}  }
class C{  @SuppressWarnings("unchecked") public List<? extends TMember> createMemberListFromString(EDataType eDataType,String initialValue){  return (List<? extends TMember>)super.createFromString(initialValue);}  }
class C{  private static int globalErrorHandler(long display,long event_ptr){  if (noisyAwtHandler) {    XlibWrapper.PrintXErrorEvent(display,event_ptr);  }  XErrorEvent event=new XErrorEvent(event_ptr);  saved_error=event;  try {    if (current_error_handler != null) {      return current_error_handler.handleError(display,event);    } else {      return SAVED_XERROR_HANDLER(display,event);    }  } catch (  Throwable z) {    log.fine("Error in GlobalErrorHandler",z);  }  return 0;}  }
class C{  public Bag removeAllNodes(){  return clear();}  }
class C{  public void start(){  LOG.info("Starting NutchServer on port: {} with logging level: {} ...",port,logLevel);  try {    component.start();  } catch (  Exception e) {    throw new IllegalStateException("Cannot start server!",e);  }  LOG.info("Started NutchServer on port {}",port);  running=true;  started=System.currentTimeMillis();}  }
class C{  public void updateRowId(int columnIndex,RowId x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.opnotysupp").toString());}  }
class C{  public void clear(){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.clear();    } else {      mObjects.clear();    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  protected TransportUnitType(){}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  @Override public void onPageSelected(int position){}  }
class C{  protected void engineSetMode(String mode) throws NoSuchAlgorithmException {  if ((mode != null) && (!mode.equalsIgnoreCase("CBC"))) {    throw new NoSuchAlgorithmException("Invalid cipher mode: " + mode);  }}  }
class C{  public LengthFilterFactory(Map<String,String> args){  super(args);  min=requireInt(args,MIN_KEY);  max=requireInt(args,MAX_KEY);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public boolean isEditing(JTree a){  boolean returnValue=((TreeUI)(uis.elementAt(0))).isEditing(a);  for (int i=1; i < uis.size(); i++) {    ((TreeUI)(uis.elementAt(i))).isEditing(a);  }  return returnValue;}  }
class C{  private static void saveTrace(final TraceList trace){  try {    trace.save();  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);  }}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  public static <T>void checkReadOnly(Collection<T> coll){  int size=0;  for (Iterator<?> it=coll.iterator(); it.hasNext(); ) {    it.next();    size+=1;  }  if (size != coll.size()) {    throw new AssertionError("broken collection, reported size is " + coll.size() + " but iterator has "+ size+ " elements: "+ coll);  }  if (coll.isEmpty() == false) {    try {      coll.remove(coll.iterator().next());      throw new AssertionError("broken collection (supports remove): " + coll);    } catch (    UnsupportedOperationException e) {    }  }  try {    coll.add(null);    throw new AssertionError("broken collection (supports add): " + coll);  } catch (  UnsupportedOperationException e) {  }  try {    coll.addAll(Collections.singleton(null));    throw new AssertionError("broken collection (supports addAll): " + coll);  } catch (  UnsupportedOperationException e) {  }  checkIterator(coll.iterator());}  }
class C{  public void initiateSession(){  Log.i(TAG,"testInitiateSession");  try {    MultimediaMessagingSession session=sessionApi.initiateMessagingSession(serviceId,remote);  } catch (  RcsPermissionDeniedException e) {    Log.e(TAG,"Permission denied");  }catch (  RcsServiceNotAvailableException e) {    Log.e(TAG,"RCS service not available");  }catch (  RcsServiceNotRegisteredException e) {    Log.e(TAG,"RCS service not registered");  }catch (  RcsGenericException e) {    Log.e(TAG,"Unexpected error",e);  }}  }
class C{  public Shape paintLayer(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c,View view){  g.setColor(getColor());  if (offs0 == view.getStartOffset() && offs1 == view.getEndOffset()) {    Rectangle alloc;    if (bounds instanceof Rectangle)     alloc=(Rectangle)bounds; else     alloc=bounds.getBounds();    paintSquiggle(g,alloc);    return alloc;  }  try {    Shape shape=view.modelToView(offs0,Position.Bias.Forward,offs1,Position.Bias.Backward,bounds);    Rectangle r=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();    paintSquiggle(g,r);    return r;  } catch (  BadLocationException e) {    e.printStackTrace();  }  return null;}  }
class C{  public static int build_table(VLC vlc,int table_nb_bits,int nb_codes,VLCcode[] codes_base,int codes_offset,int flags){  int table_size, table_index, index, code_prefix, symbol, subtable_bits;  int i, k, n, nb, inc;  long j;  long code;  short[][] table_base;  int table_offset;  table_size=1 << table_nb_bits;  table_index=alloc_table(vlc,table_size,flags & INIT_VLC_USE_NEW_STATIC);  if (table_index < 0)   return -1;  table_base=vlc.table_base;  table_offset=vlc.table_offset + table_index;  for (i=0; i < table_size; i++) {    table_base[table_offset + i][1]=0;    table_base[table_offset + i][0]=-1;  }  for (i=0; i < nb_codes; i++) {    n=codes_base[codes_offset + i].bits;    code=codes_base[codes_offset + i].code;    symbol=codes_base[codes_offset + i].symbol;    if (n <= table_nb_bits) {      long tmp=code & 0xffffffffL;      j=(int)(tmp >> (32 - table_nb_bits));      nb=1 << (table_nb_bits - n);      inc=1;      if ((flags & INIT_VLC_LE) != 0) {        j=bitswap_32(code);        inc=1 << n;      }      for (k=0; k < nb; k++) {        if (table_base[(int)(table_offset + j)][1] != 0) {          return -1;        }        table_base[(int)(table_offset + j)][1]=(short)n;        table_base[(int)(table_offset + j)][0]=(short)symbol;        j+=inc;      }    } else {      n-=table_nb_bits;      long tmp=code & 0xffffffffL;      code_prefix=(int)(tmp >> (32 - table_nb_bits));      subtable_bits=n;      codes_base[codes_offset + i].bits=n;      codes_base[codes_offset + i].code=code << table_nb_bits;      for (k=i + 1; k < nb_codes; k++) {        n=codes_base[codes_offset + k].bits - table_nb_bits;        if (n <= 0)         break;        code=codes_base[codes_offset + k].code;        if (code >> (32 - table_nb_bits) != code_prefix)         break;        codes_base[codes_offset + k].bits=n;        codes_base[codes_offset + k].code=code << table_nb_bits;        subtable_bits=Math.max(subtable_bits,n);      }      subtable_bits=Math.min(subtable_bits,table_nb_bits);      j=((flags & INIT_VLC_LE) != 0) ? (bitswap_32(code_prefix) >> (32 - table_nb_bits)) : code_prefix;      table_base[(int)(table_offset + j)][1]=(short)-subtable_bits;      index=build_table(vlc,subtable_bits,k - i,codes_base,codes_offset + i,flags);      if (index < 0)       return -1;      table_base=vlc.table_base;      table_offset=vlc.table_offset + table_index;      table_base[(int)(table_offset + j)][0]=(short)index;      i=k - 1;    }  }  return table_index;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_SETTER__DEFINED_MEMBER:    setDefinedMember((TStructMember)null);  return;}super.eUnset(featureID);}  }
class C{  public void startPrefixMapping(String prefix,String namespaceURI) throws SAXException {  if (delayedPrefixes == null) {    delayedPrefixes=new HashMap<String,String>();  }  if ("".equals(prefix)) {    if (namespaceURI.equals(prefix)) {      return;    }    prefix=XMLConstants.XMLNS_ATTRIBUTE;  } else {    prefix=XMLConstants.XMLNS_ATTRIBUTE + ":" + prefix;  }  delayedPrefixes.put(prefix,namespaceURI);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void verifyJpsOutput(OutputAnalyzer output) throws Exception {  output.shouldHaveExitValue(0);  assertFalse(output.getOutput().isEmpty(),"Output should not be empty");  boolean foundFirstLineWithPid=false;  String[] lines=output.getOutput().split(Utils.NEW_LINE);  for (  String line : lines) {    if (!foundFirstLineWithPid) {      foundFirstLineWithPid=line.matches(JPS_OUTPUT_REGEX);      continue;    }    assertTrue(line.matches(JPS_OUTPUT_REGEX),"Output does not match the pattern" + Utils.NEW_LINE + line);  }  assertTrue(foundFirstLineWithPid,"Invalid output");}  }
class C{  public void handleCacheRemoval(Cache cache) throws ManagementException {  if (!isServiceInitialised("handleCacheRemoval")) {    return;  }  this.serviceInitialised=false;  try {    cleanUpMonitors();    cleanBridgeResources();  } catch (  Exception e) {    if (logger.isDebugEnabled()) {      logger.debug(e.getMessage(),e);    }  }  try {    service.close();  } catch (  Exception e) {    logger.warn(e.getMessage(),e);  } finally {    this.cacheImpl=null;    this.service=null;    this.memberMBeanBridge=null;    this.memberBean=null;    this.memberLevelNotifEmitter=null;  }}  }
class C{  public boolean isLessThan(Weeks other){  if (other == null) {    return getValue() < 0;  }  return getValue() < other.getValue();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String[][] convertToStringFrame(FrameBlock frame) throws DMLRuntimeException {  String[][] ret=new String[frame.getNumRows()][];  Iterator<String[]> iter=frame.getStringRowIterator();  for (int i=0; iter.hasNext(); i++) {    ret[i]=iter.next().clone();  }  return ret;}  }
class C{  void checkEndCode(){  if (endCode) {    throw new IllegalStateException("Cannot visit instructions after visitMaxs has been called.");  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:31.653 -0500",hash_original_method="D04D6AFFDB458F909DE8ED46FFEF9C7A",hash_generated_method="D0834FD3313D808174EE2101B60F5D91") public javax.sip.address.TelURL createTelURL(String uri) throws ParseException {  if (uri == null)   throw new NullPointerException("null url");  String telUrl="tel:" + uri;  try {    StringMsgParser smp=new StringMsgParser();    TelURLImpl timp=(TelURLImpl)smp.parseUrl(telUrl);    return (TelURL)timp;  } catch (  ParseException ex) {    throw new ParseException(ex.getMessage(),0);  }}  }
class C{  protected boolean considerImmutable(final Class<?> clz){  return false;}  }
class C{  private Node(ByteArray ba){  super();  if (ba == null) {    throw new IllegalArgumentException("ByteArray must not be null.");  }  this.ba=ba;}  }
class C{  public int encodePush(Push push,int j,ActionList actions){  int updatePos=encodeActionHeader(push);  do {    Object value=push.value;    int type=Push.getTypeCode(value);    writer.writeUI8(type);switch (type) {case 0:      writer.writeString(value.toString());    break;case 1:  int bits=Float.floatToIntBits(((Float)value).floatValue());writer.write32(bits);break;case 2:break;case 3:break;case 4:writer.writeUI8(((Byte)value).intValue() & 0xFF);break;case 5:writer.writeUI8(((Boolean)value).booleanValue() ? 1 : 0);break;case 6:double d=((Double)value).doubleValue();long num=Double.doubleToLongBits(d);writer.write32((int)(num >> 32));writer.write32((int)num);break;case 7:writer.write32(((Integer)value).intValue());break;case 8:writer.writeUI8(((Short)value).intValue());break;case 9:writer.writeUI16(((Short)value).intValue() & 0xFFFF);break;}if (debug == null) {while (j + 1 < actions.size() && actions.getAction(j + 1).code == ActionList.sactionLineRecord) j++;}Action a;if (++j < actions.size() && (a=actions.getAction(j)).code == ActionConstants.sactionPush) {push=(Push)a;} else {push=null;}} while (push != null);updateActionHeader(updatePos);return j - 1;}  }
class C{  public boolean isDurable(){  return durable;}  }
class C{  public boolean isSetData(){  return this.data != null;}  }
class C{  public boolean removeElement(Node s){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(s)) {      if (i < m_firstFree - 1)       System.arraycopy(m_map,i + 1,m_map,i,m_firstFree - i - 1);      m_firstFree--;      m_map[m_firstFree]=null;      return true;    }  }  return false;}  }
class C{  public StatementBuilder append(long x){  builder.append(x);  return this;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MCash[");  sb.append(get_ID()).append("-").append(getName()).append(", Balance=").append(getBeginningBalance()).append("->").append(getEndingBalance()).append("]");  return sb.toString();}  }
class C{  public static List<String> indexedList2protocolList(Collection<Object> iplist,int dimension){  List<String> a=new ArrayList<String>(dimension);  for (int i=0; i < dimension; i++)   a.add("http");  if (iplist == null)   return a;  for (  Object ip : iplist) {    String indexedProtocol=((String)ip);    int i=indexedProtocol.indexOf('-');    if (i > 0 && indexedProtocol.length() > (i + 1)) {      a.set(Integer.parseInt(indexedProtocol.substring(0,i)),indexedProtocol.substring(i + 1));    }  }  return a;}  }
class C{  boolean isInternal(){  return internal;}  }
class C{  public AbstractAST(Token t){  this.t=t;}  }
class C{  public static void scaleUp(IImageLineArray line){  if (line.getImageInfo().indexed || line.getImageInfo().bitDepth >= 8)   return;  final int[] scaleArray=DEPTH_UNPACK[line.getImageInfo().bitDepth];  if (line instanceof ImageLineInt) {    ImageLineInt iline=(ImageLineInt)line;    for (int i=0; i < iline.getSize(); i++)     iline.scanline[i]=scaleArray[iline.scanline[i]];  } else   if (line instanceof ImageLineByte) {    ImageLineByte iline=(ImageLineByte)line;    for (int i=0; i < iline.getSize(); i++)     iline.scanline[i]=(byte)scaleArray[iline.scanline[i]];  } else   throw new PngjException("not implemented");}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (newRecord && success)   return insert_Accounting("C_BankAccount_Acct","C_AcctSchema_Default",null);  return success;}  }
class C{  public void addDependency(int target,int from){  if (target == from && !allowDependencySame) {    throw new IllegalArgumentException("Dependency between same streams is not allowed for stream " + target);  }  SortedSet<Integer> toSet=dependencies.get(target);  if (toSet == null) {    toSet=new TreeSet<Integer>();    dependencies.put(target,toSet);  }  toSet.add(from);}  }
class C{  public FieldAnalysisRequest(){  super(METHOD.GET,"/analysis/field");}  }
class C{  public void updateOnlineStatusTextOnSwingThread(final StatusEnum finalStatusEnum){  this.statusEnum=finalStatusEnum;  String onlineStatus=controller.getLocaliser().getString(finalStatusEnum.getLocalisationKey());  if (finalStatusEnum == StatusEnum.ONLINE) {    onlineLabel.setForeground(new Color(0,100,0));    if (mainFrame != null) {      BlinkLabel estimatedBalanceBTCLabel=mainFrame.getEstimatedBalanceBTCLabel();      if (estimatedBalanceBTCLabel != null) {        estimatedBalanceBTCLabel.setBlinkEnabled(true);      }      BlinkLabel estimatedBalanceFiatLabel=mainFrame.getEstimatedBalanceFiatLabel();      if (estimatedBalanceFiatLabel != null) {        estimatedBalanceFiatLabel.setBlinkEnabled(true);      }    }  } else {    onlineLabel.setForeground(new Color(180,0,0));  }  onlineLabel.setText(onlineStatus);  if (finalStatusEnum == StatusEnum.ERROR) {    String toolTip=HelpContentsPanel.createMultilineTooltipText(new String[]{controller.getLocaliser().getString("multiBitFrame.statusBar.error1"),controller.getLocaliser().getString("multiBitFrame.statusBar.error2")});    onlineLabel.setToolTipText(toolTip);  }}  }
class C{  @Override protected final void onCreate(final Bundle savedInstanceState){  super.onCreate(savedInstanceState);  shoppingAssistantAPI=CloudEndpointBuilderHelper.getEndpoints();  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);  setContentView(R.layout.activity_single_place);  offersList=(ListView)findViewById(R.id.OffersList);  recommendationsList=(ListView)findViewById(R.id.RecommendationsList);  placesNameLabel=(TextView)findViewById(R.id.PlacesNameLabel);  offersListLabel=(TextView)findViewById(R.id.OffersListLabel);  recommendationsListLabel=(TextView)findViewById(R.id.RecommendationListLabel);  placesNameLabel.setText(currentPlace.getName());  retrieveOffers();  retrieveRecommendations();}  }
class C{  public final void testRemoveAllConstraints(){  Constraint<CharSequence> constraint1=Constraints.containsNumber();  Constraint<CharSequence> constraint2=Constraints.containsLetter();  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addConstraint(constraint1);  passwordEditText.addConstraint(constraint2);  passwordEditText.removeAllConstraints();  passwordEditText.removeAllConstraints();  assertTrue(passwordEditText.getConstraints().isEmpty());}  }
class C{  String localizeException(Marketplace marketplace,PlatformUser executingUser,SaaSApplicationException e){  String text=serviceFacade.getLocalizerService().getLocalizedTextFromBundle(LocalizedObjectTypes.EXCEPTION_PROPERTIES,marketplace,executingUser.getLocale(),e.getMessageKey());  return formatMessage(text,e,executingUser.getLocale());}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  OnMenuItemClickListener menuItemClickListener=new Listener(this);  if (Listener.logging) {    getMenuInflater().inflate(R.menu.activity_connections_logging,menu);    menu.findItem(R.id.endLogging).setOnMenuItemClickListener(menuItemClickListener);  } else {    getMenuInflater().inflate(R.menu.activity_connections,menu);    menu.findItem(R.id.startLogging).setOnMenuItemClickListener(menuItemClickListener);  }  menu.findItem(R.id.newConnection).setOnMenuItemClickListener(menuItemClickListener);  return true;}  }
class C{  public static void readSkelFile(File skeletonFile){  if (skeletonFile == null)   throw new IllegalArgumentException("Skeleton file must not be null");  if (!skeletonFile.isFile() || !skeletonFile.canRead()) {    Out.error(ErrorMessages.CANNOT_READ_SKEL,skeletonFile.toString());    throw new GeneratorException();  }  Out.println(ErrorMessages.READING_SKEL,skeletonFile.toString());  try {    BufferedReader reader=new BufferedReader(new FileReader(skeletonFile));    readSkel(reader);  } catch (  IOException e) {    Out.error(ErrorMessages.SKEL_IO_ERROR);    throw new GeneratorException();  }}  }
class C{  @Override public void configureContentProposalLabelProvider(com.google.inject.Binder binder){  binder.bind(org.eclipse.jface.viewers.ILabelProvider.class).annotatedWith(org.eclipse.xtext.ui.editor.contentassist.ContentProposalLabelProvider.class).to(N4JSContentAssistLabelProvider.class);}  }
class C{  private double[] normalizedObjectives(Solution solution){  double[] objectiveValues=new double[problem.getNumberOfObjectives()];  for (int j=0; j < problem.getNumberOfObjectives(); j++) {    objectiveValues[j]=(solution.getObjective(j) - idealPoint[j]) / (intercepts[j] - idealPoint[j]);  }  return objectiveValues;}  }
class C{  public XMLAttributeList addOptionalAttribute(@Nonnull String name,@CheckForNull String value){  if (value == null) {    return this;  }  return addAttribute(name,value);}  }
class C{  private void buildTableHelper(String fileName){  PennTreebankPOSReader reader=new PennTreebankPOSReader(this.corpusName);  reader.readFile(fileName);  List<TextAnnotation> tas=reader.getTextAnnotations();  for (  TextAnnotation ta : tas) {    for (int tokenId=0; tokenId < ta.size(); tokenId++) {      count(ta.getToken(tokenId),((SpanLabelView)ta.getView(ViewNames.POS)).getLabel(tokenId));    }  }}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || getClass() != o.getClass()) {    return false;  }  if (!super.equals(o)) {    return false;  }  final MkCoPDirectoryEntry that=(MkCoPDirectoryEntry)o;  return !(conservativeApproximation != null ? !conservativeApproximation.equals(that.conservativeApproximation) : that.conservativeApproximation != null);}  }
class C{  protected static void succeed(){  System.exit(0);}  }
class C{  private static ContentValues httpResponseToCV(HttpResponse httpResponse){  if (httpResponse == null || StringUtils.isEmpty(httpResponse.getUrl())) {    return null;  }  ContentValues values=new ContentValues();  values.put(DbConstants.HTTP_CACHE_TABLE_URL,httpResponse.getUrl());  values.put(DbConstants.HTTP_CACHE_TABLE_RESPONSE,httpResponse.getResponseBody());  values.put(DbConstants.HTTP_CACHE_TABLE_EXPIRES,httpResponse.getExpiredTime());  values.put(DbConstants.HTTP_CACHE_TABLE_CREATE_TIME,TimeUtils.getCurrentTimeInString());  values.put(DbConstants.HTTP_CACHE_TABLE_TYPE,httpResponse.getType());  return values;}  }
class C{  private static void testNetwork(String pathToOutputFile){  NetworkReaderMatsimV1 networkReader=new NetworkReaderMatsimV1(NetworkUtils.createNetwork());  networkReader.readFile(pathToOutputFile);}  }
class C{  public static boolean contentEquals(InputStream input1,InputStream input2) throws IOException {  if (!(input1 instanceof BufferedInputStream)) {    input1=new BufferedInputStream(input1);  }  if (!(input2 instanceof BufferedInputStream)) {    input2=new BufferedInputStream(input2);  }  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public void logFilePaths(){  log.info("File path {} is {}",FileUtil.PROGRAM,this.getProgramPath());  log.info("File path {} is {}",FileUtil.PREFERENCES,this.getUserFilesPath());  log.info("File path {} is {}",FileUtil.PROFILE,this.getProfilePath());  log.info("File path {} is {}",FileUtil.SETTINGS,this.getPreferencesPath());  log.info("File path {} is {}",FileUtil.HOME,this.getHomePath());  log.info("File path {} is {}",FileUtil.SCRIPTS,this.getScriptsPath());}  }
class C{  public boolean containsKey(long key){  return indexOfKey(key) >= 0;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (spread: ");  result.append(spread);  result.append(')');  return result.toString();}  }
class C{  public static RefreshTokenCredentials create(OauthClient oauthConfig,String refreshTokenSecret,String tokenExchangeUrl){  RefreshRequestFactory requestFactory=new RefreshRequestFactory();  Clock clock=Clock.systemDefaultZone();  return new RefreshTokenCredentials(requestFactory,refreshTokenSecret,tokenExchangeUrl,oauthConfig,clock);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public boolean onTouchEvent(MotionEvent ev){  boolean hasChildren=(mSv.getChildCount() > 0);  if (!hasChildren) {    return false;  }  if (mInterceptedBySwipeHelper && mSwipeHelper.onTouchEvent(ev)) {    return true;  }  initVelocityTrackerIfNotExists();  int action=ev.getAction();switch (action & MotionEvent.ACTION_MASK) {case MotionEvent.ACTION_DOWN:{      mInitialMotionX=mLastMotionX=(int)ev.getX();      mInitialMotionY=mLastMotionY=(int)ev.getY();      mInitialP=mLastP=mSv.mLayoutAlgorithm.screenYToCurveProgress(mLastMotionY);      mActivePointerId=ev.getPointerId(0);      mActiveTaskView=findViewAtPoint(mLastMotionX,mLastMotionY);      mScroller.stopScroller();      mScroller.stopBoundScrollAnimation();      initOrResetVelocityTracker();      mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));      final ViewParent parent=mSv.getParent();      if (parent != null) {        parent.requestDisallowInterceptTouchEvent(true);      }      break;    }case MotionEvent.ACTION_POINTER_DOWN:{    final int index=ev.getActionIndex();    mActivePointerId=ev.getPointerId(index);    mLastMotionX=(int)ev.getX(index);    mLastMotionY=(int)ev.getY(index);    mLastP=mSv.mLayoutAlgorithm.screenYToCurveProgress(mLastMotionY);    break;  }case MotionEvent.ACTION_MOVE:{  if (mActivePointerId == INACTIVE_POINTER_ID)   break;  int activePointerIndex=ev.findPointerIndex(mActivePointerId);  int x=(int)ev.getX(activePointerIndex);  int y=(int)ev.getY(activePointerIndex);  int yTotal=Math.abs(y - mInitialMotionY);  float curP=mSv.mLayoutAlgorithm.screenYToCurveProgress(y);  float deltaP=mLastP - curP;  if (!mIsScrolling) {    if (yTotal > mScrollTouchSlop) {      mIsScrolling=true;      initOrResetVelocityTracker();      mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));      final ViewParent parent=mSv.getParent();      if (parent != null) {        parent.requestDisallowInterceptTouchEvent(true);      }    }  }  if (mIsScrolling) {    float curStackScroll=mScroller.getStackScroll();    float overScrollAmount=mScroller.getScrollAmountOutOfBounds(curStackScroll + deltaP);    if (Float.compare(overScrollAmount,0f) != 0) {      float maxOverScroll=mConfig.taskStackOverscrollPct;      deltaP*=(1f - (Math.min(maxOverScroll,overScrollAmount) / maxOverScroll));    }    mScroller.setStackScroll(curStackScroll + deltaP);    if (mScroller.isScrollOutOfBounds()) {      mVelocityTracker.clear();    } else {      mVelocityTracker.addMovement(createMotionEventForStackScroll(ev));    }  }  mLastMotionX=x;  mLastMotionY=y;  mLastP=mSv.mLayoutAlgorithm.screenYToCurveProgress(mLastMotionY);  mTotalPMotion+=Math.abs(deltaP);  break;}case MotionEvent.ACTION_UP:{final VelocityTracker velocityTracker=mVelocityTracker;velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);int velocity=(int)velocityTracker.getYVelocity(mActivePointerId);if (mIsScrolling && (Math.abs(velocity) > mMinimumVelocity)) {  int overscrollRange=(int)(Math.min(1f,Math.abs((float)velocity / mMaximumVelocity)) * TaskStackOverscrollRange);  mScroller.mScroller.fling(0,mScroller.progressToScrollRange(mScroller.getStackScroll()),0,velocity,0,0,mScroller.progressToScrollRange(mSv.mLayoutAlgorithm.mMinScrollP),mScroller.progressToScrollRange(mSv.mLayoutAlgorithm.mMaxScrollP),0,overscrollRange);  mSv.invalidate();} else if (mScroller.isScrollOutOfBounds()) {  mScroller.animateBoundScroll();}mActivePointerId=INACTIVE_POINTER_ID;mIsScrolling=false;mTotalPMotion=0;recycleVelocityTracker();break;}case MotionEvent.ACTION_POINTER_UP:{int pointerIndex=ev.getActionIndex();int pointerId=ev.getPointerId(pointerIndex);if (pointerId == mActivePointerId) {final int newPointerIndex=(pointerIndex == 0) ? 1 : 0;mActivePointerId=ev.getPointerId(newPointerIndex);mLastMotionX=(int)ev.getX(newPointerIndex);mLastMotionY=(int)ev.getY(newPointerIndex);mLastP=mSv.mLayoutAlgorithm.screenYToCurveProgress(mLastMotionY);mVelocityTracker.clear();}break;}case MotionEvent.ACTION_CANCEL:{if (mScroller.isScrollOutOfBounds()) {mScroller.animateBoundScroll();}mActivePointerId=INACTIVE_POINTER_ID;mIsScrolling=false;mTotalPMotion=0;recycleVelocityTracker();break;}}return true;}  }
class C{  private boolean isInputBalanced(){  Stack<Character> stack=new Stack<>();  int length=input.length();  for (int i=0; i < length; i++) {    char currentChar=input.charAt(i);    if (currentChar == BRACE_START) {      stack.push(currentChar);    } else     if (currentChar == BRACE_END) {      if (stack.empty())       return false;      if (stack.pop() != BRACE_START)       return false;    }  }  return stack.empty();}  }
class C{  public static int min(int a,final int b,final int c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  public void removeActionListener(ActionListener l){  actionListeners.removeListener(l);}  }
class C{  protected void removeImport(Element imp){  ImportRecord ir=(ImportRecord)imports.get(imp);  NodeEventTarget et=(NodeEventTarget)ir.node;  et.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",ir.importInsertedListener,false);  et.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",ir.importRemovedListener,false);  et.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",ir.importSubtreeListener,false);  et=(NodeEventTarget)imp;  et.removeEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",importAttrListener,false);  Object[] defRecs=definitions.getValuesArray();  for (int i=0; i < defRecs.length; i++) {    DefinitionRecord defRec=(DefinitionRecord)defRecs[i];    if (defRec.importElement == imp) {      removeDefinition(defRec);    }  }  imports.remove(imp);}  }
class C{  public AllowEventsHeader createAllowEventsHeader(String eventType) throws ParseException {  if (eventType == null)   throw new NullPointerException("null arg eventType");  AllowEvents allowEvents=new AllowEvents();  allowEvents.setEventType(eventType);  return allowEvents;}  }
class C{  private void readIndexPage() throws Exception {  List<String> deployableTypes=new ArrayList<String>();  deployableTypes.add(DeployableType.AOP.toString());  deployableTypes.add(DeployableType.BUNDLE.toString());  deployableTypes.add(DeployableType.EAR.toString());  deployableTypes.add(DeployableType.EJB.toString());  deployableTypes.add(DeployableType.FILE.toString());  deployableTypes.add(DeployableType.HAR.toString());  deployableTypes.add(DeployableType.RAR.toString());  deployableTypes.add(DeployableType.SAR.toString());  deployableTypes.add(DeployableType.WAR.toString());  Map<String,String> replacements=new HashMap<String,String>();  replacements.put("daemonVersion",Uberjar.class.getPackage().getImplementationVersion());  replacements.put("containerIds",JSONArray.toJSONString(new ArrayList<String>(new TreeSet<String>(CONTAINER_FACTORY.getContainerIds().keySet()))));  replacements.put("deployableTypes",JSONArray.toJSONString(deployableTypes));  replacements.put("handles",JSONValue.toJSONString(getHandleDetails()));  StringBuilder indexPageBuilder=new StringBuilder();  BufferedReader reader=new BufferedReader(new InputStreamReader(this.getServletContext().getResourceAsStream("/index.html"),"UTF-8"));  try {    for (String line=reader.readLine(); line != null; line=reader.readLine()) {      for (      Map.Entry<String,String> replacement : replacements.entrySet()) {        line=line.replace('@' + replacement.getKey() + '@',replacement.getValue());      }      indexPageBuilder.append(line);      indexPageBuilder.append("\r\n");    }  }  finally {    reader.close();    reader=null;    System.gc();  }  this.indexPage=indexPageBuilder.toString();}  }
class C{  public Minimum(){  super("statistical.min",FunctionDescription.UNFIXED_NUMBER_OF_ARGUMENTS,Ontology.NUMERICAL);}  }
class C{  private CarbonIterator<BatchRawResult> executeBlockList(List<TableBlockInfo> blockList) throws QueryExecutionException {  queryModel.setTableBlockInfos(blockList);  this.queryExecutor=QueryExecutorFactory.getQueryExecutor(queryModel);  CarbonIterator<BatchRawResult> iter=null;  try {    iter=queryExecutor.execute(queryModel);  } catch (  QueryExecutionException e) {    LOGGER.error(e.getMessage());    throw e;  }  return iter;}  }
class C{  public void registerReplacedMetaClass(MetaClass metaClass){  replacedMetaClasses.put(metaClass.getJavaClass(),metaClass);}  }
class C{  private void findNearVertex(Coordinate[] targetPts,int index,LineString testLine){  Coordinate targetPt=targetPts[index];  Coordinate[] testPts=testLine.getCoordinates();  int n=geomPointsLen(testPts);  for (int i=0; i < n; i++) {    Coordinate testPt=testPts[i];    StretchedVertex stretchVert=null;    double dist=testPt.distance(targetPt);    if (dist <= tolerance && dist != 0.0) {      stretchVert=new StretchedVertex(targetPt,targetPts,index,testPt,testPts,i);    } else     if (i < testPts.length - 1) {      Coordinate segEndPt=testPts[i + 1];      double distToOther=segEndPt.distance(targetPt);      if (distToOther <= tolerance)       continue;      if (isPointNearButNotOnSeg(targetPt,testPt,segEndPt,tolerance)) {        stretchVert=new StretchedVertex(targetPt,targetPts,i,new LineSegment(testPt,testPts[i + 1]));      }    }    if (stretchVert != null)     nearVerts.add(stretchVert);  }}  }
class C{  public static void marginBottom(Node no,double bottom){  AnchorPane.setBottomAnchor(no,bottom);}  }
class C{  private boolean checkForThreadAlive(String contains){  for (  Thread t : getAllThreads()) {    if (t.isAlive() && getThreadName(t).contains(contains)) {      return true;    }  }  return false;}  }
class C{  public static void eachByte(URL url,@ClosureParams(value=SimpleType.class,options="byte") Closure closure) throws IOException {  InputStream is=url.openConnection().getInputStream();  IOGroovyMethods.eachByte(is,closure);}  }
class C{  public SQLTimeoutException(String reason){  super(reason,null,0);}  }
class C{  public void clear(){  m_openrows=null;  m_firstid=0;  m_curid=-1;}  }
class C{  @Override public DriverTask expandVolume(StorageVolume storageVolume,long newCapacity){  LOG.info("Expanding volume {} to {}",storageVolume.getNativeId(),newCapacity);  return provisioningHelper.expandVolume(storageVolume,newCapacity);}  }
class C{  public BindingLabelProvider(){  this(DEFAULT_TEXTFLAGS,DEFAULT_IMAGEFLAGS);}  }
class C{  public void exportKeystore() throws Exception {  KeyStoreExporter exporter=(KeyStoreExporter)ctx.getBean("keystoreExporter");  exporter.export();}  }
class C{  void pushBack(){  for (int i=array.length - 1; i > 0; i--) {    if (array[i - 1] != null) {      array[i]=null;      array[i]=array[i - 1];    }  }  array[0]=null;}  }
class C{  public Viewer(String host,int p){  server=host;  port=p;}  }
class C{  private static String tableReferenceToString(TableReference tableRef){  return String.format("%s:%s.%s",tableRef.getProjectId(),tableRef.getDatasetId(),tableRef.getTableId());}  }
class C{  public TrayManager(){  name=Constants.ABOUT_TITLE + " " + Constants.VERSION;  prefs=new PropertyHelper(SystemUtilities.getDataDirectory() + File.separator + Constants.PREFS_FILE+ ".properties");  shortcutCreator=DeployUtilities.getSystemShortcutCreator();  shortcutCreator.setShortcutName(Constants.ABOUT_TITLE);  SystemUtilities.setSystemLookAndFeel();  if (SystemTray.isSupported()) {    Image blank=new ImageIcon(new byte[1]).getImage();    if (SystemUtilities.isWindows()) {      tray=new JXTrayIcon(blank);    } else     if (SystemUtilities.isMac()) {      tray=new ClassicTrayIcon(blank);    } else {      tray=new ModernTrayIcon(blank);    }    iconCache=new IconCache();    tray.setImage(iconCache.getImage(IconCache.Icon.DANGER_ICON,tray.getSize()));    tray.setToolTip(name);    try {      SystemTray.getSystemTray().add(tray);    } catch (    AWTException awt) {      log.error("Could not attach tray",awt);    }  } else {    iconCache=new IconCache();  }  if (SystemUtilities.isLinux()) {    UbuntuUtilities.fixTrayIcons(iconCache);    LinuxCertificate.installCertificate();  } else   if (SystemUtilities.isWindows()) {    WindowsDeploy.configureIntranetZone();    WindowsDeploy.configureEdgeLoopback();  }  gatewayDialog=new GatewayDialog(null,"Action Required",iconCache);  confirmDialog=new ConfirmDialog(null,"Please Confirm",iconCache);  addMenuItems();}  }
class C{  public static boolean matches(String actualDimensionSymbols,String requiredDimensionSymbols){  IntersectionMatrix m=new IntersectionMatrix(actualDimensionSymbols);  return m.matches(requiredDimensionSymbols);}  }
class C{  @Override public void run(int connId,String[] args){  int kickArg=server.isPassworded() ? 2 : 1;  if (!canRunRestrictedCommand(connId)) {    server.sendServerChat(connId,"Observers are restricted from kicking others.");    return;  }  if (server.isPassworded() && (args.length < 3 || !server.isPassword(args[1]))) {    server.sendServerChat(connId,"The password is incorrect.  Usage: /kick <password> [id#]");  } else   try {    int kickedId=Integer.parseInt(args[kickArg]);    if (kickedId == connId) {      server.sendServerChat("Don't be silly.");      return;    }    server.sendServerChat(server.getPlayer(connId).getName() + " attempts to kick player #" + kickedId+ " ("+ server.getPlayer(kickedId).getName()+ ")...");    server.send(kickedId,new Packet(Packet.COMMAND_CLOSE_CONNECTION));    server.getConnection(kickedId).close();  } catch (  ArrayIndexOutOfBoundsException ex) {    server.sendServerChat("/kick : kick failed.  Type /who for a list of players with id #s.");  }catch (  NumberFormatException ex) {    server.sendServerChat("/kick : kick failed.  Type /who for a list of players with id #s.");  }catch (  NullPointerException ex) {    server.sendServerChat("/kick : kick failed.  Type /who for a list of players with id #s.");  }}  }
class C{  public static boolean isEmpty(String value){  return (value == null || value.trim().length() == 0);}  }
class C{  public ProcessOutput runProcess(int timeoutInMilliseconds){  return runProcess(timeoutInMilliseconds,true);}  }
class C{  @Override public void resetCursor(){  iterator=wordFrequencyMap.keySet().iterator();}  }
class C{  public void createDna(ArrayList<Event> unsortedEvents){  if (unsortedEvents == null || mWidth <= MIN_WEEK_WIDTH || getContext() == null) {    mUnsortedEvents=unsortedEvents;    mDna=null;    return;  } else {    mUnsortedEvents=null;  }  if (!mShowDetailsInMonth) {    int numDays=mEvents.size();    int effectiveWidth=mWidth - mPadding * 2;    DNA_ALL_DAY_WIDTH=effectiveWidth / numDays - 2 * DNA_SIDE_PADDING;    mDNAAllDayPaint.setStrokeWidth(DNA_ALL_DAY_WIDTH);    mDayXs=new int[numDays];    for (int day=0; day < numDays; day++) {      mDayXs[day]=computeDayLeftPosition(day) + DNA_WIDTH / 2 + DNA_SIDE_PADDING;    }    int top=DAY_SEPARATOR_INNER_WIDTH + DNA_MARGIN + DNA_ALL_DAY_HEIGHT+ 1;    int bottom=mHeight - DNA_MARGIN;    mDna=Utils.createDNAStrands(mFirstJulianDay,unsortedEvents,top,bottom,DNA_MIN_SEGMENT_HEIGHT,mDayXs,getContext());  }}  }
class C{  @Override public void transactionPrepare(){  notifyRemoves();  for (  BigdataGraphListener listener : listeners) {    listener.transactionPrepare();  }}  }
class C{  private static void checkControl(final Control control){  if (!(control instanceof Text) && !(control instanceof Combo) && !(control instanceof StyledText)&& !(control instanceof CCombo)) {    throw new IllegalArgumentException("PromptSupport can only be used on a Text, a Combo, a StyledText or a CCombo widget.");  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterInfo);}  }
class C{  public static void closeStreams(Process self){  try {    self.getErrorStream().close();  } catch (  IOException ignore) {  }  try {    self.getInputStream().close();  } catch (  IOException ignore) {  }  try {    self.getOutputStream().close();  } catch (  IOException ignore) {  }}  }
class C{  Header(DNSInput in) throws IOException {  this(in.readU16());  flags=in.readU16();  for (int i=0; i < counts.length; i++)   counts[i]=in.readU16();}  }
class C{  public ToHitData toHit(IGame game,MovePath md){  final Entity ae=game.getEntity(getEntityId());  final Targetable target=getTarget(game);  Coords ramSrc=ae.getPosition();  int ramEl=ae.getElevation();  Coords priorSrc=md.getSecondFinalPosition(ae.getPosition());  MoveStep ramStep=null;  if (!md.contains(MoveStepType.RAM)) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Ram action not found in movement path");  }  md.compile(game,ae);  for (final Enumeration<MoveStep> i=md.getSteps(); i.hasMoreElements(); ) {    final MoveStep step=i.nextElement();    if (step.getMovementType(md.isEndStep(step)) == EntityMovementType.MOVE_ILLEGAL) {      break;    }    if (step.getType() == MoveStepType.RAM) {      ramStep=step;      ramSrc=step.getPosition();      ramEl=step.getElevation();    }  }  if (ramStep == null || !target.getPosition().equals(ramStep.getPosition())) {    return new ToHitData(TargetRoll.IMPOSSIBLE,"Could not reach target with movement");  }  return toHit(game,target,ramSrc,ramEl,priorSrc,ramStep.getMovementType(true));}  }
class C{  @Override public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  static int maxElement(int[] vals,int left,int right){  if (right - left == 1) {    return vals[left];  }  int mid=(left + right) / 2;  int max1=maxElement(vals,left,mid);  int max2=maxElement(vals,mid,right);  if (max1 > max2) {    return max1;  }  return max2;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  public static Bitmap createWatermarkBitmap(Bitmap src,Bitmap watermark){  if (src == null) {    return null;  }  int w=src.getWidth();  int h=src.getHeight();  int ww=watermark.getWidth();  int wh=watermark.getHeight();  Bitmap newb=Bitmap.createBitmap(w,h,Bitmap.Config.ARGB_8888);  Canvas cv=new Canvas(newb);  cv.drawBitmap(src,0,0,null);  cv.drawBitmap(watermark,w - ww + 5,h - wh + 5,null);  cv.save(Canvas.ALL_SAVE_FLAG);  cv.restore();  return newb;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() == ']') {    return;  }  x.back();  for (; ; ) {    if (x.nextClean() == ',') {      x.back();      this.myArrayList.add(null);    } else {      x.back();      this.myArrayList.add(x.nextValue());    }switch (x.nextClean()) {case ';':case ',':      if (x.nextClean() == ']') {        return;      }    x.back();  break;case ']':return;default :throw x.syntaxError("Expected a ',' or ']'");}}}  }
class C{  public void copyTrace(EObject fromElementInIntermediateModel,EObject... toElementInIntermediateModel){  EObject originalASTNode=im2ast.get(fromElementInIntermediateModel);  if (originalASTNode == null)   return;  for (  EObject elemInIM : toElementInIntermediateModel)   setOriginalASTNode_internal(elemInIM,originalASTNode);}  }
class C{  public void onPause(boolean multitasking){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onPause(multitasking);    }  }}  }
class C{  AnnotationWrapper(){  _custom=new HashMap<>();}  }
class C{  public Pool(Types types){  this(1,new Object[64],types);}  }
class C{  public static GdbFile parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_FILE.matcher(output);  if (matcher.find()) {    String file=matcher.group(1);    return new GdbFile(file);  }  throw new GdbParseException(GdbFile.class,output);}  }
class C{  public static void trace(String method,String fileName,Object o){  if (SysProperties.TRACE_IO) {    System.out.println("IOUtils." + method + " "+ fileName+ " "+ o);  }}  }
class C{  public void downloadImageToFileSystem(String file,SuccessCallback<Image> onSuccess){  downloadImageToFileSystem(file,onSuccess,new CallbackAdapter<Image>(),true);}  }
class C{  public Vector3f div(Vector3fc v){  x/=v.x();  y/=v.y();  z/=v.z();  return this;}  }
class C{  public Amount(final long amount){  super(amount,Amount.class);  if (amount < 0) {    throw new NegativeBalanceException(amount);  }}  }
class C{  @Override public void endPrefixMapping(String alias){  namespaceMap.get(alias).pop();}  }
class C{  public JAMonBufferListener(String name){  this(name,new BufferList(DEFAULT_HEADER,50));}  }
class C{  public static void closeCacheServer(){  if (cacheServer != null && !cacheServer.isClosed()) {    cacheServer.close();    cacheServer.getDistributedSystem().disconnect();  }}  }
class C{  public void toggleTitle(){  if (mImageTitle.getVisibility() == View.INVISIBLE) {    mImageTitle.setVisibility(View.VISIBLE);  } else {    mImageTitle.setVisibility(View.INVISIBLE);  }}  }
class C{  public void updateButtonActionPerformed(){  if (!checkConsistency()) {    return;  }  setNodeParameters();  changedNode=true;  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);  try {    statusText1.setText(Bundle.getMessage("FeedBackUpdate") + " " + readNodeAddress());  } catch (  IllegalArgumentException iae) {  }  errorInStatus1=true;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  NodeList elementList;  String attrName;  String attrValue;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(0);  element.setAttributeNS("http://www.w3.org/DOM/Test/setAttributeNS","this:street","Silver Street");  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/setAttributeNS","street");  attrName=attribute.getNodeName();  attrValue=attribute.getNodeValue();  assertEquals("elementsetattributens02_attrName","this:street",attrName);  assertEquals("elementsetattributens02_attrValue","Silver Street",attrValue);}  }
class C{  public boolean isBound(){  if ((bindingTimeStamp == -1) || (bindingTimeStamp + PERMISSION_LIFETIME - PERMISSION_LIFETIME_LEEWAY) < System.currentTimeMillis())   return false;  return (bindingTransactionID == null) && bound;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return (a == null) ? new Integer(1) : new Integer(Math.max(1,a.getTotalParts()));}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  void pushNewNamespaceSupport(){  m_nsSupportStack.push(new NamespaceSupport2());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:49.492 -0500",hash_original_method="8B9CD4355F65A61EBC08146A51CEAFC7",hash_generated_method="FCC3DA8CF69F39629A5B563BBF09E59A") public synchronized String generateCallIdentifier(String address){  String date=Long.toString(System.currentTimeMillis() + callIDCounter++ + rand.nextLong());  byte cid[]=digester.digest(date.getBytes());  String cidString=Utils.toHexString(cid);  return cidString + "@" + address;}  }
class C{  public void addElement(RatTerm t){  underlying_terms.add(t);  terms=(RatTerm[])underlying_terms.toArray(new RatTerm[]{});}  }
class C{  private CertificateVerify(SignatureAndHashAlgorithm signatureAndHashAlgorithm,byte[] signatureBytes,InetSocketAddress peerAddress){  this(signatureAndHashAlgorithm,peerAddress);  this.signatureBytes=Arrays.copyOf(signatureBytes,signatureBytes.length);}  }
class C{  public FrInstruction(FrInstructionSet.InstructionFormat instructionFormat,int numberExtraXWords,int numberExtraYWords,String name,String displayFormat,String action,FlowType flowType,boolean isConditional,boolean hasDelaySlot,SimulationCode simulationCode){  super(name,displayFormat,null,null,action,flowType,isConditional,hasDelaySlot ? DelaySlotType.NORMAL : DelaySlotType.NONE,simulationCode);  this.instructionFormat=instructionFormat;  this.numberExtraXWords=numberExtraXWords;  this.numberExtraYWords=numberExtraYWords;}  }
class C{  public double normF(){  double f=0;  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      f=Math.hypot(f,A[i][j]);    }  }  return f;}  }
class C{  public ActionListener(Context context,Action action,String clientHandle,String... additionalArgs){  this.context=context;  this.action=action;  this.clientHandle=clientHandle;  this.additionalArgs=additionalArgs;}  }
class C{  protected String mapKeyCodeToIdentifier(int keyCode){  String[] a=IDENTIFIER_KEY_CODES[keyCode / 256];  if (a == null) {    return DOMKeyboardEvent.KEY_UNIDENTIFIED;  }  return a[keyCode % 256];}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public boolean rightClick(OMGraphic omg,MouseEvent me){  if (DEBUG) {    Debug.output("rightClick(" + omg.getClass().getName() + ") at "+ me.getX()+ ", "+ me.getY());  }  if (grp != null) {    return displayPopup(grp.getItemsForOMGraphicMenu(omg),me);  }  return false;}  }
class C{  public boolean isLoggable(Level level){  throw new RuntimeException();}  }
class C{  public static Length fromCode(int code){switch (code) {case 1:    return BYTES_512;case 2:  return BYTES_1024;case 3:return BYTES_2048;case 4:return BYTES_4096;default :return null;}}  }
class C{  public void stop(){  log.info("Stopping coordinator stream system consumer.");  systemConsumer.stop();  isStarted=false;}  }
class C{  public boolean hasProvider(Class<?> dtoInterface){  return dtoInterface2Providers.get(dtoInterface) != null;}  }
class C{  @Override public void close(){}  }
class C{  private void initializeRegisterInformation(final RegisterInformation[] passedRegisters){  for (int i=0; i < passedRegisters.length; i++) {    final RegisterInformation register=passedRegisters[i];    Preconditions.checkNotNull(register.getRegisterName(),"Error: register.getRegisterName() argument can not be null");    Preconditions.checkArgument(registerMap.containsKey(register.getRegisterName()),"Error: Duplicate register name " + register.getRegisterName());    final RegisterInformationInternal internalRegister=new RegisterInformationInternal(register.getRegisterName(),register.getRegisterSize());    this.registers[i]=internalRegister;    this.registerMap.put(register.getRegisterName(),internalRegister);  }}  }
class C{  SubContent(List<StructuredContent> content,StructuredContent parent){  this.root=content;  this.parent=parent;}  }
class C{  public static void filledRectangle(double x,double y,double halfWidth,double halfHeight){  if (halfWidth < 0)   throw new IllegalArgumentException("half width must be nonnegative");  if (halfHeight < 0)   throw new IllegalArgumentException("half height must be nonnegative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  private static void assertNotEmpty(String message,String string){  assertNotNull(message,string);  assertFalse(message,string.equals(""));}  }
class C{  private boolean isParentSelected(){  if (rootParent instanceof JFrame) {    return ((JFrame)rootParent).isActive();  } else   if (rootParent instanceof JDialog) {    return ((JDialog)rootParent).isActive();  } else {    return true;  }}  }
class C{  private void sendBadRequestResponse(SIPRequest sipRequest,SIPServerTransaction transaction,String reasonPhrase){  SIPResponse sipResponse=sipRequest.createResponse(Response.BAD_REQUEST);  if (reasonPhrase != null)   sipResponse.setReasonPhrase(reasonPhrase);  ServerHeader serverHeader=MessageFactoryImpl.getDefaultServerHeader();  if (serverHeader != null) {    sipResponse.setHeader(serverHeader);  }  try {    if (sipRequest.getMethod().equals(Request.INVITE)) {      sipStack.addTransactionPendingAck(transaction);    }    transaction.sendResponse(sipResponse);    transaction.releaseSem();  } catch (  Exception ex) {    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logError("Problem sending error response",ex);    transaction.releaseSem();    sipStack.removeTransaction(transaction);  }}  }
class C{  public final int[] hash(final boolean[] vector){  return hashSignature(this.mh.signature(vector));}  }
class C{  private Entry firstEntry(){  Entry p=root;  if (p != null)   while (p.left != null)   p=p.left;  return p;}  }
class C{  public synchronized void resetRemoveDevices(){  removeDevices=null;}  }
class C{  @Override public String toString(){  return "<TRUEGUARD>";}  }
class C{  public Matrix4f arcball(float radius,float centerX,float centerY,float centerZ,float angleX,float angleY){  return arcball(radius,centerX,centerY,centerZ,angleX,angleY,this);}  }
class C{  public void run(){  TLAEditorActivator.getDefault().getLog().log(new Status(IStatus.INFO,TLAEditorActivator.PLUGIN_ID,"Opening " + label + "("+ resource.getName()+ " at "+ location+ ")"));  EditorUtil.setReturnFromOpenDecl();  TLAEditorAndPDFViewer editor=(TLAEditorAndPDFViewer)UIHelper.openEditor(TLAEditorAndPDFViewer.ID,new FileEditorInput((IFile)resource));  editor.getTLAEditor().selectAndReveal(location.getOffset(),location.getLength());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isAnyCard(String ccPassed){  if (isEmpty(ccPassed))   return defaultEmptyOK;  String cc=stripCharsInBag(ccPassed,creditCardDelimiters);  if (!isCreditCard(cc))   return false;  if (isMasterCard(cc) || isVisa(cc) || isAmericanExpress(cc)|| isDinersClub(cc)|| isDiscover(cc)|| isEnRoute(cc)|| isJCB(cc)|| isSolo(cc)|| isswitch(cc)|| isVisaElectron(cc))   return true;  return false;}  }
class C{  public EndpointMatrixGraph(Graph graph) throws IllegalArgumentException {  this();  if (graph == null) {    throw new NullPointerException("Graph must not be null.");  }  transferNodesAndEdges(graph);  this.ambiguousTriples=graph.getAmbiguousTriples();  this.underLineTriples=graph.getUnderLines();  this.dottedUnderLineTriples=graph.getDottedUnderlines();  for (  Edge edge : graph.getEdges()) {    if (graph.isHighlighted(edge)) {      setHighlighted(edge,true);    }  }  for (  Node node : nodes) {    namesHash.put(node.getName(),node);  }  initHashes();}  }
class C{  public static boolean isAncestor(final ITreeNode<?> node,final ITreeNode<?> parent){  if (node == null) {    return false;  } else   if (parent == node) {    return true;  } else {    return isAncestor(node.getParent(),parent);  }}  }
class C{  public Hessian2StreamingInput createHessian2StreamingInput(InputStream is){  Hessian2StreamingInput in=new Hessian2StreamingInput(is);  in.setSerializerFactory(getSerializerFactory());  return in;}  }
class C{  Cube split(){  int dr=max[RED] - min[RED] + 1;  int dg=max[GRN] - min[GRN] + 1;  int db=max[BLU] - min[BLU] + 1;  int c0, c1, splitChannel;  if (dr >= dg) {    if (dr >= db) {      splitChannel=RED;      c0=GRN;      c1=BLU;    } else {      splitChannel=BLU;      c0=RED;      c1=GRN;    }  } else   if (dg >= db) {    splitChannel=GRN;    c0=RED;    c1=BLU;  } else {    splitChannel=BLU;    c0=GRN;    c1=RED;  }  Cube ret;  ret=splitChannel(splitChannel,c0,c1);  if (ret != null)   return ret;  ret=splitChannel(c0,splitChannel,c1);  if (ret != null)   return ret;  ret=splitChannel(c1,splitChannel,c0);  if (ret != null)   return ret;  done=true;  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.461 -0500",hash_original_method="1CCB9955A4205D39AC8709BDCAB9AF4C",hash_generated_method="79B56BBE563CEA74B327E5525D4FFE73") public boolean finishComposingText(){  if (DEBUG)   Log.v(TAG,"finishComposingText");  final Editable content=getEditable();  if (content != null) {    beginBatchEdit();    removeComposingSpans(content);    endBatchEdit();    sendCurrentText();  }  return true;}  }
class C{  public void uploadFile(Path fileToUpload,String destinationFileName) throws IOException {  Preconditions.checkNotNull(fileToUpload);  Preconditions.checkArgument(Files.exists(fileToUpload));  Preconditions.checkArgument(!Strings.isNullOrEmpty(destinationFileName));  uploadFile(fileToUpload,destinationFileName,true);}  }
class C{  public ScriptBuilder addChunk(ScriptChunk chunk){  return addChunk(chunks.size(),chunk);}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  @Override public int locations(){  if (m_bHasNoDualTurret) {    return m_bHasNoTurret ? 7 : 8;  }  return 9;}  }
class C{  public boolean isStationZone(){  return stationZone;}  }
class C{  public static boolean isColumnLayout(boolean isLeftToRight,int horizontalAlignment,int horizontalTextPosition,int verticalTextPosition){  if (verticalTextPosition != SwingConstants.CENTER) {    return false;  }  if (isLeftToRight) {    if (horizontalAlignment != SwingConstants.LEADING && horizontalAlignment != SwingConstants.LEFT) {      return false;    }    if (horizontalTextPosition != SwingConstants.TRAILING && horizontalTextPosition != SwingConstants.RIGHT) {      return false;    }  } else {    if (horizontalAlignment != SwingConstants.LEADING && horizontalAlignment != SwingConstants.RIGHT) {      return false;    }    if (horizontalTextPosition != SwingConstants.TRAILING && horizontalTextPosition != SwingConstants.LEFT) {      return false;    }  }  return true;}  }
class C{  public void showDialog(){  project=appContext.getCurrentProject();  String workDir=project.getRootProject().getPath();  view.setMessage(formMessage(workDir));  view.setRemoved(false);  view.showDialog();}  }
class C{  protected Pattern buildStopwordsPattern(String... additionalTerms){  StringJoiner sj=new StringJoiner("|");  for (  String s : stopwords) {    sj.add(Pattern.quote(s));  }  if (additionalTerms != null) {    for (    String s : additionalTerms) {      sj.add(s);    }  }  return Pattern.compile("\\b(" + sj.toString() + ")\\b",Pattern.CASE_INSENSITIVE);}  }
class C{  public static String join(CharSequence sep,Iterable<? extends CharSequence> items){  StringBuilder sb=new StringBuilder();  join(sb,sep,items);  return sb.toString();}  }
class C{  public void mouseReleased(MouseEvent e){  if (!marginChanged)   return;  TableColumnModel tcm=table.getColumnModel();  for (int i=0; i < tcm.getColumnCount(); i++) {    LimeTableColumn ltc=(LimeTableColumn)tcm.getColumn(i);    setWidth(ltc,ltc.getWidth());  }  marginChanged=false;  save();}  }
class C{  public AttributeCertificateHolder(int digestedObjectType,ASN1ObjectIdentifier digestAlgorithm,ASN1ObjectIdentifier otherObjectTypeID,byte[] objectDigest){  holder=new Holder(new ObjectDigestInfo(digestedObjectType,otherObjectTypeID,new AlgorithmIdentifier(digestAlgorithm),Arrays.clone(objectDigest)));}  }
class C{  public void executionResumed(RunnableQueue rq){synchronized (UpdateManager.this) {    if (suspendCalled && !running) {      running=true;      suspendCalled=false;      UpdateManagerEvent ev=new UpdateManagerEvent(this,null,null);      fireEvent(resumedDispatcher,ev);    }  }}  }
class C{  private boolean checkMcbConditions(ModuleCommunicationBus mcb,boolean receiving){  ArrayList<Tuple<String,ArithmeticCondition>> list=(receiving ? this.recvConditions : this.sendConditions);  if (list == null) {    return true;  }  for (  Tuple<String,ArithmeticCondition> t : list) {    if (!mcb.containsProperty(t.getKey())) {      continue;    }    if (t.getValue().isTrueFor(mcb.getDouble(t.getKey(),0))) {      return false;    }  }  return true;}  }
class C{  public void init(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("\n#############################\nEntryHierarchy.init() method called\n#############################\n");  entryColourMap=buildEntryColourMap();  try {    entryHierarchyDataMap=entryHierarchyDataResourceReader.read(entryHierarchyDataResource);  } catch (  IOException e) {    LOGGER.warn("Problem reading entry hierarchy data resource: " + e.getMessage());    throw new IllegalStateException("Problem reading entry hierarchy data resource.  Cannot initialise.",e);  }  try {    entryToGoTerms=entryToGoDataResourceReader.read(entryToGoDataResource);  } catch (  IOException e) {    LOGGER.warn("Unable to load Entry to GO mapping file.  Cannot initialise. " + e.getMessage());    throw new IllegalStateException("Unable to load Entry to GO mapping file.  Cannot initialise.",e);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Matrix4d m13(double m13){  this.m13=m13;  properties=0;  return this;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  WebDoc doc=WebDoc.createPopup("Report - Post - Not Implemented");  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  @Override public Set<Map.Entry<String,String>> entrySet(){  return _map.entrySet();}  }
class C{  protected void handleAppendRequestFailure(MemberState member,AppendRequest request,Throwable error){  super.handleAppendRequestFailure(member,request,error);  updateHeartbeatTime(member,error);}  }
class C{  protected NullLiteralImpl(){  super();}  }
class C{  public static List<String> readLines(InputStream input,String encoding) throws IOException {  if (encoding == null) {    return readLines(input);  } else {    InputStreamReader reader=new InputStreamReader(input,encoding);    return readLines(reader);  }}  }
class C{  public LandsatLayer(){  this("http://worldwind25.arc.nasa.gov/wms");}  }
class C{  public RegExp1(int type,Object content){  super(type);  this.content=content;}  }
class C{  private void validateView(){  Component validateRoot=SwingUtilities.getValidateRoot(this,false);  if (validateRoot == null) {    return;  }  validateRoot.validate();  RepaintManager rm=RepaintManager.currentManager(this);  if (rm != null) {    rm.removeInvalidComponent((JComponent)validateRoot);  }}  }
class C{  public static boolean isVplexBackendVolume(BlockObject blockObject,DbClient dbClient){  UnManagedVolume volume=getUnManagedVolumeForBlockObject(blockObject,dbClient);  if (null == volume) {    String message="could not locate an UnManagedVolume for BlockObject " + blockObject.getLabel() + ". This means that the volume was marked ingested before all its replicas were ingested.";    _logger.error(message);    throw IngestionException.exceptions.generalException(message);  }  return isVplexBackendVolume(volume);}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public Boolean isSmpFtSupported(){  return smpFtSupported;}  }
class C{  public void commitRandom(List<Neuron> noiseyNeurons) throws ClassCastException {  if (!getCbDistribution().getSelectedItem().toString().equals(SimbrainConstants.NULL_STRING)) {    Randomizer rand=new Randomizer();    super.commitRandom(rand);    for (    Neuron n : noiseyNeurons) {      ((NoisyUpdateRule)n.getUpdateRule()).setNoiseGenerator(rand);    }  }}  }
class C{  public void init(double x1,double x2,double y1,double y2){  if (x1 < x2) {    minx=x1;    maxx=x2;  } else {    minx=x2;    maxx=x1;  }  if (y1 < y2) {    miny=y1;    maxy=y2;  } else {    miny=y2;    maxy=y1;  }}  }
class C{  public static void main(String[] args){  Network network=NetworkUtils.createNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create("1",Node.class),new Coord((double)0,(double)0));  Node node2=NetworkUtils.createAndAddNode(network,Id.create("2",Node.class),new Coord((double)0,(double)1000));  Node node3=NetworkUtils.createAndAddNode(network,Id.create("3",Node.class),new Coord((double)1000,(double)2000));  Node node4=NetworkUtils.createAndAddNode(network,Id.create("4",Node.class),new Coord((double)2000,(double)2000));  Node node5=NetworkUtils.createAndAddNode(network,Id.create("5",Node.class),new Coord((double)1000,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  Link link1=(Link)NetworkUtils.createAndAddLink(network,Id.create("1",Link.class),fromNode,toNode,(double)1000,(double)1,(double)3600,(double)1);  final Node fromNode1=node2;  final Node toNode1=node3;  Link link2=(Link)NetworkUtils.createAndAddLink(network,Id.create("2",Link.class),fromNode1,toNode1,(double)1500,(double)1,(double)3600,(double)1);  final Node fromNode2=node3;  final Node toNode2=node4;  Link link3=(Link)NetworkUtils.createAndAddLink(network,Id.create("3",Link.class),fromNode2,toNode2,(double)1000,(double)1,(double)3600,(double)1);  final Node fromNode3=node4;  final Node toNode3=node5;  Link link4=(Link)NetworkUtils.createAndAddLink(network,Id.create("4",Link.class),fromNode3,toNode3,(double)2800,(double)1,(double)3600,(double)1);  Distances distance1=NetworkUtil.getDistance2Node(link1,new Coord((double)100,(double)0),node1);  log.info(distance1.getDistancePoint2Road() + distance1.getDistanceRoad2Node() + " distance1");  final double y=-10;  Distances distance2=NetworkUtil.getDistance2Node(link1,new Coord((double)100,y),node1);  log.info(distance2.getDistancePoint2Road() + distance2.getDistanceRoad2Node() + " distance2");  Distances distance3=NetworkUtil.getDistance2Node(link2,new Coord((double)100,(double)1000),node2);  log.info(distance3.getDistancePoint2Road() + distance3.getDistanceRoad2Node() + " distance3");  final double x=-100;  Distances distance4=NetworkUtil.getDistance2Node(link2,new Coord(x,(double)1000),node2);  log.info(distance4.getDistancePoint2Road() + distance4.getDistanceRoad2Node() + " distance4");}  }
class C{  public static void main(String argv[]){  System.out.println(getVersion());}  }
class C{  BigInteger generateY(BigInteger x,BigInteger p,BigInteger g){  BigInteger y=g.modPow(x,p);  return y;}  }
class C{  private void fixGravityAndPadding(int direction){  for (int i=0; i < getChildCount(); i++) {    View v=getChildAt(i);    LinearLayout.LayoutParams layoutParams=(LinearLayout.LayoutParams)v.getLayoutParams();    int gravity=layoutParams.gravity;    if (direction == LinearLayout.VERTICAL) {      if ((gravity & Gravity.LEFT) != 0) {        gravity&=~Gravity.LEFT;        gravity|=Gravity.BOTTOM;      }    } else {      if ((gravity & Gravity.BOTTOM) != 0) {        gravity&=~Gravity.BOTTOM;        gravity|=Gravity.LEFT;      }    }    if (direction == LinearLayout.VERTICAL) {      if ((gravity & Gravity.RIGHT) != 0) {        gravity&=~Gravity.RIGHT;        gravity|=Gravity.TOP;      }    } else {      if ((gravity & Gravity.TOP) != 0) {        gravity&=~Gravity.TOP;        gravity|=Gravity.RIGHT;      }    }    if ((gravity & Gravity.CENTER) != Gravity.CENTER) {      if (direction == LinearLayout.VERTICAL) {        if ((gravity & Gravity.CENTER_VERTICAL) != 0) {          gravity&=~Gravity.CENTER_VERTICAL;          gravity|=Gravity.CENTER_HORIZONTAL;        }      } else {        if ((gravity & Gravity.CENTER_HORIZONTAL) != 0) {          gravity&=~Gravity.CENTER_HORIZONTAL;          gravity|=Gravity.CENTER_VERTICAL;        }      }    }    layoutParams.gravity=gravity;    int paddingLeft=v.getPaddingLeft();    int paddingTop=v.getPaddingTop();    int paddingRight=v.getPaddingRight();    int paddingBottom=v.getPaddingBottom();    v.setPadding(paddingBottom,paddingRight,paddingTop,paddingLeft);  }}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public static boolean isWhiteSpace(char ch[],int start,int length){  int end=start + length;  for (int s=start; s < end; s++) {    if (!isWhiteSpace(ch[s]))     return false;  }  return true;}  }
class C{  public boolean isUnset(Option option,String value){  return (values.get(option.text + value) == null);}  }
class C{  public ArrayList(Collection<? extends E> c){  elementData=c.toArray();  if ((size=elementData.length) != 0) {    if (elementData.getClass() != Object[].class)     elementData=Arrays.copyOf(elementData,size,Object[].class);  } else {    this.elementData=EMPTY_ELEMENTDATA;  }}  }
class C{  private static boolean isInHorizontalTargetZone(float x,float y,float handleXStart,float handleXEnd,float handleY,float targetRadius){  if (x > handleXStart && x < handleXEnd && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.EQUALITY_EXPRESSION__LHS:    return lhs != null;case N4JSPackage.EQUALITY_EXPRESSION__OP:  return op != OP_EDEFAULT;case N4JSPackage.EQUALITY_EXPRESSION__RHS:return rhs != null;}return super.eIsSet(featureID);}  }
class C{  static <T>LongStream makeLong(AbstractPipeline<?,Long,?> upstream){  return new OfLong(upstream);}  }
class C{  public <T>T fromXML(final InputStream input,final T root){  return unmarshal(hierarchicalStreamDriver.createReader(input),root);}  }
class C{  private void createSignalSystemsAndGroups(SignalSystemsData systems,SignalGroupsData groups){  SignalSystemData sys=systems.getFactory().createSignalSystemData(Id.create("3",SignalSystem.class));  systems.addSignalSystemData(sys);  SignalData signal=systems.getFactory().createSignalData(Id.create("1",Signal.class));  sys.addSignalData(signal);  signal.setLinkId(Id.create("23",Link.class));  signal=systems.getFactory().createSignalData(Id.create("2",Signal.class));  sys.addSignalData(signal);  signal.setLinkId(Id.create("43",Link.class));  SignalUtils.createAndAddSignalGroups4Signals(groups,sys);  sys=systems.getFactory().createSignalSystemData(Id.create("4",SignalSystem.class));  systems.addSignalSystemData(sys);  signal=systems.getFactory().createSignalData(Id.create("1",Signal.class));  sys.addSignalData(signal);  signal.setLinkId(Id.create("34",Link.class));  signal=systems.getFactory().createSignalData(Id.create("2",Signal.class));  sys.addSignalData(signal);  signal.setLinkId(Id.create("54",Link.class));  SignalUtils.createAndAddSignalGroups4Signals(groups,sys);  sys=systems.getFactory().createSignalSystemData(Id.create("7",SignalSystem.class));  systems.addSignalSystemData(sys);  signal=systems.getFactory().createSignalData(Id.create("1",Signal.class));  sys.addSignalData(signal);  signal.setLinkId(Id.create("27",Link.class));  signal=systems.getFactory().createSignalData(Id.create("2",Signal.class));  sys.addSignalData(signal);  signal.setLinkId(Id.create("87",Link.class));  SignalUtils.createAndAddSignalGroups4Signals(groups,sys);  sys=systems.getFactory().createSignalSystemData(Id.create("8",SignalSystem.class));  systems.addSignalSystemData(sys);  signal=systems.getFactory().createSignalData(Id.create("1",Signal.class));  sys.addSignalData(signal);  signal.setLinkId(Id.create("78",Link.class));  signal=systems.getFactory().createSignalData(Id.create("2",Signal.class));  sys.addSignalData(signal);  signal.setLinkId(Id.create("58",Link.class));  SignalUtils.createAndAddSignalGroups4Signals(groups,sys);}  }
class C{  public File createPDF(File file){  return null;}  }
class C{  public void endVisit(Modifier node){}  }
class C{  public static void installMouseMotionListenerOnAllComponents(MouseMotionListener m,Container c){  c.addMouseMotionListener(m);  Component[] components=c.getComponents();  for (int i=0; i < components.length; i++) {    if (components[i] instanceof Container) {      MouseInputAdapterInstaller.installMouseMotionListenerOnAllComponents(m,(Container)components[i]);    } else {      c.addMouseMotionListener(m);    }  }}  }
class C{  protected boolean isTypeScriptAnnotation(Annotation a){  String type=a.getType();  return ((type != null && type.startsWith(ORG_ECLIPSE_WST_SSE_UI_TEMP)));}  }
class C{  @PUT @Path("/enablescheduling") @Produces(MediaType.APPLICATION_JSON) @Description("Enables collection and alert evaluation scheduling.") public Response enableScheduling(@Context HttpServletRequest req){  validatePrivilegedUser(req);  managementService.enableScheduling();  return Response.status(Status.OK).build();}  }
class C{  public String toString(int indentFactor) throws JSONException {  return toString(indentFactor,0);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public boolean applyTo(ImageView imageView,ImageHolder imageHolder){  return applyTo(imageHolder,imageView,null);}  }
class C{  public T code(String value){  return attr("code",value);}  }
class C{  public boolean hasNext(){  try {    return rows.hasNext();  } catch (  IOException e) {    e.printStackTrace();  }  return false;}  }
class C{  public void removeHeader(String name){  if (qheaders != null)   qheaders.delete(name);}  }
class C{  public LinePlot(DiagnosticTool frame,String metric){  super(frame,metric);  setLayout(new BorderLayout());}  }
class C{  public CustomPotion(int id,boolean isBadEffect,int color,String name){  super(getPotionID(name,id),isBadEffect,color);  this.setPotionName("potion." + name);  Potion.potionTypes[this.getId()]=this;}  }
class C{  public br removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static String nullSafeToString(boolean[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  public JSONObject put(String key,Collection<Object> value) throws JSONException {  this.put(key,new org.json.JSONArray(value));  return this;}  }
class C{  public String nextToken(String nontokenDelims){  return nextToken(nontokenDelims,null);}  }
class C{  public synchronized void stop(){  if (!isRunning)   return;  isRunning=false;  try {    sock.close();  } catch (  IOException e) {    e.printStackTrace();  }  Collection en=tlsMessageChannels.values();  for (Iterator it=en.iterator(); it.hasNext(); ) {    TLSMessageChannel next=(TLSMessageChannel)it.next();    next.close();  }  for (Iterator incomingMCIterator=incomingTlsMessageChannels.iterator(); incomingMCIterator.hasNext(); ) {    TLSMessageChannel next=(TLSMessageChannel)incomingMCIterator.next();    next.close();  }  this.notify();}  }
class C{  private void createSourceCollection() throws Exception {  List<String> nodeNames=this.startServers(shardCount * replicationFactor);  this.collectionToNodeNames.put(SOURCE_COLLECTION,nodeNames);  this.createCollection(SOURCE_COLLECTION);  this.waitForRecoveriesToFinish(SOURCE_COLLECTION,true);  this.updateMappingsFromZk(SOURCE_COLLECTION);}  }
class C{  public ModelMBeanNotificationInfo(String[] notifTypes,String name,String description){  this(notifTypes,name,description,null);}  }
class C{  private DefaultMutableTreeNode createDomainNode(Dn dn,Token token){  DefaultMutableTreeNode node=new ComparableDefaultMutableTreeNode();  String label=dn.getDomain();  XNodeInfo userObject=new XNodeInfo(Type.NONMBEAN,label,label,label);  node.setUserObject(userObject);  return node;}  }
class C{  public static boolean supportsJava14JdbcTypes(){  try {    return (Types.class.getField(TypeMap.BOOLEAN) != null) && (Types.class.getField(TypeMap.DATALINK) != null);  } catch (  Exception ex) {    return false;  }}  }
class C{  public final int pop(){  return m_map[--m_firstFree];}  }
class C{  private void parseInternalService() throws IOException, ParserException {  if (!token.isKeyword("service")) {    return;  }  getToken();  assertToken(Scanner.TokenType.ID,"expected service name");  String serviceName=token.content();  getToken();  eat(Scanner.TokenType.LCURLY,"{ expected");  List<InterfaceDefinition> interfaceList=new ArrayList<>();  OLSyntaxNode internalMain=null;  SequenceStatement internalInit=null;  boolean keepRunning=true;  while (keepRunning) {    if (token.isKeyword("Interfaces")) {      getToken();      eat(Scanner.TokenType.COLON,"expected : after Interfaces");      boolean keepRun=true;      while (keepRun) {        assertToken(Scanner.TokenType.ID,"expected interface name");        InterfaceDefinition i=interfaces.get(token.content());        if (i == null) {          throwException("Invalid interface name: " + token.content());        }        interfaceList.add(i);        getToken();        if (token.is(Scanner.TokenType.COMMA)) {          getToken();        } else {          keepRun=false;        }      }    } else     if (token.isKeyword("main")) {      if (internalMain != null) {        throwException("you must specify only one main definition");      }      internalMain=parseMain();    } else     if (token.is(Scanner.TokenType.INIT)) {      if (internalInit == null) {        internalInit=new SequenceStatement(getContext());      }      internalInit.addChild(parseInit());    } else     if (token.is(Scanner.TokenType.RCURLY)) {      keepRunning=false;    } else {      throwException("Unrecognized token in inline service.");    }  }  eat(Scanner.TokenType.RCURLY,"} expected");  if (internalMain == null) {    throwException("You must specify a main for internal service " + serviceName);  }  program.addChild(createInternalServicePort(serviceName,interfaceList));  Program internalServiceProgram=new Program(getContext());  for (  OLSyntaxNode child : program.children()) {    if (child instanceof InterfaceDefinition || child instanceof OutputPortInfo || child instanceof TypeDefinition|| child instanceof TypeInlineDefinition|| child instanceof TypeDefinitionLink|| child instanceof TypeDefinitionUndefined) {      internalServiceProgram.addChild(child);    }  }  internalServiceProgram.addChild(new ExecutionInfo(getContext(),Constants.ExecutionMode.CONCURRENT));  internalServiceProgram.addChild(createInternalServiceInputPort(serviceName,interfaceList));  if (internalInit != null) {    internalServiceProgram.addChild(new DefinitionNode(getContext(),"init",internalInit));  }  internalServiceProgram.addChild(internalMain);  EmbeddedServiceNode internalServiceNode=new EmbeddedServiceNode(getContext(),Constants.EmbeddedServiceType.INTERNAL,serviceName,serviceName);  internalServiceNode.setProgram(internalServiceProgram);  program.addChild(internalServiceNode);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public UF11(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);  if ((numberOfVariables != 10) && (numberOfVariables != 30)) {    throw new IllegalArgumentException("number of variables must be 10 or 30");  }  problem=new DTLZ2(numberOfVariables,numberOfObjectives);}  }
class C{  public static boolean isModuleInstance(Resource resource){  Resource moduleClass=SPIN.Module.inModel(resource.getModel());  for (  Resource type : JenaUtil.getTypes(resource)) {    if (JenaUtil.hasIndirectType(type,moduleClass)) {      return true;    }  }  return false;}  }
class C{  @Deprecated public void onTooManyRedirects(WebView view,Message cancelMsg,Message continueMsg){  cancelMsg.sendToTarget();}  }
class C{  @Override public void trigger(DialogueState state,Collection<String> updatedVars){  if (updatedVars.contains("a_m") && state.hasChanceNode("a_m")) {    String action=state.queryProb("a_m").getBest().toString();    if (action.equals("FindOffer")) {      String returndate=state.queryProb("ReturnDate").getBest().toString();      int price=(returndate.equals("NoReturn")) ? 179 : 299;      String newAction="MakeOffer(" + price + ")";      system.addContent("a_m",newAction);    } else     if (action.equals("Book")) {      String departure=state.queryProb("Departure").getBest().toString();      String destination=state.queryProb("Destination").getBest().toString();      String date=state.queryProb("Date").getBest().toString();      String returndate=state.queryProb("ReturnDate").getBest().toString();      String nbtickets=state.queryProb("NbTickets").getBest().toString();      String info="Booked " + nbtickets + " tickets from "+ departure+ " to "+ destination+ " on "+ date+ ((returndate.equals("NoReturn")) ? " and return on " + returndate : "");      log.fine(info);    }  }}  }
class C{  @PostConstruct public void init(){  Optional<File> cacheDirectoryOptional=getCacheDirectory();  if (cacheDirectoryOptional.isPresent()) {    Cache cache=new Cache(cacheDirectoryOptional.get(),cacheSize * MEGABYTE);    this.httpClient=new OkHttpClient().setCache(cache);    logger.info("Initialized http client with {} mb cache.",cacheSize);  } else {    this.httpClient=new OkHttpClient();    logger.warn("Initialized http client without cache.");  }}  }
class C{  public void swipeCancelled(long time){  if (!mInSwipe)   return;  mDiscardingTab=null;  mInSwipe=false;  setWarpState(true,true);  mEvenOutProgress=0.f;  Tab tab=TabModelUtils.getCurrentTab(mTabModel);  mLayout.uiSelectingTab(time,tab != null ? tab.getId() : Tab.INVALID_TAB_ID);}  }
class C{  public void mouseRelease(MouseEvent e){}  }
class C{  public boolean field_based(){  return soot.PhaseOptions.getBoolean(options,"field-based");}  }
class C{  private void stepInput(){  for (  final Port port : Port.VALUES) {    if (isFull()) {      return;    }    final Pipe receivingPipe=getCasing().getReceivingPipe(getFace(),port);    if (!receivingPipe.isReading()) {      receivingPipe.beginRead();    }    if (receivingPipe.canTransfer()) {      push(receivingPipe.read());      cancelWrite();      if (!isFull()) {        receivingPipe.beginRead();      }    }  }}  }
class C{  public static void listObject_test3() throws Exception {  int i;  println("Test: listObjects(final String bucketName, final String prefix, final boolean recursive)");  String[] fileNames=new String[3];  for (i=0; i < 3; i++) {    String fileName=createFile(1 * MB);    client.putObject(bucketName,fileName,fileName);    Files.delete(Paths.get(fileName));    fileNames[i]=fileName;  }  i=0;  for (  Result r : client.listObjects(bucketName,"minio",true)) {    println(i++,r.get());    if (i == 10) {      break;    }  }  for (i=0; i < 3; i++) {    client.removeObject(bucketName,fileNames[i]);  }}  }
class C{  @RequestMapping(value="/users",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed @Transactional @Secured(AuthoritiesConstants.ADMIN) public ResponseEntity<ManagedUserDTO> updateUser(@RequestBody ManagedUserDTO managedUserDTO){  log.debug("REST request to update User : {}",managedUserDTO);  Optional<User> existingUser=userRepository.findOneByEmail(managedUserDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserDTO.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","emailexists","E-mail already in use")).body(null);  }  existingUser=userRepository.findOneByLogin(managedUserDTO.getLogin());  if (existingUser.isPresent() && (!existingUser.get().getId().equals(managedUserDTO.getId()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("userManagement","userexists","Login already in use")).body(null);  }  return userRepository.findOneById(managedUserDTO.getId()).map(null).orElseGet(null);}  }
class C{  public static ImageTypeSpecifier createIndexed(byte[] redLUT,byte[] greenLUT,byte[] blueLUT,byte[] alphaLUT,int bits,int dataType){  return new ImageTypeSpecifier.Indexed(redLUT,greenLUT,blueLUT,alphaLUT,bits,dataType);}  }
class C{  public String toString(){  String interpolation=null;  if (interpolationType == NO_INTERPOLATION)   interpolation="NO_INTERPOLATION";  if (interpolationType == LINEAR_INTERPOLATION)   interpolation="LINEAR_INTERPOLATION";  return this.getClass().getName() + "(" + ((cdf != null) ? cdf.length : 0)+ ","+ interpolation+ ")";}  }
class C{  public void addTeleMissileAttack(AttackAction ea){  pendingTeleMissileAttacks.addElement(ea);  processGameEvent(new GameNewActionEvent(this,ea));}  }
class C{  private PDFObject popObject() throws PDFParseException {  Object obj=stack.pop();  if (!(obj instanceof PDFObject)) {    throw new PDFParseException("Expected a reference here: " + obj.toString());  }  return (PDFObject)obj;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void needNewBuffer(int newSize){  int delta=newSize - size;  int newBufferSize=Math.max(minChunkLen,delta);  currentBufferIndex++;  currentBuffer=new short[newBufferSize];  offset=0;  if (currentBufferIndex >= buffers.length) {    int newLen=buffers.length << 1;    short[][] newBuffers=new short[newLen][];    System.arraycopy(buffers,0,newBuffers,0,buffers.length);    buffers=newBuffers;  }  buffers[currentBufferIndex]=currentBuffer;  buffersCount++;}  }
class C{  protected void makeInitialSet(){  Chain locals=((UnitGraph)graph).getBody().getLocals();  List<Local> refLocals=new ArrayList<Local>();  for (Iterator lIt=locals.iterator(); lIt.hasNext(); ) {    final Local l=(Local)lIt.next();    if (l.getType() instanceof RefType) {      refLocals.add(l);    }  }  List<Type> types=new ArrayList<Type>();  for (Iterator sIt=((UnitGraph)graph).getBody().getUnits().iterator(); sIt.hasNext(); ) {    final Stmt s=(Stmt)sIt.next();    if (s instanceof AssignStmt) {      AssignStmt as=(AssignStmt)s;      Value rhs=as.getRightOp();      if (rhs instanceof CastExpr) {        Type t=((CastExpr)rhs).getCastType();        if (t instanceof RefType && !types.contains(t)) {          types.add(t);        }      }    }  }  emptySet=new LocalTypeSet(refLocals,types);}  }
class C{  public boolean isStateActive(State state){switch (state) {case auto_char:    return stateVector[0] == State.auto_char;case auto_loop:  return stateVector[0].ordinal() >= State.auto_loop.ordinal() && stateVector[0].ordinal() <= State.auto_loop_switch_case_enum_asm.ordinal();case auto_loop_switch_case:return stateVector[0].ordinal() >= State.auto_loop_switch_case.ordinal() && stateVector[0].ordinal() <= State.auto_loop_switch_case_enum_asm.ordinal();case auto_loop_switch_case_enum_asm:return stateVector[0] == State.auto_loop_switch_case_enum_asm;default :return false;}}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ReasonFlags(boolean[] flags){  this.flags=flags;}  }
class C{  public String valueToString(Object value) throws ParseException {  if (value == null) {    return "";  }  Format f=getFormat();  if (f == null) {    return value.toString();  }  return f.format(value);}  }
class C{  @Override public void onClick(View v){  final View acRoot=getActivity().getWindow().getDecorView().findViewById(R.id.tabbed_frame);  String link=completeUrlString(urlText.getText());  try {    InputStream inputStream=getActivity().getContentResolver().openInputStream(Uri.parse(link));    if (inputStream == null) {      throw new FileNotFoundException();    }    List<String> urls=parseOPML(inputStream);    if (urls.isEmpty()) {      Snackbar.make(v,R.string.subscribe_dialog_opml_empty,Snackbar.LENGTH_LONG);      return;    }    int subscribed=urls.size();    for (    final String feedUrl : urls) {      if (PodcastHelper.getInstance().trySubscribe(feedUrl,acRoot,refreshMode) == 0) {        subscribed--;      }    }    PodlistenAccount.getInstance().refresh(0);    if (subscribed > 0) {      Snackbar.make(acRoot,getString(R.string.subscribe_dialog_opml_subscriptions_added,subscribed,urls.size()),Snackbar.LENGTH_LONG).show();      dismiss();    } else {      Snackbar.make(v,R.string.subscribe_dialog_opml_failed,Snackbar.LENGTH_LONG).show();    }  } catch (  XmlPullParserException|IOException exception) {    long id=PodcastHelper.getInstance().trySubscribe(link,v,refreshMode);    if (id != 0) {      PodlistenAccount.getInstance().refresh(id);      dismiss();    }  }}  }
class C{  public void prepareFilter(float transition){  try {    method.invoke(filter,new Object[]{new Float(transition)});  } catch (  Exception e) {    throw new IllegalArgumentException("Error setting value for property: " + property);  }}  }
class C{  public DdlParserSql2003(boolean includeViews){  super(";",includeViews);}  }
class C{  public void decodeTilePixels(byte[] input,Rectangle newRect,byte[] bdata){  if (compression == XTIFF.COMPRESSION_FAX_G3_1D) {    decoder.decode1D(bdata,input,newRect.x,newRect.height);  } else   if (compression == XTIFF.COMPRESSION_FAX_G3_2D) {    decoder.decode2D(bdata,input,newRect.x,newRect.height,tiffT4Options);  } else   if (compression == XTIFF.COMPRESSION_FAX_G4_2D) {    decoder.decodeT6(bdata,input,newRect.x,newRect.height,tiffT6Options);  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testSocket_Block_BasicStatusAfterConnect() throws IOException {  this.channel1.connect(localAddr1);  DatagramSocket s1=this.channel1.socket();  assertSocketAfterConnect(s1);  DatagramSocket s2=this.channel1.socket();  assertSame(s1,s2);}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  public GenericMetricEntityDecompactionStreamReader(String metricName,SearchCondition condition) throws InstantiationException, IllegalAccessException, ParseException {  ed=EntityDefinitionManager.getEntityByServiceName(serviceName);  checkIsMetric(ed);  reader=new GenericEntityStreamReader(serviceName,condition,metricName);  start=DateTimeUtil.humanDateToSeconds(condition.getStartTime()) * 1000;  end=DateTimeUtil.humanDateToSeconds(condition.getEndTime()) * 1000;}  }
class C{  public DocumentoInfo(){  super();}  }
class C{  public boolean isLinked(DBIDRef id){  return parentDistance.doubleValue(id) < Double.POSITIVE_INFINITY;}  }
class C{  public RepositionAllWindowsAction(final SimbrainDesktop desktop){  super("Reposition All Windows",desktop.getWorkspace());  putValue(SHORT_DESCRIPTION,"Repositions and resize all windows. Useful when windows get \"lost\" offscreen.");  this.desktop=desktop;}  }
class C{  private void displayError(ArrayList<String> errorMessages){  StringBuilder errors=new StringBuilder();  errorMessages.stream().forEach(null);  Alert alert=new Alert(Alert.AlertType.ERROR);  alert.setTitle("Error Saving");  alert.setHeaderText("Unable to Save");  alert.setContentText(errors.toString());  alert.showAndWait();}  }
class C{  private void revokeWifiPolicy(org.wso2.emm.agent.beans.Operation operation) throws AndroidAgentException {  String ssid=null;  try {    JSONObject wifiData=new JSONObject(operation.getPayLoad().toString());    if (!wifiData.isNull(resources.getString(R.string.intent_extra_ssid))) {      ssid=(String)wifiData.get(resources.getString(R.string.intent_extra_ssid));    }    WiFiConfig config=new WiFiConfig(context.getApplicationContext());    if (config.findWifiConfigurationBySsid(ssid)) {      config.removeWifiConfigurationBySsid(ssid);    }  } catch (  JSONException e) {    throw new AndroidAgentException("Invalid JSON format.",e);  }}  }
class C{  protected String extractExpectedMimeTypeFromMethod(Method method){  RequestMapping requestMapping=getRequestMapping(method);  if (requestMapping != null) {    if (requestMapping.consumes() != null && requestMapping.consumes().length > 0) {      return requestMapping.consumes()[0];    }  }  return super.extractMimeTypeFromMethod(method);}  }
class C{  private static void createRDataset(Scenario sc,String output){  LOG.info("Creating a dataset for visualisation in R...");  CoordinateTransformation ct=TransformationFactory.getCoordinateTransformation("WGS84_SA_Albers","WGS84");  BufferedWriter bw=IOUtils.getBufferedWriter(output);  Counter counter=new Counter("   household # ");  try {    bw.write("householdId,members,passengerAccess,carAccess,schoolGoing,lon,lat,housingType,mainDwelling");    bw.newLine();    for (    Id<Household> householdId : sc.getHouseholds().getHouseholds().keySet()) {      int passengerAccess=0;      Object oPassengerAccess=sc.getHouseholds().getHouseholdAttributes().getAttribute(householdId.toString(),"membersWithPassengerAccess");      if (oPassengerAccess instanceof Integer) {        passengerAccess=(int)oPassengerAccess;      }      int carAccess=0;      Object oCarAccess=sc.getHouseholds().getHouseholdAttributes().getAttribute(householdId.toString(),"membersWithCarAccess");      if (oCarAccess instanceof Integer) {        carAccess=(int)oCarAccess;      }      int schoolGoing=0;      Object oSchoolgoing=sc.getHouseholds().getHouseholdAttributes().getAttribute(householdId.toString(),"membersThatAreSchoolGoing");      if (oSchoolgoing instanceof Integer) {        schoolGoing=(int)oSchoolgoing;      }      Coord wgs=null;      Object homeCoord=sc.getHouseholds().getHouseholdAttributes().getAttribute(householdId.toString(),"homeCoord");      if (homeCoord instanceof Coord) {        Coord saAlbers=(Coord)homeCoord;        wgs=ct.transform(saAlbers);      } else {        throw new RuntimeException("Cannot find/convert home coordinate for household " + householdId.toString());      }      bw.write(String.format("%s,%d,%d,%d,%d,%.6f,%.6f,%s,%s\n",householdId.toString(),sc.getHouseholds().getHouseholds().get(householdId).getMemberIds().size(),passengerAccess,carAccess,schoolGoing,wgs.getX(),wgs.getY(),sc.getHouseholds().getHouseholdAttributes().getAttribute(householdId.toString(),"housingType").toString(),sc.getHouseholds().getHouseholdAttributes().getAttribute(householdId.toString(),"mainDwellingType").toString()));      counter.incCounter();    }  } catch (  IOException e) {    e.printStackTrace();    throw new RuntimeException("Cannot write to " + output);  } finally {    try {      bw.close();    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Cannot close " + output);    }  }  counter.printCounter();  LOG.info("Done with R dataset.");}  }
class C{  @Override protected void tearDown(){  deleteFileFromTmp("WordsFromFile.txt");  super.tearDown();}  }
class C{  private void transfer(Entry<K,V>[] src,Entry<K,V>[] dest){  for (int j=0; j < src.length; ++j) {    Entry<K,V> e=src[j];    src[j]=null;    while (e != null) {      Entry<K,V> next=e.next;      Object key=e.get();      if (key == null) {        e.next=null;        e.value=null;        size--;      } else {        int i=indexFor(e.hash,dest.length);        e.next=dest[i];        dest[i]=e;      }      e=next;    }  }}  }
class C{  public final int arrayOffset(){  int ao=_buf.arrayOffset();  return ao;}  }
class C{  public static void noNullElements(Object[] objects,String msg){  for (  Object obj : objects)   if (obj == null)   throw new IllegalArgumentException(msg);}  }
class C{  public boolean reset(BookmarkId id,String title,String url,boolean isEditable,boolean isManaged){  jumpDrawablesToCurrentState();  if (mId != null && mId.equals(id) && TextUtils.equals(title,mTitle) && TextUtils.equals(url,mUrl) && isEditable == mIsEditable && isManaged == mIsManaged) {    return false;  }  mTitle=title;  mUrl=url;  mIsFolder=TextUtils.isEmpty(mUrl);  mIsEditable=isEditable;  mIsManaged=isManaged;  mId=id;  setText(mTitle);  setFavicon(null);  if (mIsFolder) {    setContentDescription(getResources().getString(R.string.accessibility_bookmark_folder,mTitle));  }  return true;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__NAME:    setName((String)newValue);  return;case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__DESCRIPTION:setDescription((String)newValue);return;case InformationModelPackage.FUNCTIONBLOCK_PROPERTY__TYPE:setType((FunctionblockModel)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean deleteSelected(){  if (!handleSelectedPreModify()) {    return false;  }  upANibble=0;  ensureWholeScreenIsVisible();  restoreStateAfterModify();  return true;}  }
class C{  public ExtensionListing worldReadable(boolean worldReadable){  mWorldReadable=worldReadable;  return this;}  }
class C{  static String appNameFromRuntime(){  Class<?> main=mainClass();  String name=appNameFromJar(main);  return name != null ? name : appNameFromClassName(main);}  }
class C{  Object convertToDefaultObject(Value v){  Object o;switch (v.getType()) {case Value.CLOB:{      int id=getNextId(TraceObject.CLOB);      o=new JdbcClob(this,v,id);      break;    }case Value.BLOB:{    int id=getNextId(TraceObject.BLOB);    o=new JdbcBlob(this,v,id);    break;  }case Value.JAVA_OBJECT:if (SysProperties.serializeJavaObject) {  o=JdbcUtils.deserialize(v.getBytesNoCopy());  break;}default :o=v.getObject();}return o;}  }
class C{  public static Request createGoogleAllocateRequest(String username){  Request allocateRequest=new Request();  Attribute usernameAttr=AttributeFactory.createUsernameAttribute(username);  Attribute magicCookieAttr=AttributeFactory.createMagicCookieAttribute();  allocateRequest.setMessageType(Message.ALLOCATE_REQUEST);  allocateRequest.putAttribute(magicCookieAttr);  allocateRequest.putAttribute(usernameAttr);  return allocateRequest;}  }
class C{  public void translate(int x,int y,Location location){  double heightCoef=(float)(topLeft.first.y - y) / (float)heightInPixels();  double widthCoef=(float)(x - topLeft.first.x) / (float)widthInPixels();  location.setLatitude(heightInDegrees() * heightCoef + topLeft.second.getLatitude());  location.setLongitude(widthInDegrees() * widthCoef + topLeft.second.getLongitude());}  }
class C{  public static void trimToMbNodes(Graph graph,Node target,boolean includeBidirected){  if (includeBidirected) {    List<Node> pc=graph.getAdjacentNodes(target);    List<Node> children=graph.getNodesOutTo(target,Endpoint.ARROW);    Set<Node> parentsOfChildren=new HashSet<>();    for (    Node v : children) {      for (      Node w : graph.getAdjacentNodes(v)) {        if (w == target) {          continue;        }        if (parentsOfChildren.contains(w)) {          continue;        }        if (pc.contains(w)) {          continue;        }        if (graph.isDefCollider(target,v,w)) {          parentsOfChildren.add(w);        } else         if (graph.getNodesInTo(v,Endpoint.ARROW).contains(target) && graph.isUndirectedFromTo(v,w)) {          parentsOfChildren.add(w);        }      }    }    Set<Node> allRelevantNodes=new HashSet<>();    allRelevantNodes.add(target);    allRelevantNodes.addAll(pc);    allRelevantNodes.addAll(parentsOfChildren);    List<Node> irrelevantNodes=graph.getNodes();    irrelevantNodes.removeAll(allRelevantNodes);    graph.removeNodes(irrelevantNodes);  } else {    List<Node> pc=new LinkedList<>();    for (    Node node : graph.getAdjacentNodes(target)) {      if (graph.isDirectedFromTo(target,node) || graph.isDirectedFromTo(node,target) || graph.isUndirectedFromTo(node,target)) {        pc.add(node);      }    }    List<Node> children=new LinkedList<>();    for (    Node v : graph.getAdjacentNodes(target)) {      if (children.contains(v)) {        continue;      }      if (graph.isDirectedFromTo(target,v)) {        children.add(v);      }    }    Set<Node> parentsOfChildren=new HashSet<>();    for (    Node v : children) {      for (      Node w : graph.getAdjacentNodes(v)) {        if (w == target) {          continue;        }        if (parentsOfChildren.contains(w)) {          continue;        }        if (pc.contains(w)) {          continue;        }        if (graph.isDirectedFromTo(target,v) && graph.isDirectedFromTo(w,v)) {          parentsOfChildren.add(w);        }      }    }    Set<Node> allRelevantNodes=new HashSet<>();    allRelevantNodes.add(target);    allRelevantNodes.addAll(pc);    allRelevantNodes.addAll(parentsOfChildren);    List<Node> irrelevantNodes=graph.getNodes();    irrelevantNodes.removeAll(allRelevantNodes);    graph.removeNodes(irrelevantNodes);  }}  }
class C{  static public boolean isAllowedToAbortMultimediaSession(MultimediaSession multimediaSession) throws RcsPersistentStorageException, RcsGenericException {switch (multimediaSession.getState()) {case STARTED:case INITIATING:case ACCEPTING:case RINGING:    return true;default :  return false;}}  }
class C{  public int hashCode(){  int retval=0;  for (int i=1; i < this.key.length; i++) {    retval+=this.key[i] * i;  }  if (this.algorithm.equalsIgnoreCase("TripleDES"))   return (retval^="desede".hashCode()); else   return (retval^=this.algorithm.toLowerCase(Locale.ENGLISH).hashCode());}  }
class C{  @Override public ValueCollection values(){  return values;}  }
class C{  public static NeuronPropertiesPanel createNeuronPropertiesPanel(final List<Neuron> neuronList,final Window parent){  return createNeuronPropertiesPanel(neuronList,parent,DEFAULT_DISPLAY_UPDATE_RULE_PANEL);}  }
class C{  @Override public boolean dragTo(Selector obj,Selector destObj,int steps) throws UiObjectNotFoundException, NotImplementedException {  return dragTo(device.findObject(obj.toUiSelector()),destObj,steps);}  }
class C{  public static int[] insert(int[] dest,int src,int offset){  int[] temp=new int[dest.length + 1];  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  protected ConcurrentPhase(String name,Timer timer,int atomicScheduledPhase){  super(name,timer);  if (VM.VERIFY_ASSERTIONS) {    VM.assertions._assert(timer == null);  }  this.atomicScheduledPhase=atomicScheduledPhase;  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(getSchedule(this.atomicScheduledPhase) != SCHEDULE_CONCURRENT);}  }
class C{  public static void bArraySet(byte[] a,int i,byte v){  try {    a[i]=v;  } catch (  Throwable t) {    a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)]=v;  }}  }
class C{  public static ChainingJsonParser<ChainingJsonParser<?>> parseJson(InputStream in){  return new ChainingJsonParser<ChainingJsonParser<?>>(in);}  }
class C{  public static Calendar next(Calendar self){  Calendar result=(Calendar)self.clone();  result.add(Calendar.DAY_OF_YEAR,1);  return result;}  }
class C{  public static double normalPDF(double x,double variance,double meanValue){  double standardDeviation=Math.sqrt(variance);  return (1 / (standardDeviation * Math.sqrt(2 * Math.PI))) * Math.pow(Math.E,-((x - meanValue) * (x - meanValue)) / (2 * variance));}  }
class C{  public void testDetectLanguageFa(){  LOGGER.debug("detectLanguage fa");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "fa.wikipedia.org-wiki_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("fa",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("fa",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("fa",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  public static double metersToKilometers(double meter){  return meter * KILOMETER_PER_METER;}  }
class C{  public void removeAllGeofences(PendingIntent intent){  checkPendingIntent(intent);  String packageName=mContext.getPackageName();  try {    mService.removeGeofence(null,intent,packageName);  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException",e);  }}  }
class C{  synchronized void prepareCommit(Session session,String transaction){  if (readOnly) {    return;  }  if (mvStore != null) {    mvStore.prepareCommit(session,transaction);    return;  }  if (pageStore != null) {    pageStore.flushLog();    pageStore.prepareCommit(session,transaction);  }}  }
class C{  public void test_read$CII() throws IOException {  PushbackReader tobj;  char[] buf=("01234567890123456789").toCharArray();  tobj=new PushbackReader(underlying);  tobj.read(buf,6,5);  assertEquals("Wrong value read!","BEGIN",new String(buf,6,5));  assertEquals("Too much read!","012345BEGIN123456789",new String(buf));  underlying.throwExceptionOnNextUse=true;  try {    tobj.read(buf,6,5);    fail("IOException not thrown.");  } catch (  IOException e) {  }  try {    char[] c=new char[5];    pbr.read(c,0,5);    assertTrue("Failed to read chars",new String(c).equals(pbString.substring(0,5)));    assertEquals(0,pbr.read(c,0,0));    assertEquals(c.length,pbr.read(c,0,c.length));    assertEquals(0,pbr.read(c,c.length,0));  } catch (  IOException e) {    fail("IOException during read test : " + e.getMessage());  }}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  protected boolean isAffectingReplace(){  return fLength > 0 && fReplaceLength > 0 && fPosition.length < fOriginalPosition.length;}  }
class C{  private void drawTranslatedRenderedImage(RenderedImage img,Rectangle region,int i2uTransX,int i2uTransY){  int tileGridXOffset=img.getTileGridXOffset();  int tileGridYOffset=img.getTileGridYOffset();  int tileWidth=img.getTileWidth();  int tileHeight=img.getTileHeight();  int minTileX=getTileIndex(region.x,tileGridXOffset,tileWidth);  int minTileY=getTileIndex(region.y,tileGridYOffset,tileHeight);  int maxTileX=getTileIndex(region.x + region.width - 1,tileGridXOffset,tileWidth);  int maxTileY=getTileIndex(region.y + region.height - 1,tileGridYOffset,tileHeight);  ColorModel colorModel=img.getColorModel();  Rectangle tileRect=new Rectangle();  for (int ty=minTileY; ty <= maxTileY; ty++) {    for (int tx=minTileX; tx <= maxTileX; tx++) {      Raster raster=img.getTile(tx,ty);      tileRect.x=tx * tileWidth + tileGridXOffset;      tileRect.y=ty * tileHeight + tileGridYOffset;      tileRect.width=tileWidth;      tileRect.height=tileHeight;      clipTo(tileRect,region);      WritableRaster wRaster=null;      if (raster instanceof WritableRaster) {        wRaster=(WritableRaster)raster;      } else {        wRaster=Raster.createWritableRaster(raster.getSampleModel(),raster.getDataBuffer(),null);      }      wRaster=wRaster.createWritableChild(tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,null);      BufferedImage bufImg=new BufferedImage(colorModel,wRaster,colorModel.isAlphaPremultiplied(),null);      copyImage(bufImg,tileRect.x + i2uTransX,tileRect.y + i2uTransY,0,0,tileRect.width,tileRect.height,null,null);    }  }}  }
class C{  public boolean isValid(String str){  String strMatch=str;  Matcher matcher=null;  if (strMatch == null) {    if (getMandatory() == MANDATORY) {      return false;    } else {      return true;    }  } else {    strMatch=strMatch.trim();    System.out.println("strMatch = " + strMatch);    if (strMatch.equals("")) {      System.out.println("1");      if (getMandatory() == MANDATORY) {        System.out.println("2");        return false;      } else {        System.out.println("3");        return true;      }    } else {      System.out.println("strMatch = " + strMatch);      strMatch=insertRequiredSpace(strMatch).toUpperCase();      System.out.println("validating:" + strMatch);      matcher=pattern.matcher(strMatch);      return matcher.matches();    }  }}  }
class C{  public static boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  protected final void openSessionForRead(String applicationId,List<String> permissions,SessionLoginBehavior behavior,int activityCode){  openSession(applicationId,permissions,behavior,activityCode,SessionAuthorizationType.READ);}  }
class C{  @NonNull public static <T>Optional<T> of(@NonNull T value){  return new Optional<>(checkNotNull(value));}  }
class C{  public void testGetMinCRL(){  X509CRLSelector selector=new X509CRLSelector();  assertNull("Initially the minCRL should be null.",selector.getMinCRL());  BigInteger minCRL=new BigInteger("10000");  selector.setMinCRLNumber(minCRL);  assertTrue("The result should be equal to specified.",minCRL.equals(selector.getMinCRL()));}  }
class C{  @Override public void write(DataOutput out) throws IOException {  this.value.write(out);}  }
class C{  public final void connectProxy(HttpHost proxy,boolean secure){  if (proxy == null) {    throw new IllegalArgumentException("Proxy host may not be null.");  }  if (this.connected) {    throw new IllegalStateException("Already connected.");  }  this.connected=true;  this.proxyChain=new HttpHost[]{proxy};  this.secure=secure;}  }
class C{  public Sector(Angle minLatitude,Angle maxLatitude,Angle minLongitude,Angle maxLongitude){  if (minLatitude == null || maxLatitude == null || minLongitude == null || maxLongitude == null) {    String message=Logging.getMessage("nullValue.InputAnglesNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.minLatitude=minLatitude;  this.maxLatitude=maxLatitude;  this.minLongitude=minLongitude;  this.maxLongitude=maxLongitude;  this.deltaLat=Angle.fromDegrees(this.maxLatitude.degrees - this.minLatitude.degrees);  this.deltaLon=Angle.fromDegrees(this.maxLongitude.degrees - this.minLongitude.degrees);}  }
class C{  @CanIgnoreReturnValue public Stopwatch reset(){  elapsedNanos=0;  isRunning=false;  return this;}  }
class C{  public void doEscalate(boolean user){  if (user) {    String Importance=getPriorityUser();    if (PRIORITYUSER_Urgent.equals(Importance))     ; else     if (PRIORITYUSER_High.equals(Importance))     setPriorityUser(PRIORITYUSER_Urgent); else     if (PRIORITYUSER_Medium.equals(Importance))     setPriorityUser(PRIORITYUSER_High); else     if (PRIORITYUSER_Low.equals(Importance))     setPriorityUser(PRIORITYUSER_Medium); else     if (PRIORITYUSER_Minor.equals(Importance))     setPriorityUser(PRIORITYUSER_Low);  } else {    String Importance=getPriority();    if (PRIORITY_Urgent.equals(Importance))     ; else     if (PRIORITY_High.equals(Importance))     setPriority(PRIORITY_Urgent); else     if (PRIORITY_Medium.equals(Importance))     setPriority(PRIORITY_High); else     if (PRIORITY_Low.equals(Importance))     setPriority(PRIORITY_Medium); else     if (PRIORITY_Minor.equals(Importance))     setPriority(PRIORITY_Low);  }}  }
class C{  void _usePrivates(){  System.out.print(yycolumn);  System.out.print(yyline);  System.out.print(Boolean.toString(zzAtBOL));}  }
class C{  public void removeDockingPosition(int x,int y,int z){  BlockPosition pos=new BlockPosition(x,y,z);  dockingPoints.remove(pos);}  }
class C{  public void threadDump(){  if (canDumpLocks) {    if (tmbean.isObjectMonitorUsageSupported() && tmbean.isSynchronizerUsageSupported()) {      dumpThreadInfoWithLocks();    }  } else {    dumpThreadInfo();  }}  }
class C{  protected int createCharge(String name,int elementValueId){  MCharge charge;  MAccount account;  log.config(name + " - ");  charge=new MCharge(Env.getCtx(),0,null);  charge.setName(name);  charge.setC_TaxCategory_ID(m_C_TaxCategory_ID);  if (!charge.save()) {    log.log(Level.SEVERE,name + " not created");    return 0;  }  refreshAccountSchema();  if (!isAccountSchemaValid()) {    return 0;  }  account=getAccount(elementValueId,charge);  if (account == null) {    return 0;  }  updateAccount(charge,account);  return charge.getC_Charge_ID();}  }
class C{  public void assertBusinessObjectDataStatusEquals(String expectedBusinessObjectDataStatusCode,BusinessObjectDataEntity businessObjectDataEntity) throws IllegalArgumentException {  String businessObjectDataStatusCode=businessObjectDataEntity.getStatus().getCode();  Assert.isTrue(expectedBusinessObjectDataStatusCode.equals(businessObjectDataStatusCode),String.format("Business object data status \"%s\" does not match the expected status \"%s\" for the business object data {%s}.",businessObjectDataStatusCode,expectedBusinessObjectDataStatusCode,businessObjectDataEntityAltKeyToString(businessObjectDataEntity)));}  }
class C{  private String checkLogin(Properties ctx,int AD_User_ID,int AD_Role_ID,int AD_Client_ID,int AD_Org_ID,int M_Warehouse_ID){  String loginInfo=null;  String sql="SELECT u.Name || '@' || c.Name || '.' || o.Name || ' [' || INITCAP(USER) || ']' AS Text " + "FROM AD_User u, AD_Client c, AD_Org o, AD_User_Roles ur " + "WHERE u.AD_User_ID=?"+ " AND c.AD_Client_ID=?"+ " AND o.AD_Org_ID=?"+ " AND ur.AD_Role_ID=?"+ " AND ur.AD_User_ID=u.AD_User_ID"+ " AND (o.AD_Client_ID = 0 OR o.AD_Client_ID=c.AD_Client_ID)"+ " AND c.AD_Client_ID IN (SELECT AD_Client_ID FROM AD_Role_OrgAccess ca WHERE ca.AD_Role_ID=ur.AD_Role_ID)"+ " AND o.AD_Org_ID IN (SELECT AD_Org_ID FROM AD_Role_OrgAccess ca WHERE ca.AD_Role_ID=ur.AD_Role_ID)";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_User_ID);    pstmt.setInt(2,AD_Client_ID);    pstmt.setInt(3,AD_Org_ID);    pstmt.setInt(4,AD_Role_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     loginInfo=rs.getString(1);    rs.close();    pstmt.close();  } catch (  SQLException e) {  }  if (loginInfo == null)   return null;  KeyNamePair org=new KeyNamePair(AD_Org_ID,String.valueOf(AD_Org_ID));  KeyNamePair wh=null;  if (M_Warehouse_ID > 0)   wh=new KeyNamePair(M_Warehouse_ID,String.valueOf(M_Warehouse_ID));  Timestamp date=null;  String printer=null;  Login login=new Login(ctx);  login.loadPreferences(org,wh,date,printer);  Env.setContext(ctx,"#ShowAcct","N");  Env.setContext(ctx,"#ShowTrl","N");  return loginInfo;}  }
class C{  public FilePopupMenu(FileTextArea w){  JMenuItem item;  add(item=new JMenuItem("Set Breakpoint"));  item.addActionListener(w);  add(item=new JMenuItem("Clear Breakpoint"));  item.addActionListener(w);  add(item=new JMenuItem("Run"));  item.addActionListener(w);}  }
class C{  public void clear(){  _head=null;  _tail=null;}  }
class C{  public static RegexpElement union(RegexpElement e1,RegexpElement e2){  if (e1 instanceof NullElement) {    return e2;  } else   if (e2 instanceof NullElement) {    return e1;  } else   if (e1.equals(e2)) {    return e1;  } else {    return new UnionElement(e1,e2);  }}  }
class C{  public DtoProductTypeAttrServiceImpl(final DtoFactory dtoFactory,final GenericService<ProductTypeAttr> productTypeAttrGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,productTypeAttrGenericService,adaptersRepository);}  }
class C{  private static int GetByteField(JNIEnvironment env,int objJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetByteField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getByteValueUnchecked(obj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  private static void decodeC40Segment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < C40_BASIC_SET_CHARS.length) {          char c40char=C40_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(c40char + 128));            upperShift=false;          } else {            result.append(c40char);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (upperShift) {result.append((char)(cValue + 224));upperShift=false;} else {result.append((char)(cValue + 96));}shift=0;break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  public void addTraceListener(JIPTraceListener traceListener){  m_eventNotifier.addTraceListener(traceListener);}  }
class C{  protected N4EnumDeclarationImpl(){  super();}  }
class C{  public JobMediaSheets(int value){  super(value,0,Integer.MAX_VALUE);}  }
class C{  public Matrix4d m01(double m01){  this.m01=m01;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  public static void assertBetween(int value,int lowerBound,int upperBound){  assertBetween(value,lowerBound,upperBound,"");}  }
class C{  public static void sort(int[] data,Comparator<? super DBIDRef> comp){  sort(data,0,data.length,comp);}  }
class C{  public static boolean isNumeric(TypeMirror type){switch (type.getKind()) {case BYTE:case CHAR:case DOUBLE:case FLOAT:case INT:case LONG:case SHORT:    return true;default :  return false;}}  }
class C{  public int nextInt(){  int max=_basis.lastInt();  int nextint=max - _zipfian.nextInt(max);  setLastInt(nextint);  return nextint;}  }
class C{  private void loadRowsStandard(){  adapter=new ArrayObjectAdapter(new ListRowPresenter());  for (  Video[] categoryVideos : videoList) {    ArrayObjectAdapter videoCategoryAdapter=new ArrayObjectAdapter(new VideoPresenter());    videoCategoryAdapter.addAll(0,Arrays.asList(categoryVideos));    ListRow row=new ListRow(new HeaderItem(categoryVideos[0].category),videoCategoryAdapter);    adapter.add(row);  }  if (useStockBrowseFragment) {    if (useSupportVersion) {      browseStockSupportFragment.setAdapter(adapter);      browseStockSupportFragment.setOnItemViewClickedListener(browseClickListener);      browseStockSupportFragment.setOnSearchClickedListener(searchClickListener);      browseStockSupportFragment.setTitle("Google Videos");    } else {      browseStockFragment.setAdapter(adapter);      browseStockFragment.setOnItemViewClickedListener(browseClickListener);      browseStockFragment.setOnSearchClickedListener(searchClickListener);      browseStockFragment.setTitle("Google Videos");    }  } else {    if (useSupportVersion) {      browseSupportFragment.setAdapter(adapter);      browseSupportFragment.setOnItemViewClickedListener(browseClickListener);      browseSupportFragment.setOnSearchClickedListener(searchClickListener);      browseSupportFragment.setTitle("Google Videos");    } else {      browseFragment.setAdapter(adapter);      browseFragment.setOnItemViewClickedListener(browseClickListener);      browseFragment.setOnSearchClickedListener(searchClickListener);      browseFragment.setTitle("Google Videos");    }  }}  }
class C{  protected List<NamedList<Object>> doPivots(NamedList<Integer> superFacets,String field,String subField,Deque<String> fnames,Deque<String> vnames,DocSet docs) throws IOException {  SolrIndexSearcher searcher=rb.req.getSearcher();  SchemaField sfield=searcher.getSchema().getField(field);  FieldType ftype=sfield.getType();  String nextField=fnames.poll();  BytesRef termval=new BytesRef();  List<NamedList<Object>> values=new ArrayList<>(superFacets.size());  for (  Map.Entry<String,Integer> kv : superFacets) {    if (kv.getValue() >= getMinCountForField(field)) {      final String fieldValue=kv.getKey();      SimpleOrderedMap<Object> pivot=new SimpleOrderedMap<>();      pivot.add("field",field);      if (null == fieldValue) {        pivot.add("value",null);      } else {        ftype.readableToIndexed(fieldValue,termval);        pivot.add("value",ftype.toObject(sfield,termval));      }      pivot.add("count",kv.getValue());      DocSet subset=getSubset(docs,sfield,fieldValue);      if (subField != null) {        NamedList<Integer> facetCounts;        if (!vnames.isEmpty()) {          String val=vnames.pop();          facetCounts=new NamedList<Integer>();          facetCounts.add(val,getSubsetSize(subset,searcher.getSchema().getField(subField),val));        } else {          facetCounts=this.getTermCountsForPivots(subField,subset);        }        if (facetCounts.size() >= 1) {          pivot.add("pivot",doPivots(facetCounts,subField,nextField,fnames,vnames,subset));        }      }      values.add(pivot);    }  }  fnames.push(nextField);  return values;}  }
class C{  public SerialDatalink(URL url) throws SerialException {  if (url == null) {    throw new SerialException("Cannot serialize empty URL instance");  }  this.url=url;}  }
class C{  private boolean processCacheParameter(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String cmd=WebUtil.getParameter(request,"CacheReset");  if (cmd == null || cmd.length() == 0)   return false;  String tableName=WebUtil.getParameter(request,"CacheTableName");  String record_ID=WebUtil.getParameter(request,"CacheRecord_ID");  m_message=new p();  try {    if (tableName == null || tableName.length() == 0) {      CacheMgt.get().reset();      m_message.addElement("Cache Reset: All");    } else     if (record_ID == null || record_ID.length() == 0) {      CacheMgt.get().reset(tableName);      m_message.addElement("Cache Reset: " + tableName);    } else {      CacheMgt.get().reset(tableName,Integer.parseInt(record_ID));      m_message.addElement("Cache Reset: " + tableName + ", Record_ID="+ record_ID);    }  } catch (  Exception e) {    log.severe(e.toString());    m_message.addElement("Error: " + e.toString());  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:16.156 -0400",hash_original_method="C6DF9312E9CF5AE81F7583129B2BF607",hash_generated_method="1BEFFDE500A83101243FAB0DA60594B3") public void addIssuer(X500Principal issuer){  if (issuer == null) {    throw new NullPointerException("issuer == null");  }  if (issuerNames == null) {    issuerNames=new ArrayList<String>();  }  String name=issuer.getName(X500Principal.CANONICAL);  if (!issuerNames.contains(name)) {    issuerNames.add(name);  }  if (issuerPrincipals == null) {    issuerPrincipals=new ArrayList<X500Principal>(issuerNames.size());  }  int size=issuerNames.size() - 1;  for (int i=issuerPrincipals.size(); i < size; i++) {    issuerPrincipals.add(new X500Principal(issuerNames.get(i)));  }  issuerPrincipals.add(issuer);}  }
class C{  public final Object pop(){  Object result=this.first.value;  this.first=this.first.next;  if (this.first == null)   this.last=null;  return result;}  }
class C{  public int rtf(){  return DTM.NULL;}  }
class C{  private boolean isNotSpendingTxnsInConfidenceType(Transaction tx,ConfidenceType confidenceType){  for (  TransactionInput txInput : tx.getInputs()) {    Transaction connectedTx=this.getTransaction(txInput.getOutpoint().getHash());    if (connectedTx != null && connectedTx.getConfidence().getConfidenceType().equals(confidenceType)) {      return false;    }  }  return true;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:07.633 -0500",hash_original_method="4991C56903C24C085B034589D2617CA7",hash_generated_method="4991C56903C24C085B034589D2617CA7") boolean isMulticastSocket(){  return false;}  }
class C{  private void configureServer(ServerBartender server){  ServerNetwork serverNet=_serverMap.get(server.getId());  if (serverNet == null) {    serverNet=new ServerNetwork(_system,server);    configServer(serverNet,server);    serverNet.init();    _serverMap.put(server.getId(),serverNet);  }}  }
class C{  @Override public void plotChanged(PlotChangeEvent event){  this.lastEvent=event;}  }
class C{  protected Set<String> removeEmptyAndNullValues(Set<String> paths){  return paths.stream().filter(null).collect(Collectors.toSet());}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean updateEntity(final Datastore datastore,final Key key,final List<Property> properties) throws DatastoreException {  Entity entity=getEntity(datastore,key);  if (entity != null) {    Entity.Builder updatedEntity=Entity.newBuilder(entity);    updatedEntity.clearProperty();    for (    Property prop : entity.getPropertyList()) {      boolean found=false;      for (      Property updatedProp : properties) {        if (updatedProp.getName().equals(prop.getName())) {          updatedEntity.addProperty(updatedProp);          found=true;        }      }      if (!found) {        updatedEntity.addProperty(prop);      }    }    CommitRequest request=CommitRequest.newBuilder().setMode(CommitRequest.Mode.NON_TRANSACTIONAL).setMutation(Mutation.newBuilder().addUpdate(updatedEntity)).build();    CommitResponse response=datastore.commit(request);    return response.getMutationResult().getIndexUpdates() > 0;  }  return false;}  }
class C{  public ScannerException(File file,ErrorMessages message,int line,int column){  this(file,ErrorMessages.get(message),message,line,column);}  }
class C{  protected int string1() throws IOException {  start=position;  loop:   for (; ; ) {switch (nextChar()) {case -1:      throw new ParseException("eof",reader.getLine(),reader.getColumn());case '\'':    break loop;case '"':  break;case '\\':switch (nextChar()) {case '\n':case '\f':  break;default :escape();}break;default :if (!ScannerUtilities.isCSSStringCharacter((char)current)) {throw new ParseException("character",new Object[]{new Character((char)current)},reader.getLine(),reader.getColumn());}}}nextChar();return LexicalUnits.STRING;}  }
class C{  public boolean addToHistory(){  return addToHistory(m_Editor.getValue());}  }
class C{  public Meeting(){  this("meeting",null);}  }
class C{  public JXPanel(){}  }
class C{  boolean isPerfect(char parent,GPNode node,EvolutionState state){  char node_fn=((RoyalTreeNode)node).value();  if (!isSuccessor(parent,node_fn,state)) {    return false;  }  for (int i=0; i < node.children.length; i++) {    GPNode child=node.children[i];    if (!isPerfect(node_fn,child,state)) {      return false;    }  }  return true;}  }
class C{  public static ContentValues buildContentValues(File formDefFile) throws IllegalArgumentException {  ContentValues updateValues=new ContentValues();  HashMap<String,String> fields=null;  try {    fields=FileUtils.parseXML(formDefFile);  } catch (  RuntimeException e) {    throw new IllegalArgumentException(formDefFile.getName() + " :: " + e.toString());  }  String title=fields.get(FileUtils.TITLE);  String version=fields.get(FileUtils.VERSION);  String formid=fields.get(FileUtils.FORMID);  String submission=fields.get(FileUtils.SUBMISSIONURI);  String base64RsaPublicKey=fields.get(FileUtils.BASE64_RSA_PUBLIC_KEY);  Long now=Long.valueOf(System.currentTimeMillis());  updateValues.put(FormsColumns.DATE,now);  if (title != null) {    updateValues.put(FormsColumns.DISPLAY_NAME,title);  } else {    throw new IllegalArgumentException(Collect.getInstance().getApplication().getString(R.string.xform_parse_error,formDefFile.getName(),"title"));  }  if (formid != null) {    updateValues.put(FormsColumns.JR_FORM_ID,formid);  } else {    throw new IllegalArgumentException(Collect.getInstance().getApplication().getString(R.string.xform_parse_error,formDefFile.getName(),"id"));  }  if (version != null) {    updateValues.put(FormsColumns.JR_VERSION,version);  }  if (submission != null) {    updateValues.put(FormsColumns.SUBMISSION_URI,submission);  }  if (base64RsaPublicKey != null) {    updateValues.put(FormsColumns.BASE64_RSA_PUBLIC_KEY,base64RsaPublicKey);  }  updateValues.put(FormsColumns.FORM_FILE_PATH,formDefFile.getAbsolutePath());  return updateValues;}  }
class C{  public static TokenKeysBundle createNewTokenKeysBundle() throws NoSuchAlgorithmException {  SecretKey proxyTokenKey=generateNewKey(TOKEN_SIGNING_ALGO);  return new TokenKeysBundle(getNewKeyPair(),proxyTokenKey);}  }
class C{  @Override public synchronized int addAttribute(Attribute attribute){  int index=super.addAttribute(attribute);  if (dataList == null) {    return index;  }  int n=getNumberOfAttributes();  if (n <= columns) {    return index;  }  int newSize=n + INCREMENT;  LogService.getRoot().log(Level.FINE,"com.rapidminer.example.table.MemoryExampleTable.rezising_example_table",new Object[]{columns,newSize});  columns=newSize;  if (dataList != null) {    Iterator<DataRow> i=dataList.iterator();    while (i.hasNext()) {      i.next().ensureNumberOfColumns(columns);    }  }  return index;}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();switch (c) {case 0:case '\n':case '\r':      throw this.syntaxError("Unterminated string");case '\\':    c=this.next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(this.next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw this.syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  public CLabel(String text,Icon icon,int horizontalAlignment){  super(text,icon,horizontalAlignment);  init();}  }
class C{  public void sort(){  Collections.sort(m_docIds);  DocumentalSearchRowResult documentalSearchRowResult;  int lastArchive=Integer.MIN_VALUE, lastFolder=Integer.MIN_VALUE, lastDocument=Integer.MIN_VALUE;  Iterator iterator=m_docIds.iterator();  while (iterator.hasNext()) {    documentalSearchRowResult=(DocumentalSearchRowResult)iterator.next();    if (lastArchive == documentalSearchRowResult.getArchId() && lastFolder == documentalSearchRowResult.getFdrId() && lastDocument == documentalSearchRowResult.getDocId()) {      iterator.remove();    }    lastArchive=documentalSearchRowResult.getArchId();    lastFolder=documentalSearchRowResult.getFdrId();    lastDocument=documentalSearchRowResult.getDocId();  }}  }
class C{  @Override public void endElement(String namespaceURI,String localName,String qName){  if (this.parent instanceof PieDatasetHandler) {    PieDatasetHandler handler=(PieDatasetHandler)this.parent;    handler.addItem(this.key,this.value);    this.root.popSubHandler();  } else   if (this.parent instanceof CategorySeriesHandler) {    CategorySeriesHandler handler=(CategorySeriesHandler)this.parent;    handler.addItem(this.key,this.value);    this.root.popSubHandler();  }}  }
class C{  public void testIssue1313() throws Exception {  HtmlPage page=getPage("/faces/facelets/issue1313.xhtml");  List<HtmlDivision> divs=new ArrayList<HtmlDivision>();  getAllElementsOfGivenClass(page,divs,HtmlDivision.class);  validateToggleState1(divs);  HtmlSubmitInput input=(HtmlSubmitInput)getInputContainingGivenId(page,"form:nonajax");  assertNotNull(input);  page=input.click();  divs.clear();  getAllElementsOfGivenClass(page,divs,HtmlDivision.class);  validateToggleState2(divs);  input=(HtmlSubmitInput)getInputContainingGivenId(page,"form:ajax");  assertNotNull(input);  page=input.click();  divs.clear();  getAllElementsOfGivenClass(page,divs,HtmlDivision.class);  validateToggleState1(divs);  input=(HtmlSubmitInput)getInputContainingGivenId(page,"form:nonajax");  assertNotNull(input);  page=input.click();  divs.clear();  getAllElementsOfGivenClass(page,divs,HtmlDivision.class);  validateToggleState2(divs);  input=(HtmlSubmitInput)getInputContainingGivenId(page,"form:ajax");  assertNotNull(input);  page=input.click();  divs.clear();  getAllElementsOfGivenClass(page,divs,HtmlDivision.class);  validateToggleState1(divs);}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  Instances result;  Attribute att;  ArrayList<Attribute> atts;  int i;  m_AttributeIndices.setUpper(inputFormat.numAttributes() - 1);  atts=new ArrayList<Attribute>();  for (i=0; i < inputFormat.numAttributes(); i++) {    att=inputFormat.attribute(i);    if (m_AttributeIndices.isInRange(i)) {      if (m_ReplaceAll) {        atts.add(att.copy(att.name().replaceAll(m_Find,m_Replace)));      } else {        atts.add(att.copy(att.name().replaceFirst(m_Find,m_Replace)));      }    } else {      atts.add((Attribute)att.copy());    }  }  result=new Instances(inputFormat.relationName(),atts,0);  result.setClassIndex(inputFormat.classIndex());  return result;}  }
class C{  public ReferenceSyntaxException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void loadAIMLAsLog(String text,boolean pin){  long start=System.currentTimeMillis();  Network network=getBot().memory().newMemory();  AIMLParser.parser().parseAIML(text,false,false,pin,false,null,network);  network.save();  log("AIML parsing time",Level.INFO,System.currentTimeMillis() - start);}  }
class C{  @Override public void run(){  final Bug bug=new Bug(module,bugCollectionRef.get(),bugRef.get());  MessageBusManager.publishNewBug(_project,bug,analyzedClassCount);}  }
class C{  public static BigDecimal convertBase(SetGetModel model,String DateName,String SourceAmtName,String AmtName,String changedColumnName){  if (changedColumnName != null && "C_Currency_ID".equalsIgnoreCase(changedColumnName)) {    model.set_AttrValue("CurrencyRate",Env.ZERO);  }  BigDecimal sourceAmt=SetGetUtil.get_AttrValueAsBigDecimal(model,SourceAmtName);  if (sourceAmt == null || sourceAmt.signum() == 0) {    if (AmtName != null) {      model.set_AttrValue(AmtName,Env.ZERO);    }    return Env.ZERO;  }  int AD_Client_ID=SetGetUtil.get_AttrValueAsInt(model,"AD_Client_ID");  int C_Currency_ID_To=MClient.get(model.getCtx(),AD_Client_ID).getAcctSchema().getC_Currency_ID();  BigDecimal rate=SetGetUtil.get_AttrValueAsBigDecimal(model,"CurrencyRate");  if (rate == null || rate.signum() == 0) {    int AD_Org_ID=SetGetUtil.get_AttrValueAsInt(model,"AD_Client_ID");    Timestamp ConvDate=SetGetUtil.get_AttrValueAsDate(model,DateName);    int C_Currency_ID=SetGetUtil.get_AttrValueAsInt(model,"C_Currency_ID");    if (C_Currency_ID == C_Currency_ID_To) {      rate=Env.ONE;    } else {      int C_ConversionType_ID=SetGetUtil.get_AttrValueAsInt(model,"C_ConversionType_ID");      rate=MConversionRate.getRate(C_Currency_ID,C_Currency_ID_To,ConvDate,C_ConversionType_ID,AD_Client_ID,AD_Org_ID);      if (rate == null) {        throw new NoCurrencyConversionException(C_Currency_ID,C_Currency_ID_To,ConvDate,C_ConversionType_ID,AD_Client_ID,AD_Org_ID);      }    }  }  model.set_AttrValue("CurrencyRate",rate);  BigDecimal amt=sourceAmt.multiply(rate);  int stdPrecision=MCurrency.getStdPrecision(model.getCtx(),C_Currency_ID_To);  amt=amt.setScale(stdPrecision,RoundingMode.HALF_UP);  if (AmtName != null)   model.set_AttrValue(AmtName,amt);  if (CLogMgt.isLevelFine())   s_log.fine("amt=" + sourceAmt + " * "+ rate+ "="+ amt+ ", scale="+ stdPrecision);  return amt;}  }
class C{  @SuppressLint("InlinedApi") public static void startInstalledAppDetails(Context context,String packageName){  Intent intent=new Intent();  int sdkVersion=Build.VERSION.SDK_INT;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {    intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);    intent.setData(Uri.fromParts("package",packageName,null));  } else {    intent.setAction(Intent.ACTION_VIEW);    intent.setClassName("com.android.settings","com.android.settings.InstalledAppDetails");    intent.putExtra((sdkVersion == Build.VERSION_CODES.FROYO ? "pkg" : "com.android.settings.ApplicationPkgName"),packageName);  }  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);}  }
class C{  public void endVisit(WhileStatement node){}  }
class C{  @Override public List<T> next(){  currentIndex++;  currentSubSet.clear();  for (int index=1; index <= length; index++) {    if (bitVector[index] == 1) {      T value=this.generator.originalVector.get(index - 1);      currentSubSet.add(value);    }  }  int i=1;  while (bitVector[i] == 1) {    bitVector[i]=0;    i++;  }  bitVector[i]=1;  return new ArrayList<>(currentSubSet);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.TYPE_INFO__FIRST:    return first != null;case GamlPackage.TYPE_INFO__SECOND:  return second != null;}return super.eIsSet(featureID);}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public ClassConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  private void fetchUpdate(CallbackContext jsCallback,FetchUpdateOptions fetchOptions){  if (!isPluginReadyForWork) {    return;  }  Map<String,String> requestHeaders=null;  String configURL=chcpXmlConfig.getConfigUrl();  if (fetchOptions == null) {    fetchOptions=defaultFetchUpdateOptions;  }  if (fetchOptions != null) {    requestHeaders=fetchOptions.getRequestHeaders();    final String optionalConfigURL=fetchOptions.getConfigURL();    if (!TextUtils.isEmpty(optionalConfigURL)) {      configURL=optionalConfigURL;    }  }  final UpdateDownloadRequest request=UpdateDownloadRequest.builder(cordova.getActivity()).setConfigURL(configURL).setCurrentNativeVersion(chcpXmlConfig.getNativeInterfaceVersion()).setCurrentReleaseVersion(pluginInternalPrefs.getCurrentReleaseVersionName()).setRequestHeaders(requestHeaders).build();  final ChcpError error=UpdatesLoader.downloadUpdate(request);  if (error != ChcpError.NONE) {    if (jsCallback != null) {      PluginResult errorResult=PluginResultHelper.createPluginResult(UpdateDownloadErrorEvent.EVENT_NAME,null,error);      jsCallback.sendPluginResult(errorResult);    }    return;  }  if (jsCallback != null) {    downloadJsCallback=jsCallback;  }}  }
class C{  @Override public void clean(int numberToClean){  logger.info("Attempting to delete the last {} records for key {}",numberToClean,key);  VersionedKey currentVersionedKey=loadKeyFromS3();  long start=0;  if (numberToClean != -1)   start=currentVersionedKey.getVersion() - numberToClean;  for (long i=start; i < currentVersionedKey.getVersion(); i++) {    delete(currentVersionedKey.withVersion(i).toJson());  }  logger.info("Finished deleting the last {} records for key {}",numberToClean,key);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  boolean state;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(2);  ((Element)testNode).removeAttribute("street");  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  assertNotNull("streetAttrNotNull",streetAttr);  state=streetAttr.getSpecified();  assertFalse("attrSpecifiedValueRemoveAssert",state);}  }
class C{  protected boolean isDhcpPacket(Ethernet frame){  IPacket payload=frame.getPayload();  if (payload == null)   return false;  IPacket p2=payload.getPayload();  if (p2 == null)   return false;  IPacket p3=p2.getPayload();  if ((p3 != null) && (p3 instanceof DHCP))   return true;  return false;}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockForm(BlockFormEvent event){  handleStateChange(event.getWorld(),event.getBlock(),event,event,event.getNewState());}  }
class C{  public static void writeFFTBenchmarkResultsToFile(String filename,int nthread,int niter,boolean doWarmup,boolean doScaling,int[] sizes,double[] times){  String[] properties={"os.name","os.version","os.arch","java.vendor","java.version"};  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename,false));    out.write(new Date().toString());    out.newLine();    out.write("System properties:");    out.newLine();    out.write("\tos.name = " + System.getProperty(properties[0]));    out.newLine();    out.write("\tos.version = " + System.getProperty(properties[1]));    out.newLine();    out.write("\tos.arch = " + System.getProperty(properties[2]));    out.newLine();    out.write("\tjava.vendor = " + System.getProperty(properties[3]));    out.newLine();    out.write("\tjava.version = " + System.getProperty(properties[4]));    out.newLine();    out.write("\tavailable processors = " + Runtime.getRuntime().availableProcessors());    out.newLine();    out.write("Settings:");    out.newLine();    out.write("\tused processors = " + nthread);    out.newLine();    out.write("\tTHREADS_BEGIN_N_2D = " + ConcurrencyUtils.getThreadsBeginN_2D());    out.newLine();    out.write("\tTHREADS_BEGIN_N_3D = " + ConcurrencyUtils.getThreadsBeginN_3D());    out.newLine();    out.write("\tnumber of iterations = " + niter);    out.newLine();    out.write("\twarm-up performed = " + doWarmup);    out.newLine();    out.write("\tscaling performed = " + doScaling);    out.newLine();    out.write("--------------------------------------------------------------------------------------------------");    out.newLine();    out.write("sizes=[");    for (int i=0; i < sizes.length; i++) {      out.write(Integer.toString(sizes[i]));      if (i < sizes.length - 1) {        out.write(", ");      } else {        out.write("]");      }    }    out.newLine();    out.write("times(in msec)=[");    for (int i=0; i < times.length; i++) {      out.write(String.format("%.2f",times[i]));      if (i < times.length - 1) {        out.write(", ");      } else {        out.write("]");      }    }    out.newLine();    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void addGetfield(String c,String name,String type){  add(GETFIELD);  int ci=constPool.addClassInfo(c);  addIndex(constPool.addFieldrefInfo(ci,name,type));  growStack(Descriptor.dataSize(type) - 1);}  }
class C{  private void checkAndResolveCorrectSync(){  this.checkAndResolveCorrectSyncFeatureAndPermission(FEATURE_KEY_PREF_CONTACTS);  this.checkAndResolveCorrectSyncFeatureAndPermission(FEATURE_KEY_PREF_DIALER);}  }
class C{  void selectType(Environment env,Context ctx,int tm){  if ((tm & TM_DOUBLE) != 0) {    type=Type.tDouble;  } else   if ((tm & TM_FLOAT) != 0) {    type=Type.tFloat;  } else   if ((tm & TM_LONG) != 0) {    type=Type.tLong;  } else {    type=Type.tInt;  }  right=convert(env,ctx,type,right);}  }
class C{  static float max(float red,float green,float blue){  float max=(red > green) ? red : green;  return (max > blue) ? max : blue;}  }
class C{  public double[] computeLocalFromPreviousObservations(int[] var1,int[] var2) throws Exception {  if (var1.length != var2.length) {    throw new Exception("var1 and var2 must have the same number of observations");  }  double[] localMI=new double[var1.length - timeDiff];  double logTerm=0.0;  for (int r=timeDiff; r < var1.length; r++) {    int iVal=var1[r - timeDiff];    int jVal=var2[r];    logTerm=((double)jointCount[iVal][jVal]) / ((double)jCount[jVal] * (double)iCount[iVal]);    logTerm*=(double)observations;    localMI[r]=Math.log(logTerm) / log_2;    average+=localMI[r];    if (localMI[r] > max) {      max=localMI[r];    } else     if (localMI[r] < min) {      min=localMI[r];    }  }  average=average / (double)observations;  miComputed=true;  return localMI;}  }
class C{  @Override @Inline public void release(Address start){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(false);}  }
class C{  public Tasks<BlockConsistencyGroupRestRep> failoverCancel(URI consistencyGroupId,CopiesParam input){  final String url=getIdUrl() + "/protection/continuous-copies/failover-cancel";  return postTasks(input,url,consistencyGroupId);}  }
class C{  private FlowSizeSpec calcRowsOrColsSizes(boolean isHor){  ArrayList<LinkedDimGroup>[] groupsLists=isHor ? colGroupLists : rowGroupLists;  Float[] defPush=isHor ? pushXs : pushYs;  int refSize=isHor ? container.getWidth() : container.getHeight();  BoundSize cSz=isHor ? lc.getWidth() : lc.getHeight();  if (cSz.isUnset() == false)   refSize=cSz.constrain(refSize,getParentSize(container,isHor),container);  DimConstraint[] primDCs=(isHor ? colConstr : rowConstr).getConstaints();  TreeSet<Integer> primIndexes=isHor ? colIndexes : rowIndexes;  int[][] rowColBoundSizes=new int[primIndexes.size()][];  HashMap<String,int[]> sizeGroupMap=new HashMap<String,int[]>(2);  DimConstraint[] allDCs=new DimConstraint[primIndexes.size()];  Iterator<Integer> primIt=primIndexes.iterator();  for (int r=0; r < rowColBoundSizes.length; r++) {    int cellIx=primIt.next();    int[] rowColSizes=new int[3];    if (cellIx >= -MAX_GRID && cellIx <= MAX_GRID) {      allDCs[r]=primDCs[cellIx >= primDCs.length ? primDCs.length - 1 : cellIx];    } else {      allDCs[r]=DOCK_DIM_CONSTRAINT;    }    ArrayList<LinkedDimGroup> groups=groupsLists[r];    int[] groupSizes=new int[]{getTotalGroupsSizeParallel(groups,LayoutUtil.MIN,false),getTotalGroupsSizeParallel(groups,LayoutUtil.PREF,false),LayoutUtil.INF};    correctMinMax(groupSizes);    BoundSize dimSize=allDCs[r].getSize();    for (int sType=LayoutUtil.MIN; sType <= LayoutUtil.MAX; sType++) {      int rowColSize=groupSizes[sType];      UnitValue uv=dimSize.getSize(sType);      if (uv != null) {        int unit=uv.getUnit();        if (unit == UnitValue.PREF_SIZE) {          rowColSize=groupSizes[LayoutUtil.PREF];        } else         if (unit == UnitValue.MIN_SIZE) {          rowColSize=groupSizes[LayoutUtil.MIN];        } else         if (unit == UnitValue.MAX_SIZE) {          rowColSize=groupSizes[LayoutUtil.MAX];        } else {          rowColSize=uv.getPixels(refSize,container,null);        }      } else       if (cellIx >= -MAX_GRID && cellIx <= MAX_GRID && rowColSize == 0) {        rowColSize=LayoutUtil.isDesignTime(container) ? LayoutUtil.getDesignTimeEmptySize() : 0;      }      rowColSizes[sType]=rowColSize;    }    correctMinMax(rowColSizes);    addToSizeGroup(sizeGroupMap,allDCs[r].getSizeGroup(),rowColSizes);    rowColBoundSizes[r]=rowColSizes;  }  if (sizeGroupMap.size() > 0) {    for (int r=0; r < rowColBoundSizes.length; r++) {      if (allDCs[r].getSizeGroup() != null)       rowColBoundSizes[r]=sizeGroupMap.get(allDCs[r].getSizeGroup());    }  }  ResizeConstraint[] resConstrs=getRowResizeConstraints(allDCs);  boolean[] fillInPushGaps=new boolean[allDCs.length + 1];  int[][] gapSizes=getRowGaps(allDCs,refSize,isHor,fillInPushGaps);  FlowSizeSpec fss=mergeSizesGapsAndResConstrs(resConstrs,fillInPushGaps,rowColBoundSizes,gapSizes);  adjustMinPrefForSpanningComps(allDCs,defPush,fss,groupsLists);  return fss;}  }
class C{  public void activateFrame(JInternalFrame f){  Container p=f.getParent();  Component[] c;  JDesktopPane d=f.getDesktopPane();  JInternalFrame currentlyActiveFrame=(d == null) ? null : d.getSelectedFrame();  if (p == null) {    p=f.getDesktopIcon().getParent();    if (p == null)     return;  }  if (currentlyActiveFrame == null) {    if (d != null) {      d.setSelectedFrame(f);    }  } else   if (currentlyActiveFrame != f) {    if (currentlyActiveFrame.isSelected()) {      try {        currentlyActiveFrame.setSelected(false);      } catch (      PropertyVetoException e2) {      }    }    if (d != null) {      d.setSelectedFrame(f);    }  }  f.moveToFront();}  }
class C{  public void addCapabilities(String... capabilities){  Collections.addAll(this.capabilities,capabilities);}  }
class C{  protected void updateCrosshairValues(CategoryCrosshairState crosshairState,Comparable rowKey,Comparable columnKey,double value,int datasetIndex,double transX,double transY,PlotOrientation orientation){  ParamChecks.nullNotPermitted(orientation,"orientation");  if (crosshairState != null) {    if (this.plot.isRangeCrosshairLockedOnData()) {      crosshairState.updateCrosshairPoint(rowKey,columnKey,value,datasetIndex,transX,transY,orientation);    } else {      crosshairState.updateCrosshairX(rowKey,columnKey,datasetIndex,transX,orientation);    }  }}  }
class C{  private static byte[] slide(final Ed25519EncodedFieldElement encoded){  final byte[] a=encoded.getRaw();  final byte[] r=new byte[256];  for (int i=0; i < 256; ++i) {    r[i]=(byte)(1 & (a[i >> 3] >> (i & 7)));  }  for (int i=0; i < 256; ++i) {    if (r[i] != 0) {      for (int b=1; b <= 6 && i + b < 256; ++b) {        if (r[i + b] != 0) {          if (r[i] + (r[i + b] << b) <= 15) {            r[i]+=r[i + b] << b;            r[i + b]=0;          } else           if (r[i] - (r[i + b] << b) >= -15) {            r[i]-=r[i + b] << b;            for (int k=i + b; k < 256; ++k) {              if (r[k] == 0) {                r[k]=1;                break;              }              r[k]=0;            }          } else {            break;          }        }      }    }  }  return r;}  }
class C{  public static final LocoNetMessage createIplPr3QueryPacket(){  return createIplSpecificHostQueryPacket(LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_PR3);}  }
class C{  public static String modifyBase32AtIndex(final String s,final int index){  final char[] chars=s.toCharArray();  final char currentChar=chars[index];  char newChar=(char)(currentChar + 1);switch (currentChar) {case 'Z':case '7':    newChar='A';}chars[index]=newChar;return new String(chars);}  }
class C{  Query newKeyQuery(PersistenceManager persistenceManager){  Query query=persistenceManager.newQuery(JdoValue.class);  query.setFilter("id == idParam && key == keyParam");  query.declareParameters("String idParam, String keyParam");  return query;}  }
class C{  public PromptsBuilder then(ConversationPrompt prompt){  prompts.add(prompt);  return this;}  }
class C{  public boolean accept(){  return mSession.accept();}  }
class C{  public void fillFieldValues(final ArrayList<Randomizer> randomizers){  ParameterGetter<Randomizer,ProbDistribution> pdfGetter=null;  if (!NetworkUtils.isConsistent(randomizers,pdfGetter)) {    if (!(cbDistribution.getItemCount() == ProbDistribution.values().length)) {      cbDistribution.addItem(ProbDistribution.NULL);      cbDistribution.setSelectedIndex(cbDistribution.getItemCount() - 1);    }    cardPanel.removeAll();    cardPanel.add(new JPanel());    cardPanel.repaint();    if (parent != null) {      parent.pack();      parent.setLocationRelativeTo(null);    }  } else {    if (cbDistribution.getItemCount() == ProbDistribution.values().length) {      cbDistribution.removeItem(ProbDistribution.NULL);    }    Randomizer rand=(Randomizer)randomizers.get(0);    ProbDistPanel rp=cardMap.get(rand.getPdf());    cbDistribution.setSelectedItem(rand.getPdf());    rp.fillFieldValues(randomizers);    cardPanel.removeAll();    cardPanel.add(rp.getPanel());    cardPanel.repaint();    if (parent != null) {      parent.pack();      parent.setLocationRelativeTo(null);    }  }}  }
class C{  private void createFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  public void initializeDefinition(String functionName,String commutator,String negator,String restrictor,String joiner,boolean isHashable,boolean isMergeable){  m_functionName=functionName;  m_commutator=commutator;  m_negator=negator;  m_restrictor=restrictor;  m_joiner=joiner;  m_isHashable=isHashable;  m_isMergeable=isMergeable;  s_logger.log(Level.FINEST,toString());}  }
class C{  @Override public void clear(){  super.clear();  double[] keys=_set;  float[] vals=_values;  byte[] states=_states;  for (int i=keys.length; i-- > 0; ) {    keys[i]=0;    vals[i]=0;    states[i]=FREE;  }}  }
class C{  public static String addParameterToUrl(@NonNull String url,@NonNull String parameter,@NonNull String value){  return url.replaceAll(String.format("(.*)\\{%s\\}(.*)",parameter),String.format("$1%s$2",value));}  }
class C{  public CGPoint convertToGL(CGPoint uiPoint){  float newX=uiPoint.x / surfaceSize_.width * screenSize_.width;  float newY=screenSize_.height - uiPoint.y / surfaceSize_.height * screenSize_.height;  CGPoint ret=null;switch (deviceOrientation_) {case kCCDeviceOrientationPortrait:    ret=CGPoint.ccp(newX,newY);  break;case kCCDeviceOrientationLandscapeLeft:ret=CGPoint.ccp(newX,newY);break;default :return ret;}if (contentScaleFactor_ != 1 && isContentScaleSupported_) ret=CGPoint.ccpMult(ret,contentScaleFactor_);return ret;}  }
class C{  @Override public boolean validSubTokenKey(String subtok){  return super.validToken(subtok) && filterBy.containsKey(subtok);}  }
class C{  public static List<GeoTimeSerie> map(GeoTimeSerie gts,WarpScriptMapperFunction mapper,long prewindow,long postwindow,long occurrences,boolean reversed,int step,boolean overrideTick) throws WarpScriptException {  if (step <= 0) {    step=1;  }  List<GeoTimeSerie> results=new ArrayList<GeoTimeSerie>();  GeoTimeSerie mapped=gts.clone();  if (0 == mapped.values && !isBucketized(mapped)) {    results.add(mapped);    return results;  }  sort(mapped,reversed);  long[] ticks=isBucketized(gts) ? null : Arrays.copyOf(mapped.ticks,gts.values);  GTSHelper.clear(mapped);  int idx=0;  int nticks=null != ticks ? ticks.length : mapped.bucketcount;  Map<String,String> labels=gts.getLabels();  long tick=0;  GeoTimeSerie subgts=null;  boolean hasOccurrences=(0 != occurrences);  Map<String,GeoTimeSerie> multipleMapped=new TreeMap<String,GeoTimeSerie>();  boolean hasSingleResult=false;  while (idx < nticks) {    if (hasOccurrences && 0 == occurrences) {      break;    }    if (reversed) {      tick=null != ticks ? ticks[idx] : mapped.lastbucket - idx * mapped.bucketspan;    } else {      tick=null != ticks ? ticks[idx] : mapped.lastbucket - (mapped.bucketcount - 1 - idx) * mapped.bucketspan;    }    long start=tick;    long stop=tick;    if (prewindow < 0) {      start=tick + prewindow;    } else     if (prewindow > 0) {      if (null == ticks) {        start=prewindow <= mapped.bucketcount ? tick - prewindow * mapped.bucketspan : Long.MIN_VALUE;      } else {        if (reversed) {          start=idx + prewindow < ticks.length ? (ticks[idx + (int)prewindow]) : Long.MIN_VALUE;        } else {          start=idx - prewindow >= 0 ? (ticks[idx - (int)prewindow]) : Long.MIN_VALUE;        }      }    }    if (postwindow < 0) {      stop=tick - postwindow;    } else     if (postwindow > 0) {      if (null == ticks) {        stop=postwindow <= mapped.bucketcount ? tick + postwindow * mapped.bucketspan : Long.MAX_VALUE;      } else {        if (reversed) {          stop=idx - postwindow >= 0 ? (ticks[idx - (int)postwindow]) : Long.MAX_VALUE;        } else {          stop=idx + postwindow < ticks.length ? (ticks[idx + (int)postwindow]) : Long.MAX_VALUE;        }      }    }    subgts=GTSHelper.subSerie(gts,start,stop,false,false,subgts);    Object[] parms=new Object[8];    int i=0;    parms[i++]=tick;    parms[i++]=new String[subgts.values];    Arrays.fill((Object[])parms[i - 1],gts.getName());    parms[i++]=new Map[subgts.values];    Arrays.fill((Object[])parms[i - 1],labels);    parms[i++]=subgts.values > 0 ? Arrays.copyOf(subgts.ticks,subgts.values) : new long[0];    if (null != subgts.locations) {      parms[i++]=subgts.values > 0 ? Arrays.copyOf(subgts.locations,subgts.values) : new long[0];    } else {      if (subgts.values > 0) {        parms[i++]=new long[subgts.values];        Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_LOCATION);      } else {        parms[i++]=new long[0];      }    }    if (null != subgts.elevations) {      parms[i++]=subgts.values > 0 ? Arrays.copyOf(subgts.elevations,subgts.values) : new long[0];    } else {      if (subgts.values > 0) {        parms[i++]=new long[subgts.values];        Arrays.fill((long[])parms[i - 1],GeoTimeSerie.NO_ELEVATION);      } else {        parms[i++]=new long[0];      }    }    parms[i++]=new Object[subgts.values];    int tickidx=-1;    for (int j=0; j < subgts.values; j++) {      ((Object[])parms[6])[j]=valueAtIndex(subgts,j);      if (-1 == tickidx && tick == tickAtIndex(subgts,j)) {        tickidx=j;      }    }    parms[i++]=new long[]{prewindow,postwindow,start,stop,tickidx};    Object mapResult=mapper.apply(parms);    if (mapResult instanceof Map) {      for (      Entry<Object,Object> entry : ((Map<Object,Object>)mapResult).entrySet()) {        GeoTimeSerie mgts=multipleMapped.get(entry.getKey().toString());        if (null == mgts) {          mgts=mapped.cloneEmpty();          mgts.setName(entry.getKey().toString());          multipleMapped.put(entry.getKey().toString(),mgts);        }        Object[] result=(Object[])entry.getValue();        if (null != result[3]) {          GTSHelper.setValue(mgts,overrideTick ? (long)result[0] : tick,(long)result[1],(long)result[2],result[3],false);        }      }    } else {      Object[] result=(Object[])mapResult;      hasSingleResult=true;      if (null != result[3]) {        GTSHelper.setValue(mapped,overrideTick ? (long)result[0] : tick,(long)result[1],(long)result[2],result[3],false);      }    }    idx+=step;    occurrences--;  }  if (hasSingleResult) {    results.add(mapped);  }  if (!multipleMapped.isEmpty()) {    results.addAll(multipleMapped.values());  }  return results;}  }
class C{  public static News news(String idNews,String profile) throws NetworkException {  String params=ServiceSecurity.construireParams(false,AllocineService.CODE,idNews,AllocineService.PROFILE,profile);  String sed=ServiceSecurity.getSED();  String sig=ServiceSecurity.getSIG(params,sed);  try {    AllocineResponse response=getService().news(idNews,profile,sed,sig);    return null;  } catch (  Exception e) {    throw new NetworkException();  }}  }
class C{  public boolean writeDescriptor(BluetoothGattDescriptor descriptor,byte[] data,BleDescriptorCallback bleCallback){  if (BleLog.isPrint) {    BleLog.i(TAG,descriptor.getUuid() + " descriptor write bytes: " + Arrays.toString(data)+ " ,hex: "+ HexUtil.encodeHexStr(data));  }  handleDescriptorWriteCallback(bleCallback);  descriptor.setValue(data);  return handleAfterInitialed(getBluetoothGatt().writeDescriptor(descriptor),bleCallback);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ARRAY_ELEMENT;}  }
class C{  public CBigEndiannessAction(final JHexView hexView){  super("Big Endian");  this.hexView=Preconditions.checkNotNull(hexView,"IE01409: Memory viewer argument can not be null");}  }
class C{  protected static String combinePaths(List<String> paths){  File file=new File(paths.get(0));  for (int i=1; i < paths.size(); i++) {    file=new File(file,paths.get(i));  }  return file.getPath();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  Element element;  Node aNode;  NamedNodeMap attributes;  String name;  Node attr;  String lname;  String namespaceURI="http://www.nist.gov";  String qualifiedName="emp:employee";  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staff",true);  element=aNewDoc.createElementNS(namespaceURI,qualifiedName);  aNode=doc.importNode(element,false);  attributes=aNode.getAttributes();  assertSize("throw_Size",1,attributes);  name=aNode.getNodeName();  assertEquals("nodeName","emp:employee",name);  attr=attributes.item(0);  lname=attr.getLocalName();  assertEquals("lname","defaultAttr",lname);}  }
class C{  public SystemMonitor(final Composite parent,final int style,final int gridSize,final int refeshTime){  super(parent,style | SWT.DOUBLE_BUFFERED);  this.samples=new LinkedHashMap<String,SampleWrapper>();  this.captionVisible=true;  this.borderColor=new Color(getDisplay(),96,96,96);  this.gridColor=new Color(getDisplay(),89,89,89);  this.gridColorBackground=new Color(getDisplay(),50,50,50);  this.gridSize=gridSize;  this.refreshTime=refeshTime;  this.keepRunning=true;  createListeners();  launchDataCollecting();}  }
class C{  public static Long valueOf(long i){  return null;}  }
class C{  public void indicationOccured(String url,CIMInstance indication){  s_logger.debug("Indication occurred for {}",url);  indicationOccured(url,indication,false);}  }
class C{  public HashTable(int c){  table=new Entry[c];}  }
class C{  public byte[] calculateKeyedChecksum(byte[] data,int size,byte[] key,int usage) throws KrbCryptoException {  try {    if (DESKeySpec.isWeak(key,0)) {      key[7]=(byte)(key[7] ^ 0xF0);    }  } catch (  InvalidKeyException ex) {  }  byte[] ivec=new byte[key.length];  System.arraycopy(key,0,ivec,0,key.length);  byte[] cksum=Des.des_cksum(ivec,data,key);  return cksum;}  }
class C{  public static void registerAccessor(Class<?> someClass,TweenAccessor<?> defaultAccessor){  registeredAccessors.put(someClass,defaultAccessor);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static void jsFunction_writeLine(Context cx,Scriptable thisObj,Object[] args,Function funObj) throws IOException {  write0(thisObj,args,true);}  }
class C{  private void checkAndDisplayMatrix(){  checkMatrixBounds();  setImageMatrix(getDisplayMatrix());}  }
class C{  @Override public void scan(AccessProfile accessProfile) throws BaseCollectionException {  URI mgmntServerURI=accessProfile.getSystemId();  StorageProvider mgmntServer=null;  String scanStatusMessage="Unknown Status";  try {    mgmntServer=_dbClient.queryObject(StorageProvider.class,mgmntServerURI);    VPlexApiClient client=getVPlexAPIClient(accessProfile);    s_logger.debug("Got handle to VPlex API client");    verifyConnectivity(client,mgmntServer);    verifyMinimumSupportedFirmwareVersion(client,mgmntServer);    Map<String,StorageSystemViewObject> scanCache=accessProfile.getCache();    s_logger.info("Storage System scanCache before scanning:" + scanCache);    scanManagedSystems(client,mgmntServer,scanCache);    s_logger.info("Storage System scanCache after scanning:" + scanCache);    client.clearCaches();    scanStatusMessage=String.format("Scan job completed successfully for " + "VPLEX management server: %s",mgmntServerURI.toString());  } catch (  Exception e) {    VPlexCollectionException vce=VPlexCollectionException.exceptions.failedScan(mgmntServer.getIPAddress(),e.getLocalizedMessage());    scanStatusMessage=vce.getLocalizedMessage();    throw vce;  } finally {    if (mgmntServer != null) {      try {        mgmntServer.setLastScanStatusMessage(scanStatusMessage);        _dbClient.persistObject(mgmntServer);      } catch (      Exception e) {        s_logger.error("Error persisting scan status message for management server {}",mgmntServerURI.toString(),e);      }    }  }}  }
class C{  public static <K,V,E>Map<K,V> collectEntries(Iterator<E> self,Map<K,V> collector,@ClosureParams(FirstParam.FirstGenericType.class) Closure<?> transform){  while (self.hasNext()) {    E next=self.next();    addEntry(collector,transform.call(next));  }  return collector;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T choice(Collection<T> set){  if (set.isEmpty())   return null;  int position=random.nextInt(set.size());  return (T)set.toArray()[position];}  }
class C{  public INode remove(){  return queue.removeFirst();}  }
class C{  protected boolean isReceiveBufferSizeChanged(){  return true;}  }
class C{  public static boolean isFragmentableType(Class propertyType){  if (propertyType == null) {    return false;  }  if (propertyType.isArray()) {    return isFragmentableType(propertyType.getComponentType());  }  if (JavaClassHelper.isJavaBuiltinDataType(propertyType)) {    return false;  }  if (propertyType.isEnum()) {    return false;  }  if (JavaClassHelper.isImplementsInterface(propertyType,Map.class)) {    return false;  }  if (propertyType == Node.class) {    return false;  }  if (propertyType == NodeList.class) {    return false;  }  if (propertyType == Object.class) {    return false;  }  if (propertyType == Calendar.class) {    return false;  }  if (propertyType == Date.class) {    return false;  }  if (propertyType == LocalDateTime.class) {    return false;  }  if (propertyType == ZonedDateTime.class) {    return false;  }  if (propertyType == LocalDate.class) {    return false;  }  if (propertyType == LocalTime.class) {    return false;  }  if (propertyType == java.sql.Date.class) {    return false;  }  if (propertyType == java.sql.Time.class) {    return false;  }  if (propertyType == java.sql.Timestamp.class) {    return false;  }  return true;}  }
class C{  public synchronized int totalRelationships(){  int size=0;  for (  Map<Relationship,Relationship> relationships : getRelationships().values()) {    size=size + relationships.size();  }  return size;}  }
class C{  public static boolean isEscapedChar(@NotNull String text,int position){  int count=0;  for (int i=position - 1; i >= 0 && text.charAt(i) == '\\'; i--) {    count++;  }  return count % 2 != 0;}  }
class C{  public int intValue(){  return data;}  }
class C{  public LinearTransform(){  this(1,0);}  }
class C{  public AssignmentProposition[][] particleFiltering(AssignmentProposition[] e){  double[] W=new double[N];  for (int i=0; i < N; i++) {    sampleFromTransitionModel(i);    W[i]=sensorModel.posterior(ProbUtil.constructConjunction(e),S_tp1[i]);  }  S=weightedSampleWithReplacement(N,S,W);  return S;}  }
class C{  protected void createWmsLayers(){  wmsLayerByName.clear();  wmsLayers.clear();  for (int i=0; i < layers.length; i++) {    Layer layer=layers[i];    createWmsLayers(wmsLayerFactory.createWmsLayer(layer));  }}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public boolean isAttndncReqrd(){  return attndncReqrd;}  }
class C{  @Override public void appendAfter(String after){  String oldAfter=after();  setAfter(oldAfter + after);}  }
class C{  protected void checkRowIndexes(int[] indexes){  for (int i=indexes.length; --i >= 0; ) {    int index=indexes[i];    if (index < 0 || index >= rows)     checkRow(index);  }}  }
class C{  @Override public void writeNewStateDescription(ParcelFileDescriptor newState){  writeJournal(newState,getCurrentStateJournal());}  }
class C{  public List<Intersection> intersect(Line line,Terrain terrain) throws InterruptedException {  if (line == null) {    String msg=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (terrain == null) {    String msg=Logging.getMessage("nullValue.TerrainIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  ArrayList<Intersection> intersections=new ArrayList<Intersection>();  this.intersectTileOrDescendants(line,terrain,this.rootTile,intersections);  return intersections.size() > 0 ? intersections : null;}  }
class C{  @SuppressWarnings("unchecked") public void postHandle(HttpServletRequest request,HttpServletResponse response,Object handler,ModelAndView modelAndView){  if (modelAndView != null) {    Map<String,Object> modelFlashScopeMap=null;    for (Iterator<Entry<String,Object>> iterator=((Map<String,Object>)modelAndView.getModel()).entrySet().iterator(); iterator.hasNext(); ) {      Entry<String,Object> entry=iterator.next();      if (this.attributeName.equals(entry.getKey()) && entry.getValue() instanceof Map) {        if (modelFlashScopeMap == null) {          modelFlashScopeMap=(Map)entry.getValue();        } else {          modelFlashScopeMap.putAll((Map)entry.getValue());        }        iterator.remove();      } else       if (entry.getKey().startsWith(this.attributeName + ".")) {        String key=entry.getKey().substring(this.attributeName.length() + 1);        if (modelFlashScopeMap == null) {          modelFlashScopeMap=new HashMap<String,Object>();        }        modelFlashScopeMap.put(key,entry.getValue());        iterator.remove();      }    }    if (modelFlashScopeMap != null) {      MultiScopeModelMap flashScopeMap;      if (request.getAttribute(this.attributeName) instanceof MultiScopeModelMap) {        flashScopeMap=(MultiScopeModelMap)request.getAttribute(this.attributeName);      } else {        flashScopeMap=new MultiScopeModelMap(this.retentionCount);      }      flashScopeMap.putAll(modelFlashScopeMap);      request.setAttribute(this.attributeName,flashScopeMap);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:04.516 -0500",hash_original_method="29CC4F4897E024335846D9CA60D25833",hash_generated_method="BDB68C5F14AD6DB4B86180F47B790D44") public ServiceConfigurationError(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"lahf");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a lahf instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final OperandSize archSize=environment.getArchitectureSize();  final String clearedEax=environment.getNextVariableString();  final String shiftedSf=environment.getNextVariableString();  final String clearedEaxSf=environment.getNextVariableString();  final String shiftedZf=environment.getNextVariableString();  final String clearedEaxZf=environment.getNextVariableString();  final String shiftedAf=environment.getNextVariableString();  final String clearedEaxAf=environment.getNextVariableString();  final String shiftedPf=environment.getNextVariableString();  final String clearedEaxPf=environment.getNextVariableString();  final String shiftedCf=environment.getNextVariableString();  final String clearedEaxCf=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(baseOffset,archSize,"eax",archSize,"4294902015",archSize,clearedEax));  instructions.add(ReilHelpers.createBsh(baseOffset + 1,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,"15",OperandSize.WORD,shiftedSf));  instructions.add(ReilHelpers.createOr(baseOffset + 2,archSize,clearedEax,OperandSize.WORD,shiftedSf,archSize,clearedEaxSf));  instructions.add(ReilHelpers.createBsh(baseOffset + 3,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,"14",OperandSize.WORD,shiftedZf));  instructions.add(ReilHelpers.createOr(baseOffset + 4,archSize,clearedEaxSf,OperandSize.WORD,shiftedZf,archSize,clearedEaxZf));  instructions.add(ReilHelpers.createBsh(baseOffset + 5,OperandSize.BYTE,Helpers.AUXILIARY_FLAG,OperandSize.BYTE,"12",OperandSize.WORD,shiftedAf));  instructions.add(ReilHelpers.createOr(baseOffset + 6,archSize,clearedEaxZf,OperandSize.WORD,shiftedAf,archSize,clearedEaxAf));  instructions.add(ReilHelpers.createBsh(baseOffset + 7,OperandSize.BYTE,Helpers.PARITY_FLAG,OperandSize.BYTE,"10",OperandSize.WORD,shiftedPf));  instructions.add(ReilHelpers.createOr(baseOffset + 8,archSize,clearedEaxAf,OperandSize.WORD,shiftedPf,archSize,clearedEaxPf));  instructions.add(ReilHelpers.createBsh(baseOffset + 9,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,"8",OperandSize.WORD,shiftedCf));  instructions.add(ReilHelpers.createOr(baseOffset + 10,archSize,clearedEaxPf,OperandSize.WORD,shiftedCf,archSize,clearedEaxCf));  instructions.add(ReilHelpers.createOr(baseOffset + 11,archSize,clearedEaxCf,archSize,"512",archSize,"eax"));}  }
class C{  public String testsetPrefixTipText(){  return "The prefix to use for the filename of the test sets.";}  }
class C{  public void sharedMemoryPort(int shmemPort){  this.shmemPort=shmemPort;}  }
class C{  @Override public void initialize() throws ReplicatorException, InterruptedException {}  }
class C{  public synchronized void addAPI(String id,String name,String url,String readonlyurl,String notesurl,String user,String pass,String preset,boolean showicon,boolean oauth){  SQLiteDatabase db=getWritableDatabase();  addAPI(db,id,name,url,readonlyurl,notesurl,user,pass,preset,showicon,oauth);  db.close();}  }
class C{  public String globalInfo(){  return "A SplitEvaluator that produces results for a classification " + "scheme on a numeric class attribute.";}  }
class C{  public boolean hasImageArtwork(){  return hasImageArtwork;}  }
class C{  private NoticeReference(ASN1Sequence as){  if (as.size() != 2) {    throw new IllegalArgumentException("Bad sequence size: " + as.size());  }  organization=DisplayText.getInstance(as.getObjectAt(0));  noticeNumbers=ASN1Sequence.getInstance(as.getObjectAt(1));}  }
class C{  private static int clampedLerp(int a,int b,float ratio){  int rawResult=a + (int)((b - a) * ratio);  return Math.max(Math.min(rawResult,255),0);}  }
class C{  public boolean metricIsMaximisable(String statName) throws Exception {  Integer builtinIndex=m_builtin.get(statName.toLowerCase());  if (builtinIndex != null) {    return builtInMetricIsMaximisable(builtinIndex.intValue());  } else {    AbstractEvaluationMetric m=m_pluginMetrics.get(statName.toLowerCase());    if (m == null) {      throw new Exception("Unknown evaluation metric: " + statName);    }    return pluginMetricIsMaximisable(m,statName);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testArabicSort(){  assertQ("Collated Sort: ",req("fl","id","q","sort_ar:[\u0698 TO \u0633\u0633]","sort","sort_ar asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=12]","//result/doc[2]/int[@name='id'][.=1]");}  }
class C{  private void drawToCanvas(Canvas canvas){  for (int i=0; i < mIndicatorCells.length; i++) {    for (int j=0; j < mIndicatorCells[i].length; j++) {      if (mIndicatorCells[i][j].getStatus() == IndicatorCell.STATE_NORMAL) {        canvas.drawCircle(mIndicatorCells[i][j].getX(),mIndicatorCells[i][j].getY(),radius,defaultPaint);      } else       if (mIndicatorCells[i][j].getStatus() == IndicatorCell.STATE_CHECK) {        canvas.drawCircle(mIndicatorCells[i][j].getX(),mIndicatorCells[i][j].getY(),radius,selectPaint);      }    }  }}  }
class C{  @Override public void updateCharacterStream(int columnIndex,Reader x) throws SQLException {  updateCharacterStream(columnIndex,x,-1);}  }
class C{  public Pos3D rotateYaw(double yaw){  double yawRadians=Math.toRadians(yaw);  double x=xPos;  double z=zPos;  if (yaw != 0) {    xPos=x * Math.cos(yawRadians) - z * Math.sin(yawRadians);    zPos=z * Math.cos(yawRadians) + x * Math.sin(yawRadians);  }  return this;}  }
class C{  public DeterministicKey deriveChild(List<ChildNumber> parentPath,boolean relative,boolean createParent,ChildNumber createChildNumber){  return deriveChild(get(parentPath,relative,createParent),createChildNumber);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((columnSchema == null) ? 0 : columnSchema.hashCode());  return result;}  }
class C{  private List<View> addView(View view,List<View> cache){  if (cache == null) {    cache=new LinkedList<View>();  }  cache.add(view);  return cache;}  }
class C{  @Override public boolean isGroupCommit(){  return true;}  }
class C{  public static double beta(double x,double w){  return exp(lnGamma(x) + lnGamma(w) - lnGamma(x + w));}  }
class C{  public LineNumberList(RTextArea textArea,Color numberColor){  super(textArea);  if (numberColor != null) {    setForeground(numberColor);  } else {    setForeground(Color.GRAY);  }  currentLine=0;  setLineNumberingStartIndex(1);  visibleRect=new Rectangle();  addMouseListener(this);  addMouseMotionListener(this);}  }
class C{  public void testTimedPoll0() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.poll(0,MILLISECONDS));  }  assertNull(q.poll(0,MILLISECONDS));}  }
class C{  @Contract(pure=true) synchronized final boolean isOperationRunning(final int id){  return mRunningOperations.containsKey(id);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.ROUTER__TO_CHANNELS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getToChannels()).basicAdd(otherEnd,msgs);case EipPackage.ROUTER__FROM_CHANNELS:  return ((InternalEList<InternalEObject>)(InternalEList<?>)getFromChannels()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static PrintStream wrapAndDumpWhenContains(PrintStream source,String trigger){  StringPrinter wrapped=new StringPrinter(StringPrinter.stringsToLines(null));  return wrapped.toPrintStream();}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Map == false) {    return false;  }  Map map=(Map)obj;  if (map.size() != size()) {    return false;  }  MapIterator it=mapIterator();  try {    while (it.hasNext()) {      Object key=it.next();      Object value=it.getValue();      if (value == null) {        if (map.get(key) != null || map.containsKey(key) == false) {          return false;        }      } else {        if (value.equals(map.get(key)) == false) {          return false;        }      }    }  } catch (  ClassCastException ignored) {    return false;  }catch (  NullPointerException ignored) {    return false;  }  return true;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null)   return sage.plugin.CorePluginManager.getInstance().isPluginCompatible(pluggy,stack.getUIMgr()) ? Boolean.TRUE : Boolean.FALSE;  return Boolean.FALSE;}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.Profile.defaultColor",StringUtil.colorToString(defaultColor));  properties.setProperty("MapElement.Profile.defaultSize",Float.toString(defaultSize));  properties.setProperty("MapElement.Profile.defaultLineWidth",Float.toString(defaultLineWidth));  properties.setProperty("MapElement.Profile.defaultLabelVisible",Boolean.toString(defaultLabelVisible));}  }
class C{  public void evaluateCrossValidation(int folds){  evaluateCrossValidation(folds,new Random());}  }
class C{  public PeerAddress(NetworkParameters params,byte[] payload,int offset,int protocolVersion) throws ProtocolException {  super(params,payload,offset,protocolVersion);}  }
class C{  private static ChunkIndex parseSidx(ParsableByteArray atom,long inputPosition) throws ParserException {  atom.setPosition(Atom.HEADER_SIZE);  int fullAtom=atom.readInt();  int version=Atom.parseFullAtomVersion(fullAtom);  atom.skipBytes(4);  long timescale=atom.readUnsignedInt();  long earliestPresentationTime;  long offset=inputPosition;  if (version == 0) {    earliestPresentationTime=atom.readUnsignedInt();    offset+=atom.readUnsignedInt();  } else {    earliestPresentationTime=atom.readUnsignedLongToLong();    offset+=atom.readUnsignedLongToLong();  }  atom.skipBytes(2);  int referenceCount=atom.readUnsignedShort();  int[] sizes=new int[referenceCount];  long[] offsets=new long[referenceCount];  long[] durationsUs=new long[referenceCount];  long[] timesUs=new long[referenceCount];  long time=earliestPresentationTime;  long timeUs=Util.scaleLargeTimestamp(time,C.MICROS_PER_SECOND,timescale);  for (int i=0; i < referenceCount; i++) {    int firstInt=atom.readInt();    int type=0x80000000 & firstInt;    if (type != 0) {      throw new ParserException("Unhandled indirect reference");    }    long referenceDuration=atom.readUnsignedInt();    sizes[i]=0x7FFFFFFF & firstInt;    offsets[i]=offset;    timesUs[i]=timeUs;    time+=referenceDuration;    timeUs=Util.scaleLargeTimestamp(time,C.MICROS_PER_SECOND,timescale);    durationsUs[i]=timeUs - timesUs[i];    atom.skipBytes(4);    offset+=sizes[i];  }  return new ChunkIndex(sizes,offsets,durationsUs,timesUs);}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public LongArray resize(LongArray array,long size){  if (array instanceof BigLongArray) {    return resizeInPlace((BigLongArray)array,size);  } else {    AbstractArray arr=(AbstractArray)array;    final LongArray newArray=newLongArray(size,arr.clearOnResize);    for (long i=0, end=Math.min(size,array.size()); i < end; ++i) {      newArray.set(i,array.get(i));    }    array.close();    return newArray;  }}  }
class C{  public Format(String pFormatString){  String lFormatVars[]=pFormatString.split("/");  mId=Integer.parseInt(lFormatVars[0]);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:53.495 -0500",hash_original_method="A02BC8EA24DC526040D0D1A34629C374",hash_generated_method="96D59C65BFD95080684CFF943D5818A3") public String toString(){  return "[" + "version:" + getVersion() + ", mode:"+ getMode()+ ", poll:"+ getPoll()+ ", precision:"+ getPrecision()+ ", delay:"+ getRootDelay()+ ", dispersion(ms):"+ getRootDispersionInMillisDouble()+ ", id:"+ getReferenceIdString()+ ", xmitTime:"+ getTransmitTimeStamp().toDateString()+ " ]";}  }
class C{  public boolean isEnableNetworkLogging(){  return enableNetworkLogging;}  }
class C{  public boolean containsValue(Object value){  return contents.containsValue(value);}  }
class C{  public static TestSSLContext create(KeyStore clientKeyStore,char[] clientStorePassword,KeyStore serverKeyStore,char[] serverStorePassword,KeyManager clientKeyManagers,KeyManager serverKeyManagers,TrustManager clientTrustManagers,TrustManager serverTrustManagers,SSLContext clientContext,SSLContext serverContext){  try {    SSLServerSocket serverSocket=(SSLServerSocket)serverContext.getServerSocketFactory().createServerSocket(0);    InetAddress host=InetAddress.getLocalHost();    int port=serverSocket.getLocalPort();    return new TestSSLContext(clientKeyStore,clientStorePassword,serverKeyStore,serverStorePassword,(X509ExtendedKeyManager)clientKeyManagers,(X509ExtendedKeyManager)serverKeyManagers,(X509TrustManager)clientTrustManagers,(X509TrustManager)serverTrustManagers,clientContext,serverContext,serverSocket,host,port);  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public ShiftOperator createShiftOperatorFromString(EDataType eDataType,String initialValue){  ShiftOperator result=ShiftOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  protected boolean StepPattern(boolean isLeadingSlashPermitted) throws javax.xml.transform.TransformerException {  return AbbreviatedNodeTestStep(isLeadingSlashPermitted);}  }
class C{  protected User(){}  }
class C{  public boolean isInsideRemark(){  return insideRemark;}  }
class C{  public RoundedIconGenerator(Context context,int iconWidthDp,int iconHeightDp,int cornerRadiusDp,int backgroundColor,int textSizeDp){  this((int)(context.getResources().getDisplayMetrics().density * iconWidthDp),(int)(context.getResources().getDisplayMetrics().density * iconHeightDp),(int)(context.getResources().getDisplayMetrics().density * cornerRadiusDp),backgroundColor,(int)(context.getResources().getDisplayMetrics().density * textSizeDp));}  }
class C{  public boolean isDeclaredOverride(){  return declaredOverride;}  }
class C{  public JcrPackage createBackupPackage(final SlingHttpServletRequest request,final String packageName){  return createPackage(request,BACKUP_GROUP,packageName,BACKUP_VERSION,BACKUP_PATHS);}  }
class C{  public Iterator iterator(){  sortEdges();  return outEdges.iterator();}  }
class C{  public boolean fireEvent(EventType eventType,BaseEvent be){  if (firesEvents && listeners != null) {    activeEvent=true;    be.setType(eventType);    List<Listener<BaseEvent>> list=listeners.get(getKey(eventType));    if (list != null) {      List<Listener<BaseEvent>> copy=new ArrayList<Listener<BaseEvent>>(list);      for (      Listener<BaseEvent> l : copy) {        callListener(l,be);      }    }    activeEvent=false;    return !be.isCancelled();  }  return true;}  }
class C{  public void addEdge(N a,N b){  if (!containsBoth(a,b))   return;  nodes.get(a).getOutgoing().add(b);  nodes.get(b).getIncoming().add(a);}  }
class C{  public static byte[] buildAacAudioSpecificConfig(int sampleRate,int numChannels){  int sampleRateIndex=-1;  for (int i=0; i < AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE.length; ++i) {    if (sampleRate == AUDIO_SPECIFIC_CONFIG_SAMPLING_RATE_TABLE[i]) {      sampleRateIndex=i;    }  }  int channelConfig=-1;  for (int i=0; i < AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE.length; ++i) {    if (numChannels == AUDIO_SPECIFIC_CONFIG_CHANNEL_COUNT_TABLE[i]) {      channelConfig=i;    }  }  byte[] csd=new byte[2];  csd[0]=(byte)((2 << 3) | (sampleRateIndex >> 1));  csd[1]=(byte)(((sampleRateIndex & 0x1) << 7) | (channelConfig << 3));  return csd;}  }
class C{  public boolean isAsynchronous(){  return m_asynch;}  }
class C{  public final void testF4Value(){  assertEquals(65537,RSAKeyGenParameterSpec.F4.intValue());}  }
class C{  public void onStart(){  mMediaRouter.addCallback(mSelector,this,MediaRouter.CALLBACK_FLAG_PERFORM_ACTIVE_SCAN);  PlaybackProxy.addCallback(mPlaybackCallback);}  }
class C{  public Boolean hexists(final byte[] key,final byte[] field){  checkIsInMulti();  client.hexists(key,field);  return client.getIntegerReply() == 1;}  }
class C{  public List<JCAnnotation> translateAnnotations(List<JCAnnotation> trees){  for (List<JCAnnotation> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addAllOf(ObjectArrayList list){  int listSize=list.size();  if (this.size + listSize >= this.capacity)   flush();  this.target.addAllOf(list);}  }
class C{  public int size(){  return elements.size();}  }
class C{  public LazilyLoadedTexture(Object imageSource,boolean useMipMaps){  initialize(imageSource,useMipMaps,null);}  }
class C{  public ProjectsQuery(URL feedUrl){  super(feedUrl);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Project_ID"))     m_C_Project_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_InOut_ID"))     m_M_InOut_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("S_TimeExpense_ID"))     m_S_TimeExpense_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Locator_ID"))     m_M_Locator_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_ProjectLine_ID"))     m_C_ProjectLine_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Product_ID"))     m_M_Product_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_AttributeSetInstance_ID"))     m_M_AttributeSetInstance_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("MovementQty"))     m_MovementQty=(BigDecimal)para[i].getParameter(); else     if (name.equals("MovementDate"))     m_MovementDate=(Timestamp)para[i].getParameter(); else     if (name.equals("Description"))     m_Description=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  @AfterMethod public void cleanUp() throws IOException {  if (Files.exists(Paths.get(TEST_FOLDER))) {    Files.walkFileTree(Paths.get(TEST_FOLDER),new DeleteFileVisitor());    Files.deleteIfExists(Paths.get(TEST_FOLDER));  }}  }
class C{  public void registerListener(JsFileLoadedListener listener){  if (!listeners.contains(listener)) {    listeners.add(listener);  }}  }
class C{  @Override public void changeCost(int cost){  recharge.setCurrentCost(cost);  stream.onNext(recharge);}  }
class C{  @GET @Path("setting") @ZeppelinApi public Response listSettings(){  return new JsonResponse<>(Status.OK,"",interpreterFactory.get()).build();}  }
class C{  public void shouldGeneratePreviewImages(boolean generatePreviewImages){  this.generatePreviewImages=generatePreviewImages;}  }
class C{  private void createTextException(){  this.textException=new Text(this.composite,SWT.MULTI | SWT.READ_ONLY | SWT.BORDER| SWT.H_SCROLL| SWT.V_SCROLL);  this.textException.setText(StringUtil.stackStraceAsString(this.exception));  this.textException.setBackground(Display.getCurrent().getSystemColor(SWT.COLOR_WHITE));  final GridData gd=new GridData(GridData.FILL,GridData.FILL,true,true,1,1);  gd.minimumHeight=DEFAULT_MIN_HEIGHT_FOR_EXCEPTIONS;  this.textException.setLayoutData(gd);}  }
class C{  public Name add(String comp) throws InvalidNameException {  return add(size(),comp);}  }
class C{  private static double basinAngle(AdvancingFrontNode node){  double ax=node.point.getX() - node.next.next.point.getX();  double ay=node.point.getY() - node.next.next.point.getY();  return Math.atan2(ay,ax);}  }
class C{  public void add(int val,String str){  check(val);  Integer value=toInteger(val);  str=sanitize(str);  strings.put(str,value);  values.put(value,str);}  }
class C{  private int mapDirection(boolean isLeft){  if (isLeft) {    if (splitPane.getOrientation() == JSplitPane.HORIZONTAL_SPLIT) {      return SwingConstants.WEST;    }    return SwingConstants.NORTH;  }  if (splitPane.getOrientation() == JSplitPane.HORIZONTAL_SPLIT) {    return SwingConstants.EAST;  }  return SwingConstants.SOUTH;}  }
class C{  public CActionShowReilCodeNode(final Window parent,final INaviCodeNode node){  super("Show REIL code");  m_parent=parent;  m_node=node;}  }
class C{  @SuppressWarnings("InfiniteLoopStatement") public void testRunClient(){  Socket sock=new Socket();  OutputStream out=null;  InputStream in=null;  try {    Random r=new Random();    sock.connect(new InetSocketAddress(HOSTNAME,PORT));    out=sock.getOutputStream();    in=new BufferedInputStream(sock.getInputStream());    while (true) {      byte[] msg=createMessage(r.nextInt(1024) + 1);      long start=System.currentTimeMillis();      System.out.println(">>>>>>> [" + start + "] sending message, "+ msg.length+ " bytes");      writeMessage(out,msg);      byte[] resp=readMessage(in);      if (resp.length != msg.length)       throw new IOException("Invalid response");      long end=System.currentTimeMillis();      System.out.println(">>>>>>> [" + end + "] response received, "+ msg.length+ " bytes");      System.out.println("======= Response received within " + (end - start) + "ms\r\n");      U.sleep(30);    }  } catch (  Exception e) {    System.out.println("Finishing test thread: " + e.getMessage());  } finally {    U.closeQuiet(out);    U.closeQuiet(in);    U.closeQuiet(sock);  }}  }
class C{  private void mixWheel(int id){  WheelView wheel=getWheel(id);  wheel.scroll(-25 + (int)(Math.random() * 50),2000);}  }
class C{  public void writePacket(final byte[] data,final int offset,final int len) throws IOException {  raf.write(data,offset,len);}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer,Locale lcle,boolean dtime){  this(peer,lcle,dtime,true);}  }
class C{  public AdjacencyMatrix(boolean trackCommonNeighbors){  rows=new ArrayList<TIntArrayList>(1000);  if (trackCommonNeighbors)   commonNeighbors=new ArrayList<TIntIntHashMap>(1000);}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(_field.getModifiers());}  }
class C{  @GwtIncompatible <K,V>MapMakerInternalMap<K,V> makeCustomMap(){  return new MapMakerInternalMap<K,V>(this);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  static public InterestRate impliedRate(final double compound,final Date d1,final Date d2,final DayCounter resultDC,final Compounding comp,final Frequency freq){  QL.require(d1.le(d2),"d1 later than or equal to d2");  final double t=resultDC.yearFraction(d1,d2);  return impliedRate(compound,t,resultDC,comp,freq);}  }
class C{  public java.sql.PreparedStatement prepareStatement(String sql,int resultSetType,int resultSetConcurrency) throws SQLException {  checkClosed();  try {    return PreparedStatementWrapper.getInstance(this,this.pooledConnection,this.mc.prepareStatement(sql,resultSetType,resultSetConcurrency));  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }  return null;}  }
class C{  public BufferUnderflowException(String message){  this(message,null);}  }
class C{  public static VirtualFile findFileInModuleByName(@NotNull String name,Module module,@NotNull final LanguageFileType fileTypeInstance,boolean ignoreCase){  Collection<VirtualFile> files=FileBasedIndex.getInstance().getContainingFiles(FileTypeIndex.NAME,fileTypeInstance,module.getModuleContentScope());  for (  VirtualFile file : files) {    if ((file.getName().equalsIgnoreCase(name) && ignoreCase) || file.getName().equals(name)) {      return file;    }  }  return null;}  }
class C{  public void onCreate(Bundle savedInstanceState){  try {    mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void generatePrologue(){  if (inDirectCallFunction) {    int directParameterCount=scriptOrFn.getParamCount();    if (firstFreeLocal != 4)     Kit.codeBug();    for (int i=0; i != directParameterCount; ++i) {      varRegisters[i]=firstFreeLocal;      firstFreeLocal+=3;    }    if (!fnCurrent.getParameterNumberContext()) {      itsForcedObjectParameters=true;      for (int i=0; i != directParameterCount; ++i) {        short reg=varRegisters[i];        cfw.addALoad(reg);        cfw.add(ByteCode.GETSTATIC,"java/lang/Void","TYPE","Ljava/lang/Class;");        int isObjectLabel=cfw.acquireLabel();        cfw.add(ByteCode.IF_ACMPNE,isObjectLabel);        cfw.addDLoad(reg + 1);        addDoubleWrap();        cfw.addAStore(reg);        cfw.markLabel(isObjectLabel);      }    }  }  if (fnCurrent != null && !inDirectCallFunction && (!compilerEnv.isUseDynamicScope() || fnCurrent.fnode.getIgnoreDynamicScope())) {    cfw.addALoad(funObjLocal);    cfw.addInvoke(ByteCode.INVOKEINTERFACE,"org/mozilla/javascript/Scriptable","getParentScope","()Lorg/mozilla/javascript/Scriptable;");    cfw.addAStore(variableObjectLocal);  }  argsLocal=firstFreeLocal++;  localsMax=firstFreeLocal;  if (isGenerator) {    operationLocal=firstFreeLocal++;    localsMax=firstFreeLocal;    cfw.addALoad(thisObjLocal);    generatorStateLocal=firstFreeLocal++;    localsMax=firstFreeLocal;    cfw.add(ByteCode.CHECKCAST,OptRuntime.GeneratorState.CLASS_NAME);    cfw.add(ByteCode.DUP);    cfw.addAStore(generatorStateLocal);    cfw.add(ByteCode.GETFIELD,OptRuntime.GeneratorState.CLASS_NAME,OptRuntime.GeneratorState.thisObj_NAME,OptRuntime.GeneratorState.thisObj_TYPE);    cfw.addAStore(thisObjLocal);    if (epilogueLabel == -1) {      epilogueLabel=cfw.acquireLabel();    }    List<Node> targets=((FunctionNode)scriptOrFn).getResumptionPoints();    if (targets != null) {      generateGetGeneratorResumptionPoint();      generatorSwitch=cfw.addTableSwitch(0,targets.size() + GENERATOR_START);      generateCheckForThrowOrClose(-1,false,GENERATOR_START);    }  }  if (fnCurrent == null) {    if (scriptOrFn.getRegexpCount() != 0) {      scriptRegexpLocal=getNewWordLocal();      codegen.pushRegExpArray(cfw,scriptOrFn,contextLocal,variableObjectLocal);      cfw.addAStore(scriptRegexpLocal);    }  }  if (compilerEnv.isGenerateObserverCount())   saveCurrentCodeOffset();  if (hasVarsInRegs) {    int parmCount=scriptOrFn.getParamCount();    if (parmCount > 0 && !inDirectCallFunction) {      cfw.addALoad(argsLocal);      cfw.add(ByteCode.ARRAYLENGTH);      cfw.addPush(parmCount);      int label=cfw.acquireLabel();      cfw.add(ByteCode.IF_ICMPGE,label);      cfw.addALoad(argsLocal);      cfw.addPush(parmCount);      addScriptRuntimeInvoke("padArguments","([Ljava/lang/Object;I" + ")[Ljava/lang/Object;");      cfw.addAStore(argsLocal);      cfw.markLabel(label);    }    int paramCount=fnCurrent.fnode.getParamCount();    int varCount=fnCurrent.fnode.getParamAndVarCount();    boolean[] constDeclarations=fnCurrent.fnode.getParamAndVarConst();    short firstUndefVar=-1;    for (int i=0; i != varCount; ++i) {      short reg=-1;      if (i < paramCount) {        if (!inDirectCallFunction) {          reg=getNewWordLocal();          cfw.addALoad(argsLocal);          cfw.addPush(i);          cfw.add(ByteCode.AALOAD);          cfw.addAStore(reg);        }      } else       if (fnCurrent.isNumberVar(i)) {        reg=getNewWordPairLocal(constDeclarations[i]);        cfw.addPush(0.0);        cfw.addDStore(reg);      } else {        reg=getNewWordLocal(constDeclarations[i]);        if (firstUndefVar == -1) {          Codegen.pushUndefined(cfw);          firstUndefVar=reg;        } else {          cfw.addALoad(firstUndefVar);        }        cfw.addAStore(reg);      }      if (reg >= 0) {        if (constDeclarations[i]) {          cfw.addPush(0);          cfw.addIStore(reg + (fnCurrent.isNumberVar(i) ? 2 : 1));        }        varRegisters[i]=reg;      }      if (compilerEnv.isGenerateDebugInfo()) {        String name=fnCurrent.fnode.getParamOrVarName(i);        String type=fnCurrent.isNumberVar(i) ? "D" : "Ljava/lang/Object;";        int startPC=cfw.getCurrentCodeOffset();        if (reg < 0) {          reg=varRegisters[i];        }        cfw.addVariableDescriptor(name,type,startPC,reg);      }    }    return;  }  if (isGenerator)   return;  String debugVariableName;  if (fnCurrent != null) {    debugVariableName="activation";    cfw.addALoad(funObjLocal);    cfw.addALoad(variableObjectLocal);    cfw.addALoad(argsLocal);    addScriptRuntimeInvoke("createFunctionActivation","(Lorg/mozilla/javascript/NativeFunction;" + "Lorg/mozilla/javascript/Scriptable;" + "[Ljava/lang/Object;"+ ")Lorg/mozilla/javascript/Scriptable;");    cfw.addAStore(variableObjectLocal);    cfw.addALoad(contextLocal);    cfw.addALoad(variableObjectLocal);    addScriptRuntimeInvoke("enterActivationFunction","(Lorg/mozilla/javascript/Context;" + "Lorg/mozilla/javascript/Scriptable;" + ")V");  } else {    debugVariableName="global";    cfw.addALoad(funObjLocal);    cfw.addALoad(thisObjLocal);    cfw.addALoad(contextLocal);    cfw.addALoad(variableObjectLocal);    cfw.addPush(0);    addScriptRuntimeInvoke("initScript","(Lorg/mozilla/javascript/NativeFunction;" + "Lorg/mozilla/javascript/Scriptable;" + "Lorg/mozilla/javascript/Context;"+ "Lorg/mozilla/javascript/Scriptable;"+ "Z"+ ")V");  }  enterAreaStartLabel=cfw.acquireLabel();  epilogueLabel=cfw.acquireLabel();  cfw.markLabel(enterAreaStartLabel);  generateNestedFunctionInits();  if (compilerEnv.isGenerateDebugInfo()) {    cfw.addVariableDescriptor(debugVariableName,"Lorg/mozilla/javascript/Scriptable;",cfw.getCurrentCodeOffset(),variableObjectLocal);  }  if (fnCurrent == null) {    popvLocal=getNewWordLocal();    Codegen.pushUndefined(cfw);    cfw.addAStore(popvLocal);    int linenum=scriptOrFn.getEndLineno();    if (linenum != -1)     cfw.addLineNumberEntry((short)linenum);  } else {    if (fnCurrent.itsContainsCalls0) {      itsZeroArgArray=getNewWordLocal();      cfw.add(ByteCode.GETSTATIC,"org/mozilla/javascript/ScriptRuntime","emptyArgs","[Ljava/lang/Object;");      cfw.addAStore(itsZeroArgArray);    }    if (fnCurrent.itsContainsCalls1) {      itsOneArgArray=getNewWordLocal();      cfw.addPush(1);      cfw.add(ByteCode.ANEWARRAY,"java/lang/Object");      cfw.addAStore(itsOneArgArray);    }  }}  }
class C{  public FreeRingSoft(int capacity){  _ringQueue=new QueueRingFixed<SoftReference<T>>(capacity);}  }
class C{  void notifyComplete(){synchronized (waitObject) {    isComplete=true;    waitObject.notifyAll();    if (listener != null) {      listener.onSuccess(this);    }  }}  }
class C{  public Money_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_amount=jcas.getRequiredFeatureDE(casType,"amount","uima.cas.Double",featOkTst);  casFeatCode_amount=(null == casFeat_amount) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_amount).getCode();  casFeat_currency=jcas.getRequiredFeatureDE(casType,"currency","uima.cas.String",featOkTst);  casFeatCode_currency=(null == casFeat_currency) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_currency).getCode();}  }
class C{  public static AfterProcessingTime pastFirstElementInPane(){  return new AfterProcessingTime(IDENTITY);}  }
class C{  private static boolean isTwoBytesSequence(byte b){  return -64 <= b && b <= -33;}  }
class C{  public boolean shouldDraw(){  boolean redraw=super.shouldDraw();  if (vel == null)   vel=new Vector2D(0,0);  if (pos == null)   pos=new Vector2D(0,0);  if (_pos == null)   _pos=new Vector2D(0,0);  Vector2D a=new Vector2D(mOrientation[2] * 0.01,-mOrientation[1] * 0.01);  a=a.add(pos.scalarMultiply(-0.01));  vel=vel.scalarMultiply(0.9);  vel=vel.add(a);  pos=pos.add(vel);  float dist=(float)pos.distance(new Vector2D(0,0));  float maxDist=(float)(circleSize - circleSize * batteryPct);  if (dist > maxDist) {    Vector2D n=pos.normalize().scalarMultiply(-1);    Vector2D reflection=vel.subtract(n.scalarMultiply(2 * vel.dotProduct(n)));    pos=n.scalarMultiply(-maxDist);    vel=reflection.scalarMultiply(0.5);  }  if (_colorTransitionToCharged != colorTransitionToCharged || _colorTransitionToCritical != _colorTransitionToCritical) {    redraw=true;  }  if (_batteryPct != batteryPct) {    redraw=true;  }  if (_textAlpha != textAlpha) {    redraw=true;  }  if (_pos.distance(pos) > 0.001) {    redraw=true;  }  if (redraw) {    _colorTransitionToCharged=animateValue(_colorTransitionToCharged,colorTransitionToCharged,0.03);    _colorTransitionToCritical=animateValue(_colorTransitionToCritical,colorTransitionToCritical,0.03);    _pos=pos;    _batteryPct=batteryPct;    return true;  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public ZoomControl(){}  }
class C{  public static <T>Publisher<T> publisher(Observable<T> observable){  return RxReactiveStreams.toPublisher(observable);}  }
class C{  private File prepareLogDir(String logDirName) throws Exception {  File logDir=new File(logDirName);  if (logDir.exists()) {    logger.info("Clearing log dir: " + logDir.getAbsolutePath());    for (    File f : logDir.listFiles()) {      f.delete();    }    logDir.delete();  }  if (logDir.exists()) {    throw new Exception("Unable to clear log directory, test cannot start: " + logDir.getAbsolutePath());  }  logDir.mkdirs();  return logDir;}  }
class C{  public JclLogger(Log impl){  assert impl != null;  this.impl=impl;}  }
class C{  private void parseParameter(String token,String value){  if (token != null && value != null) {    if (token.equalsIgnoreCase(NONCE_TOKEN)) {      mNonce=value;      return;    }    if (token.equalsIgnoreCase(STALE_TOKEN)) {      parseStale(value);      return;    }    if (token.equalsIgnoreCase(OPAQUE_TOKEN)) {      mOpaque=value;      return;    }    if (token.equalsIgnoreCase(QOP_TOKEN)) {      mQop=value.toLowerCase(Locale.ROOT);      return;    }    if (token.equalsIgnoreCase(ALGORITHM_TOKEN)) {      mAlgorithm=value.toLowerCase(Locale.ROOT);      return;    }  }}  }
class C{  GridDeploymentRequest(Object resTopic,IgniteUuid ldrId,String rsrcName,boolean isUndeploy){  assert isUndeploy || resTopic != null;  assert isUndeploy || ldrId != null;  assert rsrcName != null;  this.resTopic=resTopic;  this.ldrId=ldrId;  this.rsrcName=rsrcName;  this.isUndeploy=isUndeploy;}  }
class C{  private static List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    if (line.startsWith("#")) {      continue;    }    String[] fields=line.split("\t");    if (fields.length != 10) {      throw new IOException("Invalid file format. Line needs to have 10 tab-separated fields, but it has " + fields.length + ": ["+ line+ "]");    }    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  public void testFlipBitZeroOutside2(){  byte aBytes[]={0};  int aSign=0;  int number=63;  byte rBytes[]={0,-128,0,0,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue("incorrect value",resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void parseEncoding(PDFObject encoding) throws IOException {  differences=new HashMap<Character,String>();  PDFObject baseEncObj=encoding.getDictRef("BaseEncoding");  if (baseEncObj != null) {    baseEncoding=getBaseEncoding(baseEncObj.getStringValue());  }  PDFObject diffArrayObj=encoding.getDictRef("Differences");  if (diffArrayObj != null) {    PDFObject[] diffArray=diffArrayObj.getArray();    int curPosition=-1;    for (int i=0; i < diffArray.length; i++) {      if (diffArray[i].getType() == PDFObject.NUMBER) {        curPosition=diffArray[i].getIntValue();      } else       if (diffArray[i].getType() == PDFObject.NAME) {        Character key=new Character((char)curPosition);        differences.put(key,diffArray[i].getStringValue());        curPosition++;      } else {        throw new IllegalArgumentException("Unexpected type in diff array: " + diffArray[i]);      }    }  }}  }
class C{  public ReactiveSensors(Context context){  this.sensorManager=(SensorManager)context.getSystemService(Context.SENSOR_SERVICE);}  }
class C{  public static <T>int binarySearchCeil(List<? extends Comparable<? super T>> list,T key,boolean inclusive,boolean stayInBounds){  int index=Collections.binarySearch(list,key);  index=index < 0 ? ~index : (inclusive ? index : (index + 1));  return stayInBounds ? Math.min(list.size() - 1,index) : index;}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:14.537 -0500",hash_original_method="47D8C519D80AD7FA8ACDBB9291AF9C1F",hash_generated_method="98BBA26B4299357852C815497BEBBE80") public boolean isVarArgs(){  int modifiers=getMethodModifiers(declaringClass,slot);  return 1 == ((modifiers & Modifier.VARARGS) + 0);}  }
class C{  public Builder withButton(String buttonText,View.OnClickListener onClickListener){  this.buttonText=buttonText;  this.onClickListener=onClickListener;  return this;}  }
class C{  private static Pair<String,String> offsetLSR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String index=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,dw,"-" + immediateNodeValue,qw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,dWordBitMask,dw,index));  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,dWordBitMask,dw,address));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  private Mode makeBuiltinMode(String name,Class cls){  Mode mode=lookupCreateMode(name);  ActionSet actions=new ActionSet();  ModeUsage modeUsage=new ModeUsage(Mode.CURRENT,mode);  if (cls == AttachAction.class)   actions.setResultAction(new AttachAction(modeUsage)); else   if (cls == AllowAction.class)   actions.addNoResultAction(new AllowAction(modeUsage)); else   if (cls == UnwrapAction.class)   actions.setResultAction(new UnwrapAction(modeUsage)); else   actions.addNoResultAction(new RejectAction(modeUsage));  mode.bindElement(NamespaceSpecification.ANY_NAMESPACE,NamespaceSpecification.DEFAULT_WILDCARD,actions);  mode.noteDefined(null);  AttributeActionSet attributeActions=new AttributeActionSet();  if (attributesSchema)   attributeActions.setReject(true); else   attributeActions.setAttach(true);  mode.bindAttribute(NamespaceSpecification.ANY_NAMESPACE,NamespaceSpecification.DEFAULT_WILDCARD,attributeActions);  return mode;}  }
class C{  public void cleanContainerTree(String ID){  runURLRequest("ContainerTree",ID);}  }
class C{  public FacebookSdkNotInitializedException(String message,Throwable throwable){  super(message,throwable);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.965 -0500",hash_original_method="4A4AB033B083C67B221AE13033277F17",hash_generated_method="544A6B6EDA131E6A46BEE222A46A2B42") public static final boolean isTokenChar(char c){  if (isAlphaDigit(c))   return true; else switch (c) {case '-':case '.':case '!':case '%':case '*':case '_':case '+':case '`':case '\'':case '~':    return true;default :  return false;}}  }
class C{  private static <M extends Model>void findDepth(Hierarchy<Cluster<M>> hier,Cluster<M> cluster,int[] size){  if (hier.numChildren(cluster) > 0) {    for (Iter<Cluster<M>> iter=hier.iterChildren(cluster); iter.valid(); iter.advance()) {      findDepth(hier,iter.get(),size);    }    size[0]+=1;  } else {    size[1]+=1;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:34.785 -0500",hash_original_method="CD96C9BBB654EF18C372B5A0EBA556A4",hash_generated_method="A73B8541DE31A33ED9FC1F4ABEBF931E") public RouteSpecificPool(HttpRoute route,int maxEntries){  this.route=route;  this.maxEntries=maxEntries;  this.freeEntries=new LinkedList<BasicPoolEntry>();  this.waitingThreads=new LinkedList<WaitingThread>();  this.numEntries=0;}  }
class C{  public BaseCalendarEvent(String title,String description,String location,int color,Calendar startTime,Calendar endTime,boolean allDay){  this.mTitle=title;  this.mDescription=description;  this.mLocation=location;  this.mColor=color;  this.mStartTime=startTime;  this.mEndTime=endTime;  this.mAllDay=allDay;}  }
class C{  private static <T extends Object>T[] arraysCopyOf(T[] original,int newLength){  T[] copy=newArray(original,newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public static Number sinh(Number a){  return Math.sinh(a.doubleValue());}  }
class C{  public void testMultivariateCondMIforCoupledDataFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4ColsPairedOneStepNoisyDependence-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={4};  double[] expectedFromTRENTOOL={0.1400645};  System.out.println("Kraskov TE - multivariate coupled data 1, k=2,l=2");  System.out.println("  (0->2)");  checkTEForGivenData(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,2),2,2,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{-0.0181459};  System.out.println("  (2->0):");  checkTEForGivenData(MatrixUtils.selectColumn(data,2),MatrixUtils.selectColumn(data,0),2,2,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.1639186};  System.out.println("  (1->3):");  checkTEForGivenData(MatrixUtils.selectColumn(data,1),MatrixUtils.selectColumn(data,3),2,2,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0036976};  System.out.println("  (3->1):");  checkTEForGivenData(MatrixUtils.selectColumn(data,3),MatrixUtils.selectColumn(data,1),2,2,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0072169};  System.out.println("  (0->1) but with k=1,l=1:");  checkTEForGivenData(MatrixUtils.selectColumn(data,0),MatrixUtils.selectColumn(data,1),1,1,kNNs,expectedFromTRENTOOL);  expectedFromTRENTOOL=new double[]{0.0011738};  System.out.println("  (1->2) but with k=1,l=1:");  checkTEForGivenData(MatrixUtils.selectColumn(data,1),MatrixUtils.selectColumn(data,2),1,1,kNNs,expectedFromTRENTOOL);}  }
class C{  public boolean equals(Object otherScheme){  if (!(otherScheme instanceof SyntaxScheme)) {    return false;  }  Style[] otherSchemes=((SyntaxScheme)otherScheme).styles;  int length=styles.length;  for (int i=0; i < length; i++) {    if (styles[i] == null) {      if (otherSchemes[i] != null) {        return false;      }    } else     if (!styles[i].equals(otherSchemes[i])) {      return false;    }  }  return true;}  }
class C{  public void test_setByteLjava_lang_ObjectIB(){  byte[] x={0};  boolean thrown=false;  try {    Array.setByte(x,0,(byte)1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getByte(x,0));  try {    Array.setByte(new Object(),0,(byte)9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setByte(x,4,(byte)9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setByte(null,0,(byte)0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public static void write(File file,CharSequence data,String encoding,boolean append) throws IOException {  String str=data == null ? null : data.toString();  writeStringToFile(file,str,encoding,append);}  }
class C{  @SuppressWarnings("javadoc") private TransformMatrix2D(double a,double b,double c,double d,double e,double f){  this.a=a;  this.b=b;  this.c=c;  this.d=d;  this.e=e;  this.f=f;}  }
class C{  public static boolean isFloatingPointNumber(Number number){  if ((number instanceof Float) || (number instanceof Double)) {    return true;  }  return false;}  }
class C{  public void deleteQuery(final IRI query,final String userName) throws RepositoryException, UpdateExecutionException, MalformedQueryException {  final QueryStringBuilder delete=new QueryStringBuilder(DELETE);  delete.replaceQuote(QueryStorage.USER_NAME,userName);  delete.replaceURI(QUERY,query.toString());  updateQueryRepository(delete.toString());}  }
class C{  @AntDoc("The name of a test to run. If no `<test>`s are given then all " + "tests in the given `<module>`/`<moduleset>`/`<sourcemodule>`") @OptionEquivalent public void addTest(Test test){  this.tests.add(test);}  }
class C{  protected void register(String projectPath,LanguageDescription languageDescription,ServerCapabilities capabilities){  InitializeResult initializeResult=new InitializeResultImpl(capabilities,languageDescription);  for (  String ext : languageDescription.getFileExtensions()) {    ProjectExtensionKey key=createProjectKey(projectPath,ext);    projectToInitResult.put(key,initializeResult);    if (callbackMap.containsKey(key)) {      Callback<InitializeResult,Throwable> callback=callbackMap.remove(key);      callback.onSuccess(initializeResult);    }  }}  }
class C{  public AnnotationMember(String name,Object val){  this.name=name;  value=val == null ? NO_VALUE : val;  if (value instanceof Throwable) {    tag=ERROR;  } else   if (value.getClass().isArray()) {    tag=ARRAY;  } else {    tag=OTHER;  }}  }
class C{  public ProtocolDecoderException(String message){  super(message);}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 rp){  final long startTime=getTimestamp();  if (rp == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"{}: processor not found",this);    }    return;  }  if (rp instanceof RemoveAllResponse) {    RemoveAllResponse processor=(RemoveAllResponse)rp;    processor.setResponse(this);  }  rp.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} Processed {}",rp,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  public HunspellStemFilterFactory(Map<String,String> args){  super(args);  dictionaryFiles=require(args,PARAM_DICTIONARY);  affixFile=get(args,PARAM_AFFIX);  ignoreCase=getBoolean(args,PARAM_IGNORE_CASE,false);  longestOnly=getBoolean(args,PARAM_LONGEST_ONLY,false);  getBoolean(args,"strictAffixParsing",true);  getInt(args,"recursionCap",0);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public MockTransactionBroadcaster(Wallet wallet){  lock.lock();  try {    this.wallet=wallet;    wallet.setTransactionBroadcaster(this);    wallet.getPendingTransactions();  }  finally {    lock.unlock();  }}  }
class C{  public void registerPackager(String containerId,PackagerType packagerType,String packagerClassName){  registerImplementation(new RegistrationKey(new SimpleContainerIdentity(containerId),packagerType.getType()),packagerClassName);}  }
class C{  public void addHeaderView(View view){  mHeaderViews.add(view);  notifyDataSetChanged();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private Response makeRequest(Command cmd,@Nullable String cacheName,@Nullable Object key,@Nullable Object val,@Nullable Long... extras) throws IgniteCheckedException {  assert cmd != null;  int opaque=opaqueCntr.getAndIncrement();  try {    sock.getOutputStream().write(createPacket(cmd,cacheName,key,val,opaque,extras));  } catch (  IOException e) {    throw new IgniteCheckedException("Failed to send packet.",e);  }  while (true) {    try {      Response res=queue.take();      if (res == QUIT_RESP)       return res;      if (res.getOpaque() == opaque) {        if (!res.isSuccess() && res.getObject() != null)         throw new IgniteCheckedException((String)res.getObject()); else         return res;      } else       queue.add(res);    } catch (    InterruptedException e) {      throw new IgniteCheckedException("Interrupted while waiting for response.",e);    }  }}  }
class C{  public IndicesStatsRequest groups(String... groups){  flags.groups(groups);  return this;}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  private void mountPages(){  final ApplicationContext ctx=WebApplicationContextUtils.getWebApplicationContext(this.getServletContext());  final WicketPagesMounter mounter=ctx.getBean("wicketPagesMounter",WicketPagesMounter.class);  mounter.mountPages(this);  loginPageProvider=mounter.getLoginPageProvider();  homePageProvider=mounter.getHomePageProvider();  if (loginPageProvider == null) {    ShopCodeContext.getLog(this).error("No login page class was mounted");  }  if (homePageProvider == null) {    ShopCodeContext.getLog(this).error("No home page class was mounted");  }}  }
class C{  public LocalSageFile(File file,String mode) throws IOException {  randomAccessFile=new RandomAccessFile(file,mode);  readonly=!mode.contains("w");}  }
class C{  public String displayMergedLogs(){  return this.logCollator.collateLogs(this.gfManagerAgent);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public boolean mouseClicked(MouseEvent e){  if (!active) {    return false;  }  setClickInterestFromMouseEvent(e);  if (isLeftMouseButton(e)) {    GeometryOfInterest goi=getClickInterest();    if (goi != null) {      if (goi.isLeftButton()) {        leftClick(goi.getGeometry(),e);      } else {        rightClick(goi.getGeometry(),e);      }    } else {      leftClick(e);    }    return consumeEvents;  }  return false;}  }
class C{  private boolean checkAsyncItemLimit(){  return this.asyncQueue.size() >= this.maxAsyncItems;}  }
class C{  public void multiply(Matrix3f rhs){  Matrix3f tmp=new Matrix3f();  tmp.loadMultiply(this,rhs);  load(tmp);}  }
class C{  protected void layoutMinorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    int max=(int)v.getMaximumSpan(axis);    if (max < targetSpan) {      float align=v.getAlignment(axis);      offsets[i]=(int)((targetSpan - max) * align);      spans[i]=max;    } else {      int min=(int)v.getMinimumSpan(axis);      offsets[i]=0;      spans[i]=Math.max(min,targetSpan);    }  }}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof Entry))   return false;  return ((Entry)other).compareTo(blockBuffer,getKeyOffset(),getKeyLength()) == 0;}  }
class C{  public static UserPreferences createDefaultUserPreferences(){  return new UserPreferences();}  }
class C{  public void closeExpired(long timeMillis){  if (timeMillis <= 0)   timeMillis=this.connectionIdleTimeout;  List<DBConnectionWrapper> idleList=new ArrayList<DBConnectionWrapper>();synchronized (this.connections) {    for (int i=this.connections.size() - 1; i >= 0; i--) {      DBConnectionWrapper conn=this.connections.get(i);      if (!conn.isInuse() && conn.isExpired(timeMillis)) {        logger.fine("Remove idle connection from pool (" + conn.getAppUser() + ","+ conn.getDb()+ "), created at "+ conn.getCreateTime());        idleList.add(this.connections.remove(i));      }    }  }  for (  DBConnectionWrapper conn : idleList) {    conn.close();    logger.fine("Closed idle connection (" + conn.getAppUser() + ","+ conn.getDb()+ "), created at "+ conn.getCreateTime());  }}  }
class C{  @Override public void shutdown(){  httpClient.getConnectionManager().shutdown();}  }
class C{  private static String driverVersion(){  Package pkg=Session.class.getPackage();  if (pkg != null && pkg.getImplementationVersion() != null) {    return pkg.getImplementationVersion();  }  return "dev";}  }
class C{  public static boolean containsElement(Object[] array,Object element){  if (array == null) {    return false;  }  for (  Object arrayEle : array) {    if (nullSafeEquals(arrayEle,element)) {      return true;    }  }  return false;}  }
class C{  protected void initializeAllLiveAttributes(){}  }
class C{  public SerialMessage(byte[] a){  super(String.valueOf(a));}  }
class C{  void c1b1a2__c1b1a2c1(){  mv.visitInsn(DUP2_X2);  mv.visitInsn(POP2);  mv.visitInsn(DUP2_X2);  mv.visitInsn(POP);}  }
